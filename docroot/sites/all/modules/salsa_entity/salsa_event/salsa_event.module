<?php

/**
 * @file
 * View and manage supporter's events.
 */

/**
 * Supporter event status signed up.
 */
define('SALSA_EVENT_SIGNED_UP', 'Signed Up');

/**
 * Supporter event status waiting list.
 */
define('SALSA_EVENT_WAITING_LIST', 'Waiting List');

/**
 * Supporter event status cancelled.
 */
define('SALSA_EVENT_CANCELLED', 'Cancelled');

/**
 * Status indicating the sign up phase of event subscriptions..
 */
define('SALSA_EVENT_SUBSCRIPTION_STATE_SUBSCRIBING', 1);

/**
 * Status indicating the waiting list phase of event subscriptions..
 */
define('SALSA_EVENT_SUBSCRIPTION_STATE_WAITING_LIST', 2);

/**
 * Status indicating that the event is already fully booked.
 */
define('SALSA_EVENT_SUBSCRIPTION_STATE_FULL', 3);

/**
 * Implements hook_salsa_object_type_info().
 */
function salsa_event_salsa_object_type_info() {
  return array(
    'event' => array(
      'label' => t('Salsa Event'),
      'entity class' => 'SalsaEntityEvent',
      'entity keys' => array(
        'label' => 'Event_Name',
        'reference' => 'Reference_Name',
      ),
      'view modes' => array(
        'full' => array(
          'label' => t('Full content'),
          'custom settings' => FALSE,
        ),
        'form_only' => array(
          'label' => t('Form only'),
          'custom settings' => FALSE,
        ),
      ),
    ),
    'event_fee' => array(
      'label' => t('Salsa Event Fee'),
    ),
    'event_email_trigger' => array(
      'label' => t('Salsa Event E-Mail trigger'),
    ),
    'supporter_event' => array(
      'label' => t('Salsa Supporter Event'),
    ),
    'supporter_invite' => array(
      'label' => t('Salsa Supporter Invite'),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function salsa_event_block_info() {
  $blocks = array();

  $event_pages = entity_load('salsa_event');
  if (is_array($event_pages)) {
    foreach ($event_pages as $event_page) {
      $blocks[$event_page->event_KEY] = array(
        'info' => $event_page->Reference_Name,
        'cache' => DRUPAL_NO_CACHE,
      );
    }
  }

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function salsa_event_block_view($delta = '') {
  $block = array();
  $event_page = entity_load_single('salsa_event', $delta);

  $block['subject'] = is_object($event_page) ? $event_page->Reference_Name : t('Error loading page');
  $block['content'] = is_object($event_page) ? $event_page->buildContent() : t('Content is currently not available. Please click !reload_link to refresh the page.', array('!reload_link' => l(t('here'), current_path())));

  return $block;
}

/**
 * Implements hook_permission().
 */
function salsa_event_permission() {
  return array(
    'view salsa my event page' => array(
      'title' => t('View Salsa My Event Page'),
    ),
    'create salsa p2p events' => array(
      'title' => t('Create Salsa P2P Events'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function salsa_event_menu() {
  $items['user/%user/salsa_my_events'] = array(
    'title' => 'Events',
    'page callback' => 'salsa_event_home',
    'page arguments' => array(1),
    'access arguments' => array('view salsa my event page'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -8,
  );
  $items['salsa/event/%/cancel'] = array(
    'title' => 'Cancel Event Registration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('salsa_event_cancel_form', 2),
    'access arguments' => array('view salsa my event page'),
  );
  return $items;
}

/**
 * Implements hook_access().
 */
function salsa_event_access($op, $entity = NULL, $account = NULL) {
  return TRUE;
}

/**
 * Implements hook_theme().
 */
function salsa_event_theme() {
  return array(
    'salsa_event_home' => array(
      'variables' => array(
        'upcoming_events' => NULL,
        'my_events' => NULL,
        'attended_events' => NULL,
      ),
    ),
    'salsa_event_registration_info' => array(
      'template' => 'salsa_event_registration_info',
      'path' => drupal_get_path('module', 'salsa_event') . '/theme',
      'variables' => array(
        'event' => NULL,
        'supporter' => NULL,
        'subscribed' => NULL,
        'statuses' => NULL,
      ),
    ),
    'salsa_event_display' => array(
      'template' => 'salsa_event_display',
      'path' => drupal_get_path('module', 'salsa_event') . '/theme',
      'variables' => array('event' => NULL, 'cancel_link' => TRUE),
    ),
  );
}

/**
 * Page callback for events tab.
 */
function salsa_event_home($account) {
  $supporter = salsa_entity_get_supporter();
  $supporter_events = salsa_event_get_supporter_events(NULL, $supporter, array(SALSA_EVENT_SIGNED_UP));

  // @todo These cases are not 100% accurate,
  // I do not know how an event becomes "my event" or "attended event".
  $upcoming_events = array();
  $my_events = array();
  $attended_events = array();
  $event_keys = array();
  if (!empty($supporter_events)) {
    // Get the keys for all related events.
    foreach ($supporter_events as $supporter_event) {
      $event_keys[] = $supporter_event->event_KEY;
    }
    // Load all the related events
    $events = entity_load('salsa_event', $event_keys);
    // Loop over all events and categorize them.
    foreach($events as $event) {
      if ($event->supporter_KEY == $supporter->supporter_KEY) {
        $my_events[] = $event;
      }
      elseif (REQUEST_TIME < strtotime($event->Start)) {
        $upcoming_events[] = $event;
      }
      else {
        $attended_events[] = $event;
      }
    }
  }

  return theme('salsa_event_home', array(
    'upcoming_events' => $upcoming_events,
    'my_events' => $my_events,
    'attended_events' => $attended_events,
  ));
}

/**
 * Provides the markup for the events overview page.
 *
 * @param array $variables
 *   The Drupal theme variables array
 *
 * @return string
 *   The markup for the page.
 */
function theme_salsa_event_home($variables) {
  // Upcoming events.
  $output = '<h3>' . t('Upcoming events that you will be attending') . '</h3>';
  if (!empty($variables['upcoming_events'])) {
    foreach ($variables['upcoming_events'] as $event) {
      $output .= theme('salsa_event_display', array('event' => $event));
    }
  }
  else {
    $output .= '<div>' . t('No upcoming events.') . '</div>';
  }

  // My events.
  if (user_access('create salsa p2p events')) {
    if (!empty($variables['my_events'])) {
      $output .= '<h3>' . t('Events you are the host for:') . '</h3>';
      foreach ($variables['my_events'] as $event) {
        $output .= theme('salsa_event_display', array('event' => $event, 'cancel_link' => FALSE));
      }
    }
    else {
      $output .= '<div>' . t('You are not the host for any events.') . '</div>';
    }
  }

  // Attended events.
  $output .= '<h3>' . t('Events that you have attended') . '</h3>';
  if (!empty($variables['attended_events'])) {
    foreach ($variables['attended_events'] as $event) {
      $output .= theme('salsa_event_display', array('event' => $event));
    }
  }
  else {
    $output .= '<div>' . t('You have not attended any events.') . '</div>';
  }
  return $output;
}

/**
 * Salsa Event form callback.
 */
function salsa_event_form($form, &$form_state, $event, $view_mode = 'full') {
  $form_state['salsa_object'] = $event;
  $form_state['supporter'] = $supporter = salsa_entity_get_supporter();
  $form_state['view_mode'] = $view_mode;
  // Additional data for used to replace tokens in mails.
  $form_state['additional'] = array();
  if (!empty($event->Event_Name)) {
    $form_state['additional']['Event_Name'] = $event->Event_Name;
  }
  // Add guest counter if this event allows guest sign up.
  if (!isset($form_state['guest_count'])) {
    $form_state['guest_count'] = 0;
  }

  if ($view_mode != 'form_only') {
    if ($event->Start || $event->End) {
      $form['Date'] = array(
        '#type' => 'container',
        '#prefix' => '<div class="date">',
        '#suffix' => '</div>',
      );
    }

    if ($event->Start) {
      $form['Date']['Start'] = array(
        '#markup' => '<div>' . t('Starting') . ' ' . format_date(strtotime($event->Start)) . '</div>',
      );
    }

    if ($event->End) {
      $form['Date']['End'] = array(
        '#markup' => '<div>' . t('Ending') . ' ' . format_date(strtotime($event->End)) . '</div>',
      );
    }

    $form['Description'] = array(
      '#markup' => isset($event->Description) ? '<div>' . $event->Description . '</div>' : '',
    );

    $form['Event_Location'] = array(
      '#markup' => '<h2>' . t('Event Location') . '</h2>',
    );

    if ($event->Location_Common_Name) {
      $form['Location_Common_Name'] = array(
        '#markup' => '<div><strong>' . $event->Location_Common_Name . '</strong></div>',
      );
    }

    if ($event->Address) {
      $form['Address'] = array(
        '#markup' => '<div>' . $event->Address . '</div>',
      );
    }

    if ($event->City || $event->State || $event->Zip) {
      $form['City'] = array(
        '#markup' => '<div>' . $event->City . ', ' . $event->State . ' ' . $event->Zip . '</div>',
      );
    }

    // Show google map.
    if (module_exists('gmap3_tools') && $event->Latitude && $event->Longitude) {
      $form['Map'] = array(
        '#markup' => salsa_event_get_map($event),
      );
    }

    if ($event->Directions) {
      $form['Directions_Label'] = array(
        '#markup' => '<div><strong>' . t('Directions') . '</strong></div>',
      );

      $form['Directions'] = array(
        '#markup' => '<div>' . $event->Directions . '</div>',
      );
    }

    if ($event->Map_URL) {
      $form['Map_URL'] = array(
        '#markup' => '<div>' . l(t('Map'), $event->Map_URL, array('attributes' => array('target' => '_blank'))) . '</div>',
      );
    }

    $attendee_info = salsa_event_form_attendee_info($event);
    if (!empty($attendee_info)) {
      $form['attendee_info'] = array(
        '#markup' => '<div>' . $attendee_info . '</div>',
      );
    }
  }

  // Mark all required fields, even if they are not marked in salsa.
  foreach (salsa_event_default_required_fields() as $field) {
    if (!empty($field) && strpos($event->Request, $field) >= 0 && strpos($event->Required, $field) === FALSE) {
      $event->Required .= $field . ',';
    }
  }

  // Check whether the user is already subscribed?
  $subscribed = FALSE;
  if ($supporter) {
    $supporter_events = salsa_event_get_supporter_events($event, $supporter, array(SALSA_EVENT_SIGNED_UP, SALSA_EVENT_WAITING_LIST));
    if (!empty($supporter_events)) {
      $subscribed = reset($supporter_events);
    }
  }

  if ($subscribed) {
    // User is subscribed, show registration informations.
    $supporter_info = entity_get_all_property_info('salsa_supporter_event');
    $callback = $supporter_info['_Status']['options list'];
    $form['Registration_Info_Table'] = array(
      '#markup' => theme('salsa_event_registration_info', array(
        'event' => $event,
        'supporter' => $supporter,
        'subscribed' => $subscribed,
        'statuses' => $callback('_Status', $supporter_info['_Status']),
      )),
    );
  }
  else {
    // Registration for event.
    if ($event->No_Registration == 'false' && salsa_event_get_subscription_state($event) != SALSA_EVENT_SUBSCRIPTION_STATE_FULL) {
      if (empty($event->Deadline) || REQUEST_TIME < strtotime($event->Deadline)) {
        if (isset($supporter->supporter_KEY)) {
          $form['welcome_back'] = array(
            '#type' => 'item',
            '#markup' => '<div><strong>' . t('Welcome back!') . '</strong></div>',
          );

          $form['reset_link'] = array(
            '#type' => 'item',
            '#markup' => '<div>' . t('Not @email? !reset_link. Thank you!', array('@email' => $supporter->Email, '!reset_link' => l(t('Please click here'), 'salsa/supporter/reset', array('query' => array('destination' => current_path()))))) . '</div>',
          );
        }

        salsa_entity_supporter_fieldset($form, $form_state, 'salsa_event_form');

        // Groups checkboxes.
        $optionally_add_to_groups_KEYS = salsa_entity_string_explode($event->groups_KEYS);
        if (!empty($optionally_add_to_groups_KEYS)) {
          $all_groups = entity_load('salsa_groups');
          $groups_options = array();
          foreach ($all_groups as $key => $group) {
            if (in_array($key, $optionally_add_to_groups_KEYS)) {
              $groups_options[$key] = $group->Group_Name;
            }
          }

          $groups_default_value = array();
          if (isset($form_state['supporter']->supporter_KEY)) {
            $supporter_groups = entity_load('salsa_supporter_groups', FALSE, array('supporter_KEY' => $form_state['supporter']->supporter_KEY));
            foreach ($supporter_groups as $supporter_group) {
              $groups_default_value[] = $supporter_group->groups_KEY;
            }
          }
          else {
            $groups_default_value = array_keys($groups_options);
          }

          $form['Groups']['optionally_add_to_groups_KEYS'] = array(
            '#type' => 'checkboxes',
            '#title' => t('Join a group:'),
            '#options' => $groups_options,
            '#default_value' => $groups_default_value,
          );
        }

        // Add the fee selection radios.
        if ($event->This_Event_Costs_Money == 'true' && salsa_event_get_subscription_state($event) != SALSA_EVENT_SUBSCRIPTION_STATE_WAITING_LIST) {
          $fee_options = array();
          if ($form_state['event_fees'] = entity_load('salsa_event_fee', FALSE, array('event_KEY' => $event->event_KEY))) {
            foreach ($form_state['event_fees'] as $fee) {
              $fee_options[$fee->event_fee_KEY] = '<strong>' . salsa_entity_get_amount($fee->amount) . '</strong>&nbsp;' . $fee->Description;
            }
            $form['event_fee_KEY0'] = array(
              '#type' => 'radios',
              '#options' => $fee_options,
              '#required' => TRUE,
              '#title' => t('Select a fee'),
            );
          }
        }

        // Add the guest sign up form.
        if ($event->Allow_Guest_Signup == 'true' && salsa_event_get_subscription_state($event) != SALSA_EVENT_SUBSCRIPTION_STATE_WAITING_LIST && salsa_event_get_free_seats($event) > 0) {
          $form['guests_wrapper'] = array(
            '#type' => 'fieldset',
            '#title' => t('Guests'),
            '#collapsible' => FALSE,
            '#collapsed' => FALSE,
          );
          // Build the rows with the fields.
          // Add wrapper element for the AJAX loaded guests form.
          $form['guests_wrapper']['guest_container'] = array(
            '#type' => 'container',
            '#tree' => TRUE,
            '#prefix' => '<div id="salsa-event-guests-wrapper">',
            '#suffix' => '</div>',
            '#attributes' => array('class' => array('salsa-event-guests-container')),
          );
          $event_fees = !empty($form_state['event_fees']) ? $form_state['event_fees'] : NULL;
          for ($i = 0; $i < $form_state['guest_count']; $i++) {
            $form['guests_wrapper']['guest_container'][$i] = salsa_event_get_guest_row_fields($event->This_Event_Costs_Money == 'true', $event_fees);
          }

          // Add button to sign up guests.
          $form['guests_wrapper']['add_guest'] = array(
            '#type' => 'submit',
            '#value' => t('Add Guest'),
            '#limit_validation_errors' => array(),
            '#submit' => array('salsa_event_add_guest_submit'),
            '#ajax' => array(
              'callback' => 'salsa_event_add_guest_form_ajax',
              'effect' => 'fade',
              'wrapper' => 'salsa-event-guests-wrapper',
            ),
            '#attributes' => array(
              'class' => array('guest-action-add'),
            ),
          );
        }

        // @todo In Salsa, payment form is on second step, there is some preview
        // page before the payment, but this is easier if it is acceptable.
        if ($event->This_Event_Costs_Money == 'true' && salsa_event_get_subscription_state($event) != SALSA_EVENT_SUBSCRIPTION_STATE_WAITING_LIST && !empty($form_state['event_fees'])) {
          // Payment Form.
          $form['payment'] = array(
            '#type' => 'fieldset',
            '#title' => t('Payment Information'),
          );

          $form['payment']['cc_type'] = array(
            '#type' => 'radios',
            '#title' => t('Card Type'),
            '#options' => array(
              'visa' => t('Visa'),
              'mc' => t('MasterCard'),
              'amex' => t('American Express'),
              'disc' => t('Discover'),
            ),
          );

          $form['payment']['cc'] = array(
            '#type' => 'textfield',
            '#title' => t('Card Number'),
            '#description' => t('Please enter your card number with no spaces or dashes.'),
          );

          $form['payment']['ccExpMonth'] = array(
            '#type' => 'select',
            '#title' => t('Expires'),
            '#options' => array(
              '' => '',
            ),
          );

          $months = range(1, 12);
          foreach ($months as $month) {
            if ($month < 10) {
              $month = '0' . $month;
            }
            $form['payment']['ccExpMonth']['#options'][$month] = $month;
          }

          $currentYear = date('Y', time());
          $years = range($currentYear, $currentYear + 10);
          $form['payment']['ccExpYear'] = array(
            '#type' => 'select',
            '#options' => array(
              '' => '',
            ),
            '#default_value' => '',
          );
          foreach ($years as $year) {
            $form['payment']['ccExpYear']['#options'][substr($year, -2)] = $year;
          }

          $form['payment']['CVV2'] = array(
            '#type' => 'textfield',
            '#title' => t('Security Code'),
            '#field_suffix' => l(t("What's This?"), '#'),
            '#size' => 5,
            '#maxlength' => 4,
            '#required' => TRUE,
          );

          // Change form action to proceed payment.
          $form['#action'] = variable_get('salsa_event_action_url', salsa_event_action_url($form_state));
          salsa_event_hidden_fields($form, $form_state);
        }

        $label = (salsa_event_get_subscription_state($event) == SALSA_EVENT_SUBSCRIPTION_STATE_WAITING_LIST) ? t('Attend Waiting List') : t('Register');
        // Submit button.
        $form['register'] = array(
          '#type' => 'submit',
          '#value' => $label,
        );
      }
      else {
        $form['Deadline_MSG'] = array(
          '#markup' => '<div>' . t('The registration deadline for this event has passed.') . '</div>',
        );
      }
    }
  }

  return $form;
}

/**
 * Salsa Event form validate callback.
 */
function salsa_event_form_validate($form, &$form_state) {
  $event = $form_state['salsa_object'];
  // Check if the event is already full.
  if (salsa_event_get_subscription_state($event) == SALSA_EVENT_SUBSCRIPTION_STATE_FULL) {
    form_set_error(NULL, t('This event is already fully booked.'));
  }
  // Check if a supporter with his e-mail address is already signed up.
  salsa_event_validate_existing_signup($form_state['values']['Email'], $event, 'Email');
  // Initialize the counter with 1 for the supporter.
  $count = 1;
  // Check guest info.
  if (!empty($form_state['values']['guest_container'])) {
    foreach ($form_state['values']['guest_container'] as $delta => $values) {
      if (salsa_event_guest_info_isset($values)) {
        // Check if some field value is missing.
        if (empty($values['first_name']) || empty($values['last_name']) || empty($values['mail'])) {
          form_set_error('guest_container][' . $delta, t('Please complete the information for your guest nr. !nr.', array('!nr' => ($delta + 1))));
        }
        // Check if email address of guest is correct.
        if (!valid_email_address($values['mail'])) {
          form_set_error('guest_container][' . $delta . '][mail', t('The e-mail address for guest nr. !nr is not valid.', array('!nr' => ($delta + 1))));
        }
        // Check if guest email is already signed up.
        salsa_event_validate_existing_signup($values['mail'], $event, 'guest_container][' . $delta . '][mail');
        // Count guests to prevent overbooking.
        $count++;
      }
    }
  }
  if ((salsa_event_count_attendees($event) + $count) > $event->Maximum_Attendees) {
    form_set_error(NULL, t('You can\'t sign up all of your guests. The maximum you can sign up to this event is currently !max.'), array('!max' => $event->Maximum_Attendees - salsa_event_count_attendees($event)));
  }
}

/**
 * Validation helper to check if an email was signed up already.
 *
 * @param string $mail
 *   Email address to check for.
 * @param object $event
 *   The salsa event object.
 * @param string $element
 *   The name of the checked form element.
 */
function salsa_event_validate_existing_signup($mail, $event, $element) {
  // Load the supporter.
  $entities = entity_load('salsa_supporter', FALSE, array('Email' => $mail));
  if (!empty($entities)) {
    $supporter = reset($entities);
    // Load the supporter events (signups).
    $supporter_events = salsa_event_get_supporter_events($event, $supporter, array(
      SALSA_EVENT_SIGNED_UP,
      SALSA_EVENT_WAITING_LIST
    ));
    if (!empty($supporter_events)) {
      form_set_error($element, t('This email address was already signed up for this event.'));
      return;
    }
  }
  // @todo maybe add a supporter_invite condition later.
  $conditions = array(
    'event_KEY' => $event->event_KEY,
    'Email' => $mail,
  );
  // Load the guests.
  $entities = entity_load('salsa_supporter_invite', FALSE, $conditions);
  if (!empty($entities)) {
    form_set_error($element, t('This email address was already signed up as a guest invitation for this event.'));
  }
}

/**
 * Predicate function, checks if any guest row field was populated.
 *
 * @param array $values
 *   Contains the values of a guest row.
 *
 * @return bool
 *   Returns TRUE if there is some value in the guest row.
 */
function salsa_event_guest_info_isset($values) {
  if (!empty($values['first_name']) || !empty($values['last_name']) || !empty($values['mail'])) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Salsa Event form submit callback.
 */
function salsa_event_form_submit($form, &$form_state) {
  // Salsa events use a separate table for the trigger emails, override to avoid
  // a specific check in the generic function.
  $event = $form_state['salsa_object'];

  $event->email_trigger_KEYS = implode(',', salsa_event_get_email_trigger_key($event));
  // This is useful for tokens in confirmation mails.
  salsa_entity_supporter_fieldset_submit($form, $form_state);

  $supporter = $form_state['supporter'];
  if (isset($form_state['values']['optionally_add_to_groups_KEYS'])) {
    $submitted_groups_KEYS = array_filter($form_state['values']['optionally_add_to_groups_KEYS']);
    if (!empty($submitted_groups_KEYS)) {
      salsa_entity_add_supporter_groups($supporter, $submitted_groups_KEYS);
    }
  }

  // Get the required groups keys in separate request because they are not
  // available in the XML based queries.
  $key = 'required$groups_KEYS';
  $response = json_decode(salsa_api()->query('/api/getObjects.sjs', 'json&object=event&condition=event_KEY=' . $event->event_KEY . '&include=' . urlencode($key)));
  $required_groups_info = (array)$response[0];
  if (!empty($required_groups_info[$key])) {
    // Assign supporter to the groups if there are any.
    $groups_keys = salsa_entity_string_explode($required_groups_info[$key]);
    if (!empty($groups_keys)) {
      salsa_entity_add_supporter_groups($supporter, $groups_keys);
    }
  }
  $supporter->save();

  // Save the guests that the supporter signed up.
  if (!empty($form_state['values']['guest_container'])) {
    $supporter_invites = array();
    foreach ($form_state['values']['guest_container'] as $values) {
      // Save the guest if the row was filled out.
      if (salsa_event_guest_info_isset($values)) {
        // Add relevant values, that are not populated with defaults by salsa.
        $entity_values = array(
          'supporter_KEY' => $form_state['supporter']->supporter_KEY,
          'event_KEY' => $event->event_KEY,
          'Email' => $values['mail'],
          'First_Name' => $values['first_name'],
          'Last_Name' => $values['last_name'],
        );
        $supporter_invite = entity_create('salsa_supporter_invite', $entity_values);
        // Add tags to supporter invite if there are any assigned on the event.
        if ($tags = $event->getTags()) {
          $supporter_invite->additional['tag'] = implode(',', $tags);
        }
        $supporter_invites[] = $supporter_invite;
      }
    }
  }

  // @todo This submit method is used only in case when the event
  // does not require a subscription (payment). In order to process the payment
  // should be used processDonate.jsp file as before.

  $values = array(
    'supporter_KEY' => $form_state['supporter']->supporter_KEY,
    'event_KEY' => $event->event_KEY,
    '_Type' => 'Supporter',
    '_Status' => (salsa_event_get_subscription_state($event) == SALSA_EVENT_SUBSCRIPTION_STATE_SUBSCRIBING) ? SALSA_EVENT_SIGNED_UP : SALSA_EVENT_WAITING_LIST,
  );
  $supporter_event = entity_create('salsa_supporter_event', $values);
  // Add number of additional attendees if any guests were signed up.
  if (!empty($supporter_invites)) {
    $supporter_event->Additional_Attendees = count($supporter_invites);
  }
  // Add tags to supporter event if there are any assigned on the event.
  if ($tags = $event->getTags()) {
    $supporter_event->additional['tag'] = implode(',', $tags);
  }
  $supporter_event->save();

  if (!empty($supporter_invites)) {
    // Loop through the guests, set the supporter event key and save.
    foreach ($supporter_invites as $supporter_invite) {
      $supporter_invite->supporter_event_KEY = $supporter_event->supporter_event_KEY;
      $supporter_invite->save();
    }
  }

  drupal_set_message(t('Thank you for signing up! We look forward to seeing you.'));

  // @todo How to dynamically redirect to the appropriate tell a friend page?
  // @todo Forward event_KEY that we could create predefined message text.
  if ($event->redirect_path) {
    $form_state['redirect'] = $event->redirect_path;
  }
}

/**
 * Adds the information about the available seats to an event form.
 *
 * @param object $event
 *   Salsa event object
 * @param object $signed_up
 *   Flag indicating if the if the supporter is already signed up.
 */
function salsa_event_form_attendee_info($event, $signed_up = FALSE) {
  $info = '';
  if (!empty($event->Maximum_Attendees)) {
    if (salsa_event_get_subscription_state($event) == SALSA_EVENT_SUBSCRIPTION_STATE_SUBSCRIBING) {
      $replacements = array(
        '@max' => $event->Maximum_Attendees,
      );
      $info = format_plural(salsa_event_count_attendees($event), 'This event is limited to @max attendees. @count is currently signed up.', 'This event is limited to @max attendees. @count are currently signed up.' , $replacements);
    }
    elseif (!empty($event->Maximum_Waiting_List_Size) && salsa_event_get_subscription_state($event) == SALSA_EVENT_SUBSCRIPTION_STATE_WAITING_LIST) {
      $conditional_part = (!$signed_up) ? ' But you can still try to attend it using the waiting list.<br />' : '';
      $replacements = array(
        '!conditional_part' => $conditional_part,
        '@max' => $event->Maximum_Waiting_List_Size,
      );
      $info = format_plural($event->Maximum_Waiting_List_Size - salsa_event_count_attendees($event, SALSA_EVENT_WAITING_LIST),
        'This event is already fully booked.!conditional_part Currently there is @count of total @max places available on the waiting list.',
        'This event is already fully booked.!conditional_part Currently there are @count of total @max places available on the waiting list.',
        $replacements
      );
    }
    elseif (!empty($event->Maximum_Waiting_List_Size) && salsa_event_get_subscription_state($event) == SALSA_EVENT_SUBSCRIPTION_STATE_FULL) {
      $info = t('This event is already fully booked.');
    }
  }
  return $info;
}

/**
 * Helper function that returns the hidden fields used on Event Page.
 */
function salsa_event_hidden_fields(&$form, $form_state) {
  $form['table'] = array(
    '#type' => 'hidden',
    '#value' => 'supporter',
  );

  $form['key'] = array(
    '#type' => 'hidden',
    '#value' => $form_state['supporter'] ? $form_state['supporter']->supporter_KEY : '',
  );

  $form['required'] = array(
    '#type' => 'hidden',
    '#value' => $form_state['salsa_object']->Required,
  );

  $form['requested'] = array(
    '#type' => 'hidden',
    '#value' => $form_state['salsa_object']->Request,
  );

  $form['event_KEY'] = array(
    '#type' => 'hidden',
    '#value' => $form_state['salsa_object']->event_KEY,
  );
}

/**
 * Function that defines required fields for event module.
 *
 * @return array
 *   Default required fields.
 */
function salsa_event_default_required_fields() {
  return array(
    'First_Name',
    'Last_Name',
    'Email',
  );
}

/**
 * Function that returns action URL for Event register page
 * (used only when the event requires payment).
 */
function salsa_event_action_url($form_state) {
  return variable_get('salsa_api_url', NULL) . '/o/' . $form_state['salsa_object']->organization_KEY . '/p/salsa/event/common/public/process.sjs';
}

/**
 * Helper function that calls gmap3_tools module.
 */
function salsa_event_get_map($event) {
  module_load_include('inc', 'gmap3_tools');

  $marker_content = '<strong>' . $event->Location_Common_Name . '</strong><br />';
  $marker_content .= $event->Address . '<br />';
  $marker_content .= $event->City . ', ' . $event->State . ' ' . $event->Zip;

  gmap3_tools_add_map(array(
    'mapId' => 'map-canvas',
    'mapOptions' => array(
      'zoom' => 12,
    ),
    'markers' => array(
      gmap3_tools_create_marker($event->Latitude, $event->Longitude, $event->Location_Common_Name, $marker_content),
    ),
    'gmap3ToolsOptions' => array(
      'defaultMarkersPosition' => GMAP3_TOOLS_DEFAULT_MARKERS_POSITION_CENTER,
    ),
  ));

  return '<div id="map-canvas" style="width:100%; height:400px"></div>';
}

/**
 * Getter function to retrieve available places for an event or a waiting list.
 *
 * @param object $event
 *   The salsa event object.
 * @param string $status
 *   The status of the salsa support event.
 */
function salsa_event_count_attendees($event, $status = SALSA_EVENT_SIGNED_UP) {
  $cache = &drupal_static(__FUNCTION__, array());

  // Allow to easily mock a attendee count for tests.
  if ($mock = variable_get('salsa_event_count_attendee_mock', array())) {
    $cache = $mock;
  }
  if (!isset($cache[$event->event_KEY][$status])) {
    // Load the corresponding supporter event objects..
    $query = new EntityFieldQuery();
    $result = $query->entityCondition('entity_type', 'salsa_supporter_event')
      ->propertyCondition('event_KEY', $event->event_KEY)
      ->propertyCondition('_Status', $status)
      ->execute();

    // Return if there were no supporter events found.
    $entities = reset($result);
    if (empty($entities)) {
      return 0;
    }

    // Count the signed up supporters and their guests.
    $count = 0;
    foreach ($entities as $entity_id => $entity) {
      $count++;
      if (!empty($entity->Additional_Attendees)) {
        $count += $entity->Additional_Attendees;
      }
    }
    $cache[$event->event_KEY][$status] = $count;
  }
  return $cache[$event->event_KEY][$status];
}

/**
 * Loads supporter events filtered by given conditions.
 *
 * @param object $event
 *   The salsa event.
 * @param object $supporter
 *   The salsa supporter.
 * @param $status
 *   The status (or states) of the supporter event.
 *
 * @return array
 *   Returns the found supporter event objects or FALSE.
 */
function salsa_event_get_supporter_events($event = NULL, $supporter = NULL, $status = array()) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'salsa_supporter_event');
  if (!empty($event)) {
    $query->propertyCondition('event_KEY', $event->event_KEY);
  }
  if (!empty($supporter)) {
    $query->propertyCondition('supporter_KEY', $supporter->supporter_KEY);
  }
  if (!empty($status)) {
    $query->propertyCondition('_Status', $status, 'IN');
  }
  $entities = $query->execute();

  if (!empty($entities)) {
    return reset($entities);
  }
  return FALSE;
}

/**
 * Returns the current state of subscriptions of an event.
 *
 * @param object $event
 *   The salsa event object.
 *
 * @return int
 *   A status flag indicating the subscription state.
 */
function salsa_event_get_subscription_state($event) {
  if (empty($event->Maximum_Attendees)) {
    return SALSA_EVENT_SUBSCRIPTION_STATE_SUBSCRIBING;
  }
  if (salsa_event_count_attendees($event) < $event->Maximum_Attendees) {
    return SALSA_EVENT_SUBSCRIPTION_STATE_SUBSCRIBING;
  }
  else {
    if (!empty($event->Maximum_Waiting_List_Size)) {
      if (salsa_event_count_attendees($event, SALSA_EVENT_WAITING_LIST) < $event->Maximum_Waiting_List_Size) {
        return SALSA_EVENT_SUBSCRIPTION_STATE_WAITING_LIST;
      }
      else {
        return SALSA_EVENT_SUBSCRIPTION_STATE_FULL;
      }
    }
    else {
      return SALSA_EVENT_SUBSCRIPTION_STATE_FULL;
    }
  }
}

/**
 * AJAX callback that is triggered by the "Add Guest" button.
 */
function salsa_event_add_guest_form_ajax($form, &$form_state) {
  return $form['guests_wrapper']['guest_container'];
}

/**
 * Submit handler that increments the guest counter.
 */
function salsa_event_add_guest_submit($form, &$form_state) {
  // Check if some guests can't be signed up due to lack of free seats.
  if ($form_state['guest_count'] >= salsa_event_get_free_seats($form_state['salsa_object'])) {
    drupal_set_message(t('The limit of attendees for this event is reached, you can\'t add more guests.'), 'error');
  }
  else {
    $form_state['guest_count']++;
  }

  $form_state['rebuild'] = TRUE;
}

/**
 * Getter for the fields in the guests table.
 *
 * @param integer $is_paid_event
 *   Flag indicating whether the fee field is necessary.
 * @param array $event_fees
 *   The event fees for the guests.
 *
 * @return array
 *   Returns an array of renderable form fields.
 */
function salsa_event_get_guest_row_fields($is_paid_event, $event_fees) {
  $fields = array(
    'first_name' => array(
      '#title' => t('First name'),
      '#type' => 'textfield',
      '#size' => 50,
      '#maxlength' => 50,
    ),
    'last_name' => array(
      '#title' => t('Last name'),
      '#type' => 'textfield',
      '#size' => 50,
      '#maxlength' => 50,
    ),
    'mail' => array(
      '#title' => t('Email'),
      '#type' => 'textfield',
      '#size' => 50,
      '#maxlength' => 100,
    ),
  );
  if ($is_paid_event && !empty($event_fees)) {
    foreach ($event_fees as $fee) {
      $fee_options[$fee->event_fee_KEY] = salsa_entity_get_amount($fee->amount) . ' ' . $fee->Description;
    }
    $fields ['fee'] = array(
      '#title' => t('Fee'),
      '#type' => 'select',
      '#options' => $fee_options,
    );
  }
  return $fields;
}

/**
 * Counts free seats, ignoring the waiting list.
 *
 * @param object $event
 *   A Salsa event entity.
 *
 * @return int
 *   Returns the number of free seats.
 */
function salsa_event_get_free_seats($event) {
  // These maximum and current values are exclusive places on the waiting list.
  $maximum_attendees = $event->Maximum_Attendees;
  $current_attendees = salsa_event_count_attendees($event);
  // Free seats, minus one for the current supporter.
  return $maximum_attendees - $current_attendees - 1;
}

/**
 * Returns the formatted fee amount.
 *
 * By default, the provided fee is not altered but
 * hook_salsa_event_fee_amount_alter() can be used to e.g. append the currency.
 *
 * @param float $fee_amount
 *   The event fee as a float.
 *
 * @return float
 *   The possibly altered fee amount.
 */
function salsa_event_get_fee_amount($fee_amount) {
  drupal_alter('salsa_event_fee_amount', $fee_amount);
  return $fee_amount;
}

/**
 * Displays a confirm form for event cancelling.
 *
 * @param $event_key
 *   Key of the salsa event object
 */
function salsa_event_cancel_form($form, &$form_state, $event_key) {
  $form['event_key'] = array(
    '#type' => 'value',
    '#value' => $event_key,
  );
  if (!$event_key) {
    return drupal_access_denied();
  }
  $event_key;
  global $user;
  $event = entity_load_single('salsa_event', $event_key);
  $question = t('Are you sure you want to cancel your registration to event %event_name?', array('%event_name' => $event->Event_Name));
  return confirm_form($form, $question, 'user/' . $user->uid . '/salsa_my_events', t('You can sign up again afterwards.'));
}

/**
 * Submit handler for the event cancel confirm form.
 */
function salsa_event_cancel_form_submit($form, &$form_state) {
  // Load supporter and supporter event objects.
  $supporter = salsa_entity_get_supporter();
  $event = entity_load_single('salsa_event', $form_state['values']['event_key']);
  $supporter_events = salsa_event_get_supporter_events($event, $supporter);
  if (!empty($supporter_events)) {
    $supporter_event = reset($supporter_events);
    // Set status to cancelled and save.
    $supporter_event->_Status = SALSA_EVENT_CANCELLED;
    $supporter_event->save();
  }
  // Display message and send the user back to his event tab in the profile.
  drupal_set_message(t('You have successfully cancelled your event registration.'));
  global $user;
  $form_state['redirect'] = 'user/' . $user->uid . '/salsa_my_events';
}

/**
 * Getter for the event email trigger keys.
 *
 * @param object $event
 *   The salsa event object.
 * @param string $trigger_type
 *   The event email trigger type.
 *
 * @return array
 *   The keys of the found trigger objects.
 */
function salsa_event_get_email_trigger_key($event, $trigger_type = 'event') {
  $triggers = entity_load('salsa_event_email_trigger', FALSE, array('event_KEY' => $event->event_KEY));
  $email_trigger_KEYS = array();
  if ($triggers) {
    foreach ($triggers as $trigger) {
      if ($trigger->type == $trigger_type) {
        $email_trigger_KEYS[] = $trigger->email_trigger_KEY;
      }
    }
  }
  return $email_trigger_KEYS;
}
