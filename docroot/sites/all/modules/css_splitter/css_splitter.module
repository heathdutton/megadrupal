<?php
/**
 * @file
 * Split CSS groups into separate template variables.
 */

/**
 * Implements hook_element_info().
 */
function css_splitter_element_info() {
  $types = array();

  $css_groups = css_splitter_groups();
  foreach ($css_groups as $name => $group) {
    $types['styles_' . $name] = array(
      '#items' => array(),
      '#pre_render' => array('drupal_pre_render_styles'),
      '#group_callback' => 'drupal_group_css',
      '#aggregate_callback' => 'drupal_aggregate_css',
    );
  }

  return $types;
}

/**
 * Implements hook_css_splitter_groups_info().
 */
function css_splitter_css_splitter_groups_info() {
  // Return the system CSS groups defined in common.inc.
  return array(
    'system' => CSS_SYSTEM,
    'default' => CSS_DEFAULT,
    'theme' => CSS_THEME
  );
}

/**
 * Implements hook_css_splitter_groups_info_alter().
 */
// function css_splitter_css_splitter_groups_info_alter(&$css_groups) {
//   Doing nothing, just here to show it exists.
// }

/**
 * Get defined CSS groups.
 *
 * @return
 *   A keyed array of CSS groups.
 */
function css_splitter_groups() {
  $css_groups = &drupal_static(__FUNCTION__, array());

  if (empty($css_groups)) {
    // Get all groups.
    $css_groups = module_invoke_all('css_splitter_groups_info');

    // Call alter hooks, so contrib modules can change the group info.
    drupal_alter('css_splitter_groups', $css_groups);
  }

  return $css_groups;
}

/**
 * Implements hook_preprocess_html().
 */
function css_splitter_preprocess_html(&$variables) {
  $css_groups = css_splitter_groups();

  // Grab any CSS that was added via hook_page_build() and that now sits in an
  // #attached element somewhere and add it to the global static css array.
  foreach ($variables['page'] as $element) {
    _css_splitter_process_attached($element);
  }

  // Create a render array of stylesheets, so the user can use them of desired.
  $variables['css_splitter'] = array();

  // Make a template variable for each CSS group and populate the render array.
  foreach ($css_groups as $name => $group) {
    $variables['css_splitter'][$name]['#markup'] = $variables['styles_' . $name] = _css_splitter_get_css($name, $group);
  }
}

/**
 * Looks for css attachments in the page render() structure.
 *
 * @param $elements
 *   The structured array describing the data to be rendered.
 * @param $group
 *   The default group of CSS being added. This is only applied to the
 *   stylesheets items that don't have an explicit group assigned to them.
 *
 * @see drupal_process_attached()
 * @see drupal_render()
 */
function _css_splitter_process_attached($elements, $group = CSS_DEFAULT) {
  // Early-return nothing if user does not have access.
  if (!is_array($elements) || empty($elements) || (isset($elements['#access']) && !$elements['#access'])) {
    return;
  }

  // Loop though all items in the current element.
  foreach ($elements as $name => $element) {
    // Skip if not an array or no CSS attached.
    if (!is_array($element) || empty($element['#attached']['css'])) {
      continue;
    }

    foreach ($element['#attached']['css'] as $data => $options) {
      // If the value is not an array, it's a filename and passed as first
      // (and only) argument.
      if (!is_array($options)) {
        $data = $options;
        $options = NULL;
      }
      // In some cases, the first parameter ($data) is an array. Arrays can't be
      // passed as keys in PHP, so we have to get $data from the value array.
      if (is_numeric($data)) {
        $data = $options['data'];
        unset($options['data']);
      }
      // Apply the default group if it isn't explicitly given.
      if (!isset($options['group'])) {
        $options['group'] = $group;
      }
      // Set the every_page flag if one was passed.
      if (isset($every_page)) {
        $options['every_page'] = $every_page;
      }
      call_user_func('drupal_add_css', $data, $options);
    }
  }
}

/**
 * Return CSS for a given style group.
 *
 * Slight modification to drupal_get_css().
 *
 * @param $name
 *   A string that contains the CSS group name.
 * @param $group
 *   An integer that identifies the group and its weighting.
 *
 * @return
 *   A string of XHTML CSS tags.
 */
function _css_splitter_get_css($name, $group) {
  $css = drupal_add_css();
  drupal_alter('css', $css);

  // Sort CSS items, so that they appear in the correct order.
  uasort($css, 'drupal_sort_css_js');

  if (!empty($css)) {
    // Cast the array to an object to be on the safe side even if not empty.
    $setting['ajaxPageState']['css'] = (object) array_fill_keys(array_keys($css), 1);
  }

  // Do not process if not in the correct group.
  foreach ($css as $key => $item) {
    if ($item['group'] != $group) {
      unset($css[$key]);
      continue;
    }
  }

  // Remove the overridden CSS files. Later CSS files override former ones.
  $previous_item = array();
  foreach ($css as $key => $item) {
    if ($item['type'] == 'file') {
      // If defined, force a unique basename for this file.
      if (function_exists('drupal_basename')) {
      $basename = isset($item['basename']) ? $item['basename'] : drupal_basename($item['data']);
	  } else {
      $basename = isset($item['basename']) ? $item['basename'] : basename($item['data']);
	  }
      if (isset($previous_item[$basename])) {
        // Remove the previous item that shared the same base name.
        unset($css[$previous_item[$basename]]);
      }
      $previous_item[$basename] = $key;
    }
  }

  // Render the HTML needed to load the CSS.
  $styles = array(
    '#type' => 'styles',
    '#items' => $css,
  );

  if (!empty($setting)) {
    $styles['#attached']['js'][] = array(
      'type' => 'setting',
      'data' => $setting,
    );
  }

  return drupal_render($styles);
}
