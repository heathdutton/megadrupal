<?php

/**
 * @file
 * The install file for the site's configuration
 */

/**
 * Implements hook_requirements().
 */
function preview_sync_requirements($phase) {
  $requirements = array();
  $t = get_t();

  // We need to ensure the Drush alias file is present and contains at least 2
  // entries (on prod, uat and dev).
  //
  // @TODO remove hard coded environment here.
  if ($phase == 'runtime') {
    switch (environment_current()) {
      case 'development' :
      case 'uat' :
      case 'production' :
        // Ensure we have a file.
        if (!file_exists(PREVIEW_SYNC_DRUSH_FILE)) {
          $requirements['preview_sync_drush_file'] = array(
            'title' => $t('Drush preview alias file'),
            'value' => $t('Not found, please create one at %location.', array('%location' => PREVIEW_SYNC_DRUSH_FILE)),
            'severity' => REQUIREMENT_ERROR,
          );
        }
        // Ensure there is at least 2 aliases in it.
        else {
          require_once PREVIEW_SYNC_DRUSH_FILE;
          if (!isset($aliases) || count($aliases) < 2) {
            $requirements['preview_sync_drush_file'] = array(
              'title' => $t('Drush preview alias file'),
              'value' => $t('Found, but does not contain at least 2 entries (one for the current host, and another for preview).'),
              'severity' => REQUIREMENT_ERROR,
            );
          }
          else {
            $requirements['preview_sync_drush_file'] = array(
              'title' => $t('Drush preview alias file'),
              'value' => $t('Found, and it contains at @count entries (@entries).', array(
                '@count' => count($aliases),
                '@entries' => '@' . implode(', @', array_keys($aliases)),
              )),
              'severity' => REQUIREMENT_OK,
            );
          }
        }
        break;

      default :
        $requirements['preview_sync_drush_file'] = array(
          'title' => $t('Drush preview alias file'),
          'value' => $t('Not needed on @env.', array('@env' => ENVIRONMENT)),
          'severity' => REQUIREMENT_OK,
        );
        break;
    }
  }

  return $requirements;
}

/**
 * Implements hook_schema().
 */
function preview_sync_schema() {
  $schema['preview_sync_log'] = array(
    'description' => 'Preview Sync log.',
    'fields' => array(
      'lid' => array(
        'description' => 'The primary identifier for a log entry.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'pid' => array(
        'description' => 'The primary identifier for a Preview Sync.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'qid' => array(
        'description' => 'The current {queue}.item_id identifier.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'uid' => array(
        'description' => 'The {users}.uid that owns this Preview Sync; initially, this is the user that created it.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'start' => array(
        'description' => 'The Unix timestamp when the queue item started processing with Drush.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'duration' => array(
        'description' => 'The amount of milliseconds the Drush command took to run, useful for reporting.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'type' => array(
        'description' => 'The task.type that ran.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'status' => array(
        'description' => 'Boolean indicating whether the queue item processed successfully.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
      'message' => array(
        'description' => 'Output of the Drush command in plain text.',
        'type' => 'text',
        'size' => 'big',
        'not null' => FALSE,
      ),
    ),
    'indexes' => array(
      'preview_sync_log_pid' => array('pid'),
      'preview_sync_log_qid' => array('qid'),
      'preview_sync_log_type' => array('type'),
    ),
    'foreign keys' => array(
      'preview_sync_log_author' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
    ),
    'primary key' => array('lid'),
  );

  return $schema;
}
