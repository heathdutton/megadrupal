<?php

/**
 * Implements hook_menu().
 */
function cjunction_menu() {

  $items = array();
  $items['admin/config/cjunction'] = array(
    'title' => 'Commission Junction',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cjunction_settings_form'),
    'file' => 'cjunction.admin.inc',
    'access callback' => 'user_access',
    'access arguments' => array('administer cjunction'),
    'type' => MENU_NORMAL_ITEM
  );
  $items['admin/config/cjunction/api'] = array(
    'title' => 'Settings',
    'description' => 'Settings for the Commission Junction API.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cjunction_settings_form'),
    'file' => 'cjunction.admin.inc',
    'access callback' => 'user_access',
    'access arguments' => array('administer cjunction'),
    'weight' => -10,
    'type' => MENU_LOCAL_TASK
  );
  return $items;
}

/**
 * Implements hook_node_info()
 */
function cjunction_node_info() {
  return array(
    'cjproduct' => array(
      'name' => t('CJ Product'),
      'base' => 'cjproduct',
      'description' => t('CJ Product'),
      'has_title' => TRUE,
    ),
  );
}

/**
 * Implements hook_theme().
 */
function cjunction_theme($existing, $type, $theme, $path) {
  return array(
    'cjunction_shortcode_listing' => array(
      'variables' => array('items' => NULL),
      'file' => 'cjunction.theme.inc',
    ),
  );
}

/**
 * Implements hook_cron().
 */
function cjunction_cron() {
  // the data update
  $needs_update_time = REQUEST_TIME - variable_get('cjunction_refresh_schedule', 86400);

  $voc = taxonomy_vocabulary_get_names();
  $terms = taxonomy_get_tree($voc['cj']->vid);

  foreach ($terms as $trm) {
    // firstly remove old data
    $res = cjunction_delete_items($trm->tid, $needs_update_time);

    if($res) { // and load new data
	    $term = taxonomy_term_load($trm->tid);

	    $par = cjunction_url_taxonomyterm2param($term);
	    $url = cjunction_url( $par);

	    $result = cjunction_http_request('a', $url);

	    if($result) { // if request is successful
		    foreach ($result->products->product as $xml) {
		      cjunction_xml_to_node($xml, $term->tid);
		    }
			}
		}
  }
}

/**
 * Implements hook_taxonomy_term_insert().
 */
function cjunction_taxonomy_term_insert($term) {

  if ($term->vocabulary_machine_name == 'cj') {

    $query_id = $term->tid;

    $par = cjunction_url_taxonomyterm2param($term);
    $url = cjunction_url( $par);

    $result = cjunction_http_request('a', $url);

    if($result) { // if request is successful
      foreach ($result->products->product as $xml) {
        cjunction_xml_to_node($xml, $query_id);
      }
    }
  }
}

/**
 * Implements hook_taxonomy_term_update().
 */
function cjunction_taxonomy_term_update($term) {
  if ($term->vocabulary_machine_name == 'cj') {
    // firstly remove old data
    cjunction_delete_items($term->tid);

    // than get and save the new data in nodes

    $query_id = $term->tid;

    $par = cjunction_url_taxonomyterm2param($term);
    $url = cjunction_url( $par);

    $result = cjunction_http_request('a', $url);

		if($result) { // if request is successful
	    foreach ($result->products->product as $xml) {
	      cjunction_xml_to_node($xml, $query_id);
	    }
		}
		else {
			drupal_set_message(t('CJ request error, look at: <a href="@error">Recent log messages</a>.', array('@error' => url('admin/reports/dblog'))), 'error');
		}
  }
}

/**
 * Implements hook_taxonomy_term_delete().
 */
function cjunction_taxonomy_term_delete($term) {
  if ($term->vocabulary_machine_name == 'cj') {
    // delete all data for that tid
    cjunction_delete_items($term->tid);
  }
}

/**
 * Implements hook_init().
 */
function cjunction_init() {
  drupal_add_css(drupal_get_path('module', 'cjunction') . '/cjunction.css');
}

/**
 * Implements hook_filter_info().
 */
function cjunction_filter_info() {
  $filters['cjunction'] = array(
    'title' => t('Commission Junction'),
    'process callback'  => '_cjunction_filter_text',
    'tips callback' => '_cjunction_filter_tips',
  );
  return $filters;
}

/**
 * Filter processing function
 * replace [cjunction ..] in text.
 * @param $text - text to be transformed.
 * @return - the transformed text.
 */
function _cjunction_filter_text($text) {
  $patrn = "@\[cjunction +keywords=\"(.*)\" +count=\"(.*)\"\]@";
  $matches = array();
  if (preg_match_all($patrn, $text, $matches)) {
    $search = $matches[0];
    $replace = array();
    foreach ($matches[0] as $key => $value) {
      $termname = trim($matches[1][$key]);
      $showcount = trim($matches[2][$key]);

      $terms = taxonomy_get_term_by_name($termname);
      $term = reset($terms);
      $result = db_query_range('SELECT entity_id FROM {field_data_cj_query} WHERE cj_query_tid = :tid',
        0, $showcount, array('tid' => $term->tid));

			$nids = array();
      foreach ($result as $row) {
        $nids[] = $row->entity_id;
      }
      $nd = node_load_multiple($nids);

      $replace[] = theme('cjunction_shortcode_listing', array('items' => $nd));
    }
    $text = str_replace($search, $replace, $text);
  }

  return $text;
}

/**
 * Tips callback
 */
function _cjunction_filter_tips($filter, $format, $long = FALSE) {
  if ($long) {
    return t('Get a cjunction product listing [cjunction keywords="..." count=".."], for example, [cjunction keywords=”+diamond+rings” count=”7”]');
  }
  else {
    return t('Get a cjunction product listing [cjunction keywords="..." count=".."]');
  }
}

/**
 * Convert taxonomy item to param.
 * @param array $term - taxonomy term
 * @return array $param - param. for url
 */
function cjunction_url_taxonomyterm2param($term = array()) {

  $par = array(
    'advertiser-ids'    => isset($term->cj_taxonomy_advertiser_ids['und'][0]) ? $term->cj_taxonomy_advertiser_ids['und'][0]['value'] : '',
    'keywords'          => isset($term->cj_taxonomy_keywords['und'][0]) ? $term->cj_taxonomy_keywords['und'][0]['value'] : '',
    'serviceable-area'  => isset($term->cj_taxonomy_serviceable_area['und'][0]) ? $term->cj_taxonomy_serviceable_area['und'][0]['value'] : '',
    'isbn'              => isset($term->cj_taxonomy_isbn['und'][0]) ? $term->cj_taxonomy_isbn['und'][0]['value'] : '',
    'upc'               => isset($term->cj_taxonomy_upc['und'][0]) ? $term->cj_taxonomy_upc['und'][0]['value'] : '',
    'manufacturer-name' => isset($term->cj_taxonomy_manufacturer_name['und'][0]) ? $term->cj_taxonomy_manufacturer_name['und'][0]['value'] : '',
    'manufacturer-sku'  => isset($term->cj_taxonomy_manufacturer_sku['und'][0]) ? $term->cj_taxonomy_manufacturer_sku['und'][0]['value'] : '',
    'advertiser-sku'    => isset($term->cj_taxonomy_advertiser_sku['und'][0]) ? $term->cj_taxonomy_advertiser_sku['und'][0]['value'] : '',
    'low-price'         => isset($term->cj_taxonomy_low_price['und'][0]) ? $term->cj_taxonomy_low_price['und'][0]['value'] : '',
    'high-price'        => isset($term->cj_taxonomy_high_price['und'][0]) ? $term->cj_taxonomy_high_price['und'][0]['value'] : '',
    'low-sale-price'    => isset($term->cj_taxonomy_low_sale_price['und'][0]) ? $term->cj_taxonomy_low_sale_price['und'][0]['value'] : '',
    'high-sale-price'   => isset($term->cj_taxonomy_high_sale_price['und'][0]) ? $term->cj_taxonomy_high_sale_price['und'][0]['value'] : '',
    'currency'          => isset($term->cj_taxonomy_currency['und'][0]) ? $term->cj_taxonomy_currency['und'][0]['value'] : '',
    'sort-by'           => isset($term->cj_taxonomy_sort_by['und'][0]) ? $term->cj_taxonomy_sort_by['und'][0]['value'] : '',
    'sort-order'        => isset($term->cj_taxonomy_sort_order['und'][0]) ? $term->cj_taxonomy_sort_order['und'][0]['value'] : '',
    'page-number'       => isset($term->cj_taxonomy_page_number['und'][0]) ? $term->cj_taxonomy_page_number['und'][0]['value'] : '',
    'records-per-page'  => isset($term->cj_taxonomy_records_per_page['und'][0]) ? $term->cj_taxonomy_records_per_page['und'][0]['value'] : '',
  );

  return $par;
}

/**
 * Create url
 * Array's fields:
 *  advertiser-ids -  Limits the results to a set of particular advertisers (CIDs) using one of the following four values.
 *    CIDs: You may provide list of one or more advertiser CIDs, separated by commas, to limit the results to a specific sub-set of merchants.
 *    Empty String: You may provide an empty string to remove any advertiser-specific restrictions on the search.
 *    joined: This special value (joined) restricts the search to advertisers with which you have a relationship.
 *    notjoined: This special value (not-joined) restricts the search to advertisers with which you do not have a relationship.
 *  keywords -
 *    "kitchen sink" Any product with the word "kitchen" or "sink"
 *    "+kitchen +sink" Any product with the words "kitchen" and "sink"
 *    "+kitchen -sink" Any product with "kitchen" and without "sink"
 *    "kitchen +sink" All the products with the word "sink"; if they also contain "kitchen", it increases the product’s relevancy.
 *  serviceable-area - Limits the results to a specific set of advertisers’ targeted areas.
 *  isbn - Limits the results to a specific product from multiple merchants identified by the appropriate unique identifier; ISBN.
 *  upc - Limits the results to a specific product from multiple merchants identified by the appropriate unique identifier; UPC.
 *  manufacturer-name - Limits the results to a particular manufacturer's name.
 *  manufacturer-sku - Limits the results to a particular manufacturer's SKU number.
 *  advertiser-sku - Limits the results to a particular advertiser SKU.
 *  low-price - Limits the results to products with a price greater than or equal to the low-price.
 *  high-price - Limits the results to products with a price less than or equal to the high-price.
 *  low-sale-price - Limits the results to products with a price greater than or equal to the Advertiser offered low-sale-price.
 *  high-sale-price - Limits the results to products with a price less than or equal to the Advertiser offered high-sale-price.
 *  currency - Limits the results to one of the following currencies. USD, EUR, GBP
 *  sort-by Sort the results in the response by one of the following values. Name, Advertiser ID, Advertiser Name, Currency, Price, salePrice, Manufacturer, SKU, UPC
 *  sort-order Specifies the order in which the results are sorted; the following case-insensitive values are acceptable.  asc: ascending (default value),   dec: descending
 *  page-number - Specifies the first record to return in the request. The first record is 0. Leaving this parameter blank assigns a default value of 0. Please refer to the notes below the table for more information.
 *  records-per-page - Specifies the number of records to return in the request. Leaving this parameter blank assigns a default value of 50.
 *
 * @return url
 */
function cjunction_url($parameters = array()) {

  $website_id = trim(variable_get('cjunction_website_id', ''));
  $advertiser_id = variable_get('cjunction_advertiser_id', '');

  $url = 'https://product-search.api.cj.com/v2/product-search?website-id=' . $website_id;

  $parameters_after = module_invoke_all('cjunction_url', $parameters);
  if (!empty($parameters_after)) {
    $parameters = $parameters_after;
  }

  if (!empty( $parameters['advertiser-ids'])) $url .= '&advertiser-ids=' . $parameters['advertiser-ids'];
  elseif (!empty($advertiser_id)) $url .= '&advertiser-ids=' . $advertiser_id;

  if (!empty( $parameters['keywords'])) $url .= '&keywords=' . urlencode($parameters['keywords']);
  if (!empty( $parameters['serviceable-area'])) $url .= '&serviceable-area=' . $parameters['serviceable-area'];
  else $url .= '&serviceable-area=US';
  if (!empty( $parameters['isbn'])) $url .= '&isbn=' . $parameters['isbn'];
  if (!empty( $parameters['upc'])) $url .= '&upc=' . $parameters['upc'];
  if (!empty( $parameters['manufacturer-name'])) $url .= '&manufacturer-name=' . $parameters['manufacturer-name'];
  if (!empty( $parameters['manufacturer-sku'])) $url .= '&manufacturer-sku=' . $parameters['manufacturer-sku'];
  if (!empty( $parameters['advertiser-sku'])) $url .= '&advertiser-sku=' . $parameters['advertiser-sku'];
  if (!empty( $parameters['low-price'])) $url .= '&low-price=' . $parameters['low-price'];
  if (!empty( $parameters['high-price'])) $url .= '&high-price=' . $parameters['high-price'];
  if (!empty( $parameters['low-sale-price'])) $url .= '&low-sale-price=' . $parameters['low-sale-price'];
  if (!empty( $parameters['high-sale-price'])) $url .= '&high-sale-price=' . $parameters['high-sale-price'];
  if (!empty( $parameters['sort-by'])) $url .= '&sort-by=' . $parameters['sort-by'];
  if (!empty( $parameters['sort-order'])) $url .= '&sort-order=' . $parameters['sort-order'];
  if (!empty( $parameters['page-number'])) $url .= '&page-number=' . $parameters['page-number'];
  if (!empty( $parameters['records-per-page'])) $url .= '&records-per-page=' . $parameters['records-per-page'];
  else $url .= '&records-per-page=20';

  return $url;
}

/**
 * Create an issue an HTTP request to the cj API.
 */
function cjunction_http_request($operation, $url, $locale = NULL) {

  $headers = array();
  $headers['headers']['Authorization'] = trim(variable_get('cjunction_developer_key', ''));
	$headers['headers']['User-Agent'] = 'Mozilla/5.0 (X11; U; Gentoo Linux x86_64; pl-PL) Gecko Firefox';

  //make the request and return a SimpleXML object.
  $results = drupal_http_request($url, $headers);

  if ($results->code == 200) {
    $xml = new SimpleXMLElement($results->data);
    return $xml;
  }
  if ($results->code != 401 && $results->code >= 400 && $results->code < 500) { // 401 - unauthorized
    try {
      $xml = new SimpleXMLElement($results->data);
    }
    catch (Exception $e) {
      watchdog('cjunction', "Error handling results: code=%code, data=%data.", array('%code' => $results->code, '%data' => (string) $xml->{'error-message'}), WATCHDOG_ERROR);
      return FALSE;
    }
    watchdog('cjunction', "HTTP code %code (%error) accessing product-search.api.cj.com: %data, %status_message", array('%code' => $results->code, '%error' => (string) $results->error, '%data' => (string) $xml->{'error-message'}, '%status_message' => (string) $results->status_message), WATCHDOG_ERROR);
    return FALSE;
  }
  watchdog('cjunction', "Error accessing cjunction web service. HTTP result code=%code, error=%error", array('%code' => $results->code, '%error' => $results->error), WATCHDOG_ERROR);
  return FALSE;
}

/**
 * Save xml items in a node
 * @param object $xml
 * @return
 */
function cjunction_xml_to_node($xml, $query_id = '') {

  $new = new stdClass();

  $new -> type = 'cjproduct';
  $new -> status = 1;
  $new -> title = (string) $xml->name;
  $new -> body = '';
  $new -> format = 1;
  $new -> language = 'und'; // undefinded language
  $new -> uid = 1; // admin

  $new -> cj_query['und']['0']['tid'] = (int) $query_id;

  $new -> cj_ad_id['und']['0']['value'] = (string) $xml->{'ad-id'};
  $new -> cj_advertiser_id['und']['0']['value'] = (string) $xml->{'advertiser-id'};
  $new -> cj_advertiser_name['und']['0']['value'] = (string) $xml->{'advertiser-name'};
  $new -> cj_buy_url['und']['0']['value'] = (string) $xml->{'buy-url'};
  $new -> cj_catalog_id['und']['0']['value'] = (string) $xml->{'catalog-id'};
  $new -> cj_currency['und']['0']['value'] = (string) $xml->currency;
  $new -> cj_description['und']['0']['value'] = (string) $xml->description;
  $new -> cj_image_url['und']['0']['value'] = (string) $xml->{'image-url'};
  $new -> cj_in_stock['und']['0']['value'] = (string) $xml->{'in-stock'};
  $new -> cj_isbn['und']['0']['value'] = (string) $xml->isbn;
  $new -> cj_manufacturer_name['und']['0']['value'] = (string) $xml->{'manufacturer-name'};
  $new -> cj_manufacturer_sku['und']['0']['value'] = (string) $xml->{'manufacturer-sku'};
  $new -> cj_name['und']['0']['value'] = (string) $xml->name;
  $new -> cj_price['und']['0']['value'] = (string) $xml->price;
  $new -> cj_retail_price['und']['0']['value'] = (string) $xml->{'retail-price'};
  $new -> cj_sale_price['und']['0']['value'] = (string) $xml->{'sale-price'};
  $new -> cj_sku['und']['0']['value'] = (string) $xml->sku;
  $new -> cj_upc['und']['0']['value'] = (string) $xml->upc;


  $new_after = module_invoke_all('cjunction_xml_to_node', $new);
  if (!empty($new_after)) {
    $new = $new_after;
  }

  if ($node = node_submit($new)) {
    node_save($node);
  }
}

/**
 * Delete items for a tid
 * @param object $tid
 * @param object $timestamp [optional]
 * @return
 */
function cjunction_delete_items($tid, $timestamp='') {

  module_invoke_all('cjunction_delete_items', $tid);
  $nids = array();
  $sqltime = '';
  if (empty($timestamp)) {
    $result = db_query('SELECT entity_id FROM {field_data_cj_query} WHERE cj_query_tid = :tid',
      array('tid' => $tid));
  }
  else { // used in the hook_cron for removing old items
    $result = db_query('SELECT fdcq.entity_id FROM {field_data_cj_query} fdcq, {node} n  WHERE fdcq.entity_id=n.nid AND fdcq.cj_query_tid = :tid AND n.created < :timestamp',
      array('tid' => $tid, 'timestamp' => $timestamp));
  }

  foreach ($result as $row) {
    $nids[] = $row->entity_id;
  }
  node_delete_multiple($nids);

	if(empty($nids)) {
		return FALSE;
	}
	else {
		return TRUE;
	}
}

/**
 *  Impelents hook_menu_alter().
 */
function cjunction_menu_alter(&$items) {
  // Remove possibility to add products by manually, they can be added only automatically
  if (!empty($items['node/add/cjproduct'])) {
    unset($items['node/add/cjproduct']);
  }
}

/**
* Implementation of hook_views_api()
*/
function cjunction_views_api() {
  return array(
    'api' => 3,
  );
}


