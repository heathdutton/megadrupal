<?php

/**
 * Implements hook_theme().
 */
function cjunction_fields_theme($existing, $type, $theme, $path) {
  return array(
    'cjunction_fields_image_url' => array(
      'variables' => array('image_url' => NULL),
      'file' => 'cjunction_fields.theme.inc',
    ),
    'cjunction_fields_buy_url' => array(
      'variables' => array('buy_url' => NULL),
      'file' => 'cjunction_fields.theme.inc',
    ),
  );
}

/**
 * Implements hook_field_info().
 */
function cjunction_fields_field_info() {
  return array(
    'cjunction_buy_url' => array(
      'label' => t('CJ buy url'),
      'description' => t('This field stores CJ buy url.'),
      'instance_settings' => array('text_processing' => 0),
      'default_widget' => 'cjunction_buy_url',
      'default_formatter' => 'cjunction_buy_url_default',
    ),
    'cjunction_image_url' => array(
      'label' => t('CJ remote image'),
      'description' => t('This field stores CJ image url.'),
      'instance_settings' => array('text_processing' => 0),
      'default_widget' => 'cjunction_image_url',
      'default_formatter' => 'cjunction_image_url_default',
    )
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function cjunction_fields_field_formatter_info() {
  return array(
    'cjunction_buy_url_default' => array(
      'label' => t('Default'),
      'field types' => array('cjunction_buy_url'),
    ),
    'cjunction_buy_url_url' => array(
      'label' => t('URL'),
      'field types' => array('cjunction_buy_url'),
    ),
    'cjunction_image_url_default' => array(
      'label' => t('Show the remote image'),
      'field types' => array('cjunction_image_url'),
    ),
    'cjunction_image_url_url' => array(
      'label' => t('Show URL'),
      'field types' => array('cjunction_image_url'),
    ),
  );
}

/**
 * Implements hook_field_widget_info().
 */
function cjunction_fields_field_widget_info() {
  return array(
    'cjunction_buy_url_field' => array(
      'label' => t('URL'),
      'field types' => array('cjunction_buy_url'),
      'settings' => array('size' => 60),
    ),
    'cjunction_image_url_field' => array(
      'label' => t('Remote image'),
      'field types' => array('cjunction_image_url'),
      'settings' => array('size' => 60),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function cjunction_fields_field_formatter_view($object_type, $object, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'cjunction_buy_url_default':
      foreach ($items as $delta => $item) {
        $element[$delta]['#type'] = 'markup';
        $buy_url = $item['value'];
        $element[$delta]['#markup'] = theme('cjunction_fields_buy_url', array('buy_url' => $buy_url));
      }
      break;
    case 'cjunction_buy_url_url':
      foreach ($items as $delta => $item) {
        $element[$delta]['#type'] = 'markup';
        $buy_url = $item['value'];
        $element[$delta]['#markup'] = $buy_url;
      }
      break;
    case 'cjunction_image_url_default':
      foreach ($items as $delta => $item) {
        $element[$delta]['#type'] = 'markup';
        $image_url = $item['value'];
        $element[$delta]['#markup'] = theme('cjunction_fields_image_url', array('image_url' => $image_url));
      }
      break;
    case 'cjunction_image_url_url':
      foreach ($items as $delta => $item) {
        $element[$delta]['#type'] = 'markup';
        $image_url = $item['value'];
        $element[$delta]['#markup'] = $image_url;
      }
      break;
  }

  return $element;
}


/**
 * Implements hook_field_widget_settings_form().
 */
function cjunction_fields_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];

  if ($widget['type'] == 'cjunction_buy_url_field') {
    $form['size'] = array(
      '#type' => 'textfield',
      '#title' => t('Size of textfield'),
      '#default_value' => $settings['size'],
      '#required' => TRUE,
      '#element_validate' => array('element_validate_integer_positive'),
    );
  }

  return $form;
}

/**
 * Implements hook_field_widget_form().
 */
function cjunction_fields_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $summary_widget = array();
  $main_widget = array();

  switch ($instance['widget']['type']) {
    case 'cjunction_buy_url_field':
      $main_widget = $element + array(
        '#type' => 'textfield',
        '#default_value' => isset($items[$delta]['value']) ? $items[$delta]['value'] : NULL,
        '#size' => $instance['widget']['settings']['size'],
        '#maxlength' => $field['settings']['max_length'],
        '#attributes' => array('class' => array('text-full')),
      );
      break;

    case 'cjunction_image_url_field':
      $main_widget = $element + array(
        '#type' => 'textfield',
        '#default_value' => isset($items[$delta]['value']) ? $items[$delta]['value'] : NULL,
        '#size' => $instance['widget']['settings']['size'],
        '#maxlength' => $field['settings']['max_length'],
        '#attributes' => array('class' => array('text-full')),
      );
      break;
  }

  if ($main_widget) {
    $element['value'] = $main_widget;
  }


  return $element;
}

/**
 * Implements hook_field_is_empty().
 */
function cjunction_fields_field_is_empty($item, $field) {
  if (!isset($item['value']) || $item['value'] === '') {
    return !isset($item['summary']) || $item['summary'] === '';
  }
  return FALSE;
}
