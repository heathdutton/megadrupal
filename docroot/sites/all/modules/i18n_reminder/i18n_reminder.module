<?php
/**
 * @file i18n_reminder.module
 * Helpful reminders to aid with translation content workflow.
 */


/**
 * Implements hook_help().
 */
function i18n_reminder_help($path, $arg) {
  switch ($path) {
    case 'admin/help#i18n_reminder':
      return t("It's easy to make page updates, but when your content is translated it even easier to neglect multi-language content concerns.");
    break;
  }
}


/**
 * Generalized function for handling node actions.
 * Warn people about good translation practices, appropriate to the content.
 */
function _i18n_reminder_node_workflow($node, $mode) {
  global $user;
  // 0 = Disabled... 1 = Enabled... 2 = Enabled, with translation.
  $translatable = variable_get('language_content_type_' . $node->type);

  // Content type is translatable (sets), not neutral, and user can see messages.
  if (user_access('view i18n reminder messages', $user) && $translatable == TRANSLATION_ENABLED && ($node->language != LANGUAGE_NONE)) {
    global $language;
    $severity = 'warning';

    // Translation sets exist.
    if (translation_node_get_translations($node->tnid)) {
      // Split messages between editing and prior warning.
      if ($mode == 'view') {
        if ($msg = variable_get_value('i18n_reminder_msg_edit_translated', array('language' => $language))) {
          drupal_set_message($msg, $severity);
        }
      }
      else {
        if ($msg = variable_get_value('i18n_reminder_msg_editing_translated', array('language' => $language))) {
          drupal_set_message($msg, $severity);
        }
      }
    }
    else {
      // No translations within the set exist yet.
      if ($msg = variable_get_value('i18n_reminder_msg_non_neutral', array('language' => $language))) {
        drupal_set_message($msg, $severity);
      }
    }

  }
}

/**
 * Implements hook_node_update().
function i18n_reminder_node_update($node) {
    _i18n_reminder_node_workflow($node, 'post');
}
 */

/**
 * Implements hook_node_insert().

function i18n_reminder_node_insert($node) {
    _i18n_reminder_node_workflow($node, 'post');
}
 */

/**
 * Implements hook_node_view().
 */
function i18n_reminder_node_view($node, $view_mode) {
  static $messages_shown = FALSE;
  if (!$messages_shown) {
    if (node_is_page($node)) {
      _i18n_reminder_node_workflow($node, 'view');
    }
    $messages_shown = TRUE;
  }
}

/**
 * Implementation of hook_form_alter().
 * Copying the Context way of knowing you're on a node edit form.
 */
function i18n_reminder_form_alter(&$form, $form_state, $form_id) {
  // Trigger the condition in an after_build function to avoid being skipped
  // when there are validation errors.
  $form['#after_build'][] = 'i18n_reminder_form_alter_node_after_build';
}

/**
 * Form #after_build callback for i18n_reminder_form_alter().
 */
function i18n_reminder_form_alter_node_after_build($form, &$form_state) {
  // Fire on edit pages, no admin pages, not after submitted.
  if (!empty($form['#node_edit_form']) && arg(0) != 'admin' && !$form_state['input']) {
    _i18n_reminder_node_workflow($form['#node'], 'form');
  }
  return $form;
}


/**
 * Add settings to i18n node options form.
 */
function i18n_reminder_form_variable_group_form_alter(&$form, &$form_state) {
  // Only appropriate variable group form.
  if($form['#variable_group_form'] == 'i18n_node') {
    // Define group.
    $form['i18n_reminder'] = array(
      '#type' => 'fieldset',
      '#title' => t('Translation Reminders'),
      '#description' => t('Helpful reminders for users able to edit translated content (via i18n_reminder module). Leave blank to hide.'),
      '#collapsible' => TRUE,
    );
    // List variables.
    $variables = array(
      'msg_edit_translated',
      'msg_editing_translated',
      'msg_non_neutral'
    );
    // Add each to the form using Variable info.
    foreach ($variables as $var_name) {
      $variable = variable_get_info('i18n_reminder_' . $var_name);
      $form['i18n_reminder']['i18n_reminder_' . $var_name] = array(
        '#type' => $variable['element']['#type'],
        'required' => $variable['required'],
        '#title' => $variable['title'],
        '#default_value' => variable_get_value('i18n_reminder_' . $var_name),
        '#description' => $variable['description']
      );
    }
  }
}


/**
 * Implements hook_permission().
 * Allows choosing which roles see the messages.
 */
function i18n_reminder_permission() {
  return array(
    'view i18n reminder messages' => array(
      'title' => t('View i18n reminder messages'),
      'description' => t('Choose which roles see the language reminder messages.'),
      'restrict access' => FALSE,
    ),
  );
}
