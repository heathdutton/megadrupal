<?php

/**
 * @file
 * Past grabber tests.
 */

class PastGrabberTest extends DrupalWebTestCase {

  /**
   * This corresponds with past_grabber.test.error.log content.
   *
   * @var array
   */
  static $testData = array(
    array(
      'time' => 'Tue May 21 03:02:05 2013',
      'type' => 'error',
      'php' => array (
        'type' => 'PHP Parse error',
        'message' => "syntax error, unexpected '}'",
        'file' => '/var/www/funny_file.module',
        'line' => '1',
      ),
      'user' => array(
        'referer' => 'http://example.com',
        'client' => '192.168.56.1',
      ),
    ),
    array(
      'time' => 'Tue May 21 03:02:04 2013',
      'type' => 'error',
      'php' => array (
        'type' => 'PHP Parse error',
        'message' => "syntax error, unexpected '}'",
        'file' => '/var/www/funny_file.module',
        'line' => '2',
      ),
      'user' => array(
        'client' => '192.168.56.1',
      ),
    ),
    array(
      'time' => 'Tue May 21 03:02:03 2013',
      'type' => 'error',
      'php' => array (
        'type' => 'PHP Parse error',
        'message' => 'syntax error, unexpected T_STRING',
        'file' => '/var/www/funny_file.module',
        'line' => '3',
      ),
      'user' => array(
        'client' => '192.168.56.1',
      ),
    ),
    array(
      'time' => 'Tue May 21 03:02:02 2013',
      'type' => 'error',
      'php' => array (
        'type' => 'PHP Fatal error',
        'message' => 'Call to undefined function dsm()',
        'file' => '/var/www/another_file.inc',
        'line' => '4',
      ),
      'user' => array(
        'referer' => 'http://example.com/debug',
        'client' => '192.168.56.1',
      ),
    ),
    array(
      'time' => 'Tue May 21 03:02:02 2013',
      'type' => 'error',
      'php' => array (
        'type' => 'PHP Fatal error',
        'message' => 'Call to undefined function dpm()',
        'file' => '/var/www/another_file.inc',
        'line' => '5',
      ),
      'user' => array(
        'referer' => 'http://example.com/something',
        'client' => '192.168.56.1',
      ),
    ),
    array(
      'time' => 'Tue May 21 03:02:02 2013',
      'type' => 'error',
      'php' => array (
        'type' => 'PHP Fatal error',
        'message' => 'Nesting level too deep - recursive dependency?',
        'file' => '/var/www/tmgmt/app/includes/common.inc',
        'line' => '6',
      ),
      'user' => array(
        'referer' => 'http://example.com/nesting',
        'client' => '192.168.56.1',
      ),
    ),
  );

  protected $log_file;

  static function getInfo() {
    return array(
      'name' => 'Past Grabber tests',
      'description' => 'Tests parsing of apache error log file by the Past Grabber.',
      'group' => 'Past',
    );
  }

  function setUp() {
    parent::setUp(array('past', 'past_db', 'past_grabber'));
    $log = '';

    // Build the test log file content from testData.
    foreach (self::$testData as $log_line) {
      $log .= "[{$log_line['time']}] [{$log_line['type']}] [client {$log_line['user']['client']}] {$log_line['php']['type']}: {$log_line['php']['message']} in {$log_line['php']['file']} on line {$log_line['php']['line']}";
      if (isset($log_line['user']['referer'])) {
        $log .= ", referer: {$log_line['user']['referer']}";
      }
      $log .= "\n";
    }

    $this->log_file = file_directory_temp() . '/' . $this->randomName() . '.error.log';

    file_put_contents($this->log_file, $log);
  }

  function tearDown() {
    // Cleanup our temporary test log file.
    unlink($this->log_file);

    parent::tearDown();
  }

  /**
   * Testing cron.
   */
  function testCron() {
    // We use the ctime and mtime to determine if to reset the file pointer
    // or if any changes have been made to the log file. Another option is to
    // manipulate directly with past_grabber_log_file_info variable but than the
    // test does not reflect reality.
    sleep(1);

    variable_set('past_grabber_file_path', $this->log_file);
    past_grabber_cron();

    // Three parse error events.
    $events = $this->loadEvents();
    $this->assertEqual(count($events), 3);

    // Again sleep so that mtime changes.
    sleep(1);

    // No change in the log file info => grabbing has not triggered.
    $log_file_info = variable_get('past_grabber_log_file_info');
    past_grabber_cron();
    $this->assertEqual($log_file_info, variable_get('past_grabber_log_file_info'));

    // Simulate log rotation. File ctime changes with rewriting it.
    $data = file_get_contents($this->log_file);
    unlink($this->log_file);
    file_put_contents($this->log_file, $data);
    past_grabber_cron();

    // Six parse error events.
    $events = $this->loadEvents();
    $this->assertEqual(count($events), 6);

    // Parse a different file.
    $other_log_file = file_directory_temp() . '/' . $this->randomName() . '.another.error.log';
    file_put_contents($other_log_file, file_get_contents($this->log_file));
    variable_set('past_grabber_file_path', $other_log_file);
    past_grabber_cron();
    unlink($other_log_file);

    // Nine parse error events.
    $events = $this->loadEvents();
    $this->assertEqual(count($events), 9);
  }

  /**
   * Testing drush command past-grab with its callback.
   *
   * function drush_get_option() and more are required, see faked below.
   */
  function testDrush() {
    module_load_include('inc', 'past_grabber', 'past_grabber.drush');

    // Parse the default file. Skipping all options of the command.
    variable_set('past_grabber_file_path', $this->log_file);
    past_grabber_drush_grab();

    // Three parse error events.
    $events = $this->loadEvents();
    $this->assertEqual(count($events), 3);

    // Parse the default file. Switch to different filter
    past_grabber_drush_grab(NULL, 'PHP Fatal error');

    // Six parse error events.
    $events = $this->loadEvents();
    $this->assertEqual(count($events), 6);

    // Parse a different file.
    $other_log_file = file_directory_temp() . '/' . $this->randomName() . '.another.error.log';
    file_put_contents($other_log_file, file_get_contents($this->log_file));
    past_grabber_drush_grab($other_log_file);
    unlink($other_log_file);

    // Nine parse error events.
    $events = $this->loadEvents();
    $this->assertEqual(count($events), 9);
  }

  /**
   * Testing logfile parsing.
   */
  function testParsing() {
    $result = past_grabber_parse_error_log($this->log_file, 0, PAST_GRABBER_DEFAULT_TYPE, 2);

    $events = $this->loadEvents();
    $this->assertEqual(count($events), 2);

    past_grabber_parse_error_log($this->log_file, $result['position'], PAST_GRABBER_DEFAULT_TYPE);

    $events = $this->loadEvents();
    $this->assertEqual(count($events), 3);

    past_grabber_parse_error_log($this->log_file, 0, 'PHP Fatal error');

    $events = $this->loadEvents();
    $this->assertEqual(count($events), 6);

    /** @var PastEvent $event */
    $test_data = self::$testData;
    foreach ($events as $event) {
      $test_line = array_shift($test_data);
      $this->assertEqual($event->getArgument('php')->getData(), $test_line['php']);
      $this->assertEqual($event->getArgument('client_data')->getData(), $test_line['user']);
    }
  }

  /**
   * Loads all instances of past_event.
   *
   * @return PastEvent[]
   */
  protected function loadEvents() {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'past_event');
    $result = $query->execute();
    if (empty($result)) {
      return array();
    }
    return entity_load('past_event', array_keys($result['past_event']));
  }
}

/**
 * Fake required drush environment if origin of test run is not drush.
 *
 * Drush is no module. We can't load it.
 */
if (!function_exists('drush_get_option')) {
  /**
   * Fake drush function drush_get_option().
   *
   * @return string
   *   Default option value.
   */
  function drush_get_option($option, $default = NULL, $context = NULL) {
    return $default;
  }

  /**
   * Fake drush function drush_print().
   */
  function drush_print($message = '', $indent = 0) {
  }

  /**
   * Fake drush function dt().
   *
   * Pass call to t().
   */
  function dt($string, $args = array()) {
    return t($string, $args);
  }
}
