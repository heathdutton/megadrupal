<?php

/**
 * @file
 * Main bootstrap file for past_grabber.
 */

/**
 * The grabber will look for these errors only by default.
 */
define('PAST_GRABBER_DEFAULT_TYPE', 'PHP Parse error');

/**
 * Implements hook_form_ID_alter().
 *
 * Alters past admin settings.
 */
function past_grabber_form_past_admin_settings_alter(&$form, &$form_state) {
  $form['grabber'] = array(
    '#type' => 'fieldset',
    '#title' => t('Log Grabber'),
    '#collapsible' => TRUE,
    '#description' => t('On the cron run the Log Grabber will skim through the provided error log file for parse errors and create past events.')
  );
  $form['grabber']['past_grabber_file_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Error log file path'),
    '#description' => t('Enter path to the web server error log file.'),
    '#default_value' => variable_get('past_grabber_file_path', ini_get('error_log')),
  );

  if (variable_get('past_grabber_file_path') && $file_info = variable_get('past_grabber_log_file_info', FALSE)) {
    $form['grabber']['pointer'] = array(
      '#type' => 'item',
      '#title' => t('Error log file pointer'),
      '#markup' => variable_get('past_grabber_log_file_line', $file_info['position']),
    );
  }
  $form['grabber']['reset_grabber'] = array(
    '#type' => 'submit',
    '#value' => t('Reset grabber'),
    '#submit' => array('_past_grabber_reset_error_log_line_pointer'),
  );
  $form['#validate'][] = 'past_grabber_admin_settings_validate';
}

/**
 * Submit callback to reset log file pointer.
 */
function _past_grabber_reset_error_log_line_pointer($form, &$form_state) {
  variable_set('past_grabber_log_file_line', 0);
}

/**
 * Validate callback for grabber settings.
 */
function past_grabber_admin_settings_validate(&$form, &$form_state) {
  if (!empty($form_state['values']['past_grabber_file_path']) && !is_readable($form_state['values']['past_grabber_file_path'])) {
    form_set_error('past_grabber_file_path', t('The provided path to the log file is invalid or php user has insufficient permissions to read it.'));
  }
}

/**
 * Implements hook_cron().
 *
 * Will run parsing of error log file and will grab out PHP Parse errors.
 */
function past_grabber_cron() {
  $path = variable_get('past_grabber_file_path');
  if (empty($path)) {
    return;
  }

  if (!is_readable($path)) {
    watchdog('past_grabber', 'Unable to open log file @path', array('@path' => $path));
    return;
  }

  past_grabber_parse_error_log($path);
}

/**
 * Parses provided error log and creates past events.
 *
 * @param string $path
 *   Error log file path.
 * @param $position
 *   File pointer position
 * @param string $error_type
 *   Error type to be logged.
 * @param int $limit
 *   Limit for processed error log entries.
 * @param int $severity
 *   Past severity.
 * @param string $machine_name
 *   Past event machine name.
 *
 * @return array
 *   - position - new file pointer position.
 *   - count - count of processed entries.
 *
 * @throws RuntimeException
 *   In case give path is not readable.
 */
function past_grabber_parse_error_log($path, $position = NULL, $error_type = PAST_GRABBER_DEFAULT_TYPE, $limit = 100, $severity = PAST_SEVERITY_CRITICAL, $machine_name = NULL) {

  if (!is_readable($path)) {
    throw new RuntimeException('Provided path does not exist or is not readable.');
  }

  // Get actual log file info.
  $stat = stat($path);
  // Load/init stored log file info.
  $log_files_info = variable_get('past_grabber_log_file_info', array($path => array($error_type => array(
    'mtime' => 0,
    'ctime' => 0,
    'position' => 0,
  ))));
  $current_info = &$log_files_info[$path][$error_type];

  // Override the pointer position if custom value is provided.
  if ($position !== NULL) {
    $current_info['position'] = $position;
  }
  // If the position argument was not provided the logic is expected to not log
  // duplicates and identify the log rotation.
  else {
    // The log file was not updated => no new log entries => nothing to do.
    if ($stat['mtime'] == $current_info['mtime']) {
      return array(
        'position' => $current_info['position'],
        'count' => 0,
      );
    }

    // If ctime of the log file is newer then the one recorded we have new a log.
    if ($stat['ctime'] > $current_info['ctime']) {
      $current_info['position'] = 0;
    }
  }

  // Open the log file resource and seek to position defined by position.
  $handle = fopen($path, 'r');
  fseek($handle, $current_info['position']);

  $i = 0;
  while ($i < $limit && ($line = fgets($handle))) {
    $i++;

    $log = _past_grabber_parse_line($line, $error_type);
    if (empty($log)) {
      continue;
    }

    // Create the past event.
    $event = past_event_create('past_grabber',
      !empty($machine_name) ? $machine_name : str_replace(' ', '_', strtolower($log['type'])), $log['message']);
    $event->setSeverity($severity);
    $event->setTimestamp(strtotime($log['time']));

    $event->addArgument('php', array(
      'type' => $log['type'],
      'message' => $log['message'],
      'file' => $log['file'],
      'line' => $log['line'],
    ));
    $event->addArgument('client_data', array(
      'referer' => $log['referer'],
      'client' => $log['client'],
    ));
    $event->save();
  }

  // Get current position and close resource.
  $position = ftell($handle);
  fclose($handle);

  // Save the log file statistics.
  $current_info = array(
    'mtime' => $stat['mtime'],
    'ctime' => $stat['ctime'],
    'position' => $position,
  );
  variable_set('past_grabber_log_file_info', $log_files_info);

  return array(
    'position' => $position,
    'count' => $i,
  );
}

/**
 * Helper function to parse error log line.
 *
 * @param string $line
 *   Log entry to parse.
 * @param string $type
 *   What error type to parse.
 *
 * @return array
 *   Associative array with parsed data.
 */
function _past_grabber_parse_line($line, $type = 'PHP Parse error') {
  preg_match('/\[(.*)\]\s\[error\]\s\[client\s(.*)\]\s(' . preg_quote($type) . '):\s+(.*)/', $line, $log_matches);
  if (empty($log_matches)){
    return array();
  }

  preg_match('/(.*)\sin\s(.*) on\sline\s(\d*)(.*referer:\s(.*))?/', $log_matches[4], $message_matches);
  if (empty($message_matches)) {
    $message = $log_matches[4];
  }
  else {
    $message = $message_matches[1];
  }

  return array(
    'time' => $log_matches[1],
    'client' => $log_matches[2],
    'type' => $log_matches[3],
    'message' => $message,
    'file' => isset($message_matches[2]) ? $message_matches[2] : NULL,
    'line' => isset($message_matches[3]) ? $message_matches[3] : NULL,
    'referer' => isset($message_matches[5]) ? $message_matches[5] : NULL,
  );
}
