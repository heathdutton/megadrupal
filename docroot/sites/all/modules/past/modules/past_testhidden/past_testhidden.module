<?php

/**
 * @file
 * Module file for Past Test hidden.
 */

/**
 * Implements hook_menu().
 */
function past_testhidden_menu() {
  $items['past_trigger_error'] = array(
    'title' => 'Past test errors',
    'description' => 'should never be visible',
    'page callback' => 'past_testhidden_errors',
    'access callback' => TRUE,
  );
  $items['past_trigger_error/%'] = array(
    'title' => 'Past test hidden',
    'description' => 'should never be visible',
    'page callback' => 'past_testhidden_trigger_error',
    'page arguments' => array(1),
    'access callback' => TRUE,
  );

  // Testform for past_form. Menu entry should match form_id.
  $items['past_testhidden_form_empty_submit_array'] = array(
    'title' => 'Empty submit array',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('past_testhidden_form_empty_submit_array'),
    'access arguments' => array('access content'),
    'description' => 'Representing a form with an empty submit array.',
    'type' => MENU_CALLBACK,
  );
  $items['past_testhidden_form_default_submit_handler'] = array(
    'title' => 'Default submit handler',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('past_testhidden_form_default_submit_handler'),
    'access arguments' => array('access content'),
    'description' => 'Representing a form with the default submit handler.',
    'type' => MENU_CALLBACK,
  );
  $items['past_testhidden_form_custom_submit_handler'] = array(
    'title' => 'Custom submit handler',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('past_testhidden_form_custom_submit_handler'),
    'access arguments' => array('access content'),
    'description' => 'Representing a form with a custom submit handler.',
    'type' => MENU_CALLBACK,
  );
  $items['past_testhidden_form_mixed_submit_handlers'] = array(
    'title' => 'Global and Custom submit handler',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('past_testhidden_form_mixed_submit_handlers'),
    'access arguments' => array('access content'),
    'description' => 'Representing a form with a global and a custom submit handler.',
    'type' => MENU_CALLBACK,
  );
  $items['past_testhidden_form_three_buttons'] = array(
    'title' => 'Three submit buttons',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('past_testhidden_form_three_buttons'),
    'access arguments' => array('access content'),
    'description' => 'Representing a form with three submit buttons.',
    'type' => MENU_CALLBACK,
  );
  $items['past_testhidden_form_three_buttons_with_submit_handlers'] = array(
    'title' => 'Three submit buttons with submit handlers',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('past_testhidden_form_three_buttons_with_submit_handlers'),
    'access arguments' => array('access content'),
    'description' => 'Representing a form with three submit buttons each having a custom submit handler.',
    'type' => MENU_CALLBACK,
  );
  $items['past_testhidden_form_normal_button'] = array(
    'title' => 'Submit form via normal button',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('past_testhidden_form_normal_button'),
    'access arguments' => array('access content'),
    'description' => 'Representing a form with a normal button submission, not triggering the submit handlers.',
    'type' => MENU_CALLBACK,
  );
  $items['past_testhidden_form_simple_ajax'] = array(
    'title' => 'AJAX Submit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('past_testhidden_form_simple_ajax'),
    'access arguments' => array('access content'),
    'description' => 'Representing a form that does an AJAX submission.',
    'type' => MENU_CALLBACK,
  );
  $items['past_testhidden_form_multi_validation'] = array(
    'title' => 'Multi validation',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('past_testhidden_form_multi_validation'),
    'access arguments' => array('access content'),
    'description' => 'Representing a form several fields to validate.',
    'type' => MENU_CALLBACK,
  );
  $items['past_testhidden_form_custom_validation_only'] = array(
    'title' => 'Custom validation only',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('past_testhidden_form_custom_validation_only'),
    'access arguments' => array('access content'),
    'description' => 'Representing a form having only a custom element_validate.',
    'type' => MENU_CALLBACK,
  );
  $items['past_testhidden_form_multistep'] = array(
    'title' => 'A multistep form',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('past_testhidden_form_multistep'),
    'access arguments' => array('access content'),
    'description' => 'Representing a multistep form.',
    'type' => MENU_CALLBACK,
  );
  $items['past_testhidden_form_nested'] = array(
    'title' => 'A form with nested elements',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('past_testhidden_form_nested'),
    'access arguments' => array('access content'),
    'description' => 'Form with nexted elements.',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

function past_testhidden_errors() {
  return array(
    '#theme' => 'links',
    '#links' => array(
      array('href' => 'past_trigger_error/E_ERROR', 'title' => 'E_ERROR'),
      array('href' => 'past_trigger_error/E_WARNING', 'title' => 'E_WARNING'),
      array('href' => 'past_trigger_error/E_COMPILE_ERROR', 'title' => 'E_COMPILE_ERROR'),
      array('href' => 'past_trigger_error/E_COMPILE_WARNING', 'title' => 'E_COMPILE_WARNING'),
      array('href' => 'past_trigger_error/E_DEPRECATED', 'title' => 'E_DEPRECATED'),
      array('href' => 'past_trigger_error/E_NOTICE', 'title' => 'E_NOTICE'),
      array('href' => 'past_trigger_error/E_PARSE', 'title' => 'E_PARSE'),
      array('href' => 'past_trigger_error/E_RECOVERABLE_ERROR', 'title' => 'E_RECOVERABLE_ERROR'),
      array('href' => 'past_trigger_error/E_STRICT', 'title' => 'E_STRICT'),
      array('href' => 'past_trigger_error/Exception', 'title' => 'Exception'),
    ),
  );
}

/**
 * Page callback that will trigger an error of given type.
 *
 * @param string $type
 *   Error type.
 *
 * @return string
 *   Returns string to get visual.
 */
function past_testhidden_trigger_error($type) {
  module_load_include('inc', 'past_testhidden', '/errors/past.' . $type);
  return 'hello';
}

/**
 * Empty submit handler form. (Global submit handler will be suppressed).
 */
function past_testhidden_form_empty_submit_array($form_state) {
  drupal_set_message('form handler called by past_testhidden_form_empty_submit_array');
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
    '#submit' => array(),
  );
  return $form;
}

/**
 * Empty submit handler form' submit handler
 */
function past_testhidden_form_empty_submit_array_submit($form, &$form_state) {
  drupal_set_message(format_string('global submit handler called by !form_id', array('!form_id' => $form['#form_id'])));
}

/**
 * Default submit handler form.
 */
function past_testhidden_form_default_submit_handler($form_state) {
  drupal_set_message('form handler called by past_testhidden_form_default_submit_handler');
  $form['sample_property'] = array(
    '#type' => 'textfield',
    '#title' => t('Sample Property'),
    '#required' => TRUE,
    '#default_value' => 'sample value',
    '#description' => 'Please enter a dummy value.',
    '#size' => 20,
    '#maxlength' => 20,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
  );
  return $form;
}

/**
 * Default submit handler form' submit handler.
 */
function past_testhidden_form_default_submit_handler_submit($form, &$form_state) {
  drupal_set_message(format_string('global submit handler called by !form_id', array('!form_id' => $form['#form_id'])));
}

/**
 * Custom submit handler Form.
 */
function past_testhidden_form_custom_submit_handler($form_state) {
  drupal_set_message('form handler called by past_testhidden_form_custom_submit_handler');
  $form['sample_property'] = array(
    '#type' => 'textfield',
    '#title' => t('Sample Property'),
    '#required' => TRUE,
    '#default_value' => 'sample value',
    '#description' => 'Please enter a dummy value.',
    '#size' => 20,
    '#maxlength' => 20,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
    '#submit' => array('past_testhidden_custom_submit_handler'),
  );
  return $form;
}

/**
 * A global and a custom (acutally overwritng the global) submit handler form.
 */
function past_testhidden_form_mixed_submit_handlers($form_state) {
  drupal_set_message('form handler called by past_testhidden_form_mixed_submit_handlers');
  $form['sample_property'] = array(
    '#type' => 'textfield',
    '#title' => t('Sample Property'),
    '#required' => TRUE,
    '#default_value' => 'sample value',
    '#description' => 'Please enter a dummy value.',
    '#size' => 20,
    '#maxlength' => 20,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
    '#submit' => array('past_testhidden_custom_submit_handler'),
  );
  return $form;
}

/**
 * A global and a custom (actually overwriting the global) submit handler form's submit handler
 */
function past_testhidden_form_mixed_submit_handlers_submit($form, &$form_state) {
  drupal_set_message(format_string('global submit handler called by !form_id', array('!form_id' => $form['#form_id'])));
}

/**
 * Form with three submit buttons.
 */
function past_testhidden_form_three_buttons($form_state) {
  drupal_set_message('form handler called by past_testhidden_form_three_buttons');
  $form['sample_property'] = array(
    '#type' => 'textfield',
    '#title' => t('Sample Property'),
    '#required' => TRUE,
    '#default_value' => 'sample value',
    '#description' => 'Please enter a dummy value.',
    '#size' => 20,
    '#maxlength' => 20,
  );
  $form['submit_one'] = array(
    '#type' => 'submit',
    '#value' => 'Button 1',
  );
  $form['submit_two'] = array(
    '#type' => 'submit',
    '#value' => 'Button 2',
  );
  $form['submit_three'] = array(
    '#type' => 'submit',
    '#value' => 'Button 3',
  );
  return $form;
}


/**
 * Form with three buttons each having a custom submit handler.
 * There is also a global submit handler, which again never will be called, as overwritten.
 */
function past_testhidden_form_three_buttons_with_submit_handlers($form_state) {
  drupal_set_message('form handler called by past_testhidden_form_three_buttons_with_submit_handlers');
  $form['sample_property'] = array(
    '#type' => 'textfield',
    '#title' => t('Sample Property'),
    '#required' => TRUE,
    '#default_value' => 'sample value',
    '#description' => 'Please enter a dummy value.',
    '#size' => 20,
    '#maxlength' => 20,
  );
  $form['submit_one'] = array(
    '#type' => 'submit',
    '#value' => 'Button 1',
    '#submit' => array('past_testhidden_form_custom_submit_handler_button_one'),
  );
  $form['submit_two'] = array(
    '#type' => 'submit',
    '#value' => 'Button 2',
    '#submit' => array('past_testhidden_form_custom_submit_handler_button_two'),
  );
  $form['submit_three'] = array(
    '#type' => 'submit',
    '#value' => 'Button 3',
    '#submit' => array('past_testhidden_form_custom_submit_handler_button_three'),
  );
  return $form;
}

/**
 * Form with three buttons each having a custom submit handler' global submit handler.
 */
function past_testhidden_form_three_buttons_with_submit_handlers_submit($form, &$form_state) {
  drupal_set_message(format_string('global submit handler called by !form_id', array('!form_id' => $form['#form_id'])));
}

/**
 * Form with three buttons each having a custom submit handler' custom submit handler.
 */
function past_testhidden_form_custom_submit_handler_button_one($form, &$form_state) {
  drupal_set_message(format_string('custom submit handler Button 1 called by !form_id', array('!form_id' => $form['#form_id'])));
}

/**
 * Form with three buttons each having a custom submit handler' custom submit handler.
 */
function past_testhidden_form_custom_submit_handler_button_two($form, &$form_state) {
  drupal_set_message(format_string('custom submit handler Button 2 called by !form_id', array('!form_id' => $form['#form_id'])));
}

/**
 * Form with three buttons each having a custom submit handler' custom submit handler.
 */
function past_testhidden_form_custom_submit_handler_button_three($form, &$form_state) {
  drupal_set_message(format_string('custom submit handler Button 3 called by !form_id', array('!form_id' => $form['#form_id'])));
}

/**
 * Form with a button used for submission, the submit handlers won't be called.
 */
function past_testhidden_form_normal_button($form_state) {
  drupal_set_message('form handler called by past_testhidden_form_normal_button');
  $form['sample_property'] = array(
    '#type' => 'textfield',
    '#title' => t('Sample Property'),
    '#required' => TRUE,
    '#default_value' => 'sample value',
    '#description' => 'Please enter a dummy value.',
    '#size' => 20,
    '#maxlength' => 20,
  );
  $form['button'] = array(
    '#type' => 'button',
    '#value' => 'Button',
    '#submit' => array('past_testhidden_custom_submit_handler'),
  );
  return $form;
}

/**
 * Form with a button used for submission's form handler' submit handler.
 */
function past_testhidden_form_normal_button_submit($form, &$form_state) {
  drupal_set_message(format_string('global submit handler called by !form_id', array('!form_id' => $form['#form_id'])));
}

/**
 * Form submitted by AJAX.
 */
function past_testhidden_form_simple_ajax($form_state) {
  drupal_set_message('form handler called by past_testhidden_form_simple_ajax');
  $form['sample_property'] = array(
    '#type' => 'textfield',
    '#title' => t('Sample Property'),
    '#required' => TRUE,
    '#default_value' => 'sample value',
    '#description' => 'Please enter a dummy value.',
    '#size' => 20,
    '#maxlength' => 20,
  );
  $form['ajax_wrapper'] = array(
    '#type' => 'markup',
    '#prefix' => '<div id="past_testhidden_form_simple_ajax_wrapper">',
    '#suffix' => '</div>',
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
    '#ajax' => array(
      'callback' => 'past_testhidden_form_simple_ajax_callback',
      'wrapper' => 'past_testhidden_form_simple_ajax_wrapper',
    ),
    '#submit' => array('past_testhidden_custom_submit_handler'),
  );
  return $form;
}

/**
 * Form submitted by AJAX's page callback.
 */
function past_testhidden_form_simple_ajax_callback($form, $form_state) {
  //if( (isset($form_state['values']['sample_property'])) && ($form_state['values']['sample_property'] != '') ) {
    $form['ajax_wrapper']['#markup'] = format_string('ajax called by !form_id with sample_property containing: !sample_property_value', array('!form_id' => $form['#form_id'], '!sample_property_value' => $form_state['values']['sample_property']));
  //}
  return $form['ajax_wrapper'];
}

/**
 * Form submitted by AJAX's submit handler.
 */
function past_testhidden_form_simple_ajax_submit($form, &$form_state) {
  drupal_set_message(format_string('global submit handler called by !form_id', array('!form_id' => $form['#form_id'])));
}

/**
 * A form with several fields to validate.
 */
function past_testhidden_form_multi_validation($form_state) {
  drupal_set_message('form handler called by past_testhidden_form_multi_validation');
  $form['sample_property'] = array(
    '#type' => 'textfield',
    '#title' => t('Sample Property'),
    '#required' => TRUE,
    '#default_value' => 'sample value',
    '#description' => 'Please enter a dummy value.',
    '#size' => 20,
    '#maxlength' => 20,
  );
  $form['another_sample_property'] = array(
    '#type' => 'checkbox',
    '#title' => t('Another Sample Property'),
    '#default_value' => 0,
    '#required' => TRUE,
    '#description' => 'Please enter a dummy value.',
    '#size' => 20,
    '#maxlength' => 20,
  );
  $form['sample_select'] = array(
    '#type' => 'select',
    '#title' => t('Sample Select'),
    '#options' => array(
      0 => 'No',
      1 => 'Yes',
      2 => 'Maybe',
    ),
    '#default_value' => 2,
    '#multipe' => FALSE,
    '#description' => 'Please enter a dummy value.',
    '#element_validate' => array('past_testhidden_form_multi_validation_element_sample_select_validate'),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
  );
  return $form;
}

/**
 * A form with several fields to validate's validation handler.
 */
function past_testhidden_form_multi_validation_submit($form, &$form_state) {
  drupal_set_message(format_string('global submit handler called by !form_id', array('!form_id' => $form['#form_id'])));
}

/**
 * A form with several one custom element_validate.
 */
function past_testhidden_form_custom_validation_only($form_state) {
  drupal_set_message('form handler called by past_testhidden_form_custom_validation_only');
  $form['sample_property'] = array(
    '#type' => 'textfield',
    '#title' => t('Sample Property'),
    '#default_value' => 'sample value',
    '#description' => 'Please enter a dummy value.',
    '#size' => 20,
    '#maxlength' => 20,
  );
  $form['another_sample_property'] = array(
    '#type' => 'checkbox',
    '#title' => t('Another Sample Property'),
    '#default_value' => 0,
    '#description' => 'Please enter a dummy value.',
    '#size' => 20,
    '#maxlength' => 20,
  );
  $form['sample_select'] = array(
    '#type' => 'select',
    '#title' => t('Sample Select'),
    '#options' => array(
      0 => 'No',
      1 => 'Yes',
      2 => 'Maybe',
    ),
    '#default_value' => 2,
    '#multipe' => FALSE,
    '#description' => 'Please enter a dummy value.',
    '#element_validate' => array('past_testhidden_form_multi_validation_element_sample_select_validate'),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
  );
  return $form;
}

/**
 * A form with several one custom element_validate's validation handler.
 */
function past_testhidden_form_custom_validation_only_submit($form, &$form_state) {
  drupal_set_message(format_string('global submit handler called by !form_id', array('!form_id' => $form['#form_id'])));
}

/**
 * A multistep form.
 */
function past_testhidden_form_multistep($form, &$form_state) {
  $form = _past_testhidden_multistep_form_header($form, $form_state);
  switch ($form_state['page_num']) {
    case 2:
      return _past_testhidden_multistep_form_page_two($form, $form_state);
      break;
    case 3:
      return _past_testhidden_multistep_form_page_three($form, $form_state);
      break;
    default:
      return _past_testhidden_multistep_form_page_one($form, $form_state);
      break;
  }
}

/**
 * Returns the form header (fe. Page 1 of 2).
 */
function _past_testhidden_multistep_form_header($form, &$form_state) {
  if (isset($form_state['page_num'])) {
    $current_step = $form_state['page_num'];
  }
  else {
    $current_step = 1;
    $form_state['page_num'] = $current_step;
  }

  $stages = array(
    1 => array('data' => '1. Page one'),
    2 => array('data' => '2. Page two'),
    3 => array('data' => '3. Page three'),
  );

  $stages[$current_step]['class'] = array('title');

  $form['header'] = array(
    '#type' => 'fieldset',
    '#title' => '',
    '#value' => theme('item_list', array('items' => $stages)),
  );

  return $form;
}

/**
 * Returns the form for page one.
 */
function _past_testhidden_multistep_form_page_one($form, &$form_state) {
  drupal_set_message('form handler step 1 called by past_testhidden_form_multistep');
  $form['sample_property'] = array(
    '#type' => 'textfield',
    '#title' => t('Sample Property'),
    '#default_value' => 'sample value',
    '#description' => 'Please enter a dummy value.',
    '#size' => 20,
    '#maxlength' => 20,
  );
  $form['next'] = array(
    '#type' => 'submit',
    '#value' => 'Next',
  );
  return $form;
}

/**
 * Returns the form for page two.
 */
function _past_testhidden_multistep_form_page_two($form, &$form_state) {
  drupal_set_message('form handler step 2 called by past_testhidden_form_multistep');
  $form['sample_property_2'] = array(
    '#type' => 'textfield',
    '#title' => t('Sample Property'),
    '#default_value' => 'sample value 2',
    '#description' => 'Please enter a dummy value.',
    '#size' => 20,
    '#maxlength' => 20,
  );
  $form['next'] = array(
    '#type' => 'submit',
    '#value' => 'Next',
  );
  $form['back'] = array(
    '#type' => 'submit',
    '#value' => 'Back',
    // We won't bother validating the required fields, since they
    // have to come back to this page to submit anyway.
    '#limit_validation_errors' => array(),
  );
  return $form;
}

/**
 * Returns the form for page three.
 */
function _past_testhidden_multistep_form_page_three($form, &$form_state) {
  drupal_set_message('form handler step 3 called by past_testhidden_form_multistep');
  $form['sample_property_3'] = array(
    '#type' => 'textfield',
    '#title' => t('Sample Property'),
    '#default_value' => 'sample value 3',
    '#description' => 'Please enter a dummy value.',
    '#size' => 20,
    '#maxlength' => 20,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
  );
  $form['back'] = array(
    '#type' => 'submit',
    '#value' => 'Back',
    // We won't bother validating the required fields, since they
    // have to come back to this page to submit anyway.
    '#limit_validation_errors' => array(),
  );
  return $form;
}

/**
 * A multistep form's submit handler.
 */
function past_testhidden_form_multistep_submit($form, &$form_state) {
  if (!isset($form_state['page_num'])) {
    $form_state['page_num'] = 1;
  }
  drupal_set_message(format_string('global submit handler step !page_num called by !form_id',
      array('!page_num' => $form_state['page_num'], '!form_id' => $form['#form_id'])));
  $form_state['page_values'][$form_state['page_num']] = $form_state['values'];

  switch ($form_state['page_num']) {

    case 3:
      if ($form_state['triggering_element']['#value'] != 'Back') {
        $form_state['complete'] = TRUE;
      }
      break;

    default:
      $form_state['multi_step']['new_stage'] = $form_state['page_num'] + 1;
      break;

  }

  if (isset($form_state['complete'])) {
    return;
  }

  if ($form_state['triggering_element']['#value'] == 'Back') {
    $form_state['multi_step']['new_stage'] = $form_state['page_num'] - 1;
  }

  if (!empty($form_state['page_values'][$form_state['multi_step']['new_stage']])) {
    $form_state['values'] = $form_state['page_values'][$form_state['multi_step']['new_stage']];
  }

  $form_state['page_num'] = $form_state['multi_step']['new_stage'];
  $form_state['rebuild'] = TRUE;
}

/**
 * Custom submit handler used by several test forms.
 */
function past_testhidden_custom_submit_handler($form, &$form_state) {
  drupal_set_message(format_string('custom submit handler called by !form_id', array('!form_id' => $form['#form_id'])));
}

/**
 * Custom validation handler used by several test forms.
 */
function past_testhidden_form_multi_validation_element_sample_select_validate($element, &$form_state, $form) {
  if ($element['#name'] == 'sample_select') {
    if ($element['#value'] == '') {
      form_set_error($element['#name'], $element['#title'] . ' field is required.');
    }
    elseif ($element['#value'] == '2') {
      form_set_error($element['#name'], $element['#title'] . ': says, don\'t be a maybe ..');
    }
  }
}

/**
 * A form with nested fields.
 */
function past_testhidden_form_nested($form, &$form_state) {
  $form['wrapper'] = array(
    '#type' => 'container',
    '#tree' => TRUE,
  );
  $form['wrapper']['field_1'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject 1'),
    '#default_value' => '',
    '#size' => 60,
    '#maxlength' => 128,
  );
  $form['wrapper']['field_2'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject 2'),
    '#default_value' => '',
    '#size' => 60,
    '#maxlength' => 128,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  return $form;
}

/**
 * A form with nested fields.
 */
function past_testhidden_form_nested_validate($form, &$form_state) {
  if ($form_state['values']['wrapper']['field_1'] != 'correct value') {
    form_set_error('wrapper][field_1', t("Field 1 doesn't contain the right value"));
  }
}
