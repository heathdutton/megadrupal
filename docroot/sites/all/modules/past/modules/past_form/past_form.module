<?php

/**
 * @file
 * Main bootstrap file for past_grabber.
 */

/**
 * Implements hook_FORM_ID_alter().
 *
 * Alters past admin settings.
 */
function past_form_form_past_admin_settings_alter(&$form, &$form_state, $form_id) {
  $form['form'] = array(
    '#type' => 'fieldset',
    '#title' => t('Form logging'),
    '#collapsible' => TRUE,
    '#description' => t('Past form logging settings.'),
  );
  $form['form']['past_form_log_validations'] = array(
    '#type' => 'checkbox',
    '#title' => t('Log form validations'),
    '#default_value' => variable_get('past_form_log_validations', 0),
    '#description' => t('When enabled, Past will log also form validations.'),
  );
  $form['form']['past_form_log_form_ids'] = array(
    '#type' => 'textarea',
    '#title' => t("Log listed form_id's"),
    '#default_value' => variable_get('past_form_log_form_ids', ''),
    '#description' => t("A list of form_id's that will be logged. Put each on a new line. (* is supported as wildcard, for instance views_ui_*)"),
  );
}

/**
 * Implements hook_views_api().
 */
function past_form_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Implements hook_form_alter().
 *
 * Adds past submit handler to form elements.
 *
 * A form has a default #submit handler with name FORM_ID_submit.
 * If an element has its own #submit handler, the global one isn't called.
 *
 * We extend the global form handler. If not yet defined, we add the default one first.
 * Same story for #validate handlers.
 * We add element specific handlers if there are already specific defined.
 * Views exposed forms are excluded.
 */
function past_form_form_alter(&$form, &$form_state, $form_id) {
  // @todo move the form_id globbing in a function.
  $included_form_ids = variable_get('past_form_log_form_ids', '');
  // Check the string. So that the array does not contain an empty string.
  if (empty($included_form_ids)) {
    return;
  }
  // Check the included_form_id settings.
  $log_form = FALSE;
  $included_form_ids = explode("\n", variable_get('past_form_log_form_ids', ''));
  foreach ($included_form_ids as $included_form_id) {
    if ($form_id == $included_form_id) {
      $log_form = TRUE;
    }
    elseif (fnmatch($included_form_id, $form_id)) {
      $log_form = TRUE;
    }
  }
  if (!$log_form) {
    return;
  }
  if (!empty($form_state['always_process']) && $form_state['always_process']==TRUE) {
    // Views does always_process to TRUE that leads to "fake" validate/submit
    // even for regular views page loads with exposed forms.
    // @todo find a way to identify real validations/submits in this case.
    //   Currently we skip them too.
    return;
  }

  // Recover global/default #submit handler.
  // Otherwise the past_form submit handler will suppress the invocation
  // if only the global submit handler is set.
  if (empty($form['#submit'])) {
    $form['#submit'] = array();
    if (function_exists($form_id . '_submit')) {
      $form['#submit'][] = $form_id . '_submit';
    }
  }
  // Add past form submit handler.
  $form['#submit'][] = 'past_form_submit';

  $validators = NULL;
  if (variable_get('past_form_log_validations', 0)) {

    // Recover global/default #validate handler.
    if (empty($form['#validate'])) {
      $form['#validate'] = array();
      if (function_exists($form_id . '_validate')) {
        $form['#validate'][] = $form_id . '_validate';
      }
    }

    // Fetch custom validators.
    $validators = $form['#validate'];

    // Add past form validation handler.
    $form['#validate'][] = 'past_form_validate';
  }

  // Apply the submit handler to all submit elements.
  past_form_attach_recursive($form, $form_state, $form_id);
}

/**
 * Recursively attach #submit and #validate handlers to all element children.
 *
 * In case a specific handler is present, the global handler isn't fired.
 * Check form_execute_handlers() for default fallback strategy of handlers.
 *
 * @param array $subform
 *   The form array wo which handlers will be attached to.
 * @param array $form_state
 *   The form state array.
 * @param array $form_id
 *   The form id of the processed form.
 */
function past_form_attach_recursive(&$subform, $form_state, $form_id) {
  foreach (element_children($subform) as $key) {
    $element =& $subform[$key];
    if (!empty($element['#type']) && $element['#type'] == 'submit') {
      if (!empty($element['#submit']) ||
          (array_key_exists('#submit', $element) && count($element['#submit']) == 0) ) {
        // Add past_form submit handler if there is a specific one already.
        // Check also for empty array, to make sure we log all submission.
        $element['#submit'][] = 'past_form_submit';
      }
    }

    if (variable_get('past_form_log_validations', 0)) {
      if (!empty($element['#type']) &&
        (in_array('submit', $element) || in_array('button', $element) ||
         in_array('image_button', $element)) ) {
        if (!empty($element['#validate']) ||
            (array_key_exists('#validate', $element) && count($element['#validate']) == 0)) {
          // Only add the validation handler if there is a specific one already.
          // Check also for empty array, to make sure we log all submission.
          $element['#validate'][] = 'past_form_validate';
        }
      }
    }

    // Check further subelements.
    past_form_attach_recursive($element, $form_state, $form_id);
  }
}

/**
 * Process submission.
 */
function past_form_submit($form, &$form_state) {
  _past_form_save_event($form, $form_state);
}

/**
 * Process validation.
 */
function past_form_validate($form, &$form_state) {
  $errors = form_get_errors();
  if (is_array($errors) && count($errors) > 0) {
    _past_form_save_event($form, $form_state, 'validate', 'Form validation error:', $errors);
  }
}

/**
 * Save a past event from the given form.
 *
 * @param array $form
 *   The form array of which an event will be saved for.
 * @param array $form_state
 *   The form state array of the form of which an event will be saved for.
 * @param string $machine_name
 *   The machine name of the event.
 * @param string $machine_name
 *   Prefix of the event message.
 * @param array $errors
 *   Validation errors that will be logged.
 */
function _past_form_save_event($form, $form_state, $machine_name = 'submit', $message_prefix = 'Form submitted:', $errors = array()) {
  $form_id = $form['#form_id'];
  $form_values = $form_state['values'];
  // Do not log passwords!
  $ignored = variable_get('past_form_ignored_values', array('pass', 'current_pass', 'pass2'));
  foreach ($ignored as $key) {
    if (array_key_exists($key, $form_values)) {
      $form_values[$key] = str_repeat('*', 5);
    }
  }

  $message = $message_prefix . ' ' . $form_id;
  $operation = NULL;
  if (!empty($form_state['triggering_element']['#value'])) {
    $operation = $form_state['triggering_element']['#value'];
    unset($form_values['op']);
  }
  elseif (!empty($form_state['values']['op'])) {
    // Fallback, op is DEPRECATED.
    $operation = $form_state['values']['op'];
    unset($form_values['op']);
  }
  elseif (!empty($form_state['values'][''])) {
    // Fallback, views do not set op as key, but an empty string.
    $operation = $form_state['values'][''];
    unset($form_values['']);
  }

  if ($operation != NULL) {
    $message .= ', ' . $operation;
  }
  // Create the past event.
  $event = past_event_create('past_form', $machine_name, $message);
  $event->setSeverity(PAST_SEVERITY_DEBUG);

  if ($operation != NULL) {
    $event->addArgument('operation', $operation);
  }
  $event->addArgument('form_id', $form_id);
  unset($form_values['form_id']);
  $event->addArgument('form_build_id', $form['#build_id']);
  unset($form_values['form_build_id']);
  $event->addArgument('values', $form_values);
  if (!empty($errors)) {
    $error_elements = array();
    foreach ($errors as $element_name => $validation_error) {
      $error_elements[$element_name]['message'] = $validation_error;
      $error_elements[$element_name]['submitted'] = drupal_array_get_nested_value($form_values, explode('][', $element_name));
    }
    $event->addArgument('errors', $error_elements);
  }

  $event->save();
}
