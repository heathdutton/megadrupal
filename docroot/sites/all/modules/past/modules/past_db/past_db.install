<?php

/**
 * @file
 * Installation hooks.
 */

/**
 * Implements hook_schema().
 */
function past_db_schema() {
  $schema['past_event'] = array(
    'description' => 'A logged event',
    'fields' => array(
      'event_id' => array(
        'description' => 'The identifier of the event.',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'The {past_event_type}.type of this event.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => 'past_event',
      ),
      'module' => array(
        'description' => 'The module that logged this event',
        'type' => 'varchar',
        'length' => '128',
        'not null' => TRUE,
      ),
      'machine_name' => array(
        'description' => 'The machine name of this event',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'severity' => array(
        'description' => 'The severity of the event',
        'type' => 'int',
        'size' => 'small',
        'not null' => TRUE,
      ),
      'message' => array(
        'description' => 'The event message',
        'type' => 'text',
      ),
      'parent_event_id' => array(
        'description' => 'An existing event that this relates to',
        'type' => 'int',
      ),
      'timestamp' => array(
        'description' => 'Timestamp of the event',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'uid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The {users}.uid of the user who triggered the event.',
      ),
    ),
    'primary key' => array('event_id'),
    'indexes' => array(
      'severity' => array('severity'),
      'module' => array('module'),
      'machine_name' => array('machine_name'),
      'type' => array('type'),
    ),
    'foreign keys' => array(
      'type' => array(
        'table' => 'past_event_type',
        'columns' => array('type' => 'type'),
      ),
      'uid' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
    ),
  );
  $schema['past_event_argument'] = array(
    'description' => 'An event argument',
    'fields' => array(
      'argument_id' => array(
        'description' => 'The identifier of the event argument.',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'event_id' => array(
        'description' => 'The identifier of the event.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'The name of this argument',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'The type of this argument',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'raw' => array(
        'description' => 'The raw data of this argument',
        'type' => 'text',
      ),
    ),
    'primary key' => array('argument_id'),
    'indexes' => array(
      'event_id' => array('event_id'),
    ),
  );
  $schema['past_event_data'] = array(
    'description' => 'An event argument',
    'fields' => array(
      'data_id' => array(
        'description' => 'The identifier of the data item',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'argument_id' => array(
        'description' => 'The identifier of the event argument.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'parent_data_id' => array(
        'description' => 'The identifier of the parent data item.',
        'type' => 'int',
      ),
      'serialized' => array(
        'description' => 'If the value is serialized or not.',
        'type' => 'int',
        'size' => 'tiny',
      ),
      'name' => array(
        'description' => 'The name of this data item',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'The type of this argument',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'value' => array(
        'description' => 'The value of this data item',
        'type' => 'text',
      ),
    ),
    'primary key' => array('data_id'),
    'indexes' => array(
      'argument_id' => array('argument_id'),
    ),
  );
  $schema['past_event_type'] = array(
    'description' => 'Stores information about all defined past event types.',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique past event type ID.',
      ),
      'type' => array(
        'description' => 'The machine-readable name of this past event type.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'label' => array(
        'description' => 'The human-readable name of this past event type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'The weight of this past event type in relation to others.',
      ),
      'data' => array(
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of additional data related to this past event type.',
      ),
      'status' => array(
        'type' => 'int',
        'not null' => TRUE,
        // Set the default to ENTITY_CUSTOM without using the constant as it is
        // not safe to use it at this point.
        'default' => 0x01,
        'size' => 'tiny',
        'description' => 'The exportable status of the entity.',
      ),
      'module' => array(
        'description' => 'The name of the providing module if the entity has been defined in code.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('id'),
    'unique keys' => array(
      'type' => array('type'),
    ),
  );

  return $schema;
}

/**
 * Implements hook_enable().
 */
function past_db_enable() {
  // Create default past event type.
  $event_type = entity_create('past_event_type', array(
    'type' => 'past_event',
    'label' => t('Default'),
    'weight' => 0,
  ));
  $event_type->save();
}

/**
 * Map PAST_SEVERITY_ values to use WATCHDOG's ones.
 */
function past_db_update_7000() {
  /* PAST_SEVERITY_ERROR */
  db_update('past_event')
    ->fields(array('severity' => 3))
    ->condition('severity', 1)
    ->execute();

  /* PAST_SEVERITY_INFO */
  db_update('past_event')
    ->fields(array('severity' => 6))
    ->condition('severity', 4)
    ->execute();

  /* PAST_SEVERITY_WARNING */
  db_update('past_event')
    ->fields(array('severity' => 4))
    ->condition('severity', 2)
    ->execute();

  /* PAST_SEVERITY_DEBUG */
  db_update('past_event')
    ->fields(array('severity' => 7))
    ->condition('severity', 8)
    ->execute();
}

/**
 * Creates past_event_type table.
 *
 * Adds type field into past_event table.
 * Creates default past_event_type.
 */
function past_db_update_7001() {

  if (!db_table_exists('past_event_type')) {
    db_create_table('past_event_type', array(
        'description' => 'Stores information about all defined past event types.',
        'fields' => array(
          'id' => array(
            'type' => 'serial',
            'not null' => TRUE,
            'description' => 'Primary Key: Unique past event type ID.',
          ),
          'type' => array(
            'description' => 'The machine-readable name of this past event type.',
            'type' => 'varchar',
            'length' => 32,
            'not null' => TRUE,
          ),
          'label' => array(
            'description' => 'The human-readable name of this past event type.',
            'type' => 'varchar',
            'length' => 255,
            'not null' => TRUE,
            'default' => '',
          ),
          'weight' => array(
            'type' => 'int',
            'not null' => TRUE,
            'default' => 0,
            'size' => 'tiny',
            'description' => 'The weight of this past event type in relation to others.',
          ),
          'data' => array(
            'type' => 'text',
            'not null' => FALSE,
            'size' => 'big',
            'serialize' => TRUE,
            'description' => 'A serialized array of additional data related to this past event type.',
          ),
          'status' => array(
            'type' => 'int',
            'not null' => TRUE,
            // Set the default to ENTITY_CUSTOM without using the constant as it is
            // not safe to use it at this point.
            'default' => 0x01,
            'size' => 'tiny',
            'description' => 'The exportable status of the entity.',
          ),
          'module' => array(
            'description' => 'The name of the providing module if the entity has been defined in code.',
            'type' => 'varchar',
            'length' => 255,
            'not null' => FALSE,
          ),
        ),
        'primary key' => array('id'),
        'unique keys' => array(
          'type' => array('type'),
        ))
    );
  }

  // Add field if missing.
  if (!db_field_exists('past_event', 'type')) {
    db_add_field('past_event', 'type', array(
      'description' => 'The machine-readable name of this past event type.',
      'type' => 'varchar',
      'length' => 32,
      'not null' => TRUE,
      // The default bundle machine_name
      'default' => 'past_event',
    ));
    // index
    db_add_index('past_event', 'type', array(
      'type',
    ));
  }

  // Insert default event type.
  db_insert('past_event_type')
      ->fields(array('type' => 'past_event', 'label' => t('Default')))
      ->execute();
}

/**
 * Adds uid field to {past_event}.
 */
function past_db_update_7002() {
  if (!db_field_exists('past_event', 'uid')) {
    db_add_field('past_event', 'uid', array(
      'type' => 'int',
      'not null' => TRUE,
      'default' => 0,
      'description' => 'The {users}.uid of the user who triggered the event.',
    ));
  }
}
