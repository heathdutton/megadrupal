<?php

/**
 * @file
 * Contains tests for the past_db Admin UI.
 */

class PastDBBaseTestCase extends DrupalWebTestCase {

  protected $event_desc;
  protected $machine_name;
  protected $severities;
  protected $events = array();

  protected function createEvents($count = 99) {
    // Set some for log creation.
    $this->machine_name = 'machine name';
    $this->severities = past_event_severities();
    $severities_codes = array_keys($this->severities);
    $severities_count = count($this->severities);
    $this->event_desc = 'message #';

    // Prepare some logs.
    for($i = 0; $i <= $count; $i++) {
      $event = past_event_create('past_db', $this->machine_name, $this->event_desc . ($i + 1));
      $event->addArgument('arg1', 'First Argument');
      $event->addArgument('arg2', new stdClass());
      $event->addArgument('arg3', FALSE);
      $event->setSeverity($severities_codes[$i%$severities_count]);
      $event->save();
      $this->events[$event->event_id] = $event;
    }
  }

  /**
   * @return PastEvent[]
   */
  protected function loadEvents() {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'past_event');
    $result = $query->execute();
    return entity_load('past_event', array_keys($result['past_event']));
  }
}

class PastDBTest extends PastDBBaseTestCase {

  static function getInfo() {
    return array(
      'name' => 'Past DB tests',
      'description' => 'Tests for DB backend of the Past module.',
      'group' => 'Past',
      'dependencies' => array(
        'entityreference',
      ),
    );
  }

  function setUp() {
    parent::setUp(array('views', 'past', 'past_db', 'entityreference'));
    $admin = $this->drupalCreateUser(array('administer past'));
    $this->drupalLogin($admin);
    $this->createEvents();
  }

  /**
   * Tests event bundles.
   */
  function testEventBundles() {
    $event_type = past_event_type_create('test_event', 'Test event');
    $event_type->save();

    $event_type = past_event_get_types('test_event');
    $this->assertEqual($event_type->label, 'Test event');
    $this->assertEqual($event_type->type, 'test_event');

    $event = past_event_create('past', 'test_event', 'test message');
    $event->type = 'test_event';
    $event->save();

    $events = $this->loadEvents();
    $event = array_pop($events);

    $wrapper = entity_metadata_wrapper('past_event', $event);
    $this->assertEqual($wrapper->getBundle(), 'test_event');
  }

  /**
   * Tests event extra fields display.
   */
  function testEventExtraFields() {
    // Check for default bundle.
    $this->drupalGet('admin/config/development/past-types');
    $this->assertText('Machine name: past_event', 'Default bundle was found.');

    // Check for extra fields display on default bundle.
    $this->drupalGet('admin/config/development/past-types/manage/past_event/display');
    $this->assertText(t('Message'));
    $this->assertText(t('Module'));
    $this->assertText(t('Machine name'));
    $this->assertText(t('Event time'));
    $this->assertText(t('User'));
    $this->assertText(t('Arguments'));

    // Add new bundle.
    $edit = array(
      'label' => 'Test bundle',
      'type' => 'test_bundle'
    );
    $this->drupalPost('admin/config/development/past-types/add', $edit, t('Save past event type'));
    $this->assertText('Machine name: ' . $edit['type'], 'Create bundle was found.');

    // Check for extra fields display on default bundle.
    $this->drupalGet('admin/config/development/past-types/manage/' . $edit['type'] . '/display');
    $this->assertText(t('Message'));
    $this->assertText(t('Module'));
    $this->assertText(t('Machine name'));
    $this->assertText(t('Event time'));
    $this->assertText(t('User'));
    $this->assertText(t('Arguments'));

    // Create event of newly created type.
    $values = array(
      'bundle' => $edit['type'],
      'message' => 'testmessage',
      'module' => 'testmodule',
      'machine_name' => 'testmachinename',
    );
    $event = entity_create('past_event', $values);
    $event->save();
    $this->drupalGet('admin/reports/past/' . $event->event_id);
    $this->assertText($values['message']);
    $this->assertText($values['module']);
    $this->assertText($values['machine_name']);
  }

  function testFieldability() {
    // Add new bundle.
    $bundle = 'test_bundle';
    $edit = array(
      'label' => 'Test bundle',
      'type' => $bundle,
    );
    $this->drupalPost('admin/config/development/past-types/add', $edit, t('Save past event type'));

    // Create an entity reference field on the bundle.
    $field_instance = $this->addField($bundle);
    // Check if the field shows up in field config of the bundle.
    $this->drupalGet('admin/config/development/past-types/manage/' . $bundle . '/fields');
    $this->assertText($field_instance['label']);
    $this->assertText($field_instance['field_name']);
    $this->assertText(t('Entity Reference'));

    // Create an event that we can reference to.
    $referenced_event_message = 'Referenced Event Test message';
    $referenced_event = past_event_create('past_db', 'test_referenced_event', $referenced_event_message);
    $referenced_event->save();

    // Create an event of the bundle.
    $values = array(
      //'bundle' => $bundle,
      'message' => 'testmessage',
      'module' => 'testmodule',
      'machine_name' => 'testmachinename',
    );
    $event = entity_create('past_event', $values);
    $event->{$field_instance['field_name']}[LANGUAGE_NONE][0]['target_id'] = $referenced_event->event_id;
    $event->type = $bundle;
    $event->save();

    // Check whether the bundle was saved correct.
    $event = entity_load_single('past_event', $event->event_id);
    $this->assertEqual($event->type, $bundle);

    // Check if the created fields shows up on the event display.
    $this->drupalGet('admin/reports/past/' . $event->event_id);
    // Check field label display.
    $this->assertText($field_instance['label']);
    // Check field value display.
    $this->assertText($referenced_event_message);
  }

  /**
   * Tests the pas event log UI.
   */
  public function testAdminUI() {
    // Open the event log.
    $this->drupalGet('admin/reports/past');

    // Check for some messages.
    $this->assertText($this->event_desc . 100);
    $this->assertText($this->event_desc . 99);
    $this->assertText($this->event_desc . 98);
    $this->assertText($this->event_desc . 51);

    // Check severities.
    $this->assertText($this->severities[PAST_SEVERITY_DEBUG]);
    $this->assertText($this->severities[PAST_SEVERITY_INFO]);
    $this->assertText($this->severities[PAST_SEVERITY_WARNING]);

    // Test if we have correct classes for severities.
    $class_names = past_db_severity_css_classes_map();
    $i = 0;
    /** @var SimpleXMLElement $row */
    foreach ($this->xpath('//table[contains(@class, @views-table)]/tbody/tr') as $row) {
      // Testing first 10 should be enough.
      if ($i > 9) {
        break;
      }
      $event_id = trim($row->td);
      $event = $this->events[$event_id];
      $class_name = $class_names[$event->severity];
      $attributes = $row->attributes();
      $this->assertTrue(strpos($attributes['class'], $class_name) !== FALSE);
      $i++;
    }

    // Check machine name.
    $this->assertText($this->machine_name);

    // Check for the exposed filter fields.
    $this->assertFieldByName('module', '');
    $this->assertFieldByName('severity[]', '');
    $this->assertFieldByName('message', '');

    // Check paging.
    $this->assertText('next ›');
    $this->assertText('last »');

    // Open the 2nd page.
    $options = array(
      'query' => array(
        'module' => '',
        'message' => '',
        'page' => 1,
      ),
    );
    $this->drupalGet('admin/reports/past', $options);

    // Check for some messages.
    $this->assertText($this->event_desc . 50);
    $this->assertText($this->event_desc . 49);
    $this->assertText($this->event_desc . 1);

    // Check paging.
    $this->assertText('‹ previous');
    $this->assertText('« first');

    // Go to the first detail page
    $this->drupalGet('admin/reports/past/1');

    $this->assertText($this->machine_name);
    $this->assertText($this->event_desc . 1);
    $this->assertText('arg1');
    $this->assertText('arg2');
    $this->assertText('arg3');
    $this->assertText('First Argument');

    // Check events with a float argument.
    $event = past_event_save('past_db', 'float_test', 'Float test', array('float' => 3.14));
    $this->drupalGet('admin/reports/past/' . $event->id());
    $this->assertText('Float test');
    $this->assertText('3.14');

    $this->drupalLogout();

    // Check permissions for detail page.
    $this->drupalGet('admin/reports/past/1');
    $this->assertText(t('You are not authorized to access this page'));
    // Check permissions for event log.
    $this->drupalGet('admin/reports/past');
    $this->assertText(t('You are not authorized to access this page'));
  }

  protected function addField($bundle) {
    $field_info = array(
      'entity_types' => array('past_event'),
      'settings' => array(
        'target_type' => 'past_event',
      ),
      'field_name' => 'field_fieldtest',
      'type' => 'entityreference',
      'module' => 'entityreference',
      'bundles' => array(
        'past_event' => array(
          0 => $bundle,
        ),
      ),
    );
    field_create_field($field_info);
    $instance_info = array(
      'label' => 'test entity reference',
      'display' => array(
        'default' => array(
          'label' => 'above',
          'type' => 'entityreference_label',
          'settings' => array(
            'link' => FALSE,
          ),
        ),
      ),
      'field_name' => 'field_fieldtest',
      'entity_type' => 'past_event',
      'bundle' => $bundle,
    );
    field_create_instance($instance_info);
    return $instance_info;
  }
}
