<?php

/**
 * @file
 * Module file for the past_bughunt module.
 */



/**
 * Implements hook_views_api().
 */
function past_bughunt_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Implements hook_flag_default_flags().
 */
function past_bughunt_flag_default_flags() {
  $flags = array();
  // Exported flag: "Event done".
  $flags['event_done'] = array(
    'entity_type' => 'past_event',
    'title' => 'Event done',
    'global' => '1',
    'types' => array(
      0 => 'past_event',
    ),
    'errors' => array(),
    'flag_short' => 'Mark as done',
    'flag_long' => 'Mark this event as done',
    'flag_message' => 'The event is now flagged as done',
    'unflag_short' => 'Mark as TODO',
    'unflag_long' => 'Remove the done flag from this event',
    'unflag_message' => 'The done state was removed from the event',
    'unflag_denied_text' => '',
    'link_type' => 'toggle',
    'weight' => 0,
    'show_in_links' => array(),
    'show_as_field' => FALSE,
    'show_on_form' => 0,
    'access_author' => '',
    'show_contextual_link' => FALSE,
    'api_version' => 3,
  );

  // Exported flag: "Event TODO".
  $flags['event_todo'] = array(
    'entity_type' => 'past_event',
    'title' => 'Event TODO',
    'global' => '1',
    'types' => array(
      0 => 'past_event',
    ),
    'errors' => array(),
    'flag_short' => 'Mark as TODO',
    'flag_long' => 'Mark this event as TODO',
    'flag_message' => 'The event is now flagged as TODO',
    'unflag_short' => 'Remove the TODO flag',
    'unflag_long' => 'Remove the TODO flag from this event',
    'unflag_message' => 'The TODO flag was removed from the event',
    'unflag_denied_text' => '',
    'link_type' => 'toggle',
    'weight' => -10,
    'show_in_links' => array(),
    'show_as_field' => FALSE,
    'show_on_form' => 0,
    'access_author' => '',
    'show_contextual_link' => FALSE,
    'api_version' => 3,
  );

  return $flags;
}

/**
 * Implements hook_entity_view().
 */
function past_bughunt_entity_view($entity, $type, $view_mode, $langcode) {

  if ($type != 'past_event' || $view_mode != 'full') {
    return;
  }

  $view = views_get_view(variable_get('past_bughunt_similar_events_view', 'past_similar_events'));
  $view->set_display('page_1');
  $view->set_current_page(current_path());

  // Module name field.
  $filter = $view->get_item($view->current_display, 'filter', 'module');
  $filter['value'] = $entity->module;
  $view->set_item($view->current_display, 'filter', 'module', $filter);

  // Severity field.
  $filter = $view->get_item($view->current_display, 'filter', 'severity');
  $filter['value'] = array($entity->severity);
  $view->set_item($view->current_display, 'filter', 'severity', $filter);

  // Message field.
  $filter = $view->get_item($view->current_display, 'filter', 'message');
  $filter['value'] = drupal_substr($entity->message, 0, 128);
  $view->set_item($view->current_display, 'filter', 'message', $filter);

  // Current event id - exclude it from the view.
  $filter = $view->get_item($view->current_display, 'filter', 'event_id');
  $filter['value']['value'] = $entity->event_id;
  $view->set_item($view->current_display, 'filter', 'event_id', $filter);

  $entity->content['similar_events'] = array(
    '#type' => 'item',
    '#title' => t('Similar events'),
    '#markup' => $view->preview(),
    '#weight' => 100,
  );
}

/**
 * Add special classes to the rows.
 */
function past_bughunt_preprocess_views_view_table(&$vars) {
  // Do this only for the Past views.
  if (!in_array($vars['view']->name, array('past_event_todo', 'past_event_done'))) {
    return;
  }
  past_db_add_row_colors($vars);
}
