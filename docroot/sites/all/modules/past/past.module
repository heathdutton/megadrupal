<?php

/**
 * @file
 * Module file for the past project.
 */

/**
 * Severities correspond to Log message severity from WATCHDOG
 * @see bootstrap.inc
 */
define('PAST_SEVERITY_EMERGENCY', 0);
define('PAST_SEVERITY_ALERT', 1);
define('PAST_SEVERITY_CRITICAL', 2);
define('PAST_SEVERITY_ERROR', 3);
define('PAST_SEVERITY_WARNING', 4);
define('PAST_SEVERITY_NOTICE', 5);
define('PAST_SEVERITY_INFO', 6);
define('PAST_SEVERITY_DEBUG', 7);

/**
 * Creates and saves a past event.
 *
 * @param string $module
 *   The name of the module which is logging the event.
 * @param $machine_name
 *   The machine name of the event.
 * @param type $message
 *   A description of the event.
 * @param array $arguments
 *   An array of arguments to be saved with the event. They array key is used
 *   as the argument key and the value is the argument data.
 * @param array $options
 *   An array of additional options. Any of the following:
 *     - timestamp: Override the timestamp, defaults to REQUEST_TIME
 *     - severity: One of PAST_SEVERITY_DEBUG, PAST_SEVERITY_INFO,
 *         PAST_SEVERITY_WARNING and PAST_SEVERITY_ERROR.
 *     - uid: Drupal user id.
 *
 * @return PastEventInterface
 *
 * @see past_event_create()
 */
function past_event_save($module, $machine_name, $message, array $arguments = array(), array $options = array()) {
  $event = past_event_create($module, $machine_name, $message, $options);

  foreach ($arguments as $key => $argument) {
    $event->addArgument($key, $argument);
  }
  $event->save();
  return $event;
}

/**
 * Creates a past event.
 *
 * @param string $module
 *   The name of the module which is logging the event.
 * @param $machine_name
 *   The machine name of the event.
 * @param type $message
 *   A description of the event.
 * @param array $arguments
 *   An array of arguments to be saved with the event. They array key is used
 *   as the argument key and the value is the argument data.
 * @param array $options
 *   An array of additional options. Any of the following:
 *     - timestamp: Override the timestamp, defaults to REQUEST_TIME
 *     - severity: One of PAST_SEVERITY_DEBUG, PAST_SEVERITY_INFO,
 *         PAST_SEVERITY_WARNING and PAST_SEVERITY_ERROR.
 *     - uid: Drupal user id.
 *
 * @return PastEventInterface
 *
 * @see past_event_save()
 */
function past_event_create($module, $machine_name, $message = NULL, array $options = array()) {
  switch (variable_get('past_backend', 'past_db')) {
    case 'past_simpletest':
      $event = new PastEventSimpletest(array());
      break;

    case 'past_db':
    default:
      $event = entity_create('past_event', array());
  }

  /* @var $event PastEventInterface */
  $event->setModule($module);
  $event->setMachineName($machine_name);
  if ($message) {
    $event->setMessage($message);
  }

  foreach ($options as $key => $value) {
    switch ($key) {
      case 'timestamp':
        $event->setTimestamp($value);
        break;

      case 'severity':
        $event->setSeverity($value);
        break;

      case 'uid':
        $event->setUid($value);
        break;
    }
  }
  return $event;
}

/**
 * Returns an array of past event severities.
 */
function past_event_severities() {
  return array(
    PAST_SEVERITY_DEBUG => t('Debug'),
    PAST_SEVERITY_INFO => t('Info'),
    PAST_SEVERITY_NOTICE => t('Notice'),
    PAST_SEVERITY_WARNING => t('Warning'),
    PAST_SEVERITY_ERROR => t('Error'),
    PAST_SEVERITY_EMERGENCY => t('Emergency'),
    PAST_SEVERITY_ALERT => t('Alert'),
    PAST_SEVERITY_CRITICAL => t('Critical'),
  );
}

/**
 * Implements hook_init().
 */
function past_init() {
  if (variable_get('past_exception_handling', 0) == 1) {
    set_exception_handler('_past_exception_handler');
  }

  if (variable_get('past_shutdown_handling', 1) == 1) {
    drupal_register_shutdown_function('_past_shutdown_function');
  }
}

/**
 * Implements hook_menu().
 */
function past_menu() {
  $items['admin/config/development/past/settings'] = array(
    'title' => 'Past settings',
    'description' => 'Configure relevance settings for past events.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('past_admin_settings'),
    'access arguments' => array('administer past'),
    'file' => 'past.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function past_permission() {
  return array(
    'administer past' => array(
      'title' => t('Administer Past'),
    ),
  );
}

/**
 * Implements hook_watchdog().
 */
function past_watchdog(array $log_entry) {
  if (variable_get('past_log_watchdog', 0) && empty($log_entry['variables']['past_already_logged'])) {
    $message = $log_entry['message'];

    if (is_array($log_entry['variables'])) {
      // Format watchdog message with array variables as placeholders.
      $message = format_string($log_entry['message'], $log_entry['variables']);
    }
    // The past message is expected to be in plain text, remove HTML tags and
    // decode entities.
    $event = past_event_create('watchdog', $log_entry['type'], html_entity_decode(strip_tags($message), ENT_QUOTES));
    $event->setSeverity($log_entry['severity']);
    $event->setTimestamp($log_entry['timestamp']);

    if ($log_entry['type'] == 'php') {
      // We handle an error report.
      $event->addArgument('php', _past_error_array_to_event($log_entry['variables']));
    }

    if ($backtrace = _past_get_formatted_backtrace($log_entry['severity'])) {
      $event->addArgument('backtrace', $backtrace);
    }

    if (!empty($log_entry['link'])) {
      $event->addArgument('link', $log_entry['link']);
    }
    $watchdog_args = array();
    if (!empty($log_entry['uid'])) {
      $event->setUid($log_entry['uid']);
    }
    if (!empty($log_entry['request_uri'])) {
      $watchdog_args['location'] = $log_entry['request_uri'];
    }
    if (!empty($log_entry['referer'])) {
      $watchdog_args['referer'] = $log_entry['referer'];
    }
    if (!empty($log_entry['ip'])) {
      $watchdog_args['hostname'] = substr($log_entry['ip'], 0, 128);
    }
    if ($watchdog_args) {
      $event->addArgument('watchdog_args', $watchdog_args);
    }
    $event->save();
  }
}

/**
 * Implements hook_form_alter().
 */
function past_form_system_logging_settings_alter(&$form, &$form_state) {
  $form['past_info']['#prefix'] = t('See also <a href="!settings_url">past settings</a>',
    array('!settings_url' => url('admin/config/development/past/settings')));
  return $form;
}

/**
 * Custom exception handler.
 */
function _past_exception_handler($exception) {
  require_once DRUPAL_ROOT . '/includes/errors.inc';

  try {
    $event = past_event_create('past', 'unhandled_exception', $exception->getMessage());
    $event->addArgument('exception', $exception);
    $event->setSeverity(PAST_SEVERITY_ERROR);
    $event->save();

    // Log the message to the watchdog and return an error page to the user.
    $error_decoded = _drupal_decode_exception($exception);
    $error_decoded['past_already_logged'] = TRUE;
    _drupal_log_error($error_decoded, TRUE);
  }
  catch (Exception $exception2) {
    // Another uncaught exception was thrown while handling the first one.
    // If we are displaying errors, then do so with no possibility of a further uncaught exception being thrown.
    if (error_displayable()) {
      print '<h1>Additional uncaught exception thrown while handling exception.</h1>';
      print '<h2>Original</h2><p>' . _drupal_render_exception_safe($exception) . '</p>';
      print '<h2>Additional</h2><p>' . _drupal_render_exception_safe($exception2) . '</p><hr />';
    }
  }
}

/**
 * Provides the default enabled watchdog severities to include in backtrace.
 */
function _past_watchdog_severity_defaults() {
  return drupal_map_assoc(array(
    'WATCHDOG_SEVERITY_' . WATCHDOG_EMERGENCY,
    'WATCHDOG_SEVERITY_' . WATCHDOG_ALERT,
    'WATCHDOG_SEVERITY_' . WATCHDOG_CRITICAL,
    'WATCHDOG_SEVERITY_' . WATCHDOG_ERROR,
    'WATCHDOG_SEVERITY_' . WATCHDOG_NOTICE,
  ));
}

/**
 * Ported format_backtrace from D8 and customized.
 */
function _past_get_formatted_backtrace($severity_level, $slice = 5) {
  $log_backtrace = variable_get('past_backtrace_include', _past_watchdog_severity_defaults());
  $severity_keyvalue = 'WATCHDOG_SEVERITY_' . $severity_level;
  if (empty($log_backtrace[$severity_keyvalue])) {
    return;
  }

  // Skip the given entries (by default 5), as they'll always be the same.
  $backtrace = array_slice(debug_backtrace(), $slice);
  $return = '';
  $i = 0;
  foreach ($backtrace as $trace) {
    $call = array(
      'function' => '',
      'args' => array(),
    );
    if (isset($trace['class'])) {
      $call['function'] = $trace['class'] . $trace['type'] . $trace['function'];
    }
    elseif (isset($trace['function'])) {
      $call['function'] = $trace['function'];
    }
    else {
      $call['function'] = 'main';
    }
    if (isset($trace['function'])) {
      $call['args'][] = isset($trace['line']) ? $trace['line'] : 0;
      $call['args'][] = $trace['function'];
      $call['function'] = isset($trace['file']) ? $trace['file'] : '';
    }
    else {
      foreach ($trace['args'] as $arg) {
        if (is_scalar($arg)) {
          $call['args'][] = is_string($arg) ? '\'' . filter_xss($arg) . '\'' : $arg;
        }
        else {
          $call['args'][] = ucfirst(gettype($arg));
        }
      }
    }
    $return .= '#' . $i . ' ' . $call['function'] . ' (' . implode(', ', $call['args']) . ")\n";
    $i++;
  }
  return $return;
}

/**
 * Format an exception array to a past event.
 */
function _past_error_array_to_event($error) {
  // Make the output of the exception nicer (remove special chars).
  $context = array();
  $context['type'] = $error['%type'];
  $context['function'] = $error['%function'];
  $context['file_line'] = $error['%file'] . ':' . $error['%line'];
  $context['severity_level'] = $error['severity_level'];

  return $context;
}

/**
 * Past custom shutdown function.
 *
 * Attempts to deal with error types which error handler is not able to capture.
 */
function _past_shutdown_function() {

  $error_types = array(
    E_ERROR,
    E_WARNING,
    E_CORE_ERROR,
    E_CORE_WARNING,
    E_COMPILE_ERROR,
    E_COMPILE_WARNING,
  );

  // Check if an error was thrown and it's one that can only be captured by a
  // shutdown function.
  if (!($error = error_get_last()) || !in_array($error['type'], $error_types)) {
    return;
  }

  $severity = PAST_SEVERITY_CRITICAL;

  // Create a event, add the error information.
  $event = past_event_create('past', 'fatal_error', $error['message']);
  $event->setSeverity($severity);
  $event->setTimestamp(REQUEST_TIME);

  $event->addArgument('error', $error);

  // Add metadata arguments like the path and user to the past event.
  $user_args = array();
  $user_args['location'] = _past_current_url();

  if (!empty($_SERVER['referer'])) {
    $user_args['referer'] = $_SERVER['referer'];
  }
  $user_args['hostname'] = substr($_SERVER['REMOTE_ADDR'], 0, 128);
  $event->addArgument('user_args', $user_args);
  $event->save();
}

/**
 * Builds current url.
 *
 * @return string
 *   The url.
 */
function _past_current_url() {
  return $GLOBALS['base_url'] . $_SERVER['REQUEST_URI'];
}
