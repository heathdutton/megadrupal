<?php

/**
 * @file
 * Provides dynamic panes functionality.
 */

define('DYNAMIC_PANES_FC_LAYOUT_ENTITY_TYPE_NAME', 'dynamic_panes_fc_layout');

define('DYNAMIC_PANES_FC_LAYOUT_FIELD_LAYOUT_NAME', 'field_dp_layout');
define('DYNAMIC_PANES_FC_LAYOUT_FIELD_LAYOUT_REGIONS', 'field_dp_layout_regions');
define('DYNAMIC_PANES_FC_LAYOUT_FIELD_LAYOUT_RULESET', 'field_dp_layout_ruleset');
define('DYNAMIC_PANES_FC_LAYOUT_FIELD_LAYOUT_REGIONS_REGION', 'field_dp_regions_region');
define('DYNAMIC_PANES_FC_LAYOUT_FIELD_LAYOUT_REGIONS_BLOCKS', 'field_dp_regions_blocks');
define('DYNAMIC_PANES_FC_LAYOUT_FIELD_LAYOUT_BLOCKS_BLOCK', 'field_dp_blocks_block');
define('DYNAMIC_PANES_FC_LAYOUT_FIELD_LAYOUT_BLOCKS_LEVEL', 'field_dp_blocks_level');

/**
 * Implements hook_ctools_plugin_directory().
 */
function dynamic_panes_fc_layout_ctools_plugin_directory($module, $plugin) {
  if (in_array($module, array('dynamic_panes', 'ctools')) && !empty($plugin)) {
    return "plugins/$plugin";
  }
}

/**
 * Implements hook_ctools_plugin_api().
 */
function dynamic_panes_fc_layout_ctools_plugin_api($module = NULL, $api = NULL) {
  if ($module == 'ctools_access_ruleset' && $api == 'ctools_rulesets') {
    return array('version' => '1');
  }
  if ($module == 'field_group' && $api == 'field_group') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_menu().
 */
function dynamic_panes_fc_layout_menu() {
  $items['dynamic-panes-fc-layout/%dynamic_panes_fc_layout/%field_collection_item/%/%field_collection_item/%/add'] = array(
    'title' => 'Add block',
    'page callback' => 'dynamic_panes_fc_layout_add_block',
    'page arguments' => array(1, 2, 3, 4, 5),
    'access callback' => 'dynamic_panes_fc_layout_add_block_access',
    'access arguments' => array(2, 4, 5),
    'file' => 'dynamic_panes_fc_layout.admin.inc',
  );

  $items['dynamic-panes-fc-layout/%dynamic_panes_fc_layout/%field_collection_item/%/new/%/add'] = array(
    'title' => 'Add block',
    'page callback' => 'dynamic_panes_fc_layout_add_block',
    'page arguments' => array(1, 2, 3, 4, 5),
    'access callback' => 'dynamic_panes_fc_layout_add_block_access',
    'access arguments' => array(2, 4, 5),
    'file' => 'dynamic_panes_fc_layout.admin.inc',
  );

  $items['dynamic-panes-fc-layout/%dynamic_panes_fc_layout/new/%/new/%/add'] = array(
    'title' => 'Add block',
    'page callback' => 'dynamic_panes_fc_layout_add_block',
    'page arguments' => array(1, 2, 3, 4, 5),
    'access callback' => 'dynamic_panes_fc_layout_add_block_access',
    'access arguments' => array(2, 4, 5),
    'file' => 'dynamic_panes_fc_layout.admin.inc',
  );

  $items['dynamic-panes-fc-layout/%field_collection_item/%/edit'] = array(
    'title' => 'Edit block',
    'page callback' => 'dynamic_panes_fc_layout_edit_block',
    'page arguments' => array(1, 2),
    'access callback' => 'dynamic_panes_fc_layout_edit_block_access',
    'access arguments' => array(1, 2),
    'file' => 'dynamic_panes_fc_layout.admin.inc',
  );

  $items['dynamic-panes-fc-layout/%field_collection_item/%/delete'] = array(
    'title' => 'Delete block',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dynamic_panes_fc_layout_delete_confirm', 1, 2),
    'access callback' => 'dynamic_panes_fc_layout_delete_block_access',
    'access arguments' => array(1, 2),
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'dynamic_panes_fc_layout.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_admin_paths().
 */
function dynamic_panes_fc_layout_admin_paths() {
  return array(
    'dynamic-panes-fc-layout/*' => TRUE,
  );
}

/**
 * Get arguments for views.
 */
function dynamic_panes_get_layouts_admin_view_arg($view, $type = 'ids') {
  switch ($type) {
    case 'ids':
      if ($node = node_load(current($view->args))) {
        ctools_include('context');
        $contexts = array(ctools_context_create('entity:node', $node));
        $layouts = implode(',', array_keys(dynamic_panes_get_layouts($contexts)));
        return $layouts;
      }
      break;
  }

  return NULL;
}

/**
 * Gets all available panelizers.
 */
function dynamic_panes_fc_layout_get_panelizers() {
  $result = array();
  $types = node_type_get_types();
  foreach ($types as $type => $info) {
    if (panelizer_is_panelized('node', $type)) {
      $panelizers = dynamic_panes_fc_layout_get_default_panelizer_objects($type);
      foreach ($panelizers as $key => $panelizer) {
        $result[$key] = $panelizer;
      }
    }
  }
  return $result;
}

/**
 * Get the default panelizers for the given bundle.
 */
function dynamic_panes_fc_layout_get_default_panelizer_objects($bundle, $entity_type = 'node') {
  if (strpos($bundle, '.') !== FALSE) {
    list($bundle, $view_mode) = explode('.', $bundle);
  }
  $conditions = array(
    'panelizer_type' => $entity_type,
    'panelizer_key' => $bundle,
  );

  if (!empty($view_mode)) {
    $conditions['view_mode'] = $view_mode;
  }

  ctools_include('export');
  return ctools_export_load_object('panelizer_defaults', 'conditions', $conditions);
}

/**
 * Implements hook_entity_info().
 */
function dynamic_panes_fc_layout_entity_info() {
  return array(
    DYNAMIC_PANES_FC_LAYOUT_ENTITY_TYPE_NAME => array(
      'label' => t('Dynamic Panes FC Layout'),
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIController',
      'base table' => 'dynamic_panes_fc_layout',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'id',
        'label' => 'title',
      ),
      'admin ui' => array(
        'path' => 'admin/structure/dynamic-panes-fc-layout',
        'file' => 'dynamic_panes_fc_layout.admin.inc',
      ),
      'bundles' => array(
        DYNAMIC_PANES_FC_LAYOUT_ENTITY_TYPE_NAME => array(
          'label' => t('FC Layout'),
          'admin' => array(
            'path' => 'admin/structure/dynamic-panes-fc-layout',
            'access arguments' => array('administer dynamic panes'),
          ),
        ),
      ),
      'module' => 'dynamic_panes_fc_layout',
      'access callback' => 'dynamic_panes_fc_layout_access',
    ),
  );
}

/**
 * Loads a FC Layout by ID.
 *
 * @param int $layout_id
 *   A FC Layout ID.
 *
 * @return bool|mixed
 *   FC Layout object if exist, FALSE otherwise.
 */
function dynamic_panes_fc_layout_load($layout_id) {
  $layouts = dynamic_panes_fc_layout_load_multiple(array($layout_id), array());
  return $layouts ? reset($layouts) : FALSE;
}

/**
 * Loads multiple FC Layouts by ID or based on a set of matching conditions.
 *
 * @see entity_load()
 *
 * @param bool $layout_ids
 *   An array of FC Layout IDs or FALSE.
 * @param array $conditions
 *   An array of conditions to filter loaded products by on the
 *   {dynamic_panes_fc_layout} table in the form 'field' => $value.
 * @param bool $reset
 *   Whether to reset the internal FC Layout loading cache.
 *
 * @return array
 *   An array of FC Layout objects indexed by ID.
 */
function dynamic_panes_fc_layout_load_multiple($layout_ids = FALSE, $conditions = array(), $reset = FALSE) {
  return entity_load(DYNAMIC_PANES_FC_LAYOUT_ENTITY_TYPE_NAME, $layout_ids, $conditions, $reset);
}

/**
 * Deletes a FC Layout.
 *
 * @param int $layout_id
 *   A FC Layout ID.
 */
function dynamic_panes_fc_layout_delete($layout_id) {
  dynamic_panes_fc_layout_delete_multiple(array($layout_id));
}

/**
 * Deletes multiple FC Layouts.
 *
 * @param array $layout_ids
 *   An array of FC Layout IDs.
 */
function dynamic_panes_fc_layout_delete_multiple($layout_ids) {
  entity_delete_multiple(DYNAMIC_PANES_FC_LAYOUT_ENTITY_TYPE_NAME, $layout_ids);
}

/**
 * Implements hook_node_type_insert().
 */
function dynamic_panes_fc_layout_node_type_insert($info) {
  _dynamic_panes_fc_layout_layout_field_create($info);
}

/**
 * Implements hook_node_type_delete().
 */
function dynamic_panes_fc_layout_node_type_delete($info) {
  $settings = array('dynamic_panes_fc_layout_enabled');
  foreach ($settings as $setting) {
    variable_del($setting . '_' . $info->type);
  }

  if ($instance = field_info_instance('node', DYNAMIC_PANES_FC_LAYOUT_FIELD_LAYOUT_NAME, $info->type)) {
    field_delete_instance($instance);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dynamic_panes_fc_layout_form_node_type_form_alter(&$form, $form_state) {
  if (isset($form['type'])) {
    $form['dynamic_panes_fc_layout'] = array(
      '#type' => 'fieldset',
      '#title' => t('Dynamic panes FC Layout'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#group' => 'additional_settings',
      '#attributes' => array(
        'class' => array('dynamic-panes-fc-layout-node-type-settings-form'),
      ),
      '#attached' => array(
        'js' => array(drupal_get_path('module', 'dynamic_panes_fc_layout') . '/js/dynamic-panes-fc-layout-node-form.js'),
      ),
    );

    $form['dynamic_panes_fc_layout']['dynamic_panes_fc_layout_enabled'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enabled FC Layout'),
      '#default_value' => variable_get('dynamic_panes_fc_layout_enabled_' . $form['#node_type']->type, FALSE),
    );
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function dynamic_panes_fc_layout_form_node_form_alter(&$form, $form_state) {
  $node = $form['#node'];
  $layout_is_enabled = variable_get('dynamic_panes_fc_layout_enabled_' . $node->type, FALSE);
  if (!$layout_is_enabled) {
    $form[DYNAMIC_PANES_FC_LAYOUT_FIELD_LAYOUT_NAME]['#access'] = FALSE;
  }
}

/**
 * Creates a comment_body field instance for a given node type.
 */
function _dynamic_panes_fc_layout_layout_field_create($info) {
  // Create the field if needed.
  if (!field_read_field(DYNAMIC_PANES_FC_LAYOUT_FIELD_LAYOUT_NAME, array('include_inactive' => TRUE))) {
    $field = array(
      'field_name' => DYNAMIC_PANES_FC_LAYOUT_FIELD_LAYOUT_NAME,
      'type' => 'entityreference',
      'entity_types' => array('node'),
      'cardinality' => 1,
      'settings' => array(
        'target_type' => DYNAMIC_PANES_FC_LAYOUT_ENTITY_TYPE_NAME,
        'handler' => 'base',
        'handler_settings' => array(
          'target_bundles' => array(),
          'sort' => array('type' => 'none'),
        ),
      ),
    );
    field_create_field($field);
  }

  // Create the instance if needed.
  if (!field_read_instance('node', DYNAMIC_PANES_FC_LAYOUT_FIELD_LAYOUT_NAME, $info->type, array('include_inactive' => TRUE))) {
    $instance = array(
      'label' => 'Layout',
      'widget' => array(
        'type' => 'entityreference_autocomplete',
        'module' => ' entityreference',
        'active' => 1,
        'settings' => array(
          'match_operator' => 'CONTAINS',
          'size' => 60,
          'path' => '',
        ),
      ),
      'settings' => array(
        'user_register_form' => FALSE,
      ),
      'display' => array(
        'default' => array(
          'label' => 'above',
          'type' => 'hidden',
          'settings' => array(),
        ),
      ),
      'default_value' => NULL,
      'field_name' => DYNAMIC_PANES_FC_LAYOUT_FIELD_LAYOUT_NAME,
      'entity_type' => 'node',
      'bundle' => $info->type,
    );
    field_create_instance($instance);
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function dynamic_panes_fc_layout_field_widget_field_collection_embed_form_alter(&$element, &$form_state, $context) {
  switch ($context['field']['field_name']) {
    case DYNAMIC_PANES_FC_LAYOUT_FIELD_LAYOUT_REGIONS:
    case DYNAMIC_PANES_FC_LAYOUT_FIELD_LAYOUT_REGIONS_BLOCKS:
      $element['#element_validate'][] = '_dynamic_panes_fc_layout_validate_unique';
      break;
  }
}

/**
 * Form element validation handler.
 *
 * Value must be unique.
 */
function _dynamic_panes_fc_layout_validate_unique($element, &$form_state) {
  $child_field_names = array(
    DYNAMIC_PANES_FC_LAYOUT_FIELD_LAYOUT_REGIONS => DYNAMIC_PANES_FC_LAYOUT_FIELD_LAYOUT_REGIONS_REGION,
    DYNAMIC_PANES_FC_LAYOUT_FIELD_LAYOUT_REGIONS_BLOCKS => DYNAMIC_PANES_FC_LAYOUT_FIELD_LAYOUT_BLOCKS_LEVEL,
  );

  $field_parents = $element['#field_parents'];
  $field_name = $element['#field_name'];
  $language = $element['#language'];

  $child_field_name = $child_field_names[$field_name];

  if (isset($element[$child_field_name])) {
    $values = array();

    $field_state = field_form_get_state($field_parents, $field_name, $language, $form_state);
    $field_parents = array_merge($field_parents, array($field_name, $language));

    for ($delta = 0; $delta < $field_state['items_count']; $delta++) {
      $field_collection_item = $field_state['entity'][$element['#delta']];
      if (!field_collection_item_is_empty($field_collection_item)) {
        $field = $element[$child_field_name];
        $language = $field['#language'];

        $parents = array_merge($field_parents, array(
          $delta,
          $child_field_name,
          $language,
        ));

        if ($value = drupal_array_get_nested_value($form_state['values'], $parents)) {
          if (in_array($value, $values)) {
            form_set_error(implode('][', $parents), t('%name must be unique.', array('%name' => $field[$language]['#title'])));
          }
          else {
            $values[] = $value;
          }
        }
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dynamic_panes_fc_layout_form_field_collection_item_form_alter(&$form, &$form_state) {
  if (isset($form_state['dynamic_panes_fc_layout']['op'])) {
    $instances = field_info_instances($form['#entity_type'], $form['#bundle']);
    foreach ($instances as $instance) {
      if ($instance['field_name'] == DYNAMIC_PANES_FC_LAYOUT_FIELD_LAYOUT_BLOCKS_BLOCK) {
        continue;
      }

      $form[$instance['field_name']]['#access'] = FALSE;
    }

    if (!empty($form[DYNAMIC_PANES_FC_LAYOUT_FIELD_LAYOUT_BLOCKS_BLOCK])) {
      $field = &$form[DYNAMIC_PANES_FC_LAYOUT_FIELD_LAYOUT_BLOCKS_BLOCK];
      $language = $field['#language'];
      unset($field[$language]['#theme']);

      switch ($form_state['dynamic_panes_fc_layout']['op']) {
        case 'add':
          foreach (element_children($field[$language]) as $key) {
            if ($key === 'add_more') {
              $field[$language][$key]['#access'] = FALSE;
              continue;
            }

            if (!empty($field[$language][$key]['target_id']['#default_value'])) {
              $field[$language][$key]['#access'] = FALSE;
            }
            else {
              $field[$language][$key]['target_id']['#title'] = $field[$language]['#title'];
              $field[$language][$key]['target_id']['#required'] = $field[$language]['#required'];
              $field[$language][$key]['_weight']['#access'] = FALSE;
            }
          }
          break;

        case 'edit':
          if (isset($form_state['dynamic_panes_fc_layout']['delta'])) {
            $delta = $form_state['dynamic_panes_fc_layout']['delta'];
            foreach (element_children($field[$language]) as $key) {
              if ($key != $delta) {
                $field[$language][$key]['#access'] = FALSE;
                continue;
              }

              $field[$language][$key]['target_id']['#title'] = $field[$language]['#title'];
              $field[$language][$key]['target_id']['#required'] = $field[$language]['#required'];
              $field[$language][$key]['_weight']['#access'] = FALSE;
            }
          }
          break;
      }
    }
  }
}

/**
 * Determines whether current user may perform the operation on the FC Layout.
 *
 * @param string $op
 *   The operation to be performed on the FC Layout.
 * @param object $layout
 *   Optional, the FC Layout object on which the operation is to be performed.
 * @param object $account
 *   Optional, a user object representing the user for whom the operation is to
 *   be performed. Determines access for a user other than the current user.
 *
 * @return bool
 *   TRUE if the operation may be performed, FALSE otherwise.
 */
function dynamic_panes_fc_layout_access($op, $layout = NULL, $account = NULL) {
  if (empty($account)) {
    global $user;
    $account = $user;
  }

  return user_access('administer dynamic panes', $account);
}

/**
 * Determines whether the current user may add block to region.
 *
 * @param string|object $fc_item_1
 *   The field collection item used as region or 'new' for creation new region.
 * @param string|object $fc_item_2
 *   The field collection item used as level of region or 'new' for creation
 *   new level.
 * @param string|int $level
 *   The level value.
 *
 * @return bool
 *   TRUE if the operation may be performed, FALSE otherwise.
 */
function dynamic_panes_fc_layout_add_block_access($fc_item_1, $fc_item_2, $level) {
  if (!user_access('administer dynamic panes')) {
    return FALSE;
  }

  // Checks that $level is correct.
  $levels = _dynamic_panes_get_config_levels();
  if ($level != 'all' && !in_array($level, $levels)) {
    return FALSE;
  }

  // Checks that $fc_item_1 is correct.
  if ($fc_item_1 != 'new' && !is_object($fc_item_1)) {
    return FALSE;
  }
  if (is_object($fc_item_1) && $fc_item_1->field_name != DYNAMIC_PANES_FC_LAYOUT_FIELD_LAYOUT_REGIONS) {
    return FALSE;
  }

  // Checks that $fc_item_2 is correct.
  if ($fc_item_2 != 'new' && !is_object($fc_item_2)) {
    return FALSE;
  }
  if (is_object($fc_item_2) && $fc_item_2->field_name != DYNAMIC_PANES_FC_LAYOUT_FIELD_LAYOUT_REGIONS_BLOCKS) {
    return FALSE;
  }

  return TRUE;
}

/**
 * Determines whether the current user may edit block in region.
 *
 * @param object $fc_item
 *   The field collection item used as region.
 * @param int $delta
 *   The block delta.
 *
 * @return bool
 *   TRUE if the operation may be performed, FALSE otherwise.
 */
function dynamic_panes_fc_layout_edit_block_access($fc_item, $delta) {
  if (!user_access('administer dynamic panes')) {
    return FALSE;
  }

  // Checks that $delta is correct.
  if (!ctype_digit($delta)) {
    return FALSE;
  }

  // Checks that $fc_item is correct.
  if ($fc_item->field_name != DYNAMIC_PANES_FC_LAYOUT_FIELD_LAYOUT_REGIONS_BLOCKS) {
    return FALSE;
  }

  return TRUE;
}

/**
 * Determines whether the current user may delte block in region.
 *
 * @param object $fc_item
 *   The field collection item used as region.
 * @param int $delta
 *   The block delta.
 *
 * @return bool
 *   TRUE if the operation may be performed, FALSE otherwise.
 */
function dynamic_panes_fc_layout_delete_block_access($fc_item, $delta) {
  if (!user_access('administer dynamic panes')) {
    return FALSE;
  }

  // Checks that $delta is correct.
  if (!ctype_digit($delta)) {
    return FALSE;
  }

  // Checks that $fc_item is correct.
  if ($fc_item->field_name != DYNAMIC_PANES_FC_LAYOUT_FIELD_LAYOUT_REGIONS_BLOCKS) {
    return FALSE;
  }

  return TRUE;
}
