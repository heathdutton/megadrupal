<?php

/**
 * @file
 * Implementation of Pygments highhlighter in Drupal as filter.
 */

/**
 * Implements hook_theme().
 */
function pygmentizer_theme() {

  $module_path = drupal_get_path('module', 'pygmentizer');
  $templates_path = "$module_path/tpl";

  return array(
    'pygmentizer_help' => array(
      'template' => '/help/pygmentizer-help',
      'variables' => array(
        'module_path' => $module_path,
        'show_developer' => TRUE,
      ),
      'path' => $templates_path,
    ),
  );
}

/**
 * Implements hook_help().
 */
function pygmentizer_help($path, $arg) {
  switch ($path) {
    case 'admin/help#pygmentizer':
      $output = theme("pygmentizer_help");
      return $output;
  }
}

/**
 * Implements hook_libraries_info().
 */
function pygmentizer_libraries_info() {
  $libraries['PHPygments'] = array(
    'name' => 'PHPygments',
    'vendor url' => 'https://github.com/capy/PHPygments',
    'download url' => 'https://github.com/capy/PHPygments/archive/1.0.1.zip',
    'version' => '1',
    'files' => array(
      'php' => array('src/PHPygments/Pygmentizer.php', 'src/PHPygments/PHPygments.php'),
    ),
  );

  return $libraries;
}


/**
 * Implements hook_filter_info().
 *
 * Provide PHP code filter. Use with care.
 */
function pygmentizer_filter_info() {
  $filters['pygmentizer'] = array(
    'title' => t('Pygmentizer syntax highlighter'),
    'description' => t('Highlights all code between [langname] YOUR CODE [/langname]. See !help for an exhaustive list of supported languages', array("!help" => l(t("help"), "admin/help/pygmentizer"))),
    'process callback' => '_filter_pygmentyzer_process',
    'default settings' => array(
      'style' => 'default',
    ),
    'settings callback' => '_filter_pygmentyzer_settings',
    'tips callback' => '_filter_pygmentyzer_tips',
    'cache' => TRUE,
  );
  return $filters;
}

/**
 * Settings callback for pygmentyzer filter.
 *
 * Make use of $format to have different replacements for every input format.
 * Since we allow the administrator to define the string that gets substituted
 * when "foo" is encountered, we need to provide an interface for this kind of
 * customization. The object format is also an argument of the callback.
 *
 * The settings defined in this form are stored in database by the filter
 * module, and they will be available in the $filter argument.
 */
function _filter_pygmentyzer_settings($form, $form_state, $filter, $format, $defaults) {

  $phpygments = libraries_load("PHPygments");

  if ($phpygments && !empty($phpygments['loaded'])) {

    $pygmentizer = new \PHPygments\Pygmentizer();
    $styles = drupal_map_assoc($pygmentizer->getStyles());
    $settings['style'] = array(
      '#type' => 'select',
      '#title' => t('Default style'),
      '#options' => $styles,
      '#default_value' => isset($filter->settings['style']) ? $filter->settings['style'] : $defaults['style'],
      '#description' => t('This style will be applied by default if no other one is specified.
      go to !help to se available styles', array(
        "!help" => l(t("help"), "admin/help/pygmentizer"),
      )),
    );

  }
  else {
    $settings['advice'] = array(
      '#markup' => "PHPygments library is not installed",
    );
  }

  return $settings;
}

/**
 * Filter tips callback for pygmentyzer filter.
 */
function _filter_pygmentyzer_tips($filter, $format, $long = FALSE) {
  if (!$long) {
    return t('Code enclosed between <em>[LANGNAME]...[/LANGNAME]</em> will be highlighted.');
  }
  else {
    return theme("pygmentizer_help", array('show_developer' => FALSE));
  }
}

/**
 * Pygmentyzer filter process callback.
 */
function _filter_pygmentyzer_process($text, $filter, $format) {

  $phpygments = libraries_load("PHPygments");

  if ($phpygments && !empty($phpygments['loaded'])) {

    $pygmentizer = new \PHPygments\Pygmentizer($filter->settings['style']);
    $output = $pygmentizer->hightlight($text);

  }
  else {
    $output = $text;
  }

  return $output;
}
