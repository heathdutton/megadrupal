<?php

/**
 * Implements hook_hook_info().
 */
function banking_hook_info() {
  $hooks['banking_iban_format_info'] = array(
    'group' => 'banking',
  );

  return $hooks;
}

/**
 * Implements hook_element_info().
 */
function banking_element_info() {
  // Collects all credit card information using one element.
  $types['banking_credit_card'] = array(
    '#input' => TRUE,
    '#process' => array('banking_credit_card_form_process'),
    '#theme_wrappers' => array('form_element'),
    '#tree' => TRUE,
  );
  // Collects a credit card number.
  $types['banking_credit_card_number'] = array(
    '#autocomplete_path' => FALSE,
    '#element_validate' => array('banking_credit_card_number_form_validate'),
    '#input' => TRUE,
    '#maxlength' => 30,
    '#process' => array('ajax_process_form'),
    '#size' => 20,
    '#theme' => 'textfield',
    '#theme_wrappers' => array('form_element'),
  );
  // Collects a credit card expiration date.
  $types['banking_credit_card_expiration_date'] = array(
    '#attached' => array(
      'css' => array(drupal_get_path('module', 'banking') . '/banking.css'),
    ),
    '#input' => TRUE,
    '#process' => array('banking_credit_card_expiration_date_form_process'),
    '#theme_wrappers' => array('form_element'),
    '#tree' => TRUE,
  );
  // Collects a credit card security code.
  $types['banking_credit_card_security_code'] = array(
    '#autocomplete_path' => FALSE,
    '#element_validate' => array('banking_credit_card_security_code_form_validate'),
    '#input' => TRUE,
    '#maxlength' => 4,
    '#process' => array('ajax_process_form'),
    '#size' => 4,
    '#theme' => 'textfield',
    '#theme_wrappers' => array('form_element'),
  );
  // Collects an IBAN.
  $types['banking_iban'] = array(
    '#autocomplete_path' => FALSE,
    '#element_validate' => array('banking_iban_form_validate'),
    '#input' => TRUE,
    '#maxlength' => 34,
    '#process' => array('ajax_process_form'),
    '#size' => 34,
    '#theme' => 'textfield',
    '#theme_wrappers' => array('form_element'),
  );
  // Collects an BIC.
  $types['banking_bic'] = array(
    '#autocomplete_path' => FALSE,
    '#element_validate' => array('banking_bic_form_validate'),
    '#input' => TRUE,
    '#maxlength' => 11,
    '#process' => array('ajax_process_form'),
    '#size' => 11,
    '#theme' => 'textfield',
    '#theme_wrappers' => array('form_element'),
  );

  return $types;
}

/**
 * Implements form process callback for the banking_credit_card element.
 */
function banking_credit_card_form_process(array $element, array &$form_state, array &$form) {
  $element['type'] = array(
    '#options' => BankingCreditCard::brandOptions(),
    '#title' => t('Type'),
    '#type' => 'select',
  );
  $element['number'] = array(
    '#title' => t('Number'),
    '#type' => 'banking_credit_card_number',
  );
  $element['security_code'] = array(
    '#title' => t('Security code'),
    '#type' => 'banking_credit_card_security_code',
  );
  $element['expiration_date'] = array(
    '#title' => t('Expiration date'),
    '#type' => 'banking_credit_card_expiration_date',
  );

  return $element;
}

/**
 * Implements form process callback for the banking_credit_card_expiration_date
 * element.
 */
function banking_credit_card_expiration_date_form_process(array $element, array &$form_state, array &$form) {
  $months = array('01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12');
  $element['month'] = array(
    '#type' => 'select',
    '#options' => array_combine($months, $months),
  );
  $current_year_2 = date('y');
  $current_year_4 = date('Y');
  $year_options = array();
  for ($i = -10; $i < 1; $i++) {
    $year_options[$current_year_4 + $i] = str_pad($current_year_2 + $i, 2, '0', STR_PAD_LEFT);
  }
  $element['year'] = array(
    '#type' => 'select',
    '#options' => $year_options,
  );

  return $element;
}

/**
 * Implements form validate callback for a banking_credit_card_number element.
 */
function banking_credit_card_number_form_validate(array $element, array &$form_state) {
  $credit_card = new BankingCreditCard(array(
    'number' => $element['#value'],
  ));
  $message;
  if (!$credit_card->validateNumber($message)) {
    form_error($element, $message);
  }
}

/**
 * Implements form validate callback for a banking_credit_card_security_code
 * element.
 */
function banking_credit_card_security_code_form_validate(array $element, array &$form_state) {
  $credit_card = new BankingCreditCard(array(
    'securityCode' => $element['#value'],
  ));
  $message;
  if (!$credit_card->validateSecurityCode($message)) {
    form_error($element, $message);
  }
}

/**
 * Implements form validate callback for a banking_iban element.
 */
function banking_iban_form_validate(array $element, array &$form_state) {
  $iban = new BankingIBAN($element['#value']);
  $message;
  if (!$iban->validate($message)) {
    form_error($element, $message);
  }
}

/**
 * Implements form validate callback for a banking_bic element.
 */
function banking_bic_form_validate(array $element, array &$form_state) {
  $bic = new BankingBIC($element['#value']);
  $message;
  if (!$bic->validate($message)) {
    form_error($element, $message);
  }
}
