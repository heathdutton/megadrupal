<?php

/**
 * @file
 * Contains class BankingCreditCardFormElement.
 */

/**
 * Tests the banking_credit_card form element.
 */
class BankingCreditCardFormElement extends DrupalWebTestCase {

  /**
   * Implements DrupalTestCase::getInfo().
   */
  static function getInfo() {
    return array(
      'name' => 'banking_credit_card form element',
      'group' => 'Banking',
    );
  }

  /**
   * Overrides parent::setUp().
   */
  function setUp(array $modules = array()) {
    $this->profile = 'testing';
    parent::setUp($modules + array('banking_test'));
  }

  /**
   * Test validation.
   */
  function testValidation() {
    $path = 'banking_test_form_element_banking_credit_card';
    $valid_form_state = array(
      'expiration_date' => array(
        'month' => date('m'),
        'year' => date('Y'),
      ),
      'number' => '5500000000000004',
      'security_code' => '123',
      'type' => BankingCreditCard::TYPE_MASTERCARD,
    );
    $valid_form_post = array(
      'banking_credit_card[type]' => BankingCreditCard::TYPE_MASTERCARD,
      'banking_credit_card[number]' => '5500000000000004',
      'banking_credit_card[security_code]' => '123',
      'banking_credit_card[expiration_date][month]' => date('m'),
      'banking_credit_card[expiration_date][year]' => date('Y'),
    );

    // Test valid values.
    $this->drupalPost($path, $valid_form_post, t('Submit'));
    $this->assertUrl('user');
    $form_state = variable_get('banking_test_form_submit');
    $this->assertEqual($valid_form_state, $form_state['banking_credit_card']);

    // Test invalid values.
    $invalid_form_post_values = array(
      'banking_credit_card[number]' => '5500000000000005',
      'banking_credit_card[security_code]' => '12345',
      'banking_credit_card[security_code]' => 'a123',
    );
    foreach ($invalid_form_post_values as $name => $invalid_value) {
      $values = array(
        $name => $invalid_value,
      ) + $valid_form_post;
      $this->drupalPost($path, $values, t('Submit'));
      // Test that the invalid element is the only element to be flagged.
      $this->assertFieldByXPath("//input[@name='$name' and contains(@class, 'error')]");
      $this->assertNoFieldByXPath("//input[not(@name='$name') and contains(@class, 'error')]");
    }
  }
}
