<?php

/**
 * @file
 * Contains class BankingCreditCardTest.
 */

/**
 * Tests BankingCreditCard.
 */
class BankingCreditCardTest extends DrupalWebTestCase {

  static function getInfo() {
    return array(
      'name' => 'BankingCreditCard',
      'group' => 'Banking',
      'dependencies' => array('banking'),
    );
  }

  function setUp(array $modules = array()) {
    parent::setUp(array_merge($modules, array('banking')));
    $this->validNumbers = array(
      '4111 1111 1111 1111',
      '5500.0000.0000.0004',
      '3400 0000 0000 009',
      '3000 0000 0000 04',
      '6011 0000 0000 0004',
      '2014-0000-0000-009',
      '3088 0000 0000 0009',
    );
    $this->invalidNumbers = array(
      '4111 1111 1111 1112',
      '1234.abcd 5678 efgh',
      '5500@0000#0000$0004',
    );
    $this->validSecurityCodes = array(
      '123',
      '1234',
      '1111',
    );
    $this->invalidSecurityCodes = array(
      '12',
      '12345',
      'a123',
    );
    $this->validCreditCards = array(
      new BankingCreditCard(array(
        'number' => $this->validNumbers[0],
        'securityCode' => $this->validSecurityCodes[0],
      )),
      new BankingCreditCard(array(
        'number' => $this->validNumbers[1],
        'securityCode' => $this->validSecurityCodes[1],
      )),
    );
    $this->invalidCreditCards = array(
      new BankingCreditCard(array(
        'number' => $this->invalidNumbers[0],
        'securityCode' => $this->invalidSecurityCodes[0],
      )),
      new BankingCreditCard(array(
        'number' => $this->invalidNumbers[1],
        'securityCode' => $this->invalidSecurityCodes[1],
      )),
    );
  }

  /**
   * Tests validate().
   */
  function testValidate() {
    foreach ($this->validCreditCards as $credit_card) {
      $this->assertTrue($credit_card->validate());
    }
    foreach ($this->invalidCreditCards as $credit_card) {
      $this->assertFalse($credit_card->validate());
    }
  }

  /**
   * Tests validateNumber().
   */
  function testValidateNumber() {
    foreach ($this->validNumbers as $number) {
      $credit_card = new BankingCreditCard(array(
        'number' => $number,
      ));
      $this->assertTrue($credit_card->validateNumber());
    }
    foreach ($this->invalidNumbers as $number) {
      $credit_card = new BankingCreditCard(array(
        'number' => $number,
      ));
      $this->assertFalse($credit_card->validateNumber());
    }
  }

  /**
   * Tests validateSecurityCode().
   */
  function testValidateSecurityCode() {
    foreach ($this->validSecurityCodes as $security_code) {
      $credit_card = new BankingCreditCard(array(
        'securityCode' => $security_code,
      ));
      $this->assertTrue($credit_card->validateSecurityCode());
    }
    foreach ($this->invalidSecurityCodes as $security_code) {
      $credit_card = new BankingCreditCard(array(
        'securityCode' => $security_code,
      ));
      $this->assertFalse($credit_card->validateSecurityCode());
    }
  }

  /**
   * Tests brandOptions().
   */
  function testBrandOptions() {
    $brand_options = BankingCreditCard::brandOptions();
    $this->assertTrue(is_array($brand_options));
    if (is_array($brand_options)) {
      foreach ($brand_options as $id => $title) {
        $this->assertTrue(is_int($id));
        $this->assertTrue(is_string($title));
      }
    }
  }
}
