<?php
/**
 * @file
 * Code for We pay payment integration using Drupal Commerce.
 */

/**
 * Implements hook_menu().
 */
function commerce_wepay_menu() {
  $items['commerce/%/wepay/capture-status'] = array(
    'title' => 'Checkout Status',
    'page callback' => 'commerce_wepay_capture_status',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Capture status of payment, update transaction and order.
 * Redirect to redirect_uri settings in payment method.
 */
function commerce_wepay_capture_status() {
  $checkout_id = $_GET['checkout_id'];
  $payment_method = commerce_payment_method_instance_load('commerce_wepay_payment|commerce_payment_commerce_wepay_payment');
  $path = libraries_get_path('wepay');
  if (!empty($path) && file_exists($path . '/wepay.php')) {
    include_once $path . "/wepay.php";
  }

  // Use Application level Client id and Client secret.
  if ($payment_method['settings']['environment'] == 'staging') {
    Wepay::useStaging($payment_method['settings']['app_client_id'],
      $payment_method['settings']['app_client_secret']);
  }
  else {
    Wepay::useProduction($payment_method['settings']['app_client_id'],
      $payment_method['settings']['app_client_secret']);
  }
  $wepay = new WePay($payment_method['settings']['wepay_access_token']);
  $checkout_capture = $wepay->request(
    'checkout', array(
      'checkout_id' => $checkout_id,
    )
  );

  if ($checkout_capture->state == 'captured' || $checkout_capture->state == 'authorized') {
    $order = commerce_order_load(arg(1));
    $wrapper = entity_metadata_wrapper('commerce_order', $order);
    // Create a new transaction.
    $txn = commerce_payment_transaction_new('commerce_wepay', $order->order_id);
    $txn->instance_id = $payment_method['instance_id'];
    $txn->amount = $wrapper->commerce_order_total->amount->value();
    $currency = $wrapper->commerce_order_total->currency_code->value();
    $txn->currency_code = $currency;
    $txn->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
    commerce_payment_transaction_save($txn);
    commerce_order_status_update($order, 'completed');
    drupal_set_message('Payment successful.', 'status');
    drupal_goto($payment_method['settings']['redirect_uri']);
  }
}

/**
 * Add Wepay payment method to rule configuration.
 *
 * @return Associative-array
 *   $payment_methods Add Payment method to rules configuration.
 */
function commerce_wepay_commerce_payment_method_info() {
  $payment_methods['commerce_wepay_payment'] = array(
    'title' => t("Wepay Payment"),
    'display_title' => "Wepay Payment",
    'short_title' => 'Wepay Payment',
    'description' => t("Payment method for Wepay"),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );
  return $payment_methods;
}

/**
 * Add Wepay payment gateway settings form for settings.
 *
 * @param Associative-array $settings
 *   Contains settings of paymentgateway
 *
 * @return Associative-array
 *   $form
 */
function commerce_wepay_payment_settings_form($settings = NULL) {
  $form = array();
  $settings = (array) $settings + array(
    'environment' => '',
    'app_client_id' => '',
    'app_client_secret' => '',
    'checkout_type' => '',
    'wepay_access_token' => '',
    'redirect_uri' => '',
    'fee_payer' => '',
    'app_fee' => '',
  );

  $environment_options = array(
    'staging' => t('Staging'),
    'live' => t('Live'),
  );
  $form['environment'] = array(
    '#type' => 'radios',
    '#title' => t('Environment'),
    '#options' => $environment_options,
    '#default_value' => isset($settings['environment']) ? $settings['environment'] : 'staging',
    '#required' => TRUE,
    '#description' => t('Use Staging for testing and Live for production environment.'),
  );
  $form['app_client_id'] = array(
    '#type' => 'textfield',
    '#title' => t('App Client ID'),
    '#default_value' => $settings['app_client_id'],
    '#required' => TRUE,
    '#description' => t('Enter Client ID'),
  );

  $form['app_client_secret'] = array(
    '#type' => 'textfield',
    '#title' => t('App Client Secret'),
    '#default_value' => $settings['app_client_secret'],
    '#required' => TRUE,
    '#description' => t('Enter Client Secret'),
  );

  $checkout_options = array(
    'GOODS' => t('GOODS'),
    'SERVICE' => t('SERVICE'),
    'DONATION' => t('DONATION'),
    'EVENT' => t('EVENT'),
    'PERSONAL' => t('PERSONAL'),
  );
  $form['checkout_type'] = array(
    '#type' => 'radios',
    '#title' => t('Checkout Type'),
    '#options' => $checkout_options,
    '#default_value' => $settings['checkout_type'],
    '#required' => TRUE,
    '#description' => t('Checkout Type'),
  );

  $form['wepay_access_token'] = array(
    '#type' => 'textfield',
    '#title' => t('Wepay Access Token'),
    '#default_value' => $settings['wepay_access_token'],
    '#required' => TRUE,
    '#description' => t('Enter Wepay Access Token'),
  );

  $form['redirect_uri'] = array(
    '#type' => 'textfield',
    '#title' => t('Redirect URI'),
    '#default_value' => $settings['redirect_uri'],
    '#required' => TRUE,
    '#description' => t('Enter Redirect URI'),
  );

  $fee_payer_options = array(
    'payer' => t('Payer'),
    'payee' => t('Payee'),
    'payer_from_app' => t('Payer From App'),
    'payee_from_app' => t('Payee From App'),
  );
  $form['fee_payer'] = array(
    '#type' => 'radios',
    '#title' => t('Fee Payer'),
    '#options' => $fee_payer_options,
    '#default_value' => isset($settings['fee_payer']) ? $settings['fee_payer'] : 'payer',
    '#description' => t('Checkout Type'),
  );

  $form['app_fee'] = array(
    '#type' => 'textfield',
    '#title' => t('App Fee'),
    '#default_value' => $settings['app_fee'],
    '#description' => t('Enter App Fee'),
  );
  return $form;
}

/**
 * Submit Handler. Redirect to Wepay Payment Gateway.
 *
 * @param Associative-array $form
 *   form data.
 * @param Associative-array $form_state
 *   form state of submited form.
 * @param Order-object $order
 *   Order object.
 * @param Associative-array $payment_method
 *   Contains details of payment method.
 *
 * @return Associative-array
 *   $form
 */
function commerce_wepay_payment_redirect_form($form, &$form_state, $order, $payment_method) {
  $gateway_redirect_url = _commerce_wepay_get_redirection_url($order, $payment_method);
  $form['#action'] = $gateway_redirect_url;
  return $form;
}

/**
 * Returns the redirect URL.
 *
 * @param Order-object $order
 *   Order details.
 * @param Associative-array $payment_method
 *   Payment method data.
 *
 * @return string
 *   $url
 */
function _commerce_wepay_get_redirection_url($order, $payment_method) {
  global $base_url;
  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  $amount = $wrapper->commerce_order_total->amount->value() / 100;
  $path = libraries_get_path('wepay');

  if (!empty($path) && file_exists($path . '/wepay.php')) {
    include_once $path . "/wepay.php";
  }

  // Use Application level Client id and Client secret.
  if ($payment_method['settings']['environment'] == 'staging') {
    Wepay::useStaging($payment_method['settings']['app_client_id'],
      $payment_method['settings']['app_client_secret']);
  }
  else {
    Wepay::useProduction($payment_method['settings']['app_client_id'],
      $payment_method['settings']['app_client_secret']);
  }

  $wepay = new WePay($payment_method['settings']['wepay_access_token']);
  $wepay_account = $wepay->request('/account/find');
  $checkout_uri = $wepay->request(
    'checkout/create', array(
      'account_id'        => $wepay_account[0]->account_id,
      'amount'            => $amount,
      'short_description' => $wepay_account[0]->name . '-' . $order->order_id,
      'type'              => $payment_method['settings']['checkout_type'],
      'app_fee'           => isset($payment_method['settings']['app_fee']) ? $payment_method['settings']['app_fee'] : '',
      'fee_payer'         => $payment_method['settings']['fee_payer'],
      'redirect_uri'      => $base_url . '/commerce/' . $order->order_id . '/wepay/capture-status',
    )
  );

  if (!isset($checkout_uri->checkout_uri) && isset($checkout_uri->error_code)) {
    drupal_set_message(check_plain(t($checkout_uri->error_description)), 'error');
  }
  return $checkout_uri->checkout_uri;
}
