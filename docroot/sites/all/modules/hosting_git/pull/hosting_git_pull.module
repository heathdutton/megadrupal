<?php

define('HOSTING_GIT_PULL_DISABLED', 0);
define('HOSTING_GIT_PULL_QUEUE', 1);
define('HOSTING_GIT_PULL_CALLBACK', 2);
define('HOSTING_GIT_PULL_MANUAL', 3);

// The base URL to use for the Post Commit callback.
define('HOSTING_GIT_WEBHOOK_CALLBACK_URL', 'git/pull');

function hosting_git_pull_menu() {
  $items[HOSTING_GIT_WEBHOOK_CALLBACK_URL] = array(
    'page callback' => 'hosting_git_pull_callback',
    'access callback' => TRUE,
    'file' => 'hosting_git_pull.webhook.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements drush_hook_post_COMMAND().
 */
function drush_hosting_git_pull_post_provision_git_pull() {
  // Re-verify the site, this corrects the file permission when necessary.
  $options = array();
  $target = d()->uri;
  provision_backend_invoke($target, 'provision-verify', array(), $options);
}

/**
 * Implements hook_hosting_tasks().
 */
function hosting_git_pull_hosting_tasks() {
  $tasks = array();

  $tasks['site']['git-pull'] = array(
    'title' => t('Git pull'),
    'description' => t('Runs a git pull on the current site.'),
    'access callback' => 'hosting_git_pull_access_site_pull',
    'dialog' => TRUE,
  );

  $tasks['platform']['git-pull'] = array(
    'title' => t('Git pull'),
    'description' => t('Runs a git pull on the current platform.'),
    'access callback' => 'hosting_git_pull_access_platform_pull',
    'dialog' => TRUE,
  );

  return $tasks;
}

/**
 * Access function for the pull task on sites.
 */
function hosting_git_pull_access_site_pull($node) {
  if (user_access("create git-pull task")
      && node_access('view', $node)
      && isset($node->git['pull_method']) && $node->git['pull_method'] > 0) {

    return TRUE;
  }
}

/**
 * Access function for the pull task on platforms.
 */
function hosting_git_pull_access_platform_pull($node) {
  if (user_access("create platform git-pull task")
      && node_access('view', $node)
      && isset($node->git['pull_method']) && $node->git['pull_method'] > 0) {

    return TRUE;
  }
}

/**
 * Implements hook_permission().
 */
function hosting_git_pull_permission() {
  return array(
    'create git-pull task' => array(
      'title' => t('create git-pull task'),
      'description' => t('Create a git-pull task for sites'),
    ),
    'create platform git-pull task' => array(
      'title' => t('create platform git-pull task'),
      'description' => t('Create a git-pull task for platforms'),
    ),
  );
}

/**
 * Implements hook_form().
 */
function hosting_task_git_pull_form($node) {

  $form['reset_hard'] = array(
    '#title' => t('Force: Reset --hard before pulling?'),
    '#description' => t("Uncommitted changes will be lost."),
    '#type' => 'checkbox',
    '#weight' => '-1',
    '#default_value' => TRUE,
  );

  return $form;
}

/**
 * Implements hook_hosting_queues().
 */
function hosting_git_pull_hosting_queues() {
  $items['pull'] = array(
    'type' => 'batch',
    'name' => t('Pull queue'),
    'description' => t('Run git pull on nodes configured to do so.'),
    'total_items' => _hosting_git_pullqueue_get_nodes(),
    'frequency' => strtotime("1 minute", 0),
    'singular' => t('node'),
    'plural' => t('nodes'),
  );
  return $items;
}

/**
 * Implements hook_form_alter().
 */
function hosting_git_pull_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'platform_node_form' || $form_id == 'site_node_form') {
    // Get node object.
    $node = $form['#node'];

    // Bail out early of the hosting_git module has not already added it's fieldset.
    if (!isset($form['git'])) {
      return;
    }

    $form['git']['pull_method'] = array(
      '#title' => t('Git pull method'),
      '#type' => 'radios',
      '#description' => t('Choose the method by which "Git Pull" can be run. See !link to configure the queue. See !link2 to configure URL Callback.', array(
        '!link' => l(t('Hosting > Queues'), 'admin/hosting/queues'),
        '!link2' => l(t('Hosting > Git'), 'admin/hosting/git'),
      )),
      '#default_value' => isset($node->git['pull_method']) ? $node->git['pull_method'] : HOSTING_GIT_PULL_DISABLED,
      '#options' => array(
        HOSTING_GIT_PULL_DISABLED => t('Pull disabled.'),
        HOSTING_GIT_PULL_MANUAL => t('Pull on "Git Pull" task.'),
        HOSTING_GIT_PULL_QUEUE => t('Pull on queue (i.e. every minute).'),
        HOSTING_GIT_PULL_CALLBACK => t('Pull on URL Callback (i.e. GitHub Webhook)'),
      ),
    );
    if (_hosting_git_site_or_platform_enabled($node)) {
      module_load_include('inc', 'hosting_git_pull', 'hosting_git_pull.webhook');
      $form['git']['pull_url'] = array(
        '#type' => 'textfield',
        '#title' => t('Pull Trigger URL'),
        '#value' => _hosting_git_pull_callback_url($node),
        '#description' => t('Configure your repo to hit this URL when it receives a commit.'),
        '#attributes' => array(
          'onclick' => 'this.select()',
        ),
      );
    }
  }

  if ($form_id == 'hosting_git_settings_form') {
    $form['pullhook'] = array(
      '#type' => 'fieldset',
      '#title' => t('Pull on webhook'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
    );

    $form['pullhook']['hosting_git_pull_webhook_ip_acl'] = array(
      '#type' => 'textarea',
      '#title' => t('Control Access by IP'),
      '#default_value' => variable_get('hosting_git_pull_webhook_ip_acl', HOSTING_GIT_WEBHOOK_DEFAULT_ALLOWED_IPS),
      '#rows' => 6,
    );

    // Add some help text on what to fill in.
    $items = array();
    $items[] = t('Enter the IP addresses that are allowed to trigger a "Pull Code" task. You may specify address ranges using CIDR notation (e.g. 192.168.1.0/24).');
    $items[] = t("Your local computer's IP address is %ip.", array('%ip' => ip_address()));

    // Show the last IP used to call our webhook. To make adding it easier.
    $last_ip = variable_get('hosting_git_pull_webhook_last_ip', '');
    if ($last_ip) {
      $items[] = t('The last IP to attempt a commit notification was %ip', array('%ip' => $last_ip));
    }
    else {
      $items[] = t('No requests ever detected.  If you add the trigger URL for a project to your git repo host, the IP will be logged and displayed here.');
    }
    $form['pullhook']['hosting_git_pull_webhook_ip_acl']['#description'] = theme('item_list', array('items' => $items));

    $form['#submit'][] = 'hosting_git_pull_settings_form_submit';
  }
}

function hosting_git_pull_settings_form_submit(&$form, &$form_state) {
  variable_set('hosting_git_pull_webhook_ip_acl', $form_state['values']['hosting_git_pull_webhook_ip_acl']);
}

/**
 * Implements hook_node_update().
 */
function hosting_git_pull_node_update($node) {
  if ($node->type == 'platform' || $node->type == 'site') {
    db_merge('hosting_git_pull')
      ->key(array('nid' => $node->nid))
      ->fields(array(
        'pull_method' => $node->git['pull_method'],
        // fields that should probably stay disabled
        //'repo_url' => $node->git['repo_url'],
        //'repo_branch' => $node->git['repo_branch'],
      ))
      ->execute();
  }
}

/**
 * Implements hook_node_insert().
 */
function hosting_git_pull_node_insert($node) {
  if ($node->type == 'platform' || $node->type == 'site') {
    if (empty($node->git['repo_branch'])) {
      _hosting_git_pull_node_load_defaults($node);
    }
    db_merge('hosting_git_pull')
      ->key(array('nid' => $node->nid))
      ->fields(array(
        'pull_method' => $node->git['pull_method'],
      ))
      ->execute();
  }
}

/**
 * Implements hook_node_load().
 */
function hosting_git_pull_node_load($nodes, $types) {
  foreach ($nodes as $node) {
    if ($node->type == 'platform' || $node->type == 'site') {
      $r = db_query('SELECT pull_method FROM {hosting_git_pull} WHERE nid = :nid', array(':nid' => $node->nid));
      if ($result = $r->fetchObject()) {
        if (!isset($node->git)) {
          $node->git = array();
        }
        $node->git['pull_method'] = $result->pull_method;
      }
      else {
        _hosting_git_pull_node_load_defaults($node);
      }
    }
  }
}

function _hosting_git_pull_node_load_defaults($node) {
  $node->git['pull_method'] = HOSTING_GIT_PULL_MANUAL;
}

/**
 * Implements hosting_QUEUE_TYPE_queue().
 */
function hosting_pull_queue($count) {

  $result = db_query("SELECT nid FROM {hosting_git_pull} "
          . "WHERE pull_method = :pull_method "
          . "ORDER BY last_pull ASC",
          array(':pull_method' => HOSTING_GIT_PULL_QUEUE));

  while ($nid = $result->fetchField()) {

    $args = array('reset_hard' => TRUE);
    hosting_add_task($nid, 'git-pull', $args);
  }
}

/**
 * Get a number of nodes that have their pull queue enabled.
 */
function _hosting_git_pullqueue_get_nodes() {
  $result = db_query("SELECT COUNT(*) FROM {hosting_git_pull} "
          . "WHERE pull_method = :pull_method "
          . "ORDER BY last_pull ASC ",
          array(':pull_method' => HOSTING_GIT_PULL_QUEUE));
  return $result->fetchField();
}
