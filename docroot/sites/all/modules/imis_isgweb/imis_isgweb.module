<?php
/**
 * @file
 * Main module code.
 */

// Private utility functions

/**
 * Wrapper function for variable_get that sets default values.
 *
 * @param $key
 *   The variable.name key to retrieve.
 *
 * @return
 *   variable.value
 *
 */
function _imis_isgweb_variable_get($key) {
  $vars = array(
    'imis_isgweb_allow_login_failover' => TRUE,
    'imis_isgweb_use_iframes' => TRUE,
    'imis_isgweb_ui_root' => 'https://isgweb.example.com/test',
    'imis_isgweb_wsdl_root' => 'http://iservices.example.com/test',
    'imis_isgweb_wsdl_key_Authentication' => '00000000-0000-0000-0000-000000000000',
    'imis_isgweb_wsdl_key_DataAccess' => '00000000-0000-0000-0000-000000000000',
    'imis_isgweb_ssl_domain' => 'www.example.com',
    'imis_isgweb_title_profile' => 'MyOrgAcronym',
  );

  if (!empty($key)) {
    return trim(variable_get($key, $vars[$key]), '/');
  }

  return $vars;
}
/**
 * Get PHP session variable.
 *
 * @param $key
 *   The session key to retrieve.
 *
 * @return
 *   The session value.
 *
 */
function _imis_isgweb_session_read($key) {
  global $user;

  if (empty($user->uid)) {
    return NULL;
  }

  return @$_SESSION[$key];
}
/**
 * Set PHP session variable.
 *
 * @param $key
 *   The session key to set.
 *
 * @param $data
 *   The session value to set.
 *
 * @return
 *   The session value.
 *
 */
function _imis_isgweb_session_write($key, $data) {
  $_SESSION[$key] = $data;

  return _imis_isgweb_session_read($key);
}
/**
 * Shortcut function to instantiate the ISGwebWrapper class.
 *
 * @return
 *   A new instance of the ISGwebWrapper class.
 *
 */
function _imis_isgweb_instance() {

  require_once(drupal_get_path('module', 'imis_isgweb') . '/inc/class.isgweb_wrapper.inc');

  return new ISGwebWrapper(
    _imis_isgweb_variable_get('imis_isgweb_wsdl_root'),
    array(
      'Authentication' => _imis_isgweb_variable_get('imis_isgweb_wsdl_key_Authentication'),
      'DataAccess' => _imis_isgweb_variable_get('imis_isgweb_wsdl_key_DataAccess'),
    ),
    _imis_isgweb_variable_get('imis_isgweb_ui_root')
  );
}
/**
 * Sync an individual user's data from ISGweb to Drupal.
 * Called after successful authentication as well as during the full
 * user sync.
 *
 * @param &$user
 *   The referenced Drupal user account to sync.
 *
 * @param $data
 *   The data returned from the ISGwebWrapper class web service call.
 *
 */
function _imis_isgweb_sync(&$user, &$data) {

  // Get populated user record from iMIS. Note that
  // drupal_imis_isgweb_sync is also called from _imis_isgweb_sync_all
  // ...so $data may already be populated with this info
  if (!array_key_exists('LAST_UPDATED', $data)) {
    $isgweb  = _imis_isgweb_instance();
    $update  = $isgweb->executeStoredProcedure('drupal_imis_isgweb_sync', "'" . $data['ID'] . "',''");

    if (count($isgweb->errors) > 0) {
      for ($i = 0; $i < count($isgweb->errors); $i++) {
        watchdog('imis_isgweb', 'Sync error: @error. ', array('@error' => $isgweb->errors[$i]), WATCHDOG_ERROR);
      }

      return;
    }

    $data = array_merge($data, $update['Users']['User']);
  }

  if (empty($user)) {
    // User record doesn't exist yet; add it
    $userinfo = array(
      'name' => $data['WEB_LOGIN'],
      'pass' => user_password(),
      'mail' => (!empty($data['EMAIL']) ? $data['EMAIL'] : ''),
      'init' => $data['WEB_LOGIN'],
      'status' => (empty($data['LOGIN_DISABLED']) ? 1 : 0),
      'authname_imis_isgweb' => $data['WEB_LOGIN'],
      'access' => REQUEST_TIME,
    );

    $user = user_save('', $userinfo);
  }

  // Add/update authmaps for user
  user_set_authmaps($user, array('authname_imis_isgweb' => $user->name));

  // Add/update the imis_isgweb record
  if (!empty($user->uid)) {
    $sid = db_query_range("SELECT sid FROM {imis_isgweb} WHERE uid = :uid AND imis_id = :imis_id", 0, 1, array(':uid' => $user->uid, ':imis_id' => $data['ID']))->fetchField();

    if (!empty($sid)) {
      db_update('imis_isgweb')
        ->fields(array(
          'imis_updated' => REQUEST_TIME,
          'imis_logindisabled' => (!empty($data['LOGIN_DISABLED']) ? 1 : 0),
          'imis_weblogin' => (!empty($data['WEB_LOGIN']) ? $data['WEB_LOGIN'] : ''),
          'imis_email' => (!empty($data['EMAIL']) ? $data['EMAIL'] : ''),
          'imis_fname' => (!empty($data['FIRST_NAME']) ? $data['FIRST_NAME'] : ''),
          'imis_lname' => (!empty($data['LAST_NAME']) ? $data['LAST_NAME'] : ''),
        ))
        ->condition('sid', $sid)
        ->execute();
    }
    else {
      db_insert('imis_isgweb')
        ->fields(array(
          'uid' => $user->uid,
          'imis_id' => $data['ID'],
          'imis_updated' => REQUEST_TIME,
          'imis_logindisabled' => (!empty($data['LOGIN_DISABLED']) ? 1 : 0),
          'imis_weblogin' => (!empty($data['WEB_LOGIN']) ? $data['WEB_LOGIN'] : ''),
          'imis_email' => (!empty($data['EMAIL']) ? $data['EMAIL'] : ''),
          'imis_fname' => (!empty($data['FIRST_NAME']) ? $data['FIRST_NAME'] : ''),
          'imis_lname' => (!empty($data['LAST_NAME']) ? $data['LAST_NAME'] : ''),
        ))
        ->execute();
    }
  }

}
/**
 * Sync all users from ISGweb to Drupal.
 * Called from the admin AHAH form as well as the hook_cron implementation.
 *
 * @param $last_updated
 *   The date last updated string to send to ISGweb's stored
 *   procedures. If left empty, no filter will be applied and
 *   all users will be returned. Otherwise, the stored procedure
 *   will only return records updated since the supplied date.
 *
 * @return
 *   A message string detailing the number of users that were synced.
 *
 */
function _imis_isgweb_sync_all($last_updated = '') {
  $output = vsprintf('Sync started (%s). ', array(date('F j, Y, g:i a')));
  watchdog('imis_isgweb', $output, NULL, WATCHDOG_INFO);

  variable_set('imis_isgweb_sync_completion', 0);

  $isgweb   = _imis_isgweb_instance();
  $data     = $isgweb->executeStoredProcedure('drupal_imis_isgweb_sync', "'','" . $last_updated . "'");
  $output   = '';
  $counter  = 0;

  if (count($isgweb->errors) > 0) {
    for ($i = 0; $i < count($isgweb->errors); $i++) {
      $output .= $isgweb->errors[$i];
      watchdog('imis_isgweb', 'Sync error: @error. ', array('@error' => $isgweb->errors[$i]), WATCHDOG_ERROR);
    }

    watchdog('imis_isgweb', 'Exiting sync_all routine', NULL, WATCHDOG_INFO);
    return $output;
  }

  variable_set('imis_isgweb_sync_completion', 15);

  // Loop data returned from ISGweb
  for ($i = 0; $i < count($data['Users']['User']); $i++) {
    $imis = $data['Users']['User'][$i];

    if (!empty($imis['WEB_LOGIN'])) {
      try {
        // Get existing user
        $user = user_load_by_name($imis['WEB_LOGIN']);

        // Sync user data
        _imis_isgweb_sync($user, $imis);

        $counter++;
        $percent = (($counter*100) / count($data['Users']['User']));
        $percent = (($percent*85) / 100);
        $percent = round((15+$percent), 5);
        variable_set('imis_isgweb_sync_completion', $percent);
      }
      catch (Exception $ex) {
        watchdog('imis_isgweb', 'Sync error: @error. ', array('@error' => $ex->getMessage()), WATCHDOG_ERROR);
      }
    }

  }

  // Disable users that are not included in the
  // drupal_imis_isgweb_users result set
  $data_disable = $isgweb->executeStoredProcedure('drupal_imis_isgweb_sync_cleanup', "");

  if (count($isgweb->errors) > 0) {
    for ($i = 0; $i < count($isgweb->errors); $i++) {
      $output .= $isgweb->errors[$i];
      watchdog('imis_isgweb', 'Sync error (user cleanup): @error. ', array('@error' => $isgweb->errors[$i]), WATCHDOG_ERROR);
    }
  }
  else {
    $placeholders = array();
    $disable = array();
    for ($i = 0; $i < count($data_disable['Users']['User']); $i++) {
      $key = ':imis_id_' . $i;
      $placeholders[] = $key;
      $disable[$key] = $data_disable['Users']['User'][$i]['ID'];
    }
    $placeholders = implode(',', $placeholders);

    db_update('users')
      ->fields(array(
        'status' => 0,
      ))
      ->where("uid IN (SELECT s.uid FROM {imis_isgweb} AS s WHERE s.imis_id NOT IN ($placeholders))", $disable)
      ->execute();
  }

  variable_set('imis_isgweb_sync_completion', 100);
  $output .= vsprintf('Sync all result (%s): %s users added or updated. ', array(date('F j, Y, g:i a'), $counter));
  watchdog('imis_isgweb', $output, NULL, WATCHDOG_INFO);

  return $output;
}
/**
 * Handles output for all page callbacks defined in
 * hook_menu_alter implementation.
 *
 * @return
 *   The themed output for a page.
 *
 */
function _imis_isgweb_pages() {

  $args   = func_get_args();
  $token  = _imis_isgweb_session_read('ISGWEB_TOKEN');
  $return = url($_GET['q'], array('query' => drupal_get_destination(), 'absolute' => TRUE));
  $isgweb = _imis_isgweb_instance();
  $title = check_plain(_imis_isgweb_variable_get('imis_isgweb_title_profile'));
  $output = '';
  $message = '';

  global $user;

  if (!empty($args)) {
    if (in_array('iframe_resizer', $args)) {
      print '<script type="text/javascript">
        var pair = window.location.search.substring(1);
        var parts = pair.split("&");
        var partsHeight = parts[0].split("=");
        var partsWidth = parts[1].split("=);
        var height = parseInt(partsHeight[1]);
        var width = parseInt(partsWidth[1]);
        try {
          var iframe = window.top.document.getElementById("ISGwebContainer");
          if (iframe != null) {
            iframe.height = height;
            iframe.style.height = height + "px";
            iframe.width = width;
            iframe.style.width = width + "px";
          }
        }
        catch(err) { }
        </script>';
        die();
    }

    if (!empty($user->uid)) {
      // Logged in
      if (!empty($token)) {
        // User has ISGweb token
        switch ($args[0]) {
          case 'user_edit':
            $output = $isgweb->getLink('profile_edit', $token, $return, TRUE);
            break;

          default:
            $output = $isgweb->getLink('profile_view', $token, $return, TRUE);
            break;
        }
      }
      else {
        // User has no ISGweb token; return core output
        require_once(drupal_get_path('module', 'user') . '/user.pages.inc');

        $account = $args[1];

        switch ($args[0]) {
          case 'user_edit':
            if (user_edit_access($account)) {
              $output = drupal_get_form('user_profile_form', $account);
            }
            break;

          default:
            if (user_view_access($account)) {
              $output = user_view($account);
            }
            break;
        }
      }
    }
    else {
      // Not logged in
      switch ($args[0]) {
        case 'user_register':
          $output = $isgweb->getLink('profile_register', $token, $return, TRUE);
          break;

        case 'user_pass':
          $output = $isgweb->getLink('profile_password', $token, $return, TRUE);
          break;

        case 'user_login':
          $output = drupal_get_form('user_login');
          break;

        default :
          if (empty($token)) {
            $message = t('Your account is not linked to') . ' ' . $title;
          }
          break;
      }
    }

  }

  if (!empty($message)) {
    drupal_set_message(check_plain($message));
  }

  drupal_set_title($title);
  return $output;
}

// Hook implementations

/**
 * Implements hook_permission().
 */
function imis_isgweb_permission() {
  return array(
    'administer imis_isgweb' => array(
      'title' => t('Administer imis_isgweb'),
      'description' => t('Perform administration tasks for imis_isgweb.'),
    ),
  );
}
/**
 * Implements hook_menu().
 */
function imis_isgweb_menu() {
  $items = array();

  $items['admin/config/people/imis_isgweb'] = array(
    'title' => 'iMIS ISGweb',
    'description' => 'Configure iMIS ISGweb integration settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('imis_isgweb_form_settings'),
    'access arguments' => array('administer imis_isgweb'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 0,
  );

  $local      = $items['admin/config/people/imis_isgweb'];
  $local['title']  = 'Settings';
  $local['type']  = MENU_DEFAULT_LOCAL_TASK;

  $items['admin/config/people/imis_isgweb/settings'] = $local;

  $items['admin/config/people/imis_isgweb/sync'] = array(
    'title' => 'Data Sync',
    'description' => 'Manually sync records from ISGweb to Drupal.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('imis_isgweb_form_sync'),
    'access arguments' => array('administer imis_isgweb'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );

  $items['admin/config/people/imis_isgweb/sync_js_interval'] = array(
    'page callback' => 'imis_isgweb_form_sync_js_interval',
    'access arguments' => array('administer imis_isgweb'),
    'type' => MENU_CALLBACK,
  );

  // Not sure why ISGweb needs iframe_resizer.html. However, without this
  // menu entry, 404s get written to the log for each iframe request.
  $items['ISGweb222x/Association/iframe_resizer.html'] = array(
    'page callback' => '_imis_isgweb_pages',
    'page arguments' => array('iframe_resizer'),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}
/**
 * Implements hook_menu_alter().
 */
function imis_isgweb_menu_alter(&$items) {

  $items['user/login']['page callback'] = '_imis_isgweb_pages';
  $items['user/login']['page arguments'] = array('user_login');
  unset($items['user/login']['file']);

  $user_iframes = _imis_isgweb_variable_get('imis_isgweb_use_iframes');

  if (!empty($user_iframes)) {
    $items['user/register']['page callback'] = '_imis_isgweb_pages';
    $items['user/register']['page arguments'] = array('user_register');
    unset($items['user/register']['file']);

    $items['user/password']['page callback'] = '_imis_isgweb_pages';
    $items['user/password']['page arguments'] = array('user_pass');
    unset($items['user/password']['file']);

    $items['user/%user/edit']['page callback'] = '_imis_isgweb_pages';
    $items['user/%user/edit']['page arguments'] = array('user_edit', 1);
    unset($items['user/%user/edit']['file']);

    $items['user/%user']['page callback'] = '_imis_isgweb_pages';
    $items['user/%user']['page arguments'] = array('user_view', 1);
    unset($items['user/%user']['file']);
  }
}
/**
 * Implements hook_form_alter().
 */
function imis_isgweb_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'user_login':
    case 'user_login_block':

      $form['#validate']  = array();
      $form['#submit']    = array('imis_isgweb_form_login_submit');
      break;
  }
}
/**
 * Implements hook_node_view().
 */
function imis_isgweb_node_view($node, $view_mode, $langcode) {

  if ($view_mode == 'full') {
    // Force SSL if domain match with variable AND any
    // HTTPS iframe src URLs are found in node->body

    $ssl_domain = _imis_isgweb_variable_get('imis_isgweb_ssl_domain');

    if (!empty($ssl_domain) && $ssl_domain == $_SERVER['HTTP_HOST']) {
      $isgweb_ssl = FALSE;

      preg_match('/src=([\'"])?(.*?)\\1/', $node->body, $matches);

      foreach ($matches as $k => $v) {
        if (stripos($v, 'https://isgweb.')) {
          $isgweb_ssl = TRUE;
        }
      }

      if ($isgweb_ssl) {
        if ($_SERVER['HTTPS'] !== 'on') {
          header('Location: https://' . $_SERVER['HTTP_HOST'] . '/' . $node->path);
          exit();
        }
      }
    }
  }

}
/**
 * Implements hook_user_logout().
 */
function imis_isgweb_user_logout($account) {
  // Destroy session in ISGweb and Drupal
  $token  = _imis_isgweb_session_read('ISGWEB_TOKEN');
  $isgweb = _imis_isgweb_instance();
  $data  = $isgweb->deleteUserSession($token);

  drupal_session_destroy_uid($account->uid);
}
/**
 * Implements hook_cron().
 */
function imis_isgweb_cron() {
  $dt_from  = strtotime(date('Y-m-d') . ' -1 day');
  $dt_from  = date('Y-m-d', $dt_from);
  $output   = _imis_isgweb_sync_all($dt_from);
}

// Forms + handlers

/**
 * Form constructor for the Settings form.
 */
function imis_isgweb_form_settings() {
  $config = _imis_isgweb_variable_get(NULL);

  $form['imis_isgweb_allow_login_failover'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow failover to Drupal user authentication if ISGweb authentication fails?'),
    '#description' => t('Note that uid:1 will be authenticated against Drupal regardless.'),
    '#default_value' => _imis_isgweb_variable_get('imis_isgweb_allow_login_failover'),
  );

  $form['imis_isgweb_use_iframes'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use ISGweb iframes for user registration, password requests, and logged-in profile views and edits?'),
    '#description' => t('By enabling this, the core Drupal user screens will be replaced with ISGweb iframes.'),
    '#default_value' => _imis_isgweb_variable_get('imis_isgweb_use_iframes'),
  );

  $form['imis_isgweb_ui_root'] = array(
    '#type' => 'textfield',
    '#title' => t('ISGweb URL'),
    '#description' => t('Set the URL for your ISGweb front-end interface (e.g. "@imis_isgweb_ui_root").', array('@imis_isgweb_ui_root' => $config['imis_isgweb_ui_root'])),
    '#required' => TRUE,
    '#size' => 40,
    '#default_value' => _imis_isgweb_variable_get('imis_isgweb_ui_root'),
  );

  $form['imis_isgweb_wsdl_root'] = array(
    '#type' => 'textfield',
    '#title' => t('ISGweb WSDL URL'),
    '#description' => t('Set the URL for your ISGweb services root (e.g. "@imis_isgweb_wsdl_root"). Do not include the "ServiceName.asmx?wsdl" endpoint; the module itself accounts for these paths.<br /><br />In some cases, you may also need to add an entry to your server\'s hosts file in order to resolve outbound requests to this domain.', array('@imis_isgweb_wsdl_root' => $config['imis_isgweb_wsdl_root'])),
    '#required' => TRUE,
    '#size' => 40,
    '#default_value' => _imis_isgweb_variable_get('imis_isgweb_wsdl_root'),
  );

  $form['imis_isgweb_wsdl_key_Authentication'] = array(
    '#type' => 'textfield',
    '#title' => t('ISGweb WSDL Key - Authentication'),
    '#description' => t('Set the "securityPassword" key for your ISGweb services Authentication instance (e.g. @imis_isgweb_wsdl_key_Authentication).', array('@imis_isgweb_wsdl_key_Authentication' => $config['imis_isgweb_wsdl_key_Authentication'])),
    '#required' => TRUE,
    '#size' => 40,
    '#default_value' => _imis_isgweb_variable_get('imis_isgweb_wsdl_key_Authentication'),
  );

  $form['imis_isgweb_wsdl_key_DataAccess'] = array(
    '#type' => 'textfield',
    '#title' => t('ISGweb WSDL Key - DataAccess'),
    '#description' => t('Set the "securityPassword" key for your ISGweb services DataAccess instance (e.g. @imis_isgweb_wsdl_key_DataAccess).', array('@imis_isgweb_wsdl_key_DataAccess' => $config['imis_isgweb_wsdl_key_DataAccess'])),
    '#required' => TRUE,
    '#size' => 40,
    '#default_value' => _imis_isgweb_variable_get('imis_isgweb_wsdl_key_DataAccess'),
  );

  $form['imis_isgweb_ssl_domain'] = array(
    '#type' => 'textfield',
    '#title' => t('Force SSL on this domain?'),
    '#description' => t('If you want to force Drupal to use HTTPS pages when any HTTPS ISGweb iframe src URLs are found in the node body, enter your Drual site\'s domain here (e.g. "@imis_isgweb_ssl_domain").', array('@imis_isgweb_ssl_domain' => $config['imis_isgweb_ssl_domain'])),
    '#required' => FALSE,
    '#size' => 40,
    '#default_value' => (_imis_isgweb_variable_get('imis_isgweb_ssl_domain') !== 'www.yourdomain.org' ? _imis_isgweb_variable_get('imis_isgweb_ssl_domain') : ''),
  );

  $form['imis_isgweb_title_profile'] = array(
    '#type' => 'textfield',
    '#title' => t('Member profile title'),
    '#description' => t('Set the page title for all user pages (e.g. "@imis_isgweb_title_profile").', array('@imis_isgweb_title_profile' => $config['imis_isgweb_title_profile'])),
    '#required' => FALSE,
    '#size' => 40,
    '#default_value' => _imis_isgweb_variable_get('imis_isgweb_title_profile'),
  );

  $form = system_settings_form($form);

  // Flush all caches to force our hooks to be run again
  // (particularly hook_menu_alter)
  $form['#submit'][] = 'drupal_flush_all_caches';

  return $form;
}
/**
 * Form constructor for the Sync form.
 */
function imis_isgweb_form_sync() {
  $intro = t('<p>Use this form to manually sync all records from ISGweb to Drupal. The sync process can potentially take a while to run, so please run during off-peak times.</p><p>If you only want to sync records changed since yesterday, you should instead <a href="@run_cron">run cron manually</a>.</p>', array('@run_cron' => '/admin/reports/status/run-cron?destination=admin/config/people/imis_isgweb/sync'));

  $form = array(
    '#prefix' => '<div class="imis-isgweb-admin">' . $intro,
    '#suffix' => '</div>',
  );

  $form['target'] = array(
    '#type' => 'markup',
    '#prefix' => '<div id="imis-isgweb-sync">',
    '#value' => ' ',
    '#suffix' => '</div>',
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Start sync'),
    '#ajax' => array(
      'event' => 'click',
      'callback' => 'imis_isgweb_form_sync_submit',
      'wrapper' => 'imis-isgweb-sync',
      'effect' => 'fade',
      'progress' => array(
        'message' => t('Running sync...'),
        'type' => 'bar',
        'url' => '/admin/config/people/imis_isgweb/sync_js_interval',
        'interval'  => 30,
      )
    ),
  );

  return $form;
}
/**
 * AJAX form submission handler for imis_isgweb_form_sync().
 */
function imis_isgweb_form_sync_submit($form, &$form_state) {
  $output = _imis_isgweb_sync_all();

  return $output;
}
/**
 * AJAX progress callback for imis_isgweb_form_sync().
 */
function imis_isgweb_form_sync_js_interval() {
  $output = variable_get('imis_isgweb_sync_completion', 0);

  drupal_json_output(array(
      'percentage' => $output,
    )
  );
}
/**
 * Form submission handler for user_login_form().
 */
function imis_isgweb_form_login_submit($form, &$form_state) {
  global $user;

  $isgweb = _imis_isgweb_instance();
  $data  = $isgweb->authenticateUser($form_state['values']['name'], $form_state['values']['pass']);
  $path = (!empty($_REQUEST['destination']) ? $_REQUEST['destination'] : '/');

  if (!$data) {
    user_login_authenticate_validate($form, $form_state);
    user_login_final_validate($form, $form_state);
    $uid = $form_state['uid'];

    if (!empty($uid)) {
      $allow_failover = _imis_isgweb_variable_get('imis_isgweb_allow_login_failover');

      if ($uid == 1 || !empty($allow_failover)) {
        $user = user_load($uid);
        user_login_finalize($user);
        drupal_goto($path);
      }
    }

    for ($i = 0; $i < count($isgweb->errors); $i++) {
      drupal_set_message(filter_xss($isgweb->errors[$i], array('a', 'em', 'strong', 'cite', 'code', 'ul', 'ol', 'li', 'dl', 'dt', 'dd', 'pre')));
    }

    return;
  }

  // Get existing user
  $user = user_load_by_name($form_state['values']['name']);

  // Sync user data
  _imis_isgweb_sync($user, $data);

  // Set session token
  if (_imis_isgweb_session_write('ISGWEB_TOKEN', $data['TOKEN'])) {
    // Add and/or authenticate user in Drupal
    user_external_login_register($form_state['values']['name'], 'imis_isgweb');
    drupal_goto($path);
  }

}

