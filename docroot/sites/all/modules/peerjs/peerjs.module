<?php
/**
 * @file
 * Adds the ability to text and video chat using the PeerJS Javascript Library.
 */

/**
 * Implements hook_menu().
 */
function peerjs_menu() {
  $items = array();

  $items['admin/config/media/peerjs'] = array(
    'title' => 'PeerJS Chat Settings',
    'description' => 'Configure the peerjs module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('peerjs_admin_form'),
    'access arguments' => array('administer peerjs'),
    'file' => 'peerjs.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_views_api().
 */
function peerjs_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Implements hook_permission().
 */
function peerjs_permission() {
  return array(
    'administer peerjs' => array(
      'title' => t('Administer peerjs'),
    ),
    'create peerjs_chat' => array(
      'title' => t('Create a peerjs_chat'),
    ),
    'view own peerjs_chat' => array(
      'title' => t('View own peerjs_chat'),
    ),
    'view any peerjs_chat' => array(
      'title' => t('View any peerjs_chat'),
    ),
    'edit own peerjs_chat' => array(
      'title' => t('Edit own peerjs_chat'),
    ),
    'edit any peerjs_chat' => array(
      'title' => t('Edit any peerjs_chat'),
    ),
    'delete own peerjs_chat' => array(
      'title' => t('Delete own peerjs_chat'),
    ),
    'delete any peerjs_chat' => array(
      'title' => t('Delete any peerjs_chat'),
    ),
    'create peerjs_peer' => array(
      'title' => t('Create a peerjs_peer'),
    ),
    'view own peerjs_peer' => array(
      'title' => t('View own peerjs_peer'),
    ),
    'view any peerjs_peer' => array(
      'title' => t('View any peerjs_peer'),
    ),
    'edit own peerjs_peer' => array(
      'title' => t('Edit own peerjs_peer'),
    ),
    'edit any peerjs_peer' => array(
      'title' => t('Edit any peerjs_peer'),
    ),
    'delete own peerjs_peer' => array(
      'title' => t('Delete own peerjs_peer'),
    ),
    'delete any peerjs_peer' => array(
      'title' => t('Delete any peerjs_peer'),
    ),
  );
}

/**
 * Determines whether the given user has access to a peerjs_chat.
 *
 * @param string $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param object $entity
 *   Optionally a entity to check access for. If nothing is
 *   given, access for all entities is determined.
 * @param object $account
 *   The user to check for. Leave it to NULL to check for the global user.
 *
 * @return bool
 *   Whether access is allowed or not.
 */
function peerjs_chat_access($op, $entity = NULL, $account = NULL) {
  $rights = &drupal_static(__FUNCTION__, array());

  if (!in_array($op, array('view', 'edit', 'update', 'delete', 'create'), TRUE)) {
    return FALSE;
  }

  if (empty($account)) {
    $account = $GLOBALS['user'];
  }

  $cid = is_object($entity) ? $entity->cid : $entity;
  if (isset($rights[$account->uid][$cid][$op])) {
    return $rights[$account->uid][$cid][$op];
  }

  if (user_access('administer peerjs', $account)) {
    $rights[$account->uid][$cid][$op] = TRUE;
    return TRUE;
  }

  if ($op == 'create' && user_access('create peerjs_chat', $account)) {
    $rights[$account->uid][$cid][$op] = TRUE;
    return TRUE;
  }

  if ($op == 'view' && $entity) {
    if (user_access('view any peerjs_chat', $account) || (user_access('view own peerjs_chat', $account) && ($account->uid == $entity->uid))) {
      $rights[$account->uid][$cid][$op] = TRUE;
      return TRUE;
    }
  }

  if ($op == 'view' && !$entity) {
    if (user_access('view any peerjs_chat', $account) || (user_access('view own peerjs_chat', $account))) {
      $rights[$account->uid][$cid][$op] = TRUE;
      return TRUE;
    }
  }

  if (($op == 'edit' || $op == 'update') && $entity) {
    if (user_access('edit any peerjs_chat', $account) || (user_access('edit own peerjs_chat', $account) && ($account->uid == $entity->uid))) {
      $rights[$account->uid][$cid][$op] = TRUE;
      return TRUE;
    }
  }

  if ($op == 'delete' && $entity) {
    if (user_access('delete any peerjs_chat', $account) || (user_access('delete own peerjs_chat', $account) && ($account->uid == $entity->uid))) {
      $rights[$account->uid][$cid][$op] = TRUE;
      return TRUE;
    }
  }

  $access = module_invoke_all('peerjs_chat_access', $op, $entity, $account);
  if (in_array(TRUE, $access, TRUE)) {
    $rights[$account->uid][$cid][$op] = TRUE;
    return TRUE;
  }
  elseif (in_array(FALSE, $access, TRUE)) {
    $rights[$account->uid][$cid][$op] = FALSE;
    return FALSE;
  }

  return FALSE;
}

/**
 * Determines whether the given user has access to a peerjs_peer.
 *
 * @param string $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param object $entity
 *   Optionally a entity to check access for. If nothing is
 *   given, access for all entities is determined.
 * @param object $account
 *   The user to check for. Leave it to NULL to check for the global user.
 *
 * @return bool
 *   Whether access is allowed or not.
 */
function peerjs_peer_access($op, $entity = NULL, $account = NULL) {
  $rights = &drupal_static(__FUNCTION__, array());

  if (!in_array($op, array('view', 'edit', 'update', 'delete', 'create'), TRUE)) {
    return FALSE;
  }

  if (empty($account)) {
    $account = $GLOBALS['user'];
  }

  $cid = is_object($entity) ? $entity->cid : $entity;
  if (isset($rights[$account->uid][$cid][$op])) {
    return $rights[$account->uid][$cid][$op];
  }

  if (user_access('administer peerjs', $account)) {
    $rights[$account->uid][$cid][$op] = TRUE;
    return TRUE;
  }

  if ($op == 'create' && user_access('create peerjs_peer', $account)) {
    $rights[$account->uid][$cid][$op] = TRUE;
    return TRUE;
  }

  if ($op == 'view' && $entity) {
    if (user_access('view any peerjs_peer', $account) || (user_access('view own peerjs_peer', $account) && ($account->uid == $entity->uid))) {
      $rights[$account->uid][$cid][$op] = TRUE;
      return TRUE;
    }
  }

  if ($op == 'view' && !$entity) {
    if (user_access('view any peerjs_peer', $account) || (user_access('view own peerjs_peer', $account))) {
      $rights[$account->uid][$cid][$op] = TRUE;
      return TRUE;
    }
  }

  if (($op == 'edit' || $op == 'update') && $entity) {
    if (user_access('edit any peerjs_peer', $account) || (user_access('edit own peerjs_peer', $account) && ($account->uid == $entity->uid))) {
      $rights[$account->uid][$cid][$op] = TRUE;
      return TRUE;
    }
  }

  if ($op == 'delete' && $entity) {
    if (user_access('delete any peerjs_peer', $account) || (user_access('delete own peerjs_peer', $account) && ($account->uid == $entity->uid))) {
      $rights[$account->uid][$cid][$op] = TRUE;
      return TRUE;
    }
  }

  // Allow peerjs_chat access to supercede peerjs_peer access when applicable.
  if ($entity && isset($entity->cid)) {
    $peerjs_chat = peerjs_chat_load($entity->cid);
    return peerjs_chat_access($op, $peerjs_chat, $account);
  }

  $access = module_invoke_all('peerjs_peer_access', $op, $entity, $account);
  if (in_array(TRUE, $access, TRUE)) {
    $rights[$account->uid][$cid][$op] = TRUE;
    return TRUE;
  }
  elseif (in_array(FALSE, $access, TRUE)) {
    $rights[$account->uid][$cid][$op] = FALSE;
    return FALSE;
  }

  return FALSE;
}

/**
 * Implements hook_entity_info().
 */
function peerjs_entity_info() {
  $info = array();

  $info['peerjs_chat'] = array(
    'label' => t('Chat Room'),
    'plural label' => t('Chat Room'),
    'module' => 'peerjs',
    'entity class' => 'PeerJSChat',
    'controller class' => 'PeerJSChatController',
    'base table' => 'peerjs_chat',
    'entity keys' => array(
      'id' => 'cid' ,
    ),
    'admin ui' => array(
      'path' => 'peerjs_chat',
      'file' => 'peerjs.admin.inc',
      'file path' => drupal_get_path('module', 'peerjs'),
      'menu wildcard' => '%peerjs_chat',
      'controller class' => 'PeerJSChatUIController',
    ),
    'load hook' => 'peerjs_chat_load',
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'access callback' => 'peerjs_chat_access',
    'fieldable' => TRUE,
    'view modes' => array(
      'full' => array(
        'label' => t('Full'),
        'custom settings' => FALSE,
      ),
    ),
  );

  $info['peerjs_peer'] = array(
    'label' => t('Peer'),
    'plural label' => t('Peers'),
    'module' => 'peerjs',
    'entity class' => 'PeerJSPeer',
    'controller class' => 'PeerJSPeerController',
    'base table' => 'peerjs_peer',
    'entity keys' => array(
      'id' => 'id',
    ),
    'load hook' => 'peerjs_peer_load',
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'access callback' => 'peerjs_peer_access',
    'fieldable' => FALSE,
  );

  return $info;
}

/**
 * Implements hook_entity_property_info().
 */
function peerjs_entity_property_info() {
  $info = array();

  $info['peerjs_chat']['properties']['cid'] = array(
    'label' => t('Chat ID'),
    'type' => 'integer',
    'description' => t('Primary key of the chat.'),
    'schema field' => 'cid',
    'getter callback' => 'entity_property_verbatim_get',
    'setter callback' => 'entity_property_verbatim_set',
    'raw getter callback' => 'entity_property_verbatim_get',
  );
  $info['peerjs_chat']['properties']['label'] = array(
    'label' => t('Chat Room Label'),
    'type' => 'text',
    'description' => t('The label of the chat room.'),
    'schema field' => 'label',
    'getter callback' => 'entity_property_verbatim_get',
    'setter callback' => 'entity_property_verbatim_set',
    'raw getter callback' => 'entity_property_verbatim_get',
  );
  $info['peerjs_chat']['properties']['author'] = array(
    'label' => t('Author'),
    'type' => 'user',
    'description' => t('The {users}.uid of the author.'),
    'schema field' => 'uid',
    'getter callback' => 'entity_property_verbatim_get',
    'setter callback' => 'entity_property_verbatim_set',
    'raw getter callback' => 'entity_property_verbatim_get',
  );
  $info['peerjs_chat']['properties']['host'] = array(
    'label' => t('Host'),
    'type' => 'text',
    'description' => t('The domain of the host.'),
    'schema field' => 'host',
    'getter callback' => 'entity_property_verbatim_get',
    'setter callback' => 'entity_property_verbatim_set',
    'raw getter callback' => 'entity_property_verbatim_get',
  );
  $info['peerjs_chat']['properties']['port'] = array(
    'label' => t('Port'),
    'type' => 'text',
    'description' => t('The port of the host.'),
    'schema field' => 'port',
    'getter callback' => 'entity_property_verbatim_get',
    'setter callback' => 'entity_property_verbatim_set',
    'raw getter callback' => 'entity_property_verbatim_get',
  );
  $info['peerjs_chat']['properties']['path2app'] = array(
    'label' => t('Path to Application'),
    'type' => 'text',
    'description' => t('The path of the app.'),
    'schema field' => 'path2app',
    'getter callback' => 'entity_property_verbatim_get',
    'setter callback' => 'entity_property_verbatim_set',
    'raw getter callback' => 'entity_property_verbatim_get',
  );
  $info['peerjs_chat']['properties']['created'] = array(
    'label' => t('Date created'),
    'type' => 'date',
    'description' => t('The date the chat was created.'),
    'schema field' => 'created',
    'getter callback' => 'entity_property_verbatim_get',
    'setter callback' => 'entity_property_verbatim_set',
    'raw getter callback' => 'entity_property_verbatim_get',
  );

  $info['peerjs_peer']['properties']['id'] = array(
    'label' => t('ID'),
    'type' => 'integer',
    'description' => t('Primary key of the peer.'),
    'schema field' => 'id',
    'getter callback' => 'entity_property_verbatim_get',
    'setter callback' => 'entity_property_verbatim_set',
    'raw getter callback' => 'entity_property_verbatim_get',
  );
  $info['peerjs_peer']['properties']['pid'] = array(
    'label' => t('Peer ID'),
    'type' => 'text',
    'description' => t('The ID of the peer as provided by the Peer Server.'),
    'schema field' => 'pid',
    'getter callback' => 'entity_property_verbatim_get',
    'setter callback' => 'entity_property_verbatim_set',
    'raw getter callback' => 'entity_property_verbatim_get',
  );
  $info['peerjs_peer']['properties']['author'] = array(
    'label' => t('Author'),
    'type' => 'user',
    'description' => t('The {users}.uid of the peer.'),
    'schema field' => 'uid',
    'getter callback' => 'entity_property_verbatim_get',
    'setter callback' => 'entity_property_verbatim_set',
    'raw getter callback' => 'entity_property_verbatim_get',
  );
  $info['peerjs_peer']['properties']['cid'] = array(
    'label' => t('Chat ID'),
    'type' => 'integer',
    'description' => t('The ID of the chatroom this peer belongs to.'),
    'schema field' => 'cid',
    'getter callback' => 'entity_property_verbatim_get',
    'setter callback' => 'entity_property_verbatim_set',
    'raw getter callback' => 'entity_property_verbatim_get',
  );
  $info['peerjs_peer']['properties']['created'] = array(
    'label' => t('Date created'),
    'type' => 'date',
    'description' => t('The date the peer was created.'),
    'schema field' => 'created',
    'getter callback' => 'entity_property_verbatim_get',
    'setter callback' => 'entity_property_verbatim_set',
    'raw getter callback' => 'entity_property_verbatim_get',
  );
  $info['peerjs_peer']['properties']['accessed'] = array(
    'label' => t('Date accessed'),
    'type' => 'date',
    'description' => t('The date the peer last accessed the chat room.'),
    'schema field' => 'accessed',
    'getter callback' => 'entity_property_verbatim_get',
    'setter callback' => 'entity_property_verbatim_set',
    'raw getter callback' => 'entity_property_verbatim_get',
  );

  $info['user']['properties']['realname'] = array(
    'label' => t('User name'),
    'type' => 'text',
    'description' => t('The name of the user.'),
    'schema field' => 'uid',
    'getter callback' => 'peerjs_user_name_get',
  );
  $info['user']['properties']['picture'] = array(
    'label' => t('User picture'),
    'type' => 'uri',
    'description' => t('The uri of the users picture.'),
    'schema field' => 'uid',
    'getter callback' => 'peerjs_user_picture_get',
  );

  return $info;
}

/**
 * Fetch a peerjs_chat object.
 *
 * @param int $etid
 *   Integer specifying the entity id.
 *
 * @param bool $reset
 *   A boolean indicating that the internal cache should be reset.
 *
 * @return object
 *   A fully-loaded $peerjs_chat object or FALSE if it cannot be loaded.
 *
 * @see peerjs_chat_load_multiple()
 */
function peerjs_chat_load($etid, $reset = FALSE) {
  $entities = peerjs_chat_load_multiple(array($etid), array(), $reset);
  return reset($entities);
}

/**
 * Load multiple peerjs_chats based on certain conditions.
 *
 * @param array $etids
 *   An array of entity IDs.
 *
 * @param array $conditions
 *   An array of conditions to match against the {peerjs_chat} table.
 *
 * @param bool $reset
 *   A boolean indicating that the internal cache should be reset.
 *
 * @return array
 *   An array of entity objects, indexed by id.
 *
 * @see entity_load()
 * @see peerjs_chat_load()
 */
function peerjs_chat_load_multiple($etids = FALSE, $conditions = array(), $reset = FALSE) {
  return entity_load('peerjs_chat', $etids, $conditions, $reset);
}

/**
 * Fetch a peerjs_peer object.
 *
 * @param int $etid
 *   Integer specifying the entity id.
 *
 * @param bool $reset
 *   A boolean indicating that the internal cache should be reset.
 *
 * @return object
 *   A fully-loaded $peerjs_peer object or FALSE if it cannot be loaded.
 *
 * @see peerjs_peer_load_multiple()
 */
function peerjs_peer_load($etid, $reset = FALSE) {
  $entities = peerjs_peer_load_multiple(array($etid), array(), $reset);
  return reset($entities);
}

/**
 * Load multiple peerjs_peers based on certain conditions.
 *
 * @param array $etids
 *   An array of entity IDs.
 *
 * @param array $conditions
 *   An array of conditions to match against the {peerjs_peer} table.
 *
 * @param bool $reset
 *   A boolean indicating that the internal cache should be reset.
 *
 * @return array
 *   An array of entity objects, indexed by id.
 *
 * @see entity_load()
 * @see peerjs_peer_load()
 */
function peerjs_peer_load_multiple($etids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('peerjs_peer', $etids, $conditions, $reset);
}

/**
 * Implements hook_help().
 */
function peerjs_help($path, $arg) {
  if ($path == 'admin/help#peerjs') {
    $output = file_get_contents(drupal_get_path('module', 'peerjs') . '/README.txt');
    return nl2br($output);
  }
}

/**
 * Implements hook_theme().
 */
function peerjs_theme() {
  return array(
    'peerjs_chat' => array(
      'path' => drupal_get_path('module', 'peerjs') . '/theme',
      'template' => 'peerjs-chat',
      'variables' => array(),
    ),
  );
}

/**
 * Implements hook_libraries_info().
 */
function peerjs_libraries_info() {
  $libraries = array();
  $js = array();
  $css = array();
  $app_path = drupal_get_path('module', 'peerjs') . '/js/app';

  // Add Angular app specific js.
  $js['app.js'] = array(
    'type' => 'file',
    'data' => $app_path . '/app.js',
    'scope' => 'footer',
  );
  $files = file_scan_directory($app_path, '/.*\.js/');
  foreach ($files as $file) {
    $js[$file->filename] = array(
      'type' => 'file',
      'data' => $file->uri,
      'scope' => 'footer',
    );
  }

  $libraries['peerjs_chat'] = array(
    'name' => 'PeerJS Chat Angular Application',
    'description' => '',
    'vendor url' => 'https://www.drupal.org/project/peerjs',
    'download url' => 'http://ftp.drupal.org/files/projects/peerjs-7.x-1.x-dev.tar.gz',
    'version arguments' => array(
      'file' => 'app.js',
      'pattern' => '@v([0-9a-zA-Z\.-]+)@',
    ),
    'library path' => $app_path,
    'files' => array(
      'js' => $js,
    ),
  );

  $libraries['peerjs'] = array(
    'name' => 'PeerJS API',
    'vendor url' => 'https://github.com/nttcom/peerjs',
    'download url' => 'https://github.com/nttcom/peerjs/archive/master.zip',
    'version arguments' => array(
      'file' => 'dist/peer.min.js',
      'pattern' => '@build\:([0-9a-zA-Z\.-]+)@',
    ),
    'path' => 'dist',
    'files' => array(
      'js' => array(
        'peer.min.js',
      ),
    ),
  );

  return $libraries;
}

/**
 * Helper function for retrieving the user's name.
 *
 * @see peerjs_entity_property_info()
 */
function peerjs_user_name_get($data, array $options, $name, $type, $info) {
  if ($account = user_load($data->uid)) {
    if (module_exists('realname')) {
      return $account->realname;
    }
    return $account->name;
  }
  else {
    return '';
  }
}

/**
 * Helper function for retrieving the user's picture.
 *
 * @see peerjs_entity_property_info()
 */
function peerjs_user_picture_get($data, array $options, $name, $type, $info) {
  if ($account = user_load($data->uid)) {
    if ($file = $account->picture) {
      return file_create_url($file->uri);
    }
    else {
      return url(variable_get('user_picture_default'));
    }
  }
  else {
    return '';
  }
}
