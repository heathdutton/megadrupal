<?php

/**
 * @file
 * Delivra Integration Module
 * Integration with Delivra Email Service Provider
 */

/**
 * Implements hook_permission().
 */
function delivra_permission() {
  return array(
    'access delivra module' => array(
      'title' => t('Access Delivra Module'),
      'description' => t('Perform administration tasks for Delivra module.'),
    ),
  );
}

/**
 * Implements hook_help().
 */
function delivra_help($path, $arg) {
  switch ($path) {
    case 'admin/help#delivra':
      $output = t('This module provides the core SOAP web service methods to interact with Delivra and response handling/translation.') . ' ';
      $output .= t('Full documentation for their web services is provideded') . ' ' . l(t('here'), 'http://www.delivra.com/api-integration/');
      $output .= t('<p>You must have a Delivra account for this module to function</p>');
      return $output;

      break;

    case 'admin/config/services/delivra':
      if (module_exists('help')) {
        $help_text = t('More help can be found at <a href="@help">Delivra help</a>.', array('@help' => url('admin/help/delivra')));
      }
      else {
        $help_text = '';
      }
      $output = '<p>' . t('Interact with the Delivra Web Service for your email list management.') . ' ' . $help_text . '</p>';

      return $output;
  }
}

/**
 * Implements hook_menu().
 */
function delivra_menu() {

  $items = array();
  $items['admin/config/services/delivra'] = array(
    'title' => 'Delivra Email Service',
    'description' => 'Configure Delivra integration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('delivra_admin_settings'),
    'access arguments' => array('access delivra module'),
    'file' => 'delivra.admin.inc',
  );
  $items['admin/config/services/delivra/default'] = array(
    'title' => 'Delivra Email Service',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  $items['admin/config/services/delivra/summaryreport'] = array(
    'title' => 'Delivra Summary Report',
    'description' => 'Retrieve the summary report for your account.',
    'page callback' => 'delivra_load_reports',
    'access arguments' => array('access delivra module'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
    'file' => 'delivra.admin.inc',
  );

  return $items;
}

/**
 * Function to create SOAP client.
 */
function delivra_soap_client($request, $service, $method) {
  // Create client, feeding it the WSDL.
  $cred_header = array(
    'Username' => variable_get('delivra_username'),
    'Password' => variable_get('delivra_password'),
    'List' => variable_get('delivra_listname'),
  );
  $settings = array(
    'soap_version' => 'SOAP_1_1',
    'exceptions' => TRUE,
    'trace' => TRUE,
    'cache_wsdl' => 'WSDL_CACHE_NONE',
  );
  $wsdluri = array(
    'MemberService' => 'https://integration.delivra.com/DelivraServices/MemberService.asmx?WSDL',
    'AccountService' => 'https://integration.delivra.com/DelivraServices/AccountService.asmx?WSDL',
    'ClickStreamService' => 'https://integration.delivra.com/DelivraServices/ClickStreamService.asmx?WSDL',
    'ContentService' => 'https://integration.delivra.com/DelivraServices/ContentService.asmx?WSDL',
    'MailingService' => 'https://integration.delivra.com/DelivraServices/MailingService.asmx?WSDL',
    'ReportService' => 'https://integration.delivra.com/DelivraServices/ReportService.asmx?WSDL',
    'SegmentService' => 'https://integration.delivra.com/DelivraServices/SegmentService.asmx?WSDL',
    'TransactionalService' => 'https://integration.delivra.com/DelivraServices/TransactionalService.asmx?WSDL',
    'CategorySevice' => 'https://integration.delivra.com/DelivraServices/CategoryService.asmx?WSDL',
  );
  try {
    $client = new SoapClient($wsdluri[$service], $settings);
    // Setup soap header with login credentials.
    $header = new SoapHeader('http://delivra.com/', 'Header', $cred_header);
    $client->__setSoapHeaders($header);
    $response = $client->$method($request);
    if (in_array('response', variable_get('delivra_log', array()))) {
      watchdog('delivra', 'API response received:<pre>@response</pre>', array('@response' => print_r($response, TRUE)));
    }
    // @todo See if Delivra has a list of errors they send back.
    // Return the response object if there are no fatal errors.
    return $response;
  }
  catch (SoapFault $exception) {
    watchdog('delivra', '<h2>SOAP Fault</h2><br /><b>Code:</b> @faultcode <br /><b>String:</b> @faultstring', array('@faultcode' => $exception->faultcode, '@faultstring' => $exception->faultstring));
  }
  return FALSE;
}

/**
 * Helper function to handle the XML of Delivras return.
 */
function delivra_xpath_response($response, $method) {
  $pointer = $method . 'Result';
  $results = $response->$pointer->any;
  $resultdom = new SimpleXMLElement('<docroot>' . $results . '</docroot>');
  $resultdom->registerXPathNamespace('diffgr', 'urn:schemas-microsoft-com:xml-diffgram-v1');
  $result_array = $resultdom->xpath('/docroot/diffgr:diffgram/DocumentElement/*');
  return $result_array;
}

/**
 * Function to create DiffGram formatted DataTable schema.
 * 
 * This is primarily used for the MemberService as their web service 
 * takes a very complicated schema as a request.This code came from Delivra's 
 * example it is untouched.
 */
function delivra_DTToDiffgr($tablename, $dt) {
  // Table name in DiffGram doesn't end in "DataTable".
  $tablename = preg_replace('/datatable$/i', '', $tablename);

  $xml = "<diffgr:diffgram xmlns:msdata=\"urn:schemas-microsoft-com:xml-msdata\" xmlns:diffgr=\"urn:schemas-microsoft-com:xml-diffgram-v1\">\r\n";
  $xml .= "	<DocumentElement xmlns=\"\">\r\n";
  $i = 0;
  foreach ($dt as $datarow) {
    $xml .= "		<$tablename diffgr:id=\"" . $tablename . ($i + 1) . "\" msdata:rowOrder=\"$i\" diffgr:hasChanges=\"inserted\">\r\n";
    foreach ($datarow as $key => $value) {
      $xml .= "			<$key>$value</$key>\r\n";
    }
    $xml .= "		</$tablename>\r\n";
    $i++;
  }
  $xml .= "	</DocumentElement>\r\n";
  $xml .= "</diffgr:diffgram>\r\n";
  return new SoapVar(array(new SoapVar($xml, XSD_ANYXML)), SOAP_ENC_OBJECT);
}
