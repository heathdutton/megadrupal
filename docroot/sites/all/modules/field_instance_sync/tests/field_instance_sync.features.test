<?php

/**
 * @file
 * Tests for the Features integration of the Field Instance Sync module.
 */

class FieldInstanceSyncFeaturesTestCase extends FieldInstanceSyncTestBase {

  /**
   * Returns test case metadata.
   */
  public static function getInfo() {
    return array(
      'name' => 'Features integration',
      'description' => 'Test the integration with the Features module.',
      'group' => 'Field Instance Sync',
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    parent::setUp(array('features'));
  }

  /**
   * Tests that slave instances are removed from Features exports.
   */
  public function testSlaveInstanceNotExported() {
    // Create an initial synced field and add it to the content type.
    $field_name = strtolower($this->randomName());
    $first_label = $this->randomString();

    $this->addField($this->hyphen_type, $first_label, $field_name, TRUE);

    // Enable the option to automatically attach fields to new node bundles.
    $this->enableAutoAttach(array('node'));

    // Create a new bundle. It will also receive the field.
    $new_bundle = $this->drupalCreateContentType();

    // Set the the first instance as the master instance.
    $this->setMasterInstances(array('node' => array('field_' . $field_name => $this->type)));

    // Simulate exporting a Feature containing both fields.
    module_load_include('inc', 'features', 'features.export');

    $master_field_component_name = "node-{$this->type}-field_$field_name";
    $slave_field_component_name = "node-{$new_bundle->type}-field_$field_name";

    $info = array(
      'features' => array(
        'field_instance' => array(
          $master_field_component_name,
          $slave_field_component_name,
        ),
      ),
    );

    $export = features_populate($info, strtolower($this->randomString()));

    // Check that the master field is exported, but the slave field isn't.
    $this->assertTrue(!empty($export['features']['field_instance'][$master_field_component_name]), 'The master field is exported.');
    $this->assertFalse(!empty($export['features']['field_instance'][$slave_field_component_name]), 'The slave field is not exported.');
  }

  /**
   * Tests that the Field Instance Sync component gets exported correctly.
   */
  public function testFeaturesExport() {
    // Create an initial synced field and add it to the content type.
    $field_name = strtolower($this->randomName());
    $first_label = $this->randomString();

    $this->addField($this->hyphen_type, $first_label, $field_name, TRUE);

    // Enable the option to automatically attach fields to new node bundles.
    $this->enableAutoAttach(array('node'));

    // Create a new bundle. It will also receive the field.
    $new_bundle = $this->drupalCreateContentType();

    // Set the the first instance as the master instance.
    $this->setMasterInstances(array('node' => array('field_' . $field_name => $this->type)));

    // Simulate exporting a Feature containing the Field Instance Sync component
    // for both fields.
    module_load_include('inc', 'features', 'features.export');

    $master_field_component_name = "node-{$this->type}-field_$field_name";
    $slave_field_component_name = "node-{$new_bundle->type}-field_$field_name";

    $info = array(
      'features' => array(
        'field_instance_sync' => array(
          $master_field_component_name,
          $slave_field_component_name,
        ),
      ),
    );

    $export = features_populate($info, strtolower($this->randomString()));

    // Check that the base field and field instance have been exported. Our
    // component depends on these.
    $this->assertTrue(!empty($export['features']['field_base']['field_' . $field_name]), 'The base field is exported.');
    $this->assertTrue(!empty($export['features']['field_instance'][$master_field_component_name]), 'The field instance is exported.');

    // Check that the field instance for the slave field has not been exported.
    // This is a duplicate of the master field so it is redundant.
    $this->assertFalse(!empty($export['features']['field_instance'][$slave_field_component_name]), 'The slave field instance is not exported.');

    // Check that both field instance sync components are exported.
    $this->assertTrue(!empty($export['features']['field_instance_sync'][$master_field_component_name]), 'The master field instance sync component is exported.');
    $this->assertTrue(!empty($export['features']['field_instance_sync'][$slave_field_component_name]), 'The slave field instance sync component is exported.');

    // Check that the dependencies on the Features and Field Instance Sync
    // modules are present.
    $this->assertTrue(!empty($export['dependencies']['features']), 'The dependency on the Features module is present.');
    $this->assertTrue(!empty($export['dependencies']['field_instance_sync']), 'The dependency on the Field Instance Sync module is present.');

    // Features needs a module name to put in the info file.
    $export['name'] = $this->randomString();

    // Generate the feature and check that the exported component matches the
    // expected output.
    $module_name = strtolower($this->randomName());
    $files = features_export_render($export, $module_name, TRUE);

    $instance_data = array(
      $master_field_component_name => array('synced' => TRUE, 'slave' => FALSE),
      $slave_field_component_name => array('synced' => TRUE, 'slave' => TRUE),
    );
    ksort($instance_data);

    $expected_output = $this->getRenderedComponent($module_name, $instance_data);
    $this->assertEqual($files['features.field_instance_sync'], $expected_output, 'The component was exported correctly.');
  }

  /**
   * Tests if a feature containing our component can be successfully enabled.
   */
  public function testFeatureEnable() {
    module_enable(array('field_instance_sync_test'));

    // Flush the caches after enabling the module so that Drupal becomes aware
    // that we have a couple of new bundles and fields.
    drupal_flush_all_caches();

    $this->assertFeature();
  }

  /**
   * Tests if default settings are used after reverting an overridden feature.
   */
  public function testFeatureRevert() {
    module_enable(array('field_instance_sync_test'));

    // Flush the caches after enabling the module so that Drupal becomes aware
    // that we have a couple of new bundles and fields.
    drupal_flush_all_caches();

    // Change the settings. Unsync the first field and make the second field the
    // master.
    $edit = array('instance[settings][field_instance_sync]' => FALSE);
    $this->drupalPost('admin/structure/types/manage/field-instance-sync-test-type-1/fields/body', $edit, t('Save settings'));
    $this->setMasterInstances(array('node' => array('body' => 'field_instance_sync_test_type_2')));

    // Revert the components.
    features_revert(array('field_instance_sync_test' => array('field_instance_sync')));
    drupal_flush_all_caches();

    // Check that everything is back to default.
    $this->assertFeature();
  }

  /**
   * Checks that the database settings match those exported in the feature.
   */
  protected function assertFeature() {
    // Check if the master and slave fields both have syncing enabled.
    for ($i = 1; $i < 3; $i++) {
      $this->drupalGet("admin/structure/types/manage/field-instance-sync-test-type-$i/fields/body");
      $this->assertFieldChecked('edit-instance-settings-field-instance-sync', "Syncing is enabled for bundle $i.");
      $this->assertFieldByName('instance[description]', t('This field is used for testing.'), "The field instance for bundle $i has been correctly configured.");
    }

    // Check that the first bundle is set as the master.
    $master_bundles = variable_get('field_instance_sync_master_bundles');
    $this->assertEqual('field_instance_sync_test_type_1', $master_bundles['node']['body'], 'The master bundle has been correctly configured.');
  }

  /**
   * Returns the expected rendered PHP code in the exported component.
   *
   * @param string $module_name
   *   The name of the module that contains the component.
   * @param array $instance_data
   *   An array of exported field instance data, keyed by component identifier.
   *   The identifier is in the format '{entity_type}-{bundle}-{field_name}'.
   *   The data is an associative array of two booleans, with the keys 'synced'
   *   and 'slave'. If 'synced' is FALSE, 'slave' may be omitted.
   *
   * @return string
   *   The expected rendered PHP code.
   */
  protected function getRenderedComponent($module_name, array $instance_data) {
    // Compare against a raw string rather than resorting to regex trickery for
    // simplicity. This has the drawback that this might cause the test to fail
    // if Features changes its export format in the future.

    // Start with the header.
    $output = <<<PHP
<?php
/**
 * @file
 * $module_name.features.field_instance_sync.inc
 */

/**
 * Implements hook_field_instance_sync_defaults().
 */
function {$module_name}_field_instance_sync_defaults() {
  \$field_data = array();


PHP;

    // Render the field instance data.
    foreach ($instance_data as $identifier => $data) {
      $output .= "  \$field_data['$identifier'] = array(\n";
      $output .= '    \'synced\' => ' . ($data['synced'] ? 'TRUE' : 'FALSE') . ",\n";
      // The 'slave' data may not be output if the field is not synced.
      if ($data['synced']) {
        $output .= '    \'slave\' => ' . ($data['slave'] ? 'TRUE' : 'FALSE') . ",\n";
      }
      $output .= "  );\n";
    }

    // Add the footer.
    $output .= <<<PHP

  return \$field_data;
}

PHP;

    return $output;
  }

  /**
   * Adds a field to a bundle using the field UI.
   *
   * @param string $bundle
   *   The machine name of the bundle to which the field should be added.
   * @param string $label
   *   The field label.
   * @param string $name
   *   The field machine name.
   * @param bool $synced
   *   Whether or not the field is synced.
   */
  public function addField($bundle, $label, $name, $synced) {
    $initial_edit = array(
      'fields[_add_new_field][label]' => $label,
      'fields[_add_new_field][field_name]' => $name,
    );

    $instance_edit = array(
      'instance[settings][field_instance_sync]' => $synced ? 'checked' : FALSE,
    );

    $this->fieldUIAddNewField('admin/structure/types/manage/' . $bundle, $initial_edit, array(), $instance_edit);
  }

  /**
   * Enables the automatic attaching of fields to the given entity types.
   *
   * @param array $types
   *   An array of entity types for which the automatic attaching should be
   *   enabled.
   */
  public function enableAutoAttach(array $types) {
    $edit = array();
    foreach ($types as $type) {
      $edit = array("field_attach_entities[$type]" => 'checked');
    }
    $this->drupalPost('admin/config/system/field-instance-sync', $edit, t('Save configuration'));
  }

  /**
   * Defines bundles to be the master instances for the given fields.
   *
   * @param array $configuration
   *   An associative array, keyed by entity type, with each value an
   *   associative array keyed by field name, with the master bundle as value.
   *   Example:
   *   @code
   *     array(
   *       'node' => array(
   *         'body' => 'article',
   *       ),
   *     );
   *   @endcode
   */
  public function setMasterInstances(array $configuration) {
    foreach ($configuration as $type => $bundles) {
      foreach ($bundles as $field_name => $bundle) {
        $edit = array(
          "master_bundles[$type][fields][fields][$field_name]" => $bundle,
        );
      }
    }
    $this->drupalPost('admin/config/system/field-instance-sync', $edit, t('Save configuration'));
  }

}
