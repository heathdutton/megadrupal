<?php

/**
 * @file
 * Tests for the Field Instance Sync module.
 */

/**
 * Functional tests for the Field Instance Sync module.
 */
class FieldInstanceSyncTestCase extends FieldInstanceSyncTestBase {

  /**
   * Returns test case metadata.
   */
  public static function getInfo() {
    return array(
      'name' => 'Basic functionality',
      'description' => 'Test the functionality of the Field Instance Sync module.',
      'group' => 'Field Instance Sync',
    );
  }

  /**
   * Tests if synced fields are automatically attached to new bundles.
   */
  public function testFieldsAttachedToNewBundles() {
    // Create two fields.
    $field_data = array();
    for ($i = 0; $i < 2; $i++) {
      $field_data[$i] = array(
        'label' => $this->randomString(),
        'name' => strtolower($this->randomName()),
      );

      $initial_edit = array(
        'fields[_add_new_field][label]' => $field_data[$i]['label'],
        'fields[_add_new_field][field_name]' => $field_data[$i]['name'],
      );

      // Set up syncing for the first field only. The second field will not be
      // synced.
      $instance_edit = $i ? array() : array(
        'instance[settings][field_instance_sync]' => 'checked',
      );

      $this->fieldUIAddNewField('admin/structure/types/manage/' . $this->hyphen_type, $initial_edit, array(), $instance_edit);
    }

    // First test that no fields are attached to a new bundle if the option is
    // disabled.
    $edit = array(
      'field_attach_entities[node]' => FALSE,
    );
    $this->drupalPost('admin/config/system/field-instance-sync', $edit, t('Save configuration'));

    // Create a new node bundle.
    $type = $this->drupalCreateContentType();

    // Check that the fields were not automatically attached.
    $this->drupalGet('admin/structure/types/manage/' . $type->type . '/fields');
    $elements = $this->xpath('//table[@id="field-overview"]//td[text()=:label]', array(':label' => $field_data[0]['label']));
    $this->assertFalse($elements, 'The first field is not attached to the new content type.');
    $elements = $this->xpath('//table[@id="field-overview"]//td[text()=:label]', array(':label' => $field_data[1]['label']));
    $this->assertFalse($elements, 'The second field is not attached to the new content type.');

    // Now enable the option to automatically attach fields to new node bundles.
    $edit = array(
      'field_attach_entities[node]' => 'checked',
    );
    $this->drupalPost('admin/config/system/field-instance-sync', $edit, t('Save configuration'));

    // Create a new node bundle.
    $type = $this->drupalCreateContentType();

    // Check that the first field is attached to the content type, but not the
    // second.
    $this->drupalGet('admin/structure/types/manage/' . $type->type . '/fields');
    $elements = $this->xpath('//table[@id="field-overview"]//td[text()=:label]', array(':label' => $field_data[0]['label']));
    $this->assertTrue($elements, 'The first field is attached to the new content type.');
    $elements = $this->xpath('//table[@id="field-overview"]//td[text()=:label]', array(':label' => $field_data[1]['label']));
    $this->assertFalse($elements, 'The second field is not attached to the new content type.');
  }

  /**
   * Tests master field instances.
   */
  public function testMasterFieldInstance() {
    // Create an initial synced field and add it to the content type.
    $field_name = strtolower($this->randomName());
    $first_label = $this->randomString();

    $initial_edit = array(
      'fields[_add_new_field][label]' => $first_label,
      'fields[_add_new_field][field_name]' => $field_name,
    );

    $instance_edit = array(
      'instance[settings][field_instance_sync]' => 'checked',
    );

    $this->fieldUIAddNewField('admin/structure/types/manage/' . $this->hyphen_type, $initial_edit, array(), $instance_edit);

    // Enable the option to automatically attach fields to new node bundles.
    $edit = array('field_attach_entities[node]' => 'checked');
    $this->drupalPost('admin/config/system/field-instance-sync', $edit, t('Save configuration'));

    // Create a new bundle. It will also receive the field.
    $new_bundle = $this->drupalCreateContentType();

    // Alter the label of the field instance on the new bundle so we can
    // distinguish between them.
    $second_label = $this->randomString();
    $edit = array('instance[label]' => $second_label);
    $this->drupalPost('admin/structure/types/manage/' . $new_bundle->type . '/fields/field_' . $field_name, $edit, t('Save settings'));

    // Set each instance as master in turn, and check that newly created bundles
    // take the settings from the master.
    $test_cases = array(
      array(
        'bundle' => $this->type,
        'label' => $first_label,
      ),
      array(
        'bundle' => $new_bundle->type,
        'label' => $second_label,
      ),
    );

    foreach ($test_cases as $test_case) {
      // Set the bundle instance as the master instance.
      $edit = array(
        'master_bundles[node][fields][fields][field_' . $field_name . ']' => $test_case['bundle'],
      );
      $this->drupalPost('admin/config/system/field-instance-sync', $edit, t('Save configuration'));

      // Create a new bundle.
      $type = $this->drupalCreateContentType();

      // Check the label to see if the master instance was used.
      $instance = field_read_instance('node', 'field_' . $field_name, $type->type);
      $this->assertEqual($instance['label'], $test_case['label'], 'The master instance was used in the new bundle.');
    }

    // Set a new master and verify that when the master type changes, the slave
    // is also being updated.
    $edit = array(
      'master_bundles[node][fields][fields][field_' . $field_name . ']' => $this->type,
    );
    $this->drupalPost('admin/config/system/field-instance-sync', $edit, t('Save configuration'));

    // Set the description value for the field, and verify that the slave is updated.
    $edit = array(
      'instance[description]' => $this->randomString(8),
    );
    $this->drupalPost('admin/structure/types/manage/' . $this->type . '/fields/field_' . $field_name, $edit, t('Save settings'));
    $this->drupalGet('admin/structure/types/manage/' . $new_bundle->type . '/fields/field_' . $field_name);
    $this->assertFieldByName('instance[description]', $edit['instance[description]'], 'Check if the text is shown on field edit page of the slave field.');

    // Update the slave field, verify that the master field is not being
    // updated.
    $edit = array(
      'instance[description]' => $this->randomString(8),
    );
    $this->drupalPost('admin/structure/types/manage/' . $new_bundle->type . '/fields/field_' . $field_name, $edit, t('Save settings'));
    $this->drupalGet('admin/structure/types/manage/' . $this->type . '/fields/field_' . $field_name);
    $this->assertNoText($edit['instance[description]'], 'Check if the text is not updated on field edit page of the master field.');
  }

}
