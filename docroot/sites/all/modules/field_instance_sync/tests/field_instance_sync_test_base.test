<?php

/**
 * @file
 * Base class for Field Instance Sync tests.
 */

class FieldInstanceSyncTestBase extends FieldUITestCase {

  /**
   * {@inheritdoc}
   */
  protected $profile = 'testing';

  /**
   * {@inheritdoc}
   *
   * Identical to the parent method, save for the following:
   * - An additional permission is given to the test user to access the Field
   *   Instance Sync configuration.
   * - The list of enabled modules is changed to include Field Instance Sync and
   *   the base modules needed to run the tests using the 'testing' profile.
   */
  public function setUp() {
    // Since this is a base class for many test cases, support the same
    // flexibility that DrupalWebTestCase::setUp() has for the modules to be
    // passed in as either an array or a variable number of string arguments.
    $modules = func_get_args();
    if (isset($modules[0]) && is_array($modules[0])) {
      $modules = $modules[0];
    }
    $modules = array_merge($modules, array(
      'field_instance_sync',
      'field_test',
      'field_ui',
      'node',
      'taxonomy',
    ));
    parent::setUp($modules);

    // Create test user.
    $admin_user = $this->drupalCreateUser(array(
      'access content',
      'administer content types',
      'administer field instance sync',
      'administer taxonomy',
    ));
    $this->drupalLogin($admin_user);

    // Create content type, with underscores.
    $type_name = strtolower($this->randomName(8)) . '_test';
    $type = $this->drupalCreateContentType(array('name' => $type_name, 'type' => $type_name));
    $this->type = $type->type;
    // Store a valid URL name, with hyphens instead of underscores.
    $this->hyphen_type = str_replace('_', '-', $this->type);
  }

  /**
   * {@inheritdoc}
   *
   * Identical to the parent method, save for the final assert which has been
   * tweaked to work on PHP 5.5.
   *
   * @todo Remove this once issue #2125725 is in.
   * @see https://www.drupal.org/node/2125725
   */
  public function fieldUIAddNewField($bundle_path, $initial_edit, $field_edit = array(), $instance_edit = array()) {
    // Use 'test_field' field type by default.
    $initial_edit += array(
      'fields[_add_new_field][type]' => 'test_field',
      'fields[_add_new_field][widget_type]' => 'test_field_widget',
    );
    $label = $initial_edit['fields[_add_new_field][label]'];
    $field_name = $initial_edit['fields[_add_new_field][field_name]'];

    // First step : 'Add new field' on the 'Manage fields' page.
    $this->drupalPost("$bundle_path/fields", $initial_edit, t('Save'));
    $this->assertRaw(t('These settings apply to the %label field everywhere it is used.', array('%label' => $label)), 'Field settings page was displayed.');

    // Second step : 'Field settings' form.
    $this->drupalPost(NULL, $field_edit, t('Save field settings'));
    $this->assertRaw(t('Updated field %label field settings.', array('%label' => $label)), 'Redirected to instance and widget settings page.');

    // Third step : 'Instance settings' form.
    $this->drupalPost(NULL, $instance_edit, t('Save settings'));
    $this->assertRaw(t('Saved %label configuration.', array('%label' => $label)), 'Redirected to "Manage fields" page.');

    // Check that the field appears in the overview form.
    $elements = $this->xpath('//table[@id="field-overview"]//td[text()=:label]', array(':label' => $label));
    $this->assertTrue($elements, 'Field was created and appears in the overview page.');
  }

}
