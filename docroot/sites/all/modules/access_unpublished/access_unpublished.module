<?php
/**
 * @file
 * Drupal module: Access unpublished.
 *
 * Access unpublished module allows view unpublished content to anyone who has
 * a unique URL and appropriate permissions.
 *
 * URL hash parameter can be configured.
 */

/**
 * Implements hook_menu().
 */
function access_unpublished_menu() {
  // This provides hash URL parameter setting.
  $items['admin/config/content/access_unpublished'] = array(
    'title' => 'Access unpublished',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('access_unpublished_url_param_form'),
    'access arguments' => array('access unpublished configuration'),
    'file' => 'access_unpublished.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function access_unpublished_permission() {

  $permissions['access unpublished view unpublished node'] = array(
    'title' => t('View unpublished contents'),
    'description' => t('Allow users to view unpublished contents with unique key in URL path'),
  );
  $permissions['access unpublished view hashkey'] = array(
    'title' => t('View hash key link to unpublished contents'),
    'description' => t('Allow users to view link with hash key for view unpublished contents'),
  );
  $permissions['access unpublished configuration'] = array(
    'title' => t('Access unpublished module configuration'),
    'description' => t('Allow users to configure module'),
  );
  return $permissions;
}

/**
 * Implements hook_node_view().
 */
function access_unpublished_node_view($node) {
  // Test publish and view node status.
  // Only unpublished nodes in full page view are affected.
  if ($node->status == NODE_NOT_PUBLISHED && node_is_page($node)) {
    // Test user permission.
    if (user_access('access unpublished view hashkey')) {
      // Construct URL link.
      $au_url_key = variable_get('access_unpublished_url_key', 'hash');
      $au_link = l(t("hashed link"), 'node/' . $node->nid,
        array(
          'query' => array(
            $au_url_key => access_unpublished_get_hash_from_nodeid($node->nid),
          ),
          'attributes' => array(
            // We need a extra class for link with class="active" from l()
            'class' => array('access_unpublished_link'),
          ),
        )
      );
      $au_link_text = t("You can use !link to view this unpublished node.",
        array('!link' => $au_link));
      if (variable_get('access_unpublished_display_link_in_drupal_message', 1)) {
        // Show link in Drupal message.
        drupal_set_message($au_link_text, 'status', FALSE);
      }
      if (variable_get('access_unpublished_display_link_in_node_content', 1)) {
        // Show link in extra renderable entry in node contents.
        $node->content['access_unpublished_link'] = array(
          '#access_unpublished_link' => $au_link_text,
          '#weight' => 100,
          '#theme' => 'access_unpublished_link',
        );
      }
    }
  }
}

/**
 * Implements hook_node_access().
 *
 * Return NODE_ACCESS_ALLOW if url hash matches reference hash.
 * In other cases return NODE_ACCESS_IGNORE to allow other modules
 * or the node_access table to control access.
 */
function access_unpublished_node_access($node, $op) {
  if ($op == 'view' && isset($node->nid)
    && $node->status == NODE_NOT_PUBLISHED) {
    // Check user permission.
    if (user_access('access unpublished view unpublished node')) {
      $au_url_key = variable_get('access_unpublished_url_key', 'hash');
      // Check hash key in url.
      $url_query = drupal_get_query_parameters();
      if (isset($url_query[$au_url_key])) {
        $url_hash = $url_query[$au_url_key];
        // Generate reference hash.
        $hash = access_unpublished_get_hash_from_nodeid($node->nid);
        // Check hash match and return access state.
        if ($url_hash == $hash) {
          return NODE_ACCESS_ALLOW;
        }
      }
    }
  }
  return NODE_ACCESS_IGNORE;
}


/**
 * Generate hash from node ID.
 *
 * @param int $nid
 *   Node ID, nid.
 *
 * @return string
 *   Base-64 encoded, URL-safe sha-256 hash based on node ID.
 */
function access_unpublished_get_hash_from_nodeid($nid) {
  return drupal_hash_base64(drupal_get_private_key() . $nid);
}


/**
 * Implements hook_theme().
 */
function access_unpublished_theme() {
  return array(
    'access_unpublished_link' => array(
      'variables' => array('access_unpublished_link' => NULL),
      'template' => 'access-unpublished-link',
    ),
  );
}
