<?php

/**
 * @file
 * Compares two menu trees.
 */

/**
 * Implements hook_libraries_info().
 */
function menu_tree_compare_libraries_info() {
  $libraries = array();
  $libraries['jquery-1.11.2'] = array(
    'name' => 'jquery-1.11.2',
    'vendor url' => 'https://code.jquery.com/jquery-1.11.2.min.js',
    'download url' => 'https://code.jquery.com/jquery-1.11.2.min.js',
    'version callback' => 'menu_tree_compare_short_circuit_version',
    'files' => array(),
  );
 
  $libraries['jquery_ui-1.11.2'] = array(
    'name' => 'jquery-1.11.2',
    'vendor url' => 'https://code.jquery.com/ui/1.11.2/jquery-ui.min.js',
    'download url' => 'https://code.jquery.com/ui/1.11.2/jquery-ui.min.js',
    'version callback' => 'menu_tree_compare_short_circuit_version',
    'files' => array(),
  );

  $libraries['jsplumb-1.7.2'] = array(
    'name' => 'jsplumb-1.7.2',
    'vendor url' => 'https://raw.githubusercontent.com/sporritt/jsPlumb/1.7.2/dist/js/jquery.jsPlumb-1.7.2-min.js',
    'download url' => 'https://raw.githubusercontent.com/sporritt/jsPlumb/1.7.2/dist/js/jquery.jsPlumb-1.7.2-min.js',
    'version callback' => 'menu_tree_compare_short_circuit_version',
    'files' => array(),
  );

  $libraries['jstree-3.0.9'] = array(
    'name' => 'jstree-3.0.9',
    'vendor url' => 'https://github.com/vakata/jstree/zipball/3.0.9',
    'download url' => 'https://github.com/vakata/jstree/zipball/3.0.9',
    'version callback' => 'menu_tree_compare_short_circuit_version',
    'files' => array(),
  );

  return $libraries;
}


/**
 * Short-circuit the version argument.
 */
function menu_tree_compare_short_circuit_version() { 
  return TRUE;
}

/**
 * Implements hook_menu().
 */
function menu_tree_compare_menu() {
  $items['admin/structure/menu/tree_compare'] = array(
    'title'            => 'Compare menu trees',
    'access arguments' => array('administer menu'),
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('menu_tree_compare_form'),
    'type'             => MENU_LOCAL_TASK,
  );
  $items['admin/structure/menu/tree_compare/%/%'] = array(
    'title'            => 'Compare menu trees',
    'access arguments' => array('administer menu'),
    'page callback'    => 'menu_tree_compare_page',
    'page arguments'   => array(4, 5),
    'type'             => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Form callback.
 */
function menu_tree_compare_form() {
  $menu_options = menu_get_menus();

  $form['from'] = array(
    '#type' => 'select',
    '#title' => t('Menu to compare - Left'),
    '#options' => $menu_options,
  );

  $form['to'] = array(
    '#type' => 'select',
    '#title' => t('Menu to compare - Right'),
    '#options' => $menu_options,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Compare',
  );

  return $form;
}

/**
 * Submit hook for menu_tree_compare_form().
 */
function menu_tree_compare_form_submit($form, &$form_state) {
  $menu_options = menu_get_menus();
  $from = $form_state['values']['from'];
  $to = $form_state['values']['to'];

  if (in_array($from, array_keys($menu_options)) && in_array($to, array_keys($menu_options))) {
    drupal_goto('admin/structure/menu/tree_compare/' . $from . '/' . $to);
  }
}

/**
 * Implements hook_page_build().
 */
function menu_tree_compare_page_build(&$page) {
  $path = drupal_get_path('module', 'menu_tree_compare');
  $jquery_path = libraries_get_path('jquery-1.11.2');
  $jquery_ui_path = libraries_get_path('jquery_ui-1.11.2');
  $jsplumb_path = libraries_get_path('jsplumb-1.7.2');
  $jstree_path = libraries_get_path('jstree-3.0.9');

  if (arg(0) == 'admin' && arg(1) == 'structure' && arg(2) == 'menu' && arg(3) == 'tree_compare') {
    drupal_add_css($jstree_path . '/dist/themes/default/style.min.css', array(
      'type' => 'file',
      // Needs a unique basename.
      'basename' => 'style.jstree.css',
      'preprocess' => FALSE,
    ));
    drupal_add_css($path . '/menu_tree_compare.css', array(
      'type' => 'file',
      'preprocess' => FALSE,
    ));
    // Use more recent version of jQuery so as to be compatible with jsPlumb
    // and jstree libraries.
    drupal_add_js($jquery_path . '/jquery-1.11.2.min.js', array(
      'type' => 'file',
      'group' => JS_LIBRARY,
      'preprocess' => FALSE,
      'weight' => 1000,
    ));
    // Use compatible version of jQuery UI Draggable so that dragging of trees
    // will work.
    drupal_add_js($jquery_ui_path . '/jquery-ui.min.js', array(
      'type' => 'file',
      'group' => JS_LIBRARY,
      'preprocess' => FALSE,
      'weight' => 1001,
    ));
    drupal_add_js($jsplumb_path . '/jquery.jsPlumb-1.7.2-min.js', array(
      'type' => 'file',
      'group' => JS_LIBRARY,
      'preprocess' => FALSE,
      'weight' => 1002,
    ));
    drupal_add_js($jstree_path . '/dist/jstree.min.js', array(
      'type' => 'file',
      'group' => JS_LIBRARY,
      'preprocess' => FALSE,
      'weight' => 1003,
    ));
    drupal_add_js($path . '/js/menu_tree_compare.js', array(
      'type' => 'file',
      'group' => JS_LIBRARY,
      'preprocess' => FALSE,
      'weight' => 1004,
    ));
    // Revert to recent jQuery version.
    drupal_add_js($path . '/js/jquery-noconflict.js', array(
      'type' => 'file',
      'group' => JS_LIBRARY,
      'preprocess' => FALSE,
      'weight' => 1005,
    ));
  }
}

/**
 * Page callback for menu tree comparison page.
 *
 * @param string $from_menu_name
 *   Left menu to compare from.
 * @param string $to_menu_name
 *   Right menu to compare to.
 *
 * @return string
 *   Themed page.
 */
function menu_tree_compare_page($from_menu_name, $to_menu_name) {
  $from_tree = menu_tree_all_data($from_menu_name);
  if (module_exists('i18n_menu')) {
    $from_tree = i18n_menu_localize_tree($from_tree);
  }

  $to_tree = menu_tree_all_data($to_menu_name);
  if (module_exists('i18n_menu')) {
    $to_tree = i18n_menu_localize_tree($to_tree);
  }

  // Get array with icon / matching node ID mappings.
  $mapping = _menu_tree_compare_get_mapping($from_tree, $to_tree);

  $menu_tree_output = array();
  $menu_tree_output['from'] = _menu_tree_compare_menu_tree_output($from_tree, $mapping['from']);
  $menu_tree_output['to'] = _menu_tree_compare_menu_tree_output($to_tree, $mapping['to']);

  return theme('menu_tree_compare_page', array(
    'menu_tree_output' => $menu_tree_output
  ));
}

/**
 * Implements hook_theme().
 */
function menu_tree_compare_theme($existing, $type, $theme, $path) {
  return array(
    'menu_tree_compare_page'=> array(
      'variables' => array(
        'menu_tree_output' => NULL,
      ),
    ),
  );
}

/**
 * Theme function to render 2 menu trees.
 *
 * @param array $menu_tree_output
 *   Menu tree to be rendered.
 *
 * @return string
 *   HTML output.
 */
function theme_menu_tree_compare_page(array $variables) {
  return '<div id="menu_tree_compare-goback">' . l('< Compare menu trees', 'admin/structure/menu/tree_compare') . '</div>'
  . '<div id="menu_tree_compare-container"><div id="menu_tree_compare-left">'
  . drupal_render($variables['menu_tree_output']['from'])
  . '</div><div id="menu_tree_compare-right">'
  . drupal_render($variables['menu_tree_output']['to'])
  . '</div></div>';
}

/**
 * Returns an output structure for rendering a menu tree.
 *
 * @param array $tree
 *   A data structure representing the tree as returned from menu_tree_data().
 * @param array $mapping
 *   The mapping of items on the left and on the right.
 *
 * @return array
 *   A structured array to be rendered by drupal_render().
 *
 * @see menu_tree_output()
 */
function _menu_tree_compare_menu_tree_output(array $tree, array $mapping) {
  $build = array();
  $items = array();

  // Pull out just the menu links we are going to render so that we
  // get an accurate count for the first/last classes.
  foreach ($tree as $data) {
    if ($data['link']['access'] && !$data['link']['hidden']) {
      $items[] = $data;
    }
  }

  foreach (array_values($items) as $data) {
    // Allow menu-specific theme overrides.
    $element['#theme'] = 'menu_link__' . strtr($data['link']['menu_name'], '-', '_');
    $element['#attributes']['class'] = array('jstree-open');
    $element['#attributes']['id'] = 'treecompare-' . uniqid() . '-' . _menu_tree_compare_get_source_nid($data['link']['mlid']);
    $element['#attributes']['data-jstree'] = "{\"icon\":\"" . $mapping['mlid'][$data['link']['mlid']]['icon'] . "\"}";

    $element['#title'] = $data['link']['title'];
    $element['#href'] = $data['link']['href'];
    $element['#localized_options'] = array();
    $element['#below'] = $data['below'] ? _menu_tree_compare_menu_tree_output($data['below'], $mapping) : $data['below'];
    $element['#original_link'] = $data['link'];
    // Index using the link's unique mlid.
    $build[$data['link']['mlid']] = $element;
  }

  if ($build) {
    // Make sure drupal_render() does not re-order the links.
    $build['#sorted'] = TRUE;
    // Add the theme wrapper for outer markup.
    // Allow menu-specific theme overrides.
    $build['#theme_wrappers'][] = 'menu_tree__' . strtr($data['link']['menu_name'], '-', '_');
  }

  return $build;
}

/**
 * Gets mapping array with icons and source nodes.
 *
 * @param array $from_tree
 *   Left tree to compare from.
 * @param array $to_tree
 *   Right tree to compare to.
 *
 * @return array
 *   The mapping.
 */
function _menu_tree_compare_get_mapping(array $from_tree, array $to_tree) {
  $mapping = array();
  // Get mapping.
  $mapping['from'] = _menu_tree_compare_get_mapping_skeleton($from_tree);
  $mapping['to'] = _menu_tree_compare_get_mapping_skeleton($to_tree);
  // Get mapping icons.
  _menu_tree_compare_set_mapping_icons($from_tree, $mapping, 'from');
  _menu_tree_compare_set_mapping_icons($to_tree, $mapping, 'to');
  return $mapping;
}

/**
 * Sets mapping icons in the mapping array.
 *
 * @param array $tree
 *   Tree structure.
 * @param array $mapping
 *   Mapping array.
 * @param string $type
 *   Can be either "from" or "to".
 */
function _menu_tree_compare_set_mapping_icons(array $tree, array &$mapping, $type) {
  $types = array('from' , 'to');
  $other_type = array_diff($types, array($type));
  $other_type = reset($other_type);

  foreach ($mapping[$type]['mlid'] as $mlid => $item) {
    $source_match = is_numeric($item['source_nid']) && in_array($item['source_nid'], array_keys($mapping[$other_type]['source_nid']));
    if (!$source_match) {
      // Show X icon if item is not in other tree at all (match_type == none).
      $icon_name = 'not-found';
    }
    else {
      if ($item['parent_source_nid'] != $mapping[$other_type]['source_nid'][$item['source_nid']]['parent_source_nid']) {
        // Show ! icon if parent doesn't match (parent_patch === FALSE).
        $icon_name = 'no-parent-match';
      }
      else {
        if ($item['weight'] != $mapping[$other_type]['source_nid'][$item['source_nid']]['weight']) {
          // Show ! icon if parent matches but weight doesn't.
          $icon_name = 'no-weight-match';
        }
        else {
          // Show check icon.
          $icon_name = 'ok';
        }
      }
    }
    $icon = base_path() . drupal_get_path('module', 'menu_tree_compare') . '/i/' . $icon_name . '.png';
    $mapping[$type]['mlid'][$mlid] += array(
      'icon' => $icon,
    );
  }
}

/**
 * Helper function which flattens a multidimensional array.
 *
 * @param array $array
 *   The unflattened array.
 *
 * @return array
 *   The flattened array.
 *
 * @see http://stackoverflow.com/questions/1319903/how-to-flatten-a-multidimensional-array
 */
function _menu_tree_compare_flatten(array $array) {
  $return = array();
  array_walk_recursive($array, function($a) use (&$return) {
    $return[] = $a;
  });
  return $return;
}

/**
 * Finds out which items are visible.
 *
 * @param array $tree
 *   Tree to be rendered.
 *
 * @return array
 *   Items to process.
 */
function _menu_tree_compare_get_visible_items(array $tree) {
  $items = array();
  foreach ($tree as $data) {
    if ($data['link']['access'] && !$data['link']['hidden']) {
      $items[] = $data;
    }
    if (!empty($data['below'])) {
      $items_deeper = _menu_tree_compare_get_visible_items($data['below']);
      foreach ($items_deeper as $item) {
        $items[] = $item;
      }
    }
  }
  return $items;
}

/**
 * Gets mapping my source ID/Menu link ID.
 *
 * @param array $tree
 *   Tree to process.
 *
 * @return array
 *   Mapping.
 */
function _menu_tree_compare_get_mapping_skeleton(array $tree) {
  // Get visible/accessible items.
  $mapping = array();
  $items = _menu_tree_compare_get_visible_items($tree);
  foreach (array_values($items) as $data) {
    $mlid = $data['link']['mlid'];
    $plid = $data['link']['plid'];
    $source_nid = _menu_tree_compare_get_source_nid($mlid);
    // Map by source NID for easier source_nid matching when comparing left
    // tree to right tree.
    $mapping['source_nid'][$source_nid] = array(
      'parent_source_nid' => _menu_tree_compare_get_source_nid($plid),
      'weight' => $data['link']['weight'],
    );

    $mapping['mlid'][$mlid] = array(
      // HTML ID to use.
      'id' => 'from-' . $mlid . '-' . $source_nid,
      // Source Node ID.
      'source_nid' => $source_nid,
      // Source Node ID of the parent link.
      'parent_source_nid' => _menu_tree_compare_get_source_nid($plid),
      // Weight of this link.
      'weight' => $data['link']['weight'],
    );
  }
  return $mapping;
}

/**
 * Gets the source node ID for a menu link.
 *
 * @param int $mlid
 *   Menu link ID.
 *
 * @return string|int
 *   'None' or the translation node ID or the node ID.
 */
function _menu_tree_compare_get_source_nid($mlid) {
  $node = menu_node_get_node($mlid);
  if (!empty($node->tnid)) {
    return $node->tnid;
  }
  elseif (!empty($node->nid)) {
    return $node->nid;
  }
  return 'none';
}
