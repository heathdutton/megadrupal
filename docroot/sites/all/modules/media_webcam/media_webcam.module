<?php

/**
 * @file media_webcam/media_webcam.module
 * Provides a Webcam video and image capturing widget to Filefield.
 */

/* ***************************************** */
/* INCLUDES                                  */
/* ***************************************** */

// A registry of variable_get defaults.
include_once('includes/media_webcam.variables.inc');

/**
 * Implementation of hook_menu().
 */
function media_webcam_menu() {
  return array(
    'admin/settings/media_webcam' => array(
      'title' => 'Media: Webcam',
      'description' => 'Administer the Media: Webcam module.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('media_webcam_settings'),
      'access arguments' => array('administer site configuration'),
      'file' => 'includes/media_webcam.admin.inc',
    ),
  );
}

/**
 *  Implements hook_theme().
 */
function media_webcam_theme($existing, $type, $theme, $path) {
  return array(
    'media_webcam_widget' => array(
      'arguments' => array('element' => array()),
      'file' => 'media_webcam.theme.inc',
      'path' => $path .'/includes/themes',
      'template' => 'media-webcam-widget'
    ),
    'media_webcam_button' => array(
      'arguments' => array('type' => NULL, 'output' => NULL),
      'file' => 'media_webcam.theme.inc',
      'path' => $path .'/includes/themes',
      'template' => 'media-webcam-button'
    ),
  );
}

/**
 * Implementation of hook_widget_info().
 */
function media_webcam_widget_info() {
  return array(
    'media_webcam' => array(
      'label' => t('Webcam Image & Video Capture'),
      'field types' => array('filefield', ),
      'multiple values' => CONTENT_HANDLE_CORE,
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_DEFAULT,
        ),
    ),
  );
}

function media_webcam_widget_settings($op, $widget) {
  switch ($op) {
    case 'form':
      $form = array();
      $form['allow_video'] = array(
        '#type' => 'checkbox',
        '#title' => t('Allow video'),
        '#description' => t('If checked, then this field will allow for webcam video recordings to be saved locally as .flv files.'),
        '#default_value' => $widget['allow_video'],
      );
      $form['allow_snapshot'] = array(
        '#type' => 'checkbox',
        '#title' => t('Allow snapshot'),
        '#description' => t('If checked, then this field will allow for webcam photo snapshots to be saved locally as .jpg files.'),
        '#default_value' => $widget['allow_snapshot'],
      );
      return $form;
    case 'validate':
      break;
    case 'save':
      $columns = array('allow_video', 'allow_snapshot');
      return $columns;
  }
}

/**
 * Implementation of hook_widget().
 */
function media_webcam_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  switch ($field['widget']['type']) {
    case 'media_webcam':
      $element = array(
        '#type' => 'media_webcam_widget',
        '#default_value' => isset($items[$delta]) ? $items[$delta] : NULL,
      );
    break;
  }
  return $element;
}

/**
 * Implementation of FAPI hook_elements().
 *
 * Any FAPI callbacks needed for individual widgets can be declared here,
 * and the element will be passed to those callbacks for processing.
 *
 * Drupal will automatically theme the element using a theme with
 * the same name as the hook_elements key.
 */
function media_webcam_elements() {
  return array(
    'media_webcam_widget' => array(
      '#input' => TRUE,
      '#columns' => array('fid'), '#delta' => 0,
      '#process' => array('media_webcam_widget_element_process'),
      '#element_validate' => array('media_webcam_widget_element_validate'),
    ),
  );
}

function media_webcam_widget_element_validate($element, &$form_state) {
  // @TODO: Anything to validate?
}

/**
 * Process an individual element.
 *
 * Build the form element. When creating a form using FAPI #process,
 * note that $element['#value'] is already set.
 *
 * The $fields array is in $form['#field_info'][$element['#field_name']].
 */
function media_webcam_widget_element_process($element, $edit, &$form_state, $form) {
  $field_key = $element['#columns'][0];
  $field = content_fields($element['#field_name'], $element['#type_name']);

  $form_element = $element['#field_name'] .'_'. $element['#delta'];

  // Save any video that's been uploaded to the Red5 streams folder.
  if ($field['widget']['allow_video'] && $element['#value']['media_webcam_red5']) {
    // Create a new file object.
    $file = new stdClass();

    // Set the filename to the returned value.
    $file->filename = $element['#value']['media_webcam_red5'] .'.flv';
    $file->filemime = file_get_mimetype($file->filename);

    // The full path + filename where the video resides.
    $file->filepath = media_webcam_variable_get('upload_folder') .'/'. $file->filename;

    // Set the destination path and ensure it exists, creating if necessary.
    $path = file_directory_path() .'/'. media_webcam_variable_get('file_directory');
    file_check_directory($path, FILE_CREATE_DIRECTORY);

    // Move the file to the new location.
    if (file_move($file, $path)) {
      global $user;
      // Set the other file properties and record the file object.
      $file->uid = $user->uid;
      $file->status = FILE_STATUS_TEMPORARY;
      $file->timestamp = time();
      $file->filesize = filesize($file->filepath);
      drupal_write_record('files', $file);

      if ($file->fid) {
        // Set the element value to the new fid.
        $element['#value'] = $element['#default_value'] = (array)$file;

        // Ensure the value is saved to filefield.
        $element['#post'][$element['#field_name']][$element['#delta']][$field_key] = $file->fid;

        // Blank out the red5 app value, since we've moved the file.
        $element['#post'][$element['#field_name']][$element['#delta']]['media_webcam_red5'] = '';
        $element['#post'][$element['#field_name']][$element['#delta']]['media_webcam_snap'] = '';
      }
      else {
        form_set_error($form_element, t('There was a problem recording your video. Please try again, or contact the site administrator if you still have an issue.'));
      }
    }
  }
  elseif ($field['widget']['allow_snapshot'] && $element['#value']['media_webcam_snap']) {
    // Save and record the file.
    $file = media_webcam_save_image($element['#value']['media_webcam_snap'], $form_element);
    if ($file->fid) {
      // Set the element value to the new fid.
      $element['#value'] = $element['#default_value'] = (array)$file;

      // Ensure the value is saved to filefield.
      $element['#post'][$element['#field_name']][$element['#delta']][$field_key] = $file->fid;

      // Blank out the red5 app value, since we've moved the file.
      $element['#post'][$element['#field_name']][$element['#delta']]['media_webcam_red5'] = '';
      $element['#post'][$element['#field_name']][$element['#delta']]['media_webcam_snap'] = '';
    }
  }

  $element['#attributes']['id'] = $element['#id'] .'-ahah-wrapper';
  $element['#prefix'] = '<div '. drupal_attributes($element['#attributes']) .'>';
  $element['#suffix'] = '</div>';
  $element[$field_key] = array(
    '#type' => 'value',
    '#value' => isset($element['#default_value']) ? $element['#default_value']['fid'] : '',
    '#attributes' => array(
      'class' => 'media-webcam-'. $field_key,
    ),
    // The following values were set by the content module and need
    // to be passed down to the nested element.
    '#title' => $element['#title'],
    '#required' => $element['#required'],
    '#description' => $element['#description'],
    '#field_name' => $element['#field_name'],
    '#type_name' => $element['#type_name'],
    '#delta' => $element['#delta'],
    '#columns' => $element['#columns'],
  );
  if ($field['widget']['allow_video']) {
    $element['media_webcam_red5'] = array(
      '#type' => 'hidden',
      '#attributes' => array(
        'class' => 'media-webcam-red5',
      ),
    );
  }
  if ($field['widget']['allow_snapshot']) {
    $element['media_webcam_snap'] = array(
      '#type' => 'hidden',
      '#attributes' => array(
        'class' => 'media-webcam-snap-textarea',
      ),
    );
  }
  module_load_include('inc', 'media_webcam', 'includes/themes/media_webcam.theme');
  drupal_add_js(array('mediaWebcam' => array('element' => array($element['#attributes']['id']))), 'setting');

  return $element;
}

function media_webcam_save_image($image, $form_element) {
  $image = str_replace('data:image/jpeg;base64,', '', $image);
  if (!$image) {
    form_set_error($form_element, t('There was a problem uploading your snapshot. Please try again, or contact the site administrator.'));
    return FALSE;
  }
  else {
    $base64 = base64_decode($image, TRUE);
    if ($base64) {
      if ($directory = media_webcam_variable_get('file_directory')) {
        // Create the opalcanvas folder within the files folder.
        $path = file_create_path($directory);
        file_check_directory($path, FILE_CREATE_DIRECTORY);
      }
      // Begin building file object.
      $file = new stdClass();

      // Attempt to save the image.
      if ($file->filepath = file_save_data($base64, $path .'/media-webcam-image-'. time() .'.jpg')) {
        global $user;
        $file->uid = $user->uid;
        $file->filename = basename($file->filepath);
        $file->filemime = file_get_mimetype($file->filename);
        $file->source = 'media_webcam_save_image';
        $file->destination = $file->filepath;
        $file->filesize = strlen($image);
        $file->timestamp = time();

        // Note the file is currently saved as a temporary file.
        drupal_write_record('files', $file);
        return $file;
      }
      else {
        form_set_error($form_element, t('There was an error when attempting to save your snapshot. Please try again, or contact the site administrator.'));
        return FALSE;
      }
    }
    else {
      form_set_error($form_element, t('The snapshot image data was corrupted. Please try again, or contact the site administrator.'));
      return FALSE;
    }
  }
}

/**
 * Add the Media: Webcam JavaScript settings and basic JS & CSS files.
 */
function media_webcam_add_js($settings = array()) {
  static $added;

  // Only add the base files & settings once.
  if (!isset($added)) {
    $path = drupal_get_path('module', 'media_webcam');

    // The path to the Webcam Uploader flash.
    $webcamPath = url($path .'/src/media_webcam/bin/webcam.swf');
    // @TODO: Use the library path for this instead, from swfojbject.
    $expressInstallPath = url($path .'/src/media_webcam/bin/expressInstall.swf');

    // Add the base JS settings.
    $base_settings = array(
      'mediaWebcam' => array(
        'webcamPath' => $webcamPath,
        'expressInstallPath' => $expressInstallPath,
      ),
    );
    drupal_add_js($base_settings, 'setting');

    // Add the necessary files.
    // @TODO: Use the library path for swfobject instead.
    drupal_add_js($path .'/src/media_webcam/bin/js/swfobject.js');
    drupal_add_js($path .'/includes/themes/js/media_webcam.js');
    drupal_add_css($path .'/includes/themes/css/media_webcam.css');

    $added = TRUE;
  }

  if (!empty($settings)) {
    drupal_add_js($settings, 'setting');
  }
}
