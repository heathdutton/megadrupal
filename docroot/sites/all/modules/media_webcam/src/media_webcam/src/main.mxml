<?xml version="1.0" encoding="utf-8"?>
<s:Application name="MediaWebcamVideoUploader"
		
		xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:mx="library://ns.adobe.com/flex/mx"
		xmlns:s="library://ns.adobe.com/flex/spark"
		>
    
	<fx:Script>
        <![CDATA[
			import flash.events.NetStatusEvent;
			import flash.media.Microphone;
            import mx.controls.Alert;
			import mx.core.UIComponent;
			import flash.media.Camera;
			import mx.utils.Base64Encoder;
			
			import flash.events.MouseEvent;
			
			import flash.display.Bitmap;
			import flash.display.BitmapData;
			
			import flash.net.NetStream;
			import flash.net.NetConnection;
			import flash.net.Responder;
			import flash.external.*;
			
			import mx.core.FlexGlobals;
			
			import mx.graphics.ImageSnapshot;
			import mx.graphics.codec.JPEGEncoder;
			
			import flash.utils.Timer;
			import flash.events.TimerEvent;
			import flash.events.Event;
			
						
			private var cam:Camera;
			private var mic:Microphone;
			
			private var container:UIComponent;
			
			private var myNC:NetConnection = new NetConnection();
			private var myNS:NetStream;
			
			private var flashId:String;
			private var external_width:int;
			private var external_height:int;
			private var connect_url:String;
			private var base_filename:String;
			private var max_duration:int;
			
			private var filename:String;
			private var timer:Timer;
			
			private var textfield:String;
			private var stopTimerFunction:String;
			private var myTimer:Timer;
			
			private var bitmap:Bitmap;
			
	        public function durationTimer():void {
				myTimer = new Timer(max_duration, 1);
				myTimer.addEventListener("timer", timerHandler);
				myTimer.start();
			}

			public function timerHandler(event:TimerEvent):void {
				stopClick();
			}

			
			private function myInitialize():void {
				// Store the flash params.
				flashId = FlexGlobals.topLevelApplication.parameters.id;
				external_width = FlexGlobals.topLevelApplication.parameters.width;
				external_height = FlexGlobals.topLevelApplication.parameters.height;
				connect_url = FlexGlobals.topLevelApplication.parameters.connectUrl;
				base_filename = FlexGlobals.topLevelApplication.parameters.baseFilename;
				max_duration = FlexGlobals.topLevelApplication.parameters.maxDuration;
				textfield = FlexGlobals.topLevelApplication.parameters.textfield;
				stopTimerFunction = FlexGlobals.topLevelApplication.parameters.stopTimerFunction;
				
				if (ExternalInterface.available) {
					ExternalInterface.addCallback("recordClick", recordClick);
					ExternalInterface.addCallback("stopClick", stopClick);
					ExternalInterface.addCallback("playClick", playClick);
					ExternalInterface.addCallback("snapImage", snapImage);
				}
				
				// Resize the video.
				videoDisplay.width = external_width;
				videoDisplay.height = external_height;
				videoDisplay.setActualSize(videoDisplay.width, videoDisplay.height);
								
				cam = Camera.getCamera();
				if (cam) {
					cam.setMode(external_width, external_height, 15);
					videoDisplay.attachCamera(cam);
				}
				mic = Microphone.getMicrophone();
			}
						
			private function handleNetStatus(e:NetStatusEvent):void {
				trace(e.info.code);
				switch(e.info.code) {
					case "NetConnection.Connect.Success":
						trace('success!');
						myNS = new NetStream(myNC);
						myNS.attachCamera(cam);
						myNS.attachAudio(mic);
						
						var date:Date = new Date();
						filename = base_filename + '-' + dateFormatter.format(date);
						myNS.publish(filename, "record");
						break;
					default:
						trace('failure...');
						break;
				}
			}

			private function startRecording():void {
				try {
					myNC.objectEncoding = ObjectEncoding.AMF3;
					myNC.connect(connect_url);
					
					myNC.addEventListener(NetStatusEvent.NET_STATUS, handleNetStatus);
				}
				catch (e:ArgumentError) {
					Alert.show(e.getStackTrace());
					trace(e.getStackTrace());
				}

				// Start the timer.
				durationTimer();

			}
						
			private function snapImage():String {
				var bitmapData:BitmapData = new BitmapData(videoDisplay.width, videoDisplay.height);

				bitmap = new Bitmap(bitmapData);
				
				bitmapData.draw(videoDisplay);
				
				// Display our new snapshot.
				var container:UIComponent = new UIComponent();
				addElement( container );
				container.addChild( bitmap );
				
				// Hide the video now.
				videoDisplay.visible = false;
				bitmap.visible = true;

				var b64:Base64Encoder = new Base64Encoder();
				var encode:JPEGEncoder = new JPEGEncoder(100);
				var ba:ByteArray = encode.encode(bitmapData);
				b64.encodeBytes(ba);
				return "data:image/jpeg;base64," + b64.toString();
			}
 
            private function recordClick():void {
				if (!cam) {
					Alert.show("No camera is installed.");
				} 
				else {
					startRecording();
				}
            }
			private function stopClick():String {
				// close the netStream object
				myNS.close();
				
				// clear the video container
				videoDisplay.attachCamera(null);
				
				myTimer.stop();
				if (ExternalInterface.available) {
					ExternalInterface.call(stopTimerFunction, textfield, filename);
				}
				
				// Return the final filename for the benefit of js.
				return filename;
			}
			
			private function playClick(): void {
				videoDisplay.source = connect_url + '/' + filename + '.flv';
				videoDisplay.play();
			}
        ]]>
    </fx:Script>
	
	<fx:Declarations>
        <mx:DateFormatter id="dateFormatter" formatString="YYYYMMDDJNNSSQQQ"/>
    </fx:Declarations>

		<mx:VideoDisplay id="videoDisplay" creationComplete="myInitialize();" />
</s:Application>