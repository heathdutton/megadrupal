<?php
/**
 * @file
 * The brain of the Weather.com.au module.
 */

require_once(drupal_get_path('module', 'weathercomau') . '/lib/WCAFeed.php');

/**
 * Implements hook_permission().
 */
function weathercomau_permission() {
  return array(
    'administer weathercomau' => array(
      'title' => t('Administer Weather.com.au'),
      'description' => t('Configure settings for Weather.com.au.'),
    ),
    'view weathercomau widgets' => array(
      'title' => t('View Weather.com.au widgets'),
      'description' => t('View Weather.com.au widgets.'),
    ),
  );
}


/**
 * Implements hook_menu().
 */
function weathercomau_menu() {
  $items = array();

  $items['admin/config/services/weathercomau'] = array(
    'title' => 'Weather.com.au',
    'description' => 'Configure the Weather.com.au settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('weathercomau_config_form'),
    'access arguments' => array('administer weathercomau'),
    'file' => 'weathercomau.admin.inc',
  );

  return $items;
}


/**
 * Implements hook_theme().
 */
function weathercomau_theme($existing, $type, $theme, $path) {
  return array(
    'weathercomau_widget_block' => array(
      'variables' => array(
        'block_id' => '',
        'block_settings' => array(),
      ),
      'file' => 'weathercomau.theme.inc',
      'path' => $path . '/theme',
      'template' => 'weathercomau-widget-block',
    ),
    'weathercomau_current_conditions' => array(
      'variables' => array(
        'title' => '',
        'con' => array(),
      ),
      'file' => 'weathercomau.theme.inc',
      'path' => $path . '/theme',
      'template' => 'weathercomau-current-conditions',
    ),
    'weathercomau_forecast' => array(
      'variables' => array(
        'title' => '',
        'forecasts' => '',
      ),
      'file' => 'weathercomau.theme.inc',
      'path' => $path . '/theme',
      'template' => 'weathercomau-forecast',
    ),
    'weathercomau_forecast_day' => array(
      'variables' => array(
        'forecast' => array(),
      ),
      'file' => 'weathercomau.theme.inc',
      'path' => $path . '/theme',
      'template' => 'weathercomau-forecast-day',
    ),
  );
}


/**
 * Implements hook_block_info().
 */
function weathercomau_block_info() {
  $blocks = array();

  $num_widgets = weathercomau_variable_get('num_widgets');
  for ($i = 1; $i <= $num_widgets; $i++) {
    $blocks['widget-' . $i] = array(
      'info' => t('Weather.com.au widget @number', array(
        '@number' => $i,
      )),
      'cache' => DRUPAL_NO_CACHE,
    );
  }

  return $blocks;
}


/**
 * Implements hook_block_configure().
 */
function weathercomau_block_configure($delta = '') {
  $form = array();

  if ('widget' == substr($delta, 0, 6)) {
    $block_id = weathercomau_get_block_id($delta);
    $block_settings = weathercomau_get_block_settings($delta);

    $form['weathercomau_location'] = array(
      '#type' => 'fieldset',
      '#title' => t('Weather.com.au location settings'),
    );

    $form['weathercomau_location']['weathercomau_' . $block_id . '_block_state'] = array(
      '#type' => 'textfield',
      '#title' => t('State'),
      '#default_value' => isset($block_settings['state']) ? $block_settings['state'] : '',
      '#required' => TRUE,
    );

    $form['weathercomau_location']['weathercomau_' . $block_id . '_block_city'] = array(
      '#type' => 'textfield',
      '#title' => t('City'),
      '#default_value' => isset($block_settings['city']) ? $block_settings['city'] : '',
      '#required' => TRUE,
    );

    $form['weathercomau_display'] = array(
      '#type' => 'fieldset',
      '#title' => t('Weather.com.au display settings'),
    );

    $form['weathercomau_display']['weathercomau_' . $block_id . '_block_days'] = array(
      '#type' => 'select',
      '#title' => t('Show forecast for the next'),
      '#options' => array(
        '0' => '- None -',
        '1' => 'Day',
        '2' => 'Two days',
        '3' => 'Three days',
      ),
      '#default_value' => isset($block_settings['days']) ? $block_settings['days'] : '0',
    );

    $form['weathercomau_display']['weathercomau_' . $block_id . '_block_current'] = array(
      '#type' => 'checkbox',
      '#title' => t('Show current conditions?'),
      '#default_value' => isset($block_settings['current']) ? $block_settings['current'] : '',
    );
  }

  return $form;
}


/**
 * Implements hook_block_save().
 */
function weathercomau_block_save($delta = '', $edit = array()) {
  if ('widget' == substr($delta, 0, 6)) {
    $block_id = weathercomau_get_block_id($delta);
    $block_settings = array(
      'state' => $edit['weathercomau_' . $block_id . '_block_state'],
      'city' => $edit['weathercomau_' . $block_id . '_block_city'],
      'days' => $edit['weathercomau_' . $block_id . '_block_days'],
      'current' => $edit['weathercomau_' . $block_id . '_block_current'],
    );
    weathercomau_set_block_settings($delta, $block_settings);
  }
}


/**
 * Implements hook_block_view().
 */
function weathercomau_block_view($delta = '') {
  $block = array();

  if ('widget' == substr($delta, 0, 6)) {
    if (user_access('view weathercomau widgets')) {
      $block_id = weathercomau_get_block_id($delta);
      $block_settings = weathercomau_get_block_settings($delta);

      if ($block_settings) {
        $block['subject'] = t('@city @state Weather', array(
          '@state' => $block_settings['state'],
          '@city' => $block_settings['city'],
        ));

        $block['content'] = array(
          '#theme' => 'weathercomau_widget_block',
          '#block_id' => $block_id,
          '#block_settings' => $block_settings,
        );
      }
    }
  }

  return $block;
}


/**
 * Normalize a block delta for a Weathercomau block.
 *
 * @param string $delta
 *    The block's delta.
 *
 * @return string
 *    A normalized delta.
 */
function weathercomau_get_block_id($delta) {
  return strtolower(str_replace('-', '_', $delta));
}


/**
 * Retrieve settings for a Weathercomau block.
 *
 * @param string $delta
 *    The block's delta.
 *
 * @return array
 *    An array of settings.
 */
function weathercomau_get_block_settings($delta) {
  $block_settings = array();

  $block_id = weathercomau_get_block_id($delta);
  $blocks = weathercomau_variable_get('blocks');

  if (isset($blocks[$block_id])) {
    $block_settings = $blocks[$block_id];
  }

  return $block_settings;
}


/**
 * Set settings for a Weathercomau block.
 *
 * @param string $delta
 *    The block's delta.
 * @param array $settings
 *    The block's settings.
 */
function weathercomau_set_block_settings($delta, $settings) {
  $block_id = weathercomau_get_block_id($delta);
  $blocks = weathercomau_variable_get('blocks');
  $blocks[$block_id] = $settings;
  weathercomau_variable_set('blocks', $blocks);
}


/**
 * Helper that fetches variables for the Weather.com.au module.
 *
 * @param string $name
 *     The variable name.
 *
 * @return mixed
 */
function weathercomau_variable_get($name) {
  switch ($name) {
    case 'blocks':
      $default = array();
      break;

    case 'cache_lifetime':
      $default = 3600;
      break;

    case 'humidity_unit':
      $default = '%';
      break;

    case 'num_widgets':
      $default = 1;
      break;

    case 'pressure_unit':
      $default = 'hpa';
      break;

    case 'rainfall_unit':
      $default = 'mm';
      break;

    case 'temperature_unit':
      $default = 'celsius';
      break;

    case 'windspeed_unit':
      $default = 'kmh';
      break;

    default:
      $default = '';
  }

  return variable_get('weathercomau_' . $name, $default);
}


/**
 * Helper that saves variables for the Weather.com.au module.
 *
 * @param string $name
 *    The variable name.
 * @param mixed $value
 *    The variable value.
 *
 * @return mixed
 */
function weathercomau_variable_set($name, $value) {
  variable_set('weathercomau_' . $name, $value);
  return $value;
}


/**
 * Helper that returns the cache lifetime options.
 */
function weathercomau_cache_lifetime_options() {
  return array(
    900 => '15 minutes',
    1800 => '30 minutes',
    3600 => '1 hour',
    10800 => '3 hours',
    21600 => '6 hours',
    43200 => '12 hours',
    86400 => '24 hours',
  );
}
