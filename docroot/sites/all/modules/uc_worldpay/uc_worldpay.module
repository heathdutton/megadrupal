<?php
/**
 * @file
 * Integrates WorldPay's redirected payment service with Ubercart.
 */

/**
 * Menu entries for WorldPay module.
 * Implements hook_menu().
 * 
 * @return array menu entries
 */
function uc_worldpay_menu() {
  $items['cart/worldpay/complete'] = array(
    'title' => 'Order complete',
    'page callback' => 'uc_worldpay_complete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/store/orders/%uc_order/worldpay'] = array(
    'title' => 'WorldPay',
    'page callback' => 'uc_worldpay_getLog',
    'page arguments' => array(3),
    'access arguments' => array('view all orders'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 7,
  );
  $items['admin/store/settings/worldpay'] = array(
    'title' => 'WorldPay configuration',
    'description' => 'Manages WorldPay merchant accounts',
    'page callback' => 'uc_worldpay_configure_methods',
    'access arguments' => array('configure worldpay settings'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'uc_worldpay.admin.inc',
  );
  $items['admin/store/settings/worldpay/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'uc_worldpay.admin.inc',
    'weight' => -10,
  );
  $items['admin/store/settings/worldpay/add'] = array(
    'title' => 'Add new payment method',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_worldpay_add_payment_method_form'),
    'access arguments' => array('configure worldpay settings'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'uc_worldpay.admin.inc',
    'weight' => 5,
  );
  $items['admin/store/settings/worldpay/%uc_worldpay_payment_method/edit'] = array(
    'title' => 'Edit payment method',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_worldpay_edit_payment_method_form', 4),
    'access arguments' => array('configure worldpay settings'),
    'type' => MENU_CALLBACK,
    'file' => 'uc_worldpay.admin.inc',
  );
  $items['admin/store/settings/worldpay/%uc_worldpay_payment_method/delete'] = array(
    'title' => 'Delete payment method',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_worldpay_delete_payment_method_form', 4),
    'access arguments' => array('configure worldpay settings'),
    'type' => MENU_CALLBACK,
    'file' => 'uc_worldpay.admin.inc',
  );
  return $items;
}

/**
 * Menu load handler for payment method.
 */
function uc_worldpay_payment_method_load($arg) {
  $methods = variable_get('uc_worldpay_configured_payment_methods', array('default' => t('Default')));
  if (in_array($arg, array_keys($methods))) return $arg;
  return FALSE;
}

/**
 * Implements hook_permissions().
 */
function uc_worldpay_permissions() {
  return array(
    'configure worldpay settings' => array(
      'title' => t('Configure WorldPay settings'),
      'description' => t('Set up additional WorldPay payment methods.'),
    ),
  );
}

/**
 * Implements hook_uc_payment_method().
 */
function uc_worldpay_uc_payment_method() {
  $methods = array();
  $payment_methods = variable_get('uc_worldpay_configured_payment_methods', array('default' => t('Default')));
  foreach ($payment_methods as $id => $method) {
    $methods[] = array(
      'id' => 'worldpay_'. $id,
      'name' => t('WorldPay - !method', array('!method' => $method)),
      'title' => theme('uc_worldpay_cards', array('worldpay_'. $id)),
      'desc' => t('Redirect to WorldPay to pay by credit card.'),
      'callback' => 'uc_payment_method_worldpay',
      'weight' => 3,
      'checkout' => TRUE,
      'no_gateway' => TRUE,
    );
  }
  return $methods;
}

/**
 * Returns HTML for the payment options.
 *
 * @param array $args arguments
 * @ingroup themeable
 */
function theme_uc_worldpay_cards($args) {
  $id = $args[0];
  $path = drupal_get_path('module', 'uc_worldpay');
  drupal_add_css($path . '/css/uc_worldpay.css');
  $title = variable_get('uc_worldpay_method_title', t('Payments powered by WorldPay'));
  $output = t('Credit card') . ' ';

  $enabled_payment_methods = variable_get('uc_worldpay_'. $id .'_payment_methods', array('visa', 'visa-electron', 'mastercard', 'masterpass', 'maestro'));
  foreach ($enabled_payment_methods as $method) {
    $output .= theme('image', array('path' => $path . '/images/' . $method . '.gif', 'alt' => array('class' => 'uc-worldpay-card-type')));
  }
  $output .= '&nbsp;&nbsp;&nbsp;' . theme('image', array('path' => $path . '/images/worldpay.gif', 'alt' => $title, 'width' => '139', 'height' => '33', 'attributes' => array('class' => 'uc-worldpay-worldpay-logo')));

  return $output;
}

/**
 * Payment method settings.
 */
function uc_payment_method_worldpay($op, &$order, $form = NULL, &$form_state = NULL) {
  switch ($op) {
    case 'cart-process':
      $_SESSION['pay_method'] = $form_state['values']['panes']['payment']['payment_method'];
      break;

    case 'settings':
      if (isset($form_state['build_info']['args'][0])) {
        $method = $form_state['build_info']['args'][0];
        // Setting array_filter filters the array removing items where the value
        // is either '', NULL or FALSE.
        // @todo Keep an eye on issues such as http://drupal.org/node/315176
        $form['array_filter'] = array(
          '#type' => 'value',
          '#value' => TRUE,
        );
        $form['help_text']['worldpay_settings'] = array(
          '#type' => 'item',
          '#prefix' => '<div class="help">',
          '#markup' => t('<h4><strong>Installation instructions</strong></h4>
            <p>For this module to work properly you must configure a few specific options in your WorldPay account under <em>Installation Administration</em> settings:</p>
            <ul><li><strong>Payment Response URL</strong> should be set to: %response_url</li>
            <li><strong>Payment Response enabled?</strong> should be <em>enabled</em></li>
            <li><strong>Enable the Shopper Response</strong> should be <em>enabled</em> to get the Ubercart response page (optional)',
            array('%response_url' => url('https://www.example.com/cart/worldpay/complete'))),
          '#suffix' => '</div>',
        );
        $form['uc_worldpay_'. $method .'_sid'] = array(
          '#type' => 'textfield',
          '#title' => t('Installation ID'),
          '#default_value' => variable_get('uc_worldpay_'. $method .'_sid', ''),
          '#size' => 16,
        );
        $form['uc_worldpay_'. $method .'_merchant_code'] = array(
          '#type' => 'textfield',
          '#title' => t('Merchant code'),
          '#default_value' => variable_get('uc_worldpay_'. $method .'_merchant_code', ''),
          '#size' => 16,
        );
        $form['uc_worldpay_'. $method .'_debug'] = array(
          '#type' => 'select',
          '#title' => t('Debug mode'),
          '#multiple' => FALSE,
          '#options' => array(
            'log' => t('Log'),
            'screen' => t('Screen'),
            'both' => t('Both'),
            'none' => t('None'),
          ),
          '#default_value' => variable_get('uc_worldpay_'. $method .'_debug', 'log'),
        );
        $form['uc_worldpay_'. $method .'_checkout_button'] = array(
          '#type' => 'textfield',
          '#title' => t('Order review submit button text'),
          '#description' => t('Alter the text of the submit button on the review order page.'),
          '#default_value' => variable_get('uc_worldpay_'. $method .'_checkout_button', t('Submit Order')),
        );
        $form['payment_methods'] = array(
          '#type' => 'fieldset',
          '#title' => t('Payment methods'),
          '#description' => t('Select the payment methods to display in checkout.'),
          '#collapsible' => TRUE,
          '#collapsed' => TRUE,
        );
        $form['payment_methods']['uc_worldpay_'. $method .'_payment_methods'] = array(
          '#type' => 'checkboxes',
          '#default_value' => variable_get('uc_worldpay_'. $method .'_payment_methods', array('visa', 'visa-electron', 'mastercard', 'masterpass', 'maestro')),
          '#options' => _uc_worldpay_payment_card_types(),
        );
        $form['payment_parameters'] = array(
          '#type' => 'fieldset',
          '#title' => t('Payment parameters'),
          '#description' => t('These options control what parameters are sent to WorldPay when the customer submits the order.'),
          '#collapsible' => TRUE,
          '#collapsed' => TRUE,
        );
        $form['payment_parameters']['uc_worldpay_'. $method .'_test'] = array(
          '#type' => 'checkbox',
          '#title' => t('Enable test mode'),
          '#default_value' => variable_get('uc_worldpay_'. $method .'_test', TRUE),
        );
        $form['payment_parameters']['uc_worldpay_'. $method .'_test_result'] = array(
          '#type' => 'select',
          '#title' => t('Test mode result'),
          '#description' => t('Specify the required transaction result when working in test mode.'),
          '#default_value' => variable_get('uc_worldpay_'. $method .'_test_result', 'AUTHORISED'),
          '#options' => array(
            'AUTHORISED' => 'Authorised',
            'REFUSED' => 'Refused',
            'ERROR' => 'Error',
          ),
          // If #disabled => TRUE is used, #states does not work properly.
          '#attributes' => (!variable_get('uc_worldpay_'. $method .'_test', TRUE)) ? array('disabled' => '') : array(),
          '#states' => array(
            'enabled' => array(
              ':input[name="uc_worldpay_'. $method .'_test"]' => array('checked' => TRUE),
            ),
          ),
        );
        $form['payment_parameters']['uc_worldpay_'. $method .'_md5'] = array(
          '#type' => 'textfield',
          '#title' => t('MD5 secret word'),
          '#description' => t('Secure your WorldPay account so only your server can send transactions to WorldPay. N.B. This needs to be configured on your WorldPay account first.'),
          '#size' => 20,
          '#maxlength' => 255,
          '#default_value' => variable_get('uc_worldpay_'. $method .'_md5', ''),
        );
        $form['payment_parameters']['uc_worldpay_'. $method .'_callbackPW'] = array(
          '#type' => 'textfield',
          '#title' => t('Payment response password'),
          '#description' => t('Verifies that the payment response really comes from WorldPay. N.B. This needs to be configured on your WorldPay account first.'),
          '#size' => 20,
          '#maxlength' => 255,
          '#default_value' => variable_get('uc_worldpay_'. $method .'_callbackPW', ''),
        );
        $form['payment_parameters']['uc_worldpay_'. $method .'_callbackURL'] = array(
          '#type' => 'textfield',
          '#title' => t('Callback URL'),
          '#description' => t('Use only if you have enabled dynamic callback URLs in your WorldPay account (required if multiple servers send payments to the same installation ID).')
            . ' ' . t('Please enter "&lt;wpdisplay item=MC_callback&gt;" as payment response URL in your merchant interface and the Drupal completion page here, e.g. "https://www.example.com/cart/worldpay/complete".'),
          '#size' => 80,
          '#maxlength' => 1024,
          '#default_value' => variable_get('uc_worldpay_'. $method .'_callbackURL', ''),
        );
        $form['payment_parameters']['uc_worldpay_'. $method .'_desc'] = array(
          '#type' => 'checkbox',
          '#title' => t('Submit the cart contents as the order description'),
          '#description' => t('Setting this option to true will display the cart contents on the payment page. This could help to reassure customers of exactly what they are paying for.'),
          '#default_value' => variable_get('uc_worldpay_'. $method .'_desc', FALSE),
        );
        $form['payment_parameters']['uc_worldpay_'. $method .'_cancel_order'] = array(
          '#type' => 'checkbox',
          '#title' => t('Cancel order in Ubercart if cancelled during payment'),
          '#description' => t("If the customer cancels out of payment processing whilst on the WorldPay server, remove the items from their cart and cancel their order in Ubercart. N.B. This option is greyed out if it's not available."),
          '#default_value' => variable_get('uc_worldpay_'. $method .'_cancel_order', FALSE),
        );
        $form['payment_parameters']['uc_worldpay_'. $method .'_edit_contact'] = array(
          '#type' => 'checkbox',
          '#title' => t('Enable editing of contact details on the payment page.'),
          '#default_value' => variable_get('uc_worldpay_'. $method .'_edit_contact', TRUE),
        );
        $form['payment_parameters']['uc_worldpay_'. $method .'_show_contact'] = array(
          '#type' => 'checkbox',
          '#title' => t('Show the contact details on the payment page.'),
          '#default_value' => variable_get('uc_worldpay_'. $method .'_show_contact', TRUE),
          '#disabled' => variable_get('uc_worldpay_'. $method .'_show_contact', TRUE),
        );
        $form['payment_parameters']['uc_worldpay_'. $method .'_lang'] = array(
          '#type' => 'textfield',
          '#title' => t('Payment page language'),
          '#description' => t('Specify the payment page language. Enter a 2-character ISO 639 language code, with optional regionalization using 2-character country code separated by hyphen. For example "en-GB" specifies UK English.'),
          '#size' => 8,
          '#maxlength' => 6,
          '#default_value' => variable_get('uc_worldpay_'. $method .'_lang', 'en-GB'),
        );
        $form['payment_urls'] = array(
          '#type' => 'fieldset',
          '#title' => t('Payment URLs'),
          '#collapsible' => TRUE,
          '#collapsed' => TRUE,
        );
        $form['payment_urls']['uc_worldpay_'. $method .'_test_url'] = array(
          '#type' => 'textfield',
          '#title' => t('Test URL'),
          '#description' => t('The WorldPay test environment URL.'),
          '#default_value' => variable_get('uc_worldpay_'. $method .'_test_url', 'https://secure-test.worldpay.com/wcc/purchase'),
          '#element_validate' => array('uc_worldpay_valid_url'),
          '#required' => TRUE,
        );
        $form['payment_urls']['uc_worldpay_'. $method .'_live_url'] = array(
          '#type' => 'textfield',
          '#title' => t('Live URL'),
          '#description' => t('The WorldPay live environment URL.'),
          '#default_value' => variable_get('uc_worldpay_'. $method .'_live_url', 'https://secure.worldpay.com/wcc/purchase'),
          '#element_validate' => array('uc_worldpay_valid_url'),
          '#required' => TRUE,
        );
      }
      return $form;
  }
}

/**
 * Implements hook_form_alter().
 */
function uc_worldpay_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'uc_cart_checkout_review_form' && ($order_id = intval($_SESSION['cart_order'])) > 0) {
    $order = uc_order_load($order_id);
    if (strpos($order->payment_method, 'worldpay') !== FALSE) {
      $form['actions']['submit']['#access'] = FALSE;
      $form['#prefix'] = '<table id="uc-worldpay-review-table"><tr><td>';
      // @TODO This is hackish. Consider using 'redirect' key of $methods in hook_uc_payment_method().
      // See uc_2checkout.module.
      $uc_worldpay_form = drupal_get_form('uc_worldpay_form', $order);
      $form['#suffix'] = '</td><td>' . drupal_render($uc_worldpay_form) . '</td></tr></table>';
    }
  }
}

/**
 * Processes the payment and completes the order.
 */
function uc_worldpay_complete($cart_id = 0) {
  $cart_id = $_POST['cartId'];
  $amount = $_POST['amount'];
  $trans_status = $_POST['transStatus'];
  $card_type = isset($_POST['cardType']) ? $_POST['cardType'] : null;
  $uc_cart_id = $_POST['M_uc_cart_id'];
  global $base_url;

  $base = array(
    '#tag' => 'base',
    '#attributes' => array(
      'href' => $base_url,
    ),
  );
  $refresh = array(
    '#tag' => 'meta',
    '#attributes' => array(
      'http-equiv' => 'refresh',
      'content' => '3;url="' . url('/cart/checkout/complete', array('absolute' => TRUE)) . '"',
    ),
  );
  drupal_add_html_head($base, 'uc_worldpay_base');

  // Stop orders being processed for orders from different hosts.
  if ($_SERVER['HTTP_HOST'] != $_POST['M_http_host']) {
    return t('There was an error with the transaction. The host did not match.');
  }

  // Log a new order notification to watchdog.
  $log_entry = t('New order notification for order !order_id.', array('!order_id' => $cart_id));
  $message = t('Returned parameters: <pre>!post</pre>', array('!post' => print_r($_POST, TRUE)));
  $output = '';

  // If debug mode is set appropriately, append the returned parameters to the
  // log entry.
  $debug = variable_get('uc_worldpay_debug', 'log');
  if ($debug == 'log' || $debug == 'both') {
    $log_entry .= '<br/>' . $message;
  }
  watchdog('uc_worldpay', $log_entry);

  // If debug mode is set appropriately, print the returned parameters to the
  // screen.
  if ($debug == 'screen' || $debug == 'both') {
    $output .= $message;
  }

  // If the order could not be loaded print an error message and exit.
  if (!$order = uc_order_load($cart_id)) {
    return t('The order could not be found and this transaction cannot continue.');
  }

  // check callback password if specified
  $callbackPW = variable_get('uc_worldpay_'. $order->payment_method .'_callbackPW', '');
  if (!empty($callbackPW) && !($callbackPW == $_POST['callbackPW'])) {
    return t('There was an error with the transaction. The payment response password did not match.');
  }

  // If the status of the order is not 'in_checkout' print an error and exit.
  if (uc_order_status_data($order->order_status, 'state') != 'in_checkout') {
    return t('An error has occurred during payment. Please contact us to ensure your order has been submitted.');
  }

  // We're redirecting to UC's completion page.
  $_SESSION['cart_order'] = $order->order_id;
  $_SESSION['uc_checkout'][$_SESSION['cart_order']]['do_complete'] = TRUE;

  $output .= '<WPDISPLAY ITEM=banner>';
  $output .= '<p>' . t('Please wait while you are redirected to !sitename.', array('!sitename' => variable_get('site_name', ''))) . '</p>';

  $payment_methods = variable_get('uc_worldpay_configured_payment_methods', array('default' => t('Default')));
  $methodID = substr($_POST['M_wp_profile'], strlen('worldpay_'));
  
  // prepare database record
  $paymentRecord = array(
    'order_id'    => $order->order_id,
    'transid'     => $_POST['transId'],
    'cardtype'    => $_POST['cardType'],
    'transtime'   => $_POST['transTime'],
    'transstatus' => $trans_status,
    'profile'     => $payment_methods[$methodID],
  );
  $paymentRecord['futurepayid'] = !empty($_POST['futurePayId']) ? $_POST['futurePayId'] : '';
  $paymentRecord['authamount'] = !empty($_POST['authAmount']) ? $_POST['authAmount'] : '';
  $paymentRecord['authcurrency'] = !empty($_POST['authCurrency']) ? $_POST['authCurrency'] : '';
  $paymentRecord['authmessage'] = !empty($_POST['rawAuthMessage']) ? $_POST['rawAuthMessage'] : '';
  $paymentRecord['authcode'] = !empty($_POST['rawAuthCode']) ? $_POST['rawAuthCode'] : '';
  $paymentRecord['countrymatch'] = !empty($_POST['countryMatch']) ? $_POST['countryMatch'] : '';
  $paymentRecord['avs'] = !empty($_POST['AVS']) ? $_POST['AVS'] : '';
  
  if (is_numeric($amount)) {
    switch ($trans_status) {
      case 'Y':
        $output .= t('Your order is complete and payment has been confirmed.');
        $comment = t('Paid by @type, WorldPay order #@order.', array('@type' => $card_type, '@order' => $cart_id));
        uc_payment_enter($order->order_id, 'WorldPay', $amount, 0, NULL, $comment);

        drupal_write_record('uc_payment_worldpay', $paymentRecord);
        break;

      case 'C':
        drupal_set_title(t('Order cancelled'));
        $output .= t('Your order has been cancelled.');
        $output .= '<p>' . t('If you are not automatically redirected, please <a href="' . url('cart', array('absolute' => TRUE)) . '">click here</a>.') . '</p>';
        drupal_set_message(t('Your order has been cancelled.'));
        uc_order_comment_save($order->order_id, 0, t('Payment cancelled by user.'), 'admin');
        $refresh['#attributes']['content'] = '3;url="' . url('/cart', array('absolute' => TRUE)) . '"';
        drupal_add_html_head($refresh, 'uc_worldpay_base');

        if (variable_get('uc_worldpay_'. $order->payment_method .'_cancel_order', FALSE)) {
          uc_order_update_status($order->order_id, 'canceled');
          uc_cart_empty($uc_cart_id);
        }

        drupal_write_record('uc_payment_worldpay', $paymentRecord);
        return $output;
        break;

      default:
        $output .= t('Your order is pending.');
        drupal_set_message(t('Your order will be processed as soon as your payment clears at WorldPay.'));
        uc_order_comment_save($order->order_id, 0, t('@type payment is pending approval at WorldPay.', array('@type' => $card_type)), 'admin');
        break;
    }
  }

  drupal_add_html_head($refresh, 'uc_worldpay_base');
  $output .= '<p>' . t('If you are not automatically redirected, please <a href="' . url('cart/checkout/complete', array('absolute' => TRUE)) . '">click here</a>.') . '</p>';

  $output = array(
    'output' => array('#markup' => $output),
  );

  return $output;
}

/**
 * Implements hook_theme().
 */
function uc_worldpay_theme() {
  return array(
    'uc_worldpay_cards' => array(
      'variables' => array('method' => null),
    ),
  );
}

/**
 * Prepares and returns the form for POSTing to WorldPay.
 */
function uc_worldpay_form($form, $form_state, $order) {
  $form = array();

  $method = $order->payment_method;

  $country_data = uc_get_country_data(array('country_id' => $order->billing_country));
  $country = $country_data[0]['country_iso_code_2'];

  $cart_contents = uc_cart_get_contents();
  foreach ($cart_contents as $item) {
    $cart_items[] = $item->qty . 'x ' . $item->title;
  }

  $uc_worldpay_name = drupal_substr($order->billing_first_name . ' ' . $order->billing_last_name, 0, 128);

  $data = array(
    'instId' => variable_get('uc_worldpay_'. $method .'_sid', ''),
    'amount' => uc_currency_format($order->order_total, FALSE, FALSE, '.'),
    'cartId' => $order->order_id,
    'currency' => variable_get('uc_currency_code', 'USD'),
    'name' => $uc_worldpay_name,
    'address' => ($order->billing_street1 ? $order->billing_street1 . ',' : "\n")
      . ($order->billing_street2 ? $order->billing_street2 . ',' : "\n")
      . ($order->billing_city ? $order->billing_city : ''),
    'state' => uc_get_zone_code($order->billing_zone),
    'postcode' => $order->billing_postal_code,
    'country' => $country,
    'email' => $order->primary_email,
    'tel' => $order->billing_phone,
    'M_uc_cart_id' => uc_cart_get_id(),
    'M_wp_profile' => $method,
    'lang' => variable_get('uc_worldpay_'. $method .'_lang', 'en-GB'),
    'M_http_host' => $_SERVER['HTTP_HOST'],
  );

  $merchant_code = variable_get('uc_worldpay_'. $method .'_merchant_code', '');
  if (trim($merchant_code) != '') {
    $data['accId1'] = $merchant_code;
  }

  $callbackURL = variable_get('uc_worldpay_'. $method .'_callbackURL', '');
  if (!empty($callbackURL)) {
    $data['MC_callback'] = $callbackURL;
  }

  if (variable_get('uc_worldpay_'. $method .'_test', TRUE)) {
    $data['name'] = variable_get('uc_worldpay_'. $method .'_test_result', 'AUTHORISED');
    $data['testMode'] = '100';
  }

  if (variable_get('uc_worldpay_'. $method .'_desc', FALSE)) {
    $data['desc'] = t("Cart contents: \n!cart", array('!cart' => implode(",\n", $cart_items)));
  }

  if (!variable_get('uc_worldpay_'. $method .'_edit_contact', TRUE)) {
    $data['fixContact'] = '';
  }

  if (!variable_get('uc_worldpay_'. $method .'_show_contact', TRUE)) {
    $data['hideContact'] = '';
  }

  $uc_worldpay_md5 = variable_get('uc_worldpay_'. $method .'_md5', '');
  if (!empty($uc_worldpay_md5)) {
    $data['signatureFields'] = 'instId:currency:cartId:amount';
    $data['signature'] = md5($uc_worldpay_md5 . ':' . $data['instId'] . ':' . $data['currency'] . ':' . $data['cartId'] . ':' . $data['amount']);
  }

  foreach ($data as $name => $value) {
    $form[$name] = array(
      '#type' => 'hidden',
      '#value' => $value,
    );
  }

  $test_server = variable_get('uc_worldpay_'. $method .'_test_url', 'https://secure-test.worldpay.com/wcc/purchase');
  $live_server = variable_get('uc_worldpay_'. $method .'_live_url', 'https://secure.worldpay.com/wcc/purchase');
  $form['#action'] = (variable_get('uc_worldpay_'. $method .'_test', TRUE)) ? $test_server : $live_server;
  $form['submit'] = array(
    '#type' => 'submit',
    '#name' => '',
    '#value' => variable_get('uc_worldpay_'. $method .'_checkout_button', t('Submit Order')),
  );

  $_SESSION['uc_checkout'][$_SESSION['cart_order']]['do_complete'] = TRUE;
  $_SESSION['do_review'] = TRUE;
  return $form;
}

/**
 * Returns the supported payment card types.
 *
 * @return
 *   An array of supported card types.
 */
function _uc_worldpay_payment_card_types() {
  return array(
    'visa' => t('Visa Credit and Debit'),
    'visa-electron' => t('Visa Electron'),
    'mastercard' => t('Mastercard'),
    'masterpass' => t('MasterPass'),
    'maestro' => t('Maestro'),
    'amex' => t('American Express'),
    'jcb' => t('JCB'),
    'diners' => t('Diners'),
    'laser' => t('Laser'),
    'elv' => t('ELV'),
    'paypal' => t('PayPal'),
  );
}

/**
 * Validates a supplied URL using valid_url().
 */
function uc_worldpay_valid_url($element, &$form_state) {
  if ($form_state['values']['op'] == t('Save configuration')) {
    if (isset($form_state['values'][$element['#name']])) {
      if (!valid_url($form_state['values'][$element['#name']], TRUE)) {
        form_set_error($element['#name'], t('The format of the @title appears to be invalid.', array('@title' => $element['#title'])));
      }
    }
  }
}

/**
 * Implements hook_views_api().
 */
function uc_worldpay_views_api() {
  return array(
    'api' => '3.0',
    'path' => drupal_get_path('module', 'uc_worldpay') . '/views',
  );
}

/**
 * Displays the WorldPay order details like transaction ID.
 * Callback function for menu admin/store/orders/%uc_order/worldpay.
 * 
 * @return array HTML code with order details
 */
function uc_worldpay_getLog($order) {
  $result = db_query("SELECT * FROM {uc_payment_worldpay} WHERE order_id = :id", array(':id' => $order->order_id));
  $rows = array();
  foreach ($result as $rowData) {
    if (!empty($rowData->transstatus)) {
      $status = t('unknown');
      switch ($rowData->transstatus) {
        case 'Y':
          $status = t('authorized');
          break;
        case 'C':
          $status = t('cancelled');
          break;
      }
      $rows[] = array(
        t('Status'),
        $status,
      );
    }
    if (!empty($rowData->transid)) {
      $rows[] = array(
        t('Transaction ID'),
        $rowData->transid,
      );
    }
    if (!empty($rowData->futurepayid)) {
      $rows[] = array(
        t('Future pay ID'),
        $rowData->futurepayid,
      );
    }
    if (!empty($rowData->cardtype)) {
      $rows[] = array(
        t('Card type'),
        $rowData->cardtype,
      );
    }
    if (!empty($rowData->authamount)) {
      $rows[] = array(
        t('Amount'),
        $rowData->authamount . ' ' . $rowData->authcurrency,
      );
    }
    if (!empty($rowData->countrymatch)) {
      $countryMatch = t('unknown');
      switch ($rowData->countrymatch) {
        case 'Y':
          $countryMatch = t('yes');
          break;
        case 'N':
          $countryMatch = t('no');
          break;
        case 'B':
          $countryMatch = t('comparison not available');
          break;
        case 'I':
          $countryMatch = t('contact country not supplied');
          break;
        case 'S':
          $countryMatch = t('card issue country unavailable');
          break;
      }
      $rows[] = array(
        t('Country matched'),
        $countryMatch,
      );
    }
    if (!empty($rowData->avs)) {
      $rows[] = array(
        t('AVS'),
        uc_worldpay_getAVSInfo($rowData->avs),
      );
    }
    if (!empty($rowData->authmessage)) {
      $rows[] = array(
        t('Authorization message'),
        $rowData->authmessage,
      );
    }
    if (!empty($rowData->authcode)) {
      $rows[] = array(
        t('Authorization code'),
        $rowData->authcode,
      );
    }
    if (!empty($rowData->transtime)) {
      $rows[] = array(
        t('Timestamp'),
        format_date(floor($rowData->transtime / 1000)),
      );
    }
    if (!empty($rowData->profile)) {
      $rows[] = array(
        t('Payment profile'),
        $rowData->profile,
      );
    }
  }

  $build['log'] = array(
    '#theme' => 'table',
    '#rows' => $rows,
    '#empty' => t('No WorldPay data available for this order.'),
  );

  return $build;
}

/**
 * Returns the AVS result in human readable form.
 * 
 * @param String $avs AVS result code
 */
function uc_worldpay_getAVSInfo($avs) {
  if (empty($avs)) {
    return '';
  }
  $result = '';
  $codes = array(t('CVV'), t('Postcode'), t('Address'), t('Country comparison'));
  for ($i = 0; $i < sizeof($codes); $i++) {
    if (strlen($avs) < ($i + 1)) {
      break;
    }
    $result .= $codes[$i] . ': ';
    $char = substr($avs, $i, 1);
    switch ($char) {
      case '0':
        $result .= t('not supported');
        break;
      case '1':
        $result .= t('not checked');
        break;
      case '2':
        $result .= t('matched');
        break;
      case '4':
        $result .= t('not matched');
        break;
      default:
        $result .= t('unknown') . ' ' . $char;
    }
    if ($i < (sizeof($codes) - 1)) {
      $result .= '<br>';
    }
  }
  return $result;
}

