<?php
/**
 * @file
 * Implements EPay BG payment gateway.
 */

/**
 * Implements hook_init().
 */
function commerce_epaybg_init() {
  if (!function_exists('hmac')) {
    include_once(drupal_get_path('module', 'commerce_epaybg') . '/commerce_epaybg.inc.php');
  }
}

/**
 * Implements hook_help().
 */
function commerce_epaybg_help($path, $arg) {
  switch ($path) {
    case 'admin/help#commerce_epaybg':
      return t("See README.txt for instructions.");
  }
}

/**
 * Implements hook_menu().
 */
function commerce_epaybg_menu() {
  $items['payments/epaybg/response'] = array(
    'title' => 'Epaybg response',
    'page callback' => '_epaybg_payment_response',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['payments/epaybg/payment_ok'] = array(
    'title' => 'Epaybg payment received',
    'page callback' => '_epaybg_payment_ok',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['payments/epaybg/payment_cancel'] = array(
    'title' => 'Epaybg payment Cancel',
    'page callback' => '_epaybg_payment_cancel',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Menu callback to process gateway response
 */
function _epaybg_payment_response() {
  // debug
  //watchdog('commerce_epaybg', '$_SERVER @server', array('@server' => serialize($_SERVER)), WATCHDOG_NOTICE);
  //watchdog('commerce_epaybg', 'Response @data', array('@data' => serialize($_POST)), WATCHDOG_NOTICE);
  
  $encoded  = $_POST['encoded'];
  $checksum = $_POST['checksum'];
  
  $payment_method = commerce_payment_method_instance_load('commerce_epaybg|commerce_payment_commerce_epaybg');
  $hmac   = hmac('sha1', $encoded, $payment_method['settings']['epaybg_secret']);
  
  // XXX Check if the received CHECKSUM is OK
  if ($hmac == $checksum) {
    $data = base64_decode($encoded);
    $lines_arr = explode("\n", $data);
    $status_resp = 'ERR';
    
    foreach ($lines_arr as $line) {
      if (preg_match("/^INVOICE=(\d+):STATUS=(PAID|DENIED|EXPIRED)(:PAY_TIME=(\d+):STAN=(\d+):BCODE=([0-9a-zA-Z]+))?$/", $line, $regs)) {
        $invoice = $regs[1];
        $status = $regs[2];
        $pay_date = '';
        $stan = '';
        $bcode = '';
        
        if ($status == 'PAID') {
          // XXX if PAID
          $pay_date = $regs[4];
          // XXX if PAID
          $stan = $regs[5];
          // XXX if PAID
          $bcode = $regs[6]; 
        }
        
        if ($pay_date != '') {
          $pay_date = date('d.m.Y H:i:s', strtotime($pay_date));
        }
  
        // XXX process $invoice, $status, $pay_date, $stan, $bcode here
        $order_id = substr($invoice, 10);
        $transaction_id = db_select('commerce_payment_transaction', 't')
          -> fields('t', array('transaction_id'))
          -> condition('order_id', $order_id, '=')
          -> execute()
          -> fetchField();
      
        if ($status == 'PAID') {
          $transaction_status = COMMERCE_PAYMENT_STATUS_SUCCESS;
          $status_resp = 'OK';
        }
        elseif ($status == 'DENIED' || $status == 'EXPIRED') {
          $transaction_status = COMMERCE_PAYMENT_STATUS_FAILURE;
          $status_resp = 'NO';
        }
        else {
          $transaction_status = COMMERCE_PAYMENT_STATUS_FAILURE;
          $status_resp = 'NO';
        }
      }
      
      if ($status) {
        //change order status from pending
        $transaction = commerce_payment_transaction_load($transaction_id);
        $transaction -> status = $transaction_status;
        $transaction -> message = t('epay.bg order status: @status.', array('@status' => $transaction -> status));
        $transaction -> data = serialize($data);
        commerce_payment_transaction_save($transaction);
        
        db_merge('commerce_epaybg')
          ->key(array('transaction' => $invoice))
          ->fields(array(
            'status' => $transaction -> status,
            'pay_date' => $pay_date,
            'stan' => $stan,
            'bcode' => $bcode,
          ))
         ->execute();
        
        watchdog('commerce_epaybg', 'Transaction @invoice, status @status', array('@invoice' => $invoice, '@status' => $status), WATCHDOG_NOTICE);
      }
    }
    // print answer
    echo "INVOICE=$invoice:STATUS=$status_resp\n";
  }
  elseif (module_exists('commerce_easypaybg')) {
    $payment_method = commerce_payment_method_instance_load('commerce_easypaybg|commerce_payment_commerce_easypaybg');
    $hmac   = hmac('sha1', $encoded, $payment_method['settings']['epaybg_secret']);

    // XXX Check if the received CHECKSUM is OK
    if ($hmac == $checksum) {
      // process to commerce_easypaybg.module
      register_payment_response($post = $_POST);
    }
  }
  else {
    // XXX The description of error is REQUIRED
    echo "ERR=Not valid CHECKSUM\n"; 
  }
  
}

/**
 * Menu callback to going back from gateway
 * if payment is OK
 */
function _epaybg_payment_ok() {
  return t('Payment received! Check the orders in your profile for more details.');
}

/**
 * Menu callback to going back from gateway
 * if payment is Canceled
 */
function _epaybg_payment_cancel() {
  return t('Payment canceled!');
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_epaybg_commerce_payment_method_info() {
  $payment_methods['commerce_epaybg'] = array(
    'title' => t('EPay BG'),
    'description' => t('EPay BG Payment gateway.'),
    'active' => TRUE,
    'terminal' => TRUE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );
  
  $payment_methods['commerce_epaybg_world'] = array(
    'title' => t('EPay BG World (BORICA, Maestro, MasterCard, VISA)'),
    'description' => t('EPay BG Payment gateway - World service.'),
    'active' => TRUE,
    'terminal' => TRUE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );
  
  return $payment_methods;
}

/**
 * Payment method commerce_epaybg callback: settings form.
 */
function commerce_epaybg_settings_form($settings = NULL) {
  $settings = (array) $settings + array(
    'epaybg_min' => '',
    'epaybg_secret' => '',
    'site_mode' => 'DEMO_MODE',
    'epaybg_invoice_prefix' => '1234567890',
  );
  
  $form = array();
  
  $form['site_mode'] = array(
    '#type' => 'select',
    '#title' => t('Site mode'),
    '#description' => t('For Demo mode get profile on https://devep2.datamax.bg/ep2/epay2_demo/, for Live mode - http://epay.bg'),
    '#options' => array('DEMO_MODE' => t('Demo mode'), 'LIVE_MODE' => t('Live mode')),
    '#default_value' => $settings['site_mode'],
  );
  $form['information'] = array(
    '#type' => 'markup',
    '#markup' => t('Get next data from your appropriate (Demo or Live) EPay profile.'),
  );
  $form['epaybg_min'] = array(
    '#type' => 'textfield',
    '#title' => t('MID'),
    '#description' => t('Customer number'),
    '#default_value' => $settings['epaybg_min'],
  );
  $form['epaybg_secret'] = array(
    '#type' => 'textfield',
    '#title' => t('Secret key'),
    '#default_value' => $settings['epaybg_secret'],
  );
  $form['epaybg_invoice_prefix'] = array(
    '#type' => 'textfield',
    '#title' => t('Invoice prefix'),
    '#description' => t('10 digit prefix on Order ID, starting with 1.'),
    '#default_value' => $settings['epaybg_invoice_prefix'],
  );
  
  return $form;
}

/**
 * Payment method commerce_epaybg callback: submit form.
 */
function commerce_epaybg_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form = array();

  // Merge in values from the order.
  if (!empty($order->data['commerce_epaybg'])) {
    $pane_values += $order->data['commerce_epaybg'];
  }

  // Merge in default values.
  $pane_values += array(
    'name' => '',
  );
  
  $form['epaybg_continue_checkout'] = array(
    '#markup' => t('Continue with checkout to complete payment via epay.bg.'),
  );

  return $form;
}

/**
 * Payment method commerce_epaybg callback: settings form.
 */
function commerce_epaybg_world_settings_form($settings = NULL) {
  $settings = (array) $settings + array(
    'epaybg_world_min' => '',
    'epaybg_world_secret' => '',
    'site_mode' => 'DEMO_MODE',
    'epaybg_world_invoice_prefix' => '1234567890',
  );
  
  $form = array();
  
  $form['site_mode'] = array(
    '#type' => 'select',
    '#title' => t('Site mode'),
    '#description' => t('For Demo mode get profile on https://devep2.datamax.bg/ep2/epay2_demo/, for Live mode - http://epay.bg'),
    '#options' => array('DEMO_MODE' => t('Demo mode'), 'LIVE_MODE' => t('Live mode')),
    '#default_value' => $settings['site_mode'],
  );
  $form['information'] = array(
    '#type' => 'markup',
    '#markup' => t('Get next data from your appropriate (Demo or Live) EPay profile.'),
  );
  $form['epaybg_world_min'] = array(
    '#type' => 'textfield',
    '#title' => t('MID'),
    '#description' => t('Customer number'),
    '#default_value' => $settings['epaybg_world_min'],
  );
  $form['epaybg_world_secret'] = array(
    '#type' => 'textfield',
    '#title' => t('Secret key'),
    '#default_value' => $settings['epaybg_world_secret'],
  );
  $form['epaybg_world_invoice_prefix'] = array(
    '#type' => 'textfield',
    '#title' => t('Invoice prefix'),
    '#description' => t('10 digit prefix on Order ID.'),
    '#default_value' => $settings['epaybg_world_invoice_prefix'],
  );
  
  return $form;
}

/**
 * Payment method commerce_epaybg_world callback: submit form.
 */
function commerce_epaybg_world_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form = array();

  // Merge in values from the order.
  if (!empty($order->data['commerce_epaybg_world'])) {
    $pane_values += $order->data['commerce_epaybg_world'];
  }

  // Merge in default values.
  $pane_values += array(
    'name' => '',
  );
  
  $form['epaybg_continue_checkout'] = array(
    '#markup' => t('Continue with checkout to complete payment via epay.bg (World).'),
  );

  return $form;
}

/**
 * Implements CALLBACK_commerce_payment_method_redirect_form().
 */
function commerce_epaybg_redirect_form($form, &$form_state, $order, $payment_method) {
  global $base_url;
  
  $time = time();
  //merchant ID (secret)
  $secret = $payment_method['settings']['epaybg_secret'];
  //merchant ID (KIN)
  $min = $payment_method['settings']['epaybg_min'];
  $order_total = $order -> commerce_order_total['und'][0]['amount'] / 100;
  $invoice = $payment_method['settings']['epaybg_invoice_prefix'] . $order -> order_id;
  $exp_date = $time + (60*60*24*7);
  $exp_date = date('d.m.Y h:i:s', $exp_date);
  $description = t('Order @order_id at "@site_name"', array('@order_id' => $order -> order_id, '@site_name' => variable_get('site_name', '')));
  
  $data = 'MIN=' . $min . "\n" .
    'INVOICE=' . $invoice . "\n" .
    'AMOUNT=' . $order_total . "\n" .
    'EXP_TIME=' . $exp_date . "\n" .
    'DESCR=' . $description . "\n";
  
  $encoded = base64_encode($data);
  $checksum = hmac('sha1', $encoded, $secret);
  
  //set payment transaction record
  $transaction = commerce_payment_transaction_new('commerce_epaybg', $order -> order_id);
  $transaction -> instance_id = $order -> data['payment_method'];
  $transaction -> payment_method = 'commerce_epaybg';
  $transaction -> amount = $order -> commerce_order_total['und'][0]['amount'];
  $transaction -> currency_code = $order -> commerce_order_total['und'][0]['currency_code'];
  $transaction -> status = COMMERCE_PAYMENT_STATUS_PENDING;
  $transaction -> message = t('epay.bg order status: @status.', array('@status' => $transaction -> status));
  commerce_payment_transaction_save($transaction);
  
  //insert order payment data
  db_insert('commerce_epaybg')
    ->fields(array(
      'order_id' => $order -> order_id,
      'transaction' => $payment_method['settings']['epaybg_invoice_prefix'] . $order -> order_id,
    ))
    ->execute();
  
  $ep_urls = unserialize(variable_get('commerce_epaybg_urls', ''));
  //set form url from settings
  $form['#action'] = $ep_urls[$payment_method['settings']['site_mode']];
  
  $form['PAGE'] = array(
    '#type' => 'hidden',
    '#value' => 'paylogin',
  );
  $form['ENCODED'] = array(
    '#type' => 'hidden',
    '#value' => $encoded,
  );
  $form['CHECKSUM'] = array(
    '#type' => 'hidden',
    '#value' => $checksum,
  );
  $form['URL_OK'] = array(
    '#type' => 'hidden',
    '#value' => $base_url . '/payments/epaybg/payment_ok',
  );
  $form['URL_CANCEL'] = array(
    '#type' => 'hidden',
    '#value' => $base_url . '/payments/epaybg/payment_cancel',
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Proceed to epay.bg'),
  );
  
  return $form;
}

/**
 * Implements CALLBACK_commerce_payment_method_redirect_form().
 */
function commerce_epaybg_world_redirect_form($form, &$form_state, $order, $payment_method) {
  global $base_url;
  
  $time = time();
  //merchant ID (secret)
  $secret = $payment_method['settings']['epaybg_world_secret'];
  //merchant ID (KIN)
  $min = $payment_method['settings']['epaybg_world_min'];
  $order_total = $order -> commerce_order_total['und'][0]['amount'] / 100;
  $invoice = $payment_method['settings']['epaybg_world_invoice_prefix'] . $order -> order_id;
  $exp_date = $time + (60*60*24*7);
  $exp_date = date('d.m.Y h:i:s', $exp_date);
  $description = t('Order @order_id at "@site_name"', array('@order_id' => $order -> order_id, '@site_name' => variable_get('site_name', '')));
  
  $data = 'MIN=' . $min . "\n" .
    'INVOICE=' . $invoice . "\n" .
    'AMOUNT=' . $order_total . "\n" .
    'EXP_TIME=' . $exp_date . "\n" .
    'DESCR=' . $description . "\n";
  
  $encoded = base64_encode($data);
  $checksum = hmac('sha1', $encoded, $secret);
  
  //set payment transaction record
  $transaction = commerce_payment_transaction_new('commerce_epaybg_world', $order -> order_id);
  $transaction -> instance_id = $order -> data['payment_method'];
  $transaction -> payment_method = 'commerce_epaybg_world';
  $transaction -> amount = $order -> commerce_order_total['und'][0]['amount'];
  $transaction -> currency_code = $order -> commerce_order_total['und'][0]['currency_code'];
  $transaction -> status = COMMERCE_PAYMENT_STATUS_PENDING;
  $transaction -> message = t('EPay BG (World) order status: @status.', array('@status' => @$transaction -> status));
  commerce_payment_transaction_save($transaction);
  
  //insert order payment data
  db_insert('commerce_epaybg')
    ->fields(array(
      'order_id' => $order -> order_id,
      'transaction' => $payment_method['settings']['epaybg_world_invoice_prefix'] . $order -> order_id
    ))
    ->execute();
  
  $ep_urls = unserialize(variable_get('commerce_epaybg_urls', ''));
  //set form url from settings
  $form['#action'] = $ep_urls[$payment_method['settings']['site_mode']];
  
  $form['PAGE'] = array(
    '#type' => 'hidden',
    '#value' => 'credit_paydirect',
  );
  $form['ENCODED'] = array(
    '#type' => 'hidden',
    '#value' => $encoded,
  );
  $form['CHECKSUM'] = array(
    '#type' => 'hidden',
    '#value' => $checksum,
  );
  $form['URL_OK'] = array(
    '#type' => 'hidden',
    '#value' => $base_url . '/payments/epaybg/payment_ok',
  );
  $form['URL_CANCEL'] = array(
    '#type' => 'hidden',
    '#value' => $base_url . '/payments/epaybg/payment_cancel',
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Proceed to epay.bg (World)'),
  );
  
  return $form;
}
