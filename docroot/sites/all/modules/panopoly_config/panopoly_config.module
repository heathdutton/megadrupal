<?php
/**
 * @file
 * Build configuration pages for your distribution.
 */

/**
 * Implements hook_menu()
 */
function panopoly_config_menu() {
  $items = array();
  $profile_name = drupal_get_profile();
  $profile = drupal_parse_info_file("profiles/$profile_name/$profile_name.info");

  $items['admin/config/' . $profile_name] = array(
    'title' => $profile['name'],
    'description' => 'Configuration for ' . $profile['name'],  
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer site configuration'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  // Create pages for each config group.
  $panopoly_config = _panopoly_config_get_config();
  foreach ($panopoly_config as $group_name => $group_info) {
    // Get variable_group_name.
    $variable_group_name = _panopoly_config_get_config_variable_group_name($group_name);
    
    // Unset config.
    unset($group_info['config']);

    // Create menu item.
    $items['admin/config/' . $profile_name . '/' . $group_name] = array();
    $items['admin/config/' . $profile_name . '/' . $group_name] += $group_info;
    $items['admin/config/' . $profile_name . '/' . $group_name] += array(
      'page callback' => 'drupal_get_form',
      'page arguments' => array('variable_group_form', $variable_group_name),
      'access arguments' => array('administer site configuration'),
    );
  }

  return $items;
}

/**
 * Implements hook_variable_update().
 */
function panopoly_config_variable_update($name, $value, $old_value, $options) {
  // Sync variables.
  panopoly_config_sync($name, $value);
}

/**
 * Helper getter for config.
 *
 * @param $name
 *  The name of the config.
 * @param $default
 *  The default value for the config.
 * @return
 *  The value of the variable.
 */
function panopoly_config_get($name, $default = '') {
  $variable_name = _panopoly_config_get_config_variable_name($name);
  return variable_get($variable_name, $default);
}

/**
 * Helper setter for config.
 *
 * @param $name
 *  The name of the config.
 * @param $value
 *  The value of the config.
 */
function panopoly_config_set($name, $value) {
  $variable_name = _panopoly_config_get_config_variable_name($name);
  return variable_set($variable_name, $value);
}

/**
 * Syncs a config variable and a site variable.
 *
 * @param $name
 *  The name of the config.
 * @param $value
 *  The value of the config.
 */
function panopoly_config_sync($name, $value) {
  $profile = drupal_get_profile();
  if (preg_match("/^" . $profile . "_config_/", $name)) {
    // This is a config variable, hence update site variable.
    $site_variable_name = _panopoly_config_get_site_variable_name($name);
    if (variable_get($site_variable_name)) { // Check if site variable exists.
      variable_set($site_variable_name, $value);
    }
  }
  else {
    // This is a site variable, hence update config variable.
    $config_variable_name = _panopoly_config_get_config_variable_name($name);
    if (_panopoly_config_is_variable_a_config($name)) { // Check is variable is a config.
      variable_set($config_variable_name, $value);
    }
  }
}

/**
 * Get all config implemented by modules.
 */
function _panopoly_config_get_config() {
  // Invoke all hook_panopoly_config_info.
  $config = module_invoke_all('panopoly_config_info');

  // Invoke hook_panopoly_config_info_alter() to allow modules to alter config.
  drupal_alter('panopoly_config_info', $config);

  // Just return it for now.
  return $config;
}

/**
 * Helper function to get the variable group name from a config group name.
 *
 * @param $group_name
 *  The group name.
 * @return string
 *  THe variable group name.
 */
function _panopoly_config_get_config_variable_group_name($group_name) {
  $profile_name = drupal_get_profile();

  // Create a group name in the format $PROFILE_NAME_config_group_$GROUP_NAME.
  return $profile_name . '_config_group_' . $group_name;
}

/**
 * Helper function to get the config variable name from a config name.
 *
 * @param $config_name
 *  The config name.
 * @return string.
 *  THe variable name.
 */
function _panopoly_config_get_config_variable_name($config_name) {
  $profile_name = drupal_get_profile();

  // Create a variable name in the format $PROFILE_NAME_$CONFIG_NAME.
  return $profile_name . '_config_' . $config_name;
}

/**
 * Helper function to get the site variable name from a config name.
 * Example profile_site_name will return site_name.
 *
 * @param $name
 *  The variable name.
 * @return string.
 *  The site variable name.
 */
function _panopoly_config_get_site_variable_name($name) {
  $profile_name = drupal_get_profile();
  return str_replace($profile_name . '_config_', '', $name);
}

/**
 * Helper function to check if a variable is a config.
 *
 * @param $name
 *  The variable name.
 * @return bool.
 *  TRUE if variable is a config.
 */
function _panopoly_config_is_variable_a_config($name) {
  $panopoly_config = _panopoly_config_get_config();
  foreach ($panopoly_config as $group_name => $group_info) {
    if (in_array($name, $group_info['config'])) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Returns a list of config that have show_on_install == TRUE.
 */
function _panopoly_config_get_install_config() {
  $panopoly_config = _panopoly_config_get_config();
  foreach ($panopoly_config as $group_name => $group_info) {
    foreach ($group_info['config'] as $config_name => $config_info) {
      if (empty($config_info['show_on_install'])) {
        // Elimination strategy.
        unset($panopoly_config[$group_name]['config'][$config_name]);
      }
    }
  }

  return $panopoly_config;
}