<?php

/**
 * @file
 * Defines a field widget for referencing LDAP entries.
 */



/**
 * Implements hook_menu().
 */
function ldap_entry_reference_menu() {
  $items = array();

  $items['ldap_entry_reference/autocomplete/%/%/%'] = array(
    'title' => 'ldap_entry_reference autocomplete',
    'page callback' => 'ldap_entry_reference_autocomplete',
    'page arguments' => array(2,3,4),
    'access callback' => 'ldap_entry_reference_autocomplete_access',
    'access arguments' => array(2, 3, 4),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Returns an array of available entry types suitable for an HTML option list
 */
function ldap_entry_reference_entry_types_option_list($name = NULL) {
  $types = array(
    'user' => t('User'),
    'og'  => t('Organic group'),
    'role' => t('Drupal role'),
  );

  if (isset($name)) {
    return isset($types[$name]) ? $types[$name] : NULL;
  }

  return $types;
}


// -----------------------------------------------------------------------
// Plugin API

/**
 * Implements hook_ctools_plugin_directory().
 */
function ldap_entry_reference_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ldap_entry_reference') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_ctools_plugin_type().
 */
function ldap_entry_reference_ctools_plugin_type() {
  $plugins['search'] = array(
    'load themes' => FALSE,
  );
  return $plugins;
}

/**
 * Fetch metadata on a specific search plugin.
 *
 * @param $plugin_id
 *   Name of the plugin.
 *
 * @return
 *   An array with information about the requested plugin.
 */
function ldap_entry_reference_search_plugin($plugin_id) {
  ctools_include('plugins');
  return ctools_get_plugins('ldap_entry_reference', 'search', $plugin_id);
}

/**
 * Fetch metadata for all search plugins.
 *
 * @return
 *   An array of arrays with information about all available plugins.
 */
function ldap_entry_reference_search_plugins() {
  ctools_include('plugins');
  $plugins = ctools_get_plugins('ldap_entry_reference', 'search');
  uasort($plugins, 'ctools_plugin_sort');
  return $plugins;
}

/**
 * Get the list of search plugins in a format suitable for #options.
 */
function ldap_entry_reference_search_plugins_options() {
  $options = array();
  foreach (ldap_entry_reference_search_plugins() as $type => $info) {
    $options[$type] = t('@title', array('@title' => $info['title']));
  }
  return $options;
}

/**
 * Invoke a search plugin callback function
 *
 * @param $plugin_id
 *   The ctools plugin id
 * @params $callback
 *   The plugin callback
 * @param $args
 *   Any number of arguments to pass to the callback
 *
 * @return
 *   The result of the callback if it exists
 */
function ldap_entry_reference_search_plugin_invoke($plugin_id, $callback) {
  ctools_include('plugins');
  $function = ctools_plugin_load_function('ldap_entry_reference', 'search', $plugin_id, $callback);
  if (!empty($function)) {
    $args = func_get_args();
    unset($args[0], $args[1]);
    return call_user_func_array($function, $args);
  }
}


// -----------------------------------------------------------------------
// Field Type

/**
 * Implements hook_field_info().
 *
 * Field settings:
 *   - max_length: the maximum length for a varchar field.
 */
function ldap_entry_reference_field_info() {
  return array(
    'ldap_entry_reference' => array(
      'label' => t('LDAP Entry Reference'),
      'description' => t('This field stores the LDAP DN of an LDAP entry reference in the database.'),
      'settings' => array('max_length' => 255),
      'instance_settings' => array(
        'search_plugin' => '',
        'ldap_base_dn' => '',
        'ldap_extra_filter' => '',
        'ldap_entry_type' => '',
      ),
      'default_widget' => 'ldap_entry_reference_autocomplete',
      'default_formatter' => 'ldap_entry_reference_plain',
      'property_type' => 'text',
      'default_token_formatter' => 'ldap_entry_reference_plain',
    ),
  );
}

/**
 * Implements hook_field_settings_form().
 */
function ldap_entry_reference_field_settings_form($field, $instance, $has_data) {
  $settings = $field['settings'];

  $form = array();

  if ($field['type'] == 'ldap_entry_reference') {
    $form['max_length'] = array(
      '#type' => 'textfield',
      '#title' => t('Maximum length'),
      '#default_value' => $settings['max_length'],
      '#required' => TRUE,
      '#description' => t('The maximum length of the field in characters.'),
      '#element_validate' => array('element_validate_integer_positive'),
      // @todo: If $has_data, add a validate handler that only allows
      // max_length to increase.
      '#disabled' => $has_data,
    );
  }

  return $form;
}

/**
 * Implements hook_field_instance_settings_form().
 */
function ldap_entry_reference_field_instance_settings_form($field, $instance) {
  $settings = $instance['settings'] + field_info_instance_settings($field['type']);

  $search_plugins = ldap_entry_reference_search_plugins_options();
  $form['search_plugin'] = array(
    '#type' => 'select',
    '#title' => t('LDAP search plugin'),
    '#default_value' => $settings['search_plugin'],
    '#options' => $search_plugins,
    '#empty_value' => '',
    '#empty_option' =>  t('- None -'),
  );
  if (empty($search_plugins)) {
    $form['search_plugin'] = array(
      '#empty_option' =>  t('- No plugins available -'),
      '#disabled' => TRUE,
    ) + $form['search_plugin'];

    drupal_set_message(t('No search plugins found. Please enable a module that provides an ldap_entry_reference search plugin to enable LDAP validation and autocomplete.'), 'warning');
  }

  $form['ldap_entry_type'] = array(
    '#type' => 'select',
    '#title' => t('LDAP entry type'),
    '#default_value' => $settings['ldap_entry_type'],
    '#options' => ldap_entry_reference_entry_types_option_list(),
    '#empty_option' => t('- Any -'),
    '#empty_value' => '',
    '#description' => t('Enter the LDAP entry type as related to Drupal. This can be used by LDAP API modules to automatically determine the base DN to search.'),
  );
  $form['ldap_base_dn'] = array(
    '#type' => 'textfield',
    '#title' => t('LDAP base dn'),
    '#default_value' => $settings['ldap_base_dn'],
    '#description' => t('Enter a base DN for the search. Depending on the LDAP API module used, this might not be respected if "LDAP entry type" is specified.'),
  );
  $form['ldap_extra_filter'] = array(
    '#type' => 'textfield',
    '#title' => t('Extra search filter'),
    '#default_value' => $settings['ldap_extra_filter'],
    '#description' => t('This filter will be combined with the normal search filter to find entries. This can be used to require a certain attribute be present or a specific objectClass.<br />Example: "objectClass=groupOfNames"'),
  );

  return $form;
}

/**
 * Implements hook_field_validate().
 *
 * Possible error codes:
 * - 'ldap_entry_reference_dn_max_length': The value exceeds the maximum length.
 *
 * @see text_field_validate()
 */
function ldap_entry_reference_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
/** @todo: validate dn is in base_dn + extra_filter? ***/
/** @todo validate text per LDAP spec *******/

  foreach ($items as $delta => $item) {
    foreach (array('dn') as $column) {
      if (!empty($item[$column])) {
        if (!empty($field['settings']['max_length']) && drupal_strlen($item[$column]) > $field['settings']['max_length']) {
          switch ($column) {
            case 'dn':
              $message = t('%name: the DN may not be longer than %max characters.', array('%name' => $instance['label'], '%max' => $field['settings']['max_length']));
              break;
          }
          $errors[$field['field_name']][$langcode][$delta][] = array(
            'error' => "ldap_entry_reference_{$column}_length",
            'message' => $message,
          );
        }
      }
    }
  }
}

/**
 * Implements hook_field_load().
 *
 * Where possible, generate the sanitized version of each field early so that
 * it is cached in the field cache. This avoids looking up from the filter cache
 * separately.
 *
 * @see text_field_formatter_view()
 */
function ldap_entry_reference_field_load($entity_type, $entities, $field, $instances, $langcode, &$items) {
  foreach ($entities as $id => $entity) {
    foreach ($items[$id] as $delta => $item) {
      $items[$id][$delta]['safe_dn'] = isset($item['dn']) ? check_plain($item['dn']) : '';
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function ldap_entry_reference_field_is_empty($item, $field) {
  // dn = 0 is empty too, which is exactly what we want.
  return empty($item['dn']);
}

/**
 * Implements hook_field_access()
 * - Control access to ldap entry fields with same permission as "admin/config/people/ldap"
 */
function ldap_entry_reference_field_access($op, $field, $entity_type, $entity, $account) {
  if ($field['type'] == 'ldap_entry_reference') {
    if ($op == 'edit') {
      return user_access('administer site configuration', $account);
    }
  }
}


// -----------------------------------------------------------------------
// Formatter

/**
 * Implements hook_field_formatter_info().
 */
function ldap_entry_reference_field_formatter_info() {
  return array(
    'ldap_entry_reference_plain' => array(
      'label' => t('LDAP DN'),
      'description' => t('Display the LDAP DN of the referenced LDAP entry as plain text.'),
      'field types' => array('ldap_entry_reference'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function ldap_entry_reference_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $result = array();

  switch ($display['type']) {
    case 'ldap_entry_reference_plain':
      foreach ($items as $delta => $item) {
        if (!empty($item['dn'])) {
          $result[$delta] = array(
            '#markup' => isset($item['safe_dn']) ? $item['safe_dn'] : check_plain($item['dn']),
          );
        }
      }
      break;
  }

  return $result;
}


// -----------------------------------------------------------------------
// Widget

/**
 * Implements hook_field_widget_info().
 *
 * Defines widgets available for use with field types as specified in each
 * widget's $info['field types'] array.
 */
function ldap_entry_reference_field_widget_info() {
  $widgets = array();

  // Define an autocomplete textfield widget for entry referencing
  $widgets['ldap_entry_reference_autocomplete'] = array(
    'label' => t('LDAP Entry autocomplete text field'),
    'description' => t('Display the list of referenceable LDAP entries as a textfield with autocomplete behaviour.'),
    'field types' => array('ldap_entry_reference'),
    'settings' => array(
      'autocomplete_match' => 'contains',
      'autocomplete_path' => 'ldap_entry_reference/autocomplete',
      'size' => 60,
      'ldap_search_attr' => '',
    ),
    'behaviors' => array(
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
      'default value' => FIELD_BEHAVIOR_NONE,
    ),
  );

  // Do not show the widget on forms; useful in cases where reference fields
  // have a lot of data that is maintained automatically.
  $widgets['ldap_entry_reference_hidden'] = array(
    'label' => t('LDAP Entry hidden'),
    'description' => t('Will not display the reference field on forms. Use only if you maintain references some other way.'),
    'field types' => array('ldap_entry_reference'),
    'behaviors' => array(
      'multiple values' => FIELD_BEHAVIOR_CUSTOM,
    ),
  );

  return $widgets;
}

/**
 * Helper function to resolve widget settings for a given field instance
 */
function _ldap_entry_reference_field_widget_settings($instance, $raw_values_only = FALSE) {
  $settings = array();
  if (isset($instance['widget']) && !empty($instance['widget']['type'])) {
    $widget_type = $instance['widget']['type'];

    // Instance specific settings
    if (!empty($instance['widget']['settings'])) {
      $settings = $instance['widget']['settings'];
    }

    // Merge defaults
    $settings += field_info_widget_settings($widget_type);

    // Type specific processing
    if ($widget_type = 'ldap_entry_reference_autocomplete') {
      $attr_keys = array('ldap_search_attr');

      if (empty($raw_values_only)) {
        $settings['ldap_attributes'] = array();
        foreach ($attr_keys as $attr) {
          $settings[$attr] = drupal_strtolower($settings[$attr]);
          $settings['ldap_attributes'][] = $settings[$attr];
        }

        $settings['ldap_attributes'] = array_unique($settings['ldap_attributes']);
      }
    }
  }

  return $settings;
}

/**
 * Implements hook_field_widget_settings_form().
 */
function ldap_entry_reference_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = _ldap_entry_reference_field_widget_settings($instance, TRUE);
  $form = array();

  // Build the settings for the autocomplete widget.
  if ($widget['type'] == 'ldap_entry_reference_autocomplete') {
    $form['autocomplete_match'] = array(
      '#type' => 'select',
      '#title' => t('Autocomplete matching'),
      '#default_value' => $settings['autocomplete_match'],
      '#options' => array(
        'starts_with' => t('Starts with'),
        'contains' => t('Contains'),
      ),
      '#description' => t('Select the method used to collect autocomplete suggestions. Note that <em>Contains</em> can cause performance issues on sites with thousands of nodes.'),
    );
    $form['size'] = array(
      '#type' => 'textfield',
      '#title' => t('Size of textfield'),
      '#default_value' => $settings['size'],
      '#element_validate' => array('_element_validate_integer_positive'),
      '#required' => TRUE,
    );

    $form['ldap_search_attr'] = array(
      '#type' => 'textfield',
      '#title' => t('LDAP search attribute'),
      '#default_value' => $settings['ldap_search_attr'],
      '#description' => t('Enter the LDAP attribute that is entered by the user and autocompleted via an LDAP search.<br />Most common case: "cn"'),
      '#required' => TRUE,
    );
  }

  return $form;
}

/**
 * Implements hook_field_widget_form().
 *
 * Used to define the form element for custom widgets.
 */
function ldap_entry_reference_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $settings = _ldap_entry_reference_field_widget_settings($instance);
  $widget_type = $instance['widget']['type'] ;

  // Abstract over the actual field columns, to allow different field types to
  // reuse those widgets.
  $value_key = key($field['columns']);

  // Define the autocomplete textfield.
  if ($widget_type == 'ldap_entry_reference_autocomplete') {
    $default_value = NULL;
    $stored_value = NULL;
    $search_attr = $settings['ldap_search_attr'];

    // Process the stored value from this field's values.
    if (!empty($items[$delta])) {
      $stored_value = isset($items[$delta][$value_key]) ? $items[$delta][$value_key] : NULL;

      // Default to stored value
      $default_value = $stored_value;

/** @todo: have a server status check to determine if autocomplete should be disabled *******/

      // Query for matching search attribute for stored value
      if (isset($stored_value)) {
        $entries = ldap_entry_reference_match_entries($field, $instance, '', NULL, array($stored_value));
        if (!empty($entries)) {
          $entry = reset($entries);
          if (isset($entry[$search_attr])) {
            $default_value = $entry[$search_attr];
          }
        }
      }
    }

    $element += array(
      '#type' => 'textfield',
      '#value_key' => $value_key,
      '#default_value' => $default_value,
      '#autocomplete_path' => $settings['autocomplete_path'] . '/' . $instance['entity_type'] . '/' . $field['field_name'] . '/' . $instance['bundle'],
      '#size' => $settings['size'],
      '#maxlength' => 2048,
    );
    $element['#element_validate'][] = 'ldap_entry_reference_autocomplete_validate';

    return array($value_key => $element);
  }
  elseif ($widget_type == 'ldap_entry_reference_hidden') {
    return array();
  }
}

/**
 * Validation callback for a ldap_entry_reference autocomplete element.
 */
function ldap_entry_reference_autocomplete_validate($element, &$form_state, $form) {
  $field = field_widget_field($element, $form_state);
  $instance = field_widget_instance($element, $form_state);
  $value = $element['#value'];

  // If a value was entered into the autocomplete...
  if (!empty($value)) {
    // Translate search attributes to ldap dn
    $typed_value = $value;

    // Get widget settings
    $settings = _ldap_entry_reference_field_widget_settings($instance);
    $search_attr = $settings['ldap_search_attr'];
    $stored_attr = 'dn';

    // Process the value to see if the entry actually exists...
    $entries = ldap_entry_reference_match_entries($field, $instance, trim($typed_value), 'equals');
    if (!empty($entries)) {
      // Assume top entry
      $entry = reset($entries);

      // Store the stored_attr for later validation.
      $value = $entry[$stored_attr];
    }
    else {
      form_error($element, t('LDAP entry %attribute does not exist.', array('%attribute' => $typed_value)));
    }

    // Set the validated value
    form_set_value($element, $value, $form_state);
  }
}

/**
 * Implements hook_field_widget_error().
 */
function ldap_entry_reference_field_widget_error($element, $error) {
  form_error($element, $error['message']);
}

/**
 * Access callback for ldap_entry autocompletes.
 */
function ldap_entry_reference_autocomplete_access($entity_type, $field_name, $bundle, $string = '') {
  global $user;

  $entity = NULL;
  $account = NULL;

  if (!empty($user->uid)) {
    $account = user_load($user->uid);
  }

  if (!user_access('access content', $account)) {
    return FALSE;
  }

  $field = field_info_field($field_name);
  if (empty($field)) {
    return FALSE;
  }

  $instance = field_info_instance($entity_type, $field_name, $bundle);
  if (empty($instance)) {
    return FALSE;
  }

  return field_access('view', $field, $entity_type, $entity, $account) &&
         field_access('edit', $field, $entity_type, $entity, $account);
}

/**
 * Returns output for ldap_entry autocompletes.
 *
 * The values returned will be keyed by DN and appear as such in the textfield,
 * even though the preview in the autocomplete list shows "CN".
 */
function ldap_entry_reference_autocomplete($entity_type, $field_name, $bundle, $string = '') {
  $field = field_info_field($field_name);
  $instance = field_info_instance($entity_type, $field_name, $bundle);

  $matches = array();
  $args = explode('/', request_path());

  // Exit if insufficient input
  if (count($args) <= 5) {
    drupal_json_output($matches);
    return;
  }

  // Extract the string from the URL while preserving support for strings that
  // contain slashes.
  // @see http://drupal.org/node/1962144
  array_splice($args, 0, 5);
  $string = implode('/', $args);

  // The user enters a comma-separated list of tags. We only autocomplete the last tag.
  $tags_typed_before = array();
  $tag_last = drupal_strtolower($string);

  if (!empty($tag_last)) {
    $prefix = count($tags_typed_before) ? implode(', ', $tags_typed_before) . ', ' : '';

    // Load widget settings
    $settings = _ldap_entry_reference_field_widget_settings($instance);
    $search_attr = $settings['ldap_search_attr'];

    // Get an array of matching entries.
    $entries = ldap_entry_reference_match_entries($field, $instance, $tag_last, $settings['autocomplete_match'], array(), 10);

    // Loop through the entries and convert them into autocomplete output.
    foreach ($entries as $id => $data) {
      $matches[$prefix . $data[$search_attr]] = $data['rendered'];
    }
  }

  drupal_json_output($matches);
}


// -----------------------------------------------------------------------
// LDAP Search

/**
 * Fetches an array of all ldap entries matching the given parameters.
 *
 * This info is used in various places (allowed values, autocomplete results,
 * input validation...).
 *
 * The array we return contains all the potentially needed information,
 * and lets calling functions use the parts they actually need.
 *
 * @param $field
 *   The field description.
 * @param $instance
 *   The field instance description.
 * @param $string
 *   Optional string to filter SKUs and titles on (used by autocomplete).
 * @param $match
 *   Operator to match filtered SKUs and titles against, can be any of:
 *   'contains', 'equals', 'starts_with'
 * @param $stored_values
 *   Optional stored values's to lookup (used when $string and $match arguments are
 *   not given).
 * @param $limit
 *   If non-zero, limit the size of the result set..
 *
 * @return
 *   An array of valid entries in the form:
 *   array(
 *     {ldap_search_attr} => array(
 *       'dn' => The entry's distinguished name,
 *       {ldap_search_attr} => The search attribute's value,
 *       'label' => The entry's label,
 *       'rendered' => The text to display in widgets (can be HTML)
 *       'result' => full result from ldap search
 *     ),
 *     ...
 *   )
 */
function ldap_entry_reference_match_entries($field, $instance, $string = '', $match = 'contains', $stored_values = array(), $limit = NULL) {
  $results = &drupal_static(__FUNCTION__, array());

  // Create unique id for static cache.
  $cid = implode(':', array(
    $field['field_name'],
    $match,
    ($string !== '' ? $string : implode('-', $stored_values)),
    $limit,
  ));

  if (!isset($results[$cid])) {
    $search_params = _ldap_entry_reference_field_search_parameters($field, $instance, $limit);
    $matches = _ldap_entry_reference_search($search_params, $string, $match, $stored_values);

    // Store the results.
    $results[$cid] = !empty($matches) ? $matches : array();
  }

  return $results[$cid];
}

/**
 * Helper to return search parameters for a given field instance
 */
function _ldap_entry_reference_field_search_parameters($field, $instance, $limit = NULL) {
  $settings = _ldap_entry_reference_field_widget_settings($instance);
  $settings += $instance['settings'] + field_info_instance_settings($field['type']);

  $search_params = array(
    'search_plugin' => $settings['search_plugin'],
    'base_dn' => $settings['ldap_base_dn'],
    'stored_attr' => 'dn',
    'search_attr' => $settings['ldap_search_attr'],
    'extra_filter' => $settings['ldap_extra_filter'],
    'entry_type' => $settings['ldap_entry_type'],
    'attributes' => $settings['ldap_attributes'],
    'attrsonly' => 0,
    'scope' => 'sub',
    'sizelimit' => isset($limit) ? $limit : 0,
    'timelimit' => 0,
    'deref' => NULL,
  );

  return $search_params;
}

/**
 * Helper function for ldap_entry_reference_match_entries().
 *
 * Returns an array of ldap entries matching the specific parameters.
 */
function _ldap_entry_reference_search($params, $string = '', $match = 'contains', $stored_values = array(), $recursing = FALSE) {
  // merge default params
  $params += array(
    'search_plugin' => '',
    'base_dn' => '',
    'search_attr' => 'cn',
    'stored_attr' => 'dn',
    'extra_filter' => '',
    'attributes' => array(),
    'attrsonly' => 0,
    'scope' => 'sub',
    'sizelimit' => 0,
    'timelimit' => 0,
    'deref' => NULL,
  );

  // Exit if no search plugin
  if (empty($params['search_plugin'])) {
    return array();
  }

  // Exit if no search attribute
  if (empty($params['search_attr'])) {
    return array();
  }
  $search_attr = $params['search_attr'];

  // Resolve stored attribute with default to dn
  $stored_attr = !empty($params['stored_attr']) ? $params['stored_attr'] : 'dn';

  // Ensure attributes
  if (!isset($params['attributes']) || !is_array($params['attributes'])) {
    $params['attributes'] = array();
  }

  // Ensure $search_attr is in return
  if (!in_array($search_attr, $params['attributes'])) {
    $params['attributes'][] = $search_attr;
  }
  // Ensure $stored_attr is in return
  if (!in_array($stored_attr, $params['attributes'])) {
    $params['attributes'][] = $stored_attr;
  }


  // Build match filter
  $match_filter = '';
  $string_search_enabled = FALSE;
  if ($string !== '') {
    $match_filter = _ldap_entry_reference_create_ldap_filter_string(array(
      $search_attr => array(
        'attribute' => $search_attr,
        'value' => $string,
        'match' => $match,
      ),
    ));

    $string_search_enabled = !empty($match_filter);
  }
  elseif (!empty($stored_values) && is_array($stored_values)) {
    // Query stored values directly
    $stored_attr_trans = _ldap_entry_reference_ldap_filter_key_process($stored_attr);

    if ($stored_attr_trans == 'distinguishedname') {
      // Special handling for DN
      if (count($stored_values) == 1) {
        // Set stored dn as base and process normally
        $params['scope'] = 'base';
        $params['base_dn'] = reset($stored_values);
        $match_filter = '(objectclass=*)';
      }
      elseif (!$recursing) {
        // RECURSION for each dn entry
        $results = array();
        foreach ($stored_values as $stored_value) {
          $results += _ldap_entry_reference_search($params, $string, $match, array($stored_value), TRUE);
        }
        return $results;
      }
      else {
        return array();
      }
    }
    else {
      // Exact match search for non-DN stored value
      $stored_values_filters = array();
      foreach ($stored_values as $stored_value) {
        $stored_values_filters[] = array(
          'attribute' => $stored_attr,
          'value' => $stored_value,
          'match' => 'equals',
        );
      }

      $match_filter = _ldap_entry_reference_create_ldap_filter_string($stored_values_filters, 'or');
      $match = 'equals';
    }
  }

  // Exit if no filter
  if (empty($match_filter)) {
    return array();
  }

  // Add extra filter for string searches
  if ($string_search_enabled && !empty($params['extra_filter'])) {
    $match_filter = '(&' . $match_filter . '(' . drupal_strtolower($params['extra_filter']) . '))';
  }

  // Add filter to search parameters
  $params['filter'] = $match_filter;

  // Trim base_dn
  if (!empty($params['base_dn'])) {
    $params['base_dn'] = trim($params['base_dn']);
  }

  // Invoke hook for results
  $results = array();
  try {
/** @todo: status check callback first ? *****/
    $results = ldap_entry_reference_search_plugin_invoke($params['search_plugin'], 'execute callback', $params);
  }
  catch (Exception $e) {
    $tokens = array_intersect_key($params, array('base_dn' => 1, 'filter' => 1));
    watchdog('ldap_entry_reference', 'An error occurred while searching: base dn="%base_dn", filter="%filter"', $tokens, WATCHDOG_NOTICE);
    return array();
  }

  if (empty($results) || !is_array($results)) {
    return array();
  }

  $processed_results = _ldap_entry_reference_process_results($results);
  if (empty($processed_results)) {
    return array();
  }

  $matches = array();
  foreach ($processed_results as $result) {
    if (empty($result['dn'])) {
      continue;
    }

    $search_value = t('unknown');
    $search_attr_trans = _ldap_entry_reference_ldap_filter_key_process($search_attr);
    if (array_key_exists($search_attr_trans, $result)) {
      $search_value =  $result[$search_attr_trans];
    }
    elseif (array_key_exists($search_attr, $result)) {
      $search_value = $result[$search_attr];
    }

    $label = $search_value;

    $matches[$search_value] = array(
      'dn' => $result['dn'],
      $search_attr => $search_value,
      $search_attr_trans => $search_value,
      'label' => $label,
      'rendered' => t('@label', array(
        '@label' => $label,
      )),
      'result' => $result,
    );
  }

  return $matches;
}


// -----------------------------------------------------------------------
// Helpers

/**
 * Returns an LDAP filter string
 *
 * This function can be used in array_map() to build a list of '(dn={value})'
 *
 * @param $filters
 *   An array of filter definitions
 *   - attribute: The attribute name to filter
 *   - value: The raw value
 *   - match: The type of match - 'equals', 'starts_with', 'contains', 'ends_with'
 * @param $op
 *   A boolean operator for the entire list: 'and', 'or'
 *
 * @return
 *   The ldap filter string or an empty string if invalid
 */
function _ldap_entry_reference_create_ldap_filter_string($filters, $op = 'and') {
  $op_map = array('and' => '&', 'or' => '|');
  if (!is_array($filters) || empty($filters)) {
    return '';
  }

  $op = drupal_strtolower($op);
  if (!array_key_exists($op, $op_map)) {
    $op = 'and';
  }

  // build filter string for each item
  $filter_strings = array();
  foreach ($filters as $attr_name => $filter) {
    if (!is_array($filter) || empty($filter['attribute']) || !isset($filter['value'])) {
      continue;
    }

    // Process key
    $key = $filter['attribute'];
    $key = _ldap_entry_reference_ldap_filter_key_process($key);

    // Process value
    $value = _ldap_entry_reference_ldap_filter_value_process($filter['value']);

    // Skip invalid filter
    if ($value === '' && $value != $filter['value']) {
      continue;
    }

    // Add match type wildcards
    if (!empty($filter['match'])) {
      switch ($filter['match']) {
        case 'starts_with':
          $value .= '*';
          break;
        case 'contains':
          $value = '*' . $value . '*';
          break;
        case 'ends_with':
          $value = '*' . $value;
          break;
      }
    }

    $filter_strings[] = "({$key}={$value})";
  }

  // create combined filter string
  $combined_string = implode('', $filter_strings);
  if (count($filter_strings) > 1) {
    $combined_string = '(' . $op_map[$op] . $combined_string . ')';
  }

  return $combined_string;
}

/**
 * Filter string process function
 */
function _ldap_entry_reference_ldap_filter_value_process($value) {
  static $replacements = array(
    '\\' => '\5C',
    '*' => '\2A',
    '(' => '\28',
    ')'=>  '\29',
  );

  if (is_null($value)) {
    return '\00';
  }

  $value = strtr($value, $replacements);
  $value = trim($value);
  $value = drupal_strtolower($value);
  return $value;
}

/**
 * Translate a settings key to an LDAP key
 */
function _ldap_entry_reference_ldap_filter_key_process($key) {
  $key = drupal_strtolower(trim($key));
  if ($key == 'dn') {
    return 'distinguishedname';
  }

  return $key;
}

/**
 * Process LDAP results into a flatten array
 *
 * @param $raw_results
 *   An array of raw LDAP results
 *
 * @return
 *   An array of flattened results
 */
function _ldap_entry_reference_process_results($raw_results) {
  $return = array();

  foreach ($raw_results as $row => $raw_record) {
    if (!is_array($raw_record)) {
      continue;
    }

    $record = array_change_key_case($raw_record, CASE_LOWER);
    if (empty($record['dn'])) {
      continue;
    }

    $processed = array();
    foreach ($record as $attr_name => $attr_value) {
      if (is_numeric($attr_name) || $attr_name == 'count') {
        continue;
      }

      if (is_array($attr_value) && isset($attr_value[0])) {
        $processed[$attr_name] = $attr_value[0];
      }
      else {
        $processed[$attr_name] = $attr_value;
      }
    }

    $return[$row] = $processed;
  }

  return $return;
}
