<?php

define('RECORD_FEATURE_BASE_PATH', 'admin/structure/features/record');

/**
 * Implementation of hook_help().
 */
function record_feature_help($path, $arg) {
  $output = '';
  switch ($path) {
    case 'admin/help#record_feature':
      $output .= '<p>'. t(
        'This module started from the idea to be able to <em>record</em> a !features. Well, not the entire feature of course, but parts of it that are hard to backtrack when you started creating the feature. Even more specific: the !strongarm part of a feature. If you want your feature to be truly "activate module and go"-style, !strongarm is simply unmissable.',
        array(
          '!features' => l(t('feature'), 'http://drupal.org/project/features', array('attributes' => array('rel' => 'external'))),
          '!strongarm' => l(t('Strongarm'), 'http://drupal.org/project/strongarm', array('attributes' => array('rel' => 'external')))
        )
      ) .'</p>';
      $output .= '<p>'. t('What <strong>variable was changed</strong> during the creation of a feature is really hard to <strong>track</strong>. You\'d have to inspect all the form elements to see how the variable could be named. Could be, meaning that you do not get the correct variable name by just inspecting form elements. Multiple elements could be stored in one variable etc. As an extra option, you can also <strong>track changes to permissions</strong> and export them too.') .'</p>';
      $output .= '<p>'. t('An <strong>overview of both the variable changes and permission changes</strong> will be supplied when the recording has stopped. You can <strong>easily select what changes you would like to be exported or not</strong>.') .'</p>';
      break;
    case RECORD_FEATURE_BASE_PATH:
      $output .= '<p>'. t('On this page you can add new features and you\'ll find an overview of features already present.').'</p>';
      $output .= '<h3>'.t('Add a feature').'</h3>';
      $output .= '<p>'. t('Best would be to select an <em>existing feature</em> from the dropdownlist. The features in that list are features that are created using the features module. When a feature is added from the dropdownlist, it will no longer be available there.') .'</p>';
      $output .= '<p>'. t('You can also create a <em>non-existant feature</em> by ticking the corresponding checkbox. This way, you will create a feature that does not exist according to the features module!') .'</p>';
      $output .= '<p>'. t('The <em>options</em> allow you to indicate what changes you would like to track. Currently available is tracking changes for <em>permissions</em> and <em>variables</em>. Variables are used to store various module settings.') .'</p>';
      $output .= '<p>'. t('<em>Start recording immediately</em> does exactly what it says. If there is a recording in progress, the data collected for it will be stored first, before stopping the recording session. Next, a new recoding session will be started for the newly created/added feature.') .'</p>';
      $output .= '<h3>'.t('Recording data and editing a feature').'</h3>';
      $output .= '<p>'. t('There are several actions avaiable for each feature:') .'</p>';
      $output .= '<ul><li>'.t('<em>View</em>: view and export recorded data').'</li>';
      $output .= '<li>'.t('<em>Edit</em>: change options for a feature').'</li>';
      $output .= '<li>'.t('<em>Flush</em>: remove all recorded data for a feature').'</li>';
      $output .= '<li>'.t('<em>Delete</em>: delete the feature and all its data. This will <strong>not</strong> influence features created by the Features module!').'</li>';
      $output .= '<li>'.t('<em>Start/stop recording</em>: start or stop a recording session').'</li></ul>';
      break;
    case RECORD_FEATURE_BASE_PATH . '/%':
      $output .= '<p>'. t('This page is a multistep form:').'</p>';
      $output .= '<ol><li>'. t('The first step shows all data recorded for this feature. Use the checkboxes to indicate what changes you would like to export for this feature, and click the <em>Export feature</em> button.').'</li>';
      $output .= '<li>'. t('Now you are in the next step of the form and the page will show the necessary instructions to allow you to export the requested data.') .'</li></ol>';
      break;
    case RECORD_FEATURE_BASE_PATH . '/%/edit':
      $output .= '<p>'. t('On this page you can change the options for this feature:').'</p>';
      $output .= '<ol><li>'. t('Record additional data by enabeling additional options.').'</li>';
      $output .= '<li>'. t('Remove data by disabeling certain options. Data will be removed when the next recording session is finished.').'</li></ol>';
      break;
  }
  return $output;
}

/**
 * Implementation of hook_init()
 */
function record_feature_init() {
  $feature = variable_get('record_feature_recording', FALSE);
  // The && part of the if is to prevent the warning message from showing after
  // recording has been stopped. Not too happy about it, but feel free to offer
  // a better solution ;-)
  if ($feature && arg(5) != 'togglerec') {
    $link = l(
      t('stop recording'),
      RECORD_FEATURE_BASE_PATH . '/'.$feature['name'].'/togglerec'
    );
    $changes = t('changes to');
    foreach ($feature['options'] as $key => $value) {
      if ($value) {
        $changes .= ' <strong>'.t($key).'</strong>,';
      }
    }
    // Remove last comma.
    $changes = rtrim($changes, ',');
    // Replace last comma, if present, with ' and '. This way the module is
    // future proof if more stuff than just variables & permissions would be
    // recorded.
    if (strrpos($changes, ',')) {
      $changes = substr_replace($changes, ' '.t('and').' ', strrpos($changes, ','), 1);
    }
    // Try to prevent double messages and DON'T clear the queue!
    $messages = drupal_get_messages('warning record', FALSE);
    if (empty($messages))
    {
      // $type is not enforced to be status, warning, or error:
      // http://api.drupal.org/api/function/drupal_set_message/6#comment-1328
      // so we use it to easily find ourselves.
      drupal_set_message(t('You are currently recording !changes for %feature. You can !link anytime.', array('%feature' => $feature['name'], '!changes' => $changes, '!link' => $link)), 'warning record');
    }
  }
}

/**
 * Implementation of hook_perm()
 */
function record_feature_permission() {
  return array(
    'access record feature' => array(
      'title' => t('Access the record feature module'),
    )
  );
}

/**
 * Implementation of hook_menu()
 */
function record_feature_menu() {
  $items = array();

  $items[RECORD_FEATURE_BASE_PATH] = array(
    'title' => t('Record feature'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('record_feature_overview_form'),
    'access callback' => 'user_access',
    'access arguments' => array('access record feature'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/record_feature.admin.inc',
    'weight' => 50,
  );
  $items[RECORD_FEATURE_BASE_PATH . '/%'] = array(
    'title' => t('View recorded feature'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('record_feature_view_feature_form', 4),
    'access callback' => 'user_access',
    'access arguments' => array('access record feature'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/record_feature.admin.inc',
  );
  $items[RECORD_FEATURE_BASE_PATH . '/%/edit'] = array(
    'title' => t('Edit'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('record_feature_edit_feature_form', 4),
    'access callback' => 'user_access',
    'access arguments' => array('access record feature'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/record_feature.admin.inc',
    'weight' => 46,
  );
  $items[RECORD_FEATURE_BASE_PATH . '/%/flush'] = array(
    'title' => t('Flush'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('record_feature_flush_feature_form', 4),
    'access callback' => 'user_access',
    'access arguments' => array('access record feature'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/record_feature.admin.inc',
    'weight' => 47,
  );
  $items[RECORD_FEATURE_BASE_PATH . '/%/delete'] = array(
    'title' => t('Delete'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('record_feature_delete_feature_form', 4),
    'access callback' => 'user_access',
    'access arguments' => array('access record feature'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/record_feature.admin.inc',
    'weight' => 48,
  );
  $items[RECORD_FEATURE_BASE_PATH . '/%/togglerec'] = array(
    'title' => t('Start/stop recording'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('record_feature_toggle_recording_form', 4),
    'access callback' => 'user_access',
    'access arguments' => array('access record feature'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/record_feature.admin.inc',
    'weight' => 49,
  );

  return $items;
}

/**
 * Implementation of hook_theme()
 */
function record_feature_theme() {
  return array(
    'record_feature_view_feature_form' => array('render element' => 'form'),
  );
}

/**
 * Helper function to get all stored features
 * 
 * @return array Associative array of features with name, data and status.
 */
function _record_feature_get_features() {
  $sql = "SELECT name, data, status FROM {recorded_features} WHERE name <> 'record_feature_temp_data' ORDER BY name ASC";
  $result = db_query($sql);

  $features = array();
  $i = 0;
  foreach($result as $row) {
    $features[$i]['name'] = $row->name;
    $features[$i]['data'] = $row->data;
    $features[$i]['status'] = $row->status;
    $i++;
  }
  return $features;
}

/**
 * Helper function to start actual recording
 *
 * @param feature Name of the feature
 * @param new     Whether or not this feature has just been created
 */
function _record_feature_start_recording($feature, $new = FALSE) {
  $sql = "UPDATE {recorded_features} SET status = 1 WHERE name = :name";
  if ($new) {
    // We have a situation in the DB where 2 features are set to status = 1.
    $sql = "UPDATE {recorded_features} SET status = 0 WHERE status = 1 AND name <> :name";
  }
  $result = db_query($sql, array(':name' => $feature));
  if ($result) {
    // If a recording is in progress, save recorded data first.
    $recording = variable_get('record_feature_recording', FALSE);
    if ($recording) {
      _record_feature_stop_recording($recording['name']);
    }

    $options = _record_feature_get_options($feature);
    if ($options['variables']) {
      // Save current variables state.
      global $conf;
      $data['variables'] = $conf;
    }
    if ($options['permissions']) {
      // Save current permissions state.
     $data['permissions'] = _record_feature_get_all_perms();
    }
    $feature_obj = new stdClass();
    $feature_obj->name = 'record_feature_temp_data';
    $feature_obj->data = serialize($data);
    $feature_obj->status = 0;
    $result = drupal_write_record('recorded_features', $feature_obj);
    if ($result) {
      $sql = "SELECT options FROM {recorded_features} WHERE name = :name";
      $options = unserialize(db_query($sql, array(':name' => $feature))->fetchField());
      $recording['name'] = $feature;
      $recording['options'] = $options;
      variable_set('record_feature_recording', $recording);
      drupal_set_message(t('Started recording data for feature %name.', array('%name' => $feature)));
    }
  }
  else {
    drupal_set_message(t('Failed to start recording data for feature %name.', array('%name' => $feature)), 'error');
  }
}

/**
 * Helper function to stop recording and store the data to the database
 *
 * @param feature Name of the feature
 */
function _record_feature_stop_recording($feature) {
  $recording = variable_get('record_feature_recording', FALSE);
  // Make sure this stop call is from the actual feature being recorded.
  if ($feature == $recording['name']) {
    $feature_obj = _record_feature_process_data($recording);

    // Update data.
    $result = drupal_write_record('recorded_features', $feature_obj, 'name');
    if ($result) {
      drupal_set_message(t('New data sucessfully stored for feature %name.', array('%name' => $feature_obj->name)));
      // Delete temporary data.
      $sql = "DELETE FROM {recorded_features} WHERE name = 'record_feature_temp_data'";
      $result = db_query($sql);
      if ($result === FALSE) {
        drupal_set_message(t('Unable to delete data that was being recorded for feature %name!', array('%name' => $feature_obj->name)), 'error');
      }
      else {
        variable_del('record_feature_recording');
      }
    }
  }
  else {
    drupal_set_message(t('No data is being recorded for feature %name!', array('%name' => $feature)), 'error');
  }
}

/**
 * Helper function to process the recorded data
 *
 * @param  feature Associative array containing name and options, which in turn
                   is another associative array containing the recording options
                   for this feature.
 * @return Object  recorded_features object
 */
function _record_feature_process_data($feature) {
  // Get stored data from before recording started.
  $rec_data = _record_feature_get_data('record_feature_temp_data');
  // Get previously recorded data if any.
  $old_data = _record_feature_get_data($feature['name']);

  if ($feature['options']['variables']) {
    $var_changes = _record_feature_process_variables_data($rec_data['variables'], $old_data['variables']);
  }
  else {
    $var_changes = NULL;
  }

  if ($feature['options']['permissions']) {
    $perm_changes = _record_feature_process_permissions_data($rec_data['permissions'], $old_data['permissions']);
  }
  else {
    $perm_changes = NULL;
  }
  // Prepare object.
  $new_data['variables'] = $var_changes;
  $new_data['permissions'] = $perm_changes;

  $feature_obj = new stdClass();
  $feature_obj->name = $feature['name'];
  $feature_obj->data = serialize($new_data);
  $feature_obj->status = 0;

  return $feature_obj;
}

/**
 * Helper function to process recorded variables data
 *
 * @param  rec_data Data from before the recording
 * @param  old_data Data from previous recording session
 *
 * @return Array    All modified variables and their original/modified values.
 */
function _record_feature_process_variables_data($rec_data, $old_data) {
  // Get current variable state.
  global $conf;
  // Store the differences.
  $variables_ori = array_diff_assoc($rec_data, $conf); // Original values.
  $variables_new = array_diff_assoc($conf, $rec_data); // Modified values.

  // Remove our temporary variable.
  unset($variables_new['record_feature_recording']);
  // Next line should not be necessary, but just in case. Won't hurt (could have
  // gone wrong somewhere ;-).
  unset($variables_ori['record_feature_recording']);

  // Now for the actual processing
  $var_changes = array();
  foreach ($variables_new as $key => $value) {
    // Get new value.
    $var_changes[$key]['modified'] = $value;
    if (array_key_exists($key, $variables_ori)) {
      // Get original value if it existed.
      $var_changes[$key]['original'] = $variables_ori[$key];
    }
    else {
      $var_changes[$key]['original'] = NULL;
    }
  }
  // Append new data if we found previousely recorded data.
  if (is_array($old_data)) {
    $var_changes = array_merge($old_data, $var_changes);
  }
  // Order keys (=variables) alphabetically.
  ksort($var_changes);

  return $var_changes;
}

/**
 * Helper function to process recorded permissions data
 *
 * @param  rec_data Data from before the recording
 * @param  old_data Data from previous recording session
 *
 * @return Array    All modified permissions and their granted/revoked state.
 */
function _record_feature_process_permissions_data($rec_data, $old_data) {
  // Get current permissions state.
  $perms = _record_feature_get_all_perms();

  // Check who has the most roles, since we use that one as a lead.
  $process_old = $rec_data;
  $process_new = $perms;
  if (count($rec_data) < count($perms)) {
    $process_old = $perm;
    $process_new = $rec_data;
  }
  // Store the differences.
  $perm_changes = array();
  foreach ($process_old as $key => $value) {
    if (array_key_exists($key, $process_new)) {
      $permissions_rev = array_diff($value, $process_new[$key]); // Permissions revoked.
      $permissions_add = array_diff($process_new[$key], $value); // Permissions granted.
      // Only add when actual changes happened.
      if (!empty($permissions_rev) || !empty($permissions_add)) {
        // Sort alphabetically.
        sort($permissions_rev, SORT_STRING);
        sort($permissions_add, SORT_STRING);
        $perm_changes[$key]['granted'] = $permissions_add;
        $perm_changes[$key]['revoked'] = $permissions_rev;
      }
    }
  }
  // Append new data if we found previousely recorded data and make sure we
  // don't have permissions that are both granded AND revoked.
  if (is_array($old_data) && !empty($perm_changes)) {
    foreach ($old_data as $key => $value) {
      // Remove revoked from granted.
      $old_data[$key]['granted'] = array_diff($old_data[$key]['granted'], $perm_changes[$key]['revoked']);
      // Remove granted from revoked.
      $old_data[$key]['revoked'] = array_diff($old_data[$key]['revoked'], $perm_changes[$key]['granted']);
    }
    $perm_changes = array_merge_recursive($old_data, $perm_changes);
  }
  else if (is_array($old_data)) {
    // No changes happened, but we have old data still, then we just store that.
    $perm_changes = $old_data;
  }

  // Order keys (=roles) alphabetically.
  ksort($perm_changes);

  return $perm_changes;
}

/**
 * Helper function to get the recorded data
 *
 * @param  feature Name of the feature
 * @return array   Associative array of variable names and their original and
 *                 modified values.
 */
function _record_feature_get_data($feature) {
  $sql = "SELECT data FROM {recorded_features} WHERE name = :name";
  $data = unserialize(db_query($sql, array(':name' => $feature))->fetchField());

  return $data;
}

/**
 * Helper function to get the status of a feature
 *
 * @param  feature Name of the feature
 * @return int     Status of the feature: 1 = recording, 0 = idle
 *
 */
function _record_feature_get_status($feature) {
  $sql = "SELECT status FROM {recorded_features} WHERE name = :name";
  $status = db_query($sql, array(':name' => $feature))->fetchField();

  return $status;
}

/**
 * Helper function to get the options of a feature
 *
 * @param  feature Name of the feature
 * @return Array   Associative array of options
 *
 */
function _record_feature_get_options($feature) {
  $sql = "SELECT options FROM {recorded_features} WHERE name = :name";
  $options = unserialize(db_query($sql, array(':name' => $feature))->fetchField());

  return $options;
}

/**
 * Helper function to delete recorded data of a feature
 *
 * @param  feature Name of the feature
 * @return int     Status of the feature: 1 = recording, 0 = idle
 *
 */
function _record_feature_flush_data($feature) {
  $feature_obj = new stdClass();
  $feature_obj->name = $feature;
  $feature_obj->data = '';

  $result = drupal_write_record('recorded_features', $feature_obj, 'name');

  return $result;
}

/**
 * Helper function to get all Drupal permissions
 *
 * @return Array associative array of roles and their permissions
 *
 */
function _record_feature_get_all_perms() {
  $sql = 'SELECT r.name, p.permission FROM {role} r LEFT JOIN {role_permission} p ON r.rid = p.rid';
  $result = db_query($sql);

  $permissions = array();
  foreach ($result as $row) {
    $permissions[$row->name][] = $row->permission;
  }
  return $permissions;
}
