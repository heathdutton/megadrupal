<?php

/**
 * @file
 * Cultura questionnaire creation and answer aggregation for students
 * participating in a Cultura Exchange.
 */

/**
 * Define a constant for our node type.
 */
define('CULTURA_DISCUSSION_NODE_TYPE', 'cultura_discussion');

/**
 * Define a constant for the discussion answers field.
 */
define('CULTURA_DISCUSSION_FIELD_ANSWERS', 'cultura_discussion_answers');

/**
 * Define a constant for the prompts field.
 */
define('CULTURA_QUESTIONNAIRE_FIELD_PROMPTS', 'cultura_questionnaire_prompts');

/**
 * Define a constant for a Cultura tagging vocabulary.
 */
define('CULTURA_TAGS', 'cultura_tags');

/**
 * Define a constant for our vocabulary machine name.
 */
define('CULTURA_QUESTIONNAIRE_VOCABULARY', 'cultura_question_types');

/**
 * Define constants for variable names for our pre-defined question types.
 */
define('CULTURA_QUESTIONNAIRE_WORD_ASSOCIATION', 'cultura_questionnaire_word_association');
define('CULTURA_QUESTIONNAIRE_SENTENCE_COMPLETION', 'cultura_questionnaire_sentence_completion');
define('CULTURA_QUESTIONNAIRE_SITUATION_REACTION', 'cultura_questionnaire_situation_reaction');
define('CULTURA_QUESTIONNAIRE_OTHER_DISCUSSION', 'cultura_questionnaire_other_discussion');

/**
 * Define a constant for discussion, questionnaire Question type fields.
 */
define('CULTURA_QUESTIONNAIRE_FIELD_QUESTION_TYPE', 'cultura_question_type');

/**
 * Implements hook_views_api().
 */
function cultura_discussion_views_api($module, $api) {
  if ($module == 'views' && $api == 'views_default') {
    return array('version' => 2);
  }
}

/**
 * Implements hook_node_view_alter().
 *
 * Do not display title on discussions with answers; it's redundant.
 */
function cultura_discussion_node_view_alter(&$build) {
  if ($build['#node']->type !== CULTURA_DISCUSSION_NODE_TYPE) {
    return;
  }
  $items = field_get_items('node', $build['#node'], CULTURA_QUESTIONNAIRE_FIELD_QUESTION_TYPE);
  $questionnaire_question_tid = ($items) ? $items[0]['tid'] : FALSE;
  $other_discussion_tid = variable_get(CULTURA_QUESTIONNAIRE_OTHER_DISCUSSION);
  if ($build['#view_mode'] == 'full' &&
    $questionnaire_question_tid != $other_discussion_tid) {
    drupal_set_title('');
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for cultura_discussion_node_form().
 *
 * Automatically sets Discussion node category to "Other Discussion Topics".
 */
function cultura_discussion_form_cultura_discussion_node_form_alter(&$form, &$form_state) {
  $tid = cultura_discussion_field_default_value($form['cultura_question_type']);
  $other_discussion_tid = variable_get(CULTURA_QUESTIONNAIRE_OTHER_DISCUSSION);
  if (!$tid || $tid == $other_discussion_tid) {
    $form['cultura_question_type'][LANGUAGE_NONE]['#value'] = $other_discussion_tid;
    $form[CULTURA_DISCUSSION_FIELD_ANSWERS]['#access'] = user_access('administer content types');
  }
  $form['cultura_question_type'][LANGUAGE_NONE]['#access'] = user_access('administer content types');
  if (module_exists('cultura_questionnaire')) {
    $form[CULTURA_QUESTIONNAIRE_FIELD_QUESTIONNAIRE]['#access'] = FALSE;
  }
/*
  $prompts =& $form[CULTURA_QUESTIONNAIRE_FIELD_PROMPTS][LANGUAGE_NONE];
  unset($prompts['add_more']);
  $prompts['#theme'] = 'field_multiple_value_form';
  $prompts['#after_build'] = array('field_form_element_after_build');
  $prompts['#cardinality'] = 1;
 */
}

/**
 * Return the default value if a given form field has one, FALSE otherwise.
 *
 * @param array $form_field
 *   An array representing a form field, e.g. provide $form['field_name'].
 * @return mixed
 *   Return an integer term id or FALSE if none.
 */
function cultura_discussion_field_default_value($form_field) {
  if (!isset($form_field[LANGUAGE_NONE]['#default_value']) ||
    empty($form_field[LANGUAGE_NONE]['#default_value'])) {
    return FALSE;
  }
  else {
    return $form_field[LANGUAGE_NONE]['#default_value'][0];
  }
}
