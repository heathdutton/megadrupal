<?php

/**
 * @file
 * This file is the main module file for adding fields to any content type
 * in a fast and efficient manner with minimal configurations
 * Scope: 
 * Creating a new field within a content type using Ajax
 * Cloning a field within same content type
 */

/**
 * Implements hook_help().
 */
function quick_field_help($path, $arg) {
  switch ($path) {
    case 'admin/help#quick_field':
      $output = '<p>' . t('The SN Quick Field Module to add fields to any content
        type in a fast and efficient manner with minimal configurations.
        Other feature of this module is to clone a field within same content type.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_permission().
 */
function quick_field_permission() {
  return array(
    'administer quick_field' => array(
      'title' => t('Administer SN Quick Field'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function quick_field_menu() {
  // Create tabs for all possible bundles.
  foreach (entity_get_info() as $entity_type => $entity_info) {
    if ($entity_info['fieldable'] && $entity_type == 'node') {
      foreach ($entity_info['bundles'] as $bundle_name => $bundle_info) {
        if (isset($bundle_info['admin'])) {
          // Extract path information from the bundle.
          $path = $bundle_info['admin']['path'];

          // Determine whether this path caters for several bundles
          // (usually all) of one entity type, or just one.
          if (isset($bundle_info['admin']['bundle argument'])) {
            $bundle_arg = $bundle_info['admin']['bundle argument'];
          }
          else {
            // Otherwise, this path is for a single bundle.
            $bundle_arg = $bundle_name;
          }

          // Extract access information, providing defaults.
          $access = array_intersect_key($bundle_info['admin'], drupal_map_assoc(array('access callback', 'access arguments')));
          $access += array(
            'access callback' => 'user_access',
            'access arguments' => array('administer quick_field'),
          );

          // Menu item for cloning a bundle's fields en masse.
          // In some cases, $path is the same for every bundle, eg nodes, and
          // hence doing this here is redundant.
          $items["$path/fields-quick-add"] = array(
            'title' => 'Quick Add field',
            'page callback' => 'drupal_get_form',
            'page arguments' => array(
              'quick_field_add_new_field_form',
              $entity_type,
              $bundle_arg,
            ),
            'type' => MENU_LOCAL_TASK,
            'file' => 'add_field.admin.inc',
            'weight' => 4,
          ) + $access;
          $items["$path/clone-field"] = array(
            'title' => 'Quick Add - Clone fields',
            'page callback' => 'drupal_get_form',
            'page arguments' => array(
              'quick_field_clone_field_form',
              $entity_type,
              $bundle_arg,
            ),
            'type' => MENU_LOCAL_TASK,
            'file' => 'clone_field.admin.inc',
            'weight' => 5,
          ) + $access;
        }
      }
    }
  }
  return $items;
}

/**
 * Implements hook_theme().
 */
function quick_field_theme() {
  return array(
    'quick_field_add_new_field_form' => array(
      'render element' => 'form',
      'template' => 'quick-add-field-form',
    ),
  );
}

/**
 * Checks if a field machine name is taken.
 *
 * @param string $value
 *   The machine name, not prefixed with 'field_'.
 *
 * @return bool
 *   Whether or not the field machine name is taken.
 *   Currently this function returns FALSE in everycase.
 */
function _quick_field_field_name_exists($value) {
  return FALSE;
}
