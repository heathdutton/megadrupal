<?php
/**
 * @file
 * Drupal RestMini Service Example module.
 */


/**
 * Registers services and their endpoints and (HTTP) methods.
 *
 * Implements hook_restmini_service().
 *
 * @return array
 */
function restmini_service_example_restmini_service() {
  return array(
    // Base route names (machine name, max. length 32).
    'service_restmini_example' => array(
      // Services (machine name, max. length 32).
      'example' => array(
        // Endpoints (machine name, max. length 32).
        'hello' => array(
          // Methods.
          //'HEAD' => array(...)
          'GET' => array(
            'callback' => 'restmini_service_example_hello',
            'enabled' => TRUE,
            // permission defaults to 'access content'.
          ),
          //'POST' => array(...)
          //'PUT' => array(...),
          //'DELETE' => array(...),
        ),
        'thingie' => array(
          // Methods.
          //'HEAD' => array(...)
          'HEAD' => array(
            'callback' => 'RestMiniServiceExampleThingie::endpoint',
            'enabled' => TRUE,
            'file' => 'inc/RestMiniServiceExampleThingie.inc',
            'parameters' => array(
              'path' => array(
                'id' => array(
                  'optional' => TRUE,
                  'pattern' => 'integer_positive',
                ),
              ),
            ),
          ),
          'GET' => array(
            'callback' => 'RestMiniServiceExampleThingie::endpoint',
            'enabled' => TRUE,
            'file' => 'inc/RestMiniServiceExampleThingie.inc',
            'parameters' => array(
              'path' => array(
                'id' => array(
                  'optional' => TRUE,
                  'pattern' => 'integer_positive',
                ),
              ),
            ),
          ),
          'POST' => array(
            'callback' => 'RestMiniServiceExampleThingie::endpoint',
            'enabled' => TRUE,
            'file' => 'inc/RestMiniServiceExampleThingie.inc',
            'parameters' => array(
              'post' => array(
                'name' => array(
                  // 'optional' => FALSE, ~ default; no reason to defined it.
                  'max_length' => '40',
                ),
                'color' => array(
                  'max_length' => '64',
                ),
              ),
            ),
          ),
          'PUT' => array(
            'callback' => 'RestMiniServiceExampleThingie::endpoint',
            'enabled' => TRUE,
            'file' => 'inc/RestMiniServiceExampleThingie.inc',
            'parameters' => array(
              'path' => array(
                'id' => array(
                  'pattern' => 'integer_positive',
                ),
              ),
              'post' => array(
                'name' => array(
                  'optional' => TRUE,
                  'max_length' => '40',
                ),
                'color' => array(
                  'optional' => TRUE,
                  'max_length' => '64',
                ),
              ),
            ),
          ),
          'DELETE' => array(
            'callback' => 'RestMiniServiceExampleThingie::endpoint',
            'enabled' => TRUE,
            'file' => 'inc/RestMiniServiceExampleThingie.inc',
            'parameters' => array(
              'path' => array(
                'id' => array(
                  // An integer >=1, or string '*'.
                  'except_value' => '*',
                  'pattern' => 'integer_positive',
                ),
              ),
            ),
          ),
        ),
      ),
    ),
  );
}

/**
 * Implements hook_restmini_service_test().
 *
 * @code
 * drush restmini-service-test 'http://ser.ver' 'restmini_service_example' --output-target=watchdog
 * @endcode
 *
 * @return array
 */
function restmini_service_example_restmini_service_test() {
  return array(
    // Test name (doesn't have to be unique across test modules).
    'hello_thingie' => array(

      // First step.
      'reset' => array(
        // Base route name.
        'service_restmini_example' => array(
          // Service.
          'example' => array(
            // Endpoint - list requests.
            'thingie' => array(
              array(
                'description' => 'delete all thingies',
                // 'method' is the only required property, all the others are optional.
                'method' => 'DELETE',
                'parameters' => array(
                  // All argument types (path|get|post) are optional.
                  'path' => array(
                    '*',
                  ),
                ),
              ),
            ),
          ),
        ),
      ),

      // Second step.
      'roll' => array(
        // Base route name.
        'service_restmini_example' => array(
          // Service.
          'example' => array(
            // Endpoint - list requests.
            'hello' => array(
              array(
                // 'method' is the only required property, all the others are optional.
                'description' => 'just call hello',
                'method' => 'GET', // Required.
                // 'operation' index|retrieve is allowed for HEAD and GET; ignored for other method.
                'operation' => 'index',
                'parameters' => array(
                  // All argument types are optional.
                  // Numerically indexed array.
                  'path' => array(),
                  // Associative array.
                  'get' => array(),
                  // Associative array.
                  'post' => array(),
                ),
                // Status code criterion.
                'assert_status' => 200,
                // Stop the whole test if unsuccessful response status.
                'stop_on_failure' => TRUE,
                // 'RestMiniClient' or class that extends RestMiniClient.
                'client_class' => 'RestMiniClient',
                // RestMiniClient constructor or make() for supported options.
                'client_options' => array(),
              ),
            ),
            // Endpoint - list requests.
            'thingie' => array(
              array(
                'method' => 'GET',
                'operation' => 'index',
              ),
              array(
                'method' => 'POST',
                'parameters' => array(
                  'post' => array(
                    // A RestMiniServiceTestVar flags that we should use a value of a previous REST response of current test.
                    // [base route name], [service], [endpoint], [request no.] [, (optional) key path to value].
                    'name' => new RestMiniServiceTestVar('service_restmini_example', 'example', 'hello', 'index', 0),
                    'color' => 'green',
                  ),
                ),
              ),
              array(
                'method' => 'POST',
                'parameters' => array(
                  'post' => array(
                    'name' => 'second',
                    'color' => 'blue',
                  ),
                ),
              ),
              array(
                'method' => 'POST',
                'parameters' => array(
                  'post' => array(
                    'name' => 'third',
                    'color' => 'red',
                  ),
                ),
              ),
              array(
                'method' => 'POST',
                'parameters' => array(
                  'post' =>  array(
                    'name' => 'fourth',
                    'color' => 'yellow',
                  ),
                ),
              ),
              array(
                'method' => 'GET',
                'operation' => 'retrieve',
                'description' => 'third POST',
                'parameters' => array(
                  'path' => array(
                    // A RestMiniServiceTestVar flags that we should use a value of a previous REST response of current test.
                    // [base route name], [service], [endpoint], [request no.] [, (optional) key path to value].
                    new RestMiniServiceTestVar('service_restmini_example', 'example', 'thingie', 'create', 2)
                  ),
                ),
              ),
              array(
                'method' => 'PUT',
                'description' => 'third POST',
                'parameters' => array(
                  'path' => array(
                    // A RestMiniServiceTestVar flags that we should use a value of a previous REST response of current test.
                    // [base route name], [service], [endpoint], [request no.] [, (optional) key path to value].
                    new RestMiniServiceTestVar('service_restmini_example', 'example', 'thingie', 'create', 2)
                  ),
                  'post' => array(
                    'color' => 'orange (updated)',
                  ),
                ),
                'assert_status' => 204, // No Content.
              ),
              array(
                'method' => 'DELETE',
                'description' => 'second POST',
                'parameters' => array(
                  'path' => array(
                    // A RestMiniServiceTestVar flags that we should use a value of a previous REST response of current test.
                    // [base route name], [service], [endpoint], [request no.] [, (optional) key path to value].
                    new RestMiniServiceTestVar('service_restmini_example', 'example', 'thingie', 'create', 1)
                  ),
                ),
                'assert_status' => 204, // No Content.
              ),
              array(
                'method' => 'HEAD',
                'operation' => 'index',
              ),
              array(
                'method' => 'GET',
                'operation' => 'index',
                'description' => 'again',
              ),
            ),
          ),
        ),
      ),
    ),
  );
}

/**
 * Callback for the example service's hello endpoint.
 *
 * @return string
 */
function restmini_service_example_hello() {
  return t('Hello!');
}
