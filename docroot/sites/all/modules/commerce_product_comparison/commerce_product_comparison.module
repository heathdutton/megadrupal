<?php

/**
 * @file
 * Module file for commerce_product_comparison module.
 */

/**
 * Implements hook_permission().
 */
function commerce_product_comparison_permission() {
  return array(
    'compare properties' => array(
      'title' => t('Compare properties of different entities'),
    ),
    'configure product comparison' => array(
      'title' => t('Configure product comparison'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function commerce_product_comparison_menu() {
  // Comparison page.
  $items['properties/compare'] = array(
    'title' => 'Comparison',
    'page callback' => 'commerce_product_comparison_compare_page',
    'file' => 'commerce_product_comparison.pages.inc',
    'access arguments' => array('compare properties'),
    'type' => MENU_CALLBACK,
  );
  // Allow to delete a product from the comparison page and block.
  $items['properties/compare/delete/%/%'] = array(
    'title' => 'Delete from compare list',
    'page callback' => 'commerce_product_comparison_compare_delete',
    'page arguments' => array(3, 4),
    'file' => 'commerce_product_comparison.pages.inc',
    'access arguments' => array('compare properties'),
    'type' => MENU_CALLBACK,
  );
  // Ajax callback on deleting a product form the comparison table.
  $items['ctools_ajax_compare/%/%ctools_js'] = array(
    'title' => 'Delete from comparison table',
    'page callback' => 'commerce_product_comparison_refresh_properties_compare_table',
    'page arguments' => array(1, 2),
    'file' => 'commerce_product_comparison.pages.inc',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  // If the install profile is commerce_kickstart move item.
  // Commerce kickstart changes the menu items structure and Title is too long.
  $current_install_profile = drupal_get_profile();
  if ((!empty($current_install_profile)) && ($current_install_profile == "commerce_kickstart") && (!empty($items['admin/commerce/config/advanced-settings']))) {
    // Short title.
    $items['admin/commerce/config/commerce_pay_with_a_tweet_config']['title'] = 'Commerce PWAT';
    // Add a parent item.
    $items['admin/commerce/config/commerce_pay_with_a_tweet_config']['parent'] = 'admin/commerce/config/advanced-settings';
  }
  // Admin configuration page.
  $items['admin/commerce/config/compare'] = array(
    'title' => 'Comparison settings',
    'description' => 'Manage the compare page',
    'access arguments' => array('configure product comparison'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_product_comparison_set_fields_form'),
    'file' => 'commerce_product_comparison.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/commerce/config/compare/fields'] = array(
    'title' => 'Fields mapping',
    'description' => 'Manage fields mapping',
    'access arguments' => array('configure product comparison'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1,
  );

  $items['admin/commerce/config/compare/advanced'] = array(
    'title' => 'Advanced settings',
    'description' => 'Manage advanced settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_product_comparison_config_form'),
    'access arguments' => array('configure product comparison'),
    'file' => 'commerce_product_comparison.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );

  return $items;
}

/**
 * Implements hook_entity_view().
 */
function commerce_product_comparison_entity_view($entity, $type, $view_mode, $langcode) {
  if (!user_access('compare properties')) {
    return;
  }

  // Never display fields inside block list view.
  if (strpos($view_mode, 'commerce_product_comparison') !== FALSE) {
    return;
  }
  // If product_display then we insert our add to comparison form
  // in commerce_product_comparison field of the entity.
  if (!empty($entity->type) && $field_commerce_product_reference = commerce_product_comparison_entity_is_product_display($entity)) {
    // Load current product.
    if (!empty($entity->content[$field_commerce_product_reference][0]['product_id']['#value'])) {
      $product = commerce_product_load($entity->content[$field_commerce_product_reference][0]['product_id']['#value']);
    }
    elseif (!empty($entity->content[$field_commerce_product_reference]['#object']->product_id)) {
      $product = commerce_product_load($entity->content[$field_commerce_product_reference]['#object']->product_id);
    }
    if (!empty($product)) {
      $extra_fields = field_extra_fields_get_display('commerce_product', field_extract_bundle('commerce_product', $product), 'node_' . $view_mode);
      // Verify if button should be displayed for this view mode.
      if (isset($extra_fields['commerce_product_comparison']['visible']) && $extra_fields['commerce_product_comparison']['visible']) {
        $entity->content['commerce_product_comparison'] = drupal_get_form('properties_compare_add_form_' . commerce_product_comparison_create_key('commerce_product', $product), 'commerce_product', $product, $entity->nid);
        // Add class with the nid so we can refresh the form in ajax later.
        $entity->content['commerce_product_comparison']['#attributes'] = array('class' => array('compare-form' . $entity->nid));
      }
    }
  }
}


/**
 * Implements hook_field_extra_fields().
 */
function commerce_product_comparison_field_extra_fields() {
  $extra = array();
  // Add the commerce_product_comparison extra field to all these bundles.
  foreach (field_info_bundles('commerce_product') as $bundle => $values) {
    $extra['commerce_product'][$bundle]['display'] = array(
      'commerce_product_comparison' => array(
        'label' => t('Properties compare button'),
        'description' => t('Displays a button that allows to add the entity to the comparison list'),
        'weight' => 10,
      ),
    );
  }
  return $extra;
}

/**
 * Implements hook_forms().
 */
function commerce_product_comparison_forms($form_id, $args) {
  $forms = array();

  // For each form id containing properties_compare_add
  // we set the callback to commerce_product_comparison_add_form.
  if (strpos($form_id, 'properties_compare_add') !== FALSE) {
    $forms[$form_id] = array(
      'callback' => 'commerce_product_comparison_add_form',
    );
  }
  // For each form id == commerce_product_comparison_add_product_to_cart_form_
  // set the callback to commerce_product_comparison_add_product_to_cart_form.
  if (strpos($form_id, 'commerce_product_comparison_add_product_to_cart_form_') !== FALSE) {
    $forms[$form_id] = array(
      'callback' => 'commerce_product_comparison_add_product_to_cart_form',
    );
  }
  return $forms;
}

/**
 * Form builder function; displays a form to add an entity to the compare list.
 *
 * @param string $entity_type
 *   The current entity type (commerce_product).
 * @param object $entity
 *   The current entity object.
 * @param int $nid
 *   The current product display (node).
 *
 * @return array
 *   The add to compare list form definition.
 */
function commerce_product_comparison_add_form($form, &$form_state, $entity_type, $entity, $nid) {
  // The entity_type of the entity to add to the compare list.
  $form['entity_type'] = array(
    '#type' => 'value',
    '#value' => $entity_type,
  );
  // The entity to add to the compare list.
  $form['entity'] = array(
    '#type' => 'value',
    '#value' => $entity,
  );
  // The nid of the product display.
  $form['nid'] = array(
    '#type' => 'value',
    '#value' => $nid,
  );
  // Check if the current product already exists in compare list.
  $exists = commerce_product_comparison_list_exists($entity_type, $entity);

  // Check if the compare list isn't already full (4 products max).
  $full = commerce_product_comparison_list_is_full();
  $form['submit'] = array(
    '#type' => 'submit',
    '#disabled' => $exists || $full,
    '#value' => $exists ? t('In comparison') : ($full ? t('Comparison list full') : t('Add to compare list')),
    '#submit' => array('commerce_product_comparison_add_form_submit'),
    '#ajax' => array(
      'callback' => 'commerce_product_comparison_refresh_comparison_form',
      'wrapper' => 'cpc-wrapper' . $entity->product_id,
    ),
    '#prefix' => '<div id="cpc-wrapper' . $entity->product_id . '">',
    '#suffix' => '</div>',
  );
  return $form;
}


/**
 * Submit callback for add form.
 */
function commerce_product_comparison_add_form_submit($form, &$form_state) {
  // Add the product to the compare list.
  commerce_product_comparison_list_add($form_state['values']['entity_type'], $form_state['values']['entity'], $form_state['values']['nid']);
}

/**
 * Ajax callback for the comparison form.
 *
 * @return array
 *   Return an ajax command to replace html on current page.
 */
function commerce_product_comparison_refresh_comparison_form(&$form, &$form_state) {
  // Refresh the block compare list.
  $block = module_invoke('commerce_product_comparison', 'block_view', 'compare_list');
  $block['content']['#attributes'] = array(
    'id' => array('commerce-product-comparison-list-form'),
  );
  $block = drupal_render($block);
  $form_rebuilt = drupal_rebuild_form($form['#form_id'], $form_state);
  $form_rebuilt['#attributes'] = array(
    'class' => array(
      'compare-form' . $form['nid']['#value'],
    ),
  );

  // Add ajax commands to do the above and return them.
  $commands = array();
  $commands[] = ajax_command_replace('#commerce-product-comparison-list-form', $block);
  $commands[] = ajax_command_replace('.compare-form' . $form['nid']['#value'], drupal_render($form_rebuilt));

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Alter the ajax callback when refreshing commerce cart attributes.
 */
function commerce_product_comparison_commerce_cart_attributes_refresh_alter(&$commands, $form, &$form_state) {
  // We set the current product_id.
  $product = commerce_product_load($form_state['default_product']->product_id);
  $elements = drupal_get_form('properties_compare_add_form_' . commerce_product_comparison_create_key('commerce_product', $product), 'commerce_product', $product, $form_state['context']['entity_id']);
  $elements['#attributes'] = array('class' => array('compare-form' . $form_state['context']['entity_id']));
  $form_rendered = drupal_render($elements);
  // Refresh the "Add to comparison" button in product display.
  $command = ajax_command_replace('.compare-form' . $form_state['context']['entity_id'], $form_rendered);
  $commands[] = $command;
}


/**
 * Build a unique string key for the given entity.
 *
 * @param string $entity_type
 *   Type of entity (commerce_product).
 * @param object $entity
 *   Entity object.
 *
 * @return string
 *   A unique key in the form of entitytype_id.
 */
function commerce_product_comparison_create_key($entity_type, $entity) {
  list($id) = entity_extract_ids($entity_type, $entity);

  return $entity_type . '_' . $id;
}

/**
 * Returns the current compare list.
 *
 * @return array
 *   Returns the compare list as an array by reference.
 */
function &commerce_product_comparison_list() {
  if (!isset($_SESSION['commerce_product_comparison_list'])) {
    $_SESSION['commerce_product_comparison_list'] = array();
  }
  return $_SESSION['commerce_product_comparison_list'];
}

/**
 * Checks if the compare list is full (4 products maximum).
 */
function commerce_product_comparison_list_is_full() {
  $count = count(commerce_product_comparison_list());
  return $count >= variable_get('properties_compare_list_size', 5);
}

/**
 * Checks if an entity is already in the compare list.
 *
 * @param string $entity_type
 *   Entity type of the entity that should be checked.
 * @param object $entity
 *   Entity object that should be checked.
 *
 * @return bool
 *   Return a boolean.
 */
function commerce_product_comparison_list_exists($entity_type, $entity) {
  $list = commerce_product_comparison_list();
  list($id) = entity_extract_ids($entity_type, $entity);
  $key = $entity_type . '_' . $id;
  return isset($list[$key]);
}

/**
 * Delete an entity from the compare list.
 *
 * @param string $entity_type
 *   Entity type of the entity that should be removed.
 * @param int $entity_id
 *   Entity id of the entity that should be removed.
 */
function commerce_product_comparison_list_delete($entity_type, $entity_id) {
  $list = &commerce_product_comparison_list();
  $id = $entity_type . '_' . $entity_id;
  if (isset($list[$id])) {
    unset($list[$id]);
  }
}

/**
 * Add a new entity to the compare list.
 *
 * @param string $entity_type
 *   Type of entity, for example node or comment.
 * @param object $entity
 *   Entity object.
 * @param object $nid
 *   The nid of the product display.
 */
function commerce_product_comparison_list_add($entity_type, $entity, $nid) {
  $list = &commerce_product_comparison_list();
  list($id) = entity_extract_ids($entity_type, $entity);
  $list[commerce_product_comparison_create_key($entity_type, $entity)] = array(
    'entity_type' => $entity_type,
    'entity_id' => $id,
    'nid' => $nid,
  );
}

/**
 * Clear the compare list.
 */
function commerce_product_comparison_list_clear() {
  $list = &commerce_product_comparison_list();
  $list = array();
}

/**
 * Implements hook_block_info().
 */
function commerce_product_comparison_block_info() {
  // Creates a block for displaying the compare list.
  $blocks['compare_list'] = array(
    'info' => t('Compare list'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function commerce_product_comparison_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'compare_list':
      // Do not display the block if there is no product in comparison
      // and if we are not on the properties/compare page.
      if (($list = commerce_product_comparison_list()) && current_path() != 'properties/compare') {
        $block['subject'] = t('Compare list');
        $block['content'] = drupal_get_form('commerce_product_comparison_list_form', $list);
      }
      else {
        // If there is no product in compare list, we return a empty div with
        // specific id so we can replace/update it with ajax later.
        $block['subject'] = t('Compare list');
        $block['content'] = '<div id="commerce-product-comparison-list-form"></div>';
      }
      break;
  }
  return $block;
}

/**
 * Form builder function; display comparison list.
 *
 * @param array $list
 *   The list of product currently in comparison.
 */
function commerce_product_comparison_list_form($form, &$form_state, $list) {
  drupal_add_css(drupal_get_path('module', 'commerce_product_comparison') . '/css/commerce_product_comparison.css');
  $items = array();
  $first = NULL;
  $noncomparable = FALSE;
  foreach ($list as $compare_item) {
    $entity = commerce_product_load($compare_item['entity_id']);
    if (!$entity) {
      // Entity could not be loaded, ignore and remove from list.
      commerce_product_comparison_list_delete($compare_item['entity_type'], $compare_item['entity_id']);
      continue;
    }

    // Get path to the product.
    $uri = entity_uri('node', node_load($compare_item['nid']));
    $uri['options'] += array('attributes' => array('class' => array('properties-compare-entity-link')));
    $suffix = '';
    $classes = array();
    // Add a class which displays whether the product is comparable or not.
    if (!$first) {
      $first = $compare_item + array('entity' => $entity);
      $classes[] = 'properties-comparable';
    }
    else {
      $comparable = commerce_product_comparison_is_comparable($first['entity_type'], $first['entity'], $compare_item['entity_type'], $entity);
      if (!$comparable) {
        $suffix = ' *';
        $noncomparable = TRUE;
      }
      $classes[] = $comparable ? 'properties-comparable' : 'properties-not-comparable';
    }

    $label = entity_label($compare_item['entity_type'], $entity);

    $entity_link = l($label . $suffix, $uri['path'], $uri['options']);
    ctools_include('ajax');
    ctools_include('cache');
    $redirect_path = array(
      'destination' => ctools_cache_get('simple::wizard::page', _commerce_product_comparison_get_unique_key()),
    );
    // Creates a link for deleting a product of the compare list from the block.
    $delete_link = l(t('Delete'), 'properties/compare/delete/' . $compare_item['entity_type'] . '/' . $compare_item['entity_id'], array('query' => $redirect_path, 'attributes' => array('class' => array('delete-from-comparison'))));

    $items[] = array(
      'data' => t('!entity_link !delete_link', array('!entity_link' => $entity_link, '!delete_link' => $delete_link)),
      'class' => $classes,
    );
  }

  $form['items'] = array(
    '#theme' => 'item_list',
    '#items' => $items,
  );

  $form['actions'] = array('#type' => 'actions');
  // Button to clear the list of all its products.
  $form['actions']['clear'] = array(
    '#type' => 'submit',
    '#submit' => array('commerce_product_comparison_list_clear'),
    '#value' => t('Clear'),
    '#ajax' => array(
      'callback' => 'commerce_product_comparison_clear_ajax_callback',
    ),
  );
  // If more than one item in compare list, and if the products are comparable,
  // we display the "Compare" button.
  if (count($items) > 1 && !$noncomparable && !commerce_product_comparison_list_is_full()) {
    $form['actions']['compare'] = array(
      '#type' => 'submit',
      '#value' => t('Compare'),
      '#ajax' => array(
        'callback' => 'commerce_product_comparison_compare_ajax_callback',
      ),
    );
  }

  // Set the current path in the form so we can use it later on redirection.
  $form['current_path'] = array('#type' => 'hidden', '#value' => current_path());

  if ($noncomparable) {
    $form['notice'] = array(
      '#markup' => '<div class="properties-not-comparable-notice" >' . t('* Can not be compared with current selection.') . '</div>',
    );
  }
  elseif (commerce_product_comparison_list_is_full()) {
    $form['notice'] = array(
      '#markup' => '<div class="properties-not-comparable-notice" >' . t('There is too many items in the compare list (4 max).') . '</div>',
    );
  }
  return $form;
}

/**
 * Creates a unique key to store information with ctoos_cache_set.
 */
function _commerce_product_comparison_get_unique_key() {
  return substr(session_name(), 5, 12);
}

/**
 * Ajax callback redirecting to the properties/compare page.
 */
function commerce_product_comparison_compare_ajax_callback($form, &$form_state) {
  ctools_include('ajax');
  ctools_add_js('ajax-responder');
  $commands = array();
  $commands[] = ctools_ajax_command_redirect('properties/compare');
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Implements hook_preprocess_page().
 */
function commerce_product_comparison_preprocess_page(&$vars) {
  if (!path_is_admin(current_path())) {
    ctools_include('cache');
    // Get the previous path because when we are on properties/compare page if
    // we delete a product and there is only one left then it doesn't redirect
    // on previous page but always on node.
    $previous_path = ctools_cache_get('simple::wizard::page_previous', _commerce_product_comparison_get_unique_key());
    if (!empty($previous_path) && $previous_path != 'properties/compare') {
      // Set the current path in cache so we can use it later on redirection.
      if (current_path() != 'properties/compare' && current_path() != 'system/ajax' && arg(0) != 'ctools_ajax_compare') {
        ctools_cache_set('simple::wizard::page', _commerce_product_comparison_get_unique_key(), current_path());
      }
    }
    ctools_cache_set('simple::wizard::page_previous', _commerce_product_comparison_get_unique_key(), current_path());
  }
}

/**
 * Ajax callback to clear the compare list and refresh the page.
 */
function commerce_product_comparison_clear_ajax_callback($form, $form_state) {
  // Clear list and redirect to previous page (set in cache).
  commerce_product_comparison_list_clear();
  ctools_include('ajax');
  ctools_include('cache');
  ctools_add_js('ajax-responder');
  $redirect_path = ctools_cache_get('simple::wizard::page', _commerce_product_comparison_get_unique_key());
  $commands = array();
  $commands[] = ctools_ajax_command_redirect($redirect_path);
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Submit callback for block list form, redirect to comparison table.
 */
function commerce_product_comparison_list_form_compare_submit($form, &$form_state) {
  $form_state['redirect'] = 'properties/compare';
}

/**
 * Submit callback for block list form, clear compare list.
 */
function commerce_product_comparison_list_form_clear_submit($form, &$form_state) {
  commerce_product_comparison_list_clear();
}

/**
 * Checks if two entities can be compared.
 *
 * @param string $entity_type1
 *   Entity type of first entity.
 * @param object $entity1
 *   Object of first entity.
 * @param string $entity_type2
 *   Entity type of second entity.
 * @param object $entity2
 *   Object of second entity.
 *
 * @return bool
 *   TRUE if entities can be compared, FALSE otherwise.
 */
function commerce_product_comparison_is_comparable($entity_type1, $entity1, $entity_type2, $entity2) {
  $saved_fields = variable_get('commerce_product_comparison_fields', array());
  $entity1_hashtml = FALSE;
  $entity2_hashtml = FALSE;
  // Check if there is at least one shared displayed product attribute
  // between products of the compare list,
  // And if its the case, check that we have html value for this attribute.
  foreach (field_read_instances(array('entity_type' => 'commerce_product', 'bundle' => $entity1->type)) as $attribute_entity1) {
    foreach (field_read_instances(array('entity_type' => 'commerce_product', 'bundle' => $entity2->type)) as $attribute_entity2) {
      if (!empty($attribute_entity1['display']['compare_page']['type']) && $attribute_entity1['display']['compare_page']['type'] != 'hidden'
      && !empty($attribute_entity2['display']['compare_page']['type']) && $attribute_entity2['display']['compare_page']['type'] != 'hidden'
      && (($attribute_entity1['field_name'] === $attribute_entity2['field_name'] && empty($saved_fields[$attribute_entity1['field_name']]))
          || (!empty($saved_fields[$attribute_entity1['field_name']]) && $saved_fields[$attribute_entity1['field_name']] === $attribute_entity2['field_name']))
      ) {
        $field1 = field_view_field('commerce_product', $entity1, $attribute_entity1['field_name'], 'compare_page');
        $field2 = field_view_field('commerce_product', $entity2, $attribute_entity2['field_name'], 'compare_page');
        $html1 = drupal_render($field1);
        $html2 = drupal_render($field2);
        if (!empty($html1)) {
          $entity1_hashtml = TRUE;
        }
        if (!empty($html2)) {
          $entity2_hashtml = TRUE;
        }
      }
    }
  }
  // If products of the compare list have not even one shared attribute,
  // with html value then its not comparable.
  if (!$entity1_hashtml || !$entity2_hashtml) {
    return FALSE;
  }
  return TRUE;
}

/**
 * Implements hook_entity_info().
 */
function commerce_product_comparison_entity_info() {
  // Creates view mode for managing product attributes display on compare page.
  $return['commerce_product']['view modes'] = array(
    'compare_page' => array(
      'label' => t('Compare page'),
      'custom settings' => TRUE,
    ),
  );
  return $return;
}

/**
 * Implements hook_theme().
 */
function commerce_product_comparison_theme() {
  return array(
    'commerce_product_comparison_header_table' => array(
      'variables' => array(
        'commerce_product' => NULL,
        'commerce_product_title' => NULL,
        'delete_link' => NULL,
      ),
      'template' => 'templates/commerce_product_comparison_header_table',
    ),
  );
}

/**
 * This function return whether or not the entity is a product display.
 *
 * @params object $entity
 *   The entity to test.
 */
function commerce_product_comparison_entity_is_product_display($entity) {
  $fields = field_info_instances('node', $entity->type);
  if (!empty($fields)) {
    foreach ($fields as $field_name => $field) {
      $field = field_info_field($field_name);
      if ($field['type'] == 'commerce_product_reference') {
        return $field['field_name'];
      }
    }
  }
  return FALSE;
}

/**
 * Implement a form to add a product to the user cart from the compare page.
 *
 * We need to do this because when we use the default add to cart form then
 * the first product of the list is always the one added to the cart. This error
 * comes from the same form_token on every form. We have to create our own form
 * to bypass this error.
 */
function commerce_product_comparison_add_product_to_cart_form($form, &$form_state, $product_id) {
  $form['product_id'] = array(
    '#type' => 'hidden',
    '#value' => $product_id,
  );
  $form['add_to_cart'] = array(
    '#type' => 'submit',
    '#value' => t('Add to cart'),
  );

  return $form;
}

/**
 * Form submit handler: add the selected product to the cart.
 */
function commerce_product_comparison_add_product_to_cart_form_submit($form, $form_state) {
  // Add the product to the cart.
  commerce_cart_product_add_by_id($form_state['values']['product_id']);
}
