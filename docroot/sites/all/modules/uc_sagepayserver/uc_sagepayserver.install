<?php

/**
 * @file
 * Handles installing, uninstalling, and updating sagepayserver module
 */

/**
 * Implementation of hook_requirements().
 */
function uc_sagepayserver_requirements($phase) {
  $requirements = array();
  
  switch ($phase) {
      
    case 'runtime':
        // Raise warning if no vendorname has been supplied yet
        if ((variable_get('uc_sagepayserver_vendor_name', NULL)) == NULL) {
          $requirements['uc_sagepayserver_vendorname'] = array(
            'title' => t('Sagepay Server vendorname'),
            'description' => t('You need to provide a Sagepay vendorname. Please enter one on the <a href="@url">Payment Methods settings page</a>.', array('@url' => url('admin/store/settings/payment/edit/methods'))),
            'severity' => REQUIREMENT_ERROR,
            'value' => t('Not configured'),
          );
        }
      break;
  }
  
  return $requirements;
  
}

/**
 * Implementation of hook_schema().
 */
function uc_sagepayserver_schema() {
  $schema = array();

  $schema['uc_sagepayserver_transactions'] = array(
    'description' => 'Logs Sagepay Server Notifications.',
    'fields' => array(
      'order_id' => array(
        'description' => 'The order ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'vendor_transaction_code' => array(
        'description' => 'The unique transaction code sent to Sagepay (VendorTxCode).',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'uc_sagepayserver_transaction_id' => array(
        'description' => 'The transaction ID from Sagepay (VPSTxId).',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'status' => array(
        'description' => 'The notification status from Sagepay (Status).',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'status_detail' => array(
        'description' => 'The detailed status message from Sagepay (StatusDetail).',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'security_key' => array(
        'description' => 'The security key from Sagepay (SecurityKey).',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'received' => array(
        'description' => 'The timestamp that the notification was received at.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array(
      'order_id' => array('order_id'),
      'transaction_id' => array('vendor_transaction_code')
    ),
  );

  return $schema;
}

/**
 * Implementation of hook_install().
 */
function uc_sagepayserver_install() {
  $t = get_t();
  // Insert order status values
  db_query("INSERT INTO {uc_order_statuses} (order_status_id, title, state, weight, locked) VALUES ('uc_sagepayserver_pending_reg', '" . $t('Pending Sagepay Registration Notification') . "', 'in_checkout', 0, 1);");
  db_query("INSERT INTO {uc_order_statuses} (order_status_id, title, state, weight, locked) VALUES ('uc_sagepayserver_pending_result', '" . $t('Pending Sagepay Transaction Results') . "', 'in_checkout', 10, 1);");
}

/**
 * Implementation of hook_uninstall().
 */
function uc_sagepayserver_uninstall() {
  db_query("DELETE FROM {variable} WHERE name IN ('uc_sagepayserver_mode', 'uc_sagepayserver_vendor_name', 'uc_sagepayserver_debug_notifications')");
  db_query("DELETE FROM {uc_order_statuses} WHERE order_status_id IN ('uc_sagepayserver_pending_reg', 'uc_sagepayserver_pending_result')");
}
