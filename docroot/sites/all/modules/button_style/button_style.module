<?php

/**
 * @file
 * Allows to apply a sexy, graphical button style using CSS Sliding Doors technique in a generic way.
 */

/**
 * Implementation of hook_form_alter().
 */
function button_style_form_alter(&$form, &$form_state, $form_id) {
  $path = drupal_get_path('module', 'button_style');
  $form['#attached']['css'][] = $path . '/button_style.css';
  // $form['#attached']['js'][] = $path . '/button_style.js';

  // Add container around form buttons.
  $form['#after_build'][] = 'button_style_form_after_build';

  // Prepare confirmation forms.
  if (isset($form['#theme']) && $form['#theme'] == 'confirm_form') {
    // Turn description into form item.
    $form['description']['#type'] = 'item';
    $form['description']['#description'] = $form['description']['#markup'];
    unset($form['description']['#markup']);
    // Add Sliding Doors markup to cancel action in confirmation forms.
    $cancel = $form['actions']['cancel']['#markup'];
    $cancel = substr($cancel, 0, 2) . ' class="button"' . substr($cancel, 2);
    $cancel = preg_replace('@(<a [^>]+>)(.+)(</a>)@', '$1<span>$2</span>$3', $cancel);
    $form['actions']['cancel']['#markup'] = $cancel;
  }
}

/**
 * Form after build handler; add container around form buttons.
 */
function button_style_form_after_build($form, &$form_state) {
  if (!isset($form['#sorted'])) {
    uasort($form, "element_sort");
  }
  // System settings forms.
  if (isset($form['buttons']) && is_array($form['buttons']) && !isset($form['buttons']['#type'])) {
    $actions_start = $actions_end = 'buttons';
  }
  // Confirm forms.
  elseif (isset($form['actions']) && is_array($form['actions']) && !isset($form['actions']['#type'])) {
    $actions_start = $actions_end = 'actions';
  }
  // Abuse abuses 'op'.
  elseif (isset($form['op']) && is_array($form['op']) && !isset($form['op']['#type'])) {
    $actions_start = $actions_end = 'op';
  }
  // Try to determine form buttons manually (first level only).
  else {
    foreach (element_children($form) as $item) {
      if (!is_array($form[$item]) || (isset($form[$item]['#access']) && !$form[$item]['#access'])) {
        continue;
      }
      if (isset($form[$item]['#type']) && ($form[$item]['#type'] == 'submit' || $form[$item]['#type'] == 'button')) {
        if (!isset($actions_start)) {
          $actions_start = $item;
        }
        else {
          $actions_end = $item;
        }
      }
      else if (isset($actions_start) && (
        (!isset($form[$item]['#type']) && !empty($form[$item]['#value']))
        || (isset($form[$item]['#type']) && $form[$item]['#type'] == 'markup' && !empty($form[$item]['#value']))
      )) {
        $actions_end = $item;
      }
    }
  }

  if (isset($actions_start)) {
    $form[$actions_start]['#prefix'] = '<div class="form-actions">' . (isset($form[$actions_start]['#prefix']) ? $form[$actions_start]['#prefix'] : '');
    if (!isset($actions_end)) {
      $actions_end = $actions_start;
    }
    $form[$actions_end]['#suffix'] = (isset($form[$actions_end]['#suffix']) ? $form[$actions_end]['#suffix'] : '') . '</div>';
  }

  return $form;
}

/**
 * Implementation of hook_theme_registry_alter().
 */
function button_style_theme_registry_alter(&$items) {
  // Do not override a custom theme function.
  if ($items['button']['function'] === 'theme_button') {
    $items['button']['function'] = 'button_style_theme_button';
  }
}

/**
 * Render a form button.
 *
 * Adds an additional wrapper for graphical buttons.
 */
function button_style_theme_button($element) {
  // Trim required for IE.
  return '<span class="form-button-wrapper">' . trim(theme_button($element)) . '</span>';
}

