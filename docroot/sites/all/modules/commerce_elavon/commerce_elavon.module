<?php

/**
 * @file
 * Implements Elavon payment services for use in Drupal Commerce.
 */

// Elavon transaction mode definitions:
define('ELAVON_TXN_MODE_PRODUCTION', 'production');
define('ELAVON_TXN_MODE_TEST', 'test');
define('ELAVON_PAYMENT_STATUS_CANCELED', 'canceled');
define('ELAVON_TXN_TYPE_DIRECT_CAPTURE', 'direct_capture');

/**
 * Implements hook_commerce_payment_transaction_status_info().
 */
function commerce_elavon_commerce_payment_transaction_status_info() {
  $statuses = array();

  $statuses[ELAVON_PAYMENT_STATUS_CANCELED] = array(
    'status' => ELAVON_PAYMENT_STATUS_CANCELED,
    'title' => t('Canceled'),
    'total' => FALSE,
  );

  return $statuses;
}

/**
 * Implements hook_menu().
 */
function commerce_elavon_menu() {
  $items = array();

  // Add a menu item for capturing authorizations.
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/elavon-capture'] = array(
    'title' => 'Capture',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_elavon_capture_form', 3, 5),
    'access callback' => 'commerce_elavon_capture_access',
    'access arguments' => array(3, 5),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 2,
    'file' => 'includes/commerce_elavon.admin.inc',
  );

  return $items;
}

/**
 * Implement call back function commerce_elavon_capture_access().
 */
function commerce_elavon_capture_access($order, $transaction) {
  // Return FALSE if the transaction isn't for Elavon or isn't awaiting capture.
  if ($transaction->remote_status == 'Fail' || $transaction->status != COMMERCE_PAYMENT_STATUS_PENDING) {
    return FALSE;
  }
  // TODO: Check if this is relevant to elavon.
  // Return FALSE if it is more than 30 days past the original authorization.
  if (time() - $transaction->created > 86400 * 30) {
    return FALSE;
  }
  // Allow access if the user can update payments on this transaction.
  return commerce_payment_transaction_access('update', $transaction);
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_elavon_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['elavon_direct'] = array(
    'base' => 'commerce_elavon_direct',
    'title' => t('Elavon direct processing'),
    'short_title' => t('Elavon direct processing'),
    'display_title' => t('Credit card'),
    'description' => t('Integrates Elavon direct processing payment, direct or delayed capture '),
  );

  return $payment_methods;
}

/**
 * Returns the default settings for the Elavon AIM payment method.
 */
function commerce_elavon_default_settings() {
  return array(
    'accountid' => '',
    'userid' => '',
    'pin' => '',
    'txn_mode' => ELAVON_TXN_MODE_TEST,
    'txn_type' => COMMERCE_CREDIT_AUTH_CAPTURE,
    'vendor_number' => '',
    'log' => array('request' => '0', 'response' => '0'),
    'failure_interval' => '',
    'max_failures' => '',
  );
}

/**
 * Payment method callback: settings form.
 */
function commerce_elavon_direct_settings_form($settings = NULL) {
  // Merge default settings into the stored settings array.
  $settings = (array) $settings + commerce_elavon_default_settings();
  $form = commerce_elavon_base_settings_form($settings);
  return $form;
}

/**
 * Build common form for both payment method.
 */
function commerce_elavon_base_settings_form($settings) {
  // Merge default settings into the stored settings array.
  $form = array();
  $form['accountid'] = array(
    '#type' => 'textfield',
    '#title' => t('Elavon Account ID'),
    '#description' => t('Your Elavon Account ID'),
    '#default_value' => $settings['accountid'],
    '#required' => TRUE,
    '#weight' => -5,
  );
  $form['userid'] = array(
    '#type' => 'textfield',
    '#title' => t('Elavon user ID'),
    '#description' => t('Your Elavon user id dedicated for web based transaction.'),
    '#default_value' => $settings['userid'],
    '#required' => TRUE,
    '#weight' => -4,
  );
  $form['pin'] = array(
    '#type' => 'textfield',
    '#title' => t('Elavon Pin'),
    '#description' => t('Your Elavon Pin'),
    '#default_value' => $settings['pin'],
    '#required' => TRUE,
    '#weight' => -3,
  );
  $form['txn_mode'] = array(
    '#type' => 'radios',
    '#title' => t('Transaction mode'),
    '#description' => t('Adjust to live transactions when you are ready to start processing real payments.'),
    '#options' => array(
      ELAVON_TXN_MODE_PRODUCTION => t('Live transactions in a production account'),
      ELAVON_TXN_MODE_TEST => t('Test transactions with your account'),
    ),
    '#default_value' => $settings['txn_mode'],
  );

  $form['log'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Log the following messages for debugging. These messages are credit and transaction information. Keep it off for production site.'),
    '#options' => array(
      'request' => t('API request messages'),
      'response' => t('API response messages'),
    ),
    '#default_value' => $settings['log'],
  );

  return $form;
}

/**
 * Payment method callback: checkout form - Direct.
 */
function commerce_elavon_direct_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
  return commerce_payment_credit_card_form(array('code' => ''));
}

/**
 * Payment method callback: checkout form validation - Direct.
 */
function commerce_elavon_direct_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

  // Validate the credit card fields.
  $settings = array(
    'form_parents' => array_merge($form_parents, array('credit_card')),
  );

  if (!commerce_payment_credit_card_validate($pane_values['credit_card'], $settings)) {
    return FALSE;
  }
}

/**
 * Payment method callback: checkout form submission - Direct.
 */
function commerce_elavon_direct_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  $billing_data = commerce_elavon_get_billing_info($order);
  $info = array(
    'ssl_card_number' => $pane_values['credit_card']['number'],
    'ssl_exp_date' => $pane_values['credit_card']['exp_month'] . substr($pane_values['credit_card']['exp_year'], 2, 2),
  );
  if (isset($pane_values['credit_card']['code'])) {
    $info['CVNum'] = $pane_values['credit_card']['code'];
  }

  // Build a name-value pair array for this transaction.
  $info += array(
    'ssl_amount' => commerce_currency_amount_to_decimal($charge['amount'], $charge['currency_code']),
    'MagData' => '',
  );

  // Set Tax amount
  $sales_tax_total = 0;
  // Loop through and get all tax elements and add them up
  $order_working_array = $order->commerce_order_total['und'][0]['data']['components'];
  foreach($order_working_array as $id => $order_working_array_element) {
	  if(strpos($order_working_array_element['name'], 'tax') !== FALSE) {
		  $sales_tax_total += $order_working_array_element['price']['amount'];
	  }
  }
  $ssl_salestax = commerce_currency_amount_to_decimal($sales_tax_total, $charge['currency_code']);

  $card_name_parts = explode(' ', $billing_data['name_on_card']);
  $card_name_array['first_name'] = array_shift($card_name_parts);
  $card_name_array['last_name'] = implode(' ', $card_name_parts);

  $info += array(
    'ssl_avs_address' => $billing_data['street'],
    'ssl_avs_zip' => $billing_data['zip'],
    'ssl_first_name' => $card_name_array['first_name'],
    'ssl_last_name' => $card_name_array['last_name'],
    'ssl_transaction_type' => 'ccsale',
    'ssl_cvv2cvc2' => $pane_values['credit_card']['code'],
    'ssl_salestax' => $ssl_salestax,
  );

  // Add additional transaction information to the request array.
  $info += array(
    'InvNum' => $order->order_number,
  );

  $info += array(
    'NameOnCard' => $billing_data['name_on_card'],
    'Street' => $billing_data['street'],
    'Zip' => $billing_data['zip'],
    'ExtData' => $billing_data['ext_data'],
  );

  return commerce_elavon_transaction_process($payment_method, $info, $order, $charge);
}

/**
 * Proceed to the payment and record a transaction.
 */
function commerce_elavon_transaction_process($payment_method, $info, $order, $charge) {
  // Submit the request to Elavon.
  $response = commerce_elavon_request($payment_method, $info);

  // Prepare a transaction object to log the API response.
  $transaction = commerce_payment_transaction_new(ELAVON_TXN_TYPE_DIRECT_CAPTURE, $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->remote_id = isset($response['xml']->PNRef) ? (string) $response['xml']->PNRef : '';
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  $transaction->payload[REQUEST_TIME] = isset($response['xml']) ? $response['xml']->asXML() : '';
  // Store the Message of transaction in the remote status.
  $transaction->remote_status = $response['status'];
  $transaction->message = implode('<br />', commerce_elavon_get_log_message($response, ELAVON_TXN_TYPE_DIRECT_CAPTURE));
  // Set the transaction status based on the type of transaction this was.
  if ($response['status']) {
    $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
  }
  else {
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
  }
  // If we didn't get an approval response code.
  // Create a failed transaction with the error message.
  // Save auth code.
  $transaction->data['auth_code'][] = isset($response['xml']) && isset($response['xml']->AuthCode) ? (string) $response['xml']->AuthCode : '';
  // Save the transaction information.
  commerce_payment_transaction_save($transaction);

  // If the payment failed, display an error and rebuild the form.
  if (!$response['status']) {
    drupal_set_message(t('We received the following error processing your card. Please enter you information again or try a different card.'), 'error');
    if (!empty($response['msg'])) {
      drupal_set_message(check_plain($response['msg']), 'error');
    }
    return FALSE;
  }
  return TRUE;
}

/**
 * Build log message.
 */
function commerce_elavon_get_log_message($response, $type) {
  // Build a meaningful response message.
  $status = !$response['status'] ? t('@type : REJECTED', array('@type' => $type)) : t('@type : ACCEPTED', array('@type' => $type)) . ': ' . check_plain($response['msg']);
  $avs = !empty($response['xml']->ssl_avs_response) ? (string) $response['xml']->ssl_avs_response : FALSE;
  $cvv = !empty($response['xml']->ssl_cvv2_response) ? (string) $response['xml']->ssl_cvv2_response : FALSE;
  $message = array(
    $status,
    $avs ? t('AVS response: @avs', array('@avs' => commerce_elavon_avs_response($avs))) : '',
    $cvv ? t('CVV match: @cvv', array('@cvv' => commerce_elavon_cvv_response($cvv))) : '',
  );

  return $message;
}

/**
 * Prepare ExtData XML element.
 */
function commerce_elavon_get_billing_info($order) {
  $billing_data = array(
    'ext_data' => '',
    'street' => '',
    'street2' => '',
    'city' => '',
    'state' => '',
    'zip' => '',
    'country' => '',
    'name_on_card' => '',
    'first_name' => '',
    'last_name' => '',
  );

  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  if ($order_wrapper->commerce_customer_billing->value()) {
    $ext_data = '';
    $billing_address = $order_wrapper->commerce_customer_billing->commerce_customer_address->value();

    if (empty($billing_address['first_name'])) {
      $name_parts = explode(' ', $billing_address['name_line']);
      $billing_address['first_name'] = array_shift($name_parts);
      $billing_address['last_name'] = implode(' ', $name_parts);
    }
    // Build and populate the API request SimpleXML element.
    $ext_data .= '<CustomerID>' . substr($order->uid, 0, 20) . '</CustomerID>';
    // Customer Billing Address.
    $ext_data .= '<Invoice><BillTo>';
    $name_on_card = substr($billing_address['first_name'], 0, 50) . ' ' . substr($billing_address['last_name'], 0, 50);

    // Use company name as billing name when available.
    if (!empty($billing_address['organisation_name'])) {
      $ext_data .= '<Name>' . substr($billing_address['organisation_name'], 0, 50) . '</Name>';
    }
    else {
      $ext_data .= '<Name>' . $name_on_card . '</Name>';
    }
    $ext_data .= '<Email>' . substr($order->mail, 0, 255) . '</Email>';
    $ext_data .= '<Address>';
    $ext_data .= '<Street>' . substr($billing_address['thoroughfare'], 0, 60) . '</Street>';
    $ext_data .= '<City>' . substr($billing_address['locality'], 0, 40) . '</City>';
    $ext_data .= '<State>' . substr($billing_address['administrative_area'], 0, 40) . '</State>';
    $ext_data .= '<Zip>' . substr($billing_address['postal_code'], 0, 20) . '</Zip>';
    $ext_data .= '<Country>' . $billing_address['country'] . '</Country>';
    $ext_data .= '</Address>';
    $ext_data .= '</BillTo></Invoice>';

    $billing_data['ext_data'] = $ext_data;
    $billing_data['street'] = substr($billing_address['thoroughfare'], 0, 30);
    $billing_data['street2'] = substr($billing_address['premise'], 0, 30);
    $billing_data['city'] = substr($billing_address['locality'], 0, 30);
    $billing_data['state'] = substr($billing_address['administrative_area'], 0, 30);
    $billing_data['zip'] = substr($billing_address['postal_code'], 0, 9);
    $billing_data['country'] = $billing_address['country'];
    $billing_data['name_on_card'] = $name_on_card;
    $billing_data['first_name'] = $billing_address['first_name'];
    $billing_data['last_name'] = $billing_address['last_name'];
  }

  return $billing_data;
}

/**
 * Returns the URL to the Elavon server determined by transaction mode.
 *
 * @param $txn_mode
 *   The transaction mode that relates to the production or test server.
 *
 * @return
 *   The URL to use to submit requests to the Elavon server.
 */
function commerce_elavon_server_url($txn_mode) {
  switch ($txn_mode) {
    case ELAVON_TXN_MODE_PRODUCTION:
      return 'https://www.myvirtualmerchant.com/VirtualMerchant/processxml.do';

    case ELAVON_TXN_MODE_TEST:
      return 'https://demo.myvirtualmerchant.com/VirtualMerchantDemo/processxml.do';
  }
}

/**
 * Submits a request to Elavon.
 *
 * @param $payment_method
 *   The payment method instance array associated with this API request.
 */
function commerce_elavon_request($payment_method, $info = array()) {
  // Get the API endpoint URL for the method's transaction mode and type.
  $url = commerce_elavon_server_url($payment_method['settings']['txn_mode']);
  // Add the default name-value pairs to the array.
  $info += array(
    'ssl_merchant_id' => $payment_method['settings']['accountid'],
    'ssl_user_id' => $payment_method['settings']['userid'],
    'ssl_pin' => $payment_method['settings']['pin'],
    'ssl_show_form' => 'false',
  );

  // Allow modules to alter parameters of the API request.
  drupal_alter('commerce_elavon_direct_request', $info);

  // Log the request if specified.
  if ($payment_method['settings']['log']['request'] == 'request') {
    // Mask the credit card number and CVV.
    $log_nvp = $info;
    $log_nvp['ssl_merchant_id'] = str_repeat('X', strlen($log_nvp['ssl_merchant_id']));
    $log_nvp['ssl_user_id'] = str_repeat('X', strlen($log_nvp['ssl_user_id']));
    $log_nvp['ssl_pin'] = str_repeat('X', strlen($log_nvp['ssl_pin']));

    if (!empty($log_nvp['CardNum'])) {
      $log_nvp['CardNum'] = str_repeat('X', strlen($log_nvp['CardNum']) - 4) . substr($log_nvp['CardNum'], -4);
    }

    if (!empty($log_nvp['CcAccountNum'])) {
      $log_nvp['CcAccountNum'] = str_repeat('X', strlen($log_nvp['CcAccountNum']) - 4) . substr($log_nvp['CcAccountNum'], -4);
    }

    if (!empty($log_nvp['CVNum'])) {
      $log_nvp['CVNum'] = str_repeat('X', strlen($log_nvp['CVNum']));
    }

    watchdog('commerce_elavon', 'Elavon request to @url: !param', array('@url' => $url, '!param' => '<pre>' . check_plain(print_r($log_nvp, TRUE)) . '</pre>'), WATCHDOG_DEBUG);
  }

  // Prepare xml for Elavon.
  $xmldata = "xmldata=<txn>";
  $xmldata .= "<ssl_merchant_id>" . $info['ssl_merchant_id'] . "</ssl_merchant_id>";
  $xmldata .= "<ssl_user_id>" . $info['ssl_user_id'] . "</ssl_user_id>";
  $xmldata .= "<ssl_pin>" . $info['ssl_pin'] . "</ssl_pin>";
  $xmldata .= "<ssl_test_mode>false</ssl_test_mode>";
  $xmldata .= "<ssl_transaction_type>ccsale</ssl_transaction_type>";
  $xmldata .= "<ssl_cvv2cvc2>" . $info['CVNum'] . "</ssl_cvv2cvc2>";
  $xmldata .= "<ssl_card_number>" . $info['ssl_card_number'] . "</ssl_card_number>";
  $xmldata .= "<ssl_exp_date>" . $info['ssl_exp_date'] . "</ssl_exp_date>";
  $xmldata .= "<ssl_invoice_number>" . $info['InvNum'] . "</ssl_invoice_number>";
  $xmldata .= "<ssl_amount>" . $info['ssl_amount'] . "</ssl_amount>";
  $xmldata .= "<ssl_avs_address>" . $info['ssl_avs_address'] . "</ssl_avs_address>";
  $xmldata .= "<ssl_avs_zip>" . $info['ssl_avs_zip'] . "</ssl_avs_zip>";
  $xmldata .= "<ssl_first_name>" . $info['ssl_first_name'] . "</ssl_first_name>";
  $xmldata .= "<ssl_last_name>" . $info['ssl_last_name'] . "</ssl_last_name>";
  $xmldata .= "<ssl_salestax>" . $info['ssl_salestax'] . "</ssl_salestax></txn>";


  // Setup the cURL request.
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_VERBOSE, 0);
  curl_setopt($ch, CURLOPT_POST, 1);
  curl_setopt($ch, CURLOPT_POSTFIELDS, "$xmldata");
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
  curl_setopt($ch, CURLOPT_NOPROGRESS, 1);
  curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 0);
  $result = curl_exec($ch);

  // Log any errors to the watchdog.
  if ($error = curl_error($ch)) {
    watchdog('commerce_elavon', 'cURL error: @error', array('@error' => $error), WATCHDOG_ERROR);
    $response['status'] = FALSE;
    $response['msg'] = $error;
    return $response;
  }
  curl_close($ch);

  // If we received data back from the server.
  if (empty($result)) {
    watchdog('commerce_elavon', 'cURL error empty result returned.', array(), WATCHDOG_ERROR);
    $response['status'] = FALSE;
    $response['msg'] = t('No answer from server');
  }
  else {
    // Extract the result into an XML response object.
    $xml = new SimpleXMLElement($result);
    $response = array();
    // Log the API response if specified.
    if ($payment_method['settings']['log']['response'] == 'response') {
      watchdog('commerce_elavon', 'API response received:<pre>@xml</pre>', array('@xml' => $xml->asXML()));
    }

    $response['status'] = ((string) $xml->ssl_result_message === 'APPROVAL') ? TRUE : FALSE;
    $response['msg'] = (string) $xml->ssl_result_message;
    // Request approved, Save original xml responce with all data.
    $response['xml'] = $xml;
  }
  return $response;
}

/**
 * Returns the message text for an AVS response code.
 *
 * @see AVS Response Codes (Transaction API Guide)
 */
function commerce_elavon_avs_response($code) {
  switch ($code) {
    case 'A':
      return t('Address: Address matches, Zip does not');
    case 'B':
      return t('Street Match: Street addresses match for international transaction, but postal code doesn’t');
    case 'C':
      return t('Street Address: Street addresses and postal code not verified for international transaction');
    case 'D':
      return t('Match: Street addresses and postal codes match for international transaction');
    case 'E':
      return t('Error: Transaction unintelligible for AVS or edit error found in the message that prevents AVS from being performed');
    case 'G':
      return t('Unavailable: Address information not available for international transaction');
    case 'I':
      return t('Not Verified: Address Information not verified for International transaction');
    case 'M':
      return t('Match: Street addresses and postal codes match for international transaction');
    case 'N':
      return t('No: Neither address nor Zip matches');
    case 'P':
      return t('Postal Match: Postal codes match for international transaction, but street address doesn’t');
    case 'R':
      return t('Retry: System unavailable or time-out');
    case 'S':
      return t('Not Supported: Issuer doesn’t support AVS service');
    case 'U':
      return t('Unavailable: Address information not available');
    case 'W':
      return t('Whole Zip: 9-digit Zip matches, address doesn’t');
    case 'X':
      return t('Exact: Address and nine-digit Zip match');
    case 'Y':
      return t('Yes: Address and five-digit Zip match');
    case 'Z':
      return t('Whole Zip: 9-digit Zip matches, address doesn’t');
    case '0':
      return t('No response sent');
    case '5':
      return t('Invalid AVS response');
  }

  return '-';
}

/**
 * Returns the message text for a CVV match.
 *
 * @see CVV Response Codes (Transaction API Guide)
 */
function commerce_elavon_cvv_response($code) {
  switch ($code) {
    case 'M':
      return t('CVV2/CVC2/CID Match');
    case 'N':
      return t('CVV2/CVC2/CID No Match');
    case 'P':
      return t('Not Processed');
    case 'S':
      return t('Issuer indicates that the CV data should be present on the card, but the merchant has indicated that the CV data is not present on the card.');
    case 'U':
      return t('Unknown / Issuer has not certified for CV or issuer has not provided Visa/MasterCard with the CV encryption keys.');
    case 'X':
      return t('Server Provider did not respond');
  }
  return '-';
}

/**
 * Implements hook_commerce_kickstart_service_provider().
 */
function commerce_elavon_commerce_kickstart_service_provider() {
  $description = t('This module is about integrating the Elavon payment gateway with Drupal Commerce and the Commerce Card-on-File framework') . '<br /><br />';
  $description .= '<b>' . t('Your own virtual POS') . '</b><br />';
  $description .= t('Accept card payments face-to-face, over the phone, through the mail, or recurring, with a Elavon virtual point-of-sale terminal to meet your business needs.') . '<br /><br />';
  $description .= '<b>' . t('eCommerce Solutions') . '</b><br />';
  $description .= t('Safe, secure credit card payments for all eCommerce environments, including customizable hosted payment pages or integration through our easy-to-use API’s.') . '<br /><br />';
  $description .= '<b>' . t('Secure Technology') . '</b><br />';
  $description .= t('Adaptive solutions aimed at keeping your data safe. ');

  $installation = t('1. Go to admin -> modules and enable commerce elavon module.') . '<br />';
  $installation .= t('2. Under site configuration -> Workflow you can see 2 elavon rules. Choose your method and define as needed');

  return array(
    'commerce_elavon' => array(
      'logo_path' => 'http://wulei.ca/sites/wulei.ca/themes/wulei/logo.png',
      'title' => t('Commerce Elavon'),
      'category' => t('Payment providers'),
      'teaser' => t('This module is about integrating the Elavon payment gateway with Drupal Commerce and the Commerce Card-on-File framework.'),
      'description' => $description,
      'requirements' => t('Elavon Account ID, User ID and Pin'),
      'link' => 'https://www.myvirtualmerchant.com',
      'installation_proccess' => $installation,
      'requirements_callback' => 'commerce_elavon_commerce_kickstart_requirements_status',
    ),
  );
}

/**
 * Commerce kickstart service provider requirements callback method.
 */
function commerce_elavon_commerce_kickstart_requirements_status() {
  $settings = array(
    'direct' => NULL,
    'recurring' => NULL,
  );

  // Checking the rules configuration for verification of the services defining.
  $rule = rules_config_load('commerce_payment_elavon_direct');

  foreach ($rule->actions() as $action) {
    $settings['direct'] = $action->settings;
  }

  $rule = rules_config_load('commerce_payment_elavon_recurring');

  if (!empty($rule)) {
    foreach ($rule->actions() as $action) {
      $settings['recurring'] = $action->settings;
    }
  }
  // Checking if one of the rules is defined.
  return (isset($settings['direct']['payment_method']['settings']) && is_array($settings['direct']['payment_method']['settings'])) || (isset($settings['recurring']['payment_method']['settings']) && is_array($settings['recurring']['payment_method']['settings'])) ? COMMERCE_KICKSTART_SERVICE_PROVIDER_MODULE_DEFINED : COMMERCE_KICKSTART_SERVICE_PROVIDER_MODULE_ENABLED;
}

