<?php

/**
 * @file
 * The module file of the Climate Tagger module.
 */

define('CLIMATE_TAGGER_API_URL', 'http://api.climatetagger.net');

include_once dirname(__FILE__) . '/includes/climate_tagger.poolparty.inc';

/**
 * Implements hook_menu().
 */
function climate_tagger_menu() {
  $items['admin/config/services/climate-tagger'] = array(
    'title' => 'Climate Tagger',
    'description' => 'Manage the configuration of the Climate Tagger module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('climate_tagger_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/climate_tagger.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_init().
 */
function climate_tagger_init() {
  drupal_add_css(drupal_get_path('module', 'climate_tagger') . '/css/climate_tagger.css');
}

/**
 * Implements hook_menu_alter().
 */
function climate_tagger_menu_alter(&$items) {
  foreach (array_keys($items) as $path) {
    if (strpos($path, 'admin/config/services/powertagging') !== FALSE || strpos($path, 'admin/config/services/semantic_connector') !== FALSE) {
      unset($items[$path]);
    }
  }
}

/**
 * Implements hook_field_info_alter().
 */
function climate_tagger_field_info_alter(&$info) {
  if (climate_tagger_get_powertagging_id()) {
    $info['powertagging']['label'] = t('Climate Tagger Tags');
  }
  // Remove the field type, if no Climate Tagger API configuration is available.
  else {
    unset($info['powertagging']);
  }
}

/**
 * Implements hook_form_alter().
 */
function climate_tagger_form_alter(&$form, &$form_state, $form_id) {
  // Alter the global field configuration of the powertagging field.
  if ($form_id == 'field_ui_field_settings_form' && $form['field']['type']['#value'] == 'powertagging') {
    $powertagging_id = climate_tagger_get_powertagging_id();
    $form['field']['settings']['powertagging_id']['#options'] = array(
      $powertagging_id => $form['field']['settings']['powertagging_id']['#options'][$powertagging_id],
    );
    $form['field']['settings']['powertagging_id']['#default_value'] = $powertagging_id;
  }
  // Alter the field instance configuration of the powertagging field.
  elseif ($form_id == 'field_ui_field_edit_form' && $form['#field']['type'] == 'powertagging') {
    if (!empty($form['#field']['settings']['powertagging_id'])) {
      $powertagging_id = climate_tagger_get_powertagging_id();
      $form['field']['settings']['powertagging_id']['#options'] = array(
        $powertagging_id => $form['field']['settings']['powertagging_id']['#options'][$powertagging_id],
      );

      $project_id_option_keys = array_keys($form['instance']['settings']['project_id']['#options']);
      $form['instance']['settings']['project_id'] = array(
        '#type' => 'value',
        '#value' => (!empty($project_id_option_keys) ? $project_id_option_keys[0] : ''),
      );

      $form['instance']['settings']['freeterms']['freeterms_per_extraction']['#description'] .= '<br />(' . t('Please note these are not currently in the Climate Thesaurus and can cause some tagging inconsistencies') . ')';
    }
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function climate_tagger_field_widget_form_alter(&$element, &$form_state, $context) {
  switch ($context['instance']['widget']['type']) {
    case 'powertagging_ui':
      // Update the wording of the legend.
      if (isset($element['legend'])){
        $legend_markup = '<div class="powertagging-legend">';
        $legend_types = array(
          'concept' => t('Concepts from the Climate Thesaurus'),
          'freeterm' => t('Free terms'),
          'disabled' => t('Already selected tags'),
        );
        foreach ($legend_types as $type => $label) {
          $legend_markup .= '<div class="powertagging-legend-item"><span id="powertagging-legend-item-colorbox-' . $type . '" class="powertagging-legend-item-colorbox">&nbsp;</span>' . $label . '</div>';
        }
        $legend_markup .= '</div>';
        $element['legend']['#markup'] = $legend_markup;
      }

      // Update the wording of the language error.
      if (isset($element['powertagging']['language_error'])) {
        $error_markup = t('Tagging is not possible for the currently selected language.');
        if (user_access('administer powertagging')) {
          $error_markup .= '<br />' . t('Configure all the required languages in the !moduleconfig to enable tagging for them.', array('!moduleconfig' => l(t('Climate Tagger configuration'), 'admin/config/services/climate-tagger')));
        }
        $element['powertagging']['language_error']['#markup'] = '<div class="messages warning">' . $error_markup . '</div>';
      }

      // Update the wording of the autocomplete description.
      if (isset($element['powertagging']['manual'])) {
        $element['powertagging']['manual']['#description'] = t('The auto-complete mechanism above will suggest concepts that exist in the Climate Thesaurus, based on concepts already tagged by the Climate Tagger API on your site.');
      }

      // Update error wording if the instance isn't configured correctly.
      if (isset($element['powertagging']['error_info'])) {
        $element['powertagging']['error_info']['#markup'] = t('The "Climate Tagger Tags" field needs to be properly configured before content can be tagged.') . '<br />' . t('Make sure all the required fields have a selection and "Number of values" was changed to "Unlimited".');
      }
      break;
  }
}

/**
 * Implements hook_field_display_alter().
 */
function climate_tagger_field_display_alter(&$display, $context) {
  if ($context['field']['module'] == 'powertagging' && $context['field']['type'] == 'powertagging') {
    $display['label'] = 'hidden';
  }
}

/**
 * Implements hook_powertagging_tag_list_alter().
 */
function climate_tagger_powertagging_tag_list_alter(&$markup, $data) {
  global $base_path;

  $base_path;
  $tids = array();
  foreach ($data['items'] as $tid) {
    $tids[] = $tid['tid'];
  }
  $terms = taxonomy_term_load_multiple($tids);
  $items = array();
  foreach ($terms as $term) {
    $items[] = l(field_filter_xss($term->name), 'taxonomy/term/' . $term->tid);
  }
  $logo = $base_path . drupal_get_path('module', 'climate_tagger') . '/images/climate_tagger_logo.png';
  $markup = '<div class="field-label">Tags by <span class="climate-tagger-logo"><a href="http://www.climatetagger.net" target="_blank"><img src="' . $logo . '" alt="Climate Tagger" title="Climate Tagger" /></a></span>:</div>';
  $markup .= implode(', ', $items);
}

/**
 * Get the default Drupal-configuration of the Climate Tagger.
 *
 * @return object
 *   The configuration object.
 */
function climate_tagger_get_config() {
  $powertagging_id = climate_tagger_get_powertagging_id();
  // Use the Powertagging configuration as the basis.
  if (!$powertagging_id) {
    $conf = powertagging_default_config_load();
  }
  else {
    $conf = powertagging_config_load($powertagging_id);
  }

  // Server settings.
  $conf->token = variable_get('climate_tagger_reegle_api_token', '');

  return $conf;
}

/**
 * Get the id of the powertagging configuration for the Climate Tagger API.
 *
 * @return int
 *   ID of the powertagging configuration or 0 if none exists.
 */
function climate_tagger_get_powertagging_id() {
  // Search for the corresponding PowerTagging configuration.
  $query = db_select('powertagging', 'p')
    ->fields('p', array('powertagging_id'))
    ->condition('s.url', CLIMATE_TAGGER_API_URL);
  $query->leftJoin('semantic_connector_connections', 's', 'p.connection_id = s.connection_id AND s.type = \'pp_server\'');

  $powertagging_id = $query
    ->execute()
    ->fetchField();

  return (int) $powertagging_id;
}

/**
 * Batch 'finished' callback used by the Climate Tagger's Bulk Tagging.
 */
function climate_tagger_batch_finished($success, $results, $operations) {
  drupal_set_message(t('Successfully finished bulk tagging of %totalentities entities. (Tagged: %taggedentities, Skipped: %skippedentities)', array('%totalentities' => $results['processed'], '%taggedentities' => $results['tagged'], '%skippedentities' => $results['skipped'])));

  drupal_goto('admin/config/services/climate-tagger', array('fragment' => 'edit-batch-jobs'));
}

/**
 * Returns a list with Climate Tagger fields as a option list.
 *
 * TODO: This function is the same as
 * powertagging_get_tagging_field_options_list() in the PowerTagging Module.
 * Remove it when the new version of the PowerTagging Module will come out.
 *
 * @param array $field_instances
 *   An array of field instances with "Climate Tagger Tags" fields.
 *
 * @return array
 *   Option list with Climate Tagger fields.
 */
function climate_tagger_get_tagging_field_options_list($field_instances) {
  $content_type_options = array();
  if (!empty($field_instances)) {
    $node_type_names = node_type_get_names();
    $taxonomy_names = taxonomy_vocabulary_get_names();

    foreach ($field_instances as $field_instance) {
      // Build the title of the option.
      switch ($field_instance['entity_type']) {
        case 'node':
          $option_title = 'Nodes of content type "' . $node_type_names[$field_instance['bundle']] . '" (' . $field_instance['field_name'] . ')';
          break;

        case 'user':
          $option_title = 'Users (' . $field_instance['field_name'] . ')';
          break;

        case 'taxonomy_term':
          $option_title = 'Taxonomy terms of vocabulary "' . $taxonomy_names[$field_instance['bundle']]->name . '" (' . $field_instance['field_name'] . ')';
          break;

        default:
          // If the entity type is not supported, throw an error and continue.
          drupal_set_message(t('Entity type "%entitytype" is not supported.', array('%entitytype' => $field_instance['entity_type'])), 'warning');
      }

      // Add the option.
      $content_type_options[$field_instance['entity_type'] . ' ' . $field_instance['bundle'] . ' ' . $field_instance['field_name']] = $option_title;
    }
  }

  return $content_type_options;
}

