<?php
/**
 * @file
 * Defines hooks and pages for tracking file downloads.
 */

/**
 * Implements hook_menu().
 */
function filefield_mail_menu() {
  // Create a link on the reports page.
  $items['admin/reports/downloads'] = array(
    'title' => 'Tracked downloads',
    'description' => 'View download statistics for tracked files.',
    'page callback' => 'filefield_mail_stats',
    'page arguments' => array('user'),
    'access arguments' => array('access site reports'),
  );

  // Report per user.
  $items['admin/reports/downloads/user'] = array(
    'title' => 'By user',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  // Report per file.
  $items['admin/reports/downloads/file'] = array(
    'title' => 'By file',
    'access arguments' => array('access site reports'),
    'page callback' => 'filefield_mail_stats',
    'page arguments' => array('file'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 0,
  );

  // Dynamic page title of download form.
  $items['download/%/%'] = array(
    'title' => 'Download file',
    'title arguments' => array(2),
    'title callback' => 'filefield_mail_dynamic_title',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('filefield_mail_download_form', 1),
    'access arguments' => array('access content'),
    'file' => 'filefield_mail.inc',
  );

  // Configuration of mail contents.
  $items['admin/config/content/filefield_mail'] = array(
    'title' => 'Filefield Mail',
    'description' => 'Configure filefield_mail elements.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('filefield_mail_admin_settings'),
    'file' => 'filefield_mail.admin.inc',
    'access arguments' => array('administer site configuration'),
    'weight' => 0,
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function filefield_mail_theme() {
  return array(

    // Register the theming of the statistics.
    'filefield_mail_stats' => array(
      'variables' => array('header' => array(), 'rows' => array()),
    ),

    // Register the theming of the download links.
    'filefield_mail_link' => array(
      'variables' => array('file' => NULL, 'icon_directory' => NULL),
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function filefield_mail_field_formatter_info() {

  // Introduce the field format for the tracked files.
  return array(
    'filefield_mail_default' => array(
      'label' => t('Generic file (with tracking)'),
      'field types' => array('file'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function filefield_mail_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'filefield_mail_default':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#theme' => 'filefield_mail_link',
          '#file' => (object) $item,
        );
      }
      break;
  }

  return $element;
}
/**
 * Menu title callback to allow for dynamic page titles.
 */
function filefield_mail_dynamic_title($filename) {
  return t('Download !filename', array('!filename' => $filename));
}

/**
 * Displays the statistics interface.
 */
function filefield_mail_stats($display = 'user') {

  // Set up the basic query that both display types have in common.
  $query = db_select('filefield_mail', 'd');
  $query->join('file_managed', 'f', 'f.fid = d.fid');
  $query->addField('f', 'uri', 'filepath');
  $query->extend('PagerDefault')->limit(100);

  switch ($display) {

    // Set up the fields for the statistics per user.
    case 'user':
      $header = array(
        array(
          'data' => t('Email'),
          'field' => 'd.email',
        ),
        array(
          'data' => t('User'),
          'field' => 'd.uid',
        ),
        array(
          'data' => t('File'),
          'field' => 'filepath',
        ),
        array(
          'data' => t('Last Download'),
          'field' => 'd.changed',
          'sort' => 'desc',
        ),
        array(
          'data' => t('Download Count'),
          'field' => 'd.count',
        ),
      );
      $query->fields('d');
      break;

    // Set up the fields for the statistics per file.
    case 'file':
      $header = array(
        array(
          'data' => t('File'),
          'field' => 'filepath',
        ),
        array(
          'data' => t('Download Count'),
          'field' => 'count',
          'sort' => 'desc',
        ),
      );
      $query->addExpression('SUM(d.count)', 'count');
      $query->condition('d.fid', 0, '>')->groupBy('f.fid');
      break;
  }

  // Turn on table sort using the header, execute and fetch.
  $results = $query->extend('TableSort')->orderByHeader($header)->execute()->fetchAll();

  // Theme and display the table.
  return theme('filefield_mail_stats', array(
    'header' => $header,
    'rows' => $results,
    'display' => $display)
  );
}

/**
 * Theme function for the statistics interface.
 */
function theme_filefield_mail_stats($variables) {
  $header = $variables['header'];
  $rows = array();
  foreach ($variables['rows'] as $row) {
    switch ($variables['display']) {

      // Prepare the fields for the statistics per user.
      case 'user':
        $tmp_row = array(
          $row->email,
          theme('username', array('account' => user_load($row->uid))),
          $row->filepath,
          format_date($row->changed, 'short'),
          array(
            'data' => $row->count,
            'style' => 'text-align: center;',
          ),
        );
        break;

      // Prepare the fields for the statistics per file.
      case 'file':
        $tmp_row = array(
          $row->filepath,
          array(
            'data' => $row->count,
            'style' => 'text-align: center;',
          ),
        );
        break;
    }
    $rows[] = $tmp_row;
  }

  // Do the actual theming.
  $output = theme('table', array(
      'header' => $header,
      'rows' => $rows,
      'sticky' => TRUE,
      'empty' => t('There are no download statistics to show yet.'),
    ));
  $output .= theme('pager', array('tags' => array('tags' => array())));
  return $output;
}
 /**
  * Theme function for the 'default' filefield formatter.
  */
function theme_filefield_mail_link($variables) {

  $file = $variables['file'];
  $icon_directory = $variables['icon_directory'];

  $url = filefield_mail_path($file);
  $icon = theme('file_icon', array('file' => $file, 'icon_directory' => $icon_directory));

  // Set options as per anchor format.
  // @see http://microformats.org/wiki/file-format-examples
  $options = array(
    'attributes' => array(
      'type' => $file->filemime . '; length=' . $file->filesize,
    ),
  );
  $_SESSION['filefield_mail_redirect'] = $_GET['q'];

  // Use the description as the link text if available.
  if (empty($file->description)) {
    $link_text = $file->filename;
  }
  else {
    $link_text = $file->description;
    $options['attributes']['title'] = $file->filename;
  }

  return '<span class="file">' . $icon . ' ' . l($link_text, $url, $options) . '</span>';
}

/**
 * Builds the trackable path to a file.
 *
 * @param object $file
 *   object containing the file information
 */
function filefield_mail_path($file) {
  return 'download/' . $file->fid . '/' . $file->filename;
}

/**
 * Implements hook_file_download_access_alter
 * @param $grants An array of grants gathered by hook_file_download_access()
 * @param $file_item The array of information about the file to alter access for.
 * @param $entity_type The type of $entity; for example, 'node' or 'user'.
 * @param $entity The $entity to which $file is referenced.
 */
function filefield_mail_file_download_access_alter (&$grants, $file_item, $entity_type, $entity){
//function filefield_mail_file_download_access($file_item, $entity_type, $entity){
  $parameters = drupal_get_query_parameters($_GET);

  $fid = $file_item['fid'];
  $token = md5($fid . $parameters['mail']);
  if ($token === $parameters['token']){
    $grants['node'] = TRUE;
  } else {
    drupal_set_message('Invalid download link');
    $grants['node'] = FALSE;
  }
}
