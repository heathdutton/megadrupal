<?php

/**
 * @file
 * A module that allows looking up of matches.
 */

/**
 * Implements hook_help().
 */
function tabt_matches_help($path, $arg) {
  if ($path == 'admin/help#tabt_matches') {
    return _filter_autop(file_get_contents(dirname(__FILE__) . '/README.txt'));
  }
}

/**
 * Implements hook_menu().
 */
function tabt_matches_menu() {
  $items[variable_get('tabt_matches_matchpage', 'championship/match') . '/%'] = array(
    'page callback' => 'tabt_matches_matchpage',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'file' => 'includes/tabt_matches.pages.matchpage.inc',
  );

  $items[variable_get('tabt_matches_matchespage', 'championship/calendar') . '/%'] = array(
    'page callback' => 'tabt_matches_matchespage',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'file' => 'includes/tabt_matches.pages.calendar.inc',
  );

  $items[variable_get('tabt_matches_rankingpage', 'championship/ranking') . '/%'] = array(
    'page callback' => 'tabt_matches_ranking',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'file' => 'includes/tabt_matches.pages.ranking.inc',
  );

  $items['admin/config/services/tabt/matches'] = array(
    'title' => 'TabT Matches',
    'description' => 'Administer the TabT-Matches module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tabt_matches_admin'),
    'access arguments' => array('administer tabt'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/tabt_matches.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function tabt_matches_theme($existing, $type, $theme, $path) {
  return array(
    'tabt_matchpage' => array(
      'variables' => array('match' => NULL),
      'file' => 'theme/tabt_matches.matchpage.inc',
    ),
    'tabt_calendar' => array(
      'variables' => array('teaminfo' => NULL, 'matches' => NULL, 'team' => 'A', 'season' => NULL),
      'file' => 'theme/tabt_matches.calendar.inc',
    ),
    'tabt_ranking' => array(
      'variables' => array('teaminfo' => NULL, 'ranking' => NULL, 'season' => NULL),
      'file' => 'theme/tabt_matches.ranking.inc'
    ),
    'tabt_upcoming_matches' => array(
      'variables' => array('matches' => array()),
      'file' => 'theme/tabt_matches.blocks.inc'
    ),
    'tabt_past_matches' => array(
      'variables' => array('matches' => array()),
      'file' => 'theme/tabt_matches.blocks.inc'
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function tabt_matches_block_info() {
  $blocks['tabt_rankings'] = array(
    'info' => t('Rankings'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['tabt_next_matches'] = array(
    'info' => t('Next matches per team'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['tabt_next_divweek_matches'] = array( 
    'info' => t('Matches next divisionweek'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['tabt_prev_matches'] = array(
    'info' => t('Results previous matches per team'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['tabt_prev_divweek_matches'] = array(
    'info' => t('Results matches previous divisionweek'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['tabt_prev_yearweek_matches'] = array(
    'info' => t('Results matches previous week'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['tabt_current_yearweek_matches'] = array(
    'info' => t('Results matches current week'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function tabt_matches_block_view($delta = '') {
  switch ($delta) {
    case 'tabt_rankings':
      if (!module_load_include('inc', 'tabt_matches', 'includes/tabt_matches.blocks')) {
        return;
      }
      return _tabt_matches_rankings_block();
    case 'tabt_next_matches':
      if (!module_load_include('inc', 'tabt_matches', 'includes/tabt_matches.blocks')) {
        return;
      }
      return _tabt_matches_next_matches_block();
    case 'tabt_next_divweek_matches':
      if (!module_load_include('inc', 'tabt_matches', 'includes/tabt_matches.blocks')) {
        return;
      }
      return _tabt_matches_next_divisionweek_matches_block();
    case 'tabt_prev_matches':
      if (!module_load_include('inc', 'tabt_matches', 'includes/tabt_matches.blocks')) {
        return;
      }
      return _tabt_matches_previous_matches_block();
    case 'tabt_prev_divweek_matches':
      if (!module_load_include('inc', 'tabt_matches', 'includes/tabt_matches.blocks')) {
        return;
      }
      return _tabt_matches_previous_divisionweek_matches_block();
    case 'tabt_current_yearweek_matches':
      if (!module_load_include('inc', 'tabt_matches', 'includes/tabt_matches.blocks')) {
        return;
      }
      return _tabt_matches_current_yearweek_matches_block();
    case 'tabt_prev_yearweek_matches':
      if (!module_load_include('inc', 'tabt_matches', 'includes/tabt_matches.blocks')) {
        return;
      }
      return _tabt_matches_previous_yearweek_matches_block();
  }
}

/**
 * Get the ranking for a team.
 *
 * @param team
 *   The team to get the ranking of.
 * @return array
 *   An array with containing all RankingEntry-objects for the division.
 */

function tabt_matches_get_ranking($team) {
  $result = FALSE;
  if (variable_get('tabt_caching')) {
    $result = tabt_cache_get('tabt_matches_ranking_' . $team->DivisionId);
  }
  if (!variable_get('tabt_caching') || $result === FALSE) {
    // Connect to the TabT-API and get the ranking.
    $soap_client = _tabt_setup_soap_client();
    $result = array();
    if ($soap_client != NULL) {
      try {
        $response = $soap_client->GetDivisionRanking(
            array(
                'Credentials' => _tabt_get_credentials(),
                'DivisionId' => $team->DivisionId
            )
        );
        // We don't need the entire resultsobject, only the rankingentries.
        if (isset($response->RankingEntries)) {
          $result = $response->RankingEntries;

          // Store it in the cache. Rankings get updated quite often, so only cache
          // it for a day.
          if (!isset($team->Season) || tabt_is_current_season($team->Season)) {
            tabt_cache_set('tabt_matches_ranking_' . $team->DivisionId, $result, 1 * 60 * 60 * 24);
          }
          else {
            tabt_cache_set('tabt_matches_ranking_' . $team->DivisionId, $result, 6 * 30 * 60 * 60 * 24);
          }
        }
        else {
          $result = FALSE;
        }
      } catch (SoapFault $e) {
        $result = FALSE;
      }
    }
  }
  if ($result === FALSE) {
    $result = tabt_cache_get('tabt_matches_ranking_' . $team->DivisionId, TRUE);
  }
  if ($result === FALSE) {
    $result = array();
  }
  return unserialize(serialize($result));
}

/**
 * Get all scheduled matches for this season.
 *
 * @param team
 *   The Team to get the matches for. If not valid or supplied, all matches for
 *   all teams will be returned.
 * @param season
 *   The season to look at.
 * @return array
 *   An array containing TabTMatch-objects.
 */
function tabt_matches_get_matches($team = NULL, $season = NULL) {
  $result = FALSE;
  // If there is no team or the team is invalid, get all matches.
  $season = tabt_process_seasonnumber($season);
  if (!$team || $team == NULL || !tabt_is_valid_team($team, $season)) {
    global $_tabt_matches_matches;
    if (isset($_tabt_matches_matches[$season])) {
      return unserialize(serialize($_tabt_matches_matches[$season]));
    }
    if (variable_get('tabt_caching')) {
      $result = tabt_cache_get('tabt_matches_matches_' . $season);
    }
    if (!variable_get('tabt_caching') || $result === FALSE) {
      $soap_client = _tabt_setup_soap_client();
      if ($soap_client != NULL) {
        try {
          // Get all Matches from the API.
          $response = $soap_client->GetMatches(
            array(
              'Credentials' => _tabt_get_credentials(),
              'Club'  => variable_get('tabt_club_id', 'Vl-B000'),
              'Season' => $season
            )
          );
          
          // Copy all matches into TabTMatch-objects.
          if (isset($response->TeamMatchesEntries)) {
            $result = array();
            foreach ($response->TeamMatchesEntries as $matchentry) {
              $match = new TabTMatch();
              $match->copy_from_tabt_entry($matchentry, $season);
              $result[] = $match;
            }
            tabt_cache_expire('tabt_matches_prev_divweek_' . $season);
            tabt_cache_expire('tabt_matches_next_divweek_' . $season);
            if (!tabt_is_current_season($season)) {
              tabt_cache_set('tabt_matches_matches_' . $season, $result, 6 * 30 * 60 * 60 * 24);
            }
            else {
              // Cache the result. These get updated quite often with results, so only
              // store them for a day.
              tabt_cache_set('tabt_matches_matches_' . $season, $result, 1 * 60 * 60 * 24);
            }
          }
        } catch (SoapFault $e) {
          $result = FALSE;
        }
      }
    }
    if ($result === FALSE) {
      $result = tabt_cache_get('tabt_matches_matches_' . $season, TRUE);
    }
    if ($result === FALSE) {
      $result = array();
    }
    $_tabt_matches_matches[$season] = $result;
  }
  else {
    global $_tabt_matches_matchesperteam;
    if (isset($_tabt_matches_matchesperteam[$team])) {
      return unserialize(serialize($_tabt_matches_matchesperteam[$team]));
    }
    $teaminfo = tabt_get_teaminfo($team, $season);
    if (isset($teaminfo->TeamId)) {
      if (variable_get('tabt_caching')) {
        $result = tabt_cache_get('tabt_matches_matches_' . $teaminfo->TeamId);
      }
      if (!variable_get('tabt_caching') || $result === FALSE) {
        $soap_client = _tabt_setup_soap_client();
        if ($soap_client != NULL) {
          try {
            // Get all matches for the team from the API.
            $response = $soap_client->GetMatches(
              array(
                'Credentials' => _tabt_get_credentials(),
                'Club'  => variable_get('tabt_club_id', 'Vl-B000'),
                'Team' => $teaminfo->Team,
                'DivisionId' => $teaminfo->DivisionId,
              )
            );
            
            // Copy all matches into TabTMatch-objects.
            if (isset($response->TeamMatchesEntries)) {
              $result = array();
              foreach ($response->TeamMatchesEntries as $matchentry) {
                $match = new TabTMatch();
                $match->copy_from_tabt_entry($matchentry, $season);
                $result[] = $match;
              }
              
              if (!tabt_is_current_season($season)) {
                tabt_cache_set('tabt_matches_matches_' . $teaminfo->TeamId, $result, 6 * 30 * 60 * 60 * 24);
              }
              else {
                // Cache the result. These get updated quite often with results, so only
                // store them for a day.
                tabt_cache_set('tabt_matches_matches_' . $teaminfo->TeamId, $result, 1 * 60 * 60 * 24);
              }
            }
          } catch (SoapFault $e) {
            $result = FALSE;
          }
        }
      }
    }
    if ($result === FALSE) {
      $result = tabt_cache_get('tabt_matches_matches_' . $teaminfo->TeamId, TRUE);
    }
    if ($result === FALSE) {
      $result = array();
    }
    $_tabt_matches_matchesperteam[$team] = $result;
  }
  return unserialize(serialize($result));
}

/**
 * Find a match.
 *
 * @param $id
 *   The ID of the match.
 * @param $season
 *   The season to look at.
 * @return TabTMatch
 *   The requested TabTMatch.
 */
function _tabt_matches_find_match($id, $season = NULL) {
  // First we'll see if we can find the match in the general matcheslist.
  $matches = tabt_matches_get_matches(NULL, $season);

  $match = _tabt_matches_find_match_in_list($id, $matches);
  if ($match) {
    return $match;
  }

  // The match isn't in the general matcheslist. We'll now look up the
  // matchlist for each team.
  $response = tabt_get_teams($season);

  if (isset($response->TeamEntries)) {
    // Search for the right TeamEntry
    foreach ($response->TeamEntries as $teamentry) {
      $matches = tabt_matches_get_matches($teamentry->Team, $season);
      $match = _tabt_matches_find_match_in_list($id, $matches);
      if ($match) {
        return $match;
      }
    }
  }

  // We can't find the match anywhere. Probably due to caching.
  // Let's try to reconstruct everything ourselfs and disable caching.
  $match = new TabTMatch();
  $match->id = $id;
  $match->reconstruct();
  $match->Cache = FALSE;
  return $match;

}

/**
 * Search a match in a list of matches.
 *
 * @param $id
 *   The id of the match to look for.
 * @param $list
 *   A list of TabtMatches.
 * @return TabTMatch
 *   The requested object or NULL if not found.
 */
function _tabt_matches_find_match_in_list($id, $list) {
  if ($list != NULL) {
    foreach ($list as $match) {
      if (isset($match->MatchUniqueId)) {
        if ($match->MatchUniqueId == $id) {
          return $match;
        }
      }
    }
  }
}

/**
 * Get a single match.
 *
 * @param id
 *   The id of the match.
 * @param get_results
 *   Whether or not to also lookup the details about the match. (Default: TRUE)
 * @return TabTMatch
 *   The TabTmatch with the right id.
 */
function tabt_matches_get_match($id, $get_results = TRUE, $season = NULL) {
  $season = tabt_process_seasonnumber($season);
  $result = FALSE;
  // We can't lookup a match if we don't get an ID.
  if ($id) {
    if (!variable_get('tabt_caching') || !$result = tabt_cache_get('tabt_matches_match_' . $id)) {
      $result = _tabt_matches_find_match($id, $season);
      // Search for the matching Match.

      if ($get_results && $result != NULL && $result != FALSE) {
        // Get the matchdetails.
        $result->get_results();
        // Don't cache invalid matches.
        if (!$result->err && $result->Cache) {
          if (isset($result->Season) && !tabt_is_current_season($result->Season)) {
            tabt_cache_set('tabt_matches_match_' . $id, $result, 6 * 30 * 60 * 60 * 24);
          }
          else {
            // Cache the result. Matchdetails rarely change after they've been
            // uploaded, so store it for 30 days
            tabt_cache_set('tabt_matches_match_' . $id, $result, 30 * 60 * 60 * 24);
          }
        }
      }
    }
    if (!$result) {
      $result = tabt_cache_get('tabt_matches_match_' . $id, TRUE);
    }
    if (!$result) {
      $result = new TabTMatch();
    }
  }
  else {
    $result = new TabTMatch();
    $result->err = TRUE;
    $result->errinfo = 'no id';
  }
  return $result;

}

/**
 * Get the already played matches to populate the selectionlist when creating
 * Report-content.
 *
 * @deprecated
 * This only returns a list of played matches for the current season. Using
 * this function will result in losing all links with matches when the season
 * changes.
 *
 * @return array
 *   An array with the matchID as key and "Week X: HomeTeam - AwayTeam" as
 *   value.
 */
function tabt_matches_get_selectionlist() {
  // Also allow Matchreports for Tournaments.
  $result = array(0 => t('Tournament'));
  // Get all matches for this club.
  $matches = tabt_matches_get_matches();

  foreach ($matches as $match) {
    // Check if there is a date set.
    if ($match->Date) {
      $date = DateTime::createFromFormat('Y-m-d H:i:s', $match->Date . ' ' . $match->Time);
      // If the match has already happened, we can write a report for it.
      if ($date->getTimestamp() <= time()) {
        $result[$match->MatchUniqueId] = t('Week') . ' ' . check_plain($match->WeekName . ': ' . $match->HomeTeam . ' - ' . $match->AwayTeam);
      }
    }
  }
  return $result;
}

/**
 * Get the next Match to be played by a team.
 *
 * @param team
 *   The team to get the next match of.
 * @param season
 *   The season to look at.
 * @return TabTmatch
 *   The next TabTmatch to be played.
 */
function tabt_matches_get_next_match($team, $season = NULL) {
  // We can only get the next match if we are given a valid team.
  if (!tabt_is_valid_team(drupal_strtoupper($team), $season)) {
    return;
  }
  // Get all matches for this team.
  $matches = tabt_matches_get_matches($team, $season);

  foreach ($matches as $match) {
    // The next match is the first match that has not yet happened (and if
    // there is no score yet).
    if (!$match->Score && $match->Date) {
      $date = DateTime::createFromFormat('Y-m-d H:i:s', $match->Date . ' ' . $match->Time);
      // We'll consider matches that are still happening as not yet played
      // here, hence the 4 hour delay.
      if ($date->getTimestamp() + 3600 * 4 >= time()) {
        return $match;
      }
    }
  }
}

/**
 * Get the previous Match by a team that has a score.
 * Matches played in advance will not show up until their actual date.
 *
 * @param team
 *   The team to get the previous match of.
 * @param season
 *   The season to look at.
 * @return TabTmatch
 *   The previous played TabTmatch.
 */
function tabt_matches_get_last_match($team, $season = NULL) {
  // We can't get the last match if we are not given a valid team.
  if (!tabt_is_valid_team(drupal_strtoupper($team), $season)) {
    return;
  }
  // Get all matches for this team.
  $matches = tabt_matches_get_matches($team, $season);

  $last_match = NULL;
  // Loop through all the matches. As soon as we reach a match that does not
  // yet have a score, we know the previous match was the last one played.
  foreach ($matches as $match) {
    if ($match->Score) {
      $date = DateTime::createFromFormat('Y-m-d H:i:s', $match->Date . ' ' . $match->Time);
      if ($date->getTimestamp() <= time()) {
        $last_match = $match;
      }
    }
  }
  return $last_match;
}

/**
 * Get the current rank of a team.
 *
 * @param team
 *   The team to get the ranking of.
 * @param season
 *   The season to look at.
 * @return RankingEntry
 *   The RankingEntry-object of the team.
 */
function tabt_matches_get_rank($team, $season = NULL) {
  // No valid team -> No rank.
  if (!tabt_is_valid_team(drupal_strtoupper($team), $season)) {
    return;
  }

  // Get the teaminfo so we can lookup the division.
  $teaminfo = tabt_get_teaminfo($team, $season);

  if (!$teaminfo) {
    // If we get here, the API screwed up and we didn't get a valid
    // TeamEntry-object.
    return;
  }

  // Get the ranking for the division
  $ranking = tabt_matches_get_ranking($teaminfo);

  // Loop through all rankingentries untill we get to the right team.
  // We check $rank->Team instead of $rank->Club because a club can have
  // multiple teams in the same division.
  foreach ($ranking as $rank) {
    if ($rank->TeamClub == variable_get('tabt_club_id', 'Vl-B000') && drupal_strtoupper(drupal_substr($rank->Team, -1)) == drupal_strtoupper($teaminfo->Team)) {
      return $rank;
    }
  }
}

/**
 * Get the start of the previous divisionweek.
 * 
 * @param season
 *   The season to look at.
 * @return
 *   The timestamp for the start (monday) of the previous divisionweek.
 */
function tabt_matches_get_previous_divisionweek($season = NULL) {
  global $_tabt_previous_divisionweek;
  $season = tabt_process_seasonnumber($season);
  if (isset($_tabt_previous_divisionweek[$season])) {
    return $_tabt_previous_divisionweek[$season];
  }
  $matches = tabt_matches_get_matches(NULL, $season);
  
  if (variable_get('tabt_caching')) {
    $result = tabt_cache_get('tabt_matches_prev_divweek_' . $season);
  }
  
  if (!variable_get('tabt_caching') || $result === FALSE) {
  
  
    $result = 0;
    
    foreach ($matches as $match) {
      if (isset($match->Score)) {
        $date = DateTime::createFromFormat('Y-m-d H:i:s', $match->Date . ' ' . $match->Time);
        if ($date != NULL && $date->getTimestamp() <= time() && $date->getTimestamp() > $result) {
          $result = $date->getTimestamp();
        }
      }
    }
    if ($result > 0) {
      $result = strtotime("monday this week", $result);
    }
    if (!tabt_is_current_season($season)) {
      tabt_cache_set('tabt_matches_prev_divweek_' . $season, $result, 6 * 30 * 60 * 60 * 24);
    }
    else {
      tabt_cache_set('tabt_matches_prev_divweek_' . $season, $result, 1 * 60 * 60 * 24);
    }
    $_tabt_previous_divisionweek[$season] = $result;
    tabt_cache_expire('tabt_matches_next_divweek_' . $season);
  }

  return $result;
}

/**
 * Get the start of the next divisionweek.
 *
 * @param season
 *   The season to look at.
 * @return
 *   The timestamp for the start (monday) of the next divisionweek.
 */
function tabt_matches_get_next_divisionweek($season = NULL) {
  global $_tabt_next_divisionweek;
  $season = tabt_process_seasonnumber($season);
  if (isset($_tabt_next_divisionweek[$season])) {
    return $_tabt_next_divisionweek[$season];
  }
  $previous = tabt_matches_get_previous_divisionweek($season);
  if ($previous != 0) {
    $previous = strtotime("+1 week", $previous);
  }
  
  if (variable_get('tabt_caching')) {
    $result = tabt_cache_get('tabt_matches_next_divweek_' . $season);
  }
  
  if (!variable_get('tabt_caching') || $result === FALSE) {    
    $matches = tabt_matches_get_matches(NULL, $season);
    
    $result = 0;
  
    foreach ($matches as $match) {
      $date = DateTime::createFromFormat('Y-m-d H:i:s', $match->Date . ' ' . $match->Time);
      if ($date != NULL && $date->getTimestamp() > time() && $date->getTimestamp() > $previous && ($date->getTimestamp() < $result || $result == 0)) {
        $result = $date->getTimestamp();
      }
    }
    if ($result > 0) {
      $result = strtotime("monday this week", $result);
    }
    if (!tabt_is_current_season($season)) {
      tabt_cache_set('tabt_matches_next_divweek_' . $season, $result, 6 * 30 * 60 * 60 * 24);
    }
    else {
      tabt_cache_set('tabt_matches_next_divweek_' . $season, $result, 1 * 60 * 60 * 24);
    }
  }
  $_tabt_next_divisionweek[$season] = $result;
      
  return $result;
}
