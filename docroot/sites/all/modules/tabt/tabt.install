<?php
/**
 * @file
 * Install the TabT Module;
 */

/**
 * Implements hook_schema().
 */
function tabt_schema() {
  $schema['cache_tabt'] = drupal_get_schema_unprocessed('system', 'cache');
  $schema['cache_tabt']['description'] = 'Cache table for the TabT module to store already fetched data.';
  return $schema;
}

/**
 * Implements hook_uninstall().
 */
function tabt_uninstall() {
  variable_del('tabt_club_id');
  variable_del('tabt_club_name');
  variable_del('tabt_site');
  variable_del('tabt_locale');
  variable_del('tabt_caching');
  variable_del('tabt_credentials_user');
  variable_del('tabt_credentials_password');
  variable_del('tabt_teams');
  variable_del('tabt_teams_titles');
  variable_del('tabt_teamspage');
}

/**
 * Create Cache-table.
 */
function tabt_update_7000() {
  db_create_table('cache_tabt', system_schema_cache_7054());
}

/**
 * Convert teamaliases- and teamtitles-arrays.
 */
function tabt_update_7001() {
  $aliases = variable_get('tabt_teams');
  $titles = variable_get('tabt_teams_titles', array());
  variable_del('tabt_teams');
  variable_del('tabt_teams_titles');
  $teams = tabt_get_all_teams();
  $values = array();
  foreach ($teams->TeamEntries as $team) {
    $id = $team->TeamId;
    if ((isset($aliases[$id]) && isset($team->Season)) || isset($titles[$id])) {
      $object = new stdClass();
      if (isset($aliases[$id]) && isset($team->Season)) {
        $object->Alias = $aliases[$id];
        $object->Season = $team->Season;
      }
      if (isset($titles[$id])) {
        $object->Title = $titles[$id];
      }
      $values[$id] = $object;
    }
  }
  variable_set('tabt_teams', $values);
}

/**
 * Implements hook_requirements().
 */
function tabt_requirements($phase) {
  // Ensure translations don't break at install time
  $t = get_t();
  $result = array();
  $soaprequirement['title'] = $t('PHP SOAP extension');
  $soaprequirement['description'] = $t('The PHP SOAP extension must be enabled to use the web service client SOAP support module.');
  if (extension_loaded('soap')) {
    $soaprequirement['value'] = $t('Enabled');
    $soaprequirement['severity'] = REQUIREMENT_OK;
  }
  else {
    $soaprequirement['value'] = $t('Missing');
    $soaprequirement['severity'] = REQUIREMENT_ERROR;
  }
  $result['php_soap'] = $soaprequirement;
  if ($phase == 'runtime') {
    $test = _tabt_test();
    $tabtrequirement['title'] = t('TabT-API Version');
    if (isset($test->ApiVersion)) {
      $versionok = TRUE;
      $version = explode('.', $test->ApiVersion);
      $reqversion = explode('.', TABT_REQ_VERSION);
      for ($i = 0; $i < count($reqversion); $i++) {
        if (isset($version[$i])) {
          if ($version[$i] < $reqversion[$i]) {
            $versionok = FALSE;
            break;
          }
        }
        elseif ($reqversion[$i] > 0) {
          $versionok = FALSE;
          break;
        }
      }
      $tabtrequirement['value'] = $test->ApiVersion;
      if ($versionok) {
        $tabtrequirement['severity'] = REQUIREMENT_OK;
      }
      else {
        $tabtrequirement['description'] = $t('The TabT-API you are using is too old. TabT requires at least API version %version.', array('%version' => TABT_REQ_VERSION));
        $tabtrequirement['severity'] = REQUIREMENT_ERROR;
      }
      $result['tabt_api'] = $tabtrequirement;
    }
    else {
      $tabtrequirement['value'] = t('N/A');
      $tabtrequirement['description'] = $t('Unable to reach the TabT-API. Did you set the configuration correctly?');
      $tabtrequirement['severity'] = REQUIREMENT_ERROR;
    }
  }
  return $result;
}