<?php
/**
 * @file
 * A module that provides an interface to lookup information from the
 * Flemish Tabletennis Site.
 */
define('TABT_REQ_VERSION', '0.7.8');
/**
 * Implements hook_permission().
 */
function tabt_permission() {
  return array(
    'administer tabt' => array(
      'title' => t('Configure the TabT-module'),
    ),
    'administer tabt credentials' => array(
      'title' => t('Change your TabT-credentials'),
    ),
  );
}

/**
 * Implements hook_flush_caches().
 */
function tabt_flush_caches() {
  return array('cache_tabt');
}

/**
 * Implements hook_help().
 *
 * Displays help and module information.
 *
 * @param path
 *   Which path of the site we're using to display help.
 * @param arg
 *   Array that holds the current path as returned from arg() function.
 */
function tabt_help($path, $arg) {
  if ($path == 'admin/help#tabt') {
    // Return a line-break version of the module README.txt.
    return _filter_autop(file_get_contents(dirname(__FILE__) . '/README.txt'));
  }
}

/**
 * Implements hook_theme().
 */
function tabt_theme($existing, $type, $theme, $path) {
  return array(
    'tabt_admin_teams_teamlist' => array(
      'render element' => 'form',
      'file' => 'theme/tabt.admin.inc'
    ),
    'tabt_teams' => array(
      'variables' => array('teams' => NULL, 'season' => NULL),
      'file' => 'theme/tabt.teams.inc'
    ),
  );
}

/**
 * Implements hook_menu().
 */

function tabt_menu() {
  $items = array();
  
  $items[variable_get('tabt_teamspage', 'teams')] = array(
    'title' => 'Teams',
    'page callback' => 'tabt_teamspage',
    'access callback' => TRUE,
    'file' => 'includes/tabt.pages.teams.inc'
  );

  $items['admin/config/services/tabt'] = array(
    'title' => 'TabT',
    'description' => 'Configuration for the TabT-module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tabt_admin_form'),
    'access arguments' => array('administer tabt'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/tabt.admin.inc'
  );

  $items['admin/config/services/tabt/credentials'] = array(
    'title' => 'TabT Credentials',
    'description' => 'Change your TabT credentials',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tabt_admin_credentials_form'),
    'access arguments' => array('administer tabt credentials'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/tabt.admin.inc'
  );
  
  $items['admin/config/services/tabt/teams'] = array(
    'title' => 'TabT Teams',
    'description' => 'Teams configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tabt_admin_teams_form'),
    'access arguments' => array('administer tabt'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/tabt.admin.inc'
  );

  $items['admin/config/services/tabt/settings'] = array(
    'title' => 'General settings',
    'access arguments' => array('administer tabt'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  return $items;
}

/**
 * Setup the SoapClient.
 *
 * @return SoapClient
 *   A SoapClient.
 */
function _tabt_setup_soap_client() {
  global $_tabt_soap_client;
  if (isset($_tabt_soap_client)) {
    return $_tabt_soap_client;
  }
  try {
    $_tabt_soap_client = new SoapClient(variable_get('tabt_api', 'http://api.vttl.be/0.7/?wsdl'));
  } catch (Exception $e) {
    $_tabt_soap_client = NULL;
  }
  return $_tabt_soap_client;
  
}

/**
 * Make a test-connection to the TabT-API.
 *
 * @param credentials
 *   Credentials to test. If not supplied, the stored credentials will be used.
 * @return TestResponse
 *   The TestResponse-object
 */
function _tabt_test($credentials = NULL) {
  global $_tabt_test;
  if (isset($_tabt_test)) {
    return $_tabt_test;
  }
  $soap_client = _tabt_setup_soap_client();
  if ($soap_client == NULL) {
    return new stdClass();
  }
  if (!$credentials) {
    $credentials = _tabt_get_credentials();
  }
  try {
    $_tabt_test = $soap_client->Test(
    array('Credentials' => $credentials));
    return $_tabt_test;
  } catch (SoapFault $e) {
    return new stdClass();
  }  
}

/**
 * Get the TabT Credentials to use.
 *
 * @return array
 *   An array containing the credentials.
 */
function _tabt_get_credentials() {
  if (variable_get('tabt_credentials_user') && variable_get('tabt_credentials_password')) {
    return array(
      'Account'  => variable_get('tabt_credentials_user'),
      'Password' => variable_get('tabt_credentials_password')
    );
  }
}

/**
 * Test if the TabT-credentials are valid.
 *
 * @param credentials
 *   The Credentials to test. If none are given, the stored credentials will be
 *   tested.
 * @return boolean
 *   Whether the credentials are valid.
 */
function _tabt_are_valid_credentials($credentials = NULL) {
  if ($result = _tabt_test($credentials)) {
    if (isset($result->IsValidAccount)) {
      return ($result->IsValidAccount);
    }
  }
  return FALSE;
}

/**
 * Store an object in the cache.
 * 
 * @param name
 *   The name of the object to be stored.
 * @param data
 *   The object to be stored.
 * @param expire
 *   The time in seconds before expiration.
 */
function tabt_cache_set($name, $data, $expire = 0) {
  $object = new stdClass();
  $object->data = $data;
  if ($expire == 0) {
    $object->expire = 0;
  }
  else {
    $object->expire = time() + $expire;
  }
  return cache_set($name, $object, 'cache_tabt', CACHE_PERMANENT);
}

/**
 * Get an object from the cache.
 * 
 * @param name
 *   The name of the object to be fetched.
 * @param expired
 *   Get an object even if it expired. (Default: FALSE)
 * @return
 *   The fetched data or FALSE if it already expired or isn't available.
 */
function tabt_cache_get($name, $expired = FALSE) {
  $result = cache_get($name, 'cache_tabt');
  if ($result) {
    if (isset($result->data)) {
      $object = $result->data;
      if (isset($object->expire) && isset($object->data)) {
        if ($object->expire >= time() || $expired || $object->expire == 0) {
          return $object->data;
        }
        else {
        }
      }
    }
  }
  return FALSE;
}

/**
 * Expire an object in the cache.
 * 
 * @param name
 *   The name of the cache-object.
 */
function tabt_cache_expire($name) {
  $result = tabt_cache_get($name);
  if ($result !== FALSE) {
    tabt_cache_set($name, $result, -1);
  }
}

/**
 * Seasons
 */

/**
 * Get all seasons.
 * 
 * @return GetSeasonsResponse
 *   The GetSeasonsResponse-object.
 */
function tabt_get_seasons() {
  global $_tabt_seasons;
  $response = FALSE;
  if (isset($_tabt_seasons)) {
    return unserialize(serialize($_tabt_seasons));
  }
  if (!variable_get('tabt_caching') || !$response = tabt_cache_get('tabt_seasons')) {
    $soap_client = _tabt_setup_soap_client();
    if ($soap_client != NULL) {
      try {
        $response = $soap_client->GetSeasons(
          array(
            'Credentials' => _tabt_get_credentials(),
            'Club'  => variable_get('tabt_club_id', 'Vl-B000')
          )
        );
        tabt_cache_set('tabt_seasons', $response, 60 * 60 * 60 * 24);
      } catch (SoapFault $e) {
        $response = FALSE;
      }
    }
  }
  if (!$response) {
    $response = tabt_cache_get('tabt_seasons', TRUE);
  }
  if (!$response) {
    $response = new stdClass();
    $response->SeasonEntries = array();
    $response->CurrentSeason = 0;
    $response->CurrentSeasonName = NULL;
  }
  $_tabt_seasons = $response;
  return unserialize(serialize($response));
}

/**
 * Get an array of seasonnames.
 * 
 * @return
 *   An array of seasonnames with the seasonnumbers as keys.
 */
function tabt_get_seasonnames() {
  
  $seasons = tabt_get_seasons();
  
  $result = array();
  if (isset($seasons->SeasonEntries) && is_array($seasons->SeasonEntries)) {
    foreach ($seasons->SeasonEntries as $season) {
      $result[$season->Season] = $season->Name;
    }
  }
  
  return $result;
}

/**
 * Get an array of seasonnumber.
 *
 * @return
 *   An array of seasonumbers with the seasonnames as keys.
 */
function tabt_get_seasonnumbers() {

  $seasons = tabt_get_seasons();

  $result = array();
  if (isset($seasons->SeasonEntries) && is_array($seasons->SeasonEntries)) {
    foreach ($seasons->SeasonEntries as $season) {
      $result[$season->Name] = $season->Season;
    }
  }

  return $result;
}

/**
 * Get the current season.
 * 
 * @return
 *   The current seasonnumber.
 */
function tabt_get_current_season() {
  $seasons = tabt_get_seasons();
  if ($seasons != NULL && isset($seasons->CurrentSeason)) {
    return $seasons->CurrentSeason;
  }
  return NULL;
}

/**
 * Get the current seasonname.
 *
 * @return
 *   The current seasonname.
 */
function tabt_get_current_seasonname() {
  $seasons = tabt_get_seasons();
  if ($seasons != NULL && isset($seasons->CurrentSeasonName)) {
    return $seasons->CurrentSeasonName;
  }
  return NULL;
}

/**
 * Get seasonname associated with a given season.
 * 
 * @param season
 *   The season to get the name of.
 * @return
 *   The seasonname.
 */
function tabt_get_seasonname($season) {
  $seasons = tabt_get_seasonnames();
  if (isset($seasons[intval($season)])) {
    return $seasons[intval($season)];
  }
  $seasons = tabt_get_seasonnumbers();
  if (isset($seasons[$season])) {
    return $season;
  }
  return tabt_get_current_seasonname();
}

/**
 * Check if the given season is the current.
 * 
 * @param season
 *   Seasonnumber or Seasonname.
 * @return boolean
 *   TRUE if the given season is the current season.
 */
function tabt_is_current_season($season) {
  return ($season == tabt_get_current_season() || $season == tabt_get_current_seasonname());
}

/**
 * Get the seasonnumber to use.
 * 
 * @param season
 *   Seasoninput
 * @return
 *   The seasonnumber to use.
 */
function tabt_process_seasonnumber($season) {
  if ($season == NULL) {
    return tabt_get_current_season();
  }
  $seasons = tabt_get_seasonnames();
  if (isset($seasons[intval($season)])) {
    return intval($season);
  }
  $seasons = tabt_get_seasonnumbers();
  if (isset($seasons[$season])) {
    return $seasons[$season];
  }
  return tabt_get_current_season();
}

/**
 * Check if the given parameter is a valid season.
 * 
 * @param season
 *   Seasonnumber or Seasonname.
 * @return boolean
 *   TRUE if the given season is a valid seasonnumber of seasonname.
 */
function tabt_is_valid_season($season) {
  $seasons = tabt_get_seasonnames();
  if (isset($seasons[intval($season)])) {
    return TRUE;
  }
  $seasons = tabt_get_seasonnumbers();
  if (isset($seasons[$season])) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Create the form for the seasons-selectionlist.
 * 
 * @param curseason
 *   The season currently being viewed.
 * @param link
 *   The page to be linked to.
 * @param showseasons
 *   An array of booleans indicating which seasons to show. Key's are
 *   seasonID's. If given, only seasons set to TRUE will be shown.
 * @return
 *   The form-array.
 */
function tabt_seasons_form($form, &$form_state, $curseason, $link, $show_seasons = NULL) {
  global $base_url;
  if (!is_array($show_seasons)) {
    $show_seasons = NULL;
  }
  $seasons = tabt_get_seasons();
  if (isset($seasons->SeasonEntries)) {

    $seasons_list = array();
    foreach ($seasons->SeasonEntries as $season) {
      if ($show_seasons == NULL || (isset($show_seasons[$season->Season]) && $show_seasons[$season->Season])) {
        $seasons_list[$season->Name] = $season->Name;
      }
    }
    $form['seasons'] = array(
      '#type' => 'select',
      '#title' => t('Season'),
      '#options' => $seasons_list,
      '#default_value' => tabt_get_seasonname($curseason),
      '#attributes' => array('onchange' => "document.location.href='" . url($link, array('absolute' => TRUE, 'alias' => FALSE)) . "/' + this.value;")
    );
  }
  return $form;
}

/**
 * Get a selectionlist to switch seasons.
 * 
 * @param curseason
 *   The season currently being viewed.
 * @param link
 *   The pagelink to append the season to.
 * @param seasons
 *   An array of booleans indicating which seasons to show. Key's are
 *   seasonID's. If given, only seasons set to TRUE will be shown.
 * @return
 *   A rendered form to switch between seasons.
 */
function tabt_get_seasons_form($curseason, $link, $seasons = NULL) {
  return drupal_render(drupal_get_form('tabt_seasons_form', $curseason, $link, $seasons));
}

/**
 * Team-functions.
 */

/**
 * Get all teams for the club.
 *
 * @param season
 *   The season to look at.
 * @return GetClubTeamsResponse
 *   The GetClubTeamsResponse-object.
 */
function tabt_get_teams($season = NULL) {
  global $_tabt_teams;
  $season = tabt_process_seasonnumber($season);
  $teams = variable_get('tabt_teams', array());
  if (isset($_tabt_teams[$season])) {
    return unserialize(serialize($_tabt_teams[$season]));
  }
  if (!variable_get('tabt_caching') || !$response = tabt_cache_get('tabt_teams_' . $season)) {
    $soap_client = _tabt_setup_soap_client();
    if ($soap_client != NULL) {
      try {
        $response = $soap_client->GetClubTeams(
          array(
            'Credentials' => _tabt_get_credentials(),
            'Club' => variable_get('tabt_club_id', 'Vl-B000'),
            'Season' => $season
          )
        );
        if (isset($response->TeamCount) && $response->TeamCount <= 1) {
          if (isset($response->TeamEntries)) {
            $response->TeamEntries = array($response->TeamEntries);
          }
          else {
            $response->TeamEntries = array();
          }
        }
        if (isset($response->TeamEntries)) {
          $team_entries = array();
          foreach ($response->TeamEntries as $team) {
            $team->Season = $season;
            if (isset($teams[$team->TeamId])) {
              if (isset($teams[$team->TeamId]->Alias)) {
                $team->Alias = $teams[$team->TeamId]->Alias;
              }
              if (isset($teams[$team->TeamId]->Title)) {
                $team->Title = $teams[$team->TeamId]->Title;
              }
            }
            $team_entries[] = $team; 
          }
          $response->TeamEntries = $team_entries;
        }
        if (!tabt_is_current_season($season)) {
          tabt_cache_set('tabt_teams_' . $season, $response, 6 * 30 * 60 * 60 * 24);
        }
        else {
          tabt_cache_set('tabt_teams_' . $season, $response, 30 * 60 * 60 * 24);
        }
      } catch (SoapFault $e) {
        $response = FALSE;
      }
    }
  }
  if (!$response) {
    $response = tabt_cache_get('tabt_teams_' . $season, TRUE);
  }
  if (!$response) {
    $response = new stdClass();
    $response->TeamEntries = array();
    $response->TeamCount = 0;
  }
  $_tabt_teams[$season] = $response;
  return unserialize(serialize($response));
}

/**
 * Get the TeamEntry-object for a team.
 *
 * @param team
 *   The Team-letter.
 * @param season
 *   The season to look at.
 * @return TeamEntry
 *   The TeamEntry-object.
 */
function tabt_get_teaminfo($team, $season = NULL) {
  if ($team) {
    $team = tabt_get_real_team($team, $season);
    $response = tabt_get_teams($season);
    if (isset($response->TeamEntries)) {
      // Search for the right TeamEntry
      foreach ($response->TeamEntries as $teamentry) {
        if ($teamentry->TeamId == drupal_strtoupper($team)) {
          return $teamentry;
        }
      }
    }
  }
}

/**
 * Get all teams of all seasons.
 * 
 * @return GetClubTeamsResponse
 *   A GetClubTeamsResponse-object containing all teams.
 */
function tabt_get_all_teams() {
  $teams = tabt_get_all_teams_by_season();
  $result = NULL;
  foreach ($teams as $team) {
    if (isset($team->TeamEntries)) {
      if ($result == NULL) {
        $result = $team;
      }
      else {
        $result->TeamCount = intval($result->TeamCount) + intval($team->TeamCount);
        $result->TeamEntries = array_merge($result->TeamEntries, $team->TeamEntries);
      }
    }
  }
  return $result;
}

/**
 * Get all teams sorted by season.
 * 
 * @return
 *   An array of GetClubTeamsResponse-objects seasonnumber as key.
 */
function tabt_get_all_teams_by_season() {
  $seasons = tabt_get_seasons();
  $result = array();
  
  foreach ($seasons->SeasonEntries as $season) {
    $result[$season->Season] = tabt_get_teams($season->Season);  
  }
  
  return $result;
}

/**
 * Get all teams sorted by ID.
 * 
 * @return
 *   An array containing all TeamEntry objects with their ID as key.
 */
function tabt_get_all_teams_by_id() {
  $teams = tabt_get_all_teams_by_season();
  $result = array();
  foreach ($teams as $season) {
    if (isset($season->TeamEntries)) {
      foreach ($season->TeamEntries as $team) {
        $result[$team->TeamId] = $team;
      }
    }
  }
  return $result;
  
}

/**
 * Get the TeamID if the given team is an alias.
 * 
 * @param team
 *   The team
 * @param season
 *   The season to look at.
 * @return
 *   The teamID or the given team if it's not an alias.
 */
function tabt_get_real_team($team, $season = NULL) {
  if ($season != NULL) {
    $season = tabt_process_seasonnumber($season);
  }
  $team_var = variable_get('tabt_teams', array());
  foreach ($team_var as $id => $team_object) {
    if (isset($team_object->Alias)) {
      if (drupal_strtoupper($team_object->Alias) == drupal_strtoupper($team)) {
        if ($season == NULL || (isset($team_object->Season) && $team_object->Season == $season)) {
          return $id;
        }
      }
    }
  }
  return $team;
}

/**
 * Get the teamname.
 * 
 * @param team
 *   The teamid or urlalias.
 * @param season
 *   The season to look at.
 * @return
 *   The teamname.
 */
function tabt_get_teamname($team, $season = NULL) {
  $team_var = variable_get('tabt_teams', array());
  $teamid = tabt_get_real_team($team, $season);
  if (tabt_is_valid_team($teamid, $season)) {
    if (isset($team_var[$teamid]) && isset($team_var[$teamid]->Title)) {
      return $team_var[$teamid]->Title;
    }
    else {     
      $teaminfo = tabt_get_teaminfo($teamid, $season);
      if (isset($teaminfo->Team)) {
        return drupal_strtoupper($teaminfo->Team);
      }
      else {
        return drupal_strtoupper($team);
      }
    }
  }
  return $team;
}

/**
 * Get all seasons there are teams or a team with the given alias.
 * 
 * @param team
 *   The teamalias.
 * @return
 *   An array of booleans.
 */
function tabt_get_seasons_teams($team = NULL) {
  $result = array();
  if ($team == NULL) {
    $seasons = tabt_get_all_teams_by_season();
    foreach ($seasons as $season => $teams) {
      $result[$season] = (isset($teams->TeamCount) && $teams->TeamCount > 0);
    }
  }
  else {
    $team_var = variable_get('tabt_teams', array());
    foreach ($team_var as $id => $team_object) {
      if (isset($team_object->Alias)) {
        if (drupal_strtoupper($team_object->Alias) == drupal_strtoupper($team)) {
          if (isset($team_object->Season)) {
            $result[$team_object->Season] = TRUE;
          }
        }
      }
    }
  }
  return $result;
}

/**
 * Check if the TeamLetter is a valid team.
 *
 * @param team
 *   The TeamLetter.
 * @param season
 *   The season to look at.
 * @return boolean
 *   Whether the team exists.
 */
function tabt_is_valid_team($team, $season = NULL) {
  if ($team) {
    return (tabt_get_teaminfo($team, $season));
  }
  return FALSE;
}

/**
 * Get the Teamalias
 * 
 * @param teamid
 *   The TeamID
 * @return
 *   The teamurl-alias
 */
function tabt_get_teamurl($team) {
  $teams = variable_get('tabt_teams', array());
  if (isset($teams[$team]) && isset($teams[$team]->Alias)) {
    return $teams[$team]->Alias;
  }
  return $team;
}

/**
 * Compare 2 teams based on DivisionCategory, MatchType and Teamletter.
 *
 * @param a
 * 	 The first team.
 * @param b
 *   The second team.
 * @return
 *   A negative number or a positive number when the first team has a lower or
 *   higher value or 0 when they are equal.
 */
function tabt_teams_sort($a, $b) {
  if (!isset($a->DivisionCategory) || !isset($b->DivisionCategory)) {
    return 0;
  }
  if ($a->DivisionCategory != $b->DivisionCategory) {
    return $a->DivisionCategory - $b->DivisionCategory;
  }
  if (!isset($a->MatchType) || !isset($b->MatchType)) {
    return 0;
  }
  if ($a->MatchType != $b->MatchType) {
    return $a->MatchType - $b->MatchType;
  }
  if (!isset($a->Team) || !isset($b->Team)) {
    return 0;
  }
  return strcmp(drupal_strtoupper($a->Team), drupal_strtoupper($b->Team));
}

/**
 * Validation function to test the paths.
 */
function _tabt_validate_path($element, &$form_state, $form) {
  if (strpos($element['#value'], '%') !== FALSE) {
    form_error($element, t('You cannot use wildcards in the path.'));
  }
  if (substr($element['#value'], 0, 1) == '/' || substr($element['#value'], 0, 1) == '\\' || substr($element['#value'], -1) == '/' || substr($element['#value'], -1) == '\\') {
    form_error($element, t('Do not start or end your path with a slash.'));
  }
}

/**
 * Get the reference to the TabT-site.
 */
function _tabt_get_footer() {
  return
    '<small>' .
    t(
      'Information obtained from !link',
      array('!link' => l(
        'http://' . variable_get('tabt_site', 'competitie.vttl.be'),
        'http://' . variable_get('tabt_site', 'competitie.vttl.be')
      ))
    ) .
    '</small>' .
    "\n";
}
