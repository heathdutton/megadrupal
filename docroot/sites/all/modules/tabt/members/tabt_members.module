<?php

/**
 * @file
 * A module that allows looking up of members.
 */

/**
 * Implements hook_permission().
 */
function tabt_members_permission() {
  return array(
    'manage tabt members' => array(
      'title' => t('Manage the TabT-memberslist'),
    ),
  );
}

/**
 * Implements hook_help().
 */
function tabt_members_help($path, $arg) {
  if ($path == 'admin/help#tabt_members') {
    // Return a line-break version of the module README.txt.
    return _filter_autop(file_get_contents(dirname(__FILE__) . '/README.txt'));
  }
}

/**
 * Implements hook_menu().
 */
function tabt_members_menu() {
  $items[variable_get('tabt_members_memberspage', 'members')] = array(
    'page callback' => 'tabt_members_memberspage_callback',
    'access callback' => TRUE,
    'expanded' => TRUE,
    'file' => 'includes/tabt_members.pages.inc'
  );
  $items['admin/config/services/tabt/members'] = array(
    'title' => 'TabT Members',
    'description' => 'Administer the TabT-Members module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tabt_members_admin'),
    'access arguments' => array('administer tabt'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/tabt_members.admin.inc'
  );
  
  $items['admin/config/services/tabt/members/configure'] = array(
    'title' => 'Configure module',
    'description' => 'Administer the TabT-Members module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tabt_members_admin'),
    'access arguments' => array('administer tabt'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'includes/tabt_members.admin.inc'
  );
  
  $items['admin/config/services/tabt/members/manage'] = array(
    'title' => 'Manage members',
    'description' => 'Manage TabT-members',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tabt_members_admin_members'),
    'access arguments' => array('manage tabt members'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/tabt_members.admin.inc'
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function tabt_members_theme($existing, $type, $theme, $path) {
  return array(
    'tabt_memberpage' => array(
      'variables' => array('member' => NULL, 'season' => NULL),
      'file' => 'theme/tabt_members.memberpage.inc'
    ),
    'tabt_memberpage_results' => array(
      'variables' => array('results' => NULL, 'season' => NULL),
      'file' => 'theme/tabt_members.memberpage.inc'
    ),
    'tabt_members' => array(
      'variables' => array('members' => NULL, 'season' => NULL),
      'file' => 'theme/tabt_members.members.inc'
    ),
    'tabt_members_admin_members_memberlist' => array(
      'render element' => 'form',
      'file' => 'theme/tabt_members.admin.inc'
    ),
    'tabt_members_admin_members_memberlist_unregistered' => array(
      'render element' => 'form',
      'file' => 'theme/tabt_members.admin.inc'
    ),
  );
}

/**
 * Lookup a Drupal User associated with a Player ID.
 *
 * @param pid
 *   The Player ID.
 * @return int
 *   The UserID if there is one.
 */
function tabt_members_get_user($pid) {
  if ($pid) {
    // We should only look this up if we got an ID-field.
    if (variable_get('tabt_members_profile_idfield')) {
      $result = db_select('field_data_field_' . variable_get('tabt_members_profile_idfield'), 't')
      ->fields('t')
      ->condition('field_' . variable_get('tabt_members_profile_idfield') . '_value', $pid)
      ->execute()
      ->fetchObject();
      if ($result) {
        if (isset($result->entity_id)) {
          return $result->entity_id;
        }
      }
    }
  }
}

/**
 * Lookup the name of the player to be displayed.
 *
 * Order of precedence is:
 * 1. Drupal Account
 * 2. Admin Entry
 * 3. TabT Name
 *
 * @param pid
 *   The Player ID
 * @param memberentry
 *   The MemberEntry-Object to get the name from.
 * @return string
 *   The name.
 */
function tabt_members_get_name($pid, $member_entry = NULL) {
  $user_id = FALSE;
  // If we got a memberentry, get the user-id from there. Else look it up.
  if (isset($member_entry->UserId)) {
    $user_id = $member_entry->userid;
  }
  elseif ($pid) {
    $user_id = tabt_members_get_user($pid);
  }
  // Did we find a user?
  if ($user_id) {
    // Load the user.
    $user = user_load($user_id);
    // We can only get the name if we have the right profile fields.
    if (variable_get('tabt_members_profile_firstname') && variable_get('tabt_members_profile_lastname')) {
      $firstname_field = 'field_' . variable_get('tabt_members_profile_firstname');
      $lastname_field = 'field_' . variable_get('tabt_members_profile_lastname');
      // Only use the name if we got both the first and last name.
      if (isSet($user->{$firstname_field}[LANGUAGE_NONE]) && isSet($user->{$lastname_field}[LANGUAGE_NONE])) {
        return $user->{$firstname_field}[LANGUAGE_NONE][0]['safe_value'] . ' ' . $user->{$lastname_field}[LANGUAGE_NONE][0]['safe_value'];
      }
    }
  }
  // We didn't get a name yet, so let's see if one was set on the adminpage.
  $result = db_select('tabt_members', 't')
  ->fields('t')
  ->condition('id', $member_entry->UniqueIndex)
  ->execute()
  ->fetchObject();
  if ($result) {
    if ($result->name) {
      return $result->name;
    }
  }
  // We still didn't find one, so let's see if we got one from the
  // MemberEntry-object.
  if ($member_entry != NULL && isset($member_entry->FirstName) && isset($member_entry->LastName)) {
    return ucwords(drupal_strtolower($member_entry->FirstName . ' ' . $member_entry->LastName));
  }
}

/**
 * Get the link to the player profile.
 *
 * Order of precedence is:
 * 1. Drupal Userprofile
 * 2. Memberpage (TabT members module)
 *
 * @param pid
 *   The PlayerID.
 * @param season
 *   The season to look at.
 * @return string
 *   The link to the playerprofile.
 */
function tabt_members_get_link($pid, $season = NULL) {
  if ($pid) {
    $season = tabt_process_seasonnumber($season);
    // If the player is registered, link to his userprofile, else the
    // TabT Members-memberpage.
    if (tabt_is_current_season($season)) {
      if (tabt_members_get_user($pid)) {
        return 'user/' . tabt_members_get_user($pid);
      }
      else {
        return variable_get('tabt_members_memberspage', 'members') . '/' . $pid;
      }
    }
    else {
      return variable_get('tabt_members_memberspage', 'members') . '/' . $pid . '/' . tabt_get_seasonname($season);
    }
  }
}

/**
 * Get all Members
 *
 * @return array
 *   An array containing all members as TabTClubMember-objects.
 */
function tabt_members_getmembers($season = NULL) {
  global $_tabt_members_members;
  $season = tabt_process_seasonnumber($season);
  if (isset($_tabt_members_members[$season])) {
    return unserialize(serialize($_tabt_members_members[$season]));
  }
  $result = FALSE;
  if (variable_get('tabt_caching')) {
    $result = tabt_cache_get('tabt_members_members_' . $season);
  }
  if (!variable_get('tabt_caching') || $result === FALSE) {
    // Get the members for our club. If we have valid credentials, get extended
    // information.
    $soap_client = _tabt_setup_soap_client();
    if ($soap_client != NULL) {
      try {
        $response = $soap_client->GetMembers(
          array(
            'Credentials' => _tabt_get_credentials(),
            'Club'  => variable_get('tabt_club_id', 'Vl-B000'),
            'ExtendedInformation' => _tabt_are_valid_credentials(),
            'Season' => $season
          )
        );
        
        // Loop through the received members and copy each member into our own
        // TabTClubmember-objects.
        if (isset($response->MemberCount) && isset($response->MemberEntries)) {
          if ($response->MemberCount <= 1) {
            $response->MemberEntries = array($response->MemberEntries);
          }
        }
        else {
          $response->MemberEntries = array();
        }
        $result = array();
        foreach ($response->MemberEntries as $member_entry) {
          $member = new TabTClubmember();
          $member->copy_from_tabt_entry($member_entry, $season);
          $result[] = $member;
        }
        if (!tabt_is_current_season($season)) {
          tabt_cache_set('tabt_members_members_' . $season, $result, 6 * 30 * 60 * 60 * 24);
        }
        else {
          // Our members don't change that very often, so cache it for 7 days.
          tabt_cache_set('tabt_members_members_' . $season, $result, 7 * 60 * 60 * 24); 
        }
      } catch (SoapFault $e) {
        $result = FALSE;
      }
    }
  }
  if ($result === FALSE) {
    $result = tabt_cache_get('tabt_members_members_' . $season, TRUE);
  }
  if ($result === FALSE) {
    $result = array(); 
  }
  $_tabt_members_members[$season] = $result;
  return unserialize(serialize($result));
}

/**
 * Get all members in an array with their Name (Last Name<space>First Name) as
 * key.
 * 
 * @param season
 *   The season to look at.
 * @return
 *   An array containing the members with LastName FirstName as key.
 */
function tabt_members_get_members_by_lastfirst_name($season = NULL) {
  // Get all members.
  $members = tabt_members_getmembers($season);

  $members_by_name = array();

  // Loop through all members and store them in the array with their last and
  // firstname as key.
  foreach ($members as $member) {
    $members_by_name[$member->LastName . ' ' . $member->FirstName] = $member;
  }

  return $members_by_name;
}

/**
 * Get all members in an array with their PlayerID as key.
 * 
 * @param season
 *   The season to look at.
 * @return
 *   An array containing the members with their id as key.
 */
function tabt_members_get_members_by_id($season = NULL) {
  // Get all members.
  $members = tabt_members_getmembers($season);

  $members_by_id = array();

  // Loop through all members and store them in the array with their playerID
  // as key.
  foreach ($members as $member) {
    $members_by_id[$member->UniqueIndex] = $member;
  }

  return $members_by_id;
}

/**
 * Get a single member.
 *
 * @param pid
 *   The PlayerID.
 * @param season
 *   The season to look at.
 */
function tabt_members_get_member($pid, $season = NULL) {
  $season = tabt_process_seasonnumber($season);
  if (!variable_get('tabt_caching') || !$member = tabt_cache_get('tabt_members_member_' . $pid . '_' . $season)) {
    $members = tabt_members_get_members_by_id($season);
    if (isset($members[$pid])) {
      $member = new TabTClubMember();
      $member->copy_from_tabt_entry($members[$pid], $season);
      // Get the individual results.
      $member->get_results();
      if ($member->ResultsLoaded) {
        if (!tabt_is_current_season($season)) {
          tabt_cache_set('tabt_members_member_' . $pid . '_' . $season, $member, 6 * 30 * 60 * 60 * 24);
        }
        else {
          // Cache the member. The results get updated quite often, so only cache it
          // for a day.
          tabt_cache_set('tabt_members_member_' . $pid . '_' . $season, $member, 1 * 60 * 60 * 24);
        }
      }
    }
    else {
      $member = FALSE;
    }
  }
  if ($member === FALSE) {
    $member = tabt_cache_get('tabt_members_member_' . $pid . '_' . $season, TRUE);
  }
  return $member;
}

/**
 * Get the seasons there were members or the given player was a member.
 * 
 * @param pid
 *   The playerID.
 * @return
 *   An array of booleans with seasonID's as keys.
 */
function tabt_members_get_seasons($pid = NULL) {
  $seasons = tabt_get_seasons();
  $result = array();
  
  if (isset($seasons->SeasonEntries) && is_array($seasons->SeasonEntries)) {
    foreach ($seasons->SeasonEntries as $season) {
      if ($pid == NULL) {
        $members = tabt_members_getmembers($season->Season);
        $result[$season->Season] = (count($members) > 0);
      }
      else {
        $members = tabt_members_get_members_by_id($season->Season);
        $result[$season->Season] = (isset($members[$pid]));
      }
    }
  }
  return $result;
}

/**
 * Implements hook_preprocess_user_profile().
 *
 * If the user entered a playerID, the PlayerInfo will be appended to the
 * profile.
 * The memberobject can be accessed through $member.
 */
function tabt_members_preprocess_user_profile(&$variables) {
  $user = $variables['user'];
  if (variable_get('tabt_members_profile_idfield') && isset($variables['field_' . variable_get('tabt_members_profile_idfield')][0]['value'])) {
    // Add the player-info to the profile.
    $member = tabt_members_get_member($variables['field_' . variable_get('tabt_members_profile_idfield')][0]['value']);
    if ($member) {
      $variables['member'] = $member;
      $profile = $variables['user_profile'];
      $variables['user_profile']['member'] = array(
        '#theme'     => 'tabt_memberpage',
        '#weight'  => 99,
        '#member'   => $member,
        '#view_mode' => 'full',
        '#language'  => NULL,
      );
      // See which profilepic we would add.
      if ($member->ProfilePic) {
        $pic = $member->ProfilePic;
      }
      elseif ($member->DefaultPic) {
        $pic = $member->DefaultPic;
      }
      // We don't need to bother checking the userpicture, if we have nothing to
      // replace it with.
      if (isset($pic)) {
        // If the user has a userpicture, see if we need to replace it, else set
        // the necessary profile-picture.
        if (isset($variables['user_profile']['user_picture']['#markup'])) {
          // If our profile picture is local, we need to put a / at the front if
          // we just include the url.
          if (strpos($pic, 'http://') === FALSE && strpos($pic, '/') != 0) {
            $pic = '/' . $pic;
          }
          if (preg_match('/\<img typeof="foaf:Image" src="([^"]+)"/', $variables['user_profile']['user_picture']['#markup'], $matches)) {
            // If the picture is a default-picture, we'll replace it.
            if (strpos($matches[0], 'default_') || strpos($matches[0], 'default.') || strpos($matches[0], 'no_photo')) {
              $variables['user_profile']['user_picture']['#markup'] = preg_replace('/(<img typeof="foaf:Image" src=")([^"]+)(")/', '\1' . $pic . '\3', $variables['user_profile']['user_picture']['#markup']);
            }
          }
        }
        else {
          $variables['user_profile']['user_picture'] = '<div class="user-picture">' . l(theme('image', $pic), 'user/' . $user->uid) . '</div>';
        }
      }
    }
  }
}