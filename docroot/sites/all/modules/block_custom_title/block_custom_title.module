<?php
/**
 * @file
 * This module allows to give custom titles to block.
 */

/**
 * Implements hook_permission().
 */
function block_custom_title_permission() {
  return array(
    'administer block custom title' => array(
      'title' => t('Administer block custom title'),
    ),
  );
}

/**
 * Implements hook_preprocess_block().
 */
function block_custom_title_preprocess_block(&$vars, $hook) {
  if (user_access('administer block custom title') && ($vars['block']->subject != '')) {
    $path_url = current_path();
    $url = "block-title/" . $vars['block']->module . "/" . $vars['block']->delta . "/" . $path_url . "/edit";
    $query = array('destination' => $path_url);
    $options = array('query' => $query, "html" => TRUE);
    $module_path = drupal_get_path('module', 'block_custom_title');
    $img_array = array(
      'path' => $module_path . '/images/icon_titleChange.png',
      'alt' => t('change block title'),
      'title' => t('change block title'),
      'attributes' => array('id' => 'my-img'),
    );
    $img_path = theme('image', $img_array);
    $vars['block']->subject = "<div style='float:left;'>" . $vars['block']->subject . "</div>" . l($img_path, $url, $options);
  }
}

/**
 * Implements hook_menu().
 */
function block_custom_title_menu() {
  $items['block-title/%/%/%/edit'] = array(
    'title' => 'Create Block Title',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('block_custom_title_form', 2, 3),
    'access arguments' => array('administer block custom title'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Callback function for entering Block Custom Title.
 *
 * @see block_custom_title_create()
 *
 * @ingroup forms
 */
function block_custom_title_form($form, &$form_state, $block_delta, $custom_page) {
  $output = '';
  $result = db_query('SELECT n.custom_title_bc FROM {block_custom_title} n WHERE n.custom_page_bc = :page AND n.custom_delta_bc = :delta', array(':page' => $custom_page, ':delta' => $block_delta));
  $output = $result->fetch(PDO::FETCH_ASSOC);
  $output = $output['custom_title_bc'];
  if ($output) {
    $form['customtitle']['#default_value'] = $output;
  }
  $form['customtitle'] = array(
    '#type' => 'textfield',
    '#title' => t('Enter Custom Title'),
    '#default_value' => $output,
    '#maxlength' => 30,
    '#description' => t('Maximum allowed characters is 30.'),
  );
  $form['define_page'] = array(
    '#title' => t('Define Page'),
    '#type' => 'value',
    '#default_value' => $custom_page,
  );
  $form['blockdelta'] = array(
    '#type' => 'value',
    '#title' => t('Block Delta'),
    '#default_value' => $block_delta,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
    '#submit' => array('block_custom_title_create'),
  );
  return $form;
}

/**
 * Submit function for entering Custom Block Titles.
 *
 * @see block_custom_title_form()
 */
function block_custom_title_create($form, &$form_state) {
  $custom_title = $form_state['values']['customtitle'];
  $custom_page = $form_state['values']['define_page'];
  $block_delta = $form_state['values']['blockdelta'];
  db_merge('block_custom_title')
    ->key(array('custom_page_bc' => $custom_page, 'custom_delta_bc' => $block_delta))
    ->fields(array(
      'custom_title_bc' => $custom_title,
    ))
    ->execute();
}

/**
 * Implements hook_form_id_alter().
 */
function block_custom_title_form_block_custom_block_delete_alter(&$form, &$form_state, $form_id) {
  $form['#submit'][] = 'block_custom_title_delete';
}

/**
 * Implements hook_view_alter().
 */
function block_custom_title_block_view_alter(&$data, $block) {
  $path_url = current_path();
  $output = '';
  $block_delta = $block->delta;
  $result = db_query('SELECT n.custom_title_bc FROM {block_custom_title} n WHERE n.custom_page_bc = :page AND n.custom_delta_bc = :delta', array(':page' => $path_url, ':delta' => $block_delta));
  $output = $result->fetch(PDO::FETCH_ASSOC);
  $output = $output['custom_title_bc'];
  if ($output) {
    $block->title = $output;
  }
}

/**
 * Implements hook_block_list_alter().
 */
function block_custom_title_block_list_alter(&$blocks) {
  // Sets region to none for the blocks displayed in block_custom_title_form.
  if (arg(0) == "block-title") {
    foreach ($blocks as $b) {
      if ($b->delta != 'main') {
        $b->region = 'none';
      }
    }
  }
}

/**
 * Implements hook_help().
 */
function block_custom_title_help($path, $arg) {
  switch ($path) {
    case 'admin/help#block_custom_title':
      $path = dirname(__FILE__) . '/README.txt';
      if (file_exists($path)) {
        $readme = file_get_contents($path);
      }
      if (!isset($readme)) {
        return NULL;
      }
      if (module_exists('markdown')) {
        $filters = module_invoke('markdown', 'filter_info');
        $info = $filters['filter_markdown'];
        if (function_exists($info['process callback'])) {
          $output = $info['process callback']($readme, NULL);
        }
        else {
          $output = '<pre>' . $readme . '</pre>';
        }
      }
      else {
        $output = '<pre>' . $readme . '</pre>';
      }
      return $output;
  }
}

/**
 * Submit handler block_custom_block_delete().
 *
 * @see block_custom_title_form_alter()
 */
function block_custom_title_delete(&$form, &$form_state) {
  $block_delta = $form_state['build_info']['args'][1];
  db_delete('block_custom_title')
    ->condition('custom_delta_bc', $block_delta)
    ->execute();
}
