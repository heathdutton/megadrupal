<?php

/**
 * Implements hook_permission().
 */
function og_book_permission() {
  return array(
    'bypass og book control' => array(
      'title' => t('Bypass og book control'),
      'description' => t('Otherwise users can only add book pages to content within organic groups they belong.'),
    )
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function og_book_form_book_outline_form_alter(&$form, &$form_state, $form_id) {
  og_book_process_form($form);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function og_book_form_node_form_alter(&$form, &$form_state, $form_id) {
  og_book_process_form($form);
}

function og_book_process_form(&$form) {
  if (user_access('bypass node access') || user_access('bypass og book control')) {
    return;
  }
  $user_groups = og_get_groups_by_user();
  if (isset($form['book']['bid'])) {
    foreach ($form['book']['bid']['#options'] as $bid => $title) {
      $node_groups = og_get_entity_groups('node', $bid);
      if (!(array_intersect($user_groups, $node_groups)) && $bid != 0 && !(in_array($bid, $user_groups['node']))) {
        unset($form['book']['bid']['#options'][$bid]);
      }
    }
  }
  if (isset($form['book']['plid'])) {
    foreach ($form['book']['plid'] as $bid => $title) {
      $node_groups = og_get_entity_groups('node', $bid);
      if (!(array_intersect($user_groups, $node_groups)) && $bid != 0 && !(in_array($bid, $user_groups['node']))) {
        unset($form['book']['bid']['#options'][$bid]);
      }
    }
  }
}

/**
 * Implements hook_block_info().
 */
function og_book_block_info() {
  $block = array();
  $block['navigation_og']['info'] = t('Book navigation per group');
  $block['navigation_og']['cache'] = DRUPAL_CACHE_PER_PAGE | DRUPAL_CACHE_PER_ROLE;

  return $block;
}

/**
 * Implements hook_block_view().
 *
 * Displays the book table of contents in a block when the current page is a
 * single-node view of a book node, limited to books within the current group.
 */
function og_book_block_view($delta = '') {
  $block = array();
  $current_bid = 0;
  if ($node = menu_get_object()) {
    $current_bid = empty($node->book['bid']) ? 0 : $node->book['bid'];
  }

  $groups = og_get_entity_groups('node', $node);
  if (empty($groups['node'])) {
    return $block;
  }

  $group_ids = array_values($groups['node']);

  $block['subject'] = t('Book navigation');
  $book_menus = array();
  $pseudo_tree = array(0 => array('below' => FALSE));
  foreach (og_book_get_books($group_ids) as $book_id => $book) {
    if ($book['bid'] == $current_bid) {
      // If the current page is a node associated with a book, the menu
      // needs to be retrieved.
      $book_menus[$book_id] = menu_tree_output(menu_tree_all_data($node->book['menu_name'], $node->book));
    }
    else {
      // Since we know we will only display a link to the top node, there
      // is no reason to run an additional menu tree query for each book.
      $book['in_active_trail'] = FALSE;
      // Check whether user can access the book link.
      $book_node = node_load($book['nid']);
      $book['access'] = node_access('view', $book_node);
      $pseudo_tree[0]['link'] = $book;
      $book_menus[$book_id] = menu_tree_output($pseudo_tree);
    }
  }
  $book_menus['#theme'] = 'book_all_books_block';
  $block['content'] = $book_menus;

  return $block;
}

/**
 * Returns an array of all books belonging to certain groups.
 *
 * This is mostly a copy of book_get_books().
 *
 * @param array $group_ids
 *   An array of group IDs to filter by.
 *
 * @return array
 *   An array of all books.
 */
function og_book_get_books($group_ids) {
  $all_books = &drupal_static(implode(':', $group_ids) . __FUNCTION__);

  if (!isset($all_books)) {
    $all_books = array();
    $nid_query = db_select('book', 'b')
      ->fields('b', array('bid'))
      ->distinct()
      ->condition('og.gid', $group_ids, 'IN');
    $nid_query->join('og_membership', 'og', 'b.nid = og.etid');
    $nids = $nid_query->execute()->fetchCol();

    if ($nids) {
      $query = db_select('book', 'b', array('fetch' => PDO::FETCH_ASSOC));
      $query->join('node', 'n', 'b.nid = n.nid');
      $query->join('menu_links', 'ml', 'b.mlid = ml.mlid');
      $query->addField('n', 'type', 'type');
      $query->addField('n', 'title', 'title');
      $query->fields('b');
      $query->fields('ml');
      $query->condition('n.nid', $nids, 'IN');
      $query->condition('n.status', 1);
      $query->orderBy('ml.weight');
      $query->orderBy('ml.link_title');
      $query->addTag('node_access');
      $result2 = $query->execute();
      foreach ($result2 as $link) {
        $link['href'] = $link['link_path'];
        $link['options'] = unserialize($link['options']);
        $all_books[$link['bid']] = $link;
      }
    }
  }

  return $all_books;
}
