<?php

/**
 * @file
 * Allows to create custom block types.
 */

/**
 * Implements hook_block_api_info().
 */
function block_api_type_block_api_info() {
  $types = block_api_type_load_multiple(FALSE);
  foreach ($types as $name => $info) {
    $types[$name] = (array) $info;
  }
  return $types;
}

/**
 * Implements hook_entity_info().
 */
function block_api_type_entity_info() {
  $types['block_api_type'] = array(
    'label' => t('Block type'),
    'entity class' => 'Entity',
    'controller class' => 'EntityAPIController',
    'base table' => 'block_api_type',
    'entity keys' => array(
      'id' => 'type',
      'name' => 'type',
      'label' => 'title',
    ),
    // @todo 'bundle of' is soon going to be removed; the bundle entity type is
    //   referenced from the entity type instead.
    // @see http://drupal.org/node/977380
    'bundle of' => 'block_api',
    'admin ui' => array(
      'path' => 'admin/structure/block/types',
    ),
  );
  return $types;
}

/**
 * Implements hook_entity_info_alter().
 */
function block_api_type_entity_info_alter(&$types) {
  $types['block_api']['fieldable'] = TRUE;

  foreach (block_api_type_load_multiple(FALSE) as $name => $type) {
    $entity_info['block_api']['bundles'][$name] = array(
      'label' => $type->title,
      'admin' => array(
        'path' => 'admin/structure/block/types/manage/%block_api_type',
        'real path' => 'admin/structure/block/types/manage/' . $name,
        'bundle argument' => 5,
        'access arguments' => array('administer blocks'),
      ),
    );
  }
}

/**
 * Loads a block type from the database.
 *
 * @param $name
 *   The block type name to load.
 */
function block_api_type_load($name) {
  $types = block_api_type_load_multiple(array($name));
  return isset($types[$name]) ? $types[$name] : FALSE;
}

/**
 * Loads multiple block types from the database.
 *
 * @param $names
 *   A list of block type names to load.
 * @param $conditions
 *   An associative array of conditions on the base table, where the keys are
 *   the database fields and the values are the values those fields must have.
 * @param $reset
 *   Whether to reset the internal static cache.
 *
 * @return
 *   An array of loaded block types, keyed by type name.
 */
function block_api_type_load_multiple($names = array(), array $conditions = array(), $reset = FALSE) {
  return entity_load('block_api_type', $names, $conditions, $reset);
}

/**
 * Saves a block type to the database.
 *
 * @param $type
 *   The block type object to save.
 */
function block_api_type_save($type) {
  module_invoke_all('block_api_type_presave', $type);

  $status = db_merge('block_api_type')
    ->fields(array(
      'title' => $type->title,
      'description' => $type->description,
    ))
    ->key(array(
      'type' => $type->type,
    ))
    ->execute();

  if ($status == SAVED_NEW) {
    module_invoke_all('block_api_type_insert', $type);
  }
  else {
    module_invoke_all('block_api_type_update', $type);
  }

  return $status;
}

/**
 * Form constructor to add or edit a block type.
 */
function block_api_type_form($form, &$form_state, $type) {
  if (!$type) {
    $type = (object) array(
      'type' => NULL,
      'title' => NULL,
      'description' => NULL,
    );
  }

  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#required' => TRUE,
    '#default_value' => $type->title,
  );
  $form['type'] = array(
    '#type' => 'machine_name',
    '#maxlength' => 128,
    '#required' => TRUE,
    '#machine_name' => array(
      'source' => array('title'),
      'exists' => 'block_api_type_load',
    ),
    '#default_value' => $type->type,
    '#disabled' => !empty($type->type),
  );
  $form['description'] = array(
    '#type' => 'textfield',
    '#title' => t('Description'),
    '#default_value' => $type->description,
  );

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Add block type'),
  );
  return $form;
}

/**
 * Form submission handler for block_api_type_form().
 */
function block_api_type_form_submit($form, &$form_state) {
  form_state_values_clean($form_state);
  $type = (object) $form_state['values'];

  block_api_type_save($type);
}

