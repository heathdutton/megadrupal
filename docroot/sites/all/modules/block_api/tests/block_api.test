<?php

/**
 * @file
 * Tests for Block API module.
 */

class BlockApiTestCase extends DrupalWebTestCase {
  function setUp() {
    $modules = func_get_args();
    $modules = (isset($modules[0]) ? $modules[0] : array());

    $modules[] = 'block_api';
    parent::setUp($modules);
  }
}

/**
 * Tests basic block administration.
 */
class BlockApiAdministrationWebTestCase extends BlockApiTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Administration',
      'description' => 'Tests basic block administration.',
      'group' => 'Block API',
    );
  }

  function setUp() {
    parent::setUp(array('block_api_test'));

    $this->admin_user = $this->drupalCreateUser(array(
      'administer blocks',
    ));
    $this->drupalLogin($this->admin_user);
  }

  /**
   * Tests basic creation/editing/viewing/deleting of a block type instance.
   */
  function testAdministration() {
    $this->drupalGet('admin/structure/block');
    // Verify that there is a link to create a block type instance.
    $this->clickLink(t('Add module block'));
    $this->assertUrl('admin/structure/block/add-module-block');
    $this->assertFieldByName('admin_title');

    // Create a new block type instance.
    $edit = array(
      'admin_title' => $this->randomString(),
      'delta' => drupal_strtolower($this->randomName()),
      'type' => 'html',
    );
    $this->drupalPost(NULL, $edit, t('Add block'));
    // Verify that we were redirected to the block configuration form.
    $this->assertUrl('admin/structure/block/manage/block_api/' . $edit['delta']);
    $this->assertFieldByName('info', $edit['admin_title']);

    // Configure the block type instance.
    $instance = (object) $edit;
    $theme = variable_get('theme_default', 'bartik');
    // Purposively use randomString() to test that strings are properly escaped
    // on output.
    $edit = array(
      'info' => $this->randomString(),
      'title' => $this->randomString(),
      'settings[body][value]' => $this->randomString(),
      'settings[body][format]' => 'filtered_html',
      "regions[$theme]" => 'sidebar_first',
    );
    $this->drupalPost(NULL, $edit, t('Save block'));
    // Verify that the block configuration has been saved.
    $instance->admin_title = $edit['info'];
    $this->assertUrl('admin/structure/block');
    $this->assertRaw(check_plain($instance->admin_title), t('Administrative block description found.'));
    $this->drupalGet('');
    $this->assertRaw(check_plain($edit['title']), t('Block title found.'));
    $this->assertRaw(check_markup($edit['settings[body][value]'], $edit['settings[body][format]']), t('Block body found.'));

    // Delete the block type instance.
    $this->drupalGet('admin/structure/block');
    $this->assertLinkByHref('admin/structure/block/delete-module-block/block_api/' . $instance->delta);
    $this->drupalGet('admin/structure/block/delete-module-block/block_api/' . $instance->delta);
    $this->assertRaw(drupal_placeholder($instance->admin_title), t('Administrative block description found.'));
    $this->drupalPost(NULL, array(), t('Delete'));
    // Verify that the block type instance has been deleted.
    $this->assertUrl('admin/structure/block');
    // Deleting a block outputs a message confirming the block deletion, which
    // contains the administrative title, so reload the page.
    $this->drupalGet('admin/structure/block');
    $this->assertNoRaw(check_plain($instance->admin_title), t('Administrative block description not found.'));
    $this->drupalGet('');
    $this->assertNoRaw(check_plain($edit['title']), t('Block title not found.'));
  }
}

/**
 * Tests module system integration.
 */
class BlockApiModuleWebTestCase extends BlockApiTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Module system integration',
      'description' => 'Tests module system integration.',
      'group' => 'Block API',
    );
  }

  function setUp() {
    parent::setUp(array('block_api_test'));

    $this->admin_user = $this->drupalCreateUser(array(
      'administer blocks',
    ));
    $this->drupalLogin($this->admin_user);
  }

  /**
   * Tests behavior of block instances when block type modules are disabled.
   */
  function testBlockTypeDisabled() {
    $this->drupalGet('admin/structure/block/add-module-block');

    // Create a new block type instance.
    $edit = array(
      'admin_title' => $this->randomString(),
      'delta' => drupal_strtolower($this->randomName()),
      'type' => 'html',
    );
    $this->drupalPost(NULL, $edit, t('Add block'));
    $this->assertText(t('Block body'));

    $instance = (object) $edit;
    $theme = variable_get('theme_default', 'bartik');
    // Use randomName() to simplify assertions below, as check_markup() should
    // not filter or escape any characters of the string.
    $body = $this->randomName();
    $edit = array(
      'title' => $this->randomName(),
      'settings[body][value]' => $body,
      "regions[$theme]" => 'sidebar_first',
    );
    $this->drupalPost(NULL, $edit, t('Save block'));

    // Verify that the block is shown.
    $this->drupalGet('');
    $this->assertText($body, t('Block found.'));

    // block_api_test module cannot be disabled through the UI, since it is
    // hidden, so disable it programmatically.
    module_disable(array('block_api_test'));
    system_list_reset();

    // Verify that the block is no longer shown.
    $this->drupalGet('');
    $this->assertNoText($body, t('Block of disabled block type module not found.'));

    // Verify that the block type module's settings form elements are not
    // output, but we can save the block.
    $this->drupalGet('admin/structure/block/manage/block_api/' . $instance->delta);
    $this->assertNoText(t('Block body'), t('Block type module settings not found.'));
    $this->drupalPost(NULL, array(), t('Save block'));

    // Re-enable block_api_test module.
    module_enable(array('block_api_test'));
    system_list_reset();

    // Verify that the block still contains the last saved settings.
    $this->drupalGet('');
    $this->assertText($body, t('Block found.'));
  }
}

