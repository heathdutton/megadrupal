<?php

/**
 * @file
 * Allows to create block instances of predefined block types.
 */

/**
 * @todo 
 */
define('BLOCK_API_STORAGE_DATABASE', 0);

/**
 * @todo 
 */
define('BLOCK_API_STORAGE_OWN', 1);

/**
 * Retrieves registered block types.
 *
 * @return
 *   An associative array of blocks registered by modules.
 */
function block_api_get_info() {
  $types = &drupal_static(__FUNCTION__);

  if (!isset($types)) {
    $types = array();
    foreach (module_implements('block_api_info') as $module) {
      $module_types = module_invoke($module, 'block_api_info');
      foreach ($module_types as $type => $info) {
        // Ensure default block type info properties.
        $info += array(
          'title' => $type,
          'description' => NULL,
          'module' => $module,
          'type' => $type,
          'storage' => BLOCK_API_STORAGE_DATABASE,
          'settings' => array(),
        );
        // @todo Block types of one module are potentially overwriting block
        //   types of another module. Namespace info in $types somehow.
        $types[$type] = $info;
      }
    }
  }

  return $types;
}

/**
 * Implements hook_block_info().
 */
function block_api_block_info() {
  $block_info = block_api_get_info();
  $blocks = array();
  foreach (block_api_load_multiple(FALSE) as $instance) {
    // If a block type module is disabled, no type information exists.
    if (!isset($block_info[$instance->type])) {
      $block_info[$instance->type]['title'] = $instance->type;
    }

    $blocks[$instance->delta]['info'] = t('!type: !title', array(
      '!type' => $block_info[$instance->type]['title'],
      '!title' => $instance->admin_title,
    ));
    // Add any other Block module properties defined by the block type, but
    // exclude all Block API properties.
    $blocks[$instance->delta] += array_diff_key($block_info[$instance->type], array(
      'title',
      'description',
      'module',
      'type',
      'storage',
      'settings',
    ));
  }
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function block_api_block_view($delta) {
  $instance = block_api_load($delta);
  return module_invoke($instance->module, "block_api_{$instance->type}_view", $instance);
}

/**
 * Implements hook_block_configure().
 */
function block_api_block_configure($delta) {
  $instance = block_api_load($delta);
  $form['block_api'] = array(
    '#type' => 'value',
    '#value' => $instance,
  );

  // @see block_custom_block_form()
  $form['info'] = array(
    '#type' => 'textfield',
    '#title' => t('Block description'),
    '#default_value' => $instance->admin_title,
    '#maxlength' => 64,
    '#description' => t('A brief description of your block. Used on the <a href="@overview">Blocks administration page</a>.', array('@overview' => url('admin/structure/block'))),
    '#required' => TRUE,
    '#weight' => -19,
  );

  $form['settings'] = array(
    '#tree' => TRUE,
  );
  if ($settings = module_invoke($instance->module, "block_api_{$instance->type}_form", $instance)) {
    $form['settings'] += $settings;
  }

  return $form;
}

/**
 * Implements hook_block_save().
 */
function block_api_block_save($delta, $edit = array()) {
  $instance = $edit['block_api'];
  // In case the block type module is disabled, the block configuration form
  // does not contain any block type settings, so retain the existing.
  if (isset($edit['settings'])) {
    $instance->settings = $edit['settings'];
  }

  // Allow the block type module to perform changes in $instance and $edit
  // before saving.
  module_invoke($instance->module, "block_api_{$instance->type}_save", $instance, $edit);

  if ($instance->storage == BLOCK_API_STORAGE_DATABASE) {
    $instance->admin_title = $edit['info'];
    block_api_save($instance);
  }
}

/**
 * Implements hook_menu().
 */
function block_api_menu() {
  // @todo Find better names for these menu paths and titles.
  $items['admin/structure/block/add-module-block'] = array(
    'title' => 'Add module block',
    'description' => 'Add a new block of a certain type.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('block_api_create_form'),
    'access arguments' => array('administer blocks'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'block_api.admin.inc',
  );
  $items['admin/structure/block/delete-module-block/%/%'] = array(
    'title' => 'Delete module block',
    'access arguments' => array('administer blocks'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('block_api_delete_form', 4, 5),
    'type' => MENU_CALLBACK,
    'file' => 'block_api.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_entity_info().
 */
function block_api_entity_info() {
  $types['block_api'] = array(
    'label' => t('Block'),
    'controller class' => 'BlockApiController',
    'base table' => 'block_api',
    'entity keys' => array(
      'id' => 'delta',
      'bundle' => 'type',
      'label' => 'admin_title',
    ),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    // @todo Invoke block_api_get_info() and register block types as bundles.
    'bundles' => array(),
  );
  return $types;
}

/**
 * Controller class for block instances.
 *
 * This extends the DrupalDefaultEntityController class, adding required
 * special handling for block instances.
 */
class BlockApiController extends DrupalDefaultEntityController {

  function attachLoad(&$queried_entities, $revision_id = FALSE) {
    foreach ($queried_entities as $delta => $instance) {
      $queried_entities[$delta]->settings = unserialize($instance->settings);
    }

    // Call the default attachLoad() method to add fields and invoke
    // hook_ENTITY_load().
    parent::attachLoad($queried_entities, $revision_id);
  }
}

/**
 * Loads multiple block instances from the database.
 *
 * @param $delta
 *   The block instance delta to load.
 */
function block_api_load($delta) {
  $blocks = block_api_load_multiple(array($delta));
  return isset($blocks[$delta]) ? $blocks[$delta] : FALSE;
}

/**
 * Loads multiple block instances from the database.
 *
 * @param $deltas
 *   A list of block instance deltas to load.
 * @param $conditions
 *   An associative array of conditions on the base table, where the keys are
 *   the database fields and the values are the values those fields must have.
 * @param $reset
 *   Whether to reset the internal static cache.
 *
 * @return
 *   An array of loaded block instances, keyed by delta.
 */
function block_api_load_multiple($deltas = array(), array $conditions = array(), $reset = FALSE) {
  return entity_load('block_api', $deltas, $conditions, $reset);
}

/**
 * Saves a block instance to the database.
 *
 * @param $instance
 *   The block instance object to save.
 */
function block_api_save($instance) {
  module_invoke_all('block_api_presave', $instance);

  $status = db_merge('block_api')
    ->fields(array(
      'module' => $instance->module,
      'type' => $instance->type,
      'admin_title' => $instance->admin_title,
      'storage' => $instance->storage,
      'settings' => serialize($instance->settings),
    ))
    ->key(array(
      'delta' => $instance->delta,
    ))
    ->execute();

  if ($status == SAVED_NEW) {
    module_invoke_all('block_api_insert', $instance);
  }
  else {
    module_invoke_all('block_api_update', $instance);
  }

  return $status;
}

/**
 * Deletes a block instance.
 *
 * @param $delta
 *   The machine name of the block instance to delete.
 */
function block_api_delete($delta) {
  block_api_delete_multiple(array($delta));
}

/**
 * Deletes multiple block instances.
 *
 * @param $deltas
 *   A list of machine names of block instances to delete.
 */
function block_api_delete_multiple(array $deltas) {
  $instances = block_api_load_multiple($deltas);
  foreach ($instances as $delta => $instance) {
    // Remove the configuration settings
    db_delete('block_api')
      ->condition('delta', $instance->delta)
      ->execute();

    // Allow modules to react on block deletion.
    module_invoke_all('block_api_delete', $instance);

    // @see block_custom_block_delete_submit()
    db_delete('block')
      ->condition('module', 'block_api')
      ->condition('delta', $instance->delta)
      ->execute();
    db_delete('block_role')
      ->condition('module', 'block_api')
      ->condition('delta', $instance->delta)
      ->execute();

    // @see node_form_block_custom_block_delete_submit()
    db_delete('block_node_type')
      ->condition('module', 'block_api')
      ->condition('delta', $instance->delta)
      ->execute();
  }
}

/**
 * Alters the blocks page to show a delete link to delete blocks
 */
function block_api_form_block_admin_display_form_alter(&$form, $form_state) {
  $blocks = block_api_load_multiple(FALSE);
  foreach ($blocks as $delta => $block) {
    // block_admin_display_form() uses MODULE_DELTA as form array keys.
    $form['blocks']['block_api_' . $delta]['delete'] = array(
      '#type' => 'link',
      '#title' => t('delete'),
      '#href' => 'admin/structure/block/delete-module-block/block_api/' . $delta,
    );
  }
}

/**
 * Implements hook_modules_uninstalled().
 */
function block_api_modules_uninstalled($modules) {
  $deltas = db_query('SELECT delta FROM {block_api} WHERE module IN (:modules)', array(':modules' => $modules))->fetchCol();
  if ($deltas) {
    block_api_delete_multiple($deltas);
  }
}
