<?php

/**
 * @file
 * Hook implementations and core functionality.
 */

define('AZURE_AUTH_TOKEN_TYPE', 'http://schemas.xmlsoap.org/ws/2009/11/swt-token-profile-1.0');
define('AZURE_AUTH_IDENTITY_PROVIDER_SCHEMA', 'http://schemas.microsoft.com/accesscontrolservice/2010/07/claims/identityprovider');
define('AZURE_AUTH_NAME_IDENTIFIER_SCHEMA', 'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier');
define('AZURE_AUTH_IDENTITY_PROVIDER_WINDOWS_LIVE', 'uri:WindowsLiveID');
define('AZURE_AUTH_IDENTITY_PROVIDER_GOOGLE', 'Google');
define('AZURE_AUTH_IDENTITY_PROVIDER_GOOGLE_EMAIL_SCHEMA', 'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress');
define('AZURE_AUTH_IDENTITY_PROVIDER_GOOGLE_NAME_SCHEMA', 'http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name');


/**
 * Hook implementations
 */

/**
 * Implements hook_menu().
 */
function azure_auth_menu() {
  $items = array();
  $items['azure-auth/login/nojs'] = array(
    'title' => 'Windows Azure Authentication',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('azure_auth_login_form'),
    'access arguments' => array('access content'),
    'file' => 'azure_auth.pages.inc',
    '#type' => MENU_CALLBACK,
  );
  $items['azure-auth/login/ajax'] = array(
    'title' => 'Windows Azure Authentication',
    'page callback' => 'azure_auth_login',
    'delivery callback' => 'ajax_deliver',
    'access arguments' => array('access content'),
    'file' => 'azure_auth.pages.inc',
    '#type' => MENU_CALLBACK,
  );
  $items['azure-auth/authenticate'] = array(
    'title' => 'Windows Azure Authentication',
    'page callback' => 'azure_auth_authenticate',
    'page arguments' => array(FALSE),
    'access arguments' => array('access content'),
    'file' => 'azure_auth.pages.inc',
    '#type' => MENU_CALLBACK,
  );
  $items['azure-auth/authenticate/error'] = array(
    'title' => 'Windows Azure Authentication',
    'page callback' => 'azure_auth_authenticate',
    'page arguments' => array(TRUE),
    'access arguments' => array('access content'),
    'file' => 'azure_auth.pages.inc',
    '#type' => MENU_CALLBACK,
  );
  $items['admin/config/people/azure-auth'] = array(
    'title' => 'Windows Azure Settings',
    'description' => 'Manage options for Federated login using Windows Azure.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('azure_auth_settings'),
    'access arguments' => array('administer azure auth'),
    'file' => 'azure_auth.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function azure_auth_permission() {
  return array(
    'administer azure auth' => array(
      'title' => t('Administer Windows Azure Authentication'),
      'description' => t('Change settings for the Windows Azure Authentication module.'),
    ),
  );
}

/**
 * Implements hook_help().
 */
function azure_auth_help($path, $arg) {
  $output = '';
  switch ($path) {
    case 'admin/help#azure_auth':
      $output .= '<h3>' . t("Introduction.") . '</h3>';
      $output .= '<p>' . t("The Windows Azure Authentication module allows users to log in to your drupal site using Windows Azure's federated login system. Currently, only Windows Live       and Google are supported as identity providers. Additionally, only Simple Web Tokens are supported. SAML 2.0 support is planned. See the README.txt file included with this module for instructions on configuring your Windows Azure account.") . '</p>';
      break;
  }
  return $output;
}

/**
 * Implements hook_user_insert().
 */
function azure_auth_user_insert(&$edit, $account, $category) {
  if (!variable_get('azure_auth_settings_valid')) {
    return;
  }
  if (isset($edit['azure_auth'])) {
    user_set_authmaps($account, array(
      'authname_azure_auth' => $edit['azure_auth']->getNameIdentifier(),
    ));
    unset($_SESSION['azure_auth']);
    unset($edit['azure_auth']);
  }
}

/**
 * Implements hook_block_info().
 */
function azure_auth_block_info() {
  $blocks = array();
  if (variable_get('azure_auth_provide_block')) {
    $blocks['azure_auth'] = array(
      'info' => t('User login (Windows Azure)'),
    );
  }
  return $blocks;
}


/**
 * Implements hook_block_view().
 */
function azure_auth_block_view($delta = '') {
  global $user;
  $block = array();
  switch ($delta) {
    case 'azure_auth':
      if ($user->uid === 0) {
        require_once 'azure_auth.pages.inc';
        $block['subject'] = t('Log In with Windows Azure');
        $wrap = FALSE;
        $block['content'] = drupal_get_form('azure_auth_login_form', $wrap);
      }
      break;
  }
  return $block;
}

/**
 * Form Alter Functions
 */

/**
 * Implements hook_form_FORMID_alter().
 */
function azure_auth_form_user_login_alter(&$form, &$form_state) {
  _azure_auth_form_user_login_alter($form, $form_state);
}

/**
 * Implements hook_form_FORMID_alter().
 */
function azure_auth_form_user_login_block_alter(&$form, &$form_state) {
  _azure_auth_form_user_login_alter($form, $form_state);
}

/**
 * Adds AJAX link to bottom of user login forms.
 */
function _azure_auth_form_user_login_alter(&$form, &$form_state) {
  if (!variable_get('azure_auth_settings_valid')) {
    return;
  }
  if (!variable_get('azure_auth_alter_login_form')) {
    return;
  }
  drupal_add_library('system', 'drupal.ajax');
  $link = l(variable_get('azure_auth_link_text', t('Sign in using Windows Azure')), 'azure-auth/login/nojs', array('attributes' => array('class' => array('use-ajax'))));
  $form['azure_auth'] = array(
    '#type' => 'markup',
    '#markup' => '<div id="azure_auth_container" class="identity-provider-selection">' . $link . '</div>',
  );
}

/**
 * Implements hook_form_FORMID_alter().
 */
function azure_auth_form_user_register_form_alter(&$form, &$form_state) {
  if (!variable_get('azure_auth_settings_valid')) {
    return;
  }
  if (isset($_SESSION['azure_auth'])) {
    $token = $_SESSION['azure_auth'];
    $form['azure_auth'] = array(
      '#type' => 'value',
      '#default_value' => $token,
    );
    $form['azure_auth_message'] = array(
      '#type' => 'markup',
      '#weight' => -10,
      '#markup' => t("You're registering an account on this site using your identity from !provider.", array('!provider' => $token->getProviderName())),
    );

    if ($name = $token->getClaim(AZURE_AUTH_IDENTITY_PROVIDER_GOOGLE_NAME_SCHEMA)) {
      $form['account']['name']['#default_value'] = $name;
    }
    if ($mail = $token->getClaim(AZURE_AUTH_IDENTITY_PROVIDER_GOOGLE_EMAIL_SCHEMA)) {
      $form['account']['mail']['#default_value'] = $mail;
    }
  }
}

/**
 * Utility functions
 */

/**
 * Returns a list of identity providers.
 *
 * Calls Windows Azure identity provider web service, returning a list of
 * identity providers.
 */
function _azure_auth_get_identity_providers($namespace = NULL, $realm = NULL) {
  if (!$namespace) {
    $namespace = variable_get('azure_auth_namespace');
  }
  if (!$realm) {
    $realm = variable_get('azure_auth_realm');
  }
  $response = drupal_http_request(_azure_auth_get_identity_providers_url($namespace, $realm), array(
    'headers' => array('Content-Type' => 'application/x-www-form-urlencoded; charset=utf-8'),
  ));
  if (isset($response->error)) {
    $message = t('Unable to obtain list of identity providers. Error code: !code.', array('!code' => $response->code));
    watchdog('azure_auth', $message, WATCHDOG_ERROR);
    drupal_set_message($message, 'error');
    return FALSE;
  }
  $identity_providers = drupal_json_decode($response->data);
  if (!$identity_providers || !count($identity_providers)) {
    $message = t('Unable to obtain list of identity providers.');
    watchdog('azure_auth', $message, array(), WATCHDOG_ERROR);
    drupal_set_message($message, 'error');
    return FALSE;
  }
  return $identity_providers;
}

/**
 * Returns the identity provider URL.
 */
function _azure_auth_get_identity_providers_url($namespace, $realm) {
  return 'https://' . $namespace . '.accesscontrol.windows.net:443/v2/metadata/IdentityProviders.js?protocol=wsfederation&realm=' . urlencode($realm) . '&reply_to=' . urlencode(url('azure-auth/authenticate', array('absolute' => TRUE))) . '&context=&request_id=&version=1.0';
}

/**
 * Fetches the user id from the database based on the authname.
 */
function _azure_auth_get_authmap($identifier) {
  $query = db_select('authmap', 'a');
  $query->addField('a', 'uid');
  $query->condition('module', 'azure_auth');
  $query->condition('authname', $identifier);
  if ($result = $query->execute()) {
    return $result->fetchField();
  }
  return FALSE;
}
