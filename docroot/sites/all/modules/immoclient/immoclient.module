<?php

/**
 * Implements hook_node_info()
 */
function immoclient_node_info() {
    return array(
        'immoclient' => array(
            'name' => t('Immo Client'),
            'base' => 'immoclient',
            'description' => t('You can define your objects here'),
            'has_title' => TRUE,
            'title_label' => t('Object title')
         )
    );
}

/**
 * Implements hook_form()
 */
function immoclient_form($node, $form_state) {
    return node_content_form($node, $form_state);
}

/**
 * Implements hook_menu().
 */
function immoclient_menu() {
  $items = array();
  
  $items['admin/config/content/immoclient/refnumb'] = array(
    'title' => 'Immoclient',
    'description' => 'Configure reference numbers',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('immoclient_admin_form'),
    'access arguments' => array('access administration pages'),
    'position' => 'left',
    'weight' => -15,
    'file' => 'includes/immoclient.admin.inc',
  );
  return $items;
}

/*
 * entity label customizing for inline_entity_form
 */
  
function immoclient_inline_entity_form_table_fields_alter(&$fields, $context) {
  //Determine the bundle and entity type from $context

  if($context['entity_type'] == 'immoclient_floordescription'){
  unset($fields['id']); //<get rid of the id field

  //add any fields you need to the $fields array
  $fields['geschoss'] = array(
    'type' => 'property',
    'label' => t('Floor'),
    'weight' => 1,
    'formatter callback' => 'immoclient_immo_floordescription_show_properties',
    'formatter arguments'=> TRUE,
  );
  }
}


// callback to customize the output of ief
function immoclient_immo_floordescription_show_properties($arguments){
  $floor = immoclient_floordescription_geschoss_select($arguments);
  return $floor;
}



/*
 * Implements hook_validate
 */
function immoclient_validate($node,$form,&$form_state){
  if($node->type == 'immoclient'){
    // objectnr_intern and objectnr_extern have to be unique!
    $items_int = field_get_items('node', $node, 'field_objektnr_intern'); 
    $value_int = $items_int[0];
    $query_int = new EntityFieldQuery;
    $query_int->entityCondition('entity_type', 'node')
      ->fieldCondition('field_objektnr_intern', 'value', $value_int)
      ->count();
    $count_int = $query_int->execute();
    //is a new node created
    if($node->nid == NULL){
      if ($count_int > 0) {
        form_set_error('field_objektnr_intern', t('Unique "object number intern" is already used.'));
      }
    }
    //is a node updated
    else{
      if ($count_int > 1) {
        form_set_error('field_objektnr_intern', t('Unique "object number intern" is already used.'));
      }
    }
    $items_ext = field_get_items('node', $node, 'field_objektnr_extern'); 
    $value_ext = $items_ext[0];
    $query_ext = new EntityFieldQuery;
    $query_ext->entityCondition('entity_type', 'node')
      ->fieldCondition('field_objektnr_extern', 'value', $value_ext)
      ->count();
    $count_ext = $query_ext->execute();
    //is a new node created
    if($node->nid == NULL){
      if ($count_ext > 0) {
        form_set_error('field_objektnr_extern', t('Unique "object number extern" is already used.'));
      }
    }
    //is a node updated
    else{
      if ($count_ext > 1) {
        form_set_error('field_objektnr_extern', t('Unique "object number extern" is already used.'));
      }
    }
  }
}

/*
 * Implements hook_form_FORMID_alter
 */
function immoclient_form_immoclient_node_form_alter(&$form,&$form_state,$form_id){
  
  //variable token from admin/config/content/immoclient
  $ref_status = variable_get('obj_ref_man', FALSE);
  if($ref_status == 'FALSE'){
    $form['field_objektnr_extern']['#access'] = FALSE;
    $form['field_objektnr_intern']['#access'] = FALSE;
  }
  //build a fieldset around parking
  $form['field_parking']['#type'] = 'fieldset';
  $form['field_parking']['#group'] = 'field_flaechenangaben][und][form][area';
  $form['field_parking']['#title'] = t('Parking Place');
  $form['field_parking']['#weight'] = 7;
  $form['field_parking']['#description'] = t('GARAGE, NUMBERS, PRICE');

  foreach($form as $key => $value){
    $field = strpos($key, 'field_');
    //  only for fields!
    if($field !== false){
      if(isset($form[$key]['und']['#description'])){
        //seems so that every field has a description, to use it for items too
        //build variables
        $res = $form[$key]['und'];
        $desc_t = t($form[$key]['und']['#description']);
        $form[$key]['und']['#description'] = $desc_t;
      }
    }
  }
}

/**
 * Implements hook_preprocess_field().
 * The field labels & values shall be translated
 */
function immoclient_preprocess_field(&$vars) {
  if ($node = menu_get_object()){
    if($node->type == 'immoclient'){
      // Check to be sure there's a label and it's visible.
      if(isset($vars['label']) && $vars['label_hidden'] === FALSE){
        $vars['label'] = t($vars['label']);
      }
      $field_name = $vars['element']['#field_name'];
      $trans_fields = immoclient_trans_fields();
      if(in_array($field_name, $trans_fields)){
        $items = $vars['items'];
        $result = count($items);
        for($i = 0;$i < $result; $i++){
          $vars['items'][$i]['#markup'] = t($vars['items'][$i]['#markup']) ;
        }
      }
    }
  }
}

function immoclient_trans_fields(){
  $trans_fields = array(
    "field_wbs_sozialwohnung",
    "field_nichtraucher",
    "field_nutzungsart",
    "field_gewerbliche_nutzung",
    "field_vermarktungsart",
    "field_vermietet",
    "field_haustiere",
    "field_geschlecht",
    "field_denkmalgeschuetzt",
    "field_als_ferien",
    "field_hochhaus",
    "field_haustyp",
    "field_wohnungtyp",
    "field_wbs_sozialwohnung",
    "field_handel_typ",
    "field_gastgew_typ",
    "field_hallen_typ",
    "field_land_typ",
    "field_freizeit_typ",
    "field_zins_typ",
    "field_buero_typ",
    "field_sonstige_typ",
    "field_parken_typ",
    "field_dachform",
    "field_zustand_art",
    "field_gebiete",
    "field_bauweise",
    "field_ausbaustufe",
    "field_energietyp",
    "field_fenster",
    "field_alter_attr",
    "field_lage_im_bau",
    "field_umf_erschl_attr",
    "field_erschl_attr",
    "field_stand",
    "field_zulieferung",
    "field_blick",
    "field_zwangsversteigerung",
    "field_hoechstgebot_zeigen"
  );
  return $trans_fields;
}

drupal_add_css(drupal_get_path('module', 'immoclient') . '/css/immoclient_front.css', 
    array('group' => CSS_DEFAULT, 'every_page' => TRUE));

/*
 * translate the form
 * Implements hook_field_widget_form_alter()
 */
function immoclient_field_widget_form_alter(&$element, &$form_state, $context){
  if(isset($element['#title'])){
    $element['#title'] = t($element['#title']);
  }
  if(isset($element['value']['#title'])){
    $element['value']['#title'] = t($element['value']['#title']);
  }

  if(isset($element['#description'])){
    $element['#description'] = t($element['#description']);
  }
  if(isset($element['value']['#description'])){
    $element['value']['#description'] = t($element['value']['#description']);
  }
  if(isset($element['#options'])){
    foreach($element['#options'] as $key => $value){
      $element['#options'][$key] = t($value);
    }
  }
}

/**
 * Implements hook_page_alter().
 */
function immoclient_page_alter(&$page) {
  // Hide Toolbar for those who can access the Admin Menu.
  if (user_access('access administration menu') && !empty($page['page_top']['toolbar'])) {
    $page['page_top']['toolbar']['#access'] = FALSE;
  }
}

/**
 * Hide immoclient from normal guests
 * Implements hook_node_access
 */
function immoclient_node_access($node, $op, $account) {

  $type = is_string($node) ? $node : $node->type;

  if ($type == 'immoclient') {
    // Require administer nodes permission to view
    if (($op == 'view') && (!user_access('view price', $account))) {
      return NODE_ACCESS_DENY;
    }
  }
}

/**
 * Implements hook_help
 */
function immoclient_help($path, $arg) {
  switch ($path) {
    case 'admin/help#immoclient':
      return t("Immoclient is a module to easily create nodes that comply with "
              . "the standards of openimmo, a German standard to create and transfer"
              . " real estate objects. <br> The description of installation and "
              . "configuration is described in the README.txt file.<br><br>"
              . "You have to use views to show your guests the appropriate results");
  }
}

/**
 * Implements hook_node_insert
 */
function immoclient_node_insert($node){
  
  $nid = $node->nid;
  if(!isset($node->field_objektnr_extern[LANGUAGE_NONE][0]) &&
            $node->type == 'immoclient'){
    //extern
    $pref_ext = variable_get('prefix_obj_ref_ext',0);
    $nex = $pref_ext.$nid;   
    $node->field_objektnr_extern[LANGUAGE_NONE][0]['value'] = $nex;
    
    //intern
    $pref_int = variable_get('prefix_obj_ref_int',0);
    $nin = $pref_int.$nid;   
    $node->field_objektnr_intern[LANGUAGE_NONE][0]['value'] = $nin;
    
    field_attach_update('node', $node);
    immoclient_ref_seller($node, $nex);
  }
}

/*
 * Reference from seller to object
 */
function immoclient_ref_seller($node,$nex){
  
  //we need the value from field_seller to call and manipulate the object
  $fs = field_get_items('node', $node, 'field_seller');
  $fst = $fs[0]['target_id'];
  
  //to set the referenced price entity objekt_ref take the entity
  $immoprice_object = entity_load_single('immoclient_customer',$fst);
  $immoprice_object->objekt_ref = $nex;
  $immoprice_object->save();
}

function immoclient_config_js(){
    $path = drupal_get_path('module', 'immoclient');
    drupal_add_js("$path/js/immoclient_config.js");
}