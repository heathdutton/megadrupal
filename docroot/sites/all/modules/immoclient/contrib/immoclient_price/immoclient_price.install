<?php
//schon kopiert nach clientimmo!
/**
 * Implements hook_schema().
 */
function immoclient_price_schema() {
  
  $schema = array();
   
  $schema['immoclient_price_default'] = array(
    'description' => 'The base table for the Price default',
    'fields' => array(
      'id' => array(
        'description' => 'Primary key of the Price entity',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
     'kaufpreis' => array(
        'description' => 'Price with VAT',
        'type' => 'numeric',
        'size' => 'normal',
        'not null' => TRUE,
        'default' => 0, 
        'precision' => 10, 
        'scale' => 2,
      ),
      'richtpreis' => array(
        'description' => 'Basis for negotiations',
        'type' => 'numeric',
        'size' => 'normal',
        'not null' => TRUE,
        'default' => 0, 
        'precision' => 10, 
        'scale' => 2,
      ),
      'auf_anfrage' => array(
        'description' => 'Auf Anfrage?',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'vb' => array(
        'description' => 'Verhandlungsbasis?',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
        'kaufpreisnetto' => array(
        'description' => 'Commercial Price without VAT',
        'type' => 'numeric',
        'size' => 'normal',
        'not null' => TRUE, 'default' => 0, 
        'precision' => 10, 
        'scale' => 2,
      ),
        'kaufpreisust' => array(
        'description' => 'Commercial Price- VAT',
        'type' => 'numeric',
        'size' => 'normal',
        'not null' => TRUE, 'default' => 0, 
        'precision' => 10, 
        'scale' => 2,
      ),
         'kaufpreisbrutto' => array(
        'description' => 'Commercial Price wit VAT',
        'type' => 'numeric',
        'size' => 'normal',
        'not null' => TRUE, 'default' => 0, 
        'precision' => 10, 
        'scale' => 2,
      ),
       'nettokaltmiete' => array(
        'description' => 'Nettokaltmiete, ohne Betriebskosten',
        'type' => 'numeric',
        'size' => 'normal',
        'not null' => TRUE, 'default' => 0, 
        'precision' => 10, 
        'scale' => 2,
      ),
        'kaltmiete' => array(
        'description' => 'Nettokaltmiete mit Betriebs-/Nebenkosten, ohne Heizkosten',
        'type' => 'numeric',
        'size' => 'normal',
        'not null' => TRUE, 'default' => 0, 
        'precision' => 10, 
        'scale' => 2,
      ),
        'warmmiete' => array(
        'description' => 'Brutto-Warmmiete',
        'type' => 'numeric',
        'size' => 'normal',
        'not null' => TRUE, 'default' => 0, 
        'precision' => 10, 
        'scale' => 2,
      ),
        'nebenkosten' => array(
        'description' => 'monatliche Betriebskosten/Nebenkosten, ohne Heizkosten',
        'type' => 'numeric',
        'size' => 'normal',
        'not null' => TRUE, 'default' => 0, 
        'precision' => 10, 
        'scale' => 2,
      ),
        'heizkosten_enthalten' => array(
        'description' => 'Heizkosten in der Warmmiete enthalten?',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
      ),
        'heizkosten' => array(
        'description' => 'monatliche Heizkosten - Vorauszahlungen',
        'type' => 'numeric',
        'size' => 'normal',
        'not null' => TRUE, 'default' => 0, 
        'precision' => 10, 
        'scale' => 2,
      ),
        'zzg_mehrwertsteuer' => array(
        'description' => 'kommt eine MWST dazu?',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
        'mietzuschlaege' => array(
        'description' => 'weitere Mietzuschläge',
        'type' => 'numeric',
        'size' => 'normal',
        'not null' => TRUE, 
        'default' => 0, 
        'precision' => 10, 
        'scale' => 2,
      ),
        'hauptmietzinsnetto' => array(
        'description' => 'differenziert u.a. in Österreich wegen unterschiedlicher Umst',
        'type' => 'numeric',
        'size' => 'normal',
        'not null' => TRUE, 'default' => 0, 
        'precision' => 10, 
        'scale' => 2,
      ),
        'hauptmietzinsust' => array(
        'description' => 'differenziert u.a. in Österreich wegen unterschiedlicher Umst',
        'type' => 'numeric',
        'size' => 'normal',
        'not null' => TRUE, 'default' => 0, 
        'precision' => 10, 
        'scale' => 2,
      ),
        'pauschalmiete' => array(
        'description' => 'Alles zusammen',
        'type' => 'numeric',
        'size' => 'normal',
        'not null' => TRUE, 'default' => 0, 
        'precision' => 10, 
        'scale' => 2,
      ),
        'betriebskostennetto' => array(
        'description' => 'differenziert u.a. in Österreich wegen unterschiedlicher Umst',
        'type' => 'numeric',
        'size' => 'normal',
        'not null' => TRUE, 'default' => 0, 
        'precision' => 10, 
        'scale' => 2,
      ),
        'betriebskostenust' => array(
        'description' => 'differenziert u.a. in Österreich wegen unterschiedlicher Umst',
        'type' => 'numeric',
        'size' => 'normal',
        'not null' => TRUE, 'default' => 0, 
        'precision' => 10, 
        'scale' => 2,
      ),
        'pacht' => array(
        'description' => '',
        'type' => 'numeric',
        'size' => 'normal',
        'not null' => TRUE, 'default' => 0, 
        'precision' => 10, 
        'scale' => 2,
      ),
        'erbpacht' => array(
        'description' => '',
        'type' => 'numeric',
        'size' => 'normal',
        'not null' => TRUE, 'default' => 0, 
        'precision' => 10, 
        'scale' => 2,
      ),
       'hausgeld' => array(
        'description' => 'Umlage der gemeinschaftlichen Kosten eines Objektes nach WEG (ohne Mehrwertsteuerausweis)',
        'type' => 'numeric',
        'size' => 'normal',
        'not null' => TRUE, 'default' => 0, 
        'precision' => 10, 
        'scale' => 2,
      ),
        'abstand' => array(
        'description' => 'Abstand oder Abschlagszahlungen',
        'type' => 'numeric',
        'size' => 'normal',
        'not null' => TRUE, 'default' => 0, 
        'precision' => 10, 
        'scale' => 2,
      ),
        'preis_zeitraum_von' => array(
        'description' => 'Beginn Ferienzeit',
        'type' => 'int',
        'length' => 11,
        'not null' => FALSE,
      ),
        'preis_zeitraum_bis' => array(
        'description' => 'Ende Ferienzeit',
        'type' => 'int',
        'length' => 11,
        'not null' => FALSE,
      ),
        'preis_zeiteinheit' => array(
        'description' => 'Tag, Monat, Woche, Jahr',
        'type' => 'text',
        'size' => 'small',
        'not null' => FALSE,           
      //  'unsigned' => TRUE,
      ),
        'mietpreis_pro_qm' => array(
        'description' => 'Mietpreis pro m² (netto-kalt)',
        'type' => 'numeric',
        'size' => 'normal',
        'not null' => TRUE, 
        'default' => 0,  
        'precision' => 10, 
        'scale' => 2,
      ),
        'kaufpreis_pro_qm' => array(
        'description' => 'Kaufpreis pro m² (netto-kalt)',
        'type' => 'numeric',
        'size' => 'normal',
        'not null' => TRUE, 
        'default' => 0,  
        'precision' => 10, 
        'scale' => 2,
      ),
       'provisionspflichtig' => array(
        'description' => 'boolean: Zusätzlich Boolean, weil courtage auch als String genutzt wird',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
       'provision_teilen' => array(
        'description' => 'boolean/ Wird geteilt?',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
       'provision_teilen_wert' => array(
        'description' => 'String: %, fester Wert',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE, 
        'default' => ''
      ),
        'innen_courtage' => array(
        'description' => 'Maklercourtage, bei Vermittlungs- bzw. Nachweisgeschäften als Betrag in ? / % / MM, daher Textfeld',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE, 
        'default' => ''
      ),
        'mit_mwst' => array(
        'description' => 'boolean/ MWST Innen Courtage',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
        'aussen_courtage' => array(
        'description' => 'Courtage, die der Kunde zu zahlen hat, als Betrag in ? / % / MM, daher Textfeld',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE, 
        'default' => ''
      ),
        'mit_mwst_a' => array(
        'description' => 'boolean/ MWST Aussen Courtage',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
        'courtage_hinweis' => array(
        'description' => 'Ergänzenden Anmerkungen zur Courtage',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE, 
        'default' => ''
      ),
        'waehrung' => array(
        'description' => 'Currency',
        'type' => 'text',
        'size' => 'small',
        'not null' => FALSE,           
      //  'unsigned' => TRUE,
      ),
       'mwst_satz' => array(
        'description' => 'MWST SATZ',
        'type' => 'numeric',
        'size' => 'normal',
        'not null' => TRUE,
        'default' => 0,
        'precision' => 5, 
        'scale' => 2,
      ),
        'mwst_gesamt' => array(
        'description' => 'Bei unterschiedlichen Mehrwertsteuersätzen,',
        'type' => 'numeric',
        'size' => 'normal',
        'not null' => TRUE,
        'default' => 0,
        'precision' => 10, 
        'scale' => 2,
      ),
       'freitext_preis' => array(
        'description' => 'Angaben zum Preis und dessen Zusammensetzung',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE, 
        'default' => ''
      ),
       'x_fache' => array(
        'description' => 'X-fache, Kaufpreis bezogen auf Jahresmiete',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE, 
        'default' => ''
      ),
        'nettorendite' => array(
        'description' => 'Nettorendite (%)',
        'type' => 'numeric',
        'size' => 'normal',
        'not null' => TRUE,
        'default' => 0,
        'precision' => 10, 
        'scale' => 2,
      ),
        'nettorendite_ist' => array(
        'description' => 'Nettorendite ist, Momentanrendite (%)',
        'type' => 'numeric',
        'size' => 'normal',
        'not null' => TRUE, 
        'default' => 0,
        'precision' => 10, 
        'scale' => 2,
      ),
        'nettorendite_soll' => array(
        'description' => 'Nettorendite soll, Normalrendite(%)',
        'type' => 'numeric',
        'size' => 'normal',
        'not null' => TRUE, 
        'default' => 0,  
        'precision' => 10, 
        'scale' => 2,
      ),
        'mieteinnahmen_ist' => array(
        'description' => 'Mieteinnahmen pro Periode, Momentan-/Isteinnahmen (Ohne Periode = JAHR)',
        'type' => 'numeric',
        'size' => 'normal',
        'not null' => TRUE, 'default' => 0,  
        'precision' => 10, 
        'scale' => 2,
      ),
        'periode' => array(
        'description' => 'TAG, WOCHE, MONAT,JAHR,Ohne Periode = JAHR',
        'type' => 'text',
        'size' => 'small',
        'not null' => FALSE,
        //'default' => 'JAHR',
      ),
        'mieteinnahmen_soll' => array(
        'description' => 'Mieteinnahmen pro Periode, Normal-/Solleinnahmen (Ohne Periode = JAHR)',
        'type' => 'numeric',
        'size' => 'normal',
        'not null' => TRUE, 
        'default' => 0,  
        'precision' => 10, 
        'scale' => 2,
      ),
        'periode_soll' => array(
        'description' => 'TAG, WOCHE, MONAT,JAHR,Ohne Periode = JAHR',
        'type' => 'text',
        'size' => 'small',
        'not null' => FALSE,
       // 'default' => 'JAHR',
      ),
        'erschliessungskosten' => array(
        'description' => 'Erschließungskosten',
        'type' => 'numeric',
        'size' => 'normal',
        'not null' => TRUE, 
        'default' => 0,  
        'precision' => 10, 
        'scale' => 2,
      ),
        'kaution' => array(
        'description' => 'Kaution',
        'type' => 'numeric',
        'size' => 'normal',
        'not null' => TRUE, 
        'default' => 0,  
        'precision' => 10, 
        'scale' => 2,
      ),
        'kaution_text' => array(
        'description' => 'Kaution als textliche Beschreibung',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE, 
        'default' => ''
      ),
        'geschaeftsguthaben' => array(
        'description' => 'Business assets',
        'type' => 'numeric',
        'size' => 'normal',
        'not null' => TRUE, 
        'default' => 0,  
        'precision' => 10, 
        'scale' => 2,
      ),
        
        
    ),
    'primary key' => array('id'),
  );
  
  return $schema;
}

/**
 * Implements hook_uninstall().
 */
function immoclient_price_uninstall() {
  // delete the fieldgroups of this bundle
  db_delete('field_group')
      ->condition('bundle', 'immoclient_price')
      ->execute();
  
  // @see https://api.drupal.org/api/drupal/modules!field!field.crud.inc/function/field_delete_field/7
  $fields = immoclient_price_deletable_fields();
  foreach ($fields as $fieldname) {
  field_delete_field($fieldname);
  }
  field_purge_batch(500);
}


/*
 * create an array of fields belonging to immoclient bundle
 */
function immoclient_price_deletable_fields(){
  $options = array('target' => 'slave');
 
  $content_type = 'immoclient_price';

  $sql = "SELECT field_name
          FROM field_config_instance ci
          WHERE ci.bundle = :content_type ";
     
  $result = db_query($sql, array(':content_type' => $content_type,), $options);
  $fields = array();
  foreach ($result->fetchAll() as $key => $field) {
    $fields[] = $field->field_name;
    
  }
  return $fields;
}
