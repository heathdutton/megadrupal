<?php
/**
 * Implements hook_entity_info().
 */
function immoclient_price_entity_info() {
  
  $info = array();
  
  $info['immoclient_price'] = array(
    'label' => t('Immo Price'),
    'base table' => 'immoclient_price_default',
    'entity keys' => array(
      'id' => 'id',
    ),
    'entity class' => 'ImmoclientPricedefaultEntity',
    'controller class' => 'ImmoclientPricedefaultEntityController',
    'plural label' => t('Price'),
    'access callback' => 'immoclient_price_access_callback',
    'uri callback' => 'entity_class_uri',
    'admin ui' => array(
      'path' => 'admin/content/immo/pricedefault',
      'controller class' => 'EntityDefaultUIController',
    ),
    'translation' => array(
        'entity_translation' => array(
          'base path' => 'admin/content/immo/pricedefault/manage/%entity_object',
          'path wildcard' => '%entity_object',
        ),
      ),
    'fieldable' => TRUE,
    'bundles' => array(
      'pricedefault' => array(
        'label' => t('Price default'),
        'admin' => array(
          'path' => 'admin/structure/immo/pricedefault/manage',
        ),
      ),
    ),
    'inline entity form' => array(
        'controller' => 'ImmoclientPricedefaultInlineEntityFormController',
    ),
    'views controller class' => 'ImmoclientPriceDefaultViewsController',
    'module' => 'immoclient_price',
  );
  
  return $info;
}

/**
 * Implements hook_menu()
 */
function immoclient_price_menu() {
  $items = array();
  
  $items['pricedefault/%'] = array(
    'title' => 'Immo price default',
    'page callback' => 'immoclient_price_view',
    'page arguments' => array(1),
    'access arguments' => array('admin price'),
  );
  $items['admin/structure/immo/pricedefault'] = array(
    'title' => 'Immo price default',
    'access arguments' => array('admin price'),
    'type' => MENU_NORMAL_ITEM,
  );
    $items['admin/structure/immo'] = array(
    'title' => 'Immo',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer site configuration'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/immo'] = array(
    'title' => 'Immo',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer site configuration'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  return $items;
}


/**
 * Callback function for displaying the individual price default page
 */
function immoclient_price_view($id) {
  
  $pricedefault = entity_load('immoclient_price', array($id));
  $price_def = $pricedefault[$id];
  
  drupal_set_title($price_def->kaufpreis);
  $output = entity_view('immoclient_price', array($price_def));
  dpm($output);
  return $output;
  
}

/**
 * Form definition for adding / editing a price (you won't need it).
 */
function immoclient_price_form($form, &$form_state, $pricedefault = NULL) {
  
  $form['kaufpreis'] = array(
    '#title' => t('Price incl. VAT'),
    '#type' => 'numericfield',
    '#precision' => 10,
    '#decimals' => 0,
    '#minimum' => 0,
    '#maximum' => 50000000.99,
    '#default_value' => isset($pricedefault->kaufpreis) ? $pricedefault->kaufpreis : '',
    '#required' => FALSE,
  );
  $active = array(0 => t('No'), 1 => t('Yes'));
  $form['settings']['auf_anfrage'] = array(
    '#title' => t('Preis auf Anfrage?'),
    '#type' => 'radios',
    '#options' => $active,
    '#default_value' => isset($pricedefault->auf_anfrage) ? $pricedefault->auf_anfrage : '0',
   // '#required' => FALSE,
  );
 $active_vb = array(0 => t('No'), 1 => t('Yes'));
  $form['vb'] = array(
    '#title' => t('Preis VB?'),
    '#type' => 'radios',
    '#options' => $active_vb,
    '#default_value' => isset($pricedefault->vb) ? $pricedefault->vb : '0',
    '#required' => FALSE,
  );
  $form['kaufpreisnetto'] = array(
    '#title' => t('Price excl. VAT'),
    '#type' => 'numericfield',
    '#precision' => 10,
    '#decimals' => 2,
    '#minimum' => 0,
    '#maximum' => 50000000.99,
    '#default_value' => isset($pricedefault->kaufpreisnetto) ? $pricedefault->kaufpreisnetto : '',
    '#required' => FALSE,
  );
  
//  field_attach_form('pricedefault', $pricedefault, $form, $form_state);
  
  $form['submit'] = array(
    '#type' => 'submit', 
    '#value' => isset($pricedefault->id) ? t('Update Price default') : t('Save project'),
    '#weight' => 50,
  );

  return $form;
}

/**
 * Submit handler for the project add/edit form.
 */
function immoclient_price_form_submit($form, &$form_state) {
  $pricedefault = entity_ui_form_submit_build_entity($form, $form_state);
  $pricedefault->save();
  drupal_set_message(t('The Price: @name has been saved.', array('@name' => $pricedefault->kaufpreis)));
  $form_state['redirect'] = 'admin/pricedefault';
}


/**
 * Implements hook_entity_property_info().
 * for views integration and inline_entity_form
 */
function immoclient_price_entity_property_info() {
  
  $info = array(); 
 
 $info['immoclient_price']['properties']['id'] = array(
    'label' => t('Project ID'),
    'description' => t('The ID of the project.'),
    'type' => 'integer',
    'schema field' => 'id',
    'translatable' => TRUE, 
  );

  $info['immoclient_price']['properties']['kaufpreis'] = array(
    'label' => t('Price incl. VAT'),
    'description' => t('Selling price for private people'),
    'type' => 'integer',
    'schema field' => 'kaufpreis',
    'translatable' => TRUE, 
  );
  $info['immoclient_price']['properties']['auf_anfrage'] = array(
    'label' => t('Auf Anfrage'),
    'description' => t('Should this be by Demand?'),
    'type' => 'boolean',
    'schema field' => 'auf_anfrage',
    'translatable' => TRUE, 
    
  );
  $info['immoclient_price']['properties']['vb'] = array(
    'label' => t('Basis for negotiation'),
    'description' => t('Negiotiable?'),
    'type' => 'boolean', 
    'translatable'=> TRUE,
    'schema field' => 'vb',
  );
   $info['immoclient_price']['properties']['kaufpreisnetto'] = array(
    'label' => t('Price excl. VAT'),
    'description' => t('Selling price for commercial people'),
    'type' => 'decimal',
    'schema field' => 'kaufpreisnetto',
    'translatable' => TRUE, 
  );
   $info['immoclient_price']['properties']['kaufpreisust'] = array(
    'label' => t('VAT for kaufpreisnetto'),
    'description' => t('VAT for kaufpreisnetto'),
    'type' => 'decimal',
    'schema field' => 'kaufpreisust',
    'translatable' => TRUE, 
  );
    $info['immoclient_price']['properties']['kaufpreisbrutto'] = array(
    'label' => t('Price incl. VAT'),
    'description' => t('Selling price for commercial people with VAT'),
    'type' => 'decimal',
    'schema field' => 'kaufpreisbrutto',
    'translatable' => TRUE, 
  );
     $info['immoclient_price']['properties']['nettokaltmiete'] = array(
    'label' => t('Nettokaltmiete'),
    'description' => t('Rent excluded utilities'),
    'type' => 'decimal',
    'schema field' => 'nettokaltmiete',
    'translatable' => TRUE, 
  );
     $info['immoclient_price']['properties']['kaltmiete'] = array(
    'label' => t('Kaltmiete'),
    'description' => t('Rent with utilities, excluded heating.'),
    'type' => 'decimal',
    'schema field' => 'kaltmiete',
    'translatable' => TRUE, 
  );
     $info['immoclient_price']['properties']['warmmiete'] = array(
    'label' => t('Warmmiete'),
    'description' => t('Rent including heating.'),
    'type' => 'decimal',
    'schema field' => 'warmmiete',
    'translatable' => TRUE, 
  );
     $info['immoclient_price']['properties']['nebenkosten'] = array(
    'label' => t('Utilities'),
    'description' => t('Utilities'),
    'type' => 'decimal',
    'schema field' => 'nebenkosten',
    'translatable' => TRUE, 
  );
     $info['immoclient_price']['properties']['heizungskosten_enthalten'] = array(
    'label' => t('Incl. heating'),
    'description' => t('Rent including heating.'),
    'type' => 'boolean',
    'schema field' => 'heizungskosten_enthalten',
    'translatable' => TRUE, 
  );
   $info['immoclient_price']['properties']['heizungskosten'] = array(
    'label' => t('Incl. heating'),
    'description' => t('Monthly Heating Costs - advance payment'),
    'type' => 'decimal',
    'schema field' => 'heizungskosten',
    'translatable' => TRUE, 
  );
   $info['immoclient_price']['properties']['zzg_mehrwertsteuer'] = array(
    'label' => t('Incl. heating'),
    'description' => t('VAT included - one time per building'),
    'type' => 'boolean',
    'schema field' => 'zzg_mehrwertsteuer',
    'translatable' => TRUE, 
  );
   $info['immoclient_price']['properties']['mietzuschlaege'] = array(
    'label' => t('Incl. heating'),
    'description' => t('Rent additions'),
    'type' => 'decimal',
    'schema field' => 'mietzuschlaege',
    'translatable' => TRUE, 
  );
   $info['immoclient_price']['properties']['hauptmietzinsnetto'] = array(
    'label' => t('Main rent interest net'),
    'description' => t('Because of different VATS'),
    'type' => 'decimal',
    'schema field' => 'hauptmietzinsnetto',
    'translatable' => TRUE, 
  );
   $info['immoclient_price']['properties']['hauptmietzinsust'] = array(
    'label' => t('Main rent interest tax'),
    'description' => t('Because of different VATS'),
    'type' => 'decimal',
    'schema field' => 'hauptmietzinsust',
    'translatable' => TRUE, 
  );
   $info['immoclient_price']['properties']['pauschalmiete'] = array(
    'label' => t('All in rent'),
    'description' => t('Flat rate'),
    'type' => 'decimal',
    'schema field' => 'pauschalmiete',
  );
   $info['immoclient_price']['properties']['betriebskostennetto'] = array(
    'label' => t('Cost of ownership'),
    'description' => t('Betriebskostennetto'),
    'type' => 'decimal',
    'schema field' => 'betriebskostennetto',
    'translatable' => TRUE, 
  );
    $info['immoclient_price']['properties']['betriebskostenust'] = array(
    'label' => t('Cost of ownership VAT'),
    'description' => t('Betriebskosten UST'),
    'type' => 'decimal',
    'schema field' => 'betriebskostenust',
    'translatable' => TRUE, 
  );
    $info['immoclient_price']['properties']['pacht'] = array(
    'label' => t('Lease'),
    'description' => t('Pacht'),
    'type' => 'decimal',
    'schema field' => 'pacht',
    'translatable' => TRUE, 
  );
    $info['immoclient_price']['properties']['erbpacht'] = array(
    'label' => t('Leasehold'),
    'description' => t('Erbpacht'),
    'type' => 'decimal',
    'schema field' => 'erbpacht',
    'translatable' => TRUE, 
  );
    $info['immoclient_price']['properties']['hausgeld'] = array(
    'label' => t('Rent payment'),
    'description' => t('Hausgeld'),
    'type' => 'decimal',
    'schema field' => 'hausgeld',
    'translatable' => TRUE, 
  );
    $info['immoclient_price']['properties']['abstand'] = array(
    'label' => t('Agio'),
    'description' => t('Agio'),
    'type' => 'decimal',
    'schema field' => 'abstand',
    'translatable' => TRUE, 
  );
    $info['immoclient_price']['properties']['preis_zeitraum_von'] = array(
    'label' => t('Price from date'),
    'description' => t('Price from date'),
    'type' => 'date',
    'schema field' => 'preis_zeitraum_von',
    'translatable' => TRUE, 
  );
    $info['immoclient_price']['properties']['preis_zeitraum_bis'] = array(
    'label' => t('Price until'),
    'description' => t('Price until'),
    'type' => 'date',
    'schema field' => 'preis_zeitraum_bis',
    'translatable' => TRUE, 
  );
    $info['immoclient_price']['properties']['preis_zeiteinheit'] = array(
    'label' => t('Price time unit'),
    'description' => t('Price time unit'),
    'type' => 'text',
    'schema field' => 'preis_zeiteinheit',
    'translatable' => TRUE, 
  );
    $info['immoclient_price']['properties']['richtpreis'] = array(
    'label' => t('Basis of negotiation'),
    'description' => t('Basis of negotiation'),
    'type' => 'decimal',
    'schema field' => 'richtpreis',
    'translatable' => TRUE, 
  );
    $info['immoclient_price']['properties']['mietpreis_pro_qm'] = array(
    'label' => t('Rent per square meter'),
    'description' => t('Mietpreis pro qm'),
    'type' => 'decimal',
    'schema field' => 'mietpreis_pro_qm',
    'translatable' => TRUE, 
  );
    $info['immoclient_price']['properties']['kaufpreis_pro_qm'] = array(
    'label' => t('Price per square meter'),
    'description' => t('Kaufpreis pro qm'),
    'type' => 'decimal',
    'schema field' => 'kaufpreis_pro_qm',
    'translatable' => TRUE, 
  );
    $info['immoclient_price']['properties']['provisionspflichtig'] = array(
    'label' => t('Subject to commission'),
    'description' => t('Commission or not'),
    'type' => 'boolean',
    'schema field' => 'provisionspflichtig',
    'translatable' => TRUE, 
  );
    $info['immoclient_price']['properties']['provision_teilen'] = array(
    'label' => t('Share commission'),
    'description' => t('Share commission or not'),
    'type' => 'boolean',
    'schema field' => 'provision_teilen',
    'translatable' => TRUE, 
  );
    $info['immoclient_price']['properties']['provision_teilen_wert'] = array(
    'label' => t('Share commission value'),
    'description' => t('Share commission value'),
    'type' => 'text',
    'schema field' => 'provision_teilen_wert',
    'translatable' => TRUE, 
  );
    $info['immoclient_price']['properties']['aussen_courtage'] = array(
    'label' => t('Commission value from customer'),
    'description' => t('Commission value from customer'),
    'type' => 'text',
    'schema field' => 'aussen_courtage',
    'translatable' => TRUE,  
  );
    $info['immoclient_price']['properties']['mit_mwst_a'] = array(
    'label' => t('Buyer commission incl. VAT'),
    'description' => t('Commission value from customer with VAT'),
    'type' => 'boolean',
    'schema field' => 'mit_mwst_a',
    'translatable' => TRUE, 
  );
    $info['immoclient_price']['properties']['innen_courtage'] = array(
    'label' => t('Seller Commission'),
    'description' => t('Commission value from customer'),
    'type' => 'text',
    'schema field' => 'innen_courtage',
    'translatable' => TRUE, 
  );
    $info['immoclient_price']['properties']['mit_mwst'] = array(
    'label' => t('Seller commission with VAT'),
    'description' => t('Seller commission with VAT'),
    'type' => 'text',
    'schema field' => 'mit_mwst',
    'translatable' => TRUE, 
  );
    $info['immoclient_price']['properties']['courtage_hinweis'] = array(
    'label' => t('Useful infos about commission'),
    'description' => t('Useful infos about commission'),
    'type' => 'text',
    'schema field' => 'courtage_hinweis',
    'translatable' => TRUE, 
  );
    $info['immoclient_price']['properties']['waehrung'] = array(
    'label' => t('Currency'),
    'description' => t('Currency'),
    'type' => 'text',
    'schema field' => 'waehrung',
    'translatable' => TRUE, 
  );
    $info['immoclient_price']['properties']['mwst_satz'] = array(
    'label' => t('VAT'),
    'description' => t('VAT'),
    'type' => 'decimal',
    'schema field' => 'mwst_satz',
    'translatable' => TRUE, 
  );
    $info['immoclient_price']['properties']['x_fache'] = array(
    'label' => t('n-fold'),
    'description' => t('n-fold'),
    'type' => 'text',
    'schema field' => 'x_fache',
    'translatable' => TRUE, 
  );
    $info['immoclient_price']['properties']['nettorendite'] = array(
    'label' => t('Net yield'),
    'description' => t('yield-additional cost'),
    'type' => 'decimal',
    'schema field' => 'nettorendite',
    'translatable' => TRUE, 
  );
    $info['immoclient_price']['properties']['nettorendite_soll'] = array(
    'label' => t('Net yield target'),
    'description' => t('yield-additional cost target'),
    'type' => 'decimal',
    'schema field' => 'nettorendite_soll',
    'translatable' => TRUE, 
  );
    $info['immoclient_price']['properties']['nettorendite_ist'] = array(
    'label' => t('Actual net yield'),
    'description' => t('yield-additional cost'),
    'type' => 'decimal',
    'schema field' => 'nettorendite_ist',
    'translatable' => TRUE, 
  );
     $info['immoclient_price']['properties']['mieteinnahmen_soll'] = array(
    'label' => t('Rental target'),
    'description' => t('Rental target'),
    'type' => 'decimal',
    'schema field' => 'mieteinnahmen_soll',
    'translatable' => TRUE, 
  );
    $info['immoclient_price']['properties']['mieteinnahmen_ist'] = array(
    'label' => t('Actual rental'),
    'description' => t('Actual rental'),
    'type' => 'decimal',
    'schema field' => 'mieteinnahmen_ist',
    'translatable' => TRUE, 
  );
    $info['immoclient_price']['properties']['periode'] = array(
    'label' => t('Time interval'),
    'description' => t('Time interval'),
    'type' => 'text',
    'schema field' => 'periode',
    'translatable' => TRUE, 
  );
    $info['immoclient_price']['properties']['periode_soll'] = array(
    'label' => t('Time interval'),
    'description' => t('Time interval'),
    'type' => 'text',
    'schema field' => 'periode_soll',
    'translatable' => TRUE, 
  );
    $info['immoclient_price']['properties']['erschliessungskosten'] = array(
    'label' => t('Development costs'),
    'description' => t('development costs'),
    'type' => 'decimal',
    'schema field' => 'erschliessungskosten',
    'translatable' => TRUE, 
  );
    $info['immoclient_price']['properties']['kaution'] = array(
    'label' => t('Deposit'),
    'description' => t('Sum of deposit'),
    'type' => 'decimal',
    'schema field' => 'kaution',
    'translatable' => TRUE, 
  );
    $info['immoclient_price']['properties']['kaution_text'] = array(
    'label' => t('Deposit description'),
    'description' => t('Deposit description'),
    'type' => 'text',
    'schema field' => 'kaution_text',
    'translatable' => TRUE, 
  );
    $info['immoclient_price']['properties']['geschaeftsguthaben'] = array(
    'label' => t('Business assets'),
    'description' => t('Business assets'),
    'type' => 'decimal',
    'schema field' => 'geschaeftsguthaben',
    'translatable' => TRUE, 
  );
  return $info;
}


/**
 * Project entity class extending the Entity class
 */
class ImmoclientPricedefaultEntity extends Entity {
  
  /**
   * Change the default URI from default/id to project/id
   */
  protected function defaultUri() {
    return array('path' => 'pricedefault/' . $this->identifier());
  }
  
}

/**
 * EntityTest Views Controller class.
 */
class ImmoclientPriceDefaultViewsController extends EntityDefaultViewsController {
  /**
   * Edit or add extra fields to views_data().
   */
  public function views_data() {
    $data = parent::views_data();
//    dpm($data,'Views data');
    // Add your custom data here
    /*
    * Example: change the handler of a field
    * if the 'created' field is a unix timestamp in the database,
    * Entity API will set the handler to views_handler_field_numeric,
    * change this to the views date handler
    */
 //   $data['entity_test']['created']['field']['handler'] = 'views_handler_field_date';
    return $data;
  }
}

/*
 * Implements hook_permission
 */
	
function immoclient_price_permission(){
        return array(
                        'admin price' => array(
                        'title' => t('Administer immoclient submodules'),
                        'description' => t('Administer immo price')
                        ),
                        'view price' => array(
                        'title' => t('View immoclient submodules'),
                        'description' => t('View immo price')
                        ),
                );
}
/**
 * Access callback for project entities.
 */
function immoclient_price_access_callback($op, $project = NULL, $account = NULL) {
  if (($op == 'update' || $op == 'create' || $op == 'delete')
          && user_access('admin price')) {
    return TRUE;
  }
  elseif($op == 'view' && user_access('view price')){
    return TRUE;
  }
  else {
    return FALSE;
  }
}

  /**
 *  Check that 0 is saved as decimal
 */
function immoclient_price_check_null(&$element, &$form_state) {
  $exists = FALSE;
  $value = drupal_array_get_nested_value($form_state['values'], $element['#parents'], $exists);
 
  if (!$exists) return;
  if ($value != ''){
      return;
  }
  else{
      $value = '0.00';
  }
    $element['#value'] = $value;
  form_set_value($element, $value, $form_state);
}
/**
 *  Check if the number is a percent value or greater than 1
 */

function immoclient_price_check_value_percent(&$element, &$form_state) {
    $exists = FALSE;
    $value = drupal_array_get_nested_value($form_state['values'], $element['#parents'], $exists);
 
  if (!$exists) return;
  if ($value <= 100 && $value >0){
     $value = $value . ' %'; 
     $komma = str_replace('.', ',', $value);
  }
  elseif($value > 100){
      $value = $value . ' €';
      $komma = str_replace('.', ',', $value);
  }
  else{
      $komma = '0,00';
  }
    $element['#value'] = $komma;
  form_set_value($element, $value, $form_state);
}
/**
 * language independent format for €
 * @todo search for aktive language, if language ist english, format is correct
 */
function immoclient_price_make_money($euro){
 //   dpm($euro);
    $euro_number = str_replace('.', ',', $euro);
    $euro_money = $euro_number.' €';
    return $euro_money;
}
/**
 * language independent format for numbers
 * @todo search for aktive language, if language ist english, format is correct
 */
function immoclient_price_make_komma($decimal){
 //   dpm($euro);
    $komma = str_replace('.', ',', $decimal);
    return $komma;
}
/**
 * Return boolean
 */
function immoclient_price_bool($i){
    switch ($i){
        case 0:
            return t('No');
            break;
        case 1:
            return t('Yes');
            break;
    }
}

/**
 * Check to return a timestamp instead a DateObject
 * 
 */
function _immoclient_callback_validate_uidate2timestamp(&$element, &$form_state) {
  $exists = FALSE;
  $value = drupal_array_get_nested_value($form_state['values'], $element['#parents'], $exists);
  if (!$exists) return;
  // this places *very* big assumption that you uses date_popup, because the value we get
  // is in the form of $value = array('date' => $date, 'time' => $time);
  // so just implode them.
  $value_as_date = implode(' ', $value);
  // when $value_as_date is empty new Instance of class Dateobject would takte the
  // current date. To allow to remove the date the timestamp has to be 0.
  if($value_as_date !=''){
  $date = new DateObject($value_as_date);
  $timestamp = $date->getTimestamp();
  }
  else{$timestamp = '0';}
  // this one is to kill date element validation callback xD
  // see that the argument to this function passed $element by reference.
  $element['#value'] = (string) $timestamp;
  form_set_value($element, $timestamp, $form_state);
}
/**
 * MYSQL doesn't accept empty_string as NULL
 */
function immoclient_price_area_check_empty_string(&$element, &$form_state){
  $exists = FALSE;
  $value = drupal_array_get_nested_value($form_state['values'], $element['#parents'], $exists);
  if (!$exists) return;
  if ($value != ''){
      return;
  }
  else{
      $value = NULL;
  }
  $element['#value'] = $value;
  form_set_value($element, $value, $form_state);
}

function immoclient_price_insert($node){
  dpm($node);
}
