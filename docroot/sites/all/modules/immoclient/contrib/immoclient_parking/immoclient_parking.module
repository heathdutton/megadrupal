<?php

/**
 * Implements hook_entity_info().
 */
function immoclient_parking_entity_info() {
  
  $info = array();
  
  $info['immoclient_parking'] = array(
    'label' => t('Parking place'),
    'base table' => 'immoclient_parking',
    'entity keys' => array(
      'id' => 'id',
      'label' => 'platzart',
    ),
    'entity class' => 'ImmoclientparkingEntity',
    'controller class' => 'ImmoclientParkingEntityController',
    'plural label' => t('Parking'),
    'access callback' => 'immoclient_price_access_callback',
    'uri callback' => 'entity_class_uri',
    'admin ui' => array(
      'path' => 'admin/content/parking',
      'controller class' => 'EntityDefaultUIController',
    ),
    'translation' => array(
        'entity_translation' => array(
          'base path' => 'admin/content/parking/manage/%entity_object',
          'path wildcard' => '%entity_object',
        ),
      ),
    'fieldable' => TRUE, 
    'bundles' => array(
      'immoclient_parking' => array(
        'label' => t('Parking place'),
        'admin' => array(
          'path' => 'admin/structure/immo/parking',
        ),
      ),
    ),
    'inline entity form' => array(
        'controller' => 'ImmoclientParkingInlineEntityFormController',
    ),
    'views controller class' => 'ImmoclientparkingDefaultViewsController',
    'module' => 'immoclient_parking',
  );
  
  return $info;
}
/**
 * Implements hook_menu()
 */
function immoclient_parking_menu() {
  $items = array();
  
  $items['immoclient_parking/%'] = array(
    'title' => 'Parking Space',
    'page callback' => 'immoclient_parking_view_area',
    'page arguments' => array(1),
    'access arguments' => array('view price'),
  );
  $items['admin/structure/immo/parking'] = array(
    'title' => 'Parking Space',
    'access arguments' => array('admin price'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}
/**
 * Callback function for displaying the individual price default page
 */
function immoclient_parking_view_area($id) {
  
  $area = entity_load('immoclient_parking', array($id));
  $area_def = $area[$id];
  $output = entity_view('immoclient_parking', array($area_def));
  return $output;
  
}
/**
 * Form definition for adding / editing a project.
 */
function immoclient_parking_form($form, &$form_state, $parking = NULL) {

  $form['platzart'] = array(
    '#title' => t('Platzart?'),
    '#type' => 'select',
    '#options' => array(
        'SONSTIGES'=>t('Other'),
        'CARPORT' => t('Carport'),
        'DUPLEX' =>t('Duplex'),
        'FREIPLATZ'=>t('Free space'),
        'GARAGE'=>t('Garage'),
        'PARKHAUS'=>t('Parking deck'),
        'TIEFGARAGE'=>t('Basement garage'),
        ),
    '#default_value' => isset($free->platzart) ? $free->platzart : '',
    '#required' => TRUE,
  );
  
  $form['submit'] = array(
    '#type' => 'submit', 
    '#value' => isset($parking->id) ? t('Update project') : t('Save project'),
    '#weight' => 50,
  );

  return $form;
}
/**
 * Submit handler for the project add/edit form.
 */
function immoclient_parking_form_submit($form, &$form_state) {
  $project = entity_ui_form_submit_build_entity($form, $form_state);
  $project->save();
  drupal_set_message(t('The project: @name has been saved.', array('@name' => $project->name)));
  $form_state['redirect'] = 'admin/content/parking';
}
/**
 * EntityTest Views Controller class.
 */
class ImmoclientparkingDefaultViewsController extends EntityDefaultViewsController {
  /**
   * Edit or add extra fields to views_data().
   */
  public function views_data() {
    $data = parent::views_data();
    return $data;
  }
}
/**
 * Project entity class extending the Entity class
 */
class ImmoclientparkingEntity extends Entity {
  
  /**
   * Change the default URI from default/id to immoclient_parking/id
   */
  protected function defaultUri() {
    return array('path' => 'immoclient_parking/' . $this->identifier());
  }
  
}

  
  /**
 * Implements hook_entity_property_info().
 * for views integration and inline_entity_form
 */
function immoclient_parking_entity_property_info() {
  $info = array();
  $info['immoclient_parking']['properties']['id'] = array(
    'label' => t('ID'),
    'description' => t('ID'),
    'type' => 'integer',
    'schema field' => 'id',
    'translatable' => TRUE,    
  );
  $info['immoclient_parking']['properties']['platzart'] = array(
    'label' => t('Parking space'),
    'description' => t('Parking space'),
    'type' => 'integer',
    'options list' => 'immoclient_parking_platzart_options_list',
    'schema field' => 'platzart',
    'translatable' => TRUE,    
  );
  $info['immoclient_parking']['properties']['anzahl'] = array(
    'label' => t('Number of spaces'),
    'description' => t('Number of spaces'),
    'type' => 'integer',
    'schema field' => 'platzart_anzahl',    
  );
  return $info;
}


/**
 * gives the select list for "platzart"
 */
function immoclient_parking_platzart_options_list(){
    return array(
      'SONSTIGE'=>t('Other'),
      'CARPORT' => t('Carport'),
      'DUPLEX' =>t('Duplex'),
      'FREIPLATZ'=>t('Free space'),
      'GARAGE'=>t('Garage'),
      'PARKHAUS'=>t('Parking deck'),
      'TIEFGARAGE'=>t('Basement garage'),
        );
}
/**
 * Return the value from the list
 */
function immoclient_parking_platzart_select($info){
    switch($info){
        case 'SONSTIGE':
            return t('Other');
        case 'CARPORT':
            return t('Carport');
        case 'DUPLEX':
            return t('Duplex');
        case 'FREIPLATZ':
            return t('Free space');
        case 'GARAGE':
            return t('Garage');
        case 'PARKHAUS':
            return t('Parking deck');
        case 'TIEFGARAGE':
            return t('Basement garage');
    }
}
