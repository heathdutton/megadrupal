<?php

/**
 * Implements hook_entity_info().
 */
function immoclient_customer_entity_info() {
  
  $info = array();
  
  $info['immoclient_customer'] = array(
    'label' => t('Customer'),
    'base table' => 'immoclient_customer',
    'entity keys' => array(
      'id' => 'id',
    ),
    'label callback' => 'immoclient_customer_label_callback',
    'entity class' => 'ImmoclientCustomerEntity',
    'plural label' => t('Customers'),
    'controller class' => 'ImmoclientCustomerEntityController',
    'access callback' => 'immoclient_customer_access_callback',
    'uri callback' => 'entity_class_uri',
    'admin ui' => array(
      'path' => 'admin/customer',
      'file' => 'includes/immoclient_customer.admin.inc',
      'controller class' => 'ImmoclientCustomerUIController',
    ),
    'fieldable' => TRUE, 
    'bundles' => array(
      'immoclient_customer' => array(
        'label' => t('Customer'),
        'admin' => array(
          'path' => 'admin/customer',
        ),
      ),
    ),
    'inline entity form' => array(
        'controller' => 'ImmoclientCustomerInlineEntityFormController',
    ),
    'views controller class' => 'ImmoclientCustomerDefaultViewsControllertroller',
    'module' => 'immoclient_customer',
  );
  
  return $info;
}
function immoclient_customer_label_callback($customer, $type) {
  if (empty($customer->name) ||empty ($customer->prename)){ 
  return t('No name');
  }  
  else{
    return $customer->name.', '.$customer->prename;
  }
}
/**
 * Implements hook_menu()
 */
function immoclient_customer_menu() {
  $items = array();
  
  $items['customer/%'] = array(
    'title' => 'Customer',
    'page callback' => 'immoclient_customer_view',
    'page arguments' => array(1),
    'access arguments' => array('view customer'),
  );
  $items['objektref/autocomplete'] = array(
    'page callback' => 'immoclient_customer_autocomplete',
    'access arguments' => array('admin customer'),
    'type' => MENU_CALLBACK
  );
  
  return $items;
}
/**
 * Callback function for displaying the individual customer default page
 */
function immoclient_customer_view($id) {
  
  $customer = entity_load('immoclient_customer', array($id));
  $customer_id = $customer[$id];
  drupal_set_title($customer_id->name);
  $output = entity_view('immoclient_customer', array($customer_id));
  return $output;
  
}
/**
 * Form definition for adding / editing a project.
 */
function immoclient_customer_form($form, &$form_state, $customer = NULL) {

  $form['customer'] = array(
    '#title' => t('Buyer or Seller?'),
    '#type' => 'select',
    '#options' => array(
      0 => t('Buyer'),
      1 => t('Seller'),
    ),
    '#required' => TRUE,
    '#default_value' => isset($customer->customer) ? $customer->customer : '0',
    '#access' => FALSE,
  );
  if(isset($customer->is_new)){
    $form['objekt_ref'] = array(
      '#title' => t('Object number reference'),
      '#description' => t('References the external object number of real estate'),
      '#type' => 'textfield',
      '#autocomplete_path' => 'objektref/autocomplete',
      '#required' => TRUE,
      '#size' => 25,
    );
  }
  
  if(isset($customer->customer)){
    if($customer->customer == 0){
      $form['objekt_ref'] = array(
        '#title' => t('Object number reference'),
        '#description' => t('References the external object number of real estate'),
        '#type' => 'textfield',
        '#default_value' => isset($customer->objekt_ref) ? $customer->objekt_ref : '',
        '#autocomplete_path' => 'objektref/autocomplete',
        '#required' => TRUE,
        '#size' => 25,
      );
    }
  }
  
  $form['saluation'] = array(
    '#title' => t('Salutation'),
    '#type' => 'radios',
    '#options' => array(
        0 => t('Mr'),
        1 => t('Mrs')
    ),
    '#default_value' => isset($customer->salutation) ? $customer->salutation : '0',
    '#required' => FALSE,
    '#attached' => array(
      'css' => array(
            'seven' => drupal_get_path('module', 'immoclient') . '/css/immoclient_seven.css',
          ),
      ),
  );
  $form['prename'] = array(
    '#title' => t('First name'),
    '#type' => 'textfield',
    '#default_value' => isset($customer->prename) ? $customer->prename : '',
    '#required' => TRUE,
    '#size' => 25,
  );
    $form['name'] = array(
    '#title' => t('Name'),
    '#type' => 'textfield',
    '#default_value' => isset($customer->name) ? $customer->name : '',
    '#required' => TRUE,
    '#size' => 25,
  );
  
  field_attach_form('immoclient_customer', $customer, $form, $form_state);
  
  $form['submit'] = array(
    '#type' => 'submit', 
    '#value' => isset($customer->id) ? t('Update Customer') : t('Save Customer'),
    '#weight' => 50,
  );

  return $form;
}
/**
 * Submit handler for the project add/edit form.
 */
function immoclient_customer_form_submit($form, &$form_state) {
  $customer = entity_ui_form_submit_build_entity($form, $form_state);
  $customer->save();
  drupal_set_message(t('The customer: @name has been saved.', array('@name' => $customer->name)));
  $form_state['redirect'] = 'admin/customer';
}
/**
 * Return seller or buyer
 */
function immoclient_customer_custom($i){
  switch ($i){
    case 0:
      return t('Buyer');
      break;
    case 1:
      return t('Seller');
      break;
  }
}
/**
 * Return salutation
 */
function immoclient_customer_bool($i){
  switch ($i){
    case 0:
      return t('Mr');
      break;
    case 1:
      return t('Mrs');
      break;
  }
}
/**
 * EntityTest Views Controller class.
 */
class ImmoclientCustomerDefaultViewsControllertroller extends EntityDefaultViewsController {
  /**
   * Edit or add extra fields to views_data().
   */
  public function views_data() {
    $data = parent::views_data();
    return $data;
  }
}
/**
 * Project entity class extending the Entity class
 */
class ImmoclientCustomerEntity extends Entity {
  
  /**
   * Change the default URI from default/id to customer/id
   */
  protected function defaultUri() {
    return array('path' => 'customer/' . $this->identifier());
  }
  
}

  
  /**
 * Implements hook_entity_property_info().
 * for views integration and inline_entity_form
 */
function immoclient_customer_entity_property_info() {
  $info = array();
  $info['customer']['properties']['id'] = array(
    'label' => t('ID'),
    'description' => t('ID'),
    'type' => 'integer',
    'schema field' => 'id',
    'translatable' => FALSE,    
  );
  $info['customer']['properties']['prename'] = array(
    'label' => t('Prename'),
    'description' => t('Prename'),
    'type' => 'text',
    'schema field' => 'prename',
    'translatable' => FALSE,
  );
    $info['customer']['properties']['name'] = array(
    'label' => t('Name'),
    'description' => t('Name'),
    'type' => 'text',
    'schema field' => 'name',
    'translatable' => FALSE,    
  );
    $info['customer']['properties']['salutation'] = array(
    'label' => t('Salutation'),
    'description' => t('Salutation'),
    'type' => 'integer',
    'options list' => 'immoclient_customer_salutation_options_list',
    'schema field' => 'salutation',
    'translatable' => TRUE,    
  );
    $info['customer']['properties']['customer'] = array(
    'label' => t('Customer'),
    'description' => t('Customer'),
    'type' => 'integer',
    'options list' => 'immoclient_customer_customer_options_list',
    'schema field' => 'customer',
    'translatable' => TRUE,    
  );
    $info['customer']['properties']['objekt_ref'] = array(
    'label' => t('Object reference'),
    'description' => t('Object reference'),
    'type' => 'text',
    'schema field' => 'objekt_ref',
    'translatable' => FALSE,    
  );
  return $info;
}

/*
 * used to filter default values from checkbox
 */
function immoclient_customer_default_values_customer($entity,$field_name){
  $field = field_get_items('immoclient_customer', $entity, $field_name, $langcode = NULL);
  if($field){
    foreach( $field as $key =>$value){
        foreach($value as $bla =>$blubb){
         $default []= $blubb;   
        }; 
    }; 
    return $default;
  }
  return '';
}

/*
 * used to filter default values from textfield
 */
function immoclient_customer_default_values_customer_text($entity,$field_name){
  $field = field_get_items('immoclient_customer', $entity, $field_name);  
    if($field){
      $default = $field[0]['value'];   
      return $default;
    };  
    return '';
  }
  
function immoclient_customer_salutation_options_list(){
  return array(
    0 => t('Mr'),
    1=> t('Mrs'), 
  );
}
function immoclient_customer_options_list(){
  return array(
    0 => t('Buyer'),
    1=> t('Seller'), 
  );
}
/*
 * Implements hook_permission
 */
	
function immoclient_customer_permission(){
  return array(
    'admin customer' => array(
    'title' => t('Administer customers, employees and impressum'),
    'description' => t('Administer immo customer')
    ),
    'view customer' => array(
    'title' => t('View customers, employees and impressum'),
    'description' => t('View customers etc.')
    ),
  );
}
/**
 * Access callback for project entities.
 */
function immoclient_customer_access_callback($op, $project = NULL, $account = NULL) {
  if (($op == 'update' || $op == 'create' || $op == 'delete')
          && user_access('admin customer')) {
    return TRUE;
  }
  elseif ($op == 'view' && user_access('view customer')){
    return TRUE;
  }
  else {
    return FALSE;
  }
}


  //translated content
function immoclient_customer_options_admin($customer){
  switch ($customer) {
    case 1:
      return t('Seller');
      break;
    case 0:
      return t('Buyer');
      break;
  }
}

/*
 * autocomplete for referencing real estates with customers/sellers
 */
function immoclient_customer_autocomplete($string) {
  $matches = array();
  $query = db_select('field_data_field_objektnr_extern', 'oe');

  // Select rows that match the string
  $return = $query
    ->fields('oe', array('field_objektnr_extern_value'))
    ->condition('oe.field_objektnr_extern_value', '%' . db_like($string) . '%', 'LIKE')
    ->range(0, 10)
    ->execute();

  // add matches to $matches  
  foreach ($return as $row) {
    $matches[$row->field_objektnr_extern_value] = check_plain($row->field_objektnr_extern_value);
  }

    // return for JS
    drupal_json_output($matches);
}


/*
 * create the title per db_query from field objektnr_extern
 */
function immoclient_customer_plainreference($nr_extern){
  $result = db_query('SELECT entity_id FROM {field_data_field_objektnr_extern} oe '
          . 'WHERE oe.field_objektnr_extern_value = :nre', array(':nre' => $nr_extern))->fetchField();
  if($result){
    $node = node_load($result);
    $title = $node->title;
    return $title;
  }
  return;
}
  
/**
 * Loads all entities from ID list.
 *
 * @param array $ids
 *   The list of entity IDs to be loaded.
 * @param array $conditions
 *   Conditions by which entities can be filtered.
 * @param bool $reset
 *   True to load uncached entities.
 */
function immoclient_customer_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('immoclient_customer', $ids, $conditions, $reset);
}

/*
 * loads the appropriate entity_id from table objektnr_extern
 */
function immoclient_customer_search_nid($cid){
  $result = db_query('SELECT entity_id FROM {field_data_field_objektnr_extern} oe '
          . 'WHERE oe.field_objektnr_extern_value = :nre', array(':nre' => $cid))->fetchField();
  
  //tests if the node isn't already deleted
  $test = db_query('Select nid FROM {node} n WHERE n.nid = :test',array(':test' => $result))->fetchField();
  if($test != ''){
    return $result;
  }
  else return NULL;
}
