<?php

/**
 * Implements hook_entity_info().
 */
function immoclient_energy_entity_info() {
  
  $info = array();
  
  $info['immoclient_energy'] = array(
    'label' => t('Immo energy'),
    'base table' => 'immoclient_energy',
    'entity keys' => array(
      'id' => 'id',
     // 'label' => 'furnish',
    ),
    'entity class' => 'ImmoclientenergyEntity',
    'controller class' => 'ImmoclientenergyEntityController',
    'plural label' => t('Energy'),
    'access callback' => 'immoclient_price_access_callback',
    'uri callback' => 'entity_class_uri',
    'admin ui' => array(
      'path' => 'admin/content/energy',
      'controller class' => 'EntityDefaultUIController',
    ),
    'translation' => array(
        'entity_translation' => array(
          'base path' => 'admin/content/energy/manage/%entity_object',
          'path wildcard' => '%entity_object',
        ),
      ),
    'fieldable' => TRUE, 
    'bundles' => array(
      'immoclient_energy' => array(
        'label' => t('Immo energy'),
        'admin' => array(
          'path' => 'admin/structure/immo/energy/manage',
        ),
      ),
    ),
    'inline entity form' => array(
        'controller' => 'ImmoclientEnergyInlineEntityFormController',
    ),
    'views controller class' => 'ImmoclientenergyDefaultViewsController',
    'module' => 'immoclient_energy',
  );
  
  return $info;
}

/**
 * Implements hook_menu()
 */
function immoclient_energy_menu() {
  $items = array();
  
  $items['immoclient_energy/%'] = array(
    'title' => 'Immo energy',
    'page callback' => 'immoclient_energy_view_area',
    'page arguments' => array(1),
    'access arguments' => array('view price'),
  );
  $items['admin/structure/immo/energy'] = array(
    'title' => 'Immo energy',
    'access arguments' => array('admin price'),
    'type' => MENU_NORMAL_ITEM,
  );
  
  return $items;
}
/**
 * Callback function for displaying the individual price default page
 */
function immoclient_energy_view_area($id) {
  
  $area = entity_load('immoclient_energy', array($id));
//  dpm($area);
  $area_def = $area[$id];
//  dpm($area_def);
  drupal_set_title($area_def->energy);
  $output = entity_view('immoclient_energy', array($area_def));
//  dpm($output);
  return $output;
  
}
/**
 * Form definition for adding / editing a project.
 */
function immoclient_energy_form($form, &$form_state, $energy = NULL) {

  $form['epart'] = array(
    '#title' => t('Pass?'),
    '#type' => 'select',
    '#options' => array(0 => t('No'),1 => t('Yes')),
    '#default_value' => isset($energy->epart) ? $energy->epart : 0,
    '#required' => TRUE,
  );
  /*
  field_attach_form('immoclient_energy', $energy, $form, $form_state, NULL, array(
      array('field_name' => 'field_ausst_test'),
          )
      );
  field_attach_form('immofurnish', $furnish, $form, $form_state, NULL, array(
      array('field_name' => 'field_blubber_test'),
          )
      );*/
  
  $form['submit'] = array(
    '#type' => 'submit', 
    '#value' => isset($energy->id) ? t('Update project') : t('Save project'),
    '#weight' => 50,
  );

  return $form;
}
/**
 * Submit handler for the project add/edit form.
 */
function immoclient_energy_form_submit($form, &$form_state) {
  $project = entity_ui_form_submit_build_entity($form, $form_state);
  $project->save();
  drupal_set_message(t('The project: @name has been saved.', array('@name' => $project->name)));
  $form_state['redirect'] = 'admin/energy';
}
/**
 * EntityTest Views Controller class.
 */
class ImmoclientenergyDefaultViewsController extends EntityDefaultViewsController {
  /**
   * Edit or add extra fields to views_data().
   */
  public function views_data() {
    $data = parent::views_data();
//    dpm($data,'Views data');
    // Add your custom data here
    /*
    * Example: change the handler of a field
    * if the 'created' field is a unix timestamp in the database,
    * Entity API will set the handler to views_handler_field_numeric,
    * change this to the views date handler
    */
 //   $data['entity_test']['created']['field']['handler'] = 'views_handler_field_date';
    return $data;
  }
}
/**
 * Project entity class extending the Entity class
 */
class ImmoclientenergyEntity extends Entity {
  
  /**
   * Change the default URI from default/id to immoclient_energy/id
   */
  protected function defaultUri() {
    return array('path' => 'immoclient_energy/' . $this->identifier());
  }
  
}

function immoclient_energy_calc_ausweis($i){
  switch ($i){
    case 0:
      return t('Available');
    case 1:
      return t('Not yet available');
    }
    
}
function immoclient_energy_calc_basis($i){
  switch ($i){
      case '0':
        return t('none');
      case 'VERBRAUCH':
        return t('Consumption');
      case 'BEDARF':
        return t('Demand');
    }
    
}
/*
 * used to filter default values
 */
function default_values_energy($entity,$field_name){
  $field = field_get_items('immoclient_energy', $entity, $field_name, $langcode = NULL);
  if($field){
    foreach( $field as $key =>$value){
        foreach($value as $bla =>$blubb){
          $default []= $blubb;   
        }; 
    }; 
  return $default;
  }
return '';
  }
  
function immoclient_energy_calc_jg($i){
 switch ($i){
    case 'ohne':
        return t('none');
    case '2008':
        return t('2008');
    case '2014':
        return t('2014');
    case 'nicht_noetig':
        return t('not necessary');
        break;
    } 
  }
function immoclient_energy_calc_gb($i){
  switch ($i){
    case '0':
      return t('none');
    case 'wohn':
      return t('Habitation');
    case 'nichtwohn':
      return t('Non habitation');
  } 
}
  
  /**
 * Implements hook_entity_property_info().
 * for views integration and inline_entity_form
 */
function immoclient_energy_entity_property_info() {
 // dpm('hallo');
  $info = array();
  $info['immoclient_energy']['properties']['id'] = array(
    'label' => t('ID'),
    'type' => 'integer',
    'schema field' => 'id',
    'translatable' => TRUE,    
  );
  $info['immoclient_energy']['properties']['ausweis'] = array(
    'label' => t('Passport?'),
    'description' => t('Passport?'),
    'type' => 'boolean',
    'options list' => 'immoclient_energy_ausweis',
    'schema field' => 'ausweis',
    'translatable' => TRUE,    
  );
  $info['immoclient_energy']['properties']['epart'] = array(
    'label' => t('Calculation basis?'),
    'description' => t('Calculation basis?'),
    'type' => 'integer',
    'options list' => 'immoclient_energy_epart',
    'schema field' => 'epart',
    'translatable' => TRUE,    
  );
  $info['immoclient_energy']['properties']['gueltig_bis'] = array(
    'label' => t('Valid until'),
    'description' => t('Valid until'),
    'type' => 'date',
    'schema field' => 'gueltig_bis',
    'translatable' => TRUE,    
  );
  $info['immoclient_energy']['properties']['energieverbrauchkennwert'] = array(
    'label' => t('Parameter of energy consumption'),
    'description' => t('Parameter of energy consumption'),
    'type' => 'text',
    'schema field' => 'energieverbrauchkennwert',
    'translatable' => TRUE,    
  );
  $info['immoclient_energy']['properties']['mitwarmwasser'] = array(
    'label' => t('With warm water?'),
    'description' => t('With warm water?'),
    'type' => 'boolean',
    'schema field' => 'mitwarmwasser',
    'translatable' => TRUE,    
  );
  $info['immoclient_energy']['properties']['endenergiebedarf'] = array(
    'label' => t('Final energy demand'),
    'description' => t('Final energy demand'),
    'type' => 'text',
    'schema field' => 'endenergiebedarf',
    'translatable' => TRUE,    
  );
  $info['immoclient_energy']['properties']['stromwert'] = array(
    'label' => t('Current value'),
    'description' => t('Current value'),
    'type' => 'text',
    'schema field' => 'stromwert',
    'translatable' => TRUE,    
  );
  $info['immoclient_energy']['properties']['waermewert'] = array(
    'label' => t('Heating value'),
    'description' => t('Heating value'),
    'type' => 'text',
    'schema field' => 'waermewert',
    'translatable' => TRUE,    
  );
  $info['immoclient_energy']['properties']['wertklasse'] = array(
    'label' => t('Class'),
    'description' => t('Class'),
    'type' => 'text',
    'schema field' => 'wertklasse',
    'translatable' => TRUE,    
  );
/*  $info['immoclient_energy']['properties']['baujahr'] = array(
    'label' => t('Year of construction'),
    'description' => t('Year of construction'),
    'type' => 'text',
    'schema field' => 'baujahr',
    'translatable' => TRUE,    
  );*/
  $info['immoclient_energy']['properties']['ausstelldatum'] = array(
    'label' => t('Date of issue'),
    'description' => t('Date of issue'),
    'type' => 'date',
    'schema field' => 'ausstelldatum',
    'translatable' => TRUE,    
  );
  $info['immoclient_energy']['properties']['jahrgang'] = array(
    'label' => t('Year'),
    'description' => t('Year'),
    'type' => 'integer',
    'options list' => 'immoclient_energy_jahrgang',
    'schema field' => 'jahrgang',
    'translatable' => TRUE,    
  );
  $info['immoclient_energy']['properties']['gebaeudeart'] = array(
    'label' => t('Building type'),
    'description' => t('Building type'),
    'type' => 'integer',
    'options list' => 'immoclient_energy_geb',
    'schema field' => 'gebaeudeart',
    'translatable' => TRUE,    
  );
  $info['immoclient_energy']['properties']['hwbwert'] = array(
    'label' => t('Heating demand'),
    'description' => t('Heating demand'),
    'type' => 'text',
    'schema field' => 'hwbwert',
    'translatable' => TRUE,    
  );
  $info['immoclient_energy']['properties']['hwbklasse'] = array(
    'label' => t('Class of heating demand'),
    'description' => t('Class of heating demand'),
    'type' => 'text',
    'schema field' => 'hwbklasse',
    'translatable' => TRUE,    
  );
  $info['immoclient_energy']['properties']['fgeewert'] = array(
    'label' => t('Energy efficience factor'),
    'description' => t('Energy efficience factor'),
    'type' => 'text',
    'schema field' => 'fgeewert',
    'translatable' => TRUE,    
  );
  $info['immoclient_energy']['properties']['fgeeklasse'] = array(
    'label' => t('Class of energy efficience'),
    'description' => t('Class of energy efficiencee'),
    'type' => 'text',
    'schema field' => 'fgeeklasse',
    'translatable' => TRUE,    
  );
  
  return $info;
}

/**
 * gives the select list for "epart"
 */
function immoclient_energy_epart(){
    return array(
      '0'=>t('none'),
      'VERBRAUCH' => t('Consumption'),
      'BEDARF' =>t('Demand'),
      );
}

/**
 * gives the select list for "ausweis"
 */
function immoclient_energy_ausweis(){
    return array(
      0=>t('Available'),
      1 => t('Not yet available'));
}
/*
 * gives the select list of "jahrgang"
 */

function immoclient_energy_jahrgang(){
    return array(
      'ohne' => t('none'),
      '2008' => t('2008'),
      '2014' => t('2014'),
      'nicht_noetig' =>t('not necessary'));
}
/*
 * select list of "Gebäudeart"
 */
function immoclient_energy_geb(){
    return array (
      '0' => t('none'),
      'wohn' => t('Habitation'),
      'nichtwohn'=> t('Non habitation'));
}


function immoclient_energy_get_translation($value){
  switch ($value){
    case 'OEL':
      return t('Oil');
    case 'GAS':
      return t('Gas');
    case 'ELEKTRO':
      return t('Electric heating');
    case 'ALTERNATIV':
      return t('Alternative heating');
    case 'SOLAR':
      return t('Solar');
    case 'ERDWAERME':
      return t('Geothermal energy');
    case 'LUFTWP':
      return t('Geothermal heat pump');
    case 'FERN':
      return t('District heating');
    case 'BLOCK':
      return t('Heat-only boiler station');
    case 'WASSER-ELEKTRO':
      return t('Water - electro block heaters');
    case 'PELLET':
      return t('Pellet');
    case 'KOHLE':
      return t('Coal');
    case 'HOLZ':
      return t('Wood');
    case 'FLUESSIGGAS':
      return t('Liquid gas heating');
  }
}
