<?php
/**
 * Implements hook_entity_info().
 */
function immoclient_contact_entity_info() {
  
  $info = array();
  
  $info['immoclient_contact'] = array(
    'label' => t('Employees'),
    'base table' => 'immoclient_contact',
    'entity keys' => array(
      'id' => 'id',
    ),
    'entity class' => 'ImmoclientContactEntity',
    'controller class' => 'ImmoclientContactEntityController',
    'plural label' => t('Employee'),
    'access callback' => 'immoclient_customer_access_callback',
    'label callback' => 'immoclient_contact_label_callback',
    'uri callback' => 'entity_class_uri',
    'admin ui' => array(
      'path' => 'admin/contact',
      'file' => 'includes/immoclient_contact.admin.inc',
      'controller class' => 'ImmoclientContactUIController',
    ),
    'translation' => array(
        'entity_translation' => array(
          'base path' => 'admin/content/immo/contact/manage/%entity_object',
          'path wildcard' => '%entity_object',
        ),
      ),
    'fieldable' => TRUE,
    'bundles' => array(
      'immoclient_contact' => array(
        'label' => t('Contacts'),
        'admin' => array(
          'path' => 'admin/structure/immo/contact/manage',
        ),
      ),
    ),
    'views controller class' => 'ImmoclientContactViewsController',
    'module' => 'immoclient_contact',
  );
  
  return $info;
}

/**
 * Implements hook_menu()
 */
function immoclient_contact_menu() {
  $items = array();
  
  $items['contact/%'] = array(
    'title' => 'Contacts',
    'page callback' => 'immoclient_contact_view',
    'page arguments' => array(1),
    'access arguments' => array('view customer'),
  );
  $items['admin/structure/immo/contact'] = array(
    'title' => 'Contacts',
    'access arguments' => array('admin customer'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}


/**
 * Callback function for displaying the individual contact default page
 */
function immoclient_contact_view($id) {
  
  $contact = entity_load('immoclient_contact', array($id));
  $contact_def = $contact[$id];
  
  drupal_set_title(immoclient_contact_label_callback($contact,'immoclient_contact'));
  $output = entity_view('immoclient_contact', array($contact_def));
  
  return $output;
  
}

/**
 * Form definition for adding / editing a project.
 */
function immoclient_contact_form($form, &$form_state, $contact = NULL) {
  
  $form['adressfreigabe'] = array(
    '#title' => t('Show address?'),
    '#description' => t('Show the address of this contact in portals?'),
    '#type' => 'select',
    '#options' => array(
      0 => t('No'),
      1 => t('Yes')
  ),
    '#default_value' => isset($contact->adressfreigabe) ? $contact->adressfreigabe : 0,
    '#required' => TRUE,
    '#prefix' => "<div style=\"margin-right:5px; min-height:80px;\">",
    '#suffix' =>"</div>"
  );
  $form['anrede'] = array(
    '#title' => t('Salutation'),
    '#type' => 'select',
    '#options' => array(
      'Fr' => t('Mrs'),
      'Hr'=> t('Mr')
  ),
    '#default_value' => isset($contact->anrede) ? $contact->anrede : '',
    '#required' => TRUE,
    '#prefix' => "<div style=\"float:left;margin-right:5px; min-height:80px;\">",
    '#suffix' =>"</div>"
  );
  $form['anrede_brief'] = array(
    '#title' => t('Salutation letter'),
    '#type' => 'textfield',
    '#size' => 20,
    '#default_value' => isset($contact->anrede_brief) ? $contact->anrede_brief : '',
    '#required' => FALSE,
  );
    $form['firma'] = array(
    '#title' => t('Firma'),
    '#type' => 'textfield',
    '#size' => 40,
    '#default_value' => isset($contact->firma) ? $contact->firma : '',
    '#required' => FALSE,
  );
  $form['position'] = array(
    '#title' => 'Position',
    '#type' => 'textfield',
    '#size' => 20,
    '#default_value' => isset($contact->position) ? $contact->position : '',
    '#required' => FALSE,
  );
  $form['titel'] = array(
    '#title' => t('Title'),
    '#type' => 'textfield',
    '#size' => 20,
    '#default_value' => isset($contact->titel) ? $contact->titel : '',
    '#required' => FALSE,
    '#prefix' => "<div style=\"float:left;margin-right:5px; min-height:80px;\"class:clearfix:after;>",
    '#suffix' =>"</div>"
  );
  $form['vorname'] = array(
    '#title' => t('First name'),
    '#type' => 'textfield',
    '#size' => 20,
    '#default_value' => isset($contact->vorname) ? $contact->vorname : '',
    '#required' => FALSE,
    '#prefix' => "<div style=\"float:left;margin-right:5px; min-height:80px;\">",
    '#suffix' =>"</div>"
  );
  $form['name'] = array(
    '#title' => t('Name'),
    '#type' => 'textfield',
    '#size' => 20,
    '#default_value' => isset($contact->name) ? $contact->name : '',
    '#required' => TRUE,
    '#prefix' => "<div style=\"margin-right:5px; min-height:80px;\">",
    '#suffix' =>"</div>"
  );
  $form['strasse'] = array(
    '#title' => t('Street'),
    '#type' => 'textfield',
    '#size' => 40,
    '#default_value' => isset($contact->strasse) ? $contact->strasse : '',
    '#required' => FALSE,
    '#prefix' => "<div style=\"float:left;margin-right:5px; min-height:80px;\">",
    '#suffix' =>"</div>"
  );
  $form['hausnummer'] = array(
    '#title' => t('Street number'),
    '#type' => 'textfield',
    '#size' => 5,
    '#default_value' => isset($contact->hausnummer) ? $contact->hausnummer : '',
    '#required' => FALSE,
    '#prefix' => "<div style=\"margin-right:5px; min-height:80px;\"class:clearfix:both;>",
    '#suffix' =>"</div>"
  );
  $form['plz'] = array(
    '#title' => t('Postalcode'),
    '#type' => 'textfield',
    '#size' => 8,
    '#default_value' => isset($contact->plz) ? $contact->plz : '',
    '#required' => FALSE,
    '#prefix' => "<div style=\"float:left;margin-right:5px; min-height:80px;\">",
    '#suffix' =>"</div>"
  );
  $form['ort'] = array(
    '#title' => t('Town/City'),
    '#type' => 'textfield',
    '#size' => 30,
    '#default_value' => isset($contact->ort) ? $contact->ort : '',
    '#required' => FALSE,
    '#prefix' => "<div style=\"margin-right:5px; min-height:80px;\"class:clearfix:both;>",
    '#suffix' =>"</div>"
  );
  $form['postfach'] = array(
    '#title' => t('P.O.Box'),
    '#type' => 'textfield',
    '#size' => 15,
    '#default_value' => isset($contact->postfach) ? $contact->postfach : '',
    '#required' => FALSE,
    '#prefix' => "<div style=\"float:left; margin-right:5px; min-height:80px;\">",
    '#suffix' =>"</div>"
  );
  $form['postf_plz'] = array(
    '#title' => t('P.O.Box postalcode'),
    '#type' => 'textfield',
    '#size' => 8,
    '#default_value' => isset($contact->postf_plz) ? $contact->postf_plz : '',
    '#required' => FALSE,
    '#prefix' => "<div style=\"margin-right:5px; min-height:80px;\">",
    '#suffix' =>"</div>"
  );
  $form['land'] = array(
    '#title' => t('Country'),
    '#description' => t('3 characters please'),
    '#type' => 'textfield',
    '#size' => 8,
    '#default_value' => isset($contact->land) ? $contact->land : '',
    '#required' => FALSE,
  );
  $form['email_zentrale'] = array(
    '#title' => t('Email firm'),
    '#type' => 'textfield',
    '#size' => 30,
    '#default_value' => isset($contact->email_zentrale) ? $contact->email_zentrale : '',
    '#required' => FALSE,
    '#prefix' => "<div style=\"float:left;margin-right:5px; min-height:80px;\">",
    '#suffix' =>"</div>"
  );
  $form['email_direkt'] = array(
    '#title' => t('Email contact'),
    '#type' => 'textfield',
    '#size' => 30,
    '#default_value' => isset($contact->email_direkt) ? $contact->email_direkt : '',
    '#required' => FALSE,
    '#prefix' => "<div style=\"margin-right:5px; min-height:80px;\">",
    '#suffix' =>"</div>"
  );
  $form['tel_zentrale'] = array(
    '#title' => t('Telephone firm'),
    '#type' => 'textfield',
    '#size' => 30,
    '#default_value' => isset($contact->tel_zentrale) ? $contact->tel_zentrale : '',
    '#required' => FALSE,
    '#prefix' => "<div style=\"float:left;margin-right:5px; min-height:80px;\">",
    '#suffix' =>"</div>"
  );
  $form['tel_durchw'] = array(
    '#title' => t('Telephone contact'),
    '#type' => 'textfield',
    '#size' => 30,
    '#default_value' => isset($contact->tel_durchw) ? $contact->tel_durchw : '',
    '#required' => FALSE,
    '#prefix' => "<div style=\"margin-right:5px; min-height:80px;\">",
    '#suffix' =>"</div>"
  );
  $form['tel_fax'] = array(
    '#title' => t('Fax'),
    '#type' => 'textfield',
    '#size' => 30,
    '#default_value' => isset($contact->tel_fax) ? $contact->tel_fax : '',
    '#required' => FALSE,
    '#prefix' => "<div style=\"float:left;margin-right:5px; min-height:80px;\">",
    '#suffix' =>"</div>"
  );
  $form['tel_handy'] = array(
    '#title' => t('Smartphone'),
    '#type' => 'textfield',
    '#size' => 30,
    '#default_value' => isset($contact->tel_handy) ? $contact->tel_handy : '',
    '#required' => FALSE,
    '#prefix' => "<div style=\"margin-right:5px; min-height:80px;\">",
    '#suffix' =>"</div>"
  );
  $form['personennummer'] = array(
    '#title' => t('ID in Austria'),
    '#type' => 'textfield',
    '#size' => 30,
    '#default_value' => isset($contact->personennummer) ? $contact->personennummer : '',
    '#required' => FALSE,
    '#prefix' => "<div style=\"float:left;margin-right:5px; min-height:80px;\">",
    '#suffix' =>"</div>"
  );
  $form['immobilientreuhaenderid'] = array(
    '#title' => t('Immobilientreuhaenderid'),
    '#type' => 'textfield',
    '#size' => 30,
    '#default_value' => isset($contact->immobilientreuhaenderid) ? $contact->immobilientreuhaenderid : '',
    '#required' => FALSE,
    '#prefix' => "<div style=\"margin-right:5px; min-height:80px;\">",
    '#suffix' =>"</div>"
  );
  
  $form['submit'] = array(
    '#type' => 'submit', 
    '#value' => isset($contact->id) ? t('Update contact') : t('Save contact'),
    '#weight' => 50,
  );

  return $form;
}

/**
 * Submit handler for the project add/edit form.
 */
function immoclient_contact_form_submit($form, &$form_state) {
  $contact = entity_ui_form_submit_build_entity($form, $form_state);
  $contact->save();
  drupal_set_message(t('The employee: @name has been saved.', array('@name' => $contact->name)));
  $form_state['redirect'] = 'admin/contact';
}


/**
 * Implements hook_entity_property_info().
 * for views integration and inline_entity_form
 */
function immoclient_contact_entity_property_info() {
  
  $info = array(); 
 
 $info['immoclient_contact']['properties']['id'] = array(
    'label' => t('Primary key of the contact'),
    'description' => t('Primary key of the contact.'),
    'type' => 'integer',
    'schema field' => 'id',
    'translatable' => FALSE, 
  );

  $info['immoclient_contact']['properties']['name'] = array(
    'label' => t('Name'),
    'description' => t('Name'),
    'type' => 'text',
    'schema field' => 'name',
    'translatable' => FALSE, 
  );
  $info['immoclient_contact']['properties']['vorname'] = array(
    'label' => t('First name'),
    'description' => t('First name'),
    'type' => 'text',
    'schema field' => 'vorname',
    'translatable' => FALSE, 
    
  );
  $info['immoclient_contact']['properties']['titel'] = array(
    'label' => t('Title'),
    'description' => t('Title'),
    'type' => 'text', 
    'translatable'=> TRUE,
    'schema field' => 'titel',
  );
   $info['immoclient_contact']['properties']['anrede'] = array(
    'label' => t('Salutation'),
    'description' => t('Salutation'),
    'type' => 'text',
    'schema field' => 'anrede',
    'translatable' => TRUE, 
  );
   $info['immoclient_contact']['properties']['position'] = array(
    'label' => t('Role'),
    'description' => t('Role'),
    'type' => 'text',
    'schema field' => 'position',
    'translatable' => TRUE, 
  );
    $info['immoclient_contact']['properties']['anrede_brief'] = array(
    'label' => t('Salutation letter'),
    'description' => t('Salutation letter'),
    'type' => 'text',
    'schema field' => 'anrede_brief',
    'translatable' => TRUE, 
  );
     $info['immoclient_contact']['properties']['firma'] = array(
    'label' => t('Firm'),
    'description' => t('Firm'),
    'type' => 'text',
    'schema field' => 'firma',
    'translatable' => TRUE, 
  );
     $info['immoclient_contact']['properties']['strasse'] = array(
    'label' => t('Street'),
    'description' => t('Street'),
    'type' => 'text',
    'schema field' => 'strasse',
    'translatable' => TRUE, 
  );
     $info['immoclient_contact']['properties']['hausnummer'] = array(
    'label' => t('Street number'),
    'description' => t('Street number'),
    'type' => 'text',
    'schema field' => 'hausnummer',
    'translatable' => TRUE, 
  );
     $info['immoclient_contact']['properties']['plz'] = array(
    'label' => t('Postal code'),
    'description' => t('Postal code'),
    'type' => 'text',
    'schema field' => 'plz',
    'translatable' => TRUE, 
  );
     $info['immoclient_contact']['properties']['ort'] = array(
    'label' => t('City'),
    'description' => t('City'),
    'type' => 'text',
    'schema field' => 'ort',
    'translatable' => TRUE, 
  );
   $info['immoclient_contact']['properties']['postfach'] = array(
    'label' => t('P.O. Box'),
    'description' => t('P.O. Box'),
    'type' => 'text',
    'schema field' => 'postfach',
    'translatable' => TRUE, 
  );
   $info['immoclient_contact']['properties']['postf_plz'] = array(
    'label' => t('P.O. Box'),
    'description' => t('P.O. Box'),
    'type' => 'boolean',
    'schema field' => 'postf_plz',
    'translatable' => TRUE, 
  );
   $info['immoclient_contact']['properties']['land'] = array(
    'label' => t('Country'),
    'description' => t('Country'),
    'type' => 'text',
    'schema field' => 'land',
    'translatable' => TRUE, 
  );
   $info['immoclient_contact']['properties']['adressfreigabe'] = array(
    'label' => t('Show address'),
    'description' => t('Show address'),
    'type' => 'boolean',
    'schema field' => 'adressfreigabe',
    'translatable' => TRUE, 
  );
   $info['immoclient_contact']['properties']['email_zentrale'] = array(
    'label' => t('Email firm'),
    'description' => t('Email firm'),
    'type' => 'text',
    'schema field' => 'email_zentrale',
    'translatable' => TRUE, 
  );
   $info['immoclient_contact']['properties']['email_direkt'] = array(
    'label' => t('Email contact'),
    'description' => t('Email contact'),
    'type' => 'text',
    'schema field' => 'email_direkt',
  );
   $info['immoclient_contact']['properties']['tel_zentrale'] = array(
    'label' => t('Telefon firm'),
    'description' => t('Telefon firm'),
    'type' => 'text',
    'schema field' => 'tel_zentrale',
    'translatable' => TRUE, 
  );
    $info['immoclient_contact']['properties']['tel_durchw'] = array(
    'label' => t('Telefon Contact'),
    'description' => t('Telefon Contact'),
    'type' => 'text',
    'schema field' => 'tel_durchw',
    'translatable' => TRUE, 
  );
    $info['immoclient_contact']['properties']['tel_fax'] = array(
    'label' => t('Fax'),
    'description' => t('Fax'),
    'type' => 'text',
    'schema field' => 'tel_fax',
    'translatable' => TRUE, 
  );
    $info['immoclient_contact']['properties']['tel_handy'] = array(
    'label' => t('Nr. Smartphone'),
    'description' => t('Smartphone'),
    'type' => 'text',
    'schema field' => 'tel_handy',
    'translatable' => TRUE, 
  );
    $info['immoclient_contact']['properties']['personennummer'] = array(
    'label' => t('Personal nbr in Austria'),
    'description' => t('Personal nbr in Austria'),
    'type' => 'text',
    'schema field' => 'personennummer',
    'translatable' => TRUE, 
  );
    $info['immoclient_contact']['properties']['immobilientreuhaenderid'] = array(
    'label' => t('Immobilientreuhaenderid'),
    'description' => t('Immobilientreuhaenderid'),
    'type' => 'text',
    'schema field' => 'immobilientreuhaenderid',
    'translatable' => TRUE, 
  );
  return $info;
}


/**
 * Project entity class extending the Entity class
 */
class ImmoclientContactEntity extends Entity {
  
  /**
   * Change the default URI from default/id to project/id
   */
  protected function defaultUri() {
    return array('path' => 'contact/' . $this->identifier());
  }
  
}

/**
 * EntityTest Views Controller class.
 */
class ImmoclientContactViewsController extends EntityDefaultViewsController {
  /**
   * Edit or add extra fields to views_data().
   */
  public function views_data() {
    $data = parent::views_data();
    return $data;
  }
}

function immoclient_contact_bool($i){
  switch ($i) {
    case 0:
        return t('No');
        break;
    case 1:
        return t('Yes');
        break;
  }
}

function immoclient_contact_bool_anrede($i){
  switch ($i) {
    case 0:
        return t('Mrs');
        break;
    case 1:
        return t('Mr');
        break;
  }
}

function immoclient_contact_label_callback($contact, $type) {
  if(is_array($contact)){
    foreach ($contact as $value) {
      $contact = $value;
    }
  }
  if(!isset($contact->is_new)){
    if (!empty($contact->name) && !empty ($contact->vorname)){ 
      return $contact->name.', '.$contact->vorname;
    }
    elseif(empty ($contact->vorname)){
      return $contact->name;
    }
    else{
      return $contact->id;//t('No name');
     }
  }
}

/**
 * Loads all entities from ID list.
 *
 * @param array $ids
 *   The list of entity IDs to be loaded.
 * @param array $conditions
 *   Conditions by which entities can be filtered.
 * @param bool $reset
 *   True to load uncached entities.
 */
function immoclient_contact_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('immoclient_contact', $ids, $conditions, $reset);
}