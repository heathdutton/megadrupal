<?php
/**
 * Implements hook_entity_info().
 */
function immoclient_furnishing_entity_info() {
  
  $info = array();
  
  $info['immofurnish'] = array(
    'label' => t('Immo Furnishing'),
    'base table' => 'immoclient_furnish',
    'entity keys' => array(
      'id' => 'id',
    ),
    'entity class' => 'ImmoclientfurnishEntity',
    'controller class' => 'ImmoclientfurnishEntityController',
    'plural label' => t('Furnishing'),
    'access callback' => 'immoclient_price_access_callback',
    'uri callback' => 'entity_class_uri',
    'admin ui' => array(
      'path' => 'admin/content/furnish',
      'controller class' => 'EntityDefaultUIController',
    ),
    'translation' => array(
        'entity_translation' => array(
          'base path' => 'admin/content/furnish/manage/%entity_object',
          'path wildcard' => '%entity_object',
        ),
      ),
    'fieldable' => TRUE, 
    'bundles' => array(
      'immofurnish' => array(
        'label' => t('Immo furnishing'),
        'admin' => array(
          'path' => 'admin/structure/immo/furnish/manage',
        ),
      ),
    ),
    'inline entity form' => array(
        'controller' => 'ImmoclientfurnishInlineEntityFormController',
    ),
    'views controller class' => 'ImmoclientfurnishDefaultViewsController',
    'module' => 'immoclient_furnishing',
  );
  
  return $info;
}

/**
 * Implements hook_menu()
 */
function immoclient_furnishing_menu() {
  $items = array(); 
  $items['immofurnish/%'] = array(
    'title' => 'Immo furnishing',
    'page callback' => 'immoclient_furnishing_view',
    'page arguments' => array(1),
    'access arguments' => array('view price'),
  );
  $items['admin/structure/immo/furnish'] = array(
    'title' => 'Immo furnishing',
    'access arguments' => array('admin price'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Callback function for displaying the individual price default page
 */
function immoclient_furnishing_view($id) {
  
  $area = entity_load('immofurnish', array($id));
  $area_def = $area[$id];
  drupal_set_title($area_def->furnish);
  $output = entity_view('immofurnish', array($area_def));
  return $output;
  
}
/**
 * Form definition for adding / editing a project.
 */
function immoclient_furnishing_form($form, &$form_state, $furnish = NULL) {

  $form['raeume_veraenderbar'] = array(
    '#title' => t('Changeable rooms?'),
    '#type' => 'select',
    '#options' => array(0 => t('No'),1 => t('Yes')),
    '#default_value' => isset($furnish->raeume_veraenderbar) ? $furnish->raeume_veraenderbar : '',
    '#required' => TRUE,
  );
  
  $form['submit'] = array(
    '#type' => 'submit', 
    '#value' => isset($furnish->id) ? t('Update project') : t('Save project'),
    '#weight' => 50,
  );

  return $form;
}
/**
 * Submit handler for the project add/edit form.
 */
function immoclient_furnishing_form_submit($form, &$form_state) {
  $project = entity_ui_form_submit_build_entity($form, $form_state);
  $project->save();
  drupal_set_message(t('The project: @name has been saved.', array('@name' => $project->name)));
  $form_state['redirect'] = 'admin/furnish';
}

/**
 * EntityTest Views Controller class.
 */
class ImmoclientfurnishDefaultViewsController extends EntityDefaultViewsController {
  /**
   * Edit or add extra fields to views_data().
   */
  public function views_data() {
    $data = parent::views_data();
    return $data;
  }
}

/**
 * Project entity class extending the Entity class
 */
class ImmoclientfurnishEntity extends Entity {
  
  /**
   * Change the default URI from default/id to immofurnish/id
   */
  protected function defaultUri() {
    return array('path' => 'immofurnish/' . $this->identifier());
  }
  
}

/*
 * used to filter default values
 */
function immoclient_furnishing_default_values($entity,$field_name){
  $field = field_get_items('immofurnish', $entity, $field_name, $langcode = NULL);
  if($field){
  foreach( $field as $key =>$value){
      foreach($value as $bla =>$blubb){
       $default []= $blubb;   
      }; 
  }; 
  return $default;
  }
  return '';
}
  
/**
 * Return category
 */
function immoclient_furnishing_category($i){
  switch ($i){
    case 'none':
      return t('none');
    case 'STANDARD':
        return t('Standard');
    case 'GEHOBEN':
        return t('Upmarket');
    case 'LUXUS':
        return t('Luxury');
  }
}

/**
 * Implements hook_entity_property_info().
 * for views integration and inline_entity_form
 */
function immoclient_furnishing_entity_property_info() {
  
  $info = array();
  $info['immofurnish']['properties']['ausstatt_kategorie'] = array(
    'label' => t('Category?'),
    'description' => t('Which Category?'),
    'type' => 'integer',
    'options list' => 'immoclient_furnishing_kategorie_options_list',
    'schema field' => 'ausstatt_kategorie',
    'translatable' => TRUE,    
  );
  $info['immofurnish']['properties']['raeume_veraenderbar'] = array(
    'label' => t('Rooms changeable?'),
    'description' => t('Rooms changeable?'),
    'type' => 'boolean',
    'schema field' => 'raeume_veraenderbar',
    'translatable' => TRUE,    
  );
  $info['immofurnish']['properties']['wg_geeignet'] = array(
    'label' => t('Flatshare possible?'),
    'description' => t('Rooms changeable?'),
    'type' => 'boolean',
    'schema field' => 'wg_geeignet',
    'translatable' => TRUE,    
  );
  $info['immofurnish']['properties']['rollstuhlgerecht'] = array(
    'label' => t('Handicapped accessible?'),
    'description' => t('Handicapped accessible?'),
    'type' => 'boolean',
    'schema field' => 'rollstuhlgerecht',
    'translatable' => TRUE,    
  );
  $info['immofurnish']['properties']['barrierefrei'] = array(
    'label' => t('Barrier-free?'),
    'description' => t('Barrier-free?'),
    'type' => 'boolean',
    'schema field' => 'barrierefrei',
    'translatable' => TRUE,    
  );
  $info['immofurnish']['properties']['kabel_sat_tv'] = array(
    'label' => t('Cable-SAT-TV available?'),
    'description' => t('Cable-SAT-TV available?'),
    'type' => 'boolean',
    'schema field' => 'kabel_sat_tv',
    'translatable' => TRUE,    
  );
  $info['immofurnish']['properties']['dvbt'] = array(
    'label' => t('DVBT available?'),
    'description' => t('DVBT available?'),
    'type' => 'boolean',
    'schema field' => 'dvbt',
    'translatable' => TRUE,    
  );
  $info['immofurnish']['properties']['sauna'] = array(
    'label' => t('Sauna?'),
    'description' => t('Sauna?'),
    'type' => 'boolean',
    'schema field' => 'sauna',
    'translatable' => TRUE,    
  );
  $info['immofurnish']['properties']['swimmingpool'] = array(
    'label' => t('Swimmingpool?'),
    'description' => t('Swimmingpool?'),
    'type' => 'boolean',
    'schema field' => 'swimmingpool',
    'translatable' => TRUE,    
  );
  $info['immofurnish']['properties']['kamin'] = array(
    'label' => t('Chimney?'),
    'description' => t('Chimney?'),
    'type' => 'boolean',
    'schema field' => 'kamin',
    'translatable' => TRUE,    
  );
  $info['immofurnish']['properties']['klimatisiert'] = array(
    'label' => t('Air conditioned?'),
    'description' => t('Air conditioned?'),
    'type' => 'boolean',
    'schema field' => 'klimatisiert',
    'translatable' => TRUE,    
  );
  $info['immofurnish']['properties']['wasch_trockenraum'] = array(
    'label' => t('Laundry room?'),
    'description' => t('Laundry room?'),
    'type' => 'boolean',
    'schema field' => 'wasch_trockenraum',
    'translatable' => TRUE,    
  );
  $info['immofurnish']['properties']['wintergarten'] = array(
    'label' => t('Winter garden?'),
    'description' => t('Winter garden?'),
    'type' => 'boolean',
    'schema field' => 'wintergarten',
    'translatable' => TRUE,    
  );
  $info['immofurnish']['properties']['gartennutzung'] = array(
    'label' => t('Garden sharing?'),
    'description' => t('Garden sharing?'),
    'type' => 'boolean',
    'schema field' => 'gartennutzung',
    'translatable' => TRUE,    
  );
  $info['immofurnish']['properties']['dv_verkabelung'] = array(
    'label' => t('DV-wiring?'),
    'description' => t('DV-wiring?'),
    'type' => 'boolean',
    'schema field' => 'dv_verkabelung',
    'translatable' => TRUE,    
  );
  $info['immofurnish']['properties']['rampe'] = array(
    'label' => t('Ramp?'),
    'description' => t('Ramp?'),
    'type' => 'boolean',
    'schema field' => 'rampe',
    'translatable' => TRUE,    
  );
  $info['immofurnish']['properties']['hebebuehne'] = array(
    'label' => t('Hydraulic lift?'),
    'description' => t('Hydraulic lift?'),
    'type' => 'boolean',
    'schema field' => 'hebebuehne',
    'translatable' => TRUE,    
  );
  $info['immofurnish']['properties']['kran'] = array(
    'label' => t('Crane?'),
    'description' => t('Crane?'),
    'type' => 'boolean',
    'schema field' => 'kran',
    'translatable' => TRUE,    
  );
  $info['immofurnish']['properties']['gastterrasse'] = array(
    'label' => t('Patio for guests?'),
    'description' => t('Patio for guests?'),
    'type' => 'boolean',
    'schema field' => 'gastterrasse',
    'translatable' => TRUE,    
  );
  $info['immofurnish']['properties']['stromanschlusswert'] = array(
    'label' => t('Power connection value'),
    'description' => t('Power connection value'),
    'type' => 'decimal',
    'schema field' => 'stromanschlusswert',
    'translatable' => TRUE,    
  );
   $info['immofurnish']['properties']['kantine_cafeteria'] = array(
    'label' => t('Canteen - Cafeteria?'),
    'description' => t('Canteen - Cafeteria?'),
    'type' => 'boolean',
    'schema field' => 'kantine_cafeteria',
    'translatable' => TRUE,    
  );
   $info['immofurnish']['properties']['teekueche'] = array(
    'label' => t('Tea kitchen?'),
    'description' => t('Tea kitchen?'),
    'type' => 'boolean',
    'schema field' => 'teekueche',
    'translatable' => TRUE,    
  );
   $info['immofurnish']['properties']['hallenhoehe'] = array(
    'label' => t('Hall height'),
    'description' => t('Hall height'),
    'type' => 'decimal',
    'schema field' => 'hallenhoehe',
    'translatable' => TRUE,    
  );
   $info['immofurnish']['properties']['brauereibindung'] = array(
    'label' => t('Commitment to brewery?'),
    'description' => t('Commitment to brewery?'),
    'type' => 'boolean',
    'schema field' => 'brauereibindung',
    'translatable' => TRUE,    
  );
   $info['immofurnish']['properties']['sporteinrichtungen'] = array(
    'label' => t('Sport facilities?'),
    'description' => t('Sport facilities?'),
    'type' => 'boolean',
    'schema field' => 'sporteinrichtungen',
    'translatable' => TRUE,    
  );
   $info['immofurnish']['properties']['telefon_ferienimmobilie'] = array(
    'label' => t('Telephone at holiday object?'),
    'description' => t('Telephone at holiday object?'),
    'type' => 'boolean',
    'schema field' => 'telefon_ferienimmobilie',
    'translatable' => TRUE,    
  );
  $info['immofurnish']['properties']['wellnessbereich'] = array(
    'label' => t('Wellness area'),
    'description' => t('Wellness area available?'),
    'type' => 'boolean',
    'schema field' => 'wellnessbereich',
    'translatable' => TRUE,    
  );
  $info['immofurnish']['properties']['breitband_zugang'] = array(
    'label' => t('Broadband access?'),
    'description' => t('Broadband access?'),
    'type' => 'boolean',
    'schema field' => 'breitband_zugang',
    'translatable' => TRUE,    
  );
  $info['immofurnish']['properties']['art'] = array(
    'label' => t('Kind of broadband access'),
    'description' => t('Which kind of broadband access'),
    'type' => 'text',
    'schema field' => 'art',
    'translatable' => TRUE,    
  );
  $info['immofurnish']['properties']['speed'] = array(
    'label' => t('Speed of broadband access'),
    'description' => t('Speed of broadband access'),
    'type' => 'text',
    'schema field' => 'speed',
    'translatable' => TRUE,    
  );
  $info['immofurnish']['properties']['umts_empfang'] = array(
    'label' => t('UMTS access?'),
    'description' => t('UMTS access?'),
    'type' => 'boolean',
    'schema field' => 'umts_empfang',
    'translatable' => TRUE,    
  );
  $info['immofurnish']['properties']['unterkellert'] = array(
    'label' => t('Build with a cellar?'),
    'description' => t('Build with a cellar?'),
    'type' => 'boolean',
    'schema field' => 'unterkellert',
    'translatable' => TRUE,    
  );
  $info['immofurnish']['properties']['abstellraum'] = array(
    'label' => t('Store room?'),
    'description' => t('Store room?'),
    'type' => 'boolean',
    'schema field' => 'abstellraum',
    'translatable' => TRUE,    
  );
  $info['immofurnish']['properties']['fahrradraum'] = array(
    'label' => t('Bike room?'),
    'description' => t('Bike room?'),
    'type' => 'boolean',
    'schema field' => 'fahrradraum',
    'translatable' => TRUE,    
  );
  $info['immofurnish']['properties']['rolladen'] = array(
    'label' => t('Shutter?'),
    'description' => t('Shutter?'),
    'type' => 'boolean',
    'schema field' => 'rolladen',
    'translatable' => TRUE,    
  );
  $info['immofurnish']['properties']['bibliothek'] = array(
    'label' => t('Library?'),
    'description' => t('Library?'),
    'type' => 'boolean',
    'schema field' => 'bibliothek',
    'translatable' => TRUE,    
  );
  $info['immofurnish']['properties']['dachboden'] = array(
  'label' => t('Attic?'),
    'description' => t('Attic?'),
    'type' => 'boolean',
    'schema field' => 'dachboden',
    'translatable' => TRUE,    
  );
  $info['immofurnish']['properties']['gaestewc'] = array(
    'label' => t('Guest toilet?'),
    'description' => t('Guest toilet?'),
    'type' => 'boolean',
    'schema field' => 'gaestewc',
    'translatable' => TRUE,    
  );
  $info['immofurnish']['properties']['kabelkanaele'] = array(
    'label' => t('Cable duct?'),
    'description' => t('Cable duct?'),
    'type' => 'boolean',
    'schema field' => 'kabelkanaele',
    'translatable' => TRUE,    
  );
  $info['immofurnish']['properties']['seniorengerecht'] = array(
    'label' => t('For elderly?'),
    'description' => t('Geared towards the elderly?'),
    'type' => 'boolean',
    'schema field' => 'seniorengerecht',
    'translatable' => TRUE,    
  );
  return $info;
}

function immoclient_furnishing_kategorie_options_list(){
    return array(
        'none' => t('none'),
        'STANDARD'=> t('Standard'), 
        'GEHOBEN' => t('Upmarket'), 
        'LUXUS' =>t('Luxury')
    );
}

function immoclient_furnishing_bool($i){
    switch ($i){
        case 0:
            return t('No');
            break;
        case 1:
            return t('Yes');
            break;
        case 2:
            return t('Partially');
            break;
    }
}

function immoclient_furnishing_moeb($i){
  switch ($i){
    case 'none':
      return t('none');
    case 'TEIL':
      return t('Partial');
    case 'VOLL':
      return t('Complete');
  }
}

/*
 * I can't find the value, so here in plain php
 */
function immoclient_furnishing_get_translation($value){
  switch ($value){
    case 'EBK':
      return t('Built-in kitchen');
    case 'OFFEN':
      return t('Open');
    case 'PANTRY':
      return t('Kitchenette');
    case 'ALARMANLAGE':
      return t('Alarm system');
    case 'KAMERA':
      return t('Camera');
    case 'POLIZEIRUF':
      return t('Police call');
    case 'BETREUTES_WOHNEN':
      return t('Assisted living');
    case 'CATERING':
      return t('Catering');
    case 'REINIGUNG':
      return t('Cleaning');
    case 'EINKAUF':
      return t('Purchasing');
    case 'WACHDIENST':
      return t('Guard services');
    case 'HOTELRESTAURANT':
      return t('Hotel restaurant');
    case 'BAR':
      return t('Bar');
    case 'NORD':
      return t('North');
    case 'OST':
      return t('East');
    case 'SUED':
      return t('South');
    case 'WEST':
      return t('West');
    case 'NORDOST':
      return t('Northeast');
    case 'NORDWEST':
      return t('Northwest');
    case 'SUEDOST':
      return t('Southeast');
    case 'SUEDWEST':
      return t('Southwest');
    case 'OEL':
      return t('Oil');
    case 'GAS':
      return t('Gas');
    case 'ELEKTRO':
      return t('Electric heating');
    case 'ALTERNATIV':
      return t('Alternative heating');
    case 'SOLAR':
      return t('Solar');
    case 'ERDWAERME':
      return t('Geothermal energy');
    case 'LUFTWP':
      return t('Geothermal heat pump');
    case 'FERN':
      return t('District heating');
    case 'BLOCK':
      return t('Heat-only boiler station');
    case 'WASSER-ELEKTRO':
      return t('Water - electro block heaters');
    case 'PELLET':
      return t('Pellet');
    case 'KOHLE':
      return t('Coal');
    case 'HOLZ':
      return t('Wood');
    case 'FLUESSIGGAS':
      return t('Liquid gas heating');
    case 'FLIESEN':
      return t('Tiles');
    case 'STEIN':
      return t('Stone');
    case 'TEPPICH':
      return t('Carpet');
    case 'PARKETT':
      return t('Parquet');
    case 'FERTIGPARKETT':
      return t('Ready-to-lay parquet');
    case 'LAMINAT':
      return t('Laminate');
    case 'DIELEN':
      return t('Planks');
    case 'KUNSTSTOFF':
      return t('Synthetic');
    case 'ESTRICH':
      return t('Screed');
    case 'DOPPELBODEN':
      return t('Double floor');
    case 'LINOLEUM':
      return t('Linoleum');
    case 'MARMOR':
      return t('Marble');
    case 'TERRAKOTTA':
      return t('Terracotta');
    case 'GRANIT':
      return t('Granite');
    case 'PERSONEN':
      return t('Person lift');
    case 'LASTEN':
      return t('Freight elevator');
    case 'OFEN':
      return t('Furnace');
    case 'ETAGE':
      return t('Self-contained central heating');
    case 'ZENTRAL':
      return t('Central heating');
    case 'FERN':
      return t('District heating');
    case 'FUSSBODEN':
      return t('Underfloor heating');
    case 'DUSCHE':
      return t('Shower');
    case 'WANNE':
      return t('Bathtub');
    case 'FENSTER':
      return t('Window');
    case 'BIDET':
      return t('Bidet');
    case 'PISSOIR':
      return t('Urinal');      
  }
}
