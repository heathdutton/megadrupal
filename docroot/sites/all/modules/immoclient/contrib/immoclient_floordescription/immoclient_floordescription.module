<?php

/**
 * Implements hook_entity_info().
 */
function immoclient_floordescription_entity_info() {
  
  $info = array();
  
  $info['immoclient_floordescription'] = array(
    'label' => t('Immo floordescription text'),
    'base table' => 'immoclient_floordescription',
    'entity keys' => array(
      'id' => 'id',
      'label' => 'geschoss',
    ),
    'entity class' => 'ImmoclientfloordescriptionEntity',
    'controller class' => 'ImmoclientFloordescriptionEntityController',
    'plural label' => t('Floor descriptions'),
    'access callback' => 'immoclient_price_access_callback',
    'uri callback' => 'entity_class_uri',
    'admin ui' => array(
      'path' => 'admin/content/immo/floordescription',
      'controller class' => 'EntityDefaultUIController',
    ),
    'translation' => array(
        'entity_translation' => array(
          'base path' => 'admin/content/immo/floordescription/manage/%entity_object',
          'path wildcard' => '%entity_object',
        ),
      ),
    'fieldable' => TRUE, 
    'bundles' => array(
      'immoclient_floordescription' => array(
        'label' => t('Floor - Floor description'),
        'admin' => array(
          'path' => 'admin/structure/immo/floordescription/manage',
        ),
      ),
    ),
    'inline entity form' => array(
        'controller' => 'ImmoclientFloordescriptionInlineEntityFormController',
    ),
    'views controller class' => 'ImmoclientfloordescriptionDefaultViewsController',
    'module' => 'immoclient_floordescription',
  );
  
  return $info;
}
/**
 * Implements hook_menu()
 */
function immoclient_floordescription_menu() {
  $items = array();
  
  $items['immoclient_floordescription/%'] = array(
    'title' => 'Floordescription',
    'page callback' => 'immoclient_floordescription_view_area',
    'page arguments' => array(1),
    'access arguments' => array('view price'),
  );
  $items['admin/structure/immo/floordescription'] = array(
    'title' => 'Floordescription',
    'access arguments' => array('admin price'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}
/**
 * Callback function for displaying the individual price default page
 */
function immoclient_floordescription_view_area($id) {
  
  $area = entity_load('immoclient_floordescription', array($id));
  $area_def = $area[$id];
  drupal_set_title($area_def->floordescription);
  $output = entity_view('immoclient_floordescription', array($area_def));
//  dpm($output);
  return $output;
  
}
/**
 * Form definition for adding / editing a project.
 */
function immoclient_floordescription_form($form, &$form_state) {

  $form['geschoss'] = array(
    '#title' => t('Floor'),
    '#type' => 'select',
    '#options' => array(
      'BASEMENT'=>t('BASEMENT'),
      'FIRST_FLOOR' => t('FIRST FLOOR'), 
      'SECOND_FLOOR' =>t('SECOND FLOOR'),
      'THIRD_FLOOR' => t('THIRD FLOOR'),
      'FOURTH_FLOOR' => t('FOURTH FLOOR'),
      'SIXTH_FLOOR' => t('SIXTH FLOOR'),
      'SEVENTH_FLOOR' => t('SEVENTH FLOOR'),
      'EIGHTTH_FLOOR' => t('EIGHTTH FLOOR'),
      'NINTH_FLOOR' => t('NINTH FLOOR'),
      'ATTIC' => t('ATTIC')
      ),
    '#default_value' => isset($floordescription->epart) ? $floordescription->epart : '',
    '#required' => TRUE,
  );
  
  $entity_form ['floordescription'] = array(
    '#title' => t('Description'),
    '#type' => 'textfield',
    '#default_value' => isset($entity->floordescription) ? $entity->floordescription : '',
    '#required' => TRUE,
    '#prefix' => '<div style="clear:left; padding: 0 15px;min-height:100px;">',
    '#suffix' =>'</div>'
    );

  
  $form['submit'] = array(
    '#type' => 'submit', 
    '#value' => isset($floordescription->id) ? t('Update project') : t('Save project'),
    '#weight' => 50,
  );

  return $form;
}
/**
 * Submit handler for the project add/edit form.
 */
function immoclient_floordescription_form_submit($form, &$form_state) {
  $project = entity_ui_form_submit_build_entity($form, $form_state);
  $project->save();
  drupal_set_message(t('The project: @name has been saved.', array('@name' => $floordescription->geschoss)));
  $form_state['redirect'] = 'admin/floordescription';
}
/**
 * EntityTest Views Controller class.
 */
class ImmoclientfloordescriptionDefaultViewsController extends EntityDefaultViewsController {
  /**
   * Edit or add extra fields to views_data().
   */
  public function views_data() {
    $data = parent::views_data();

    return $data;
  }
}
/**
 * Project entity class extending the Entity class
 */
class ImmoclientfloordescriptionEntity extends Entity {
  
  /**
   * Change the default URI from default/id to immoclient_floordescription/id
   */
  protected function defaultUri() {
    return array('path' => 'immoclient_floordescription/' . $this->identifier());
  }
  
}

  
  /**
 * Implements hook_entity_property_info().
 * for views integration and inline_entity_form
 */
function immoclient_floordescription_entity_property_info() {
  $info = array();
  $info['immoclient_floordescription']['properties']['id'] = array(
    'label' => t('ID'),
    'description' => t('ID'),
    'type' => 'integer',
    'schema field' => 'id',
    'translatable' => TRUE,    
  );
  $info['immoclient_floordescription']['properties']['geschoss'] = array(
    'label' => t('Floor'),
    'description' => t('Floor'),
    'type' => 'integer',
    'options list' => 'immoclient_floordescription_geschoss',
    'schema field' => 'geschoss',
    'translatable' => TRUE,    
  );
  $info['immoclient_floordescription']['properties']['ausstattung'] = array(
    'label' => t('Furnishing'),
    'description' => t('Furnishing'),
    'type' => 'text',
    'schema field' => 'ausstattung',
    'translatable' => TRUE,    
  );
 
  return $info;
}

/**
 * gives the select list for "geschoss"
 */
function immoclient_floordescription_geschoss(){
    return array(
      'BASEMENT'=>t('BASEMENT'),
      'FIRST_FLOOR' => t('FIRST FLOOR'), 
      'SECOND_FLOOR' =>t('SECOND FLOOR'),
      'THIRD_FLOOR' => t('THIRD FLOOR'),
      'FOURTH_FLOOR' => t('FOURTH FLOOR'),
      'FIFTH_FLOOR' => t('FIFTH FLOOR'),
      'SIXTH_FLOOR' => t('SIXTH FLOOR'),
      'SEVENTH_FLOOR' => t('SEVENTH FLOOR'),
      'EIGHTH_FLOOR' => t('EIGHTH FLOOR'),
      'NINTH_FLOOR' => t('NINTH FLOOR'),
      'ATTIC' => t('ATTIC')
      );
}

function immoclient_floordescription_geschoss_select($i){
    switch ($i){
        case 'BASEMENT':
            return t('BASEMENT');
            break;
        case 'FIRST_FLOOR':
            return t('FIRST FLOOR');
            break;
        case 'SECOND_FLOOR':
            return t('SECOND FLOOR');
            break;
        case 'THIRD_FLOOR':
            return t('THIRD FLOOR');
            break;
        case 'FOURTH_FLOOR':
            return t('FOURTH FLOOR');
            break;
        case 'FIFTH_FLOOR':
            return t('FIFTH FLOOR');
            break;
        case 'SIXTH_FLOOR':
            return t('SIXTH FLOOR');
            break;
        case 'SEVENTH_FLOOR':
            return t('SEVENTH FLOOR');
            break;
        case 'EIGTHTH_FLOOR':
            return t('EIGHTH FLOOR');
            break;
        case 'NINTH_FLOOR':
            return t('NINTH FLOOR');
            break;
        case 'ATTIC':
            return t('ATTIC');
            break;
    }
    
}
