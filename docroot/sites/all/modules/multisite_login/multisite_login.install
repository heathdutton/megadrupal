<?php

/**
 * @file
 * Implementation of hook_schema().
 */
function multisite_login_schema() {
   $schema['multisite_login'] = array(
    'description' => t('Stores a double-hashed password for each user.'),
    'fields' => array(
      'uid' => array(
        'description' => t('The {users}.uid identifier.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0),
      'pass_hash' => array(
        'description' => t('The double-hashed password for this user.'),
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => ''),
      'title' => array(
        'description' => t('The title of this node, always treated a non-markup plain text.'),
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => ''),
    ),
    'unique keys' => array(
      'uid_index' => array('uid'),
    ),
  );
  $schema['multisite_login_sessions'] = array(
    'description' => t('Stores a list of sessions that have already been logged in via ' .
      'multisite_login.'),
    'fields' => array(
      'sid' => array(
        'description' => t('The {sessions}.sid identifier.'),
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => ''),
    ),
    'unique keys' => array(
      'sid_index' => array('sid'),
    ),
  );
  return $schema;
}


/**s
 * Implementation of hook_install().
 */
function multisite_login_install() {
}

/**
 * Implementation of hook_enable.
 */
function multisite_login_enable() {
  $result = db_query('SELECT u.uid, u.pass FROM {users} u LEFT JOIN {multisite_login} m ON u.uid = m.uid WHERE m.uid IS NULL');
  foreach ($result as $u) {
    $uid = $u->uid;
    $pass_hash = md5($u->pass);
    $fields = array('uid' => $uid, 'pass_hash' => $pass_hash);
    db_insert('multisite_login')->fields($fields)->execute();
  }

  // Clear the multisite API cache.
  _multisite_api_variable_get('multisite_api_development', 'localhost', TRUE);
  multisite_api_site_list(NULL, NULL, TRUE);
}

/**
 * Implementation of hook_disable.
 */
function multisite_login_disable() {
   db_truncate('multisite_login');
}

/**
 * Implementation of hook_uninstall.
 */
function multisite_login_uninstall() {
}

/**
 * Create table to record session ids used in a multisite_login.
 */
function multisite_login_update_2() {
    $ret = array();
    switch ($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      $ret[] = update_sql("CREATE TABLE {multisite_login_sessions} (
        sid VARCHAR(64) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
        UNIQUE sid_index  (sid)
      ) /*!40100 DEFAULT CHARACTER SET utf8 */;");
      break;
    case 'pgsql':
      $ret[] = update_sql("CREATE TABLE {multisite_login_sessions} (
        sid varchar(64) NOT NULL default '',
        PRIMARY KEY (sid)
      );");
      break;
  }
  return $ret;
}

/**
 * Confirm that we have all the needed tables.
 */
function multisite_login_update_3() {
  $ret = array();
  $res = db_query('SELECT COUNT(*) FROM {multisite_login}');
  if (!db_result($res)) {
    multisite_login_install();
    multisite_login_enable();
  }
  $res = db_query('SELECT COUNT(*) FROM {multisite_login_sessions}');
  if (!db_result($res)) {
    $ret = multisite_login_update_2();
  }
  return $ret;
}
