<?php

/**
 * @file
 *  Allows a user to login to all sites in a multisite configuration, even though the 
 *  multisites do not share domain names.
 */

/**
 * @category HOOKS
 */

/**
 * Implementation of hook_help.
 */
function multisite_login_help($path, $arg) {
  switch ($path) {
    case 'admin/help#multisite_login':
      $help = l('README.txt', drupal_get_path('module', 'multisite_login') . '/README.txt');
      return '<p>'. t('Allows automatic logins across all sites of a multisite installation, ' .
        'even if those sites do not share a domain.' .
        'For more details please see the included !help. ', array('!help' => $help)) . '</p>';
  }
}

/**
 * Implementation of hook_menu.
 */
function multisite_login_menu() {
  global $user;
  $items['multisite_login'] = array(
    'page callback' => 'multisite_login_login',
    'access callback' => TRUE,
    'title' => 'Multisite Login',
    'type' => MENU_CALLBACK,
  );
  $items['admin/multisite/multisite_login'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('multisite_login_admin'),
    'access arguments' => array('administer site configuration'),
    'title' => 'Multisite Login',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implementation of hook_user_login.
 */
function multisite_login_user_login(&$edit, $account) {
   $_SESSION['single_login_all_sites'] = TRUE;
}

/**
 * Implementation of hook_user_insert.
 */
function multisite_login_user_insert(&$edit, $account, $category) {
      if ($pass_hash = multisite_login_make_pass_hash($account->uid)) {
        db_delete('multisite_login')->condition('uid', $account->uid)->execute();
        db_insert('multisite_login')
        ->fields(array(
            'uid' => $account->uid,
            'pass_hash' => $pass_hash,
            ))
         ->execute();
      }  
}

/**
 * Implementation of hook_user_delete.
 */
function multisite_login_user_delete($account) {
  db_delete('multisite_login')->condition('uid', $account->uid)->execute();
}

/**
 * Implementation of hook_user_load.
 */
function multisite_login_user_load($users) {
 $users[1]->multisite_login_pass_hash = multisite_login_get_pass_hash($users[1]->uid);
}


/**
 * Implementation of hook_footer.
 */
function multisite_login_footer($main = 0) {
  global $user;
  if (!empty($_SESSION['single_login_all_sites'])) {

    // Get the list of sites that are of the same type as the current site.
    $sites = multisite_api_site_list('current', 'current');

    // Build data common to all sites.
    $uid = $user->uid;
    $pass_hash = rawurlencode(multisite_login_get_pass_hash($uid));
    $sess_hash = rawurlencode(multisite_login_get_sess_hash(session_id()));
    $site_name = rawurlencode(multisite_api_current_site_name());
    $qry = "uid=$uid&ph=$pass_hash&sh=$sess_hash&site=$site_name";

    // Build image tags.
    $list = array();
    foreach ($sites as $site) {

      // Don't try and re-login to this site.
      if ($site['dir'] == multisite_api_current_site_name()) {
        continue;
      }
      $url = $site['base_url'] ? $site['base_url'] : 'http://' . $site['dir'];
      $url = url($url . '/multisite_login', array('query' => $qry, 'absolute' => TRUE));
      $img = theme('image', $url, '', '', array('class' => "multisite-login"), FALSE);
      $list[] = $img . "\n";
    }
    unset($_SESSION['single_login_all_sites']);
    return theme('multisite_login', $list);
  }
}

/**
 * Implementation of hook_cron.
 */
function multisite_login_cron() {
  // If an sid no longer exists in the sessions table, it's safe to remove from multisite_login_sessions
  // since it can't be used anymore.  This keeps our table as trim as possible.
 
$subquery = db_select('sessions', 's')
        ->fields('s', array('sid'));
$query = db_delete('multisite_login_sessions')->condition('sid', $subquery, 'NOT IN')->execute();
}

/**
 * @category THEME FUNCTIONS
 */

/**
 * Implementation of hook_theme.
 */
function multisite_login_theme() {
  return array(
    'multisite_login' => array(
      'arguments' => array('list' => array()),
    ),
  );
}

/**
 * Theme the list of images.
 */
function theme_multisite_login($list = array()) {
  if (!user_access('administer users')) {
    $style = 'style="display:none;"';
  }
  return '<div id="multisite-login" ' . $style . '>' . implode('', $list) . '</div>';
}

/**
 * @category MENU CALLBACKS
 */

function multisite_login_admin() {
  $form = array(
    '#header' => t('Multisite Login will attempt to log users in to all sites that match the ' .
      'current site\'s visibility and server. See the <a href="@readme">README.txt</a> file and ' .
      'the <a href="@mapi">Multisite API configuration page</a> for more info.',
      array(
        '@readme' =>  url(drupal_get_path('module', 'multisite_login') . '/README.txt'),
        '@mapi' => url('admin/multisite/multisite_api'),
      )
    ),
  );
  $form['multisite_login_ip'] = array(
    '#type' => 'checkbox',
    '#default_value' => variable_get('multisite_login_ip', TRUE),
    '#title' => 'Check for matching IP address on multisite login',
    '#description' => 'Most of the time you do want to check for a matching IP address for ' .
      'increased security.  However in some cases, usually only in a development environment, IPs ' .
      'from the same browser session may not in fact match.  Remember that you need to set this ' .
      'on every site.',
  );
  $form['multisite_login_debug'] = array(
    '#type' => 'checkbox',
    '#default_value' => variable_get('multisite_login_debug', FALSE),
    '#title' => 'Print debug messages to screen.',
    '#description' => 'This might help when you are setting things up.  Remember to turn this off ' .
      'on production sites.',
  );
  return system_settings_form($form);
}

/**
 * Check if credentials match and login the user.
 */
function multisite_login_login() {

  global $user;
  // Check if we have all needed values.
  $uid = $_GET['uid'];
  $pass_hash = rawurldecode($_GET['ph']);
  $sess_hash = rawurldecode($_GET['sh']);
  $site_name = rawurldecode($_GET['site']);
  if (empty($uid) || empty($pass_hash) || empty($sess_hash) || empty($site_name)) {
    return _multisite_login_image('failure', t('Incomplete paramaters.'));
  }
  $sid = multisite_login_sess_unhash($sess_hash);
  
  // Check that uid is valid.
  if (!is_numeric($uid)) {
    return _multisite_login_image('failure', t('The uid is not numeric.'));
  }

  // Check that this user is not already logged in.
  if ($user->uid) {
    return _multisite_login_image('failure', t('The user is already logged in.'));
  }

  // Check if the session exists and that the user is logged in on the originating site.
  $site_originating = multisite_api_get_site($site_name);
  if (variable_get('multisite_login_debug', FALSE)) {
    drupal_set_message(t('%site_name: %array', array('%site_name' => $site_name, '%array' => var_export($site_name, TRUE))));
    drupal_set_message(t('%site_originating: %array', array('%site_originating' => $site_originating, '%array' => var_export($site_originating, TRUE))));
  }
  $sql = '';
  $session_originating = _multisite_login_site_get_session($site_originating, $sid, $sql);
  if (empty($session_originating)) {
    return _multisite_login_image('failure', t('The session @sid doesn\'t exist on the originating site: @sql',
      array('@sid' => $sid, '@sql' => $sql)));
  }
  if (empty($session_originating->uid)) {
    return _multisite_login_image('failure', t('The user is not logged in to the originating site.'));
  }
  

  // Check if the host matches.
  if (!multisite_login_test_hostname($session_originating->hostname)) {
    return _multisite_login_image('failure', t('The host does not match: @host',
      array('@host' => $session_originating->hostname)));
  }

  // Check that the timestamp is recent.
  if (!multisite_login_test_timestamp($session_originating->timestamp)) {
    return _multisite_login_image('failure', t('The timestamp is not recent.'));
  }

  // Check if uid/pass match.
  if (!multisite_login_test_pass_hash($uid, $pass_hash)) {
    return _multisite_login_image('failure', 'uid/pass does not match');
  }

//db_result(db_query_range('SELECT 1 FROM {multisite_login_sessions} WHERE sid = "%s"', $sid, 1, 0))
  // Check that this sid has never been used before.
  if (db_query_range('SELECT 1 FROM {multisite_login_sessions} WHERE sid = :sid', 0, 1, array(':sid' => $sid))) {
    return _multisite_login_image('failure', t('This sid has already been used for a multisite_login.'));
  }

  // Everything looks good. Log the user in.
  if ($user = user_load(array('uid' => $uid))) {
    return _multisite_login_image('success', t('The user has been successfully logged in.'), $sid);
  }
  else {
    return _multisite_login_image('failure', t('The user could not be logged in.'));
  }
}


/**
 * @category PUBLIC FUNCTIONS
 */

/**
 * Get the hashed pass for the given user.
 * 
 * @param int $uid
 *  The user to fetch the hashed pass for.  Leave blank to fetch for the current user.
 * @return string
 *  The hashed pass.
 */
function multisite_login_get_pass_hash($uid = NULL) {
  
  // If uid is blank, use current user.
  global $user;
  if (!$uid) {
    $uid = $user->uid;
  }
  // Lookup the hashed pass.
  //$pass_hash = db_result(db_query('SELECT pass_hash FROM {multisite_login} WHERE uid = %d', $uid));
  $select = db_select('multisite_login', 'ml');
  $select->addField('ml', 'pass_hash');
  $select->condition('uid', $uid);
  $results = $select->execute()->fetchAssoc();
  return $results['pass_hash'];
}

/**
 * Get the hashed session id for the given user.
 * 
 * @param int $uid
 *  The user to fetch the hashed pass for.  Leave blank to fetch for the current user.
 * @return string
 *  The hashed session id.
 */
function multisite_login_get_sess_hash($uid = NULL) {

  // If uid is blank, use current user.
  global $user;
  if (!$uid) {
    $uid = $user->uid;
  }

  // Lookup the hashed session id.
  $sess_hash = multisite_login_make_sess_hash(session_id());
  return $sess_hash;

}

/**
 * Test if the given hashed pass is correct for the given uid.
 * 
 * @param int $uid
 *  The uid to test for.
 * @param string $pass_hash
 *  The hashed pass to test.
 * @return bool
 *  TRUE on success, else FALSE.
 */
function multisite_login_test_pass_hash($uid, $pass_hash) {
  $stored_hash = multisite_login_get_pass_hash($uid);
  return $stored_hash === $pass_hash;
}

/**
 * Test if the given timestamp is recent.
 * 
 * @param int $timestamp
 *  The timestamp to test.
 * @return bool
 *  TRUE on success, else FALSE.
 */
function multisite_login_test_timestamp($timestamp) {
  return $timestamp > time() - 3600 * 24; // 1 day
}

/**
 * Test if the given hostname matches the current hostname.
 * 
 * @param string $hostname
 *   Host name to test against.
 * @return bool
 *   TRUE on success, else FALSE.
 */
function multisite_login_test_hostname($hostname) {
  if (variable_get('multisite_login_ip', TRUE)) {
    return ip_address() === $hostname;
  }
  else {
    return TRUE;
  }
}

/**
 * Return the hashed pass for the given uid. 
 * 
 * Only use this to regenerate the hashed pass, otherwise just use the user object, 
 * or multisite_login_get_pass_hash.
 * 
 * @param int $uid
 *   The uid to fetch for.
 * @return string
 *   The hashed pass.
 */
function multisite_login_make_pass_hash($uid) {
   $pass =db_select('users', 'u')
    ->addField('u', 'pass')
    ->condition('uid', $uid)
    ->execute()
    ->fetchAssoc();

  //$pass = db_result(db_query('SELECT pass FROM {users} WHERE uid = %d', $uid));
  $pass_hash = md5($pass);
  return $pass_hash;
}

/**
 * Hash an sid.
 * 
 * @param int $sid
 *   The sid to hash.
 * @return string
 *   The hashed sid.
 */
function multisite_login_make_sess_hash($sid) {
  $inner = md5(rand());
  $sess_hash = substr($sid, 0, 16) . $inner . substr($sid, 16);
  return $sess_hash;
}

/**
 * Unhash an sid.
 * 
 * @param int $sess_hash
 *   The hashed sid.
 * @return string
 *   The sid.
 */
function multisite_login_sess_unhash($sess_hash) {
  $sid = substr($sess_hash, 0, 16) . substr($sess_hash, 48);
  return $sid;
}

/**
 * @category INTERNAL FUNCTIONS
 */

/**
 * Load a session object from another site.
 *
 * @param object $site
 *  A site object as returned by the multisite_api
 * @param string $sid
 *  A session ID.
 * @param string &$sql
 *  The SQL used to generate the session object will be stored in this variable.
 *  You may use it for debugging.
 * @return mixed
 *  A session object if it exists, else NULL.
 */
function _multisite_login_site_get_session($site, $sid, &$sql = NULL) {

  // The sessions table may be shared, pick the right db to query.
  if (is_array($site['db_prefix']) && isset($site['db_prefix']['sessions'])) {
    $other_db = $site['db_prefix']['sessions'];
  }
  else {
    $other_db = substr($site['db_default_dsn']['path'], 1) . '.';
  }
  
  $sql = "SELECT sid, uid, hostname, timestamp FROM {$other_db}sessions WHERE sid = '%s'";
  return db_fetch_object(db_query($sql, $sid));
}

/**
 * Send image to the browser and exit
 * 
 * @param string $image
 *  One of: 'success', 'failure'.
 * @param string $msg
 *  Message to drupal_set_message when debugging is on.
 * @param string $sid = NULL
 *  On success this sid will be stored in the multisite_login_sessions table
 *  so that it can not be used again for a multisite login.
 * @return none
 */
function _multisite_login_image($image, $msg, $sid = NULL) {
  $debug = variable_get('multisite_login_debug', FALSE);

  // Get file paths.
  $path = dirname(__FILE__);
  switch ($image) {
    case 'failure':
      $path .= '/failure.png';
      break;
    case 'success':
      $path .= '/success.png';
      if ($sid) {
        db_query('INSERT IGNORE INTO {multisite_login_sessions} (sid) VALUES("%s")', $sid);
      }
      break;
  }
  
  // Logging.
  if ($debug) {
    drupal_set_message(t('@msg',array('@msg' => $msg)), $image != 'success' ? 'error' : 'status');
  }
  if ($debug || $image != 'success') {
    watchdog('multisite_login', $msg, NULL,
      $image != 'success' ? WATCHDOG_WARNING : WATCHDOG_NOTICE);
  }

  // File trxfr.
  if ($fd = fopen($path, 'rb')) {
    drupal_set_header('Content-Type: image/png');
    while (!feof($fd)) {
      echo fread($fd, 1024);
    }
    fclose($fd);

    // Quit.
    module_invoke_all('exit');
    exit(0);
  }
  else {
    // Whiskey, Tango, Foxtrot!
    drupal_not_found();
  }

}
