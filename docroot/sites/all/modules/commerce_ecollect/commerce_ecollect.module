<?php

/**
 * @file
 * ECollect payment method from Avisor Technologies for Drupal Commerce.
 */

define('COMMERCE_ECOLLECT_WS_PRODUCTION', 'https://www.e-collect.com/p_express/webservice/eCollectWebservicesv2.asmx?WSDL');
define('COMMERCE_ECOLLECT_WS_TEST', 'http://zeus.mipuntodepago.com/d_express/webservice/eCollectWebservicesv2.asmx?WSDL');

/**
 * Implements hook_help().
 */
function commerce_ecollect_help($path, $arg) {
  if ($path == 'admin/help#commerce_ecollect') {
    $output = array(
      'about' => array(
        'title' => array(
          '#markup' => '<h1>' . t('About this module') . '</h1>',
        ),
        'content' => array(
          '#markup' => '<p>' . t('eCollect (http://www.avisortech.com) is a colombian payment gateway. With this module, you can integrate your store with it, because it is based on rules that define payment parameters. Useful to change those parameters depending on several conditions.') . '</p>',
        ),
      ),
      'installation' => array(
        'title' => array(
          '#markup' => '<h1>' . t('Installation') . '</h1>',
        ),
        'content' => array(
          '#markup' => theme(
            'item_list', array(
              'items' => array(
                'dl_library' => t('Download the NuSOAP library from <a href="@nusoap-dl">this link</a>, and place it inside <em>sites/all/libraries/nusoap</em>. You should see a PHP classs <em>sites/all/libraries/nusoap/lib/nusoap.php</em>.', array('@nusoap-dl' => 'http://sourceforge.net/projects/nusoap/files/latest/download')),
                'ecollect_enable' => t('Enable the module.'),
              ),
            )
          ),
        ),
      ),
      'usage' => array(
        'title' => array(
          '#markup' => '<h1>' . t('Usage') . '</h1>',
        ),
        'content' => array(
          '#markup' => '<p>' . t('When module is enabled, you need to add a custom rule to set right payment parameters. Go to <a href="@rules-page">admin/config/workflow/rules</a>, and create a new with your desired react on event. You can set conditions, if you need. Now, add an action <em>Set payment parameters</em>, which may be located inside group <em>ECollect</em>. Keep in mind that some of these field values must be asked to Avisor Technologies.', array('@rules-page' => url('admin/config/workflow/rules'))) . '</p>',
        ),
      ),
      'explanation' => array(
        'title' => array(
          '#markup' => '<h1>' . t('Why do we use Rules to set payment parameters?') . '</h1>',
        ),
        'content' => array(
          '#markup' => '<p>' . t('That\'s simple. Avisor gives you the possibility to have several "payment pages" as you want. For example, you can setup a page to pay events with following fields: <em>Full name, Personal ID, Phone</em>. Also, a different page to pay courses with following fields: <em>Full name, Personal ID, Phone, Customer ID, Course ID</em>. Therefore, you need to setup different values for each one. Tha\'s the trick!. Also (not tested yet) if you have a "multi-store website", you could setup different values per shop.') . '</p>',
        ),
      ),
    );
    return render($output);
  }
}
/**
 * Implements hook_libraries_info().
 *
 * @todo
 * Get library version from file lib/nusoap.php, line 99. A regular expresion
 * to replace version callback, if possible.
 */
function commerce_ecollect_libraries_info() {
  $libraries['nusoap'] = array(
    'name' => 'NuSOAP',
    'vendor url' => 'http://sourceforge.net/projects/nusoap',
    'download url' => 'http://sourceforge.net/projects/nusoap/files/latest/download',
    'version callback' => 'commerce_ecollect_nusoap_version_callback',
    'files' => array(
      'php' => array('lib/nusoap.php'),
    ),
  );
  return $libraries;
}

/**
 * Allow pass version for NuSOAP.
 *
 * @see commerce_ecollect_libraries_info()
 */
function commerce_ecollect_nusoap_version_callback() {
  return TRUE;
}

/**
 * Implements hook_menu().
 */
function commerce_ecollect_menu() {
  $items['ecollect/order/%commerce_order/status'] = array(
    'title' => 'eCollect order status',
    'page callback' => 'commerce_ecollect_check_order_status_page',
    'page arguments' => array(2),
    'access callback' => 'commerce_ecollect_order_status_check_access',
    'access arguments' => array(2),
  );
  return $items;
}

/**
 * Get eCollect Transaction for a given order_id.
 */
function commerce_ecollect_order_get_transaction($order_id) {
  $transaction_id = db_select('commerce_payment_transaction', 't')
    ->fields('t', array('transaction_id'))
    ->condition('order_id', $order_id, '=')
    ->condition('payment_method', 'commerce_ecollect', '=')
    ->execute()
    ->fetchAssoc();
  if ($transaction_id) {
    $transaction = commerce_payment_transaction_load($transaction_id['transaction_id']);
    return $transaction;
  }
}

/**
 * Get a list of possible statuses.
 */
function commerce_ecollect_transaction_status($order_status_remote) {
  $order_status = array(
    'OK' => 'completed',
    'NOT_AUTHORIZED' => 'canceled',
    'EXPIRED' => 'canceled',
    'FAILED' => 'canceled',
    'CREATED' => 'pending',
    'BANK_PENDING' => 'processing',
  );
  return $order_status[$order_status_remote];
}

/**
 * Get server: Test or Production.
 */
function commerce_ecollect_get_wsserver() {
  $payment_method_settings = commerce_payment_method_instance_load('commerce_ecollect|commerce_payment_commerce_ecollect');
  if (isset($payment_method_settings['settings']) && $payment_method_settings['settings']['mode'] == 'PRODUCTION') {
    return COMMERCE_ECOLLECT_WS_PRODUCTION;
  }
  return COMMERCE_ECOLLECT_WS_TEST;
}

/**
 * Check status for a given commerce order.
 */
function commerce_ecollect_check_order_status_page($commerce_order) {
  $processed = commerce_ecollect_check_order_status($commerce_order);
  if (!empty($processed) && is_array($processed)) {
    switch ($processed['order_status_new']) {
      case 'completed':
        $message = t('Your order has been succefully processed.');
        break;

      case 'pending':
        $message = t('Order is pending.');
        break;

      case 'processing':
        $message = t('Your order is currently being processed.');
        break;

      case 'canceled':
        $message = t('Payment process has failed.');
        break;

    }
  }
  else {
    $message = t('Order <em>@order_id</em> is not processed via eCollect. Nothing to do.', array('@order_id' => $commerce_order->order_id));
  }
  $data = array(
    'message' => $message,
  );
  return theme('commerce_ecollect_order_info', array('data' => $data));
}

/**
 * Check status for a given order.
 */
function commerce_ecollect_check_order_status($commerce_order, $conf = array()) {
  if (is_numeric($commerce_order)) {
    $commerce_order = commerce_order_load($commerce_order);
  }
  $transaction = commerce_ecollect_order_get_transaction($commerce_order->order_id);
  if ($transaction) {
    if (isset($transaction->message_variables['@EntityCode']) && isset($transaction->remote_id)) {
      // Make a request:
      $values = array(
        'EntityCode' => $transaction->message_variables['@EntityCode'],
        'TicketId' => $transaction->remote_id,
      );
      $soap_client = isset($conf['soap_client']) ? $conf['soap_client'] : NULL;
      $request = commerce_ecollect_ws_request('getTransactionInformation', $values, $soap_client);

      // Process data:
      $order_status_local_old = $commerce_order->status;
      $order_status_remote = trim($request['getTransactionInformationResult']['TranState']);
      $order_status_local_new = commerce_ecollect_transaction_status($order_status_remote);
      if ($order_status_local_old != $order_status_local_new) {
        $message = t('Order status changed from <em>@order_status_old</em> to <em>@order_status_new</em>. eCollect status: <em>@ecollect_order_status</em>.',
          array(
            '@order_status_old' => $order_status_local_old,
            '@order_status_new' => $order_status_local_new,
            '@ecollect_order_status' => $order_status_remote,
          )
        );
        commerce_order_status_update($commerce_order, $order_status_local_new, FALSE, TRUE, $message);
      }
      $processed = array(
        'order_id' => $commerce_order->order_id,
        'order_status_remote' => $order_status_remote,
        'order_status_old' => $order_status_local_old,
        'order_status_new' => $order_status_local_new,
      );
      return $processed;
    }
    else {
      commerce_order_status_update($commerce_order, 'canceled', FALSE, TRUE, t('Error processing order. Canceled.'));
    }
  }
}

/**
 * Initialize SOAP Client.
 */
function commerce_ecollect_ws_getclient() {
  // include_once 'nusoap/lib/nusoap.php';
  libraries_load('nusoap');

  // Get current server, according to settings:
  $ws_url = commerce_ecollect_get_wsserver();

  $soap_client = new nusoap_client($ws_url, TRUE);
  $soap_client->soap_defencoding = 'UTF-8';
  $soap_client->decode_utf8 = FALSE;

  return $soap_client;
}

/**
 * Make a WS request using a common way.
 */
function commerce_ecollect_ws_request($method, $values, $soap_client = NULL) {
  if (!$soap_client) {
    $soap_client = commerce_ecollect_ws_getclient();
  }

  switch ($method) {
    // NEW PAYMENT REQUEST:
    case 'createTransactionPayment':
      $params = array(
        'request' => array(
          'EntityCode' => $values['EntityCode'],
          'SrvCode' => $values['SrvCode'],
          'TransValue' => $values['TransValue'],
          'TransVatValue' => $values['TransVatValue'],
          'SrvCurrency' => $values['SrvCurrency'],
          'URLResponse' => $values['URLResponse'],
          'URLRedirect' => $values['URLRedirect'],
          'Sign' => isset($values['Sign']) ? md5($values['Sign']) : '',
          'SignFields' => $values['SignFields'],
          'ReferenceArray' => array(),
        ),
      );
      foreach ($values['ReferenceArray'] as $reference_array_item) {
        array_push($params['request']['ReferenceArray'], $reference_array_item);
      }
      break;

    // QUERY ABOUT PREVIOUSLY CREATED PAYMENT PROCESS:
    case 'getTransactionInformation':
      $params = array(
        'request' => array(
          'EntityCode' => $values['EntityCode'],
          'TicketId' => $values['TicketId'],
        ),
      );
      break;

    // INVALID METHOD:
    default:
      $params = array();
  }
  // Call to the WS:
  if (count($params) > 0) {
    $request = $soap_client->call($method, $params);
    unset($soap_client);
    return $request;
  }
}

/**
 * Implements hook_theme().
 */
function commerce_ecollect_theme($existing, $type, $theme, $path) {
  return array(
    'commerce_ecollect_order_info' => array(
      'variables' => array('data' => NULL),
      'template' => 'templates/commerce-ecollect-order-info',
    ),
  );
}

/**
 * Implements hook_permission().
 */
function commerce_ecollect_permission() {
  return array(
    'view any order status' => array(
      'title' => t('View any order status'),
      'description' => t('Useful to check an order via URL. For example "Check your order status using <em>this link</em>".'),
    ),
  );
}

/**
 * Check access to see if order is accsesible by current user.
 */
function commerce_ecollect_order_status_check_access($commerce_order) {
  if (is_object($commerce_order) && user_access('view any order status')) {
    return TRUE;
  }
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_ecollect_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_ecollect'] = array(
    'title' => t('eCollect.'),
    'description' => t('Colombian payment method by Avisor technologies.'),
    'active' => TRUE,
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );

  return $payment_methods;
}

/**
 * Payment method callback: submit form.
 */
function commerce_ecollect_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form = array();
  $msg = !empty($_SESSION['eCollect']) ? t('Continue to the next step to proceed with payment.') : t('Error: You must set a rule providing eCollect data. Contact to the website administrator.');
  $form['commerce_ecollect_information'] = array(
    '#markup' => '<span class="commerce-ecollect-info">' . $msg . '</span>',
  );
  return $form;
}

/**
 * Payment method callback: submit form submission.
 */
function commerce_ecollect_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {

  // We need some price variables for eCollect:
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $payment_base = commerce_price_component_total($order_wrapper->commerce_order_total->value(), 'base_price');
  $payment_taxes = $charge['amount'] - $payment_base['amount'];

  $transaction = commerce_payment_transaction_new('commerce_ecollect', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];

  if (isset($_SESSION['eCollect'])) {
    $values = array(
      'EntityCode' => $_SESSION['eCollect']['EntityCode'],
      'SrvCode' => $_SESSION['eCollect']['SrvCode'],
      'TransValue' => $payment_base['amount'],
      'TransVatValue' => $payment_taxes,
      'SrvCurrency' => $charge['currency_code'],
      'URLResponse' => $_SESSION['eCollect']['URLResponse'],
      'URLRedirect' => str_replace('COMMERCE__ORDER_ID', $order->order_id, $_SESSION['eCollect']['URLRedirect']),
      'Sign' => $_SESSION['eCollect']['Sign'],
      'SignFields' => $_SESSION['eCollect']['SignFields'],
      'ReferenceArray' => $_SESSION['eCollect']['ReferenceArray'],
    );
    $request = commerce_ecollect_ws_request('createTransactionPayment', $values, NULL);
    $_SESSION['eCollect']['createTransactionPaymentResult'] = $request['createTransactionPaymentResult'];
    if ($request['createTransactionPaymentResult']['ReturnCode'] == 'SUCCESS') {
      $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
      $transaction->remote_id = $request['createTransactionPaymentResult']['TicketId'];
      $transaction->remote_status = $request['createTransactionPaymentResult']['ReturnCode'];
      $transaction->message = 'EntityCode: @EntityCode; SrvCode: @SrvCode; TicketId: @TicketId; ReturnCode: @ReturnCode; eCollectUrl: @eCollectUrl';
      $transaction->message_variables = array(
        '@EntityCode' => $_SESSION['eCollect']['EntityCode'],
        '@SrvCode' => $_SESSION['eCollect']['SrvCode'],
        '@TicketId' => $request['createTransactionPaymentResult']['TicketId'],
        '@ReturnCode' => $request['createTransactionPaymentResult']['ReturnCode'],
        '@eCollectUrl' => $request['createTransactionPaymentResult']['eCollectUrl'],
      );
    }
    else {
      $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
      watchdog('commerce_ecollect', 'Could not redirect to the payment gateway. May be there is a mistake inside the rule that defines your payment variables.', NULL, WATCHDOG_ERROR, NULL);
    }
  }
  commerce_payment_transaction_save($transaction);
}

/**
 * Add parameters method eCollect.
 */
function commerce_ecollect_redirect_form($form, &$form_state, $order, $payment_method) {
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Proceed to eCollect'),
    '#submit' => array('_commerce_ecollect_goto_ws'),
  );
  return $form;
}

/**
 * Redirect to the webservice.
 */
function _commerce_ecollect_goto_ws($form, &$form_state) {
  if (isset($_SESSION['eCollect']) && isset($_SESSION['eCollect']['createTransactionPaymentResult'])) {
    $url = $_SESSION['eCollect']['createTransactionPaymentResult']['eCollectUrl'];
    unset($_SESSION['eCollect']);
  }
  else {
    $url = '<front>';
  }
  $form_state['redirect'] = $url;
}

/**
 * Implements hook_cron().
 */
function commerce_ecollect_cron() {
  $payment = commerce_payment_method_instance_load('commerce_ecollect|commerce_payment_commerce_ecollect');
  if ($payment['settings']['recheck']) {
    switch ($payment['settings']['recheck_mode']) {
      case 'all':
        $conf = array('origin' => 0, 'range' => $payment['settings']['recheck_mode_all']);
        break;

      case 'latest':
        $origin = variable_get('commerce_ecollect_last_checked_order', 0);
        $range = $payment['settings']['recheck_mode_latest'];
        $conf = array('origin' => $origin, 'range' => $range);
        break;

    }
    commerce_ecollect_check_orders($conf);
  }
}

/**
 * Check orders based on given parameters.
 */
function commerce_ecollect_check_orders($conf) {
  $query = db_select('commerce_order', 'o');
  $query->join('commerce_payment_transaction', 't', 'o.order_id = t.order_id');
  $query->fields('o', array('order_id'))->fields('t', array('remote_id'))
      ->condition('o.status', 'pending', '=')
      ->condition('o.order_id', $conf['origin'], '>')
      ->condition('t.payment_method', 'commerce_ecollect', '=')
      ->orderBy('o.order_id', 'ASC')
      ->range(0, $conf['range']);
  $result = $query->execute();

  $orders_checked = 0;
  foreach ($result as $item) {
    $processed = commerce_ecollect_check_order_status($item->order_id);
    variable_set('commerce_ecollect_last_checked_order', $processed['order_id']);
    $orders_checked += 1;
  }
  return array(
    'orders_checked' => $orders_checked,
    'last_checked' => variable_get('commerce_ecollect_last_checked_order', 0),
  );
}

/**
 * Payment method callback: settings form.
 */
function commerce_ecollect_settings_form($settings = array()) {
  $form = array();
  $settings = (array) $settings + commerce_ecollect_settings_default();

  $form['mode'] = array(
    '#type' => 'select',
    '#title' => t('Mode'),
    '#options' => array(
      'TEST' => t('Test mode'),
      'PRODUCTION' => t('Production mode'),
    ),
    '#required' => TRUE,
    '#default_value' => $settings['mode'],
  );
  $form['recheck'] = array(
    '#type' => 'checkbox',
    '#title' => t('Recheck pending orders'),
    '#default_value' => $settings['recheck'],
    '#id' => 'orders-recheck',
    '#description' => t('If marked, orders with status "pending" and "processing" will be checked via cron job.'),
  );
  $form['recheck_mode'] = array(
    '#type' => 'radios',
    '#title' => t('Options to recheck orders'),
    '#options' => array(
      'all' => t('All'),
      'latest' => t('Latest N orders'),
    ),
    '#default_value' => $settings['recheck_mode'],
    '#id' => 'orders-recheck-mode',
    '#states' => array(
      'invisible' => array(
        ':input[id="orders-recheck"]' => array('checked' => FALSE),
      ),
    ),
  );
  $form['recheck_mode_all'] = array(
    '#type' => 'textfield',
    '#title' => t('Orders to process per cron job'),
    '#default_value' => $settings['recheck_mode_all'],
    '#states' => array(
      'visible' => array(
        ':input[id="orders-recheck"]' => array('checked' => TRUE),
        'input[name="parameter[payment_method][settings][payment_method][settings][recheck_mode]"]' => array('value' => 'all'),
      ),
    ),
  );
  $form['recheck_mode_latest'] = array(
    '#type' => 'textfield',
    '#title' => t('Latest orders to process'),
    '#default_value' => $settings['recheck_mode_latest'],
    '#states' => array(
      'visible' => array(
        ':input[id="orders-recheck"]' => array('checked' => TRUE),
        'input[name="parameter[payment_method][settings][payment_method][settings][recheck_mode]"]' => array('value' => 'latest'),
      ),
    ),
  );
  return $form;
}

/**
 * Get default settings.
 */
function commerce_ecollect_settings_default() {
  return array(
    'mode' => 'TEST',
    'recheck' => TRUE,
    'recheck_mode' => 'all',
    'recheck_mode_all' => 5,
    'recheck_mode_latest' => 5,
  );
}
