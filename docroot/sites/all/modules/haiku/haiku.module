<?php

/**
 * @file
 * Haiku module.
 *
 * This module serves primarily as a Haiku API of sorts and provides useful
 * functionality mostly to developers (if anyone), but offers three effective
 * tiers of functionality:
 * - End-users: by installing the module, you get a page where users can enter
 *   text and get haikus displayed to them in return, as well as a field format
 *   that can display a parsed haiku in place of a text field's real content.
 * - Developers: by installing this module, you get some classes with methods to
 *   parse haikus from any arbitrary text source.
 * - Algorithm design enthusists: you get an interface to implement a better
 *   haiku parsing algorithm, either in your own module, or by contributing back
 *   to the default implementation provided here.
 *
 * See the README.txt for more information.
 */


/**
 * Implements hook_menu().
 */
function haiku_menu() {
  $items['parse-haikus'] = array(
    'title' => 'Parse Haikus',
    'description' => 'Parse naturally occurring haikus from your text.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('haiku_parse_haiku_form'),
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Returns a basic, user-facing form for parsing haikus from input text.
 */
function haiku_parse_haiku_form($form, &$form_state) {
  $form = array();
  $form['source_text'] = array(
    '#type' => 'textarea',
    '#title' => t('What would you like parsed?'),
    '#description' => t('Enter some text you want parsed into haikus.'),
  );

  $form['num_results'] = array(
    '#type' => 'select',
    '#title' => t('How many haikus would you like?'),
    '#options' => array(
      -1 => t('As many as possible'),
      1 => t('One'),
      2 => t('Two'),
      3 => t('Three'),
    ),
    '#default_value' => 1,
  );

  // @TODO: Would be neat to use something like get_declared_classes() to
  // get a list of all classes implementing HaikuInterface and be able to
  // select which haiku implementation to use.

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Parse'),
  );

  return $form;
}

/**
 * Submit handler for the haiku_parse_haiku_form form.
 */
function haiku_parse_haiku_form_submit($form, &$form_state) {
  $form_state['rebuild'] = TRUE;

  // Parse the text into an array of haikus.
  $haiku_text = new HaikuSource($form_state['values']['source_text']);
  $haikus = $haiku_text->getHaikus();
  $total_haikus = count($haikus);

  // If no haikus were created, set an error message.
  if (empty($haikus)) {
    drupal_set_message(t('No haikus found. Try entering something longer.'), 'error');
    return;
  }

  // If only some haikus are desired, only return as many.
  if ($form_state['values']['num_results'] > 0) {
    $haikus = array_slice($haikus, 0, $form_state['values']['num_results']);
  }

  // Return themable strings.
  foreach ($haikus as $haiku) {
    // We need to sanitize this text.
    $haiku_item = filter_xss($haiku->toString('<br />'), array('br'));
    $haiku_items[] = drupal_strtolower($haiku_item);
  }

  // Build a list and theme it.
  $haiku_list = array(
    'items' => $haiku_items,
    'title' => NULL,
    'type' => 'ul',
    'attributes' => array(),
  );
  $return = '<span>' . t('Showing !returned of !parsed haikus parsed from the source text.', array(
    '!returned' => count($haiku_items),
    '!parsed' => $total_haikus,
  )) . '</span>';
  $return .= theme_item_list($haiku_list);

  // Display output in a message. @TODO: This could probably be UX friendlier.
  drupal_set_message($return, 'status');
}

/**
 * Implements hook_field_formatter_info().
 */
function haiku_field_formatter_info() {
  return array(
    'haiku_formatter' => array(
      'label' => t('Haiku'),
      'field types' => array('text_long', 'text_with_summary'),
      'settings'  => array(),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function haiku_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  foreach ($items as $delta => $item) {
    $haiku_text = new HaikuSource($item['safe_value']);
    $haikus = $haiku_text->getHaikus();
    if (count($haikus) > 0) {
      $element[$delta]['#markup'] = filter_xss($haikus[0]->toString('<br />'), array('br'));
    }
    else {
      $element[$delta]['#markup'] = $item['safe_value'];
    }
  }

  return $element;
}
