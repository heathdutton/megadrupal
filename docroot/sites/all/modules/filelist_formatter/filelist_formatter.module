<?php

/**
 * @file
 * Implemented hooks for the filelist_formatters module.
 */

/**
 * Implements hook_field_formatter_info().
 */
function filelist_formatter_field_formatter_info() {
  return array(
    'filelist_formatter' => array(
      'label' => t('List'),
      'field types' => array('file'),
      'settings' => array(
        'filelist_formatter_type' => 'ul',
        'filelist_formatter_class' => 'file-list',
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function filelist_formatter_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element = array();
  $element['filelist_formatter_type'] = array(
    '#title' => t('List type'),
    '#type' => 'select',
    '#options' => array(
      'ul' => t('Unordered HTML list (ul)'),
      'ol' => t('Ordered HTML list (ol)'),
    ),
    '#default_value' => $settings['filelist_formatter_type'],
    '#required' => TRUE,
  );
  $element['filelist_formatter_class'] = array(
    '#title' => t('List classes'),
    '#type' => 'textfield',
    '#size' => 40,
    '#description' => t('A CSS class to use in the markup for the field list.'),
    '#default_value' => $settings['filelist_formatter_class'],
    '#required' => FALSE,
    '#element_validate' => array('_filelist_formatter_class_validate'),
  );

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function filelist_formatter_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  if ($display['type'] == 'filelist_formatter') {
    switch ($settings['filelist_formatter_type']) {
      case 'ul':
        $summary[] = t('Unordered HTML list');
        break;

      case 'ol':
        $summary[] = t('Ordered HTML list');
        break;
    }

    if ($settings['filelist_formatter_class']) {
      $summary[] = t('CSS Class') . ': <em>' . check_plain($settings['filelist_formatter_class']) . '</em>';
    }
    $summary = theme('item_list', array('type' => 'ul', 'items' => $summary));
  }

  return $summary;
}

/**
 * Implements hook_field_formatter_view().
 */
function filelist_formatter_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  if ($display['type'] == 'filelist_formatter') {
    $settings = $display['settings'];
    $element = $list_items = array();

    foreach ($items as $delta => $item) {
      $list_items[$delta] = theme('file_link', array('file' => (object) $item)) . ' <span class="file-size">(' . format_size($item['filesize']) . ')</span> ';
    }

    // If there are no list items, return and render nothing.
    if (empty($list_items)) {
      return;
    }

    // CSS classes are checked for validity on submission. drupal_attributes()
    // runs each attribute value through check_plain().
    $classes = explode(' ', $settings['filelist_formatter_class']);

    switch ($settings['filelist_formatter_type']) {
      case 'ul':
      case 'ol':
        // Render elements as one piece of markup and theme as item list.
        $element[0] = array(
          '#theme' => 'item_list',
          '#type' => $settings['filelist_formatter_type'],
          '#items' => $list_items,
          '#attributes' => array(
            'class' => $classes,
          ),
        );
        break;
    }
  }

  return $element;
}

/**
 * Validate that defines classes.
 *
 * @see filelist_formatter_field_formatter_settings_form()
 */
function _filelist_formatter_class_validate($element, &$form_state) {
  $value = drupal_array_get_nested_value($form_state['values'], $element['#parents']);
  $classes = explode(' ', $value);
  foreach ($classes as $class) {
    if ($class != drupal_html_class($class)) {
      form_error($element, t('List classes contain illegal characters; classes should be lowercase and may contain letters, numbers, and dashes.'));
      return;
    }
  }
}
