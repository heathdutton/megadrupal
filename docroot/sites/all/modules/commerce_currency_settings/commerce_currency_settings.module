<?php

/**
 * @file
 * Define your custom commerce currency settings.
 */

/**
 * Implements hook_menu().
 */
function commerce_currency_settings_menu() {
  $items = array();

  $items['admin/commerce/config/currency/settings'] = array(
    'title' => 'Currency settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/commerce/config/currency/custom-settings'] = array(
    'title' => 'Custom currency settings',
    'description' => 'Define your Commerce currency settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_currency_settings_settings_form'),
    'access arguments' => array('configure store'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Builds the edit currency settings form.
 */
function commerce_currency_settings_settings_form($form, &$form_state) {
  $enable_currencies = commerce_currencies(TRUE, TRUE);

  if ($currencies_cached = cache_get('commerce_currencies:en')) {
    $all_currencies = $currencies_cached->data;
    $enabled_currencies = array_diff(array_values(variable_get('commerce_enabled_currencies', array('USD' => 'USD'))), array(0));
    $enable_currencies = array_intersect_key($all_currencies, drupal_map_assoc($enabled_currencies));
  }

  $form['commerce_currency_settings'] = array(
    '#type' => 'container',
    '#tree' => TRUE,
  );

  foreach ($enable_currencies as $currency) {
    $form['commerce_currency_settings'][$currency['code']] = array(
      '#type' => 'fieldset',
      '#title' => t('Custom settings for @code', array('@code' => $currency['code'])),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#tree' => TRUE,
    );

    $form['commerce_currency_settings'][$currency['code']]['code'] = array(
      '#type' => 'textfield',
      '#title' => t('Code'),
      '#description' => t('The uppercase alphabetic currency code. For example USD.'),
      '#default_value' => $currency['code'],
      '#disabled' => TRUE,
      '#size' => 5,
      '#maxlength' => 3,
    );
    $form['commerce_currency_settings'][$currency['code']]['numeric_code'] = array(
      '#type' => 'textfield',
      '#title' => t('Numeric code'),
      '#description' => t('The numeric currency code. According to ISO4217 this code consists of three digits and first digit can be a zero.'),
      '#default_value' => $currency['numeric_code'],
      '#disabled' => TRUE,
      '#size' => 5,
    );
    $form['commerce_currency_settings'][$currency['code']]['symbol'] = array(
      '#type' => 'textfield',
      '#title' => t('Symbol'),
      '#description' => t('The currency symbol. For example $.'),
      '#default_value' => $currency['symbol'],
      '#required' => TRUE,
      '#size' => 3,
    );
    $form['commerce_currency_settings'][$currency['code']]['name'] = array(
      '#type' => 'textfield',
      '#title' => t('Name'),
      '#description' => t('The name of the currency. Translatable.'),
      '#default_value' => $currency['name'],
      '#required' => TRUE,
      '#size' => 16,
    );
    $form['commerce_currency_settings'][$currency['code']]['symbol_placement'] = array(
      '#type' => 'select',
      '#title' => t('Symbol placement'),
      '#description' => t('Defines where the currency symbol has to be placed for display. Allowed values: before, after, hidden.'),
      '#options' => array(
        'before' => t('Before'),
        'after' => t('After'),
        'hidden' => t('Hidden'),
      ),
      '#default_value' => $currency['symbol_placement'],
    );
    $form['commerce_currency_settings'][$currency['code']]['symbol_spacer'] = array(
      '#type' => 'textfield',
      '#title' => t('Symbol spacer'),
      '#description' => t("The spacer to put between the price amount and a currency symbol that appears after the amount; defaults to ' '."),
      '#default_value' => $currency['symbol_spacer'],
      '#type' => 'textfield',
      '#size' => 5,
    );
    $form['commerce_currency_settings'][$currency['code']]['code_placement'] = array(
      '#type' => 'select',
      '#title' => t('Code placement'),
      '#description' => t('Defines where the currency code has to be placed for display. Allowed values: before, after, hidden.'),
      '#options' => array(
        'before' => t('Before'),
        'after' => t('After'),
        'hidden' => t('Hidden'),
      ),
      '#default_value' => $currency['code_placement'],
    );
    $form['commerce_currency_settings'][$currency['code']]['code_spacer'] = array(
      '#type' => 'textfield',
      '#title' => t('Code spacer'),
      '#description' => t("The spacer to put between the price amount and currency code whether the code is displayed before or after the amount; defaults to ' '."),
      '#default_value' => $currency['code_spacer'],
      '#size' => 5,
    );
    $form['commerce_currency_settings'][$currency['code']]['minor_unit'] = array(
      '#type' => 'textfield',
      '#title' => t('Minor unit'),
      '#description' => t('Name of the minor unit of the currency. For example Cent. Translatable'),
      '#default_value' => $currency['minor_unit'],
      '#required' => TRUE,
      '#size' => 16,
    );
    $form['commerce_currency_settings'][$currency['code']]['major_unit'] = array(
      '#type' => 'textfield',
      '#title' => t('Major unit'),
      '#description' => t('Name of the minor unit of the currency. For example Cent. Translatable'),
      '#default_value' => $currency['major_unit'],
      '#required' => TRUE,
      '#size' => 16,
    );
    $form['commerce_currency_settings'][$currency['code']]['rounding_step'] = array(
      '#type' => 'select',
      '#title' => t('Rounding step'),
      '#description' => t('Defines which stepping has to is used for price rounding. For example Swiss Francs use a rounding_step of 0.05. This means a price like 10.93 is converted to 10.95. Currently only the steps 0.5,0.05... and 0.2, 0.02 ... are supported. This value has to be defined as string, otherwise the rounding results can be unpredictable. Default: 0 (no special rounding)'),
      '#options' => array(
        '0' => '0',
        '0.02' => '0.02',
        '0.2' => '0.2',
        '0.05' => '0.05',
        '0.5' => '0.5',
      ),
      '#default_value' => $currency['rounding_step'],
    );
    $form['commerce_currency_settings'][$currency['code']]['decimals'] = array(
      '#type' => 'textfield',
      '#title' => t('Decimals'),
      '#description' => t('The number of decimals to display. Default: 2'),
      '#default_value' => $currency['decimals'],
      '#element_validate' => array('element_validate_integer_positive'),
      '#required' => TRUE,
      '#size' => 5,
    );
    $form['commerce_currency_settings'][$currency['code']]['thousands_separator'] = array(
      '#type' => 'textfield',
      '#title' => t('Thousands separator'),
      '#description' => t('The char to split the value in groups of thousand. Default: ,'),
      '#default_value' => $currency['thousands_separator'],
      '#size' => 5,
    );
    $form['commerce_currency_settings'][$currency['code']]['decimal_separator'] = array(
      '#type' => 'textfield',
      '#title' => t('Decimal separator'),
      '#description' => t('The char to split the integer from the decimal part. Default: .'),
      '#default_value' => $currency['decimal_separator'],
      '#size' => 5,
    );
    $form['commerce_currency_settings'][$currency['code']]['format_callback'] = array(
      '#type' => 'textfield',
      '#title' => t('Format callback'),
      '#description' => t('Custom callback function to format a price value.'),
      '#default_value' => $currency['format_callback'],
      '#element_validate' => array('commerce_currency_settings_element_validate_function'),
      '#size' => 50,
    );
    $form['commerce_currency_settings'][$currency['code']]['conversion_callback'] = array(
      '#type' => 'textfield',
      '#title' => t('Conversion callback'),
      '#description' => t('Custom callback function to convert a price amount from one currency into another.'),
      '#default_value' => $currency['conversion_callback'],
      '#element_validate' => array('commerce_currency_settings_element_validate_function'),
      '#size' => 50,
    );
    $form['commerce_currency_settings'][$currency['code']]['conversion_rate'] = array(
      '#type' => 'textfield',
      '#title' => t('Conversion rate'),
      '#description' => t('The conversion rate of this currency calculated against the base currency, expressed as a decimal value denoting the value of one major unit of this currency when converted to the base currency. Default: 1'),
      '#default_value' => $currency['conversion_rate'],
      '#element_validate' => array('element_validate_number'),
      '#size' => 5,
    );
  }

  reset($enable_currencies);
  $form['commerce_currency_settings'][key($enable_currencies)]['#collapsed'] = FALSE;

  $form['warning'] = array(
    '#markup' => t('WARNING: If you change decimals settings in any currency, it will have the effect of multiplying or dividing all of your stored prices by the different of the number of decimals * 10. So, you will need to go in and change your prices or write a rule to multiply or divide them all by the different of the number of decimals * 10.'),
  );

  $form['#submit'][] = 'commerce_currency_settings_settings_form_submit';

  return system_settings_form($form);
}

/**
 * Form element validation handler for function elements.
 */
function commerce_currency_settings_element_validate_function($element, &$form_state, $form) {
  if (!empty($element['#value']) && !function_exists($element['#value'])) {
    form_error($element, t('Undefined function.'));
  }
}

/**
 * Form validate handler for the Commerce Currency Settings settings form.
 */
function commerce_currency_settings_settings_form_validate($form, &$form_state) {
  $core_currencies = commerce_currency_settings_core_currencies(TRUE, TRUE);
  $values = array();
  foreach ($form_state['values']['commerce_currency_settings'] as $code => $currency) {
    $currency_diff = array_diff_assoc($currency, $core_currencies[$code]);
    if (count($currency_diff) > 0) {
      $values[$code] = $currency_diff;
    }
  }
  $form_state['values']['commerce_currency_settings'] = $values;
}

/**
 * Form submit handler for the Commerce Currency Settings settings form.
 */
function commerce_currency_settings_settings_form_submit($form, &$form_state) {
  cache_clear_all('commerce_currencies:', 'cache', TRUE);
}

/**
 * Implements hook_commerce_currency_info_alter().
 */
function commerce_currency_settings_commerce_currency_info_alter(&$currencies, $langcode) {
  $commerce_currency_settings = variable_get('commerce_currency_settings', array());
  foreach ($commerce_currency_settings as $currency => $values) {
    foreach ($values as $name => $value) {
      $currencies[$currency][$name] = $value;
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function commerce_currency_settings_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'commerce_currency_info_alter' && count($implementations) > 1) {
    $group = $implementations['commerce_currency_settings'];
    unset($implementations['commerce_currency_settings']);
    $implementations['commerce_currency_settings'] = $group;
  }
}

/**
 * Returns an array of all available core currencies.
 *
 * @param boolean $enabled
 *   Boolean indicating whether or not to return only enabled core currencies.
 * @param boolean $reset
 *   Boolean indicating whether or not the cache should be reset before currency
 *     data is loaded and returned.
 *
 * @return array
 *   An array of altered currency arrays keyed by the currency code.
 */
function commerce_currency_settings_core_currencies($enabled = FALSE, $reset = FALSE) {
  $currencies = &drupal_static(__FUNCTION__);

  // If there is no static cache for currencies yet or a reset was specified...
  if (!isset($currencies) || $reset) {
    // First attempt to load currency data from the cache if we simply didn't
    // have it statically cached and a reset hasn't been specified.
    if (!$reset && $currencies_cached = cache_get('commerce_currency_settings_core_currencies:en')) {
      $currencies['all'] = $currencies_cached->data;
    }
    else {
      // Otherwise we'll load currency definitions afresh from enabled modules.
      // Begin by establishing some default values for currencies.
      $defaults = array(
        'symbol' => '',
        'minor_unit' => '',
        'decimals' => 2,
        'rounding_step' => 0,
        'thousands_separator' => ',',
        'decimal_separator' => '.',
        'symbol_placement' => 'hidden',
        'symbol_spacer' => ' ',
        'code_placement' => 'after',
        'code_spacer' => ' ',
        'format_callback' => '',
        'conversion_callback' => '',
        'conversion_rate' => 1,
      );

      // Include the currency file and invoke the currency info hook.
      module_load_include('inc', 'commerce', 'includes/commerce.currency');
      $currencies['all'] = module_invoke_all('commerce_currency_info');

      // Add default values if they don't exist.
      foreach ($currencies['all'] as $currency_code => $currency) {
        $currencies['all'][$currency_code] = array_merge($defaults, $currency);
      }

      // Sort the currencies.
      ksort($currencies['all']);

      cache_set('commerce_currency_settings_core_currencies:en', $currencies['all']);
    }

    // Form an array of enabled currencies based on the variable set by the
    // checkboxes element on the currency settings form.
    $enabled_currencies = array_diff(array_values(variable_get('commerce_enabled_currencies', array('USD' => 'USD'))), array(0));
    $currencies['enabled'] = array_intersect_key($currencies['all'], drupal_map_assoc($enabled_currencies));
  }

  return $enabled ? $currencies['enabled'] : $currencies['all'];
}
