<?php
/**
 * @file
 * Mime type detection based on "FileInfo".
 */

/**
 * Get wrappers that will be overridden.
 *
 * @return array
 *   An array with wrappers for override.
 */
function _mimeinfo_get_wrappers() {
  return variable_get('mimeinfo_wrappers', array());
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @ingroup forms
 *
 * @see system_file_system_settings()
 */
function mimeinfo_form_system_file_system_settings_alter(array &$form, array &$form_state) {
  $link_attributes = array('attributes' => array('target' => '_blank'));
  $wrappers = array();

  foreach (file_get_stream_wrappers() as $wrapper => $data) {
    $wrappers[$wrapper] = $data['name'] . " ($wrapper://)";
  }

  $form['mimeinfo_wrappers'] = array(
    '#type' => 'select',
    '#title' => t('Override the stream wrappers'),
    '#options' => $wrappers,
    '#multiple' => TRUE,
    '#default_value' => _mimeinfo_get_wrappers(),
    '#description' => t('!component was used to override default !stream. It helps to determine the MIME-type of files correctly.', array(
      '!component' => l(t('File Information'), 'http://php.net/manual/en/book.fileinfo.php', $link_attributes),
      '!stream' => l(t('stream wrapper'), 'https://api.drupal.org/api/drupal/includes!stream_wrappers.inc/7', $link_attributes),
    )),
  );
}

/**
 * Implements hook_stream_wrappers_alter().
 */
function mimeinfo_stream_wrappers_alter(array &$wrappers) {
  foreach (_mimeinfo_get_wrappers() as $wrapper) {
    $class = 'MimeInfo' . implode(array_map('ucfirst', preg_split('/[^\w+]|_/i', $wrapper))) . 'StreamWrapper';

    if (class_exists($class)) {
      $wrappers[$wrapper]['class'] = $class;
    }
    else {
      watchdog('MIME Info', 'The wrapper for type "%type" has been overridden, but class "%class" was not found! Due to that will be used the "%default" class.', array(
        '%type' => $wrapper,
        '%class' => $class,
        '%default' => $wrappers[$wrapper]['class'],
      ));
    }
  }
}

/**
 * Get MIME type of file.
 *
 * @param string $uri
 *   File URI.
 *
 * @return string|bool
 *   File MIME type or FALSE.
 */
function mimeinfo($uri) {
  // @see https://github.com/symfony/HttpFoundation/blob/v2.7.0/File/MimeType/FileinfoMimeTypeGuesser.php#L65-L69
  if (function_exists('finfo_open')) {
    $file_info = new finfo(FILEINFO_MIME_TYPE);

    return $file_info->file($uri);
  }
  // @see https://github.com/symfony/HttpFoundation/blob/v2.7.0/File/MimeType/FileBinaryMimeTypeGuesser.php#L56-L85
  elseif ('\\' !== DIRECTORY_SEPARATOR && function_exists('passthru') && function_exists('escapeshellarg')) {
    ob_start();
    passthru(sprintf('file -b --mime %s 2>/dev/null', escapeshellarg(drupal_realpath($uri))), $return);

    if ($return > 0) {
      ob_end_clean();
    }
    else {
      if (preg_match('#^([a-z0-9\-]+/[a-z0-9\-\.]+)#i', trim(ob_get_clean()), $match)) {
        return $match[1];
      }
    }
  }

  return FALSE;
}

/**
 * Class MimeInfoPublicStreamWrapper.
 */
class MimeInfoPublicStreamWrapper extends DrupalPublicStreamWrapper {
  /**
   * {@inheritdoc}
   */
  public static function getMimeType($uri, $mapping = NULL) {
    return mimeinfo($uri) ?: parent::getMimeType($uri, $mapping);
  }

}

/**
 * Class MimeInfoPrivateStreamWrapper.
 */
class MimeInfoPrivateStreamWrapper extends DrupalPrivateStreamWrapper {
  /**
   * {@inheritdoc}
   */
  public static function getMimeType($uri, $mapping = NULL) {
    return MimeInfoPublicStreamWrapper::getMimeType($uri, $mapping);
  }

}

/**
 * Class MimeInfoTemporaryStreamWrapper.
 */
class MimeInfoTemporaryStreamWrapper extends DrupalTemporaryStreamWrapper {
  /**
   * {@inheritdoc}
   */
  public static function getMimeType($uri, $mapping = NULL) {
    return MimeInfoPublicStreamWrapper::getMimeType($uri, $mapping);
  }

}
