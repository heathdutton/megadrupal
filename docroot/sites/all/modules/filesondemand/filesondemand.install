<?php

/**
 * @file
 * Install, update and uninstall functions for the filesondemand module.
 *
 */

/**
 * Implements hook_schema().
 */
function filesondemand_schema() {
  $schema['filesondemand'] = array(
    'description' => 'Record all the files that get created on demand.',
    'fields' => array(
      'handler' => array(
        'description' => 'The name of the handler this file belongs to.',
        'type' => 'varchar',
        'length' => 20,
        'not null' => TRUE,
        'default' => '',
      ),
      'path' => array(
        'description' => 'Path of the file relative to the handler.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'scheme' => array(
        'description' => 'The scheme that this file is stored under (ex. public, private).',
        'type' => 'varchar',
        'length' => 20,
        'not null' => TRUE,
        'default' => '',
      ),
      'uri' => array(
        'description' => 'The URI to access the file.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'timestamp' => array(
        'description' => 'UNIX timestamp for when the file was added.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array(
      'handler' => array('handler'),
      'timestamp' => array('timestamp'),
    ),
    'unique indexes' => array(
      'uri' => array('uri'),
    ),
    'primary key' => array('handler', 'path', 'scheme'),
  );

  return $schema;
}

/**
 * Implements hook_uninstall().
 */
function filesondemand_uninstall() {
  variable_del('filesondemand_expire_limit_per_handler');

  // TODO: This won't work! By the time we are being uninstalled, all of the
  // handlers would be uninstalled too. How to handle this?

  //foreach (filesondemand_get_handler() as $handler => $info) {
  //  variable_del('filesondemand_override_expires_after_' . $handler);
  //}
}

/**
 * Update the 'filesondemand' table for filesystem changes in Drupal 7.
 */
function filesondemand_update_7000() {
  $schema['filesondemand'] = array(
    'description' => 'Record all the files that get created on demand.',
    'fields' => array(
      'handler' => array(
        'description' => 'The name of the handler this file belongs to.',
        'type' => 'varchar',
        'length' => 20,
        'not null' => TRUE,
        'default' => '',
      ),
      'path' => array(
        'description' => 'Path of the file relative to the handler.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'scheme' => array(
        'description' => 'The scheme that this file is stored under (ex. public, private).',
        'type' => 'varchar',
        'length' => 20,
        'not null' => TRUE,
        'default' => '',
      ),
      'uri' => array(
        'description' => 'The URI to access the file.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'timestamp' => array(
        'description' => 'UNIX timestamp for when the file was added.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array(
      'handler' => array('handler'),
      'timestamp' => array('timestamp'),
    ),
    'unique indexes' => array(
      'uri' => array('uri'),
    ),
    'primary key' => array('handler', 'path', 'scheme'),
  );

  db_rename_table('filesondemand', 'd6_upgrade_filesondemand');
  db_create_table('filesondemand', $schema['filesondemand']);

  $public_path = variable_get('file_public_path', conf_path() . '/files');
  $private_path = variable_get('file_private_path', '');

  $result = db_select('d6_upgrade_filesondemand', 'd6_fod')
    ->fields('d6_fod', array('handler', 'path', 'filepath', 'timestamp'))
    ->execute();

  foreach ($result as $obj) {
    if (!file_exists($obj->filepath)) {
      continue;
    }

    $item = array(
      'handler'   => $obj->handler,
      'path'      => $obj->path,
      'timestamp' => $obj->timestamp,
    );

    if (strpos($obj->filepath, $public_path) === 0) {
      $item['scheme'] = 'public';
    }
    elseif (!empty($private_path) && strpos($obj->filepath, $private_path) === 0) {
      $item['scheme'] = 'private';
    }
    else {
      // We don't know how to update this, so we remove the file from disk. The
      // thinking is that it'll get regenerated later. The main worry is if we
      // don't update this, then the cache will never be cleared!
      @unlink($obj->filepath);
      continue;
    }

    // build the URI
    $item['uri'] = $item['scheme'] . '://' . $item['handler'] . '/' . $item['path'];

    // insert on the new table
    db_insert('filesondemand')
      ->fields($item)
      ->execute();
  }

  db_drop_table('d6_upgrade_filesondemand');
}

