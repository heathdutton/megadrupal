<?php

/**
 * @file
 * Adds target attribute to url. Largely based on filter_url.
 */

/**
 * Implements hook_filter_info().
 */
function target_filter_url_filter_info() {
  $filters = array();

  $filters['target_filter_url'] = array(
    'title' => t('Convert URLs into links with target attribute selection'),
    'process callback' => '_target_filter_url_process',
    'settings callback' => '_target_filter_url_settings',
    'default settings' => array(
      'target_filter_url_length' => 32,
      'target_filter_url_target' => '_blank',
    ),
    'tips callback' => '_target_filter_url_tips',
  );

  return $filters;
}

/**
 * Implements callback_filter_settings().
 *
 * Filter settings callback for the Target Filter URL content filter.
 */
function _target_filter_url_settings($form, &$form_state, $filter, $format, $defaults) {
  $filter->settings += $defaults;

  $settings = array();

  $settings['target_filter_url_length'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum link text length'),
    '#default_value' => $filter->settings['target_filter_url_length'],
    '#size' => 5,
    '#maxlength' => 4,
    '#field_suffix' => t('characters'),
    '#description' => t('URLs longer than this number of characters will be truncated to prevent long strings that break formatting. The link itself will be retained; just the text portion of the link will be truncated.'),
    '#element_validate' => array('element_validate_integer_positive'),
  );

  $settings['target_filter_url_target'] = array(
    '#type' => 'select',
    '#title' => t('URL target'),
    '#default_value' => $filter->settings['target_filter_url_target'],
    '#options' => array(
      '_blank' => '_blank',
      '_self' => '_self',
      '_parent' => '_parent',
      '_top' => '_top',
    ),
    '#description' => t('Links will include this target attibute'),
    '#element_validate' => array('target_filter_url_validate_option'),
  );

  return $settings;
}

/**
 * Validate that the option selected is one of the options.
 */
function target_filter_url_validate_option($element, &$form_state) {
  $value = $element['#value'];
  $options = $element['#options'];
  if (!in_array($value, $options, TRUE)) {
    form_error($element, t('%name must be a valid target.', array('%name' => $element['#title'])));
  }
}

/**
 * Implements callback_filter_process().
 *
 * Converts text into hyperlinks automatically.
 *
 * This filter identifies and makes clickable three types of "links".
 * - URLs like http://example.com.
 * - E-mail addresses like name@example.com.
 * - Web addresses without the "http://" protocol defined, like www.example.com.
 * Each type must be processed separately, as there is no one regular
 * expression that could possibly match all of the cases in one pass.
 *
 * We pass target attribute through a helper function that selects process.
 */
function _target_filter_url_process($text, $filter) {
  // Tags to skip and not recurse into.
  $ignore_tags = 'a|script|style|code|pre';
  $target = $filter->settings['target_filter_url_target'];

  // Pass length to regexp callback.
  _target_filter_url_trim(NULL, $filter->settings['target_filter_url_length']);
  // Create an array which contains the regexps for each type of link.
  // The key to the regexp is the name of a function that is used as
  // callback function to process matches of the regexp. The callback function
  // is to return the replacement for the match. The array is used and
  // matching/replacement done below inside some loops.
  $tasks = array();

  // Prepare protocols pattern for absolute URLs.
  // check_url() will replace any bad protocols with HTTP, so we need to support
  // the identical list. While '//' is technically optional for MAILTO only,
  // we cannot cleanly differ between protocols here without hard-coding MAILTO,
  // so '//' is optional for all protocols.
  // @see filter_xss_bad_protocol()
  $protocols = variable_get('filter_allowed_protocols', array(
      'ftp',
      'http',
      'https',
      'irc',
      'mailto',
      'news',
      'nntp',
      'rtsp',
      'sftp',
      'ssh',
      'tel',
      'telnet',
      'webcal',
    ));
  $protocols = implode(':(?://)?|', $protocols) . ':(?://)?';

  // Prepare domain name pattern.
  // The ICANN seems to be on track towards accepting more diverse top level
  // domains, so this pattern has been "future-proofed" to allow for TLDs
  // of length 2-64.
  $domain = '(?:[A-Za-z0-9._+-]+\.)?[A-Za-z]{2,64}\b';
  $ip = '(?:[0-9]{1,3}\.){3}[0-9]{1,3}';
  $auth = '[a-zA-Z0-9:%_+*~#?&=.,/;-]+@';
  $trail = '[a-zA-Z0-9:%_+*~#&\[\]=/;?!\.,-]*[a-zA-Z0-9:%_+*~#&\[\]=/;-]';

  // Prepare pattern for optional trailing punctuation.
  // Even these characters could have a valid meaning for the URL, such usage is
  // rare compared to using a URL at the end of or within a sentence, so these
  // trailing characters are optionally excluded.
  $punctuation = '[\.,?!]*?';

  // Match absolute URLs.
  $url_pattern = "(?:$auth)?(?:$domain|$ip)/?(?:$trail)?";
  $pattern = "`((?:$protocols)(?:$url_pattern))($punctuation)`";
  $tasks['target_filter_url_parse_full_links'] = $pattern;

  // Match e-mail addresses.
  $url_pattern = "[A-Za-z0-9._-]{1,254}@(?:$domain)";
  $pattern = "`($url_pattern)`";
  $tasks['target_filter_url_parse_email_links'] = $pattern;

  // Match www domains.
  $url_pattern = "www\.(?:$domain)/?(?:$trail)?";
  $pattern = "`($url_pattern)($punctuation)`";
  $tasks['target_filter_url_parse_partial_links'] = $pattern;

  // Each type of URL needs to be processed separately. The text is joined and
  // re-split after each task, since all injected HTML tags must be correctly
  // protected before the next task.
  foreach ($tasks as $task => $pattern) {
    // HTML comments need to be handled separately, as they may contain HTML
    // markup, especially a '>'. Therefore, remove all comment contents and add
    // them back later.
    _target_filter_url_escape_comments('', TRUE);
    $text = preg_replace_callback('`<!--(.*?)-->`s', '_target_filter_url_escape_comments', $text);

    // Split at all tags; ensures that no tags or attributes are processed.
    $chunks = preg_split('/(<.+?>)/is', $text, -1, PREG_SPLIT_DELIM_CAPTURE);
    // PHP ensures that the array consists of alternating delimiters and
    // literals, and begins and ends with a literal (inserting NULL as
    // required). Therefore, the first chunk is always text:
    $chunk_type = 'text';
    // If a tag of $ignore_tags is found, it is stored in $open_tag and only
    // removed when the closing tag is found. Until the closing tag is found,
    // no replacements are made.
    $open_tag = '';
    for ($i = 0; $i < count($chunks); $i++) {
      if ($chunk_type == 'text') {

        // Only process this text if there are no unclosed $ignore_tags.
        if ($open_tag == '') {

          // If there is a match, inject a link into this chunk via the callback
          // function contained in $task.
          $chunks[$i] = _target_filter_url_helper_callback($task, $pattern, $chunks[$i], $target);
        }

        // Text chunk is done, so next chunk must be a tag.
        $chunk_type = 'tag';
      }
      else {
        // Only process this tag if there are no unclosed $ignore_tags.
        if ($open_tag == '') {
          // Check whether this tag is contained in $ignore_tags.
          if (preg_match("`<($ignore_tags)(?:\s|>)`i", $chunks[$i], $matches)) {
            $open_tag = $matches[1];
          }
        }
        // Otherwise, check whether this is the closing tag for $open_tag.
        else {
          if (preg_match("`<\/$open_tag>`i", $chunks[$i], $matches)) {
            $open_tag = '';
          }
        }
        // Tag chunk is done, so next chunk must be text.
        $chunk_type = 'text';
      }
    }

    $text = implode($chunks);

    // Revert back to the original comment contents.
    _target_filter_url_escape_comments('', FALSE);
    $text = preg_replace_callback('`<!--(.*?)-->`', '_target_filter_url_escape_comments', $text);
  }

  return $text;
}

/**
 * Selects callback and passes variables from target_filter_url().
 *
 * We inject target attribute through a helper function
 */
function _target_filter_url_helper_callback($task, $pattern, $chunk, $target) {
  switch ($task) {
    case 'target_filter_url_parse_full_links':
      return _target_filter_url_parse_full_links($pattern, $chunk, $target);

    case 'target_filter_url_parse_email_links':
      return _target_filter_url_parse_email_links($pattern, $chunk, $target);

    case 'target_filter_url_parse_partial_links':
      return _target_filter_url_parse_partial_links($pattern, $chunk, $target);
  }
}

/**
 * Makes links out of absolute URLs.
 *
 * Callback for preg_replace_callback() within target_filter_url().
 */
function _target_filter_url_parse_full_links($pattern, $chunk, $target) {

  // The $i:th parenthesis in the regexp contains the URL.
  return preg_replace_callback($pattern,
  function ($match)use($target) {
    $i = 1;
    $match[$i] = decode_entities($match[$i]);
    $caption = check_plain(_target_filter_url_trim($match[$i]));
    $match[$i] = check_plain($match[$i]);
    return '<a href="' . $match[$i] . '" target="' . $target . '">' . $caption . '</a>' . $match[$i + 1];
  }
  , $chunk
  );
}

/**
 * Makes links out of e-mail addresses.
 *
 * Callback for preg_replace_callback() within target_filter_url().
 */
function _target_filter_url_parse_email_links($pattern, $chunk, $target) {

  // The $i:th parenthesis in the regexp contains the URL.
  return preg_replace_callback($pattern,
  function ($match)use($target) {
    $i = 0;
    $match[$i] = decode_entities($match[$i]);
    $caption = check_plain(_target_filter_url_trim($match[$i]));
    $match[$i] = check_plain($match[$i]);
    return '<a href="mailto:' . $match[$i] . '" target="' . $target . '">' . $caption . '</a>';
  }
  , $chunk
  );
}

/**
 * Makes links out of domain names starting with www.
 *
 * Callback for preg_replace_callback() within target_filter_url().
 */
function _target_filter_url_parse_partial_links($pattern, $chunk, $target) {
  // The $i:th parenthesis in the regexp contains the URL.
  return preg_replace_callback($pattern,
  function ($match)use($target) {
    $i = 1;
    $match[$i] = decode_entities($match[$i]);
    $caption = check_plain(_target_filter_url_trim($match[$i]));
    $match[$i] = check_plain($match[$i]);
    return '<a href="http://' . $match[$i] . '" target="' . $target . '">' . $caption . '</a>' . $match[$i + 1];
  }
  , $chunk
  );
}

/**
 * Escapes the contents of HTML comments.
 *
 * Callback for preg_replace_callback() within target_filter_url().
 *
 * @param $match
 *   An array containing matches to replace from preg_replace_callback(),
 *   whereas $match[1] is expected to contain the content to be filtered.
 * @param $escape
 *   (optional) A Boolean indicating whether to escape (TRUE) or unescape
 *   comments (FALSE). Defaults to NULL, indicating neither. If TRUE, statically
 *   cached $comments are reset.
 */
function _target_filter_url_escape_comments($match, $escape = NULL) {
  static $mode, $comments = array();

  if (isset($escape)) {
    $mode = $escape;
    if ($escape) {
      $comments = array();
    }
    return;
  }

  // Replace all HTML coments with a '<!-- [hash] -->' placeholder.
  if ($mode) {
    $content = $match[1];
    $hash = md5($content);
    $comments[$hash] = $content;
    return "<!-- $hash -->";
  }
  // Or replace placeholders with actual comment contents.
  else {
    $hash = $match[1];
    $hash = trim($hash);
    $content = $comments[$hash];
    return "<!--$content-->";
  }
}

/**
 * Shortens long URLs to http://www.example.com/long/url...
 */
function _target_filter_url_trim($text, $length = NULL) {
  static $_length;
  if ($length !== NULL) {
    $_length = $length;
  }

  // Use +3 for '...' string length.
  if ($_length && strlen($text) > $_length + 3) {
    $text = substr($text, 0, $_length) . '...';
  }

  return $text;
}

/**
 * Implements callback_filter_tips().
 *
 * Provides help for the URL filter.
 *
 * @see filter_filter_info()
 */
function _target_filter_url_tips($filter, $format, $long = FALSE) {
  return t('Web page addresses and e-mail addresses automatically turn into links with the target attribute set to @target.', array('@target' => $filter->settings['target_filter_url_target']));
}
