<?php

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add a checkbox for the 'commerce_user_profile_pane' instance settings on the 'Edit
 * field instance' form.
 */
function commerce_user_profile_pane_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id) {
  $instance = $form['#instance'];

  if ($instance['entity_type'] == 'user') {
    $form['instance']['settings']['commerce_user_profile_pane'] = array(
      '#type' => 'checkbox',
      '#title' => t('Display on commerce user profile pane form.'),
      '#description' => t("If this option is enabled this field will be captured at checkout if the commerce user profile pane is displayed."),
      // Display below 'required' checkbox.
      '#weight' => $form['instance']['required']['#weight'] + .2,
      '#default_value' => isset($instance['settings']['commerce_user_profile_pane']) ? $instance['settings']['commerce_user_profile_pane'] : '',
    );

    $form['instance']['settings']['commerce_user_profile_pane_required'] = array(
      '#type' => 'checkbox',
      '#title' => t('Required field at commerce user profile pane form.'),
      '#description' => t('This field is mandatory when displayed at commerce user profile pane form.'),
      // Display below 'required' checkbox.
      '#weight' => $form['instance']['required']['#weight'] + .3,
      '#default_value' => isset($instance['settings']['commerce_user_profile_pane_required']) ? $instance['settings']['commerce_user_profile_pane_required'] : '',
      '#states' => array(
        'invisible' => array('input[name="instance[settings][commerce_user_profile_pane]"]' => array('checked' => FALSE)),
      ),
    );
  }
}

/**
 * Implements hook_field_info_alter().
 */
function commerce_user_profile_pane_field_info_alter(&$info) {
  // Add the 'commerce_user_profile_pane' instance setting to all field types.
  foreach ($info as $field_type => &$field_type_info) {
    $field_type_info += array('instance_settings' => array());
    $field_type_info['instance_settings'] += array(
      'commerce_user_profile_pane' => 0,
      'commerce_user_profile_pane_required' => 0,
    );
  }
}

/**
 * Implements hook_commerce_checkout_pane_info().
 */
function commerce_user_profile_pane_commerce_checkout_pane_info() {
  $checkout_panes = array();

  // get the configured pane title
  $pane_title = variable_get('commerce_user_profile_pane_title', t('User Profile'));

  $checkout_panes['commerce_user_profile_pane'] = array(
    'title' => $pane_title,
    'base' => 'commerce_user_profile_pane',
    'page' => 'review',
    'weight' => '-10',
    'fieldset' => TRUE,
  );

  return $checkout_panes;
}

/**
 * Checkout pane callback: returns the checkout pane's settings form.
 */
function commerce_user_profile_pane_settings_form($checkout_pane) {
  $form = array();

  $form['commerce_user_profile_pane_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Pane title'),
    '#default_value' => variable_get('commerce_user_profile_pane_title', t('User Profile Pane')),
    '#required' => TRUE,
  );

  return $form;
}

/**
 * Checkout pane callback: presents pane which content is set via rules.
 */
function commerce_user_profile_pane_checkout_form($form, &$form_state, $checkout_pane, $order) {
  global $user;
  $pane_form = array('#parents' => array($checkout_pane['pane_id']));

  if ($user->uid == 0) {
    $pane_form['#user'] = drupal_anonymous_user();
  }
  else {
    $pane_form['#user'] = user_load($user->uid);
  }

  // Attach field widgets, and hide the ones where the 'user_register_form'
  // setting is not on.
  field_attach_form('user', $pane_form['#user'], $pane_form, $form_state, $langcode = NULL);

  // get the fields that are configured to be captured in the pane
  $capture_fields = commerce_user_profile_pane_capture_fields();
  // set all the elements to don't display except the capture fields
  foreach ($pane_form as $key => $element) {
    if (!element_property($key) && !array_key_exists($key, $capture_fields)) {
      $pane_form[$key]['#access'] = FALSE;
    }
  }

  return $pane_form;
}

/**
 * Implements hook_field_widget_form_alter().
 */
function commerce_user_profile_pane_field_widget_form_alter(&$element, &$form_state, $context) {
  // get the variables from context
  $form = $context['form'];
  $field = $context['field'];
  $instance = $context['instance'];
  $langcode = $context['langcode'];
  $items = $context['items'];
  $delta = $context['delta'];
  $function = $instance['widget']['module'] . '_field_widget_form';

  // alter only the user form if commerce_user_profile_pane is a parent form due
  // athis is an ttached form.
  if (in_array('commerce_user_profile_pane', $form['#parents']) && isset($element['#entity_type']) && $element['#entity_type'] == 'user') {
    // get the fields that are configured to be captured in the pane
    $capture_fields = commerce_user_profile_pane_capture_fields();

    // if the field is configured to capture and as required then alter the #required
    // property
    if (array_key_exists($field['field_name'], $capture_fields) && $capture_fields[$field['field_name']]) {
      $element['#required'] = 1;
      $element['value']['#required'] = 1;
      // for date fields we need to override the field instance configuration
      // that is located in form_state instance due date_elements.inc override
      // #required with $instance['required']
      if ($field['type'] == 'datestamp') {
        $form_state_parents = _field_form_state_parents($element['#field_parents'], $element['#field_name'], $element['#language']);
        $field_ref = &drupal_array_get_nested_value($form_state, $form_state_parents);
        $field_ref['instance']['required'] = 1;
      }
    }
  }
}

/**
 * Retrieve the list of field names that are configured to be captured at user profile pane.
 */
function commerce_user_profile_pane_capture_fields() {
  $capture_fields = array();
  foreach (field_info_instances('user', 'user') as $field_name => $instance) {
    if (!empty($instance['settings']['commerce_user_profile_pane'])) {
      if ($instance['settings']['commerce_user_profile_pane_required']) {
        $capture_fields[$field_name] = 1;
      }
      else {
        $capture_fields[$field_name] = 0;
      }
    }
  }
  return $capture_fields;
}

/**
 * Checkout pane callback: receive the submitted form and we process here the
 * add to order add-ons products.
 */
function commerce_user_profile_pane_checkout_form_submit($form, &$form_state, $checkout_pane, $order) {
  global $user;

  if ($user->uid == 0) {
    // At this point user account don't exists so we need to update it just
    // after the account is created and as the user account for anonymous users
    // is created by Drupal Commerce via Rules we will need a rule with highest
    // weight than that rule to ensure that is updated correctly.
     $order->data['commerce_user_profile_pane'] = $form_state['values']['commerce_user_profile_pane'];
     commerce_order_save($order);
  }
  else {
    // process the user profile pane input values and update the user profile
    _commerce_user_profile_pane_update_user_profile($form['commerce_user_profile_pane']['#user'], $form_state['values']['commerce_user_profile_pane']);
  }
}

/**
 * Helper function that process the commerce user profile pane input for the fields
 * that are enabled to get captured updating the user field values.
 *
 * @param object $user
 *   the user to update
 * @param array $form_input
 *   the form input values captured with the submission of commerce user profile pane.
 */
function _commerce_user_profile_pane_update_user_profile($user, $form_input) {
  // remove from $form_state['values'] the fields that are not configured to display
  // we don't want to override when save
  $capture_fields = commerce_user_profile_pane_capture_fields();
  foreach ($form_input as $field_name => $value) {
    if (!array_key_exists($field_name, $capture_fields)) {
      if (isset($form_input[$field_name])) {
        unset($form_input[$field_name]);
      }
    }
  }

  // update the account profile
  $account = user_save($user, $form_input);
}
