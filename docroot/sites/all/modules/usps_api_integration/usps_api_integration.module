<?php

/**
 * @file
 * Provides a way to interact with the USPS API.
 * TODO: constants for the exceptions.
 */

/**
 * Implements hook_help().
 */
function usps_api_integration_help($path, $arg) {
  switch ($path) {
    case 'admin/help#usps':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The USPS module provides a way to interact with the USPS API.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_menu().
 */
function usps_api_integration_menu() {
  $items['admin/config/services/usps'] = array(
    'title' => 'USPS Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('usps_api_integration_form'),
    'access arguments' => array('administer usps'),
    'description' => 'Easy PHP layer to interact with the USPS API.',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function usps_api_integration_permission() {
  return array(
    'administer usps' => array(
      'title' => t('Administer USPS Settings'),
      'description' => t('Allow this role to change USPS settings.'),
    ),
  );
}
/**
 * Implements hook_libraries_info().
 */
function usps_api_integration_libararies_info() {
  $libraries['usps'] = array(
    'name' => 'USPS PHP API',
    'vendor url' => 'https://github.com/VinceG/USPS-php-api',
    'download url' => 'https://github.com/VinceG/USPS-php-api/archive/master.zip',
    'files' => array(
      'php' => array(
        'USPSBase.php',
        'USPSAddress.php',
        'USPSAddressVerify.php',
        'USPSCityStateLookup.php',
        'USPSFirstClassServiceStandards.php',
        'USPSRate.php',
        'USPSServiceDeliveryCalculator.php',
        'USPSTrackConfirm.php',
        'USPSZipCodeLookup.php',
        'XMLParser.php',
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_form().
 */
function usps_api_integration_form($form, &$form_state) {
  $form['usps_api_integration_username'] = array(
    '#type' => 'textfield',
    '#title' => t('USPS API Username'),
    '#default_value' => variable_get('usps_api_integration_username', ''),
    '#attributes' => array('placeholder' => 'Enter your USPS API username.'),
  );

  $form['usps_api_integration_api_status'] = array(
    '#type' => 'radios',
    '#title' => t('API Status'),
    '#default_value' => variable_get('usps_api_integration_api_status', 'testing'),
    '#options' => array('testing', 'production'),
    '#description' => t('Determines which URL to use for which api mode you are qualified for.'),
  );

  $form['usps_api_integration_debug_mode'] = array(
    '#type' => 'checkbox',
    '#title' => t('API Debug Mode'),
    '#default_value' => variable_get('usps_api_integration_debug_mode', 0),
    '#description' => t('Check this checkbox if you want to enable debug mode'),
  );

  return system_settings_form($form);
}

/**
 * Gets the key and verifies it's set. Watchdogs and throws exceptions if not.
 * @return string
 *   API username.
 * @throws Exception
 */
function usps_api_integration_get_key() {
  $key = variable_get('usps_api_integration_username');
  if (empty($key)) {
    watchdog('usps_api', 'USPS API integration module is incorrectly configured.', array(), WATCHDOG_ERROR);
    throw new Exception(t('USPS API integration module is incorrectly configured.'), 503);
  }
  return $key;
}
/**
 * Uses USPS API to make a request to verify an address.
 *
 * @param array $address_info
 *   An array that contains necessary data for address.
 *   $address_info = array(
 *     'name' => Name/Business Name - string (optional),
 *     'apt' => apartment/suite number - string (optional),
 *     'address' => street address - string (required),
 *     'city' => city - string (required)',
 *     'state' => state - string (required),
 *     'zip' => 5 digit zip code - integer (required),
 *     'zip4' => 4 digit zip extension - integer (optional),
 *   );
 *
 * @return array
 *   An array of the verified/corrected address info or error message.
 * @throws Exception
 */
function usps_api_integration_verify_address($address_info = array()) {
  if (variable_get('usps_api_integration_debug_mode')) {
    return array(
      'AddressValidateResponse' => array(
        'Address' => array(
          'Address1' => variable_get('usps_api_integration_test_address1'),
          'Address2' => variable_get('usps_api_integration_test_address2'),
          'City' => variable_get('usps_api_integration_test_city'),
          'State' => variable_get('usps_api_integration_test_state'),
          'Zip5' => variable_get('usps_api_integration_test_zip5'),
          'Zip4' => variable_get('usps_api_integration_test_zip4'),
          '@attributes' => array('ID' => '1'),
        ),
      ),
    );
  }
  require_once libraries_get_path('usps') . '/USPSAddressVerify.php';
  $key = usps_api_integration_get_key();
  $verify = new USPSAddressVerify($key);
  // Use the testing URL if in testing.
  if (variable_get('usps_api_integration_api_status') == 'testing') {
    $verify->setTestMode(TRUE);
  }
  $address = new USPSAddress();
  $address->setFirmName(isset($address_info['name']) ? $address_info['name'] : '');
  $address->setApt(isset($address_info['apt']) ? $address_info['apt'] : '');
  $address->setAddress(isset($address_info['address']) ? $address_info['address'] : '');
  $address->setCity(isset($address_info['city']) ? $address_info['city'] : '');
  $address->setState(isset($address_info['state']) ? $address_info['state'] : '');
  $address->setZip5(isset($address_info['zip']) ? $address_info['zip'] : '');
  $address->setZip4(isset($address_info['zip4']) ? $address_info['zip4'] : '');

  // Add the address object to the address verify class.
  $verify->addAddress($address);
  $verify->verify();

  if ($verify->isSuccess()) {
    return $verify->getArrayResponse();
  }
  else {
    throw new Exception(t('Error: @message', array('@message' => $verify->getErrorMessage())), 500);
  }
}

/**
 * Uses USPS API to look up the city and state for a given zip code.
 *
 * @param string $zip_code
 *   The 5 digit zip code to send to USPS to retrieve city and state.
 *
 * @return array
 *   Array of city and state information from USPS or error message
 * @throws Exception
 */
function usps_api_integration_city_state_lookup($zip_code) {
  if (variable_get('usps_api_integration_debug_mode')) {
    return array(
      'CityStateLookupResponse' => array(
        'ZipCode' => array(
          'Zip5' => variable_get('USPS_TEST_ZIP5'),
          'City' => variable_get('USPS_TEST_CITY'),
          'State' => variable_get('USPS_TEST_STATE'),
          '@attributes' => array('ID' => '1'),
        ),
      ),
    );
  }
  require_once libraries_get_path('usps') . '/USPSCityStateLookup.php';
  $key = usps_api_integration_get_key();
  $verify = new USPSCityStateLookup($key);
  // Use the testing URL if in testing.
  if (variable_get('usps_api_integration_api_status') == 'testing') {
    $verify->setTestMode(TRUE);
  }

  // Add the zip code we want to lookup the city and state.
  $verify->addZipCode($zip_code);

  // Perform the call and print out the results.
  $verify->lookup();

  // Check if it was completed.
  if ($verify->isSuccess()) {
    return $verify->getArrayResponse();
  }
  else {
    throw new Exception(t('Error: @message', array('@message' => $verify->getErrorMessage())), 500);
  }
}

/**
 * Uses the USPS API to calculate the shipping rate for a package.
 *
 * @param array $package_info
 *   An array of info used to calculate the shipping cost.
 *   Should be structured like this:
 *   $package => array(
 *     // Required
 *     'origination' => Starting Zip Code (integer),
 *     'destination' => Destination Zip Code (integer),
 *     'pounds' => pounds (integer),
 *     'ounces' => ounces (integer),
 *     // Optional
 *     'container' => container type (constant),
 *     'size' => size (constant)
 *     'service' => service (constant) - if not chosen, defaults to first class
 *     'firstclass_type' => type (constant) - only if 1st class option selected
 *   );
 *
 * @return array
 *   See debug_mode example for structure.
 * @throws Exception
 */
function usps_api_integration_rate($package_info = array()) {
  if (variable_get('usps_api_integration_debug_mode')) {
    return array(
      'RateV4Response' => array(
        'Package' => array(
          'ZipOrigination' => variable_get('USPS_TEST_ZIP_ORIGIN'),
          'ZipDestination' => variable_get('USPS_TEST_ZIP5'),
          'Pounds' => variable_get('USPS_TEST_POUNDS'),
          'Ounces' => variable_get('USPS_TEST_OUNCES'),
          'FirstClassMailType' => variable_get('USPS_TEST_FIRST_CLASS_MAIL_TYPE'),
          'Size' => variable_get('USPS_TEST_SIZE'),
          'Machinable' => variable_get('USPS_TEST_MACHINABLE'),
          'Zone' => variable_get('USPS_TEST_ZONE'),
          'Postage' => array(
            'MailService' => variable_get('USPS_TEST_MAIL_SERVICE'),
            'Rate' => variable_get('USPS_TEST_RATE'),
            '@attributes' => array('CLASSID' => '0'),
            '@attributes' => array('ID' => '1'),
          ),
        ),
      ),
    );
  }
  $key = usps_api_integration_get_key();
  $rate = new USPSRate($key);
  // Use the testing URL if in testing.
  if (variable_get('usps_api_integration_api_status') == 'testing') {
    $rate->setTestMode(TRUE);
  }
  // Create new package object and assign the properties.
  // The order you assign them is important so make sure
  // to set them as the example below.
  // set the USPSRatePackage for more info about the constants.
  $package = new USPSRatePackage();
  $package->setService(isset($package_info['service']) ? USPSRatePackage::$package_info['service'] : USPSRatePackage::SERVICE_FIRST_CLASS);
  if ($package_info['service'] === SERVICE_FIRST_CLASS || $package_info['service'] === SERVICE_FIRST_CLASS_COMMERCIAL || $package_info['service'] === SERVICE_FIRST_CLASS_HFP_COMMERCIAL) {
    $package->setFirstClassMailType(USPSRatePackage::$package_info['firstclass_type']);
  }
  $package->setZipOrigination($package_info['origination']);
  $package->setZipDestination($package_info['destination']);
  $package->setPounds($package_info['pounds']);
  $package->setOunces($package_info['ounces']);
  $package->setContainer($package_info['']);
  $package->setSize(USPSRatePackage::SIZE_REGULAR);
  $package->setField('Machinable', TRUE);

  // Add the package to the rate stack.
  $rate->addPackage($package);

  // Perform the request and print out the result.
  $rate->getRate();

  // Was the call successful.
  if ($rate->isSuccess()) {
    return $rate->getArrayResponse();
  }
  else {
    throw new Exception(t('Address not found'), 404);
  }
}

/**
 * Get tracking information for a tracking number.
 *
 * @param string $tracking_number
 *   The tracking number of the USPS package.
 *
 * @return array
 *   See debug_mode for example structure.
 * @throws Exception
 */
function usps_api_integration_track_confirm($tracking_number) {
  if (variable_get('usps_api_integration_debug_mode')) {
    return array(
      'TrackResponse' => array(
        'TrackInfo' => array(
          'TrackSummary' => variable_get('USPS_TEST_TRACK_SUMMARY'),
          'TrackDetail' => variable_get('USPS_TEST_TRACK_DETAIL_5'),
          'TrackDetail' => variable_get('USPS_TEST_TRACK_DETAIL_4'),
          'TrackDetail' => variable_get('USPS_TEST_TRACK_DETAIL_3'),
          'TrackDetail' => variable_get('USPS_TEST_TRACK_DETAIL_2'),
          'TrackDetail' => variable_get('USPS_TEST_TRACK_DETAIL_1'),
          '@attribues' => array(
            'ID' => variable_get('USPS_TEST_TRACKING_NUM'),
          ),
        ),
      ),
    );
  }
  $key = usps_api_integration_get_key();
  $tracking = new USPSTrackConfirm($key);
  // Use the testing URL if in testing.
  if (variable_get('usps_api_integration_api_status') == 'testing') {
    $tracking->setTestMode(TRUE);
  }
  // Add the package id to the trackconfirm lookup class.
  $tracking->addPackage($tracking_number);
  // Perform the call and print out the results.
  $tracking->getTracking();
  // Check if it was completed.
  if ($tracking->isSuccess()) {
    return $tracking->getArrayResponse();
  }
  else {
    throw new Exception(t('Error: @message', array('@message' => $tracking->getErrorMessage())), 500);
  }
}
/**
 * Function to grab the zip code from an address.
 *
 * @param array $partial_address
 *   Needs to be formatted like:
 *   $partial_address = array(
 *     'name' => business name - string (optional),
 *     'apt' => Apartment/Suite/Unit number - string (optional),
 *     'address' => Street address - string (required)
 *     'city' => city - string (required)
 *     'state' => state - string (required)
 *   );
 *
 * @return array
 *   See debug_mode example.
 * @throws Exception
 */
function usps_api_integration_zip_code_lookup($partial_address = array()) {
  if (variable_get('usps_api_integration_debug_mode')) {
    return array(
      'ZipCodeLookupResponse' => array(
        'Address' => array(
          'Address1' => variable_get('USPS_TEST_ADDRESS1'),
          'Address2' => variable_get('USPS_TEST_ADDRESS2'),
          'City' => variable_get('USPS_TEST_CITY'),
          'State' => variable_get('USPS_TEST_STATE'),
          'Zip5' => variable_get('USPS_TEST_ZIP5'),
          'Zip4' => variable_get('USPS_TEST_ZIP4'),
          '@attributes' => array('ID' => '1'),
        ),
      ),
    );
  }
  $key = usps_api_integration_get_key();
  $zipcode = new USPSZipCodeLookup($key);
  // Use the testing URL if in testing.
  if (variable_get('usps_api_integration_api_status') == 'testing') {
    $zipcode->setTestMode(TRUE);
  }
  $address = new USPSAddress();
  $address->setFirmName(isset($partial_address['name']) ? $partial_address['name'] : '');
  $address->setApt(isset($partial_address['apt']) ? $partial_address['apt'] : '');
  $address->setAddress(isset($partial_address['address']) ? $partial_address['address'] : '');
  $address->setCity(isset($partial_address['city']) ? $partial_address['city'] : '');
  $address->setState(isset($partial_address['address']) ? $partial_address['address'] : '');

  // Add the address object to the zipcode lookup class.
  $zipcode->addAddress($address);

  // Perform the call and print out the results.
  $zipcode->lookup();

  // Check if it was completed.
  if ($zipcode->isSuccess()) {
    return $zipcode->getArrayResponse();
  }
  else {
    throw new Exception(t('Error: @message', array('@message' => $zipcode->getErrorMessage())), 500);
  }
}


/**
 * First Class delivery date.
 */
function usps_api_integration_delivery_date($start, $end) {
  if (variable_get('usps_api_integration_debug_mode')) {
    return array(
      'SDCGetLocationsResponse' =>
      array(
        'Release' => '6',
        'SystemType' => '4',
        'MailClass' => '3',
        'OriginZIP' => '91730',
        'OriginCity' => 'RANCHO CUCAMONGA',
        'OriginState' => 'CA',
        'DestZIP' => '90025',
        'DestCity' => 'LOS ANGELES',
        'DestState' => 'CA',
        'AcceptDate' => '2014-01-08',
        'AcceptTime' => '0812',
        'NonEM' =>
        array(
          0 =>
          array(
            'MailClass' => '3',
            'EAD' => '2014-01-08',
            'COT' => '1700',
            'SvcStdMsg' => '2 Days',
            'SvcStdDays' => '2',
            'TotDaysDeliver' => '2',
            'SchedDlvryDate' => '2014-01-10',
            'NonDlvryDays' => '0',
          ),
          1 =>
          array(
            'MailClass' => '3',
            'NonEMDestType' => '3',
            'HFPU' =>
            array(
              'EAD' => '2014-01-08',
              'COT' => '1700',
              'ServiceStandard' => array('morestuffhere'),
            ),
          ),
        ),
      ),
    );
  }

  $key = usps_api_integration_get_key();
  // Initiate and set the username provided from usps.
  $delivery = new USPSServiceDeliveryCalculator($key);

  // Use the testing URL if in testing.
  if (variable_get('usps_api_integration_api_status') == 'testing') {
    $delivery->setTestMode(TRUE);
  }

  // Add the zip code we want to lookup the city and state.
  $delivery->addRoute(3, $start, $end);

  // Perform the calculation.
  $delivery->getServiceDeliveryCalculation();
  // Check if it was completed.
  if ($delivery->isSuccess()) {
    return $delivery->getArrayResponse();
  }
  else {
    throw new Exception(t('Error: @message', array('@message' => $delivery->getErrorMessage())), 500);
  }
}
