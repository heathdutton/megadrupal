<?php

/**
 * @file
 * Primarily Drupal hooks.
 *
 * Provides a stream wrapper and formatters appropriate for accessing and
 * displaying Instagram objects.
 */

/**
 * Implements hook_ctools_plugin_api().
 */
function media_instagram_ctools_plugin_api($module, $api) {
  if ($module == 'file_entity' && $api == 'file_default_displays') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_theme().
 */
function media_instagram_theme() {
  return array(
    'media_instagram' => array(
      'variables' => array('uri' => NULL, 'options' => array()),
      'template' => 'theme/media-instagram',
    ),
  );
}

/**
 * Implements hook_file_mimetype_mapping_alter().
 */
function media_instagram_file_mimetype_mapping_alter(&$mapping) {
  $mapping['mimetypes'][] = 'text/instagram';
}

/**
 * Implements hook_stream_wrappers().
 */
function media_instagram_stream_wrappers() {
  return array(
    'instagram' => array(
      'name' => t('Instagram'),
      'class' => 'MediaInstagramStreamWrapper',
      'description' => t('Remote images hosted on the Instagram.'),
      'type' => STREAM_WRAPPERS_READ_VISIBLE,
    ),
  );
}

/**
 * Implements hook_media_internet_providers().
 */
function media_instagram_media_internet_providers() {
  return array(
    'MediaInternetInstagramHandler' => array(
      'title' => t('Instagram'),
    ),
  );
}

/**
 * Implements hook_media_parse().
 */
function media_instagram_media_parse($url) {
  $handler = new MediaInternetInstagramHandler($url);
  return $handler->parse();
}

/**
 * Implements hook_file_formatter_info().
 */
function media_instagram_file_formatter_info() {
  return array(
    'media_instagram' => array(
      'label' => t('Instagram'),
      'file types' => array('instagram'),
      'default settings' => array('maxwidth' => '', 'hidecaption' => FALSE),
      'view callback' => 'media_instagram_file_formatter_view',
      'settings callback' => 'media_instagram_file_formatter_settings',
      'mime types' => array('text/instagram'),
    ),
  );
}

/**
 * Implements hook_file_formatter_view().
 */
function media_instagram_file_formatter_view($file, $display, $langcode) {
  $element = array();

  $scheme = file_uri_scheme($file->uri);
  if ($scheme == 'instagram' && empty($file->override['wysiwyg'])) {
    $element = array(
      '#theme' => 'media_instagram',
      '#uri' => $file->uri,
      '#options' => array(),
    );

    // Fake a default for attributes so the ternary doesn't choke.
    $display['settings']['attributes'] = array();

    foreach (array('maxwidth', 'hidecaption') as $setting) {
      $element['#options'][$setting] = isset($file->override[$setting]) ? $file->override[$setting] : $display['settings'][$setting];
    }
  }

  return $element;
}

/**
 * Implements hook_file_formatter_settings().
 */
function media_instagram_file_formatter_settings($form, &$form_state, $settings) {
  $element = array();

  $element['maxwidth'] = array(
    '#type' => 'textfield',
    '#title' => t('Max width'),
    '#default_value' => $settings['maxwidth'],
    '#element_validate' => array('_media_instagram_validate_max_width'),
  );

  $element['hidecaption'] = array(
    '#title' => t('Hide caption'),
    '#type' => 'checkbox',
    '#default_value' => $settings['hidecaption'],
  );

  return $element;
}

/**
 * Form element validation handler.
 *
 * Value must be be equal or greater than 320.
 */
function _media_instagram_validate_max_width($element, &$form_state) {
  $value = $element['#value'];
  if ($value !== '' && (!is_numeric($value) || intval($value) != $value || $value < 320)) {
    form_error($element, t('%name must be equal or greater than 320.', array('%name' => $element['#title'])));
  }
}

/**
 * Preprocess function for media-instagram.tpl.php.
 */
function template_preprocess_media_instagram(&$variables) {
  $wrapper = file_stream_wrapper_get_instance_by_uri($variables['uri']);
  $parts = $wrapper->get_parameters();
  $variables['short_code'] = check_plain($parts['p']);
  $variables['classes_array'][] = 'instagram-' . $variables['short_code'];

  $query = array();
  foreach (array('maxwidth', 'hidecaption') as $setting) {
    if ($variables['options'][$setting]) {
      $query[$setting] = $variables['options'][$setting];
    }
  }

  // Add template variables for accessibility.
  $external_url = file_create_url($variables['uri']);
  $variables['html'] = '';
  $variables['alternative_content'] = t('Instagram of @url', array('@url' => $external_url));
  $handler = new MediaInternetInstagramHandler($external_url);
  if (($data = $handler->getOEmbed($query)) && !empty($data['html'])) {
    $variables['data'] = $data;
    $variables['html'] = $data['html'];
  }
}
