<?php

/**
 * @file rest_api_doc.module
 * Self Documenting REST API module file.
 */

/**
 * Implements hook_menu().
 */
function rest_api_doc_menu() {
  $items = array();

  $items['api/doc'] = array(
    'title' => 'RestWS Documentation',
    'page callback' => 'rest_api_doc_page',
    'access arguments' => array('access rest_api_doc'),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function rest_api_doc_permission() {
  return array(
    'access rest_api_doc' => array(
      'title' => t('Access REST API documentation'),
      'description' => t('Allow to the user to access the REST API documentation.'),
    ),
    'administer rest_api_doc' => array(
      'title' => t('Administer REST API documentation'),
      'description' => t('Allow to the user to administer the REST API documentation.'),
    ),
  );
}

/**
 * API documentation page.
 */
function rest_api_doc_page($format = '') {
  $resources = restws_get_resource_info();
  ksort($resources);
  $formats = restws_get_format_info();

  foreach ($formats as $name => $format_info) {
    $links[] = l($format_info['label'], 'api/doc/' . $name);
  }
  $page['header']['#markup'] = implode(' | ', $links);

  if (!isset($formats[$format])) {
    return $page;
  }

  $operations = array(
    array('header' => TRUE, 'data' => 'Index, View' . ' ' . l('(example)', drupal_get_path('module', 'restws') . "/example_exports/node.$format", array('target' => '_blank'))),
    array('header' => TRUE, 'data' => 'Create' . ' ' . l('(example)', drupal_get_path('module', 'restws') . "/example_exports/node.1.$format", array('attributes' => array('target' => '_blank')))),
    array('header' => TRUE, 'data' => 'Update' . ' ' . l('(example)', drupal_get_path('module', 'restws') . "/example_exports/node.1.$format", array('attributes' => array('target' => '_blank')))),
    array('header' => TRUE, 'data' => 'Delete'),
  );
  $header = $operations;

  foreach ($resources as $type => $resource) {
    $rows[] = array(
      array(
        'data' => $resource['label'],
        'header' => TRUE,
        'colspan' => 4,
      ),
    );

    $rows[] = array('data' => $header, 'header' => 1);

    $header_row = array(
      'data' => array(
        "GET /$type.$format<br/>GET /$type/N.$format",
        "POST /$type.$format",
        "PUT /$type.$format/N",
        "DELETE /$type.$format/N",
      ),
    );
    $rows[] = $header_row;

    $property_rows = array();
    $controller = restws_resource_controller($type);
    foreach ($controller->propertyInfo() as $property => $property_info) {
      if (!empty($property_info['computed']) || empty($property_info['type'])) {
        continue;
      }
      $required = FALSE;
      $options = NULL;
      if (is_a($controller, 'RestWSEntityResourceController')) {
        $entityInfo = entity_get_info($type);
        $entityPropertyInfo = entity_get_all_property_info($type);
        if ($entityInfo['entity keys']['bundle'] == $property) {
          $required = TRUE;
        }
        if (!empty($entityPropertyInfo[$property]['required'])) {
          $required = TRUE;
        }

        if (!empty($entityPropertyInfo[$property]['options list'])) {
          // KLUDGE: returns errors but works. Why?
          $options = @call_user_func($entityPropertyInfo[$property]['options list']);
        }
      }
      $property_rows[] = array(
        $property . ($required ? '<span class="form-required">*</span>' : ''),
        $property_info['label'],
        $property_info['type'] . ($options ? theme('item_list', array('items' => array_keys($options), 'title' => t('Allowed values'))) : ''),
        isset($property_info['description']) ? $property_info['description'] : '',
      );
    }

    $long_table = theme('table', array('rows' => $property_rows, 'header' => array('Property', 'Name', 'Type', 'Description')));
    $properties = array(
      'fieldset' => array(
        '#type' => 'fieldset',
        '#title' => t('Properties'),
        '#description' => t('Properties with a <span class="form-required">*</span> are required in create or update service calls.') . '<br/>' .
        t('To update or delete records, the unique ID is required.'),
        '#attributes' => array('class' => array('collapsible', 'collapsed')),
        'content' => array(
          '#markup' => $long_table,
        ),
      ),
      '#attached' => array('js' => array('misc/collapse.js', 'misc/form.js')),
    );
    $querying = array(
      'fieldset' => array(
        '#type' => 'fieldset',
        '#title' => t('Querying'),
        '#attributes' => array('class' => array('collapsible', 'collapsed')),
        'content' => array(
          '#markup' => "<b>Querying</b>

<p>GET /$type.$format?[property]=[value1]&[meta_control]=[value2]</p>

<p>By default RestWS simply outputs all resources available for the given type:</p>

<p>GET /$type.$format</p>

<p>You can filter for certain resources by passing parameters in the URL.</p>

<p>GET/$type.$format?uid=1</p>

<p>If a certain property isn't valid an HTTP status code 412 will be returned
containing an error message.</p>

<b>Filtering and sorting</b>
<p>GET /$type.$format?sort=tid&direction=DESC</p>

<p>You can limit the results with the meta control limit which is by default 100.
To navigate through the generated pages, you have to use meta control page.</p>

<p>GET /$type.$format?limit=10&page=3</p>

<p>The output always has a self, a first and a last element, which contain a link
to the current, first and last page. If your current page isn't the last or the
first one, RestWS will also generate prev and next links. For XML they can be
found in the \"link\" tags in the first hierarchy.</p>

<p>Sometimes it might be helpful to retrieve only the references to resources of a
query. You can tell RestWS to output them by setting the meta control full to 0,
by default it will be 1 and output the whole resource.</p>

<p>GET /$type.$format?full=0</p>",
        ),
        '#attached' => array('js' => array('misc/collapse.js', 'misc/form.js')),
      ),
    );

    $rows[] = array(
      array(
        'data' => array($properties, $querying),
        'colspan' => 5,
      ),
    );
  }
  $page['table'] = array(
    '#theme' => 'table',
    '#rows' => $rows,
    '#header' => array(),
  );
  return $page;
}
