<?php

/**
 * @file
 * Veritrans payment method for Drupal Commerce for testing and development.
 */

/**
 * Implements hook_libraries_info().
 */
function commerce_veritrans_libraries_info() {
  $libraries['veritrans'] = array(
    'name' => 'PHP client library for Veritrans',
    'vendor url' => 'https://github.com/veritrans/veritrans-php',
    'download url' => 'https://github.com/veritrans/veritrans-php/archive/master.zip',
    'path' => 'Veritrans',
    'version arguments' => array(
      'file' => 'README.md',
      'pattern' => '/Veritrans (\d+)/',
      'lines' => 6,
    ),
    'files' => array(
      'php' => array(
        'Config.php',
        'Transaction.php',
        'ApiRequestor.php',
        'Notification.php',
        'VtDirect.php',
        'VtWeb.php',
        'Sanitizer.php',
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_menu().
 */
function commerce_veritrans_menu() {
  $items = array();

  // Define an always accessible path to receive IPNs.
  $items['commerce_veritrans/ipn'] = array(
    'page callback' => 'commerce_veritrans_process_ipn',
    'page arguments' => array(),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Processes an incoming IPN.
 *
 * @param string $payment_method
 *   The payment method instance array that originally made the payment.
 * @param array $debug_ipn
 *   Optionally specify an IPN array for debug purposes; if left empty, the IPN
 *     be pulled from the $_POST. If an IPN is passed in, validation of the IPN
 *     at PayPal will be bypassed.
 *
 * @return bool
 *   TRUE or FALSE indicating whether the IPN was successfully processed or not.
 */
function commerce_veritrans_process_ipn() {
  libraries_load('veritrans');
  $response = new Veritrans_Notification();
  // Exit now if the $_POST was empty.
  if (empty($response)) {
    watchdog('commerce_veritrans', 'IPN URL accessed with no POST data submitted.', array(), WATCHDOG_WARNING);
    return FALSE;
  }

  watchdog('commerce_veritrance', 'Responce from Veritrance ! Response: !Response :.', array('!Response' => '<pre>' . print_r($response, TRUE) . '</pre>'), WATCHDOG_DEBUG);
  if (isset($response) && !empty($response)) {
    // Prepare a transaction object to log the API response.
    $transaction = commerce_payment_transaction_new('commerce_direcpay', $response->order_id);
    $order = commerce_order_load($response->order_id);
    $transaction->uid = $order->uid;
    $transaction->currency_code = $order->commerce_order_total[LANGUAGE_NONE][0]['currency_code'];
    $transaction->instance_id = $order->data['payment_method'];
    $transaction->remote_id = $response->transaction_id;
    $transaction->remote_status = $response->transaction_status;
    $transaction->payload = $response;
    $transaction->amount = commerce_currency_decimal_to_amount($response->gross_amount, $transaction->currency_code);
    $transaction->message = $response->status_message;

    // Set the transaction status based on SUCCESS or FAIL.
    $transaction_status = $response->transaction_status;
    $fraud = $response->fraud_status;

    if ($transaction_status == 'capture') {
      if ($fraud == 'challenge') {
        $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
      }
      elseif ($fraud == 'accept') {
        $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
      }
    }
    elseif ($transaction_status == 'cancel') {
      // if ($fraud == 'challenge' || $fraud == 'accept') {
      $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
      //}
    }
    elseif ($transaction_status == 'deny') {
      $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
    }

    commerce_payment_transaction_save($transaction);
  }
}

/**
 * Convert 2 digits coundry code to 3 digit country code.
 *
 * @param string $country_code
 *   Country code which will be converted.
 */
function commerce_veritrans_convert_country_code($country_code) {
  // 3 digits country codes.
  module_load_include('inc', 'commerce_veritrans', 'commerce_veritrans.data');
  $cc_three = commerce_veritrans_country_code();
  // Check if country code exists.
  if (isset($cc_three[$country_code]) && $cc_three[$country_code] != '') {
    $country_code = $cc_three[$country_code];
  }
  return $country_code;
}
