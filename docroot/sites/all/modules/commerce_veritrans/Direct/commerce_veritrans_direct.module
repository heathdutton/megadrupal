<?php

/**
 * @file
 * Veritrans payment method for Drupal Commerce for testing and development.
 */

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_veritrans_direct_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_veritrans_direct'] = array(
    'base' => 'commerce_veritrans_direct',
    'title' => t('Veritrans VT-Direct'),
    'short_title' => t('VT-Direct'),
    'display_title' => t('Veritrans Payment Gateway for VT-Direct'),
    'description' => t('Veritrans Payment Gateway for VT-Direct'),
    'terminal' => TRUE,
  );

  return $payment_methods;
}

/**
 * Payment method callback: settings form.
 */
function commerce_veritrans_direct_settings_form($settings = NULL) {
  $form = array();
  $settings = (array) $settings + array(
    'server_key' => '',
    'client_key' => '',
    'payment_type' => array(),
    'is_sanitized' => '',
    'is3ds' => '',
    'payment_mode' => '',
  );

  $form['server_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Server Key'),
    '#description' => t('Your Veritrans Server key.'),
    '#default_value' => $settings['server_key'],
    '#size' => 50,
    '#required' => TRUE,
  );

  $form['client_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Client Key'),
    '#description' => t('Your Veritrans Client key.'),
    '#default_value' => $settings['client_key'],
    '#size' => 50,
    '#required' => TRUE,
  );

  $form['payment_type'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Payment type'),
    '#options' => drupal_map_assoc(array(t('Credit Card'),)),
    '#default_value' => array('Credit Card'),
    '#attributes' => array('disabled' => 'disabled'),
  );

  $form['is_sanitized'] = array(
    '#type' => 'checkbox',
    '#title' => t('Is Sanitized'),
    '#default_value' => $settings['is_sanitized'],
    '#description' => t('Payment is sanitized'),
  );

  $form['is3ds'] = array(
    '#type' => 'checkbox',
    '#title' => t('3D-Secure'),
    '#default_value' => $settings['is3ds'],
    '#description' => t('Payment is 3D-Secure'),
  );

  $form['payment_mode'] = array(
    '#type' => 'select',
    '#title' => t('Payment mode'),
    '#description' => t('The mode for capturing payment.'),
    '#options' => array(
      'LIVE' => t('Live transactions'),
      'TEST' => t('Test transactions'),
    ),
    '#default_value' => $settings['payment_mode'],
  );

  return $form;
}

/**
 * Form used to collect veritranc data.
 *
 * @param array $payment_method
 *   The payment method instance object used to charge this payment.
 * @param array $pane_values
 *   The pane values.
 * @param array $checkout_pane
 *   The checkout pane.
 * @param Object $order
 *   The order object the payment applies to.
 */
function commerce_veritrans_direct_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

  // Prepare the fields to include on the credit card form.
  $fields = array();
  $fields += array(
    'number' => '',
    'start_year' => date('Y') - 5,
    'exp_month' => date('m'),
    'exp_year' => date('Y'),
    'code' => '',
  );

  return commerce_payment_credit_card_form($fields);
}

/**
 * Payment method callback: checkout form validation.
 */
function commerce_veritrans_direct_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

  // Validate the credit card fields.
  $settings = array(
    'form_parents' => array_merge($form_parents, array('credit_card')),
  );

  if (!commerce_payment_credit_card_validate($pane_values['credit_card'], $settings)) {
    return FALSE;
  }
}

/**
 * Handles the form submit.
 *
 * @param array $payment_method
 *   The payment method instance object used to charge this payment.
 * @param array $pane_form
 *   The pane form.
 * @param array $pane_values
 *   The pane values.
 * @param Object $order
 *   The order object the payment applies to.
 * @param array $charge
 *   An array indicating the amount and currency code to charge.
 * 
 * @return bool
 *   Returns TRUE on success and FALSE on failure of transaction.
 */
function commerce_veritrans_direct_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  // Display an error and prevent the payment attempt if Vt-Direct has not been
  // configured yet.
  if (empty($payment_method['settings'])) {
    drupal_set_message(t('This payment method must be configured by an administrator before it can be used.'), 'error');
    return FALSE;
  }

  $order->data['commerce_veritrans_direct'] = $pane_values;
  return commerce_veritrans_direct_transaction($payment_method, $order, $charge, $pane_values);
}

/**
 * Creates a intuit payment transaction. Post data to intuit.
 *
 * @param array $payment_method
 *   The payment method instance object used to charge this payment.
 * @param Object $order
 *   The order object the payment applies to.
 * @param array $charge
 *   An array indicating the amount and currency code to charge.
 * @param array $values
 *   The vlaues submited by user.
 * 
 * @return bool
 *   Returns TRUE on success and FALSE on failure of transaction.
 */
function commerce_veritrans_direct_transaction($payment_method, $order, $charge, $values) {
  libraries_load('veritrans');
  $transaction = commerce_payment_transaction_new('commerce_veritrans_direct', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->currency_code = $charge['currency_code'];
  $transaction->amount = commerce_currency_format($charge['amount'], $charge['currency_code']);

  $settings = $payment_method['settings'];
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  // Prepare data.
  $amount = commerce_currency_amount_to_decimal($charge['amount'], $charge['currency_code']);
  Veritrans_Config::$serverKey = $settings['server_key'];

  // Prepare the billing address for use in the request.
  // Uncomment for production environment.
  Veritrans_Config::$isProduction = ($settings['payment_mode'] == 'TEST') ? FALSE : TRUE;
  // Uncomment to enable sanitization.
  Veritrans_Config::$isSanitized = $settings['is_sanitized'] ? TRUE : FALSE;
  // Uncomment to enable 3D-Secure.
  Veritrans_Config::$is3ds = $settings['is3ds'] ? TRUE : FALSE;
  // Prepare the billing address for use in the request.
  $billing_address = $order_wrapper->commerce_customer_billing->commerce_customer_address->value();
  // Prepare the token params to get token id.
  $url = Veritrans_Config::getBaseUrl() . '/token';

  $token_params = $values['vt_direct_credit_card'];
  $token_params['secure'] = TRUE;
  $token_params['bank'] = 'bni';
  $token_params['gross_amount'] = $amount;
  $token_params['client_key'] = $settings['client_key'];
  $url = $url . "?" . http_build_query($token_params);

  $token_resonse = Veritrans_ApiRequestor::get($url, Veritrans_Config::$serverKey, $token_params);
  $transaction_details = array(
    'order_id' => $order->order_id,
    'gross_amount' => $amount,
  );

  $customer_details = array(
    'first_name' => $billing_address['first_name'],
    'last_name' => $billing_address['last_name'],
    'email' => drupal_substr($order->mail, 0, 100),
    //'phone' => $order_wrapper->commerce_customer_billing->commerce_veritrans_billing_phone->value(),
    'billing_address' => array(
      'first_name' => $billing_address['first_name'],
      'last_name' => $billing_address['last_name'],
      'address' => $billing_address['thoroughfare'],
      'city' => $billing_address['locality'],
      'postal_code' => $billing_address['postal_code'],
      'country_code' => commerce_veritrans_convert_country_code($billing_address['country']),
    //'phone' => $order_wrapper->commerce_customer_billing->commerce_veritrans_billing_phone->value(),
    ),
  );

  $params = array(
    'payment_type' => 'credit_card',
    'credit_card' => array(
      'token_id' => $token_resonse->token_id,
      'bank' => 'bni',
      'type' => 'authorize',
    ),
    'transaction_details' => $transaction_details,
    'customer_details' => $customer_details,
  );
  try {
    $charge_response = Veritrans_VtDirect::charge($params);
    watchdog('commerce_veritrans', 'Veritrans Charge response:<pre> @param </pre>', array('@param' => print_r($charge_response, TRUE)));

    // Set the RemoteID.
    $transaction->remote_id = $charge_response->transaction_id;
    $transaction->amount = round($charge_response->gross_amount, 2);
    $transaction->message = $charge_response->status_message;
    $payment_approved = FALSE;
    if ($charge_response->transaction_status == 'authorize' && ($charge_response->fraud_status == 'accept' || $charge_response->fraud_status == 'challenge')) {
      $capture_response = Veritrans_VtDirect::capture($charge_response->transaction_id);
      watchdog('commerce_veritrans', 'Veritrans Capture response:<pre> @param </pre>', array('@param' => print_r($capture_response, TRUE)));

      if ($capture_response->transaction_status == 'capture' && ($capture_response->fraud_status == 'accept' || $capture_response->fraud_status == 'challenge')) {
        $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
        $payment_approved = TRUE;
      }
      else {
        $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
        $payment_approved = FALSE;
      }
    }
    else {
      $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
      $payment_approved = FALSE;
    }
  }
  catch (Exception $e) {
    drupal_set_message($e->getMessage(), 'error');
  }
  // We will verify transaction if needed.
  // Veritrans_Transaction::status.

  watchdog('commerce_veritrans', 'Veritrans Transaction:<pre> @param </pre>', array('@param' => print_r($transaction, TRUE)));

  commerce_payment_transaction_save($transaction);

  // If the payment failed, display an error.
  if (!$payment_approved) {
    drupal_set_message(t('We were unable to process your payment. Please enter your information again or try a different card.'), 'error');

    if (variable_get('commerce_veritrans_display_response', 1)) {
      drupal_set_message(check_plain($charge_response->status_message), 'error');
    }

    return FALSE;
  }

  return TRUE;
}
