<?php
/**
 * @file
 * Main file of the module.
 */

/**
 * Implements hook_menu().
 */
function create_and_reg_menu() {
  $items['admin/config/workflow/create-and-reg'] = array(
    'title' => 'Create and register',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('create_and_reg_settings_form'),
    'access arguments' => array('administer create and reg'),
    'file' => 'create_and_reg.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function create_and_reg_permission() {
  return array(
    'administer create and reg' =>  array(
      'title' => t('Administer create and register'),
    ),
  );
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function create_and_reg_form_node_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  // Get set types.
  $types = array();
  foreach (variable_get('create_and_reg_enabled_types', array()) as $type => $enable) {
    if ($enable) {
      $types[] = $type;
    }
  }

  // If the user not logged in, the node in the list and this will be a new node.
  if (!$user->uid && in_array($form['#node']->type, $types) && !isset($form['#node']->nid)) {
    // Store session id and add a custom submit handler.
    $form['create_and_reg_session_id'] = array(
      '#type' => 'value',
      '#value' => create_and_reg_get_session(),
    );
    $form['actions']['submit']['#submit'][] = 'create_and_reg_node_form_submit';

  }
}

/**
 * Writes the session into the database.
 */
function create_and_reg_node_form_submit($form, &$form_state) {
  $params = array(
    'nid' => $form_state['values']['nid'],
    'session_id' => $form_state['values']['create_and_reg_session_id'],
  );
  drupal_write_record('create_and_reg', $params);

  // Redirect to user login page.
  if (variable_get('create_and_reg_redirect', 1)) {
    $redirect_links = array(
      1 => 'user',
      2 => 'user/register',
      3 => variable_get('create_and_reg_redirect_other_url'),
    );
    $form_state['redirect'] = array(
      $redirect_links[variable_get('create_and_reg_redirect', 1)],
      array('query' => array('create-and-reg' => '1')),
    );
  }

  // Clear other status messages.
  if (variable_get('create_and_reg_disable_status_messages', 0)) {
    $_SESSION['messages']['status'] = array();
  }

  // Show message to the user after he/she created the content.
  if ($after_message = t(variable_get('create_and_reg_after_message'))) {
    drupal_set_message(token_replace($after_message, array('node' => $form_state['node'])));
  }
}

/**
 * Implements hook_node_delete().
 */
function create_and_reg_node_delete($node) {
  db_delete('create_and_reg')
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * Implements hook_user_login().
 */
function create_and_reg_user_login(&$edit, $account) {
  $nids = create_and_reg_get_sessions_nodes();
  if (!empty($nids)) {
    create_and_reg_set_nids_uid($nids, $account->uid);
  }

  create_and_reg_clear_session();
}

/**
 * Gets the node ids connected to the passed session.
 *
 * @param null $session_id
 *
 * @return
 *   Array of node ids.
 */
function create_and_reg_get_sessions_nodes($session_id = NULL) {
  $out = array();

  if (!$session_id) {
    $session_id = create_and_reg_get_session();
  }

  $query = db_select('create_and_reg', 'cr');
  $query->fields('cr', array('nid'));
  $query->join('node', 'n', 'cr.nid = n.nid');
  $query->condition('n.uid', 0);
  $query->condition('cr.session_id', $session_id);

  $result = $query->execute()->fetchAll(PDO::FETCH_ASSOC);

  // Order return value.
  foreach ($result as $res) {
    $out[] = $res['nid'];
  }

  return $out;
}

/**
 * Updates the nodes' author.
 *
 * @param $nids
 * @param $uid
 */
function create_and_reg_set_nids_uid($nids, $uid) {
  foreach (node_load_multiple($nids) as $node) {
    $node->uid = $uid;
    node_save($node);
  }
}

/**
 * Clears stored session.
 *
 * @param string $session_id
 *  If added the sessions will be removed from the database.
 * @param bool $destroy_session
 *   If added the cookie will be deleted.
 */
function create_and_reg_clear_session($session_id = NULL, $destroy_session = TRUE) {
  if (!$session_id) {
    $session_id = create_and_reg_get_session();
  }

  // Delete list from database.
  db_delete('create_and_reg')->condition('session_id', $session_id)->execute();

  // Delete the cookie.
  if ($destroy_session) {
    setcookie('create_and_reg', '', time() - 3600);
  }
}

/**
 * Generates a session to the the user.
 *
 * @return string
 */
function create_and_reg_get_session() {
  $session = FALSE;

  if (!isset($_COOKIE['create_and_reg'])) {
    $session = md5(uniqid(rand(), TRUE));
    setcookie('create_and_reg', $session, 0, base_path());
  }

  return isset($_COOKIE['create_and_reg']) ? $_COOKIE['create_and_reg'] : $session;
}
