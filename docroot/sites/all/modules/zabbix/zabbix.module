<?php

/**
 * Implementation of hook_menu().
 */
function zabbix_menu() {
  $items = array();
  $items['admin/config/development/zabbix'] = array(
    'title' => t('Zabbix'),
    'description' => t('Configure Zabbix settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('zabbix_settings_form'),
    'access arguments' => array('administer zabbix'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/development/zabbix/general'] = array(
    'title' => t('General settings'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10
  );
  $items['admin/config/development/zabbix/items'] = array(
    'title' => t('Item settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('zabbix_item_settings_form'),
    'access arguments' => array('administer zabbix'),
    'type' => MENU_LOCAL_TASK
  );
  return $items;
}

/**
 * Implementation of hook_perm().
 */
function zabbix_perm() {
  return array('administer zabbix');
}

/**
 * Implementation of hook_theme().
 */
function zabbix_theme() {
  return array(
    'zabbix_item_settings_form' => array(
      'render element' => 'form',
      'arguments' => array('form' => NULL),
    ),
  );
}

/**
 * Zabbix general settings form
 */
function zabbix_settings_form() {
  $form = array();

  $form['zabbix_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Zabbix settings'),
  );

  $form['zabbix_settings']['zabbix_server'] = array(
    '#type' => 'textfield',
    '#title' => t('Zabbix server'),
    '#default_value' => variable_get('zabbix_server', 'your.zabbix.host.com'),
    '#description' => t('Hostname or IP address of the Zabbix server'),
  );

  $form['zabbix_settings']['zabbix_port'] = array(
    '#type' => 'textfield',
    '#title' => t('Zabbix port'),
    '#default_value' => variable_get('zabbix_port', '10051'),
    '#description' => t('Port number of server trapper.'),
  );

  $form['zabbix_settings']['zabbix_host'] = array(
    '#type' => 'textfield',
    '#title' => t('Host'),
    '#default_value' => variable_get('zabbix_host', $_SERVER['HTTP_HOST']),
    '#description' => t('Specify host name, host IP and name or host IP'),
  );

  $form['scheduling'] = array(
    '#type' => 'fieldset',
    '#title' => t('Scheduling'),
    '#description' => t('Specify timing for the scheduled zabbix tests to run.  Run time specifies the time of the first run.  The zabbix tests will run on the first cron run after this time.  Run interval specifies the amount of time until zabbix will next run scheduled tests.  The tests will run on the first cron run after this amount of time has elapsed.'),
  );

  $form['scheduling']['zabbix_scheduling_enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable zabbix scheduling'),
    '#default_value' => variable_get('zabbix_scheduling_enabled', 0),
  );

  $interval_options = array(
    3600 => '1 Hour',
    7200 => '2 Hours',
    14400 => '4 Hours',
    21600 => '6 Hours',
    43200 => '12 Hours',
    86400 => '1 Day',
    172800 => '2 Days',
    604800 => '7 Days',
    1209600 => '14 Days',
    2419200 => '28 Days',
  );

  $form = system_settings_form($form);

  return $form;
}

/**
 * Settings form for individual item settings
 */
function zabbix_item_settings_form() {

  $form = array();
  $index = 1;
  $form['checkall'] = array(); // Check all form elements
  $form['items'] = array();
  $interval_options = array(
    900 => '15 Mins',
    3600 => '1 Hour',
    7200 => '2 Hours',
    14400 => '4 Hours',
    21600 => '6 Hours',
    43200 => '12 Hours',
    86400 => '1 Day',
    172800 => '2 Days',
    604800 => '7 Days',
    1209600 => '14 Days',
    2419200 => '28 Days',
  );

  // Create first row of the form (Set interval all, enable all)
  $form['checkall']['title'] = array(
    '#type' => 'markup',
    '#markup' => '',
  );
  $form['checkall']['key'] = array(
    '#type' => 'markup',
    '#markup' => '',
  );
  $form['checkall']['zabbix_checkall_run_interval'] = array(
    '#type' => 'select',
    '#options' => $interval_options,
    '#default_value' => variable_get('zabbix_checkall_run_interval', 86400),
  );
  $form['checkall']['zabbix_checkall_enabled'] = array(
    '#type' => 'checkbox',
    '#default_value' => variable_get('zabbix_checkall_enabled', FALSE),
  );

  $items = zabbix_items();
  foreach ($items as $item => $settings) {
    if ($settings['key'] && $settings['title'] && $settings['description']) {
      $disabled = FALSE;
      if ($settings['dependencies'] && is_array($settings['dependencies'])) {
        foreach ($settings['dependencies'] as $dependency) {
          if (!module_exists($dependency)) {
            $disabled = TRUE;
            variable_set('zabbix_'. $item .'_enabled', FALSE);
          }
        }
      }
      $form['items'][$index]['id'] = array(
        '#type' => 'hidden',
        '#value' => $item,
      );
      $form['items'][$index]['title'] = array(
        '#type' => 'markup',
        '#markup' => t($settings['title']),
      );
      $form['items'][$index]['key'] = array(
        '#type' => 'markup',
        '#markup' => t($settings['key']),
      );
      $form['items'][$index]['zabbix_'. $item .'_run_interval'] = array(
        '#title_display' => 'invisible',
        '#title' => t('@key run interval', array('@key' => $settings['key'])),
        '#type' => 'select',
        '#options' => $interval_options,
        '#default_value' => variable_get('zabbix_'. $item .'_run_interval', 86400),
      );
      $form['items'][$index]['zabbix_'. $item .'_enabled'] = array(
        '#title_display' => 'invisible',
        '#title' => t('@key enabled', array('@key' => $settings['key'])),
        '#type' => 'checkbox',
        '#default_value' => variable_get('zabbix_'. $item .'_enabled', FALSE),
        '#disabled' => $disabled,
      );
      $index++;
    }
    else {
      // Write to an error box
      $missing = '';
      if (!$settings['key']) {
        $missing .= $missing ? ', key' : 'key';
      }
      if (!$settings['title']) {
        $missing .= $missing ? ', title' : 'title';
      }
      if (!$settings['description']) {
        $missing .= $missing ? ', description' : 'description';
      }

      drupal_set_message(t('Error: Zabbix item ' . $item . ' has not been properly declared.  Missing parts: ' . $missing), 'error');
    }
  }

  $form = system_settings_form($form);
  $form['#theme'] = 'zabbix_item_settings_form';

  return $form;
}

/**
 * Theme the zabbix item settings form so it is displayed in a table.
 *
 * @ingroup themeable
 * @see zabbix_item_settings_form()
 */
function theme_zabbix_item_settings_form($variables) {
  $form =& $variables['form'];
  $path = drupal_get_path('module', 'zabbix');
  drupal_add_js("$path/checkall.js", 'file');


  // Draw the first row in the table
  $rows[] = array(
    drupal_render($form['checkall']['title']),
    drupal_render($form['checkall']['key']),
    drupal_render($form['checkall']['zabbix_checkall_run_interval']),
    drupal_render($form['checkall']['zabbix_checkall_enabled']),
  );

  foreach ($form['items'] as $i => $item) {
    if (is_numeric($i)) {
      $rows[] = array(
        drupal_render($form['items'][$i]['title']),
        drupal_render($form['items'][$i]['key']),
        drupal_render($form['items'][$i]['zabbix_'. $form['items'][$i]['id']['#value'] .'_run_interval']),
        drupal_render($form['items'][$i]['zabbix_'. $form['items'][$i]['id']['#value'] .'_enabled']),
      );
    }
  }

  $output = theme('table', array('header' => array(t('Title'), t('Key'), t('Run Interval'), t('Enabled')), 'rows' => $rows));
  $output .= drupal_render($form['actions']);
  $output .= drupal_render_children($form);
  return $output;
}

/**
 * Get a list of available callbacks.
 *
 * @param bool $reset Clear the static cache for the result. Defaults false.
 * @todo This function assumes that people won't use the same name for any given zabbix_item. Can't assume that, use module weights to work out which will win.
 *       Not sure if this is now done already by module_invoke_all().
 */
function zabbix_items($reset = False) {
  static $items;

  if (!isset($items) || $reset) {
    $items = module_invoke_all('zabbix_items');
  }

  return $items;
}

/**
 * Implementation of hook_zabbix_items
 * @return
 *   Return array of items where the key is the name of the function
 *   that will be called to create the value to pass to zabbix.
 *   and the value is the human readable title of the item, which
 *   should be brief but descriptive.
 */
function zabbix_zabbix_items() {
  if (module_exists('update')) {
    $update_status_title = 'Module update status';
  }
  else {
    $update_status_title = 'Module update status (enable update module)';
  }

  return array(
    'zabbix_module_update_status' => array(
      'key' => 'drupal.moduleupdatestatus',
      'title' => $update_status_title,
      'description' => 'Sends to zabbix comma separated list of modules that are not up to date with the current Drupal.org version.',
      'dependencies' => array('update'),
    ),
    'zabbix_last_admin_login' => array(
      'key' => 'drupal.lastadminlogin',
      'title' => 'Last admin login time',
      'description' => 'Sends to zabbix the time that the admin user last logged in as a unix timestamp.',
      'dependencies' => NULL,
    ),
    'zabbix_watchdog_emergencies' => array(
      'key' => 'drupal.watchdogemergencies',
      'title' => 'Number of watchdog emergencies',
      'description' => 'Sends to zabbix the number of watchdog emergencies since the last check.',
      'dependencies' => NULL,
    ),
    'zabbix_watchdog_alerts' => array(
      'key' => 'drupal.watchdogalerts',
      'title' => 'Number of watchdog alerts',
      'description' => 'Sends to zabbix the number of watchdog alerts since the last check.',
      'dependencies' => NULL,
    ),
    'zabbix_watchdog_critical' => array(
      'key' => 'drupal.watchdogcritical',
      'title' => 'Number of watchdog critical entries',
      'description' => 'Sends to zabbix the number of watchdog critical entries since the last check.',
      'dependencies' => NULL,
    ),
    'zabbix_watchdog_errors' => array(
      'key' => 'drupal.watchdogerrors',
      'title' => 'Number of watchdog errors',
      'description' => 'Sends to zabbix the number of watchdog errors since the last check.',
      'dependencies' => NULL,
    ),
    'zabbix_watchdog_warnings' => array(
      'key' => 'drupal.watchdogwarnings',
      'title' => 'Number of watchdog warnings',
      'description' => 'Sends to zabbix the number of watchdog warnings since the last check.',
      'dependencies' => NULL,
    ),
    'zabbix_watchdog_notices' => array(
      'key' => 'drupal.watchdognotices',
      'title' => 'Number of watchdog notices',
      'description' => 'Sends to zabbix the number of watchdog notices since the last check.',
      'dependencies' => NULL,
    ),
    'zabbix_watchdog_info' => array(
      'key' => 'drupal.watchdoginfo',
      'title' => 'Number of watchdog info entries',
      'description' => 'Sends to zabbix the number of watchdog info entries since the last check.',
      'dependencies' => NULL,
    ),
    'zabbix_watchdog_debug' => array(
      'key' => 'drupal.watchdogdebug',
      'title' => 'Number of watchdog debug entries',
      'description' => 'Sends to zabbix the number of watchdog debug entries since the last check.',
      'dependencies' => NULL,
    ),
    'zabbix_php_watchdog_entries' => array(
      'key' => 'drupal.watchdogphp',
      'title' => 'Number of php watchdog entries',
      'description' => 'Sends to zabbix the number of php watchdog entries since the last check.',
      'dependencies' => NULL,
    ),
    'zabbix_count_all_users' => array(
      'key' => 'drupal.allusers',
      'title' => 'Total number of users',
      'description' => 'Sends to zabbix the total number of user accounts for the site.',
      'dependencies' => NULL,
    ),
    'zabbix_count_active_users' => array(
      'key' => 'drupal.activeusers',
      'title' => 'Number of active users',
      'description' => 'Sends to zabbix the number of active user accounts for the site.',
      'dependencies' => NULL,
    ),
    'zabbix_list_modules' => array(
      'key' => 'drupal.enabledmodules',
      'title' => 'List of enabled modules',
      'description' => 'Sends to zabbix comma separated list of modules that are enabled on the site.',
      'dependencies' => NULL,
    ),
    'zabbix_list_themes' => array(
      'key' => 'drupal.enabledthemes',
      'title' => 'List of enabled themes',
      'description' => 'Sends to zabbix a comma separated list of themes that are enabled on the site.',
      'dependencies' => NULL,
    ),
    'zabbix_count_all_nodes' => array(
      'key' => 'drupal.allnodes',
      'title' => 'Number of nodes',
      'description' => 'Sends to zabbix the total number of nodes there are on the site.',
      'dependencies' => NULL,
    ),
    'zabbix_count_published_nodes' => array(
      'key' => 'drupal.publishednodes',
      'title' => 'Number of published nodes',
      'description' => 'Sends to zabbix the number of published nodes are on the site.',
      'dependencies' => NULL,
    ),
    /* Anonymous users don't get drupal 7 sessions.

      'zabbix_count_sessions_anon' => array(
      'key' => 'drupal.sessionsanon',
      'title' => 'Current anonymous user sessions',
      'description' => 'Sends to zabbix the number of current sessions for anonymous users.  Checks for sessions started in the last 15 minutes.',
      'dependencies' => NULL,
      ),*/
    'zabbix_count_sessions_auth' => array(
      'key' => 'drupal.sessionsauth',
      'title' => 'Current authorised user sessions',
      'description' => 'Sends to zabbix the number of current sessions for authenticated users.  Checks for sessions started in the last 15 minutes.',
      'dependencies' => NULL,
    ),
    'zabbix_last_cron_run' => array(
      'key' => 'drupal.lastcronrun',
      'title' => 'Last cron run time',
      'description' => 'Sends to zabbix the time that cron was last run as a unix timestamp.',
      'dependencies' => NULL,
    ),
  );
}

/**
 * Sends a call to zabbix and returns the output
 * @param $key
 *   The metric name (key) we want to send to zabbix.
 * @param $value
 *   The value of the key we want to send to zabbix
 *
 * @return
 *   A XML string with each variable base64 encoded
 *   sent to the server socket.
 */
function zabbix_send($key, $value) {
  $zabbix_server = variable_get('zabbix_server', 'localhost');
  $zabbix_port = variable_get('zabbix_port', '10051');
  $hostname = variable_get('zabbix_host', $_SERVER['HTTP_HOST']);
  $ret = '';

  // Prepare message
  $host64 = base64_encode($hostname);
  $key64 = base64_encode($key);
  $value64 = base64_encode($value);
  $req = "<req><host>$host64</host><key>$key64</key><data>$value64</data></req>\n";

  // Send the message to socket
  $s = fsockopen($zabbix_server, $zabbix_port, $errnum, $errstr, 15);
  if (is_resource($s)) {
    fputs($s, $req);
    while (!feof($s)) {
      $ret .= fgets($s, 1024);
    }
    return ($ret);
  }
  else {
    return (false);
  }
}

/**
 * This function handles the running of the scheduled zabbix tests.
 */
function zabbix_run_scheduled() {
  $time = time();

  // Run through all the items implemented by any modules.
  $items = zabbix_items();
  foreach ($items as $id => $item) {
    if (variable_get('zabbix_'. $id .'_enabled', FALSE)) {
      // Check dependencies in case a dependent module has been uninstalled since the item was set up.
      $dependencies_ok = TRUE;
      if ($item['dependencies'] && is_array($item['dependencies'])) {
        foreach ($item['dependencies'] as $dependency) {
          if (!module_exists($dependency)) {
            $dependencies_ok = FALSE;
          }
        }
      }
      if ($dependencies_ok) {
        $interval = (int) variable_get('zabbix_'. $id .'_run_interval', 86400);
        $last_run = (int) variable_get('zabbix_'. $id .'_last_run', 0);

        if ($time >= $last_run + $interval) {
          $value = $id();
          zabbix_send($item['key'], $value);
          variable_set('zabbix_'. $id .'_last_run', $time);
          $run = TRUE;
        }
      }
    }
  }
}

/**
 * Implementation of hook_cron().
 */
function zabbix_cron() {
  $enabled = variable_get('zabbix_scheduling_enabled', FALSE);
  if ($enabled) {
    zabbix_run_scheduled();
  }
}

/**
 * Return the update status of any installed and enabled modules.
 * Relies on the update module (in core).
 * Skips dev versions.
 */
function zabbix_module_update_status() {
  $out_of_date = '';

  if (module_exists('update')) {
    $available = update_refresh();
    $data = update_calculate_project_data($available);

    foreach ($data as $project) {
      if (isset($project['recommended'])) {
        if ($project['status'] != UPDATE_STATUS_CURRENT || $project['existing_version'] !== $project['recommended']) {
          $out_of_date .= $out_of_date ? ','. $project['name'] : $project['name'];
        }
      }
    }
  }

  return $out_of_date;
}

/**
 * Return the time that the admin user last logged in as a unix timestamp.
 */
function zabbix_last_admin_login() {
  $time = (int) reset(db_query("SELECT login FROM {users} WHERE uid = 1"));
  return $time;
}

/**
 * Count the number of watchdog emergencies since the last check
 */
function zabbix_watchdog_emergencies() {
  $last_run = variable_get('zabbix_zabbix_watchdog_emergencies_last_run', 0);
  if ($last_run == 0) {
    $interval = variable_get('zabbix_zabbix_watchdog_emergencies_run_interval', 86400);
    $last_run -= $interval;
  }
  $count = (int) reset(db_query("SELECT COUNT(*) FROM {watchdog} WHERE severity = :severity and timestamp > :timestamp", array(':severity' => WATCHDOG_EMERG, ':timestamp' => $last_run)));
  return $count;
}

/**
 * Count the number of watchdog emergencies since the last check
 */
function zabbix_watchdog_alerts() {
  $last_run = variable_get('zabbix_zabbix_watchdog_alerts_last_run', 0);
  if ($last_run == 0) {
    $interval = variable_get('zabbix_zabbix_watchdog_alerts_run_interval', 86400);
    $last_run -= $interval;
  }
  $count = (int) reset(db_query("SELECT COUNT(*) FROM {watchdog} WHERE severity = :severity and timestamp > :timestamp", array(':severity' => WATCHDOG_ALERT, ':timestamp' => $last_run)));
  return $count;
}

/**
 * Count the number of watchdog critical entries since the last check
 */
function zabbix_watchdog_critical() {
  $last_run = variable_get('zabbix_zabbix_watchdog_critical_last_run', 0);
  if ($last_run == 0) {
    $interval = variable_get('zabbix_zabbix_watchdog_critical_run_interval', 86400);
    $last_run -= $interval;
  }
  $count = (int) reset(db_query("SELECT COUNT(*) FROM {watchdog} WHERE severity = :severity and timestamp > :timestamp", array(':severity' => WATCHDOG_CRITICAL, ':timestamp' => $last_run)));
  return $count;
}

/**
 * Count the number of watchdog errors since the last check
 */
function zabbix_watchdog_errors() {
  $last_run = variable_get('zabbix_zabbix_watchdog_errors_last_run', 0);
  if ($last_run == 0) {
    $interval = variable_get('zabbix_zabbix_watchdog_errors_run_interval', 86400);
    $last_run -= $interval;
  }
  $count = (int) reset(db_query("SELECT COUNT(*) FROM {watchdog} WHERE severity = :severity and timestamp > :timestamp", array(':severity' => WATCHDOG_ERROR, ':timestamp' => $last_run)));
  return $count;
}

/**
 * Count the number of watchdog warnings since the last check
 */
function zabbix_watchdog_warnings() {
  $last_run = variable_get('zabbix_zabbix_watchdog_errors_last_run', 0);
  if ($last_run == 0) {
    $interval = variable_get('zabbix_zabbix_watchdog_errors_run_interval', 86400);
    $last_run -= $interval;
  }
  $count = (int) reset(db_query("SELECT COUNT(*) FROM {watchdog} WHERE severity = :severity and timestamp > :timestamp", array(':severity' => WATCHDOG_WARNING, ':timestamp' => $last_run)));
  return $count;
}

/**
 * Count the number of watchdog notices since the last check
 */
function zabbix_watchdog_notices() {
  $last_run = variable_get('zabbix_zabbix_watchdog_errors_last_run', 0);
  if ($last_run == 0) {
    $interval = variable_get('zabbix_zabbix_watchdog_errors_run_interval', 86400);
    $last_run -= $interval;
  }
  $count = (int) reset(db_query("SELECT COUNT(*) FROM {watchdog} WHERE severity = :severity and timestamp > :timestamp", array(':severity' => WATCHDOG_NOTICE, ':timestamp' => $last_run)));
  return $count;
}

/**
 * Count the number of watchdog info entries since the last check
 */
function zabbix_watchdog_info() {
  $last_run = variable_get('zabbix_zabbix_watchdog_info_last_run', 0);
  if ($last_run == 0) {
    $interval = variable_get('zabbix_zabbix_watchdog_info_run_interval', 86400);
    $last_run -= $interval;
  }
  $count = (int) reset(db_query("SELECT COUNT(*) FROM {watchdog} WHERE severity = :severity and timestamp > :timestamp", array(':severity' => WATCHDOG_INFO, ':timestamp' => $last_run)));
  return $count;
}

/**
 * Count the number of watchdog debug entries since the last check
 */
function zabbix_watchdog_debug() {
  $last_run = variable_get('zabbix_zabbix_watchdog_debug_last_run', 0);
  if ($last_run == 0) {
    $interval = variable_get('zabbix_zabbix_watchdog_debug_run_interval', 86400);
    $last_run -= $interval;
  }
  $count = (int) reset(db_query("SELECT COUNT(*) FROM {watchdog} WHERE severity = :severity and timestamp > :timestamp", array(':severity' => WATCHDOG_DEBUG, ':timestamp' => $last_run)));
  return $count;
}

/**
 * Count the number of php watchdog entries since the last check
 */
function zabbix_php_watchdog_entries() {
  $last_run = variable_get('zabbix_zabbix_watchdog_errors_last_run', 0);
  if ($last_run == 0) {
    $interval = variable_get('zabbix_zabbix_watchdog_errors_run_interval', 86400);
    $last_run -= $interval;
  }
  $count = (int) reset(db_query("SELECT COUNT(*) FROM {watchdog} WHERE type = 'php' and timestamp > :type", array(':type' => $last_run)));
  return $count;
}

/**
 * Count the total number of users on the site
 */
function zabbix_count_all_users() {
  $count = (int) reset(db_query("SELECT COUNT(*) FROM {users} WHERE uid != 0 AND uid IS NOT NULL"));
  return $count;
}

/**
 * Count the number of active users on the site
 */
function zabbix_count_active_users() {
  $count = (int) reset(db_query("SELECT COUNT(*) FROM {users} WHERE status = 1 AND uid != 0 AND uid IS NOT NULL"));
  return $count;
}

/**
 * Return a comma separated list of enabled modules.
 */
function zabbix_list_modules() {
  $result = db_query("SELECT name FROM {system} WHERE status = 1 AND type = 'module' ORDER BY name");
  $modules = '';
  foreach($result as $row){
    $modules .= $modules_run_interval ? ','. $row->name : $row->name;
  }
  return $modules;
}

/**
 * Return a comma separated list of enabled themes.
 */
function zabbix_list_themes() {
  $result = db_query("SELECT name FROM {system} WHERE status = 1 AND type = 'theme' ORDER BY name");
  $themes = '';
  foreach($result as $row){
    $themes .= $themes ? ','. $row->name : $row->name;
  }
  return $themes;
}

/**
 * Count the number of published nodes on the site.
 */
function zabbix_count_published_nodes() {
  $count = (int) reset(db_query("SELECT COUNT(DISTINCT nid) FROM {node} WHERE status = 1"));
  return $count;
}

/**
 * Count the total number of node on the site.
 */
function zabbix_count_all_nodes() {
  $count = (int) reset(db_query("SELECT COUNT(DISTINCT nid) FROM {node}"));
  return $count;
}

/**
 * Count the number of sessions for anonymous users.
 * Counts users that logged on in the last 15 mins.
 *
 * Oh hey, Drupal 7 doesn't count anonymous sessions.
 */
function zabbix_count_sessions_anon() {
  /*$interval = time() - 900;
  $count = (int)sess_count($interval, TRUE);
  return $count ? $count : 0;*/
  return 0;
}

/**
 * Count the number of sessions for authenticated users.
 * Counts users that logged on in the last 15 mins.
 */
function zabbix_count_sessions_auth() {
  $interval = time() - 900;
  $count = (int) reset(db_query("SELECT COUNT(sid) FROM {sessions} WHERE timestamp >= :timestamp", array(':timestamp' => $interval)));
  return $count ? $count : 0;
}

/**
* Report the last time cron was successfully run
*/
function zabbix_last_cron_run() {
  $cron_last = variable_get('cron_last', NULL);
  return $cron_last;
}
