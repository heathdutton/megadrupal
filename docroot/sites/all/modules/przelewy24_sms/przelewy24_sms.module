<?php
/**
 * @file
 * Integration for przelewy24.pl SMS service.
 *
 * Allow administrators to restrict access to publishing content
 * via sms verification.
 */

/**
 * Implements hook_permission().
 */
function przelewy24_sms_permission() {
  return array(
    'administer przelewy24_sms' => array(
      'title' => t('Administer Przelewy24 sms'),
      'description' => t('Perform administration tasks for przelewy24 sms'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function przelewy24_sms_menu() {
  $items['admin/config/services/przelewy24_sms'] = array(
    'title' => 'Przelewy24 settings',
    'description' => 'Configure settings for przelewy24.pl integration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('przelewy24_sms_admin_form'),
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('administer przelewy24_sms'),
    'weight' => 0,
  );
  $items['admin/config/services/przelewy24_sms/configuration'] = array(
    'title' => 'Przelewy24 settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access arguments' => array('administer przelewy24_sms'),

  );
  $items['admin/config/services/przelewy24_sms/reports'] = array(
    'title' => 'Przelewy24 - Reports',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'przelewy24_sms_reports',
    'access arguments' => array('administer przelewy24_sms'),
    'weight' => 1,
  );
  return $items;
}

/**
 * Administration form for przelewy24 sms.
 */
function przelewy24_sms_admin_form($form, &$form_state) {

  $form['przelewy24_sms_seller_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Seller ID'),
    '#required' => TRUE,
    '#size' => 10,
    '#maxlength' => 10,
    '#description' => t('Specify the seller ID of przelewy24.pl'),
    '#default_value' => variable_get('przelewy24_sms_seller_id', ''),
  );
  return system_settings_form($form);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function przelewy24_sms_form_node_type_form_alter(&$form, $form_state) {

  if (isset($form['type'])) {
    global $user;
    $form['przelewy24_sms'] = array(
      '#type' => 'fieldset',
      '#title' => t('Przelewy24 sms'),
      '#access' => user_access('administer przelewy24_sms'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#group' => 'additional_settings',
    );
    $form['przelewy24_sms']['przelewy24_sms_access'] = array(
      '#type' => 'checkbox',
      '#title' => t('SMS Content'),
      '#description' => t('Allow publish content only after submitting the correct sms code.'),
      '#default_value' => variable_get('przelewy24_sms_access_' . $form['#node_type']->type, 0),
    );
    $form['przelewy24_sms']['przelewy24_sms_price'] = array(
      '#type' => 'select',
      '#title' => t('SMS price'),
      '#options' => drupal_map_assoc(array(
        61,
        62,
        123,
        246,
        369,
        492,
        615,
        738,
        861,
        984,
        1107,
        1722,
        2337,
        3075,
      )),
      '#description' => t('The amount of the transaction (in pennies).'),
      '#default_value' => variable_get('przelewy24_sms_price_' . $form['#node_type']->type, 123),
    );
    $form['przelewy24_sms']['przelewy24_sms_message'] = array(
      '#type' => 'textarea',
      '#rows' => '5',
      '#title' => t('Message to the user.'),
      '#default_value' => variable_get('przelewy24_sms_message_' . $form['#node_type']->type, ''),
      '#description' => t('Message that informs users what content and to which number they should send the sms.'),
    );
    $form['przelewy24_sms']['przelewy24_sms_format'] = array(
      '#type' => 'select',
      '#title' => t('Text format'),
      '#description' => t('Text format for message.'),
      '#options' => drupal_map_assoc(array_keys(filter_formats($user))),
      '#default_value' => variable_get('przelewy24_sms_format_' . $form['#node_type']->type, 50),
    );
    $form['przelewy24_sms']['przelewy24_sms_position'] = array(
      '#type' => 'select',
      '#title' => t('Position'),
      '#description' => t('Position of the sms code field.'),
      '#options' => array(
        -50 => t('Top'),
        50 => t('Bottom'),
      ),
      '#default_value' => variable_get('przelewy24_sms_position_' . $form['#node_type']->type, 50),
    );
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function przelewy24_sms_form_node_form_alter(&$form, $form_state) {

  if (variable_get('przelewy24_sms_access_' . $form['#node']->type)) {
    $form['przelewy24_sms'] = array(
      '#type' => 'fieldset',
      '#title' => t('SMS code'),
      '#weight' => variable_get('przelewy24_sms_position_' . $form['#node']->type),
    );
    if (isset($form['#node']->nid)) {
      $code = db_select('przelewy24_sms', 'c')
      ->fields('c', array('code'))
      ->condition('nid', $form['#node']->nid)
      ->execute()
      ->rowCount();
    }

    if (!isset($form['#node']->nid) || !$code) {
      $form['przelewy24_sms']['message'] = array(
        '#markup' => check_markup(variable_get('przelewy24_sms_message_' . $form['#node']->type, ''), variable_get('przelewy24_sms_format_' . $form['#node']->type, 'plain_text')),
      );
      $form['przelewy24_sms']['przelewy24_sms_code'] = array(
        '#type' => 'textfield',
        '#size' => 10,
        '#maxlength' => 10,
        '#title' => t('Code'),
        '#required' => TRUE,
        '#description' => t('Enter the sms code.'),
      );
      $form['#validate'][] = 'przelewy24_sms_form_validate';
    }
    else {

      $form['przelewy24_sms']['message'] = array(
        '#markup' => t('Correct sms code sent.'),
      );
    }
  }
}

/**
 * Function to validate sms code.
 */
function przelewy24_sms_form_validate($form, $form_state) {

  // Verify that this form has been sent with the correct code.
  $valid_code = db_select('przelewy24_sms', 'b')
      ->fields('b', array('build_id'))
      ->condition('build_id', $form_state['values']['form_build_id'])
      ->execute()
      ->rowCount();
  if (!$valid_code) {
    if ($form_state['values']['przelewy24_sms_code'] && $form_state['values']['op'] != 'Preview') {

      // Prepare data for the request.
      $url = 'https://secure.przelewy24.pl/smsver.php';
      $data[] = 'p24_id_sprzedawcy=' . variable_get('przelewy24_sms_seller_id', '');
      $data[] = 'p24_kwota=' . variable_get('przelewy24_sms_price_' . $form['#node']->type, 123);
      $data[] = 'p24_sms=' . $form_state['values']['przelewy24_sms_code'];

      $options = array(
        'method' => 'POST',
        'data' => implode('&', $data),
        'headers' => array(
          'Content-Type' => 'application/x-www-form-urlencoded',
          'User-Agent' => 'Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0)',
        ),
      );
      $result = drupal_http_request($url, $options);
      global $user;
      if ($result->data == 'OK') {
        $ip = ip_address();

        if ($user->uid == 0) {
          $user->sid = session_id();
        }

        db_insert('przelewy24_sms')
          ->fields(array(
            'uid' => $user->uid,
            'sess_id' => $user->sid,
            'ip' => $ip,
            'build_id' => $form_state['values']['form_build_id'],
            'time' => time(),
            'code' => $form_state['values']['przelewy24_sms_code'],
        ))
        ->execute();
        drupal_set_message(t('Valid sms code.'));
        watchdog('przelewy24_sms', 'User @name sent proper code @code on przelewy24.pl', array(
          '@name' => $user->name,
          '@code' => $form_state['values']['przelewy24_sms_code'],
        ));

      }
      else {
        form_set_error('przelewy24_sms_code', t('Incorrect sms code'));
        watchdog('przelewy24_sms', 'User @name sent incorrect code @code on przelewy24.pl. Returned code: @data', array(
          '@name' => $user->name,
          '@code' => $form_state['values']['przelewy24_sms_code'],
          '@data' => $result->data,
        ));
      }
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function przelewy24_sms_node_insert($node) {
  if (isset($node->przelewy24_sms_code) && !empty($node->przelewy24_sms_code)) {
    // Add node ID to the db table for information on the reports page.
    db_update('przelewy24_sms')
    ->fields(array('nid' => $node->nid))
    ->condition('code', $node->przelewy24_sms_code)
    ->execute();
  }
}

/**
 * Page callback which returns a list of activated codes.
 */
function przelewy24_sms_reports() {
  $header = array(
    array('data' => 'ID', 'field' => 'id', 'sort' => 'asc'),
    array('data' => 'Node ID', 'field' => 'nid'),
    array('data' => 'Code', 'field' => 'code'),
    array('data' => 'User', 'field' => 'uid'),
    array('data' => 'Time', 'field' => 'time'),
    array('data' => 'Session ID', 'field' => 'sess_id'),
  );

  $query = db_select('przelewy24_sms', 'n')
             ->extend('PagerDefault')
               ->limit(20)
             ->extend('TableSort')
               ->orderByHeader($header)
             ->fields('n', array(
               'id',
               'nid',
               'code',
               'uid',
               'time',
               'sess_id',
           ));

  $results = $query
    ->execute();

  $rows = array();
  foreach ($results as $result) {
    $node = node_load($result->nid);
    $user = user_load($result->uid);
    $rows[] = array(
      'data' => array(
        $result->id,
        l($node->title, 'node/' . $node->nid),
        $result->code,
        l($user->name, 'user/' . $user->uid),
        format_date($result->time),
        $result->sess_id,
      ),
    );
  }

  // Theme the html table.
  $html = theme('table',
    array(
      'header' => $header,
      'rows' => $rows,
      'sticky' => TRUE,
      'empty' => t('No valid codes.'),
    )
  );

  $html .= theme('pager',
    array(
      'tags' => array(),
    )
  );

  return $html;
}
