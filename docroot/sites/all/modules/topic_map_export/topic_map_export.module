<?php

/**
 * @file
 * Export all or part of Drupal installation as Topic Map.
 */

/**
 * Prefix of language variants identifier.
 */
define('TOPIC_MAP_EXPORT_VARIANT_LANG_ID', 'variant_lang');

/**
 * Subject identifier of language variants.
 */
define('TOPIC_MAP_EXPORT_VARIANT_LANG_SI', 'http://www.topicmaps.org/xtm/1.0/language.xtm');

/**
 * ID of display scope topic.
 */
define('TOPIC_MAP_EXPORT_DISPLAY_TOPIC_ID', 'variant_name_display');

/**
 * Subject identifier of display scope.
 */
define('TOPIC_MAP_EXPORT_DISPLAY_TOPIC_SI', 'http://www.topicmaps.org/xtm/1.0/core.xtm#display');

/**
 * Flag wheter to use Drupal's entity_uri function to generate subject
 * identifiers. It's not currently in use because the need for of subject
 * identifiers to be unique and the uri returned by entity_uri in not always
 * necessarily unique.
 */
define('TOPIC_MAP_EXPORT_USE_ENTITY_URI_FOR_SI', TRUE);

/**
 * Flag wheter preserve the html markup from field renders into occurences.
 * If true, then field occurences will be encoded as xml compatible markup.
 */
define('TOPIC_MAP_EXPORT_PRESERVE_FIELD_MARKUP', FALSE);

/**
 * Implements hook_permission().
 */
function topic_map_export_permission() {
  return array(
    'export topic map' => array(
      'title' => t('Export Topic Map'),
      'description' => t('Export sites content as Topic Map file. Topic Map can exported from the !export_page.', array('!export_page' => l(t('export page'), 'admin/reports/topic-map-export'))),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function topic_map_export_menu() {
  $items = array();

  $items['admin/reports/topic-map-export'] = array(
    'title' => 'Export topic map',
    'description' => "Export entire or part of your site to a topic map.",
    'access arguments' => array('export topic map'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('topic_map_export_export_form'),
    'file' => 'includes/topic_map_export.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function topic_map_export_theme($existing, $type, $theme, $path) {

  $path = drupal_get_path('module', 'topic_map_export');
  include_once $path . '/theme/theme.inc';

  $base = array(
    'path' => $path . '/theme',
    'file' => 'theme.inc',
  );

  return array(
    'topic_map_entities_and_bundles' => $base + array(
      'template' => 'topic-map-entities-and-bundles',
      'variables' => array('entities' => array()),
    ),
    'topic_map_header' => $base + array(
      'template' => 'topic-map-header',
      'variables' => array('site_name' => 'Drupal site'),
    ),
    'topic_map_occurence_types' => $base + array(
      'template' => 'topic-map-occurence-types',
      'variables' => array('occurrences' => array()),
    ),
    'topic_map_roles_and_association_types' => $base + array(
      'template' => 'topic-map-roles-and-association-types',
      'variables' => array('association_definitions' => array()),
    ),
    'topic_map_topic' => $base + array(
      'template' => 'topic',
      'variables' => array(
        'topic_id' => NULL,
        'si' => array(),
        'name' => '',
        'instance_of' => array(),
        'occurrences' => array(),
        'variants' => array()),
    ),
    'topic_map_topic_entity' => $base + array(
      'template' => 'topic',
      'variables' => array('topic'),
    ),
    'topic_map_association' => $base + array(
      'template' => 'association',
      'variables' => array('type' => NULL, 'data' => '', 'roles' => array()),
    ),
    'topic_map_occurrence' => $base + array(
      'template' => 'occurrence',
      'variables' => array(
        'type' => NULL,
        'data' => '',
        'dataref' => '',
        'scope' => '',
      ),
    ),
    'topic_map_variant' => $base + array(
      'template' => 'variant',
      'variables' => array('scopes' => array(), 'data' => '', 'dataref' => ''),
    ),
  );
}

/**
 * Includes built-in hook files.
 */
function _topic_map_export_include_hook_files() {
  $includes = file_scan_directory(dirname(__FILE__) . '/plugins', '/.*\.inc$/');

  foreach ($includes as $inc_path => $value) {
    include_once $inc_path;
  }
}

/**
 * Generates a unique key out of association definition.
 *
 * @param array $association_info
 *   An associative array containing the definition for an association type.
 *
 * @return string
 *   Unique key for an association type.
 */
function _topic_map_export_create_key_from_association($association_info) {

  $key = '';

  $key .= key($association_info['definitions']['class']) . '==';
  foreach ($association_info['definitions']['roles'] as $role_key => $role_value) {
    $key .= $role_key;
    if (next($association_info['definitions']['roles'])) {
      $key .= '--';
    }
  }
  return $key;

}


/**
 * Creates datastore for single topic.
 *
 * @param Entity $entity
 *   Entity used for making the topic.
 * @param string $entity_type
 *   Entity type of current entity instance.
 * @param array $classes
 *   (optional) An array of strings, used for describe additional relationships
 *   between topics.
 *
 * @return object
 *   Datastore object for topic, containing minimal information about the
 *   entity and its additional relationships.
 */
function _topic_map_export_create_topic($entity, $entity_type, $classes = array()) {

  $topic = array(
    'basename' => '',
    'entity_id' => 0,
    'topic_id' => 0,
    'type' => $entity_type,
    'bundle' => $entity_type,
    'classes' => $classes,
    'occurrences' => array(),
  );

  $topic = (object) $topic;

  list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);

  $topic->entity_id = $id;
  $topic->bundle = $bundle;
  $topic->topic_id = $topic->type . '-' . $topic->entity_id;

  $topic->basename = entity_label($topic->type, $entity);
  if (!$topic->basename) {
    $topic->basename = $topic->type . ' - ' . $topic->entity_id;
  }
  $topic->basename = check_plain(strip_tags($topic->basename));

  $topic->classes['entity_' . $topic->type . '-bundle_' . $topic->bundle] = TRUE;

  return $topic;

}

/**
 * Creates datastore for single association.
 *
 * @param array $members
 *   An array of members in a association. Single value contains the following
 *   properties:
 *   - actor  Identity of a topic in the association.
 *   - role: Role of a topic in the association.
 * @param string $type_id
 *   Class of an association in Topic Map.
 */
function _topic_map_export_create_association($members, $type_id) {

  $association = array(
    'type' => $type_id,
    'members' => $members,
  );

  $association = (object) $association;

  return $association;

}
