<?php
/**
 * @file
 * Code for the Comment Length Limiter module.
 */

/**
 * Element validation callback.
 *
 * Validates the lenght of the comment if a limit has been set.
 */
function _comment_length_limiter_max_length_validate($element, &$form_state) {
  if (property_exists($form_state['node'], 'comment_max_length') && $form_state['node']->comment_max_length
      && $form_state['node']->comment_max_length < strlen($element['#value'])) {
    form_set_error('comment', t('Your comment is too long, the max allowed length is !maxlength characters', array('!maxlength' => $form_state['node']->comment_max_length)));
  }
}

/**
 * Element validation callback.
 *
 * Validates configured node lenght limit.
 */
function _comment_length_limiter_node_settings_validate($element, &$form_state) {
  if ($element['#value'] != '' && !is_numeric($element['#value'])) {
    form_set_error('comment_max_length', t('You must specify a number or no value for comment max length'));
  }
}
/**
 * Implements hook_form_FORM_ID_alter() for comment_form().
 * 
 * Applies any settings for the node, to the comment form.
 */
function comment_length_limiter_form_comment_form_alter(&$form, &$form_state) {
  // Applies max length.
  if (property_exists($form['#node'], 'comment_max_length') && $form['#node']->comment_max_length) {
    $form['comment_body'][$form['comment_body']['#language']][0]['#node'] = $form['#node'];
    $form['comment_body'][$form['comment_body']['#language']][0]['#after_build'][] = '_comment_length_limiter_comment_form_max_length';
  }
  // Removes subject field.
  if (property_exists($form['#node'], 'comment_no_subject') && $form['#node']->comment_no_subject) {
    $form['subject']['#type'] = 'hidden';
    $form['subject']['#value'] = '<comment_length_limiter_none>';
  }
  elseif ($form['subject']['#default_value'] == '<comment_length_limiter_none>') {
    $form['subject']['#value'] = '';
  }

}

/**
 * After build form element callback.
 */
function _comment_length_limiter_comment_form_max_length(&$element) {
  // Prevent premature calls from doing anything.
  if (!isset($element['value'])) {
    return $element;
  }
  $element['value']['#attributes']['comment_max_length'] = $element['#node']->comment_max_length;
  $element['value']['#element_validate'][] = '_comment_length_limiter_max_length_validate';

  $cols = isset($element['value']['#cols']) ? $element['value']['#cols'] : 60;
  if ($element['value']['#rows'] > $element['#node']->comment_max_length / $cols) {
    $element['value']['#rows'] = ceil($element['#node']->comment_max_length / $cols);
  }
  $element['length_limit']['#markup'] = '<div class="comment-length-limiter">';
  $element['length_limit']['#markup'] .= '
    <span class="comment-length-limiter-label">' . t('Characters left') . ':</span>
    <span class="comment-length-limiter-counter">' . $element['#node']->comment_max_length . '</span>
  ';
  $element['length_limit']['#markup'] .= '</div>';
  $element['#attached']['js'][] = drupal_get_path('module', 'comment_length_limiter') . '/comment_length_limiter.js';
  $element['#attached']['js'][] = drupal_get_path('module', 'comment_length_limiter') . '/jquery.textchange.min.js';
  return $element;
}

/**
 * Implements hook_form_alter().
 * 
 * Adds comment limiter fields to node edit form
 */
function comment_length_limiter_form_alter(&$form, &$form_state, $form_id) {
  if (!empty($form['#node_edit_form'])) {
    $form['comment_settings']['comment_max_length'] = array(
      '#type' => 'textfield',
      '#title' => t('Maximum comment length'),
      '#default_value' => property_exists($form['#node'], 'comment_max_length') ? $form['#node']->comment_max_length : '' ,
      '#size' => 3,
      '#description' => t('Enter the maxumum comment length.'),
      '#weight' => 10,
      '#element_validate' => array('_comment_length_limiter_node_settings_validate'),
    );

    $form['comment_settings']['comment_no_subject'] = array(
      '#type' => 'checkbox',
      '#title' => t('Exclude subject'),
      '#default_value' => property_exists($form['#node'], 'comment_no_subject') ? $form['#node']->comment_no_subject : '' ,
      '#description' => t('Check this box to exclude the subject field from the comments.'),
      '#weight' => 15,
    );
  }
}

/**
 * Implements hook_node_insert().
 */
function comment_length_limiter_node_insert($node) {
  comment_length_limiter_insert_config($node);
}
/**
 * Implements hook_node_update().
 */
function comment_length_limiter_node_update($node) {
  db_delete('comment_length_limiter')->condition('nid', $node->nid)->execute();
  comment_length_limiter_insert_config($node);
}
/**
 * Implements hook_node_delete().
 */
function comment_length_limiter_node_delete($node) {
  db_delete('comment_length_limiter')->condition('nid', $node->nid)->execute();
}

/**
 * Implements hook_node_load().
 */
function comment_length_limiter_node_load($nodes, $types) {
  $query = db_select('comment_length_limiter', 'cll')
      ->fields('cll', array('nid', 'max_length', 'no_subject'))
      ->condition('nid', array_keys($nodes), 'IN');
  $result = $query->execute();
  while ($obj = $result->fetchObject()) {
    $nodes[$obj->nid]->comment_max_length = $obj->max_length;
    $nodes[$obj->nid]->comment_no_subject = $obj->no_subject;
  }
}

/**
 * Saves new comment length limiter info for the node.
 *
 * @param object $node
 *   The node object.
 */
function comment_length_limiter_insert_config($node) {
  if (property_exists($node, 'comment_max_length') && $node->comment_max_length ||
      property_exists($node, 'comment_no_subject') && $node->comment_no_subject) {
    $node->max_length = $node->comment_max_length;
    $node->no_subject = $node->comment_no_subject;
    drupal_write_record('comment_length_limiter', $node);
  }
}

/**
 * Implements template_preprocess_comment().
 *
 * Clears subject field when value is <comment_length_limiter_none>.
 */
function comment_length_limiter_preprocess_comment(&$vars) {
  if ($vars['comment']->subject == '<comment_length_limiter_none>') {
    $vars['comment']->subject = '';
    $vars['title'] = '';
  }
}
