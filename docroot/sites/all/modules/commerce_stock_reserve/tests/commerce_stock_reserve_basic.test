<?php
/**
 * @file
 * Basic stock reserving tests.
 */

class CommerceStockReserveBasicTestCase extends CommerceStockReserveBaseTestCase {

  /**
   * @{inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => 'Commerce Stock Reserve',
      'description' => 'Test reserving stock with Commerce Simple Stock.',
      'group' => 'Commerce Stock Reserve',
    );
  }

  /**
   * @{inheritdoc}
   *
   * Enable Commerce Simple Stock and Commerce Simple Stock Rules.
   */
  public function setUp($modules = array()) {
    parent::setUp(array('commerce_ss', 'commerce_ssr'));
  }

  /**
   * Test reserving stock.
   */
  public function testReserve() {
    $this->enableSimpleStock();

    $product = $this->createDummyProduct();

    $initial_stock = rand(10, 15);
    commerce_stock_reserve_set_product_stock($product, $initial_stock);
    $this->assertEqual($initial_stock, commerce_stock_reserve_get_product_stock($product), 'Initial stock set to ' . $initial_stock);

    // Create an order containing the product.
    $quantity = rand(1, 10);
    $order = $this->createDummyOrder(1, array(
      $product->product_id => $quantity,
    ));

    // Test the new product stock amount.
    $expected_new_stock = $initial_stock - $quantity;
    $actual_stock = commerce_stock_reserve_get_product_stock($product, TRUE);
    $this->assertEqual($expected_new_stock, $actual_stock,
      t('Product stock should be reduced to @expected (actual @actual)', array(
        '@expected' => $expected_new_stock,
        '@actual' => $actual_stock,
      ))
    );

    // Test the reserved product stock amount.
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
    $line_item = $order_wrapper->commerce_line_items->get(0)->value();
    $reserved = commerce_stock_reserve_get_reserved_amount($line_item);
    $this->assertEqual($quantity, $reserved,
      t('Reserved stock should be @expected (actual @actual)', array(
        '@expected' => $quantity,
        '@actual' => $reserved,
      ))
    );

    // Increment the line item quantity, and run the same tests again.
    $line_item->quantity += 1;
    commerce_line_item_save($line_item);
    commerce_order_save($order);

    $actual_stock = commerce_stock_reserve_get_product_stock($product, TRUE);
    $this->assertEqual($expected_new_stock - 1, $actual_stock,
      t('Product stock should be reduced to @expected (actual @actual)', array(
          '@expected' => $expected_new_stock - 1,
          '@actual' => $actual_stock,
        ))
    );

    $reserved = commerce_stock_reserve_get_reserved_amount($line_item);
    $this->assertEqual($quantity + 1, $reserved,
      t('Reserved stock should be @expected (actual @actual)', array(
          '@expected' => $quantity + 1,
          '@actual' => $reserved,
        ))
    );
  }

  /**
   * Enable Simple Stock management for a product type.
   *
   * @param string $product_type
   *   The machine name for a product type (default: 'product').
   *
   * @return bool
   *   TRUE for success and FALSE for failure.
   */
  protected function enableSimpleStock($product_type = 'product') {
    if (commerce_ss_product_type_enabled($product_type)) {
      return TRUE;
    }
    module_load_include('inc', 'commerce_ss', 'includes/commerce_ss.admin');
    commerce_ss_admin_configure_product_type($product_type);
    $enabled = commerce_ss_product_type_enabled($product_type);
    $this->assertTrue($enabled, t('Simple Stock management enabled for product type @type', array(
      '@type' => $product_type,
    )));
    return $enabled;
  }

}
