<?php

/**
 * @file
 * Provides functionality to show a diff between two user revisions.
 */

/**
 * Implementation of hook_help().
 */
function user_diff_help($path, $arg) {
  switch ($path) {
    case 'admin/help#diff':
      $output = '<p>'. t('The user diff module overwrites the normal revisions view. The revisions table is enhanced with a possibility to view the difference between two user revisions. Users with the %view_revisions permission will also be able to view the changes between any two selected revisions. You may disable this for individual content types on the content type configuration page. This module also provides a nifty %preview_changes button while editing a post.', array('%preview_changes' => t('View changes'), '%view_revisions' => t('view revisions'))) .'</p>';
      return $output;
    case 'user/%/revisions/%/view':
      // the following string is copied from string copied from node_help('node/%/revisions')
      return '<p>'. t('The revisions let you track differences between multiple versions of a user.') .'</p>';
    case 'user/%/revisions/view/%/%':
      return '<p>'. t('Comparing two revisions:') .'</p>';
  }
}

/**
 * Implementation of hook_menu().
 */
function user_diff_menu() {
  $items = array();

  /**
   * By using MENU_LOCAL_TASK (and 'tab_parent') we can get the various revision-views to
   * show the View|Edit|Revision-tabs of the node on top, and have the Revisions-tab open.
   * To avoid creating/showing any extra tabs or sub-tabs (tasks below top level) for the
   * various paths (i.e. "Diff", "Show latest" and "Show a specific revision") that need
   * a revision-id (vid) parameter, we make sure to set 'tab_parent' a bit odd.
   * This solution may not be the prettiest one, but by avoiding having two _LOCAL_TASKs
   * sharing a parent that can be accessed by its full path, it seems to work as desired.
   * Breadcrumbs work decently, at least the user link is among the crumbs. For some reason
   * any breadcrumbs "before/above" the user profile is only seen at 'user/%user/revisions/%/view'.
   */
  $items['user/%user/revisions/list'] = array(
    // Not used directly, but was created to get the other menu items to work well
    'title' => 'List revisions',
    'page callback' => 'user_diff_diffs_overview',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access callback' => '_user_revision_access',
    'access arguments' => array(1, array('view user revisions', 'view own user revisions')),
    'file' => 'user_diff.pages.inc',
  );
  $items['user/%user/revisions/view'] = array(
    'title' => 'Diff',
    'page callback' => 'user_diff_diffs_show',
    'page arguments' => array(1, 4, 5),
    'type' => MENU_LOCAL_TASK,
    'access callback' => '_user_revision_access',
    'access arguments' => array(1, array('view user revisions', 'view own user revisions')),
    'tab_parent' => 'user/%/revisions/list',
    'file' => 'user_diff.pages.inc',
  );
  $items['user/%user/revisions/view/latest'] = array(
    'title' => 'Show latest diff',
    'page callback' => 'user_diff_latest',
    'page arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'access callback' => '_user_revision_access',
    'access arguments' => array(1, array('view user revisions', 'view own user revisions')),
    'tab_parent' => 'user/%/revisions/view',
    'file' => 'user_diff.pages.inc',
  );
  return $items;
}

/**
 * Implementation of hook_menu_alter().
 */
function user_diff_menu_alter(&$callbacks) {
  // Overwrite the default 'Revisions' page
  $callbacks['user/%user/revisions']['page callback'] = 'user_diff_diffs_overview';
  $callbacks['user/%user/revisions']['module'] = 'user_diff';
  $callbacks['user/%user/revisions']['file'] = 'user_diff.pages.inc';

  $callbacks['user/%user/revisions/%/view']['tab_parent'] = 'user/%/revisions/list';
  $callbacks['user/%user_revision/revisions/%/revert']['tab_parent'] = 'user/%/revisions/%/view';
  $callbacks['user/%user_revision/revisions/%/delete']['tab_parent'] = 'user/%/revisions/%/view';
  return;
}

/**
 * Access callback for the user revisions page.
 * Determines whether a user has access to perform a certain operation on a revision.
 * @param object $user The user object of the user in question.
 * @param mixed $op Either a string or an array:
 * String: A single word describing the action: 'view', 'edit', 'delete', 'revert'
 * Array: Each element is a full permission string: 'view user revisions', 'edit user revisions', 'delete user revisions', 'revert user revisions'
 */
function user_diff_user_revision_access($user, $op = 'view') {
  if (is_array($op)) {
    return _user_revision_access($user, $op);
  }
  else {
    return _user_revision_access($user, $op . ' user revisions');
  }
}

/**
 * Implements hook_block_info().
 */
function user_diff_block_info() {
  return array('inline' => array('info' => t('Inline User diff')));
}

/**
 * Implements hook_block_view().
 */
function user_diff_block_view($delta) {
  if ($delta === 'inline' && user_access('view user revisions') && $user = menu_get_object('user')) {
    $block = array();
    $revisions = user_revision_list($user);
    if (count($revisions) > 1) {
      $block['subject'] = t('Highlight changes');
      $block['content'] = drupal_get_form('user_diff_inline_form', $user, $revisions);
    }
    return $block;
  }
}

/**
 * Implementation of hook_user_view_alter().
 */
function user_diff_user_view_alter(&$build) {
  $user = $build['#account'];
  if (user_access('view user revisions') && variable_get('show_user_diff_inline', FALSE)) {
    // Ugly but cheap way to check that we are viewing a node's revision page.
    if (arg(2) === 'revisions' && arg(3) === $user->vid) {
      module_load_include('inc', 'user_diff', 'user_diff.pages');
      module_load_include('inc', 'diff', 'diff.pages');
      $old_vid = _diff_get_previous_vid(user_revision_list($user), $user->vid);
      // $node->content = array('#value' => diff_inline_show($node, $old_vid));
      $build = array('#markup' => user_diff_inline_show($user, $old_vid));
    }
    $build['#prefix'] = isset($build['#prefix']) ? "<div id='diff-inline-{$user->uid}'>" . $build['#prefix'] : "<div id='diff-inline-{$user->uid}'>";
    $build['#suffix'] = isset($build['#suffix']) ? $build['#suffix'] . "</div>" : "</div>";
  }
}

/**
 * Implements hook_form_alter().
 */
function user_diff_form_alter(&$form, $form_state, $form_id) {
  if (!empty($form['#user_edit_form'])) {
    // Add a 'View changes' button on the node edit form.
    if (variable_get('show_preview_user_changes', TRUE) && $form['uid']['#value'] > 0) {
      $form['actions']['preview_changes'] = array(
        '#type' => 'submit',
        '#value' => t('View changes'),
        '#weight' => 12,
        '#submit' => array('user_diff_user_form_build_preview_changes')
      );
    }
  }
}

/**
 * Implements hook_form_alter() for node_type_form.
 */
function user_diff_form_user_revision_admin_settings_alter(&$form, $form_state) {
  // Node type edit form.
  // Add checkbox to activate 'View changes' button per node type.
  $form['user_diff'] = array(
      '#type' => 'fieldset',
      '#title' => t('User Diff'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
  );
  $form['user_diff']['show_preview_user_changes'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show %preview_changes button on user edit form', array('%preview_changes' => t('View changes'))),
    '#weight' => 10,
    '#default_value' => variable_get('show_preview_user_changes', TRUE),
  );
  $form['user_diff']['show_user_diff_inline'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show diffs inline for users'),
    '#description' => t("You must enable the 'Inline User diff' block to use this feature"),
    '#weight' => 10,
    '#default_value' => variable_get('show_user_diff_inline', FALSE),
  );
  $form['user_diff']['user_diff_show_editors_ip'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show the ip of the revision editor in the diff'),
    '#weight' => 11,
    '#default_value' => variable_get('user_diff_show_editors_ip', FALSE),
  );
}

/**
 * Callback if 'View changes' is pressed.
 */
function user_diff_user_form_build_preview_changes($form, &$form_state) {
  module_load_include('inc', 'user_diff', 'user_diff.pages');
  $user = $form['#builder_function']($form, $form_state);

  // Create diff of old node and edited node
  $rows = _user_diff_body_rows(user_load($form_state['values']['uid']), $user);
  $cols = _diff_default_cols();
  $header = _diff_default_header();
  $changes = theme('diff_table', array('header' => $header, 'rows' => $rows, 'attributes' => array('class' => 'diff'), 'cols' => $cols));

  // Prepend diff to edit form
  $form_state['user_preview'] = $changes;
  $form_state['rebuild'] = TRUE;
}

/**
 * Implementation of hook_theme().
 */
function user_diff_theme() {
  return array(
    'user_diff_user_revisions' => array(
      'render element' => 'form',
      'file' => 'user_diff.theme.inc',
    ),
    'user_diff_inline_metadata' => array(
      'arguments' => array('user' => NULL),
      'file' => 'user_diff.theme.inc',
    ),
  );
}

/**
 * Form builder: Inline diff controls.
 */
function user_diff_inline_form($form, $form_state, $user, $revisions) {
  $form = array();
  $form['user'] = array(
    '#type' => 'value',
    '#value' => $user
  );
  $form['revision'] = array(
    '#type' => 'select',
    '#options' => array(0 => '< '. t('No highlighting') . ' >'),
    '#default_value' => (arg(2) === 'revisions' && arg(3) === $user->vid) ? $user->vid : 0,
    '#ajax' => array(
      'callback' => 'user_diff_inline_ajax',
      'wrapper' => "diff-inline-{$user->uid}",
      'method' => 'replace',
    ),
  );
  foreach ($revisions as $revision) {
    $form['revision']['#options'][$revision->vid] = t('@revision by @name', array(
      '@revision' => format_date($revision->timestamp, 'short'),
      '@name' => $revision->name,
    ));
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('View'),
    '#submit' => array('user_diff_inline_form_submit'),
    '#attributes' => array('class' => array('diff-js-hidden')),
  );
  return $form;
}

/**
 * AHAH callback for rendering the inline diff of a user.
 */
function user_diff_inline_ajax($form, $form_state) {
  module_load_include('inc', 'user_diff', 'user_diff.pages');
  $user = $form['user']['#value'];
  $vid = isset($form_state['values']['revision']) ? $form_state['values']['revision'] : 0;
  return "<div id='diff-inline-{$user->uid}'>" . user_diff_inline_show($user, $vid) . "</div>";
}

/**
 * Form submission handler for diff_inline_form() for JS-disabled clients.
 */
function user_diff_inline_form_submit(&$form, &$form_state) {
  if (isset($form_state['values']['revision'], $form_state['values']['user'])) {
    $user = $form_state['values']['user'];
    $vid = $form_state['values']['revision'];
    $form_state['redirect'] = "user/{$user->uid}/revisions/{$vid}/view";
  }
}
