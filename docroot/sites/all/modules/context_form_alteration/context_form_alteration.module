<?php
/**
 * @file
 * Module file.
 */

/**
 * Implements hook_theme().
 */
function context_form_alteration_theme() {
  return array(
    'context_form_alteration_settings_table' => array(
      'render element' => 'form',
    ),
  );
}


/**
 * Implements hook_context_registry().
 *
 * Tried to keep naming insanity to a minimum.
 */
function context_form_alteration_context_registry() {
  $registry['reactions'] = array(
    'alter_form' => array(
      'title' => t('Form Alteration'),
      'description' => t('Alter forms via context.'),
      'plugin' => 'context_reaction_alter_form',
    ),
  );
  return $registry;
}


/**
 * Implements hook_context_plugins().
 */
function context_form_alteration_context_plugins() {
  $plugins['context_reaction_alter_form'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'context_form_alteration'),
      'file' => 'context_reaction_alter_form.context.inc',
      'class' => 'context_reaction_alter_form',
      'parent' => 'context_reaction',
    ),
  );
  return $plugins;
}


/**
 * Implements hook_context_page_reaction().
 * NOTE: usage in form_alter().
function context_form_alteration_context_page_reaction() {
  if ($plugin = context_get_plugin('reaction', 'alter_form')) {
    $plugin->execute();
  }
}
 */


/**
 * Implements hook_form_alter().
 *
 * Allow for form alters from active contexts' options.
 */
function context_form_alteration_form_alter(&$form, &$form_state, $form_id) {
  if ($plugin = context_get_plugin('reaction', 'alter_form')) {
    $plugin->execute($form);
  }
}


/**
 * Get any context with an alter_form reaction.
 */
function context_form_alteration_get_contexts() {
  $contexts = context_context_list();
  $form_alter_contexts = array();

  foreach ($contexts as $name) {
    $context = context_load($name);
    if (isset($context->reactions['alter_form'])) {
      $form_alter_contexts[] = $context;
    }
  }

  return $form_alter_contexts;
}


/**
 * i18n helper function. Refreshes strings when a refresh is triggered through
 * admin/config/regional/translate/i18n_string.
 */
function context_form_alteration_i18n_update_strings() {
  if (!function_exists('i18n_string_update')) {
    return;
  }

  foreach (context_form_alteration_get_contexts() as $context) {
    foreach ($context->reactions['alter_form']['elements'] as $element) {
      if (isset($element['i18n']) && $element['i18n']) {
        $i18n_context = context_form_alteration_i18n_context($element, $context);
        i18n_string_update($i18n_context, $element['value']);
      }
    }
  }
}


/**
 * Helper function to get an i18n string context, given a form alteration
 * reaction element instance.
 *
 * @param array $element
 *   An element array, as expected in a context form alteration reaction.
 *
 * @return string
 *   The string context, as expected by i18n string.
 */
function context_form_alteration_i18n_context($element, $context) {
  $i18n_context = array(
    'context_form_alteration',
    $context->name,
    $element['form_id'],
    isset($element['parents']) ? $element['parents'] : '',
    isset($element['attribute']) ? $element['attribute'] : '',
    'value',
  );

  return implode(':', $i18n_context);
}


/**
 * Theme function to ouput settings table.
 */
function theme_context_form_alteration_settings_table($variables) {
  $form = $variables['form'];
  $rows = array();
  foreach (element_children($form) as $key => $val) {
    $rows[$key] = array(
      'data' => array(
        drupal_render($form[$key]['form_id']),
        drupal_render($form[$key]['parents']),
        drupal_render($form[$key]['attribute']),
        drupal_render($form[$key]['value']),
        drupal_render($form[$key]['append']),
        drupal_render($form[$key]['i18n']),
      ),
    );
  }
  $headers = array(
    t('Form ID'),
    t('Parents'),
    t('Attribute'),
    t('Value'),
    t('Append'),
    t('Translate'),
  );
  return theme('table', array('header' => $headers, 'rows' => $rows));
}
