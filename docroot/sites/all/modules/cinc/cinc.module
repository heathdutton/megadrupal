<?php


/**
 * Base interface for all CINC classes, requires CRUD functions.
 */
interface CINC_CRUD {

  /**
   * Saves new configuration to active storage (i.e. database).
   */
  public function create();

  /**
   * Reads configuration from active storage (i.e. database).
   */
  public function read();


  /**
   * Test if a configuration exists in the database.
   */
  public function exists();

  /**
   * Saves changes to existing configuration to active storage (i.e. database).
   */
  public function update();

  /**
   * Removes configuration from active storage (i.e. database).
   */
  public function delete();

  /**
   * Updates if already exists. Otherwise, creates.
   */
  public function create_or_update();

}

/**
 * Base class for all CINC classes, provides common functionality.
 */
class CINC {

  public $config = array();
  public $config_aliases = array();
  public $config_filters = array();

  public static function init($type) {
    $class_name = 'CINC_' . $type;

    if (isset($class_name::$dependencies) && is_array($class_name::$dependencies)) {

      $dependency_flag = FALSE;
      $missing_dependencies = array();

      foreach ($class_name::$dependencies as $dependency) {

        if (!module_exists($dependency)) {
          array_push($missing_dependencies, $dependency);
          $dependency_flag = TRUE;
        }

        if ($dependency_flag == TRUE) {
          return new CINC_MissingDependencies($missing_dependencies);
        }

      }

    }

    return new $class_name();
  }

  public function create_or_update() {

    if ($this->exists()) {
      $this->update();
    }
    else {
      $this->create();
    }
    return $this;

  }

  public function exists() {
    return FALSE;
  }

  /**
   * Alias for init.
   */
  public static function config($type) {
    return CINC::init($type);
  }

  /**
   * Sets properties of the config.
   *
   * @code
   * CINC::init('ContentType')
   *   ->set('name', 'My Sweet Content Type')
   *   ->set('title label', 'A Title Label')
   * @endcode
   *
   * @param string $property
   *   Property to set.
   * @param string|array $value
   *   Value to set on property.
   * @return $this
   */
  public function set($property, $value) {

    // Swap aliases.
    if (isset($this->config_aliases[$property])) {
      return $this->set($this->config_aliases[$property], $value);
    }
    // Apply filters.
    if (isset($this->config_filters[$property])) {
      $filter_function = $this->config_filters[$property];
      if (!$this->{$filter_function}($value)) {
        return $this;
      }
    }
    // Get the property reference.
    $property_reference = &CINC::get_property_reference($property, $this->config);
    // Array merge value if both value and property reference are arrays.
    if (is_array($value) && isset($property_reference) && is_array($property_reference)) {
      $value = drupal_array_merge_deep($property_reference, $value);
    }
    // Set property.
    $property_reference = $value;

    return $this;
  }

  /**
   * Sets all data at once.
   */
  public function set_data($config) {
    $this->config = $config;
  }

  /**
   * Alias for set_data.
   */
  public function setData($config) {
    $this->set_data($config);
  }

  static public function &get_property_reference($property, &$array, $null_on_missing = FALSE) {

    $property_parts = explode('.', $property);
    $first_part = array_shift($property_parts);

    if (count($property_parts) == 0) {
      if (!$null_on_missing || isset($array[$first_part])) {
        return $array[$first_part];
      }
      else {
        $return = NULL;
        return $return;
      }
    }

    $property = implode('.', $property_parts);

    $reference = &CINC::get_property_reference($property, $array[$first_part], $null_on_missing);
    return $reference;

  }

  /**
   * Clears config entry.
   */
  public function clear($property) {
    $property_parts = explode('.', $property);
    if (count($property_parts) > 1) {
      $child_property = array_pop($property_parts);
      $parent_property = implode('.', $property_parts);
      $parent_property_reference = &CINC::get_property_reference($parent_property, $this->config);
      unset($parent_property_reference[$child_property]);
    }
    else {
      unset($this->config[$property]);
    }
    return $this;
  }

  /**
   * Returns a config entry.
   */
  public function get($property) {
    $property_reference = &CINC::get_property_reference($property, $this->config, TRUE);
    return $property_reference;
  }

  public function machine_name($value = '') {

    if (empty($value)) {

      if (isset($this->config_machine_name)) {
        return $this->get($this->config_machine_name);
      }
      return NULL;
    }
    else {

      if (isset($this->config_machine_name)) {
        return $this->set($this->config_machine_name, $value);
      }
      return $this;

    }

  }

  /**
   * Creates display names from machine names.
   */
  public static function display_name_from_machine_name($machine_name) {
    return ucwords(str_replace('_', ' ', $machine_name));
  }

  /**
   * Cleans machine names.
   */
  public static function clean_machine_name($machine_name) {
    return strtolower(str_replace(' ', '_', trim($machine_name)));
  }

  /**
   * Returns default YAML.
   * Declare $this->yaml_filter() to alter defaults.
   */
  public function yaml() {
    if (module_exists('cinc_yaml')) {
      $config = $this->config;
      if (method_exists($this, 'yaml_filter')) {
        $config = $this->yaml_filter($config);
      }
      return cinc_yaml_to_yaml($config);
    }
    return false;
  }

  /**
   * Returns default YAML file name, using $this->cinc_yaml_prefix.
   * Override in subclasses for non-default.
   */
  public function yaml_filename() {
    return $this->cinc_yaml_prefix . '.' . $this->machine_name() . '.yml';
  }

  /**
   * Returns YAML regex.
   * Uses $this->cinc_yaml_regex, if set.
   * Falls back to $this->cinc_yaml_prefix.
   */
  public function yaml_regex() {
    $parent_class = get_parent_class($this);

    if ($parent_class) {

      $parent_object = new $parent_class();

      if (
        (isset($parent_object->cinc_yaml_regex)) ||
        (isset($parent_object->cinc_yaml_prefix))
      ) {
        return FALSE;
      }

    }

    if (isset($this->cinc_yaml_regex)) {
      return $this->cinc_yaml_regex;
    }
    if (isset($this->cinc_yaml_prefix)) {
      return '/^' . str_replace('.', '\.', $this->cinc_yaml_prefix) . '/';
    }

    return FALSE;

  }

}

/**
 * Placeholder class for other classes with missing dependencies.
 */
class CINC_MissingDependencies extends CINC {

  public $missing_dependencies;

  function __construct($missing_dependencies) {
    $this->missing_dependencies = $missing_dependencies;
  }

  function __call($method, $args) {
    return $this;
  }

}

/**
 * Provides array of all available CINC_ classes.
 * This is resource-intensive, so results should be used to create caches.
 */
function cinc_available_classes() {

  $cinc_classes = &drupal_static(__FUNCTION__);

  if (!isset($cinc_classes)) {

    $cinc_classes = array();

    $modules = module_list();

    foreach ($modules as $module) {

      $module_path = drupal_get_path('module', $module);
      $info_path = $module_path . '/' . $module . '.info';
      $info = drupal_parse_info_file($info_path);

      if (isset($info['files']) && is_array($info['files'])) {

        foreach ($info['files'] as $file_path) {

          $path_parts = explode('/', $file_path);
          $file = array_pop($path_parts);
          $path_with_file = implode('/', $path_parts);
          $file_parts = explode('.', $file);

          if ($file_parts[0] == 'cinc' && $file_parts[1] != 'test') {
            $extension = array_pop($file_parts);
            $file_name = implode('.', $file_parts);
            module_load_include($extension, $module, $path_with_file . '/' . $file_name);
          }

        }

      }

    }

    $classes = get_declared_classes();

    foreach ($classes as $class) {
      if (strpos($class, 'CINC_') === 0 && $class != 'CINC_MissingDependencies') {
        $cinc_classes[] = $class;
      }
    }

  }

  return $cinc_classes;

}

/**
 * Creates object of $type from $array.
 */
function cinc_object_from_array($array, $type) {
  $object = new $type();
  foreach ($array as $key => $value) {
    $object->{$key} = $value;
  }
  return $object;
}
