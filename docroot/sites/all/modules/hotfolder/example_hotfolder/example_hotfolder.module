<?php
// $Id$

/**
 * @file
 * Hotfolder Example Functions - Example Implementation of Hotfolder API.
 * Test the hotfolder system with a simple CSV process to template.
 */

/*
 * This module provides serves as an example of the API in use.
 *
 * hook_hotfolder_moxart_hotfolder_action_info
 * This hook informs the Hotfolder module of the actions and functions this module provides.
 * This hook is expected to return an array of the form:
 * return array(
 *   'action_keyword' => array(                                         // Required.
 *     'human_name' => 'Human readable name of this action.',           // Optional.
 *     'description' => 'Human readable description of this action.',   // Optional.
 *     'form_callback' => 'callback_function_name',                     // Optional.
 *     'prep_callback' => 'callback_function_name',                     // Optional.
 *     'create_callback' => 'callback_function_name',                   // Optional.
 *     'post_callback' => 'callback_function_name',                     // Optional.
 *     'drop_callback' => 'callback_function_name',                     // Optional.
 *     'clean_callback' => 'callback_function_name',                    // Optional.
 *     'theme' => 'moxart_hotfolder_action_settings',                   // Optional.
 *   );
 * Keywords should always be lower case, and shoulder begin with the module name to avoid conflicts.
 * 'action_keyword' is the keyword the system will use to track configurations for this action.
 * 'form_callback' is the name of the function that provides the form elements for configuring the action.
 * 'prep_callback' is the name of the function that provides actions during the preparation stage of the action.
 * 'create_callback' is the name of the function that provides actions during the creation stage of the action.
 * 'post_callback' is the name of the function that provides actions during the post-creation stage of the action.
 * 'drop_callback' is the name of the function that provides actions during the drop-off stage of the action.
 * 'clean_callback' is the name of the function that provides actions during the clean up stage of the action.
 * 'theme' is the name of the theme function for the action, by default this is 'moxart_hotfolder_action_settings'.
 * Which is defined in moxart_hotfolder. If you want to use your own theme, declare it using hook_theme.
 * Not all callback functions have to be declared. Where left out, the system ignores the action for that stage.
 * Hotfolder stages are as follows:
 * PREP STAGE - For example: read the file, do prepation cleanup or configure connections.
 * CREATION STAGE - For example: execute file against FusionPro, or other outside resource.
 * POST CREATION STAGE - For example: given file(s) from creation, create zip files, update job data.
 * DROP OFF STAGE - For example: move file(s) to folder, or FTP, or SCP.
 * CLEANUP STAGE - For example: final actions before closing job, send emails or delete files.
 * There are two primary approaches to defining an action set. You can put them all into one configuration set
 * as shown in this example. This is a less flexible approach, but enforces some reliability on actions.
 * Alternatively each of these callbacks could be defined as it's own action allowing configurations to
 * mix and match according to the needs of the end user. If you do this, be careful to account for error conditions.
 */

/*
 * Implements hook_hotfolder_action_info().
 */
function example_hotfolder_hotfolder_action_info() {
  return array(
    'example_hotfolder_read_csv' => array(
      'human_name' => 'Process CSV File',
      'description' => 'Read the file data in',
      'form_callback' => '_example_hotfolder_read_csv_settings',
      // Stages of processing.
      'prep_callback' => '_example_hotfolder_read_csv_timeout',
      'creation_callback' => '_example_hotfolder_map_data_to_template',
      'drop_off_callback' => '_example_hotfolder_drop_off_csv',
    ),
    'example_hotfolder_read_csv_timeout' => array(
      'human_name' => 'Process CSV File With Sleep',
      'description' => 'Read the file data in',
      'form_callback' => '_example_hotfolder_read_csv_settings_timeout',
      // Stages of processing.
      'prep_callback' => '_example_hotfolder_read_csv',
      'creation_callback' => '_example_hotfolder_map_data_to_template',
      'drop_off_callback' => '_example_hotfolder_drop_off_csv',
    ),
  );
}

/*
 * Form callback. Called by Hotfolder API.
 */
function _example_hotfolder_read_csv_settings() {
  $form['example_hotfolder_has_header'] = array(
    '#type' => 'checkbox',
    '#title' => 'The CSV file has a header row',
    '#description' => 'The CSV has a header row.',
  );
  $template_list = array(
    'HTML list' => 'HTML list',
    'XML list' => 'XML list',
  );
  $form['example_hotfolder_template'] = array(
    '#type' => 'select',
    '#title' => 'Data Template',
    '#description' => 'Output template format.',
    '#options' => $template_list,
  );
  $form['example_hotfolder_drop_off'] = array(
    '#type' => 'textfield',
    '#title' => 'Dropoff Folder',
    '#description' => 'Drop the file(s) off in this folder (within default sites path).',
  );
  $form['example_hotfolder_create_folder'] = array(
    '#type' => 'checkbox',
    '#title' => 'Create the dropoff folder',
    '#description' => 'Attempt to create the dropoff location folder if it doesn\'t exist.',
  );
  return $form;
}

/*
 * Form callback. Called by Hotfolder API.
 */
function _example_hotfolder_read_csv_settings_timeout() {
  // Get basic form.
  $form = _example_hotfolder_read_csv_settings();
  // Add extra sleep setting.
  $form['example_hotfolder_sleep'] = array(
    '#type' => 'textfield',
    '#title' => 'Sleep',
    '#default_value' => 60,
    '#description' => 'How long to sleep (in seconds) before continuing processing.',
  );
  return $form;
}

/**
 * Action callback.
 */
function _example_hotfolder_read_csv_timeout($settings, $context) {
  // SLEEP! We want to sleep for a super long time to allow for threads to be tested.
  $sleep = isset($settings['settings']['example_hotfolder_sleep']['value']) ?
    $settings['settings']['example_hotfolder_sleep']['value'] : 60;
  _hotfolder_watchdog('hotfolder', 'Sleeping for @sleep seconds.', array('@sleep' => $sleep), WATCHDOG_DEBUG);
  sleep($sleep);
  return _example_hotfolder_read_csv($settings, $context);
}

/*
 * Action callback. Called by Hotfolder API.
 */
function _example_hotfolder_read_csv($settings, $context) {
  _hotfolder_watchdog('hotfolder', 'Gathering example input.', array(), WATCHDOG_DEBUG);
  $job = $context['job'];
  $file = _hotfolder_get_src_file($job);
  $input = fopen($file, "r");
  $max_columns = 0;
  $output = '';
  if ($input) {
    while (!feof ($input)) {
      $row = fgetcsv($input, 4096);
      if (is_array($row) ) {
        $output[] = $row;
      }
    }
    fclose($input);
  }
  if (empty($output)) {
    $context['error'] = TRUE;
    $context['message'] = 'No data was read from this file.';
  }
  $context['example_hotfolder_data'] = $output;
  return $context;
}

/*
 * Action callback. Called by Hotfolder API.
 */
function _example_hotfolder_map_data_to_template($settings, $context) {
  _hotfolder_watchdog('hotfolder', 'Creating example output.', array(), WATCHDOG_DEBUG);
  $template = 'HTML list';
  if (!empty($settings['settings']['example_hotfolder_template']['value'])) {
    $template = $settings['settings']['example_hotfolder_template']['value'];
  }
  $data = isset($context['example_hotfolder_data']) ? $context['example_hotfolder_data'] : '';
  if (empty($data)) {
    $context['error'] = TRUE;
    $context['message'] = 'No data for templates.';
    return $context;
  }
  $header = array();
  if (!empty($settings['settings']['example_hotfolder_has_header']['value']) && $settings['settings']['example_hotfolder_has_header']['value'] == TRUE) {
    $header = $data[0];
    unset($data[0]);
  }
  $output = '';
  switch ($template) {
    case 'XML list':
      $output = _example_hotfolder_map_data_to_xml($data, $header);
    break;
    case 'HTML list':
    default:
      $output = _example_hotfolder_map_data_to_html($data, $header);
    break;
  }
  if (empty($output)) {
    $context['error'] = TRUE;
    $context['message'] = 'No output returned for this file.';
  }
  $context['example_hotfolder_result'] = $output;
  return $context;
}

/*
 * Action callback. Called by Hotfolder API.
 */
function _example_hotfolder_drop_off_csv($settings, $context) {
  _hotfolder_watchdog('hotfolder', 'Saving example output.', array(), WATCHDOG_DEBUG);
  $job = $context['job'];
  // Get settings.
  $create_folder = isset($settings['settings']['example_hotfolder_create_folder']['value'])
    ? $settings['settings']['example_hotfolder_create_folder']['value'] : FALSE;
  $drop_off = isset($settings['settings']['example_hotfolder_drop_off']['value'])
    ? $settings['settings']['example_hotfolder_drop_off']['value'] : '';
  if (empty($drop_off)) {
    $context['error'] = TRUE;
    $context['message'] = 'No drop-off directory configuration found.';
    return $context;
  }
  // Make sure we have a directory.
  $scheme = file_uri_scheme($drop_off);
  if (!file_stream_wrapper_valid_scheme($scheme)) {
    $drop_off = file_build_uri($drop_off);
  }
  $drop_off = file_stream_wrapper_uri_normalize($drop_off);
  if ($create_folder && !is_dir($drop_off)) {
    _hotfolder_watchdog('hotfolder', 'Creating example dropoff folder @folder',
      array('@folder' => $drop_off), WATCHDOG_DEBUG);
    file_prepare_directory($drop_off, FILE_CREATE_DIRECTORY);
  }
  // Figure out the extension.
  $template = 'HTML list';
  if (!empty($settings['settings']['example_hotfolder_template']['value'])) {
    $template = $settings['settings']['example_hotfolder_template']['value'];
  }
  switch ($template) {
    case 'XML list':
      $ext = '.xml';
    break;
    case 'HTML list':
    default:
      $ext = '.html';
    break;
  }
  $file = _hotfolder_get_src_file($job);
  $destination =  $drop_off . '/' . basename($file) . $ext;
  _hotfolder_watchdog('hotfolder', 'Saving @destination.', array('@destination' => $destination), WATCHDOG_DEBUG);
  // Create the file.
  file_unmanaged_save_data($context['example_hotfolder_result'], $destination, FILE_EXISTS_RENAME);
  return $context;
}

/**
 * Helper function, output data to HTML string.
 */
function _example_hotfolder_map_data_to_html($data, $header = array()) {
  $output = '<html><body>';
  foreach ($data as $row) {
    $output .= '<ul>';
    foreach ($row as $index => $field) {
      $header_text = '';
      if (!empty($header[$index])) {
        $header_text = $header[$index] . ':';
      }
      $output .= '<li>' . $header_text . $field . '</li>';
    }
    $output .= '</ul>';
  }
  $output .= '</body></html>';
  return $output;
}

/**
 * Helper function, output data to XML string.
 */
function _example_hotfolder_map_data_to_xml($data, $header = array()) {
  $output = '<dataset>';
  foreach ($data as $index => $row) {
    $output .= '<row>';
    foreach ($row as $index => $field) {
      $header_text = 'field';
      if (!empty($header[$index])) {
        $header_text = drupal_strtolower($header[$index]);
      }
      $output .= '<' . $header_text . '>' . $field . '</' . $header_text . '>';
    }
    $output .= '</row>';
  }
  $output .= '</dataset>';
  return $output;
}