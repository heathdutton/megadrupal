<?php
// $Id$

/**
 * @file - Hotfolder Actions. Provides the field widget for customized Hotfolder actions.
 */
/*
 * Implements hook_field_info().
 */
function hotfolder_action_config_field_info() {
  return array(
    'hotfolder_action_config' => array(
      'label' => t('Custom Action'),
      'description' => t('Custom Action Field'),
      'default_widget' => 'hotfolder_action_config_widget',
      'default_formatter' => 'hotfolder_action_config_formatter',
    ),
  );
}

/*
 * Implements hook_field_widget_info().
 */
function hotfolder_action_config_field_widget_info() {
  return array(
    'hotfolder_action_config_widget' => array(
      'label' => t('Custom Action Widget'),
      'field types' => array('hotfolder_action_config'),
    ),
  );
}

/*
 * Implements hook_field_widget_form().
 */
function hotfolder_action_config_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  if ($instance['widget']['type'] == 'hotfolder_action_config_widget') {
    $default_action = 'hotfolder_none';
    $default_settings = array();
    if (!empty($items[$delta]['action_settings'])) {
      $value = unserialize($items[$delta]['action_settings']);
      $default_action = isset($value['name']) ? $value['name'] : '';
      $default_settings = isset($value['settings']) ? $value['settings'] : array();
    }
    $configured_actions = _hotfolder_action_config_get_action_info();
    $options = array();
    $options['hotfolder_none'] = 'No action';
    foreach ($configured_actions as $action_name => $action) {
      $name = $action['human_name'];
      if (empty($name)) {
        $name = $action_name;
      }
      $options[$action_name] = $name;
    }
    $element['action'] = array(
      '#title' => t('Actions'),
      '#type' => 'select',
      '#options' => $options,
      '#default_value' => $default_action,
    );
    foreach ($configured_actions as $action_name => $action) {
      // For each action selected, there can be a configuration form to gather values for it.
      // But the form should ONLY show up when we want it for an associated action.
      // This is where we pull in jQuery to make the form visible / not visible.
      if (!empty($action['form_callback']) && function_exists($action['form_callback'])) {
        $element[$action_name . '_fieldset'] = array(
          '#type' => 'fieldset',
          '#title' => t('@name', array('@name' => $action['human_name'])),
          '#description' => t('@description', array('@description' => $action['description'])),
          '#collapsible' => FALSE,
          '#states' => array(
            'visible' => array(_hotfolder_action_config_make_jquery_selector($instance['field_name'], $langcode, $delta, 'action') => array('value' => $action_name)),
            // We cannot reference the name directly in #states because this is an element defintion not a form.
          ),
        );
        $action_form = call_user_func_array($action['form_callback'], array());
        // Add form to the fieldset.
        foreach ($action_form as $action_setting_name => $action_setting_value) {
          $element[$action_name . '_fieldset'][$action_setting_name] = $action_setting_value;
          if ($default_action == $action_name && !empty($default_settings[$action_setting_name])) {
            $element[$action_name . '_fieldset'][$action_setting_name]['#default_value'] = $default_settings[$action_setting_name];
          }
        }
      } // end if
    } // end foreach
    // Element placeholders. This is where data needs to be stored to be tracked per delta.
    $element['action_settings'] = array(
      '#type' => 'hidden',
      '#value' => '',
    );
  }
  // Validation here is what grabs the user selected values and stores them in the hidden field.
  $element['#element_validate'] = array('_hotfolder_action_config_flatten_action_settings');
  return $element;
}

/*
 * Implements hook_field_is_empty().
 */
function hotfolder_action_config_field_is_empty($item, $field) {
  if (empty($item['action']) || $item['action'] == 'hotfolder_none') {
    return TRUE;
  }
  return FALSE;
}

/*
 * Implements hook_field_schema().
 */
function hotfolder_action_config_field_schema($field) {
  return array(
    'columns' => array(
      'action_settings' => array(
        'type' => 'blob',  // To give plenty of room for very complex configuration forms.
        'not null' => TRUE
      ),
    ),
    'indexes' => array(),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function hotfolder_action_config_field_formatter_info() {
  return array(
    'hotfolder_action_config_formatter' => array(
      'label' => t('Default'),
      'field types' => array('hotfolder_action_config'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function hotfolder_action_config_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];
  switch ($display['type']) {
    case 'hotfolder_action_config_formatter':
      foreach ($items as $delta => $item) {
        $element[$delta] = array('#markup' => _hotfolder_action_config_format_default_field($item));
      }
      break;
  }
  return $element;
}

/**
 * Implements hook_theme().
 */
function hotfolder_action_config_theme($existing, $type, $theme, $path) {
  return array(
    'hotfolder_action_settings' => array(
      'variables' => array('action_settings' => array()),
      'template' => 'hotfolder-action-settings',
    ),
  );
}

/**
 * Helper function.
 * Render a single formatted entry. Returns a structured array that will display the data stored in $item.
 */
function _hotfolder_action_config_format_default_field($item) {
  // Retrieve action info for this action.
  $action_settings = _hotfolder_action_config_expand_action_config($item['action_settings']);
  // Unless a different theme is set by the config. Use this one.
  $theme = 'hotfolder_action_settings';
  if (!empty($action_settings['theme'])) {
    $theme = $action_settings['theme'];
  }
  return theme($theme, array('action_settings' => $action_settings));
}

/**
 * Helper function.
 * Merge a action configuration with given action_info for the configuration.
 */
function _hotfolder_action_config_expand_action_config($action_value) {
  $configured_actions = _hotfolder_action_config_get_action_info();
  $action_settings = unserialize($action_value);
  $action_name = $action_settings['name'];
  if (!empty($action_name) && !empty($configured_actions[$action_name])) {
    $action_settings = array_merge($configured_actions[$action_name], $action_settings);
  }
  // Grab the human readable labels for each setting from the associated form elements.
  if (!empty($action_settings['form_callback']) && function_exists($action_settings['form_callback'])) {
    $action_form = call_user_func_array($action_settings['form_callback'], array());
    foreach ($action_settings['settings'] as $setting_name => $setting_value) {
      $action_settings['settings'][$setting_name] = array(
       'value' => $setting_value,
       'human_name' => !empty($action_form[$setting_name]['#title']) ? $action_form[$setting_name]['#title'] : '',
       'description' => !empty($action_form[$setting_name]['#description']) ? $action_form[$setting_name]['#description'] : '',
      );
    }
  }
  return $action_settings;
}

/**
 * Helper function.
 * Returns a jQuery selector to test for #states conditions.
 */
function _hotfolder_action_config_make_jquery_selector($field_name, $langcode, $delta, $item_name) {
  return ':input[name="' . $field_name . '[' . $langcode . '][' . $delta . '][' . $item_name . ']"], ' .
    ':input[name$="[' . $field_name . '][' . $langcode . '][' . $delta . '][' . $item_name . ']"]';
}

/*
 * Helper function.
 * Validates the element, moving the form settings into the hidden storage value.
 */
function _hotfolder_action_config_flatten_action_settings($element, &$form_state) {
  // Reconstruct data from given field sets.
  $action['name'] = $element['action']['#value'];
  if (!empty($element[$action['name'] . '_fieldset'])) {
    $action_settings = element_children($element[$action['name'] . '_fieldset']);
    foreach ($action_settings as $setting_name) {
      $action['settings'][$setting_name] = $element[$action['name'] . '_fieldset'][$setting_name]['#value'];
    }
  }
  // Serialize data.
  // Yes. I know. But getting drupal to attach to multiple results wasn't working.
  // I would like to avoid creating a whole new custom table here, and these are purely configuration values.
  $action = serialize($action);
  // Address the field we want to set.
  $element['#parents'][] = 'action_settings';
  form_set_value($element, $action, $form_state);
}

/*
 * Helper function.
 * Retrieve actions from hooks defined in other modules.
 */
function _hotfolder_action_config_get_action_info() {
  $actions = array();
  $actions = module_invoke_all('hotfolder_action_info');
  return $actions;
}
