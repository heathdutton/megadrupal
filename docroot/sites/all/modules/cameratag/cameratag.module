<?php

/**
 * @file
 * Create a cameratag field type.
 *
 * Allows users to save a field using cameratag.
 */

/**
 * Implements hook_menu().
 */
function cameratag_menu() {
  return array(
    'admin/config/services/cameratag' => array(
      'title' => 'Camera Tag',
      'description' => 'Configure settings for the Camera Tag integration.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('cameratag_admin'),
      'access arguments' => array('administer site configuration'),
    ),
  );
}

/**
 * Menu callback to provide a system settings form.
 */
function cameratag_admin() {
  $form = array();

  $form['cameratag_apikey'] = array(
    '#type' => 'textfield',
    '#title' => t('Camera Tag API key'),
    '#default_value' => variable_get('cameratag_apikey'),
    '#size' => 50,
    '#maxlength' => 50,
    '#description' => t('Click on "Credentials" in the menu of your <a target="_blank" href="https://cameratag.com/cameras">Camera Tag admin panel</a> to view your API key.'),
  );

  $form['cameratag_defaultcamerauuid'] = array(
    '#type' => 'textfield',
    '#title' => t('Default camera UUID'),
    '#default_value' => variable_get('cameratag_defaultcamerauuid'),
    '#size' => 36,
    '#maxlength' => 36,
    '#description' => t('UUID of the camera. To find this visit your <a target="_blank" href="https://cameratag.com/cameras">Camera Tag admin panel</a>, select your camera from the list and click "camera settings".'),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_field_info().
 */
function cameratag_field_info() {
  return array(
    'cameratag' => array(
      'label' => t('Camera tag video'),
      'description' => t('This field records a video using cameratag.'),
      'default_widget' => 'cameratag_uploader',
      'default_formatter' => 'cameratag_default',
    ),
  );
}

/**
 * Implements hook_field_widget_info().
 */
function cameratag_field_widget_info() {
  return array(
    'cameratag_uploader' => array(
      'label' => t('Camera field'),
      'field types' => array('cameratag'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    ),
  );
}

/**
 * Implements hook_field_instance_settings_form().
 */
function cameratag_field_instance_settings_form($field, $instance) {
  $settings = $instance['settings'];
  // Add your global settings fields here.
  $form = array();

  $form['camera_recorder_width'] = array(
    '#type' => 'textfield',
    '#title' => t('Width of the camera recorder'),
    '#description' => t('The width for the camera recording. Enter with px or % (eg: 300px).'),
    '#default_value' => !empty($settings['camera_recorder_width']) ? $settings['camera_recorder_width'] : '',
  );

  $form['camera_recorder_height'] = array(
    '#type' => 'textfield',
    '#title' => t('Height of the camera recorder'),
    '#description' => t('The height for the camera recording. Enter with px or % (eg: 300px).'),
    '#default_value' => !empty($settings['camera_recorder_height']) ? $settings['camera_recorder_height'] : '',
  );

  $form['camera_recorder_max_length'] = array(
    '#type' => 'textfield',
    '#title' => t('Max length of the recordings on this field'),
    '#description' => t('The max length for the recording (eg: 30 for 30 secs). Leave empty for no max length.'),
    '#default_value' => !empty($settings['camera_recorder_max_length']) ? $settings['camera_recorder_max_length'] : '',
  );

  $form['video_sources'] = array(
    '#title' => t('Video Source'),
    '#type' => 'checkboxes',
    '#description' => t('Select the video sources for the videos.'),
    '#options' => array(
      'record' => t('Record'),
      'upload' => t('Upload'),
      'sms' => t('SMS'),
    ),
    '#default_value' => !empty($settings['video_sources']) ? $settings['video_sources'] : array(
      'record',
      'upload',
      'sms',
    ),
  );

  return $form;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function cameratag_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {

  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element = array();

  $element['video_tag_aspect_ratio'] = array(
    '#type' => 'textfield',
    '#title' => t('Aspect ratio for the video'),
    '#description' => t('This option, used to setup JW Player for responsive design, is set to the video display aspect ratio, for example "16:9". height option is ignored.'),
    '#default_value' => $settings['video_tag_aspect_ratio'],
  );

  $element['video_tag_height'] = array(
    '#type' => 'textfield',
    '#title' => t('Height of the video tag to display the video'),
    '#description' => t('Height of the player in pixels. We recommend setting this to at least 180, 40) 270.'),
    '#default_value' => $settings['video_tag_height'],
  );

  $element['video_tag_autostart'] = array(
    '#type' => 'checkbox',
    '#title' => t('Autostart playing the video'),
    '#description' => t('Make the video automatically start playing'),
    '#default_value' => $settings['video_tag_autostart'],
  );

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function cameratag_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary = t('Use a @video_tag_aspect_ratio ratio to display a video of @video_tag_height size', array(
    '@video_tag_aspect_ratio' => $settings['video_tag_aspect_ratio'],
    '@video_tag_height' => $settings['video_tag_height'],
  ));
  return $summary;
}

/**
 * Implements hook_field_widget_form().
 */
function cameratag_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  switch ($instance['widget']['type']) {
    case 'cameratag_uploader':

      $cameratag_app_uuid = check_plain(variable_get('cameratag_apikey', NULL));
      $cameratag_camera_id = check_plain(variable_get('cameratag_defaultcamerauuid', NULL));

      $camera_recorder_width = check_plain($instance['settings']['camera_recorder_width']);
      $camera_recorder_height = check_plain($instance['settings']['camera_recorder_height']);

      $cameratag_max_length = check_plain($instance['settings']['camera_recorder_max_length']);
      $cameratag_max_length_attr = '';

      $camera_video_sources = implode(",", array_filter($instance['settings']['video_sources']));

      $element['#attached']['js'] = array(
        0 => array(
          'data' => '//cameratag.com/api/v6/js/cameratag.js',
          'type' => 'external',
        ),
        1 => array(
          'data' => array('cameratag' => array('camera_id' => $cameratag_camera_id)),
          'type' => 'setting',
        ),
        2 => array(
          'data' => drupal_get_path('module', 'cameratag') . '/cameratag.js',
          'type' => 'file',
        ),
      );

      if ($cameratag_max_length) {
        $cameratag_max_length_attr = 'data-maxlength=" ' . $cameratag_max_length . ' "';
      }

      // Save the video uuid before saving the form (wherever the field is in).
      $element['video_uuid'] = array(
        '#type' => 'hidden',
        '#title' => t('Video uuid'),
        '#default_value' => isset($items[$delta]['video_uuid']) ? $items[$delta]['video_uuid'] : '',
        '#size' => 100,
        '#attributes' => array('id' => 'cameratag_video_uuid'),
      );

      $element['camera_tag'] = array(
        '#type' => 'item',
        '#markup' => '<camera id=' . $cameratag_camera_id . ' data-sources="' . $camera_video_sources . '" data-app-id=' . $cameratag_app_uuid . ' ' . $cameratag_max_length_attr . ' style="width:' . $camera_recorder_width . ';height:' . $camera_recorder_height . ';"></camera>',
      );

      break;
  }
  return $element;
}

/**
 * Implements hook_field_is_empty().
 */
function cameratag_field_is_empty($item, $field) {
  if (empty($item['video_uuid'])) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_field_formatter_info().
 */
function cameratag_field_formatter_info() {
  return array(
    'cameratag_default' => array(
      'label' => t('Default'),
      'field types' => array('cameratag'),
      'settings' => array(
        'video_tag_aspect_ratio' => '16:9',
        'video_tag_height' => '270',
        'video_tag_autostart' => 0,
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function cameratag_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  // Do the camera magic to display.
  $element = array();
  $settings = $display['settings'];

  switch ($display['type']) {
    case 'cameratag_default':
      foreach ($items as $delta => $item) {
        if (isset($item['video_uuid'])) {
          $video_uuid = check_plain($item['video_uuid']);

          $video_tag_aspect_ratio = check_plain($settings['video_tag_aspect_ratio']);
          $video_tag_height = check_plain($settings['video_tag_height']);
          $video_tag_autostart = $settings['video_tag_autostart'] ? "true" : "false";

          drupal_add_js('//cameratag.com/api/v6/js/cameratag.js', 'external');
          $element[$delta]['#markup'] = '<video id="rando" data-uuid=\'["' . $video_uuid . '"]\' data-options=\'{"autostart":' . $video_tag_autostart . ',"aspectratio":"' . $video_tag_aspect_ratio . ' ","height":" ' . $video_tag_height . '"}\'></video>';
        }
      }
      break;
  }
  return $element;
}
