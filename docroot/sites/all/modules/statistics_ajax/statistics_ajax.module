<?php
/**
 * @file
 * This is the main module file for Statistics AJAX
 */

/**
 * Implements hook_help().
 */
function statistics_ajax_help($path, $arg) {
  $output = '';
  switch ($path) {
    case 'admin/help#statistics_ajax':
      $output =
        '<p>' .
          t('Creates a method that lets you programmatically (through AJAX)
          increment a node\'s count in the node_counter table') .
        '</p>';
      break;
  }
  return $output;
}

/**
 * Implements hook_permission().
 */
function statistics_ajax_permission() {
  return array(
    'use statistics_ajax' => array(
      'title' => t('use statistics_ajax'),
      'description' => t('Enable users to use statistics ajax for both getting and updating the statistics'),
    ),
    'administer statistics_ajax' => array(
      'title' => t('administer statistics_ajax'),
      'description' => t('Enable users to visit the administration page and configure statistics ajax'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function statistics_ajax_menu() {
  $items = array();
  // this is the URI that the module listens on in order to update the database
  $items['statistics_ajax/get/%node'] = array(
    'title' => 'statistics_ajax counter',
    'page callback' => 'statistics_ajax_get_counter',
    'page arguments' => array(2),
    'access arguments' => array('use statistics_ajax'),
    'type' => MENU_CALLBACK,
  );
  $items['statistics_ajax/update/%node'] = array(
    'title' => 'statistics_ajax counter',
    'page callback' => 'statistics_ajax_update_counter',
    'page arguments' => array(2),
    'access arguments' => array('use statistics_ajax'),
    'type' => MENU_CALLBACK,
  );
  // this is the administraion page, that has basic configuration for the
  // module
  $items['admin/config/system/statistics_ajax'] = array(
    'title' => 'Statistics AJAX settings',
    'description' => 'Here you can restrict what HTTP methods are allowed to
      update the node counter statistics, this may help to increase security',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('statistics_ajax_settings'),
    'access arguments' => array('administer statistics_ajax'),
    'file' => 'statistics_ajax.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Gets the current statistics for the node in question. Drupal validates the
 * node before this function is called
 *
 * @param node the node object to update
 * @return JSON indicating success or failure
 */
function statistics_ajax_get_counter($node) {
  // check if restricted to AJAX only
  if (variable_get('statistics_ajax_limit_requests_xmlhttprequest', 0)) {
    // check server headers
    if (!(isset($_SERVER['HTTP_X_REQUESTED_WITH'])
      && strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest')) {
      drupal_json_output(array(
        'status' => t('error'),
        'data' => t('AJAX must be used'),
      ));
      exit;
    }
  }
  // check if HTTP POST is allowed
  if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    // check if this method is allowed
    if (!variable_get('statistics_ajax_limit_requests_post', 0)) {
      drupal_json_output(array(
        'status' => t('error'),
        'data' => t('POST is not allowed'),
      ));
      exit;
    }
  }
  // check if HTTP GET is allowed
  elseif ($_SERVER['REQUEST_METHOD'] === 'GET') {
    // check if this method is allowed
    if (!variable_get('statistics_ajax_limit_requests_get', 0)) {
      drupal_json_output(array(
        'status' => t('error'),
        'data' => t('GET is not allowed'),
      ));
      exit;
    }
  }
  // ensure the HTTP method is either GET or POST - other methods
  // are denied (e.g. HEAD, OPTIONS)
  else {
    drupal_json_output(array(
      'status' => t('error'),
      'data' => t('unknown HTTP method'),
    ));
    exit;
  }
  // sanity check, ensure $node exists
  if (!$node) {
    drupal_json_output(array(
      'status' => t('error'),
      'data' => t('node does not exist'),
    ));
    exit;
  }
  // retrieves a node's "view statistics" (array with both totalcount, daycount)
  $result = statistics_get($node->nid);
  // display success message on the response
  drupal_json_output(array(
    'status' => t('success'),
    'totalcount' => $result['totalcount'],
    'daycount' => $result['daycount'],
  ));
  exit;
}

/**
 * Performs the database update, $node must be valid before this
 * function is entered into (no further validation), drupal takes
 * care of this for us
 *
 * @param node the node object to update
 * @return JSON indicating success or failure
 */
function statistics_ajax_update_counter($node) {
  // check if restricted to AJAX only
  if (variable_get('statistics_ajax_limit_requests_xmlhttprequest', 0)) {
    // check server headers
    if (!(isset($_SERVER['HTTP_X_REQUESTED_WITH'])
      && strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest')) {
      drupal_json_output(array(
        'status' => t('error'),
        'data' => t('AJAX must be used'),
      ));
      exit;
    }
  }
  // check if HTTP POST is allowed
  if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    // check if this method is allowed
    if (!variable_get('statistics_ajax_limit_requests_post', 0)) {
      drupal_json_output(array(
        'status' => t('error'),
        'data' => t('POST is not allowed'),
      ));
      exit;
    }
  }
  // check if HTTP GET is allowed
  elseif ($_SERVER['REQUEST_METHOD'] === 'GET') {
    // check if this method is allowed
    if (!variable_get('statistics_ajax_limit_requests_get', 0)) {
      drupal_json_output(array(
        'status' => t('error'),
        'data' => t('GET is not allowed'),
      ));
      exit;
    }
  }
  // ensure the HTTP method is either GET or POST - other methods
  // are denied (e.g. HEAD, OPTIONS)
  else {
    drupal_json_output(array(
      'status' => t('error'),
      'data' => t('unknown HTTP method'),
    ));
    exit;
  }
  // sanity check, ensure $node exists
  if (!$node) {
    drupal_json_output(array(
      'status' => t('error'),
      'data' => t('node does not exist'),
    ));
    exit;
  }
  // a node has been viewed, so update the node's counters
  db_merge('node_counter')
    ->key(array('nid' => $node->nid))
    ->fields(array(
      'daycount' => 1,
      'totalcount' => 1,
      'timestamp' => REQUEST_TIME,
    ))
    ->expression('daycount', 'daycount + 1')
    ->expression('totalcount', 'totalcount + 1')
    ->execute();
  // display success message on the response
  drupal_json_output(array(
    'status' => t('success'),
    'data' => t('node updated'),
  ));
  exit;
}
