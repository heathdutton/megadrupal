<?php
/**
 * @file
 * Code for the CRM Core Event feature.
 */

include_once 'crm_core_event.features.inc';

define('CMCEV_THANKS_EMAIL_TAG', variable_get('crm_core_event_thanks_email_tag', 'CRM Core Event Registration Confirmation Message'));

/**
 * Implements hook_menu().
 */
function crm_core_event_menu() {

  // Configuration settings for CRM Core Event.
  $items['admin/config/crm-core/cmcev'] = array(
    'title' => 'CRM Core Event Settings',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('crm_core_event_admin_settings_form'),
    'file' => 'crm_core_event.admin.inc',
    'access arguments' => array('administer crm core event'),
    'description' => 'Provides controls for general behaviors of event registration, the appearance of reports, etc.',
  );

  // General settings page for CRM Core Event.
  $items['admin/config/crm-core/cmcev/settings'] = array(
    'title' => 'General Settings',
    'description' => 'Configure settings for CRM Core Event.',
    'position' => 'left',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  // Settings page for reports in CRM Core Event.
  $items['admin/config/crm-core/cmcev/reports'] = array(
    'title' => 'Reports Settings',
    'description' => 'Configure settings for reports in CRM Core Event.',
    'position' => 'left',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('crm_core_event_admin_report_settings_form'),
    'file' => 'crm_core_event.admin.inc',
    'access arguments' => array('administer crm core event'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function crm_core_event_permission() {
  return array(
    'administer crm core event' => array(
      'title' => t('Administer CRM Core Event'),
      'description' => t('Access to administrative tools in CRM Core Event.'),
    ),
    'register for events' => array(
      'title' => t('Register for events'),
      'description' => t('Users should have this permission in order to register for an event.'),
    ),
    'view registration list for own events' => array(
      'title' => t('View registration list for own events.'),
      'description' => t('Allows users to view lists of people registered to attend events.'),
    ),
    'view registration list for all events' => array(
      'title' => t('View registration list for all events.'),
      'description' => t('Allows users to view lists of people registered to attend events.'),
    ),
    'manage event registration' => array(
      'title' => t('Manage Event Registration'),
      'description' => t('Allows users to access the event registration page. Shows users a list of contacts and provides them with several VBO tools for managing information about an event.'),
    ),
    'access event management page' => array(
      'title' => t('Access Event Management Page'),
      'description' => t('Allows users to see the event management page at admin/structure/crm-core/cmcev/event-management.'),
    ),
    'view overview report' => array(
      'title' => t('View Overview Report'),
      'description' => t('Allows users to see the event registration overview report.'),
    ),
    'view event overview' => array(
      'title' => t('View Event Overview'),
      'description' => t('Allows users to see the event overview report.'),
    ),
    'view attendees report' => array(
      'title' => t('View Attendees Report'),
      'description' => t('Allows users to view the overall attendees report.'),
    ),
    'view registration sources report' => array(
      'title' => t('View Registration Sources Report'),
      'description' => t('Allows users to view the registration sources report.'),
    ),
    'view revenues report' => array(
      'title' => t('View Revenues Report'),
      'description' => t('Allows users to view the revenues report.'),
    ),
  );
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function crm_core_event_form_crm_core_profile_entry_form_alter(&$form, &$form_state, $form_id) {
  $form['#submit'][102] = 'crm_core_event_submit_handler';
}

/**
 * The submit handler, which fires each time someone is registering for event.
 */
function crm_core_event_submit_handler($form, &$form_state) {

  // Load the node being used to house the even.
  $event = menu_get_object();

  // Check to make sure we are working with a event page.
  if (is_object($event) && $event->type == 'cmcev_event') {
    // Load event node configuration.
    $event_config = crm_core_event_load_node_config($event->nid);

    // Check if contact and activity exists in profile.
    $registrant = isset($form_state['crm_core_contact']) ? $form_state['crm_core_contact'] : NULL;
    $registration = isset($form_state['crm_core_activity']) ? $form_state['crm_core_activity'] : NULL;

    // Sending "Thank you email".
    if (!empty($event_config->thanks_email) && isset($registration)) {
      $registrant_email = crm_core_contact_get_primary_field_value($registrant, 'email');
      if (!empty($registrant_email)) {
        if (isset($registration)) {
          $registration_wrapper = entity_metadata_wrapper('crm_core_activity', $registration);
          $amount = $registration_wrapper->field_cmcev_amount->value();
        }
        if (!isset($amount)) {
          $amount = 0;
        }
        rules_invoke_component($event_config->thanks_email, $registrant_email, $registrant, $event, $amount);
      }
    }
  }
}

/**
 * Implements hook_node_load().
 */
function crm_core_event_node_load($nodes, $types) {

  foreach ($nodes as $node) {
    if ($node->type == 'cmcev_event') {
      $node_config = crm_core_profile_load_node_config($node->nid);
      if (!empty($node_config->use_profile)) {
        $profile = crm_core_profile_load($node_config->profile_name);
        $event_config = crm_core_event_load_node_config($node->nid);
        // Init profile data, if not set.
        if (!isset($node->crm_core_profile_data)) {
          $node->crm_core_profile_data = array();
        }
        // Lets check if registration is still available.
        // Checking user access.
        if (!user_access('register for events')) {
          $node->crm_core_profile_data['access_override']['access'] = FALSE;
          $node->crm_core_profile_data['access_override']['message'] = variable_get('crm_core_event_default_text', t('Please login to register for this event.'));
          continue;
        }

        // Checking auto complete setting.
        $auto_complete = variable_get('crm_core_event_auto_complete', FALSE);
        if ($auto_complete) {
          $nw = entity_metadata_wrapper('node', $node);
          $start_date = $nw->field_cmcev_date->value->value();
          $current_date = time();
          if ($current_date > $start_date) {
            $node->crm_core_profile_data['access_override']['access'] = FALSE;
            $node->crm_core_profile_data['access_override']['message'] = variable_get('crm_core_event_registration_complete', t('Registration is complete.'));
            continue;
          }
        }
        if (!empty($event_config)) {
          // Checking maximum number of registrations.
          if (!empty($event_config->max_registration)) {
            $max_registration = (int) $event_config->max_registration;
            $query = db_select('crm_core_activity', 'registration');
            $query->join('field_data_field_cmcev_event', 'event', 'registration.activity_id = event.entity_id');
            $query->condition('type', 'cmcev_event_registration');
            $query->where('event.field_cmcev_event_target_id = :event_id', array(':event_id' => $node->nid));
            $count = $query->fields('registration', array('activity_id'))->countQuery();
            $registrations = (int) $count->execute()->fetchField();
            if (!empty($registrations) && ($registrations >= $max_registration)) {
              $node->crm_core_profile_data['access_override']['access'] = FALSE;
              $node->crm_core_profile_data['access_override']['message'] = variable_get('crm_core_event_max_registrants', t('This event is sold-out.'));
              continue;
            }
          }
          // Amount enabled on profile and fixed price ticket set on event,
          // overriding settings for amount.
          if (isset($profile->fields['commerce_product_commerce_product_commerce_items_amount_single'])
            && !empty($profile->fields['commerce_product_commerce_product_commerce_items_amount_single']['status'])
          ) {
            $levels = crm_core_profile_commerce_items_parse_amounts($event_config->tickets);
            if (!empty($levels)) {
              list($title, $amount) = explode('|', array_shift($levels));
              $node->crm_core_profile_data['commerce_items_amount_single'] = array(
                'amount' => $amount,
                'title' => $title,
              );
            }
          }
          if (isset($profile->fields['commerce_product_commerce_product_commerce_items_cart'])
            && !empty($profile->fields['commerce_product_commerce_product_commerce_items_cart']['status'])
          ) {
            $levels = crm_core_profile_commerce_items_parse_amounts($event_config->tickets);
            $cart_items = array();
            foreach ($levels as $level) {
              list($label, $amount) = explode('|', $level);
              $cart_items[] = array(
                'title' => trim($label),
                'amount' => trim($amount),
              );
            }
            $node->crm_core_profile_data['commerce_items_cart_items'] = $cart_items;
          }
        }
      }
    }
  }
}

/**
 * Load node config.
 *
 * @param int $nid
 *   Node ID.
 *
 * @return object|FALSE
 *   Returns nodes configuration, if saved, FALSE otherwise.
 */
function crm_core_event_load_node_config($nid) {
  $cache =& drupal_static(__FUNCTION__, array());
  if (empty($cache[$nid])) {
    $cache[$nid] = db_select('crm_core_event_nodes', 'c')
      ->condition('nid', $nid)
      ->fields('c')
      ->execute()->fetchObject();
  }

  return empty($cache[$nid]) ? FALSE : $cache[$nid];
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function crm_core_event_form_node_form_alter(&$form, $form_state) {

  $node = $form['#node'];

  if ($node->type == 'cmcev_event') {
    $form['crm_core_event'] = array(
      '#title' => t('CRM Core Event'),
      '#type' => 'fieldset',
      '#group' => 'additional_settings',
    );

    $node_config = isset($node->nid) ? crm_core_event_load_node_config($node->nid) : FALSE;

    $form['crm_core_event']['display_registrants'] = array(
      '#type' => 'checkbox',
      '#title' => t('Display event registrants'),
      '#default_value' => empty($node_config) ? 0 : $node_config->display_registrants,
      '#description' => t('Check this box to display a list of event registrants when the event is being viewed.'),
    );

    $rule_set_tag = CMCEV_THANKS_EMAIL_TAG;
    $rules_components = _crm_core_event_load_rules_components_by_tag($rule_set_tag);
    $form['crm_core_event']['thanks_email'] = array(
      '#type' => 'select',
      '#title' => t('Event Registration Thanks Email sending rule'),
      '#default_value' => empty($node_config) ? variable_get('crm_core_event_default_confirmation', '') : $node_config->thanks_email,
      '#empty_option' => t('--Please Select--'),
      '#empty_value' => '',
      '#options' => $rules_components,
    );

    $form['crm_core_event']['max_registration'] = array(
      '#type' => 'textfield',
      '#title' => t('Maximum registration'),
      '#default_value' => empty($node_config) ? '' : $node_config->max_registration,
      '#description' => t('Enter the total number of people who can register for this event. Leave this field blank to allow unlimited registration.'),
      '#element_validate' => array('crm_core_event_max_registration_validate'),
    );

    $level_description = 'In case CRM Core Profile form configured to use cart'
      . ' for processing registration payments you can add different ticket'
      . ' levels in the format of "LABEL|AMOUNT". One item per line. In case'
      . ' CRM Core Profile form configured to use single amount field, first'
      . ' item will be used.';
    $form['crm_core_event']['tickets'] = array(
      '#type' => 'textarea',
      '#title' => t('Ticket levels'),
      '#default_value' => empty($node_config) ? '' : $node_config->tickets,
      '#description' => t($level_description),
      '#states' => array(
        'visible' => array(
          ':input[name="registration"]' => array('value' => 'tickets'),
        ),
      ),
    );
  }
}

/**
 * Maximum registration form element validate.
 */
function crm_core_event_max_registration_validate($element, &$form_state) {
  if (!empty($element['#value']) && !is_numeric($element['#value'])) {
    form_error($element, t('Maximum number registration must be a numeric.'));
  }
}

/**
 * Implements hook_node_insert().
 */
function crm_core_event_node_insert($node) {
  if ($node->type == 'cmcev_event') {
    if (isset($node->thanks_email)) {
      $config = new stdClass();
      $config->nid = $node->nid;
      $config->thanks_email = isset($node->thanks_email) ? $node->thanks_email : '';
      $config->tickets = isset($node->tickets) ? $node->tickets : '';
      $config->max_registration = isset($node->max_registration) ? $node->max_registration : '';
      $config->display_registrants = isset($node->display_registrants) ? $node->display_registrants : 0;

      crm_core_event_node_config_save($config);
    }
    elseif (isset($node->crm_core_event_node_config)) {
      $config = $node->crm_core_event_node_config;
      $uuid = $config['nid'];
      $nids = entity_get_id_by_uuid('node', array($uuid));
      if (isset($nids[$uuid])) {
        $config['nid'] = $nids[$uuid];
        crm_core_event_node_config_save($config);
      }
    }
  }
}

/**
 * Saves nodes configuration.
 *
 * @param object $config
 *   Nodes configuration.
 */
function crm_core_event_node_config_save($config) {
  $config = (array) $config;
  db_merge('crm_core_event_nodes')
    ->condition('nid', $config['nid'])
    ->fields($config)
    ->execute();
}

/**
 * Implements hook_node_update().
 */
function crm_core_event_node_update($node) {
  crm_core_event_node_insert($node);
}

/**
 * Implements hook_node_delete().
 */
function crm_core_event_node_delete($node) {
  if ($node->type == 'cmcev_event') {
    db_delete('crm_core_event_nodes')
      ->condition('nid', $node->nid)
      ->execute();
  }
}

/**
 * Implements hook_node_view_alter().
 */
function crm_core_event_node_view_alter(&$build) {
  // If the following things are true:
  // - we are viewing a event page
  // - there is a profile form attached
  // - the profile includes a event registration activity
  // - the profile has a field for event page
  //
  // Then please kindly prepopulate the value of the form field.
  $node =& $build['#node'];
  $profile =& $build['crm_core_profile'];
  if (arg(1) === $node->nid && isset($profile) && $node->type == 'cmcev_event' && isset($profile['field_cmcev_event'])) {
    $profile['field_cmcev_event'][LANGUAGE_NONE][0]['target_id']['#default_value'] = $node->title . ' (' . $node->nid . ')';
    $profile['field_cmcev_event'][LANGUAGE_NONE][0]['target_id']['#value'] = $node->title . ' (' . $node->nid . ')';
    $profile['field_cmcev_event'][LANGUAGE_NONE][0]['value']['#default_value'][0] = $node->nid;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function crm_core_event_form_alter(&$form, &$form_state) {
  if ($node = menu_get_object()) {
    if (isset($form['field_cmcev_event'])) {
      $form['field_cmcev_event'][LANGUAGE_NONE][0]['target_id']['#default_value'] = $node->title . ' (' . $node->nid . ')';
      $form['field_cmcev_event'][LANGUAGE_NONE][0]['target_id']['#value'] = $node->title . ' (' . $node->nid . ')';
      $form['field_cmcev_event'][LANGUAGE_NONE][0]['value']['#default_value'][0] = $node->nid;
    }
  }
}

/**
 * Access callback used in 'Event Registrants' panel.
 *
 * @param array $contexts
 *   Panels contexts.
 *
 * @return bool
 *   Does user has access.
 */
function crm_core_event_access_registrations($contexts) {
  global $user;
  $node = $contexts['argument_entity_id:node_1']->data;
  $event_config = crm_core_event_load_node_config($node->nid);
  // Checking if event configured to display registrants.
  if (!empty($event_config->display_registrants)) {
    return TRUE;
  }
  // Check that user is current node author and
  // have 'View registration list for own events' permission.
  elseif ($node->uid == $user->uid
    && user_access('view registration list for own events', $user)
  ) {
    return TRUE;
  }
  // Check that user have 'View registration list for all events' permission.
  elseif (user_access('view registration list for all events', $user)) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Implements hook_crm_core_report_register().
 */
function crm_core_event_crm_core_report_register() {

  $reports = array(
    'cmcev' => array(
      'title' => t('Events'),
      'reports' => array(),
      'widgets' => array(),
    ),
  );

  // Events overview page.
  $reports['cmcev']['reports']['cmcev_overview'] = array(
    'title' => t('Events Overview'),
    'path' => 'crm-core/reports/cmcev/overview',
    'description' => t('Provides a quick overview of events in the system.'),
  );

  $reports['cmcev']['reports']['attendees'] = array(
    'title' => t('Attendees report'),
    'path' => 'crm-core/reports/cmcev/attendees',
    'description' => t('Provides a quick overview of event attendees in the system.'),
  );

  $reports['cmcev']['reports']['events'] = array(
    'title' => t('Events report'),
    'path' => 'crm-core/reports/cmcev/events',
    'description' => t('Provides a quick overview of events in the system.'),
  );

  $reports['cmcev']['reports']['revenues'] = array(
    'title' => t('Revenues report'),
    'path' => 'crm-core/reports/cmcev/revenues',
    'description' => t('Provides a quick overview of event revenues in the system.'),
  );

  $reports['cmcev']['reports']['sources'] = array(
    'title' => t('Sources report'),
    'path' => 'crm-core/reports/cmcev/sources',
    'description' => t('Provides a quick overview of event registration sources in the system.'),
  );

  return $reports;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function crm_core_event_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/' . $plugin_type;
  }

  return NULL;
}

/**
 * Implements hook_preprocess_page().
 */
function crm_core_event_preprocess_page() {
  if (substr(current_path(), 0, 39) == 'crm-core/reports/cmcev/revenues/summary') {
    $year = substr(arg(5), 0, 4);
    $month = substr(arg(5), 4, 2);
    $months = date_month_names();
    $title = t('Revenues summary for %date', array(
      '%date' => $months[(int) $month] . ' ' . $year,
    ));
    drupal_set_title($title, PASS_THROUGH);
  }

  // Breadcrumb modifications.
  if (arg(0) == 'crm-core' && arg(1) == 'reports' && arg(2) == 'cmcev') {
    $breadcrumb = array(
      l(t('Home'), '<front>'),
      l(t('CRM Core'), 'crm-core'),
      l(t('Reports'), 'crm-core/reports'),
    );
    if (arg(3) != '' && (arg(4) == '' || arg(4) == 'summary')) {
      $breadcrumb[] = l(t('Event Reports'), 'crm-core/reports/cmcev');
    }
    if (arg(3) == 'events' && arg(4) == 'summary') {
      $breadcrumb[] = l(t('Events'), 'crm-core/reports/cmcev/events');
    }
    elseif (arg(3) == 'sources' && arg(4) == 'summary') {
      $breadcrumb[] = l(t('Registration sources'), 'crm-core/reports/cmcev/sources');
    }
    drupal_set_breadcrumb($breadcrumb);
  }
}

/**
 * Implements hook_query_TAG_alter().
 */
function crm_core_event_query_cmcev_date_grouping_alter(SelectQuery $query) {
  // @todo: Remove this ugly alter when #1830436 will be resolved.
  $group =& $query->getGroupBy();
  unset($group['field_data_field_cmcev_date_field_cmcev_date_value']);
  $query->groupBy("DATE_FORMAT(ADDTIME( field_data_field_cmcev_date.field_cmcev_date_value, SEC_TO_TIME(-18000)), '%Y-%m')");
}

/**
 * Loads rules components with specified tag name.
 *
 * @param string $rule_set_tag
 *   Tag name.
 *
 * @return array
 *   Array of rules components keyed by machine name.
 */
function _crm_core_event_load_rules_components_by_tag($rule_set_tag) {

  $rules_config_ids = db_select('rules_tags', 'rt')
    ->fields('rt', array('id'))
    ->condition('tag', $rule_set_tag)
    ->execute()
    ->fetchCol();

  return empty($rules_config_ids) ? array() : rules_get_components(TRUE, NULL, array('id' => $rules_config_ids));
}

/**
 * Implements hook_field_formatter_info().
 *
 * Adding formatter to display amount field with default currency.
 */
function crm_core_event_field_formatter_info() {
  return array(
    'crm_core_event_amount' => array(
      'label' => t('CRM Core Event amount'),
      'field types' => array('number_decimal', 'number_float', 'number_integer'),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function crm_core_event_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];

  $summary = array();
  if ($display['type'] == 'crm_core_event_amount') {
    $summary[] = t('Display integer, float and decimal values formatted with default currency.');
    $summary[] = commerce_currency_format(999.99, commerce_default_currency(), NULL, FALSE);
  }

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 */
function crm_core_event_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'crm_core_event_amount':
      foreach ($items as $delta => $item) {
        $output = commerce_currency_format($item['value'], commerce_default_currency(), NULL, FALSE);
        $element[$delta] = array('#markup' => $output);
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_views_preprocess_views_view().
 *
 * Format math expression field in some views based reports.
 */
function crm_core_event_preprocess_views_view_field(&$vars) {
  $format = FALSE;
  $view =& $vars['view'];
  $field =& $vars['field'];
  $output =& $vars['output'];

  // "Average registration amount " field in "Event summary" report.
  if ($view->name == 'cmcev_event_summary_metrics' && $field->field == 'expression') {
    $format = TRUE;
  }

  // "Average amount" field in "Revenue summary" report.
  if ($view->name == 'cmcev_revenues_summary_report_metrics'
    && $field->field == 'expression'
    && $field->position == 3) {
    $format = TRUE;
  }

  if ($format) {
    $output = commerce_currency_format($output, commerce_default_currency(), NULL, FALSE);
  }
}

/**
 * Implements hook_uuid_node_features_export_render_alter().
 *
 * Adding node configuration to export.
 */
function crm_core_event_uuid_node_features_export_render_alter(&$export, $node, $module) {
  if ($export->type == 'cmcev_event') {
    $nids = entity_get_id_by_uuid('node', array($node->uuid));
    $config = crm_core_event_load_node_config($nids[$node->uuid]);
    if ($config !== FALSE) {
      $config->nid = $node->uuid;
      $export->crm_core_event_node_config = $config;
    }
  }
}

/**
 * Implements hook_entity_uuid_load().
 */
function crm_core_event_entity_uuid_load(&$entities, $entity_type) {
  if ($entity_type == 'node') {
    foreach ($entities as $nid => $node) {
      $config = crm_core_event_load_node_config($nid);
      if ($config !== FALSE) {
        $config->nid = $node->uuid;
        $entities[$nid]->crm_core_event_node_config = $config;
      }
    }
  }
}

/**
 * Implements hook_entity_uuid_save().
 */
function crm_core_event_entity_uuid_save(&$entity, $entity_type) {
  if ($entity_type == 'node') {
    if (isset($entity->crm_core_event_node_config)) {
      $config = (array) $entity->crm_core_event_node_config;
      $uuid = $config['nid'];
      $nids = entity_get_id_by_uuid('node', array($uuid));
      $config['nid'] = $nids[$uuid];
      crm_core_event_node_config_save($config);
    }
  }
}
