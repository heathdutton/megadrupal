<?php
/**
 * @file
 * OAuth2 API Token module.
 */

/**
 * Implements hook_oauth2_server_token_bundles_alter().
 */
function oauth2_api_token_oauth2_server_token_bundles_alter(&$bundles) {
  $bundles['api_token'] = array(
    'label' => t('API token'),
  );
}

/**
 * Implements hook_flush_caches().
 */
function oauth2_api_token_flush_caches() {
  $dir = drupal_get_path('module', 'oauth2_api_token');
  require_once $dir . '/includes/oauth2_api_token.default_fields.inc';
  oauth2_api_token_install_fields();
}

/**
 * Implements hook_menu().
 */
function oauth2_api_token_menu() {
  $items = array();
  $items['admin/config/people/api-tokens'] = array(
    'title' => 'API Tokens',
    'access arguments' => array('oauth2_api_token administer'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('oauth2_api_token_config_form'),
    'file' => 'includes/oauth2_api_token.admin.inc',
  );
  $items['user/%user/api-tokens'] = array(
    'title' => 'API Tokens',
    'access callback' => 'oauth2_api_token_list_access',
    'access arguments' => array(1),
    'page callback' => 'oauth2_api_token_user_list_page',
    'page arguments' => array(1),
    'file' => 'includes/oauth2_api_token.pages.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['user/%user/api-tokens/create'] = array(
    'title' => 'Create API Token',
    'access callback' => 'oauth2_api_token_access',
    'access arguments' => array('create'),
    'page callback' => 'oauth2_api_token_create_page',
    'file' => 'includes/oauth2_api_token.pages.inc',
    'type' => MENU_LOCAL_ACTION,
  );
  $items['user/%user/api-tokens/%oauth2_api_token'] = array(
    'title callback' => 'oauth2_api_token_title',
    'title arguments' => array(3),
    'access callback' => 'oauth2_api_token_access',
    'access arguments' => array('view', 3),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('oauth2_api_token_view_value_form', 3, 1),
    'file' => 'includes/oauth2_api_token.forms.inc',
  );
  $items['user/%user/api-tokens/%oauth2_api_token/edit'] = array(
    'title' => 'Edit API Token',
    'access callback' => 'oauth2_api_token_access',
    'access arguments' => array('update', 3),
    'page callback' => 'oauth2_api_token_edit_page',
    'page arguments' => array(3),
    'file' => 'includes/oauth2_api_token.pages.inc',
    'weight' => 1,
  );
  $items['user/%user/api-tokens/%oauth2_api_token/delete'] = array(
    'title' => 'Delete API Token',
    'access callback' => 'oauth2_api_token_access',
    'access arguments' => array('delete', 3),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('oauth2_api_token_delete_form', 3),
    'file' => 'includes/oauth2_api_token.forms.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Load a single token by its ID.
 *
 * @param int $token_id
 *   The numerical ID of the token.
 *
 * @return bool|OAuth2ServerToken
 *   The token entity or FALSE if not found.
 */
function oauth2_api_token_load($token_id) {
  $tokens = entity_load('oauth2_server_token', array($token_id));

  return $tokens ? reset($tokens) : FALSE;
}

/**
 * Title callback when viewing a token.
 *
 * @param OAuth2ServerToken $token
 *   The token entity.
 *
 * @return string
 *   A page title.
 */
function oauth2_api_token_title(OAuth2ServerToken $token) {
  return t('API token: @application', array(
    '@application' => $token->wrapper()->api_token_app->value(),
  ));
}

/**
 * Whether the user can access a list of API tokens.
 *
 * @param object $for
 *   The account whose tokens will be listed.
 * @param object $account
 *   The account to check access for.
 *
 * @return bool
 *   TRUE if access is granted, FALSE otherwise.
 */
function oauth2_api_token_list_access($for, $account = NULL) {
  $account = $account ?: $GLOBALS['user'];

  if (user_access('oauth2_api_token administer', $account)) {
    return TRUE;
  }

  if ($account->uid == $for->uid && user_access('oauth2_api_token manage own', $account)) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Access callback for API tokens.
 *
 * @param string $op
 *   The operation ('create', 'view', 'delete', 'update').
 * @param OAuth2ServerToken $token
 *   The token (optional).
 * @param object $account
 *   The user account to check access for (optional, defaults to the current
 *   user).
 *
 * @return bool
 *   Whether access is granted.
 */
function oauth2_api_token_access($op, OAuth2ServerToken $token = NULL, $account = NULL) {
  if ($token && $token->type != 'api_token') {
    return FALSE;
  }

  $account = $account ?: $GLOBALS['user'];

  if (user_access('oauth2_api_token administer', $account)) {
    return TRUE;
  }

  switch ($op) {
    case 'create':
      if (user_access('oauth2_api_token manage own', $account)) {
        return TRUE;
      }
      break;

    case 'view':
    case 'delete':
    case 'update':
      $is_own = isset($token) && $token->uid == $account->uid;
      if (user_access('oauth2_api_token manage own', $account) && $is_own) {
        return TRUE;
      }
      break;

  }

  return FALSE;
}

/**
 * Implements hook_permission().
 */
function oauth2_api_token_permission() {
  $permissions = array();
  $permissions['oauth2_api_token administer'] = array(
    'title' => t('Administer API tokens'),
    'restrict access' => TRUE,
  );
  $permissions['oauth2_api_token manage own'] = array(
    'title' => t('Manage own API tokens'),
  );

  return $permissions;
}

/**
 * Get the user account for a token.
 *
 * @param OAuth2ServerToken $token
 *   The token entity.
 *
 * @throws \Exception
 *   If no account is found.
 *
 * @return object
 *   The user account that owns the token.
 */
function oauth2_api_token_get_account(OAuth2ServerToken $token) {
  $account = user_load($token->uid);
  if (!$account) {
    throw new \Exception('Account not found');
  }

  return $account;
}

/**
 * Implements hook_views_api().
 */
function oauth2_api_token_views_api() {
  return array('api' => 3);
}

/**
 * Create the dummy API token client.
 *
 * @param string $server_name
 *   The machine name of the OAuth2 server.
 */
function oauth2_api_token_create_client($server_name) {
  $client_key = 'api_token_' . $server_name;
  $values = array(
    'server' => $server_name,
    'label' => t('API Token client'),
    'client_key' => $client_key,
    'client_secret' => oauth2_server_hash_client_secret(user_password()),
    'redirect_uri' => 'http://localhost',
    'automatic_authorization' => 0,
    'settings' => array(
      'override_grant_types' => 1,
      'allow_implicit' => 0,
      'grant_types' => array(),
      'always_issue_new_refresh_token' => 0,
    ),
  );

  if (!$client = oauth2_server_client_load($client_key)) {
    $client = entity_create('oauth2_server_client', $values);
    $client->save();
    drupal_set_message(t('Created API token client: @key', array('@key' => $client_key)));
  }
  else {
    foreach ($values as $key => $value) {
      $client->$key = $value;
    }
    $client->save();
  }
}
