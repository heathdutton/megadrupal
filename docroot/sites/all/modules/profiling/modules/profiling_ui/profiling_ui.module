<?php

/**
 * @file
 * Profiling user interface.
 */

// Value types.
define('PROFILING_TYPE_STRING',   0);
define('PROFILING_TYPE_DURATION', 1);
define('PROFILING_TYPE_PERCENT',  2);
define('PROFILING_TYPE_MEMORY',   3);
define('PROFILING_TYPE_QUERY',    4);
define('PROFILING_TYPE_COUNT',    5);

// Known units.
define('PROFILING_UNIT_UNIT',      0);
define('PROFILING_UNIT_MBYTES',  100);
define('PROFILING_UNIT_BYTES',   101);
define('PROFILING_UNIT_PERCENT', 200);
define('PROFILING_UNIT_INDICE',  201);
define('PROFILING_UNIT_SEC',     300);
define('PROFILING_UNIT_MILISEC', 301);

define('PROFILING_UI_PATH_SEP', '@');

/**
 * Implementation of hook_menu().
 */
function profiling_ui_menu() {
  $items = array();

  // Settings.
  $items['admin/profiling'] = array(
    'title' => 'Profiling',
    'description' => "Profile time and memory consumption at various code places.",
    'position' => 'left',
    'weight' => 20,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/profiling/settings'] = array(
    'title' => "Settings",
    'description' => "Profiling core settings, such as excluded pathes and other misc. options.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('profiling_ui_core_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'profiling_ui.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/profiling/settings/common'] = array(
  	'title' => "Common",
  	'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/profiling/settings/hooks'] = array(
    'title' => "Hooks",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('profiling_ui_core_settings_hooks'),
    'access arguments' => array('administer site configuration'),
    'file' => 'profiling_ui.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  // Timers statistics.
  $items['admin/profiling/timers'] = array(
    'title' => "Overview timers",
    'description' => "Overview precise statistics on profiling timers collection.",
    'page callback' => 'profiling_ui_page_timer_overview',
    'access arguments' => array('access site reports'),
    'file' => 'profiling_ui.pages.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/profiling/timers/%profiling_timer'] = array(
    'title' => "Timer details",
    'page callback' => 'profiling_ui_page_timer_details',
    'page arguments' => array(3),
    'access arguments' => array('access site reports'),
    'file' => 'profiling_ui.pages.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/profiling/timers/single/%profiling_timer_single'] = array(
    'title' => "Single timer execution details",
    'page callback' => 'profiling_ui_page_timer_details_single',
    'page arguments' => array(4),
    'access arguments' => array('access site reports'),
    'file' => 'profiling_ui.pages.inc',
    'type' => MENU_CALLBACK,
  );

  // Page statistics.
  $items['admin/profiling/path'] = array(
    'title' => "Overview pages",
    'description' => "Overview per page statistics.",
    'page callback' => 'profiling_ui_page_path_overview',
    'access arguments' => array('access site reports'),
    'file' => 'profiling_ui.pages.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/profiling/path/%profiling_path'] = array(
    'title' => "Path details",
    'page callback' => 'profiling_ui_page_path_details',
    'page arguments' => array(3),
    'access arguments' => array('access site reports'),
    'file' => 'profiling_ui.pages.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/profiling/requests'] = array(
    'title' => "Recent requests",
    'description' => "See recent pages charts about time and memory consumption.",
    'page callback' => 'profiling_ui_page_request_overview',
    'access arguments' => array('access site reports'),
  	'file' => 'profiling_ui.pages.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/profiling/requests/%profiling_request'] = array(
    'title' => "Request details",
    'title arguments' => array(3),
    'page callback' => 'profiling_ui_page_request_details',
    'page arguments' => array(3),
    'access arguments' => array('access site reports'),
    'file' => 'profiling_ui.pages.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_help().
 */
function profiling_ui_help($path, $arg) {
  switch ($path) {
    case 'admin/profiling/settings/hooks':
      return '<p>' . t("Profiling module is able to profile hooks execution time. Specific hook implementations are being created dynamically at runtime in order to achieve this. Some of these hooks should never be watched using this generic method, such as <em>hook_theme()</em> or <em>hook_menu()</em> because they need to return specific values and our dynamic implementation is too generic to handle those return values.") . '</p>';
  }
}

/**
 * Menu helper.
 */
function profiling_timer_load($name) {
  return db_select('profiling_timers', 't')
    ->fields('t', array('name'))
    ->condition('t.name', $name)
    ->range(0, 1)
    ->execute()
    ->fetchField();
}

/**
 * Menu helper.
 */
function profiling_path_load($path) {
  return db_select('profiling_request', 'r')
    ->fields('r', array('path'))
    ->condition('r.path', str_replace(PROFILING_UI_PATH_SEP, '/', $path))
    ->range(0, 1)
    ->execute()
    ->fetchField();
}

/**
 * Menu helper.
 */
function profiling_timer_single_load($identifier) {
  list($identifier, $name, $delta) = explode(PROFILING_UI_PATH_SEP, $identifier);
  return db_select('profiling_timers', 't')
    ->fields('t')
    ->condition('t.name', $name)
    ->condition('t.delta', $delta)
    ->condition('t.identifier', $identifier)
    ->execute()
    ->fetchObject();
}

/**
 * Menu helper.
 */
function profiling_request_load($identifier) {
  return db_select('profiling_request', 'r')
    ->fields('r', array('identifier'))
    ->condition('r.identifier', $identifier)
    ->range(0, 1)
    ->execute()
    ->fetchField();
}

/**
 * Implementation of hook_theme().
 */
function profiling_ui_theme() {
  $items = array();

  $path = drupal_get_path('module', 'profiling_ui') . '/theme';
  $file = 'theme.inc';

  // Page layouts.
  $items['profiling_report'] = array(
    'render element' => 'element',
    'template' => 'profiling-report',
    'path' => $path,
    'file' => $file,
  );
  $items['profiling_report_item'] = array(
    'render element' => 'element',
    'template' => 'profiling-report-item',
    'path' => $path,
    'file' => $file,
  );
  // Pure-CSS timeline chart.
  $items['profiling_timeline'] = array(
    'render element' => 'element',
    'path' => $path,
    'file' => $file,
    'template' => 'profiling-timeline',
  );

  $items['profiling_ui_core_settings_hooks_table'] = array(
    'render element' => 'form',
    'file' => 'profiling_ui.admin.inc',
  );

  return $items;
}

/**
 * Get all known timer info.
 */
function profiling_timer_info() {
  static $info;

  if (!is_array($info)) {
    if (!$info = module_invoke_all('profiling_timer_help')) {
      $info = array();
    }
  }
  
  return $info;
}

/**
 * Get all known collection info.
 */
function profiling_collection_info() {
  static $info;

  if (!is_array($info)) {
    if (!$info = module_invoke_all('profiling_collection_help')) {
      $info = array();
    }
  }
  
  return $info;
}

/**
 * Display timer help.
 * 
 * @param string $name
 *   Timer name.
 * 
 * @return string
 *   Human readable name. If not found, it will return the raw given
 *   parameter.
 */
function profiling_timer_name($name) {
  $info = profiling_timer_info();

  if (isset($info[$name])) {
    return $info[$name]['title'];
  }

  return $name;
}

/**
 * Display timer help.
 * 
 * @param string $name
 *   Timer name.
 * 
 * @return string
 *   Human readable description.
 */
function profiling_timer_help($name) {
  $info = profiling_timer_info();

  if (isset($info[$name])) {
    return $info[$name]['description'];
  }

  return '';
}

/**
 * Display timer collection name.
 * 
 * @param string $collection
 *   Collection name.
 * 
 * @return string
 *   Human readable name. If not found, it will return the raw given
 *   parameter.
 */
function profiling_collection_name($collection) {
  $info = profiling_collection_info();

  if (isset($info[$collection])) {
    return $info[$collection]['title'];
  }

  return $collection;
}

/**
 * Display timer collection help.
 * 
 * @param string $collection
 *   Collection name.
 * 
 * @return string
 *   Human readable description.
 */
function profiling_collection_help($collection) {
  $info = profiling_collection_info();

  if (isset($info[$collection])) {
    return $info[$collection]['description'];
  }

  return '';
}

/**
 * Convert given value from base raw value to user configured unit.
 */
function profiling_ui_unit_base_to_user($type, $value) {
  $from = profiling_ui_unit_database($type);
  $to = profiling_ui_unit_default($type);
  $round = profiling_ui_unit_round($to);
  return profiling_ui_unit_convert($from, $to, $value, $round);
}

/**
 * Unit conversion.
 */
function profiling_ui_unit_convert($from, $to, $value, $round = FALSE) {
  static $matrix;

  if (!isset($matrix)) {
    $matrix = array();
    $matrix[PROFILING_UNIT_BYTES][PROFILING_UNIT_MBYTES] = 0.000000954;
    $matrix[PROFILING_UNIT_MBYTES][PROFILING_UNIT_BYTES] = 1048576; // 1024*1024
    $matrix[PROFILING_UNIT_SEC][PROFILING_UNIT_MILISEC] = 1000;
    $matrix[PROFILING_UNIT_MILISEC][PROFILING_UNIT_SEC] = 0.001;
    $matrix[PROFILING_UNIT_INDICE][PROFILING_UNIT_PERCENT] = 100;
    $matrix[PROFILING_UNIT_PERCENT][PROFILING_UNIT_INDICE] = 0.01;
  }

  if ($from == $to) {
    // No conversion to do.
    return $value;
  }
  else if (isset($matrix[$from][$to])) {
    // Apply the factor given by the matrix.
    $value = $value * $matrix[$from][$to];

    // The user may asked for rounded values.
    if ($round === TRUE) {
      return round($value);
    }
    else if (is_numeric($round)) {
      return round($value, (int)$round);
    }
    else {
      return $value;
    }
  }
  else {
    // Non existing conversion factor.
    return t("Conversion error");
  }
}

/**
 * Default unit for type, the one that comes from the database.
 */
function profiling_ui_unit_database($type) {
  static $matrix = array(
    PROFILING_TYPE_DURATION => PROFILING_UNIT_MILISEC,
    PROFILING_TYPE_PERCENT  => PROFILING_UNIT_INDICE,
    PROFILING_TYPE_MEMORY   => PROFILING_UNIT_BYTES,
    PROFILING_TYPE_QUERY    => PROFILING_UNIT_UNIT,
    PROFILING_TYPE_COUNT    => PROFILING_UNIT_UNIT,
  );
  return isset($matrix[$type]) ? $matrix[$type] : PROFILING_UNIT_UNIT;
}

/**
 * Default unit for type, the one that comes from the database.
 */
function profiling_ui_unit_default($type) {
  static $matrix = array(
    PROFILING_TYPE_DURATION => PROFILING_UNIT_MILISEC,
    PROFILING_TYPE_PERCENT  => PROFILING_UNIT_PERCENT,
    PROFILING_TYPE_MEMORY   => PROFILING_UNIT_MBYTES,
    PROFILING_TYPE_QUERY    => PROFILING_UNIT_UNIT,
    PROFILING_TYPE_COUNT    => PROFILING_UNIT_UNIT,
  );
  // FIXME: Get user configured unit.
  // Else use default.
  return isset($matrix[$type]) ? $matrix[$type] : PROFILING_UNIT_UNIT;
}

/**
 * Default unit for type, the one that comes from the database.
 */
function profiling_ui_unit_suffix($unit) {
  switch ($unit) {
    case PROFILING_UNIT_MBYTES:
      return 'M';
	case PROFILING_UNIT_BYTES:
      return 'b';
	case PROFILING_UNIT_PERCENT:
      return '%';
	case PROFILING_UNIT_SEC:
      return 's';
	case PROFILING_UNIT_MILISEC:
      return 'ms';
	case PROFILING_UNIT_INDICE:
    case PROFILING_UNIT_UNIT:
	default:
	  return NULL;
  }
}

/**
 * Default round for type, the one that comes from the database.
 */
function profiling_ui_unit_round($unit) {
  switch ($unit) {
	case PROFILING_UNIT_SEC:
    case PROFILING_UNIT_MBYTES:
	case PROFILING_UNIT_INDICE:
      return 2;
	case PROFILING_UNIT_PERCENT:
	case PROFILING_UNIT_MILISEC:
	case PROFILING_UNIT_BYTES:
      return TRUE;
    case PROFILING_UNIT_UNIT:
	default:
	  return FALSE;
  }
}

/**
 * Definition of existing threshold.
 */
function profiling_ui_threshold_types() {
  return array(
    PROFILING_TYPE_PERCENT => t("Percent"),
    PROFILING_TYPE_DURATION => t("Time consumption"),
    PROFILING_TYPE_MEMORY => t("Memory usage"),
    PROFILING_TYPE_QUERY => t("Query count"),
  );
}

/**
 * Set thresold settings.
 */
function profiling_ui_threshold_set($settings, $defaults = FALSE) {
  $variable = $defaults ? 'profiling_ui_threshold' : 'profiling_ui_threshold_' . $_GET['q'];
  if (is_array($settings)) {
    variable_set($variable, $settings);
  }
  else {
    variable_del($variable);
  }
  profiling_ui_threshold_get(NULL, NULL, FALSE, TRUE);
}

/**
 * Get the current threshold for given unit.
 * 
 * @param string $type
 *   Data type.
 * @param string $unit
 *   Unit.
 * @param boolean $defaults = FALSE
 *   (optional) If set, fetch the default value instead of the current path
 *   configured one.
 * 
 * @return mixed
 *   Threshold value, or NULL if not found.
 */
function profiling_ui_threshold_get($type, $unit = NULL, $defaults = FALSE, $reset = FALSE) {
  static $settings, $defaults = array(
    PROFILING_TYPE_PERCENT => 0.5,
    PROFILING_TYPE_DURATION => 500,
    PROFILING_TYPE_MEMORY => 1048576,
    PROFILING_TYPE_QUERY => 20,
  );

  if ($reset) {
    unset($settings);
  }

  // Attempt to find matching settings.
  if (!isset($settings)) {
    if (!$settings = variable_get('profiling_ui_threshold_' . $_GET['q'], NULL)) {
      $settings = variable_get('profiling_ui_threshold', array());
    }
  }

  $threshold = isset($settings[$type]) ? $settings[$type] : (isset($defaults[$type]) ? $defaults[$type] : NULL);

  if ($threshold) {
    if ($unit) {
      $default = profiling_ui_unit_database($type);
      if ($unit != $default) {
        return profiling_ui_unit_convert($default, $unit, $threshold);
      }
      else {
        return $threshold;
      }
    }
    else {
      return $threshold;
    }
  }

  // Not found.
  return NULL;
}

/**
 * Theme a formatted value, using its unit (or not).
 * 
 * @param mixed $value
 *   Any value castable as int.
 * @param string $type
 *   Data type.
 * @param string $unit
 *   Unit.
 * @param string $suffix = TRUE
 *   (optional) If explicitely set to FALSE, won't suffix the value with the
 *   unit.
 * @param boolean $use_thresold = TRUE
 *   (optional) Use a thresold value above which the value will be highlighted.
 * @param mixed $threshold = NULL
 *   (optional) Threshold value used to compare with the value. This variable
 *   type must be compatible in order to use the PHP comparison operators with
 *   the value type.
 *   This variable is ignored if $threshold is set to FALSE.
 *   If $threshold is set to TRUE and this value is NULL, it will attempt to
 *   find a default configured threshold for the given $suffix given.
 * 
 * @return string
 *   (x)html output.
 */
function profiling_value_render($value, $type, $unit, $suffix = TRUE, $use_threshold = TRUE, $threshold = NULL) {
  // Deal with suffix (which could be empty).
  if ($suffix && ($suffix = profiling_ui_unit_suffix($unit))) {
    $output = $value . '&nbsp;' . $suffix;
  }
  else {
    $output = (string)$value;
  }

  // Deal with threshold.
  if ($use_threshold) {
    if (!$threshold) {
      // Get default for given unit, if no custom value is given.
      $threshold = profiling_ui_threshold_get($type, $unit);
    }
    // If we already had a threshold value, or found one.
    if ($threshold && $value >= $threshold) {
      $output = '<strong>' . $output . '</strong>';
    }
  }

  return $output;
}

/**
 * Format user name.
 * 
 * @param string $value
 *   Timer name to format.
 * 
 * @return string
 *   Human readable string.
 */
function profiling_ui_format_user($value) {
  return theme('username', array('account' => user_load($value)));
}

/**
 * Format timer name.
 * 
 * @param string $value
 *   Timer name to format.
 * 
 * @return string
 *   Human readable string.
 */
function profiling_ui_format_identifier($value) {
  return l(t("Single request details"), 'admin/profiling/requests/' . $value);
}

/**
 * Format timer name.
 * 
 * @param string $value
 *   Timer name to format.
 * 
 * @return string
 *   Human readable string.
 */
function profiling_ui_format_name($value) {
  return l(profiling_timer_name($value), 'admin/profiling/timers/' . $value);
}

/**
 * Format single timer link.
 * 
 * @param object $value
 *   Timer with name, delta and identifier set.
 * 
 * @return string
 *   Human readable string.
 */
function profiling_ui_timer_single_path($value) {
  return 'admin/profiling/timers/single/' . $value->identifier . PROFILING_UI_PATH_SEP . $value->name . PROFILING_UI_PATH_SEP . $value->delta;
}

/**
 * Format timer path.
 * 
 * @param string $value
 *   Timer name to format.
 * 
 * @return string
 *   Human readable string.
 */
function profiling_ui_format_path($value) {
  return l($value, 'admin/profiling/path/' . str_replace('/', PROFILING_UI_PATH_SEP, $value));
}


/**
 * Format timer collection name.
 * 
 * @param string $value
 *   Timer name to format.
 * 
 * @return string
 *   Human readable string.
 */
function profiling_ui_format_collection($value) {
  return profiling_collection_name($value);
}


/**
 * Format duration.
 * 
 * @param int|float $value
 *   Float value in seconds.
 * @param string $unit = PROFILING_UNIT_MILISEC
 * @param boolean $suffix = TRUE
 *   (optional) If set to false, this will return a numeric value instead of
 *   of a human readable string.
 * 
 * @return string
 *   Human readable string.
 */
function profiling_ui_format_duration($value, $unit = PROFILING_UNIT_MILISEC, $suffix = TRUE) {
  $value = profiling_ui_unit_convert(PROFILING_UNIT_SEC, $unit, $value, profiling_ui_unit_round($unit));
  return profiling_value_render($value, PROFILING_TYPE_DURATION, $unit, $suffix);
}

/**
 * Format memory consumption.
 * 
 * @param int $value
 *   Value in bytes.
 * @param string $unit = PROFILING_UNIT_MBYTES
 * @param boolean $suffix = TRUE
 *   (optional) If set to false, this will return a numeric value instead of
 *   of a human readable string.
 *
 * @return string
 *   Human readable string.
 */
function profiling_ui_format_memory($value, $unit = PROFILING_UNIT_MBYTES, $suffix = TRUE) {
  $value = profiling_ui_unit_convert(PROFILING_UNIT_BYTES, $unit, $value, profiling_ui_unit_round($unit));
  return profiling_value_render($value, PROFILING_TYPE_MEMORY, $unit, $suffix);
}

/**
 * Format query count.
 * 
 * @param int $value
 *   Value in count.
 * @param boolean $suffix = FALSE
 *
 * @return string
 *   Human readable string.
 */
function profiling_ui_format_query_count($value, $suffix = FALSE) {
  return profiling_value_render(round($value), PROFILING_TYPE_QUERY, $suffix);
}

/**
 * Format percentage.
 * 
 * @param float $value
 *   Indice value, between 0 and 1.
 * @param string $unit = PROFILING_UNIT_PERCENT
 * @param boolean $suffix = TRUE
 *   (optional) If set to false, this will return a numeric value instead of
 *   of a human readable string.
 *
 * @return string
 *   Human readable string.
 */
function profiling_ui_format_percent($value, $unit = PROFILING_UNIT_PERCENT, $suffix = TRUE) {
  $value = profiling_ui_unit_convert(PROFILING_UNIT_INDICE, $unit, $value, profiling_ui_unit_round($unit));
  return profiling_value_render($value, PROFILING_TYPE_PERCENT, $unit, $suffix);
}
