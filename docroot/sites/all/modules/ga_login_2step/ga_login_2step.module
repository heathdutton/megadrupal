<?php

/**
 * @file
 * Google Authenicator 2 step Module.
 */

/**
 * Implements hook_help().
 */
function ga_login_2step_help($path, $arg) {
  switch ($path) {
    case 'admin/help#ga_login_2step':
      $path = dirname(__FILE__) . '/README.txt';
      if (file_exists($path)) {
        $readme = file_get_contents($path);
      }
      if (!isset($readme)) {
        return NULL;
      }
      if (module_exists('markdown')) {
        $filters = module_invoke('markdown', 'filter_info');
        $info = $filters['filter_markdown'];
        if (function_exists($info['process callback'])) {
          $output = $info['process callback']($readme, NULL);
        }
        else {
          $output = '<pre>' . $readme . '</pre>';
        }
      }
      else {
        $output = '<pre>' . $readme . '</pre>';
      }
      return $output;
  }
}
/**
 * Implements hook_menu().
 */
function ga_login_2step_menu() {
  $items['ga-login-2step/%user/%'] = array(
    'title' => 'GA Login Two-Step Authentication',
    'page callback' => 'ga_login_2step_begin_form',
    'page arguments' => array(1),
    'access callback' => 'ga_login_2step_entry_access',
    'access arguments' => array(1, 2),
    'type' => MENU_CALLBACK,
    'file' => 'ga_login_2step.form.inc',
  );

  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ga_login_2step_form_ga_login_admin_settings_form_alter(&$form, &$form_state, $form_id) {
  $form['ga_login_2step_form'] = array(
    '#type' => 'checkbox',
    '#title' => t('Two Step login form'),
    '#description' => t('Show Code input in a second step of the form submission.'),
    '#default_value' => variable_get('ga_login_2step_form', 0),
  );
}

/**
 * Implements hook_form_alter().
 */
function ga_login_2step_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'user_login':
    case 'user_login_block':
      if (variable_get('ga_login_2step_form', 0)) {
        // Unset the ga login code text box.
        unset($form['gacode']);
        // Unset the ga login validation handler.
        $ga_login_validate = array_search('ga_login_user_login_validate', $form['#validate']);
        unset($form['#validate'][$ga_login_validate]);
        // Unset the ga login submit handler.
        $ga_login_submit = array_search('ga_login_user_login_submit_code_needed', $form['#submit']);
        unset($form['#submit'][$ga_login_submit]);
        // Replace Drupal's login submit handler with GA login to check if
        // authentication should be interrupted and user redirected to 2 step
        // form.Replacing user_login_submit() in its position allows other
        // form_alter handlers to run after.However, the user must be redirected
        // to the GA Login form so the last handler in the order must be
        // ga_login_2step_login_form_redirect(). Other modules may alter the
        // GA login form redirect options element as needed to set the
        // destination after GA login.
        $user_login_submit = array_search('user_login_submit', $form['#submit']);
        $form['#submit'][$user_login_submit] = 'ga_login_2step_login_submit';
        $form['#submit'][] = 'ga_login_2step_login_form_redirect';
      }
      break;
  }
}

/**
 * Login submit handler for GA Login form redirection.
 *
 * Should be last invoked form submit handler for forms user_login and
 * user_login_block so that when the GA Login process is applied the user will
 * be sent to the GA Login form.
 */
function ga_login_2step_login_form_redirect($form, &$form_state) {
  if (isset($form_state['ga_login_2step_redirect'])) {
    $form_state['redirect'] = $form_state['ga_login_2step_redirect'];
  }
}

/**
 * Check permissions if login should be interrupted for journalist account.
 *
 * @param object $account
 *   User account.
 *
 * @return bool
 *   Returns the status whether 2step is applicable for this account or not.
 */
function ga_login_2step_login_allowed($account) {
  $allowed = FALSE;
  if (user_access('login without code', $account)) {
    $allowed = TRUE;
  }
  if (variable_get('ga_login_always_for_uid1', 0) && $account->uid == 1) {
    $allowed = FALSE;
  }
  return $allowed;
}

/**
 * Login submit handler to determine if GA Login process is applicable.
 */
function ga_login_2step_login_submit($form, &$form_state) {
  $account = isset($form_state['uid']) ? user_load($form_state['uid']) : user_load_by_name($form_state['values']['name']);
  // Return early if user has bypassed from the GA login.
  if (ga_login_2step_login_allowed($account)) {
    // Authentication can continue so invoke user_login_submit().
    user_login_submit($form, $form_state);
    return;
  }
  $query = drupal_get_query_parameters();
  unset($_GET['destination']);
  $login_hash = ga_login_2step_login_hash($account);
  $form_state['ga_login_2step_redirect'] = array(
    'ga-login-2step/' . $account->uid . '/' . $login_hash,
    array('query' => $query),
  );
}

/**
 * Validate access to GA login code entry form.
 */
function ga_login_2step_entry_access($account, $url_hash) {
  $access = FALSE;
  // Generate a hash for this account.
  $hash = ga_login_2step_login_hash($account);
  $access = $hash === $url_hash;
  return $access;
}

/**
 * Generate account hash to access the GA Login form.
 *
 * @param object $account
 *   User account.
 *
 * @return string
 *   Random hash.
 */
function ga_login_2step_login_hash($account) {
  // Using account login will mean this hash will become invalid once user has
  // authenticated via TFA.
  $data = implode(':', array($account->name, $account->pass, $account->login));
  return drupal_hash_base64($data);
}
