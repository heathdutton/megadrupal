<?php

/**
 * Implements hook_theme().
 */
function entitylist_theme() {
  return array(
    'entitylist_admin_link' => array(
      'variables' => array('conf' => array(), 'path' => ''),
      'file' => 'plugins/content_types/admin_link.inc'
    ),
  );
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function entitylist_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements of hook_ctools_plugin_type().
 *
 * @todo
 *   Find out if we really need 'use hooks'.
 */
function entitylist_ctools_plugin_type() {
  return array(
    'handlers' => array(
      'cache' => TRUE,
      'use hooks' => TRUE,
      'classes' => array('handler'),
    ),
  );
}

/**
 * Implements hook_entitylist_handlers().
 */
function entitylist_entitylist_handlers() {
  $path = drupal_get_path('module', 'entitylist') . '/handlers';
  $handlers = array();

  $handlers['EntityListHandlerEFQ'] = array(
    'name' => 'Entity Field Query',
    'description' => 'A Field API-optimized query builder. Suitable when high performance is key.',
    'handler' => array(
      'class' => 'EntityListHandlerEFQ',
      'file' => 'EntityListHandlerEFQ.inc',
      'path' => $path,
    ),
  );
  $handlers['EntityListHandlerSQL'] = array(
    'name' => 'SQL Query',
    'description' => 'A SQL query. Suitable when high performance or complexity is key.',
    'handler' => array(
      'class' => 'EntityListHandlerSQL',
      'file' => 'EntityListHandlerSQL.inc',
      'path' => $path,
    ),
  );
  if (module_exists('views')) {
    $handlers['EntityListHandlerViews'] = array(
      'name' => 'Views',
      'description' => t('Use the power and flexibility of Views as the query builder.'),
      'handler' => array(
        'class' => 'EntityListHandlerViews',
        'file' => 'EntityListHandlerViews.inc',
        'path' => $path,
      ),
    );
    if (module_exists('draggableviews')) {
      $handlers['EntityListHandlerDraggableViews'] = array(
        'name' => 'Draggableviews',
        'description' => t('Works exactly as the <em>Views</em> handler, except the behavior of the admin link that will point to the draggable view used to order the view.'),
        'handler' => array(
          'class' => 'EntityListHandlerDraggableViews',
          'file' => 'EntityListHandlerDraggableViews.inc',
          'path' => $path,
        ),
      );
      $handlers['EntityListHandlerDraggableViewsNative'] = array(
        'name' => 'Draggableviews native query',
        'description' => t('Optimizes performance by directly querying the Draggableviews backend. Only works for views with the native Draggableviews handler and without contextual arguments.'),
        'handler' => array(
          'class' => 'EntityListHandlerDraggableViewsNative',
          'file' => 'EntityListHandlerDraggableViewsNative.inc',
          'path' => $path,
        ),
      );
    }
  }
  if (module_exists('nodequeue')) {
    $handlers['EntityListHandlerNodeQueue'] = array(
      'name' => 'Nodequeue',
      'description' => t('Fetches entities (only nodes) directly from a Nodequeue.'),
      'handler' => array(
        'class' => 'EntityListHandlerNodeQueue',
        'file' => 'EntityListHandlerNodeQueue.inc',
        'path' => $path,
      ),
    );
  }
  if (module_exists('entityreference')) {
    $handlers['EntityListHandlerEntityReference'] = array(
      'name' => 'Entity Reference field',
      'description' => t('Fetches entities directly from an Entity Reference field on an entity.'),
      'handler' => array(
        'class' => 'EntityListHandlerEntityReference',
        'file' => 'EntityListHandlerEntityReference.inc',
        'path' => $path,
      ),
    );
  }
  if (module_exists('apachesolr_search')) {
    $handlers['EntityListHandlerApachesolr'] = array(
      'name' => 'Solr query',
      'description' => t('Fetches entities (only nodes) from an Solr query made with the Apachesolr module.'),
      'handler' => array(
        'class' => 'EntityListHandlerApachesolr',
        'file' => 'EntityListHandlerApachesolr.inc',
        'path' => $path,
      ),
    );
  }
  if (module_exists('search_api')) {
    $handlers['EntityListHandlerSearchApi'] = array(
      'name' => 'Search API query',
      'description' => t('Fetches entities from a search query made with the Search API module.'),
      'handler' => array(
        'class' => 'EntityListHandlerSearchApi',
        'file' => 'EntityListHandlerSearchApi.inc',
        'path' => $path,
      ),
    );
  }
  return $handlers;
}

/**
 * Entity list access callback.
 */
function entitylist_list_access($op, $list, $account = NULL) {
  if (is_string($list)) {
    $list = entitylist_list_load($name);
  }
  //$list->access($op, $account);
  return TRUE;
}

/**
 * Entity list object factory.
 */
function entitylist_list_create($schema, $item) {
  $list = new EntityList;

  // Unserialize our serialized params.
  foreach ($schema['fields'] as $field => $info) {
    if (!empty($info['serialize'])) {
      $list->{$field} = unserialize($item->{$field});
    }
    else {
      $list->{$field} = $item->{$field};
    }
  }
  return $list;
}

/**
 * Load function for an entity list object.
 */
function entitylist_list_load($name) {
  $lists = entitylist_list_load_all(array('name' => $name));
  if (isset($lists[$name])) {
    return $lists[$name];
  }
}

/**
 * Load function for an entity list object.
 */
function entitylist_list_load_all($args = array()) {
  $type = !empty($args) ? 'conditions' : 'all';
  ctools_include('export');
  $lists = ctools_export_load_object('entitylist_lists', $type, $args);
  if (isset($lists)) {
    foreach ($lists as &$list) {
      // Load each list's configuration into itself.
      $list->load();
    }
  }
  return $lists;
}

/**
 * Load an entity list from a context.
 *
 * @todo Figure out why we need to do this. Theory: when the list is being
 * passed around between contexts, relationships and panes the state (and hence
 * the arguments) are lost. The temporary solution has been to save the
 * arguments in the context object.
 *
 * @see entitylist_ctools_context()
 * @see entitylist_ctools_relationship_context()
 */
function entitylist_list_load_from_context($context) {
  $list = $context->data;
  $list->setArguments($context->setArguments);
  return $list;
}

/**
 * Get all handlers.
 */
function entitylist_get_handler_plugins() {
  ctools_include('plugins');
  return ctools_get_plugins('entitylist', 'handlers');
}

/**
 * Helper function to build context info.
 */
function entitylist_ctools_context_info($list, $parent, $relationship = FALSE) {
  $contexts = array();
  if (empty($list)) {
    return $contexts;
  }
  $arguments = $list->requiredArguments();

  // Only relationships can require other arguments (contexts).
  //
  // TODO: Consider if EntityListHandler::requiredArguments should return context
  // instances directly. Could potentially simplify a lot of code here.
  if ($relationship) {
    foreach ($arguments as $key => $info) {
      if (strpos($key, '.')) {
        list($context, $converter) = explode('.', $key, 2);
      }
      else {
        $context = $key;
      }
      $class_name = $info['required'] ? 'ctools_context_required' : 'ctools_context_optional';
      $contexts[] = new $class_name($info['label'], $context);
    }
    // A relationship must take at least one context, otherwise it's not a
    // relationship.
    if (empty($contexts)) {
      return array();
    }
  }

  // If it's not a relationship, it can't require arguments (contexts).
  if (!$relationship && !empty($arguments)) {
    foreach ($arguments as $argument) {
      if ($argument['required'] == TRUE) {
        return array();
      }
    }
  }

  // Figure out which context function to use.
  $function = $relationship ? 'entitylist_ctools_relationship_context' : 'entitylist_ctools_context';

  return array(
    'name' => $parent . ':' . $list->name,
    'title' => t('List: @title', array('@title' => $list->title)),
    'description' => filter_xss_admin($list->description),
    'keyword' => 'list',
    'required context' => $contexts,
    'context' => $function,
    'context name' => $list->name,
    'edit form' => 'entitylist_ctools_context_edit_form',
  );
}

/**
 * Form callback shared between context and relation plugins.
 */
function entitylist_ctools_context_edit_form($form, &$form_state) {
  $conf = &$form_state['conf'];
  $form['use_pager'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable a pager'),
    '#description' => t("Enable the use of a pager for this list. Checking this box won't display a pager on it self. You would need to place the Entity List <em>Pager</em> pane where you want to have the pager."),
    '#default_value' => isset($conf['use_pager']) ? $conf['use_pager'] : FALSE,
  );
  $form['pager_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Pager ID'),
    '#description' => t("Unless you're experiencing problems with pagers related to this list, you should leave this at 0. If using multiple pagers on one page you may need to set this number to a higher value so as not to conflict within the ?page= array. Large values will add a lot of commas to your URLs, so avoid if possible. <strong>When changing this value you might need to reconfigure panes that are affected by this pager</strong>."),
    '#default_value' => isset($conf['pager_id']) ? $conf['pager_id'] : 0,
    '#states' => array(
      'visible' => array(
        ':input#edit-use-pager' => array('checked' => TRUE),
      ),
    ),
  );
  $form['range'] = array(
    '#type' => 'fieldset',
    '#tree' => TRUE,
    '#title' => t('Range'),
  );
  $form['range']['offset'] = array(
    '#type' => 'textfield',
    '#title' => t('Offset'),
    '#description' => t('The number of items to skip. For example, if this field is 3, the first 3 items will be skipped and not displayed.'),
    '#default_value' => isset($conf['range']['offset']) ? $conf['range']['offset'] : 0,
  );
  $form['range']['limit'] = array(
    '#type' => 'textfield',
    '#title' => t('Limit'),
    '#description' => t('The number of items to display. Enter 0 for no limit.'),
    '#default_value' => isset($conf['range']['limit']) ? $conf['range']['limit'] : 10,
  );
  return $form;
}

/**
 * Helper function to count in ranges.
 */
function entitylist_count(&$total, &$success, $range) {
  if ($total >= (int)$range['offset']) {
    if (empty($range['limit'])) {
      $total++;
      $success++;
      return TRUE;
    }
    elseif ($success < (int)$range['limit']) {
      $total++;
      $success++;
      return TRUE;
    }
  }
  $total++;
  return FALSE;
}

