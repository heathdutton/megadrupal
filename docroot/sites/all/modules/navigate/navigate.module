<?php

/**
 * @file
 * Navigate framework module functions
 */

/**
 * Implements hook_menu().
 */
function navigate_menu() {
  /*
   $items['admin/config/navigate']= array(
   'title' => 'Navigate Settings',
   'page callback' => 'drupal_get_form',
   'callback arguments' => 'navigate_admin_settings',
   'access arguments' => array('navigate administer'),
   'description' => Global configuration of Navigate functionality.',
   'type' => MENU_NORMAL_ITEM,
   );
   */
  $items['navigate/process'] = array(
    'page callback' => 'navigate_process_data',
    'access arguments' => array('navigate view'),
    'type' => MENU_CALLBACK,
  );

  $items['navigate/user_autocomplete'] = array(
    'title' => 'User autocomplete',
    'page callback' => 'navigate_user_autocomplete',
    'access callback' => 'user_access',
    'access arguments' => array('navigate administer'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_init().
 */
function navigate_init() {
  if (user_access('navigate view')) {
    drupal_add_css(drupal_get_path('module', 'navigate') . '/navigate.css');
    drupal_add_js(drupal_get_path('module', 'navigate') . '/navigate.js');
    drupal_add_css(drupal_get_path('module', 'navigate') . '/jquery_plugins/jquery.tooltip.css');
    drupal_add_js(drupal_get_path('module', 'navigate') . '/jquery_plugins/jquery.tooltip.js');
    if (module_exists('jquery_ui')) {
      drupal_add_library('system', 'ui.core');
      drupal_add_library('system', 'ui.draggable');
      drupal_add_library('system', 'ui.sortable');
    }
    else {
      drupal_add_js(drupal_get_path('module', 'navigate') . '/jquery_plugins/jquery-ui.min.js');
    }
    drupal_add_js(drupal_get_path('module', 'navigate') . '/jquery_plugins/jquery.pngFix.js');
    //drupal_add_js(drupal_get_path('module', 'navigate') . '/jquery_plugins/jquery.hotkeys.js');

    $on = navigate_variable_get('on');

    // Default to on
    if ($on == '') {
      $on = 0;
    }

    drupal_add_js(array('navigateOn' => $on), array('type' => 'setting', 'scope' => JS_DEFAULT));
  }
  if (user_access('navigate administer')) {
    drupal_add_js('misc/autocomplete.js');
  }
}

/**
 * Render help page
 */
function navigate_help_page() {


}

/**
 * Implements hook_help().
 */
function navigate_help($path, $arg) {
  $toc = '';
  switch ($path) {
    case 'admin/help#navigate':
      $toc .= '<li><a href="#widget_help_main">General</a></li>';
      $content = t(
        '<a name="widget_help_main"></a>
        <h3>What is Navigate?</h3>
        <p>Navigate is the bar of widgets you see to your left. Or, if Navigate is minimized, you will see the Navigate icon peeking out of the upper left corner of the screen. When you click this icon, you will see the full Navigate widget set. Depending on the modules installed, Navigate will automatically add a Search widget and a Favorites widget for new users.</p>
        <p>Navigate uses a cache to save each user\'s Navigate bar whenever it is changed. This means that it requires few system resources when navigating from page to page.</p>
        <h3>The basic tools</h3>
        <p>Additional widgets can be added to your bar by clicking the add / remove widgets button, which looks like a cog wheel in the upper right hand corner of Navigate. Each user has their own Navigate bar, so you can customize yours to fit your needs.</p>
        <ul>
          <li><strong>For help on how to use a widget</strong>, you can often hover over the part in question until a tooltip displays.</li>
          <li><strong>To hide / show the Navigate bar</strong>, click the steering wheel icon in the upper left corner of the Navigate bar, or if it is hidden, on the part of the icon that displays in the upper left hand corner of the screen.</li>
          <li><strong>To add or remove widgets</strong>, click the cog wheel icon in the upper right corner of the Navigate bar. A small (x) icon will appear next to your widget title, which you can click to remove the widget.</li>
          <li><strong>To re-order your widgets</strong>, drag them by their title to the desired location and then let go.</li>
          <li><strong>To change the title of a widget</strong>, double-click the title, enter your new text and press enter.</li>
          <li><strong>To access the advanced settings of a widget</strong>, if advanced settings are available, a small cog wheel icon will be visible in the upper right hand corner of the widget. Click this to expand the advanced settings pane.</li>
          <li><strong>To shrink the Navigate bar</strong>, double-click on the Navigate bar title (which says "navigate"). This will hide areas widgets have marked as superfluous. To get them to show again, double click the title once more.</li>
          <li>Press CTL+SHIFT+N to toggle Navigate visibility. Click the "KEY" button at the bottom of Navigate to disable keyboard shortcuts.</li>
        </ul>'
      );
      $hook = 'navigate_help_page';
      $array = array();
      $i = 0;
      foreach (module_implements($hook) as $module) {
        $function = $module . '_' . $hook;
        $array = $function();
        if ($array['access']) {
          $toc .= '<li><a href="#widget_help_' . $i . '">' . $array['title'] . ' widget</a></li>';
          $content .= '<a name="widget_help_' . $i . '"></a><h2>' . $array['title'] . ' widget<span class="navigate-toc-link"><a href="#toc">top</a></span></h2>' . $array['content'];
        }
      }
      $output = '<a name="toc"></a><ul>' . $toc . '</ul>' . $content;
      return $output;
  }
}

/**
 * Implements hook_permission().
 */
function navigate_permission() {
  return array(
    "navigate view" => array(
      'title' => t("navigate view"),
      'description' => t('View Navigate'),
    ),
    "navigate customize" => array(
      'title' => t("navigate customize"),
      'description' => t('Customize Navigate'),
    ),
    "navigate administer" => array(
      'title' => t("navigate administer"),
      'description' => t('Administer Navigate'),
    ),
  );
}

/**
 * Defines admin settings form
 */
function navigate_admin_settings() {
  $form['navigate_help_text'] = array(
    '#title' => 'Help Text',
    '#description' => 'This is the help text the displays when the help link is clicked. You can use PHP tags, and if you leave it blank it will show the default text.',
    '#type' => 'textarea',
    '#rows' => '7',
    '#default_value' => variable_get('navigate_help_text', navigate_HELP_TEXT),
  );
  return $settings;
}

/**
 * Implements hook_page_alter().
 */
function navigate_page_alter(&$page) {
  $output = '';
  if (user_access('navigate view')) {
    // Build navigate
    $output = navigate_build();

    // Theme navigate
    $output = theme('navigate_outer', array('output' => $output));
    $output .= '
      <div style="display:none"><input type="hidden" id="navigate_q" value="' . check_plain($_GET['q']) . '" /></div>';
  }

  $page['page_bottom']['navigate'] = array(
    '#markup' => $output,
  );
}

/**
 * Load a widget set
 */
function navigate_defaults_load() {
  global $user;
  // Save current set
  if (navigate_variable_get('saved_set_for_loading', 0) == '') {
    $settings = array(
      'name' => 'saved_set_for_loading',
      'value' => serialize(navigate_export($user->uid)),
      'wid' => 0,
    );
    navigate_variable_set($settings);
  }

  // Replace out current
  if (isset($_POST['rid'])) {
    $export = variable_get('navigate_defaults_' . $_POST['rid'], '');
    navigate_import($export, $user->uid);
  }
  if (isset($_POST['username'])) {
    if ($uid = db_query("SELECT uid FROM {users} WHERE name = :name", array(':name' => $_POST['username']))->fetchField()) {
      $export = navigate_export($uid);
      navigate_import($export, $user->uid);
      navigate_variable_set(array('value' => $_POST['username'], 'name' => 'username_search'));
    }
  }
  echo navigate_build_defaults_admin();
  die();
}

/**
 * Return to saved widget set
 */
function navigate_defaults_switch_back() {
  global $user;
  $export = unserialize(navigate_variable_get('saved_set_for_loading', 0));
  navigate_import($export, $user->uid);
  navigate_variable_delete('saved_set_for_loading');
  echo navigate_build_defaults_admin();
  die();
}

/**
 * Change the default widget set for all users of a certain role
 */
function navigate_defaults_set_all() {
  global $user;
  $export = navigate_export($user->uid);
  if (isset($_POST['rid']) && $_POST['rid'] != 2) {
    if ($rid = db_query("SELECT rid FROM {role} WHERE rid = :rid", array(':rid' => $_POST['rid']))->fetchField()) {
      variable_set('navigate_defaults_' . $rid, navigate_export($user->uid));
      $result = db_query("SELECT uid FROM {users_roles} WHERE rid = :rid", array(':rid' => $_POST['rid']));
      foreach ($result as $row) {
        if (db_fetch_array(db_query("SELECT uid FROM {navigate_widgets} WHERE uid = :uid", array(':uid' => $row->uid)))) {
          navigate_import($export, $row->uid);
        }
      }
    }
  }
  elseif (isset($_POST['rid']) && $_POST['rid'] == 2) {
    $result = db_query("SELECT DISTINCT(u.uid),  ur.rid FROM {users} u
      LEFT JOIN {users_roles} ur ON u.uid = ur.uid
      WHERE u.uid != :u.uid
      AND ur.rid IS NULL
      GROUP BY u.uid", array(':u.uid' => 0));
    foreach ($result as $row) {
      if ($uid = db_query("SELECT uid FROM {navigate_widgets} WHERE uid = :uid", array(':uid' => $row->uid))->fetchField()) {
        navigate_import($export, $row->uid);
      }
    }
  }
  elseif (isset($_POST['username'])) {
    if ($uid = db_query("SELECT uid FROM {users} WHERE name = :name", array(':name' => $_POST['username']))->fetchField()) {
      navigate_import(navigate_export($user->uid), $uid);
      navigate_variable_set(array('value' => $_POST['username'], 'name' => 'username_search'));
    }
  }
  echo navigate_build_defaults_admin();
  die();
}

/**
 * Theme the outer portion of navigate
 */
function theme_navigate_outer($variables) {
  $output = $variables['output'];
  $admin_menu_class = '';
  if (module_exists('admin_menu') && user_access('access administration menu')) {
    $admin_menu_class = ' navigate-admin-menu ';
  }
  $output = '
    <div class="' . $admin_menu_class . '">
      <div class="navigate">
        ' . $output . '
      </div>
      <div id="navigate-switch-outer" class="navigate-tooltip"><div id="navigate-switch"></div></div>
      <div class="navigate-loading navigate-hide"><div></div></div>
      ' . navigate_tooltip('navigate-switch-outer', '<p>For help or more information on Navigate, visit <strong>/admin/help/navigate</strong>.</p><p><strong>' . t('Welcome to Navigate') . '</strong></p><p>' . t('Click this switch to show and hide Navigate. If something happens and Navigate is not displaying properly, visit <strong>/navigate/clear</strong> to clear Navigate\'s cache.') . '</p>') . '
    </div>';
  return $output;
}


/**
 * Run all ajax queries through navigate/process, which maps to this function
 */
function navigate_process_data() {
  switch ($_POST['action']) {
    case 'variable_save':
      navigate_variable_set();
      break;
    case 'widget_list':
      navigate_widget_list();
      break;
    case 'add_widget':
      navigate_widget_add();
      break;
    case 'widget_sort':
      navigate_widget_sort();
      break;
    case 'widget_delete':
      navigate_widget_delete();
      break;
    case 'save_defaults':
      navigate_save_defaults();
      break;
    case 'defaults_unset':
      navigate_unset_defaults();
      break;
    case 'widgets_reload':
      navigate_reload_widgets();
      break;
    case 'defaults_load':
      navigate_defaults_load();
      break;
    case 'defaults_switch_back':
      navigate_defaults_switch_back();
      break;
    case 'defaults_set_all':
      navigate_defaults_set_all();
      break;
    case 'export_widget_set':
      navigate_export_widget_set();
      break;
    case 'import_widget_set':
      navigate_import_widget_set();
      break;
    default:
      if (module_exists($_POST['module'])) {
        $function = $_POST['module'] . '_navigate_widget_process';
        $function($_POST['wid'], $_POST['action']);
      }
  }
}

/**
 * Load a widget set associated with a user
 */
function navigate_user_load_set() {
  global $user;
  if (!user_access('navigate administer')) {
    return;
  }

}


/**
 * Reload the navigate widgets
 */
function navigate_reload_widgets() {
  global $user;
  $output = navigate_build_all_widgets($user->uid);
  echo $output;
  die();
}

/**
 * Save default widget set
 */
function navigate_save_defaults() {
  global $user;
  if (!user_access('navigate administer')) {
    return;
  }
  if (isset($_POST['rid'])) {
    if ($rid = db_query("SELECT rid FROM {role} WHERE rid = :rid", array(':rid' => $_POST['rid']))->fetchField()) {
      variable_set('navigate_defaults_' . $rid, navigate_export($user->uid));
    }
    if ($_POST['rid'] == 0) {
      variable_set('navigate_defaults_0', navigate_export($user->uid));
    }
  }
  if (isset($_POST['uid'])) {
    if ($uid = db_query("SELECT uid FROM {users} WHERE uid = :uid", array(':uid' => $_POST['uid']))->fetchField()) {
      navigate_import(navigate_export($user->uid), $uid);
    }
  }
  echo navigate_build_defaults_admin();
  die();
}

/**
 * Unset default widget set
 */
function navigate_unset_defaults() {
  global $user;
  if (!user_access('navigate administer')) {
    return;
  }
  variable_del('navigate_defaults_' . $_POST['rid']);
  echo navigate_build_defaults_admin();
  die();
}

/**
 * Deletes a widget
 */
function navigate_widget_delete($wid = '', $uid = '') {
  global $user;
  if (!user_access('navigate administer') && $uid != $user->uid) {
    return FALSE;
  }
  if ($uid == '') {
    $uid = $user->uid;
  }
  $wid = ($wid == '') ? $_POST['wid'] : $wid;

  // Call widget delete operation
  $row = db_query("SELECT * FROM {navigate_widgets} WHERE wid = :wid AND uid = :uid", array(':wid' => $wid, ':uid' => $uid))->fetchObject();
  $function = $row->module . '_navigate_widgets';
  if (function_exists($function)) {
    $function('delete', array('wid' => $row->wid, 'type' => $row->type));
  }
  db_delete('navigate_widgets')
  ->condition('uid', $uid)
  ->condition('wid', $wid)
  ->execute();
  db_delete('navigate_user_settings')
  ->condition('uid', $uid)
  ->condition('wid', $wid)
  ->execute();
}


/**
 * Save the new sort order for the widgets
 */
function navigate_widget_sort() {
  global $user;
  foreach ($_POST['navigate-widget-outer'] as $key => $wid) {
    db_update('navigate_widgets')
    ->fields(array(
      'weight' => $key,
    ))
  ->condition('uid', $user->uid)
  ->condition('wid', $wid)
  ->execute();
  }
}


/**
 * Add a new widget
 */
function navigate_widget_add($output = TRUE, $type = '', $module = '') {
  global $user;

  if ($type == '') {
    $type = $_POST['type'];
  }
  if ($module == '') {
    $module = $_POST['module'];
  }
  if (!module_exists($module)) {
    return FALSE;
  }
  // Get next weight
  $weight = db_query_range("SELECT weight FROM {navigate_widgets} WHERE uid = :uid ORDER BY weight DESC", 0, 1, array(':uid' => $user->uid))->fetchField();
  $weight = empty($weight) ? 0 : $weight;
  $weight++;

  $id = db_insert('navigate_widgets')
  ->fields(array(
    'uid' => $user->uid,
    'type' => $type,
    'module' => $module,
    'weight' => $weight,
  ))
  ->execute();
  $wid = $id;

  if ($output) {
    $row = db_query("SELECT * FROM {navigate_widgets} WHERE wid = :wid", array(':wid' => $wid))->fetchObject();
    echo navigate_output_widget($row, 1);
  }
}


/**
 * Generate a list of available widgets
 */
function navigate_widget_list() {
  $hook = 'navigate_widgets';
  $array = array();
  $output = '';
  foreach (module_implements($hook) as $module) {
    $function = $module . '_' . $hook;
    $array = array_merge($array, $function('list'));
  }
  foreach ($array as $widget) {
    $output .= theme('navigate_widget_list_item', array('type' => $widget));
  }
  $output = '
    <div class="navigate-widget-list-outer">
      <div class="navigate-widget-list-title">' . t('Add widgets') . '</div>
      <div class="navigate-widget-list">' . $output . '</div>
    </div>';
  return $output;
}


/**
 * Theme a widget list item
 */
function theme_navigate_widget_list_item($variables) {
  $widget = $variables['type'];
  $single = isset($widget['single']) ? '<div class="display:none"><input type="hidden" class="single" value="1" /></div>' : '';
  return '<div class="navigate-widget-list-item" id="' . $widget['type'] . '" title="' . $widget['module'] . '">' . $widget['content'] . $single . '</div>';
}


/**
 * Save a user variable
 */
function navigate_variable_set($settings = FALSE) {
  global $user;
  if (!$settings) {
    $value = $_POST['value'];
    $name = $_POST['name'];
    $wid = $_POST['wid'];
  }
  else {
    if (!isset($settings['wid'])) {
      $settings['wid'] = 0;
    }
    $value = $settings['value'];
    $name = $settings['name'];
    $wid = $settings['wid'];
  }
  $wid = is_numeric($wid) ? $wid : 0;
  $cnt = (bool) db_query_range("SELECT COUNT(*) FROM {navigate_user_settings} WHERE uid = :uid AND name = :name AND wid = :wid", 0, 1, array(':uid' => $user->uid, ':name' => $name, ':wid' => $wid))->fetchField();
  if (!empty($cnt)) {
    db_update('navigate_user_settings')
    ->fields(array(
      'value' => $value,
    ))
    ->condition('uid', $user->uid)
    ->condition('name', $name)
    ->condition('wid', $wid)
    ->execute();
  }
  else {
    $id = db_insert('navigate_user_settings')
    ->fields(array(
      'uid' => $user->uid,
      'value' => $value,
      'name' => $name,
      'wid' => $wid,
    ))
    ->execute();
  }
}


/**
 * Get a user variable
 */
function navigate_variable_get($name, $wid = 0) {
  global $user;
  return db_query("SELECT value FROM {navigate_user_settings} WHERE uid = :uid AND name = :name AND wid = :wid", array(':uid' => $user->uid, ':name' => $name, ':wid' => $wid))->fetchField();
}


/**
 * Delete a user variable
 */
function navigate_variable_delete($name, $wid = 0) {
  global $user;
  db_delete('navigate_user_settings')
  ->condition('name', $name)
  ->condition('wid', $wid)
  ->condition('uid', $user->uid)
  ->execute();
}


/**
 * Build the Navigate bar
 */
function navigate_build() {
  global $user;
  $output = '';


  // Build default widget set, if there are no widgets
  $count = db_query("SELECT COUNT(wid) FROM {navigate_widgets} WHERE uid = :uid", array(':uid' => $user->uid))->fetchField();
  if ($count < 1) {
    navigate_add_default_widgets();
  }

  // Build widgets
  $output .= navigate_build_all_widgets($user->uid);
  $output = theme('navigate_all_widgets', array('output' => $output));
  $content['navigate'] = $output;

  // Keyboard shortcut enable button
  $key_disabled = navigate_variable_get('key_disabled');
  $disabled_class = '';
  if ($key_disabled == 1) {
    $disabled_class = ' key-disabled ';
  }
  $content['key_button'] = '';//<div id="navigate-key-button" class="navigate-key-button' . $disabled_class . ' navigate-tooltip">' . t('KEY') . '</div>' . navigate_tooltip('navigate-key-button', 'Enable / disable keyboard shortcuts');
  $content['help_button'] = '<div id="navigate-help-button" class="navigate-help-button">' . t('HELP') . '<input type="hidden" class="value" value="' . url("admin/help/navigate") . '" /></div>';



  $output = theme('navigate', array('content' => $content));

  if (user_access('navigate administer')) {
    $output .= '
      <div class="navigate-admin-tools-outer"><div class="navigate-admin-tools-inner">
        <div class="navigate-defaults">' . navigate_build_defaults_admin() . '</div>
      </div></div>';
  }
  return $output;
}

/**
 * Returns widgets for given user id
 */
function navigate_build_all_widgets($uid) {
  $output = '';
  $result = db_query("SELECT * FROM {navigate_widgets} WHERE uid = :uid ORDER BY weight ASC", array(':uid' => $uid));
  foreach ($result as $row) {
    if (module_exists($row->module)) {
      $output .= navigate_output_widget($row);
    }
  }
  return $output;
}

/**
 * Defaults for admin
 */
function navigate_build_defaults_admin() {

  // Check if a widget set is loaded
  $alert = '';
  if (navigate_variable_get('saved_set_for_loading', 0) != '') {
    $alert = '<a href="' . url('navigate/unload') . '" class="navigate-default-switch-back">Switch back to your auto-saved set</a>';
  }

  // Run through roles
  $output = '';
  $result = db_query("SELECT * FROM {role} WHERE rid <> :rid", array(':rid' => 1));
  foreach ($result as $row) {
    $default = variable_get('navigate_defaults_' . $row->rid, '');
    $load = '<span class="default-disabled navigate-default-user-load">' . t('Load') . '<input type="hidden" class="rid" value="' . $row->rid . '" /></span>';
    $unset = '<span class="default-disabled navigate-default-user-load">' . t('Unset') . '</span>';
    if ($default != '') {
      $load = '<a class="navigate-default-load" href="javascript:;" rel="' . $row->rid . '">' . t('Load') . '</a>';
      $unset = '<a class="navigate-default-unset" href="javascript:;" rel="' . $row->rid . '">' . t('Unset') . '</a>';
    }
    $output .= '
      <tr>
        <td class="navigates-default-table-label">' . $row->name . '</td>
        <td><a class="navigate-default-set" href="javascript:;" rel="' . $row->rid . '">' . t('Set') . '</a></td>
        <td>' . $load . '</td>
        <td>' . $unset . '</td>
        <td><a class="navigate-default-set-all" href="javascript:;" rel="' . $row->rid . '">' . t('Set all users') . '</a></td>
      </tr>';
  }

  $default = variable_get('navigate_defaults_0', '');
  $load = '<span class="default-disabled navigate-default-user-load">' . t('Load') . '</span>';
  $unset = '<span class="default-disabled navigate-default-user-load">' . t('Unset') . '</span>';
  if ($default != '') {
    $load = '<a class="navigate-default-load" href="javascript:;">' . t('Load') . '</a>';
    $unset = '<a class="navigate-default-unset" href="javascript:;" rel="0">' . t('Unset') . '</a>';
  }

  // User search row
  $username_value = navigate_variable_get('username_search');
  $username_class = '';
  $load = '<span class="default-disabled navigate-default-user-load">' . t('Load') . '</span>';
  $set_user = '<span class="default-disabled navigate-default-user-replace">' . t('Set user') . '</span>';
  if ($username_value == '') {
    $username_value = t('Search name / UID');
    $username_class = ' navigate-username-empty ';
  }
  else {
    $load = '<a class="navigate-default-load-user" href="javascript:;">' . t('Load') . '</a>';
    $set_user = '<a class="navigate-default-set-user" href="javascript:;">' . t('Set user') . '</a>';
  }

  // Import / export
  $inputs['export'] = navigate_textarea(array(
    'name' => 'set-export',
    'class' => 'navigate-favorites-export',
    'filters' => 'true',
    'submit' => 'Export widget set',
    'hide_filters' => 1,
    'callback' => 'navigate_set_export',
    'help' => 'Click the export button and it will load the content in this box.',
    'wid' => '',
  ));

  $inputs['import'] = navigate_textarea(array(
    'name' => 'set-import',
    'class' => 'navigate-favorites-import',
    'filters' => 'true',
    'submit' => 'Import widget set',
    'hide_filters' => 1,
    'callback' => 'navigate_set_import',
    'help' => 'Click the import button to import widget set. Note that this will replace your current set.',
    'wid' => '',
  ));

  $import_export = '
    <div class="navigate-import-export">
      ' . $inputs['export'] . $inputs['import'] . '
    </div>';

  // Combine output
  $output = '
    <div class="navigate-admin-tools-defaults">
      <div class="navigate-admin-tools-heading">' . t('Defaults') . '</div>
      ' . $alert . '
      <table class="navigate-defaults-table">' . $output . '
        <tr class="navigate-user-default-row">
          <td>
            <div class="navigate-user-search-outer">
              <div><input id="navigate-set-username" value="' . $username_value . '" class="form-text form-autocomplete navigate-text-input' . $username_class . '" type="text" maxlength="60"/><input type="hidden" disabled="disabled" value="' . url('navigate/user_autocomplete') . '" id="navigate-set-username-autocomplete" class="autocomplete"/></div>
            </div>
          </td>
          <td></td>
          <td class="navigate-default-set-user-load">' . $load . '</td>
          <td></td>
          <td class="navigate-default-set-user-set">' . $set_user . '</td>
        </tr>
      </table>
      <div class="navigate-admin-tools-heading">' . t('Widget set import / export') . '</div>
      ' . $import_export . '
    </div>';
  return $output;
}


/**
 * Build default set of widgets
 */
function navigate_add_default_widgets() {
  global $user;

  $export = '';

  // Get default widget set for user role
  foreach ($user->roles as $rid => $role) {
    $export = variable_get('navigate_defaults_' . $rid, '');
  }

  // If no default role sets exist, then use 'unassigned roles' one
  if ($export == '') {
    $export = variable_get('navigate_defaults_0', '');
  }

  // Run import
  if ($export != '') {
    navigate_import($export, $user->uid);
    return;
  }

  // If there is default set, add a search and favorites widget
  if ($export != '') {
    navigate_import($export, $user->uid);
    return;
  }

  navigate_widget_add(FALSE, 'navigate_search', 'navigate_search');
  navigate_widget_add(FALSE, 'favorites', 'navigate_favorites');
}

/**
 * Builds a widget for output
 */
function navigate_output_widget($row, $show_close_button = 0) {
  $function = $row->module . '_navigate_widgets';
  $settings = array(
    'type' => $row->type,
    'wid' => $row->wid,
  );
  if (isset($row->order)) {
    $settings['order'] = $row->order;
  }
  $op = 'output';
  $content = $content['settings'] = $content['settings_button'] = $content['widget'] = '';
  if (function_exists($function)) {
    $content = $function($op, $settings);
  }
  if (!is_array($content)) {
    $content['widget'] = $content;
  }
  if (!empty($content['settings'])) {
    $variables = array();
    $variables['settings'] = $content['settings'];
    $variables['wid'] = $row->wid;
    $content['settings'] = theme('navigate_widget_settings', $variables);
    $content['settings_button'] = theme('navigate_widget_settings_button', array('wid' => $row->wid));
  }
  $title = navigate_variable_get('widget_title', $row->wid);
  if (empty($title) && !empty($content['title'])) {
    $title = $content['title'];
  }
  $content['title'] = $title;
  $close_button_style = ($show_close_button == 0) ? 'display:none' : '';
  $variables = array();
  //$variables['content'] = $content;
  $variables['content_title'] = $content['title'];
  $variables['content_widget'] = $content['widget'];
  $variables['content_settings'] = empty($content['settings']) ? '' : $content['settings'];
  $variables['content_settings_button'] = empty($content['settings_button']) ? '' : $content['settings_button'];
  $variables['wid'] = $row->wid;
  $variables['close_button_style'] = $close_button_style;
  $variables['type'] = $row->type;
  $output = theme('navigate_widget', $variables);

  return $output;
}


/**
 * Themes the outside of all widgets
 */
function theme_navigate_all_widgets($variables) {
  $output = $variables['output'];
  $sortable = '';
  if (user_access('navigate customize')) {
    $sortable = ' navigate-all-widgets-sortable ';
  }
  $output =  '<div class="navigate-all-widgets' . $sortable . '">' . $output . '</div>';
  return $output;
}


/**
 * Create a link for the 'add widgets' list.
 *
 * $content can be anything, $callback is a js function that will be run after the new widget is loaded
 */
function navigate_add_widget_link($content, $callback = '') {
  $output = $content . '<input type="hidden" class="callback" value="' . $callback . '" />';
  return $output;
}


/**
 * Theme the navigate bar
 */
function theme_navigate($variables) {
  $content = $variables['content'];
  $launch_settings = '';
  if (user_access('navigate customize')) {
    $launch_settings = '<div id="navigate-launch-settings-all" class="navigate-launch-settings navigate-tooltip"><div></div></div>' . navigate_tooltip('navigate-launch-settings-all', '<p><strong>' . t('Add / Remove Widgets') . '</strong></p><p>' . t('Click this to display a list of widgets to add. When clicked, this will also add close buttons to visible widgets.') . '</p>');
  }
  $output = '
    <div class="navigate-inner">
      <div id="navigate-top" class="navigate-top">
        ' . $launch_settings . '
        <div id="navigate-overall-title" class="navigate-title navigate-tooltip">' . t('Navigate') . '</div>
        ' . navigate_tooltip('navigate-overall-title', '<p><strong>' . t('Hide extra info') . '</strong></p><p>' . t('Double click the title to hide inputs and other items to just show links.') . '</p>') . '
      </div>
      <div class="navigate-content">
        <div class="navigate-add-widgets" style="display:none">' . navigate_widget_list() . '</div>
        ' . $content['navigate'] . '
      </div>
      <div class="navigate-bottom">' . $content['key_button'] . $content['help_button'] . '</div>
    </div>';
  return $output;
}


/**
 * Theme a Navigate widget
 */
function theme_navigate_widget($variables) {
  //$content = $variables['content'];
  $wid = $variables['wid'];
  $close_button_style = $variables['close_button_style'];
  $type = $variables['type'];
  $customizable = '';
  if (user_access('navigate customize')) {
    $customizable = ' navigate-widget-title-customizable ';
  }
  $content = '
    <div id="navigate-widget-outer-' . $wid . '" class="navigate-widget-outer">
      ' . $variables['content_settings_button'] . '
      <div id="navigate-widget-close-' . $wid . '" style="' . $close_button_style . '" class="navigate-widget-close"><input type="hidden" class="navigate-widget-close-id" value="' . $wid . '" /></div>
      <div class="navigate-widget-top"></div>
      <div id="navigate-widget-' . $wid . '" class="navigate-widget">
        <div id="navigate-widget-title-outer-' . $wid . '" class="navigate-title-outer">
          <div class="navigate-widget-title' . $customizable . '">' . $variables['content_title'] . '</div>
          <input type="hidden" class="navigate-title-wid" value="' . $wid . '" />
        </div>
        ' . $variables['content_widget'] . '
      </div>
      <div class="navigate-widget-bottom"></div>
      <div>' . $variables['content_settings'] . '</div>
      <input type="hidden" class="wid" value="' . $wid . '" />
      <input type="hidden" class="type" value="' . $type . '" />
    </div>';
  return $content;
}


/**
 * Themes widget settings button
 */
function theme_navigate_widget_settings_button($variables) {
  $wid = $variables['wid'];
  if (user_access('navigate customize')) {
    $output = '<div class="navigate-widget-settings-button navigate-widget-settings-button-' . $wid . '"></div>';
    return $output;
  }
}


/**
 * Themes the setting slider pane
 */
function theme_navigate_widget_settings($variables) {
  $settings = $variables['settings'];
  $wid = $variables['wid'];
  $output = '
    <div class="navigate-widget-settings-outer" style="display:none">
      <div id="navigate-widget-settings-' . $wid . '" class="navigate-widget-settings">' . $settings . '</div>
      <div class="navigate-widget-settings-bottom"></div>
    </div>';
  return $output;
}


/**
 * Get settings specific to a widget
 */
function navigate_widget_settings_get($wid, $clear = FALSE) {
  static $settings;
  if ($clear) {
    unset($settings[$wid]);
  }
  if (isset($settings[$wid])) {
    return $settings[$wid];
  }
  $result = db_query("SELECT * FROM {navigate_user_settings} WHERE wid = :wid", array(':wid' => $wid));
  foreach ($result as $row) {
    $settings[$wid][$row->name] = $row->value;
  }
  if (isset($settings[$wid])) {
    return $settings[$wid];
  }
}


/**
 * Output a toggle button
 */
function navigate_button($button_settings) {

  $defaults = array(
    'on' => '1',
    'off' => '0',
    'help' => '',
  );
  foreach ($defaults as $key => $val) {
    if (!key_exists($key, $button_settings)) {
      $button_settings[$key] = $val;
    }
  }
  $settings = navigate_widget_settings_get($button_settings['wid']);

  // If the setting hasn't set before, set it to the default
  if (!isset($settings[$button_settings['name']]) && $button_settings['default'] != '') {
    $settings = array(
      'name' => $button_settings['name'],
      'value' => $button_settings['default'],
      'wid' => $button_settings['wid'],
    );
    navigate_variable_set($settings);
    $settings = navigate_widget_settings_get($button_settings['wid'], TRUE);
  }

  $on_class = '';
  if ($settings[$button_settings['name']] == $button_settings['on']) {
    $on_class = ' navigate-button-on ';
  }
  $group_class = '';
  $group_input = '';
  if (isset($button_settings['group'])) {
    $group_class = ' ' . $button_settings['group'] . ' ';
    $group_input = '<input type="hidden" class="group" value="' . $button_settings['group'] . '" />';
  }
  $required = '';
  if (isset($button_settings['required'])) {
    $required = 1;
  }
  $callback = '';
  if (isset($button_settings['callback'])) {
    $callback = $button_settings['callback'];
  }
  $output = '
    <div class="navigate-button-outer">
      <div id="' . $button_settings['class'] . '-' . $button_settings['wid'] . '" class="navigate-button ' . $button_settings['class'] . $on_class . $group_class . ' navigate-tooltip">' . $button_settings['content'] . '</div>
      <div class="navigate-absolute">
        <input type="hidden" class="on" value="' . $button_settings['on'] . '" />
        <input type="hidden" class="off" value="' . $button_settings['off'] . '" />
        <input type="hidden" class="name" value="' . $button_settings['name'] . '" />
        <input type="hidden" class="required" value="' . $required . '" />
        <input type="hidden" class="callback" value="' . $callback . '" />
        ' . navigate_tooltip($button_settings['class'] . '-' . $button_settings['wid'], $button_settings['help']) . '
        ' . $group_input . '
      </div>
    </div>';
  return $output;
}


/**
 * Tooltip in hidden element
 */
function navigate_tooltip($id, $content) {
  return '<div id="' . $id . '_tip_content" style="display:none">' . $content . '</div>';
}


/**
 * Output a text input
 */
function navigate_input($input_settings) {
  $settings = navigate_widget_settings_get($input_settings['wid']);
  if ($input_settings['select_all']) {
    $select_all_class = ' navigate-select-all ';
  }
  $clear_class = '';
  if (isset($input_settings['clear'])) {
    $clear_class = ' navigate-clear ';
  }
  $settings[$input_settings['name']] = isset($settings[$input_settings['name']]) ? ($settings[$input_settings['name']]) : '';
  $output = '
    <div class="navigate-text-input-outer">
      <div class="navigate-text-input-container"><input id="' . $input_settings['class'] . '_' . $input_settings['wid'] . '" class="navigate-text-input ' . $input_settings['class'] . $select_all_class . $clear_class . ' navigate-tooltip" value="' . $settings[$input_settings['name']] . '" name="' . $input_settings['class'] . '" /></div>
      ' . navigate_tooltip($input_settings['class'] . '_' . $input_settings['wid'], $input_settings['help']) . '
    <input type="hidden" class="callback" value="' . $input_settings['callback'] . '" />
    <input type="hidden" class="name" value="' . $input_settings['name'] . '" />
    </div>';
  return $output;
}


/**
 * Output a textarea input
 */
function navigate_textarea($input_settings) {
  $filters_output = '';
  $input_settings['select_all'] = isset($input_settings['select_all']) ? $input_settings['select_all'] : '';
  $settings = navigate_widget_settings_get($input_settings['wid']);

  $select_all_class = isset($input_settings['select_all']) ? ' navigate-select-all ' : '';

  $filters_output = '';
  if (!isset($input_settings['hide_filters'])) {
    global $user;
    $filters = filter_formats($user);
    foreach ($filters as $filter) {
      if (!isset($default)) {
        $default = $filter->format;
      }
      $filters_output .= navigate_button(array(
        'name' => $input_settings['name'] . '_format',
        'content' => $filter->name,
        'class' => 'navigate-filter-' . $filter->format,
        'group' => $input_settings['name'] . '_format',
        'default' => $default,
        'help' => '',
        'on' => $filter->format,
        'required' => TRUE,
        'wid' => $input_settings['wid'],
      ));
    }
    if ($filters_output != '') {
      $filters_output = '<div class="navigate-filters">' . $filters_output . '</div>';
    }
  }

  if (!isset($input_settings['submit'])) {
    $input_settings['submit'] = 'Save';
  }

  $settings[$input_settings['name']] = isset($settings[$input_settings['name']]) ? $settings[$input_settings['name']] : '';

  $output = '
    <div class="navigate-textarea-outer">
      <div class="navigate-textarea-container">
        <textarea id="' . $input_settings['class'] . '_' . $input_settings['wid'] . '" class="navigate-textarea ' . $input_settings['class'] . $select_all_class . ' navigate-tooltip" name="' . $input_settings['class'] . '" rows="4" cols="30">' . htmlentities($settings[$input_settings['name']]) . '</textarea>
        ' . navigate_tooltip($input_settings['class'] . '_' . $input_settings['wid'], $input_settings['help']) . '
        ' . $filters_output . '
        <div class="navigate-submit ' . $input_settings['class'] . '_submit_' . $input_settings['wid'] . '">' . t($input_settings['submit']) . '</div>
      </div>
      <input type="hidden" class="callback" value="' . $input_settings['callback'] . '" />
      <input type="hidden" class="name" value="' . $input_settings['name'] . '" />
    </div>';
  return $output;
}



/**
 * Return an array of devel menu items, used for menu building by widgets
 */
function navigate_devel_menu($array = array()) {
  if (module_exists('devel') && user_access('access devel information')) {
    $array[] = array(
      'title' => 'Devel settings',
      'path' => 'admin/config/devel',
      'description' => 'Adjust module settings for devel module',
    );
    $array[] = array(
      'title' => 'Phpinfo()',
      'path' => 'admin/reports/status/php',
    );
    $array[] = array(
      'title' => 'Function reference',
      'path' => 'devel/reference',
      'description' => 'View a list of currently defined user functions with documentation links',
    );
    $array[] = array(
      'title' => 'Reinstall modules',
      'path' => 'devel/reinstall',
      'description' => 'Re-run hook_install() for a given module',
    );
    $array[] = array(
      'title' => 'Reset menus',
      'path' => 'devel/session',
      'description' => 'List the contents of $_SESSION',
    );
    $array[] = array(
      'title' => 'Variable editor',
      'path' => 'devel/variable',
      'description' => 'Edit and delete site variables',
    );
    $array[] = array(
      'title' => 'Session viewer',
      'path' => 'devel/session',
      'description' => 'List the contents of $_SESSION',
    );
  }
  return $array;
}


/**
 * Theme a link
 */
function theme_navigate_link($variables) {
  $menu_item = $variables['menu_item'];
  static $i;
  if ($i == '') {
    $i = 1;
  }
  $char_count = 26;
  if (drupal_strlen($menu_item['title']) > $char_count) {
    $title = drupal_substr($menu_item['title'], 0, $char_count -3) . '...';
  }
  else {
    $title = $menu_item['title'];
  }

  $menu_item['description'] = isset($menu_item['description']) ? ('<div class="navigate-link-description">' . $menu_item['description'] . '</div>') : '';

  $help_content = '
    <div class="navigate-link-help">
      <div class="navigate-link-title">' . $menu_item['title'] . '</div>
      ' . $menu_item['description'] . '
      <div class="navigate-link-link">' . url($menu_item['path']) . '</div>
    </div>
  ';
  $query = '';
  if (strpos($menu_item['path'], '?') !== FALSE) {
    $path_array = explode('?', $menu_item['path']);
    $menu_item['path'] = $path_array[0];
    $query = $path_array[1];
  }
  $id = 'navigate_link_' . $menu_item['wid'] . '_' . $i;
  $output = '<div id="' . $id . '" title="" class="navigate-tooltip navigate-link">' . l($title, $menu_item['path'], array('query' => $query)) . '</div>
    ' . navigate_tooltip($id, $help_content);
  $i++;
  return $output;
}


/**
 * Associate a js callback with clicking content
 */
function navigate_callback_button($input_settings) {
  $input_settings['wid'] = isset($input_settings['wid']) ? $input_settings['wid'] : '';
  $output = '
    <div id="' . $input_settings['class'] . '_' . $input_settings['wid'] . '" class="navigate-click-outer navigate-tooltip">
      <div class="navigate-callback-button">' . $input_settings['content'] . '</div>
      <input type="hidden" class="callback" value="' . $input_settings['callback'] . '" />
      ' . navigate_tooltip($input_settings['class'] . '_' . $input_settings['wid'], $input_settings['help']) . '
    </div>';
  return $output;
}

/**
 * Implements hook_user_cancel().
 */
function navigate_user_cancel($edit, $account, $method) {
  db_delete('navigate_user_settings')
  ->condition('uid', $account->uid)
  ->execute();
  db_delete('navigate_widgets')
  ->condition('uid', $account->uid)
  ->execute();
}

/**
 * Uninstalls a module's widgets on module uninstall
 */
function navigate_uninstall_widget_module($module) {
  if (module_exists('navigate')) {
    $result = db_query("SELECT * FROM {navigate_widgets} WHERE module = :module", array(':module' => $module));
    foreach ($result as $row) {
      db_delete('navigate_user_settings')
      ->condition('wid', $row->wid)
      ->execute();
    }
    db_delete('navigate_widgets')
    ->condition('module', $module)
    ->execute();
    //db_query("DELETE FROM {navigate_cache} WHERE wid = '%s'", $module);
  }
}

/**
 * Implements hook_theme().
 */
function navigate_theme() {
  return array(
    'navigate_outer' => array(
      'variables' => array('output' => NULL),
    ),
    'navigate_widget_list_item' => array(
      'variables' => array('type' => NULL),
    ),
    'navigate_all_widgets' => array(
      'variables' => array('output' => NULL),
    ),
    'navigate' => array(
      'variables' => array('content' => NULL),
    ),
    'navigate_widget' => array(
      'variables' => array('content' => NULL, 'wid' => NULL, 'close_button_style' => NULL, 'type' => NULL),
    ),
    'navigate_widget_settings_button' => array(
      'variables' => array('wid' => NULL),
    ),
    'navigate_widget_settings' => array(
      'variables' => array('settings' => NULL, 'wid' => NULL),
    ),
    'navigate_link' => array(
      'variables' => array('menu_item' => NULL),
    ),
  );
}



/**
 * Renders an accordian-style display of content for longer widgets
 */
function navigate_accordian($accordian) {
  //static $i;
  //$i = isset($i) ? $i++ : 0;
  $output = '';
  foreach ($accordian as $item) {
    $hide = '';
    if (!isset($item['default'])) {
      $hide = ' style="display:none" ';
    }
    $output .= '
      <div class="navigate-accordian-item">
        <div class="navigate-accordian-title">' . t($item['title']) . '</div>
        <div class="navigate-accordian-content-outer"' . $hide . '>
          <div class="navigate-accordian-content">
            ' . $item['content'] . '
          </div>
        </div>
      </div>';
  }
  $output = '<div class="navigate-accordian">' . $output . '</div>';
  return $output;
}


/**
 * Duplicate a widget
 */
function navigate_duplicate_widget($wid, $uid) {
  $result = db_query("SELECT * FROM {navigate_widgets} WHERE wid = :wid", array(':wid' => $wid));
  if ($row = $result->fetchObject()) {
    $id = db_insert('navigate_widgets')
    ->fields(array(
      'uid' => $uid,
      'type' => $row->type,
      'module' => $row->module,
      'weight' => $row->weight,
    ))
    ->execute();
    $new_wid = $id;
    $function = $row->module . '_navigate_widgets';
    if (function_exists($function)) {
      $function('duplicate', array('wid' => $wid, 'type' => $row->type, 'new_wid' => $new_wid, 'uid' => $uid));
    }
  }
  return $new_wid;
}


/**
 * Set value for widget
 */
function navigate_widget_cache_set($wid, $name, $value) {
  $cid = $wid . ':' . $name;
  cache_set($cid, $value, 'cache_navigate');
}

/**
 * Get value for widget cache
 */
function navigate_widget_cache_get($wid, $name) {
  $cid = $wid . ':' . $name;
  $cache = cache_get($cid, 'cache_navigate');
  if ($cache && isset($cache->data)) {
    return $cache->data;
  }
  return FALSE;
}

/**
 * Save default widget set
 */
function navigate_export($uid) {
  $export = array();
  $widgets = array();
  $result = db_query("SELECT * FROM {navigate_widgets} WHERE uid = :uid ORDER BY weight ASC", array(':uid' => $uid));
  foreach ($result as $row) {
    $settings = array();
    $options = array();
    $settings_results = db_query("SELECT * FROM {navigate_user_settings} WHERE wid = :wid", array(':wid' => $row->wid));
    while ($setting = $settings_results->fetchObject()) {
      $settings[] = array(
        'name' => $setting->name,
        'value' => $setting->value,
      );
    }
    $function_name = $row->module . '_navigate_widgets';
    if (function_exists($function_name)) {
      $options = $function_name('export', array('wid' => $row->wid));
    }
    $widget = array(
      'module' => $row->module,
      'type' => $row->type,
      'weight' => $row->weight,
      'settings' => $settings,
      'options' => $options,
    );
    $widgets[] = $widget;
  }
  return $widgets;
}

/**
 * Import a widget set
 */
function navigate_import($export, $uid) {
  global $user;
  if (!user_access('navigate administer') && $uid != $user->uid) {
    return FALSE;
  }

  // Delete all current widgets for user
  $result = db_query("SELECT wid FROM {navigate_widgets} WHERE uid = :uid", array(':uid' => $uid));
  foreach ($result as $row) {
    navigate_widget_delete($row->wid, $uid);
  }

  // Run import
  foreach ($export as $widget) {
    $id = db_insert('navigate_widgets')
    ->fields(array(
      'uid' => $uid,
      'type' => $widget['type'],
      'module' => $widget['module'],
      'weight' => $widget['weight'],
    ))
    ->execute();
    $wid = $id;
    if (isset($widget['settings'])) {
      foreach ($widget['settings'] as $setting) {
        $id = db_insert('navigate_user_settings')
        ->fields(array(
          'wid' => $wid,
          'uid' => $uid,
          'name' => $setting['name'],
          'value' => $setting['value'],
        ))
        ->execute();
      }
    }
    if (isset($widget['options'])) {
      $function_name = $widget['module'] . '_navigate_widgets';
      if (function_exists($function_name)) {
        $function_name('import', array('wid' => $wid, 'uid' => $uid, 'options' => $widget['options']));
      }
    }
  }
}


/**
 * Menu callback; Retrieve a JSON object containing autocomplete suggestions for existing users.
 */
function navigate_user_autocomplete($string = '') {
  $matches = array();
  if ($string) {
    if (is_numeric($string)) {
      $result = db_query_range("SELECT name FROM {users} WHERE uid = :uid", array(':uid' => $string));
    }
    else {
      $result = db_select('users', 'u')->fields('u', array('name'))->condition('name', db_like($string) . '%', 'LIKE')->range(0, 10)->execute();
    }
    foreach ($result as $row) {
      $matches[$row->name] = $row->name;
    }
  }

  drupal_json_output($matches);
}

/**
 * Export a widget set
 */
function navigate_export_widget_set() {
  global $user;
  if (!user_access('navigate administer')) {
    return;
  }
  var_export(navigate_export($user->uid));
  die();
}

/**
 * Import a widget set
 */
function navigate_import_widget_set() {
  if (!user_access('navigate administer')) {
    return;
  }
  global $user;
  $import = eval('return ' . $_POST['import'] . ';');
  navigate_import($import, $user->uid);
  die();
}
