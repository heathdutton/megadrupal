<?php

/**
 * @file
 * Produces the Navigate Search widget
 */

/**
 * Implements hook_init().
 */
function navigate_search_init() {
  if (user_access('navigate_search search content') || user_access('navigate_search search menu')) {
    drupal_add_js(drupal_get_path('module', 'navigate_search') . '/navigate_search.js', array('scope' => 'footer'));
    drupal_add_css(drupal_get_path('module', 'navigate_search') . '/navigate_search.css');
  }
}


/**
 * Implements hook_navigation_widgets().
 */
function navigate_search_navigate_widgets($op, $settings = array()) {
  switch ($op) {
    case 'output':
      switch ($settings['type']) {
        case 'navigate_search':
          if (!user_access('navigate_search search content') && !user_access('navigate_search search menu')) {
            return FALSE;
          }
          return navigate_search_widget($settings['wid']);
        break;
      }
      break;

    case 'list':
      return array(
        array(
          'type' => 'navigate_search',
          'module' => 'navigate_search',
          'content' => navigate_add_widget_link('<div class="navigate-search-icon"></div>', ''),
        ),
      );
    break;
  }
}


/**
 * Generate search widget.
 */
function navigate_search_widget($wid) {
  $settings = navigate_widget_settings_get($wid);

  if (user_access('navigate_search search menu')) {
    $inputs['menu']  = navigate_button(array(
      'name' => 'menu',
      'content' => t('Menu'),
      'class' => 'navigate-search-menu',
      'default' => '1',
      'on' => 1,
      'off' => 0,
      'help' => 'When this is checked, searching will search menu items.',
      'wid' => $wid,
    ));
  }

  if (user_access('navigate_search search users')) {
    $inputs['users']  = navigate_button(array(
      'name' => 'users',
      'content' => t('Users'),
      'class' => 'navigate-search-users',
      'default' => '0',
      'on' => 1,
      'off' => 0,
      'help' => 'When this is checked, searching will search users.',
      'wid' => $wid,
    ));
  }

  if (user_access('navigate_search search content')) {
    $inputs['quick']  = navigate_button(array(
      'name' => 'type',
      'content' => t('Quick'),
      'class' => 'navigate-search-quick',
      'group' => 'navigate_search_type',
      'default' => 'quick',
      'help' => 'When selected, this will search titles for your search phrase.',
      'on' => 'quick',
      'wid' => $wid,
    ));
    $inputs['full']  = navigate_button(array(
      'name' => 'type',
      'content' => t('Full'),
      'class' => 'navigate-search-full',
      'group' => 'navigate_search_type',
      'default' => 'quick',
      'help' => 'When selected, the search will be done using the site\'s search functions. This means that you will need to run cron.php before this will return any results.',
      'on' => 'full',
      'wid' => $wid,
    ));
  }

  $inputs['search']  = navigate_input(array(
    'name' => 'search_phrase',
    'class' => 'navigate-search-phrase',
    'select_all' => TRUE,
    'callback' => 'navigate_search_process',
    'help' => 'Type a search phrase and press Enter to submit.',
    'wid' => $wid,
  ));

  $inputs['search_button'] = navigate_callback_button(array(
    'class' => 'navigate-search-submit',
    'callback' => 'navigate_search_process',
    'content' => '<div class="navigate-submit navigate-search-submit">' . t('Search') . '</div>',
    'help' => 'Click to run search.',
  ));

  // Get content types.
  $result = db_query('SELECT type FROM {node_type}');
  foreach ($result as $row) {
    $content_type_inputs[$row->type]  = navigate_button(array(
      'name' => 'content_type_' . $row->type,
      'content' => ucwords(str_replace('_', ' ', $row->type)),
      'class' => 'navigate-content-type-' . $row->type,
      'default' => 1,
      'on' => 1,
      'wid' => $wid,
    ));
  }

  // Get cache.
  $cache = navigate_widget_cache_get($wid, 'content');

  $variables = array();
  $variables['inputs'] = $inputs;
  $variables['content_type_inputs'] = $content_type_inputs;
  $variables['wid'] = $wid;
  $variables['cache'] = $cache;
  $output = theme('navigate_search_widget', $variables);
  return $output;
}


/**
 * Theme search widget.
 */
function theme_navigate_search_widget($variables) {
  $inputs = $variables['inputs'];
  $content_type_inputs = $variables['content_type_inputs'];
  $wid = $variables['wid'];
  $cache = $variables['cache'];
  // navigate_button('menu', t('menu'), 'navigate-search-menu', $wid).
  // Hide results if there's no cache.
  $hide = '';
  if (!$cache) {
    $hide = ' style="display:none" ';
  }

  $search_inputs = '';

  if (!user_access('navigate customize')) {
    $search_inputs = '<div style="display:none">' . $search_inputs . '</div>';
  }
  $menu = '';
  if (user_access('navigate_search search menu')) {
    $menu = '
      <div class="navigate-search-settings-row">
        <span class="navigate-search-content">' . t('Search menu') . ': </span>
        ' . $inputs['menu'] . '
      </div>';
  }
  $users = '';
  if (user_access('navigate_search search users')) {
    $users = '
      <div class="navigate-search-settings-row">
        <span class="navigate-search-content">' . t('Search users') . ': </span>
        ' . $inputs['users'] . '
      </div>';
  }

  $content['widget'] = '
    <div class="navigate-search-top-row navigate-shorten">
      <div class="navigate-search-input-outer">
        ' . $inputs['search_button'] . '
        ' . $inputs['search'] . '
      </div>
    </div>
    ' . $search_inputs . '
    <div ' . $hide . ' class="navigate-search-results navigate-results navigate-search-results-' . $wid . '">' . $cache . '</div>';
  $content['title'] = t('Search');
  $content_types = '';
  foreach ($content_type_inputs as $type) {
    $content_types .= '<div class="navigate-search-content-type">' . $type . '</div>';
  }
  $content['settings'] = '
    <div class="navigate-search-services navigate-shorten">
      <div class="navigate-search-settings-row">
        <span class="navigate-search-content">' . t('Search content') . ': </span>
        ' . $inputs['quick'] . '
        ' . $inputs['full'] . '
      </div>' . $menu . $users . '
    </div>
    <div class="navigate-widget-label">' . t('Content types to search') . ': <a href="javascript:;" class="content-type-search-all">' . t('All') . '</a><a href="javascript:;" class="content-type-search-none">' . t('None') . '</a>  </div><div class="navigate-search-content-types">' . $content_types . '</div>';

  return $content;
}


/**
 * Implements hook_permission().
 */
function navigate_search_permission() {
  return array(
    "navigate_search search content" => array(
      'title' => t("navigate_search search content"),
      'description' => t('search content navigate_search'),
    ),
    "navigate_search search menu" => array(
      'title' => t("navigate_search search menu"),
      'description' => t('search menu navigate_search'),
    ),
    "navigate_search search users" => array(
      'title' => t("navigate_search search users"),
      'description' => t('search users navigate_search'),
    ),
  );
}


/**
 * Implements hook_navigate_widget_process().
 */
function navigate_search_navigate_widget_process($wid, $action) {
  switch ($action) {
    case 'search':
      navigate_search_search();
      break;

    case 'search_content_type_all':
      navigate_search_select_all_types();
      break;
  }
}

/**
 * Select all or none for content type select.
 */
function navigate_search_select_all_types() {
  global $user;
  if (!$wid = db_query("SELECT wid FROM {navigate_widgets} WHERE wid = :wid AND uid = :uid", array(':wid' => $_POST['wid'], ':uid' => $user->uid))->fetchField()) {
    return FALSE;
  }
  $before = 0;
  $after = 1;
  if (isset($_POST['none'])) {
    $before = 1;
    $after = 0;
  }
  $settings = navigate_widget_settings_get($wid);
  foreach ($settings as $key => $val) {
    if (strpos($key, 'content_type_') !== FALSE && $val == $before) {
      navigate_variable_set(array(
        'name' => $key,
        'value' => $after,
        'wid' => $wid,
      ));
    }
  }
}


/**
 * Search content, menu, users.
 */
function navigate_search_search() {
  global $_navigate_search_matches;
  $output = '';
  $settings = navigate_widget_settings_get(check_plain($_POST['wid']));

  foreach ($settings as $key => $val) {
    if (strpos($key, 'content_type_') !== FALSE && $val == 1) {
      $types[] = str_replace('content_type_', '', $key);
    }
  }

  $phrase = check_plain($_POST['phrase']);

  if ($phrase == '') {
    navigate_widget_cache_set(check_plain($_POST['wid']), 'content', '');
    return FALSE;
  }

  // Quick content search.
  if (user_access('navigate_search search content')) {
    // Search content.
    if ($settings['type'] == 'quick') {
      $search_content = TRUE;

      // Search by title.
      $divider = '<div class="navigate-divider"> </div>';
      $and = '';
      $search_query = '';
      $search_array = explode(' ', $phrase);
      $ctr = 1;
      foreach ($search_array as $value) {
        // $search_query .= $and . " n.title LIKE '%%%s%' ";
        // $search_values[] = $value;
        $search_query .= $and . " n.title LIKE :title_$ctr ";
        $search_values[":title_$ctr"] = "%%$value%";
        $and = ' AND ';
        $ctr++;
      }

      // Get types.
      $or = '';
      $type_query = '';
      if (isset($types)) {
        $ctr = 1;
        foreach ($types as $type) {
          // $type_query .= $or . " n.type = '%s' ";
          // $search_values[] = $type;
          $type_query .= $or . " n.type = :type_$ctr ";
          $search_values[":type_$ctr"] = $type;
          $or = ' OR ';
          $ctr++;
        }
        if ($type_query) {
          $type_query = ' AND (' . $type_query . ') ';
        }
      }

      // Full query.
      if ($search_query) {
        $full_query = 'SELECT n.nid, n.title FROM {node} n WHERE (' . $search_query . ') ' . $type_query . ' ORDER BY n.changed DESC, n.title ASC';
      }
      // TODO Please convert this statement to the D7 database API syntax.
      // $result = db_query_range($full_query, $search_values);
      $result = db_query($full_query, $search_values);
      $content_matches = '';
      foreach ($result as $row) {
        $menu_item = array(
          'path' => 'node/' . $row->nid,
          'title' => $row->title,
        );
        $menu_item['wid'] = check_plain($_POST['wid']);
        $content_matches .= theme('navigate_link', array('menu_item' => $menu_item));
        $content_results = TRUE;
      }

      // Full content search.
    }
    elseif ($settings['type'] == 'full') {
      $search_content = TRUE;
      $content_matches = '';
      if (drupal_strlen($phrase) < 3) {
        $output .= '<div>' . t('Please enter a longer phrase') . '</div>';
        $divider = '<div class="navigate-divider"> </div>';
      }
      else {

        // Search using drupal search.
        $divider = '<div class="navigate-divider"> </div>';

        // Get types.
        $types_key = '';
        if (isset($types)) {
          $types_key = ' type:' . implode(',', $types);
        }

        // $phrase .= ' type:page ';
        $results = module_invoke('node', 'search_execute', $phrase . $types_key);
        foreach ($results as $result) {
          $menu_item = array(
            'path' => 'node/' . $result['node']->nid,
            'title' => $result['title'],
            'description' => '<div><span class="navigate-link-label">Type</span>: ' . $result['type'] . '</div>' . $result['snippet'],
          );
          $menu_item['wid'] = check_plain($_POST['wid']);
          $content_matches .= theme('navigate_link', array('menu_item' => $menu_item));
          $content_results = TRUE;
        }
      }
    }

    // $output = '';
    if (isset($search_content)) {
      if (!isset($content_results)) {
        $output .= '<div>' . t('No content results') . '</div>';
      }
      else {
        $output .= '<div class="navigate-widget-label">Content matches:</div>' . $content_matches;
      }
    }
  }

  // Search menu items.
  if (user_access('navigate_search search menu')) {
    // Search menu.
    if ($settings['menu'] == 1) {
      $divider = '<div class="navigate-divider"> </div>';
      if (isset($divider)) {
        $output .= $divider;
      }
      navigate_search_menu_tree();
      $_navigate_search_matches = navigate_devel_menu($_navigate_search_matches);
      $phrase_array = explode(' ', $phrase);
      $menu_matches = '';
      foreach ($_navigate_search_matches as $menu_item) {
        $menu_item['description'] = isset($menu_item['description']) ? $menu_item['description'] : '';
        $searchable = $menu_item['title'] . ' ' . $menu_item['path'] . ' ' . $menu_item['description'];
        $match = 1;
        foreach ($phrase_array as $phrase) {
          if (stripos($searchable, $phrase, 0) === FALSE) {
            $match = 0;
          }
        }
        if ($match != 0) {
          $menu_item['wid'] = check_plain($_POST['wid']);
          $menu_matches .= theme('navigate_link', array('menu_item' => $menu_item));
          $menu_results = TRUE;
        }
      }
      if (!isset($menu_results)) {
        $output .= '<div>' . t('No menu results') . '</div>';
      }
      else {
        $output .= '<div class="navigate-widget-label">Menu matches:</div>' . $menu_matches;
      }
    }
  }

  // Search users.
  if (user_access('navigate_search search users')) {
    if ($settings['users'] == 1) {
      if (isset($divider)) {
        $output .= $divider;
      }
      $matches = '';
      $result = db_query_range("SELECT uid, name FROM {users} WHERE (uid = :uid OR name LIKE :name) AND uid <> 0", 0, 10, array(':uid' => $phrase, ':name' => "%%$phrase%"));
      foreach ($result as $row) {
        $matches .= theme('navigate_search_link', array('uid' => $row->uid, 'username' => $row->name));
      }
      if ($matches == '') {
        $output .= '<div>' . t('No user results') . '</div>';
      }
      else {
        $output .= '<div class="navigate-widget-label">User matches:</div>' . $matches;
      }
    }
  }
  navigate_widget_cache_set(check_plain($_POST['wid']), 'content', $output);

  echo $output;
}


/**
 * Themes a link.
 */
function theme_navigate_search_link($variables) {
  $uid = $variables['uid'];
  $username = $variables['username'];
  $char_count = 22;
  if (drupal_strlen($username) > $char_count) {
    $title = drupal_substr($username, 0, $char_count - 3) . '...';
  }
  else {
    $title = $username;
  }
  return '<div class="navigate-link" title="' . $username . '">' . l(t($title), 'user/' . $uid) . ' <span class="navigate-search-user-edit">' . l(t('e'), 'user/' . $uid . '/edit') . '</span></div>';
}


/**
 * Creates an array of all menu items.
 */
function navigate_search_menu_tree($data = '') {
  global $_navigate_search_matches;
  if (!$data) {
    $data = menu_tree_all_data('management');
  }

  foreach ($data as $key => $data) {
    if ($data['link']["hidden"] == 0) {
      $_navigate_search_matches[] = array(
        'title' => $data['link']["title"],
        'path' => $data['link']['href'],
        'description' => $data['link']['description'],
      );
      navigate_search_sub_tree($data);
    }
  }
}


/**
 * Used with navigate_search_menu_tree to iterate through menu.
 */
function navigate_search_sub_tree($data) {
  if ($data['below']) {
    $content = navigate_search_menu_tree($data['below']);
  }
}


/**
 * Implements hook_navigate_help_page().
 */
function navigate_search_navigate_help_page() {
  $help['access'] = FALSE;
  if (user_access('navigate_search search content') || user_access('navigate_search search menu')) {
    $help['access'] = TRUE;
  }
  $help['content'] = t("<p>The Search widget allows a user to search content and / or menu items. To use, type a word or two in the search box, and then presses enter or click the search icon to conduct the search. You can use partial words in your search as well. Here's a quick rundown of the settings:</p>
<ul>
  <li><strong>Quick</strong>: Search content by title. It's quick and doesn't require that you have the search module installed or set up.</li>
  <li><strong>Full</strong>: Uses the search module to conduct a site search. A more powerful search mechanism, but might not be up to date if you haven't run cron recently.</li>
  <li><strong>Menu</strong>: Searches the menu for the keywords chosen.</li>
  <li><strong>Advanced settings</strong>: You can select which content types to search in the advanced settings pane.</li>
</ul>
  <p>Press CTL+SHIFT+S to focus on the search bar, even if Navigate is hidden.</p>");
  $help['title'] = 'Search';
  return $help;
}


/**
 * Implements hook_theme().
 */
function navigate_search_theme() {
  return array(
    'navigate_search_widget' => array(
      'variables' => array(
        'inputs' => NULL,
        'content_type_inputs' => NULL,
        'wid' => NULL,
        'cache' => NULL,
      ),
    ),
    'navigate_search_link' => array(
      'variables' => array('uid' => NULL, 'username' => NULL),
    ),
  );
}

/**
 * Define stripos for php 4.
 */
if (!function_exists('stripos')) {
  function stripos($haystack, $needle) {
    return strpos($haystack, stristr($haystack, $needle));
  }
}
