<?php

/**
 * @file
 * Module: 'urlrouter'
 *
 * Maintain a list of source and destination URL's
 * for which redirects (301 or 302) will be performed.
 * Source URL is absolute, destination URL
 * may be a path, or another absolute URL.
 *
 * Source-destination URL pairs are stored in the
 * variable 'urlrouter_array' as an associative array.
 * The actual redirect takes place in hook_boot(), so
 * that URL routing takes place as quickly as possible.
 */

/**
 * Implements hook_permission().
 */
function urlrouter_permission() {
  return array(
    'administer url router' => array(
      'title' => t('Administer URL router'),
    ),
  );
}

/**
 * Implements hook_menu().
 *
 * establish path to access form and required permission
 */
function urlrouter_menu() {
  return array(
    'admin/config/search/urlrouter' => array(
      'title' => "URL router",
      'description' => "Maintain a list of source and destination URL's for which redirects will be performed.",
      'page callback' => "drupal_get_form",
      'page arguments' => array("urlrouter_form"),
      'access arguments' => array("administer url router"),
      'weight' => -5,
    ),
  );
}

/**
 * Implements hook_form().
 *
 * primary form, in three parts; add new, filter by substring, list defined
 * source/destination URL pairs; if "Delete Selected" button was clicked,
 * use form generated by urlrouter_delete_confirm() instead
 */
function urlrouter_form($form, &$form_state) {
  if ($form_state && isset($form_state['values']['op']) && $form_state['values']['op'] == "Delete Selected") {
    $form = urlrouter_delete_confirm($form, $form_state);
    if (count($form) != 0) {
      return $form;
    }
  }
  $form = array();
  $form['urlrouter_add'] = array(
    '#type' => "fieldset",
    '#title' => t("Add URL Route"),
    '#description' => t("To create a new route, enter its full source URL below, beginning with <strong>http://</strong> or <strong>https://</strong>.<br />&nbsp;<br />&nbsp;"),
    '#attributes' => array('class' => array("container-inline")),
    'add_url' => array(
      '#type' => "textfield",
      '#size' => 100,
      '#maxlength' => 255,
      '#default_value' => "",
      '#required' => FALSE,
    ),
    'actions' => array(
      'submit' => array(
        '#type' => "submit",
        '#value' => t("Add"),
        '#validate' => array("urlrouter_add_validate"),
        '#submit' => array("urlrouter_add_submit"),
      ),
    ),
  );
  $urlrouter = variable_get("urlrouter_array", array());
  $urls = array_keys($urlrouter);
  if (count($urls) != 0) {
    $form['urlrouter_add']['#collapsible'] = TRUE;
    $form['urlrouter_add']['#collapsed'] = TRUE;
    $filter = (isset($_SESSION['urlrouter_filter']) ? $_SESSION['urlrouter_filter'] : "");
    $_SESSION['urlrouter_filter'] = trim(preg_replace("/[^a-z0-9\x5f]/", "", drupal_strtolower($filter)));
    $element = array();
    $element['submit'] = array(
      '#type' => "submit",
      '#value' => t("Filter"),
      '#submit' => array("urlrouter_filter_submit"),
    );
    if ($filter != "") {
      $element['reset'] = array(
        '#type' => "submit",
        '#value' => t("Reset"),
        '#submit' => array("urlrouter_filter_submit"),
      );
    }
    $form['urlrouter_filter'] = array(
      '#type' => "fieldset",
      '#title' => t("Filter by substring"),
      '#description' => t("To limit the listing below to URLs containing a particular string, enter it below and click <strong>Filter</strong>."),
      '#attributes' => array('class' => array("container-inline")),
      'url_substring' => array(
        '#type' => "textfield",
        '#size' => 25,
        '#maxlength' => 100,
        '#default_value' => $_SESSION['urlrouter_filter'],
        '#required' => FALSE,
      ),
      'actions' => $element,
    );
    if ($filter != "") {
      $form['urlrouter_filter']['#title'] .= t(": <em>@filter</em>", array('@filter' => $filter));
      $form['urlrouter_filter']['#description'] .= t("<br />Or, click <strong>Reset</strong> to list all URLs.");
    }
    $form['urlrouter_filter']['#description'] .= "<br />&nbsp;<br />&nbsp;";
    $rows = array();
    $num = 0;
    foreach ($urls as $url) {
      if ($filter == "" || strpos($url, $filter) !== FALSE) {
        $dest = $urlrouter[$url];
        $perm = (substr($dest, 0, 1) == "!" ? TRUE : FALSE);
        if ($perm) {
          $dest = substr($dest, 1);
        }
        $rows[$url] = array(
          'url' => t("<strong>@url</strong>", array('@url' => $url)),
          'dest' => array(
            'data' => array(
              '#name' => ("dest_" . $num),
              '#type' => "textfield",
              '#size' => 100,
              '#maxlength' => 255,
              '#value' => $dest,
              '#required' => FALSE,
            ),
          ),
          'perm' => array(
            'data' => array(
              '#name' => ("perm_" . $num),
              '#type' => "checkbox",
              '#value' => 1,
              '#required' => FALSE,
            ),
          ),
        );
        if ($perm) {
          $rows[$url]['perm']['data']['#attributes'] = array('checked' => "checked");
        }
      }
      $num++;
    }
    $form['urlrouter_list'] = array(
      '#type' => "fieldset",
      '#title' => t("URL Routes"),
      '#description' => t("To remove URLs, select one or more of them and click <strong>Delete Selected</strong>.<br />Or, modify destinations for all defined routes, then click <strong>Save Changes</strong>.<br/ >&nbsp;"),
      'edit_urls' => array(
        '#type' => "tableselect",
        '#header' => array(
          'url' => t("Source URL"),
          'dest' => t("Destination Path/URL"),
          'perm' => t("Permanent (301)?"),
        ),
        '#options' => $rows,
        '#empty' => t("No routes"),
      ),
    );
    if ($filter != "") {
      $form['urlrouter_list']['#title'] .= t("@spacecontaining substring: <em>@filter</em>", array('@filter' => $filter, '@space' => " "));
      $form['urlrouter_list']['edit_urls']['#empty'] .= t("@spacecontaining substring <strong><em>@filter</em></strong>", array('@filter' => $filter, '@space' => " "));
    }
    if (count($rows) != 0) {
      $form['urlrouter_filter']['#collapsible'] = TRUE;
      $form['urlrouter_filter']['#collapsed'] = TRUE;
      $form['urlrouter_list']['actions'] = array(
        'delete' => array(
          '#type' => "button",
          '#value' => t("Delete Selected"),
          '#submit' => array("urlrouter_form"),
        ),
        'submit' => array(
          '#type' => "submit",
          '#value' => t("Save Changes"),
          '#submit' => array("urlrouter_update_submit"),
        ),
      );
    }
  }
  return $form;
}

/**
 * Callback for urlrouter_form().
 *
 * handle "Add" validation; enforce valid URL via regex,
 * and make sure URL has not already been added
 */
function urlrouter_add_validate(&$form, &$form_state) {
  if (isset($form_state['values']['add_url'])) {
    $url_new = trim($form_state['values']['add_url']);
    if (substr($url_new, -1, 1) == "/") {
      $url_new = substr($url_new, 0, -1);
    }
    $form['urlrouter_add']['add_url']['#value'] = $url_new;
    if (!valid_url($url_new, TRUE)) {
      form_set_error("add_url", t("URL <strong>@url</strong> is not valid.", array('@url' => $url_new)));
    }
    else {
      if (array_key_exists($url_new, variable_get("urlrouter_array", array()))) {
        form_set_error("add_url", t("URL Route <strong>@url</strong> already exists.", array('@url' => $url_new)));
      }
    }
  }
}

/**
 * Callback for urlrouter_form().
 *
 * handle "Add" submit; create new url route
 * in 'urlrouter_array', with no destination
 */
function urlrouter_add_submit(&$form, &$form_state) {
  if (isset($form_state['input']['add_url'])) {
    $url_new = trim($form_state['input']['add_url']);
    if (substr($url_new, -1, 1) == "/") {
      $url_new = substr($url_new, 0, -1);
    }
    if ($url_new != "") {
      $urlrouter = array();
      foreach (variable_get("urlrouter_array", array()) as $url => $dest) {
        $parts = explode("://", $url);
        $urlrouter[$parts[1] . "_" . $parts[0]] = array($url, $dest);
      }
      $parts = explode("://", $url_new);
      $urlrouter[$parts[1] . "_" . $parts[0]] = array($url_new, "");
      ksort($urlrouter);
      $urlrouter_new = array();
      foreach ($urlrouter as $urlkey => $parts) {
        $urlrouter_new[$parts[0]] = $parts[1];
      }
      variable_set("urlrouter_array", $urlrouter_new);
      $msg = t("URL Route <strong>@url</strong> created.", array('@url' => $url_new));
      drupal_set_message($msg);
      watchdog("urlrouter", $msg, NULL, WATCHDOG_INFO);
    }
  }
}

/**
 * Callback for urlrouter_form().
 *
 * handle "Filter" submit; store 'substring' textfield entry in $_SESSION
 */
function urlrouter_filter_submit(&$form, &$form_state) {
  if (isset($form_state['input']['url_substring']) && isset($form_state['input']['op'])) {
    $_SESSION['urlrouter_filter'] = ($form_state['input']['op'] == "Filter" ? trim(preg_replace("/[^a-z0-9\x5f]/", "", drupal_strtolower($form_state['input']['url_substring']))) : "");
  }
}

/**
 * Callback for urlrouter_form().
 *
 * handle "Delete Selected" button;
 * return array re-formatted by confirm_form()
 */
function urlrouter_delete_confirm(&$form, &$form_state) {
  $urls = array();
  foreach ($form_state['input']['edit_urls'] as $url => $dest) {
    if ($url === $dest) {
      $urls[] = $dest;
    }
  }
  if (count($urls) != 0) {
    $form = array(
      'delete_urls' => array(
        '#prefix' => "<ul>",
        '#suffix' => "</ul>",
        '#tree' => TRUE,
      ),
    );
    foreach ($urls as $url) {
      $form['delete_urls'][$url] = array(
        '#type' => "hidden",
        '#value' => $url,
        '#prefix' => "<li>",
        '#suffix' => (check_plain($url) . "</li>"),
      );
    }
    $form['#submit'] = array("urlrouter_delete_confirm_submit");
    return confirm_form(
      $form,
      t("Are you sure you want to delete @plural?", array('@plural' => (count($urls) != 1 ? "these routes" : "this route"))),
      "admin/config/system/urlrouter",
      NULL,
      t("Delete")
    );
  }
  return array();
}

/**
 * Callback for urlrouter_delete_confirm().
 *
 * handle "Delete" submit in confirmation form;
 * unset keys in 'urlrouter_array'
 */
function urlrouter_delete_confirm_submit(&$form, &$form_state) {
  if (isset($form_state['input']['delete_urls'])) {
    $urls = array();
    foreach ($form_state['input']['delete_urls'] as $url => $dest) {
      if ($url === $dest) {
        $urls[] = $dest;
      }
    }
    if (count($urls) != 0) {
      $urlrouter = variable_get("urlrouter_array", array());
      $num = 0;
      $list = "";
      foreach ($urls as $url) {
        unset($urlrouter[$url]);
        $num++;
        $list .= (($num != 1 ? ($num == count($urls) ? " and " : ", ") : "") . "<strong>" . check_plain($url) . "</strong>");
      }
      variable_set("urlrouter_array", $urlrouter);
      $msg = t("@plural !list deleted.", array('@plural' => "URL Route" . (count($urls) != 1 ? "s" : ""), '!list' => $list));
      drupal_set_message($msg, "warning");
      watchdog("urlrouter", $msg, NULL, WATCHDOG_NOTICE);
    }
  }
}

/**
 * Callback for urlrouter_form().
 *
 * handle "Save Changes" submit;
 * update destinations in 'urlrouter_array'
 */
function urlrouter_update_submit(&$form, &$form_state) {
  if (isset($form_state['input']['edit_urls'])) {
    $urlrouter = variable_get("urlrouter_array", array());
    $urls = array();
    $num = 0;
    foreach (array_keys($form_state['input']['edit_urls']) as $url) {
      if (array_key_exists($url, $urlrouter) && array_key_exists("dest_" . $num, $form_state['input'])) {
        $dest = trim($form_state['input']["dest_" . $num]);
        if (strpos($dest, "://") === FALSE && substr($dest, 0, 1) != "/") {
          $dest = "/" . $dest;
        }
        if (array_key_exists("perm_" . $num, $form_state['input'])) {
          $dest = "!" . $dest;
        }
        if ($dest != $urlrouter[$url]) {
          $urlrouter[$url] = $dest;
          $urls[] = $url;
        }
      }
      $num++;
    }
    if (count($urls) != 0) {
      $num = 0;
      $list = "";
      foreach ($urls as $url) {
        $num++;
        $list .= (($num != 1 ? ($num == count($urls) ? " and " : ", ") : "") . "<strong>" . check_plain($url) . "</strong>");
      }
      variable_set("urlrouter_array", $urlrouter);
      $msg = t("@plural !list updated.", array('@plural' => "URL Route" . (count($urls) != 1 ? "s" : ""), '!list' => $list));
      drupal_set_message($msg);
      watchdog("urlrouter", $msg, NULL, WATCHDOG_INFO);
    }
  }
}

/**
 * Implements hook_boot().
 *
 * if a route in urlrouter_array exactly matches incoming url,
 * issue headers for 301 or 302 status, and location for
 * destination url, and terminate immediately
 */
function urlrouter_boot() {
  $root = "http" . (array_key_exists("HTTPS", $_SERVER) && $_SERVER['HTTPS'] != "" && $_SERVER['HTTPS'] != "off" ? "s" : "") . "://" . $_SERVER['SERVER_NAME'];
  $request = $root . request_uri();
  if (substr($request, -1, 1) == "/") {
    $request = substr($request, 0, -1);
  }
  foreach (variable_get("urlrouter_array", array()) as $url => $dest) {
    if ($url == $request) {
      $perm = (substr($dest, 0, 1) == "!" ? TRUE : FALSE);
      if ($perm) {
        $dest = substr($dest, 1);
      }
      if (strpos($dest, "://") === FALSE) {
        $dest = $root . $dest;
      }
      header("HTTP/1.1 " . ($perm ? "301 Moved Permanently" : "302 Found"));
      header("Location: " . $dest);
      die();
    }
  }
}
