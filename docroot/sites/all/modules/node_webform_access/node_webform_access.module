<?php
/**
 * @file
 * Module that makes a node inherit access limitations configured in the webform
 * component of the node.
 */

/**
 * Implements hook_node_access().
 * Checks the node for webform components and grants access based on user roles
 * and configured role access in webform.
 */
function node_webform_access_node_access($node, $op, $account) {
  // Only do something when a node is viewed.
  if ($op == 'view') {
    // Check if the node has webform components enabled and if the webform
    // component of the node is actually used (are there any inputs defined).
    if (isset($node->webform) && !empty($node->webform['components'])) {
      // By default deny access.
      $access = FALSE;
      // Get the role ids of the user.
      $role_ids = array_keys($account->roles);
      foreach ($role_ids as $role_id) {
        // If one of the roles of the user is configured to have access to the
        // webform, allow access.
        if (in_array($role_id, array_values($node->webform['roles']))) {
          $access = TRUE;
        }
        if ($access) {
          return NODE_ACCESS_ALLOW;
        }
        else {
          return NODE_ACCESS_DENY;
        }
      }
    }
  }
  return NODE_ACCESS_IGNORE;
}

/**
 * Implements node_form_FORM_ID_alter().
 * Removes the remark about submission access only affecting the webform
 * component of a node, since the node now inherits the access permissions of
 * the webform component.
 */
function node_webform_access_form_webform_configure_form_alter(&$form, &$form_state, $form_id) {
  unset($form['role_control']['#description']);
}
