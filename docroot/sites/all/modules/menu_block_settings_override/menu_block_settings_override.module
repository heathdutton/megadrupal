<?php

/**
 * Implements hook_menu().
 */
function menu_block_settings_override_menu() {
  $items['admin/config/user-interface/menu-block-settings-override'] = array(
    'title' => 'Menu block settings override',
    'description' => 'Override settings for menu block',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('menu_block_settings_override_settings_form'),
    'access callback' => 'menu_block_access',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Form callback for admin screen.
 */
function menu_block_settings_override_settings_form($form, &$form_state) {
  module_load_include('inc', 'menu_block', 'menu_block.admin');
  $menu_block_form = _menu_block_block_configure();
  // Form keys of the settings which can be hidden.
  $hideable_settings = array(
    'menu_name',
    'level',
    'follow',
    'follow_parent',
    'depth',
    'expanded',
    'sort',
    'parent',
    'relative',
  );
  $options = array();
  foreach ($menu_block_form as $key => $option) {
    if (isset($menu_block_form[$key]['#title']) && in_array($key, $hideable_settings)) {
      $options[$key] = $menu_block_form[$key]['#title'];
    }
  }
  // Load all menu blocks.
  $blocks = _menu_block_block_info();
  $blocks_options = array();
  if (!empty($blocks)) {
    foreach ($blocks as $delta => $block) {
      $blocks_options['delta_' . $delta] = $block['info'];
    }
    $form['menu_block_settings_override_blocks_enabled'] = array(
      '#title' => t('Enable per-page Menu block settings overrides for the following blocks:'),
      '#type' => 'checkboxes',
      '#options' => $blocks_options,
      '#default_value' => variable_get('menu_block_settings_override_blocks_enabled', array()),
    );
  }
  $form['menu_block_settings_override_hidden_settings'] = array(
    '#title' => t('Hide the following settings on the per-page settings:'),
    '#type' => 'checkboxes',
    '#options' => $options,
    '#default_value' => variable_get('menu_block_settings_override_hidden_settings', array()),
  );
  return system_settings_form($form);
}

/**
 * Implements hook_permission().
 */
function menu_block_settings_override_permission() {
  return array(
    'override menu block settings' => array(
      'title' => t('Override menu block settings'),
      'description' => t('Override menu block settings on specific pages.'),
    ),
  );
}

/**
 * Implements hook_field_attach_form().
 */
function menu_block_settings_override_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {
  if (!user_access('override menu block settings')) {
    // User does not have the correct permission.
    return;
  }
  // Show settings on node edit page.
  list($id) = entity_extract_ids($entity_type, $entity);
  if (empty($id)) {
    // We don't know the path yet.
    return;
  }
  if ($entity_type != 'node') {
    // Entity types such as Bean/Field collection item can be problematic. Only
    // allow nodes for now.
    return;
  }
  // Get the Menu blocks which we want to be able to override.
  $blocks_enabled = variable_get('menu_block_settings_override_blocks_enabled', array());
  $blocks = menu_block_block_info();
  foreach ($blocks_enabled as $value) {
    if (empty($value)) {
      continue;
    }
    $delta = str_replace('delta_', '', $value);

    if (!empty($form['menu_block_settings_override_' . $delta])) {
      // Form has already been built.
      return;
    }
    if (!in_array($delta, array_keys($blocks))) {
      continue;
    }
    if (!_menu_block_settings_override_visible($delta)) {
      continue;
    }

    $info = entity_get_info($entity_type);
    $form['menu_block_settings_override_' . $delta] = array(
      '#type' => 'fieldset',
      '#title' => t('Menu block settings: !title', array('!title' => $blocks[$delta]['info'])),
      '#attributes' => array('class' => array('menu-block-settings-override-form')),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#access' => user_access('override menu block settings'),
      '#weight' => 40,
      '#tree' => TRUE,
    );

    // Only support vertical tabs if there is a vertical tab element.
    foreach (element_children($form) as $key) {
      if (isset($form[$key]['#type']) && $form[$key]['#type'] == 'vertical_tabs') {
        $form['menu_block_settings_override_' . $delta]['#group'] = $key;
        $form['menu_block_settings_override_' . $delta]['#attached']['js']['vertical-tabs'] = drupal_get_path('module', 'menu_block_settings_override') . '/menu_block_settings_override.js';
      }
    }
    $path = rtrim(current_path(), '/edit');
    $record = db_select('menu_block_settings_override', 'm')
      ->fields('m')
      ->condition('delta', $delta)
      ->condition('path', $path)
      ->execute()
      ->fetchAssoc();

    $form['menu_block_settings_override_' . $delta]['hidden'] = array(
      '#type' => 'checkbox',
      '#title' => t('Hide Menu block %title on this page', array('%title' => $blocks[$delta]['info'])),
      '#default_value' => isset($record['hidden']) ? $record['hidden'] : 0,
    );
    $form['menu_block_settings_override_' . $delta]['settings_status_' . $delta] = array(
      '#type' => 'checkbox',
      '#title' => t('Override Menu block settings for %title on this page', array('%title' => $blocks[$delta]['info'])),
      '#default_value' => isset($record['status']) ? $record['status'] : 0,
    );
    module_load_include('inc', 'menu_block', 'menu_block.admin');
    $menu_block_form = _menu_block_block_configure($delta);
    // Change the div ID as we can now have multiple on one page.
    $menu_block_form['menu-block-wrapper-start']['#markup'] = '<div id="menu-block-settings-' . $delta . '">';
    $hidden_settings = array_filter(variable_get('menu_block_settings_override_hidden_settings', array()));
    $hidden_settings[] = 'admin_title';
    foreach ($menu_block_form as $key => $form_element) {
      if (isset($form_element['#states']['visible'][':input[name=display_options]']['value']) && $form_element['#states']['visible'][':input[name=display_options]']['value'] == 'advanced') {
        unset($menu_block_form[$key]['#states']['visible'][':input[name=display_options]']);
        $menu_block_form[$key]['#states']['visible'][':input[name="menu_block_settings_override_' . $delta . '[custom_settings][display_options]"]'] = array('value' => 'advanced');
      }
      if (in_array($key, $hidden_settings)) {
        // Hide the form element.
        $menu_block_form[$key]['#access'] = FALSE;
        // Make conditional checkboxes visible.
        if (!empty($menu_block_form[$key]['#default_value'])) {
          foreach ($menu_block_form as $key2 => $form_element2) {
            if (!empty($form_element2['#states']['visible'][':input[name=' . $key . ']']['checked'])) {
              unset($menu_block_form[$key2]['#states']['visible'][':input[name=' . $key . ']']);
            }
          }
        }
      }
      if (!empty($form_element['#element_validate'])) {
        // Use our custom callback.
        $form['#menu_block_settings_override_callback'][$key] = $form_element['#element_validate'];
        $menu_block_form[$key]['#element_validate'] = array('menu_block_settings_override_menu_block_validate');
      }
    }
    $form['menu_block_settings_override_' . $delta]['custom_settings'] = $menu_block_form;
    $form['menu_block_settings_override_' . $delta]['custom_settings'] += array(
      '#type' => 'fieldset',
      '#title' => t('Menu block custom settings: %title', array('%title' => $blocks[$delta]['info'])),
      '#states' => array(
        'visible' => array(
          ':input[name="menu_block_settings_override_' . $delta . '[settings_status_' . $delta . ']"]' => array('checked' => TRUE),
        ),
      ),
    );
  }
  $form['#submit'][] = 'menu_block_settings_override_submit_handler';
}

/**
 * Loop through enabled themes and check if menu block is visible in any of
 * them.
 *
 * @return bool
 */
function _menu_block_settings_override_visible($delta) {
  $path = _menu_block_settings_override_path();
  $themes = list_themes();
  $themes_enabled = array();
  foreach ($themes as $theme) {
    if ($theme->status == 1) {
      $themes_enabled[] = $theme->name;
    }
  }
  $blocks = db_query('SELECT * FROM {block} WHERE module = :module AND delta = :delta AND theme IN (:themes)', array(
    ':module' => 'menu_block',
    ':delta' => $delta,
    ':themes' => $themes_enabled,
  ))->fetchAll();
  $has_visible = FALSE;
  foreach ($blocks as $block) {
    // Check if block is visible on this page
    if ($block->status == 1) {
      $has_visible = TRUE;
      break;
    }
  }
  if (!$has_visible) {
    // Block disabled in all themes.
    return FALSE;
  }
  // Check content type
  $node = menu_get_object();
  if (!empty($node->nid)) {
    $content_types = db_query("SELECT type FROM {block_node_type} WHERE module = :module AND delta = :delta", array(
      ':module' => 'menu_block',
      ':delta' => $delta,
    ))->fetchCol();
    if (!empty($content_types) && !in_array($node->type, $content_types)) {
      return FALSE;
    }

    // Check language
    if (module_exists('i18n_block')) {
      $languages = db_query("SELECT language FROM {i18n_block_language} WHERE module = :module AND delta = :delta", array(
        ':module' => 'menu_block',
        ':delta' => $delta,
      ))->fetchCol();
      if ($node->language != LANGUAGE_NONE) {
        if (!empty($languages) && !in_array($node->language, $languages)) {
          return FALSE;
        }
      }
    }
  }

  // Check path.
  // @see block_block_list_alter
  if ($block->pages) {
    // Convert path to lowercase. This allows comparison of the same path
    // with different case. Ex: /Page, /page, /PAGE.
    $pages = drupal_strtolower($block->pages);
    if ($block->visibility < BLOCK_VISIBILITY_PHP) {
      // Convert the Drupal path to lowercase
      $path = drupal_strtolower(drupal_get_path_alias(_menu_block_settings_override_path()));
      // Compare the lowercase internal and lowercase path alias (if any).
      $page_match = drupal_match_path($path, $pages);
      if ($path != _menu_block_settings_override_path()) {
        $page_match = $page_match || drupal_match_path(_menu_block_settings_override_path(), $pages);
      }
      // When $block->visibility has a value of 0 (BLOCK_VISIBILITY_NOTLISTED),
      // the block is displayed on all pages except those listed in $block->pages.
      // When set to 1 (BLOCK_VISIBILITY_LISTED), it is displayed only on those
      // pages listed in $block->pages.
      $page_match = !($block->visibility xor $page_match);
    }
    elseif (module_exists('php')) {
      $page_match = php_eval($block->pages);
    }
    else {
      $page_match = FALSE;
    }
  }
  else {
    $page_match = TRUE;
  }
  if ($page_match == FALSE) {
    return FALSE;
  }
  // Block is visible in one of the themes.
  return TRUE;
}

/**
 * Returns the path to the node we are editing.
 */
function _menu_block_settings_override_path() {
  return rtrim(current_path(), '/edit');
}

/**
 * Submit callback for menu settings.
 */
function menu_block_settings_override_submit_handler($form, &$form_state) {
  $hidden_settings = array_filter(variable_get('menu_block_settings_override_hidden_settings', array()));
  $hidden_settings[] = 'admin_title';
  $valid_settings = array_keys(menu_block_get_config());
  if (!in_array('follow_parent', $hidden_settings)) {
    // If follow_parent can be changed, follow can be changed.
    $hidden_settings = array_diff($hidden_settings, array('follow'));
  }
  foreach ($form_state['values'] as $key => $value) {
    if (strstr($key, 'menu_block_settings_override_')) {
      $delta = str_replace('menu_block_settings_override_', '', $key);
      $config = array();
      $hidden = $form_state['values'][$key]['hidden'];
      $status = $form_state['values'][$key]['settings_status_' . $delta];
      if (!empty($form_state['values'][$key]['custom_settings'])) {
        foreach ($form_state['values'][$key]['custom_settings'] as $name => $setting) {
          if (in_array($name, $valid_settings) && !in_array($name, $hidden_settings)) {
            $config[$name] = $setting;
          }
        }
        $path = _menu_block_settings_override_path();
      }
      // Values of the record to be created/updated.
      $record = array(
        'config' => $config,
        'path' => $path,
        'delta' => $delta,
        'hidden' => $hidden,
        'status' => $status,
      );
      // Check if record already exists so as to decide whether to update or
      // insert.
      $is_existing_record = db_query("SELECT 1 FROM {menu_block_settings_override} WHERE path = :path AND delta = :delta", array(
        ':path' => $path,
        ':delta' => $delta,
      ))->fetchField();
      if ($is_existing_record) {
        // UPDATE.
        $update = array('path', 'delta');
      }
      else {
        // INSERT.
        $update = array();
      }
      drupal_write_record('menu_block_settings_override', $record, $update);
    }
  }
}

/**
 * Alters menu_block_config().
 */
function menu_block_settings_override_menu_block_config_alter(&$configs, $delta) {
  $current_path = current_path();
  $path = _menu_block_settings_override_path();
  $query = db_select('menu_block_settings_override', 'm')
    ->fields('m', array('config', 'status'))
    ->condition('path', $path)
    ->condition('delta', $delta);
  // If we are viewing a non-"edit" page, check if the override is enabled.
  if (stripos(strrev($current_path), strrev('/edit')) !== 0) {
    // We are on a non-edit page as the URL does not end in "/edit".
    $query->condition('status', 1);
  }
  $result = $query->execute();
  $settings = $result->fetchField();
  if (!empty($settings)) {
    foreach (unserialize($settings) as $key => $value) {
      // Override the setting.
      $configs[$delta][$key] = $value;
    }
    list($configs[$delta]['menu_name'], $configs[$delta]['parent_mlid']) = explode(':', $configs[$delta]['parent']);
  }
}


/**
 * Implements hook_block_list_alter().
 *
 * Checks the node-specific visibility settings.
 * Removes the block if the visibility conditions are not met.
 */
function menu_block_settings_override_block_list_alter(&$blocks) {
  $path = current_path();
  foreach ($blocks as $bid => $block) {
    if ($block->module == 'menu_block') {
      $hidden = db_select('menu_block_settings_override', 'm')
        ->fields('m', array('hidden'))
        ->condition('path', $path)
        ->condition('delta', $block->delta)
        ->execute()
        ->fetchField();
      if (!empty($hidden)) {
        unset($blocks[$bid]);
      }
    }
  }
}

/**
 * Custom menu block element validation handler.
 */
function menu_block_settings_override_menu_block_validate($element, &$form_state, $form) {
  module_load_include('inc', 'menu_block', 'menu_block.admin');
  $parent = $element['#parents'][0];
  $settings = $element['#parents'][1];
  $key = $element['#parents'][2];
  $form_state_custom = array('values' => $form_state['values'][$parent][$settings]);
  $callbacks = $form['#menu_block_settings_override_callback'][$key];
  foreach ($callbacks as $callback) {
    $callback($element, $form_state_custom);
  }
  $form_state['values'][$parent][$settings] = $form_state_custom['values'];
}

