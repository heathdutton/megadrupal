<?php

/**
 * @file
 * Module that shows a block listing similar entries.
 * NOTE: Uses MySQL's FULLTEXT indexing for MyISAM tables.
 *
 * @author David Kent Norman http://deekayen.net/
 * @author Arnab Nandi http://arnab.org/
 * @author Jordan Halterman jordan.halterman@gmail.com
 */

/**
 * Implements hook_help().
 */
function similar_help($path, $arg) {
  switch ($path) {
    case 'admin/help#similar':
      return '<p>' . t('Lists the most similar nodes to the current node.') . '</p>';
  }
}

/**
 * Implements hook_views_api().
 */
function similar_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'similar') . '/views',
  );
}

/**
 * Implements hook_cron().
 *
 * Checks if an index rebuild is needed as determined in Drupal
 * variables. If the similar_index variable is not empty it will
 * have an array of field names which were added on the last
 * cron run. If field settings have changed since that last cron
 * run then the old index will be deleted and a new one added that
 * includes all the relevant fields in the table. This is because
 * ideally we want a single index for multiple fields in a table.
 */
function similar_cron() {
  if (module_exists('field')) {
    $indices = similar_get_indices();
    // Get all text columns defined for fields in the database.
    $data = array();
    foreach (field_info_fields() as $field => $info) {
      if ($info['type'] == 'text') {
        $table = key($info['storage']['details']['sql'][FIELD_LOAD_CURRENT]);
        $data[$table][] = $info['storage']['details']['sql'][FIELD_LOAD_CURRENT][$table]['value'];
      }
    }
    // For each table check if the index needs to be reset.
    foreach ($data as $table => $fields) {
      _similar_add_index($table, $data[$table]);
    }
  }
}

/**
 * Adds FULLTEXT indexes to field value database columns.
 *
 * We want to make sure that we index as many columns as are available
 * with a single index to improve results. So we remove the old index
 * from the table before then reindexing the new fields. Indexed fields
 * are then stored in a Drupal variable which is an array of sub-arrays,
 * with the array key the table name and the sub-array being the fields
 * that are indexed. Before calling this function the $fields argument
 * should be compared against the existing index as stored in the
 * similar_indices variable.
 *
 * @param $table
 *   A string representing the table to index.
 * @param $fields
 *   An array of column names to add to the index. Even though most,
 *   if not all of our tables will only have one indexed column, we
 *   still may need to add multiple fields some time.
 */
function _similar_add_index($table, $fields) {
  $index = similar_get_indices();
  if (db_table_exists($table)) {
    // Drop the existing index on the table if it exists.
    if (isset($index[$table]) && !empty($index[$table]) && db_index_exists($table, 'similar')) {
      db_drop_index($table, 'similar');
      unset($index[$table]);
    }
  
    if (!empty($fields)) {
      $add_fields = implode(', ', $fields);
      db_query("ALTER TABLE {$table} ENGINE = MYISAM");
      db_query("ALTER TABLE {$table} ADD FULLTEXT `similar` ($add_fields)");
      $index[$table] = $fields;
    }
  }
  elseif (isset($index[$table])) {
    unset($index[$table]);
  }
  variable_set('similar_indices', $index);
}

/**
 * Returns data about what fields are currently indexed.
 *
 * Indexed tables are fields are stored in a Drupal variable. Something
 * to do is look into ways to reset the variable upon reasonable events
 * like a field module install/uninstall or a cache clearance.
 *
 * @param $table
 *   An optional string identifying a specific table's indices to return.
 * @return
 *   An array of sub-arrays where the key is a table name and the value
 *   is an array of fields which are currently indexed in the table.
 */
function similar_get_indices($table = NULL) {
  $indices = variable_get('similar_indices', array());
  if (!empty($table)) {
    return isset($indices[$table]) ? $indices[$table] : FALSE;
  }
  else {
    return $indices;
  }
}
