<?php

/**
 * @file
 * Library definitions and some helper functions for managing evaluation of
 * script-generated math questions.
 */

/**
 * Implements hook_libraries_info().
 */
function tutor_math_libraries_info() {
  $libraries['matheval'] = array(
    'name' => 'Eval Math',
    'vendor url' => 'http://www.phpclasses.org/package/2695-PHP-Safely-evaluate-mathematical-expressions.html',
    'download url' => 'https://github.com/Itangalo/evalmath.class.php/tarball/master',
    'files' => array(
      'php' => array('matheval.class.php'),
    ),
    'version arguments' => array(
      'file' => 'README.md',
      // Best practice: Document the actual version strings for later reference.
      // 1.x: Version 1.0
      'pattern' => '/Version (\d+)/',
      'lines' => 5,
    ),
  );
  return $libraries;
}

/**
 * Evaluates a mathematical expression, which may include variables.
 *
 * @param $expression
 *   A string with the expression to evaluate, such as 'a + 4'.
 * @param $variables
 *   An associative array with the variables to include in the evaluation. The
 *   array keys are the variable names, and the values are the variable values,
 *   for example array('a' => 5).
 * @return
 *   The evaluated expression, such as 9. FALSE if the evaluation fails.
 */
function tutor_math_evaluate($expression, $variables = array()) {
  // Make sure that the matheval library can be accessed.
  if (($library = libraries_load('matheval')) && !empty($library['loaded'])) {
    // Set up a new math evaluation.
    $m = new EvalMath();
    $m->suppress_errors = TRUE;

    // If 'e' is one of the variables, we want to change that to some other name,
    // since e is a mathematical constant used by EvalMath.
    if (isset($variables['e'])) {
      $new_var = 'a';
      while (isset($variables[$new_var])) {
        $new_var .= 'a';
      }
      $variables[$new_var] = $variables['e'];
      unset($variables['e']);
      $expression = str_replace('e', $new_var, $expression);
    }
    
    // If 'pi' is one of the variables, just remove it. It's silly (or at best
    // confusing) to use variables with that name. Or it's a prank.
    if (isset($variables['pi'])) {
      unset($variables['pi']);
    }

    // Set variables for the evaluation.
    foreach ($variables as $name => $value) {
      // EvalMath only deals with lowercase variables, so let's lowercase this.
      $name = strtolower($name);
      if (!ctype_alpha($name)) {
        return FALSE;
      }
      $m->evaluate("$name = $value");
    }

    // Evaluate and return the result.
    try {
      return round($m->evaluate($expression), 4);
    }
    catch (Exception $err) {
      watchdog('tutor_math', 'Failed evaluating expression %expression.', array('%expression' => $expression), WATCHDOG_NOTICE);
      return FALSE;
    }
  }
  // If no library is found, set a notice and return FALSE.
  else {
    watchdog('tutor_math', 'Cannot load library %library.', array('%library' => 'matheval'), WATCHDOG_NOTICE);
    drupal_set_message(t('Cannot load library %library.', array('%library' => 'matheval')), 'warning');
    return FALSE;
  }
}

/**
 * Helper function to make it easier to pick a random number in an interval.
 *
 * @param $candidates
 *   An array with values to pick a random value from. These don't actually have
 *   to be numbers, but the $add_negative parameter only works on numbers.
 * @param $add_negatives
 *   If TRUE, there is a 50% chance that the return value will have a sign flip.
 * @param $exclude
 *   An array with disallowed entries. If the random value has one of these
 *   values, a new one will be seeded.
 * @return
 *   The randomly picked value.
 */
function tutor_math_rand(array $candidates, $add_negatives = FALSE, array $exclude = array()) {
  // Pick one value at random.
  $random = $candidates[array_rand($candidates)];

  // Flip the sign, possibly.
  if ($add_negatives) {
    $random = $random * (rand(0, 1) - 0.5) * 2;
  }

  if (array_search($random, $exclude) !== FALSE) {
    // Recursion!
    return tutor_math_rand($candidates, $add_negatives, $exclude);
  }
  return $random;
}
