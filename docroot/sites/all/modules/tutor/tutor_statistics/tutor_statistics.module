<?php
/**
 * @file
 * Code for the Tutor statistics feature/module.
 */

include_once 'tutor_statistics.features.inc';

/**
 * Force-loads a Tutor question statistics entity; creates one if need be.
 *
 * @param $uid
 *   The uid corresponding to the account to log statistics for.
 * @param $nid
 *   The nid corresponding to the node on which the question exists. Must be a
 *   node, as this feature is configured – sorry.
 * @param $question_name
 *   If a new statistics entity is created, the question name specified here
 *   will be included in its properties. This property is not actually used
 *   right now, but might be important in the future when connections are tied
 *   to question names rather than node/entity IDs.
 * @param $bundle
 *   If using something else than the default bundle for Tutor statistics, the
 *   bundle name should be specified here.
 * @return
 *   The statistics entity.
 */
function tutor_statistics_force_get($uid, $nid, $question_name = '', $bundle = 'default') {
  // In case we get NULL or something – cast the uid to an integer.
  $uid = (int) $uid;

  // Search for existing entity matching the specified conditions.
  $entities = new EntityFieldQuery;
  $entities
    ->entityCondition('entity_type', 'tutor_statistics')
    ->entityCondition('bundle', $bundle)
    ->propertyCondition('nid', $nid)
    ->propertyCondition('uid', $uid)
    ->execute();
  
  if (isset($entities->ordered_results[0])) {
    return entity_load_single('tutor_statistics', $entities->ordered_results[0]->entity_id);
  }
  else {
    $values = array(
      'type' => $bundle,
      'nid' => $nid,
      'uid' => $uid,
      'question' => $question_name,
    );
    $entity = entity_create('tutor_statistics', $values);
    entity_save('tutor_statistics', $entity);
    return $entity;
  }
}

/**
 * Implements hook_node_delete().
 * 
 * Deletes all the statistics entities related to the node being deleted.
 */
function tutor_statistics_node_delete($node) {
  $entities = new EntityFieldQuery;
  $entities
    ->entityCondition('entity_type', 'tutor_statistics')
    ->propertyCondition('nid', $node->nid)
    ->execute();

  // Only call entity_delete_multiple if there is reason to.
  if (isset($entities->ordered_results[0])) {
    // Someone please show me how to do this without a foreach loop.
    // Blame @Itangalo
    foreach($entities->ordered_results as $entity) {
      $ids[] = $entity->entity_id;
    }
    entity_delete_multiple('tutor_statistics', $ids);
  }
}
