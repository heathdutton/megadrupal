<?php

/**
 * @file
 * Declares a field for scripted questions, and manages the framework around
 * the scripted questions.
 */

// Include functions like tutorfield_field_info(), stored elsewhere.
include drupal_get_path('module', 'tutor') . '/tutorfield/tutorfield-field-declaration.inc';

/**
 * Implements hook_field_formatter_view().
 *
 * This is the function taking care of displaying a question field.
 */
function tutorfield_field_formatter_view($obj_type, $object, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'tutorfield_formatter':
      // Build the unique ID for this field on this entity.
      $entity_ids = entity_extract_ids($obj_type, $object);
      $storage_id = 'tutorfield-' . $instance['id'] . '-' . $entity_ids[0];

      // Get the stored delta value for the field, or build a new one.
      $delta = tutor_data_load($storage_id, 'delta');
      if (!$delta) {
        $delta = 0;
        tutor_data_store($storage_id, 'delta', $delta);
      }

      // If the delta value is beyond the number of items, we have run out of
      // questions. Display a mesasge and quit.
      if (!isset($items[$delta])) {
        $element = array(0 => array(
          '#type' => 'markup',
          '#markup' => t('You have already answered all the questions in this set.'),
        ));
        return $element;
      }

      $question = tutor_question_load($items[$delta]['question'], $storage_id);
      $environment = array(
        'entity type' => $obj_type,
        'entity' => $object,
        'instance settings' => $instance['settings'],
        'delta' => $delta,
        'delta max' => count($items),
      );
      $form = drupal_get_form('tutorfield_question_form', $question, $environment);

      $element = $form;

      break;
  }

  return $element;
}

/**
 * Form builder for Tutor questions used in entity fields.
 *
 * @param $question
 *   The question object.
 * @param $environment
 *   Any additional values to add to the environment part of the form array.
 * @return
 *   A form array.
 */
function tutorfield_question_form($form, &$form_state, $question, $environment) {
  $form = tutor_question_base_form($question);
  $form['environment']['#value'] += $environment;
  $form['#validate'][] = 'tutorfield_question_form_validate';
  return $form;
}

/**
 * Additional form validation for submitted Tutor question answers.
 *
 * This additional validation function takes care of generating new questions
 * when appropriate, depending on field instance settings.
 */
function tutorfield_question_form_validate(&$form, &$form_state) {
  $environment = &$form['environment']['#value'];
  $question = &$environment['question'];

  // If Rules is enabled, load some data and fire any relevant Rules event.
  if (module_exists('rules')) {
    global $user;
    $entity = entity_metadata_wrapper($environment['entity type'], $environment['entity']);
    if ($question->response->response_type == TUTOR_ANSWER_CORRECT) {
      rules_invoke_event('tutor_correct', $environment['question id'], $entity, $user);
    }
    if ($question->response->response_type <= 0) {
      rules_invoke_event('tutor_incorrect', $environment['question id'], $entity, $user);
    }
  }

  // Take care of resetting parameters and incrementing delta, depending on
  // settings in the field instance.
  switch ($environment['instance settings']['delta handling']) {
    case 'random smart':
      if ($question->response->response_type == TUTOR_ANSWER_CORRECT) {
        tutor_parameters_reset($environment['storage id']);
        $candidates = range(0, $environment['delta max'] - 1);
        unset($candidates[$environment['delta']]);
        $new_delta = count($candidates) ? array_rand($candidates) : $environment['delta'];
        tutor_data_store($environment['storage id'], 'delta', $new_delta);
      }
      else {
        form_set_error('answer');
      }
      break;

    case 'random':
      if ($question->response->response_type == TUTOR_ANSWER_CORRECT) {
        tutor_parameters_reset($environment['storage id']);
        tutor_data_store($environment['storage id'], 'delta', rand(0, $environment['delta max'] - 1));
      }
      else {
        form_set_error('answer');
      }
      break;

    case 'progress':
      if ($question->response->response_type == TUTOR_ANSWER_CORRECT) {
        tutor_parameters_reset($environment['storage id']);
        tutor_data_store($environment['storage id'], 'delta', ($environment['delta'] + 1) % $environment['delta max']);
      }
      else {
        form_set_error('answer');
      }
      break;

    case 'progress once':
      if ($question->response->response_type == TUTOR_ANSWER_CORRECT) {
        tutor_parameters_reset($environment['storage id']);
        tutor_data_store($environment['storage id'], 'delta', $environment['delta'] + 1);
      }
      else {
        form_set_error('answer');
      }
      break;

    case 'test':
      tutor_parameters_reset($environment['storage id']);
      tutor_data_store($environment['storage id'], 'delta', $environment['delta'] + 1);
      break;

    default:
      break;
  }
}
