<?php

/**
 * @file
 * MyFantasyLeague module main file.
 *
 * @author Barrett Langton <barrett@barrettlangton.com>
 */

/*
 * Implements hook_permission().
 */
function myfantasyleague_permission() {
  return array(
    'create global myfantasyleague' => array(
      'title' => t('Create Global MyFantasyLeague'),
      'description' => t('Allow users to administer MyFantasyLeague global league'),
    ),
    'create user myfantasyleague' => array(
      'title' => t('Create User MyFantasyLeague'),
      'description' => t('Allow users to administer their own MyFantasyLeague league'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function myfantasyleague_menu() {
  $items = array();
  $items['myfantasyleague'] = array(
    'title' => 'MyFantasyLeague',
    'page callback' => 'myfantasyleague_standings',
    'page arguments' => array('0'),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'weight' => 0,
    'type' => MENU_NORMAL_ITEM,
  );
  $items['myfantasyleague/standings'] = array(
    'title' => 'Standings',
    'page callback' => 'myfantasyleague_standings',
    'page arguments' => array('0'),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'menu_name' => 'myfantasyleague',
    'weight' => 0,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['myfantasyleague/weeklyresults'] = array(
    'title' => 'Weekly Results',
    'page callback' => 'myfantasyleague_weekly_results',
    'page arguments' => array('0'),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'menu_name' => 'myfantasyleague',
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
  );
  $items['myfantasyleague/weeklyresults/%'] = array(
    'title' => 'Weekly Results',
    'page callback' => 'myfantasyleague_weekly_results',
    'page arguments' => array('0', 2),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/system/myfantasyleague'] = array(
    'title' => 'MyFantasyLeague',
    'description' => 'Configuration options for the MyFantasyLeague module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('myfantasyleague_config'),
    'access callback' => 'user_access',
    'access arguments' => array('create global myfantasyleague'),
    'file' => 'myfantasyleague.config.inc',
  );
  $items['user/%/myfantasyleague'] = array(
    'title' => 'MyFantasyLeague',
    'page callback' => 'myfantasyleague_standings',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
  );
  $items['user/%/myfantasyleague/standings'] = array(
    'title' => 'Standings',
    'page callback' => 'myfantasyleague_standings',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'weight' => 0,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['user/%/myfantasyleague/weeklyresults'] = array(
    'title' => 'Weekly Results',
    'page callback' => 'myfantasyleague_weekly_results',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
  );
  $items['user/%/myfantasyleague/weeklyresults/%'] = array(
    'title' => 'Weekly Results',
    'page callback' => 'myfantasyleague_weekly_results',
    'page arguments' => array(1, 4),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['user/%user/edit/myfantasyleague'] = array(
    'title' => 'MyFantasyLeague',
    'description' => 'Configuration options for the MyFantasyLeague module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('myfantasyleague_config', 1),
    'access callback' => 'user_access',
    'access arguments' => array('create user myfantasyleague'),
    'file' => 'myfantasyleague.config.inc',
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implements hook_help().
 */
function myfantasyleague_help($path, $arg) {
  switch ($path) {
    case 'admin/help#myfantasyleague':
      $output = '';
      $output .= '<h3>' . t('Setting Up Your League') . '</h3>';
      $output .= '<p>' . t('After you install the module, you will need to enter your MyFantasyLeague league ID and year number in the <a href="@config_page">configuration page</a>. To find your league ID, go to your league home page and look at the URL: http://www.myfantasyleague.com/2011/home/xxxxx. The \'xxxxx\' part is your league ID. Once you save this data, then you can view your MyFantasyLeague league information on your Drupal site. There are two pages provided: <a href="@standings_page">Standings</a> and <a href="@weekly_results_page">Weekly Results</a>. There are also three blocks which you can enable using the directions below.', array('@config_page' => '/admin/config/system/myfantasyleague', '@standings_page' => '/myfantasyleague/standings', '@weekly_results_page' => '/myfantasyleague/weeklyresults')) . '</p>';
      $output .= '<h3>' . t('Enabling Blocks') . '</h3>';
      $output .= '<p>' . t('There are three blocks associated with this module: Standings, Weekly Results, and Live Scoring. To enable one or more of these modules, navigate to the <a href="@blocks_page">blocks admin page</a> and move the blocks that you want into the region that you want.', array('@blocks_page' => '/admin/structure/block')) . '</p>';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The MyFantasyLeague module integrates your MyFantasyLeague fantasy football league into Drupal. It provides pages for you to view league standings and weekly results. There are also three different blocks that you can enable for league standings, weekly results, and live scoring.') . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('League Standings') . '</dt>';
      $output .= '<dd>' . t('There is a league standings page and a league standings block. The league standings page is located <a href="@standings_page">here</a>. The league standings block can be enabled by navigating to the blocks page and enabling the block in whatever region you want. This only shows the league standings as they currently are. You can\'t navigate back to previous weeks.', array('@standings_page' => '/myfantasyleague/standings')) . '</dd>';
      $output .= '<dt>' . t('Weekly Results') . '</dt>';
      $output .= '<dd>' . t('There is a weekly results page and a weekly results block. The weekly results page is located <a href="@weekly_results_page">here</a>. The weekly results block can be enabled by navigating to the blocks page and enabling the block in whatever region you want. Weekly results only updates daily, so it doesn\'t update the scores live as the live scoring block does. This feature is intended to show previous weekly results.', array('@weekly_results_page' => '/myfantasyleague/weeklyresults')) . '</dd>';
      $output .= '<dt>' . t('Live Scoring') . '</dt>';
      $output .= '<dd>' . t('There is a live scoring block, which can be enabled by navigating to the blocks page and enabling the block in whatever region you want. Live scoring is just meant to track scoring as it happens, so you can\'t navigate to previous weeks.') . '</dd>';
      $output .= '</dl>';
      return $output;
  }
}

/**
 * Implements hook_block_info().
 */
function myfantasyleague_block_info() {
  $blocks = array();

  $blocks['standings'] = array(
    'info' => t('MyFantasyLeague Standings'),
    'status' => FALSE,
    'weight' => 0,
  );
  $blocks['weekly_results'] = array(
    'info' => t('MyFantasyLeague Weekly Results'),
    'status' => FALSE,
    'weight' => 0,
  );
  $blocks['live_scoring'] = array(
    'info' => t('MyFantasyLeague Live Scoring'),
    'status' => FALSE,
    'weight' => 0,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function myfantasyleague_block_view($delta = '') {
  switch ($delta) {
    case 'standings':
      $block['subject'] = t('Standings');
      $block['content'] = myfantasyleague_standings_block();
      return $block;
    case 'weekly_results':
      $block['subject'] = t('Weekly Results');
      $block['content'] = myfantasyleague_weekly_results_block();
      return $block;
    case 'live_scoring':
      $block['subject'] = t('Live Scoring');
      $block['content'] = myfantasyleague_live_scoring_block();
      return $block;
  }

  return;
}

/**
 * Implements hook_theme().
 */
function myfantasyleague_theme() {
  return array(
    'myfantasyleague_config' => array(
      'render element' => 'form',
      'file' => 'myfantasyleague.config.inc',
    ),
  );
}

/**
 * Display the current standings for the MyFantasyLeague league.
 *
 * @param int $uid
 *   The user's ID.
 */
function myfantasyleague_standings($uid = 0) {
  global $user;
  // Make sure config variables are set before displaying the page.
  if (!myfantasyleague_user_has_league($uid)) {
    if (user_access('create global myfantasyleague') && $uid == 0) {
      return t('No league has been set up yet. Set one up <a href="@config_page">here</a>.', array('@config_page' => '/admin/config/system/myfantasyleague'));
    }
    elseif (user_access('create user myfantasyleague') && $user->uid == $uid) {
      return t('No league has been set up yet. Set one up <a href="@config_page">here</a>.', array('@config_page' => '/user/' . $uid . '/edit/myfantasyleague'));
    }
    return t('No league has been set up yet.');
  }

  // Load data from xml files.
  $standings = myfantasyleague_get_standings_data($uid);
  $league = myfantasyleague_get_league_data($uid);
  $output = '';

  // Get standings columns sort order and store them in the header.
  $columns = myfantasyleague_standings_columns_enabled($uid);
  $header = array();
  foreach ($columns as $column) {
    $header[] = $column->name;
  }

  // If there was a problem getting data from any of the XML feeds, then
  // notify the user.
  if (!$league || !$standings) {
    return t('There was an error getting data from MyFantasyLeague.com. Please try again later.');
  }

  // Get total number of games played so far.
  $totalgames = $standings[1]['h2hw'] + $standings[1]['h2hl'] + $standings[1]['h2ht'];

  // Check if the league has divisions or not.
  if (isset($league['divisions'])) {
    // Loop through each division.
    $i = 0;
    foreach ($league['divisions'] as $division) {
      // Set the caption. If the division is within a conference, then display conference and division.
      $caption = check_plain($division['name']);
      if (isset($league['conferences'])) {
        $caption = check_plain($league['conferences'][$division['conference']]['name']) . ' - ' . $caption;
      }

      $variables = array(
        'header' => $header,
        'attributes' => array(),
        'caption' => $caption,
        'colgroups' => array(),
        'sticky' => '',
        'empty' => '',
      );

      // Loops through each franchise.
      $j = 0;
      foreach ($standings as $franchise) {
        // Make sure this franchise belongs to the current division.
        if ($league['franchises'][$franchise['id']]['division'] == $i) {
          // Get the franchise's information.
          foreach ($columns as $column) {
            $variables['rows'][$j][] = myfantasyleague_get_column_info(
              $column->name,
              $franchise,
              $league,
              $totalgames
            );
          }
        }
        $j++;
      }

      // Theme the table.
      $output .= theme_table($variables);
      $i++;
    }
  }
  else {
    // League does not have divisions.
    $variables = array(
      'header' => $header,
      'attributes' => array(),
      'caption' => '',
      'colgroups' => array(),
      'sticky' => '',
      'empty' => '',
    );

    // Loops through each franchise.
    $j = 0;
    foreach ($standings as $franchise) {
      // Get the franchise's information.
      foreach ($columns as $column) {
        $variables['rows'][$j][] = myfantasyleague_get_column_info(
          $column->name,
          $franchise,
          $league,
          $totalgames
        );
      }
      $j++;
    }

    // Theme the table.
    $output .= theme_table($variables);
  }

  return $output;
}

/**
 * Display the current standings for the MyFantasyLeague league in block format.
 */
function myfantasyleague_standings_block() {
  global $user;
  $uid = 0;
  if (myfantasyleague_user_has_league($user->uid)) {
    $uid = $user->uid;
  }
  // Make sure config variables are set before displaying the page.
  if (!myfantasyleague_user_has_league($uid)) {
    if (user_access('create global myfantasyleague')) {
      return t('No league has been set up yet. Set one up <a href="@config_page">here</a>.', array('@config_page' => '/admin/config/system/myfantasyleague'));
    }
    elseif (user_access('create user myfantasyleague')) {
      return t('No league has been set up yet. Set one up <a href="@config_page">here</a>.', array('@config_page' => '/user/' . $uid . '/edit/myfantasyleague'));
    }
    return t('No league has been set up yet.');
  }

  // Load data from xml files.
  $standings = myfantasyleague_get_standings_data($uid);
  $league = myfantasyleague_get_league_data($uid);
  $output = '';

  // If there was a problem getting data from any of the XML feeds, then
  // notify the user.
  if (!$league || !$standings) {
    return t('There was an error getting data from MyFantasyLeague.com. Please try again later.');
  }

  // Check if the league has divisions or not.
  if (isset($league['divisions'])) {
    // Loop through each division.
    $i = 0;
    foreach ($league['divisions'] as $division) {
      // Set the caption. If the division is within a conference, then display conference and division.
      $caption = check_plain($division['name']);
      if (isset($league['conferences'])) {
        $caption = check_plain($league['conferences'][$division['conference']]['name']) . ' - ' . $caption;
      }

      $variables = array(
        'header' => array(),
        'attributes' => array(),
        'caption' => $caption,
        'colgroups' => array(),
        'sticky' => '',
        'empty' => '',
      );

      // Loops through each franchise.
      foreach ($standings as $franchise) {
        // Make sure this franchise belongs to the current division.
        if ($league['franchises'][$franchise['id']]['division'] == $i) {
          // Get the franchise's information.
          if (in_array($league['h2h'], array('YES', 'Doubleheaders', 'ALL'))) {
            $variables['header'] = array('Team', 'W-L-T');
            $variables['rows'][] = array(
              check_plain($league['franchises'][$franchise['id']]['name']),
              check_plain($franchise['h2hw'] . '-' . $franchise['h2hl'] . '-' . $franchise['h2ht']),
            );
          }
          else {
            $variables['header'] = array('Team', 'PF');
            $variables['rows'][] = array(
              check_plain($league['franchises'][$franchise['id']]['name']),
              check_plain($franchise['pf']),
            );
          }
        }
      }

      // Theme the table.
      $output .= theme_table($variables);
      $i++;
    }
  }
  else {
    // League does not have divisions.
    $variables = array(
      'header' => array(),
      'attributes' => array(),
      'caption' => '',
      'colgroups' => array(),
      'sticky' => '',
      'empty' => '',
    );

    // Loops through each franchise.
    foreach ($standings as $franchise) {
      // Get the franchise's information.
      if (in_array($league['h2h'], array('YES', 'Doubleheaders', 'ALL'))) {
        $variables['header'] = array('Team', 'W-L-T');
        $variables['rows'][] = array(
          check_plain($league['franchises'][$franchise['id']]['name']),
          check_plain($franchise['h2hw'] . '-' . $franchise['h2hl'] . '-' . $franchise['h2ht']),
        );
      }
      else {
        $variables['header'] = array('Team', 'PF');
        $variables['rows'][] = array(
          check_plain($league['franchises'][$franchise['id']]['name']),
          check_plain($franchise['pf']),
        );
      }
    }

    // Theme the table.
    $output .= theme_table($variables);
  }

  if (!$uid) {
    $output .= '<p>' . l(t('View Standings Page'), 'myfantasyleague/standings', array('html' => TRUE)) . '</p>';
  }
  else {
    $output .= '<p>' . l(t('View Standings Page'), 'user/' . $uid . '/myfantasyleague/standings', array('html' => TRUE)) . '</p>';
  }

  return $output;
}

/**
 * Display weekly results for the MyFantasyLeague league.
 *
 * @param int $uid
 *   The user's ID.
 * @param int $week
 *   The week to get weekly results for.
 */
function myfantasyleague_weekly_results($uid = 0, $week = NULL) {
  global $user;
  // Make sure config variables are set before displaying the page.
  if (!myfantasyleague_user_has_league($uid)) {
    if (user_access('create global myfantasyleague') && $uid == 0) {
      return t('No league has been set up yet. Set one up <a href="@config_page">here</a>.', array('@config_page' => '/admin/config/system/myfantasyleague'));
    }
    elseif (user_access('create user myfantasyleague') && $user->uid == $uid) {
      return t('No league has been set up yet. Set one up <a href="@config_page">here</a>.', array('@config_page' => '/user/' . $uid . '/edit/myfantasyleague'));
    }
    return t('No league has been set up yet.');
  }

  // Load data from xml files.
  $weeklyResults = myfantasyleague_get_weekly_results_data($uid, $week);
  $league = myfantasyleague_get_league_data($uid);
  $players = myfantasyleague_get_player_data($uid);

  // If the week wasn't passed in, load it from the xml results.
  if ($week == NULL) {
    $week = check_plain($weeklyResults[0][0]['week']);
  }
  $output = 'Week: ';

  // If there was a problem getting data from any of the XML feeds, then
  // notify the user.
  if (!$weeklyResults || !$league || !$players) {
    return t('There was an error getting data from MyFantasyLeague.com. Please try again later.');
  }

  // List out each week at the top of the page.
  for ($i = $league['start_week']; $i < $league['end_week']; $i++) {
    if ($i == $week) {
      $output .= $i . ' | ';
    }
    else {
      if (!$uid) {
        $output .= l($i, 'myfantasyleague/weeklyresults/' . $i, array('html' => TRUE)) . ' | ';
      }
      else {
        $output .= l($i, 'user/' . $uid . '/myfantasyleague/weeklyresults/' . $i, array('html' => TRUE)) . ' | ';
      }
    }
  }
  if ($i == $week) {
    $output .= check_plain($league['end_week']);
  }
  else {
    if (!$uid) {
      $output .= l($league['end_week'], 'myfantasyleague/weeklyresults/' . $league['end_week'], array('html' => TRUE));
    }
    else {
      $output .= l($league['end_week'], 'user/' . $uid . '/myfantasyleague/weeklyresults/' . $league['end_week'], array('html' => TRUE));
    }
  }

  // Loops through each matchup.
  foreach ($weeklyResults as $matchup) {
    $output .= '<p>';
    // Loop through each franchise.
    $i = 0;
    foreach ($matchup as $franchise) {
      if ($i % 2 == 0) {
        $attributes = array('style' => 'width:auto; float:left; clear:left; margin-right: 10px;');
      }
      else {
        $attributes = array('style' => 'width:auto; float:left; margin-right: 10px;');
      }
      $variables = array(
        'header' => array(
          'Player',
          'Score',
        ),
        'attributes' => $attributes,
        'caption' => check_plain($league['franchises'][(int) $franchise['id']]['name']),
        'colgroups' => array(),
        'sticky' => '',
        'empty' => '',
      );

      // Get each player's scores, if this team has players specified for this week.
      if (array_key_exists('players', $franchise)) {
        foreach ($franchise['players'] as $player) {
          if ($player['status'] == 'starter') {
            $variables['rows'][] = array(
              check_plain($players[(int) $player['id']]['name']),
              check_plain($player['score']),
            );
          }
        }
      }
      $variables['rows'][] = array(
        'Total',
        check_plain($franchise['score']),
      );

      // Theme the table.
      $output .= theme_table($variables);
      $i++;
    }
    $output .= '</p>';
  }

  return $output;
}

/**
 * Display weekly results for the MyFantasyLeague league in block format.
 *
 * @param int $week
 *   The week to get weekly results for.
 */
function myfantasyleague_weekly_results_block($week = NULL) {
  global $user;
  $uid = 0;
  if (myfantasyleague_user_has_league($user->uid)) {
    $uid = $user->uid;
  }
  // Make sure config variables are set before displaying the page.
  if (!myfantasyleague_user_has_league($uid)) {
    if (user_access('create global myfantasyleague')) {
      return t('No league has been set up yet. Set one up <a href="@config_page">here</a>.', array('@config_page' => '/admin/config/system/myfantasyleague'));
    }
    elseif (user_access('create user myfantasyleague')) {
      return t('No league has been set up yet. Set one up <a href="@config_page">here</a>.', array('@config_page' => '/user/' . $uid . '/edit/myfantasyleague'));
    }
    return t('No league has been set up yet.');
  }

  // Load data from xml files.
  $weeklyResults = myfantasyleague_get_weekly_results_data($uid, $week);
  $league = myfantasyleague_get_league_data($uid);
  $players = myfantasyleague_get_player_data($uid);

  // If the week wasn't passed in, load it from the xml results.
  if ($week == NULL) {
    $week = check_plain($weeklyResults[0][0]['week']);
  }
  $output = '<h3>Week ' . $week . '</h3>';

  // If there was a problem getting data from any of the XML feeds, then
  // notify the user.
  if (!$weeklyResults || !$league || !$players) {
    return t('There was an error getting data from MyFantasyLeague.com. Please try again later.');
  }

  // Loops through each matchup.
  foreach ($weeklyResults as $matchup) {
    $variables = array(
      'header' => array(
        'Team',
        'Score',
      ),
      'attributes' => array(),
      'caption' => '',
      'colgroups' => array(),
      'sticky' => '',
      'empty' => '',
    );

    // Loop through each franchise.
    foreach ($matchup as $franchise) {
      $variables['rows'][] = array(
        check_plain($league['franchises'][(int) $franchise['id']]['name']),
        check_plain($franchise['score']),
      );
    }

    // Theme the table.
    $output .= theme_table($variables);
  }

  if (!$uid) {
    $output .= '<p>' . l(t('View Weekly Results Page'), 'myfantasyleague/weeklyresults', array('html' => TRUE)) . '</p>';
  }
  else {
    $output .= '<p>' . l(t('View Weekly Results Page'), 'user/' . $uid . '/myfantasyleague/weeklyresults', array('html' => TRUE)) . '</p>';
  }

  return $output;
}

/**
 * Display live scoring for the MyFantasyLeague league in block format.
 *
 * @param $week
 *   The week to get live scoring for.
 */
function myfantasyleague_live_scoring_block($week = NULL) {
  global $user;
  $uid = 0;
  if (myfantasyleague_user_has_league($user->uid)) {
    $uid = $user->uid;
  }
  // Make sure config variables are set before displaying the page.
  if (!myfantasyleague_user_has_league($uid)) {
    if (user_access('create global myfantasyleague')) {
      return t('No league has been set up yet. Set one up <a href="@config_page">here</a>.', array('@config_page' => '/admin/config/system/myfantasyleague'));
    }
    elseif (user_access('create user myfantasyleague')) {
      return t('No league has been set up yet. Set one up <a href="@config_page">here</a>.', array('@config_page' => '/user/' . $uid . '/edit/myfantasyleague'));
    }
    return t('No league has been set up yet.');
  }

  // Load data from xml files.
  $liveScoring = myfantasyleague_get_live_scoring_data($uid, $week);
  $league = myfantasyleague_get_league_data($uid);
  $players = myfantasyleague_get_player_data($uid);

  // If the week wasn't passed in, load it from the xml results.
  if ($week == NULL) {
    $week = check_plain($liveScoring[0][0]['week']);
  }
  $output = '<h3>Week ' . $week . '</h3>';

  // If there was a problem getting data from any of the XML feeds, then
  // notify the user.
  if (!$liveScoring || !$league || !$players) {
    return t('There was an error getting data from MyFantasyLeague.com. Please try again later.');
  }

  // Loops through each matchup.
  foreach ($liveScoring as $matchup) {
    $variables = array(
      'header' => array(
        'Team',
        'Score',
      ),
      'attributes' => array(),
      'caption' => '',
      'colgroups' => array(),
      'sticky' => '',
      'empty' => '',
    );

    // Loop through each franchise.
    foreach ($matchup as $franchise) {
      $variables['rows'][] = array(
        check_plain($league['franchises'][(int) $franchise['id']]['name']),
        check_plain($franchise['score']),
      );
    }

    // Theme the table.
    $output .= theme_table($variables);
  }

  return $output;
}

/**
 * Gets league data from the MFL API.
 *
 * @param int $uid
 *   The uid of the user whose league we are getting.
 * @param bool $reset
 *   If true then generate the data even if it is already cached.
 *
 * @return array
 *   The league data in array format.
 */
function myfantasyleague_get_league_data($uid = 0, $reset = FALSE) {
  $league = &drupal_static(__FUNCTION__);

  // Get the league info.
  $league_info = myfantasyleague_get_league_info($uid);

  if (!isset($league[$uid]) || $reset) {
    // Check if league data is cached in the database.
    if (!$reset && ($cache = cache_get('myfantasyleague_' . $uid . '_league_data')) && (time() < $cache->expire)) {
      $league[$uid] = $cache->data;
    }
    else {
      // Get league data from XML, then save in cache.
      $league[$uid] = array();
      $leagueXml = simplexml_load_file("http://football.myfantasyleague.com/" . $league_info['league_year'] . "/export?TYPE=league&L=" . $league_info['league_id'], "SimpleXMLElement", LIBXML_NOCDATA | LIBXML_NOERROR | LIBXML_NOWARNING);

      // If there was an error getting the XML data, then return false.
      if (!$leagueXml || drupal_substr($leagueXml[0], 0, 7) == 'Invalid') {
        return FALSE;
      }

      // Get basic league information.
      $league[$uid]['id'] = (int) $leagueXml['id'];
      $league[$uid]['name'] = (string) $leagueXml['name'];
      $league[$uid]['roster_size'] = (int) $leagueXml['rosterSize'];
      $league[$uid]['start_week'] = (int) $leagueXml['startWeek'];
      $league[$uid]['end_week'] = (int) $leagueXml['endWeek'];
      $league[$uid]['h2h'] = (string) $leagueXml['h2h'];
      $league[$uid]['standings_sort'] = (string) $leagueXml['standingsSort'];
      $league[$uid]['last_regular_season_week'] = (int) $leagueXml['lastRegularSeasonWeek'];
      $league[$uid]['precision'] = (int) $leagueXml['precision'];

      // Loop through each position.
      foreach ($leagueXml->starters->position as $position) {
        $league[$uid]['starters'][(string) $position['name']] = array(
          'limit' => (string) $position['limit'],
        );
      }
      $league[$uid]['starters']['count'] = (int) $leagueXml->starters['count'];
      $league[$uid]['starters']['idp_starters'] = (int) $leagueXml->starters['idp_starters'];

      // Loop through each conference if the league has divisions.
      if (isset($leagueXml->conferences)) {
        foreach ($leagueXml->conferences->conference as $conference) {
          $league[$uid]['conferences'][(int) $conference['id']] = array(
            'name' => (string) $conference['name'],
          );
        }
      }

      // Loop through each division if the league has divisions.
      if (isset($leagueXml->divisions)) {
        foreach ($leagueXml->divisions->division as $division) {
          $league[$uid]['divisions'][(int) $division['id']] = array(
            'name' => (string) $division['name'],
            'conference' => (int) $division['conference'],
          );
        }
      }

      // Loop through each franchise.
      foreach ($leagueXml->franchises->franchise as $franchise) {
        $league[$uid]['franchises'][(int) $franchise['id']] = array(
          'name' => (string) $franchise['name'],
          'division' => (int) $franchise['division'],
          'logo' => (string) $franchise['logo'],
          'icon' => (string) $franchise['icon'],
        );
      }

      // Set the cache for one week.
      cache_set('myfantasyleague_' . $uid . '_league_data', $league[$uid], 'cache', time() + 604800);
    }
  }
  return $league[$uid];
}

/**
 * Gets NFL player data from the MFL API.
 *
 * @param int $uid
 *   The uid of the user whose league we are getting.
 * @param bool $reset
 *   If true then generate the data even if it is already cached.
 *
 * @return array
 *   The player data in array format.
 */
function myfantasyleague_get_player_data($uid = 0, $reset = FALSE) {
  $players = &drupal_static(__FUNCTION__);

  // Get the league info.
  $league_info = myfantasyleague_get_league_info($uid);
  $league_year = $league_info['league_year'];

  if (!isset($players[$league_year]) || $reset) {
    // Check if player data is cached in the database.
    if (!$reset && ($cache = cache_get('myfantasyleague_' . $league_year . '_player_data')) && (time() < $cache->expire)) {
      $players[$league_year] = $cache->data;
    }
    else {
      // Get players data from XML, then save in cache.
      $players[$league_year] = array();
      $playersXml = simplexml_load_file("http://football.myfantasyleague.com/" . $league_year . "/export?TYPE=players", "SimpleXMLElement", LIBXML_NOCDATA | LIBXML_NOERROR | LIBXML_NOWARNING);

      // If there was an error getting the XML data, then return false.
      if (!$playersXml || drupal_substr($playersXml[0], 0, 7) == 'Invalid') {
        return FALSE;
      }

      // Loop through each player.
      foreach ($playersXml->player as $player) {
        $players[$league_year][(int) $player['id']] = array(
          'name' => (string) $player['name'],
          'position' => (string) $player['position'],
          'team' => (string) $player['team'],
        );
      }

      // Set the cache for 30 days.
      cache_set('myfantasyleague_' . $league_year . '_player_data', $players[$league_year], 'cache', time() + 2592000);
    }
  }
  return $players[$league_year];
}

/**
 * Gets league standings from the MFL API.
 *
 * @param int $uid
 *   The uid of the user whose league we are getting.
 * @param bool $reset
 *   If true then generate the data even if it is already cached.
 *
 * @return array
 *   The standings in array format.
 */
function myfantasyleague_get_standings_data($uid = 0, $reset = FALSE) {
  $standings = &drupal_static(__FUNCTION__);

  // Get the league info.
  $league_info = myfantasyleague_get_league_info($uid);

  if (!isset($standings[$uid]) || $reset) {
    // Check if league standings data is cached in the database.
    if (!$reset && ($cache = cache_get('myfantasyleague_' . $uid . '_standings_data')) && (time() < $cache->expire)) {
      $standings[$uid] = $cache->data;
    }
    else {
      // Get standings data from XML, then save in cache.
      $standings[$uid] = array();
      $standingsXml = simplexml_load_file("http://football.myfantasyleague.com/" . $league_info['league_year'] . "/export?TYPE=standings&L=" . $league_info['league_id'], "SimpleXMLElement", LIBXML_NOCDATA | LIBXML_NOERROR | LIBXML_NOWARNING);

      // If there was an error getting the XML data, then return false.
      if (!$standingsXml || drupal_substr($standingsXml[0], 0, 7) == 'Invalid') {
        return FALSE;
      }

      // Loop through each franchise.
      $i = 1;
      foreach ($standingsXml->franchise as $franchise) {
        $standings[$uid][$i] = array(
          'id' => (int) $franchise['id'],
          'h2hw' => (int) $franchise->h2hw,
          'h2hl' => (int) $franchise->h2hl,
          'h2ht' => (int) $franchise->h2ht,
          'divw' => (int) $franchise->divw,
          'divl' => (int) $franchise->divl,
          'divt' => (int) $franchise->divt,
          'divpf' => (double) $franchise->divpf,
          'confw' => (int) $franchise->confw,
          'confl' => (int) $franchise->confl,
          'conft' => (int) $franchise->conft,
          'confpf' => (double) $franchise->confpf,
          'pf' => (double) $franchise->pf,
          'pa' => (double) $franchise->pa,
          'avgpa' => (double) $franchise->avgpa,
          'maxpa' => (double) $franchise->maxpa,
          'minpa' => (double) $franchise->minpa,
          'pp' => (double) $franchise->pp,
          'bbidspent' => (double) $franchise->bbidspent,
          'op' => (double) $franchise->op,
          'dp' => (double) $franchise->dp,
          'pwr' => (double) $franchise->pwr,
          'acct' => (double) $franchise->acct,
          'salary' => (double) $franchise->salary,
          'vp' => (int) $franchise->vp,
          'streak_type' => (string) $franchise->streak_type,
          'streak_len' => (int) $franchise->streak_len,
          'power_rank' => (double) $franchise->power_rank,
          'all_play_w' => (int) $franchise->all_play_w,
          'all_play_l' => (int) $franchise->all_play_l,
          'all_play_t' => (int) $franchise->all_play_t,
        );
        $i++;
      }

      // Set the cache for one day.
      cache_set('myfantasyleague_' . $uid . '_standings_data', $standings[$uid], 'cache', time() + 86400);
    }
  }
  return $standings[$uid];
}

/**
 * Gets weekly results from the MFL API.
 *
 * @param int $uid
 *   The uid of the user whose league we are getting.
 * @param int $week
 *   The week that we want to get results from.
 * @param bool $reset
 *   If true then generate the data even if it is already cached.
 *
 * @return array
 *   The weekly results in array format.
 */
function myfantasyleague_get_weekly_results_data($uid = 0, $week = NULL, $reset = FALSE) {
  $weeklyResults = &drupal_static(__FUNCTION__);

  // Get the league info.
  $league_info = myfantasyleague_get_league_info($uid);

  if (!isset($weeklyResults[$uid]) || $reset) {
    // Check if weekly results data is cached in the database.
    if (!$reset && ($cache = cache_get('myfantasyleague_' . $uid . '_weekly_results_week_' . $week)) && (time() < $cache->expire)) {
      $weeklyResults[$uid] = $cache->data;
    }
    else {
      // Get weekly results data from XML, then save in cache.
      $weeklyResults[$uid] = array();
      $weeklyResultsXml = simplexml_load_file("http://football.myfantasyleague.com/" . $league_info['league_year'] . "/export?TYPE=weeklyResults&L=" . $league_info['league_id'] . "&W=$week", "SimpleXMLElement", LIBXML_NOCDATA | LIBXML_NOERROR | LIBXML_NOWARNING);

      // If there was an error getting the XML data, then return false.
      if (!$weeklyResultsXml || drupal_substr($weeklyResultsXml[0], 0, 7) == 'Invalid') {
        return FALSE;
      }

      // Get the week number.
      $weeklyResults[$uid][0][0]['week'] = (int) $weeklyResultsXml['week'];

      // If the league is a head to head league.
      if (isset($weeklyResultsXml->matchup)) {
        // Loop through each matchup.
        $i = 0;
        foreach ($weeklyResultsXml->matchup as $matchup) {
          // Loop through each franchise.
          $j = 0;
          foreach ($matchup->franchise as $franchise) {
            $weeklyResults[$uid][$i][$j]['id'] = (int) $franchise['id'];
            $weeklyResults[$uid][$i][$j]['score'] = (double) $franchise['score'];
            $weeklyResults[$uid][$i][$j]['is_home'] = (int) $franchise['isHome'];
            $weeklyResults[$uid][$i][$j]['result'] = (string) $franchise['result'];

            // Get each player's scores.
            foreach ($franchise->player as $player) {
              $weeklyResults[$uid][$i][$j]['players'][] = array(
                'id' => (int) $player['id'],
                'status' => (string) $player['status'],
                'score' => (double) $player['score'],
              );
            }
            $j++;
          }
          $i++;
        }
      }
      // Not a head to head league.
      else {
        // Loop through each franchise.
        $i = 0;
        foreach ($weeklyResultsXml->franchise as $franchise) {
          $weeklyResults[$uid][0][$i]['id'] = (int) $franchise['id'];
          $weeklyResults[$uid][0][$i]['score'] = (double) $franchise['score'];
          $weeklyResults[$uid][0][$i]['is_home'] = (int) $franchise['isHome'];
          $weeklyResults[$uid][0][$i]['result'] = (string) $franchise['result'];

          // Get each player's scores.
          foreach ($franchise->player as $player) {
            $weeklyResults[$uid][0][$i]['players'][] = array(
              'id' => (int) $player['id'],
              'status' => (string) $player['status'],
              'score' => (double) $player['score'],
            );
          }
          $i++;
        }
      }

      // Set the cache for 30 minutes.
      cache_set('myfantasyleague_' . $uid . '_weekly_results_week_' . $week, $weeklyResults[$uid], 'cache', time() + 1800);
    }
  }
  return $weeklyResults[$uid];
}

/**
 * Gets live scoring from the MFL API.
 *
 * @param int $uid
 *   The uid of the user whose league we are getting.
 * @param int $week
 *   The week that we want to get results from.
 * @param bool $reset
 *   If true then generate the data even if it is already cached.
 *
 * @return array
 *   The live scoring results in array format.
 */
function myfantasyleague_get_live_scoring_data($uid = 0, $week = NULL, $reset = FALSE) {
  $liveScoring = &drupal_static(__FUNCTION__);

  // Get the league info.
  $league_info = myfantasyleague_get_league_info($uid);

  if (!isset($liveScoring[$uid]) || $reset) {
    // Check if live scoring data is cached in the database.
    if (!$reset && ($cache = cache_get('myfantasyleague_' . $uid . '_live_scoring_week_' . $week)) && (time() < $cache->expire)) {
      $liveScoring[$uid] = $cache->data;
    }
    else {
      // Get live scoring data from XML, then save in cache.
      $liveScoring[$uid] = array();
      $liveScoringXml = simplexml_load_file("http://football.myfantasyleague.com/" . $league_info['league_year'] . "/export?TYPE=liveScoring&L=" . $league_info['league_id'] . "&W=$week", "SimpleXMLElement", LIBXML_NOCDATA | LIBXML_NOERROR | LIBXML_NOWARNING);

      // If there was an error getting the XML data, then return false.
      if (!$liveScoringXml || drupal_substr($liveScoringXml[0], 0, 7) == 'Invalid') {
        return FALSE;
      }

      // Get the week number.
      $liveScoring[$uid][0][0]['week'] = (int) $liveScoringXml['week'];

      // If the league is a head to head league.
      if (isset($liveScoringXml->matchup)) {
        // Loop through each matchup.
        $i = 0;
        foreach ($liveScoringXml->matchup as $matchup) {
          // Loop through each franchise.
          $j = 0;
          foreach ($matchup->franchise as $franchise) {
            $liveScoring[$uid][$i][$j]['id'] = (int) $franchise['id'];
            $liveScoring[$uid][$i][$j]['score'] = (double) $franchise['score'];
            $liveScoring[$uid][$i][$j]['is_home'] = (int) $franchise['isHome'];
            $liveScoring[$uid][$i][$j]['result'] = (string) $franchise['result'];

            // Get each player's scores.
            foreach ($franchise->player as $player) {
              $liveScoring[$uid][$i][$j]['players'][] = array(
                'id' => (int) $player['id'],
                'status' => (string) $player['status'],
                'score' => (double) $player['score'],
              );
            }
            $j++;
          }
          $i++;
        }
      }
      // Not a head to head league.
      else {
        // Loop through each franchise.
        $i = 0;
        foreach ($liveScoringXml->franchise as $franchise) {
          $liveScoring[$uid][0][$i]['id'] = (int) $franchise['id'];
          $liveScoring[$uid][0][$i]['score'] = (double) $franchise['score'];
          $liveScoring[$uid][0][$i]['is_home'] = (int) $franchise['isHome'];
          $liveScoring[$uid][0][$i]['result'] = (string) $franchise['result'];

          // Get each player's scores.
          foreach ($franchise->player as $player) {
            $liveScoring[$uid][0][$i]['players'][] = array(
              'id' => (int) $player['id'],
              'status' => (string) $player['status'],
              'score' => (double) $player['score'],
            );
          }
          $i++;
        }
      }

      // Set the cache for 5 minutes.
      cache_set('myfantasyleague_' . $uid . '_live_scoring_week_' . $week, $liveScoring[$uid], 'cache', time() + 300);
    }
  }
  return $liveScoring[$uid];
}

/**
 * Check if the user has a league setup.
 *
 * @param int $uid
 *   The user's ID.
 *
 * @return bool
 *   True if the user has a league set up, false otherwise.
 */
function myfantasyleague_user_has_league($uid) {
  $league_info = myfantasyleague_get_league_info($uid);
  return empty($league_info) ? FALSE : TRUE;
}

/**
 * Retrieve league info for a specific user or global.
 *
 * @param int $uid
 *   The user ID whose league we are getting (0 if global).
 *
 * @return array
 *   An array containing the league ID and league year.
 */
function myfantasyleague_get_league_info($uid = 0) {
  $league_info = array();
  $result = db_select('myfantasyleague_users')
  ->fields('myfantasyleague_users', array('league_id', 'league_year'))
  ->condition('uid', $uid)
  ->execute();
  if ($res = $result->fetchAssoc()) {
    $league_info = array(
      'league_id' => $res['league_id'],
      'league_year' => $res['league_year'],
    );
  }

  return $league_info;
}

/**
 * Check if the standings columns for the supplied user are saved to the DB.
 *
 * @param int $uid
 *   The user ID whose league we are getting (0 if global).
 *
 * @return bool
 *   True if standings columns are set for this user, false otherwise.
 */
function myfantasyleague_standings_columns_set($uid = 0) {
  $result = db_select('myfantasyleague_standings_columns')
  ->fields('myfantasyleague_standings_columns', array('uid'))
  ->condition('uid', $uid)
  ->execute();
  if ($result->fetchAssoc()) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Retrieve a list of standings columns, ordered by weight.
 *
 * @param int $uid
 *   The user ID whose standings columns we are getting.
 * @return array
 *   An array of standings columns objects, keyed by the column name and
 *   ordered by weight.
 */
function myfantasyleague_standings_columns($uid = 0) {
  $columns = &drupal_static(__FUNCTION__);

  // All available standings columns are cached for performance.
  if (!isset($columns[$uid])) {
    if ($cache = cache_get('myfantasyleague_' . $uid . '_standings_columns')) {
      $columns[$uid] = $cache->data;
    }
    else {
      $columns[$uid] = db_select('myfantasyleague_standings_columns', 'columns')
      ->fields('columns', array('name', 'status', 'weight', 'uid'))
      ->condition('uid', $uid)
      ->orderBy('weight')
      ->execute()
      ->fetchAllAssoc('name');

      // If columns aren't set, save default status and weights.
      if (empty($columns[$uid])) {
        $columns[$uid] = myfantasyleague_standings_columns_defaults();
      }

      cache_set('myfantasyleague_' . $uid . '_standings_columns', $columns[$uid]);
    }
  }

  return $columns[$uid];
}

/**
 * Retrieve a list of standings columns that are enabled, ordered by weight.
 *
 * @param int $uid
 *   The user ID whose standings columns we are getting.
 *
 * @return array
 *   An array of enabled standings columns objects, keyed by the column name
 *   and ordered by weight.
 */
function myfantasyleague_standings_columns_enabled($uid = 0) {
  $columns_enabled = &drupal_static(__FUNCTION__);

  // All enabled standings columns are cached for performance.
  if (!isset($columns_enabled[$uid])) {
    if ($cache = cache_get('myfantasyleague_' . $uid . '_standings_columns_enabled')) {
      $columns_enabled[$uid] = $cache->data;
    }
    else {
      $columns_enabled[$uid] = db_select('myfantasyleague_standings_columns', 'columns')
      ->fields('columns', array('name', 'status', 'weight', 'uid'))
      ->condition('status', 1)
      ->condition('uid', $uid)
      ->orderBy('weight')
      ->execute()
      ->fetchAllAssoc('name');

      cache_set('myfantasyleague_' . $uid . '_standings_columns_enabled', $columns_enabled[$uid]);
    }
  }

  return $columns_enabled[$uid];
}

/**
 * Retrieve a list of standings columns with the default status and weight.
 *
 * @return array
 *   An array of standings columns objects, keyed by the column name and
 *   ordered by weight.
 */
function myfantasyleague_standings_columns_defaults() {
  $team = new stdClass;
  $team->name = 'Team';
  $team->status = 1;
  $team->weight = 0;
  $wlt = new stdClass;
  $wlt->name = 'W-L-T';
  $wlt->status = 1;
  $wlt->weight = 1;
  $divwlt = new stdClass;
  $divwlt->name = 'Div W-L-T';
  $divwlt->status = 0;
  $divwlt->weight = 2;
  $confwlt = new stdClass;
  $confwlt->name = 'Conf W-L-T';
  $confwlt->status = 0;
  $confwlt->weight = 3;
  $allplaywlt = new stdClass;
  $allplaywlt->name = 'All Play W-L-T';
  $allplaywlt->status = 0;
  $allplaywlt->weight = 4;
  $ptsfor = new stdClass;
  $ptsfor->name = 'Pts For';
  $ptsfor->status = 1;
  $ptsfor->weight = 5;
  $avgptsfor = new stdClass;
  $avgptsfor->name = 'Avg Pts For';
  $avgptsfor->status = 0;
  $avgptsfor->weight = 6;
  $ptsagainst = new stdClass;
  $ptsagainst->name = 'Pts Against';
  $ptsagainst->status = 1;
  $ptsagainst->weight = 7;
  $avgptsagainst = new stdClass;
  $avgptsagainst->name = 'Avg Pts Against';
  $avgptsagainst->status = 0;
  $avgptsagainst->weight = 8;
  $maxptsagainst = new stdClass;
  $maxptsagainst->name = 'Max Pts Against';
  $maxptsagainst->status = 0;
  $maxptsagainst->weight = 9;
  $minptsagainst = new stdClass;
  $minptsagainst->name = 'Min Pts Against';
  $minptsagainst->status = 0;
  $minptsagainst->weight = 10;
  $streak = new stdClass;
  $streak->name = 'Streak';
  $streak->status = 0;
  $streak->weight = 11;
  $potentialpts = new stdClass;
  $potentialpts->name = 'Potential Pts';
  $potentialpts->status = 0;
  $potentialpts->weight = 12;
  $blindbidding = new stdClass;
  $blindbidding->name = 'Blind Bidding';
  $blindbidding->status = 0;
  $blindbidding->weight = 13;
  $offpts = new stdClass;
  $offpts->name = 'Off Pts';
  $offpts->status = 0;
  $offpts->weight = 14;
  $defpts = new stdClass;
  $defpts->name = 'Def Pts';
  $defpts->status = 0;
  $defpts->weight = 15;
  $powerrank = new stdClass;
  $powerrank->name = 'Power Rank';
  $powerrank->status = 0;
  $powerrank->weight = 16;
  $acctbalance = new stdClass;
  $acctbalance->name = 'Acct Balance';
  $acctbalance->status = 0;
  $acctbalance->weight = 17;
  $salary = new stdClass;
  $salary->name = 'Salary';
  $salary->status = 0;
  $salary->weight = 18;
  $victorypts = new stdClass;
  $victorypts->name = 'Victory Pts';
  $victorypts->status = 0;
  $victorypts->weight = 19;
  return array(
    'Team' => $team,
    'W-L-T' => $wlt,
    'Div W-L-T' => $divwlt,
    'Conf W-L-T' => $confwlt,
    'All Play W-L-T' => $allplaywlt,
    'Pts For' => $ptsfor,
    'Avg Pts For' => $avgptsfor,
    'Pts Against' => $ptsagainst,
    'Avg Pts Against' => $avgptsagainst,
    'Max Pts Against' => $maxptsagainst,
    'Min Pts Against' => $minptsagainst,
    'Streak' => $streak,
    'Potential Pts' => $potentialpts,
    'Blind Bidding' => $blindbidding,
    'Off Pts' => $offpts,
    'Def Pts' => $defpts,
    'Power Rank' => $powerrank,
    'Acct Balance' => $acctbalance,
    'Salary' => $salary,
    'Victory Pts' => $victorypts,
  );
}

/**
 * Return the correct data depending on which column we are looking at.
 *
 * @param string $column
 *   The column name.
 * @param array $franchise
 *   An array with the franchise information.
 * @param array $league
 *   An array with the league information.
 * @param int $totalgames
 *   The total number of games played.
 *
 * @return string
 *   Filtered data for the column the user is trying to get information from.
 */
function myfantasyleague_get_column_info($column, $franchise, $league, $totalgames) {
  if ($column == 'Team') {
    return check_plain($league['franchises'][$franchise['id']]['name']);
  }
  elseif ($column == 'W-L-T') {
    return check_plain($franchise['h2hw'] . '-' . $franchise['h2hl'] . '-' . $franchise['h2ht']);
  }
  elseif ($column == 'Div W-L-T') {
    return check_plain($franchise['divw'] . '-' . $franchise['divl'] . '-' . $franchise['divt']);
  }
  elseif ($column == 'Conf W-L-T') {
    return check_plain($franchise['confw'] . '-' . $franchise['confl'] . '-' . $franchise['conft']);
  }
  elseif ($column == 'All Play W-L-T') {
    return check_plain($franchise['all_play_w'] . '-' . $franchise['all_play_l'] . '-' . $franchise['all_play_t']);
  }
  elseif ($column == 'Streak') {
    return check_plain($franchise['streak_len'] . $franchise['streak_type']);
  }
  elseif ($column == 'Pts For') {
    return check_plain($franchise['pf']);
  }
  elseif ($column == 'Avg Pts For') {
    if ($totalgames == 0) {
      return 0;
    }
    return check_plain(number_format($franchise['pf'] / $totalgames, $league['precision']));
  }
  elseif ($column == 'Pts Against') {
    return check_plain($franchise['pa']);
  }
  elseif ($column == 'Avg Pts Against') {
    if ($totalgames == 0) {
      return 0;
    }
    return check_plain(number_format($franchise['pa'] / $totalgames, $league['precision']));
  }
  elseif ($column == 'Max Pts Against') {
    return check_plain($franchise['maxpa']);
  }
  elseif ($column == 'Min Pts Against') {
    return check_plain($franchise['minpa']);
  }
  elseif ($column == 'Potential Pts') {
    return check_plain($franchise['pp']);
  }
  elseif ($column == 'Blind Bidding') {
    return check_plain($franchise['bbidspent']);
  }
  elseif ($column == 'Off Pts') {
    return check_plain($franchise['op']);
  }
  elseif ($column == 'Def Pts') {
    return check_plain($franchise['dp']);
  }
  elseif ($column == 'Power Rank') {
    return check_plain($franchise['pwr']);
  }
  elseif ($column == 'Acct Balance') {
    return check_plain($franchise['acct']);
  }
  elseif ($column == 'Salary') {
    return check_plain($franchise['salary']);
  }
  elseif ($column == 'Victory Pts') {
    return check_plain($franchise['vp']);
  }
  return '';
}
