<?php
/**
 * Created by JetBrains PhpStorm.
 * User: Nico Heulsen
 * Email: info@artx.be
 * Date: 25/11/11
 * Time: 11:50
 */

define('BACKDROP_NO_REPEAT', 0);
define('BACKDROP_REPEAT', 1);
define('BACKDROP_REPEAT_X', 2);
define('BACKDROP_REPEAT_Y', 3);
define('BACKDROP_REPEAT_INHERIT', 4);


/**
 * Implements hook_permission().
 *
 * @return array
 */
function backdrop_permission() {
  return array(
    'administer backdrops' => array(
      'title' => t('Administer backdrops'),
      'description' => t('Create and manage backdrop configuration.'),
    ),
    'manage backdrops' => array(
      'title' => t('Manage backdrops'),
      'description' => t('Enable and disable backdrops.'),
    ),
  );
}

/**
 * Implements hook_menu().
 *
 * @return array
 */
function backdrop_menu() {
  $items = array();

  $items['admin/structure/media/backdrop'] = array(
    'title' => 'Backdrop',
    'description' => 'Create and manage backdrop images',
    'page callback' => 'backdrop_list_page',
    'access arguments' => array('administer backdrops'),
    'file' => 'includes/backdrop.pages.inc',
  );

  $items['admin/config/media/backdrop'] = array(
      'title' => 'Backdrop configuration',
      'description' => 'Manage backdrop global settings',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('backdrop_admin_settings_form'),
      'access arguments' => array('administer backdrops'),
      'file' => 'includes/backdrop.admin.inc',
    );


  $items['admin/structure/media/backdrop/%backdrop_id/settings'] = array(
    'title' => 'Backdrop settings',
    'description' => 'Manage the settings of this backdrop',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('backdrop_upload_form', 4),
    'access arguments' => array('administer backdrops'),
  );

  $items['admin/structure/media/backdrop/%backdrop_id/delete'] = array(
    'title' => 'Delete backdrop',
    'description' => 'Delete this backdrop',
    'page callback' => 'backdrop_delete_backdrop_page',
    'page arguments' => array(4),
    'access arguments' => array('administer backdrops'),
  );

  $items['admin/structure/media/backdrop/%backdrop_id/enable'] = array(
    'title' => 'Enable backdrop',
    'description' => 'Set the current backdrop as the active backdrop',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('backdrop_set_active_form', 4),
    'access arguments' => array('manage backdrops'),
    'file' => 'includes/backdrop.pages.inc',
  );

  $items['admin/structure/media/backdrop/%backdrop_id/disable'] = array(
    'title' => 'Disable backdrop',
    'description' => 'Set the current backdrop as inactive backdrop',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('backdrop_set_inactive_form', 4),
    'access arguments' => array('manage backdrops'),
    'file' => 'includes/backdrop.pages.inc',
  );

  return $items;
}

/**
 * Menu helper
 *
 * @param $id
 * @return array|bool
 */
function backdrop_id_load($id) {
  if (!empty($id) && is_numeric($id)) {
    return backdrop_load_backdrop($id);
  }

  return FALSE;
}

/**
 * Implements hook_theme().
 *
 * @return array
 */
function backdrop_theme() {
  $theme = array();

  $theme['backdrop_upload_form'] = array(
    'render element' => 'form',
    'file' => 'theme/backdrop.theme.inc',
  );

  $theme['backdrop_active'] = array(
    'variables' => array('backdrop' => NULL),
    'file' => 'theme/backdrop.theme.inc',
  );

  $theme['backdrop_inactive'] = array(
    'variables' => array('backdrops' => NULL),
    'file' => 'theme/backdrop.theme.inc',
  );

  return $theme;
}


/**
 * The backdrop upload form
 *
 * @param $form
 * @param $form_state
 * @return void
 */
function backdrop_upload_form($form, &$form_state, $backdrop = NULL) {
  $form['id'] = array(
    '#type' => 'value',
    '#value' => !empty($backdrop) ? $backdrop['id'] : 0,
    '#required' => FALSE,
  );

  //initialize some variables
  $file_validators = array();
  $file_description_items = array();

  //File types
  $file_types = variable_get('backdrop_settings_allowed_file_types', 'png jpg gif');
  $file_validators['file_validate_extensions'] = array($file_types);
  $file_description_items[] = t('Filetype should be one of the following (!filetypes).', array('!filetypes' => $file_types));

  //Resolution
  $resolution = variable_get('backdrop_settings_max_resolution');
  if (!empty($resolution)) {
    $is_exact_resolution = variable_get('backdrop_settings_exact_resolution', FALSE);
    $file_validators['file_validate_image_resolution'] = $is_exact_resolution ? array($resolution, $resolution) : array($resolution);
    if ($is_exact_resolution) {
      $file_description_items[] = t('Resolution is exact !resolution.', array('!resolution' => $resolution));
    }
    else{
      $file_description_items[] = t('Resolution is max !resolution.', array('!resolution' => $resolution));
    }
  }

  //Filesize
  $php_max_file_size = (ini_get('upload_max_filesize') * 1024);
  $max_file_size = (variable_get('backdrop_settings_max_upload_size', $php_max_file_size) * 1024);
  if (!empty($max_file_size)) {
    $file_description_items[] = t('Filesize is max !max Kb.', array('!max' => ($max_file_size/1024)));
    $file_validators['file_validate_size'] = array($max_file_size);
  }

  //build description
  $description = t('The uploaded file should match following criteria:');
  $description .= theme('item_list', array('items' => $file_description_items));

  $form['fid'] = array(
    '#type' => 'managed_file',
    '#title' => t('Image'),
    '#description' => $description,
    '#default_value' => !empty($backdrop)? $backdrop['fid'] : '',
    '#required' => FALSE,
    '#upload_location' => 'public://' . variable_get('backdrop_settings_file_path', 'backdrops'),
    '#upload_validators' => $file_validators,
  );

  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
    '#description' => t('The name of this backdrop theme.'),
    '#size' => 25,
    '#default_value' => !empty($backdrop) ? $backdrop['name'] : '',
    '#required' => TRUE,
  );

  $form['description'] = array(
    '#type' => 'textarea',
    '#title' => t('Description'),
    '#description' => t('A brief description of this backdrop theme.'),
    '#rows' => 3,
    '#default_value' => !empty($backdrop) ? $backdrop['description'] : '',
    '#required' => FALSE,
  );

  $form['selector'] = array(
    '#type' => 'textfield',
    '#title' => t('CSS selector'),
    '#description' => t('The css selector.  When no selector is given the "body" selector is used.'),
    '#size' => 10,
    '#default_value' => !empty($backdrop) ? $backdrop['selector'] : '',
    '#required' => FALSE,
  );
  
  $form['color'] = array(
    '#type' => 'textfield',
    '#title' => t('Background color'),
    '#description' => t('The background color.  A hex value should be given (for example: #06283d).'),
    '#size' => 10,
    '#default_value' => !empty($backdrop) ? $backdrop['color'] : '',
    '#required' => FALSE,
  );

  $form['is_active'] = array(
    '#type' => 'value',
    '#value' => !empty($backdrop) ? $backdrop['is_active'] : 0,
  );

  $form['repeat'] = array(
    '#type' => 'select',
    '#title' => t('Background repeat'),
    '#description' => t('The css background-repeat attribute.'),
    '#options' => backdrop_fetch_repeat_options(),
    '#default_value' => !empty($backdrop) ? $backdrop['repeat_mode'] : '',
    '#required' => FALSE,
  );

  $form['data'] = array(
    '#type' => 'textarea',
    '#title' => t('Additional css'),
    '#description' => t('You can add additional css in here.'),
    '#cols' => 10,
    '#rows' => 5,
    '#default_value' => !empty($backdrop) ? $backdrop['data'] : '',
    '#required' => FALSE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => !empty($backdrop) ? t('Update') : t('Add backdrop'),
  );

  return $form;
}

/**
 * Validation handler of the backdrop upload form
 *
 * @param $form
 * @param $form_state
 * @return void
 */
function backdrop_upload_form_validate($form, &$form_state) {
  //dpm($form_state);
  
}

/**
 * Submit handler of the backdrop upload form
 *
 * @param $form
 * @param $form_state
 * @return void
 */
function backdrop_upload_form_submit($form, &$form_state) {
  $backdrop = $form_state['values'];
  if ($backdrop['id'] == 0) {
    if (!empty($backdrop['fid'])) {
      backdrop_update_file_status($backdrop['fid']);
      backdrop_insert_backdrop($backdrop);
    }
  }
  else{
    //load backdrop to check if we need to update the file
    $orginal = backdrop_load_backdrop($backdrop['id']);
    if ($backdrop['fid'] != $orginal['fid']) {
      backdrop_update_file_status($backdrop['fid']);
    }

    backdrop_update_backdrop($backdrop);
    drupal_goto('admin/structure/media/backdrop');
  }
}

/**
 * Update the file status to permanent and update file usage
 *
 * @param $fid
 * @return void
 */
function backdrop_update_file_status($fid) {
  global $user;

  //save file permanently
  $file = file_load($fid);
  $file->status = FILE_STATUS_PERMANENT;
  file_save($file);

  file_usage_add($file, 'backdrop', 'backdrop', $user->uid);

  return $file;
}

/**
 * Prepare a backdrop before display
 *
 * @param $backdrop
 * @return void
 */
function backdrop_prepare_backdrop(&$backdrop) {
  if (user_access('administer backdrop')) {
    $backdrop['links']['settings'] = l(t('Settings'), 'admin/structure/media/backdrop/' . $backdrop['id'] . '/settings');
    $backdrop['links']['delete'] = l(t('Delete'), 'admin/structure/media/backdrop/' . $backdrop['id'] . '/delete');
  }

  if (user_access('manage backdrops')) {
    $backdrop['links']['disable'] = l(t('Disable'), 'admin/structure/media/backdrop/' . $backdrop['id'] . '/disable');
    $backdrop['links']['enable'] = l(t('Enable'), 'admin/structure/media/backdrop/' . $backdrop['id'] . '/enable');
  }

  //@todo: do a module_invoke so other modules can alter this
}

/**
 * Load a backdrop
 *
 * @param $id
 * @return array
 */
function backdrop_load_backdrop($id) {
  return db_select('backdrop', 'b')
    ->fields('b')
    ->condition('id', $id, '=')
    ->execute()
    ->fetchAssoc();
}

/**
 * Load active backdrop
 *
 * @param $id
 * @return array
 */
function backdrop_load_active_backdrop() {
  return db_select('backdrop', 'b')
    ->fields('b')
    ->condition('is_active', 1, '=')
    ->execute()
    ->fetchAssoc();
}

/**
 * Load all backdrop
 *
 * @return array
 */
function backdrop_load_all_backdrops() {
  $result = db_select('backdrop', 'b')
    ->fields('b')
    ->execute();

  $data = array();
  while($record = $result->fetchAssoc()) {
    $data[$record['is_active']][] = $record;
  }

  return $data;
}

/**
 * Set all backdrops inactive
 *
 * @return DatabaseStatementInterface
 */
function backdrop_set_all_backdrops_inactive() {
  return db_update('backdrop')
    ->fields(array(
      'is_active' => 0,
    ))
    ->execute();
}

/**
 * Set a specific backdrop active
 *
 * @param $id
 * @return DatabaseStatementInterface
 */
function backdrop_set_backdrop_active($id) {
  return db_update('backdrop')
    ->fields(array(
      'is_active' => 1,
    ))
    ->condition('id', $id, '=')
    ->execute();
}

/**
 * Insert a specific backdrop
 *
 * @param $backdrop
 * @return void
 */
function backdrop_insert_backdrop($backdrop) {
  db_insert('backdrop')
    ->fields(array(
      'name' => $backdrop['name'],
      'description' => $backdrop['description'],
      'fid' => $backdrop['fid'],
      'is_active' => $backdrop['is_active'],
      'selector' => $backdrop['selector'],
      'color' => $backdrop['color'],
      'repeat_mode' => $backdrop['repeat'],
      'data' => $backdrop['data'],
    ))
    ->execute();
}

/**
 * Update a specific backdrop
 *
 * @param $backdrop
 * @return void
 */
function backdrop_update_backdrop($backdrop) {
  db_update('backdrop')
    ->fields(array(
      'name' => $backdrop['name'],
      'description' => $backdrop['description'],
      'fid' => $backdrop['fid'],
      'is_active' => $backdrop['is_active'],
      'selector' => $backdrop['selector'],
      'color' => $backdrop['color'],
      'repeat_mode' => $backdrop['repeat'],
      'data' => $backdrop['data'],
    ))
    ->condition('id', $backdrop['id'], '=')
    ->execute();
}

/**
 * Delete a specific backdrop
 *
 * @param $id
 * @return DatabaseStatementInterface
 */
function backdrop_delete_backdrop($id) {
  return db_delete('backdrop')
    ->condition('id', $id)
    ->execute();
}

/**
 * Implements hook_preprocess html
 *
 * @param $vars
 * @return void
 */
function backdrop_preprocess_html(&$vars){
  $backdrop = backdrop_load_active_backdrop();
  $css = backdrop_generate_css($backdrop);
  if (!empty($css)) {
    drupal_add_css($css, array('type' => 'inline', 'group' => 1000));
  }
}

/**
 * Generates the css based on the given backdrop
 *
 * @param $backdrop
 * @return void
 */
function backdrop_generate_css($backdrop) {
  $css = '';

  if (!empty($backdrop)) {
   $background_repeat = backdrop_fetch_repeat_attribute($backdrop['repeat_mode']);

    $additional_css = '';
    $additional_css .= !empty($backdrop['color']) ? 'background-color: #'. $backdrop['color'] . ";\n" : '';
    $additional_css .= 'background-position: top center;';
    $additional_css .= 'background-repeat: '. $background_repeat . ";\n";

    foreach ((array)explode("\n", $backdrop['data']) as $item) {
      $additional_css .= check_plain($item);
    }

    $file = file_load($backdrop['fid']);
    if (!empty($file)) {
      $css_selector = !empty($backdrop['selector']) ? $backdrop['selector'] : 'body';
      $css .= $css_selector . " {
        background-image: url('" . file_create_url($file->uri) . "');
        " . $additional_css . "
      }\n";
    }
  }

  return $css;
}


/**
 * Returns an array with all repeat options
 *
 * @return array
 */
function backdrop_fetch_repeat_options(){
  return array(
    BACKDROP_NO_REPEAT => t('No repeat'),
    BACKDROP_REPEAT => t('Repeat'),
    BACKDROP_REPEAT_X => t('Repeat X'),
    BACKDROP_REPEAT_Y => t('Repeat Y'),
    BACKDROP_REPEAT_INHERIT => t('Inherit')
  );
}

/**
 * Returns the specific attribute value
 *
 * @param $index
 * @return string
 */
function backdrop_fetch_repeat_attribute($index) {
  switch ($index) {
    case 0:
      return 'no-repeat';
      break;

    case 1:
      return 'repeat';
      break;

    case 2:
      return 'repeat-x';
      break;

    case 3:
      return 'repeat-y';
      break;

    case 4:
      return 'inherit';
      break;

    default:
      return 'no-repeat';
      break;
  }
}
