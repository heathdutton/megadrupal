
<?php
class SPSTestHookControllerUnitTest extends SPSBaseUnitTest {
  static function getInfo() {
    return array(
      'name' => 'SPS Test HookController Unit Tests',
      'description' => 'Test the public interface of the Test HookController',
      'group' => 'SPS',
    );
  }

  public function testTestHookController_moduleInvokeAll() {
    $controller = new \Drupal\sps\Test\HookController();
    $controller->setInvokeAll("test", function($stuff) {return array("bob"=>$stuff);});

    $this->assertEqual($controller->moduleInvokeAll("test", 'joe'), array("bob"=>'joe'), "::moduleInvokeAll calls a closure pass into setModuleInvokeAll", "SPS");


    $controller->setInvokeAll("test", array($this, "invokeAllTest"));
    $this->assertEqual(
      $controller->moduleInvokeAll("test", "Jane"),
      $this->invokeAllTest("Jane"),
      "::moduleInvokeAll calls a method pass into setModuleInvokeAll", "SPS");

  }

  public function invokeAllTest($stuff) {
    return array("joe"=> $stuff);
  }
  public function testTestHookController_moduleInvoke() {
    $controller = new \Drupal\sps\Test\HookController();
    $controller->setModuleInvoke("module_a", "test", function($stuff) {return array("bob"=>$stuff);});

    $this->assertEqual(
      $controller->moduleInvoke("module_a", "test", 'joe'), 
      array("bob"=>'joe'), 
      "::moduleInvoke calls a closure pass into setModuleInvokeAll", "SPS"
    );

    $controller->setModuleInvoke("module_a", "test", array($this, "invokeTest"));
    $this->assertEqual(
      $controller->moduleInvoke("module_a", "test", "Jane"),
      $this->invokeTest("Jane"),
      "::moduleInvoke calls a method pass into setModuleInvokeAll", "SPS"
    );

  }
  public function invokeTest($stuff) {
    return array("joe"=> $stuff);
  }
  public function testTestHookController_drupalAlter() {
    $controller = new \Drupal\sps\Test\HookController();
    $controller->setDrupalAlter("test", function(&$stuff) { $stuff['bob'] = "joe";});

    $item = array();
    $controller->DrupalAlter("test",$item ); 
    $this->assertEqual(
      $item,
      array("bob"=>'joe'), 
      "::DrupalAlter calls a closure pass into setDrupalAlter", "SPS"
    );

    $controller->setDrupalAlter("test", array($this, "alterTest"));
    $item = array();
    $item2 = array();
    $controller->drupalAlter("test", $item);
    $this->alterTest($item2);
    $this->assertEqual(
      $item,
      $item2,
      "::DrupalAlter calls a method pass into setDrupalAlter", "SPS"
    );

  }
  public function alterTest(&$item) {
    $item['jane']='sue';
  }

  public function testTestHookController_moduleImplements() {
    $controller = new \Drupal\sps\Test\HookController();
    $controller->setModuleInvoke("module_a", "test", function($stuff) {return array("bob"=>$stuff);});

    $this->assertEqual($controller->moduleImplements("test"), array("module_a"), "::moduleImplements should return the array set in setModuleImplements", "SPS");

  }

  public function getForm() {
    $args = func_get_args();
    return array("args"=>$args);
  }
  public function testDrupalGetForm() {
  
    $name = "test_from";
    $controller = new \Drupal\sps\Test\HookController();
    $controller->setDrupalGetForm($name, array($this, "getForm"));


    $this->assertEqual(
      $controller->drupalGetForm($name, array("param1")), 
      $this->getForm(array("param1")), 
      "::drupalGetForm should return the form set in setDrupalGetForm", "SPS");
  }
}

