<?php
/**
 * @file
 * Provide API documentation for a services module endpoint.
 */

/**
 * Implements hook_services_resources().
 */
function services_definition_services_resources() {
  $resources['definition'] = array();

  $resources['definition']['index'] = array(
    'help' => 'Retrieves the definition of the website.',
    'file' => array(
      'type' => 'inc',
      'module' => 'services_definition',
      'name' => 'services_definition.resource',
    ),
    'callback' => 'services_definition_index',
    'access callback' => 'user_access',
    'access arguments append' => FALSE,
    'access arguments' => array('retrieve definition'),
    'args' => array(),
  );
  return $resources;
}

/**
 * Implements hook_perm().
 */
function services_definition_permission() {
  return array(
    'retrieve definition' => array(
      'title' => t('Retrieve Services Definition'),
      'description' => t('Retrieve services definition for current endpoint.'),
    ),
  );
}

/**
 * Implements hook_ctools_plugin_pre_alter().
 */
function services_definition_ctools_plugin_pre_alter(&$plugin, &$info) {
  // Override a function defined by the plugin.
  if ($info['type'] == 'export_ui' && (!empty($plugin['schema']) && $plugin['schema'] == 'services_endpoint')) {
    $plugin['allowed operations']['definition'] = array('title' => 'Definitions');
    $plugin['menu']['items']['definition'] = array(
      'path' => 'list/%ctools_export_ui/definition',
      'title' => 'Definitions',
      'page callback' => 'services_definition_endpoint',
      'page arguments' => array(4),
      'access arguments' => array('administer services'),
      'type' => MENU_LOCAL_TASK,
    );
    $plugin['menu']['items']['define'] = array(
      'path' => 'list/%ctools_export_ui/definition/%/%',
      'title' => 'Define',
      'page callback' => 'services_definition_define',
      'page arguments' => array(4, 6, 7),
      'access arguments' => array('administer services'),
      'type' => MENU_CALLBACK,
    );
  }
}

/**
 * Callback to display contents of definition listing page.
 *
 * @param array $endpoint
 *   The services endpoint definition.
 * @param bool $exclude_disabled
 *   Boolean, allow excluding information about resources that are not currently
 *   enabled for the given $endpoint.
 *
 * @return array
 *   Render array containing contents of the page.
 */
function services_definition_endpoint($endpoint, $exclude_disabled = FALSE) {
  $endpoint_path = url('', array('absolute' => TRUE)) . $endpoint->path;

  // These are not translatable.
  $method_map = array(
    'retrieve'  => 'GET',
    'update' => 'PUT',
    'delete' => 'DELETE',
    'index' => 'GET',
    'create' => 'POST',
    'actions' => 'POST',
    'targeted_actions' => 'POST',
    'relationships' => 'GET',
  );

  $table_headers = array(
    t('name'),
    t('type'),
    t('required'),
    t('source'),
    t('description'),
  );

  $output = array();
  $output['heading'] = array(
    '#markup' => '<h2>API Definition</h2>',
  );

  module_load_include('inc', 'services', 'includes/services.resource_build');
  // Call _services_build_resources() directly instead of services_get_resources
  // to bypass caching.
  $resources = _services_build_resources();

  foreach ($resources as $key => $resource) {
    foreach ($resource as $index => $methods) {
      foreach ($methods as $method => $enabled) {
        $data = $resources[$key][$index][$method];
        $url = $endpoint_path . '/' . $key;

        if (!in_array($method, array('retrieve', 'create', 'update', 'delete', 'index'))) {
          $url .= '/' . $method;
        }

        // Allow special handling of disabled methods.
        $enabled = FALSE;
        if (isset($endpoint->resources[$key][$index][$method]) && is_array($endpoint->resources[$key][$index][$method])) {
          $enabled = TRUE;
        }

        if ($exclude_disabled && !$enabled) {
          continue;
        }

        if (!isset($output[$key])) {
          $output[$key] = array(
            '#type' => 'fieldset',
            '#title' => $key,
          );
        }

        // If there are any arguments make a table of their definitions.
        $table = '';

        if (isset($data['args']) && is_array($data['args'])) {
          $rows = array();
          foreach ($data['args'] as $argument) {
            if (is_array($argument['source'])) {
              if (key($argument['source']) == 'path') {
                $url .= '/{' . drupal_strtoupper($argument['name']) . '}';
              }
              $source = key($argument['source']);
              $source = ($source == 'data') ? t('post body') : $source;
            }
            elseif ($argument['source'] == 'data') {
              $source = t('post body');
            }

            $rows[] = array(
              $argument['name'],
              $argument['type'],
              ($argument['optional']) ? 'no' : 'yes',
              $source,
              isset($argument['description']) ? $argument['description'] : '',
            );
          }
          $table .= theme('table', array('header' => $table_headers, 'rows' => $rows));
        }

        if (isset($method_map[$method])) {
          $http_method = $method_map[$method];
        }
        elseif (isset($method_map[$index])) {
          $http_method = $method_map[$index];
        }

        // Is there any help text for the method?
        if (isset($data['help'])) {
          $data_string = '<p>' . $data['help'] . '</p>';
        }

        // HTTP method and URL used to access this method.
        $data_string .= '<p><strong>' . $http_method . '</strong> : ' . $url . '</p>';

        // Append any information we corrected above about arguments.
        $data_string .= $table;

        $output[$key][$method] = array(
          '#type' => 'fieldset',
          '#title' => $method,
          '#value' => $data_string,
        );

        // Collapse the information for any method that is disabled. This
        // removes a lot of clutter from the page but still keeps the
        // information there if you need or want it.
        if (!$enabled) {
          $output[$key][$method]['#title'] .= ' ' . t('[disabled]');
          $output[$key][$method]['#attributes'] = array('class' => array('collapsed', 'collapsible'));
          $output[$key][$method]['#attached'] = array(
            'library' => array(
              array('system', 'drupal.form'),
              array('system', 'drupal.collapse'),
            ),
          );
        }
      }
    }
  }

  return $output;
}
