<?php

/**
 * @file
 * OG tuning.
 *
 * I'm not proud of this code, but OG is terrible.
 */

/**
 * Implements hook_menu().
 */
function og_tuning_menu() {
  $items = array();

  $items['group/%/%/add'] = array(
    'title'            => "Add content",
    'description'      => "Add content into this group",
    'page callback'    => 'og_tuning_node_add',
    'page arguments'   => array(1, 2),
    'access callback'  => 'og_tuning_ui_add_access',
    'access arguments' => array(1, 2),
    'type'             => MENU_NORMAL_ITEM,
  );
  foreach (node_type_get_types() as $type) {
    if (!og_is_group_content_type('node', $type->type)) {
      continue;
    }
    $items['group/%/%/add/' . $type->type] = array(
      'title'            => $type->name,
      'title callback'   => 'check_plain',
      'description'      => $type->description,
      'page callback'    => 'og_tuning_node_add_type',
      'page arguments'   => array(1, 2, 4),
      'access callback'  => 'og_ui_user_access_group',
      'access arguments' => array('create ' . $type->type . ' content', 1, 2),
      'type'             => MENU_NORMAL_ITEM,
    );
  }

  return $items;
}

/**
 * Implements hook_admin_paths().
 */
function og_tuning_admin_paths() {
  $paths = array();
  if (variable_get('node_admin_theme')) {
    $paths['group/*/*/add']   = true;
    $paths['group/*/*/add/*'] = true;
  }
  return $paths;
}

/**
 * Implements hook_og_ui_get_group_admin().
 */
function og_tuning_og_ui_get_group_admin($group_type, $gid) {
  $items = array();
  if (og_tuning_ui_add_access($group_type, $gid)) {
    $items['add_content'] = array(
      'title'       => t('Add content'),
      'description' => t('Add content into this group.'),
      'href'        => 'add',
    );
  }
  return $items;
}

/**
 * Implements hook_block_info().
 */
function og_tuning_block_info() {
  $items = array();
  if (module_exists('og_context')) {
    $items['group_add_content'] = array(
      'info'  => t("Add content"),
      'cache' => DRUPAL_NO_CACHE,
    );
  }
  return $items;
}

/**
 * Implements hook_block_view().
 */
function og_tuning_block_view($delta = '') {
  switch ($delta) {

    case 'group_add_content':
      if ($context = og_context()) {
        $links = array();
        foreach (node_type_get_names() as $type => $name) {
          if (!og_is_group_content_type('node', $type)) {
            continue;
          }
          $base = 'group/' . $context['group_type'] . '/' . $context['gid'];
          if (og_ui_user_access_group('create ' . $type . ' content', $context['group_type'], $context['gid'])) {
            $links[] = array(
              'href'  => $base . '/add/' . $type,
              'title' => $name,
            );
          }
        }
        if (!empty($links)) {
          return array(
            'subject' => t("Add content"),
            'content' => theme('links', array('links' => $links))
          );
        }
      }
      break;
  }
}

/**
 * Menu access callback.
 */
function og_tuning_ui_add_access($group_type, $gid) {
  // We have no other choices than iterating on content types in order to
  // know if those content types can be added into groups.
  foreach (node_type_get_names() as $type => $name) {
    if (og_is_group_content_type('node', $type) &&
        og_ui_user_access_group('create ' . $type . ' content', $group_type, $gid))
    {
      return true;
    }
  }
  return false;
}

/**
 * Node add types liste.
 */
function og_tuning_node_add($group_type, $gid) {

  og_set_breadcrumb($group_type, $gid);

  $content = array();
  foreach (node_type_get_types() as $type) {

    if (!og_is_group_content_type('node', $type->type)) {
      continue;
    }

    $path = 'group/' . $group_type . '/' . $gid . '/add/actu';
    $item = menu_get_item($path);

    if ($item['access']) {
      $content[] = array(
        'title'             => $item['title'],
        'href'              => $path,
        'description'       => $item['description'],
        'localized_options' => $item['localized_options'],
      );
    }
  }

  return theme('node_add_list', array('content' => $content));
}

/**
 * Singe node add page.
 */
function og_tuning_node_add_type($group_type, $gid, $type) {

  // Why does the fuck OG UI would be unable to it itself?
  // I am so angry it does not correctly uses the Drupal menu so I have to
  // rebuild the breadcrumb myself. Why does the fuck this module keeps
  // breaking core API usage over and over again? Seriously?
  og_set_breadcrumb($group_type, $gid, array(l(t('Add content'), "$group_type/$gid/add")));

  // Set OG context if none set.
  if (module_exists('og_context')) {
    $group = entity_load_single($group_type, $gid);
    og_context($group_type, $group);
  }

  // @see hook_init() implementation.
  module_load_include('inc', 'node', 'node.pages');

  return node_add($type);
}

/**
 * Implements hook_init().
 */
function og_tuning_init() {
  // I am so so so sorry for what I just did.
  // A bug somewhere prevent the file AJAX upload from working without
  // this: the form state does not contain the module and file references
  // in this specific case, core bug or my bug, can't guess.
  if (!empty($_POST['form_build_id']) &&
      ($form_state = form_state_defaults()) &&
      ($form = form_get_cache($_POST['form_build_id'], $form_state)))
  {
    require_once DRUPAL_ROOT . '/includes/ajax.inc';
    if ($form = ajax_get_form()) {
      module_load_include('inc', 'node', 'node.pages');
    }
  }
}

/**
 * Implements hook_field_widget_info().
 */
function og_tuning_field_widget_info() {
  $widgets = array();
  if (module_exists('og_context')) {
    $widgets['og_tuning_context'] = array(
      'label'       => t('OG context'),
      'description' => t('Determine OG group to use using the current group content, always set to NULL if no context found.'),
      'field types' => array('entityreference'),
    );
  }
  return $widgets;
}

/**
 * Implements hook_field_widget_form().
 */
function og_tuning_field_widget_form(
  &$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element)
{
  $element = array();

  switch ($instance['widget']['type']) {

    case 'og_tuning_context':

      if (!empty($items['delta'])) {
        // We are editing the node, do not change the group.
        $element['target_id'] = array(
          '#type'          => 'hidden',
          '#default_value' => $items[$delta]['target_id'],
        );
      } else if ($context = og_context()) {
        $element['target_id'] = array(
          '#type'          => 'hidden',
          '#default_value' => $context['gid'],
        );
      } else {
        // No group, sorry.
        // FIXME: Check if field is required.
        $element['target_id'] = array(
          '#type'          => 'hidden',
          '#default_value' => null,
        );
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_ctools_plugin_api().
 */
function og_tuning_ctools_plugin_api() {
  list($module, $api) = func_get_args();
  if ($module == "context" && $api == "context") {
    return array("version" => "3");
  }
}

/**
 * Implements hook_context_registry().
 */
function og_tuning_context_registry() {
  $items = array();
  if (module_exists('og_context')) {
    $items['conditions']['og_context'] = array(
      'title'       => t('OG context'),
      'description' => t('Current page has an OG context.'),
      'plugin'      => 'context_condition_og_context',
    );
  }
  return $items;
}

/**
 * Implements hook_context_plugins().
 */
function og_tuning_context_plugins() {
  $items = array();
  if (module_exists('og_context')) {
    $items['context_condition_og_context'] = array(
      'path'    => drupal_get_path('module', 'og_tuning') . '/lib/Og/Tuning/Context',
      'file'    => 'OgContextCondition.php',
      'class'   => 'Og\Tuning\Context\OgContextCondition',
      'handler' => 'Og\Tuning\Context\OgContextCondition',
    );
  }
  return $items;
}
