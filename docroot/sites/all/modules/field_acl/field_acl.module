<?php

/**
 * Implements hook_field_info().
 *
 * Provides the description of the field.
 */
function field_acl_permission() {
  return array(
    'Change Field ACL' => array(
      'title' => t('Change Field Acl'),
      'description' => t('Allows you to add users and remove users from nodes using the field_acl field'),
    ),
  );
}

/**
 * Implements hook_field_info().
 *
 * Provides the description of the field.
 */
function field_acl_field_info() {
  return array(
    // We name our field as the associative name of the array.
    'field_acl_uid' => array(
      'label' => t('User Access to Node'),
      'description' => t('Allows access to nodes via name'),
      'default_widget' => 'field_acl_widget',
      'default_formatter' => 'field_acl_display',
    ),
  );
}

/**
 * Implements hook_field_validate().
 */
function field_acl_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    if (!empty($item['uid'])) {
      if (! is_numeric($item['uid'])) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'field_acl_uid',
          'message' => t('uid'),
        );
      }
    }
  }
}

/**
 * Implements hook_field_is_empty().
 *
 * hook_field_is_emtpy() is where Drupal asks us if this field is empty.
 * Return TRUE if it does not contain data, FALSE if it does. This lets
 * the form API flag an error when required fields are empty.
 */
function field_acl_field_is_empty($item, $field) {
  return empty($item['uid']);
}

/**
 * Implements hook_field_formatter_info().
 */
function field_acl_field_formatter_info() {
  return array(
    // This formatter just displays the hex value in the color indicated.
    'field_acl_display' => array(
      'label' => t('Simple text-based formatter'),
      'field types' => array('field_acl_uid'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function field_acl_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  foreach ($items as $delta => $item) {
    $element[$delta] = array(
      '#type' => 'html_tag',
      '#tag' => 'span',
      '#value' => theme('username',array('account'=>user_load($item['uid']))),
    );
  }
  return $element;
}


/**
 * Implements hook_field_widget_info().
 */
function field_acl_field_widget_info() {
  return array(
    'field_acl_widget' => array(
      'label' => t('UIDs'),
      'field types' => array('field_acl_uid'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 *
 * hook_widget_form() is where Drupal tells us to create form elements for
 * our field's widget.
 */
function field_acl_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $value = isset($items[$delta]['uid']) ? user_load($items[$delta]['uid'])->name : '';
  $widget = $element;
  $widget['#delta'] = $delta;

  $widget += array(
    '#element_validate' => array('field_acl_validate'),
    '#type' => 'textfield',
    '#default_value' => $value,
    '#size' => USERNAME_MAX_LENGTH,
    '#maxlength' => USERNAME_MAX_LENGTH,
  );

  $element['uid'] = $widget;
  return $element;
}

/**
 *Convert the username to a uid
 */
function field_acl_validate($element, &$form_state) {
  //TODO: integrate bakery pull by a module_invoke_all so another module can add the account before this runs
  $delta = $element['#delta'];
  $field = $form_state['field'][$element['#field_name']][$element['#language']]['field'];
  $field_name = $field['field_name'];
  if (isset($form_state['values'][$field_name][$element['#language']][$delta]['uid'])) {
    $username = $form_state['values'][$field_name][$element['#language']][$delta]['uid'];
    //lookup the username
    $existing_account = user_load_by_name($username);
    if (isset($existing_account)) {
      form_set_value($element, $existing_account->uid, $form_state);
    } else {
      form_set_error('','A username is not valid');
    }
  }
}

/**
 * Validate the individual fields
 */
function field_acl_widget_validate($element, &$form_state) {
  $delta = $element['#delta'];
  $field = $form_state['field'][$element['#field_name']][$element['#language']]['field'];
  $field_name = $field['field_name'];
}

/**
 * Implements hook_field_widget_error().
 */
function field_acl_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'field_acl_invalid':
      form_error($element, $error['message']);
      break;
  }
}

/**
 * Helper module for node changes.
 */
function _nodechanges_format_changes_field_acl_uid($item, $entity, $bundle, $field_name) {
  foreach ($item['old_value'] as $old) {
    $olddisp[] = theme('username',array('account'=>user_load($old['uid'])));
  }
  foreach ($item['new_value'] as $new) {
    $newdisp[] = theme('username',array('account'=>user_load($new['uid'])));
  }
  $old = implode(', ',$olddisp);
  $new= implode(', ',$newdisp);
  $change = array(
    'old' => $old,
    'new' => $new,
    'new-prefix' => '&raquo;'
  );
  return $change;
}


/**
 * Start the ACL code
 */
function field_acl_enable() {
  node_access_rebuild();
}

/**
 * Used by the ACL module
 */
function field_acl_enabled() {
  return !field_acl_disabling();
}

/**
 * Implementation of hook_disable()
 */
function field_acl_disable() {
  field_acl_disabling(TRUE);
  node_access_rebuild();
}

/**
 * Remember if we have disabled access.
 */
function field_acl_disabling($set = NULL) {
  static $disabling = FALSE;

  if (isset($set)) {
    $disabling = $set;
  }
  return $disabling;
}

/**
 * Implements hook_node_insert().
 */
function field_acl_node_insert($node) {
  field_acl_check_update($node);
}

/**
 * Implements hook_node_presave().
 */
function field_acl_node_presave($node) {
  if ($node->nid) {
    field_acl_check_update($node);
  }
}

/**
 * todo: Document this function.
 */
function field_acl_check_update($node) {
  //There should be a better way to do this.
  $aclfield = null;
  foreach (field_info_instances('node', $node->type) as $field_name => $instance) {
    if ($instance['widget']['type'] == 'field_acl_widget' ) {
      $aclfield = $field_name;
    }
  }
  if (isset($aclfield)) {
    field_acl_update_acl($node,$aclfield);
  }
}

/**
 * Create an ACL if one is not there, and then build a new ACL if needed.
 */
function field_acl_update_acl($node,$fieldname) {
  $acl_id = acl_get_id_by_name('field_acl', 'update_' . $node->nid);
  if (!$acl_id) {
    $acl_id = acl_create_acl('field_acl', 'update_' . $node->nid);
    acl_node_add_acl($node->nid, $acl_id, 1, 1, 0);
  }
  // now delete all users on the ACL, this is to be 100% safe, rather then comparing two arrays.
  $uids = acl_get_uids($acl_id);
  foreach($uids as $uid) {
    acl_remove_user($acl_id, $uid);
  }
  foreach (field_get_items('node', $node, $fieldname ) as $items) {
    acl_add_user($acl_id, trim($items['uid']));
  }
}
