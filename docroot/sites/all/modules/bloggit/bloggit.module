<?php

/**
 * @file
 * Enables VCS-powered blogs.
 */

/**
 * Implements hook_node_info().
 */
function bloggit_node_info() {
  return array(
    'bloggit' => array(
      'name' => t('Bloggit blog entry'),
      'base' => 'bloggit',
      'description' => t('Used for the Bloggit VCS-powered blogs. Nodes are created automatically based files from a VCS.'),
      // We don’t allow the title to be set manually.
      'has_title' => FALSE,
    )
  );
}

/**
 * Implements hook_load().
 */
function bloggit_load($nodes) {
  $result = db_query('SELECT dirname, nid, rendered_content, slug FROM {bloggit} WHERE nid IN (:nids)', array(':nids' => array_keys($nodes)));
  foreach ($result as $record) {
    $nodes[$record->nid]->bloggit_dirname = $record->dirname;
    $nodes[$record->nid]->bloggit_content = $record->rendered_content;
    $nodes[$record->nid]->bloggit_slug = $record->slug;
  }
}

/**
 * Implements hook_view().
 */
function bloggit_view($node, $view_mode) {
  if (isset($node->bloggit_content)) {
    $node->content['bloggit'] = array(
      '#markup' => $node->bloggit_content,
      '#weight' => 1,
    );
  }
  
  return $node;
}

/**
 * Implements hook_form().
 */
function bloggit_form($node, $form_state) {
  if (!isset($form_state['node']->nid)) {
    drupal_set_message(t('Bloggit entries cannot be created through Drupal’s interface, but are created automatically when blog files are uploaded.'), 'error');

    // Calling exit after this it a bit brutal, but it seems to be the 
    // only way to prevent Drupal from outputting the default page.
    drupal_access_denied();
    exit();
  }

  $form = node_content_form($node, $form_state);

  drupal_set_message(t('This content is file-based and not editable from the Drupal admin interface.'), 'warning');

  return $form;
}

/**
 * Implements hook_menu().
 */
function bloggit_menu() {
  $items = array();

  $items['admin/config/content/bloggit'] = array(
    'title' => 'Bloggit',
    'description' => 'Configure Bloggit file-based blogs.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bloggit_admin_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'bloggit.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function bloggit_menu_alter(&$items) {
  // Disable the node creation page for bloggit nodes.
  $items['node/add/bloggit']['access callback'] = FALSE;
}

/**
 * Implements hook_permission().
 */
function bloggit_permission() {
  return array(
    'configure own bloggit entries' =>  array(
      'title' => t('Configure own Bloggit entries'),
    ),
    'configure any bloggit entries' =>  array(
      'title' => t('Configure any Bloggit entries'),
    ),
  );
}

/**
 * Implements hook_rdf_mapping().
 */
function bloggit_rdf_mapping() {
  return array(
    array(
      'type' => 'node',
      'bundle' => 'bloggit',
      'mapping' => array(
        'rdftype' => array('sioc:Post', 'sioct:BlogPost'),
      ),
    ),
  );
}


/**
 * Implements hook_token_info().
 */
function bloggit_token_info() {
  return array(
    'tokens' => array('node' => array(
      'bloggit_slug' => array(
        'name' => t('Bloggit slug'),
        'description' => t('The slug associated with a bloggit entry. Will fall back to the node title if no slug is set.'),
      ),
    ),
  ));
}

/**
 * Implements hook_tokens().
 */
function bloggit_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();

  if ($type == 'node') {
    $node = $data['node'];
    if (isset($tokens['bloggit_slug'])) {
      $replacements[$tokens['bloggit_slug']] = (isset($node->bloggit_slug) && !empty($node->bloggit_slug)) ? $node->bloggit_slug : $node->title;
    }
  }

  return $replacements;
}

/**
 * Load a bloggit entry by dirname.
 *
 * @param $dirname
 *   The dirname of a bloggit entry.
 * @param $reset
 *   Whether to reset the node_load_multiple cache.
 * @return
 *   The loaded node or FALSE if not found.
 */
function bloggit_load_by_dirname($dirname, $reset = FALSE) {
  $query = db_query('SELECT nid FROM {bloggit} WHERE dirname = :dirname', array(
    ':dirname' => $dirname,
  ));

  $nid = ($query) ? $query->fetchField() : FALSE;
  $node = ($nid) ? node_load($nid, NULL, $reset) : FALSE;

  return $node;
}

/**
 * Process files, making blog posts from them.
 */
function bloggit_process_files() {
  // Load the include file that contains all the logic.
  module_load_include('process.inc', 'bloggit');

  _bloggit_process_files();
}

