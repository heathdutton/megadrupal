<?php

class BloggitTestCase extends DrupalWebTestCase {
  function getInfo() {
    return array(
      'name' => t('Bloggit tests'),
      'description' => t('Tests for the Bloggit module.'),
      'group' => t('Contrib'),
    );
  }

  /**
   * Configure the system to read from the right place.
   */
  function setUp() {
    parent::setUp('bloggit');

    // Set up bloggit configuration for testing.
    variable_set('bloggit_blog', array(
      // Read from our test blog entries.
      'path' => dirname(__FILE__) . '/test',
    ));

    // Load the process include file so we have its functions available.
    module_load_include('process.inc', 'bloggit');

    $this->bloggit_settings = variable_get('bloggit_blog', array());

    $this->entries = bloggit_find_entries($this->bloggit_settings);
  }

  /**
   * Test that it correctly finds our blog entries.
   */
  function testFindEntries() {
    $this->assertTrue(is_array($this->entries['0002-markdown-test']), '0002-markdown-test was found');
  }

  /**
   * Test that JSON metadata is loaded correctly.
   */
  function testJSONMetaDataLoading() {
    $entry = $this->entries['0002-markdown-test'];
    bloggit_load_entry($entry);

    $this->assertEqual($entry['title'], 'Notes on Australia', 'Title read from JSON metadata');
    $this->assertEqual($entry['categories'], array('travel'), 'Categories read from JSON metadata');
  }

  /**
   * Test that YAML metadata loading works.
   */
  function testYAMLMetaDataLoading() {
    $entry = $this->entries['0003-road-not-taken'];

    $this->assertEqual($entry['title'], 'The Road Not Taken', 'Title read from metadata');
    $this->assertEqual($entry['categories'], array('travel'), 'Categories read from metadata');
  }

  /**
   * Test that Markdown content is loaded correctly.
   */
  function testMarkdownContentLoading() {
    $entry = $this->entries['0002-markdown-test'];
    bloggit_load_entry($entry);

    $test_content = <<<HTML
<h1>Notes on Australia</h1>

<p>There is no such thing as a billable <em>billabong</em>. The mere mention of such things should be considered nonsense.</p>

<h4>Wildlife</h4>

<p>There are several exciting animals you can see in <a href="http://en.wikipedia.org/wiki/Australia" title="Australia on Wikipedia">Australia</a>:</p>

<ul>
<li><a href="http://en.wikipedia.org/wiki/Kangaroo">Kangaroo</a></li>
<li>The amazing duck-billed <a href="http://en.wikipedia.org/wiki/Platypus" title="Platypus on Wikipedia">Platypus</a></li>
<li><a href="http://en.wikipedia.org/wiki/Great_Barred_Frog">Great Barred Frog</a></li>
</ul>

<h4>Travel instructions</h4>

<p>The procedure for going to Australia looks something like this (for us
europeans anyways:</p>

<ol>
<li>Get a ticket</li>
<li>Go to the airport</li>
<li>Go through security</li>
<li>Wait</li>
<li>Get on the plane</li>
<li>Wait</li>
<li>Welcome to Australia, mate!</li>
</ol>

<h4>Famous last words</h4>

<blockquote>
  <p>Australia is an absolutely fantastic country, but the only thing we
  lack is the ability to work harder...</p>
</blockquote>
HTML;

    $this->assertEqual(trim(implode(' ', $entry['content'])), trim($test_content), 'Content converted from Markdown');
  }

  /**
   * Test that entries are saved and loaded correctly.
   */
  function testEntrySaveProcess() {
    $entry = $this->entries['0002-markdown-test'];
    bloggit_load_entry($entry);
    bloggit_save_entry($entry, $this->bloggit_settings);

    $node = bloggit_load_by_dirname($entry['dirname']);

    $this->assertEqual($entry['title'], $node->title, 'Title saved and loaded correctly');
    $this->assertEqual(implode("\n", $entry['content']), $node->bloggit_content, 'Content saved and loaded correctly');
  }
}

