<?php

/**
 * @file
 * The relatedlinks module enables nodes to display related URLs to the user via
 * blocks.
 */

/**
 * @todo
 * 1. Decide on how to handle existing links when a node type is dissociated
 *    from this module or a prerequisite module is disabled.
 * 2. As per Moshe's suggestion, this module will also be handy in ensuring that
 *    dead links to a deleted page can be weeded out.
 */

// Define constants to indicate the types of links stored in the relatedlinks
// table [type field].
define('RELATEDLINKS_PARSED', 1);
define('RELATEDLINKS_MANUAL', 2);
define('RELATEDLINKS_DISCOVERED', 3);

/**
 * Implements hook_help().
 */
function relatedlinks_help($path, $arg) {
  switch ($path) {
    case 'admin/config/relatedlinks/configure':
      return t('Select the types of links to store and display.');
    case 'admin/config/relatedlinks/configure/discovered':
      return t('Define the criteria by which discovered links are to be calculated.');
    case 'admin/help#relatedlinks':
    case 'admin/help#relatedlinks/discovered':
      return t('The relatedlinks module enables nodes to display related URLs to
the user via blocks. Related links can be defined in 3 ways:
<ul>
  <li>Parsed links: links that are retrieved from the body of a node.</li>
  <li>Manual links: links that are added manually.</li>
  <li>Discovered links: links that are discovered by the module using various criteria,
including the category terms of a node and suggestions provided by the search module
(when enabled).</li>
</ul>
<p>The relatedlinks module allows for flexibility in creating blocks for each type
of relatedlinks or creating blocks for a combination of link types.</p>
Links:
<ul>
  <li>Related links configuration: admin/config/relatedlinks/configure</li>
  <li>Block configuration: admin/structure/block</li>
  <li>Project URL: http://drupal.org/project/relatedlinks</li>
</ul>');
  }
}

/**
 * Implements hook_menu().
 */
function relatedlinks_menu() {
  $items = array();

  $items['admin/config/search/relatedlinks'] = array(
    'title' => 'Related links',
    'description' => 'Configure related links settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_relatedlinks_settings_form'),
    'access arguments' => array('administer related links'),
    'file' => 'relatedlinks.admin.inc'
  );
  $items['admin/config/search/relatedlinks/configure'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_relatedlinks_settings_form'),
    'access arguments' => array('administer related links'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'relatedlinks.admin.inc'
  );
  $items['admin/config/search/relatedlinks/discovered'] = array(
    'title' => 'Discovered links',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_relatedlinks_discovered_settings_form'),
    'access arguments' => array('administer related links'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
    'file' => 'relatedlinks.admin.inc'
  );
  $items['relatedlinks/autocomplete'] = array(
    'page callback' => 'relatedlinks_autocomplete',
    'access arguments' => array('add related links'),
    'type' => MENU_CALLBACK
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function relatedlinks_permission() {
  return array(
    'administer related links' => array('title' => t('Administer related links')),
    'add related links' => array('title' => t('Add related links'))
  );
}

/**
 * Implements hook_theme().
 */
function relatedlinks_theme() {
  return array(
    'relatedlinks_types_table' => array(
      'render element' => 'relatedlinks_types',
      'form' => NULL
    ),
    'relatedlinks' => array(
      'variables' => array(
        'links' => array()
      ),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function relatedlinks_block_info() {
  $blocks = array();

  $link_types = variable_get('relatedlinks_types', _relatedlinks_get_type_defaults());

  $top = TRUE;
  foreach ($link_types as $type => $config) {
    if ($config['enabled'] && ($config['block'] || $top)) {
      $top = FALSE;
      $blocks[$type]['info'] = t('Related links:') . ' ' . check_plain($config['name']);
      $blocks[$type]['cache'] = DRUPAL_NO_CACHE;
    }
  }

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function relatedlinks_block_view($delta = '') {
  // This is only valid if we're looking at a node now.
  if (is_numeric($delta)) {
    $block = array();
    $node = node_load(arg(1));
    // Only display if node type is associated with this module.
    if ($node && in_array($node->type, variable_get('relatedlinks_node_types', _relatedlinks_node_get_types(TRUE)))) {
      $link_types = variable_get('relatedlinks_types', _relatedlinks_get_type_defaults());
      $append = FALSE;
      $links = array();
      foreach ($link_types as $type => $config) {
        // Only worry about enabled types.
        if ($config['enabled']) {
          if ($type == RELATEDLINKS_DISCOVERED && (($delta == $type) || ($append && !$config['block'])) &&
              !isset($node->relatedlinks[RELATEDLINKS_DISCOVERED])) {
            // Refresh discovered links. This is being done here rather than
            // 'hook_node_load' due to weight conflicts with the taxonomy
            // module.
            $node->relatedlinks[RELATEDLINKS_DISCOVERED] = _relatedlinks_update_discovered_links($node);
          }

          // Current block.
          if ($delta == $type) {
            $block['subject'] = check_plain($config['title']);
            $links = isset($node->relatedlinks[$type]) ? array_merge($links, $node->relatedlinks[$type]) : $links;

            // Allow other types to append links to this block if needed.
            $append = TRUE;
          }
          elseif ($append) {
            if ($config['block']) {
              break;
            }
            else {
              $links = isset($node->relatedlinks[$type]) ? array_merge($links, $node->relatedlinks[$type]) : $links;
            }
          }
        }
      }

      $links = _relatedlinks_filter($links);
      if (!empty($links)) {
        $block['content'] = theme('relatedlinks', array('links' => $links));
      }

      return $block;
    }
  }
}


/**
 * Implements hook_node_load().
 */
function relatedlinks_node_load($nodes, $types) {
  foreach ($nodes as $node) {
    $node->relatedlinks = _relatedlinks_get_links($node->nid);
  }
}

/**
 * Implements hook_node_delete().
 *
 * The delete op should be allowed to account for admins who do not have
 * the 'add related links' permission.
 */
function relatedlinks_node_delete($node) {
  _relatedlinks_delete_links($node->nid);
  _relatedlinks_delete_tracker($node->nid);
}

/**
 * Implements hook_node_update().
 */
function relatedlinks_node_update($node) {
  _relatedlinks_delete_links($node->nid);
  _relatedlinks_delete_tracker($node->nid);

  module_invoke('relatedlinks', 'node_insert', $node);
  //relatedlinks_node_insert($node);
}

/**
 * Implements hook_node_insert().
 */
function relatedlinks_node_insert($node) {
  // Handle manual links.
  if (_relatedlinks_get_type_property(RELATEDLINKS_MANUAL, 'enabled')) {
    preg_match_all('#\s*([^\ \s]+)\ *(.*)$#im', $node->relatedlinks_fieldset['relatedlinks'], $matches);
    $links = _relatedlinks_check_links($matches[1], $matches[2]);
    _relatedlinks_add_links($node->nid, $links, RELATEDLINKS_MANUAL);
  }

  // Handle any submitted keywords. Discovered links are calculated
  // and cached (as necessary) in hook_block.
  $discovered = variable_get('relatedlinks_discovered', _relatedlinks_get_discovered_defaults());
  // Existing keywords are removed if the keywords functionality is
  // disabled.
  $keywords = '';

  if (_relatedlinks_get_type_property(RELATEDLINKS_DISCOVERED, 'enabled') &&
    in_array('search', $discovered['ranking']) && $discovered['keywords']) {
    $keywords = $node->relatedlinks_fieldset['keywords'];
  }
  _relatedlinks_insert_tracker($node->nid, $keywords);

  // Handle parsed links.
  if (_relatedlinks_get_type_property(RELATEDLINKS_PARSED, 'enabled')) {
    // Run node body through check_markup to ensure that only
    // processed output is being parsed for links. This also means
    // that the link text is already escaped.

    $lang = $node->language;
    $node_body = check_markup($node->body[$lang][0]['value'], $node->body[$lang][0]['format']);

    // Previous versions of this module attempted to retain other tag
    // attributes. This has been curtailed due to changes in the DB
    // structure.
    // Regex adapted from syscrusher's links package, which in turn
    // was adapted from a post on php.net by "martin at vertikal dot dk".
    // Any updates to this regex also needs to be applied to the
    // .install file update.
    preg_match_all("!<\s*a\s*href\s*=\s*(?:\"([^\">]+)\"[^>]*|([^\" >]+?)[^>]*)>(.*)\s*<\s*/\s*a\s*>!Uis", $node_body, $matches);
    $links = _relatedlinks_check_links($matches[1], $matches[3]);

    _relatedlinks_add_links($node->nid, $links, RELATEDLINKS_PARSED);
  }
}

/**
 * Implements hook_node_access().
 */
function relatedlinks_node_access($node, $op, $account) {
  if (_relatedlinks_nodetype_enabled($node)) {
    switch ($op) {
      case 'create':
      case 'update':
      case 'insert': // TODO: will this one actually work?
        if (user_access('add related links')) {
          return NODE_ACCESS_ALLOW;
        }
        else {
          return NODE_ACCESS_DENY;
        }
        break;
    }
  }
}

/**
 * Checks whether or not the given node's type is eligible for related links.
 *
 * @param $node
 *   The node being checked.
 * @return bool
 *   TRUE if relatedlinks are enabled for this type. FALSE, if otherwise.
 */
function _relatedlinks_nodetype_enabled($node) {
  $node_type = NULL;
  if (is_object($node)) {
    $node_type = (isset($node->type) ? $node->type : NULL);
  }
  elseif (is_string($node)) {
    $node_type = $node;
  }

  return (!is_null($node_type) && in_array($node_type, variable_get('relatedlinks_node_types', _relatedlinks_node_get_types(TRUE))));
}

/**
 * Implements hook_form_alter().
 */
function relatedlinks_form_alter(&$form, &$form_state, $form_id) {
  if (user_access('add related links') && isset($form['type']) && isset($form['type']['#value'])) {
    if ($form['type']['#value'] . '_node_form' == $form_id) {
      $node = $form['#node'];
      if (!in_array($node->type, variable_get('relatedlinks_node_types', _relatedlinks_node_get_types(TRUE)))) {
        return;
      }
      $form['relatedlinks_fieldset'] = array(
        '#type' => 'fieldset',
        '#title' => t('Related links'),
        '#collapsible' => TRUE,
        '#tree' => TRUE,
        '#weight' => 30
      );

      if (_relatedlinks_get_type_property(RELATEDLINKS_MANUAL, 'enabled')) {
        // Include JavaScript variables and files.
        $path = drupal_get_path('module', 'relatedlinks');
        drupal_add_css($path . '/relatedlinks.css');

        // The url() call is wrapped in an array to workaround a bug where node
        // previews lead to form_alters being called repeatedly. These repeated
        // calls to drupal_add_js() lead to the setting being mangled from a
        // simple variable to an array as the variable is repeatedly added to
        // itself. The workaround is to make it an array in the first place
        // leading to some warped consistency.
        drupal_add_js(array('relatedlinks_autocomplete' => array(url('relatedlinks/autocomplete'))), 'setting');
        drupal_add_js($path . '/relatedlinks.js');

        // Include the autocomplete JS file in case the authoring field is altered
        // out.
        drupal_add_js('misc/autocomplete.js');

        // Add existing manual links to the form.
        $relatedlinks = '';
        if (isset($node->relatedlinks[RELATEDLINKS_MANUAL])) {
          foreach ($node->relatedlinks[RELATEDLINKS_MANUAL] as $link) {
            $relatedlinks .= $link->url . ' ' . $link->title . "\n";
          }
        }

        $form['relatedlinks_fieldset']['relatedlinks'] = array(
          '#type' => 'textarea',
          '#title' => t('Related links'),
          '#default_value' => $relatedlinks,
          '#rows' => 3,
          '#description' => t('To manually define links to related material, enter one URL and title (separated by a space) per line. For example: "<code>http://www.example.com Clickable Text</code>". Alternately, you can enter an internal site address. For example: "<code>about About Us</code>". If no title is submitted, the URL itself will be used as the title.')
        );

        $form['relatedlinks_fieldset']['#collapsed'] = empty($relatedlinks);
      }

      $discovered = variable_get('relatedlinks_discovered', _relatedlinks_get_discovered_defaults());
      if (_relatedlinks_get_type_property(RELATEDLINKS_DISCOVERED, 'enabled') && in_array('search', $discovered['ranking']) && $discovered['keywords']) {
        $form['relatedlinks_fieldset']['keywords'] = array(
          '#type' => 'textfield',
          '#title' => t('Keywords'),
          '#description' => t('Enter search keywords that will aid in finding related content.')
        );

        $track = isset($node->nid) ? _relatedlinks_get_tracker($node->nid) : FALSE;
        if ($track) {

          $form['relatedlinks_fieldset']['keywords']['#default_value'] = $track->keywords;
          $form['relatedlinks_fieldset']['#collapsed'] = $form['relatedlinks_fieldset']['#collapsed'] && empty($track->keywords);
        }
      }
      if (!isset($form['relatedlinks_fieldset']['relatedlinks']) && !isset($form['relatedlinks_fieldset']['keywords'])) {
        unset($form['relatedlinks_fieldset']);
      }
    }
  }
}

/**
 * Implements hook_cron().
 */
function relatedlinks_cron() {
  $discovered = variable_get('relatedlinks_discovered', _relatedlinks_get_discovered_defaults());
  if (_relatedlinks_get_type_property(RELATEDLINKS_DISCOVERED, 'enabled') && $discovered['cron']) {
    $updated = time() - ($discovered['cron'] * 24 * 60 * 60);
    // Select all stale nodes.
    $result = db_query("SELECT nid FROM {relatedlinks_tracker} WHERE updated <> 0 AND updated < :updated", array(':updated' => $updated));
    $nids = array();
    foreach ($result as $node) {
      $nids[] = $node->nid;
    }
    if (!empty($nids)) {
      // Remove stale discovered links.
      db_query("DELETE FROM {relatedlinks} WHERE nid IN (:nid_args) AND type = :type", array(":nid_args" => $nids, ':type' => RELATEDLINKS_DISCOVERED));
      // Reset updated field to 0. This will force a recalculation of discovered links.
      db_query("UPDATE {relatedlinks_tracker} SET updated = 0 WHERE nid IN (:nid_args)", array(":nid_args" => $nids));
    }
  }
}

/**
 * Retrieve a pipe delimited string of autocomplete suggestions.
 */
function relatedlinks_autocomplete($string = '') {
  $matches = array();

  foreach (_relatedlinks_node_candidates($string) as $nid => $title) {
    $matches[$nid] = $title;
  }
  print drupal_json_encode($matches);
  exit();
}

/*
 * Helper function to sort related link types by weight, enabled status and
 * block status respectively.
 */
function _relatedlinks_compare($a, $b) {
  if ($a['weight'] == $b['weight']) {
    if ($a['enabled'] == $b['enabled']) {
      return ($a['block']) ? -1 : 1;
    }
    else {
      return ($a['enabled']) ? -1 : 1;
    }
  }

  return ($a['weight'] < $b['weight']) ? -1 : 1;
}

/**
 * Create a data structure for link types data. To add a new link type, simply
 * add a new array to the structure below.
 *
 * @return
 *   Default settings for the relatedlinks type associations.
 */
function _relatedlinks_get_type_defaults() {
  static $defaults = NULL;

  if (!isset($defaults)) {
    $defaults = array();
    $defaults[RELATEDLINKS_MANUAL] = array(
      'name' => t('Manual links'),
      'enabled' => TRUE,
      'block' => TRUE,
      'weight' => 1,
      'title' => t('Recommended links'),
      'max' => 5
    );
    $defaults[RELATEDLINKS_PARSED] = array(
      'name' => t('Parsed links'),
      'enabled' => TRUE,
      'block' => FALSE,
      'weight' => 2,
      'title' => t('Content links'),
      'max' => 5
    );
    $defaults[RELATEDLINKS_DISCOVERED] = array(
      'name' => t('Discovered links'),
      'enabled' => FALSE,
      'block' => TRUE,
      'weight' => 3,
      'title' => t('Similar links'),
      'max' => 5
    );
  }

  return $defaults;
}

/**
 * Retrieve a link type property.
 *
 * @param $type
 *   The link type as declared by the type constants.
 * @param $property
 *   The property to return.
 * @return
 *   The property value.
 */
function _relatedlinks_get_type_property($type, $property) {
  $link_types = variable_get('relatedlinks_types', _relatedlinks_get_type_defaults());

  return $link_types[$type][$property];
}

/**
 * Retrieve default settings for the discovered links settings page.
 *
 * @return
 *   An array of default values.
 */
function _relatedlinks_get_discovered_defaults() {
  // The default array doesn't provide data for taxonomy vocabularies and node
  // types for performance reasons.
  $defaults = array(
    'keywords' => TRUE,
    'ranking' => array('taxonomy', 'date'),
    'cron' => 7
  );

  return $defaults;
}

/**
 * Insert related links into the database.
 *
 * @param $nid
 *   Node ID of the node to add links for.
 * @param $links
 *   An associative array of URLs and titles.
 * @param $type
 *   The type of the links being inserted as denoted by the type constants.
 */
function _relatedlinks_add_links($nid, $links, $type) {
  foreach ($links as $link) {
    db_query("INSERT INTO {relatedlinks} (nid, url, title, type) VALUES (:nid, :url, :title, :type)",
      array(
        ':nid' => $nid,
        ':url' => $link['url'],
        ':title' => trim($link['title']),
        ':type' => $type
      )
    );
  }
}

/**
 * Delete related links associated with a node from the database.
 *
 * @param $nid
 *   Node ID of the node to delete links for.
 * @param $type
 *   The type of the links to delete as denoted by the type constants.
 *
 */
function _relatedlinks_delete_links($nid, $type = NULL) {
  if (isset($type)) {
    db_query('DELETE FROM {relatedlinks} WHERE nid = :nid AND type = :type', array(':nid' => $nid, ':type' => $type));
  }
  else {
    db_query('DELETE FROM {relatedlinks} WHERE nid = :nid', array(':nid' => $nid));
  }
}

/**
 * Retrieve related links from the database.
 *
 * @param $nid
 *   Node ID of the node to retrieve links for.
 *
 * @return $links
 *   An associative array of links arranged by link type.
 */
function _relatedlinks_get_links($nid) {
  $result = db_query('SELECT url, title, type FROM {relatedlinks} WHERE nid = :nid ORDER BY lid', array(':nid' => $nid));

  $links = array();
  foreach ($result as $link) {
    if (!isset($links[$link->type])) {
      // Initialise array.
      $links[$link->type] = array();
    }
    $links[$link->type][] = $link;
  }

  return $links;
}

/**
 * Filter an array of related links. Check for duplicates and return as a list
 * of URLs.
 *
 * @param $links
 *   Associative array of links, or an object with link
 *
 * @return
 *   An array of HTML links.
 *
 * @TODO: Either fix url() to handle links starting with '/' or handle locally.
 * Path aliasing is not available due to the current approach. This only affects
 * parsed and manual links.
 */
function _relatedlinks_filter($links) {
  $urls = array();
  $url_cache = array();

  foreach ($links as $link) {

    if ($link) {
      $link_title = $link_url = $link_type = '';

      if (is_array($link)) {
        $link_title = $link['title'];
        $link_url = $link['url'];
        $link_type = (isset($link['type']) ? $link['type'] : '');
      }
      elseif (is_object($link)) {
        $link_title = $link->title;
        $link_url = $link->url;
        $link_type = (isset($link->type) ? $link->type : '');
      }

      if (!in_array($link_url, $url_cache)) {
        if (empty($link_title)) {
          // URLs without a title display the URL.
          $link_title = $link_url;
        }
        $url_cache[] = $link_url;

        // Parsed links have already been through the wringer prior to insert.
        $title = $link_type == RELATEDLINKS_PARSED ? $link_title : check_plain($link_title);
        $urls[] = '<a href="' . url($link_url) . '">' . $title . '</a>';
      }
    }
  }

  return $urls;
}

/**
 * Check and return an updated list of discovered links.
 *
 * @param $node
 *   The node whose discovered links need to be checked and returned.
 *
 * @return $links
 *   An associative array of discovered links.
 */
function _relatedlinks_update_discovered_links($node) {
  $links = array();

  $tracker = _relatedlinks_get_tracker($node->nid);

  if (!$tracker || ($tracker && !$tracker->updated)) {
    $links = _relatedlinks_get_discovered_links($node, $tracker);

    _relatedlinks_add_links($node->nid, $links, RELATEDLINKS_DISCOVERED);
    if (!$tracker) {
      // Insert tracker record for existing nodes that have been associated with
      // this module.
      _relatedlinks_insert_tracker($node->nid, '');
    }
    _relatedlinks_update_tracker_timestamp($node->nid, time());
  }

  return $links;
}

/**
 * Retrieve information on the discovered links for a node from the track
 * database.
 *
 * @param $nid
 *   Node ID of the node to get tracker information for.
 *
 * @return
 *   An associative array with a row from the tracker table, or FALSE if no
 * data could be retrieved.
 */
function _relatedlinks_get_tracker($nid) {
  $result = db_query('SELECT * FROM {relatedlinks_tracker} WHERE nid = :nid', array(':nid' => $nid));

  if ($track = $result->fetch()) {
    return $track;
  }

  return FALSE;
}

/**
 * Insert a record into the relatedlinks_tracker table.
 *
 * @param $nid
 *   Node ID of the node to insert a tracker record for.
 * @param $keywords
 *   Search module keywords that will allow discovered links to be calculated
 * using the search module.
 */
function _relatedlinks_insert_tracker($nid, $keywords) {
  db_query("INSERT INTO {relatedlinks_tracker} (nid, keywords) VALUES (:nid, :keywords)", array(':nid' => $nid, ':keywords' => $keywords));
}

/**
 * Insert a record into the relatedlinks_tracker table.
 *
 * @param $nid
 *   Node ID of the node whose tracker record is to be updated.
 * @param $updated
 *   A UNIX timestamp indicating the time of last update (of discovered links
 * for the node in question. 0 signifies that an update is yet to occur.
 */
function _relatedlinks_update_tracker_timestamp($nid, $updated) {
  db_query("UPDATE {relatedlinks_tracker} SET updated = :updated WHERE nid = :nid", array(':updated' => $updated, ':nid' => $nid));
}

/**
 * Delete a record from the relatedlinks_tracker table.
 *
 * @param $nid
 *   Node ID of the node whose tracker record is to be deleted.
 */
function _relatedlinks_delete_tracker($nid) {
  db_query('DELETE FROM {relatedlinks_tracker} WHERE nid = :nid', array(':nid' => $nid));
}

/**
 * Helper function that caches node types.
 *
 * @param $keys
 *   A boolean variable that decides whether an associative array of node types
 * is to be returned (or not).
 *
 * @return
 *   An associative or non-associative array of node types.
 */
function _relatedlinks_node_get_types($keys = FALSE) {
  static $node_types = NULL, $key_array = NULL;

  if (!isset($node_types)) {
    $node_types = node_type_get_names();
    foreach ($node_types as $type => $name) {
      $node_types[$type] = check_plain($name);
    }
    $key_array = array_keys($node_types);
  }

  return $keys ? $key_array : $node_types;
}

/**
 * Check links for duplicates and return as an associative array.
 *
 * @param $url_matches
 *   An array of URLs.
 * @param $title_matches
 *   An array of titles (corresponding to the $url_matches array).
 *
 * @return $links
 *   An array of distinct URL and title pairs.
 */
function _relatedlinks_check_links($url_matches, $title_matches) {
  $urls = array();
  $links = array();
  // Check URLs for duplicates.
  foreach ($url_matches as $index => $url) {
    $url = rtrim($url, '/ ');
    if (!in_array($url, $urls)) {
      $urls[] = $url;
      // Strip tags to prevent ungainly link text.
      $title = trim(strip_tags($title_matches[$index]));
      $links[] = array('url' => $url, 'title' => $title ? $title : $url);
    }
  }

  return $links;
}

/**
 * Calculate, collate and return the discovered links for a node.
 *
 * @param $node
 *   The node whose discovered links are to be calculated.
 * @param $tracker
 *   The tracker record associated with the node in the tracker table.
 */
function _relatedlinks_get_discovered_links($node, $tracker) {
  $keywords = $tracker ? $tracker->keywords : NULL;
  $discovered = variable_get('relatedlinks_discovered', _relatedlinks_get_discovered_defaults());
  $max = _relatedlinks_get_type_property(RELATEDLINKS_DISCOVERED, 'max');
  $node_types = isset($discovered['node_types']) ? $discovered['node_types'] : array();

  $user = in_array('user', $discovered['ranking']) ? $node->uid : FALSE;
  $date = in_array('date', $discovered['ranking']) ? TRUE : FALSE;
  $comments = in_array('comments', $discovered['ranking']) ? TRUE : FALSE;

  $taxonomy_links = $search_links = array();
  if (module_exists('taxonomy') && in_array('taxonomy', $discovered['ranking'])) {
    $vids = isset($discovered['vocabularies']) ? $discovered['vocabularies'] : array();

    $tids = (isset($node->taxonomy) ? array_keys($node->taxonomy) : array());

    $results = db_query("SELECT tid FROM {taxonomy_index} WHERE nid = :nid", array(':nid' => $node->nid));

    foreach ($results as $result) {
      $tids[] = $result->tid;
    }

    $taxonomy_links = _relatedlinks_taxonomy_select_nodes($node->nid, $tids, $max, $vids, $node_types, $date, $user, $comments);
  }
  if (module_exists('search') && in_array('search', $discovered['ranking'])) {
    $search_links = _relatedlinks_search_select_nodes($node->nid, $keywords, $max, $node_types);
  }

  if ($keywords == '') {
    $links = _relatedlinks_collate_links($taxonomy_links, $search_links, $user, $max);
  }
  else {
    // If keywords are specified, priority is given to search results.
    $links = _relatedlinks_collate_links($search_links, $taxonomy_links, $user, $max);
  }

  return $links;
}

/**
 * Finds all nodes that match selected taxonomy conditions.
 *
 * @param $nid
 *   The Node ID of the node whose discovered links are being calculated.
 * @param $tids
 *   An array of term IDs associated with the node.
 * @param $limit
 *   The maximum number of links to discover. This is a user specified value.
 * @param $vids
 *   An array of vocabulary IDs. Discovered links are limited to those belonging
 * to these vocabularies (if non-empty).
 * @param $node_types
 *   An array of node types. If non-empty, the discovered links are restricted
 * to those of the specified node types.
 * @param $date
 *   Boolean variable indicating if newer results are to be given preference.
 * @param $comments
 *   Boolean variable indicating if nodes with higher numbers of comments are to
 * be given preference.
 *
 * @return $links
 *   An array of discovered links related by taxonomy terms to the current node.
 *
 * @todo
 *   Handle term hierarchies (depth).
 *   Escape SQL input as an added precaution.
 */
function _relatedlinks_taxonomy_select_nodes($nid, $tids = array(), $limit, $vids, $node_types, $date, $comments) {
  $links = array();

  foreach ($tids as $index => $tid) {
    $term = taxonomy_term_load($tid);
    // Filter out terms that do not belong to the specified vids.
    if (!empty($vids) && !in_array($term->vid, $vids)) {
      unset($tids[$index]);
    }
  }

  if (count($tids) > 0) {
    $str_tids = implode(',', $tids);
    $where[] = 'tn.tid IN (' . $str_tids . ')';
    if (!empty($node_types)) {
      $where[] = "n.type IN ('" . implode("', '", $node_types) . "')";
    }

    $where[] = 'n.status = 1';
    $where[] = 'n.nid <> ' . $nid;

    $order[] = 'count DESC';
    $order[] = 'n.sticky DESC';
    if ($date) {
      $order[] = 'n.created DESC';
    }
    if ($comments) {
      $order[] = 'ncs.comment_count DESC';
    }
    $order[] = 'promote DESC';

    $sql = 'SELECT n.nid, n.title, n.type, n.uid, COUNT(tn.tid) as count, ncs.comment_count
      FROM {node} n
      INNER JOIN {taxonomy_index} tn USING (nid)
      LEFT JOIN {node_comment_statistics} ncs USING (nid)
      WHERE ' . implode(' AND ', $where) . '
      GROUP BY n.nid
      ORDER BY ' . implode(', ', $order) . '
      LIMIT ' . $limit;

    $result = db_query($sql);
    foreach ($result as $node) {
      // Exclude the current nid.
      if ($node->nid != $nid) {
        $links[$node->nid] = $node;
      }
    }
  }

  return $links;
}

/**
 * Finds all nodes that match selected taxonomy conditions.
 *
 * @param $nid
 *   The Node ID of the node whose discovered links are being calculated.
 * @param $keywords
 *   User specified keywords for the search module. These can be used just like
 * in the search form of the search module, including all advanced options such
 * as restricting by category or using Boolean operators to refine the query. If
 * not specified, an attempt is made to discern the key words pertaining to the
 * current node and use them in an OR search.
 * @param $limit
 *   The maximum number of links to discover. This is a user specified value.
 * @param $node_types
 *   An array of node types. If non-empty, the discovered links are restricted
 * to those of the specified node types. This is only used if keywords have not
 * been specified.
 *
 * @return $links
 *   An array of discovered links provided by the search module.
 *
 * @todo
 *   Hook search currently does not appear to have an option to specify the
 * number of results that can be returned.
 */
function _relatedlinks_search_select_nodes($nid, $keywords, $limit, $node_types) {
  $links = array();

  if ($keywords == '') {
    $result = db_query_range("SELECT DISTINCT(si.word) FROM {search_index} si INNER JOIN {search_total} st USING (word) WHERE si.sid = :sid AND length(si.word) > :length AND si.type = 'node' ORDER BY st.count DESC, length(si.word) DESC", 0, 6, array(':sid' => $nid, ':length' => variable_get('minimum_word_size', 3)));
    $words = array();
    foreach ($result as $word) {
      $words[] = $word->word;
    }
    $keywords = implode(' OR ', $words);
    // Node type restrictions are only applicable if keywords have not been
    // specified. If otherwise, the user can specify the types with the keywords
    // as per the search module's syntax.
    // The !empty($keywords) has been added as just searching by type results in
    // a warning when hook_search is called.
    if (!empty($keywords) && !empty($node_types)) {
      $keywords .= ' type:' . implode(',', $node_types);
    }
  }

  $keywords = trim($keywords);

  if (module_hook('node', 'search_execute') && !empty($keywords)) {
    $keywords_arr = explode(',', $keywords);
    $res = array();

    foreach ($keywords_arr as $key) {
      $results = node_search_execute($key);
      $res = array_merge($res, $results);
    }

    foreach ($res as $result) {
      $node = $result['node'];
      // Exclude the current nid.
      if ($node->nid != $nid) {
        $links[$node->nid] = $node;
      }
    }
  }

  return $links;
}

/**
 * Sort through the taxonomy and search link arrays and retrieve the discovered
 * links for a node.
 *
 * @param $set1
 *   An array of discovered links.
 * @param $set2
 *   Another array of discovered links.
 * @param $user
 *   If content created by the author of the current node is to be given
 * preference, then this variable will contain the author's UID, else it is to
 * be set to FALSE.
 * @param $limit
 *   The maximum number of links to return. This is a user specified value.
 *
 * @return $links
 *   An array of discovered links.
 */
function _relatedlinks_collate_links($set1, $set2, $user, $limit) {
  $links = $user_links = $set = array();

  if (empty($set1) || empty($set2)) {
    $set = empty($set1) ? $set2 : $set1;
  }
  else {
    // array_intersect_assoc() and array_diff_key() produce errors in PHP 5.2
    // due to the node objects not having a __toString() method.
    // array_intersect_key() and array_diff_key() are used if available - i.e.,
    // from PHP 5.2 onwards.
    if (function_exists('array_intersect_key')) {
      $set = array_intersect_key($set1, $set2) + array_diff_key($set1, $set2);
    }
    else {
      $set = array_intersect_assoc($set1, $set2) + array_diff_assoc($set1, $set2);
    }
  }

  foreach ($set as $node) {
    $link = array('url' => 'node/' . $node->nid, 'title' => $node->title);
    if ($user && $node->uid == $user) {
      $user_links[$node->nid] = $link;
    }
    else {
      $links[$node->nid] = $link;
    }
  }
  // Prioritise links submitted by the current node's user.
  $links = $user_links + $links;
  $links = array_slice($links, 0, $limit);

  return $links;
}

/**
 * Fetch an array of all candidate autocomplete node titles, for use in the
 * relatedlinks autocomplete form.
 */
function _relatedlinks_node_candidates($string = '') {
  $string = '%' . $string . '%';
  $result = db_select('node', 'n')
    ->fields('n', array('nid', 'title', 'type'))
    ->condition('title', $string, 'LIKE')
    ->condition('status', 1)
    ->orderBy('title', 'DESC')
    ->orderBy('type', 'DESC')
    ->range(0, 10)
    ->addTag('related_links_access')
    ->execute();

  $rows = array();
  while ($node = $result->fetchAssoc()) {
    $rows[$node['nid']] = $node['title'];
  }

  return $rows;
}

/**
 * Theme the relatedlinks block output.
 *
 * @param $links
 *   An array of links to theme.
 *
 * @return
 *   A themed list of links.
 */
function theme_relatedlinks($variables) {
  $links = $variables['links'];

  return theme('item_list', array('items' => $links));
}
