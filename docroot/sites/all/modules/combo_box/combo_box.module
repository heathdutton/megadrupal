<?php
// $Id$
/**
* @file
* this module add combo box field type to your content type by using field api.
*/

/**
* Implementation of hook_field_info().
*/
function combo_box_field_info() {
  return array(  
  'combo_box_field' => array(
  'label' => t('Combo box field') , 
  'description' => t('this field is an itegration of select menu field and auto complete field') ,
  'default_widget' => 'combo_box_field_widget' , 
  'default_formatter' => 'combo_box_field_formatter' ,   
  ),
  );
}


/**
* Implementation of hook_field_settings_form().
*/
function combo_box_field_settings_form($field, $instance, $has_data) {
 $settings = $field['settings'];
 $form['allowed_values_fieldset'] = array(
  '#type' => 'fieldset',
  '#title' => t('Allowed values'),
  '#collapsible' => TRUE,
  '#collapsed' => FALSE,
  );
  $form['allowed_values_fieldset']['allowed_values'] = array(
  '#type' => 'textarea',
  '#title' => t('Allowed values list'),
  '#default_value' => !empty($settings['allowed_values_fieldset']['allowed_values']) ? $settings['allowed_values_fieldset']['allowed_values'] : '',
  '#required' => FALSE,
  '#rows' => 10,
  '#description' => t('The possible values this field can contain . Enter one value per line, in the format {select option} = {select value} . {select value} is the value that will be stored in the database, and it must match the field storage type (%type). The label is optional, and the key will be used as the label if no label is specified.'),
  );
  $form['allowed_values_fieldset']['advanced_options'] = array(
  '#type' => 'fieldset',
  '#title' => t('PHP code'),
  '#collapsible' => TRUE,
  '#collapsed' => empty($settings['allowed_values_fieldset']['allowed_values_php']),
  );
  if (user_access('use PHP for settings')) {
  $form['allowed_values_fieldset']['advanced_options']['allowed_values_php'] = array(
  '#type' => 'textarea',
  '#title' => t('Code'),
  '#default_value' => !empty($settings['allowed_values_fieldset']['advanced_options']['allowed_values_php']) ? $settings['allowed_values_fieldset']['advanced_options']['allowed_values_php'] : '',
  '#rows' => 6,
  '#description' => t('Advanced usage only: PHP code that returns a keyed array of allowed values . Should NOT include &lt;?php ?&gt; delimiters. If this field is filled out, the array returned by this code will override the allowed values list above , Be careful . <br/> <strong>E.g:</strong <code> return array("Egypt" => "Country" , "Jessy"  => "Name") ; </code>'),
  );
  }
  else{
  $description = empty($settings['allowed_values_fieldset']['advanced_options']['allowed_values_php']) ? "You're not allowed to input PHP code." : 'This PHP code was set by an administrator and will override the allowed values list above.';
  $form['allowed_values_fieldset']['advanced_options']['markup_allowed_values_php'] = array(
  '#type' => 'item',
  '#title' => t('Code'),
  '#value' => !empty($settings['allowed_values_fieldset']['advanced_options']['allowed_values_php']) ? '<code>' . check_plain($settings['allowed_values_fieldset']['advanced_options']['allowed_values_php']) . '</code>' : t('&lt;none&gt;'),
  '#description' => t('@description' , array('@description' => $description )) ,
  ); 
  }
  return $form;
}


/**
* Implementation of hook_field_is_empty().
*/
function combo_box_field_is_empty($item, $field) {
  return empty($item['combo_box'])  ;
}


/**
* Implementation of hook_field_formatter_info().
*/
function combo_box_field_formatter_info() {
  return array(
  'combo_box_field_formatter' => array(
  'label' => t('default text') , 
  'field types' => array('combo_box_field') ,
  ),  
  );
}



/**
* Implementation of hook_field_formatter_view().
*/
function combo_box_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array() ;
  switch ($display['type']) {
  case 'combo_box_field_formatter' : 
  foreach ($items as $delta => $item) {
  $element[$delta]['#markup'] = "<p>" . $item['combo_box'] . "</p>" ;
  }
  break ;
  }
  return $element ;
}


/**
* Implementation of hook_field_widget_info().
*/ 
function combo_box_field_widget_info() {
  return array(
  'combo_box_field_widget' => array(
  'label' => t('Combo box view') , 
  'field types' => array('combo_box_field') ,    
  ),
  
  'combo_box_list' => array(
  'label' => t('Combo box') , 
  'field types' => array('list_integer' , 'list_float' , 'list_text') ,
  ),   
  );
}


/**
* Implementation of hook_field_widget_form().
*/
function combo_box_field_widget_form($form, $form_state, $field, $instance, $lancode, $items, $delta, $element) {
  $value_combobox = isset($items[$delta]['combo_box']) ? $items[$delta]['combo_box'] : '' ;
  $value_list = isset($items[$delta]['value']) ? $items[$delta]['value'] : '' ;
  $element += array(
  '#delta' => $delta ,
  );
  $label = !empty($element['#title']) ? $element['#title'] : t('Combo box') ; 
  $element['combo_box'] = array() ; 
  $element['value'] =  array() ; 
  
  switch ($instance['widget']['type']) {

  case 'combo_box_field_widget':
  $_SESSION['require-' . $element['#field_name']] = $element['#required'] ;
  //get current module path to add the js files
  $combox_box_module_path = drupal_get_path('module' , 'combo_box') ;
  $full_module_path = url($combox_box_module_path , array('absolute' => TRUE)) ; 
  //add the js files to drupal
  drupal_add_js($combox_box_module_path . "/library/codebase/dhtmlxcommon.js") ;
  drupal_add_js($combox_box_module_path . "/library/codebase/dhtmlxcommon2.js") ;
  drupal_add_js($combox_box_module_path . "/library/codebase/dhtmlxcombo.js") ; 
  drupal_add_js($combox_box_module_path . "/js/combo_box.js") ; 
  drupal_add_js( array('modulepath' => $full_module_path) , 'setting') ;   
  //field setting result
  $widget_options_textarea_value = !empty($field['settings']['allowed_values_fieldset']['allowed_values']) ? $field['settings']['allowed_values_fieldset']['allowed_values'] : '' ;
  $widget_options_php_value = !empty($field['settings']['allowed_values_fieldset']['advanced_options']['allowed_values_php']) ? $field['settings']['allowed_values_fieldset']['advanced_options']['allowed_values_php'] : ''  ;
  /* get the options that inserted in the widget setting textarea */ 
  $textarea_options = _get_options_of_textarea($widget_options_textarea_value) ; 
  $phpcode_options = _get_options_of_phpcode($widget_options_php_value) ;  
  /* options value*/
  $options = !empty($phpcode_options) ? $phpcode_options : $textarea_options ; 
  /*the form of combo box field*/   
   $element['combo_box'] += array(
  '#title' => t( '@title' , array('@title' => $label)) , 
  '#type' => 'select' , 
  '#default_value' => check_plain($value_combobox) ,
  '#options' => !empty($options) ? $options : array('') ,
  '#element_validate' => array('combobox_options_field_widget_validate'),
  '#attributes' => array('id' => 'combo-box-field', 'style' => 'min-width:200px;') ,
  );
  break ;

  case 'combo_box_list':
  $_SESSION['require-' . $element['#field_name']] = $element['#required'] ;
  $value_key = key($field['columns']);
  $type = str_replace('options_', '', $instance['widget']['type']);
  $multiple = $field['cardinality'] > 1 || $field['cardinality'] == FIELD_CARDINALITY_UNLIMITED;
  $required = $element['#required'];
  $has_value = isset($items[0][$value_key]);
  $properties = _checkbox_options_properties($type, $multiple, $required, $has_value);
  // Prepare the list of options.
  $options = _checkbox_options_get_options($field, $instance, $properties);
  // Put current field values in shape.
  $default_value = _options_storage_to_form($items, $options, $value_key, $properties);
  // get current module path to add the js files 
  $combox_box_module_path = drupal_get_path('module' , 'combo_box') ;
  $full_module_path = url($combox_box_module_path , array('absolute' => TRUE)) ; 
  // add the js files to drupal 
  drupal_add_js($combox_box_module_path . "/library/codebase/dhtmlxcommon.js") ; 
  drupal_add_js($combox_box_module_path . "/library/codebase/dhtmlxcombo.js") ;
  drupal_add_js($combox_box_module_path . "/library/codebase/dhtmlxcommon2.js") ;  
  drupal_add_js($combox_box_module_path . "/js/combo_box.js") ; 
  drupal_add_js( array('modulepath' => $full_module_path) , 'setting') ;   
  //the form of combo box field
   $element['value'] += array(
  '#title' => t( '@title' , array('@title' => $label)) , 
  '#type' => 'select' , 
  '#default_value' => $default_value  ,
  '#options' => $options ,
  '#element_validate' => array('combobox_options_field_widget_validate'),
  '#attributes' => array('id' => 'combo-box-field', 'style' => 'min-width:200px;'),
  );
  break ; 
  
  }
  return $element ; 
}


/**
* This function take the textarea field setting value
* @return
* array of options 
*/
function _get_options_of_textarea($widget_options_textarea_value) {
  if (!empty($widget_options_textarea_value)) {
  $array_options = explode("\n", $widget_options_textarea_value);
  $return_array = array() ; 
  $return_array[''] = '' ; 
  foreach ($array_options as $line) {
  if (substr_count($line, '=') == 0) {
  $return_array[check_plain(strip_tags(trim($line)))] = check_plain(strip_tags(trim($line)));
  }
  elseif (substr_count($line, '=') == 1) {
  $line_array = explode("=" , $line) ; 
  $key = check_plain(strip_tags(trim($line_array[0]))) ;
  $value = check_plain(strip_tags(trim($line_array[1]))) ;
  $return_array[$value] = $key ; 
  }
  else{
  // do nothing	  	
  }
  }
  return $return_array ; 
  }
  else{
  return '' ;
  }
}



/**
* This function take the phpcode field setting value
* @return
* array of options 
*/
function _get_options_of_phpcode($widget_options_php_value) {
  $widget_options_php_value = str_replace("<?php", "", $widget_options_php_value);
  $widget_options_php_value = str_replace("?>", "", $widget_options_php_value);
  $code  = $widget_options_php_value ; 
  $result = eval($code) ; 
  if (gettype($result) == 'array') {
  array_unshift($result, '');
  return $result ;
  }
  else{
  return '' ;
  }
}
/**
 * Form element validation handler for options element.
 */
function combobox_options_field_widget_validate($element, &$form_state) {
  $element['#required'] = $_SESSION['require-' . $element['#parents'][0]] ;
  if ($element['#required'] && $element['#value'] == '' ) {
  form_error($element, t('@name field is required.', array('@name' => $element['#title'])));
   
  // get current module path to add the js files 
  $combox_box_module_path = drupal_get_path('module' , 'combo_box') ;
  $full_module_path = url($combox_box_module_path , array('absolute' => TRUE)) ; 
  // add the js files to drupal 
  drupal_add_js($combox_box_module_path . "/library/codebase/dhtmlxcommon.js") ; 
  drupal_add_js($combox_box_module_path . "/library/codebase/dhtmlxcombo.js") ; 
  drupal_add_js($combox_box_module_path . "/library/codebase/dhtmlxcommon2.js") ; 
  drupal_add_js($combox_box_module_path . "/js/combo_box.js") ; 
  drupal_add_js( array('modulepath' => $full_module_path) , 'setting') ;     
  }
}
/**
 * Describes the preparation steps required by each widget.
 */
function _checkbox_options_properties($type, $multiple, $required, $has_value) {
  $base = array(
  'filter_xss' => TRUE,
  'strip_tags' => FALSE,
  'empty_option' => TRUE,
  'optgroups' => FALSE,
  );
  $properties = array();
  switch ($type) {
  case 'select':
  $properties = array(
  // Select boxes do not support any HTML tag.
  'strip_tags' => TRUE,
  'optgroups' => TRUE,
  );
  if ($multiple) {
  // Multiple select: add a 'none' option for non-required fields.
  if (!$required) {
  $properties['empty_option'] = 'option_none';
  }
  }
  else {
  // Single select: add a 'none' option for non-required fields,
  // and a 'select a value' option for required fields that do not come
  // with a value selected.
  if (!$required) {
  $properties['empty_option'] = 'option_none';
  }
  elseif (!$has_value) {
  $properties['empty_option'] = 'option_select';
  }
  }
  break;
  case 'buttons':
  $properties = array(
  'filter_xss' => TRUE,
  );
  // Add a 'none' option for non-required radio buttons.
  if (!$required && !$multiple) {
  $properties['empty_option'] = 'option_none';
  }
  break;
  case 'onoff':
  $properties = array(
  'filter_xss' => TRUE,
  );
  break;
  }
  return $properties + $base;
}

/**
 * Collects the options for a field.
 */
function _checkbox_options_get_options($field, $instance, $properties) {
  // Get the list of options.
  $options = (array) module_invoke($field['module'], 'options_list', $field);
  // Sanitize the options.
  _options_prepare_options($options, $properties);
  if (!$properties['optgroups']) {
  $options = options_array_flatten($options);
  }
  if ($properties['empty_option']) {
  $label = t('');
  $options = array('' => $label) + $options;
  }
  return $options;
}




/**
 * Like filter_xss_admin(), but with a shorter list of allowed tags.
 *
 * Used for items entered by administrators, like field descriptions,
 * allowed values, where some (mainly inline) mark-up may be desired
 * (so check_plain() is not acceptable).
 */
function content_filter_xss($string) {
  return filter_xss($string, _content_filter_xss_allowed_tags());
}

/**
 * List of tags allowed by content_filter_xss().
 */
function _content_filter_xss_allowed_tags() {
  return array('a', 'b', 'big',  'code', 'del', 'em', 'i', 'ins',  'pre', 'q', 'small', 'span', 'strong', 'sub', 'sup', 'tt', 'ol', 'ul', 'li', 'p', 'br', 'img');
}

/**
 * Human-readable list of allowed tags, for display in help texts.
 */
function _content_filter_xss_display_allowed_tags() {
  return '<' . implode('> <', _content_filter_xss_allowed_tags()) . '>';
}

