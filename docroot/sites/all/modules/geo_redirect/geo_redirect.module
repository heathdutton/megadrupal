<?php

/**
 * @file
 * Main module file of Geo Redirect.
 */

/**
 * Implements hook_init().
 */
function geo_redirect_init() {
  // Only execute if redirection is enabled or this hook is
  // not called from drush. Also do not execute for admin pages.
  if (!variable_get('geo_redirect_enabled', TRUE) || function_exists('drush_main') || path_is_admin(current_path())) {
    return;
  }

  // Get country code for user.
  $country_code = geo_redirect_geoip_country_code();
  // Check if there is geo redirect is added for country.
  if ($geo_redirect = geo_redirect_load_by_country_code($country_code)) {

    $redirect = FALSE;

    global $user;
    $roles = array_keys($user->roles);
    foreach (variable_get('geo_redirect_user_roles', array(DRUPAL_ANONYMOUS_RID => DRUPAL_ANONYMOUS_RID)) as $rid) {
      if (!empty($rid) && in_array($rid, $roles)) {
        $redirect = TRUE;
        break;
      }
    }

    // Execute geo redirect.
    geo_redirect_execute($geo_redirect, $redirect);
  }
}

/**
 * Implements hook_permission().
 */
function geo_redirect_permission() {
  $permissions = array();
  $permissions['administer geo_redirect'] = array(
    'title' => t('Administer Geo redirect'),
    'description' => t('Administrative access to the Geo redirect pages.'),
    'restrict access' => TRUE,
  );
  return $permissions;
}

/**
 * Implementation of hook_menu().
 */
function geo_redirect_menu() {
  $items = array();

  $items['admin/config/search/geo-redirect'] = array(
    'title' => 'Geo redirect URLs',
    'description' => 'Redirect users from one URL to another based on their country.',
    'page callback' => 'geo_redirect_list',
    'access arguments' => array('administer geo_redirect'),
    'file' => 'includes/geo_redirect.admin.inc',
  );
  $items['admin/config/search/geo-redirect/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/config/search/geo-redirect/add'] = array(
    'title' => 'Add geo redirect',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('geo_redirect_edit_form'),
    'access arguments' => array('administer geo_redirect'),
    'file' => 'includes/geo_redirect.admin.inc',
    'type' => MENU_LOCAL_ACTION,
  );
  $items['admin/config/search/geo-redirect/edit/%'] = array(
    'title' => 'Edit geo redirect',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('geo_redirect_edit_form', 5),
    'access arguments' => array('administer geo_redirect'),
    'file' => 'includes/geo_redirect.admin.inc',
  );
  $items['admin/config/search/geo-redirect/delete/%'] = array(
    'title' => 'Delete redirect',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('geo_redirect_delete_form', 5),
    'access arguments' => array('administer geo_redirect'),
    'file' => 'includes/geo_redirect.admin.inc',
  );
  $items['admin/config/search/geo-redirect/settings'] = array(
    'title' => 'Settings',
    'description' => 'Configure behavior for geo redirect URLs.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('geo_redirect_settings_form'),
    'access arguments' => array('administer geo_redirect'),
    'file' => 'includes/geo_redirect.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 50,
  );

  return $items;
}

/**
 * Execute geo redirect.
 */
function geo_redirect_execute($geo_redirect, $redirect = TRUE) {
  // Let other modules alter the geo redirect object and $redirect variable.
  drupal_alter('geo_redirect_execute', $geo_redirect, $redirect);

  // If $redirect is false, do not execute redirection.
  if (!$redirect) {
    return;
  }

  // Getting the requested path.
  $geo_access_url = drupal_get_destination();
  $geo_destination_url = $geo_access_url['destination'];

  // Checking path /user is allowed. Only allow /user path for anonymous users.
  if ($geo_redirect->is_user_allowed && $geo_destination_url != 'user' && user_is_anonymous()) {
    return;
  }
  // Otherwise redirect to specified url.
  else {

    if (variable_get('geo_redirect_log', FALSE)) {
      watchdog('geo_redirect', t('Redirected user to %url (Country code: %country_code)', array('%url' => $geo_redirect->redirect_url, '%country_code' => $geo_redirect->country_code)));
    }

    drupal_goto($geo_redirect->redirect_url);
  }
}

/**
 * Load the geo redirect from the database.
 */
function geo_redirect_load($gid) {
  $geo_redirect = db_select('geo_redirect_list', 'gr')
    ->fields('gr', array('gid', 'country_code', 'redirect_url', 'is_user_allowed'))
    ->condition('gid', $gid, '=')
    ->range(0, 1) // We need only one record.
    ->execute()
    ->fetchObject();
  return $geo_redirect;
}

/**
 * Load the geo redirect using country.
 */
function geo_redirect_load_by_country_code($country_code) {
  $geo_redirect = db_select('geo_redirect_list', 'gr')
    ->fields('gr', array('gid', 'country_code', 'redirect_url', 'is_user_allowed'))
    ->condition('country_code', $country_code, '=')
    ->range(0, 1) // We need only one record.
    ->execute()
    ->fetchObject();
  return $geo_redirect;
}

/**
 * Prepare default geo redirect object.
 */
function geo_redirect_object_prepare($geo_redirect, $defaults = array()) {
  $defaults += array(
    'gid' => NULL,
    'country_code' => NULL,
    'redirect_url' => '',
    'is_user_allowed' => 0,
  );

  foreach ($defaults as $key => $default) {
    if (!isset($geo_redirect->{$key})) {
      $geo_redirect->{$key} = $default;
    }
  }
}

/**
 * Save geo redirect object into database.
 */
function geo_redirect_save($geo_redirect) {
  // Remove if is_new parameter is set.
  unset($geo_redirect->is_new);
  $primary_keys = array();
  if (!empty($geo_redirect->gid)) {
    // As we have only one primary key, we can use it as a string.
    $primary_keys = 'gid';
  }
  drupal_write_record('geo_redirect_list', $geo_redirect, $primary_keys);
}

/**
 * Delete geo redirect object.
 */
function geo_redirect_delete($gid) {
  // Add code to delete the geo redirect.
  db_delete('geo_redirect_list')->condition('gid', $gid, '=')->execute();
}

/**
 * Get country code for user.
 */
function geo_redirect_geoip_country_code() {
  module_load_include('inc', 'geo_redirect', 'includes/geo_redirect');
  $geo = geoip_open(drupal_get_path('module', 'geo_redirect') . '/includes/GeoIP.dat', GEOIP_MEMORY_CACHE);

  // Check if debug is enabled.
  if (variable_get('geo_redirect_debug', FALSE) && !empty($_GET['grip_debug'])) {
    $ip_address = $_GET['grip_debug'];
  }
  else {
    $ip_address = ip_address();
  }
  $country_code = geoip_country_code_by_addr($geo, $ip_address);
  return $country_code;
}

/**
 * Get country names.
 */
function geo_redirect_country_names() {
  $gip = new GeoIP;
  $_geo_redirect_country_codes = $gip->GEOIP_COUNTRY_CODES;
  $_geo_redirect_country_names = $gip->GEOIP_COUNTRY_NAMES;
  $_geo_redirect_countries = array_combine($_geo_redirect_country_codes, $_geo_redirect_country_names);
  return $_geo_redirect_countries;
}
