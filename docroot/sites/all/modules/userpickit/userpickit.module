<?php

/**
 * @file
 * Main file for User Pic Kit.
 */

module_load_include('inc', 'userpickit', 'userpickit.user');
module_load_include('inc', 'userpickit', 'userpickit.admin');

/**
 * Key to store user picture type preference in $user->data.
 */
define('USERPICKIT_USER_PICTURE_TYPE_CURRENT', 'userpickit_type');

/**
 * A cache will not expire when $cache->expire is set to this. Requires
 * manual invalidation.
 *
 * @see userpickit_cache_set()
 */
define('USERPICKIT_CACHE_EXPIRE_NEVER', NULL);

/**
 * Picture type callback result will not be cached if 'cache lifetime' is set.
 *
 * Picture type callback will be called each time for this account.
 */
define('USERPICKIT_CACHE_DISABLE', 0);

/**
 * Use last picture
 *
 * @see userpickit_behavior_fail_load_get()
 */
define('USERPICKIT_BEHAVIOR_FAIL_LOAD_NEW_KEEP_LAST',  'keep');

/**
 * Erase last picture, reset to default.
 *
 * @see userpickit_behavior_fail_load_get()
 */
define('USERPICKIT_BEHAVIOR_FAIL_LOAD_NEW_ERASE_LAST', 'erase');

/**
 * Active picture type image style.
 */
define('USERPICKIT_IMAGE_STYLE_PICTURE_CONFIGURATION', 'userpickit_picture_configuration');

/**
 * Variable name for 'user preference' migration assistant.
 *
 * Set to TRUE to activate 'user preference' migration assistant.
 * Delete variable to deactivate.
 *
 * This setting does not need to be upgraded between Drupal versions.
 *
 * @see userpickit_maintenance_form()
 */
define('USERPICKIT_VARIABLE_MIGRATION_USER_PREFERENCES_NOT_DONE', 'userpickit_migration_user_preferences_not_done');

/**
 * Variable name for 'user preference' migration assistant.
 *
 * Current uid of user the migration assistant is processing.
 *
 * This setting does not need to be upgraded between Drupal versions.
 *
 * @see userpickit_maintenance_migrate_user_preferences_operation()
 */
define('USERPICKIT_VARIABLE_MIGRATION_USER_PREFERENCES_UID', 'userpickit_migration_user_preferences_uid');

/**
 * Implements hook_permission().
 */
function userpickit_permission() {
  $permissions = array();

  $permissions['administer userpickit'] = array(
    'title' => t('Administer User Pic Kit'),
    'restrict access' => TRUE,
  );

  $picture_types = userpickit_picture_type_info();

  foreach ($picture_types as $picture_type => $info) {
    $permissions['userpickit use ' . $picture_type . ' type'] = array(
      'title' => $info['title'],
      'description' => t('Allow user to change picture to @title.', array(
        '@title' => $info['title'],
      )),
    );
  }

  return $permissions;
}

/**
 * Implements hook_menu().
 */
function userpickit_menu() {
  $items = array();

  $items['admin/config/people/userpickit'] = array(
    'title' => 'User Pic Kit',
    'description' => 'Configure User Pic Kit',
    'file' => 'userpickit.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('userpickit_settings_form'),
    'access arguments' => array('administer userpickit')
  );

  $items['admin/config/people/userpickit/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  $items['admin/config/people/userpickit/picture_types'] = array(
    'title' => 'Picture types',
    'description' => 'Configure settings for picture types',
    'file' => 'userpickit.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('userpickit_picture_types_form'),
    'access arguments' => array('administer userpickit'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );

  $items['admin/config/people/userpickit/picture_types/manage/%_userpickit_picture_type_menu'] = array(
    'title' => 'Picture type',
    'description' => 'Configure settings for a picture type',
    'file' => 'userpickit.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('userpickit_picture_type_form', 6),
    'access arguments' => array('administer userpickit'),
  );

  $items['admin/config/people/userpickit/maintenance'] = array(
      'title' => 'Maintenance',
      'description' => 'Migration and maintenance of User Pic Kit.',
      'file' => 'userpickit.admin.inc',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('userpickit_maintenance_form'),
      'access arguments' => array('administer userpickit'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 20,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function userpickit_theme() {
  return array(
    // User picture configuration form
    'userpickit_picture_configuration_active' => array(
      'render element' => 'form',
      'file' => 'userpickit.admin.inc',
    ),
    'userpickit_picture_configuration_inactive' => array(
      'render element' => 'form',
      'file' => 'userpickit.admin.inc',
    ),
  );
}

/**
 * Implements hook_init().
 */
function userpickit_init() {
  if (user_access('administer userpickit') && path_is_admin(current_path()) && variable_get(USERPICKIT_VARIABLE_MIGRATION_USER_PREFERENCES_NOT_DONE, NULL)) {
    drupal_set_message(t('Please run User Pic Kit !link.', array(
      '!link' => l(t('migration assistant'), 'admin/config/people/userpickit/maintenance')
    )), 'warning', FALSE);
  }
}

/**
 * Implements hook_cron().
 */
function userpickit_cron() {
  // Delete expired pictures that are not a users active picture type.
  $query = db_select('userpickit_pictures', 'c');
  $query->leftJoin('userpickit_user_preferences', 'p', 'c.type = p.picture_type');
  $result = $query
    ->fields('c', array('type', 'uid', 'fid'))
    ->condition('c.expire', REQUEST_TIME, '<')
    ->isNull('p.uid')
    ->addTag('userpickit_cron_picture_expire')
    ->execute();

  foreach ($result as $row) {
    _userpickit_cache_delete($row->type, $row->uid, $row->fid);
  }
}

/**
 * Implements hook_entity_update().
 */
function userpickit_entity_update($entity, $entity_type) {
  _userpickit_entity_update_user($entity, $entity_type);
}

/**
 * Implements template_preprocess_user_picture().
 *
 * For debugging purposes, instantly return; to show the picture in
 * $user->picture instead of potentially linking to a remote or cached file.
 */
function userpickit_preprocess_user_picture(&$variables) {
  $variables['user_picture'] = '';

  // $variables['account'] is not really the user account, it could be a user,
  // node, or comment object. Rely on $account->uid/name/picture only.
  // @see template_preprocess_user_picture()
  $account = _userpickit_load_account($variables['account']);

  $uri = userpickit_picture_uri(NULL, $account);
  if (!$uri) {
    return;
  }

  // Create the picture
  $variables['user_picture'] = userpickit_render_picture($account, $uri);

  // Link the picture
  if ($account->uid && user_access('access user profiles')) {
    // Create link to the user's profile.
    $attributes = array('title' => t('View user profile.'));
    $variables['user_picture'] = l($variables['user_picture'], 'user/' . $account->uid, array('attributes' => $attributes, 'html' => TRUE));
  }
  elseif (!empty($account->homepage)) {
    // User is anonymous
    $attributes = array('title' => t('View user website.'), 'rel' => 'external nofollow');
    $variables['user_picture'] = l($variables['user_picture'], $account->homepage, array('attributes' => $attributes, 'html' => TRUE));
  }
}

/**
 * Implements hook_image_default_styles().
 */
function userpickit_image_default_styles() {
  $styles = array();

  $styles[USERPICKIT_IMAGE_STYLE_PICTURE_CONFIGURATION] = array(
    'effects' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => 194,
          'height' => 144,
        ),
        'weight' => 1,
      ),
    ),
  );

  return $styles;
}

/**
 * Render markup for a users picture.
 *
 * @param object $account
 *   User object
 * @param string $uri
 *   Absolute URI to picture.
 * @param string $style_name
 *   (optional) style name.
 *
 * @return string
 *   HTML image markup.
 */
function userpickit_render_picture($account, $uri, $style_name = NULL) {
  $variables = array(
    'path' => $uri,
    'title' => t("@user's picture", array('@user' => format_username($account))),
  );
  $variables['alt'] = $variables['title'];

  $variables['style_name'] = !$style_name ? variable_get('user_picture_style', '') : $style_name;

  if (module_exists('image') && file_valid_uri($uri) && image_style_load($variables['style_name'])) {
    // Internal
    return theme('image_style', $variables);
  }
  else {
    // Mostly External
    return theme('image', array('path' => $uri));
  }
}

/**
 * Get information about a picture type for a user.
 *
 * @param string $picture_type
 *   Picture type.
 * @param object $account
 *   User object
 */
function userpickit_picture($picture_type, $account) {
  if ($info = userpickit_picture_type_info($picture_type)) {
    if (is_callable($info['callback'])) {
      return $info['callback']($picture_type, $account);
    }
  }
}

/**
 * Get a default image for a picture type.
 *
 * Do not provide any fallback if no default callback is defined.
 *
 * @see userpickit_path_default().
 *
 * @param string $picture_type
 *   Picture type.
 * @param object $account
 *   User object.
 */
function userpickit_picture_type_path_default($picture_type, $account) {
  $info = userpickit_picture_type_info($picture_type);
  if ($info) {
    if (isset($info['default callback']) && is_callable($info['default callback'])) {
      $uri = $info['default callback']($picture_type, $account);
      if (userpickit_valid_uri($uri)) {
        return $uri;
      }
    }
  }
}

/**
 * Get a default image for a picture type.
 *
 * Provides fallback to the global default if the picture type does not define
 * a default uri.
 *
 * @see userpickit_picture_type_path_default().
 *
 * @param string $picture_type
 *   Picture type.
 * @param object $account
 *   User object.
 */
function userpickit_path_default($picture_type = NULL, $account = NULL) {
  $uri = userpickit_picture_type_path_default($picture_type, $account);
  return $uri ? $uri : variable_get('user_picture_default', '');
}

/**
 * Get an picture uri for a user.
 *
 * @param string $picture_type
 *   Leave blank to use users default.
 * @param object $account
 *   User object.
 *
 * @return string|NULL
 *   URL or path to an image. Or NULL to use default.
 */
function userpickit_picture_uri($picture_type = NULL, $account = NULL) {
  $account = isset($account) ? $account : $GLOBALS['user'];
  $picture_type = isset($picture_type) ? $picture_type : userpickit_picture_type_user_get($account);

  if ($picture_type && userpickit_picture_type_info($picture_type)) {
    // Check if in cache
    $cache = userpickit_picture_path_cache($picture_type, $account);

    if (!empty($cache->fid)) {
      $file = file_load($cache->fid);
      if ($file && !empty($file->uri) && file_exists($file->uri)) {
        return $file->uri;
      }
    }
    elseif (!empty($cache->uri)) {
      return $cache->uri;
    }

    // Cache may be in a state where uri and fid are empty.
    return userpickit_path_default($picture_type, $account);
  }

  return NULL;
}

/**
 * This will cache the uri, and if a picture is remote it may be downloaded
 * and cached locally.
 *
 * @param string $picture_type
 *   Picture type.
 * @param stdClass $account
 *   User object.
 *
 * @return stdClass
 *   A cache entry.
 */
function userpickit_picture_path_cache($picture_type, $account) {
  $cache = userpickit_cache_get($picture_type, $account->uid);

  if (!$cache || ($cache->expire < REQUEST_TIME && $cache->expire != USERPICKIT_CACHE_EXPIRE_NEVER)) {
    // Clean up old files
    if ($cache) {
      $cache_previous = $cache;
      if (is_numeric($cache_previous->fid)) {
        userpickit_picture_uncache($cache_previous->fid, $account->uid);
      }
    }

    // Create new cache value
    $cache = new StdClass;
    $cache->fid = NULL;
    $cache->uri = '';

    $info = userpickit_picture($picture_type, $account);
    if ($info) {
      $settings = userpickit_picture_type_settings_get($picture_type);

      if (array_key_exists('message', $info)) {
        $cache->message = $info['message'];
      }

      if (array_key_exists('message variables', $info)) {
        $cache->message_variables = $info['message variables'];
      }

      if (array_key_exists('cache lifetime', $info)) {
        $lifetime = $info['cache lifetime'];
        $cache->expire = is_numeric($lifetime) && $lifetime > 0 ? REQUEST_TIME + $lifetime : $lifetime;
      }
      elseif (!empty($settings->info['cache lifetime'])) {
        $cache->expire = REQUEST_TIME + $settings->info['cache lifetime'];
      }

      // Drupal file
      if (!empty($info['fid']) && is_numeric($info['fid'])) {
        $file = file_load($info['fid']);
        if ($file && $file->status) {
          $cache->fid = $file->fid;
          $cache->uri = $file->uri;
        }
      }

      // Uri
      elseif (!empty($info['uri']) && valid_url($info['uri'])) {
        $uri = $info['uri'];
        $cache_locally = $settings->info['cache locally']; // If the file is remote, not already local, cache it locally.

        if (!file_valid_uri($uri) && $cache_locally) {
          $file = userpickit_picture_cache($picture_type, $uri, $account);

          if ($file && $file->status) {
            $cache->uri = $uri;
            $cache->fid = $file->fid;
          }
        }
        else {
          $cache->uri = $uri;
        }
      }

      if (!isset($cache->expire) || $cache->expire != USERPICKIT_CACHE_DISABLE) {
        userpickit_cache_set($picture_type, $account->uid, $cache);
      }
    }
  }

  return $cache;
}

/**
 * Download a file and associate it with userpickit.
 *
 * @param $picture_type
 *   Picture type.
 * @param $uri
 *   URI of file to download.
 * @param $account
 *   Associate file with account.
 *
 * @return stdClass
 *   A loaded File object.
 */
function userpickit_picture_cache($picture_type, $uri, $account) {
  $directory = 'public://userpickit/' . $picture_type;

  // Get the extension for file.
  $parsed_url = parse_url($uri);
  $uri_pathinfo = pathinfo(drupal_basename($parsed_url['path']));
  $extension = key_exists('extension', $uri_pathinfo) ? '.' . $uri_pathinfo['extension'] : '';
  
  $file_path = $directory . '/' . $account->uid . $extension;

  if (!file_valid_uri($uri) && file_prepare_directory($directory, FILE_CREATE_DIRECTORY)) {
    $result = drupal_http_request($uri);
    if ($result->code == 200) {
      $file = file_save_data($result->data, $file_path, FILE_EXISTS_REPLACE);
      if ($file) {
        file_usage_add($file, 'userpickit', 'pictures', $account->uid);
        return $file;
      }
    }
  }
}

/**
 * Disassociate and delete a file.
 *
 * @param $fid
 *   File ID.
 * @param $account
 *   Account disassociating file.
 */
function userpickit_picture_uncache($fid, $uid) {
  $image = file_load($fid);
  if ($image) {
    file_usage_delete($image, 'userpickit', 'pictures', $uid, 0);
    return file_delete($image);
  }
}

/**
 * Get info for a picture type.
 *
 * @param $picture_type
 *   Picture type, or NULL to return an array with info about all types.
 *
 * @return Array|bool
 *   Picture type info, or FALSE.
 */
function userpickit_picture_type_info($picture_type = NULL) {
  global $language;
  $langcode = $language->language;

  $picture_types = &drupal_static('userpickit_picture_type_info');

  if (!isset($picture_types)) {
    if ($cache = cache_get("userpickit_picture_type_info:$langcode")) {
      $picture_types = $cache->data;
    }
    else {
      $picture_types = array();
      $required_keys = array('title', 'callback');

      foreach (module_implements('userpickit_info') as $module) {
        foreach (module_invoke($module, 'userpickit_info') as $name => $info) {
          // Check all required keys exist.
          foreach ($required_keys as $required_key) {
            if (!array_key_exists($required_key, $info)) {
              continue 2;
            }
          }

          $picture_types[$name] = array(
            'picture_type' => $name,
            'module' => $module,
          ) + $info + array(
            'description' => '',
            'user cache invalidate' => FALSE,
          );
        }
      }

      drupal_alter('userpickit_picture_type_info', $picture_types);
      cache_set("userpickit_picture_type_info:$langcode", $picture_types);
    }
  }

  if (empty($picture_type)) {
    return $picture_types;
  }
  elseif (array_key_exists($picture_type, $picture_types)) {
    return $picture_types[$picture_type];
  }
}

/**
 * Menu callback.
 */
function _userpickit_picture_type_menu_load($picture_type) {
  return userpickit_picture_type_info($picture_type);
}

/**
 * Set settings for a picture type.
 *
 * @param string $module
 *   Module that defined the settings.
 *   Allows picture type and assets to be removed on uninstall.
 *
 * @param string $picture_type
 *   Picture type. Or NULL to set global settings.
 *
 * @param array $info
 *   Setting any key to NULL will automatically default to global settings.
 *   See _userpickit_picture_type_settings_default() for keys.
 */
function userpickit_picture_type_settings_set($module, $picture_type = NULL, $info = array()) {
  $result = db_merge('userpickit_picture_types')
    ->key(array(
      'name' => $picture_type,
    ))
    ->insertFields(array(
      'module' => $module,
      'name' => $picture_type,
    ))
    ->fields(array(
      'info' => serialize($info),
    ))
    ->execute();
}

/**
 * Get settings for a picture type.
 *
 * @param string $picture_type
 *   Picture type. Or NULL to get global settings.
 *
 * @param bool $default
 *   Automatically return default settings if no result is found.
 */
function userpickit_picture_type_settings_get($picture_type, $default = TRUE) {
  $fast = &drupal_static(__FUNCTION__, array());

  if (isset($fast[$picture_type][$default])) {
    return $fast[$picture_type][$default];
  }

  $row = db_select('userpickit_picture_types', 'pt')
    ->fields('pt', array('pid', 'name', 'module', 'info'))
    ->condition('name', $picture_type)
    ->addTag(__FUNCTION__)
    ->execute()
    ->fetchObject();

  if ($row) {
    $row->info = !empty($row->info) ? unserialize($row->info) : array();
  }
  elseif ($default) {
    $row = new StdClass;
    $row->info = array();
  }

  // Merge defaults
  if (isset($row->info)) {
    $row->info += array(
      'cache locally' => TRUE,
      'cache lifetime' => 2419200, // 28 days
    );
  }

  $fast[$picture_type][$default] = $row;
  return $row;
}

/**
 * Get a users' picture type cache.
 *
 * @param string $picture_type
 *   Picture type.
 * @param int $uid
 *   User ID.
 *
 * @return object|boolean
 *   Row from {userpickit_pictures}, or FALSE.
 */
function userpickit_cache_get($picture_type, $uid) {
  $row = db_select('userpickit_pictures', 'f')
    ->fields('f', array('type', 'uid', 'sid', 'expire', 'fid', 'uri', 'message', 'message_variables'))
    ->condition('type', $picture_type)
    ->condition('uid', $uid)
    ->addTag(__FUNCTION__)
    ->execute()
    ->fetchObject();

  if ($row) {
    $row->message_variables = !empty($row->message_variables) ? unserialize($row->message_variables) : array();
  }

  return $row;
}

/**
 * Create or update a users' picture type cache.
 *
 * @param string $picture_type
 *   Picture type.
 * @param int $uid
 *   User ID.
 * @param object $row
 *   Data to save.
 *
 * @return stdClass|FALSE
 *   Row from {userpickit_pictures}, or FALSE.
 */
function userpickit_cache_set($picture_type, $uid, $row) {
  $row = (array)$row + array(
    'fid' => NULL,
    'uri' => NULL,
    'expire' => REQUEST_TIME + 3600,
    'message' => '',
    'message_variables' => array(),
    'type' => $picture_type,
    'uid' => $uid,
  );

  drupal_alter('userpickit_cache', $row);

  $row['message_variables'] = serialize($row['message_variables']);

  $result = db_merge('userpickit_pictures')
    ->key(array(
      'type' => $picture_type,
      'uid' => $uid,
    ))
    ->fields($row)
    ->execute();

  if ($result && $cache = userpickit_cache_get($picture_type, $uid)) {
    if ($result === MergeQuery::STATUS_INSERT) {
      module_invoke_all('userpickit_cache_insert', $cache);
    }
    elseif ($result === MergeQuery::STATUS_UPDATE) {
      module_invoke_all('userpickit_cache_update', $cache);
    }
  }
}

/**
 * Delete and rebuild cache for a users picture type.
 *
 * @param string $picture_type
 *   Picture type.
 * @param object $account
 *   User object.
 */
function userpickit_cache_rebuild($picture_type, $account) {
  userpickit_cache_invalidate($picture_type, $account->uid, TRUE);
  userpickit_picture_path_cache($picture_type, $account);
}

/**
 * Invalidate a user picture cache.
 *
 * Invalidating a picture is done by setting the date to some time in the past.
 * The row should not be deleted as to maintain file (fid) association and so
 * something can be displayed to while a new cache is rebuilt.
 *
 * @param string $picture_type
 *   Picture type.
 * @param int $uid
 *   User ID.
 * @param boolean $force
 *   Set to TRUE only if the original file no longer exists.
 */
function userpickit_cache_invalidate($picture_type, $uid, $force = FALSE) {
  if ($force) {
    // Delete previous file
    $cache = userpickit_cache_get($picture_type, $uid);
    $fid = ($cache && $cache->fid) ? $cache->fid : NULL;
    _userpickit_cache_delete($picture_type, $uid, $fid);
  }
  else {
    db_update('userpickit_pictures')
      ->fields(array('expire' => 0))
      ->condition('type', $picture_type)
      ->condition('uid', $uid)
      ->execute();
  }
}

/**
 * Delete a picture cache permanantly.
 *
 * Modules outside of User Pic Kit should not call this helper directly.
 *
 * @param string $picture_type
 *   Picture type.
 * @param int $uid
 *   User ID.
 * @param string $fid
 *   Disassociate a file, if cached locally.
 */
function _userpickit_cache_delete($picture_type, $uid, $fid = NULL) {
  if ($fid) {
    userpickit_picture_uncache($fid, $uid);
  }

  // Delete cache
  db_delete('userpickit_pictures')
    ->condition('type', $picture_type)
    ->condition('uid', $uid)
    ->execute();
}

/**
 * Set the current picture type preference for a user.
 *
 * @param string $picture_type
 *   New picture type.
 * @param object $uid
 *   User ID.
 */
function userpickit_picture_type_user_set($picture_type, $uid) {
  $account = user_load($uid);
  $account->data[USERPICKIT_USER_PICTURE_TYPE_CURRENT] = $picture_type;
  user_save($account);

  $result = db_merge('userpickit_user_preferences')
    ->key(array(
      'uid' => $uid,
    ))
    ->fields(array(
      'picture_type' => $picture_type,
    ))
    ->execute();
}

/**
 * Get the current picture type preference for a user.
 *
 * Will always return a valid and active picture type.
 *
 * @param object $account
 *   User object.
 * @param bool $default
 *   Automatically return site default settings if preference not set.
 */
function userpickit_picture_type_user_get($account, $default = TRUE) {
  $user_picture_type = isset($account->data[USERPICKIT_USER_PICTURE_TYPE_CURRENT]) ? $account->data['userpickit_type'] : NULL;
  $default_type = $default ? userpickit_site_picture_type_get() : NULL;
  return ($user_picture_type && userpickit_picture_type_info($user_picture_type)) ? $user_picture_type : $default_type;
}

/**
 * Get the default picture type for the site.
 */
function userpickit_site_picture_type_get() {
  $site_picture_type = variable_get('userpickit_default', 'user');
  return userpickit_picture_type_info($site_picture_type) ? $site_picture_type : 'user';
}

/**
 * Get the behavior used when a new picture cannot be loaded.
 *
 * @return string
 *   Value of constants: USERPICKIT_BEHAVIOR_FAIL_LOAD_NEW_*
 */
function userpickit_behavior_fail_load_get() {
  return variable_get('userpickit_behavior_fail_load', USERPICKIT_BEHAVIOR_FAIL_LOAD_NEW_KEEP_LAST);
}

/**
 * Set the behavior used when a new picture cannot be loaded.
 *
 * @param $value
 *   Value of constants: USERPICKIT_BEHAVIOR_FAIL_LOAD_NEW_*
 */
function userpickit_behavior_fail_load_set($value) {
  return variable_set('userpickit_behavior_fail_load', $value);
}

/**
 * Store the current user picture in $user->picture.
 *
 * @param int $uid
 *   User ID.
 */
function userpickit_user_picture_reset($uid) {
  $account = user_load($uid);

  if (!$account) {
    return;
  }

  if (userpickit_behavior_fail_load_get() == USERPICKIT_BEHAVIOR_FAIL_LOAD_NEW_ERASE_LAST) {
    // If the active picture is not local, or the remote has not been cached, then
    // $account->picture will reset to an empty picture.
    $account->picture = 0;
  }

  $type = userpickit_picture_type_user_get($account);

  $cache = userpickit_cache_get($type, $account->uid);
  if ($cache && $cache->fid) {
    $account->picture = file_load($cache->fid);
  }

  user_save($account);
}

/**
 * If a uri is local, we will check if the file exists.
 */
function userpickit_valid_uri($uri) {
  if (valid_url($uri)) {
    if (file_valid_uri($uri)) {
      return file_exists($uri);
    }
    return TRUE;
  }

  return FALSE;
}

/**
 * Get actual user account for displayed entity, instead of bogitive object.
 *
 * Load $account->picture with file object if available.
 *
 * Taken from _gravatar_load_account()
 *
 * Thanks :)
 *
 * @param object $account
 *   Node, comment, or user object.
 * @return object
 *   User object.
 *
 * @see _gravatar_load_account()
 */
function _userpickit_load_account($account) {
  // If this is a node or comment object, load the user object.
  if (!empty($account->nid) || !empty($account->cid) || empty($account->roles)) {
    $original_values = $account;

    $account = $account->uid ? user_load($account->uid) : drupal_anonymous_user();

    // Load mail/homepage variable from an anonymous comment.
    if (!$account->uid) {
      $values = array_fill_keys(array('name', 'mail', 'homepage', 'hostname'), '');
      foreach ($values as $value => $default_value) {
        if (empty($account->$value)) {
          $account->$value = !empty($original_values->$value) ? $original_values->$value : $default_value;
        }
      }
    }
  }

  if (isset($account->picture) && is_numeric($account->picture)) {
    $account->picture = file_load($account->picture);
  }

  return $account;
}