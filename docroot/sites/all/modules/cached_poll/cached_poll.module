<?php

/**
 * @file
 * Main module file for Cached Poll module.
 */

/**
 * Implements hook_form_FORMID_alter().
 */
function cached_poll_form_poll_view_voting_alter(&$form, $form_state, $form_id) {
  $form['vote']['#submit'][] = 'cached_poll_submit';
}

/**
 * Implements hook_form_FORMID_alter().
 */
function cached_poll_form_poll_cancel_form_alter(&$form, $form_state, $form_id) {
  $form['submit']['#submit'][] = 'cached_poll_submit';
}

/**
 * Extra submit function for poll forms.
 *
 * This sets the cookie this module relies on.
 */
function cached_poll_submit() {
  global $cookie_domain;

  // Two weeks.
  $lifetime = 2 * 7 * 24 * 60 * 60;

  setcookie('NO_CACHE_POLL', 'Y', $_SERVER['REQUEST_TIME'] + ($lifetime), '/', $cookie_domain);
}

/**
 * Implements hook_node_load().
 */
function cached_poll_node_load($nodes, $types) {
  if (in_array('poll', $types)) {
    foreach ($nodes as $node) {
      // Is the current user allowed to vote?
      $vote_allowed = !empty($node->allowvotes);
      // Is the poll activated (i.e. is voting allowed at all)?
      $poll_active = !empty($node->active);
      // If the cookie is set, we can safely rely on the other values, because
      // results will not get cached.
      $cookie_set = !empty($_COOKIE['NO_CACHE_POLL']);

      if (!$vote_allowed && $poll_active && !$cookie_set) {
        // If we are not allowed to vote but the poll is active, the system has
        // determined this user is not allowed to vote, presumably because they
        // already voted. If the cookie is not set, we reset it.
        cached_poll_submit();
      }
    }
  }
}
