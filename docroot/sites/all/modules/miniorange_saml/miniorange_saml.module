<?php
/**
 * @file
 * Module file for miniOrange SAML Module.
 */
 
/**
* Implements hook_menu().
*/
function miniorange_saml_menu() {

  $items['admin/config/people/miniorange_saml'] = array(
    'title' => 'miniOrange SAML Login Configuration',
    'description' => 'miniOrange SAML Login Configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('miniorange_saml_customer_setup'),
    'access arguments' => array('administer site configuration'),
    'file' => 'miniorange_saml_customer_setup.inc',
  );

  $items['admin/config/people/miniorange_saml/customer_setup'] = array(
    'title' => '1. Customer Setup',
    'weight' => -6,
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access arguments' => array('administer site configuration'),
    'page arguments' => array('miniorange_saml_customer_setup'),
    'file' => 'miniorange_saml_customer_setup.inc',
  );

  $items['admin/config/people/miniorange_saml/idp_setup'] = array(
    'title' => '2. Identity Provider Setup',
    'weight' => -5,
    'access arguments' => array('administer site configuration'),
    'page arguments' => array('miniorange_sp_information'),
    'file' => 'miniorange_sp_information.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/people/miniorange_saml/sp_setup'] = array(
    'title' => '3. Service Provider Setup',
    'weight' => -4,
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer site configuration'),
    'page arguments' => array('miniorange_saml_idp_setup'),
    'file' => 'miniorange_saml_idp_setup.inc',
  );

  $items['admin/config/people/miniorange_saml/signon_settings'] = array(
    'title' => '4. Signin Settings',
    'weight' => -3,
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer site configuration'),
    'page arguments' => array('miniorange_saml_login_options'),
    'file' => 'miniorange_saml_login_options.inc',
  );

  $items['admin/config/people/miniorange_saml/licensing'] = array(
    'title' => '5. Licensing',
    'weight' => -2,
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer site configuration'),
    'page arguments' => array('miniorange_saml_licensing'),
    'file' => 'miniorange_saml_licensing.inc',
  );

  $items['admin/config/people/miniorange_saml/support'] = array(
    'title' => '6. Support',
    'weight' => -1,
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer site configuration'),
    'page arguments' => array('miniorange_saml_support'),
    'file' => 'miniorange_saml_support.inc',
  );


  $items['samllogin'] = array(
   'access callback' => TRUE,
    'page callback' => 'saml_login',
    'type' => MENU_CALLBACK
  );

  $items['samlassertion'] = array(
    'access callback' => TRUE,
    'page callback' => 'saml_response',
    'type' => MENU_CALLBACK
  );	

  $items['testConfig'] = array(
    'access callback' => TRUE,
    'page callback' => 'test_configuration',
    'type' => MENU_CALLBACK,
  );

  return $items;

}

/**
* Test configuration callback
*/
function test_configuration() {
  global $base_url;
  $sendRelayState = "testValidate";
  $ssoUrl = variable_get("miniorange_saml_idp_login_url", "");
  $acsUrl = $base_url . "/?q=samlassertion";
  $issuer = $base_url;
  $samlRequest = Utilities::createAuthnRequest($acsUrl, $issuer, FALSE);
  $redirect = $ssoUrl;
  if (strpos($ssoUrl,'?') !== false) {
    $redirect .= '&';
  } else {
      $redirect .= '?';
  }
  $redirect .= 'SAMLRequest=' . $samlRequest . '&RelayState=' . urlencode($sendRelayState);
  header('Location: '.$redirect);
  exit();
}

/**
* Implements hook_form_alter().
*/
function miniorange_saml_form_alter(&$form, &$form_state, $form_id) {
	global $base_url;
	$saml_login_enabled = variable_get('miniorange_saml_enable_login', FALSE);
	if ($saml_login_enabled == TRUE && $form_id == 'user_login_block') {
      $saml_login_url = $base_url . '/?q=samllogin';
      $idp_name = variable_get('miniorange_saml_idp_name', '');
      $form['loginurl']= array(array(
        '#markup' => '<a href="'. $saml_login_url .'">Login using ' . $idp_name . '</a>'
      ));
	}
}

/**
* Initiate SAML Login.
*/
function saml_login() {
  global $base_url;
  $acs_url = $base_url . '/?q=samlassertion';
  $sso_url = variable_get('miniorange_saml_idp_login_url', '');	
  $authn_request = new MiniOrangeAuthnRequest();
  $authn_request->initiateLogin($acs_url, $sso_url, $base_url);
}

/**
* Implements hook_libraries_info().
*/
function miniorange_saml_libraries_info() {
  $libraries['xmlseclibs'] = array(
    'name' => 'XML Encryption and Signatures',
    'vendor url' => 'https://code.google.com/p/xmlseclibs/',
    'download url' => 'https://xmlseclibs.googlecode.com/files/xmlseclibs-1.3.1.tar.gz',
    'version arguments' => array(
      'file'    => 'xmlseclibs.php',
      'pattern' => '/@version\s*(.*)$/',
      'lines'   => 100,
    ),
    'files' => array(
      'php' => array(
        'xmlseclibs.php',
      ),
    ),
  );

  return $libraries;
}

/**
* Validate SAML Response and authenticate user.
*/
function saml_response() {
  global $base_url, $user;
  $acs_url = $base_url . '/?q=samlassertion';
  $cert_fingerprint = variable_get('miniorange_saml_idp_x509_certificate', '');
  $issuer = variable_get('miniorange_saml_idp_issuer', '');
  $sp_entity_id = variable_get('miniorange_saml_sp_issuer', '');

  // Try main library path. 
  if (libraries_get_path('xmlseclibs')) {
    $xmlseclibs_file = libraries_get_path('xmlseclibs') . '/xmlseclibs.php';
  }
  else {
    // Trying alternate library path.
    $xmlseclibs_file = libraries_get_path('xmlseclibs-master') . '/xmlseclibs.php';
  }
  
  libraries_load('xmlseclibs');
   
  if (!class_exists('XMLSecurityKey') && !@include($xmlseclibs_file)) {
    echo "xmlseclibs not loaded properly";
    exit();
  }
  else {
    //include $xmlseclibs_file;
  }


  $response_obj = new MiniOrangeAcs();
  $response = $response_obj->processSamlResponse($_POST, $acs_url, $cert_fingerprint, $issuer, $base_url, $sp_entity_id);
  $account = user_load_by_mail($response);

  // Create user if not already present.
  if ($account == NULL) {
  	$random_password = user_password(8);
  	$new_user = array(
      'name' => $response,
      'mail' => $response,
      'pass' => $random_password,
      'status' => 1,
      'roles' => array(
        DRUPAL_AUTHENTICATED_RID => 'authenticated user',
      ),
    );
    $account = user_save('', $new_user);
  }

  // Flood control check and check if user is blocked.
  if (flood_is_allowed($response, 3600) && user_is_blocked($response) == FALSE) {
  	// Allowed to proceed.
  	// Clear flood control event.
  	flood_clear_event($response);
  	$user = user_load($account->uid);
    $edit = array();
    $edit['redirect'] = $base_url;
    user_login_finalize($edit);
    drupal_goto();
  } 
  else {
    // Register flood control event.
    flood_register_event($response, 3600);
    form_set_error('user_login_block', t('You are not allowed to login'));
    drupal_goto();  
  }

}
