<?php 

/**
* Implementations of hook_permission()
*
* @return array of permissions
*/
function hide_group_permission(){
  $perms['view hidden group'] = array(
    'title' => t('View hidden group'),
    'description' => t('Can view hidden group'),
  );

  $perms['administer hide group'] = array(
    'title' => t('Administer hide group'),
    'description' => t('Can administrate hide group'),
  );

  return $perms;
}

/**
 * Implementations of hook_menu()
 * 
 * @return array of menu items
 */
function hide_group_menu(){
  $items['admin/config/user-interface/hide-group'] = array(
    'title' => t('Hide group'),
    'description' => t('Hide group settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hide_group_settings_form'),
    'access arguments' => array('administer hide group'),
  );

  return $items;
}

/**
 * Hide group settings form
 * You can enter the fieldset you want to hide manually (it will be hidden and not striped)
 * 
 * @param array $form
 * @param array $form_state
 */
function hide_group_settings_form($form, &$form_state){
  $form = array();
  $hiddenGroupList = '';
  $declaredHiddenGroupList = module_invoke_all('hide_group_declare');

  if(variable_get('hide_group_hidden_group_list', null) != null)
    $hiddenGroupList = html_entity_decode(implode('&#13;&#10;', variable_get('hide_group_hidden_group_list', null)));

  if(!empty($declaredHiddenGroupList))
    $form['declaredGroupList'] = array(
      '#type' => 'markup',
      '#markup' => '<strong>'.t('Those groups are also hidden (declared on hook_hide_group_declare) :').'</strong><br />'.implode('<br />', $declaredHiddenGroupList),
    );

  $form['groupList'] = array(
    '#type' => 'textarea',
    '#title' => t('Hidden groups'),
    '#default_value' => $hiddenGroupList,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );

  return $form;
}

/**
 * Submit handler for hide group form
 * 
 * @param array $form
 * @param array $form_state
 */
function hide_group_settings_form_submit($form, $form_state){
  if(isset($form_state['values']['groupList']))
    variable_set('hide_group_hidden_group_list', preg_split('/\\r?\\n/', $form_state['values']['groupList']));
}

/**
 * Implementation of hook_form_alter
 * Only node form are altered to hide fieldset either from the fieldset format type, the setting form or the hook_hide_group_declare
 * 
 * @param array $form
 * @param array $form_state
 * @param array $form_id
 */
function hide_group_form_alter(&$form, &$form_state, $form_id){
  if(preg_match('/node_form$/', $form_id) && isset($form['#groups'])){
    $groupInfoList = field_group_formatter_info();

    if(user_access('view hidden_group')){
      // Fall back to tab fieldset
      if(isset($groupInfoList['form']['tab']))
        foreach($form['#groups'] as $id => $rowGroup)
          if(is_object($rowGroup) && $rowGroup->format_type == 'hide_group'){
            $form['#groups'][$id]->format_type = 'tab';
            $form['#groups'][$id]->format_settings['formatter'] = $groupInfoList['form']['tab']['default_formatter'];
            $form['#groups'][$id]->format_settings['instance_settings']['required_fields'] = $groupInfoList['form']['tab']['instance_settings']['required_fields'];
            $form['#groups'][$id]->format_settings['instance_settings']['classes'] = $groupInfoList['form']['tab']['instance_settings']['classes'];
      }
    }elseif(isset($groupInfoList['form']['hide_group'])){
      // Get groups declared hidden by hook
      $hiddenGroupList = array_merge(variable_get('hide_group_hidden_group_list', array()), module_invoke_all('hide_group_declare'));

      if(!empty($hiddenGroupList))
        foreach($hiddenGroupList as $rowHiddenGroup){
          if(isset($form[$rowHiddenGroup]) && $form[$rowHiddenGroup]['#type'] == 'fieldset'){
            $form[$rowHiddenGroup]['#prefix'] = '<div style="display:none">';
            $form[$rowHiddenGroup]['#suffix'] = '</div>';
          }
          // Search in #groups too         
          elseif(isset($form['#groups'][$rowHiddenGroup]) && $form['#groups'][$rowHiddenGroup]->format_type != 'hide_group'){
            $form['#groups'][$rowHiddenGroup]->format_type = 'hide_group';
            $form['#groups'][$rowHiddenGroup]->format_settings = array();
            $form['#groups'][$rowHiddenGroup]->format_settings['formatter'] = $groupInfoList['form']['hide_group']['default_formatter'];
            $form['#groups'][$rowHiddenGroup]->format_settings['instance_settings'] = array();
            $form['#groups'][$rowHiddenGroup]->format_settings['instance_settings']['classes'] = $groupInfoList['form']['hide_group']['instance_settings']['classes'];
          }
        }
    }
  }
}

/**
 * Fieldset format type for hide group
 * 
 * @return array
 */
function hide_group_field_group_formatter_info(){
  return array(
  	'form' => array(
  	  'hide_group' => array(
  	  	'label' => t('Hide group'),
  	  	'description' => t('This is field group that hide the entire fieldset'),
  	  	'format_types' => array('hidden', 'striped'),
  		'instance_settings' => array('classes' => 'hide_group'),
  	  	'default_formatter' => 'hidden',
      ),
    ),
	'display' => array(
	  'hide_group' => array(
	  	'label' => t('Hide group'),
	  	'description' => t('This is field group that hide the entire fieldset'),
		'format_types' => array('hidden', 'striped'),
  		'instance_settings' => array('classes' => 'hide_group'),
  	  	'default_formatter' => 'hidden',
      ),
    ),
  );
}

/**
 * Fieldset prerender for hide_group fieldset format type
 * 
 * @param array $element
 * @param stdclass $group
 * @param array $form
 */
function field_group_pre_render_hide_group(&$element, $group, &$form){
  switch($group->format_settings['formatter']){
    case 'hidden':
      $element['#prefix'] = '<div style="display:none">';
      $element['#suffix'] = '</div>';
    break;

    case 'striped':
      $element = null;
    break;
  }
}
