<?php
/**
 * @file
 * Code for the nm_blog feature.
 */

include_once 'nm_events.features.inc';


/**
 * Implements hook_init().
 */
function nm_events_init() {
  //redirect for 'calendar url' View to correct View
  //make sure we are in the correct section
  if (arg(0) == 'events' && arg(1) && !arg(2)) {

    //save arg 1
    $date = arg(1);
    //parse arg 1
    $arg_1 = explode('-', arg(1));

    //this is a 'day'
    if (count($arg_1) == 3) {
      drupal_goto('events/day/' . $date);
    }
    //this is a month
    elseif (count($arg_1) == 2) {
      drupal_goto('events/month/' . $date);
    }
    //this is a year
    elseif (count($arg_1) == 1 && is_numeric($date)) {
      drupal_goto('events/year/' . $date);
    }

  }
}


/**
 * Implements hook_preprocess_page().
 */
function nm_events_preprocess_page(&$variables) {

  //if this is an event node
  if (isset($variables['breadcrumb_array']) && isset($variables['node']) && $variables['node']->type == 'nm_event') {

    //set array of replacements
    $replacements = array(
      '01' => 'January',
      '02' => 'February',
      '03' => 'March',
      '04' => 'April',
      '05' => 'May',
      '06' => 'June',
      '07' => 'July',
      '08' => 'August',
      '09' => 'September',
      '10' => 'October',
      '11' => 'November',
      '12' => 'December',
    );

    //work with the date part of breadcrumb
    $dateparts = explode(' ', $variables['breadcrumb_array'][2]['title']);

    //make sure we have the correct data
    if (count($variables['breadcrumb_array']) == 4 && count($dateparts) == 3) {
      if (is_numeric($dateparts[0]) && is_numeric($dateparts[1]) && is_numeric($dateparts[2])) {

        //match up month replacement
        if (isset($replacements[$dateparts[1]])) {

          //add placeholder
          $variables['breadcrumb_array'][4] = array();
          //move last item (node title)
          $variables['breadcrumb_array'][5] = $variables['breadcrumb_array'][3];

          //day (have to set before we overwrite in year)
          $variables['breadcrumb_array'][4]['title'] = $dateparts[2];
          $variables['breadcrumb_array'][4]['href'] = $variables['breadcrumb_array'][2]['href'];
          $variables['breadcrumb_array'][4]['hover'] = $replacements[$dateparts[1]] . ' ' . $dateparts[2] . ', ' . $dateparts[0];

          //month
          $variables['breadcrumb_array'][3]['title'] = $replacements[$dateparts[1]];
          $variables['breadcrumb_array'][3]['href'] = 'events/' . $dateparts[0] . '-' . $dateparts[1];
          $variables['breadcrumb_array'][3]['hover'] = $replacements[$dateparts[1]] . ' ' . $dateparts[0];

          //year
          $variables['breadcrumb_array'][2]['title'] = $dateparts[0];
          $variables['breadcrumb_array'][2]['href'] = 'events/' . $dateparts[0];

          //make new breadcrumbs
          $new_crumbs = nm_breadcrumb_make_crumbs($variables['breadcrumb_array']);
          //set new breacdrumbs
          drupal_set_breadcrumb($new_crumbs);
          $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => drupal_get_breadcrumb()));
        }

      } //end is_numeric dateparts check
    }  //end count dateparts check
  }  //end if event node
}


/**
 * Implements hook_token_info().
 */
function nm_events_token_info() {

  $info['tokens']['node']['field_nm_date'] = array(
    'name' => t('NM Date Field'),
    'description' => t("The contents of the NM Date Field."),
    'type' => 'date',
  );
  return $info;

}


/**
 * Implements hook_tokens().
 */
function nm_events_tokens($type, $tokens, array $data = array(), array $options = array()) {

  $replacements = array();
  if ($type == 'node' && !empty($data['node'])) {
    $node = $data['node'];
    if (isset($node->field_nm_date)) {
      $original = token_find_with_prefix($tokens, 'field_nm_date');
      $replacements += token_generate('date', $original, array('date' =>  $node->field_nm_date[$node->language][0]['value']), $options);
    }
  }

  return $replacements;

}


/**
 * Implements hook_page_alter().
 */
function nm_events_page_alter(&$page) {
  if (isset($page['content']['addressfield_staticmap_addressfield_staticmap']['#block'])) {
    //remove block title
    $page['content']['addressfield_staticmap_addressfield_staticmap']['#block']->subject = '<none>';
  }
}

/**
 * Implements hook_entity_info_alter().
 */
function nm_events_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['nm_event_listing'] = array(
    'label' => t('Event Listing'),
    'custom settings' => FALSE,
  );
}


/**
 * Implements hook_help().
 */
function nm_events_help($path, $arg) {
  switch ($path) {
    case 'admin/help#nm_events':
      $content = array(
        '#group' => 'info',
        '#theme' => 'item_list',
        '#attributes' => array(
          'class' => array('nodemaker-apps-details'),
        ),
        '#items' => nm_events_help_details(),
      );

      return render($content);
      break;
  }
}


/**
  * Content for hook_help().
  */
function nm_events_help_details() {
  $items = array();
  $items[] = '<strong>' . t('.') . '</strong>  ' . t('');
  $items[] = '<strong>' . t('.') . '</strong>  ' . t('');
  $items[] = '<strong>' . t('.') . '</strong>  ' . t('');
  $items[] = '<strong>' . t('.') . '</strong>  ' . t('');
  $items[] = '<strong>' . t('Issues?') . '</strong>  ' . t('Have a support question?  Find a bug?  !issue!', array('!issue' => '<a href="http://drupal.org/project/issues/nm_events" title="NodeMaker Events Issue Queue" target="_blank">Please use the issue queue</a>'));
  return $items;
}