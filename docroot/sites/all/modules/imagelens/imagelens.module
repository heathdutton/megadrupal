<?php
/**
 * @file
 *
 *
 *
 * @author Kálmán Hosszu - hosszu.kalman@gmail.com - http://www.kalman-hosszu.com
 */

/* ====================== */
/* ==== DRUPAL HOOKS ==== */
/* ====================== */

/**
 * Implement of hook_menu().
 *
 * @return
 *   An array of menu items.
 */
function imagelens_menu() {
  $items = array();

  $items['admin/config/user-interface/imagelens'] = array(
    'title' => 'jQuery imageLens',
    'description' => 'Configure imageLens module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('imagelens_settings_form'),
    'access arguments' => array('configure imagelens module'),
    'file' => 'includes/imagelens.admin.inc',
  );
  
  $items['admin/config/media/imagelens-styles'] = array(
    'title' => 'ImageLens styles',
    'description' => 'Configure styles that can be used for imageLens plugin.',
    'page callback' => 'imagelens_style_list',
    'access arguments' => array('administer imagelens styles'),
    'file' => 'includes/imagelens.admin.inc',
  );
  
  $items['admin/config/media/imagelens-styles/list'] = array(
    'title' => 'List',
    'description' => 'List the current imageLens styles on the site.',
    'page callback' => 'imagelens_style_list',
    'access arguments' => array('administer imagelens styles'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1,
    'file' => 'includes/imagelens.admin.inc',
  );
  
  $items['admin/config/media/imagelens-styles/add'] = array(
    'title' => 'Add style',
    'description' => 'Add a new imageLens style.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('imagelens_style_form'),
    'access arguments' => array('administer imagelens styles'),
    'type' => MENU_LOCAL_ACTION,
    'weight' => 2,
    'file' => 'includes/imagelens.admin.inc',
  );
  
  $items['admin/config/media/imagelens-styles/edit/%imagelens_style'] = array(
    'title' => 'Edit style',
    'description' => 'Configure an imageLens style.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('imagelens_style_form', 5),
    'access arguments' => array('administer imagelens styles'),
    'file' => 'includes/imagelens.admin.inc',
  );
  
  $items['admin/config/media/imagelens-styles/delete/%imagelens_style'] = array(
    'title' => 'Delete style',
    'description' => 'Delete an imageLens style.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('imagelens_style_delete_form', 5),
    'access arguments' => array('administer imagelens styles'),
    'file' => 'includes/imagelens.admin.inc',
  );

  return $items;
}


/**
 * Implement of hook_permission().
 *
 * @return array
 *   An array of valid permissions for the browserclass module
 */
function imagelens_permission() {
  return array(
    'configure imagelens module' => array(
      'title' => 'Configure jQuery imageLens module',
      'description' => 'Configure jQuery imageLens module, set JavaScript operation.',
    ),
    'administer imagelens styles' => array(
      'title' => t('Administer imageLens styles'),
      'description' => t('Create and modify styles for using imageLens plugin.'),
    ),
  );
}


/**
 * Implement of hook_init().
 */
function imagelens_init() {
  if (variable_get('imagelens_always_add_js')) {
    drupal_add_library('imagelens', 'imagelens');
  }
}

/**
 * Implementation of hook_theme().
 * 
 * @return Array of defined theme functions
 */
function imagelens_theme($existing, $type, $theme, $path) {
  return array(
    'imagelens_style_list' => array(
      'variables' => array(
        'styles' => NULL,
      ),
      'file' => 'includes/imagelens.admin.inc',
    ),
    'imagelens_formatter' => array(
      'variables' => array(
        'item' => NULL,
        'imagelens_style' => NULL,
      ),
      'file' => 'includes/imagelens.theme.inc',
    ),
  );
}

/**
 * Implement hook_library().
 *
 * @return array
 *   An array defining libraries associated with a module.
 */
function imagelens_library() {
  $libraries = array();

  $libraries['imagelens'] = array(
    'title' => 'ImageLens',
    'website' => 'http://www.dailycoding.com/Posts/imagelens__a_jquery_plugin_for_lens_effect_image_zooming.aspx',
    'version' => '1.0',
    'js' => array(
      drupal_get_path('module', 'imagelens') . '/jquery.imageLens.js' => array(),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_field_formatter_info().
 */
function imagelens_field_formatter_info() {
  $formatters = array(
    'imagelens' => array(
      'label' => t('ImageLens'),
      'field types' => array('image'),
      'settings' => array('imagelens_style' => ''),
    ),
  );

  return $formatters;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function imagelens_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  
  $styles = imagelens_style_options(FALSE);
  $element['imagelens_style'] = array(
    '#title' => t('ImageLens style'),
    '#type' => 'select',
    '#default_value' => $settings['imagelens_style'],
    '#empty_option' => t('None (original image)'),
    '#options' => $styles,
  );

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function imagelens_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  $styles = imagelens_style_options(FALSE);
  // Unset possible 'No defined styles' option.
  unset($styles[0]);
  // Styles could be lost because of enabled/disabled modules that defines
  // their styles in code.
  if (isset($styles[$settings['imagelens_style']])) {
    $summary[] = t('ImageLens style: @style', array('@style' => $styles[$settings['imagelens_style']]));
  }
  else {
    $summary[] = t('Original image');
  }

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 */
function imagelens_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  foreach ($items as $delta => $item) {
    $element[$delta] = array(
      '#theme' => 'imagelens_formatter',
      '#item' => $item,
      '#imagelens_style' => imagelens_style_load($display['settings']['imagelens_style']),
    );
  }

  return $element;
}

/* ====================== */
/* == MODULE FUNCTIONS == */
/* ====================== */

/**
 * Get an array of all styles.
 *
 * @return
 *   An array of styles keyed by the imagelens style ID (ilsid).
 */
function imagelens_styles() {
  $styles = &drupal_static(__FUNCTION__);
  
  if (!isset($styles)) {
    $styles = db_select('imagelens_styles', NULL, array('fetch' => PDO::FETCH_ASSOC))
      ->fields('imagelens_styles')
      ->orderBy('name')
      ->execute()
      ->fetchAllAssoc('ilsid', PDO::FETCH_ASSOC);
  }
  
  return $styles;
}

/**
 * Save imageLens style to the DB.
 *
 * @param array $style
 *   An imageLens style array.
 * @return array 
 *   An imageLens style array. In the case of a new style, 'ilsid' will be set.
 */
function imagelens_style_save($style) {
  if (!empty($style['ilsid'])) {
    drupal_write_record('imagelens_styles', $style, 'ilsid');
  }
  else {
    drupal_write_record('imagelens_styles', $style);
  }
  
  return $style;
}

/**
 * Delete an imageLens style.
 *
 * @param int $ilsid
 *   An imageLens style ID.
 */
function imagelens_style_delete($ilsid) {
  db_delete('imagelens_styles')->condition('ilsid', $ilsid)->execute();
}

/**
 * Load a style by style ID (ilsid). May be used as a loader for menu items.
 *
 * @param int $ilsid
 * @return mixed
 *   The imageLens style array or NULL. 
 */
function imagelens_style_load($ilsid) {
  $styles = imagelens_styles();
  
  if (isset($styles[$ilsid])) {
    return $styles[$ilsid];
  }
  
  return NULL;
}

/**
 * Get an array of imageLens styles suitable for using as select list options.
 *
 * @param $include_empty
 *   If TRUE a <none> option will be inserted in the options array.
 * @return
 *   Array of image styles both key and value are set to style name.
 */
function imagelens_style_options($include_empty = TRUE) {
  $styles = imagelens_styles();
  $options = array();
  if ($include_empty && !empty($styles)) {
    $options[0] = t('<none>');
  }
  
  foreach ($styles as $ilsid => $style) {
    $options[$ilsid] = $style['name'];
  }
  
  return $options;
}