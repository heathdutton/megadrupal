<?php
/**
 * @file
 * Bazaarvoice products and associated data.
 */

/**
 * Implements hook_permission().
 */
function bazaarvoice_products_permission() {
  $permissions = array();
  $permissions['administer bazaarvoice products'] = array(
    'title' => t('Administer Bazaarvoice products'),
  );
  $permissions['view bazaarvoice product statistics'] = array(
    'title' => t('view Bazaarvoice product statistics'),
  );
  return $permissions;
}

/**
 * Implements hook_theme().
 */
function bazaarvoice_products_theme() {
  $templates = array();

  $templates['bazaarvoice_product_statistics'] = array(
    'template' => 'bazaarvoice-product-statistics',
    'variables' => array(
      'review_count' => NULL,
      'rating' => NULL,
      'average_rating' => NULL,
      'rating_range' => NULL,
      'statistics' => NULL,
      'product_info' => NULL,
    ),
  );
  return $templates;
}

/**
 * Implements hook_block_info().
 */
function bazaarvoice_products_block_info() {
  $blocks = array();

  $blocks['bazaarvoice_product_statistics'] = array(
    'info' => t('Bazaarvoice: Product Statistics'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
/**
 * Implements hook_block_view().
 */
function bazaarvoice_products_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'bazaarvoice_product_statistics':
      // User have permissions to view statistics and have an entity?
      if (user_access('view bazaarvoice product statistics') && ($entity = menu_get_object())) {
        // Attempt to get known entity type.
        if ($entity_type = bazaarvoice_products_get_entity_bundle_entity_type($entity->type)) {
          // Attempt to get product statistics.
          module_load_include('inc', 'bazaarvoice_products', 'includes/statistics');
          if ($product_statistics = bazaarvoice_products_view_product_statistics($entity_type, $entity)) {
            $block['subject'] = t('Product Statistics');
            $block['content']['#markup'] = $product_statistics;
          }
        }
      }
      break;
  }

  return $block;
}

/**
 * Implements hook_form_alter().
 */
function bazaarvoice_products_form_node_type_form_alter(&$form, &$form_state) {
  // Add a vertical tab to the node type form.
  if (user_access('administer bazaarvoice products')) {
    // Build fieldset for vertical tab section.
    $fieldset = array(
      '#type' => 'fieldset',
      '#title' => t('Bazaarvoice Product Settings'),
      '#description' => t('Configure content type for Bazaarvoice product mappings.'),
      '#group' => 'additional_settings',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    // Has the section already been created (perhaps by a sub module)?
    if (isset($form['bazaarvoice_products'])) {
      // Add additional fieldset data.
      $form['bazaarvoice_products'] += $fieldset;
    }
    // Else, create the fieldset.
    else {
      $form['bazaarvoice_products'] = $fieldset;
    }
    // Is a product type?
    $product_type = bazaarvoice_products_is_product_type('node', $form['#node_type']->type);
    // Previously checked the product checkbox?
    $previously_checked = (isset($form_state['values']) && $form_state['values']['bazaarvoice_products']['bazaarvoice_product']);
    // Have a stored product id?
    $product_id = bazaarvoice_products_get_entity_type_product_id('node', $form['#node_type']->type);
    // Build the product checkbox.
    $form['bazaarvoice_products']['bazaarvoice_product'] = array(
      '#type' => 'checkbox',
      '#title' => t('Use as a bazaarvoice product.'),
      '#description' => t('Enable content of this type to be included in the Bazaarvoice Product Feed, to be used as products for displaying and collecting ratings and reviews.'),
      '#weight' => 0,
      '#default_value' => ($previously_checked || $product_type) ? TRUE : FALSE,
    );
    // Get options for product_id field.
    $field_options = bazaarvoice_products_get_entity_product_id_fields('node', $form['#node_type']->type);
    // Get node entity info.
    $entity_info = entity_get_info('node');
    // Get fields for this node type.
    $fields = field_info_instances('node', $form['#node_type']->type);
    // Build array for field options that can be used for product id.
    $field_options = array_merge(array('' => t('Select Field')), $field_options);
    // Support label field?
    if (isset($entity_info['entity keys']['label'])) {
      // Add it as an option.
      $field_options[$entity_info['entity keys']['label']] = t('@label (label)', array('@label' => ucwords($entity_info['entity keys']['label'])));
    }
    // Build field options.
    foreach ($fields as $field_name => $field) {
      $field_options[$field_name] = $field['label'];
    }
    // Build field to select product_id.
    $form['bazaarvoice_products']['bazaarvoice_product_id'] = array(
      '#type' => 'select',
      '#title' => t('Product ID Field'),
      '#description' => t('Select a field to be used to for the Bazaarvoice Product ID.'),
      '#options' => $field_options,
      '#states' => array(
        'visible' => array(
          ':input[name="bazaarvoice_product"]' => array('checked' => TRUE),
        ),
      ),
      '#default_value' => $product_id ?: '',
    );
    // Add custom validate.
    $form['#validate'][] = 'bazaarvoice_products_node_type_form_validate';
    // Add custom submit.
    $form['#submit'][] = 'bazaarvoice_products_node_type_form_submit';
  }
}

/**
 * Validation callback for node type form.
 */
function bazaarvoice_products_node_type_form_validate($form, &$form_state) {
  // A bazaarvoice product but no field is selected for product id.
  if ($form_state['values']['bazaarvoice_product'] && !$form_state['values']['bazaarvoice_product_id']) {
    // Print an error.
    form_set_error('bazaarvoice_product_id', t('Must select a field to be used for Product Id'));
  }
}

/**
 * Submit callback for node type form.
 */
function bazaarvoice_products_node_type_form_submit($form, &$form_state) {
  // Checked to be a Bazaarvoice product?
  if ($form_state['values']['bazaarvoice_product']) {
    // Get the old product ID (if it exists).
    $product_id = bazaarvoice_products_get_entity_type_product_id('node', $form['#node_type']->type);
    // Save the new product id.
    bazaarvoice_products_set_entity_type_product_id('node', $form['#node_type']->type, $form_state['values']['bazaarvoice_product_id']);
    // If there was an old product id, and the field has changed.
    if ($product_id && ($product_id != $form_state['values']['bazaarvoice_product'])) {
      // @TODO: Warning message about changing ID.
      // Populate table for transition.
    }
  }
  // Not a Bazaarvoice product, delete existing settings.
  else {
    bazaarvoice_products_delete_entity_type('node', $form['#node_type']->type);
  }
}

/**
 * Implements hook_field_delete().
 */
function bazaarvoice_products_field_delete($entity_type, $entity, $field, $instance, $langcode, &$items) {
  // Get ids for the entity.
  list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);

  if ($product_id_field = bazaarvoice_products_get_entity_type_product_id($entity_type, $bundle)) {
    if ($product_id_field == $field['field_name']) {
      // Set the product_id field to blank.
      db_update('bazaarvoice_product_entity_types')
        ->fields(array('product_id_field' => ''))
        ->condition('entity_type', $entity_type)
        ->condition('entity_bundle', $bundle)
        ->execute();
      // @TODO: what do we do? the product_id_field was just deleted!
    }
  }
}

/**
 * Implements hook_field_delete_field().
 */
function bazaarvoice_products_field_delete_field($field) {
  // Update all entities where this field is being used as the product id.
  db_update('bazaarvoice_product_entity_types')
    ->fields(array('product_id_field' => ''))
    ->condition('product_id_field', $field['field_name'])
    ->execute();
}

/**
 * Implements hook_field_attach_rename_bundle().
 */
function bazaarvoice_products_field_attach_rename_bundle($entity_type, $bundle_old, $bundle_new) {
  if (bazaarvoice_products_is_product_type($entity_type, $bundle_old)) {
    // Update product entity type settings.
    db_update('bazaarvoice_product_entity_types')
      ->fields(array('entity_bundle' => $bundle_new))
      ->condition('entity_type', $entity_type)
      ->condition('entity_bundle', $bundle_old)
      ->execute();
  }
}

/**
 * Implements hook_field_attach_delete_bundle().
 */
function bazaarvoice_product_field_attach_delete_bundle($entity_type, $bundle, $instances) {
  if (bazaarvoice_products_is_product_type($entity_type, $bundle)) {
    // Delete all mappings.
    db_delete('bazaarvoice_product_entity_types')
      ->condition('entity_type', $entity_type)
      ->condition('entity_bundle', $bundle)
      ->execute();
  }
}

/**
 * Implements hook_features_api().
 */
function bazaarvoice_products_features_api() {
  return array(
    'bazaarvoice_product' => array(
      'name' => t('Bazaarvoice Products'),
      'default_file' => FEATURES_DEFAULTS_INCLUDED,
      'default_hook' => 'bazaarvoice_product',
      'feature_source' => TRUE,
      'file' => drupal_get_path('module', 'bazaarvoice_products') . '/includes/features.inc',
    ),
  );
}

/**
 * Retrieve array of fields that could be used for the product id.
 *
 * @param string $type
 *    The entity type.
 * @param string $bundle
 *    The entity bundle.
 *
 * @return array
 *   An array of fields. Key is the field name, value is the field label.
 */
function bazaarvoice_products_get_entity_product_id_fields($type, $bundle) {
  $entity_field_options = &drupal_static(__FUNCTION__);
  // Not already in static cache?
  if (!isset($entity_field_options[$type][$bundle])) {
    // Retrieve options from modules.
    $field_options = module_invoke_all('bazaarvoice_products_entity_product_id_fields', $type, $bundle);
    // Allow modules to alter.
    drupal_alter('bazaarvoice_products_entity_product_id_fields', $field_options, $type, $bundle);
    // Store in static.
    $entity_field_options[$type][$bundle] = $field_options;
  }
  // Return options.
  return $entity_field_options[$type][$bundle];
}

/**
 * Implements hook_bazaarvoice_products_entity_product_id_fields().
 */
function bazaarvoice_products_bazaarvoice_products_entity_product_id_fields($type, $bundle) {
  $field_options = array();
  // Get entity info.
  $entity_info = entity_get_info($type);
  // Support label?
  if (isset($entity_info['entity keys']['label'])) {
    // Add the label as a field option.
    $field_options[$entity_info['entity keys']['label']] = t('@label (label)', array('@label' => ucwords($entity_info['entity keys']['label'])));
  }
  // Get entity fields.
  $fields = field_info_instances($type, $bundle);
  // Entity have fields?
  if ($fields) {
    // Loop through the entity fields.
    foreach ($fields as $field_name => $field) {
      // Get field info.
      $field_info = field_info_field($field_name);
      // This field of type text?
      if ($field_info['type'] == 'text') {
        // Add it as an options.
        $field_options[$field_name] = $field['label'];
      }
    }
  }
  // Return the array of field options.
  return $field_options;
}

/**
 * Retrieve an array of basic product information.
 *
 * @param string $type
 *   The entity type.
 * @param object $entity
 *   The entity.
 *
 * @return array|bool
 *   Array of product/entity info or boolean FALSE.
 */
function bazaarvoice_products_get_product_info($type, $entity) {
  $product_info = FALSE;
  // Get entity info.
  list($eid, $vid, $bundle) = entity_extract_ids($type, $entity);
  // Attempt to get product_id.
  if ($product_id = bazaarvoice_products_get_entity_product_id($type, $entity)) {
    $product_info = array(
      'type' => $type,
      'bundle' => $bundle,
      'eid' => $eid,
      'vid' => $vid,
      'product_id' => $product_id,
      'entity' => $entity,
    );
    // Allow other modules to alter data.
    drupal_alter('bazaarvoice_product_info', $product_info);
  }

  return $product_info;
}

/**
 * Attempt to retrieve the actual entity type from the bundle type.
 *
 * @param string $bundle
 *   The bundle name.
 *
 * @return bool|string
 *   The entity type name or boolean FALSE.
 */
function bazaarvoice_products_get_entity_bundle_entity_type($bundle) {
  $entity_type = FALSE;
  // Get list of product entity types.
  if ($entity_types = bazaarvoice_products_get_product_entity_types()) {
    // Loop through each type.
    foreach ($entity_types as $type => $bundles) {
      // Check to see if current bundle is listed.
      if (isset($bundles[$bundle])) {
        // Set the entity type.
        $entity_type = $type;
        break;
      }
    }
  }

  return $entity_type;
}

/**
 * Retrieve the product_id value for a particular entity.
 *
 * @param string $type
 *   The entity type.
 * @param object $entity
 *   The entity object.
 *
 * @return bool|mixed|string
 *   The product id value or boolean FALSE.
 */
function bazaarvoice_products_get_entity_product_id($type, $entity) {
  $product_id = FALSE;
  // Get the entity ids.
  list($eid, $vid, $bundle) = entity_extract_ids($type, $entity);
  // Confirm this entity is a product type.
  if (bazaarvoice_products_is_product_type($type, $bundle)) {
    // Get the product_id field.
    if ($product_id_field = bazaarvoice_products_get_entity_type_product_id($type, $bundle)) {
      // Get metadata for entity.
      $metadata = entity_metadata_wrapper($type, $entity);
      // Field exists as part of metadata?
      if (isset($metadata->$product_id_field)) {
        // Get the default value.
        $product_id = $metadata->$product_id_field->value();
      }
      // Hmm.. not in metadata. Title or something?
      else {
        // Get value from entity itself.
        $product_id = $entity->$product_id_field;
      }
    }
  }
  // Have product_id ?
  if ($product_id) {
    // Format the product id.
    $product_id = bazaarvoice_products_format_product_id($product_id);
  }

  return $product_id;
}

/**
 * Get the product id field for a particular entity type.
 *
 * @param string $type
 *   The entity type.
 * @param string $bundle
 *   The entity bundle.
 *
 * @return mixed
 *   The field name or boolean false.
 */
function bazaarvoice_products_get_entity_type_product_id($type, $bundle) {
  $product_id_fields = &drupal_static(__FUNCTION__);
  // If not already stored in static cache.
  if (!isset($product_id_fields[$type][$bundle])) {
    // Retrieve from database.
    $product_id_fields[$type][$bundle] = db_select('bazaarvoice_product_entity_types', 'bpet')
      ->fields('bpet', array('product_id_field'))
      ->condition('entity_type', $type)
      ->condition('entity_bundle', $bundle)
      ->range(0, 1)
      ->execute()
      ->fetchfield();
  }
  // Return static value.
  return $product_id_fields[$type][$bundle];
}

/**
 * Save the product id field for an entity type.
 *
 * @param string $type
 *   The entity type.
 * @param string $bundle
 *   The entity bundle.
 * @param string $product_id_field
 *   The field name.
 */
function bazaarvoice_products_set_entity_type_product_id($type, $bundle, $product_id_field) {
  db_merge('bazaarvoice_product_entity_types')
    ->key(array(
      'entity_type' => $type,
      'entity_bundle' => $bundle,
    ))
    ->fields(array(
      'product_id_field' => $product_id_field,
    ))
    ->execute();
  // Allow other modules to perform actions.
  module_invoke_all('bazaarvoice_products_set_type', $type, $bundle, $product_id_field);
}

/**
 * Delete the field set to be used as the product id for entity.
 *
 * @param string $type
 *   The entity type.
 * @param string $bundle
 *   The entity bundle.
 */
function bazaarvoice_products_delete_entity_type($type, $bundle) {
  db_delete('bazaarvoice_product_entity_types')
    ->condition('entity_type', $type)
    ->condition('entity_bundle', $bundle)
    ->execute();
  // Allow other modules to perform actions.
  module_invoke_all('bazaarvoice_products_delete_type', $type, $bundle);
}

/**
 * Return an array of entity types that are treated as products.
 *
 * @return mixed
 *   Array of entity types and bundles.
 */
function bazaarvoice_products_get_product_entity_types() {
  $entity_types = &drupal_static(__FUNCTION__);
  // Entity types not retrieved yet?
  if (!isset($entity_types)) {
    $results = db_select('bazaarvoice_product_entity_types', 'bpet')
      ->fields('bpet')
      ->execute();
    // Loop through each of the retrieved entity types.
    foreach ($results as $result) {
      $entity_types[$result->entity_type][$result->entity_bundle] = array(
        'type' => $result->entity_type,
        'bundle' => $result->entity_bundle,
        'product_id_field' => $result->product_id_field,
      );
    }
    // Allow other modules to alter.
    drupal_alter('bazaarvoice_products_product_types', $entity_types);
  }
  return $entity_types;
}

/**
 * Boolean check to see if a given entity type and bundle are a product type.
 *
 * @param string $entity_type
 *   The entity type name.
 * @param string $bundle
 *   The entity bundle name.
 *
 * @return bool
 *   Boolean TRUE or FALSE.
 */
function bazaarvoice_products_is_product_type($entity_type, $bundle) {
  $is_type = FALSE;
  // Get array of entity types and bundles that are product types.
  if ($types = bazaarvoice_products_get_product_entity_types()) {
    // See if this entity type and bundle exists.
    if (isset($types[$entity_type]) && isset($types[$entity_type][$bundle])) {
      $is_type = TRUE;
    }
  }
  // Allow other modules to alter.
  drupal_alter('bazaarvoice_products_is_product_type', $is_type, $entity_type, $bundle);

  return $is_type;
}

/**
 * Formats a raw value of product id into format Bazaarvoice expects.
 *
 * @param string $raw_value
 *   The raw string.
 *
 * @return mixed|string
 *   The formatted string.
 */
function bazaarvoice_products_format_product_id($raw_value) {
  // @TODO: improve this code.
  $product_id = trim($raw_value);
  $product_id = strtolower($product_id);
  $product_id = mb_convert_encoding($product_id, "HTML-ENTITIES", "UTF-8");
  $product_id = preg_replace('/\s+/', '_', $product_id);
  $product_id = str_replace(
    array(
      '&#x2122;',
      '&trade;',
      '&#174;',
      '&#xae;',
      '&reg;',
      '&#x2120;',
      '&#169;',
      '&copy;',
      '&#8482;',
      '&#39;',
      '&apos;',
      '&#146;',
      '&rsquo;',
      '&acute;',
      '&#41;',
      '&#39;',
      '&apos;',
      '&#146;',
      '&rsquo;',
      '&#x2019;',
      '&#8217;',
    ),
    '',
    $product_id
  );
  $product_id = str_replace(
    array(
      ' ',
      '<',
      '>',
      '/',
      '\'',
      ',',
      '.',
      ';',
      ':',
      '&#10;',
      '#',
      '&#35;',
      '(',
      '&#40;',
      ')',
      '\'',
    ),
    '_',
    $product_id
  );
  $product_id = str_replace(array('&', '&#38;', '&amp;'), 'and', $product_id);
  $product_id = str_replace(array('__', '&mdash;', '&#151;'), '-', $product_id);
  return $product_id;
}

/**
 * Implements hook_bazaarvoice_productfeed_format_attribute_value_alter().
 */
function bazaarvoice_products_bazaarvoice_productfeed_format_attribute_value_alter(&$value, $attribute) {
  if ($attribute == 'ExternalId') {
    $value = bazaarvoice_products_format_product_id($value);
  }
}

/**
 * Implements hook_bazaarvoice_productfeed_attributes().
 */
function bazaarvoice_products_bazaarvoice_productfeed_attributes() {
  $attributes['ExternalId'] = array(
    'label' => t('External Id'),
    'field_types' => array(
      'text',
    ),
  );

  return $attributes;
}

/**
 * Implements hook_bazaarvoice_productfeed_entity_mappings().
 */
function bazaarvoice_products_bazaarvoice_productfeed_entity_mappings($entity_info) {
  // Get mapping data for external ID.
  $mappings['ExternalId'] = array(
    'field' => bazaarvoice_products_get_entity_type_product_id($entity_info['type'], $entity_info['bundle']),
  );
  return $mappings;
}

/**
 * Implements hook_bazaarvoice_productfeed_form_attributes_alter().
 */
function bazaarvoice_products_bazaarvoice_productfeed_entityform_attributes_alter(&$attributes, $entity_type, $bundle) {
  // Remove the ExternalId attribute as it will be handled separately.
  unset($attributes['ExternalId']);
}

/**
 * Implements hook_bazaarvoice_productfeed_supports_subfield().
 */
function bazaarvoice_products_bazaarvoice_productfeed_supports_subfield($attribute) {
  if ($attribute['label'] == 'ExternalId') {
    return FALSE;
  }
}
