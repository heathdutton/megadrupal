<?php
/**
 * @file
 * Drupal needs this blank file.
 */

define('VIDEO_SITEMAP_MAX_LINKS', 50000);

/**
 * Implements hook_permission().
 */
function video_sitemap_permission() {
  $permissions['administer video sitemap'] = array(
    'title' => t('Administer Video Sitemap settings.'),
  );
  return $permissions;
}

/**
 * Implements hook_menu().
 */
function video_sitemap_menu() {
  $items['admin/config/search/video-sitemap'] = array(
    'title' => 'Video sitemap',
    'description' => "Configure your site's Video sitemap.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('video_sitemap_settings_form'),
    'access arguments' => array('administer video sitemap'),
    'file' => 'video_sitemap.admin.inc',
  );
  $items['admin/config/search/video-sitemap/settings'] = array(
    'title' => 'Video sitemap Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/config/search/video-sitemap/rebuild'] = array(
    'title' => 'Rebuild Video sitemap',
    'description' => 'Rebuild Video sitemap links.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('video_sitemap_rebuild_form'),
    'access arguments' => array('administer video sitemap'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'video_sitemap.admin.inc',
    'weight' => 10,
  );
  $items['sitemap-video.xml'] = array(
    'page callback' => 'video_sitemap_generate_sitemap',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Video sitemap page callback.
 */
function video_sitemap_generate_sitemap() {
  $uri = request_uri();
  $url = drupal_parse_url($uri);
  $page = isset($url['query']['page']) ? $url['query']['page'] : '';
  $count = db_query("SELECT COUNT(id) FROM {video_sitemap} WHERE status = 1")->fetchField();

  // Redirect to page not found if page parameter is not correct.
  if (!empty($page)
    && (!is_numeric($page)
      || $page > $count)
  ) {
    drupal_not_found();
  }

  if (empty($page)) {
    if ($count <= VIDEO_SITEMAP_MAX_LINKS) {
      video_sitemap_output_chunk($page);
    }
    else {
      $pages = ceil($count / VIDEO_SITEMAP_MAX_LINKS);
      $page = 1;
      $xml = new SimpleXMLElement('<sitemapindex />');
      $xml->addAttribute('xmlns', 'http://www.sitemaps.org/schemas/sitemap/0.9');
      while ($page <= $pages) {
        $sitemap = $xml->addChild('sitemap', NULL);
        $sitemap->addChild('loc', url('video-sitemap.xml',
          array(
            'query' => array('page' => $page),
            'absolute' => TRUE,
          )
        ));
        $page++;
      }
      drupal_add_http_header('Content-Type', 'text/xml; utf-8');
      print $xml->asXML();
    }
  }
}

/**
 * Output sitemap chunk.
 */
function video_sitemap_output_chunk($page) {
  $query = db_select('video_sitemap', 'vs')
    ->fields('vs')
    ->condition('vs.status', 1);
  if (!empty($page) && is_numeric($page)) {
    $offset = $page - 1;
    $query->range($offset, VIDEO_SITEMAP_MAX_LINKS);
  }
  $result = $query->execute()
    ->fetchAll();
  $links = array();
  // Group results by loc property as there can by multiple resources at one location.
  foreach ($result as $item) {
    $links[$item->loc][] = $item;
  }

  $xml = new SimpleXMLElement('<urlset xmlns:video="http://www.google.com/schemas/sitemap-video/1.1" />');
  $xml->addAttribute('xmlns', 'http://www.sitemaps.org/schemas/sitemap/0.9');
  $ns = array('video' => "http://www.google.com/schemas/sitemap-video/1.1");
  $xml->registerXPathNamespace('video', $ns['video']);

  foreach ($links as $id => $link) {
    $url = $xml->addChild('url');
    $first_item = reset($link);
    $url->addChild('loc', video_sitemap_get_full_url('node/' . $id, $first_item->language));
    foreach ($link as $item) {
      $video = $url->addChild('video', NULL, $ns['video']);
      $video->addChild('thumbnail_loc', '', $ns['video']);
      // @todo Find solution for video thumbnail location required by Google.
      $video->addChild('title', check_plain($item->title), $ns['video']);
      $item_url = htmlspecialchars(file_create_url($item->content_loc), ENT_QUOTES, 'UTF-8');
      $video->addChild('content_loc', $item_url, $ns['video']);
      $video->addChild('description', check_plain($item->title), $ns['video']);
    }
  }
  drupal_add_http_header('Content-Type', 'text/xml; utf-8');
  print $xml->asXML();
}

/**
 * Rebuild file links.
 */
function video_sitemap_rebuild() {
  $exclude_types = array_filter(variable_get('video_sitemap_exclude_mime_types', array()));
  if (!empty($exclude_types)) {
    $num_deleted = db_delete('video_sitemap')
      ->condition('filemime', $exclude_types, 'IN')
      ->execute();
    if ($num_deleted) {
      drupal_set_message(t('@count links were excluded from sitemap.', array('@count' => $num_deleted)), 'status');
    }
  }

  $query = db_select('file_managed', 'fm');
  $query->innerJoin('file_usage', 'fu', 'fm.fid = fu.fid');
  $query->leftJoin('node', 'n', 'fu.id = n.nid');
  $query->fields('fm', array('fid', 'filename', 'uri', 'filemime'));
  $query->fields('fu', array('id'));
  $query->fields('n', array('language'));
  $query->condition('fm.type', 'video');
  if (!empty($exclude_types)) {
    $query->condition('fm.filemime', $exclude_types, 'NOT IN');
  }
  $query->condition('fu.type', array('node'));
  $files = $query->execute()->fetchAll();
  $count = 0;
  foreach ($files as $file) {
    $exists = db_query('SELECT 1 FROM {video_sitemap} WHERE fid = :fid AND loc = :loc', array(':fid' => $file->fid, ':loc' => $file->id))->fetchField();
    if (!$exists) {
      $record = array(
        'fid' => $file->fid,
        'loc' => $file->id,
        'thumbnail_loc' => '',
        'content_loc' => $file->uri,
        'player_loc' => $file->uri,
        'title' => $file->filename,
        'description' => $file->filename,
        'filemime' => $file->filemime,
        'language' => $file->language,
        'status' => 1,
      );
      drupal_write_record('video_sitemap', $record);
      $count++;
    }
  }
  drupal_set_message(t('@count links were rebuilt.', array('@count' => $count)), 'status');
  variable_set('video_sitemap_generated_last', REQUEST_TIME);
}

/**
 * Implements hook_form_alter().
 */
function video_sitemap_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'file_entity_edit'
    && (isset($form['#bundle']) && $form['#bundle'] == 'video')
  ) {
    $status = 1;
    if (isset($form['fid']['#value'])) {
      $status = db_query("SELECT status FROM {video_sitemap} WHERE fid = :fid", array(':fid' => $form['fid']['#value']))->fetchField();
    }
    $form['videositemap'] = array(
      '#type' => 'fieldset',
      '#tree' => TRUE,
      '#title' => t('Video sitemap'),
      '#collapsible' => TRUE,
      '#access' => user_access('administer files'),
      '#group' => 'additional_settings',
    );
    $form['videositemap']['include_file'] = array(
      '#type' => 'checkbox',
      '#title' => t('Include file in video sitemap'),
      '#access' => user_access('administer files'),
      '#default_value' => $status,
    );
    $form['actions']['submit']['#submit'][] = 'video_sitemap_form_submit';
  }
}

/**
 * File edit form submit callback to update file sitemap status.
 */
function video_sitemap_form_submit($form, &$form_state) {
  if (isset($form_state['values']['videositemap']['include_file'])) {
    db_update('video_sitemap')
      ->fields(array('status' => $form_state['values']['videositemap']['include_file']))
      ->condition('fid', $form_state['values']['fid'])
      ->execute();
  }
}

/**
 * Callback to get landing page full URL.
 */
function video_sitemap_get_full_url($path = '', $language = LANGUAGE_NONE) {
  if ($language == LANGUAGE_NONE) {
    $url = url($path, array('absolute' => TRUE));
    return $url;
  }
  $languages = language_list();
  $lang = $languages[$language];
  $url = url($path, array('language' => $lang, 'absolute' => TRUE));
  return $url;
}

/**
 * Implements hook_cron().
 */
function video_sitemap_cron() {
  // If cron sitemap file regeneration is disabled, stop.
  if (variable_get('video_sitemap_disable_cron_regeneration', 0)) {
    return;
  }

  // If the minimum sitemap lifetime hasn't been passed, skip.
  $lifetime = REQUEST_TIME - variable_get('video_sitemap_generated_last', 0);
  if ($lifetime < variable_get('video_sitemap_minimum_lifetime', 0)) {
    return;
  }

  video_sitemap_rebuild();
}
