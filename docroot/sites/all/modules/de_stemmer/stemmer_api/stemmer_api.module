<?php

		/***********   M E N U   H A N D L I N G  **********/
define('STEMMER_API_EXCLUDES','stemmer_api_excludes');

/*
 * implementation of hook_menu
 */
function stemmer_api_menu() {
  $items = array();
  $items['admin/settings/stemmer_api'] = array(
    'title' => 'Stemmer API',
    'description' => 'Check and configure stemmers',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stemmer_api_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
	// menu entry for calling the the function
	// from other menues 
  $items['stemmer_api/phrase'] = array(
    'title' => 'Call actual stemmer',
    'page callback' => 'stemmer_api_phrase',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}


/*
 * implements the functionality of stemming a phrase
 */
function stemmer_api_phrase() 
{
  if( !empty($_POST['js']) ) {
    $phrase_in = $_POST['phrase_in'];
    $func = $_POST['module'] . '_search_preprocess';
    $phrase_out = $func($phrase_in);
    drupal_json_output( array(
	'phrase_out' => trim($phrase_out)
    ) );
  };
  exit();
}


/*
 * settings for stemmer_api itsself
 */
function stemmer_api_settings()
{
  $ndx = 0;	// index for counting stemmers
  $defaults_managed = $options_stemmers = array();
  foreach (module_implements('search_preprocess') as $module) {
	// check if menu exists
    $menu_name = 'admin/settings/' . $module;
    $menu_item = menu_get_item($menu_name);
    $entry = $menu_item['path'] == $menu_name ? l($module,$menu_name) : $module;

    array_push($options_stemmers,$entry);

    if ( stemmer_api_stopwords_read($module) || stemmer_api_exceptions_read($module)) {
      // list of stopwords is managed by me
      array_push($defaults_managed,$ndx);
    }
    $ndx += 1;
  }
	// list of stemmers impelenting search_preprocess
  $form['stemmer_api']['stemmers'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Recognized stemmers'),
    '#options' => $options_stemmers,
    '#default_value' => $defaults_managed,
    '#attributes' => array('disabled' => 'disabled'),	// checkboxes
    '#description' => t('Stopwords/exceptions of checked stemmers are managed'),
  );
	// standard documentation files
  $doc_options= array(	1 => 'README.txt', 
			2 => 'INSTALL.txt', 
			3 => 'LICENSE.txt',
		);
  $doc_excludes = unserialize( variable_get(STEMMER_API_EXCLUDES,serialize(array('LICENSE.txt'))) );
  $doc_keys = array_keys( array_intersect($doc_options,$doc_excludes) );
  $form['stemmer_api']['doc_files'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Exclude text files from being displayed'),
    '#options' => $doc_options,
    '#default_value' => $doc_keys,
    '#description' => t('Unchecking all options wil show all available text files'),
  );

	/****************   S H O W   T E X T F I L E S   ****************/

  $form['stemmer_api']['doc'] = array(
    '#type' => 'fieldset',
    '#title' => t('Documentation'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#description' => t('General informations to set up the module'),
  );

  $dirname = drupal_get_path('module','stemmer_api');
  if ($dirhndl = opendir($dirname)) {
    $excludes = unserialize(variable_get(STEMMER_API_EXCLUDES,serialize(array())));
    while (false !== ($file = readdir($dirhndl))) {
        if ( !in_array($file,$excludes) && mb_ereg_match('.*[.][Tt][Xx][Tt]$',$file)) {
          $doctext = _stemmer_api_get_doc($dirname . '/' . $file);

	  if ( !empty($doctext) ) {
	    $form['stemmer_api']['doc'][$file] = array(
	      '#type' => 'textarea',
	      '#attributes' => array('readonly' => 'readonly'),
	      '#rows' => '15',
	      '#title' => t('Information taken from file "%DOC" distributed with the module', 
			array('%DOC' => $file)),
	      '#required' => FALSE,
	      '#default_value' => $doctext,
	      '#description' => '',
	    );
	  }
	}
    }
    closedir($dirhndl);
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('save'),
  );

  // $form['#validate'] = 'stemmer_api_settings_validate';
  // $form['#submit'] = 'stemmer_api_settings_submit';

  // return system_settings_form($form);
  return $form;
}


/*
 * implementation of hook_validate
 */
function stemmer_api_settings_validate($form, &$form_state)
{  // drupal_set_message(print_r($form,TRUE));
}


/*
 * implementation of hook_submit
 */
function stemmer_api_settings_submit($form, &$form_state)
{ $excludes = array();

	// unselected options have value=0
  foreach ( $form_state['values']['doc_files'] as $key => $value ) {
    if ( $value ) {	// get the filename fitting the key number
      array_push($excludes,$form['stemmer_api']['doc_files']['#options'][$key]);
    }
  }
  variable_set(STEMMER_API_EXCLUDES,serialize($excludes));
}


/*
 * implementation of hook_perm
 */
function stemmer_api_perm()
{ return array('administer stemmer API');
}

		/***********   A P I   F U N C T I O N S   **********/

/*
 * store list of stopwords in a variable
 */
function stemmer_api_stopwords_store($wordlist,$module) {
  variable_set($module . '_stopwords',serialize($wordlist));
  return $wordlist;
}


/*
 * get list of stop words from database
 */
function stemmer_api_stopwords_read($module) {
  $stopwords = variable_get($module . '_stopwords','');
  if ( empty($stopwords) ) {
	drupal_set_message('stemmer_api_stopwords_read: list is empty');
    return array();
  }
  return unserialize($stopwords);
}


/*
 * store list of exception words in database
 */
function stemmer_api_exceptions_store($exceptions, $module) {
  variable_set($module . '_exceptions',serialize($exceptions));
  return $exceptions;
}


/*
 * get list of exceptions from database
 */
function stemmer_api_exceptions_read($module) {
  $exceptions = variable_get($module . '_exceptions','');
  if ( empty($exceptions) ) {
	drupal_set_message('stemmer_api_exceptions_read: list is empty');
    return array();
  }
  return unserialize($exceptions);
}


/*
 * impementation of hook_init
 */
function stemmer_api_init() {
  global $GLOBALS;

}


   /**************  F O R M   H A N D L I N G    ************/

/*
 * read a named text file
 */
function _stemmer_api_get_doc($docupath) {
  if (!$docupath) { return ''; }

  $doctxt = '';
  if ( $fhndl = @fopen($docupath,"r") )	{
    while( !feof($fhndl)) {$doctxt .= fread($fhndl,32768);}
    fclose($fhndl); 	
  }

  return $doctxt;
}


/*
 * implementation of hook_menu
 */
function stemmer_api_form_alter(&$form, &$form_state, $form_id)
{	// check if this form belongs to a "registered"  stemming module 

  $found = FALSE;
  foreach (module_implements('search_preprocess') as $module) {
	// hier zuerst auf path oder ähnliches prüfen!
    $found = (0 === strpos($form_id, $module) );
    if ( $found) {
	break;
    }
  }
  if ( !$found) {
    return;
  }


  $form['stemmer_api']['variables'] = array(
    '#type' => 'value',
    '#attributes' => array('module' => $module),
  );

	/****************   S H O W   T E X T F I L E S   ****************/

  $form['stemmer_api']['doc'] = array(
    '#type' => 'fieldset',
    '#title' => t('Documentation'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#description' => t('General informations to set up the module'),
  );

  $dirname = drupal_get_path('module',$module);
  if ($dirhndl = opendir($dirname)) {
    $excludes = unserialize(variable_get(STEMMER_API_EXCLUDES,serialize(array())));
    while (false !== ($file = readdir($dirhndl))) {
        if ( !in_array($file,$excludes) && mb_ereg_match('.*[.][Tt][Xx][Tt]$',$file)) {
          $doctext = _stemmer_api_get_doc($dirname . '/' . $file);

	  if ( !empty($doctext) ) {
	    $form['stemmer_api']['doc'][$file] = array(
	      '#type' => 'textarea',
	      '#attributes' => array('readonly' => 'readonly'),
	      '#rows' => '15',
	      '#title' => t('Information taken from file "%DOC" distributed with the module', 
			array('%DOC' => $file)),
	      '#required' => FALSE,
	      '#default_value' => $doctext,
	      '#description' => '',
	    );
	  }
	}
    }
    closedir($dirhndl);
  }

		/********  C H E C K   S T E M M I N G  *******/
/* Does'nt work!
    $form['#attached'] = array(
        'js'  => drupal_get_path('module', 'stemmer_api') .'/includes/stemmer_api_phrase.js',
        'css' => drupal_get_path('module', 'stemmer_api') .'/includes/stemmer_api_theme.css',
    );
*/
    $form['stemmer_api']['stemming'] = array(
      '#type' => 'fieldset',
      '#title' => t('Check stemming'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#description' => t('Check stemming'),
    );
    $form['stemmer_api']['stemming']['phrase_in'] = array(
      '#type' => 'textfield',
      '#title' => t('input phrase to stemm'),
      '#maxlength' => 100,
      '#size' => 60,
      '#attributes' => array(   'id' => 'phrase-in',
                                'module' => $module, 
                                'href' => '/stemmer_api/phrase',
                        ),
    );
    $form['stemmer_api']['stemming']['phrase_out'] = array(
      '#type' => 'textfield',
      '#title' => t('stemmed phrase'),
      '#maxlength' => 100,
      '#size' => 60,
      '#attributes' => array('readonly' => 'readonly', 'id' => 'phrase-out' ),
      // '#description' => t(''),
    );

		/********  S T O P W O R D S  *******/

  // Add list of words to checkboxes
  $stopwords = stemmer_api_stopwords_read($module);
  $form['stemmer_api']['stopwords'] = array(
      '#type' => 'fieldset',
      '#title' => t('List of stop words'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#description' => t('Check and manipulate the word lists'),
  );

  $form['stemmer_api']['stopwords']['add_stopwords'] = array(
      '#type' => 'textfield',
      '#title' => t('addtional stop words'),
      '#maxlength' => 100,
      '#size' => 60,
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#description' => t('input list of stop words to add'),
  );
  
  if ( count($stopwords) ) {
    $form['stemmer_api']['stopwords']['select_stopwords'] = array(
      '#type' => 'checkboxes', 
      '#title' => t('Mark stop words to be deleted'),
      '#options' => $stopwords,
      '#prefix' => '<span class="stopword">',
      '#suffix' => '</span>',
    );
    $form['stemmer_api']['stopwords']['#theme'] = 'stemmer_api_stopwords';
  }

		/********  E X E P T I O N S  *******/

  // Add list of words to checkboxes
  $exceptions = stemmer_api_exceptions_read($module);
    $form['stemmer_api']['exceptions'] = array(
      '#type' => 'fieldset',
      '#title' => t('List of stemming exceptions'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#description' => t('Check and manipulate the list of key->value pairs'),
    );
  
  $form['stemmer_api']['exceptions']['add_exceptions'] = array(
      '#type' => 'textfield',
      '#title' => t('addtional pairs of word->substitute combinations'),
      '#maxlength' => 100,
      '#size' => 60,
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#description' => t('List of even number of words to add as key->values pairs'),
  );


    foreach( $exceptions as $exkey => $exval ) {
      $exoptions[$exkey] = $exkey . ' &rarr; ' . $exval;
    }

    if ( count($exoptions) ) {
      $form['stemmer_api']['exceptions']['select_exceptions'] 
    	= array('#type' => 'checkboxes', 
  		'#options' => $exoptions,
  		'#prefix' => '<span class="exceptions">',
  		'#suffix' => '</span>',
                '#title' => t('Mark exceptions to be deleted'),
  	       );
    // $form['stemmer_api']['exceptions']['#theme'] = 'stemmer_api_exceptions';
    }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('save'),
    '#weight' => 10,
  );

  $form['#validate'][] = 'stemmer_api_stopwords_validate';
  $form['#submit'][] = 'stemmer_api_stopwords_submit';

}

/*
 * implementation of hook_validate
 */
function stemmer_api_stopwords_validate($form, &$form_state)
{ $stopwords = array();
  $module = $form['stemmer_api']['variables']['#attributes']['module'];

	// selected options (words to erase) have value > 0
  if ( isset($form_state['values']['select_stopwords']) ) {
    foreach ( $form_state['values']['select_stopwords'] as $key => $value ) {
      if ( !$value ) {	// not selected options have value==0
        $word = $form['stemmer_api']['stopwords']['select_stopwords']['#options'][$key];
        array_push($stopwords,$word);
      }
    }
  }

  $additional = $form_state['values']['add_stopwords'];
  $additional = strtolower(check_plain($additional));
  $add_words = preg_split('/[\s]/',$additional,0,PREG_SPLIT_NO_EMPTY);
  foreach ($add_words as $aword) {
    array_push($stopwords,$aword);
  }

  asort($stopwords,SORT_LOCALE_STRING);
  stemmer_api_stopwords_store($stopwords,$module);

  $exceptions = array();
	// selected options (words to erase) have value > 0
  if ( isset($form_state['values']['select_exceptions']) ) {
    foreach ( $form_state['values']['select_exceptions'] as $key => $value ) {
      if ( !$value ) {	// not selected options have value==0
        $pair = $form['stemmer_api']['exceptions']['select_exceptions']['#options'][$key];
        list($key,$sep,$value) = preg_split('/[\s]/',$pair,0,PREG_SPLIT_NO_EMPTY); 
        $exceptions[$key] = $value;
      }
    }
  }

  $additional = $form_state['values']['add_exceptions'];
  $additional = strtolower(check_plain($additional));
  $add_words = preg_split('/[\s]/',$additional,0,PREG_SPLIT_NO_EMPTY);

  while ( (isset($add_words[0]) && $key = $add_words[0]) && ($value = $add_words[1]) ) {
    array_shift($add_words);
    array_shift($add_words);
    $exceptions[$key] = $value;
  }

  asort($exceptions,SORT_LOCALE_STRING);
  stemmer_api_exceptions_store($exceptions,$module);

}

/*
 * implementation of hook_submit
 */
function stemmer_api_stopwords_submit($form, &$form_state)
{ 
}
		/***********   T H E M I N G  **********/
/*
 *
 */
function theme_stemmer_api_stopwords($form) {
  drupal_add_css( drupal_get_path('module', 'stemmer_api') .'/includes/stemmer_api_theme.css',
                  'theme' );
  // return drupal_render($form);
}

/*
 *
 */
function theme_stemmer_api_exceptions($form) {
  drupal_add_css( drupal_get_path('module', 'stemmer_api') .'/includes/stemmer_api_theme.css',
                  'theme' );
  // return drupal_render($form);
}


/**
 * Implementation of hook_theme()
 */
function stemmer_api_theme() {
  return array(
    'stemmer_api_stopwords' => array(
      'render element' => 'form',
      'file' => 'stemmer_api.module',
    ),

    'stemmer_api_exceptions' => array(
      'render element' => 'form',
      'file' => 'stemmer_api.module',
    ),

  );
}

