<?php
/**
 * @file
 * Install, update and uninstall functions for the yubikey module.
 */

/**
 * Implementation of hook_uninstall().
 */
function yubikey_uninstall() {
  // Remove settings variables.
  variable_del('yubikey_enabled');
  variable_del('yubikey_authscheme');
  variable_del('yubikey_optional');
  variable_del('yubikey_optional_if_lost');
  variable_del('yubikey_valserver');
  variable_del('yubikey_valserver_urls_type');
  variable_del('yubikey_valserver_urls_1');
  variable_del('yubikey_valserver_urls_2');
  variable_del('yubikey_valserver_urls_3');
  variable_del('yubikey_valserver_urls_4');
  variable_del('yubikey_valserver_urls_5');
  variable_del('yubikey_valserver_urls');
  variable_del('yubikey_valserver_api_key');
  variable_del('yubikey_valserver_api_id');
  variable_del('yubikey_valserver_api_https');
  variable_del('yubikey_valserver_api_timeout');
  variable_del('yubikey_mail_yubikey_lost_subject');
  variable_del('yubikey_mail_yubikey_lost_body');
  variable_del('yubikey_mail_yubikey_lost_confirmed_recipients');
  variable_del('yubikey_mail_yubikey_lost_confirmed_subject');
  variable_del('yubikey_mail_yubikey_lost_confirmed_body');
  
  // Remove authmap entries
  $res2 = db_delete('authmap')
    ->condition('module', 'yubikey')
    ->execute();
}

/**
 * Implementation of hook_schema().
 */
function yubikey_schema() {
  $schema['yubikey_blocked'] = array(
    'description' => 'Stores blocked YubiKey information.',
    'fields' => array(
      'aid' => array(
        'type' => 'int',
        'length' => 11,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Primary Key: Association ID of the YubiKey.',
      ),
      'uid' => array(
        'type' => 'int',
        'length' => 11,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The user ID.',
      ),
      'status' => array(
        'type' => 'int',
        'size' => 'tiny',
        'length' => 4,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The status of the YubiKey.',
      ),
      'created' => array(
        'type' => 'int',
        'length' => 11,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The timestamp for when the YubiKey was blocked.',
      ),
    ),
    'primary key' => array('aid'),
  );

  return $schema;
}

/**
 * Implementation of hook_requirements().
 *
 * Check that the cURL extension exists for PHP.
 */
function yubikey_requirements($phase) {
  $requirements = array();
  $t = get_t();

  $has_curl = function_exists('curl_init');

  if (!$has_curl) {
    $requirements['curl'] = array(
      'title'        => $t('cURL library'),
      'value'        => $t('Not Installed'),
      'description'  => $t('PHP <a href="@curl_url">cURL</a> library required by YubiKey module is not available.', array('@curl_url' => 'http://php.net/manual/en/curl.setup.php')),
      'severity'     => REQUIREMENT_ERROR,
    );
  }

  return $requirements;
}
