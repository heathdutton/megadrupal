<?php
/*
 * @file
 * Implement YubiKey strong two-factor authentication support for Drupal.
 */

/**
 * Access callback for anonymous user.
 */
function yubikey_user_is_anonymous() {
  return variable_get('yubikey_enabled', FALSE) && user_is_anonymous();
}

/**
 * Access callback for YubiKey management.
 */
function yubikey_administer_access($account) {
  return // User can edit this user account
         user_edit_access($account) && 
         // User has access to 'administer own yubikeys or administer yubikeys
         (user_access('administer own yubikeys') || user_access('administer yubikeys'));
}

/**
 * Access callback for Password Reset.
 */
function yubikey_pass_reset_access() {
  if (!variable_get('yubikey_enabled', FALSE)) {
    return user_is_anonymous();
  } 
  else {
    return user_is_anonymous() && (variable_get('yubikey_authscheme', 'un_pwd') != 'yk_only');
  }
}

/**
 * Implementation of hook_menu().
 */
function yubikey_menu() {
  $items = array();
  
  // YubiKey lost reporting pages.
  $items['user/yubikey/lost'] = array(
    'title'            => 'Report lost YubiKey',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('yubikey_lost'),
    'access callback'  => 'yubikey_user_is_anonymous',
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'yubikey.pages.inc'
  );
  $items['user/yubikey/lost/confirm/%/%/%'] = array(
    'title'            => 'Confirm lost YubiKey',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('yubikey_lost_confirm', 4, 5, 6),
    'access callback'  => 'yubikey_user_is_anonymous',
    'type'             => MENU_CALLBACK,
    'file'             => 'yubikey.pages.inc',
  );

  // YubiKey management pages.
  $items['user/%user/yubikey'] = array(
    'title'            => 'YubiKey identities',
    'page callback'    => 'yubikey_user_identities',
    'page arguments'   => array(1),
    'access callback'  => 'yubikey_administer_access',
    'access arguments' => array(1),
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'yubikey.pages.inc'
  );
  $items['user/%user/yubikey/activate/%'] = array(
    'title'            => 'Activate YubiKey',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('yubikey_user_activate', 1, 4),
    'access callback'  => 'yubikey_administer_access',
    'access arguments' => array(1),
    'type'             => MENU_CALLBACK,
    'file'             => 'yubikey.pages.inc',
  );
  $items['user/%user/yubikey/block/%'] = array(
    'title'            => 'Block YubiKey',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('yubikey_user_block', 1, 4),
    'access callback'  => 'yubikey_administer_access',
    'access arguments' => array(1),
    'type'             => MENU_CALLBACK,
    'file'             => 'yubikey.pages.inc',
  );
  $items['user/%user/yubikey/delete/%'] = array(
    'title'            => 'Delete YubiKey',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('yubikey_user_delete_confirm', 1, 4),
    'access callback'  => 'yubikey_administer_access',
    'access arguments' => array(1),
    'type'             => MENU_CALLBACK,
    'file'             => 'yubikey.pages.inc'
  );

  // YubiKey admin settings page.
  $items['admin/config/yubikey'] = array(
    'title'            => 'YubiKey',
    'description'      => 'Configure global YubiKey settings',
    'position'         => 'right',
    'weight'           => -5,
    'page callback'    => 'system_admin_menu_block_page',
    'access arguments' => array('administer site configuration'),
    'file'             => 'system.admin.inc',
    'file path'        => drupal_get_path('module', 'system'),
  );
  $items['admin/config/yubikey/settings'] = array(
    'title'            => 'Settings',
    'description'      => 'Configure global YubiKey settings',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('yubikey_admin_settings'),
    'access arguments' => array('administer yubikeys'),
    'type'             => MENU_NORMAL_ITEM,
    'file'             => 'yubikey.pages.inc'
  );

  return $items;
}

/**
 * Implementation of hook_menu_alter().
 */
function yubikey_menu_alter(&$items) {
  // Hide Request new password tab if yubikey authentication scheme is yk_only.
  $items['user/password']['access callback'] = 'yubikey_pass_reset_access';
}

/**
 * Implementation of hook_perm().
 */
function yubikey_permission() {
  return array(
    'administer yubikeys' => array(
      'title' => t('Administer Yubikeys'),
      'description' => t('Perform administration tasks for the Yubikey module'),
    ),
    'administer own yubikeys' => array(
      'title' => t('Administer Own Yubikeys'),
      'description' => t('Allow the user to admnister their own Yubikeys'),
    ),
  );
}

/**
 * Implementation of hook_help().
 */
function yubikey_help($path, $arg) {
  $output = '';

  switch ($path) {
    case "admin/help#yubikey":
      $output  = '<p>' . t('Provides strong two-factor user authentication capabilities to your site.') . '</p>';

      $output .= '<p>' . t('The module is very flexible and provides the following capabilities:') . '<br/><ol>';
      $output .= '<li>' . t('Support for four authentication schemes') . '</li><ul><li style="padding-left: 2em">' . t('Username + Password + YubiKey OTP (Recommended)') . '</li><li style="padding-left: 2em">' . t('Password + YubiKey OTP') . '</li><li style="padding-left: 2em">' . t('(Username or YubiKey OTP) + Password') . '</li><li style="padding-left: 2em">' . t('YubiKey OTP only') . '</li></ul>';
      $output .= '<li>' . t('Role-based YubiKey management') . '</li>';
      $output .= '<li>' . t('Exhaustive global settings') . '</li><ul><li style="padding-left: 2em">' . t('Ability to choose one of the four supported authentication schemes') . '</li><li style="padding-left: 2em">' . t('Ability to choose between Yubico online validation service and own hosted validation service') . '</li><li style="padding-left: 2em">' . t('Configurable validation service API parameters') . '</li><li style="padding-left: 2em">' . t('Configurable e-mail templates for notifications') . '</li></ul>';
      $output .= '<li>' . t('Reporting of lost/damaged YubiKey') . '</li></ol></p>';

      $output .= '<p><b>' . t('How YubiKey works?') . '</b><br/>';
      $output .= t('YubiKeys work as follows: The device registers itself as a USB keyboard so it works with any operating system. When the YubiKey button is clicked, it "types" out an OTP. The OTP is a ModHex encoded string consisting of a unique id and an AES128 encrypted string. The encrypted string contains: A static secret device id, session (number of times the device has been inserted into an active USB port) count. A timestamp (based on an 8Hz clock started from when the device was inserted). A counter of the number of OTPs generated since the device was inserted. A 2 byte pseudo-random number. And a CRC checksum. The ModHex string is sent to the YubiKey authentication servers where it is decrypted and checked that the OTP is valid, that the session is not older than a previous session, that the timestamp is not older than a previous timestamp for this session and that the session use counter is not smaller than a previous OTP for this session.') . '</p>';

      $output .= '<p>' . t('More information on YubiKey is available at <a href="@yubico-com">yubico.com</a>.', array('@yubico-com' => url('http://www.yubico.com'))) . '</p>';
      $output .= '<p>' . t('For more information, see the online handbook entry for <a href="@handbook">YubiKey module</a>.', array('@handbook' => 'http://drupal.org/handbook/modules/yubikey')) . '</p>';
      break;
  }

  return $output;
}

/**
 * Fetch user and associated YubiKey details.
 */
function yubikey_user_load_info($array = array()) {
  // Dynamically compose a SQL query:
  $query = array();
  $params = array();
  
  if (is_numeric($array)) {
    $array = array('uid' => $array);
  }
  elseif (!is_array($array)) {
    return FALSE;
  }

  foreach ($array as $key => $value) {
    if ($key == 'uid' || $key == 'status') {
      $query[] = "a.$key = :$key";
      $params[":$key"] = $value;
    } 
    elseif ($key == 'aid') {
      $query[] = "b.$key = :$key";
      $params[":$key"] = $value;
    }
    elseif ($key == 'authname') {
      $query[]= "LOWER(b.$key) = LOWER(:$key)";
      $params[":$key"] = $value;
    }
  }
  $result = db_query("SELECT a.uid, a.name, a.mail, b.aid, b.authname, c.status yk_status FROM {users} a LEFT JOIN {authmap} b ON a.uid = b.uid AND b.module = 'yubikey' LEFT JOIN {yubikey_blocked} c ON b.uid = c.uid AND b.aid = c.aid WHERE " . implode(' AND ', $query), $params);

  if ($user = $result->fetchObject()) {
    //$user = drupal_unpack($user);
  }
  else {
    $user = FALSE;
  }
  return $user;
}

/**
 * Implementation of hook_form_alter().
 */
function yubikey_form_alter(&$form, &$form_state, $form_id) {
  if (!variable_get('yubikey_enabled', FALSE)) {
    return;
  }

  if ($form_id == 'user_login_block' || $form_id == 'user_login') {
    return yubikey_login_form_alter($form, $form_state, $form_id);
  } 
  elseif ($form_id == 'user_pass') {
    return yubikey_pass_form_alter($form, $form_state, $form_id);
  }

  return $form;
}

/**
 * Login _form_alter hook: adds YubiKey login to the login forms.
 */
function yubikey_login_form_alter(&$form, &$form_state, $form_id) {
  drupal_add_css(drupal_get_path('module', 'yubikey') . '/yubikey.css', 'file');
  drupal_add_js(drupal_get_path('module', 'yubikey') . '/yubikey.js');

  $form['yubikey_otp'] = array(
    '#type'          => 'textfield',
    '#title'         => t('YubiKey OTP'),
    '#size'          => ($form_id == 'user_login') ? 58 : 13,
    '#maxlength'     => 255,
    '#required'      => TRUE,
    '#weight'        => 1,
    '#attributes'    => array( 'autocomplete' => 'off' )
  );

  if ($form_id == 'user_login_block') {
     $items = array();
     $items[] = l(t('Report lost YubiKey'), 'user/yubikey/lost', array('attributes' => array('title' => t('Report lost YubiKey'))));
     $form['yubikey_links'] = array(
      '#value'       => theme('item_list', $items),
      '#weight'      => 4
     );
  }
  else {
    $form['yubikey_otp']['#description'] = t('Touch your YubiKey button to emit OTP.');
  }

  $form['submit']['#weight'] = 2;
  $form['openid_links']['#weight'] = 3;
  $form['links']['#weight'] = 4;
  //unset($form['#submit']);
  if (empty($form_state['post']['openid_identifier'])) {
    $form['#validate'] = yubikey_login_default_validators();
  }
  else {
    $form['yubikey_otp']['#required'] = FALSE;
  }

  $yk_authscheme = variable_get('yubikey_authscheme', 'un_pwd');
  if ($yk_authscheme == 'un_pwd_yk') {
    if (variable_get('yubikey_optional', 0) == 1 || variable_get('yubikey_optional_if_lost', 0) == 1) {
      $form['yubikey_otp']['#required'] = FALSE;
      if ($form_id == 'user_login_block') {
        $form['yubikey_otp']['#description'] = t('(optional until assigned)');
      } 
      else {
        $form['yubikey_otp']['#description'] = t('Touch your YubiKey button to emit OTP (optional until YubiKey is assigned to you).');
      }
    } 
  }
  elseif ($yk_authscheme == 'pwd_yk') {
    $form['name'] = NULL;
  } 
  elseif ($yk_authscheme == 'un_or_yk_pwd') {
    $form['name'] = NULL;
    $form['yubikey_otp']['#title'] = t('Username/YubiKey OTP');
    $form['yubikey_otp']['#weight'] = -1;
  } 
  elseif ($yk_authscheme == 'yk_only') {
    $form['name'] = NULL;
    $form['pass'] = NULL;
    $form['links'] = NULL;
  }

  return $form;
}

function yubikey_login_default_validators() {
  return array('yubikey_login_otp_validate', 'user_login_name_validate', 'yubikey_login_authenticate_validate', 'yubikey_login_final_validate');
}

function yubikey_login_otp_validate($form, &$form_state) {
  module_load_include('inc', 'yubikey');
 
  $yk_authscheme = variable_get('yubikey_authscheme', 'un_pwd'); 
  $otp = $form_state['values']['yubikey_otp'];
  if (isset($form_state['values']['name'])) {
    $name = drupal_strtolower(trim($form_state['values']['name']));
  }
  if ($otp) {
    // Check if OTP is valid.
    if (!yubikey_is_otp($otp)) {
      if ($yk_authscheme == 'un_or_yk_pwd') {
        $form_state['values']['name'] = $otp;
      }
      else {
        form_set_error('yubikey_otp', t('YubiKey OTP is not valid.'));
      }
      return;
    }

    // Validate OTP.
    if (!yubikey_validate_otp($otp, $errstr)) {
      form_set_error('yubikey_otp', t('YubiKey OTP validation failed with message:') . ' ' . $errstr);
      return;
    }

    // Load the account associated with the specified YubiKey.
    $identity = yubikey_get_identity($otp);
    $account = yubikey_user_load_info(array('authname' => $identity));
    // Check if YubiKey is associated with a user account and it is not blocked.
    if (!isset($account->uid) || $account->yk_status != '') {
      form_set_error('yubikey_otp', t('YubiKey is not associated with your account or it has been blocked.'));
      return;
    } 
    else {
      $form_state['values']['name'] = $account->name; // required for further validation.
    }

    // If name is provided, check if YubiKey is associated with the specified user account.
    if (!empty($name) && drupal_strtolower($account->name) != $name && drupal_strtolower($account->mail) != $name) {
      form_set_error('yubikey_otp', t('YubiKey is not associated with your account or it has been blocked.'));
      return;
    }
  } 
  else {
    // OTP not provided.
    if (!empty($name) && $yk_authscheme == 'un_pwd_yk') {
      $result = db_query(
        "SELECT COUNT(a.uid) user_exists, COUNT(b.aid) ids_count, COUNT(c.status) blocked_ids_count, MAX(c.created) blocked_on FROM {users} a LEFT JOIN {authmap} b ON a.uid = b.uid AND b.module = 'yubikey' LEFT JOIN {yubikey_blocked} c ON b.aid = c.aid WHERE a.status = 1 AND (LOWER(a.name) = LOWER(:name) OR LOWER(a.mail) = LOWER(:mail))", 
        array(
          ':name' => $name,
          ':mail' => $name
        ));
      $user = $result->fetchAssoc();
      if ($user && $user['user_exists'] > 0) { // Flag user_exists is 0 for blocked user.
        if (variable_get('yubikey_optional', 0) == 1) {
          // OTP field is optional if user account doesn't have an associated YubiKey.
          if ($user['ids_count'] == 0) {
            return;
          }
        }
        if (variable_get('yubikey_optional_if_lost', 0) == 1) {
          // OTP field is optional if user account has associated YubiKey(s) but all are blocked.
          if ($user['ids_count'] > 0 && $user['ids_count'] == $user['blocked_ids_count'] && $user['blocked_on'] > 0) {
            return;
          }
        }
        form_set_error('yubikey_otp', t('YubiKey OTP field is required.'));
      }
    }
  }
}

function yubikey_login_authenticate_validate($form, &$form_state) {
  $yk_authscheme = variable_get('yubikey_authscheme', 'un_pwd');
  if ($yk_authscheme == 'yk_only') {
    global $user;

    // Load the account to check if the e-mail is denied by an access rule.
    // Doing this check here saves us a user_load() in user_login_name_validate()
    // and introduces less code change for a security fix.
    $account = db_query("SELECT * FROM {users} WHERE name = :name AND status = 1", array(':name' => $form_state['values']['name']))->fetchObject();
    if ($account && drupal_is_denied('mail', $account->mail)) {
      form_set_error('name', t('The name %name is registered using a reserved e-mail address and therefore could not be logged in.', array('%name' => $account->name)));
    }

    // The user is about to be logged in, so make sure no error was previously
    // encountered in the validation process.
    if (!form_get_errors() && !empty($form_state['values']['name']) && $account) {
      $form_state['uid'] = $account->uid;
    }
    else {
      watchdog('user', 'Login attempt failed for %user.', array('%user' => $form_state['values']['name']));
    }
  }
  else {
    user_login_authenticate_validate($form, $form_state);
  }
}

function yubikey_login_final_validate($form, &$form_state) {
  user_login_final_validate($form, $form_state);
}

/**
 * Password Reset _form_alter hook : adds a YubiKey OTP field.
 */
function yubikey_pass_form_alter(&$form, &$form_state, $form_id) {
  drupal_add_css(drupal_get_path('module', 'yubikey') . '/yubikey.css', 'module');
  drupal_add_js(drupal_get_path('module', 'yubikey') . '/yubikey.js');

  $form['yubikey_otp'] = array(
    '#type'          => 'textfield',
    '#title'         => t('YubiKey OTP'),
    '#size'          => 58,
    '#maxlength'     => 255,
    '#required'      => TRUE,
    '#weight'        => 1,
    '#attributes'    => array( 'autocomplete' => 'off' )
  );
  
  $form['submit']['#weight'] = 2;  
  $form['#validate'] = array('yubikey_pass_otp_validate', 'user_pass_validate');
  
  $yk_authscheme = variable_get('yubikey_authscheme', 'un_pwd');
  if (($yk_authscheme == 'un_pwd_yk' && (variable_get('yubikey_optional', 0) == 1 || variable_get('yubikey_optional_if_lost', 0) == 1)) || 
      $yk_authscheme == 'un_or_yk_pwd') {
    $form['yubikey_otp']['#required'] = FALSE;
    $form['yubikey_otp']['#description'] = t('(optional until YubiKey is assigned to you)');
  }
}

function yubikey_pass_otp_validate($form, &$form_state) {
  module_load_include('inc', 'yubikey');

  $yk_authscheme = variable_get('yubikey_authscheme', 'un_pwd');
  $otp = $form_state['values']['yubikey_otp'];
  $name = drupal_strtolower(trim($form_state['values']['name']));
  if ($otp) {
    // Check if OTP is valid.
    if (!yubikey_is_otp($otp)) {
      form_set_error('yubikey_otp', t('YubiKey OTP is not valid.'));
      return;
    }

    // Validate OTP.
    if (!yubikey_validate_otp($otp, $errstr)) {
      form_set_error('yubikey_otp', t('YubiKey OTP validation failed with message:') . ' ' . $errstr);
      return;
    }

    // Load the account associated with the specified YubiKey.
    $identity = yubikey_get_identity($otp);
    $account = yubikey_user_load_info(array('authname' => $identity));
    if (
       // Check if YubiKey is associated with a user account.
       !isset($account->uid) ||
       // Check if YubiKey is blocked.
       $account->yk_status != '' ||
       // If name is provided, check if YubiKey is associated with the specified user account.
       (!empty($name) && drupal_strtolower($account->name) != $name && drupal_strtolower($account->mail) != $name)
    ) {
      form_set_error('yubikey_otp', t('YubiKey is not associated with your account or it has been blocked.'));
      return;
    }
  } 
  else {
    // OTP not provided.
    if (!empty($name)) {
      $result = db_query(
        "SELECT COUNT(a.uid) user_exists, COUNT(b.aid) ids_count, COUNT(c.status) blocked_ids_count, MAX(c.created) blocked_on FROM {users} a LEFT JOIN {authmap} b ON a.uid = b.uid AND b.module = 'yubikey' LEFT JOIN {yubikey_blocked} c ON b.aid = c.aid WHERE a.status = 1 AND (LOWER(a.name) = LOWER(:name) OR LOWER(a.mail) = LOWER(:mail))", 
        array(
          ':name' => $name,
          ':mail' => $name
        ));
      $user = $result->fetchAssoc();
      if ($user && $user['user_exists'] > 0) {
        if ($yk_authscheme == 'un_pwd_yk') {
          if (variable_get('yubikey_optional', 0) == 1) {
            // OTP field is optional if user account doesn't have an associated YubiKey.
            if ($user['ids_count'] == 0) {
              return;
            }
          }
          if (variable_get('yubikey_optional_if_lost', 0) == 1) {
            // OTP field is optional if user account has associated YubiKey(s) but all are blocked.
            if ($user['ids_count'] > 0 && $user['ids_count'] == $user['blocked_ids_count'] && $user['blocked_on'] > 0) {
              return;
            }
          }
        }
        elseif ($yk_authscheme == 'un_or_yk_pwd') {
          if ($user['ids_count'] == 0 || ($user['ids_count'] > 0 && $user['ids_count'] == $user['blocked_ids_count'] && $user['blocked_on'] > 0)) {
            return;
          }
        }
        form_set_error('yubikey_otp', t('YubiKey OTP field is required.'));
      }
    }
  }
}

/**
 * Implementation of hook_user_delete().
 */
function yubikey_user_delete($account) {
  // User is being deleted.
  // Delete all the records in yubikey_blocked table for the user.
  db_delete('yubikey_blocked')
    ->condition('uid', $account->uid)
    ->execute();
}

/**
 * Conditionally create and send a notification email when a certain
 * operation happens on the given user account.
 *
 * @see yubikey_mail_tokens()
 * @see drupal_mail()
 *
 * @param $op
 *  The operation being performed on the account.  Possible values:
 *  'yubikey_lost': User reports loss of YubiKey
 *  'yubikey_lost_confirmed': User confirms loss of YubiKey
 *
 * @param $account
 *  The user object of the account being notified.  Must contain at
 *  least the fields 'uid', 'name', and 'mail'.
 * @param $language
 *  Optional language to use for the notification, overriding account language.
 * @return
 *  The return value from drupal_mail_send(), if ends up being called.
 */
function _yubikey_mail_notify($op, $account, $language = NULL) {
  $notify = variable_get('yubikey_mail_' . $op . '_notify', 'yubikey_lost');
  if ($notify) {
    $params['account'] = $account;
    $language = $language ? $language : user_preferred_language($account);
    if ($op == 'yubikey_lost_confirmed') {
      // Notify the specified recipients using site default language.
      $recipients = variable_get('yubikey_mail_yubikey_lost_confirmed_recipients', variable_get('site_mail', ini_get('sendmail_from')));
      $mail = drupal_mail('yubikey', $op, $recipients, language_default(), $params);
    } 
    else {
      $mail = drupal_mail('yubikey', $op, $account->mail, $language, $params);
    }
  }
  return empty($mail) ? NULL : $mail['result'];
}

/**
 * Implementation of hook_mail().
 */
function yubikey_mail($key, &$message, $params) {
  $language = $message['language'];
  $variables = yubikey_mail_tokens($params['account'], $language);
  $message['subject'] .= _yubikey_mail_text($key . '_subject', $language, $variables);
  $message['body'][] = _yubikey_mail_text($key . '_body', $language, $variables);
}

/**
 * Returns a mail string for a variable name.
 *
 * Used by yubikey_mail() and the settings forms to retrieve strings.
 */
function _yubikey_mail_text($key, $language = NULL, $variables = array()) {
  $langcode = isset($language) ? $language->language : NULL;

  if ($admin_setting = variable_get('yubikey_mail_' . $key, FALSE)) {
    // An admin setting overrides the default string.
    return strtr($admin_setting, $variables);
  }
  else {
    // No override, return default string.
    switch ($key) {
      case 'yubikey_lost_subject':
        return t('Confirm loss of YubiKey for !username at !site', $variables, array('langcode' => $langcode));
      case 'yubikey_lost_body':
        return t("Hello !username,\n\nSomeone, (probably you) has reported loss of YubiKey associated with your account at !site.\n\nTo confirm the authenticity of the request and to prevent any possible misuse of the lost YubiKey by an unauthorized person at !site, please click on the link below or copy and paste it in your browser address bar:\n\n!yubikey_lost_confirmation_url\n\nThis is a one-time link, so it can be used only once. It expires after one day and nothing will happen if it is not used.\n\nPlease note, once you confirm by clicking the above link, all the YubiKeys associated with your account will be temporarily blocked.", $variables, array('langcode' => $langcode));
      case 'yubikey_lost_confirmed_subject':
        return t('Confirmation of loss of YubiKey for !username at !site', $variables, array('langcode' => $langcode));
      case 'yubikey_lost_confirmed_body':
        return t("Hello,\n\n!username has reported and confirmed loss of YubiKey and hence, all the YubiKeys associated with user account !username have been blocked.", $variables, array('langcode' => $langcode));
    }
  }
}

/**
 * Return an array of token to value mappings for yubikey e-mail messages.
 *

 * @param $account
 *  The user object of the account being notified.  Must contain at
 *  least the fields 'uid', 'name', and 'mail'.
 * @param $language
 *  Language object to generate the tokens with.
 * @return
 *  Array of mappings from token names to values (for use with strtr()).
 */
function yubikey_mail_tokens($account, $language) {
  global $base_url;
  $tokens = array(
    '!username' => $account->name,
    '!site' => variable_get('site_name', 'Drupal'),
    '!yubikey_lost_confirmation_url' => yubikey_lost_confirmation_url($account),
    '!mailto' => $account->mail,
    '!date' => format_date(REQUEST_TIME, 'medium', '', NULL, $language->language),
  );
  return $tokens;
}

/**
 * Generates one-time URL for a user to confirm the loss of YubiKey.
 *
 * @param object $account
 *   An object containing the user account.
 *
 * @return
 *   A unique one-time URL for confirmation of loss of YubiKey
 */
function yubikey_lost_confirmation_url($account) {
  $timestamp = REQUEST_TIME;
  return url("user/yubikey/lost/confirm/$account->uid/$timestamp/" . user_pass_rehash($account->pass, $timestamp, $account->login), array('absolute' => TRUE));
}
