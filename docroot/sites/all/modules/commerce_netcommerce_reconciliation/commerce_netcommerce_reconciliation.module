<?php

define('COMMERCE_TRANSACTION_STATUS_RECONCILIATION_FAILED', 'ReconciliationFailed');

/**
 * Implements hook_cron().
 */
function commerce_netcommerce_reconciliation_cron() {
  // Do not run the cron if there are no settings for NetCommerce.
  $netcommerce_settings = commerce_payment_method_instance_load('netcommerce|commerce_payment_netcommerce');
  if ($netcommerce_settings) {
    $settings = $netcommerce_settings['settings'];

    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'commerce_payment_transaction')
      ->propertyCondition('status', array(
        COMMERCE_PAYMENT_STATUS_PENDING,
        COMMERCE_PAYMENT_STATUS_FAILURE
      ), 'IN')
      ->propertyCondition('payment_method', 'netcommerce')
      ->propertyCondition('remote_status', COMMERCE_TRANSACTION_STATUS_RECONCILIATION_FAILED, '!=')
      ->propertyCondition('payment_method', 'netcommerce')
      ->range(0, 50)
      ->addMetaData('account', user_load(1));

    $result = $query->execute();

    if (isset($result['commerce_payment_transaction'])) {
      foreach ($result['commerce_payment_transaction'] as $transaction_id => $transaction) {
        $transaction = commerce_payment_transaction_load($transaction_id);
        $order = commerce_order_load($transaction->order_id);
        commerce_netcommerce_reconciliation_reconcile_transaction($transaction, $order, $settings);
      }
    }
  }
}

/**
 * Reconcile a transaction.
 */
function commerce_netcommerce_reconciliation_reconcile_transaction($transaction, $order, $settings) {
  // Create data that will be sent to NetCommerce.
  $txtMode = 'single';
  $txtMerchNum = $settings['merchant_number'];
  $key = $settings['sha_key'];
  $txtIndex = $transaction->transaction_id;
  $txtSignature = hash('sha256', "{$txtMode}{$txtMerchNum}{$txtIndex}{$key}");

  $query = array(
    'txtMode' => $txtMode,
    'txtMerchNum' => $txtMerchNum,
    'txtIndex' => $txtIndex,
    'txtSignature' => $txtSignature,
  );

  $options = array(
    'method' => 'POST',
    'data' => drupal_http_build_query($query),
    'timeout' => 5,
    'headers' => array('Content-Type' => 'application/x-www-form-urlencoded'),
  );

  // Make the request to NetCommerce.
  $request = drupal_http_request('https://www.netcommercepay.com/iPAY/GTSXML/default.asp', $options);

  if ($request->code != '200') {
    return;
  }

  $data = $request->data;

  // Parse response from NetCommerce.
  $p = xml_parser_create();
  xml_parse_into_struct($p, $data, $values, $index);
  xml_parser_free($p);

  // Get the RESPVAL and RemoteID from NetCommerce.
  $reconciliation = FALSE;
  $remote_id = '';
  foreach ($values as $value) {
    if (isset($value['tag']) && $value['tag'] == 'RESPVAL') {
      if ($value['value'] == '1') {
        $reconciliation = TRUE;
      }
    }

    if (isset($value['tag']) && $value['tag'] == 'TXTNUMAUT') {
      $remote_id = $value['value'];
    }
  }

  if ($reconciliation) {
    // Set completed status for transaction.
    $transaction->remote_id = $remote_id;
    $transaction->payload[REQUEST_TIME] = $values;
    $transaction->remote_status = 'Completed';
    $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
    $transaction->message = t('The payment has completed. Reconciliation was used.');

    // Save the transaction information.
    commerce_payment_transaction_save($transaction);

    // Put order in next page only if it is not completed.
    if ($order->status != 'completed') {
      commerce_payment_redirect_pane_next_page($order);
    }
  }
  else {
    // Set transaction status to failed.
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
    $transaction->remote_status = COMMERCE_TRANSACTION_STATUS_RECONCILIATION_FAILED;
    $transaction->message = t('NetCommerce reconciliation has failed.');

    commerce_payment_transaction_save($transaction);

    // Put order in previous page only if it is not completed.
    if ($order->status != 'completed') {
      commerce_payment_redirect_pane_previous_page($order);
    }
  }
}
