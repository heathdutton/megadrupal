<?php

/**
 * @file
 * Simple Meta Content Types Module.
 */

/**
 * Implements hook_help().
 */
function simplemeta_content_types_help($path, $arg) {
  switch ($path) {
    case 'admin/structure/types/manage/%':
      return '<p>' . t("Use the 'Simple Meta patterns' fieldset to set patterns for the title tag, meta description and meta keywords for this content type.") . '</p>';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function simplemeta_content_types_form_node_type_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['type'])) {
    $form['simplemeta_content_types'] = array(
      '#type' => 'fieldset',
      '#title' => t('Simple Meta patterns'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#group' => 'additional_settings',
    );

    $form['simplemeta_content_types']['simplemeta_content_types'] = array(
      '#type' => 'checkbox',
      '#title' => t('Set custom meta patterns for this content type'),
      '#default_value' => isset($form['simplemeta_content_types']['simplemeta_content_types']) ? $form['simplemeta_content_types']['simplemeta_content_types'] : variable_get('simplemeta_content_types_' . $form['#node_type']->type, FALSE),
    );

    $form['simplemeta_content_types']['simplemeta_content_types_title'] = array(
      '#type' => 'textarea',
      '#title' => t('The pattern to use for the title tag for this content type'),
      '#default_value' => isset($form['simplemeta_content_types']['simplemeta_content_types_title']) ? $form['simplemeta_content_types']['simplemeta_content_types_title'] : variable_get('simplemeta_content_types_title_' . $form['#node_type']->type, ''),
      '#states' => array(
        'visible' => array(
          ':input[name=simplemeta_content_types]' => array('checked' => TRUE),
        ),
      ),
    );

    $form['simplemeta_content_types']['simplemeta_content_types_description'] = array(
      '#type' => 'textarea',
      '#title' => t('The pattern to use for the meta description for this content type'),
      '#default_value' => isset($form['simplemeta_content_types']['simplemeta_content_types_description']) ? $form['simplemeta_content_types']['simplemeta_content_types_description'] : variable_get('simplemeta_content_types_description_' . $form['#node_type']->type, ''),
      '#states' => array(
        'visible' => array(
          ':input[name=simplemeta_content_types]' => array('checked' => TRUE),
        ),
      ),
    );

    $form['simplemeta_content_types']['simplemeta_content_types_keywords'] = array(
      '#type' => 'textarea',
      '#title' => t('The pattern to use for the meta keywords for this content type'),
      '#default_value' => isset($form['simplemeta_content_types']['simplemeta_content_types_keywords']) ? $form['simplemeta_content_types']['simplemeta_content_types_keywords'] : variable_get('simplemeta_content_types_keywords_' . $form['#node_type']->type, ''),
      '#states' => array(
        'visible' => array(
          ':input[name=simplemeta_content_types]' => array('checked' => TRUE),
        ),
      ),
    );

    if (module_exists('token')) {
      $form['simplemeta_content_types']['token_help'] = array(
        '#theme' => 'token_tree',
        '#token_types' => array('node'),
        '#states' => array(
          'visible' => array(
            ':input[name=simplemeta_content_types]' => array('checked' => TRUE),
          ),
        ),
      );
    }
  }
}

/**
 * Implements $module_preprocess_$hook().
 */
function simplemeta_content_types_preprocess_html(&$vars) {
  global $language;
  if (!simplemeta_get_page_meta($_GET['q'], $language->language) && arg(0) == 'node' && is_numeric(arg(1)) && arg(2) == '') {
    $node = menu_get_object();
    if (isset($node->type)) {
      if (variable_get('simplemeta_content_types_' . $node->type, FALSE)) {
        $title = variable_get('simplemeta_content_types_title_' . $node->type, '');
        $description = variable_get('simplemeta_content_types_description_' . $node->type, '');
        $keywords = variable_get('simplemeta_content_types_keywords_' . $node->type, '');
        if (!empty($title)) {
          $vars['head_title'] = check_plain(token_replace($title, array('node' => $node), array('clear' => TRUE)));
        }
        if (!empty($description)) {
          $item = '<meta name="description" content="' . trim(strip_tags(decode_entities(token_replace($description, array('node' => $node), array('clear' => TRUE))))) . '" />';
          $head_item = array(
            '#type' => 'markup',
            '#markup' => $item,
          );
          drupal_add_html_head($head_item, 'simplemeta_content_types_description');
        }
        if (!empty($keywords)) {
          $item = '<meta name="keywords" content="' . trim(strip_tags(decode_entities(token_replace($keywords, array('node' => $node), array('clear' => TRUE))))) . '" />';
          $head_item = array(
            '#type' => 'markup',
            '#markup' => $item,
          );
          drupal_add_html_head($head_item, 'simplemeta_content_types_keywords');
        }
      }
    }
  }
}
