<?php
/**
 * @file
 * Add a handler for rutube.ru videos to Video Embed Field
 * with this module you can add videos from rutube.com
 */

/**
 * Implements hook_video_embed_handler_info().
 */
function video_embed_rutube_video_embed_handler_info() {
  $handlers = array();
  $handlers['rutube'] = array(
    'title' => 'Rutube Video',
    'function' => 'video_embed_rutube_handle_video',
    'thumbnail_function' => 'video_embed_rutube_handle_thumbnail',
    'form' => 'video_embed_rutube_form',
    'domains' => array(
      'rutube.ru',
    ),
    'defaults' => array(
      'width' => 640,
      'height' => 480,
      'allowfullscreen' => TRUE,
      'allowautoplay' => FALSE,
    ),
  );
  return $handlers;
}

/**
 * Provide a form to configure out video settings.
 *
 * @param array $defaults
 *   default/current values for your provider, the currently saved settings
 *   with empty values filled with the defaults provided in info hook
 *
 * @return array
 *   form as defined by forms api
 */
function video_embed_rutube_form($defaults) {
  $form = array();
  $form['height'] = array(
    '#type' => 'textfield',
    '#title' => t('Player Height'),
    '#description' => t('The height of the player.'),
    '#default_value' => $defaults['height'],
    '#element_validate' => array('_video_embed_rutube_element_validate'),
  );
  $form['width'] = array(
    '#type' => 'textfield',
    '#title' => t('Player Width'),
    '#description' => t('The width of the player.'),
    '#default_value' => $defaults['width'],
    '#element_validate' => array('_video_embed_rutube_element_validate'),
  );
  $form['allowfullscreen'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow Fullscreen'),
    '#desecription' => t('This will allow the video to be fullscreened.'),
    '#default_value' => $defaults['allowfullscreen'],
  );
  $form['allowautoplay'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow Autoplay'),
    '#desecription' => t('This will allow the video to autoplay.'),
    '#default_value' => $defaults['allowautoplay'],
  );
  return $form;
}

/**
 * This is the video handler (the 'function' key from handler_info).
 *
 * @param string $url
 *   the full video url
 *
 * @param array $settings
 *   an associative array of this handlers settings, from the settings form
 *
 * @return string
 *   the embed code for the video
 */
function video_embed_rutube_handle_video($url, $settings) {
  $html = _video_embed_rutube_get_video_html($url);
  $id = _video_embed_rutube_get_video_hash($html);

  if ($id) {
    $embed = '<object id="playerID" class="flash-player" width="!width" height="!height" >
    <param name="movie" value="http://.rutube.ru/!id">
    <param name="allowFullScreen" value="!fullscreen">
    <param name="allowscriptaccess" value="always">
    <param name="flashVars" value="cDomain=rutube.ru&amp;autoStart=!autostart">
    <embed src="http://rutube.ru/player.swf?hash=!id/" type="application/x-shockwave-flash" wmode="opaque" allowfullscreen="!fullscreen"' .
    'allowscriptaccess="always" flashvars="cDomain=rutube.ru&amp;autoStart=!autostart" height="!height" width="!width"></object>';
    $embed = format_string($embed, array(
      '!id' => $id,
      '!fullscreen' => $settings['allowfullscreen'] ? 'true' : 'false',
      '!autostart' => $settings['allowautoplay'] ? 'true' : 'false',
      '!width' => $settings['width'],
      '!height' => $settings['height'],
      )
    );
    $video = array(
      '#markup' => $embed,
    );
    return $video;
  }
  // Return an empty string if there is no id, so we don't have broken embeds.
  return '';
}

/**
 * Retreive the thumbnail for the rutube video.
 *
 * @param string $url
 *   the url of the video as entered by the user
 *
 * @return array
 *   an array with the keys:
 *     'id' => an id for the video which is unique to your provider
 *     'url' => the url to retrieve the thumbnail from
 */
function video_embed_rutube_handle_thumbnail($url) {
  $id = _video_embed_rutube_get_video_id($url);
  $thumbnail = 'http://tub.rutube.ru/thumbs/' . substr($id, 0, 2) . '/' . substr($id, 2, 2) . '/' . $id . '-1.jpg';
  return array(
    'id' => $id,
    'url' => $thumbnail,
  );
}

/**
 * Helper function to take a rutube video url and return its id.
 *
 * @param string $url
 *   the full rutube video url
 *
 * @return bool
 *   the id for the video or FALSE if there is no match
 */
function _video_embed_rutube_get_video_id($url) {
  $matches = array();
  preg_match('@rutube\.ru/video/(.*)@i', $url, $matches);
  if ($matches && !empty($matches[1])) {
    return $matches[1];
  }
  return FALSE;
}

/**
 * Helper function to get html of video page.
 *
 * @param string $url
 *   the full rutube video url
 *
 * @return string
 *   the html content of page
 */
function _video_embed_rutube_get_video_html($url) {
  $html = file_get_contents($url);
  return $html;
}

/**
 * Helper function to take a rutube video html and return its hash.
 *
 * @param string $html
 *   the html content of the page
 *
 * @return bool
 *   the hash for the video or FALSE if there is no match
 */
function _video_embed_rutube_get_video_hash($html) {
  preg_match('#<meta property=\"og:video\" content=\"http:\/\/video\.rutube\.ru\/(.*)\" \/>#u', $html, $matches);
  if (isset($matches[1]) && !empty($matches[1])) {
    return $matches[1];
  }
  return FALSE;
}
/**
 * Function for validating width and height in setting form.
 */
function _video_embed_rutube_element_validate($element, &$form_state) {
  $check = _video_embed_rutube_check_input($element['#value']);
  if (!empty($element['#value']) && !$check) {
    form_error($element, t('The "!name" option must contain a valid value. You may either leave the text field empty or enter a string like "640px" or "640"', array('!name' => t($element['#title']))));
  }
}
/**
 * Helper function to check for a valid input in height and width textfields.
 *
 * @param string $input
 *   the string that contains input from setting form
 *
 * @return bool
 *   if input is valid returns true else false
 */
function _video_embed_rutube_check_input($input) {
  $input = check_plain($input);
  if ($input == '') {
    return FALSE;
  }
  $size = drupal_strlen($input);
  $cur_char = '';
  for ($i = 0; $i < $size; $i++) {
    $cur_char = drupal_substr($input, $i, 1);
    if ($cur_char >= '0' && $cur_char <= '9') {
      continue;
    }
    break;
  }
  if ($i == $size) {
    return TRUE;
  }
  elseif ($i > 0 && $i == $size - 2) {
    if (drupal_substr($input, $i, 2) == 'px') {
      return TRUE;
    }
  }
  return FALSE;
}
