<?php

/**
 * @file
 * Tests for Cutting Edge functionality.
 */

/**
 * Tests for cutting edge theme functions.
 */
class EdgeThemeTestCase extends DrupalWebTestCase {
  protected $profile = 'testing';

  public static function getInfo() {
    return array(
      'name' => 'Theme functions',
      'description' => 'Tests cutting edge theme functions.',
      'group' => 'Edge',
    );
  }

  function setUp() {
    parent::setUp(array('edge'));
  }

  /**
   * Tests theme_edge_item_list().
   */
  function testItemList() {
    // Verify that empty variables produce no output.
    $variables = array();
    $expected = '';
    $this->assertThemeOutput('item_list', $variables, $expected, 'Empty %callback generates no output.');

    $variables = array();
    $variables['title'] = 'Some title';
    $expected = '';
    $this->assertThemeOutput('item_list', $variables, $expected, 'Empty %callback with title generates no output.');

    // Verify nested item lists.
    $variables = array();
    $variables['title'] = 'Some title';
    $variables['attributes'] = array(
      'id' => 'parentlist',
    );
    $variables['items'] = array(
      'a',
      array(
        'data' => 'b',
        'children' => array(
          'c',
          // Nested children may use additional attributes.
          array(
            'data' => 'd',
            'class' => array('dee'),
          ),
          // Any string key is treated as child list attribute.
          'id' => 'childlist',
        ),
        // Any other keys are treated as item attributes.
        'id' => 'bee',
      ),
      array(
        'data' => 'e',
        'id' => 'E',
      ),
    );
    $inner = '<div class="item-list"><ul id="childlist">';
    $inner .= '<li class="odd first">c</li>';
    $inner .= '<li class="dee even last">d</li>';
    $inner .= '</ul></div>';

    $expected = '<div class="item-list">';
    $expected .= '<h3>Some title</h3>';
    $expected .= '<ul id="parentlist">';
    $expected .= '<li class="odd first">a</li>';
    $expected .= '<li id="bee" class="even">b' . $inner . '</li>';
    $expected .= '<li id="E" class="odd last">e</li>';
    $expected .= '</ul></div>';

    $this->assertThemeOutput('item_list', $variables, $expected);
  }

  /**
   * Tests theme_edge_links().
   */
  function testLinks() {
    // Verify that empty variables produce no output.
    $variables = array();
    $expected = '';
    $this->assertThemeOutput('links', $variables, $expected, 'Empty %callback generates no output.');

    $variables = array();
    $variables['heading'] = 'Some title';
    $expected = '';
    $this->assertThemeOutput('links', $variables, $expected, 'Empty %callback with heading generates no output.');

    // Verify that a list of links is properly rendered.
    $variables = array();
    $variables['attributes'] = array('id' => 'somelinks');
    $variables['links'] = array(
      'a link' => array(
        'title' => 'A <link>',
        'href' => 'a/link',
      ),
      'plain text' => array(
        'title' => 'Plain "text"',
      ),
      'front page' => array(
        'title' => 'Front page',
        'href' => '<front>',
      ),
    );

    $expected_links = '';
    $expected_links .= '<ul id="somelinks">';
    $expected_links .= '<li class="a-link odd first"><a href="' . url('a/link') . '">' . check_plain('A <link>') . '</a></li>';
    $expected_links .= '<li class="plain-text even"><span>' . check_plain('Plain "text"') . '</span></li>';
    $expected_links .= '<li class="front-page odd last"><a href="' . url('<front>') . '">' . check_plain('Front page') . '</a></li>';
    $expected_links .= '</ul>';

    // Verify that passing a string as heading works.
    $variables['heading'] = 'Links heading';
    $expected_heading = '<h2>Links heading</h2>';
    $expected = $expected_heading . $expected_links;
    $this->assertThemeOutput('links', $variables, $expected);

    // Verify that passing an array as heading works (core support).
    $variables['heading'] = array('text' => 'Links heading', 'level' => 'h3', 'class' => 'heading');
    $expected_heading = '<h3 class="heading">Links heading</h3>';
    $expected = $expected_heading . $expected_links;
    $this->assertThemeOutput('links', $variables, $expected);

    // Verify that passing attributes for the heading works.
    $variables['heading'] = array('text' => 'Links heading', 'level' => 'h3', 'attributes' => array('id' => 'heading'));
    $expected_heading = '<h3 id="heading">Links heading</h3>';
    $expected = $expected_heading . $expected_links;
    $this->assertThemeOutput('links', $variables, $expected);
  }

  /**
   * Asserts themed output.
   *
   * @param $callback
   *   The name of the theme function to invoke; e.g. 'links' for theme_links().
   * @param $variables
   *   An array of variables to pass to the theme function.
   * @param $expected
   *   The expected themed output string.
   * @param $message
   *   (optional) An assertion message.
   */
  protected function assertThemeOutput($callback, array $variables = array(), $expected, $message = '') {
    $output = theme($callback, $variables);
    $this->verbose('Variables:' . '<pre>' .  check_plain(var_export($variables, TRUE)) . '</pre>'
      . '<hr />' . 'Result:' . '<pre>' .  check_plain(var_export($output, TRUE)) . '</pre>'
      . '<hr />' . 'Expected:' . '<pre>' .  check_plain(var_export($expected, TRUE)) . '</pre>'
      . '<hr />' . $output
    );
    if (!$message) {
      $message = '%callback rendered correctly.';
    }
    $message = t($message, array('%callback' => 'theme_' . $callback . '()'));
    $this->assertIdentical($output, $expected, $message);
  }
}

/**
 * Tests cutting edge theme .info property functionality.
 */
class EdgeThemeInfoTestCase extends DrupalWebTestCase {
  protected $profile = 'testing';

  public static function getInfo() {
    return array(
      'name' => 'Theme .info properties',
      'description' => 'Tests cutting edge theme .info properties.',
      'group' => 'Edge',
    );
  }

  function setUp() {
    parent::setUp(array('edge', 'edge_test'));
    // @todo Core does not support (testing) themes provided by modules. Until
    //   that works, edge_test_system_info_alter() in edge_test.module alters
    //   the test_theme provided by core as though our theme .info properties
    //   would exist.
    theme_enable(array('edge_test_theme'));
    variable_set('theme_default', 'edge_test_theme');
  }

  /**
   * Tests stylesheets-override, stylesheets-remove properties.
   */
  function testStylesheets() {
    // egde_test_theme.info defines
    //   stylesheets-override[] = node.css
    // so we simply expect node.css to be overidden here.
    $this->drupalGet('node');
    $this->assertNoText('modules/node/node.css');
    $this->assertText('tests/edge_test_theme/node.css');

    // edge_test_theme.info defines
    //   stylesheets-remove[] = user.css
    // @todo Not supported yet.
    //$this->assertNoText('modules/user/user.css');
  }
}

