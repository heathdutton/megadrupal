<?php

/**
 * @file
 * Excluded module functions.
 */

/**
 * Implements hook_permission().
 */
function excluded_permission() {
  return array(
    'excluded' => array(
      'title' => t('Excluded'),
      'description' => t('Set a list of CSS and JS files to br excluded.'),
    )
  );
}

/**
 * Implementation of hook_help().
 */
function excluded_help($path, $arg) {
  switch ($path) {
	  case 'admin/help#excluded':
    case 'admin/config/system/excluded':
      return t('The excluded module allows you to set remove unwanted CSS and JavaScript files that core and other modules add.');
  }
}


/**
 * Implements hook_menu().
 */
function excluded_menu() {
  $items = array();

  $items['admin/config/system/excluded'] = array(
    'title' => 'Excluded CSS/JS',
    'description' => 'Excluded System CSS and JS files.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('excluded_settings'),
    'file' => 'excluded.admin.inc',
    'access arguments' => array('excluded'), 
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_css_alter()
 */
function excluded_css_alter(&$css) {
  $files = _excluded_get_var('excluded_css_custom');
	$excludes = _excluded_alter($files);
  $css = array_diff_key($css, $excludes);
}
 
/**
 * Implements hook_js_alter()
 */
function excluded_js_alter(&$js) {  
  $files = _excluded_get_var('excluded_javascript_custom');
	$excludes = _excluded_alter($files);
  $js = array_diff_key($js, $excludes);
}

/**
* Used to 'unset' CSS and JS files from their arrays.
*
* Loops through an array and creates a new array based on its keys.
* It then sets the value of that index to FALSE so the files is not called.
*
* @param $files
*    An array of file names that need to be 'unset'.
*/
function _excluded_alter($files) {  
	$output = array();
  foreach($files as $file) {
	  $output[$file] = FALSE;
  }
  return $output;
}

/**
* Used to get excluded file list from variables and clean them up.
*
* @param $name
*    The name of the variable to be found.
* @param $default
*    The default value if the variable is not found.
*/
function _excluded_get_var($name, $default = '') {
  $output =  variable_get($name, $default);

  $files = explode("\n", $output);
  $list = array();
  foreach ($files as $file) {
    $list[] = trim($file);
  }
  
  return array_filter($list);
}







