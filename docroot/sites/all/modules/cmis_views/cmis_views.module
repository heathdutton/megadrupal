<?php

/**
 * @file
 * Enables management and display of CMIS folders in Drupal blocks.
 */

/**
 * Implements hook_menu().
 */
function cmis_views_menu() {

  $items['admin/structure/cmis/views'] = array(
    'title' => 'CMIS Views',
    'description' => 'Manage CMIS Views settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cmis_views_admin_overview'),
    'access arguments' => array('administer cmis views'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'cmis_views.admin.inc',
  );

  $items['admin/config/cmis/views'] = array(
    'title' => 'CMIS Views settings',
    'description' => 'Adjust cmis views options.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cmis_views_admin_settings'),
    'access arguments' => array('administer cmis views'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'cmis_views.admin.inc',
  );

  $items['admin/structure/block/cmis/view/add'] = array(
    'title' => 'Add a CMIS view',
    'description' => 'Add a new CMIS block.',
    'page callback' => 'cmis_views_admin_edit',
    'access arguments' => array('administer cmis views'),
    'file' => 'cmis_views.admin.inc',
    'type' => MENU_LOCAL_ACTION,
  );

  $items['admin/config/cmis/views/edit/%cmis_views'] = array(
    'title' => 'Edit CMIS view',
    'page callback' => 'cmis_views_admin_edit',
    'page arguments' => array(5),
    'access arguments' => array('administer cmis views'),
    'file' => 'cmis_views.admin.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/cmis/views/delete/%cmis_views'] = array(
    'title' => 'Delete CMIS view',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cmis_views_admin_delete_form', 5),
    'access arguments' => array('administer cmis views'),
    'file' => 'cmis_views.admin.inc',
    'type' => MENU_CALLBACK,
  );

  // Paths for ajax browsing.
  // Possibly TODO nojs version.
  $items['admin/config/cmis/views/ajax/%'] = array(
    'title' => 'cmis browse',
    'page callback' => 'cmis_views_admin_ajax_browse',
    'page arguments' => array(5),
    'delivery callback' => 'ajax_deliver',
    'access arguments' => array('administer cmis views'),
    'file' => 'cmis_views.admin.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/cmis/views/ajax'] = array(
    'title' => 'cmis browse',
    'page callback' => 'cmis_views_admin_ajax_browse',
    'page arguments' => array(),
    'delivery callback' => 'ajax_deliver',
    'access arguments' => array('administer cmis views'),
    'file' => 'cmis_views.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['cmis/views/%'] = array(
    //'type' => MENU_CALLBACK,
    'title' => t('CMIS Repository pass through'),
    'page callback' => 'cmis_views_download_handler',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array('access cmis'),
  );

  return $items;
}

/**
 * Implements hook_field_is_empty().
 *
 * hook_field_is_emtpy() is where Drupal asks us if this field is empty.
 * Return TRUE if it does not contain data, FALSE if it does. This lets
 * the form API flag an error when required fields are empty.
 */
function cmis_views_field_is_empty($item, $field) {
  return empty($item['cmis_views']);
}

/**
 * Implements hook_field_info().
 *
 * Provides the description of the field.
 */
function cmis_views_field_info() {
  return array(
    // We name our field as the associative name of the array.
    'cmis_views_field' => array(
      'label' => t('CMIS Folder'),
      'description' => t('Display title and description details with thumbnail'),
      'default_widget' => 'cmis_views_field_browser',
      'default_formatter' => 'cmis_views_detail_view',
    ),
  );
}

/**
 * Implements hook_field_widget_info().
 *
 * One widget is provided.
 * - Uses the CMIS Views browser to pull browse CMIS repo.
 *
 * These widget types will eventually show up in hook_field_widget_form,
 * where we will have to flesh them out.
 *
 * @see cmis_views_field_widget_form()
 */
function cmis_views_field_widget_info() {
  return array(
    'cmis_views_field_browser' => array(
       'label' => t('CMIS Browser'),
       'field types' => array('cmis_views_field'),
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 *
 * We need to tell Drupal that we have two different types of formatters
 * for this field. One will display with small thumbnails, one with
 * bullets, one with paragraphs and one with a table.
 *
 * @see cmis_views_field_formatter_view()
 */
function cmis_views_field_formatter_info() {
  return array(
    // This formatter just displays the hex value in the color indicated.
    'cmis_views_detail_view' => array(
      'label' => t('Display title and description details with thumbnail.'),
      'field types' => array('cmis_views_field'),
    ),
    'cmis_views_bulleted_view' => array(
      'label' => t(' Bulleted list with file type and size.'),
      'field types' => array('cmis_views_field'),
    ),
    'cmis_views_paragraphs_view' => array(
      'label' => t('Paragraphs with description, file type, size and date.'),
      'field types' => array('cmis_views_field'),
    ),
    'cmis_views_table_view' => array(
      'label' => t('Table with file name, title, description, type, size and date.'),
      'field types' => array('cmis_views_field'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 *
 * Four formatters are implemented.
 * - cmis_views_detail_view outputs a file icon and description
 * - cmis_views_bulleted_view lists the file name and size
 * - cmis_views_paragraphs_view shows the files in a paragraph
 * - cmis_views_table_view shows the files in a table
 *
 * @see field_example_field_formatter_info()
 */
function cmis_views_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  module_load_include('api.inc', 'cmis');
  module_load_include('cmis_query.module', 'cmis_query');
  module_load_include('utils.inc', 'cmis_views');
  drupal_add_css(drupal_get_path('module', 'cmis_views') . '/cmis_views.css');
  $repoid = !empty($repository->repositoryId) ? $repository->repositoryId : 'default';


  $element = array();
  switch ($display['type']) {
    // This formatter simply outputs the field as text and with a color.
    case 'cmis_views_detail_view':
      foreach ($items as $delta => $item) {
        $query_result = _cmis_views_query($item['cmis_views'], $repoid);
        if($query_result){
	      $cmis_view = theme('cmis_views_detail', array('rows' => $query_result->objectList, 'repoId' => $repoid));
        }
        $element[$delta] = array(          
          '#type' => 'html_tag',
          '#tag' => 'div',
          '#value' => $cmis_view,   
        );
      }
      break;
      case 'cmis_views_bulleted_view':
      foreach ($items as $delta => $item) {
        $query_result = _cmis_views_query($item['cmis_views'], $repoid);
        if($query_result){
	      $cmis_view = theme('cmis_views', array('rows' => $query_result->objectList, 'repoId' => $repoid));
        }
        $element[$delta] = array(          
          '#type' => 'html_tag',
          '#tag' => 'div',
          '#value' => $cmis_view,   
        );
      }
      break;
      case 'cmis_views_paragraphs_view':
      foreach ($items as $delta => $item) {
        $query_result = _cmis_views_query($item['cmis_views'], $repoid);
        if($query_result){
	      $cmis_view = theme('cmis_views_paragraphs', array('rows' => $query_result->objectList, 'repoId' => $repoid));
        }
        $element[$delta] = array(          
          '#type' => 'html_tag',
          '#tag' => 'div',
          '#value' => $cmis_view,   
        );
      }
      break;
      case 'cmis_views_table_view':
      foreach ($items as $delta => $item) {
        $query_result = _cmis_views_query($item['cmis_views'], $repoid);
        if($query_result){
	      $cmis_view = theme('cmis_views_table', array('rows' => $query_result->objectList, 'repoId' => $repoid));
        }
        $element[$delta] = array(          
          '#type' => 'html_tag',
          '#tag' => 'div',
          '#value' => $cmis_view,   
        );
      }
      break;
  }
  return $element;
}

/**
 * Implements hook_field_widget_form().
 *
 * hook_widget_form() is where Drupal tells us to create form elements for
 * our field's widget.
 *
 * The 'cmis_views_field_browser' calls the CMIS repo and displays
 * the browser structure in a modal window.
 *
 */
function cmis_views_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  drupal_add_library('system', 'ui.dialog');
  drupal_add_js(drupal_get_path('module', 'cmis_views') . '/cmis_browser.js');
  module_load_include('admin.inc', 'cmis_views');

  $value = isset($items[$delta]['cmis_folder_path']) ? $items[$delta]['cmis_folder_path'] : '';
  $widget = $element;
  $widget['#delta'] = $delta;
  
  switch ($instance['widget']['type']) {
    case 'cmis_views_field_browser':
      $widget += array(
        '#suffix' => '<div class="cmis_views_field_browser"></div>',
        '#attributes' => array('class' => array('edit-cmis_views_field_browser')),
        '#type' => 'textfield',
        '#default_value' => $value,
        '#maxlength' => 600,
      );
      $button = array(
        '#type' => 'button',
        '#value' => t('Browse CMIS repository'),
        '#submit' => array(),
        '#ajax' => array(
          'path' => 'admin/config/cmis/views/ajax/',
        ),
        '#limit_validation_errors' => array(),
      );
      cmis_views_admin_ajax_browse('');
      break;
  }
  $element['cmis_views'] = $widget;
  $element['browse'] = $button;
  return $element;
}

/**
 * Implements hook_field_validate().
 *
 * @see cmis_views_field_widget_error()
 */
function cmis_views_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  module_load_include('api.inc', 'cmis');
  module_load_include('utils.inc', 'cmis_views');
  $repository = cmis_get_repository();
  
  foreach ($items as $delta => $item) {
    if (!empty($item['cmis_views'])) {
      /* Check that this is a valid folder path and that we can get a UUID of a folder to store - if not throw an error */
/*      
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'field_example_invalid',
          'message' => t('Color must be in the HTML format #abcdef.'),
        );
*/
    }
  }
}

/**
* Implements hook_field_presave().
*/
function cmis_views_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  module_load_include('api.inc', 'cmis');
  module_load_include('utils.inc', 'cmis_browser');
  $repository = cmis_get_repository();

  foreach ($items as $delta => $item) {
    $items[$delta]['cmis_views'] = _cmis_views_content_object_from_path($repository, $item['cmis_views']);
    $items[$delta]['cmis_folder_path'] = $item['cmis_views'];

  }
}
/**
 * Alters the block admin form to add delete links next to menu blocks.
 */
function cmis_views_form_block_admin_display_form_alter(&$form, &$form_state) {
  $destination = drupal_get_destination();
  foreach ($form['blocks'] as $key => $block) {
    if ($block['module']['#value'] == 'cmis_views') {
      $form['blocks'][$key]['delete'] = array(
        '#type' => 'link',
        '#title' => t('delete'),
        '#href' => 'admin/config/cmis/views/delete/' . $block['delta']['#value'],
        '#redirect' => array('user/login', 'destination=node'),
      );
    }
  }
}

/**
 * CMIS document download handler.
 */
function cmis_views_download_handler($object_id) {
  module_load_include('api.inc', 'cmis');
  module_load_include('utils.inc', 'cmis_browser');
  $repository = cmis_get_repository();
  $object_id = urldecode($object_id);

  if (!is_null($object_id)) {
    $object = cmisapi_getProperties($repository->repositoryId, $object_id);
  }
  try {
    $content = cmisapi_getContentStream($repository->repositoryId, $object->id);
  }
  catch (CMISException $e) {
    cmis_error_handler('cmis_browser_content_get', $e);
    drupal_add_http_header('', 'HTTP/1.1 503 Service unavailable');
    exit();
  }

  if (ob_get_level()) {
    ob_end_clean();
  }

  drupal_add_http_header('Cache-Control', 'no-cache, must-revalidate');
  drupal_add_http_header('Content-type', $object->properties['cmis:contentStreamMimeType']);
  if ($object->properties['cmis:contentStreamMimeType'] != 'text/html') {
    drupal_add_http_header('Content-Disposition', 'attachment; filename="'. $object->properties['cmis:name'] .'"');  
  }

  print($content);
  exit();
}

/**
 * Implements hook_permission().
 */
function cmis_views_permission() {
  return array(
    'administer cmis views' => array(
      'title' => t('Administer CMIS views'),
      'description' => t('Role allows users to administer add and remove CMIS views'),
    ),
    'access cmis views' => array(
      'title' => t('View CMIS views'),
      'description' => t('Allows viewing of CMIS Views blocks'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function cmis_views_theme($existing, $type, $theme, $path) {
  return array(
    'cmis_views' => array(
      'variables' => array(
        'rows' => NULL,
        'repoid' => NULL,
      ),
      'template' => 'cmis-views-bullets',
      'path' => drupal_get_path('module', 'cmis_views') . '/templates',
    ),
    'cmis_views_paragraphs' => array(
      'variables' => array(
        'rows' => NULL,
        'repoid' => NULL,
        'details' => array(
          'format' => t('Format'),
          'size' => t('Size'),
          'lastmodified' => t('Last Modified'),
        ),
      ),
      'template' => 'cmis-views-paragraphs',
      'path' => drupal_get_path('module', 'cmis_views') . '/templates',
    ),
    'cmis_views_table' => array(
      'variables' => array(
        'rows' => NULL,
        'repoid' => NULL,
        'tableheadings' => array(
          'title' => t('Title'),
          'description' => t('Description'),
          'filetype' => t('File type'),
          'lastmodified' => t('Last Modified'),
          'size' => t('Size'),
        ),
      ),
      'template' => 'cmis-views-table',
      'path' => drupal_get_path('module', 'cmis_views') . '/templates',
    ),
    'cmis_views_detail' => array(
      'variables' => array(
        'rows' => NULL,
        'repoid' => NULL,
        'detailheadings' => array(
          'size' => t('Size'),
          'lastmodified' => t('Last Modified'),
        ),
      ),
      'template' => 'cmis-views-detail',
      'path' => drupal_get_path('module', 'cmis_views') . '/templates',
    ),
  );
}

/**
 * Formats dates, returns friendly mimetypes, assigns descriptions and titles.
 */
function cmis_views_process_cmis_data ($variables) {
  global $base_url;
  foreach ($variables['rows'] as $child) {
    $options['absolute'] = TRUE;

    $path = 'cmis/views/'.urlencode($child->properties['cmis:objectId']);
    $cmisurl = url($path, $options);
    if (isset($child->properties["cmis:contentStreamMimeType"])){
      $fileproperties = _cmis_views_tidyMime($child->properties["cmis:contentStreamMimeType"]);
	  $child->properties["cmis:contentStreamMimeType"] = $fileproperties['type'];
    }else{
	  $child->properties["cmis:contentStreamMimeType"] = t('Unknown');
    }
    $child->properties["cmis:lastModificationDate"] = date("j F Y", strtotime($child->properties["cmis:lastModificationDate"]));
    $child->properties['cmis:name'] = check_plain($child->properties['cmis:name']);
    if (isset($child->properties["cmis:contentStreamLength"])){
      $child->properties["cmis:contentStreamLength"] = _cmis_views_tidySize($child->properties["cmis:contentStreamLength"]);
    }else{
	  $child->properties["cmis:contentStreamLength"] = t('Unknown');
    }
    $child->properties["cmis:link"] = l($child->properties['cmis:name'], $cmisurl, array('attributes' => array('class' => 'cmislink')));
    $child->properties["cmis:path"] = $path;
    if (!empty($child->properties['cm:title'])) {
      $child->properties["cmis:link-title"] = l($child->properties['cm:title'], $cmisurl, array('attributes' => array('class' => 'cmislink')));
    }
    else {
      $child->properties["cmis:link-title"] = l($child->properties['cmis:name'], $cmisurl, array('attributes' => array('class' => 'cmislink')));
    }
    $child->properties["cmis:link"] = l($child->properties['cmis:name'], $cmisurl, array('class' => 'cmislink'));

    $child->properties["cmis:lastModificationDate"] = date("j F Y", strtotime($child->properties["cmis:lastModificationDate"]));
    $child->properties["cmis:filetypeimg"] = $base_url . '/' . drupal_get_path('module', 'cmis_views') . '/images/' . $fileproperties['image'];
    if (isset($child->properties['cm:title'])) {
      $child->properties['cmis:name'] = $child->properties['cm:title'];
    }
    if (isset($child->properties['cm:description'])) {
      if ($child->properties['cm:description'] != NULL) {
        $child->properties['cm:description'] = $child->properties['cm:description'] . '<br />';
      }
    }
    else {
      $child->properties['cm:description'] = NULL;
    }
    
    if (variable_get('cmis_views_thumbnails') != '') {
      $thumbnails = variable_get('cmis_views_thumbnails');
    }else{
	  $thumbnails = 0;
    }
    
    if ($thumbnails == 1 && isset($child->renditions[0]['streamId'])){
      $thumbbinary = cmisapi_getContentStream($variables['repoId'], $child->renditions[0]['streamId']);
	  $child->properties["cmis:link-image"] = l('<img width="64" alt="'.$child->properties['cmis:name'].'" src="data:image/gif;base64,'.base64_encode($thumbbinary).'" class="alignleft">', $cmisurl, array('html' => TRUE, 'attributes' => array('class' => 'cmislink')));
    }else{
      $child->properties["cmis:link-image"] = l('<img width="64" height="64" alt="'.$child->properties['cmis:name'].'" src="'.$child->properties["cmis:filetypeimg"].'" class="alignleft">', $cmisurl, array('html' => TRUE, 'attributes' => array('class' => 'cmislink')));	    
    }
  }
  return $variables;
}

/**
 * Implements hook_preprocess().
 */
function template_preprocess_cmis_views(&$variables, $hook) {
  cmis_views_process_cmis_data($variables);
}

/**
 * Implements hook_preprocess().
 */
function template_preprocess_cmis_views_paragraphs(&$variables, $hook) {
  cmis_views_process_cmis_data($variables);
}

/**
 * Implements hook_preprocess().
 */
function template_preprocess_cmis_views_table(&$variables, $hook) {
  cmis_views_process_cmis_data($variables);
}

/**
 * Implements hook_preprocess().
 */
function template_preprocess_cmis_views_detail(&$variables, $hook) {
  cmis_views_process_cmis_data($variables);
}

/**
 * Generates queries, adds CSS and theme information
 * array $cmisinfo the cmis_view data
 */
 
function cmis_views_info($cmisinfo = array('cmisviewname' => '', 'uuid' => '', 'querytype' => '', 'themetype' => '', 'cmisquery' => '', 'pagetitle' => '', 'filepath' => '', 'cmid' => NULL)) {
  $contents = '';
  module_load_include('api.inc', 'cmis');
  module_load_include('cmis_query.module', 'cmis_query');
  module_load_include('utils.inc', 'cmis_views');

  drupal_add_css(drupal_get_path('module', 'cmis_views') . '/cmis_views.css');

  $theme = $cmisinfo['themetype'];
  if ($cmisinfo['cmisquery'] != NULL || $uuid != NULL) {
    if(isset($cmisinfo['cmisquery'])){
      $query = urldecode($cmisinfo['cmisquery']);
    }
    $uuid = check_plain($cmisinfo['uuid']);
    if ($uuid) {
      $query_result = '';
      $query_result = cache_get('cmis_views_'.$uuid, 'cache');
      if ($query_result){
        $query_result = $query_result->data;
      }
      if (empty($query_result)) {
        try { 
          $repoid = !empty($repository->repositoryId) ? $repository->repositoryId : 'default';
          $query_result = _cmis_views_query($uuid, $repoid);
        }
        catch (CMISException $e) {
          cmis_error_handler('cmis_query', $e);
          $contents = t('Error connecting to CMIS repo');
        }
      }
      else{
	    // If cache is set, we still need to get the repoid from somewhere. should the repo details also be cached?
	    try {
          $repoid = !empty($repository->repositoryId) ? $repository->repositoryId : 'default';
        }
        catch (CMISException $e) {
          cmis_error_handler('cmis_query', $e);
          $contents = t('Error connecting to CMIS repo');
        }   
      }
    }
    elseif ($query) {
      try {
        $repoid = !empty($repository->repositoryId) ? $repository->repositoryId : 'default';
        $query_result = cmisapi_query($repoid, $query);
      }
      catch (CMISException $e) {
        cmis_error_handler('cmis_query', $e);
        $contents = t('Error returning CMIS results - check your repository is active and the query / path is correct');
      }
    }

    if ($query_result) {
      switch ($theme) {
        case "0":
          return $themedresults = theme('cmis_views', array('rows' => $query_result->objectList, 'repoId' => $repoid));
          break;
        case "1":
          return $themedresults = theme('cmis_views_paragraphs', array('rows' => $query_result->objectList, 'repoId' => $repoid));
          break;
        case "2":
          return $themedresults = theme('cmis_views_table', array('rows' => $query_result->objectList, 'repoId' => $repoid));
          break;
        case "3":
          return $themedresults = theme('cmis_views_detail', array('rows' => $query_result->objectList, 'repoId' => $repoid));
          break;
      }
    }
    else {
      drupal_set_message($contents, 'error');
    }
  }
}

/**
 * Loads the cmis_view db record from the db and returns it.
 */
function cmis_views_load($cmid = '') {

  $theme = variable_get('theme_default', NULL);

  if ($cmid) {
      $result = db_query("SELECT cmis.*, {block}.* FROM {cmis_views} AS cmis INNER JOIN {block} on cmis.cmid = {block}.delta WHERE {block}.module = :module AND {block}.theme = :theme AND cmis.cmid = :cmid", array(
      ':module' => 'cmis_views',
      ':theme' => $theme,
      ':cmid' => $cmid,
    ));

    return $result->fetchAssoc();
  }
  return FALSE;
}

/**
 * Implements hook_block_info().
 */
function cmis_views_block_info() {
  $blocks = array();

  /* get all CMIS views from DB where block = 1 */
  $query = db_select('cmis_views');
  $result = $query
    ->fields('cmis_views')
    ->condition('createblock', 1, '=')
    ->execute();

  foreach ($result as $data) {
    $blocks[$data->cmid] = array(

      'info' => t("CMIS View: @viewname", array('@viewname' => check_plain($data->cmisviewname))),
      'title' => check_plain($data->cmisviewname),
      'region' => '',
      'status' => 1,
      'weight' => 0,
    );

    $rows[] = $blocks;
  }
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function cmis_views_block_view($delta = '') {
  if (user_access('access cmis views')) {

    $cmisview = cmis_views_load($delta);

    if ($cmisview['title'] && $cmisview['title'] != '<none>') {
      $block['title'] = check_plain($cmisview['title']);
    }
    elseif ($cmisview['cmisviewname'] && $cmisview['title'] != '<none>') {
      $block['title'] = check_plain($cmisview['cmisviewname']);
    }
    elseif ($cmisview['title'] == '<none>') {
      $block['title'] = '';
    }

    $block['content'] = cmis_views_info($cmisview);
    return $block;
  }
}