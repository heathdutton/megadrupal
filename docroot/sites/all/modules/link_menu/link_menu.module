<?php

/**
 * Implements hook_field_formatter_info().
 */
function link_menu_field_formatter_info() {
  $info['link_menu'] = array(
    'label' => t('Menu links'),
    'field types' => array('link_field', 'url'),
    'settings' => array(
      'menu_name' => '',
    ),
  );

  if (module_exists('menu_block')) {
    $info['link_menu_block'] = array(
      'label' => t('Menu block links'),
      'field types' => array('link_field', 'url'),
      'settings' => array(
        'menu_name' => '',
      ),
    );
  }

  return $info;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function link_menu_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = '';

  switch ($display['type']) {
    case 'link_menu':
    case 'link_menu_block':
      $summary = t('Menu machine name: @menu-name', array('@menu-name' => _link_menu_machine_name($settings, $field, $instance)));
      break;
  }

  return $summary;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function link_menu_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element = array();

  switch ($display['type']) {
    case 'link_menu':
    case 'link_menu_block':
      $element['menu_name'] = array(
        '#type' => 'textfield',
        '#title' => t('Menu machine name'),
        '#default_value' => _link_menu_machine_name($settings, $field, $instance),
        '#required' => TRUE,
        '#size' => 20,
        '#field_prefix' => 'theme__menu_link__',
      );
      break;
  }

  return $element;
}

/**
 * Implements hook_field_formatter_view()
 */
function link_menu_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];

  switch ($display['type']) {
    case 'link_menu':
      $tree = _link_menu_items_to_tree($items, $settings, $field, $instance);
      if ($output = menu_tree_output($tree)) {
        $element[0] = $output;
      }
      break;

    case 'link_menu_block':
      $tree = _link_menu_items_to_tree($items, $settings, $field, $instance);
      $config = menu_block_get_config();
      $config['menu_name'] = _link_menu_machine_name($settings, $field, $instance);
      $config['delta'] = $config['menu_name'];
      if ($output = menu_block_tree_output($tree, $config)) {
        $element[0]['#content'] = $output;
        if (!empty($element[0]['#content'])) {
          $element[0]['#theme'] = array(
            'menu_block_wrapper__' . str_replace('-', '_', $config['delta']),
            'menu_block_wrapper__' . str_replace('-', '_', $config['menu_name']),
            'menu_block_wrapper'
          );
          $element[0]['#config'] = $config;
          $element[0]['#delta'] = $config['delta'];
        }
      }
      break;
  }

  return $element;
}

function _link_menu_machine_name(array $settings, array $field, array $instance) {
  if (!empty($settings['menu_name'])) {
    return $settings['menu_name'];
  }
  else {
    return drupal_clean_css_identifier(drupal_strtolower($instance['label']));
  }
}

function _link_menu_items_to_tree(array $items, $settings, $field, $instance) {
  $tree = array();
  $menu_name = _link_menu_machine_name($settings, $field, $instance);

  foreach ($items as $delta => $item) {
    $menu_link = array(
      'menu_name' => $menu_name,
      'mlid' => ($delta + 1),
      'weight' => $delta,
    );

    switch ($field['type']) {
      case 'link_field':
        $menu_link['title'] = $item['title'];
        $menu_link['href'] = $item['url'];
        _link_menu_process_menu_link($menu_link);
        $item_localized_options = array_intersect_key($item, array('html' => NULL, 'attributes' => NULL, 'query' => NULL, 'fragment' => NULL));
        if (!empty($item_localized_options)) {
          $menu_link['localized_options'] = drupal_array_merge_deep($menu_link['localized_options'], $item_localized_options);
        }

        break;

      case 'url':
        $menu_link['title'] = $item['title'];
        $menu_link['href'] = $item['value'];
        _link_menu_process_menu_link($menu_link);
        if (!empty($item['options'])) {
          $menu_link['localized_options'] = drupal_array_merge_deep($menu_link['localized_options'], $item['options']);
        }

        break;
    }

    $tree[] = array('link' => $menu_link, 'below' => array());
  }

  return $tree;
}

function _link_menu_process_menu_link(array &$menu_link) {
  $menu_link += array(
    'plid' => 0,
    'has_children' => 0,
  );

  $external = url_is_external($menu_link['href']);
  if (!$external && $router_item = menu_get_item($menu_link['href'])) {
    $menu_link += $router_item;
  }

  $menu_link += array(
    'link_path' => $menu_link['href'],
    //'router_path' => NULL,
    'link_title' => $menu_link['title'],
    'options' => array(),
    'module' => 'link',
    'hidden' => 0,
    'external' => (int) $external,
    'expanded' => 0,
    'weight' => 0,
    'depth' => 1,
    'customized' => 0,
    //'p1' => $delta + 1,
    //'p2' => 0,
    //'p3' => 0,
    //'p4' => 0,
    //'p5' => 0,
    //'p6' => 0,
    //'p7' => 0,
    //'p8' => 0,
    //'p9' => 0,
    //'updated' => 0,
    //'load_functions' => NULL,
    //'to_arg_functions' => NULL,
    //'access_callback' => NULL,
    //'access_arguments' => NULL,
    //'page_callback' => NULL,
    //'page_arguments' => NULL,
    //'delivery_callback' => NULL,
    //'tab_parent' => NULL,
    //'tab_root' => NULL,
    //'title_callback' => NULL,
    //'title_arguments' => NULL,
    //'theme_callback' => NULL,
    //'theme_arguments' => NULL,
    //'type' => NULL,
    //'description' => NULL,
    'in_active_trail' => FALSE,
    'access' => 1,
    'localized_options' => array(),
  );
}
