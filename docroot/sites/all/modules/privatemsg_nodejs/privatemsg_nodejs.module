<?php

/**
 * @file
 * Module file for Private messages with node.js.
 */

/**
 * Implements hook_page_build().
 */
function privatemsg_nodejs_page_build(&$page) {
  global $user;

  // Check if mini chats are enabled.
  if (variable_get('privatemsg_nodejs_mimichats', TRUE)) {

    // Init of needed js, css, libraries and the addition of user's object to
    // js settings.
    privatemsg_nodejs_initialization($page['content']);

    // Check if user has any of the opened mini chats.
    if (!empty($_SESSION['privatemsg_nodejs']['mini_chats'])) {

      // Add mini chats settings to js settings.
      $page['content']['#attached']['js'][] = array(
        'data' => array('privateMsgNodeJS' => array('mini_chats' => $_SESSION['privatemsg_nodejs']['mini_chats'])),
        'type' => 'setting',
      );
    }
  }

  // Check if alert messages are enabled.
  if (variable_get('privatemsg_nodejs_alert', TRUE)) {
    privatemsg_nodejs_initialization($page['content']);
    nodejs_send_content_channel_token('privatemsg_nodejs_alert_' . $user->uid);
  }
}


/**
 * Init js, css, libraries and the addition of user's object to js settings.
 */
function privatemsg_nodejs_initialization(&$page) {
  global $user;
  static $enabled = FALSE;
  if (!$enabled) {
    $folder = drupal_get_path('module', 'privatemsg_nodejs');
    $page['#attached']['css'][] = $folder . '/css/privatemsg-nodejs.css';

    $page['#attached']['library'][] = array('system', 'ui.draggable');
    $page['#attached']['library'][] = array('system', 'ui.resizable');

    $page['#attached']['js'][] = $folder . '/js/privatemsg_nodejs.js';
    $page['#attached']['js'][] = array(
      'data' => array(
        'privateMsgNodeJS' => array(
          'user' => $user->uid,
          'folder' => $folder,
          'profileAccess' => user_access('access user profiles'),
        ),
      ),
      'type' => 'setting',
    );

    if ($audio_js_path = _privatemsg_nodejs_audio_library_path()) {
      $page['#attached']['js'][] = $audio_js_path;

      // Add sound settings for alert message if it is enabled.
      if (variable_get('privatemsg_nodejs_alert_sound', TRUE)) {
        $path = 'default';
        if ($fid = variable_get('privatemsg_nodejs_alert_sound_file', 0)) {
          $path = file_create_url(file_load($fid)->uri);
        }
        $page['#attached']['js'][] = array(
          'data' => array('privateMsgNodeJS' => array('sounds' => array('alert' => $path))),
          'type' => 'setting',
        );
      }

      // Add sound settings for message if it is enabled.
      if (variable_get('privatemsg_nodejs_message_sound', TRUE)) {
        $path = 'default';
        if ($fid = variable_get('privatemsg_nodejs_message_sound_file', 0)) {
          $path = file_create_url(file_load($fid)->uri);
        }
        $page['#attached']['js'][] = array(
          'data' => array('privateMsgNodeJS' => array('sounds' => array('message' => $path))),
          'type' => 'setting',
        );
      }
    }

    $enabled = TRUE;
  }
}


/**
 * Implements hook_menu().
 */
function privatemsg_nodejs_menu() {

  $items['admin/config/messaging/privatemsg/nodejs'] = array(
    'title'            => 'Private message with node.js settings',
    'description'      => 'Configure private messaging with using node.js settings.',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('privatemsg_nodejs_admin_settings'),
    'file'             => 'privatemsg_nodejs.admin.inc',
    'access arguments' => array('administer privatemsg settings'),
    'type'             => MENU_NORMAL_ITEM,
  );

  $items['privatemsg-nodejs/mini/%privatemsg_thread/%/%'] = array(
    'title' => 'Get structure of mini chat.',
    'page callback' => 'privatemsg_nodejs_mini_chat',
    'page arguments' => array(2, 3, 4),
    'access callback'  => 'privatemsg_user_access',
    'access arguments' => array('read privatemsg'),
    'type' => MENU_CALLBACK,
  );

  $items['privatemsg-nodejs/status/%/%/%'] = array(
    'title' => 'Status about writing.',
    'page callback' => 'privatemsg_nodejs_status',
    'page arguments' => array(2, 3, 4),
    'access callback'  => 'privatemsg_user_access',
    'access arguments' => array('read privatemsg'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}


/**
 * Ajax handler for creating a chat from javascript.
 */
function privatemsg_nodejs_mini_chat($thread, $token, $action) {
  global $user;

  // Check user token.
  if ($token != PrivatemsgNodejs::getUserToken('mini_chat', $user->uid, $thread['thread_id'])) {
    drupal_json_output(array('data' => array('accessDenied' => 'invalid token')));
    drupal_exit();
  }

  // Get options for mini chat position.
  $options = drupal_get_query_parameters();

  // Actions hendler.
  $chat = new PrivatemsgNodejs($thread, $options, $action);
  switch ($action) {
    case 'send':
      // Save message which has been sent from mini chat.
      $chat->sendMessage();
      break;

    case 'add':
      // Build the chat and save it for user.
      $chat->buildMiniChat();
      break;

    case 'move':
      // Change position for mini chat.
      $chat->moveMiniChat();
      break;

    case 'resize':
      // Change size of mini chat.
      $chat->resizeMiniChat();
      break;

    case 'delete':
      // Delete mini chat from user session.
      $chat->deleteMiniChat();
      break;

  }
  drupal_exit();
}


/**
 * Ajax handler for status about writing.
 */
function privatemsg_nodejs_status($thread_id, $type, $status) {
  global $user;
  $types = array('simple', 'clamped', 'angry');

  // Can add custom type of status.
  drupal_alter('privatemsg_nodejs_statuses', $types);

  $statuses = array('start', 'stop');
  if (is_numeric($thread_id) && in_array($type, $types) && in_array($status, $statuses)) {
    $nodejs_status = (object) array(
      'channel'   => 'privatemsg_nodejs_status_' . $thread_id,
      'thread_id' => $thread_id,
      'uid'       => $user->uid,
      'name'      => $user->name,
      'callback'  => 'privatemsgNodejsStatus',
      'type'      => $type,
      'status'    => $status,
    );

    // One can change some settings (or add new) for message or alert which are
    // going to node.js channel.
    $type = 'status';
    $message = array();
    drupal_alter('privatemsg_nodejs_channel', $nodejs_status, $message, $type);
    nodejs_send_content_channel_message($nodejs_status);
  }
  drupal_exit();
}


/**
 * Implimentation of hook_form_FORM_ID_alter().
 */
function privatemsg_nodejs_form_privatemsg_new_alter(&$form, &$form_state, $form_id) {
  global $user;
  if (is_numeric($form_state['build_info']['args'][2])) {
    // Add ajax submit.
    $form['actions']['submit']['#ajax'] = array(
      'wrapper' => 'thread-form-wrap',
      'callback' => 'privatemsg_nodejs_form_privatemsg_new_ajax_callback',
    );

    // Add link to mini chat on main chat.
    if (variable_get('privatemsg_nodejs_mimichats', TRUE)) {
      // Take mini chat link.
      $chat_link = PrivatemsgNodejs::getMiniChatLink($form_state['build_info']['args'][2], array(), $user->uid);
      $form['actions']['mini_chat'] = array(
        '#theme' => 'link',
        '#text' => t('Open mini chat'),
        '#path' => url($chat_link['path'], array('query' => $chat_link['query'], 'absolute' => TRUE)),
        '#options' => array(
          'attributes' => array(
            'class'     => array('mini-chat'),
            'token'     => array($chat_link['token']),
            'thread_id' => array($chat_link['thread_id']),
          ),
          'html' => FALSE,
        ),
        '#weight' => 51,
      );
    }
  }
  $form['#submit'][] = 'privatemsg_nodejs_new_submit';
}


/**
 * AJAX callback for privatemsg_new form.
 */
function privatemsg_nodejs_form_privatemsg_new_ajax_callback($form, $form_state) {
  // The form is going to be cleared after the message has been sent.
  $form_state['values'] = $form_state['input'] = $form_state['field'] = $form_state['validate_built_message'] = array();
  $output = drupal_rebuild_form('privatemsg_new', $form_state, $form);
  $output['#prefix'] = '<div id="thread-form-wrap">';
  $output['#suffix'] = '</div>';
  return $output;
}


/**
 * Submit callback for the privatemsg_new form.
 */
function privatemsg_nodejs_new_submit($form, &$form_state) {
  // Going to reload the message, for in the case the extra fields be added,
  // would be displayed incorrectly.
  $message = privatemsg_message_load($form_state['validate_built_message']->mid);
  $message->recipients = $form_state['validate_built_message']->recipients;

  privatemsg_nodejs_send($message);
}


/**
 * This hook is executed after the message has been saved.
 *
 * $message is updated with mid and thread id. Use this hook to store data,
 * that needs to point to the saved message for example attachments.
 *
 * @param array $message 
 *   Message array.
 */
function privatemsg_nodejs_privatemsg_message_insert($message) {
  // Check if message not send from thread.
  if (!isset($message->form_id)) {
    privatemsg_nodejs_send($message);
  }

}


/**
 * Send messages to node js channels.
 */
function privatemsg_nodejs_send($message) {
  global $user;

  // Create author object with.
  $author = (object) array(
    'uid' => $user->uid,
    'name' => $user->name,
    'link' => l($user->name, 'user/' . $user->uid),
  );
  // Send alert message to node.js for all recipients.
  if (variable_get('privatemsg_nodejs_alert', TRUE)) {
    foreach ($message->recipients as $account) {
      $nodejs_alert = (object) array(
        'channel' => 'privatemsg_nodejs_alert_' . $account->uid,
        'thread_id' => $message->thread_id,
        'markup' => theme('privatemsg_nodejs_alert', array('message' => $message, 'recipient' => $account)),
        'callback' => 'privatemsgNodejsAlert',
        'messageAuthor' => $author,
      );

      // One can change some settings (or add new) for message or alert which
      // are going to node.js channel.
      $type = 'alert';
      drupal_alter('privatemsg_nodejs_channel', $nodejs_alert, $message, $type);
      nodejs_send_content_channel_message($nodejs_alert);
    }
  }

  // Send message to node.js
  $nodejs_message = (object) array(
    'channel' => 'privatemsg_nodejs_thread_' . $message->thread_id,
    'thread_id' => $message->thread_id,
    'markup' => theme('privatemsg_view', array('message' => $message)),
    'callback' => 'privatemsgNodejs',
    'messageAuthor' => $author,
  );

  // One can change some settings (or add new) for message or alert which are
  // going to node.js channel.
  $type = 'message';
  drupal_alter('privatemsg_nodejs_channel', $nodejs_message, $message, $type);

  nodejs_send_content_channel_message($nodejs_message);
}


/**
 * Implements drupal_alter for privatemsg view.
 */
function privatemsg_nodejs_privatemsg_view_alter(&$content) {

  $thread_id = !empty($content['#thread']['thread_id']) ? $content['#thread']['thread_id'] : '';
  // Add js, css, libraries on the thread page.
  if ($thread_id) {
    privatemsg_nodejs_initialization($content);
    nodejs_send_content_channel_token('privatemsg_nodejs_thread_' . $content['#thread']['thread_id']);

    // Open channels for statuses.
    if (variable_get('privatemsg_nodejs_message_status', TRUE)) {
      nodejs_send_content_channel_token('privatemsg_nodejs_status_' . $content['#thread']['thread_id']);
    }
  }

  // Add wrapper for correct adding of new messages.
  $content['reply']['#prefix'] = '<div id="thread-form-wrap">';
  $content['reply']['#suffix'] = '</div>';
  $content['messages']['#prefix'] = '<div class="thread-messages-wrap thread-wrap-' . $thread_id . '"><div class="thread-inner">';
  $content['messages']['#suffix'] = '</div></div>';
}


/**
 * Implements drupal_alter for nodejs content channel message.
 */
function privatemsg_nodejs_nodejs_content_channel_message_alter(&$message) {

  // On ajax messege not show if client associated with this socket.
  if (strpos($message->channel, 'privatemsg_nodejs') !== FALSE) {
    $message->clientSocketId = '';
  }
}


/**
 * Implements hook_menu().
 */
function privatemsg_nodejs_theme() {

  // Theme wrapper for mini chats.
  $templates = array(
    'privatemsg_nodejs_mini_chat'    => array(
      'variables' => array('thread' => NULL, 'form' => NULL),
      'template'  => 'privatemsg_nodejs-mini-chat',
      'path'      => drupal_get_path('module', 'privatemsg_nodejs') . '/templates',
    ),
    'privatemsg_nodejs_alert'    => array(
      'variables' => array('message' => NULL, 'recipient' => NULL),
      'template'  => 'privatemsg_nodejs-alert',
      'path'      => drupal_get_path('module', 'privatemsg_nodejs') . '/templates',
    ),
  );

  return $templates;
}


/**
 * Preprocess for mini chats.
 */
function template_preprocess_privatemsg_nodejs_mini_chat(&$vars) {
  global $user;

  $thread = $vars['thread'];
  // Render each message to mini chat.
  $vars['messages'] = array();
  $count = count($thread['messages']);
  $i = 1;
  foreach ($thread['messages'] as $message) {
    // Add property to be able to change view in mini chat.
    $message->mini_chat = TRUE;

    $message->classes = array('pm-nj-message');
    if ($i == $count) {
      $message->classes[] = 'privatemsg-message-last';
    }
    if (!empty($message->is_new)) {
      $message->classes[] = 'privatemsg-message-new';
    }
    $vars['messages'][$message->mid] = array(
      '#theme' => 'privatemsg_view',
      '#message' => $message,
    );
    $i++;
  }
}


/**
 * Preprocess for alert message.
 */
function template_preprocess_privatemsg_nodejs_alert(&$vars) {
  global $user;

  $message = $vars['message'];
  $recipient = $vars['recipient'];

  // Сut body.
  $vars['body'] = truncate_utf8(check_plain($message->body), variable_get('privatemsg_nodejs_alert_length', 100), TRUE, TRUE);

  // Add to alert author name.
  $vars['name'] = $user->name;
  if (user_access('access user profiles', $recipient)) {
    $vars['name'] = l($user->name, 'user/' . $user->uid);
  }

  // We delete uid to allow user who is going to receive the message and who
  // has no rights to review profiles to have the profile picture without
  // the link on the user's page.
  $author = clone $message->author;
  unset($author->uid);

  // Add to alert author picture.
  $vars['picture'] = theme('user_picture', array('account' => $author));

  // Add link to main chat(privatemsg thread).
  $links = array(
    array(
      'title' => t('Open thread'),
      'href' => 'messages/view/' . $message->thread_id,
      'attributes' => array('class' => array('main-chat')),
    ),
  );

  // Check if mini chats are enabled and add link to mini chat.
  if (variable_get('privatemsg_nodejs_mimichats', TRUE)) {

    // Take chat link.
    $chat_link = PrivatemsgNodejs::getMiniChatLink($message->thread_id, array(), $recipient->uid);
    $links[] = array(
      'title' => t('Open mini chat'),
      'href' => $chat_link['path'],
      'attributes' => array(
        'class'     => array('mini-chat'),
        'token'     => array($chat_link['token']),
        'thread_id' => array($message->thread_id),
      ),
      'query' => $chat_link['query'],
    );
  }

  // Show links as a list.
  $vars['links'] = theme('links', array('links' => $links));
}


/**
 * Preprocess for Private message.
 */
function privatemsg_nodejs_preprocess_privatemsg_view(&$vars) {
  // Change the format for the current hour, because without refreshing the
  // page, it does not look correctly.
  $message = $vars['message'];
  if ($message->timestamp > mktime(date('H'), 0)) {
    $vars['message_timestamp'] = format_date($message->timestamp, 'privatemsg_current_day');
  }
}


/**
 * Implements hook_forms().
 */
function privatemsg_nodejs_forms($form_id, $args) {
  $forms = array();
  if (preg_match('/^privatemsg_nodejs_mini_form_\d+$/', $form_id)) {
    $forms[$form_id] = array(
      'callback' => 'privatemsg_nodejs_mini_form',
    );
  }
  return $forms;
}


/**
 * Form fields for mini chats text entry.
 */
function privatemsg_nodejs_mini_form($form, &$form_state, $thread) {
  global $user;

  $form['privatemsg_nodejs_mini_entry_box_' . $thread['thread_id']] = array(
    '#type' => 'textarea',
    '#title' => t('Enter your message text here'),
  );
  $form['privatemsg_nodejs_entry_submit_' . $thread['thread_id']] = array(
    '#type' => 'submit',
    '#value' => t('Chat'),
  );
  return $form;
}


/**
 * Gets the path to the audio.js library.
 *
 * @return string
 *   The path to the audio library js file, or FALSE if not found.
 */
function _privatemsg_nodejs_audio_library_path() {

  $js_path = FALSE;
  if (function_exists('libraries_get_path')) {
    $audiojs_path = libraries_get_path('audiojs');
    if (!empty($audiojs_path)) {
      if (file_exists($audiojs_path . '/audio.min.js')) {
        $js_path = $audiojs_path . '/audio.min.js';
      }
    }
  }

  return $js_path;
}
