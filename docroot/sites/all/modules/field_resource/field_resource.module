<?php
/**
 *
 * @file field_resource.module
 */


define('FIELD_RESOURCE_MACHINE_NAME_LENGTH', 120);

/**
 * Implements hook_permission().
 */
function field_resource_permission() {
  return array(
    'access field resource content' => array(
      'title' => t('Administer field resource content'),
      'description' => t('This permission is needed to access data via the field resource service.'),
    ),
  );
}

/**
 * Implements hook_field_info().
 *
 * @return array
 */
function field_resource_field_info() {
  return array(
    'field_resource' => array(
      'label' => t('Field Resource'),
      'description' => t('External services could query this field content.'),
      'default_widget' => 'field_resource_widget',
      'default_formatter' => 'field_resource_formatter',
    ),
  );
}


/**
 * Implements hook_field_formatter_info().
 *
 * @return array
 */
function field_resource_field_formatter_info() {
  return array(
    'field_resource_formatter' => array(
      'label' => t('Default'),
      'field types' => array('field_resource'),
      'settings' => array(),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 *
 * @param $entity_type
 * @param $entity
 * @param $field
 * @param $instance
 * @param $langcode
 * @param $items
 * @param $display
 *
 * @return array
 */
function field_resource_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  if ($display['type'] == 'field_resource_formatter') {
    foreach ($items as $delta => $item) {
      $output = check_markup($item['field_resource_content_value'], $item['field_resource_content_format'], $langcode);
      $element[$delta] = array('#markup' => $output);
    }
  }
  return $element;
}


/**
 * Implements hook_field_widget_info().
 *
 * @return array
 */
function field_resource_field_widget_info() {
  return array(
    'field_resource_widget' => array(
      'label' => t('Default'),
      'field types' => array('field_resource'),
      'settings' => array(),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 *
 * @param $form
 * @param $form_state
 * @param $field
 * @param $instance
 * @param $langcode
 * @param $items
 * @param $delta
 * @param $element
 */
function field_resource_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  if ($instance['widget']['type'] == 'field_resource_widget') {
    $element += array(
      '#delta' => $delta,
    );

    $element['field_resource_name'] = array(
      '#type' => 'textfield',
      '#title' => t('Id'),
      '#default_value' => isset($items[$delta]['field_resource_name']) ? $items[$delta]['field_resource_name'] : '',
      '#maxlength' => FIELD_RESOURCE_MACHINE_NAME_LENGTH,
      '#description' => t('A unique id to identify the content in service calls.'),
      '#required' => FALSE,
    );
    $element['field_resource_machine_name'] = array(
      '#type' => 'machine_name',
      '#default_value' => isset($items[$delta]['field_resource_machine_name']) ? $items[$delta]['field_resource_machine_name'] : '',
      '#disabled' => FALSE,
      '#maxlength' => FIELD_RESOURCE_MACHINE_NAME_LENGTH,
      '#required' => FALSE,
      '#exists_params' => array(
        'field_name' => $field['field_name'],
        'entity_type' => $instance['entity_type'],
        'bundle' => $instance['bundle'],
      ),
      '#machine_name' => array(
        'exists' => '_field_resource_machine_name_is_exists',
        'source' => array($field['field_name'], $langcode, $delta, 'field_resource_name'),
//        'standalone' => TRUE,
      ),
    );
    $element['field_resource_content'] = array(
      '#type' => 'text_format',
      '#title' => t('Resource content'),
      '#format' => isset($items[$delta]['field_resource_content_format']) ? $items[$delta]['field_resource_content_format'] : NULL,
      '#default_value' => isset($items[$delta]['field_resource_content_value']) ? $items[$delta]['field_resource_content_value'] : '',
    );
  }

  return $element;
}

/**
 * Implements hook_field_is_empty().
 *
 * @param $item
 * @param $field
 *
 * @return bool
 */
function field_resource_field_is_empty($item, $field) {
  if ($field['type'] == 'field_resource') {
    if (empty($item['field_resource_content']) && empty($item['field_resource_name'])) {
      return TRUE;
    }
    return FALSE;
  }
}

/**
 * Implements hook_field_presave().
 *
 * @param $entity_type
 * @param $entity
 * @param $field
 * @param $instance
 * @param $langcode
 * @param $items
 */
function field_resource_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  if ($field['type'] == 'field_resource') {
    foreach ($items as $delta => $item) {
      // Set the field_content value and format parameters by hand before the
      // database insert.
      $items[$delta]['field_resource_content_value'] = $item['field_resource_content']['value'];
      $items[$delta]['field_resource_content_format'] = $item['field_resource_content']['format'];
    }
  }
}

/**
 * Implements hook_services_resources().
 *
 * @return array
 */
function field_resource_services_resources() {
  return array(
    'resource' => array(
      'retrieve' => array(
        'callback' => '_field_resource_resource_retrieve',
        'args' => array(
          array(
            'name' => 'id',
            'optional' => TRUE,
            'source' => array('param' => 'id'),
            'type' => 'varchar',
            'description' => 'The id of the resource field to load content.',
          ),
        ),
        'access arguments' => array('access field resource content'),
        'file' => array(
          'type' => 'inc',
          'module' => 'field_resource',
          'name' => 'field_resource.service'
        ),
      ),
    ),
  );
}

/**
 * Check that the given id is unique.
 *
 * @param $name
 * @param array|null $element
 *
 * @return bool
 */
function _field_resource_machine_name_is_exists($id, array $element = NULL) {
  if (empty($element) && empty($element['#exists_params'])) {
    return FALSE;
  }
  else {
    $entities = _field_resource_field_infos();
    foreach ($entities as $entity_type => $info) {
      foreach ($info['fields'] as $field_name) {
        $query = new EntityFieldQuery();
        $query
          ->entityCondition('entity_type', $entity_type, '=')
          ->fieldCondition($field_name, 'field_resource_machine_name', $id, '=')
          ->count();

        if ($query->execute() > 0) {
          return TRUE;
        }
      }
    }
    return FALSE;
  }
}

/**
 * Collect all 'field_resource' type fields.
 *
 * @return array
 */
function _field_resource_field_infos() {
  $fields = &drupal_static(__FUNCTION__);

  if (empty($fields)) {
    $field_infos = field_info_fields();
    foreach ($field_infos as $field_name => $field) {
      if ($field['type'] == 'field_resource') {
        foreach($field['bundles'] as $entity => $bundle) {
          $fields[$entity]['bundles'][] = $bundle;
          $fields[$entity]['fields'][] = $field_name;
        }
      }
    }
  }

  return $fields;
}
