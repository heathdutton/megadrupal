<?php
/**
 * @file
 * Simpletest implementation.
 */

/**
 * Access check tests.
 */
class ImageStyleAccessTestCase extends DrupalWebTestCase {
  /**
   * Defines tests.
   */
  public static function getInfo() {
    return array(
      'name' => 'Image style access tests',
      'group' => 'Image',
      'description' => 'Tests access to images and their derivatives.',
    );
  }

  /**
   * Creates a test user.
   */
  protected function createTestUser() {
    $user = $this->drupalCreateUser();
    $pass_raw = $user->pass_raw;
    $user = user_load($user->uid);
    $user->pass_raw = $pass_raw;
    return $user;
  }

  /**
   * Sets up the test.
   */
  public function setUp() {
    parent::setUp('image_style_access', 'image_style_access_path');
  }

  /**
   * Tests configuration controller.
   */
  public function testController() {
    // Test saving configuration.
    $data = array(
      'title' => 'title',
      'scheme' => 'public',
      'target_base' => 'path',
      'style' => '',
      'type' => 'default',
      'settings' => array('key' => 'value'),
      'action' => IMAGE_STYLE_ACCESS_ALLOW,
      'priority' => 5,
      'enabled' => FALSE,
    );
    $config = new ImageStyleAccessConfig($data);
    image_style_access_config_controller()->save($config);
    $this->assertNotNull($config->cid, 'Configuration is saved.');

    // Test loading configuration.
    $loadedConfig = image_style_access_config_controller()->load($config->cid);
    $result = TRUE;
    foreach ($data as $key => $value) {
      if ($loadedConfig->$key != $value) {
        $result = $this->assertKeyValue($value, $loadedConfig->$key, $key) && $result;
      }
    }
    $this->assertTrue($result, 'Configuration is loaded.');

    // Test loading multiple configurations.
    $config2 = new ImageStyleAccessConfig(array(
      'type' => 'default',
      'action' => IMAGE_STYLE_ACCESS_ALLOW,
    ));
    image_style_access_config_controller()->save($config2);
    $configs = image_style_access_config_controller()->loadMultiple();
    $this->assertIdentical(array($config2->cid, $config->cid), array_keys($configs), 'Multiple configurations are loaded in order.');

    // Test loading configurations by download.
    $configs = image_style_access_config_controller()->loadMultipleByDownload('', 'public');
    $this->assertIdentical(array($config2->cid), array_keys($configs), 'Enabled configurations are loaded by download.');
    $configs = image_style_access_config_controller()->loadMultipleByDownload('', 'public', FALSE);
    $this->assertIdentical(array($config2->cid, $config->cid), array_keys($configs), 'All configurations are loaded by download.');

    // Enable and test loading configurations by specific image styles and schemes.
    $config->enabled = TRUE;
    image_style_access_config_controller()->save($config);
    $configs = image_style_access_config_controller()->loadMultipleByDownload('', 'public');
    $this->assertIdentical(array($config2->cid, $config->cid), array_keys($configs), 'Configurations matching image style and scheme are loaded.');
    $configs = image_style_access_config_controller()->loadMultipleByDownload('thumbnail', 'public');
    $this->assertIdentical(array($config2->cid), array_keys($configs), 'Configuration with unmatched image style is not loaded.');
    $configs = image_style_access_config_controller()->loadMultipleByDownload('', 'private');
    $this->assertIdentical(array($config2->cid), array_keys($configs), 'Configuration with unmatched scheme is not loaded.');

    // Test deleting configuration.
    image_style_access_config_controller()->delete($config->cid);
    $configs = image_style_access_config_controller()->loadMultiple();
    $this->assertIdentical(array($config2->cid), array_keys($configs), 'Configuration is deleted.');

    // Test factory creation.
    $factory = image_style_access_config_controller()->getControlFactory('user');
    $this->assertTrue($factory instanceof ImageStyleAccessUserControlFactory, 'Factory object is created from access type.');

    // Test form controller creation.
    $formController = image_style_access_config_controller()->getFormController('user');
    $this->assertTrue($formController instanceof ImageStyleAccessUserConfigFormController, 'Form controller object is created from access type.');
  }

  /**
   * Asserts valid value.
   */
  protected function assertKeyValue($expected, $actual, $key, $message = '') {
    $result = $expected === $actual;
    if ($message) {
      $this->assert($result, $message);
    }
    if (!$result) {
      $this->fail('Failed to assert expected value "' . $expected . '" for key "' . $key . '" with actual value "' . $actual . '".');
    }
    return $result;
  }

  /**
   * Tests user-based access control.
   */
  public function testUser() {
    $user = $this->createTestUser();
    $user2 = $this->createTestUser();
    $this->drupalLogin($user);
    $GLOBALS['user'] = $user;

    // Test user access check.
    $control = new ImageStyleAccessUserControl();
    $config = new ImageStyleAccessConfig(array(
      'settings' => array(
        'uid' => $user->uid,
      ),
    ));
    $this->assertTrue($control->match($config), 'Logged in user is matched.');
    $config = new ImageStyleAccessConfig(array(
      'settings' => array(
        'uid' => $user2->uid,
      ),
    ));
    $this->assertFalse($control->match($config), 'Other user is not matched.');

    // Test user role access check.
    $control = new ImageStyleAccessUserRoleControl();
    $config = new ImageStyleAccessConfig(array(
      'settings' => array(
        'roles' => drupal_map_assoc(array(DRUPAL_AUTHENTICATED_RID)),
      ),
    ));
    $this->assertTrue($control->match($config), 'Authenticated user role is matched.');
    $config = new ImageStyleAccessConfig(array(
      'settings' => array(
        'roles' => drupal_map_assoc(array(DRUPAL_ANONYMOUS_RID)),
      ),
    ));
    $this->assertFalse($control->match($config), 'Anonymous user role is not matched.');
  }

  /**
   * Tests access checker functionality.
   */
  public function testAccessChecker() {
    $checker = image_style_access_checker();

    // Match specific image style and URI.
    $configs = array(
      new ImageStyleAccessConfig(array(
        'target_base' => 'path',
        'action' => IMAGE_STYLE_ACCESS_ALLOW,
      )),
    );
    $result = $checker->checkImage($configs, '', 'public', 'path');
    $this->assertNotNull($result, 'Image is checked for matched URI target.');
    $result = $checker->checkImage($configs, '', 'public', 'path/deep');
    $this->assertNotNull($result, 'Image is checked for partially matched URI target.');
    $result = $checker->checkImage($configs, '', 'public', 'other-path');
    $this->assertNull($result, 'Image is not checked for unmatched URI target.');

    // Match any path.
    $configs = array(
      new ImageStyleAccessConfig(array(
        'target_base' => '',
        'action' => IMAGE_STYLE_ACCESS_ALLOW,
      )),
    );
    $result = $checker->checkImage($configs, '', 'public', 'random-path');
    $this->assertNotNull($result, 'Image is always checked for wildcard URI target.');

    // Match wildcard path.
    $configs = array(
      new ImageStyleAccessConfig(array(
        'target_base' => '%wildcard',
        'action' => IMAGE_STYLE_ACCESS_ALLOW,
      )),
    );
    $result = $checker->checkImage($configs, '', 'public', 'random-path');
    $this->assertNotNull($result, 'Image is checked for wildcard placeholder URI target.');

    // Match control criteria.
    $user = $this->createTestUser();
    $this->drupalLogin($user);
    $GLOBALS['user'] = $user;
    $configs = array(
      new ImageStyleAccessConfig(array(
        'target_base' => '',
        'type' => 'user',
        'settings' => array(
          'uid' => $user->uid,
        ),
        'action' => IMAGE_STYLE_ACCESS_ALLOW,
      )),
    );
    $result = $checker->checkImage($configs, '', 'public', 'random-path');
    $this->assertNotNull($result, 'Image is checked for matching control criteria.');

    // Test path context access control with node access.
    $user = $this->drupalCreateUser(array('access content'));
    $this->drupalLogin($user);
    $GLOBALS['user'] = $user;
    $configs = array(
      new ImageStyleAccessConfig(array(
        'target_base' => 'path/deep/%node/',
        'type' => 'path',
        'settings' => array(
          'contexts' => array(
            'node' => array(
              'keyword' => 'node',
              'id' => 2,
              'name' => 'entity_id:node',
              'identifier' => 'node',
            ),
          ),
          'access' => array(
            'name' => 'node_access',
            'settings' => array('type' => 'view'),
            'context' => array('logged-in-user', 'argument_entity_id:node'),
            'not' => FALSE,
          ),
        ),
        'action' => IMAGE_STYLE_ACCESS_ALLOW,
      )),
    );
    $node = $this->drupalCreateNode();
    $path = 'path/deep/' . $node->nid . '/test.png';
    $result = $checker->checkImage($configs, '', 'public', $path);
    $this->assertNotNull($result, 'Image is checked for matching path context control criteria.');
    $path = 'path/deep/0/test.png';
    $result = $checker->checkImage($configs, '', 'public', $path);
    $this->assertNull($result, 'Image is not checked for invalid path contexts.');
  }

  /**
   * Tests menu access.
   */
  public function testMenuAccess() {
    // Prepare access configurations.
    $controller = image_style_access_config_controller();
    // Deny access to large image style.
    $controller->save($config = new ImageStyleAccessConfig(array(
      'style' => 'large',
      'action' => IMAGE_STYLE_ACCESS_DENY,
    )));
    // Deny private anonymous access to images.
    $controller->save($config = new ImageStyleAccessConfig(array(
      'scheme' => 'private',
      'type' => 'user_role',
      'settings' => array('roles' => drupal_map_assoc(array(DRUPAL_ANONYMOUS_RID))),
      'action' => IMAGE_STYLE_ACCESS_DENY,
    )));
    // Allow private anonymous access to images under folder.
    $controller->save($config = new ImageStyleAccessConfig(array(
      'scheme' => 'private',
      'target_base' => 'open',
      'type' => 'user_role',
      'settings' => array('roles' => drupal_map_assoc(array(DRUPAL_ANONYMOUS_RID))),
      'action' => IMAGE_STYLE_ACCESS_ALLOW,
    )));
    // Allow private authenticated access to original images.
    $controller->save($config = new ImageStyleAccessConfig(array(
      'scheme' => 'private',
      'style' => '',
      'type' => 'user_role',
      'settings' => array('roles' => drupal_map_assoc(array(DRUPAL_AUTHENTICATED_RID))),
      'action' => IMAGE_STYLE_ACCESS_ALLOW,
    )));
    // Allow access to thumbnail image style.
    $controller->save($config = new ImageStyleAccessConfig(array(
      'style' => 'thumbnail',
      'action' => IMAGE_STYLE_ACCESS_ALLOW,
      'priority' => 1,
    )));

    // Prepare image files.
    $images = $this->drupalGetTestFiles('image');
    $image = $images[0];
    $public_image = $image->uri;
    $private_image = 'private://' . $image->filename;
    file_unmanaged_copy($public_image, $private_image);
    $private_open_image = 'private://open/' . $image->filename;
    file_prepare_directory($directory = 'private://open', FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
    file_unmanaged_copy($public_image, $private_open_image);

    // Test denying public derivative.
    $url = image_style_url('large', $public_image);
    $this->drupalGet($url);
    $this->assertResponse(403, 'Access to large derivative of public image is denied.');

    // Test denying private original image.
    $url = file_create_url($private_image);
    $this->drupalGet($url);
    $this->assertResponse(403, 'Access to private image is denied.');

    // Test denying private derivative.
    $url = image_style_url('medium', $private_image);
    $this->drupalGet($url);
    $this->assertResponse(403, 'Access to medium derivative of private image is denied.');

    // Test allowing private derivative.
    $url = image_style_url('thumbnail', $private_image);
    $this->drupalGet($url);
    $this->assertResponse(200, 'Access to thumbnail derivative of private image is allowed.');

    // Test allowing private open image.
    $url = file_create_url($private_open_image);
    $this->drupalGet($url);
    $this->assertResponse(200, 'Access to private image under open folder is allowed.');

    // Test allowing authenticated access to private image style.
    $user = $this->createTestUser();
    $this->drupalLogin($user);
    $url = file_create_url($private_image);
    $this->drupalGet($url);
    $this->assertResponse(200, 'Access to private image is allowed for an authenticated user.');
  }
}
