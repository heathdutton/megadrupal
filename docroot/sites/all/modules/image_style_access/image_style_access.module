<?php
/**
 * @file
 * Image style access control module.
 */

/**
 * Action to allow access to an image.
 */
define('IMAGE_STYLE_ACCESS_ALLOW', 'allow');

/**
 * Action to deny access to an image.
 */
define('IMAGE_STYLE_ACCESS_DENY', 'deny');

/**
 * Implements hook_permission().
 */
function image_style_access_permission() {
  return array(
    'administer image style access' => array(
      'title' => t('Administer image style access'),
      'description' => t('Configure access control to image derivatives.'),
      'restrict access' => TRUE,
    ),
    'bypass image style access' => array(
      'title' => t('Bypass image style access'),
      'description' => t('Bypass access control configuration for image derivatives.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_menu().
 */
function image_style_access_menu() {
  $items['admin/config/media/image-styles/access'] = array(
    'title' => 'Access control',
    'description' => 'Control access to image derivatives.',
    'page callback' => 'image_style_access_overview',
    'access arguments' => array('administer image style access'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
    'file' => 'image_style_access.admin.inc',
  );
  $items['admin/config/media/image-styles/access/overview'] = array(
    'title' => 'Overview',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -5,
  );
  $items['admin/config/media/image-styles/access/add'] = array(
    'title' => 'Add access configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('image_style_access_config_add_form', 'admin/config/media/image-styles/access'),
    'access arguments' => array('administer image style access'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'image_style_access.admin.inc',
  );
  $items['admin/config/media/image-styles/access/add/%image_style_access_type'] = array(
    'title' => 'Add access configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('image_style_access_config_add_form', 'admin/config/media/image-styles/access', 6),
    'access arguments' => array('administer image style access'),
    'type' => MENU_CALLBACK,
    'file' => 'image_style_access.admin.inc',
  );
  $items['admin/config/media/image-styles/access/edit/%image_style_access_config'] = array(
    'title' => 'Edit access configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('image_style_access_config_form', 6),
    'access arguments' => array('administer image style access'),
    'type' => MENU_CALLBACK,
    'file' => 'image_style_access.admin.inc',
  );
  $items['admin/config/media/image-styles/access/delete/%image_style_access_config'] = array(
    'title' => 'Delete access configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('image_style_access_config_delete_form', 6),
    'access arguments' => array('administer image style access'),
    'type' => MENU_CALLBACK,
    'file' => 'image_style_access.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function image_style_access_menu_alter(&$items) {
  // Get stream wrappers to override image style access callbacks for.
  $wrappers = image_style_access_list_accessible_sources();

  // Override public style access callback.
  $directory_path = file_stream_wrapper_get_instance_by_scheme('public')->getDirectoryPath();
  $style_path = "$directory_path/styles/%image_style";
  $path_parts_count = count(explode('/', $directory_path));
  $access_arguments = array($path_parts_count + 1, $path_parts_count + 2, (string) ($path_parts_count + 3));
  if (isset($items[$style_path])) {
    $items[$style_path]['access callback'] = 'image_style_access_check_style';
    $items[$style_path]['access arguments'] = $access_arguments;
  }
  foreach (array_keys($wrappers) as $scheme) {
    $scheme_style_path = "$style_path/$scheme";
    if (isset($items[$scheme_style_path])) {
      $items[$scheme_style_path]['access callback'] = 'image_style_access_check_style';
      $items[$scheme_style_path]['access arguments'] = $access_arguments;
    }
  }

  // Override private style access callbacks.
  $style_path = 'system/files/styles/%image_style';
  $access_arguments = array(3, 4, '5');
  if (isset($items[$style_path])) {
    $items[$style_path]['access callback'] = 'image_style_access_check_style';
    $items[$style_path]['access arguments'] = $access_arguments;
  }
  foreach (array_keys($wrappers) as $scheme) {
    $scheme_style_path = "$style_path/$scheme";
    if (isset($items[$scheme_style_path])) {
      $items[$scheme_style_path]['access callback'] = 'image_style_access_check_style';
      $items[$scheme_style_path]['access arguments'] = $access_arguments;
    }
  }
}

/**
 * Returns a list of accessible stream wrappers.
 */
function image_style_access_list_accessible_sources() {
  return file_get_stream_wrappers(STREAM_WRAPPERS_LOCAL | STREAM_WRAPPERS_READ | STREAM_WRAPPERS_VISIBLE);
}

/**
 * Retrieves a list of defined access control types.
 */
function image_style_access_get_type_info($reset = FALSE) {
  $type_info = &drupal_static(__FUNCTION__);

  // Load if not set.
  if (!isset($type_info) || $reset) {
    // Retrieve from cache.
    if (!$reset && $cache = cache_get('image_style_access_type_info')) {
      $type_info = $cache->data;
    }
    // Rebuild cache.
    else {
      $type_info = array();
      foreach (module_implements('image_style_access_type_info') as $module) {
        if ($result = module_invoke($module, 'image_style_access_type_info')) {
          foreach ($result as $type => $info) {
            $info += array(
              'form controller class' => 'ImageStyleAccessConfigFormController',
            );
            $type_info[$type] = $info;
          }
        }
      }
      drupal_alter('image_style_access_type_info', $type_info);
      cache_set('image_style_access_type_info', $type_info);
    }
  }

  return $type_info;
}

/**
 * Menu loader for type name.
 */
function image_style_access_type_load($name) {
  $type_info = image_style_access_get_type_info();
  return isset($type_info[$name]) ? $name : NULL;
}

/**
 * Implements hook_image_style_access_type_info().
 */
function image_style_access_image_style_access_type_info() {
  return array(
    'default' => array(
      'label' => t('Default'),
      'description' => t('Match image style and location with no additional controls.'),
      'factory class' => 'ImageStyleAccessDefaultControlFactory',
    ),
    'user' => array(
      'label' => t('User'),
      'description' => t('Control access by specific user.'),
      'factory class' => 'ImageStyleAccessUserControlFactory',
      'form controller class' => 'ImageStyleAccessUserConfigFormController',
    ),
    'user_role' => array(
      'label' => t('User role'),
      'description' => t('Control access by role of the user accessing the image.'),
      'factory class' => 'ImageStyleAccessUserRoleControlFactory',
      'form controller class' => 'ImageStyleAccessUserRoleConfigFormController',
    ),
  );
}

/**
 * Returns an instance of image style access configuration controller.
 *
 * @return ImageStyleAccessConfigController
 */
function image_style_access_config_controller() {
  $instance = &drupal_static(__FUNCTION__);
  if (!isset($instance)) {
    $instance = new ImageStyleAccessConfigController();
  }
  return $instance;
}

/**
 * Loader for an access configuration object.
 */
function image_style_access_config_load($cid) {
  return image_style_access_config_controller()->load($cid);
}

/**
 * Clears cached data.
 */
function image_style_access_clear_cache() {
  cache_clear_all('image_style_access_type_info', 'cache');
  cache_clear_all('image_style_access_download:', 'cache', TRUE);
  drupal_static_reset('image_style_access_get_type_info');
  drupal_static_reset('image_style_access_get_configs_by_download');
  drupal_static_reset('image_style_access_check_image');
}

/**
 * Basic access callback to track requested style name.
 */
function image_style_access_check_style($style, $scheme, $target_start = '0') {
  // Track style name.
  $style = is_array($style) ? $style['name'] : $style;
  image_style_access_set_style($style);

  // Derive image URI and evaluate access.
  $uri = $scheme . '://' . implode('/', array_slice(arg(), (int) $target_start));
  if (image_get_info($uri)) {
    $result = image_style_access_check_image($style, $uri);
    // Allow access.
    if ($result == IMAGE_STYLE_ACCESS_ALLOW) {
      return TRUE;
    }
    // Deny access.
    elseif ($result == IMAGE_STYLE_ACCESS_DENY) {
      return FALSE;
    }
  }

  // Emulate default core access behavior by default.
  return TRUE;
}

/**
 * Implements hook_file_download().
 */
function image_style_access_file_download($uri) {
  // Check image URI.
  if ($info = image_get_info($uri)) {
    // Process an image derivative URI.
    $path = file_uri_target($uri);
    if (strpos($path, 'styles/') === 0) {
      $args = explode('/', $path);
      // Discard the first part of the path (styles).
      array_shift($args);
      // Get the style name from the second part.
      $style = array_shift($args);
      // Remove the scheme from the path.
      array_shift($args);

      // Then the remaining parts are the path to the image.
      $uri = file_uri_scheme($uri) . '://' . implode('/', $args);
    }
    // Determine image style to check access for.
    else {
      $style = image_style_access_get_style();
      if (!is_string($style)) {
        // Check as original image by default.
        $style = '';
      }
    }

    // Evaluate access.
    $result = image_style_access_check_image($style, $uri);

    // Allow access. Another module implementing hook_file_download() may still
    // deny access to this image.
    if ($result == IMAGE_STYLE_ACCESS_ALLOW) {
      // Return file headers to allow access.
      return array(
        'Content-Type' => $info['mime_type'],
        'Content-Length' => $info['file_size'],
      );
    }
    // Deny access.
    elseif ($result == IMAGE_STYLE_ACCESS_DENY) {
      return -1;
    }
  }

  // Ignore this module by default.
  return NULL;
}

/**
 * Checks access to download an image.
 */
function image_style_access_check_image($style, $uri) {
  $results = &drupal_static(__FUNCTION__, array());
  $key = "$style:$uri";

  // Bypass access check.
  if (user_access('bypass image style access')) {
    return NULL;
  }

  // Evaluate access once, since checking a private image will run in both
  // menu access callback and hook_file_download().
  if (!array_key_exists($key, $results)) {
    $scheme = file_uri_scheme($uri);
    $target = file_uri_target($uri);
    $configs = image_style_access_get_configs_by_download($style, $scheme);
    $results[$key] = image_style_access_checker()->checkImage($configs, $style, $scheme, $target);
  }

  return $results[$key];
}

/**
 * Gets an array of configs for a download.
 */
function image_style_access_get_configs_by_download($style, $scheme) {
  $configs = &drupal_static(__FUNCTION__);
  $key = "image_style_access_download:$style:$scheme";

  if (!isset($configs[$key])) {
    // Get cached configs by download.
    if ($cache = cache_get($key)) {
      $configs[$key] = $cache->data;
    }
    // Load configs by download.
    else {
      $configs[$key] = image_style_access_config_controller()->loadMultipleByDownload($style, $scheme);
      cache_set($key, $configs[$key]);
    }
  }

  return $configs[$key];
}

/**
 * Returns an instance of access checker.
 * @return ImageStyleAccessChecker
 */
function image_style_access_checker() {
  $instance = &drupal_static(__FUNCTION__);
  if (!isset($instance)) {
    $class = variable_get('image_style_access_checker_class', 'ImageStyleAccessChecker');
    $instance = new $class();
  }
  return $instance;
}

/**
 * Sets the image style to check access to.
 *
 * Warning: only call this function on a page where the image is the only thing
 * being accessed, or this may leak normally secured private images.
 */
function image_style_access_set_style($style_name) {
  $style = &drupal_static(__FUNCTION__);
  $style = $style_name;
}

/**
 * Gets the image style to check access to.
 *
 * @return
 *   Image style name, or NULL for original image.
 */
function image_style_access_get_style() {
  // Explicit check as original image by default.
  return drupal_static('image_style_access_set_style', NULL);
}

/**
 * Implements hook_theme().
 */
function image_style_access_theme() {
  return array(
    'image_style_access_overview_table' => array(
      'render element' => 'element',
      'file' => 'image_style_access.admin.inc',
    ),
    'image_style_access_config_add_list' => array(
      'render element' => 'element',
      'file' => 'image_style_access.admin.inc',
    ),
  );
}

/**
 * Implements hook_element_info().
 */
function image_style_access_element_info() {
  return array(
    'image_style_access_overview' => array(
      '#theme' => 'image_style_access_overview_table',
      '#process' => array('image_style_access_overview_process'),
      '#header' => array(),
      '#empty' => NULL,
    ),
  );
}

/**
 * Processes an overview table before rendering.
 */
function image_style_access_overview_process($element) {
  // Fill in missing overview table headers.
  $header = $element['#header'];
  foreach (element_children($element) as $child) {
    foreach (element_children($element[$child]) as $column) {
      // Add missing columns to end.
      if (!isset($header[$column])) {
        $header[$column] = '';
      }
    }
  }
  $element['#header'] = $header;

  return $element;
}
