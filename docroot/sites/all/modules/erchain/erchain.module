<?php

/**
 * @file
 * Hook implementations and API functions for Entityreference chain module.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 */
function erchain_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id) {
  // Only allow erchain_parent selection on fields configured to use the
  // multiple_selects widget.
  if ($form['#instance']['widget']['module'] != 'multiple_selects') {
    return;
  }

  $form['instance']['erchain_parent'] = array(
    '#type' => 'fieldset',
    '#title' => t('Entityreference chain parent field'),
    // Add stable wrapper ID.
    '#prefix' => '<div id="erchain-parent-wrapper">',
    '#suffix' => '</div>',
  );

  $ajax = array(
    '#ajax' => array(
      'callback' => 'erchain_field_ui_field_edit_form_ajax_callback',
      'wrapper' => 'erchain-parent-wrapper',
      'effect' => 'fade',
    ),
  );

  $entity_type_options = array();
  $entity_type_info = entity_get_info();
  foreach ($entity_type_info as $entity_type => $entity_info) {
    $entity_type_options[$entity_type] = $entity_info['label'];
  }
  $form['instance']['erchain_parent']['entity_type'] = array(
    '#type' => 'select',
    '#title' => t('Entity type'),
    '#options' => $entity_type_options,
    '#default_value' => isset($form['#instance']['erchain_parent']['entity_type']) ? $form['#instance']['erchain_parent']['entity_type'] : '',
    '#description' => t('The Entityreference chain parent field entity type.'),
    '#empty_option' => t('- None -'),
  ) + $ajax;

  // Display of bundle is determined by entity type select - both the stored and
  // active selection values:
  // - Until change, the bundle select should display only if an entity type
  //   value is stored.
  // - On change, the bundle select should display only if entity type selection
  //   is not 'none' (should show/hide depending on this).
  // @todo Is there a simpler way to set this display criteria?
  $entity_type_selected = isset($form_state['input']['instance']['erchain_parent']['entity_type']);
  $entity_type_stored = isset($form['#instance']['erchain_parent']['entity_type']) && !empty($form['#instance']['erchain_parent']['entity_type']);
  $entity_type_selection = $entity_type_selected ? $form_state['input']['instance']['erchain_parent']['entity_type'] :
    ($entity_type_stored ? $form['#instance']['erchain_parent']['entity_type'] : '');

  if ($entity_type_selection) {
    $form['instance']['erchain_parent']['erchain_direction'] = array(
      '#type' => 'select',
      '#title' => t('Entityreference direction'),
      '#options' => array(
        'referencing' => t('Referencing'),
        // @todo Uncomment this option once 'referenced' is supported in
        //   erchain_filter_element_options().
        #'referenced' => t('Referenced'),
      ),
      '#default_value' => isset($form['#instance']['erchain_parent']['erchain_direction']) ? $form['#instance']['erchain_parent']['erchain_direction'] : '',
      '#description' => t('The Entityreference chain reference direction.'
        . '"Referencing" limits to entities referencing the parent selection.'
        . '"Referenced" limits to entities referenced by the parent.'),
    );

    $bundles = $entity_type_info[$entity_type_selection]['bundles'];
    $bundle_options = array();
    foreach ($bundles as $bundle => $bundle_info) {
      $bundle_options[$bundle] = $bundle_info['label'];
    }
    $form['instance']['erchain_parent']['bundle'] = array(
      '#type' => 'select',
      '#title' => t('Bundle'),
      '#options' => $bundle_options,
      '#default_value' => isset($form['#instance']['erchain_parent']['bundle']) ? $form['#instance']['erchain_parent']['bundle'] : '',
      '#description' => t('The Entityreference chain parent field bundle.'),
      '#empty_option' => t('- None -'),
      '#required' => TRUE,
    ) + $ajax;
  }

  // Display of field is determined by bundle select - both stored and active
  // values. Follows same logic as bundle element display above, with the
  // additional criteria that it should also hide when entity type is 'none'.
  $bundle_selected = isset($form_state['input']['instance']['erchain_parent']['bundle']);
  $bundle_stored = isset($form['#instance']['erchain_parent']['bundle']) && !empty($form['#instance']['erchain_parent']['bundle']);
  $bundle_selection = $bundle_selected ? $form_state['input']['instance']['erchain_parent']['bundle'] :
    ($bundle_stored ? $form['#instance']['erchain_parent']['bundle'] : '');

  if ($entity_type_selection && $bundle_selection) {
    $instances = field_info_instances($entity_type_selection, $bundle_selection);
    $field_options = array();
    foreach ($instances as $instance => $instance_info) {
      // Limit to only Entityreference fields.
      $field_info = field_info_field($instance_info['field_name']);
      if ($field_info['module'] == 'entityreference') {
        $field_options[$instance] = $instance_info['label'];
      }
    }
    $form['instance']['erchain_parent']['field_name'] = array(
      '#type' => 'select',
      '#title' => t('Field'),
      '#options' => $field_options,
      '#default_value' => isset($form['#instance']['erchain_parent']['field_name']) ? $form['#instance']['erchain_parent']['field_name'] : '',
      '#description' => t('The Entityreference chain parent field.'),
      '#empty_option' => t('- None -'),
      '#required' => TRUE,
    );
  }
}

/**
 * Ajax callback for field_ui_field_edit_form().
 */
function erchain_field_ui_field_edit_form_ajax_callback($form, $form_state) {
  // Find the parent element.
  $form_state['rebuild'] = TRUE;
  $parents = $form_state['triggering_element']['#array_parents'];
  array_pop($parents);
  $element = drupal_array_get_nested_value($form, $parents);

  return $element;
}

/**
 * Helper function to check if a field instance has erchain parents.
 *
 * @param array $instance
 *   A field instance.
 *
 * @return bool
 *   Whether or not the instance has erchain parents.
 */
function erchain_has_parents($instance) {
  return isset($instance['erchain_parent'])
    // @todo Ensure empty keys are not saved on the field instance, so we don't
    //   have to check these explicitly.
    && !empty($instance['erchain_parent']['entity_type'])
    && !empty($instance['erchain_parent']['bundle'])
    && !empty($instance['erchain_parent']['field_name']);
}

 /**
 * Gets a chain of Entityreference parent instances.
 *
 * @param array $instance
 *   A field instance array.
 * @param array $parents_instances
 *   Internal. An array of parent field instance arrays.
 *
 * @return array
 *   An array of field instance data arrays, representing a chain of configured
 *   entityreference fields from highest to lowest parent.
 *
 */
function erchain_get_parent_instances($instance, &$parents_instances = array()) {
  if (erchain_has_parents($instance)) {
    extract($instance['erchain_parent']);
    $parent_instance = field_info_instance($entity_type, $field_name, $bundle);

    // Set a direction on these faux elements for our query.
    // @todo Add erchain_direction configuration once we support
    //   'referencing'. For now set this option explicitly.
    $parent_instance['erchain_direction'] = isset($instance['erchain_parent']['erchain_direction']) ? $instance['erchain_parent']['erchain_direction'] : 'referenced';

    // We add a key so that in hook_field_widget_WIDGET_TYPE_form_alter() we can
    // identify this parent instance is added by erchain. We need that because
    // we load faux parents using the Field API, which also triggers that hook,
    // and we only want to run that on the real Entity reference instance.
    $parent_instance['erchain_faux_element'] = TRUE;

    array_unshift($parents_instances, $parent_instance);
    erchain_get_parent_instances($parent_instance, $parents_instances);
  }

  return $parents_instances;
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 *
 * @todo Support parent multiple cardinality (Unsupported operand types error).
 */
function erchain_field_widget_multiple_selects_form_alter(&$element, &$form_state, $context) {
  // Check if the element is configured to have an erchain parent.
  // Note, that since we load parent elements using the Field API, this function
  // will also run for each of those.
  if (erchain_has_parents($context['instance'])
    // Only run on the actual Entity reference element, not our faux-attached
    // parents (which also call this hook). The reason is, on parent elements
    // we'll only have that current element to alter, rather than the actual
    // Entity reference element anymore. So we need to only act only on the
    // actual Entity reference element, and loop over each item in the chain of
    // parents.
    && !isset($context['instance']['erchain_faux_element'])) {

    // Get the chain of Entityreference parent instances.
    $parents_instances = erchain_get_parent_instances($context['instance']);

    // Add stable wrapper ID to only the actual Entityreference.
    // @todo make inline class configurable. For now, we want it.
    $element['#prefix'] = '<div class="container-inline" id="erchain-parent-wrapper-' . $context['delta'] . '">';
    $element['#suffix'] = '</div>';

    // Get the current, stored element reference.
    // @todo Use field's language instead of LANGUAGE_NONE.
    if (!empty($context['form']['#entity']->{$element['#field_name']}[LANGUAGE_NONE][$context['delta']]['target_id'])) {
      $target_type = $context['field']['settings']['target_type'];
      $id = $context['form']['#entity']->{$element['#field_name']}[LANGUAGE_NONE][$context['delta']]['target_id'];
      $element_reference = entity_load_single($target_type, $id);
      $faux_defaults = erchain_get_parent_element_default_values($parents_instances, $element_reference);
    }

    $weight = 0;
    foreach ($parents_instances as $parent_instance) {
      // Get the parent element.
      $parent_element = erchain_get_element($parent_instance);
      $parent_element += array(
        '#ajax' => array(
          'callback' => 'erchain_field_ui_field_edit_form_ajax_callback',
          'wrapper' => 'erchain-parent-wrapper-' . $context['delta'],
          'effect' => 'fade',
        ),
        '#weight' => $weight + 1,
      );
      $weight++;

      $parent_id = implode('__', array($parent_element['#entity_type'], $parent_element['#bundle'], $parent_element['#field_name']));

      // Set faux default value, based on the stored real element value, if any.
      if (isset($faux_defaults[$parent_id])) {
        $parent_element['#default_value'] = $faux_defaults[$parent_id];
      }

      // Check access for, and filter options on, the parent - based on it's
      // grandparent status and value.
      if (isset($grandparent_instance)) {
        $grandparent_id = implode('__', array($grandparent_instance['entity_type'], $grandparent_instance['bundle'], $grandparent_instance['field_name']));
        $grandparent_element = $element[$grandparent_id];
        // Temporarily stash the ER erchain_direction on the element for the
        // query to filter the options properly.
        $grandparent_element['#erchain_direction'] = $grandparent_instance['erchain_direction'];
        erchain_element_access($grandparent_element, $parent_element);
      }

      // AJAX trigger.
      if (isset($form_state['triggering_element'])) {
        // The parents array represents the element parents in the form. We
        // reverse before listing because we only care about several of these,
        // starting from the last.
        $parents = $form_state['triggering_element']['#parents'];
        list($triggering_element_id, $delta, $language) = array_reverse($parents);
        $triggered_value = $form_state['triggering_element']['#value'];

        // Override default value on AJAX trigger.
        $element[$triggering_element_id]['#default_value'] = $triggered_value;

        // We need to default value based on form_state value now, because we're
        // basing access on default value in erchain_element_access().
        $values = $form_state['values'][$element['#field_name']][LANGUAGE_NONE][$context['delta']];
        // Get value regardless of widget. See erchain_get_element().
        $value = isset($values[$parent_id][0]['target_id']) ? $values[$parent_id][0]['target_id'] : $values[$parent_id];
        $parent_element['#default_value'] = in_array($value, array_keys($parent_element['#options'])) ? $value : NULL;
      }

      // Add the parent field to the existing element.
      $element[$parent_id] = $parent_element;

      // Stash this as the next parent's parent element (for now so we can get
      // the instance settings, like direction).
      $grandparent_instance = $parent_instance;
    }

    // Alter real element after parents.

    // Add a title to the target_id element itself.
    $element['target_id']['#title'] = $context['instance']['label'];

    // Ensure the real element is heavier than it's parents.
    $element['target_id']['#weight'] = $weight + 1;

    // Check access for, and filter options on, the real element - based on it's
    // parent status and value. Also temporarily stash the ER erchain_direction
    // on the element for the query to filter the options properly.
    $parent_element['#erchain_direction'] = $parent_instance['erchain_direction'];
    erchain_element_access($parent_element, $element['target_id']);

    // Ajax trigger.
    if (isset($form_state['triggering_element'])) {
      // Temporary fix for visible $element['_weight'] field after AJAX
      // trigger on entity forms.
      // @todo Debug this more thoroughly. So far:
      //   - '_weight' added in field_multiple_value_form(), just before
      //     invocation of hook_field_widget_WIDGET_TYPE_form_alter()
      //   - Later should be unset in _field_sort_items()
      // For now, just hide it.
      $element['_weight']['#attributes']['class'][] = 'js-hide';
    }
  }
}

/**
 * Gets erchain faux parent element default values.
 *
 * @param $parents_instances
 *   The return value from erchain_get_parent_instances().
 * @param $element_reference
 *   The real Entity reference element's referenced Entity.
 *
 * @return array
 *   An array of parent element default values, keyed by parent ID.
 */
function erchain_get_parent_element_default_values($parents_instances, $element_reference) {
  // Load each default, then compare these instances (loaded in reverse) to the
  // current parent instance from params.
  $faux_defaults = array();
  foreach (array_reverse($parents_instances) as $parent_instance) {
    $parent_id = implode('__', array($parent_instance['entity_type'], $parent_instance['bundle'], $parent_instance['field_name']));

    // Grab the first values if there are multiple.
    if (isset($element_reference->{$parent_instance['field_name']})) {
      $first = reset($element_reference->{$parent_instance['field_name']}[LANGUAGE_NONE]);
      $faux_defaults[$parent_id] = $first['target_id'];

      // Set up next value. This happens - in reverse - until the the top
      // chained parent.
      $field = field_info_field($parent_instance['field_name']);
      $target_type = $field['settings']['target_type'];
      $id = $first['target_id'];
      $element_reference = entity_load_single($target_type, $id);
    }
  }
  return $faux_defaults;
}

/**
 * Sets access or required status on an element.
 *
 * @param array $parent_element
 *   By reference. A parent element whose access will be set.
 * @param array $element
 *   By reference. An element whose options will be filtered, and whose required
 *   status will be set.
 */
function erchain_element_access(&$parent_element, &$element) {
  // Check access on the parent element.
  $parent_empty_option = $parent_element['#default_value'] == '_none';
  $parent_empty_value = empty($parent_element['#default_value']);
  $parent_access = isset($parent_element['#access']) ? $parent_element['#access'] : TRUE;
  // Unless either of these two conditions are met, the parent element
  // '#default_value' will be empty.
  if ($parent_empty_option || $parent_empty_value || !$parent_access) {
    // If there is no parent selection stored or AJAX triggered, or if the
    // value is _none, or if the parent access is FALSE, hide the current
    // element and ensure it does not store a value.
    $element['#value'] = '_none';
    $element['#access'] = FALSE;
  }
  else {
    // Filter child options based on parent selection.
    erchain_filter_element_options($parent_element, $element);

    // If parent is selected, we want to make child selection required. See
    // form_process_select(). Also fixes issue where a required
    // multiple_selects field looses the empty option on form cache such as
    // entity preview.
    $element['#required'] = TRUE;
    $element['#empty_value'] = '';
    $element['#empty_option'] = t('- Select -');
    if (isset($element['#options']['_none'])) {
      unset($element['#options']['_none']);
    }
  }
}

/**
 * Filters Season Entityreference options by selected show.
 *
 * @param array $triggering
 *   The trigering element array. In addition to the normal element data,
 *   there are also two more keys:
 *   - #erchain_direction: The configured reference direction
 *   - #default_value: The selected value
 * @param array $element
 *   By reference. The triggered element array whose options will be filtered.
 */
function erchain_filter_element_options($triggering, &$element) {
  // Get default field values.
  list($entity_type, $bundle, $field_name, $erchain_direction, $selected) = array($triggering['#entity_type'], $triggering['#bundle'], $triggering['#field_name'], $triggering['#erchain_direction'], $triggering['#default_value']);

  $ids = array();
  switch ($erchain_direction) {
    case 'referencing':
      // @todo limit query by the entity types / bundles which contain ER fields
      //   who's settings allow referencing the selected entity type / bundle.
      $query = new EntityFieldQuery();
      $query->fieldCondition($field_name, 'target_id', $selected, '=')
        // Run the query as user 1.
        ->addMetaData('account', user_load(1));
      $result = $query->execute();
      if (isset($result[$entity_type])) {
        $ids = array_keys($result[$entity_type]);
      }
      break;
    case 'referenced':
      // @todo Seems like a useful option for future.
      break;
  }

  // Reduce from existing options, which already pass access checks.
  foreach (array_keys($element['#options']) as $key) {
    if ($key != '_none' && !in_array($key, $ids)) {
      unset($element['#options'][$key]);
    }
  }
}

/**
 * Gets faux form element(s).
 *
 * @param array $instance
 *   A field instance array.
 *
 * @return array
 *   An unattached (faux) parent element in the select chain.
 *
 * @see field_ui_default_value_widget()
 */
function erchain_get_element($instance) {
  $field = field_info_field($instance['field_name']);

  // Shortcut so we can just re-use field_ui_default_value_widget().
  $form = array();
  $form_state = array();
  module_load_include('inc', 'field_ui', 'field_ui.admin');
  $element = field_ui_default_value_widget($field, $instance, $form, $form_state);

  // Return just the element itself, without the wrapping default form markup.
  // Only return the first delta in a multi-delta field, because this will only
  // be used for selection not storage.
  $value_key = key($field['columns']);
  // The multiple_selects module always returns an array, regardless of
  // cardinality. But if a parent field uses another widget, it may not.
  // @todo Is there a more generic way to get this, regardless of widget?
  if (isset($element[$instance['field_name']][LANGUAGE_NONE][0][$value_key])) {
    return $element[$instance['field_name']][LANGUAGE_NONE][0][$value_key];
  }
  else {
    return $element[$instance['field_name']][LANGUAGE_NONE];
  }
}
