<?php

/**
 * @file
 * Adds a translate own content permission.
 */

/**
 * Implements hook_permission().
 */
function translation_own_nodes_permission() {
  return array(
    'translate own content' => array(
      'title' => t('Translate own content'),
    ),
  );
}

/**
 * Implements hook_menu_alter().
 */
function translation_own_nodes_menu_alter(&$items) {
  // Use our own access callback so that we can check the 'translate own
  // content' permission.
  $items['node/%node/translate']['access callback'] = '_translation_own_nodes_tab_access';
}

/**
 * Menu access callback.
 *
 * Extends access users with access ('translate content' and 'translate own
 * content').
 */
function _translation_own_nodes_tab_access($node) {
  if ($node->language != LANGUAGE_NONE && translation_supported_type($node->type) && node_access('view', $node)) {
   return translation_own_nodes_user_can_translate_node($node);
  }
  return FALSE;
}

/**
 * Checks if the user has permission to translate a node.
 *
 * @param stdclass $node
 *   Node being checked.
 * @param stdclass|null $account
 *   (optional) User object to check translation permissions or NULL.
 *
 * @return bool
 *   TRUE if the user can translate a node, FALSE otherwise.
 */
function translation_own_nodes_user_can_translate_node($node, $account = NULL) {
  // If no user object is supplied, the access check is for the current user.
  if (empty($account)) {
    $account = $GLOBALS['user'];
  }
  return node_access('view', $node, $account) && (user_access('translate content', $account) || ($node->uid == $account->uid && user_access('translate own content', $account)));
}

/**
 * Implements hook_node_access().
 */
function translation_own_nodes_node_access($node, $op, $account) {
  $request_has_translation_arg = isset($_GET['translation']) && isset($_GET['target']) && is_numeric($_GET['translation']);
  if ($op == 'create' && $request_has_translation_arg) {
    $source_node = node_load($_GET['translation']);
    if (empty($source_node) || !translation_own_nodes_user_can_translate_node($source_node, $account)){
      return NODE_ACCESS_DENY;
    }
  }

  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for node_form().
 *
 * Alters language fields on node edit forms when a translation is about to be
 * created.
 *
 * @see node_form().
 */
function translation_own_nodes_form_node_form_alter(&$form, &$form_state) {
  if (translation_supported_type($form['#node']->type)) {
    global $user;
    $node = $form['#node'];
    if (empty($node->translation_source) && !empty($node->nid) && !empty($node->tnid)) {
      $form['translation']['#access'] = user_access('translate content') || ($node->uid == $user->uid && user_access('translate own content'));
    }
  }
}

/**
 * Implements hook_node_prepare().
 */
function translation_own_nodes_node_prepare($node) {
  global $user;
  // Only act if we are dealing with a content type supporting translations.
  if (translation_supported_type($node->type) &&
    // And it's a new node.
    empty($node->nid) &&
    // And the user has permission to translate own content.
    ($node->uid == $user->uid && user_access('translate own content')) &&
    // And the $_GET variables are set properly.
    isset($_GET['translation']) &&
    isset($_GET['target']) &&
    is_numeric($_GET['translation'])) {

    $source_node = node_load($_GET['translation']);
    if (empty($source_node) || !node_access('view', $source_node)) {
      // Source node not found or no access to view. We should not check
      // for edit access, since the translator might not have permissions
      // to edit the source node but should still be able to translate.
      return;
    }

    $language_list = language_list();
    $langcode = $_GET['target'];
    if (!isset($language_list[$langcode]) || ($source_node->language == $langcode)) {
      // If not supported language, or same language as source node, break.
      return;
    }

    // Ensure we don't have an existing translation in this language.
    if (!empty($source_node->tnid)) {
      $translations = translation_node_get_translations($source_node->tnid);
      if (isset($translations[$langcode])) {
        drupal_set_message(t('A translation of %title in %language already exists, a new %type will be created instead of a translation.', array('%title' => $source_node->title, '%language' => $language_list[$langcode]->name, '%type' => $node->type)), 'error');
        return;
      }
    }

    // Populate fields based on source node.
    $node->language = $langcode;
    $node->translation_source = $source_node;
    $node->title = $source_node->title;

    // Add field translations and let other modules module add custom translated
    // fields.
    field_attach_prepare_translation('node', $node, $node->language, $source_node, $source_node->language);
  }
}
