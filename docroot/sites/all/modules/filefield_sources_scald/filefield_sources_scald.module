<?php

/**
 * @file
 * Allows drag and drop between Scald and Drupal file or image fields.
 */

/*******************************************************************************
 * Hooks.
 ******************************************************************************/

/**
 * Implements hook_filefield_sources_info().
 */
function filefield_sources_scald_filefield_sources_info() {

  // Make sure the user has permission to use the sidebar. This is useless without the sidebar.
  if (!user_access('access scald dnd library')) {
    return array();
  }

  $source = array();
  $source['scald'] = array(
    'name' => t('Scald File'),
    'label' => t('Scald File'),
    'description' => t('Link to a file tied to a Scald atom.'),
    'process' => 'filefield_source_scald_process',
    'value' => 'filefield_source_scald_value',
    'weight' => -2,
  );
  return $source;
}

/**
 * Implements hook_theme().
 */
function filefield_sources_scald_theme() {
  return array(
    'filefield_source_scald_element' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function filefield_sources_scald_form_alter(&$form, &$form_state, $form_id) {

  // We only care about node edit forms.
  if (!isset($form['#node_edit_form']) || !($form['#node_edit_form'])) {
    return;
  }

  // Does our form have any of our fields? If so, attach library and exit.
  foreach ($form as $field_name => $element) {
    if ($field_name = filefield_sources_scald_is_our_field($field_name, $form_state['node']->type)) {
      $form[$field_name]['#attached'] = array('library' => array(array('dnd', 'library')));
      return;
    }
  }
}

/*******************************************************************************
 * Callbacks.
 ******************************************************************************/

/**
 * A #process callback to extend the filefield_widget element type.
 */
function filefield_source_scald_process($element, &$form_state, $form) {

  $element['filefield_scald'] = array(
    '#weight' => 101,
    '#theme' => 'filefield_source_scald_element',
    '#filefield_source' => TRUE, // Required for proper theming.
    '#filefield_sources_hint_text' => t('Drag a Scald atom here.'),
  );

  $path = drupal_get_path('module', 'filefield_sources_scald');
  $element['#attached']['js'][] = $path . '/filefield_sources_scald.js';

  $element['filefield_scald']['url'] = array(
    '#type' => 'textfield',
    '#maxlength' => NULL,
  );

  $element['filefield_scald']['select'] = array(
    '#name' => implode('_', $element['#array_parents']) . '_select',
    '#type' => 'submit',
    '#value' => t('Attach'),
    '#validate' => array(),
    '#submit' => array('filefield_sources_field_submit'),
    '#limit_validation_errors' => array($element['#parents']),
    '#ajax' => array(
      'path' => 'file/ajax/' . implode('/', $element['#array_parents']) . '/' . $form['form_build_id']['#value'],
      'wrapper' => $element['upload_button']['#ajax']['wrapper'],
      'effect' => 'fade',
      'method' => 'replace',
    ),
    '#suffix' => '<div class="description">' . t('Drag or double-click a thumbnail or click Insert to add an item from the library.') . '</div>',
  );

  if ($alt = _filefield_source_scald_get_alt_title_if_present($element)) {
    $element['#value']['alt'] = $alt;
  }

  return $element;
}

/**
 * Helper function to read 'alt' field of scald image thumbnail if present.
 */
function _filefield_source_scald_get_alt_title_if_present($element, $language = NULL) {

  if (isset($element['#default_value']['filefield_scald'])) {
    $item = $element['#default_value'];
    $sid = filefield_sources_scald_id($item);
    if ($sid) {
      $atom = scald_atom_load($sid);

      global $language ;
      $lng = $language->language ;

      $thumbnail = isset($atom->scald_thumbnail[$lng]) ? $atom->scald_thumbnail[$lng] : NULL;
      if($thumbnail == NULL ) {
        $thumbnail = isset($atom->scald_thumbnail[LANGUAGE_NONE]) ? $atom->scald_thumbnail[LANGUAGE_NONE] : NULL;
      }

      if(!empty($thumbnail) && isset($thumbnail[0]['alt'])) {
        $alt = $thumbnail[0]['alt'];
        return $alt;
      }
    }
  }
  return FALSE;
}

/**
 * A #filefield_value callback function.
 */
function filefield_source_scald_value($element, &$item) {

  // Do we have a Scald id?
  if ($sid = filefield_sources_scald_id($item)) {

    // If we have a file, we pass it back to the form.
    $file = filefield_sources_scald_file($sid);

    if (isset($file->uri) && filefield_sources_element_validate($element, (object) $file)) {
      $item = array_merge($item, (array) $file);
    }

    // We could not load our file object.
    else {
      drupal_set_message(t('Error adding Scald file.'), 'error', FALSE);
    }
  }
}

/*******************************************************************************
 * Theme.
 ******************************************************************************/

/**
 * Theme the output of the text field.
 *
 * @param array $variables
 * @return string
 */
function theme_filefield_source_scald_element($variables) {
  $element = $variables['element'];
  $element['url']['#field_suffix'] = drupal_render($element['select']);
  return '<div class="filefield-source filefield-source-scald clear-block">' . drupal_render($element['url']) . '</div>';
}

/*******************************************************************************
 * Helpers.
 ******************************************************************************/

/**
 * Extracts the Scald id, or returns FALSE if this is not a Scald atom with a file.
 *
 * @param string $text
 * @return Either int or FALSE
 */
function filefield_sources_scald_id($item) {

  if (!filefield_sources_scald_is_potentially_valid_input($item)) {
    return FALSE;
  }

  $text = $item['filefield_scald']['url'];
  $prefix_length = 7;
  $colon_position = strpos($text, ':');
  return substr($text, $prefix_length, $colon_position - $prefix_length);
}

/**
 * Tests to see if the input is (1) set and (potentially) a Scald atom.
 * Should come like this: [scald=##:more-text], with the id (##) between
 *  the prefix ([scald=) and the colon. We need both a prefix and colon.
 *
 * @param array $item
 * @return bool
 */
function filefield_sources_scald_is_potentially_valid_input($item) {
  if (!isset($item['filefield_scald']['url'])) {
    return FALSE;
  }
  $text = $item['filefield_scald']['url'];
  return strpos($text, ':') && substr($text, 0, 7) == '[scald=';
}

/**
 * Returns either a Drupal stdClass file object, or FALSE.
 *
 * @param int $sid -- The Scald ID.
 * @return Either stdClass or FALSE.
 */
function filefield_sources_scald_file($sid) {
  $atom = scald_atom_load($sid);

  if (isset($atom->base_entity->fid)) {
    return file_load($atom->base_entity->fid);
  }

  elseif (isset($atom->data['audio_id'])) {
    return file_load($atom->data['audio_id']);
  }
  elseif (isset($atom->data['video_id'])) {
    return file_load($atom->data['video_id']);
  }

  return FALSE;
}

/**
 * Checks to see if a (potential) field is enabled with our module.
 *
 * @param string $field_name
 * @return string (field name).
 */
function filefield_sources_scald_is_our_field($field_name, $node_type) {

  // We only care about actual fields.
  if (filefield_sources_scald_is_field($field_name)) {

    // Field. Is it configured to work with our module?
    $field = field_info_instance('node', $field_name, $node_type);
    if (filefield_sources_scald_is_scald_field($field)) {
      return $field_name;
    }
  }

  // Not even a field.
  else {
    return FALSE;
  }
}

/**
 * Checks to see if this field is enabled for our scald drag and drop.
 *
 * @param array $field - The result of field_info_instance().
 * @return bool
 */
function filefield_sources_scald_is_scald_field($field) {
  return isset($field['widget']['settings']['filefield_sources']['filefield_sources']['scald']) &&
  $field['widget']['settings']['filefield_sources']['filefield_sources']['scald'] == 'scald';
}

/**
 * Checks to see if an element of entity is a field.
 *
 * @param string $possible_field_name
 * @return bool
 */
function filefield_sources_scald_is_field($possible_field_name) {
  return substr($possible_field_name, 0, 6) == 'field_';
}
