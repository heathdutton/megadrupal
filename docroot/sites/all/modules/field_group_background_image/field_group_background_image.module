<?php
/**
 * @file
 * Field Group Background Image module.
 *
 * Defines a field group display formatter that consists in a div with a
 * background.
 */

/**
 * Implements hook_field_group_formatter_info().
 *
 * Define the field group 'Div (with background)'.
 */
function field_group_background_image_field_group_formatter_info() {
  return array(
    'display' => array(
      'div_background_image' => array(
        'label' => t('Div (with background)'),
        'format_types' => array('open'),
        'instance_settings' => array(
          'classes' => '',
          'show_label' => '',
          'background_image' => '',
          'image_style' => '',
          'background_color' => '',
        ),
        'default_formatter' => 'open',
      ),
    ),
  );
}

/**
 * Implements hook_field_group_formatter_settings().
 *
 * Provide a settings form for the field group formatter.
 */
function field_group_background_image_field_group_format_settings($group) {

  if ($group->format_type == 'div_background_image') {

    $settings = $group->format_settings['instance_settings'];

    $form['instance_settings']['show_label'] = array(
      '#title' => t('Show label'),
      '#type' => 'select',
      '#options' => array(0 => t('No'), 1 => t('Yes')),
      '#default_value' => isset($settings['show_label']) ? $settings['show_label'] : 0,
      '#weight' => 2,
    );

    $form['instance_settings']['label_element'] = array(
      '#title' => t('Label element'),
      '#type' => 'select',
      '#options' => array('h2' => t('Header 2'), 'h3' => t('Header 3')),
      '#default_value' => isset($settings['label_element']) ? $settings['label_element'] : 'h2',
      '#weight' => 3,
    );

    $options_image = array();
    $options_color = array();
    $fields = field_info_instances($group->entity_type, $group->bundle);
    foreach ($fields as $field_name => $field) {
      $field_info = field_info_field($field_name);
      if ($field_info['type'] == 'image') {
        $options_image[$field_name] = $field['label'];
      }
      elseif ($field_info['type'] == 'jquery_colorpicker'
        || $field_info['type'] == 'colorfield'
        || $field_info['type'] == 'color_field_rgb') {
        $options_color[$field_name] = $field['label'];
      }
    }

    if (module_exists('image')) {
      $form['instance_settings']['background_image'] = array(
        '#title' => t('Background: Image field'),
        '#type' => 'select',
        '#options' => $options_image,
        '#default_value' => isset($settings['background_image']) ? $settings['background_image'] : '',
        '#empty_option' => t('None'),
        '#weight' => 20,
      );
      $image_styles = image_style_options(FALSE, PASS_THROUGH);
      $form['instance_settings']['image_style'] = array(
        '#title' => t('Background: Image style'),
        '#type' => 'select',
        '#options' => $image_styles,
        '#default_value' => isset($settings['image_style']) ? $settings['image_style'] : '',
        '#empty_option' => t('None (original image)'),
        '#weight' => 21,
      );
    }

    if ($options_color) {

      $form['instance_settings']['background_color'] = array(
        '#title' => t('Background: Color field'),
        '#type' => 'select',
        '#options' => $options_color,
        '#default_value' => isset($settings['background_color']) ? $settings['background_color'] : '',
        '#empty_option' => t('None'),
        '#weight' => 22,
      );
    }

    return $form;
  }
}

/**
 * Implements hook_field_group_pre_render().
 *
 * Render the field group.
 */
function field_group_background_image_field_group_pre_render(&$element, $group, &$form) {
  if ($group->format_type == 'div_background_image') {

    // Get the entity key from the entity type.
    $entity_key = '#' . $form['#entity_type'];

    if (!isset($form[$entity_key])) {

      // Some entity types store the key in an arbitrary name.
      // Check for the ones that we know of.
      switch ($form['#entity_type']) {
        case 'taxonomy_term':
          $entity_key = '#term';
          break;

        case 'user':
          $entity_key = '#account';
          break;

        // Otherwise just search for #entity.
        // The Bean module is one known to use this.
        default:
          $entity_key = '#entity';
      }
    }

    if (isset($form[$entity_key]) && is_object($form[$entity_key])) {

      $entity = $form[$entity_key];
      $settings = $group->format_settings['instance_settings'];
      $image_url = '';
      $background_color = '';

      if (!empty($settings['background_image'])) {

        $field_name = $settings['background_image'];
        if (isset($entity->{$field_name})) {

          $field = field_get_items($group->entity_type, $entity, $field_name);
          if ($field && !empty($field[0]['fid'])) {

            $file = file_load($field[0]['fid']);
            if ($file) {
              if (!empty($settings['image_style'])) {
                $image_url = image_style_url($settings['image_style'], $file->uri);
              }
              else {
                $image_url = file_create_url($file->uri);
              }
            }
          }
        }
      }

      if (!empty($settings['background_color'])) {
        $field_name = $settings['background_color'];
        if (isset($entity->{$field_name})) {

          $field = field_get_items($group->entity_type, $entity, $field_name);
          if ($field) {
            if (!empty($field[0]['jquery_colorpicker'])) {

              // Jquery Colorpicker module.
              $background_color = '#' . $field[0]['jquery_colorpicker'];
            }
            elseif (!empty($field[0]['rgb'])) {

              // Colorfield & Color Field module.
              $background_color = $field[0]['rgb'];
            }
          }
        }
      }

      $element['#type'] = 'markup';

      $attributes['style'] = '';
      if ($image_url) {
        $attributes['style'] .= "background-image: url('$image_url');";
      }
      if ($background_color) {
        $attributes['style'] .= "background-color: $background_color;";
      }
      if (!empty($settings['classes'])) {
        $attributes['class'] = $settings['classes'];
      }

      $element['#prefix'] = '<div' . drupal_attributes($attributes) . '>';
      $element['#suffix'] = '</div>';

      if (!empty($settings['show_label'])) {
        $label_element = isset($settings['label_element']) ? $settings['label_element'] : 'h2';
        $element['#prefix'] .= '<' . $label_element . '><span>' . check_plain(t($group->label)) . '</span></' . $label_element . '>';
      }

      if (!empty($group->description)) {
        $element['#prefix'] .= '<div class="description">' . $group->description . '</div>';
      }
    }
  }
}
