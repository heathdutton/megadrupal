<?php
/**
 * @file
 * Code for the media_event.
 */

/**
 * Implements hook_entity_info().
 */
function media_event_entity_info() {
  $return = array('media_event' => array(
      'label' => t('Media Event'),
      'entity class' => 'MediaEvent',
      'controller class' => 'MediaEventController',
      'base table' => 'media_event',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'media_event_id',
        'title' => 'title',
      ),
      // Attach bundles - i.e. alternative configurations of fields associated with a main entity.
      'bundles' => array('media_event' => array(
          'label' => 'Media Event',
          // Information below is used by the Field UI - they "attach" themselves here and lets us
          // do the standard field management that all the core entities enjoy.
          'admin' => array(
            'path' => 'admin/structure/media-event/manage',
            'access arguments' => array('administer media_event'),
          ),
        ), ),
      'load hook' => 'media_event_load',
      'view modes' => array('full' => array(
          'label' => t('Default'),
          'custom settings' => FALSE,
        ), ),
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
      'module' => 'media_event',
      'access callback' => 'media_event_access',
    ), );

  return $return;
}

/**
 * Implements hook_menu().
 */
function media_event_menu() {
  $items = array();

  $items['media-event/add'] = array(
    'title' => 'Add media event',
    'page callback' => 'media_event_add',
    'access arguments' => array('create media_event entities'),
  );

  $media_event_uri = 'media-event/%media_event';
  $media_event_uri_argument_position = 1;

  $items[$media_event_uri] = array(
    'title callback' => 'entity_label',
    'title arguments' => array(
      'media_event',
      $media_event_uri_argument_position
    ),
    'page callback' => 'media_event_view',
    'page arguments' => array($media_event_uri_argument_position),
    'access callback' => 'entity_access',
    'access arguments' => array(
      'view',
      'media_event',
      $media_event_uri_argument_position
    ),
    'file' => 'media_event.pages.inc',
  );

  $items[$media_event_uri . '/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items[$media_event_uri . '/delete'] = array(
    'title' => 'Delete media event',
    'title callback' => 'media_event_label',
    'title arguments' => array($media_event_uri_argument_position),
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'media_event_delete_form',
      $media_event_uri_argument_position
    ),
    'access callback' => 'entity_access',
    'access arguments' => array(
      'edit',
      'media_event',
      $media_event_uri_argument_position
    ),
    'file' => 'media_event.admin.inc',
  );

  $items[$media_event_uri . '/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'media_event_form',
      $media_event_uri_argument_position
    ),
    'access callback' => 'entity_access',
    'access arguments' => array(
      'edit',
      'media_event',
      $media_event_uri_argument_position
    ),
    'file' => 'media_event.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  $items['admin/content/media-events'] = array(
    'title' => 'Media Events',
    'description' => 'Manage Media Events',
    'page callback' => 'media_event_content',
    'access arguments' => array('administer media_event'),
    'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
  );

  // This provides a place for Field API to hang its own
  // interface and has to be the same as what was defined
  // in media_event_entity_info() above.
  $items['admin/structure/media-event/manage'] = array(
    'title' => 'Media Events',
    'description' => 'Manage Media Event Entity Structure',
    'page callback' => 'media_event_admin_page',
    'access arguments' => array('administer media_event'),
    'weight' => -50,
  );

  $items['admin/content/media-events/copy'] = array(
    'title' => 'Copy media events',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_event_copy_form'),
    'access arguments' => array('administer media_event'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'media_event.pages.inc',
  );
  $items['admin/content/media-events/offset'] = array(
    'title' => 'Offset media events',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_event_offset_form'),
    'access arguments' => array('administer media_event'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'media_event.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function media_event_permission() {
  $permissions = array(
    'administer media_event' => array(
      'title' => t('Administer media events'),
      'description' => t('Allows users to configure media events fields.'),
      'restrict access' => TRUE,
    ),
    'create media_event entities' => array(
      'title' => t('Create media Events'),
      'description' => t('Allows users to create media events.'),
      'restrict access' => TRUE,
    ),
    'view media_event entities' => array(
      'title' => t('View media events'),
      'description' => t('Allows users to view media events.'),
      'restrict access' => TRUE,
    ),
    'edit any media_event entities' => array(
      'title' => t('Edit any media events'),
      'description' => t('Allows users to edit any media events.'),
      'restrict access' => TRUE,
    ),
    'edit own media_event entities' => array(
      'title' => t('Edit own media events'),
      'description' => t('Allows users to edit own media events.'),
      'restrict access' => TRUE,
    ),
  );

  return $permissions;
}

/**
 * Implements hook_entity_property_info_alter().
 */
function media_event_entity_property_info_alter(&$info) {
  $properties = &$info['media_event']['properties'];
  $properties['created'] = array(
    'label' => t("Date created"),
    'type' => 'date',
    'description' => t("The date the node was posted."),
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer media_event',
    'schema field' => 'created',
  );
  $properties['changed'] = array(
    'label' => t("Date changed"),
    'type' => 'date',
    'schema field' => 'changed',
    'description' => t("The date the node was most recently updated."),
  );
  $properties['uid'] = array(
    'label' => t("Author"),
    'type' => 'user',
    'description' => t("The author of the media events."),
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer media_event',
    'required' => TRUE,
    'schema field' => 'uid',
  );
}

/*******************************************************************************
 ********************************* Media Event API's **********************************
 ******************************************************************************/

/**
 * Access callback for media event.
 */
function media_event_access($op, $media_event, $account = NULL, $entity_type = NULL) {

  global $user;

  if (!isset($account)) {
    $account = $user;
  }

  switch ($op) {
    case 'create' :
      return user_access('administer media_event', $account) || user_access('create media_event entities', $account);
    case 'view' :
      return user_access('administer media_event', $account) || user_access('view media_event entities', $account);
    case 'update' :
    case 'edit' :
      return user_access('administer media_event') || user_access('edit any media_event entities') || (user_access('edit own media_event entities') && ($media_event->uid == $account->uid));
    case 'delete' :
      return user_access('administer media_event');
  }
}

/**
 * Load a media event.
 */
function media_event_load($media_event_id, $reset = FALSE) {
  $media_events = media_event_load_multiple(array($media_event_id), array(), $reset);
  return reset($media_events);
}

/**
 * Load multiple media events based on certain conditions.
 */
function media_event_load_multiple($media_event_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('media_event', $media_event_ids, $conditions, $reset);
}

/**
 * Save media event.
 */
function media_event_save($media_event) {
  entity_save('media_event', $media_event);
}

/**
 * Delete single media event.
 */
function media_event_delete($media_event) {
  entity_delete('media_event', entity_id('media_event', $media_event));
}

/**
 * Delete multiple media event.
 */
function media_event_delete_multiple($media_event_ids) {
  entity_delete_multiple('media_event', $media_event_ids);
}

/**
 * Implements hook_views_api().
 */
function media_event_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'media_event'),
  );
}

/**
 * Media Event Form.
 */
function media_event_form($form, &$form_state, $media_event) {

  //dsm($media_event);

  $form_state['media_event'] = $media_event;

  $form['uid'] = array(
    '#type' => 'value',
    '#value' => $media_event->uid,
  );

  field_attach_form('media_event', $media_event, $form, $form_state);

  $submit = array();
  if (!empty($form['#submit'])) {
    $submit += $form['#submit'];
  }

  $form['actions'] = array('#weight' => 100, );

  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save media event'),
    '#submit' => $submit + array('media_event_form_submit'),
  );

  // Show Delete button if we edit media event.
  $media_event_id = entity_id('media_event', $media_event);
  if (!empty($media_event_id) && media_event_access('edit', $media_event)) {
    $form['actions']['delete'] = array(
      '#type' => 'submit',
      '#value' => t('Delete'),
      '#submit' => array('media_event_form_submit_delete'),
    );
  }

  $form['#validate'][] = 'media_event_form_validate';

  return $form;
}

function media_event_form_validate($form, &$form_state) {

}

/**
 * Media event submit handler.
 */
function media_event_form_submit($form, &$form_state) {
  $media_event = $form_state['media_event'];

  entity_form_submit_build_entity('media_event', $media_event, $form, $form_state);

  media_event_save($media_event);

  $media_event_uri = entity_uri('media_event', $media_event);

  $form_state['redirect'] = $media_event_uri['path'];

  drupal_set_message(t('Media Event %title saved.', array('%title' => entity_label('media_event', $media_event))));
}

function media_event_form_submit_delete($form, &$form_state) {
  $media_event = $form_state['media_event'];
  $media_event_uri = entity_uri('media_event', $media_event);
  $form_state['redirect'] = $media_event_uri['path'] . '/delete';
}

/**
 * Delete confirmation form.
 */
function media_event_delete_form($form, &$form_state, $media_event) {
  $form_state['media_event'] = $media_event;
  // Always provide entity id in the same form key as in the entity edit form.
  $form['media_event_type_id'] = array(
    '#type' => 'value',
    '#value' => entity_id('media_event', $media_event)
  );
  $media_event_uri = entity_uri('media_event', $media_event);
  return confirm_form($form, t('Are you sure you want to delete media event %title?', array('%title' => entity_label('media_event', $media_event))), $media_event_uri['path'], t('This action cannot be undone.'), t('Delete'), t('Cancel'));
}

/**
 * Delete form submit handler.
 */
function media_event_delete_form_submit($form, &$form_state) {
  $media_event = $form_state['media_event'];
  media_event_delete($media_event);

  drupal_set_message(t('Media event %title deleted.', array('%title' => entity_label('media_event', $media_event))));

  $form_state['redirect'] = '<front>';
}

/**
 * Provide view of media events that appears as a content tab like comments
 */
function media_event_content() {

  $output = '<ul class="action-links">';
  $output .= '<li>' . l('Add Media Event', 'media-event/add') . '</li>';
  $output .= '<li>' . l('Copy Media Events', 'admin/content/media-events/copy') . '</li>';
  $output .= '<li>' . l('Offset Media Events', 'admin/content/media-events/offset') . '</li>';
  $output .= '</ul>';

  $view = views_get_view('media_events');
  $args = array();
  $output .= $view->execute_display('default', $args);

  return $output;
}

/**
 * Just provide some media events info for the entity administration page.
 * This can be expanded to add more information / a list of all created entites, etc.
 */
function media_event_admin_page() {

  // Not sure why we'd need an admin landing page, so I'm redirectin to field

  drupal_goto('admin/structure/media-event/manage/fields');
}

/**
 * Creates an media event entity for us - simply intializing the main variables and
 * sending us to a form to add in the rest.
 */
function media_event_add() {

  $media_event = entity_create('media_event', array('type' => 'media_event'));

  return drupal_get_form('media_event_form', $media_event);
}

/**
 * Implementing the uri callback defined
 */
function media_event_uri($media_event) {
  return array('path' => 'media-event/' . $media_event->media_event_id, );
}

function media_events_copy($from_fid, $to_fid) {
  $query = db_select('field_data_field_media_event_media_ref', 'f');
  $query->condition('f.field_media_event_media_ref_target_id', $from_fid);
  $query->fields('f', array('entity_id'));

  $result = $query->execute();
  $eids = $result->fetchCol();
  $count = 0;
  if (count($eids) > 0) {
    $events = entity_load('media_event', $eids);
    foreach ($events as $event) {
      $newevent = clone $event;
      unset($newevent->media_event_id);
      $newevent->field_media_event_media_ref[LANGUAGE_NONE][0]['target_id'] = $to_fid;
      $newevent->save();
      $count++;
    }
  }
  return $count;
}
