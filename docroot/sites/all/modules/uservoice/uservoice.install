<?php

/**
 * @file
 * Install and related hooks for uservoice module.
 */


/**
 * Implements hook_requirements().
 */
function uservoice_requirements($phase) {
  $requirements = array();

  // Ensure translations don't break during installation.
  $t = get_t();

  // Check for subdomain and SSO key.
  $subdomain = variable_get('uservoice_subdomain', '');
  $sso = variable_get('uservoice_sso_key', '');
  if (empty($subdomain) || empty($sso)) {
    global $base_url;
    $description = $t('Please visit the <a href="@uservoice_admin_path">UserVoice admin page</a> to set your UserVoice subdomain and sso key.', array('@uservoice_admin_path' => $base_url . '/' . USERVOICE_ADMIN_PATH));
    $value = $t('Subdomain or SSO key not set');
    $severity = ($phase == 'runtime' ? REQUIREMENT_ERROR : REQUIREMENT_WARNING);
  }
  else {
    $description = $t('Uservoice subdomain and SSO key have been set.');
    $severity = REQUIREMENT_OK;
    $value = $t('Okay');
  }
  $requirements['uservoice'] = array(
    'title' => $t('UserVoice'),
    'value' => $value,
    'description' => $description,
    'severity' => $severity,
  );

  return $requirements;
}

/**
 * Implements hook_schema().
 */
function uservoice_schema() {

  // Table to save uservoice webhooks.
  $schema['uservoice_webhook'] = array(
    'description' => "Stores received webhook data from uservoice.",
    'fields' => array(
      'wid' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique serial ID.',
      ),
      'event' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Event type of this webhook as defined by UserVoice.',
      ),
      'data' => array(
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => FALSE,
        'description' => 'Complete webhook data (json encoded).',
      ),
      'uid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'UID associated with this event (e.g. user who created the ticket).',
      ),
      'mail' => array(
        'type' => 'varchar',
        'length' => 254,
        'not null' => FALSE,
        'default' => '',
        'description' => 'Email address associated with this event (e.g. user who created the ticket).',
      ),
      'timestamp' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The unix timestamp when this webhook was received.',
      ),
    ),
    'indexes' => array(
      'event_uid' => array('event', 'uid'),
      'uid_event' => array('uid', 'event'),
      'timestamp' => array('timestamp'),
    ),
    'primary key' => array('wid'),
    'foreign keys' => array(
      'user_id' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
    ),
  );

  // Define cache_uservoice_script schema based on system cache schema.
  $cache_table = drupal_get_schema_unprocessed('system', 'cache');
  $cache_table['description'] = 'Cache table for uservoice script data.';
  $schema['cache_uservoice_script'] = $cache_table;

  return $schema;
}

/**
 * Implements hook_uninstall().
 */
function uservoice_uninstall() {
  // Remove all UserVoice variables.
  $results = db_select('variable', 'v')
    ->fields('v', array('name'))
    ->condition('name', 'uservoice%', 'LIKE')
    ->execute();
  foreach ($results as $result) {
    variable_del($result->name);
  }
}
