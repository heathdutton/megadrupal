<?php

/**
 * @file
 * Provides deep integration with UserVoice web service.
 */

/**
 * Gadget, webhook, and admin paths.
 */
define('USERVOICE_ADMIN_PATH', 'admin/config/services/uservoice');
define('USERVOICE_WEBHOOK_PATH', 'uservoice/webhook');
define('USERVOICE_USER_PROFILE_GADGET_PATH', 'secure/uservoice/user-profile-gadget');
define('USERVOICE_ORDER_HISTORY_GADGET_PATH', 'secure/uservoice/order-history-gadget');
define('USERVOICE_SSO_REDIRECT_PATH', 'uservoice/sso-redirect');

/**
 * Default "new" widget settings.
 */
define('USERVOICE_DEFAULT_WIDGET_TYPE', 'new');
define('USERVOICE_NEW_WIDGET_DEFAULT_STARTING_EXPERIENCE', 'contact');
define('USERVOICE_NEW_WIDGET_DEFAULT_TRIGGER_POSITION', 'bottom-right');
define('USERVOICE_NEW_WIDGET_DEFAULT_ACCENT_COLOR', '#808283');
define('USERVOICE_NEW_WIDGET_DEFAULT_TRIGGER_COLOR', '#FFFFFF');
define('USERVOICE_NEW_WIDGET_DEFAULT_TRIGGER_BACKGROUND_COLOR', 'rgba(46, 49, 51, 0.6)');
define('USERVOICE_NEW_WIDGET_DEFAULT_AUTOPROMPT', '1');
define('USERVOICE_NEW_WIDGET_DEFAULT_CUSTOM_TRIGGERS', '0');

/**
 * Default "classic" widget settings.
 */
define('USERVOICE_CLASSIC_WIDGET_DEFAULT_MODE', 'full');
define('USERVOICE_CLASSIC_WIDGET_DEFAULT_TAB', 'support');
define('USERVOICE_CLASSIC_WIDGET_DEFAULT_PRIMARY_COLOR', '#cc6d00');
define('USERVOICE_CLASSIC_WIDGET_DEFAULT_LINK_COLOR', '#007cbf');
define('USERVOICE_CLASSIC_WIDGET_DEFAULT_TAB_LABEL', 'Feedback & Support');
define('USERVOICE_CLASSIC_WIDGET_DEFAULT_TAB_POSITION', 'middle-right');
define('USERVOICE_CLASSIC_WIDGET_DEFAULT_TAB_COLOR', '#cc6d00');
define('USERVOICE_CLASSIC_WIDGET_DEFAULT_TAB_INVERTED', '0');

/**
 * Other default settings. Cache time defaults to one week.
 */
define('USERVOICE_DEFAULT_CONTACT_FORM', '0');
define('USERVOICE_DEFAULT_WEBHOOKS', '0');
define('USERVOICE_DEFAULT_SCRIPT_CACHE_TIME', '604800');

/**
 * Define default path exclusion list to remove widget from admin pages,
 * @see http://drupal.org/node/34970 for more information.
 * @see googleanalytics.module
 */
define('USERVOICE_WIDGET_PAGES', "admin\nadmin/*\nbatch");

/**
 * Implements hook_menu().
 */
function uservoice_menu() {
  // Admin settings.
  $items[USERVOICE_ADMIN_PATH] = array(
    'title' => 'UserVoice',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uservoice_admin_form'),
    'access arguments' => array('administer site configuration'),
    'description' => 'Configure UserVoice settings.',
    'file' => 'uservoice.admin.inc',
  );

  $items[USERVOICE_USER_PROFILE_GADGET_PATH] = array(
    'title' => 'Uservoice User Profile Gadget',
    'page callback' => 'uservoice_user_profile_gadget',
    'access callback' => TRUE,
    'file' => 'uservoice.pages.inc',
  );

  $items[USERVOICE_ORDER_HISTORY_GADGET_PATH] = array(
    'title' => 'Uservoice Order History Gadget',
    'page callback' => 'uservoice_order_history_gadget',
    'access callback' => TRUE,
    'file' => 'uservoice.pages.inc',
  );

  $items[USERVOICE_WEBHOOK_PATH] = array(
    'title' => 'UserVoice webhooks endpoint',
    'page callback' => 'uservoice_process_webhook',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'uservoice.pages.inc',
  );

  $items[USERVOICE_SSO_REDIRECT_PATH] = array(
    'title' => 'UserVoice SSO Redirect',
    'page callback' => 'uservoice_sso_redirect',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'uservoice.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function uservoice_menu_alter(&$items) {
  // Replace site-wide contact form with uservoice widget.
  $uservoice_subdomain = variable_get('uservoice_subdomain', '');
  $javascript_api_key = variable_get('uservoice_js_api_key', '');
  $uservoice_sso_key = variable_get('uservoice_sso_key', '');
  $uservoice_contact_form = variable_get('uservoice_contact_form', USERVOICE_DEFAULT_CONTACT_FORM);
  if ($uservoice_subdomain && $javascript_api_key && $uservoice_sso_key && $uservoice_contact_form && module_exists('contact')) {
    $module_path = drupal_get_path('module', 'uservoice');
    $items['contact']['page callback'] = 'uservoice_contact_page';
    $items['contact']['file'] = 'uservoice.pages.inc';
    $items['contact']['file path'] = $module_path;
  }
}

/**
 * Implements hook_theme().
 */
function uservoice_theme() {
  return array(
    'uservoice_user_profile_gadget' => array(
      'variables' => array('email' => NULL),
      'template' => 'uservoice-user-profile-gadget',
    ),
    'uservoice_order_history_gadget' => array(
      'variables' => array('email' => NULL),
      'template' => 'uservoice-order-history-gadget',
    ),
  );
}

/**
 * Implements template_preprocess().
 *
 * Used to prepare variables for use inside the
 * uservoice-user-profile-gadget.tpl.php template file.
 *
 * @see uservoice-user-profile-gadget.tpl.php
 */
function template_preprocess_uservoice_user_profile_gadget(&$variables) {
  // Load the user account.
  $mail = $variables['mail'];
  $account = user_load_by_mail($mail);

  // Pass the user account to the template file as a variable.
  $variables['account'] = $account;

  // Set and pass gadget title.
  $site_name = variable_get('site_name', '');
  $variables['gadget_title'] = "$site_name Profile";

  // Get and pass profile fields.
  $fields = field_info_instances('user');
  foreach ($fields['user'] as $key => $value) {
    $field = field_view_field('user', $account, $key, array('label' => 'hidden'));
    if (!empty($field['#title'])) {
      $variables['user_profile_fields'][] = $field;
    }
  }
}

/**
 * Implements template_preprocess().
 *
 * Used to prepare variables for use inside the
 * uservoice-order-history-gadget.tpl.php template file.
 *
 * @see uservoice-order-history-gadget.tpl.php
 */
function template_preprocess_uservoice_order_history_gadget(&$variables) {
  // Load the user account.
  $mail = $variables['mail'];
  $account = user_load_by_mail($mail);

  // Pass the user account to the template file as a variable.
  $variables['account'] = $account;

  // Set and pass gadget title.
  $site_name = variable_get('site_name', '');
  $variables['gadget_title'] = "$site_name Order History";

  // Get and pass order history.
  $variables['orders'] = _uservoice_get_order_history($account->uid);
}

/**
 * Implements hook_flush_caches().
 */
function uservoice_flush_caches() {
  return array('cache_uservoice_script');
}

/**
 * Implements hook_user_login().
 *
 * Providessingle sign-on redirection, if appropriate.
 *
 * @see https://developer.uservoice.com/docs/single-sign-on/single-sign-on/
 */
function uservoice_user_login(&$edit, $account) {
  $redirect = _uservoice_get_sso_login_redirect();
  if ($redirect) {
    $edit['redirect'] = $redirect;
  }
}

/**
 * Implements hook_init().
 *
 * Provites single sign-on redirection, if appropriate. We need to redirect
 * here, in addition to hook_login(), in case the user is already logged into
 * our Drupal site.
 *
 * @see https://developer.uservoice.com/docs/single-sign-on/single-sign-on/
 */
function uservoice_init() {
  if (user_is_logged_in()) {
    $path = current_path();
    if ($path == 'user/login') {
      $redirect = _uservoice_get_sso_login_redirect();
      if ($redirect) {
        drupal_goto($redirect);
      }
    }
  }
}

/**
 * Implements hook_user_update().
 */
function uservoice_user_update(&$edit, $account, $category) {
  // Flush UserVoice cache for this user, since their identity info (email,
  // name, etc.) may have changed.
  $cid = $account->uid;
  cache_clear_all($cid, 'cache_uservoice_script');
}

/**
 * Implements hook_ms_products_payment().
 *
 * Part of the integration with Membership Suite (moneyscripts.net).
 */
function uservoice_ms_products_payment($account, $purchase, $plan) {
  // Flush UserVoice cache for this user since their lifetime value
  // has probably changed.
  $cid = $account->uid;
  cache_clear_all($cid, 'cache_uservoice_script');
}

/**
 * Implements hook_page_build().
 */
function uservoice_page_build(&$page) {
  // Check for UserVoice sso key and subdomain.
  $uservoice_subdomain = variable_get('uservoice_subdomain', '');
  $javascript_api_key = variable_get('uservoice_js_api_key', '');
  $uservoice_sso_key = variable_get('uservoice_sso_key', '');
  if (empty($uservoice_subdomain) || empty($uservoice_sso_key) || empty($javascript_api_key)) {
    return;
  }

  // Check if widget should be shown on this page for this user.
  if (_uservoice_widget_visible()) {
    // Include the UserVoice JavaScript SDK (only needed once on a page).
    $uservoice_sdk = uservoice_get_sdk_script();
    $options = array(
      'type' => 'inline',
      'scope' => 'footer',
      'group' => JS_DEFAULT,
      'every_page' => FALSE,
      'weight' => 0,
      'defer' => FALSE,
      'cache' => TRUE,
      'preprocess' => FALSE,
    );
    drupal_add_js($uservoice_sdk, $options);

    // Include widget script. Should not be globally cached or aggregated, as it
    // is constructed and customized per user. Note the high weight setting to
    // make sure that this script is added to the page after the SDK script.
    $widget_script = uservoice_get_widget_script();
    $options = array(
      'type' => 'inline',
      'scope' => 'footer',
      'group' => JS_DEFAULT,
      'every_page' => FALSE,
      'weight' => 100,
      'defer' => FALSE,
      'cache' => FALSE,
      'preprocess' => FALSE,
    );
    drupal_add_js($widget_script, $options);
  }
}

/**
 * Build and returns the UserVoice SDK script.
 *
 * @return string|bool
 *   The DSK script, or FALSE if javascript api key is not set.
 */
function uservoice_get_sdk_script() {
  $javascript_api_key = variable_get('uservoice_js_api_key', '');
  if (empty($javascript_api_key)) {
    return FALSE;
  }
  $uservoice_sdk = "UserVoice=window.UserVoice||[];(function(){var uv=document.createElement('script');uv.type='text/javascript';uv.async=true;uv.src='//widget.uservoice.com/$javascript_api_key.js';var s=document.getElementsByTagName('script')[0];s.parentNode.insertBefore(uv,s)})();";
  return $uservoice_sdk;
}

/**
 * Builds and returns the UserVoice widget script.
 *
 * @return string
 *   The UserVoice widget script.
 *
 * @see https://developer.uservoice.com/docs/widgets/methods/
 */
function uservoice_get_widget_script() {
  // Check drupal static cache.
  $script = &drupal_static(__FUNCTION__);

  if (!isset($script)) {
    global $user;

    // Check cache.
    $cache_lifetime = variable_get('uservoice_script_cache_time', USERVOICE_DEFAULT_SCRIPT_CACHE_TIME);
    if (!empty($cache_lifetime)) {
      $cid = $user->uid;
      $cache = cache_get($cid, 'cache_uservoice_script');
      if ($cache) {
        $script = $cache->data;
      }
    }

    // If nothing in cache (or cache is disabled), build script from scratch.
    if (!isset($script)) {
      $script = "";

      // Push single sign-on token.
      $sso_token = uservoice_get_sso_token($user);
      if ($sso_token) {
        $script .= "UserVoice.push(['setSSO', '$sso_token']);";
      }

      // Identify the user and pass traits
      // @see https://developer.uservoice.com/docs/widgets/identify/
      $script .= "UserVoice.push(['identify', {";
      if (!empty($user->uid)) {

        $identity = _uservoice_get_identity($user);
        if (!empty($identity['email']) && !empty($identity['name'])) {
          // User's email address.
          $script .= "email: '" . $identity['email'] . "',";
          // User's username.
          $script .= "name: '" . $identity['name'] . "',";

          // Unix timestamp for the date the user signed up.
          if (!empty($identity['created_at'])) {
            $script .= "created_at: " . $identity['created_at'] . ",";
          }
          // Optional: Unique id of the user (if set, this should not change).
          if (!empty($identity['id'])) {
            $script .= "id: " . $identity['id'] . ",";
          }
          // Optional: segment your users by type.
          if (!empty($identity['type'])) {
            $script .= "type: '" . $identity['type'] . "',";
          }

          // Get and push account traits (lifetime value, etc.)
          $account_traits = _uservoice_get_account_traits($user);
          $script .= "account: {";
          if (!empty($account_traits)) {
            // Optional: associate multiple users with a single account.
            if (!empty($account_traits['id'])) {
              $script .= "id: '$account_traits->order_key',";
            }
            // Account name.
            if (!empty($account_traits['name'])) {
              $script .= "name: '$account_traits->order_key',";
            }
            // Unix timestamp for the date the account was created.
            if (!empty($account_traits['created_at'])) {
              $script .= "created_at: " . $account_traits['created_at'] . ",";
            }
            // Decimal; monthly rate of the account.
            if (!empty($account_traits['monthly_rate'])) {
              $script .= "monthly_rate: " . $account_traits['monthly_rate'] . ",";
            }
            // Decimal; lifetime value of the account.
            if (!empty($account_traits['ltv'])) {
              $script .= "ltv: " . $account_traits['ltv'] . ",";
            }
            // Plan name for the account.
            if (!empty($account_traits['plan'])) {
              $script .= "plan: '" . $account_traits['plan'] . "'";
            }
          }
          $script .= "}";
        }
      }
      $script .= "}]);";

      // Determine widget type.
      $widget_type = variable_get('uservoice_widget_type', USERVOICE_DEFAULT_WIDGET_TYPE);

      // -----------------------------------------------------------------------
      // Settings for widget type = new.
      if ($widget_type == 'new') {
        // Set colors.
        $accent_color = variable_get('uservoice_new_widget_accent_color', USERVOICE_NEW_WIDGET_DEFAULT_ACCENT_COLOR);
        $trigger_color = variable_get('uservoice_new_widget_trigger_color', USERVOICE_NEW_WIDGET_DEFAULT_TRIGGER_COLOR);
        $trigger_background_color = variable_get('uservoice_new_widget_trigger_background_color', USERVOICE_NEW_WIDGET_DEFAULT_TRIGGER_BACKGROUND_COLOR);
        $script .= "UserVoice.push(['set', {
                      accent_color: '$accent_color',
                      trigger_color: '$trigger_color',
                      trigger_background_color: '$trigger_background_color'
                    }]);";

        // Default trigger.
        $mode = variable_get('uservoice_new_widget_starting_experience', USERVOICE_NEW_WIDGET_DEFAULT_STARTING_EXPERIENCE);
        $trigger_position = variable_get('uservoice_new_widget_trigger_position', USERVOICE_NEW_WIDGET_DEFAULT_TRIGGER_POSITION);
        $script .= "UserVoice.push(['addTrigger', { mode: '$mode', trigger_position: '$trigger_position' }]);";

        // Custom triggers.
        $custom_triggers = variable_get('uservoice_new_widget_custom_triggers', USERVOICE_NEW_WIDGET_DEFAULT_CUSTOM_TRIGGERS);
        if ($custom_triggers) {
          $script .= "UserVoice.push(['addTrigger', '#uservoice-contact-trigger', { mode: 'contact' }]);";
          $script .= "UserVoice.push(['addTrigger', '#uservoice-satisfaction-trigger', { mode: 'satisfaction' }]);";
          $script .= "UserVoice.push(['addTrigger', '#uservoice-smartvote-trigger', { mode: 'smartvote' }]);";
        }

        // Default feedback forum
        $default_forum = variable_get('uservoice_new_widget_default_forum', '');
        if (!empty($default_forum)) {
          $script .= "UserVoice.push(['set', {default_forum: '$default_forum'}]);";
        }

        // Autoprompt for Satisfaction and SmartVote (only displayed under
        // certain conditions).
        $autoprompt = variable_get('uservoice_new_widget_autoprompt', USERVOICE_NEW_WIDGET_DEFAULT_AUTOPROMPT);
        if ($autoprompt) {
          $script .= "UserVoice.push(['autoprompt', {}]);";
        }
      }

      // -----------------------------------------------------------------------
      // Settings for widget type = classic.
      else {
        $mode = variable_get('uservoice_classic_widget_mode', USERVOICE_CLASSIC_WIDGET_DEFAULT_MODE);
        $primary_color = variable_get('uservoice_classic_widget_primary_color', USERVOICE_CLASSIC_WIDGET_DEFAULT_PRIMARY_COLOR);
        $link_color = variable_get('uservoice_classic_widget_link_color', USERVOICE_CLASSIC_WIDGET_DEFAULT_LINK_COLOR);
        $default_mode = variable_get('uservoice_classic_widget_default_mode', USERVOICE_CLASSIC_WIDGET_DEFAULT_TAB);
        $tab_label = variable_get('uservoice_classic_widget_tab_label', USERVOICE_CLASSIC_WIDGET_DEFAULT_TAB_LABEL);
        $tab_color = variable_get('uservoice_classic_widget_tab_color', USERVOICE_CLASSIC_WIDGET_DEFAULT_TAB_COLOR);
        $tab_position = variable_get('uservoice_classic_widget_tab_position', USERVOICE_CLASSIC_WIDGET_DEFAULT_TAB_POSITION);
        $tab_inverted = variable_get('uservoice_classic_widget_tab_inverted', USERVOICE_CLASSIC_WIDGET_DEFAULT_TAB_INVERTED);
        $script .= "UserVoice.push(['showTab', 'classic_widget', {
                      mode: '$mode',
                      primary_color: '$primary_color',
                      link_color: '$link_color',
                      default_mode: '$default_mode',
                      tab_label: '$tab_label',
                      tab_color: '$tab_color',
                      tab_position: '$tab_position',
                      tab_inverted: $tab_inverted
                    }]);";
      }

      // Remove unnecessary whitespace from script.
      $script = preg_replace('/\s+/', ' ', $script);

      // Save to cache.
      if (!empty($cache_lifetime)) {
        $cache_expire = REQUEST_TIME + $cache_lifetime;
        cache_set($cid, $script, 'cache_uservoice_script', $cache_expire);
      }
    }
  }

  // Return the sript.
  return $script;
}


/**
 * Generate UserVoice single sign-on token for a given user account.
 *
 * From UserVoice.com: SSO is a feature available starting on our Enhanced Plan
 * that allows your customers to be automatically signed into UserVoice if they
 * have already logged in on your website. In essence, when someone logs into
 * your website, those credentials can be passed in the form of a token to your
 * UserVoice site. This way, if they perform an action on your UserVoice site
 * which would normally require them to submit an email address (such as
 * submitting a ticket or an idea) they won't have to sign in again (or they
 * will be redirected to your site to login once).
 *
 * @param object $account
 *   A user account object; global $user will work.
 *
 * @return string|bool
 *   Encrypted UserVoice sso token for the given user account, or FALSE if
 *   sso token could not be created.
 *
 * @see http://feedback.uservoice.com/knowledgebase/articles/81480-set-up-sso-single-sign-on
 */
function uservoice_get_sso_token($account) {
  // No SSO token for anonymous users.
  if (empty($account) || empty($account->uid)) {
    return FALSE;
  }

  // Check drupal static cache.
  $encrypted_data = &drupal_static(__FUNCTION__);

  if (!isset($encrypted_data)) {
    // Get uservoice subdomain and sso key.
    $uservoice_subdomain = variable_get('uservoice_subdomain', '');
    $sso_key = variable_get('uservoice_sso_key', '');
    if (empty($uservoice_subdomain) || empty($sso_key)) {
      return FALSE;
    }

    // Build salted hash.
    $salted = $sso_key . $uservoice_subdomain;
    $hash = hash('sha1', $salted, TRUE);
    $salted_hash = substr($hash, 0, 16);
    $iv = "OpenSSL for Ruby";

    // Get user data.
    global $base_url;
    $guid = $account->uid;
    $display_name = format_username($account);
    $email = $account->mail;
    $url = "$base_url/user/$guid";

    // Get avatar url.
    if (isset($account->picture)) {
      // Check first to see if picture is numeric fid (if account passed is
      // global $user.
      if (is_numeric($account->picture)) {
        $file = file_load($account->picture);
        if ($file) {
          $user_picture = $file->uri;
        }
      }
      // Next, check if picture is an already-loaded file object (if account
      // passed is a fully loaded user account.
      elseif (isset($account->picture->uri)) {
        $user_picture = $account->picture->uri;
      }
    }
    // If we were not able to successfully load a picture, use default.
    // @todo: let admins choose to use gravatar instead of default profile pic.
    if (empty($user_picture)) {
      $user_picture = variable_get('user_picture_default');
    }
    // One final check, to make sure we have a default picture.
    if (!empty($user_picture)) {
      $style = variable_get('user_picture_style', '');
      if ($style) {
        $avatar_url = image_style_url($style, $user_picture);
      }
      else {
        $avatar_url = file_create_url($user_picture);
      }
    }

    // Build user data array.
    // @see https://developer.uservoice.com/docs/single-sign-on/single-sign-on/
    // for list of available attributes.
    // @todo: implement 'expires' based on Drupal session expiration time?
    $user_data = array(
      "guid" => "$guid",
      "display_name" => "$display_name",
      "email" => "$email",
      "url" => "$url",
    );
    // Pass avatar if present... otherwise will fallback to UserVoice's default:
    // gravatar.
    if (!empty($avatar_url)) {
      $user_data["avatar_url"] = "$avatar_url";
    }
    // Trust admin users (necessary to allow them sso login if they are
    // UserVoice admin users).
    if (in_array('administrator', $account->roles)) {
      $user_data["trusted"] = TRUE;
    }

    // Allow other modules to alter the sso data using
    // hook_uservoice_sso_data_alter().
    // @see uservoice.api.php.
    drupal_alter('uservoice_sso_data', $user_data, $account);

    // Json encode user data.
    $data = json_encode($user_data);

    // Double XOR first block.
    for ($i = 0; $i < 16; $i++) {
      $data[$i] = $data[$i] ^ $iv[$i];
    }

    // Encrypt the data.
    $pad = 16 - (strlen($data) % 16);
    $data = $data . str_repeat(chr($pad), $pad);
    $cipher = mcrypt_module_open(MCRYPT_RIJNDAEL_128, '', 'cbc', '');
    mcrypt_generic_init($cipher, $salted_hash, $iv);
    $encrypted_data = mcrypt_generic($cipher, $data);
    mcrypt_generic_deinit($cipher);
    $encrypted_data = urlencode(base64_encode($encrypted_data));
  }

  return $encrypted_data;
}

/**
 * Build identity array for a given user. Used by the UserVoice widget script.
 *
 * @param object $account
 *   A user account object; global $user will work.
 *
 * @return array
 *   An array of UserVoice widget script identity traits.
 *
 * @see https://developer.uservoice.com/docs/widgets/identify/
 */
function _uservoice_get_identity($account) {
  // Build default identity array.
  $identity = array();
  $identity['email'] = $account->mail;
  $identity['name'] = $account->name;
  $identity['created_at'] = $account->created;
  $identity['id'] = $account->uid;
  $identity['type'] = end($account->roles);

  // Allow other modules to alter the identity array using
  // hook_uservoice_identity_alter().
  // @see uservoice.api.php.
  drupal_alter('uservoice_identity', $identity, $account);

  return $identity;
}

/**
 * Build UserVoice widget script account traits array for a given user.
 *
 * Account traits are used to track things like subscription plan,
 * monthly rate, and total lifetime value. Normally only applicable to sites
 * with monetized users
 *
 * @param object $account
 *   A user account object; global $user will work.
 *
 * @return array
 *   An array of UserVoice widget script account traits.
 *
 * @see https://developer.uservoice.com/docs/widgets/identify/
 */
function _uservoice_get_account_traits($account) {
  $account_traits = array();

  // Integrates with Membership Suite (moneyscripts.net).
  if (module_exists('ms_products')) {
    $uid = $account->uid;

    $sql = "SELECT *
            FROM {ms_products_purchases} mspp
            LEFT JOIN {ms_orders} mo
            ON mspp.oid = mo.oid
            WHERE mspp.uid = :uid
            ORDER BY mspp.start_date DESC";

    $result = db_query($sql, array(':uid' => $uid))->fetchAll();

    if ($result) {
      $first_result = $result[0];

      // Start date.
      $created_at = $first_result->start_date;

      // Monthly rate and lifetime value.
      $lifetime_value = 0;
      $monthly_rate = 0;
      foreach ($result as $r) {
        $lifetime_value += $r->total;
        if ($r->order_type == 'recurring' && $r->status == 'active') {
          $recurring_schedule = unserialize($r->recurring_schedule);
          // Going to assume that all recurring orders are monthly.
          // @todo: adjust based on $recurring_schedule['main_unit'].
          $monthly_rate += $recurring_schedule['main_amount'];
        }
      }

      // Plan.
      $plan = $first_result->sku;
      // Tack expiration status onto sku if plan has been canceled/expired.
      if ($first_result->status == 'expired' || $first_result->status == 'cancelled' || $first_result->status == 'canceled') {
        $plan = $plan . ' - ' . $first_result->status;
      }

      // Build account traits array.
      $account_traits['created_at'] = $created_at;
      $account_traits['monthly_rate'] = $monthly_rate;
      $account_traits['ltv'] = $lifetime_value;
      $account_traits['plan'] = $plan;
    }
  }

  // Allow other modules to alter the account_traits array using
  // hook_uservoice_account_traits_alter().
  // @see uservoice.api.php.
  drupal_alter('uservoice_account_traits', $account_traits, $account);

  return $account_traits;
}


/**
 * Utility function to determine if the UserVoice widget should be visible.
 *
 * Wrapper for all other visibility concerns (such as page visibility, role
 * visibility, etc.).
 *
 * @return bool
 *   TRUE or FALSE.
 */
function _uservoice_widget_visible() {
  global $user;
  return _uservoice_visibility_pages() && _uservoice_visibility_roles($user);
}

/**
 * Checks widget page visibility for the current page.
 *
 * Based on visibility setting this function returns TRUE if uservoice script
 * should be added to the current page and otherwise FALSE.
 *
 * @see googleanalytics.module
 */
function _uservoice_visibility_pages() {
  static $page_match;

  // Cache visibility result if function is called more than once.
  if (!isset($page_match)) {

    $visibility = variable_get('uservoice_widget_visibility_pages', 0);
    $setting_pages = variable_get('uservoice_widget_pages', USERVOICE_WIDGET_PAGES);

    // Match path if necessary.
    if (!empty($setting_pages)) {
      // Convert path to lowercase. This allows comparison of the same path
      // with different case. Ex: /Page, /page, /PAGE.
      $pages = drupal_strtolower($setting_pages);
      if ($visibility < 2) {
        // Convert the Drupal path to lowercase.
        $path = drupal_strtolower(drupal_get_path_alias($_GET['q']));
        // Compare the lowercase internal and lowercase path alias (if any).
        $page_match = drupal_match_path($path, $pages);
        if ($path != $_GET['q']) {
          $page_match = $page_match || drupal_match_path($_GET['q'], $pages);
        }
        // When $visibility has a value of 0, the tracking code is displayed on
        // all pages except those listed in $pages. When set to 1, it
        // is displayed only on those pages listed in $pages.
        $page_match = !($visibility xor $page_match);
      }
      elseif (module_exists('php')) {
        $page_match = php_eval($setting_pages);
      }
      else {
        $page_match = FALSE;
      }
    }
    else {
      $page_match = TRUE;
    }

  }
  return $page_match;
}

/**
 * Checks widget visibility for a given user, based on role vis settings.
 *
 * Based on visibility setting this function returns TRUE if UserVoice widget
 * should be added for the current role and otherwise FALSE.
 *
 * @see googleanalytics.module
 */
function _uservoice_visibility_roles($account) {

  $visibility = variable_get('uservoice_widget_visibility_roles', 0);
  $enabled = $visibility;
  $roles = variable_get('uservoice_widget_roles', array());

  if (array_sum($roles) > 0) {
    // One or more roles are selected.
    foreach (array_keys($account->roles) as $rid) {
      // Is the current user a member of one of these roles?
      if (isset($roles[$rid]) && $rid == $roles[$rid]) {
        // Current user is a member of a role that should be added/excluded.
        $enabled = !$visibility;
        break;
      }
    }
  }
  else {
    // No role is selected for widget, therefore should be added for all roles.
    $enabled = TRUE;
  }

  return $enabled;
}


/**
 * Get the order history for a given user.
 *
 * Depends on integrations with contributed ecommerce modules.
 * Currently integrates with:
 *   - Membership Suite (moneyscripts.net).
 *
 * @param int $uid
 *   Drupal user id for the user who's order history you wish to get.
 *
 * @return array
 *   An array of orders by the given user. Each order is an array containing:
 *   - date: order timestamp.
 *   - sku: order sku.
 *   - status: order status.
 *   - gateway: order gateway (PayPal, Authorize.net, etc.)
 *   - amount: order amount ($ value).
 *   - link: internal Drupal path for more information about the given order.
 */
function _uservoice_get_order_history($uid) {
  $orders = array();

  // Integrates with Membership Suite.
  if (module_exists('ms_products')) {
    $sql = "SELECT mso.order_key, mso.status, mso.gateway, mso.total, mso.created, mspp.sku
            FROM {ms_orders} mso
            LEFT JOIN {ms_products_purchases} mspp
            ON mso.oid = mspp.oid
            WHERE mso.uid = :uid
            ORDER BY mso.created DESC";

    $results = db_query($sql, array(':uid' => $uid), array('target' => 'slave'))->fetchAll();

    if (!empty($results)) {
      foreach ($results as $result) {
        $orders[] = array(
          'date' => $result->created,
          'sku' => $result->sku,
          'status' => $result->status,
          'gateway' => $result->gateway,
          'amount' => $result->total,
          'link' => "admin/moneyscripts/orders/view/$result->order_key",
        );
      }
    }
  }

  // Allow other modules to alter the orders array using
  // hook_uservoice_order_history_alter().
  // @see uservoice.api.php.
  drupal_alter('uservoice_order_history', $orders, $uid);

  return $orders;
}

/**
 * Get UserVoice sso login redirect url.
 *
 * If logging in from UserVoice, get the appropriate UserVoice sso login
 * redirect url, based on query parameters.
 *
 * @return string|boolean
 *   The redirect url, or FALSE if we should not redirect (user is not logging
 *   in from UserVoice).
 *
 * @see https://developer.uservoice.com/docs/single-sign-on/single-sign-on/
 */
function _uservoice_get_sso_login_redirect() {
  $redirect = FALSE;
  $parameters = drupal_get_query_parameters();
  if (isset($parameters['uv_login'])) {
    $subdomain = variable_get('uservoice_subdomain', '');
    if (!empty($subdomain)) {
      global $user;
      $protocol = empty($parameters['uv_ssl']) ? 'http' : 'https';
      $return = isset($parameters['return']) ? $parameters['return'] : '';
      $sso_token = uservoice_get_sso_token($user);
      $redirect = "$protocol://$subdomain.uservoice.com$return?sso=$sso_token";
    }
  }
  return $redirect;
}
