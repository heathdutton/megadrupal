<?php

/**
 * @file
 * Convert WYSIWYG image classes into image styles
 */

/**
 * Implements hook_filter_info().
 */
function class_style_filter_filter_info() {
  $filters['class_style_filter'] = array(
    'title' => t('Classes to Styles'),
    'description' => t('Convert image classes to styles.'),
    'process callback'  => '_class_style_filter_process',
    'default settings' => array(
      'classes' => '',
      'original_link' => TRUE,
      'add_img_class' => 'resized',
      'add_img_rel' => 'lightbox',
      'link_classes' => '',
    ),
    'settings callback' => '_class_style_filter_settings',
    'cache' => FALSE,
  );

  return $filters;
}

/**
 * Settings callback
 */
function _class_style_filter_settings($form, $form_state, $filter, $format, $defaults) {
  $settings['classes'] = array(
    '#type' => 'textarea',
    '#title' => t('Class List'),
    '#default_value' => isset($filter->settings['classes']) ? $filter->settings['classes'] : $defaults['classes'],
    '#description' => t('A list of class to style mappings. Add one entry per line in the format class=style. For example, "lb-small=lb_small" would convert images with the class "lb-small" to use image style "lb_small". You may add two styles, separated by commas. The first style will be applied to the IMG thumbnail. The second will be applied to the link wrapper, if set.'),
  );

  $settings['original_link'] = array(
    '#type' => 'checkbox',
    '#title' => t('Link to original file'),
    '#default_value' => isset($filter->settings['original_link']) ? $filter->settings['original_link'] : $defaults['original_link'],
    '#description' => t('If checked, the image will be wrapped with a link to the original file. This is useful for lightbox support.'),
  );

  $settings['add_img_class'] = array(
    '#type' => 'textfield',
    '#title' => t('Additional IMG classes'),
    '#default_value' => isset($filter->settings['add_img_class']) ? $filter->settings['add_img_class'] : $defaults['add_img_class'],
    '#description' => t('If supplied, these classes will be added to the classes already applied to the IMG tag (e.g. "resized").'),
  );

  $settings['add_img_rel'] = array(
    '#type' => 'textfield',
    '#title' => t('IMG REL tag'),
    '#default_value' => isset($filter->settings['add_img_rel']) ? $filter->settings['add_img_rel'] : $defaults['add_img_rel'],
    '#description' => t('If supplied, this REL tag will be added to the IMG tag. (e.g. "lightbox")'),
  );

  $settings['link_classes'] = array(
    '#type' => 'textfield',
    '#title' => t('Link classes'),
    '#default_value' => isset($filter->settings['link_classes']) ? $filter->settings['link_classes'] : $defaults['link_classes'],
    '#description' => t('If "Link to original file" is enabled, these classes will be applied to the A tag.'),
  );

  return $settings;
}

/**
 * Process callback.
 */
function _class_style_filter_process($text, $filter, $format) {
  $settings = $filter->settings;

  // Get a list of our expected translations.
  $translate = array();
  $classes = explode(PHP_EOL, $settings['classes']);
  foreach ($classes as $line) {
    $fields = explode('=', trim($line));
    if (sizeof($fields) == 2) {
      $translate[trim($fields[0])] = explode(',', trim($fields[1]));
    }
  }
  if (sizeof($translate) < 1) {
    return $text;
  }

  // Find all of the images in the current text.
  $count = preg_match_all('|<img(.*)/>|U', $text, $matches);
  if ($count < 1) {
    return $text;
  }

  $originals = array();
  $replacements = array();
  foreach ($matches[0] as $tag) {
    // Build the new class string.
    preg_match('|class="(.*)"|U', $tag, $class_match);
    if (sizeof($class_match) < 1) {
      continue;
    }

    $replace_classes = $class_match[0];
    $append = isset($filter->settings['add_img_class']) ? $filter->settings['add_img_class'] : '';
    $new_classes = 'class="' . $class_match[1] . ' ' . $append . '"';

    // Do any of the current classes match a target style?
    $img_style = $link_style = NULL;
    foreach (explode(' ', $class_match[1]) as $class) {
      $class = trim($class);
      if (isset($translate[$class])) {
        $img_style = $translate[$class][0];
        if (sizeof($translate[$class]) > 1) {
          $link_style = $translate[$class][1];
        }
        break;
      }
    }
    if (!$img_style) {
      continue;
    }

    // Set up the IMG SRC tag replacement. We have to jump through a hoop or two
    // because IMCE doesn't add public:// or similar URI schemes. It will be
    // using an absolute path to the file, e.g. '/f/path/to/file.jpg'. However,
    // image filters run against URIs. So we translate the SRC back to a URI
    // scheme path, style it, then translate it back.

    // First find the IMG SRC attribute
    preg_match('|src="(.*)"|U', $tag, $src_match);
    if (sizeof($src_match) < 1) {
      continue;
    }
    $replace_src = $src_match[0];
    $original_path = $src_match[1];
    $uri = class_style_filter_file_uri($original_path);

    $img_styled = image_style_url($img_style, $uri);
    $link_styled = ($link_style) ? image_style_url($link_style, $uri) : trim($original_path, '/');

    $new_src = 'src="' . $img_styled . '"';

    // Do we want to add a REL tag?
    if (!empty($settings['add_img_rel'])) {
      // TODO: We should probably check for an existing REL tag first.
      $new_classes .= ' rel="' . $settings['add_img_rel'] . '"';
    }

    $tag_from = array($replace_classes, $replace_src);
    $tag_to = array($new_classes, $new_src);

    // We will need to remove any width or height attributes on the tag.
    preg_match('|width="(.*)"|U', $tag, $width_match);
    if (sizeof($width_match) > 0) {
      $tag_from[] = $width_match[0];
      $tag_to[] = '';
    }

    preg_match('|height="(.*)"|U', $tag, $height_match);
    if (sizeof($height_match) > 0) {
      $tag_from[] = $height_match[0];
      $tag_to[] = '';
    }

    // Convert the tag.
    $new_tag = str_replace($tag_from, $tag_to, $tag);

    // Now wrap the tag in a link if necessary.
    if ($settings['original_link']) {
      $options = array('html' => TRUE);
      if (!empty($settings['link_classes'])) {
        $options['attributes']['class'] = array($settings['link_classes']);
      }
      $new_tag = l($new_tag, $link_styled, $options);
    }

    $originals[] = $tag;
    $replacements[] = $new_tag;
  }

  return str_replace($originals, $replacements, $text);
}

/**
 * Convert an absolute file path to a URI.
 */
function class_style_filter_file_uri($original) {
  // First try public://
  $prefix = '/' . variable_get('file_public_path', 'sites/default/files') . '/';
  $len = strlen($prefix);
  if (substr($original, 0, $len) == $prefix) {
    return 'public://' . substr($original, $len);
  }

  // Then private://
  $prefix = '/' . variable_get('file_private_path', '') . '/';
  $len = strlen($prefix);
  if (substr($original, 0, $len) == $prefix) {
    return 'private://' . substr($original, $len);
  }

  return $original;
}