<?php

/**
 * @file bugsnag.module
 *
 * Integrates Drupal with Bugsnag for error tracking and alerting.
 */

/**
 * Retrieves the path to the PHP library for Bugsnag.
 */
function _bugsnag_get_library_path()
{
    return DRUPAL_ROOT.'/sites/all/libraries/bugsnag/src/Bugsnag/Autoload.php';
}

/**
 * Implements hook_permission().
 */
function bugsnag_permission()
{
    return array(
    'administer bugsnag' => array(
      'title' => t('Administer Bugsnag'),
      'description' => t('Configure Bugsnag.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function bugsnag_menu()
{
    $items = array();
    $items['admin/config/development/bugsnag'] = array(
      'title' => 'Bugsnag settings',
      'description' => 'Make changes to your Bugsnag settings.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('bugsnag_admin_form'),
      'access arguments' => array('administer bugsnag'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'bugsnag.admin.inc',
    );

    return $items;
}

/**
 * Implements hook_boot().
 */
function bugsnag_boot()
{
    $apikey = trim(variable_get('bugsnag_apikey', ''));
    if (file_exists(_bugsnag_get_library_path()) && !empty($apikey)) {
        global $user;
        global $bugsnag_client;

        require_once _bugsnag_get_library_path();
        $bugsnag_client = new Bugsnag_Client(variable_get('bugsnag_apikey', ''));

        if ($user->uid) {
            $bugsnag_client->setUser(array(
              'id' => $user->uid,
              'name' => $user->name,
              'email' => $user->mail,
            ));
        }

        if ($release_stage = variable_get('bugsnag_release_stage')) {
            $bugsnag_client->setReleaseStage($release_stage);
        }

        if (variable_get('bugsnag_send_environment')) {
            $bugsnag_client->setSendEnvironment(true);
        }

        set_error_handler(array($bugsnag_client, 'errorHandler'));
        set_exception_handler(array($bugsnag_client, 'exceptionHandler'));
    }
}
