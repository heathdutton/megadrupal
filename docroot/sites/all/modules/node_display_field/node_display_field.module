<?php
/**
 * @file
 * Provides a field for specifying display mode.
 *
 * @license GPL v2 http://www.fsf.org/licensing/licenses/gpl.html
 * @author Christian Biggins christian at previousnext dot com dot au
 */

/**
 * Implements hook_field_info().
 *
 * Define our new field.
 */
function node_display_field_field_info() {
  return array(
    // We name our field as the associative name of the array.
    'node_display_field' => array(
      'label' => t('Display Field'),
      'description' => t('Overrides the display of view modes containing this field.'),
      'default_widget' => 'node_display_field_default',
      'default_formatter' => 'node_display_field_default',
    ),
  );
}

/**
 * Implements hook_field_widget_info().
 */
function node_display_field_field_widget_info() {
  return array(
    'node_display_field_default' => array(
      'label' => t('Display Field'),
      'field types' => array('node_display_field'),
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function node_display_field_field_formatter_info() {
  return array(
    'node_display_field_default' => array(
      'label' => t('Default'),
      'field types' => array('node_display_field'),
    ),
  );
}

/**
 * Implements hook_field_widget_error().
 */
function node_display_field_field_widget_error($element, $error, $form, &$form_state) {
  form_error($element, $error['message']);
}

/**
 * Implements hook_field_is_empty().
 */
function node_display_field_field_is_empty($item, $field) {
  return empty($item['node_display']);
}

/**
 * Implements hook_field_widget_form().
 */
function node_display_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  $widget = $instance['widget'];

  switch ($widget['type']) {
    case 'node_display_field_default':
      $element += array(
        '#type' => 'fieldset',
        '#collapsible' => FALSE,
      );

      $default = (!empty($items) ? $items[$delta]['node_display'] : '');

      $element['node_display'] = array(
        '#type'           => 'select',
        '#options'        => node_display_field_get_options(),
        '#title'          => t('Display Mode'),
        '#description'    => t('Overrides the display of view modes containing this field.'),
        '#default_value'  => $default,

      );

      break;
  }

  return $element;
}

/**
 * Retrieves the options for the display mode select list.
 *
 * @return Array
 *   An associative array of display mode options
 */
function node_display_field_get_options() {

  $entity_info = entity_get_info('node');
  $view_modes = $entity_info['view modes'];

  $view_options = array('' => 'Default');
  foreach ($view_modes as $machine_name => $mode) {
    // @todo: exclude view modes which contain the Display Field field?
    $view_options[$machine_name] = $mode['label'];
  }

  return $view_options;
}

/**
 * Implements hook_field_validate().
 *
 * If the display gets set to a display that this field is visible in,
 * we will get infinite loops when setting the preview.
 */
function node_display_field_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {

  $view_mode = $items[0]['node_display'];

  if (!empty($instance['display'][$view_mode]) && $instance['display'][$view_mode]['type'] != 'hidden') {
    form_set_error($field['field_name'], 'The Display Field selection cannot be set to a display which contains the Display Field.');
  }
}

/**
 * Implements hook_entity_view_mode_alter().
 *
 * Over ride the display mode if the display field is populated.
 */
function node_display_field_entity_view_mode_alter(&$view_mode, $context) {

  if ($context['entity_type'] == 'node') {
    // Get our 'node_display_field' names;
    $ndf = field_read_fields(array('type' => 'node_display_field'));
    $lang = $context['entity']->language;
    // Do we have one of those fields on this node?
    foreach ($ndf as $field_name => $field_data) {
      if (!empty($context['entity']->{$field_name})) {

        $display_mode = $context['entity']->{$field_name}[$lang][0]['node_display'];

        if (!empty($display_mode) && strtolower($display_mode) != 'default') {
          $view_mode = $display_mode;
          break;
        }

      }
    }
  }
}
