<?php
/**
 * @file
 * Module for displaying a dynamic, feed-driven blogroll.
 * This module provides block displaying latest feed items
 * from pre-set RSS/ATOM feeds with the help of simplepie parser.
 * @see http://simplepie.org
 */

function _simpleblogroll_item_has_date($url) {
  $feed = simplepie_get($url);
  $item = $feed->get_item(0);
  if ($item->get_date('U')) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Check feed for validity
 *
 * This pushes the feed (by means of its url) through SimplePie
 * and sees if an error is returned.
 *
 * @param $url
 * URL to the feed.
 * @return
 * FALSE on error, TRUE when feed valid or empty.
 * @see _simpleblogroll_get_error()
 */
function _simpleblogroll_valid_feed($url) {
  if ($url != '') {
    $feed = simplepie_get($url);
    $item = $feed->get_item(0);
    if (!$feed->error()) {
      return TRUE;
    }
    return FALSE;
  }
  return TRUE;
}

/**
 * Gets simplepie error
 *
 * Gives out the error returned by simplepie for a given URL.
 *
 * @param $url
 * URL to the feed.
 * @return
 * A string with the error SimplePie gave.
 * @see _simpleblogroll_valid_feed()
 */
function _simpleblogroll_get_error($url) {
  $feed = simplepie_get($url);
  $item = $feed->get_item(0);
  return $feed->error();
}

/**
 * Builds watchdog queries
 *
 * Depending on the level of notification set, sends notifications .
 *
 * @param $op
 * Holds information about the operation we want to execute:
 * - Possible values are 'noupdates', 'nocron', 'created', 'deleted' and 'updated'.
 * @param $title
 * Title of a feed.
 * @param $item
 * Title of an item.
 * @param $feedurl
 * URL of a feed.
 */
function _simpleblogroll_watchdog_informing($op, $title = '', $item = '', $feedurl = '') {
  switch (variable_get('simpleblogroll_info', 'operations')) {
    case 'all':
      if ($op == 'noupdates') {
        $msg = 'Feed "%title" checked. No update necessary: last item still "%item".';
        $vars = array(
          '%title' => $title,
          '%item' => $item,
        );
        watchdog('simpleblogroll', $msg, $vars, WATCHDOG_NOTICE);
      }
      if ($op == 'nocronyet') {
        $remaining = variable_get('simpleblogroll_cron_runs', '1') - variable_get('simpleblogroll_cron_run', '0');
        $msg = 'Updates will not be checked on this cron run. ' . format_plural($remaining, 'There is 1 run remaining until next check.', 'There are @count runs remaining until next check.');
        $vars = array();
        watchdog('simpleblogroll', $msg, $vars, WATCHDOG_NOTICE);
      }
      if ($op == 'nocron') {
        $msg = 'Updates will not be checked through cron. You can check for updates manually through the %url page. If you would like to change this behavior, you can do so changing the update in the ' . l(t('SimpleBlogroll settings'), 'admin/config/simpleblogroll') . ' page.';
        $vars = array();
        watchdog('simpleblogroll', $msg, $vars, WATCHDOG_NOTICE);
      }
    case 'operations':
      if ($op == 'created' && _simpleblogroll_valid_feed($feedurl)) {
        if (!_simpleblogroll_item_has_date($feedurl)) {
          $msg = 'Feed "%title" has been created. Latest item: "%item". Item contains no valid date information. Date will be set to now (%date).';
          $vars = array(
            '%title' => $title,
            '%item' => $item,
            '%date' => format_date(REQUEST_TIME),
          );
        }
        else {
          $msg = 'Feed "%title" has been created. Latest item: "%item".';
          $vars = array(
            '%title' => $title,
            '%item' => $item,
          );
        }
        watchdog('simpleblogroll', $msg, $vars, WATCHDOG_NOTICE);
      }
      if ($op == 'deleted') {
        $msg = 'Feed with URL "%url" has been deleted.';
        $vars = array('%url' => $feedurl);
        watchdog('simpleblogroll', $msg, $vars, WATCHDOG_NOTICE);
      }
    case 'updates':
      if ($op == 'updated' && _simpleblogroll_valid_feed($feedurl)) {
        if (!_simpleblogroll_item_has_date($feedurl)) {
          $msg = 'Feed "%title" has been updated. Latest item: "%item". Item contains no valid date information. Date will be set to now (%date).';
          $vars = array(
            '%title' => $title,
            '%item' => $item,
            '%date' => format_date(REQUEST_TIME),
          );
        }
        else {
          $msg = 'Feed "%title" has been updated. Latest item: "%item".';
          $vars = array(
            '%title' => $title,
            '%item' => $item,
          );
        }
        watchdog('simpleblogroll', $msg, $vars, WATCHDOG_NOTICE);
      }
    case 'none':
      break;
  }
}

/**
 * Parses a feed
 *
 * Fetches all the feed data through simplepie for a given feed-URL.
 *
 * @param $feedurl
 * URL to the feed.
 * @return
 * An array with the following keys:
 * -  'title': contains the feed title.
 * -  'site': contains the site url that holds the content reffered to by the feed.
 * -  'item': contains the item title.
 * -  'date': contains the item date.
 * -  'url': contains the item url.
 */
function _simpleblogroll_parse_feed($feedurl) {
  $feed = simplepie_get($feedurl);
  $item = $feed->get_item(0);
  $site_url = check_url($feed->get_link());
  $item_url = check_url($item->get_link());
  $item_title = decode_entities(decode_entities(check_plain($item->get_title()))); //decoding twice because some feeds have wrong encoding
  if (!$item_title) {
    $item_title = 'NULL_EMPTY';
  }
  $feed_title = decode_entities(decode_entities(check_plain($feed->get_title())));
  if (!$feed_date = $item->get_date('U')) {
    $feed_date = REQUEST_TIME;
  }
  return array('title' => $feed_title, 'site' => $site_url, 'item' => $item_title, 'date' => $feed_date, 'url' => $item_url);
}

/**
 * Makes database modifications
 *
 * Performs database modifications depending on the operation and the feed url.
 *
 * @param $op
 * Information on the operation to perform:
 * - Can be: 'delete', 'create', 'update' or 'empty',
 * @param $feedurl
 * URL to the feed.
 */
function _simpleblogroll_modify_db($op, $feedurl = '') {
  $update = FALSE;
  if (_simpleblogroll_valid_feed($feedurl) || $op == 'empty') {
    if ($feedurl != '') {
      $feed = _simpleblogroll_parse_feed($feedurl);
      $title = $feed['title'];
      $siteurl = $feed['site'];
      $item = $feed['item'];
      $itemurl = $feed['url'];
      $date = $feed['date'];
    }
    switch ($op) {
      case 'create':
        db_insert('simpleblogroll')
          ->fields(array(
          'site_url' => $siteurl,
          'feed_title' => $title,
          'feed_url' => $feedurl,
          'last_item' => $item,
          'item_url' => $itemurl,
          'timestamp' => $date,
        ))
        ->execute();
  
        _simpleblogroll_watchdog_informing('created', $title, $item, $feedurl);
        break;
      case 'delete':
        db_delete('simpleblogroll')
          ->condition('feed_url', $feedurl)
          ->execute();
        _simpleblogroll_watchdog_informing('deleted', $title, $item, $feedurl);
        break;
      case 'update':
        if ($item != '' && $item != 'NULL_EMPTY') {
          $query_check_for_item = db_query("SELECT feed_title, last_item FROM {simpleblogroll} WHERE last_item = :last_item", 
            array(':last_item' => $item, )
          );
        }
        else {
          $query_check_for_item = db_query("SELECT feed_title, last_item FROM {simpleblogroll} WHERE item_url = :item_url", 
            array(':item_url' => $itemurl, )
          );
        }
        if (!$query_check_for_item->rowCount()) {
          $update = TRUE;
        }
        if ($update) {
         //Does this work in databases other than MYSQL?
          $result = db_query("DELETE FROM {simpleblogroll} WHERE feed_url = :feed_url ORDER BY timestamp ASC LIMIT 1", array(
            ':feed_url' => $feedurl,
         ));
         //This will for sure, but we loose the ORDER BY and LIMIT, do we need them?
         /*
         db_delete('simpleblogroll')
          ->condition('feed_url', $feedurl)
          ->execute();
         */
         //Another option is to keep the ORDER BY but remove the LIMIT
         /*$result = db_query("DELETE FROM {simpleblogroll} WHERE feed_url = :feed_url ORDER BY timestamp ASC", array(
            ':feed_url' => $feedurl,
         ));
         */
         //Details: http://drupal.org/node/278537#comment-4282862
          
          db_insert('simpleblogroll')
          ->fields(array(
          'site_url' => $siteurl,
          'feed_title' => $title,
          'feed_url' => $feedurl,
          'last_item' => $item,
          'item_url' => $itemurl,
          'timestamp' => $date,
        ))
        ->execute();
          
          _simpleblogroll_watchdog_informing('updated', $title, $item, $feedurl);
        }
        else {
          _simpleblogroll_watchdog_informing('noupdates', $title, $item, $feedurl);
        }
        break;
      case 'empty':
        db_query('TRUNCATE TABLE {simpleblogroll}');
        break;
    }
  }
}

/**
 * Sets feeds
 *
 * Converts introduced feed URLs (one per line) into an array. If empty, returns empty array.
 *
 * @return
 * An array with all feed URLs. If none set, empty.
 */
function _simpleblogroll_set_feeds() {
  $removelb = 0;
  $d = variable_get('simpleblogroll_feeds', '');
  if ($d != '') {
    $d = ereg_replace("(\n|\r|\r\n)", "|", $d);
    while ($d != str_replace("||", "|", $d)) {
      $d = str_replace("||", "|", $d);
    }
    while ($d != preg_replace("/([A-Za-z0-9]{2,})(http\:)/", "$1|$2", $d)) {
      $d = preg_replace("/([A-Za-z0-9]{2,})(http\:)/", "$1|$2", $d);
    }
    $d = explode("|", $d);
    foreach ($d as $url) {
      check_url($url);
      if ($url != '') {
        $arr[] = $url;
      }
      elseif (user_access('administer simpleblogroll')) {
        $removelb = 1;
      }
    }
    if ($removelb == 1) {
      drupal_set_message(t('There were empty lines on the feeds field which have been removed.'));
    }
    $d = $arr;
    variable_set('simpleblogroll_feeds', implode("\n", $d));

    return $arr;
  }
  else {
    return array();
  }
}

/**
 * Counts feeds.
 *
 * Counts set feeds and corrects the feeds set to display if set higher than number of feeds.
 *
 * @return
 * A number describing the total number of feeds. If none is set yet, return 5.
 * @see _simpleblogroll_set_feeds()
 */
function _simpleblogroll_count_set_feeds() {
  $number = count(_simpleblogroll_set_feeds());
  if ($number == 0) {
    $number = 5;
  }
  if (variable_get('simpleblogroll_display', '5') >= $number) {
    variable_set('simpleblogroll_display', $number);
  }
  return $number;
}

/**
 * Checks current feeds
 *
 * Checks the existing feeds in database and returns their URL in a unique array. If empty, returns empty array.
 *
 * @return
 * An array with all feed URLs. If none set, empty.
 */
function _simpleblogroll_get_current_feeds() {
  $result = db_query('SELECT feed_url '
    . 'FROM {simpleblogroll}'
  );
  $arr = $result->fetchCol();
  if ($arr) {
    return array_unique($arr);
  }
  else {
    return array();
  }
}

/**
 * Checks for feed updates
 *
 * Goes through all the set URLs and performs an update check and operation when necessary.
 *
 * @return
 * An array with all feed URLs. If none set, empty.
 * @see _simpleblogroll_modify_db()
 */
function _simpleblogroll_check_for_update() {
  foreach (_simpleblogroll_set_feeds() as $feed_url) {
    _simpleblogroll_modify_db('update', $feed_url);
  }
}

/**
 * Perform a series of start checks
 *
 * Checks what operations are necessary after hitting submit on the simpleblogroll module settings page.
 * If no feed has been changed (no diff between feeds in database and set feeds) exits.
 * If there are changes, updates the database (either by creating or deleting items).
 * On each execution, checks if any URLs are invalid.
 * Reports all operations and warnings to user.
 *
 */
function _simpleblogroll_startchecks() {
  $setfeeds = _simpleblogroll_set_feeds();
 
  $feeds = "";
  $tags = 0;
  $error = 0;
  $currentfeeds = _simpleblogroll_get_current_feeds();
  if ($setfeeds) {
    $find = array('</p><p>', "</p>\r<p>", "</p>\n<p>", "</p>\r\n<p>", "<br>\r", "<br>\n", "<br>\r\n", "<br />\r", "<br />\n", "<br />\r\n", '<br />', '<br>');
    foreach ($setfeeds as $feed_url) { // prevent WYSIWYG editors from messing with the feeds
      if (strlen($feed_url) != strlen(strip_tags($feed_url))) {
        $feed_url = strip_tags(str_replace($find, "\n", $feed_url));
        $tags = 1;
      }
      $feeds .= $feed_url;
    }
    if ($tags == 1) { // if html tags were found
      variable_set('simpleblogroll_feeds', $feeds);
      $setfeeds = _simpleblogroll_set_feeds();
      drupal_set_message(t('HTML tags were found in the feeds field and have been removed. In the future, try disabling any WYSIWYG editor on the feeds field before submitting feeds.'));
    }
    unset($tags);
    foreach ($setfeeds as $key => $feed_url) {
      if (!valid_url($feed_url, TRUE)) {
        form_set_error('simpleblogroll_feeds', t('The URL %url is invalid. Please enter a fully-qualified URL, such as http://www.example.com/feed.xml.', array('%url' => $feed_url)));
      }
      elseif (!_simpleblogroll_valid_feed($feed_url)) {
        $error = _simpleblogroll_get_error($url);
        $message .= '<li>' . t('The URL %url is not a valid feed and was removed. <br />SimplePie returned: %error', array(
          '%url' => $feed_url,
          '%error' => $error,
        )) . '</li>';
        $counter++;
        unset($setfeeds[$key]);
      }
    }
    if ($error) {
      form_set_error('simpleblogroll_feeds', '<ul>' . $message . '</ul>' . format_plural($counter, 'If the URL links to an ATOM/RSS feed and was tiped correctly, there might be a problem with its XML syntax. Contacting the owner of the feed might resolve the issue.', 'If the URLs link to ATOM/RSS feeds and were tiped correctly, there might be a problem with their XML syntax. Contacting the owners of the feeds might resolve the issues.'));
      $feeds = implode("\n", $setfeeds);
      variable_set('simpleblogroll_feeds', $feeds);
      $setfeeds = _simpleblogroll_set_feeds();
    }
  }
  if (!$setfeeds && !$currentfeeds) {
    return;
  }
  elseif ($setfeeds && $currentfeeds) {
    $todelete = array_diff($currentfeeds, $setfeeds);
    if ($todelete) {
      $i = 0;
      foreach ($todelete as $feed_url) {
    
        _simpleblogroll_modify_db('delete', $feed_url);
        $i++;
      }
      drupal_set_message(format_plural($i, '1 feed has been deleted.', '@count feeds have been deleted'));
    }

    $toadd = array_diff($setfeeds, $currentfeeds);
    if ($toadd) {
      $i = 0;
      foreach ($toadd as $feed_url) {
        _simpleblogroll_modify_db('create', $feed_url);
        if (_simpleblogroll_valid_feed($feed_url)) {
          if (!_simpleblogroll_item_has_date($feed_url)) {
            drupal_set_message(t('The URL %url does not contain items with a valid date. Since parser cannot read it, it will set it to now (%date). This should not become a problem if you update on a regular basis (dates will still be approximate, but more accurate the higher the update frequency).', array('%url' => $feed_url, '%date' => format_date(REQUEST_TIME))), 'warning');
          }
        }
        $i++;
      }
      drupal_set_message(format_plural($i, '1 feed has been added.', '@count feeds have been added'));
    }
  }
  elseif ($currentfeeds) {
    _simpleblogroll_modify_db('empty');
    drupal_set_message(t('All feeds have been removed.'));
  }
  elseif ($setfeeds) {
    $i = 0;
    foreach ($setfeeds as $feed_url) {
      _simpleblogroll_modify_db('create', $feed_url);
      if (_simpleblogroll_valid_feed($feed_url)) {
        if (!_simpleblogroll_item_has_date($feed_url)) {
          drupal_set_message(t('The URL %url does not contain items with a valid date. Since parser cannot read it, it will set it to now (%date). This should not become a problem if you update on a regular basis (dates will still be approximate, but more accurate the higher the update frequency).', array('%url' => $feed_url, '%date' => format_date(REQUEST_TIME))), 'warning');
        }
        $i++;
      }
    }
    drupal_set_message(format_plural($i, '1 feed has been added.', '@count feeds have been added'));
  }
}

/**
 * FAPI definition for the SimpleBlogroll admin page.
 */
function _simpleblogroll_admin_settings() {
  if (variable_get('simpleblogroll_on_submit', '0') == '1') {
    _simpleblogroll_startchecks();
    variable_set('simpleblogroll_on_submit', '0');
  }
  if (variable_get('simpleblogroll_parse', '0') == 1) {
    _simpleblogroll_check_for_update();
    drupal_set_message(t('All feeds have been checked for updates. If you set watchdog configuration accordingly, you can check results under ') . l(t('recent log entries'), 'admin/reports/dblog'));
    variable_set('simpleblogroll_parse', '0');
  }
  $form['simpleblogroll_on_submit'] = array(
    '#type' => 'hidden',
    '#default_value' => '0',
    '#value' => '1',
  );
  $wysiwyg_warn = _simpleblogroll_warn_wysiwygs();
  $form['simpleblogroll_feeds'] = array(
    '#type' => 'textarea',
    '#title' => t('Feed URLs'),
    '#description' => t('Enter URL of feeds to parse. One per line.') . $wysiwyg_warn,
    '#default_value' => variable_get('simpleblogroll_feeds', ''),
  );
  $form['simpleblogroll_display'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of feeds to display'),
    '#description' => t('If set to less than the total number of feeds, oldest feeds will not be displayed.<br />If set to more than the total number of feeds, it will automatically be lowered to the total number of feeds and all feeds will be displayed.'),
    '#default_value' => variable_get('simpleblogroll_display', _simpleblogroll_count_set_feeds()),
    '#size' => 2,
    '#maxlength' => 2,
    '#required' => TRUE,
  );
  $form['display_time_new'] = array(
    '#type' => 'textfield',
    '#title' => t('Persistence of "(new)" tag since update'),
    '#description' => t('Set the time in hours to display the "(new)" tags next to updated items from their updated time. No decimals. Set 0 to not display the tag.'),
    '#default_value' => variable_get('display_time_new', '24'),
    '#size' => 3,
    '#maxlength' => 3,
    '#required' => TRUE,
  );
  $form['display_links'] = array(
    '#type' => 'select',
    '#title' => t('Link to site'),
    '#description' => t('Choose if you want to display a link to the feed\'s site.'),
    '#default_value' => variable_get('display_links', 'none'),
    '#options' => array(
      'iconleft' => 'Show clickable icon to the left of feed title',
      'iconright' => 'Show clickable icon to the right of feed title',
      'link' => 'Make the title a link',
      'none' => 'Don\'t show link to the linked feed\'s site',
    ),
  );
  $form['simpleblogroll_info'] = array(
    '#type' => 'select',
    '#title' => t('Watchdog'),
    '#description' => t('Set the amount of info you want to display in watchdog'),
    '#default_value' => variable_get('simpleblogroll_info', 'operations'),
    '#options' => array(
      'all' => 'Inform about everything',
      'operations' => 'Inform about all feed operations (except checking)',
      'updates' => 'Inform about feed updates only',
      'none' => 'Don\'t use watchdog',
    ),
  );
  $form['simpleblogroll_cron_runs'] = array(
    '#type' => 'select',
    '#title' => t('Check for feed updates...'),
    '#default_value' => variable_get('simpleblogroll_cron_runs', '1'),
    '#options' => array(
      '1' => t('on every Cron run'),
      '2' => t('every 2 Cron runs'),
      '3' => t('every 3 Cron runs'),
      '4' => t('every 4 Cron runs'),
      '5' => t('every 5 Cron runs'),
      '10' => t('every 10 Cron runs'),
      '20' => t('every 20 Cron runs'),
      '-1' => t('never (Manual only)'),
    ),
    '#description' => t('Set how often you want to check for feed updates.'),
  );
  $form['simpleblogroll_parse'] = array(
    '#type' => 'checkbox',
    '#title' => t('Check for updates now?'),
    '#description' => t('Check in order to update feeds on submitting (<b>not necessary for just added <em>Feed URLs</em></b>). This is the way to update if you set update frequency to "Manual".'),
    '#default_value' => variable_get('simpleblogroll_parse', '0'),
    '#return_value' => 1,
  );
  return system_settings_form($form);
}

/**
 * Builds block content
 *
 * Fetches all the feed data and returns it in an HTML friendly format.
 *
 * @return
 * A string with the content of the block
 */
function _simpleblogroll_build_block() {
  $query = db_select('simpleblogroll');
  $query
    ->fields('simpleblogroll')
    ->orderBy('timestamp', 'DESC')
    ->range(0, variable_get('simpleblogroll_display', _simpleblogroll_count_set_feeds()));
  $result = $query->execute();

  $return = "";
  foreach ($result as $record) {
    $return .= '<b>';
    $linkimagepath = drupal_get_path('module', 'simpleblogroll') . '/images/external.png';
    $variables = array(
      'path' => $linkimagepath, 
      'alt' => '>',
      'title' => $record->site_url,
      'width' => '10',
      'height' => '10',
      );
    switch (variable_get('display_links', 'none')) {
      case 'iconleft':        
        $return .= l(theme('image', $variables), $record->site_url, array('html' => TRUE));
        $return .= ' ' . $record->feed_title . '</b><br />';
        break;
      case 'iconright':
        $return .= $record->feed_title . '</b> ';
        $return .= l(theme('image', $variables), $record->site_url, array('html' => TRUE)) . '<br>';
        break;
      case 'link':
        $return .= l($record->feed_title, $record->site_url) . '</b><br />';
        break;
      case 'none':
        $return .= $record->feed_title . '</b><br />';
        break;
    }
    if ($record->last_item == 'NULL_EMPTY') {
      $record->last_item = '[' . t('Untitled') . ']';
    }
    $return .=  l($record->last_item, $record->item_url);
    if ($record->timestamp > (REQUEST_TIME - 60 * 60 * variable_get('display_time_new', '24'))) {
      $return .=  ' <small>(' . t('new') . ')</small>';
    }
    $return .=  '<br /><br />';
  }
  if ($return) {
    return $return;
  }
  return;
}

/**
 * Helper function for _simpleblogroll_admin_settings(). Borrowed from autopath.
 *
 * Checks to see if a known WYSIWYG editor is being used and, if so, returns a
 * a warning string.
 *
 * @return
 *   A warning message if appropriate.
 */
function _simpleblogroll_warn_wysiwygs() {
  $wysiwygs = array(
    'bueditor',
    'fckeditor',
    'htmlarea',
    'htmlbox',
    'tinymce',
    'whizzywig',
    'widgeditor',
    'wymeditor',
    'wysiwyg',
    'xstandard',
    'yui_editor',
  );

  $wysiwyg_problem = FALSE;
  foreach ($wysiwygs as $key => $wysiwyg) {
    if (module_exists($wysiwyg)) {
      $wysiwyg_problem = TRUE;
    }
  }
  if ($wysiwyg_problem) {
    return '<strong> ' . t('You appear to be using a "WYSIWYG" editor which could eventually cause problems if that editor runs on the Simpleblogroll administrative settings page. If you run into any errors, please make sure you disable it on this page.') . '</strong>';
  }
}

/**
 * Implements hook_permission().
 */
function simpleblogroll_permission() {
  return array(
    'access simpleblogroll' => array(
      'title' => t('access simpleblogroll'),
      'description' => t('Who can view the blogroll'),
    ),
    'administer simpleblogroll' => array(
      'title' => t('administer simpleblogroll'),
      'description' => t('Who can change settings for the blogrole'),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function simpleblogroll_block_info() {
  $blocks['simpleblogroll'] = array(
    'info' => t('SimpleBlogroll'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function simpleblogroll_block_view($delta) {
  if (user_access('access simpleblogroll')) {
    $blocks = array(
      'subject' => t('Blogroll'),
      'content' => _simpleblogroll_build_block(),
    );
    return $blocks;
  }
}

/**
 * Implements hook_help().
 */
function simpleblogroll_help($section) {
  switch ($section) {
    case 'admin/help#simpleblogroll':
      return '<p>' . t('Thank you for using SimpleBlogroll! Before you start, make sure the Simplepie module is installed, cache is set (on its !simplepie) and it does not return any errors.<br /><br />Go to the !module, enter the URLs of the feeds you want to display in your dynamic blogroll, choose the number of feeds you want to display in the block and if you want to add a link to the feed\'s site. If you want, set the watchdog activity and frequency of update checks. If you were to select a manual update, you have the option to update feeds checking the "Check for updates now" checkbox before submitting.<br />Whern done, you have to set !permissions. If you don\'t want it to be visible to all roles, check only those which you want to give access.<br /><br />Please report any bugs through the issue queue on the project page!', array(
        '!module' => l(t('SimpleBlogroll configuarion page'), 'admin/config/simpleblogroll'),
        '!simplepie' => l(t('configuaration page'), 'admin/config/simplepie'),
        '!permissions' => l(t("SimpleBlogroll's permissions"), 'admin/user/permissions', array('fragment' => 'module-simpleblogroll')),
      )) . '</p>';
    case 'admin/config/simpleblogroll':
      return '<p>' . t('Configure SimpleBlogroll.') . '</p>';
  }
}

/**
 * Implements hook_menu().
 */
function simpleblogroll_menu() {
  $items['admin/config/services/simpleblogroll'] = array(
    'title' => 'SimpleBlogroll Settings',
    'description' => 'Control how simpleblogroll works.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_simpleblogroll_admin_settings'),
    'access arguments' => array('administer simpleblogroll'),
  );
  return $items;
}

/**
 * Implements hook_cron().
 */
function simpleblogroll_cron() {
  $cron_runs = variable_get('simpleblogroll_cron_run', '0');
  $cron_runs++;
  if ($cron_runs == (int) variable_get('simpleblogroll_cron_runs', '1')) {
    variable_set('simpleblogroll_cron_run', '0');
    _simpleblogroll_check_for_update();
  }
  elseif ($cron_runs > (int) variable_get('simpleblogroll_cron_runs', '1')) {
    _simpleblogroll_watchdog_informing('nocron');
    variable_del('simpleblogroll_cron_run');
  }
  else {
    variable_set('simpleblogroll_cron_run', $cron_runs);
    _simpleblogroll_watchdog_informing('nocronyet');
  }
}
