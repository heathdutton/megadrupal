<?php
/**
 * @file
 * Provides services resources and some basis functions.
 */

define('BASSETS_CLIENT_RESOURCE', 'bassetsclient');

/**
 * Implements hook_menu().
 */
function bassets_server_menu() {
  $items['admin/config/services/bassets_server'] = array(
    'title'            => 'Bassets-Server configurations',
    'access arguments' => array('access_bassets_server_configurations'),
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('bassets_server_admin_form'),
    'description'      => 'Manage the Bassets-Server configurations.',
  );
  $items['bassetsfile/%'] = array(
    'title' => 'Bassetsfile',
    'access callback' => TRUE,
    'page callback' => '_bassets_server_deliver_bassetsfile',
    'page arguments' => array(1),
  );
  $items['bassetsajax/%'] = array(
    'title' => 'File validate',
    'access callback' => TRUE,
    'page callback' => '_bassets_server_plupload_filevalidate',
    'page arguments' => array(1),
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function bassets_server_permission() {
  $perms['access_bassets_server_configurations'] = array(
    'title' => t('Manage the Bassets-Server configurations.'),
  );
  return $perms;
}

/**
 * Implements hook_cron_queue_info().
 */
function bassets_server_cron_queue_info() {
  $queues['files_for_clients'] = array(
    'worker callback' => '_bassets_server_push_file_worker',
    'time' => 60,
  );
  return $queues;
}

/**
 * Implements hook_module_implements_alter().
 */
function bassets_server_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'file_validate') {
    unset($implementations['filehash']);
  }
  if ($hook == 'file_update') {
    unset($implementations['bassets_server']);
    // Put us at the end. So that field cache is updated from file_entity module.
    $implementations = array_merge($implementations, array('bassets_server' => FALSE));
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add the image resolution settings to the file entity settings form.
 *
 * @see image_field_instance_settings_form()
 */
function bassets_server_form_file_entity_settings_form_alter(&$form, &$form_state) {
  // Add maximum and minimum resolution settings.
  $max_resolution = explode('x', variable_get('file_entity_max_resolution', '')) + array('', '');
  $form['file_entity_max_resolution'] = array(
    '#type' => 'item',
    '#title' => t('Maximum image resolution'),
    '#element_validate' => array('_image_field_resolution_validate'),
    '#tree' => TRUE,
    '#field_prefix' => '<div class="container-inline">',
    '#field_suffix' => '</div>',
    '#description' => t('The maximum allowed image size expressed as WIDTHxHEIGHT (e.g., 640x480). Leave blank for no restriction. If a larger image is uploaded, it will be rejected.'),
  );
  $form['file_entity_max_resolution']['x'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum width'),
    '#title_display' => 'invisible',
    '#default_value' => $max_resolution[0],
    '#size' => 5,
    '#maxlength' => 5,
    '#field_suffix' => ' x ',
  );
  $form['file_entity_max_resolution']['y'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum height'),
    '#title_display' => 'invisible',
    '#default_value' => $max_resolution[1],
    '#size' => 5,
    '#maxlength' => 5,
    '#field_suffix' => ' ' . t('pixels'),
  );

  $min_resolution = explode('x', variable_get('file_entity_min_resolution', '')) + array('', '');
  $form['file_entity_min_resolution'] = array(
    '#type' => 'item',
    '#title' => t('Minimum image resolution'),
    '#element_validate' => array('_image_field_resolution_validate'),
    '#tree' => TRUE,
    '#field_prefix' => '<div class="container-inline">',
    '#field_suffix' => '</div>',
    '#description' => t('The minimum allowed image size expressed as WIDTHxHEIGHT (e.g., 640x480). Leave blank for no restriction. If a smaller image is uploaded, it will be rejected.'),
  );
  $form['file_entity_min_resolution']['x'] = array(
    '#type' => 'textfield',
    '#title' => t('Minimum width'),
    '#title_display' => 'invisible',
    '#default_value' => $min_resolution[0],
    '#size' => 5,
    '#maxlength' => 5,
    '#field_suffix' => ' x ',
  );
  $form['file_entity_min_resolution']['y'] = array(
    '#type' => 'textfield',
    '#title' => t('Minimum height'),
    '#title_display' => 'invisible',
    '#default_value' => $min_resolution[1],
    '#size' => 5,
    '#maxlength' => 5,
    '#field_suffix' => ' ' . t('pixels'),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Enables autoupload/autosubmit for the multiple upload form (plupload).
 *
 * @see file_entity_add_upload_multiple()
 */
function bassets_server_form_file_entity_add_upload_multiple_alter(&$form, $form_state) {
  if (isset($form['upload'])) {
    $form['upload']['#autoupload'] = TRUE;
    $form['upload']['#autosubmit'] = TRUE;
    $form['upload']['#event_callbacks'] = array('FileUploaded' => 'Drupal.bassets.FileUploaded');
    $form['#attached']['js'][] = drupal_get_path('module', 'bassets_server') . '/js/bassets.js';
    $form['#attached']['library'][] = array('system', 'drupal.ajax');
    $form['messagesplaceholder'] = array(
      '#markup' => '<div id="messages-placeholder"></div>',
      '#weight' => -1000,
    );
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Hides all readonly fields in the edit mode.
 *
 * @see file_entity_edit()
 */
function bassets_server_form_file_entity_edit_alter(&$form, $form_state) {
  if (function_exists('field_group_hide_field_groups')) {
    field_group_hide_field_groups($form, array('group_asset_computed_data'));
  }
}

/**
 * Implements hook_file_update().
 */
function bassets_server_file_update($file) {
  _bassets_server_push_file_precheck($file);
}

/**
 * Implements hook_file_validate().
 */
function bassets_server_file_validate($file) {
  // We duplicates the origin validation function, which was unsetted in
  // bassets_server_module_implements_alter() and return a custom message.
  $errors = array();
  if (variable_get('filehash_dedupe', 0)) {
    foreach (filehash_algos() as $algo) {
      if (!file_exists($file->uri)) {
        return;
      }
      $fid = db_query("SELECT fid FROM {filehash} WHERE $algo = :hash", array(':hash' => hash_file($algo, $file->uri)))->fetchField();
      if ($fid) {
        $_file = file_load($fid);
        $errors[] = t('Because the file was already uploaded. See more details: !link', array('!link' => l($_file->filename, 'file/' . $_file->fid)));
        break;
      }
    }
  }
  // @see file_validate_image_resolution()
  // We do not want a resizing therefore we use a own validation.
  $maximum_dimensions = variable_get('file_entity_max_resolution', '');
  $minimum_dimensions = variable_get('file_entity_min_resolution', '');
  // Check first that the file is an image.
  if ($info = image_get_info($file->uri)) {
    if ($maximum_dimensions) {
      // Check that it is smaller than the given dimensions.
      list($width, $height) = explode('x', $maximum_dimensions);
      if ($info['width'] > $width || $info['height'] > $height) {
        $errors[] = t('The image is too large; the maximum dimensions are %dimensions pixels.', array('%dimensions' => $maximum_dimensions));
      }
    }
    if ($minimum_dimensions) {
      // Check that it is larger than the given dimensions.
      list($width, $height) = explode('x', $minimum_dimensions);
      if ($info['width'] < $width || $info['height'] < $height) {
        $errors[] = t('The image is too small; the minimum dimensions are %dimensions pixels.', array('%dimensions' => $minimum_dimensions));
      }
    }
  }
  return $errors;
}

/**
 * Checks that the file is not locked and pushs the file when nessesary.
 */
function _bassets_server_push_file_precheck($file) {

  if ((int) $file->status !== FILE_STATUS_PERMANENT) {
    return;
  }

  $locked = _bassets_server_file_is_locked($file);
  if ($locked) {
    // Do nothing when the file is locked.
    return;
  }
  $context = _bassets_server_static_context('pushuuid', $file->uuid);
  if (!empty($context)) {
    return;
  }
  $deployment_type = variable_get('bassets_server_deployment', NULL);
  if ($deployment_type == 'file_hooks') {
    _bassets_server_push_file($file);
  }
  elseif ($deployment_type == 'cron') {
    $queue = DrupalQueue::get('files_for_clients');
    $queue->createItem($file->fid);
  }
}

/**
 * Implements hook_file_delete().
 */
function bassets_server_file_delete($file) {
  _bassets_server_delete_file($file);
}

/**
 * Implements hook_services_resources().
 */
function bassets_server_services_resources() {
  $resources['bassetsserver'] = array(
    '#api_version' => 3002,
    'actions' => array(
      'ping' => array(
        'help' => 'Lets a Bassets client ping the server. Used by Bassets setup',
        'file' => array(
          'type' => 'inc',
          'module' => 'bassets_server',
          'name' => 'resources/bassetsserver',
        ),
        'callback' => '_bassets_server_ping',
        'access arguments' => array('access content'),
      ),
      'searchconfig' => array(
        'help' => 'Lets a Bassets client fetch the configuration for the remote search. Used by Bassets media.',
        'file' => array(
          'type' => 'inc',
          'module' => 'bassets_server',
          'name' => 'resources/bassetsserver',
        ),
        'callback' => '_bassets_server_search_config',
        'access arguments' => array('access content'),
      ),
      'fetch_entity' => array(
        'help' => 'Lets a Bassets client fetches file entity.',
        'file' => array(
          'type' => 'inc',
          'module' => 'bassets_server',
          'name' => 'resources/bassetsserver',
        ),
        'callback' => '_bassets_server_fetch_entity',
        'args' => array(
          array(
            'name' => 'uuid',
            'type' => 'string',
            'optional' => FALSE,
            'source' => array('data' => 'uuid'),
            'description' => 'A uuid which was pushed from the remote server.',
          ),
          array(
            'name' => 'services_client_id',
            'type' => 'string',
            'optional' => FALSE,
            'source' => array('data' => 'services_client_id'),
            'description' => 'The services client id of the remote image client',
          ),
        ),
        'access arguments' => array('access content'),
      ),
      'fetch_raw' => array(
        'help' => 'Lets a Bassets client fetch the web accessible URL for the resource.',
        'file' => array(
          'type' => 'inc',
          'module' => 'bassets_server',
          'name' => 'resources/bassetsserver',
        ),
        'callback' => '_bassets_server_fetch_raw',
        'args' => array(
          array(
            'name' => 'uuid',
            'type' => 'string',
            'optional' => FALSE,
            'source' => array('data' => 'uuid'),
            'description' => 'A uuid of the file.',
          ),
        ),
        'access arguments' => array('access content'),
      ),
      'deleted' => array(
        'help' => 'Lets a Bassets client inform us that it delete a file',
        'file' => array(
          'type' => 'inc',
          'module' => 'bassets_server',
          'name' => 'resources/bassetsserver',
        ),
        'callback' => '_bassets_file_deleted',
        'access arguments' => array('access content'),
        'args' => array(
          array(
            'name' => 'uuid',
            'type' => 'string',
            'optional' => FALSE,
            'source' => array('data' => 'uuid'),
            'description' => 'A uuid of the file.',
          ),
          array(
            'name' => 'services_client_id',
            'type' => 'string',
            'optional' => FALSE,
            'source' => array('data' => 'services_client_id'),
            'description' => 'The services client id of the Bassets client',
          ),
        ),
      ),
    ),
  );
  return $resources;
}

/**
 * Pushs the file to the bassets clients.
 *
 * @param object $file
 *   The file entity.
 * @param array $clients
 *   An array of bassets client.
 *
 * @return array
 *   An array of bassets client.
 */
function _bassets_server_push_file($file, array $clients = array()) {
  if (empty($clients)) {
    $connections = _bassets_scc_connections_load('client');
    $clients = array_keys($connections);
  }
  $connections_names = array();
  drupal_alter('bassets_pre_push', $file, $clients);
  if (empty($clients)) {
    return;
  }
  foreach ($clients as $client_name) {
    $response_data = NULL;
    try{
      $client = services_client_connection_get($client_name);
      $data = array(
        'uuid' => $file->uuid,
        'uri' => _bassets_server_prepare_uri($file),
        'services_client_id' => services_client_get_id(),
      );
      $client->action(BASSETS_CLIENT_RESOURCE, 'pushuuid', $data);
      $response = $client->getResponse();

      if (!empty($response->data) && isset($response->data['status']) && $response->data['status'] == WATCHDOG_NOTICE) {
        $response_data = $response->data;
      }
      elseif (isset($response->data['message'])) {
        watchdog('bassets_server', print_r($response->data['message'], TRUE), array(), $response->data['status']);
        continue;
      }
    }
    catch (Exception $e) {
      watchdog_exception('bassets_server', $e);
      continue;
    }
    if (empty($response_data)) {
      continue;
    }
    if (!empty($response_data['op']) && in_array($response_data['op'], array('create', 'update'))) {
      $connections_names[] = $client_name;
    }
  }

  $hook = 'bassets_pushed';
  $modules = module_implements($hook);
  foreach ($modules as $module) {
    $function = $module . '_' . $hook;
    if (function_exists($function)) {
      $function($file, $connections_names);
    }
  }
  return $connections_names;
}

/**
 * Deletes the file on the bassets clients.
 *
 * @param object $file
 *   The file entity.
 */
function _bassets_server_delete_file($file) {
  $connections = _bassets_scc_connections_load('client');
  foreach ($connections as $connection_name => $conf) {
    $response_data = NULL;
    try{
      $client = services_client_connection_get($connection_name);
      $data = array('uuid' => $file->uuid);
      $client->delete(BASSETS_CLIENT_RESOURCE, $file->uuid);
      $response = $client->getResponse();
      if (!empty($response->data) && $response->data['status'] == WATCHDOG_NOTICE) {
        $response_data = $response->data;
      }
      else {
        watchdog('bassets_server', print_r($response->data['message'], TRUE), array(), $response->data['status']);
        return;
      }
    }
    catch (Exception $e) {
      watchdog_exception('bassets_server', $e);
    }
    if (empty($response_data)) {
      continue;
    }
    watchdog('bassets_server', print_r($response->data['message'], TRUE), array(), $response_data['status']);
  }
}

/**
 * Prepares the file uri for the clients.
 *
 * Fileuri: SCHEME://UUID.EXTENSION (public://ffda3d5e-8fda-427e-9f4f-72f18ad3a03c.jpg).
 *
 * @param object $file
 *   The file entity.
 */
function _bassets_server_prepare_uri($file) {
  $extension = pathinfo($file->uri, PATHINFO_EXTENSION);
  return file_uri_scheme($file->uri) . '://' . $file->uuid . '.' . $extension;
}

/**
 * Page callbak for the configuration form.
 */
function bassets_server_admin_form($form, $form_state) {
  $desc = t('Cron - This means after uploading/updating a file, the file will be added to a queue. Which then will be processed while the cron runs. Recommend when the cron runs often.');
  $desc .= '<br />';
  $desc .= t('Manual - This means you need to submit a form on seperate page on the file detail page. Recommend when the cron runs not often.');
  $desc .= '<br />';
  $desc .= t('While saving a file - This means a file will be deployed to the clients while uploading a file or update it.');
  $form['bassets_server_deployment'] = array(
    '#title' => t('Deployment'),
    '#type' => 'select',
    '#options' => array(
      'cron' => t('Cron'),
      'manual' => t('Manual'),
      'file_hooks' => t('While saving a file'),
    ),
    '#description' => $desc,
    '#default_value' => variable_get('bassets_server_deployment', 'file_hooks'),
  );
  $fields = field_info_field_map();
  $options = array();
  foreach ($fields as $fieldname => $field) {
    if ($field['type'] == 'list_integer' && isset($field['bundles']['file'])) {
      $options[$fieldname] = $fieldname;
    }
  }
  if (!empty($options)) {
    $form['bassets_server_locked_fieldname'] = array(
      '#title' => t('Locked field'),
      '#type' => 'select',
      '#options' => $options,
      '#description' => t('Select the field which will be checked in file form to lock the file for clients.'),
      '#default_value' => variable_get('bassets_server_locked_fieldname', ''),
      '#empty_value' => '',
    );
  }
  $styles = image_styles();
  $options = array();
  foreach ($styles as $style) {
    $options[$style['name']] = $style['name'];
  }
  $form['bassets_server_remote_preview'] = array(
    '#title' => t('Remote preview style'),
    '#desciption' => t('The selected style will be send to a client as a preview image while searching for a image.'),
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => variable_get('bassets_server_remote_preview', 'media_thumbnail'),
  );
  return system_settings_form($form);
}

/**
 * Wrapper function to loads the file before to push it to the client.
 *
 * @see bassets_server_cron_queue_info()
 *
 * @param int $fid
 *   The ID of the file.
 */
function _bassets_server_push_file_worker($fid) {
  $file = file_load($fid);
  _bassets_server_push_file($file);
}

/**
 * Implements hook_entity_property_info().
 */
function bassets_server_entity_property_info() {
  $info = array();
  $properties = &$info['file']['properties'];

  $properties['base64encoded'] = array(
    'label' => t('Base64 encoded file content'),
    'type' => 'text',
  );
  return $info;
}

/**
 * Implements hook_services_search_api_postprocess_retrieved_alter().
 */
function bassets_server_services_search_api_postprocess_retrieved_alter(&$entities, $entity_type) {
  if ($entity_type == 'file' && count($entities) > 0) {
    foreach ($entities as $key => &$entity_array) {
      $entity = entity_load_single('file', $key);
      if ($entity->type == 'image' && file_exists($entity->uri)) {
        $entity->base64encoded = '';
        // Generate the image.
        $style_name = variable_get('bassets_server_remote_preview', 'media_thumbnail');
        $style = image_style_load($style_name);
        $path = image_style_path($style_name, $entity->uri);
        image_style_create_derivative($style, $entity->uri, $path);
        if (file_exists($path)) {
          $base64 = base64_encode(file_get_contents($path));
          $entity->base64encoded = $base64;
        }
      }
      $entity->uri = _bassets_server_prepare_uri($entity);
      $entities[$key]['base64encoded'] = $entity->base64encoded;
      $entities[$key]['url'] = $entity->uri;
    }
  }
}

/**
 * Implements hook_search_api_alter_callback_info().
 */
function bassets_server_search_api_alter_callback_info() {
  $callbacks['bassets_server_excluded_locked_files'] = array(
    'name' => t('Exclude locked files'),
    'description' => t('Exclude locked files.'),
    'class' => 'BassetsServerExcludeLockedFiles',
  );
  return $callbacks;
}

/**
 * Checks whether a file is locked or not.
 *
 * @param object $file
 *   The file entity.
 *
 * @return bool
 *   Returns TRUE when file is locked else FALSE.
 */
function _bassets_server_file_is_locked($file) {
  $locked = FALSE;
  $locked_name = variable_get('bassets_server_locked_fieldname', '');
  if (!empty($locked_name)) {
    if (isset($file->{$locked_name}) && isset($file->{$locked_name}[LANGUAGE_NONE][0])) {
      $locked = TRUE;
    }
  }
  return $locked;
}

/**
 * Menu callback to print a file.
 *
 * @see _bassets_server_fetch_raw()
 *
 * @param string $token
 *   A generated token.
 *
 * @return string
 *   The file content or empty string.
 */
function _bassets_server_deliver_bassetsfile($token) {
  $cache = cache_get($token, 'cache');
  if ($cache && REQUEST_TIME < $cache->expire && !empty($cache->data)) {
    $uuid = $cache->data;
    try{
      $files = entity_uuid_load('file', array($uuid));
    }
    catch (Exception $e) {
      watchdog_exception('bassets_server', $e);
      drupal_not_found();
      return '';
    }
    $file = reset($files);
    if (is_object($file) && file_exists($file->uri)) {
      $file_content = file_get_contents($file->uri);
      drupal_add_http_header('content-type', file_get_mimetype($file->uri));
      drupal_add_http_header('content-length', strlen($file_content));
      drupal_send_headers();
      print $file_content;
      drupal_exit();
    }
  }
  drupal_not_found();
  return '';
}

/**
 * Validates files which are uploaded via plupload form.
 */
function _bassets_server_plupload_filevalidate() {
  $commands = array();
  $_file = !empty($_POST['file']) ? $_POST['file'] : array('id' => time());
  // see plupload_handle_uploads() for the variable.
  $temp_directory = variable_get('plupload_temporary_uri', 'temporary://');
  if (file_exists($temp_directory . '/' . $_file['id'] . '.tmp')) {
    $uri = 'temporary://' . $_file['id'] . '.tmp';
    $file = new stdClass();
    $file->uid = $GLOBALS['user']->uid;
    $file->filename = $_file['name'];
    $file->uri = $uri;
    $file->filemime = file_get_mimetype($uri);
    // This is gagged because some uris will not support it.
    $file->filesize = @filesize($uri);
    $file->timestamp = REQUEST_TIME;
    $file->status = 0;
    // Call the validation functions specified by this function's caller.
    $errors = file_validate($file);

    // Check for errors.
    if (!empty($errors)) {
      $message = t('The specified file %name could not be uploaded.', array('%name' => $file->filename));
      if (count($errors) > 1) {
        $message .= theme('item_list', array('items' => $errors));
      }
      else {
        $message .= ' ' . array_pop($errors);
      }
      drupal_set_message($message, 'error');
      $commands[] = array('command' => 'pluploadFileValidate', 'data' => $_file);
    }
    else{
      $commands[] = array('command' => 'pluploadFileValidate', 'data' => '');
    }
    $commands[] = ajax_command_prepend('#messages-placeholder', theme('status_messages'));
  }
  $page = array('#type' => 'ajax', '#commands' => $commands);
  return ajax_deliver($page);
}

/**
 * Helper function to store static information in one http requests.
 *
 * E.g. to avoid that a file will be pushed twice in on request.
 *
 * @param string|int $context
 *   A simple string like 'pushuuid'
 * @param mixed $data
 *   Should be data unique in case the context is not enough.
 *
 * @return mixed
 *   The context name or the context data.
 */
function _bassets_server_static_context($context, $data = NULL) {
  static $contexts;
  if (!isset($contexts[$context])) {
    // Initial.
    $contexts[$context] = $context;
    // Could be duplicate, therefore it sets data to make this unique.
    if (!empty($data)) {
      $contexts[$context] = $data;
    }
    return FALSE;
  }
  if (!empty($data)) {
    if ($contexts[$context] == $data) {
      return $contexts[$context];
    }
    else {
      return FALSE;
    }
  }
  return $contexts[$context];
}
