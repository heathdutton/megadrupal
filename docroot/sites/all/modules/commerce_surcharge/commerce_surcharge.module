<?php

/**
 * @file
 * Module file.
 */

define('COMMERCE_SURCHARGE_TYPE', 'commerce_surcharge');
define('COMMERCE_SURCHARGE_COMPONENT_TYPE', 'commerce_surcharge');

/**
 * Implements hook_menu().
 */
function commerce_surcharge_menu() {
  $items = array();

  // Administration pages.
  $items['admin/commerce/config/surcharge'] = array(
    'title' => 'Credit card surcharge',
    'description' => 'Configure Credit card surcharge',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_commerce_surcharge_settings_form'),
    'access arguments' => array(
      'administer commerce_surcharge',
    ),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/commerce_surcharge.admin.inc',
    'weight' => 0,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function commerce_surcharge_permission() {
  $perms = array(
    'administer commerce_surcharge' => array(
      'title' => t('Manage the UI defined rates and credit card types'),
      'restrict access' => TRUE,
    ),
  );

  return $perms;
}

/**
 * Implements hook_hook_info().
 */
function commerce_surcharge_hook_info() {
  $hooks = array(
    'commerce_surcharge_credit_card_types' => array(
      'group' => 'commerce',
    ),
    'commerce_surcharge_credit_card_types_alter' => array(
      'group' => 'commerce',
    ),
  );

  return $hooks;
}

/**
 * Returns an associative array of credit card types.
 */
function commerce_surcharge_credit_card_types() {
  $credit_card_types = &drupal_static(__FUNCTION__);

  //If it did not exist, fetch the types now.
  if (!isset($credit_card_types)) {
    module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
    $credit_card_types = commerce_payment_credit_card_types();
    // Find credit card types defined by hook_commerce_surcharge_credit_card_types().
    foreach (module_implements('commerce_surcharge_credit_card_types') as $module) {
      foreach (module_invoke($module, 'commerce_surcharge_credit_card_types') as $credit_card_type) {
        $credit_card_types = array_intersect_key($credit_card_types, drupal_map_assoc($credit_card_type));
      }
    }
  }

  // Allow other module alter credit card types.
  drupal_alter('commerce_surcharge_credit_card_types', $credit_card_types);

  return $credit_card_types;
}

/**
 * Implements hook_commerce_price_component_type_info().
 */
function commerce_surcharge_commerce_price_component_type_info() {
  return array(
    'commerce_surcharge' => array(
      'title' => t('Transaction Fee'),
      'display_title' => t('Transaction Fee'),
      'weight' => 100,
    ),
  );
}

/**
 * Implements hook_commerce_line_item_type_info().
 */
function commerce_surcharge_commerce_line_item_type_info() {
  $line_item_types = array();

  $line_item_types['commerce_surcharge'] = array(
    'name' => t('Transaction Fee'),
    'description' => t('Credit card transaction fee.'),
    'add_form_submit_value' => t('Add Transaction Fee'),
    'base' => 'commerce_commerce_surcharge_line_item',
  );

  return $line_item_types;
}

/**
 * Returns the title of a custom custom fee line item.
 */
function commerce_commerce_surcharge_line_item_title($line_item) {
  // Fallback to the line item label.
  return $line_item->line_item_label;
}

/**
 * Alter commerce_cardonfile_checkout_pane_form.
 * @param $payment
 * @param $form
 */
function commerce_surcharge_commerce_cardonfile_checkout_pane_form_alter($payment, $form) {
  if (isset($form['commerce_payment']['payment_details']['cardonfile'])) {
    if (isset($form['commerce_payment']['payment_details']['cardonfile']['#ajax'])) {
      $form['commerce_payment']['payment_details']['cardonfile']['#ajax']['callback'] = '_commerce_surcharge_commerce_payment_pane_checkout_form_details_refresh';
    }
  }
}

/**
 * Returns the payment details element for display via AJAX.
 */
function _commerce_surcharge_commerce_payment_pane_checkout_form_details_refresh($form, &$form_state) {
  $views_pay_summary = views_embed_view('commerce_cart_summary', $display_id = 'default', $form_state['order']->order_id);
  $commands[] = ajax_command_replace('.view-commerce-cart-summary', $views_pay_summary);
  $commands[] = ajax_command_replace('#payment-details', drupal_render($form['commerce_payment']['payment_details']));
  $form_state['rebuild'] = TRUE;
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Implements hook_form_alter().
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function commerce_surcharge_form_alter(&$form, &$form_state, $form_id) {
  // Exit if the current form ID is for a checkout page form...
  if (strpos($form_id, 'commerce_checkout_form_') !== 0 ||
    !commerce_checkout_page_load(substr($form_id, 23))
  ) {
    return;
  }

  // Exit if the current page's form does no include the payment checkout pane...
  if (empty($form['commerce_payment'])) {
    return;
  }

  // DENY if user is not defined or is anonymous
  if (!isset($form_state['account']) || empty($form_state['account']->uid)) {
    return;
  }

  // Exit if no payment method instance id
  if (empty($form['commerce_payment']['payment_method']['#default_value'])) {
    return;
  }

  // Exit if no credit card record.
  //if (empty($form['commerce_payment']['payment_details']['credit_card'])) {
  //return;
  //}

  // Rebuild checkout review.
  module_load_include('inc', 'commerce_surcharge', 'includes/commerce_surcharge.form');
  $form['checkout_review'] = _commerce_surcharge_checkout_review_rebuild($form, $form_state);

  // Load default surcharge if form is with a default credit card type.
  if (isset($form['commerce_payment']['payment_details']['credit_card']['type'])) {
    $form['commerce_payment']['payment_details']['credit_card']['type']['#ajax'] = array(
      'callback' => '_commerce_surcharge_ajax_callback',
    );
  }

  unset($form['commerce_payment']['payment_method']['#ajax']);
  $form['commerce_payment']['payment_method']['#ajax'] = array(
    'callback' => '_commerce_surcharge_payment_method_ajax_callback',
  );
}

/**
 * Payment method ajax call back.
 * @param $form
 * @param $form_state
 */
function _commerce_surcharge_payment_method_ajax_callback($form, &$form_state) {
  $views_pay_summary = views_embed_view('commerce_cart_summary', $display_id = 'default', $form_state['order']->order_id);
  $commands[] = ajax_command_replace('.view-commerce-cart-summary', $views_pay_summary);
  $commands[] = ajax_command_replace('#payment-details', drupal_render($form['commerce_payment']['payment_details']));
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Ajax callback while card type changes.
 */
function _commerce_surcharge_ajax_callback($form, &$form_state) {
  // Return if no valid order.
  if (!isset($form_state['order'])) {
    return;
  }
  // Set a default credit card type.
  $pane_values = $form_state['values']['commerce_payment'];

  if (($pane_values['payment_details']['credit_card']['type'])) {
    $current_card_type = $pane_values['payment_details']['credit_card']['type'];
  }
  else {
    $current_card_type = $form['commerce_payment']['payment_details']['credit_card']['type']['#default_value'];
  }
  variable_set('commerce_surcharge_current_card', $current_card_type);

  // Invoke custom rule - order id is required.
  $order = commerce_order_load($form_state['order']->order_id);
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  // Delete existing surcharge line item.
  $line_item_ids = array();

  foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
    if ($line_item_wrapper->getBundle() == COMMERCE_SURCHARGE_TYPE) {
      // Delete the line item, and remove it from the order.
      $line_item_ids[] = $line_item_wrapper->line_item_id->value();
      $order_wrapper->commerce_line_items->offsetUnset($delta);
    }
  }

  // If we found any fee type line items...
  if (!empty($line_item_ids)) {
    // Then delete the line items.
    commerce_line_item_delete_multiple($line_item_ids);
  }

  // Hook rule event.
  rules_invoke_event('commerce_surcharge_order', $order_wrapper);

  //@todo: user can setup views name.
  $views_pay_summary = views_embed_view('commerce_cart_summary', $display_id = 'default', $form_state['order']->order_id);
  $commands[] = ajax_command_replace('.view-commerce-cart-summary', $views_pay_summary);

  // Update form state.
  $form_state['rebuild'] = TRUE;
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Implements hook_commerce_cart_order_refresh().
 * @param $order_wrapper
 */
function commerce_surcharge_commerce_cart_order_refresh($order_wrapper) {
  $order = $order_wrapper->value();
  $status = $order->status;
  if ($status !== 'checkout_review') {
    // Delete surcharge line item in cart order view.
    $line_item_ids = array();
    foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
      if ($line_item_wrapper->getBundle() == COMMERCE_SURCHARGE_TYPE) {
        $line_item_ids[] = $line_item_wrapper->line_item_id->value();
        $order_wrapper->commerce_line_items->offsetUnset($delta);
      }
    }
    if (!empty($line_item_ids)) {
      commerce_line_item_delete_multiple($line_item_ids);
    }
  }
}
