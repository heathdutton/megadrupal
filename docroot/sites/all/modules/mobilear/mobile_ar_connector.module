<?php

/**
 * @file
 * This module defines a new resource for drupal services, for use with 
 * the PRAugmentedReality iOS mobile framework
 * @see https://github.com/promet/PRAugmentedReality
 *
 * This resource is attached to a temporary custom content type 'ar_object'
 * which includes fields from one or more content types
 *
 * The content types used are the ones including at least a field of type
 * geofield (coordinates: lat/lon) for the AR Framework
 */

/**
 * Implements hook_services_resources().
 */
function mobile_ar_connector_services_resources() {
  $ar_object_resource['ar_object']['operations']['index'] = array(
    'help' => 'Returns all ar_objects updated since the last check',
    'callback' => 'mobile_ar_connector_get_new_objects',
    'access callback' => 'mobile_ar_connector_get_new_objects_access',
    'access arguments' => array('access content'),
    'access arguments append' => TRUE,
    'args' => array(
      array(
        'name' => 'last_check_timestamp',
        'type' => 'int',
        'description' => 'The timestamp of the last checkup',
        'source' => array('path' => 0),
        'optional' => FALSE,
      ),
    ),
  );
  return $ar_object_resource;
}


/**
 * Mobile AR Connector Callback.
 *
 * @param int $last_check_timestamp
 *   The last update timestamp as an integer
 * 
 * @return array 
 *   A keyed array of relevant objects, relevant being:
 *   - Objects with at least a field of type geofield
 *   - Objects that were updated since the timestamp given as parameter
 */
function mobile_ar_connector_get_new_objects($last_check_timestamp = 0) {

  // Gets the fields of type geofield.
  $fields = array_keys(field_read_fields(array('type' => 'geofield')));

  // Gets the content types they are in.
  $entity_types = array();
  foreach ($fields as $field) {
    $types = field_info_field($field);
    $entity_types = array_merge($entity_types, $types['bundles']['node']);
  }

  // Gets the nodes of those content types that have been updated since the
  // last check.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->propertyCondition('status', 1)
    ->entityCondition('bundle', $entity_types, 'IN')
    ->propertyCondition('changed', $last_check_timestamp, '>');

  $ar_objects_ids = $query->execute();
  if (!isset($ar_objects_ids) || empty($ar_objects_ids)) {
    return array();
  }
  $ar_objects_raw = node_load_multiple(array_keys($ar_objects_ids['node']));

  // Call the format function to filter out irrelevant data and format the
  // rest properly.
  $ar_objects = array();
  foreach ($ar_objects_raw as $value) {
    $ar_objects[$value->nid] = mobile_ar_connector_format_arObject($value);
  }

  // An array, keyed by nid, containing the relevant fields.
  return $ar_objects;
}


/**
 * Implements drupal_alter hook.
 *
 * Appends the names of the fields which mobile_ar_connector_get_new_objects() 
 * function should return to the caller.
 */
function mobile_ar_connector_mobile_ar_connector_fields_alter(&$data) {
  $data = array_merge($data, array('nid', 'title'));
}


/**
 * Main formatting/filtering function.
 * 
 * - Gets rid of fields that are irrelevant for this application
 * - Format the fields into an mobile friendly format
 *   Without complex nesting
 *   Without irrelevant data, to reduce the amount of data to a minimum
 */
function mobile_ar_connector_format_arObject($ar_object) {

  $wrapper = entity_metadata_wrapper('node', $ar_object);

  // Grab any other fields that people would want to have.
  $fields_to_keep = array();
  drupal_alter('mobile_ar_connector_fields', $fields_to_keep);

  $formatted_ar_object = array();

  foreach ($wrapper->getPropertyInfo() as $field_name => $field_value) {
    // Get any fields that need to be added, that are specified by name.
    if (in_array($field_name, $fields_to_keep)) {
      $formatted_ar_object[$field_name] = $wrapper->$field_name->value();
    }

    // Format the address and coordinates properly.
    elseif ($wrapper->$field_name->type() == 'addressfield') {
      $full_address  = $wrapper->$field_name->value();

      $formatted_ar_object['address']['locality'] = $full_address['locality'];
      $formatted_ar_object['address']['postal_code'] = $full_address['postal_code'];
      $formatted_ar_object['address']['administrative_area'] = $full_address['administrative_area'];

      if (drupal_strlen($full_address['premise']) > 0) {
        $formatted_ar_object['address']['thoroughfare'] = $full_address['thoroughfare'] . ', ' . $full_address['premise'];
      }
      else {
        $formatted_ar_object['address']['thoroughfare'] = $full_address['thoroughfare'];
      }
    }
    elseif ($wrapper->$field_name->type() == 'geofield') {
      $full_coordinates  = $wrapper->$field_name->value();

      $formatted_ar_object['coordinates']['lat'] = $full_coordinates['lat'];
      $formatted_ar_object['coordinates']['lon'] = $full_coordinates['lon'];
    }
  }

  return $formatted_ar_object;
}


/**
 * Allows access to anyone as long as they only request to view/access content.
 */
function mobile_ar_connector_get_new_objects_access($op = 'view', $args = array()) {
  $access = FALSE;

  if ($op == 'view' || $op == 'access content') {
    $access = TRUE;
  }

  return $access;
}
