<?php

/**
 * @file
 * Contains test suite for reply module
 */

/**
 * Defines a test for reply module.
 */
class ReplyTest extends DrupalWebTestCase {

  /**
   * Profile to use.
   */
  protected $profile = 'testing';

  /**
   * Admin user
   *
   * @var \StdClass
   */
  protected $adminUser;

  /**
   * Modules to enable.
   *
   * @var array
   */
  public static $modules = array(
    'reply',
    'field_ui',
    'node',
    'text',
  );

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => 'Reply',
      'description' => 'Test reply field functionality.',
      'group' => 'Reply',
    );
  }

  /**
   * Permissions to grant admin user.
   *
   * @var array
   */
  protected $permissions = array(
    'access administration pages',
    'administer content types',
    'administer replies',
    'create ponies content',
    'edit any ponies content',
    'administer nodes',
    'administer reply bundles',
  );

  /**
   * Sets up the test.
   */
  protected function setUp() {
    parent::setUp(self::$modules);
    $this->drupalCreateContentType(array('type' => 'ponies'));
    $this->adminUser = $this->drupalCreateUser($this->permissions);
  }

  /**
   * Tests adding and editing values using a reply field.
   */
  public function testReply() {
    $this->drupalLogin($this->adminUser);
    // Add a new reply bundle.
    $this->addReplyBundle(array('bundle' => 'ponies'));
    // Add a new reply field.
    $this->drupalGet('admin/structure/types/manage/ponies/fields');
    $edit = array(
      'fields[_add_new_field][label]' => 'Foobar',
      'fields[_add_new_field][field_name]' => 'foobar',
      'fields[_add_new_field][type]' => 'reply',
      'fields[_add_new_field][widget_type]' => 'reply',
    );
    $this->drupalPost(NULL, $edit, t('Save'));
    $this->drupalPost(NULL, array(
      'field[settings][bundle]' => 'ponies',
    ), t('Save field settings'));

    $this->drupalPost(NULL, array(), t('Save settings'));
    $this->assertRaw(t('Saved %name configuration', array('%name' => 'Foobar')));
    // Save display settings.
    $this->drupalPost('admin/structure/types/manage/ponies/display', array(), t('Save'));

    // Test the fields exist.
    $this->drupalGet('node/add/ponies');
    // All defaut values should be inherit.
    $this->assertFieldByName('field_foobar[und][0][access]', REPLY_INHERIT, 'Found reply access field');
    $this->assertFieldByName('field_foobar[und][0][display]', REPLY_INHERIT, 'Found reply display field');
    $this->assertFieldByName('field_foobar[und][0][form]', REPLY_INHERIT, 'Found reply form field');
    $this->assertFieldByName('field_foobar[und][0][allow_reply]', REPLY_INHERIT, 'Found reply allow_reply field');

    // Submit node data.
    $edit = array(
      'title' => 'Barfoo',
    );

    $this->drupalPost(NULL, $edit, t('Save'));
    $entities = entity_load('node', FALSE, array(
      'title' => 'Barfoo',
    ));

    $this->assertEqual(1, count($entities), 'Entity was saved');
    $node = reset($entities);
    $this->drupalGet('node/' . $node->nid);
    $this->assertText('Barfoo');
    $this->assertText('Foobar');
    $this->assertField('field_reply_body[und][0][value]', 'Found reply body field');
    $elements = $this->xpath('//div[@class=:replies]', array(
      ':replies' => 'replies',
    ));
    $this->assertEqual(count($elements), 0, 'No empty replies div');
    $this->drupalPost(NULL, array(
      'field_reply_body[und][0][value]' => 'echoes hurt my ears',
    ), t('Submit'));
    $replies = reply_load_multiple(FALSE);
    $this->assertEqual(1, count($replies), 'Entity was saved');
    $reply = reset($replies);
    $this->assertEqual($reply->field_reply_body[LANGUAGE_NONE][0]['value'], 'echoes hurt my ears');
    $this->assertText('echoes hurt my ears');
    $elements = $this->xpath('//div[@id=:reply-id]', array(
      ':reply-id' => 'reply-' . $reply->id,
    ));
    $this->assertEqual(count($elements), 1, 'Found reply tpl.');
    $reply_edit_url = url('reply/' . $reply->id . '/edit', array('query' => array('destination' => 'node/' . $node->nid)));
    $elements = $this->xpath('//a[@href=:reply-edit]', array(
      ':reply-edit' => $reply_edit_url,
    ));
    $this->assertEqual(!empty($elements[0]), 'Found reply edit link to ' . $reply_edit_url);
    $reply_delete_url = url('reply/' . $reply->id . '/delete', array('query' => array('destination' => 'node/' . $node->nid)));
    $elements = $this->xpath('//a[@href=:reply-delete]', array(
      ':reply-delete' => $reply_delete_url,
    ));
    $this->assertEqual(!empty($elements[0]), 'Found reply delete link to ' . $reply_delete_url);
    // Turn off replying.
    $this->drupalGet('node/' . $node->nid . '/edit');
    $this->drupalPost(NULL, array(
      'field_foobar[und][0][access]' => REPLY_ACCESS_READ,
    ), t('Save'));
    $this->assertText('echoes hurt my ears');
    $this->assertNoField('field_reply_body[und][0][value]', 'Did not find reply body field');
    $this->drupalGet('node/' . $node->nid . '/edit');
    $this->drupalPost(NULL, array(
      'field_foobar[und][0][access]' => REPLY_ACCESS_NONE,
    ), t('Save'));
    $this->assertNoText('echoes hurt my ears');
    $this->assertNoField('field_reply_body[und][0][value]', 'Did not find reply body field');
    $elements = $this->xpath('//div[@class=:replies-wrapper]', array(
      ':replies-wrapper' => 'replies-wrapper',
    ));
    $this->assertEqual(count($elements), 0, 'Found no replies wrapper.');

    // Change the defaults.
    $this->drupalGet('admin/structure/reply/manage/ponies');
    $this->drupalPost(NULL, array(
      'access' => REPLY_ACCESS_READ,
    ), t('Submit'));
    // Submit node data.
    $edit = array(
      'title' => 'Bazbar',
    );

    $this->drupalPost('node/add/ponies', $edit, t('Save'));
    $entities = entity_load('node', FALSE, array(
      'title' => 'Bazbar',
    ));

    $this->assertEqual(1, count($entities), 'Entity was saved');
    $node = reset($entities);
    $this->drupalGet('node/' . $node->nid);
    $this->assertText('Bazbar');
    $this->assertText('Foobar');
    // Check default read-only inherited.
    $this->assertNoField('field_reply_body[und][0][value]', 'Found reply body field');

    // Edit the reply.
    $this->drupalGet('reply/' . $reply->id . '/edit');
    $this->assertLinkByHref('reply/' . $reply->id . '/delete');

    // Login as a user without the delete permission.
    $this->drupalLogout();
    // Flush permissions now we have added the new bundle.
    $this->checkPermissions(array(), TRUE);
    $this->drupalLogin($this->drupalCreateUser(array('edit ponies reply')));
    $this->drupalGet('reply/' . $reply->id . '/edit');
    $this->assertNoLinkByHref('reply/' . $reply->id . '/delete');
  }

  /**
   * Creates a new reply bundle.
   *
   * @param array $values
   *   Bundle values
   *
   * @return object|bool
   *   Created bundle if successful, else FALSE.
   */
  protected function addReplyBundle(array $values = array()) {
    $this->drupalGet('admin/structure/reply');
    $this->clickLink(t('Add reply bundle'));
    $values += array(
      'name' => $this->randomName(8),
      'bundle' => $this->randomName(8),
      'description' => $this->randomName(20),
      'access' => REPLY_ACCESS_FULL,
      'display' => REPLY_LIST_FLAT,
      'form' => REPLY_FORM_PAGE_SAME,
      'allow_reply' => REPLY_ALLOW_REPLY,
    );
    $this->drupalPost(NULL, $values, t('Submit'));
    $this->assertText($values['name']);
    $bundle = reply_bundle_load($values['bundle']);
    $this->assertTrue($bundle);
    // Add a body field.
    $this->drupalGet('admin/structure/reply/manage/ponies/fields');
    $edit = array(
      'fields[_add_new_field][label]' => 'Reply',
      'fields[_add_new_field][field_name]' => 'reply_body',
      'fields[_add_new_field][type]' => 'text_long',
      'fields[_add_new_field][widget_type]' => 'text_textarea',
    );
    $this->drupalPost(NULL, $edit, t('Save'));
    $this->drupalPost(NULL, array(), t('Save field settings'));
    $this->drupalPost(NULL, array(), t('Save settings'));
    $this->assertRaw(t('Saved %name configuration', array('%name' => 'Reply')));
    // Setup display settings.
    $this->drupalGet('admin/structure/reply/manage/ponies/display');
    $this->drupalPost(NULL, array(
      'fields[field_reply_body][label]' => 'hidden',
    ), t('Save'));
    return $bundle;
  }

}
