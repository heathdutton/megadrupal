<?php

/**
 * @file
 * Allows Drupal to interact with FileMaker databases.
 */

// Yo. Just dropping some knowledge: Most of the action is in the .admin.inc file.

require_once('classes/fmBase.php');
require_once('classes/fmAdmin.php');
require_once('classes/fmElement.php');
require_once('classes/fmConnection.php');
require_once('classes/fmField.php');
require_once('classes/fmWebLayout.php');

define('FILEMAKER_ADMIN_PATH', 'admin/config/development/filemaker');

/**********************************************************************************
 * Core hooks (not node type).
 *********************************************************************************/

/**
 * Implementation of hook_menu().
 */
function filemaker_menu() {
  $items = array();

  // Settings - FileMaker authentication connections.

  //List of connections to FileMaker databases.
  $items[FILEMAKER_ADMIN_PATH] = array(
    'title' =>  'FileMaker settings',
    'description'   => 'Configure the FileMaker module. Create, edit, and delete FileMaker connections.',
    'page callback' => 'filemaker_admin_settings_page',
    'access callback' => 'user_access',
    'access arguments' => array('administer filemaker connections'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'filemaker.admin.inc',
  );

  // Form to edit or insert a FileMaker connection record from settings.
  $items[FILEMAKER_ADMIN_PATH . '/connection'] = array(
    'title' => 'FileMaker connections',
    'description' => 'View, add, or edit FileMaker connections',
    'page callback' => 'filemaker_admin_settings_connection_page',
    'page arguments' => array(5),
    'access callback' => 'user_access',
    'access arguments' => array('administer filemaker connections'),
    'type' => MENU_CALLBACK,
    'file' => 'filemaker.admin.inc',
  );

  // Delete connection.
  $items[FILEMAKER_ADMIN_PATH . '/connection/%/delete'] = array(
    'title' => 'Confirm deletion of FileMaker connection',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('filemaker_delete_form', 'connection', 5),
    'access callback' => 'user_access',
    'access arguments' => array('administer filemaker connections'),
    'type' => MENU_CALLBACK,
    'file' => 'filemaker.admin.inc',
  );

  // Tabs attached to FileMaker nodes

  // FileMaker layout tab, attached to filemaker nodes.
  $items['node/%node/layout'] = array(
    'title' => 'Layout Mode',
    'description' => 'FileMaker layout mode',
    'page callback' => 'filemaker_fields_tab',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array('filemaker layout mode'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 200,
    'file' => 'filemaker.admin.inc',
  );
  
  // FileMaker tab, attached to filemaker nodes.
  $items['node/%node/filemaker'] = array(
    'title' => 'FileMaker Mode',
    'description' => 'FileMaker mode',
    'page callback' => 'filemaker_browse_tab',
    'page arguments' => array(1, 'default'),
    'access callback' => 'user_access',
    'access arguments' => array('filemaker layout mode'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 199,
    'file' => 'filemaker.admin.inc',
  );

  // FileMaker settings tab, attached to filemaker nodes.
  $items['node/%node/layout/settings'] = array(
    'parent' => 'node/%/layout',
    'title' => 'Settings',
    'page callback' => 'filemaker_settings_tab',
    'page arguments' => array(1),
    'description' => 'The FileMaker settings for this web layout',
    'access callback' => 'user_access',
    'access arguments' => array('filemaker layout mode'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'filemaker.admin.inc',
    'weight' => 9,
  );

  // FileMaker fields tab, attached to filemaker nodes.
  $items['node/%node/layout/fields'] = array(
    'parent' => 'node/%/layout',
    'title' => 'Fields',
    'page callback' => 'filemaker_fields_tab',
    'page arguments' => array(1),
    'description' => 'The FileMaker fields attached to this web layout',
    'access callback' => 'user_access',
    'access arguments' => array('filemaker layout mode'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'filemaker.admin.inc',
    'weight' => 1,
  );

  // Form to insert or edit a FileMaker field, attached to a node.
  $items['node/%node/layout/field'] = array(
    'title' => 'Field',
    'description' => 'The administrative form to add a FileMaker field to a node, or edit an existing field',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('filemaker_field_form', 1, 4),
    'access callback' => 'user_access',
    'access arguments' => array('filemaker layout mode'),
    'type' => MENU_CALLBACK,
    'file' => 'filemaker.admin.inc',
  );

  // FileMaker fields tab, delete.
  $items['node/%node/layout/field/%/delete'] = array(
    'title' => 'Confirm Deletion of FileMaker field.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('filemaker_delete_form', 'field', 4, true),
    'access callback' => 'user_access',
    'access arguments' => array('filemaker layout mode'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 200,
    'file' => 'filemaker.admin.inc',
  );
  
  // FileMaker browse tab, attached to filemaker nodes.
  $items['node/%node/filemaker/browse'] = array(
    'title' => 'Browse Mode',
    'description' => 'FileMaker Browse Mode',
    'page callback' => 'filemaker_browse_tab',
    'page arguments' => array(1, 4),
    'access callback' => 'user_access',
    'access arguments' => array('filemaker browse mode'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'filemaker.admin.inc',
    'weight' => 1,
  );

  // FileMaker find tab, attached to filemaker nodes.
  $items['node/%node/filemaker/find'] = array(
    'title' => 'Find Mode',
    'description' => 'FileMaker Find Mode',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('filemaker_record_form', 1, 'find'),
    'access callback' => 'user_access',
    'access arguments' => array('filemaker find mode'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'filemaker.admin.inc',
    'weight' => 2,
  );

  // FileMaker create tab, attached to filemaker nodes.
  $items['node/%node/filemaker/create'] = array(
    'title' => 'Create Mode',
    'description' => 'FileMaker Create Mode',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('filemaker_record_form', 1, 'edit'),
    'access callback' => 'user_access',
    'access arguments' => array('filemaker create mode'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'filemaker.admin.inc',
    'weight' => 3,
  );

  // FileMaker delete callback, called from browse mode.
  $items['node/%node/filemaker/browse/%/delete'] = array(
    'title' => 'Confirm Deletion of FileMaker record.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('filemaker_delete_fm_record_form', 1, 4),
    'access callback' => 'user_access',
    'access arguments' => array('filemaker delete record'),
    'type' => MENU_CALLBACK,
    'file' => 'filemaker.admin.inc',
  );

  return $items;
}

/**
 * Implementation of hook_permission().
 */
function filemaker_permission() {

  return array(

    'administer filemaker connections' => array(
      'title' => t('Administer global FileMaker settings'), 
      'description' => t('Allow users control how the FileMaker module behaves, and which databases it connects to.'),
    ), 

    'filemaker create mode' => array(
      'title' => t('Create FileMaker records'), 
      'description' => t('Allow users to create records in FileMaker through forms in Drupal.'),
    ),

    'filemaker find mode' => array(
      'title' => t('Search FileMaker records'), 
      'description' => t('Allow users to enter find mode and search for records stored in FileMaker.'),
    ),

    'filemaker browse mode' => array(
      'title' => t('View FileMaker records'), 
      'description' => t('Allow users to enter browse mode and see data stored in FileMaker.'),
    ),

    'filemaker edit record' => array(
      'title' => t('Edit a FileMaker record'), 
      'description' => t('Allow users to edit a record in FileMaker.'),
    ),

    'filemaker delete record' => array(
      'title' => t('Delete a FileMaker record'), 
      'description' => t('Allow users to delete a record from FileMaker.'),
    ),

    'filemaker layout mode' => array(
      'title' => t('Edit FileMaker web layouts'), 
      'description' => t('Allow users to add, edit, or remove fields, scripts, and other elements from FileMaker web layouts.'),
    ),
  );
}

/**********************************************************************************
 * Core hooks -- NODE.
 *********************************************************************************/

/**
 * Implementation of hook_node_info().
 */
function filemaker_node_info() {
  return array(
    'filemaker' => array(
      'name' => t('FileMaker web layout'),
      'base' => 'filemaker',
      'description' => t('A web layout provides an interface to a layout in a FileMaker database. You will need to have a layout defined, and accessible to XML web publishing, in your FileMaker database. A FileMaker web layout will not work without it.'),
      'has_title' => true,
      'title_label' => t('Web layout name'),
      'help' => t('You will need to have a layout defined, and accessible to XML web publishing, in your FileMaker database. A FileMaker web layout will not work without it.'),
    ),
  );
}

/**
 * Implementation of hook_form().
 */
function filemaker_form($node, &$form_state) {

  // Do we have a connection to a FileMaker database defined?
  $connection_model = new FmConnection();
  $connection_options = $connection_model->get_all_as_options_for_form();
  
  // Abandon if we don't have a connection.
  if ( ! $connection_options) {
    $message = t('You must have a connection to a FileMaker database before you can create any FileMaker web layouts.');
    drupal_set_message($message, 'error', false);
    drupal_goto(FILEMAKER_ADMIN_PATH . '/connection');
  }

  // Good to go. Build and return our node form.
  $filemaker = new FmWebLayout();
  return $filemaker->admin_form($node, $connection_options);
}

/**
 * Implementation of hook_insert().
 */
function filemaker_insert($node) {
  $filemaker = new FmWebLayout();
  $filemaker->save_from_node($node);
  require_once('filemaker.admin.inc');
  filemaker_redirect_to_settings_if_needed($node);
}

/**
 * Implementation of hook_load().
 */
function filemaker_load($nodes) {
  foreach ($nodes as $node) {
    $filemaker = new FmWebLayout($node->nid, FALSE);
    $filemaker->set_values_in_node($node);
  }
}

/**
 * Implementation of hook_view().
 */
function filemaker_view($node, $view_mode) {  
  if ($view_mode == 'full') {
    if ($node->drupal_view == 'find' && arg(2) == 'find') {
      $filemaker = new FmWebLayout($node->nid);
      $node->content['filemaker'] = array(
        '#markup' => $filemaker->found_set(),
        '#weight' => 1,
      );
    }
    else {
      if ($node->drupal_view != 'default') {
        $node->content['filemaker'] = drupal_get_form('filemaker_view_form', $node);
      }
    }
  }
  return $node;
}

/**
 * Builds the form for the default Drupal view.
 *
 * @return array
 *  Drupal fapi form array
 */
function filemaker_view_form(array $form, array $form_state, $node) {  
  switch($node->drupal_view) {
    case 'create':
      $filemaker = new FmWebLayout($node->nid);
      return $filemaker->edit_form(NULL, 'drupal');
    case 'find':
      $filemaker = new FmWebLayout($node->nid);
      return $filemaker->find_form('drupal');
  }
}

/**
 * Submit function for filemaker_record_form::edit_form.
 *
 * Creates a single FileMaker record.
 */
function filemaker_default_create_submit(&$form, &$form_state) {
  require_once('filemaker.admin.inc');
  return filemaker_create_submit($form, $form_state, 'drupal');
}

/**
 * Submit function for filemaker_record_form::edit_form.
 *
 * Creates a single FileMaker record.
 */
function filemaker_default_find_submit(&$form, &$form_state) {
  $form_state['redirect'] = 'node/' . arg(1) . '/find';
  require_once('filemaker.admin.inc');
  filemaker_find_submit($form, $form_state, 'drupal');
}

/**
 * Implementation of hook_update().
 */
function filemaker_update($node) {
  $filemaker = new FmWebLayout();
  $filemaker->save_from_node($node);
  require_once('filemaker.admin.inc');
  filemaker_redirect_to_settings_if_needed($node);
}

/**
 * Implementation of hook_delete().
 */
function filemaker_delete($node) {
  $filemaker = new FmWebLayout();
  $filemaker->set_values_from_node($node);
  $filemaker->delete();
}
