<?php

/**
 * @file
 * Compile SCSS into CSS.
 */

/**
 * Implements hook_help().
 */
function scssphp_help($path, $arg) {
  switch ($path) {
  case 'admin/help#scssphp':
    $output = '<p>' . t('<a href="@scssphp">SCSSPHP</a> compiles <a href="@scss">SCSS</a> into CSS, allowing features like variables, mixins, imports, color manipulation, functions, and many others.  Check the <a href="@status">Status Report</a> for more information.', array(
      '@scssphp' => 'http://leafo.net/scssphp/',
      '@scss' => 'http://sass-lang.com/',
      '@status' => url('admin/reports/status'),
    )) . '</p>';
    $output .= '<p class="specialClass">' . t('If this text has a green background, then <strong>SCSSPHP</strong> is <em>working properly</em>.') . '</p>';
    drupal_add_css(drupal_get_path('module', 'scssphp') . '/scssphp.scss');
    return $output;
  }
}

/**
 * Implements hook_css_alter().
 */
function scssphp_css_alter(&$css) {
  static $loaded = NULL;

  // SCSSPHP will create new files in the public files directory.
  $directory = 'public://scssphp';
  if (file_prepare_directory($directory, FILE_CREATE_DIRECTORY)) {
    // Retrieve a list of all xCSS files that need processing.
    $files = array();
    foreach ($css as $data => $options) {
      // Only act on .scss files.
      if ($options['type'] == 'file' && substr($data, -5) == '.scss') {
        // Swap out the CSS file with the SCSS compiled file.
        $destination = $directory . '/' . basename($data) . '.css';
        // Add the file to the list of SCSS that we must process.
        if (!file_exists($destination)) {
          // Queue up the file to be compiled.
          $files[$data] = $destination;
        }
        else {
          // Since the file already exists, we will replace it.
          $wrapper = file_stream_wrapper_get_instance_by_uri($destination);
          $css[$data]['data'] = $wrapper->getDirectoryPath() . '/' . file_uri_target($destination);
        }
      }
    }
    // Process the SCSS files if there are any to process.
    if (!empty($files)) {
      // Make sure the SCSS class is available.
      if (_scssphp_load()) {
        foreach ($files as $file => $destination) {
          // Compile the SCSS to CSS.
          $scss = new scssc();
          $scss->addImportPath(dirname($file));
          $contents = file_get_contents($file);
          $final = $scss->compile($contents);

          // Attempt to save the new file.
          if (file_unmanaged_save_data($final, $destination, FILE_EXISTS_REPLACE)) {
            // Now that the file exists, we can replace the CSS with it.
            $wrapper = file_stream_wrapper_get_instance_by_uri($destination);
            $css[$data]['data'] = $wrapper->getDirectoryPath() . '/' . file_uri_target($destination);
          }
        }
      }
    }
  }
}

/**
 * Implements hook_flush_caches().
 */
function scssphp_flush_caches() {
  // Delete any compiled SCSS files.
  file_unmanaged_delete_recursive('public://scssphp');
}

/**
 * Load the SCSSPHP library.
 */
function _scssphp_load() {
  $autoload = composer_manager_vendor_dir() . '/autoload.php';
  include_once($autoload);
  return class_exists('scssc');
}
