<?php

/**
 * @file
 * Domain Country Path implementation.
 */

// Since we using hook_boot we must include common.inc manually for
// module_load_include to work.
if (!function_exists('drupal_system_listing')) {
  require_once DRUPAL_ROOT . '/includes/common.inc';
}
/**
 * Implements hook_boot().
 */
function country_path_boot() {
  // Do nothing, this hook is only to load module file during boot phase.
}

/**
 * Implements hook_domain_bootstrap_lookup().
 */
function country_path_domain_bootstrap_lookup($domain) {
  // Support custom HTTP :port in URL.
  $domain['subdomain'] = current(explode(':', $domain['subdomain']));

  $args = arg();
  $domain_suffix = array_shift($args);
  // Bypass requests to files in 'sites/default'.
  if ($domain_suffix == 'sites' && $args[0] == 'default') {
    return;
  }

  $real_subdomain = $domain_suffix . '.' . $domain['subdomain'];
  // Global $is_https is not initialized yet.
  $is_https = isset($_SERVER['HTTPS']) && strtolower($_SERVER['HTTPS']) == 'on';

  if (!(php_sapi_name() != 'cli' && (!defined('MAINTENANCE_MODE') || MAINTENANCE_MODE != 'update'))) {
    // Nothing to do here.
    return;
  }

  if ($is_https) {
    // Detect Secure domain.
    $secure_hosts = variable_get('country_path_secure_hosts', array());
    $secure_base_url = 'https://' . $domain['subdomain'] . '/' . $domain_suffix;
    $domain_id = array_search($secure_base_url, $secure_hosts);
    if (!$domain_id) {
      return;
    }

    $real_domain = domain_lookup($domain_id);
    if ($real_domain !== -1) {
      $_GET['q'] = implode('/', $args);
      return $real_domain;
    }

    return;
  }

  // Else detect UnSecure domain with suffix.
  $real_domain = domain_lookup(NULL, $real_subdomain);
  if ($real_domain !== -1) {
    $_GET['q'] = implode('/', $args);
    return $real_domain;
  }

  // Else Normal lookup for domain without suffix.
  $real_domain = domain_lookup(NULL, $domain['subdomain']);
  if ($real_domain !== -1) {
    return $real_domain;
  }
  // Else fallback to International domain.
  $real_domain = domain_lookup($international_domain_id = variable_get('country_path_international_domain_id', -1));
  if ($real_domain !== -1) {
    if ($real_domain['subdomain'] == $domain['subdomain']) {
      return $real_domain;
    }
    else {
      // Requseted Domain name is unknown in Domain(country) settings.
      // Check Extra Exclusions
      // to see if the URL is an imagecache URL, etc.
      // normally we should't get here.
      $req = request_uri();
      $bypass_exclusions = variable_get('country_path_domain_bypass_exclusion', array('default/files/styles'));
      foreach ($bypass_exclusions as $exclusion) {
        if (strpos($req, $exclusion) !== FALSE) {
          return;
        }
      }

      // By pass on root page / (http://www.makeupforever.com/).
      if ('/' == $req) {
        $main_domain = explode('.', $real_domain['subdomain']);
        array_shift($main_domain);
        $main_domain = join('.', $main_domain);
        if ($main_domain == $domain['subdomain']) {
          return $real_domain;
        }
      }

      // Redirects to correct domain.
      $domain_path = country_path_get_real_domain_path($real_domain);
      drupal_goto(rtrim($domain_path, '/') . $req, array('external' => TRUE), $http_response_code = 301);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function country_path_form_domain_form_alter(&$form, $form_state) {
  $form['subdomain']['#element_validate'][] = 'country_path_subdomain_validate';
  $form['#submit'][] = 'country_path_subdomain_submit';
  $secure_host = '';

  if ($form['#domain']['domain_id']) {
    // Updating domain.
    $domain_suffix = domain_conf_variable_get($form['#domain']['domain_id'], 'domain_suffix');
    $secure_host = domain_conf_variable_get($form['#domain']['domain_id'], 'securepages_basepath_ssl');
    if ($domain_suffix) {
      $subdomain = $form['subdomain']['#default_value'];
      // Disable domain check.
      variable_set('domain_skip_domain_check', TRUE);
      if (0 === strpos($subdomain, $domain_suffix['suffix'])) {
        $form['subdomain']['#default_value'] = str_replace($domain_suffix['suffix'] . '.', '', $subdomain) . '/' . $domain_suffix['suffix'];
      }
    }
  }

  // Secure domain.
  if (module_exists('securepages')) {
    $form['subdomain']['#weight'] = -3;
    $form['sitename']['#weight'] = -2;

    $form['securepages_basepath_ssl'] = array(
      '#type' => 'textfield',
      '#title' => t('Secure Base URL'),
      '#default_value' => $secure_host,
      '#weight' => -1,
    );
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alters domain settings form.
 */
function country_path_form_domain_conf_form_alter(&$form, $form_state) {
  $domain = domain_load($form['domain_id']['#value']);
  if (empty($domain)) {
    return;
  }
  $domain_url = country_path_get_real_domain_path($domain);
  drupal_set_title(t('Settings for !domain', array('!domain' => $domain_url)));

  if (isset($form['Site configuration']['site_frontpage']['#field_prefix'])) {
    $form['Site configuration']['site_frontpage']['#field_prefix'] = $domain_url;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function country_path_form_domain_alias_form_alter(&$form, $form_state) {
  $domain = domain_load($form['domain_id']['#value']);
  if (empty($domain)) {
    return;
  }
  $domain_url = country_path_get_real_domain_path($domain);
  drupal_set_title(t('Aliases for !domain', array('!domain' => $domain_url)));

  if (isset($form['domain']['#markup'])) {
    $form['domain']['#markup'] = t('Registered aliases for !domain', array(
      '!domain' => l($domain_url, $domain_url, array('absolute' => TRUE))));
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function country_path_form_domain_theme_form_alter(&$form, $form_state) {
  $domain = domain_load($form['domain_id']['#value']);
  if (empty($domain)) {
    return;
  }
  $domain_url = country_path_get_real_domain_path($domain);
  drupal_set_title(t('Theme for !domain', array('!domain' => $domain_url)));
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alters domain locale form.
 */
function country_path_form_domain_locale_form_alter(&$form, $form_state) {
  $domain = domain_load($form['domain_id']['#value']);
  if (empty($domain)) {
    return;
  }
  $domain_url = country_path_get_real_domain_path($domain);
  drupal_set_title(t('Edit domain languages for !domain', array('!domain' => $domain_url)));
  $form['domain']['#markup'] = t('Enabled languages for !domain', array(
    '!domain' => l($domain_url, $domain_url, array('absolute' => TRUE)),
    ));
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alters domain delete form.
 */
function country_path_form_domain_delete_form_alter(&$form, $form_state) {
  $domain = domain_load($form['domain']['#value']['domain_id']);
  if (empty($domain)) {
    return;
  }
  $domain_url = country_path_get_real_domain_path($domain);
  drupal_set_title(t('Are you sure you wish to delete the domain record for !domain?', array('!domain' => $domain_url)));
}


/**
 * Implements element_validate callback which changed subdomain value.
 */
function country_path_subdomain_validate(&$element, &$form_state, $complete_form) {
  // Trim the submitted value.
  $subdomain = trim($form_state['values']['subdomain']);
  if (!empty($subdomain) && domain_valid_domain($subdomain)) {
    $pattern = '%^([a-z0-9\.\-]*)/([a-z0-9]+)%i';
    $matches = array();
    if (preg_match($pattern, $subdomain, $matches)) {
      if (count($matches) == 3) {
        $real_subdomain = $matches[1];
        $suffix = $matches[2];
        if (!domain_valid_domain($real_subdomain)) {
          if ($element['#default_value'] == $real_subdomain . '/' . $suffix) {
            $element['#default_value'] = $suffix . '.' . $real_subdomain;
          }
          form_set_value($element, $suffix . '.' . $real_subdomain, $form_state);
          $form_state['domain_suffix'] = array(
            'suffix' => $suffix,
            'subdomain' => $real_subdomain,
          );
        }
      }
    }
  }
}

/**
 * Submit callback for domain form.
 */
function country_path_subdomain_submit($form, $form_state) {
  $domain_id = 0;
  if ($form['#domain']['domain_id']) {
    $domain_id = $form['#domain']['domain_id'];
  }
  elseif (isset($form_state['values']['domain_id'])) {
    $domain_id = $form_state['values']['domain_id'];
  }

  if (empty($domain_id)) {
    // Nothing to do.
    return;
  }

  if (isset($form_state['domain_suffix']) && !empty($form_state['domain_suffix'])) {
    domain_conf_variable_set($domain_id, 'domain_suffix', $form_state['domain_suffix']);
  }
  else {
    domain_conf_variable_delete($domain_id, 'domain_suffix');
  }

  // Secure domain.
  if (module_exists('securepages')) {
    $secure_hosts = variable_get('country_path_secure_hosts', array());
    if (isset($form_state['values']['securepages_basepath_ssl']) && !empty($form_state['values']['securepages_basepath_ssl'])) {
      domain_conf_variable_set($domain_id, 'securepages_basepath_ssl', $form_state['values']['securepages_basepath_ssl']);
      if (isset($form_state['domain_suffix']) && !empty($form_state['domain_suffix'])) {
        domain_conf_variable_set($domain_id, 'securepages_basepath', 'http://' . $form_state['domain_suffix']['subdomain']);
      }
      else {
        domain_conf_variable_set($domain_id, 'securepages_basepath', rtrim(domain_get_path($form['#domain']), '/'));
      }
      $secure_hosts[$domain_id] = rtrim($form_state['values']['securepages_basepath_ssl'] . '/' . $form_state['domain_suffix']['suffix'], '/');
    }
    else {
      domain_conf_variable_delete($domain_id, 'securepages_basepath_ssl');
      domain_conf_variable_delete($domain_id, 'securepages_basepath');
      unset($secure_hosts[$domain_id]);
    }
    asort($secure_hosts);
    variable_set('country_path_secure_hosts', $secure_hosts);
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function country_path_module_implements_alter(&$implementations, $hook) {
  switch ($hook) {
    case 'url_outbound_alter':
    case 'domain_path':
      // Move our hook implementation to the end of the list.
      $group = $implementations['country_path'];
      unset($implementations['country_path']);
      $implementations['country_path'] = $group;
      break;

  }
}

/**
 * Allows modules to alter path when rewriting URLs.
 *
 * This hook will fire for all paths and may be resource-intensive.
 * Look at Domain Prefix for best practices implementation. In Domain
 * Prefix, we only include this function if we know it is necessary.
 *
 * @see domain_prefix_init()
 * @see hook_url_outbound_alter()
 *
 * @param int $domain_id
 *   The domain_id taken from {domain}.
 * @param string $path
 *   The internal drupal path to the node.
 * @param array $options
 *   The path options.
 * @param string $original_path
 *   The raw path request from the URL.
 *
 * @ingroup domain_hooks
 */
function country_path_domain_path($domain_id, &$path, &$options, $original_path) {
  $default_id = domain_default_id();
  if ($domain_id == $default_id) {
    $current_domain = domain_get_domain();
    if ($current_domain != -1 && $current_domain['domain_id'] != $default_id) {
      $domain_suffix = domain_conf_variable_get($current_domain['domain_id'], 'domain_suffix', FALSE, TRUE);
      if ($domain_suffix) {
        $path = substr($path, strlen($domain_suffix['suffix']) + 1);
      }
    }
  }
}

/**
 * Rewrite URLs for the URL language provider.
 */
function country_path_url_outbound_alter(&$path, &$options, $original_path) {

  if (!$options['external'] && empty($options['no_domain'])) {
    $domain = domain_get_domain();
    if ($domain) {
      $domain_suffix = domain_conf_variable_get($domain['domain_id'], 'domain_suffix');
      if ($domain_suffix) {
        $options['prefix'] = $domain_suffix['suffix'] . '/' . $options['prefix'];
      }
    }
  }

  // Theme resources should not countain any prefix.
  global $theme;
  $theme_path = drupal_get_path('theme', $theme);
  if (strpos($path, $theme_path) !== FALSE) {
    $options['prefix'] = '';
  }
  // Sitemap.
  if (isset($domain) && $domain['domain_id'] == variable_get('country_path_sitemap_domain', 1) && (('sitemap.xml' == $original_path) || ('sitemap.xsl' == $original_path))) {
    $options['prefix'] = '';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alters domain form.
 */
function country_path_form_domain_overview_form_alter(&$form, $form_state) {
  $active_domain = domain_get_domain();
  foreach ($form['domain'] as $domain_id => $fields) {
    if (is_numeric($domain_id)) {
      $domain_suffix = domain_conf_variable_get($domain_id, 'domain_suffix');
      $current_domain = domain_get_domain();
      $current_suffix = domain_conf_variable_get($current_domain['domain_id'], 'domain_suffix');

      $domain = $fields['values']['#value'];
      $request_uri = request_uri();
      $subdomain = $domain['subdomain'];

      if ($domain_suffix && (0 === strpos($subdomain, $domain_suffix['suffix']))) {
        $subdomain = str_replace($domain_suffix['suffix'] . '.', '', $subdomain);
        // $domain_path = domain_check_scheme($domain['scheme']) . '://' . $subdomain . $request_uri;
        $subdomain .= '/' . $domain_suffix['suffix'];
      }

      $domain_path = country_path_get_real_domain_path($domain);
      $domain_path = rtrim($domain_path, '/');

      $link = l($subdomain, $domain_path, array('external' => TRUE));
      $form['domain'][$domain_id]['subdomain']['#markup'] = ($active_domain['domain_id'] == $domain_id) ? '<strong>' . $link . '</strong>' : $link;
    }
  }
  $form['default_domain']['#disabled'] = TRUE;
  if (($key = array_search('domain_overview_form_validate', $form['#validate'])) !== FALSE) {
    unset($form['#validate'][$key]);
  }
}

/**
 * Implements hook_domain_load().
 *
 * Adds a suffix for the current domain.
 */
function country_path_domain_load(&$domain) {
  $domain['suffix'] = domain_conf_variable_get($domain['domain_id'], 'domain_suffix');
}

/**
 * Get real domain_path by domain.
 *
 * @return string
 *   Return full URL to domain with url scheme(HTTP/HTTPS).
 */
function country_path_get_real_domain_path($domain, $with_default_language = FALSE) {
  $country_path = $domain['path'];

  if (!isset($domain['suffix']['suffix'])) {
    country_path_domain_load($domain);
  }

  if (!empty($domain['suffix']['suffix'])) {
    $country_path = domain_check_scheme($domain['scheme']) . '://' . $domain['suffix']['subdomain'] . '/' . $domain['suffix']['suffix'];

    if ($with_default_language && !empty($domain['domain_id'])) {
      $language = country_path_domain_language_default($domain);
      if (!empty($language->prefix)) {
        $country_path .= '/' . $language->prefix;
      }
    }
  }
  return $country_path;
}


/**
 * Implements hook_domain_delete().
 */
function country_path_domain_delete($domain, $form_values = array()) {
  $secure_hosts = variable_get('country_path_secure_hosts', array());
  unset($secure_hosts[$domain['domain_id']]);
  variable_set('country_path_secure_hosts', $secure_hosts);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function country_path_form_securepages_settings_alter(&$form, $form_state) {
  $form['#submit'][] = 'country_path_securepages_settings_submit';
}

/**
 * Extra callback for `securepages_settings` form.
 *
 * Sync `securepages_basepath_ssl` with `country_path_secure_hosts`.
 */
function country_path_securepages_settings_submit($form, $form_state) {
  global $_domain;

  $domain_id = $_domain['domain_id'];
  $secure_hosts = variable_get('country_path_secure_hosts', array());
  if (isset($form_state['values']['securepages_basepath_ssl']) && !empty($form_state['values']['securepages_basepath_ssl'])) {
    $secure_hosts[$domain_id] = rtrim($form_state['values']['securepages_basepath_ssl'] . '/' . $_domain['suffix']['suffix'], '/');
  }
  else {
    unset($secure_hosts[$domain_id]);
  }
  asort($secure_hosts);
  variable_set('country_path_secure_hosts', $secure_hosts);
}

/**
 * Retrieves default language for specified domain.
 */
function country_path_domain_language_default($domain) {
  $domain_language_default = domain_conf_variable_get($domain['domain_id'], 'language_default');
  if (!isset($domain_language_default)) {
    $language_default = language_default();
  }
  else {
    // Domain Conf has stored simple values (strings) previously,
    // but latest version stores default_language as object.
    if (is_object($domain_language_default)) {
      // @TODO:
      // return $domain_language_default;
      $domain_language_default = $domain_language_default->language;
    }
    $language_default = domain_locale_language_load($domain_language_default);
  }
  return $language_default;
}
