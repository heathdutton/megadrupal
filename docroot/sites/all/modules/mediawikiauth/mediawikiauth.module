<?php
// Written by Mitch Schwenk <tazzytazzy at yahoo (.) com
// Updates by Maarten van Dantzich mediawiki.org User:Thinkling
// Integrated into Drupal.org by TheAnarcat <anarcat@koumbit.org>
//
//  v 0.6 - 2008-06
//    removed hook_perms as it wasn't relevant
//    replaced mcrypt with less secure but more portable approach to 
//      communicating & verifying the username
//  v 0.5 - 2007-09
//    no updates to this file
//  v 0.4 - 2007-0729
//     Maarten-added support for multiple wikis by putting settings into array
//  v 0.3.2 - 2007-0725

/*
 * the following settings should be inserted and modified into your
 * settings.php
 *
 * you can also modify them directly here but then upgrades will break
 * the module.
 */
global $wgAuthDrupal_security_key, $wgAuthDrupal_wiki_settings;
/*
 * Replace this key string with something non-trivial to prevent
 * user login spoofing. Make it hardto guess, as if it is a password.
 * 
 * YOU MUST CHANGE THIS to something unique to your site. 
 */
//$wgAuthDrupal_security_key = 'ReplaceThisString';

/* For each wiki that shares the Drupal login front end, create a set
 * of settings here that matches what you have in LocalSettings.php for
 * the same variable FOR THAT WIKI.
 */
/* $wgAuthDrupal_wiki_settings = array (
		// settings for wiki 1  (i.e. copy values from wiki1/LocalSettings.php)
		array(
			'wgCookieDomain' 	=> '.yourdomain.com',
			'wgDBname' 			=> 'wiki',
			'wgDBprefix' 		=> 'wiki_',

			// **IF** you set wgCookiePath in wiki/LocalSettings, set it to
			// the same thing here; if don't see it in wiki/LocalSettings.php,
			// leave it alone.
			'wgCookiePath' 		=> '/'
		),
		// NOTE: to add wikis, copy #1 and modify to suit
	); */

/* set wgCookiePrefix from the values of wgDBprefix and wgDBname
 * $vals is an array of per-wiki settings, i.e. one of the elements of
 *   $GLOBALS['wgAuthDrupal_wiki_settings'
 */


function mediawikiauth_menu() {
    $items = array();
    $items['admin/config/system/mediawikiauth'] = array(
    'title' => 'Media Wiki Auth',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mediawikiauth_admin_settings_form'),
    'access arguments' => array('administer mediawikiauth'),
    'type' => MENU_NORMAL_ITEM,
    );
    return $items;

}

function mediawikiauth_permission() {
  return array(
	'administer mediawikiauth' => array(
		'title' => t('Administer mediawiki auth'),
		'description' => t('Administer mediawiki auth'),
    ),
  );
}

function mediawikiauth_admin_settings_form() {
    $form = array();

    $form['mediawiki_security_key'] = array(
        '#type' => 'textfield',
        '#title' => t('Security String'),
        '#default_value' => variable_get('mediawiki_security_key', 'ReplaceThisString'),
        '#description' => t("Replace this key string with something non-trivial to prevent
user login spoofing.<br /> Make it hard to guess, as if it is a password.<br />
  
YOU MUST CHANGE THIS to something unique to your site."),
    );




    $wikicount = variable_get('mediawiki_wikicount', 1) > 0 ? variable_get('mediawiki_wikicount', 1) : 1;


    for ($i=1; $i<=$wikicount; $i++) {
        $form["mediawiki_settings_$i"] = array(
        '#type' => 'fieldset',
        '#title' => "Wiki $i",
        '#descriptions' => 'settings should match those in wiki/LocalSettings.php',
        );

      $form["mediawiki_settings_$i"]["mediawiki_dbname_$i"] = array(
            '#title'         => 'Database Name',
            '#type'          => 'textfield',
            '#required'      => TRUE,
            '#default_value' => variable_get("mediawiki_dbname_$i", ''),
            '#description'   => 'wgDBname ',
        );
        
        $form["mediawiki_settings_$i"]["mediawiki_dbprefix_$i"] = array(
            '#title'   => 'Database Prefix',
            '#type'    => 'textfield',
            '#default_value' => variable_get("mediawiki_dbprefix_$i", ''),
            '#description'   => 'wgDBprefix',
        );
        
        $form["mediawiki_settings_$i"]["mediawiki_cookiedomain_$i"] = array(
            '#title'   => 'Cookie Domain',
            '#type'    => 'textfield',
            '#default_value' => variable_get("mediawiki_cookiedomain_$i", $_SERVER['HTTP_HOST']),
            '#description'   => 'wgCookieDomain',
        );

        $form["mediawiki_settings_$i"]["mediawiki_cookiepath_$i"] = array(
            '#title'   => 'Cookie Path',
            '#type'    => 'textfield',
            '#default_value' => variable_get("mediawiki_cookiepath_$i", '/'),
            '#description'   => 'wgCookiePath - IF you set wgCookiePath in wiki/LocalSettings, set it to the same thing here; if don\'t see it in wiki/LocalSettings.php, leave it alone.',
        );





    }

    $form['mediawikiscount'] = array(
      '#title' => 'Multiple wikis',
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['mediawikiscount']['mediawiki_wikicount'] = array(
        '#type' => 'textfield',
        '#title' => t('Number of wikis'),
        '#default_value' => variable_get('mediawiki_wikicount', 1),
        '#description' => t("If you want to manage more than one wiki connection, enter the number, submit this form and a suitable number of connection settings will be dispalyed."),
    );

    return system_settings_form($form);

}

/**
* Load config from database to global variables.
*/
function mediawikiauth_load_config() {
    global $wgAuthDrupal_security_key, $wgAuthDrupal_wiki_settings;
    $wgAuthDrupal_security_key = variable_get('mediawiki_security_key', 'ReplaceThisString');
    $wgAuthDrupal_wiki_settings = array();
    
    $wikicount = variable_get('mediawiki_wikicount', 1);
    if ($wikicount <= 0) {
        $wikicount = 1;
    }

    for ($i=1; $i<=$wikicount; $i++)
    {
        $wgAuthDrupal_wiki_settings[] = array(
                      'wgCookieDomain' => variable_get("mediawiki_cookiedomain_$i", $_SERVER['HTTP_HOST']),
                      'wgCookiePath'   => variable_get("mediawiki_cookiepath_$i", '/'),
           // cookie prefix can be set seperately in wiki LocalSettings 
         	          'wgCookiePrefix' => variable_get("mediawiki_dbname_$i", '') . variable_get("mediawiki_dbprefix_$i", '') ,
        );
        
    }


// this lifted from wiki/include/DefaultSettings.php
$proto = (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == 'on') ? 'https' : 'http';
$GLOBALS['wgCookieSecure'] = ($proto == 'https');

}

function mediawikiauth_StaticUserLogout() {
  require_once('AuthDrupalEncode.php');
	foreach( $GLOBALS['wgAuthDrupal_wiki_settings'] as $vals)
	{
          StaticUserLogout($vals['wgCookiePrefix'], $vals['wgCookiePath'], $vals['wgCookieDomain']);
	}
}


function mediawikiauth_user_login(&$edit, $user) {
  require_once('AuthDrupalEncode.php');
  mediawikiauth_load_config();
  // create seperate session id so mediawiki can see the user!
  $exp = time() + 2592000; // one month in seconds
  $encoded_name = authdrupal_encode($user->name);
  foreach( $GLOBALS['wgAuthDrupal_wiki_settings'] as $vals) {
    // set the cookie that communicates the username
    setcookie('DRXtrArgs', $user->name, $exp,  $vals['wgCookiePath'], $vals['wgCookieDomain'] );
    setcookie('DRXtrArgs2', $encoded_name, $exp,  $vals['wgCookiePath'], $vals['wgCookieDomain'] );
    // remove the loggedout cookie--not sure this is necessary; MW itself does not
    // seem to do it when a user logs back in thru MW
    setcookie( $vals['wgCookiePrefix'].'LoggedOut', '', time() - 3600,  $vals['wgCookiePath'], $vals['wgCookieDomain'], $GLOBALS['wgCookieSecure'] );
  }
}

function mediawikiauth_user_logout($user) {
  mediawikiauth_load_config();
  foreach( $GLOBALS['wgAuthDrupal_wiki_settings'] as $vals) {
    // delete the cookie that communicates the username
    setcookie("DRXtrArgs", "", time() - 3600, $vals['wgCookiePath'], $vals['wgCookieDomain'] );
    setcookie("DRXtrArgs2", "", time() - 3600, $vals['wgCookiePath'], $vals['wgCookieDomain'] );
  }
  mediawikiauth_StaticUserLogout();
}
