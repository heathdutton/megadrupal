<?php
// $Id: mcfilemanager.module, v 0.1, 2009/05/04 20:13:57, skilip Exp $;

/**
 * @file
 *
 * MCFileManager enables users to preview images and conduct basic file operations on them, such as upload and delete.
 * The MCFileManager is a online file management utility
 */

/**
 * Implements hook_permission().
 */
function mcfilemanager_permission() {
  return array(
    'administer mcfilemanager' => array(
      'title' => t('administer mcfilemanager'),
      'description' => t('TODO Add a description for \'administer mcfilemanager\''),
    ),
    'access mcfilemanager files' => array(
      'title' => t('Access files through the filebrowser'),
      'description' => t('TODO Add a description for \'administer mcfilemanager\''),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function mcfilemanager_menu() {
  $items['admin/config/media/mcfilemanager'] = array(
    'title' => 'MCFileManager settings',
    'description' => 'Configure MCFileManager.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcfilemanager_settings_form'),
    'access arguments' => array('administer mcfilemanager'),
    'file' => 'mcfilemanager.pages.inc',
  );
  $items['admin/config/media/mcfilemanager/reset'] = array(
    'title' => 'MCFileManager settings',
    'description' => 'Configure MCFileManager.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcfilemanager_settings_reset_form'),
    'access arguments' => array('administer mcfilemanager'),
    'file' => 'mcfilemanager.pages.inc',
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function mcfilemanager_theme() {
  return array(
    'mcfilemanager_settings_form' => array(
      'render element' => 'form',
      'file' => 'mcfilemanager.pages.inc',
    ),
  );
}

/**
 * Implements hook_requirements().
 */
function mcfilemanager_requirements($phase) {
  $requirements = array();

  if ($phase == 'runtime') {
    module_load_include('inc', 'mcfilemanager', 'mcfilemanager.pages');
    $requirements = mcfilemanager_runtime_requirements();
  }
  return $requirements;
}

/**
 * Implements hook_wysiwyg_plugin().
 */
function mcfilemanager_wysiwyg_plugin($editor, $version) {
  switch ($editor) {
    case 'tinymce':
      if (user_access('access mcfilemanager files') && $version > 3) {
        $plugins = array();
        $library_path = mcfilemanager_library_directory();

        foreach (mcfilemanager_moxicode_libraries() as $short_name => $data) {
          if (variable_get('mcfilemanager_' . $short_name . '_status_ok', FALSE)) {
            $plugins[$short_name] = array(
              'path' => "$library_path/$short_name/editor_plugin.js",
              'url' => 'admin/config/media/mcfilemanager',
              'path' => $library_path . '/' . $short_name,
              'filename' => 'editor_plugin.js',
              'buttons' => array(
                $short_name => $data->human_name,
              ),
              'options' => array(
                $short_name . '_remove_script_host' => TRUE,
              ),
              'load' => TRUE,
              'internal' => FALSE,
            );
          }
        }
        return $plugins;
      }
      break;
  }
}


/**
 * Implements hook_filter().
 */
function mcfilemanager_filter_XXX($op, $delta = 0, $format = -1, $text = '') {
  switch ($op) {
    case 'list':
      return array(0 => t('MCFileManager replace base paths'));
    case 'description':
      return t('Strips base paths from node images before being saved into the database.');
    case 'process':
      switch ($delta) {
        case 0:
          // Check if the current format uses our module's filter
          if (filter_uses_mcfilemanager_filter($format)) {
            // Add base paths back to image sources
            $text = mcfilemanager_filter_process($text, $format);
          }
          break;
      }
      return $text;
    default:
      return $text;
  }
}

/**
 * Implements hook_node_presave().
 */
function mcfilemanager_node_presave($node) {
  // Check if the current format uses our module's filter
  if (isset($node->format) && filter_uses_mcfilemanager_filter($node->format)) {

    // Strip base paths from image sources
    if ($node->body && !empty($node->body)) {
      $node->body = mcfilemanager_filter_process($node->body, $node->format, TRUE);
    }
    if ($node->teaser && !empty($node->teaser)) {
      $node->teaser = mcfilemanager_filter_process($node->teaser, $node->format, TRUE);
    }

    // If the CCK module is enabled, we need to process these fields as well
    if (module_exists('content')) {
      // Gather type information.
      $type = content_types($node->type);

      // Loop through each content field
      foreach ($type['fields'] as $name => $field) {

        // Only proceed if the element exists for this node
        if (isset($node->{$name})) {

          // Since fields allow multiple values, we need to walk trough each element
          foreach ($node->{$name} as $k => $field_data) {

            // Only strip the base paths if the field's filter equals the node's filter
            if ($node->format == $node->{$name}[$k]['format']) {
              $node->{$name}[$k]['value'] = mcfilemanager_filter_process($node->{$name}[$k]['value'], $node->format, TRUE);
            }
          }
        }
      }
    }
  }
}

/**
 * Helper function for checking if a given format uses the 'replace base paths' filter
 *
 * @param $format (int)
 *   - The ID of the node's input format
 */
function filter_uses_mcfilemanager_filter($format) {
  $filters = filter_list_format($format);
  foreach ($filters as $filter) {
    if ($filter->module == 'mcfilemanager') {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Replaces or adds base paths from image tags
 *
 * @param $text (string)
 *   - The node's body which is used to search for image tags
 *
 * @param $format (int)
 *   - The ID of the node's input format
 *
 * @param $strip (bool)
 *   - Whether or not to strip the base paths from image tags
 *
 * @see mcfilemanager_nodeapi(), mcfilemanager_filter()
 */
function mcfilemanager_filter_process($text, $format, $strip = FALSE) {
  $pattern = '/(\<img)(.+?)(src=")(.+?)\"(.+?)(\/\>|\>)/i';
  if (preg_match_all($pattern, $text, $matches)) {
    $base_path = base_path();
    foreach ($matches[0] as $key => $match) {
      if ($strip) {
        $text = str_replace($matches[3][$key] . $base_path, $matches[3][$key], $text);
      }
      else {
        $text = str_replace($matches[3][$key] . $matches[4][$key], $matches[3][$key] . $base_path . $matches[4][$key], $text);
      }
    }
  }
  return $text;
}

/**
 * Checks the mcfilemanager module requirements
 */
function mcfilemanager_check_status() {
  $requirements = module_invoke('mcfilemanager', 'requirements', 'runtime');

  foreach (mcfilemanager_moxicode_libraries() as $short_name => $data) {
    if (!isset($requirements[$data->system_name . '_ok'])) {
      drupal_set_message(t('There !name module is not yet correctly installed! Please navigate to !status_report to see what\'s wrong.', array('!name' => $data->human_name, '!status_report' => l(t('status report'), 'admin/reports/status'))), 'error');
    }
  }
  return $requirements;
}

/**
 * Default configuration options for MCFileManager.
 *
 * All elements here will be editable in the configuration form on admin/settings/mcfilemanager
 */
function mcfilemanager_config_defaults() {
  // Paste here all your default settings
  $config['filesystem.rootpath'] = variable_get('file_public_path', conf_path() . '/files');
  $config['ExternalAuthenticator.secret_key'] = 'someSecretKey';

  drupal_alter('mcfilemanager_config_defaults', $config);

  return $config;
}

/**
 * Searches for a libraries directory
 */
function mcfilemanager_library_directory() {

  if (module_exists('libraries')) {
    $dir = libraries_get_path('filemanager');
    return substr($dir, 0, strrpos($dir, '/'));
  }
  elseif (module_exists('jqp')) {
    $dir = variable_get('jqp_directory', 'sites/all/libraries');
    return is_dir($dir) ? $dir : FALSE;
  }
  elseif ($dir = variable_get('mcfilemenager_directory', FALSE)) {
    return $dir;
  }

  global $profile;
  $config = conf_path();

  $searchdir = array(
    'libraries',
    'sites/all/libraries',
    'profiles/' . $profile . '/libraries',
    $config . '/libraries',
  );

  foreach ($searchdir as $dir) {
    if (is_dir($dir)) {
      variable_set('mcfilemenager_directory', $dir);
      return $dir;
    }
  }
  return FALSE;
}

/**
 * Little helper function for defining the possible Moxicode plugins.
 */
function mcfilemanager_moxicode_libraries() {
  return array(
    'imagemanager' => (object) array(
      'conf_key' => 'mcImageManagerConfig',
      'human_name' => 'MCImageManager',
      'system_name' => 'mcimagemanager',
    ),
    'filemanager' => (object) array(
      'conf_key' => 'mcFileManagerConfig',
      'human_name' => 'MCFileManager',
      'system_name' => 'mcfilemanager',
    ),
  );
}
