<?php
/**
 * @file
 * Stitchz login module - social login.
 */

/**
 * Implements hook_menu().
 *
 * With Clean URLs enabled = /stitchz_social_login/auth. Without Clean URLs
 * enabled = ?q=stitchz_social_login/auth.
 */
function stitchz_social_login_authorization_handler_menu() {
  $items['stitchz_social_login/auth'] = array(
    'title' => 'Stitchz Social Login Authorization Handler',
    'page callback' => 'stitchz_social_login_authorization_handler_response_reader',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Read incoming authorization response.
 *
 * Read and processes the incoming response then, if necessary, creates a
 * new user account, then logs the user in.
 */
function stitchz_social_login_authorization_handler_response_reader() {

  // Read settings from database.
  $config = stitchz_social_login_authorization_handler_get_settings();

  // Check api version to call.
  if ($config['version'] == '1') {
    // Read incoming response.
    $profile = stitchz_social_login_authorization_handler_prepare_and_send_v1_request($config['domain'], $config['appsecret']);
  }
  else {
    // Read incoming response.
    $profile = stitchz_social_login_authorization_handler_prepare_and_send_v2_request($config['domain'], $config['apikey'], $config['appsecret'], $config['redirecturl']);
  }

  if (is_array($profile)) {
    if (isset($profile["error"])) {
      // Check error code and/or status parameter.
      $error = (!empty($profile["error"]["error_description"]) ? $profile["error"]["error_description"] : t('Unknown error, please contact your website administrator.'));
      drupal_set_message(t('There was an error logging in with Stitchz Social Login, %error', array('%error' => $error)), 'error');
      drupal_goto('user/login');
    }
    elseif (isset($profile["profile"])) {
      $useridentity = $profile["profile"];
      $identity = $useridentity['identifier'];

      // Check if the user account exists based on identity.
      $account = stitchz_social_login_authorization_handler_get_user_by_identity($identity);

      // Is the user account object empty.
      if (is_object($account) && !empty($account->uid)) {
        // Validate user, i.e. not already used by another account.
        $validatestate['values']['name'] = $account->name;
        user_login_name_validate(array(), $validatestate);

        // Log user in.
        if (!form_get_errors()) {
          $form_state['uid'] = $account->uid;
          user_login_submit(array(), $form_state);
        }

        // Update the user's stitchz profile with the oauth credentials.
        if ($config['version'] == '2') {
          if (!empty($useridentity['accessToken']) AND
            !empty($useridentity['refreshToken']) AND
            !empty($useridentity['accessTokenExpirationUtcString']) AND
            !empty($useridentity['accessTokenIssueDateUtcString']) AND
            !empty($useridentity['callback'])) {
            $access_token = $useridentity['accessToken'];
            $refresh_token = $useridentity['refreshToken'];
            $access_token_expiration_utc = format_date(strtotime($useridentity['accessTokenExpirationUtcString']), 'custom', 'Y-m-d h:i:s');
            $access_token_issue_date_utc = format_date(strtotime($useridentity['accessTokenIssueDateUtcString']), 'custom', 'Y-m-d h:i:s');
            $callback = $useridentity['callback'];
            stitchz_social_login_authorization_handler_save_oauth_credentials($account->uid, $access_token, $refresh_token, $access_token_expiration_utc, $access_token_issue_date_utc, $callback);
          }
        }

        // TODO: Check if user's social profile image has changed.
        // TODO: Check if the user's email address has changed.
      }
      // New user.
      else {

        // We'll use this later if no valid email is found.
        $fake_email_address = FALSE;

        // Check if visitors can register.
        if (variable_get('user_register', 1)) {

          if (!empty($useridentity['preferredUsername'])) {
            $loginname = $useridentity['preferredUsername'];
          }
          elseif (!empty($useridentity['displayName'])) {
            $loginname = $useridentity['displayName'];
          }
          else {
            $loginname = $useridentity['identifier'];
          }

          // The provider are we authenticed with.
          $provider = 'stitchz.net';
          if (isset($useridentity['accounts'])) {
            $socialaccount = $useridentity['accounts'];
            $provider = $socialaccount['domain'];
          }

          // Check for unique loginname.
          if (stitchz_social_login_authorization_handler_check_dup_username($loginname)) {
            $temp_loginname = trim($loginname) . '-' . $provider;
            $x = 1;

            // Ensure a unique name, otherwise, create a unique one.
            while (stitchz_social_login_authorization_handler_check_dup_username($temp_loginname) !== FALSE) {
              $temp_loginname = trim($loginname) . '-' . $provider . '-' . $x;
              $x++;
            }
            $loginname = $temp_loginname;
          }

          // Check for email address, if none, then make the user enter one.
          if (!empty($useridentity['email'])) {
            $email_address = $useridentity['email'];
          }
          else {
            // Check if $loginname is in an email format.
            if (filter_var($loginname, FILTER_VALIDATE_EMAIL)) {
              $email_address = $loginname;
            }
            else {
              $fake_email_address = TRUE;
              $email_address = $loginname . '@' . $provider;
            }
          }

          // Generate random password.
          $rnd_password = user_password(10);

          // 0 = administrators only;
          // 1 = visitors;
          // 2 = visitors with admin approval;
          $account_status = (variable_get('user_register') == 2 ? 0 : 1);

          // Assign the default drupal role.
          $account_roles = array(
            DRUPAL_AUTHENTICATED_RID => TRUE,
          );

          // TODO: format timezone.
          // TODO: format language.
          $new_user_fields = array(
            'name' => $loginname,
            'pass' => $rnd_password,
            'mail' => $email_address,
            'status' => $account_status,
            'init' => $email_address,
            'roles' => $account_roles,
            'access' => REQUEST_TIME,
          );

          // Create the new user account.
          $new_user = user_save('', $new_user_fields);

          if ($new_user !== FALSE) {

            // Associate the new user account with the identity.
            stitchz_social_login_authorization_handler_assoc_identity_to_user($new_user, $identity, $provider);

            // Add the user image.
            stitchz_social_login_authorization_handler_add_profile_photo($new_user->uid, $useridentity['image']);

            // Log user in.
            $userid = user_authenticate($loginname, $rnd_password);

            if ($userid !== FALSE) {
              global $user;

              // Load the user object.
              $user = user_load($userid);

              $login_array = array(
                'name' => $loginname,
              );

              // Finish logging in *REQUIRED*.
              user_login_finalize($login_array);

              // Update the user's stitchz profile with the oauth credentials.
              if ($config['version'] == '2') {
                if (!empty($useridentity['accessToken']) AND
                  !empty($useridentity['refreshToken']) AND
                  !empty($useridentity['accessTokenExpirationUtc']) AND
                  !empty($useridentity['accessTokenIssueDateUtc']) AND
                  !empty($useridentity['callback'])) {
                  $access_token = $useridentity['accessToken'];
                  $refresh_token = $useridentity['refreshToken'];
                  $access_token_expiration_utc = format_date(strtotime($useridentity['accessTokenExpirationUtcString']), 'custom', 'Y-m-d h:i:s');
                  $access_token_issue_date_utc = format_date(strtotime($useridentity['accessTokenIssueDateUtcString']), 'custom', 'Y-m-d h:i:s');
                  $callback = $useridentity['callback'];
                  stitchz_social_login_authorization_handler_save_oauth_credentials($user->uid, $access_token, $refresh_token, $access_token_expiration_utc, $access_token_issue_date_utc, $callback);
                }
              }

              $no_appr_success_msg = t('Your account was successfully created using your %provider account', array('%provider' => $provider));
              $pending_success_msg = $no_appr_success_msg . t(', however, it is pending Administrator approval');

              // User account status is 'Active'.
              if ($account_status == 1) {
                if ($fake_email_address !== TRUE) {
                  _user_mail_notify('register_no_approval_required', $user);
                }
                drupal_set_message($no_appr_success_msg . ($fake_email_address === TRUE ? t('. Please update your email address in your account profile.') : '.'), 'status');
              }
              // User account status is 'Blocked'.
              else {
                if ($fake_email_address !== TRUE) {
                  _user_mail_notify('register_pending_approval', $user);
                }
                drupal_set_message($pending_success_msg . ($fake_email_address === TRUE ? t('. Once approved, add your email address to your account profile.') : '.'), 'status');
              }
            }
            else {
              drupal_set_message(t('Error logging you in.'), 'error');
              drupal_goto('user/login');
            }
          }
          else {
            drupal_set_message(t('There was an error creating your account.'), 'error');
            drupal_goto('user/register');
          }
        }
        else {
          drupal_set_message(t('Registration is currently disabled.'), 'error');
          drupal_goto();
        }
      }
    }
    else {
      watchdog('stitchz_social_login_authorization_handler', 'Unable to process incoming response from Stitchz', WATCHDOG_ERROR);
    }
  }
  else {
    watchdog('stitchz_social_login_authorization_handler', 'Unable to read incoming response', WATCHDOG_ERROR);
  }

  // Return to main site page.
  drupal_goto();
}

/**
 * Check if the given username already exists or not.
 *
 * @param string $loginname
 *   The username to check against.
 *
 * @return bool
 *   TRUE duplicate username exists; FALSE username doesn't already exist.
 */
function stitchz_social_login_authorization_handler_check_dup_username($loginname) {

  $nametocheck = trim($loginname);

  if (drupal_strlen($nametocheck) > 0) {

    $sql = "SELECT u.uid FROM {users} u WHERE u.name = :name";
    $userid = db_query($sql, array(':name' => $nametocheck))
      ->fetchField();

    if (!empty($userid)) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Setup and send an HTTP request.
 *
 * Sets up and sends an HTTP request to Stitchz API to get an authenticated
 * user's social profile.
 *
 * @param string $dnsalias
 *   App url as provided by Stitchz.
 * @param string $appsecret
 *   The application secret provided by Stitchz.
 *
 * @return json
 *   A json encoded response from Stitchz API.
 */
function stitchz_social_login_authorization_handler_prepare_and_send_v1_request($dnsalias, $appsecret) {

  // A POST request is preferred.
  $token = !isset($_POST['token']) ? (!isset($_GET['token']) ? (!isset($_REQUEST['token']) ? 0 : $_REQUEST['token']) : $_GET['token']) : $_POST['token'];

  if ($token !== 0) {

    $url = url(rtrim($dnsalias, '/') . '/Authentication/v1/Auth', array('external' => TRUE));
    $data = drupal_http_build_query(array(
      'Token' => $token,
      'AppSecret' => $appsecret,
    ));

    $options = array(
      'method' => 'POST',
      'headers' => array(
        'Content-Type' => 'application/x-www-form-urlencoded',
        'Accept' => 'application/json',
      ),
      'data' => $data,
    );

    // TODO: we could use CURL here or give a choice of default Drupal vs. Curl.
    $request = drupal_http_request($url, $options);

    if (is_object($request) AND !empty($request->data)) {
      $json_response = drupal_json_decode($request->data);

      return $json_response;
    }
    else {
      watchdog('stitchz_social_login_authorization_handler_prepare_and_send_v1_request', 'Missing or invalid response', WATCHDOG_ERROR);
    }
  }
  else {
    watchdog('stitchz_social_login_authorization_handler_prepare_and_send_v1_request', 'Missing or invalid token response', WATCHDOG_ERROR);
  }
  return FALSE;
}

/**
 * Setup and send an HTTP request.
 *
 * Sets up and sends an HTTP request to Stitchz API to get an authenticated
 * user's social profile.
 *
 * @param string $dnsalias
 *   App url as provided by Stitchz.
 * @param string $apikey
 *   Unique client id provided by Stitchz.
 * @param string $appsecret
 *   The application secret provided by Stitchz.
 * @param string $redirecturi
 *   Callback url where Stitchz will send authenticated response.
 *
 * @return json
 *   A json encoded response from Stitchz API.
 */
function stitchz_social_login_authorization_handler_prepare_and_send_v2_request($dnsalias, $apikey, $appsecret, $redirecturi) {

  // A POST request is preferred.
  $token = !isset($_POST['token']) ? (!isset($_GET['token']) ? (!isset($_REQUEST['token']) ? 0 : $_REQUEST['token']) : $_GET['token']) : $_POST['token'];

  if ($token !== 0) {

    // Check that the return url ends with the proper end point url.
    if (strpos($redirecturi, '/stitchz_social_login/auth') === FALSE) {
      $redirecturi .= '/stitchz_social_login/auth';
    }

    $url = url(rtrim($dnsalias, '/') . '/Authentication/v2/Auth', array('external' => TRUE));
    $data = drupal_http_build_query(array(
      'client_id' => $apikey,
      'client_secret' => $appsecret,
      'grant_type' => 'authorization_code',
      'redirect_uri' => $redirecturi,
      'code' => $token,
      'version' => 'v2',
      'format' => 'json',
    ));

    $options = array(
      'method' => 'POST',
      'headers' => array(
        'Content-Type' => 'application/x-www-form-urlencoded',
        'Accept' => 'application/json',
      ),
      'data' => $data,
    );

    // TODO: we could use CURL here or give a choice of default Drupal vs. Curl.
    $request = drupal_http_request($url, $options);

    if (is_object($request) AND !empty($request->data)) {
      $json_response = drupal_json_decode($request->data);

      return $json_response;
    }
    else {
      watchdog('stitchz_social_login_authorization_handler_prepare_and_send_v2_request', 'Missing or invalid response', WATCHDOG_ERROR);
    }
  }
  else {
    watchdog('stitchz_social_login_authorization_handler_prepare_and_send_v2_request', 'Missing or invalid token response', WATCHDOG_ERROR);
  }
  return FALSE;
}

/**
 * Grab the OAuth2 accessToken info for future use and store in database.
 *
 * @param int $uid
 *   The user id for the user account to add the token to.
 * @param string $access_token
 *   A security identifier for the authenticated user.
 * @param string $refresh_token
 *   A security identifier used to exchange for an unexpired access token.
 * @param string $access_token_expiration_utc
 *   The string representation of date and time the token expires.
 * @param string $access_token_issue_date_utc
 *   The string representation of date and time the token was minted.
 * @param string $callback
 *   The uri the token was returned to (aka return url).
 */
function stitchz_social_login_authorization_handler_save_oauth_credentials($uid, $access_token, $refresh_token, $access_token_expiration_utc, $access_token_issue_date_utc, $callback) {

  $sql = "SELECT a.aid FROM {authmap} a WHERE a.module = 'stitchz_social_login' AND a.uid = :uid";
  $aid = db_query($sql, array(':uid' => $uid))->fetchField();

  if (is_numeric($aid)) {
    db_update('stitchz_social_login_identities')
    ->fields(array(
      'accessToken' => $access_token,
      'refreshToken' => $refresh_token,
      'accessTokenExpirationUtc' => $access_token_expiration_utc,
      'accessTokenIssueDateUtc' => $access_token_issue_date_utc,
      'callback' => $callback,
      ))
    ->condition('authmapid', $aid, '=')
    ->execute();
  }
}

/**
 * Get the global $user from the given identity.
 *
 * @param string $identity
 *   The unique identifier mapped to a user account.
 *
 * @return object|bool
 *   A valid user account or FALSE is nothing found.
 */
function stitchz_social_login_authorization_handler_get_user_by_identity($identity) {

  $sql = "SELECT a.uid FROM {authmap} a WHERE a.module = 'stitchz_social_login' AND a.authname = :authname";
  $userid = db_query($sql, array(':authname' => $identity))->fetchField();

  if (is_numeric($userid)) {
    if (($user = user_load($userid, FALSE)) !== FALSE) {
      return $user;
    }
  }
  return FALSE;
}

/**
 * Adds the given identity to the drupal user account.
 *
 * @param object $account
 *   The user account to associate an identity to.
 * @param string $identity
 *   The identity to connect to the user account.
 * @param string $provider
 *   The provider name currently authenticated with.
 *
 * @return bool
 *   TRUE if successful; FALSE if not.
 */
function stitchz_social_login_authorization_handler_assoc_identity_to_user($account, $identity, $provider) {

  $db_transaction = db_transaction();

  try {

    user_set_authmaps($account, array('authmap_stitchz_social_login' => $identity));

    // Get the newly added authmap id.
    $sql = "SELECT a.aid FROM {authmap} a WHERE a.module = 'stitchz_social_login' AND a.authname = :authname";
    $authmapid = db_query($sql, array(':authname' => $identity))
      ->fetchField();

    if (is_numeric($authmapid)) {

      // Look for an existing identity.
      $sliid = db_select('stitchz_social_login_identities', 's')
        ->fields('s', array('sliid'))
        ->condition('identity', $identity)
        ->condition('authmapid', $authmapid)
        ->execute()
        ->fetchField();

      // Identity does not exist, so add it.
      if (!is_numeric($sliid)) {
        db_insert('stitchz_social_login_identities')
          ->fields(array(
            'identity' => $identity,
            'provider' => $provider,
            'authmapid' => $authmapid,
            'accessTokenExpirationUtc' => format_date(REQUEST_TIME, 'custom', 'Y-m-d H:i:s'),
            'accessTokenIssueDateUtc' => format_date(REQUEST_TIME, 'custom', 'Y-m-d H:i:s'),
          ))
          ->execute();
      }

      return TRUE;
    }
  }
  catch (Exception $ex) {
    $db_transaction->rollback();
    watchdog_exception('stitchz_social_login_authorization_handler', $ex);
    drupal_set_message(t('There was an error processing your registration, contact the administrator'));
  }
  return FALSE;
}

/**
 * Adds the social login profile image to the logged in user.
 *
 * @param int $accountid
 *   The id of the user account we're adding a profile photo to.
 * @param string $image_url
 *   The full uri to a profile photo.
 */
function stitchz_social_login_authorization_handler_add_profile_photo($accountid, $image_url) {
  if (!empty($image_url)) {
    $user_photo_path = file_default_scheme() . '://' . variable_get('user_picture_path', 'pictures');

    // Make sure the directory exists.
    if (file_prepare_directory($user_photo_path, FILE_CREATE_DIRECTORY)) {
      $photo_full_path = $user_photo_path . '/profile-' . $accountid;

      // Request the image.
      $response = drupal_http_request($image_url);
      $data = $response->data;

      // Save it temporarily.
      $temp_path = $photo_full_path . '.tmp';
      $temp_full_path = file_stream_wrapper_uri_normalize($temp_path);
      $temp_photo = file_save_data($data, $temp_full_path, FILE_EXISTS_REPLACE);

      if (($fileinfo = image_get_info($temp_full_path)) !== FALSE) {
        $profile_img_name = $photo_full_path . strtolower($fileinfo['extension']);

        $profile_img_full_path = file_stream_wrapper_uri_normalize($profile_img_name);

        $profile_photo = file_move($temp_photo, $profile_img_full_path, FILE_EXISTS_REPLACE);

        // Check file dimensions, resize if image toolkit is installed.
        $output = file_validate_image_resolution($profile_photo, variable_get('user_picture_dimensions', '85x85'));

        if (count($output) == 0) {

          // Save the image to the user's profile.
          $profile_photo->uid = $accountid;
          $profile_photo = file_save($profile_photo);

          // Set the file usage for the user.
          file_usage_add($profile_photo, 'user', 'user', $accountid);

          // Associate image file to user's account.
          db_update('users')
            ->fields(array('picture' => $profile_photo->fid))
            ->condition('uid', $accountid)
            ->execute();
        }
        else {
          drupal_set_message(t('Profile image was too large.'), 'error');
        }
      }
    }
  }
}

/**
 * Get the Stitchz Login Configuration Settings.
 *
 * @return SelectQueryInterface
 *   The result set of configuration settings.
 */
function stitchz_social_login_authorization_handler_get_settings() {

  $sql = "SELECT s.* FROM {stitchz_social_login_config_settings} s";
  $results = db_query($sql)->fetchAssoc();

  return $results;
}
