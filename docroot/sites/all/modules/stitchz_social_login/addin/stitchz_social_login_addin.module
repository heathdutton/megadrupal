<?php
/**
 * @file
 * Adds the configured Social Network logins.
 */

/**
 * Implements hook block_info().
 */
function stitchz_social_login_addin_block_info() {
  $blocks['stitchz_social_login'] = array(
    'info' => t('Stitchz Social Login'),
  );
  return $blocks;
}

/**
 * Immplements hook block_view().
 */
function stitchz_social_login_addin_block_view($delta = '') {

  if (user_is_anonymous()) {

    // Read settings from database.
    $config = stitchz_social_login_addin_get_settings();

    $block = array();
    switch ($delta) {
      case 'stitchz_social_login':

        $json_providers = drupal_json_decode(str_replace('\'', '"', $config['syncd_providers']));
        $scope = $json_providers['Scope'];
        $providers = (isset($json_providers['Providers']) ? $json_providers['Providers'] : array());
        $apikey = $config['apikey'];
        $version = $config['version'];
        $redirecturl = $config['redirecturl'];
        $notes = $config['notes'];
        $provider_html = stitchz_social_login_addin_format_provider_list($config['domain'], $providers, $version, $apikey, $redirecturl, $scope, $notes);

        // Add the necessary styles.
        $block['content']['#attached']['css'][] = array(
          'data' => drupal_get_path('module', 'stitchz_social_login') . '/styles/stitchz_social_login.css',
          'type' => 'file',
        );
        $block['content']['#attached']['css'][] = array(
          'data' => '//cdnjs.cloudflare.com/ajax/libs/font-awesome/4.1.0/css/font-awesome.min.css',
          'type' => 'external',
        );

        // Add content to block.
        $block['content'] = $provider_html;
        break;
    }
    return $block;
  }
  else {
    return FALSE;
  }
}

/**
 * Implements hook_form_alter().
 */
function stitchz_social_login_addin_form_alter(&$form, &$form_state) {
  switch ($form['#form_id']) {
    case 'user_login':
      stitchz_social_login_addin_display_provider_list($form, $form_state, $form['#form_id']);
      break;

    case 'user_login_block':
      stitchz_social_login_addin_display_provider_list($form, $form_state, $form['#form_id']);
      break;

    case 'user_register_form':
      stitchz_social_login_addin_display_provider_list($form, $form_state, $form['#form_id']);
      break;

  }
}

/**
 * Based on the given formname, builds the proper provider list for display.
 *
 * @param object $form
 *   Drupal form object.
 * @param object $form_state
 *   Byref Drupal form state.
 * @param string $formname
 *   The html ID name of the form to display.
 */
function stitchz_social_login_addin_display_provider_list(&$form, &$form_state, $formname) {
  // Eead settings from database.
  $config = stitchz_social_login_addin_get_settings();

  // Check the form has been configured.
  if (!empty($config['enable_' . $formname . '_screen'])) {

    // Add the necessary styles.
    $form['#attached']['css'][] = array(
      'data' => drupal_get_path('module', 'stitchz_social_login') . '/styles/stitchz_social_login.css',
      'type' => 'file',
    );
    $form['#attached']['css'][] = array(
      'data' => '//cdnjs.cloudflare.com/ajax/libs/font-awesome/4.1.0/css/font-awesome.min.css',
      'type' => 'external',
    );

    // Get and format the json string.
    $json_providers = drupal_json_decode(str_replace('\'', '"', $config['syncd_providers']));
    $scope = $json_providers['Scope'];
    $providers = (isset($json_providers['Providers']) ? $json_providers['Providers'] : array());
    $apikey = $config['apikey'];
    $version = $config['version'];
    $redirecturl = $config['redirecturl'];
    $notes = $config['notes'];

    // With the list of providers, format it for display.
    $provider_html = stitchz_social_login_addin_format_provider_list($config['domain'], $providers, $version, $apikey, $redirecturl, $scope, $notes, 'user_login_stitchz_providers_list');
    $content = $provider_html;

    $form['stitchz_social_login_addin_form'] = array(
      '#weight' => -1,
      'content' => $content,
    );
  }
}

/**
 * Implements hook_menu().
 */
function stitchz_social_login_addin_menu() {
  $items = array();

  $items['user/%user/social_login_accounts'] = array(
    'title' => 'Connected Identities',
    'description' => 'Configure how your users login with their Social Login identity',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stitchz_social_login_addin_profile_accounts', 1),
    'access callback' => 'user_view_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );

  $items['stitchz_social_login/%user/identity/delete/%'] = array(
    'title' => 'Stitchz Social Login Addin',
    'page callback' => 'stitchz_social_login_addin_remove_identity',
    'page arguments' => array(1, 4),
    'access callback' => 'user_view_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
  );

  $items['stitchz_social_login/identity/add'] = array(
    'title' => 'Stitchz Social Login Addin',
    'page callback' => 'stitchz_social_login_addin_add_identity',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Build the screen of identites for the user.
 *
 * @param object $form
 *   Drupal form object.
 * @param object $form_state
 *   Byref Drupal form state.
 * @param object $account
 *   User account to get identities for.
 *
 * @return object
 *   The form object fully populated.
 */
function stitchz_social_login_addin_profile_accounts($form, &$form_state, $account) {

  // Add the necessary styles.
  $form['#attached']['css'][] = array(
    'data' => drupal_get_path('module', 'stitchz_social_login') . '/styles/stitchz_social_login.css',
    'type' => 'file',
  );
  $form['#attached']['css'][] = array(
    'data' => '//cdnjs.cloudflare.com/ajax/libs/font-awesome/4.1.0/css/font-awesome.min.css',
    'type' => 'external',
  );

  // Read settings from database.
  $config = stitchz_social_login_addin_get_settings();

  $form['stitchz_social_login_addin_form_fieldset'] = array(
    '#id' => drupal_html_id('stitchz_social_login_addin_form_fieldset'),
    '#type' => 'container',
  );

  /********************
   Begin connected Social Login identities
   ********************/

  $form['stitchz_social_login_addin_form_fieldset']['identities'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'id' => drupal_html_id('stitchz_social_login_addin_form_fieldset_identities'),
    ),
  );

  // Get the list of identites for the current user.
  $identities = stitchz_social_login_addin_get_user_identities($account);

  if (!empty($identities)) {
    $redirecturl = $config['redirecturl'];
    // Remove the stitchz authentication url.
    $redirecturl = str_replace('/stitchz_social_login/auth', '', $redirecturl);
    $default = stitchz_social_login_addin_formatuser_provider_list($account, check_plain($config['domain']), $identities, $redirecturl);
  }
  else {
    $default = array(
      '#markup' => t('You currently have no social login identities connected to your account.'),
      '#prefix' => '<strong>',
      '#suffix' => '</strong>',
    );
  }

  $form['stitchz_social_login_addin_form_fieldset']['identities']['content'] = $default;

  /********************
   Begin available Social Login providers.
   ********************/

  $form['stitchz_social_login_addin_form_fieldset']['providers'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'id' => drupal_html_id('stitchz_social_login_addin_form_fieldset_providers'),
    ),
  );

  if (!empty($config['syncd_providers'])) {
    $json_providers = drupal_json_decode(str_replace('\'', '"', $config['syncd_providers']));
    $providers = (isset($json_providers['Providers']) ? $json_providers['Providers'] : array());
    $apikey = $config['apikey'];
    $redirecturl = $config['redirecturl'];
    $default = stitchz_social_login_addin_unused_identity_list($account, $providers, $identities, $config['domain'], $apikey, $redirecturl);
  }
  else {
    $default = t('No providers available to add to your account.');
  }
  $form['stitchz_social_login_addin_form_fieldset']['providers']['content'] = $default;

  return $form;
}

/**
 * Gets a result set of the current user's identities.
 *
 * @param object $account
 *   User account to get identities for.
 *
 * @return array
 *   An associative array of identities.
 */
function stitchz_social_login_addin_get_user_identities($account = NULL) {
  if (!isset($account) || empty($account)) {
    global $user;
    $uid = $user->uid;
  }
  else {
    $uid = $account->uid;
  }

  $sql = "SELECT i.sliid, i.identity, i.provider, a.aid 
    FROM {authmap} AS a
    INNER JOIN {stitchz_social_login_identities} AS i ON a.aid = i.authmapid
    WHERE a.uid = :uid
    AND a.module = :module";

  $args = array(
    ':uid' => $uid,
    ':module' => 'stitchz_social_login',
  );

  $result = db_query($sql, $args);

  // Return an array of identities.
  return $result->fetchAll();
}

/**
 * Create the list of identity providers for display.
 *
 * @param string $dnsalias
 *   App url as provided by Stitchz.
 * @param array $providers
 *   Json string of identity providers.
 * @param string $apiversion
 *   The version of the Stitchz api being used.
 * @param string $apikey
 *   Unique client id provided by Stitchz.
 * @param string $redirect_uri
 *   Callback url where Stitchz will send authenticated response.
 * @param string $scope
 *   Application scope as provided by Stitchz.
 * @param string $notes
 *   The custom message to add to the bottom of the div.
 * @param string $list_id
 *   The html ID name to give to the resulting div.
 *
 * @return array
 *   A render array of identity providers.
 */
function stitchz_social_login_addin_format_provider_list($dnsalias, array $providers, $apiversion, $apikey, $redirect_uri, $scope, $notes, $list_id = NULL) {

  $restricted_resource_url = rtrim($dnsalias, '/') . '/';

  $providers_array = array();
  foreach ($providers as $provider) {
    if ($provider['IsActive'] === TRUE) {
      $provider_name = check_plain($provider['Name']);

      // Check which api version to call.
      if ($apiversion == '1') {
        $authenticate_url = url($restricted_resource_url . str_replace(' ', '', $provider_name) . '/v1/Authenticate',
        array(
          'query' => array(
            'ApiKey' => urlencode($apikey),
            'ReturnUrl' => $redirect_uri,
          ),
          'external' => TRUE,
        ));
      }
      else {
        // Generate a random string.
        $state = drupal_substr(drupal_get_token(), 0, 10);
        $authenticate_url = url($restricted_resource_url . str_replace(' ', '', $provider_name) . '/v2/Authenticate',
        array(
          'query' => array(
            'client_id' => urlencode($apikey),
            'redirect_uri' => $redirect_uri,
            'scope' => urlencode($scope),
            'state' => $state,
            'response_type' => 'code',
          ),
          'external' => TRUE,
        ));
      }

      array_push($providers_array, array(
        '#theme' => 'stitchz_social_login_addin_provider_block',
        '#provider_name' => $provider_name,
        '#authentication_url' => $authenticate_url,
      ));
    }
  }

  $output = array(
    'content' => array(
      'header' => array(
        '#markup' => t('Sign In With:'),
        '#prefix' => '<div>',
        '#suffix' => '</div>',
      ),
      'container' => array(
        '#prefix' => '<ul class="stitchz_social_login_provider_list"' . (!empty($list_id) ? ' id="' . drupal_html_id($list_id) . '"' : '') . '>',
        '#suffix' => '</ul>',
        'child' => $providers_array,
      ),
      'notes' => array(
        '#prefix' => '<div class="stitchz_social_login_provider_list_notes">',
        '#suffix' => '</div>',
        '#markup' => check_markup($notes, 'filtered_html'),
      ),
      'footer' => array(
        '#prefix' => '<div class="icon_footer">',
        '#suffix' => '</div>',
        'child' => array(
          '#prefix' => '<div class="left">',
          '#suffix' => '</div>',
          'child' => array(
            'child1' => array(
              '#markup' => l(t('Powered by') . ' ', 'http://www.stitchz.net/',
              array(
                'attributes' => array(
                  'class' => array('poweredby'),
                ),
              )),
            ),
            'child2' => array(
              '#markup' => l(theme('image', array('path' => drupal_get_path('module', 'stitchz_social_login') . '/images/logo-55x40.png')),
              'http://www.stitchz.net/',
              array(
                'html' => TRUE,
                'attributes' => array(
                  'class' => array('poweredby'),
                  'target' => '_blank',
                ),
              )
              ),
            ),
          ),
        ),
      ),
      'clear' => array(
        '#markup' => '<div style="clear:both;"></div>',
      ),
    ),
  );

  return $output;
}

/**
 * Builds list of identity providers that aren't connect to the current user.
 *
 * @param object $account
 *   The user account to get unused identities for.
 * @param array $providers
 *   A json collection of identity providers.
 * @param array $identities
 *   A list of identities connected to the user.
 * @param string $dnsalias
 *   The app url as provided by Stitchz.
 * @param string $apikey
 *   The unique client id provided by Stitchz.
 * @param string $redirect_uri
 *   Callback url where Stitchz will send authenticated response.
 * @param string $list_id
 *   The html ID name to give to the resulting div.
 *
 * @return array
 *   A render array of identity providers.
 */
function stitchz_social_login_addin_unused_identity_list($account, array $providers, array $identities, $dnsalias, $apikey, $redirect_uri, $list_id = NULL) {

  $i = 0;

  // Check if any $providers exist, if not, then don't return the HTML.
  if (!empty($providers) && isset($providers)) {

    $providers_array = array();

    // Remove the trailing slash if it exists.
    $dnsalias = rtrim($dnsalias, '/');

    // Remove the stitchz authentication url.
    $redirect_uri = str_replace('/stitchz_social_login/auth', '', $redirect_uri);
    // Check if $redirect_uri ends with a slash or not.
    $redirect_uri = rtrim($redirect_uri, '/');
    $redirect_uri = $redirect_uri . '/stitchz_social_login/identity/add';

    // Loop through providers and build a list of unused providers to display.
    foreach ($providers as $provider) {
      if ($provider['IsActive'] === TRUE) {
        $provider_name = ucfirst(trim(check_plain($provider['Name'])));
        $existing_provider = FALSE;

        // Check if any identities are currently connected.
        if (isset($identities)) {
          foreach ($identities as $identity) {
            $identity_provider_name = ucfirst(trim(str_replace(".com", "", check_plain($identity->provider))));

            if ($provider_name === $identity_provider_name) {
              $existing_provider = TRUE;
              break;
            }
          }
        }

        // If the provider isn't used, then add it to the list to display.
        if ($existing_provider === FALSE) {
          $i += 1;
          $return_url = url($dnsalias . '/' . $provider_name . '/v1/Authenticate',
            array(
              'query' => array(
                'ApiKey' => urlencode($apikey),
                'ReturnUrl' => $redirect_uri,
              ),
              'external' => TRUE,
            ));

          array_push($providers_array, array(
            '#theme' => 'stitchz_social_login_addin_provider_block',
            '#provider_name' => $provider_name,
            '#authentication_url' => $return_url,
          ));
        }
      }
    }

    $output = array(
      'content' => array(
        'header' => array(
          '#markup' => t('Authenticate with another Social Login Provider:'),
          '#prefix' => '<div class="provider_list_title">',
          '#suffix' => '</div>',
        ),
        'container' => array(
          '#prefix' => '<ul class="stitchz_social_login_provider_list"' . (!empty($list_id) ? ' id="' . drupal_html_id($list_id) . '"' : '') . '>',
          '#suffix' => '</ul>',
          'child' => $providers_array,
        ),
        'footer' => array(
          '#prefix' => '<div class="icon_footer">',
          '#suffix' => '</div>',
          'child' => array(
            '#prefix' => '<div class="left">',
            '#suffix' => '</div>',
            'child' => array(
              'child1' => array(
                '#markup' => l(t('Powered by') . ' ', 'http://www.stitchz.net/',
                array(
                  'attributes' => array(
                    'class' => array('poweredby'),
                  ),
                )),
              ),
              'child2' => array(
                '#markup' => l(theme('image', array('path' => drupal_get_path('module', 'stitchz_social_login') . '/images/logo-55x40.png')),
                'http://www.stitchz.net/',
                array(
                  'html' => TRUE,
                  'attributes' => array(
                    'class' => array('poweredby'),
                    'target' => '_blank',
                  ),
                )
                ),
              ),
            ),
          ),
        ),
        'clear' => array(
          '#markup' => '<div style="clear:both;"></div>',
        ),
      ),
    );
  }

  // If no providers are left to use, then let the end user know.
  if ($i == 0) {
    $output = array(
      '#markup' => t('All available social login providers have been used.'),
      '#prefix' => '<div class="provider_list_title">',
      '#suffix' => '</div>',
    );
  }

  return $output;
}

/**
 * Formats the currently connected identity providers.
 *
 * Creates an html formatted list of connected identity providers, including
 * links to remove the identity profile from current account.
 *
 * @param object $account
 *   The user account to get unused identities for.
 * @param string $dnsalias
 *   App url as provided by Stitchz.
 * @param array $identities
 *   A list of identities connected to the user.
 * @param string $redirect_uri
 *   Callback url where Stitchz will send authenticated response.
 * @param string $list_id
 *   The html ID name to give to the resulting div.
 *
 * @return array
 *   A render array of identity providers.
 */
function stitchz_social_login_addin_formatuser_provider_list($account, $dnsalias, array $identities, $redirect_uri, $list_id = NULL) {

  $providers_array = array();

  if (!empty($identities) && isset($identities)) {
    foreach ($identities as $identity) {
      $provider_name = ucfirst(trim(str_replace(".com", "", check_plain($identity->provider))));

      // Remove the stitchz authentication url.
      $redirect_uri = str_replace('/stitchz_social_login/auth', '', $redirect_uri);
      // Check if $redirect_uri ends with a slash or not.
      $redirect_uri = rtrim($redirect_uri, '/');
      $authenticate_url = url($redirect_uri . '/stitchz_social_login/' . $account->uid . '/identity/delete/' . $identity->aid);

      array_push($providers_array, array(
        '#theme' => 'stitchz_social_login_addin_profile_identities_block',
        '#provider_name' => $provider_name,
        '#authentication_url' => $authenticate_url,
      ));
    }
  }
  else {
    array_push($providers_array, array(
      '#markup' => t('You currently have no social login identities connected to your account.'),
      '#prefix' => '<li>',
      '#suffix' => '</li>',
    ));
  }

  $output = array(
    'content' => array(
      'header' => array(
        '#markup' => t('Connected social login identities:'),
        '#prefix' => '<div class="provider_list_title">',
        '#suffix' => '</div>',
      ),
      'container' => array(
        '#prefix' => '<ul class="stitchz_social_login_profile_identities_list"' . (!empty($list_id) ? ' id="' . drupal_html_id($list_id) . '"' : '') . '>',
        '#suffix' => '</ul>',
        'child' => $providers_array,
      ),
    ),
  );

  return $output;
}

/**
 * Adds an additional social login identity to the current user.
 */
function stitchz_social_login_addin_add_identity() {

  global $user;

  // The user must be logged in.
  if (user_is_logged_in()) {

    // Read settings from database.
    $config = stitchz_social_login_addin_get_settings();

    // Send request and read incoming response.
    $profile = stitchz_social_login_addin_prepare_and_send_v1_request($config['domain'], $config['appsecret']);

    // If we have a valid response.
    if (is_array($profile)) {

      // Check if the response contains any errors.
      if (isset($profile["error"])) {
        // Check error code and/or status parameter.
        $error = (!empty($profile["error"]["error_description"]) ? $profile["error"]["error_description"] : t('Unknown error, please contact your website administrator.'));
        drupal_set_message(t('There was an error logging in with Stitchz Social Login, %error', array('%error' => $error)), 'error');
        drupal_goto('user/login');
      }
      // No errors, so lets process the profile.
      elseif (isset($profile["profile"])) {
        $useridentity = $profile["profile"];
        $identity = $useridentity['identifier'];

        // The provider we are authenticed with.
        $provider = 'stitchz.net';
        if (isset($useridentity['accounts'])) {
          $socialaccount = $useridentity['accounts'];
          $provider = $socialaccount['domain'];
        }

        // Add identity to current user account.
        stitchz_social_login_addin_assoc_identity_to_user($user, $identity, $provider);

        drupal_goto('user/' . $user->uid . '/social_login_accounts');
      }
    }
  }
  else {
    watchdog('Stitchz Social Login Add Identity', 'Unable to add identity, the user is not logged in or their session has expired.');

    drupal_set_message(t('There was an error adding the social identity. Login and try again.'));

    drupal_goto('user/login');
  }
}

/**
 * Setup and send an HTTP request.
 *
 * Sets up and sends an HTTP request to Stitchz API to get an authenticated
 * user's social profile.
 *
 * @param string $dnsalias
 *   App url as provided by Stitchz.
 * @param string $appsecret
 *   The application secret provided by Stitchz.
 *
 * @return json|bool
 *   A json object of the Stitchz API response.
 */
function stitchz_social_login_addin_prepare_and_send_v1_request($dnsalias, $appsecret) {

  $token = $_POST['token'];

  $url = rtrim($dnsalias, '/') . '/Authentication/v1/Auth';
  $data = drupal_http_build_query(array(
    'Token' => urlencode($token),
    'AppSecret' => urlencode($appsecret),
  ));

  $options = array(
    'method' => 'POST',
    'headers' => array(
      'Content-Type' => 'application/x-www-form-urlencoded',
      'Accept' => 'application/json',
    ),
    'data' => $data,
  );

  // TODO: we could use CURL here or give a choice of default Drupal vs. Curl.
  $request = drupal_http_request($url, $options);

  if (is_object($request) AND !empty($request->data)) {
    $json_response = drupal_json_decode($request->data);

    return $json_response;
  }
  else {
    return FALSE;
  }
}

/**
 * Adds the given identity to an existing drupal user account.
 *
 * @param object $account
 *   The user account object to associate the given identity with.
 * @param string $identity
 *   The identity to connect to the user account.
 * @param string $provider
 *   The provider name currently authenticated with.
 *
 * @return bool
 *   TRUE if successful; FALSE if not.
 */
function stitchz_social_login_addin_assoc_identity_to_user($account, $identity, $provider) {

  $db_transaction = db_transaction();

  try {

    // Check if this identity is used already or not.
    $sql = "SELECT a.aid FROM {authmap} a WHERE a.module = 'stitchz_social_login' AND a.authname = :authname";
    $authmapid = db_query($sql, array(':authname' => $identity))->fetchField();

    // Make sure the identity isn't already in use by another account.
    if (is_numeric($authmapid) === FALSE) {

      // We're not using user_set_authmaps on purpose here as it maintains
      // a single row for the user in the authmap table; we are allowing more
      // than one identity per user, so we want more than one row per identity.
      db_insert('authmap')
        ->fields(array(
          'authname' => $identity,
          'module' => 'stitchz_social_login',
          'uid' => $account->uid,
          )
        )
        ->execute();

      // Get the newly added authmap id.
      $sql = "SELECT a.aid FROM {authmap} a WHERE a.module = 'stitchz_social_login' AND a.authname = :authname";
      $authmapid = db_query($sql, array(':authname' => $identity))
        ->fetchField();

      if (is_numeric($authmapid)) {

        // Look for an existing identity.
        $sql = "SELECT s.sliid FROM {stitchz_social_login_identities} s WHERE s.identity = :identity AND s.authmapid = :authmapid";
        $sliid = db_query($sql,
          array(
            ':identity' => $identity,
            ':authmapid' => $authmapid,
          )
        )
        ->fetchField();

        // Identity does not exist, so add it.
        if (!is_numeric($sliid)) {
          db_insert('stitchz_social_login_identities')
            ->fields(array(
              'identity' => $identity,
              'provider' => $provider,
              'authmapid' => $authmapid,
              'accessTokenExpirationUtc' => format_date(REQUEST_TIME, 'custom', 'Y-m-d H:i:s'),
              'accessTokenIssueDateUtc' => format_date(REQUEST_TIME, 'custom', 'Y-m-d H:i:s'),
              )
            )
            ->execute();
        }

        return TRUE;
      }
    }
    else {
      drupal_set_message(t('The @provider identity account is already in use. Please try another identity.', array('@provider' => $provider)));
    }
  }
  catch (Exception $ex) {
    $db_transaction->rollback();
    watchdog_exception('stitchz_social_login_addin', $ex);
    drupal_set_message(t('There was an error processing your registration, contact the administrator'));
  }
  return FALSE;
}

/**
 * Removes the given identity (authmap id) from the current user.
 *
 * @param object $account
 *   The user account to remove the identity from.
 * @param int $aid
 *   The authmap id to be removed.
 *
 * @return null|bool
 *   Redirects to user page if successful, otherwise, returns FALSE.
 */
function stitchz_social_login_addin_remove_identity($account, $aid) {
  if (is_numeric($aid)) {

    // No user account assumes we want the current user.
    if (empty($account)) {
      global $user;
      $uid = $user->uid;
    }
    else {
      $uid = $account->uid;
    }

    $db_transaction = db_transaction();

    try {
      db_delete('stitchz_social_login_identities')
        ->condition('authmapid', $aid)
        ->execute();

      db_delete('authmap')
        ->condition('aid', $aid)
        ->condition('module', 'stitchz_social_login')
        ->execute();

      drupal_goto('user/' . $uid . '/social_login_accounts');;
    }
    catch (Exception $ex) {
      $db_transaction->rollback();
      watchdog_exception('stitchz_social_login_authorization_handler', $ex);
      drupal_set_message(t('There was an error processing your registration, contact the administrator'));
    }
    return FALSE;
  }
}

/**
 * Implements hook_theme().
 */
function stitchz_social_login_addin_theme() {
  return array(
    'stitchz_social_login_addin_provider_block' => array(
      'template' => 'stitchz_social_login_provider_block',
      'variables' => array('provider_name' => NULL, 'authentication_url' => NULL),
      'path' => drupal_get_path('module', 'stitchz_social_login') . '/templates',
    ),
    'stitchz_social_login_addin_profile_identities_block' => array(
      'template' => 'stitchz_social_login_profile_identities_block',
      'variables' => array('provider_name' => NULL, 'authentication_url' => NULL),
      'path' => drupal_get_path('module', 'stitchz_social_login') . '/templates',
    ),
  );
}

/**
 * Get the Stitchz Login Configuration Settings.
 *
 * @return SelectQueryInterface
 *   The result set of configuration settings.
 */
function stitchz_social_login_addin_get_settings() {

  $sql = "SELECT s.* FROM {stitchz_social_login_config_settings} s";
  $results = db_query($sql)->fetchAssoc();

  return $results;
}
