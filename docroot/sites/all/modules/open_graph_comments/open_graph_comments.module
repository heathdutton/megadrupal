<?php

/**
 * @file
 * Open Graph Comment primary module file.
 *
 * It contains alteration in default comment to add open graph data from url
 * link added in drupal comments.
 */

/**
 * Function to get formatted view with og tags from link.
 *
 * @param string $url
 *   URL for which open graph meta tags are needed.
 *
 * @return array
 *   Array of open graph meta tags.
 */
function open_graph_comments_get_og_tags($url) {
  $tags = array();
  $request_data = drupal_http_request($url);
  // Check for positive response code.
  if ($request_data->code == 200) {
    $html = new DOMDocument();
    // Suppressing warnings as HTML response might contain special characters
    // which will generate warnings.
    @$html->loadHTML($request_data->data);

    // Get all meta tags and loop through them.
    foreach ($html->getElementsByTagName('meta') as $meta) {
      // If the property attribute of the meta tag contains og: then save
      // content to tags variable.
      if (strpos($meta->getAttribute('property'), 'og:') !== FALSE) {
        $tags[$meta->getAttribute('property')] = check_plain($meta->getAttribute('content'));
      }
    }
  }

  return $tags;
}

/**
 * Implements hook_comment_view_alter().
 */
function open_graph_comments_comment_view_alter(&$build) {
  $open_graph_status = variable_get('open_graph_comments_' . $build['#node']->type, FALSE);
  // Check if open graph comments functionality is enabled in content type's
  // comments settings.
  if ($open_graph_status) {
    $matches = array();
    $build['#attached']['css'] = array(
      drupal_get_path('module', 'open_graph_comments') . '/css/open_graph_comments.css',
    );

    // Set comment body field language to comment language if field translation
    // is on otherwise set it as LANGUAGE_NONE.
    $langcode = LANGUAGE_NONE;
    if ($build['comment_body']['#field_translatable']) {
      $langcode = $build['#comment']->language;
    }
    $comment_body = $build['#comment']->comment_body[$langcode][0]['value'];

    // Check if there is a url in the text.
    preg_match("/(http|https|ftp|ftps)\:\/\/[a-zA-Z0-9\-\.]+\.[a-zA-Z]{2,3}(\/\S*)?/", $comment_body, $matches);

    // Check if string is valid url or not.
    if (isset($matches[0]) && valid_url($matches[0])) {
      // Get open graph data from cache, if not then set cache.
      $og_tags = open_graph_comments_cache_data($matches[0], $build['#comment']->cid);
    }

    // Get variables from opengraph metatags.
    $meta_array = array();
    if (isset($og_tags) && !empty($og_tags)) {
      if (isset($og_tags['og:url'])) {
        $meta_array['url'] = check_url($og_tags['og:url']);
      }
      if (isset($og_tags['og:title'])) {
        $meta_array['title'] = check_plain($og_tags['og:title']);
      }
      if (isset($og_tags['og:image'])) {
        $meta_array['img'] = check_url($og_tags['og:image']);
      }
      if (isset($og_tags['og:description'])) {
        $meta_array['desc'] = check_plain($og_tags['og:description']);
      }

      $build['ogc'] = array(
        '#theme' => 'open_graph_comments_template',
        '#og_data' => $meta_array,
      );
    }
  }
}

/**
 * Function to get and set comment open graph data.
 *
 * @param string $url
 *   URL to get open graph data.
 * @param int $cid
 *   Id of comment.
 *
 * @return array
 *   Open graph data.
 */
function open_graph_comments_cache_data($url, $cid) {
  $og_tags = array();
  // Cache open graph data for particular comment.
  if ($cache = cache_get('open_graph_comments_' . $cid)) {
    $og_tags = $cache->data;
  }
  else {
    $og_tags = open_graph_comments_get_og_tags($url);
    cache_set('open_graph_comments_' . $cid, $og_tags, 'cache');
  }
  return $og_tags;
}

/**
 * Implements hook_theme().
 */
function open_graph_comments_theme($existing, $type, $theme, $path) {
  return array(
    'open_graph_comments_template' => array(
      'template' => 'open_graph_comments',
      'variables' => array(
        'og_data' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function open_graph_comments_form_node_type_form_alter(&$form, &$form_state) {
  // Set open graph setting to content types.
  if (isset($form['type'])) {
    $form['comment']['open_graph_comments'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable open graph comments'),
      '#description' => t('Display open graph data of link provided in comments.'),
      '#default_value' => variable_get('open_graph_comments_' . $form['#node_type']->type, FALSE),
    );
  }
}

/**
 * Implements hook_comment_update().
 */
function open_graph_comments_comment_update($comment) {
  // Get comment's node type to find whether open graph comments setting is
  // enabled or not.
  $query = db_select('node', 'n');
  $query->addField('n', 'type');
  $query->condition('n.nid', $comment->nid, '=');
  $comment_node_type = $query->execute()->fetchField();

  // Check if open graph comments functionality is enabled in content type's
  // comments settings.
  $open_graph_status = variable_get('open_graph_comments_' . $comment_node_type, FALSE);
  if ($open_graph_status) {
    // Check if comment's open graph data already set.
    $cache = cache_get('open_graph_comments_' . $comment->cid);
    if ($cache) {
      // Delete comment cache data.
      cache_clear_all($cache->cid, 'cache');
    }
  }
}
