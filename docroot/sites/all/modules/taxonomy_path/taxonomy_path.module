<?php
/**
 * Implements hook_field_formatter_info
 * 
 * @return array
 */
function taxonomy_path_field_formatter_info() {
  return array(
    'taxonomy_term_path' => array( //Machine name of the formatter
      'label' => t('Link to path'),
      'field types' => array('taxonomy_term_reference'),
      'settings' => array(
        'path' => '',
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form
 * 
 * @param array $field
 * @param array $instance
 * @param string $view_mode
 * @param array $form
 * @param array $form_state
 * 
 * @return array
 */
function taxonomy_path_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  if ('taxonomy_term_path' == $display['type']) {
    $element['path'] = array(
      '#type' => 'textfield',
      '#title' => t('Path'),
      '#description' => t('The path to use as the link for the taxonomy term'),
      '#default_value' => $settings['path'],
    );

    if (TRUE == module_exists('token')) {
      $element['tokens'] = array(
        '#title' => t('Tokens'),
        '#type' => 'fieldset',
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
      );
      $element['tokens']['help'] = array(
        '#theme' => 'token_tree',
        '#token_types' => 'all',
        '#global_types' => FALSE,
      );
    }
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary
 * 
 * @param array $field
 * @param array $instance
 * @param string $view_mode
 * @return string
 */
function taxonomy_path_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  if ('taxonomy_term_path' == $display['type']) {
    $summary[] = (FALSE === empty($settings['path'])) ? t('Linked to @path', array('@path' => $settings['path'])) : t('Not linked');
  }

  return implode('<br>', $summary);
}

/**
 * Implements hook_field_formatter_prepare_view().
 *
 * This preloads all taxonomy terms for multiple loaded objects at once and
 * unsets values for invalid terms that do not exist.
 */
function taxonomy_path_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items, $displays) {
  $tids = array();

  // Collect every possible term attached to any of the fieldable entities.
  foreach ($entities as $id => $entity) {
    foreach ($items[$id] as $delta => $item) {
      // Force the array key to prevent duplicates.
      if ($item['tid'] != 'autocreate') {
        $tids[$item['tid']] = $item['tid'];
      }
    }
  }
  if ($tids) {
    $terms = taxonomy_term_load_multiple($tids);

    // Iterate through the fieldable entities again to attach the loaded term data.
    foreach ($entities as $id => $entity) {
      $rekey = FALSE;

      foreach ($items[$id] as $delta => $item) {
        // Check whether the taxonomy term field instance value could be loaded.
        if (isset($terms[$item['tid']])) {
          // Replace the instance value with the term data.
          $items[$id][$delta]['taxonomy_term'] = $terms[$item['tid']];
        }
        // Terms to be created are not in $terms, but are still legitimate.
        elseif ($item['tid'] == 'autocreate') {
          // Leave the item in place.
        }
        // Otherwise, unset the instance value, since the term does not exist.
        else {
          unset($items[$id][$delta]);
          $rekey = TRUE;
        }
      }

      if ($rekey) {
        // Rekey the items array.
        $items[$id] = array_values($items[$id]);
      }
    }
  }
}

/**
 * Implements hook_field_formatter_view
 * 
 * @param string $entity_type
 * @param mixed $entity
 * @param array $field
 * @param array $instance
 * @param string $langcode
 * @param array $items
 * @param array $display
 * @return array
 */
function taxonomy_path_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  global $user;
  
  $result = array();
  $settings = $display['settings'];
  
  switch ($display['type']) {
    case 'taxonomy_term_path': 
      foreach ($items as $delta => $item) {
        $term = $item['taxonomy_term'];
        $path = (FALSE === empty($settings['path'])) ? token_replace($settings['path'], array('term' => $term, 'user' => $user)) : '';
        $params = drupal_parse_url($path);
        
        // If we don't have a path just output the name
        if (FALSE === empty($path)) {
          $result[$delta] = array(
            '#type' => 'link',
            '#title' => check_plain($term->name),
            '#href' => $params['path'],
            '#options' => array('query' => $params['query'], 'fragment' => $params['fragment']),
          );
        }
        else {
          $result[$delta] = array('#markup' => $term->name);
        }
      }
      break;
  }

  return $result;
}
