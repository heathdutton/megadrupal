<?php

/**
 * @file
 * Installation file for Smart Chart module.
 */

/**
 * Implements hook_install().
 */
function smart_chart_install() {
  $t = get_t();

  // Chart content type.
  $content_type = array(
    'type' => 'smart_chart',
    'name' => $t('Smart Chart'),
    'description' => $t('Chart that displays nodes in tree view.'),
    'title_label' => $t('Title'),
    'base' => 'node_content',
    'custom' => TRUE,
  );

  // Set remaining definitions with defaults.
  $node_type = node_type_set_defaults($content_type);

  // Save content type.
  node_type_save($node_type);
  node_add_body_field($node_type, $t('Description'));

  // Set node options.
  variable_set('node_preview_smart_chart', 0);
  variable_set('node_options_smart_chart', array('status'));
  variable_set('node_submitted_smart_chart', 0);
  variable_set('menu_options_smart_chart', array(''));
  variable_set('menu_parent_smart_chart', ':0');

  // Connection content type.
  $content_type = array(
    'type' => 'smart_connection',
    'name' => $t('Smart Connection'),
    'description' => $t('Connection content type that connects items in a chart.'),
    'title_label' => $t('Title'),
    'base' => 'node_content',
    'custom' => TRUE,
  );

  // Set remaining definitions with defaults.
  $node_type = node_type_set_defaults($content_type);

  // Save content type.
  node_type_save($node_type);

  // Set node options.
  variable_set('node_preview_smart_connection', 0);
  variable_set('node_options_smart_connection', array('status'));
  variable_set('node_submitted_smart_connection', 0);
  variable_set('menu_options_smart_connection', array(''));
  variable_set('menu_parent_smart_connection', ':0');

  // Create Smart Chart field.
  $field = array(
    'field_name' => 'field_sc_chart',
    'type' => 'entityreference',
    'cardinality' => 1,
    'settings' => array(
      'target_type' => 'node',
      'handler_settings' => array('target_bundles' => array('smart_chart')),
    ),
  );
  field_create_field($field);

  // Create Smart Chart field instance.
  $instance = array(
    'field_name' => 'field_sc_chart',
    'entity_type' => 'node',
    'bundle' => 'smart_connection',
    'label' => $t('Smart Chart'),
    'widget' => array(
      'type' => 'entityreference_autocomplete',
    ),
    'settings' => array(
      'target_type' => 'node',
      'handler_settings' => array('target_bundles' => array('smart_chart')),
    ),
  );
  field_create_instance($instance);

  // Create parent field.
  $field = array(
    'field_name' => 'field_sc_parent',
    'type' => 'entityreference',
    'cardinality' => 1,
    'settings' => array(
      'target_type' => 'node',
      'handler_settings' => array('target_bundles' => array('smart_chart')),
    ),
  );
  field_create_field($field);

  // Create parent field instance.
  $instance = array(
    'field_name' => 'field_sc_parent',
    'entity_type' => 'node',
    'bundle' => 'smart_connection',
    'label' => $t('Parent'),
    'widget' => array(
      'type' => 'entityreference_autocomplete',
    ),
    'settings' => array(
      'target_type' => 'node',
      'handler_settings' => array('target_bundles' => array('smart_chart')),
    ),
  );
  field_create_instance($instance);

  // Create child field.
  $field = array(
    'field_name' => 'field_sc_child',
    'type' => 'entityreference',
    'cardinality' => 1,
    'settings' => array(
      'target_type' => 'node',
    ),
    'settings' => array(
      'target_type' => 'node',
      'handler_settings' => array('target_bundles' => array()),
    ),
  );
  field_create_field($field);

  // Create child field instance.
  $instance = array(
    'field_name' => 'field_sc_child',
    'entity_type' => 'node',
    'bundle' => 'smart_connection',
    'label' => $t('Child'),
    'widget' => array(
      'type' => 'entityreference_autocomplete',
    ),
    'settings' => array(
      'target_type' => 'node',
      'handler_settings' => array('target_bundles' => array()),
    ),
  );
  field_create_instance($instance);
}

/**
 * Implements hook_uninstall().
 */
function smart_chart_uninstall() {
  $t = get_t();

  $types = array('smart_chart', 'smart_connection');

  // Get all nids with group content Type.
  $result = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('type', $types, 'IN')
    ->execute()
    ->fetchAll();

  $nids = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }

  // Delete content.
  node_delete_multiple($nids);
  drupal_set_message($t('All nodes of content type were deleted.'));

  // @todo: create delete field logic here.

  // Remove field and field instances.
  foreach (field_info_instances('node', 'smart_chart') as $fieldname => $instance) {
    field_delete_field($fieldname);
    field_delete_instance($instance);
  }
  foreach (field_info_instances('node', 'smart_connection') as $fieldname => $instance) {
    field_delete_field($fieldname);
    field_delete_instance($instance);
  }

  // Remove Content Type.
  node_type_delete('smart_chart');
  node_type_delete('smart_connection');
  drupal_set_message($t('Content type was deleted.'));

  // Clean removed fields.
  field_purge_batch(1000);
}
