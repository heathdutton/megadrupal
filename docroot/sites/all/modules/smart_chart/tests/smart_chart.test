<?php

/**
 * @file
 * Test Smart Chart test file.
 */

/**
 * SmartChartTestCase Class.
 *
 * Check if Smart Chart functions work as expected.
 */
class SmartChartTestCase extends DrupalWebTestCase {

  /**
   * Test info function.
   */
  public static function getInfo() {
    return array(
      'name' => 'Smart Chart test',
      'description' => 'Test on chart functions.',
      'group' => 'Smart Suite',
    );
  }

  /**
   * Set-up function.
   */
  public function setUp() {
    parent::setUp();
    $this->resetAll();

    module_enable(array(
      'smart_chart',
      'smart_chart_item',
    ), TRUE);
    $this->resetAll();

  }

  /**
   * Test chart functions.
   */
  public function testSmartChartCheck() {

    $values = array(
      'uid' => 1,
      'title' => 'Chart',
      'type' => 'personnel',
    );
    module_load_include('inc', 'smart_chart', 'includes/smart_chart.functions');
    $chart = sc_chart_new($values);
    $chart_id = $chart->getIdentifier();

    $item = $this->createItem($chart, $chart);

    // Create item_1 with 4 children.
    $item_1 = $this->createItem($chart, $item);
    $item_1_b = $this->createItem($chart, $item_1);
    $item_1_b2 = $this->createItem($chart, $item_1);
    $item_1_c = $this->createItem($chart, $item_1_b);
    $item_1_c2 = $this->createItem($chart, $item_1_b);

    // Get parent id from item.
    $parent_id = sc_item_parent($item_1_b->getIdentifier());
    $this->assertEqual($parent_id, $item_1->getIdentifier(), 'Get item parent works.');

    // Get parent id from item using the chart id.
    $parent_id = sc_item_parent($item_1_b2->getIdentifier(), $chart_id);
    $this->assertEqual($parent_id, $item_1->getIdentifier(), 'Get item parent using chart id works.');

    // Get item children.
    $children = sc_item_children($item_1_b->getIdentifier(), $chart_id);
    $this->assertEqual(count($children), 2, 'Get item children works.');

    // Get item children using chart id.
    $children_all = sc_item_children($item_1->getIdentifier(), $chart_id);
    $this->assertEqual(count($children_all), 4, 'Get item children using chart id works.');

    // Get item children if item do not have any children.
    $empty_children = sc_item_children($item_1_c->getIdentifier(), $chart_id);
    $is_empty = empty($empty_children) ? TRUE : FALSE;
    $this->assertTrue($is_empty, 'There are no children in given item.');

    // Get item children if item do not have any children.
    $empty_children = sc_item_children($item_1_c2->getIdentifier(), $chart_id);
    $is_empty = empty($empty_children) ? TRUE : FALSE;
    $this->assertTrue($is_empty, 'There are no children in given item using the chart id.');

    // Get chart type tid from machine name.
    $personnel_tid = sc_get_chart_type_tid_from_machine_name('personnel');

    // Try to create a chart giving a wrong chart type.
    $values_2 = array(
      'uid' => 1,
      'title' => 'Chart',
      'type' => 'wrong_type',
    );
    $chart_2 = sc_chart_new($values_2);
    $chart_tid = $chart_2->field_sc_type->tid->value();
    $this->assertEqual($personnel_tid, $chart_tid,
      'If someone gives an invalid chart type, personnel chart type will be created instead.');

    // Check access to actions.
    // Create user without permissions.
    $user = $this->drupalCreateUser();
    $this->drupalLogin($user);
    $this->drupalGet('chart/' . $chart_id);
    $this->assertNoText(t('Add'), 'Add button is not visible.');
    $this->assertNoText(t('New'), 'New button is not visible.');
    $this->assertNoText(t('Break'), 'Break button is not visible.');
    $this->assertNoText(t('Delete'), 'Delete button is not visible.');

    // Add permissions and check actions are appearing on chart.
    debug('Check add chart item permission.');
    $user = $this->drupalCreateUser(array('add smart chart item'));
    $this->drupalLogin($user);
    $this->drupalGet('chart/' . $chart_id);
    $this->assertText(t('Add'), 'Add button is visible.');

    debug('Check new chart item permission.');
    $user = $this->drupalCreateUser(array('new smart chart item'));
    $this->drupalLogin($user);
    $this->drupalGet('chart/' . $chart_id);
    $this->assertText(t('New'), 'New button is visible.');

    debug('Check break chart item permission.');
    $user = $this->drupalCreateUser(array('break smart chart item'));
    $this->drupalLogin($user);
    $this->drupalGet('chart/' . $chart_id);
    $this->assertText(t('Break'), 'Break button is visible.');

    debug('Check delete chart item permission.');
    $user = $this->drupalCreateUser(array('delete smart chart item'));
    $this->drupalLogin($user);
    $this->drupalGet('chart/' . $chart_id);
    $this->assertText(t('Delete'), 'Delete button is visible.');


  }

  /**
   * Create item.
   *
   * @param \EntityMetadataWrapper $chart_entity
   *   Chart entity wrapper.
   * @param \EntityMetadataWrapper $parent_entity
   *   Parent entity wrapper.
   *
   * @return bool|\EntityMetadataWrapper
   *   Item entity wrapper.
   */
  private function createItem(EntityMetadataWrapper $chart_entity, EntityMetadataWrapper $parent_entity) {

    // Load functions.
    module_load_include('inc', 'smart_chart', 'includes/smart_chart.functions');

    // Create one item.
    $item = sc_item_new('1', $parent_entity->author->getIdentifier(), 'smart_chart_item');
    $item->save();

    // Create connection.
    $connection = sc_connection_new($chart_entity->getIdentifier(),
      $parent_entity->getIdentifier(), $item->getIdentifier());
    $connection->save();

    return $item;
  }
}
