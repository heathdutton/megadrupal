<?php

/**
 * @file
 * Support for configurable breadcrumbs.
 */

/**
 * Implement hook_entity_info().
 */
function breadcrumb2_entity_info() {
  $return = array(
    'breadcrumb2' => array(
      'label' => t('Breadcrumb'),
      'plural label' => t('Breadcrumbs'),
      'description' => t('Breadcrumb2 entity breadcrumbs.'),
      'entity class' => 'Breadcrumb',
      'controller class' => 'EntityAPIController',
      'base table' => 'breadcrumb',
      'fieldable' => TRUE,
      'view modes' => array(
        'full' => array(
          'label' => t('Breadcrumb'),
          'custom settings' => FALSE,
        ),
      ),
      'entity keys' => array(
        'id' => 'bid',
      ),
      'bundles' => array(
        'breadcrumb2' => array(
          'label' => t('Breadcrumb'),
          'admin' => array(
            'path' => 'admin/structure/breadcrumbs',
            'access arguments' => array('administer breadcrumbs'),
          ),
        ),
      ),
      'uri callback' => 'entity_class_uri',
      'access callback' => 'breadcrumb2_access',
      'module' => 'breadcrumb2',
      'metadata controller class' => 'Breadcrumb2MetadataController'
    ),
  );
  return $return;
}

/**
 * Implements hook_menu().
 */
function breadcrumb2_menu() {
  $items['admin/structure/breadcrumbs'] = array(
    'title' => 'Breadcrumbs',
    'description' => 'Manage breadcrumbs.',
    'page callback' => 'breadcrumb2_overview_breadcrumbs',
    'access arguments' => array('administer breadcrumbs'),
    'file' => 'breadcrumb2.admin.inc',
  );
  $items['admin/structure/breadcrumbs/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/structure/breadcrumbs/settings'] = array(
    'title' => 'Settings',
    'description' => 'Breadcrumbs settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('breadcrumb2_admin_settings'),
    'access arguments' => array('administer breadcrumbs'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'breadcrumb2.admin.inc',
    'weight' => 10,
  );
  $items['breadcrumb/add'] = array(
    'title' => 'Add breadcrumb',
    'page callback' => 'breadcrumb2_add',
    'access arguments' => array('administer breadcrumbs'),
    'type' => MENU_CALLBACK,
    'file' => 'breadcrumb2.admin.inc',
  );
  $items['breadcrumb/%breadcrumb2'] = array(
    'title' => 'Breadcrumb',
    'page callback' => 'breadcrumb2_page_view',
    'page arguments' => array(1),
    'access arguments' => array('administer breadcrumbs'),
    'file' => 'breadcrumb2.admin.inc',
  );
  $items['breadcrumb/%breadcrumb2/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['breadcrumb/%breadcrumb2/edit'] = array(
    'page callback' => 'breadcrumb2_page_edit',
    'page arguments' => array(1),
    'access arguments' => array('administer breadcrumbs'),
    'weight' => 0,
    'title' => 'Edit',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'breadcrumb2.admin.inc',
  );
  $items['breadcrumb/%breadcrumb2/delete'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('breadcrumb2_delete_confirm_form', 1),
    'access arguments' => array('administer breadcrumbs'),
    'weight' => 1,
    'title' => 'Delete',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'breadcrumb2.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function breadcrumb2_permission() {
  $permissions = array(
    'administer breadcrumbs' => array(
      'title' => t('Administer breadcrumbs'),
      'description' => t('Edit and view all entity breadcrumbs.'),
    ),  
  );
  return $permissions;  
}

/**
 * Determines whether the given user has access to a breadcrumb.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $breadcrumb
 *   Optionally a breadcrumb to check access for. If nothing is
 *   given, access for all breadcrumbs is determined.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 * @return boolean
 *   Whether access is allowed or not.
 */
function breadcrumb2_access($op, $breadcrumb = NULL, $account = NULL) {
  if (user_access('administer breadcrumbs', $account)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Fetch a breadcrumb object. 
 *
 * @param $path
 *   Internal path.
 * @return
 *   A fully-loaded $breadcrumb object or FALSE if it cannot be loaded.
 *
 * @see breadcrumb2_load_multiple()
 */
function breadcrumb2_load_by_path($path) {
  $cache = &drupal_static(__FUNCTION__, array());
  if (!isset($cache[$path])) {
    $breadcrumbs = breadcrumb2_load_multiple(FALSE, array('path' => $path));
    $cache[$path] = reset($breadcrumbs);
    return $cache[$path];
  }
  return $cache[$path];
}

/**
 * Fetch a breadcrumb object. 
 *
 * @param $bid
 *   Integer specifying the breadcrumb id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $breadcrumb object or FALSE if it cannot be loaded.
 *
 * @see breadcrumb2_load_multiple()
 */
function breadcrumb2_load($bid, $reset = FALSE) {
  $breadcrumbs = breadcrumb2_load_multiple(array($bid), array(), $reset);
  return reset($breadcrumbs);
}


/**
 * Load multiple breadcrumbs based on certain conditions.
 *
 * @param $bids
 *   An array of breadcrumb IDs.
 * @param $conditions
 *   An array of conditions to match against the {breadcrumb} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of breadcrumb objects, indexed by bid.
 *
 * @see entity_load()
 * @see breadcrumb2_load()
 */
function breadcrumb2_load_multiple($bids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('breadcrumb2', $bids, $conditions, $reset);
}

/**
 * Deletes a breadcrumb.
 */
function breadcrumb2_delete(Breadcrumb $breadcrumb) {
  $breadcrumb->delete();
}


/**
 * Delete multiple breadcrumbs.
 *
 * @param $bids
 *   An array of breadcrumb IDs.
 */
function breadcrumb2_delete_multiple(array $bids) {
  entity_get_controller('breadcrumb2')->delete($bids);
}


/**
 * Create a breadcrumb object.
 */
function breadcrumb2_create($values = array()) {
  return new Breadcrumb($values);
}


/**
 * Saves a breadcrumb to the database.
 *
 * @param $breadcrumb
 *   The breadcrumb object.
 */
function breadcrumb2_save(Breadcrumb $breadcrumb) {
  return $breadcrumb->save();
}

/**
 * URI callback for breadcrumbs
 */
function breadcrumb2_uri(Breadcrumb $breadcrumb) {
  return array(
    'path' => 'breadcrumb/' . $breadcrumb->bid,
  );
}

/**
 * The class used for breadcrumb entities
 */
class Breadcrumb extends Entity {
  /**
   * The breadcrumb id.
   *
   * @var integer
   */
  public $bid;

   /**
   * The internal path where breadcrumb should be shown.
   *
   * @var string
   */
  public $path;

  public function __construct($values = array()) {
    parent::__construct($values, 'breadcrumb2');
  }

  protected function defaultLabel() {
    return $this->path;
  }

  protected function defaultUri() {
    return array('path' => 'breadcrumb/' . $this->bid);
  }
  
  public function save() {
    if (empty($this->bid) && (!empty($this->path))) {
      $existing_breadcrumb = breadcrumb2_load_by_path($this->path);
      if (!empty($existing_breadcrumb)) {
         $this->bid = $existing_breadcrumb->bid;
         $this->is_new = FALSE;
      }
    }
    parent::save();
    // Update the static cache from breadcrumb2_load_by_path().
    $cache = &drupal_static('breadcrumb2_load_by_path', array());
    if (isset($cache[$this->path])) {
      $cache[$this->path] = $this;
    }
  }
}

/**
 * Implementation of hook_ctools_plugin_api().
 *
 * Tell Ctools that we support the default_field_validation_rules API.
 */
function breadcrumb2_ctools_plugin_api($owner, $api) {
  if ($owner == 'property_validation' && $api == 'default_property_validation_rules') {
    return array('version' => 2);
  }
}

/**
 * Implements hook_views_api().
 */
function breadcrumb2_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'breadcrumb2') . '/views',
  );
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function breadcrumb2_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link to 'breadcrumb/add' on 'admin/structure/breadcrumbs' page.
  if ($root_path == 'admin/structure/breadcrumbs') {
    $item = menu_get_item('breadcrumb/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/**
 * Implements hook_admin_paths().
 */
function breadcrumb2_admin_paths() {
  $paths = array(
    'breadcrumb/*' => TRUE,
    'breadcrumb/*/edit' => TRUE,
    'breadcrumb/*/delete' => TRUE,
    'breadcrumb/add' => TRUE,
  );
  return $paths;
}

/**
 * Implements hook_theme_registry_alter().
 */
function breadcrumb2_theme_registry_alter(&$theme_registry) {
  if (isset($theme_registry['breadcrumb'])) {
    $path = drupal_get_path('module', 'breadcrumb2');
    $theme_registry['breadcrumb']['path'] = $path;
    $theme_registry['breadcrumb']['template'] = 'breadcrumb';
    $theme_registry['breadcrumb']['function'] = NULL;
  }
  global $theme;
  $themes = list_themes();
  $theme_obj = $themes[$theme];
   _theme_process_registry($theme_registry, 'phptemplate', 'theme_engine', $theme_obj->name, dirname($theme_obj->filename));
}

/**
 * Processes variables for breadcrumb.tpl.php.
 *
 * Most themes utilize their own copy of breadcrumb.tpl.php. The default is located
 * inside "breadcrumbs/breadcrumb.tpl.php". Look in there for the full list of
 * variables.
 *
 * The $variables array contains the following arguments:
 * - $breadcrumb
 *
 * @see breadcrumb.tpl.php
 */
function template_preprocess_breadcrumb(&$variables) {
  $variables['classes_array'][] = 'breadcrumb-wrapper';
  // Populate the breadcrumb classes.
  if ($suggestions = theme_get_suggestions(arg(), 'breadcrumb', '-')) {
    foreach ($suggestions as $suggestion) {
      if ($suggestion != 'breadcrumb-front') {
        // Add current suggestion to breadcrumb classes to make it possible to theme
        // the breadcrumb depending on the current page type (e.g. node, admin, user,
        // etc.) as well as more specific data like node-12 or node-edit.
        $variables['classes_array'][] = drupal_html_class($suggestion);
      }
    }
  }
  
  $current_path = current_path();
  $breadcrumb2 = breadcrumb2_load_by_path($current_path);
  if (!empty($breadcrumb2)) {
    $breadcrumbs = array();
    // Only keep the first item. 
    if (!empty($variables['breadcrumb'][0]) && (strip_tags($variables['breadcrumb'][0]) == t('Home'))) {
      $hometext = variable_get('breadcrumb2_home', t('Home'));
	  $home_trail = '';
      if ($hometext != '') {
	     $home_trail = l($hometext, '<front>');
      }
      else {
         $home_trail = $variables['breadcrumb'][0];
      }
      $breadcrumbs[] = $home_trail;
    }
    $wrapper = entity_metadata_wrapper('breadcrumb2', $breadcrumb2);
    $breadcrumb_links = $wrapper->link->value();
    foreach ($breadcrumb_links as $breadcrumb_link) {
      $breadcrumbs[]= l($breadcrumb_link['title'], $breadcrumb_link['url']);
    }
    // Optionally append the page title
    if (variable_get('breadcrumb2_append_page_title', TRUE) && !drupal_is_front_page()) {
      $title =  drupal_get_title();
	  $page_title_trail = '';
      if (variable_get('breadcrumb2_append_page_title_no_link', TRUE)) {
        $page_title_trail = $title;
      }
      else {
        $page_title_trail = l($title, $_GET['q']);
      }
      $breadcrumbs[] = $page_title_trail;
    }
    $variables['breadcrumb'] = $breadcrumbs;
  }
  
  // Hide breadcrumb navigation if it contains only one element.
  $hide_breadcrumb = variable_get('breadcrumb2_hide_breadcrumb', TRUE);
  if ($hide_breadcrumb && count($variables['breadcrumb']) == 1) {
    $variables['breadcrumb'] = array();
  } 
	
  if (user_access('administer breadcrumbs') && user_access('access contextual links')) {
    $contextual_links_element   =    array(
      '#contextual_links' => array(
        'breadcrumb2' => array('breadcrumb', array('0')),
      )
    ); 

    $contextual_links = array(
      '#type' => 'contextual_links',
      '#contextual_links' => $contextual_links_element['#contextual_links'],
      '#element' => $contextual_links_element,
    );
    $variables['contextual_links'] = drupal_render($contextual_links);
    $variables['classes_array'][] = 'contextual-links-region';
  }
  
  $variables['prefix'] = variable_get('breadcrumb2_prefix', t('You are here:'));
  $variables['separator'] = variable_get('breadcrumb2_separator', '»');
  
  // Populate the breadcrumb template suggestions.
  if ($suggestions = theme_get_suggestions(arg(), 'breadcrumb')) {
    $variables['theme_hook_suggestions'] = $suggestions;
  }
  
  // Flatten out classes.
  $variables['classes'] = implode(' ', $variables['classes_array']);
}


/**
 * Implements hook_contextual_links_view_alter().
 */
function  breadcrumb2_contextual_links_view_alter(&$element, &$items) {
  if (isset($element['#contextual_links']['breadcrumb2']) && empty($items)) {
    $current_path = current_path();
    $breadcrumb = breadcrumb2_load_by_path($current_path);
    if (!empty($breadcrumb)) {
      $contextual_links_element['#contextual_links']['breadcrumb2'] = array('breadcrumb', array($breadcrumb->bid));
      $element['#links'] = array(
        array('title' => t('Config breadcrumb'), 'href' => 'breadcrumb/' . $breadcrumb->bid . '/edit', "query" => drupal_get_destination()),
      );
    }
    else {
      $element['#links'] = array(
        array('title' => t('Config breadcrumb'), 'href' => 'breadcrumb/add', "query" => array('path' => $current_path, drupal_get_destination())),
      );
    }
  }
}
