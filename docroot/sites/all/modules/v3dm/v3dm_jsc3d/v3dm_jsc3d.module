<?php

/**
 * Implements hook_theme().
 */
function v3dm_jsc3d_theme() {
  $hooks = array();
  $hooks['jsc3d'] = array(
    'render element' => 'element',
  );
  return $hooks;
}

/**
 * Implements of hook_field_formatter_info().
 */
function v3dm_jsc3d_field_formatter_info() {
  $info = array();
  $info['jsc3d'] = array(
    'label' => t('JSC3D'),
    'field types' => array('3dmodel'),
    'description' => t('Render 3D model with JSC3D.'),
    'settings' => array(
      'width' => V3DM_CONTAINER_WIDTH,
      'height' => V3DM_CONTAINER_HEIGHT,
      'InitRotationX' => 0,
      'InitRotationY' => 0,
      'InitRotationZ' => 0,
      'ModelColor' => '#caa618',
      'BackgroundColor1' => '#ffffff',
      'BackgroundColor2' => '#383840',
      'BackgroundImageUrl' => '',
      'RenderMode' => 'flat',
      'Definition' => 'standard',
      'MipMapping' => 'off',
      'SphereMapUrl' => '',
    ),
  );
  return $info;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function v3dm_jsc3d_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element = array();
  $element['width'] = array(
    '#type' => 'textfield',
    '#title' => t('Container width'),
    '#description' => t('Width of the container, in pixels.'),
    '#default_value' => $settings['width'],
  );
  $element['height'] = array(
    '#type' => 'textfield',
    '#title' => t('Container height'),
    '#description' => t('Height of the container, in pixels.'),
    '#default_value' => $settings['height'],
  );
  $element['InitRotationX'] = array(
    '#type' => 'textfield',
    '#title' => t('InitRotationX'),
    '#description' => t('Initial rotation angle around x-axis for the whole scene.'),
    '#default_value' => $settings['InitRotationX'],
  );
  $element['InitRotationY'] = array(
    '#type' => 'textfield',
    '#title' => t('InitRotationY'),
    '#description' => t('Initial rotation angle around y-axis for the whole scene.'),
    '#default_value' => $settings['InitRotationY'],
  );
  $element['InitRotationZ'] = array(
    '#type' => 'textfield',
    '#title' => t('InitRotationZ'),
    '#description' => t('Initial rotation angle around z-axis for the whole scene.'),
    '#default_value' => $settings['InitRotationZ'],
  );
  $element['ModelColor'] = array(
    '#type' => 'textfield',
    '#title' => t('Model color'),
    '#description' => t('Fallback color for all meshes, in hexadecimal.'),
    '#default_value' => $settings['ModelColor'],
  );
  $element['BackgroundColor1'] = array(
    '#type' => 'textfield',
    '#title' => t('Top background Color'),
    '#description' => t('Color at the top of the background, in hexadecimal.'),
    '#default_value' => $settings['BackgroundColor1'],
  );
  $element['BackgroundColor2'] = array(
    '#type' => 'textfield',
    '#title' => t('Bottom background Color'),
    '#description' => t('Color at the bottom of the background, in hexadecimal.'),
    '#default_value' => $settings['BackgroundColor2'],
  );
  $element['BackgroundImageUrl'] = array(
    '#type' => 'textfield',
    '#title' => t('Background url'),
    '#description' => t('Url string that describes where to load the image used for background.'),
    '#default_value' => $settings['BackgroundImageUrl'],
  );
  $element['RenderMode'] = array(
    '#type' => 'radios',
    '#options' => array(
      'point' => 'point clouds',
      'wireframe' => 'wireframe',
      'flat' => t('Solid objects using flat shading'),
      'smooth' => t('Solid objects using smooth shading'),
      'texture' => t('Solid textured objects, no lighting will be apllied'),
      'textureflat' => t('Solid textured objects, lighting will be calculated per face'),
      'texturesmooth' => t('Solid textured objects, lighting will be calculated per vertex and interpolated'),
    ),
    '#title' => t('Render mode'),
    '#default_value' => $settings['RenderMode'],
  );
  $element['Definition'] = array(
    '#type' => 'radios',
    '#options' => array(
      'low' => t('Low-quality rendering, with highest performance'),
      'standard' => t('Normal-quality rendering, with modest performance'),
      'high' => t('High-quality rendering, with lowest performance'),
    ),
    '#title' => t('Quality level of rendering.'),
    '#default_value' => $settings['Definition'],
  );
  $element['MipMapping'] = array(
    '#type' => 'radios',
    '#options' => array(
      'on' => 'on',
      'off' => 'off',
    ),
    '#title' => t('Turn on/off mip-mapping.'),
    '#default_value' => $settings['MipMapping'],
  );
  $element['SphereMapUrl'] = array(
    '#type' => 'textfield',
    '#title' => t('Sphere mapping url'),
    '#description' => t('Url string that describes where to load the image used for sphere mapping.'),
    '#default_value' => $settings['SphereMapUrl'],
  );

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function v3dm_jsc3d_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();
  $summary[] = t('@widthx@height px', array('@width' => $settings['width'], '@height' => $settings['height']));
  $summary[] = t('Init rotation X: @value', array('@value' => $settings['InitRotationX']));
  $summary[] = t('Init rotation Y: @value', array('@value' => $settings['InitRotationY']));
  $summary[] = t('Init rotation Z: @value', array('@value' => $settings['InitRotationZ']));
  $summary[] = t('Model color: @value', array('@value' => $settings['ModelColor']));
  $summary[] = t('Top background color: @value', array('@value' => $settings['BackgroundColor1']));
  $summary[] = t('Bottom background color: @value', array('@value' => $settings['BackgroundColor2']));
  $summary[] = t('Background image url: @value', array('@value' => $settings['BackgroundImageUrl']));
  $summary[] = t('Render mode: @value', array('@value' => $settings['RenderMode']));
  $summary[] = t('Definition: @value', array('@value' => $settings['Definition']));
  $summary[] = t('Mip-mapping: @value', array('@value' => $settings['MipMapping']));
  $summary[] = t('Sphere mapping url: @value', array('@value' => $settings['SphereMapUrl']));

  return implode('<br/>', $summary);
}

/**
 * Implements hook_field_formatter_view().
 */
function v3dm_jsc3d_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $settings = $display['settings'];

  $element = array();

  $js = array();
  $js['files'] = array();

  // Copy parameters to the javscript array.
  $keys = array('InitRotationX', 'InitRotationY', 'InitRotationZ', 'ModelColor', 'BackgroundColor1', 'BackgroundColor2', 'BackgroundImageUrl', 'RenderMode', 'Definition', 'MipMapping', 'SphereMapUrl');
  foreach ($keys as $key) {
    $js[$key] = $settings[$key];
  }

  foreach ($items as $delta => $item) {
    $id = drupal_html_id($field['field_name'] . '-' . $delta);
    $element[$delta] = array(
      '#theme' => 'jsc3d',
      '#attributes' => array(
        'id' => $id,
        'class' => array('jsc3d'),
        'width' => $settings['width'],
        'height' => $settings['height'],
      ),
    );
    $js['files'][$id] = file_create_url($item['uri']);
  }

  $jsc3d = v3dm_path_to_library('jsc3d');
  drupal_add_js($jsc3d . '/jsc3d.js');
  drupal_add_js($jsc3d . '/jsc3d.console.js');
  drupal_add_js(drupal_get_path('module', 'v3dm_jsc3d') . '/v3dm_jsc3d.js');
  drupal_add_js(array('v3dm_jsc3d' => $js), 'setting');

  return $element;
}

/**
 * Returns HTML canvas.
 */
function theme_jsc3d($variables) {
  $element = $variables['element'];
  return '<canvas' . drupal_attributes($element['#attributes']) . '>' . $element['#children'] . '</canvas>';
}
