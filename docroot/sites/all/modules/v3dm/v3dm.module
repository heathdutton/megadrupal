<?php

define('V3DM_CONTAINER_WIDTH', '300');
define('V3DM_CONTAINER_HEIGHT', '300');

/**
 * Obtain path to a library.
 *
 * Leverage libraries api if available.
 */
function v3dm_path_to_library($library) {
  if (function_exists('libraries_get_path')) {
    $path = libraries_get_path($library);
  }
  else {
    $path = 'sites/all/libraries/' . $library;
  }
  if (is_dir($path)) {
    return $path;
  }
  return FALSE;
}

/**
 * Implements hook_field_info().
 */
function v3dm_field_info() {
  return array(
    '3dmodel' => array(
      'label' => t('3D Model'),
      'description' => t('This field stores the ID of a 3D model file as an integer value.'),
      'settings' => array(
        'uri_scheme' => variable_get('file_default_scheme', 'public'),
      ),
      'instance_settings' => array(
        'file_extensions' => 'stl obj',
        'file_directory' => '',
        'max_filesize' => '',
        'description_field' => 0,
      ),
      'default_widget' => '3dmodel',
      'default_formatter' => 'file_default',
    ),
  );
}

/**
 * Implements hook_field_formatter_info_alter().
 *
 * Make file_default formatter available for our 3dmodel field.
 */
function v3dm_field_formatter_info_alter(&$info) {
  $info['file_default']['field types'][] = '3dmodel';
}

/**
 * Implements hook_field_settings_form().
 */
function v3dm_field_settings_form($field, $instance) {
  $defaults = field_info_field_settings($field['type']);
  $settings = array_merge($defaults, $field['settings']);

  $scheme_options = array();
  foreach (file_get_stream_wrappers(STREAM_WRAPPERS_WRITE_VISIBLE) as $scheme => $stream_wrapper) {
    $scheme_options[$scheme] = $stream_wrapper['name'];
  }

  $form['uri_scheme'] = array(
    '#type' => 'radios',
    '#title' => t('Upload destination'),
    '#options' => $scheme_options,
    '#default_value' => $settings['uri_scheme'],
    '#description' => t('Select where the final files should be stored. Private file storage has significantly more overhead than public files, but allows restricted access to files within this field.'),
  );

  return $form;
}

/**
 * Implements hook_field_instance_settings_form().
 */
function v3dm_field_instance_settings_form($field, $instance) {
  $settings = $instance['settings'];

  // Use the file field instance settings form as a basis.
  $form = file_field_instance_settings_form($field, $instance);

  return $form;
}

/**
 * Implements hook_field_load().
 */
function v3dm_field_load($entity_type, $entities, $field, $instances, $langcode, &$items, $age) {
  file_field_load($entity_type, $entities, $field, $instances, $langcode, $items, $age);
}

/**
 * Implements hook_field_presave().
 */
function v3dm_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  file_field_presave($entity_type, $entity, $field, $instance, $langcode, $items);
}

/**
 * Implements hook_field_insert().
 */
function v3dm_field_insert($entity_type, $entity, $field, $instance, $langcode, &$items) {
  file_field_insert($entity_type, $entity, $field, $instance, $langcode, $items);
}

/**
 * Implements hook_field_update().
 */
function v3dm_field_update($entity_type, $entity, $field, $instance, $langcode, &$items) {
  file_field_update($entity_type, $entity, $field, $instance, $langcode, $items);
}

/**
 * Implements hook_field_delete().
 */
function v3dm_field_delete($entity_type, $entity, $field, $instance, $langcode, &$items) {
  file_field_delete($entity_type, $entity, $field, $instance, $langcode, $items);
}

/**
 * Implements hook_field_delete_revision().
 */
function v3dm_field_delete_revision($entity_type, $entity, $field, $instance, $langcode, &$items) {
  file_field_delete_revision($entity_type, $entity, $field, $instance, $langcode, $items);
}

/**
 * Implements hook_field_is_empty().
 */
function v3dm_field_is_empty($item, $field) {
  return file_field_is_empty($item, $field);
}

/**
 * Implements hook_field_widget_info().
 */
function v3dm_field_widget_info() {
  return array(
    '3dmodel' => array(
      'label' => t('3D Model'),
      'field types' => array('3dmodel'),
      'settings' => array(
        'progress_indicator' => 'throbber',
        'preview_v3dm_style' => 'thumbnail',
      ),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_settings_form().
 */
function v3dm_field_widget_settings_form($field, $instance) {
  // Use the file widget settings form.
  $form = file_field_widget_settings_form($field, $instance);

  return $form;
}

/**
 * Implements hook_field_widget_form().
 */
function v3dm_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  // Add display_field setting to field because file_field_widget_form() assumes it is set.
  $field['settings']['display_field'] = 0;

  $elements = file_field_widget_form($form, $form_state, $field, $instance, $langcode, $items, $delta, $element);

  return $elements;
}

/**
 * Implements hook_filefield_paths_field_type_info().
 *
 * Provides integration with filefield_paths module.
 */
function v3dm_filefield_paths_field_type_info() {
  return array('3dmodel');
}

/**
 * Implements hook_storage_core_bridge_field_types().
 *
 * Provides integration with storage_api module.
 */
function v3dm_storage_core_bridge_field_types() {
  return array('3dmodel');
}

/**
 * Implements hook_field_download().
 */
function v3dm_file_download($uri, $field_type = '3dmodel') {
  return file_file_download($uri, $field_type);
}