<?php
/**
 * @file
 * user login form alter adding domain field and validation functions.
 */

/**
 * Implements hook_form_alter().
 */
function domain_login_form_alter(&$form, &$form_state, $form_id) {
  domain_login_load_subdomain('admin');
  switch ($form_id) {
    case 'user_login_block':
    case 'user_login':
      if (!isset($_GET['admin'])) {
        $form['#action'] = '/?destination=user';
        $domain = domain_get_domain();
        if ($domain['domain_id'] == 1) {
          $form['#validate'] = array_merge(array('domain_login_validate'), $form['#validate']);
          $form['domain'] = array(
            '#type' => 'textfield',
            '#title' => t('Domain'),
            '#suffix' => '.' . $domain['subdomain'],
            '#weight' => -999,
            '#size' => 15,
            '#ajax' => array(
              'callback' => 'domain_login_lookup_domain_ajax_callback',
              'keypress' => TRUE,
            ),
          );
        }
      }
      break;
  }
}

/**
 * User login domain field validation callback.
 */
function domain_login_validate(&$form, &$form_state) {
  if (!_domain_is_valid($form_state['values']['domain']) && !empty($form_state['values']['domain'])) {
    form_set_error('domain', t('Invalid domain.'));
  }
}

/**
 * Implements hook_help().
 */
function domain_login_help($path, $arg) {
  switch ($path) {
    case 'admin/help#domain_login':
      return check_markup(file_get_contents(dirname(__FILE__) . "/README.txt"));
  }
}

/**
 * AJAX callback function for domain login form.
 *
 * @param array $form
 *   Form object array
 * @param array $form_state
 *   Form state array
 */
function domain_login_lookup_domain_ajax_callback($form, &$form_state) {
  $form_state['values']['domain'] = trim($form_state['values']['domain']);
  if (!domain_login_domain_is_valid($form_state['values']['domain']) && !empty($form_state['values']['domain'])) {
    $primary_domain = domain_load(1);
    return array(
      '#type' => 'ajax',
      '#commands' => array(
        ajax_command_invoke('#edit-domain', 'addClass', array('error')),
        ajax_command_invoke('#user-login-form input[type=submit]', 'attr', array('disabled', 'disabled')),
        ajax_command_invoke('#user-login-form', 'attr', array('action', $primary_domain['scheme'] . '://' . $primary_domain['subdomain'] . $form['#action'])),
      ),
    );
  }
  elseif (empty($form_state['values']['domain'])) {
    $primary_domain = domain_load(1);
    return array(
      '#type' => 'ajax',
      '#commands' => array(
        ajax_command_invoke('#edit-domain', 'removeClass', array('error')),
        ajax_command_invoke('#user-login-form input[type=submit]', 'attr', array('disabled', '')),
        ajax_command_invoke('#user-login-form', 'attr', array('action', $primary_domain['scheme'] . '://' . $primary_domain['subdomain'] . $form['#action'])),
      ),
    );
  }
  else {
    $subdomain = domain_login_load_subdomain($form_state['values']['domain']);
    return array(
      '#type' => 'ajax',
      '#commands' => array(
        ajax_command_invoke('#edit-domain', 'removeClass', array('error')),
        ajax_command_invoke('#user-login-form input[type=submit]', 'attr', array('disabled', '')),
        ajax_command_invoke('#user-login-form', 'attr', array('action', $subdomain['scheme'] . '://' . $subdomain['subdomain'] . $form['#action'])),
      ),
    );
  }
}

/**
 * Validate whether or not a subdomain exists.
 *
 * @param string $subdomain
 *   The name of the subdomain(ie: 'test.domain.com' is 'test')
 *
 * @return bool
 *   Subdomain object if one exists, otherwise return FALSE
 */
function domain_login_domain_is_valid($subdomain) {
  $subdomain = domain_login_load_subdomain($subdomain);
  if ($subdomain != -1) {
    return $subdomain;
  }
  else {
    return FALSE;
  }
}

/**
 * Load the details of a subdomain.
 *
 * @param string $subdomain
 *   The name of the subdomain(ie: 'test.domain.com' is 'test')
 *
 * @return array
 *   Domain array or NULL if subdomain doesn't exist.
 */
function domain_login_load_subdomain($subdomain) {
  $primary_domain = domain_load(1);
  return domain_lookup(NULL, $subdomain . '.' . $primary_domain['subdomain']);
}
