<?php
/**
 * @file
 * Code for the inspect_test feature.
 */

include_once 'inspect_test.features.inc';


/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @param array &$form
 * @param array &$form_state
 */
function inspect_test_form_inspect_test_node_form_alter(&$form, &$form_state) {
  // Attach script which performs Javascript inspections to browser console
  // and backend log.
  $form['#attached']['js'][] = drupal_get_path('module', 'inspect_test') . '/js/drupal.inspect_test.nodeform.js';

  // Log inspection of $form.
  inspect(
    $form,
    array(
      'message' => 'form',
      'type' => 'inspect_test',
      'severity' => 'debug',
    )
  );

  // Get some inspections as string.
  $get_inspection = array(
    Inspect::get($form, 'form'),
    Inspect::get($form_state, 'form_state'),
  );

  // Log a stack trace; like PHP:debug_backtrace().
  Inspect::trace(NULL, 'Trace, no error');

  try {
    throw new Exception('Something failed', 7913);
  }
  catch (Exception $xc) {
    // Log an error trace.
    Inspect::trace($xc);
    // Log an error trace, using a few options.
    Inspect::trace(
      $xc,
      array(
        'message' => 'Some exception',
        'type' => 'inspect_test',
        'severity' => 'debug',
      )
    );
    // Get an error trace as string.
    $get_inspection[] = Inspect::traceGet($xc);
  }

  // Add inspection outputs as markup to the form.
  $i = -1;
  foreach ($get_inspection as $output) {
    $form['inspect_test_' . (++$i)] = array(
      '#type' => 'markup',
      '#markup' => $output,
    );
  }
}
