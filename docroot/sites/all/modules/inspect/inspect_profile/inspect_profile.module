<?php
/**
 * @file
 *	Drupal Inspect Profile module
 */

/**
 * Implements hook_permission().
 *
 * @return array
 */
function inspect_profile_permission() {
  return array(
    'inspect profile' => array(
      'title' => t('Enable performance profiling'),
      'description' => t('Turn profiling \'on\' for the user role, and allow logging profiles to file/watchdog.'),
    ),
  );
}

/**
 * Implements hook_menu().
 *
 * Declares configuration page.
 *
 * @return array
 */
function inspect_profile_menu() {
  return array(
    'admin/reports/inspect_profile' => array(
      'title' => 'Performance profiling reports',
      'description' => 'Performance profiling statistics',
      'page callback' => '_inspect_profile_statistics_list',
      'access arguments' => array('access site reports'),
      'file' => 'inspect_profile.admin.inc',
      'type' => MENU_NORMAL_ITEM,
    ),
    'admin/reports/inspect_profile/statistics' => array(
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'title' => 'Performance profiling reports',
      'description' => 'Performance profiling statistics',
    ),
    'admin/reports/inspect_profile/settings' => array(
      'title' => 'Performance profiling settings',
      'description' => 'Configure performance profiling',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('_inspect_profile_admin_form'),
      'access arguments' => array('administer site configuration'),
      'file' => 'inspect_profile.admin.inc',
      'type' => MENU_LOCAL_TASK,
    ),
    'admin/reports/inspect_profile/statistics/download/%' => array( // % ~ Report id.
      'page callback' => 'inspect_profile_statistics_report_download',
      'page arguments' => array(5), // start at that bucket index
      'access arguments' => array('access site reports'),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
      'file' => 'inspect_profile.admin.inc',
    ),
    'admin/reports/inspect_profile/statistics/make/%/%' => array( // % ~ From time, % ~ To time.
      'page callback' => 'inspect_profile_statistics_make',
      'page arguments' => array(5, 6), // start at that bucket index
      'access arguments' => array('administer site configuration'), // Elevated privilege to fend against flooding (report generation is heavy).
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
      'file' => 'inspect_profile.admin.inc',
    ),
  );
}

/**
 * Implements hook_help().
 *
 * @param string $path
 * @param mixed $arg
 * @return string|void
 */
function inspect_profile_help($path, $arg) {
  if ($path == 'admin/reports/inspect_profile') {
    return '<p>' . t('Press a row to download report as .csv file.')
      . ' ' . t('Doesn\'t list empty reports.')
      . ' ' . l(t('Reset sorting'), 'admin/reports/inspect_profile/statistics') . '.</p>';
  }
}

/**
 * Ends current profile, if there's a profile running and inspect_profile_end_profile() was called during this request with 'at_exit' option.
 *
 * Implements hook_exit().
 *
 * @see InspectProfile::systemExit()
 */
function inspect_profile_exit() {
  InspectProfile::systemExit();
}

/**
 * Writes current multi-request profile event records to database.
 *
 * Registered as shutdown function first time an event gets started/stopped (or a profile gets begun/ended).
 */
function _inspect_profile_shutdown() {
  InspectProfile::logEvents(
    NULL, // Find profile (if any), and log it's events (if any).
    TRUE // Log request_shutdown - if any profile, or if set to log request_shutdown anyway (a profile was ending previously during this request).
  );
}

/**
 * Implements hook_cron().
 *
 * @see InspectProfile_Statistics::cron()
 */
function inspect_profile_cron() {
  module_load_include('inc', 'inspect_profile', 'InspectProfile_Statistics');
  InspectProfile_Statistics::cron();
}

/**
 * Register event interval start and/or stop.
 *
 * Slightly slower than InspectProfile::event(), because involves one more function call.
 *
 *  Stop $options (all optional):
 *  - (boolean) if_started: default FALSE, also supported as array bucket value, 'if_started'
 *  - (string) position: default empty
 *  - (integer) severity: default zero
 *  - (number|string) error_code: default empty
 *  - (string) log: default empty
 *
 * Examples:
 * @code
 * function fruit_color($fruit) {
 *   switch ($fruit) {
 *     case 'apple': return 'green';
 *     case 'banana': return 'yellow';
 *   }
 *   return 'dunno';
 * }
 * $fruit = 'apple';
 * // Start measuring first procedure.
 * inspect_profile('first procedure', NULL, array('position' => __LINE__, 'log' => $fruit));
 * $color = fruit_color($fruit);
 * $fruit = 'banana';
 * // Stop first procedure, start second procedure.
 * inspect_profile_event_stop('first procedure', array('position' => __LINE__, 'log' => $color, 'severity' => WATCHDOG_NOTICE));
 * inspect_profile_event_start('second procedure', array('position' => __LINE__, 'log' => $fruit));
 * $color = fruit_color($fruit);
 * inspect_profile_event_stop('second procedure', array('position' => __LINE__, 'log' => $color, 'severity' => WATCHDOG_ERROR));
 * // Profiling in a loop.
 * $le = 3;
 * inspect_profile('loop', NULL, __LINE__); // Start first interval.
 * for ($i = 0; $i < $le; $i++) {
 * $pow = pow($i, $i);
 * inspect_profile(
 * $i < $le - 1 ? 'loop' : '', // Start new interval, except for last iteration.
 * 'loop', // Do always stop current interval.
 * array('log' => $i . ' power ' . $i . ': ' . $pow)
 * );
}
 * echo inspect_profile_get(); // Check statistics.
 * @endcode
 * @param string|NULL $start_name
 *  - default: NULL (~ don't start)
 * @param string|NULL $stop_name
 *  - default: NULL (~ don't stop)
 * @param string|array|NULL $options
 *  - default: NULL
 *  - string: interprets to position
 *  - array: list of options, if start+stop the options only count for the stopping event
 *  - array (stop options): if_started, severity, error_code, log, position
 *  - array (start options): log, position
 * @return boolean|NULL
 *   - NULL if no permission
 *   - FALSE on error; $start_name and $stop_name both empty
 */
function inspect_profile($start_name = NULL, $stop_name = NULL, $options = NULL) {
  return InspectProfile::event($start_name, $stop_name, $options);
}

/**
 * Register event interval start.
 *
 *  Array value of $options (any number of options):
 *  - (string) position (default empty)
 *  - (string) log, will be truncated to 255 (default empty)
 *
 * Slightly slower than InspectProfile::event(), because involves one more function call.
 *
 * @param string $name
 *  - do not use these chars in names: quote carriage-return newline tab pipe
 * @param string|array|NULL $options
 *  - default: NULL
 *  - string: interprets to position
 *  - array: list of options
 * @return boolean|NULL
 *   - NULL if no permission
 *   - FALSE on error
 */
function inspect_profile_event_start($name, $options = NULL) {
  return InspectProfile::event($name, NULL, $options);
}

/**
 * Register event interval stop.
 *
 *  Array value of $options: any number of options):
 *  - (boolean) if_started: default empty, also supported as array bucket value, 'if_started'
 *  - (string) position: default empty
 *  - (integer) severity: default zero
 *  - (number|string) error_code: default empty
 *  - (string) log: default empty
 *
 * Slightly slower than InspectProfile::event(), because involves one more function call.
 *
 * @param string $name
 *  - do not use these chars in names: quote carriage-return newline tab pipe
 * @param string|array|NULL $options
 *  - default: NULL
 *  - string: interprets to position
 *  - array: list of options
 * @return boolean|NULL
 *  - NULL if no permission
 *  - FALSE on error
 */
function inspect_profile_event_stop($name, $options = NULL) {
  return InspectProfile::event(NULL, $name, $options);
}


/**
 * Begin multi-request profile.
 *
 * Also ends current multi-request profile, if any.
 * Events of multi-request profiles are being logged to the inspect_profile table.
 *
 *  Array/object value of $options (any number of options):
 *  - (boolean) if_name_not_begun (default falsy, also supported as array bucket value 'if_name_not_begun')
 *  - (boolean) if_none_begun (default falsy, also supported as array bucket value 'if_none_begun')
 *  - (string) position (default empty)
 *  - (string) log, will be truncated to 255 (default empty)
 *  - (string) message, alias of log
 *
 * @param string $name
 *  - '*' is an illegal value
 * @param string|array|NULL $options
 *  - default: NULL
 *  - string: interprets to position
 *  - array: list of options
 * @return void
 */
function inspect_profile_begin_profile($name, $options = NULL) {
  InspectProfile::beginProfile($name, $options);
}

/**
 * End multi-request profile.
 *
 *  Array/object value of $options (any number of options):
 *  - (boolean) at_exit (default falsy, also supported as array bucket value 'at_exit')
 *  - (boolean) at_shutdown, alias of at_exit (default falsy)
 *  - (string) position (default empty)
 *  - (string) log, will be truncated to 255 (default empty)
 *  - (string) message, alias of log
 *
 * @param string $name
 *  - default: star (~ wildcard, end any profile)
 *  - non-empty: end profile by that name
 * @param string|array|NULL $options
 *  - default: NULL
 *  - string: interprets to position
 *  - array: list of options
 * @return void
 */
function inspect_profile_end_profile($name = '*', $options = NULL) {
  InspectProfile::endProfile($name, $options);
}

/**
 * Log single-request profile statistics to watchdog, if permitted and any events have been registered.
 *
 * @see InspectProfile::log()
 * @param string $message
 *  - default: empty
 * @return boolean|NULL
 *   - NULL if never initialized or user isnt permitted to log inspections
 *   - FALSE on error
 */
function inspect_profile_log($message = '') {
  return InspectProfile::log($message);
}

/**
 * Log single-request profile statistics to file, if permitted and any events have been registered.
 *
 * @see InspectProfile::file()
 * @param string $message
 *  - default: empty
 * @param boolean $by_user
 *   - default: FALSE (~ logs to common log file)
 *   - truthy: logs to user specific log file
 * @return boolean|NULL
 *   - NULL if never initialized or user isnt permitted to log inspections
 *   - FALSE on error
 */
function inspect_profile_file($message = '', $by_user = FALSE) {
  return InspectProfile::file($message, $by_user);
}

/**
 * Get single-request profile statistics as string, if permitted and any events have been registered.
 *
 * @see InspectProfile::get()
 * @param string $message
 *  - default: empty
 * @return string
 *   - empty if never initialized or user isnt permitted to get inspections, or on error
 */
function inspect_profile_get($message = '') {
  return InspectProfile::get($message);
}
