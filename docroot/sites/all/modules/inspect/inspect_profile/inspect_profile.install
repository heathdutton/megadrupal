<?php
/**
 * @file
 * Drupal Inspect Profile module (un)installation
 */


/**
 * Deletes configuration variables.
 *
 * Implements hook_uninstall().
 */
function inspect_profile_uninstall() {
  variable_del('inspect_profile_statsimplefileshutdown');
  variable_del('inspect_profile_statoffsethrs');
  variable_del('inspect_profile_statseveritythreshold');
  variable_del('inspect_profile_profilefilters');
  variable_del('inspect_profile_statscrondays');
  variable_del('inspect_profile_statscronprofilefilters');
  variable_del('inspect_profile_statsfilesnotwin');
  variable_del('inspect_profile_statserrortranslator');
}

/**
 * Implements hook_schema().
 *
 * @return array
 */
function inspect_profile_schema() {
  return array(
    'inspect_profile' => array(
      'description' => 'Inspect Profile profiles and events log.',
      'fields' => array(
        'pid' => array(
          'type' => 'serial',
          'size' => 'big',
          'not null' => TRUE,
        ),
        'uid' => array(
          'type' => 'int',
          'not null' => TRUE,
        ),
        'session_id' => array(
          'type' => 'varchar',
          'length' => 32,
          'not null' => TRUE,
          'description' => 'Inspect - not Drupal - session id.',
        ),
        'profile_id' => array(
          'type' => 'varchar',
          'length' => 32,
          'not null' => TRUE,
        ),
        'type' => array(
          'type' => 'varchar',
          'length' => 16,
          'not null' => TRUE,
          'default' => 'event',
          'description' => 'Enum: profile_begin|event|profile_end|request_shutdown.',
        ),
        'page_load_no' => array(
          'type' => 'int',
          'not null' => TRUE,
          'description' => 'Number of confirmed page loads - requests invoking hook_preprocess_html() - so far.',
        ),
        'request_no' => array(
          'type' => 'int',
          'not null' => TRUE,
          'description' => 'Number of all requests so far - AJAX as well as page requests.',
        ),
        'since_profile_start' => array(
          'type' => 'numeric', // ~ decimal
          'precision' => 14,
          'scale' => 4,
          'not null' => TRUE,
          'default' => 0,
          'description' => 'In milliseconds.',
        ),
        'since_request_start' => array(
          'type' => 'numeric', // ~ decimal
          'precision' => 14,
          'scale' => 4,
          'not null' => TRUE,
          'default' => 0,
          'description' => 'In milliseconds.',
        ),
        'duration' => array(
          'type' => 'numeric', // ~ decimal
          'precision' => 14,
          'scale' => 4,
          'not null' => TRUE,
          'default' => 0,
          'description' => 'Duration of that profile, event interval or request (in milliseconds).',
        ),
        'name' => array(
          'type' => 'varchar',
          'length' => 255,
          'not null' => TRUE,
          'default' => '',
          'description' => 'Name of event interval or profile.',
        ),
        'severity' => array(
          'type' => 'int',
          'size' => 'tiny',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
          'description' => 'Watchdog severity, if any.',
        ),
        'error_code' => array(
          'type' => 'varchar',
          'length' => 64,
          'not null' => TRUE,
          'default' => '',
          'description' => 'Error code, if any.',
        ),
        'log_start' => array(
          'type' => 'varchar',
          'length' => 255,
          'not null' => TRUE,
          'default' => '',
          'description' => 'Log at event start or profile begin.',
        ),
        'log_stop' => array(
          'type' => 'varchar',
          'length' => 255,
          'not null' => TRUE,
          'default' => '',
          'description' => 'Log at event stop or profile end.',
        ),
        'location'  => array(
          'type' => 'text',
          'not null' => TRUE,
          'description' => 'URL of the origin of the event (only logged for first record in a request).',
        ),
        'referer' => array(
          'type' => 'text',
          'not null' => FALSE,
          'description' => 'URL of referring page (only logged for first record in a request).',
        ),
        'hostname' => array(
          'type' => 'varchar',
          'length' => 128,
          'not null' => TRUE,
          'default' => '',
          'description' => 'Hostname of the user who triggered the event (only logged for first record in a request).',
        ),
        'position_start' => array(
          'type' => 'varchar',
          'length' => 255,
          'not null' => TRUE,
          'default' => '',
          'description' => 'Class+method, function and/or file/line of call to Inspect Profile function/method.',
        ),
        'position_stop' => array(
          'type' => 'varchar',
          'length' => 255,
          'not null' => TRUE,
          'default' => '',
          'description' => 'Class+method, function and/or file/line of call to Inspect Profile function/method.',
        ),
        'timestamp_milli' => array(
          'type' => 'int',
          'size' => 'big',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'description' => 'Unix timestamp (in milliseconds) of event interval start, except if profile end record.',
        ),
      ),
      'primary key' => array('pid'),
    ),
    'inspect_profile_statistics' => array(
      'description' => 'Inspect Profile statistics.',
      'fields' => array(
        'sid' => array(
          'type' => 'serial',
          'not null' => TRUE,
        ),
        'from_timestamp' => array(
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'description' => 'Unix timestamp (in seconds) of period start.',
        ),
        'to_timestamp' => array(
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'description' => 'Unix timestamp (in seconds) of period end.',
        ),
        'profile_filter_name'  => array(
          'type' => 'varchar',
          'length' => 64,
          'not null' => TRUE,
          'default' => '',
          'description' => 'Name of profile filter.',
        ),
        'profile_filter'  => array(
          'type' => 'text',
          'not null' => FALSE,
          //  Text fields don't support default value; at least not MySQL.
          'description' => 'Pipe-separated list of profile names included or excluded (then prefixed by !).',
        ),
        'severity_threshold' => array(
          'type' => 'int',
          'size' => 'small',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
          'description' => 'A profile is considered failed when it contains an event of that watchdog severity (or worse)',
        ),
        'completed' => array(
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
          'description' => 'Successful profiles that reached their end points (* or same profile name as begin).',
        ),
        'aborted' => array(
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
          'description' => 'Successful profiles that didn\'t reach their end points (* or same profile name as begin).',
        ),
        'failed' => array(
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
          'description' => 'Profiles that contained event(s) of the threshold severity (or worse).',
        ),
        'data' => array(
          'type' => 'blob',
          'size' => 'big',
          'not null' => TRUE,
          'serialize' => TRUE,
          'description' => 'Serialized InspectProfile_Statistics object.',
        ),
        'created' => array(
          'type' => 'int',
          'not null' => TRUE,
          'description' => 'The Unix timestamp when the statistics was generated.',
        ),
      ),
      'primary key' => array('sid'),
      'unique keys' => array(
        'time_by_filter' => array('from_timestamp', 'to_timestamp', 'profile_filter_name'),
      ),
    ),
  );
}
