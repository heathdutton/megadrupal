<?php

/**
 * @file
 * Support for user profiles moderation.
 */

/**
 * Implements hook_permission().
 */
function profile2_moderation_permission() {
  $permissions = array(
    'moderate profiles' =>  array(
      'title' => t('Moderate profiles'),
      'description' => t('Moderate user profiles.'),
    ),
  );

  return $permissions;
}

/**
 * Implements hook_menu().
 */
function profile2_moderation_menu() {
  $items = array();
  $items['admin/people/profiles/moderation'] = array(
    'title' => 'Profiles moderation',
    'page callback' => 'profile2_moderation_pages_moderation',
    'access callback' => 'user_access',
    'access arguments' => array("moderate profiles"),
    'file' => 'profile2_moderation.pages.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/profile/%profile2/revisions/%/moderate'] = array(
    'title' => 'Apply latest revision',
    'load arguments' => array(4),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('profile2_moderation_revision_moderate_confirm', 2),
    'access arguments' =>  array('moderate profiles'),
  );
  $items['admin/profile/%profile2/revisions/%/delete'] = array(
    'title' => 'Delete revision',
    'load arguments' => array(4),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('profile2_moderation_revision_delete_confirm', 2),
    'access arguments' =>  array('delete profile revisions'),
  );
  return $items;
}

/**
 * Implements hook_profile2_update().
 */
function profile2_moderation_profile2_update($profile) {
  $type = profile2_get_types($profile->type);
  // This profile type is being moderated?
  if (!isset($type->data['moderation']) || $type->data['moderation'] == 0) {
    return FALSE;
  }

  if ($profile->vid != $profile->original->vid && !isset($profile->skip_moderation_update_hook)) {
    // Set newly created revision status to 0 (not moderated).
    db_update('profile_revision')->fields(array(
      'status' => 0,
    ))->condition('vid', $profile->vid)->execute();

    $profile->original->skip_moderation_update_hook = TRUE;
    entity_revision_set_default('profile2', $profile->original);
    entity_save('profile2', $profile->original);
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for the profile type edit form.
 */
function profile2_moderation_form_profile2_type_form_alter(&$form, &$form_state, $form_id) {
  $profile_type = $form_state['profile2_type'];
  $form['data']['moderation'] = array(
    '#type' => 'checkbox',
    '#title' => t('Moderate revisions'),
    '#default_value' => !empty($profile_type->data['moderation']),
    '#description' => t('Users with <em>Moderate profiles</em> permission will be able to moderate profile revisions.'),
  );
}

function profile2_moderation_form_profile2_form_alter(&$form, &$form_state) {
  $profile_types = profile2_get_types();
  $waiting_moderation = FALSE;

  foreach ($profile_types as $key => $profile_type) {
    if (isset($profile_type->data['moderation']) && $profile_type->data['moderation'] == 1) {
      if (profile2_moderation_check_moderation($form_state['profiles'][$key])) {
        // Get the latest revision to be edited.
        $latest_revision = profile2_moderation_get_latest_revision($form_state['profiles'][$key]);
        $last_profile = profile2_load(NULL, $latest_revision->vid);

        $form_state['profiles'][$key] = $last_profile;
        unset($form['profile_' . $key]);
        profile2_attach_form($form, $form_state);

        $waiting_moderation = TRUE;
      }
    }
  }

  if ($waiting_moderation) {
    drupal_set_message(t('Latest profile changes waiting moderation.'), 'warning', FALSE);
  }
}

/**
 * Checks if a profile is waiting moderation.
 */
function profile2_moderation_check_moderation($profile) {
  // Check if current revision is the same as the latest.
  $latest_revision = profile2_moderation_get_latest_revision($profile);

  if ($latest_revision->vid > $profile->vid) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Get latest profile revision.
 */
function profile2_moderation_get_latest_revision($profile) {
  // Get profile revisions.
  $revisions = profile2_revision_list($profile);

  // Check if current revision is the same as the latest.
  $latest_revision = array_shift(array_values($revisions));

  return $latest_revision;  
}

/**
 * Moderate confirmation page.
 */
function profile2_moderation_revision_moderate_confirm($form, $form_state, $profile_revision) {
  $form['#profile_revision'] = $profile_revision;
  return confirm_form($form, t('Are you sure you want to apply the latest revision?'), 'admin/profile/moderation', t('This action cannot be undone.'), t('Apply'), t('Cancel'));
}

/**
 * Moderate confirmation form submit.
 */
function profile2_moderation_revision_moderate_confirm_submit($form, &$form_state) {
  $profile_revision = $form['#profile_revision'];
  $profile_revision->status = 1;
  $profile_revision->revision = 1;
  $profile_revision->log = t('Revision moderation.');

  db_update('profile_revision')->fields(array(
    'status' => 1,
  ))->condition('vid', $profile_revision->vid)->execute();

  $profile_revision->skip_moderation_update_hook = TRUE;

  entity_revision_set_default('profile2', $profile_revision);
  $result = entity_save('profile2', $profile_revision);

  db_update('profile_revision')->fields(array(
    'status' => 1,
  ))->condition('vid', $profile_revision->vid)->execute();

  drupal_set_message(t('@type revision is applied.', array('@type' => $profile_revision->type)));

  $form_state['redirect'] = 'admin/people/profiles/moderation';
}

/**
 * Delete confirmation page.
 */
function profile2_moderation_revision_delete_confirm($form, $form_state, $profile_revision) {
  $form['#profile_revision'] = $profile_revision;
  return confirm_form($form, t('Are you sure you want to delete the revision?'), 'admin/profile/moderation', t('This action cannot be undone.'), t('Apply'), t('Cancel'));
}

/**
 * Delete confirmation form submit.
 */
function profile2_moderation_revision_delete_confirm_submit($form, &$form_state) {
  $profile_revision = $form['#profile_revision'];
  $deleted = entity_revision_delete('profile2', $profile_revision->vid);
  if ($deleted)
    drupal_set_message(t('@type revision is deleted.', array('@type' => $profile_revision->type)));
  else
    drupal_set_message(t('Error occured while deleting revision.'), 'error');
  $form_state['redirect'] = 'admin/people/profiles/moderation';
}