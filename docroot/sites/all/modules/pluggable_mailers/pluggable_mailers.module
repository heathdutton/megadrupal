<?php
/**
 * @file
 *  Defines functionality to email an image
 * @copyright Copyright(c) 2012 Christopher Skene
 * @license GPL v2 http://www.fsf.org/licensing/licenses/gpl.html
 * @author Chris Skene chris at xtfer dot com
 */

/**
 * Define the pluggable mailer plugin type
 */
define('PLUGGABLE_MAILER_MAILER_TYPE', 'pluggable_mailer');

/**
 * Implements hook_init
 */
function pluggable_mailers_init() {
  // Sadly, Ctools is rubbish at triggering class autoloading...
  module_load_include('php', 'pluggable_mailers', 'lib/Drupal/PluggableMailers/PluggableMailInterface');
  module_load_include('php', 'pluggable_mailers', 'lib/Drupal/PluggableMailers/PluggableMailPlugin');
}

/**
 * Implements hook_permission()
 */
function pluggable_mailers_permission() {
  return array(
    'administer pluggable mailers' => array(
      'title' => t('Administer Pluggable Mailers'),
    )
  );
}

/**
   * Implements hook_menu().
   */
function pluggable_mailers_menu() {
  $items = array();
  $items['admin/config/system/pluggable-mailers'] = array(
    'title' => t('Pluggable mailers'),
    'description' => t('View installed mailer plugins'),
    'page callback' => 'pluggable_mailers_overview_page',
    'access arguments' => array('administer pluggable mailers'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/system/pluggable-mailers/test/%'] = array(
    'title' => t('Pluggable mailers test'),
    'description' => t('Test a mailer'),
    'page callback' => 'pluggable_mailers_test_plugin',
    'page arguments' => array(5),
    'access arguments' => array('administer pluggable mailers'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_mail()
 *
 * Unlike normal hook_mail() implementations, we use this to substitute parameters
 * from our defined plugin implementations.
 */
function pluggable_mailers_mail($key, &$message, $params) {
  $config = pluggable_mailers_make_plugin_instance($key);

  // Fix body param
  if (!is_array($params['body'])) {
    $params['body'] = array($params['body']);
  }

  if ($config instanceof \Drupal\PluggableMailers\PluggableMailInterface) {

    // Set the mailsystem used by the plugin
    $mail_system = $config->mailSystem();
    if (isset($mail_system) && !empty($mail_system)) {
      pluggable_mailers_set_mailsystem($mail_system);
    }

    // Build the message variables
    $message['to'] = $config->param('to', $message['to']);
    $message['from'] = $config->param('to', $message['from']);
    $message['subject'] = $config->param('subject', $params['subject']);
    $body = $config->param('body');
    if (!empty($body)) {
      $message['body'][] = $body;
    }
    else{
      $message['body'] = $params['body'];
    }
    $message['template'] = $config->template();
    $message['template_content'] = $config->templateContent();
  }
  else {
    $message['subject'] = $params['subject'];
    $message['body'] = $params['body'];
  }
}

/**
 * Create a plugin from configuration and load any parameters ready for use.
 *
 * Use this instead of pluggable_mailers_make_plugin(), under most circumstances.
 *
 * @param string $name
 *  The name of the plugin to load
 * @param array $params [optional]
 *  An optional array of email parameters to pass to the plugin
 *
 * @return \Drupal\PluggableMailers\PluggableMailInterface|bool
 */
function pluggable_mailers_make_plugin_instance($name, $params = array()) {
  $config = pluggable_mailers_load_plugin_config($name);
  $plugin = pluggable_mailers_make_plugin($config);

  // Set parameters, if present
  if (isset($plugin) && !empty($plugin)) {
    $plugin->setParams($params);
    return $plugin;
  }

  return FALSE;
}

/**
 * Class factory for a pluggable mailer
 *
 * @param $config
 *  The configuration to use for the plugin
 *
 * @return \Drupal\PluggableMailers\PluggableMailInterface|bool
 */
function pluggable_mailers_make_plugin($config) {
  if (class_exists($config['class'])){
    $plugin = new $config['class']();
    if ($plugin instanceof \Drupal\PluggableMailers\PluggableMailInterface) {
      return $plugin;
    }
  }

  return FALSE;
}

/**
 * Implements hook_ctools_plugin_type
 *
 * @return array
 */
function pluggable_mailers_ctools_plugin_type() {
  return array(
    'pluggable_mailer' => array(
      'cache' => FALSE,
    ),
  );
}

/**
 * Load an pluggable_mailers plugin
 *
 * @param string $name
 *  Name of the plugin
 *
 * @return array
 *  An array of plugin information
 */
function pluggable_mailers_load_plugin_config($name) {
  ctools_include('plugins');
  return ctools_get_plugins('pluggable_mailers', PLUGGABLE_MAILER_MAILER_TYPE, $name);
}

/**
 * Load all pluggable_mailers plugins

 * @return array
 *  An array of plugin information
 */
function pluggable_mailers_load_plugins_config() {
  ctools_include('plugins');
  return ctools_get_plugins('pluggable_mailers', PLUGGABLE_MAILER_MAILER_TYPE);
}

/**
 * Implements HOOK_ctools_plugin_directory()
 *
 * Tell ctools where our plugins live.
 */
function pluggable_mailers_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'pluggable_mailers') {
    return 'plugins/' . $plugin_type;
  }
}

/**
 * Set the mail system
 *
 * By calling this with no arguments, the mail system used by pluggable mailers
 * is reset to the default. By calling it with the mail system argument, we can
 * set the mail system on a plugin-basis.
 *
 * @param null $mail_system [optional]
 *  The mail system class name
 * @param null $module [optional]
 *  The module to set the mail system for (this should almost always be the default
 *  'pluggable_mailers')
 *
 * @internal param $
 */
function pluggable_mailers_set_mailsystem($mail_system = NULL, $module = NULL){

  // If module is not provided, set the mail system to the default
  if (!isset($module) || empty($module)) {
    $module = 'pluggable_mailers';
  }

  // If mail system is not provided, set the mail system to the default
  if (!isset($mail_system) || empty($mail_system)) {
    $mail_system = mailsystem_default_value();
  }

  mailsystem_set(array($module => $mail_system));
}

/**
 * Send an email using a plugin
 *
 * It is preferable to use this function to send an email, over your own
 * drupal_mail() call, so that the mail parameters are passed correctly, and
 * pluggable_mailers has the opportunity to clean up afterwards.
 *
 * @param $email_address
 *  The email address to send to
 * @param array $params [optional]
 *  Any additional data to send to the plugin. This may include the following keys:
 *    'subject' - The email subject
 *    'body'    - The email body
 *  If not set, these values may be populated by the plugin
 * @param $plugin_name [optional]
 *  The name of the plugin to use
 * @param $from_address [optional]
 *  The from address
 * @param $language [optional]
 *  The language to send to the user
 *
 * @return array
 *   The $message array structure containing all details of the
 *   message. If already sent ($send = TRUE), then the 'result' element
 *   will contain the success indicator of the e-mail, failure being already
 *   written to the watchdog. (Success means nothing more than the message being
 *   accepted at php-level, which still doesn't guarantee it to be delivered.)
 */
function pluggable_mailers_send_email($email_address, $params = array(), $plugin_name = 'default', $from_address = NULL, $language = NULL) {

  // If a Language is not provided, use the current setting
  if (!isset($language) || empty($language)) {
    global $language;
  }

  // Send the mail using Drupals internal mail handler
  $result = drupal_mail('pluggable_mailers', $plugin_name, $email_address, $language, $params, $from_address);

  // Clear the mail system setting
  pluggable_mailers_set_mailsystem();

  // Log it
  if (isset($result['result']) && $result['result'] === TRUE) {
    watchdog('pluggable_mailers', 'Email has sent to @email.', array('@email' => $email_address));
  }

  return $result;
}

/**
 * Overview page for pluggable mailers
 *
 * @return string
 *  Output
 */
function pluggable_mailers_overview_page() {
  $output = '';

  $rows = array();
  $header = array('Title', 'Description', 'Provider', 'Operations');

  $mailers = pluggable_mailers_load_plugins_config();
  foreach ($mailers as $mailer) {
    $row = array(
      $mailer['title'], $mailer['description'], $mailer['module'], '<a href="/admin/config/system/pluggable-mailers/test/'. $mailer['name'] . '">Test</a>'
    );
    $rows[] = $row;
  }

  $vars = array(
    'header' => $header,
    'rows' => $rows,
  );

  $output = theme('table', $vars);
  $output .= '<p><em>Test</em> will send a test email to your account</p>';

  return $output;
}

/**
 * Test a mail plugin
 */
function pluggable_mailers_test_plugin($plugin_name) {
  global $user;

  // Check user input
  $plugin_name = check_plain($plugin_name);

  $params = array(
    'subject' => 'Test email',
    'body' => 'This is a test email from the pluggable mailers module'
  );
  $result = pluggable_mailers_send_email($user->mail, $params, 'default');

  if (isset($result['result']) && $result['result'] === TRUE) {
    drupal_set_message('Test email succesfully queued for sending to ' . $user->mail);
  }

  drupal_goto('admin/config/system/pluggable-mailers');
}
