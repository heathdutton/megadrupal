<?php
/**
 * @file
 * Provides SMS functionality for the textmarketer service.
 * 
 * Implementation of SMS functionality for textmarketer, using
 * the drupal SMS Framework module. 
 */

define('SMS_TEXTMARKETER_LIBRARY', 'TMRestClient');
define('SMS_TEXTMARKETER_MAX_CHARS', 612);

/**
 * Implements hook_help().
 */
function sms_textmarketer_help($path, $arg) {
  switch ($path) {
    case 'admin/help#sms_textmarketer':
      $download = 'http://www.textmarketer.co.uk/pdfebooks/TMRestClient.zip';

      $help = t('The Textmarketer module provides integration between the Textmarketer SMS service and the SMS Framework module, the module provides no interface of its own but can be accessed through the interfaces provided by the SMS Framework.');
      $help .= '<br />';
      $help .= t('Note that the module only supports sending messages at this time, receiving messages will hopefully be added soon.');
      $help .= '<br />';
      $help .= t('The module makes use of the PHP wrapper (v1.3) provided by Textmarketer !link', array('!link' => l($download, $download)));
      $help .= '<br />';
      $help .= t('For this module to work the PHP wrapper provided by Textmarketer should be placed so that the TMRestClient.php file is reachable using the following path: !path', array('!path' => 'sites/all/libraries/TMRestClient/TMRestClient.php'));

      return $help;

  }
}

/**
 * Implements hook_permission().
 */
function sms_textmarketer_permission() {
  return array(
    'textmarketer tag' => array(
      'description' => t('Allow permission to tag individual messages.'),
      'title' => t('SMS Textmarketer Tag'),
    ),
    'textmarketer schedule' => array(
      'description' => t('Allow permission to schedule messages for future sending.'),
      'title' => t('SMS Textmarketer Schedule'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function sms_textmarketer_menu() {
  $items = array();

  $items['textmarketer/incoming'] = array(
    'access callback' => 'sms_textmarketer_incoming_access',
    'file' => 'sms_textmarketer.pages.inc',
    'page arguments' => array(),
    'page callback' => 'sms_textmarketer_incoming',
    'title' => '',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Checks if the user has access to this page.
 */
function sms_textmarketer_incoming_access() {
  $params = drupal_get_query_parameters();

  if (!array_key_exists('number', $params) || !array_key_exists('message', $params)) {
    return FALSE;
  }

  return TRUE;
}

/**
 * Implements hook_libraries_info().
 */
function sms_textmarketer_libraries_info() {
  // Adds the TMRestClient library to the libraries modules list of libraries.
  $libraries = array();
  $libraries[SMS_TEXTMARKETER_LIBRARY] = array(
    'name' => 'Textmarketer Rest Client',
    'vendor url' => 'http://www.textmarketer.co.uk/',
    'download url' => 'http://www.textmarketer.co.uk/pdfebooks/TMRestClient.zip',
    'files' => array(
      'php' => array(
        SMS_TEXTMARKETER_LIBRARY . '.php',
      ),
    ),
    'version callback' => 'sms_textmarketer_get_version',
    'version arguments' => array(
      'file' => SMS_TEXTMARKETER_LIBRARY . '.php',
    ),
  );

  return $libraries;
}

/**
 * Gets the current version of the Textmarketer Rest Client.
 * 
 * @param array $library
 *   An associative array containing all information about the library.
 * @param array $options
 *   An associative array containing with the following keys:
 *   - file: The filename to get the version from, relative to the library
 *     path.
 * 
 * @return string
 *   The version of the library.
 * 
 * @see libraries_get_version()
 */
function sms_textmarketer_get_version($library, $options) {
  $file = DRUPAL_ROOT . '/' . $library['library path'] . '/' . $options['file'];

  if (file_exists($file)) {
    require_once $file;
    return TMRestClient::$VERSION;
  }

  return FALSE;
}

/**
 * Implements hook_gateway_info().
 */
function sms_textmarketer_gateway_info() {
  return array(
    'textmarketer' => array(
      'name' => 'Textmarketer',
      'configure form' => 'sms_textmarketer_admin_form',
      'receive' => FALSE,
      'send' => 'sms_textmarketer_send',
      'send form' => 'sms_textmarketer_send_form',
    ),
  );
}

/**
 * Admin/settings form used by SMS Framework.
 * 
 * @param array $configuration
 *   An associative array containing current configuration values.
 */
function sms_textmarketer_admin_form($configuration) {
  if (!$configuration) {
    $configuration = array();
  }

  // Set default values.
  $configuration += array(
    'sms_textmarketer_user' => '',
    'sms_textmarketer_pass' => '',
    'sms_textmarketer_sender' => 'MySenderID',
    'sms_textmarketer_state' => 'production',
    'sms_textmarketer_validity' => 72,
    'sms_textmarketer_email' => '',
    'sms_textmarketer_custom' => '',
  );
  $pass_empty = empty($configuration['sms_textmarketer_pass']);

  $form['sms_textmarketer_user'] = array(
    '#default_value' => $configuration['sms_textmarketer_user'],
    '#maxlength' => 255,
    '#required' => TRUE,
    '#title' => t('API Username'),
    '#type' => 'textfield',
  );
  $form['sms_textmarketer_pass'] = array(
    '#default_value' => '',
    '#maxlength' => 255,
    '#required' => $pass_empty,
    '#title' => $pass_empty ? t('API Password') : t('Change API Password'),
    '#type' => 'password',
    '#value_callback' => 'sms_textmarketer_pass_value',
  );
  $form['sms_textmarketer_sender'] = array(
    '#default_value' => $configuration['sms_textmarketer_sender'],
    '#description' => t('Who the SMS messages are from (if using txtUs Plus this should be the provided phone number), can contain up to 11 alpha-numeric characters or 16 numbers.'),
    '#maxlength' => 16,
    '#required' => TRUE,
    '#title' => t('Sender ID'),
    '#type' => 'textfield',
  );
  $form['sms_textmarketer_state'] = array(
    '#default_value' => $configuration['sms_textmarketer_state'],
    '#description' => t('Sandbox will simulate all transactions without actually performing them.'),
    '#options' => array(
      'production' => t('Production'),
      'sandbox' => t('Sandbox'),
    ),
    '#title' => t('Operational state'),
    '#type' => 'select',
  );
  $form['sms_textmarketer_validity'] = array(
    '#default_value' => $configuration['sms_textmarketer_validity'],
    '#description' => t('From 1-72, indicates the number of hours during which the message is valid for delivery.'),
    '#maxlength' => 2,
    '#required' => TRUE,
    '#title' => t('Validity'),
    '#type' => 'textfield',
  );
  $form['sms_textmarketer_custom'] = array(
    '#default_value' => $configuration['sms_textmarketer_custom'],
    '#description' => t('Alpha-numeric up to 20 character tag for messages, allows filtering of reports, can be specified on a per SMS basis.'),
    '#maxlength' => 20,
    '#required' => FALSE,
    '#title' => t('Tag'),
    '#type' => 'textfield',
  );
  $form['sms_textmarketer_email'] = array(
    '#default_value' => $configuration['sms_textmarketer_email'],
    '#description' => t('Available to txtUs Plus customers only. Specifies the email address for incoming responses.'),
    '#required' => FALSE,
    '#title' => t('Response Email'),
    '#type' => 'textfield',
  );
  $form['sms_textmarketer_incoming'] = array(
    '#attributes' => array(
      'readonly' => 'readonly',
    ),
    '#description' => t('This is the URL which txtUs Plus customers should provide for incoming messages.'),
    '#title' => t('API URL'),
    '#type' => 'textfield',
    '#value' => 'http://' . $_SERVER['HTTP_HOST'] . '/textmarketer/incoming',
  );

  return $form;
}

/**
 * Admin/settings form validation.
 * 
 * Checks the API login details provided are correct.
 */
function sms_textmarketer_admin_form_validate($form, &$form_state) {
  // Load the Textmarketer library.
  $lib = libraries_load(SMS_TEXTMARKETER_LIBRARY);

  $errors = form_get_errors();

  // Check library has been loaded successfully, and there aren't any
  // validation errors already.
  if ($lib['loaded'] && empty($errors)) {
    // Check that the login details provided are correct.
    $values = $form_state['values'];
    $tm_client = new TMRestClient($values['sms_textmarketer_user'], $values['sms_textmarketer_pass'], $values['sms_textmarketer_state']);

    if (!$tm_client->isLoginValid()) {
      // The login details aren't correct.
      form_set_error('sms_textmarketer_user', t('The login details provided are not valid, remember the API login details are not the same as your website login.'));
    }

    // Check that the sender is valid.
    if (preg_match('/^[0-9]+$/', $values['sms_textmarketer_sender'])) {
      if (strlen($values['sms_textmarketer_sender']) > 16) {
        // Too many digits, max 16.
        form_set_error('sms_textmarketer_sender', t('The sender ID cannot be more than 16 digits long.'));
      }
    }
    elseif (!preg_match('/^[A-Za-z0-9]+$/', $values['sms_textmarketer_sender']) || strlen($values['sms_textmarketer_sender']) > 11) {
      // Not alpha-numeric or too many chars, max 11.
      form_set_error('sms_textmarketer_sender', t('The sender ID can only contain alpha-numeric characters and must be 11 characters or less.'));
    }

    // Check that validity is an integer between 1 and 72.
    $validity = $values['sms_textmarketer_validity'];
    $is_int = preg_match('/^[0-9]+$/', $validity);

    if (!$is_int || ($validity < 1) || ($validity > 72)) {
      form_set_error('sms_textmarketer_validity', t('Validity must be an integer between 1 and 72.'));
    }

    // Check the response email address.
    if (($values['sms_textmarketer_email'] != '') && !valid_email_address($values['sms_textmarketer_email'])) {
      form_set_error('sms_textmarketer_email', t('Response email must be a valid email address, or no email address.'));
    }

    // Check to see if the supplied tag is valid.
    if (!sms_textmarketer_valid_tag($values['sms_textmarketer_custom'])) {
      form_set_error('sms_textmarketer_custom', t('Tags can only contain alpha-numeric characters, and must be 20 characters or less.'));
    }
  }
  else {
    // The library failed to load.
    form_set_error(NULL, t('Failed to load the !lib library.', array('!lib' => SMS_TEXTMARKETER_LIBRARY)));
  }
}

/**
 * Proccess API password elements value.
 * 
 * If no password is set, then this assumes that the user doesn't want to
 * change the password and returns the old password.
 * 
 * @return string
 *   Value for the API password field.
 */
function sms_textmarketer_pass_value($element, $input = FALSE, $form_state = array()) {
  // User hasn't input a new password, so use old password.
  if ($input == '') {
    $gateway = $form_state['complete form']['gateway']['#value'];

    // Return old password if set.
    if (isset($gateway['configuration']['sms_textmarketer_pass'])) {
      return $gateway['configuration']['sms_textmarketer_pass'];
    }
  }

  // Returns user input if user has changed the password, or there was no old
  // password to return.
  return $input;
}

/**
 * Custom additions to the send message form.
 */
function sms_textmarketer_send_form($required = FALSE) {
  $form = array();

  // Get gateway, for default configuration.
  $gateway = sms_gateways('gateway', 'textmarketer');

  if (user_access('textmarketer tag')) {
    $form['custom'] = array(
      '#default_value' => $gateway['configuration']['sms_textmarketer_custom'],
      '#description' => t('Alpha-numeric up to 20 character tag for messages, allows filtering of reports.'),
      '#element_validate' => array(
        'sms_textmarketer_element_custom_validate',
      ),
      '#maxlength' => 20,
      '#required' => FALSE,
      '#title' => t('Tag'),
      '#type' => 'textfield',
    );
  }

  if (user_access('textmarketer schedule')) {
    $description = t('Allows you to schedule the message for sending in the future.');
    $description .= '<br />';
    $description .= t('Date and time required in ISO 8601 format, or as a unix timestamp.');

    $form['schedule'] = array(
      '#default_value' => '',
      '#description' => $description,
      '#element_validate' => array(
        'sms_textmarketer_element_schedule_validate',
      ),
      '#maxlength' => 25,
      '#required' => FALSE,
      '#title' => t('Schedule Sending'),
      '#type' => 'textfield',
    );
  }

  return $form;
}

/**
 * Validates the custom (tag) form element.
 */
function sms_textmarketer_element_custom_validate($element, &$form_state, $form) {
  if (!sms_textmarketer_valid_tag($element['#value'])) {
    form_error($element, t('Tags can only contain alpha-numeric characters, and must be 20 characters or less.'));
  }
}

/**
 * Validates the schedule form element.
 */
function sms_textmarketer_element_schedule_validate($element, &$form_state, $form) {
  // Must check return value is exactly FALSE, as NULL is a valid response.
  if (sms_textmarketer_valid_schedule($element['#value']) === FALSE) {
    form_error($element, t('Scheduled date must be in ISO 8601 format, or a unix timestamp.'));
  }
}

/**
 * Callback for sending messages with textmarketer.
 * 
 * @param array $options
 *   (optional) An associative array containing sending options:
 *     -custom: An alpha-numeric tag for the message, max 20 chars.
 *     -email: Email address to send response notifications to.
 *     -sender: Sender ID, up to 11 alpha-numeric characters or 16 digits.
 *     -validity: Hours after which send attempt fails 1-72.
 *     -schedule: Schedule message to be sent a specific time, either ISO 8601
 *      formatted date or a unix timestamp.
 * 
 * @see sms_send()
 */
function sms_textmarketer_send($number, $message, &$options) {
  global $user;
  $number = trim($number);

  if (strlen($message) > SMS_TEXTMARKETER_MAX_CHARS) {
    return array(
      'message' => 'Message too long, textmarketer has a maximum message length of @chars characters.',
      'status' => FALSE,
      'variables' => array('@chars' => SMS_TEXTMARKETER_MAX_CHARS),
    );
  }

  // Load the Textmarketer library.
  $lib = libraries_load(SMS_TEXTMARKETER_LIBRARY);

  if (!$lib['loaded']) {
    // The library failed to load.
    return array(
      'message' => 'Failed to load the !lib library.',
      'status' => FALSE,
      'variables' => array('!lib' => SMS_TEXTMARKETER_LIBRARY),
    );
  }

  // Get stored configuration.
  $gateway = sms_gateways('gateway', 'textmarketer');
  $configuration = $gateway['configuration'];

  // Check if user has configured gateway.
  if (!array_key_exists('sms_textmarketer_user', $configuration)) {
    return array(
      'message' => 'You need to configure this gatway before you can send messages.',
      'status' => FALSE,
      'variables' => array(),
    );
  }

  $tm_client = new TMRestClient($configuration['sms_textmarketer_user'], $configuration['sms_textmarketer_pass'], $configuration['sms_textmarketer_state']);

  if (!$tm_client->isLoginValid()) {
    // The supplied login details aren't correct.
    return array(
      'message' => 'The login details provided are not valid.',
      'status' => FALSE,
      'variables' => array(),
    );
  }

  // Convert any scheduled send date to ISO 8601 format.
  if (array_key_exists('schedule', $options)) {
    $options['schedule'] = sms_textmarketer_valid_schedule($options['schedule']);

    // Make sure scheduled send date is valid.
    if ($options['schedule'] === FALSE) {
      drupal_set_message(t('Scheduled date must be in ISO 8601 format, or a unix timestamp.'), 'warning');
      return array(
        'message' => 'Scheduled date must be in ISO 8601 format, or a unix timestamp.',
        'status' => FALSE,
        'variables' => array(),
      );
    }
  }

  // Add default send options.
  $options += array(
    'custom' => $configuration['sms_textmarketer_custom'],
    'email' => $configuration['sms_textmarketer_email'],
    'sender' => $configuration['sms_textmarketer_sender'],
    'validity' => $configuration['sms_textmarketer_validity'],
    'schedule' => NULL,
    'uid' => $user->uid,
  );

  $errors = array();
  $response = array(
    'message' => '',
    'status' => FALSE,
    'variables' => array(),
  );

  // Try to send the message.
  try {
    $result = $tm_client->sendSMS($message, $number, $options['sender'], $options['validity'], $options['email'], $options['custom'], $options['schedule']);

    // sendSMS will throw an exception if it fails, so success can be assumed
    // if execution reaches this line.
    $response['status'] = TRUE;

    // Reference used by sms_track module.
    $options['reference'] = $result['message_id'];

    // The following are added for the benefit of the sms_track module.
    $options['credits_used'] = $result['credits_used'];
    $options['status'] = $result['status'];
  }
  catch (Exception $e) {
    // Get all error messages, and compile them into a single string as only
    // a single message is accepted in the response.
    $errors = $tm_client->getLastErrors();

    $messages = array();
    foreach ($errors as $errorcode => $errormsg) {
      $messages[] = $errorcode . ' - ' . $errormsg;
    }

    $response['message'] = implode("\n", $messages);
  }

  return $response;
}

/**
 * Checks to see if a tag is valid.
 * 
 * Tags can only contain alpha-numeric characters and must be 20 characters
 * or less in length. Tags are optional, so an empty string is valid.
 * 
 * @param string $tag
 *   The proposed message tag.
 * 
 * @return bool
 *   Validity of the proposed tag.
 */
function sms_textmarketer_valid_tag($tag) {
  // Tag is optional, so an empty tag is valid.
  if ($tag == '') {
    return TRUE;
  }

  // Tag can only consist of alpha-numeric characters.
  $valid_regex = preg_match('/^[A-Za-z0-9]+$/', $tag);
  // Tag must be 20 characters or less.
  $valid_len = strlen($tag) <= 20;

  if ($valid_regex && $valid_len) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Checks to see if a scheduled date is valid.
 * 
 * The result of this function should be checked with "===" as it can return
 * NULL as a valid response (if the scheduled date is empty).
 * 
 * @param string $schedule
 *   Either timestamp of ISO 8601 formatted date.
 * 
 * @return false|null|string
 *   Returns NULL or ISO 8601 formatted date if valid, or FALSE if
 *   not valid.
 */
function sms_textmarketer_valid_schedule($schedule) {
  // Schedule is optional, so an empty schedule is valid.
  if (($schedule == '') || is_null($schedule)) {
    return NULL;
  }

  // Check to see if scheduled time is a timestamp.
  $is_timestamp = preg_match('/^[0-9]+$/', $schedule) && (strlen($schedule) > 4);

  if (!$is_timestamp) {
    // Regular expressions for valid ISO 8601 dates. For more information see
    // http://www.w3.org/TR/NOTE-datetime
    $regex_patterns = array(
      '/^20[0-9]{2}-[0-1][0-9]-[0-3][0-9]T[0-2][0-9]:[0-5][0-9]:[0-5][0-9](\+|-)[0-1][0-9]:00$/',
      '/^20[0-9]{2}-[0-1][0-9]-[0-3][0-9]T[0-2][0-9]:[0-5][0-9](\+|-)[0-1][0-9]:00$/',
      '/^20[0-9]{2}-[0-1][0-9]-[0-3][0-9]$/',
      '/^20[0-9]{2}-[0-1][0-9]$/',
      '/^20[0-9]{2}$/',
    );

    // Test scheduled date against regular expressions.
    $match = FALSE;
    foreach ($regex_patterns as $pattern) {
      if (preg_match($pattern, $schedule)) {
        $match = TRUE;
      }
    }

    // No valid date found.
    if (!$match) {
      return FALSE;
    }

    // If just year, add month and day, otherwise strtotime will presume the
    // value is a timestamp.
    if (is_numeric($schedule)) {
      $schedule .= '-01-01';
    }

    $schedule = strtotime($schedule);
  }

  // Check that the message isn't being scheduled for sending in the past.
  if ($schedule < REQUEST_TIME) {
    return FALSE;
  }

  return date('c', $schedule);
}
