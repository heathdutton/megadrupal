<?php
/**
 * @file
 * Unit and web tests for the Textmarketer module.
 */

/**
 * Tests the basic functionallity of the Textmarketer module.
 */
class TextmarketerUnitTestCase extends DrupalUnitTestCase {
  /**
   * Defines test case for SimpleTest.
   */
  public static function getInfo() {
    return array(
      'name' => 'Textmarketer Unit Tests',
      'description' => 'Test Textmaketer validation functions.',
      'group' => 'Textmarketer',
    );
  }

  /**
   * Implements DrupalUnitTestCase::setUp().
   */
  public function setUp() {
    // Set up test environment, with modules enabled.
    $modules = array(
      'sms_textmarketer',
    );

    parent::setUp($modules);
  }

  /**
   * Tests the Textmarketer tag validation.
   */
  public function testTextmarketerValidationTag() {
    $valid_tags = array(
      '',
      'a',
      'z',
      'A',
      'Z',
      '0',
      '9',
      'aZ09',
      'a0b1c2d3e4f5g6h7i8j9',
    );

    foreach ($valid_tags as $tag) {
      $this->assertTrue(sms_textmarketer_valid_tag($tag), t('Tag "@tag" is valid.', array('@tag' => $tag)), 'Valid Tag');
    }

    $invalid_tags = array(
      ' ',
      '-',
      '_',
      'a 9',
      'a0b1c2d3e4f5g6h7i8j9k',
    );

    foreach ($invalid_tags as $tag) {
      $this->assertFalse(sms_textmarketer_valid_tag($tag), t('Tag "@tag" is not valid.', array('@tag' => $tag)), 'Invalid Tag');
    }
  }

  /**
   * Tests the Textmarketer schedule validation.
   */
  public function testTextmarketerValidationSchedule() {
    $valid_schedule = array(
      NULL,
      '',
      REQUEST_TIME + 1,
      date('Y', strtotime('+1 year', REQUEST_TIME)),
      date('Y-m', strtotime('+1 month', REQUEST_TIME)),
      date('Y-m-d', strtotime('+1 day', REQUEST_TIME)),
      date('Y-m-d\TH:iP', strtotime('+1 minute', REQUEST_TIME)),
      date('Y-m-d\TH:i:sP', strtotime('+1 second', REQUEST_TIME)),
    );

    foreach ($valid_schedule as $schedule) {
      $this->assertNotIdentical(sms_textmarketer_valid_schedule($schedule), FALSE, t('Scheduled send date "@schedule" is valid.', array('@schedule' => $schedule)), 'Valid Schedule');
    }

    $invalid_schedule = array(
      REQUEST_TIME - 1,
      date('Y', REQUEST_TIME),
      date('Y-m', REQUEST_TIME),
      date('Y-m-d', REQUEST_TIME),
      date('Y-m-d\TH:iP', REQUEST_TIME),
      date('d/m/Y', REQUEST_TIME),
      date('m/d/Y', REQUEST_TIME),
    );

    foreach ($invalid_schedule as $schedule) {
      $this->assertIdentical(sms_textmarketer_valid_schedule($schedule), FALSE, t('Scheduled send date "@schedule" is not valid.', array('@schedule' => $schedule)), 'Invalid Schedule');
    }
  }
}

/**
 * Tests integration of the Textmarketer module with the SMS Framework.
 */
class TextmarketerWebTestCase extends DrupalWebTestCase {
  protected $privilegedUser;

  // If you want to use these tests you will need to enter your username
  // and password for the Textmarketer service.
  protected $textmarketerUser = '';
  protected $textmarketerPass = '';

  // Change $textmarketerState to 'production' and enter a valid phone number
  // if you wish to actually send a message during testing.
  protected $textmarketerNumber = '4477777777';
  protected $textmarketerState = 'sandbox';

  /**
   * Defines test case for SimpleTest.
   */
  public static function getInfo() {
    return array(
      'name' => 'Textmarketer Web Tests',
      'description' => 'Check that the Textmarketer module integrates with the SMS Framework.',
      'group' => 'Textmarketer',
    );
  }

  /**
   * Implements DrupalUnitTestCase::setUp().
   */
  public function setUp() {
    // Set up test environment, with modules enabled.
    $modules = array(
      'sms_textmarketer_test',
    );

    parent::setUp($modules);

    // Create user with textmarketer permissions.
    $this->privilegedUser = $this->drupalCreateUser(array(
      'administer smsframework',
      'textmarketer tag',
      'textmarketer schedule',
    ));

    // Login with user just created.
    $this->drupalLogin($this->privilegedUser);

    // Change global user to test user, the user variable is restored
    // automatically when the tests complete.
    global $user;
    $user = user_load($this->privilegedUser->uid);
  }

  /**
   * Tests to see if the correct version of the TMRestClient can be retrieved.
   */
  public function testTextmarketerLibraryVersion() {
    // Using libraries_detect will run the Textmarketer version detection.
    $library = libraries_detect(SMS_TEXTMARKETER_LIBRARY);

    if ($this->assertTrue($library, t('The library does exist'), 'TMRestClient')) {
      $this->assertTrue($library['version'], t('The version of the library was detected as @ver, check against file.', array('@ver' => $library['version'])), 'TMRestClient');
    }
  }

  /**
   * Tests saving the Textmarketer gateway configuration for the SMS Framework.
   */
  public function testTextmarketerGatewayConfig() {
    $username_specified = $this->assertTrue($this->textmarketerUser, t('Textmarketer username specified.'), 'Gateway Config');
    $password_specified = $this->assertTrue($this->textmarketerPass, t('Textmarketer password specified.'), 'Gateway Config');

    if ($username_specified && $password_specified) {
      // Test gateway configure form submits successfully.
      $edit = array(
        'sms_textmarketer_user' => $this->textmarketerUser,
        'sms_textmarketer_pass' => $this->textmarketerPass,
        'sms_textmarketer_sender' => 'Test',
        'sms_textmarketer_state' => $this->textmarketerState,
        'sms_textmarketer_validity' => 12,
        'sms_textmarketer_email' => '',
        'sms_textmarketer_custom' => '',
      );

      $this->drupalPost('admin/smsframework/gateways/textmarketer', $edit, t('Save'));
      $this->assertText(t('The gateway settings have been saved.'), t('Textmarketer gateway configured successfully.'), 'Gateway Config');

      // Test choose active gateway.
      $edit = array(
        'default' => 'textmarketer',
      );

      $this->drupalPost('admin/smsframework/gateways', $edit, t('Set default gateway'));
      $this->assertText(t('Default gateway updated.'), t('Default gateway set to Textmarketer.'), 'Gateway Config');
    }
  }

  /**
   * Tests sending a message using the form generated by the SMS Framework.
   */
  public function testTextmarketerSendForm() {
    $username_specified = $this->assertTrue($this->textmarketerUser, t('Textmarketer username specified.'), 'SMS Send Form');
    $password_specified = $this->assertTrue($this->textmarketerPass, t('Textmarketer password specified.'), 'SMS Send Form');

    if ($username_specified && $password_specified) {
      // Set required gateway settings.
      $edit = array(
        'sms_textmarketer_user' => $this->textmarketerUser,
        'sms_textmarketer_pass' => $this->textmarketerPass,
        'sms_textmarketer_sender' => 'Test',
        'sms_textmarketer_state' => $this->textmarketerState,
        'sms_textmarketer_validity' => 12,
        'sms_textmarketer_email' => '',
        'sms_textmarketer_custom' => '',
      );

      $this->drupalPost('admin/smsframework/gateways/textmarketer', $edit, t('Save'));

      $edit = array(
        'default' => 'textmarketer',
      );

      $this->drupalPost('admin/smsframework/gateways', $edit, t('Set default gateway'));

      $edit = array(
        'message' => 'Test message',
        'number' => $this->textmarketerNumber,
        'gateway[custom]' => '',
        'gateway[schedule]' => '',
      );

      // Submit implementation of SMS Frameworks sms_send_form.
      $this->drupalPost('sms_textmarketer_test/sms_send_form', $edit, t('Send'));
      $this->assertText(t('Message sent.'), t('Message sent.'), 'SMS Send Form');
    }
  }

  /**
   * Tests sending a message with Textmarketer.
   */
  public function testTextmarketerSend() {
    $username_specified = $this->assertTrue($this->textmarketerUser, t('Textmarketer username specified.'), 'SMS Send');
    $password_specified = $this->assertTrue($this->textmarketerPass, t('Textmarketer password specified.'), 'SMS Send');

    if ($username_specified && $password_specified) {
      // Set required gateway settings.
      $edit = array(
        'sms_textmarketer_user' => $this->textmarketerUser,
        'sms_textmarketer_pass' => $this->textmarketerPass,
        'sms_textmarketer_sender' => 'Test',
        'sms_textmarketer_state' => $this->textmarketerState,
        'sms_textmarketer_validity' => 12,
        'sms_textmarketer_email' => '',
        'sms_textmarketer_custom' => '',
      );

      $this->drupalPost('admin/smsframework/gateways/textmarketer', $edit, t('Save'));

      $edit = array(
        'default' => 'textmarketer',
      );

      $this->drupalPost('admin/smsframework/gateways', $edit, t('Set default gateway'));

      $options = array(
        'custom' => '',
        'schedule' => '',
      );

      // Attempt to send SMS.
      $result = sms_textmarketer_send(sms_formatter($this->textmarketerNumber), 'Test message', $options);

      $this->assertTrue($result, t('Message sent.'), 'SMS Send');

      // Test returned status.
      if (isset($options['status']) && (($options['status'] == 'QUEUED') || ($options['status'] == 'SENT'))) {
        $this->pass(t('Message sent with status "@status"', array('@status' => $options['status'])), 'SMS Send');
      }
      else {
        $this->fail(t('Message not sent with status "@status"', array('@status' => $options['status'])), 'SMS Send');
      }

      // Test returned credits used.
      if (isset($options['credits_used']) && is_numeric($options['credits_used'])) {
        $this->pass(t('Credits used to send message "@credits"', array('@credits' => $options['credits_used'])), 'SMS Send');
      }
      else {
        $this->fail(t('Credits used, no valid response.'));
      }
    }
  }

  /**
   * Tests scheduling a message with Textmarketer.
   */
  public function testTextmarketerSchedule() {
    $username_specified = $this->assertTrue($this->textmarketerUser, t('Textmarketer username specified.'), 'SMS Schedule');
    $password_specified = $this->assertTrue($this->textmarketerPass, t('Textmarketer password specified.'), 'SMS Schedule');

    if ($username_specified && $password_specified) {
      // Set required gateway settings.
      $edit = array(
        'sms_textmarketer_user' => $this->textmarketerUser,
        'sms_textmarketer_pass' => $this->textmarketerPass,
        'sms_textmarketer_sender' => 'Test',
        'sms_textmarketer_state' => $this->textmarketerState,
        'sms_textmarketer_validity' => 12,
        'sms_textmarketer_email' => '',
        'sms_textmarketer_custom' => '',
      );

      $this->drupalPost('admin/smsframework/gateways/textmarketer', $edit, t('Save'));

      $edit = array(
        'default' => 'textmarketer',
      );

      $this->drupalPost('admin/smsframework/gateways', $edit, t('Set default gateway'));

      $options = array(
        'custom' => '',
        'schedule' => date('c', strtotime('+1 day')),
      );

      // Attempt to send SMS.
      $result = sms_textmarketer_send(sms_formatter($this->textmarketerNumber), 'Test message', $options);

      $this->assertTrue($result, t('Message sent.'), 'SMS Schedule');

      // Test message scheduled for sending.
      $this->assertEqual($options['status'], 'SCHEDULED', t('Message scheduled for sending, with status "@status"', array('@status' => $options['status'])), 'SMS Schedule');
    }
  }

  /**
   * Tests receiving incoming messages from the Textmarketer services.
   */
  public function testTextmarketerIncoming() {
    $message = 'test message';

    // Simulate incoming message.
    $this->drupalGet('textmarketer/incoming', array(
      'query' => array(
        'message' => $message,
        'number' => $this->textmarketerNumber,
      ),
    ));

    // Test number has been received.
    $text = 'test-number: ' . $this->textmarketerNumber;
    $this->assertText($text, t('Received number from incoming SMS.'), 'SMS Incoming');

    // Test message has been received.
    $text = 'test-message: ' . $message;
    $this->assertText($text, t('Received message from incoming SMS.'), 'SMS Incoming');
  }
}
