<?php

/**
 * @file
 * Module install and requirements logic.
 */

/**
 * Implements hook_uninstall().
 */
function dsb_portal_uninstall() {
  foreach (array(
    'dsb_portal_api_url',
    'dsb_portal_api_version',
    'dsb_portal_api_username',
    'dsb_portal_api_key_fid',
    'dsb_portal_api_key_passphrase',
    'dsb_portal_api_key_passphrase_tmp',
    'dsb_portal_search_limit',
    'dsb_portal_search_sort_by',
    'dsb_portal_search_only_current_lang',
    'dsb_portal_search_form_expose_form_in_block',
    'dsb_portal_search_debug_mode',
  ) as $variable) {
    variable_del($variable);
  }
}

/**
 * Implements hook_requirements().
 */
function dsb_portal_requirements($phase) {
  $t = get_t();

  if ($phase == 'runtime') {
    $return = array();

    if ($module_dependency_loaded = dsb_portal_check_module_dependency()) {
      $return['dsb_portal__dependencies'] = array(
        'title' => $t("dsb Portal dependencies"),
        'value' => $module_dependency_loaded,
        'severity' => REQUIREMENT_OK,
      );
    }
    else {
      // We return directly. We cannot check the libraries anyway.
      return array(
        'dsb_portal__dependencies' => array(
          'title' => $t("dsb Portal dependencies"),
          'value' => $t("Required modules not found"),
          'description' => $t("To use dsb Portal, you either need the Composer Manager module, or the Libraries API and X Autoload modules together. Check README.txt for more information."),
          'severity' => REQUIREMENT_ERROR,
        ),
      );
    }

    foreach (dsb_portal_libraries_info() as $library_name => $library_info) {
      $library_installed = FALSE;
      if (module_exists('composer_manager')) {
        $library_installed = class_exists($library_info['_dsb_portal check class']);
      }
      elseif (module_exists('libraries')) {
        $library = libraries_load($library_name);
        $library_installed = !empty($library['installed']);
      }

      if (!$library_installed) {
        $return['dsb_portal__' . $library_name] = array(
          'title' => $library_info['name'],
          'value' => $library_info['_dsb_portal version'],
          'description' => $t("In order to use dsb Portal, you must first download the !library_name library (!version) at !link. Check the README.txt file for more information", array(
              '!library_name' => $library_info['name'],
              '!version' => $library_info['_dsb_portal version'],
              '!link' => $library_info['download url'],
            )),
          'severity' => REQUIREMENT_ERROR,
        );
      }
      else {
        $return['dsb_portal__' . $library_name] = array(
          'title' => $library_info['name'],
          'value' => $t("!library_name @version available", array(
              '!library_name' => $library_info['name'],
              '@version' => isset($library['version']) ? $library['version'] : $library_info['_dsb_portal version'],
            )
          ),
          'severity' => REQUIREMENT_OK,
        );
      }
    }
  }

  if (!function_exists('openssl_get_privatekey')) {
    $return['dsb_portal__openssl'] = array(
      'title' => $t("OpenSSL PHP extension"),
      'value' => $t("Missing"),
      'description' => $t("In order to use dsb Portal, you must install the PHP OpenSSL extension"),
      'severity' => REQUIREMENT_ERROR,
    );
  }
  else {
    $return['dsb_portal__openssl'] = array(
      'title' => $t("OpenSSL PHP extension"),
      'value' => $t("OpenSSL PHP extension is available"),
      'severity' => REQUIREMENT_OK,
    );
  }

  return $return;
}
