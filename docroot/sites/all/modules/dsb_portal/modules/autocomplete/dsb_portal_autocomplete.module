<?php

/**
 * @file
 * Autocomplete functionality for the dsb Portal.
 *
 * This module enhances the dsb Portal search form by turning the query search
 * field into an autocomplete widget. It fetches suggestions from the ReST API
 * and populates the autocomplete.
 */

/**
 * Implements hook_menu().
 */
function dsb_portal_autocomplete_menu() {
  return array(
    'dsb-portal/autocomplete' => array(
      'access arguments' => array('use dsb_portal'),
      'page callback' => 'dsb_portal_autocomplete_ajax_callback',
      'type' => MENU_CALLBACK,
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter() for dsb_portal_rest_api_search_form().
 */
function dsb_portal_autocomplete_form_dsb_portal_rest_api_search_form_alter(&$form, $form_state) {
  $path = drupal_get_path('module', 'dsb_portal_autocomplete');
  $form['#attached']['js'][] = "$path/js/dsb_portal_autocomplete.autocomplete.js";
  $form['#attached']['js'][] = "$path/js/dsb_portal_autocomplete.js";
  $form['query']['#autocomplete_path'] = 'dsb-portal/autocomplete';
  $form['query']['#attributes']['class'][] = 'dsb-portal-autocomplete';
}

/**
 * Autocomplete callback.
 */
function dsb_portal_autocomplete_ajax_callback($query) {
  $suggestions = array();
  if (dsb_portal_check_module_usable()) {
    module_load_include('inc', 'dsb_portal', 'includes/dsb_portal.rest_api');

    // Prepare the filters.
    list(, $filters) = array_values(
      dsb_portal_rest_api_get_search_from_globals()
    );

    // Allow modules to alter the filters.
    drupal_alter('dsb_portal_rest_api_filters', $filters);


    // We currently have a small backward-incompatibility issue. In the past,
    // the filters were named as filter[name][value] = value. But, this gave
    // problems, so now the API expects filter[name][i] = value, where i is
    // simply a number. The form, however, still uses the filter[name][value]
    // approach, because of the way Drupal handles form submissions. This means
    // our AJAX function uses the old approach. To solve this, we need to make
    // certain our filters use the new approach.
    if (!empty($filters)) {
      foreach ($filters as $group => $values) {
        $filters[$group] = array_values($values);
      }
    }

    $client = dsb_portal_get_client_based_on_config();
    try {
      // Fetch the suggestions.
      $result = $client->authenticate()->getSuggestions($query, $filters);
      foreach ($result as $suggestion) {
        $suggestions[$suggestion['suggestion']] = $suggestion['suggestion'];
      }
    } catch (Exception $e) {}
  }

  drupal_json_output($suggestions);
}
