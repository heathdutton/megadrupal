<?php

/**
 * @file
 * UI module for pre-filtering search requests for the dsb Portal.
 *
 * This module exposes a UI for pre-filtering search requests made to the
 * national catalog. It is a bit crude; if possible, it is recommended to write
 * a custom module and implement the dsb Portal hooks instead. See the
 * dsb Portal Customization Example module for more information.
 */

/**
 * Implements hook_menu().
 */
function dsb_portal_prefilter_ui_menu() {
  return array(
    'admin/config/services/dsb-portal-prefilter-ui' => array(
      'title' => 'dsb Portal Prefilter UI',
      'description' => 'Manage dsb portal prefilter settings.',
      'access arguments' => array('administer dsb_portal_prefilter_ui'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('dsb_portal_prefilter_ui_admin_settings_form'),
      'file' => 'includes/dsb_portal_prefilter_ui.admin.inc',
    )
  );
}

/**
 * Implements hook_permission().
 */
function dsb_portal_prefilter_ui_permission() {
  return array(
    'administer dsb_portal_prefilter_ui' => array(
      'title' => t('Administer the dsb portal prefilter UI module settings'),
    ),
    'see debug info for dsb_portal_prefilter_ui' => array(
      'title' => t('See debug information for the dsb portal prefilter UI module'),
    ),
  );
}

/**
 * Implements hook_dsb_portal_rest_api_facets_alter().
 */
function dsb_portal_prefilter_ui_dsb_portal_rest_api_facets_alter(&$facets) {
  $list = variable_get('dsb_portal_prefilter_ui_facets', '');
  if (!empty($list)) {
    $list = array_map('trim', array_filter(explode("\n", str_replace(array("\r\n", "\r"), "\n", $list))));
  }
  else {
    $list = array();
  }

  // Must we replace, or only add?
  if (variable_get('dsb_portal_prefilter_ui_override_other_facets', FALSE)) {
    $facets = $list;
  }
  else {
    $facets = array_unique(array_merge($facets, $list));
  }
}

/**
 * Implements hook_dsb_portal_rest_api_filters_alter().
 */
function dsb_portal_prefilter_ui_dsb_portal_rest_api_filters_alter(&$filters) {
  $list = dsb_portal_prefilter_ui_get_prefilters();

  foreach ($list as $filter_name => $value) {
    if (empty($filters[$filter_name])) {
      $filters[$filter_name] = array();
    }

    $filters[$filter_name] = array_merge($filters[$filter_name], $value['values']);
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for dsb_portal_rest_api_search_form().
 */
function dsb_portal_prefilter_ui_form_dsb_portal_rest_api_search_form_alter(&$form) {
  $list = dsb_portal_prefilter_ui_get_prefilters();
  $active_prefilters = FALSE;
  foreach ($list as $filter_name => $value) {
    if (!empty($value['values'])) {
      $active_prefilters = TRUE;
      foreach ($value['values'] as $key) {
        if (isset($form["filter_group_{$filter_name}"][$key])) {
          switch ($value['hide_checkbox']) {
            case 2:
              // Leave it alone.
              break;

            case 1:
              // Check it and disable it.
              $form["filter_group_{$filter_name}"][$key]['#disabled'] = TRUE;
              $form["filter_group_{$filter_name}"][$key]['#default_value'] = $key;
              break;

            default:
            case 0:
              // Remove it.
              unset($form["filter_group_{$filter_name}"][$key]);
              break;
          }
        }
      }

      // Do a last check, to see if any facet checkboxes remain. It is possible
      // we hid them all, which will show empty fieldsets. This is not very
      // user-friendly, and we should hide them.
      if (isset($form["filter_group_{$filter_name}"])) {
        $found = FALSE;
        foreach ($form["filter_group_{$filter_name}"] as $key => $value) {
          if (!preg_match('/^#.+/', $key)) {
            // We found a child element. We don't have to hide it.
            $found = TRUE;
            break;
          }
        }

        if (!$found) {
          // We did not find any child elements. Hide the fieldset.
          $form["filter_group_{$filter_name}"]['#access'] = FALSE;
        }
      }
    }
  }

  if (
    variable_get('dsb_portal_prefilter_ui_show_prefilters', FALSE) &&
    user_access('see debug info for dsb_portal_prefilter_ui')
  ) {
    if ($active_prefilters) {
      $title = t("There are pre-filters active for the current search");
      $tmp = array();
      foreach ($list as $key => $value) {
        $tmp[] = array(
          'data' => t("Filter group: @group", array('@group' => $key)),
          'children' => array_map('check_plain', $value['values']),
        );
      }
      $recap = theme('item_list', array('items' => $tmp));
    }
    else {
      $title = t("There are no active pre-filters for the current search");
      $recap = '';
    }

    drupal_set_message(
      '<h3>' . $title . '</h3>' . $recap
    , 'warning');
  }
}

/**
 * Helper function to fetch pre-filters.
 *
 * @return array
 *    An array of filters, keyed by filter name. Each entry has 2 keys:
 *    - values: an array of filter values.
 *    - hide_checkbox: a boolean for whether the checkbox should be hidden on
 *      the search form.
 */
function dsb_portal_prefilter_ui_get_prefilters() {
  $filters = array();

  $list = variable_get('dsb_portal_prefilter_ui_prefilters', '');
  if (!empty($list)) {
    $list = array_map('trim', array_filter(explode("\n", str_replace(array("\r\n", "\r"), "\n", $list))));

    foreach ($list as $line) {
      $match = array();
      if (preg_match('/(\w+)\s*\[\s*(.+?)\s*\]\s*\|?\s*(\d)?/', $line, $match)) {
        $filter_name = @$match[1];
        $filter_values = @$match[2];
        $hide = !empty($match[3]) ? (int) $match[3] : 0;

        if (!empty($filter_name) && !empty($filter_values) && is_string($filter_values)) {
          $filter_values = array_map('trim', explode(',', $filter_values));
          if (!empty($filter_values)) {
            $filters[$filter_name] = array(
              'values' => $filter_values,
              'hide_checkbox' => $hide,
            );
          }
        }
      }
    }
  }

  return $filters;
}
