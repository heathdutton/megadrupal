<?php

/**
 * @file
 * PER curriculum integration for the dsb Portal.
 *
 * This module integrates the PER (Plan d'Ã©tude romand) with the dsb Portal.
 * It allows users to enable facets, showing them in a tree structure instead
 * of the default list. It also enables the rendering of the PER curriculum data
 * for a LOM-CH description.
 */

/**
 * Implements hook_menu().
 */
function dsb_portal_per_menu() {
  return array(
    'admin/config/services/dsb-portal-per' => array(
      'title' => 'dsb Portal PER',
      'description' => 'Manage dsb portal PER integration settings.',
      'access arguments' => array('administer dsb_portal_per'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('dsb_portal_per_admin_settings_form'),
      'file' => 'includes/dsb_portal_per.admin.inc',
    ),
  );
}

/**
 * Implements hook_permission().
 */
function dsb_portal_per_permission() {
  return array(
    'administer dsb_portal_per' => array(
      'title' => t('Administer the dsb portal PER module settings'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function dsb_portal_per_theme() {
  $path = drupal_get_path('module', 'dsb_portal_per') . '/theme';

  $default = array(
    'path' => $path,
    'file' => 'theme.inc',
  );

  return array(
    'dsb_portal_per_entry' => array(
      'variables' => array('discipline' => NULL, 'object' => NULL, 'code' => NULL, 'url_part' => NULL, 'description' => NULL),
      'template' => 'dsb-portal-per-entry',
    ) + $default,
  );
}

/**
 * Implements hook_dsb_portal_rest_api_facets_alter().
 */
function dsb_portal_per_dsb_portal_rest_api_facets_alter(&$facets) {
  $list = array_filter(array_values(variable_get('dsb_portal_per_facets', array())));
  if (!empty($list)) {
    // per_full corresponds to perObjectiveCode and perCycle, but with an
    // enhanced rendering further down the road. See
    // dsb_portal_per_form_dsb_portal_rest_api_search_form_alter(). If it is
    // "activated" as a facet, enable perObjectiveCode and perCycle instead, and
    // not per_full.
    if (in_array('per_full', $list)) {
      unset($list[array_search('per_full', $list)]);
      $list[] = 'perObjectiveCode';
      $list[] = 'perCycle';

      // Make sure we don't add duplicates.
      $list = array_unique($list);
    }

    // Activate the facets.
    $facets = array_merge($facets, $list);
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for dsb_portal_rest_api_search_form().
 *
 * @see dsb_portal_per_render_facet_tree()
 */
function dsb_portal_per_form_dsb_portal_rest_api_search_form_alter(&$form) {
  // Add human-readable names for the facet groups.
  if (isset($form['filter_group_perDomain'])) {
    $form['filter_group_perDomain']['#title'] = t("PER domain", array(), array('context' => 'dsb_portal_per:search'));
  }

  if (isset($form['filter_group_perDiscipline'])) {
    $form['filter_group_perDiscipline']['#title'] = t("PER discipline", array(), array('context' => 'dsb_portal_per:search'));
  }

  if (isset($form['filter_group_perCycle'])) {
    // Enhance the title. This might get undone below.
    $form['filter_group_perCycle']['#title'] = t("PER cycle", array(), array('context' => 'dsb_portal_per:search'));
  }

  if (isset($form['filter_group_perObjectiveCode'])) {
    // Enhance the title. This might get undone below.
    $form['filter_group_perObjectiveCode']['#title'] = t("PER objective code", array(), array('context' => 'dsb_portal_per:search'));
  }

  // Get the facets settings. If per_full is set, we copy the PER objective
  // codes form structure and create a new tree structure.
  $list = array_filter(array_values(variable_get('dsb_portal_per_facets', array())));
  if (in_array('per_full', $list)) {
    module_load_include('inc', 'dsb_portal_per', 'includes/dsb_portal_per.facet_tree');

    // Copy the objective codes facet tree. We base our full tree on it.
    $form['filter_group_perFull'] = $form['filter_group_perObjectiveCode'];

    // Change the title.
    $form['filter_group_perFull']['#title'] = t("PER curriculum", array(), array('context' => 'dsb_portal_per:search'));

    // Rerender the checkboxes.
    dsb_portal_per_render_facet_tree($form['filter_group_perFull']);

    // Do we need to keep the objective codes facet tree? If not, remove it.
    if (!in_array('perObjectiveCode', $list)) {
      unset($form['filter_group_perObjectiveCode']);
    }

    // Do we need to keep the cycle facet tree? If not, remove it.
    if (!in_array('perCycle', $list)) {
      unset($form['filter_group_perCycle']);
    }
  }
}

/**
 * Implements hook_dsb_portal_active_filter_names_alter().
 */
function dsb_portal_per_dsb_portal_active_filter_names_alter(&$filter_name, $context) {
  if ($context['filter_group'] == 'label') {
    switch ($context['filter_name']) {
      case 'perDomain':
        $filter_name = t("PER domain", array(), array('context' => 'dsb_portal_per:search'));
        break;

      case 'perCycle':
        $filter_name = t("PER cycle", array(), array('context' => 'dsb_portal_per:search'));
        break;

      case 'perDiscipline':
        $filter_name = t("PER discipline", array(), array('context' => 'dsb_portal_per:search'));
        break;

      case 'perObjectiveCode':
        $filter_name = t("PER objective code", array(), array('context' => 'dsb_portal_per:search'));
        break;
    }
  }
}

/**
 * Implements hook_preprocess_dsb_portal_description_classification_info().
 */
function dsb_portal_per_preprocess_dsb_portal_description_classification_info(&$vars) {
  module_load_include('inc', 'dsb_portal_per', 'theme/theme');

  $lom = $vars['description'];

  $specific_classification = $lom->getField('curriculum');
  $classification_information = array();
  if (!empty($specific_classification)) {
    $classification_information[] = array();
    $i = count($classification_information) - 1;
    foreach ($specific_classification as $classification_entry) {
      $classification_information[$i]['source'] = $classification_entry['source'];
      $tree = json_decode($classification_entry['entity'], TRUE);

      if ($classification_entry['source'] == 'per') {
        // The PER is only in French, and the format is very different from
        // the standard ("educa") curriculum. We recursively parse the
        // PER tree, and give it the same format as the standard data tree.
        $array_walk_recursive = function($array) use(&$array_walk_recursive) {
          $result = array();
          foreach ($array as $key => $children) {
            // The key is the human readable name in almost all cases.
            $name = $key;

            // The leaves are also arrays, but have descriptive keys. Check
            // the current array. If we are dealing with a leaf, don't parse
            // its data as children, but augment the "entry" key with this
            // data.
            if (isset($children['discipline'])) {
              // Turn the name into an array, with all the description data.
              $name = $children;

              // Unset the array.
              unset($children);
            }

            $result[$key] = array(
              'entry' => array(
                'fr' => $name,
              ),
              'children' => !empty($children) ? $array_walk_recursive($children) : array(),
            );
          }
          return $result;
        };

        // The PER only has a discipline tree.
        $classification_information[$i]['discipline'] = $array_walk_recursive($tree);
      }
    }
  }

  // Drupal's theme_item_list() expects a "data" key, which is a string for the
  // item entry. We walk the tree recursively, fetch the correct string from the
  // LangString, and set a "data" key accordingly. We cannot use PHP's built-in
  // array_walk_recusrive, because it only treats the tree leaves, not the items
  // that make up a branch (which is what we mainly need). We implement one
  // ourselves.
  $array_walk_recursive = function(&$array, $source, $depth = 0) use(&$array_walk_recursive) {
    foreach ($array as $key => &$item) {
      if (isset($item['entry'])) {
        $item['data'] = _dsb_portal_theme_get_langstring_value($item['entry']);

        // Some curricula have meta-data information in their entries. In that
        // case, the entry is not a string, but an array.
        if (is_array($item['data'])) {
          switch ($source) {
            case 'per':
              $item['data'] = theme('dsb_portal_per_entry', $item['data']);
              break;
          }
        }

        // We need to remove "entry", as Drupal will treat it as HTML
        // attributes.
        unset($item['entry']);
      }
      else {
        $item['data'] = $key;
      }

      // Depth 0 is the PER curriculum cycle. We can format this as a link.
      if (!$depth) {
        $item['data'] = dsb_portal_per_theme_per_curriculum_cycle_filter_link($item['data']);
      }

      // If there are any child items, we apply the same treatment.
      if (!empty($item['children'])) {
        $array_walk_recursive($item['children'], $source, $depth+1);
      }
    }
  };

  if (!empty($classification_information)) {
    $trees = array();
    foreach ($classification_information as $data) {
      $tree = array(
        'source' => t("PER curriculum", array(), array('context' => 'dsb_portal_per:view')),
      );

      if (!empty($data['discipline'])) {
        $discipline_tree = $data['discipline'];
        $array_walk_recursive($discipline_tree, $data['source']);
        $tree['discipline_tree'] = theme('item_list', array(
          'items' => $discipline_tree,
        ));
      }

      $trees[] = $tree;
    }

    // We actually prepend ours.
    $vars['trees'] = array_merge($trees, $vars['trees']);
  }
}

/**
 * Implements hook_dsb_portal_rest_api_query_alter().
 *
 * Alter the search query by removing all PER codes. This works along with
 * dsb_portal_per_dsb_portal_rest_api_filters_alter(), which will in turn
 * activate the corresponding filters.
 */
function dsb_portal_per_dsb_portal_rest_api_query_alter(&$query) {
  if (variable_get('dsb_portal_per_search_alter', FALSE)) {
    $codes = dsb_portal_per_get_codes();
    $found = dsb_portal_per_extract_codes($query, array_keys($codes));
    $query = str_replace($found, '', $query);
  }
}

/**
 * Implements hook_dsb_portal_rest_api_filters_alter().
 */
function dsb_portal_per_dsb_portal_rest_api_filters_alter(&$filters) {
  if (variable_get('dsb_portal_per_search_alter', FALSE)) {
    // We get the query from the globals. The globals weren't altered by
    // dsb_portal_per_dsb_portal_api_query_alter(), so we can safely rely on
    // it, regardless of the order in which the alter hooks are called.
    list($query,,) = array_values(
      dsb_portal_rest_api_get_search_from_globals()
    );

    // Extract the codes.
    $codes = dsb_portal_per_get_codes();
    $found = dsb_portal_per_extract_codes($query, array_keys($codes));
    if (!empty($found)) {
      if (!isset($filters['perObjectiveCode'])) {
        $filters['perObjectiveCode'] = array();
      }
      foreach ($found as $code) {
        $filters['perObjectiveCode'][] = $codes[$code];
      }
    }
  }
}

/**
 * Extracts all valid PER codes from a string.
 *
 * @param string $string
 *    The string from which to extract the PER codes.
 * @param array $codes
 *    A list of PER codes to extract.
 *
 * @return array
 *    A list of found PER codes.
 */
function dsb_portal_per_extract_codes($string, $codes) {
  $found = array();
  preg_match_all('/(' . implode('|', $codes) . ')/', $string, $found);
  return $found[0];
}

/**
 * Return a list of PER codes, found in the official XML.
 *
 * This data is cached.
 *
 * @return array
 *    A list of all PER codes.
 */
function dsb_portal_per_get_codes() {
  $cid = 'dsb_portal_per:curriculum_codes';
  $data = cache_get($cid);

  if (!empty($data->data)) {
    return $data->data;
  }
  else {
    module_load_include('inc', 'dsb_portal_per', 'includes/dsb_portal_per.facet_tree');
    // Refresh.
    $codes = array();
    $tree = dsb_portal_per_get_curriculum_tree();

    foreach ($tree as $cycle => $cycle_values) {
      foreach ($cycle_values as $domain => $domain_values) {
        foreach ($domain_values as $discipline => $discipline_values) {
          foreach ($discipline_values as $theme => $theme_data) {
            $codes[$theme_data->code] = $theme_data->code;
            $codes[str_replace(' ', '', $theme_data->code)] = $theme_data->code;
          }
        }
      }
    }

    cache_set($cid, $codes, 'cache', CACHE_TEMPORARY);

    return $codes;
  }
}
