<?php

/**
 * @file
 * Standard ("educa") curriculum integration for the dsb Portal.
 *
 * This module integrates the standard curriculum with the dsb Portal, also
 * known as the "educa" curriculum. It allows users to enable facets related to
 * the standard curriculum. It also enables the rendering of the curriculum data
 * for a LOM-CH description.
 */

/**
 * Implements hook_menu().
 */
function dsb_portal_educa_menu() {
  return array(
    'admin/config/services/dsb-portal-educa' => array(
      'title' => 'dsb Portal Standard Curriculum',
      'description' => 'Manage dsb portal Standard curriculum integration settings.',
      'access arguments' => array('administer dsb_portal_educa'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('dsb_portal_educa_admin_settings_form'),
      'file' => 'includes/dsb_portal_educa.admin.inc',
    ),
  );
}

/**
 * Implements hook_permission().
 */
function dsb_portal_educa_permission() {
  return array(
    'administer dsb_portal_educa' => array(
      'title' => t('Administer the dsb portal Standard Curriculum module settings'),
    ),
  );
}

/**
 * Implements hook_preprocess_dsb_portal_description_classification_info().
 */
function dsb_portal_educa_preprocess_dsb_portal_description_classification_info(&$vars) {
  if ($classification = $vars['description']->getField('classification')) {
    $data = dsb_portal_educa_get_curriculum_data();

    // Prepare the curriculum class.
    $curriculum = new Educa\DSB\Client\Curriculum\EducaCurriculum($data->curriculum);
    $curriculum->setCurriculumDictionary($data->dictionary);

    // Set the taxonomy path. We will use it's structure for the creation of
    // our tree.
    $curriculum->setTreeBasedOnTaxonPath($classification);

    // Drupal's theme_item_list() expects a "data" key, which is a string for
    // the item entry. We walk the tree recursively, fetch the correct string
    // from the LangString, and set a "data" key accordingly. We cannot use
    // PHP's built-in array_walk_recusrive, because it only treats the tree
    // leaves, not the items that make up a branch (which is what we mainly
    // need). We implement one ourselves.
    $array_walk_recursive = function($array) use(&$array_walk_recursive) {
      $items = array();
      foreach ($array as $term) {
        $item = array();
        $description = $term->describe();

        if (isset($description->name)) {
          $item['data'] = Educa\DSB\Client\Utils::getLSValue(
            $description->name,
            dsb_portal_lom_language_fallback_list()
          );
        }
        else {
          $item['data'] = $description->id;
        }

        if ($description->type == 'discipline') {
          $item['data'] = dsb_portal_educa_theme_standard_curriculum_school_subject_filter_link($item['data'], $description->id);
        }
        else {
          $item['data'] = dsb_portal_educa_theme_standard_curriculum_school_level_filter_link($item['data'], $description->id);
        }

        // If there are any child terms, we apply the same treatment.
        if ($term->hasChildren()) {
          $item['children'] = $array_walk_recursive($term->getChildren());
        }

        $items[] = $item;
      }

      return $items;
    };

    // Does the curriculum tree have any entries?
    if ($curriculum->getTree()->hasChildren()) {
      // Prepare the tree.
      $tree = array(
        'source' => t("Default curriculum", array(), array('context' => 'dsb_portal:view')),
      );

      // Get the items in a format Drupal can understand.
      $items = $array_walk_recursive($curriculum->getTree()->getChildren());

      // Render the tree.
      $tree['discipline_tree'] = theme('item_list', array(
        'items' => $items,
      ));

      // And finally register it.
      $vars['trees'][] = $tree;
    }
  }
}

/**
 * Implements hook_dsb_portal_active_filter_names_alter().
 */
function dsb_portal_educa_dsb_portal_active_filter_names_alter(&$filter_name, $context) {
  if ($context['filter_group'] == 'label') {
    switch ($context['filter_name']) {
      case 'educaSchoolLevels':
        $filter_name = t("Context", array(), array('context' => 'dsb_portal_per:search'));
        break;

      case 'educaSchoolSubjects':
        $filter_name = t("Discipline", array(), array('context' => 'dsb_portal_per:search'));
        break;
    }
  }
}

/**
 * Fetch the curriculum standard data, parsed and ready to use.
 *
 * This will connect to the Ontology server and fetch the curriculum definition
 * JSON file. It will parse it using the dsb Client library. This data is cached
 * for future re-use.
 *
 * @see Educa\DSB\Client\Curriculum\EducaCurriculum::parseCurriculumJson()
 *
 * @return object|false
 *    The parsed curriculum data, or false if not downloadable.
 */
function dsb_portal_educa_get_curriculum_data() {
  $cid = 'dsb_portal_educa:ontolgy_data';
  $data = cache_get($cid);

  if (!empty($data->data)) {
    return $data->data;
  }
  else {
    // Download the curriculum definition.
    $url = variable_get('dsb_portal_educa_json_url', 'http://ontology.biblio.educa.ch/json/educa_standard_curriculum');
    if ($url) {
      $json_file = drupal_http_request($url);

      if ($json_file->code == 200) {
        $data = Educa\DSB\Client\Curriculum\EducaCurriculum::parseCurriculumJson($json_file->data);

        cache_set($cid, $data, 'cache', CACHE_TEMPORARY);
        return $data;
      }
      else {
        watchdog('dsb_portal_educa', "Could not parse the JSON data. Please check the download url", array(), WATCHDOG_ERROR, l(t("Configuration"), 'admin/config/services/dsb-portal-educa'));
        return FALSE;
      }
    }
    else {
      watchdog('dsb_portal_educa', "Could not download the JSON data. Please configure a download url", array(), WATCHDOG_ERROR, l(t("Configuration"), 'admin/config/services/dsb-portal-educa'));
      return FALSE;
    }
  }
}

/**
 * Standard curriculum school subject filter link.
 *
 * Prepare a link that can be used to filter search results by a specific
 * curriculum entry (only standard curriculum). This returns an HTML formatted
 * link.
 *
 * @param string $curriculum_entry
 *    The curriculum entry, which will be used as the link text.
 * @param string $filter_value
 *    The value of the filter. This value must be something the API can
 *    understand.
 *
 * @return string
 *    A HTML-formatted string.
 */
function dsb_portal_educa_theme_standard_curriculum_school_subject_filter_link($curriculum_entry, $filter_value) {
  return l($curriculum_entry, 'dsb-portal/search', array(
    'query' => array(
      'filter' => array(
        'educaSchoolSubjects' => array($filter_value),
      ),
    ),
  ));
}

/**
 * Standard curriculum school level filter link.
 *
 * Prepare a link that can be used to filter search results by a specific
 * curriculum entry (only standard curriculum). This returns an HTML formatted
 * link.
 *
 * @param string $curriculum_entry
 *    The curriculum entry, which will be used as the link text.
 * @param string $filter_value
 *    The value of the filter. This value must be something the API can
 *    understand.
 *
 * @return string
 *    A HTML-formatted string.
 */
function dsb_portal_educa_theme_standard_curriculum_school_level_filter_link($curriculum_entry, $filter_value) {
  return l($curriculum_entry, 'dsb-portal/search', array(
    'query' => array(
      'filter' => array(
        'educaSchoolLevels' => array($filter_value),
      ),
    ),
  ));
}
