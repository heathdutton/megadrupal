<?php

/**
 * @file
 * Client application for communicating with the dsb REST API.
 *
 * The national catalog of the Swiss digital school library exposes a REST API
 * for retrieving and searching LOM-CH descriptions. This module implements a
 * client application for Drupal using the official dsb Client PHP library.
 */

/**
 * Implements hook_hook_info().
 */
function dsb_portal_hook_info() {
  $hooks = array();
  foreach (array(
    'dsb_portal_lom_language_fallback_list_alter',
    'dsb_portal_lom_description_load_alter',
    'dsb_portal_rest_api_facets_alter',
    'dsb_portal_rest_api_filters_alter',
    'dsb_portal_rest_api_fields_alter',
    'dsb_portal_owner_logo_path_alter',
    'dsb_portal_facet_name_alter',
  ) as $hook) {
    $hooks[$hook] = array(
      'group' => 'dsb_portal',
    );
  }
  return $hooks;
}

/**
 * Implements hook_menu().
 */
function dsb_portal_menu() {
  return array(
    'dsb-portal/search' => array(
      'title' => 'Search the national catalog',
      'access arguments' => array('use dsb_portal'),
      'page callback' => 'dsb_portal_rest_api_search',
      'file' => 'includes/dsb_portal.rest_api.inc',
      'type' => MENU_CALLBACK,
    ),
    'dsb-portal/description/%dsb_portal_lom_description' => array(
      'title callback' => 'dsb_portal_lom_description_title',
      'title arguments' => array(2),
      'access arguments' => array('use dsb_portal'),
      'page callback' => 'dsb_portal_rest_api_view_description',
      'page arguments' => array(2),
      'file' => 'includes/dsb_portal.rest_api.inc',
      'type' => MENU_CALLBACK,
    ),
    'admin/config/services/dsb-portal' => array(
      'title' => 'dsb Portal',
      'description' => 'Manage dsb portal settings.',
      'access arguments' => array('administer dsb_portal'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('dsb_portal_admin_settings_form'),
      'file' => 'includes/dsb_portal.admin.inc',
    )
  );
}

/**
 * Implements hook_permission().
 */
function dsb_portal_permission() {
  return array(
    'administer dsb_portal' => array(
      'title' => t('Administer the dsb portal module settings'),
    ),
    'use dsb_portal' => array(
      'title' => t('Use the dsb portal module to search the national catalog'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function dsb_portal_theme() {
  $path = drupal_get_path('module', 'dsb_portal') . '/theme';

  $default = array(
    'path' => $path,
    'file' => 'theme.inc',
  );

  return array(
    'dsb_portal_search_results' => array(
      'variables' => array('num_found' => 0, 'results' => array()),
      'template' => 'dsb-portal-search-results',
    ) + $default,
    'dsb_portal_search_result' => array(
      'variables' => array('result' => NULL),
      'template' => 'dsb-portal-search-result',
    ) + $default,
    'dsb_portal_description' => array(
      'variables' => array('description' => NULL),
      'template' => 'dsb-portal-description',
    ) + $default,
    'dsb_portal_description_misc_info' => array(
      'variables' => array('description' => NULL, 'misc_information' => NULL),
      'template' => 'dsb-portal-description-misc_info',
    ) + $default,
    'dsb_portal_description_edu_info' => array(
      'variables' => array('description' => NULL, 'edu_information' => NULL),
      'template' => 'dsb-portal-description-edu_info',
    ) + $default,
    'dsb_portal_description_classification_info' => array(
      'variables' => array('description' => NULL, 'classification_information' => NULL),
      'template' => 'dsb-portal-description-classification_info',
    ) + $default,
    'dsb_portal_description_resource_info' => array(
      'variables' => array('description' => NULL, 'resource_information' => NULL),
      'template' => 'dsb-portal-description-resource_info',
    ) + $default,
    'dsb_portal_description_relationship_info' => array(
      'variables' => array('description' => NULL, 'relationship_information' => NULL),
      'template' => 'dsb-portal-description-relationship_info',
    ) + $default,
  );
}

/**
 * Implements hook_block_info().
 */
function dsb_portal_block_info() {
  $blocks = array();

  if (variable_get('dsb_portal_search_form_expose_form_in_block', 0)) {
    $blocks['dsb_portal_search_form'] = array(
      'info' => t("dsb Portal search form"),
    );
  }

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function dsb_portal_block_view($delta = '') {
  switch ($delta) {
    case 'dsb_portal_search_form':
      // Even if we don't register our block anymore in hook_block_info(), if
      // Drupal assigned it to a region, it will continue to show up. To
      // circumvent this problem, we check here again if we really must show
      // the block. If not, we don't return any data, so the block won't show
      // up.
      if (variable_get('dsb_portal_search_form_expose_form_in_block', 0)) {
        module_load_include('inc', 'dsb_portal', 'includes/dsb_portal.rest_api');
        $result = dsb_portal_get_static_search_result();
        $form = drupal_get_form('dsb_portal_rest_api_search_form', !empty($result['facets']) ? $result['facets'] : array());

        return array(
          'subject' => t("Search the national catalog"),
          'content' => render($form),
        );
      }
      else {
        return array(
          'subject' => '',
          'content' => '',
        );
      }
      break;
  }
}

/**
 * Implements hook_libraries_info().
 */
function dsb_portal_libraries_info() {
  return array(
    'dsb-client' => array(
      'name' => 'dsb Client',
      '_dsb_portal version' => 'dev-master',
      '_dsb_portal check class' => 'Educa\DSB\Client\ApiClient\ClientV2',
      'vendor url' => 'http://org.educa.ch/',
      'download url' => 'https://github.com/educach/dsb-client',
      'version callback' => 'dsb_portal_get_library_version',
      'path' => 'src',
      'xautoload' => function($adapter) {
        $adapter->composerJson('composer.json');
      },
    ),
    'guzzle' => array(
      'name' => 'Guzzle',
      '_dsb_portal version' => '>=5.0.0',
      '_dsb_portal check class' => 'GuzzleHttp\Client',
      'vendor url' => 'http://guzzlephp.org/',
      'download url' => 'https://github.com/guzzle/guzzle',
      'version callback' => 'dsb_portal_get_library_version',
      'path' => 'src',
      'xautoload' => function($adapter) {
        $adapter->composerJson('composer.json');
      },
    ),
    'ringphp' => array(
      'name' => 'RingPHP',
      '_dsb_portal version' => '>=1.0.0',
      '_dsb_portal check class' => 'GuzzleHttp\Ring\Core',
      'vendor url' => 'http://guzzlephp.org/',
      'download url' => 'https://github.com/guzzle/RingPHP',
      'version callback' => 'dsb_portal_get_library_version',
      'path' => 'src',
      'xautoload' => function($adapter) {
        $adapter->composerJson('composer.json');
      },
    ),
    'streams' => array(
      'name' => 'Streams',
      '_dsb_portal version' => '>=3.0.0',
      '_dsb_portal check class' => 'GuzzleHttp\Stream\Stream',
      'vendor url' => 'http://guzzlephp.org/',
      'download url' => 'https://github.com/guzzle/streams',
      'version callback' => 'dsb_portal_get_library_version',
      'path' => 'src',
      'xautoload' => function($adapter) {
        $adapter->composerJson('composer.json');
      },
    ),
    'promise' => array(
      'name' => 'Promise',
      '_dsb_portal version' => '>=2.0.0',
      '_dsb_portal check class' => 'React\Promise\Promise',
      'vendor url' => 'https://github.com/reactphp/promise',
      'download url' => 'https://github.com/reactphp/promise',
      'version callback' => 'dsb_portal_get_library_version',
      'path' => 'src',
      'xautoload' => function($adapter) {
        $adapter->composerJson('composer.json');
      },
    ),
  );
}

/**
 * Libraries API version callback.
 *
 * Libraries API requires a version for each library it loads. This function
 * parses the CHANGELOG.md file and extracts the version information.
 *
 * @param array $library_info
 *    The library information, passed by Libraries API.
 *
 * @return string
 *    The parsed version, or 'n/a' if none was found.
 */
function dsb_portal_get_library_version($library_info) {
  $library = libraries_load($library_info['machine name']);
  $changelog_file = $library['library path'] . '/CHANGELOG.md';

  if (!file_exists($changelog_file)) {
    $changelog_file = $library['library path'] . '/CHANGELOG.rst';
  }

  if (file_exists($changelog_file)) {
    $changelog = file_get_contents($changelog_file);
    $match;

    if (preg_match('/^#*\**\s*([0-9\.]+)\s+/m', $changelog, $match)) {
      return $match[1];
    }
  }

  return 'n/a';
}

/**
 * Get a client object.
 *
 * Returns a client object, implementing
 * Educa\DSB\Client\ApiClient\ClientInterface. The returned object will be
 * adapted for the configured API version.
 *
 * @param int $api_version
 *    The API version to use.
 * @param string $endpoint_url
 *    The URL to use for the REST api.
 * @param string $username
 *    The username to use for authentication.
 * @param int $key_fid
 *    The file ID of private key.
 * @param string $key_passphrase
 *    (optional) The passphrase for the private key.
 *
 * @return Educa\DSB\Client\ApiClient\ClientInterface
 *    API client object.
 */
function dsb_portal_get_client($api_version, $endpoint_url, $username, $key_fid, $key_passphrase = '') {
  switch ($api_version) {
    case '__test':
      // This is used for unit tests.
      return new Educa\DSB\Client\ApiClient\TestClient();
      break;
    default:
    case 2:
      $key_file = file_load($key_fid);
      $key_path = $key_file->uri;
      return new Educa\DSB\Client\ApiClient\ClientV2(
        $endpoint_url,
        $username,
        $key_path,
        $key_passphrase
      );
      break;
  }
}

/**
 * Get a client object based on the current settings.
 *
 * This is a helper function for dsb_portal_get_client().
 *
 * @return Educa\DSB\Client\ApiClient\ClientInterface
 *    API client object.
 */
function dsb_portal_get_client_based_on_config() {
  return dsb_portal_get_client(
    variable_get('dsb_portal_api_version', NULL),
    variable_get('dsb_portal_api_url', NULL),
    variable_get('dsb_portal_api_username', NULL),
    variable_get('dsb_portal_api_key_fid', NULL),
    variable_get('dsb_portal_api_key_passphrase', NULL)
  );
}

/**
 * Check module dependencies.
 *
 * Helper function to check whether the Libraries API + X Autoload module, or
 * the Composer Manager module, are installed. We require either Composer
 * Manager, or Libraries API with X Autoload.
 *
 * @param bool $display_warning
 *    (optional) Whether to display a warning message to the user. Defaults to
 *    false.
 *
 * @return string|false
 *    Either "Composer Manager", "Libraries API + X Autoload" or false.
 */
function dsb_portal_check_module_dependency($display_warning = FALSE) {
  if (module_exists('composer_manager')) {
    return "Composer Manager";
  }
  elseif (module_exists('libraries') && module_exists('xautoload')) {
    return "Libraries API + X Autoload";
  }
  else {
    if ($display_warning) {
      drupal_set_message(t("The dsb Portal module has unmet dependencies. Please check your site status under !link.", array(
        '!link' => l('admin/reports/status', 'admin/reports/status'),
      )), 'warning');
    }
    return FALSE;
  }
}

/**
 * Check third-party library availability.
 *
 * Check all required libraries are available.
 *
 * @param bool $display_warning
 *    (optional) Whether to display a warning message to the user. Defaults to
 *    false.
 *
 * @return bool
 *    True if the libraries are available. False otherwise.
 */
function dsb_portal_check_libraries($display_warning = FALSE) {
  $library_installed = TRUE;
  foreach (dsb_portal_libraries_info() as $library_name => $library_info) {
    if (module_exists('composer_manager')) {
      // This function can be called very early in the bootstrap phase, even
      // before Composer Manager registers the autoloader. Register it here so
      // we are sure we can access our classes. Composer Manager statically
      // checks if the autoloader is registered during boot, so it's safe to do
      // so; it won't initialize it again.
      composer_manager_register_autoloader();
      $library_installed = class_exists($library_info['_dsb_portal check class']);
    }
    elseif (module_exists('libraries')) {
      $library = libraries_load($library_name);
      $library_installed = !empty($library['installed']);
    }

    if (!$library_installed) {
      // No point in checking further.
      break;
    }
  }

  // Finally, check OpenSSL support.
  if ($library_installed) {
    $library_installed = function_exists('openssl_get_privatekey');
  }

  if (!$library_installed) {
    if ($display_warning) {
      drupal_set_message(t("The dsb Portal module requires third-party libraries, but it cannot load them. Please check your site status under !link.", array(
        '!link' => l('admin/reports/status', 'admin/reports/status'),
      )), 'warning');
    }
    return FALSE;
  }
  else {
    return TRUE;
  }
}

/**
 * Check module configuration.
 *
 * @param bool $display_warning
 *    (optional) Whether to display a warning message to the user. Defaults to
 *    false.
 * @return bool
 *    True if the module is correctly configured. False otherwise.
 */
function dsb_portal_check_module_configuration($display_warning = FALSE) {
  // Check all required settings.
  foreach (array(
    'dsb_portal_api_username',
    'dsb_portal_api_key_fid',
    'dsb_portal_api_url',
  ) as $key) {
    if (!variable_get($key, FALSE)) {
      if ($display_warning) {
        drupal_set_message(t("The dsb Portal module is not correctly configured. Please verify your dsb Portal settings under !link.", array(
          '!link' => l('admin/config/services/dsb-portal', 'admin/config/services/dsb-portal'),
        )), 'warning');
      }
      return FALSE;
    }
  }
  return TRUE;
}

/**
 * Check the module is usable.
 *
 * Check whether the module is usable. Optionally display warnings to the
 * user.
 *
 * @param bool $display_warning
 *    (optional) Whether to display a warning message to the user. Defaults to
 *    false.
 * @return bool
 *    True if the module is usable. False otherwise.
 */
function dsb_portal_check_module_usable($display_warning = FALSE) {
  $dependency = !!dsb_portal_check_module_dependency($display_warning);
  $libraries = dsb_portal_check_libraries($display_warning);
  $config = dsb_portal_check_module_configuration($display_warning);

  return $dependency && $libraries && $config;
}

/**
 * Title callback.
 *
 * @param
 *    The loaded LOM description.
 *
 * @return string Educa\DSB\Client\Lom\LomDescriptionInterface
 *    The LOM description label.
 */
function dsb_portal_lom_description_title($lom) {
  return $lom->getTitle(dsb_portal_lom_language_fallback_list());
}

/**
 * Get language fall back list.
 *
 * LOM-CH data has LangString fields, fields with different language keys. This
 * function returns a list of language keys, which the
 * Educa\DSB\Client\Lom\LomDescriptionInterface can use to search for an
 * available string.
 *
 * @see hook_dsb_portal_lom_language_fallback_list_alter()
 *
 * @return array
 *    An array of language codes, the current language being the first.
 */
function dsb_portal_lom_language_fallback_list() {
  $list = &drupal_static(__FUNCTION__);

  if (!isset($list)) {
    global $language;

    $list = array_unique(array(
      $language->language,
      'de',
      'fr',
      'it',
      'rm',
      'en',
    ));

    drupal_alter('dsb_portal_lom_language_fallback_list', $list);
  }

  return $list;
}

/**
 * URL argument load handler.
 *
 * Load handler for the menu argument.
 *
 * @see hook_dsb_portal_lom_description_load_alter()
 *
 * @param string $lom_id
 *    The LOM ID, as passed to the URL.
 *
 * @return Educa\DSB\Client\Lom\LomDescriptionInterface
 *    The LOM description object.
 */
function dsb_portal_lom_description_load($lom_id) {
  // Failsafe.
  if (!dsb_portal_check_module_usable(TRUE)) {
    drupal_goto('dsb-portal/search');
    exit();
  }

  $client = dsb_portal_get_client_based_on_config();

  try {
    $client->authenticate();
  }
  catch (Exception $e) {
    drupal_set_message(t("Something went wrong. Error message: @message", array(
      '@message' => $e->getMessage(),
    )), 'error');
    watchdog('dsb_portal', "Authentication failed. Error message: @message", array(
      '@message' => $e->getMessage(),
    ), WATCHDOG_ERROR);
    drupal_goto('dsb-portal/search');
    exit();
  }

  try {
    $result = $client->loadDescription($lom_id);

    dsb_portal_debug("Loaded a LOM description. Result:<br /><pre>!result</pre>", array(
      '!result' => print_r($result, 1),
    ));

    $lom = new Educa\DSB\Client\Lom\LomDescription($result);

    drupal_alter('dsb_portal_lom_description_load', $lom, $result);

    return $lom;
  }
  catch (Exception $e) {
    drupal_set_message(t("Something went wrong. Error message: @message", array(
      '@message' => $e->getMessage(),
    )), 'error');
    watchdog('dsb_portal', "Loading LOM description @lom_id failed. Error message: @message", array(
      '@lom_id' => $lom_id,
      '@message' => $e->getMessage(),
    ), WATCHDOG_ERROR);
    drupal_goto('dsb-portal/search');
    exit();
  }
}

/**
 * Store the search result statically for this request.
 *
 * Search results are stored statically for a request. This is for when the
 * search form is exposed inside a block, but can also be handy for other
 * modules. Use dsb_portal_get_static_search_result() to retrieve them.
 *
 * @see dsb_portal_get_static_search_result()
 *
 * @param array $result
 *    The search result.
 */
function dsb_portal_set_static_search_result($result) {
  $cache = &drupal_static(__FUNCTION__);
  $cache = $result;
}

/**
 * Get the statically stored search result.
 *
 * Search results are stored statically for a request. This is for when the
 * search form is exposed inside a block, but can also be handy for other
 * modules.
 *
 * @see dsb_portal_set_static_search_result()
 *
 * @return array
 *    The statically cached search result.
 */
function dsb_portal_get_static_search_result() {
  return drupal_static('dsb_portal_set_static_search_result');
}

/**
 * Helper function for debugging.
 *
 * When debug mode is enabled, many requests are logged, with result data and
 * request parameters. This can be quite heavy. That's why it's disabled by
 * default. This function takes debug information, but only passes it to
 * watchdog if the debug mode is active. This saves us from having if statements
 * all over the place.
 *
 * @see watchdog()
 *
 * @param string $message
 *    The message, which will be passed as is to watchdog().
 * @param array $variables
 *    (optional) The replacement variables, which will be passed as is to
 *    watchdog().
 */
function dsb_portal_debug($message, $variables = array()) {
  if (variable_get('dsb_portal_search_debug_mode', 0)) {
    watchdog('dsb_portal', $message, $variables, WATCHDOG_DEBUG);
  }
}

/**
 * Get a language list.
 *
 * This builds on the language list that ships with Drupal in includes/iso.inc.
 * LOM-CH has a few more languages than the ISO standard list that Drupal
 * provides. We get Drupal's list, and add our own as well.
 *
 * @return array
 *    An array of language names, in English, keyed by their ISO code.
 */
function dsb_portal_get_languages() {
  $languages = &drupal_static(__FUNCTION__);

  if (!isset($languages)) {
    include_once DRUPAL_ROOT . '/includes/iso.inc';

    foreach (_locale_get_predefined_list() as $code => $names) {
      // We only want the English name, which is the first key.
      $languages[$code] = $names[0];
    }

    // Add our own.
    foreach (array(
      'rm2907' => 'Rhaeto-Romance Puter',
      'rm2908' => 'Rhaeto-Romance Rumantsch grischun',
      'rm16068' => 'Rhaeto-Romance Surmiran',
      'rm16069' => 'Rhaeto-Romance Sursilvan',
      'rm13312' => 'Rhaeto-Romance Sutsilvan',
      'rm2906' => 'Rhaeto-Romance Vallader',
    ) as $code => $name) {
      $languages[$code] = $name;
    }
  }

  return $languages;
}
