<?php

/**
 * @file
 * Tests for dsb Portal module.
 */

class DSBPortalSearchFormTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'dsb Portal Search',
      'description' => 'Test the search form (filtering, facets, etc)',
      'group' => 'dsb Portal'
    );
  }

  /**
   * @{inheritdoc}
   */
  public function setUp() {
    parent::setUp('dsb_portal', 'composer_manager');
    variable_set('dsb_portal_api_url', 'http://localhost');
    variable_set('dsb_portal_api_username', 'admin@site.com');
    variable_set('dsb_portal_api_key_fid', 1);
    variable_set('dsb_portal_api_version', '__test');
  }

  /**
   * Test the search form.
   */
  public function testSearchForm() {
    $user = $this->drupalCreateUser(array(
      'access content',
      'use dsb_portal',
    ));
    $this->drupalLogin($user);

    $this->drupalGet('dsb-portal/search');
    $this->assertNoText('The dsb Portal module is not correctly configured.');
    $this->assertNoText('The dsb Portal module has unmet dependencies.');
    $this->assertNoText('The dsb Portal module requires third-party libraries');

    // Try inserting some keywords.
    $edit = array(
      'query' => 'Some text',
    );
    $this->drupalPost(NULL, $edit, 'Search');

    // The POST submission should have redirected to the search page again, but
    // passing the form fields as GET parameters.
    $this->assertUrl('dsb-portal/search', array('query' => array(
      'query' => 'Some text',
      'filter' => '',
    )));

    // The form field should still have the query in it, as a default value.
    $this->assertFieldByName('query', 'Some text');

    // Try selecting a facet. It to should be put in the URL.
    $edit = array(
      'filter[language][de]' => 'de',
    );
    $this->drupalPost(NULL, $edit, 'Search');

    // It should still have the search query.
    $this->assertUrl('dsb-portal/search', array('query' => array(
      'query' => 'Some text',
      'filter' => array(
        'language' => array('de'),
      ),
    )));

    // And the facet should appear in the "Active filters" box, along with its
    // own submit button.
    $this->assertText("Active filters");
    $this->assertFieldByName('remove_filter_language_0');

    // We can add more filters, like keywords.
    $this->drupalGet('dsb-portal/search', array('query' => array(
      'query' => 'Some other text',
      'filter' => array(
        'language' => array('de'),
        'keywords' => array('Bikes', 'Rollercoaster'),
      ),
    )));

    // The search textfield should contain the search query.
    $this->assertFieldByName('query', 'Some other text');

    // The facet and keywords should all appear inside the "Active filters" box.
    // Each should have its own submit button.
    $this->assertText("Active filters");
    $this->assertFieldByName('remove_filter_language_0');
    $this->assertUniqueText('Bikes');
    $this->assertFieldByName('remove_filter_keywords_0');
    $this->assertUniqueText('Rollercoaster');
    $this->assertFieldByName('remove_filter_keywords_1');

    // If we submit the form again, it should all remain as-is.
    $this->drupalPost(NULL, array(), 'Search');

    $this->assertFieldByName('query', 'Some other text');
    $this->assertText("Active filters");
    $this->assertFieldByName('remove_filter_language_0');
    $this->assertUniqueText('Bikes');
    $this->assertFieldByName('remove_filter_keywords_0');
    $this->assertUniqueText('Rollercoaster');
    $this->assertFieldByName('remove_filter_keywords_1');

    // If we enable another facet, it should add itself to the active filters.
    $edit = array(
      'filter[language][fr]' => 'fr',
    );
    $this->drupalPost(NULL, $edit, 'Search');

    // The URL should contain the new language.
    $this->assertUrl('dsb-portal/search', array('query' => array(
      'query' => 'Some other text',
      'filter' => array(
        'keywords' => array('Bikes', 'Rollercoaster'),
        'language' => array('de', 'fr'),
      ),
    )));

    // And the page should remain the same, except for the new language.
    $this->assertFieldByName('query', 'Some other text');
    $this->assertText("Active filters");
    $this->assertFieldByName('remove_filter_language_0');
    $this->assertFieldByName('remove_filter_language_1');
    $this->assertUniqueText('Bikes');
    $this->assertFieldByName('remove_filter_keywords_0');
    $this->assertUniqueText('Rollercoaster');
    $this->assertFieldByName('remove_filter_keywords_1');

    // Try removing a single filter. Remove the German one. Unfortunately,
    // drupalPost() takes a $submit parameter that is the value of the
    // button whose click we want to emulate. Since we have multiple
    // buttons with the value "Remove", and want to control which one we
    // use, we change the value of the other ones to something else.
    // Since non-clicked buttons aren't included in the submitted POST
    // data, and since drupalPost() will result in $this being updated
    // with a newly rebuilt form, this doesn't cause problems.
    $buttons = $this->xpath('//input[@type="submit" and @value="Remove"]');
    foreach ($buttons as $button) {
      if ($button['name'] != 'remove_filter_language_0') {
        $button['value'] = 'DUMMY';
      }
    }
    $this->drupalPost(NULL, array(), 'Remove');

    // The URL should contains only one language.
    $this->assertUrl('dsb-portal/search', array('query' => array(
      'query' => 'Some other text',
      'filter' => array(
        'keywords' => array('Bikes', 'Rollercoaster'),
        'language' => array('fr'),
      ),
    )));

    // And the page should remain the same, except for the removed language.
    $this->assertFieldByName('query', 'Some other text');
    $this->assertText("Active filters");
    $this->assertFieldByName('remove_filter_language_0');
    $this->assertNoFieldByName('remove_filter_language_1');
    $this->assertUniqueText('Bikes');
    $this->assertFieldByName('remove_filter_keywords_0');
    $this->assertUniqueText('Rollercoaster');
    $this->assertFieldByName('remove_filter_keywords_1');

    // Try removing the second keyword (Rollercoaster). Here again, we use the
    // button renaming trick.
    $buttons = $this->xpath('//input[@type="submit" and @value="Remove"]');
    foreach ($buttons as $button) {
      if ($button['name'] != 'remove_filter_keywords_1') {
        $button['value'] = 'DUMMY';
      }
    }
    $this->drupalPost(NULL, array(), 'Remove');

    // The URL should contains only one keyword.
    $this->assertUrl('dsb-portal/search', array('query' => array(
      'query' => 'Some other text',
      'filter' => array(
        'keywords' => array('Bikes'),
        'language' => array('fr'),
      ),
    )));

    // And the page should remain the same, except for the removed keyword.
    $this->assertFieldByName('query', 'Some other text');
    $this->assertText("Active filters");
    $this->assertFieldByName('remove_filter_language_0');
    $this->assertNoFieldByName('remove_filter_language_1');
    $this->assertUniqueText('Bikes');
    $this->assertFieldByName('remove_filter_keywords_0');
    $this->assertNoText('Rollercoaster');
    $this->assertNoFieldByName('remove_filter_keywords_1');

    // Try reseting the entire form.
    $this->drupalPost(NULL, array(), 'Reset');

    // The form should be clean.
    $this->assertUrl('dsb-portal/search', array('query' => array()));

    $this->assertNoFieldByName('query', 'Some other text');
    $this->assertNoText("Active filters");
    $this->assertNoFieldByName('remove_filter_language_0');
    $this->assertNoFieldByName('remove_filter_language_1');
    $this->assertNoText('Bikes');
    $this->assertNoFieldByName('remove_filter_keywords_0');
    $this->assertNoText('Rollercoaster');
    $this->assertNoFieldByName('remove_filter_keywords_1');
  }

}
