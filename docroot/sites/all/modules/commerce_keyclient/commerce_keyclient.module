<?php

/**
 * @file
 * KeyClient payment system.
 */

define('COMMERCE_KEYCLIENT_ENV_TEST', 1);
define('COMMERCE_KEYCLIENT_ENV_PROD', 2);
define('COMMERCE_KEYCLIENT_PAYMENT_URL', 'https://ecommerce.keyclient.it/ecomm/ecomm/DispatcherServlet');
define('COMMERCE_KEYCLIENT_MAX_ATTEMPTS', 3);

/**
 * Implements hook_menu().
 */
function commerce_keyclient_menu() {
  $items = array();

  $items['checkout/keyclient/complete'] = array(
    'title' => 'Order Complete',
    'page callback' => 'commerce_keyclient_complete',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'commerce_keyclient.pages.inc',
  );

  $items['checkout/keyclient/cancel'] = array(
    'page callback' => 'commerce_keyclient_cancel',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'commerce_keyclient.pages.inc',
  );

  $items['checkout/keyclient/servertoserver'] = array(
    'title' => 'Server To Server page',
    'page callback' => 'commerce_keyclient_server2server',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'commerce_keyclient.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_keyclient_commerce_payment_method_info() {
  $payments_methods = array();

  $payment_methods['keyclient'] = array(
    'base' => 'commerce_keyclient',
    'title' => t('Keyclient gateway'),
    'short_title' => t('Keyclient'),
    'display_title' => '<span>Keyclient Quipago</span><img src="/' . drupal_get_path('module', 'commerce_keyclient') . '/images/credit_cards.png" width="297" height="52"/>',
    'description' => t('Keyclient gateway'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );

  return $payment_methods;

}

/**
 * Payment method callback: settings form.
 */
function commerce_keyclient_settings_form($settings = NULL) {

  // Merge default settings into the stored settings array.
  $settings = (array) $settings + array(
    'email' => variable_get('site_mail', ''),
    'alias' => '',
    'secret_string' => '',
    'test_string' => time() . '_',
    'transaction_mode' => COMMERCE_KEYCLIENT_ENV_TEST,
  );

  $form = array();

  $form['email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email'),
    '#description' => t('Merchant email address'),
    '#default_value' => $settings['email'],
    '#required' => TRUE,
  );

  $form['alias'] = array(
    '#type' => 'textfield',
    '#title' => t('Alias ID'),
    '#description' => t('Alias ID (usually payment_MERCANTID)'),
    '#default_value' => $settings['alias'],
  );

  $form['transaction_mode'] = array(
    '#type' => 'radios',
    '#title' => t('Transaction MODE'),
    '#description' => t('Transaction mode (test or production)'),
    '#options' => array(
      COMMERCE_KEYCLIENT_ENV_TEST => t('TEST'),
      COMMERCE_KEYCLIENT_ENV_PROD => t('PROD'),
    ),
    '#default_value' => $settings['transaction_mode'],
    '#required' => TRUE,
  );

  $form['secret_string'] = array(
    '#type' => 'textfield',
    '#maxlength' => 256,
    '#title' => t('Secret String'),
    '#description' => t('A Secret String used for MAC calculation (also known ad MAC string)'),
    '#default_value' => $settings['secret_string'],
    '#required' => TRUE,
  );

  $form['test_string'] = array(
    '#type' => 'textfield',
    '#title' => t('Test String'),
    '#description' => t('A Test String might be necessary to render an order id UNIQUE during test'),
    '#default_value' => $settings['test_string'],
    '#required' => TRUE,
  );

  return $form;
}

/**
 * Payment method callback: redirect form to keyclient gateway.
 */
function commerce_keyclient_redirect_form($form, &$form_state, $order, $payment_method) {
  return commerce_keyclient_order_form($form, $form_state, $order, $payment_method['settings']);
}

/**
 * Payment method callback: redirect form.
 */
function commerce_keyclient_order_form($form, &$form_state, $order, $settings) {
  // Wrapping the order to get additional info.
  $order_w = entity_metadata_wrapper('commerce_order', $order);

  $params = array();

  $params['alias'] = $settings['alias'];
  $params['codTrans'] = $order_w->order_id->value();
  $params['mail'] = $order_w->mail->value();
  $params['importo'] = $order_w->commerce_order_total->amount->value();
  $params['divisa'] = $order_w->commerce_order_total->currency_code->value();
  $params['url'] = url('checkout/keyclient/complete', array('absolute' => TRUE));
  $params['url_back'] = url('checkout/keyclient/cancel', array('absolute' => TRUE));
  $params['urlpost'] = url('checkout/keyclient/servertoserver', array('absolute' => TRUE));
  $params['mac'] = commerce_keyclient_getmac($params, $settings);

  // If in test mode override some params.
  if ($settings['transaction_mode'] == COMMERCE_KEYCLIENT_ENV_TEST) {
    $params['codTrans'] = $settings['test_string'] . $order_w->order_id->value();
    $params['alias'] = 'payment_testm_urlmac';
    $params['importo'] = 1;
    $settings['secret_string'] = 'esempiodicalcolomac';
    $params['mac'] = commerce_keyclient_getmac($params, $settings);
  }

  // Build form hidden fields.
  foreach ($params as $key => $value) {
    $form[$key] = array('#type' => 'hidden', '#value' => $value);
  }

  $form['#action'] = COMMERCE_KEYCLIENT_PAYMENT_URL;

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Redirect to Keyclient'),
  );
  return $form;
}

/**
 * Parse KeyClient server2server response.
 *
 * @return array
 *   List of data available from KeyClient.
 */
function commerce_keyclient_process_response() {
  $response = array();
  // Keyclient response parameters listed in docs.
  $keyclient_params = array(
    'alias',
    'importo',
    'divisa',
    'session_id',
    'codTrans',
    'data',
    'orario',
    'esito',
    'codAut',
    '$BRAND',
    'nome',
    'cognome',
    'email',
    'mac',
    'nazionalita',
    'Pan',
    'Scadenza_pan',
  );

  foreach ($keyclient_params as $key) {
    $response[$key] = isset($_POST[$key]) ? $_POST[$key] : NULL;
  }

  return $response;
}

/**
 * Generate transaction from KeyClient response.
 *
 * @param int $order_id
 *   The Drupal commerce order ID
 * @param array $response
 *   The KeyClient response
 * @param int $status
 *   Status to set in transiction
 */
function commerce_keyclient_transaction($order_id, $response, $status) {
  $order = commerce_order_load($order_id);
  $order_w = entity_metadata_wrapper('commerce_order', $order);

  $transaction = commerce_payment_transaction_new('keyclient', $order->order_id);
  $transaction->instance_id = $order->order_id;
  $transaction->amount = $response['importo'];
  $transaction->currency_code = $response['divisa'];
  $transaction->remote_id = (isset($response['codAut']) ? $response['codAut'] : 0);
  $transaction->status = $status;

  $transaction->message = ((isset($response['codAut']) ? $response['mac'] : 'User cancelled this transaction'));

  commerce_payment_transaction_save($transaction);
}


/**
 * Helper function for calculate MAC hash find.
 *
 * @param array $params
 *   KeyClient connection parameters.
 * @param array $settings
 *   KeyClient payment method settings.
 *
 * @return string
 *   Generated MAC.
 */
function commerce_keyclient_getmac($params, $settings) {
  // Array of param keys necessary to build mac string as requred by Keyclient.
  $keys = array('codTrans', 'divisa', 'importo');
  $macstring = '';

  foreach ($keys as $key) {
    if (array_key_exists($key, $params)) {
      $macstring .= $key . '=' . $params[$key];
    }
  }

  $macstring .= $settings['secret_string'];

  return sha1($macstring);
}

/**
 * Extract settings for KeyClient payment method.
 *
 * @return array
 *   An array of rules settings
 *   see http://stackoverflow.com/questions/7023863/how-to-get-drupal-rules-settings
 *   there is probably a better way to do this
 */
function commerce_keyclient_getsettings() {
  $settings = array();
  $rule = rules_config_load('commerce_payment_keyclient');

  foreach ($rule as $action) {
    if (!empty($action->settings)) {
      $settings = $action->settings['payment_method']['settings'];
    }
  }

  return $settings;
}

/**
 * Conver KeyClient transiction code to Drupal commerce order id.
 *
 * If in test mode, clean the cod_trans string from the test_string this could
 * be avoided if Keyclient didn't use a single set of testing information for
 * every client! This is why we need a test_string, to ensure the cod_trans we
 * send to Keycline is unique.
 *
 * @param string $cod_trans
 *   Transiction code
 *
 * @return int
 *   the transaction order id url
 */
function commerce_keyclient_getorderid($cod_trans) {
  // Get payment settings.
  $settings = commerce_keyclient_getsettings();

  if (isset($_GET['codTrans'])) {
    $cod_trans = $_GET['codTrans'];
  }

  if ($settings['transaction_mode'] == COMMERCE_KEYCLIENT_ENV_TEST) {
    $order_id = str_replace($settings['test_string'], '', $cod_trans);
  }
  else {
    $order_id = $cod_trans;
  }

  return $order_id;
}

/**
 * Get the number of transaction attempt for an order.
 *
 * @param int $order_id
 *   a fully loaded commerce_order object
 *
 * @return int
 *   a number of transaction attempts.
 */
function commerce_keyclient_getremaintransactionattempt($order_id) {
  $results = db_select('commerce_payment_transaction', 't')
    ->fields('t', array(
      'transaction_id'
    ))
    ->condition('t.order_id', $order_id)
    ->condition('t.payment_method', 'keyclient')
    ->condition('t.status', 'failure')
    ->execute()
    ->rowCount();

  return COMMERCE_KEYCLIENT_MAX_ATTEMPTS - $results;
}
