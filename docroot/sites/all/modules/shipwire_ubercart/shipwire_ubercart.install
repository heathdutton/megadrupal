<?php

/**
 * @file
 * Schema, install, uninstall, and update functions for the Shipwire Ubercart
 * module.
 */

/**
 * Implements hook_install().
 */
function shipwire_ubercart_install() {
  if (!field_info_instance('uc_order', 'shipwire_shipments', 'uc_order')) {
    $instance = array(
      'field_name' => 'shipwire_shipments',
      'entity_type' => 'uc_order',
      'label' => 'Shipwire shipment ID',
      'bundle' => 'uc_order',
    );
    field_create_instance($instance);
  }
}

/**
 * Implements hook_uninstall().
 */
function shipwire_ubercart_uninstall() {
  $instance = field_info_instance('uc_order', 'shipwire_shipments', 'uc_order');
  if ($instance) {
    field_purge_instance($instance);
    field_delete_instance($instance);
  }

  db_delete('variable')
    ->condition('name', "shipwire_ubercart_%", "LIKE")
    ->execute();
  cache_clear_all('variables', 'cache_bootstrap');
}

/**
 * Implements hook_requirements().
 */
function shipwire_ubercart_requirements($phase) {
  $requirements = array();
  if ($phase == 'runtime') {
    $ubercart_currency = variable_get('uc_currency_code', 'USD');
    $shipwire_currencies = Shipwire::getCurrencies();

    if (empty($shipwire_currencies[$ubercart_currency])) {
      $requirements[] = array(
        'title' => t('Ubercart currency not supported'),
        'value' => $ubercart_currency,
        'description' => t('Ubercart store is currently using @currency which'
          . ' is not supported by Shipwire Ubercart. Please choose another'
          . ' currency or disable the Shipwire Ubercart module. Supported'
          . ' currencies include: @currencies.', array(
            '@currency' => $ubercart_currency,
            '@currencies' => implode(', ', $shipwire_currencies),
          )
        ),
        'severity' => REQUIREMENT_ERROR,
      );
    }
  }
  return $requirements;
}

/**
 * Shipwire Ubercart update 7.x-1.1
 *
 * Deletes rules_shipwire_ubercart_fullfill_order rule which is replaced by
 * rules_shipwire_ubercart_fulfill_order. This fixes name typo (ful-l-fill)
 * and uses different conditions.
 */
function shipwire_ubercart_update_7110() {
  drupal_load('module', 'rules');
  $rule = rules_config_load('rules_shipwire_ubercart_fullfill_order');
  if ($rule) {
    $id = array($rule->id);
    rules_config_delete($id);
    return t('Rule @label deleted', array('@label' => $rule->label));
  }
}

/**
 * Shipwire Ubercart update 7.x-1.2
 *
 * Regenerate rule rules_shipwire_ubercart_fulfill_order due to name change of
 * condition shipwire_ubercart_rules_order_first_paid_in_full. Fix incorrect
 * status of shipwire shipments set as 'shipped' when should have been set as
 * 'submitted'.
 */
function shipwire_ubercart_update_7120() {
  $ret_array = array();
  drupal_load('module', 'rules');
  $rule_names = array(
    'rules_shipwire_ubercart_fulfill_order',
    'rules_shipwire_ubercart_update_inventory_after_order_fulfilled'
  );
  foreach ($rule_names as $rule_name) {
    $rule = rules_config_load($rule_name);
    if ($rule) {
      $id = array($rule->id);
      if ($rule->hasStatus(ENTITY_OVERRIDDEN)) {
        $ret_array[] = t('Rule %label settings have changed and your rule has'
          . ' been customized. Please manually check the rule and update condition'
          . ' %condition.', array(
          '%label' => $rule->label,
          '%condition' => t('When an order is first paid in full')));
      }
      else {
        rules_config_delete($id);
        $ret_array[] = t('Rule @label regenerated.', array('@label' => $rule->label));
      }
    }
  }

  // Fix shipments status set to 'shipped' when really it was 'submitted'.
  $result = db_update('shipwire_shipments')
    ->fields(array('status' => 'submitted'))
    ->condition('status', 'shipped')
    ->condition('date_shipped', 0)
    ->condition('type', 'uc_order')
    ->execute();
  if ($result) {
    $ret_array[] = t('Fixed shipment status incorrectly set as shipped for @count shipments.', array('@count' => $result));
  }
  if (!empty($ret_array)) {
    return implode('  ', $ret_array);
  }
}
