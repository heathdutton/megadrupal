<?php

use Drupal\cointools\CoinTools;

/**
 * @file
 * Defines coin address field type.
 */

// Load all Field module hooks for Coin Tools.
require_once 'cointools.field.inc';

/**
 * Implements hook_theme().
 */
function cointools_theme() {
  return array(
    'cointools_qr' => array(
      'variables' => array(
        'address' => NULL,
        'amount' => 0,
        'label' => '',
        'message' => '',
        'width' => 200,
        'height' => 200,
      ),
    ),
    'cointools_amount' => array(
      'variables' => array(
        'amount' => 1e8,
        'unit' => 'auto',
        'unit_display' => TRUE,
        'decimal_places' => NULL,
        'fiat' => FALSE,
        'fiat_decimal_places' => NULL,
        'explicit' => FALSE,
        'code' => '',
      ),
    ),
    'cointools_transaction' => array(
      'variables' => array(
        'txn_id' => '',
      ),
    ),
  );
}

/**
 * Renders a Bitcoin QR address.
 *
 * @param $variables
 *   An associative array containing:
 *   - address: Address to render.
 *
 * @return string
 *   HTML of rendered address.
 */
function theme_cointools_qr(array $variables) {
  // Load phpqrcode library.
  require_once composer_manager_vendor_dir() . '/t0k4rt/phpqrcode/qrlib.php';
  // Create bitcoin URI.
  $bitcoin_uri = 'bitcoin:' . $variables['address'];
  $query = array();
  if ($variables['amount'] > 0) {
    $query['amount'] = CoinTools::satoshiToBitcoin($variables['amount']);
  }
  if ($variables['label'] !== '') {
    $query['label'] = $variables['label'];
  }
  if ($variables['message'] !== '') {
    $query['message'] = $variables['message'];
  }
  if (count($query)) {
    $bitcoin_uri .= '?' . drupal_http_build_query($query);
  }
  // Create QR code PNG.
  ob_start();
  \QRcode::png($bitcoin_uri, FALSE, QR_ECLEVEL_L, 1);
  $png = ob_get_clean();
  // \QRcode::png sets Content-Type to image/png. Set it back to text/html.
  header('Content-Type: text/html');
  // Create data URI.
  $data_uri = 'data:image/png;base64,' . base64_encode($png);
  // Create <img> tag.
  $attributes = array(
    'src' => $data_uri,
    'width' => $variables['width'],
    'height' => $variables['height'],
    'class' => array('qrcode'),
    'alt' => t("Bitcoin address: @address", array('@address' => $variables['address'])),
  );
  $img = '<img' . drupal_attributes($attributes) . ' />';
  // Create render array.
  $link = array(
    '#type' => 'link',
    '#title' => $img,
    '#href' => $bitcoin_uri,
    '#options' => array(
      'external' => TRUE,
      'html' => TRUE,
    ),
  );
  return drupal_render($link);
}

/**
 * Renders a Bitcoin amount.
 *
 * @param $variables
 *   An associative array containing:
 *   - amount: Amount to render.
 *
 * @return string
 *   HTML of rendered amount.
 */
function theme_cointools_amount(array $variables) {
  global $user;
  $units = cointools_units();
  list ($unit, $amount) = cointools_unit_amount($variables['amount'], $variables['unit']);

  $rendered = $variables['unit_display'] ? ($units[$unit] . '<span style="white-space:nowrap;">&thinsp;</span>') : '';
  $rendered .= (is_numeric($variables['decimal_places'])) ? number_format($amount, $variables['decimal_places']) : cointools_number_format($amount);

  if ($variables['fiat']) {
    if (!$variables['code']) {
      $variables['code'] = isset($user->data['cointools_fiat.currency']) ? $user->data['cointools_fiat.currency'] : variable_get('cointools_fiat.default_currency');
    }
    if ($variables['code']) {
      $fiat_amount = [
        '#theme' => 'cointools_fiat_amount',
        '#amount' => $variables['amount'],
        '#code' => $variables['code'],
        '#explicit' => $variables['explicit'],
        '#decimal_places' => $variables['fiat_decimal_places'],
      ];
      $rendered .= '&emsp;≈&emsp;' . drupal_render($fiat_amount);
    }
  }

  return $rendered;
}

function cointools_number_format($number) {
  $components = explode('.', $number);
  $output = number_format($components[0]);
  $output .= isset($components[1]) ? ('.' . $components[1]) : '';
  return $output;
}

function cointools_units() {

  $units = array(
    'µBTC' => 'µ',
    'mBTC' => '<span style="text-transform: lowercase;">m</span>',
    'BTC' => '',
  );

  foreach ($units as &$unit) {
    $unit .= '<span class="bitcoin-font">&#59392;</span>';
  }

  return $units;
}

function cointools_unit_amount($amount, $unit = 'auto') {

  if (($unit == 'auto') && ($amount == 0)) {
    return array('BTC', 0);
  }

  $new_amount = $amount / 100;

  foreach (array_keys(cointools_units()) as $current_unit) {
    $amount = $new_amount;
    if ($unit == 'auto') {
      if (abs($amount) < 1000) {
        break;
      }
    }
    else {
      if ($current_unit == $unit) {
        break;
      }
    }
    $new_amount = $amount / 1000;
  }

  return array($current_unit, $amount);
}

/**
 * Renders a Bitcoin transaction.
 *
 * @param $variables
 *   An associative array containing:
 *   - txn_id: ID if transaction to render.
 *
 * @return string
 *   HTML of rendered transaction.
 */
function theme_cointools_transaction(array $variables) {
  try {
    $client = cointools_daemon_connect(FALSE);
  }
  catch (\Exception $e) {
    return;
  }

  $info = $client->getTransaction($variables['txn_id']);

  $rows[] = array(t("ID"), '<span class="cointools-monospace">' . $info['txid'] . '</span>');
  $amount = array(
    '#theme' => 'cointools_amount',
    '#amount' => CoinTools::bitcoinToSatoshi($info['amount']),
    '#fiat' => TRUE,
  );
  $rows[] = array(t("Amount"), drupal_render($amount));
  $rows[] = array(t("Confirmations"), $info['confirmations']);

  if (isset($info['blockhash'])) {
    $rows[] = array(t("Block Hash"), '<span class="cointools-monospace">' . $info['blockhash'] . '</span>');
    $rows[] = array(t("Block Index"), $info['blockindex']);
    $rows[] = array(t("Block Time"), format_date($info['blocktime']));
  }

  $rows[] = array(t("Time"), format_date($info['time']));
  $rows[] = array(t("Time Received"), format_date($info['timereceived']));

  $rawtransaction = $client->decodeRawTransaction($info['hex']);
  foreach ($rawtransaction['vin'] as $id => $vin) {

    if(module_exists('cointools_daemon')) {
      $txid = l($vin['txid'], 'admin/bitcoin/transaction/' . $vin['txid']);
    }
    else {
      $txid = $vin['txid'];
    }

    $rows[] = array(t("Input"), '<span class="cointools-monospace">' . $txid . ' / ' . $vin['vout'] . '</span>');
  }

  foreach ($rawtransaction['vout'] as $vout) {
    $rows[] = array(
      t("Output") . ' #' . $vout['n'] . ' ' . t("Address"),
      '<span class="cointools-monospace">' . $vout['scriptPubKey']['addresses'][0] . '</span>',
    );
    $amount = array(
      '#theme' => 'cointools_amount',
      '#amount' => CoinTools::bitcoinToSatoshi($vout['value']),
      '#fiat' => TRUE,
    );
    $rows[] = array(
      t("Output") . ' #' . $vout['n'] . ' ' . t(" Amount"),
      drupal_render($amount),
    );
  }

  $table = array(
    '#type' => 'table',
    '#rows' => $rows,
  );

  return drupal_render($table);
}

/**
 * Implements hook_filter_info().
 */
function cointools_filter_info() {
  $filters['cointools_symbol'] = [
    'title' => t("Convert &bitcoin; into <span class=\"bitcoin-font\">&#59392;</span>"),
    'process callback' => '_cointools_filter_symbol',
    'tips callback' => '_cointools_filter_symbol_tips',
  ];
  return $filters;
}

/**
 * Implements callback_filter_process().
 */
function _cointools_filter_symbol($text, $filter) {
  return str_replace(['&bitcoin;', '&amp;bitcoin;'], '<span class="bitcoin-font">&#59392;</span>', $text);
}

/**
 * Implements callback_filter_tips().
 */
function _cointools_filter_symbol_tips($filter, $format, $long = FALSE) {
  return t("Convert &bitcoin; into <span class=\"bitcoin-font\">&#59392;</span>.");
}
