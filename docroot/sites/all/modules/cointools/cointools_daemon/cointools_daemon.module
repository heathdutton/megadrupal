<?php

use Symfony\Component\EventDispatcher\EventDispatcher;
use Guzzle\Common\Exception\RuntimeException as GuzzleRuntimeException;
use GuzzleHttp\Exception\ServerException as GuzzleServerException;
use Graze\Guzzle\JsonRpc\JsonRpcClient;
use Drupal\cointools_daemon\Client as DaemonClient;
use Drupal\cointools\CoinTools;
use BitWasp\BitcoinLib\BitcoinLib;


/**
 * Implements hook_permission().
 */
function cointools_daemon_permission() {
  return [
    'administer cointools_daemon' => [
      'title' => t("Administer Coin Tools Daemon"),
      'restrict access' => TRUE,
    ],
    'access cointools_daemon node status' => [
      'title' => t("Access node status"),
    ],
    'access blockchain browser' => [
      'title' => t("Access blockchain browser"),
    ],
    'access cointools_daemon hotwallet' => [
      'title' => t("Access hot-wallet"),
    ],
    'spend from cointools_daemon hotwallet' => [
      'title' => t("Spend from hot-wallet"),
      'restrict access' => TRUE,
    ],
  ];
}

/**
 * Implements hook_menu().
 */
function cointools_daemon_menu() {
  $items = [];

  $items['admin/config/cointools'] = [
    'title' => "Coin Tools",
    'description' => "Configure coin tools.",
    'page callback' => '\Drupal\system\Controller\SystemController::systemAdminMenuBlockPage',
    'access arguments' => ['administer cointools_daemon'],
  ];

  $items['admin/config/cointools/daemon'] = [
    'title' => "bitcoind settings",
    'description' => "Configure communication with bitcoind.",
    'page callback' => 'drupal_get_form',
    'page arguments' => ['cointools_daemon_admin_form'],
    'file' => 'cointools_daemon.admin.inc',
    'access arguments' => ['administer cointools_daemon'],
  ];

  $items['admin/reports/bitcoind'] = [
    'title' => "Bitcoin daemon",
    'description' => "Status report from Bitcoin daemon.",
    'page callback' => 'cointools_daemon_status',
    'access arguments' => ['access cointools_daemon node status'],
  ];

  $items['admin/bitcoin'] = [
    'title' => "Bitcoin",
    'description' => "Bitcoin transactions.",
    'page callback' => 'bitcoin_daemon_transactions',
    'access arguments' => ['access cointools_daemon hotwallet'],
    'weight' => 6,
  ];

  $items['admin/bitcoin/send'] = [
    'type' => MENU_LOCAL_ACTION,
    'title' => "Send",
    'page callback' => 'drupal_get_form',
    'page arguments' => ['cointools_daemon_send_form'],
    'access arguments' => ['spend from cointools_daemon hotwallet'],
    'weight' => 0,
  ];

  $items['admin/bitcoin/receive'] = [
    'type' => MENU_LOCAL_ACTION,
    'title' => "Receive",
    'page callback' => 'drupal_get_form',
    'page arguments' => ['cointools_daemon_receive_form'],
    'access arguments' => ['access cointools_daemon hotwallet'],
    'weight' => 1,
  ];

  $items['admin/bitcoin/transaction/%'] = [
    'title' => "Bitcoin Transaction",
    'page callback' => 'bitcoin_daemon_transaction',
    'page arguments' => [3],
    'access arguments' => ['access blockchain browser'],
  ];

  return $items;
}

/**
 * Displays the site status report.
 *
 * @return string
 *   The current status of bitcoind.
 */
function cointools_daemon_status() {
  try {
    $client = DaemonClient::factory();
  }
  catch (\Exception $exception) {
    return '';
  }

  $info = $client->request('getinfo');

  if (isset($info['version'])) {
    $rows[] = array(t("Version"), $info['version']);
  }
  if (isset($info['protocolversion'])) {
    $rows[] = array(t("Protocol version"), $info['protocolversion']);
  }
  if (isset($info['walletversion'])) {
    $rows[] = array(t("Wallet version"), $info['walletversion']);
  }
  if (isset($info['balance'])) {
    $amount = array(
      '#theme' => 'cointools_amount',
      '#amount' => CoinTools::bitcoinToSatoshi($info['balance']),
      '#fiat' => TRUE,
    );
    $rows[] = array(t("Wallet balance"), drupal_render($amount));
  }
  $fee = [
    '#theme' => 'cointools_amount',
    '#amount' => $client->estimateFee(),
    '#fiat' => TRUE,
  ];
  $rows[] = [t("Estimated fee / kB to get in next block"), drupal_render($fee)];
  if (isset($info['blocks'])) {
    $rows[] = array(t("Blocks"), $info['blocks']);
  }
  $time = $client->timeSinceLastBlock();
  $rows[] = [t("Time since last block"), format_interval($time, 2)];
  $time = $client->averageTimeUntilNextBlock();
  $rows[] = [t("Average time until next block"), format_interval($time, 2)];
  if (isset($info['timeoffset'])) {
    $rows[] = array(t("Time offset"), $info['timeoffset']);
  }
  if (isset($info['connections'])) {
    $rows[] = array(t("Connections"), $info['connections']);
  }
  if (isset($info['proxy'])) {
    $rows[] = array(t("Proxy"), ($info['proxy'] == '') ? t("No") : $info['proxy']);
  }
  if (isset($info['difficulty'])) {
    $rows[] = array(t("Difficulty"), $info['difficulty']);
  }
  $rows[] = [t("Network hash rate"), round($client->request('getnetworkhashps') / 1e15) . ' PH/s'];
  if (isset($info['testnet'])) {
    $rows[] = array(t("Testnet"), ($info['testnet'] == '') ? t("No") : t("Yes"));
  }
  if (isset($info['keypoololdest'])) {
    $rows[] = array(t("Key pool oldest"), format_date($info['keypoololdest']));
  }
  if (isset($info['keypoolsize'])) {
    $rows[] = array(t("Key pool size"), $info['keypoolsize']);
  }
  if (isset($info['paytxfee'])) {
    $amount = array(
      '#theme' => 'cointools_amount',
      '#amount' => CoinTools::bitcoinToSatoshi($info['paytxfee']),
    );
    $rows[] = array(t("Pay transaction fee"), drupal_render($amount));
  }
  if (isset($info['relayfee'])) {
    $amount = array(
      '#theme' => 'cointools_amount',
      '#amount' => CoinTools::bitcoinToSatoshi($info['relayfee']),
    );
    $rows[] = array(t("Minimum relay fee"), drupal_render($amount));
  }
  if (isset($info['errors'])) {
    $rows[] = array(t("Errors"), $info['errors']);
  }

  return array(
    '#theme' => 'table',
    '#rows' => $rows,
  );
}

/**
 * Displays the bitcoin transactions.
 *
 * @return string
 *   The transactions.
 */
function bitcoin_daemon_transactions() {
  $num_per_page = 100;
  try {
    $client = DaemonClient::factory();
  }
  catch (\Exception $exception) {
    return '';
  }
  $count = count($client->request('listtransactions', ['', 2147483647]));
  $page = pager_default_initialize($count, $num_per_page);
  $transactions = $client->request('listtransactions', ['', $num_per_page, $page * $num_per_page]);
  $rows = [];

  foreach (array_reverse($transactions) as $transaction) {
    $amount = array(
      '#theme' => 'cointools_amount',
      '#amount' => abs(CoinTools::bitcoinToSatoshi($transaction['amount'])),
      '#fiat' => FALSE,
      '#unit' => 'mBTC',
      '#unit_display' => FALSE,
      '#decimal_places' => 2,
    );
    $fee = array(
      '#theme' => 'cointools_amount',
      '#amount' => abs(CoinTools::bitcoinToSatoshi(isset($transaction['fee']) ? $transaction['fee'] : 0)),
      '#fiat' => FALSE,
      '#unit' => 'mBTC',
      '#unit_display' => FALSE,
      '#decimal_places' => 2,
    );
    if ($transaction['confirmations'] < 0) {
      $c = 'x';
    }
    elseif ($transaction['confirmations'] > 0) {
      $c = 'C';
    }
    else {
      $c = '';
    }
    $rows[] = array(
      'data' => array(
        $c,
        l(format_date($transaction['time'], 'short'), 'admin/bitcoin/transaction/' . $transaction['txid']),
        $transaction['category'],
        '<span class="cointools-monospace">' . $transaction['address'] . '</span>',
        array(
          'data' => isset($transaction['fee']) ? drupal_render($fee) : '',
          'style' => 'text-align: right;',
        ),
        array(
          'data' => drupal_render($amount),
          'style' => 'text-align: right;',
        ),
      ),
      'style' => 'background-color: #' . (($transaction['category'] == 'receive') ? 'e9fde9' : 'fff1f2'),
    );
  }

  $units = cointools_units();

  $header = array(
    '',
    t("Time"),
    t("Type"),
    array(
      'data' => t("Receiving address"),
      'class' => array(RESPONSIVE_PRIORITY_LOW),
    ),
    array(
      'data' => t("Fee") . ' (' . $units['mBTC'] . ')',
      'style' => 'text-align: right;',
      'class' => array(RESPONSIVE_PRIORITY_MEDIUM),
    ),
    array(
      'data' => t("Amount") . ' (' . $units['mBTC'] . ')',
      'style' => 'text-align: right;',
    ),
  );

  $output = array();
  $output['balance'] = $client->balanceItem();
  $output['table'] = array('#theme' => 'table', '#rows' => $rows, '#header' => $header);
  $output['pager'] = array('#theme' => 'pager');

  return $output;
}

/**
 * Displays the bitcoin transactions.
 *
 * @return string
 *   The transactions.
 */
function bitcoin_daemon_transaction($txn_id) {
  // Check we are connected early so error message can appear.
  // TODO: Implement connection caching.
  try {
    $client = DaemonClient::factory();
  }
  catch (\Exception $e) {
    return '';
  }
  return array(
    '#type' => 'cointools_transaction',
    '#txn_id' => $txn_id,
  );
}

/**
 * Generates send form.
 */
function cointools_daemon_send_form(array $form, array &$form_state) {
  drupal_set_title(t("Send Bitcoin"));
  $values = isset($form_state['storage']['values']) ? $form_state['storage']['values'] : array();
  $form['actions']['#type'] = 'actions';

  if (!isset($form_state['storage']['confirm'])) {
    try {
    $client = DaemonClient::factory();
    }
    catch (\Exception $exception) {
      return;
    }
    $form['balance'] = $client->balanceItem();
    $units = cointools_units();
    foreach ($units as $key => &$value) {
      $value = $key;
    }

    $form['unit'] = array(
      '#type' => 'select',
      '#title' => "Amount to send",
      '#options' => $units,
      '#default_value' => isset($values['unit']) ? $values['unit'] : 'mBTC',
      '#required' => TRUE,
    );

    $form['quantity'] = array(
      '#type' => 'numberfield',
      '#step' => 'any',
      '#min' => 0,
      '#default_value' => isset($values['quantity']) ? $values['quantity'] : NULL,
      '#required' => TRUE,
    );

    $form['address'] = array(
      '#type' => 'textfield',
      '#title' => "Destination address",
      '#default_value' => isset($values['address']) ? $values['address'] : NULL,
      '#required' => TRUE,
      '#size' => 34,
    );

    $form['actions']['send'] = array(
      '#type' => 'submit',
      '#value' => "Send",
      '#validate' => array('cointools_daemon_send_form_validate_send'),
      '#submit' => array('cointools_daemon_send_form_submit_send'),
    );
  }
  else {
    $form['amount'] = array(
      '#type' => 'item',
      '#title' => "Amount",
      'amount' => array(
        '#theme' => 'cointools_amount',
        '#amount' => $form_state['storage']['amount'],
        '#fiat' => TRUE,
      ),
    );

    $form['address'] = array(
      '#type' => 'item',
      '#title' => "Address",
      '#markup' => $values['address'],
    );

    $form['actions']['yes'] = array(
      '#type' => 'submit',
      '#value' => "Confirm",
      '#submit' => array('cointools_daemon_send_form_submit_confirm'),
    );

    $form['actions']['no'] = array(
      '#type' => 'submit',
      '#value' => "Cancel",
      '#submit' => array('cointools_daemon_send_form_submit_cancel'),
    );
  }

  return $form;
}

/**
 * Validate handler for send form send button.
 */
function cointools_daemon_send_form_validate_send(array &$form, array &$form_state) {
  if (!CoinTools::validateAddress($form_state['values']['address'])) {
    form_set_error('address', t("Bitcoin address is invalid."));
  }
}

/**
 * Submit handler for send form send button.
 */
function cointools_daemon_send_form_submit_send(array &$form, array &$form_state) {
  $form_state['storage']['values'] = $form_state['values'];
  $units = array_keys(cointools_units());
  $exp = array_search($form_state['values']['unit'], $units);
  $form_state['storage']['amount'] = $form_state['values']['quantity'] * pow(1000, $exp) * 100;
  $form_state['storage']['confirm'] = TRUE;
  $form_state['rebuild'] = TRUE;
}

/**
 * Submit handler for send form confirm button.
 */
function cointools_daemon_send_form_submit_confirm(array &$form, array &$form_state) {
  $values = $form_state['storage']['values'];

  $amount_render = array(
    '#theme' => 'cointools_amount',
    '#amount' => $form_state['storage']['amount'],
    '#fiat' => TRUE,
  );
  $amount = drupal_render($amount_render);

  try {
    $client = DaemonClient::factory();
  }
  catch (\Exception $exception) {
    return;
  }

  try {
    $txn_id = $client->request('sendtoaddress', [$values['address'], CoinTools::satoshiToBitcoin($form_state['storage']['amount'])]);
  }
  catch (GuzzleServerException $e) {
    unset($form_state['storage']['confirm']);
    $form_state['rebuild'] = TRUE;
    $message = "Failed to send " . $amount . " to " . $values['address'];
    drupal_set_message($message, 'error');
    return;
  }

  $message = "Sent " . $amount . " to " . $values['address'];
  $path = 'admin/bitcoin/transaction/' . $txn_id;
  drupal_set_message(l($message, $path, array('html' => TRUE)));
}

/**
 * Submit handler for send form cancel button.
 */
function cointools_daemon_send_form_submit_cancel(array &$form, array &$form_state) {
  unset($form_state['storage']['confirm']);
  $form_state['rebuild'] = TRUE;
}

/**
 * Generates receive form.
 */
function cointools_daemon_receive_form(array $form, array &$form_state) {
  drupal_set_title(t("Receive Bitcoin"));
  try {
    $client = DaemonClient::factory(FALSE);
  }
  catch (\Exception $exception) {
    return;
  }

  if (isset($form_state['values'])) {
    $values = $form_state['values'];
    $address = $client->request('getnewaddress');

    $form['address'] = array(
      '#markup' => '<span class="cointools-monospace">' . $address . '</span><br />',
    );

    if ($values['quantity'] != 0) {
      $units = array_keys(cointools_units());
      $exp = array_search($values['unit'], $units);
      $amount = $values['quantity'] * pow(1000, $exp) * 100;
      $form['amount'] = array(
        '#theme' => 'cointools_amount',
        '#amount' => $amount,
        '#fiat' => TRUE,
        '#suffix' => '</br />',
      );
    }

    $form['qr'] = array(
      '#theme' => 'cointools_qr',
      '#address' => $address,
      '#amount' => isset($amount) ? $amount : 0,
      '#label' => $values['label'],
      '#suffix' => '<hr /><br />',
    );
  }

  $form['balance'] = $client->balanceItem();

  $units = cointools_units();

  foreach ($units as $key => &$value) {
    $value = $key;
  }

  $form['unit'] = array(
    '#type' => 'select',
    '#title' => "Amount to receive",
    '#options' => $units,
    '#default_value' => 'mBTC',
  );

  $form['quantity'] = array(
    '#type' => 'numberfield',
    '#step' => 'any',
    '#min' => 0,
  );

  $form['label'] = array(
    '#type' => 'textfield',
    '#title' => "Label",
  );

  $form['actions']['#type'] = 'actions';
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => "Receive",
  );

  return $form;
}

/**
 * Submit handler for receive form.
 */
function cointools_daemon_receive_form_submit(array &$form, array &$form_state) {
  $form_state['rebuild'] = TRUE;
}

/**
 * Implements drush_hook_COMMAND().
 */
function drush_cointools_daemon_bitcoin_walletnotify($txid = '') {
  watchdog('bitcoin-walletnotify', $txid);
  module_invoke_all('bitcoin_walletnotify', $txid);
}

/**
 * Implements hook_requirements().
 */
function cointools_daemon_requirements($phase) {
  if ($phase != 'runtime') {
    return array();
  }

  try {
    $client = DaemonClient::factory(FALSE);
  }
  catch (\Exception $exception) {
    return array('cointools_daemon.connected' => array(
      'title' => t("Bitcoin: bitcoind available"),
      'value' => t("No"),
      'severity' => REQUIREMENT_ERROR,
      'description' => $exception->getMessage(),
    ));
  }

  $requirements = array();
  $info = $client->request('getinfo');
  $ok = $info['connections'] > 0;
  $requirements['cointools_daemon.connections'] = array(
    'title' => t("Bitcoin: connections"),
    'value' => $info['connections'],
    'severity' => $ok ? REQUIREMENT_OK : REQUIREMENT_ERROR,
    'description' => $ok ? NULL : t("bitcoind is not connected to the network."),
  );
  $time = $client->timeSinceLastBlock();
  $ok = $time < 3600;
  $requirements['cointools_daemon.last_block_seen'] = array(
    'title' => t("Bitcoin: time since last block"),
    'value' => format_interval($time, 2),
    'severity' => $ok ? REQUIREMENT_OK : REQUIREMENT_WARNING,
    'description' => $ok ? NULL : t("bitcoind probably needs to catch up with the network."),
  );
  $amount = array(
    '#theme' => 'cointools_amount',
    '#amount' => CoinTools::bitcoinToSatoshi($client->request('getbalance')),
    '#fiat' => TRUE,
  );
  $requirements['cointools_daemon.balance'] = [
    'title' => t("Bitcoin: wallet balance"),
    'value' => drupal_render($amount),
  ];
  if ($info['errors']) {
    $requirements['cointools_daemon.errors'] = [
      'title' => t("Bitcoind: errors"),
      'value' => $info['errors'],
      'severity' => REQUIREMENT_ERROR,
    ];
  }
  return $requirements;
}
