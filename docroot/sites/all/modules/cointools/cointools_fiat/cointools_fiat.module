<?php

use Drupal\cointools_fiat\Fiat;
use Drupal\cointools_fiat\FiatCurrencies;

/**
 * Implements hook_permission().
 */
function cointools_fiat_permission() {
  return [
    'access cointools_fiat report' => [
      'title' => t("Access report"),
    ],
    'access cointools_fiat converter' => [
      'title' => t("Access converter"),
    ],
  ];
}

/**
 * Implements hook_menu().
 */
function cointools_fiat_menu() {
  $items = [];

  $items['admin/reports/fiat'] = [
    'title' => 'Fiat',
    'description' => "Get a status report about your site's operation and any detected problems.",
    'page callback' => 'drupal_get_form',
    'page arguments' => ['cointools_fiat_fiat_form'],
    'access arguments' => ['access cointools_fiat report'],
  ];

  $items['admin/reports/fiat/convert'] = [
    'title' => 'Convert',
    'description' => "Get a status report about your site's operation and any detected problems.",
    'page callback' => 'drupal_get_form',
    'page arguments' => ['cointools_fiat_convert_form'],
    'access arguments' => ['access cointools_fiat converter'],
  ];

  return $items;
}

/**
 * Implements hook_cron().
 */
function cointools_fiat_cron() {
  Fiat::updateRates();
}

/**
 * Generates fiat form.
 */
function cointools_fiat_fiat_form(array $form, array &$form_state) {
  $currencies = FiatCurrencies::currencies();
  $rates = Fiat::getRates();
  $rows = array();

  foreach ($currencies as $code => $info) {
    if (!isset($rates[$code])) {
      continue;
    }
    $fiat_amount = array(
      '#theme' => 'cointools_fiat_amount',
      '#amount' => 1e8,
      '#code' => $code,
      '#explicit' => FALSE,
    );
    $rows[] = array(
      array(
        'data' => $code,
        'class' => array('cointools-monospace'),
      ),
      $info['label'],
      drupal_render($fiat_amount),
      array(
        'data' => number_format(1e8 / $rates[$code]),
        'style' => 'text-align: right;',
      ),
    );
  }

  $amount = array(
    '#theme' => 'cointools_amount',
  );
  $header = array(
    t("Code"),
    t("Name"),
    drupal_render($amount) . '&#8199;â‰ˆ',
    array(
      'data' => t("Satoshis"),
      'class' => array(RESPONSIVE_PRIORITY_LOW),
      'style' => 'text-align: right;',
    ),
  );

  $currencies = array(
    '#theme' => 'table',
    '#rows' => $rows,
    '#header' => $header,
    '#attributes' => array('style' => 'width: auto;'),
  );

  $text_render = ['#markup' => Fiat::currentSource()];

  $updated_timestamp = variable_get('cointools_fiat.timestamp');
  $updated_markup = t("Last updated !time ago.", array('!time' => format_interval(REQUEST_TIME - $updated_timestamp)));
  $updated_render = array('#markup' => $updated_markup);

  $form = array($currencies, $text_render, $updated_render);

  $form['actions']['#type'] = 'actions';
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => "Update now",
  );

  return $form;
}

/**
 * Submit handler for fiat form.
 */
function cointools_fiat_fiat_form_submit(array $form, array &$form_state) {
  Fiat::updateRates();
  drupal_set_message(t("Fiat exchange rates updated."));
}

/**
 * Generates converts form.
 */
function cointools_fiat_convert_form(array $form, array &$form_state) {
  global $user;

  if (isset($form_state['values'])) {
    $values = $form_state['values'];

    if ($values['quantity'] != 0) {
      $units = array_keys(cointools_units());
      $exp = array_search($values['unit'], $units);
      $amount = $values['quantity'] * pow(1000, $exp) * 100;
      $form['amount'] = array(
        '#theme' => 'cointools_amount',
        '#amount' => $amount,
        '#fiat' => TRUE,
        '#code' => $values['code'],
      );
    }
  }

  $units = cointools_units();

  foreach ($units as $key => &$value) {
    $value = $key;
  }

  $form['unit'] = array(
    '#type' => 'select',
    '#title' => "Amount",
    '#options' => $units,
    '#default_value' => 'mBTC',
    '#required' => TRUE,
  );

  $form['quantity'] = array(
    '#type' => 'numberfield',
    '#step' => 'any',
    '#min' => 0,
    '#required' => TRUE,
  );

  $form['code'] = array(
    '#type' => 'select',
    '#title' => t("Fiat currency"),
    '#options' => Fiat::currencyOptions(),
    '#default_value' => $user->data['cointools_fiat.currency'],
  );

  $form['actions']['#type'] = 'actions';
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => "Convert",
  );

  return $form;
}

/**
 * Submit handler for convert form.
 */
function cointools_fiat_convert_form_submit(array $form, array &$form_state) {
  $form_state['rebuild'] = TRUE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add the fiat currency form item to an individual user's account page.
 *
 * @see user_profile_form()
 */
function cointools_fiat_form_user_profile_form_alter(array &$form, array &$form_state) {
  $form['cointools_fiat'] = array(
    '#type' => 'details',
    '#title' => t('Bitcoin settings'),
    '#weight' => 0,
  );
  $data = $form_state['user']->data;
  $form['cointools_fiat']['cointools_fiat_currency'] = array(
    '#type' => 'select',
    '#title' => t("Fiat currency"),
    '#options' => Fiat::currencyOptions(),
    '#default_value' => isset($data['cointools_fiat.currency']) ? $data['cointools_fiat.currency'] : variable_get('cointools_fiat.default_currency'),
    '#description' => t("When a bitcoin amount is displayed the equivalent amount in the selected currency will also be displayed."),
  );
  $form['actions']['submit']['#submit'][] = 'cointools_fiat_user_profile_form_submit';
}

/**
 * Submit callback for the user profile form to save the currency setting.
 */
function cointools_fiat_user_profile_form_submit(array $form, array &$form_state) {
  user_save($form_state['user'], array('data' => array('cointools_fiat.currency' => $form_state['values']['cointools_fiat_currency'])));
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add the default currency setting on the user settings page.
 *
 * @see user_admin_settings()
 */
function cointools_fiat_form_user_admin_settings_alter(array &$form, array &$form_state) {
  $form['cointools_fiat'] = array(
    '#type' => 'details',
    '#title' => t('Coin Tools Fiat'),
    '#weight' => 0,
  );
  $form['cointools_fiat']['cointools_fiat_default_currency'] = array(
    '#type' => 'select',
    '#title' => t("Default fiat currency"),
    '#options' => Fiat::currencyOptions(),
    '#description' => t("Users' fiat currency setting will default to this currency."),
    '#default_value' => variable_get('cointools_fiat.default_currency'),
  );
  // Add submit handler to save cointools_fiat configuration.
  $form['#submit'][] = 'cointools_fiat_form_user_admin_settings_submit';
}

/**
 * Form submission handler for user_admin_settings().
 *
 * @see cointools_fiat_form_user_admin_settings_alter()
 */
function cointools_fiat_form_user_admin_settings_submit(array $form, array &$form_state) {
  variable_set('cointools_fiat.default_currency', $form_state['values']['cointools_fiat_default_currency']);
}

/**
 * Implements hook_theme().
 */
function cointools_fiat_theme() {
  return array(
    'cointools_fiat_amount' => array(
      'variables' => array(
        'amount' => 0,
        'code' => '',
        'decimal_places' => NULL,
        'explicit' => TRUE,
        'max_age' => 900,
      ),
    ),
  );
}

/**
 * Renders a Bitcoin amount as a fiat currency.
 *
 * @param $variables
 *   An associative array containing:
 *   - amount: Amount to render.
 *
 * @return string
 *   HTML of rendered amount.
 */
function theme_cointools_fiat_amount(array $variables) {
  $currencies = FiatCurrencies::currencies();
  $code = $variables['code'];
  $currency = $currencies[$code];
  // Don't get the exchange rates if the amount is 0.
  if ($variables['amount'] != 0) {
    $rates = Fiat::getRates($variables['max_age']);

    if (!isset($rates[$code])) {
      return '';
    }

    $quantity = $variables['amount'] * $rates[$code] / 1e8;
  }
  else {
    $quantity = 0;
  }

  $quantity_formatted = number_format($quantity, $variables['decimal_places'] ?: $currency['decimal_places']);

  if ($currency['symbol_after']) {
    $output = $quantity_formatted . '<span style="white-space:nowrap;">&thinsp;</span>' . $currency['symbol'];
  }
  else {
    $output = $currency['symbol'] . '<span style="white-space:nowrap;">&thinsp;</span>' . $quantity_formatted;
  }

  if ($variables['explicit'] && !$currency['symbol_distinct']) {
    $output .= '<span style="white-space:nowrap;">&thinsp;</span><span class="cointools-fiat-code">' . $code .'</span>';
  }

  return $output;
}

/**
 * Implements hook_block_info().
 */
function cointools_fiat_block_info() {
  $blocks = array(
    'current_rate' => array('info' => t("Bitcoin current rate")),
  );
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function cointools_fiat_block_configure($delta = '') {
  $form['display_source'] = [
    '#type' => 'checkbox',
    '#title' => t("Display source"),
    '#description' => t("Show the exchange rate source."),
    '#default_value' => variable_get('cointools_fiat_block_display_source', TRUE),
  ];
  return $form;
}

/**
 * Implements hook_block_save().
 */
function cointools_fiat_block_save($delta = '', $edit = array()) {
  variable_set('cointools_fiat_block_display_source', $edit['display_source']);
}

/**
 * Implements hook_block_view().
 */
function cointools_fiat_block_view($delta = '') {
  $build = [];

  $build['rate'] = [
    '#theme' => 'cointools_amount',
    '#fiat' => TRUE,
    '#prefix' => '<p>',
    '#suffix' => '</p>',
  ];

  $build['source'] = [
    '#markup' => Fiat::currentSource(),
    '#access' => variable_get('cointools_fiat_block_display_source', TRUE),
  ];

  return array('content' => $build);
}
