<?php
/**
 * @file
 * Floating Decimal module.
 */

/**
 * Implements hook_field_widget_info().
 */
function floating_decimal_field_widget_info() {
  return array(
    'floating_decimal' => array(
      'label' => t('Floating decimal'),
      'field types' => array('number_decimal'),
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function floating_decimal_field_formatter_info() {
  return array(
    'floating_decimal' => array(
      'label' => t('Floating decimal'),
      'field types' => array('number_decimal', 'number_float'),
      'settings' => array(
        'thousand_separator' => '',
        'decimal_separator' => '.',
        'scale' => -1,
        'use_fractions' => FALSE,
        'valid_denominators' => '',
        'prefix_suffix' => TRUE,
      ),
    ),
  );
}

/**
 *  Implements hook_theme().
 */
function floating_decimal_theme() {
  return array(
    'floating_decimal_format' => array(
      'variables' => array(
        'value' => NULL,
        'valid_denominators' => NULL,
        'thousand_separator' => '',
        'decimal_separator' => '.',
        'scale' => -1,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function floating_decimal_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $value = isset($items[$delta]['value']) ? $items[$delta]['value'] : '';

  // Trim the zero's and separator if necessary.
  $value = rtrim($value, '0');
  $value = rtrim($value, '.');

  // Substitute the decimal separator.
  $value = strtr($value, '.', $field['settings']['decimal_separator']);

  $element += array(
    '#type' => 'textfield',
    '#default_value' => $value,
    // Allow a slightly larger size that the field length to allow for some
    // configurations where all characters won't fit in input field.
    '#size' => $field['settings']['precision'],
    // Allow two extra characters for signed values and decimal separator.
    '#maxlength' => $field['settings']['precision'] + 2,
    // Extract the number type from the field type name for easier validation.
    '#number_type' => str_replace('number_', '', $field['type']),
  );

  // Add prefix and suffix.
  if (!empty($instance['settings']['prefix'])) {
    $prefixes = explode('|', $instance['settings']['prefix']);
    $element['#field_prefix'] = field_filter_xss(array_pop($prefixes));
  }
  if (!empty($instance['settings']['suffix'])) {
    $suffixes = explode('|', $instance['settings']['suffix']);
    $element['#field_suffix'] = field_filter_xss(array_pop($suffixes));
  }

  $element['#element_validate'][] = 'number_field_widget_validate';

  return array('value' => $element);
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function floating_decimal_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $options = array(
    ''  => t('<none>'),
    '.' => t('Decimal point'),
    ',' => t('Comma'),
    ' ' => t('Space'),
  );
  $element['thousand_separator'] = array(
    '#type' => 'select',
    '#title' => t('Thousand marker'),
    '#options' => $options,
    '#default_value' => $settings['thousand_separator'],
  );

  $element['decimal_separator'] = array(
    '#type' => 'select',
    '#title' => t('Decimal marker'),
    '#options' => array('.' => t('Decimal point'), ',' => t('Comma')),
    '#default_value' => $settings['decimal_separator'],
  );

  $element['scale'] = array(
    '#type' => 'select',
    '#title' => t('Scale'),
    '#options' => array(-1 => t('Floating')) + drupal_map_assoc(range(0, 10)),
    '#default_value' => $settings['scale'],
    '#description' => t('The number of digits to the right of the decimal.'),
  );

  $element['use_fractions'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use fractions'),
    '#default_value' => $settings['use_fractions'],
  );

  $element['valid_denominators'] = array(
    '#type' => 'textfield',
    '#title' => t('Valid denominators'),
    '#description' => t('Leave blank for any denominator.'),
    '#default_value' => $settings['valid_denominators'],
  );

  $element['prefix_suffix'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display prefix and suffix.'),
    '#default_value' => $settings['prefix_suffix'],
  );

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function floating_decimal_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();
  $values = array(
    '1234.1234567890',
    '1234.25',
    '1234.33',
    '1234.50',
    '1234.66',
    '1234.75',
    '1234.80',
    '1234.90',
  );

  foreach ($values as $value) {
    $element = floating_decimal_field_formatter_view(NULL, NULL, NULL, $instance, NULL, array(array('value' => $value)), $display);
    $summary[] = $value . ' => ' . drupal_render($element);
  }

  if ($settings['use_fractions']) {
    $summary[] = t('Display using fractions if applicable.');
    $summary[] = t('Valid denominators: (@valid_denominators).', array(
      '@valid_denominators' => $settings['valid_denominators'] ? $settings['valid_denominators'] : t('any'),
    ));
  }
  if ($settings['prefix_suffix']) {
    $summary[] = t('Display with prefix and suffix.');
  }

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 */
function floating_decimal_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];

  foreach ($items as $delta => $item) {
    $valid_denominators = $settings['use_fractions'] ? _floating_decimal_parse_valid_denominator_string($settings['valid_denominators']) : array();

    if ($settings['prefix_suffix']) {
      $prefixes = isset($instance['settings']['prefix']) ? array_map('field_filter_xss', explode('|', $instance['settings']['prefix'])) : array('');
      $suffixes = isset($instance['settings']['suffix']) ? array_map('field_filter_xss', explode('|', $instance['settings']['suffix'])) : array('');
      $prefix = (count($prefixes) > 1) ? format_plural($item['value'], $prefixes[0], $prefixes[1]) : $prefixes[0];
      $suffix = (count($suffixes) > 1) ? format_plural($item['value'], $suffixes[0], $suffixes[1]) : $suffixes[0];
    }
    $element[$delta] = array(
      '#prefix' => $prefix,
      '#suffix' => $suffix,
      '#markup' => theme('floating_decimal_format', array(
        'value' => $item['value'],
        'valid_denominators' => $valid_denominators,
        'scale' => $settings['scale'],
        'decimal_separator' => $settings['decimal_separator'],
        'thousand_separator' => $settings['thousand_separator'],
      )),
    );
  }

  return $element;
}

/**
 * Implements template_preprocess_hook().
 *
 * Calculate numerator and denomimator.
 */
function template_preprocess_floating_decimal_format(&$variables) {
  if ($variables['valid_denominators'] !== array()) {
    list ($integer, $numerator, $denominator) = _floating_decimal_fractionalize($variables['value']);
    if ($numerator && $denominator &&
      (!isset($variables['valid_denominators']) || in_array($denominator, $variables['valid_denominators']))
    ) {
      $variables['integer'] = $integer;
      $variables['numerator'] = $numerator;
      $variables['denominator'] = $denominator;
    }
  }
  $variables['formatted']['value'] = _floating_decimal_number_format(
    $variables['value'],
    $variables['scale'],
    $variables['decimal_separator'],
    $variables['thousand_separator']
  );
  $variables['formatted']['integer'] = _floating_decimal_number_format(
    $variables['value'],
    0,
    $variables['decimal_separator'],
    $variables['thousand_separator']
  );
}

/**
 * Theme function for floating decimals with fractions.
 */
function theme_floating_decimal_format($variables) {
  if (isset($variables['integer'])) {
    $frazzle_dazzle = '<sup>' . $variables['numerator'] . '</sup>&frasl;<sub>' . $variables['denominator'] . '</sub>';
    return (!empty($variables['integer']) ? $variables['formatted']['integer'] : '') . ' <span class="fraction">' . $frazzle_dazzle . '</span>';
  }
  else {
    return $variables['formatted']['value'];
  }
}

/**
 * Helper function: parse valid denominator string.
 *
 * @param string $valid_denominators_string
 *   String containing valid denominators, e.g. 1-10,15,20-24
 *
 * @return array
 *   Array of denominators.
 */
function _floating_decimal_parse_valid_denominator_string($valid_denominators_string) {
  $valid_denominators_string = trim($valid_denominators_string);
  if ($valid_denominators_string === '') {
    return NULL;
  }
  $denominators = explode(',', _floating_decimal_denominator_expand($valid_denominators_string));
  array_walk($denominators, 'trim');
  return $denominators;
}

/**
 * Helper function: Expand intervals.
 *
 * @param string $valid_denominators_string
 *   The string to expand, e.g.: 1-10,15,20-24
 *
 * @return string
 *   The original string, but with intervals expanded
 *   e.g: 1,2,3,4,5,6,7,8,9,10,15,20,21,22,23,24
 */
function _floating_decimal_denominator_expand($valid_denominators_string) {
  return preg_replace_callback('/((\d+)\-(\d+))/s', '_floating_decimal_denominator_expand_callback', $valid_denominators_string);
}

/**
 * Helper function: Expand intervals callback for preg_replace_callback().
 *
 * @param array $matches
 *   The matches from preg_replace.
 *
 * @return string
 *   The result.
 */
function _floating_decimal_denominator_expand_callback($matches) {
  $min = min($matches[2], $matches[3]);
  $max = max($matches[2], $matches[3]);
  $result = '';
  for ($i = $min; $i <= $max; $i++) {
    $result .= "$i,";
  }
  return rtrim($result, ',');
}

/**
 * Helper function: number format.
 *
 * @param string $value
 *   The value to format.
 * @param string $decimal_separator
 *   The decimal separator to use.
 *
 * @return string
 *   The formatted string.
 */
function _floating_decimal_number_format($value, $scale, $decimal_separator, $thousand_separator) {
  if ($scale >= 0) {
    $value = number_format($value, $scale, $decimal_separator, $thousand_separator);
  }
  else {
    // Format number, full scale.
    $scale = max(0, strlen($value) - ((int) strpos($value, '.')) - 1);
    $value = number_format($value, $scale, $decimal_separator, $thousand_separator);

    // Trim the zero's and separator if necessary.
    $value = rtrim($value, '0');
    $value = rtrim($value, $decimal_separator);
  }
  return $value;
}

/**
 * Helper function for converting the decimal part of a number to a fraction.
 *
 * Example: 12.75 becomes 12,3,4
 * Example: 12.70 becomes 12,7,10
 * Example: 12.25 becomes 12,1,4
 *
 * @param string $value
 *   The value to "fractionalize".
 *
 * @return array
 *   [integer, numerator, denominator]
 */
function _floating_decimal_fractionalize($value) {
  if (strpos($value, '.')) {
    list ($integer, $fraction) = explode('.', $value);
    $scale = strlen($fraction);
    list ($numerator, $denominator) = _floating_decimal_get_fraction((int) ltrim($fraction, '0'), pow(10, $scale));

    // infinitesimals.
    $mapping = array(
      str_repeat('3', $scale) => array(1, 3),
      str_repeat('6', $scale) => array(2, 3),
    );
    if (array_key_exists($fraction, $mapping)) {
      list ($numerator, $denominator) = $mapping[$fraction];
    }

    return array($integer, $numerator, $denominator);
  }
  else {
    return array($value, 0, 0);
  }
}

/**
 * Helper function: Greatest common divisor.
 */
function _floating_decimal_gcd($a, $b) {
  return $b ? _floating_decimal_gcd($b, $a % $b) : $a;
}

/**
 * Helper function: Least common multiple fraction.
 */
function _floating_decimal_get_fraction($value, $denominator) {
  return array(
    $value / _floating_decimal_gcd($denominator, $value),
    $denominator / _floating_decimal_gcd($denominator, $value),
  );
}
