<?php

define('VIEWS_ARG_CACHE_TABLE', 'cache_views_data');

/**
 * Implements hook_views_api().
 */
function views_arg_cache_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'views_arg_cache') . '/views',
  );
}

/**
 * Flush the cache of a given view based on display and args
 * 
 * @param $view
 *   The name of the view, or view object
 * @param $display
 *   The name of the display
 * @param $args
 *   The arguments, as an array or single argument. If no args are provided
 *   the entire cache for this view and display will be flushed
 */
function views_arg_cache_flush($view, $display, $args = NULL) {
  cache_clear_all(_views_arg_cache_get_key($view, $display, $args), VIEWS_ARG_CACHE_TABLE, TRUE);
}

/**
 * Helper function to generate the beginning of the cache key
 * 
 * This is used to start every Views cache key, so we can use it
 * as a wildcard in views_arg_cache_flush() to flush all caches 
 * for a given view, display id, and specific arguments, as opposed
 * to everything for the view and display id.
 * 
 * @param $view
 *   The name of the view, or view object
 * @param $display
 *   The display id
 * @param $args
 *   An array of arguments or a single argument provided to the view.
 *   If no arguments are provided, a key will be provided without encoded
 *   arguments, which can be used to flush the entire cache for a given
 *   view and display.
 * @return
 *   A cache key
 */
function _views_arg_cache_get_key($view, $display, $args = NULL) {
  // Determine the name of the view
  $view = is_object($view) ? $view->name : $view;
  
  // Start the cache key
  $key = "{$view}:{$display}:";
  
  // See if arguments were provided
  if ($args) {
    // If args are not an array, make it one  
    $args = is_array($args) ? $args : array($args);
  
    // Convert the args to strings
    foreach ($args as $id => $arg) {
      $args[$id] = (string) $arg;  
    }

    // Add the args to the key
    $key .= md5(serialize($args));
  }

  return $key;
}
