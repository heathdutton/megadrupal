<?php

/**
 * @file
 * Contains code for the currency iso field module.
 *
 * This module provides a custom field type, with currency ISO code as the
 * option to select.
 */

/**
 * Implements hook_field_info().
 */
function currency_iso_field_field_info() {
  return array(
    'currency_iso_code' => array(
      'label' => t('Currency ISO code'),
      'description' => t('This field provides a list of currency ISO codes.'),
      'default_widget' => 'currency_iso_code_short',
      'default_formatter' => 'currency_iso_code_default_formatter',
    ),
  );
}

/**
 * Implements hook_field_widget_info().
 */
function currency_iso_field_field_widget_info() {
  return array(
    'currency_iso_code_short' => array(
      'label' => t('Currency ISO Code'),
      'field types' => array('currency_iso_code'),
    ),
    'currency_iso_code_long' => array(
      'label' => t('Currency ISO Code with country name'),
      'field types' => array('currency_iso_code'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function currency_iso_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  module_load_include('inc', 'currency_iso_field', 'currency_iso_codes');
  switch ($instance['widget']['type']) {
    case 'currency_iso_code_short':
      $element['currency'] = array(
        '#type' => 'select',
        '#title' => t('Currency'),
        '#options' => _currency_iso_field_iso_codes_short(),
        '#default_value' => isset($items[$delta]['currency']) ? $items[$delta]['currency'] : '',
        '#required' => $element['#required'],
      );
      break;

    case 'currency_iso_code_long':
      $element['currency'] = array(
        '#type' => 'select',
        '#title' => t('Currency'),
        '#options' => _currency_iso_field_iso_codes_long('long'),
        '#default_value' => isset($items[$delta]['currency']) ? $items[$delta]['currency'] : '',
        '#required' => $element['#required'],
      );
      break;
  }
  return $element;
}

/**
 * Implements hook_field_is_empty().
 */
function currency_iso_field_field_is_empty($item, $field) {

  if (empty($item['currency'])) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_field_validate().
 */
function currency_iso_field_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    if (isset($item['currency']) && $item['currency'] != '') {
      $widget_type = $instance['widget']['type'];
      module_load_include('inc', 'currency_iso_field', 'currency_iso_codes');
      $currency_codes = ($widget_type == 'currency_iso_code_short') ? _currency_iso_field_iso_codes_short() : _currency_iso_field_iso_codes_long();
      if (!in_array($item['currency'], $currency_codes)) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'currency_iso_field_invalid_code',
          'message' => t('Invalid currency code @code', array('@code' => $item['currency'])),
        );
      }
    }
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function currency_iso_field_field_formatter_info() {
  return array(
    'currency_iso_code_default_formatter' => array(
      'label' => t('Default'),
      'field types' => array('currency_iso_code'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function currency_iso_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'currency_iso_code_default_formatter':
      // @Todo: Remove the country name and show only the currency code
      foreach ($items as $delta => $item) {
        if (isset($item['currency'])) {
          $element[$delta]['#markup'] = $item['currency'];
        }
      }
      break;
  }
  return $element;
}
