<?php
/**
 * @file
 *   Contains Commerce Finnish Payments module implementation.
 */

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_finnish_payments_commerce_payment_method_info() {
  $payment_methods = array();
  foreach (_commerce_finnish_payments_banks() as $bank_id => $bank) {
    $payment_methods['commerce_finnish_payments_' . $bank_id] = array(
      'base' => 'commerce_finnish_payments',
      'title' => t('@bank online payment', array('@bank' => $bank['title'])),
      'description' => t('Finnish online payment bank.'),
      'active' => TRUE,
      'terminal' => FALSE,
      'offsite' => TRUE,
      'callbacks' => array(
        'settings_form' => 'commerce_finnish_payments_settings_form_' . $bank_id,
      ),
      'file' => 'includes/banks/' . $bank_id . '.inc',
    );
  }
  return $payment_methods;
}

/**
 * Payment method callback which is called by wrapper method callback.
 *
 * @param $settings
 *   Default settings provided either from rules or by bank specific
 *   callback function.
 * @param $receiver
 *   Boolean value indicating that does bank need receiver information.
 */
function commerce_finnish_payments_settings_form($settings = NULL, $receiver = FALSE) {
  
  // Merge the defaults to the settings array
  $settings = (array) $settings + array(
    'reference' => array(
      'base' => '1000',
      'padding' => '0',
    ),
    'public' => '',
    'private' => '',
    'receiver' => array(
      'name' => '',
      'account' => '',
    ),
  );
  
  $form = array();
  $form['reference'] = array(
  	'#type' => 'fieldset',
    '#title' => t('Reference number generator'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#weight' => -9,
  );
  $form['reference']['base'] = array(
    '#type' => 'textfield',
    '#title' => t('Base number'),
    '#required' => TRUE,
    '#default_value' => $settings['reference']['base'],
    '#description' => t('This is the base number used for calculating reference numbers.'),
    '#weight' => 0,
  );
  $form['reference']['padding'] = array(
    '#type' => 'textfield',
    '#title' => t('Zero padding'),
    '#required' => TRUE,
    '#default_value' => $settings['reference']['padding'],
    '#description' => t('Reference numbers will be padded with zeroes up until the given string length.'),
    '#weight' => 0,
  );
  $form['public'] = array(
    '#type' => 'textfield',
    '#title' => t('Public key'),
    '#required' => TRUE,
    '#default_value' => $settings['public'],
  );
  $form['private'] = array(
    '#type' => 'textfield',
    '#title' => t('Private key'),
    '#required' => TRUE,
    '#default_value' => $settings['private'],
  );
  
  // Some banks requires these two things
  if ($receiver === TRUE) {
    $form['receiver'] = array(
      '#type' => 'fieldset',
      '#description' => t('Some banks needs receiver information.'),
      '#title' => t('Receiver'),
    );
    $form['receiver']['name'] = array(
      '#type' => 'textfield',
      '#title' => t('Name'),
      '#default_value' => $settings['receiver']['name'],
    );
    $form['receiver']['account'] = array(
      '#type' => 'textfield',
      '#title' => t('Account number'),
      '#default_value' => $settings['receiver']['account'],
     );
  }

  return $form;
}

/**
 * Payment method callback for checkout.
 */
function commerce_finnish_payments_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  // TODO: This avoids a notice message about undefined
  // payment_details index. We need to find better solution for that.
  $form = array();
  $form['empty'] = array(
    '#type' => 'hidden',
    '#default_value' => '',
  );
  return $form;
}

/**
 * Payment method callback for checkout submission.
 */
function commerce_finnish_payments_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  $order->data['commerce_finnish_payments'] = $pane_values;
  $transaction = _commerce_finnish_payments_transaction($payment_method, $order, $charge);
  $order->data['commerce_finnish_payments']['transaction'] = $transaction;
}

/**
 * Payment method callback for redirect form.
 */
function commerce_finnish_payments_redirect_form($form, &$form_state, $order, $payment_method) {

  // Figure out gateway name from method id
  if ($method_id = $payment_method['method_id']) {
    $gateway_name = substr($method_id, strlen('commerce_finnish_payments_'));
  }

  // Make sure we have libraries loaded and gateway known
  if (!_commerce_finnish_payments_includes() && $gateway_name) {
    return array();
  }

  // Load gateway
  $gateway = _commerce_finnish_payments_get_gateway($gateway_name, $payment_method['settings']);

  $gateway->setCurrency($order->data['commerce_finnish_payments']['transaction']->currency_code);

  // Return to the previous page when payment is canceled
  $gateway->setErrorUrl(url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)));
  $gateway->setReturnUrl(url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)));

  $transaction = _commerce_finnish_payments_build_transaction($order->order_number, $order->data['commerce_finnish_payments']['transaction']->amount, $payment_method);
  $gateway->setTransaction($transaction);

  // Grav the data

  $form = array(
    '#attributes' => array('class' => array('commerce-finnish-payments-payment', 'gateway-' . $gateway_name)),
    '#action' => $gateway->getPaymentUrl(),
    'submit' => array(
      '#type' => 'submit',
      '#value' => t("Pay"),
      '#weight' => 10,
      '#attached' => array(
        'css' => array(drupal_get_path('module', 'commerce_finnish_payments') . '/css/commerce_finnish_payments.css'),
        'js' => array(drupal_get_path('module', 'commerce_finnish_payments') . '/js/commerce_finnish_payments.js'),
      ),
    ),
  );

  // Push the values to the form

  foreach ($gateway->getPaymentFields() as $name => $content) {
    $form[$name] = array(
      '#type' => 'hidden',
      '#value' => $content
    );
  }

  return $form;

}

/**
 * Payment method callback for redirect form validation. Gets called
 * when user comes back from offsite payment.
 */
function commerce_finnish_payments_redirect_form_validate($order, $payment_method) {

  _commerce_finnish_payments_includes();

  // Figure out gateway name from method id
  if ($method_id = $payment_method['method_id']) {
    $gateway_name = substr($method_id, strlen('commerce_finnish_payments_'));
  }

  $gateway = _commerce_finnish_payments_get_gateway($gateway_name, $payment_method['settings']);

  $gateway->setCurrency($order->data['commerce_finnish_payments']['transaction']->currency_code);

  // Return to the previous page when payment is canceled
  $gateway->setErrorUrl(url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)));
  $gateway->setReturnUrl(url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)));

  $gateway->setTransaction(_commerce_finnish_payments_build_transaction($order->order_number, $order->data['commerce_finnish_payments']['transaction']->amount, $payment_method));

  // Log validation request
  watchdog('commerce_finnish_payments', 'Received callback for redirect validation with $_REQUEST: <pre>!request</pre>', array('!request' => check_plain(print_r($_REQUEST, 1))), WATCHDOG_INFO);

  // Load fresh copy of $order and save $_REQUEST data
  if ($order = commerce_order_load($order->order_id)) {
    $order->data['commerce_finnish_payments']['response'] = $_REQUEST;
    commerce_order_save($order);
  }

  if (!$gateway->isPaymentCompleted()) {
    $transaction = commerce_payment_transaction_load($order->data['commerce_finnish_payments']['$transaction']->transaction_id);
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
    commerce_payment_transaction_save($transaction);
    return FALSE;
  }

}

/**
 * Payment method callback for redirect form submission.
 */
function commerce_finnish_payments_redirect_form_submit($order, $payment_method) {
  if ($transaction = commerce_payment_transaction_load($order->data['commerce_finnish_payments']['transaction']->transaction_id)) {
    $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
    // Write down a message for transaction
    if ($bank = _commerce_finnish_payments_banks(substr($payment_method['method_id'], strlen('commerce_finnish_payments_')))) {
      if (isset($bank['message']) && is_array($bank['message'])) {
        $transaction->message = $bank['message']['message'];
        foreach ($bank['message']['variables'] as $key => $value) {
          if (isset($order->data['commerce_finnish_payments']['response'][$value])) {
            $transaction->message_variables[$key] = $order->data['commerce_finnish_payments']['response'][$value];
          }
        }
      }
    }
    commerce_payment_transaction_save($transaction);
  }
}

/**
 * Helper function which include required libraries.
 * 
 * @return
 *   A path to library files.
 */
function _commerce_finnish_payments_includes() {
  static $included = false;

  if ($included)
    return;

  $included = true;

  $lib = drupal_system_listing('/^fpiapi.php$/', 'libraries');
  if ($lib['fpiapi']) {
    include $lib['fpiapi']->uri;
  } else {
    drupal_set_message(t("commerce_finnish_payments is missing a critical library - see the modules "
      . "README.txt for more information and installation instructions."), "warning");
    return false;
  }
  $path = dirname($lib['fpiapi']->uri);
  return $path;
}

/**
 * Helper function which returns all supported banks and their details.
 *
 * @param $bank_id
 *   Optional string. The ID of the bank to be returned. Example 'tapiola'.
 * 
 * @return
 *   Associative array containing bank(s) details. Will return FALSE if
 *   $bank_id is specified and bank was not found,
 */
function _commerce_finnish_payments_banks($bank_id = NULL) {
  $base = '1000';
  $padding = '0';
  $banks = array(
    'aktiasppop' => array(
      'title' => 'Aktia',
      'default_settings' => array(
        'reference' => array(
          'base' => $base,
          'padding' => $padding,
        ),
        'public' => '0000000000',
        'private' => '11111111111111111111',
        'receiver' => FALSE,
      ),
      'message' => array(
        'message' => t('Return paid: @return_paid, return stamp: @return_stamp'),
        'variables' => array('@return_paid' => 'NET_RETURN_PAID', '@return_stamp' => 'NET_RETURN_STAMP'),
      ),
    ),
    'handelsbanken' => array(
      'title' => 'Handelsbanken',
      'default_settings' => array(
        'reference' => array(
          'base' => $base,
          'padding' => $padding,
        ),
        'public' => '0000000000',
        'private' => '11111111111111111111',
        'receiver' => FALSE,
      ),
      'message' => array(
        'message' => t('Return paid: @return_paid, return stamp: @return_stamp'),
        'variables' => array('@return_paid' => 'NET_RETURN_PAID', '@return_stamp' => 'NET_RETURN_STAMP'),
      ),
    ),
    'luottokunta' => array(
      'title' => 'Luottokunta',
      'default_settings' => array(
        'reference' => array(
          'base' => $base,
          'padding' => $padding,
        ),
        'public' => '',
        'private' => '',
        'receiver' => FALSE,
      ),
    ),
    'nordea' => array(
      'title' => 'Nordea',
      'default_settings' => array(
        'reference' => array(
          'base' => $base,
          'padding' => $padding,
        ),
        'public' => '12345678',
        'private' => 'LEHTI',
        'receiver' => array(
          'name' => '',
          'account' => '',
        ),
      ),
      'message' => array(
        'message' => t('Return paid: @return_paid, return stamp: @return_stamp'),
        'variables' => array('@return_paid' => 'RETURN_PAID', '@return_stamp' => 'RETURN_STAMP'),
      ),
    ),
    'osuuspankki' => array(
      'title' => 'Osuuspankki',
      'default_settings' => array(
        'reference' => array(
          'base' => $base,
          'padding' => $padding,
        ),
        'public' => 'Esittelymyyja',
        'private' => 'Esittelykauppiaansalainentunnus',
        'receiver' => FALSE,
      ),
      'message' => array(
        'message' => t('Return paid: @return_paid, return stamp: @return_stamp'),
        'variables' => array('@return_paid' => 'ARKISTOINTITUNNUS', '@return_stamp' => 'MAKSUTUNNUS'),
      ),
    ),
    'spankki' => array(
      'title' => 'S-Pankki',
      'default_settings' => array(
        'reference' => array(
          'base' => $base,
          'padding' => $padding,
        ),
        'public' => 'SPANKKIESHOPID',
        'private' => 'SPANKKI',
        'receiver' => array(
          'name' => 'John Doe',
          'account' => '393900-01002369',
        ),
      ),
      'message' => array(
        'message' => t('Return paid: @return_paid, return stamp: @return_stamp'),
        'variables' => array('@return_paid' => 'AAB-RETURN-PAID', '@return_stamp' => 'AAB-RETURN-STAMP'),
      ),
    ),
    'sampopankki' => array(
      'title' => 'Sampo Pankki',
      'default_settings' => array(
        'reference' => array(
          'base' => $base,
          'padding' => $padding,
        ),
        'public' => '000000000000',
        'private' => 'jumCLB4T2ceZWGJ9ztjuhn5FaeZnTm5HpfDXWU2APRqfDcsrBs8mqkFARzm7uXKd',
        'receiver' => FALSE,
      ),
    ),
    'tapiola' => array(
      'title' => 'Tapiola',
      'default_settings' => array(
        'reference' => array(
          'base' => $base,
          'padding' => $padding,
        ),
        'public' => 'TAPESHOPID',
        'private' => 'PAPUKAIJA',
        'receiver' => array(
          'name' => 'John Doe',
          'account' => '363630-01652643',
        ),
      ),
      'message' => array(
        'message' => t('Return paid: @return_paid, return stamp: @return_stamp'),
        'variables' => array('@return_paid' => 'AAB-RETURN-PAID', '@return_stamp' => 'AAB-RETURN-STAMP'),
      ),
    ),
    'alandsbanken' => array(
      'title' => 'Ålandsbanken',
      'default_settings' => array(
        'reference' => array(
          'base' => $base,
          'padding' => $padding,
        ),
        'public' => 'AABESHOPID',
        'private' => 'PAPEGOJA',
        'receiver' => array(
          'name' => 'John Doe',
          'account' => '660100-01130855',
        ),
      ),  
      'message' => array(
        'message' => t('Return paid: @return_paid, return stamp: @return_stamp'),
        'variables' => array('@return_paid' => 'AAB-RETURN-PAID', '@return_stamp' => 'AAB-RETURN-STAMP'),
      ),
    ),
  );
  if (!is_null($bank_id) && is_string($bank_id)) {
    return isset($banks[$bank_id]) ? $banks[$bank_id] : FALSE;
  }
  return $banks;
}

/**
 * Helper function which gets a gateway object saturated with the needed
 * information and configured according to the settings done in drupal.
 * 
 * @param $gateway_name
 *   The name of the gateaway.
 * @param $settings
 *   Payment method settings.
 * 
 * @return
 *   Returns gateaway object.
 */
function _commerce_finnish_payments_get_gateway($gateway_name, $settings) {
  global $language;

  // Setup gateway object and set language
  $gateway = FpiapiFactory::getGateway($gateway_name);
  $gateway->setLanguage($language->language);

  // Merge settings array with defaults, in case settings are not set
  $bank = _commerce_finnish_payments_banks($gateway_name);
  $settings = (array) $settings + $bank['default_settings'];

  // Set configuration
  $config = array(
    'publicKey' => $settings['public'],
    'privateKey' => $settings['private'],
  );
  if ($bank['default_settings']['receiver'] !== FALSE) {
    $config['accountName'] = $settings['receiver']['name'];
    $config['accountNumber'] = $settings['receiver']['account'];
  }
  $gateway->setConfiguration($config);

  return $gateway;
}

/**
 * Creates an commerce transaction for the specified charge amount.
 *
 * @param $payment_method
 *   The payment method instance object used to charge this payment.
 * @param $order
 *   The order object the payment applies to.
 * @param $charge
 *   An array indicating the amount and currency code to charge.
 *
 * @return
 *   Returns transaction object which has been created.
 */
function _commerce_finnish_payments_transaction($payment_method, $order, $charge) {
  _commerce_finnish_payments_includes();
  $transaction = commerce_payment_transaction_new($payment_method['method_id'], $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->remote_id = _commerce_finnish_payments_build_transaction($order->order_number, $charge['amount'], $payment_method)->getReferenceNumber();
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
  commerce_payment_transaction_save($transaction);
  return $transaction;
}

/**
 * Helper function for building transaction object
 * which is used by gateaway class.
 * 
 * @param $order_number
 * @param $amount
 * @param $payment_method
 * 
 * @return
 *   Returns FpiapiTransaction object.
 */
function _commerce_finnish_payments_build_transaction($order_number, $amount, $payment_method) {

  // Get default settings
  if ($bank = _commerce_finnish_payments_banks(substr($payment_method['method_id'], strlen('commerce_finnish_payments_')))) {
    $settings = (array) $payment_method['settings'] + $bank['default_settings'];
  }

  // Setup transaction
  $transaction = new FpiapiTransaction();
  $transaction->setSum($amount * 0.01);
  $transaction->setUid($order_number);
  $transaction->setReferenceBaseNumber($settings['reference']['base']);
  $transaction->setReferencePaddingLength($settings['reference']['padding']);

  return $transaction;
}
