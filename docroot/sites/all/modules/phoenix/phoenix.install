<?php
/** @file
 *
 * On module activation we achieve user resurrection process.
 */

/**
 * Implements hook_enable().
 *
 * @return type
 */
function phoenix_enable() {
  _phoenix_resurrect();
}

/**
 * Load saved user data from file and apply. Key is user ID so if there are
 * any users they will be replaced. If different user with such name already
 * exists, suffix will be added.
 *
 * @see _phoenix_save().
 */
function _phoenix_resurrect() {
  $filename = drupal_get_path('module', 'phoenix') . '/data/users.dat' ;

  if (!is_file($filename)) {
    // No recovery needed.
    return;
  }

  $data = file_get_contents($filename);
  if ((!$data) || ($users = unserialize($data)) == FALSE) {
    // Nothing to do.
    return;
  }

  foreach ($users as $account) {
    $user_by_name = user_load_by_name($account->name);
    if (($user_by_name) && ($user_by_name->uid != $account->uid)) {
      // Username has been already taken/recreate. We have to adjust our name.
      $account->name .= '_restored';
      // Lets not be paranoid here and skip logic that both names are exists...
    }
    if (user_load($account->uid, FALSE) == FALSE) {
      // The slot should be 'booked' first with something very simple, otherwise possible errors.
      $record_init = array('uid' => $account->uid, 'name' => $account->name, 'status' => $account->status);
      drupal_write_record('users', $record_init);
    }
    // Now we can save.
    if (user_save($account)) {
      watchdog('phoenix', 'Saved user #%uid with name %name',
        array('%uid' => $account->uid, '%name' => $account->name), WATCHDOG_INFO);
    }
  }

}
