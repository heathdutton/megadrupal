<?php
/**
 * @file
 * Commerce e-conomic modules for transfer of orders.
 */

/**
 * Implements hook_menu().
 */
function economic_menu() {
  $items = array();

  $items['admin/commerce/config/economic'] = array(
    'title' => 'e-conomic',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('economic_config_form', 1),
    'access callback' => 'user_access',
    'access arguments' => array('configure store'),
    'description' => 'Defines the general options for e-conomic transfer need to work',
    'file' => 'economic.admin.inc',
  );

  $items['admin/commerce/config/economic/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['admin/commerce/config/economic/test'] = array(
    'title' => 'Manual transfer (test)',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('economic_test_form', 1),
    'access callback' => '_economic_menu_access',
    'type' => MENU_LOCAL_TASK,
    'file' => 'economic.admin.inc',
  );

  $items['admin/commerce/config/economic/logs/%'] = array(
    'title' => 'Log view',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('economic_log_view_form', 5),
    'access callback' => '_economic_menu_access',
    'type' => MENU_NORMAL_ITEM,
    'file' => 'economic.admin.inc',
    'weight' => 99,
  );

  $items['admin/commerce/config/economic/invoice/%'] = array(
    'title' => 'Convert to invoice',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('economic_convert_order_to_invoice', 5),
    'access callback' => '_economic_menu_access',
    'type' => MENU_NORMAL_ITEM,
    'file' => 'economic.admin.inc',
    'weight' => 99,
  );

  $items['admin/commerce/config/economic/logs'] = array(
    'title' => 'Logs',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('economic_logs_form', 1),
    'access callback' => '_economic_menu_access',
    'type' => MENU_LOCAL_TASK,
    'file' => 'economic.admin.inc',
    'weight' => 90,
  );

  $items['admin/commerce/config/economic/rules'] = array(
    'title' => 'Rules',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('economic_rules_form', 1),
    'access callback' => '_economic_menu_access',
    'type' => MENU_LOCAL_TASK,
    'file' => 'economic.admin.inc',
    'weight' => 99,
  );

  return $items;
}

/**
 * Converts commerce defined address to human readable.
 *
 * @param array $data
 *   Array of address data  as returned from entity_metatdata_wrapper().
 *
 * @return array $formatted_data
 *   Data in a suitable format for passing to e-conomic.
 *
 * @see economic_order_transfer()
 */
function _economic_format_customer_address($data = array()) {
  $formatted_data = array();

  if (!empty($data) and is_object($data)) {
    $data = (array) $data;
  }

  if (!empty($data)) {
    foreach ($data as $field_name => $field_value) {
      switch ($field_name) {
        case "entity_context":
        case "rdf_mapping":
          break;

        default:
          if (!empty($field_value) and is_array($field_value) and !empty($field_value[LANGUAGE_NONE]['0'])) {
            $field_value = $field_value[LANGUAGE_NONE]['0'];
            switch ($field_name) {
              case "commerce_customer_address":
                $field_name = 'address';
                break;

              case "field_newsletter":
              case "field_afhentes":
              case "field_alternativ_levering":
                $field_value = ((!empty($field_value['value']) and $field_value['value'] == 1) ? 1 : 0);
                break;

            }
            if (!empty($field_value['value'])) {
              $field_value = $field_value['value'];
            }
          }

          $field_name = str_replace('field_', '', $field_name);

          $formatted_data[$field_name] = (!empty($field_value) ? $field_value : '');
          break;
      }
    }
  }

  if (!empty($formatted_data['address']['name_line'])) {
    $formatted_data['contact_name'] = $formatted_data['address']['name_line'];
  }
  else {
    $formatted_data['address']['first_name'] = (!empty($formatted_data['address']['first_name']) ? $formatted_data['address']['first_name'] : '');
    $formatted_data['contact_name'] = $formatted_data['address']['first_name'] . (!empty($formatted_data['address']['last_name']) ? ' ' . $formatted_data['address']['last_name'] : '');
  }
  $formatted_data['companyname'] = (!empty($formatted_data['companyname']) ? $formatted_data['companyname'] : '');

  return $formatted_data;
}

/**
 * Creates a correct structured commerce price array.
 *
 * @param array $commerce_price
 *   Current price array.
 *
 * @return array
 *   Formatted version of the price array.
 */
function _economic_product_price_format($commerce_price = array()) {
  $commerce_price = commerce_currency_format(
    $commerce_price[LANGUAGE_NONE][0]['amount'],
    (!empty($commerce_price[LANGUAGE_NONE][0]['currency_code']) ? $commerce_price[LANGUAGE_NONE][0]['currency_code'] : 'DKK')
  );
  return $commerce_price;
}

/**
 * Format product an array of product ids and return correct info.
 *
 * @param array $product_ids
 *   A list of product identifiers.
 *
 * @return array
 *   A products array in a format suitable for submission to e-conomic.
 */
function _economic_product_format($product_ids = array(), $return_single = FALSE) {
  $formatted_products = array();

  $product_load = commerce_product_load_multiple($product_ids);
  $node_ids = array();

  if (!empty($product_load) and is_array($product_load)) {
    foreach ($product_load as $p_row) {
      $p_row->price = _economic_product_price_format($p_row->commerce_price);
      if (!empty($p_row->field_cost_price[LANGUAGE_NONE][0]['amount'])) {
        $p_row->cost_price = _economic_product_price_format($p_row->field_cost_price);
      }
      else {
        $p_row->cost_price = 0;
      }

      $formatted_products[$p_row->product_id] = (array) $p_row;
    }
  }

  $product_view_nodes = node_load_multiple(array_keys($node_ids));
  if (!empty($product_view_nodes) and is_array($product_view_nodes)) {
    foreach ($product_view_nodes as $pv_details) {
      $formatted_products[$node_ids[$pv_details->nid]]['title'] = $pv_details->title;
    }
  }

  if ($return_single == TRUE and !empty($formatted_products)) {
    return current($formatted_products);
  }
  else {
    return $formatted_products;
  }
}

/**
 * Connnect to e-conomic webservice and return active object.
 *
 * @param array $config
 *   The account information to be used when connection to the service.
 *
 * @return object $economic
 *   The e-conomic soap object.
 */
function _economic_service_connect($config = array()) {
  if (isset($config['account'], $config['username'], $config['password'])) {
    try {
      @$economic = new EconomicHelper($config['account'], $config['username'], $config['password']);
      if (!empty($economic->connected) and $economic->connected == TRUE) {
        return $economic;
      }
    }
    catch (Exception $e) {
      return FALSE;
    }
  }
  return FALSE;
}

/**
 * Transfer commerce order to e-conomic order.
 *
 * @param array $order
 *   A Drupal commerce order array.
 */
function economic_order_transfer($order = array()) {
  /*
   * e-conomic account info defined.
   */
  $economic_account = array(
    'account' => variable_get('economic_config_account', ''),
    'username' => variable_get('economic_config_username', ''),
    'password' => variable_get('economic_config_password', ''),
    'template_id' => variable_get('economic_config_template_id', 0),
    'debitor_group_id' => variable_get('economic_config_debitor_group_id', 1),
    'debitor_payment_terms' => variable_get('economic_config_debitor_payment_terms', ''),
    'convert_to_invoice' => variable_get('economic_config_convert_to_invoice', 0),
    'debitor_anonymous_number' => variable_get('economic_config_debitor_anonymous_number', 0),
    'default_product_group' => variable_get('economic_config_default_product_group', 1),
    'debitor_field' => 'billing_' . variable_get('economic_config_debitor_field', 'phone_number'),
    'product_field_cost' => variable_get('economic_config_product_field_cost', ''),
  );

  /*
   * Product lines is stored in new array for easy access.
   */
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $product_ids = array();
  if (!empty($order_wrapper)) {
    foreach ($order_wrapper->commerce_line_items as $line_item_wrapper) {
      $line_item = $line_item_wrapper->value();
      $line_item_info[$line_item->line_item_id] = $line_item;
      $product_ids[$line_item->line_item_id] = (!empty($line_item->commerce_product[LANGUAGE_NONE][0]['product_id']) ? $line_item->commerce_product[LANGUAGE_NONE][0]['product_id'] : 0);
    }
  }

  if (!empty($product_ids)) {
    $product_info = _economic_product_format(array_values($product_ids));
    if (!empty($product_info)) {
      foreach ($product_ids as $p_item_id => $p_product_id) {
        $line_item_info[$p_item_id]->product_info = (!empty($product_info[$p_product_id]) ? $product_info[$p_product_id] : array());
      }
    }
  }

  /*
   * Order array is build.
   */

  $order_array = array(
    'comment' => '',
    'debitor_group_id' => (!empty($order->debitor_group_id) ? $order->debitor_group_id : ''),
    'order_id' => $order->order_id,
    'order_number' => $order->order_number,
    'created' => $order->created,
    'created_english' => date("Y-m-d H:i:s", $order->created),
    'delivery_date' => date("Y-m-d", $order->created),
    'total_price' => (!empty($order->commerce_order_total[LANGUAGE_NONE][0]['amount']) ? number_format(($order->commerce_order_total[LANGUAGE_NONE][0]['amount'] / 100), 2, '.', '') : 0),
    'currency_code' => (!empty($order->commerce_order_total[LANGUAGE_NONE][0]['currency_code']) ? $order->commerce_order_total[LANGUAGE_NONE][0]['currency_code'] : 'DKK'),
    'old_debitor_handle' => 0,
    'drupal_debitor_id' => 0,
    'products' => array(),
    'debitor_mail' => (!empty($order->mail) ? $order->mail : ''),
  );

  /*
   * Line items information is groups
   */

  $line_items = array();
  if (!empty($line_item_info)) {
    foreach ($line_item_info as $li_nr => $li_row) {

      $tmp_line_item = array(
        'note' => '',
        'line_item_no' => ($li_nr + 1),
        'line_item_id' => $li_row->line_item_id,
        'quantity' => round($li_row->quantity),
        'title' => (!empty($li_row->product_info['title']) ? $li_row->product_info['title'] : ''),
        'sku' => (!empty($li_row->product_info['sku']) ? $li_row->product_info['sku'] : ''),
        'price' => (!empty($li_row->commerce_unit_price[LANGUAGE_NONE][0]['amount']) ? ($li_row->commerce_unit_price[LANGUAGE_NONE][0]['amount'] / 100) : 0),
        'currency_code' => (!empty($li_row->commerce_unit_price[LANGUAGE_NONE][0]['currency_code']) ? ($li_row->commerce_unit_price[LANGUAGE_NONE][0]['currency_code']) : $order_array['currency_code']),
        'cost_price' => 0,
        'group_id' => (!empty($economic_account['default_product_group']) ? $economic_account['default_product_group'] : 0),
        'discount_percent' => 0,
      );

      if (!empty($economic_account['product_field_cost'])) {
        if (!empty($li_row->product_info[$economic_account['product_field_cost']][LANGUAGE_NONE][0]['amount'])) {
          $tmp_line_item['cost_price'] = ($li_row->product_info[$economic_account['product_field_cost']][LANGUAGE_NONE][0]['amount'] / 100);
        }
      }

      $tmp_line_item['price_excl'] = ($tmp_line_item['price'] * 0.8);
      if (empty($tmp_line_item['title']) and !empty($li_row->line_item_label)) {
        $tmp_line_item['title'] = $li_row->line_item_label;
      }
      if ($li_row->type == 'commerce_discount') {
        $tmp_line_item['title'] = 'discount';
        $tmp_line_item['sku'] = 'discount';
        $tmp_line_item['discount_percent'] = 100;
      }
      elseif (empty($tmp_line_item['sku'])) {
        switch ($li_row->type) {
          case "shipping":
            $tmp_line_item['sku'] = 100;
            break;

          default:
            $tmp_line_item['sku'] = $tmp_line_item['line_item_id'];
            break;
        }
      }

      if (!empty($tmp_line_item)) {
        $line_items[] = $tmp_line_item;
      }
    }

    if (!empty($line_items)) {
      $order_array['products'] = $line_items;
    }
  }

  $order_array['billing'] = _economic_format_customer_address($order_wrapper->commerce_customer_billing->value());

  $shipping_profile_id = $order_wrapper->commerce_customer_shipping->value();
  if (!empty($shipping_profile_id)) {
    $order_array['shipping'] = _economic_format_customer_address($shipping_profile_id);
  }

  if (empty($shipping_profile_id) or empty($order_array['shipping']['address']['thoroughfare'])) {
    $order_array['shipping'] = $order_array['billing'];
  }

  if (empty($order_array['debitor_group_id'])) {
    $order_array['debitor_group_id'] = (!empty($economic_account['debitor_group_id']) ? $economic_account['debitor_group_id'] : '');
  }

  if (empty($order_array['debitor_payment_terms'])) {
    $order_array['debitor_payment_terms'] = (!empty($economic_account['debitor_payment_terms']) ? $economic_account['debitor_payment_terms'] : '');
  }

  /*
   * Address information both billing and shipping address is fetched.
   */
  if (!empty($order_array['shipping']) or !empty($order_array['billing'])) {
    foreach (array('billing', 'shipping') as $address_type) {
      if (empty($order_array[$address_type])) {
        continue;
      }
      foreach ($order_array[$address_type] as $field_name => $field_value) {
        if (is_array($field_value)) {
          foreach ($field_value as $fv_name => $fv_value) {
            if ($fv_name == "thoroughfare") {
              $fv_name = 'address';
            }
            elseif ($fv_name == 'country' and function_exists('country_get_list')) {
              $tmp_country_list = country_get_list();
              $fv_value = (!empty($tmp_country_list[$fv_value]) ? $tmp_country_list[$fv_value] : $fv_value);
            }
            $order_array['' . $address_type . '_' . $fv_name . ''] = $fv_value;
          }
        }
        else {
          $order_array['' . $address_type . '_' . $field_name . ''] = $field_value;
        }
      }
      unset($order_array[$address_type]);
    }
  }

  if (empty($order_array['billing_email']) and !empty($order_array['debitor_mail'])) {
    $order_array['billing_email'] = $order_array['debitor_mail'];
  }

  if (!empty($order_array[$economic_account['debitor_field']])) {
    $order_array['debitor_id'] = $order_array[$economic_account['debitor_field']];
  }
  else {
    $order_array['debitor_id'] = (!empty($economic_account['debitor_anonymous_number']) ? $economic_account['debitor_anonymous_number'] : 0);
  }

  /*
   * Replace Danish prefix.
   */
  if (!empty($order_array['debitor_id'])) {
    $order_array['debitor_id'] = preg_replace('/(?mi-Us)[\\+|00]4([0-9]{1})/', '', $order_array['debitor_id'], 1);
    if (!empty($order_array['debitor_id'])) {
      $order_array['debitor_id'] = preg_replace('|(?mi-Us)([^0-9])|', '', $order_array['debitor_id']);
    }
  }

  try {
    if ($economic = _economic_service_connect($economic_account)) {
      $economic->setTemplate($economic_account['template_id']);

      /*
       * The buyer is located, if its is a returning customer or a new account
       * is created.
       */

      $debitor_handle = FALSE;
      $order_array['old_debitor_handle'] = 0;
      if (!empty($order_array['debitor_id'])) {
        $order_array['drupal_debitor_id'] = db_select('economic_debitors', 'deb')
          ->fields('deb', array('debitor_handle'))
          ->condition('deb.phone', $order_array['debitor_id'], '=')
          ->condition('deb.debitor_handle', 0, '!=')
          ->execute()
          ->fetchField();
        if (empty($order_array['drupal_debitor_id'])) {
          $order_array['old_debitor_handle'] = $economic->findDebitorById($order_array['debitor_id']);

          $order_array['drupal_debitor_id'] = 0;
          if (!empty($order_array['old_debitor_handle'])) {
            $order_array['drupal_debitor_id'] = db_select('economic_debitors', 'deb')->fields('deb', array('debitor_handle'))->condition('deb.debitor_handle', $order_array['old_debitor_handle'], '=')->execute()->fetchField();
          }

          if (empty($order_array['drupal_debitor_id'])) {
            db_insert('economic_debitors')->fields(array(
              'uid' => (!empty($order_array['billing_uid']) ? $order_array['billing_uid'] : 0),
              'phone' => (!empty($order_array['debitor_id']) ? $order_array['debitor_id'] : 0),
              'debitor_handle' => (!empty($order_array['old_debitor_handle']) ? $order_array['old_debitor_handle'] : 0),
              'created' => REQUEST_TIME,
              'last_update' => REQUEST_TIME,
              'last_order_id' => $order_array['order_id'],
            ))->execute();
          }
        }
        else {
          $order_array['old_debitor_handle'] = $order_array['drupal_debitor_id'];
        }
      }

      if (empty($order_array['old_debitor_handle'])) {
        $debitor_handle = $economic->createDebitor($order_array);
        $order_array['old_debitor_handle'] = (!empty($debitor_handle) ? $debitor_handle : 0);

        db_insert('economic_debitors')->fields(array(
          'uid' => (!empty($order_array['billing_uid']) ? $order_array['billing_uid'] : 0),
          'phone' => (!empty($order_array['debitor_id']) ? $order_array['debitor_id'] : 0),
          'debitor_handle' => (!empty($order_array['old_debitor_handle']) ? $order_array['old_debitor_handle'] : 0),
          'created' => REQUEST_TIME,
          'last_update' => REQUEST_TIME,
          'last_order_id' => $order_array['order_id'],
        ))->execute();
      }
      else {
        $debitor_handle = $economic->updateDebitor($order_array);
        $order_array['old_debitor_handle'] = (!empty($debitor_handle) ? $debitor_handle : 0);
        db_update('economic_debitors')->fields(array(
          'last_update' => REQUEST_TIME,
          'last_order_id' => $order_array['order_id'],
        ))->condition('debitor_handle', $order_array['old_debitor_handle'], '=')->execute();
      }

      if (!empty($order_array['billing_organisation_name']) and !empty($debitor_handle)) {
        $order_array['debitor_attention_handler'] = $economic->debitorContact($debitor_handle, $order_array);
      }

      /*
       * The order is transferred to e-conomic.
       */
      $order_array['economic_order_id'] = $economic->createOrder($order_array);
      if (!empty($order_array['economic_order_id'])) {
        $order->economic_order_id = $order_array['economic_order_id'];

        if (!empty($economic_account['convert_to_invoice']) and $economic_account['convert_to_invoice'] == 1) {
          $order_array['economic_invoice_id'] = $economic->upgradeOrderToInvoice($order_array['economic_order_id']);
          $order->economic_invoice_id = $order_array['economic_invoice_id'];
        }

        rules_invoke_event('economic_order_transferred', $order);

        watchdog('e-conomic', 'Order transferred to e-conomic "!id", refere: !economic_id', array(
          '!id' => $order_array['order_id'],
          '!economic_id' => $order_array['economic_order_id'],
        ), WATCHDOG_INFO, 'admin/commerce/config/economic/logs');

        if (!empty($order->test_transfer)) {
          drupal_set_message(check_plain(t('Order #!id transferred to e-conomic, refere: !economic_id', array(
            '!id' => $order_array['order_id'],
            '!economic_id' => $order_array['economic_order_id'],
          ))));
        }

      }
      else {
        watchdog('e-conomic', 'Error in transfer order id #!id, see log for details.', array(
          '!id' => $order_array['order_id'],
          '!error' => 'Missing e-conomic return order id',
        ), WATCHDOG_ERROR, l(
          t('Go to log #@log', array(
            '@log' => $economic->getLastLog(),
          )),
          'admin/commerce/config/economic/logs/' . $economic->getLastLog()
        ));
      }
    }
    else {
      drupal_set_message(t('Error: The e-conomic account is not valid or the connection to webservice is broken'), 'warning');
    }
  }
  catch (Exception $e) {
    $error_message_link = '';
    $economic_log_id = 0;

    if (!empty($economic) and $economic_log_id = $economic->getLastLog() and !empty($economic_log_id)) {
      db_update('economic_log')->fields(array(
        'request_data' => json_encode($order_array),
        'response_data' => json_encode($e),
        'last_update' => REQUEST_TIME,
        'status' => 7,
      ))->condition('log_id', $economic_log_id, '=')->execute();

      $error_message_link = l(
        t('Go to log #@log', array(
          '@log' => $economic->getLastLog(),
        )),
        'admin/commerce/config/economic/logs/' . $economic_log_id
      );

      if (!empty($order->test_transfer)) {
        drupal_set_message(check_plain(t('Error in transfer order #@id, see log #@log_id for details.', array(
          '@id' => $order_array['order_id'],
          '@log_id' => $economic_log_id,
        ))), 'error');
      }
    }
    else {
      db_insert('economic_log')->fields(array(
        'order_id' => $order_array['order_id'],
        'request_data' => json_encode($order_array),
        'response_data' => json_encode($e),
        'economic_debitor_refere' => (!empty($order_array['old_debitor_handle']) ? $order_array['old_debitor_handle'] : 0),
        'created' => REQUEST_TIME,
        'last_update' => REQUEST_TIME,
        'status' => 7,
      ))->execute();

      if (!empty($order->test_transfer)) {
        drupal_set_message(check_plain(t('Error in transfer order #!id, see log for details.', array(
          '!id' => $order_array['order_id'],
        ))), 'error');
      }
    }

    watchdog('e-conomic', 'Error in transfer order #!id, error: !error', array(
      '!id' => $order_array['order_id'],
      '!error' => $e->getMessage(),
      '!error_data' => json_encode($e),
    ), WATCHDOG_ERROR, $error_message_link);
  }
}

/**
 * Grand the user with account info access to run commands.
 *
 * @return bool
 *   Return TRUE if the account info is entered, FALSE if not.
 */
function _economic_menu_access() {
  if (user_access('configure store')) {
    $economic_account = array(
      'account' => variable_get('economic_config_account', ''),
      'username' => variable_get('economic_config_username', ''),
      'password' => variable_get('economic_config_password', ''),
    );

    if (!empty($economic_account['account']) and !empty($economic_account['username']) and !empty($economic_account['password'])) {
      return TRUE;
    }
  }

  return FALSE;
}
