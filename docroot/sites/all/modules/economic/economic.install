<?php
/**
 * @file
 * This file contains the install.
 *
 * It creates the main tabels for event log when the order is send
 * to e-conomic.
 */

/**
 * Implements hook_schema().
 */
function economic_schema() {
  $schema = array();
  $schema['economic_log'] = array(
    'description' => 'The base order transfer table for economic orders',
    'fields' => array(
      'log_id' => array(
        'description' => 'The primary identifier for the log.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'order_id' => array(
        'description' => 'Order id',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
        'default' => 0,
      ),
      'request_data' => array(
        'description' => 'Request data',
        'type' => 'text',
      ),
      'response_data' => array(
        'description' => 'Response data',
        'type' => 'text',
      ),
      'economic_order_id' => array(
        'description' => 'e-conomic order id',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
        'default' => 0,
      ),
      'economic_invoice_id' => array(
        'description' => 'e-conomic invoice id',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
        'default' => 0,
      ),
      'economic_client_refere' => array(
        'description' => 'e-conomic client refere',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'economic_debitor_refere' => array(
        'description' => 'e-conomic debitor reference',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
        'default' => 0,
      ),
      'status' => array(
        'description' => 'Status',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'last_update' => array(
        'description' => 'Last update timestamp.',
        'type' => 'int',
        'size' => 'big',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'created' => array(
        'description' => 'Created timestamp.',
        'type' => 'int',
        'size' => 'big',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
    ),
    'foreign keys' => array(
      'order_id' => array(
        'table' => 'commerce_order',
        'columns' => array('order_id' => 'order_id'),
      ),
    ),
    'primary key' => array('log_id'),
  );

  $schema['economic_debitors'] = array(
    'description' => 'The table for economic debitor records',
    'fields' => array(
      'deb_id' => array(
        'description' => 'The primary identifier for the log.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'debitor_handle' => array(
        'description' => 'Debitor number from e-conomic based on phone number',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
        'default' => 0,
      ),
      'phone' => array(
        'description' => 'commerce order phone number',
        'type' => 'varchar',
        'length' => 20,
        'not null' => TRUE,
        'default' => '',
      ),
      'uid' => array(
        'description' => 'User reference',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
        'default' => 0,
      ),
      'last_order_id' => array(
        'description' => 'Last order id',
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
        'default' => 0,
      ),
      'last_update' => array(
        'description' => 'Last update timestamp.',
        'type' => 'int',
        'size' => 'big',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'created' => array(
        'description' => 'Created timestamp.',
        'type' => 'int',
        'size' => 'big',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
    ),
    'foreign keys' => array(
      'order_id' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
    ),
    'primary key' => array('deb_id'),
  );

  return $schema;
}

/**
 * Implements hook_uninstall().
 */
function economic_uninstall() {
  variable_del('economic_config_account');
  variable_del('economic_config_username');
  variable_del('economic_config_password');
  variable_del('economic_config_template_id');
  variable_del('economic_config_debitor_group_id');
  variable_del('economic_config_debitor_payment_terms');
  variable_del('economic_config_convert_to_invoice');
  variable_del('economic_config_debitor_anonymous_number');
  variable_del('economic_config_default_product_group');
  variable_del('economic_config_debitor_field');
  variable_del('economic_config_product_field_cost');
}

/**
 * Implements hook_requirements().
 */
function economic_requirements($phase) {
  $t = get_t();
  $requirements = array();

  if (!class_exists('SoapClient')) {
    $requirements['soap'] = array(
      'value' => $t('Not available to php'),
      'severity' => REQUIREMENT_ERROR,
      'description' => $t(
        'The PHP Soap module does not appear to be enabled in this web server configuration. For more information, please see the <a href="@info_url">php.net soap article</a>.',
        array("@info_url" => "http://www.php.net/manual/en/soap.installation.php")
      ),
    );
  }
  else {
    $requirements['soap'] = array(
      'value' => $t('Correctly detected'),
      'severity' => REQUIREMENT_OK,
    );
  }

  $requirements['soap']['title'] = $t('PHP Soap Client Library');

  return $requirements;
}
