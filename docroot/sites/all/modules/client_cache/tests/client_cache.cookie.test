<?php

/**
 * @file
 * Contains test cases for client cache.
 */

/**
 * Implements test cases for ClientCacheCookieTestCase.
 */
class ClientCacheCookieTestCase extends DrupalWebTestCase {
  protected $defaultBin = 'cache_client';
  protected $defaultCid = 'test_temporary';
  protected $defaultValue = 'ClientCacheCookieTest';

  /**
   * {@inheritdoc}
   */
  protected function setUp() {
    parent::setUp();

    variable_set("cache_flush_$this->defaultBin", 0);
    variable_set('cache_class_cache_client', 'ClientCacheCookieDrupal');

    $this->resetVariables();
  }

  /**
   * Check whether or not a cache entry exists.
   *
   * @param string $cid
   *   The cache id.
   * @param string $var
   *   The variable the cache should contain.
   * @param string $bin
   *   The bin the cache item was stored in.
   *
   * @return bool
   *   TRUE on pass, FALSE on fail.
   */
  protected function checkCacheExists($cid, $var, $bin = NULL) {
    if ($bin == NULL) {
      $bin = $this->defaultBin;
    }

    $cache = cache_get($cid, $bin);

    return isset($cache) && $cache == $var;
  }

  /**
   * Assert or a cache entry exists.
   *
   * @param string $message
   *   Message to display.
   * @param string $var
   *   The variable the cache should contain.
   * @param string $cid
   *   The cache id.
   * @param string $bin
   *   The bin the cache item was stored in.
   */
  protected function assertCacheExists($message, $var = NULL, $cid = NULL, $bin = NULL) {
    if ($bin == NULL) {
      $bin = $this->defaultBin;
    }
    if ($cid == NULL) {
      $cid = $this->defaultCid;
    }
    if ($var == NULL) {
      $var = $this->defaultValue;
    }

    $this->assertTrue($this->checkCacheExists($cid, $var, $bin), $message);
  }

  /**
   * Assert or a cache entry has been removed.
   *
   * @param string $message
   *   Message to display.
   * @param string $cid
   *   The cache id.
   * @param string  $bin
   *   The bin the cache item was stored in.
   */
  protected function assertCacheRemoved($message, $cid = NULL, $bin = NULL) {
    if ($bin == NULL) {
      $bin = $this->defaultBin;
    }
    if ($cid == NULL) {
      $cid = $this->defaultCid;
    }

    $cache = cache_get($cid, $bin);
    $this->assertFalse($cache, $message);
  }

  /**
   * Perform the general wipe.
   *
   * @param string $bin
   *   The bin to perform the wipe on.
   */
  protected function generalWipe($bin = NULL) {
    if ($bin == NULL) {
      $bin = $this->defaultBin;
    }

    cache_clear_all(NULL, $bin);
  }

  /**
   * Resets the cache variable.
   */
  protected function resetVariables() {
    _cache_get_object($this->defaultBin)->reloadVariables();
  }

}

class ClientCacheCookieSavingCase extends ClientCacheCookieTestCase {

  /**
   * Test case meta information.
   *
   * @return array
   *   An array of test case details.
   */
  public static function getInfo() {
    return array(
      'name' => 'Cookie cache saving test',
      'description' => 'Check our variables are saved and restored the right way.',
      'group' => 'Client Cache',
    );
  }

  /**
   * {@inheritdoc}
   */
  protected function setUp() {
    parent::setUp();
  }

  /**
   * Tests the saving and restoring of a string.
   */
  public function testString() {
    $this->checkVariable($this->randomName(100));
  }

  /**
   * Tests the saving and restoring of an integer.
   */
  public function testInteger() {
    $this->checkVariable(100);
  }

  /**
   * Tests the saving and restoring of a double.
   */
  public function testDouble() {
    $this->checkVariable(1.29);
  }

  /**
   * Tests the saving and restoring of an array.
   */
  public function testArray() {
    $variable = array(
      0 => 'drupal1',
      'drupal2' => 'drupal3',
      'drupal4' => array('drupal5', 'drupal6'),
    );
    $this->checkVariable($variable);
  }

  /**
   * Tests the saving and restoring of an object.
   */
  public function testObject() {
    $test_object = new stdClass();
    $test_object->test1 = $this->randomName(100);
    $test_object->test2 = 100;
    $test_object->test3 = array(
      0 => 'drupal1',
      'drupal2' => 'drupal3',
      'drupal4' => array('drupal5', 'drupal6'),
    );

    cache_set('test_object', $test_object, 'cache_client');
    $cache = cache_get('test_object', 'cache_client');
    $this->assertTrue(isset($cache) && $cache == $test_object, t('Object is saved and restored properly.'));
  }

  /**
   * Checks variable in cache.
   *
   * @param string $var
   *   A string variable.
   */
  protected function checkVariable($var) {
    cache_set('test_var', $var, 'cache_client');
    $cache = cache_get('test_var', 'cache_client');
    $this->assertTrue(isset($cache) && $cache === $var, t('@type is saved and restored properly.', array('@type' => ucfirst(gettype($var)))));
  }

}

/**
 * Test cache_get_multiple().
 */
class ClientCacheMultipleUnitTest extends ClientCacheCookieTestCase {

  /**
   * Test case meta information.
   *
   * @return array
   *   An array of test case details.
   */
  public static function getInfo() {
    return array(
      'name' => 'Fetching Cookie cache items',
      'description' => 'Confirm that multiple records are fetched correctly.',
      'group' => 'Client Cache',
    );
  }

  /**
   * {@inheritdoc}
   */
  protected function setUp() {
    parent::setUp();
  }

  /**
   * Tests cache_get().
   */
  public function testCacheMultiple() {
    $item1 = $this->randomName(10);
    $item2 = $this->randomName(10);
    cache_set('test:item1', $item1, $this->defaultBin);
    cache_set('test:item2', $item2, $this->defaultBin);
    $this->assertTrue($this->checkCacheExists('test:item1', $item1), t('Item 1 is cached.'));
    $this->assertTrue($this->checkCacheExists('test:item2', $item2), t('Item 2 is cached.'));

    // Fetch both records from the database with cache_get_multiple().
    $item_ids = array('test:item1', 'test:item2');
    $items = cache_get_multiple($item_ids, $this->defaultBin);
    $this->assertEqual($items['test:item1'], $item1, t('Item was returned from cache successfully.'));
    $this->assertEqual($items['test:item2'], $item2, t('Item was returned from cache successfully.'));

    $this->assertTrue(empty($item_ids), t('Ids of returned items have been removed.'));

    // Remove one item from the cache.
    cache_clear_all('test:item2', $this->defaultBin);

    // Confirm that only one item is returned by cache_get_multiple().
    $item_ids = array('test:item1', 'test:item2');
    $items = cache_get_multiple($item_ids, $this->defaultBin);
    $this->assertEqual($items['test:item1'], $item1, t('Item was returned from cache successfully.'));
    $this->assertFalse(isset($items['test:item2']), t('Item was not returned from the cache.'));
    $this->assertTrue(count($items) == 1, t('Only valid cache entries returned.'));
    $this->assertTrue(count($item_ids) == 1, t('Invalid cache ids still present.'));

  }
}

/**
 * Tests cache clearing methods.
 */
class ClientCacheCookieClearCase extends ClientCacheCookieTestCase {

  /**
   * Test case meta information.
   *
   * @return array
   *   An array of test case details.
   */
  public static function getInfo() {
    return array(
      'name' => 'Cache clear test',
      'description' => 'Check our clearing is done the proper way.',
      'group' => 'Client Cache',
    );
  }

  /**
   * {@inheritdoc}
   */
  protected function setUp() {
    parent::setUp();
    $this->defaultValue = $this->randomName(10);
  }


  /**
   * Tests clearing the cache with a cid, no cache lifetime.
   */
  public function testClearCidNoLifetime() {
    $this->clearCidTest();
  }

  /**
   * Tests clearing the cache with a cid, with cache lifetime.
   */
  public function testClearCidLifetime() {
    variable_set('cache_lifetime', 6000);
    $this->clearCidTest();
  }


  /**
   * Tests full bin flushes with cache lifetime.
   */
  public function testClearCacheLifetime() {
    variable_set('cache_lifetime', 600);
    $this->resetVariables();

    // Set a cache item with an expiry.
    cache_set('test_cid', $this->defaultValue, $this->defaultBin, time() + 3600);
    $this->assertTrue($this->checkCacheExists('test_cid', $this->defaultValue), 'Cache item was created successfully.');

    // Set a permanent cache item.
    cache_set('test_cid_2', $this->defaultValue, $this->defaultBin);

    // Clear the page and block caches.
    cache_clear_all(MEMCACHE_CONTENT_CLEAR, $this->defaultBin);
    // Since the cache was cleared within the current session, cache_get()
    // should return false.
    $this->assertFalse($this->checkCacheExists('test_cid', $this->defaultValue), 'Cache item was cleared successfully.');

    // However permament items should stay in place.
    $this->assertTrue($this->checkCacheExists('test_cid_2', $this->defaultValue), 'Cache item was not cleared');

    // If $_SESSION['cache_flush'] is not set, then the expired item
    // should be returned.
    unset($_SESSION['cache_flush']);
    $this->assertTrue($this->checkCacheExists('test_cid', $this->defaultValue), 'Cache item is still returned due to minimum cache lifetime.');

    // Set a much shorter cache lifetime.
    variable_set('cache_content_flush_' . $this->defaultBin, 0);
    variable_set('cache_lifetime', 1);
    cache_set('test_cid_1', $this->defaultValue, $this->defaultBin, time() + 6000);
    $this->assertTrue($this->checkCacheExists('test_cid', $this->defaultValue), 'Cache item was created successfully.');
    sleep(2);
    cache_clear_all(MEMCACHE_CONTENT_CLEAR, $this->defaultBin);
    $this->assertFalse($this->checkCacheExists('test_cid', $this->defaultValue), 'Cache item is not returned once minimum cache lifetime has expired.');

    // Reset the cache clear variables.
    variable_set('cache_content_flush_' . $this->defaultBin, 0);
    variable_set('cache_lifetime', 6000);
    $this->resetVariables();
    sleep(1);

    // Confirm that cache_lifetime does not take effect for full bin flushes.
    cache_set('test_cid', $this->defaultValue, $this->defaultBin, time() + 6000);
    $this->assertTrue($this->checkCacheExists('test_cid', $this->defaultValue), 'Cache item was created successfully.');
    cache_set('test_cid_2', $this->defaultValue, $this->defaultBin);
    $this->assertTrue($this->checkCacheExists('test_cid_2', $this->defaultValue), 'Cache item was created successfully.');

    // Now flush the bin.
    cache_clear_all('*', $this->defaultBin, TRUE);
    $this->assertFalse($this->checkCacheExists('test_cid', $this->defaultValue), 'Cache item was cleared successfully.');
    $this->assertFalse($this->checkCacheExists('test_cid_2', $this->defaultValue), 'Cache item was cleared successfully.');
  }

  /**
   * Tests clearing using a cid.
   */
  protected function clearCidTest() {
    cache_set('test_cid_clear', $this->defaultValue, $this->defaultBin);

    $this->assertCacheExists(t('Cache was set for clearing cid.'), $this->defaultValue, 'test_cid_clear');
    cache_clear_all('test_cid_clear', $this->defaultBin);

    $this->assertCacheRemoved(t('Cache was removed after clearing cid.'), 'test_cid_clear');

    cache_set('test_cid_clear1', $this->defaultValue, $this->defaultBin);
    cache_set('test_cid_clear2', $this->defaultValue, $this->defaultBin);
    $this->assertTrue($this->checkCacheExists('test_cid_clear1', $this->defaultValue) && $this->checkCacheExists('test_cid_clear2', $this->defaultValue), t('Two caches were created for checking cid "*" with wildcard false.'));
    cache_clear_all('*', $this->defaultBin);
    $this->assertTrue($this->checkCacheExists('test_cid_clear1', $this->defaultValue) && $this->checkCacheExists('test_cid_clear2', $this->defaultValue), t('Two caches still exists after clearing cid "*" with wildcard false.'));
  }

}
