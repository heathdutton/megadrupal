<?php
/*
 * Implements hook_form_alter().
 */
function book_title_override_form_alter(&$form, &$form_state, $form_id) {
  // only add this to the node form of content in a book
  if (strpos($form['#id'], 'node-form') && (in_array($form['#node']->type,   variable_get('book_allowed_types', array('book'))) || (isset($form['#node']->book) && $form['#node']->book['bid'] != 0))) {
    // provide a checkbox for selecting whether or not to override things
    $form['book_title_override_override'] = array(
      '#type' => 'checkbox',
      '#title' => t('Override book title'),
      '#description' => t('Check this box to override the way this is presented in book outlines'),
      '#default_value' => (isset($form['#node']->book['link_title']) && $form['#node']->title != $form['#node']->book['link_title'] && $form['#node']->title != ''),
      '#weight' => -10,
    );
    // provide a title field for the overridden title
    $form['book_title_override_title'] = array(
      '#type' => 'textfield',
      '#title' => t('Override title'),
      '#description' => t('Way to present this in menus'),
      '#default_value' => isset($form['#node']->book['link_title']) ? $form['#node']->book['link_title'] : '',
      '#weight' => -10,
      '#states' => array(
        'visible' => array(
          ':input[name="book_title_override_override"]' => array('checked' => TRUE),
        ),
      ),
    );
    // provide menu token support optionally
    if (module_exists('menu_token')) {
      $types = menu_token_get_plugin_types();
      // Create new fieldset.
      $form['menu_token_replacement_patterns'] = array(
        '#type' => 'fieldset',
        '#title' => t('Replacement patterns'),
        '#collapsible' => FALSE,
        '#weight' => -9,
        '#states' => array(
          'visible' => array(
            ':input[name="book_title_override_override"]' => array('checked' => TRUE),
          ),
        ),
      );
      $form['menu_token_replacement_patterns']['patterns'] = array(
        '#theme' => 'token_tree',
        '#token_types' => array_keys($types),
        '#dialog' => TRUE,
      );
    }
  }
}

/**
 * Implements hook_node_load().
 */
function book_title_override_node_load($nodes, $types) {
  $result = db_query("SELECT * FROM {book} b INNER JOIN {menu_links} ml ON b.mlid = ml.mlid WHERE b.nid IN (:nids)", array(':nids' =>  array_keys($nodes)), array('fetch' => PDO::FETCH_ASSOC));
  foreach ($result as $record) {
    if ($nodes[$record['nid']]->title != $record['link_title']) {
      $nodes[$record['nid']]->book_title_override_title = $record['link_title'];
      $nodes[$record['nid']]->book_title_override_override = TRUE;
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function book_title_override_node_insert($node) {
  $change = FALSE;
  // verify we have a changed title
  if (isset($node->book_title_override_override) && isset($node->book['link_title']) && $node->book_title_override_override) {
    $node->book['link_title'] = $node->book_title_override_title;
    $change = TRUE;
  }
  // test for tokens when title isn't overridden
  if (isset($node->book) && module_exists('menu_token') && $node->title !=token_replace($node->title, array('node' => $node))) {
    // support token replacements if they exist
    $node->book['options']['menu_token_link_path'] = 'node/' . $node->nid;
    $node->book['options']['menu_token_options'] = array('clear' => 0);
    $node->book['options']['alter'] = TRUE;
    $change = TRUE;
  }
  // commit the menu link alteration if we have a change to make
  if ($change) {
    menu_link_save($node->book);
  }
}

/**
 * Implements hook_node_update().
 */
function book_title_override_node_update($node) {
  book_title_override_node_insert($node);
}

/**
 * Implements hook_outline_designer_operations().
 */
function book_title_override_outline_designer_operations($type) {
  switch ($type) {
    case 'book':
      $ops = array(
        'book_title_override' => array(
          'title' => t('Override title'),
          'icon' => drupal_get_path('module', 'book_title_override') . '/images/book_title_override.png',
          'callback' => 'book_title_override_outline_designer_override_title',
        ),
      );
    break;
    default:
      $ops = array();
    break;
  }
  return $ops;
}

/**
 * Implements hook_outline_designer_ops_js().
 */
function book_title_override_outline_designer_ops_js($ajax_path) {
  drupal_add_js(drupal_get_path('module', 'book_title_override') . '/js/book_title_override_ops.js', array('scope' => 'footer'));
}

/**
 * Implements hook_outline_designer_form_overlay().
 */
function book_title_override_outline_designer_form_overlay() {
  // Override checkbox
  $form['od_book_title_override_override'] = array(
    '#title' => t('Override title'),
    '#id' => 'od_book_title_override_override',
    '#type' => 'checkbox',
    '#description' => t('Should the page title be different from presentation in navigation?'),
    '#weight' => 0,
    '#default_value' => FALSE,
  );
  // Title to set for the override
  $form['od_book_title_override_title'] = array(
    '#title' => t('Title'),
    '#id' => 'od_book_title_override_title',
    '#type' => 'textfield',
    '#description' => t('This is the title used when presenting the book in navigation'),
    '#weight' => 1,
    '#default_value' => '',
  );
  // provide menu token support optionally
  if (module_exists('menu_token')) {
    $types = menu_token_get_plugin_types();
    // Create new fieldset.
    $form['menu_token_replacement_patterns'] = array(
      '#type' => 'fieldset',
      '#title' => t('Replacement patterns'),
      '#collapsible' => FALSE,
      '#weight' => 2,
    );
    $form['menu_token_replacement_patterns']['patterns'] = array(
      '#theme' => 'token_tree',
      '#token_types' => array_keys($types),
      '#dialog' => TRUE,
    );
  }
  $output = '<div id="od_book_title_override" class="od_uiscreen">' . drupal_render($form) . '</div>';
  return $output;
}
/**
 * Helper function to process the ajax callback for override title
 */
function book_title_override_outline_designer_override_title($nid, $override, $title) {
  // Load node.
  $node = node_load($nid);
  // Verify this type can be hidden and node access rights.
  if (isset($node->nid) && node_access('update', $node)) {
    // set override
    $node->book_title_override_override = $override;
    // set title that came across
    $node->book_title_override_title = $title;
    node_save($node);
    // message based on if it was enabled or disabled
    if ($node->book_title_override_override) {
      return t('Book title has been overriden in navigation');
    }
    else {
      return t('Book title has been reset to the page title');
    }
  }
  else {
    return FALSE;
  }
}
