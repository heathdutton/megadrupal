<?php

/**
 * @file
 * Contains hook implementations and global functions.
 */

module_load_include('pages.inc', 'transferuj_pl');

define('TRANSFERUJ_PL_STATUS_ACCEPTED_OVERPAYMENT', 'transferuj_pl_status_accepted_overpayment');
define('TRANSFERUJ_PL_STATUS_ACCEPTED_UNDERPAYMENT', 'transferuj_pl_status_accepted_underpayment');
define('TRANSFERUJ_PL_STATUS_REJECTED_OVERPAYMENT', 'transferuj_pl_status_rejected_overpayment');
define('TRANSFERUJ_PL_STATUS_REJECTED_UNDERPAYMENT', 'transferuj_pl_status_rejected_underpayment');

/**
 * Implements hook_menu().
 */
function transferuj_pl_menu() {
  $items['transferuj/redirect/%entity_object'] = array(
    'load arguments' => array('payment'),
    'title' => 'Go to payment server',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('transferuj_pl_form_redirect', 2),
    'access callback' => 'transferuj_pl_form_redirect_access',
    'access arguments' => array(2),
    'type' => MENU_CALLBACK,
  );
  $items['transferuj/return/%entity_object'] = array(
    'load arguments' => array('payment'),
    'title' => 'Transferuj.pl return url',
    'page callback' => 'transferuj_pl_return',
    'page arguments' => array(2),
    'access callback' => 'transferuj_pl_return_access',
    'access arguments' => array(2),
    'type' => MENU_CALLBACK,
  );

  $items['transferuj/verify'] = array(
    'title' => 'Transferuj.pl verify url',
    'page callback' => 'transferuj_pl_verify',
    'access callback' => 'transferuj_pl_verify_access',
    'type' => MENU_CALLBACK,
  );

  return $items;
}


/**
 * Implements hook_payment_method_controller_info().
 */
function transferuj_pl_payment_method_controller_info() {
  return array('TransferujPlPaymentMethodController');
}


/**
 * Implements hook_entity_load().
 */
function transferuj_pl_entity_load(array $entities, $entity_type) {
  if ($entity_type == 'payment_method') {
    $pmids = array();
    foreach ($entities as $payment_method) {
      if ($payment_method->controller->name == 'TransferujPlPaymentMethodController') {
        $pmids[] = $payment_method->pmid;
      }
    }
    if ($pmids) {
      $query = db_select('transferuj_pl_payment_method')
        ->fields('transferuj_pl_payment_method')
        ->condition('pmid', $pmids);
      $result = $query->execute();
      while ($data = $result->fetchAssoc()) {
        $payment_method = $entities[$data['pmid']];
        $payment_method->controller_data = (array) $data;
        unset($payment_method->controller_data['pmid']);
      }
    }
  }

  if ($entity_type == 'payment') {
    $pids = array();
    foreach ($entities as $payment) {
      if ($payment->method->controller->name == 'TransferujPlPaymentMethodController') {
        $pids[] = $payment->pid;
      }
    }
    if ($pids) {
      $query = db_select('transferuj_pl_payment')
        ->fields('transferuj_pl_payment')
        ->condition('pid', $pids);
      $result = $query->execute();
      while ($data = $result->fetchAssoc()) {
        $payment = $entities[$data['pid']];
        $payment->method_data = (array) $data;
        unset($payment->method_data['pid']);
      }
    }
  }
}


/**
 * Implements hook_ENTITY_TYPE_ACTION().
 */
function transferuj_pl_payment_method_insert(PaymentMethod $payment_method) {
  if ($payment_method->controller->name == 'TransferujPlPaymentMethodController') {
    $values = $payment_method->controller_data += $payment_method->controller->controllerDataDefaults;
    $values['pmid'] = $payment_method->pmid;
    if ($values['channel'] == '') {
      // This allows default "null" value for "channel" column,
      // as drupal_write_record converts '' to 0.
      unset($values['channel']);
    }
    drupal_write_record('transferuj_pl_payment_method', $values);
  }
}

/**
 * Implements hook_ENTITY_TYPE_ACTION().
 */
function transferuj_pl_payment_method_update(PaymentMethod $payment_method) {
  if ($payment_method->controller->name == 'TransferujPlPaymentMethodController') {
    $values = $payment_method->controller_data += $payment_method->controller->controllerDataDefaults;
    $values['pmid'] = $payment_method->pmid;
    if ($values['channel'] == '') {
      // This allows default "null" value for "channel" column,
      // as drupal_write_record converts '' to 0.
      unset($values['channel']);
    }
    drupal_write_record('transferuj_pl_payment_method', $values, 'pmid');
  }
}

/**
 * Implements hook_ENTITY_TYPE_ACTION().
 */
function transferuj_pl_payment_method_delete(PaymentMethod $payment_method) {
  if ($payment_method->controller->name == 'TransferujPlPaymentMethodController') {
    db_delete('transferuj_pl_payment_method')
      ->condition('pmid', $payment_method->pmid)
      ->execute();
  }
}


/**
 * Implements hook_ENTITY_TYPE_ACTION().
 */
function transferuj_pl_payment_insert(Payment $payment) {
  if ($payment->method->controller->name == 'TransferujPlPaymentMethodController') {
    $values = $payment->method_data;
    $values['pid'] = $payment->pid;
    drupal_write_record('transferuj_pl_payment', $values);
  }
}


/**
 * Implements hook_ENTITY_TYPE_ACTION().
 */
function transferuj_pl_payment_update(Payment $payment) {
  if ($payment->method->controller->name == 'TransferujPlPaymentMethodController') {
    $values = $payment->method_data;
    $values['pid'] = $payment->pid;
    drupal_write_record('transferuj_pl_payment', $values, 'pid');
  }
}

/**
 * Implements hook_ENTITY_TYPE_ACTION().
 */
function transferuj_pl_payment_delete(Payment $payment) {
  if ($payment->method->controller->name == 'TransferujPlPaymentMethodController') {
    db_delete('transferuj_pl_payment')
      ->condition('pid', $payment->pid)
      ->execute();
  }
}

/**
 * Form build callback: implements PaymentMethodController::payment_method_configuration_form_elements_callback.
 */
function transferuj_pl_payment_method_configuration_form_elements(array $form, array &$form_state) {
  $payment_method = $form_state['payment_method'];
  $controller = $payment_method->controller;
  $controller_data = $payment_method->controller_data + $controller->controller_data_defaults;

  $elements['sid'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t('Sellers ID.'),
    '#default_value' => $controller_data['sid'],
  );

  $elements['sdesc'] = array(
    '#type' => 'textfield',
    '#required' => FALSE,
    '#title' => t('Description of seller. When empty - the default value set on transferuj.pl account is taken.'),
    '#maxlength' => 64,
    '#default_value' => $controller_data['sdesc'],
  );

  $elements['channel'] = array(
    '#type' => 'textfield',
    '#required' => FALSE,
    '#title' => t('Payment channel'),
    '#description' => t('The payment channel suggested to client.'),
    '#default_value' => $controller_data['channel'],
  );

  $elements['block'] = array(
    '#type' => 'checkbox',
    '#required' => FALSE,
    '#title' => t('Force on client suggested payment channel.'),
    '#default_value' => $controller_data['block'],
    '#states' => array(
      'visible' => array(
        ':input[name="controller_form[channel]"]' => array('filled' => TRUE),
      ),
    ),
  );

  $elements['online'] = array(
    '#type' => 'checkbox',
    '#required' => FALSE,
    '#title' => t('Allow only online payments. Blocks channels that currently are not allowing payments in real time.'),
    '#default_value' => $controller_data['online'],
  );

  $elements['info_email'] = array(
    '#type' => 'textfield',
    '#required' => FALSE,
    '#title' => t('Email for sending transactions information.'),
    '#description' => t('The email, where the information about transaction will be sent by payments provider.'),
    '#maxlength' => 64,
    '#default_value' => $controller_data['info_email'],
  );

  $elements['security_code'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t('Security code'),
    '#description' => t('Security code used by md5sum.'),
    '#default_value' => $controller_data['security_code'],
  );

  return $elements;
}

/**
 * Implements form validate callback for transferuj_pl_payment_method_configuration_form_elements().
 */
function transferuj_pl_payment_method_configuration_form_elements_validate(array $element, array &$form_state) {
  $values = drupal_array_get_nested_value($form_state['values'], $element['#parents']);
  $form_state['payment_method']->controller_data['sid'] = $values['sid'];
  $form_state['payment_method']->controller_data['sdesc'] = $values['sdesc'];
  $form_state['payment_method']->controller_data['channel'] = $values['channel'];
  $form_state['payment_method']->controller_data['block'] = $values['block'];
  $form_state['payment_method']->controller_data['online'] = $values['online'];
  $form_state['payment_method']->controller_data['info_email'] = $values['info_email'];
  $form_state['payment_method']->controller_data['security_code'] = $values['security_code'];
}


/**
 * Implements hook_payment_status_info().
 */
function transferuj_pl_payment_status_info() {
  return array(
    new PaymentStatusInfo(array(
      'parent' => PAYMENT_STATUS_SUCCESS,
      'status' => TRANSFERUJ_PL_STATUS_ACCEPTED_OVERPAYMENT,
      'title' => t('Accepted overpayment'),
    )),
    new PaymentStatusInfo(array(
      'parent' => PAYMENT_STATUS_SUCCESS,
      'status' => TRANSFERUJ_PL_STATUS_ACCEPTED_UNDERPAYMENT,
      'title' => t('Accepted underpayment'),
    )),
    new PaymentStatusInfo(array(
      'parent' => PAYMENT_STATUS_FAILED,
      'status' => TRANSFERUJ_PL_STATUS_REJECTED_OVERPAYMENT,
      'title' => t('Rejected overpayment'),
    )),
    new PaymentStatusInfo(array(
      'parent' => PAYMENT_STATUS_FAILED,
      'status' => TRANSFERUJ_PL_STATUS_REJECTED_UNDERPAYMENT,
      'title' => t('Rejected underpayment'),
    )),

  );
}

/**
 * Implements hook_payment_line_item_info().
 */
function transferuj_pl_payment_line_item_info() {
  return array(
    new PaymentLineItemInfo(array(
        'name' => 'transferuj_pl_diff',
        'title' => t('Transferuj.pl difference from initial amount.'),
      )),
  );
}
