<?php
/**
 * @file
 *
 *
 *
 * @author Attila Fekete - http://drupal.org/user/762986
 */

/**
 * Implementation of hook_filter_info().
 */
function mixcloud_filter_filter_info() {
  $filters = array();
  $filters['mixcloud_filter'] = array(
    'title' => t('Mixcloud filter'),
    'description' => t('Replaces [mixcloud:URL] with embedded code'),
    'settings callback' => '_mixcloud_filter_settings',
    'default settings' => array(
      'mixcloud_filter_width' => '100',
      'mixcloud_filter_height' => '81',
      'mixcloud_filter_color' => '53b0eb',
    ),
    'process callback' => '_mixcloud_filter_process',
    'cache' => 'FALSE',
    'tips callback' => '_mixcloud_filter_tips',
    'weight' => -1,
  );
  return $filters;
}

/**
 * Implementation of hook_filter_tips().
 */
function _mixcloud_filter_tips($filter, $format, $long = FALSE) {
  if ($long) {
    return t('
      <p><strong>Mixcloud filter</strong></p>
      <p>Insert Mixcloud track with <code>[mixcloud:URL]</code> tag.</p>
      ');
  }
  else {
    return t('<p>Insert Mixcloud track with [mixcloud:URL] tag.</p>');
  }
}

/**
 * Settings callback
 */
function _mixcloud_filter_settings($form, &$form_state, $filter, $format, $defaults, $filters) {
  $settings['mixcloud_filter_width'] = array(
    '#type' => 'textfield',
    '#title' => t('Width'),
    '#default_value' => isset($filter->settings['mixcloud_filter_width']) ? $filter->settings['mixcloud_filter_width'] : $defaults['mixcloud_filter_width'],
    '#description' => t('Player width. Default is @width.', array('@width' => $defaults['mixcloud_filter_width'])),
  );

  $settings['mixcloud_filter_height'] = array(
    '#type' => 'textfield',
    '#title' => t('Height'),
    '#default_value' => isset($filter->settings['mixcloud_filter_height']) ? $filter->settings['mixcloud_filter_height'] : $defaults['mixcloud_filter_height'],
    '#description' => t('Player height. Default is @height', array('@height' => $defaults['mixcloud_filter_height'])),
  );

  $settings['mixcloud_filter_color'] = array(
    '#type' => 'textfield',
    '#title' => t('Color'),
    '#default_value' => isset($filter->settings['mixcloud_filter_color']) ? $filter->settings['mixcloud_filter_color'] : $defaults['mixcloud_filter_color'],
    '#description' => t('Enter a color value in the form RRGGBB.'),
    '#maxlength' => 6,
  );

  return $settings;
}

/**
 * Process callback.
 *
 * Check mixcloud pattern, remove unnecessary elements, call API function and get back the embed code.
 *
 * @param string $text
 *   The content to filter
 * @return string
 *   The HTML string of the content
 */
function _mixcloud_filter_process($text, $filter, $format, $langcode, $cache, $cache_id) {
  $results = array();

  $params = array(
    'width' => $filter->settings['mixcloud_filter_width'],
    'height' => $filter->settings['mixcloud_filter_height'],
    'color' => $filter->settings['mixcloud_filter_color'],
  );

  preg_match_all('/\[mixcloud:([^\]]*)\]/', $text, $matches);

  // Each of the mached urls
  foreach ($matches[1] as $url) {
    $mixcloud_oembed_res = mixcloud_filter_create_oembed_url($url, $params);
    $results[] = $mixcloud_oembed_res->html;
  }

  // Each of the mached patterns [mixcloud:url]
  foreach ($matches[0] as $id => $value) {
    $text = str_replace($value, theme('mixcloud_filter_embed', array('html' => $results[$id])), $text);
  }
  return $text;
}

/**
 * Implementation of hook_theme().
 */
function mixcloud_filter_theme($existing, $type, $theme, $path) {
  return array(
    'mixcloud_filter_embed' => array(
      'variables' => array(
        // 'api_result' => NULL,
        'html' => NULL,
      ),
    ),
  );
}

/**
 * Create Mixcloud API URL from Mixcloud URL.
 *
 * Remove http:// www. and / from the url's end, and add api to the beginning and embed-json to the end.
 *
 * @param string $url
 *   Mixcloud url.
 * @return string
 *   The modified url to call API.
 */
function mixcloud_filter_create_api_url_from_url($url) {
  $url = preg_replace('/^http:\/\//', '', $url);
  $url = preg_replace('/^www\./', '', $url);
  $url = preg_replace('/\/$/', '', $url);

  return 'http://api.' . $url . '/embed-json/';
}

/**
 * Configure and create oEmbed URL, then send the request
 *
 * @param string $url
 */
function mixcloud_filter_create_oembed_url($url, $params) {
  $oembed_endpoint = 'http://www.mixcloud.com/oembed';
  $encoded_url = urlencode($url);
  $oembed_url = $oembed_endpoint . '?url=' . $encoded_url . '&format=json';
  $oembed = mixcloud_filter_curl_get($oembed_url);

  return json_decode($oembed);
}

/**
 * Function that outputs the Mixcloud player
 */
function theme_mixcloud_filter_embed($variables) {
  $output = '';
  $output = $variables['html'];

  return $output;
}

/**
 * Curl helper function
 */
function mixcloud_filter_curl_get($url) {
    $curl = curl_init($url);
    curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($curl, CURLOPT_TIMEOUT, 30);
    curl_setopt($curl, CURLOPT_FOLLOWLOCATION, 1);
    $return = curl_exec($curl);
    curl_close($curl);
    return $return;
}
