<?php
/**
 * @file
 * Allows you to interface with CurdBee.
 */

define('CURDBEE_ID', '');
define('CURDBEE_API_TOKEN', '');

/**
 * Implements hook_permission().
 */
function curdbee_permission() {
	return array(
    'administer curdbee' => array(
      'title' => t('Administer CurdBee'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function curdbee_menu() {
  $items = array();
  $items['admin/config/services/curdbee'] = array(
    'title' => 'CurdBee',
    'description' => 'Settings for CurdBee invoicing system.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('curdbee_admin_settings'),
    'access arguments' => array('administer curdbee'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['user/%/curdbee'] = array(
    'title' => 'Invoices',
    'page callback' => 'curdbee_invoices',
    'page arguments' => array(1),
    'access callback' => 'curdbee_user_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Checks user access.
 *
 * @param int $uid
 *   User ID of currently logged in user.
 *
 * @return bool
 *   Returns true if user have access, false otherwise.
 */
function curdbee_user_access($uid) {
  global $user;
  // Check if logged in user have access?
  if ($user->uid != $uid && $user->uid != 1) {
    return FALSE;
  }
  $current_user = user_load($uid);
  // Check if user has CurdBee client assgined?
  return $current_user->data['curdbee_client_id'] ? TRUE : FALSE;
}

/**
 * Gets invoices from CurdBee.
 *
 * @param int $uid
 *   User ID of currently logged in user.
 *
 * @return string
 *   Invoice HTML.
 */
function curdbee_invoices($uid) {
  // Add CSS required for CurdBee.
  drupal_add_css(drupal_get_path('module', 'curdbee') . '/curdbee.css');
  $user = user_load($uid);
  $client_id = $user->data['curdbee_client_id'];
  $output = '';
  // Make a request to CurdBee API to retrieve client.
  $client = curdbee_request('clients/' . $client_id);
  if ($client) {
    $output .= '<p>' . check_plain($client->client->name) . '<br />' . check_plain($client->client->full_address_with_comma) . '<br />' . t('Phone: @phone', array('@phone' => $client->client->phone)) . '<br />' . t('Email: @email', array('@email' => $client->client->email)) . '</p>';
  }

  // Make a request to CurdBee API to retrieve invoices.
  $invoices = curdbee_request('invoices', array('client' => $client_id));
  // Check if request was successful.
  if ($invoices) {
    $output .= '<h2>' . t('Outstanding Invoices') . '</h2>';
    // Define headers for table.
    $header = array(
      t('Date'),
      t('Invoice'),
      t('Client'),
      t('Total'),
      t('Due'),
    );
    $rows = array();
    // Loop through each invoices.
    foreach ($invoices as $invoice) {
      if ($invoice->invoice->state != 'closed') {
        $invoice_no = check_plain($invoice->invoice->invoice_no);
        if ($invoice->invoice->hash_key) {
          $invoice_no = l(
            $invoice->invoice->invoice_no,
            'https://' . variable_get('curdbee_id', CURDBEE_ID) . '/statements/' . $invoice->invoice->hash_key,
            array(
              'attributes' => array(
                'target' => '_blank',
              ),
            )
          );
        }
        $rows[] = array(
          array('data' => check_plain($invoice->invoice->formatted_date)),
          array('data' => $invoice_no),
          array('data' => check_plain($invoice->invoice->client->name)),
          array('data' => check_plain($invoice->invoice->total_billed)),
          array('data' => check_plain($invoice->invoice->total_due)),
        );
      }
    }
    $output .= theme('table', $header, $rows, array('id' => 'curdbee'));
  }
  return $output;
}

/**
 * Admin settings form.
 */
function curdbee_admin_settings() {
  $form = array();
  $form['curdbee_admin_settings']['system_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('CurdBee Settings'),
  );
  $form['curdbee_admin_settings']['system_settings']['curdbee_id'] = array(
    '#type' => 'textfield',
    '#title' => t('CurdBee ID'),
    '#description' => t('Enter your CurdBee ID.'),
    '#default_value' => variable_get('curdbee_id', CURDBEE_ID),
    '#required' => TRUE,
  );
  $form['curdbee_admin_settings']['system_settings']['curdbee_api_token'] = array(
    '#type' => 'textfield',
    '#title' => t('API Token'),
    '#description' => t('Enter your CurdBee API Token.'),
    '#default_value' => variable_get('curdbee_api_token', CURDBEE_API_TOKEN),
    '#required' => TRUE,
  );
  return system_settings_form($form);
}

/**
 * Implements hook_form_user_register_form_alter().
 */
function curdbee_form_user_register_form_alter(&$form, &$form_state, $form_id) {
  if (user_access('administer curdbee')) {
    $options = curdbee_clients();
    $form['curdbee_user_settings'] = array(
      '#type' => 'fieldset',
      '#title' => t('CurdBee'),
      '#weight' => 10,
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
    );
    $form['curdbee_user_settings']['curdbee_client_id'] = array(
      '#title' => t('Client'),
      '#description' => t('Select client you want to associate this user account with.'),
      '#type' => 'select',
      '#options' => $options,
    );
  }
}

/**
 * Implements hook_form_user_profile_form_alter().
 */
function curdbee_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  if (user_access('administer curdbee')) {
    $user = user_load($form['#user']->uid);
    $options = curdbee_clients();
    $form['curdbee_user_settings'] = array(
      '#type' => 'fieldset',
      '#title' => t('CurdBee'),
      '#weight' => 10,
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
    );
    $form['curdbee_user_settings']['curdbee_client_id'] = array(
      '#title' => t('Client'),
      '#description' => t('Select client you want to associate this user account with.'),
      '#type' => 'select',
      '#options' => $options,
      '#default_value' => $user->data['curdbee_client_id'],
    );
  }
}

/**
 * Implements hook_user_presave().
 */
function curdbee_user_presave(&$edit, $account, $category) {
  $edit['data']['curdbee_client_id'] = $edit['curdbee_client_id'];
}

/**
 * Gets list of CurdBee clients.
 *
 * @return array
 *   Returns array of clients.
 */
function curdbee_clients() {
  $options = array();
  $options[] = t('- Select -');
  $clients = curdbee_request('clients');
  if ($clients) {
    foreach ($clients as $client) {
      $options[$client->client->id] = $client->client->name;
    }
  }
  return $options;
}

/**
 * Sends a request to CurdBee.
 *
 * @param string $type
 *   Allowed values: clients, invoices.
 * @param array $condition
 *   Allowed array keys: client.
 *
 * @return array/bool
 *   Returns array if true, false otherwise.
 */
function curdbee_request($type, $condition = array()) {
  $curdbee_id = variable_get('curdbee_id', CURDBEE_ID);
  $curdbee_api_token = variable_get('curdbee_api_token', CURDBEE_API_TOKEN);
  $condition['api_token'] = $curdbee_api_token;
  // Start building request.
  $query_string = http_build_query($condition, '', '&');
  $url = 'https://' . $curdbee_id . '/' . $type . '.json?' . $query_string;
  // Make request using drupal_http_request (Suggested by lord_of_freaks).
  $result = drupal_http_request($url);
  if (isset($result) && in_array($result->code, array('200')) && $result->data != '') {
    // Return result.
    return json_decode($result->data);
  }
  else {
    // Add debug info to watchdog.
    watchdog('curdbee', 'Error retrieving @type', array('@type' => $type), WATCHDOG_ERROR);
    // Display error to user.
    drupal_set_message(t('Error retrieving @type. Please try again later.', array('@type' => $type)), 'error');
    return FALSE;
  }
}
