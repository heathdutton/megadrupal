<?php

/**
 * @file
 * Module: 'sitevars'
 *
 * Edit a key-value store, accessible from:
 * Configuration > System > Site variables.
 *
 * Requires 'administer site configuration' permission.
 * Variable name converted to lowercase, using only [a-z], [0-9] and [_].
 * Key-value pairs stored in variable 'sitevars_array' as associative array.
 *
 * Pass a name to sitevars_get() to retrieve one value; an array to
 * retrieve several. Call it with no parameters to fetch your entire
 * key-value store. Pass a string and TRUE to retrieve all variables
 * whose name begins with a prefix.
 */

/**
 * Implements hook_menu().
 *
 * establish path to access form and required permission
 */
function sitevars_menu() {
  return array(
    'admin/config/system/sitevars' => array(
      'title' => "Site variables",
      'description' => "Edit a key-value store. Requires system configuration permission.",
      'page callback' => "drupal_get_form",
      'page arguments' => array("sitevars_form"),
      'access arguments' => array("administer site configuration"),
      'weight' => -15,
    ),
  );
}

/**
 * Implements hook_form().
 *
 * primary form, in three parts; add new, filter by prefix, list defined
 * variables/values; if "Delete Selected" button was clicked, use form
 * generated by sitevars_delete_confirm() instead
 */
function sitevars_form($form, &$form_state) {
  if ($form_state && isset($form_state['values']['op']) && $form_state['values']['op'] == "Delete Selected") {
    $form = sitevars_delete_confirm($form, $form_state);
    if (count($form) != 0) {
      return $form;
    }
  }
  $form = array();
  $form['sitevars_add'] = array(
    '#type' => "fieldset",
    '#title' => t("Add Variable"),
    '#description' => t("To create a new variable, enter its name below, using only [<strong>a-z</strong>], [<strong>0-9</strong>] and [<strong>_</strong>].<br />&nbsp;<br />&nbsp;"),
    '#attributes' => array('class' => array("container-inline")),
    'add_name' => array(
      '#type' => "textfield",
      '#size' => 50,
      '#maxlength' => 100,
      '#default_value' => "",
      '#required' => FALSE,
    ),
    'actions' => array(
      'submit' => array(
        '#type' => "submit",
        '#value' => t("Add"),
        '#submit' => array("sitevars_add_submit"),
      ),
    ),
  );
  $vars = variable_get("sitevars_array", array());
  $names = array_keys($vars);
  if (count($names) != 0) {
    $form['sitevars_add']['#collapsible'] = TRUE;
    $form['sitevars_add']['#collapsed'] = TRUE;
    $filter = (isset($_SESSION['sitevars_filter']) ? $_SESSION['sitevars_filter'] : "");
    $_SESSION['sitevars_filter'] = trim(preg_replace("/[^a-z0-9\x5f]/", "", drupal_strtolower($filter)));
    $element = array();
    $element['submit'] = array(
      '#type' => "submit",
      '#value' => t("Filter"),
      '#submit' => array("sitevars_filter_submit"),
    );
    if ($filter != "") {
      $element['reset'] = array(
        '#type' => "submit",
        '#value' => t("Reset"),
        '#submit' => array("sitevars_filter_submit"),
      );
    }
    $form['sitevars_filter'] = array(
      '#type' => "fieldset",
      '#title' => t("Filter by prefix"),
      '#description' => t("To limit the listing below to variable names beginning with a certain prefix, enter it below and click <strong>Filter</strong>."),
      '#attributes' => array('class' => array("container-inline")),
      'name_prefix' => array(
        '#type' => "textfield",
        '#size' => 25,
        '#maxlength' => 100,
        '#default_value' => $_SESSION['sitevars_filter'],
        '#required' => FALSE,
      ),
      'actions' => $element,
    );
    if ($filter != "") {
      $form['sitevars_filter']['#title'] .= t(": <em>@filter</em>", array('@filter' => $filter));
      $form['sitevars_filter']['#description'] .= t("<br />Or, click <strong>Reset</strong> to list all variables.");
    }
    $form['sitevars_filter']['#description'] .= "<br />&nbsp;<br />&nbsp;";
    $rows = array();
    foreach ($names as $name) {
      if ($filter == "" || strpos($name, $filter) === 0) {
        $value = $vars[$name];
        $rows[$name] = array(
          'name' => t("<strong>@name</strong>", array('@name' => $name)),
          'value' => array(
            'data' => array(
              '#name' => ("value_" . $name),
              '#type' => "textfield",
              '#size' => 100,
              '#maxlength' => 255,
              '#value' => $value,
              '#required' => FALSE,
            ),
          ),
        );
      }
    }
    $form['sitevars_list'] = array(
      '#type' => "fieldset",
      '#title' => t("Variables"),
      '#description' => t("To remove variables, select one or more of them and click <strong>Delete Selected</strong>.<br />Or, modify values for all defined variables, then click <strong>Save Changes</strong>.<br/ >&nbsp;"),
      'edit_names' => array(
        '#type' => "tableselect",
        '#header' => array(
          'name' => t("Name"),
          'value' => t("Value"),
        ),
        '#options' => $rows,
        '#empty' => t("No variables"),
      ),
    );
    if ($filter != "") {
      $form['sitevars_list']['#title'] .= t("@spacewith prefix: <em>@filter</em>", array('@filter' => $filter, '@space' => " "));
      $form['sitevars_list']['edit_names']['#empty'] .= t("@spacewith prefix <strong><em>@filter</em></strong>", array('@filter' => $filter, '@space' => " "));
    }
    if (count($rows) != 0) {
      $form['sitevars_filter']['#collapsible'] = TRUE;
      $form['sitevars_filter']['#collapsed'] = TRUE;
      $form['sitevars_list']['actions'] = array(
        'delete' => array(
          '#type' => "button",
          '#value' => t("Delete Selected"),
          '#submit' => array("sitevars_form"),
        ),
        'submit' => array(
          '#type' => "submit",
          '#value' => t("Save Changes"),
          '#submit' => array("sitevars_update_submit"),
        ),
      );
    }
  }
  return $form;
}

/**
 * Callback for sitevars_form().
 *
 * handle "Add" submit; create new variable key
 * in 'sitevars_array', with no value
 */
function sitevars_add_submit(&$form, &$form_state) {
  if (isset($form_state['input']['add_name'])) {
    $name = trim(preg_replace("/[^a-z0-9\x5f]/", "", drupal_strtolower($form_state['input']['add_name'])));
    if ($name != "") {
      $vars = variable_get("sitevars_array", array());
      if (!array_key_exists($name, $vars)) {
        $vars[$name] = "";
        ksort($vars);
        variable_set("sitevars_array", $vars);
        $msg = t("Variable <strong>@name</strong> created.", array('@name' => $name));
        drupal_set_message($msg);
        watchdog("sitevars", $msg, NULL, WATCHDOG_INFO);
      }
      else {
        drupal_set_message(t("Variable <strong>@name</strong> already exists.", array('@name' => $name)), "error");
      }
    }
  }
}

/**
 * Callback for sitevars_form().
 *
 * handle "Filter" submit; store 'prefix' textfield entry in $_SESSION
 */
function sitevars_filter_submit(&$form, &$form_state) {
  if (isset($form_state['input']['name_prefix']) && isset($form_state['input']['op'])) {
    $_SESSION['sitevars_filter'] = ($form_state['input']['op'] == "Filter" ? trim(preg_replace("/[^a-z0-9\x5f]/", "", drupal_strtolower($form_state['input']['name_prefix']))) : "");
  }
}

/**
 * Callback for sitevars_form().
 *
 * handle "Delete Selected" button;
 * return array re-formatted by confirm_form()
 */
function sitevars_delete_confirm(&$form, &$form_state) {
  $names = array();
  foreach ($form_state['input']['edit_names'] as $name => $value) {
    if ($name === $value) {
      $names[] = $value;
    }
  }
  if (count($names) != 0) {
    $form = array(
      'delete_names' => array(
        '#prefix' => "<ul>",
        '#suffix' => "</ul>",
        '#tree' => TRUE,
      ),
    );
    foreach ($names as $name) {
      $form['delete_names'][$name] = array(
        '#type' => "hidden",
        '#value' => $name,
        '#prefix' => "<li>",
        '#suffix' => (check_plain($name) . "</li>"),
      );
    }
    $form['#submit'] = array("sitevars_delete_confirm_submit");
    return confirm_form(
      $form,
      t("Are you sure you want to delete @plural?", array('@plural' => (count($names) != 1 ? "these variables" : "this variable"))),
      "admin/config/system/sitevars",
      NULL,
      t("Delete")
    );
  }
  return array();
}

/**
 * Callback for sitevars_delete_confirm().
 *
 * handle "Delete" submit in confirmation form;
 * unset keys in 'sitevars_array'
 */
function sitevars_delete_confirm_submit(&$form, &$form_state) {
  if (isset($form_state['input']['delete_names'])) {
    $names = array();
    foreach ($form_state['input']['delete_names'] as $name => $value) {
      if ($name === $value) {
        $names[] = $value;
      }
    }
    if (count($names) != 0) {
      $vars = variable_get("sitevars_array", array());
      $num = 0;
      $list = "";
      foreach ($names as $name) {
        unset($vars[$name]);
        $num++;
        $list .= (($num != 1 ? ($num == count($names) ? " and " : ", ") : "") . "<strong>" . check_plain($name) . "</strong>");
      }
      variable_set("sitevars_array", $vars);
      $msg = t("@plural !list deleted.", array('@plural' => count($names) != 1 ? "Variables" : "Variable", '!list' => $list));
      drupal_set_message($msg, "warning");
      watchdog("sitevars", $msg, NULL, WATCHDOG_NOTICE);
    }
  }
}

/**
 * Callback for sitevars_form().
 *
 * handle "Save Changes" submit;
 * update values in 'sitevars_array'
 */
function sitevars_update_submit(&$form, &$form_state) {
  if (isset($form_state['input']['edit_names'])) {
    $vars = variable_get("sitevars_array", array());
    $names = array();
    foreach (array_keys($form_state['input']['edit_names']) as $name) {
      if (array_key_exists($name, $vars) && array_key_exists("value_" . $name, $form_state['input'])) {
        $value = trim($form_state['input']["value_" . $name]);
        if ($value != $vars[$name]) {
          $vars[$name] = $value;
          $names[] = $name;
        }
      }
    }
    if (count($names) != 0) {
      $num = 0;
      $list = "";
      foreach ($names as $name) {
        $num++;
        $list .= (($num != 1 ? ($num == count($names) ? " and " : ", ") : "") . "<strong>" . check_plain($name) . "</strong>");
      }
      variable_set("sitevars_array", $vars);
      $msg = t("@plural !list updated.", array('@plural' => count($names) != 1 ? "Variables" : "Variable", '!list' => $list));
      drupal_set_message($msg);
      watchdog("sitevars", $msg, NULL, WATCHDOG_INFO);
    }
  }
}

/**
 * Function sitevars_get().
 *
 * convenience function for obtaining value or values from 'sitevars_array';
 * obtain all variables:
 *   ()
 *   ->  array(name => value, ..)
 * obtain one variable by full name:
 *   (key)
 *   ->  $value
 * obtain variables by matching prefix:
 *   (key, TRUE)
 *   ->  array(key . suffix_1 => value_1, key . suffix_2,=> value_2, ..)
 * obtain several variables by full name:
 *   (array(key_1, key_2, ..))
 *   ->  array(key_1 => value_1, key_2 => value_2, ..)
 */
function sitevars_get($name_or_names = "", $name_is_prefix = FALSE) {
  $vars = variable_get("sitevars_array", array());
  if ($name_or_names === "") {
    return $vars;
  }
  if (!is_array($name_or_names)) {
    if (!$name_is_prefix) {
      return (array_key_exists($name_or_names, $vars) ? $vars[$name_or_names] : "");
    }
    else {
      $values = array();
      foreach ($vars as $name => $value) {
        if (strpos($name, $name_or_names) === 0) {
          $values[$name] = $value;
        }
      }
      return $values;
    }
  }
  $values = array();
  foreach ($name_or_names as $name) {
    $values[$name] = (array_key_exists($name, $vars) ? $vars[$name] : "");
  }
  return $values;
}
