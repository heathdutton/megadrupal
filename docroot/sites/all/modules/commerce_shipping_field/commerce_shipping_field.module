<?php

/**
 * @file
 * Defines an 'flat rate shipping field method' to allow a simple, flat rate price field 
 * to be used to calculate a product's shipping price.
 */



function commerce_shipping_field_field_attach_create_bundle($entity_type, $bundle){
  if ($entity_type != 'commerce_product') {
    return;
  }
  // Check the field exists.
  if (!field_info_instance('commerce_product', 'commerce_shipping_price', $bundle)) {
   commerce_price_create_instance('commerce_shipping_price', 'commerce_product', $bundle, t('Shipping Price'));
  }
}

/**
 * Implements hook_commerce_shipping_method_info().
 */
function commerce_shipping_field_commerce_shipping_method_info() {
  $shipping_methods = array();

  $shipping_methods['commerce_shipping_field_method'] = array(
    'title' => t('Product Shipping Price Field Method'),
    'description' => t('Defines a single flat rate service with a couple of service details.'),
  );

  return $shipping_methods;
}

/**
 * Implements hook_commerce_shipping_service_info().
 */
function commerce_shipping_field_commerce_shipping_service_info() {
  $shipping_services = array();

  $shipping_services['commerce_shipping_field_service'] = array(
    'title' => t('Field-Driven Shipping Service'),
    'description' => t('A simple shipping service based on a a per-product field value.'),
    'display_title' => t('Standard Shipping Field'),
    'shipping_method' => 'commerce_shipping_field_method',
    'price_component' => 'shipping',
    'callbacks' => array(
      'rate' => 'commerce_shipping_field_service_rate',
    ),
  );

  return $shipping_services;
}

/**
 * Shipping service callback: returns a base price array for a shipping service
 * calculated for the given order.
 */
function commerce_shipping_field_service_rate($shipping_service, $order) {  
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $line_items = $order_wrapper->commerce_line_items;
  $amount = 0;
  foreach ($line_items as $item) {
    $isfield = field_info_instance('commerce_product', 'commerce_shipping_price', $item->commerce_product->type->raw());
    // Ensure the field exists on this product type, and that it is not empty
    if ($isfield && isset($item->commerce_product->commerce_shipping_price)){
      $item_amount = $item->commerce_product->commerce_shipping_price->amount->raw() * $item->quantity->raw();
      $amount = $amount + $item_amount;
    }
  }
  return array(
    'amount' => $amount,
    'currency_code' => $order_wrapper->commerce_order_total->currency_code->value(),
    'data' => array(),
  );
}
