<?php

/**
 * @file
 *   Views sexy exposed module file.
 */

define('SEXY_EXPOSED_PATH', 'sites/all/libraries/ddcl');
define('SEXY_EXPOSED_VERSION', '1.3');

/**
 * Implements hook_form_FORM_ID_form_alter().
 */
function sexy_exposed_form_views_ui_config_item_form_alter(&$form, &$form_state) {
  // Check if we're on an expose settings form.
  if (!isset($form['options']['expose'])) {
    return;
  }
  // Check if exposed filter's type is select list, radios or checkboxes.
  if (!isset($form['options']['value']['#type'])) {
    return;
  }
  if (!in_array($form['options']['value']['#type'], array('select', 'radios', 'checkboxes'))) {
    return;
  }

  $view = $form_state['view'];

  // Get the display we are working with.
  // If it's for all pages, then use default display.
  if ($form['override']['dropdown']['#default_value'] == 'defaults') {
    $display_id = 'default';
  }
  else {
    $display_id = $form_state['display_id'];
  }
  $display = $view->display[$display_id];
  $field_id = $form_state['id'];

  // Initialize.
  $sexy = FALSE;
  $sexy_number = $sexy_width = 0;

  // Fetch default values for sexy exposed.
  // Check if sexy exposed is already set to this display.
  if (isset($display->display_options['filters'][$field_id]['expose']['sexy'])) {
    $sexy = $display->display_options['filters'][$field_id]['expose']['sexy'];
    $sexy_number = check_plain($display->display_options['filters'][$field_id]['expose']['sexy_number']);
    $sexy_width = check_plain($display->display_options['filters'][$field_id]['expose']['sexy_width']);
  }
  // Fall back to default.
  elseif (isset($view->display['default']->display_options['filters'][$field_id]['expose']['sexy'])) {
    $sexy = $view->display['default']->display_options['filters'][$field_id]['expose']['sexy'];
    $sexy_number = check_plain($view->display['default']->display_options['filters'][$field_id]['expose']['sexy_number']);
    $sexy_width = check_plain($view->display['default']->display_options['filters'][$field_id]['expose']['sexy_width']);
  }

  $form['options']['expose']['sexy'] = array(
    '#type' => 'checkbox',
    '#title' => t('Make it sexy'),
    '#description' => t('Use some jQuery magic to make this filter sexy.'),
    '#default_value' => ($sexy) ? $sexy : FALSE,
  );

  $form['options']['expose']['sexy_number'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of items'),
    '#description' => t('Optional. You can specify how many items should be visible in the drop down list. 0 means all.'),
    // Validate if value is a positive integer.
    '#default_value' => (is_numeric($sexy_number) && ($sexy_number > 0)) ? $sexy_number : 0,
    '#size' => 3,
    '#dependency' => array(
      'edit-options-expose-sexy' => array(TRUE)
    ),
  );

  $form['options']['expose']['sexy_width'] = array(
    '#type' => 'textfield',
    '#title' => t('Width'),
    '#field_suffix' => t('px'),
    '#description' => t('Optional. Specifies the desired width in pixels of the text display area. 0 means the width is calculated from the width of the option items.'),
    // Validate if value is a positive integer.
    '#default_value' => (is_numeric($sexy_width) && ($sexy_width > 0)) ? $sexy_width : 0,
    '#size' => 3,
    '#dependency' => array(
      'edit-options-expose-sexy' => array(TRUE)
    ),
  );

  $form['buttons']['submit']['#submit'][] = 'sexy_exposed_custom_submit';
}

function sexy_exposed_custom_submit($form, &$form_state) {
  $display_id = $form_state['display_id'];
  $view = $form_state['view'];

  // Check if settings are for all displays.
  if ($form_state['values']['override']['dropdown'] == 'default') {
    // If so, use default display.
    $display_id = 'default';
  }
  $display = &$view->display[$display_id];
  $field_id = $form_state['id'];

  $sexy = $form_state['values']['options']['expose']['sexy'];
  $sexy_number = check_plain($form_state['values']['options']['expose']['sexy_number']);
  $sexy_width = check_plain($form_state['values']['options']['expose']['sexy_width']);

  // Record values for sexy exposed.
  $display->display_options['filters'][$field_id]['expose']['sexy'] = $sexy;
  $display->display_options['filters'][$field_id]['expose']['sexy_number'] = $sexy_number;
  $display->display_options['filters'][$field_id]['expose']['sexy_width'] = $sexy_width;

  // Write to cache.
  views_ui_cache_set($view);
}

/**
 * Implements hook_views_pre_execute().
 */
function sexy_exposed_views_pre_execute(&$view) {
  $needs_sexy_love = array();

  // Collect filters that need some sexy love.
  foreach ($view->filter as $filter_id => $filter) {
    $options = &$filter->options;
    if ($options['exposed'] && !empty($options['expose']['sexy'])) {
      $needs_sexy_love['select#edit-' . drupal_html_id($options['expose']['identifier'])] = array(
        'sexyNumber' => $options['expose']['sexy_number'],
        'sexyWidth' => $options['expose']['sexy_width'],
      );
    }
  }

  if (!empty($needs_sexy_love)) {
    // Add necessary js files.
    drupal_add_library('system', 'ui.widget');

    $path = drupal_get_path('module', 'sexy_exposed');
    drupal_add_js(sexy_exposed_get_js());
    drupal_add_js($path . '/js/sexy_exposed.js');
    drupal_add_js(array('sexyExposed' => $needs_sexy_love), 'setting');

    // Add necessary css files.
    drupal_add_css(SEXY_EXPOSED_PATH . '/css/ui.dropdownchecklist.standalone.css');
    drupal_add_css($path . '/css/sexy_exposed.css');
  }
}

/**
 * Return dropdown-check-list filepath.
 */
function sexy_exposed_get_js() {
  // @TODO: Libraries integration.
  return SEXY_EXPOSED_PATH . '/js/ui.dropdownchecklist-1.3-min.js';
}

/**
 * Return installed version of dropdown-check-list.
 */
function sexy_exposed_get_version() {
  $version = 0;
  $pattern = '#DropDownCheckList v([0-9\.a-z]+)#';

  $ddcl_js = sexy_exposed_get_js();

  // Return the version of ddcl plugin.
  if (file_exists($ddcl_js)) {
    $ddcl_plugin = file_get_contents($ddcl_js, NULL, NULL, 0, 128);
    if (preg_match($pattern, $ddcl_plugin, $matches)) {
      $version = $matches[1];
    }
  }

  return $version;
}
