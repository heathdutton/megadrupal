<?php

/**
 * @file
 * Provides Area Blacklisting & Whitelisting functionality,
 * allowing you to specify which cannot complete checkout.
 */

define('COMMERCE_RESTRICT_AREA_FIELD_NAME', 'commerce_restrict_area_simple');

/**
 * Implements hook_menu().
 */
function commerce_restrict_area_menu() {
  $items = array();

  $items['admin/commerce/config/restrict-area'] = array(
    'title' => 'Restrict Area',
    'description' => 'Manage restrict area functionality.',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_restrict_area_settings_form'),
    'access arguments' => array('configure commerce restrict area'),
    'file' => 'includes/commerce_restrict_area.admin.inc',
  );
  $items['admin/commerce/config/restrict-area/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  // Add the menu items for the various Rules forms.
  $items['admin/commerce/config/restrict-area/rules'] = array(
    'title' => 'Rules',
    'description' => 'Administer the rules used for restrict areas.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_restrict_area_settings_rules_form'),
    'access arguments' => array('configure commerce restrict area'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/commerce_restrict_area.admin.inc',
  );
  $controller = new RulesUIController();
  $items += $controller->config_menu('admin/commerce/config/restrict-area/rules');
  $items['admin/commerce/config/restrict-area/rules/add'] = array(
    'title' => 'Add rule for restrict areas',
    'description' => 'Adds an additional rule configuration for restrict areas.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_restrict_area_rule_form', 'admin/commerce/config/restrict-area/rules'),
    'access arguments' => array('configure commerce restrict area'),
    'file path' => drupal_get_path('module', 'rules_admin'),
    'file' => 'rules_admin.inc',
    'type' => MENU_LOCAL_ACTION,
    'context' => MENU_CONTEXT_PAGE,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function commerce_restrict_area_permission() {
  $permissions = array();

  $permissions['configure commerce restrict area'] = array(
    'title' => t('Configure commerce restrict area'),
  );
  $permissions['bypass commerce restrict area'] = array(
    'title' => t('Bypass commerce restrict area validation'),
  );

  return $permissions;
}

/**
 * Implements hook_theme().
 */
function commerce_restrict_area_theme() {
  return array(
    'commerce_restrict_area_product_type' => array(
      'variables' => array('product_type' => NULL),
      'file' => 'includes/commerce_restrict_area.admin.inc',
    ),
  );
}

/**
 * Implements hook_forms().
 */
function commerce_restrict_area_forms($form_id, $args) {
  $forms = array();

  $forms['commerce_restrict_area_rule_form'] = array('callback' => 'rules_admin_add_reaction_rule');

  return $forms;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function commerce_restrict_area_form_commerce_restrict_area_rule_form_alter(&$form, &$form_state) {
  unset($form['settings']['help']);
  $form['settings']['tags']['#value'] = 'Commerce Restric Area';
  $form['settings']['event']['#type'] = 'value';
  $form['settings']['event']['#value'] = 'commerce_restrict_area_validation';
  $form['submit']['#suffix'] = l(t('Cancel'), 'admin/commerce/config/restrict-area/rules');
}

/**
 * Implements hook_commerce_order_presave().
 */
function commerce_restrict_area_commerce_order_presave($order) {
  // Check if order has address.
  $profiles = commerce_customer_profile_types();
  foreach ($profiles as $key => $profile) {
    if (property_exists($order, 'commerce_customer_' . $key)) {
      rules_invoke_all('commerce_restrict_area_validation', $order);
      break;
    }
  }
}

/**
 * Determines whether Restrict Area management is enabled on a product type.
 *
 * @param string $type
 *   The product type.
 *
 * @return boolean
 *   TRUE if Restrict Area management is enabled.
 */
function commerce_restrict_area_product_type_enabled($type) {
  $instance = field_info_instance('commerce_product', COMMERCE_RESTRICT_AREA_FIELD_NAME, $type);

  return (!empty($instance));
}

/**
 * Creates a required instance of a Restrict Area field on the specified bundle.
 *
 * @param string $field_name
 *   The name of the field; if it already exists, a new instance of the existing
 *   field will be created. For fields governed by the Commerce modules, this
 *   should begin with commerce_.
 * @param string $field_type
 *   The type of data to store.
 * @param boolean $required
 *   Determine if the field instance will be required.
 * @param string $entity_type
 *   The type of entity the field instance will be attached to.
 * @param string $bundle
 *   The bundle name of the entity the field instance will be attached to.
 * @param string $label
 *   The label of the field instance.
 * @param string $description
 *   The description of the field instance.
 * @param integer $weight
 *   The default weight of the field instance widget and display.
 */
function commerce_restrict_area_create_instance($field_name, $field_type, $required, $entity_type, $bundle, $label, $description = NULL, $weight = 0) {
  // Look for or add the specified Restrict Area field to the
  // requested entity bundle.
  $field = field_info_field($field_name);
  $instance = field_info_instance($entity_type, $field_name, $bundle);

  if (empty($field)) {
    $field = array(
      'field_name' => $field_name,
      'type' => $field_type,
      'cardinality' => 1,
      'entity_types' => array($entity_type),
      'translatable' => FALSE,
      'locked' => FALSE,
    );
    if ($field_type == 'list_boolean') {
      $field['settings'] = array(
        'allowed_values' => array(0, 1),
        'allowed_values_function' => '',
      );
    }
    $field = field_create_field($field);
  }

  if (empty($instance)) {
    $instance = array(
      'field_name' => $field_name,
      'entity_type' => $entity_type,
      'bundle' => $bundle,
      'label' => $label,
      'required' => $required,
      'settings' => array(),
      'display' => array(),
      'description' => $description,
      'default_value' => array(array('value' => "0")),
    );

    if ($field_type == 'list_boolean') {
      $instance['widget'] = array(
        'type' => 'options_onoff',
        'settings' => array('display_label' => TRUE),
      );
      $instance['display']['default'] = array(
        'label' => 'hidden',
        'type' => 'hidden',
      );
    }

    $entity_info = entity_get_info($entity_type);

    // Spoof the default view mode so its display type is set.
    $entity_info['view modes']['default'] = array();

    field_create_instance($instance);
  }
}

/**
 * Determines whether Restrict Area management is enabled on a product type.
 *
 * @param string $name
 *   The permission name.
 * @param object $account
 *   The user account.
 *
 * @return boolean
 *   Whether the user has permission or not.
 */
function commerce_restrict_area_user_has_permission($name, $account) {
  if (user_access($name, $account)) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Determines whether Restrict Area management is enabled on a product type.
 *
 * @param array $products
 *   An array with the removed products.
 *   - display_path: The product display path.
 *   - title: The product title.
 *
 * @return string
 *   The formatted message.
 */
function commerce_restrict_area_products_to_message($products) {
  $message = array();
  foreach ($products as $product) {
    $message[] = l($product['title'], $product['display_path'], array('absolute' => TRUE));
  }
  return implode(', ', $message) . '.';
}

/**
 * Determines whether the address is valid or not.
 *
 * @param object $order
 *   The order entity.
 *
 * @return mixed
 *   - Validate option: Boolean value whether the address is valid or not.
 *   - Validate all or remove options: An array with products can not be sold.
 *     - line_item_id: The line item id.
 *       - display_path: The product display path.
 *       - title: The product title.
 */
function commerce_restrict_area_order_validate($order, $op = 'validate') {
  $product_type_settings = variable_get('commerce_restrict_area_product_type_settings', array());
  $restrict_settings = variable_get('commerce_restrict_area_restrict_settings', array());
  $wrapper = entity_metadata_wrapper('commerce_order', $order);

  // If we have no restriction activated for any type of product,
  // do not have to validate anything.
  if (count($product_type_settings) == 0 && $op == 'validate') {
    return TRUE;
  }

  // Check all line-items.
  $line_items = array();
  foreach ($wrapper->commerce_line_items as $delta => $line_item_wrapper) {
    if (in_array($line_item_wrapper->type->value(), commerce_product_line_item_types())) {
      if ($op == 'validate' && !commerce_restrict_area_line_item_validate($wrapper, $line_item_wrapper, $product_type_settings, $restrict_settings)) {
        return FALSE;
      }
      elseif (($op == 'remove' || $op == 'validate_all') && !commerce_restrict_area_line_item_validate($wrapper, $line_item_wrapper, $product_type_settings, $restrict_settings)) {
        $line_items[$line_item_wrapper->line_item_id->value()] = array(
          'display_path' => $line_item_wrapper->commerce_display_path->value(),
          'title' => $line_item_wrapper->commerce_product->title->value(),
        );
        if ($op == 'remove') {
          $wrapper->commerce_line_items->offsetUnset($delta);
        }
      }
    }
  }

  if ($op == 'validate') {
    return TRUE;
  }
  elseif ($op == 'validate_all') {
    return $line_items;
  }
  elseif ($op == 'remove') {
    // Then delete the line items.
    if (!empty($line_items)) {
      commerce_line_item_delete_multiple(array_keys($line_items));
    }
    return $line_items;
  }
}

/**
 * Determines whether the address is valid or not.
 *
 * @param object $order_wrapper
 *   The order entity wrapper.
 * @param object $line_item_wrapper
 *   The line-item entity wrapper.
 * @param array $product_type_settings
 *   An array with all enabled product types settings.
 *   - product_type: The machine name of the type.
 *     - enabled: Restriction status.
 *     - restrict_type: The type of restriction.
 * @param array $restrict_settings
 *   An array with all restrict settings.
 *   - product_type: The machine name of the type or default key.
 *     - countries: The list for each vountry with restriction.
 *     - country_code: The restrictions settings for each country.
 *       - addresses: Which addresses should be filtered.
 *       - mode: Filter mode. Whether to "blacklist" or "whitelist" address.
 *       - postal_code: Postal codes to be filtered, comma seperated. Partial
 *                      postal codes are supported, e.g. PL, EX5.
 *       - locality: Localities to be filtered, comma seperated. If locality
 *                   addressfield plugin have ISO format support, better in
 *                   ISO format. Otherwise is not recommend use this filter.
 *       - administrative_area: Administrative areas to be filtered, comma
 *                              seperated. If administrative area addressfield
 *                              plugin have ISO format support, better in ISO
 *                              format. Otherwise is not recommend use this
 *                              filter.
 *
 * @return boolean
 *   Whether the address is valid or not for the line-item.
 */
function commerce_restrict_area_line_item_validate($order_wrapper, $line_item_wrapper, $product_type_settings, $restrict_settings) {
  // Get product type.
  $product = commerce_product_load($line_item_wrapper->commerce_product->raw());
  $type = $product->type;
  // Get settings for this line item type.
  // If there is no settings, there is no restriction.
  if (empty($product_type_settings[$type])) {
    return TRUE;
  }
  $restrict_type = $product_type_settings[$type]['restrict_type'];
  if ($restrict_type == 'default' || $restrict_type == 'same') {
    // If empty values, there is no restriction.
    $field = field_get_items('commerce_product', $product, COMMERCE_RESTRICT_AREA_FIELD_NAME);
    if (!$field) {
      return TRUE;
    }
  }
  if ($restrict_type == 'default_all' || $restrict_type == 'default') {
    $settings = $restrict_settings['default'];
  }
  else {
    $settings = $restrict_settings[$type];
  }

  // Validate address.
  foreach ($settings['countries'] as $country) {
    $profile = $settings[$country]['addresses'];
    if ($order_wrapper->__isset('commerce_customer_' . $profile)) {
      $mode = ($settings[$country]['mode'] == 'whitelist') ? TRUE : FALSE;
      $postal_codes = drupal_strtoupper(preg_replace('/\s+/', ' ', $settings[$country]['postal_code']));
      $localities = drupal_strtoupper(preg_replace('/\s+/', ' ', $settings[$country]['locality']));
      $administrative_areas = drupal_strtoupper(preg_replace('/\s+/', ' ', $settings[$country]['administrative_area']));

      $instance = field_info_instance('commerce_customer_profile', 'commerce_customer_address', $profile);
      $address = $order_wrapper->{'commerce_customer_' . $profile}->{$instance['field_name']}->value();
      if ($address['country'] == $country) {
        // Check the partial o total postal code.
        foreach (explode(',', $postal_codes) as $postal_code) {
          $postal_code = trim($postal_code);
          // If found, return TRUE. If blacklist is enabled, return FALSE.
          if (drupal_strtoupper($address['postal_code']) == $postal_code || strpos(drupal_strtoupper($address['postal_code']), $postal_code) === 0) {
            return ($mode) ? TRUE : FALSE;
          }
        }
        // Check the locality.
        foreach (explode(',', $localities) as $locality) {
          $locality = trim($locality);
          // If found, return TRUE. If blacklist is enabled, return FALSE.
          if (drupal_strtoupper($address['locality']) == $locality) {
            return ($mode) ? TRUE : FALSE;
          }
        }
        // Check the administrative area.
        foreach (explode(',', $administrative_areas) as $administrative_area) {
          $administrative_area = trim($administrative_area);
          // If found, return TRUE. If blacklist is enabled, return FALSE.
          if (drupal_strtoupper($address['administrative_area']) == $administrative_area) {
            return ($mode) ? TRUE : FALSE;
          }
        }
        // If no found, return FALSE. If blacklist is enabled, return TRUE.
        return ($mode) ? FALSE : TRUE;
      }
    }
  }
}
