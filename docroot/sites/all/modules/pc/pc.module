<?php

/**
 * @file
 * Primary hooks for PHP Console module.
 */

const PC_LIBRARY_PATH = 'sites/all/libraries/php-console/src/PhpConsole';

/**
 * Implements hook_init().
 */
function pc_init() {

  // Initialize PHP console.
  if (!pc_init_pc()) {
    return;
  }

  $debugging_information = variable_get('pc_debugging_info');

  if (!empty($debugging_information['variables'])) {
    pc($GLOBALS['conf'], 'Variables');
  }
  if (!empty($debugging_information['logged_user'])) {
    pc($GLOBALS['user'], 'Logged user');
  }
  if (!empty($debugging_information['menu_item'])) {
    pc(menu_get_item(), 'Menu item');
  }
  if (!empty($debugging_information['cookie'])) {
    pc($_COOKIE, 'Cookie');
  }
  if (!empty($debugging_information['session'])) {
    pc($_SESSION, 'Session');
  }
  if (!empty($debugging_information['post'])) {
    pc($_POST, 'Post');
  }
  if (!empty($debugging_information['get'])) {
    pc($_GET, 'Get');
  }
  if (!empty($debugging_information['server'])) {
    pc($_SERVER, 'Server');
  }

  drupal_register_shutdown_function('pc_shutdown');

}

/**
 * Implements hook_menu().
 */
function pc_menu() {
  $items['admin/config/development/php-console'] = array(
    'title' => 'PHP console',
    'description' => 'Configure PHP console.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pc_settings_form'),
    'access arguments' => array('administer PHP Console'),
    'file' => 'pc.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function pc_permission() {
  return array(
    'administer PHP Console' => array(
      'title' => t('Administer PHP console'),
      'restrict access' => TRUE,
    ),
    'execute remote PHP code' => array(
      'title' => t('Execute remote PHP code'),
      'restrict access' => TRUE,
    ),
    'view debug information' => array(
      'title' => t('View debug information'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_entity_load().
 */
function pc_entity_load($entities, $type) {
  $debugging_information = variable_get('pc_debugging_info');
  if (!empty($debugging_information['loaded_entities'])) {
    $label = drupal_ucfirst(str_replace('_', ' ', $type));
    pc($entities, $label);
  }
}

/**
 * Implements of hook_form_alter().
 */
function pc_form_alter(&$form, &$form_state, $form_id) {
  $debugging_information = variable_get('pc_debugging_info');
  if (!empty($debugging_information['forms'])) {
    $label = drupal_ucfirst(str_replace('_', ' ', $form_id));
    pc($form, $label);
  }
}

/**
 * Implements hook_watchdog().
 */
function pc_watchdog($log_entry) {
  $debugging_information = variable_get('pc_debugging_info');
  if (!empty($debugging_information['watchdog'])) {
    $message = htmlspecialchars_decode(strip_tags((t($log_entry['message'], (array) $log_entry['variables']))));
    pc($log_entry['type'] . ': ' . $message, 'Watchdog');
  }
}

/**
 * Implements hook_mail_alter().
 */
function pc_mail_alter(&$message) {
  $debugging_information = variable_get('pc_debugging_info');
  if (!empty($debugging_information['emails'])) {
    pc($message, 'Email');
  }
}

/**
 * Get requirements message.
 */
function pc_requirements_message() {
  $library_link = l(
    t('PHP Console library'),
    'https://github.com/barbushin/php-console',
    array('attributes' => array('target' => 'blank'))
  );
  return t('You need to download the !library_link and extract the archive to the <em>php-console</em> directory in the <em>sites/all/libraries</em> directory on your server.', array('!library_link' => $library_link));
}

/**
 * Check whether the IP is allowed to connect to PHP Console.
 */
function pc_check_ip($ip) {
  foreach (pc_get_ip_masks() as $ip_mask) {
    if (preg_match('~^' . str_replace(array('.', '*'), array('\.', '\w+'), $ip_mask) . '$~i', $ip)) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Extract IP masks.
 */
function pc_get_ip_masks() {
  $ips = variable_get('pc_ips');
  $ips = explode("\n", $ips);
  $ips = array_map('trim', $ips);
  $ips = array_filter($ips, 'strlen');
  return $ips;
}

/**
 * Initialize PHP Console.
 */
function pc_init_pc() {

  static $connector;

  // Prevent re-initialization.
  if ($connector) {
    return TRUE;
  }

  if (drupal_is_cli()) {
    return FALSE;
  }

  if (!file_exists(PC_LIBRARY_PATH . '/__autoload.php')) {
    return FALSE;
  }

  require_once PC_LIBRARY_PATH . '/__autoload.php';

  // File storage looks more stable than session one.
  $pc_data_file = variable_get('file_temporary_path', file_directory_temp()) . '/pc.data';
  PhpConsole\Connector::setPostponeStorage(new PhpConsole\Storage\File($pc_data_file, FALSE));

  $connector = PhpConsole\Connector::getInstance();

  // Initialize only for clients that have Chrome extension installed.
  if (!$connector->isActiveClient()) {
    return FALSE;
  }

  if (variable_get('pc_password_enable')) {
    $connector->setPassword(variable_get('pc_password'));
  }

  // Enable error handler.
  if (variable_get('pc_track_errors') && user_access('view debug information')) {

    // Drupal error handler depends on backtrace information.
    // So we have use own error handler.
    // See _drupal_error_handler_real().
    set_error_handler('pc_error_handler');
    $handler = PhpConsole\Handler::getInstance();
    if (!$handler->isStarted()) {
      $handler->start();
      $connector->setSourcesBasePath(DRUPAL_ROOT);
    }
  }

  // Restrict access by IP masks.
  if ($ips = pc_get_ip_masks()) {
    $connector->setAllowedIpMasks($ips);
  }

  // Configure eval provider.
  if (variable_get('pc_password_enable') && variable_get('pc_remote_php_execution') && user_access('execute remote PHP code')) {
    $eval_provider = $connector->getEvalDispatcher()->getEvalProvider();
    $eval_provider->setOpenBaseDirs(array(DRUPAL_ROOT));
    $connector->startEvalRequestsListener();
  }

  return TRUE;
}

/**
 * Print a variable to the browser console.
 *
 * @param mixed $variable
 *   An arbitrary value to output.
 * @param string $label
 *   Optional $label for identifying the output.
 */
function pc($variable, $label = ' ') {

  if (!pc_init_pc()) {
    return;
  }

  if (!user_access('view debug information')) {
    return;
  }

  // Do not catch requests to admin menu cache.
  if (arg(1) == 'admin_menu') {
    return;
  }

  $connector = PhpConsole\Connector::getInstance();
  if (!$connector->isActiveClient()) {
    return;
  }

  $connector
    ->getDebugDispatcher()
    ->dispatchDebug($variable, $label);
}

/**
 * Provides custom PHP error handling.
 */
function pc_error_handler($error_level, $message, $filename, $line, $context) {
  if ($error_level & error_reporting()) {
    $types = drupal_error_levels();
    list($severity_msg, $severity_level) = $types[$error_level];

    // Remove pc calls from backtrace.
    $backtrace = array_slice(debug_backtrace(), 2);
    $caller = _drupal_get_last_caller($backtrace);;

    if (!function_exists('filter_xss_admin')) {
      require_once DRUPAL_ROOT . '/includes/common.inc';
    }

    // We treat recoverable errors as fatal.
    _drupal_log_error(array(
        '%type' => isset($types[$error_level]) ? $severity_msg : 'Unknown error',
        // The standard PHP error handler considers that the error messages
        // are HTML. We mimick this behavior here.
        '!message' => filter_xss_admin($message),
        '%function' => $caller['function'],
        '%file' => $caller['file'],
        '%line' => $caller['line'],
        'severity_level' => $severity_level,
      ), $error_level == E_RECOVERABLE_ERROR);
  }
}

/**
 * Runs on shutdown to display developer information.
 *
 * pc_init() registers this function as a shutdown function.
 */
function pc_shutdown() {

  $debugging_information = variable_get('pc_debugging_info');

  // Just make it as devel module does.
  if (!empty($debugging_information['execution_time'])) {
    pc(timer_read('page') . ' ms', 'Execution time');
  }
  if (!empty($debugging_information['memory_usage'])) {
    pc(round(memory_get_usage() / 1024 / 1024, 2), 'Memory usage');
  }
  if (!empty($debugging_information['peak_memory_usage'])) {
    pc(round(memory_get_peak_usage(TRUE) / 1024 / 1024, 2), 'Peak memory usage');
  }

}
