<?php

/**
 * Implememts hook_hook_info().
 */
function analytics_hook_info() {
  $info['analytics_service_info'] = array('group' => 'analytics');
  $info['analytics_service_info_alter'] = array('group' => 'analytics');
  return $info;
}

/**
 * Implements hook_menu().
 */
function analytics_menu() {
  $items['admin/config/services/analytics/settings'] = array(
    'title' => 'Settings',
    'description' => 'Enable and configure analytics services and settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('analytics_settings_form'),
    'access arguments' => array('administer analytics'),
    'file' => 'analytics.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function analytics_theme() {
  $info['analytics_js'] = array(
    'variables' => array('js' => NULL),
    'file' => 'analytics.theme.inc',
  );

  return $info;
}

/**
 * Implements hook_page_build().
 */
function analytics_page_build(&$page) {
  if (variable_get('analytics_privacy_dnt', TRUE)) {
    drupal_add_js(drupal_get_path('module', 'analytics') . '/analytics.js', array('every_page' => TRUE, 'weight' => -100));
  }

  if (!variable_get('analytics_disable_page_build', FALSE)) {
    $context = array('page' => $page);
    if ($output = analytics_get_output($context)) {
      $page += array('page_bottom' => array());
      $page['page_bottom'] += $output;
    }
  }
}

function analytics_get_output(array $context = array()) {
  $results = array();
  $services = analytics_service_load_enabled();
  foreach ($services as $service) {
    try {
      $instance = analytics_get_service_instance($service);
      if ($instance && $instance->canTrack($context) && $output = $instance->getOutput($context)) {
        $results['analytics_' . $service->machine_name] = $output;
      }
    }
    catch (Exception $e) {
      watchdog_exception('analytics', $e);
    }
  }
  return $results;
}

function analytics_get_service_instance($service) {
  $info = analytics_get_service_info();
  if (!empty($info[$service->service]['class']) && class_exists($info[$service->service]['class'])) {
    $instance = new $info[$service->service]['class']($service);
    return $instance;
  }
  else {
    throw new Exception("Could not find analytics service class for $service->service.");
  }
}

function analytics_get_service_info($service = NULL, $reset = FALSE) {
  $info = &drupal_static(__FUNCTION__, array());

  if ($reset) {
    $info = NULL;
    cache_clear_all('analytics-info:', 'cache', TRUE);
  }

  $cid = 'analytics-info:' . $GLOBALS['language']->language;
  if (!isset($info[$cid])) {
    $info[$cid] = array();
    if ($cache = cache_get($cid)) {
      $info[$cid] = $cache->data;
    }
    else {
      $info[$cid] = module_invoke_all('analytics_service_info');
      drupal_alter('analytics_service_info', $info[$cid]);
      cache_set($cid, $info[$cid]);
    }
  }

  if (isset($service)) {
    return !empty($info[$cid][$service]) ? $info[$cid][$service] : FALSE;
  }
  else {
    return $info[$cid];
  }
}

function analytics_service_load_enabled() {
  ctools_include('export');
  $services = ctools_export_crud_load_all('analytics_service');
  foreach ($services as $id => $service) {
    if (!empty($service->disabled)) {
      unset($services[$id]);
    }
  }
  return $services;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function analytics_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && $plugin == 'export_ui') {
    return 'lib/' . $plugin;
  }
}

function analytics_service_add_service_options() {
  $results = array();
  foreach (analytics_get_service_info(NULL, TRUE) as $key => $service) {
    if (!empty($service['multiple'])) {
      $results[$key] = $service['label'];
    }
    else {
      ctools_include('export');
      if (ctools_export_crud_load_all('analytics_service', array('service' => $key))) {
        continue;
      }
      $results[$key] = $service['label'];
    }
  }
  return $results;
}

/**
 * Implements hook_cron().
 */
function analytics_cron() {
  if (!variable_get('analytics_cache_urls', FALSE)) {
    variable_del('analytics_cached_urls');
    return;
  }

  $directory = 'public://analytics';
  if (!file_prepare_directory($directory)) {
    variable_del('analytics_cached_urls');
    return;
  }

  $cached_urls = array();
  foreach (analytics_service_load_enabled() as $service) {
    $instance = analytics_get_service_instance($service);
    if ($urls = $instance->getCacheableUrls()) {
      $destination = 'public://analytics/' . $service->machine_name;
      foreach ($urls as $url) {
        if (isset($cached_urls[$url])) {
          // If this file has already been cached, don't download it again.
          continue;
        }
        if (!file_prepare_directory($destination)) {
          continue;
        }
        if ($file = system_retrieve_file($url, $destination, FALSE, FILE_EXISTS_REPLACE)) {
          $cached_urls[$url] = $file;
        }
      }
    }
  }

  variable_set('analytics_cached_urls', $cached_urls);
}

/**
 * Implements hook_file_uri_alter().
 */
function analytics_file_url_alter(&$uri) {
  $cached_urls = &drupal_static(__FUNCTION__);

  if (!isset($cached_urls)) {
    $cached_urls = variable_get('analytics_cached_urls', array());
  }

  if (isset($cached_urls[$uri])) {
    $uri = $cached_urls[$uri];
  }
}

function analytics_url($url, $relative = TRUE) {
  $url = file_create_url($url);
  if ($relative) {
    $url = preg_replace('/^https?:/', '', $url);
  }
  return $url;
}
