<?php

/**
 * @file
 * Contains capture+ implementation for webform.
 */

/**
 * Implements hook_menu().
 */
function webform_captureplus_menu() {
  $items['node/%webform_menu/webform/captureplus'] = array(
    'title' => 'Capture+ settings',
    'page callback' => 'webform_captureplus_page',
    'page arguments' => array(1),
    'access arguments' => array('administer webform capture plus'),
    'file' => 'includes/admin.inc',
    'weight' => 6,
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function webform_captureplus_theme($existing, $type, $theme, $path) {
  return array(
    'webform_captureplus_page' => array(
      'variables' => array('node' => NULL, 'form' => NULL),
      'file' => 'includes/theme.inc',
    ),
    'webform_captureplus_form' => array(
      'render element' => 'form',
      'file' => 'includes/theme.inc',
    ),
  );
}

/**
 * Implements hook_permission().
 */
function webform_captureplus_permission() {
  return array(
    'administer webform capture plus' => array(
      'title' => t('Administer webform capture plus'),
    ),
  );
}

/**
 * Implements hook_form_alter().
 *
 * Add capture+ settings
 */
function webform_captureplus_form_alter(&$form, $form_state, $form_id) {
  global $language;
  static $called_forms = array();

  if (strstr($form_id, 'webform_client_form_') && isset($form['submitted'])) {
    if (isset($form['#webform_captureplus_js'])) {
      return;
    }
    $nid = $form['details']['nid']['#value'];
    if (in_array($nid, $called_forms)) {
      //return;
    }
    else {
      $called_forms[] = $nid;
    }

    $settings = WebformCapturePlusSettings::createFromNid($nid);
    if (is_object($settings)) {
      $js_settings = array();
      $messages = array();
      $header = array();

      // Allow other modules to update the settings.
      drupal_alter('webform_captureplus_settings', $settings);

      // get the element names.
      $elements_name = array();
      $name = array();
      _webform_captureplus_get_elements_name($form['submitted'], $elements_name, $name);

      $field_group = $settings->getFieldsByGroup($elements_name);
      $config = $settings->getConfigAsArray() + array('key' => variable_get('webform_captureplus_key', NULL));
      $message_catalogue = $settings->getMessages();

      if (is_object($message_catalogue)) {
        if ($messages = $message_catalogue->all('messages')) {
          // @todo: we may want to set the language as well?
          $messages = array($message_catalogue->getLocale() => $messages);
        }
        $header = $settings->getMessages()->all('header');
      }

      foreach ($field_group as $key => $fields) {
        if (!empty($fields)) {
          $js_settings[$key] = array_filter(array(
              'fields' => $fields,
              'messages' => $messages,
              'header' => $header
            )) + $config;
        }
      }

      //can't add javascript in this function or it will not be added if the
      // form is built from cache.  Need to run "after_build" function
      $form['#after_build'][] = 'webform_captureplus_add_js';

      //store JavaScript variable for the webform_captureplus_add_js function
      $form['#webform_captureplus_js'] = array('webform_captureplus_' . $form_id => $js_settings);

    }
  }
}

/**
 * Helper to get element names.
 */
function _webform_captureplus_get_elements_name($components, &$names, &$name) {
  $child = element_children($components);
  if (!empty($child)) {
    foreach ($child as $component) {
      $name[] = $component;
      _webform_captureplus_get_elements_name($components[$component], $names, $name);
      array_pop($name);
    }
  }
  else {
    if (isset($components['#webform_component']['cid']) && !empty($name)) {
      $names[$components['#webform_component']['cid']] = 'submitted[' . implode('][', $name) . ']';
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function webform_captureplus_form_webform_admin_settings_alter(&$form, &$form_state, $form_id) {
  module_load_include('inc', 'webform_captureplus', 'includes/admin');
  $capture_plus_version = variable_get('webform_captureplus_version', '3.20');

  $fields = webform_captureplus_get_field_mappings();
  $field_options = array_combine($fields, $fields);
  ksort($field_options);

  $default_fields = array(
    'Id',
    'Label',
    'PostalCode',
    'Line1',
    'Line2',
    'City', 'Company',
    'CountryIso2',
    'CountryIso3',
    'CountryIsoNumber',
    'CountryName',
  );

  $form['captureplus'] = array(
    '#type' => 'fieldset',
    '#title' => t('Capture+ settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#weight' => 19,
  );

  $form['captureplus']['webform_captureplus_key'] = array(
    '#title' => t('Capture+ API key'),
    '#type' => 'textfield',
    '#default_value' => variable_get('webform_captureplus_key', NULL),
  );
  $form['captureplus']['webform_captureplus_domain'] = array(
    '#title' => t('Capture+ domain'),
    '#type' => 'textfield',
    '#default_value' => variable_get('webform_captureplus_domain', 'services.postcodeanywhere.co.uk'),
    '#description' => t('Capture+ domain to make service calls.'),
  );
  $form['captureplus']['webform_captureplus_version'] = array(
    '#title' => t('Capture+ API version'),
    '#type' => 'textfield',
    '#default_value' => $capture_plus_version,
    '#description' => t('Capture+ API version'),
  );
  $form['captureplus']['webform_captureplus_allowed_fields'] = array(
    '#title' => t('Allowed fields'),
    '#type' => 'checkboxes',
    '#options' => $field_options,
    '#default_value' => variable_get('webform_captureplus_allowed_fields', $default_fields),
    '#description' => t('Allowed fields to map in webform. Check <a href="!link">Capture+ documentation</a> for more details.', array('!link' => 'http://www.pcapredict.com/support/webservice/captureplus/interactive/retrieve/' . $capture_plus_version . '/')),
  );
  $form['captureplus']['webform_captureplus_max_group'] = array(
    '#title' => t('Maximum number of address look ups in a form'),
    '#type' => 'textfield',
    '#default_value' => variable_get('webform_captureplus_max_group', 5),
    '#description' => t('Maximum number of distinct address field look ups allowed in a form.'),
  );

}

/**
 * Function run #after_build on webform.
 *
 * This ensures that Javascript is added even if form is built from cache.
 *
 * @param array $form
 * @param array $form_state
 *
 * @return array
 *  The form
 */
function webform_captureplus_add_js(&$form, $form_state) {
  // If the form is being rebuilt we need to reset the previous settings,
  // otherwise array_merge_recursive() will turn string values into arrays.
  $javascript = &drupal_static('drupal_add_js', array());
  foreach ($javascript['settings']['data'] as $delta => $settings) {
    if (key($settings) == 'webform_captureplus') {
      unset($javascript['settings']['data'][$delta]);
      break;
    }
  }
  drupal_add_js($form['#webform_captureplus_js'], array(
    'type' => "setting",
    'scope' => JS_DEFAULT
  ));
  drupal_add_js(drupal_get_path('module', 'webform_captureplus') . '/js/webform_captureplus.js');

  // Including Capture+ js and css.
  $capture_plus_domain = variable_get('webform_captureplus_domain', 'services.postcodeanywhere.co.uk');
  $capture_plus_version = variable_get('webform_captureplus_version', '3.20');
  drupal_add_js("//$capture_plus_domain/js/address-$capture_plus_version.min.js", array('type' => 'external'));
  drupal_add_css("//$capture_plus_domain/css/address-$capture_plus_version.min.css", array('type' => 'external'));

  return $form;
}
