<?php


/**
 * Implements hook_permission().
 */
function telvue_permission() {
  $permissions = array(
    'administer telvue' => array(
      'title' => t('Administer Telvue'),
      'description' => t('Allows users to configure Telvue settings.'),
      'restrict access' => TRUE,
    ),
  );

  return $permissions;
}


/**
 * Implements hook_menu().
 */
function telvue_menu() {

  // Standard Administration settings.
  $items['admin/config/system/telvue'] = array(
    'title' => 'Telvue Configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('telvue_admin_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer telvue'),
    'description' => 'Configure system settings for Telvue integration.',
  );
  
  return $items;
}

/**
 * Builds the admininstration settings form.
 */
function telvue_admin_settings($form, &$form_state) {
  $form = array();
  
  if (variable_get('telvue_uri', NULL)) {
    $version = telvue_software_version(variable_get('telvue_uri', NULL), variable_get('telvue_api_key', NULL));
    
    if (isset($version['software_version'])) {
	  drupal_set_message(t('Successfully communicating with the Telvue.  Telvue is running version ') . $version['software_version']);
    } else {
      if ($version['status'] == 'Access Denied') {
        drupal_set_message(t('Connected to Telvue, but API key is either not included or not correct.  API Key is required for advanced features like Telvue Push.'), 'warning');
      } else {
        drupal_set_message(t('There is a problem communicating with the server. Please check the URI.'), 'error');
      }
    }
  }
  
  $form['telvue_uri'] = array(
    '#type' => 'textfield',
    '#title' => t('URI'),
    '#size' => 50,
    '#maxlength' => 50,
    '#default_value' => variable_get('telvue_uri', NULL),
    '#description' => t('IP address or URL of the Telvue server including the :3000 (ie. http://b1000.yourdomain.org:3000 or https://172.25.0.xx:3000)'),
  );
  
  $form['telvue_connection_error'] = array(
    '#type' => 'textarea',
    '#title' => t('Connection Error Message'),
    '#rows' => 10,
    '#cols' => 5,
    '#default_value' => variable_get('telvue_connection_error', t('Unable to update')),
    '#description' => t('Enter the message users will see in the blocks if Drupal cannot connect to the Telvue API.  If left blank, the block will not be displayed.'),
  );
  
  $form['telvue_cache'] = array(
    '#type' => 'checkbox',
    '#title' => t('Cache results from API when possible'),
    '#default_value' => variable_get('telvue_cache', 0),
    '#description' => t(''),
  );
  
  $form['telvue_user'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#size' => 25,
    '#maxlength' => 25,
    '#default_value' => variable_get('telvue_user', NULL),
    '#description' => t('This is a user on the Telvue server with the API option enabled.'),
  );
  
  $form['telvue_api_key'] = array(
    '#type' => 'textfield',
    '#title' => t('API Key'),
    '#size' => 25,
    '#maxlength' => 25,
    '#default_value' => variable_get('telvue_api_key', NULL),
    '#description' => t(''),
  );

  $form['telvue_verbose_logging'] = array(
    '#type' => 'checkbox',
    '#title' => t('Verbose Logging Mode'),
    '#default_value' => variable_get('telvue_verbose_logging', 0),
    '#description' => t('This option will add log messages at several points in during the API connections making it easier to diagnose configuration issues.'),
  );

  $form = system_settings_form($form);
  return ($form);
}

function telvue_hms2sec($hms) {
	list($h, $m, $s) = explode (":", $hms);
	$seconds = 0;
	$seconds += (intval($h) * 3600);
	$seconds += (intval($m) * 60);
	$seconds += (intval($s));
	return $seconds;
}


/**
 * Implementation of Telvue APIs
 * http://www.telvue.com/support/product-documentation/princeton-server-api-docs/content-methods/
 * 
 */

/**
 * Pushes program to Telvue server based on field mapping in custom module
 * 
 */
function telvue_addprogram($program, $server) {
/*


 $rating = $airing_items[$s]['adult'] ? ' (TV-MA) ' : NULL;
 $program_code = $airing_items[$s]['nid'];
 
 $program = $airing_items[$s]['title'] . $rating;
 $delete_datetime = date('Y-m-d g:i P', time() + (30 * 24 * 60 * 60));
 $ingest_datetime = date('Y-m-d g:i P', time());
 $expected_duration = $airing_items[$s]['duration'];
 $expected_filename = $airing_items[$s]['filename'];
 
*/
 
 if (!isset($program['delete_datetime'])) {
  // if it isn't set, use 30 days
  $program['delete_datetime'] = date('Y-m-d g:i P', time() + (30 * 24 * 60 * 60));
 }
 
 if (!isset($program['ingest_datetime'])) {
   $program['import_datetime'] = date('Y-m-d g:i P', time());
 }
 
 
 if (!$program['expected_filename'] || !$program['expected_duration']) {
   return 'Failed';
 }

  
 try {
   $service = new SoapClient($server . '/program_service/wsdl');
   $result = $service->AddProgram(
     new SoapVar('<value xsi:nil="true" />', XSD_ANYXML),
     $program['program'],
     $program['episode'],
     $program['episode_code'],
     $program['description'],
     $program['delete_datetime'],
     $program['import_datetime'],
     $program['expected_duration'],
     $program['expected_filename'],
     $program['contributor'],
     $program['location'],
     $program['username']
   );
  
   //http://www.telvue.com/support/product-documentation/princeton-server-api-docs/content-methods/using-soap-and-ruby-to-add-a-tbd-content-record/

    //'M8',  // program_code
    //'Example TBD Program', //program
    //'S8', // episode
    //'8', // episode_code
    //'This is an example TBD added via soap.', // description
    //new SoapVar('<value xsi:nil="true" />', XSD_ANYXML), // delete_datetime
    //'2008-10-21 14:39:23-04:00', //import_datetime
    //80, //expected_duration
    //'exampled_tbd.mpg', //expected_filename
    //'Poor Steve', //contributor
    //'Princeton, NJ', // location
    //'psgadmin' // username

 
   if ($result[0] == 'SUCCEEDED') {
     $return = t('File successfully transfered');
     watchdog('Telvue', 'telvue_addprogram: Succeeded');
   }
   else {
     $return = t('Transfer failed. ') . $result[1];
     watchdog('Telvue', 'telvue_addprogram: Failed ' . $result[1]);
    }
  } // end try
  
  catch (SoapFault $fault) {
    trigger_error("The following SOAP Error was generated, SOAP Fault: (faultcode: {$fault->faultcode}, faultstring: {$fault->faultstring})", E_USER_ERROR);
  }// catch
  
  
  return $return;
}

/**
 * Edit Program on Telvue server based on ProgramID for the server
 *
 */
function telvue_editprogram($program, $server) {

}

/**
 * Deletes Program on Telvue server based on ProgramID for the server
 *
 */
function telvue_deleteprogram($programid, $server) {
  $username = 'soap';  //@TODO: set to vailable defined in module
  $client = new SoapClient($server['ip'] . '/program_service/wsdl');
  $soap_result = $client->__soapCall("DeleteProgram", array($program_id, $username));
  return $soap_result;
}

/**
 * Gets Software Version from Telvue server
 *
 */
function telvue_software_version($server, $apikey) {
 $url = $server . '/xml/software_version?api_key=' . $apikey;
 $response = simplexml_load_file($url);
  
 $json = json_encode($response);
 $array = json_decode($json,TRUE);
  
 return $array;
}


