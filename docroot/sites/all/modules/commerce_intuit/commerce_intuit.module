<?php

/**
 * @file
 * Provides intuit payment method for Drupal Commerce.
 */

/**
 * Implements hook_permission().
 */
function commerce_intuit_permission() {
  return array(
    'administer intuit' => array(
      'title' => t('Administer Intuit'),
      'description' => t('Perform administrative actions with Intuit.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function commerce_intuit_menu() {
  $items = array();

  $items['admin/commerce/config/payment-methods/manage/commerce_payment_commerce_intuit'] = array(
    'title' => 'Intuit',
    'description' => 'Provides configuration options for the Intuit payment api.',
    'access arguments' => array('administer intuit'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_intuit_admin_settings'),
    'file' => 'commerce_intuit.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_intuit_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_intuit'] = array(
    'title' => variable_get('commerce_intuit_title', 'Intuit Hosted Payment'),
    'description' => t('Intuit Payment'),
    'active' => TRUE,
  );

  return $payment_methods;
}

/**
 * Form used to collect Intuit data.
 *
 * @param array $payment_method
 *   The payment method instance object used to charge this payment.
 * @param array $pane_values
 *   The pane values.
 * @param array $checkout_pane
 *   The checkout pane.
 * @param Object $order
 *   The order object the payment applies to.
 */
function commerce_intuit_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form = array();

  $form['intuit_credit_card']['number'] = array(
    '#type' => 'textfield',
    '#title' => t('Credit Card Number'),
    '#description' => t('Your credit card number.'),
    '#required' => TRUE,
    '#size' => 18,
    '#maxlength' => 16,
  );

  // Get Commerce Months and Prepend Numbers For Accessibility.
  $expiry_months = commerce_months();
  foreach (array_keys($expiry_months) as $month) {
    $expiry_months[$month] = $month . ' - ' . $expiry_months[$month];
  }

  $form['intuit_credit_card']['exp_month'] = array(
    '#type' => 'select',
    '#title' => t('Expiration Month'),
    '#options' => $expiry_months,
    '#required' => TRUE,
    '#description' => t('Your credit card expiration month.'),
  );

  $form['intuit_credit_card']['exp_year'] = array(
    '#type' => 'select',
    '#title' => t('Expiration Year'),
    '#options' => drupal_map_assoc(range(date('Y') - 2, date('Y') + 10)),
    '#required' => TRUE,
    '#description' => t('Your credit card expiration year.'),
  );

  $form['intuit_credit_card']['cvd_value'] = array(
    '#type' => 'textfield',
    '#title' => t('CVD'),
    '#required' => TRUE,
    '#description' => t('Last 3 or 4 digits on the back of your credit card.'),
    '#size' => 4,
    '#maxlength' => 4,
  );

  return $form;
}

/**
 * Validate function for intuit form.
 */
function commerce_intuit_submit_form_validate($form, $form_state) {
  if (!strlen(variable_get('commerce_intuit_production'))) {
    form_set_error('intuit_credit_card', t('Intuit is not configured for use. No creadentials has been specified.'));
  }
}

/**
 * Handles the form submit.
 *
 * @param array $payment_method
 *   The payment method instance object used to charge this payment.
 * @param array $pane_form
 *   The pane form.
 * @param array $pane_values
 *   The pane values.
 * @param Object $order
 *   The order object the payment applies to.
 * @param array $charge
 *   An array indicating the amount and currency code to charge.
 * 
 * @return bool
 *   Returns TRUE on success and FALSE on failure of transaction.
 */
function commerce_intuit_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {

  $order->data['commerce_intuit'] = $pane_values;
  return commerce_intuit_transaction($payment_method, $order, $charge, $pane_values);
}

/**
 * Creates a intuit payment transaction. Post data to intuit.
 *
 * @param array $payment_method
 *   The payment method instance object used to charge this payment.
 * @param Object $order
 *   The order object the payment applies to.
 * @param array $charge
 *   An array indicating the amount and currency code to charge.
 * @param array $values
 *   The vlaues submited by user.
 * 
 * @return bool
 *   Returns TRUE on success and FALSE on failure of transaction.
 */
function commerce_intuit_transaction($payment_method, $order, $charge, $values) {
  $transaction = commerce_payment_transaction_new('commerce_intuit', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = commerce_currency_format($charge['amount'], 'USD');
  $transaction->currency_code = $charge['currency_code'];

  // Prepare data.
  $amount = number_format($charge['amount'] / 100, 2, '.', '');
  $card = $order->data['commerce_intuit']['intuit_credit_card']['number'];
  $expiry_year = drupal_substr($order->data['commerce_intuit']['intuit_credit_card']['exp_year'], 2, 2);
  $expiry_month = $order->data['commerce_intuit']['intuit_credit_card']['exp_month'];
  $cvd = $order->data['commerce_intuit']['intuit_credit_card']['cvd_value'];
  $order_id = 'order-' . $order->order_id . '-' . time();
  $cust_id = 'customer-' . $order->uid;

  // Create transaction data.
  $txn_array = array(
    'order_id' => $order_id,
    'cust_id' => $cust_id,
    'amount' => $amount,
    'card' => $card,
    'expyear' => $expiry_year,
    'expmonth' => $expiry_month,
    'crypt_type' => '7',
    'cvd_indicator' => 1,
    'cvd_value' => $cvd,
  );

  // Add customer billing address.
  $customeprofile = commerce_customer_profile_load($order->commerce_customer_billing[LANGUAGE_NONE][0]['profile_id']);
  if (!empty($customeprofile->commerce_customer_address[LANGUAGE_NONE][0]['name_line'])) {
    $txn_array['billing_name'] = $customeprofile->commerce_customer_address[LANGUAGE_NONE][0]['name_line'];
  }
  else {
    $txn_array['billing_name'] = $customeprofile->commerce_customer_address[LANGUAGE_NONE][0]['first_name'] . " " . $customeprofile->commerce_customer_address[LANGUAGE_NONE][0]['last_name'];
  }
  $txn_array['street_address'] = $customeprofile->commerce_customer_address[LANGUAGE_NONE][0]['thoroughfare'];
  $txn_array['postal_code'] = $customeprofile->commerce_customer_address[LANGUAGE_NONE][0]['postal_code'];

  // Allow other modules to alter the txnArray.
  drupal_alter('commerce_intuit_transaction', $txn_array, $order);

  // Payment processor info.
  $mode = variable_get('commerce_intuit_production', TRUE) ? 'Live' : 'Test';

  $commerce_intuit = new CommerceIntuit($mode);

  list($code, $message) = $commerce_intuit->checkSignon();

  if ($code != "0") {
    watchdog('commerce_intuit', 'Intuit PP Error with cURL request: (@error_no). Message: @error_message', array(
      '@error_no' => $code,
      '@error_message' => $message), WATCHDOG_ERROR
    );
    drupal_set_message(t('Intuit Error: @code  Message: @message', array('@code' => $code, '@message' => $message)), 'error');
    return FALSE;
  }

  $result = $commerce_intuit->charge($txn_array);

  // If the request failed, display an erorr and log it.
  if (isset($result['error_no'])) {
    watchdog('commerce_intuit', 'Intuit PP Error with cURL request: (@error_no) Message: @error_message', array(
      '@error_no' => $result['error_no'],
      '@error_message' => $result['error_message']), WATCHDOG_ERROR
    );
    drupal_set_message(t('Intuit Error: @error_no . Message:  @error_message', array('@error_no' => $result['error_no'], '@error_message' => $result['error_message'])), 'error');
    return FALSE;
  }

  watchdog('commerce_intuit', 'Intuit transaction response:<pre> @param </pre>', array('@param' => print_r($result, TRUE)));

  // Set the RemoteID as Intuit TransID.
  $transaction->remote_id = $result['TransID'];
  $transaction->amount = $charge['amount'];
  $transaction->message = $result['message'];
  if ($result['responsecode'] != "null") {
    $response_code = intval($result['responsecode']);
    if ("0" == $response_code) {
      $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
      $payment_approved = TRUE;
    }
    else {
      $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
      $payment_approved = FALSE;
    }
  }
  else {
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
    $payment_approved = FALSE;
  }

  commerce_payment_transaction_save($transaction);

  // If the payment failed, display an error.
  if (!$payment_approved) {
    drupal_set_message(t('We were unable to process your payment. Please enter your information again or try a different card.'), 'error');

    if (variable_get('commerce_intuit_display_response', 1)) {
      drupal_set_message(check_plain($result['message']), 'error');
    }

    return FALSE;
  }

  return TRUE;
}
