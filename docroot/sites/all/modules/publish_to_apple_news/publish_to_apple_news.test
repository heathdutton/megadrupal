<?php

/**
 * @file
 * Test for the Publish to Apple News module
 */

class PublishToAppleNewsTestCase extends DrupalWebTestCase {
  
  public static function getInfo() {
    return array(
      'name' => 'Publish to Apple News Functional Tests',
      'description' => 'Ensures that the Publish to Apple News module UI functions correctly.',
      'group' => 'Publish to Apple News',
    );
  }
  
  public function prepareEnvironment() {
    parent::prepareEnvironment();
    
    $this->appleNewsApiKey = variable_get('publish_to_apple_news_api_key', '');
    $this->appleNewsSharedSecret = variable_get('publish_to_apple_news_shared_secret', '');
    $this->appleNewsArticleIdentifier = variable_get('publish_to_apple_news_article_identifier', '[site:name]--[node:nid]');
    $this->appleNewsAvailableSections = variable_get('publish_to_apple_news_available_sections', '');
    $this->appleNewsDefaultChannelId = variable_get('publish_to_apple_news_default_channel_id', '');
    $this->appleNewsDefaultSectionId = variable_get('publish_to_apple_news_default_section_id', '');
  }
  
  public function setup() {
    parent::setup(array(
      'entity',
      'token',
      'publish_to_apple_news',
    ));
    
    variable_set('publish_to_apple_news_api_key', $this->appleNewsApiKey);
    variable_set('publish_to_apple_news_shared_secret', $this->appleNewsSharedSecret);
    variable_set('publish_to_apple_news_article_identifier', $this->appleNewsArticleIdentifier);
    variable_set('publish_to_apple_news_available_sections', $this->appleNewsAvailableSections);
    variable_set('publish_to_apple_news_default_channel_id', $this->appleNewsDefaultChannelId);
    variable_set('publish_to_apple_news_default_section_id', $this->appleNewsDefaultSectionId);
    
    $admin_user = $this->drupalCreateUser(array(
      'access content',
      'administer site configuration',
      'administer content types',
      'administer nodes',
      'bypass node access',
    ));
    
    $this->drupalLogin($admin_user);
  }
  
  /**
   * Test creating, editing, and deleting entities.
   */
  public function testCRUD() {
    $this->createArticleType();
    $this->assertText(t('Your article type has been saved.'), 'Article type successfully created');
    
    // Create another article type with the same content type
    $this->createArticleType();
    $this->assertText(t('selected content type already exists'), 'Article type with duplicate content type rejected');
    
    // Get the newly-created article type
    $article_type = $this->getNewestEntity('publish_to_apple_news_article_type', 'tid');
    
    // Test admin user has access to edit page
    $this->drupalGet('admin/structure/publish-to-apple-news/types/' . $article_type->tid . '/edit');
    $this->assertResponse(200, 'User is allowed to edit the article type');
    
    // Update article type
    $this->drupalPost('admin/structure/publish-to-apple-news/types/' . $article_type->tid . '/settings', array(), t('Save'));
    $this->assertText(t('Your article type has been saved.'), 'Article type successfully updated');
    
    // Delete article type
    $this->drupalPost('admin/structure/publish-to-apple-news/types/' . $article_type->tid . '/delete', array(), t('Delete'));
    $this->assertText(t('Your article type has been deleted.'), 'Article type successfully deleted');
      
    // Create article type again for use with the tests below
    $this->createArticleType();
    $article_type = $this->getNewestEntity('publish_to_apple_news_article_type', 'tid');
    $this->createComponentLayout($article_type);
    $this->assertText(t('Your component layout has been saved.'), 'Component layout successfully created');
    
    // Create another with duplicate identifier
    $this->createComponentLayout($article_type);
    $this->assertText(t('Another component layout in this article type has the same identifier.'), 'Component layout with duplicate identifier rejected');
      
    // Test admin user has access to edit page
    $layout = $this->getNewestEntity('publish_to_apple_news_component_layout', 'lid');
    $this->drupalGet('admin/structure/publish-to-apple-news/types/' . $article_type->tid . '/layouts/' . $layout->lid . '/edit');
    $this->assertResponse(200, 'User is allowed to edit component layout');
    
    // Update component layout
    $this->drupalPost('admin/structure/publish-to-apple-news/types/' . $article_type->tid . '/layouts/' . $layout->lid . '/edit', array(), t('Save'));
    $this->assertText(t('Your component layout has been saved.'), 'Component layout successfully updated');
    
    // Delete component
    $this->drupalPost('admin/structure/publish-to-apple-news/types/' . $article_type->tid . '/layouts/' . $layout->lid . '/delete', array(), t('Delete'));
    $this->assertText(t('Your component layout has been deleted.'), 'Component layout successfully deleted');
    
    // Create a component style
    $this->createComponentStyle($article_type);
    $this->assertText(t('Your component style has been saved.'), 'Component style successfully created');
    
    // Create another with duplicate identifier
    $this->createComponentStyle($article_type);
    $this->assertText(t('Another component style in this article type has the same identifier.'), 'Component style with duplicate identifier rejected');
    
    // Test admin user has access to edit page
    $style = $this->getNewestEntity('publish_to_apple_news_component_style', 'sid');
    $this->drupalGet('admin/structure/publish-to-apple-news/types/' . $article_type->tid . '/styles/' . $style->sid . '/edit');
    $this->assertResponse(200, 'User is allowed to edit component style');
    
    // Update component style
    $this->drupalPost('admin/structure/publish-to-apple-news/types/' . $article_type->tid . '/styles/' . $style->sid . '/edit', array(), t('Save'));
    $this->assertText(t('Your component style has been saved.'), 'Component style successfully updated');
    
    // Delete style
    $this->drupalPost('admin/structure/publish-to-apple-news/types/' . $article_type->tid . '/styles/' . $style->sid . '/delete', array(), t('Delete'));
    $this->assertText(t('Your component style has been deleted.'), 'Component style successfully deleted');
    
    // Create a component text style
    $this->createComponentTextStyle($article_type);
    $this->assertText(t('Your component text style has been saved.'), 'Component text style successfully created');
    
    // Create another with duplicate identifier
    $this->createComponentTextStyle($article_type);
    $this->assertText(t('Another component text style in this article type has the same identifier.'), 'Component text style with duplicate identifier rejected');
    
    // Test admin user has access to edit page
    $text_style = $this->getNewestEntity('publish_to_apple_news_component_text_style', 'tsid');
    $this->drupalGet('admin/structure/publish-to-apple-news/types/' . $article_type->tid . '/textstyles/' . $text_style->tsid . '/edit');
    $this->assertResponse(200, 'User is allowed to edit component text style');
    
    // Update component text style
    $this->drupalPost('admin/structure/publish-to-apple-news/types/' . $article_type->tid . '/textstyles/' . $text_style->tsid . '/edit', array(), t('Save'));
    $this->assertText(t('Your component text style has been saved.'), 'Component text style successfully updated');
    
    // Delete text style
    $this->drupalPost('admin/structure/publish-to-apple-news/types/' . $article_type->tid . '/textstyles/' . $text_style->tsid . '/delete', array(), t('Delete'));
    $this->assertText(t('Your component text style has been deleted.'), 'Component text style successfully deleted');
    
    // Test creating components
    $this->drupalGet('admin/structure/publish-to-apple-news/types/' . $article_type->tid);
    $this->assertResponse(200, 'User is allowed to configure components.');
    
    $types = publish_to_apple_news_component_types();
    foreach ($types as $type => $class_name) {
      $values = array(
        'component_type' => $type,
      );
      
      $this->drupalPostAJAX('admin/structure/publish-to-apple-news/types/' . $article_type->tid, $values, array('op' => t('Add')));
      $this->assertText(t('Component name'), $type . ' successfully added');
      
      $this->drupalPostAjax(NULL, array(), array('op' => t('Save')));
      $this->assertText(t('Component name field is required.'), $type . ' ajax form submit succeeded.');
    }
  }
  
  /**
   * Test article generator functions
   */
  public function testGenerator() {    
    $this->createArticleTypeFromTemplate();
    
    // Create an article node
    $settings = array(
      'type' => 'article',
      'title' => 'Simple Test Node',
      'body' => array(LANGUAGE_NONE => array(array('value' => '<p>Simple body text with a <a href="http://google.com">link</a>.</p>'))),
      'publish_to_apple_news_publish' => FALSE,
    );
    $node = $this->drupalCreateNode($settings);
    $this->verbose('Node created: ' . print_r($node, TRUE));
    
    // Generate article JSON
    module_load_include('inc', 'publish_to_apple_news', 'includes/generators');
    $generated_article = publish_to_apple_news_generate_article($node);
    $generated_article_output = print_r($generated_article, TRUE);
    $this->verbose('Article generated: ' . $generated_article_output);
    $article_json = json_encode($generated_article['article']);
    $article_json = str_replace('\/', '/', $article_json);
    $this->verbose('Article JSON: ' . $article_json);
    
    $this->assertTrue(is_array($generated_article), 'Generated article is a valid array ready to be converted to json.');
    
    // Post to Apple News
    $publish_to_apple_news_settings = array(
      'publish_to_apple_news_publish' => TRUE,
      'is_preview' => TRUE,
    );
    $this->drupalPost('node/' . $node->nid . '/edit', $publish_to_apple_news_settings, t('Save'));
    $this->assertText(t('Simple Test Node has been successfully posted to AppleNews.'), 'Node successfully published to Apple News (as preview)');
  }
  
  /**
   * Create an article type.
   */
  private function createArticleType() {
    $values = array(
      'content_type' => 'article',
      'description' => t('A simple plug and play article type.'),
      'title' => '[node:title]',
      'excerpt' => '[node:summary]',
      'language' => '[node:language]',
      'metadata_thumbnail_url' => '[node:field_image]',
      'metadata_canonical_url' => '',
      'metadata_authors[authors][0]' => 'Dan Castellon',
      'metadata_keywords[keywords][0]' => 'First Keyword',
      'layout[layout_columns]' => 7,
      'layout[layout_width]' => 1024,
      'layout[layout_margin]' => 70,
      'layout[layout_gutter]' => 40,
    );
    
    $this->drupalPost('admin/structure/publish-to-apple-news/create', $values, t('Save'));
  }
  
  /**
   * Create a left-aligned article type from a template.
   */
  private function createArticleTypeFromTemplate() {
    // Delete any existing article types
    $query = new EntityFieldQuery();
    $result = $query->entityCondition('entity_type', 'publish_to_apple_news_article_type')
      ->execute();
    
    if (isset($result['publish_to_apple_news_article_type'])) {
      $tids = array_keys($result['publish_to_apple_news_article_type']);
      foreach ($tids as $tid) {
        $this->drupalPost('admin/structure/publish-to-apple-news/types/' . $tid . '/delete', array(), t('Delete'));
        $this->assertText(t('Your article type has been deleted.'), 'Article type successfully deleted');
      }
    }
    
    // Mapping page
    $this->drupalGet('admin/structure/publish-to-apple-news/create-template/article/1');
    $this->assertText(t('Create article type from Simple Left Aligned Article'), 'Article type mapping page works');
    
    $values = array(
      'component_2' => '[node:body]',
    );
    
    $this->drupalPost(NULL, $values, t('Create'));
    $this->assertText(t('Article type successfully created.'), 'Article type from template successfully created.');
    
    // Remove the canonical URL for local testing purposes
    $article_type = $this->getNewestEntity('publish_to_apple_news_article_type', 'tid');
    $article_type->metadata_canonical_url = '';
    entity_save('publish_to_apple_news_article_type', $article_type);
    $this->verbose('Article type created: ' . print_r($article_type, TRUE));
  }
  
  /**
   * Create a component layout.
   */
  private function createComponentLayout($article_type) {
    $values = array(
      'identifier' => 'bodyLayout',
      'column_start' => 1,
      'column_span' => 5,
      'margin_top' => 15,
      'margin_bottom' => 15,
      'minimum_height' => 100,
    );
    
    $this->drupalPost('admin/structure/publish-to-apple-news/types/' . $article_type->tid . '/layouts/create', $values, t('Save'));
  }
  
  /**
   * Create a component style.
   */
  private function createComponentStyle($article_type) {
    $values = array(
      'identifier' => 'headerStyle',
      'background_color' => '#FFF',
      'opacity' => 1,
      'image_fill_url' => '[node:field_image]',
      'image_fill_mode' => 'cover',
      'image_fill_vertical_alignment' => 'center',
      'border_color' => '#000',
      'border_width' => 1,
      'border_style' => 'solid',
    );
    
    $this->drupalPost('admin/structure/publish-to-apple-news/types/' . $article_type->tid . '/styles/create', $values, t('Save'));
  }
  
  /**
   * Create a component text style.
   */
  private function createComponentTextStyle($article_type) {
    $values = array(
      'identifier' => 'titleStyle',
      'font_name' => 'HelveticaNeue-Bold',
      'font_size' => 64,
      'line_height' => 74,
      'text_color' => '#000',
      'text_transform' => 'none',
      'underline' => 0,
      'strikethrough' => 0,
      'vertical_alignment' => 'baseline',
      'link_style_font_name' => 'HelveticaNeue-Bold',
      'link_style_font_size' => 50,
      'link_style_text_color' => '#FF0000',
    );
    
    $this->drupalPost('admin/structure/publish-to-apple-news/types/' . $article_type->tid . '/textstyles/create', $values, t('Save'));
  }
  
  /**
   * Get the most recently created entity of a given type.
   *
   * @param $entity_type
   *  The machine name of the entity to retrieve.
   * @param $id_field
   *  The name of the primary identitifer of the entity type.
   *
   * @return $entity
   *  The fully-loaded entity.
   */
  private function getNewestEntity($entity_type, $id_field) {
    $query = new EntityFieldQuery();
    $result = $query->entityCondition('entity_type', $entity_type)
      ->propertyOrderBy($id_field, 'DESC')
      ->range(0, 1)
      ->execute();
    
    if (isset($result[$entity_type])) {
      $id = key($result[$entity_type]);
      return entity_load_single($entity_type, $id);
    } else {
      return FALSE;
    }
  }
}
























