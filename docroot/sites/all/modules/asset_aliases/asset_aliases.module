<?php
/**
 * @file
 * Module asset aliases
 * Allow user with the right permission to add pattern for asset aliases
 */

/**
 * Implements hook_action_info().
 */
function asset_aliases_action_info() {
  $info['asset_aliases_asset_update_action'] = array(
    'type' => 'asset',
    'label' => t('Update asset alias'),
    'configurable' => FALSE,
  );

  return $info;
}

/**
 * Implements hook_path_alias_types().
 *
 * Used primarily by the bulk delete form.
 */
function asset_aliases_path_alias_types() {
  $objects = array();
  if (module_exists('asset')) {
    $objects['admin/content/assets/view'] = t('Asset');
  }
  return $objects;
}

/**
 * Implements hook_pathauto().
 */
function asset_aliases_pathauto($op) {
  switch ($op) {
    case 'settings':
      $settings = array();
      $settings['module'] = 'asset';
      $settings['token_type'] = 'asset';
      $settings['groupheader'] = t('Asset paths');
      $settings['patterndescr'] = t('Default path pattern (applies to all asset types with blank patterns below)');
      $settings['patterndefault'] = 'asset/[asset:title]';
      $settings['batch_update_callback'] = 'asset_aliases_pathauto_bulk_update_batch_process';
      $settings['batch_file'] = drupal_get_path('module', 'pathauto') . '/pathauto.pathauto.inc';

      $languages = array();
      if (module_exists('locale')) {
        $languages = array(LANGUAGE_NONE => t('language neutral')) + locale_language_list('name');
      }

      foreach (assets_get_types() as $asset_type => $asset_name) {
        if (count($languages) && variable_get('language_content_type_' . $asset_type, 0)) {
          $settings['patternitems'][$asset_type] = t('Default path pattern for @asset_type (applies to all @asset_type asset types with blank patterns below)', array('@asset_type' => $asset_name->name));
          foreach ($languages as $lang_code => $lang_name) {
            $settings['patternitems'][$asset_type . '_' . $lang_code] = t('Pattern for all @language @asset_type paths', array(
              '@asset_type' => $asset_name->name,
              '@language' => $lang_name,
            ));
          }
        }
        else {
          $settings['patternitems'][$asset_type] = t('Pattern for all @asset_type paths', array('@asset_type' => $asset_name->name));
        }
      }
      return (object) $settings;

    default:
      break;
  }
}

/**
 * Batch processing callback; Generate aliases for assets.
 */
function asset_aliases_pathauto_bulk_update_batch_process(&$context) {
  if (!isset($context['sandbox']['current'])) {
    $context['sandbox']['count'] = 0;
    $context['sandbox']['current'] = 0;
  }

  $query = db_select('asset', 'a');
  $query->leftJoin('url_alias', 'ua', "CONCAT('admin/content/assets/view/', a.aid) = ua.source");
  $query->addField('a', 'aid');
  $query->isNull('ua.source');
  $query->condition('a.aid', $context['sandbox']['current'], '>');
  $query->orderBy('a.aid');
  $query->addTag('asset_aliases_bulk_update');
  $query->addMetaData('entity', 'asset');

  // Get the total amount of items to process.
  if (!isset($context['sandbox']['total'])) {
    $context['sandbox']['total'] = $query->countQuery()
      ->execute()
      ->fetchField();

    // If there are no assets to update, the stop immediately.
    if (!$context['sandbox']['total']) {
      $context['finished'] = 1;
      return;
    }
  }

  $query->range(0, 25);
  $aids = $query->execute()->fetchCol();

  asset_aliases_asset_update_alias_multiple($aids, 'bulkupdate');
  $context['sandbox']['count'] += count($aids);
  $context['sandbox']['current'] = max($aids);
  $context['message'] = t('Updated alias for asset @aid.', array('@aid' => end($aids)));

  if ($context['sandbox']['count'] != $context['sandbox']['total']) {
    $context['finished'] = $context['sandbox']['count'] / $context['sandbox']['total'];
  }
}

/**
 * Implements hook_form_alter().
 *
 * Add path to asset form
 * Add the Pathauto settings to the asset form.
 */
function asset_aliases_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['#bundle']) && $form_id == 'asset_edit_' . $form['#bundle'] . '_form') {
    $path = array();
    if (isset($form_state['asset']->aid)) {
      $conditions = array('source' => 'admin/content/assets/view/' . $form_state['asset']->aid);
      $langcode = entity_language('asset', $form_state['asset']);
      if (NULL !== $langcode && $langcode != LANGUAGE_NONE) {
        $conditions['language'] = $langcode;
      }
      $path = path_load($conditions);
      if ($path === FALSE) {
        $path = array();
      }
    }
    $path += array(
      'pid' => NULL,
      'source' => isset($form_state['asset']->aid) ? 'admin/content/assets/view/' . $form_state['asset']->aid : NULL,
      'alias' => '',
      'language' => isset($langcode) ? $langcode : LANGUAGE_NONE,
    );

    $form['path'] = array(
      '#type' => 'fieldset',
      '#title' => t('URL path settings'),
      '#collapsible' => TRUE,
      '#collapsed' => empty($path['alias']),
      '#group' => 'additional_settings',
      '#attributes' => array(
        'class' => array('path-form'),
      ),
      '#attached' => array(
        'js' => array(drupal_get_path('module', 'path') . '/path.js'),
      ),
      '#access' => user_access('create url aliases') || user_access('administer url aliases'),
      '#weight' => 30,
      '#tree' => TRUE,
      '#element_validate' => array('path_form_element_validate'),
    );
    $form['path']['alias'] = array(
      '#type' => 'textfield',
      '#title' => t('URL alias'),
      '#default_value' => $path['alias'],
      '#maxlength' => 255,
      '#description' => t('Optionally specify an alternative URL by which this content can be accessed. For example, type "about" when writing an about page. Use a relative path and don\'t add a trailing slash or the URL alias won\'t work.'),
    );
    $form['path']['pid'] = array('#type' => 'value', '#value' => $path['pid']);
    $form['path']['source'] = array(
      '#type' => 'value',
      '#value' => $path['source'],
    );
    $form['path']['language'] = array(
      '#type' => 'value',
      '#value' => $path['language'],
    );

    if (isset($form_state['asset'])) {
      $asset = $form_state['asset'];
      $langcode = pathauto_entity_language('asset', $asset);
      asset_aliases_field_attach_form('asset', $asset, $form, $form_state, $langcode);
    }
  }
}

/**
 * Implements hook_field_attach_form().
 *
 * Add the automatic alias form elements to an existing path form fieldset.
 */
function asset_aliases_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {
  pathauto_field_attach_form($entity_type, $entity, $form, $form_state, $langcode);
}

/**
 * @name asset_aliases_asset
 * Pathauto integration for the contrib asset module.
 * @{
 */

/**
 * Implements hook_asset_insert().
 */
function asset_aliases_asset_insert($asset) {
  unset($asset->uri);
  asset_aliases_asset_update_alias($asset, 'insert');
}

/**
 * Implements hook_asset_update().
 */
function asset_aliases_asset_update($asset) {
  asset_aliases_asset_update_alias($asset, 'update');
}

/**
 * Implements hook_asset_delete().
 */
function asset_aliases_asset_delete($asset) {
  pathauto_entity_path_delete_all('asset', $asset, "admin/content/assets/view/{$asset->aid}");
}

/**
 * Implements hook_asset_operations().
 */
function asset_aliases_asset_operations() {
  $operations['pathauto_update_alias'] = array(
    'label' => t('Update URL alias'),
    'callback' => 'asset_aliases_asset_update_alias_multiple',
    'callback arguments' => array('bulkupdate', array('message' => TRUE)),
  );
  return $operations;
}

/**
 * Update the URL aliases for an individual asset.
 */
function asset_aliases_asset_update_alias($asset, $op, array $options = array()) {
  // Skip processing if the user has disabled pathauto for the asset.
  if (isset($asset->path['pathauto']) && empty($asset->path['pathauto'])) {
    return;
  }

  $options += array('language' => pathauto_entity_language('asset', $asset));

  // Skip processing if the asset has no pattern.
  if (!pathauto_pattern_load_by_entity('asset', $asset->type, $options['language'])) {
    return;
  }

  module_load_include('inc', 'pathauto');
  $uri = entity_uri('asset', $asset);
  pathauto_create_alias('asset', $op, $uri['path'], array('asset' => $asset), $asset->type, $options['language']);
}

/**
 * Update the URL aliases for multiple assets.
 */
function asset_aliases_asset_update_alias_multiple(array $aids, $op, array $options = array()) {
  $options += array('message' => FALSE);

  $assets = asset_load_multiple($aids);
  foreach ($assets as $asset) {
    asset_aliases_asset_update_alias($asset, $op, $options);
  }

  if (!empty($options['message'])) {
    drupal_set_message(format_plural(count($aids), 'Updated URL alias for 1 asset.', 'Updated URL aliases for @count assets.'));
  }
}

/**
 * Update action wrapper for pathauto_asset_update_alias().
 */
function asset_aliases_asset_update_action($asset, $context = array()) {
  asset_aliases_asset_update_alias($asset, 'bulkupdate', array('message' => TRUE));
}

/**
 * @} End of "name asset_aliases_asset".
 */


if (!function_exists('path_field_extra_fields')) {
  /**
   * Implements hook_field_extra_fields().
   *
   * Add support for the 'URL path settings' to be re-ordered by the user on the
   * 'Manage Fields' tab of content types and vocabularies.
   */
  function path_field_extra_fields() {
    $info = array();

    foreach (assets_get_types() as $asset_type) {
      if (!isset($info['asset'][$asset_type->type]['form']['path'])) {
        $info['asset'][$asset_type->type]['form']['path'] = array(
          'label' => t('URL path settings'),
          'description' => t('Path module form elements'),
          'weight' => 30,
        );
      }
    }

    return $info;
  }
}
