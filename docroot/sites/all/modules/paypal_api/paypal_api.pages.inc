<?php
// $Id$

/**
 *
 * Redirect from an Access Denied page to the correct payment URL, populating it with values taken from $_SESSION
 *
 */
function paypal_api_403() {
  global $user;

  $settings = variable_get('paypal_api_settings', array());
  $create   = (isset($settings['create_user']))? $settings['create_user'] : FALSE;

  if (!$user->uid && !$create) {
    // if Login Toboggan is installed, use that to show the user login form, as configured by the site admin
    if (module_exists('logintoboggan')) {
      return logintoboggan_denied();
    }
    else {
      return "<div class='content'>" . l(t("Log in to view this content."), 'user/login', array('query' => array('destination' => join("/", arg())))) . "</div>";
    }
  }

  $op    = NULL;
  $param = NULL;
  if (is_array($_SESSION)) {
    if (isset($_SESSION['paypal_op'])) {
      $op = $_SESSION['paypal_op'];
      unset($_SESSION['paypal_op']);
    }
    if (isset($_SESSION['paypal_param'])) {
      $param = $_SESSION['paypal_param'];
      unset($_SESSION['paypal_param']);
    }
  }

  if (!$op || !$param) {
    return "";
  }

  return paypal_api_payment($op, $param);
}

/**
 *
 * Generate the page for paying for content.
 *
 * @param $op
 * The operation we're retrieving the button for -- 'create', 'view' or 'instance'
 *
 * @param $param
 * Depending on $op:
 *   - create or view: the bundle name
 *   - instance: the nid
 *
 * @return
 * A page.
 */
function paypal_api_payment($op, $param) {
  global $user;

  $settings = array();
  $bundle   = "";
  $nid      = NULL;

  if ($op == 'instance' || $op == 'deferred_create') {
    $node = node_load($param);

    $nid      = $param;
    $bundle   = $node->type;
    $settings = paypal_api_instance_config($nid);
  }
  else {
    $bundle   = $param;
    $settings = paypal_api_bundle_config($bundle);
  }

  if (!$settings) {
    watchdog('paypal_api', "There was an error getting settings for the !bundle content type.", array('!bundle' => $bundle));
    drupal_set_message(t("There was an internal error."), 'error');
    return "";
  }

  $global_settings = variable_get('paypal_api_settings', array());
  if (isset($global_settings['sandbox']) && $global_settings['sandbox']) {
    drupal_set_message(t("Currently using Paypal API in the sandbox.  No transactions will actually occur."), 'warning');
  }

  $button = "";
  if ($settings['method'] == 'paypal') {
    $button = paypal_api_paypal_button($settings, $op, $bundle, $nid);
  }
  else {
    $button = paypal_api_button($settings, $op, $bundle, $nid);
  }

  if (!$button) {
    watchdog('paypal_api', "There was an error generating the Pay Now button");
    drupal_set_message(t("There was an internal error."), 'error');
    return "";
  }

  $variables = array(
    'nid'	      => $nid,
    'bundle'		=> $bundle,
    'op'        => $op,
    'button'    => $button
  );

  return theme('paypal_payment_page', $variables);
}

/**
 *
 * Get the button HTML for this item that has been generated by Paypal.
 *
 * @param $settings
 * The configuration settings for this bundle
 *
 * @param $op
 * The operation to be paid for -- instance, view or create
 *
 * @param $bundle
 *
 * @param $nid
 *
 * @return
 * Button HTML
 */
function paypal_api_paypal_button($settings, $op, $bundle, $nid) {
  $html = ($settings && isset($settings['button']))? $settings['button'] : '';
  if (!$html) {
    return "";
  }

  // inject our IPN path so that successful payment notifies us.
  $ipn_path = paypal_api_ipn_url($op, $bundle, $nid);
  $html = str_replace("</form>", "<input type='hidden' name='notify_url' value='$ipn_path' />" . "</form>", $html);

  // if this is an anonymous user and we're allowed to make new accounts, get the email
  // address, which will come back from Paypal with the IPN
  $email  = paypal_api_anonymous_email();
  if ($email) {
    $html = preg_replace("/(<form\s.+?>)/", "$1$email", $html);
  }

  return $html;
}

/**
 *
 * Construct a Paypal button.
 *
 * @param $settings
 * The configuration settings for this bundle
 *
 * @param $op
 * The operation to be paid for -- instance, view or create
 *
 * @param $bundle
 *
 * @param $nid = NULL
 *
 * @return
 * Button HTML
 */
function paypal_api_button($settings, $op, $bundle, $nid) {
  $amount = (isset($settings['cost']) && $settings['cost'])? $settings['cost'] : 0;

  $sys_settings = variable_get('paypal_api_settings', array());
  $business = (isset($sys_settings['email']) && $sys_settings['email'])? $sys_settings['email'] : '';
  if (!$business) {
    watchdog("paypal_api", "Won't process a transaction without the business email.");
    drupal_set_message(t("There was an internal error."), 'error');
    return "";
  }

  $item_name = (isset($settings['item_name']) && $settings['item_name'])? $settings['item_name'] : '';
  if (!$item_name) {
    if (($settings['instance'] || $settings['deferred_create']) && is_numeric($nid)) {
      $node = node_load($nid);
      $item_name = $node->title;
    }
    else {
      $item_name = "$op $bundle";
    }
  }

  // create the values array with entries that can be overridden by other modules
  $values = array(
    'currency_code'   => (isset($settings['currency']) && $settings['currency'])? $settings['currency'] : '',
    'return'			    => (isset($settings['success']) && $settings['success'])? $settings['success'] : paypal_api_success_url($op, $bundle, $nid),
    'cancel_return'   => (isset($settings['cancel']) && $settings['cancel'])? $settings['cancel'] : paypal_api_cancel_url($op, $bundle, $nid),
    'amount'				  => $amount,
    'item_name'			  => $item_name,
    'email'           => ''
  );

  foreach (module_implements('paypal_api_presale') as $module) {
    $values = module_invoke($module, 'paypal_api_presale', $values, $op, $bundle, $nid);
  }

  // check that we have an amount -- either a default or through the api
  if (!$values['amount']) {
    watchdog("paypal_api", "Won't process a zero value transaction.");
    drupal_set_message(t("There was an internal error."), 'error');
    return "";
  }

  // now add in our values, which should not be overridden
  $values['cmd']         = '_xclick'; // only doing Buy Now buttons
  $values['business']    = $business;
  $values['notify_url']  = paypal_api_ipn_url($op, $bundle, $nid);
  $values['item_number'] = ($op == 'instance' || $op == 'deferred_create')? $nid : $bundle;

  $html = "<form action='https://" . paypal_api_url() . "' method='post'>";
  foreach ($values as $name => $value) {
    if ($value) {
      $html .= "<input type='hidden' name='$name' value='$value' />";
    }
  }

  $email = paypal_api_anonymous_email($values['email']);
  if ($email) {
    $html .= $email;
  }

  $html .= "
  	<input type='image' name='submit' border='0' src='https://www.paypal.com/en_US/i/btn/btn_buynow_LG.gif' alt='" . check_plain(t("PayPal - The safer, easier way to pay online")) . "'>
  	<img alt='' border='0' width='1' height='1' src='https://www.paypal.com/en_US/i/scr/pixel.gif' >
  	</form>
  ";

  return $html;
}

/**
 * Get an input field for collecting the anonymous user's email address
 *
 * @param $default = ''
 * A default address to prepopulate the field with
 *
 * @return
 * An empty string if this is a registered user or we're not configured for automatic user creation,
 * or else an HTML input field.
 */
function paypal_api_anonymous_email($default = '') {
  global $user;
  $global_settings = variable_get('paypal_api_settings', array());

  if ($user->uid || !$global_settings['create_user']) {
    return "";
  }

  $field = array(
    '#type'           => 'textfield',
    '#title'          => t("Your email address"),
    '#name'           => 'custom',
    '#children'       => "<input type='text' name='custom' value='" . check_plain($default) . "' />"
  );
  $input = theme_form_element(array('element' => $field));

  $email = "
    <div class='paypal-message'>
      <p>"
      . t("Payment on this site requires that we register you as a user of the site.  Please insert your email address in the field below.  It will be used to create your account, and you will receive an email with further instructions and more information after your payment completes.") .
      "</p>
    </div>
    $input
  ";

  return $email;
}

/**
 *
 * Success page handler.
 *
 * @param $uid
 * @param $op
 * @param $bundle
 * @param $nid
 *
 * @return
 * A page
 */
function paypal_api_success_page($uid, $op, $bundle, $nid) {
  if ($nid == 'x') {
    $nid = NULL;
  }

  return theme('paypal_success_page', array('uid' => $uid, 'op' => $op, 'bundle' => $bundle, 'nid' => $nid));
}

/**
 *
 * Cancel page handler.
 *
 * @param $uid
 * @param $op
 * @param $bundle
 * @param $nid
 *
 * @return
 * A page
 */
function paypal_api_cancel_page($uid, $op, $bundle, $nid) {
  if ($nid == 'x') {
    $nid = NULL;
  }

  return theme('paypal_cancel_page', array('uid' => $uid, 'op' => $op, 'bundle' => $bundle, 'nid' => $nid));
}
