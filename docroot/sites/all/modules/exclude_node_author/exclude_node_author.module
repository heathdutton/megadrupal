<?php

/**
 * @file
 * Primarily Drupal hooks and global API functions to exclude node authors.
 *
 * This is the main module file for Exclude Node Author.
 */

/**
 * Implements hook_permission().
 */
function exclude_node_author_permission() {
  return array(
    'administer exclude node author' => array(
      'title' => t('Administer exclude node author'),
    ),
    'use exclude node author' => array(
      'title' => t('Use exclude node author'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function exclude_node_author_menu() {
  $items = array();
  $items['admin/config/content/exclude_node_author'] = array(
    'title' => 'Exclude Node author',
    'description' => 'Exclude Node author from display',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('exclude_node_author_admin_settings'),
    'access arguments' => array('administer exclude node author'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'exclude_node_author.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_preprocess_overlay().
 * @param $vars
 */
function exclude_node_author_preprocess_overlay(&$vars) {
  exclude_node_author_preprocess_page($vars);
}

/**
 * Implements hook_preprocess_page().
 * @param $vars
 */
function exclude_node_author_preprocess_page(&$vars) {
  if (!user_access('use exclude node author')) {
    return;
  }

  if (arg(0) == 'node' && is_numeric(arg(1))) {
    switch (arg(2)) {
      case 'edit':
        $view_mode = 'nodeform';
        break;

      // Delete pages show you all information in author, we should not remove it.
      case 'delete':
        return;

      default:
        $view_mode = 'full';
        break;

    }

    _exclude_node_author_preprocess($vars, arg(1), $view_mode);
  } elseif (isset($vars['page']['content']['system_main']['#node_edit_form']) && $vars['page']['content']['system_main']['#node_edit_form'] == TRUE) {
    _exclude_node_author_preprocess($vars, $vars['page']['content']['system_main']['#node'], 'nodeform');
  }
}

/**
 * Implements hook_preprocess_node().
 * @param $vars
 */
function exclude_node_author_preprocess_node(&$vars) {
  if (user_access('use exclude node author')) {
    _exclude_node_author_preprocess($vars, $vars['node'], $vars['view_mode']);
  }
}

/**
 * Remove the author from the variables array.
 * @param $vars
 * @param $node
 * @param $view_mode
 */
function _exclude_node_author_preprocess(&$vars, $node, $view_mode) {
  if (_exclude_node_author($node, $view_mode)) {
    if (user_access('administer exclude node author') && variable_get('exclude_node_author_administrator', 0) == 1) {
      $vars['submitted'] .= ' <span style="font-style: italic; font-size:small; color: red;">';
      $vars['submitted'] .= t('Author information hidden for most users') . '</span>';
    }
    else {
      $vars['display_submitted'] = '';
    }
  }
}

/**
 * Custom logic function, determines if the author information should be hidden or not.
 * @param $param
 * @param string $view_mode
 * @return bool
 */
function _exclude_node_author($param, $view_mode = 'full') {
  list($nid, $node_type) = _exclude_node_author_get_node($param);
  $nid_exclude_list = variable_get('exclude_node_author_nid_list', array());
  $nid_list = array($nid => $nid);
  foreach ($nid_list as $item_nid) {
    if (in_array($item_nid, $nid_exclude_list)) {
      return TRUE;
    }
  }
}

/**
 * @param $param
 * @return array|bool
 */
function _exclude_node_author_get_node($param) {
  // we accept only integer and object
  if (!is_object($param) && !is_numeric($param)) {
    return FALSE;
  }

  // if numeric, load the node with nid
  if (is_numeric($param)) {
    $node = node_load(intval($param));
    if (!is_object($node)) {
      return FALSE;
    }
  }
  else if (is_object($param)) {
    $node = $param;
    unset($param);
  }

  // Check that the node exists
  if (!isset($node) || !isset($node->type)) {
    return FALSE;
  }

  $node_type = $node->type;
  $nid = isset($node->nid)? $node->nid : FALSE;
  unset($node);
  return array($nid, $node_type);
}

/**
 * Implements hook_form_alter().
 * @param $form
 * @param $form_state
 * @param $form_id
 * @return bool
 */
function exclude_node_author_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['type']) && isset($form['#node']) && $form['type']['#value'] . '_node_form' == $form_id) {
    // make sure user have permissions correct
    if (!exclude_node_author_check_perm($form['#node'])) {
      return FALSE;
    }
        $form['author']['exclude_node_author'] = array(
        '#type' => 'checkbox',
        '#title' => t('Exclude author information from display'),
        '#required' => FALSE,
        '#default_value' => (!empty($form['nid']['#value']) ? in_array($form['nid']['#value'], variable_get('exclude_node_author_nid_list', array())) : FALSE ),
        '#weight' => -10,
      );
  }
}

/**
 * Custom function to check permission to change node author exclusion.
 * @param $node
 * @return bool
 */
function exclude_node_author_check_perm($node) {
  global $user;
  if (user_access('use exclude node author'))
    return TRUE;
  if (!user_access('use exclude node author'))
    return FALSE;
  return !strcmp($node->name, $user->name);
}

/**
 * Implements hook_node_update().
 * @param $node
 */
function exclude_node_author_node_update($node) {
  if (isset($node->exclude_node_author) && exclude_node_author_check_perm($node)) {
    exclude_node_author_set_flag($node, $node->exclude_node_author);
  }
}

/**
 * Implements hook_node_insert().
 * @param $node
 */
function exclude_node_author_node_insert($node) {
  if (isset($node->exclude_node_author) && exclude_node_author_check_perm($node)) {
    exclude_node_author_set_flag($node, $node->exclude_node_author);
  }
}

/**
 * Implements hook_node_delete().
 * @param $node
 */
function exclude_node_author_node_delete($node) {
  if (isset($node->exclude_node_author) && $node->exclude_node_author == 1 ) {
    exclude_node_author_set_flag($node, 0);
  }
}

/**
 * Set exclude_node_author flag for the given node.
 * @param $node
 * @param int $value
 */
function exclude_node_author_set_flag($node, $value = 1) {
  $exclude_list = variable_get('exclude_node_author_nid_list', array());
  $is_excluded = array_search($node->nid, $exclude_list);
  if ($value == 1 && $is_excluded === FALSE) {
    $exclude_list[] = $node->nid;
    variable_set('exclude_node_author_nid_list', $exclude_list);
    return;
  }
  if ($value == 0 && $is_excluded !== FALSE) {
    unset($exclude_list[$is_excluded]);
    variable_set('exclude_node_author_nid_list', $exclude_list);
    return;
  }
}
