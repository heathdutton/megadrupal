<?php

/**
 * @file
 * Tracks affiliate referrals and commissions
 *
 * Uses role based authorization to track affiliate referrals
 * and affiliate commissions
 */

/**
 * Implements of hook_help().
 */
function uc_affiliate2_help($path, $arg) {
  switch ($path) {
    case 'admin/modules#description':
      return t('Tracks affiliate referrals and commissions');
      break;
    case 'admin/modules/affiliate':
      return t('Display user hierarchy.');
      break;
  }
}

/**
 * Implements of hook_init().
 */
function uc_affiliate2_init() {
  require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'uc_affiliate2') . '/uc_affiliate2.ca.inc';

  _uc_affiliate2_handle_cookie();
  _uc_affiliate2_handle_request();
}

/**
 * Implements of hook_menu().
 */
function uc_affiliate2_menu() {
  $access = array('administer affiliates');

  $items['admin/store/settings/affiliate'] = array(
    'title' => 'Affiliates',
    'description' => 'Manage site affiliates',
    'page callback' => 'uc_affiliate2_admin_manage',
    'access arguments' => array('administer affiliates'),
    'file' => 'uc_affiliate2.admin.inc',
  );

  $items['admin/store/settings/affiliate/manage'] = array(
    'title' => 'Manage',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
    'access arguments' => array('administer affiliates'),
    'file' => 'uc_affiliate2.admin.inc',
  );
  $items['admin/store/settings/affiliate/reports'] = array(
    'title' => 'Reports',
    'page callback' => 'uc_affiliate2_monthly_report',
    'access arguments' => $access,
    'type' => MENU_LOCAL_TASK,
    'weight' => -8,
    'file' => 'uc_affiliate2.admin.inc',
  );
  $items['admin/store/settings/affiliate/banners'] = array(
    'title' => 'Banner/Links',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_affiliate2_banner_settings'),
    'access arguments' => $access,
    'type' => MENU_LOCAL_TASK,
    'file' => 'uc_affiliate2.admin.inc',
  );
  $items['admin/store/settings/affiliate/commissions'] = array(
    'title' => 'Commissions',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_affiliate2_commission_settings'),
    'access arguments' => $access,
    'type' => MENU_LOCAL_TASK,
    'file' => 'uc_affiliate2.admin.inc',
  );
  $items['admin/store/settings/affiliate/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_affiliate2_admin_settings'),
    'access arguments' => $access,
    'type' => MENU_LOCAL_TASK,
    'file' => 'uc_affiliate2.admin.inc',
  );

  $items['admin/store/orders/%/affiliates'] = array(
    'title' => 'Affiliate Commissions',
    'page callback' => 'uc_affiliate2_order_commissions',
    'page arguments' => array(3),
    'access arguments' => $access,
    'type' => MENU_LOCAL_TASK,
    'file' => 'uc_affiliate2.admin.inc',
    'weight' => 5,
  );

  $items['admin/store/orders/%/affiliates/%/edit'] = array(
    'title' => 'Edit affiliate Commissions',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_affiliate2_order_edit_commissions', 3, 5),
    'access arguments' => $access,
    'type' => MENU_CALLBACK,
    'file' => 'uc_affiliate2.admin.inc',
  );

  $items['admin/store/orders/%/affiliates/%/remove'] = array(
    'title' => 'Remove Affiliate Commissions',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_affiliate2_order_remove_commissions', 3, 5),
    'access arguments' => $access,
    'type' => MENU_CALLBACK,
    'file' => 'uc_affiliate2.admin.inc',
  );
  $items['uc_affiliate2/autocomplete'] = array(
    'title' => 'Affiliate Autocomplete',
    'page callback' => 'uc_affiliate2_autocomplete',
    'access arguments' => $access,
    'type' => MENU_CALLBACK,
  );

  // The path for affiliate links defaults to /affiliate/[uid]
  // however, this can be overridden by adding the following line
  // $conf['uc_affiliate2_path'] = 'my_affiliate_path'
  // in the site's settings.php file
  $items[variable_get('uc_affiliate2_path', 'affiliate')] = array(
    'page callback' => 'uc_affiliate2_click_callback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['user/%user/affiliate'] = array(
    'title' => 'Affiliate Center',
    'page callback' => 'uc_affiliate2_dashboard',
    'page arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'access callback' => '_uc_affiliate2_user_access',
    'access arguments' => array(1),
    'file' => 'uc_affiliate2.user.inc',
    'weight' => -9,
  );
  $items['user/%user/affiliate/dashboard'] = array(
    'title' => 'Dashboard',
    'page callback' => 'uc_affiliate2_dashboard',
    'page arguments' => array(1),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access callback' => '_uc_affiliate2_user_access',
    'access arguments' => array(1),
    'file' => 'uc_affiliate2.user.inc',
    'weight' => 0,
  );
  $items['user/%user/affiliate/links'] = array(
    'title' => 'Generate Links',
    'page callback' => 'uc_affiliate2_links',
    'page arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'access callback' => '_uc_affiliate2_user_access',
    'access arguments' => array(1),
    'file' => 'uc_affiliate2.user.inc',
    'weight' => 1,
  );
  $items['user/%user/affiliate/links/export'] = array(
    'title' => 'Export Products - HTML',
    'page callback' => 'uc_affiliate2_links_export',
    'type' => MENU_CALLBACK,
    'access callback' => '_uc_affiliate2_user_access',
    'access arguments' => array(1),
    'file' => 'uc_affiliate2.user.inc',
  );
  $items['user/%user/affiliate/commissions'] = array(
    'title' => 'Commissions',
    'page callback' => 'uc_affiliate2_commissions',
    'page arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'access callback' => '_uc_affiliate2_user_access',
    'access arguments' => array(1),
    'file' => 'uc_affiliate2.user.inc',
    'weight' => 2,
  );
  $items['user/%user/affiliate/clicks'] = array(
    'title' => 'Unique Click Count',
    'page callback' => 'uc_affiliate2_clicks',
    'page arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'access callback' => '_uc_affiliate2_user_access',
    'access arguments' => array(1),
    'file' => 'uc_affiliate2.user.inc',
    'weight' => 3,
  );
  $items['user/%user/affiliate/clicks/details'] = array(
    'title' => 'Unique Clicks - Details',
    'page callback' => 'uc_affiliate2_click_details',
    'page arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'access callback' => '_uc_affiliate2_user_access',
    'file' => 'uc_affiliate2.user.inc',
    'access arguments' => array(1),
  );
  $items['user/%user/affiliate/orders'] = array(
    'title' => 'All Orders',
    'page callback' => 'uc_affiliate2_orders',
    'page arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'access callback' => '_uc_affiliate2_user_access',
    'access arguments' => array(1),
    'file' => 'uc_affiliate2.user.inc',
    'weight' => 4,
  );
  $items['user/%user/affiliate/downline'] = array(
    'title' => 'Downline',
    'page callback' => 'uc_affiliate2_downline',
    'page arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'access callback' => '_uc_affiliate2_user_access',
    'access arguments' => array(1, 'downline'),
    'file' => 'uc_affiliate2.user.inc',
    'weight' => 5,
  );

  $items['user/%user/affiliate/upline'] = array(
    'title' => 'Upline',
    'page callback' => 'uc_affiliate2_upline',
    'page arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'access callback' => '_uc_affiliate2_user_access',
    'access arguments' => array(1, 'upline'),
    'file' => 'uc_affiliate2.user.inc',
    'weight' => 6,
  );

  //add item to node-form to adjust commissions by product
  $items['node/%node/edit/commissions'] = array(
    'title' => 'Affiliate Commissions',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_affiliate2_product_commission_form', 1),
    'type' => MENU_LOCAL_TASK,
    'access callback' => '_uc_affiliate2_node_access',
    'access arguments' => array(1),
    '#weight' => 1,
    'file' => 'uc_affiliate2.admin.inc',
  );

  $items['uc_affiliate2/ahah/%'] = array(
    'page callback' => 'uc_affiliate2_ahah',
    'page arguments' => array(2),
    'access arguments' => $access,
    'type' => MENU_CALLBACK,
    'file' => 'uc_affiliate2.admin.inc',
  );

  return $items;
}

/**
 * Implements of hook_permission()
 */
function uc_affiliate2_permission() {

  return array(
    'act as affiliate' => array(
      'title' => t('Act as an Affiliate'),
      'description' => t('Act as an Affiliate'),
    ),
    'adjust user commissions' => array(
      'title' => t('Adjust User Commissions'),
      'description' => t('Adjust User Commissions'),
    ),
    'administer affiliates' => array(
      'title' => t('Administer Affiliates'),
      'description' => t('Administer Affiliates'),
      'restrict' => TRUE,
    ),
  );

}

/**
 * Implements of hook_theme()
 */
function uc_affiliate2_theme() {
  return array(
    'uc_affiliate2_columns_checkboxes' => array(
      'variables' => array('e' => NULL),
    ),
    'uc_affiliate2_product_commission_form_current' => array(
      'render element' => array('form' => NULL),
    ),
    'uc_affiliate2_product_commission_form' => array(
      'render element' => array('form' => NULL),
    ),
  );
}


/*
 * Implements of hook_user_insert()
 */
function uc_affiliate2_user_insert(&$edit, $account, $category) {
  if (isset($_SESSION['affiliate'])) {
    $result = db_insert('uc_affiliate2_users')
      ->fields( array('aid' => $_SESSION['affiliate'], 'uid' => $account->uid) )
      ->execute();
    $message = t('User !name referred by user id !affiliate', array(
      '!name' => theme('username', array('account' => $account)),
      '!affiliate' => drupal_placeholder($_SESSION['affiliate']),
    ));
    watchdog('user', $message);
  }
}

/*
 * Implements of hook_user_delete()
 */
function uc_affiliate2_user_delete($account) {
  // This account is being deleted. Remove all related affiliate data
  $parent = db_select('uc_affiliate2_users', 'au')
      ->fields('au', array('aid'))
      ->condition('uid', $account->uid, '=')
      ->execute()->fetchField();
  /**
   * If the affiliate has a parent we need to assign his children to his parent
   */
  if ($parent) {
    db_delete('uc_affiliate2_users')
        ->condition('uid', $account->uid)
        ->execute();
    db_update('uc_affiliate2')
        ->condition('aid', $account->uid)
        ->fields(array('aid'), $parent)
        ->execute();
  }
  else {
    db_delete('uc_affiliate2_users')
        ->condition('aid', $account->uid)
        ->execute();
    db_delete('uc_affiliate2_users')
        ->condition('uid', $account->uid)
        ->execute();
  }

  db_delete('uc_affiliate2_orders')
      ->condition('aid', $account->uid)
      ->execute();

  db_delete('uc_affiliate2_clicks')
      ->condition('aid', $account->uid)
      ->execute();

  db_delete('uc_affiliate2_commission')
      ->condition('aid', $account->uid)
      ->execute();

  db_delete('uc_affiliate2_paid')
      ->condition('aid', $account->uid)
      ->execute();

}

/*
 * Implements of hook_user_view()
 */
function uc_affiliate2_user_view($account, $view_mode, $langcode) {
  global $user;
  if (user_access('act as affiliate', $account) && $account->uid == $user->uid && $account->uid > 1) {
    $account->content['affiliate'] = array(
      '#type' => 'user_profile_category',
      '#title' => t('Affiliate'),
      'link' => array(
        '#type' => 'user_profile_item',
        '#title' => '',
        '#markup' => t('Manage your business') . ' ' . l(t('here'), "user/{$account->uid}/affiliate"),
      ),
    );
  }
}

/*
 * Implements of hook_user_load()
 */
function uc_affiliate2_user_load($users) {
  $result = db_query('SELECT * FROM {uc_affiliate2_user_commission} WHERE uid IN (:uids)', array(':uids' => array_keys($users)));
  foreach ($result as $record) {
    $users[$record->uid]->commission = $record->commission;
  }
}

/*
 * Implements of hook_form_FROM-ID_alter
 */
function uc_affiliate2_form_alter( &$form, &$form_state, $form_id ) {
  if ( user_access('adjust user commissions') && $form_id == 'user_profile_form') {
    $form['commission_settings'] = array(
      '#type' => 'fieldset',
      '#title' => t('Affiliate Commission Settings'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#weight' => 10,
    );

    $form['commission_settings']['commission'] = array(
      '#type' => 'textfield',
      '#title' => t('Commission'),
      '#default_value' => isset($form['#user']->commission) ? $form['#user']->commission : '',
      '#description' => t('The commission percentage for this user (number only). Leave blank to use either product or global commissions.'),
    );
    $form['#submit'][] = 'uc_affiliate2_commission_submit';
  }
}

function uc_affiliate2_commission_submit($form, $form_state) {
  $result = db_query('SELECT commission FROM {uc_affiliate2_user_commission} WHERE uid = :uid', array(':uid' => $form['#user']->uid));
  if ($result->rowCount() == 0 && !empty($form_state['values']['commission'])) {
    db_insert('uc_affiliate2_user_commission')
    ->fields(array(
      'uid' => $form['#user']->uid,
      'commission' => $form_state['values']['commission'],
    ))->execute();
  }
  else {
    db_update('uc_affiliate2_user_commission')
    ->fields(array(
      'commission' => $form_state['values']['commission'],
    ))->condition('uid', $form['#user']->uid)->execute();
  }
}

/**
 * Implements of hook_views_api().
 */
function uc_affiliate2_views_api() {
  return array(
    'api' => '2.0',
    'path' => drupal_get_path('module', 'uc_affiliate2') . '/views',
  );
}

function _uc_affiliate2_node_access($node) {
  if (in_array($node->type, module_invoke_all('product_types')) && user_access('administer products')) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Since user_access only accepts one access rule as an argument, and we need
 * several checks, which are no longer possible to be done in hook_menu,
 * we do them here.
 */
function _uc_affiliate2_user_access($account, $mode = '') {
  global $user;

  // The admin can't be an affiliate.
  if ($account->uid <= 1) {
    return FALSE;
  }

  $access = (($user->uid == $account->uid) && user_access('act as affiliate', $account)) || (user_access('administer users') && user_access('act as affiliate', $account));

  // if we need upline, and it's disabled, don't display it ;)
  if ($mode == 'upline' && variable_get('affiliate_enable_upline', 0) == 0) {
    return FALSE;
  }

  if ($mode == 'downline' || $mode == 'upline') {
    // Show upline and downline if affiliate hierarchy depth is greater than 1
    if (variable_get('affiliate_hierarchy_depth', 5) > 1 && $access) {
      return TRUE;
    }

    return FALSE;
  }

  return $access;
}

/**
 * Get all of the selected products, used in affiliate/links after the form
 * has been submited.
 */
function _uc_affiliate2_get_products($mode, $show = array()) {
  global $user;

  if ($mode == 'html') {
    $template = variable_get('affiliate_product_html_template', '<div id="prodcontain"><a href="[LINK]"><img src="[IMG]"></a><br /><div id="description">description:</div>[DESCRIPTION]<br /><div id="price">[PRICE]</div><br /></div>');
  }

  // Get active products
  $values = array();
  $products = array();
  $output = '';

  if ($mode == 'csv') {
    $output = t('Product Name') . ', ' . t('Price') . ', ' . t('Description') . ', ' . t('Image Link') . ', ' . t('Link') . "\n";
  }

  $product_types = uc_product_types();
  //$where .= ' AND type IN (' . db_placeholders($product_types, 'varchar') . ')';
  $values = array_merge($values, $product_types);

  $query = db_select('node', 'n');
  $query->fields('n', array('nid', 'title'));
  $query->condition('n.status', 1);
  $query->condition('n.type', $product_types, 'IN');
  if (count($show) > 0) {
    $query->condition('nid', $show, 'IN');
  }
  if ($mode != 'csv') {
    $query->range(0, 5);

  }
  $result = $query->execute();
  /*
   $sql = "SELECT nid, title FROM {node} WHERE status = 1 AND type IN (:placeholder_type) AND nid IN (:placeholder_nid)";
   if($mode == 'csv'){
   $result = db_query($sql, array(':placeholder_type' => $product_types, ':placeholder_nid' => $show));
   } else {
   $result = db_query($sql, array(':placeholder_type' => $product_types));
   $result->range(0, 5);
   }
   } else {
   $sql = "SELECT nid, title FROM {node} WHERE status = 1 AND type IN (:placeholder_type)";
   if($mode == 'csv'){
   $result = db_query($sql, array(':placeholder_type' => $product_types));
   } else {
   $result = db_query($sql, array(':placeholder_type' => $product_types));
   $result->range(0, 5);
   }
   }*/

  if (!$result) {
    return;
  }

  foreach ($result as $node) {
    $product_commission = uc_affiliate2_get_product_commission($user, $node->nid);
    if ($product_commission->commission_structure == 0) {
      continue;
    }

    $product = node_load($node->nid);

    $product->path = isset($product->path) ? $product->path : node_uri($node);
    $link = _uc_affiliate2_url($product->path['path'], $user, array('alias' => TRUE));

    if (empty($product->uc_product_image[$product->language][0]['uri'])) {
      $image = 'N/A';
    }
    else {
      $image = file_create_url($product->uc_product_image[$product->language][0]['uri']);
    }

    $title = check_plain($product->title);

    $description = trim($product->body[$product->language][0]['safe_value']);

    $context = array(
      'revision' => 'themed',
      'type' => 'product',
      'class' => array('product', 'sell'),
      'field' => 'sell_price',
      'subject' => array('node' => $product),
    );

    $price = uc_currency_format($product->sell_price);

    switch ($mode) {
      case 'csv':
        $output .= $title . ',';
        $output .= $price . ',';

        /*According to RFC 4180 double quotes in CSV should be quoted with double quote
        * see https://bugs.php.net/bug.php?id=50686
        **/
        $output .= '"' . str_replace('"', '""', $description) . '",';

        $output .= $image . ',';
        /*According to RFC 4180 line termination should be \r\n and not \n*/
        $output .=  $link . "\r\n";
        break;

      case "html":
        $image = ($image == 'N/A') ? $GLOBALS['base_url'] . '/misc/watchdog-error.png' : $image;
        $products[$title] = str_replace(array('[LINK]', '[TITLE]', '[IMG]', '[DESCRIPTION]', '[PRICE]'), array($link, $title, $image, $description, $price), $template);
        break;
    }
  }

  if ($mode == 'csv') {
    return $output;
  }

  return $products;
}

/**
 * Get a list of all added products, used in the form on affiliate/links
 */
function _uc_affiliate2_get_product_list() {
  global $user;

  $product_types = uc_product_types();
  $result = db_query('SELECT nid, title FROM {node} WHERE status = 1 and type IN (:placeholder) ORDER BY title ASC', array(':placeholder' => $product_types));
  if (!$result) {
    return;
  }

  $products = array();
  foreach ($result as $node) {
    $product_commission = uc_affiliate2_get_product_commission($user, $node->nid);
    if ($product_commission->commission_structure == 0) {
      continue;
    }

    $products[$node->nid] = $node->title;
  }

  return $products;
}

/**
 * Used to avoid the N+1 queries problem on monthly_report and admin_users.
 */
function _uc_affiliate2_get_amounts($filter, $filter_value, $index) {
  $query = db_select('uc_affiliate2_paid','ua');
  $query->fields('ua',array('amount','aid','date'));
  $query->condition($filter,$filter_value,'=');
  $result = $query->execute();

  $amounts = array();

  foreach ($result as $amount_data) {
    $amounts[$amount_data->$index] = $amount_data->amount;
  }

  return $amounts;
}

/*
 * Implements of hook_cart_item
 * Add tracking of which store each product comes from
 */
function uc_affiliate2_uc_add_to_cart_data($form_values) {
  if (!empty($_SESSION['affiliate'])) {
    return array('affiliate' => $_SESSION['affiliate']);
  }
}

/**
 * Implements of hook_form_FORM-ID_alter().
 *
 * Form - uc_order_view_update_form
 */
function uc_affiliate2_form_uc_order_view_update_form_alter(&$form, $form_state) {
  if (user_access('adjust user commissions')) {
    $form['affiliate'] = array(
      '#type' => 'fieldset',
      '#title' => t('Affiliate commissions'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );

    $form['affiliate']['affiliate_op'] = array(
      '#type' => 'select',
      '#title' => t('Operation'),
      '#options' => array(
        '' => t('Select operation to perform..'),
        'credit' => t('Re-apply affiliate commision.'),
        'remove' => t('Remove affiliate commission.'),
      ),
    );
    $form['affiliate']['affiliate_id'] = array(
      '#type' => 'textfield',
      '#title' => t('Affiliate id or username to credit or remove commissions on'),
      '#description' => t('Leave blank to match any affiliates.'),
      '#default_value' => uc_affiliate2_get_affiliate_id($form['order_id']['#value']),
      '#size' => 20,
      '#autocomplete_path' => 'uc_affiliate2/autocomplete',
    );
    $form['#submit'][] = 'uc_affiliate2_order_view_update_form_submit';
  }
}

/**
 *
 */
function uc_affiliate2_order_view_update_form_submit($form, &$form_state) {
  $order = uc_order_load($form_state['values']['order_id']);

  switch ($form_state['values']['affiliate_op']) {
    case 'credit':
      if (empty($form_state['values']['affiliate_id'])) {
        if ($aid = _uc_affiliate2_get_user($order->uid)) {
          $form_state['values']['affiliate_id'] = $aid;
        }
      }
      $affiliate_id = $form_state['values']['affiliate_id'];
      foreach ($order->products as $index => $product) {
        $order->products[$index]->data['affiliate'] = $affiliate_id;
      }
      uc_affiliate2_apply_commission($order, $affiliate_id);
      break;

    case 'remove':
      uc_affiliate2_remove_commission($order, $form_state['values']['affiliate_id']);
      break;
  }
}

/*
 * Implements of hook_order
 * Tracks affiliate commissions
 */
function uc_affiliate2_uc_order($op, &$order, $status) {
  global $user;

  $statuses = variable_get('affiliate_commission_order_statuses', array('completed' => 'completed'));

  if ($op == 'new') {
    // Start with no affiliate.
    $affiliate = 0;

    // If this is the user's session, and an affiliate is stored, use that.
    if ($user->uid == $order->uid && !empty($_SESSION['affiliate'])) {
      $affiliate = $_SESSION['affiliate'];
    }

    switch (variable_get('affiliate_subsequent_order_commissions', 'none')) {
      case 'none':
        // No special handling for subsequent orders.
        break;
      case 'enable':
        // Break out if there already is an affiliate.
        if ($affiliate) {
          break;
        }
        // Intentionally fall into the next case to apply the original affiliate.
      case 'override':
        // Use the affiliate that originally referred the user if there is one.
        if ($aid = _uc_affiliate2_get_user($order->uid)) {
          $affiliate = $aid;
        }
        break;
      case 'exclusive':
        // It doesn't matter what's in the session. Only use an affiliate the
        // user might be under.
        $affiliate = _uc_affiliate2_get_user($order->uid);
        break;
    }

    if ($affiliate) {
      $id = db_insert('uc_affiliate2_orders')
        ->fields(array(
          'aid' => $affiliate,
          'order_id' => $order->order_id,
        ))
        ->execute();
    }
  }
  elseif ($op == 'delete') {
    db_delete('uc_affiliate2_orders')->condition('order_id', $order->order_id)->execute();
  }

  // give commissions

  if ($op == 'update' && isset($statuses[$status]) && !isset($statuses[$order->order_status])) {
    // Get the affiliate id associated with the order.
    $affiliate = db_query('SELECT aid FROM {uc_affiliate2_orders} WHERE order_id = :order_id', array(':order_id' => $order->order_id))->fetchField();
    // If there was no affiliate, $affiliate will be FALSE at this point.
    uc_affiliate2_apply_commission($order, $affiliate);
  }

  // take commissions ( moving from a "give commissions" status to a one that doesn't have that privillege)
  if ($op == 'update' && isset($statuses[$order->order_status]) && $status && !isset($statuses[$status])) {
    uc_affiliate2_remove_commission($order);
  }
}

/**
 * uc_affiliate2 helper methods
 */

/**
 * Apply commission owed to an order.
 *
 * @param $order
 *   Ubercart order object.
 * @param $affiliate_id
 *   Affiliate ID to apply commission if there are no product specific commissions.
 */
function uc_affiliate2_apply_commission($order, $affiliate_id = NULL) {
  // order ready for commission assignment
  // find all affiliates included in order
  $affcom = array();

  $no_commmission_methods = array_flip(variable_get('affiliate_no_commission_payment_methods', array()));

  // we shouldn't give commissions on these payment methods.
  if (array_key_exists($order->payment_method, $no_commmission_methods)) {
    return;
  }

  $context = array(
    'revision' => 'altered',
    'type' => 'order_product',
    'subject' => array('order' => $order),
  );

  // sum the prices of products from each affiliate store
  $nids = array();
  foreach ($order->products as $product) {
    $price_info = array(
      'price' => $product->price,
      'qty' => ($product->qty) ? $product->qty : 1,
    );
/*    $context['subject']['product'] = $product;
    $context['subject']['node'] = node_load($product->nid);*/
//    $price = uc_currency_format($price_info['price'] * $price_info['qty']);
    $price = $price_info['price'] * $price_info['qty'];

    if (isset($product->data['affiliate'])) {
      $aff = $product->data['affiliate'];
    }
    elseif (empty($affiliate_id)) {
      continue;
    }
    else {
      $aff = $affiliate_id;
    }

    $affcom[$aff]['total'] = isset($affcom[$aff]['total']) ? $affcom[$aff]['total'] + $price : $price;
    $affcom[$aff]['products'][$product->nid][$product->model] = array(
      'price' => $product->price,
      'qty' => $product->qty,
      'total' => $price,
    );
  }

  // write commission records
  foreach ($affcom as $affid => $data) {
    $affs = _uc_affiliate2_get_upline_ids($affid);
    for ($level = 1; $level <= count($affs); $level++) {
      $aff = $affs[$level -1];

      // calculate the commission for this affiliate/level
      $commission = 0;
      foreach ($data['products'] as $pid => $product_data) {
        foreach ($product_data as $model => $model_data) {
          $comm = _uc_affiliate2_get_commission($aff, $level, $pid, $model);
          $comm_pct = _uc_affiliate2_commission_is_percentage($comm);
          if ($comm_pct !== FALSE) {
            $commission += $model_data['total'] * $comm_pct / 100;
          }
          else {
            $commission += $comm * $model_data['qty'];
          }
        }
      }

      $comm = new stdClass();
      $comm->order_id = $order->order_id;
      $comm->aid = $aff;
      $comm->commission = $commission; //@todo: should this be rounded in any way?
      $comm->level = $level;
      $comm->commission_notes = t('Level @level commission recorded for affiliate uid:@affiliate', array('@affiliate' => $aff, '@percent' => $comm_pct * 100, '@level' => $level, '@commission' => uc_currency_format($comm->commission), '@ordertotal' => uc_currency_format($price), '@firstname' => $order->billing_first_name, '@lastname' => $order->billing_last_name));

      // data field is not saved, but used in CA
      $comm->data = $data;

      //ca_pull_trigger('uc_affiliate2_apply_commission', $order, $comm); //no more needed has to be integrated with rules
      if ($comm->commission > 0) {
        uc_affiliate2_commission_save($comm);
      }
    }
  }
}

/**
 * Remove affiliate commission from an order.
 *
 * @param $order
 *   Ubercart order object.
 * @param $affiliate_id
 *   Affiliate ID to remove commissions from (default is all affiliates on the order).
 */
function uc_affiliate2_remove_commission($order, $affiliate_id = NULL) {
  global $user;

  $result = db_query("SELECT aid FROM {uc_affiliate2_commission} WHERE order_id = :order_id", array(':order_id' => $order->order_id));
  $affiliates = array();
  foreach ($result as $affiliate) {
    if (empty($affiliate_id) || $affiliate->aid == $affiliate_id) {
      $affiliates[] = $affiliate->aid;
    }
  }

  if (count($affiliates) < 1) { // not an affiliate order
    return;
  }

   db_delete('uc_affiliate2_commission')->condition('order_id', $order->order_id)->execute();

  foreach ($affiliates as $affiliate) {
    $note = t('Removed commission recorded for affiliate uid: @affiliate', array('@affiliate' => $affiliate));
    uc_order_comment_save($order->order_id, $user->uid, $note);
  }
}

/**
 * Saves a affiliate commission.
 *
 * @param $comm
 *   A commission object.
 */
function uc_affiliate2_commission_save($comm) {
  // Update an existing row.
  drupal_alter('affiliate2_commission', $comm);

  if (!empty($comm->commission_id)) {
    // Update an existing row.
    drupal_write_record('uc_affiliate2_commission', $comm, array('commission_id'));
  }
  else {
    drupal_write_record('uc_affiliate2_commission', $comm);
  }
  uc_order_comment_save($comm->order_id, 0, $comm->commission_notes);

  return $comm->commission_id;
}

/**
 * Makes the ranges used for selecting entries
 * (for example: 12th May 00:00:00, 12th May 11:59:59)
 * We substract the timezone, doing exactly the oposite of what format_date does.
 * (so that the we don't get timestamps belonging to a different day, after inserting them
 * into format_date)
 */
function _uc_affiliate2_predefined_range($type = 0, $substract_timezone = TRUE) {
  global $user;

  if (variable_get('configurable_timezones', 1) && $user->uid && strlen($user->timezone)) {
    $timezone = $user->timezone;
  }
  else {
    $timezone = variable_get('date_default_timezone', 0);
  }


  $now = REQUEST_TIME;
  $now = (int) format_date($now, 'custom', 'U');

  $dates = array();

  if (arg(5) != 0 && arg(6) != 0) {
    $start = arg(5);
    $end = arg(6);

    if ($substract_timezone) {
      $start -= $timezone;
      $end -= $timezone;
    }

    $dates = array(
      'start' => $start,
      'end' => $end,
    );

    return $dates;
  }

  switch ($type) {
    case 0: // this month
      $dates['start'] = mktime(0, 0, 0, date("m", $now), 1, date("Y", $now));
      $dates['end'] = mktime(23, 59, 59, date("m", $now) + 1, 0, date("Y", $now));
      break;
    case 1: // last month
      $dates['start'] = mktime(0, 0, 0, date("m", $now) -1, 1, date("Y", $now));
      $dates['end'] = mktime(23, 59, 59, date("m", $now), 0, date("Y", $now));
      break;
    case 2: // last 30 days
      $start = strtotime("-30 days", $now);
      $dates['start'] = mktime(0, 0, 0, date("m", $start), date("d", $start), date("Y", $start));
      $dates['end'] = mktime(23, 59, 59, date("m", $now), date("d", $now), date("Y", $now));
      break;
    case 3: // last 60 days
      $start = strtotime("-60 days", $now);
      $dates['start'] = mktime(0, 0, 0, date("m", $start), date("d", $start), date("Y", $start));
      $dates['end'] = mktime(23, 59, 59, date("m", $now), date("d", $now), date("Y", $now));
      break;
    case 4: // last 90 days
      $start = strtotime("-90 days", $now);
      $dates['start'] = mktime(23, 59, 59, date("m", $start), date("d", $start), date("Y", $start));
      $dates['end'] = mktime(23, 59, 59, date("m", $now), date("d", $now), date("Y", $now));
      break;
    case 5: // last 365 days
      $start = strtotime("-365 days", $now);
      $dates['start'] = mktime(23, 59, 59, date("m", $start), date("d", $start), date("Y", $start));
      $dates['end'] = mktime(23, 59, 59, date("m", $now), date("d", $now), date("Y", $now));
      break;
    case 6: // last 7 days
      $start = strtotime("-7 days", $now);
      $dates['start'] = mktime(23, 59, 59, date("m", $start), date("d", $start), date("Y", $start));
      $dates['end'] = mktime(23, 59, 59, date("m", $now), date("d", $now), date("Y", $now));
      break;
    case 7: // today
      $start = strtotime("-1 days", $now);
      $dates['start'] = mktime(23, 59, 59, date("m", $start), date("d", $start), date("Y", $start));
      $dates['end'] = mktime(23, 59, 59, date("m", $now), date("d", $now), date("Y", $now));
      break;
  }

  if ($substract_timezone) {
    $dates['start'] -= $timezone;
    $dates['end'] -= $timezone;
  }

  return $dates;
}


/**
 * Determine an affiliate's upline
 */
function _uc_affiliate2_get_upline_ids($aff) {
  if ($aff) {
    $level = variable_get('affiliate_hierarchy_depth', 5);
    $affids = array($aff);
    while ($aff = _uc_affiliate2_get_user($aff)) {
      if (count($affids) >= $level) {
        break;
      }
      $affids[] = $aff;
    }
    return $affids;
  }
  else {
    return array();
  }
}

/**
 * Alter the path and options before they are passed to the l() or url()
 * function so that an affiliate link is created.
 *
 * This function is used by _uc_affiliate2_url() and
 * _uc_affiliate2_l).
 */
function _uc_affiliate2_link_alter(&$path, &$options, $user) {
  if (empty($options['type'])) {
    $type = variable_get('affiliate_default_link_type', 'path');
  }
  else {
    $type = $options['type'];
  }

  // Affiliate links are always absolute.
  $options['absolute'] = TRUE;

  switch ($type) {
    case 'path':
      if ($path == '<front>' || !$path) {
        $path = '';
      }
      else {
        // Make the path an alias if it isn't already.
        if (empty($options['alias'])) {
          $path = drupal_get_path_alias($path, isset($options['language']) ? $options['language']->language : '');
        }
        // The ltrim() call is just in case the caller could've tossed in a slash.
        //$path = '/' . ltrim($path, '/');
      }
      $path = variable_get('uc_affiliate2_path', 'affiliate') . '/' . $user->uid .'/'. $path;
      // This new path definitely isn't an alias.
      $options['alias'] = FALSE;
      break;
    case 'query':
      if (isset($options['query']) && !is_array($options['query'])) {
        if (strlen($options['query'])) {
          $options['query'] .= '&';
        }
        $options['query'] .= "a=" . $user->uid;
      }
      else {
        $options['query']['a'] = $user->uid;
      }
      break;
  }
}

/**
 * Generate an affiliate url.
 *
 * This can replace url() function for generating affiliate urls. All the
 * options supported by url() are supported here.
 *
 * To use an affiliate link type other than the default, you can set a
 * 'type' option to either 'path' or 'query'.
 */
function _uc_affiliate2_url($path, $user, $options = array()) {
  _uc_affiliate2_link_alter($path, $options, $user);
  return url($path, $options);
}

/**
 * Generate an affiliate link.
 *
 * This can replace l() function for generating affiliate links. All the
 * options supported by l() are supported here.
 *
 * To use an affiliate link type other than the default, you can set a
 * 'type' option to either 'path' or 'query'.
 */
function _uc_affiliate2_l($text, $path, $user, $options = array()) {
  _uc_affiliate2_link_alter($path, $options, $user);
  return l($text, $path, $options);
}

function _uc_affiliate2_get_domain() {
  global $base_url;

  $domain = str_replace('http://', '', $base_url);
  $domain = explode('/', $domain);

  return $domain[0];
}

/**
 * Callback for the affiliate url (affiliate/$affiliate_uid).
 * Tries to register the click, then redirects to the frontpage (or destination, if given)
 */
function uc_affiliate2_click_callback($affiliate_uid) {
  if (is_numeric($affiliate_uid)) { // regular (affiliate/$affiliate_uid)
    $account = user_load($affiliate_uid);
  }
  elseif (is_string($affiliate_uid)) { // old url's (affiliate/$username),
    $account = array_shift(user_load_multiple(array(), array('name' => $affiliate_uid)));
  }
  $num_args = func_num_args();
  $goto = '<front>';

  if ($num_args > 1) {
    $args = func_get_args();
    unset($args[0]);

    $goto = join('/', $args);
  }
  $options=array();
  // There are some case where you want to use the destination query like in
  // cart_links module where you direct to one url to perform an action and
  // use the ?destination= argument to define the actual destination url.
  if (isset($_REQUEST['destination'])) {
    $options['query']= $_REQUEST['destination'];
  }
  if ($account && _uc_affiliate2_register_click($account, $goto)) {
    drupal_goto($goto, $options, 301);
  }
  else { // something went wrong
    $default_url = variable_get('affiliate_invalid_redirect', '<front>');
    drupal_set_message(t('You are attempting to access an affiliate store that does not exist. Please check the address and try again.'), 'error');
    drupal_goto($default_url);
  }
}

/**
 * Repopulate the affiliate session from an affiliate cookie, if such a cookie is set.
 *
 * Also runs a query on the clicks table, confirming that the cookie was accepted
 * by the client.
 *
 * Called from uc_affiliate2_init()
 */
function _uc_affiliate2_handle_cookie() {
  if (!empty($_COOKIE['affiliate']) && empty($_SESSION['affiliate'])) { // repopulate the session from the cookie
    $_SESSION['affiliate'] = $_COOKIE['affiliate']['uid'];
    $_SESSION['affiliate_cookie_timestamp'] = $_COOKIE['affiliate']['timestamp'];
    $_SESSION['affiliate_rid'] = $_COOKIE['affiliate']['rid'];
  }

  if (!empty($_COOKIE['affiliate']['update_click'])) {
    // The update_click cookie was set to the click_id so we can know exactly which click to update.
    db_update('uc_affiliate2_clicks')
      ->fields(array(
        'cookie_status' => 2,
      ))
      ->condition('click_id', $_COOKIE['affiliate']['update_click'])
      ->execute();
    setcookie('affiliate[update_click]', 0, REQUEST_TIME - 3600, '/');
  }
}

/**
 * Handles the ?a urls (for example, node/20?a=1).
 *
 * In contrast to the click menu callback, we don't need to redirect here.
 *
 * Called from uc_affiliate2_init().
 */
function _uc_affiliate2_handle_request() {
  if (!isset($_REQUEST['a'])) {
    return;
  }

  $account = user_load($_REQUEST['a']);
  _uc_affiliate2_register_click($account, $goto);
}

/**
 * Registers a click, inserts it into a database, and enters the affiliate uid into the session.
 *
 * Of course, it first checks if we already have an affiliate in session, and if the
 * referenced account is still an affiliate account.
 *
 * Also sets the cookie, if that option is enabled.
 */
function _uc_affiliate2_register_click($account, $target_path) {
  global $base_url, $user;

  // We check if the account provided is an affiliate ( not admin or anonymous user)
  if ($account->uid <= 1 || !user_access('act as affiliate', $account)) {
    return FALSE;
  }

  // Do we already have an affiliate in session? Do nothing
  if (isset($_SESSION['affiliate'])) {
    return TRUE;
  }

  // Get the affiliate role (only the last one)
  $rid = _uc_affiliate2_get_user_rid($account->roles);

  // Do we need to set the cookie? For how long?
  $set_cookie = variable_get('affiliate_set_cookie', 0);
  $time = REQUEST_TIME;

  if ($set_cookie) {
    $cookie_lifetime = variable_get('affiliate_cookie_lifetime', '1 year');
    $cookie_lifetime = strtotime('+ ' . $cookie_lifetime);

    setcookie('affiliate[uid]', $account->uid, $cookie_lifetime, '/');
    setcookie('affiliate[rid]', $rid, $cookie_lifetime, '/');
    setcookie('affiliate[timestamp]', $time, $cookie_lifetime, '/');
  }

  // store affiliate id in session and increment click count
  $_SESSION['affiliate'] = $account->uid;

  $target_path = ($target_path == '<front>') ? '' : $target_path;
  $click_id= db_insert('uc_affiliate2_clicks')
    ->fields(array(
      'aid' => $account->uid,
      'time' => $time,
      'cookie_status' => $set_cookie,
      'client_ip' => $_SERVER['REMOTE_ADDR'],
      'referrer' => $_SERVER['HTTP_REFERER'],
      'destination' => $target_path,
    ))
    ->execute();
  // If we're setting cookies, also set one so the cookie status for the click can be updated.
  if ($set_cookie) {
    // By setting this to the click_id, this exact click can be updated when the cookie comes back.
    setcookie('affiliate[update_click]', $click_id, $cookie_lifetime, '/');
  }

  return TRUE;
}

/**
 * Implements of hook_token_values(). (token.module)
 */
function uc_affiliate2_token_values($type, $object = NULL) {
  $values = array();

  $context = array(
    'revision' => 'altered',
    'type' => 'order_product',
    'subject' => array('order' => $object),
  );

  switch ($type) {
    case 'order':
      $order = $object;

      $values['order-affiliate-commission'] = uc_price(0, $context);
      $values['order-affiliate-uid'] = '';
      $values['order-affiliate-name'] = t('No affiliate');
      $values['order-affiliate-email'] = '';

      $query = db_select('uc_affiliate2_commission', 'ac');
      $query->innerjoin('users', 'u', 'ac.aid = u.uid');
      $query->innerjoin('uc_affiliate2_users', 'au', 'au.aid = ac.aid');
      $affiliate = $query
      ->fields('u', array('uid', 'name', 'mail'))
      ->fields('ac', array('commission'))
      ->condition('ac.order_id', $order->order_id, '=')
      ->condition('au.uid', $order->uid, '=')
      ->execute();
      if (!empty($affiliate)) {
        $values['order-affiliate-commission'] = uc_price($affiliate->commission, $context);
        $values['order-affiliate-uid'] = $affiliate->uid;
        $values['order-affiliate-name'] = $affiliate->name;
        $values['order-affiliate-email'] = $affiliate->mail;
      }
      break;
    case 'affiliate':
      $affiliate = $object;
      $account = user_load($affiliate->aid);
      $values['affiliate-uid'] = $account->uid;
      $values['affiliate-name'] = $account->name;
      $values['affiliate-email'] = $account->mail;
      $values['affiliate-commission'] = uc_price($affiliate->commission, $context);
      $values['affiliate-level'] = $affiliate->level;
      $tokens['affiliate-commissions-url'] = url('user/' . $account->uid . '/affiliate/commissions', array('absolute' => TRUE));
      break;
  }

  return $values;
}

/**
 * Implements of hook_token_list(). (token.module)
 */
function uc_affiliate2_token_list($type = 'all') {
  $tokens = array();
  if ($type == 'order' || $type == 'ubercart' || $type == 'all') {
    $tokens['order']['order-affiliate-commission'] = t('The affiliate commission amount.');
    $tokens['order']['order-affiliate-uid'] = t('The referring affiliate user ID.');
    $tokens['order']['order-affiliate-name'] = t('The referring affiliate name.');
    $tokens['order']['order-affiliate-email'] = t('The referring affiliate email.');
  }
  if ($type == 'affiliate' || $type == 'ubercart' || $type == 'all') {
    $tokens['affiliate']['affiliate-uid'] = t('Affiliate user ID.');
    $tokens['affiliate']['affiliate-name'] = t('Affiliate username');
    $tokens['affiliate']['affiliate-email'] = t('Affiliate email');
    $tokens['affiliate']['affiliate-commission'] = t('Affiliate commission amount.');
    $tokens['affiliate']['affiliate-level'] = t('Affiliate level.');
    $tokens['affiliate']['affiliate-commissions-url'] = t('Link to the affiliate commissions.');
  }
  return $tokens;
}

/**
 * Implements of hook_uc_message().
 */
function uc_affiliate2_uc_message() {
  $messages['uc_affiliate2_commission_subject'] = t('[store-name]: Affiliate Commission received');
  $messages['uc_affiliate2_commission_message'] = t("Hi [affiliate-name], \n\nCongratulations, an affiliate commission has been credited to your account.\n\nYou can see full details from your affiliate center: [affiliate-commissions-url].\n\nThanks again, \n\n[store-name]\n[site-slogan]");

  return $messages;
}

/**
 * Save a product commission record.
 */
function uc_affiliate2_product_commission_save($comm) {
  if (!empty($comm->commission_id)) {
    // Update an existing row.
    drupal_write_record('uc_affiliate2_product_commission', $comm, array('pcid'));
  }
  else {
    drupal_write_record('uc_affiliate2_product_commission', $comm);
  }

  return $comm->pcid;
}

/**
 * Save a product commission record.
 */
function uc_affiliate2_product_commission_delete($pcid) {
  db_delete('uc_affiliate2_product_commission')->condition('pcid',$pcid)->execute();
}

/**
 *
 */
function _uc_affiliate2_product_commission_rules() {
  return array(
    'all' => 'All affiliates',
    'role' => 'User role',
    'user' => 'User',
  );
}

function _uc_affiliate2_get_user_rid($user_roles) {
  $roles = user_roles(FALSE, 'act as affiliate');
  $roles = array_intersect_assoc($roles, $user_roles);
  $rids = array_keys($roles);
  $rid = end($rids);

  return $rid;
}

/**
 * Get the affiliate that a user belongs to
 */
function _uc_affiliate2_get_user($uid) {
  $aid = db_query('SELECT aid FROM {uc_affiliate2_users} WHERE uid = :uid', array(':uid' => $uid))->fetchField();
  if (!$aid) {
    return 0;
  }
  else {
    return $aid;
  }
}

/**
 * Determines if the format of the commission is in the correct format for a
 * percentage value.
 *
 * @param $commission
 *   The commission value.
 * @return
 *   The commission percentage if commission value is in the correct format,
 *   else FALSE if commission is not a percentage.
 */
function _uc_affiliate2_commission_is_percentage($commission) {
  if (substr(trim($commission), -1) == '%') {
    return floatval($commission);
  }
  return FALSE;
}

/**
 * Get an affiliates commission percentage for the given level
 *
 * @param $aff_id
 ID of the affiliate.
 * @param $level
 *   The affiliate commission being obtained.
 * @param $nid
 *   The node ID of the product being purchased.
 * @param $model
 *   The model/sku of the product being purchased.
 *
 * @return
 *   Commission percentate as a value between 0 and 1.
 */
function _uc_affiliate2_get_commission($aff_id, $level = 1, $nid = 0, $model = '') {

  $account = user_load($aff_id);

  if (isset($account->commission) && $level == 1) {
    return $account->commission / 100; // we have a commission percentage defined specially for this affilate
  }

  $depth = variable_get('affiliate_hierarchy_depth', 5);

  //check if this product has commission set for it
  $product_commission = uc_affiliate2_get_product_commission($account, $nid, $model);
  if (isset($product_commission->commmission_structure) && $product_commission->commmission_structure === '0') {
    return 0;
  }
  $default_structure = $product_commission->commission_structure;

  if (!empty($_SESSION['affiliate_rid'])) {
    $structure = variable_get('affiliate_commission_structure_' . $_SESSION['affiliate_rid'], array('5%', '3%', '2%', '2%', '1%'));
  }
  else {
    $structure = $default_structure;
  }

  if ($level <= $depth && $level <= count($structure)) {
    return $structure[$level -1];
  }

  return 0;
}

/**
 * Find the commission structure that matches for the specific product and user.
 */
function uc_affiliate2_get_product_commission($account, $nid, $model = '') {
  $result = db_query("SELECT * FROM {uc_affiliate2_product_commission} WHERE nid = :nid ORDER BY weight", array(':nid' => $nid));
  foreach ($result as $product_commission) {
    if (empty($product_commission->model) || $product_commission->model == $model) {
      $product_commission->commission_structure = unserialize($product_commission->commission_structure);

      if (count($product_commission->commission_structure) == 1 && $product_commission->commission_structure[0] == '0') {
        $product_commission->commission_structure = 0;
      }

      switch ($product_commission->rule) {
        case 'user':
          if ($account->uid == $product_commission->rule_match) {
            return $product_commission;
          }
          break;
        case 'role':
          if (array_key_exists($product_commission->rule_match, $account->roles)) {
            return $product_commission;
          }
        case 'all':
          return $product_commission;
      }
    }
  }

  // Return a default object.
  return (object) array(
    'nid' => $nid,
    'model' => NULL,
    'commission_structure' => variable_get('affiliate_commission_structure', array('5%', '3%', '2%', '2%', '1%')),
  );
}

/**
 *
 */
function theme_uc_affiliate2_columns_checkboxes($variables) {
  $e = $variables['e'];
  $options = $e['#options'];
  // Set the default if no columns are given.
  if (!isset($e['#columns'])) {
    $e['#columns'] = 8;
  }
  // Set the column number if less than the set amount.
  if (count($options) < $e['#columns']) {
    $e['#columns'] = count($options);
  }
  $rows = array();
  if (count($options) > 0) {
    foreach ($options as $key => $value) {
      $row[] = theme_checkbox($e[$key]);
      if (count($row) == $e['#columns']) {
        array_push($rows, $row);
        $row = array();
      }
    }
  }
  // This flushes out the columns when the items don't divide evenly into the columns.
  if (count($row)) {
    array_push($rows, $row);
  }
  return theme_table(NULL, $rows);
}

/**
 *
 */
function theme_uc_affiliate2_product_commission_form_current($variables) {
  $form = $variables['form'];
  $header = array('', '', t('Commission Structure'), t('Weight'), t('SKU'), t('Delete'));
  drupal_add_tabledrag('product-commissions', 'order', 'sibling', 'commission-weight');

  foreach (element_children($form) as $key) {
    // Add class to group weight fields for drag and drop.
    $form[$key]['weight']['#attributes']['class'] = 'commission-weight';

    $row = array();
    $row[] = drupal_render($form[$key]['rule']);
    $row[] = drupal_render($form[$key]['match']);
    $row[] = drupal_render($form[$key]['commission_structure']);
    $row[] = drupal_render($form[$key]['weight']);
    $row[] = drupal_render($form[$key]['model']);
    $row[] = drupal_render($form[$key]['delete']);
    $rows[] = array(
      'data' => $row,
      'class' => 'draggable tabledrag-leaf',
    );
  }
  $output = theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('id' => 'product-commissions')));
  $output .= drupal_render_children($form);
  return $output;
}

/**
 * Add table drag effect to product commission table.
 */
function theme_uc_affiliate2_product_commission_form($variables) {
  $form = $variables['form'];
  drupal_add_tabledrag('product-commissions', 'order', 'sibling', 'commission-weight');
  $output = drupal_render_children($form);
  return $output;
}

/**
 * Autocomplete function for finding affiliates
 */
function uc_affiliate2_autocomplete($string) {
  $items = array();
  if (is_numeric($string)) {
    // $sql = db_query("SELECT u.uid, u.name, u.status, u.created, u.access FROM {users} u
    // INNER JOIN {users_roles} ur ON u.uid = ur.uid WHERE ur.rid
    // IN (SELECT rid FROM {role_permission} WHERE permission LIKE '%act as affiliate%')");


    $sql = "SELECT u.uid, u.name, u.status, u.created, u.access
            FROM {users} u
              INNER JOIN {users_roles} ur ON u.uid = ur.uid
            WHERE u.uid LIKE :uid AND ur.rid IN (
              SELECT r.rid
              FROM {role_permission} r
                WHERE r.permission LIKE '%act as affiliate%')";
    $result = db_query($sql, array(':uid' => $string . '%') );
  }
  else {
    $sql = "SELECT u.uid, u.name, u.status, u.created, u.access
              FROM {users} u
              INNER JOIN {users_roles} ur ON u.uid = ur.uid
              WHERE u.name LIKE :name AND ur.rid IN (
                SELECT r.rid
                FROM {role_permission} r
                WHERE r.permission LIKE '%act as affiliate%')";
    $result = db_query($sql, array(':name' => $string . '%'));
  }
  foreach ($result as $obj) {
    $items[$obj->uid] = check_plain($obj->name) . ' [ID: ' . $obj->uid . ']';
  }
  drupal_json_output($items);
  exit();
}
function uc_affiliate2_get_affiliate_id($order_id){
 return db_query("SELECT aid FROM {uc_affiliate2_orders} WHERE order_id = :order_id", array(':order_id' => $order_id))->fetchField();
}
