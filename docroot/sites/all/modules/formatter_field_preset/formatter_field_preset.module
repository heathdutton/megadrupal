<?php

/**
 * @file
 * Main module file for Formatter Field Preset module.
 */

/**
 * Implements hook_ctools_plugin_api().
 *
 * Needed for providing default exportable objects in
 * formatter_field_preset.formatter_field_preset.inc file.
 *
 * @return array
 *   Module API version.
 */
function formatter_field_preset_ctools_plugin_api() {
  list($module, $api) = func_get_args();
  if ($module == 'formatter_field_preset' && $api == 'formatter_field_preset') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_menu().
 */
function formatter_field_preset_menu() {

  // Page with exportable objects list.
  $items['admin/config/content/formatter-field-preset'] = array(
    'title' => 'Formatter field presets',
    'description' => 'Define serveral presets to be used with Field Formatter.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('formatter_field_preset_list_form'),
    'access arguments' => array('administer content types'),
    'file' => 'formatter_field_preset.pages.inc',
  );

  $items['admin/config/content/formatter-field-preset/list'] = array(
    'title' => 'Presets',
    'file' => 'formatter_field_preset.pages.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  // Create new.
  $items['admin/config/content/formatter-field-preset/create'] = array(
    'title' => 'Create',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('formatter_field_preset_form'),
    'access arguments' => array('administer content types'),
    'file' => 'formatter_field_preset.pages.inc',
    'type' => MENU_LOCAL_ACTION,
  );

  // Edit.
  $items['admin/config/content/formatter-field-preset/%formatter_field_preset/edit'] = array(
    'title' => 'Edit preset',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('formatter_field_preset_form', 4),
    'access arguments' => array('administer content types'),
    'file' => 'formatter_field_preset.pages.inc',
  );

  // Import.
  $items['admin/config/content/formatter-field-preset/import'] = array(
    'title' => 'Import',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('formatter_field_preset_import_form'),
    'access arguments' => array('administer content types'),
    'file' => 'formatter_field_preset.pages.inc',
    'type' => MENU_LOCAL_ACTION,
  );

  // Export.
  $items['admin/config/content/formatter-field-preset/%formatter_field_preset/export'] = array(
    'title' => 'Export preset',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('formatter_field_preset_export_form', 4),
    'access arguments' => array('administer content types'),
    'file' => 'formatter_field_preset.pages.inc',
  );

  // Delete.
  $items['admin/config/content/formatter-field-preset/%formatter_field_preset/delete'] = array(
    'title' => 'Delete preset',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('formatter_field_preset_delete_form', 4),
    'access arguments' => array('administer content types'),
    'file' => 'formatter_field_preset.pages.inc',
  );

  // Disable.
  $items['admin/config/content/formatter-field-preset/%formatter_field_preset/disable'] = array(
    'title' => 'Disable preset',
    'page callback' => 'formatter_field_preset_toggle_page',
    'page arguments' => array(4, 'disable'),
    'access arguments' => array('administer content types'),
    'file' => 'formatter_field_preset.pages.inc',
  );

  // Enable.
  $items['admin/config/content/formatter-field-preset/%formatter_field_preset/enable'] = array(
    'title' => 'Enable preset',
    'page callback' => 'formatter_field_preset_toggle_page',
    'page arguments' => array(4, 'enable'),
    'access arguments' => array('administer content types'),
    'file' => 'formatter_field_preset.pages.inc',
  );

  return $items;
}

/**
 * Implementats hook_theme().
 */
function formatter_field_preset_theme() {
  return array(
    'formatter_field_preset_list_form' => array(
      'render element' => 'form',
      'file' => 'formatter_field_preset.theme.inc',
    ),
  );
}

/**
 * Create new empty preset.
 */
function formatter_field_preset_create() {

  // Include special library for import/export objects.
  ctools_include('export');

  return ctools_export_crud_new('formatter_field_preset', TRUE);
}

/**
 * Save preset.
 *
 * @param object $formatter_field_preset
 *   Object that should be saved or updated.
 * @return int
 *   Saving result.
 */
function formatter_field_preset_save(&$formatter_field_preset) {

  // Include special library for import/export objects.
  ctools_include('export');

  // Assure type and settings.
  $formatter_field_preset->format = isset($formatter_field_preset->format) ? $formatter_field_preset->format : '';
  $formatter_field_preset->settings = isset($formatter_field_preset->settings) ? $formatter_field_preset->settings : array();

  // Save object using CTools SAVE operation.
  $save_result = ctools_export_crud_save('formatter_field_preset', $formatter_field_preset);

  // Return saving result, SAVED_NEW or SAVED_UPDATED.
  return $save_result;
}

/**
 * Delete preset from database by object machine name.
 *
 * @param string $name
 *   Preset machine name.
 */
function formatter_field_preset_delete($name) {

  // Load preset before delete.
  // CTools requires loaded object for every CRUD operation.
  $formatter_field_preset = formatter_field_preset_load($name);

  // Call CTools CRUD function to remove preset from database correctly.
  ctools_export_crud_delete('formatter_field_preset', $formatter_field_preset);
}

/**
 * Load preset from database by object machine name.
 *
 * @param string $name
 *   Object machine name.
 * @return object|bool
 *   Loaded object or FALSE if object was not loaded.
 */
function formatter_field_preset_load($name) {

  // Include special library for import/export objects.
  ctools_include('export');

  // Load preset from database using CTools CRUD operation.
  $result = ctools_export_load_object('formatter_field_preset', 'names', array($name));

  if (!empty($result[$name])) {
    // Prepare exportable object before return it.
    $formatter_field_preset = formatter_field_preset_load_prepare($result[$name]);
  }

  // Return loaded preset object or FALSE if object was not loaded.
  return !empty($formatter_field_preset) ? $formatter_field_preset : FALSE;
}

/**
 * Load multiple presets by array with machine names.
 *
 * @param array $names
 *   Array with preset machine names.
 * @return array
 *   Loaded presets.
 */
function formatter_field_preset_load_multiple($names) {

  // Include special library for import/export objects.
  ctools_include('export');

  // Load array with presets from database using CTools CRUD operation.
  $result = ctools_export_load_object('formatter_field_preset', 'names', $names);

  // Prepare each exportable object before return it.
  $result = array_map('formatter_field_preset_load_prepare', $result);

  // Return array with loaded presets objects.
  return $result;
}

/**
 * Load all presets from database.
 *
 * @return array
 *   Loaded preset objects.
 */
function formatter_field_preset_load_all() {

  // Include special library for import/export objects.
  ctools_include('export');

  // Load array with all presets from database using CTools CRUD operation.
  $result = ctools_export_load_object('formatter_field_preset', 'all');

  // Prepare each preset before return it.
  $result = array_map('formatter_field_preset_load_prepare', $result);

  // Return array with loaded preset objects.
  return $result;
}

/**
 * Load all presets from database.
 *
 * @param string $field_name
 *   The field name to load by.
 *
 * @return array
 *   Loaded preset objects.
 */
function formatter_field_preset_load_by_field($field_name) {

  // Include special library for import/export objects.
  ctools_include('export');

  // Load array with all presets from database using CTools CRUD operation.
  $result = ctools_export_load_object('formatter_field_preset', 'conditions', array('field' => $field_name, 'disabled' => FALSE));

  // Prepare each preset before return it.
  $result = array_map('formatter_field_preset_load_prepare', $result);

  // Return array with loaded preset objects.
  return $result;
}

/**
 * Prepare preset for correct processing.
 *
 * @param $formatter_field_preset
 *   Preset loaded from database.
 * @return object
 *   Prepared preset object.
 */
function formatter_field_preset_load_prepare($formatter_field_preset) {

  // Set correct enable status preset.
  $formatter_field_preset->disabled = isset($formatter_field_preset->disabled) ? $formatter_field_preset->disabled : FALSE;

  // Set correct overwritten status for preset.
  $formatter_field_preset->is_overwritten = ($formatter_field_preset->export_type == (EXPORT_IN_DATABASE | EXPORT_IN_CODE));

  // Return prepared preset object.
  return $formatter_field_preset;
}

/**
 * Implements function hook_field_delete_field().
 */
function formatter_field_preset_field_delete_field($field) {
  // Delete into database.
  db_delete('formatter_field_preset')
    ->condition('field', $field['field_name'])
    ->execute();
}

// === Field API for new widget ================================================

/**
 * Implements hook_field_widget_info().
 */
function formatter_field_preset_field_widget_info() {
  return array(
    'formatter_preset_select' => array(
      'label' => t('Formatter preset select'),
      'field types' => array('formatter'),
      'settings' => array(),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function formatter_field_preset_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  // Field to be formatted.
  $formatted_field = field_read_field($instance['settings']['field_name']);
  // Field instance to be formatted.
  $formatted_instance = field_read_instance($instance['entity_type'], $instance['settings']['field_name'], $instance['bundle']);

  $formatters = formatter_field_preset_load_by_field($instance['settings']['field_name']);
  if (empty($formatters)) {
    return $element;
  }

  $options = array();
  foreach ($formatters as $formatter_id => $formatter) {
    if (!$formatter->disabled) {
      $options[$formatter_id] = $formatter->name;
    }
  }
  $options += array('hidden' => t('<Hidden>'));

  $element['#element_validate'] = array('formatter_field_preset_field_widget_form_validate');

  if (isset($items[$delta]['settings'])) {
    $settings = unserialize($items[$delta]['settings']);
    $default_value = empty($settings['__formatter_field_preset']) ? '' : $settings['__formatter_field_preset'];
  }
  else {
    $default_value = '';
  }
  $element['preset'] = array(
    '#type' => 'select',
    '#title' => t('Formatter for @title', array('@title' => $formatted_instance['label'])),
    '#options' => $options,
    '#default_value' => $default_value,
  );
  return $element;
}

/**
 * Validation callback for widget form.
 */
function formatter_field_preset_field_widget_form_validate($element, &$form_state) {
  $values = drupal_array_get_nested_value($form_state['values'], $element['#parents']);
  if ($values['preset'] == 'hidden') {
    $values = array(
      'type' => 'hidden',
      'settings' => serialize(array()),
    );
  }
  else {
    $preset = formatter_field_preset_load($values['preset']);
    // Add the preset name here as we cannot alter the field schema. Retrieve it
    // on widget form.
    $preset->settings['__formatter_field_preset'] = $values['preset'];

    // Now set the formatter and related settings.
    $values = array(
      'type' => $preset->format,
      'settings' => serialize($preset->settings),
    );
  }
  form_set_value($element, $values, $form_state);
}
