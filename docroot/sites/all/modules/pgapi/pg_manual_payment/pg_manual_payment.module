<?php

/**
 * @file
 * Provides manual payment gateway for PGAPI.
 */

/**
 * Implements hook_menu().
 */
function pg_manual_payment_menu() {
  $items = array();
  $items['payment/manual_payment/%pgapi_transaction'] = array(
    'title' => 'Manual Payment',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pg_manual_payment_payform', 2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'pg_manual_payment.pages.inc',
  );
  $items['admin/config/pgapi/manual_payment'] = array(
    'title' => 'Manual Payment',
    'description' => 'Manual Payment payment settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pg_manual_payment_list'),
    'access arguments' => array('administer pgapi'),
    'file' => 'pg_manual_payment.admin.inc',
  );
  $items['admin/config/pgapi/manual_payment/list'] = array(
    'title' => 'Accounts',
    'access callback' => 'user_access',
    'access arguments' => array('administer pgapi'),
    'weight' => -20,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/config/pgapi/manual_payment/add'] = array(
    'title' => 'Add Account',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pg_manual_payment_add'),
    'access arguments' => array('administer pgapi'),
    'file' => 'pg_manual_payment.admin.inc',
    'type' => MENU_LOCAL_ACTION,
  );
  $items['admin/config/pgapi/manual_payment/edit/%'] = array(
    'title' => 'Edit Wallet',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pg_manual_payment_edit', 5),
    'access arguments' => array('administer pgapi'),
    'file' => 'pg_manual_payment.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/pgapi/manual_payment/settings'] = array(
    'title' => 'Settings',
    'description' => 'Manual Payment Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pg_manual_payment_settings'),
    'access arguments' => array('administer pgapi'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'pg_manual_payment.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_mail().
 */
function pg_manual_payment_mail($key, &$message, $params) {
  // Define language and transaction
  $language            = $message['language'];
  $transaction         = $params['transaction'];
  $account             = user_load($transaction->uid);
  if (!$language) {
    global $language;
  }

  // Format price
  $format         = module_invoke($transaction->service, 'pgapi_format_price');
  $formated_price = number_format($transaction->extra['prices'][$transaction->extra['wallet']], $format['decimals'], $format['dec_point'], $format['thousands_sep']);
  $formated       = theme('pgapi_format_price_plain', array('price' => $formated_price, 'symbol' => $params['payment_method']->symbol, 'position' => $format['position']));

  // Define mail variables
  $variables              = array();
  $variables['!purse']    = $params['payment_method']->purse;
  $variables['!txnid']    = $transaction->txnid;
  $variables['!price']    = $formated;
  $variables['!username'] = $account->name;
  $variables['!site']     = variable_get('site_name', '');

  switch ($key) {
    case 'notice':
      $message['subject'] = t('Payment notification from !site', $variables);
      $message['body'][]  = t("Dear !username\nYour Payment #!txnid will be checked today.\n\nAmount: !price\nPayment Account: !purse\n\nBest regards,\n!site", $variables);
      break;
    case 'notice_admin':
      $message['subject'] = t('Payment Notification from !site', $variables);
      $message['body'][]  = t("Dear Admin\nUser !username just sent a payment #!txnid\n\nAmount: !price\nPayment Account: !purse\n\nPlease check it out and process it.\n\nBest regards,\n!site", $variables);
      break;
  }
}

/**
 * Implements hook_pgapi_gw().
 */
function pg_manual_payment_pgapi_gw($op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'display name':
      $ret = t('Manual Payment Payment Gateway');
      break;
    case 'payment page':
      $ret = url('payment/manual_payment/' . $a3, array('absolute' => TRUE));
      break;
    case 'payment gateway info':
      // $a3 means amount.
      $ret['name'] = t('Manual Payment');
      $prices = array();
      $result = db_query('SELECT * FROM {pg_manual_payment_accounts} ORDER BY name');
      foreach ($result as $rate) {
        $prices[$rate->name] = array(
          'price' => $a3 * $rate->rate,
          'currency' => $rate->symbol,
        );
      }
      $ret['price'] = $prices;
      break;
    case 'process form':
      $transaction = $a3;
      $form_state  = $a4;
      $ret         = _pg_manual_payment_process_form($form_state, $transaction);
      break;
    case 'get form':
      // $a3 - transaction
      // $a4 - form_state
      $ret = drupal_retrieve_form('pg_manual_payment_extraform', $a4, $a3);
      unset($ret['#form_id']);
      break;
    default:
      $ret = '';
  }
  return $ret;
}

/**
 * Implements hook_pgapi_transaction().
 */
function pg_manual_payment_pgapi_transaction($status, $transaction) {
  switch ($status) {
    case PG_PENDING:
      $result = db_query('SELECT * FROM {pg_manual_payment_accounts} ORDER BY name');
      $prices = array();
      foreach ($result as $record) {
        $prices[$record->paid] = round(($transaction->amount * $record->rate), 2);
      }
      $transaction->extra['prices'] =  $prices;
      break;
  }
}

/**
 * Return payment extra form for manual payment
 */
function pg_manual_payment_extraform($form, &$form_state, $transaction) {
  $result = db_query('SELECT * FROM {pg_manual_payment_accounts} ORDER BY name');
  $purses = array();
  foreach ($result as $purse) {
    $purses[$purse->paid] = $transaction->amount * $purse->rate . " <span class='symbol'>" . $purse->symbol . "</span>";
  }
  $form['wallet'] = array(
    '#type' => 'radios',
    '#title' => t('Type of account'),
    '#options' => $purses,
    '#default_value' => key($purses),
    '#description' => t('What type of currency will be used.'),
  );
  return $form;
}

/**
 * Save transaction and redirect user to manual payment form
 */
function _pg_manual_payment_process_form(&$form_result, $transaction) {
  $transaction->gateway         = 'pg_manual_payment';
  $transaction->extra['wallet'] = $form_result['wallet'];
  pgapi_transaction_save($transaction);
  drupal_goto('payment/manual_payment/' . $transaction->txnid);
}
