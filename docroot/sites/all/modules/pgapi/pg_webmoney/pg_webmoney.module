<?php

/**
 * @file
 * Module provides webmoney gateway implementation for pgapi.
 */

// Constant definitions
define('cWebMoneyPayActionUrl', 'https://merchant.webmoney.ru/lmi/payment.asp');
define('cWebMoneyRateUrl',      'https://wm.exchanger.ru/asp/XMLbestRates.asp');

/**
 * Implements hook_requirements().
 */
function pg_webmoney_requirements($phase) {
  $requirements = array();
  // Ensure translations don't break at install time
  $t = get_t();

  // Test XML/Unserializer
  $requirements['XML/Serializer'] = array(
    'title' => $t('XML/Serializer'),
  );

  if (FALSE !== @('XML/Serializer.php')) {
    $requirements['XML/Serializer']['value'] = XML_Serializer::apiVersion( );
  }
  else {
    $requirements['XML/Serializer']['description'] = $t('You have to install !url, otherwise Webmoney Gateway will not work.', array('!url' => l('XML/Serializer', "http://pear.php.net/package/XML_Serializer")));
    $requirements['XML/Serializer']['severity'] = REQUIREMENT_ERROR;
    $requirements['XML/Serializer']['value'] = $t('Not installed');
  }

  return $requirements;
}

/**
 * Implements hook_theme().
 */
function pg_webmoney_theme() {
  return array(
    'pg_webmoney_list' => array(
      'render element' => 'form',
      'file' => 'pg_webfoney.theme.inc',
    ),
    'pg_webmoney_example' => array(
      'variables' => array('purse' => NULL, 'tradename' => NULL, 'secret_key' => NULL, 'success' => NULL, 'done' => NULL, 'fail' => NULL),
      'template' => 'pg_webmoney_example',
    )
  );
}

/**
 * Implements hook_menu().
 */
function pg_webmoney_menu() {
  $items = array();
  $items['webmoney/done'] = array(
    'title' => 'Internal Data',
    'page callback' => 'pg_webmoney_done_payment',
    'access callback' => TRUE,
    'file' => 'pg_webmoney.pages.inc',
    'type' => MENU_CALLBACK,
  );
  $items['webmoney/success'] = array(
    'title' => 'Webmoney processing',
    'page callback' => 'pg_webmoney_payment_end',
    'page arguments' => array('success'),
    'access callback' => TRUE,
    'file' => 'pg_webmoney.pages.inc',
    'type' => MENU_CALLBACK,
  );
  $items['webmoney/fail'] = array(
    'title' => 'Webmoney processing',
    'page callback' => 'pg_webmoney_payment_end',
    'page arguments' => array('fail'),
    'access callback' => TRUE,
    'file' => 'pg_webmoney.pages.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/pgapi/webmoney'] = array(
    'title' => 'Webmoney',
    'description' => 'Webmoney payment settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pg_webmoney_list'),
    'access callback' => 'user_access',
    'access arguments' => array('administer pgapi'),
    'file' => 'pg_webmoney.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/pgapi/webmoney/list'] = array(
    'title' => 'Purses',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pg_webmoney_list'),
    'access callback' => 'user_access',
    'access arguments' => array('administer pgapi'),
    'weight' => 1,
    'file' => 'pg_webmoney.admin.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/config/pgapi/webmoney/add'] = array(
    'title' => 'Add Purse',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pg_webmoney_add'),
    'access callback' => 'user_access',
    'access arguments' => array('administer pgapi'),
    'weight' => 2,
    'file' => 'pg_webmoney.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/pgapi/webmoney/settings'] = array(
    'title' => 'Rate Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pg_webmoney_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer pgapi'),
    'weight' => 3,
    'file' => 'pg_webmoney.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/pgapi/webmoney/example/%'] = array(
    'title' => 'Example',
    'page callback' => 'pg_webmoney_example',
    'page arguments' => array(5),
    'access callback' => 'user_access',
    'access arguments' => array('administer pgapi'),
    'file' => 'pg_webmoney.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/pgapi/webmoney/edit/%'] = array(
    'title' => 'Edit Purse',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pg_webmoney_edit', 5),
    'access callback' => 'user_access',
    'access arguments' => array('administer pgapi'),
    'file' => 'pg_webmoney.admin.inc',
    'type' => MENU_CALLBACK,
  );
  return $items;
}


/**
 * Implements hook_cron().
 */
function pg_webmoney_cron() {
  // TODO: fix cron;
  return;
  require_once DRUPAL_ROOT . '/' . 'XML/Unserializer.php';
  $unserializer_options = array(
    'parseAttributes' => TRUE,
  );
  $unserializer = new XML_Unserializer($unserializer_options);

  $result = $unserializer->unserialize(variable_get('pg_webmoney_rate_url', cWebMoneyRateUrl), true);
  if (isset($result->message)) {
    form_set_error('rate_url', t('%err', array('%err' => $result->message)));
    return "";
  }

  $data = $unserializer->getUnserializedData();

  $result = db_query('SELECT * FROM {pg_webmoney_rates} ORDER BY type');
  foreach ($result as $rate) {
    $rates[$rate->type] = $rate->type . ' - ' . variable_get('pg_webmoney_type_wm', 'WMR');
  }

  if (is_array($rates)) {
    foreach ($data['row'] as $key => $val) {
      foreach ($rates as $k => $wmrate) {
        if ($val['Direct'] == $wmrate) {
          $pul = substr($val['BaseRate'], 0, 1);
          if ($pul == '-') {
            $rate[$k] = 1 / substr($val['BaseRate'], 1);
          }
          else {
            $rate[$k] = $val['BaseRate'];
          }
        }
      }
    }
  }

  if (is_array($rate)) {
    foreach ($rate as $type => $ra) {
      $ra = variable_get('pg_webmoney_rate_wm', '1.00') / $ra;
      db_update('pg_webmoney_rates')
        ->fields(array('rate' => $ra))
        ->condition('type', $type)
        ->execute();
    }
  }
  $rate = variable_get('pg_webmoney_rate_wm', '1.00');
  $type = variable_get('pg_webmoney_type_wm', 'WMR');
  db_update('pg_webmoney_rates')
    ->fields(array('rate' => $rate))
    ->condition('type', $type)
    ->execute();
}


function pg_webmoney_pgapi_gw_info() {
  return;
}

/**
 * Implements hook_pgapi_gw().
 */
function pg_webmoney_pgapi_gw($op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'display name':
      $ret = t('Webmoney Payment Gateway');
      break;
    case 'payment page':
      $ret = url('payment/webmoney/' . $a3, array('absolute' => TRUE));
      break;
    case 'payment gateway info':
      $ret['name'] = theme('image', array(
        'path' => drupal_get_path('module', 'pg_webmoney') . '/images/webmoney.png',
        'width' => t('Webmoney'),
        'height' => t('Webmoney'),
       ));
      $result = db_query('SELECT * FROM {pg_webmoney_rates} ORDER BY type');
      $prices = array();
      foreach ($result as $rate) {
        $prices[$rate->type] = round(($a3 * $rate->rate), 2);
      }
      $ret['price'] = $prices;
      break;
    case 'process form':
      $transaction = $a3;
      $form_result = $a4;
      $ret = _pg_webmoney_process_form($form_result, $transaction);
      break;
    case 'get form':
      $transaction = $a3;
      $form_result = $a4;
      $ret = pg_webmoney_extraform($form_result, $transaction);
      break;
    default:
      $ret = '';
  }
  return $ret;
}

/**
 * Implements hook_pgapi_transaction().
 */
function pg_webmoney_pgapi_transaction($status, &$transaction) {
  switch ($status) {
    case PG_PENDING:
      $result = db_query('SELECT * FROM {pg_webmoney_rates} ORDER BY type');
      $prices = array();
      foreach ($result as $rate) {
        $prices[$rate->type] = round(($transaction->amount * $rate->rate), 2);
      }
      $transaction->extra['prices'] =  $prices;
      break;
  }
}

/**
 * Return webmoney extra form
 */
function pg_webmoney_extraform($form_state, $transaction) {
  $result = db_query('SELECT * FROM {pg_webmoney_rates} ORDER BY type');
  $purses = array();
  foreach ($result as $purse) {
    $purses[$purse->type] = round(($transaction->amount * $purse->rate), 2) . " " . $purse->type;
  }

  $form['wallet'] = array(
    '#type' => 'select',
    '#title' => t("Wallet type"),
    '#options' => $purses,
    '#default_value' => key($purses),
  );
  return $form;
}

/**
 * Process webmoney payment form
 */
function _pg_webmoney_process_form($form_result, $transaction) {
  $output = drupal_get_form('pg_webmoney_payform', $form_result, $transaction);
  $output = str_ireplace('accept-charset="UTF-8"', 'accept-charset="cp1251"', $output);
  $transaction->gateway = 'pg_webmoney';
  pgapi_transaction_save($transaction);
  echo '<html><body>' . $output . '<script>pgpayform.submit();</script></body>';
  exit();
}

/**
 * Return webmoney payment form
 */
function pg_webmoney_payform($form, $form_state, $post, $transaction) {
  global $user;
  $wallet = db_query('SELECT * FROM {pg_webmoney_rates} WHERE type = :type', array(':type' => $post['wallet']))->fetchObject();
  $form['LMI_PAYEE_PURSE'] = array(
    '#type' => 'hidden',
    '#value' => $wallet->purse,
  );
  $form['LMI_PAYMENT_NO'] = array(
    '#type' => 'hidden',
    '#value' => $transaction->txnid,
  );
  $form['LMI_PAYMENT_DESC'] = array(
    '#type' => 'hidden',
    '#default_value' => $transaction->title,
  );
  $form['LMI_PAYMENT_AMOUNT'] = array(
    '#type' => 'hidden',
    '#default_value' => round(($transaction->amount * $wallet->rate), 2),
  );
  $form['#attributes'] = array('name' => 'pgpayform');
  $form['#action'] = cWebMoneyPayActionUrl;
  return $form;
}

/**
 * Return webmoney rate by it type
 */
function pg_webmoney_get_rate($type) {
  require_once DRUPAL_ROOT . '/' . 'XML/Unserializer.php';
  $unserializer_options = array(
    'parseAttributes' => TRUE,
  );
  $unserializer = new XML_Unserializer($unserializer_options);
  $result = $unserializer->unserialize(variable_get('pg_webmoney_rate_url', cWebMoneyRateUrl), true);
  $data = $unserializer->getUnserializedData();
  $wmrate = 'WM' . $type . ' - ' . variable_get('pg_webmoney_type_wm', 'WMR');
  if (is_array($data)) {
    foreach ($data['row'] as $key => $val) {
      if ($val['Direct'] == $wmrate) {
        $pul = substr($val['BaseRate'], 0, 1);
        if ($pul == '-') {
          $rate = 1 / substr($val['BaseRate'], 1);
        }
        else {
          $rate = $val['BaseRate'];
        }
      }
    }
  }
  else {
    $rate = 1;
  }
  if ('WM' . $type == variable_get('pg_webmoney_type_wm', 'WMR')) {
    $rate = variable_get('pg_webmoney_rate_wm', '1.00');
  }
  else {
    $rate = variable_get('pg_webmoney_rate_wm', '1.00') / $rate;
  }
  return $rate;
}

