<?php

/**
 * @file
 * Implements Dwolla payment services for use in Drupal Commerce.
 */

/**
 * Implements hook_commerce_payment_method_info().
 *
 * This hook will define the Dwolla payment method
 */
function dwolla_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['dwolla'] = array(
    'base' => 'dwolla',
    'title' => t('Dwolla'),
    'short_title' => t('Dwolla'),
    'display_title' => t('Dwolla'),
    'description' => t('Integrates Dwolla payment system'),
    'active' => TRUE,
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => FALSE,
  );

  return $payment_methods;
}

/**
 * Payment method callback: settings form.
 *
 * Returns form elements for the payment method's settings form included
 * as part of the payment method's enabling action in Rules
 */
function dwolla_settings_form($settings = NULL) {
  $form = array();

  $settings = (array) $settings + array(
    'accountid' => '',
    'apikey' => '',
    'apisecret' => '',
    'account' => 'live',
  );

  // BASIC settings
  $form['accountid'] = array(
    '#type' => 'textfield',
    '#title' => t('Dwolla Account ID'),
    '#description' => t('Dwolla account ID receiving the funds. Format : XXX-XXX-XXXX.'),
    '#default_value' => $settings['accountid'],
    '#required' => TRUE,
  );
  $form['apikey'] = array(
    '#type' => 'textfield',
    '#title' => t('API Key'),
    '#description' => t('The key used for the Dwolla API'),
    '#default_value' => $settings['apikey'],
    '#required' => TRUE,
  );
  $form['apisecret'] = array(
    '#type' => 'textfield',
    '#title' => t('API Secret'),
    '#description' => t('The secret code used for the Dwolla API'),
    '#default_value' => $settings['apisecret'],
    '#required' => TRUE,
  );
  $form['account'] = array(
    '#type' => 'radios',
    '#title' => t('Dwolla Server'),
    '#options' => array(
      'live' => ('Live'),
      'test' => ('Test'),
    ),
    '#default_value' => $settings['account'],
    '#description' => t('Perform transactions on the live or test server. The test server will only work for developers with Dwolla test accounts.'),
  );
  // @TODO: LAYOUT settings
  $form['#submit'][] = 'dwolla_settings_form_submit';

  return $form;
}

/**
 * Payment method callback: redirect form
 *
 * returns form elements that should be submitted to the redirected
 * payment service
 */
function dwolla_redirect_form($form, &$form_state, $order, $payment_method) {
  // Return an error if accountid is not set.
  if (empty($payment_method['settings']['accountid'])) {
    drupal_set_message(t('Dwolla Account ID has not been specified.'), 'error');
    return array();
  }
  // Return an error if apikey is not set.
  if (empty($payment_method['settings']['apikey'])) {
    drupal_set_message(t('Dwolla API key needs to be set.'), 'error');
    return array();
  }
  // Return an error if apisecret is not set.
  if (empty($payment_method['settings']['apisecret'])) {
    drupal_set_message(t('Dwolla API Secret needs to be set.'), 'error');
    return array();
  }

  $settings = array(
    // Return to the previous page when the payment is cancelled.
    'cancel_return' => url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),

    // Return to the payment redirect page for processing successful payments.
    'return' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),

    // Specify the current payment method instance ID in the notify_url.
    'payment_method' => $payment_method['instance_id'],
  );

  dwolla_build_redirect_form($form, $form_state, $order, $payment_method['settings'] + $settings);
}

/**
 * Helper function for the redirect_form callback.
 * Generate the CheckoutID and redirect to dwolla site
 */
function dwolla_build_redirect_form($form, &$form_state, $order, $settings) {
  global $user;

  // Get financial info
  $amount = $order->commerce_order_total[LANGUAGE_NONE][0]['amount'];
  $currency_code = $order->commerce_order_total[LANGUAGE_NONE][0]['currency_code'];
  $price = commerce_currency_amount_to_decimal($amount, $currency_code);

  // Build the data array
  if ($settings['account'] == 'test') {
    $test = 'true';
  } 
  else {
    $test = 'false';
  }
  
  $data = array(
    'Key' => $settings['apikey'],
    'Secret' => $settings['apisecret'],

    'Redirect' => $settings['return'],
    'AllowFundingSources' => 'true',
    'Test' => $test,
    'OrderId' => $order->order_number,

    'PurchaseOrder' => array(
    'DestinationId' => $settings['accountid'],

    'Total' => $price,
    'Tax' => '0',
    'Shipping' => '0',
    'Notes' => t('Order @order_number at @store', array('@order_number' => $order->order_number, '@store' => variable_get('site_name', url('<front>', array('absolute' => TRUE))))),

    'OrderItems' => array(
      array(
        'Name' => t('@store', array('@store' => variable_get('site_name', url('<front>', array('absolute' => TRUE))))),
        'Description' => t('Order @order_number at @store', array('@order_number' => $order->order_number, '@store' => variable_get('site_name', url('<front>', array('absolute' => TRUE))))),
        'Price' => $price,
        'Quantity' => '1'
        )
      )
    )
  );

  $post_url = 'https://www.dwolla.com/payment/request';

  $post_string = json_encode($data);
  $headers = array('Accept: application/json', 'Content-Type: application/json;charset=UTF-8', 'Content-Length: ' . strlen($post_string));

  if (!function_exists("curl_init")) {
    dwolla_error($order, $settings, "cURL extension is not installed.");
  }

  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $post_url);
  curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
  curl_setopt($ch, CURLOPT_POSTFIELDS, $post_string);
  curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 5);
  curl_setopt($ch, CURLOPT_TIMEOUT, 5);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
  curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
  curl_setopt($ch, CURLOPT_HEADER, false);
  curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
  $result = curl_exec($ch);

  if (curl_errno($ch)) {
    $message = curl_error($ch);
    dwolla_error($order, $settings, $message);
  } else {
    curl_close($ch);
  }

  $response = json_decode($result, true);
  if ($response['Result'] != 'Success') {
    dwolla_error($order, $settings, $response['Message']);
  } else {
    // Getting the checkout id from the response
    // Redirect to dwolla with checkout id
    $url = 'https://www.dwolla.com/payment/checkout/' . $response['CheckoutId'];
    header('Location: ' . $url);
  }
}

function dwolla_error($order, $settings, $message) {
  //Revert the order back to Cart when an error occurs
  $order_state = commerce_order_state_load('cart');
  commerce_order_status_update($order, $order_state['default_status'], FALSE, TRUE, t('Order state updated due to error : .'));

  //Inform the user of the error and redirect to the review page
  drupal_set_message(t('@message There was a problem sending the order to Dwolla, please try again.', array('@message' => $message)), 'error');
  drupal_goto('checkout/' . $order->order_number);
  exit;
}


/**
 * Implements hook_redirect_form_validate().
 */
function dwolla_redirect_form_validate($order, $payment_method) {
  if (isset($_GET['transaction']) && isset($_GET['amount'])) {
    // Prepare the feedback values sent by Dwolla for processing. We don't use
    $feedback = array_map('check_plain', $_GET);
    $feedback = array_change_key_case($feedback, CASE_UPPER);

    // Process the transaction based on the Dwolla parameters received
    dwolla_process_transaction($order, $payment_method, $feedback);
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Process the payment transaction with the info received from Dwolla
 *
 * @param $order
 *   The loaded order that is being processed
 * @param $payment_method
 *   The payment method settings
 * @param $feedback
 *   The parameters received from Dwolla regarding the payment
 */
function dwolla_process_transaction($order, $payment_method, $feedback) {
  $transaction = commerce_payment_transaction_new('dwolla', $order->order_id);

  // Determine the status of the transaction (success or failure) and set the message accordingly.
  if ($feedback['STATUS'] == 'Completed') {
    $payment_status = 'success';
    $payment_message = t('Transaction successful');
  }
  else {
    $payment_status = 'failure';
    $payment_message = t('Transaction failed');
  }

  // identifying data
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->remote_id = $feedback['TRANSACTION'];
  // payment amount details
  $transaction->amount = $order->commerce_order_total[LANGUAGE_NONE][0]['amount'];
  $transaction->currency_code = $order->commerce_order_total[LANGUAGE_NONE][0]['currency_code'];
  // payment status
  $transaction->remote_status = $feedback['STATUS'];
  $transaction->status = $payment_status;
  $transaction->message = $payment_message;
  $transaction->payload = $feedback;
  commerce_payment_transaction_save($transaction);
  if (isset($feedback['TRANSACTION']) && isset($feedback['CHECKOUTID'])) {
    commerce_payment_redirect_pane_next_page($order);
  }
  else {
    commerce_payment_redirect_pane_previous_page($order);
  }
}