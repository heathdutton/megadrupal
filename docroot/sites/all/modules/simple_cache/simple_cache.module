<?php

// Global variables
$_simple_cache_info;
$_simple_cache_is_user = FALSE;
$_simple_cache_debug = FALSE;
$bootstrap_list;

// Default caching rules (Never cache these pages)
define('SIMPLE_CACHE_NOCACHE_DEFAULT', '
user*
node/add/*
node/*/edit
node/*/track
tracker*
comment/edit*
civicrm*
cart*
system/files/*
system/temporary*
');

/**
 * Implements hook_menu().
 */
function simple_cache_menu() {
  $items = array();

  $items['admin/config/system/simple-cache'] = array(
    'title' => 'Simple Cache',
    'description' => 'Configuration for Simple Cache.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simple_cache_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'simple_cache.admin.inc',
  );
  $items['admin/config/system/simple-cache/default'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  'weight' => -100,
  );
  $items['admin/config/system/simple-cache/modules'] = array(
    'title' => 'Modules',
    'description' => 'Disable Modules for Cached Pages.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simple_cache_module_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'simple_cache.admin.module.inc',
  );
  return $items;
}

/*
 function simple_cache_get(){
 $cache        = cache_get(trim($_SERVER["REQUEST_URI"],"/"), 'cache_simple_cache');
 return $cache;
 }
 */

/**
 * Implements hook_exit().
 */
function simple_cache_exit($destination = NULL)
{
  global $_simple_cache_info, $_simple_cache_is_user, $user, $_simple_cache_debug, $bootstrap_list;
  if($_simple_cache_is_user){
    $pages_setting = variable_get('simple_cache_cacheability_pages', SIMPLE_CACHE_NOCACHE_DEFAULT);
    $visibility = variable_get('simple_cache_cacheability_option', 0);
    if ($pages_setting) {
      $pages = drupal_strtolower($pages_setting);
      $path = drupal_strtolower(trim($_SERVER["REQUEST_URI"],"/"));
      $page_match = drupal_match_path($path, $pages);
      $page_match = ($visibility xor $page_match);
      if (!path_is_admin($path) && !$page_match) {
        //$cache        = simple_cache_get();
        if (!$_simple_cache_info) {
          // Get the data to cache.
          $data = ob_get_contents();
          $roles_string = str_replace(' ', '_', implode("-",$user->roles));
          cache_set($roles_string."/".trim($_SERVER["REQUEST_URI"],"/"), $data, 'cache_simple_cache', CACHE_TEMPORARY);
          if($_simple_cache_debug){
            watchdog("simple_cache","cache stored: ".$roles_string."/".trim($_SERVER["REQUEST_URI"],"/"));
          }
        } else {
          if(!empty($bootstrap_list)){
            cache_set('bootstrap_modules', $bootstrap_list, 'cache_bootstrap');
            if($_simple_cache_debug){
              $lists = &drupal_static('system_list');
              if (isset($lists['bootstrap'])) {
              	watchdog("simple_cache","before clearing bootstrap static list: ".print_r($lists['bootstrap'], TRUE));
              }
              watchdog("simple_cache","restored bootstrap_modules: ".print_r($bootstrap_list, TRUE));
            }
            drupal_static_reset('system_list');
            drupal_static_reset('system_rebuild_module_data');
          }
          //drupal_exit();
        }
      }
    }
    if ($_simple_cache_debug && module_exists('devel')) {
      $devel_run_id = devel_xhprof_is_enabled() ? devel_shutdown_xhprof() : NULL;
      if ($devel_run_id){
        watchdog("simple_cache", '<a href="'.devel_xhprof_link($devel_run_id, 'url').'">XHProf output</a>');
      }
    }
  }
}


function simple_cache_boot()
{
  global $_simple_cache_info, $_simple_cache_is_user, $user, $_simple_cache_debug, $bootstrap_list;
  $_simple_cache_debug = variable_get('simple_cache_debug', 0);
  $_simple_cache_is_user = simple_cache_user_check();
  if($_simple_cache_is_user){
    $roles_string = str_replace(' ', '_', implode("-",$user->roles));
    $_simple_cache_info = cache_get($roles_string."/".trim($_SERVER["REQUEST_URI"],"/"), 'cache_simple_cache');
  }else{
    $_simple_cache_info = FALSE;
  }
  if($_simple_cache_info){
    if ($cached = cache_get('bootstrap_modules', 'cache_bootstrap')) {
      $bootstrap_list = $cached->data;
      $simple_cache_disabled_list = variable_get('simple_cache_modules_list', array());
      $filtered_bootstrap_list = array();
      foreach ($bootstrap_list as $key => $value){
        if (empty($simple_cache_disabled_list[$key])) {
          $filtered_bootstrap_list[$key] = $value;
        }
      }
      if($_simple_cache_debug){
        watchdog("simple_cache","changed bootstrap_modules: ".print_r($filtered_bootstrap_list, TRUE));
        $lists = &drupal_static('system_list');
	    if (isset($lists['bootstrap'])) {
	      watchdog("simple_cache","before clearing bootstrap static list: ".print_r($lists['bootstrap'], TRUE));
	    }
      }
      cache_set('bootstrap_modules', $filtered_bootstrap_list, 'cache_bootstrap');
      drupal_static_reset('system_list');
      drupal_static_reset('system_rebuild_module_data'); 
    }
  }
  //watchdog("simple_cache_info",print_r($_simple_cache_info,TRUE));
  /*$cache        = simple_cache_get();
   if ($cache) {
   //drupal_bootstrap(DRUPAL_BOOTSTRAP_SESSION);
   }*/
}

function simple_cache_page_delivery_callback_alter(&$callback)
{
  global $_simple_cache_info, $_simple_cache_debug, $_simple_cache_is_user;
  //$cache        = simple_cache_get();
  if ($_simple_cache_info) {
    if($_simple_cache_debug){
      watchdog("simple_cache","serving cached page ".$_SERVER["REQUEST_URI"]);
    }
    $callback = "simple_cache_page_call";
  }else{
    if($_simple_cache_debug && $_simple_cache_is_user){
      watchdog("simple_cache","serving original drupal page ".$_SERVER["REQUEST_URI"]);
      drupal_set_title("ORIGINAL: ".drupal_get_title());
    }
  }
}


function simple_cache_page_call($page_callback_result)
{
  global $_simple_cache_info, $_simple_cache_debug;
  // Menu status constants are integers; page content is a string or array.
  if (is_int($page_callback_result)) {

  } elseif (isset($page_callback_result)) {
    //$cache        = simple_cache_get();
    if ($_simple_cache_info) {
      $data = $_simple_cache_info->data;
      if($_simple_cache_debug){
        $data = str_replace('ORIGINAL: ', 'CACHED: ', $data);
      }
      print $data;
      drupal_exit();
    }
  }
}

function simple_cache_user_check(){
  // Load the currently logged in user.
  global $user;
  if($user->uid == 1){
    return FALSE;
  }
  //$roles = user_roles();
  $membersonly = FALSE;
  $permission = NULL;
  $query = db_select('role', 'r');
  $query->addTag('translatable');
  $query->fields('r', array('rid', 'name'));
  $query->orderBy('weight');
  $query->orderBy('name');
  if (!empty($permission)) {
    $query->innerJoin('role_permission', 'p', 'r.rid = p.rid');
    $query->condition('p.permission', $permission);
  }
  $result = $query->execute();

  $roles = array();
  foreach ($result as $role) {
    switch ($role->rid) {
      // We only translate the built in role names
      case DRUPAL_ANONYMOUS_RID:
        if (!$membersonly) {
          $roles[$role->rid] = t($role->name);
        }
        break;
      case DRUPAL_AUTHENTICATED_RID:
        $roles[$role->rid] = t($role->name);
        break;
      default:
        $roles[$role->rid] = $role->name;
    }
  }
  foreach (variable_get('simple_cache_roles', array(0 =>1)) as $key) {
    // Check if the user has the role.
    if (in_array($roles[$key], $user->roles)) {
      return TRUE;
    }
  }
  return FALSE;
}
