<?php

/**
 * @file
 * Contains hook implementations and global functions.
 */

/**
 * Implements hook_menu().
 */
function ogone_menu() {
  $items['ogone/redirect/%entity_object'] = array(
    'load arguments' => array('payment'),
    'title' => 'Go to payment server',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ogone_form_redirect', 2),
    'access callback' => 'ogone_form_redirect_access',
    'access arguments' => array(2),
    'type' => MENU_CALLBACK,
  );
  $items['ogone/return'] = array(
    'title' => 'Ogone return url',
    'page callback' => 'ogone_return',
    'access callback' => 'ogone_return_access',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_payment_method_controller_info().
 */
function ogone_payment_method_controller_info() {
  return array('OgonePaymentMethodController');
}

/**
 * Implements hook_entity_load().
 */
function ogone_entity_load(array $entities, $entity_type) {
  if ($entity_type == 'payment_method') {
    $pmids = array();
    foreach ($entities as $payment_method) {
      if ($payment_method->controller->name == 'OgonePaymentMethodController') {
        $pmids[] = $payment_method->pmid;
      }
    }
    if ($pmids) {
      $query = db_select('ogone_payment_method')
        ->fields('ogone_payment_method')
        ->condition('pmid', $pmids);
      $result = $query->execute();
      while ($data = $result->fetchAssoc()) {
        $payment_method = $entities[$data['pmid']];
        $payment_method->controller_data = (array) $data;
        unset($payment_method->controller_data['pmid']);
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_ACTION().
 */
function ogone_payment_method_insert(PaymentMethod $payment_method) {
  if ($payment_method->controller->name == 'OgonePaymentMethodController') {
    $values = $payment_method->controller_data += $payment_method->controller->controller_data_defaults;
    $values['pmid'] = $payment_method->pmid;
    drupal_write_record('ogone_payment_method', $values);
  }
}

/**
 * Implements hook_ENTITY_TYPE_ACTION().
 */
function ogone_payment_method_update(PaymentMethod $payment_method) {
  if ($payment_method->controller->name == 'OgonePaymentMethodController') {
    $values = $payment_method->controller_data += $payment_method->controller->controller_data_defaults;
    $values['pmid'] = $payment_method->pmid;
    drupal_write_record('ogone_payment_method', $values, 'pmid');
  }
}

/**
 * Implements hook_ENTITY_TYPE_ACTION().
 */
function ogone_payment_method_delete($entity) {
  if ($entity->controller->name == 'OgonePaymentMethodController') {
    db_delete('ogone_payment_method')
      ->condition('pmid', $entity->pmid)
      ->execute();
  }
}

/**
 * Form build callback: implements
 * PaymentMethodController::payment_method_configuration_form_elements_callback.
 */
function ogone_payment_method_configuration_form_elements(array $form, array &$form_state) {
  $payment_method = $form_state['payment_method'];
  $controller = $payment_method->controller;
  $controller_data = $payment_method->controller_data + $controller->controller_data_defaults;
  $elements['pspid'] = array(
    '#default_value' => $controller_data['pspid'],
    '#required' => TRUE,
    '#title' => t('PSP ID'),
    '#type' => 'textfield',
  );
  $elements['passphrase_algorithm'] = array(
    '#default_value' => $controller_data['passphrase_algorithm'],
    '#empty_value' => '',
    '#options' => array(
      'sha1' => 'SHA-1',
      'sha256' => 'SHA-256',
      'sha512' => 'SHA-512',
    ),
    '#required' => TRUE,
    '#title' => t('Passphrase hashing algorithm'),
    '#type' => 'select',
  );
  $elements['passphrase_in'] = array(
    '#default_value' => $controller_data['passphrase_in'],
    '#description' => t('The passphrase will be stored as plain text.'),
    '#required' => TRUE,
    '#title' => t('Incoming passphrase'),
    '#type' => 'textfield',
  );
  $elements['passphrase_out'] = array(
    '#default_value' => $controller_data['passphrase_out'],
    '#description' => t('The passphrase will be stored as plain text.'),
    '#required' => TRUE,
    '#title' => t('Outgoing passphrase'),
    '#type' => 'textfield',
  );
  $elements['server'] = array(
    '#default_value' => $controller_data['server'],
    '#options' => array(
      $controller::SERVER_PRODUCTION => ('Production'),
      $controller::SERVER_TESTING => ('Testing'),
    ),
    '#required' => TRUE,
    '#title' => t('Server'),
    '#type' => 'radios',
  );
  $elements['ogone_payment_method'] = array(
    '#default_value' => $controller_data['ogone_payment_method'] . ':' . $controller_data['ogone_payment_method_brand'],
    '#description' => t('If no brand is selected, the payer will have to choose the payment method brand after being redirected to the Ogone server.'),
    '#empty_value' => ':',
    '#options' => $controller->brandOptions(),
    '#title' => t('Ogone payment method brand'),
    '#type' => 'select',
  );

  return $elements;
}

/**
 * Implements form validate callback for
 * ogone_payment_method_configuration_form_elements().
 */
function ogone_payment_method_configuration_form_elements_validate(array $element, array &$form_state) {
  $values = drupal_array_get_nested_value($form_state['values'], $element['#parents']);

  $controller_data = &$form_state['payment_method']->controller_data;
  list($ogone_payment_method, $ogone_payment_method_brand) = explode(':', $values['ogone_payment_method']);
  $controller_data['ogone_payment_method'] = $ogone_payment_method;
  $controller_data['ogone_payment_method_brand'] = $ogone_payment_method_brand;
  $controller_data['pspid'] = $values['pspid'];
  $controller_data['passphrase_algorithm'] = $values['passphrase_algorithm'];
  $controller_data['passphrase_in'] = $values['passphrase_in'];
  $controller_data['passphrase_out'] = $values['passphrase_out'];
  $controller_data['server'] = $values['server'];
}

/**
 * Form build callback: the redirect form.
 */
function ogone_form_redirect(array $form, array &$form_state, Payment $payment) {
  $form['#action'] = $payment->method->controller->serverURL($payment->method->controller_data['server']);
  foreach ($payment->method->controller->redirectData($payment) as $parameter => $value) {
    $form[$parameter] = array(
      '#type' => 'hidden',
      '#value' => $value,
    );
  }
  $form['message'] = array(
    '#type' => 'markup',
    '#markup' => '<p>' . t('You will be redirected to the off-site payment server to authorize the payment.') . '</p>',
  );
  // We need form submission as quickly as possible, so use light inline code.
  $form['js'] = array(
    '#type' => 'markup',
    '#markup' => '<script type="text/javascript">document.getElementById(\'ogone-form-redirect\').submit();</script>',
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Continue'),
  );

  return $form;
}

/**
 * Access callback for the redirect form.
 *
 * @param Payment $payment
 *   The payment to check access to.
 * @param object $user
 *   An optional user to check access for. If NULL, then the currently logged
 *   in user is used.
 *
 * @return bool
 */
function ogone_form_redirect_access(Payment $payment, $account = NULL) {
  global $user;

  return is_a($payment->method->controller, 'OgonePaymentMethodController')
    && payment_status_is_or_has_ancestor($payment->getStatus()->status, PAYMENT_STATUS_PENDING)
    && isset($_SESSION['ogone_pid']) && $_SESSION['ogone_pid'] == $payment->pid;
}

/**
 * Processes a return/feedback request.
 *
 * @return NULL
 */
function ogone_return() {
  $controller = payment_method_controller_load('OgonePaymentMethodController');
  $data = $controller->feedbackData();
  $payment = entity_load_single('payment', $data['ORDERID']);
  $payment->method->controller->processFeedback($data, $payment);
}

/**
 * Checks access for the return URL.
 *
 * @return bool
 */
function ogone_return_access() {
  $controller = payment_method_controller_load('OgonePaymentMethodController');
  $data = $controller->feedbackData();
  if (isset($data['ORDERID']) && isset($data['SHASIGN'])) {
    $payment = entity_load_single('payment', $data['ORDERID']);
    if ($payment) {
      return $data['SHASIGN'] == $payment->method->controller->signOutgoingData($data, $payment->method);
    }
  }
  return FALSE;
}
