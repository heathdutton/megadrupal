<?php
/**
 * @file
 * This module allows you to save your current configuration of exposed
 * filters for later use. This can be especially useful for Views with a lot
 * of exposed filters.
 *
 * Whenever a View is changed, all saved searches for that View are deleted,
 * to prevent corruption.
 * If the user has JavaScript enabled, the saving and deleting process happens
 * through AHAH, and the new section is displayed below the exposed filters
 * section. When JavaScript is disabled, the new section is displayed above
 * the exposed filters section.
 */


define('AHAH_PATH_DELETE', 'views_savedsearches_ahah/delete');
define('AHAH_PATH_SAVE', 'views_savedsearches_ahah/save');


/**
 * Implements hook_help().
 */
function views_savedsearches_help($path, $arg) {
  $output = '';

  switch ($path) {
    case 'admin/help#views_savedsearches':
      $output = '<p>' . t("The Views Saved Searches module allows users to save their current configuration of exposed filters for later use.") . '</p>';
      break;
    case 'admin/build/views/tools/saved-searches':
      $output = '<p>' . t('Note: Apologies for the bizarre location of this settings form. We\'re working to place the options for saving exposed filter searches in the main view configuration screen.') . '</p>';
      break;
  }

  return $output;
}

/**
 * Implements hook_menu().
 */
function views_savedsearches_menu() {
  $items = array();
  $items[AHAH_PATH_SAVE] = array(
    'page callback' => 'views_savedsearches_ahah',
    'page arguments' => array('save'),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items[AHAH_PATH_DELETE] = array(
    'page callback' => 'views_savedsearches_ahah',
    'page arguments' => array('delete'),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/structure/views/saved-searches'] = array(
    'title' => 'Saved Searches',
    'description' => 'Configure which views support the saved searches functionality.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('views_savedsearches_settings'),
    'access arguments' => array('administer site configuration'),
    'weight' => 5,
    'type' => MENU_LOCAL_TASK
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function views_savedsearches_theme() {
  return array(
    'views_savedsearches_container' => array(
      'arguments' => array('view', 'views_filters_form_values'),
    ),
    'views_savedsearches_list' => array(
      'arguments' => array('view', 'current_view_matches_sid'),
    ),
  );
}

/**
 * Implements hook_perm().
 */
function views_savedsearches_permission() {
  return array(
    'use views savedsearch' => array(
      'title' => t('Use views saved searches'),
      'description' => t('User is allowed to use saved searches.'),
    ),
    'use all savedsearches' => array(
      'title' => t('Use all saved searches'),
      'description' => t('User is allowed to use and see other users\' saved searches'),
    ),
  );
}

/**
 * Implements hook_requirements().
 */
function views_savedsearches_requirements($phase) {
  $requirements = array();
  // Ensure translations don't break at install time
  $t = get_t();

  $requirements['views_savedsearches']['title'] = t('Views SavedSearches Clean URL');

  $clean_url = variable_get('clean_url', FALSE);
  if (!$clean_url) {
    $requirements['views_savedsearches']['description'] = $t('Views SavedSearches require Clean URLs, please <a href="@enable">enable it</a>.', array('@enable' => url('admin/settings/clean-urls')));
    $requirements['views_savedsearches']['severity'] = REQUIREMENT_ERROR;
    $requirements['views_savedsearches']['value'] = t('not enabled');
  }
  else {
    $requirements['views_savedsearches']['severity'] = REQUIREMENT_OK;
    $requirements['views_savedsearches']['value'] = t('enabled');
  }
  return $requirements;
}

/**
 * Per-view enable of the form
 */
function views_savedsearches_settings() {
  $views = views_get_all_views();
  $options = array();
  foreach ($views as $view) {
    $options[$view->name] = $view->name;
  }

  $form['views_savedsearches'] = array(
    '#title' => t('Enable the saved searches form for the following views'),
    '#type' => 'checkboxes',
    '#options' => $options,
    '#default_value' => variable_get('views_savedsearches', array()),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_form_alter().
 */
function views_savedsearches_form_alter(&$form, &$form_state, $form_id) {
  // Delete all saved searches whenever an edited View is saved.
  if ($form_id == 'views_edit_view') {
    $form['#submit'] = '_views_savedsearches_views_edit_form_submit';
  }
}

/**
 * Implements hook_block_info().
 */
function views_savedsearches_block_info() {
  $blocks = array();
  $blocks['views-savedsearches-per-user'] = array(
    'info' => t('My views saved searches'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function views_savedsearches_block_view($delta = '') {
  global $user;
  $block = array();

  switch ($delta) {
    case 'views-savedsearches-per-user':
      $uid = (arg(0) == 'user' && is_numeric(arg(1))) ? arg(1) : $user->uid;
      $saved_searches = views_savedsearches_load_multiple($uid, 1);
      $items = array();
      foreach ($saved_searches as $sid => $saved_search) {
        if (!empty($saved_search->display)) {
          $query = _views_savedsearches_filters_to_params($saved_search->filters);
          $view = views_get_view($saved_search->vid);
          if (isset($view->display[$saved_search->display]->display_options['path'])) {
            $path = $view->display[$saved_search->display]->display_options['path'];
            if (!empty($path)) {
              $items[] = l($saved_search->name, $path, array('query' => $query));
            }
          }
        }
      }
      if (count($items) > 0) {
        $block = array('subject' => 'My saved searches', 'content' => theme('item_list', $items));
      }

      break;
  }
  return $block;
}

/**
 * Implements hook_views_pre_view().
 */
function views_savedsearches_views_pre_view(&$view) {
  if (user_access('use views savedsearch')) {
    $enabled_views = variable_get('views_savedsearches', array());
    if (empty($enabled_views[$view->name])) {
      return;
    }

    $output = '';
    $output .= '<div id="view-' . drupal_clean_css_identifier($view->name) . '-savedsearches-container" class="views-savedsearches-container clearfix">';
    $output .= theme('views_savedsearches_container', array('view' => $view, 'views_filters_form_values' => $_GET));
    $output .= '</div>';

    if (!variable_get('clean_url', FALSE)) {
      drupal_set_message(t('Views SavedSearches require Clean URLs, please <a href="@enable">enable it</a>.', array('@enable' => url('admin/settings/clean-urls'))), 'warning');
    }

    $view->attachment_before = $output . $view->attachment_before;
  }
}

/**
 * Form building callback; the form used to save a search.
 */
function views_savedsearches_save_search_form($form, $form_state, $view) {
  // Save some properties about the current view.
  $form['variables']['#tree'] = TRUE;
  $form['variables']['vid'] = array('#type' => 'hidden', '#value' => ($view->vid > 0 ? $view->vid : 0));
  $form['variables']['view_name'] = array('#type' => 'hidden', '#value' => $view->name);
  $form['variables']['display'] = array('#type' => 'hidden', '#value' => $view->current_display);
  // This is needed for the non-AHAH form submit.
  $filters = _views_savedsearches_params_to_filters($view, $_GET);

  $form['variables']['exposed_filters'] = array('#type' => 'value', '#value' => serialize($filters));

  $form['name'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t('Name'),
    '#size' => 30,
    '#maxlength' => 30,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save this search'),
  );

  // Make sure we redirect the user to the current view after he has saved the
  // current search. Without this, he would be redirected to the default view,
  // i.e. without any exposed filters configured.
  $form['#redirect'] = array(
    $_GET['q'],
    '',
  );
  $params = $_GET;
  unset($params['q']);
  foreach ($params as $k => $v) {
    if (!empty($k) && !empty($v)) {
      $query[] = $k . '=' . $v;
    }
    else {
      $query[]= $v;
    }
  }
  $form['#redirect'][1] = implode('&', $query);

  return $form;
}

/**
 * Form validation callback; for views_savedsearches_save_search_form.
 */
function views_savedsearches_save_search_form_validate($form, &$form_state) {
  if (empty($form_state['values']['name'])) {
    form_set_error('name', t('You must enter a name for this saved search.'));
  }
  elseif (drupal_strlen($form_state['values']['name']) > 30) {
    form_set_error('name', t('Your name for this saved search is too long. The name for a saved search can not be longer than 30 characters.'));
  }
}

/**
 * Form submission callback; for views_savedsearches_save_search_form.
 */
function views_savedsearches_save_search_form_submit($form, &$form_state) {
  global $user;

  // Create a new saved search object.
  $saved_search = new stdClass();
  $saved_search->sid = 'new';
  $saved_search->uid = $user->uid;
  $saved_search->vid = $form_state['values']['variables']['vid'];
  $saved_search->view_name = $form_state['values']['variables']['view_name'];
  $saved_search->display = $form_state['values']['variables']['display'];
  $saved_search->name = $form_state['values']['name'];
  $saved_search->filters = $form_state['values']['variables']['exposed_filters'];

  views_savedsearches_save($saved_search);

  drupal_set_message(t("Your %name search was saved!", array('%name' => $saved_search->name)));

}

/**
 * Form building callback; the form to delete a search.
 */
function views_savedsearches_delete_search_form($form, $form_state, $view, $options) {
  // Save some properties about the current view.
  $form['variables']['#tree'] = TRUE;
  $form['variables']['vid'] = array('#type' => 'hidden', '#value' => $view->vid);
  $form['variables']['view_name'] = array('#type' => 'hidden', '#value' => $view->name);

  $form['saved_collapse'] = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#title' => t('Saved searches'),
  );
  $form['saved_collapse']['saved_searches'] = array(
    '#type' => 'checkboxes',
    '#options' => $options,
    '#attributes' => array(
      'class' => array('form-checkboxes-horizontal'),
    ),
  );

  $form['saved_collapse']['delete'] = array(
    '#type' => 'submit',
    '#value' => t('Delete'),
  );

  // Make sure we redirect the user to the current view after he has saved the
  // current search. Without this, he would be redirected to the default view,
  // i.e. without any exposed filters configured.
  $form['#redirect'] = $_GET['q'];

  return $form;
}

/**
 * Form submission callback; for views_savedsearches_delete_search_form.
 */
function views_savedsearches_delete_search_form_submit($form, &$form_state) {
  foreach ($form_state['values']['saved_searches'] as $sid => $value) {
    if ($sid == $value) {
      $saved_search = views_savedsearches_load($sid);
      views_savedsearches_delete($sid);
      drupal_set_message(t('Saved search %name deleted.', array('%name' => $saved_search->name)));
    }
  }
}

/**
 * AHAH callback; for both the save search and delete saved search form.
 */
function views_savedsearches_ahah($action) {
  $vid = $_POST['variables']['vid'];
  $view_name = $_POST['variables']['view_name'];
  $views_filters_form_values = array();

  parse_str($_POST['views_filters_form'], $views_filters_form_values);
  $_POST['variables']['exposed_filters'] = serialize($views_filters_form_values);

  // Submit the save form with $_POST instead of $form_values.
  $form_state = array(
    'submitted' => TRUE,
    'values' => $_POST,
  );
  if ($action == 'delete') {
    views_savedsearches_delete_search_form_submit(NULL, $form_state);
  }
  elseif ($action == 'save') {
    views_savedsearches_save_search_form_submit(NULL, $form_state);
  }

  // Reset $_POST(), to prevent drupal_get_form() from calling the validate
  // and submit hooks. drupal_get_form will be called at least once for the
  // list (which is also the delete form).
  $_POST = array();

  // Output.
  $view = views_get_view($view_name);

  $output = '';
  $output .= theme('status_messages');
  $output .= theme('views_savedsearches_container', array('view' => $view, 'views_filters_form_values' => $views_filters_form_values));

  print $output;
  exit;
}

/**
 * Load a saved search
 *
 * @param sid
 *   A saved search id.
 * @return
 *   A saved search object.
 */
function views_savedsearches_load($sid) {
  $saved_search = new stdClass();
  $saved_search->sid = $sid;

  $result = db_select('views_savedsearches', 'vss')
    ->fields('vss', array('sid', 'uid', 'vid', 'view_name', 'display', 'name', 'filters'))
    ->condition('sid', $sid)
    ->orderBy('name', 'DESC')
    ->execute();

  $obj = $result->fetchObject();
  if (is_object($obj)) {
    $saved_search = $obj;
    $saved_search->filters = unserialize($saved_search->filters);
  }
  return $saved_search;
}

/**
 * Load multiple saved searches.
 *
 * @param $uid
 *  A user id.
 * @param $vid
 *  A view id.
 * @return
 *  An array of saved search objects.
 */
function views_savedsearches_load_multiple($uid = NULL, $vid = NULL, $view_name = '') {
  $saved_searches = array();

  $query = db_select('views_savedsearches', 'vss')
    ->fields('vss', array('sid'))
    ->orderBy('name', 'DESC');

  if ($uid > 0 && $vid > 0) {
    $query->condition('uid', $uid);
    $query->condition('vid', $vid);
  }
  elseif ($uid > 0) {
    $query->condition('uid', $uid);
  }
  elseif ($vid > 0) {
    $query->condition('vid', $vid);
  }

  if (isset($view_name) && $view_name != '') {
    $query->condition('view_name', $view_name);
  }

  $result = $query->execute();

  foreach ($result as $row) {
    $saved_searches[$row->sid] = views_savedsearches_load($row->sid);
  }
  return $saved_searches;
}

/**
 * Get the number of saved searches, by uid, vid, both or none of both (this
 * is the equivalent of getting the total count).
 *
 * @param $uid
 *  A user id.
 * @param $vid
 *  View id.
 * @return
 *  The count of saved searches, depending on the passed user id and view id.
 */
function views_savedsearches_count($uid = NULL, $vid = NULL) {
  $query = 'SELECT COUNT(sid) FROM {views_savedsearches}';

  if ($uid > 0 && $vid > 0) {
    $result = db_query("$query WHERE uid = %d AND vid = %d", $uid, $vid);
  }
  elseif ($uid > 0) {
    $result = db_query("$query WHERE uid = %d", $uid);
  }
  elseif ($vid > 0) {
    $result = db_query("$query WHERE vid = %d", $vid);
  }
  else {
    $result = db_query($query);
  }

  return db_result($result);
}

/**
 * Delete a saved search.
 *
 * @param $sid
 *   A saved search id.
 */
function views_savedsearches_delete($sid) {
  if (function_exists('notifications_delete_subscriptions') && module_exists('notifications_views_savedsearches')) {
    notifications_delete_subscriptions(array('type' => 'savedsearch'), array('sid' => $sid));
    db_delete('notifications_views_savedsearches')
      ->condition('sid', $sid)
      ->execute();
    db_delete('notifications_views_savedsearches_seen')
      ->condition('sid', $sid)
      ->execute();
  }
  db_delete('views_savedsearches')
    ->condition('sid', $sid)
    ->execute();
}

/**
 * Save a saved search.
 *
 * @param $saved_search
 *   A saved search object.
 * @return
 *   A saved search id.
 *
 * @todo does not work with views in code.
 */
function views_savedsearches_save($saved_search) {
  if ($saved_search->sid && $saved_search->sid != 'new') {
      db_update('views_savedsearches')
        ->fields(array(
          'uid' => $saved_search->uid,
          'vid' => $saved_search->vid,
          'view_name' => $saved_search->view_name,
          'name' => $saved_search->name,
          'filters' => $saved_search->filters,
        ))
        ->condition('sid', $saved_search->sid)
        ->execute();
  }
  else {
    $saved_search->sid =
      db_insert('views_savedsearches')
        ->fields(array(
          'uid' => $saved_search->uid,
          'vid' => $saved_search->vid,
          'view_name' => $saved_search->view_name,
          'display' => $saved_search->display,
          'name' => $saved_search->name,
          'filters' => $saved_search->filters,
        ))
        ->execute();
  }
  return $saved_search->sid;
}

/**
 * Get a saved search id by a set of filters.
 *
 * @param $filters
 *   An array container filter name - filter value(s) pairs.
 * @return
 *   A saved search id.
 */
function views_savedsearches_sid_by_filters($filters) {
  $sid = FALSE;

  if (count($filters)) {
    $result = db_select('views_savedsearches', 'vss')
      ->fields('vss', array('sid'))
      ->condition('filters', serialize($filters))
      ->range(0, 1)
      ->execute();

    foreach ($result as $row) {
      $sid = $row->sid;
    }

  }
  return ($sid === FALSE ? -1 : $sid);
}

/**
 * Form submission callback; for the views_edit_view form.
 */
function _views_savedsearches_views_edit_form_submit(&$form, &$form_values) {
  db_query("DELETE FROM {views_savedsearches} WHERE vid = %d", $form_values['vid']);
}

/**
 * Helper function; constructs a params string from an array of filters (can
 * be used as a GET query, similar to the "params" method of jQuery).
 *
 * @param $filters
 *  An array container filter name - filter value(s) pairs.
 * @return
 *  A GET query.
 */
function _views_savedsearches_filters_to_params($filters) {
  $query = array();

  if (is_array($filters)) {
    foreach ($filters as $filter_name => $filter_value) {
      $query[$filter_name] = $filter_value;
    }
  }
  return $query;
}

/**
 * Helper function; deconstructs a params string to an array of filters.
 *
 * @param $params
 *  Am array of current parameters in the query string.
 * @return
 *  An array containing filter name - filter value(s) pairs.
 */
function _views_savedsearches_params_to_filters($view, $params) {
  $filters = array();
  $display = $view->display[$view->current_display];
  if (is_object($view->display_handler)) {
    $exposed = $view->get_exposed_input();
    if (!empty($exposed)) {
      foreach ($exposed as $key => $value) {
        if (!empty($value)) {
          $filters[$key] = $value;
        }
      }
    }
  }
  unset($filters['form_token']);
  unset($filters['form_id']);
  unset($filters['form_build_id']);
  return $filters;
}

/**
 * Helper function; configures some JS settings to make the AHAH forms
 * possible.
 *
 * @param $view_name
 *   Name of a view.
 */
function _views_savedsearches_configure_ahah($view_name) {
  static $required_things_added;

  if (!isset($required_things_added)) {
    drupal_add_js('misc/jquery.form.js');
    drupal_add_js('misc/collapse.js');
    drupal_add_js(drupal_get_path('module', 'views_savedsearches') . '/views_savedsearches.js');
    drupal_add_js(
      array(
        'views_savedsearches' => array(
          'paths' => array(
            'deletePath' => url(AHAH_PATH_DELETE),
            'savePath' => url(AHAH_PATH_SAVE),
          ),
        ),
      ),
      'setting'
    );

    $required_things_added = TRUE;
  }

  // Add the current view's name to the JS settings.
  drupal_add_js(
    array(
      'views_savedsearches' => array(
        'view_names' => array(str_replace('_', '-', $view_name)),
      ),
    ),
    'setting'
  );
}

/**
 * Helper function; transforms an array of saved search objects into an array
 * of form options that can be used for a select or checkboxes form item. The
 * key will be the sid (saved search id) and the value a link to the saved
 * search.
 *
 * @param $saved_searches
 *   An array of saved search objects.
 * @param $view_url
 *   The view URL that applies to all saved search objects passed in param 1.
 * @param $current_view_matches_sid
 *   The saved search id that matches the current view (if any).
 * @return
 *   An array of form options.
 */
function _views_savedsearches_saved_searches_to_form_options($saved_searches, $view_url, $current_view_matches_sid = 0) {
  $options = array();

  if (is_array($saved_searches)) {
    foreach ($saved_searches as $sid => $saved_search) {
      $query = _views_savedsearches_filters_to_params($saved_search->filters);

      // If this saved search is active, mark it with a class.
      $class = ($sid == $current_view_matches_sid) ? 'views-savedsearches-is-active' : '';

      $options[$sid] = l($saved_search->name, $view_url, array('attributes' => array('class' => array($class)), 'query' => $query));
    }
  }
  return $options;
}

/**
 * Controls the entire output.
 *
 * @param $view
 *   A view oject.
 * @param $views_filters_form_values
 *   An array consisting of key-value pairs, where the keys are the names of
 *   the filters or operators (ops) of a views form. This data can either be
 *   found in $_GET (normal forms) or in $_POST['views_filters_form'] (AHAH
 *   forms).
 *
 * @ingroup themeable
 */
function theme_views_savedsearches_container($variables) {
  $view = $variables['view'];
  $views_filters_form_values = $variables['views_filters_form_values'];
  $output = '';

  // Add JS necessary for adding AHAH.
  _views_savedsearches_configure_ahah($view->name);

  // Add the CSS and see if the current view matches a sid.
  drupal_add_css(drupal_get_path('module', 'views_savedsearches') . '/views_savedsearches.css', 'module');
  $view_filters = _views_savedsearches_params_to_filters($view, $views_filters_form_values);
  $current_view_matches_sid = views_savedsearches_sid_by_filters($view_filters);

  // The list (also delete saved search form).
  $output .= '<div class="views-savedsearches-list-ahah">';
  $output .= theme('views_savedsearches_list', array('view' => $view, 'current_view_matches_sid' => $current_view_matches_sid));
  $output .= '</div>';

  // The save search form.
  $output .= '<div class="views-savedsearches-save-ahah">';
  if ($current_view_matches_sid == -1 && count($view_filters)) {
    $output .= drupal_render(drupal_get_form('views_savedsearches_save_search_form', $view));
  }
  $output .= '</div>';

  return $output;
}

/**
 * Themes the list of saved searches.
 *
 * @param $view
 *   A view object.
 * @param $current_view_matches_sid
 *   The saved search id that matches the current view.
 *
 * @ingroup themeable
 */
function theme_views_savedsearches_list($variables) {
  global $user;
  $view = $variables['view'];
  $current_view_matches_sid = $variables['current_view_matches_sid'];
  $output = '';

  // Load saved searches for the current user, to use them as form options.
  if (user_access('use all savedsearches')) {
    $saved_searches = views_savedsearches_load_multiple(NULL, $view->vid, $view->name);
  }
  else {
    $saved_searches = views_savedsearches_load_multiple($user->uid, $view->vid, $view->name);
  }
  $options = _views_savedsearches_saved_searches_to_form_options($saved_searches, $view->get_url(), $current_view_matches_sid);

  // Display a list of saved searches (if there are any) and allow the user to
  // delete any of them.
  if (count($options)) {
    $output .= drupal_render(drupal_get_form('views_savedsearches_delete_search_form', $view, $options, $current_view_matches_sid));
  }
  else {
    $output .= '<p>' . t('No saved searches found for this view.') . '</p>';
  }

  return $output;
}
