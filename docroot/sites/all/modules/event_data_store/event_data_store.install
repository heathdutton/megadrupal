<?php

/**
 * @file
 * Install file for event_data_store.
 */

/**
 * Implements hook_schema().
 */
function event_data_store_schema() {
  $schema = array();

  $schema['event_data_store_event'] = array(
    'description' => 'Stores information about all defined {event_data_store} event types.',
    'export' => array(
      'key' => 'name',
      'key name' => 'Name',
      'primary key' => 'name',
      'admin_title' => 'title',
      'identifier' => 'event',
      'default hook' => 'default_event_data_store_event',
      'delete callback' => 'event_data_store_event_delete',
      'api' => array(
        'owner' => 'event_data_store',
        'api' => 'default_event_data_store_event',
        'minimum_version' => 1,
        'current_version' => 1,
      ),
    ),
    'fields' => array(
      'name' => array(
        'type' => 'varchar',
        'length' => '128',
        'not null' => TRUE,
        'description' => 'Machine name.',
      ),
      'title' => array(
        'description' => 'The human-readable title for this event.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
        'default' => '',
      ),
      'event' => array(
        'description' => 'Machine name of the event which this stores data for.',
        'type' => 'varchar',
        'length' => '128',
        'not null' => TRUE,
      ),
      'aggregate' => array(
        'description' => 'Boolean to decide whether or not to generate aggregated data.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
        'boolean' => TRUE,
      ),
      'aggregate_behaviour' => array(
        'description' => 'Which mode to perform aggregation by, tally or count.',
        'type' => 'varchar',
        'length' => '128',
        'not null' => TRUE,
      ),
      'aggregate_hourly' => array(
        'description' => 'Boolean to decide whether or not to generate hourly aggregated data.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
        'boolean' => TRUE,
      ),
      'aggregate_daily' => array(
        'description' => 'Boolean to decide whether or not to generate daily aggregated data.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
        'boolean' => TRUE,
      ),
      'aggregate_weekly' => array(
        'description' => 'Boolean to decide whether or not to generate weekly aggregated data.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
        'boolean' => TRUE,
      ),
      'aggregate_monthly' => array(
        'description' => 'Boolean to decide whether or not to generate monthly aggregated data.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
        'boolean' => TRUE,
      ),
      'aggregate_yearly' => array(
        'description' => 'Boolean to decide whether or not to generate yearly aggregated data.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
        'boolean' => TRUE,
      ),
      'prune_interval' => array(
        'description' => 'How often to prune old data.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('name'),
  );

  $schema['event_data_store'] = array(
    'description' => t('Storage for event data.'),
    'fields' => array(
      'eds_id' => array(
        'description' => 'The unique identifier this event data.',
        'type' => 'serial',
        'not null' => TRUE
      ),
      'event_name' => array(
        'description' => 'The machine-name for this event.',
        'type' => 'varchar',
        'length' => '128',
        'not null' => FALSE,
        'default' => '',
      ),
      'uid' => array(
        'description' => 'ID of Drupal user who triggered this event.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'timestamp' => array(
        'description' => 'When this event occurred.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0
      ),
      'user_agent' => array(
        'description' => 'Users browser information.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
        'default' => '',
      ),
      'ip_address' => array(
        'description' => 'Users IP Address.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
        'default' => '',
      ),
      'entity_type' => array(
        'description' => 'The entity type, such as one of "harmony_thread", "node", "comment", or "user".',
        'type' => 'varchar',
        'length' => '128',
        'not null' => TRUE,
        'default' => '',
      ),
      'entity_id' => array(
        'description' => 'The unique ID of the object, such as either the {thread_id}, {uid}, or {nid}.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'data' => array(
        'description' => 'Any additional data that should be stored.',
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
      ),
    ),
    'primary key' => array('eds_id'),
    'foreign keys' => array(
      'event_name' => array(
        'table' => 'event_data_store_event',
        'columns' => array('event_name' => 'name'),
      ),
      'event_user' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
    ),
    'indexes' => array(
      'event_name' => array('event_name'),
      'timestamp' => array('timestamp'),
      'entity_type_id' => array('entity_type', 'entity_id'),
    ),
  );

  $schema['event_data_store_agg'] = array(
    'description' => t('Storage for event data.'),
    'fields' => array(
      'edsa_id' => array(
        'description' => 'The unique identifier for this aggregated event data.',
        'type' => 'serial',
        'not null' => TRUE
      ),
      'event_name' => array(
        'description' => 'The machine-name for this event.',
        'type' => 'varchar',
        'length' => '128',
        'not null' => FALSE,
        'default' => '',
      ),
      'timestamp' => array(
        'description' => 'Specify the time period for this aggregated data.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'period' => array(
        'description' => 'Time interval of this aggregated record.',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => FALSE,
        'not null' => TRUE,
        'default' => 0,
        'boolean' => FALSE,
      ),
      'value' => array(
        'description' => 'Numerical aggregated data.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('edsa_id'),
    'foreign keys' => array(
      'event_name' => array(
        'table' => 'event_data_store_event',
        'columns' => array('event_name' => 'name'),
      ),
    ),
    'indexes' => array(
      'event_name' => array('event_name'),
      'timestamp' => array('timestamp'),
    ),
  );

  return $schema;
}

/**
 * Implements hook_uninstall().
 */
function event_data_store_uninstall() {
  variable_del('event_data_store_last_aggregated');
  variable_del('event_data_store_in_use');
}

/**
 * Add in extra fields to store entity type and id.
 */
function event_data_store_update_7100() {
  if (!db_field_exists('event_data_store', 'entity_type')) {
    db_add_field('event_data_store', 'entity_type', array(
      'description' => 'The entity type, such as one of "harmony_thread", "node", "comment", or "user".',
      'type' => 'varchar',
      'length' => '128',
      'not null' => TRUE,
      'default' => '',
    ));
    db_add_field('event_data_store', 'entity_id', array(
      'description' => 'The unique ID of the object, such as either the {thread_id}, {uid}, or {nid}.',
      'type' => 'int',
      'unsigned' => TRUE,
      'not null' => TRUE,
      'default' => 0,
    ));
  }
}

/**
 * Alter the structure of the aggregated data store.
 */
function event_data_store_update_7101() {
  if (!db_field_exists('event_data_store_agg', 'period')) {
    $fields = array(
      'event_data_store_event' => array(
        'aggregate' => array(
          'description' => 'Boolean to decide whether or not to generate aggregated data.',
          'type' => 'int',
          'size' => 'tiny',
          'not null' => TRUE,
          'default' => 1,
          'boolean' => TRUE,
        ),
        'aggregate_hourly' => array(
          'description' => 'Boolean to decide whether or not to generate hourly aggregated data.',
          'type' => 'int',
          'size' => 'tiny',
          'not null' => TRUE,
          'default' => 1,
          'boolean' => TRUE,
        ),
        'aggregate_daily' => array(
          'description' => 'Boolean to decide whether or not to generate daily aggregated data.',
          'type' => 'int',
          'size' => 'tiny',
          'not null' => TRUE,
          'default' => 1,
          'boolean' => TRUE,
        ),
        'aggregate_weekly' => array(
          'description' => 'Boolean to decide whether or not to generate weekly aggregated data.',
          'type' => 'int',
          'size' => 'tiny',
          'not null' => TRUE,
          'default' => 1,
          'boolean' => TRUE,
        ),
        'aggregate_monthly' => array(
          'description' => 'Boolean to decide whether or not to generate monthly aggregated data.',
          'type' => 'int',
          'size' => 'tiny',
          'not null' => TRUE,
          'default' => 1,
          'boolean' => TRUE,
        ),
      ),
      'event_data_store_agg' => array(
        'period' => array(
          'description' => 'Time interval of this aggregated record.',
          'type' => 'int',
          'size' => 'tiny',
          'unsigned' => FALSE,
          'not null' => TRUE,
          'default' => 0,
          'boolean' => FALSE,
        ),
      ),
    );

    // Add our new fields and drop one.
    foreach ($fields as $table => $table_fields) {
      foreach ($table_fields as $field => $definition) {
        db_add_field($table, $field, $definition);
      }
    }
    db_drop_field('event_data_store_event', 'aggregate_interval');
  }
}

/**
 * Drop the last_aggregated field as it's no longer needed.
 */
function event_data_store_update_7102() {
  db_drop_field('event_data_store_event', 'last_aggregated');
}

/**
 * Set the new variable which tracks the last time data was aggregated.
 */
function event_data_store_update_7103() {
  $last_aggregated = db_query_range('SELECT * FROM {event_data_store_agg} ORDER BY timestamp DESC', 0, 1)->fetchObject();

  if ($last_aggregated) {
    variable_set('event_data_store_last_aggregated', $last_aggregated->timestamp);
  }
  else {
    variable_set('event_data_store_last_aggregated', 0);
  }
}

/**
 * Add in a new field for yearly aggregation.
 */
function event_data_store_update_7104() {
  if (!db_field_exists('event_data_store_event', 'aggregate_yearly')) {
    db_add_field('event_data_store_event', 'aggregate_yearly', array(
      'description' => 'Boolean to decide whether or not to generate yearly aggregated data.',
      'type' => 'int',
      'size' => 'tiny',
      'not null' => TRUE,
      'default' => 0,
      'boolean' => TRUE,
    ));
  }
}

/**
 * Build up the list of used events for our cache variable.
 */
function event_data_store_update_7105() {
  event_data_store_build_in_use();
}
