<?php
/**
 * @file
 * Implements various image styles.
 */

/**
 * Implements hook_effect_info().
 */
function image_style_views_effect_image_effect_info() {
  return array(
    'is_watermark' => array(
      'label' => t('Watermark'),
      'help'  => t('Applies arbitrary Watermark image to any target image'),
      'effect callback' => 'is_watermark_effect',
      'form callback' => 'is_watermark_form',
    ),
    'is_author' => array(
      'label' => t('Entity Author'),
      'help'  => t("Adds entity author name to entity's image"),
      'effect callback' => 'is_entity_author_effect',
      'form callback' => 'is_entity_author_form',
    ),
    'is_parent_author' => array(
      'label' => t('Parent Entity Author'),
      'help'  => t("Adds Parent entity author name to entity's image"),
      'effect callback' => 'is_parent_entity_author_effect',
      'form callback' => 'is_parent_entity_author_form',
    ),
    'is_views' => array(
      'label' => t('Views embed'),
      'help'  => t('Embeds views results into an image'),
      'effect callback' => 'is_views_effect',
      'form callback' => 'is_views_form',
    ),
    'is_authorship_combined' => array(
      'label' => t('Combined Authorship'),
      'help'  => t("[date] | [category] | [username]"),
      'effect callback' => 'is_authorship_combined_effect',
      'form callback' => 'is_authorship_combined_form',
    ),
    'is_cartoonist_combined' => array(
      'label' => t('Combined Cartoonist'),
      'help'  => t("[date] | [category] | [username]"),
      'effect callback' => 'is_cartoonist_combined_effect',
      'form callback' => 'is_cartoonist_combined_form',
    ),
  );
}

/**
 * Implements Image effect callback.
 */
function is_cartoonist_combined_form($data) {
  $form = array();
  $form['text'] = array(
    '#type' => 'fieldset',
    '#title' => t('Text signature settings'),
  );
  $form['text']['font'] = array(
    '#type' => 'textfield',
    '#default_value' => isset($data['text']['font']) ? $data['text']['font'] : NULL,
    '#title' => t('Font file'),
    '#description' => t('Full path to font file to be used for embedding text'),
    '#required' => TRUE,
  );
  $form['text']['size'] = array(
    '#type' => 'textfield',
    '#default_value' => isset($data['text']['size']) ? $data['text']['size'] : '15:18',
    '#title' => t('Font size'),
    '#description' => t('Text embeded using this size. (font size:line-height)'),
    '#required' => TRUE,
  );
  $form['text']['size-min'] = array(
    '#type' => 'textfield',
    '#default_value' => isset($data['text']['size-min']) ? $data['text']['size-min'] : '10:12',
    '#title' => t('Min Font size'),
    '#description' => t('NOT YET BUILT: Down Auto-scaling font-size will not reduce beyond this value'),
    '#required' => TRUE,
  );
  $form['text']['bind-box'] = array(
    '#type' => 'textfield',
    '#default_value' => isset($data['text']['bind-box']) ? $data['text']['bind-box'] : NULL,
    '#title' => t('Text binding box'),
    '#description' => t('Binding box inside which text will be embeded (ex. widthxheight). Some spill is possible as perfect placement is difficult to calculate'),
    '#required' => TRUE,
  );
  $form['text']['angle'] = array(
    '#type' => 'textfield',
    '#title' => t('Text angle'),
    '#description' => t('The angle in degrees, with 0 degrees being left-to-right reading text. Higher values represent a counter-clockwise rotation. For example, a value of 90 would result in bottom-to-top reading text.'),
    '#default_value' => isset($data['text']['angle']) ? $data['text']['angle'] : 0,
    '#required' => TRUE,
  );
  $form['text']['position'] = array(
    '#title' => t('Text Cartoonist name Position'),
    '#description' => t('Specify watermark placement in target image. format: pos1[|pos2[|[pos3...]]]. ex: left_bottom|+10-20 . Possible values: +X+Y, left_top, center_top, right_top, left_center, center_center, right_center, left_bottom, center_bottom, right_bottom.'),
    '#type' => 'textfield',
    '#default_value' => !empty($data['text']['position']) ? $data['text']['position'] : NULL,
    '#required' => TRUE,
  );

  return $form;
}

/**
 * Implements image effect.
 */
function is_cartoonist_combined_effect(&$image, $data) {
  $result = db_select('file_managed', 'f')
    ->fields('f', array('fid'))
    ->condition('uri', $image->source)
    ->execute()->fetchField();
  if (!$result || !($file = file_load($result))) {
    return;
  }

  if (!($list = file_usage_list($file)) || empty($list['file'])) {
    return;
  }

  foreach ($list['file'] as $entity_type => $entity_info) {
    $entity_ids = array_keys($entity_info);
    $entities = entity_load($entity_type, $entity_ids);
  }

  if (!empty($entities)) {

    foreach ($entities as $entity) {
      if (!($parent = relation_get_related_entity('node', $entity->nid, 'parent_of'))) {
        return FALSE;
      }
      $cartoon_date = format_date($parent->created, 'date_normal');
      // Cartoon category.
      $cartoon_categories = field_view_field('node', $parent, 'field_category', array('label' => 'hidden', 'type' => 'taxonomy_term_reference_plain'));
      $cartoon_categories = $cartoon_categories[0]['#markup'];
      $author_name = variable_get('anonymous', 'Anonymous');
      if (($author = user_load($entity->uid)) && $author->uid) {
        $author_name = $author->name;
      }
      $authorship_combined = $cartoon_date . ' | ' . $cartoon_categories . ' | ' . $author_name;

      /*
       *$input = (get_defined_vars());
       *$export = kprint_r($input, TRUE);
       *die( $export);
       */

      // Prepare variables.
      list($max['size'], $max['line-height']) = explode(':', $data['text']['size']);
      list($min['size'], $min['line-height']) = explode(':', $data['text']['size-min']);
      list($bbox['width'], $bbox['height']) = explode('x', $data['text']['bind-box']);
      $bbox += position_calculate_get($data['text']['position'], $image->info['width'], $image->info['height'], $bbox['width'], $bbox['height']);
      $bbox['y'] += $bbox['height'];
      if (
        !($author = user_load($parent->uid)) ||
        FALSE === ($color = imagecolorallocatealpha($image->resource, 0, 0, 0, 0)) ||
        !($tmp = image_gd_create_tmp($image, $image->info['width'], $image->info['height'])) ||
        !imagecopy($tmp, $image->resource, 0, 0, 0, 0, imagesx($image->resource), imagesy($image->resource)) ||
        !imagettftext($tmp, $max['size'], $data['text']['angle'], $bbox['x'], $bbox['y'], $color, $data['text']['font'], $authorship_combined)
      ) {
        return;
      }
      imagedestroy($image->resource);
      $image->resource = $tmp;

      // Only print first found entity's author.
      break;
    }
  }
}

/**
 * Implements image effect form.
 */
function is_authorship_combined_form($data) {
  $form = array();
  $form['text'] = array(
    '#type' => 'fieldset',
    '#title' => t('Text signature settings'),
  );
  $form['text']['font'] = array(
    '#type' => 'textfield',
    '#default_value' => isset($data['text']['font']) ? $data['text']['font'] : NULL,
    '#title' => t('Font file'),
    '#description' => t('Full path to font file to be used for embedding text'),
    '#required' => TRUE,
  );
  $form['text']['size'] = array(
    '#type' => 'textfield',
    '#default_value' => isset($data['text']['size']) ? $data['text']['size'] : '15:18',
    '#title' => t('Font size'),
    '#description' => t('Text embeded using this size. (font size:line-height)'),
    '#required' => TRUE,
  );
  $form['text']['size-min'] = array(
    '#type' => 'textfield',
    '#default_value' => isset($data['text']['size-min']) ? $data['text']['size-min'] : '10:12',
    '#title' => t('Min Font size'),
    '#description' => t('NOT YET BUILT: Down Auto-scaling font-size will not reduce beyond this value'),
    '#required' => TRUE,
  );
  $form['text']['bind-box'] = array(
    '#type' => 'textfield',
    '#default_value' => isset($data['text']['bind-box']) ? $data['text']['bind-box'] : NULL,
    '#title' => t('Text binding box'),
    '#description' => t('Binding box inside which text will be embeded (ex. widthxheight). Some spill is possible as perfect placement is difficult to calculate'),
    '#required' => TRUE,
  );
  $form['text']['angle'] = array(
    '#type' => 'textfield',
    '#title' => t('Text angle'),
    '#description' => t('The angle in degrees, with 0 degrees being left-to-right reading text. Higher values represent a counter-clockwise rotation. For example, a value of 90 would result in bottom-to-top reading text.'),
    '#default_value' => isset($data['text']['angle']) ? $data['text']['angle'] : 0,
    '#required' => TRUE,
  );
  $form['text']['position'] = array(
    '#title' => t('Text author name Position'),
    '#description' => t('Specify watermark placement in target image. format: pos1[|pos2[|[pos3...]]]. ex: left_bottom|+10-20 . Possible values: +X+Y, left_top, center_top, right_top, left_center, center_center, right_center, left_bottom, center_bottom, right_bottom.'),
    '#type' => 'textfield',
    '#default_value' => !empty($data['text']['position']) ? $data['text']['position'] : NULL,
    '#required' => TRUE,
  );

  return $form;
}

/**
 * Implements image effect callback.
 */
function is_authorship_combined_effect(&$image, $data) {
  $result = db_select('file_managed', 'f')
    ->fields('f', array('fid'))
    ->condition('uri', $image->source)
    ->execute()->fetchField();
  if (!$result || !($file = file_load($result))) {
    return;
  }

  if (!($list = file_usage_list($file)) || empty($list['file'])) {
    return;
  }

  foreach ($list['file'] as $entity_type => $entity_info) {
    $entity_ids = array_keys($entity_info);
    $entities = entity_load($entity_type, $entity_ids);
  }

  if (!empty($entities)) {

    foreach ($entities as $entity) {
      if (!($parent = relation_get_related_entity('node', $entity->nid, 'parent_of'))) {
        return FALSE;
      }

      $cartoon_date = format_date($parent->created, 'date_normal');
      // Cartoon category.
      $cartoon_categories = field_view_field('node', $parent, 'field_category', array('label' => 'hidden', 'type' => 'taxonomy_term_reference_plain'));
      $cartoon_categories = $cartoon_categories[0]['#markup'];
      $author_name = variable_get('anonymous', 'Anonymous');
      if (($author = user_load($entity->uid)) && $author->uid) {
        $author_name = $author->name;
      }
      $authorship_combined = $cartoon_date . ' | ' . $cartoon_categories . ' | ' . $author_name;

      /*
       *$input = (get_defined_vars());
       *$export = kprint_r($input, TRUE);
       *die( $export);
       */

      // Prepare variables.
      list($max['size'], $max['line-height']) = explode(':', $data['text']['size']);
      list($min['size'], $min['line-height']) = explode(':', $data['text']['size-min']);
      list($bbox['width'], $bbox['height']) = explode('x', $data['text']['bind-box']);
      $bbox += position_calculate_get($data['text']['position'], $image->info['width'], $image->info['height'], $bbox['width'], $bbox['height']);
      $bbox['y'] += $bbox['height'];
      if (
        !($author = user_load($parent->uid)) ||
        FALSE === ($color = imagecolorallocatealpha($image->resource, 0, 0, 0, 0)) ||
        !($tmp = image_gd_create_tmp($image, $image->info['width'], $image->info['height'])) ||
        !imagecopy($tmp, $image->resource, 0, 0, 0, 0, imagesx($image->resource), imagesy($image->resource)) ||
        !imagettftext($tmp, $max['size'], $data['text']['angle'], $bbox['x'], $bbox['y'], $color, $data['text']['font'], $authorship_combined)
      ) {
        return;
      }
      imagedestroy($image->resource);
      $image->resource = $tmp;

      // Only print first found entity's author.
      break;
    }
  }
}

/**
 * Implements image effect form.
 */
function is_views_form($data) {
  $views = views_get_enabled_views();
  $options = array(
    'none-none' => t('Select view'),
  );
  foreach ($views as $view) {
    foreach ($view->display as $display) {
      $options[$view->name . '-' . $display->id] = $view->human_name . ' - ' . $display->display_title;
    }
  }

  $form['log'] = array(
    '#title' => t('Notes'),
    '#type' => 'textarea',
    '#default_value' => isset($data['log']) ? $data['log'] : NULL,
    '#description' => t('Leave yourself a note or a reminder explaining the purpose behind this embeded effect.'),
  );

  $form['view'] = array(
    '#title' => t('Data view'),
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => isset($data['view']) ? $data['view'] : NULL,
    '#description' => t('Data returned by selected view will be embedded into target image.'),
    '#element_validate' => array('is_views_form_validate_fields'),
  );

  $checkboxes = array();
  if (!empty($data['view']) && 'none-none' != $data['view']) {
    list($name, $display_id) = explode('-', $data['view']);
    $view = views_get_view($name);
    // Different displays have differnet fields (if overriden).
    $view->set_display($display_id);
    $fields = $view->get_items('field');

    $relationships = $view->get_items('relationship');
  }

  // Prepare fields checkboxes.
  if (!empty($fields)) {
    foreach ($fields as $field) {
      if (!isset($field['exclude']) || $field['exclude']) {

        // Do not display fields which are excluded from display in views admin.
        continue;
      }
      $prefix = '';
      if ('none' != $field['relationship']) {
        $prefix = '(' . $relationships[$field['relationship']]['label'] . ') ';
      }
      $checkboxes[$field['id']] = $prefix . $field['id'];
    }
  }

  // Remove fields that were not checked.
  $data_fields = !empty($data['fields']) ? array_filter($data['fields']) : array();
  $form['fields'] = array(
    '#title' => t('Fields to embed'),
    '#type' => 'checkboxes',
    '#options' => $checkboxes,
    '#default_value' => $data_fields,
    '#description' => t('Choose which fields will be embedded. Fields excluded in view are not presented.'),
  );

  $form['field'] = array(
    '#type' => 'fieldset',
    '#title' => t('Per embeddable field configuration'),
  );
  if (!empty($data_fields)) {
    foreach ($fields as $field_name => $field) {
      if (!empty($data_fields[$field_name])) {
        $default_data = isset($data['field'][$field_name]) ? $data['field'][$field_name] : array();
        $form_item = prepare_field_form($view, $field, $default_data);
        if (!empty($form_item)) {
          $form['field'][$field['id']] = array(
            '#type' => 'fieldset',
            '#title' => t('%field_name field settings.', array('%field_name' => !empty($field['label']) ? $field['label'] : $field['id'])),
          );
          $form['field'][$field['id']] += $form_item;
        }
      }
    }
  }
  return $form;
}

/**
 * Implements image effect form helper function.
 */
function reference_field_views_handler_get_form($view, $views_field, $data) {
  $field_info = field_info_field($views_field['id']);
  // dsm($field_info);
  if ('views' != $field_info['settings']['handler']) {
    return;
  }
  $settings = $field_info['settings'];

  list($name, $display_id) = explode('-', $data['view']);
  $name = $settings['handler_settings']['view']['view_name'];
  $display_id = $settings['handler_settings']['view']['display_name'];
  $form['view'] = array(
    '#type' => 'value',
    '#value' => $name . '-' . $display_id,
  );
  $checkboxes = array();
  $view = views_get_view($name);
  // Different displays have differnet fields (if overriden).
  $view->set_display($display_id);
  $fields = $view->get_items('field');
  $relationships = $view->get_items('relationship');

  // Prepare fields checkboxes.
  if (!empty($fields)) {
    foreach ($fields as $field) {
      if (!isset($field['exclude']) || $field['exclude']) {
        // Do not display fields which are excluded from display in views admin.
        continue;
      }
      if (empty($field['type']) || 'image' != $field['type']) {
        continue;
      }
      $prefix = '';
      if ('none' != $field['relationship']) {
        $prefix = '(' . $relationships[$field['relationship']]['label'] . ') ';
      }
      $checkboxes[$field['id']] = $prefix . $field['id'];
    }
  }

  // Remove fields that were not checked.
  $data_fields = !empty($data['fields']) ? array_filter($data['fields']) : array();
  $form['fields'] = array(
    '#title' => t('Fields to embed'),
    '#type' => 'checkboxes',
    '#options' => $checkboxes,
    '#default_value' => $data_fields,
    '#description' => t('Choose which fields will be embedded. Fields excluded in view are not presented.'),
  );

  $form['field'] = array(
    '#type' => 'fieldset',
    '#title' => t('Per embeddable field configuration'),
  );
  if (!empty($data_fields)) {
    foreach ($fields as $field_name => $field) {
      if (!empty($data_fields[$field_name])) {
        $default_data = isset($data['field'][$field_name]) ? $data['field'][$field_name] : array();
        $form_item = prepare_field_form($view, $field, $default_data);
        if (!empty($form_item)) {
          $form['field'][$field['id']] = array(
            '#type' => 'fieldset',
            '#title' => t('%field_name field settings.', array('%field_name' => !empty($field['label']) ? $field['label'] : $field['id'])),
          );
          $form['field'][$field['id']] += $form_item;
        }
      }
    }
  }
  return $form;
}

/**
 * Builds image effect field form.
 */
function prepare_field_form($view, $field, $data) {
  $handler = map_field_to_field_type($field);
  // dsm($handler);
  $form = array();
  switch ($handler) {
    case 'entityreference_label':
    case 'entityreference_entity_id':
    case 'entityreference_entity_view':
      // dsm($field);
      $ref_field_form = reference_field_views_handler_get_form($view, $field, $data);
      // dsm($ref_field_form);
      return $ref_field_form;
    break;

    case 'image':
      // dsm($data);
      $styles = image_styles();
      $options = array();
      foreach ($styles as $style) {
        $options[$style['name']] = $style['name'];
      }
      $form['scale'] = array(
        '#title' => t('Watermark style'),
        '#description' => t('Apply image style to watermark to change watermark dimensions before using it on target image.'),
        '#type' => 'select',
        '#options' => $options,
        '#default_value' => !empty($data['scale']) ? $data['scale'] : NULL,
      );

      $form['position'] = array(
        '#title' => t('Position'),
        '#description' => t('Specify watermark placement in target image. format: pos1[|pos2[|[pos3...]]]. ex: left_bottom|+10-20 . Possible values: +X+Y, left_top, center_top, right_top, left_center, center_center, right_center, left_bottom, center_bottom, right_bottom.'),
        '#type' => 'textfield',
        '#default_value' => !empty($data['position']) ? $data['position'] : NULL,
        '#required' => TRUE,
      );
      $form['stop'] = array(
        '#type' => 'checkbox',
        '#title' => t('Stop on success'),
        '#default_value' => isset($data['stop']) ? $data['stop'] : TRUE,
      );
      // $form = is_watermark_form($default_data);
      break;

    case 'text':
    case 'text_default':
    case 'date':
    case 'date_default':
      $form['font'] = array(
        '#type' => 'textfield',
        '#default_value' => isset($data['font']) ? $data['font'] : NULL,
        '#title' => t('Font file'),
        '#description' => t('Full path to font file to be used for embedding text'),
        '#required' => TRUE,
      );
      $form['size'] = array(
        '#type' => 'textfield',
        '#default_value' => isset($data['size']) ? $data['size'] : '15:18',
        '#title' => t('Font size'),
        '#description' => t('Text embeded using this size. (font size:line-height)'),
        '#required' => TRUE,
      );
      $form['size-min'] = array(
        '#type' => 'textfield',
        '#default_value' => isset($data['size-min']) ? $data['size-min'] : '10:12',
        '#title' => t('Min Font size'),
        '#description' => t('NOT YET BUILT: Down Auto-scaling font-size will not reduce beyond this value'),
        '#required' => TRUE,
      );
      $form['bind-box'] = array(
        '#type' => 'textfield',
        '#default_value' => isset($data['bind-box']) ? $data['bind-box'] : NULL,
        '#title' => t('Text binding box'),
        '#description' => t('Binding box inside which text will be embeded (ex. widthxheight). Some spill is possible as perfect placement is difficult to calculate'),
        '#required' => TRUE,
      );
      $form['angle'] = array(
        '#type' => 'textfield',
        '#title' => t('Text angle'),
        '#description' => t('The angle in degrees, with 0 degrees being left-to-right reading text. Higher values represent a counter-clockwise rotation. For example, a value of 90 would result in bottom-to-top reading text.'),
        '#default_value' => isset($data['angle']) ? $data['angle'] : 0,
        '#required' => TRUE,
      );

      $form['position'] = array(
        '#title' => t('Position'),
        '#description' => t('Specify watermark placement in target image. format: pos1[|pos2[|[pos3...]]]. ex: left_bottom|+10-20 . Possible values: +X+Y, left_top, center_top, right_top, left_center, center_center, right_center, left_bottom, center_bottom, right_bottom.'),
        '#type' => 'textfield',
        '#default_value' => !empty($data['position']) ? $data['position'] : NULL,
        '#required' => TRUE,
      );
      $form['h-align'] = array(
        '#title' => t('Horizontal align'),
        '#description' => t('Adds specified value to horizontal (x) coordinate after dynamic positioning is calculated. Allowing forcing a fixed offset.'),
        '#type' => 'textfield',
        '#default_value' => !empty($data['h-align']) ? $data['h-align'] : 0,
      );

      $form['center-in-box'] = array(
        '#type' => 'checkbox',
        '#title' => t('Center within binding box'),
        '#default_value' => isset($data['center-in-box']) ? $data['center-in-box'] : FALSE,
      );
      $form['stop'] = array(
        '#type' => 'checkbox',
        '#title' => t('Stop on success'),
        '#default_value' => isset($data['stop']) ? $data['stop'] : TRUE,
      );
      break;
  }

  return $form;
}

/**
 * Delegates image effect field handler.
 */
function delegate_field_effect_handler(&$image, $value, $field, $data, $result_row) {
  // dsm(func_get_args());
  // return;
  $handler = map_field_to_field_type($field);
  // dsm($field);
  // dsm($handler);
  switch ($handler) {
    case 'date':
      $text = format_date($value, $field['date_format']);
      return image_print_text_multiple_lines($image, $text, $data);
    case 'date_default':
      if (!is_numeric($value[0]['value'])) {
        $value[0]['value'] = strtotime($value[0]['value']);
      }
      $text = format_date($value[0]['value'], $field['settings']['format_type']);
      return image_print_text_multiple_lines($image, $text, $data);
    case 'image':
      return is_views_effect_image_handler($image, reset($value), $data);
    break;

    case 'text':
      return image_print_text_multiple_lines($image, $value, $data);
    case 'text_default':
      return image_print_text_multiple_lines($image, $value[0]['safe_value'], $data);

    break;

    case 'entityreference_label':
    case 'entityreference_entity_id':
    case 'entityreference_entity_view':
      return image_print_reference_field_fields($image, $value[0]['target_id'], $field, $data, $result_row);
    break;

  }
}

/**
 * Works with nodes only for now. damnit.
 */
function image_print_reference_field_fields($image, $entity_id, $views_field, $data, $result_row) {
  // dsm(func_get_args());
  list($name, $display_id) = explode('-', $data['view']);
  $view = views_get_view($name);
  $view->set_display($display_id);
  $view->execute($display_id);

  $fields = $view->get_items('field');

  // dsm($view);
  // dsm($fields);
  $node = node_load($entity_id);
  // dsm($node);
  foreach ($fields as $field_id => $field) {
    if (!isset($data['field'][$field_id])) {
      continue;
    }
    // dsm($field);
    $value = $node->{$field['id']}[LANGUAGE_NONE];
    // die();
    // $value = $view->field[$field_id]->get_value($view->result[0]);
    // return is_views_effect_image_handler($image, $value, $data);
    if (delegate_field_effect_handler($image, $value, $fields[$field_id], $data['field'][$field_id], array()) && $data['field'][$field_id]['stop']) {
      return;
    }
    // die();
  }
}

/**
 * Helper api.
 */
function map_field_to_field_type($field) {
  $handlers = views_fetch_data($field['table']);
  $handler = $handlers[$field['field']]['field']['handler'];
  // dsm($handler);
  // dsm($field);
  switch ($handler) {
    case 'views_handler_field_field':
      return $field['type'];
    case 'views_handler_field_user_name':
    case 'views_handler_field_node':
      return 'text';
    case 'views_handler_field_date':
      return 'date';
    case 'views_handler_field_boolean':
    case 'views_handler_field_counter':
    case 'views_handler_field_custom':
    case 'views_handler_field_entity':
    case 'views_handler_field':
    case 'views_handler_field_markup':
    case 'views_handler_field_math':
    case 'views_handler_field_numeric':
    case 'views_handler_field_prerender_list':
    case 'views_handler_field_serialized':
    case 'views_handler_field_time_interval':
    case 'views_handler_field_url':
      break;

    break;
    default:
      return NULL;
  }
}

/**
 * Helper api.
 */
function is_views_form_validate_fields($element, &$form_state, $form) {
  $submitted_fields = array_filter($form_state['values']['data']['fields']);
  // Disabling effect entirely.
  if ('none-none' == $form_state['values']['data']['view']) {
    if (!empty($submitted_fields)) {
      form_error($form['data']['fields'], t('Views embed view changed! You must deselect all fields and submit again to proceed.'));
    }
    else {
      form_set_value($form['data']['fields'], array(), $form_state);
      form_set_value($form['data']['field'], array(), $form_state);
    }
  }
  else {
    list($name, $display_id) = explode('-', $form_state['values']['data']['view']);

    $view = views_get_view($name);
    $view->set_display($display_id);
    $fields = $view->get_items('field');
    $diff = array_diff($submitted_fields, array_keys($fields));
    if (!empty($diff)) {
      // User changed view selection, fields no longer apply to the new
      // view. we must do hard abort.
      form_error($form['data']['fields'], t('Views embed fields changed! You must deselect all fields and submit again to proceed.'));
      // $form_state['rebuild'] = TRUE;
    }
    elseif (empty($submitted_fields)) {
      drupal_set_message(t('View selection changed or No fields selected in Views embed and needs to be reconfigured.'), 'warning');
      // form_set_value();  // Reset all configured fields.
    }
  }
}

/**
 * Callback handlings views emed effect.
 */
function is_views_effect(&$image, $data) {
  // dsm($image);
  $entity_id = drupal_static('ref_image_style_deliver');
  if (!empty($entity_id)) {
    $args = array($entity_id);
  }
  elseif (!empty($data['views_args'])) {
    $args = $data['views_args'];
  }
  else {
    $result = db_select('file_managed', 'f')
      ->fields('f', array('fid'))
      ->condition('uri', $image->source)
      ->execute()->fetchField();
    if (!$result || !($file = file_load($result))) {
      return;
    }

    if (!($list = file_usage_list($file)) || empty($list['file'])) {
      return;
    }

    foreach ($list['file'] as $entity_type => $entity_info) {
      $entity_ids = array_keys($entity_info);
      $entities = entity_load($entity_type, $entity_ids);
      if (!empty($entities)) {
        $entity = reset($entities);
        list($entity_id) = entity_extract_ids($entity_type, $entity);
        $args = array($entity_id);
        break;
      }
    }
  }

  if (empty($args)) {
    return;
  }


  list($name, $display_id) = explode('-', $data['view']);
  $view = views_get_view($name);
  $view->set_display($display_id);
  $view->pre_execute($args);
  $view->execute($display_id);

  $fields = $view->get_items('field');

  // dsm(func_get_args());
  // dsm($args);
  // dsm($fields);
  // dsm($view->result);
  foreach ($fields as $field_id => $field) {
    if (!isset($data['field'][$field_id])) {
      continue;
    }
    $handler = map_field_to_field_type($field);
    $value = $view->field[$field_id]->get_value($view->result[0]);
    if (delegate_field_effect_handler($image, $value, $fields[$field_id], $data['field'][$field_id], $view->result[0]) && $data['field'][$field_id]['stop']) {
      return;
    }
    // die();
  }
}

/**
 * Text handler.
 */
function is_views_effect_text_handler(&$image, $text, $data) {
  // dsm(func_get_args());
  list($max['size'], $max['line-height']) = explode(':', $data['size']);
  list($min['size'], $min['line-height']) = explode(':', $data['size-min']);
  list($bbox['width'], $bbox['height']) = explode('x', $data['bind-box']);
  $bbox += position_calculate_get($data['position'], $image->info['width'], $image->info['height'], $bbox['width'], $bbox['height']);
  $bbox['y'] += $bbox['height'];

  $lines = explode("\n", $text);
  return image_print_text_lines($image, $lines, $bbox, $max, $data['font'], NULL, $data);

  if (
    FALSE === ($color = imagecolorallocatealpha($image->resource, 0, 0, 0, 0)) ||
    !($tmp = image_gd_create_tmp($image, $image->info['width'], $image->info['height'])) ||
    !imagecopy($tmp, $image->resource, 0, 0, 0, 0, imagesx($image->resource), imagesy($image->resource)) ||
    !imagettftext($tmp, $max['size'], $data['angle'], $bbox['x'], $bbox['y'], $color, $data['font'], $text)
  ) {
    return;
  }
  imagedestroy($image->resource);
  $image->resource = $tmp;
  return TRUE;
}

/**
 * Helper function to write text in image.
 *
 * * Respects bounding box
 * * Wraps lines
 */
function image_print_text_multiple_lines(&$image, $text, $data) {
  // dsm(func_get_args());
  $color = imagecolorallocatealpha($image->resource, 0, 0, 0, 0);
  $lines = explode("\n", $text);
  foreach ($lines as $index => $line) {
    $lines[$index] = htmlspecialchars_decode($line);
  }
  // This fixes wrapping issue when there is no next line for popped
  // word from previous line to be added to.
  $lines[] = "";
  // Better would be to handle this automaticaly on per line basis.
  // however until we support mid-word line breaks using this trick
  // will cause infinite loop on words which are longer than entire
  // line (one word longer than entire line).
  list($max['size'], $max['line-height']) = explode(':', $data['size']);
  list($min['size'], $min['line-height']) = explode(':', $data['size-min']);
  list($bbox['width'], $bbox['height']) = explode('x', $data['bind-box']);
  $bbox += position_calculate_get($data['position'], $image->info['width'], $image->info['height'], $bbox['width'], $bbox['height']);
  $bbox['y'] += $bbox['height'];

  // Tracks stats about already-embeded text.
  $text = array('height' => 0);
  for ($index = 0; $index < count($lines); $index++) {
    $lines[$index] = trim($lines[$index]);
    $line = $lines[$index];
    // This will trim long lines to allowed boundary.
    do {
      // "Bug": Single word longer than allowed boundary width will
      // cause entire string to be empty.
      $xy = imagettfbbox($max['size'], 0, $data['font'], $line);
      $width = $xy[2] - $xy[0];
      $height = max($xy[1] - $xy[7], $max['line-height']);
      if ($width > $bbox['width']) {
        $words = explode(' ', $line);
        $last = array_pop($words);
        $line = implode(' ', $words);
        if (count($lines) > $index + 1) {
          $lines[$index + 1] = $last . ' ' . $lines[$index + 1];
        }
      }
    } while ($width > $bbox['width']);

    $text['height'] += $height;

    // $y = $bbox['y'];
    $y = $bbox['y'] + $text['height'];
    if (!empty($data['center-in-box'])) {
      // This is a hack to pad bounding box from left
      // so it does not overlap with voting widget.
      // Better solution would be to allow centering of bounding
      // box and padding bounding box independenty.
      $halign = isset($data['h-align']) ? $data['h-align'] : 0;
      $x = round($image->info['width'] / 2) - $width / 2 + $halign;
    }
    else {
      $x = $bbox['x'];
    }


    $xy = imagettftext($image->resource, $max['size'], 0, $x, $y, $color, $data['font'], $line);

    if ($bbox['height'] <= $text['height']) {
      // Wtf this doesn't break outter for loop ?
      break;
    }
  }

  return TRUE;
}

/**
 * Image field handler.
 */
function is_views_effect_image_handler(&$image, $file, $data) {
  if (!($source_image = image_load($file['uri']))) {
    return;
  }
  // dsm($source_image);
  if (!($style = image_style_load($data['scale']))) {
    return;
  }
  // dsm($style);
  if (!($derivative = get_watermark_derivative($style, $source_image->source))) {
    return;
  }
  // dsm($derivative);
  if (!($pos = position_calculate_get($data['position'], $image->info['width'], $image->info['height'], $derivative->info['width'], $derivative->info['height']))) {
    return;
  }
  // dsm($pos);
  if (!($tmp = image_gd_create_tmp($image, $image->info['width'], $image->info['height']))) {
    return;
  }
  // dsm($tmp);
  if (!imagecopy($tmp, $image->resource, 0, 0, 0, 0, imagesx($image->resource), imagesy($image->resource))) {
    return;
  }
  // dsm('whmm');
  if (!imagecopy($tmp, $derivative->resource, $pos['x'], $pos['y'], 0, 0, imagesx($derivative->resource), imagesy($derivative->resource))) {
    return;
  }
  // dsm('what');
  // Update image object.
  imagedestroy($image->resource);
  $image->resource = $tmp;
  return TRUE;
}

/**
 * Entity author effect.
 */
function is_parent_entity_author_effect(&$image, $data) {
  $result = db_select('file_managed', 'f')
    ->fields('f', array('fid'))
    ->condition('uri', $image->source)
    ->execute()->fetchField();
  if (!$result || !($file = file_load($result))) {
    return;
  }

  if (!($list = file_usage_list($file)) || empty($list['file'])) {
    return;
  }

  foreach ($list['file'] as $entity_type => $entity_info) {
    $entity_ids = array_keys($entity_info);
    $entities = entity_load($entity_type, $entity_ids);
  }

  if (!empty($entities)) {

    foreach ($entities as $entity) {
      if (!($parent = relation_get_related_entity('node', $entity->nid, 'parent_of'))) {
        return FALSE;
      }

      // First try to embed custom signature file if one such exist.
      if (
        ($profile = profile2_load_by_user($parent->uid, 'cartoonist_profile')) &&
        !empty($profile->field_img_sig[LANGUAGE_NONE][0]['fid']) &&
        ($img = image_load($profile->field_img_sig[LANGUAGE_NONE][0]['uri'])) &&
        ($style = image_style_load($data['img']['scale'])) &&
        ($derivative = get_watermark_derivative($style, $img->source)) &&
        ($pos = position_calculate_get($data['img']['img-position'], $image->info['width'], $image->info['height'], $derivative->info['width'], $derivative->info['height'])) &&
        ($tmp = image_gd_create_tmp($image, $image->info['width'], $image->info['height'])) &&
        imagecopy($tmp, $image->resource, 0, 0, 0, 0, imagesx($image->resource), imagesy($image->resource)) &&
        imagecopy($tmp, $derivative->resource, $pos['x'], $pos['y'], 0, 0, imagesx($derivative->resource), imagesy($derivative->resource))
      ) {
        // Update image object.
        imagedestroy($image->resource);
        $image->resource = $tmp;
      }
      else {
        // Fallback to using author user name as signature when no
        // image uploaded on own profile.
        // Prepare variables.
        list($max['size'], $max['line-height']) = explode(':', $data['text']['size']);
        list($min['size'], $min['line-height']) = explode(':', $data['text']['size-min']);
        list($bbox['width'], $bbox['height']) = explode('x', $data['text']['bind-box']);
        $bbox += position_calculate_get($data['text']['position'], $image->info['width'], $image->info['height'], $bbox['width'], $bbox['height']);
        $bbox['y'] += $bbox['height'];
        if (
          !($author = user_load($parent->uid)) ||
          FALSE === ($color = imagecolorallocatealpha($image->resource, 0, 0, 0, 0)) ||
          !($tmp = image_gd_create_tmp($image, $image->info['width'], $image->info['height'])) ||
          !imagecopy($tmp, $image->resource, 0, 0, 0, 0, imagesx($image->resource), imagesy($image->resource)) ||
          !imagettftext($tmp, $max['size'], $data['text']['angle'], $bbox['x'], $bbox['y'], $color, $data['text']['font'], $author->name)
        ) {
          return;
        }
        imagedestroy($image->resource);
        $image->resource = $tmp;
      }

      // Only print first found entity's author.
      break;
    }
  }
}

/**
 * Author effect form.
 */
function is_parent_entity_author_form($data) {
  $form = array();
  $form['text'] = array(
    '#type' => 'fieldset',
    '#title' => t('Text signature settings'),
  );
  $form['text']['font'] = array(
    '#type' => 'textfield',
    '#default_value' => isset($data['text']['font']) ? $data['text']['font'] : NULL,
    '#title' => t('Font file'),
    '#description' => t('Full path to font file to be used for embedding text'),
    '#required' => TRUE,
  );
  $form['text']['size'] = array(
    '#type' => 'textfield',
    '#default_value' => isset($data['text']['size']) ? $data['text']['size'] : '15:18',
    '#title' => t('Font size'),
    '#description' => t('Text embeded using this size. (font size:line-height)'),
    '#required' => TRUE,
  );
  $form['text']['size-min'] = array(
    '#type' => 'textfield',
    '#default_value' => isset($data['text']['size-min']) ? $data['text']['size-min'] : '10:12',
    '#title' => t('Min Font size'),
    '#description' => t('NOT YET BUILT: Down Auto-scaling font-size will not reduce beyond this value'),
    '#required' => TRUE,
  );
  $form['text']['bind-box'] = array(
    '#type' => 'textfield',
    '#default_value' => isset($data['text']['bind-box']) ? $data['text']['bind-box'] : NULL,
    '#title' => t('Text binding box'),
    '#description' => t('Binding box inside which text will be embeded (ex. widthxheight). Some spill is possible as perfect placement is difficult to calculate'),
    '#required' => TRUE,
  );
  $form['text']['angle'] = array(
    '#type' => 'textfield',
    '#title' => t('Text angle'),
    '#description' => t('The angle in degrees, with 0 degrees being left-to-right reading text. Higher values represent a counter-clockwise rotation. For example, a value of 90 would result in bottom-to-top reading text.'),
    '#default_value' => isset($data['text']['angle']) ? $data['text']['angle'] : 0,
    '#required' => TRUE,
  );
  $form['text']['position'] = array(
    '#title' => t('Text author name Position'),
    '#description' => t('Specify watermark placement in target image. format: pos1[|pos2[|[pos3...]]]. ex: left_bottom|+10-20 . Possible values: +X+Y, left_top, center_top, right_top, left_center, center_center, right_center, left_bottom, center_bottom, right_bottom.'),
    '#type' => 'textfield',
    '#default_value' => !empty($data['text']['position']) ? $data['text']['position'] : NULL,
    '#required' => TRUE,
  );

  $form['img'] = array(
    '#type' => 'fieldset',
    '#title' => t('Image signature settings'),
  );
  $styles = image_styles();
  $options = array();
  foreach ($styles as $style) {
    $options[$style['name']] = $style['name'];
  }
  $form['img']['scale'] = array(
    '#title' => t('Watermark style'),
    '#description' => t('Apply image style to watermark to change watermark dimensions before using it on target image.'),
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => !empty($data['img']['scale']) ? $data['img']['scale'] : NULL,
  );

  $form['img']['img-position'] = array(
    '#title' => t('Image signature Position'),
    '#description' => t('Specify watermark placement in target image. format: pos1[|pos2[|[pos3...]]]. ex: left_bottom|+10-20 . Possible values: +X+Y, left_top, center_top, right_top, left_center, center_center, right_center, left_bottom, center_bottom, right_bottom.'),
    '#type' => 'textfield',
    '#default_value' => !empty($data['img']['img-position']) ? $data['img']['img-position'] : NULL,
    '#required' => TRUE,
  );
  return $form;
}

/**
 * Author effect.
 */
function is_entity_author_effect(&$image, $data) {
  $result = db_select('file_managed', 'f')
    ->fields('f', array('fid'))
    ->condition('uri', $image->source)
    ->execute()->fetchField();
  if (!$result || !($file = file_load($result))) {
    return;
  }

  if (!($list = file_usage_list($file)) || empty($list['file'])) {
    return;
  }

  foreach ($list['file'] as $entity_type => $entity_info) {
    $entity_ids = array_keys($entity_info);
    $entities = entity_load($entity_type, $entity_ids);
  }

  if (!empty($entities)) {
    // Prepare variables.
    list($max['size'], $max['line-height']) = explode(':', $data['size']);
    list($min['size'], $min['line-height']) = explode(':', $data['size-min']);
    list($bbox['width'], $bbox['height']) = explode('x', $data['bind-box']);
    $bbox += position_calculate_get($data['position'], $image->info['width'], $image->info['height'], $bbox['width'], $bbox['height']);
    $bbox['y'] += $bbox['height'];

    foreach ($entities as $entity) {
      $author = user_load($entity->uid);
      if (
        FALSE === ($color = imagecolorallocatealpha($image->resource, 0, 0, 0, 0)) ||
        !($tmp = image_gd_create_tmp($image, $image->info['width'], $image->info['height'])) ||
        !imagecopy($tmp, $image->resource, 0, 0, 0, 0, imagesx($image->resource), imagesy($image->resource)) ||
        !imagettftext($tmp, $max['size'], $data['angle'], $bbox['x'], $bbox['y'], $color, $data['font'], $author->name)
      ) {
        return;
      }
      imagedestroy($image->resource);
      $image->resource = $tmp;
      // Only print first found entity's author.
      break;
    }
  }

}

/**
 * Author effect form.
 */
function is_entity_author_form($data) {
  $form = array();
  $form['font'] = array(
    '#type' => 'textfield',
    '#default_value' => isset($data['font']) ? $data['font'] : NULL,
    '#title' => t('Font file'),
    '#description' => t('Full path to font file to be used for embedding text'),
    '#required' => TRUE,
  );
  $form['size'] = array(
    '#type' => 'textfield',
    '#default_value' => isset($data['size']) ? $data['size'] : '15:18',
    '#title' => t('Font size'),
    '#description' => t('Text embeded using this size. (font size:line-height)'),
    '#required' => TRUE,
  );
  $form['size-min'] = array(
    '#type' => 'textfield',
    '#default_value' => isset($data['size-min']) ? $data['size-min'] : '10:12',
    '#title' => t('Min Font size'),
    '#description' => t('NOT YET BUILT: Down Auto-scaling font-size will not reduce beyond this value'),
    '#required' => TRUE,
  );
  $form['bind-box'] = array(
    '#type' => 'textfield',
    '#default_value' => isset($data['bind-box']) ? $data['bind-box'] : NULL,
    '#title' => t('Text binding box'),
    '#description' => t('Binding box inside which text will be embeded (ex. widthxheight). Some spill is possible as perfect placement is difficult to calculate'),
    '#required' => TRUE,
  );
  $form['angle'] = array(
    '#type' => 'textfield',
    '#title' => t('Text angle'),
    '#description' => t('The angle in degrees, with 0 degrees being left-to-right reading text. Higher values represent a counter-clockwise rotation. For example, a value of 90 would result in bottom-to-top reading text.'),
    '#default_value' => isset($data['angle']) ? $data['angle'] : 0,
    '#required' => TRUE,
  );

  $form['position'] = array(
    '#title' => t('Position'),
    '#description' => t('Specify watermark placement in target image. format: pos1[|pos2[|[pos3...]]]. ex: left_bottom|+10-20 . Possible values: +X+Y, left_top, center_top, right_top, left_center, center_center, right_center, left_bottom, center_bottom, right_bottom.'),
    '#type' => 'textfield',
    '#default_value' => !empty($data['position']) ? $data['position'] : NULL,
    '#required' => TRUE,
  );
  return $form;
}

/**
 * Author effect.
 */
function is_watermark_effect(&$image, $data) {
  if (
    // I suspect some one will hate me for this...
    // Justification is that currently we do not log failed image
    // effect events, thus just handling failure gracefuly is enough.
    !($watermark_file = file_load($data['file']['fid'])) ||
    !($watermark_image = image_load($watermark_file->uri)) ||
    !($style = image_style_load($data['scale'])) ||
    !($derivative = get_watermark_derivative($style, $watermark_image->source)) ||
    !($pos = position_calculate_get($data['position'], $image->info['width'], $image->info['height'], $derivative->info['width'], $derivative->info['height'])) ||
    !($tmp = image_gd_create_tmp($image, $image->info['width'], $image->info['height'])) ||
    !imagecopy($tmp, $image->resource, 0, 0, 0, 0, imagesx($image->resource), imagesy($image->resource)) ||
    !imagecopy($tmp, $derivative->resource, $pos['x'], $pos['y'], 0, 0, imagesx($derivative->resource), imagesy($derivative->resource))
  ) {
    return;
  }

  // Update image object.
  imagedestroy($image->resource);
  $image->resource = $tmp;
}

/**
 * Calculates positioning based.
 */
function position_calculate_get($position, $dw, $dh, $sw, $sh) {
  $xy = array('x' => 0, 'y' => 0);
  $steps = explode('|', $position);
  foreach ($steps as $step) {
    $step = trim($step);
    switch ($step) {
      case 'left_top':
        // Do nothing. top, left is default at 0,0
        break;

      case 'center_top':
        $xy['x'] = ($dw / 2 - $sw / 2);
        break;

      case 'right_top':
        $xy['x'] = ($dw - $sw);
        break;

      case 'left_center':
        $xy['y'] = ($dh / 2 - $sh / 2);
        break;

      case 'center_center':
        $xy['y'] = ($dh / 2 - $sh / 2);
        $xy['x'] = ($dw / 2 - $sw / 2);
        break;

      case 'right_center':
        $xy['y'] = ($dh / 2 - $sh / 2);
        $xy['x'] = ($dw - $sw);
        break;

      case 'left_bottom':
        $xy['y'] = ($dh - $sh);
        break;

      case 'center_bottom':
        $xy['y'] = ($dh - $sh);
        $xy['x'] = ($dw / 2 - $sw / 2);
        break;

      case 'right_bottom':
        $xy['y'] = ($dh - $sh);
        $xy['x'] = ($dw - $sw);
        break;

      default:
        // Then format must be +x+y (or variation of -/+ on either side).
        if (!preg_match_all('/[-+]\d+/', $step, $matches) || 2 != count($matches[0])) {
          // Exit on first error.
          break;

        }
        $xy['x'] += $matches[0][0];
        $xy['y'] += $matches[0][1];
    }
  }

  return $xy;
}

/**
 * Allow us generating derivative from original watermark image.
 */
function get_watermark_derivative($style, $image_uri) {
  $derivative_uri = image_style_path($style['name'], $image_uri);
  // Don't start generating the image if the derivative already exists or if
  // generation is in progress in another thread.
  $lock_name = 'image_style_deliver:' . $style['name'] . ':' . drupal_hash_base64($image_uri);
  if (!file_exists($derivative_uri)) {
    $lock_acquired = lock_acquire($lock_name);
    if (!$lock_acquired) {
      // Tell client to retry again in 3 seconds. Currently no
      // browsers are known to support Retry-After.
      drupal_add_http_header('Status', '503 Service Unavailable');
      drupal_add_http_header('Retry-After', 3);
      print t('Image generation in progress. Try again shortly.');
      drupal_exit();
    }
  }

  // Try to generate the image, unless another thread just did it while we were
  // acquiring the lock.
  $success = file_exists($derivative_uri) || image_style_create_derivative($style, $image_uri, $derivative_uri);

  if (!empty($lock_acquired)) {
    lock_release($lock_name);
  }

  if ($success) {
    $image = image_load($derivative_uri);
    return $image;
  }
  else {
    return FALSE;
  }
}

/**
 * Watermark effect form.
 */
function is_watermark_form($data) {
  $form['file'] = array(
    '#type' => 'managed_file',
    '#title' => t('Watermark file'),
    '#description' => t('Upload file which will be used for Watermark.'),
    '#element_validate' => array('is_watermark_file_validate'),
    '#default_value' => !empty($data['file']['fid']) ? $data['file']['fid'] : NULL,
    '#required' => TRUE,
    '#upload_location' => 'public://watermarks',
  );
  $styles = image_styles();
  $options = array();
  foreach ($styles as $style) {
    $options[$style['name']] = $style['name'];
  }
  $form['scale'] = array(
    '#title' => t('Watermark style'),
    '#description' => t('Apply image style to watermark to change watermark dimensions before using it on target image.'),
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => !empty($data['scale']) ? $data['scale'] : NULL,
  );

  $form['position'] = array(
    '#title' => t('Position'),
    '#description' => t('Specify watermark placement in target image. format: pos1[|pos2[|[pos3...]]]. ex: left_bottom|+10-20 . Possible values: +X+Y, left_top, center_top, right_top, left_center, center_center, right_center, left_bottom, center_bottom, right_bottom.'),
    '#type' => 'textfield',
    '#default_value' => !empty($data['position']) ? $data['position'] : NULL,
    '#required' => TRUE,
  );

  return $form;
}

/**
 * Make sure image we uploaded is stored permanently in db.
 *
 * This callback is effectively a hack, because image style
 * forms are not handled like real forms, thus i cannot use
 * hook_form_alter, or $form['#submit'] etc. must resort to
 * #element_validate to inject own behavior handling function.
 */
function is_watermark_file_validate($element, &$form_state, $form) {
  $clicked_button = end($form_state['triggering_element']['#parents']);
  if ($clicked_button == 'remove_button' && empty($form_state['is_file_remove']) && !empty($element['#value'])) {
    // Make sure we store the original file that we had. This helps persist
    // among multiple remove/upload/remove/upload/remove/upload/Update style.
    // Allowing us to perform cleanup at the end
    // (ie, setting file to temporary, for deletion).
    $form_state['is_file_remove'] = $form_state['values']['data']['file'];
  }

  if ('submit' == $clicked_button) {
    if (!empty($form_state['is_file_remove']['fid']) && ($delete_file = file_load($form_state['is_file_remove']['fid'])) && $delete_file->status) {
      // Make file temporary, it will be deleted during some cron run.
      $delete_file->status = 0;
      file_save($delete_file);
      image_path_flush($delete_file->uri);
    }
    if ($file = file_load($element['#value']['fid'])) {
      if (!$file->status) {
        $file->status = FILE_STATUS_PERMANENT;
        file_save($file);
      }
      image_path_flush($file->uri);
    }
  }
}

