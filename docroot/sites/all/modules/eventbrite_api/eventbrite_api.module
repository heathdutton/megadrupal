<?php

/**
 * @file
 * Provides the main hooks and functionality for the Eventbrite module.
 */

/**
 * Implements hook_init().
 */
function eventbrite_api_init() {
  // Globally load the Eventbrite class.
  $eventbrite = libraries_load('eventbrite');
  // Load "global" functions.
  $functions = module_load_include('inc', 'eventbrite_api', 'includes/eventbrite_api.functions');
}

/**
 * Implements hook_libraries_info().
 */
function eventbrite_api_libraries_info() {
  $libraries['eventbrite'] = array(
    'name' => 'eventbrite.php',
    'vendor url' => 'https://github.com/ryanjarvinen/eventbrite.php',
    'download url' => 'https://raw.github.com/ryanjarvinen/eventbrite.php/master/Eventbrite.php',
    // There isn't a version number anywhere to be found, so we have to hardcode this.
    'version' => 1,
    'files' => array(
      'php' => array(
        'eventbrite.php',
      ),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_menu().
 */
function eventbrite_api_menu() {
  $items = array();
  $path = 'admin/eventbrite';
  // Top level Eventbrite container.
  $items[$path] = array(
    'title' => 'Eventbrite',
    'description' => 'Administer Eventbrite data.',
    'page callback' => 'system_admin_menu_block_page',
    'access callback' => 'eventbrite_api_access',
    'access arguments' => array('all'),
    'file path' => drupal_get_path('module', 'system'),
    'file' => 'system.admin.inc',
    'weight' => -7,
  );
  // Intermediate path ['admin/eventbrite/event'] is handled by a view.
  // Add an event.
  $items[$path . '/event/add'] = array(
    'title' => 'Add an event',
    'page callback' => 'event_add_wrapper',
    'access callback' => 'eventbrite_api_access',
    'access arguments' => array('all'),
    'file path' => drupal_get_path('module', 'eventbrite_api') . '/includes',
    'file' => 'eventbrite_api.forms.inc',
  );
  // Edit an event.
  $items[$path . '/event/%event'] = array(
    'title' => 'Edit an event',
    'page callback' => 'event_edit_wrapper',
    'page arguments' => array(3),
    'access callback' => 'eventbrite_api_access',
    'access arguments' => array('all'),
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file path' => drupal_get_path('module', 'eventbrite_api') . '/includes',
    'file' => 'eventbrite_api.forms.inc',
  );
  $items[$path . '/event/%event/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  // Delete an event.
  $items[$path . '/event/%event/delete'] = array(
    'title' => 'Delete an event',
    'page callback' => 'event_delete_wrapper',
    'page arguments' => array(3),
    'access callback' => 'eventbrite_api_access',
    'access arguments' => array('all'),
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file path' => drupal_get_path('module', 'eventbrite_api') . '/includes',
    'file' => 'eventbrite_api.forms.inc',
  );
  // Intermediate path ['admin/eventbrite/organizer'] is handled by a view.
  // Add an organizer.
  $items[$path . '/organizer/add'] = array(
    'title' => 'Add an organizer',
    'page callback' => 'organizer_add_wrapper',
    'access callback' => 'eventbrite_api_access',
    'access arguments' => array('all'),
    'file path' => drupal_get_path('module', 'eventbrite_api') . '/includes',
    'file' => 'eventbrite_api.forms.inc',
  );
  // Edit an organizer.
  $items[$path . '/organizer/%organizer'] = array(
    'title' => 'Edit an organizer',
    'page callback' => 'organizer_edit_wrapper',
    'page arguments' => array(3),
    'access callback' => 'eventbrite_api_access',
    'access arguments' => array('all'),
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file path' => drupal_get_path('module', 'eventbrite_api') . '/includes',
    'file' => 'eventbrite_api.forms.inc',
  );
  $items[$path . '/organizer/%organizer/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  // Delete an organizer.
  $items[$path . '/organizer/%organizer/delete'] = array(
    'title' => 'Delete an organizer',
    'page callback' => 'organizer_delete_wrapper',
    'page arguments' => array(3),
    'access callback' => 'eventbrite_api_access',
    'access arguments' => array('all'),
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file path' => drupal_get_path('module', 'eventbrite_api') . '/includes',
    'file' => 'eventbrite_api.forms.inc',
  );
  // Intermediate path ['admin/eventbrite/ticket'] is handled by a view.
  // Add a ticket.
  $items[$path . '/ticket/add'] = array(
    'title' => 'Add a ticket',
    'page callback' => 'ticket_add_wrapper',
    'access callback' => 'eventbrite_api_access',
    'access arguments' => array('all'),
    'file path' => drupal_get_path('module', 'eventbrite_api') . '/includes',
    'file' => 'eventbrite_api.forms.inc',
  );
  // Edit a ticket.
  $items[$path . '/ticket/%ticket'] = array(
    'title' => 'Edit a ticket',
    'page callback' => 'ticket_edit_wrapper',
    'page arguments' => array(3),
    'access callback' => 'eventbrite_api_access',
    'access arguments' => array('all'),
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file path' => drupal_get_path('module', 'eventbrite_api') . '/includes',
    'file' => 'eventbrite_api.forms.inc',
  );
  $items[$path . '/ticket/%ticket/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  // Delete a ticket.
  $items[$path . '/ticket/%ticket/delete'] = array(
    'title' => 'Delete a ticket',
    'page callback' => 'ticket_delete_wrapper',
    'page arguments' => array(3),
    'access callback' => 'eventbrite_api_access',
    'access arguments' => array('all'),
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file path' => drupal_get_path('module', 'eventbrite_api') . '/includes',
    'file' => 'eventbrite_api.forms.inc',
  );
  // Clone a ticket.
  $items[$path . '/ticket/%ticket/clone'] = array(
    'title' => 'Clone a ticket',
    'page callback' => 'ticket_clone_wrapper',
    'page arguments' => array(3),
    'access callback' => 'eventbrite_api_access',
    'access arguments' => array('all'),
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file path' => drupal_get_path('module', 'eventbrite_api') . '/includes',
    'file' => 'eventbrite_api.forms.inc',
  );
  // Intermediate path ['admin/eventbrite/venue'] is handled by a view.
  // Add a venue.
  $items[$path . '/venue/add'] = array(
    'title' => 'Add a venue',
    'page callback' => 'venue_add_wrapper',
    'access callback' => 'eventbrite_api_access',
    'access arguments' => array('all'),
    'file path' => drupal_get_path('module', 'eventbrite_api') . '/includes',
    'file' => 'eventbrite_api.forms.inc',
  );
  // Edit a venue.
  $items[$path . '/venue/%venue'] = array(
    'title' => 'Edit a venue',
    'page callback' => 'venue_edit_wrapper',
    'page arguments' => array(3),
    'access callback' => 'eventbrite_api_access',
    'access arguments' => array('all'),
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file path' => drupal_get_path('module', 'eventbrite_api') . '/includes',
    'file' => 'eventbrite_api.forms.inc',
  );
  $items[$path . '/venue/%venue/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  // Delete a venue.
  $items[$path . '/venue/%venue/delete'] = array(
    'title' => 'Delete a venue',
    'page callback' => 'venue_delete_wrapper',
    'page arguments' => array(3),
    'access callback' => 'eventbrite_api_access',
    'access arguments' => array('all'),
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file path' => drupal_get_path('module', 'eventbrite_api') . '/includes',
    'file' => 'eventbrite_api.forms.inc',
  );
  // View an attendee.
  $items[$path . '/attendee/%attendee'] = array(
    'title' => 'View an attendee',
    'page callback' => 'attendee_view',
    'page arguments' => array(3),
    'access callback' => 'eventbrite_api_access',
    'access arguments' => array('all'),
    'file path' => drupal_get_path('module', 'eventbrite_api') . '/includes',
    'file' => 'eventbrite_api.forms.inc',
  );
  $items[$path . '/attendee/%attendee/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  // Config page.
  $items['admin/eventbrite/config'] = array(
    'title' => 'Configuration',
    'description' => 'Configure settings for Eventbrite.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('eventbrite_api_config_form'),
    'access callback' => 'eventbrite_api_access',
    'access arguments' => array('all'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/eventbrite_api.forms.inc',
    'weight' => 50,
  );
  // Ticket form organizer autocomplete.
  $items['eventbrite/event/autocomplete'] = array(
    'page callback' => '_eventbrite_event_autocomplete',
    'access callback' => 'eventbrite_api_access',
    'access arguments' => array('all'),
    'type' => MENU_CALLBACK
  );
  // Event form organizer autocomplete.
  $items['eventbrite/organizer/autocomplete'] = array(
    'page callback' => '_eventbrite_organizer_autocomplete',
    'access callback' => 'eventbrite_api_access',
    'access arguments' => array('all'),
    'type' => MENU_CALLBACK
  );
  // Event form venue autocomplete.
  $items['eventbrite/venue/autocomplete'] = array(
    'page callback' => '_eventbrite_venue_autocomplete',
    'access callback' => 'eventbrite_api_access',
    'access arguments' => array('all'),
    'type' => MENU_CALLBACK
  );
  return $items;
}

/**
 * Implements hook_entity_info().
 */
function eventbrite_api_entity_info() {
  $entities = array(
    'event' => array(
      'label' => t('Event'),
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIController',
      'base table' => 'eventbrite_api_events',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'eid',
        'label' => 'title',
      ),
      'static cache' => TRUE,
      'load hook' => 'event_load',
    ),
    'organizer' => array(
      'label' => t('Organizer'),
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIController',
      'base table' => 'eventbrite_api_organizers',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'oid',
        'label' => 'name',
      ),
      'static cache' => TRUE,
      'load hook' => 'organizer_load',
    ),
    'ticket' => array(
      'label' => t('Ticket'),
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIController',
      'base table' => 'eventbrite_api_tickets',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'tid',
        'label' => 'name',
      ),
      'static cache' => TRUE,
    ),
    'venue' => array(
      'label' => t('Venue'),
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIController',
      'base table' => 'eventbrite_api_venues',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'vid',
        'label' => 'name',
      ),
      'static cache' => TRUE,
    ),
    'attendee' => array(
      'label' => t('Attendee'),
      'entity class' => 'Entity',
      'controller class' => 'EventbriteApiAttendeesController',
      'base table' => 'eventbrite_api_attendees',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'aid',
        'label' => 'aid',
      ),
      'static cache' => TRUE,
      'load hook' => 'attendee_load',
    ),
  );
  return $entities;
}

/**
 * Implements hook_views_api().
 */
function eventbrite_api_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'eventbrite_api') . '/views',
  );
}

/**
 * Implements hook_permission().
 */
function eventbrite_api_permission() {
  $permissions = array(
    'administer eventbrite' => array(
      'title' => t('administer eventbrite'),
      'description' => t('Edit and delete all events'),
    ),
  );
  return $permissions;
}

/**
 * Implements hook_theme().
 */
function eventbrite_api_theme($existing, $type, $theme, $path) {
  return array(
    'attendee' => array(
      'template' => 'attendee',
      'path' => drupal_get_path('module', 'eventbrite_api') . '/theme',
    ),
  );
}

/**
 * Access callback.
 */
function eventbrite_api_access($op, $account = NULL) {
  global $user;
  if (empty($account)) {
    $account = $user;
  }
  $perm = 'administer eventbrite';
  if (user_access($perm, $account)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_field_create_field().
 *
 * See _eventbrite_api_alter_field().
 */
function eventbrite_api_field_create_field($field) {
  _eventbrite_api_alter_field($field);
}

/**
 * Implements hook_field_update_field().
 *
 * See _eventbrite_api_alter_field().
 */
function eventbrite_api_field_update_field($field, $prior_field, $has_data) {
  module_load_include('inc', 'eventbrite_api',' includes/eventbrite_api.functions');
  _eventbrite_api_alter_field($field);
}

/**
 * Loads an event by the event ID.
 */
function event_load($eid = NULL, $reset = FALSE) {
  $eids = (isset($eid) ? array($eid) : array());
  $event = event_load_multiple($eids, $reset);
  return $event ? reset($event) : FALSE;
}

/**
 * Loads multiple events by ID or based on a set of matching conditions.
 *
 * @see entity_load()
 *
 * @param $eids
 *   An array of event IDs.
 * @param $conditions
 *   An array of conditions on the {eventbrite_api_events} table in the form
 *     'field' => $value.
 * @param $reset
 *   Whether to reset the internal event loading cache.
 *
 * @return
 *   An array of event objects indexed by eid.
 */
function event_load_multiple($eids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('event', $eids, $conditions, $reset);
}

/**
 * Loads an event by the organizer ID.
 */
function organizer_load($oid = NULL, $reset = FALSE) {
  $oids = (isset($oid) ? array($oid) : array());
  $organizer = organizer_load_multiple($oids, $reset);
  return $organizer ? reset($organizer) : FALSE;
}

/**
 * Loads multiple organizers by ID or based on a set of matching conditions.
 *
 * @see entity_load()
 *
 * @param $oids
 *   An array of organzer IDs.
 * @param $conditions
 *   An array of conditions on the {eventbrite_api_organizers} table in the form
 *     'field' => $value.
 * @param $reset
 *   Whether to reset the internal organizer loading cache.
 *
 * @return
 *   An array of organizer objects indexed by oid.
 */
function organizer_load_multiple($oids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('organizer', $oids, $conditions, $reset);
}

/**
 * Loads an event by the ticket ID.
 */
function ticket_load($tid = NULL, $reset = FALSE) {
  $tids = (isset($tid) ? array($tid) : array());
  $ticket = ticket_load_multiple($tids, $reset);
  return $ticket ? reset($ticket) : FALSE;
}

/**
 * Loads multiple tickets by ID or based on a set of matching conditions.
 *
 * @see entity_load()
 *
 * @param $tids
 *   An array of ticket IDs.
 * @param $conditions
 *   An array of conditions on the {eventbrite_api_tickets} table in the form
 *     'field' => $value.
 * @param $reset
 *   Whether to reset the internal ticket loading cache.
 *
 * @return
 *   An array of organizer objects indexed by tid.
 */
function ticket_load_multiple($tids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('ticket', $tids, $conditions, $reset);
}

/**
 * Loads an event by the venue ID.
 */
function venue_load($vid = NULL, $reset = FALSE) {
  $vids = (isset($vid) ? array($vid) : array());
  $venue = venue_load_multiple($vids, $reset);
  return $venue ? reset($venue) : FALSE;
}

/**
 * Loads multiple venues by ID or based on a set of matching conditions.
 *
 * @see entity_load()
 *
 * @param $vids
 *   An array of venue IDs.
 * @param $conditions
 *   An array of conditions on the {eventbrite_api_venues} table in the form
 *     'field' => $value.
 * @param $reset
 *   Whether to reset the internal venue loading cache.
 *
 * @return
 *   An array of organizer objects indexed by vid.
 */
function venue_load_multiple($vids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('venue', $vids, $conditions, $reset);
}

/**
 * Loads an event by the attendee ID.
 */
function attendee_load($aid = NULL, $reset = FALSE) {
  $aids = (isset($aid) ? array($aid) : array());
  $attendee = attendee_load_multiple($aids, $reset);
  return $attendee ? reset($attendee) : FALSE;
}

/**
 * Loads multiple attendees by ID or based on a set of matching conditions.
 *
 * @see entity_load()
 *
 * @param $aids
 *   An array of attendee IDs.
 * @param $conditions
 *   An array of conditions on the {eventbrite_api_attendees} table in the form
 *     'field' => $value.
 * @param $reset
 *   Whether to reset the internal attendee loading cache.
 *
 * @return
 *   An array of organizer objects indexed by aid.
 */
function attendee_load_multiple($aids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('attendee', $aids, $conditions, $reset);
}

/**
 * Implementation hook_help() for eventbrite_api.
 *
 * Function eventbrite_api_help
 * Display the Readme file in the drupal help pages.
 *
 * @param string $path
 *   the current help menu path
 * @param array $arg
 *   An array of arguments
 *
 * @return string
 *   the output of the REAMDE.txt file
 */
function eventbrite_api_help($path, $arg) {
  switch ($path) {
    case 'admin/help#eventbrite_api':
      $output = file_get_contents(drupal_get_path('module', 'eventbrite_api') . '/README.txt');
      return module_exists('markdown') ? filter_xss_admin(module_invoke('markdown', 'filter', 'process', 0, -1, $output)) : '<pre>' . check_plain($output) . '</pre>';
  }
}

/**
 * Implements hook_cron().
 * Run any scheduled tasks.
 */
function eventbrite_api_cron() {
  // Do we want to run Eventbrite with cron?
  if (variable_get('eventbrite_api_cron_import', 0)) {
    // Check to make sure we actually have the necessary keys.
    if (variable_get('eventbrite_api_userkey', '') && variable_get('eventbrite_api_appkey', '')) {
      // Check that enough time has past since the last cron run
      if (time() > variable_get('eventbrite_api_cron_time', 0)) {
        eventbrite_api_import_all();
        variable_set('eventbrite_api_cron_time', time() + variable_get('eventbrite_api_cron_delay', 360));
      }
    }
  }
}

/**
 * Display an attendee on the front end.
 */
function attendee_view($attendee) {
  // Strip the first 6 keys, as they're not needed.
  $attendee = array_slice((array) $attendee, 6);
  // Add the attendees array as a keyed array.
  $attendee = array('attendee' => $attendee);
  return theme('attendee', $attendee);
}
