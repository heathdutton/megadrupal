<?php

/**
 * @file
 * Hooks implementations for d3map_views.
 */

/**
 * Implements hook_views_api().
 */
function d3map_views_views_api() {
  return array('api' => 3);
}

/**
 * Implements hook_theme
 */
function d3map_views_theme($existing, $type, $theme, $path) {
  $theme = array();

  $theme['d3map_views_map'] = array(
    'variables' => array('height' => '500px', 'width' => '970px'),
    'template' => 'd3map-views-map',
  );

  return $theme;
}

/**
 * Returns the d3 include path from loading the D3 library and scanning for
 * an include file. It looks for d3.js, d3.min.js or d3.vXXX.js in the D3
 * library directory.
 */
function d3map_views_d3_include_path() {
	// Path to library, (if installed).
	$path = libraries_get_path('d3');

	if ($path) {
		$files = array();
		// In the repository the files might me named d3.js and d3.min.js.
		$files += file_scan_directory($path, '/d3.js|d3.min.js/');
		// They could also have the version # in the file name.
	    $files += file_scan_directory($path, '/d3.v[0-9](.min)?.js/');

		// If we don't have any files we shouldn't add the library at all.
		if (count($files) != 0) {
			$file = array_shift($files);
			return $file;
		}
	}
}

/**
 * Ensures the D3 library exists as a module requirement as it's needed for
 * this module to display a D3 map
 */
function d3map_views_requirements($phase) {
  $requirements = array();
  // Ensure translations do not break at install time
  $t = get_t();

  $requirements['d3map_views'] = array(
    'title' => $t('D3 Library'),
  );

  $libraries = libraries_get_libraries();
  if (isset($libraries['d3'])) {
    $requirements['d3map_views']['value'] = $t('Installed');
    $requirements['d3map_views']['severity'] = REQUIREMENT_OK;
  }
  else {
    $requirements['d3map_views']['value'] = $t('Not Installed');
    $requirements['d3map_views']['severity'] = REQUIREMENT_ERROR;
    $requirements['d3map_views']['description'] = $t('Please install the D3 library %url.', array('%url' => 'http://d3js.org'));
  }

  return $requirements;
}