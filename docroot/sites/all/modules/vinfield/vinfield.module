<?php
/**
 * @file
 * A field type for Vehicle Identification Numbers (VIN) that validates
 * that the VIN is well-formed and meets length, character set and check-digit
 * requirements.
 */

/**
 * Implements hook_permission
 */
function vinfield_permission() {
  return array(
    'administer vinfield' => array(
      'title' => t('Administer VIN Field'),
      'description' => t('Perform administration tasks related to global field settings, provider config, etc'),
    ),
  );
}

/**
 * Implements hook_menu
 */
function vinfield_menu() {
  $items = array();

  // Set up our top-level admin menu
  $items['admin/config/content/vinfield'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => 'VIN Field',
    'description' => 'Settings for VIN Field',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vinfield_settings_form'),
    'file' => 'vinfield.admin.inc',
    'access arguments' => array('administer vinfield'),
  );

  // Add first tab, default to VINField's provider listing page:
  $items['admin/config/content/vinfield/settings'] = array(
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'title' => 'Overview',
    'weight' => -99,
  );

  // Retrieve list of providers
  $providers = vinfield_providers();
  foreach ($providers as $name => $info) {
    if (!empty($info['page callback'])) {
      $items['admin/config/content/vinfield/' . $name] = array(
        'type' => MENU_LOCAL_TASK,
        'title' => (!empty($info['title'])) ? $info['title'] : $name,
        'description' => (!empty($info['description'])) ? $info['description'] : '',
        'page callback' => $info['page callback'],
        'page arguments' => (!empty($info['page arguments'])) ? $info['page arguments'] : array(),
        'access arguments' => array('administer vinfield'),
      );
    }
  }

  return $items;
}

/**
 * Sort callback
 */
function _vinfield_provider_title_compare($a, $b) {
  if (isset($a['title']) && isset($b['title'])) {
    return strcasecmp($a['title'], $b['title']);
  }
  elseif (isset($a['title'])) {
    return -1;
  }
  else {
    return 1;
  }
}

/**
 * Util function for collecting provider info
 */
function vinfield_providers() {
  $providers = array();

  // Locate all modules implmenting a provider
  $modules = module_implements('vinfield_provider_info');
  foreach ($modules as $module) {
    $info = module_invoke($module, 'vinfield_provider_info');

    // Add module to provider info
    foreach ($info as &$provider) {
      $provider['module'] = $module;
    }
    $providers = array_merge($providers, $info);
  }

  // Allow other modules to alter the provider definitions
  drupal_alter('vinfield_provider_info', $providers);

  // Sort by title and return
  uasort($providers, '_vinfield_provider_title_compare');
  return $providers;
}

/**
 * Implements hook_field_info
 */
function vinfield_field_info() {
  $fields = array();

  $fields['vinfield'] = array(
    'label' => t('VIN Field'),
    'description' => t('This field stores VIN numbers.'),
    'default_widget' => 'vinfield_default',
    'default_formatter' => 'vinfield_default',
    'instance_settings' => array(
      'provider' => NULL,
    ),
  );

  return $fields;
}

/**
 * Implements hook_field_instance_settings_form
 */
function vinfield_field_instance_settings_form($field, $instance) {
  $settings = $instance['settings'];
  $form = array();

  $providers = vinfield_providers();
  $options = array();
  foreach ($providers as $name => $info) {
    if (empty($info['always invoke'])) {
      $options[$name] = !empty($info['title']) ? $info['title'] : $name;
    }
  }

  if (!empty($options)) {
    $form['provider'] = array(
      '#type' => 'radios',
      '#title' => t('Validation / lookup providers'),
      '#description' => t('Select all available providers to use for lookup and/or validation of the VIN provided'),
      '#options' => $options,
      '#default_value' => $settings['provider'],
    );
  }

  return $form;
}

/**
 * Implements #element_validate callback for vinfield widget
 */
function vinfield_field_widget_validate($element, &$form_state, $form) {
  $settings = $element['#widget_settings'];
  $providers = vinfield_providers();

  // Some will always be invoked when enabled, like vf_checkdigit.  Add them in.
  $used_providers = array();
  foreach ($providers as $name => $info) {
    if (!empty($info['always invoke'])) {
      $used_providers[] = $name;
    }
  }

  // Add our selected optional provider after all required ones
  if (!empty($settings['provider'])) {
    $used_providers[] = $settings['provider'];
  }

  // Iterate through items and validate each one
  $field_name = $element['#field_name'];
  $langcode = isset($form_state['langcode']) ? $form_state['langcode'] : 'und';
  foreach ($form_state['values'][$field_name][$langcode] as $delta => &$item) {
    if (is_numeric($delta) && !empty($item['vin'])) {
      foreach ($used_providers as $name) {
        $cid = "{$item['vin']}:{$name}";

        // See if we have a cached result for this provider:vin combination
        $result = cache_get($cid, 'cache_vinfield');
        if ($result) {
          $result = unserialize($result->data);
        }

        // If not, execute lookup
        else {
          if (!empty($providers[$name]['query callback']) && function_exists($providers[$name]['query callback'])) {
            $result = $providers[$name]['query callback']($item['vin']);

            // Store off in cache - good, bad or ugly - so we don't perform lookup again
            cache_set($cid, serialize($result), 'cache_vinfield');
          }
        }

        // Report error and bail out of checking this item
        if (!empty($result['#error'])) {
          form_error($element, !empty($result['#error']['message']) ? $result['#error']['message'] : t('VIN validation failed'));
          break;
        }

        // If we have a good result, then append to item
        else {
          $item += $result;
        }
      }
    }
  }
}

/**
 * Implements hook_field_presave
 */
function vinfield_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  if ($field['type'] == 'vinfield') {
    // To prevent the DB save from losing its mind, serialize the "extra" field
    foreach ($items as $delta => $item) {
      if (isset($item['extra'])) {
        $items[$delta]['extra'] = serialize($item['extra']);
      }
    }
  }
}

/**
 * Implements hook_field_load
 */
function vinfield_field_load($entity_type, $entities, $field, $instances, $langcode, &$items, $age) {
  // Unserialize the "extra" subfield
  foreach ($entities as $id => $entity) {
    foreach ($items[$id] as $delta => $item) {
      if (isset($item['extra'])) {
        $items[$id][$delta]['extra'] = unserialize($item['extra']);
      }
    }
  }
}

/**
 * Implements hook_field_is_empty
 */
function vinfield_field_is_empty($item, $field) {
  return empty($item['vin']);
}

/**
 * Implements hook_field_widget_info
 */
function vinfield_field_widget_info() {
  $widgets = array();

  $widgets['vinfield_default'] = array(
    'label' => t('VIN Field Default'),
    'field types' => array('vinfield'),
    'behaviors' => array(
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
      'default value' => FIELD_BEHAVIOR_DEFAULT,
    ),
  );

  return $widgets;
}

/**
 * Implements hook_field_widget_form
 */
function vinfield_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $value = isset($items[$delta]['vin']) ? $items[$delta]['vin'] : '';
  $widget = $element;
  $widget['#delta'] = $delta;

  switch ($instance['widget']['type']) {
    case 'vinfield_default':
      $widget += array(
        '#type' => 'textfield',
        '#default_value' => $value,
        '#element_validate' => array('vinfield_field_widget_validate'),
        '#widget_settings' => $instance['settings'],
      );
      break;
  }

  $element['vin'] = $widget;
  return $element;
}

/**
 * Implements hook_field_formatter_info
 */
function vinfield_field_formatter_info() {
  $formatters = array();

  $formatters['vinfield_default'] = array(
    'label' => t('Default'),
    'field types' => array('vinfield'),
  );
  $formatters['vinfield_year_make_model_trim'] = array(
    'label' => t('Year make model trim'),
    'field types' => array('vinfield'),
  );

  return $formatters;
}

/**
 * Implements hook_field_formatter_view
 */
function vinfield_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];

  switch ($display['type']) {
    case 'vinfield_default':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#markup' => $item['vin'],
        );
      }
      break;

    case 'vinfield_year_make_model_trim':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          'year' => array(
            '#prefix' => '<span class="vinfield-year">',
            '#suffix' => '</span> ',
            '#markup' => $item['year'],
          ),
          'make' => array(
            '#prefix' => '<span class="vinfield-make">',
            '#suffix' => '</span> ',
            '#markup' => $item['make'],
          ),
          'model' => array(
            '#prefix' => '<span class="vinfield-model">',
            '#suffix' => '</span> ',
            '#markup' => $item['model'],
          ),
          'trim' => array(
            '#prefix' => '<span class="vinfield-trim">',
            '#suffix' => '</span>',
            '#markup' => $item['trim'],
          ),
        );
      }
      break;
  }

  return $element;
}

/**
 * Creates dummy VINs that will pass check-digit validation.  Could be used with devel_generate.
 * Pretty much the reverse of the validation code in the vf_checkdigit module.
 */
function _vinfield_content_generate() {
  $valid_digits = "ABCDEFGHJKLMNPRSTUVWXYZ0123456789";
  $val_table = array("0" => 0, "1" => 1, "2" => 2, "3" => 3, "4" => 4, "5" => 5, "6" => 6, "7" => 7, "8" => 8, "9" => 9, "A" => 1, "B" => 2, "C" => 3, "D" => 4, "E" => 5, "F" => 6, "G" => 7, "H" => 8, "J" => 1, "K" => 2, "L" => 3, "M" => 4, "N" => 5, "P" => 7, "R" => 9, "S" => 2, "T" => 3, "U" => 4, "V" => 5, "W" => 6, "X" => 7, "Y" => 8, "Z" => 9);
  $mult = array(8, 7, 6, 5, 4, 3, 2, 10, 0, 9, 8, 7, 6, 5, 4, 3, 2);
  $rem_check = array("0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "X");
  $vin = array();

  // Loop through 16 digits and build string:
  $num_valid = drupal_strlen($valid_digits);
  $prod_sum = 0;
  for ($idx = 0; $idx < 17; ++$idx) {
    $digit = $valid_digits[rand(0, $num_valid - 1)];
    if (8 == $idx) {
      $vin[] = "";
      continue;
    }
    $vin[] = $digit;

    // Use digit cross-reference:
    $prod = $val_table[$digit] * $mult[$idx];
    $prod_sum += $prod;
  }

  $mod_val = $prod_sum % 11;
  $vin[8] = $rem_check[$mod_val];

  return implode("", $vin);
}

/**
 * Implements hook_views_api
 */
function vinfield_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'vinfield') . '/views',
  );
}
