<?php

define('BITCOIN_PRICE_UPDATE_INTERVAL', 15 * 60);

/*
 * Implements hook_menu().
 */
function bitcoin_price_menu() {
  $items = array();

  $items['admin/config/bitcoin_price'] = array(
    'title' => 'Bitcoin Price',
    'description' => 'Configuration for Bitcoin Price',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bitcoin_price_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'bitcoin_price.admin.inc',
  );

  return $items;
}


/*
 * API Function
 */
function bitcoin_price_get_rate_info($currency) {
  $exchanges = array();
  if ($primary_exchange = variable_get('bitcon_price_exch_primary', '')) {
    $exchanges[] = $primary_exchange;
  }
  if ($secondary_exchange = variable_get('bitcon_price_exch_secondary', '')) {
    $exchanges[] = $secondary_exchange;
  }
  if (empty($exchanges)) {
    // Oh No!  No exchanges are configured, getting rate info will fail
    // TODO: Add a watchdog entry
    // TODO: Add a requirements hook warning
    return NULL;
  }
  
  foreach ($exchanges as $exchange_name) {
    if (_bitcoin_price_check_exchange_currency($exchange_name, $currency)) {
      // Got it, let's just get the rate and return;
      $now = time();
      $stale_time = time() - BITCOIN_PRICE_UPDATE_INTERVAL;
      // TODO: Load a copy of the exchange rate from the DB
      $rates = variable_get('bitcoin_price_rates', array());
      if (!isset($rates[$currency]) || $rates[$currency]['timestamp'] < $stale_time) {
        $rates = _bitcoin_price_update_rates($exchange_name);
      }
      if (isset($rates[$currency])) {
        return $rates[$currency];
      }
      // TODO: Add a watchdog error, could not get a currency rate from an exchange that should have it
    }
    // Just keep looping
  }
  
  // If we got here, that means that we have exchanges configured which
  //   do not contain this currency
  // TODO: Add a watchdog entry
  return NULL;

}

/*
 * 
 */
function bitcoin_price_get_rate_value($currency) {
  if ($rate_info = bitcoin_price_get_rate_info($currency)) {
    return $rate_info['exchange_rate'];
  }
  else {
  	// TODO: Add watchdog error, do something because currency cannot be found
  }
}


/*
 * 
 */
function bitcoin_price_get_enabled_currencies() {
  $currencies = variable_get('bitcoin_price_enabled_currencies', array());
  $enabled_currencies = array();
  foreach ($currencies as $currency => $enabled) {
    if ($enabled) {
      $enabled_currencies[] = $currency;
    }
  }
  return $enabled_currencies;
}

//==============================================================


/*
 * 
 */
function bitcoin_price_get_currencies() {
  return array(
    // Supported MtGox currencies, Dec 15 2012
    'AUD',
    'CAD',
    'CHF',
    'CNY',
    'DKK',
    'EUR',
    'GBP',
    'HKD',
    'JPY',
    'NOK',
    'NZD',
    'PLN',
    'RUB',
    'SEK',
    'SGD',
    'THB',
    'USD',
  ); 
}

/*
 * Implements hook_bitcoin_price_exchange_register().
 */
function bitcoin_price_bitcoin_price_exchange_register() {
  return array(
    'bitcoinaverage' => array(
      'label' => t('Bitcoin Average'),
      'url' => 'https://bitcoinaverage.com',
      'callback' => 'bitcoin_price_exchange_callback_bitcoinaverage',
    ),
    'bitcoincharts' => array(
      'label' => t('Bitcoin Charts'),
      'url' => 'https://bitcoincharts.com',
      'callback' => 'bitcoin_price_exchange_callback_bitcoincharts',
    ),
  );
}

/*
 * API function
 */
function bitcoin_price_get_exchanges() {
  $exchanges = module_invoke_all('bitcoin_price_exchange_register');
  return $exchanges;
}

/*
 * Internal Helper function
 */
function _bitcoin_price_check_exchange_currency($exchange_name, $currency) {
  $exchange_currencies_var = 'bitcoin_price_exch_currencies_' . $exchange_name;
  $exchange_currencies = variable_get($exchange_currencies_var, array());
  $exchange_currencies = array_flip($exchange_currencies);
  if (isset($exchange_currencies[$currency])) {
    return true;
  }
  else {
    return false;
  }
}

/*
 * Internal helper function
 */
function _bitcoin_price_update_rates($exchange_name) {
	// TODO: This still needs a lot of work, should only be fetching a rate for one currency
	
  // If an update was attempted in the last fifteen minutes, use the rates we have
  $stale_ts = time() - BITCOIN_PRICE_UPDATE_INTERVAL;
  $last_update = variable_get('bitcoin_price_last_update', 0);
  $previous_rates = variable_get('bitcoin_price_rates', array());
  if ($last_update > $stale_ts) {
    return $previous_rates;
  }

  $currencies = bitcoin_price_get_enabled_currencies();

  $bitcoincharts_rates = _bitcoin_price_get_rates_bitcoincharts($currencies);
//  $mtgox_rates = _bitcoin_price_get_rates_mtgox($currencies);
  
//  $merged = array_merge($mtgox_rates, $bitcoincharts_rates);
//  $current_rates = array_merge($mtgox_rates, $bitcoincharts_rates);
  variable_set('bitcoin_price_rates', $current_rates);

  return $current_rates;

}




/*
 * Plugin function, should be moved
 */
function bitcoin_price_exchange_callback_bitcoincharts($currencies = array(), $reset = false) {
  static $rates;
  
  if ($reset) {
  	unset($rates);
  }

  if (!isset($rates)) {
    $rates = array();
  
    if ($response = drupal_http_request('http://api.bitcoincharts.com/v1/weighted_prices.json')) {
      if ($response->code == 200) {
        $data = json_decode($response->data);
        foreach ($currencies as $currency) {
          if (isset($data->$currency) && $currency_data = (array) $data->$currency) {
            if (isset($currency_data['24h'])) {
              $rates[$currency] = array(
                'currency' => $currency,
                'exchange_rate' => $currency_data['24h'],
                'display' => $currency_data['24h'],
                'timestamp' => $data->timestamp,
                'span' => '24h',
              );
            }
          }
        }
      }
    }
  }
  
  return $rates;
}

/*
 * Plugin function, should be moved
 */
function bitcoin_price_exchange_callback_bitcoinaverage($currencies = array(), $reset = false) {
  return bitcoin_price_exchange_callback_bitcoincharts($currencies, $reset);
}

