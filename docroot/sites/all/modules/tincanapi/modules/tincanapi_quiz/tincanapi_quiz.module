<?php

/**
 * @file
 * A Tin Can API module to handle quiz tracking.
 */

/**
 * Implements hook_quiz_begin().
 */
function tincanapi_quiz_quiz_begin($quiz, $rid) {
  $data = array();

  $data['verb'] = tincanapi_get_verb('started');
  $data['object'] = tincanapi_get_object('node', $quiz);

  tincanapi_track_data('quiz', $data);
}

/**
 * Implements hook_quiz_finished().
 */
function tincanapi_quiz_quiz_finished($quiz, $score, $session_data) {
  $rid = $session_data['result_id'];

  $result = db_query('SELECT * FROM {quiz_node_results} qnr WHERE result_id = :result_id', array(':result_id' => $rid))->fetch();
  $timestamp = $result->time_end - $result->time_start;

  $data = array();

  $data['verb'] = tincanapi_get_verb('finished');
  $data['object'] = tincanapi_get_object('node', $quiz);

  $data['context']['extensions'][TINCANAPI_CUSTOM_URI . '/duration'] = tincanapi_format_iso8601_duration($timestamp);

  if ($score['is_evaluated']) {
    _tincanapi_quiz_track_answers($quiz, $rid);
    $data['result'] = _tincanapi_quiz_get_result($score, $quiz);
  }
  else {
    $data['result']['completion'] = FALSE;
  }

  tincanapi_track_data('quiz', $data);
}

/**
 * Implements hook_quiz_scored().
 */
function tincanapi_quiz_quiz_scored($quiz, $score, $rid) {
  $result = db_query('SELECT r.nid, r.uid, r.score FROM {quiz_node_results} r WHERE r.result_id = :rid', array(':rid' => $rid));
  $record = $result->fetchObject();

  _tincanapi_quiz_track_answers($quiz, $rid, (int) $record->uid);

  $data = array();

  $data['verb'] = tincanapi_get_verb('scored');
  $data['object'] = tincanapi_get_object('node', $quiz);

  $data['result'] = _tincanapi_quiz_get_result($score, $quiz);

  tincanapi_track_data('quiz', $data, (int) $record->uid);
}

/**
 * Implements hook_tincanapi_quiz_data_TYPE().
 *
 * Long answer type specific data.
 */
function tincanapi_quiz_tincanapi_quiz_data_long_answer(&$data, $question, $answers) {
  $answer = reset($answers);

  $result = db_select('quiz_long_answer_user_answers', 'q')
    ->fields('q')
    ->condition('result_id', $answer['result_id'], '=')
    ->execute()
    ->fetchAssoc();

  $data['result']['response'] = $answer['answer'];

  $score = $result['score'];
  $max = $question->max_score;

  $data['result']['score'] = array(
    'scaled' => _tincanapi_quiz_get_score($score, $max),
    'min' => 0,
    'max' => (int) $max,
  );
}

/**
 * Implements hook_tincanapi_quiz_data_TYPE().
 *
 * Matching type specific data.
 */
function tincanapi_quiz_tincanapi_quiz_data_matching(&$data, $question, $answers) {
  $answer = reset($answers);

  $corrent_response_pattern = '';

  $data['object']['definition']['source'] = array();
  $data['object']['definition']['target'] = array();

  foreach ($question->match as $match) {
    $source = array(
      'id' => 'question_' . $match['match_id'],
    );

    tincanapi_add_language_value($source, 'description', $match['question']);

    $target = array(
      'id' => 'answer_' . $match['match_id'],
    );

    tincanapi_add_language_value($target, 'description', $match['answer']);

    $data['object']['definition']['source'][] = $source;
    $data['object']['definition']['target'][] = $target;

    if (!empty($corrent_response_pattern)) {
      $corrent_response_pattern .= '[,]';
    }

    $corrent_response_pattern .= $source['id'] . '[.]' . $target['id'];
  }

  $response = '';
  $score = 0;
  $max = $question->max_score;

  foreach ($answer['answer'] as $q_key => $a_key) {
    if ($q_key == $a_key) {
      $score++;
    }

    if (!empty($response)) {
      $response .= '[,]';
    }

    $response .= 'question_' . $q_key . '[.]answer_' . $a_key;
  }

  $data['result']['response'] = $response;

  $data['result']['score'] = array(
    'scaled' => _tincanapi_quiz_get_score($score, $max),
    'min' => 0,
    'max' => (int) $max,
  );

  $data['object']['definition']['correctResponsesPattern'] = array($corrent_response_pattern);
}

/**
 * Implements hook_tincanapi_quiz_data_TYPE().
 *
 * Multiple choice type specific data.
 */
function tincanapi_quiz_tincanapi_quiz_data_multichoice(&$data, $question, $answers) {
  $answer = reset($answers);

  $data['result']['success'] = ($question->correct == 1 ? TRUE : FALSE);

  $query = db_select('quiz_multichoice_user_answers', 'u')
    ->condition('result_id', $answer['result_id'], '=');

  $query->join('quiz_multichoice_user_answer_multi', 'a', 'u.id = a.user_answer_id');

  $result = $query->fields('u')
    ->fields('a')
    ->execute()
    ->fetchAssoc();

  $answer_id = $result['answer_id'];

  $correct = '';
  $choices = array();

  foreach ($question->alternatives as $alternative) {
    if ($alternative['id'] == $answer_id) {
      $data['result']['response'] = $alternative['id'];
    }

    if ($alternative['score_if_chosen'] > 0 || $alternative['score_if_not_chosen'] > 0) {
      if (!empty($correct)) {
        $correct .= '[,]';
      }

      $correct .= $alternative['id'];
    }

    $choice = array(
      'id' => $alternative['id'],
    );

    tincanapi_add_language_value($choice, 'description', strip_tags($alternative['answer']));

    $choices[] = $choice;
  }

  $data['object']['definition']['correctResponsesPattern'] = array($correct);
  $data['object']['definition']['choices'] = $choices;
}

/**
 * Implements hook_tincanapi_quiz_data_TYPE().
 *
 * Directions type specific data.
 */
function tincanapi_quiz_tincanapi_quiz_data_quiz_directions(&$data, $question, $answers) {
  $data = array();
}

/**
 * Implements hook_tincanapi_quiz_data_TYPE().
 *
 * Scale type specific data.
 */
function tincanapi_quiz_tincanapi_quiz_data_scale(&$data, $question, $answers) {
  $answer = reset($answers);

  $query = db_select('quiz_scale_node_properties', 'p')
    ->condition('nid', $question->nid, '=');

  $query->join('quiz_scale_answer', 'a', 'p.answer_collection_id = a.answer_collection_id');

  $result = $query->fields('p')
    ->fields('a')
    ->execute();

  $scale = array();

  while ($record = $result->fetchAssoc()) {
    if ($record['answer'] == $answer['answer']) {
      $data['result']['response'] = $record['answer'];
      $data['object']['definition']['correctResponsesPattern'] = array('likert_' . $record['id']);
    }

    $option = array(
      'id' => 'likert_' . $record['id'],
    );

    tincanapi_add_language_value($option, 'description', $record['answer']);

    $scale[] = $option;
  }

  $data['object']['definition']['scale'] = $scale;
}

/**
 * Implements hook_tincanapi_quiz_data_TYPE().
 *
 * Short answer type specific data.
 */
function tincanapi_quiz_tincanapi_quiz_data_short_answer(&$data, $question, $answers) {
  $answer = reset($answers);

  $result = db_select('quiz_short_answer_user_answers', 'q')
    ->fields('q')
    ->condition('result_id', $answer['result_id'], '=')
    ->execute()
    ->fetchAssoc();

  $data['result']['response'] = $answer['answer'];

  $score = $result['score'];
  $max = $question->max_score;

  $data['result']['score'] = array(
    'scaled' => _tincanapi_quiz_get_score($score, $max),
    'min' => 0,
    'max' => (int) $max,
  );
}

/**
 * Implements hook_tincanapi_quiz_data_TYPE().
 *
 * True/false type specific data.
 */
function tincanapi_quiz_tincanapi_quiz_data_truefalse(&$data, $question, $answers) {
  $answer = reset($answers);

  $data['result']['success'] = ($question->correct == 1 ? TRUE : FALSE);
  $data['result']['response'] = ($answer['answer'] == 1 ? 'true' : 'false');

  $correct = ($question->correct_answer == 1 ? 'true' : 'false');
  $data['object']['definition']['correctResponsesPattern'] = array($correct);
}

/**
 * Track all of the answers to quiz questions.
 *
 * @param object $quiz
 *   The Drupal quiz node.
 * @param int $rid
 *   The quiz result id.
 */
function _tincanapi_quiz_track_answers($quiz, $rid, $uid = NULL) {
  global $base_url;

  $i = 0;
  $questions = _quiz_get_answers($quiz, $rid);

  foreach ($questions as $nid => $question) {
    $i++;

    $data = array();
    $data['verb'] = tincanapi_get_verb('answered');

    $data['object'] = tincanapi_get_object('node', $question);
    $data['object']['objectType'] = 'Activity';
    $data['object']['definition']['type'] = 'http://adlnet.gov/expapi/activities/cmi.interaction';

    $parent = array(
      'id' => $base_url . '/node/' . $quiz->nid,
      'objectType' => 'Activity',
    );

    $data['context']['contextActivities']['parent'] = $parent;
    $data['context']['extensions'][TINCANAPI_CUSTOM_URI . '/order'] = $i;

    $body = field_get_items('node', $question, 'body');

    if (!empty($body)) {
      $description = reset($body);
      tincanapi_add_language_value($data['object']['definition'], 'description', strip_tags($description['value']));
    }

    if ($interaction_type = _tincanapi_quiz_interaction_type_map($question->type)) {
      $data['object']['definition']['interactionType'] = $interaction_type;
    }

    $hook = 'tincanapi_quiz_data_' . $question->type;

    foreach (module_implements($hook) as $module) {
      $function = $module . '_' . $hook;
      $function($data, $question, $question->answers);
    }

    if (!empty($data)) {
      if (isset($uid)) {
        tincanapi_track_data('quiz', $data, $uid);
      }
      else {
        tincanapi_track_data('quiz', $data);
      }
    }
  }
}

/**
 * Get a completed result array for the Tin Can API.
 *
 * @param array $score
 *   An associative array containing the score results.
 * @param object $quiz
 *   The quiz node.
 *
 * @return array
 *   A result array.
 */
function _tincanapi_quiz_get_result(array $score, $quiz) {
  $result = array();

  $result['score']['scaled'] = _tincanapi_quiz_get_score($score['percentage_score']);
  $result['completion'] = TRUE;
  $result['success'] = _tincanapi_quiz_passed($score['percentage_score'], $quiz);

  return $result;
}

/**
 * Return the scaled score value for the quiz.
 *
 * @param int $score
 *   The percentage scored.
 * @param int $total
 *   The total possible points.
 *
 * @return int
 *   The scaled score value.
 */
function _tincanapi_quiz_get_score($score, $total = 100) {
  return ($score / $total);
}

/**
 * Determine if the user passed the quiz.
 *
 * @param int $score
 *   The percentage scored.
 * @param object $quiz
 *   The quiz node.
 *
 * @return bool
 *   Value representing pass or fail.
 */
function _tincanapi_quiz_passed($score, $quiz) {
  if ($score >= $quiz->pass_rate) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Map the Quiz question type to the Tin Can equivalent.
 *
 * @param string $question_type
 *   The Quiz question node type.
 *
 * @return string
 *   The Tin Can interaction type.
 */
function _tincanapi_quiz_interaction_type_map($question_type) {
  $map = array(
    'long_answer' => 'fill-in',
    'matching' => 'matching',
    'multichoice' => 'choice',
    'scale' => 'likert',
    'truefalse' => 'true-false',
  );

  if (array_key_exists($question_type, $map)) {
    return $map[$question_type];
  }
}
