<?php
/**
 * @file
 * Module that makes a ClosedQuestion Scoreboard node-type available.
 */

/**
 * Implements hook_node_info().
 */
function closedquestion_scoreboard_node_info() {
  return array(
    'student_scoreboard' => array(
      'name' => t('Closed Question Student Scoreboard'),
      'base' => 'closedquestion_scoreboard_student',
      'description' => t('Provides a scoreboard that shows the scores for selected Closed Question questions for the current user.'),
      'body_label' => t('Enter a comma-separated list of node-ids of Closed Questions'),
      'has_title' => TRUE,
      'title_label' => t('Title')
    ),
    'teacher_scoreboard' => array(
      'name' => t('Closed Question Teacher Scoreboard'),
      'base' => 'closedquestion_scoreboard_teacher',
      'description' => t('Provides a scoreboard that shows the scores for selected Closed Question questions for all users.'),
      'body_label' => t('Enter a comma-separated list of node-ids of Closed Questions'),
      'has_title' => TRUE,
      'title_label' => t('Title')
    ),
  );
}

/**
 * Implements hook_perm().
 */
function closedquestion_scoreboard_perm() {
  return array(
    'view student_scoreboard',
    'create student_scoreboard',
    'edit student_scoreboard',
    'view teacher_scoreboard',
    'create teacher_scoreboard',
    'edit teacher_scoreboard',
  );
}


/**
 * Implements hook_permission().
 */
function closedquestion_scoreboard_permission() {
  return array(
    'view student_scoreboard' => array(
      'title' => t('View student scoreboard'),
      'description' => t('View the score board for students'),
    ),
    'edit student_scoreboard' => array(
      'title' => t('Edit student scoreboard'),
      'description' => t('Edit the score board for students'),
      'restrict access' => TRUE,
    ),
    'view teacher_scoreboard' => array(
      'title' => t('View teacher scoreboard'),
      'description' => t('View the score board for teachers'),
    ),
    'edit teacher_scoreboard' => array(
      'title' => t('Edit teacher scoreboard'),
      'description' => t('Edit the score board for teachers'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_access().
 */
function closedquestion_scoreboard_student_node_access($op, $node, $account) {
  if ($op == 'view') {
    return user_access('view student_scoreboard', $account);
  }
  elseif ($op == 'create') {
    return user_access('create student_scoreboard', $account);
  }
  elseif ($op == 'update' || $op == 'delete') {
    return user_access('edit student_scoreboard', $account);
  }
}

/**
 * Implements hook_form().
 */
function closedquestion_scoreboard_student_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

/**
 * Implements hook_view().
 */
function closedquestion_scoreboard_student_view($node, $teaser = FALSE, $page = FALSE) {
  // Set the table headers.
  $table_headers = array(
    array('data' => t('Question'), 'field' => 'n.title'),
    array('data' => t('Wrong answers'), 'field' => 'cq.tries'),
    array('data' => t('Answered correctly'), 'field' => 'cq.once_correct'),
  );

  // Get the selected node ids from the body and create a array out of it.
  $selected_nids = explode(";", $node->body['und']['0']['value']);

  // Get the uid of the current user.
  $current_uid = $GLOBALS['user']->uid;

  $subquery = db_select('cq_user_answer', 'cq');
  $subquery->condition('cq.uid', $current_uid, '=');
  $subquery->addField('cq', 'nid');
  $subquery->addField('cq', 'uid');
  $subquery->addField('cq', 'once_correct');
  $subquery->addField('cq', 'tries');

  $query = db_select('node', 'n');
  $query->leftJoin($subquery, 'cq', 'n.nid = cq.nid');
  $query->condition('n.nid', $selected_nids, "IN");
  $query->addField('n', 'nid');
  $query->addField('n', 'title');
  $query->addField('cq', 'tries');
  $query->addField('cq', 'once_correct');
  //$query = $query->extend("TableSort");
  //$query->orderByHeader($table_headers);

  $result = $query->execute();

  $table_data = array();
  $sort_order = array();
  while ($row = $result->fetchAssoc()) {
    $table_row_data = array();
    $table_row_data[0] = l($row['title'], 'node/' . $row['nid']);
    $table_row_data[1] = $row['tries'];

    // Set correct value
    if ($row['once_correct'] == NULL) {
      $correct = t('');
    }
    elseif ($row['once_correct'] >= 1) {
      $correct = t('Yes');
    }
    else {
      $correct = t('No');
    }
    $table_row_data[2] = $correct;
    $table_data[] = $table_row_data;

    // Get the sort order to sort on
    $sort_order[] = array_search($row['nid'], $selected_nids);
  }

  // Sort the table data according to the order
  array_multisort($sort_order, $table_data);


  $node->content['body'] = array(
    '#markup' => theme('table', array(
      'header' => $table_headers,
      'rows' => $table_data,
    )),
    '#weight' => 0,
  );

  return $node;
}

/**
 * Implements hook_access().
 */
function closedquestion_scoreboard_teacher_node_access($op, $node, $account) {
  if ($op == 'view') {
    return user_access('view teacher_scoreboard', $account);
  }
  elseif ($op == 'create') {
    return user_access('create teacher_scoreboard', $account);
  }
  elseif ($op == 'update' || $op == 'delete') {
    return user_access('edit teacher_scoreboard', $account);
  }
}

/**
 * Implements hook_form().
 */
function closedquestion_scoreboard_teacher_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

/**
 * Implements hook_view().
 */
function closedquestion_scoreboard_teacher_view($node, $teaser = FALSE, $page = FALSE) {
  // Set the table headers.
  $table_headers = array(
    array('data' => t('Student'), 'field' => '.name'),
    array('data' => t('Question'), 'field' => 'n.title', 'sort' => 'asc'),
    array('data' => t('Wrong answers'), 'field' => 'cq.tries'),
    array('data' => t('Answered correctly'), 'field' => 'cq.once_correct'),
  );

  // Get the selected node ids from the body and create a array out of it.
  $selected_nids = explode(";", $node->body['und']['0']['value']);

  $query = db_select("node", 'n');
  $query->leftJoin('cq_user_answer', 'cq', 'n.nid = cq.nid');
  $query->join('users', 'u', 'cq.uid = u.uid');
  $query->condition('n.nid', $selected_nids, "IN");
  $query->addField('u', 'uid');
  $query->addField('u', 'name');
  $query->addField('n', 'nid');
  $query->addField('n', 'title');
  $query->addField('cq', 'tries');
  $query->addField('cq', 'once_correct');
  $query = $query->extend("TableSort");
  $query->orderByHeader($table_headers);

  $result = $query->execute();

  $table_data = array();
  while ($row = $result->fetchAssoc()) {
    $table_row_data = array();
    $table_row_data[0] = l($row['name'], 'user/' . $row['uid']);
    $table_row_data[1] = l($row['title'], 'node/' . $row['nid']);
    $table_row_data[2] = $row['tries'];
    // Set correct value
    if ($row['once_correct'] == NULL) {
      $correct = t('');
    }
    elseif ($row['once_correct'] >= 1) {
      $correct = t('Yes');
    }
    else {
      $correct = t('No');
    }
    $table_row_data[3] = $correct;
    $table_data[] = $table_row_data;
  }


  $node->content['body'] = array(
    '#markup' => theme('table', array(
      'header' => $table_headers,
      'rows' => $table_data,
    )),
    '#weight' => 0,
  );

  return $node;
}
