<?php
/**
 * @file
 * Installation file for the Matchchat module.
 */

/**
 * Implements hook_permission().
 */
function matchchat_permission() {
  return array(
    'administer matchchat' => array(
      'title' => t('Administer matchchat'),
      'description' => t('Perform administration tasks for matchchat module.'),
    ),
  );
}

/**
 * Implements hook_library().
 */
function matchchat_library() {
  // Set up matchchat as Library for use in other modules.
  $libraries['matchchat_js'] = array(
    'title' => 'Matchchat JS Library',
    'website' => 'http://matchchat.co.uk/',
    'version' => '1.0',
    'js' => array(
      drupal_get_path('module', 'matchchat') . '/matchchat.js' => array(),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_html_head_alter().
 */
function matchchat_html_head_alter(&$elements) {
  $nid = 0;
  // As the Drupal front page may not have a node ID, we need to get this.
  if (drupal_is_front_page()) {
    $front_url = variable_get('site_frontpage', 'node');
    $front_url = drupal_get_normal_path($front_url);
    $front_url = trim($front_url, '/');
    $front = explode('/', $front_url);
    if (count($front) > 1 && $front[0] == 'node' && ctype_digit($front[1])) {
      $nid = $front[1];
    }
  }
  else {
    // Set the node ID to current arg(1).
    if (arg(0) == 'node' && is_numeric(arg(1))) {
      $nid = arg(1);
    }
  }

  // Add meta tag to HTML.
  $elements['matchchat_post_id'] = array(
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => array(
      'name' => 'mcPostID',
      'content' => $nid,
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function matchchat_block_info() {
  $blocks = array();
  $blocks['matchchat'] = array(
    'info' => t('Matchchat comments area'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function matchchat_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'matchchat':
      $block['subject'] = '';
      $block['content'] = matchchat_block_html();
      break;
  }
  return $block;
}

/**
 * Implements hook_menu().
 */
function matchchat_menu() {
  $items = array();
  $items['admin/config/services/matchchat'] = array(
    'title' => 'Matchchat',
    'description' => 'Configure Matchchat API.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('matchchat_admin_settings'),
    'access arguments' => array('administer matchchat'),
    'weight' => 50,
  );
  return $items;
}

/**
 * HTML for comments.
 */
function matchchat_block_html() {
  $block = array();
  // We only want to display the comments if they are enabled globally.
  if (variable_get("matchchat_enable_display", 1) == 1) {
    $block = array(
      '#prefix' => '<div id="mccomments">',
      '#suffix' => '</div>',
      '#type' => 'markup',
      '#attached' => array(
        "library" => array(
          array('matchchat','matchchat_js'),
        ),
      ),
    );
  }
  return $block;
}

/**
 * Admin HTML form for matchchat settings.
 */
function matchchat_admin_settings() {
  // Form configured for future expansion.
  $form = array();
  // Setup array of values.
  $active = array(0 => t('Closed'), 1 => t('Active'));
  // Create single form field for active/inactive.
  $form['matchchat_enable_display'] = array(
    '#type' => 'radios',
    '#title' => t('Comments enabled'),
    '#default_value' => variable_get("matchchat_enable_display", 1),
    '#options' => $active,
    '#description' => t('Enable/Disable comments globally for matchchat API'),
  );
  return system_settings_form($form);
}
