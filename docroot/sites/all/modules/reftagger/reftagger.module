<?php
// $Id: reftagger.module,v 1.4 2010/10/01 03:03:46 nrambeck Exp $

/*
 * Drupal Module: RefTagger
 * Adds the required Javascript to the bottom of all your Drupal pages
 * to add tooltip popups to all Bible verse references on a page.
 *
 * @author: Nathan Rambeck <nathan.rambeck.org>
 */

define('REFTAGGER_JS_URL', 'http://bible.logos.com/jsapi/referencetagging.js');

/**
 * Implementation of hook_help()
 */
function reftagger_help($path, $arg) {
  switch ($path) {
    case 'admin/settings/reftagger':
      return t('<a href="@rt_url">RefTagger</a> is an amazing, free new web tool that instantly makes all the Bible references on your site come alive! Bare links turn into hyperlinks to the full text of the passage at Bible.Logos.com, making it easy for your readers to access the text of Scripture with just a click. Even better, RefTagger brings the text right to your readers by generating a tooltip window that pops up instantly when they hover over the reference. You can also have RefTagger add an  icon that is hyperlinked to the passage in Libronix.', array('@rt_url' => 'http://www.logos.com/reftagger'));
  }
}

/**
 * Implementation of hook_permission()
 */
function reftagger_permission() {
  return array(
    'administer reftagger' => array(
      'title' => t('Administer Reftagger'),
    ),
  );
}

/**
 * Implementation of hook_menu()
 */
function reftagger_menu() {
  $items['admin/config/services/reftagger'] = array(
    'title' => 'RefTagger',
    'description' => t('Configure the settings for RefTagger on your site.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('reftagger_admin_settings_form'),
    'access arguments' => array('administer reftagger'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implementation of hook_admin_settings() for configuring the module
 */
function reftagger_admin_settings_form() {
  $version_options = reftagger_bible_versions();
  $form['reftagger_bible_version'] = array(
    '#type' => 'select',
    '#title' => t('Bible Version'),
    '#options' => $version_options,
    '#default_value' => variable_get('reftagger_bible_version', 'KJV'),
    '#description' => t('Select a Bible version to use. RefTagger may not support some Bible versions in the ToolTip feature.'),
  );
  $form['reftagger_case_insensitive'] = array(
    '#type' => 'checkbox',
    '#title' => t('Case Insensitive?'),
    '#default_value' => variable_get('reftagger_case_insensitive', 0) ? 1 : 0,
    '#description' => t('By default Reftagger only tags references using proper name capitalization (2 Corinthians 5:20). Check this to make Reftagger case insensitive (2 corinthians 5:20, 2 CORINTHIANS 5:20).'),
  );
  $form['reftagger_link_target'] = array(
    '#type' => 'radios',
    '#title' => t('Links open in'),
    '#options' => array(
      t('Existing window'),
      t('New window'),
    ),
    '#default_value' => variable_get('reftagger_link_target', 1),
  );
  $form['libronix'] = array(
    '#type' => 'fieldset',
    '#title' => t('Libronix'),
    '#collapsible' => FALSE,
  );
  $form['libronix']['reftagger_libronix_icon_link'] = array(
    '#type' => 'checkbox',
    '#title' => t('Add Libronix Links'),
    '#default_value' => variable_get('reftagger_libronix_icon_link', 0),
    '#description' => t('Insert an icon linking to the verse in Libronix DLS.'),
  );
  $form['libronix']['reftagger_libronix_bible_version'] = array(
    '#type' => 'select',
    '#title' => t('Libronix Bible Version'),
    '#options' => reftagger_libronix_versions(),
    '#default_value' => variable_get('reftagger_libronix_bible_version', 'KJV'),
    '#description' => t('Select a Bible version to use for Libronix links'),
  );
  $form['libronix']['reftagger_libronix_icon_add'] = array(
    '#type' => 'checkbox',
    '#title' => t('Add Libronix Icon'),
    '#default_value' => variable_get('reftagger_libronix_icon_add', 0),
    '#description' => t('Add Libronix icon to pre-existing Libronix links'),
  );
  $dark_icon = '<img src="http://www.logos.com/images/Corporate/LibronixLink_dark.png" style="padding-right:4px;" />';
  $light_icon = '<img src="http://www.logos.com/images/Corporate/LibronixLink_light.png" style="padding-right:4px;" />';
  $form['libronix']['reftagger_libronix_icon_type'] = array(
    '#type' => 'radios',
    '#title' => t('Libronix Link Icons'),
    '#options' => array(
      $dark_icon . t('Dark (for sites with light backgrounds)'),
      $light_icon . t('Light (for sites with dark backgrounds)'),
    ),
    '#default_value' => variable_get('reftagger_libronix_icon_type', 0),
  );
  $form['reftagger_tooltip_enable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show ToolTips'),
    '#default_value' => variable_get('reftagger_tooltip_enable', 1),
    '#description' => t('Show a tooltip containing verse text when the mouse hovers over a reference.'),
  );


  $tag_checkboxes = reftagger_tags();
  $form['reftagger_exclude_tags'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Exclude tags'),
    '#default_value' => variable_get('reftagger_exclude_tags', array('h1', 'h2', 'h3')),
    '#options' => $tag_checkboxes,
    '#description' => t('Do not search these HTML tags.'),
  );
  $form['reftagger_exclude_classes'] = array(
    '#type' => 'textfield',
    '#title' => t('Exclude classes'),
    '#default_value' => variable_get('reftagger_exclude_classes', ''),
    '#description' => t('A comma-separated list of HTML tag classes that should exclude RefTagger functionality'),
  );
  $form['reftagger_css_override'] = array(
    '#type' => 'checkbox',
    '#title' => t('Override CSS'),
    '#default_value' => variable_get('reftagger_css_override', 0),
    '#description' => t('Override the default styling. To modify tooltip styling, check this and copy the contents of the included ReferenceTagging.css stylesheet to your theme\'s stylesheet.'),
  );

  // Advanced feature configurations.
  $form['advanced'] = array(
    '#type' => 'fieldset',
    '#title' => t('Advanced settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['advanced']['reftagger_cachejs'] = array(
    '#type' => 'checkbox',
    '#title' => t('Cache reftagger code file locally'),
    '#description' => t("If checked, the javascript code file is retrieved from Logos servers and cached locally. It is updated daily from the Logos servers to ensure updates to Reftagger code are reflected in the local copy (cron must be enabled)."),
    '#default_value' => variable_get('reftagger_cachejs', 0),
  );

  return system_settings_form($form);
}

/**
 * Implementation of hook_cron().
 */
function reftagger_cron() {
  // Regenerate the reftagger referencetagging.js every day.
  if (REQUEST_TIME - variable_get('reftagger_last_cachejs', 0) >= 86400) {
    // New reftagger version.
    _reftagger_cachejs(REFTAGGER_JS_URL, TRUE);

    // Clear aggregated JS files.
    if (variable_get('preprocess_js', 0)) {
      drupal_clear_js_cache();
    }

    variable_set('reftagger_last_cachejs', REQUEST_TIME);
  }
}

/**
 * Implements hook_block_info().
 */
function reftagger_block_info() {
  $block = array();
  $block['cp']['info'] = t('Reftagger Control Panel');

  return $block;
}

/**
 * Implements hook_block_view().
 *
 * Displays reftagger control panel to allow site users to change their preferred
 * Bible translation and Libronix settings
 */
function reftagger_block_view($delta = '') {
  $block = array();
  
  if ($delta == 'cp') {
    // TODO Please change this theme call to use an associative array for the $variables parameter.
    $content = theme('reftagger_control_panel');
    $templates = reftagger_cp_templates();
    $cp_theme = variable_get('reftagger_cp_template', 'bw');
    if ($cp_theme != 'custom') {
      drupal_add_html_head_link(array('rel' => 'stylesheet', 'href' => $templates[$cp_theme]['css'], 'media' => 'screen', 'type' => 'text/css'));
    }
   
    $block['content'] = $content;
  }
  return $block;
}

/**
 * Implements hook_block_configure().
 */
function reftagger_block_configure($delta = '') {
  $version_options = reftagger_bible_versions();
  $form['reftagger_cp_versions'] = array(
    '#type' => 'select',
    '#title' => t('Bible Version'),
    '#multiple' => TRUE,
    '#size' => 8,
    '#options' => $version_options,
    '#default_value' => variable_get('reftagger_cp_versions', array('ESV', 'KJV', 'NKJV', 'YLT')),
    '#description' => t('Select which versions you\'d like displayed in your control panel. <em>Note: At the time of this module\'s publication, only the English versions work with the Reftagger control panel feature.</em>'),
  );
  $form['reftagger_cp_template'] = array(
    '#type' => 'radios',
    '#title' => t('Control Panel Template'),
    '#options' => reftagger_cp_options(),
    '#default_value' => variable_get('reftagger_cp_template', 'bw')
  );
  return $form;
}

/**
 * Implements hook_block_save().
 */
function reftagger_block_save($delta = '', $edit = array()) {
  variable_set('reftagger_cp_versions', $edit['reftagger_cp_versions']);
  variable_set('reftagger_cp_template', $edit['reftagger_cp_template']);
}

/**
 * Implementation of hook_theme()
 */
function reftagger_theme() {
  return array(
    'reftagger_control_panel' => array(
      'template' => 'reftagger-control-panel',
    ),
  );
}


/**
 * Create an array of form options to choose a control panel template
 */
function reftagger_cp_options() {
  $templates = reftagger_cp_templates();

  foreach ($templates as $key => $template) {
    $image = '<img src="' . $template['image'] . '" border=0 />';
    $options[$key] = $image;
  }
  $options['custom'] = 'Custom (you\'ll need to copy the styles from this file into your theme\'s stylesheet: <strong>' . drupal_get_path('module', 'reftagger') . '/RefTaggerControlPanel.css</strong>)';
  return $options;
}

/**
 * Generate an array of possible control panel templates
 */
function reftagger_cp_templates() {
  $templates['w'] = array(
    'css' => 'http://bible.logos.com/Content/RefTaggerControlPanelWide.css',
    'image' => 'http://www.logos.com/images/reftagger/reftagger-cp-w.png'
  );
  $templates['bw'] = array(
    'css' => 'http://bible.logos.com/Content/RefTaggerControlPanelBlueWide.css',
    'image' => 'http://www.logos.com/images/reftagger/reftagger-cp-bw.png'
  );
  $templates['dgw'] = array(
    'css' => 'http://bible.logos.com/Content/RefTaggerControlPanelDGreyWide.css',
    'image' => 'http://www.logos.com/images/reftagger/reftagger-cp-dgw.png'
  );
  $templates['lgw'] = array(
    'css' => 'http://bible.logos.com/Content/RefTaggerControlPanelLGreyWide.css',
    'image' => 'http://www.logos.com/images/reftagger/reftagger-cp-lgw.png'
  );
  $templates['n'] = array(
    'css' => 'http://bible.logos.com/Content/RefTaggerControlPanelNarrow.css',
    'image' => 'http://www.logos.com/images/reftagger/reftagger-cp-n.png'
  );
  $templates['bn'] = array(
    'css' => 'http://bible.logos.com/Content/RefTaggerControlPanelBlueNarrow.css',
    'image' => 'http://www.logos.com/images/reftagger/reftagger-cp-bn.png'
  );
  $templates['dgn'] = array(
    'css' => 'http://bible.logos.com/Content/RefTaggerControlPanelDGreyNarrow.css',
    'image' => 'http://www.logos.com/images/reftagger/reftagger-cp-dgn.png'
  );
  $templates['lgn'] = array(
    'css' => 'http://bible.logos.com/Content/RefTaggerControlPanelLGreyNarrow.css',
    'image' => 'http://www.logos.com/images/reftagger/reftagger-cp-lgn.png'
  );

  return $templates;
}

/**
 * Return an array of options for HTML tags to exclude
 */
function reftagger_tags() {
  return array(
    'b' => 'Bold/Strong',
    'i' => 'Italic/Emphasis',
    'u' => 'Underline',
    'ol' => 'Ordered List',
    'ul' => 'Unordered List',
    'span' => 'Span',
    'h1' => 'Header 1',
    'h2' => 'Header 2',
    'h3' => 'Header 3',
    'h4' => 'Header 4',
    'h5' => 'Header 5',
    'h6' => 'Header 6'
  );
}

/**
 * Implementation of hook_init()
 */
function reftagger_init() {
  // Control panel javascript to indicate currently selected version
  drupal_add_library('system', 'jquery.cookie');
  $cp_script = 'var rtUserVersion = jQuery.cookie("lbsRefTaggerPrefs"); ';
  $cp_script .= 'if (rtUserVersion != null) { jQuery("#lbsVersion").val(rtUserVersion.split(".")[0]); }';
  drupal_add_js($cp_script, array('type' => 'inline', 'scope' => 'footer'));
  
  // Should a local cached copy of reftagger.js be used?
  if (variable_get('reftagger_cachejs', 0) && $source = _reftagger_cachejs(REFTAGGER_JS_URL)) {
    drupal_add_js($source, array('scope' => 'footer'));
  }
  else {
    $reftagger_url = substr(REFTAGGER_JS_URL, 7);
    $ext_script = 'var reftaggerHost = (("https:" == document.location.protocol) ? "https://" : "http://");';
    $ext_script .= 'document.write(unescape("%3Cscript src=\'" + reftaggerHost + "'. $reftagger_url .'\' type=\'text/javascript\'%3E%3C/script%3E"));';
    drupal_add_js($ext_script, array('type' => 'inline', 'scope' => 'footer'));
  }
}

/**
 * Implementation of hook_page_alter() to insert Javascript at the end of the page
 */
function reftagger_page_alter(&$page) {
  $script_ln[] = '<!-- RefTagger from Logos. Visit http://www.logos.com/reftagger. -->';
  $script_ln[] = 'Logos.ReferenceTagging.lbsBibleVersion = "' . variable_get('reftagger_bible_version', 'KJV') . '";';
  if (variable_get('reftagger_link_target', 1)) {
    $script_ln[] = 'Logos.ReferenceTagging.lbsLinksOpenNewWindow = true;';
  }
  if (variable_get('reftagger_libronix_icon_link', 0)) {
    $script_ln[] = 'Logos.ReferenceTagging.lbsAddLibronixDLSLink = true;';
    $script_ln[] = 'Logos.ReferenceTagging.lbsLibronixBibleVersion = "' . variable_get('reftagger_libronix_bible_version', 'KJV') . '";';
  }
  if (variable_get('reftagger_libronix_icon_add', 0)) {
    $script_ln[] = 'Logos.ReferenceTagging.lbsAppendIconToLibLinks = true;';
  }
  $icon_type = variable_get('reftagger_libronix_icon_type', 0) ? 'light' : 'dark';
  $script_ln[] = 'Logos.ReferenceTagging.lbsLibronixLinkIcon = "' . $icon_type . '";';
  $exclude_tags = reftagger_exclude_tags();
  if (count($exclude_tags)) {
    $script_ln[] = 'Logos.ReferenceTagging.lbsNoSearchTagNames  = [ "' . implode('", "', $exclude_tags) . '" ];';
  }
  if (trim(variable_get('reftagger_exclude_classes', ''))) {
    $class_list = variable_get('reftagger_exclude_classes', '');
    str_replace(' ', '', $class_list);
    $exclude_classes = explode(',', $class_list);
    $script_ln[] = 'Logos.ReferenceTagging.lbsNoSearchClassNames  = [ "' . implode('", "', $exclude_classes) . '" ];';
  }
  if (!variable_get('reftagger_tooltip_enable', 1)) {
    $script_ln[] = 'Logos.ReferenceTagging.lbsUseTooltip = false;';
  }
  if (variable_get('reftagger_css_override', 0)) {
    $script_ln[] = 'Logos.ReferenceTagging.lbsCssOverride = true;';
  }
  if (variable_get('reftagger_case_insensitive', 0)) {
    $script_ln[] = 'Logos.ReferenceTagging.lbsCaseInsensitive = true;';
  }

  $script_ln[] = 'Logos.ReferenceTagging.lbsTargetSite = "biblia";';
  $script_ln[] = 'Logos.ReferenceTagging.tag();';
  $script = implode("\n", $script_ln);
  $page['footer']['reftagger']['#attached']['js'][$script] = array(
    'type' => 'inline',
    'scope' => 'footer'
  );

}

/**
 * Download and cache the referencetagging.js file locally.
 * @param $location
 *   The full URL to the external javascript file.
 * @param $force
 *   Should a new filed be downloaded even if one already exists
 * @return mixed
 *   The path to the local javascript file on success, boolean FALSE on failure.
 */
function _reftagger_cachejs($location, $force = FALSE) {
  $path = 'public://reftagger';
  $file_destination = $path .'/'. basename($location);
  if (!file_exists($file_destination) || $force) {
    $result = drupal_http_request($location);
    if ($result->code == 200) {
      // Check that the files directory is writable
      if (file_prepare_directory($path, FILE_CREATE_DIRECTORY)) {
        return file_unmanaged_save_data($result->data, $path .'/'. basename($location), FILE_EXISTS_REPLACE);
      }
    }
  }
  else {
    return $file_destination;
  }
}

/**
 * Grab the exclude tags and add synonym tags
 */
function reftagger_exclude_tags() {
  $exclude_tags = variable_get('reftagger_exclude_tags', array('h1', 'h2', 'h3'));
  foreach ($exclude_tags as $tag) {
    if ($tag) {
      $tags[] = $tag;
      if ($tag == 'b') {
        $tags[] = 'strong';
      }
      if ($tag == 'i') {
        $tags[] = 'em';
      }
    }
  }
  return $tags;
}

/**
 * Return an array list of Bible version options for tooltips
 */
function reftagger_bible_versions($abbr = FALSE) {
  return array(
    'English' => array(
      'AB' => $abbr ? 'AMP' : 'Amplified',
      'ASV' => $abbr ? 'ASV' : 'American Standard Version',
      'DAR' => $abbr ? 'DARBY' : '1890 Darby Bible',
      'ESV' => $abbr ? 'ESV' : 'English Standard Version',
      'GW' => $abbr ? 'GW' : 'God\'s Word Translation',
      'HCSB' => $abbr ? 'HCSB' : 'Holman Christian Standard Bible',
      'KJV' => $abbr ? 'KJV' : 'King James Version',
      'LEB' => $abbr ? 'LEB' : 'Lexham English Bible',
      'MESSAGE' => $abbr ? 'MESSAGE' : 'The Message',
      'NASB' => $abbr ? 'NASB' : 'New American Standard',
      'NCV' => $abbr ? 'NCV' : 'New Century Version',
      'GS-NETBIBLE' => $abbr ? 'NET' : 'The NET Bible',
      'NIV' => $abbr ? 'NIV' : 'New International Version',
      'NIRV' => $abbr ? 'NIRV' : 'New International Reader\'s Version',
      'NKJV' => $abbr ? 'NKJV' : 'New King James Version',
      'NLT' => $abbr ? 'NLT' : 'New Living Translation',
      'TNIV' => $abbr ? 'TNIV' : 'Today\'s New International Version',
      'YLT' => $abbr ? 'YLT' : 'Young\'s Literal Translation',
    ),
    'Arabic' => array(
      'AR-VANDYKE' => $abbr ? 'Arabic' : 'Arabic Bible (Smith & Van Dyke)',
    ),
    'Czech' => array(
      'CS-KR1579' => $abbr ? 'KR1579' : 'Podle Puvodního Vydání Kralického',
    ),
    'French' => array(
      'LSG' => $abbr ? 'LSG' : 'Louis Segond',
    ),
    'German' => array(
      'LUO1545' => $abbr ? 'LUO1545' : 'Luther Bibel (1545)',
      'LU1912' => $abbr ? 'LU1912' : 'Luther Bibel (1912)',
    ),
    'Greek' => array(
      'TISCH' => $abbr ? 'TISCH' : 'Novum Testamentum Graece',
      'TISCHNT' => $abbr ? 'TISCHNT' : 'Novum Testamentum Graece (Tischendorf)',
    ),
    'Hungarian' => array(
      'HU-BIBLE' => $abbr ? 'SZENT' : 'Szent Biblia',
    ),
    'Italian' => array(
      'IT-DIODATI1649' => $abbr ? 'DIODATI' : 'Giovanni Diodati Bibbia',
    ),
    'Russian' => array(
      'RST' => $abbr ? 'RST' : 'Русский Синодальный Перевод (1876/1956)',
    ),
    'Spanish' => array(
      'RVA' => $abbr ? 'RVA' : 'Reina-Valera Actualizada',
      'NBLH' => $abbr ? 'NBLH' : 'Nueva Biblia de los Hispanos',
      'LBLA95' => $abbr ? 'LBLA' : 'La Biblia de las Américas',
      'BB-UBS-BLS' => $abbr ? 'TLA' : 'Traducción en lenguaje actual',
    ),
  );
}

/**
 * Return an array list of Bible version options for Libronix links
 */
function reftagger_libronix_versions() {
  return array_merge(array('DEFAULT' => 'User\'s Default'), reftagger_bible_versions());
}

/**
 * Process variables for reftagger-control-panel.tpl.php
 *
 * @see reftagger-control-panel.tpl.php
 */
function template_preprocess_reftagger_control_panel(&$vars) {
  $all_options = reftagger_bible_versions(TRUE);
  $choices = variable_get('reftagger_cp_versions', array('ESV', 'KJV', 'NKJV', 'YLT'));
  
  foreach ($all_options as $group) {
    foreach ($group as $key => $option) {
      if (in_array($key, $choices)) {
        $cp_options[$key] = $option;
      }
    }
  }
  $current_version = '';
  if (isset($_COOKIE['lbsRefTaggerPrefs'])) {
    list($current_version) = explode('.', $_COOKIE['lbsRefTaggerPrefs']);
  }
  if (!in_array($current_version, array_keys($cp_options))) {
    $current_version = variable_get('reftagger_bible_version', 'KJV');
  }
  $form['reftagger_bible_version'] = array(
    '#type' => 'select',
    '#options' => $cp_options,
    '#default_value' => $current_version,
  );
  $vars['version_options'] = form_select_options($form['reftagger_bible_version']);

}
