<?php

/**
 * @file
 * Provides a payment method for Drupal Commerce using Klarna Checkout
 */

/**
 * Implements hook_menu().
 */
function commerce_klarna_checkout_menu() {
  // Define a callback path for order acknowledgement.
  $items['commerce_klarna_checkout/%commerce_order/%/%'] = array(
    'page callback'   => 'commerce_klarna_checkout_process_payment',
    'access callback' => TRUE,
    'page arguments'  => array(1, 2),
    'type'            => MENU_CALLBACK,
  );
  $items['commerce_klarna_checkout/return/%commerce_order/%'] = array(
    'page callback'   => 'commerce_klarna_checkout_return_page',
    'page arguments'  => array(2, 3),
    'type'            => MENU_CALLBACK,
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_klarna_checkout_commerce_payment_method_info() {
  $payment_methods['klarna_checkout'] = array(
    'base'                  => 'commerce_klarna_checkout',
    'title'                 => t('Klarna Checkout'),
    'display_title'         => t('Klarna Checkout - Choose between multiple payment methods'),
    'short_title'           => t('Klarna'),
    'description'           => t('Create a payment using Klarna.'),
    'active'                => TRUE,
    'terminal'              => TRUE,
    'offsite'               => TRUE,
    'offsite_autoredirect'  => FALSE,
  );
  return $payment_methods;
}

/**
 * Returns the default settings for the Klarna Checkout payment method.
 */
function commerce_klarna_checkout_default_settings() {
  $settings = array();
  $settings['estore_id'] = isset($settings['estore_id']) ? $settings['estore_id'] : '';
  $settings['secret'] = isset($settings['secret']) ? $settings['secret'] : '';
  $settings['live_mode'] = isset($settings['live_mode']) ? $settings['live_mode'] : 0;
  $settings['charge'] = isset($settings['charge']) ? $settings['charge'] : 0;
  $settings['terms_path'] = isset($settings['terms_path']) ? $settings['terms_path'] : '';
  $settings['language'] = isset($settings['language']) ? $settings['language'] : 'sv-se';
  $settings['layout'] = isset($settings['layout']) ? $settings['layout'] : 'desktop';
  $settings['customer_profile']['billing'] = isset($settings['customer_profile']['billing']) ? $settings['customer_profile']['billing'] : 0;
  $settings['customer_profile']['shipping'] = isset($settings['customer_profile']['shipping']) ? $settings['customer_profile']['shipping'] : 0;
  return $settings;
}

/**
 * The settings form for this payment method.
 *
 * @param mixed $settings
 *   An array of the current settings.
 *
 * @return mixed
 *   A renderable form array.
 */
function commerce_klarna_checkout_settings_form($settings = NULL) {
  $form = array();

  // Merge default settings into the stored settings array.
  $settings = (array) $settings + commerce_klarna_checkout_default_settings();

  $form['estore_id'] = array(
    '#type'           => 'textfield',
    '#title'          => t('E-store ID'),
    '#default_value'  => $settings['estore_id'],
    '#required'       => TRUE,
  );
  $form['secret'] = array(
    '#type'           => 'textfield',
    '#title'          => t('Shared secret'),
    '#default_value'  => $settings['secret'],
    '#required'       => TRUE,
  );
  $form['live_mode'] = array(
    '#type'           => 'checkbox',
    '#title'          => t('Live mode'),
    '#default_value'  => $settings['live_mode'],
    '#description'    => t("Check this box when your store has been switched to live mode."),
  );
  $form['charge'] = array(
    '#type'           => 'textfield',
    '#title'          => t('Invoice fee'),
    '#default_value'  => $settings['charge'],
    '#description'    => t("If you're charging your customers a fee when they' .
      'select this payment method, you may enter the amount here. ' .
      'Please note, that this does not actually add a fee, it's simply ' .
      'used to display the amount in the invoice terms."),
    '#size'           => 7,
  );
  $form['terms_path'] = array(
    '#type'           => 'textfield',
    '#title'          => t('Path to terms and conditions page'),
    '#default_value'  => $settings['terms_path'],
    '#required'       => TRUE,
  );
  $form['language'] = array(
    '#type'           => 'select',
    '#title'          => t('Language'),
    '#default_value'  => $settings['language'],
    '#required'       => TRUE,
    '#options'        => array(
      'sv-se'         => t('Swedish'),
      'nb-no'         => t('Norwegian'),
      'fi-fi'         => t('Finnish'),
      'sv-fi'         => t('Swedish (Finland)'),
    ),
  );
  if (!libraries_get_path('Mobile-Detect', FALSE)) {
    $form['layout'] = array(
      '#type'           => 'select',
      '#title'          => t('Layout'),
      '#default_value'  => $settings['layout'],
      '#required'       => TRUE,
      '#options'        => array(
        'desktop'       => t('Desktop'),
        'mobile'        => t('Mobile'),
      ),
    );
  }
  if (module_exists('commerce_customer')) {
    // Address field settings.
    $form['customer_profile'] = array(
      '#type'           => 'fieldset',
      '#title'          => t('Customer profile settings'),
      '#collapsible'    => FALSE,
    );
    $form['customer_profile']['billing'] = array(
      '#type'           => 'select',
      '#title'          => t('Create billing profile using information from Klarna'),
      '#description'    => t('Using this option, you would probably want to disable the Billing information from the <a href="@url">Checkout pane</a>', array('@url' => url('admin/commerce/config/checkout'))),
      '#options'        => array(
        0 => t('No'),
        1 => t('Yes'),
      ),
      '#default_value'  => $settings['customer_profile']['billing'],
    );
    if (module_exists('commerce_shipping')) {
      $form['customer_profile']['shipping'] = array(
        '#type'           => 'select',
        '#title'          => t('Create a shipping profile using information from Klarna'),
        '#description'    => t('Using this option, you would probably want to disable the Shipping information from the <a href="@url">Checkout pane</a>', array('@url' => url('admin/commerce/config/checkout'))),
        '#options'        => array(
          0 => t('No'),
          1 => t('Yes'),
        ),
        '#default_value'  => $settings['customer_profile']['shipping'],
      );
    }
  }

  return $form;
}

/**
 * Builds a Website Payments Standard form from an order object.
 *
 * @param mixed $order
 *   The fully loaded order being paid for.
 * @param mixed $settings
 *   An array of settings.
 *
 * @return mixed
 *   A renderable form array.
 */
function commerce_klarna_checkout_order_form($form, &$form_state, $order, $settings) {
  module_load_include('inc', 'commerce_klarna_checkout');
  // Initiate the Klarna object using our settings.
  $klarna = commerce_klarna_checkout_init($settings, $order);
  if (!$klarna) {
    // @todo: error handling
    return array();
  }

  // Display checkout.
  if (isset($klarna['gui']) && isset($klarna['gui']['snippet'])) {
    $snippet = $klarna['gui']['snippet'];
  }
  else {
    $snippet = '';
  }
  $form = array();
  $form['klarna'] = array(
    '#markup' => "<div id='klarna-checkout-form'>{$snippet}</div>",
  );

  $script_path = drupal_get_path('module', 'commerce_klarna_checkout') . '/commerce_klarna_checkout.hide.js';
  $form['klarna']['#attached']['js'][] = $script_path;

  return $form;
}


/**
 * Payment method callback: redirect form.
 */
function commerce_klarna_checkout_redirect_form($form, &$form_state, $order, $payment_method) {
  // Return an error if the enabling action's settings haven't been configured.
  if (empty($payment_method['settings']['estore_id'])) {
    drupal_set_message(t('Klarna Checkout is not configured for use. No estore ID has been specified.'), 'error');
    return array();
  }

  $settings = array(
    // Return to the payment redirect page for processing successful payments.
    'checkout' => 'checkout/' . $order->order_id . '/payment',

    // Return to the payment redirect page for processing successful payments.
    'checkout_confirm' => 'commerce_klarna_checkout/return/' . $order->order_id . '/' . $order->data['payment_redirect_key'],

    // Callback url for processing successful payments.
    // Klarna will exchange the "{checkout.order.uri}" part
    // with the Klarna order URI.
    // Klarna requires the path to be in the form of a query string.
    'callback' => $GLOBALS['base_url'] . '/?q=commerce_klarna_checkout/' . $order->order_id . '/' . $order->data['payment_redirect_key'] . '/i&instance={checkout.order.uri}',

    // Specify the current payment method instance ID in the notify_url.
    'payment_method' => $payment_method['instance_id'],
  );
  return commerce_klarna_checkout_order_form($form, $form_state, $order, $payment_method['settings'] + $settings);
}


/**
 * Render the return page
 *
 * @param mixed $order
 *   The order object the payment applies to.
 * @param string $payment_redirect_key
 *   The redirect key created by Commerce in the checkout pane.
 */
function commerce_klarna_checkout_return_page($order, $payment_redirect_key) {
  module_load_include('inc', 'commerce_klarna_checkout');
  $form = array();
  try {
    if (array_key_exists('klarna_checkout', $_SESSION)) {
      $klarna = commerce_klarna_checkout_get_order($order, $_SESSION['klarna_checkout']);
    }
    else {
      throw new Exception('Order session not found.');
    }
  }
  catch(Exception $e) {
    drupal_set_message($e->getMessage());
    return $form;
  }
  // If the order is complete, just show the message. The push notification will take care of the rest.
  if ($payment_redirect_key == $order->data['payment_redirect_key']) {
    // Display checkout.
    if (isset($klarna['gui']) && isset($klarna['gui']['snippet'])) {
      $snippet = $klarna['gui']['snippet'];
    }
    else {
      $snippet = '';
    }
    $form['klarna'] = array(
      '#markup' => "<div id='klarna-checkout-form'>{$snippet}</div>",
    );
  }
  else {
      // Otherwise display the failure message and send the customer back.
      drupal_set_message(t('Payment failed at the payment server. Please review your information and try again.'), 'error');

      commerce_payment_redirect_pane_previous_page($order, t('Customer payment submission failed at the payment gateway.'));
      drupal_goto(commerce_checkout_order_uri($order));
  }
  unset($_SESSION['klarna_checkout']);
  return $form;
}


/**
 * Creates an example payment transaction for the specified charge amount.
 *
 * @param mixed $payment_method
 *   The payment method instance object used to charge this payment.
 * @param mixed $order
 *   The order object the payment applies to.
 * @param mixed $charge
 *   An array indicating the amount and currency code to charge.
 * @param mixed $klarna_order
 *   The Klarna order object
 */
function commerce_klarna_checkout_transaction($payment_method, $order, $charge, $klarna_order) {
  $endpoint = commerce_klarna_checkout_get_endpoint($payment_method['settings']);
  
  $reservation_id = $klarna_order['reservation'];
  $klarna_status = $klarna_order['status'];

  $transaction = commerce_payment_transaction_new('klarna_checkout', $order->order_id);
  $transaction->instance_id       = $payment_method['instance_id'];
  $transaction->amount            = $charge['amount'];
  $transaction->currency_code     = $charge['currency_code'];
  $transaction->remote_status     = $klarna_status;
  $transaction->status            = COMMERCE_PAYMENT_STATUS_SUCCESS;
  $transaction->remote_id         = $klarna_order->getLocation();
  $transaction->message           = '@reservation_id';
  $transaction->message_variables = array('@reservation_id' => $reservation_id);

  commerce_payment_transaction_save($transaction);
}

/**
 * Menu callback.
 *
 * @param mixed $order
 *   The order object the payment applies to.
 * @param string $payment_redirect_key
 *   The redirect key created by Commerce in the checkout pane.
 */
function commerce_klarna_checkout_process_payment($order, $payment_redirect_key) {
  module_load_include('inc', 'commerce_klarna_checkout');
  $checkout_id = check_plain($_GET['instance']);
  // Make sure the checkout id is a valid URL.
  if (!valid_url($checkout_id)) {
    watchdog('commerce_klarna_checkout', 'Klarna checkout ID is not a valid URL: %url',
      array('%url' => $checkout_id), WATCHDOG_ERROR);
    return;
  }
  try {
    $klarna = commerce_klarna_checkout_get_order($order, $checkout_id);
  }
  catch(Exception $e) {
    return;
  }
  if (isset($order->order_id)) {
    $order = commerce_order_load($order->order_id);
  }
  watchdog(
    'commerce_klarna_checkout',
    'Callback returned from Klarna Checkout with order id %order_id. Commerce order status is %commerce_status. Klarna order status is %klarna_status.',
    array(
      '%order_id'           => $order->order_id,
      '%commerce_status'    => $order->status,
      '%klarna_status'      => $klarna['status'],
    ),
    WATCHDOG_NOTICE
  );

  if (!empty($order->data['payment_method'])) {
    // Load the payment instance id to check the settings.
    $payment_method = commerce_payment_method_instance_load($order->data['payment_method']);
    $settings = $payment_method['settings'];
    if ($settings['customer_profile']['billing']) {
      commerce_klarna_checkout_create_billing($order, $klarna);
    }
    if ($settings['customer_profile']['shipping']) {
      commerce_klarna_checkout_create_shipping($order, $klarna);
    }
    if (empty($order->mail) && isset($klarna['billing_address']['email'])) {
      $order->mail = $klarna['billing_address']['email'];
    }

    // Make sure the order status is completed.
    commerce_payment_redirect_pane_next_page($order, t('Completed order from Klarna push invocation.'));
    
    // Update the order and notify Klarna.
    commerce_klarna_checkout_update_order($order, $klarna);
  }
}


/**
 * Implements hook_commerce_checkout_pane_info().
 */
function commerce_klarna_checkout_commerce_checkout_pane_info() {
  $panes['commerce_klarna_checkout'] = array(
    'title'   => t('Klarna Checkout Order Complete'),
    'base'    => 'commerce_klarna_checkout_pane',

    // The checkout page where this should be displayed by default.
    'page'    => 'complete',
    'weight'  => -5,
  );

  return $panes;
}


/**
 * Payment complete pane: form callback.
 *
 * This is a standard FAPI form which will be presented in the pane.
 * The form gathers and stores information from $order->data, an array which
 * can be populated with free-form keys and values.
 */
function commerce_klarna_checkout_pane_checkout_form($form, $form_state, $checkout_pane, $order) {
  module_load_include('inc', 'commerce_klarna_checkout');

  $pane_form = array();
  // Load klarna order to get the iframe code snippet.
  try {
    if (array_key_exists('klarna_checkout', $_SESSION)) {
      $klarna = commerce_klarna_checkout_get_order($order, $_SESSION['klarna_checkout']);
    }
    else {
      throw new Exception('Order session not found.');
    }
  }
  catch(Exception $e) {
    drupal_set_message($e->getMessage());
    unset($_SESSION['klarna_checkout']);
    return $pane_form;
  }
  if (isset($klarna) && isset($klarna['gui']) && array_key_exists('snippet', $klarna['gui'])) {
    $snippet = $klarna['gui']['snippet'];
    $pane_form['klarna'] = array(
      '#markup' => "<div id='klarna-checkout-form' class='commerce-klarna-checkout-form'>{$snippet}</div>",
    );
  }
  // Unset the session.
  unset($_SESSION['klarna_checkout']);
  return $pane_form;
}

/**
 * Create a billing profile.
 *
 * @param mixed $commerce_order
 *   The commerce order object the payment applies to.
 * @param mixed $klarna
 *   The order object retrieved from Klarna
 */
function commerce_klarna_checkout_create_billing($commerce_order, $klarna) {
  if (!module_exists('commerce_customer')) {
    return FALSE;
  }

  // Create a customer profile.
  $uid = 0;
  if (user_is_logged_in()) {
    // Owner of the profile.
    $uid = $GLOBALS['user']->uid;
  }
  $billing_profile = commerce_customer_profile_new('billing', $uid);
  $billing_profile->commerce_customer_address = array();

  // Create a wrapper for easier management.
  $billing_wrapper = entity_metadata_wrapper('commerce_customer_profile', $billing_profile);

  // Get the billing address from klarna.
  $klarna_billing = $klarna['billing_address'];

  try {
    // Set the values.
    $billing_wrapper->commerce_customer_address->name_line->set($klarna_billing['given_name'] . ' ' . $klarna_billing['family_name']);
    $billing_wrapper->commerce_customer_address->first_name->set($klarna_billing['given_name']);
    $billing_wrapper->commerce_customer_address->last_name->set($klarna_billing['family_name']);
    $billing_wrapper->commerce_customer_address->country->set(strtoupper($klarna_billing['country']));
    $billing_wrapper->commerce_customer_address->locality->set($klarna_billing['city']);
    $billing_wrapper->commerce_customer_address->postal_code->set($klarna_billing['postal_code']);
    $billing_wrapper->commerce_customer_address->thoroughfare->set($klarna_billing['street_address']);
    if (array_key_exists('care_of', $klarna_billing)) {
      $billing_wrapper->commerce_customer_address->premise->set($klarna_billing['care_of']);
    }
    $billing_wrapper->save();
  }
  catch (Exception $error) {
    // Failed to store the address.
    drupal_set_message($error->getMessage());
    return FALSE;
  }

  // Save the profile.
  commerce_customer_profile_save($billing_profile);

  try {
    // Get an order wrapper.
    $order_wrapper = entity_metadata_wrapper('commerce_order', $commerce_order);
    // Associate the order with the customer profile.
    $order_wrapper->commerce_customer_billing->set($billing_wrapper->profile_id->value());
    $order_wrapper->save();
  }
  catch (Exception $error) {
    // Failed to save the profile to the order.
    drupal_set_message($error->getMessage());
    return FALSE;
  }
  return TRUE;
}

/**
 * Create a shipping profile.
 *
 * @param mixed $commerce_order
 *   The commerce order object the payment applies to.
 * @param mixed $klarna
 *   The order object retrieved from Klarna
 */
function commerce_klarna_checkout_create_shipping($commerce_order, $klarna) {
  if (!module_exists('commerce_shipping')) {
    return FALSE;
  }

  // Create a customer profile.
  $uid = 0;
  if (user_is_logged_in()) {
    // Owner of the profile.
    $uid = $GLOBALS['user']->uid;
  }
  $shipping_profile = commerce_customer_profile_new('shipping', $uid);
  $shipping_profile->commerce_customer_address = array();

  // Create a wrapper for easier management.
  $shipping_wrapper = entity_metadata_wrapper('commerce_customer_profile', $shipping_profile);

  // Get the shipping address from klarna.
  $klarna_shipping = $klarna['shipping_address'];

  try {
    $shipping_wrapper->commerce_customer_address->name_line->set($klarna_shipping['given_name'] . ' ' . $klarna_shipping['family_name']);
    $shipping_wrapper->commerce_customer_address->first_name->set($klarna_shipping['given_name']);
    $shipping_wrapper->commerce_customer_address->last_name->set($klarna_shipping['family_name']);
    $shipping_wrapper->commerce_customer_address->country->set(strtoupper($klarna_shipping['country']));
    $shipping_wrapper->commerce_customer_address->locality->set($klarna_shipping['city']);
    $shipping_wrapper->commerce_customer_address->postal_code->set($klarna_shipping['postal_code']);
    $shipping_wrapper->commerce_customer_address->thoroughfare->set($klarna_shipping['street_address']);
    // @todo: add email address
    if (array_key_exists('care_of', $klarna_shipping)) {
      $shipping_wrapper->commerce_customer_address->premise->set($klarna_shipping['care_of']);
    }
    $shipping_wrapper->save();
  }
  catch (Exception $error) {
    // Failed to store the address.
    drupal_set_message($error->getMessage());
    return FALSE;
  }

  // Save the profile.
  commerce_customer_profile_save($shipping_profile);

  try {
    // Get an order wrapper.
    $order_wrapper = entity_metadata_wrapper('commerce_order', $commerce_order);
    // Associate the order with the customer profile.
    $order_wrapper->commerce_customer_shipping->set($shipping_wrapper->profile_id->value());
    $order_wrapper->save();
  }
  catch (Exception $error) {
    // Failed to save the profile to the order.
    drupal_set_message($error->getMessage());
    return FALSE;
  }

  return TRUE;
}
