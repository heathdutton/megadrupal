<?php

/**
 * @file
 * Code for the turnjs_magazines_magazine.
 */
/**
 * The name of the PDF source field.
 */
    const TURNJS_MAGAZINES_FIELD_SOURCE_PDF = 'field_turnjs_magazine_source_pdf';

/**
 * The name of the resulting images created from PDF. They are used
 * as thumbnails and of course as original size images for the paging.
 */
    const TURNJS_MAGAZINES_FIELD_RESULTING_IMAGES = 'field_turnjs_magazine_res_img';

/**
 * Implements hook_node_info().
 */
function turnjs_magazines_node_info() {
  // Create an own node type for magazines on install.
  $items = array(
    'turnjs_magazine' => array(
      'name' => t('turn.js Magazine'),
      'base' => 'node_content',
      'description' => t('Represents a turn.js magazine with multiple pages.
        The magazine is created from a PDF file upload that is being convertet to multiple images.
        The images are required to be displayed as single pages and navigation thumbnails. [Required by turnjs_magazines module]'),
      'has_title' => '1',
      'title_label' => t('Title'),
      'help' => t('This content represents a magazine displayed as pagepeel pages using the great (commercial) turn.js.'),
      'locked' => FALSE,
    ),
  );
  return $items;
}

/**
 * Alter content type settings to add our options.
 */
function turnjs_magazines_form_node_type_form_alter(&$form, &$form_state) {
  if (isset($form['#node_type'])) {
    $form['turnjs_magazines'] = array(
      '#type' => 'fieldset',
      '#title' => t('TurnJS Magazines settings'),
      '#collapsible' => TRUE,
      '#group' => 'additional_settings',
    );
    $form['turnjs_magazines']['turnjs_magazines_node_type'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable this node type as TurnJS Magazine'),
      '#default_value' => _turnjs_magazines_is_turnjs_magazines_node_type($form['#node_type']->type),
      '#description' => t('Enable this checkbox if you want to activate this node type as TurnJS Magazine. In most cases you\'d only want this for turnjs_magazine node type.'),
    );
  }
}

function _turnjs_magazines_is_turnjs_magazines_node_type($node_type) {
  return variable_get('turnjs_magazines_node_type_' . $node_type, FALSE);
}

/**
 * Implements hook_form.
 */
function turnjs_magazines_form($node, $form_state) {
  // Allow the content type to be individualized.
  return node_content_form($node, $form_state);
}

/**
 * Implements hook_entity_view().
 */
function turnjs_magazines_entity_view($entity, $type, $view_mode, $langcode) {
  // The teaser display can be used to link to magazines. We remove unwanted elements here.
  if (isset($entity->type) && _turnjs_magazines_is_turnjs_magazines_node_type($entity->type) && $view_mode == 'teaser') {
    // Only show the first image of the field in teaser display (for references). This is currently not possible in field settings.
    if (isset($entity->content[TURNJS_MAGAZINES_FIELD_RESULTING_IMAGES]['#items'])) {
      $entity->content[TURNJS_MAGAZINES_FIELD_RESULTING_IMAGES]['#items'] = array_slice($entity->content[TURNJS_MAGAZINES_FIELD_RESULTING_IMAGES]['#items'], 0, 1);
    }
    if (isset($entity->content['links'])) {
      // Hide the further links for the teaser.
      // hide() does not work here. Got no clue, why.
      unset($entity->content['links']);
    }
    // Hide the title.
    $entity->title = NULL;
  }
}

/**
 * Registers a Modernizr.load() testObject.
 *
 * Modernizr.load() is actually a standalone library called yepnope.js
 * which is included in Modernizr custom builder. This hook aims to
 * offer 1:1 feature parity with yepnope.js - current version: 1.5
 *
 * Learn how all of these properties interact with Modernizr.load()
 * on the yepnope website: http://yepnopejs.com/#testObject
 *
 * @return
 *   An array to be output as yepnope testObjects.
 */
function turnjs_magazines_modernizr_load() {
  $load = array();
  // We have to make a fake addition here to make modernizr include the yepnope.js
  // Otherwise we can't use it on specific pages at all
  // Sadly modermizr currently does not offer a possibility to add yepnope.js only
  // on specific pages.
  $load[] = array(
    'test' => 'Modernizr.csstransforms',
  );
  return $load;
}

/**
 * Implements hook_node_view().
 */
function turnjs_magazines_node_view($node, $view_mode, $langcode) {
  // Preprocess the display of a TURNJS_MAGAZINES_NODE_TYPE node and add our modifications.
  if (_turnjs_magazines_is_turnjs_magazines_node_type($node->type) && $view_mode === 'full') {
    // turnjs requires modernizr to decide which version to use.
    // Modernizr.csstransforms is required, else the HTML4 version is loaded.
    // We can't use a modernizr hook, because we only need this check on this specific node type.
    $module_path = drupal_get_path('module', 'turnjs_magazines');
    $turnjs_module_js_path = file_create_url($module_path . '/js/turnjs_magazines.js');
    $turnjs_module_css_path = file_create_url($module_path . '/css/turnjs_magazines.css');
    drupal_add_js("yepnope({
        test: Modernizr.csstransforms,
        yep : '" . turnjs_magazines_get_library_file() . "',
        nope: '" . turnjs_magazines_get_html4_library_file() . "',
        both: ['" . turnjs_magazines_get_zoomjs_library_file() . "','" . turnjs_magazines_get_hashjs_library_file() . "', '" . $turnjs_module_js_path . "', '" . $turnjs_module_css_path . "'],
        complete: function(){jQuery(document).ready(function(){turnjs_magazines.loadApp();});}
      });", array('type' => 'inline', 'scope' => 'footer', 'weight' => 5));

    if (isset($node->content[TURNJS_MAGAZINES_FIELD_RESULTING_IMAGES])) {
      // Hide the original resulting image fields - we will use them as thumbnails
      // but have to process them ourselves to fit the markup for turnjs!
      hide($node->content[TURNJS_MAGAZINES_FIELD_RESULTING_IMAGES]);
    }
    // Add the custom turnjs field on the position of the TURNJS_MAGAZINES_FIELD_RESULTING_IMAGES field.
    $node->content['turnjs_magazine_content'] = array(
      '#type' => 'item',
      '#markup' => _turnjs_magazines_get_content($node, $view_mode, $langcode),
      '#weight' => (isset($node->content[TURNJS_MAGAZINES_FIELD_RESULTING_IMAGES]['#weight']) ? $node->content[TURNJS_MAGAZINES_FIELD_RESULTING_IMAGES]['#weight'] : 0),
    );
  }
}

/**
 * Helper function to return the content of our custom node content for turnjs.
 *
 * @param stdClass $node
 * @param String $view_mode
 * @param String $langcode
 * @return String HTML
 */
function _turnjs_magazines_get_content($node, $view_mode, $langcode) {
  // Get the images to use as thumbnails and for the fullsize page view.
  $field_res_images = field_get_items('node', $node, TURNJS_MAGAZINES_FIELD_RESULTING_IMAGES, $langcode);
  $res_images = array();
  if (!empty($field_res_images)) {
    foreach ($field_res_images as $idx => $image) {
      $field_view_value = field_view_value('node', $node, TURNJS_MAGAZINES_FIELD_RESULTING_IMAGES, $field_res_images[$idx], $view_mode, $langcode);
      $res_images[] = show($field_view_value);
    }
  }
  // Provide it to the template.
  return theme('turnjs_magazine', array(
    'res_images' => $res_images)
  );
}

/**
 * Implementation of hook_theme().
 */
function turnjs_magazines_theme() {
  return array(
    'turnjs_magazine' => array(
      'variables' => array('thumbnails' => array()),
      'template' => 'turnjs_magazine',
    )
  );
}

/**
 * Helper function gets the path to the library directory.
 */
function turnjs_magazines_get_library_path() {
  // If Libraries API is enabled, make sure it exists before pointing there.
  if (function_exists('libraries_get_path') && file_exists(libraries_get_path('turn.js'))) {
    $path = libraries_get_path('turn.js');
  }
  else {
    $path = FALSE;
  }

  return $path;
}

/**
 * Helper function gets the path to the library Javascript file.
 */
function turnjs_magazines_get_library_file() {
  if (file_exists(turnjs_magazines_get_library_path() . '/turn.min.js')) {
    return file_create_url(turnjs_magazines_get_library_path() . '/turn.min.js');
  }
  else {
    return FALSE;
  }
}

/**
 * Helper function gets the path to the library Javascript file.
 */
function turnjs_magazines_get_html4_library_file() {
  if (file_exists(turnjs_magazines_get_library_path() . '/turn.html4.min.js')) {
    return file_create_url(turnjs_magazines_get_library_path() . '/turn.html4.min.js');
  }
  else {
    return FALSE;
  }
}

/**
 * Helper function gets the path to the library Javascript file.
 */
function turnjs_magazines_get_zoomjs_library_file() {
  if (file_exists(turnjs_magazines_get_library_path() . '/zoom.min.js')) {
    return file_create_url(turnjs_magazines_get_library_path() . '/zoom.min.js');
  }
  else {
    return FALSE;
  }
}

/**
 * Helper function gets the path to the library Javascript file.
 */
function turnjs_magazines_get_hashjs_library_file() {
  if (file_exists(turnjs_magazines_get_library_path() . '/hash.js')) {
    return file_create_url(turnjs_magazines_get_library_path() . '/hash.js');
  }
  else {
    return FALSE;
  }
}

/**
 * Implements hook_modernizr_info().
 * @return string
 */
function turnjs_magazines_modernizr_info() {
  // Add our requirement for csstransforms to modernizr.
  $tests['csstransforms'] = array(
    'test' => 'csstransforms',
    'type' => 'Modernizr',
    'module' => 'turnjs_magazines',
    'desc' => 'turnjs requires csstransforms.',
  );
  // Add our requirement for input to modernizr.
  $tests['input'] = array(
    'test' => 'input',
    'type' => 'Modernizr',
    'module' => 'turnjs_magazines',
    'desc' => 'turnjs requires input.',
  );
  // Add our requirement for placeholder to modernizr.
  $tests['placeholder'] = array(
    'test' => 'input',
    'type' => 'Modernizr',
    'module' => 'turnjs_magazines',
    'desc' => 'turnjs requires placeholder.',
  );
  return $tests;
}
