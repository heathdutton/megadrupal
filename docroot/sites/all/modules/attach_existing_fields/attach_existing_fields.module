<?php

/**
 * Implements hook_menu().
 */
function attach_existing_fields_menu() {
  $items = array();

  $items['admin/structure/attach-existing-fields'] = array(
    'title' => 'Existing fields',
    'description' => 'Attach existing fields to other bundles',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('attach_existing_fields_field_matrix'),
    'access arguments' => array('administer existing fields'),
    'type' => MENU_NORMAL_ITEM,
  );
  
  return $items;
}

/**
 * Implements hook_permission().
 */
function attach_existing_fields_permission() {
  return array(
    'administer existing fields' => array(
      'title' => t('Attach existing fields to other bundles'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function attach_existing_fields_theme($existing, $type, $theme, $path) {
  return array(
    'attach_existing_fields_field_matrix_form' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Matrix form callback.
 */
function attach_existing_fields_field_matrix() {
  $form = array();
  
  if (!isset($_GET['entity_type'])) {
    $entity_types = db_select('field_config_instance', 'i')
                      ->fields('i', array('entity_type'))
                      ->distinct()
                      ->execute()
                      ->fetchCol();
    
    $form['entity_types'] = array(
       '#type' => 'select',
       '#title' => t('Entity type'),
       '#options' => drupal_map_assoc($entity_types)
    );
    
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Continue'),
      '#submit' => array('attach_existing_fields_redirect'),
    );
    
    return $form;    
  }
  
  $bundles = array();
  $fields = array();
  $entity_type = check_plain($_GET['entity_type']);  
   
  $form['labels'] = array(
      '#type' => 'fieldset',
      '#tree' => TRUE,
  );

  // Capture all the product types
  $instances = db_select('field_config_instance', 'i')
              ->fields('i', array('field_name', 'bundle'))
              ->condition('entity_type', $entity_type, '=')
              ->execute()
              ->fetchAll();
  
  if (empty($instances)) {
    drupal_set_message(t('No field instances found for @entity_type', array('@entity_type' => $entity_type)), 'error');
    return $form;
  }

  foreach ((array) $instances as $instance) {
    // New bundle
    if (!array_key_exists($instance->bundle, $bundles)) {
      $bundles[$instance->bundle] = array(
          'attached_fields' => array($instance->field_name),
      );
    }
    else {
       $bundles[$instance->bundle]['attached_fields'][] = $instance->field_name;
    }

    // Fields
    if (!in_array($instance->field_name, $fields)) {
      $fields[] = $instance->field_name;

      $form['labels']['label-' . $instance->field_name] = array(
        '#type' => 'textfield',
        '#size' => 30,
        '#maxlength' => 30,
      );
    }
  }
  
  $form['entity_type'] = array(
      '#type' => 'value',
      '#value' => $entity_type,
  );
  
  $form['fields'] = array(
      '#type' => 'value',
      '#value' => $fields,
  );

  $form['bundles'] = array(
      '#type' => 'value',
      '#value' => $bundles,
  );

  $form['enable_fields'] = array(
      '#type' => 'fieldset',
      '#tree' => TRUE,
  );

  // Create enabled fields
  foreach ((array) $bundles as $bundle => $values) {
    foreach ((array) $fields as $field) {
      $key = $bundle . '-' . $field;
      if (in_array($field, $values['attached_fields'])) {
        $form['enable_fields'][$key] = array(
            '#markup' => '-',
        );
      } 
      else {
        $form['enable_fields'][$key] = array(
            '#type' => 'checkbox',
        );
      }
    }
  }

  $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Save')
  );

  $form['#theme'] = 'attach_existing_fields_field_matrix_form';
  
  return $form;
}

/**
 * Redirect callback
 */
function attach_existing_fields_redirect(&$form, &$form_state) {
  $values = $form_state['values'];
  $query = array();
  
  if (isset($values['entity_types']) && !empty($values['entity_types'])) {
    $query =  array('entity_type' => $values['entity_types']);
  }
  
  drupal_goto('admin/structure/attach-existing-fields', array('query' => $query));
}

/**
 * Matrix form submission handler.
 */
function attach_existing_fields_field_matrix_submit(&$form, &$form_state) {
  $values = $form_state['values'];
  // Loop through enabled fields
  foreach ((array) $values['enable_fields'] as $key => $value) {
    if ($value) {
      $parts = explode('-', $key);
      $bundle = $parts[0];
      $field = $parts[1];
      $label = (!empty($values['labels']['label-' . $field])) ? $values['labels']['label-' . $field] : $field;
      
      $field_data = field_info_field($field);
      
      $field_data['field_name'] = $field;
      $field_data['entity_type'] = $values['entity_type'];
      $field_data['bundle'] = $bundle;
      $field_data['label'] = $label;
         
      field_create_instance($field_data);
      
      drupal_set_message(t('Field: @field has been enabled for bundle: @bundle', array('@field' => $field, '@bundle' => $bundle)));
    }
  }
}

/**
 * Theme callback for the matrix form.
 */
function theme_attach_existing_fields_field_matrix_form($vars) {
  $output = '';
  $form = $vars['form'];

  $table = array();

  $table['header'] = array_keys($form['bundles']['#value']);
  array_unshift($table['header'], t('Labels'));
  array_unshift($table['header'], t('Fields'));

  $table['rows'] = array();

  foreach ((array) $form['fields']['#value'] as $field) {
    $row = array();
    $row[] = $field;
    $row[] = drupal_render($form['labels']['label-' . $field]);

    foreach ((array) $form['bundles']['#value'] as $bundle => $values) {
      $row[] = drupal_render($form['enable_fields'][$bundle . '-' . $field]);
    }

    $table['rows'][] = $row;
  }

  $output .= theme('table', $table);
  $output .= drupal_render_children($form);

  return $output; 
}

