<?php

/**
 * @file
 * A very light-weight, customizable CSS lightbox - no jQuery nor JavaScript.
 */

/**
 * Implements hook_menu().
 */
function cssbox_menu() {
  $items = array();

  $items['admin/config/media/cssbox'] = array(
    'title' => 'CssBox',
    'description' => 'Adjust CssBox settings.',
    'file' => 'cssbox.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cssbox_admin_settings'),
    'access arguments' => array('administer site configuration'),
  );

  return $items;
}

/**
 * Implements hook_field_formatter_info().
 */
function cssbox_field_formatter_info() {
  return array(
    'cssbox' => array(
      'label' => t('CssBox'),
      'field types' => array('image'),
      'settings' => array(
        'cssbox_content_style' => '',
        'cssbox_popup_style' => '',
        'cssbox_gallery' => 'post',
        'cssbox_caption' => 'auto',
        'cssbox_caption_custom' => '',
        'cssbox_multivalue_index' => NULL,
        'cssbox_output' => '',
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function cssbox_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $image_styles = image_style_options(FALSE);
  $image_styles_hide = $image_styles;
  $element['cssbox_content_style'] = array(
    '#title' => t('Content image style'),
    '#type' => 'select',
    '#default_value' => $settings['cssbox_content_style'],
    '#empty_option' => t('None (original image)'),
    '#options' => $image_styles_hide,
    '#description' => t('Image style to use in the content.'),
  );
  $element['cssbox_popup_style'] = array(
    '#title' => t('CssBox image style'),
    '#type' => 'select',
    '#default_value' => $settings['cssbox_popup_style'],
    '#empty_option' => t('None (original image)'),
    '#options' => $image_styles,
    '#description' => t('Image style to use in the CssBox.'),
  );

  $caption = array(
    'auto' => t('Automatic'),
    'title' => t('Title text'),
    'alt' => t('Alt text'),
    'node_title' => t('Content title'),
    'custom' => t('Custom (with tokens)'),
    'none' => t('None'),
  );
  $element['cssbox_caption'] = array(
    '#title' => t('Caption'),
    '#type' => 'select',
    '#default_value' => $settings['cssbox_caption'],
    '#options' => $caption,
    '#description' => t('Automatic will use the first none empty value of the title, the alt text and the content title.'),
  );
  $element['cssbox_caption_custom'] = array(
    '#title' => t('Custom caption'),
    '#type' => 'textfield',
    '#default_value' => $settings['cssbox_caption_custom'],
    '#states' => array(
      'visible' => array(
        ':input[name$="[settings_edit_form][settings][cssbox_caption]"]' => array('value' => 'custom'),
      ),
    ),
  );
  // Allow users to hide or set a custom recursion limit.
  if (module_exists('token') && $recursion_limit = min(variable_get('token_tree_recursion_limit', 3), variable_get('cssbox_token_recursion_limit', 3))) {
    $element['cssbox_token'] = array(
      '#type' => 'fieldset',
      '#title' => t('Replacement patterns'),
      '#theme' => 'token_tree',
      '#token_types' => array($instance['entity_type'], 'file'),
      '#recursion_limit' => $recursion_limit,
      '#dialog' => TRUE,
      '#states' => array(
        'visible' => array(
          ':input[name$="[settings_edit_form][settings][cssbox_caption]"]' => array('value' => 'custom'),
        ),
      ),
    );
  }
  else {
    $element['cssbox_token'] = array(
      '#type' => 'fieldset',
      '#title' => t('Replacement patterns'),
      '#description' => '<strong class="error">' . t('For token support the <a href="@token_url">token module</a> must be installed.', array('@token_url' => 'http://drupal.org/project/token')) . '</strong>',
      '#states' => array(
        'visible' => array(
          ':input[name$="[settings_edit_form][settings][cssbox_caption]"]' => array('value' => 'custom'),
        ),
      ),
    );
  }

  $output = array(
    'script' => t('Output as JavaScript (SEO friendly)'),
    'html' => t('Output directly as hidden DIV'),
  );
  $element['cssbox_output'] = array(
    '#title' => t('Popup HTML output'),
    '#type' => 'select',
    '#default_value' => $settings['cssbox_output'],
    '#options' => $output,
    '#description' => t('How CssBox should output each Popup HTML to the DOM.'),
  );

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function cssbox_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary = array();
  // Get all available image styles.
  $image_styles = image_style_options(FALSE);
  unset($image_styles['']);

  // Define content image style.
  if (isset($image_styles[$settings['cssbox_content_style']])) {
    $summary[] = t('Content image style: @style', array('@style' => $image_styles[$settings['cssbox_content_style']]));
  }
  elseif ($settings['cssbox_content_style'] == 'hide') {
    $summary[] = t('Content image style: Hide');
  }
  else {
    $summary[] = t('Content image style: Original image');
  }

  // Define popup image style.
  if (isset($image_styles[$settings['cssbox_popup_style']])) {
    $summary[] = t('CssBox popup image style: @style', array('@style' => $image_styles[$settings['cssbox_popup_style']]));
  }
  else {
    $summary[] = t('CssBox popup image style: Original image');
  }

  // Caption options.
  $caption = array(
    'auto' => t('Automatic'),
    'title' => t('Title text'),
    'alt' => t('Alt text'),
    'node_title' => t('Content title'),
    'custom' => t('Custom (with tokens)'),
    'none' => t('None'),
  );
  if (isset($settings['cssbox_caption'])) {
    $summary[] = t('CssBox caption: @type', array('@type' => $caption[$settings['cssbox_caption']]));
  }

  $output = array(
    'script' => t('as JavaScript (SEO friendly)'),
    'html' => t('directly as hidden DIV'),
  );
  if (isset($settings['cssbox_output'])) {
    $summary[] = t('CssBox Popup output: @type', array('@type' => $output[$settings['cssbox_output']]));
  }

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 */
function cssbox_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $index = $display['settings']['cssbox_multivalue_index'];
  $count = count($items);

  foreach ($items as $delta => $item) {
    if ($index === NULL || $index === $delta) {
      $next = $prev = array();
      // Get next element.
      if ($delta != $count - 1) {
        $next = $items[$delta + 1];
      }
      // Get previous element.
      if ($delta > 0) {
        $prev = $items[$delta - 1];
      }
      $element[$delta] = array(
        '#theme' => 'cssbox_image_formatter',
        '#item' => $item,
        '#entity_type' => $entity_type,
        '#entity' => $entity,
        '#prev' => $prev,
        '#next' => $next,
        '#field' => $field,
        '#display_settings' => $display['settings'],
      );
    }
  }

  // Output CSS if there are items to display.
  if ($count > 0) {
    drupal_add_css(drupal_get_path('module', 'cssbox') . '/cssbox.css', array('group' => CSS_DEFAULT, 'every_page' => FALSE));
  }

  return $element;
}

/**
 * Implements hook_theme().
 */
function cssbox_theme() {
  return array(
    'cssbox_image_formatter' => array(
      'variables' => array(
        'item' => NULL,
        'entity_type' => NULL,
        'entity' => NULL,
        'prev' => NULL,
        'next' => NULL,
        'field' => array(),
        'display_settings' => array(),
      ),
      'file' => 'cssbox.theme.inc',
    ),
    'cssbox_imagefield' => array(
      'variables' => array(
        'image' => array(),
        'path' => NULL,
        'caption' => NULL,
        'output' => NULL,
        'fid' => NULL,
        'next' => NULL,
        'prev' => NULL,
      ),
      'file' => 'cssbox.theme.inc',
    ),
    'cssbox_popup' => array(
      'variables' => array(
        'id' => array(),
        'image' => array(),
        'caption' => NULL,
        'prev' => NULL,
        'next' => NULL,
      ),
      'file' => 'cssbox.theme.inc',
    ),
  );
}
