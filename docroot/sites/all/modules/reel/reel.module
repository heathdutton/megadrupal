<?php
// $Id$
/*
 * @file reel.module
 * Provides jquery reel formatter for image fields
 * @copyright Copyright(c) 2011 Lee Rowlands
 * @license GPL v2 http://www.fsf.org/licensing/licenses/gpl.html
 * @author Lee Rowlands contact at rowlandsgroup dot com
 * 
 */

/**
 * Implementation of hook_field_formatter_info().
 */
function reel_field_formatter_info() {
  $ret = array(
    'reel' => array(
      'label' => t('Jquery Reel'),
      'field types' => array('image'),
      'settings' => array(
        'footage' => 6,
        'frame' => 1,
        'frames' => 36,
        'hint' => '',
        'horizontal' => 1,
        'indicator' => 0,
        'klass' => '',
        'loops' => 1,
        'spacing' => 0,
        'stitched' => NULL,
        'cw' => 0,
        'delay' => -1,
        'speed' => '0'
      ),
    ),
  );
  return $ret;
}

/**
 * Implements hook_field_formatter_view().
 */
function reel_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  
  if ($display['type'] == 'reel') {
  
    $settings = $display['settings'];
    $image = array_shift($items);
    $delta = array_shift(array_keys($items));
    $sprite = array_shift($items);
    $element[0] = array('#markup' =>
      theme(
        'reel',
        array(
          'image' => $image,
          'sprite' => $sprite,
          'settings' => $settings,
        )
      )
    );
  
    $js = array();
    $settings['image'] = file_create_url($sprite['uri']);

    // Some settings need to be converted to numeric values
    $int = array('frames', 'frame', 'footage', 'spacing', 'indicator');
    foreach ($int as $setting) {
      $settings[$setting] = (int)$settings[$setting];
    }
    $settings['delay'] = (float)$settings['delay'];
    $settings['speed'] = (float)$settings['speed'];
  
    $js = array();
    $path = drupal_get_path('module', 'reel');
    $js[] = $path .'/js/jquery.cookie-min.js';
    $js[] = $path .'/js/jquery.mousewheel-min.js';
    $js[] = $path .'/js/jquery.disabletextselect-min.js';
    $js[] = $path .'/js/jquery.reel-min.js';
    $js[] = $path .'/js/reel.js';
    // Now our settings
    $js[] = array('data' => array('reel' => $settings),
                  'type' => 'setting');
    $element[0]['#attached']['js'] = $js;
    
    
    return $element;

  }
  return $element;
}

/**
 * Implements hook_field_formatter_settings_form
*/
function reel_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display_type = $instance['display'][$view_mode]['type'];
  if ($display_type == 'reel') {
    $display = $instance['display'][$view_mode];
    $settings = $display['settings'];
  
    $element = array();
    // We cover all of the jQuery reel options
    //  footage:            6, // number of frames per line/column
    $element['footage'] = array(
      '#type' => 'select',
      '#title' => t('Footage'),
      '#default_value' => isset($settings['footage']) ? $settings['footage']: 6,
      '#options' => drupal_map_assoc(range(1, 20)),
      '#description' => t('Choose the number of frames per line/column'),
    );
    //  frame:              1, // initial frame
    $element['frame'] = array(
      '#type' => 'select',
      '#title' => t('Initial frame'),
      '#default_value' => isset($settings['frame']) ? $settings['frame'] : 1,
      '#options' => drupal_map_assoc(range(1, isset($settings['frame']) ? $settings['frame'] : 36)),
      '#description' => t('Choose the initial frame'),
    );
    //  frames:            36, // total number of frames; every 10Â° for full rotation
    $element['frames'] = array(
      '#type' => 'select',
      '#title' => t('Number of frames'),
      '#default_value' => isset($settings['frames']) ? $settings['frames'] : 36,
      '#options' => drupal_map_assoc(range(1, isset($settings['frames']) ? $settings['frames'] * 2 : 72)),
      '#description' => t('Choose the total number of frames, eg 36 equals 10&deg; for each frame'),
    );
    //  hint:              '', // mouse-sensitive area hint tooltip
    $element['hint'] = array(
      '#type'          => 'textfield',
      '#title'         => t('Hint'),
      '#default_value' => $settings['hint'],
      '#size'          => 60,
      '#description'   => t('Mouse sensitive area hint tooltip'),
      '#maxlength'     => 128,
      '#required'      => FALSE,
    );
    //  horizontal:      true, // roll flow; defaults to horizontal
    $element['horizontal'] = array(
      '#type' => 'checkbox',
      '#title' => t('Horizontal'),
      '#default_value' => isset($settings['horizontal']) ? $settings['horizontal']: 1,
      '#description' => t('Roll flow - horizontal, uncheck for vertical'),
    );
    //  indicator:          0, // size of a visual indicator of reeling (in pixels)
    $element['indicator'] = array(
      '#type' => 'select',
      '#title' => t('Indicator'),
      '#default_value' => isset($settings['indicator']) ? $settings['indicator'] : 0,
      '#options' => drupal_map_assoc(range(0, 10)),
      '#description' => t('Choose the size of the visual indicator of reeling (in pixels)'),
    );
    //  klass:             '', // plugin instance class name
    $element['klass'] = array(
      '#type'          => 'textfield',
      '#title'         => t('Class'),
      '#default_value' => $settings['klass'],
      '#size'          => 60,
      '#description'   => t('Plugin instance class name'),
      '#maxlength'     => 128,
      '#required'      => FALSE,
    );
    //  loops:           true, // is it a loop?
    $element['loops'] = array(
      '#type' => 'checkbox',
      '#title' => t('Loops?'),
      '#default_value' => isset($settings['loops']) ? $settings['loops']: 1,
      '#description' => t('Is it a loop?'),
    );
    //  spacing:            0, // space between frames on reel
    $element['spacing'] = array(
      '#type' => 'select',
      '#title' => t('Spacing'),
      '#default_value' => isset($settings['spacing']) ? $settings['spacing'] : 0,
      '#options' => drupal_map_assoc(range(0, 10)),
      '#description' => t('Spacing between frames on reel'),
    );
    //  stitched:   undefined, // pixel width (length) of a stitched (rectilinear) panoramic reel
    $element['stitched'] = array(
      '#type'          => 'textfield',
      '#title'         => t('Stitched'),
      '#default_value' => $settings['stitched'],
      '#size'          => 60,
      '#description'   => t('Pixel width (length) of a stitched (rectilinear) panoramic reel'),
      '#maxlength'     => 128,
      '#required'      => FALSE,
    );
    //  cw:             false, // true for clockwise organization of sprite
    $element['cw'] = array(
      '#type' => 'checkbox',
      '#title' => t('Clockwise?'),
      '#default_value' => isset($settings['cw']) ? $settings['cw']: 0,
      '#description' => t('Is it a clockwise loop?'),
    );
    //  delay:             -1, // delay before autoplay in seconds (no autoplay by default (-1))
    $element['delay'] = array(
      '#type' => 'select',
      '#title' => t('Autostart delay'),
      '#default_value' => isset($settings['delay']) ? $settings['delay'] : -1,
      '#options' => array(
        -1 => t('No autostart'),
        0.5 => t('500 ms'),
        1 => t('1s'),
        2 => t('2s'),
        5 => t('5s'),
        10 => t('10s'),
      ),
      '#description' => t('Select the autostart delay (if any) - note requires a speed too (below).'),
    );

    //  speed:              0, // animated rotation speed in revolutions per second (Hz)
    $element['speed'] = array(
      '#type' => 'select',
      '#title' => t('Animation speed'),
      '#default_value' => isset($settings['delay']) ? $settings['delay'] : -1,
      '#options' => array(
        '0' => t('None'),
        '0.1' => t('0.1'),
        '0.2' => t('0.2 (normal)'),
        '0.33' => t('0.33'),
        '0.4' => t('0.4'),
        '0.5' => t('0.5 (medium)'),
        '0.66' => t('0.66'),
        '0.75' => t('0.75'),
        '1' => t('1 (fast)'),
      ),
      '#description' => t('Select the speed of the animation in revs per second'),
    );

    return $element;  
  }
}

/**
 * Implements hook_field_formatter_settings_summary
*/
function reel_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display_type = $instance['display'][$view_mode]['type'];
  if ($display_type == 'reel') {
    $display = $instance['display'][$view_mode];
    $settings = $display['settings'];
    $map = array(
      'footage' => array('title' => t('Footage')),
      'speed' => array('title' => t('Speed')),
      'frame' => array('title' => t('Frame')),
      'frames' => array('title' => t('Frames')),
      'hint' => array('title' => t('Hint')),
      'horizontal' => array('title' => t('Footage'),
                            'map' => array(0 => t('False'), 1 => t('True'))),
      'indicator' => array('title' => t('Indicator size')),
      'klass' => array('title' => t('Plugin class')),
      'loops' => array('title' => t('Loops'),
                            'map' => array(0 => t('False'), 1 => t('True'))),
      'spacing' => array('title' => t('Frame spacing')),
      'stitched' => array('title' => t('Stitched size')),
      'cw' => array('title' => t('Clockwise'),
                            'map' => array(0 => t('False'), 1 => t('True'))),
      'delay' => array('title' => t('Autostart (seconds)'),
                            'map' => array(-1 => t('No autostart')))
    );
  
    $summary = array(t('Jquery Reel options'));
  
    foreach ($settings as $key => $value) {
      $title = $map[$key]['title'];
      if (isset($map[$key]['map']) &&
          isset($map[$key]['map'][$value])) {
        $value = $map[$key]['map'][$value];
      }
      $summary[] = $title. ': '. $value;
    }
  
    return implode('<br />', $summary);
  }
}

/**
 * Implementation of hook_theme().
 */
function reel_theme($existing, $type, $theme, $path) {
  return array(
    'reel' => array(
      'arguments' => array('image' => NULL,
                           'sprite' => NULL,
                           'settings' => NULL),
      'template' => 'theme/reel'
    ),
  );
}

/**
 * Theme preprocessor for theme_reel
*/
function template_preprocess_reel(&$vars) {
  $image = $vars['image'];
  $sprite = $vars['sprite'];
  $settings = $vars['settings'];
  $rendered_image = array(
    'path' => $image['uri'],
    'alt' => $image['alt'],
  );
  
  $info = image_get_info($image['uri']);
  if ($info) {
    $rendered_image += $info;
  }
  // Do not output an empty 'title' attribute.
  if (drupal_strlen($image['title']) > 0) {
    $rendered_image['title'] = $image['title'];
  }

  $vars['rendered_image'] = theme('image', $rendered_image);
}