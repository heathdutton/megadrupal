<?php

/**
 * @file
 * This module create hierarchical select form element for the workbench
 * access section assignment.
 */

/**
 * Separator to be used in hierarchical select field.
 */
define('WA_HS_SECTION_SEPARATOR', '|');

/**
 * Implements hook_form_FORM_ID_alter().
 */
function wa_hs_section_form_workbench_access_user_form_alter(&$form, &$form_state, $form_id) {

  // User id of the user.
  $access_uid = $form['uid']['#value'];
  $account = user_load($access_uid);

  // Assigned section list of user.
  $section_items = array_keys($account->workbench_access);

  // Load the active tree.
  $active = workbench_access_get_active_tree();
  // Get only the active items.
  $tree = array_intersect_key($active['tree'], $active['active']);
  // Get all access type id from access scheme.
  $access_type_id = array_values($active['access_scheme']['access_type_id']);

  $form['helptext'] = array(
    '#type' => 'markup',
    '#markup' => '<p>' . t('The list below shows your editorial groups. You may edit any content in these sections and their children.') . '</p>',
  );

  $data = array();
  foreach ($access_type_id as $access_key => $access_id) {
    $form['sections'][$access_id] = array(
      '#type' => 'fieldset',
      '#title' => check_plain($active['tree'][$access_id]['name']),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#tree' => TRUE,
    );

    // Get hierarchical select data.
    $data = _wa_hs_section_data_structure($tree, $access_id);

    // Set default form items.
    $default_items = array();
    if (!empty($section_items)) {
      foreach ($section_items as $item) {
        if (is_string($item)) {
          $default_items[] = $item;
          continue;
        }
        $default_items[] = _wa_hs_section_hierarchy_transform($tree, $item);
      }
    }
    // Hierarchical select field for section.
    $form['sections'][$access_id][$access_key] = array(
      '#type' => 'hierarchical_select',
      '#config' => array(
        'module' => 'hs_smallhierarchy',
        'params' => array(
          'hierarchy' => $data,
          'id' => 'hs_section',
          'separator' => WA_HS_SECTION_SEPARATOR,
        ),
        'enforce_deepest' => 0,
        'entity_count' => 0,
        'require_entity' => 0,
        'save_lineage' => 0,
        'resizable' => 0,
        'level_labels' => NULL,
        'dropbox' => array(
          'status' => 1,
          'limit' => 0,
          'reset_hs' => 1,
        ),
        'editability' => array(
          'status' => 0,
        ),
        'render_flat_select' => 0,
      ),
      '#default_value' => $default_items,
    );
  }

  // Add a submit handler before the actual workbench access form
  // submit handler to arrange the sections.
  array_unshift($form['#submit'], 'wa_hs_section_arrange_sections');
}

/**
 * Submit handler for arrange the sections.
 */
function wa_hs_section_arrange_sections($form, &$form_state) {

  $results = $form_state['values']['sections'];
  $access_ids = array_keys($results);
  foreach ($access_ids as $access_key => $access_id) {
    // Unset the sections to populate with proper formatted data.
    unset($form_state['values']['sections'][$access_id]);
    foreach ($results[$access_id][$access_key] as $result) {
      // Find deepest id(11) from the formatted result string(1|11)
      // and store in the section list so workbench_access_user_form_submit()
      // can properly save user assignments.
      if (($id = substr(strrchr($result, WA_HS_SECTION_SEPARATOR), 1)) !== FALSE) {
        $form_state['values']['sections'][$access_id][$id] = 1;
      }
      else {
        $form_state['values']['sections'][$access_id][$result] = 1;
      }
    }
  }
}

/**
 * Helper function to find all parents of a item and format with separator.
 *
 * @param array $tree
 *   Array of items with parent child relationship.
 * @param int $item
 *   Item id of a tree.
 *
 * @return string
 *   Formatted string of parent items.
 *   Ex: parent, parent|first_child, parent|first_child|second_child.
 */
function _wa_hs_section_hierarchy_transform($tree, $item) {
  $output = "";

  // Find all the parents of a item.
  $parents = _wa_hs_section_get_parents_all($tree, $item);

  $items = array();
  foreach ($parents as $parent) {
    if (!in_array($parent['id'], array_keys($tree))) {
      continue;
    }
    $items[] = $parent['id'];
  }

  // Construct the output as parent, parent|first_child order.
  $output = implode(WA_HS_SECTION_SEPARATOR, $items);

  return $output;
}

/**
 * Helper function to generate data structure for hierarchical select section.
 *
 * @param array $tree
 *   Array of items.
 * @param string $access_id
 *   Access type id.
 *
 * @return array
 *   Data structure of hierarchical select section.
 */
function _wa_hs_section_data_structure($tree, $access_id) {
  $data = array();
  $used = array();
  if (empty($tree)) {
    return $data;
  }

  foreach ($tree as $section_id => $section) {
    if ($section['access_type_id'] == $access_id) {
      if (is_string($section_id)) {
        $data[$section_id]['label'] = t('All of') . ' ' . check_plain($section['name']);
        continue;
      }
      if (!empty($used) && in_array($section_id, $used)) {
        continue;
      }
      $data[$section_id]['label'] = check_plain($section['name']);
      $children = _wa_hs_section_build_child_tree($tree, $section_id, $used);
      if (!empty($children)) {
        $data[$section_id]['children'] = _wa_hs_section_build_child_tree($tree, $section_id);
      }
    }
  }
  return $data;
}

/**
 * Helper function to generate multidimensional array structure.
 *
 * @param array $items
 *   Array of items with parent child relationship.
 * @param int $parent
 *   (optional) Parent item of a tree.
 * @param array $used
 *   (optional) Array of used items.
 *
 * @return array
 *   Multidimensional array of items.
 */
function _wa_hs_section_build_child_tree($items, $parent = 0, &$used = array()) {
  $data = array();
  if (empty($items)) {
    return $data;
  }
  foreach ($items as $key => $item) {
    unset($item['children']);
    if ($item['parent'] == $parent) {
      $used[] = $key;
      $children = _wa_hs_section_build_child_tree($items, $key, $used);
      if (!empty($children)) {
        $item[$key]['label'] = check_plain($item['name']);
        $item[$key]['children'] = $children;
      }
      $data[$key]['label'] = check_plain($item['name']);
      $data[$key]['children'] = $children;
    }
  }
  return $data;
}

/**
 * Helper function to find all the parents of a item.
 *
 * @param array $tree
 *   Array of items with parent child relationship.
 * @param int $id
 *   Item id of a tree.
 *
 * @return array
 *   Array of items.
 */
function _wa_hs_section_get_parents_all($tree, $id) {
  $n = &drupal_static(__FUNCTION__, 0);
  $data = array();

  foreach ($tree as $access_id => $item) {
    if (is_numeric($access_id) && $access_id == $id) {
      $parent = $item['parent'];
      unset($tree[$access_id]);
      $data = _wa_hs_section_get_parents_all($tree, $parent);
      $data[$n]['id'] = $item['access_id'];
      $data[$n]['name'] = $item['name'];
      $n++;
    }
  }
  return $data;
}
