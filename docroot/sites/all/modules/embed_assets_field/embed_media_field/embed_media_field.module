<?php
/**
 * @file
 *  Embed media field module
 */

/**
 * Implements hook_assets_field_type_info_alter()
 */
function embed_media_field_assets_field_type_info_alter(&$type_info) {
  $type_info['media'] = array(
    'label' => t('Media'),
    'module' => 'media',
  );
}

/**
 * Implement hook_filter_info().
 */
function embed_media_field_filter_info() {
  $filters['embed_media_field'] = array(
    'title' => t('Embed Media Field Filter'),
    'description' => t('Convert embeddd media field tags to a form that can then be understood by the media module\'s markup filter'),
    'process callback' => 'embed_media_field_filter_embed_media_field_process',
  );
  return $filters;
}

/**
 * Implements hook_element_info_alter().
 */
function embed_media_field_element_info_alter(&$types) {
  $types['text_format']['#element_validate'][] = 'embed_media_field_text_format_validate';
  $types['text_format']['#pre_render'][] = 'embed_media_field_pre_render_text_format';
}

/**
 * Callback for #element_validate property of text_format
 *
 * @see embed_media_field_element_info_alter()
 */
function embed_media_field_text_format_validate($element, &$form_state, $form) {

  if (empty($element['#value']) || empty($element['#entity_type'])) {
    return;
  }

  $entity_type = $element['#entity_type'];
  $bundle = $element['#bundle'];
  $embed_field = embed_assets_field_get_bundle_asset_fields($entity_type, $bundle, 'media');

  if (empty($embed_field) || empty($form[$embed_field])) {
    return;
  }

  $asset_values = &drupal_static(__FUNCTION__, array());

  if (empty($asset_values)) {
    // Remove all the existing assets (only the numeric keys)
    foreach($form_state['values'][$embed_field][LANGUAGE_NONE] as $key => $asset_value) {
      if (is_numeric($key)) {
        unset($form_state['values'][$embed_field][LANGUAGE_NONE][$key]);
      }
    }
    $asset_values = $form_state['values'][$embed_field];
  }

  // Validate that there are no media tags using standard file ids anymore. UUIDs are required.
  // If an asset _is_ attached in the embed_media_field then replace it's fid with the uuid reference, otherwise report an error
  if (preg_match_all('/\[\[.*?("fid":"(\d+)").*?\]\]/', $element['#value'], $matches)) {
    list($tokens, $fid_attributes, $fids) = $matches;

    $matching_uuids = entity_get_uuid_by_id('file', $fids);
    $replacements = array();
    foreach ($fids as $index => $fid) {
      if (empty($matching_uuids[$fid])) {
        form_error($element, t('The media asset with fid <b>@fid</b> does not have a uuid', array('@fid' => $fid)));
      }
      else {
        $replacements[$tokens[$index]] = str_replace(
          $fid_attributes[$index],
          sprintf('"fid":"uuid-%s"', $matching_uuids[$fid]),
          $tokens[$index]
        );
        // Attach this fid to the embed_media_field
        $asset_values[LANGUAGE_NONE][] = array(
          'fid' => $fid,
          '_weight' => count($asset_values[LANGUAGE_NONE]),
        );
      }
    }

    if (!empty($replacements)) {
      form_set_value(
        $element,
        str_replace(
          array_keys($replacements),
          array_values($replacements),
          $element['#value']
        ),
        $form_state
      );
    }
  }

  // Look for uuid-links to files
  if (preg_match_all('#\[uuid-link:file:([^\]]+)\]#', $element['#value'], $matches)) {
    $uuids = $matches[1];
    $fids = entity_get_id_by_uuid('file', $uuids);
    foreach ($fids as $fid) {
      $asset_values[LANGUAGE_NONE][] = array(
        'fid' => $fid,
        '_weight' => count($asset_values[LANGUAGE_NONE]),
      );
    }
  }

  $form_state['values'][$embed_field] = $asset_values;
}

/**
 * Callback for Embed Media Field Filter. Must run before the media filter 'Converts Media tags to Markup'
 */
function embed_media_field_filter_embed_media_field_process($text, $filter, $format, $langcode, $cache, $cache_id) {
  return embed_media_field_replace_media_uuid_tokens_with_fid_tokens($text);
}

function embed_media_field_replace_media_uuid_tokens_with_fid_tokens($text) {
  if (!preg_match_all('/\[\[.*?("fid":"(uuid-([^\"]+))").*?\]\]/', $text, $matches)) {
    return $text;
  }

  $token_uuids = $matches[3];
  $matching_file_ids = entity_get_id_by_uuid('file', $token_uuids);

  // We are replacing the part of media tokens which looks like "fid":"uuid-<uuid>"
  // with the actual fid (eg. "fid":"230") so that the subsequent media filter 'Converts Media tags to Markup'
  // will correctly replace the token. This allows us to avoid duplicating a lot of the media module logic.
  $replacements = array();
  foreach ($token_uuids as $index => $uuid) {
    // Unless the token references a real file, replace it with an empty string
    $replacement = '';
    if (!empty($matching_file_ids[$uuid])) {
      // We have a file id matching the uuid in this token
      $replacement = str_replace(
        $matches[2][$index],
        $matching_file_ids[$uuid],
        $matches[0][$index]
      );
    }
    $replacements[$matches[0][$index]] = $replacement;
  }

  $text = str_replace(
    array_keys($replacements),
    array_values($replacements),
    $text
  );

  return $text;  
}

/**
 * Callback for #pre_render property of text_format
 *
 * @see embed_media_field_element_info_alter()
 */
function embed_media_field_pre_render_text_format($element) {
  if (empty($element['value']) || empty($element['#entity_type'])) {
    return $element;
  }

  $entity_type = $element['#entity_type'];
  $bundle = $element['#bundle'];
  $embed_field = embed_assets_field_get_bundle_asset_fields($entity_type, $bundle, 'media');

  if ($embed_field) {
    $value = embed_media_field_replace_media_uuid_tokens_with_fid_tokens($element['value']['#value']);
    $element['value']['#value'] = $value;
    $element['value']['#default_value'] = $value;
  }

  return $element;
}
