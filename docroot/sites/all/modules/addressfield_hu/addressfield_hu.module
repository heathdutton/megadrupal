<?php
/**
 * @file
 * Basic functions and hooks for the addressfield_hu module.
 */

define('ADDRESSFIELD_HU_BASE_TABLE', 'addressfield_hu');

/**
 * Implements hook_ctools_plugin_directory().
 */
function addressfield_hu_ctools_plugin_directory($module, $plugin) {
  if ($module == 'addressfield') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_menu()
 */
function addressfield_hu_menu() {
  $items = array();

  $items['admin/structure/addressfield_hu'] = array(
    'title' => 'Administer hungarian address',
    'page callback' => 'addressfield_hu_admin',
    'access arguments' => array(array('administer', 'create',  'edit', 'delete')),
    'access callback' => 'addressfield_hu_access',
    'file' => 'addressfield_hu.pages.inc',
  );

  $items['admin/structure/addressfield_hu/default'] = array(
    'title' => 'Administer hungarian address',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/structure/addressfield_hu/csv_debug'] = array(
    'title' => 'Import CSV files',
    'page callback' => 'addressfield_hu_csv_debug',
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array(array('administer', 'create',  'edit', 'delete')),
    //'access callback' => 'addressfield_hu_access',
    // TMP disabled
    'access callback' => FALSE,
    'file' => 'addressfield_hu.pages.inc',
  );

  $items['admin/structure/addressfield_hu/%/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'addressfield_hu_edit',
    'page arguments' => array(3),
    'access arguments' => array(array('administer', 'edit')),
    'access callback' => 'addressfield_hu_access',
    'file' => 'addressfield_hu.pages.inc',
  );

  $items['admin/structure/addressfield_hu/%/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'addressfield_hu_delete',
    'page arguments' => array(3),
    'access arguments' => array(array('administer', 'delete')),
    'access callback' => 'addressfield_hu_access',
    'file' => 'addressfield_hu.pages.inc',
  );
  $items['addressfield_hu/autocomplete/%'] = array(
    'title' => 'Addressfieldhu autocomplete',
    'page callback' => 'addressfield_hu_autocomplete',
    'access arguments' => array('access content'),
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'file' => 'addressfield_hu.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_form_alter().
 */
function addressfield_hu_form_alter(&$form, &$form_state, $form_id) {
// dsm($form_id);
}
/**
 * Implements hook_permission().
 */
function addressfield_hu_permission() {
  return array(
    'administer hungarian address' => array(
      'title' => t('Administer hungarian address'),
      'description' => t('Add, edit and delete any address from hungarian addresse database.')
    ),
    'create hungarian address' => array(
      'title' => t('Create hungarian address'),
    ),
    'edit hungarian address' => array(
      'title' => t('Edit any hungarian address'),
    ),
    'delete hungarian address' => array(
      'title' => t('Delete any hungarian address'),
    )
  );
}

/**
 * Custom access callback.
 * Check possible values of $permissions
 * @see addressfield_hu_permission()
 *
 * @param type $permissions
 * @return boolean
 */
function addressfield_hu_access($permissions) {
  foreach ($permissions as $perm) {
    if (user_access($perm . ' hungarian address')) {
      return TRUE;
    }
  }
}

/**
 * Get a full address record from hu table based on postal code.
 *
 * @param type $postal_code
 * @return array
 */
function addressfield_hu_get_address_by_postal_code($postal_code = NULL) {
  if (is_null($postal_code)) {
    return FALSE;
  }
  $address = &drupal_static('addressfield_hu', array());
  if (array_key_exists($postal_code, $address)) {
    return $address[$postal_code];
  }
  $query = "SELECT * FROM {" . ADDRESSFIELD_HU_BASE_TABLE . "} WHERE postal_code = :postal_code";
  $result = db_query($query, array(':postal_code' => $postal_code));
  if ($result = $result->fetchAssoc()) {;
    $address[$result['postal_code']] = $result;
  }
  else {
    $address[$postal_code] = FALSE;
  }
  return $address[$postal_code];
}

/**
 * Save and addresse.
 *
 * @param type $address
 * @return boolean
 */
function addressfield_hu_address_save($address) {
  if (empty($address['postal_code']) || !is_numeric($address['postal_code'])) {
    return FALSE;
  }

  // Try to get addresse from db. If success, existing record will be
  // overridden.
  $exists = addressfield_hu_get_address_by_postal_code($address['postal_code']);
  $cache = &drupal_static('addressfield_hu');

  $fields = array(
    'postal_code' => $address['postal_code'],
    'administrative_area' => !empty($address['administrative_area']) ? $address['administrative_area'] : '',
    'locality' => !empty($address['locality']) ? $address['locality'] : '',
  );

  if ($exists) {
    // Override.
    db_update(ADDRESSFIELD_HU_BASE_TABLE)
      ->fields($fields)
      ->condition('postal_code', $address['postal_code'], '=')
      ->execute();
    $cache[$address['postal_code']] = $fields;
    return TRUE;
  }
  // create
  db_insert(ADDRESSFIELD_HU_BASE_TABLE)
    ->fields($fields)
    ->execute();

  // Update own drupal_static variable.
  $cache[$address['postal_code']] = $fields;
  return TRUE;
}

/**
 * CRUD function, delete addresse record
 *
 * @param type $address
 * @return type
 */
function addressfield_hu_address_delete($address) {
  if (is_array($address) && is_numeric($address['postal_code'])) {
    $postal_code = $address['postal_code'];
  }
  else {
    $postal_code = $address;
  }

  return db_delete(ADDRESSFIELD_HU_BASE_TABLE)
    ->condition('postal_code', $postal_code, '=')
    ->execute();
}

/**
 * Helper function to get counties.
 */
function addressfield_hu_get_counties() {
  return array(
    '' => '',
    'BK' =>"Bács-Kiskun megye",
    'BAR' =>"Baranya megye",
    'BEK' =>"Békés megye",
    'BAZ' =>"Borsod-Abaúj-Zemplén megye",
    'BUD' =>"Budapest",
    'CSO' =>"Csongrád megye",
    'FEJ' =>"Fejér megye",
    'GYMS' =>"Győr-Moson-Sopron megye",
    'HB' =>"Hajdú-Bihar megye",
    'HE' =>"Heves megye",
    'JNSZ' =>"Jász-Nagykun-Szolnok megye",
    'KE' =>"Komárom-Esztergom megye",
    'NO' =>"Nógrád megye",
    'P' =>"Pest megye",
    'SO' =>"Somogy megye",
    'SZSZB' =>"Szabolcs-Szatmár-Bereg megye",
    'TO' =>"Tolna megye",
    'VAS' =>"Vas megye",
    'VE' =>"Veszprém megye",
    'ZA' =>"Zala megye",
  );
}

/**
 * Get the county key based on a county name
 * @todo This may be depricated???
 *
 * @param type $county
 * @return boolean
 */
function addressfield_hu_get_county_key($county) {
  foreach (addressfield_hu_get_counties() as $key => $value) {
    if ($county == $value) {
      return $key;
    }
  }
  return FALSE;
}

/**
 * Get all possible postal codes of a locality;
 *
 * @param string $locality
 * @return array
 *   An array of postal codes, keyed by postal_codes too.
 */
function addressfield_hu_get_postal_codes_by_locality($locality = '') {
  $options = array();
  $results = db_query('SELECT a.postal_code FROM {addressfield_hu} a WHERE a.locality = :locality', array(':locality' => $locality));

  foreach ($results as $result) {
    $options[$result->postal_code] = $result->postal_code;
  };
  return $options;
}

/**
 * Get a county name by own id.
 *
 * @param string $county_id
 * @return string
 */
function addressfield_hu_get_county_name($county_id) {
  $counties = addressfield_hu_get_counties();
  if (array_key_exists($county_id, $counties)) {
    return $counties[$county_id];
  }
}

/**
 * This module contains some example csv files. These are exported from
 * Hungarian Post xls and a scv created by Balint Laza.
 * This function fetch it, and provides some debuging
 * option.
 *
 * @param boolean $debug
 *  If TRUE, debugging information is printed as drupal message.
 * @return array;
 *  And array of all addresse read from csv's.
 */
function addressfield_hu_fetch_csv($debug = FALSE) {
  $address = &drupal_static(__FUNCTION__);
  // Postal code file
  $pc = drupal_get_path('module', 'addressfield_hu') . '/addressfield.csv';
  // County file
  //$co = drupal_get_path('module', 'addressfield_hu') . '/admin_area.csv';

  // Create array from lines
  $pc_lines = str_getcsv(file_get_contents($pc), "\n");

  $address = array();

  foreach ($pc_lines as $line) {
    $line_array = explode(',', $line);
    $address[$line_array[0]] = array(
      'postal_code' => $line_array[0],
      'locality' => str_replace('"', '', $line_array[1]),
      'administrative_area' => str_replace('"', '', $line_array[2]),
    );
  }
  return $address;
}
