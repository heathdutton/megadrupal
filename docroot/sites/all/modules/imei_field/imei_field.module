<?php

/**
 * @file
 * Adds an IMEI field with validation.
 */

/**
 * Implements hook_field_info().
 */
function imei_field_field_info() {
  return array(
    'imei' => array(
      'label' => 'IMEI',
      'description' => t('IMEI number with validation.'),
      'default_widget' => 'imei_textfield',
      'default_formatter' => 'imei_default',
    ),
  );
}

/**
 * Implements hook_field_widget_info().
 */
function imei_field_field_widget_info() {
  return array(
    'imei_textfield' => array(
      'label' => t('Text field'),
      'field types' => array('imei'),
      'settings' => array(),
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function imei_field_field_formatter_info() {
  $formats = array(
    'imei_default' => array(
      'label' => t('IMEI number'),
      'description' => t('Raw IMEI number.'),
      'field types' => array('imei'),
    ),
  );
  return $formats;
}

/**
 * Implements hook_field_formatter_view().
 */
function imei_field_field_formatter_view($object_type, $object, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'imei_default':
      foreach ($items as $delta => $item) {
        // No check_plain() because only integers are passed through presave.
        $element[$delta] = array('#markup' => $item['imei']);
      }
      break;
  }
  return $element;
}

/**
 * Implements hook_field_is_empty().
 */
function imei_field_field_is_empty($item, $field) {
  return empty($item['imei']);
}

/**
 * Implements hook_field_widget_form().
 */
function imei_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $base) {
  $element = $base;
  $element['imei'] = $base + array(
    '#type' => 'textfield',
    '#default_value' => isset($items[$delta]['imei']) ? $items[$delta]['imei'] : NULL,
    '#size' => 15,
  );
  return $element;
}

/**
 * Implements hook_field_presave().
 */
function imei_field_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  foreach ($items as $delta => $item) {
    // Cleaning the data before saving it.
    if (isset($item['imei'])) {
      $items[$delta]['imei'] = imei_field_clean_data($item['imei']);
    }
  }
}

/**
 * Remove all non-valid characters.
 *
 * @param string $imei
 *   The imei number typed by the user.
 *
 * @return string 
 *   The imei number without invalid characters.
 */
function imei_field_clean_data($imei) {
  return preg_replace('/[^0-9]/', '', $imei);
}

/**
 * Check if the IMEI number is valid with Luhn Algorithm and string length.
 *
 * @param string $imei
 *   Input string to validate.
 *
 * @return bool 
 *   True if it's a valid IMEI number, passing Luhn algorithm.
 */
function imei_field_check_luhn($imei) {
  $imei = imei_field_clean_data($imei);
  $sum = 0;
  $alt = FALSE;
  for ($i = strlen($imei) - 1; $i >= 0; $i--) {
    if ($alt) {
      $temp = $imei[$i];
      $temp *= 2;
      $imei[$i] = ($temp > 9) ? $temp = $temp - 9 : $temp;
    }
    $sum += $imei[$i];
    $alt = !$alt;
  }
  return $sum % 10 == 0;
}

/**
 * Implements hook_field_validate().
 */
function imei_field_field_validate($obj_type, $object, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    $imei = imei_field_clean_data($item['imei']);
    $replacements = array('%imei' => $item['imei']);
    $message = '';
    if (!empty($item['imei'])) {
      if (empty($imei)) {
        $message = t('A valid IMEI number should have 15 digits.');
      }
      elseif (strlen($imei) != 15) {
        $message = t('%imei is not a valid IMEI number. A valid IMEI number should have 15 digits.', $replacements);
      }
      elseif (!imei_field_check_luhn($imei)) {
        $message = t('%imei does not appear to a valid IMEI number.', $replacements);
      }
    }

    if ($message) {
      $errors[$field['field_name']][$langcode][$delta][] = array(
        'error' => "imei_invalid",
        'message' => $message,
      );
    }
  }
}
