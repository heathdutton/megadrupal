<?php

/**
 * @file
 * Install file for workbench_menu module.
 */

/**
 * Implementation of hook_schema().
 */
function workbench_menu_schema() {
  $schema = array();

  $t = get_t();

  $schema['workbench_menus'] = array(
    'description' => $t("Menus defined in the workbench module."),
    'fields' => array(
      'id' => array(
        'description' => $t("The primary key used to represent a menu."),
        'type' => 'serial',
        'size' => 'big',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'access_id' => array(
        'description' => $t("The workbench access id from {workbench_access}.access_id, which may be non-numeric."),
        'type' => 'varchar',
        'length' => 80,
        'not null' => TRUE,
        'default' => '',
      ),
      'path' => array(
        'description' => $t("The base path in which this menu listens on."),
        'type' => 'varchar',
        'length' => 127,
        'not null' => TRUE,
        'default' => '',
      ),
      'weight' => array(
        'description' => $t("Menu weight."),
        'type' => 'int',
        'size' => 'normal',
        'not null' => TRUE,
        'default' => 0,
      ),
      'show_parents' => array(
        'description' => $t("A boolean defining whether or not the parents should be visible."),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => TRUE,
      ),
      'hidden' => array(
        'description' => $t("A boolean defining whether or not this menu should be automatically visible."),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'breadcrumb_name' => array(
        'description' => $t("An optional custom breadcrumb name to use instead of the taxonomy term name."),
        'type' => 'text',
        'size' => 'normal',
        'not null' => TRUE,
        'default' => '',
      ),
      'alias' => array(
        'description' => $t("When not 0, designates that this menu is a link to another menu."),
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('id'),
    'unique keys' => array(
      'access_id' => array('access_id'),
    ),
    'foreign keys' => array(
      'access_id' => array(
        'table' => 'workbench_access',
        'columns' => array('access_id' => 'access_id'),
      ),
    ),
  );

  foreach (array('expand', 'item_type') as $name) {
    cf_db_options_create_options_schema('workbench_menu', $name, $schema);

    $schema['workbench_menu_' . $name . 's'] = array(
      'description' => $t("Menu properties of type $name"),
      'fields' => array(
        'item_id' => array(
          'description' => $t("The workbench menu id from {workbench_menu}.id."),
          'type' => 'int',
          'size' => 'big',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ),
        $name . '_id' => array(
          'description' => $t("The options id from {" . 'workbench_menu_options_' . $name . "}.id."),
          'type' => 'int',
          'size' => 'big',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ),
      ),
      'foreign keys' => array(
        'menu_id' => array(
          'table' => 'workbench_menus',
          'columns' => array('menu_id' => 'id'),
        ),
        $name . '_id' => array(
          'table' => 'workbench_menu_options_' . $name,
          'columns' => array($name . '_id' => 'id'),
        ),
      ),
    );
  }

  $schema['workbench_menu_items'] = array(
    'description' => $t("Menus items defined in the workbench module."),
    'fields' => array(
      'id' => array(
        'description' => $t("The primary key used to represent a menu item."),
        'type' => 'serial',
        'size' => 'big',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'menu_id' => array(
        'description' => $t("The workbench menu id from {workbench_menu}.id."),
        'type' => 'int',
        'size' => 'big',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'parent_id' => array(
        'description' => $t("The workbench menu parent id from {workbench_menu_items}.id."),
        'type' => 'int',
        'size' => 'big',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'human_name' => array(
        'description' => $t("This is the human-friendly name used to represent the menu item."),
        'type' => 'text',
        'size' => 'normal',
        'not null' => TRUE,
        'default' => '',
      ),
      'weight' => array(
        'description' => $t("Menu item weight within menu."),
        'type' => 'int',
        'size' => 'normal',
        'not null' => TRUE,
        'default' => 0,
      ),
      'active_path' => array(
        'description' => $t("This is the path in which this menu item belongs on."),
        'type' => 'text',
        'size' => 'normal',
        'not null' => TRUE,
        'default' => '',
      ),
      'properties' => array(
        'description' => $t("Stores additional data whose content is directly dependent on the item type."),
        'type' => 'text',
        'size' => 'big',
        'serialize' => TRUE,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'primary key' => array('id'),
    'foreign keys' => array(
      'menu_id' => array(
        'table' => 'workbench_menus',
        'columns' => array('menu_id' => 'id'),
      ),
    ),
  );

  // workaround mysql's violation of the SQL standard in a way that does not break standards-compliant databases.
  // @see https://dev.mysql.com/doc/refman/5.6/en/data-type-defaults.html
  // @see https://bugs.mysql.com/bug.php?id=25520
  // @see https://drupal.org/node/1401782
  // @see https://drupal.org/node/143881
  if (db_driver() == 'mysql') {
    unset($schema['workbench_menus']['fields']['breadcrumb_name']['default']);
    unset($schema['workbench_menu_items']['fields']['human_name']['default']);
    unset($schema['workbench_menu_items']['fields']['active_path']['default']);
    unset($schema['workbench_menu_items']['fields']['properties']['default']);
  }

  return $schema;
}

/**
 * Implementation of hook_install().
 */
function workbench_menu_install() {
  $t = get_t();

  try {
    $expand = array();

    $expand[] = array(
      'machine_name' => 'expand_always',
      'human_name' => $t("Always Expand"),
      'description' => $t("The menu item will always be expanded."),
    );

    $expand[] = array(
      'machine_name' => 'expand_auto',
      'human_name' => $t("Auto Expand"),
      'description' => $t("The menu item will expanded, unless told otherwise."),
    );

    $expand[] = array(
      'machine_name' => 'expand_never',
      'human_name' => $t("Never Expand"),
      'description' => $t("The menu item will never be expanded."),
    );

    cf_db_options_add_options('workbench_menu', 'expand', $expand);


    $item_type = array();

    $item_type[] = array(
      'machine_name' => 'item_node',
      'human_name' => $t("Node"),
      'description' => $t("Links to an internal node path found on this website."),
    );

    $item_type[] = array(
      'machine_name' => 'item_link',
      'human_name' => $t("Link"),
      'description' => $t("Links to a path found on this or some other website."),
    );

    $item_type[] = array(
      'machine_name' => 'item_label',
      'human_name' => $t("Label"),
      'description' => $t("Displays text that does not a link to anything."),
    );

    $item_type[] = array(
      'machine_name' => 'item_file',
      'human_name' => $t("File"),
      'description' => $t("Links to a file available on this website."),
    );

    $item_type[] = array(
      'machine_name' => 'item_top',
      'human_name' => $t("Top"),
      'description' => $t("This is an item that points to the menu path."),
    );

    $item_type[] = array(
      'machine_name' => 'item_menu',
      'human_name' => $t("Menu"),
      'description' => $t("Represents and loads another menu."),
    );

    $item_type[] = array(
      'machine_name' => 'item_menu_item',
      'human_name' => $t("Menu Item"),
      'description' => $t("Represents and loads a menu item from another menu."),
    );

    cf_db_options_add_options('workbench_menu', 'item_type', $item_type);
  }
  catch (Exception $e) {
    if (module_exists('cf_error')) {
      cf_error::on_query_execution($e);
    }

    throw $e;
  }
}

/**
 * Implementation of hook_enable().
 */
function workbench_menu_enable() {
  if (variable_get('workbench_access', 'taxonomy') != 'taxonomy') {
    return;
  }

  workbench_access_reset_tree();
  $wa = (array) workbench_access_get_active_tree();

  // if there is no active tree, then there is nothing to do.
  if (empty($wa)) {
    return;
  }


  try {
    foreach ($wa['active'] as $access_id => &$value) {
      if (!cf_is_integer($access_id)) continue;

      $query = db_select('workbench_menus', 'wm');
      $query->fields('wm');
      $query->condition('wm.access_id', $access_id);

      $records = (array) $query->execute()->fetchAll();

      if (empty($records)) {
        $query = db_insert('workbench_menus');
        $query->fields(array('access_id' => $access_id, 'path' => ''));
        $query->execute();
      }
    }
  }
  catch (Exception $e) {
    if (module_exists('cf_error')) {
      cf_error::on_query_execution($e);
    }

    throw $e;
  }
}

/**
 * Re-attach dangling menu items due to a design flaw when deleting menu items.
 *
 * The problem was that when a menu item was deleted, its children were not
 * updated. This created dangling menu items.
 *
 * The solution provided here is to attach the dangling hooks to the parent
 * menu item.
 */
function workbench_menu_update_7100() {
  db_query('UPDATE {workbench_menu_items} SET parent_id = 0 WHERE NOT parent_id IN (SELECT id FROM {workbench_menu_items}) AND NOT parent_id = 0');
}

/**
 * Change Menu ID menu items to use menu id and not access id.
 */
function workbench_menu_update_7101() {
  $results = (array) db_query("SELECT wmi.id, wmi.properties FROM {workbench_menu_items} wmi INNER JOIN {workbench_menu_item_types} wmit ON wmi.id = wmit.item_id LEFT JOIN {workbench_menu_options_item_type} wmoit ON wmit.item_type_id = wmoit.id WHERE wmoit.machine_name = 'item_menu' OR wmoit.machine_name = 'item_menu_type'")->fetchAll();

  foreach ($results as &$result) {
    $unserialized = unserialize($result->properties);

    $field = db_query("SELECT wm.id FROM {workbench_menus} wm WHERE wm.access_id = :access_id", array(':access_id' => $unserialized['menu']))->fetchField();

    if (cf_is_integer($field[0])) {
      $unserialized['menu'] = $field;
      $properties = serialize($unserialized);

      $query = db_update('workbench_menu_items');
      $query->condition('id', $result->id);
      $query->fields(array('properties' => $properties));
      $query->execute();
    }
  }
}

/**
 * Insert the new item type top into the database if it does not yet exist.
 */
function workbench_menu_update_7102() {
  $result = db_query("SELECT count(*) FROM {workbench_menu_options_item_type} WHERE machine_name = 'item_top'")->fetchField();

  if ($result == 0) {
    $t = get_t();

    $item_type = array();
    $item_type[] = array(
      'machine_name' => 'item_top',
      'human_name' => $t("Top"),
      'description' => $t("This is an item that points to the menu path."),
    );

    cf_db_options_add_options('workbench_menu', 'item_type', $item_type);
  }
}

/**
 * Re-organize the database structure based on the new item types available.
 *
 * Mass convert all links that point to nodes to proper node item types.
 * Mass convert all links that use <top> into top itemp types.
 */
function workbench_menu_update_7103() {
  $results = db_query("SELECT * FROM {workbench_menu_options_item_type}");
  $item_types = array();

  foreach ($results as $result) {
    $item_types[$result->machine_name] = $result->id;
  }

  $arguments = array(':item_type_id' => $item_types['item_link']);
  $results = db_query("SELECT * FROM {workbench_menu_items} wmi INNER JOIN {workbench_menu_item_types} wmit ON wmi.id = wmit.item_id WHERE wmit.item_type_id = :item_type_id AND wmi.properties LIKE '%/node/%'", $arguments);

  foreach ($results as $result) {
    $properties = unserialize($result->properties);
    $matches = array();

    $matched = preg_match('@^/node/(\d+)($|\?.*|#.*)@', $properties['url'], $matches);

    if ($matched > 0) {
      if (cf_is_integer($matches[1])) {
        $query = db_select('node', 'n');
        $query->fields('n', array('nid', 'title'));
        $query->condition('n.nid', $matches[1]);

        $subresults = (array) $query->execute()->fetchAll();

        if (!empty($subresults)) {
          $subresult = array_pop($subresults);
          $properties['url'] = '';
          $properties['node_id'] = $subresult->title . ' [nid: ' . $subresult->nid . ']';

          if (!empty($matches[2])) {
            $properties['node_id'] .= ' ' . $matches[2];
          }

          $serialized = serialize($properties);
          $transaction = db_transaction();

          $query = db_update('workbench_menu_items');
          $query->condition('id', $result->id);
          $query->fields(array('properties' => $serialized));
          $query->execute();


          $query = db_update('workbench_menu_item_types');
          $query->condition('item_id', $result->id);
          $query->fields(array('item_type_id' => $item_types['item_node']));
          $query->execute();

          // force execution of transaction
          unset($transaction);
        }
      }
    }
  }

  $arguments = array(':item_type_id' => $item_types['item_link']);
  $results = db_query("SELECT * FROM {workbench_menu_items} wmi INNER JOIN {workbench_menu_item_types} wmit ON wmi.id = wmit.item_id WHERE wmit.item_type_id = :item_type_id AND wmi.properties LIKE '%<top>%'", $arguments);

  foreach ($results as $result) {
    $properties = unserialize($result->properties);

    if ($properties['url'] == '<top>') {
      $properties['url'] = '';

      $serialized = serialize($properties);
      $transaction = db_transaction();

      $query = db_update('workbench_menu_items');
      $query->condition('id', $result->id);
      $query->fields(array('properties' => $serialized, 'active_path' => ''));
      $query->execute();


      $query = db_update('workbench_menu_item_types');
      $query->condition('item_id', $result->id);
      $query->fields(array('item_type_id' => $item_types['item_top']));
      $query->execute();

      // force execution of transaction
      unset($transaction);
    }
  }
}

/**
 * The parent menu item can now be NULL.
 *
 * Menu items may now be disabled, this requires the parent to be NULL.
 *
 * This requires altering the table and moving data over.
 * You SHOULD backup your database before doing this update.
 */
function workbench_menu_update_7104() {
  $new_parent_column = array(
    'description' => "The workbench menu parent id from {workbench_menu_items}.id.",
    'type' => 'int',
    'size' => 'big',
    'unsigned' => TRUE,
    'not null' => FALSE,
  );

  $query = db_select('workbench_menu_items', 'wmi');
  $query->fields('wmi');

  $results = (array) $query->execute()->fetchAll();

  $transaction = db_transaction();

  try {
    db_query('ALTER TABLE {workbench_menu_items} RENAME COLUMN parent_id TO parent_id_old');
    db_add_field('workbench_menu_items', 'parent_id', $new_parent_column);

    foreach ($results as $result) {
      $subquery = db_update('workbench_menu_items');
      $subquery->condition('id', $result->id);
      $subquery->fields(array('parent_id' => $result->parent_id));
      $subquery->execute();
    }

    db_query('ALTER TABLE {workbench_menu_items} DROP COLUMN parent_id_old');

    // force execution of transaction
    unset($transaction);
  }
  catch (Exception $e) {
    if (module_exists('cf_error')) {
      cf_error::on_query_execution($e);
    }

    $transaction->rollback();

    throw $e;
  }
}

/**
 * Remove constraing from parent_id that was altered in update 7104.
 *
 * The constraint did not get removed, so try to remove it manually.
 * This seems to apply to PostgreSQL only.
 */
function workbench_menu_update_7105() {
  if (db_driver() != 'pgsql') {
    return;
  }

  $transaction = db_transaction();

  try {
    db_query('ALTER TABLE {workbench_menu_items} DROP CONSTRAINT workbench_menu_items_parent_id_check1');

    // force execution of transaction
    unset($transaction);
  }
  catch (Exception $e) {
    if (module_exists('cf_error')) {
      cf_error::on_query_execution($e);
    }

    $transaction->rollback();

    throw $e;
  }
}

/**
 * Add the alias column to allow for using menus at one path as another menu.
 */
function workbench_menu_update_7106() {
  $alias_column = array(
    'description' => "When not 0, designates that this menu is a link to another menu.",
    'type' => 'int',
    'size' => 'big',
    'not null' => TRUE,
    'default' => 0,
  );

  $query = db_select('workbench_menus', 'wm');
  $query->fields('wm');

  $results = (array) $query->execute()->fetchAll();

  $transaction = db_transaction();

  try {
    db_add_field('workbench_menus', 'alias', $alias_column);

    // force execution of transaction
    unset($transaction);
  }
  catch (Exception $e) {
    if (module_exists('cf_error')) {
      cf_error::on_query_execution($e);
    }

    $transaction->rollback();

    throw $e;
  }
}
