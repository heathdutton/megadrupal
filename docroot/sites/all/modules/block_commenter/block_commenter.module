<?php

/**
 * @file
 * This module blocks the authenticated user from commenting corresponding to
 * nodes of selected content type.
 */

/**
 * Implements hook_menu().
 */
function block_commenter_menu() {
  $items = array();

  $items['admin/config/people/block_commenter'] = array(
    'title' => 'Block Commenter Settings',
    'description' => 'This will allow user to administer block commenter module settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('block_commenter_admin_settings'),
    'access arguments' => array('administer block commenter'),
  );
  $items['block_commenter/multiple_autocomplete'] = array(
    'title' => 'Multiple select auto complete',
    'page callback' => 'block_commenter_multiple_select_autocomplete',
    'type' => MENU_CALLBACK,
    'access arguments' => array('administer block commenter'),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function block_commenter_permission() {
  return array(
    'administer block commenter' => array(
      'title' => t('administer block commenter'),
      'description' => t('This will allow user to administer block commenter module settings'),
    ),
  );
}

/**
 * Page callback for admin settings form.
 */
function block_commenter_admin_settings($form, &$form_state) {
  $users = block_commenter_get_blocked_users();
  $content_types = node_type_get_names();
  foreach ($content_types as $name => $content_type) {
    $options[check_plain($name)] = check_plain($content_type);
  }

  $form['block_commenter_user'] = array(
    '#type' => 'textfield',
    '#title' => t('Users'),
    '#autocomplete_path' => 'block_commenter/multiple_autocomplete',
    '#description' => t('Required - Enter a comma-separated list of users which you want to block.'),
    '#default_value' => $users,
    '#size' => 120,
    '#maxlength' => 500,
    '#required' => TRUE,
  );
  $states = array(
    0 => t('Leave as it is.'),
    1 => t('Unpublish.'),
    2 => t('Delete.'),
  );
  $form['block_commenter_comment_exist'] = array(
    '#type' => 'radios',
    '#title' => t('Existing Comments By Blocked User'),
    '#default_value' => variable_get('block_commenter_comment_exist', 0),
    '#options' => $states,
  );
  $form['block_commenter_content_type'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Content Type'),
    '#options' => $options,
    '#description' => t('Required - Choose the content type corresponding to which you want to block the user from commenting.'),
    '#default_value' => variable_get('block_commenter_content_type', array()),
    '#required' => TRUE,
  );
  $form['block_commenter_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit Settings'),
  );

  return $form;
}

/**
 * Implements hook_node_view().
 */
function block_commenter_node_view($node, $view_mode, $langcode) {
  global $user;
  $content_type_data = array();
  if ($view_mode == 'full' && !empty($user->uid)) {
    $content_type_data = variable_get('block_commenter_content_type', array());
    $is_blocked = block_commenter_is_blocked($user->uid);
    $content_type = array();
    //This foreach loop creates an array of blocked content types.
    foreach ($content_type_data as $name => $value) {
      if ($value) {
        $content_type[] = $value;
      }
    }
    if (empty($is_blocked) || empty($content_type)) {
      return;
    }

    // Check whether current node content_type and current
    // user is in the list of blocked users.
    if (in_array($node->type, $content_type) && $is_blocked) {
      // Hidding comment form for blocked user.
      $node->comment = 0;
    }
  }
}

/**
 * Function to Implement User Autocomplete in the configuration form().
 */
function block_commenter_multiple_select_autocomplete($string = '') {
  $array = drupal_explode_tags($string);
  $last_string = trim(array_pop($array));
  $matches = array();
  if ($last_string != '') {
    $prefix = count($array) ? drupal_implode_tags($array) . ', ' : '';
    $query = db_select('users', 'u');
    $users_return = $query
      ->fields('u', array('uid', 'name'))
      ->condition('u.name', db_like($last_string) . '%', 'LIKE')
      ->range(0, 10)
      ->execute()
      ->fetchAllKeyed();
    foreach ($users_return as $uid => $name) {
      $prefix = count($array) ? implode(', ', $array) . ',' : '';
      $matches[$prefix . $name . ':' . $uid] = check_plain($name);
    }
  }
  drupal_json_output($matches);
}

/**
 * Implements hook_help().
 */
function block_commenter_help($path, $arg) {
  switch ($path) {
    case 'admin/help#block_commenter':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t("It provides a feature to block particular users from
                 commenting in nodes of particular/all content type") . '<p>';
      return $output;
  }
}

/**
 * Custom Admin Setting Submit Callback.
 */
function block_commenter_admin_settings_submit($form, &$form_state) {
  $exist_comment_setting = $form_state['values']['block_commenter_comment_exist'];
  $content_type_data = $form_state['values']['block_commenter_content_type'];
  $users_data = explode(',', $form_state['values']['block_commenter_user']);
  $content_type = array();
  $uids = array();
  //This foreach loop creates an array of blocked content types.
  foreach ($content_type_data as $name => $value) {
    if ($value) {
      $content_type[] = $value;
    }
  }
  foreach ($users_data as $record) {
    $user_data = array();
    $user_data = explode(':', $record);
    $uid = array_pop($user_data);
    $uids[] = $uid;
  }
  if (empty($uids) || empty($content_type)) {
    return;
  }
  variable_set('block_commenter_content_type', $content_type);
  variable_set('block_commenter_comment_exist', $exist_comment_setting);
  foreach ($uids as $uid) {
    db_merge('block_commenter')
      ->key(array('uid' => $uid))
      ->fields(array(
            'uid' => $uid,
            'timestamp' => time(),
      ))
      ->execute();
  }
  db_delete('block_commenter')
    ->condition('uid', $uids, 'NOT IN')
    ->execute();
  // For Unpublished.
  if ($exist_comment_setting == 1) {
    $result = db_query("SELECT DISTINCT(c.cid) FROM {comment} AS c INNER JOIN {node} As n WHERE c.uid IN (:uid) AND c.status=:status AND n.type IN (:content_type)",
              array(
                ':uid' => $uids,
                ':status' => '1',
                ':content_type' => $content_type));
    foreach ($result as $record) {
      comment_unpublish_action(NULL, array('cid' => $record->cid));
    }
  }
  // For Delete.
  elseif ($exist_comment_setting == 2) {
    $result = db_query("SELECT DISTINCT(c.cid) FROM {comment} AS c INNER JOIN {node} As n WHERE c.uid IN (:uid) AND n.type IN (:content_type)",
              array(':uid' => $uids, ':content_type' => $content_type));
    $cids = array();
    foreach ($result as $record) {
      $cids[] = $record->cid;
    }
    comment_delete_multiple($cids);
  }
  drupal_set_message(t('The settings have been saved successfully.'));
}

/**
 * Custom function to return list of blocked uids.
 */
function block_commenter_get_blocked_users() {
  $users = '';
  $result = db_query('SELECT bc.uid,u.name FROM {block_commenter} AS bc INNER JOIN {users} AS u ON bc.uid=u.uid');
  while ($record = $result->fetchObject()) {
    $users .= $record->name . ':' . $record->uid . ',';
  }
  $users = trim($users, ',');
  if (empty($users)) {
    return;
  }
  return $users;
}

/**
 * Custom function to check whether the given user is blocked or not.
 */
function block_commenter_is_blocked($uid) {
  $is_blocked = 0;
  $result = db_query("SELECT uid FROM {block_commenter} WHERE uid = :uid", array(':uid' => $uid));
  $row = $result->rowCount();
  if ($row) {
    $is_blocked = 1;
  }
  return $is_blocked;
}
