<?php

/**
 * @file
 * Provides the Credit Card on Delivery payment method for Ubercart.
 */

/**
 * Implements hook_uc_payment_method().
 */
function credit_card_on_delivery_uc_payment_method() {
  $methods['credit_card_on_delivery'] = array(
    'name'       => t('Credit Card On Delivery'),
    'title'      => t('Credit Card On Delivery'),
    'desc'       => t('Pay using Credit Card on delivery on pick-up.'),
    'callback'   => 'credit_card_on_delivery_payment',
    'weight'     => 1,
    'checkout'   => FALSE,
    'no_gateway' => TRUE,
  );
  return $methods;
}

/**
 * Payment method callback for the "Credit Card on Delivery" payment method.
 */
function credit_card_on_delivery_payment($op, &$order, $form = NULL, $form_state = NULL) {
  switch ($op) {
    case 'cart-details':
      $build['policy'] = array(
        '#markup' => '<p>' . variable_get('credit_card_on_delivery_policy', t('Full payment is expected upon delivery or prior to pick-up.')) . '</p>',
      );
      if (($max = variable_get('credit_card_on_delivery_max_order', 0)) > 0 && is_numeric($max)) {
        $build['eligibility'] = array(
          '#markup' => '<p>' . t('Orders totalling more than !number are <b>not eligible</b> for COD.', array('!number' => uc_currency_format($max))) . '</p>',
        );
      }
      if (variable_get('credit_card_on_delivery_type_enabled', FALSE)) {
        $build += credit_card_on_delivery_ctype_form(array(), $form_state, $order);
      }
      if (variable_get('credit_card_on_delivery_date', FALSE)) {
        $build += credit_card_on_delivery_form(array(), $form_state, $order);
      }
      return $build;

    case 'cart-process':
      if (variable_get('credit_card_on_delivery_date', FALSE)) {
        $order->payment_details = $form_state['values']['panes']['payment']['details'];
      }
      if (variable_get('credit_card_on_delivery_type_enabled', FALSE)) {
        $order->payment_details = array(
          'card_type' => $form_state['values']['panes']['payment']['details'],
        );
      }
      return TRUE;

    case 'cart-review':
      $review = array();
      if (variable_get('credit_card_on_delivery_type_enabled', FALSE)) {
        $review[] = array('title' => t('Card Type'), 'data' => $order->payment_details['card_type']);
      }
      if (variable_get('credit_card_on_delivery_date', FALSE)) {
        $date = uc_date_format(
          $order->payment_details['delivery_month'],
          $order->payment_details['delivery_day'],
          $order->payment_details['delivery_year']
        );
        $review[] = array('title' => t('Delivery Date'), 'data' => $date);
      }
      return $review;

    case 'order-view':
    case 'customer-view':
      $build = array('#markup' => '');
      if (variable_get('credit_card_on_delivery_type_enabled', FALSE)) {
        $build['#markup'] .= t('Card Type: %card_type', array('%card_type' => $order->payment_details['card_type']));
      }
      if (variable_get('credit_card_on_delivery_date', FALSE) &&
          isset($order->payment_details['delivery_month']) &&
          isset($order->payment_details['delivery_day']) &&
          isset($order->payment_details['delivery_year'])) {
        $build['#markup'] .= t('Desired delivery date:') . '<br />' .
          uc_date_format(
            $order->payment_details['delivery_month'],
            $order->payment_details['delivery_day'],
            $order->payment_details['delivery_year']
          );
      }
      return $build;

    case 'order-details':
      $build = '';
      if (variable_get('credit_card_on_delivery_type_enabled', FALSE)) {
        $build = credit_card_on_delivery_ctype_form(array(), $form_state, $order);
      }
      if (variable_get('credit_card_on_delivery_date', FALSE)) {
        $build += credit_card_on_delivery_form(array(), $form_state, $order);
      }
      return $build;

    case 'order-load':
      if (variable_get('credit_card_on_delivery_date', FALSE)) {
        $result = db_query("SELECT * FROM {credit_card_on_delivery_payment} WHERE order_id = :id", array(':id' => $order->order_id));
        if ($row = $result->fetchObject()) {
          $order->payment_details = array(
            'delivery_month' => $row->delivery_month,
            'delivery_day'   => $row->delivery_day,
            'delivery_year'  => $row->delivery_year,
          );
        }
      }
      if (variable_get('credit_card_on_delivery_type_enabled', FALSE)) {
        $result1 = db_query("SELECT * FROM {credit_card_on_delivery_ctpye_payment} WHERE order_id = :id", array(':id' => $order->order_id));
        if ($row = $result1->fetchObject()) {
          $order->payment_details = array(
            'card_type' => $row->card_type,
          );
        }
      }
      break;

    case 'order-submit':
      if ($order->payment_method == 'credit_card_on_delivery' &&
          ($max = variable_get('credit_card_on_delivery_max_order', 0)) > 0 &&
          is_numeric($max) &&
          $order->order_total > $max) {
        $result[] = array(
          'pass' => FALSE,
          'message' => t('Your final order total exceeds the maximum for CCOD
            payment.  Please go back and select a different method of payment.'),
        );
        $_SESSION['expanded_panes'][] = 'payment';
        return $result;
      }

    case 'order-save':
      if (isset($order->payment_details['delivery_month']) &&
          isset($order->payment_details['delivery_day'])   &&
          isset($order->payment_details['delivery_year'])) {
        db_merge('credit_card_on_delivery_payment')
          ->key(array('order_id' => $order->order_id))
          ->fields(array(
            'delivery_month' => $order->payment_details['delivery_month'],
            'delivery_day'   => $order->payment_details['delivery_day'],
            'delivery_year'  => $order->payment_details['delivery_year'],
          ))
          ->execute();
      }
      if (isset($order->payment_details['card_type'])) {
        db_merge('credit_card_on_delivery_ctpye_payment')
          ->key(array('order_id' => $order->order_id))
          ->fields(array(
            'card_type' => $order->payment_details['card_type'],
          ))
          ->execute();
      }
      break;

    case 'order-delete':
      db_delete('credit_card_on_delivery_payment')
        ->condition('order_id', $order->order_id)
        ->execute();
      db_delete('credit_card_on_delivery_ctpye_payment')
        ->condition('order_id', $order->order_id)
        ->execute();
      break;

    case 'settings':
      $form['credit_card_on_delivery_payment'] = array(
        '#type' => 'textarea',
        '#title' => t('Policy message'),
        '#default_value' => variable_get('credit_card_on_delivery_payment', t('Full payment is expected upon delivery or prior to pick-up.')),
        '#description' => t('Help message shown at checkout.'),
      );
      $form['credit_card_on_delivery_max_order'] = array(
        '#type' => 'textfield',
        '#title' => t('Maximum order total eligible for CCOD'),
        '#default_value' => variable_get('credit_card_on_delivery_max_order', 0),
        '#description' => t('Set to 0 for no maximum order limit.'),
      );
      $form['credit_card_on_delivery_date'] = array(
        '#type' => 'checkbox',
        '#title' => t('Let customers enter a desired delivery date.'),
        '#default_value' => variable_get('credit_card_on_delivery_date', FALSE),
      );
      $form['credit_card_on_delivery_type_enabled'] = array(
        '#type' => 'checkbox',
        '#title' => t('Enable card type selection on checkout form.'),
        '#description' => t('If enabled, specify in the textarea below which card options to populate the select box with.'),
        '#default_value' => variable_get('credit_card_on_delivery_type_enabled', FALSE),
      );
      $form['credit_card_on_delivery_card_types'] = array(
        '#type' => 'textarea',
        '#title' => t('Card type select box options on the checkout page.'),
        '#description' => t('Enter one card type per line.
          These fields will populate the card type select box if it is enabled.'),
        '#default_value' => variable_get('credit_card_on_delivery_card_types',
          implode("\r\n", array(t('Visa'), t('Mastercard'), t('Discover'),
          t('American Express')))),
        '#wysiwyg' => FALSE,
      );
      return $form;
  }
}

/**
 * Form to collect additional information needed by the payment method.
 *
 * @see theme_credit_card_on_delivery_form_form()
 * @ingroup forms
 */
function credit_card_on_delivery_form($form, &$form_state, $order) {
  $month = !empty($order->payment_details['delivery_month']) ? $order->payment_details['delivery_month'] : format_date(REQUEST_TIME, 'custom', 'n');
  $day = !empty($order->payment_details['delivery_day']) ? $order->payment_details['delivery_day'] : format_date(REQUEST_TIME, 'custom', 'j');
  $year = !empty($order->payment_details['delivery_year']) ? $order->payment_details['delivery_year'] : format_date(REQUEST_TIME, 'custom', 'Y');

  $form['title'] = array(
    '#markup' => '<div>' . t('Enter a desired delivery date:') . '</div>',
  );
  $form['delivery_month'] = uc_select_month(NULL, $month);
  $form['delivery_day'] = uc_select_day(NULL, $day);
  $form['delivery_year'] = uc_select_year(NULL, $year, format_date(REQUEST_TIME, 'custom', 'Y'), format_date(REQUEST_TIME, 'custom', 'Y') + 1);

  return $form;
}

/**
 * Form to collect the card type available with the user on the checkout page.
 *
 * @ingroup forms
 */
function credit_card_on_delivery_ctype_form($form, &$form_state, $order) {
  $form = array();
  if (variable_get('credit_card_on_delivery_type_enabled', FALSE)) {
    $types = variable_get('credit_card_on_delivery_card_types',
      implode("\r\n", array(t('Visa'),
      t('Mastercard'), t('Discover'), t('American Express'))));
    if (empty($types)) {
      $types = array(t('Not available'));
    }
    else {
      $types = explode("\r\n", $types);
    }
    foreach ($types as $type) {
      $options[check_plain($type)] = $type;
    }
    $form['card_type'] = array(
      '#type' => 'select',
      '#title' => t('Card type available'),
      '#options' => $options,
      '#required' => TRUE,
      '#default_value' => $order->payment_details['card_type'] ? $order->payment_details['card_type'] : array_shift(array_keys($options)),
    );
  }
  return $form;
}
