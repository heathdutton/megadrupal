<?php

/**
 * @file
 * Hub module.
 */

/**
 * Used in $hub->export_type to determine that $hub has never been saved.
 */
define('HUB_UNINITIALIZED', 0x00);

/**
 * Used in $hub->export_type to determine that $hub was loaded from the
 * database.
 */
define('HUB_IN_DATABASE', 0x01);

/**
 * Used in $hub_export_type to determine that $hub was loaded from code.
 */
define('HUB_IN_CODE', 0x02);

/**
 * Used in $hub->export_type to determine that $hub is overridden and loading
 * from the database.
 */
define('HUB_OVERRIDDEN', 0x03);


/******************************************************************************
 * API functions
 *****************************************************************************/

/**
 * Load Hub data.
 * 
 * @param $name
 *   A unique identifier (usually the name of the form builder function.)
 * 
 * @param $type
 *   A string defining the scope of data to retrieve. By default, only the pure
 *   data is returned, however, using "all" will return all available data
 *   regarding the Hub settings.
 * 
 * @return
 *   An an array of keyed values, or an object, depending on $type.
 */
function hub_load($name = NULL, $type = '') {
  $hub = new stdClass();
  $hub->name = $name;
  $hub->data = NULL;
  $hub->export_type = HUB_UNINITIALIZED;
  
  // Since it is possible to export default Hub settings into code, we first
  // attempt to load settings using Ctools Export tools.
  if (module_exists('ctools')) {
    ctools_include('export');
    $defaults = ctools_export_load_object('hub', 'names', array($name));
    $hub = (isset($defaults[$name])) ? $defaults[$name] : $hub;   
  }
  else {
    $hub->data = _hub_load($name);
    $hub->export_type = ($hub->data) ? HUB_IN_DATABASE : HUB_UNINITIALIZED;
  }
  
  return ($type == 'all') ? $hub : $hub->data;
}


/**
 * Wrapper function to inject all of Hub's functionality into any form. This is
 * the module's entry point.
 * 
 * This function performs 3 key operations: First, it loads a Hub object that
 * corresponds with the unique identifier passed in as the first argument.
 * Secondly, provides the form with a process callback that will conditionally
 * inject itself into the form's children element. And finally, provides
 * buttons to carry out various operations such as save, delete, and export.
 * 
 * @code
 * function mymodule_general_settings($form, &$form_state) {
 *    $form['name'] => array(
 *      '#type' => 'textfield',
 *      '#title' => t('Name'),
 *    );
 * 
 *    return hub_closure(__FUNCTION__, $form);
 *  }
 * @endcode
 * 
 * @param $name
 *   A unique identifier to associate data with. The most common use is the
 *   function's name, however, can be any string derived from various types of
 *   other unique identifiers such as a URI, email, module name, etc.
 * 
 * @param $form
 *  A Drupal form builder array. This parameter is passed in by reference,
 *  allowing you to inject Hub into any form using hook_form_alter(). Remember
 *  to also set $form['#tree'] to TRUE, unless you really don't want to.
 * 
 * @code
 * function mymodule_form_alter(&$form, &$form_state, $form_id) {
 *    if ($form_id == 'someother_settings_form) {
 *      $form['#tree'] = TRUE;
 *      hub_closure($form);
 *    }
 *  }
 * @endcode
 * 
 * @return
 *  A slightly enhanced form array.
 */
function hub_closure($name, &$form) {
  // Load Hub data, it will be used later for the #process callback
  $form['#hub'] = hub_load($name, 'all');

  // This #process callback will do all our dirty work. This proces callback is
  // executed after all form alters, but before any element inside the form is
  // actually processed. Using the deep recursion that form_builder() already
  // does, this callback will add itself as the first process callback of each
  // qualifying child element.
  $form['#process'][] = '_hub_process';
  
  // Although choosing a tree structure for the form values has no apparent
  // functionality, it is invaluable for developers to have data nested into
  // meaninful compartments. This is one of the strong points of using Hub to
  // manage data. If $form['#tree'] is already set to FALSE (as is the case in
  // hook_form_alter()), then you'll have to manually set $form['#tree'] to
  // be TRUE.
  $form['#tree'] = isset($form['#tree']) ? $form['#tree'] : TRUE;
  
  // Apply submit handler for saving data into the Hub system.
  $form['#submit'][] = '_hub_submit';
  
  // Add stylesheet and initial save button
  $form['#attached']['css'][] = drupal_get_path('module', 'hub') . '/hub.css';
  $form['buttons']['submit'] = array('#type' => 'submit', '#value' => t('Save Settings'));
  
  // Add additional buttons and their respective submit handlers for operations
  // such as export, revert/delete, etc.
  _hub_additional_buttons($form);
  
  return $form;
}


/**
 * Save/Update/Delete settings data.
 * 
 * @param $op
 *   The database operation to perform. Possible values are 'insert', 'update',
 *   and 'delete'.
 * 
 * @param $data
 *   This value can either be an array structure of data to save into the Hub
 *   system (if $type is insert or update), otherwise a string name of the
 *   unique identifier, used for deleting an item from the Hub system.
 */
function hub_save($op = 'insert', $data, $notify = FALSE) {
  module_load_include('inc', 'hub', 'hub.module');
  $data = (is_array($data)) ? serialize($data) : $data;
  return _hub_save($op, $data, $notify);
}


/******************************************************************************
 * Drupal hooks
 *****************************************************************************/

/**
 * Implements hook_menu().
 */
function hub_menu() {
  $items = array();
  if (module_exists('ctools')) {
    $items['admin/hub/export'] = array(
      'title' => 'Export',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('hub_export_settings', 2),
      'access arguments' => array('hub export'),
      'type' => MENU_CALLBACK,
      'file' => 'hub.admin.inc',
    );
  }
  
  $items['admin/hub/delete'] = array(
    'title' => 'Delete a hub setting',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hub_delete_confirm', 2),
    'access arguments' => array('hub delete'),
    'type' => MENU_CALLBACK,
    'file' => 'hub.admin.inc',
  );

  return $items;
}


/**
 * Implements hook_permission().
 */
function hub_permission() {
  return array(
    'hub export' => array(
      'title' => t('Export Hub data'),
      'description' => t('View exportable code of hub data.'),
    ),
    'hub delete' => array(
      'title' => t('Delete hub settings'),
      'description' => t('Delete or revert hub settings from database.'),
    ),
    'hub data' => array(
      'title' => t('View hub data structure'),
      'description' => t('View hub data structure in the description of each form element that uses hub.'),
    ),
  );
}


/**
 * Implements hook_theme().
 */
function hub_theme() {
  return array(
    'hub_hint' => array(
      'variables' => array('parents' => array()),
      'file' => 'hub.theme.inc',
    ),
  );
}

/**
 * Implements hook_element_info_alter().
 */
function hub_element_info_alter(&$type) {
  // Some of Drupal's form elements are simple arrays that eventually break into
  // complex multi-field widgets, like password confirmation widgets or
  // textareas with configurable formats. Such elements have irregular methods
  // of saving their default values and require additional handling to make
  // sure these widgets get the data they expect.
  // 
  // Custom modules with complex elements that wish to integrate with the Hub
  // system can perform special handling of data using the #hub_value_callback
  // property to execute right before default values are set during the form
  // build. Custom modules can also do this on behalf of contrib modules in
  // either hook_element_info_alter(), or in case-by-case instance with
  // hook_form_alter(). The former is preferred however, since there is no harm
  // in keeping these values in the element info.
  $type['password_confirm']['#hub_value_callback'] = '_hub_password_confirm_value_callback';
  $type['text_format']['#hub_value_callback'] = '_hub_text_format_value_callback';
}


/******************************************************************************
 * Helper functions
 *****************************************************************************/

function _hub_additional_buttons(&$element) {
  $hub = $element['#hub'];
  
  // Add additional buttons if data is present.
  if (!empty($hub->data)) {
    if (module_exists('ctools') && user_access('hub export')) {
      $element['buttons']['export'] = array('#type' => 'submit', '#submit' => array('_hub_export'), '#value' => t('Export'));
    }
    
    // Revert
    if (($hub->export_type == (HUB_IN_DATABASE | HUB_IN_CODE)) && user_access('hub delete')) {
      $element['buttons']['revert'] = array('#type' => 'submit', '#submit' => array('_hub_delete'), '#value' => t('Revert Settings'));
    }
    
    // Delete
    else if (($hub->export_type != HUB_IN_CODE) && user_access('hub delete')) {
      $element['buttons']['delete'] = array('#type' => 'submit', '#submit' => array('_hub_delete'), '#value' => t('Delete Settings'));
    }
  }
}

function _hub_process($element, &$form_state) {
  $skip_elements = array('form_build_id', 'form_token', 'form_id');
  $skip_types = array('form', 'fieldset', 'vertical_tabs', 'item', 'container', 'submit');
  $hub = $form_state['complete form']['#hub']->data;

  // Inject this process callback to its children elements so it may be called
  // during the deep recursion. Since assigning a #process during the form
  // build actually prevents defined processes to be added, we also take
  // precaution to add defined processes on behalf of the form builder and make
  // sure our #process is first on the list.
  foreach (element_children($element) as $key) {
    if (!in_array($key, $skip_elements, TRUE)) {
      $processors = array();
      if (isset($element[$key]['#type'])) {
        $info = element_info($element[$key]['#type']);
        
        // Add some properties early on behalf of the form builder.
        if (!in_array($element[$key]['#type'], $skip_types)) {
          
          // Add #tree early
          if (!isset($element[$key]['#tree'])) {
            $element[$key]['#tree'] = $element['#tree'];
          }

          // Add #parents early
          if (!isset($element[$key]['#parents'])) {
            $element[$key]['#parents'] = $element[$key]['#tree'] && $element['#tree'] ? array_merge($element['#parents'], array($key)) : array($key);
          }
          
          // Describe Hub array tree to each element's value.
          if (user_access('hub data')) {
            $description = theme('hub_hint', array('parents' => $element[$key]['#parents']));
            $element[$key] += array('#description' => '');
            $element[$key]['#description'] .= $description;
          }
          
          // Provide default values
          if (!empty($hub) && drupal_array_nested_key_exists($hub, $element[$key]['#parents'])) {
            $hub_value = drupal_array_get_nested_value($hub, $element[$key]['#parents']);
            if (isset($info['#hub_value_callback']) && function_exists($info['#hub_value_callback'])) {
              $info['#hub_value_callback']($element[$key], $hub_value, $form_state);
            }
            else {
              $element[$key]['#default_value'] = $hub_value;
            }
          }
          
        }
        
        // Collect defined #process callbacks
        if (isset($info['#process'])) {
          $processors = $info['#process'];
        }
      }
      array_unshift($processors, '_hub_process');
      $element[$key]['#process'] = $processors;
    }
  }
  
  return $element;
}

function _hub_submit($form, &$form_state) {
  $hub = $form_state['complete form']['#hub'];
  $data = new stdClass();
  $data->name = $hub->name;
  $op = (in_array($hub->export_type, array(HUB_UNINITIALIZED, HUB_IN_CODE))) ? 'insert' : 'update';
  
  // Exclude unnecessary elements.
  form_state_values_clean($form_state);
  unset($form_state['values']['buttons']);
  
  // Add form state values to our data object.
  $data->data = serialize($form_state['values']);

  hub_save($op, $data, TRUE);
}

function _hub_delete($form, &$form_state) {
  unset($_GET['destination']);
  $form_state['redirect'] = array('admin/hub/delete', array('query' => array('destination' => $_GET['q'], 'name' =>  $form['#hub']->name)));
}

function _hub_export($form, &$form_state) {
  unset($_GET['destination']);
  $form_state['redirect'] = array('admin/hub/export', array('query' => array('name' => $form['#hub']->name)));
}

function _hub_password_confirm_value_callback(&$element, $value, &$form_state) {
  $element['#default_value'] = array('pass1' => $value, 'pass2' => $value);
}

function _hub_text_format_value_callback(&$element, $value, &$form_state) {
  $element['#default_value'] = $value['value'];
  $element['#format'] = $value['format'];
}

function _hub_load($name) {
  $results = db_select('hub', 'h')
    ->fields('h', array('data'))
    ->condition('name', $name)
    ->execute();
  $data = $results->fetchField();
  return unserialize($data);
}
