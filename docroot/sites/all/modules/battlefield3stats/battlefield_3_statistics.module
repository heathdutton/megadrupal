<?php

/**
 * @file
 * This module shows user statistics from bf3stats.com.
 */

/**
 * Implements hook_menu().
 */
function battlefield_3_statistics_menu() {
  return array(
    'user/%user/edit/bf3' => array(
      'title' => 'BF3 Statistics',
      'access callback' => 'battlefield_3_statistics_edit_access',
      'access arguments' => array(1),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('battlefield_3_statistics_user_form', 1),
      'type' => MENU_LOCAL_TASK,
      'weight' => 10,
    ),
    'user/%user/bf3' => array(
      'title' => 'My Battlefield 3 Soldier',
      'access callback' => 'battlefield_3_statistics_view_access',
      'access arguments' => array(1),
      'page callback' => 'battlefield_3_statistics_view_soldier',
      'page arguments' => array(1),
      'type' => MENU_LOCAL_TASK,
      'weight' => 10,
      'file' => 'battlefield_3_statistics.pages.inc',
    ),
  );
}

/**
 * Access callback for battlefield 3 statistics account editing.
 */
function battlefield_3_statistics_edit_access($account) {
  return user_edit_access($account);
}

/**
 * Access callback for battlefield 3 statistics account viewing.
 */
function battlefield_3_statistics_view_access($account) {
  return TRUE;
}

/**
 * BF3 stats configuration form.
 */
function battlefield_3_statistics_user_form($form, $user) {
  $form = array();
  $userdata = battlefield_3_statistics_userdata($user['build_info']['args'][0]);

  $form['battlefield_3_statistics_user_platform'] = array(
    '#title' => t('Platform'),
    '#type' => 'select',
    '#options' => _battlefield_3_statistics_platform(),
    '#required' => TRUE,
    '#default_value' => $userdata['platform'],
  );

  $form['battlefield_3_statistics_user_username'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#required' => TRUE,
    '#default_value' => $userdata['username'],
  );

  $form['battlefield_3_statistics_user_ident'] = array(
    '#type' => 'textfield',
    '#title' => t('App Ident'),
    '#default_value' => $userdata['ident'],
  );

  $form['battlefield_3_statistics_user_api_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Secret app API key'),
    '#default_value' => $userdata['api_key'],
  );
  $form['user'] = array('#type' => 'value', '#value' => $user['build_info']['args'][0]);
  $form['submit'] = array('#type' => 'submit', '#value' => t('Save'));

  return $form;
}

/**
 * Submit hook user_form.
 */
function battlefield_3_statistics_user_form_submit($form, &$form_state) {
  $values = $form_state['values'];
  db_delete('battlefield_3_statistics')->condition('uid', $values['user']->uid)->execute();
  $fields = array(
    'uid' => $values['user']->uid,
    'username' => $values['battlefield_3_statistics_user_username'],
    'ident' => $values['battlefield_3_statistics_user_ident'],
    'api_key' => $values['battlefield_3_statistics_user_api_key'],
    'platform' => $values['battlefield_3_statistics_user_platform'],
  );
  db_insert('battlefield_3_statistics')->fields($fields)->execute();
  drupal_set_message(t('Battlefield 3 userdata saved.'));
}

/**
 * Implements hook_theme().
 */
function battlefield_3_statistics_theme() {
  return array(
    'battlefield_3_statistics_block' => array(
      'variables' => array('block_id' => NULL),
    ),
    'battlefield_3_statistics_player' => array(
      'variables' => array('data' => NULL),
    ),
    'battlefield_3_statistics_player_extended' => array(
      'variables' => array('data' => NULL),
    ),
    'battlefield_3_statistics_image' => array(
      'variables' => array('path' => NULL),
    )
  );
}

/**
 * Implements hook_block_info().
 */
function battlefield_3_statistics_block_info() {
  $blocks['bf3_stats'] = array(
    'info' => t('Battlefield3 statistics'),
    'cache' => DRUPAL_CACHE_GLOBAL,
    'mb_enabled' => TRUE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function battlefield_3_statistics_block_view($delta = '', $edit = array()) {
  $block = array();
  if ($delta == 'bf3_stats') {
    $block_id = battlefield_3_statistics_block_id($delta, $edit);
    $block['subject'] = t('Battlefield3 statistics');
    $block['content'] = theme('battlefield_3_statistics_block', array(
      'block_id' => $block_id,
    ));
  }
  return $block;
}

/**
 * Implements hook_block_configure().
 */
function battlefield_3_statistics_block_configure($delta = '', $edit = array()) {
  $block_id = battlefield_3_statistics_block_id($delta, $edit);
  $form = array();
  if ($delta == 'bf3_stats') {
    $form['battlefield_3_statistics_platform'] = array(
      '#title' => t('Platform'),
      '#type' => 'select',
      '#options' => array(
        '' => t('Select platform'),
        'pc' => t('PC'),
        '360' => t('Xbox 360'),
        'ps3' => t('Playstation 3'),
      ),
      '#default_value' => variable_get('battlefield_3_statistics_platform' . $block_id, array()),
    );
    $form['battlefield_3_statistics_username'] = array(
      '#type' => 'textfield',
      '#title' => t('Username'),
      '#default_value' => variable_get('battlefield_3_statistics_username' . $block_id, ''),
    );
  }
  return $form;
}

/**
 * Implements hook_block_save().
 */
function battlefield_3_statistics_block_save($delta = '', $edit = array()) {
  if ($delta == 'bf3_stats') {
    $block_id = battlefield_3_statistics_block_id($delta, $edit);
    variable_set('battlefield_3_statistics_platform' . $block_id, $edit['battlefield_3_statistics_platform']);
    variable_set('battlefield_3_statistics_username' . $block_id, $edit['battlefield_3_statistics_username']);
  }
}

/**
 * Get the block_id when working with the multiblock module.
 * @param string $delta
 * @param array $edit
 * @return string $block_id
 */
function battlefield_3_statistics_block_id($delta, $edit) {
  $block_id = $delta;
  if (module_exists('multiblock')) {
    if (isset($edit['multiblock_delta'])) {
      $block_id = $delta . $edit['multiblock_delta']['#value'];
    }
  }
  return $block_id;
}

/**
 * Get the BF3 stats from bf3stats.com
 * @param array $options
 */
function _get_bf3_stats(array $options = array()) {
  $options = array_merge(array(
    'players' => array(),
    'opt' => array(
      'all' => TRUE,
    ),
    'platform' => NULL,
  ), $options);

  $postdata = array(
    'players' => json_encode($options['players']),
    'opt' => json_encode($options['opt']),
  );

  $cache_key = md5('bf3stats' . $options['platform'] . $options['players']);

  if (($cache = cache_get($cache_key)) && !empty($cache->data) && time() < $cache->expire) {
    $stats = $cache->data;
  }
  else {
    $curl = curl_init('http://api.bf3stats.com/' . $options['platform'] . '/playerlist/'); // Run POST Request via CURL
    curl_setopt($curl, CURLOPT_HEADER, FALSE);
    curl_setopt($curl, CURLOPT_POST, TRUE);
    curl_setopt($curl, CURLOPT_USERAGENT, 'BF3StatsAPI/0.1');
    curl_setopt($curl, CURLOPT_HTTPHEADER, array('Expect:'));
    curl_setopt($curl, CURLOPT_RETURNTRANSFER, TRUE);
    curl_setopt($curl, CURLOPT_POSTFIELDS, $postdata);

    $data = curl_exec($curl);
    $statuscode = curl_getinfo($curl, CURLINFO_HTTP_CODE);
    curl_close($curl);

    if ($statuscode == 200) {
      $stats = json_decode($data, TRUE);
      cache_set($cache_key, $stats, 'cache', CACHE_TEMPORARY);
    }
    else {
      $stats = array('status' => 'error', 'message' => t('BF3 Stats API error status: @statuscode', array('@statuscode' => $statuscode)));
    }
  }
  return $stats;
}

function theme_battlefield_3_statistics_block($variables) {
  $block_id = $variables['block_id'];
  $output = '';
  if (($platform = variable_get('battlefield_3_statistics_platform' . $block_id, array())) && ($username = variable_get('battlefield_3_statistics_username' . $block_id, ''))) {
    $data = _get_bf3_stats(array(
      'players' => array($username),
      'platform' => $platform
    ));

    if ($data['status'] == 'ok') {
      if ($data['failed'][$username]['error']) {
        return t($data['failed'][$username]['error']);
      }
      else {
        foreach ($data['list'] as $player) {
          $output .= theme('battlefield_3_statistics_player', $player);
        }
      }
    }
    else {
      return $data['error'];
    }
  }
  return $output;
}

function theme_battlefield_3_statistics_player($data) {
  $stats = $data['stats'];
  $global = $stats['global'];
  $scores = $stats['scores'];
  $weapons = $stats['weapons'];

  $current_rank = $stats['rank'];
  $next_rank = $stats['nextranks'][0];

  $current_target = $next_rank['score'] - $current_rank['score'];
  $current_score = $current_target - $next_rank['left'];
  $progress_percentage = round(($current_score / $current_target) * 100, 2);

  $best_weapon = array('kills' => NULL);
  foreach ($weapons as $weapon_name => $weapon) {
    if ($weapon['kills'] > $best_weapon['kills']) {
      $best_weapon = $weapon;
    }
  }

  $kd_ratio = ($global['deaths'] == 0) ? $global['kills'] : ($global['kills'] / $global['deaths']);
  $wl_ratio = ($global['losses'] == 0) ? $global['wins'] : ($global['wins'] / $global['losses']);
  $accuracy = ($global['shots'] == 0) ? 0 : ($global['hits'] / $global['shots']) * 100;

  $platforms = _battlefield_3_statistics_platform();

  $output = '<div class="battlefield-3-statistics">';
  $output .= '<h3>' . $data['name'] . ' (' . $stats['rank']['name'] . ')</h3>';

  $output .= '<div class="current-rank">' . theme('battlefield_3_statistics_image', array('path' => $current_rank['img_medium'], 'alt' => $current_rank['name'])) . '</div>';
  $output .= '<div class="next-rank">' . theme('battlefield_3_statistics_image', array('path' => $next_rank['img_medium'], 'alt' => $next_rank['name'])) . '</div>';

  $output .= '<div class="clearfix"></div>';
  $output .= '<h3>' . t('Progress') . '</h3>';
  $output .= '<div class="bf3-progress-bar">';
  $output .= '<div class="bf3-progress-bar-current" style="width:' . $progress_percentage . '%;"></div>';
  $output .= '</div>';

  $rows = array(
    array(
      array('data' => t('Progress:'), 'header' => TRUE),
      t('@progress / @target (@progress_percentage%)', array(
        '@progress' => $current_score,
        '@target' => $current_target,
        '@progress_percentage' => $progress_percentage
      ))
    ),
    array(
      array('data' => t('K/D ratio:'), 'header' => TRUE),
      t('@kd_ratio (@kills / @deaths)', array(
        '@kd_ratio' => round($kd_ratio, 2),
        '@kills' => $global['kills'],
        '@deaths' => $global['deaths']
      ))
    ),
    array(
      array('data' => t('W/L ratio:'), 'header' => TRUE),
      t('@wl_ratio (@wins / @losses)', array(
        '@wl_ratio' => round($wl_ratio, 2),
        '@wins' => $global['wins'],
        '@losses' => $global['losses']
      )),
    ),
    array(
      array('data' => t('Accuracy:'), 'header' => TRUE),
      t('@accuracy%', array(
        '@accuracy' => round($accuracy, 2)
      )),
    ),
    array(
      array('data' => t('Longest headshot:'), 'header' => TRUE),
      t('@longest_headshot meter', array(
        '@longest_headshot' => $global['longesths']
      ))
    ),
  );

  $output .= theme('table', array('rows' => $rows));
  $output .= '<small>' . t('Last update: @update', array('@update' => format_date($stats['date_check'], 'medium'))) . '</small>';
  $output .= '</div>';
  return $output;
}

function theme_battlefield_3_statistics_image($variables) {
  $image_base_path = drupal_get_path('module', 'battlefield_3_statistics') . '/images/';
  $variables = array_merge(array(
    'path' => '',
    'alt' => ''
  ), $variables);
  return '<img src="/' . $image_base_path . $variables['path'] . '" alt="' . $variables['alt'] . '" title="' . $variables['alt'] . '" />';
}

function theme_battlefield_3_statistics_player_extended($data) {
  $stats = $data['stats'];
//  $global = $stats['global'];
//  $scores = $stats['scores'];
  $weapons = $stats['weapons'];
  $game_modes = $stats['gamemodes'];

  uasort($weapons, battlefield_3_statistics_tablesort());

  $top_weapons_most_kills = array_slice($weapons, 0, 5);
  $output = '<h3>' . t('Top 5 weapons') . '</h3>';
  foreach ($top_weapons_most_kills as $weapon) {
    $weapon_minutes = round($weapon['time'] / 60);
    $output .= '<div class="bf3-weapon">';
    $output .= '<h4>' . $weapon['name'] . '</h4>';
    $output .= theme('battlefield_3_statistics_image', array('path' => $weapon['img']));
    $rows = array(
      array(array('data' => t('Kills:'), 'header' => TRUE), $weapon['kills']),
      array(array('data' => t('Headshots:'), 'header' => TRUE), $weapon['headshots'] . ' (' . round((($weapon['headshots'] / $weapon['hits']) * 100), 1) . '%)'),
      array(array('data' => t('Accuracy:'), 'header' => TRUE), round($weapon['hits'] / $weapon['shots'] * 100, 1) . '%'),
      array(array('data' => t('Time played:'), 'header' => TRUE), format_interval(time() - (time() - $weapon['time']))),
      array(array('data' => t('Kills per minute:'), 'header' => TRUE), round($weapon['kills'] / $weapon_minutes, 1)),
    );
    $output .= theme('table', array('rows' => $rows));
    $output .= '</div>';
  }

  $all_weapons = $weapons;
  $rows = array();
  $header = array(
    array(),
    array('data' => t('Kills'), 'field' => 'kills', 'sort' => 'ASC'),
    array('data' => t('Headshots'), 'field' => 'headshots'),
    array('data' => t('Shots'), 'field' => 'shots'),
    array('data' => t('Hits'), 'field' => 'hits'),
    array('data' => t('Accuracy')),
    array('data' => t('Time played')),
    array('data' => t('KPM'))
  );
  foreach ($all_weapons as $weapon) {
    $weapon_minutes = round($weapon['time'] / 60);
    $rows[] = array(
      $weapon['name'],
      $weapon['kills'],
      $weapon['headshots'],
      $weapon['shots'],
      $weapon['hits'],
      ($weapon['shots'] == 0) ? '0.0' : number_format(round($weapon['hits'] / $weapon['shots'] * 100, 1), 1) . '%',
      format_interval(time() - (time() - $weapon['time'])),
      ($weapon_minutes == 0) ? '0.0' : number_format(round($weapon['kills'] / $weapon_minutes, 1), 1)
    );
  }
  $output .= '<div class="bf3-weapons">';
  $output .= theme('table', array('header' => $header, 'rows' => $rows, 'battlefield-3-table', 'sticky' => TRUE));
  $output .= '</div>';

  $rows = array();
  $header = array(
    t('Game mode'),
    t('Wins'),
    t('Losses'),
  );
  foreach ($game_modes as $game_mode) {
    $rows[] = array(
      $game_mode['name'],
      $game_mode['wins'],
      $game_mode['losses'],
    );
  }
  $output .= '<div class="bf3-weapons">';
  $output .= '<h3>' . t('Game modes') . '</h3>';
  $output .= theme('table', array('header' => $header, 'rows' => $rows, 'battlefield-3-table', 'sticky' => TRUE));
  $output .= '</div>';
  return $output;
}

/**
 * Get userdata for individual users
 * @param object/int/string $user
 * @return array
 */
function battlefield_3_statistics_userdata($user) {
  $uid = NULL;
  if (is_object($user)) {
    $uid = $user->uid;
  }
  if (!$uid && is_numeric($user)) {
    $uid = $user;
  }
  if (!$uid) {
    return array(
      'username' => NULL,
      'ident' => NULL,
      'api_key' => NULL,
      'platform' => NULL,
    );
  }

  return db_select('battlefield_3_statistics', 'bf3s')
    ->fields('bf3s')
    ->condition('uid', $uid, '=')
    ->execute()
    ->fetchAssoc();
}

/**
 * The different gaming platforms the API supports
 * @return array
 */
function _battlefield_3_statistics_platform() {
  return array(
    '' => t('Select platform'),
    'pc' => t('PC'),
    '360' => t('Xbox 360'),
    'ps3' => t('Playstation 3')
  );
}

/**
 * Fetch the sorting method from the URL
 * @return string
 */
function battlefield_3_statistics_tablesort() {
  $sorting_method = '_battlefield_3_statistics_weapons_kills_sort';
  if (isset($_GET['order'])) {
    switch ($_GET['order']) {
      case t('Headshots') :
        return '_battlefield_3_statistics_weapons_headshots_sort';
      case t('Shots') :
        return '_battlefield_3_statistics_weapons_shots_sort';
      case t('Hits') :
        return '_battlefield_3_statistics_weapons_hits_sort';
      default :
        return $sorting_method;
    }
  }
  return $sorting_method;
}

function _battlefield_3_statistics_weapons_kills_sort($a, $b) {
  return ($a['kills'] < $b['kills']) ? 1 : -1;
}

function _battlefield_3_statistics_weapons_headshots_sort($a, $b) {
  return ($a['headshots'] < $b['headshots']) ? 1 : -1;
}

function _battlefield_3_statistics_weapons_shots_sort($a, $b) {
  return ($a['shots'] < $b['shots']) ? 1 : -1;
}

function _battlefield_3_statistics_weapons_hits_sort($a, $b) {
  return ($a['hits'] < $b['hits']) ? 1 : -1;
}
