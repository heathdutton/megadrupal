<?php

/**
 * @file
 *  Entity Extras module functions.
 */

/**
 * Implements hook_entity_info_alter().
 */
function entity_extras_entity_info_alter(&$info) {

  // Add entity create/edit form keys for core forms.

  $info['node']['forms'] = array(
    'create' => 'node_form',
    'edit' => 'node_form',
    'entity element' => '#node',
  );

  $info['user']['forms'] = array(
    'create' => 'user_register_form',
    'edit' => 'user_profile_form',
    'entity element' => '#user',
  );

  if (module_exists('comment')) {
    $info['comment']['forms'] = array(
      'create' => 'comment_reply',
      'edit' => 'comment_edit_page',
      'entity element' => '#entity',
    );
  }

  if (module_exists('taxonomy')) {
    $info['taxonomy_term']['forms'] = array(
      'create' => 'taxonomy_form_term',
      'edit' => 'taxonomy_form_term',
      'entity element' => '#vocabulary',
    );
  }

  // Add active state key
  $info['node']['entity keys']['active'] = 'status';
}

/**
 * Determines the for element for storing the entity.
 *
 * @param string $entity_type
 *  The entity type to use for the look up.
 *
 * @return string
 *  The form element name or NULL if not found.
 */
function entity_extras_entity_form_element($entity_type) {
  $info = entity_get_info($entity_type);
  if (isset($info['forms']['entity element'])) {
    return $info['forms']['entity element'];
  }

  return NULL;
}

/**
 * Determines if the form is an entity edit/create form
 *
 * @param array $form_state
 *   The current form state.
 * @param array $type
 *   The type of form being checked (edit|create)
 *
 * @return bool
 *   TRUE if the form is an entity edit/create form.
 */
function entity_extras_entity_form_type($form_state, $type) {
  $forms = &drupal_static(__FUNCTION__);
  if (empty($forms)) {
    $cache = cache_get('entity_extras_forms');
    if ($cache) {
      $forms = $cache->data;
    }
    else {
      $entity_info = entity_get_info();
      $forms = array();
      $keys = array('create', 'edit');
      foreach ($entity_info as $name => $info) {
        if (empty($info['forms'])) {
          continue;
        }

        foreach ($keys as $key) {
          $forms[$key][$info['forms'][$key]] = $name;
        }
      }
      cache_set('entity_extras_forms', $forms, 'cache');
    }
  }

  $build = $form_state['build_info'];
  foreach (array('form_id', 'base_form_id') as $key) {
    if (isset($build[$key]) && isset($forms[$type][$build[$key]])) {
      return $forms[$type][$build[$key]];
    }
  }

  return FALSE;
}

/**
 * Checks if an entity is active.
 *
 * @param String $entity_type
 *   The type of entity being checked.
 * @param Entity $entity
 *   The entity object being checked.
 *
 * @return bool
 *   Returns NULL if not supported or TRUE if active.
 */
function entity_extras_is_active($entity_type, $entity) {
  $entity_info = entity_get_info($entity_type);
  // We only care about entities which support active state.
  if (empty($entity_info['entity keys']['active'])) {
    return NULL;
  }

  return !empty($entity->{$entity_info['entity keys']['active']});
}

