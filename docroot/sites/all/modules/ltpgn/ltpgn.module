<?php
/**
 * @file
 * Module that creates a content type for viewing chess games in PGN format.
 * Acknowlegements: This module depends on ltpgnviewer.
 * http://www.lutanho.net/
 */

/**
 * Implements hook_menu().
 */
function ltpgn_menu() {

  // Admin menu option for ltpgn settings.
  $items['admin/config/chess/ltpgn/settings'] = array(
    'title' => 'Chess PGN Viewer Settings',
    'description' => 'Set chess PGN viewer values such as frame width and height.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ltpgn_admin'),
    'access arguments' => array('chess pgn admin'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'ltpgn.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_node_info().
 * Nodes provided by this module: Chess game PGN
 */
function ltpgn_node_info() {

  return array(
    'ltpgn' => array(
      'name' => t('Chess PGN Game'),
      'base' => 'ltpgn',
      'description' => t('One game of chess in PGN (Portable Game Notation)'),
      'has_title' => TRUE,
      'title_label' => t('Title'),
      'has_body' => FALSE,
      'locked' => TRUE,
    ),
  );
}

/**
 * Implements hook_form().
 *
 * Form to specify the PGN file to be uploaded and the node title
 */
function ltpgn_form($node) {
  // Get metadata for this node type
  // We defined this in ltpgn_node_info().
  $type = node_type_get_type($node);

  // Title for the game.
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#required' => TRUE,
    '#default_value' => $node->title,
    '#weight' => -5,
    '#maxlength' => 50,
    '#size' => 15,
  );

  // File upload button.
  $form['pgnfile'] = array(
    '#type' => 'file',
    '#title' => t('PGN File to Upload'),
    '#size' => 48,
    '#description' => 'Name of a file containing a chess game in Portable Game Notation with the suffix .PGN or .pgn',
  );

  // Needed because of using file upload field.
  $form['#attributes'] = array('enctype' => "multipart/form-data");

  return $form;
}

/**
 * Ensure that the pgn file contains no html or java script
 */
function ltpgn_remove_html($filename, $newname) {
  $old_file = fopen($filename, "r");
  if (!$old_file) {
    drupal_set_message(t('Could not open PGN file'), 'error');
    return;
  }
  $file_contents = fread($old_file, filesize($filename));
  if (!$file_contents) {
    drupal_set_message(t('Could not read PGN file'), 'error');
    return;
  }
  fclose($old_file);
  // Replace all < and > with blank to remove any html, java script or php.
  // We can't use drupal's input filters directly or they mess up the pgn file.
  $file_contents = str_replace('<', ' ', $file_contents);
  $file_contents = str_replace('>', ' ', $file_contents);
  $new_file = fopen($newname, "w");
  if (!$new_file) {
    drupal_set_message(t('Failed to open new PGN file'), 'error');
    return;
  }
  if (!fwrite($new_file, $file_contents)) {
    drupal_set_message(t('Failed to save new PGN file'), 'error');
    return;
  }
  if (!fclose($new_file)) {
    drupal_set_message(t('Failed to close new PGN file'), 'error');
    return;
  }
  unlink($filename);
}

/**
 * Add or update a game.
 */
function ltpgn_add_update($node) {
  $nid = $node->nid;
  $title = $node->title;
  $file = $node->pgnfile;

  // Get admin settings.
  $settings = ltpgn_settings();
  $max_size = 1000 * $settings['max_size'];

  // Limit to files with the .pgn suffix.
  $validators = array(
    'file_validate_extensions' => array('pgn', 'PGN'),
    'file_validate_size' => array($max_size, 0),
  );

  // Create pgn files subdirectory if it doesn't exist.
  $directory = $settings['directory'];
  $path = 'public://' . $directory;
  if (!file_prepare_directory($path, FILE_CREATE_DIRECTORY)) {
    drupal_set_message(t('Could not create file @file', array('@file' => $path)), 'error');
  }

  // Upload the file and rename it according to the node id
  // (Has to be .html to prevent the browser trying to open it
  // when displayed in the right hand frame).
  if ($pgnfile = file_save_upload('pgnfile', $validators, $path, FILE_EXISTS_REPLACE)) {
    $filename = $pgnfile->destination;
    $base = basename($filename);
    $dir = dirname($filename);
    $newname = "$dir/pgn$nid.html";
    // Delete existing file first.
    if (file_exists($newname)) {
      unlink($newname);
    }
    // Rename file, and remove any html tags.
    ltpgn_remove_html($filename, $newname);
  }
  else {
    drupal_set_message('Failed to upload PGN file', 'error');
  }
}

/**
 * Implements hook_insert().
 *
 * Called when a chess game is created.
 */
function ltpgn_insert($node) {
  ltpgn_add_update($node);
}

/**
 * Implements hook_update().
 *
 * Called when a chess game is updated.
 */
function ltpgn_update($node) {
  ltpgn_add_update($node);
}

/**
 * Implements hook_delete().
 *
 * Called when a chess game node is deleted
 */
function ltpgn_delete($node) {

  // Delete the file.
  $nid = $node->nid;
  $settings = ltpgn_settings();
  $directory = $settings['directory'];
  $path = variable_get('file_public_path', conf_path() . '/files') . '/' . $directory;
  $file = "$path/pgn$nid.html";
  unlink($file);
  drupal_set_message(t("PGN File Deleted"));
}

/**
 * Implements hook_view().
 *
 * View a PGN file
 */
function ltpgn_view($node, $view_mode) {
  // Start with default display.
  node_object_prepare($node);
  if ($view_mode == 'full') {
    // Setup some content and tell drupal how to theme it.
    $node->content['pgnview'] = array(
      '#markup' => theme('ltpgn_view', array('node' => $node)),
      '#weight' => 2,
      '#type' => 'markup',
    );
  }
  return $node;
}

/**
 * Implements hook_theme().
 */
function ltpgn_theme($existing, $type, $theme, $path) {
  return array(
    'ltpgn_view' => array(
      'variables' => array('node' => NULL),
    ),
  );
}

/**
 * Function to 'theme' a chess pgn node node.
 */
function theme_ltpgn_view($variables) {
  $node = $variables['node'];
  $output = '<div class="ltpgn">';

  // Work out the filename.
  $nid = $node->nid;
  global $base_url;
  $settings = ltpgn_settings();
  $directory = $settings['directory'];
  $path = variable_get('file_public_path', conf_path() . '/files') . '/' . $directory;
  $file = "$base_url/$path/pgn$nid.html";
  // Get admin settings.
  $settings = ltpgn_settings();
  // Show PGN game in game viewer.
  $viewer = "$base_url/" . $settings['viewer'];
  $height = $settings['frame_height'];
  $width = $settings['frame_width'];
  $output .= '<iframe src="' . $viewer . '?' . "$file" . '&ParsePgn=2" height=' . $height . ' width=' . $width . '></iframe>';
  $output .= '</div>';

  return $output;
}

/**
 * Implements hook_permission().
 */
function ltpgn_permission() {
  return array(
    'chess pgn game' => array(
      'title' => t('Create PGN Games'),
      'description' => t('Create/update/edit/delete PGN Games'),
    ),
    'chess pgn admin' => array(
      'title' => t('Administer Ltpgn module'),
      'description' => t('Change settings for Ltpgn module'),
    ),
  );
}

/**
 * Implements hook_access().
 */
function ltpgn_node_access($node, $op, $account) {
  // Anyone can view chess games.
  if ($op == 'view') {
    return NODE_ACCESS_ALLOW;
  }
  // Only those with access can create/update/edit/delete.
  return user_access('chess pgn game', $account);
}

/**
 * Function to return the default settings for the module:
 *
 * @return array
 *   Array containing, settings, e.g. frame_width, frame_height.
 */
function ltpgn_default_settings() {

  $default = array(
    'frame_width'  => 600,
    'frame_height' => 450,
    'max_size' => 10,
    'directory' => 'pgn',
  );

  return $default;
}

/**
 * Function to return the admin settings for the module:
 * @return array
 *   Array containing, settings, e.g. frame_width, frame_height.
 */
function ltpgn_settings() {

  $default = ltpgn_default_settings();

  $settings = variable_get('ltpgn_settings', $default);

  $viewer = ltpgn_viewer();
  $settings['viewer'] = $viewer;
  return $settings;
}

/**
 * Function to return the location of the pgn viewer.
 * @return string
 *   string containing location of viewer.
 */
function ltpgn_viewer() {
  $viewer_lib = 'ltpgnviewer';
  $viewer = libraries_get_path($viewer_lib) . '/ltpgnviewer.html';
  return $viewer;
}
