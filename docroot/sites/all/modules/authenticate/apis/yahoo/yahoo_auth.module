<?php

/**
 * Implements hook_help().
().
 */
function yahoo_auth_help($path, $arg) {
  switch ($path) {
    case 'admin/help#authenticate':
      $output = t('<p>Put info here specific to Yahoo API.</p>');
      return $output;
  }
}

/**
 * Implements hook_menu()
().
 * The menu path 'node/$nid/auth' shows various states of Authentication page
 *    either used to fire off results or display results as a tab on node page.
 *
 *   NOTE - access perms defined in authenticate module for each API
 */
function yahoo_auth_menu() {
  $items = array();

  $items['node/%node/auth/yahoo'] = array(
    'title' => 'Yahoo',
    'page callback' => 'yahoo_auth_run',
    'page arguments' => array(1),
    'access callback' => 'yahoo_auth_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function yahoo_auth_access($node) {
  global $user;
  $enabled = variable_get('authenticate_' . $node->type, 0);
  $uaccess = user_access('Yahoo authenticate documents', $user);
  return ($uaccess & $enabled) ? true : false;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function yahoo_auth_form_authenticate_admin_settings_alter(&$form, &$form_state) {
  // system settings specific to Yahoo 
  $form['AuthSearchAPISettings']['auth_yahoo_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Yahoo API Settings'),
    '#collapsible' => true,
    '#collapsed' => false,
  );

  $form['AuthSearchAPISettings']['auth_yahoo_settings']['auth_yahoo_appid'] = array(
    '#type' => 'textfield',
    '#title' => t("Yahoo Application ID"),
    '#default_value' => variable_get('auth_yahoo_appid', 'YahooDemo'),
    '#description' => t("Your Yahoo Application ID. If you do not have one you will need to sign up for a Yahoo account to get one."),
  );
}

/**
 * Menu callback to select different search engines.
 */
function yahoo_auth_run($node) {
  drupal_set_title(t('Yahoo Authentication of: %title', array('%title' => $node->title)), PASS_THROUGH);
  return _auth_show($node, 'Yahoo'); // use case sensitve naem here and we'll strtolower it later  
}

/* run the routine that does main crunch process
 *     - but this is a STD API so lets just call our STD process routine
 */
function yahoo_auth_crunch($node) {
  _auth_std_crunch($node);
}

/* Status Update Routine
 *     - but this is a STD API so lets just call our STD status routine
 */
function yahoo_auth_status($node) {
  _auth_std_status($node);
}

/* Display Results Routine
 *     - but this is a STD API so lets just call our STD results routine
 */
function yahoo_auth_results($node) {
  return _auth_std_results($node);
}

// performs a Yahoo REST search on the search string and returns max 5 top matching urls
/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function yahoo_auth_dosearch($string) {
  // Request Yahoo! REST Web Service using
  // HTTP POST with curl. PHP4/PHP5
  // Allows retrieval of HTTP status code for error reporting
  // Author: Jason Levitt
  // February 1, 2006
  // The POST URL and parameters

  $request =  'http://search.yahooapis.com/WebSearchService/V1/webSearch';
  $appid = variable_get('auth_Yahoo_AppID', 'YahooDemo');
  $results = 5;
  $output = 'php';
  $type = 'phrase';

  $postargs = 'appid=' . $appid . '&results=' . $results . '&query=' . urlencode($string) . '&output=' . $output . '&type=' . $type;

  // Get the curl session object
  $session = curl_init($request);
  // Set the POST options.
  curl_setopt($session, CURLOPT_POST, true);
  curl_setopt($session, CURLOPT_POSTFIELDS, $postargs);
  curl_setopt($session, CURLOPT_HEADER, true);
  curl_setopt($session, CURLOPT_RETURNTRANSFER, true);

  // Do the POST and then close the session
  $response = curl_exec($session);
  curl_close($session);

  // Get HTTP Status code from the response
  $status_code = array();
  preg_match('/\d\d\d/', $response, $status_code);

  // Check for errors
  switch ($status_code[0]) {
    case 200:
      // Success
      break;
    case 503:
      return ('Your call to Yahoo Web Services failed and returned an HTTP status of 503. That means: Service unavailable. An internal problem prevented us from returning data to you.');
      //break;
    case 403:
      return ('Your call to Yahoo Web Services failed and returned an HTTP status of 403. That means: Forbidden. You do not have permission to access this resource, or are over your rate limit.');
      //break;
    case 400:
      // You may want to fall through here and read the specific XML error
      return ('Your call to Yahoo Web Services failed and returned an HTTP status of 400. That means:  Bad request. The parameters passed to the service did not match as expected. The exact error is returned in the XML response.');
      //break;
    default:
      return ('Your call to Yahoo Web Services returned an unexpected HTTP status of:' . $status_code[0]);
  }

  // Get the serialized PHP array from the response, bypassing the header
  if (!($php = strstr($response, 'a:'))) {
    $php = null;
  }

  $results = unserialize($php);
  $urls = array();

  // for now just return matching URL's; but later possibly pass back summary field as well ??
  foreach ($results['ResultSet']['Result'] as $result) {
    $urls[] = $result['Url'];
  }

  return $urls;
}





