<?php

/**
 * Implements hook_help().
().
 */
function google_auth_help($path, $arg) {
  switch ($path) {
    case 'admin/help#authenticate':
      $output = t('<p>Put info here specific to Google API.</p>');
      return $output;
  }
}

/**
 * Implements hook_menu()
().
 * The menu path 'node/$nid/auth' shows various states of Authentication page
 *    either used to fire off results or display results as a tab on node page.
 *
 *   NOTE - access perms defined in authenticate module for each API
 */
function google_auth_menu() {
  $items = array();

  $items['node/%node/auth/google'] = array(
    'title' => 'Google',
    'page callback' => 'google_auth_run',
    'page arguments' => array(1),
    'access callback' => 'google_auth_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}


/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function google_auth_access($node) {
  global $user;
  $enabled = variable_get('authenticate_' . $node->type, 0);
  $uaccess = user_access('Google authenticate documents', $user);
  return ($uaccess & $enabled) ? true : false;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function google_auth_form_authenticate_admin_settings_alter(&$form, &$form_state) {
  // system settings specific to Google 
  $form['AuthSearchAPISettings']['auth_google_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Google API Settings'),
    '#collapsible' => true,
    '#collapsed' => false,
  );

  $form['AuthSearchAPISettings']['auth_google_settings']['auth_google_searchurl'] = array(
    '#type' => 'textfield',
    '#title' => t("Google Search URL"),
    '#default_value' => variable_get('auth_google_searchurl', 'http://ajax.googleapis.com/ajax/services/search/web'),
    '#description' => t("URL of the Google Search API."),
  );
  $form['AuthSearchAPISettings']['auth_google_settings']['auth_google_referrer'] = array(
    '#type' => 'textfield',
    '#title' => t("Google HTTP Referrer"),
    '#default_value' => variable_get('auth_google_referrer', 'http://'),
    '#description' => t("HTTP Referrer header required to be set for Google Searchs."),
  );
}

/**
 * Menu callback to select different search engines.
 */
function google_auth_run($node) {
  drupal_set_title(t('Google Authentication of: %title', array('%title' => $node->title)), PASS_THROUGH);    
  // use case sensitve name here and we'll strtolower it later  
  return _auth_show($node, 'Google'); 
}

/* run the routine that does main crunch process
 *     - but this is a STD API so lets just call our STD process routine
 */
function google_auth_crunch($node) {
  _auth_std_crunch($node);
}

/* Status Update Routine
*     - but this is a STD API so lets just call our STD status routine
*/
function google_auth_status($node) {
  _auth_std_status($node);
}

/* Display Results Routine
*     - but this is a STD API so lets just call our STD results routine
*/
function google_auth_results($node) {
  return _auth_std_results($node);
}

// performs a Google REST search on the search string and returns max 5 top matching urls
/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function google_auth_dosearch($string) {
  // Request Google! REST Web Service using
  // HTTP POST with curl. PHP4/PHP5
  // Allows retrieval of HTTP status code for error reporting
  // Author: Jason Levitt
  // February 1, 2006
  // The POST URL and parameters

  $request =  trim(variable_get('auth_google_searchurl', ''));
  $referrer = trim(variable_get('auth_google_referrer', ''));
  //$results = 5;
  $version = "1.0";
  //$output = 'php';
  //$type='phrase';

  // entire phrase, limit to 4 results
  $getargs = '?v=' . $version . '&rsz=small&q=%22' . urlencode($string) . '%22';

  // Get the curl session object
  $session = curl_init($request . $getargs);
  // Set the GET options.
  curl_setopt($session, CURLOPT_HTTPGET, true);
  //curl_setopt ($session, CURLOPT_POSTFIELDS, $postargs);
  curl_setopt($session, CURLOPT_HEADER, true);
  curl_setopt($session, CURLOPT_RETURNTRANSFER, true);
  curl_setopt($session, CURLOPT_REFERER, $referrer);

  // Do the POST and then close the session
  $response = curl_exec($session);
  curl_close($session);

  // Get HTTP Status code from the response
  $status_code = array();
  preg_match('/\d\d\d/', $response, $status_code);

  // Check for errors
  switch ($status_code[0]) {
    case 200:
      // Success   
      // Get the serialized PHP array from the response, bypassing the header
      if (!(preg_match('^{"response.*}^', $response, $json))) {
        $json = null;
      }        
      $results = json_decode($json[0]);
      if ($results->responseStatus && $results->responseStatus != 200) {
        return $results->responseDetails;
      }        
      $urls = array();
      break;
    case 503:
      return ('Your call to Google Web Services failed and returned an HTTP status of 503. That means: Service unavailable. An internal problem prevented us from returning data to you.');
      //break;
    case 403:
      return ('Your call to Google Web Services failed and returned an HTTP status of 403. That means: Forbidden. You do not have permission to access this resource, or are over your rate limit.');
      //break;
    case 400:
      // You may want to fall through here and read the specific XML error
      return ('Your call to Google Web Services failed and returned an HTTP status of 400. That means:  Bad request. The parameters passed to the service did not match as expected. The exact error is returned in the XML response.');
      //break;
    default:
      return ('Your call to Google Web Services returned an unexpected HTTP status of:' . $status_code[0]);
  }
  
  // for now let's not suport highlighting by attaching query string as it will break our unique call later
  if (count($results->responseData->results)) {
    foreach ($results->responseData->results as $result) {
      // if ($result->cacheUrl) $urls[] = $result->cacheUrl.'+%22'.urlencode($string).'%22';
      // else $urls[] = $result->url;
      if (substr($result->url, -4) == ".pdf") {
        $urls[] = $result->cacheUrl;
      }
      else {
        $urls[] = $result->url;
      }
    }
  }

  return $urls;
}





