<?php

/**
 * Implements hook_help().
 */
function uc_product_actions_help($section) {
  switch ($section) {
    case 'admin/help#uc_product_actions':
      $output = '<p>'. t('The Ubercart Product Actions module provides actions that can be used in custom code or in conjunction with Views Bulk Operations (VBO) to modify product prices and weights.') .'</p>';
      $output .= '<p>'. t('New actions provided include:') .'</p>';
      $output .= '<ul><li>'. t('Modify product weight') .'</li>';
      $output .= '<li>'. t('Modify product list price') .'</li>';
      $output .= '<li>'. t('Modify product cost') .'</li>';
      $output .= '<li>'. t('Modify product sell price') .'</li></ul>';
      $output .= '<li>'. t('Modify default quantity to add to cart') .'</li></ul>';
      $output .= '<p>'. t('These actions can be used to manipulate the prices of multiple products, using three methods:') .'</p>';
      $output .= '<ol><li>'. t('Percentage - alter values up or down by a percentage.') .'</li>';
      $output .= '<li>'. t('Difference - alter values up or down by a fixed amount.') .'</li>';
      $output .= '<li>'. t('Absolute - set values to a specified number.') .'</li></ol>';
      $output .= '<p>'. t('For more information, see README.txt and the <a href="http://drupal.org/node/335694">VBO quickstart guide</a>.') .'</p>';
      return $output;
  }
}

/**
 * Implements hook_action_info().
 *
 * This function defines all custom actions added by this module.
 */
function uc_product_actions_action_info() {
  return array(
    'uc_product_actions_update_weight_action' => array(
      'type' => 'node',
      'label' => t('Modify product weight'),
      'configurable' => TRUE,
      'triggers' => array(
        'nodeapi' => array('update'),
      )
    ),
    'uc_product_actions_update_cost_action' => array(
      'type' => 'node',
      'label' => t('Modify product cost'),
      'configurable' => TRUE,
      'triggers' => array(
        'nodeapi' => array('update'),
      )
    ),
    'uc_product_actions_update_list_price_action' => array(
      'type' => 'node',
      'label' => t('Modify product list price'),
      'configurable' => TRUE,
      'triggers' => array(
        'nodeapi' => array('update'),
      )
    ),
    'uc_product_actions_update_sell_price_action' => array(
      'type' => 'node',
      'label' => t('Modify product sell price'),
      'configurable' => TRUE,
      'triggers' => array(
        'nodeapi' => array('update'),
      )
    ),
    'uc_product_actions_update_default_qty_action' => array(
      'type' => 'node',
      'label' => t('Modify default quantity to add to cart'),
      'configurable' => TRUE,
      'triggers' => array(
        'nodeapi' => array('update'),
      )
    ),
  );
}

/**
 * 'Modify product weight' action.
 *
 * @see uc_product_actions_form_builder()
 * @see uc_product_actions_form_validator()
 * @see uc_product_actions_form_submitter()
 * @see uc_product_actions_action_executor()
 */
function uc_product_actions_update_weight_action_form($context) {
  $form = uc_product_actions_form_builder('weight');
  return $form;
}
function uc_product_actions_update_weight_action_validate($form, &$form_state) {
  uc_product_actions_form_validator('weight', $form_state);
}
function uc_product_actions_update_weight_action_submit($form, $form_state) {
  $values = uc_product_actions_form_submitter('weight', $form_state);
  return $values;
}
function uc_product_actions_update_weight_action($node, $context) {
  uc_product_actions_action_executor('weight', $node, $context);
}

/**
 * 'Modify product cost' action.
 *
 * @see uc_product_actions_form_builder()
 * @see uc_product_actions_form_validator()
 * @see uc_product_actions_form_submitter()
 * @see uc_product_actions_action_executor()
 */
function uc_product_actions_update_cost_action_form($context) {
  $form = uc_product_actions_form_builder('cost');
  return $form;
}
function uc_product_actions_update_cost_action_validate($form, &$form_state) {
  uc_product_actions_form_validator('cost', $form_state);
}
function uc_product_actions_update_cost_action_submit($form, $form_state) {
  $values = uc_product_actions_form_submitter('cost', $form_state);
  return $values;
}
function uc_product_actions_update_cost_action($node, $context) {
  uc_product_actions_action_executor('cost', $node, $context);
}

/**
 * 'Modify product list price' action.
 *
 * @see uc_product_actions_form_builder()
 * @see uc_product_actions_form_validator()
 * @see uc_product_actions_form_submitter()
 * @see uc_product_actions_action_executor()
 */
function uc_product_actions_update_list_price_action_form($context) {
  $form = uc_product_actions_form_builder('list_price');
  return $form;
}
function uc_product_actions_update_list_price_action_validate($form, &$form_state) {
  uc_product_actions_form_validator('list_price', $form_state);
}
function uc_product_actions_update_list_price_action_submit($form, $form_state) {
  $values = uc_product_actions_form_submitter('list_price', $form_state);
  return $values;
}
function uc_product_actions_update_list_price_action($node, $context) {
  uc_product_actions_action_executor('list_price', $node, $context);
}

/**
 * 'Modify product sell price' action.
 *
 * @see uc_product_actions_form_builder()
 * @see uc_product_actions_form_validator()
 * @see uc_product_actions_form_submitter()
 * @see uc_product_actions_action_executor()
 */
function uc_product_actions_update_sell_price_action_form($context) {
  $form = uc_product_actions_form_builder('sell_price');
  return $form;
}
function uc_product_actions_update_sell_price_action_validate($form, &$form_state) {
  uc_product_actions_form_validator('sell_price', $form_state);
}
function uc_product_actions_update_sell_price_action_submit($form, $form_state) {
  $values = uc_product_actions_form_submitter('sell_price', $form_state);
  return $values;
}
function uc_product_actions_update_sell_price_action($node, $context) {
  uc_product_actions_action_executor('sell_price', $node, $context);
}

/**
 * 'Modify default quantity to add to cart' action.
 *
 * @see uc_product_actions_form_builder()
 * @see uc_product_actions_form_validator()
 * @see uc_product_actions_form_submitter()
 * @see uc_product_actions_action_executor()
 */
function uc_product_actions_update_default_qty_action_form($context) {
  $form = uc_product_actions_form_builder('default_qty');
  return $form;
}
function uc_product_actions_update_default_qty_action_validate($form, &$form_state) {
  uc_product_actions_form_validator('default_qty', $form_state);
}
function uc_product_actions_update_default_qty_action_submit($form, $form_state) {
  $values = uc_product_actions_form_submitter('default_qty', $form_state);
  return $values;
}
function uc_product_actions_update_default_qty_action($node, $context) {
  uc_product_actions_action_executor('default_qty', $node, $context);
}

/**
 * Build the action form.
 */
function uc_product_actions_form_builder($action) {
  $action_str = str_replace('_', ' ', $action);
  $form[$action . '_method'] = array(
    '#title' => t('Method to modify the '. $action_str),
    '#type' => 'select',
    '#options' => array('percentage' => t('Percentage'), 'difference' => t('Difference'), 'absolute' => t('Absolute')),
    '#multiple' => FALSE,
    '#description' => t('Modify the ' . $action_str . ' using a percentage, a difference, or set to an absolute value.'),
  );
  $form[$action . '_change'] = array(
    '#title' => t('Value'),
    '#type' => 'textfield',
    '#size' => 15,
    '#description' => t('Enter a numeric value for changing the ' . $action_str . ' by the selected method. Note: the result will be rounded according to your store settings.'),
    '#default_value' => '',
  );
  return $form;
}

/**
 * Validate the action form submission.
 */
function uc_product_actions_form_validator($action, &$form_state) {
  $form_state['values'][$action . '_change'] = check_plain($form_state['values'][$action . '_change']);
  $method = $form_state['values'][$action . '_method'];
  if ($form_state['values'][$action . '_change'] == '') {
    form_set_error($action . '_change', t('Please enter a value.'));
  }
  elseif (!is_numeric($form_state['values'][$action . '_change'])) {
    form_set_error($action . '_change', t('Please enter a numerical value.'));
  }
  elseif (($method == 'percentage' || $method == 'difference') && $form_state['values'][$action . '_change'] == 0) {
    form_set_error($action . '_change', t('Please enter a non-zero value.'));
  }
}

/**
 * Submit the action form values.
 */
function uc_product_actions_form_submitter($action, $form_state) {
  $values = array();
  $values[$action . '_change'] = $form_state['values'][$action . '_change'];
  $values[$action . '_method'] = $form_state['values'][$action . '_method'];
  return $values;
}

/**
 * Execute the action.
 */
function uc_product_actions_action_executor($action, $node, $context) {
  $current_value = $node->$action;
  if (!is_null($current_value)) {
    if ($context[$action . '_method'] == 'percentage' && $current_value != 0) {
      $change = $current_value * $context[$action . '_change'] / 100;
      ($current_value > 0) ? $new_value = $current_value + $change : $new_value = $current_value - $change;
    }
    elseif ($context[$action . '_method'] == 'difference') {
      $new_value = $current_value + $context[$action . '_change'];
    }
    elseif ($context[$action . '_method'] == 'absolute') {
      $new_value = $context[$action . '_change'];
    }
  }

  // Make necessary adjustments to value.
  if ($action == 'weight') {
    $new_value = ceil($new_value);
    if ($new_value < 0) $new_value = 0;  // Product weight cannot be negative.
  }
  else {
    $prec = variable_get('uc_currency_prec', 2);
    $new_value = round($new_value, $prec);
  }

  // Save modified product.
  if (isset($new_value)) {
    $node->$action = $new_value;
    node_save($node);
    // Load modified node to check if operation was processed correctly.
    $new_node = node_load($node->nid, NULL, TRUE);
  }
  if (!isset($new_value) || $new_node->$action != $new_value) {
    drupal_set_message(ucfirst($action) . t(' (@new_value): %node may not have updated properly, please check and update manually if needed.', array('%node' => $node->title, '@new_value' => $new_value)), 'warning');
    watchdog('Ubercart product actions', ucfirst($action) . ' (@new_value): %node may not have updated properly, please check and update manually if needed.', array('%node' => $node->title, '@new_value' => $new_value), WATCHDOG_WARNING, l(t('edit'), 'node/' . $node->nid . '/edit'));
  }
}
