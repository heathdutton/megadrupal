<?php

/**
 * @file
 * Multipage jumplist module.
 *
 * This module creates a block with direct links to Fieldgroup's multipage
 * panes.  The list is generated server-side, and the client side handles the
 * mapping between this block and the fieldgroup panes.
 */

/**
 * Implements hook_theme().
 */
function multipage_jumplist_theme($existing, $type, $theme, $path) {
  $items['multipage_jumplist'] = array(
    'variables' => array(
      'jumplist' => array(),
    ),
    'file' => 'multipage_jumplist.theme.inc',
  );
  $items['multipage_jumplist_item'] = array(
    'variables' => array(
      'label' => '',
      'jump_id' => '',
      'counter_type' => 'ul',
      'counter' => 0,
    ),
    'file' => 'multipage_jumplist.theme.inc',
  );
  return $items;
}

/**
 * Implements hook_module_implements_alter().
 *
 * Make sure our hook_field_attach_form() is run after field_group's.
 */
function multipage_jumplist_module_implements_alter(&$implementations, $hook) {
  static $hooks_after = array(
    'field_attach_form' => TRUE,
    'element_info' => TRUE,
  );
  if (!empty($hooks_after[$hook])) {
    $impl = $implementations['multipage_jumplist'];
    unset($implementations['multipage_jumplist']);
    $implementations['multipage_jumplist'] = $impl;
  }
}

/**
 * Implements hook_element_info().
 */
function multipage_jumplist_element_info() {
  $types['multipage_pane'] = array(
    '#pre_render' => array('multipage_jumplist_multipage_pane_pre_render'),
  );
  return $types;
}

/**
 * Adds unique-ish class names to mutipage panes.
 *
 * 'multipage_panel' element pre_render callback.
 */
function multipage_jumplist_multipage_pane_pre_render($element) {
  $element['#attributes']['class'][] = multipage_jumplist_pane_class($element['#group_object']);
  return $element;
}


/**
 * Implements hook_field_attach_form().
 */
function multipage_jumplist_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {
  if (empty($form['#fieldgroups']) or isset($form['#multipage_jumplist_instances'])) {
    return;
  }

  $form['#multipage_jumplist_instances'] = array();
  $groups = $form['#fieldgroups'];
  foreach ($form['#fieldgroups'] as $group_name => $multipage_group) {
    if ($multipage_group->format_type != 'multipage-group') {
      continue;
    }
    $instance = array(
      'entity_type' => $entity_type,
      'bundle' => $form['#bundle'],
      'entity' => $entity,
      'view_mode' => 'form',
      'group_name' => $group_name,
      'groups' => $form['#fieldgroups'],
    );
    $instance['panes'] = array();

    foreach ($multipage_group->children as $page_name) {
      if (empty($groups[$page_name]) or $groups[$page_name]->format_type != 'multipage') {
        continue;
      }
      $instance['panes'][$page_name] = $groups[$page_name];
    }
    $form['#multipage_jumplist_instances'][] = $instance;
  }
  if ($form['#multipage_jumplist_instances']) {
    // Keep multipage jumplist static cache warm independant of how the form is
    // retrieved (build/cache).
    $form['#after_build'][] = 'multipage_jumplist_entity_form_after_build';
  }
}

/**
 * Form API #after_build callback for entity forms.
 */
function multipage_jumplist_entity_form_after_build($element) {
  foreach ($element['#multipage_jumplist_instances'] as $instance) {
    multipage_jumplist_set_multipage_instance($instance);
  }
  return $element;
}

/**
 * Create a hash/key of a field group instance suitable for block deltas.
 *
 * @param array $instance
 *   Multipage field group instance settings.
 *
 * @return string
 *   A 16 character long hash.
 */
function multipage_jumplist_hash($instance) {
  // The drupal block system restricts deltas to 32 characters, so simply
  // joining the selected settings won't suffice. Instead, create a hash of all
  // settings identifying this instance.
  foreach (array('entity_type', 'bundle', 'view_mode', 'group_name') as $key) {
    $id_array[] = $instance[$key];
  }
  return substr(md5(implode(':', $id_array)), 0, 16);
}

/**
 * Implements hook_block_info().
 */
function multipage_jumplist_block_info() {
  $blocks = array();
  $group_info = field_group_info_groups();
  foreach ($group_info as $entity_type => $bundle_info) {
    foreach ($bundle_info as $bundle => $view_mode_info) {
      foreach ($view_mode_info as $view_mode => $groups) {
        foreach ($groups as $group_name => $group) {
          if ($group->format_type != 'multipage-group' or empty($group->format_settings['instance_settings']['multipage_jumplist_block'])) {
            continue;
          }
          $instance = array(
            'entity_type' => $entity_type,
            'bundle' => $bundle,
            'view_mode' => $view_mode,
            'group_name' => $group_name,
          );
          $info = implode(':', $instance);
          $delta = multipage_jumplist_hash($instance);
          $blocks[$delta] = array(
            'info' => t("Multipage jumplist: !instance", array('!instance' => $info)),
          );
        }
      }
    }
  }
  return $blocks;
}

/**
 * Get default or configured settings for a block instance.
 *
 * @param string $delta
 *   Hash key or block delta
 *
 * @return array
 *   Settings for a multipage field group instance jumplist block.
 */
function multipage_jumplist_get_instance_settings($delta) {
  $default = array('title_src' => 'static', 'counter' => 'ul');
  return variable_get('multipage_jumplist__' . $delta, $default);
}

/**
 * Implements hook_block_configure().
 */
function multipage_jumplist_block_configure($delta = '') {
  // This module only provides jumplists for instances of field groups. The
  // settings are equal, so no need to test $delta.
  $settings = multipage_jumplist_get_instance_settings($delta);
  $form['multipage_jumplist'] = array(
    '#type' => 'fieldset',
    '#title' => t('Multipage jumplist settings'),
    '#collapsible' => TRUE,
    '#tree' => TRUE,
  );
  $form['multipage_jumplist']['title_src'] = array(
    '#type' => 'radios',
    '#title' => t("Block title source"),
    '#options' => array(
      'static' => t("Static: !default", array('!default' => '<em>' . t('Jump to page') . '</em>')),
      'bundle' => t("Content type (entity bundle)"),
      'group' => t("Multipage group label"),
    ),
    '#description' => t("What to display as jumplist block title. <em>Static</em> will set a static default title, <em>Content type</em> will set the title based on the current content type or bundle if entity isn't node, <em>Multipage group label</em> will use the label of the multipage group this block belongs to."),
    '#default_value' => $settings['title_src'],
    // This setting is mute if block title is overridden.
    '#states' => array(
      'visible' => array(
        ':input[name="title"]' => array('empty' => TRUE),
      ),
    ),
  );
  $form['multipage_jumplist']['counter'] = array(
    '#type' => 'radios',
    '#title' => t("Page counter"),
    '#options' => array(
      'ul' => t("Unordered list (No counter)"),
      'rendered' => t("Unordered list with page number rendered as part of jumplist items"),
      'ol' => t("Ordered list"),
    ),
    '#description' => t("If and how the page counter should be displayed in the jumplist."),
    '#default_value' => $settings['counter'],
  );
  return $form;
}

/**
 * Implements hook_block_save().
 */
function multipage_jumplist_block_save($delta = '', $edit = array()) {
  variable_set('multipage_jumplist__' . $delta, $edit['multipage_jumplist']);
}

/**
 * Implements hook_block_view().
 */
function multipage_jumplist_block_view($delta = '') {
  $block = array();
  $instances = multipage_jumplist_set_multipage_instance();
  if (!isset($instances[$delta])) {
    return array();
  }
  $instance = $instances[$delta];
  $instance['settings'] = multipage_jumplist_get_instance_settings($delta);
  $jumplist = multipage_jumplist_build_jumplist($instance);
  switch ($instance['settings']['title_src']) {
    case 'bundle':
      $block['subject'] = multipage_jumplist_entity_bundle_label($instance['entity_type'], $instance['bundle']);
      break;

    case 'group':
      // field_group.module translates configuration (not string literals), so
      // we have to follow the same bug pattern.
      $block['subject'] = check_plain(t($instance['groups'][$instance['group_name']]->label));
      break;

    default:
      $block['subject'] = t('Jump to page');
  }
  // Extract some options of field group instance for The Other Side, aka js.
  $extract = array('entity_type', 'bundle', 'view_mode');
  $js_options = array_intersect_key($instance, array_flip($extract));
  $js_options['map'] = $jumplist['map'];
  $block['content'] = array(
    '#theme' => 'multipage_jumplist',
    '#jumplist' => $jumplist,
    '#attached' => array(
      'js' => array(
        drupal_get_path('module', 'multipage_jumplist') . '/multipage_jumplist.js' => array(
          'group' => JS_DEFAULT,
          // Our behavior must come before field_group's.
          'weight' => -1,
        ),
        array(
          'data' => array(
            'multipage_jumplist' => $js_options,
            // This hack is is to lure the execution of some js after
            // field_group.module's processing of group panes in order to set
            // the 'active' class on the right jumplist anchor.
            'field_group' => array('multipagejumplist' => $instance['view_mode']),
          ),
          'type' => 'setting',
        ),
      ),
    ),
  );
  return $block;
}

/**
 * Implements hook_field_group_format_settings().
 */
function multipage_jumplist_field_group_format_settings($group) {
  if ($group->mode != 'form' or $group->format_type != 'multipage-group') {
    return;
  }
  $is = isset($group->format_settings['instance_settings']) ? $group->format_settings['instance_settings'] : array();
  $form['instance_settings']['multipage_jumplist_block'] = array(
    '#type' => 'checkbox',
    '#title' => t('Create a jumplist block of this group'),
    '#description' => t('This creates a block with direct navigation links to pages within group this. Enable it in the !block_admin page.', array('!block_admin' => l(t('block admin'), 'admin/structure/block'))),
    '#default_value' => isset($is['multipage_jumplist_block']) ? $is['multipage_jumplist_block'] : FALSE,
  );
  return $form;
}

/**
 * Static cache of multipage field group instances of current entity form.
 *
 * This connects entities and its context with the block system. The entity api
 * calls and set state for the given context, and our block retrieves it.
 *
 * @param array $instance
 *   Field group multipage instance information. Should contain the following
 *   key/value pairs:
 *   - 'entity_type' => string
 *   - 'bundle' => string
 *   - 'entity' => stdClass
 *   - 'view_mode' => string
 *   - 'group_name' => string
 *   - 'groups' => array. Field group info attached to this combo
 *
 * @return array
 *   All available multipage field group instances keyed by instance hash.
 */
function multipage_jumplist_set_multipage_instance($instance = array()) {
  $cache = &drupal_static(__FUNCTION__, array());
  if (!$instance) {
    return $cache;
  }
  $key = multipage_jumplist_hash($instance);
  $cache[$key] = $instance;
  return $cache;
}

/**
 * Build a list of all multipage groups and their respective pages.
 *
 * @param array $instance
 *   Instance settings for multipage field group as setup in
 *   multipage_jumplist_field_attach_form().
 *
 * @return array
 *   Nested list of multipage groups and their pages suitable for theming.
 */
function multipage_jumplist_build_jumplist($instance) {
  $view_mode = $instance['view_mode'];
  $entity_type = $instance['entity_type'];
  $bundle = $instance['bundle'];
  $group_name = $instance['group_name'];
  $list_type = $instance['settings']['counter'] == 'rendered' ? 'ul' : $instance['settings']['counter'];

  // Find all group pages and sort them in configured order.
  $pages = array();
  $map = array();
  foreach ($instance['panes'] as $page_name => $pane) {
    $jump_id = drupal_html_id('jump_' . $bundle . '_' . $view_mode . '_' . $page_name);
    $map[$jump_id] = multipage_jumplist_pane_class($pane);
    $pages[$page_name] = array(
      // Workaround for field_group.module where configuration is translated.
      'label' => check_plain(t($pane->label)),
      'weight' => $pane->weight,
      'jump_id' => $jump_id,
      'counter_type' => $instance['settings']['counter'],
    );
  }
  if (!$pages) {
    return array();
  }
  uasort($pages, 'drupal_sort_weight');
  return array(
    'label' => $instance['groups'][$group_name]->label,
    'pages' => $pages,
    'list_type' => $list_type,
    'map' => $map,
  );
}

/**
 * Build a suitable class name for multipage pane.
 *
 * @param object $pane
 *   The multipage pane/group object
 *
 * @return string
 *   Wannabe unique class name for given pane.
 */
function multipage_jumplist_pane_class(stdClass $pane) {
  return 'pane-' . strtr($pane->identifier, '|', '-');
}

/**
 * This is a ripoff from apachesolr.index.inc.
 *
 * @see apachesolr.index.inc:entity_bundle_label()
 * @see http://drupal.org/node/969180
 */
function multipage_jumplist_entity_bundle_label($entity_type, $bundle_name) {
  $labels = &drupal_static(__FUNCTION__, array());

  if (empty($labels)) {
    foreach (entity_get_info() as $type => $info) {
      foreach ($info['bundles'] as $bundle => $bundle_info) {
        $labels[$type][$bundle] = !empty($bundle_info['label']) ? $bundle_info['label'] : FALSE;
      }
    }
  }

  return $labels[$entity_type][$bundle_name];
}
