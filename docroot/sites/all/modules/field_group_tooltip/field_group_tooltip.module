<?php

/**
 * @file
 * Make possible to show entity fields as tooltip in field group.
 */

/**
 * Implements hook_field_group_formatter_info().
 */
function field_group_tooltip_field_group_formatter_info() {
  return array(
    'display' => array(
      'tooltip' => array(
        'label' => t('Tooltip'),
        'instance_settings' => array(
          'classes' => '',
          'css_selector' => '',
          'width' => 250,
          'trigger' => 'hover',
        ),
      ),
    ),
  );
}

/**
 * Implements hook_field_group_format_settings().
 */
function field_group_tooltip_field_group_format_settings($group) {
  if ($group->format_type !== 'tooltip') {
    return;
  }
  $form = array(
    'instance_settings' => array(
      '#tree' => TRUE,
      '#weight' => 2,
    ),
  );

  $mode = $group->mode == 'form' ? 'form' : 'display';

  $field_group_types = field_group_formatter_info();
  $formatter = $field_group_types[$mode][$group->format_type];
  $default_settings = $formatter['instance_settings'];
  $settings = $group->format_settings['instance_settings'];

  $form['instance_settings']['css_selector'] = array(
    '#title' => t('CSS selector of tooltip parent'),
    '#type' => 'textfield',
    '#description' => t('Examples: .node, .node-article, .node-teaser, .comment'),
    '#default_value' => isset($settings['css_selector'])
      ? $settings['css_selector'] : $default_settings['css_selector'],
  );

  $form['instance_settings']['width'] = array(
    '#title' => t('Tooltip width'),
    '#type' => 'textfield',
    '#size' => 4,
    '#maxlength' => 4,
    '#field_suffix' => 'px',
    '#default_value' => isset($settings['width'])
      ? $settings['width'] : $default_settings['width'],
  );

  $form['instance_settings']['trigger'] = array(
    '#title' => t('Show tooltip on'),
    '#type' => 'select',
    '#options' => array(
      'hover' => t('Mouse hover'),
      'click' => t('Click'),
    ),
    '#default_value' => isset($settings['trigger'])
      ? $settings['trigger'] : $default_settings['trigger'],
  );

  return $form;
}

/**
 * Implements field_group_pre_render_FORMAT_TYPE() callback for tooltip.
 *
 * We own this format and so can safely implement the callback.
 */
function field_group_pre_render_tooltip(&$element, $group, &$form) {
  if (!module_exists('beautytips')) {
    return FALSE;
  }

  $mode = $group->mode == 'form' ? 'form' : 'display';
  $path = drupal_get_path('module', 'field_group_tooltip');

  $field_group_types = field_group_formatter_info();
  $formatter = $field_group_types[$mode][$group->format_type];
  $default_settings = $formatter['instance_settings'];
  $settings = $group->format_settings['instance_settings'];

  $css_selector = !empty($settings['css_selector'])
    ? $settings['css_selector']
    : '.' . drupal_clean_css_identifier($group->entity_type . '-' . $group->bundle);

  $width = isset($settings['width'])
    ? $settings['width'] : $default_settings['width'];

  $trigger = isset($settings['trigger'])
    ? $settings['trigger'] : $default_settings['trigger'];

  $tooltip = array(
    '#type' => 'markup',
    '#weight' => $group->weight,
    '#prefix' => '<div class="field-group-tooltip ' . $settings['classes'] . '">',
    '#suffix' => '</div>',
    '#attached' => array('css' => array($path . '/css/field_group_tooltip.css')),
  );

  $options['field_group_tooltip'] = array(
    'cssSelect' => $css_selector,
    'contentSelector' => '$(this).find(".field-group-tooltip").html()',
    'trigger' => array(0 => $trigger),
    'width' => $width,
  );
  beautytips_add_beautytips($options);
  $element += $tooltip;
}
