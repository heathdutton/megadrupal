<?php

/**
 * @file
 * 'PayWay 2 SOAR payment system.
 */

/**
 * Constants
 */
define('COMMERCE_PAYWAY2_SOAR_ENV_TEST', 'true');
define('COMMERCE_PAYWAY2_SOAR_ENV_PROD', 'false');
define('COMMERCE_PAYWAY2_SOAR_PREFIX', 'PW2_');
define('COMMERCE_PAYWAY2_SOAR_PAYMENT_URL', 'https://wsso.bccsoar.it:443/vtrans/ezcode.do');
define('COMMERCE_PAYWAY2_SOAR_PAYMENT_IP', '89.119.88.1');
define('COMMERCE_PAYWAY2_SOAR_RELEASE', '1.2');

/**
 * Implements hook_menu().
 */
function commerce_payway2_soar_menu() {
  $items = array();

  $items['checkout/soar/ok'] = array(
    'title' => 'Order Complete',
    'page callback' => 'commerce_payway2_soar_complete_ok',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'commerce_payway2_soar.pages.inc',
  );

  $items['checkout/soar/ko'] = array(
    'page callback' => 'commerce_payway2_soar_complete_ko',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'commerce_payway2_soar.pages.inc',
  );

  $items['checkout/soar/failed/%commerce_order'] = array(
    'title' => 'Order Failed',
    'page callback' => 'commerce_payway2_soar_failed',
    'page arguments' => array(3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'commerce_payway2_soar.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_payway2_soar_commerce_payment_method_info() {
  $payments_methods = array();

  $payment_methods['payway2_soar'] = array(
    'base' => 'commerce_payway2_soar',
    'title' => t('PayWay 2 SOAR gateway'),
    'short_title' => t('PayWay2'),
    'display_title' => '<span>' . t('Credit card') . '</span><img src="/' . drupal_get_path('module', 'commerce_payway2_soar') . '/images/credit_cards.png" width="300" height="50"/>',
    'description' => t('PayWay 2 SOAR gateway, Release @release', array('@release' => COMMERCE_PAYWAY2_SOAR_RELEASE)),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );

  return $payment_methods;
}

/**
 * Payment method callback: settings form.
 */
function commerce_payway2_soar_settings_form($settings = NULL) {

  // Merge default settings into the stored settings array.
  $settings = (array) $settings + array(
    'merchant_id' => '',
    'form_method' => 'POST',
    'transaction_mode' => COMMERCE_PAYWAY2_SOAR_ENV_TEST,
  );

  $form['merchant_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant ID'),
    '#description' => t('Merchant ID'),
    '#default_value' => $settings['merchant_id'],
    '#required' => TRUE,
  );

   $form['order_prefix'] = array(
    '#type' => 'textfield',
    '#title' => t('Order Prefix'),
    '#description' => t('Prefix for order number'),
    '#default_value' => $settings['order_prefix'] ? $settings['order_prefix'] : COMMERCE_PAYWAY2_SOAR_PREFIX,
    '#required' => TRUE,
  );
   
  $form['transaction_mode'] = array(
    '#type' => 'radios',
    '#title' => t('Transaction MODE'),
    '#description' => t('Transaction mode (test or production)'),
    '#options' => array(
      COMMERCE_PAYWAY2_SOAR_ENV_TEST => t('TEST'),
      COMMERCE_PAYWAY2_SOAR_ENV_PROD => t('PRODUCTION'),
    ),
    '#default_value' => $settings['transaction_mode'],
    '#required' => TRUE,
  );

  $form['form_method'] = array(
    '#type' => 'radios',
    '#title' => t('Method for sending parameters'),
    '#description' => t('Method can be POST or GET (POST is reccomended)'),
    '#options' => array(
      'POST' => t('POST'),
      'GET' => t('GET'),
    ),
    '#default_value' => $settings['form_method'],
    '#required' => TRUE,
  );

  return $form;
}

/**
 * Payment method callback: redirect form to SOAR gateway.
 */
function commerce_payway2_soar_redirect_form($form, &$form_state, $order, $payment_method) {
  return commerce_payway2_soar_order_form($form, $form_state, $order, $payment_method['settings']);
}

/**
 * Payment method callback: redirect form.
 */
function commerce_payway2_soar_order_form($form, &$form_state, $order, $settings) {
  global $user;

  $user_language = user_preferred_language($user);
  // Wrapping the order to get additional info.
  $order_w = entity_metadata_wrapper('commerce_order', $order);
    
  $params = array();

  $params['MID'] = $settings['merchant_id'];
  $params['OID'] = $settings['order_prefix'].$order_w->order_id->value();
  $params['IMP'] = $order_w->commerce_order_total->amount->value();
  $params['LAN'] = $user_language->language;
  $params['_EMail'] = $user->mail;
  $params['_Nome'] = $user->name;
  $params['TEST'] = $settings['transaction_mode'];

  // Build form hidden fields.
  foreach ($params as $key => $value) {
    $form[$key] = array('#type' => 'hidden', '#value' => $value);
  }

  $form['#action'] = COMMERCE_PAYWAY2_SOAR_PAYMENT_URL;
  $form['#method'] = $settings['form_method'];

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Redirect to PayWay 2'),
  );

  return $form;
}

/**
 * Generate transaction from PayWay2 response.
 *
 * @param int $order_id
 *   The Drupal commerce order ID
 * @param array $response
 *   The PayWay2 response
 * @param int $status
 *   Status to set in transiction
 */
function commerce_payway2_soar_transaction($order_id, $response, $status) {
  $order = commerce_order_load($order_id);
  $order_w = entity_metadata_wrapper('commerce_order', $order);

  $transaction = commerce_payment_transaction_new('payway2_soar', $order->order_id);
  $transaction->instance_id = $order->order_id;
  $transaction->amount = $order->commerce_order_total[LANGUAGE_NONE][0]['amount'];
  $transaction->currency_code = 'EUR';
  $transaction->remote_id = ($response['STA'] == 'S' ? $response['CODAUTO'] : 0);
  $transaction->status = $status;

  $transaction->message = ($response['STA'] == 'S' ? t('Transaction !status with auth code: !code', array('!status' => $response['STA'], '!code' => $response['CODAUTO'])) : t('Transaction failed with status: !status', array('!status' => $response['STA'])));

  commerce_payment_transaction_save($transaction);
  commerce_order_status_update($order, 'pending');
}

/**
 * Extract settings for PayWay2 payment method.
 *
 * @return array
 *   An array of rules settings
 */
function commerce_payway2_soar_getsettings() {
  $settings = array();
  $rule = rules_config_load('commerce_payment_payway2_soar');

  if ($rule) {
    foreach ($rule as $action) {
      if (!empty($action->settings)) {
        $settings = $action->settings['payment_method']['settings'];
      }
    }
  }
  else {
    drupal_set_message(t('Unable to get payment settings, check PayWay2 Payment Rule'), 'warning');
  }

  return $settings;
}
