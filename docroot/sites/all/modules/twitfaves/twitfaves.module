<?php 

/**
 * Implements hook_block_info().
 */
function twitfaves_block_info() {
  $blocks['twitfaves']['info'] = t('Favorite tweets');
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function twitfaves_block_configure($delta) {
  $form['twitfaves_screen_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Twitter screen name'),
    '#default_value' => variable_get('twitfaves_screen_name', 'drupal'),
  );

  // Create an array of options, but remove zero.
  $options = range(0, 20);
  unset($options[0]);

  $form['twitfaves_count'] = array(
    '#type' => 'select',
    '#title' => t('Number of Tweets'),
    '#default_value' => variable_get('twitfaves_count', 3),
    '#options' => $options,
  );

  $options = range(0, 60);
  unset($options[0]);

  $form['twitfaves_interval'] = array(
    '#type' => 'select',
    '#title' => t('Update Interval'),
    '#default_value' => variable_get('twitfaves_interval', 60),
    '#field_suffix' => t('Minutes'),
    '#options' => $options,
  );

  $form['twitfaves_link_urls'] = array(
    '#type' => 'checkbox',
    '#title' => t('Link URLs'),
    '#default_value' => variable_get('twitfaves_link_urls', TRUE),
  );

  $form['twitfaves_filter'] = array(
    '#type' => 'checkbox',
    '#title' => t('Link hashtags and usernames'),
    '#default_value' => variable_get('twitfaves_filter', TRUE),
  );

  $form['twitfaves_profile_size'] = array(
    '#type' => 'radios',
    '#title' => t('Profile image variant.'),
    '#options' => array(
      'normal' => t('Normal. 48px by 48px.'),
      'bigger' => t('Bigger. 73px by 73px.'),
      'mini' => t('Mini. 24px by 24px.'),
      'original' => t('Original size.'),
    ),
    '#default_value' => variable_get('twitfaves_profile_size', 'normal'),
  );

  return $form;
}

/**
 * Implements hook_block_save().
 */
function twitfaves_block_save($delta, $edit) {
  variable_set('twitfaves_screen_name', $edit['twitfaves_screen_name']);
  variable_set('twitfaves_count', $edit['twitfaves_count']);
  variable_set('twitfaves_interval', $edit['twitfaves_interval']);
  variable_set('twitfaves_link_urls', $edit['twitfaves_link_urls']);
  variable_set('twitfaves_filter', $edit['twitfaves_filter']);
  variable_set('twitfaves_profile_size', $edit['twitfaves_profile_size']);
  cache_clear_all('twitfaves', 'cache');
}

/**
 * Implements hook_block_view().
 */
function twitfaves_block_view($delta) {
  $screen_name = variable_get('twitfaves_screen_name', 'drupal');
  $count = variable_get('twitfaves_count', 3);
  if ($tweets = twitfaves_generate($screen_name, $count)) {
    $block['subject'] = '';
    $block['content'] = theme('twitfaves', array('screen_name' => $screen_name, 'tweets' => $tweets));
    return $block;
  }
}

/**
 * Implements hook_block().
 *
 * Generates a block with the user's favorite tweets.
 */
function twitfaves_block_OLD($op = 'list', $delta = 0, $edit = array()) { }

/**
 * Preprocess Twitfaves.tpl.php
 */
function twitfaves_preprocess_twitfaves(&$vars) {
  $vars['follow_link'] = l(t('Follow Our Tweets'), 'http://twitter.com/' . variable_get('twitfaves_screen_name', 'drupal'));
}

/**
 * Does the heavy lifting, spits out formatted HTML.
 */
function twitfaves_generate($screen_name, $count = 3) {
  $cached = cache_get('twitfaves');
  if (empty($cached->data)) {
    $tweets = array();
    // Connect to Twitter.com and retrieve favorite tweets.
    module_load_include('inc', 'twitter');
    $twitter = twitter_connect();
    if ($twitter) {
      // Network errors can throw a Twitter exception, which we catch silently.
      try {
        $statuses = $twitter->favorites_list($screen_name);
        // Setup dummy filter object.
        $filter = new stdClass();
        $filter->settings = array(
          'filter_url_length' => 256,
        );
        // Limit the amount of tweets to be listed.
        $statuses = array_slice($statuses, 0, $count);
        foreach ($statuses as $tweet) {
          $tweets[] = _twitfaves_extract($tweet, $filter);
        }
        cache_set('twitfaves', $tweets, 'cache', REQUEST_TIME + (variable_get('twitfaves_interval', 60) * 60));
      } catch (Exception $e) {}
    }
  }
  else {
    $tweets = $cached->data;
  }
  return $tweets;
}

/**
 * Linkify tweets
 *
 * @param object $tweet
 *   A TwitterStatus object containing a tweet.
 * @param object $filter
 *   A filter to apply to format the tweet.
 * @return
 *   A stdClass object containing a formated tweet.
 */
function _twitfaves_extract($tweet, $filter) {
  $formattedTweet = new stdClass();
  $formattedTweet->url = 'http://twitter.com/' . $tweet->user->screen_name . '/status/' . $tweet->id;
  $formattedTweet->screen_name = strval($tweet->user->screen_name);
  $formattedTweet->image_url = strval($tweet->user->profile_image_url);
  $formattedTweet->timestamp = strtotime($tweet->created_at);
  $formattedTweet->text = strval($tweet->text);

  if (variable_get('twitfaves_link_urls', TRUE)) {
    $formattedTweet->text = _filter_url($formattedTweet->text, $filter);
  }
  if (variable_get('twitfaves_filter', TRUE)) {
    $formattedTweet->text = _twitter_filter_text($formattedTweet->text, '@', 'http://twitter.com/');
    $formattedTweet->text = _twitter_filter_text($formattedTweet->text, '#', 'http://twitter.com/search/?q=%23');
  }
  $profile_size = variable_get('twitfaves_profile_size', 'normal');
  if ($profile_size != 'normal') {
    // Modify the url to get the appropriate size.
    // @see https://dev.twitter.com/docs/user-profile-images-and-banners
    $info = pathinfo($formattedTweet->image_url);
    $info['filename'] = preg_replace('/_normal$/', '', $info['filename']);
    if ($profile_size != 'original') {
      $info['filename'] .= '_' . $profile_size;
    }
    $formattedTweet->image_url = $info['dirname'] . '/' . $info['filename'] . '.' . $info['extension'];
  }

  // Convert the image to be a protocol-relative URL.
  $formattedTweet->image_url = preg_replace('/^https?:/', '', $formattedTweet->image_url);

  // Make crawlers not to follow links and open then in new windows.
  $formattedTweet->text = _twitter_filter_link($formattedTweet->text, $filter);

  return $formattedTweet;
}

/**
 * Implements hook_theme().
 */
function twitfaves_theme() {
  return array(
    'twitfaves' => array(
      'variables' => array('screen_name' => '', 'tweets' => array()),
      'template' => 'twitfaves',
    ),
  );
}
