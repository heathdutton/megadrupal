<?php

/**
 * @file
 * A mock Blizzard API server for use with tests.
 */

/**
 * Implements hook_menu().
 */
function blizzardapi_test_menu() {
  $items['blizzardapi/wow/auction/data/%'] = array(
    'title' => 'Auction data status',
    'page callback' => 'blizzardapi_test_auction_data_status',
    'page arguments' => array(4),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK
  );
  return $items;
}

/**
 * Menu callback; returns a json encoded object for the API to process.
 *
 * In order to test auction file downloading the URL has also been modified
 * to point to a file created during the test run. It would normally be
 * something like this:
 *   http://us.battle.net/auction-data/ab1239c3bc437d48321a64e6b5e5ab7f/auctions.json
 *
 * @param string $realm
 *   The realm name (the returned data is the same for all realms). The special
 *   values 'forbidden', 'ratelimit', 'notfound', and 'nodata' can also be used
 *   to test their respective API error handlers.
 */
function blizzardapi_test_auction_data_status($realm = '') {
  $timestamp = 1410479203000;  // Thu, 11 Sep 2014 23:46:43 GMT
  drupal_add_http_header('Content-Type', 'application/json;charset=UTF-8');
  
  if ($realm == 'forbidden') {
    drupal_add_http_header('Status', '403 Forbidden');
    $forbidden = new stdClass();
    $forbidden->code = 403;
    $forbidden->type = 'Forbidden';
    $forbidden->detail = 'Account Inactive';
    print(json_encode($forbidden));
    return;
  }
  if ($realm == 'ratelimit') {
    drupal_add_http_header('Status', '403 Forbidden');
    $forbidden = new stdClass();
    $forbidden->code = 403;
    $forbidden->type = 'Forbidden';
    $forbidden->detail = 'Account Over Rate Limit';
    print(json_encode($forbidden));
    return;
  }
  if ($realm == 'notfound') {
    drupal_add_http_header('Status', '404 Not Found');
    $notfound = new stdClass();
    $notfound->status = 'nok';
    $notfound->reason = 'Realm not found.';
    print(json_encode($notfound));
    return;
  }
  
  drupal_add_http_header('Last-Modified', gmdate('D, d M Y H:i:s T', $timestamp / 1000));
  $fileinfo = new stdClass();
  $fileinfo->url = file_create_url(file_default_scheme() . '://auction-data/auctions.json');
  $fileinfo->lastModified = $timestamp;
  $data['files'] = array($fileinfo);
  if ($realm == 'nodata') {
    print(json_encode(new stdClass()));
  }
  else {
    print(json_encode($data, defined('JSON_UNESCAPED_SLASHES') ? JSON_UNESCAPED_SLASHES : 0));  // Since PHP 5.4.0
  }
}
