<?php

/**
 * @file
 * Tests for the Blizzard API Login module.
 */

//abstract class BlizzardApiLoginTestCase extends DrupalWebTestCase {
//  protected $profile = 'minimal';
//  
//  protected function httpsUrl($url) {
//    global $base_url;
//    return $base_url . '/modules/simpletest/tests/https.php?q=' . $url;
//  }
//}

/**
 * Tests the Battle.net login block.
 */
class BlizzardApiLoginBlockTestCase extends DrupalWebTestCase {
  protected $admin;
  
  public static function getInfo() {
    return array(
      'name' => 'Battle.net login block',
      'description' => 'Tests the login block.',
      'group' => 'Blizzard API Login'
    );
  }
  
  protected function setUp() {
    parent::setUp('blizzardapi_login', 'blizzardapi_login_test');
    $this->admin = $this->drupalCreateUser(array('administer blocks', 'access administration pages'));
    variable_set('blizzardapi_login_client', 'BlizzardApiLoginTestClient');
    variable_set('blizzardapi_public_key', 'public');
    variable_set('blizzardapi_private_key', 'private');
  }
  
  /**
   * Test block configuration.
   */
  public function testBlock() {
    $block = array(
      'module' => 'blizzardapi_login',
      'delta' => 'login',
      'title' => 'Battle.net login'
    );
    
    $this->drupalLogin($this->admin);
    $this->moveBlockToRegion($block, 'sidebar_first');
    
    $this->drupalGet('node');
    $this->assertNoText(t($block['title']), 'Block is not displayed for logged in users.');
    $this->drupalLogout();
    
    $this->drupalGet('user/register');
    $this->assertNoText(t($block['title']), 'Block is not displayed on login, registration, and/or reset password pages.');
    
    $this->drupalGet('node');
    $this->assertText(t($block['title']), 'Block successfully being displayed on the page.');
    $this->assertBlockInRegion($block, 'sidebar_first');
    
    $edit = array('battlenet_region' => BlizzardApiLoginClient::REGION_EU);
    $this->drupalPost(NULL, $edit, t('Log in with Battle.net'));
    // New users should be redirected to the registration page.
    $this->assertText(t('Create new account'), 'Successfully initiate a login attempt.');
  }
  
  /**
   * Check if a block is in the specified region.
   */
  protected function assertBlockInRegion($block, $region) {
    $xpath = $this->buildXPathQuery('//div[@class=:region-class]//div[@id=:block-id]/*', array(
      ':region-class' => 'region region-' . str_replace('_', '-', $region),
      ':block-id' => 'block-' . str_replace('_', '-', $block['module']) . '-' . $block['delta'],
    ));
    $this->assertFieldByXPath($xpath, NULL, format_string('Custom block found in %region_name region.', array('%region_name' => $region)));
  }
  
  /**
   * Move a block to the specified region.
   */
  protected function moveBlockToRegion($block, $region) {
    // Set the created block to a specific region.
    $edit = array();
    $edit['blocks[' . $block['module'] . '_' . $block['delta'] . '][region]'] = $region;
    $this->drupalPost('admin/structure/block', $edit, t('Save blocks'));
    
    // Confirm that the block was moved to the proper region.
    $this->assertText(t('The block settings have been updated.'), format_string('Block successfully moved to %region_name region.', array( '%region_name' => $region)));
  }
}

/**
 * Tests the login callback page.
 */
class BlizzardApiLoginCallbackTestCase extends DrupalWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'OAuth 2.0 callback',
      'description' => 'Tests the login page used during the OAuth 2.0 callback.',
      'group' => 'Blizzard API Login'
    );
  }
  
  protected function setUp() {
    parent::setUp('blizzardapi_login', 'blizzardapi_login_test');
    variable_set('blizzardapi_login_client', 'BlizzardApiLoginTestClient');
    variable_set('blizzardapi_public_key', 'public');
    variable_set('blizzardapi_private_key', 'private');
  }
  
  /**
   * Test the OAuth 2.0 redirect handler.
   */
  public function testLoginRedirect() {
    // Require a state parameter.
    $this->drupalGet(BLIZZARDAPI_LOGIN_PATH, array('query' => array('code' => 1234567890)));
    $this->assertText(t('Invalid authentication request.'), 'Require a CSRF token.');
    $this->assertEqual(db_query('SELECT COUNT(*) FROM {sessions}')->fetchField(), 0, 'Invalid request resulted in failed login attempt.');
    // Require an authorization code or an error message.
    $this->drupalGet(BLIZZARDAPI_LOGIN_PATH, array('query' => array('state' => 'invalid_response')));
    $this->assertText(t('Invalid authentication request.'), 'Require a code or error parameter.');
  }
}

/**
 * Tests the use of third-party OAuth 2.0 clients.
 */
class BlizzardApiLoginClientTestCase extends DrupalWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Login client framework',
      'description' => 'Tests functions used to create OAuth 2.0 clients.',
      'group' => 'Blizzard API Login'
    );
  }

  protected function setUp() {
    parent::setUp('blizzardapi_login', 'blizzardapi_login_test');
    variable_set('blizzardapi_public_key', 'public');
    variable_set('blizzardapi_private_key', 'private');
  }

  /**
   * Test that third-parties can override our OAuth 2.0 client.
   */
  public function testClients() {
    variable_set('blizzardapi_login_client', 'BlizzardApiLoginTestClient');
    $client = blizzardapi_login_client(BlizzardApiLoginClient::REGION_US);
    $this->assertTrue($client instanceof BlizzardApiLoginTestClient, 'Created custom OAuth 2.0 client.');

    variable_set('blizzardapi_login_client', 'BlizzardApiLoginInvalidClient');
    $client = blizzardapi_login_client(BlizzardApiLoginClient::REGION_US);
    $this->assertTrue($client == NULL, 'Invalid client object returns NULL.');
  }

  /**
   * Test handling of hook_blizzardapi_login_scopes() implementations.
   */
  public function testScopes() {
    $scopes = blizzardapi_login_scopes();
    $this->assertTrue(in_array('wow.profile', $scopes), 'Found scope #1.');
    $this->assertTrue(in_array('sc2.profile', $scopes), 'Found scope #2.');
    $this->assertEqual(count($scopes), 2, 'Remove duplicate scopes.');
  }
}

/**
 * Tests the default OAuth 2.0 client.
 */
class BlizzardApiLoginDefaultClientTestCase extends DrupalWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'OAuth 2.0 default client',
      'description' => 'Tests the OAuth 2.0 client included with this module.',
      'group' => 'Blizzard API Login'
    );
  }

  protected function setUp() {
    parent::setUp('blizzardapi_login', 'blizzardapi_login_test');
    variable_set('blizzardapi_login_client', 'BlizzardApiLoginDefaultClientTest');
    variable_set('blizzardapi_public_key', 'public');
    variable_set('blizzardapi_private_key', 'private');
  }

  /**
   * Test handling of requests for a token after getting an authentication code.
   */
  public function testAuthenticate() {
    $client = blizzardapi_login_client(BlizzardApiLoginDefaultClient::REGION_US);
    try {
      $client->authenticate(200);
      $token = $client->getAccessToken();
      $this->assertEqual($token['access_token'], 'ok', 'Sent authentication code as POST parameter.');
    }
    catch (Exception $e) {
      $this->fail('Unexpected exception while authenticating.');
    }
    try {
      $client->authenticate(403);
      $this->fail('Throw exception when server fails to respond with a token.');
    }
    catch (Exception $e) {
      $this->pass('Throw exception when server fails to respond with a token.');
    }
  }

  /**
   * Test generation of authorization URLs.
   */
  public function testAuthorizeUrl() {
    $callback_url = url(BLIZZARDAPI_LOGIN_PATH, array('absolute' => TRUE));
    $callback_url = str_replace('http://', 'https://', $callback_url);
    $query = array(
      'client_id' => 'public',
      'redirect_uri' => $callback_url,
      'response_type' => 'code'
    );
    // An absolute base URL is needed in order to make url() treat them as
    // external and not use 'q=' syntax when clean URLs are disabled.
    $base_url = rtrim(url('', array('absolute' => TRUE)), '/');
    $auth_url = url($base_url . '/oauth/authorize', array('query' => $query));
    $client = blizzardapi_login_client(BlizzardApiLoginDefaultClient::REGION_US);
    $this->assertEqual($client->getAuthorizeUrl(), $auth_url, 'Created correct authorize url.');

    // Test that the state parameter is passed through.
    $query['state'] = 'qwerty';
    $auth_url = url($base_url . '/oauth/authorize', array('query' => $query));
    $this->assertEqual($client->getAuthorizeUrl('qwerty'), $auth_url, 'State parameter found in url.');
    unset($query['state']);

    // Test that the scopes are included.
    $scopes = array('pet.dog', 'pet.cat');
    $client = blizzardapi_login_client(BlizzardApiLoginDefaultClient::REGION_US, $scopes);
    $query['scope'] = implode(' ', $scopes);
    $auth_url = url($base_url . '/oauth/authorize', array('query' => $query));
    $this->assertEqual($client->getAuthorizeUrl(), $auth_url, 'Scopes found in url.');
  }

  /**
   * Test handling of authenticated requests.
   */
  public function testSendRequest() {
    $client = blizzardapi_login_client(BlizzardApiLoginDefaultClient::REGION_US);
    $token = array('created' => time(), 'expires_in' => 86400, 'access_token' => 'token');
    $client->setAccessToken($token);
    try {
      $profile = $client->sendRequest(new BlizzardApiTestRequest('/account/user'));
      $this->assertEqual($profile['id'], 12345, 'Successfully got account profile.');
    }
    catch (Exception $e) {
      $this->fail('Request for account profile failed.');
    }
    // Send a request that gets an error response.
    try {
      $profile = $client->sendRequest(new BlizzardApiTestRequest('/account/user/403'));
      $this->fail('Throw exception after getting a bad response.');
    }
    catch (Exception $e) {
      $this->pass('Throw exception after getting a bad response.');
    }
    // Test that the request was sent with a proper authorization header.
    try {
      $profile = $client->sendRequest(new BlizzardApiTestRequest('/account/user/bearer'));
      $this->assertEqual($profile['id'], 67890, 'Request was sent with correct authorization header.');
    }
    catch (Exception $e) {
      $this->fail('Unexpected exception while sending request.');
    }
  }

  /**
   * Test for token expiration.
   */
  public function testTokenExpiration() {
    $client = blizzardapi_login_client(BlizzardApiLoginDefaultClient::REGION_US);
    $token = array('created' => time(), 'expires_in' => 86400);
    $client->setAccessToken($token);
    $this->assertFalse($client->isAccessTokenExpired(), 'Returned expected result for token that was not expired.');
    // Create a token that has already expired.
    $token = array('created' => time() - 30, 'expires_in' => 0);
    $client->setAccessToken($token);
    $this->assertTrue($client->isAccessTokenExpired(), 'Returned expected result for token that was expired.');
    // Create a token with a missing expiration time.
    $token = array('created' => time() - 30);
    $client->setAccessToken($token);
    $this->assertTrue($client->isAccessTokenExpired(), 'Returned expected result for token with missing expiration time.');
    // Create a token with a malformed expiration time.
    $token = array('created' => time() - 30, 'expires_in' => 'not-an-int');
    $client->setAccessToken($token);
    $this->assertTrue($client->isAccessTokenExpired(), 'Returned expected result for token with non-integer expiration time.');
  }
}

/**
 * Tests registration of Battle.net users.
 */
class BlizzardApiLoginRegistrationTestCase extends DrupalWebTestCase {
  protected $admin;
  
  public static function getInfo() {
    return array(
      'name' => 'User registration',
      'description' => 'Tests user registration under different settings.',
      'group' => 'Blizzard API Login'
    );
  }
  
  protected function setUp() {
    parent::setUp('blizzardapi_login', 'blizzardapi_login_test');
    $this->admin = $this->drupalCreateUser(array('administer users'));
    variable_set('blizzardapi_login_client', 'BlizzardApiLoginTestClient');
    variable_set('blizzardapi_public_key', 'public');
    variable_set('blizzardapi_private_key', 'private');
  }
  
  /**
   * Test that new users must register using a Battle.net account.
   */
  public function testBattleNetOnly() {
    variable_set('blizzardapi_login_register', BLIZZARDAPI_LOGIN_REGISTER_BNET_ONLY);
    // Block normal registration attempts.
    $this->drupalGet('user/register');
    $this->assertText(t('Only Battle.net accounts may be created on this site.'));
    // Allow registration through a Battle.net login.
    $this->drupalPost('user', array(), t('Log in with Battle.net'));
    $this->assertText(t('Finish creating your account by filling out the form below.'));
  }
  
  /**
   * Test registration with e-mail verification on.
   */
  public function testEmailVerification() {
    // Require e-mail verification.
    variable_set('user_email_verification', TRUE);
    
    // Set registration to administrator only.
    variable_set('user_register', USER_REGISTER_ADMINISTRATORS_ONLY);
    $edit = array('battlenet_region' => BlizzardApiLoginClient::REGION_KR);
    $this->drupalPost('user', $edit, t('Log in with Battle.net'));
    $this->assertText(t('Only site administrators can create new user accounts.'), 'Block registration when set to administrators only.');
    
    // Allow registration by site visitors without administrator approval.
    variable_set('user_register', USER_REGISTER_VISITORS);
    $edit = array('battlenet_region' => BlizzardApiLoginClient::REGION_EU);
    $this->drupalPost('user', $edit, t('Log in with Battle.net'));
    $name = $this->randomName();
    $mail = $name . '@example.com';
    $edit = array('name' => $name, 'mail' => $mail);
    $this->drupalPost('user/register', $edit, t('Create new account'));
    $this->assertText(t('A welcome message with further instructions has been sent to your e-mail address.'), 'User registered successfully.');
    // Account must also be active.
    $account = user_load_multiple(array(), $edit);
    $user = reset($account);
    $this->assertTrue($user->status, 'Account active after registration.');
    
    // Allow registration by site visitors, but require administrator approval.
    variable_set('user_register', USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL);
    $edit = array('battlenet_region' => BlizzardApiLoginClient::REGION_US);
    $this->drupalPost('user', $edit, t('Log in with Battle.net'));
    $name = $this->randomName();
    $mail = $name . '@example.com';
    $edit = array('name' => $name, 'mail' => $mail);
    $this->drupalPost('user/register', $edit, t('Create new account'));
    $this->assertText(t('Your account is currently pending approval by the site administrator.'), 'User registered successfully.');
    // Account must also be blocked.
    $account = user_load_multiple(array(), $edit);
    $user = reset($account);
    $this->assertFalse($user->status, 'Account is blocked until approved by an administrator.');
    
    // Approve the account.
    $this->drupalLogin($this->admin);
    $this->drupalPost('user/' . $user->uid . '/edit', array('status' => 1), t('Save'));
    $this->drupalLogout();
    
    // Try to login after approval.
    $edit = array('battlenet_region' => BlizzardApiLoginClient::REGION_US);
    $this->drupalPost('user', $edit, t('Log in with Battle.net'));
    $this->assertText(t('You must validate your e-mail address for this account before logging in.'), 'User cannot login after approval until email is validated.');
  }
  
  /**
   * Test registration with e-mail verification off.
   */
  public function testNoEmailVerification() {
    // Don't require e-mail verification.
    variable_set('user_email_verification', FALSE);
    
    // Set registration to administrator only.
    variable_set('user_register', USER_REGISTER_ADMINISTRATORS_ONLY);
    $edit = array('battlenet_region' => BlizzardApiLoginClient::REGION_KR);
    $this->drupalPost('user', $edit, t('Log in with Battle.net'));
    $this->assertText(t('Only site administrators can create new user accounts.'), 'Block registration when set to administrators only.');
    
    // Allow registration by site visitors without administrator approval.
    variable_set('user_register', USER_REGISTER_VISITORS);
    $edit = array('battlenet_region' => BlizzardApiLoginClient::REGION_EU);
    $this->drupalPost('user', $edit, t('Log in with Battle.net'));
    $name = $this->randomName();
    $mail = $name . '@example.com';
    $edit = array('name' => $name, 'mail' => $mail);
    $this->drupalPost('user/register', $edit, t('Create new account'));
    $this->assertText(t('Registration successful. You are now logged in.'), 'User registered and logged in successfully.');
    $this->drupalLogout();
    
    // Allow registration by site visitors, but require administrator approval.
    variable_set('user_register', USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL);
    $edit = array('battlenet_region' => BlizzardApiLoginClient::REGION_US);
    $this->drupalPost('user', $edit, t('Log in with Battle.net'));
    $name = $this->randomName();
    $mail = $name . '@example.com';
    $edit = array('name' => $name, 'mail' => $mail);
    $this->drupalPost('user/register', $edit, t('Create new account'));
    // Account must also be blocked.
    $account = user_load_multiple(array(), $edit);
    $user = reset($account);
    $this->assertFalse($user->status, 'Account is blocked until approved by an administrator.');
    
    // Try to login before approval.
    $edit = array('battlenet_region' => BlizzardApiLoginClient::REGION_US);
    $this->drupalPost('user', $edit, t('Log in with Battle.net'));
    $this->assertText(t('The username @name has not been activated or is blocked.', array('@name' => $name)), 'User cannot login until approved by an administrator.');
    
    // Approve the account.
    $this->drupalLogin($this->admin);
    $this->drupalPost('user/' . $user->uid . '/edit', array('status' => 1), t('Save'));
    $this->drupalLogout();
    
    // Try to login after approval.
    $edit = array('battlenet_region' => BlizzardApiLoginClient::REGION_US);
    $this->drupalPost('user', $edit, t('Log in with Battle.net'));
    $this->assertText(t('My account'), 'User can log in after administrator approval.');
  }
}

/**
 * Tests OAuth 2.0 requests.
 */
class BlizzardApiLoginRequestTestCase extends DrupalUnitTestCase {
  public static function getInfo() {
    return array(
      'name' => 'OAuth 2.0 requests',
      'description' => 'Tests that authenticated requests are generated properly.',
      'group' => 'Blizzard API Login'
    );
  }

  protected function setUp() {
    parent::setUp();
    include_once(drupal_get_path('module', 'blizzardapi_login') . '/includes/blizzardapi_login.request.inc');
  }

  /**
   * Tests parameter validation and expected return values.
   */
  public function testRequest() {
    // Create a new request using correct parameters.
    try {
      $request = new BlizzardApiRequest('/test', BlizzardApiRequest::REGION_US);
      $this->pass('Successfully created request.');
    }
    catch (InvalidArgumentException $e) {
      $this->fail('Failed to create request using correct parameters.');
    }
    if ($request) {
      // Make sure we get the expected results.
      $this->assertEqual($request->getPeerName(), 'api.battle.net', 'Returned expected peer name.');
      $this->assertEqual($request->getUrl(), 'https://us.api.battle.net/test', 'Returned expected url.');
      $request->setRegion(BlizzardApiRequest::REGION_CN);
      $this->assertEqual($request->getPeerName(), 'api.battlenet.com.cn', 'Returned expected peer name for "cn" region.');
      $this->assertEqual($request->getUrl(), 'https://api.battlenet.com.cn/test', 'Returned expected url for "cn" region.');
    }
    // Try passing an unsupported region.
    try {
      $request = new BlizzardApiRequest('/test', 'xyz');
      $this->fail('Do not create a request with an unsupported region');
    }
    catch (InvalidArgumentException $e) {
      $this->pass('Do not create a request with an unsupported region');
    }
    // Try passing an empty path.
    try {
      $request = new BlizzardApiRequest('', BlizzardApiRequest::REGION_US);
      $this->fail('Do not create a request with an empty path.');
    }
    catch (InvalidArgumentException $e) {
      $this->pass('Do not create a request with an empty path.');
    }
  }
}

/**
 * Tests user authmaps.
 */
class BlizzardApiLoginUserTestCase extends DrupalWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'User authentication',
      'description' => 'Tests using an external authentication source to login.',
      'group' => 'Blizzard API Login'
    );
  }
  
  protected function setUp() {
    parent::setUp('blizzardapi_login', 'blizzardapi_login_test');
    variable_set('blizzardapi_login_client', 'BlizzardApiLoginTestClient');
    variable_set('blizzardapi_public_key', 'public');
    variable_set('blizzardapi_private_key', 'private');
  }
  
  /**
   * Test that a blocked user cannot login.
   */
  public function testBlockedUserLogin() {
    $admin = $this->drupalCreateUser(array('administer users'));
    
    // Create a new Battle.net user.
    $user = $this->drupalCreateUser();
    $this->drupalLogin($user);
    $this->drupalPost('user/' . $user->uid . '/edit', array('battlenet_region' => BlizzardApiLoginClient::REGION_US), t('Add a Battle.net account'));
    $this->drupalLogout();
    
    // Block the user.
    $this->drupalLogin($admin);
    $edit = array('operation' => 'block', 'accounts[' . $user->uid . ']' => TRUE);
    $this->drupalPost('admin/people', $edit, t('Update'));
    $this->assertText(t('The update has been performed.'), 'Account was blocked.');
    $this->drupalLogout();
    
    // Attempt to login as the blocked user.
    $this->drupalPost('user', array('battlenet_region' => BlizzardApiLoginClient::REGION_US), t('Log in with Battle.net'));
    $this->assertRaw(t('The username %name has not been activated or is blocked.', array('%name' => $user->name)), 'User login was blocked.');
  }
  
  /**
   * Test that authmaps can be added and removed from existing users.
   */
  public function testExistingUserAuthmap() {
    $user = $this->drupalCreateUser();
    $this->drupalLogin($user);
    
    // Add a Battle.net account.
    $this->drupalPost('user/' . $user->uid . '/edit', array('battlenet_region' => BlizzardApiLoginClient::REGION_US), t('Add a Battle.net account'));
    $this->assertText(t('You may now login using your Battle.net account.'), 'Successfully attached a Battle.net account');
    $this->assertEqual(db_query('SELECT COUNT(*) FROM {authmap}')->fetchField(), 1, 'Added external authmap entry.');
    
    // Remove a Battle.net account.
    $this->drupalPost(NULL, array(), t('Remove Battle.net account'));
    $this->assertText(t('Battle.net account disconnected.'), 'Successfully removed a Battle.net account');
    $this->assertEqual(db_query('SELECT COUNT(*) FROM {authmap}')->fetchField(), 0, 'Removed external authmap entry.');
  }
}

/**
 * Tests the one-time login callback page.
 */
class BlizzardApiLoginValidationTestCase extends DrupalWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'E-mail validation',
      'description' => 'Tests one-time logins for e-mail validation.',
      'group' => 'Blizzard API Login'
    );
  }
  
  protected function setUp() {
    parent::setUp('blizzardapi_login');
  }
  
  /**
   * Test using an expired link.
   *
   * NOTE: These links should only be used during registration, so this
   * scenario should technically never occur.
   */
  public function testExpiredLink() {
    variable_set('user_password_reset_timeout', 43200);
    
    $user = $this->drupalCreateUser();
    $this->drupalLogin($user);
    $this->drupalLogout();
    
    $account = user_load($user->uid, TRUE);
    $timestamp = REQUEST_TIME - variable_get('user_password_reset_timeout', 86400) - 60;
    $this->drupalGet("blizzardapi/verify/$account->uid/$timestamp/" . blizzardapi_login_rehash($account->pass, $timestamp, $account->login, $account->uid));
    $this->assertText(t('You have tried to use an e-mail validation link that has expired.'), 'Reject expired e-mail validation link.');
  }
}
