<?php

/**
 * @file
 * Install, update and uninstall functions for the Blizzard API Login module.
 */

/**
 * Implements hook_requirements().
 */
function blizzardapi_login_requirements($phase) {
  global $is_https;
  
  $t = get_t();
  $requirements = array();
  
  if (!$is_https) {
    $requirements['blizzardapi_login_https'] = array(
      'title' => $t('Web server (HTTPS)'),
      'description' => $t('A secure connection to this server is required for Battle.net authentication.'),
      'severity' => REQUIREMENT_ERROR
    );
    if ($phase == 'runtime') {
      $requirements['blizzardapi_login_https']['value'] = $t('Not secure');
    }
  }
  
  // @todo For the time being, mixed-mode sessions are not supported.
  //   This is NOT compatible with the Secure Pages or 443 Session modules.
  if (variable_get('https', FALSE) != FALSE) {
    $requirements['blizzardapi_login_mixedmode'] = array(
      'title' => $t('Mixed-mode sessions'),
      'description' => $t('Battle.net authentication does not support mixed-mode sessions.'),
      'severity' => REQUIREMENT_ERROR
    );
    if ($phase == 'runtime') {
      $requirements['blizzardapi_login_mixedmode']['value'] = $t('Not supported');
    }
  }
  
  if ($phase == 'runtime') {
    $status = _blizzardapi_login_client_requirement();
    if (!empty($status)) {
      $requirements['blizzardapi_login_client'] = $status;
    }
  }
  
  return $requirements;
}

/**
 * Checks for missing OAuth 2.0 client requirements.
 *
 * This function will attempt to load the currently selected client and should
 * therefore only be used *after* installation.
 */
function _blizzardapi_login_client_requirement() {
  $t = get_t();
  $status = array(
    'title' => $t('Battle.net logins'),
    'severity' => REQUIREMENT_ERROR
  );
  // Check authentication keys.
  $public_key = variable_get('blizzardapi_public_key', '');
  $secret_key = variable_get('blizzardapi_private_key', '');
  if (empty($public_key) || empty($secret_key)) {
    $status += array(
      'value' =>  $t('Missing authentication keys'),
      'description' => $t('API authentication keys are required to use OAuth 2.0 logins. ' .
        'Enter your public and private keys on the <a href="!settings-url">Blizzard API settings</a> page.',
        array('!settings-url' => url('admin/config/services/blizzardapi')))
    );
    return $status;
  }
  // Check for library errors.
  $client = blizzardapi_login_client(BlizzardApiLoginClient::REGION_US);
  if (!isset($client)) {
    $status += array(
      'value' => $t('Unable to create client'),
      'description' => $t('There is a problem with the currently selected OAuth 2.0 client. ' .
        'If the client is being provided by a library, it may not be installed correctly.')
    );
    return $status;
  }
  // Check the default client configuration.
  $client = variable_get('blizzardapi_login_client', 'BlizzardApiLoginDefaultClient');
  if ($client == 'BlizzardApiLoginDefaultClient') {
    $cafile = variable_get('blizzardapi_login_cafile', '');
    if (version_compare(phpversion(), '5.6.0', '<') && empty($cafile)) {
      $status += array(
        'value' => $t('CA bundle is required'),
        'description' => $t('There is a problem with the currently selected OAuth 2.0 client. ' .
          'Visit the <a href="!oauth-url">client settings</a> page to check for configuration errors.',
          array('!oauth-url' => url('admin/config/services/blizzardapi/oauth')))
      );
      return $status;
    }
  }
  return array();
}

/**
 * Implements hook_schema().
 *
 * Schema API: https://www.drupal.org/node/146843
 */
function blizzardapi_login_schema() {
  $schema['cache_blizzardapi_login'] = drupal_get_schema_unprocessed('system', 'cache');
  $schema['cache_blizzardapi_login']['description'] = 'Cache table for Battle.net access tokens.';
  return $schema;
}

/**
 * Implements hook_uninstall().
 */
function blizzardapi_login_uninstall() {
  variable_del('blizzardapi_login_client');
  variable_del('blizzardapi_login_register');
  
  // Mail text overrides.
  variable_del('blizzardapi_login_password_reset_subject');
  variable_del('blizzardapi_login_password_reset_body');
  variable_del('blizzardapi_login_register_no_approval_required_subject');
  variable_del('blizzardapi_login_register_no_approval_required_body');
  variable_del('blizzardapi_login_register_pending_approval_subject');
  variable_del('blizzardapi_login_register_pending_approval_body');
  variable_del('blizzardapi_login_status_activated_subject');
  variable_del('blizzardapi_login_status_activated_body');
  
  // Default client settings.
  variable_del('blizzardapi_login_cafile');
  variable_del('blizzardapi_login_ciphers');
  
  db_delete('authmap')->condition('module', 'blizzardapi_login')->execute();
}
