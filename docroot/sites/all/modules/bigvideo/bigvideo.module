<?php
/**
 * @file
 * Main module file.
 */

define('BIGVIDEO_PAGE_ENABLE', 1);
define('BIGVIDEO_PAGE_DISABLE', 0);

define('BIGVIDEO_SOURCE_TYPE_FILE', 0);
define('BIGVIDEO_SOURCE_TYPE_LINK', 1);

require_once 'includes/bigvideo.api.inc';

/**
 * Implements hook_menu().
 */
function bigvideo_menu() {
  $items = array();
  // Pages settings.
  $items['admin/config/user-interface/bigvideo'] = array(
    'title' => 'BigVideo Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bigvideo_pages_settings_form'),
    'access arguments' => array('administer bigvideo'),
    'file' => 'includes/bigvideo.admin.inc',
  );
  $items['admin/config/user-interface/bigvideo/pages'] = array(
    'title' => 'BigVideo Pages',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/config/user-interface/bigvideo/pages/add'] = array(
    'title' => 'Add Bigvideo page',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bigvideo_pages_add_settings_form'),
    'access arguments' => array('administer bigvideo'),
    'file' => 'includes/bigvideo.admin.inc',
  );
  $items['admin/config/user-interface/bigvideo/pages/%bigvideo_page/edit'] = array(
    'title' => 'Edit Bigvideo page',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bigvideo_pages_edit_settings_form', 5),
    'access arguments' => array('administer bigvideo'),
    'file' => 'includes/bigvideo.admin.inc',
  );
  $items['admin/config/user-interface/bigvideo/pages/%bigvideo_page/delete'] = array(
    'title' => 'Delete Bigvideo page',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bigvideo_pages_delete_settings_form', 5),
    'access arguments' => array('administer bigvideo'),
    'file' => 'includes/bigvideo.admin.inc',
  );

  // Source settings.
  $items['admin/config/user-interface/bigvideo/sources'] = array(
    'title' => 'BigVideo Sources',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bigvideo_sources_settings_form'),
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer bigvideo'),
    'file' => 'includes/bigvideo.admin.inc',
  );
  $items['admin/config/user-interface/bigvideo/sources/add'] = array(
    'title' => 'Add Bigvideo source',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bigvideo_sources_add_settings_form'),
    'access arguments' => array('administer bigvideo'),
    'file' => 'includes/bigvideo.admin.inc',
  );
  $items['admin/config/user-interface/bigvideo/sources/%bigvideo_source/edit'] = array(
    'title' => 'Edit Bigvideo source',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bigvideo_sources_edit_settings_form', 5),
    'access arguments' => array('administer bigvideo'),
    'file' => 'includes/bigvideo.admin.inc',
  );
  $items['admin/config/user-interface/bigvideo/sources/%bigvideo_source/delete'] = array(
    'title' => 'Delete Bigvideo source',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bigvideo_sources_delete_settings_form', 5),
    'access arguments' => array('administer bigvideo'),
    'file' => 'includes/bigvideo.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function bigvideo_permission() {
  $permission = array(
    'administer bigvideo' => array(
      'title' => t('Administer BigVideo module'),
    ),
  );
  return $permission;
}

/**
 * Implements hook_libraries_info().
 */
function bigvideo_libraries_info() {
  $items['bigvideojs'] = array(
    'name' => 'BigVideo.js',
    'vendor url' => 'http://dfcb.github.io/BigVideo.js/',
    'download url' => 'https://github.com/dfcb/BigVideo.js',
    'version callback' => 'bigvideo_get_version',
    'files' => array(
      'js' => array('lib/bigvideo.js'),
      'css' => array('css/bigvideo.css'),
    ),
  );
  $items['imagesloaded'] = array(
    'name' => 'jQuery Images Loaded',
    'vendor url' => 'http://imagesloaded.desandro.com/',
    'download url' => 'http://imagesloaded.desandro.com/',
    'version arguments' => array(
      'file' => 'imagesloaded.pkgd.min.js',
      'pattern' => '#(\d+\.\d+(\.\d+)*)#',
      'lines' => 5,
      'cols' => 35,
    ),
    'files' => array(
      'js' => array('imagesloaded.pkgd.min.js'),
    ),
  );
  return $items;
}

/**
 * Attempt to detect version of BigVideo library.
 *
 * Base library file does not contain any version string.
 */
function bigvideo_get_version($library) {
  $version = 'no_version';
  $json_files = array('bower.json', 'BigVideo.jquery.json');
  foreach ($json_files as $filename) {
    $filename = $library['library path'] . '/' . $filename;
    if (file_exists($filename)) {
      $json = file_get_contents($filename);
      $json = json_decode($json);
      if (isset($json->version)) {
        $version = $json->version;
        break;
      }
    }
  }
  return $version;
}

/**
 * Implements hook_page_alter().
 */
function bigvideo_page_alter(&$page) {
  // Apply Context if module is enabled.
  if (module_exists('context')) {
    if ($plugin = context_get_plugin('reaction', 'bigvideo')) {
      $plugin->execute($page['page_bottom']);
    }
  }

  // Check pages for bigvideo.
  if (empty($page['page_bottom']['bigvideo'])) {
    $bv_pages = bigvideo_page_load_all(BIGVIDEO_PAGE_ENABLE);
    $current_path = current_path();
    $path_alias = drupal_get_path_alias($current_path);
    $path = drupal_strtolower($path_alias);
    foreach ($bv_pages as $bv_page) {
      if (drupal_match_path($path, $bv_page->path)) {
        if ($source = bigvideo_source_load($bv_page->source)) {
          $links = bigvideo_create_links($source);
          bigvideo_attach_scripts($page['page_bottom'], $links);
        }
        else {
          watchdog('BigVideo', 'Attempting to use a non-existent source.', array(), WATCHDOG_ERROR);
        }
        break;
      }
    }
  }
}

/**
 * Implements hook_context_plugins().
 */
function bigvideo_context_plugins() {
  return array(
    'bigvideo_context_reaction_background' => array(
      'handler' => array(
        'path' => drupal_get_path('module', 'bigvideo') . '/includes/plugins',
        'file' => 'bigvideo_context_reaction_background.inc',
        'class' => 'bigvideo_context_reaction_background',
        'parent' => 'context_reaction',
      ),
    ),
  );
}

/**
 * Implements hook_context_registry().
 */
function bigvideo_context_registry() {
  return array(
    'reactions' => array(
      'bigvideo' => array(
        'title' => t('Bigvideo background'),
        'plugin' => 'bigvideo_context_reaction_background',
      ),
    ),
  );
}
