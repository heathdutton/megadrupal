<?php

/**
 * @file
 * Highlights code using the jQuery Chili library.
 */

/**
 * The API version implemented by the module.
 */
define('CHILI_HIGHLIGHTER_API_VERSION', '2.1');

/**
 * The minimum API version with which the module is compatible.
 */
define('CHILI_HIGHLIGHTER_MINIMUM_API_VERSION', '2.1');

/**
 * Implements hook_filter_info().
 */
function chili_highlighter_filter_info() {
  $filters = array();

  $filters['chili_highlighter'] = array(
    'title' => t('Chili highlighter'),
    'description' => t('Highlights code using the jQuery Chili library.'),
    'prepare callback' => '_chili_highlighter_text_prepare',
    'process callback' => '_chili_highlighter_text_process',
    'settings callback' => '_chili_highlighter_settings',
    'default settings' => array(
      'chili_highlighter_line_numbers' => FALSE,
      'chili_highlighter_selectors' => array('code' => 'code'),
    ),
    'tips callback' => '_chili_highlighter_filter_tips',
  );

  return $filters;
}

/**
 * Implements hook_flush_caches().
 */
function chili_highlighter_flush_caches() {
  return array('cache_chili_highlighter');
}

/**
 * Implements hook_init().
 */
function chili_highlighter_init() {
  if ($plugin_path = chili_highlighter_plugin_path()) {
    $external = url_is_external($plugin_path);
    $module_path = drupal_get_path('module', 'chili_highlighter');

    drupal_add_js(
      array(
        'chiliHighlighter' => array(
          'selector' => '.chili-highlighter',
        )
      ),
      'setting'
    );

    // Third-party modules can change the plugin path to an external link.
    if ($external) {
      drupal_add_js(
        $plugin_path,
        array('type' => 'external', 'group' => JS_LIBRARY, 'weight' => 0)
      );
    }
    else {
      drupal_add_js(
        $plugin_path . '/jquery.chili.js',
        array('type' => 'file', 'group' => JS_LIBRARY, 'weight' => 0)
      );
    }

    foreach (chili_highlighter_recipe_list() as $id => $info) {
      drupal_add_js(
        $info['file'],
        array('type' => 'file', 'group' => JS_LIBRARY, 'weight' => 1)
      ); 
    }

    drupal_add_js(
      $module_path . '/js/chili_highlighter.js',
      array('type' => 'file', 'group' => JS_LIBRARY, 'weight' => 2)
    );
  }
}

/**
 * Implements hook_vars_library_LIBRARY_search_directories_alter().
 */
function chili_highlighter_vars_library_jquery_chili_search_directories_alter(&$dirs, $context) {
  $dirs[] = drupal_get_path('module', 'chili_highlighter') . '/js';
}

/**
 * Verifies the current API version is included between two values passed as
 * arguments.
 *
 * @param $minimum
 *   The minimum API version required.
 * @param $maximum
 *   The maximum version required. This argument is optional; the current API
 *   will be checked against this value only if it is passed to the function.
 *
 * @return
 *   TRUE, if the current API version is included between the passed values.
 */
function chili_highlighter_api($minimum = NULL, $maximum = NULL) {
  if (!isset($minimum)) {
    $minimum = CHILI_HIGHLIGHTER_MINIMUM_API_VERSION;
  }

  if (version_compare(CHILI_HIGHLIGHTER_API_VERSION, $minimum, '<')) {
    return FALSE;
  }

  if (isset($maximum) && version_compare(CHILIHIGHLIGHTER_API_VERSION, $maximum, '>')) {
    return FALSE;
  }

  return TRUE;
}

/**
 * Retrieves where the jQuery Chili plugin has been copied.
 *
 * @return
 *   The path of the jQuery Chili plugin.
 */
function chili_highlighter_plugin_path() {
  $plugin_path = &Vars::staticValue(__FUNCTION__, '');
  $vars = new Vars();

  if ($plugin_path) {
    return $plugin_path;
  }

  $dirs = $vars->getLibraryPath('jquery.chili', array('files' => 'jquery.chili.js'));
  if (empty($dirs)) {
    return '';
  }

  $plugin_path = array_shift($dirs);

  return $plugin_path;
}

/**
 * Retrieves the list of the jQuery Chili recipes.
 *
 * @return
 *   An array with an item for each found recipe.
 */
function chili_highlighter_recipe_list() {
  global $language;
  $langcode = $language->language;
  $recipes = &Vars::staticValue(__FUNCTION__, array());

  if (!empty($recipes)) {
    return $recipes;
  }

  if ($cached = cache_get("recipe_info:$langcode", 'cache_chili_highlighter')) {
    $recipes = $cached->data;
  }
  else {
    if ($plugin_path = chili_highlighter_plugin_path()) {
      if (url_is_external($plugin_path)) {
        $plugin_path = drupal_get_path('module', 'chili_highlighter') . '/js';
      }

      $files = file_scan_directory(
        $plugin_path, '/\.js$/i',
        array(
          'nomask' =>  '/(\.\.?|CVS|chili_highlighter\.js|jquery\.chili\.js|recipes?\.js)$/i',
          'recurse' => FALSE,
        )
      );
      foreach ($files as $file => $info) {
        $recipes[$info->name] = array(
          'file' => $file,
          'language ids' => array($info->name),
        );
      }
      
      $recipes += module_invoke_all('recipe_info');

      // Allow third-party modules to alter the list of recipes.
      drupal_alter('recipe_info', $recipes);
      cache_set("recipe_info:$langcode", $recipes, 'cache_chili_highlighter');
    }
  }

  return $recipes;
}

/**
 * Helper function for preg_replace_callback() that prepares the text.
 */
function _chili_highlighter_code_prepare($matches) {
  $language = drupal_strtolower($matches[2]);
  $text = str_replace("\n", '&#10;', check_plain(trim($matches[3])));

  return "[chili_highlighter:$language]$text" . "[/chili_highlighter]";
}

/**
 * Helper function for preg_replace_callback() that prepares the text.
 */
function _chili_highlighter_code_prepare_default_language($matches) {
  $text = str_replace("\n", '&#10;', check_plain(trim($matches[2])));

  return "[chili_highlighter]$text" . "[/chili_highlighter]";
}

/**
 * Helper function for preg_replace_callback() that processes the text.
 */
function _chili_highlighter_code_process($matches) {
  $language = $matches[1];
  $text = trim($matches[2], "\n");

  return "<pre class=\"chili-highlighter\"><code class=\"$language\">$text</code></pre>";
}

/**
 * Helper function for preg_replace_callback() that processes the text.
 */
function _chili_highlighter_code_process_default_language($matches) {
  $text = trim($matches[1], "\n");

  return "<pre class=\"chili-highlighter\"><code>$text</code></pre>";
}

/**
 * Filter tips callback for Chili highlighter filter.
 */
function _chili_highlighter_filter_tips($filter, $format, $long = FALSE) {
  $recipes = chili_highlighter_recipe_list();
  $selectors = _chili_highlighter_selectors_get($filter);
  $tags = array();

  foreach ($selectors as $selector) {
    $tags[] = "<$selector></$selector>";
  }

  $args = array('%language' => 'language', '%tags' => implode(', ', $tags));
  $tips = t('To post code snippets, surround them with %tags tags.', $args);

  if ($long) {
    if (!empty($recipes)) {
      $languages = array();
      
      foreach ($recipes as $id => $info) {
        if (!empty($info['language ids'])) {
          $languages = array_merge($languages, $info['language ids']);
        }
      }
      
      if (!empty($languages)) {
        $args['%languages'] = $languages;
        $tips .= t('Specify the programming language using the %language attribute; the currently supported language IDs are: %languages.', $args);
      }
    }
  }

  return $tips;
}

/**
 * Returns the selectors enabled for the input format.
 *
 * @return
 *   An array of tags containing the code to highlight.
 */
function _chili_highlighter_selectors_get($filter) {
  $selectors = array_keys(
    array_filter($filter->settings['chili_highlighter_selectors'])
  );
  if (empty($selectors)) {
    $selectors = array('code');
  }

  return $selectors;
}

/**
 * Settings callback for the Chili highlighter filter.
 */
function _chili_highlighter_settings($form, &$form_state, $filter, $format, $defaults, $filters) {
  $filter->settings += $defaults;

  $options = array();
  $tags = array('code', 'php', 'pre', 'sample');

  foreach ($tags as $tag) {
    $options[$tag] = "&lt;$tag&gt;";
  }

  $settings['chili_highlighter_selectors'] = array(
    '#type' => 'checkboxes',
    '#title' => t('The HTML tag containing the code to highlight'),
    '#default_value' => $filter->settings['chili_highlighter_selectors'],
    '#options' =>$options,
  );

  return $settings;
}

/**
 * Prepare callback for the Chili highlighter filter.
 */
function _chili_highlighter_text_prepare($text, $filter, $format, $langcode, $cache, $cache_id) {
  $selectors = _chili_highlighter_selectors_get($filter);
  $sel = implode('|', $selectors);

  $text = preg_replace_callback(
    "#<($sel)\s+language\s*=\s*" . '"([a-z][a-z0-9]+)">(.+)</\1>#Uis',
    '_chili_highlighter_code_prepare', $text
  );

  $text = preg_replace_callback(
    "#<($sel)>(.+)</\1>#Uis",
    '_chili_highlighter_code_prepare_default_language', $text
  );

  return $text;
}

/**
 * Process callback for the Chili highlighter filter.
 */
function _chili_highlighter_text_process($text, $filter, $format, $langcode, $cache, $cache_id) {
  $text = preg_replace_callback(
    '#\[chili_highlighter:([^\]]*)\](.+)\[/chili_highlighter\]#Us',
    '_chili_highlighter_code_process', $text
  );

  return preg_replace_callback(
    '#\[chili_highlighter\](.+)\[/chili_highlighter\]#Us',
    '_chili_highlighter_code_process_default_language', $text
  );
}
