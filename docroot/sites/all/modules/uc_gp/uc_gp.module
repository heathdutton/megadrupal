<?php

/**
 * @file
 * Global Payments WebPay gateway integration to Ubercart.
 */

/**
 * Implements hook_menu().
 */
function uc_gp_menu() {
  $items = array();

  $items['cart/uc_gp/order/%uc_order'] = array(
    'title' => 'UC Global Payment Request',
    'description' => '',
    'page callback' => 'uc_gp_webpay_request',
    'page arguments' => array(3),
    'access callback' => 'uc_gp_webpay_request_access',
    'access arguments' => array(3),
    'file' => 'uc_gp.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items['cart/uc_gp/response'] = array(
    'title' => 'Thank you for your purchase.',
    'description' => '',
    'page callback' => 'uc_gp_webpay_response',
    'page arguments' => array(),
    'access callback' => TRUE,
    'file' => 'uc_gp.pages.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Validate if order has right state and if user has access to order.
 *
 * @param object $order
 *   The fully loaded order being paid for.
 */
function uc_gp_webpay_request_access($order) {
  // Check if current order is stored in session.
  if (!isset($_SESSION['cart_order']) || ($order->order_id != $_SESSION['cart_order'])) {
    return FALSE;
  }

  // Check order status.
  if ($order->order_status != 'in_checkout') {
    return FALSE;
  }

  return TRUE;
}

/**
 * Implements hook_payment_method().
 */
function uc_gp_uc_payment_method() {
  $methods['ug_gp_webpay'] = array(
    'name' => t('Global Payments webpay'),
    'title' => t('Global Payments webpay'),
    'review' => t('Global Payments'),
    'desc' => t('Redirect users to submit payments through Global Payments webpay.'),
    'callback' => 'uc_gp_uc_payment_method_webpay',
    'weight' => 1,
    'checkout' => TRUE,
    'no_gateway' => TRUE,
  );

  return $methods;
}

/**
 * Implements hook_form_alter().
 */
function uc_gp_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'uc_cart_checkout_review_form' && ($order_id = intval($_SESSION['cart_order'])) > 0) {
    $order = uc_order_load($order_id);
    // If order payment method is set to webpay add custom pay button.
    if ($order->payment_method == 'ug_gp_webpay') {
      unset($form['actions']['submit']);
      $form['#prefix'] = '<table id="two-checkout-review-table"><tr><td>';
      $build = drupal_get_form('uc_gp_webpay_form', $order);
      $form['#suffix'] = '</td><td>' . drupal_render($build) . '</td></tr></table>';
    }
  }
}

/**
 * Callback from hook payment_method.
 */
function uc_gp_uc_payment_method_webpay($op, &$arg1) {
  switch ($op) {
    case 'settings':
      $form['uc_gp_url'] = array(
        '#type' => 'textfield',
        '#title' => t('Gateway URL'),
        '#description' => t('Order URL where should be data sent. This can be URL for test environment or production.'),
        '#default_value' => variable_get('uc_gp_url', 'https://test.3dsecure.gpwebpay.com/rb/order.do'),
      );
      $form['uc_gp_merchant_number'] = array(
        '#type' => 'textfield',
        '#title' => t('Merchant Number'),
        '#default_value' => variable_get('uc_gp_merchant_number', ''),
        '#description' => t('This number you should get from your bank.'),
      );
      $form['uc_gp_private_key_path'] = array(
        '#type' => 'textfield',
        '#title' => t('Privte key path'),
        '#default_value' => variable_get('uc_gp_private_key_path', ''),
        '#description' => t('Define path to private key. This key should be stored in private directory out of public accessible URL. Private key has usually format [name].pem'),
      );
      $form['uc_gp_private_key_password'] = array(
        '#type' => 'textfield',
        '#title' => t('Key password'),
        '#default_value' => variable_get('uc_gp_private_key_password', ''),
        '#description' => t('Enter password which unlocks the private key.'),
      );
      $form['uc_gp_public_key_path'] = array(
        '#type' => 'textfield',
        '#title' => t('Public key path'),
        '#default_value' => variable_get('uc_gp_public_key_path', ''),
        '#description' => t('Path to they GP public key. This should be different in testing and production environment.'),
      );
      $form['uc_gp_deposit_flag'] = array(
        '#type' => 'select',
        '#title' => t('Desposit Flag'),
        '#description' => t('Specifies if the order has to be paid for automatically.'),
        '#default_value' => variable_get('uc_gp_deposit_flag', 0),
        '#options' => array(
          0 => t('Payment not required.'),
          1 => t('Payment required.'),
        ),
      );
      return $form;
  }
}

/**
 * Gateway form to sent request to Global Payments server.
 */
function uc_gp_webpay_form($form, $form_state, $order) {
  $form['#action'] = url('cart/uc_gp/order/' . $order->order_id);
  $form['#method'] = 'GET';

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Proceed to payment'),
  );
  return $form;
}

/**
 * Create unique HASH of passed data.
 *
 * @param array $data
 *   This can be string or array, array will be automatically converted to
 *   string and concatenated with "|" character.
 *
 * @return string
 *   Returned base64 encoded.
 */
function uc_gp_webpay_sign_data($data = array()) {
  // If array is passed convert to string.
  if (is_array($data)) {
    $data = implode('|', $data);
  }

  // Check if private key + password is defined.
  if (($key = variable_get('uc_gp_private_key_path', '')) && ($password = variable_get('uc_gp_private_key_password', ''))) {
    // Read key.
    $key = file_get_contents($key);

    // Open private key.
    $private_key = openssl_pkey_get_private($key, $password);

    // Sign data.
    $digest = NULL;
    if (openssl_sign($data, $digest, $private_key)) {
      $digest = base64_encode($digest);
    }

    // Free private key.
    openssl_free_key($private_key);

    return $digest;
  }
}

/**
 * Verify that data received from other system are correct.
 */
function uc_gp_webpay_verify_data($data, $digest) {
  // If array is passed convert to string.
  if (is_array($data)) {
    $data = implode('|', $data);
  }

  // Decode digest from Base64 decoding.
  $digest = base64_decode($digest);

  // Check if public key is specified.
  if (($key = variable_get('uc_gp_public_key_path', ''))) {
    // Read key.
    $key = file_get_contents($key);

    // Open public certificate.
    $public_key = openssl_pkey_get_public($key);

    // Verify data.
    $result = openssl_verify($data, $digest, $public_key);

    // Close key reference.
    openssl_free_key($public_key);

    return ($result === 1 ? TRUE : FALSE);
  }
}

/**
 * Get ISO 4217 currency code.
 */
function uc_gp_get_iso_currency_code($currency) {
  module_load_include('inc', 'uc_gp', 'uc_gp.data');
  $data = uc_gp_data_iso_4217();
  return $data[$currency];
}
