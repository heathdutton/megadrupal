<?php
/**
 * @file
 * Main file of the odir_acl module.
 *
 * use the following to check permissions on current user:
 * if (odir_control($rule, $odir_path)) { }
 * rules are defined by odir_accessrules()
 */

define('ODIR_ACCESS_PATH_ALLOW', 'A');
define('ODIR_ACCESS_PATH_DENY', 'D');
define('ODIR_ACCESS_PATH_INHERIT', 'i');

/**
 * Implements hook_odir_accessrules().
 */
function odir_acl_odir_accessrules() {
  return array(
    'edit_permissions' => array(
      'title' => t('edit permissions'),
      'shortname' => t('EP'),
      'default_weight' => 100,
    ),
  );
}

/**
 * Implements hook_odir_control().
 */
function odir_acl_odir_control($rule, $odir_path = "") {
  global $user;
  if ($user->uid == 1) {
    return array(TRUE);
  }

  $odir_path = odir_decode($odir_path);
  $odir_path_parent = odir_get_parent($odir_path);

  $groupids = $user->roles;
  $perms_parent = odir_acl_read_and_calc($groupids, $odir_path_parent);
  $perms = odir_acl_read_and_calc($groupids, $odir_path, $perms_parent);

  if (property_exists($perms, $rule) && $perms->$rule == ODIR_ACCESS_PATH_ALLOW) {
    return array(TRUE);
  }
  elseif (property_exists($perms, $rule) && $perms->$rule == ODIR_ACCESS_PATH_DENY) {
    return array(FALSE);
  }
}

/**
 * Implemets hook_help().
 */
function odir_acl_help($path, $arg) {
  if ($path == 'admin/help#odir') {
    return '<p>' . t("A module for editing access permissions based on directory path.") . '</p>';
  }
}

/**
 * Implements hook_menu().
 */
function odir_acl_menu() {
  $items = array();
  $items['admin/odir/access/edit_form'] = array(
    'title' => 'Get ajax directories',
    'page callback' => 'odir_acl_edit_form_callback',
    'access callback' => 'odir_control',
    'access arguments' => array('edit_permissions', 2),
    'type' => MENU_CALLBACK,
    'file' => 'odir_acl.inc',
  );
  $items['admin/odir/access/ajax/get_permission_string'] = array(
    'title' => 'Get ajax directories',
    'page callback' => 'odir_acl_ajax_get_permission_string',
    'access callback' => 'odir_control',
    'access arguments' => array('edit_permissions', 2),
    'type' => MENU_CALLBACK,
    'file' => 'odir_acl.inc',
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function odir_acl_theme() {
  return array(
    'odir_acl_permission_editor_grouplist_item' => array(
      'template' => 'templates/odir-acl-permission-editor-grouplist-item',
      'variables' => array(
        'edit_permission_url' => NULL,
        'source_url' => NULL,
        'emptydiv_id' => NULL,
        'title' => NULL,
        'id_suffix' => NULL,
      ),
    ),
    'odir_acl_view_path_permissions_summary' => array(
      'template' => 'templates/odir-acl-view-path-permissions-summary',
      'variables' => array(
        'allow' => NULL,
        'role' => NULL,
      ),
    ),
    'odir_acl_permission_editor_footer' => array(
      'template' => 'templates/odir-acl-permission-editor-footer',
      'variables' => array(),
    ),
  );
}

/**
 * Implements hook_access_block_info().
 */
function odir_acl_block_info($delta = 0, $edit = array()) {
  $blocks[0]['info'] = t('Directory access control');
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function odir_acl_block_view($delta = 0, $edit = array()) {
  if (!odir_current()) {
    return;
  }
  $content = "";
  switch ($delta) {
    case 0:
      $current_path_encoded = _odir_get_current_path_encoded_from_field_or_from_sesssion('odir_block_fieldname');
      $current_path = odir_decode($current_path_encoded);
      $blocks = array();
      if (odir_control("edit_permissions", $current_path)) {
        $blocks['subject'] = t('Permissions');
        $blocks['content'] = _odir_acl_permission_grouplist();
      }
      return $blocks;
  }
}

/**
 * Implements hook_block_configure().
 *
 * Invokes hook_odir_acl_block_configure().
 */
function odir_acl_block_configure($delta = 0) {
  return module_invoke_all("odir_acl_block_configure", $delta);
}

/**
 * Implements hook_block_save().
 *
 * Invokes hook_odir_acl_block_save().
 */
function odir_acl_block_save($delta = 0, $edit = array()) {
  module_invoke_all("odir_acl_block_save", $delta, $edit);
}

/**
 * Generates the odir_acl permission block.
 */
function _odir_acl_permission_grouplist() {
  $content = "";
  $roles = ctools_get_roles();
  $coded_path = odir_encode(odir_current());
  foreach ($roles as $key => $value) {
    $url = url('admin/odir/access/edit_form/' . $coded_path . '/' . $key . '/');
    $url2 = url('admin/odir/access/ajax/get_permission_string/' . $coded_path . '/' . $key . '/');
    $edit_div = "odir_acl_edit_role_" . $key;
    $content .= theme('odir_acl_permission_editor_grouplist_item',
                      array(
                        'edit_permission_url' => $url,
                        'source_url' => $url2,
                        'emptydiv_id' => $edit_div,
                        'title' => $value,
                        'id_suffix' => $key,
                      ));
  }
  $content .= theme('odir_acl_permission_editor_footer', array());
  return $content;
}

/**
 * Loads database record of access rules defined for $path.
 */
function odir_acl_load($path = "") {
  $path = odir_decode($path);
  $result = db_query("SELECT allow, deny, group_id, odir_path  FROM {odir_acl}
                      WHERE odir_path=:odir_path
                      ORDER BY group_id; ",
                      array('odir_path' => $path)
  );
  return $result;
}

/**
 * Loads all database records defining the permissions of path.
 */
function odir_acl_load_hirarchic($groupids = NULL, $path_encoded = "", $explode_path = TRUE) {
  $odir_path = odir_decode($path_encoded);
  $query = "SELECT allow, deny, group_id, odir_path  FROM {odir_acl} WHERE (";
  $arguments = array();
  $condition_count = 0;
  $group_counter = 0;

  if (!is_array($groupids)) {
    $groupids = array($groupids => $groupids);
  }

  if ($groupids != NULL) {
    foreach ($groupids as $groupid => $groupname) {
      if ($groupid != "") {
        if ($condition_count++ > 0) {
          $query .= " OR ";
        }
        $query .= 'group_id=:group_id' . ++$group_counter;
        $arguments['group_id' . $group_counter] = $groupid;
      }
    }
    $query .= ") AND (";
  }
  $condition_count = 0;
  if ($explode_path) {
    $path_elements = explode('/', $odir_path);
  }
  else {
    if ($odir_path == "") {
      $odir_path = "";
    }
    $path_elements = array($odir_path);
  }

  $odir_path_counter = 0;
  if ($explode_path) {
    $path = "";
    if ($condition_count++ > 0) {
      $query .= " OR ";
    }
    $query .= 'odir_path=:odir_path' . ++$odir_path_counter . '';
    $arguments['odir_path' . $odir_path_counter] = $path;
  }
  $path = "";
  foreach ($path_elements as $element) {
    if ($element != "") {
      if ($explode_path) {
        if ($path != "") {
          $path .= "/" . $element;
        }
        else {
          $path .= $element;
        }
      }
      else {
        $path = $element;
      }
      if ($condition_count++ > 0) {
        $query .= " OR ";
      }
      $query .= 'odir_path=:odir_path' . ++$odir_path_counter . '';
      $arguments['odir_path' . $odir_path_counter] = $path;
    }
  }
  if ($groupids != NULL) {
    $query .= ") ORDER BY odir_path;";
  }
  else {
    $query .= ") ORDER BY group_id, odir_path;";
  }
  $result = db_query($query, $arguments);
  return $result;
}

/**
 * Implements the form for editing permissions.
 */
function odir_acl_edit_form($form_id, $form_state) {
  $record = $form_state['build_info']['args'][0];
  $options = array(
    ODIR_ACCESS_PATH_INHERIT => t('Inherit'),
    ODIR_ACCESS_PATH_ALLOW => t('Allow'),
    ODIR_ACCESS_PATH_DENY => t('Deny'));

  $form['access'] = array(
    '#type' => 'fieldset',
    '#title' => t('Access rules'),
    '#tree' => TRUE,
  );
  $form['access']['role'] = array(
    '#type' => 'value',
    '#size' => 6,
    '#title' => t('Role Name'),
    '#value' => $record->group_id,
  );
  foreach (odir_accessrules() as $rule => $r) {
    $form['access'][$rule] = array(
      '#type' => 'select',
      '#title' => check_plain(t($r['title'])),
      '#default_value' => $record->$rule,
      '#options' => $options,
    );
  }
  $form['access']['odir_filepath'] = array('#type' => 'value', '#value' => $record->odir_path);
  $form['access']['submit'] = array('#type' => 'submit', '#value' => t('Save'));
  return $form;
}

/**
 * Saves the permission form.
 */
function odir_acl_edit_form_submit($form, &$form_state) {
  $allow = '';
  $deny = '';
  foreach (odir_accessrules() as $rule => $r) {
    $form_value = $form_state['values']['access'][$rule];
    $short_name = $r['shortname'];
    if ($form_value == ODIR_ACCESS_PATH_ALLOW) {
      $allow .= $short_name . ',';
    }
    elseif ($form_value == ODIR_ACCESS_PATH_DENY) {
      $deny .= $short_name . ',';
    }
  }
  $path = odir_decode($form_state['values']['access']['odir_filepath']);
  $role = $form_state['values']['access']['role'];
  $test = db_query("SELECT allow, deny, group_id, odir_path FROM {odir_acl}
                    WHERE odir_path=:odir_path
                    AND group_id=:group_id",
                    array(
                      'odir_path' => $path,
                      'group_id' => $role,
                    )
  );
  if ($test->rowCount() > 0) {
    db_update('odir_acl')
      ->fields(array('allow' => $allow, 'deny' => $deny))
      ->condition('odir_path', $path)
      ->condition('group_id', $role)
      ->execute();
  }
  else {
    db_insert('odir_acl')
      ->fields(array(
                 'allow' => $allow,
                 'deny' => $deny,
                 'odir_path' => $path,
                 'group_id' => $role))
      ->execute();
  }
  drupal_set_message(t('Your form has been saved.'));
}

/**
 * Returns an array with all the permissions objects (defined by
 * hook_odir_accessrules()) which are granted by $perms. Useful for page
 * rendering.
 */
function odir_get_active_permissions($perms) {
  $active_permissions = array();
  foreach (odir_accessrules() as $rule => $r) {
    if ($perms->$rule == ODIR_ACCESS_PATH_ALLOW) {
      $active_permissions[] = $r;
    }
  }
  return $active_permissions;
}

/**
 * Expands a comma-separated string into an array.
 */
function odir_acl_split_comma($csv_string) {
  $temp = preg_split('/,/', $csv_string);
  $permissions = array();
  foreach ($temp as $p) {
    if ($p != '') {
      $permissions[] = $p;
    }
  }
  return $permissions;
}

/**
 * Merges $allow and $deny rules into &$perms.
 *
 * @todo test deny and allow order in complex scenerios with multiple allows and
 * denies
 */
function odir_acl_rule_evaluation(&$perms, $allow = '', $deny = '') {
  $a = odir_acl_split_comma($allow);
  $d = odir_acl_split_comma($deny);
  foreach (odir_accessrules() as $rule => $r) {
    if (!property_exists($perms, $rule)) {
      $perms->$rule = ODIR_ACCESS_PATH_INHERIT;
    }
    if (in_array($r['shortname'], $a)) {
      $perms->$rule = ODIR_ACCESS_PATH_ALLOW;
    }
    if (in_array($r['shortname'], $d)) {
      $perms->$rule = ODIR_ACCESS_PATH_DENY;
    }
  }
}

/**
 * Loads permissions from database and calculates effective permissions.
 *
 * @todo could be cached in later version
 */
function odir_acl_read_and_calc($groupids = NULL, $odir_path = "", $parent_perms = NULL) {
  $odir_path_encoded = odir_encode($odir_path);
  static $odir_acl_loaded = array();
  if (!isset($odir_acl_loaded[$odir_path_encoded])) {

    if ($parent_perms) {
      $perms = clone $parent_perms;
      $explode_path = FALSE;
    }
    else {
      $perms = new stdClass();
      $explode_path = TRUE;
    }

    $db = odir_acl_load_hirarchic(
      $groupids, $odir_path_encoded, $explode_path, TRUE);

    odir_acl_rule_evaluation($perms);
    while ($row = $db->fetchObject()) {
      odir_acl_rule_evaluation(
          $perms,
          $row->allow,
          $row->deny
      );
    }
    $odir_acl_loaded[$odir_path_encoded] = $perms;
  }
  return $odir_acl_loaded[$odir_path_encoded];
}
