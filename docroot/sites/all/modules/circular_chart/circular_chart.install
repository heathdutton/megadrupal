<?php
/**
 * @file
 * Contains the table schema for the circular chart module.
 */

/**
 * Implements hook_field_schema().
 */
function circular_chart_field_schema($field) {
  $columns = array(
    'circle_value' => array(
      'type' => 'int',
      'not null' => FALSE,
    ),
  );
  $indexes = array(
    'circle_value' => array('circle_value'),
  );
  return array(
    'columns' => $columns,
    'indexes' => $indexes,
  );
}

/**
 * Implements hook_schema().
 */
function circular_chart_schema() {
  $schema = array();
  // Add the table for storing the chart presets.
  $schema['circular_chart_preset'] = circular_chart_get_circular_chart_preset();

  return $schema;
}

/**
 * Helper function to return chart preset schema.
 *
 * @return array
 *   - Returns the schema array for the chart presets.
 */
function circular_chart_get_circular_chart_preset() {
  return array(
    'description' => 'Table for storing the created circular chart presets',
    'export' => array(
      'key' => 'name',
      'key name' => 'Machine name',
      'primary key' => 'cc_id',
      // Exports will be defined as $circular_chart_preset.
      'identifier' => 'circular_chart_preset',
      // Function hook name.
      'default hook' => 'default_circular_chart_preset',
      'api' => array(
        'owner' => 'circular_chart',
        // Base name for api include files.
        'api' => 'default_circular_chart_environments',
        'minimum_version' => 1,
        'current_version' => 1,
      ),
    ),
    'fields' => array(
      'cc_id' => array(
        'type' => 'serial',
        'description' => 'Auto incremented primary key.',
        'not null' => TRUE,
        'unsigned' => TRUE,
        // Do not export the database only field.
        'no export' => TRUE,
      ),
      'name' => array(
        'type' => 'varchar',
        'description' => 'The machine name of the preset added.',
        'length' => 100,
        'not null' => TRUE,
      ),
      'label' => array(
        'type' => 'varchar',
        'description' => 'The human readable name of the preset added.',
        'length' => 100,
        'not null' => TRUE,
      ),
      'data' => array(
        'type' => 'text',
        'size' => 'big',
        'description' => 'The configuration data for the preset.',
        'not null' => FALSE,
        'serialize' => TRUE,
      ),
    ),
    'primary key' => array('cc_id'),
    'unique keys' => array(
      'name' => array('name'),
    ),
  );
}

/**
 * Implements hook_requirements().
 */
function circular_chart_requirements($phase) {
  $requirements = array();
  $t = get_t();
  $requirements['circles'] = array(
    'title' => $t('Lugolabs Circles'),
  );
  if (module_exists('libraries') && function_exists('libraries_detect')) {
    $library = libraries_detect('circles');
    $circle_lib_installed = ($library['installed']) ? TRUE : FALSE;
  }
  else {
    $circle_lib_installed = FALSE;
  }
  switch ($phase) {
    case 'runtime':
      if ($circle_lib_installed) {
        $requirements['circles']['value'] = $t('Installed');
        $requirements['circles']['severity'] = REQUIREMENT_OK;
      }
      else {
        $requirements['circles']['value'] = $t('Not Installed');
        $requirements['circles']['severity'] = REQUIREMENT_ERROR;
        $requirements['circles']['description'] = $t('!error_msg Please install the circles library from !url.', array(
          '!error_msg' => $library['error message'],
          '!url' => (PHP_SAPI === 'cli' ? $t('https://github.com/lugolabs/circles') : (l($t('Github'), 'https://github.com/lugolabs/circles', array('external' => TRUE)))),
        ));
      }
      break;
  }

  return $requirements;
}
