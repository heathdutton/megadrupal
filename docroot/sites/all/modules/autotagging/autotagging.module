<?php
// $Id$

/*
 * @file
 * Module for base Autotagging API.
 */

/**
 * Implements hook_menu().
 */
function autotagging_menu() {
  $items = array();
  $items['admin/config/autotagging'] = array(
    'title' => 'Autotagging',
    'description' => t('Configure Autotagging of nodes'),
    'access arguments' => array('administer autotagging'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('autotagging_settings_form'),
    'file' => 'autotagging.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['ajax/autotagging'] = array(
    'title' => 'Autotagging AJAX callback',
    'page callback' => 'autotagging_ajax',
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('moderate autotagging'),
  );
  return $items;
}

function autotagging_ajax() {
  $text = strip_tags($_REQUEST['text']);
  // exclude stop words
  //$text = preg_replace(explode("\n", variable_get('autotagging_stop_words')), '', $text);
  $hook = 'autotagging_api_prefetch';
  module_invoke_all($hook, $node, $text);
  $ignore_setting = variable_get('autotagging_error_handling', 'Defer');
  $terms = array();
  $insert_hook = 'autotagging_api_node_insert';
  foreach (module_implements($insert_hook) as $module_name) {
    error_log("Using module " . $module_name);
    $terms = module_invoke($module_name, $insert_hook, $node, $text);
    if ($terms === FALSE) {
      // error occurred processing this node for this service
      if ($ignore_setting == 'Defer') {
        // TODO: handle defer logic
        //
        break;
      }
    }
  }
  // allows modules to act on terms before they're saved.
  $presave_hook = 'autotagging_api_presave';
  module_invoke_all($presave_hook, $node, $terms);
  drupal_json_output($terms);
}

/**
 * Implements hook_permission().
 */
function autotagging_permission() {
  return array(
    'administer autotagging' => array(
      'title' => t('administer autotagging'),
      'description' => t('Administer autotagging settings'),
    ),
    'moderate autotagging' => array(
      'title' => t('moderate autotagging'),
      'description' => t('Moderate the results of autotagging operations.'),
    ),
  );
}

/**
 * Implements hook_node_update().
 */
function autotagging_node_presave(&$node) {
  $terms = array();
  // check that this node type is allowed for autotagging
  $allowed_types = variable_get('autotagging_allowed_types', array());

  if (!in_array($node->type, $allowed_types)) {
    return NULL;
  }

  // invoke autotagging api
  $text = array();
  $text[] = $node->title;
  // TODO: handle each language separately
  foreach ($node->body as $lang => $body_field) {
    foreach ($body_field as $key => $body) {
      $text[] = str_replace("\n", ' ', $body['value']);
    }
  }
  $text = implode(' ', strip_tags($text));
  // exclude stop words
  $text = preg_replace(explode("\n", variable_get('autotagging_stop_words')), '', $text);
  $prefetch_hook = 'autotagging_api_prefetch';
  module_invoke_all($prefetch_hook, $node, $text);
  $ignore_setting = variable_get('autotagging_error_handling', 'Defer');
  $terms = array();
  $update_hook = 'autotagging_api_node_update';
  foreach (module_implements($update_hook) as $module_name) {
    $terms = module_invoke($module_name, $update_hook, $node, $text);
    if ($terms === FALSE) {
      // error occurred processing this node for this service
      if ($ignore_setting == 'Defer') {
        // TODO: handle defer logic
        //
        break;
      }
    }
    if (isset($terms) && is_array($terms) && !empty($terms)) {
      // find the vocabulary with which to associate these terms
      //
      foreach ($terms as $vid => $termlist) {
        foreach ($termlist as $term) {
          $node->{'field_' . $vid}[0]['value'] = $term;

        }
      }
    }
  }
  // allows modules to act on terms before they're saved.
  $presave_hook = 'autotagging_api_presave';
  module_invoke_all($presave_hook, $node, $terms);
}

/**
 * Implements hook_node_insert().
 */
function autotagging_node_insert($node) {
  $terms = array();
  // check that this node type is allowed for autotagging
  $allowed_types = variable_get('autotagging_allowed_types', array());

  if (!in_array($node->type, $allowed_types)) {
    return NULL;
  }

  // invoke autotagging api
  $text = array();
  $text[] = $node->title;
  $text[] = str_replace("\n", ' ', $node->body);
  $text = implode(' ', strip_tags($text));
  // exclude stop words
  $text = preg_replace(explode("\n", variable_get('autotagging_stop_words')), '', $text);
  $prefetch_hook = 'autotagging_api_prefetch';
  module_invoke_all($prefetch_hook, $node, $text);
  $ignore_setting = variable_get('autotagging_error_handling', 'Defer');
  $terms = array();
  $insert_hook = 'autotagging_api_node_insert';
  foreach (module_implements($insert_hook) as $module_name) {
    $terms = module_invoke($module_name, $insert_hook, $node, $text);
    if ($terms === FALSE) {
      // error occurred processing this node for this service
      if ($ignore_setting == 'Defer') {
        // TODO: handle defer logic
        //
        break;
      }
    }
    if (isset($terms) && is_array($terms) && !empty($terms)) {
      // find the vocabulary with which to associate these terms
      //
      foreach ($terms as $vid => $termlist) {
        if (empty($node->taxonomy['tags'][$vid])) {
          $node->taxonomy['tags'][$vid] = implode(', ', $termlist);
        }
        else {
          $node->taxonomy['tags'][$vid] .= ', ' . implode(', ', $termlist);
        }
      }
    }
  }
  // allows modules to act on terms before they're saved.
  $presave_hook = 'autotagging_api_presave';
  module_invoke_all($presave_hook, $node, $terms);
  taxonomy_node_save($node, $node->taxonomy);
}

/**
 * Implements hook_form_alter().
 */
function autotagging_form_alter(&$form, &$form_state, $form_id) {
  if (!preg_match('/_node_form$/', $form_id)) {
    return;
  }
  $type = $form['#node']->type;
  $allowed_types = variable_get('autotagging_allowed_types', array());
  if (!in_array($type, $allowed_types)) {
    return;
  }
  drupal_add_css(drupal_get_path('module', 'autotagging') . '/autotagging.css');
  drupal_add_js(drupal_get_path('module', 'autotagging') . '/autotagging.js');
  $form['field_tags']['autotagging_suggest'] = array(
    '#type' => 'markup',
    '#markup' => '<a href="javascript:void(0);" onclick="autotagging_js_suggest();">' . t('Suggest Tags') . '</a><div id="autotagging_suggest"></div>',
  );
}
