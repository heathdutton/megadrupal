<?php

/**
 * @file
 * Provides i18n field synchronisation for a node_reference field.
 */

/**
 * Implements hook_field_info_alter().
 */
function i18n_node_reference_field_info_alter(&$info) {
  $info['node_reference']['i18n_sync_callback'] = 'i18n_node_reference_field_prepare_translation';
}

/**
 * Prepare and synchronize translation for term reference fields.
 */
function i18n_node_reference_field_prepare_translation($entity_type, $entity, $field, $instance, $langcode, &$items, $source_entity, $source_langcode) {

  // Translate the items one by one.
  $nids = array();
  $new_items = array();
  foreach ($items as $index => $item) {
    $node = node_load($item['nid']);
    if ($node) {
      if ($translation = i18n_node_reference_node_get_translation($node, $langcode)) {
        $new_items[] = array(
          'nid' => $translation->nid,
        );
        $nids[] = $translation->nid;
      }
    }
  }

  // Also add the existing node references for this translation that are
  // untranslated in the source entity. These options should not be removed!
  // The reason for this is that a user editing the node edit form did not see
  // the reference options (the nodes do not exist in that language) and after
  // saving the form it is undesirable that these node references are lost in
  // the node's other translations that have those references set!
  $current_items = field_get_items($entity_type, $entity, $field['field_name']);
  if ($current_items) {
    foreach ($current_items as $current_item) {
      if (!in_array($current_item['nid'], $nids)) {
        // Check if this node is multi-language and available in this language.
        $node = node_load($current_item['nid']);
        if ($node) {
          $translation = i18n_node_reference_node_get_translation($node, $source_langcode);
          if (!$translation) {
            // The reference was not available in the source language.
            // Preserve it.
            $new_items[] = $current_item;
          }
        }
      }
    }
  }

  $items = $new_items;
}

/**
 * Find the specified node translation from the translation set.
 *
 * @param object $node
 *   Node object to find translation.
 * @param string $langcode
 *   Language code to find translation for.
 *
 * @return bool|mixed
 *   Node in the correct language, if it exists. FALSE otherwise.
 */
function i18n_node_reference_node_get_translation($node, $langcode) {
  if (($node->language == LANGUAGE_NONE) || ($node->language == $langcode) || !translation_supported_type($node->type)) {
    // Node is not translatable thus the same for every language.
    return $node;
  }
  else {
    // Find translation.
    $translations = translation_node_get_translations($node->tnid);
    if ($translations && array_key_exists($langcode, $translations)) {
      // Translation exists.
      return node_load($translations[$langcode]->nid);
    }
    else {
      // Translation does not exist.
      return FALSE;
    }
  }
}
