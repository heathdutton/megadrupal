<?php
/**
 * @file
 * Allows the taxonomy term pages in certain cases to be overidden.
 */

/**
 * Implements hook_help().
 */
function hide_termpage_content_help($path, $arg) {
  switch ($path) {
    case 'admin/help#hide_termpage_content':
      return '<p>' . t('The hide_termpage_content module allows a site 
 administrator to turn off the display of related content when a user views 
 a taxonomy term page from a specific vocabulary. Please note, this module
 is not currently compatible with Internationalization_taxonomy (i18n_taxonomy).') . '</p>';
  }
}

/**
 * Implements hook_menu_alter().
 * @see taxonomy_menu()
 * @see hook_menu_alter()
 */
function hide_termpage_content_menu_alter(&$items) {
  // Check if page manager has taken control of this page.
  if (variable_get('page_manager_term_view_disabled', TRUE)) {
    // Override the normal taxonomy term page callback.
    $items['taxonomy/term/%taxonomy_term']['page callback'] = 'hide_termpage_content_term_page';
  }
  else {
    // The page manager has overridden the page handler for taxonomy terms.
    // Theres a pretty good chance this module can be turned off.
    return;
  }
  // @TODO: When i18n is figured out, we should re-enable these.
  //$items['taxonomy/term/%taxonomy_term']['module'] = 'hide_termpage_content';
  //$items['taxonomy/term/%taxonomy_term']['file path'] = drupal_get_path('module', 'hide_termpage_content');
  //$items['taxonomy/term/%taxonomy_term']['file'] = 'hide_termpage_content.module';
}

/**
 * Alternative term page handler for taxonomy terms.
 * @param $term
 *  The taxonomy term object loaded from the URL
 * @see taxonomy_term_load()
 * @see taxonomy_term_page()
 */
function hide_termpage_content_term_page($term) {
  // Check if the term provided belongs to a vocabulary which skips node attachments.
  if (FALSE == variable_get(_hide_termpage_content_get_varname($term->vocabulary_machine_name), FALSE)) {
    // If the variable isn't defined or the vocabulary is including content on term pages,
    // use the normal taxonomy term page handler.
    module_load_include('inc', 'taxonomy', 'pages');
    return taxonomy_term_page($term);
  }

  // The vocabulary for this term has chosen not to display related content to it.

  // Assign the term name as the page title.
  drupal_set_title($term->name);

  // Build breadcrumb based on the hierarchy of the term.
  $current = (object) array(
    'tid' => $term->tid,
  );
  // @todo This overrides any other possible breadcrumb and is a pure hard-coded
  //   presumption. Make this behavior configurable per vocabulary or term.
  $breadcrumb = array();
  while ($parents = taxonomy_get_parents($current->tid)) {
    $current = array_shift($parents);
    $breadcrumb[] = l($current->name, 'taxonomy/term/' . $current->tid);
  }
  $breadcrumb[] = l(t('Home'), NULL);
  $breadcrumb = array_reverse($breadcrumb);
  drupal_set_breadcrumb($breadcrumb);
  drupal_add_feed('taxonomy/term/' . $term->tid . '/feed', 'RSS - ' . $term->name);

  $build = array();

  $build['term_heading'] = array(
    '#prefix' => '<div class="term-listing-heading">', 
    '#suffix' => '</div>', 
    'term' => taxonomy_term_view($term, 'full'),
  );

  // Skip the node handling.

  return $build;
}

/**
 * @TODO: i18n_taxonomy helper function
 * Menu callback; displays all nodes associated with a term.
 * NOTE: Copied directly from i18n_taxonomy.pages.inc
 * @param $term
 *   The taxonomy term.
 * @return
 *   The page content.
 * /
function hide_termpage_content_i18n_taxonomy_term_page($term) {
  $term = i18n_taxonomy_localize_terms($term);

  // Assign the term name as the page title.
  drupal_set_title($term->name);

  // Build breadcrumb based on the hierarchy of the term.
  $current = (object) array(
    'tid' => $term->tid,
  );
  // @todo This overrides any other possible breadcrumb and is a pure hard-coded
  //   presumption. Make this behavior configurable per vocabulary or term.
  $breadcrumb = array();
  while ($parents = taxonomy_get_parents($current->tid)) {
    $parents = i18n_taxonomy_localize_terms($parents);
    $current = array_shift($parents);
    $breadcrumb[] = l($current->name, 'taxonomy/term/' . $current->tid);
  }
  $breadcrumb[] = l(t('Home'), NULL);
  $breadcrumb = array_reverse($breadcrumb);
  drupal_set_breadcrumb($breadcrumb);
  drupal_add_feed('taxonomy/term/' . $term->tid . '/feed', 'RSS - ' . $term->name);

  $build = array();

  $build['term_heading'] = array(
    '#prefix' => '<div class="term-listing-heading">',
    '#suffix' => '</div>',
    'term' => taxonomy_term_view($term, 'full'),
  );

  // Skip adding nodes to the page.

  return $build;
}/**/

/**
 * @TODO: i18n helper
 * Render a taxonomy term page HTML output.
 * NOTE: Copied directly from i18n_taxonomy.pages.inc
 * @param $tids
 *   An array of term ids.
 * @param $result
 *   A pager_query() result, such as that performed by taxonomy_select_nodes().
 *
 * @ingroup themeable
 * /
function theme_hide_termpage_content_i18n_taxonomy_term_page($tids, $result) {
  drupal_add_css(drupal_get_path('module', 'taxonomy') . '/taxonomy.css');

  $output = '';

  // Only display the description if we have a single term, to avoid clutter and confusion.
  if (count($tids) == 1) {
    $term = i18n_taxonomy_localize_terms(taxonomy_term_load($tids[0]));
    // Check that a description is set.
    if (!empty($term->description)) {
      $output .= '<div class="taxonomy-term-description">';
      $output .= filter_xss_admin($term->description);
      $output .= '</div>';
    }
  }

  // Skip node processing.

  return $output;
}/**/

/**
 * Allows us to add a form handler for vocabulary configs.
 * @param $form
 *  Form structure.
 * @param $form_state
 *  Data passed to the form.
 * @param $edit
 *  Additional data passed into the normal taxonomy vocabulary form.
 * @see hook_form_FORM_ID_alter()
 * @see taxonomy_form_vocabulary()
 */
function hide_termpage_content_form_taxonomy_form_vocabulary_alter(&$form, &$form_state, &$edit=array()) {
  // The vocabulary form already handles this for us.
  $machine_name = (isset($form['#vocabulary']) && is_object($form['#vocabulary'])) ? $form['#vocabulary']->machine_name : $form['machine_name']['#default_value'];

  $form['hide_termpage_content_norelation'] = array(
    '#type' => 'checkbox',
    '#default_value' => !empty($form_state['values']['hide_termpage_content_norelation']) ? TRUE : variable_get(_hide_termpage_content_get_varname($machine_name), FALSE),
    '#title' => t('Ignore related content when rendering term pages from this vocabulary.'),
  );

  $form['#submit'][] = 'hide_termpage_content_form_taxonomy_form_vocabulary_submit';
}

/**
 * Saves the system variable needed for each vocabulary when it is updated.
 * @param $form
 *  Form structure.
 * @param $form_state
 *  Data passed to the form.
 */
function hide_termpage_content_form_taxonomy_form_vocabulary_submit($form, &$form_state) {
  $vocabulary = $form_state['vocabulary'];
  if (!empty($form_state['values']['hide_termpage_content_norelation'])) {
    variable_set(_hide_termpage_content_get_varname($vocabulary->machine_name), TRUE);
  }
}

/**
 * Structures the variable name we need to access.
 * @param $machine_name
 *  The vocabulary machine name to check.
 * @return String
 */
function _hide_termpage_content_get_varname($machine_name) {
  return 'hide_termpage_content_' . $machine_name;
}
