<?php

/**
 * TODO:
 * - Readme file
 */

/**
 * Implements hook_wysiwyg_plugin().
 */
function ckeditor_insert_wysiwyg_plugin($editor, $version) {
  switch ($editor) {
    case 'ckeditor' :
      return array('insert' => array(
          'internal' => FALSE,
          'path' => drupal_get_path('module', 'ckeditor_insert') . '/plugin',
          'filename' => 'plugin.js',
          'buttons' => array(
            'insertFileDialog' => t('Insert a file'),
            'insertImageDialog' => t('Insert an image'),
          ),
          'load' => TRUE,
        ), );
  }
  break;
}

/**
 * Implements hook_ckeditor_plugin().
 */
function ckeditor_insert_ckeditor_plugin() {
  return array('insert' => array(
      'name' => 'insert',
      'desc' => t('Buttons for Insert module'),
      'path' => drupal_get_path('module', 'ckeditor_insert') . '/plugin/',
      'buttons' => array(
        'insertFileDialog' => array(
          'icon' => 'images/insertfile.png',
          'label' => 'Insert a file',
        ),
        'insertImageDialog' => array(
          'icon' => 'images/insertimage.png',
          'label' => 'Insert an image',
        ),
      ),
    ), );
}

/**
 * Implements hook_permission().
 */
function ckeditor_insert_permission() {
  return array(
    'access ckeditor insert' => array('title' => t('Access <em>CKEditor Insert</em>')),
    'administer ckeditor insert' => array('title' => t('Administer <em>CKEditor Insert</em>')),
  );
}

/**
 * Implements hook_menu().
 */
function ckeditor_insert_menu() {
  $items['admin/config/content/ckeditor_insert'] = array(
    'title' => 'CKEditor Insert',
    'description' => 'Configure CKEditor Insert.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ckeditor_insert_settings_form'),
    'access arguments' => array('administer ckeditor insert'),
    'file' => 'ckeditor_insert.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_field_widget_form_alter().
 */
function ckeditor_insert_field_widget_form_alter(&$element, &$form_state, $context) {
  if (user_access('access ckeditor insert')) {
    $keys = array(
      'file',
      'image'
    );
    foreach ($keys as $key) {
      if (isset($element['#field_name']) && $element['#field_name'] === variable_get('ckeditor_insert_' . $key . '_field', 0)) {
        // We need a theme wrapper because #prefix and #suffix are already used
        // later.
        $element['#theme_wrappers'][] = 'ckeditor_insert_wrapper';
        $element['#ckeditor_insert_key'] = $key;
        $element['#attached']['css'] = array(drupal_get_path('module', 'ckeditor_insert') . '/ckeditor_insert.css');
        $element['#attached']['js'] = array(drupal_get_path('module', 'ckeditor_insert') . '/ckeditor_insert.js');
      }
    }
  }
}

/**
 * Implements hook_preprocess_html().
 */
function ckeditor_insert_preprocess_html(&$vars) {
  // This is set by theme_ckeditor_insert_wrapper.
  global $ckeditor_insert;
  if (isset($ckeditor_insert)) {
    $vars['page']['page_bottom']['ckeditor_insert'] = array('ckeditor_insert' => array('#markup' => '<div id="ckeditor_insert_fade" class="ckeditor_insert_white_overlay"></div>'));
  }
}

/**
 * Implements hook_theme().
 */
function ckeditor_insert_theme() {
  return array('ckeditor_insert_wrapper' => array('render element' => 'element', ), );
}

function theme_ckeditor_insert_wrapper($variables) {
  global $ckeditor_insert;
  $key = $variables['element']['#ckeditor_insert_key'];
  // This is used in ckeditor_insert_preprocess_html() to append a div at the end
  // of HTML body.
  $ckeditor_insert = TRUE;
  return '<div id="ckeditor_' . $key . '_insert_light" class="ckeditor_insert_dialog">' . $variables['element']['#children'] . '<a id="ckeditor_' . $key . '_insert_close_button">' . t('Close') . '</a></div>';
}
