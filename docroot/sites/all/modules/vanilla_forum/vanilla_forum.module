<?php

/**
 * @file
 * Drupal side Vanilla Forum configuration.
 */

/**
 * Implements hook_menu().
 */
function vanilla_forum_menu() {
  $items = array();
  // Menu callback for jsConnect integration.
  $items['vanilla-forum/jsconnect'] = array(
    'title' => 'JSConnect connection path',
    'description' => 'Sends user account info to Vanilla via jsConnect.',
    'page callback' => 'vanilla_forum_jsconnect_user_data',
    'access callback' => TRUE,
    'type' =>  MENU_CALLBACK,
  );
  // Vanilla Forum integration config page.
  $items['admin/config/vanilla_forum'] = array(
    'title' => 'Vanilla Forum Integration',
    'description' => 'Vanilla Forum integration settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vanilla_forum_configuration_form'),
    'access arguments' => array('administer vanilla forum integration'),
    'file' => 'includes/vanilla_forum.admin.inc',
  );
  // Menu callback for Logout sync.
  $items['log/out'] = array(
    'page callback' => 'vanilla_forum_user_log_out',
    'access callback' => TRUE,
    'access arguments' => TRUE,
    'type' => MENU_CALLBACK,
  );
  // Menu callback for Login sync.
  $items['log/in'] = array(
    'page callback' => 'vanilla_forum_user_log_in',
    'access callback' => TRUE,
    'access arguments' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function vanilla_forum_permission() {
  return array(
    'administer vanilla forum integration' => array(
      'title' => t('Administer Vanilla Forum integration'),
      'description' => t('Perform administration tasks for the Vanilla Forum module.'),
    ),
  );
}

/**
 * Menu callback that logs users out of Drupal on the Vanilla side.
 */
function vanilla_forum_user_log_out() {
  global $user;
  watchdog('user', 'Session closed for %name.', array('%name' => $user->name));

  // Destroy the current session.
  session_destroy();

  // Load the anonymous user.
  $user = drupal_anonymous_user();

  // Direct users back to the appropriate page depending on forum privacy
  // settings (Site front page if the forum is private, forum front
  // page if it's not).
  $privacy_settings = variable_get('vanilla_forum_privacy_settings', 0);
  if ($privacy_settings) {
    // Site front page.
    global $base_url;
    drupal_goto($base_url);
  }
  else {
    // Forum front page.
    $forum_url = vanilla_forum_url('logout');
    drupal_add_js('jQuery(document).ready(function () { window.location = "' . $forum_url . '";})', 'inline');
    $build = t('Logging Out...');
    return $build;
  }
}

/**
 * Menu callback that logs users into Drupal from Vanilla for login/reg.
 */
function vanilla_forum_user_log_in() {
  $forum_url = vanilla_forum_url('login');
  drupal_add_js('jQuery(document).ready(function () { window.location = "' . $forum_url . '";})', 'inline');
  $build = t('Logging In...');
  return $build;
}

/**
 * Implements hook_user_logout().
 */
function vanilla_forum_user_logout($account) {
  // Grab the Main and Volatile Vanilla cookie IDs from the variable table.
  $vanilla_main_id = variable_get('vanilla_forum_main_cookie_id', '');
  $vanilla_volatile_id = variable_get('vanilla_forum_volatile_cookie_id', '');

  // When a user logouts of Drupal, delete the VanillaForum cookies to
  // simultaneously log the user out of VanillaForum.
  global $cookie_domain;
  // Remove subdomains so we are left with just the base cookie domain.
  $site_cookie_domain = preg_replace("/^(.*\.)?([^.]*\..*)$/", "$2", $cookie_domain);

  setcookie($vanilla_main_id, ' ', REQUEST_TIME-3600, '/', $site_cookie_domain);
  setcookie($vanilla_volatile_id, ' ', REQUEST_TIME-3600, '/', $site_cookie_domain);
  unset($_COOKIE[$vanilla_main_id]);
  unset($_COOKIE[$vanilla_volatile_id]);

  // Direct user back to the forum page after logout.
  $forum_url_arg = explode('/', request_uri());
  if (in_array('vanilla-forum', $forum_url_arg) || (isset($forum_url_arg[4]) && substr($forum_url_arg[4], 0, 8) == 'vanilla-forum')) {
    $_REQUEST['destination'] = '';
    $_REQUEST['edit']['destination'] = '';
    $_SERVER['QUERY_STRING'] = '';
    $_SERVER['HTTP_REFERER'] = '';
    drupal_goto('log/out');
  }
}

/**
 * Implements hook_user_login().
 */
function vanilla_forum_user_login(&$edit, $account) {
  // Direct user back to the forum page after login.
  $forum_url_arg = explode('/', request_uri());
  if (in_array('vanilla-forum', $forum_url_arg)) {
    $_REQUEST['destination'] = '';
    $_REQUEST['edit']['destination'] = '';
    $_SERVER['QUERY_STRING'] = '';
    $_SERVER['HTTP_REFERER'] = '';
    drupal_goto('log/in');
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for user_register_form().
 */
function vanilla_forum_form_user_register_form_alter(&$form, &$form_state, $form_id) {
  // Add an additional submit handler to the user registration form that
  // redirects users back to Vanilla after registration.
  $form['#submit'][] = 'vanilla_forum_user_register_vanilla_submit';
}

/**
 * Additional submit handler for form_user_register().
 */
function vanilla_forum_user_register_vanilla_submit($form, &$form_state) {
  // Direct user back to the forum page after registration.
  $forum_url_arg = explode('/', request_uri());
  if (in_array('vanilla-forum', $forum_url_arg)) {
    $_REQUEST['destination'] = '';
    $_REQUEST['edit']['destination'] = '';
    $_GET['destination'] = '';
    $_SERVER['QUERY_STRING'] = '';
    $_SERVER['HTTP_REFERER'] = '';
    drupal_goto('log/in');
  }
}

/**
 * Implements hook_init().
 */
function vanilla_forum_init() {
  // Add the vanilla_forum.js file.
  drupal_add_js(drupal_get_path('module', 'vanilla_forum') . '/js/vanilla_forum.js');
}

/**
 * Helper function that returns the site forum URL.
 */
function vanilla_forum_url($op) {
  // Grab the Forum URL value from the Admin Settings page.
  $forum_domain = variable_get('vanilla_forum_url', '');

  // If the URL contains "www", remove it.
  $stripped_forum_url = str_replace('www.', '', $forum_domain);

  // Set login/logout URL.
  switch ($op) {
    // Register uses the same URL as login, so we let it fall-through here.
    case 'register':
    case 'login':
      $forum_url = $stripped_forum_url . '/sso';
      break;

    case 'logout':
      $forum_url = $stripped_forum_url;
      break;
  }
  return $forum_url;
}

/**
 * Callback function that sends user data over to Vanilla via jsConnect.
 */
function vanilla_forum_jsconnect_user_data() {
  global $user;
  $signed_in = (isset($user->uid) && ($user->uid > 0)) ? TRUE : FALSE;
  $client_id = variable_get('vanilla_forum_client_id', '');
  $secret = variable_get('vanilla_forum_secret', '');
  $profile_image_sync = variable_get('vanilla_forum_profile_image_sync', FALSE);
  $profile_image_style = variable_get('vanilla_forum_profile_image_style', 'thumbnail');
  $account = array();
  if (isset($user->picture) &&  is_numeric($user->picture)) {
    $user->picture = file_load($user->picture);
  }
  // If a user is signed in, send their account info over to Vanilla.
  if ($signed_in) {
    $account['uniqueid'] = $user->uid;
    $account['name'] = $user->name;
    $account['email'] =  $user->mail;
    // If 'synchronize user profile images' is enabled, send over the profile
    // image image-style path.
    if ($profile_image_sync) {
      $account['photourl'] = ($user->picture && $user->picture->uri) ? image_style_url($profile_image_style, $user->picture->uri) : '';
    }
  }
  // Include the jsConnect functions.jsconnect.php file so we can access
  // jsConnect functions.
  module_load_include('php', 'vanilla_forum', 'includes/functions.jsconnect');
  $secure = TRUE;
  WriteJsConnect($account, $_GET, $client_id, $secret, $secure);
  exit();
}
