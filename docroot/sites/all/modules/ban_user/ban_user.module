<?php
/**
 * @file
 * Ban User - module main file.
 */

/**
 * Denotes the context where the user is validated for ban.
 */
define('TRYING_TO_LOG_IN', 1);
define('ALREADY_LOGGED_IN', 2);

/**
 * Implements hook_init().
 */
function ban_user_init() {
  global $user;

  if ($user->uid != 1 && !user_access('exclude from ban user')) {
    _ban_user_check_ban($user->uid, ALREADY_LOGGED_IN);
  }
}

/**
 * Check the banned status of a user.
 *
 * @param int $uid
 *   {users}.uid of the user whose ban status is to be checked
 * @param int $action
 *   - TRYING_TO_LOG_IN = the user is trying to log in now
 *   - ALREADY_LOGGED_IN = the user has already been logged in
 */
function _ban_user_check_ban($uid, $action) {
  $deadline = db_query('SELECT deadline FROM {ban_user} WHERE uid = :uid', array(':uid' => $uid))->fetchField();
  if (isset($deadline) && REQUEST_TIME < $deadline) {
    if ($action == TRYING_TO_LOG_IN) {
      $message = variable_get('ban_user_message', 'This account has been temporarily suspended. You will be able to access the site again on [ban-deadline].');
      $deadline = format_date($deadline, variable_get('ban_user_date_format', 'medium'));
      form_set_error('name', t($message, array('[ban-deadline]' => $deadline)));
    }
    else {
      user_logout();
    }
  }
}

/**
 * Implements hook_permission().
 */
function ban_user_permission() {
  return array(
    'ban user' => array(
      'title' => t('Can ban a user'),
    ),
    'exclude from ban user' => array(
      'title' => t('Cannot be banned from the site'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function ban_user_menu() {
  $items = array();

  $items['admin/config/people/ban-user'] = array(
    'title' => 'User Ban settings',
    'description' => 'Settings for the user ban functions.',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ban_user_settings_form'),
    'access arguments' => array('ban user'),
    'file' => 'ban_user.admin.inc',
  );
  $items['admin/people/ban-user'] = array(
    'title' => 'Ban User',
    'description' => 'Ban users for a limited time',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ban_user_list_form'),
    'access arguments' => array('ban user'),
    'file' => 'ban_user.user.inc',
  );

  return $items;
}

/**
 * Implements hook_form_alter().
 */
function ban_user_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'user_profile_form') {
    $uid = check_plain(arg(1));
    if (user_access('ban user') && !user_access('exclude from ban user', user_load($uid))) {
      $form['ban_user'] = array(
        '#type' => 'fieldset',
        '#title' => t('Ban User'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
      );

      $deadline = db_query('SELECT deadline FROM {ban_user} WHERE uid = :uid', array(':uid' => $uid))->fetchField();
      $form['ban_user']['status'] = array(
        '#type' => 'item',
        '#markup' => (isset($deadline) && $deadline) ?
          t('The user has been banned until !date.', array('!date' => format_date($deadline, variable_get('ban_user_date_format', 'medium')))) :
          t('The user is not banned.'),
      );

      $minute = 60;
      $hour = 60 * $minute;
      $day = 24 * $hour;
      $week = 7 * $day;
      $month = 30 * $day;
      $sentence = array(0 => t("Don't ban user"));
      $sentence += drupal_map_assoc(array(1 * $day, 2 * $day, 3 * $day, 4 * $day, 5 * $day, 6 * $day, 1 * $week, 2 * $week, 3 * $week, 1 * $month, 2 * $month, 3 * $month), 'format_interval');
      $form['ban_user']['sentence_length'] = array(
        '#type' => 'select',
        '#title' => t('Length of the ban'),
        '#description' => t('Selecting any time length and saving this form will re-add the specified ban length from the current date, even if a ban has already been set.'),
        '#default_value' => 0,
        '#options' => $sentence,
      );
    }
  }
  elseif ($form_id == 'user_login' || $form_id == 'user_login_block') {
    $form['#validate'][0] = 'ban_user_login_validate';
  }
}

/**
 * Form validation handler for user_login_block().
 */
function ban_user_login_validate($form, &$form_state) {
  if (isset($form_state['values']['name'])) {
    user_login_name_validate($form, $form_state);
    $uid = db_query('SELECT uid FROM {users} WHERE name = :name', array(':name' => $form_state['values']['name']))->fetchField();
    if (isset($uid) && $uid != 1 && !user_access('exclude from ban user', user_load($uid))) {
      _ban_user_check_ban($uid, TRYING_TO_LOG_IN);
    }
  }
}

/**
 * Implements hook_cron().
 *
 * Removes banned users from the database when the ban has been expired.
 */
function ban_user_cron() {
  $users = db_query('SELECT uid, deadline FROM {ban_user}')->fetchAll();
  foreach ($users as $user) {
    if (REQUEST_TIME > $user->deadline) {
      db_delete('ban_user')
        ->condition('uid', $user->uid)
        ->execute();
    }
  }
}

/**
 * Implements hook_user_update().
 */
function ban_user_user_update(&$edit, $account, $category) {
  if (isset($edit['sentence_length'])) {
    if ($edit['sentence_length'] == 0) {
      db_delete('ban_user')
        ->condition('uid', $account->uid)
        ->execute();
    }
    else {
      db_merge('ban_user')
        ->key(array('uid' => $account->uid))
        ->fields(array(
          'deadline' => REQUEST_TIME + $edit['sentence_length'],
          'changed' => REQUEST_TIME,
          ))
        ->execute();
    }
  }
}

/**
 * Implements hook_user_delete().
 */
function ban_user_user_delete($account) {
  db_delete('ban_user')
    ->condition('uid', $account->uid)
    ->execute();
}

/**
 * Implements hook_block_info().
 */
function ban_user_block_info() {
  $blocks = array();

  $blocks[0] = array(
    'info' => t('Banned users'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function ban_user_block_view($delta = '') {
  $block = array();

  if (user_access('ban user')) {
    $block['subject'] = t('Banned users');

    $query = db_select('ban_user', 'b');
    $query->join('users', 'u', 'u.uid = b.uid');
    $banned = $query
      ->fields('b', array('uid', 'deadline', 'changed'))
      ->fields('u', array('name'))
      ->condition('b.deadline', REQUEST_TIME, '>')
      ->orderBy('u.name', 'ASC')
      ->range(0, 5)
      ->execute();

    $items = array();
    foreach ($banned as $user) {
      $name = l($user->name, 'user/'. $user->uid .'/edit');
      $deadline = format_date($user->deadline, variable_get('ban_user_date_format', 'medium'));
      $items[] = $name .' ('. $deadline .')';
    }

    if (count($items) > 0) {
      $block['content'][0] = array(
        '#theme' => 'item_list',
        '#items' => $items,
      );
      $block['content'][1] = array(
        '#type' => 'link',
        '#title' => t('More'),
        '#href' => check_url('admin/people/ban-user'),
        '#options' => array('title' => t('View banned users.')),
        '#prefix' => '<div class="more-link">',
        '#suffix' => '</div>',
      );
    }
    else {
      $block['content'] = t('No banned users.');
    }
  }

  return $block;
}
