<?php

/**
 * @file
 * Customizes the title of the 'View' tab for user and node display pages.
 */

/**
 * Implementation of hook_menu_alter()
 */
function tabname_tweaker_menu_alter(&$items) {
  $items['node/%node/view']['title callback'] = 'tabname_tweaker_title_callback';
  $items['node/%node/view']['title arguments'] = array(1);

  $items['node/%node/edit']['title callback'] = 'tabname_tweaker_title_callback_edit';
  $items['node/%node/edit']['title arguments'] = array(1);

  $items['user/%user/view']['title callback'] = 'tabname_tweaker_user_title_callback';
  $items['user/%user/view']['title arguments'] = array(1);
}

/**
 * Implementation of hook_menu()
 */
function tabname_tweaker_menu() {
  $items = array();
  $items['admin/structure/tabname-tweaker'] = array(
    'title' => 'Tab name tweaker',
    'description' => 'Customize the title of the View and Edit tab for node and user account pages.',
    'access arguments' => array('administer content types'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tabname_tweaker_form'),
  );
  return $items;
}

/**
 * Title callback function for the node/%node/view tab.
 */
function tabname_tweaker_title_callback($node) {
  $title = variable_get('tabname_tweaker_' . $node->type, '');
  if (empty($title)) {
    $title = variable_get('tabname_tweaker_fallback_title', '');
  }
  
  if (!empty($title)) {
    if (variable_get('tabname_tweaker_translate', FALSE)) {
      $title = t($title);
    }
    if (module_exists('token')) {
      $title = token_replace($title, array('node' => $node, 'user' => user_load($node->uid)));
    }
  }
  else {
    $title = t('View');
  }
  
  return $title;
}

/**
 * Title callback function for the user/%user/view tab.
 */
function tabname_tweaker_user_title_callback($account) {
  $title = variable_get('tabname_tweaker_usertab', '');
  
  if (!empty($title)) {
    if (variable_get('tabname_tweaker_translate', FALSE)) {
      $title = t($title);
    }
    if (module_exists('token')) {
      $title = token_replace($title, array('user' => $account));
    }
  }
  else {
    $title = t('View');
  }
  
  return $title;
}

/**
 * Title callback function for the node/%node/edit tab.
 */
function tabname_tweaker_title_callback_edit($node) {
  $title = variable_get('tabname_tweaker_edit_' . $node->type, '');

  if (empty($title)) {
    $title = variable_get('tabname_tweaker_edit_fallback_title', '');
  }
  
  if (!empty($title)) {
    if (variable_get('tabname_tweaker_translate', FALSE)) {
      $title = t($title);
    }
    if (module_exists('token')) {
      $title = token_replace($title, array('node' => $node, 'user' => user_load($node->uid)));
    }
  }
  else {
    $title = t('Edit');
  }
  
  return $title;
}

/**
 * Form builder function for the Tabname Tweaker settings page.
 */
function tabname_tweaker_form() {
  $form = array();

  $form['tabname_tweaker_usertab'] = array(
    '#title' => t('Custom user account tab title'),
    '#type' => 'textfield',
    '#description' => t('Text to use instead of "View" when displaying a user profile with multiple tabs.'),
    '#default_value' => variable_get('tabname_tweaker_usertab', NULL),
  );

  $form['tabname_tweaker_fallback_title'] = array(
    '#title' => t('Custom node view tab title'),
    '#type' => 'textfield',
    '#default_value' => variable_get('tabname_tweaker_fallback_title', ''),
    '#description' => t('Text to use instead of "View" when displaying a node with multiple tabs.'),
  );
  
  $form['tabname_tweaker_edit_fallback_title'] = array(
    '#title' => t('Custom node edit tab title'),
    '#type' => 'textfield',
    '#default_value' => variable_get('tabname_tweaker_edit_fallback_title', ''),
    '#description' => t('Text to use instead of "Edit" when displaying a node with multiple tabs.'),
  );
  
  $form['tabname_tweaker_translate'] = array(
    '#title' => 'Attempt to translate titles',
    '#type' => 'checkbox',
    '#default_value' => variable_get('tabname_tweaker_translate', FALSE),
    '#description' => t('Pass custom titles through the Drupal t() function before displaying it.'),
  );
  
  $form['node_types'] = array(
    '#title' => t('Node type overrides for the View tab'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  
  foreach(node_type_get_types() as $type => $name) {
    $name = $name->name;

    $form['node_types']['tabname_tweaker_' . $type] = array(
      '#title' => $name,
      '#type' => 'textfield',
      '#default_value' => variable_get('tabname_tweaker_' . $type, ''),
      '#description' => t('This text will be used in place of the word "View" when displaying the tabs for a %type node.', array('%type' => $name))
    );
  }

  $form['node_types_edit'] = array(
    '#title' => t('Node type overrides for the Edit tab'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  
  foreach(node_type_get_types() as $type => $name) {
    $name = $name->name;

    $form['node_types_edit']['tabname_tweaker_edit_' . $type] = array(
      '#title' => $name,
      '#type' => 'textfield',
      '#default_value' => variable_get('tabname_tweaker_edit_' . $type, ''),
      '#description' => t('This text will be used in place of the word "Edit" when displaying the tabs for a %type node.', array('%type' => $name))
    );
  }
  
  if (module_exists('token')) {
    $form['tabname_tweaker_usertab']['#description'] .= ' ' . t('You may use text replacement tokens in this field.');
    $form['tabname_tweaker_fallback_title']['#description'] .= ' ' . t('You may use text replacement tokens in this field.');
    $form['tabname_tweaker_edit_fallback_title']['#description'] .= ' ' . t('You may use text replacement tokens in this field.');
    $form['tabname_tweaker_translate']['#description'] .= ' ' . t('This option should not be used with tokens.');
    
    foreach (element_children($form['node_types']) as $key) {
      $form['node_types'][$key]['#description'] .= ' ' . t('You may use text replacement tokens in this field.');
    }
    $form['token_help'] = array(
      '#title' => t('Replacement tokens'),
      '#theme' => 'token_tree',
      '#token_types' => array('node', 'user'),
    );
  }
  
  return system_settings_form($form);
}

/**
 * Implementation of hook_form_alter()
 */
function tabname_tweaker_form_node_type_form_alter(&$form, &$form_state) {
    $node_type = $form['#node_type']->type;

    $form['tabname_tweaker'] = array(
      '#type' => 'fieldset',
      '#title' => t('Tab name settings'),
      '#collapsible' => TRUE,
      '#group' => 'additional_settings',
      '#attached' => array(
        'js' => array(drupal_get_path('module', 'tabname_tweaker') . '/content_types.js'),
      ),
    );

    $form['tabname_tweaker']['tabname_tweaker'] = array(
      '#title' => t('Custom title for the View tab'),
      '#type' => 'textfield',
      '#description' => t('Text to use instead of "View" when displaying the node View tab.'),
      '#default_value' => variable_get('tabname_tweaker_' . $node_type, NULL),
    );
    
    $form['tabname_tweaker']['tabname_tweaker_edit'] = array(
      '#title' => t('Custom title for the Edit tab'),
      '#type' => 'textfield',
      '#description' => t('Text to use instead of "Edit" when displaying the node Edit tab.'),
      '#default_value' => variable_get('tabname_tweaker_edit_' . $node_type, NULL),
    );
    
    if (module_exists('token')) {
      $form['tabname_tweaker']['tabname_tweaker']['#description'] .= ' ' . t('You may use text replacement tokens in this field.');
      $form['tabname_tweaker']['tabname_tweaker_edit']['#description'] .= ' ' . t('You may use text replacement tokens in this field.');
      $form['tabname_tweaker']['token_help'] = array(
        '#title' => t('Replacement tokens'),
        '#theme' => 'token_tree',
        '#token_types' => array('node', 'user'),
      );
    }
}
