<?php

require_once drupal_get_path('module', 'krumong') . '/krumong.namespaced.inc';

/**
 * Implements hook_menu()
 */
function krumong_menu() {
  return array(
    'krumong/ajax/%' => array(
      'delivery callback' => 'ajax_deliver',
      'page callback' => 'krumong_ajax',
      'page arguments' => array(2),
      'access arguments' => array('access devel information'),
    ),
  );
}

/**
 * Request callback for krumong/ajax/%
 */
function krumong_ajax($request_id) {
  return krumong('ajaxMessageSystem')->ajax($request_id);
}

/**
 * Implements hook_process_status_messages()
 */
function krumong_process_status_messages(&$vars) {
  // Flush queued messages.
  krumong('requestCache')->hook_process_status_messages();
  // krumong('ajaxMessageSystem')->setMessages();
}

/**
 * Get lazy-created service objects from the service cache / registry.
 *
 * @param string $key
 *   Key representing a service.
 *   Possible values can be seen in the ServiceFactory class, each get_* method
 *   is for one possible key.
 */
function krumong($key = 'mainAccessChecked') {
  static $cache;
  if (!isset($cache)) {
    if (!class_exists('Drupal\krumong\ServiceCache\ServiceFactory')) {
      // We are in early bootstrap.
      // We need a fallback class loader.
      spl_autoload_register('_krumong_autoload');
    }
    $factory = new Drupal\krumong\ServiceCache\ServiceFactory();
    $cache = new Drupal\krumong\ServiceCache\ServiceCache($factory);
  }
  return isset($key) ? $cache->$key : $cache;
}

/**
 * Autoload callback,
 * this is only registered in early bootstrap, if xautoload is not ready yet.
 */
function _krumong_autoload($class) {
  if (substr($class, 0, 15) === 'Drupal\\krumong\\') {
    $pos = strrpos($class, '\\');
    $namespace = substr($class, 0, $pos);
    $classname = substr($class, $pos + 1);
    $path = dirname(__FILE__) . '/lib/' .
      str_replace('\\', '/', $namespace) . '/' .
      str_replace('_', '/', $classname) . '.php';
    require_once $path;
  }
}
