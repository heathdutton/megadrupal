<?php

/**
 * File for the Sassy System Stream Wrapper.
**/

define("SSSW_PARTIALS_DIR", 'sass/partials');

/**
 * Implements hook_form_FORM_ID_alter()
 */
function sssw_form_system_modules_alter($form, &$form_state, $form_id) {
  array_unshift($form['#submit'], 'sssw_build_all_from_info');
}

/**
 * Implements hook_help()
 */
function sssw_help($path, $arg) {
  switch ($path) {
    case 'admin/help#sssw':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' .t('The Sassy System Stream Wrapper module (SSSW) generates a Sassy CSS (scss) partial file with functions that can be used to determine the path to module, themes, and libraries if the Libraries module is enabled based only on the name of the module, theme, or library.') . '</p>';
      $output .= '<p>' . t('By default, _sssw.scss is placed in the module, theme, or library\'s sass/partials folder. If those folders does not exist, it will create that those folders.') . '</p>';
      $output .= '<h3>' . t('Implementation') . '</h3>';
      $output .= '<p>' .t("The easiest way to implement SSSW is to include a SSSW line in your module or theme's .info file. Simply place a sssw line in your .info file and set it equal to the path you want the partial placed in, or to DEFAULT if you want to use the default path. For example, to use the default path, you would add this line to your .info file: <strong>sssw = DEFAULT</strong>. To use a custom path, you would add a line like this to your .info file: <strong>sssw = sass/partials/global</strong>.") . '</p>';
      $output .= '<p>' . t('If you would like to implement SSSW outside of a .info file, you can call sssw_generate() from anywhere you would like. See sssw.module for function documentation.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_menu()
 */
function sssw_menu() {
  $items['admin/config/development/sssw'] = array(
    'title' => 'Rebuild SSSW Files',
    'description' => 'Rebuild SSSW file',
    'access arguments' => array('rebuild sssw'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sssw_rebuild_form'),
  );
  
  return $items;
}

/**
 * Implements hook_permission()
 */
function sssw_permission() {
  return array(
    'rebuild sssw' => array(
      'title' => t('Rebuild SSSW Files'),
      'description' => t('Allows user to rebuild all SSSW files'),
    ),
  );
}

/**
 * Implements hook_cron()
 */
function sssw_cron() {
  sssw_build_all_from_info();
  watchdog('file', 'SSSW Files rebuilt', WATCHDOG_INFO);
}

/**
 * Rebuild form.
 */
function sssw_rebuild_form($form, &$form_state) {
  $form['rebuild'] = array(
    '#markup' => '<h2>This will rebuild the Sassy System Stream Wrapper files for all modules and themes that that have SSSW enabled through .info files</h2>',
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Rebuild SSSW Files'),
  );
  
  return $form;
}

function sssw_rebuild_form_submit($form, &$form_state) {
  sssw_build_all_from_info();
}

/**
 * Builds the SSSW File for each module or theme from .info implementation.
 */
function sssw_build_all_from_info() {
  $sssw_enabled = array();
  
  $theme_infos = drupal_system_listing('/^' . DRUPAL_PHP_FUNCTION_PATTERN . '\.info$/', 'themes', 'name', 0);
  $module_infos = drupal_system_listing('/^' . DRUPAL_PHP_FUNCTION_PATTERN . '\.info$/', 'modules', 'name', 0);
  
  foreach ($theme_infos as $name => $file) {
    $info = drupal_parse_info_file($file->uri);
    if (!empty($info) && isset($info['sssw'])) {
      $sssw_enabled[$name]['name'] = $name;
      $sssw_enabled[$name]['type'] = 'theme';
      if ($info['sssw'] == 'DEFAULT') {
        $sssw_enabled[$name]['path'] = SSSW_PARTIALS_DIR;
      }
      else {
        $sssw_enabled[$name]['path'] = $info['sssw'];
      }
    }
  }
  foreach ($module_infos as $name => $file) {
    $info = drupal_parse_info_file($file->uri);
    if (!empty($info) && isset($info['sssw'])) {
      $sssw_enabled[$name]['name'] = $name;
      $sssw_enabled[$name]['type'] = 'module';
      if ($info['sssw'] == 'DEFAULT') {
        $sssw_enabled[$name]['path'] = SSSW_PARTIALS_DIR;
      }
      else {
        $sssw_enabled[$name]['path'] = $info['sssw'];
      }
    }
  }
  
  foreach ($sssw_enabled as $item) {
    sssw_generate($item['type'], $item['name'], $item['path']);
  }
  
  drupal_set_message(t('SSSW files rebuilt.'));
}

/**
 * Generate Sassy System Stream Wrapper .scss file.
 * Will generate a SCSS file with functions for finding the paths of modules, themes, 
 * and libraries (if Library module is enabled)
 *
 * @param $type
 *  The type of the item (i.e. theme, theme_engine, module, profile).
 * @param $name
 * The name of the item for which the path is requested.
 * @param $path
 * The path you want the file to be stored relative to the base path of the 
 * called item. Defaults sass/partials.
 */
function sssw_generate($type, $name, $path = SSSW_PARTIALS_DIR) {
  if ($type == 'library' && !function_exists('libraries_get_path')) {
    drupal_set_message(t('The <a href="http://www.drupal.org/project/libraries" target="_blank">Libraries API</a> module must be enabled to use Sassy System Stream Wrapper with a library'), 'error');
    return;
  }
  // Get list of available themes and modules.
  $themes_all = system_rebuild_theme_data();
  $modules_all = system_rebuild_module_data();
  
  // Loop over themes and modules to only use avaiable themes/modules.
  foreach ($themes_all as &$theme) {
    if (!empty($theme->info['hidden'])) {
      continue;
    }
    $paths->themes[$theme->name] = drupal_get_path('theme', $theme->name);
  }
  
  foreach ($modules_all as &$module) {
    if (!empty($module->info['hidden'])) {
      continue;
    }
    $paths->modules[$module->name] = drupal_get_path('module', $module->name);
  }
  
  // If Libraries module is enabled, include Libraries
  if (function_exists('libraries_get_libraries')) {
    $paths->libraries = libraries_get_libraries();
  }
  
  // Pass paths into function to genreate SCSS.
  $scss = sssw_generate_scss($paths);
  
  // Get path of calling function.
  if ($type == 'library' && function_exists('libraries_get_path')) {
    $path = libraries_get_path($name);
  }
  else {
    $path = drupal_get_path($type, $name) . '/' . $path;
  }
  
  // Generate file and directory if necessiary.
  file_prepare_directory($path, FILE_CREATE_DIRECTORY);
  $file = $path . '/_sssw.scss';
  $sssw = file_unmanaged_save_data($scss, $file, FILE_EXISTS_REPLACE);
  drupal_chmod($file);
}

/**
 * Generate the SCSS styled string.
 **/
function sssw_generate_scss($paths) {
  $scss = "// Sassy System Stream Wrapper \"API\"\n";
  
  if (isset($paths->themes)) {
    $scss .= "// Array of themes and their paths.\n";
    $scss .= '$themes: ';
    foreach ($paths->themes as $name => $path) {
      $scss .= "'" . $name . "' '/" . $path . "', ";
    }
    $scss = substr($scss, 0, -2);
    $scss .= ";\n";
    $scss .= "// Function to find path of themes.\n";
    $scss .= "@function sssw-theme(\$theme_name, \$add_path: \"\") {\n  ";
    $scss .= "@each \$theme in \$themes {\n    ";
    $scss .= "@if nth(\$theme, 1) == \$theme_name {\n      ";
    $scss .= "@return nth(\$theme, 2) + \$add_path;\n    }\n  }\n  ";
    $scss .= "@debug \"No theme by name of '#{\$theme_name}' found!\";\n  @return '';\n}\n";
  }
  
  if (isset($paths->modules)) {
    $scss .= "// Array of modules and their paths.\n";
    $scss .= '$modules: ';
    foreach ($paths->modules as $name => $path) {
      $scss .= "'" . $name . "' '/" . $path . "', ";
    }
    $scss = substr($scss, 0, -2);
    $scss .= ";\n";
    $scss .= "// Function to find path of themes.\n";
    $scss .= "@function sssw-module(\$module_name, \$add_path: \"\") {\n  ";
    $scss .= "@each \$module in \$modules {\n    ";
    $scss .= "@if nth(\$module, 1) == \$module_name {\n      ";
    $scss .= "@return nth(\$module, 2) + \$add_path;\n    }\n  }\n  ";
    $scss .= "@debug \"No module by name of '#{\$module_name}' found!\";\n  @return ''\;\n}\n";
  }
  
  if (isset($paths->libraries)) {
    $scss .= "// Array of libraries and their paths.\n";
    $scss .= '$libraries: ';
    foreach ($paths->libraries as $name => $path) {
      $scss .= "'" . $name . "' '/" . $path . "', ";
    }
    $scss = substr($scss, 0, -2);
    $scss .= ";\n";
    $scss .= "// Function to find path of themes.\n";
    $scss .= "@function sssw-library(\$library_name, \$add_path: \"\") {\n  ";
    $scss .= "@each \$library in \$libraries {\n    ";
    $scss .= "@if nth(\$library, 1) == \$library_name {\n      ";
    $scss .= "@return nth(\$library, 2) + \$add_path;\n    }\n  }\n  ";
    $scss .= "@debug \"No module by name of '#{\$module_name}' found!\";\n  @return ''\;\n}\n";
  }
  
  
  return $scss;
}