<?php
/**
 * @file
 * Adds macron flattening to tokens via arguments
 */

/**
 * A function to cover other types, such as array and objects.
 *
 * This still flattens as expected.
 *
 * @param mixed $str
 *   Allows array, string, number, boolean, null
 *
 * @return mixed
 *   Same type as input
 */
function token_i18n_macrons_flatten($str, $parameters = array()) {
  // Figure out what type it is.
  $type = gettype($str);
  switch ($type) {
    case 'boolean':
    case 'integer':
    case 'double':
    case 'NULL':
    case 'unknown type':
    case 'resource':
      // None of these types can be dealt with, so just return them.
      return $str;

    case 'string':
      // Expected type, continue with flattening.
      return token_i18n_macrons_flatten_string($str, $parameters);

    case 'array':
      // If operand is an array preserve the keys and order
      // while creating a new one with the values replaced. Keys are ignored.
      $result = array();
      foreach ($str as $k => $v) {
        $result[$k] = token_i18n_macrons_flatten($v, $parameters);
      }
      return $result;

    case 'object':
      // If operand is an object preserve the keys and order
      // while creating a new one with the values replaced. Keys are ignored.
      $result = new stdClass();
      foreach ($str as $k => $v) {
        $result->$k = token_i18n_macrons_flatten($v, $parameters);
      }
      return $result;
  }
}

/**
 * Creates a dictionary and replaces all instances with the default character.
 *
 * Uses the hook_token_i18n_macrons_dictionary_options to create the dictionary.
 * Default character is extracted via the $options parameter passed to the hook.
 *
 * Extended ASCII is defined as IEC 8859 1
 *
 * @param string $str
 *   A unicode string to flatten
 * @param array $parameters
 *   The parameters passed to the token function
 *
 * @return string
 *   A string with the given options applied
 */
function token_i18n_macrons_flatten_string($str, $parameters = array()) {
  // Create the default options.
  $options = array(
    'parameters' => $parameters,
    'settings' => array(
      'default' => '',
      'ascii only' => TRUE,
      'pathauto' => TRUE,
    ),
  );
  // Create the default dictionary.
  $dictionary = array();

  // Modify directory and options with the hooks.
  drupal_alter('token_i18n_macrons_dictionary_options', $dictionary, $options);

  // Was this called through pathauto?
  if (array_key_exists('pathauto_call', $parameters) && $parameters['pathauto_call'] === TRUE) {
    // Yes? Are we handling path auto requests?
    if ($options['settings']['pathauto'] !== TRUE) {
      // No? Then return as is.
      return $str;
    }
  }

  // Make the replacements.
  $newstr = strtr($str, $dictionary);

  // Test for only returning ascii.
  if ($options['settings']['ascii only'] === TRUE) {
    // All other non-ascii, remove it.
    $asciionly = preg_replace('/[^\x{0000}-\x{007F}]/u', $options['settings']['default'], $newstr);
    return $asciionly;
  }
  else {
    // Otherwise, return it with the given characters replaced.
    return $newstr;
  }
}

/**
 * Implements hook_token_i18n_macrons_dictionary_options_alter().
 *
 * A default implementation of token_i18n_macrons_dictionary_options_alter.
 * This is based on the Māori alphabet
 */
function token_i18n_macrons_token_i18n_macrons_dictionary_options_alter(&$dictionary, &$options) {
  // A list non-ASCII of Maori letters.
  $maori = array(
    'ā' => 'a',
    'Ā' => 'A',
    'ē' => 'e',
    'Ē' => 'E',
    'ī' => 'i',
    'Ī' => 'I',
    'ō' => 'o',
    'Ō' => 'O',
    'ū' => 'u',
    'Ū' => 'U',
  );

  // Add these to the list.
  $dictionary = array_merge($dictionary, $maori);
}

/**
 * Implements hook_tokens_alter().
 */
function token_i18n_macrons_tokens_alter(&$replacements, $context) {
  // Prepare variables.
  $key = 'TI18MSafe';
  $options = $context['options'];

  // If an options says $key then flatten all replacements.
  if (array_key_exists($key, $options) && $options[$key] === TRUE) {
    // Go through each replacement and ensure it's translated.
    foreach ($replacements as $k => $v) {
      $replacements[$k] = token_i18n_macrons_flatten($v, $options);
    }
  }
}

/**
 * Implements hook_pathauto_alias_alter().
 */
function token_i18n_macrons_pathauto_alias_alter(&$alias, &$context) {
  $alias = token_i18n_macrons_flatten($alias, array(
    'pathauto_call' => TRUE,
  ));
}

/**
 * Implements hook_help().
 */
function token_i18n_macrons_help($path, $arg) {
  switch ($path) {
    case 'admin/help#token_i18n_macrons':
      $bold = create_function('$a,$b', 'return "<strong>" . t($a) . "</strong><br/>" . t($b) . "<br/>";');
      $text = $bold('About', 'A hook-alterable module for flattening unicode languages.') .
              $bold('Uses', 'Can be used with the token module to pass text through the flattener before the result is returned') .
              $bold('Other Modules', 'When used with the pathauto module, all generated URLs are flattened to remove all unicode characters');
      return theme_html_tag(array(
        'element' => array(
          '#tag' => 'p',
          '#value' => $text,
        ),
      ));
  }
}
