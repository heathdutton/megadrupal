<?php

/**
 * @file
 * Provides a flexible pagination layout.
 */

/**
 * Implements hook_theme_registry_alter().
 */
function prettypagination_theme_registry_alter(&$theme_registry) {
  $modulepath = drupal_get_path('module', 'prettypagination');
  $theme_registry['pager']['preprocess functions'] = array('prettypagination_preprocess_pager');
  $theme_registry['pager_link']['preprocess functions'] = array('prettypagination_preprocess_pager_link');
  $theme_registry['prettypagination_layout'] = array(
    'variables' => array(
      'element' => NULL,
      'pager_current' => NULL,
      'pager_max' => NULL,
      'query' => NULL,
    ),
    'type' => 'module',
    'theme path' => $modulepath,
    'path' => $modulepath,
    'function' => 'theme_prettypagination_layout',
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function prettypagination_form_system_theme_settings_alter(&$form, &$form_state) {
  // Only set prettypagination_toggle on a specific theme.
  if ($form_state['build_info']['args']) {
    $form['theme_settings']['prettypagination_toggle']  = array(
      '#type' => 'checkbox',
      '#title' => t('Enable pretty pagination function'),
      '#default_value' => theme_get_setting('prettypagination_toggle', $form_state['build_info']['args'][0]),
    );
  }
}

/**
 * Preprocess pager variables for pretty pagination.
 */
function prettypagination_preprocess_pager(&$variables) {

  if (theme_get_setting('prettypagination_toggle')) {
    $parameters = $variables['parameters'];
    $element = $variables['element'];
    global $pager_page_array, $pager_total;

    $pager_current = $pager_page_array[$element] + 1;
    $pager_max = $pager_total[$element];

    drupal_add_js(drupal_get_path('module', 'prettypagination') . '/prettypagination.js');

    $page_new = prettypagination_load_array('prettypaginationinputpage', $element, $pager_page_array);

    $page = isset($_GET['page']) ? $_GET['page'] : '';
    if ($new_page = implode(',', prettypagination_load_array($page_new[$element], $element, explode(',', $page)))) {
      $parameters['page'] = $new_page;
    }

    $query = array();
    if (count($parameters)) {
      $query = drupal_get_query_parameters($parameters, array());
    }
    if ($query_pager = pager_get_query_parameters()) {
      $query = array_merge($query, $query_pager);
    }
    $mode = 'parent';

    // Decide the location of pager and see if the pager is on a overlay window.
    if (function_exists("overlay_get_mode")) {
      if (overlay_get_mode() === 'child') {
        $query['render'] = 'overlay';
      }
    }

    $ppvariable = array(
      'element' => $element,
      'pager_current' => $pager_current,
      'pager_max' => $pager_max,
      'query' => $query,
    );

    $paginationurl = array(
      $element => array(
        'id' => $element,
        'basepath' => url($_GET['q'], array('query' => $query)),
        'pager_current' => $pager_current,
        'pager_replace_data' => theme('prettypagination_layout', $ppvariable),
      ),
    );

    drupal_add_js(array('prettypagination' => $paginationurl), 'setting');

    $variables['tags'] = array(t('«'), t('‹'), '', t('›'), t('»'));
  }

}

/**
 * Prepare array for multi-pager.
 */
function prettypagination_load_array($value, $element, $old_array) {
  $new_array = $old_array;
  // Look for empty elements.
  for ($i = 0; $i < $element; $i++) {
    if (empty($new_array[$i])) {
      // Load found empty element with 0.
      $new_array[$i] = 0;
    }
  }
  // Update the changed element.
  $new_array[$element] = $value;
  return $new_array;
}

/**
 * Assign a pager id to each page link.
 */
function prettypagination_preprocess_pager_link(&$variables) {
  $variables['attributes'] = array('id' => $variables['element']);
}

/**
 * Assembles the markup for pretty pagination.
 */
function theme_prettypagination_layout($variables) {
  $pager_max = check_plain($variables['pager_max']);
  $element = $variables['element'];
  $query = $variables['query'];
  $pager_current = check_plain($variables['pager_current']);

  $ofpagemax = t(' of @pagermax', array('@pagermax' => $pager_max));
  $output = "<li class='pager-input'><input type=hidden value='";
  $output .= $pager_current . "'><a href='";
  $output .= url($_GET['q'], array('query' => $query)) . "' id='";
  $output .= $element . "'></a>";
  $output .= "<input class='prettypaginationinput' type=text value='";
  $output .= $pager_current . "'>";
  $output .= $ofpagemax . "</li>";
  return $output;
}
