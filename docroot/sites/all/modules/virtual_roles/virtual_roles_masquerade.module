<?php

/**
 * Implements hook_boot().
 */
function virtual_roles_masquerade_boot() {
  $pid = _virtual_roles_masquerade_get_real_uid();
  if ($pid) {
    global $user;
    $result = db_query_range('SELECT * FROM {users} u WHERE u.uid = :uid', 0, 1, array(':uid' => $pid));
    foreach ($result as $account) {
      $account = drupal_unpack($account);
      $account->cache = REQUEST_TIME;
      $account->roles = array();
      $account->roles[DRUPAL_AUTHENTICATED_RID] = 'authenticated user';
      $result = db_query('SELECT r.rid, r.name FROM {role} r INNER JOIN {users_roles} ur ON ur.rid = r.rid WHERE ur.uid = :uid', array(':uid' => $account->uid));
      foreach ($result as $role) {
        $account->roles[$role->rid] = $role->name;
      }
      $account->roles = virtual_roles_get_roles($account);
      if (!empty($account->roles)) {
        $inheritable = variable_get('virtual_roles_masquerade_roles', array());
        foreach ($account->roles as $rid => $role) {
          if (empty($inheritable[$rid])) {
            unset($account->roles[$rid]);
          }
        }
      }
      $user->roles += $account->roles;
      _virtual_roles_masquerade_stored_roles($user->roles);
    }
  }
}

function _virtual_roles_masquerade_get_real_uid() {
  static $uid = NULL;
  if (is_null($uid)) {
    global $user;
    $uid = db_query("SELECT uid_from FROM {masquerade} WHERE sid = :sid AND uid_as = :uid_as", array(':sid' => session_id(), ':uid_as' => $user->uid))->fetchField();
  }
  return $uid;
}

/**
 * Implements hook_user_load().
 */
function virtual_roles_masquerade_user_load($users) {
  global $user;
  foreach ($users as $uid => $account) {
    // Only attempt to process virtual roles for the logged-in user.
    if ($user->uid == $account->uid) {
      $roles = _virtual_roles_masquerade_stored_roles();
      if (!empty($roles)) {
        $users[$uid]->roles = virtual_roles_get_roles($account);
      }
    }
  }
}

/**
 * Helper function to load the correct permissions for the logged-in user
 */
function _virtual_roles_masquerade_stored_roles($new_roles = NULL) {
  static $roles = array();
  if (!is_null($new_roles)) {
    $roles = $new_roles;
  }
  return $roles;
}

/**
 * Implements hook_menu().
 */
function virtual_roles_masquerade_menu() {
  $items = array();
  $items['admin/people/virtual_roles_masquerade'] = array(
    'title' => 'Virtual Roles Masquerade',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('virtual_roles_masquerade_settings_form'),
    'access arguments' => array('administer virtual role'),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Form for the admin/people/virtual_roles_masquerade callback
 */
function virtual_roles_masquerade_settings_form() {
  $form = array();
  $options = user_roles();
  $form['virtual_roles_masquerade_roles'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Roles that can be inherited'),
    '#description' => t('Select which roles that you want to be able to be inherited from the originally logged-in user\'s account when they are masquerading as someone else.'),
    '#default_value' => variable_get('virtual_roles_masquerade_roles', array()),
    '#options' => $options,
  );
  return system_settings_form($form);
}

