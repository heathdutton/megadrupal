<?php

/**
 * @file
 * Provides a Klarna payment method for Drupal Commerce
 */

/**
 * Implements hook_hook_info().
 */
function commerce_klarna_hook_info() {
  $hooks = array(
    'commerce_klarna_pre_article' => array(
      'group' => 'commerce_klarna',
    ),
    'commerce_klarna_pre_address' => array(
      'group' => 'commerce_klarna',
    ),
    'commerce_klarna_pre_transaction' => array(
      'group' => 'commerce_klarna',
    ),
  );

  return $hooks;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_klarna_commerce_payment_method_info() {
  $payment_methods['klarna'] = array(
    'base' => 'commerce_klarna',
    'title' => t('Klarna 14 days'),
    'short_title' => t('Klarna'),
    'display_title' => t('Klarna invoice - Pay within 14 days'),
    'description' => t('Creates an invoice using Klarna.'),
    'active' => TRUE,
    'terminal' => FALSE,
  );

  return $payment_methods;
}

/**
 * The settings form for this payment method.
 *
 * @param $settings
 *   An array of the current settings.
 * @return
 *   A renderable form array.
 */
function commerce_klarna_settings_form($settings = NULL) {
  // Normalize settings.
  $settings['estore_id'] = isset($settings['estore_id']) ? $settings['estore_id'] : '';
  $settings['secret'] = isset($settings['secret']) ? $settings['secret'] : '';
  $settings['live_mode'] = isset($settings['live_mode']) ? $settings['live_mode'] : 0;
  $settings['charge'] = isset($settings['charge']) ? $settings['charge'] : 0;

  $form['estore_id'] = array(
    '#type' => 'textfield',
    '#title' => t('E-store ID'),
    '#default_value' => $settings['estore_id'],
    '#required' => TRUE,
  );
  $form['secret'] = array(
    '#type' => 'textfield',
    '#title' => t('Shared secret'),
    '#default_value' => $settings['secret'],
    '#required' => TRUE,
  );
  $form['live_mode'] = array(
    '#type' => 'checkbox',
    '#title' => t('Live mode'),
    '#default_value' => $settings['live_mode'],
    '#description' => t("Check this box when your store has been switched to live mode."),
  );
  $form['charge'] = array(
    '#type' => 'textfield',
    '#title' => t('Invoice fee'),
    '#default_value' => $settings['charge'],
    '#description' => t("If you're charging your customers a fee when they select this payment method, you may enter the amount here. Please note, that this does not actually add a fee, it's simply used to display the amount in the invoice terms."),
    '#size' => 7,
  );

  return $form;
}

/**
 * The form that is presented to the user during the checkout.
 *
 * @param $payment_method
 *   An array of the current settings.
 * @param $pane_values
 *   The current values of the pane.
 * @param $checkout_pane
 *   The checkout pane array.
 * @param $order
 *   The order object.
 * @return
 *   A renderable form array.
 */
function commerce_klarna_submit_form($payment_method, $pane_values, $checkout_pane, $commerce_order) {
  module_load_include('inc', 'commerce_klarna');

  // Wrap everything in a fieldset, and add a link to to the terms.
  $form['klarna'] = array(
    '#type' => 'fieldset',
    '#title' => t('Invoice information'),
    '#description' => l('', '#', array('attributes' => array('id' => 'klarna-invoice-terms', 'class' => 'not-initiated'))),
  );
  // Attach the javascript and css in order to open the invoice terms.
  $form['klarna']['#attached']['js'][] = array('data' => array('commerceKlarna' => array('eStoreID' => $payment_method['settings']['estore_id'], 'charge' => $payment_method['settings']['charge'])), 'type' => 'setting');
  $form['klarna']['#attached']['js'][drupal_get_path('module', 'commerce_klarna') . '/js/commerce_klarna.js'] = array('scope' => 'footer');
  
  
  // Load the billing address.
  try {
    $order_wrapper = entity_metadata_wrapper('commerce_order', $commerce_order);
    $billing_address = $order_wrapper->commerce_customer_billing->commerce_customer_address->value();
  }
  catch (Exception $error) {
    // If we get here, it means that the billing address couldn't be loaded,
    // probably because the billing address isn't available through the checkout
    // process. We'll create an empty billing address array that will be used
    // through the form building process.
    $billing_address = array(
      'country' => '',
      'locality' => '',
      'postal_code' => '',
      'thoroughfare' => '',
      'organisation_name' => '',
      'name_line' => '',
      'first_name' => '',
      'last_name' => '',
    );
  }

  // If the first name or last name field is empty, split the full name field
  // into two parts.
  if ((empty($billing_address['first_name']) || empty($billing_address['first_name'])) && !empty($billing_address['name_line'])) {
    $name_parts = explode(' ', $billing_address['name_line']);
    $billing_address['first_name'] = array_shift($name_parts);
    $billing_address['last_name'] = implode(' ', $name_parts);
  }

  // Set the country code.
  switch ($billing_address['country']) {
    case '':
      $country = '';
      break;
      
    case 'SE':
      $country = KlarnaCountry::SE;
      break;
    
    default:
      // This means that the country isn't supported, notify the customer.
      $form['klarna']['#description'] = t("Klarna isn't available for your country, please select another payment method.");
      return $form;
  }

  // Fields that are available when creating a Klarna address. The ones that
  // are required but doesn't have a value will be displayed to the users, the
  // other ones will be hidden.
  if ($billing_address['first_name'] != '' && $billing_address['last_name'] != '') {
    $form['klarna']['fname'] = array(
      '#type' => 'value',
      '#value' => $billing_address['first_name'],
    );
    $form['klarna']['lname'] = array(
      '#type' => 'value',
      '#value' => $billing_address['last_name'],
    );
  }
  else {
    $form['klarna']['fname'] = array(
      '#type' => 'textfield',
      '#title' => t('First name'),
      '#default_value' => $billing_address['first_name'],
      '#required' => TRUE,
    );
    $form['klarna']['lname'] = array(
      '#type' => 'textfield',
      '#title' => t('Last name'),
      '#default_value' => $billing_address['last_name'],
      '#required' => TRUE,
    );
  }
  
  $form['klarna']['company'] = array(
    '#type' => 'value',
    '#value' => $billing_address['organisation_name'],
  );
  
  if ($billing_address['thoroughfare'] != '' && $billing_address['postal_code'] != '' && $billing_address['locality'] != '') {
    $form['klarna']['street'] = array(
      '#type' => 'value',
      '#value' => $billing_address['thoroughfare'],
    );
    $form['klarna']['zip'] = array(
      '#type' => 'value',
      '#value' => $billing_address['postal_code'],
    );
    $form['klarna']['city'] = array(
      '#type' => 'value',
      '#value' => $billing_address['locality'],
    );
  }
  else {
    $form['klarna']['street'] = array(
      '#type' => 'textfield',
      '#title' => t('Address'),
      '#default_value' => $billing_address['thoroughfare'],
      '#required' => TRUE,
    );
    $form['klarna']['zip'] = array(
      '#type' => 'textfield',
      '#title' => t('Postal code'),
      '#default_value' => $billing_address['postal_code'],
      '#required' => TRUE,
    );
    $form['klarna']['city'] = array(
      '#type' => 'textfield',
      '#title' => t('City'),
      '#default_value' => $billing_address['locality'],
      '#required' => TRUE,
    );
  }
  
  if ($country != '') {
    $form['klarna']['country'] = array(
      '#type' => 'value',
      '#value' => $country,
    );
  }
  else {
    $form['klarna']['country'] = array(
      '#type' => 'select',
      '#title' => t('Country'),
      '#options' => array(
        KlarnaCountry::SE => t('Sweden'),
      ),
      '#default_value' => KlarnaCountry::SE,
      '#required' => TRUE,
    );
  }
  
  
  if ($order_wrapper->mail->value() != '') {
    $form['klarna']['email'] = array(
      '#type' => 'value',
      '#value' => $order_wrapper->mail->value(),
    );
  }
  else {
    $form['klarna']['email'] = array(
      '#type' => 'textfield',
      '#title' => t('E-mail address'),
      '#default_value' => $order_wrapper->mail->value(),
      '#required' => TRUE,
    );
  }
  $form['klarna']['phone_numbers']['telno'] = array(
    '#type' => 'textfield',
    '#title' => t('Phone number'),
  );
  $form['klarna']['phone_numbers']['cellno'] = array(
    '#type' => 'textfield',
    '#title' => t('Cell phone number'),
  );
  
  // Fields that are required to initiate a transaction to Klarna.
  $form['klarna']['social_security'] = array(
    '#type' => 'textfield',
    '#title' => t('Social security number'),
    '#required' => TRUE,
  );

  return $form;
}

/**
 * Validate the checkout form.
 *
 * @param $payment_method
 *   An array of the current settings.
 * @param $pane_form
 *   The pane form.
 * @param $pane_values
 *   The current values of the pane.
 * @param $order
 *   The order object.
 * @param $form_parents
 *   The identifier of the base element of the payment pane.
 */
function commerce_klarna_submit_form_validate($payment_method, $pane_form, $pane_values, $commerce_order, $form_parents = array()) {
  module_load_include('inc', 'commerce_klarna');
  $success = TRUE;

  // Validate the e-mail address.
  if (!preg_match('/^.+@.+\\..+$/ui', $pane_values['klarna']['email'])) {
    form_set_error(implode('][', array_merge($form_parents, array('klarna', 'email'))), t('Please enter a valid e-mail address.'));
    $success = FALSE;
  }

  // Klarna hasn't specified what is considered a valid phone number, so we will
  // simply check that at least one phone number is entered, and that it is of a
  // reasonable length.
  if (empty($pane_values['klarna']['phone_numbers']['telno']) && empty($pane_values['klarna']['phone_numbers']['cellno'])) {
    form_set_error(implode('][', array_merge($form_parents, array('klarna', 'phone_numbers'))), t('Please enter at least one phone number.'));
    $success = FALSE;
  }

  // Validate the postal code.
  if (!preg_match('/^\\d{5}$/ui', str_replace(' ', '', $pane_values['klarna']['zip']))) {
    form_set_error(implode('][', array_merge($form_parents, array('klarna', 'zip'))), t('Please enter a valid postal code.'));
    $success = FALSE;
  }
  
  // Validate the country.
  if ($pane_values['klarna']['country'] != KlarnaCountry::SE) {
    form_set_error(implode('][', array_merge($form_parents, array('klarna', 'country'))), t("Unfortunately, Klarna isn't available for your country. Please choose another payment method."));
    $success = FALSE;
  }
  
  // Verify the social security number. This will check for different patterns,
  // according to the ones that Klarna will accept.
  if (!preg_match('/^\d{6}-\d{4}$|^\d{8}-\d{4}$|^\d{10}$|^\d{12}$/', $pane_values['klarna']['social_security'])) {
    form_set_error(implode('][', array_merge($form_parents, array('klarna', 'social_security'))), t('The social security number you have entered is not valid.'));
    $success = FALSE;
  }
  
  return $success;
}


/**
 * Submit the checkout form.
 *
 * This will process the actual communication with Klarna.
 *
 * @param $payment_method
 *   An array of the current settings.
 * @param $pane_values
 *   The current values of the pane.
 * @param $checkout_pane
 *   The checkout pane array.
 * @param $order
 *   The order object.
 * @param $charge
 *   A price structure that needs to be charged.
 *
 * @see http://integration.klarna.com/en/api/standard-integration/functions/addarticle
 * @see http://integration.klarna.com/en/api/standard-integration/functions/setaddress
 * @see http://integration.klarna.com/en/api/standard-integration/functions/addtransaction
 */
function commerce_klarna_submit_form_submit($payment_method, $pane_form, $pane_values, $commerce_order, $charge) {
  module_load_include('inc', 'commerce_klarna');

  // Notify rules before initiating the connection to Klarna.
  rules_invoke_all('commerce_klarna_pre_connect', $commerce_order);

  // Load the order metadata.
  $order_wrapper = entity_metadata_wrapper('commerce_order', $commerce_order);

  // Initiate the Klarna object using our settings.
  $klarna = commerce_klarna_init($payment_method['settings']);

  // Add line items to the invoice.
  foreach ($order_wrapper->commerce_line_items as $key => $line_item) {
    // Array to store the settings for this article.
    $article = array(
      'qty' => $line_item->quantity->value(),
      'artno' => '',
      'title' => '',
      'price' => 0,
      'vat' => 0,
      'discount' => 0,
      'flags' => 0,
    );
    
    if ($line_item->type->value() == 'coupon') {
      // Coupons shouldn't be sent to Klarna as an item. Instead, the coupon
      // percentage value should be applied to each of the products. For now,
      // there is no support for coupouns since that data isn't available in the
      // line items price data.
      // TODO: Fix this? Maybe this is up to the coupon module, since it's not
      // storing discount data as it should be (ojohansson's opinion).
      continue;
    }
    
    // Set the title and artno that we'll send to Klarna. If this is a product,
    // set the title to the title of the product, and the artno to the SKU of
    // the product. If this is any other type, set both the title and arto to
    // the name of the line item.
    $line_item_type = commerce_line_item_type_load($line_item->type->value());
    $article['artno'] = $line_item->type->value() == 'product' ? $line_item->commerce_product->value()->sku : $line_item_type['name'];
    $article['title'] = $line_item->type->value() == 'product' ? $line_item->commerce_product->value()->title : $line_item_type['name'];
  
    // Load the price data.
    $price = $line_item->commerce_unit_price->value();
    $article['price'] = $price['amount'] / 100;
    
    // If the tax module is enabled, try to get the tax rate.
    if (function_exists('commerce_tax_components')) {
      $tax = commerce_tax_components($price['data']['components']);
      $article['vat'] = count($tax) ? $tax[0]['price']['data']['tax_rate']['rate'] * 100 : 0;
    }
    
    // Add flags.
    if ($article['vat'] > 0) {
      // The price is including VAT.
      $article['flags'] += KlarnaFlags::INC_VAT;
    }
    if ($line_item->type->value() == 'shipping') {
      // This is a shipping fee.
      $article['flags'] += KlarnaFlags::IS_SHIPMENT;
    }
    
    // Let other modules alter the values before adding the article to Klarna.
    foreach (module_implements('commerce_klarna_pre_article') as $module) {
      $function = $module . '_commerce_klarna_pre_article';
      $function($order_wrapper, $line_item, $article);
    }

    // Add this line item to the Klarna object.
    try {
      $klarna->addArticle(
        (integer) $article['qty'],
        mb_convert_encoding($article['artno'], 'ISO-8859-1'),
        mb_convert_encoding($article['title'], 'ISO-8859-1'),
        (float) $article['price'],
        (float) $article['vat'],
        (float) $article['discount'],
        (integer) $article['flags']
      );
    }
    catch (Exception $error) {
      // Failed to add this article.
      form_set_error('klarna', utf8_encode($error->getMessage())); 
      return FALSE;
    }
  }

  // Build an address array with the information provided during the checkout.
  $address = array(
    'email' => $pane_values['klarna']['email'],
    'telno' => $pane_values['klarna']['phone_numbers']['telno'],
    'cellno' => $pane_values['klarna']['phone_numbers']['cellno'],
    'fname' => $pane_values['klarna']['fname'],
    'lname' => $pane_values['klarna']['lname'],
    'careof' => '',
    'street' => $pane_values['klarna']['street'],
    'zip' => str_replace(' ', '', $pane_values['klarna']['zip']),
    'city' => $pane_values['klarna']['city'],
    'country' => $pane_values['klarna']['country'],
    'house_number' => '',
    'house_extension' => '',
  );
  
  // Let other modules alter the billing address before adding it to Klarna.
  foreach (module_implements('commerce_klarna_pre_address') as $module) {
    $function = $module . '_commerce_klarna_pre_address';
    $function($order_wrapper, 'billing', $address);
  }
  
  // Add the billing address to Klarna.
  try {
    $billing_address_klarna = new KlarnaAddr(
      mb_convert_encoding($address['email'], 'ISO-8859-1'),
      mb_convert_encoding($address['telno'], 'ISO-8859-1'),
      mb_convert_encoding($address['cellno'], 'ISO-8859-1'),
      mb_convert_encoding($address['fname'], 'ISO-8859-1'),
      mb_convert_encoding($address['lname'], 'ISO-8859-1'),
      mb_convert_encoding($address['careof'], 'ISO-8859-1'),
      mb_convert_encoding($address['street'], 'ISO-8859-1'),
      (integer) $address['zip'],
      mb_convert_encoding($address['city'], 'ISO-8859-1'),
      (integer) $address['country'],
      mb_convert_encoding($address['house_number'], 'ISO-8859-1'),
      mb_convert_encoding($address['house_extension'], 'ISO-8859-1')
    );
    $klarna->setAddress(KlarnaFlags::IS_BILLING, $billing_address_klarna);
  }
  catch (Exception $error) {
    // Failed to add this address.
    form_set_error('klarna', utf8_encode($error->getMessage())); 
    return FALSE;
  }
  
  // If Commerce Shipping is available, load the shipping address.
  if (module_exists('commerce_shipping')) {
    try {
      // Try to load the shipping profile.
      $shipping_address = $order_wrapper->commerce_customer_shipping->commerce_customer_address->value();
      
      // If the first name or last name field is empty, split the full name
      // field into two parts.
      if ((empty($shipping_address['first_name']) || empty($shipping_address['first_name'])) && !empty($shipping_address['name_line'])) {
        $name_parts = explode(' ', $shipping_address['name_line']);
        $shipping_address['first_name'] = array_shift($name_parts);
        $shipping_address['last_name'] = implode(' ', $name_parts);
      }
      
      // Build an address array with the information. Some of this information
      // will be taken from the submitted form data, rather than the shipping
      // information.
      $address = array(
        'email' => $pane_values['klarna']['email'],
        'telno' => $pane_values['klarna']['phone_numbers']['telno'],
        'cellno' => $pane_values['klarna']['phone_numbers']['cellno'],
        'fname' => $shipping_address['first_name'],
        'lname' => $shipping_address['last_name'],
        'careof' => '',
        'street' => $shipping_address['thoroughfare'],
        'zip' => str_replace(' ', '', $shipping_address['postal_code']),
        'city' => $shipping_address['locality'],
        'country' => $pane_values['klarna']['country'],
        'house_number' => '',
        'house_extension' => '',
      );
      
      // Let other modules alter the shipping address before adding it to Klarna.
      foreach (module_implements('commerce_klarna_pre_address') as $module) {
        $function = $module . '_commerce_klarna_pre_address';
        $function($order_wrapper, 'shipping', $address);
      }
      
      // Add the shipping address to Klarna.
      try {
        $shipping_address_klarna = new KlarnaAddr(
          mb_convert_encoding($address['email'], 'ISO-8859-1'),
          mb_convert_encoding($address['telno'], 'ISO-8859-1'),
          mb_convert_encoding($address['cellno'], 'ISO-8859-1'),
          mb_convert_encoding($address['fname'], 'ISO-8859-1'),
          mb_convert_encoding($address['lname'], 'ISO-8859-1'),
          mb_convert_encoding($address['careof'], 'ISO-8859-1'),
          mb_convert_encoding($address['street'], 'ISO-8859-1'),
          (integer) $address['zip'],
          mb_convert_encoding($address['city'], 'ISO-8859-1'),
          (integer) $address['country'],
          mb_convert_encoding($address['house_number'], 'ISO-8859-1'),
          mb_convert_encoding($address['house_extension'], 'ISO-8859-1')
        );
        $klarna->setAddress(KlarnaFlags::IS_SHIPPING, $shipping_address_klarna);
      }
      catch (Exception $error) {
        // Failed to add this address.
        form_set_error('klarna', utf8_encode($error->getMessage())); 
        return FALSE;
      }
    }
    catch (Exception $error) {
      // If we get here, that means that the shipping profile hasn't been
      // created yet. This will happen if the Payment pane has a lower weight
      // than the Shipping information. We'll continue with the checkout so that
      // the customer won't get interrupted. But we will log this, since the
      // store admin probably wants the shipping information.
      $message[] = t('Failed to load the shipping information for order number @order_id', array('@order_id' => $order_wrapper->order_id->value()));
      $message[] = t('Perhaps the Payment checkout pane has been placed before the Shipping information pane? Please visit !link and verify that Payment is located after Shipping information.', array('!link' => l('admin/commerce/config/checkout', 'admin/commerce/config/checkout')));
      $message[] = t('Error message: %message', array('%message' => $error->getMessage()));
      watchdog('commerce_klarna', implode('<br /><br />', $message), NULL, WATCHDOG_WARNING);
    }
  }

  // Create the settings array that we will use when sending the transaction.
  $settings = array(
    'pno' => $pane_values['klarna']['social_security'],
    'gender' => NULL,
    'flags' => $payment_method['settings']['live_mode'] ? KlarnaFlags::NO_FLAG : KlarnaFlags::TEST_MODE,
    'pclass' => KlarnaPClass::INVOICE,
    'encoding' => KlarnaEncoding::PNO_SE,
    'clear' => TRUE,
  );
  
  // Let other modules alter the Klarna object and settings before sending the
  // transaction.
  foreach (module_implements('commerce_klarna_pre_transaction') as $module) {
    $function = $module . '_commerce_klarna_pre_transaction';
    $function($order_wrapper, $klarna, $settings);
  }

  // Update the $charge array, to match the order total field. We'll do this
  // here, incase the order total has been modified by other modules
  // implementing any of the provided hooks.
  $charge = $order_wrapper->commerce_order_total->value();

  // Initiate the transaction object.
  $transaction = commerce_payment_transaction_new('klarna', $commerce_order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];

  // Initiate the transaction.
  try {
    // Send the Commerce Order ID to Klarna.
    $klarna->setEstoreInfo($order_wrapper->order_id->value());

    $result = $klarna->addTransaction(
      mb_convert_encoding($settings['pno'], 'ISO-8859-1'),
      (integer) $settings['gender'],
      (integer) $settings['flags'],
      (integer) $settings['pclass'],
      (integer) $settings['encoding'],
      (boolean) $settings['clear']
    );
    $remote_id = $result[0];
    $remote_status = $result[1];

    if ($remote_status == KlarnaFlags::DENIED) {
      // The customer got denied, notify the customer, and create the transaction.
      $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
      $transaction->remote_status = t('Denied');
      $transaction->message = t('The transaction got denied.');
      form_set_error('klarna', t('The transaction was denied by Klarna. Please try again, or contact Klarna if the problem persists.')); 
      return FALSE;
    }

    // The transaction was fine, save it.
    $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
    $transaction->remote_id = $remote_id;
    switch ($remote_status) {
      case KlarnaFlags::ACCEPTED:
        $transaction->remote_status = t('OK');
        break;
      case KlarnaFlags::PENDING:
        $transaction->remote_status = t('Pending');
        break;
    }
    $transaction->message = t('The transaction completed successfully.');
    commerce_payment_transaction_save($transaction);
  }
  catch (Exception $error) {
    // The transaction failed.
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
    $message[] = t('The transaction failed failed during checkout. The user got notified about the error.');
    $message[] = t('Error code: %code', array('%code' => $error->getCode()));
    $message[] = t('Message: %message', array('%message' => utf8_encode($error->getMessage())));
    $transaction->message = implode('<br />', $message);
    commerce_payment_transaction_save($transaction);
     
    // Print the error to the user, and return false.
    form_set_error('klarna', utf8_encode($error->getMessage())); 
    return FALSE;
  }
}
