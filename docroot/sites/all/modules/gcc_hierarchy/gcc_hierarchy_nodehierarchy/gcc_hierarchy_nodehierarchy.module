<?php

define('GCC_HIERARCHY_NODEHIERARCHY_PREFIX', 'nodehierarchy subgroup ');

/**
 * Implements hook_gcc_permission().
 */
function gcc_hierarchy_nodehierarchy_gcc_permission() {
  $permissions = array();

  foreach (array_merge(gcc_gcc_permission(), gcc_node_access_gcc_permission()) as $perm => $info) {
    $info['group'] = $info['group'] . ' (' . t('in node hierarchy subgroup') . ')';
    $permissions[GCC_HIERARCHY_NODEHIERARCHY_PREFIX . $perm] = $info;
  }

  return $permissions;
}

/**
 * Implements gcc_user_access_alter().
 */
function gcc_hierarchy_nodehierarchy_gcc_user_access_alter(&$perm, $context) {
  if (strpos($context['permission'], GCC_HIERARCHY_NODEHIERARCHY_PREFIX) === 0) {
    // Prevent recursion.
    return;
  }
  if ($context['entity_type'] !== 'node') {
    return;
  }

  $entity_type = 'node';
  $uid = $context['uid'];

  // Check permissions for all supergroups.
  foreach (gcc_hierarchy_nodehierarchy_get_supergroups($context['entity_id']) as $entity_id) {
    $membership = gcc_membership_load($entity_type, $entity_id, $uid);
    if (($membership && $membership->state != GCC_BLOCKED) || $membership === FALSE) {
      $group_permissions = array();
      $roles = gcc_membership_get_roles($entity_type, $entity_id, $uid);
      foreach (array_keys($roles) as $rid) {
        $group_permissions += array_filter(gcc_permission_get_list_by_role($rid, $entity_type, $entity_id));
      }

      foreach ($group_permissions as $permission_name => $permission) {
        // Check permission value just in case.
        if (($permission) && (strpos($permission_name, GCC_HIERARCHY_NODEHIERARCHY_PREFIX) === 0)) {
          $perm[substr($permission_name, strlen(GCC_HIERARCHY_NODEHIERARCHY_PREFIX))] = TRUE;
        }
      }
    }
  }
}

/**
 * Implements gcc_permission_membership_alter().
 */
function gcc_hierarchy_nodehierarchy_gcc_permission_membership_alter(&$groups, $context) {
  if (strpos($context['permission'], GCC_HIERARCHY_NODEHIERARCHY_PREFIX) === 0) {
    // Prevent recursion.
    return;
  }

  $top_groups = gcc_membership_get_by_permission($context['uid'], GCC_HIERARCHY_NODEHIERARCHY_PREFIX . $context['permission'], $context['include_owner'],
    $context['include_non_member'], $context['include_global_permission']);

  foreach ($top_groups as $group) {
    if ($group->entity_type === 'node') {
      foreach (gcc_hierarchy_nodehierarchy_get_subgroups($group->entity_id) as $key => $nid) {
        if (!isset($groups[$key])) {
          $groups[$key] = (object) array('entity_type' => 'node', 'entity_id' => $nid);
        }
      }
    }
  }
}

/**
 * Returns identifiers of nodes which are GCC groups.
 * @param array $nids
 *   Node identifiers to filter.
 */
function gcc_hierarchy_nodehierarchy_filter_groups($nids) {
  if (empty($nids)) {
    return $nids;
  }

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node');
  $query->propertyCondition('nid', $nids);
  $query->fieldCondition(GCC_FIELD_ENABLE, 'value', 1);
  $query->addTag('DANGEROUS_ACCESS_CHECK_OPT_OUT');
  $result = $query->execute();

  return (!empty($result['node'])) ? array_keys($result['node']) : array();
}

/**
 * Returns node ancestors using recursion.
 */
function gcc_hierarchy_nodehierarchy_get_ancestors($nid) {
  $ancestors = array();
  foreach (nodehierarchy_get_node_parent_nids($nid) as $parent_nid) {
    $ancestors = array_merge($ancestors, gcc_hierarchy_nodehierarchy_get_ancestors($parent_nid), array($parent_nid));
  }

  return $ancestors;
}

/**
 * Returns supergroups (ancestors) of the group.
 * @param $group_nid
 *   Node identifier of the group.
 */
function gcc_hierarchy_nodehierarchy_get_supergroups($group_nid) {
  $nid = intval($group_nid);
  $supergroups = array();

  foreach (gcc_hierarchy_nodehierarchy_filter_groups(gcc_hierarchy_nodehierarchy_get_ancestors($nid)) as $supergroup_nid) {
    $supergroup_nid = intval($supergroup_nid);
    if ($supergroup_nid !== $nid) {
      $supergroups['node:' . $supergroup_nid] = $supergroup_nid;
    }
  }

  return $supergroups;
}

/**
 * Returns node descendants using recursion (for Node Hierarchy 7.x-2.x).
 */
function gcc_hierarchy_nodehierarchy_get_descendants_2($nid, $parent_chain) {
  $parent_chain[$nid] = $nid;
  $descendants = array();

  foreach (_nodehierarchy_get_children_menu_links($nid) as $child_item) {
    $child_nid = $child_item['nid'];
    if (empty($parent_chain[$child_nid])) {
      $descendants = array_merge($descendants, array($child_nid), gcc_hierarchy_nodehierarchy_get_descendants_2($child_nid, $parent_chain));
    }
  }

  return $descendants;
}

/**
 * Returns node descendants using recursion (for Node Hierarchy 7.x-4.x).
 */
function gcc_hierarchy_nodehierarchy_get_descendants_4($nid, $parent_chain) {
  $parent_chain[$nid] = $nid;
  $descendants = array();

  foreach (nodehierarchy_get_node_children($nid) as $child_item) {
    $child_nid = $child_item->cnid;
    if (empty($parent_chain[$child_nid])) {
      $descendants = array_merge($descendants, array($child_nid), gcc_hierarchy_nodehierarchy_get_descendants_4($child_nid, $parent_chain));
    }
  }

  return $descendants;
}

/**
 * Returns subgroups (descendants) of the group.
 * @param $group_nid
 *   Node identifier of the group.
 */
function gcc_hierarchy_nodehierarchy_get_subgroups($group_nid) {
  $children = array();
  if (function_exists('_nodehierarchy_get_children_menu_links')) {
    // Node Hierarchy 7.x-2.x.
    $children = gcc_hierarchy_nodehierarchy_get_descendants_2($group_nid, array());
  }
  elseif (function_exists('nodehierarchy_get_node_children')) {
    // Node Hierarchy 7.x-4.x.
    $children = gcc_hierarchy_nodehierarchy_get_descendants_4($group_nid, array());
  }

  $subgroups = array();
  foreach (gcc_hierarchy_nodehierarchy_filter_groups($children) as $subgroup_nid) {
    $subgroups['node:' . $subgroup_nid] = $subgroup_nid;
  }

  return $subgroups;
}
