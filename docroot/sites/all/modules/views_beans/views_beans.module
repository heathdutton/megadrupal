<?php
/**
 * @file views_beans.module
 * This module allows Views Content Panes to be used as Bean types.
 */
/**
 * Implements hook_menu().
 */
function views_beans_menu() {
  $items = array();

  $items['admin/structure/block-types/views'] = array(
    'title' => 'View Panes Bean Types',
    'type' => MENU_LOCAL_TASK,
    'weight' => -10,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('views_beans_settings'),
    'access arguments' => array('administer bean types'),
    'file' => 'views_beans.admin.inc',
  );

  return $items;
}
/**
 * Implements hook_bean_types_api_info().
 */
function views_beans_bean_types_api_info() {
  return array('api' => 4);
}

/**
 * Implements hook_bean_types().
 */
function views_beans_bean_types() {
  $categories = &drupal_static(__FUNCTION__);
  if (!isset($categories)) {
    // Getting Views information causes recursion
    // So check if static variable is set.
    $categories = array();
    $categories = _views_beans_get_categories();
  }
  if (empty($categories)) {
    return;
  }
  $plugins = array();
  foreach ($categories as $key => $category_name) {
    $plugins[$key] = array(
      'label' => $category_name,
      'handler' => array(
        'class' => 'ViewBean',
        'parent' => 'bean',
        'path' => drupal_get_path('module', 'views_beans') . '/plugins/bean',
        'file' => 'view_bean.inc',
      ),
    );
  }


  return $plugins;
}

function _views_beans_get_categories($filter_used = TRUE) {
  module_load_include('inc', 'views_content', 'plugins/content_types/views_panes');
  $displays = views_content_views_panes_content_type_content_types('views_panes');

  foreach ($displays as $display) {
    if (isset($display['category'][0])) {
      $machine_name = views_beans_human_to_machine($display['category'][0]);
      $categories[$machine_name] = $display['category'][0];
    }
  }
  if ($filter_used) {
    $used_categories = array_filter(variable_get('views_beans_bean_types', array()));
    $categories = array_intersect_key($categories, $used_categories);

  }
  return $categories;
}


/**
 * Separate out used displays
 * @return array
 */
function _views_beans_get_used_displays() {
  $used_views = array();
  module_load_include('inc', 'views_content', 'plugins/content_types/views_panes');
  $displays = views_content_views_panes_content_type_content_types('views_panes');
  $views_beans_bean_types = variable_get('views_beans_bean_types', array());
  $views_beans_bean_types = array_filter($views_beans_bean_types);
  foreach ($displays as $subtype => $content_type) {
    $bean_type = views_beans_human_to_machine($content_type['category'][0]);
    if (isset($views_beans_bean_types[$bean_type])) {
      list($view_name, $display_id) = explode('-', $subtype);
      $used_views[$view_name][] = $display_id;
    }


  }
  return $used_views;
}

/**
 * Ajax Callback for selecting View Display.
 *
 * Return fieldset for View Pane config form.
 */
function _ilr_bean_view_ajax_select_display($form, $form_state) {
  if (empty($form['view_pane'])) {
    $form['view_pane'] = array(
      '#prefix' => '<div id="view-pane-div">',
      '#suffix' => '</div>',
      '#type' => 'fieldset',
     // '#description' => '<strong>' . $this->get_subtype_description($current_subtype) . '</strong>',
    );
  }

  $form['view_pane'] += views_content_views_panes_content_type_edit_form(array(), $form_state);
  return $form['view_pane'];

}
/**
 * Helper that generates a machine name using a provided human readable name.
 *
 * @param string $human_name
 *   Human readable name.
 *
 * @return string
 *   Machine name cleaned-up of any special chars.
 */
function views_beans_human_to_machine($human_name) {
  $machine_name =  strtolower(preg_replace(array(
    '/[^a-zA-Z0-9]+/',
    '/-+/',
    '/^-+/',
    '/-+$/',
  ), array('_', '_', '', ''), $human_name));
  return substr($machine_name, 0, 32);
}