<?php

/**
 * @file
 * Drupal hooks and global API functions to manipulate Mailman mailing lists
 * via the Mailman web interface.
 */

/**
 * Subscriptions status: unsubscribe the user
 */
define('USER_MAILMAN_REGISTER_DO_UNSUBSCRIBE', -1);

/**
 * Subscriptions status: unsubscribed
 */
define('USER_MAILMAN_REGISTER_UNSUBSCRIBED', 0);

/**
 * Subscriptions status: subscribed but temporarily disabled
 */
define('USER_MAILMAN_REGISTER_SUBSCRIBED_DISABLED', 1);

/**
 * Subscriptions status: subscribed, receive digests
 */
define('USER_MAILMAN_REGISTER_SUBSCRIBED_DIGEST', 2);

/**
 * Subscriptions status: subscribed, normal delivery
 */
define('USER_MAILMAN_REGISTER_SUBSCRIBED_NORMAL', 3);


/**
 * Subscription sync status: no syncing with role/permission
 */
define('USER_MAILMAN_REGISTER_SYNC_NONE', 0);

/**
 * Subscription sync status:  subscribe and unsubscribe with role/permission
 */
define('USER_MAILMAN_REGISTER_SYNC_SUB_AND_UNSUB', 1);

/**
 * Subscription sync status: sync subscribe only with role/permission
 */
define('USER_MAILMAN_REGISTER_SYNC_SUB_ONLY', 2);

/**
 * Subscription sync status: sync unsubscribe only with role/permission
 */
define('USER_MAILMAN_REGISTER_SYNC_UNSUB_ONLY', 3);




/******************************************************************************
 * Drupal Hooks
 ******************************************************************************/

/**
 * Implements hook_help()
 */
function user_mailman_register_help($path, $arg) {
  switch ($path) {
    case 'admin/help#user_mailman_register':
      return
        '<p>' . t('This is a module for subscribing to Mailman mailing lists from within Drupal.') .
        '</p>' .
        '<p>' . t('Full documentation is available at the <a href="http://drupal.org/node/463508">Drupal handbook</a> site.') .
        '</p>' .
        '<h3>' . t('Access control') . '</h3>' .
        '<p>' . t('The "Access User Mailman Register" permission controls the general access to the subscription form page, permitting in a quick way to filter roles that can or cannot manage own subscriptions for allowed lists.') .
        '</p>' .
        '<p>' .
        t('The "can subscribe to &lt;list-name&gt;" permission controls what previously created lists are displayed to a user in the subscription form page.') .
        '</p>';
  }
}


/**
 * Implements hook_menu()
 */
function user_mailman_register_menu() {
  $items = array();

  // Admin pages

  $items['admin/structure/user_mailman_register'] = array(
    'title' => 'Mailman lists',
    'access arguments' => array('administer user_mailman_register'),
    'description' => 'Configure mailing lists',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_mailman_register_adminlist_form'),
    'file' => 'user_mailman_register.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/structure/user_mailman_register/lists'] = array(
    'title' => 'Lists',
    'access arguments' => array('administer user_mailman_register'),
    'description' => 'Configure mailing lists',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_mailman_register_adminlist_form'),
    'file' => 'user_mailman_register.admin.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/structure/user_mailman_register/settings'] = array(
    'title' => 'Settings',
    'access arguments' => array('administer user_mailman_register'),
    'description' => 'Configure mailing lists',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_mailman_register_adminsettings_form'),
    'file' => 'user_mailman_register.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/structure/user_mailman_register/add'] = array(
    'title' => 'Add mailing list',
    'access arguments' => array('administer user_mailman_register'),
    'description' => 'Add a Mailman mailing list',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_mailman_register_adminedit_form'),
    'file' => 'user_mailman_register.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/structure/user_mailman_register/edit/%'] = array(
    'title' => 'Edit mailing list',
    'access arguments' => array('administer user_mailman_register'),
    'description' => 'Edit a Mailman mailing list',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_mailman_register_adminedit_form', 4),
    'file' => 'user_mailman_register.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/structure/user_mailman_register/delete/%'] = array(
    'title' => 'Remove mailing list',
    'access arguments' => array('administer user_mailman_register'),
    'description' => 'Remove a Mailman mailing list',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_mailman_register_admindelete_form', 4),
    'file' => 'user_mailman_register.admin.inc',
    'type' => MENU_CALLBACK,
  );

  // User pages

  $items['user_mailman_register'] = array(
    'title' => 'Mailing Lists',
    'description' => 'Join a mailing list to receive or participate in its discussions via email.',
    'page callback' => 'user_mailman_register_page',
    'file' => 'user_mailman_register.pages.inc',
    'access arguments' => array('access user_mailman_register'),
    'type' => MENU_NORMAL_ITEM,
  );
  if (variable_get('user_mailman_register_ownform', 1)) {
    $items['user/%user/user_mailman_register'] = array(
      'title' => 'Mailing Lists',
      'type' => MENU_LOCAL_TASK,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('user_mailman_register_form', 1),
      'file' => 'user_mailman_register.pages.inc',
      'access callback' => '_user_mailman_register_access',
      'access arguments' => array(1),
      'weight' => 10,
    );
  }

  return $items;
}


/**
 * Implements hook_permission()
 */
function user_mailman_register_permission() {
  $permissions = array(
    'administer user_mailman_register' => array(
      'title' => t('Administer mailing lists'),
      'description' => t('Allows administrator to create mailing lists and modify user settings'),
    ),
    'access user_mailman_register' => array(
      'title' => t('Access mailing lists'),
      'description' => t('Allows user to see the Mailing Lists information tab on their user page'),
    ),
  );
  $lists = _user_mailman_register_get_lists();
  if (!empty($lists)) {
    foreach ($lists as $list) {
      $filter = '![^abcdefghijklmnopqrstuvwxyz0-9-_ ]+!s';
      $list_clean = preg_replace($filter, '-', drupal_strtolower($list['name']));
      $permissions['can subscribe to ' . $list_clean] = array(
        'title' => t('Can subscribe to @list_clean', array('@list_clean' => $list_clean)),
        'description' => t('Allows the user to subscribe to the @list_clean mailing list', array('@list_clean' => $list_clean)),
      );
    }
  }
  return $permissions;
}


/**
 * Implements hook_user_view()
 */
function user_mailman_register_user_view($account, $view_mode, $langcode) {
  global $user;
  if (user_access('administer user_mailman_register') || $user->uid == $account->uid) {
    $account->content['user_mailman_register'] = array(
      '#type' => 'user_profile_category',
      '#title' => 'Mailing Lists Subscriptions',
    );
    $lists = _user_mailman_register_get_lists();
    if (!empty($lists)) {
      foreach ($lists as $list) {
        if (!_user_mailman_register_allowed_list($list, $account)) {
          continue;
        }
        $subscription = _user_mailman_register_get_subscription($account->uid, $list['lid']);
        $value = _user_mailman_register_t_status($subscription['lstatus']);
        $account->content['user_mailman_register'][$list['lid']] = array(
          '#type' => 'user_profile_item',
          '#title' => $list['name'],
          '#markup' => $value,
          '#attributes' => array('class' => 'umr_profile_list_' . $list['lid']),
        );
      }
      if (!isset($value)) {
        $account->content['user_mailman_register']['nolists'] = array(
          '#type' => 'user_profile_item',
          '#title' => t('No mailing lists are available'),
          '#attributes' => array('class' => 'umr_profile_nolists'),
        );
      }
    }
  }
}


/**
 * Implements hook_user_insert()
 */
function user_mailman_register_user_insert(&$edit, $account, $category) {
  if (variable_get('user_mailman_register_registerform', 0)) {
    _user_mailman_register_subscribe($account, $edit);
  }
}


/**
 * Implements hook_user_delete()
 */
function user_mailman_register_user_delete($account) {
  _user_mailman_register_subscribe($account, NULL, TRUE);
  db_delete('mailman_users')
    ->condition('uid', $account->uid)
    ->execute();
}


/**
 * Implements hook_user_update()
 */
function user_mailman_register_user_update(&$edit, $account, $category) {
  // Is user mail is going to be changed?
  $mail_changed = ($account->mail != $account->original->mail);

  // Are user roles going to be changed?
  $old_roles = array_keys($account->original->roles);
  sort($old_roles);
  $str_edit_roles = implode(",", $old_roles);
  $new_roles = array_keys($account->roles);
  sort($new_roles);
  $str_account_roles = implode(",", $new_roles);
  $roles_changed = ($str_edit_roles != $str_account_roles);

  if ($mail_changed || $roles_changed) {
    $lists = _user_mailman_register_get_lists();
    if (!empty($lists)) {
      foreach ($lists as $list) {
        $allow_new_role = _user_mailman_register_allowed_list($list, $new_roles);
        $allow_cur_role = _user_mailman_register_allowed_list($list, $account->original);
        $unsubscribe_cur_status = FALSE;
        $subscribe_new_status = FALSE;
        if ((!$mail_changed && !$list['role_sync']) || ($mail_changed && !$roles_changed && !$allow_cur_role)) {
          // Do nothing when mail is not changed and role has not to be checked,
          // or when mail is changed but current role is not allowed to
          // subscribe the list by role sync.
          continue;
        }
        $subscription = _user_mailman_register_get_remote_status($account->original, $list);

        $user_status = array(
          'lmod' => $subscription['lmod'],
          'old_status' => $subscription['lstatus'],
        );
        if ($subscription['lstatus'] > USER_MAILMAN_REGISTER_UNSUBSCRIBED) {
          // User is currently subscribed. Prepare to change the user email subscription.
          if ($mail_changed) {
            $unsubscribe_cur_status = TRUE;
            $subscribe_new_status = $subscription['lstatus'];
          }
          // Check role permissions.
          if ($list['role_sync'] == USER_MAILMAN_REGISTER_SYNC_SUB_AND_UNSUB || $list['role_sync'] == USER_MAILMAN_REGISTER_SYNC_UNSUB_ONLY) {
            // The role does not allow subscription.
            if (($roles_changed && !$allow_new_role) || (!$roles_changed && !$allow_cur_role)) {
              // Unsubscribe user (and undo previous setting) when role doesn't allow to subscribe.
              $unsubscribe_cur_status = TRUE;
              $subscribe_new_status = FALSE;
            }
          }
        }
        else {
          // User is not currently  subscribed to this list.
          // Check role permissions.
          if ($list['role_sync'] == USER_MAILMAN_REGISTER_SYNC_SUB_AND_UNSUB || $list['role_sync'] == USER_MAILMAN_REGISTER_SYNC_SUB_ONLY) {
            // The user role allows subscription.
            if (($roles_changed && $allow_new_role) || (!$roles_changed && $allow_cur_role)) {
              $subscribe_new_status = USER_MAILMAN_REGISTER_SUBSCRIBED_NORMAL;
            }
          }
        }
        // Send the unsubscription command using the old email address
        if ($unsubscribe_cur_status) {
          $user_status['new_status'] = USER_MAILMAN_REGISTER_DO_UNSUBSCRIBE;
          _user_mailman_register_update_remote($account, $list, $user_status, $account->original->mail, NULL);
        }
        if ($subscribe_new_status) {
          $user_status['old_status'] = USER_MAILMAN_REGISTER_UNSUBSCRIBED;
          $user_status['new_status'] = $subscribe_new_status;
          // Supposing that new email is not subscribed. To improve retrieving first the new email subscription status
          $user_mail = $mail_changed ? $account->mail : $account->original->mail;
          _user_mailman_register_update_remote($account, $list, $user_status, $user_mail, $edit);
        }
      }
    }
  }
  elseif ($category == 'account' && !variable_get('user_mailman_register_ownform', 1)) {
      _user_mailman_register_subscribe($account, $edit);
  }
}


/**
 * Implements hook_mail()
 */
function user_mailman_register_mail($key, &$message, $params) {
  $message['subject'] = $params['subject'];
  $message['body'][] = $params['body'];
}


/**
 * Implements hook_form_FORM_ID_alter() for user_register_form().
 *
 * Add our own subform, validation and submit function to user registration.
 */
function user_mailman_register_form_user_register_form_alter(&$form, &$form_state, $form_id) {
  if (variable_get('user_mailman_register_registerform', FALSE)) {
    form_load_include($form_state, 'inc', 'user_mailman_register', 'user_mailman_register.pages');
    $form = user_mailman_register_form($form, $form_state, NULL, FALSE);
    $form['user_mailman_register']['#weight'] = $form['account']['#weight'] + 0.5;
    $form['#validate'][] = 'user_mailman_register_form_validate';
    $form['#submit'][] = 'user_mailman_register_form_submit';
  }
}


/**
 * Implements hook_form_FORM_ID_alter() for user_profile_form().
 *
 * Add our own subform, validation and submit function to account edit page.
 */
function user_mailman_register_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  if (!variable_get('user_mailman_register_ownform', FALSE) && isset($form['account']) && _user_mailman_register_access($user)) {
    form_load_include($form_state, 'inc', 'user_mailman_register', 'user_mailman_register.pages');
    // Note: the account we're editing isn't necessarily $user, get it from form
    $form = user_mailman_register_form($form, $form_state, $form['#user'], FALSE);
    $form['user_mailman_register']['#weight'] = $form['account']['#weight'] + 0.5;
    $form['#validate'][] = 'user_mailman_register_form_validate';
    $form['#submit'][] = 'user_mailman_register_form_submit';
  }
}


/**
 * Implements hook_views_api()
 */
function user_mailman_register_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'user_mailman_register') .'/views',
  );
}


/******************************************************************************
 * Support
 ******************************************************************************/

/**
 * Subscribe according to form submission parameters.
 *
 * @param $account
 *   the user account
 * @param $edit
 *   array of form values for this user from user_mailman_register_form(). Can
 *   be NULL.
 * @param $user_deleted
 *   TRUE if the user is being deleted
 * @param $new_mail
 *   email address for a user that is being created anew
 *
 * @see user_mailman_register_form()
 */
function _user_mailman_register_subscribe($account, $edit, $user_deleted = FALSE, $new_mail = FALSE) {
  if (!$new_mail) {
    $new_mail = $account->mail;
  }
  $lists = _user_mailman_register_get_lists();
  if (!empty($lists)) {
    foreach ($lists as $list) {
      $tlid = trim($list['lid']);
      // User is going to be deleted
      if ($user_deleted) {
        if (!_user_mailman_register_allowed_list($list, $account)) {
          continue;
        }
        $requested_status = USER_MAILMAN_REGISTER_DO_UNSUBSCRIBE;
      }
      else {
        $option_id = 'options' . $tlid;
        if (!isset($edit[$option_id]) || $edit[$option_id] == USER_MAILMAN_REGISTER_UNSUBSCRIBED) {
          continue;
        }
        $requested_status = $edit[$option_id];
      }
      $subscription = _user_mailman_register_get_remote_status($account, $list, $new_mail);
      // user subscription initialization
      $user_status = array(
        'old_status' => $subscription['lstatus'],
        'new_status' => $requested_status,
        'lmod' => $subscription['lmod'],
      );
      $mod_id = 'mod' . $tlid;
      if (isset($edit[$mod_id])) {
        $user_status['lmod'] = $edit[$mod_id];
      }
      // Subscribe only for new request status or for anonymous, if email is not already subscribed.
      if (($subscription['lmod'] == $user_status['lmod'] && $subscription['lstatus'] == $requested_status) || ($account->uid == 0 && $subscription['lstatus'] > USER_MAILMAN_REGISTER_UNSUBSCRIBED)) {
        if ($account->uid == 0) {
          drupal_set_message(t('%email is already subscribed to %list list.', array('%email' => $new_mail, '%list' => $list['name'])), 'error');
        }
        continue;
      }
      // Limit subscription form submissions for anonymous user and list invitations. Bypass mailman administrators.
      $isflood = (($list['user_invite'] || $account->uid == 0) && !user_access('administer user_mailman_register'));
      if ($isflood && !flood_is_allowed('user_mailman_register_list' . $list['lid'], variable_get('user_mailman_register_hourly_threshold', 1))) {
        drupal_set_message(t("You can't send more than %number subscription requests per hour. Please try again later.", array('%number' => variable_get('user_mailman_register_hourly_threshold', 1))), 'error');
        continue;
      }
      if (_user_mailman_register_update_remote($account, $list, $user_status, $new_mail, $edit) && $isflood) {
        // Log event
        flood_register_event('user_mailman_register_list' . $list['lid']);
      }
    }
  }
}


/**
 * Tell Mailman server to update a user's settings.
 *
 * @param $account
 *   the user account
 * @param $list
 *   the mailing list
 * @param $user_status
 *   desired status settings
 * @param $user_mail
 *   email address to use for new subscriptions
 * @param $edit
 *   array of form values submitted by user (see hook_user_update())
 * @param $show_msg
 *   whether to display the result of the attempt.
 *
 * @return boolean
 *   successful or not.
 */
function _user_mailman_register_update_remote($account, $list, $user_status, $user_mail, $edit, $show_msg = TRUE) {
  $msg      = '';
  $email    = urlencode($user_mail);
  $regurl   = rtrim($list['webadmin'], '/') . '/members';
  $action   = t('successfully completed for');
  $mailname = _user_mailman_register_email_name($account, $edit);
  switch ($user_status['new_status']) {
    // Unsubscribe
    case USER_MAILMAN_REGISTER_DO_UNSUBSCRIBE:
      $regurl .= '/remove?send_unsub_ack_to_this_batch=' . $list['user_notify'];
      $regurl .= '&send_unsub_notifications_to_list_owner=' . $list['user_admin_notify'];
      $regurl .= '&unsubscribees_upload=' . $email;
      $msg .= t('Unsubscription from') . ' ';
      break;

    case USER_MAILMAN_REGISTER_SUBSCRIBED_NORMAL:
      // Changing from Unsubscribed status.
      if ($user_status['old_status'] == USER_MAILMAN_REGISTER_UNSUBSCRIBED) {
        // New subscription
        if (!empty($mailname)) {
          $email = urlencode($mailname . ' <' . $user_mail . '>');
        }
        $regurl .= '/add?subscribe_or_invite=' . $list['user_invite'];
        $regurl .= '&send_welcome_msg_to_this_batch=' . $list['user_notify'];
        $regurl .= '&notification_to_list_owner=' . $list['user_admin_notify'];
        $regurl .= '&subscribees_upload=' . $email;
        if ($list['user_invite']) {
          $msg .= t('Invitation to') . ' ';
          $action = t('sent to');
          //Save as unsubscribed when it's an invitation
          if ($list['user_invite']) {
            $user_status['new_status'] = USER_MAILMAN_REGISTER_UNSUBSCRIBED;
          }
        }
        else {
          $msg .= t('Subscription to') . ' ';
        }
        break;
      }
      // Changing from Nomail or Digest status
      $digest = '';
      $type = 'Normal';
    case USER_MAILMAN_REGISTER_SUBSCRIBED_DISABLED:
    case USER_MAILMAN_REGISTER_SUBSCRIBED_DIGEST:
      if ($list['version']) {
        $email = urlencode($email);
      }
      // It was not a Normal status request
      if (!isset($type)) {
        $type = 'Digest';
        $digest = '&' . $email . '_digest=1';
        $first_status = $user_status;
        $first_status['new_status'] = USER_MAILMAN_REGISTER_SUBSCRIBED_NORMAL;
        //If user is not already subscribed, subscribe him first with Normal status as required by mailman web commands.
        if ($user_status['old_status'] == USER_MAILMAN_REGISTER_UNSUBSCRIBED && !_user_mailman_register_update_remote($account, $list, $first_status, $user_mail, $edit, FALSE)) {
          return FALSE;
        }
      }
      $user_locale = user_preferred_language($account);
      $regurl .= '?user=' . $email;
      $regurl .= $digest;
      $regurl .= '&' . $email . '_nodupes=1';
      $regurl .= '&' . $email . '_realname=' . urlencode($mailname);
      $regurl .= '&' . $email . '_plain=1';
      if ($user_status['lmod']) {
        $regurl .= '&' . $email . '_mod=1';
      }
      $regurl .= '&' . $email . '_language=' . $user_locale->language;
      $regurl .= '&allmodbit_val=0&setmemberopts_btn=Submit%20Your%20Changes';
      if ($user_status['new_status'] == USER_MAILMAN_REGISTER_SUBSCRIBED_DISABLED) {
        $regurl .= '&' . $email . '_nomail=1';
        $msg .= t('Temporary no mails from') . ' ';
      }
      else {
        $msg .= t('@type subscription to', array('@type' => $type)) . ' ';
      }
      break;

    default:
      drupal_set_message(t('Unknown list subscription request.'), 'error');
      return FALSE;
  }
  $regurl .= '&adminpw=' . urlencode($list['webpass']);
  $httpreq = _user_mailman_register_parse_http($regurl, $list);
  if ($httpreq->umr_ok) {
    $user_status['reset_time'] = 1;
    $full_email = $mailname . '<' . $user_mail . '>';
    $msg .= t('%name list %action %email', array('%name' => $list['name'], '%action' => $action, '%email' => $full_email));
    // Save log
    if (_user_mailman_register_save_status($list, $user_status, $account->uid, $user_mail) && $show_msg) {
      watchdog('user mailman reg', $msg, NULL);
    }
    if ($show_msg) {
      drupal_set_message($msg);
    }
  }
  else {
    watchdog('user mailman reg', "%admmesg Http error: %error", array('%admmesg' => $httpreq->umr_admmsg, '%error' => $httpreq->error . " (" . $httpreq->code . ")"), WATCHDOG_ERROR);
    drupal_set_message($httpreq->umr_usrmsg, 'error');
    $mailonerrors = variable_get('user_mailman_register_mailonerrors', '');
    if (!empty($mailonerrors)) {
      _user_mailman_register_mail_send($account, $list, $user_status, $user_mail, $mailonerrors, $httpreq);
    }
    return FALSE;
  }
  return TRUE;
}


/**
 * Send a detailed email when subscription fails if the mailman web server is unreachable.
 */
function _user_mailman_register_mail_send($account, $list, $user_status, $user_mail, $mailonerrors, $http_request) {
  $params['subject'] = t('User Mailman Register error for !name', array('!name' => $account->name));
  $params['body']    = t("User !name failed to change his list subscription.\nThe following details could help to debug the problem.\n\nUser mail: !umail\nList name: !list\nUrl: !url\nOld subscription status: !ostatus\nRequested subscription status: !nstatus\nModule message: !admmesg\nHttp message: !error (!code)", array('!name' => $account->name, '!umail' => $user_mail, '!list' => $list['name'], '!url' => $list['webadmin'], '!ostatus' => _user_mailman_register_t_status($user_status['old_status']), '!nstatus' => _user_mailman_register_t_status($user_status['new_status']), '!admmesg' => $http_request->umr_admmsg, '!error' => $http_request->error, '!code' => $http_request->code));
  $mail_success      = drupal_mail('user_mailman_register', 'error', wordwrap($mailonerrors), language_default(), $params);
  $watchdog_params   = array('@name' => $account->name, '@to' => "<$mailonerrors>");
  if ($mail_success) {
    watchdog('user mailman reg', 'Mailman error notification for @name at @to', $watchdog_params);
  }
  else {
    watchdog('user mailman reg', 'Error mailing Mailman error notification for @name at @to', $watchdog_params, WATCHDOG_ERROR);
  }
}


/**
 * Check if a user has permission to subscribe to a specified list.
 *
 * @param $list
 *   The mailing list as either array or object
 * @param $account
 *   Any of a list of roles, a user account, or NULL for the logged-in user
 */
function _user_mailman_register_allowed_list($list, $account = NULL) {
  if (is_array($list)) {
    $list = (object) $list;
  }
  if (!$list->webadmin || !$list->webpass) {
    return FALSE;
  }
  $filter = '![^abcdefghijklmnopqrstuvwxyz0-9-_ ]+!s';
  $list_clean = preg_replace($filter, '-', drupal_strtolower($list->name));
  if (is_array($account) && !empty($account)) {
    // $account is an array of roles to check
    $list_roles = user_roles(FALSE, 'can subscribe to ' . $list_clean);
    foreach ($account as $role => $value) {
      if (isset($list_roles[$value])) {
        return TRUE;
      }
    }
    return FALSE;
  }
  else {
    // $account is a user account object (or NULL for currently logged-in user)
    return user_access('can subscribe to ' . $list_clean, $account);
  }
}


/**
 * Check if a user can access the list subscription form.
 */
function _user_mailman_register_access($account) {
  global $user;
  return $account && $account->uid &&
    (
      // Always let users view their own profile.
      ($user->uid == $account->uid && user_access('access user_mailman_register')) ||
      // Mailman administrators are allowed to change subscriptions.
      user_access('administer user_mailman_register')
    );
}


/**
 * Save last subscription list in the Mailman user table.
 *
 * @param $list
 *  mailing list as array
 * @param $user_status
 *  array describing user status, old and new
 * @param $uid
 *  user ID of the subscriber (can be anonymous)
 * @param $mail
 *  email address of the subscriber
 */
function _user_mailman_register_save_status($list, $user_status, $uid, $mail) {
  // Don't save anonymous users status
  if ($uid == 0) {
    return TRUE;
  }
  if (!isset($user_status['new_status']) || !isset($user_status['old_status'])) {
    return FALSE;
  }
  if ($user_status['new_status'] == USER_MAILMAN_REGISTER_DO_UNSUBSCRIBE) {
    $user_status['new_status'] = USER_MAILMAN_REGISTER_UNSUBSCRIBED;
  }

  // Reset the checked status time to force a new check as soon as possible.
  if (isset($user_status['reset_time']) && $user_status['reset_time']) {
    $time = 0;
  }
  else {
    $time = REQUEST_TIME;
  }
  $fields = array(
    'lmail' => $mail,
    'lstatus' => $user_status['new_status'],
    'lchecktime' => $time,
    'lmod' => $user_status['lmod'],
  );
    // UMR is not able to set or retrive a user password. Set it empty for new subscriptions.
  if ($user_status['old_status'] < USER_MAILMAN_REGISTER_SUBSCRIBED_NORMAL) {
    $fields['lpass'] = '';
  }
  $ret = db_update('mailman_users')
    ->fields($fields)
    ->condition('uid', $uid)
    ->condition('lid', $list['lid'])
    ->execute();
  return $ret;
}


/**
 * Get user subscription status from Mailman server if last checked status is old.
 *
 * @param $account
 *   user account that we're checking. Could be empty.
 * @param $list
 *   The mailing list as array
 * @param $user_mail
 *   Email of the user. Could be different from $account->mail if we're calling this
 *   for an account that has already been changed (e.g., via account update).
 *
 * @return array
 *   An associative array of subscription status information containing
 *    - uid: user id of the account
 *    - lid: list id
 *    - lstatus: subscription status (unsubscribed, subscribed, etc.)
 *    - lmail: email address of the subscription
 *    - lpass: user password for the subscription
 *    - lchecktime: timestamp of when we did the check
 *    - lmod: TRUE if user is moderated
 *    - lmessage: (sometimes) user or administrative message returned by the server on error
 * or, if there's no email address, return USER_MAILMAN_REGISTER_UNSUBSCRIBED (is this a programming error?)
 */
function _user_mailman_register_get_remote_status($account, $list, $user_mail = FALSE) {
  if (!isset($account->mail) && !$user_mail) {
    return USER_MAILMAN_REGISTER_UNSUBSCRIBED;
  }
  if (!$user_mail) {
    $user_mail = $account->mail;
  }
  $encoded_email = urlencode(preg_quote($user_mail));
  $regurl = rtrim($list['webadmin'], '/') . '/members?findmember=' . $encoded_email;
  $regurl .= "&setmemberopts_btn&adminpw=" . urlencode($list['webpass']);
  // Get stored subscription for authenticated users
  if ($account->uid > 0) {
    $subscription = _user_mailman_register_get_subscription($account->uid, $list['lid']);
  }
  else {
    $subscription['lchecktime'] = 0;
    $subscription['lstatus'] = USER_MAILMAN_REGISTER_UNSUBSCRIBED;
  }
  $interval = 60 * variable_get('user_mailman_register_checkinterval', 180);
  if ($interval >= 0 && $subscription['lchecktime'] < REQUEST_TIME - $interval) {
    if ($list['version']) {
      $str_email = urlencode($user_mail);
    }
    else {
      $str_email = $user_mail;
    }
    $str_email = preg_quote($str_email);
    $httpreq = _user_mailman_register_parse_http($regurl, $list);

    if ($httpreq->umr_ok) {
      $subscription['lmod'] = 0;
      $old_status = $subscription['lstatus'];
      $subscription['lstatus'] = USER_MAILMAN_REGISTER_UNSUBSCRIBED;
      if (preg_match('/INPUT .*name="' . $str_email . '_unsub"/i', $httpreq->data)) {
        $subscription['lstatus'] = USER_MAILMAN_REGISTER_SUBSCRIBED_NORMAL;
        if (preg_match('/INPUT .*name="' . $str_email . '_digest".* value="on"/i', $httpreq->data)) {
          $subscription['lstatus'] = USER_MAILMAN_REGISTER_SUBSCRIBED_DIGEST;
        }
        if (preg_match('/INPUT .*name="' . $str_email . '_mod".* value="on"/i', $httpreq->data)) {
          $subscription['lmod'] = 1;
        }
        if (preg_match('/INPUT .*name="' . $str_email . '_nomail".* value="on" CHECKED >(\[.*\])/i', $httpreq->data, $match)) {
          $subscription['lstatus'] = USER_MAILMAN_REGISTER_SUBSCRIBED_DISABLED;
          if ($match[1] != t("[A]")) {
            $subscription['lmessage'] = t("Delivery for %name was disabled by the system probably due to excessive bouncing from the member's address", array('%name' => $list['name']));
          }
        }
      }
      //Store only authenticated users status back into db
      if ($account->uid > 0) {
        $user_status = array(
          'old_status' => $old_status,
          'new_status' => $subscription['lstatus'],
          'lmod' => $subscription['lmod'],
        );
        $msg = t('Subscription updating from mailman server to %name list completed successfully for %email', array('%name' => $list['name'], '%email' => $user_mail));
        _user_mailman_register_save_status($list, $user_status, $account->uid, $user_mail);
        //Log only changed status
        if ($subscription['lstatus'] != $old_status) {
          watchdog('user mailman reg', $msg, NULL);
        }
      }
    }
    else {
      if (user_access('administer user_mailman_register')) {
        $subscription['lmessage'] = $httpreq->umr_admmsg;
      }
      else {
        $subscription['lmessage'] = $httpreq->umr_usrmsg;
      }
      $subscription['lmessage'] .=  ' ' . t('The displayed subscription is the last known state dated at %time.',  array('%name' => $list['name'], '%time' => format_date($subscription['lchecktime'])));
    }
  }
  return $subscription;
}


/**
 * Return the name, if any, of the user (taken from a specified profile field).
 *
 * @param $account
 *  the user
 * @param $edit
 *  the array of form values for this user from user_mailman_register_form()
 *
 * @see user_mailman_register_form()
 */
function _user_mailman_register_email_name($account, $edit) {
  $mailname = '';
  $profile_string = variable_get('user_mailman_register_profilename', '');
  $profile_array = explode(',', $profile_string);
  if (!empty($profile_string) && !empty($profile_array) && module_exists('profile')) {
    foreach ($profile_array as $name) {
      $name = trim($name);
      $item = isset($account->$name) ? $account->$name : $edit[$name];
      if ($item) {
        $mailname .= $item . ' ';
      }
    }
    $mailname = rtrim($mailname);
  }
  return $mailname;
}


/**
 * Make a call to the Mailman web interface and parse the result.
 *
 * @param $regurl
 *  the fully assembled URL
 * @param $list
 *  the name of the specific mailing list we're after
 */
function _user_mailman_register_parse_http($regurl, $list) {
  // Debugging
  // drupal_set_message($regurl);
  $httpobj = drupal_http_request($regurl);
  $httpobj->umr_ok = 1;
  $httpobj->umr_msg = "";
  if ($httpobj->code <> 200 || !preg_match('/INPUT .*name="(findmember|setmemberopts)_btn"/i', $httpobj->data)) {
    $httpobj->umr_ok = 0;
    $httpobj->umr_usrmsg = t('Sorry, %name mailing list registration is currently unavailable. Please, try again shortly.', array('%name' => $list['name']));
    if (preg_match('/<input type="password".* name="adminpw"/i', $httpobj->data)) {
      $httpobj->umr_admmsg = t('The administrator web password for !name list is invalid.', array('!name' => $list['name']));
    }
    else {
      $httpobj->umr_admmsg = t('No mailman web interface for !name list.', array('!name' => $list['name']));
    }
  }
  return $httpobj;
}


/**
 * Return a single mailing list as object.
 *
 * @param $lid
 *  the list ID
 */
function _user_mailman_register_get_list($lid) {
  $result = db_query('SELECT * FROM {mailman_lists} WHERE lid = :lid', array(':lid' => $lid));
  return $result->fetchObject();
}


/**
 * Return array of all current mailing lists.
 */
function _user_mailman_register_get_lists() {
  $lists = array();
  $result = db_query('SELECT * FROM {mailman_lists} ORDER BY name');
  foreach ($result as $obj) {
    $lists[] = (array) $obj;
  }
  return $lists;
}


/**
 * Return array of user's subscription info for specified mailing list from db.
 *
 * @param $uid
 *  id of the user.
 * @param $lid
 *  id of the list.
 */
function _user_mailman_register_get_subscription($uid, $lid) {
  $subscription = db_query('
    SELECT *
    FROM {mailman_users}
    WHERE uid = :uid
    AND lid = :lid
    ', array(':uid' => $uid, ':lid' => $lid))
    ->fetchAssoc();

  // If there are no entries for this user then create one with subscriptions
  // set to zero and return no mail button option for display
  if (empty($subscription)) {
    $record = (object) array('uid' => $uid, 'lid' => $lid, 'lstatus' => 0);
    drupal_write_record('mailman_users', $record);
    $subscription = array(
      'uid' => $uid,
      'lid' => $lid,
      'lstatus' => 0,
      'lchecktime' => 0,
      'lmod' => 0,
    );
  }

  return $subscription;
}


/**
 * Return subscription status text for a given status code.
 */
function _user_mailman_register_t_status($status) {
  $options = _user_mailman_register_subscription_options();
  if (isset($options[$status])) {
    return $options[$status];
  }
  return $options[USER_MAILMAN_REGISTER_UNSUBSCRIBED];
}


/**
 * Return keyed array of subscription options.
 */
function _user_mailman_register_subscription_options() {
  return array(
    USER_MAILMAN_REGISTER_SUBSCRIBED_DISABLED => t('No mail (temporarily disable delivery)'),
    USER_MAILMAN_REGISTER_SUBSCRIBED_DIGEST => t('Subscribe for digest (receive emails in a bundle)'),
    USER_MAILMAN_REGISTER_SUBSCRIBED_NORMAL => t('Subscribe for all mail (normal delivery)'),
    USER_MAILMAN_REGISTER_UNSUBSCRIBED => t('Unsubscribed'),
  );
}


/**
 * Return sync status text for a given status code.
 */
function _user_mailman_register_t_sync($status) {
  $options = _user_mailman_register_sync_options();
  if (isset($options[$status])) {
    return $options[$status];
  }
  return $options[USER_MAILMAN_REGISTER_SYNC_NONE];
}


/**
 * Return keyed array of sync options.
 */
function _user_mailman_register_sync_options() {
  return array(
    USER_MAILMAN_REGISTER_SYNC_NONE => t('No sync with role'),
    USER_MAILMAN_REGISTER_SYNC_SUB_AND_UNSUB => t('Subscribe and unsubscribe with role'),
    USER_MAILMAN_REGISTER_SYNC_SUB_ONLY => t('Subscribe only with role'),
    USER_MAILMAN_REGISTER_SYNC_UNSUB_ONLY => t('Unsubscribe only with role'),
  );
}

