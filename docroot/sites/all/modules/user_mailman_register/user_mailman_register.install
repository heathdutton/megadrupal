<?php

/**
 * @file
 * User Mailman Register module install hooks.
 */

/**
 * Implements hook_schema().
 */
function user_mailman_register_schema() {
  $schema['mailman_lists'] = array(
    'description' => t('Stores specific information for mailiman lists.'),
    'fields' => array(
      // Mailman Manager fields
      'lid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => t('The list id.'),
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => t('Mailing List name'),
      ),
      'command' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => t("Mailing List 'request' address"),
      ),
      'admin' => array(
        'type' => 'varchar',
        'length' => 255,
        'default' => '',
        'description' => t("Mailing List 'admin' address"),
      ),
      'web' => array(
        'type' => 'varchar',
        'length' => 255,
        'default' => '',
        'description' => t('Mailing list web address for users.'),
      ),
      'webarch' => array(
        'type' => 'varchar',
        'length' => 255,
        'default' => '',
        'description' => t('Mailing list web archive address for users'),
      ),
      // User Mailman Register fields
      'webadmin' => array(
        'type' => 'varchar',
        'length' => 255,
        'default' => '',
        'description' => t("Mailman web url"),
      ),
      'webpass' => array(
        'type' => 'varchar',
        'length' => 255,
        'default' => '',
        'description' => t("Mailman admin password"),
      ),
      'version' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
        'description' => t("Mailman version"),
      ),
      'user_invite' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
        'description' => t("Mailman 'user invite' option"),
      ),
      'user_notify' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
        'description' => t("Mailman 'user notify' option"),
      ),
      'user_admin_notify' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
        'description' => t("Mailman 'admin notify' option"),
      ),
      'allow_unsubscribe' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
        'description' => t("Allow/deny user list unsubscription"),
      ),
      'allow_temp_disable' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
        'description' => t("Allow/deny list temporary receiving disable"),
      ),
      'allow_digest' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
        'description' => t("Allow/deny list digest subscription"),
      ),
      'description' => array(
        'type' => 'text',
        'size' => 'medium',
        'not null' => TRUE,
        'description' => t("List description"),
      ),
      'defaultnewreg' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => t("Default choice in user registration form"),
      ),
      'role_sync' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
        'description' => t("Enable/disable subscription synchronization"),
      ),
    ),
    'primary key' => array('lid'),
  );

  $schema['mailman_users'] = array(
    'description' => t('Stores subscription information for users.'),
    'fields' => array(
      // Mailman Manager fields
      'uid' => array(
        'type' => 'int',
        'disp-width' => 10,
        'not null' => TRUE,
        'default' => 0,
        'description' => t('User id.'),
      ),
      'lid' => array(
        'type' => 'int',
        'disp-width' => 10,
        'not null' => TRUE,
        'default' => 0,
        'description' => t('The list id.'),
      ),
      'lstatus' => array(
        'type' => 'int',
        'disp-width' => 10,
        'not null' => TRUE,
        'default' => 0,
        'description' => t('Subscription status.'),
      ),
      'lmail' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => t('Current user subscribed email.'),
      ),
      'lpass' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => t('Current user list password.'),
      ),
      // User Mailman Register fields
      'lchecktime' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => t("Last Mailman subscription check time"),
      ),
      'lmod' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => t("Moderation flag"),
      ),
    ),
    'primary key' => array('uid', 'lid'),
  );

  return $schema;
}


/**
 * Implements hook_install().
 */
function user_mailman_register_install() {
  // Set default variables
  variable_set('user_mailman_register_required', 0);
  variable_set('user_mailman_register_registerform', 0);
  variable_set('user_mailman_register_ownform', 1);
  variable_set('user_mailman_register_profilename', '');
  variable_set('user_mailman_register_mailonerrors', '');
  variable_set('user_mailman_register_checkinterval', 180);
  variable_set('user_mailman_register_hourly_threshold', 1);
}


/**
 * Implements hook_uninstall().
 */
function user_mailman_register_uninstall() {
  // Remove variables
  variable_del('user_mailman_register_required');
  variable_del('user_mailman_register_registerform');
  variable_del('user_mailman_register_defaultnewreg');
  variable_del('user_mailman_register_ownform');
  variable_del('user_mailman_register_profilename');
  variable_del('user_mailman_register_mailonerrors');
  variable_del('user_mailman_register_checkinterval');
  variable_del('user_mailman_register_hourly_threshold');
}


/**
 * Convert mailman_manager admin permission to user_mailman_register.
 */
function user_mailman_register_update_7000(&$sandbox) {
  db_update('role_permission')
    ->fields(array(
      'permission' => 'administer user_mailman_register',
      'module' => 'user_mailman_register',
    ))
    ->condition('permission', 'administer mailman_manager')
    ->execute();
}


/**
 * Expand all varchar fields to 255 bytes.
 */
function user_mailman_register_update_7001(&$sandbox) {
  db_query("ALTER TABLE {mailman_lists} MODIFY COLUMN `name` varchar(255) NOT NULL DEFAULT '' COMMENT 'Mailing List name'");
  db_query("ALTER TABLE {mailman_lists} MODIFY COLUMN `command` varchar(255) NOT NULL DEFAULT '' COMMENT 'Mailing List \'request\' address'");
  db_query("ALTER TABLE {mailman_lists} MODIFY COLUMN `admin` varchar(255) DEFAULT '' COMMENT 'Mailing List \'admin\' address'");
  db_query("ALTER TABLE {mailman_lists} MODIFY COLUMN `web` varchar(255) DEFAULT '' COMMENT 'Mailing list web address for users.'");
  db_query("ALTER TABLE {mailman_lists} MODIFY COLUMN `webarch` varchar(255) DEFAULT '' COMMENT 'Mailing list web archive address for users'");
  db_query("ALTER TABLE {mailman_lists} MODIFY COLUMN `webadmin` varchar(255) DEFAULT '' COMMENT 'Mailman web url'");
  db_query("ALTER TABLE {mailman_lists} MODIFY COLUMN `webpass` varchar(255) DEFAULT '' COMMENT 'Mailman admin password'");
  db_query("ALTER TABLE {mailman_users} MODIFY COLUMN `lmail` varchar(255) NOT NULL DEFAULT '' COMMENT 'Current user subscribed email.'");
  db_query("ALTER TABLE {mailman_users} MODIFY COLUMN `lpass` varchar(255) NOT NULL DEFAULT '' COMMENT 'Current user list password.'");
  drupal_set_message(t('Updated varchar fields in mailman_lists and mailman_users to varchar(255).'));
}


/**
 * Conditionally add fields that may be missing from older installs.
 */
function user_mailman_register_update_7002(&$sandbox) {
  $table = 'mailman_users';
  $fields = array(
    'lchecktime' => array(
      'type' => 'int',
      'not null' => TRUE,
      'default' => 0,
      'description' => t("Last Mailman subscription check time"),
    ),
    'lmod' => array(
      'type' => 'int',
      'not null' => TRUE,
      'default' => 0,
      'description' => t("Moderation flag"),
    ),
  );
  foreach ($fields as $field => $spec) {
    // On sites installed in Drupal 7 prior to this update, the field
    // will already exist.
    if (!db_field_exists($table, $field)) {
      // Add a new field.
      db_add_field($table, $field, $spec);
    }
  }
}
