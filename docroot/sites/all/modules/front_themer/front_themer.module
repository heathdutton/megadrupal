<?php
/**
 * @file
 * Main file for front_themer module. Has the core functionality.
 *
 */

/**
 * Register Javascript-side theme implementations.
 *
 * By implementing this hook in your module, you can map Drupal themes (@see hook_theme())
 * into simple (no-logic, no-looping) Javascript implementations. The JS implementations
 * are regenerated every time theme registry is built. This means you will always have the
 * latest theme changes automatically available as JS implementations.
 *
 * You can call the theme implementations generated by front_themer simply by calling Drupal.theme()
 * in your Javascript code.
 *
 * @see front_themer_example_front_themer_theme() for an example implementation
 *
 * @return array An associative array of Drupal theme -> JS implementation mappings.
 * The keys on the outer array are the names of the Javascript implementations of
 * Drupal themes (i.e. the first parameter you will pass to Drupal.theme()).
 * Each inner array may contain the following keys:
 * 	'theme': Optional. The name of the Drupal theme being mapped.
 * 			 If not specified, the outer array key will be treated also as a theme name.
 * 	         Theme name must exist in the theme registry.
 * 	'arguments': Optional. An associative array that describes theme variables' mapping
 * 				 into Javascript variables. The outer array keys are theme variable names
 * 				 as declared in hook_theme() (you can omit any variable --
 * 				 its default value will be used in this case). Inner array keys:
 * 				 'type': Optional. Either 'placeholder' or 'value'.
 * 						 By designating an argument as a 'placeholder', you will have it
 * 						 available as a variable in the JS implementation of the theme.
 * 						 By designating the argument as a 'value', the given value will be
 * 						 fixed in the JS implementation. If omitted, 'value' is assumed.
 * 				 'value': Optional. Applies only if 'type' is set to 'value'. Contains the
 * 						  value to be passed to the corresponding theme variable. If omitted,
 * 						  the default value provided by the theme declaration will be used.
 * 				 'variable_name': Optional. Applies only if 'type' is set to 'placeholder'.
 * 								  Changes the variable name in the JS implementation (by default,
 * 								  the theme variable name is used). Normally, you will only
 * 								  need this if the theme variable name is a reserved word in
 * 								  Javascript ("class", for example).
 * 				 'sanitize': Optional. TRUE/FALSE. Applies only if 'type' is set to 'placeholder'.
 * 							 Should the JS-side variable be sanitized by Drupal.checkPlain() before
 * 							 displaying. Defaults to FALSE.
 *
 */
function hook_front_themer_theme() {

}

/**
 * Implements hook_theme_registry_alter().
 *
 * The JS implementations for themes are generated here.
 *
 */
function front_themer_theme_registry_alter(&$theme_registry) {
  static $called = FALSE;
  global $theme;

  if (!$called) {
    //Make sure we execute exactly once
    //(calling theme() in hook_theme_registry_alter() may lead to bad things otherwise)
    $called = TRUE;

    //Gather information about theme implementations that wish to be available in JS
    $themes = module_invoke_all('front_themer_theme');

    if (!is_array($themes)) {
      return;
    }

    $js = '';
    foreach ($themes as $theme_js_name => $options) {
      //If a theme name is explicitly specified, we use that. Otherwise we assume the theme name is the same as the JS name
      $theme_name = isset($options['theme']) ? $options['theme'] : $theme_js_name;
      if (!isset($theme_registry[$theme_name])) {
        //We cannot generate output for this theme since it's not defined in the theme registry
        continue;
      }

      //Prepare arguments both for JS and theme function call
      $theme_variables = array();
      $js_function_arguments = array();
      $js_variable_references = array();

      //str_replace parameter
      $search = array('"', "\n", "\r", "\r\n");

      if (isset($options['arguments']) && is_array($options['arguments'])) {
        foreach ($options['arguments'] as $variable_name => $argument) {
          if (!is_array($argument)) {
            continue;
          }

          $type = isset($argument['type']) ? $argument['type'] : 'value';

          switch ($type) {
            case 'placeholder':
              //A variable that will be present in the generated JS code
              $js_variable_name = isset($argument['variable_name']) ? $argument['variable_name'] : $variable_name;
              $js_function_arguments[] = $js_variable_name;
              $js_variable_reference = $js_variable_name;

              $sanitize = isset($argument['sanitize']) ? $argument['sanitize'] : FALSE;

              //If so requested, wrap the variable references in Drupal.checkPlain()
              if ($sanitize) {
                $js_variable_reference = "Drupal.checkPlain($js_variable_reference)";
              }

              //Add JS concatenation operators and quotes
              $js_variable_reference = '"+' . $js_variable_reference . '+"';

              $js_variable_references[] = $js_variable_reference;

              //We pass a special placeholder to the theme function
              //(and once we have the theme output, we replace that placeholder with the JS code we generated here)
              $placeholder = _front_themer_placeholder($variable_name);
              $theme_variables[$variable_name] = $placeholder;
              $search[] = $placeholder;

              break;
            case 'value':
            default:
              // A variable that will be passed to the theme implementation as-is
              if (isset($argument['value'])) {
                $theme_variables[$variable_name] = $argument['value'];
              }
              break;
          }
        }
      }

      //Get the theme function output
      $theme_output = theme($theme_name, $theme_variables);

      //Replace placeholders in the output with the corresponding JS references (and escape double quotes and remove newlines)
      $replace = array_merge(array('\"', '', '', ''), $js_variable_references);
      $theme_js = str_replace($search, $replace, $theme_output);

      //Generate the final front-end theme implementation
      $js .= "Drupal.theme.$theme_js_name = function(" . implode(', ', $js_function_arguments) . ") { return \"$theme_js\"; };\n\n";
    }

    //Write the JS theme implementations into a file
    //(each theme has its own file)
    $dir = 'public://' . variable_get('front_themer_theme_dir', 'front_themer');
    if (file_prepare_directory($dir, FILE_CREATE_DIRECTORY)) {
      $filename = "themes-$theme.js";
      file_unmanaged_save_data($js, $dir . '/' . $filename, FILE_EXISTS_REPLACE);
      $theme_files = variable_get('front_themer_theme_files', array());
      $theme_files[$theme] = $filename;
      variable_set('front_themer_theme_files', $theme_files);
    }
  }
}

/**
 * Implements hook_init().
 */
function front_themer_init() {
  global $theme;
  //Add JS theme implementations if available
  $theme_files = variable_get('front_themer_theme_files', array());

  if (isset($theme_files[$theme])) {
    drupal_add_js('public://' . variable_get('front_themer_theme_dir', 'front_themer') . '/' . $theme_files[$theme]);
  }
}

/**
 * Generates an intermediate placeholder string to be passed as a variable to theme() when generating
 * the theme's JS implementation.
 *
 * @param string $variable_name
 */
function _front_themer_placeholder($variable_name) {
  return "//ft//$variable_name//ft//";
}