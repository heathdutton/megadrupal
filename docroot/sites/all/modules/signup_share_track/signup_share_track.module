<?php

/**
 * Implements hook_menu()
 */
function signup_share_track_menu() {
  $items = array();
  $items['join/%'] = array(
    'title callback' => 'signup_share_track_get_title',
    'title arguments' => array(1),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('signup_share_track_join', 1),
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['sst/top'] = array(
    'title' => t('Top Invites'),
    'page callback' => 'signup_share_track_top_invites',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['user/%/invite-statistics'] = array(
    'title' => 'Invite Stats',
    'page callback' => 'signup_share_track_get_user_signup',
    'page arguments' => array(1),
    'access arguments' => array('view own signed up users'),
    'type' => MENU_LOCAL_TASK,
  );
  
  // Sign Up Share Track settings page.
  $items['admin/config/people/sst'] = array(
    'title' => 'Sign Up Share Track settings',
    'description' => 'Sign Up Share Track settings page.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('signup_share_track_settings'),
    'access arguments' => array('administer signup_share_track'),
    'file' => 'signup_share_track.admin.inc',
    'weight' => -10,
  );
  
  return $items;
}

/**
 * Implements hook_permission()
 */
function signup_share_track_permission() {
  return array(
    'administer signup_share_track' => array(
      'title' => 'Administer Signup Share Track',
      'description' => '',
    ),
    'view own signed up users' => array(
      'title' => t('View own signed up users'),
      'description' => t('Allow watching statistics for the users, who signed up with the person.'),
    ),
    'view all signed up users' => array(
      'title' => t('View all signed up users'),
      'description' => t('Allow watching statistics for the users, who signed up with the any person.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_user_insert()
 */
function signup_share_track_user_insert(&$edit, $account, $category) {
  signup_share_track_createUrl($account->uid);
  if (isset($_SESSION['signup_share_track_user_from'])) {
    db_insert('signup_share_track_signup')->fields(array('uid' => $account->uid, 'uid_from' => $_SESSION['signup_share_track_user_from'], 'signed_up' => REQUEST_TIME))->execute();
    db_update('signup_share_track')->condition('uid', $_SESSION['signup_share_track_user_from'], '=')->expression('count', 'count + :count', array(':count' => 1))->execute();
    unset($_SESSION['signup_share_track_user_from']);
  }
}

/**
 * Implements hook_user_delete().
 * Remove Sign Up Share data for deleted user as well as update count for referenced user.
 */
function signup_share_track_user_delete($account) {
  $referenced_user = db_select('signup_share_track_signup', 'sstf')->fields('sstf')->condition('uid', $account->uid)->execute()->fetchAssoc();
  if(!empty($referenced_user['uid_from'])) {
    db_update('signup_share_track')->condition('uid', $referenced_user['uid_from'], '=')->expression('count', 'count - :count', array(':count' => 1))->execute();
  }
  db_delete('signup_share_track')->condition('uid', $account->uid)->execute();
  db_delete('signup_share_track_signup')->condition('uid', $account->uid)->execute();
}

/**
 * Implements hook_form_alter()
 */
function signup_share_track_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'user_register_form') {	
    drupal_set_title(t('Affiliate User Signup'));
    if (isset($_SESSION['signup_share_track_mail'])) {
      $form['account']['mail']['#default_value'] = $_SESSION['signup_share_track_mail'];
      unset($_SESSION['signup_share_track_mail']);
    }
  }
}

/**
 * Implements hook_block_info().
 */
function signup_share_track_block_info() {
  $blocks['top_invites'] = array(
    'info' => t('Top Invites'), //The name that will appear in the block list.
    'cache' => DRUPAL_NO_CACHE, //Default
  );
  $blocks['sst_signup_form'] = array(
    'info' => t('SST Signup Form'), //The name that will appear in the block list.
    'cache' => DRUPAL_NO_CACHE, //Default
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 * 
 * Prepares the contents of the block.
 */
function signup_share_track_block_view($delta = '') {
  $block = array();
  switch($delta){
    case 'top_invites':
      $block['subject'] = t('Top Invites');
      if(user_access('access content')){
        //Use our custom function to retrieve data.
        $block['content'] = signup_share_track_top_invites();
      }
      return $block;
      break;
    case 'sst_signup_form':
      $block['subject'] = variable_get('sst_title', 'Join The Revolution');
      if(user_access('access content')){
        //Use our custom function to retrieve data.
        $block['content'] = drupal_get_form('signup_share_track_join_block_form');
      }
      return $block;
      break;
  }
  
}

/*
 * Implements hook_contextual_links_view_alter
 */
function signup_share_track_contextual_links_view_alter(&$element, &$items) {
  // This hook is called for EVERY set of contextual links
  // on a page.  We first want to check the $element to make
  // sure we are adding a link to the correct list of contextual
  // links. In this case we only want to add a link to blocks
  // created by this module. We just add links using the
  // same array structure as is used by theme_links.
  
  if (isset($element['#element']['#block']) && 
          $element['#element']['#block']->delta == "sst_signup_form") {
    $element['#links']['sst-settings'] = array(
      'title' => t('Sign Up Share Track Settings'),
      'href' => url('admin/config/people/sst', array('absolute' => TRUE)),
    );
  }
}

/**
 * Implements hook_user_view()
 * Showing user roles on profile page and link to there respective pages
 */
function signup_share_track_user_view($account, $view_mode, $langcode) {
	$roles = array();
	$affliate_url = '';
	if (!empty($account->roles)) {
	  foreach ($account->roles as $key => $value) {
	    if ($value != 'authenticated user') {
		  if ($value == 'affiliate') {
		    $affliate_url = signup_share_track_getUrl($account->uid);
	        $roles[] = l($value, $affliate_url);
	      }
	      else if($value == 'supplier') {
		    $roles[] = l($value, 'store/' . $account->uid);
	      }
	      else if ($value == 'distributor'){
		    $roles[] = l($value, 'distributor/' . $account->uid);
	      }
	      else {
		    $roles[] = $value;
	      }
	    }
	  }
	}
	$roles_value = implode(',',  $roles);
	$account->content['field_roles'] = array(
	  '#theme' => 'field',
	  '#weight' => 5,
	  '#title' => t('User Roles'),
	  '#access' => 1,
	  '#label_display' => 'inline',
	  '#view_mode' => 'full',
	  '#language' => 'und',
	  '#field_name' => 'field_name',
	  '#field_type' => 'text',
	  '#field_translatable' => 0,
	  '#entity_type' => 'user',
	  '#bundle' => 'user',
	  '#items' => array(
	    '0' => array(
          'value' => $roles_value,
	      'format' => '', 
	      'safe_value' => $roles_value,
	    )
	   ),
      '#formatter' => 'text_default',
	  '0' => array(
	    '#markup' => $roles_value,
	  ),
   );
}

/**
* Implements hook_token_info().
* This hook will register token sharelink.
*/
function signup_share_track_token_info() {
  $info['tokens']['user']['sharelink'] = array(
    'name' => t('Share Link'),
    'description' => t('Share Link for user'),
    'type' => 'user',
  );
  return $info;
}
function signup_share_track_tokens($type, $tokens, array $data = array(), array $options = array()) {
  global $user;
  $sanitize = !empty($options['sanitize']);
  $replacements = array();
  if ($type == 'user') {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'sharelink':
          $replacements[$original] = signup_share_track_getUrl($user->uid);
          break;
      }
    }
  }
  return $replacements;
}


function signup_share_track_generate_shortUrl($integer, $base = NULL) {
  $base_1 = "QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm";
  $base = variable_get('sst_allowed_char', $base_1);
  $len = variable_get('sst_link_length', '3');
  $length = strlen($base);
  $out = '';
  srand($integer);
  for ($i = 0; $i <= $len - 1; $i++) {
    $out .= $base[rand(0, $length - 1)];
  }
  return $out;
}

function signup_share_track_join($form, $form_state, $url) {
  global $language;
  drupal_add_css('.clear {clear:both; margin-top:20px;}', 'inline');
  
  $user_f = db_select('signup_share_track', 'sst')->fields('sst')->condition('url', $url)->execute()->fetchAssoc();


  $form = array();
  if (!empty($user_f)) {
    $user_owner = user_load($user_f['uid']);
    $language->language = $user_owner->language;
    $text = t(variable_get('sst_text', '<username> Recommends You Join The Revolution, Sign Up Now'), array(), array('langcode' => $user_owner->language));
    $text = str_replace('<username>', $user_owner->name, $text);
    $descr = $text . '/n' . $user_f['count'] . t(' people have already signed up via this link.', array(), array('langcode' => $user_owner->language));
    
    $form_text = variable_get('sst_form_text','');
    if(!empty($form_text)){
      $form['block_text'] = array(
        '#markup' => variable_get('sst_form_text',''),
      );
    }
    global $user;
    if ($user->uid == $user_owner->uid) {
      $form['text'] = array(
        '#markup' => '<div class="sst_thanks">' . $user_owner->name . t('! Thanks for signing up.', array(), array('langcode' => $user_owner->language)) . '</div>
			    <div class="sst_count">' . $user_f['count'] . t(' people have signup up via your link.', array(), array('langcode' => $user_owner->language)) . '</div>
			    <div class="sst_more_people">' . t('The more people that join through you the sooner you get invited in!', array(), array('langcode' => $user_owner->language)) . '</div>
			    <div class="sst_send_more">' . t('Send more emails and share via various social media websites below and help lead the revolution.', array(), array('langcode' => $user_owner->language)) . '</div> 
			    ',
      );
    }
    elseif (!user_is_anonymous()) {
      $form['text'] = array(
        '#markup' => '<div class="sst_count">' . $user_f['count'] . t(' people have already signed up via this link.', array(), array('langcode' => $user_owner->language)) . ' </div>',
      );
    }
    else {

      $form['text'] = array(
        '#markup' => '<div class="sst_sign_up_now">' . $text . '</div>
			    <div class="sst_count">' . $user_f['count'] . t(' people have already signed up via this link.', array(), array('langcode' => $user_owner->language)) . '</div>',
      );
      $form['uid'] = array(
        '#type' => 'hidden',
        '#value' => $user_f['uid'],
      );
      $form['mail'] = array(
        '#type' => 'textfield',
        '#default_value' => '',
        '#title' => 'E-mail',
        '#required' => true,
      );
      $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t(variable_get('sst_button_text', 'Signup Now'), array(), array('langcode' => $user_owner->language)),
      );
    }
    if (variable_get('sst_addthis', '1') == 1) {
      global $base_url;
      $url = $base_url . '/join/' . $user_f['url'];
      $title = $user_owner->name . t(' Recommends You Join The Revolution, Sign Up Now', array(), array('langcode' => $user_owner->language));
      $form['addthis'] = array(
        '#markup' => '<!-- AddThis Button BEGIN -->
			    <script type="text/javascript">
			    var addthis_share = {
				title: "' . $title . '",
				url: "' . $url . '",
				description: "' . $descr . '",
				templates: {
					twitter: "{{title}} {{url}}",
				}
			    }
			    </script>
			    <div class="addthis_toolbox addthis_default_style addthis_32x32_style">
				
				    <a class="addthis_button_preferred_1"></a>
				    <a class="addthis_button_preferred_2"></a>
				    <a class="addthis_button_preferred_3"></a>
				    <a class="addthis_button_preferred_4"></a>
				    <a class="addthis_button_compact"></a>
				    <a class="addthis_counter addthis_bubble_style"></a>
				</div>
				<script type="text/javascript" src="http://s7.addthis.com/js/250/addthis_widget.js#pubid=ra-4ec4922733f58e78"></script>
				<!-- AddThis Button END -->',
        '#prefix' => '<div class="clear">',
        '#suffix' => '</div>',
      );
    }
    if (variable_get('sst_jiathis', '2') == 2) {
      $form['jiathis'] = array(
        '#prefix' => '<div class="clear">',
        '#markup' => '<!-- JiaThis Button BEGIN -->
				    <div id="jiathis_style_32x32">
					<a class="jiathis_button_qzone"></a>
					<a class="jiathis_button_tsina"></a>
					<a class="jiathis_button_tqq"></a>
					<a class="jiathis_button_renren"></a>
					<a class="jiathis_button_kaixin001"></a>
					<a href="http://www.jiathis.com/share" class="jiathis jiathis_txt jtico jtico_jiathis" target="_blank"></a>
					<a class="jiathis_counter_style"></a>
				    </div>
				    <script type="text/javascript" src="http://v2.jiathis.com/code/jia.js" charset="utf-8"></script>
			    <!-- JiaThis Button END -->',
        '#suffix' => '</div>',
      );
    }
  }
  else {
    drupal_not_found();
  }

  return $form;
}

function signup_share_track_join_validate($form, &$form_state) {
  $values = $form_state['values'];
  if (!valid_email_address($values['mail'])) {
    form_set_error('mail', 'E-mail is not valid');
  }
}

function signup_share_track_join_submit($form, &$form_state) {
  $skip_signup = variable_get('sst_skip_signup', '');
  if($skip_signup == 1){
    $username = $form_state['values']['mail'];
    $ref_user = $form_state['values']['uid'];
    signup_share_track_user_register($username, $ref_user);
  }else{
    $form_state['redirect'] = 'user/register';
    $_SESSION['signup_share_track_user_from'] = $form_state['values']['uid'];
    $_SESSION['signup_share_track_mail'] = $form_state['values']['mail'];
  }
}

function signup_share_track_join_block_form(){
  $form_text = variable_get('sst_form_text','');
  if(!empty($form_text)){
    $form['block_text'] = array(
      '#markup' => variable_get('sst_form_text',''),
    );
  }
  $form['mail'] = array(
    '#type' => 'textfield',
    '#default_value' => '',
    '#title' => 'E-mail',
    '#required' => true,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t(variable_get('sst_button_text', 'Signup Now')),
  ); 
  return $form;
}

function signup_share_track_join_block_form_validate($form, &$form_state) {
  $values = $form_state['values'];
  if (!valid_email_address($values['mail'])) {
    form_set_error('mail', 'E-mail is not valid');
  }
}

function signup_share_track_join_block_form_submit($form, &$form_state) {
  $skip_signup = variable_get('sst_skip_signup', '');
  if($skip_signup == 1){
    $email = $form_state['values']['mail'];
    signup_share_track_user_register($email);
  }else{
    $form_state['redirect'] = 'user/register';
  }
}

function signup_share_track_user_register($email, $ref_user = NULL){
  $user_id = db_select('users', 'u')->fields('u', array('uid'))->condition('u.mail', $email)->execute()->fetchAssoc();
  $uid = $user_id['uid'];
  $account = '';
  if($uid){
    $account = user_load($uid); 
  }
  
  if (!$account) {
    // Register this new user.
    $userinfo = array(
      'name' => $email,
      'pass' => user_password(),
      'mail' => $email,
      'init' => $email,
      'status' => 1,
      'access' => REQUEST_TIME
    );
    $account = user_save(drupal_anonymous_user(), $userinfo);
    // Terminate if an error occurred during user_save().
    if (!$account) {
      drupal_set_message(t("Error saving user account."), 'error');
      return;
    }
    if($account && $ref_user){
      db_insert('signup_share_track_signup')->fields(array('uid' => $account->uid, 'uid_from' => $ref_user, 'signed_up' => REQUEST_TIME))->execute();
      db_update('signup_share_track')->condition('uid', $ref_user, '=')->expression('count', 'count + :count', array(':count' => 1))->execute();
    }
    
  }
  $query = db_select('signup_share_track', 'sst')->fields('sst')->condition('uid', $account->uid)->execute()->fetchAssoc();
  if($query['url']){
    global $user;
    $user = user_load($account->uid);
    $form_state['uid'] = $account->uid;
    $form_state['redirect'] = 'join/'.$query['url'];
    user_login_finalize($form_state);
    drupal_goto('join/'.$query['url']);
  }
}

function signup_share_track_createUrl($uid) {
  $url = signup_share_track_generate_shortUrl($uid);
  if ($url) {
    db_insert('signup_share_track')->fields(array('uid' => $uid, 'url' => $url, 'count' => '0'))->execute();
  }
}

function signup_share_track_get_title($url) {
  $user_f = db_select('signup_share_track', 'sst')->fields('sst')->condition('url', $url)->execute()->fetchAssoc();
  if (!empty($user_f)) {
    global $user;
    global $language;
    if ($user->uid == $user_f['uid']) {
      return t(variable_get('sst_title_user', 'Your Contribution to Leading Revolution'), array(), array('langcode' => $user->language));
    }
    else {
      $_user = user_load($user_f['uid']);
      $language->language = $_user->language;
      return t(variable_get('sst_title', 'Join The Revolution'), array(), array('langcode' => $_user->language));
    }
  }
}

function signup_share_track_top_invites() {
  $query = db_select('signup_share_track', 'sst')->orderBy('sst.count', 'DESC');
  $count_query = clone $query;
  $count_query->addExpression('COUNT(distinct(sst.uid))');

  $query = $query->extend('PagerDefault');
  $query->fields('sst')
    ->limit(50)
    ->setCountQuery($count_query);
  $result = $query->execute();
  $rows = array();
  foreach ($result as $value) {
    $user = user_load($value->uid);
    $rows[] = array(
      'class' => array('row-' . $value->uid),
      'data' => array(
        l($user->name, 'join/' . $value->url),
        $value->count,
      ),
    );
    unset($user);
  }
  if ($result->rowCount()) {
    $rows[] = array(
      'data' => array(
        array(
          'data' => theme('pager'),
          'colspan' => 2,
        ),
      ),
    );
  }

  $header = array(t('User'), t('Signups'));

  $element[] = array(
    '#theme' => 'table',
    '#rows' => $rows,
    '#header' => $header,
    '#empty' => t('Empty'),
  );
  return $element;
}

/**
 * Get join page url
 */
function signup_share_track_getUrl($uid) {
  $url = db_query('select url from {signup_share_track} where uid =:uid', array(':uid' => $uid))->fetchField();
  return 'join/' . $url;
}


function signup_share_track_get_user_signup($user_id = NULL){
  $userdata = user_load($user_id);
  $title = t('Signup Share Track for @username', array('@username' => $userdata->name));
  drupal_set_title($title);
  $output = '';
  
  // Fetch user signup share track data.
  $query = db_select('signup_share_track', 'sst')
    ->fields('sst')
    ->condition('uid', $user_id)
    ->execute();
    
  $sst_data = $query->fetchAssoc();
  $output = "<p>" .l(t('Link to @username\'s sign up page', array('@username' => $userdata->name)), 'join/'.$sst_data['url']). "</p>";
  $output .= "<p>" .t('The amount of users, signed up with @username : @count', array('@username' => $userdata->name, '@count' => $sst_data['count'])). "</p>";
  
  //Fetch list of user signed up with the current user.
  $query = db_select('signup_share_track_signup', 'ssts')
    ->fields('ssts')
    ->condition('uid_from', $user_id); 
  $result = $query->extend('PagerDefault')->limit(25)->execute();
  $header = array(
    t('User'),
    t('Date Signed Up'),
  );
  $i = 0;
  $rows = array();
  while($record = $result->fetchAssoc()) {
    $user = user_load($record['uid']);
    $rows[$i]['user'] = l($user->name, 'user/'.$user->uid);
    $rows[$i]['date'] = date('l, F d, Y - H:i',$record['signed_up']);
    $i++;
  }
  if(sizeof($rows)){
    $output .= theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('class' => array('user-request'))));
    $output .= theme('pager', $tags = array(), $element = 0, $parameters = array(), $quantity = 9);
  }

  return $output;
}
