<?php

/**
 * @file
 * This module implements the spamspan technique (http://www.spamspan.com ) for hiding email addresses from spambots.
 *
 * If javascript is disabled on the client-side, addresses appear as
 * example [at] example [dot] com.
 *
 * @author Lawrence Akka
 * @copyright 2006-2010, Lawrence Akka
 * @license http://www.gnu.org/licenses/gpl.txt  GPL v 2.0
 *
 */

/**
 *  Set up a regex constant to split an email address into name and domain
 *  parts. The following pattern is not perfect (who is?), but is intended to
 * intercept things which look like email addresses.  It is not intended to
 * determine if an address is valid.  It will not intercept addresses with
 * quoted local parts.
 *
 * @constant string SPAMSPAN_EMAIL
 */
define('SPAMSPAN_EMAIL', "
      ([-\.\~\'\!\#\$\%\&\+\/\*\=\?\^\_\`\{\|\}\w\+^@]+) # Group 1 - Match the name part - dash, dot or
                           #special characters.
     @                     # @
     ((?:        # Group 2
       [-\w]+\.            # one or more letters or dashes followed by a dot.
       )+                  # The whole thing one or more times
       [A-Z]{2,6}          # with between two and six letters at the end (NB
                           # .museum)
     )
");

/**
 * Loads code used only in admin.
 */
function spamspan_admin() {
  static $object;
  if (!isset($object)) {
    $object = new spamspan_admin();
  }
  return $object;
}

/**
 * menu(): 'page arguments' => array('spamspan_admin_page'),
 */
function spamspan_admin_page($form, &$form_state) {
  watchdog('spamspan', 'admin_page()');
  return spamspan_admin()->page($form, $form_state);
}
/**
 * .
 */
function spamspan_admin_page_submit($form, &$form_state) {
  watchdog('spamspan', 'admin_page_submit()');
  return spamspan_admin()->page_submit($form, $form_state);
}

/**
 * Implements hook_filter_info().
 * This function is called on every page so keep it fast and simple.
 */
function spamspan_filter_info() {
  $filters['spamspan']   = array(
    'title' => t('SpamSpan email address encoding filter'),
    'description' => t('Attempt to hide email addresses from spam-bots.'),
    'process callback' => '_spamspan_filter_process',
    'settings callback' => '_spamspan_filter_settings',
    'tips callback' => '_spamspan_filter_tips',
    'default settings' => array(
      'spamspan_at' => ' [at] ',
      'spamspan_use_graphic' => 0,
      'spamspan_dot_enable' => 0,
      'spamspan_dot' => ' [dot] ',
      'spamspan_use_form' => FALSE,
      'spamspan_use_url' => '<a href="/#formname?goto=#email">#displaytext</a>',
      'spamspan_email_encode' => TRUE,
      'spamspan_email_default' => 'contact_us_general_enquiry',
    ),
  );
  return $filters;
}

/**
 * Spamspan filter process callback
 *
 * Scan text and replace email addresses with span tags
 *
 * We are aiming to replace emails with code like this:
 *   <span class="spamspan">
 *   <span class="u">user</span>
 *   [at]
 *   <span class="d">example [dot] com</span>
 *   <span class="t"tag contents></span></span>
 *
 */
function _spamspan_filter_process($text, $filter) {
  // The preg_replace_callback functions below cannot take any additional
  // arguments, so we pass the relevant settings in spamspan_admin.
  spamspan_admin()->filter_set($filter);
  // Top and tail the email regexp it so that it is case insensitive and
  // ignores whitespace.
  $emailpattern = "!" . SPAMSPAN_EMAIL . "!ix";
  $emailpattern_with_options = "!" . SPAMSPAN_EMAIL . "[\|](.*) !ix";

  // Next set up a regex for mailto: URLs.
  // - see http://www.faqs.org/rfcs/rfc2368.html
  // This captures the whole mailto: URL into the second group,
  // the name into the third group and the domain into
  // the fourth. The tag contents go into the fifth.

  $mailtopattern = "!<a\s+                            # opening <a and spaces
      (?:(?:\w+\s*=\s*)(?:\w+|\"[^\"]*\"|'[^']*'))*?  # any attributes
      \s*                                             # whitespace
      href\s*=\s*(['\"])(mailto:"                     # the href attribute
      . SPAMSPAN_EMAIL .                              # The email address
      "(?:\?[A-Za-z0-9_= %\.\-\~\_\&]*)?)" .            # an optional ? followed
                                                      # by a query string. NB
                                                      # we allow spaces here,
                                                      # even though strictly
                                                      # they should be URL
                                                      # encoded
      "\\1                                            # the relevant quote
                                                      # character
      (?:(?:\s+\w+\s*=\s*)(?:\w+|\"[^\"]*\"|'[^']*'))*? # any more attributes
      >                                               # end of the first tag
      (.*?)                                           # tag contents.  NB this
                                                      # will not work properly
                                                      # if there is a nested
                                                      # <a>, but this is not
                                                      # valid xhtml anyway.
      </a>                                            # closing tag
      !ix";

  // HTML image tags need to be handled separately, as they may contain base64
  // encoded images slowing down the email regex function.
  // Therefore, remove all image contents and add them back later.
  // See https://drupal.org/node/1243042 for details.
  _filter_spamspan_escape_images('', TRUE);
  $text = preg_replace_callback('/<img(.*?)>/', '_filter_spamspan_escape_images', $text);

  // Now we can convert all mailto URLs
  $text = preg_replace_callback($mailtopattern, '_spamspan_callback_mailto', $text);
  // all bare email addresses with optional formatting information
  $text = preg_replace_callback($emailpattern_with_options, '_spamspan_email_addresses_with_formatting', $text);
  // and finally, all bare email addresses
  $text = preg_replace_callback($emailpattern, '_spamspan_bare_email_addresses', $text);

  // Revert back to the original image contents.
  _filter_spamspan_escape_images('', FALSE);
  $text = preg_replace_callback('/<!--img(.*?)-->/', '_filter_spamspan_escape_images', $text);

  return $text;
}

function _spamspan_email_addresses_with_formatting($matches) {
  if (!isset($matches[3])) { $matches[3] = ""; }
  return spamspan_admin()->output($matches[1], $matches[2], '', '', $matches[3]);
}

function _spamspan_bare_email_addresses($matches) {
  return spamspan_admin()->output($matches[1], $matches[2]);
}
/**
 * Escapes the contents of HTML image tags.
 *
 * Callback for preg_replace_callback() within _spamspan_filter_process().
 *
 * @param $match
 *   An array containing matches to replace from preg_replace_callback(),
 *   whereas $match[1] is expected to contain the content to be filtered.
 * @param $escape
 *   (optional) A Boolean indicating whether to escape (TRUE) or unescape
 *   comments (FALSE). Defaults to NULL, indicating neither. If TRUE, statically
 *   cached $comments are reset.
 */
function _filter_spamspan_escape_images($match, $escape = NULL) {
  static $mode, $comments = array();

  if (isset($escape)) {
    $mode = $escape;
    if ($escape){
      $comments = array();
    }
    return;
  }

  // Replace all HTML image with a '<img [hash] />' placeholder.
  if ($mode) {
    $content = $match[1];
    $hash = md5($content);
    $comments[$hash] = $content;
    return "<!--img $hash -->";
  }
  // Or replace placeholders with actual image contents.
  else {
    $hash = $match[1];
    $hash = trim($hash);
    $content = $comments[$hash];
    return "<img $content >";
  }
}

/**
 * Settings callback for spamspan filter
 */
function _spamspan_filter_settings($form, $form_state, $filter, $format, $defaults, $filters) {
  return spamspan_admin()->filter_settings($form, $form_state, $filter, $format, $defaults, $filters);
}

/**
 * Filter tips callback
 */
function _spamspan_filter_tips($filter, $format, $long = FALSE) {
  return t('Each email address will be obfuscated in a human readable fashion or, if JavaScript is enabled, replaced with a spam resistent clickable link.'
    . ' Email addresses will get the default web form unless specified. If replacement text (a persons name) is required a webform is also required. Separate each part with the "|" pipe symbol. Replace spaces in names with "_".');
}

/**
 * Implements hook_help().
 */
function spamspan_help($path, $arg) {
  switch ($path) {
    case 'admin/help#spamspan':
      return spamspan_admin()->help($path, $arg);
  }
}

/**
 * The callback functions for preg_replace_callback
 *
 * Replace an email addresses which has been found with the appropriate
 * <span> tags
 *
 * @param $matches
 *  An array containing parts of an email address or mailto: URL.
 * @return
 *  The span with which to replace the email address
 */
function _spamspan_callback_mailto($matches) {
  // take the mailto: URL in $matches[2] and split the query string
  // into its component parts, putting them in $headers as
  // [0]=>"header=contents" etc.  We cannot use parse_str because
  // the query string might contain dots.
  $headers = preg_split('/[&;]/', parse_url($matches[2], PHP_URL_QUERY));
  // if no matches, $headers[0] will be set to '' so $headers must be reset
  if ($headers[0] == '') {
    $headers = array();
  }
  return spamspan_admin()->output($matches[3], $matches[4], $matches[5], $headers);
}

/**
 * Implements hook_menu().
 */
function spamspan_menu() {
  $items = spamspan_admin()->menu();
  return $items;
}

/**
 * A helper function for the callbacks
 *
 * Replace an email addresses which has been found with the appropriate
 * <span> tags
 *
 * @param $name
 *  The user name
 * @param $domain
 *  The email domain
 * @param $contents
 *  The contents of any <a> tag
 * @param $headers
 *  The email headers extracted from a mailto: URL
 * @return
 *  The span with which to replace the email address
 */
function _spamspan_salmat_tracking($name, $domain, $contents, $headers, $var = '') {
//salmat tracking
$tmponclickline = 'onClick="' . "_gaq.push(['_trackEvent', 'Email link', 'Click', '" . $name . $settings['spamspan_at'] . $domain . "'" . ']);"';
$output = str_replace('email">', 'email" ' . $tmponclickline . '>', $output);
  
  $output = str_replace("#email", $email, $output);

  if (isset($vars[1]) and strpos($vars[1], ' '))
  {
    $v1 = str_replace('_', ' ', substr($vars[1], 0, strpos($vars[1], ' ')));
    $v2 = substr($vars[1], strpos($vars[1], ' '));
  }
  else
  {
    $v1 = $user_name . $at . $domain_name;
    $v2 = '';
  }
  
  $output = str_replace('#displaytext', $v1, $output) . $v2;
  
  // if there are headers, include them as eg (subject: xxx, cc: zzz)
  if (isset($headers) and $headers) {
    foreach ($headers as $value) {
      //replace the = in the headers arrays by ": " to look nicer
      $temp_headers[] = str_replace("=", ": ", $value);
    }
    $output .= '<span class="h"> (' . check_plain(implode(', ', $temp_headers)) . ') </span>';
  }
  // if there are tag contents, include them, between round brackets, unless
  // the contents are an email address.  In that case, we can ignore them.  This
  // is also a good idea because otherise the tag contents are themselves
  // converted into a spamspan, with undesirable consequences - see bug #305464.
  // NB problems may still be caused by edge cases, eg if the tag contents are
  // "blah blah email@example.com ..."
  if (isset($contents) and $contents and   !(preg_match("!^" . SPAMSPAN_EMAIL . "$!ix", $contents))) {
    $output .= '<span class="t"> (' . $contents . ')</span>';
  }
  $output .= "</span>";
  // remove anything except certain inline elements, just in case.  NB nested
  // <a> elements are illegal.  <img> needs to be here to allow for graphic
  // @
//  $output = filter_xss($output, $allowed_tags = array('em', 'strong', 'cite', 'b', 'i', 'code', 'span', 'img', 'a'));
  return $output;
}

/**
 * A simple utility function wrapping the main processing callback.
 * This function may be called by other modules and themes.
 *
 * @param $text
 *  Text, maybe containing email addresses.
 * @param $settings
 * An associative array of settings to be applied.
 * @return
 *  The input text with emails replaced by spans
 */
function spamspan($text = '', $settings = array()) {
  //apply default settings
  $info = spamspan_filter_info();
  $defaults = $info['spamspan']['default settings'];
  //create a dummy filter object so we can apply the settings
  $filter = new stdClass();
  $filter->settings = array_merge($defaults, $settings);
  return _spamspan_filter_process($text, $filter);
}