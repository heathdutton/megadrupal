<?php

/**
 * @file
 * Implements hungarian payment gateway using BIG FISH Payment Gateway service. 
 */

/**
 * Implements hook_menu(). 
 */
function commerce_bigfish_paymentgateway_menu() {
  $items = array();

  $items['admin/commerce/config/payment-methods/bigfish-paymentgateway'] = array(
    'title' => 'BIG FISH Payment Gateway',
    'description' => 'Configure BIG FISH Payment Gateway',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_bigfish_paymentgateway_configure_form'),
    'access arguments' => array('administer bigfish payment gateway'),
    'file' => 'includes/commerce_bigfish_paymentgateway.admin.inc',
  );

  $items[COMMERCE_BIGFISH_PAYMENTGATEWAY_RESPONSE_PATH] = array(
    'title' => 'BIG FISH Payment Gateway response',
    'description' => 'Response page for BIG FISH Payment Gateway',
    'type' => MENU_CALLBACK,
    'page callback' => 'commerce_bigfish_paymentgateway_return',
    'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function commerce_bigfish_paymentgateway_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if ($root_path == 'admin/commerce/config/payment-methods') {
    $item = menu_get_item('admin/commerce/config/payment-methods/bigfish-paymentgateway');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/**
 * Implements hook_permission().
 */
function commerce_bigfish_paymentgateway_permission() {
  return array(
    'administer bigfish payment gateway' => array(
      'title' => t('Administer BIG FISH Payment Gateway'),
      'description' => t('Perform to administer BIG FISH Payment Gateway.'),
    ),
  );
}

/**
 * Implements hook_init().
 */
function commerce_bigfish_paymentgateway_init() {
  module_load_include('inc', 'commerce_bigfish_paymentgateway', 'includes/commerce_bigfish_paymentgateway.define');
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_bigfish_paymentgateway_commerce_payment_method_info() {
  $payment_methods = array();
  $default = array(
    'title' => t('n/a'),
    'short_title' => t('BIG FISH'),
    'description' => t('n/a'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => FALSE,
    'callbacks' => array(
      'submit_form'            => 'commerce_bigfish_paymentgateway_submit_form',
      'submit_form_submit'     => 'commerce_bigfish_paymentgateway_submit_form_submit',
      'redirect_form'          => 'commerce_bigfish_paymentgateway_redirect_form',
    ),
  );

  foreach (_commerce_bigfish_paymentgateway_providers() as $key => $provider) {
    $payment_methods[$key] = array_merge($default, $provider);
  }

  return $payment_methods;
}

/**
 * Implements hook_commerce_checkout_page_info_alter().
 */
function commerce_bigfish_paymentgateway_commerce_checkout_page_info_alter(&$checkout_pages) {
  unset($checkout_pages['payment']['help']);
}

/**
 * Implements CALLBACK_commerce_payment_method_settings_form().
 */
function commerce_bigfish_paymentgateway_settings_form($settings = NULL) {
  $form = array();

  $form['provider_name'] = array(
    '#type' => 'select',
    '#title' => t('Provider name'),
    '#description' => t('Choose a provider from list.'),
    '#required' => TRUE,
    '#options' => _commerce_bigfish_paymentgateway_get_providers_optionlist(),
    '#default_value' => isset($settings['provider_name']) ? $settings['provider_name'] : '',
  );

  return $form;
}

/**
 * Implements CALLBACK_commerce_payment_method_submit_form().
 */
function commerce_bigfish_paymentgateway_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form['commerce_bigfish_paymentgateway_information'] = array(
    '#markup' => '<span class="commerce-commerce-bpg-info">' . t('Continue with checkout to complete payment via<br/>%provider.', array('%provider' => $payment_method['title'])) . '</span>',
  );

  $provider = _commerce_bigfish_paymentgateway_get_provider($payment_method);

  if ($provider === \BigFish\PaymentGateway::PROVIDER_OTP) {
    $session = &_commerce_bigfish_paymentgateway_get_session();

    $form['commerce_bigfish_paymentgateway_pocket_id'] = array(
      '#type' => 'select',
      '#title' => t('Pocket identifier'),
      '#empty_option' => '',
      '#empty_value' => '',
      '#default_value' => isset($session['pocket_id']) ? $session['pocket_id'] : NULL,
      '#options' => array(
        'Cafeteria kártya esetén' => array(
          '01' => 'Étel utalvány',
          '02' => 'Meleg étkezési utalvány',
          '03' => 'Iskolakezdési utalvány',
          '04' => 'Kultúra utalvány',
          '05' => 'Ajándék utalvány',
          '06' => 'Internet utalvány',
        ),
        'SZÉP kártya esetén' => array(
          '07' => 'SZÉP vendéglátás kártya',
          '08' => 'SZÉP szabadidő kártya',
          '09' => 'SZÉP Szálláshely kártya',
        ),
      ),
    );
  }

  return $form;
}

/**
 * Implements CALLBACK_commerce_payment_method_submit_form_submit().
 */
function commerce_bigfish_paymentgateway_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  $provider = _commerce_bigfish_paymentgateway_get_provider($payment_method);

  if ($provider === \BigFish\PaymentGateway::PROVIDER_OTP) {
    $session = &_commerce_bigfish_paymentgateway_get_session();
    $session['pocket_id'] = $pane_values['commerce_bigfish_paymentgateway_pocket_id'];
  }
}

/**
 * Implements CALLBACK_commerce_payment_method_redirect_form().
 */
function commerce_bigfish_paymentgateway_redirect_form($form, &$form_state, $order, $payment_method) {
  // Return an error if the enabling action's settings haven't been configured.
  $provider_name = _commerce_bigfish_paymentgateway_get_provider($payment_method);

  if (empty($provider_name)) {
    drupal_set_message(t('BIG FISH Payment Gateway is not configured for use. No BIG FISH Payment Gateway provider has been specified.'), 'error');
    return array();
  }
  elseif (variable_get('commerce_bigfish_paymentgateway_store_name', '') == '') {
    drupal_set_message(t('BIG FISH Payment Gateway is not configured for use. No BIG FISH Payment Gateway store name has been specified.'), 'error');
    return array();
  }
  elseif (variable_get('commerce_bigfish_paymentgateway_api_key', '') == '') {
    drupal_set_message(t('BIG FISH Payment Gateway is not configured for use. No BIG FISH Payment Gateway API key has been specified.'), 'error');
    return array();
  }

  $settings = array(
    // Return to the previous page when payment is canceled.
    'cancel_return' => url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
    // Return to the payment redirect page for processing successful payments.
    'return' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
    // Specify the current payment method instance ID in the notify_url.
    'payment_method' => $payment_method['instance_id'],
    // Specify provider name.
    'provider_name' => $provider_name,
  );

  if ($provider_name === \BigFish\PaymentGateway::PROVIDER_OTP_TWO_PARTY) {
    $values = $form_state['input'];

    if (!variable_get('commerce_bigfish_paymentgateway_encryption_key', FALSE)) {
      drupal_set_message(t('Public encryption key has not been set on the BIG FISH Payment Gateway configuration page!'), 'error');

      $form['submit'] = array(
        '#markup' => l(t('Return to previous page'), $settings['cancel_return'], array('attributes' => array('class' => 'button'))),
      );

      return $form;
    }

    $form['message'] = array(
      '#markup' => t('Please fill the form below with your credit card information.'),
    );

    if (isset($values) && !empty($values)) {
      if (commerce_bigfish_paymentgateway_redirect_form_validate($values)) {
        if ($result_message = commerce_bigfish_paymentgateway_redirect_form_submit($form, $form_state, $order, $payment_method['settings'] + $settings)) {
          $form['message']['#markup'] .= '<div class="messages error">' . t('Error occured during the payment initialization!') . '<br/>' . $result_message . '</div>';
          form_set_error('commerce_bigfish_paymentgateway_card_number');
          form_set_error('commerce_bigfish_paymentgateway_expiration');
          form_set_error('commerce_bigfish_paymentgateway_cvc');
        }
      }
    }

    $form['commerce_bigfish_paymentgateway_card_number'] = array(
      '#type' => 'textfield',
      '#title' => t('Card number'),
      '#required' => TRUE,
      '#attributes' => array(
        'autocomplete' => 'off',
      ),
      '#default_value' => isset($values['commerce_bigfish_paymentgateway_card_number']) ? $values['commerce_bigfish_paymentgateway_card_number'] : NULL,
    );
    $form['commerce_bigfish_paymentgateway_expiration'] = array(
      '#type' => 'textfield',
      '#title' => t('Card expiration (MMYY)'),
      '#required' => TRUE,
      '#attributes' => array(
        'autocomplete' => 'off',
      ),
      '#default_value' => isset($values['commerce_bigfish_paymentgateway_expiration']) ? $values['commerce_bigfish_paymentgateway_expiration'] : NULL,
    );
    $form['commerce_bigfish_paymentgateway_cvc'] = array(
      '#type' => 'textfield',
      '#title' => t('Card CVC code'),
      '#required' => TRUE,
      '#attributes' => array(
        'autocomplete' => 'off',
      ),
      '#default_value' => isset($values['commerce_bigfish_paymentgateway_cvc']) ? $values['commerce_bigfish_paymentgateway_cvc'] : NULL,
    );
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Submit'),
    );

    return $form;

  }
  else {

    if ($result_message = commerce_bigfish_paymentgateway_redirect_form_submit($form, $form_state, $order, $payment_method['settings'] + $settings)) {
      $form['message'] = array(
        '#markup' => '<div class="messages error">' . t('Error occured during the payment initialization!') . '</div>',
      );
      $form['submit'] = array(
        '#markup' => l(t('Return to previous page'), $settings['cancel_return'], array('attributes' => array('class' => 'button'))),
      );

      return $form;
    }

  }
}

/**
 * Validates the per-method input form.
 *
 * @param array $pane_values
 *   form input values
 *
 * @return bool
 *   form has error
 */
function commerce_bigfish_paymentgateway_redirect_form_validate($pane_values) {
  if (!trim($pane_values['commerce_bigfish_paymentgateway_card_number'])) {
    form_set_error('commerce_bigfish_paymentgateway_card_number', t('Invalid card number!'));
  }

  if (!trim($pane_values['commerce_bigfish_paymentgateway_expiration'])) {
    form_set_error('commerce_bigfish_paymentgateway_expiration', t('Invalid card expiration date!'));
  }

  if (!trim($pane_values['commerce_bigfish_paymentgateway_cvc'])) {
    form_set_error('commerce_bigfish_paymentgateway_cvc', t('Invalid CVC code!'));
  }

  return !form_get_errors();
}


/**
 * Submits BIG FISH Payment Gateway form.
 *
 * @param object $order
 *   The fully loaded order being paid for.
 * @param array $settings
 *   Gateway settings value.
 *
 * @return string
 *   PMGW result message
 */
function commerce_bigfish_paymentgateway_redirect_form_submit($form, &$form_state, $order, $settings) {
  global $user, $base_url, $language;

  _commerce_bigfish_paymentgateway_load_library();

  // Get order informations.
  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  $currency_code = $wrapper->commerce_order_total->currency_code->value();
  $amount = $wrapper->commerce_order_total->amount->value();
  $amount = round(commerce_currency_amount_to_decimal($amount, $currency_code), 2);
  $reference = $order->order_id;
  $response_url = $base_url . '/' . COMMERCE_BIGFISH_PAYMENTGATEWAY_RESPONSE_PATH;

  $request = new \BigFish\PaymentGateway\Request\Init();
  $request->setProviderName($settings['provider_name'])
      ->setResponseUrl($response_url)
      ->setAmount($amount)
      ->setCurrency($currency_code)
      ->setOrderId($reference)
      ->setUserId($user->uid)
      ->setLanguage(strtoupper($language->language));

  if ($settings['provider_name'] === \BigFish\PaymentGateway::PROVIDER_OTP_TWO_PARTY) {
    $values = $form_state['input'];
    $request->setOtpCardNumber($values['commerce_bigfish_paymentgateway_card_number']);
    $request->setOtpExpiration($values['commerce_bigfish_paymentgateway_expiration']);
    $request->setOtpCvc($values['commerce_bigfish_paymentgateway_cvc']);
  }

  $response = \BigFish\PaymentGateway::init($request);

  if ($response->ResultCode !== \BigFish\PaymentGateway::RESULT_CODE_SUCCESS) {
    watchdog('commerce_bigfish_paymentgateway', 'Payment Gateway init failed. Order ID: %id. ResultMessage: %msg', array('%id' => $order->order_id, '%msg' => $response->ResultMessage), WATCHDOG_CRITICAL);
    return $response->ResultMessage;
  }

  $request = new \BigFish\PaymentGateway\Request\Start($response->TransactionId);
  \BigFish\PaymentGateway::start($request);
}

/**
 * Response page after payment.
 */
function commerce_bigfish_paymentgateway_return() {

  if (!isset($_GET["TransactionId"])) {
    watchdog('commerce_bigfish_paymentgateway', 'Transaction id failed', array(), WATCHDOG_CRITICAL);
    drupal_goto(url('cart', array('absolute' => TRUE)));
  }
  else {
    _commerce_bigfish_paymentgateway_load_library();

    $request = new \BigFish\PaymentGateway\Request\Result($_GET["TransactionId"]);
    $response = \BigFish\PaymentGateway::result($request);

    if ($order = commerce_order_load($response->OrderId)) {
      if ($response->ResultCode != \BigFish\PaymentGateway::RESULT_CODE_USER_CANCEL) {
        if ($response->AutoCommit !== 'true') {
          // Transaction was not closed.
          $close_response = \BigFish\PaymentGateway::close(new \BigFish\PaymentGateway\Request\Close($_GET["TransactionId"], TRUE));
          $response->ResultCode = $close_response->ResultCode;
        }

        switch ($response->ResultCode) {
          case \BigFish\PaymentGateway::RESULT_CODE_SUCCESS:
            $status = COMMERCE_PAYMENT_STATUS_SUCCESS;
            break;

          case \BigFish\PaymentGateway::RESULT_CODE_PENDING:
            $status = COMMERCE_PAYMENT_STATUS_PENDING;
            break;

          default:
            $status = COMMERCE_PAYMENT_STATUS_FAILURE;
        }

        if ($order->status == 'checkout_pending' && $status == COMMERCE_PAYMENT_STATUS_SUCCESS) {
          commerce_checkout_complete($order);
        }

        $wrapper = entity_metadata_wrapper('commerce_order', $order);
        $currency_code = $wrapper->commerce_order_total->currency_code->value();
        $amount = $wrapper->commerce_order_total->amount->value();

        $amount = round(commerce_currency_amount_to_decimal($amount, $currency_code), 2);

        // Create new Commerce payment transaction record.
        $transaction = commerce_payment_transaction_new('commerce_bigfish_paymentgateway', $order->order_id);
        $transaction->instance_id = 'commerce_bigfish_paymentgateway|commerce_payment_commerce_bigfish_paymentgateway';
        $transaction->remote_id = $response->ProviderTransactionId;
        $transaction->amount = $amount;
        $transaction->currency_code = $currency_code;
        $transaction->status = $status;
        $transaction->remote_status = $response->CommitState;
        $message = '';
        $message_variables = array();
        foreach ($response as $key => $val) {
          $message .= str_replace('.', '_', $key . '=@' . $key) . '. ';
          $message_variables['@' . str_replace('.', '_', $key)] = $val;
        }
        $message = rtrim($message);
        $transaction->message = $message;
        $transaction->message_variables = $message_variables;
        commerce_payment_transaction_save($transaction);

        if ($status != COMMERCE_PAYMENT_STATUS_SUCCESS) {
          drupal_goto(url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)));
        }

        drupal_goto(url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)));
      }
      else {
        watchdog('commerce_bigfish_paymentgateway', 'Transaction was not success. Order id: %id. Transaction id: %tid', array('%id' => $response->OrderId, '%tid' => $_GET["TransactionId"]), WATCHDOG_WARNING);
        drupal_set_message(t('Transaction was not successful. Please try again!'), 'error');
        $url = 'checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'];

        return l(t('Return to previous page'), $url, array('attributes' => array('class' => 'button')));
      }
    }
    else {
      watchdog('commerce_bigfish_paymentgateway', 'Order loading failed in transaction id: %tid', array('%tid' => $_GET["TransactionId"]), WATCHDOG_CRITICAL);
      drupal_goto(url('cart', array('absolute' => TRUE)));
    }
  }

  drupal_exit();
}

/**
 * Helper function to return available providers option list. 
 */
function _commerce_bigfish_paymentgateway_get_providers_optionlist() {
  $providers = array();
  foreach (_commerce_bigfish_paymentgateway_providers() as $provider) {
    $providers[$provider['provider_id']] = $provider['title'];
  }
  return $providers;
}

/**
 * Helper function to define provider name.
 */
function _commerce_bigfish_paymentgateway_get_provider($payment_method) {
  if (isset($payment_method['settings']['provider_name']) && !empty($payment_method['settings']['provider_name'])) {
    return $payment_method['settings']['provider_name'];
  }
  $providers = _commerce_bigfish_paymentgateway_providers();
  if (isset($providers[$payment_method['method_id']]['provider_id'])) {
    return $providers[$payment_method['method_id']]['provider_id'];
  }
  return '';
}

/**
 * BIG FISH Paymentgateway providers.
 */
function _commerce_bigfish_paymentgateway_providers() {
  module_load_include('inc', 'commerce_bigfish_paymentgateway', 'includes/commerce_bigfish_paymentgateway.providers');
  return commerce_bigfish_paymentgateway_providers();
}

/**
 * Implements hook_libraries_info().
 */
function commerce_bigfish_paymentgateway_libraries_info() {
  $libraries[COMMERCE_BIGFISH_PAYMENTGATEWAY_LIBRARY_NAME] = array(
    'name' => 'BIG FISH Payment Gateway - PHP SDK',
    'vendor url' => 'https://www.paymentgateway.hu',
    'download url' => 'https://github.com/bigfish-hu/payment-gateway-php-sdk/archive/master.zip',
    'version callback' => 'commerce_bigfish_paymentgateway_library_get_version',
    'files' => array(
      'php' => array(
        'src/BigFish/PaymentGateway/Autoload.php',
      ),
    ),
  );

  return $libraries;
}

/**
 * Library version callback function.
 *
 * @return string
 *   library version
 */
function commerce_bigfish_paymentgateway_library_get_version() {
  return 'master';
}

/**
 * Load the required SDK library.
 *
 * @staticvar bool $loaded
 *
 * @return bool
 *   library loaded successfully
 */
function _commerce_bigfish_paymentgateway_load_library() {
  static $loaded;

  if (isset($loaded)) {
    return $loaded;
  }

  if (_commerce_bigfish_paymentgateway_check_library()) {
    libraries_load(COMMERCE_BIGFISH_PAYMENTGATEWAY_LIBRARY_NAME);
    \BigFish\PaymentGateway\Autoload::register();

    $config = new \BigFish\PaymentGateway\Config();
    $config->storeName = variable_get('commerce_bigfish_paymentgateway_store_name', \BigFish\PaymentGateway::SDK_TEST_STORE_NAME);
    $config->apiKey = variable_get('commerce_bigfish_paymentgateway_api_key', \BigFish\PaymentGateway::SDK_TEST_API_KEY);
    $config->testMode = variable_get('commerce_bigfish_paymentgateway_test_mode', TRUE);
    $config->encryptPublicKey = variable_get('commerce_bigfish_paymentgateway_encryption_key', \BigFish\PaymentGateway::SDK_TEST_ENCRYPT_PUBLIC_KEY);

    \BigFish\PaymentGateway::setConfig($config);

    $loaded = TRUE;
  }
  else {
    $loaded = FALSE;
  }

  return $loaded;
}

/**
 * Checks whether the required SDK library has been installed.
 *
 * @staticvar bool $result
 *
 * @return bool
 *   library installed
 */
function _commerce_bigfish_paymentgateway_check_library() {
  static $library;

  if (!defined('COMMERCE_BIGFISH_PAYMENTGATEWAY_LIBRARY_NAME')) {
    module_load_include('inc', 'commerce_bigfish_paymentgateway', 'includes/commerce_bigfish_paymentgateway.define');
  }

  if (!isset($library)) {
    $library = libraries_detect(COMMERCE_BIGFISH_PAYMENTGATEWAY_LIBRARY_NAME);
  }

  $found = is_array($library) && $library['installed'];

  if (!$found) {
    drupal_set_message($library['error message'], 'error', FALSE);
  }

  return $found;
}


/**
 * Set and return the module's session data.
 *
 * @staticvar array $session
 *   internal session data
 *
 * @return array
 *   internal session data
 */
function &_commerce_bigfish_paymentgateway_get_session() {
  static $session;

  if (!isset($session)) {
    $session = &$_SESSION['commerce_bigfish_paymentgateway'];

    if (!is_array($session)) {
      $session = array();
    }
  }

  return $session;
}
