<?php

/**
 * @file
 * Implements hungarian payment gateway using BIG FISH Payment Gateway service. 
 */
/**
 * BIGFISH_PAYMENTGATEWAY_STORE_NAME
 * Merchant's unique identifier used in Payment Gateway.
 */
define('BIGFISH_PAYMENTGATEWAY_STORE_NAME', variable_get('commerce_bigfish_paymentgateway_store_name', 'sdk_test'));

/**
 * BIGFISH_PAYMENTGATEWAY_API_KEY
 * Keep it safe, do not share with anyone!
 */
define('BIGFISH_PAYMENTGATEWAY_API_KEY', variable_get('commerce_bigfish_paymentgateway_api_key', '86af3-80e4f-f8228-9498f-910ad'));

/**
 * BIGFISH_PAYMENTGATEWAY_TEST_MODE
 * Please change this to false in your production environment.
 */
define('BIGFISH_PAYMENTGATEWAY_TEST_MODE', variable_get('commerce_bigfish_paymentgateway_test_mode', TRUE));

/**
 * Implements hook_menu(). 
 */
function commerce_bigfish_paymentgateway_menu() {
  $items = array();

  $items['admin/commerce/config/bigfish-paymentgateway'] = array(
    'title' => 'BIG FISH Payment Gateway',
    'description' => 'Configure BIG FISH Payment Gateway',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_bigfish_paymentgateway_configure_form'),
    'access arguments' => array('administer bigfish payment gateway'),
    'file' => 'includes/commerce_bigfish_paymentgateway.admin.inc',
  );

  $items['bpg-response'] = array(
    'title' => 'BIG FISH Payment Gateway response',
    'description' => 'Response page for BIG FISH Payment Gateway',
    'type' => MENU_CALLBACK,
    'page callback' => 'commerce_bigfish_paymentgateway_return',
    'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function commerce_bigfish_paymentgateway_permission() {
  return array(
    'administer bigfish payment gateway' => array(
      'title' => t('Administer BIG FISH Payment Gateway'),
      'description' => t('Perform to administer BIG FISH Payment Gateway.'),
    ),
  );
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_bigfish_paymentgateway_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_bigfish_paymentgateway'] = array(
    'title' => t('BIG FISH Payment Gateway'),
    'short_title' => t('BIG FISH'),
    'description' => t('BIG FISH Payment Gateway (Hungary)'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );

  foreach (_commerce_bigfish_paymentgateway_providers() as $key => $provider) {
    $payment_methods[$key] = array(
      'title' => $provider['title'],
      'short_title' => t('BIG FISH'),
      'description' => $provider['description'],
      'terminal' => FALSE,
      'offsite' => TRUE,
      'offsite_autoredirect' => TRUE,
      'callbacks' => array(
        'submit_form' => 'commerce_bigfish_paymentgateway_submit_form',
        'redirect_form' => 'commerce_bigfish_paymentgateway_redirect_form',
      ),
    );
  }

  return $payment_methods;
}

/**
 * Settings form for BIG FISH payment gateway.
 */
function commerce_bigfish_paymentgateway_settings_form($settings = NULL) {
  $form = array();

  $form['provider_name'] = array(
    '#type' => 'select',
    '#title' => t('Provider name'),
    '#description' => t('Choose a provider from list.'),
    '#required' => TRUE,
    '#options' => _commerce_bigfish_paymentgateway_get_providers_optionlist(),
    '#default_value' => isset($settings['provider_name']) ? $settings['provider_name'] : '',
  );

  return $form;
}

/**
 * Payment method callback: adds a message and CSS to the submission form.
 */
function commerce_bigfish_paymentgateway_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $provider = _commerce_bigfish_paymentgateway_get_provider($payment_method);
  $form['commerce_bigfish_paymentgateway_information'] = array(
    '#markup' => '<span class="commerce-commerce-bpg-info">' . t('(Continue with checkout to complete payment via %provider.)', array('%provider' => $provider)) . '</span>',
  );

  return $form;
}

/**
 * Create the form to redirect user to payment page.
 */
function commerce_bigfish_paymentgateway_redirect_form($form, &$form_state, $order, $payment_method) {
  // Return an error if the enabling action's settings haven't been configured.
  $provider_name = _commerce_bigfish_paymentgateway_get_provider($payment_method);
  if (empty($provider_name)) {
    drupal_set_message(t('BIG FISH Payment Gateway is not configured for use. No BIG FISH Payment Gateway provider has been specified.'), 'error');
    return array();
  }
  elseif (variable_get('commerce_bigfish_paymentgateway_store_name', '') == '') {
    drupal_set_message(t('BIG FISH Payment Gateway is not configured for use. No BIG FISH Payment Gateway store name has been specified.'), 'error');
    return array();
  }
  elseif (variable_get('commerce_bigfish_paymentgateway_api_key', '') == '') {
    drupal_set_message(t('BIG FISH Payment Gateway is not configured for use. No BIG FISH Payment Gateway api key has been specified.'), 'error');
    return array();
  }

  $settings = array(
    // Return to the previous page when payment is canceled.
    'cancel_return' => url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
    // Return to the payment redirect page for processing successful payments.
    'return' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
    // Specify the current payment method instance ID in the notify_url.
    'payment_method' => $payment_method['instance_id'],
    // Specify provider name.
    'provider_name' => $provider_name,
  );

  return commerce_bigfish_paymentgateway_order_form($form, $form_state, $order, $payment_method['settings'] + $settings);
}

/**
 * Builds a BIG FISH Payment Gateway form from an order object.
 *
 * @param object $order
 *   The fully loaded order being paid for.
 * @param array $settings
 *   Gateway settings value.
 *
 * @return array
 *   A renderable form array.
 */
function commerce_bigfish_paymentgateway_order_form($form, &$form_state, $order, $settings) {

  // Include required file.
  $path = libraries_get_path('bigfish_paymentgateway_sdk');
  $file = $path . '/paymentgateway.php';
  include_once $file;

  // Get order informations.
  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  $currency_code = $wrapper->commerce_order_total->currency_code->value();
  $amount = $wrapper->commerce_order_total->amount->value();

  $reference = $order->order_id;

  $amount = round(commerce_currency_amount_to_decimal($amount, $currency_code), 2);

  global $user;
  global $base_url;
  $response_url = $base_url . '/bpg-response';

  $request = new PaymentGateway_Init_Request();
  $request->setProviderName($settings['provider_name'])
      ->setResponseUrl($response_url)
      ->setAmount($amount)
      ->setCurrency($currency_code)
      ->setOrderId($reference)
      ->setUserId($user->uid)
      ->setLanguage("HU");

  $response = PaymentGateway::init($request);

  if ($response->ResultCode != 'SUCCESSFUL') {
    watchdog('commerce_bigfish_paymentgateway', 'Payment Gateway init failed. Order id: %id', array('%id' => $order->order_id), WATCHDOG_CRITICAL);
    drupal_goto($settings['cancel_return']);
    drupal_exit();
  }

  PaymentGateway::start(new PaymentGateway_Start_Request($response->TransactionId));

  return $form;
}

/**
 * Response page after payment.
 */
function commerce_bigfish_paymentgateway_return() {

  if (!isset($_GET["TransactionId"])) {
    watchdog('commerce_bigfish_paymentgateway', 'Transaction id failed', array(), WATCHDOG_CRITICAL);
    drupal_goto(url('cart', array('absolute' => TRUE)));
  }
  else {
    // Include required file.
    $path = libraries_get_path('bigfish_paymentgateway_sdk');
    $file = $path . '/paymentgateway.php';
    include_once $file;

    $response = PaymentGateway::result(new PaymentGateway_Result_Request($_GET["TransactionId"]));

    if ($order = commerce_order_load($response->OrderId)) {
      if ($response->ResultCode != 'CANCELED') {
        switch ($response->ResultCode) {
          case 'SUCCESSFUL':
            $status = COMMERCE_PAYMENT_STATUS_SUCCESS;
            break;
          case 'PENDING':
            $status = COMMERCE_PAYMENT_STATUS_PENDING;
            break;
          default:
            $status = COMMERCE_PAYMENT_STATUS_FAILURE;
        }
        if (!$response->AutoCommit) {
          // Transaction was not closed.
          $response = PaymentGateway::close(new PaymentGateway_Close_Request($_GET["TransactionId"], TRUE));
        }

        if ($order->status == 'checkout_pending' && $status == COMMERCE_PAYMENT_STATUS_SUCCESS) {
          commerce_checkout_complete($order);
        }

        $wrapper = entity_metadata_wrapper('commerce_order', $order);
        $currency_code = $wrapper->commerce_order_total->currency_code->value();
        $amount = $wrapper->commerce_order_total->amount->value();

        $amount = round(commerce_currency_amount_to_decimal($amount, $currency_code), 2);

        // Create new Commerce payment transaction record.
        $transaction = commerce_payment_transaction_new('commerce_bigfish_paymentgateway', $order->order_id);
        $transaction->instance_id = 'commerce_bigfish_paymentgateway|commerce_payment_commerce_bigfish_paymentgateway';
        $transaction->remote_id = $response->ProviderTransactionId;
        $transaction->amount = $amount;
        $transaction->currency_code = $currency_code;
        $transaction->status = $status;
        $transaction->remote_status = $response->CommitState;
        $message = '';
        $message_variables = array();
        foreach ($response as $key => $val) {
          $message .= str_replace('.', '_', $key . '=@' . $key) . '. ';
          $message_variables['@' . str_replace('.', '_', $key)] = $val;
        }
        $message = rtrim($message);
        $transaction->message = $message;
        $transaction->message_variables = $message_variables;
        commerce_payment_transaction_save($transaction);

        drupal_goto(url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)));
      }
      else {
        watchdog('commerce_bigfish_paymentgateway', 'Transaction was not success. Order id: %id. Transaction id: %tid', array('%id' => $response->OrderId, '%tid' => $_GET["TransactionId"]), WATCHDOG_WARNING);
        drupal_set_message(t('Transaction was not success please try again.'), 'warning');
        drupal_goto(url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)));
      }
    }
    else {
      watchdog('commerce_bigfish_paymentgateway', 'Order loading failed in transaction id: %tid', array('%tid' => $_GET["TransactionId"]), WATCHDOG_CRITICAL);
      drupal_goto(url('cart', array('absolute' => TRUE)));
    }
  }

  drupal_exit();
}

/**
 * Helper function to return available providers option list. 
 */
function _commerce_bigfish_paymentgateway_get_providers_optionlist() {
  $providers = array();
  foreach (_commerce_bigfish_paymentgateway_providers() as $provider) {
    $providers[$provider['provider_id']] = $provider['title'];
  }
  return $providers;
}

/**
 * Helper function to define provider name.
 */
function _commerce_bigfish_paymentgateway_get_provider($payment_method) {
  if (isset($payment_method['settings']['provider_name']) && !empty($payment_method['settings']['provider_name'])) {
    return $payment_method['settings']['provider_name'];
  }
  $providers = _commerce_bigfish_paymentgateway_providers();
  if (isset($providers[$payment_method['method_id']]['provider_id'])) {
    return $providers[$payment_method['method_id']]['provider_id'];
  }
  return '';
}

/**
 * BIG FISH Paymentgateway providers.
 */
function _commerce_bigfish_paymentgateway_providers() {
  module_load_include('inc', 'commerce_bigfish_paymentgateway', 'includes/commerce_bigfish_paymentgateway.providers');
  return commerce_bigfish_paymentgateway_providers();
}
