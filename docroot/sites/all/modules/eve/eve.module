<?php

/**
 * @file
 * Implements http://www.eveonline.com/api/doc/ in drupal module
 * http://wiki.eve-id.net/APIv2_Page_Index
 */

module_load_include('inc', 'eve', 'eve.data');

/**
 * Implements hook_form_alter()
 */
function eve_form_alter(&$form, &$form_state, $form_id) {
  if ('eve_account_node_form' == $form_id) {
    $form['menu']['#access'] = FALSE;
    $form['path']['#access'] = FALSE;
  }
}

/**
 * Implements hook_form_$form_id_alter()
 */
function eve_form_eve_account_node_form_alter(&$form, &$form_state) {
  // We need form storage to stick around until we finish multi-stepping
  $form['#cache'] = TRUE;
  $step = isset($form_state['storage']['step']) ? $form_state['storage']['step'] : 1;
  $form['#last_step'] = 2;

  $form['title']['#element_validate'][]         = 'eve_account_node_form_step_title_validate';
  $form['api_key']['#element_validate'][]       = 'eve_account_node_form_step_api_key_validate';
  $form['user_id']['#element_validate'][]       = 'eve_account_node_form_step_user_id_validate';
  $form['character_id']['#element_validate'][]  = 'eve_account_node_form_step_character_id_validate';

  // Remove vertical tabs.
  unset($form['additional_settings']);
  // Remove other node options save Status.
  $form['options']['#type'] = 'container';
  foreach (element_children($form['options']) as $key) {
    if ($key != 'status') {
      $form['options'][$key]['#access'] = FALSE;
    }
  }

  if ($step < $form['#last_step']) {
    $form['actions']['submit'] = array(
      '#type'     => 'submit',
      '#value'    => t('Next'),
      '#submit'   => array('eve_account_node_form_step_submit', 'node_form_submit_build_node'),
    );
  }
  elseif ($step > 1) {
    $form['actions']['previous'] = array(
      '#type'     => 'submit',
      '#value'    => t('Previous'),
      '#submit'   => array('eve_account_node_form_step_submit_previous', 'node_form_submit_build_node'),
    );
  }

  // Call the step-specific form_alter for further tweaks.
  $function = "eve_form_eve_account_node_form_alter_step_$step";
  if (function_exists($function)) {
    $function($form, $form_state);
  }

  // Hide fields from display and prevent field validation unless its appropriate page
  foreach (eve_form_eve_account_node_form_steps() as $key => $step_current) {
    if ($step_current == $step) {
      if (isset($form['actions']['next'])) {
        $form['actions']['next']['#limit_validation_errors'][] = array($key);
      }
    }
    else {
      $form[$key]['#access'] = FALSE;
    }
  }
}

/**
 * Implements form step 1 additional alter
 */
function eve_form_eve_account_node_form_alter_step_1(&$form, &$form_state) {
  $form['actions']['preview']['#access'] = FALSE;
  $form['actions']['delete']['#access'] = FALSE;
}

/**
 * Implements form step 2 additional alter
 */
function eve_form_eve_account_node_form_alter_step_2(&$form, &$form_state) {
  $form['actions']['preview']['#access'] = FALSE;
  $form['actions']['delete']['#access'] = FALSE;
}

/**
 * Validates user_id
 */
function eve_account_node_form_step_user_id_validate($element, &$form_state) {
  $field = field_info_field('user_id');
  $conditions = array(
    array('type', 'node'),
    array('bundle', 'eve_account'),
    array('user_id_value', $form_state['values']['user_id'][LANGUAGE_NONE][0]['value']),
  );
  $result = field_attach_query($field['id'], $conditions);
  // 2 possibilities. 1) Our NID is null and there's a result. 2) Resulting NID does not match our NID (on node edits)
  if (count($result)) {
    $nids = array_keys($result['node']);
    if ($form_state['values']['nid'] === NULL) {
      form_set_error('user_id', t('Cannot register the same UserID twice'));
    }
    elseif ($form_state['values']['nid'] != $nids[0]) {
      form_set_error('user_id', t('UserID is already in use'));
    }
  }
}

/**
 * Validates that current API is used only once
 */
function eve_account_node_form_step_api_key_validate($element, &$form_state) {
  $field = field_info_field('api_key');
  $conditions = array(
    array('type', 'node'),
    array('bundle', 'eve_account'),
    array('api_key_value', $form_state['values']['api_key'][LANGUAGE_NONE][0]['value']),
  );
  $result = field_attach_query($field['id'], $conditions);
  // 2 possibilities. 1) Our NID is null and there's a result. 2) Resulting NID does not match our NID (on node edits)
  if (count($result)) {
    $nids = array_keys($result['node']);
    if ($form_state['values']['nid'] === NULL) {
      form_set_error('api_key', t('Cannot register the same API Key twice'));
    }
    elseif ($form_state['values']['nid'] != $nids[0]) {
      form_set_error('api_key', t('API Key is already in use'));
    }
  }
}

/**
 * Populates the node title on submit
 */
function eve_account_node_form_step_title_validate($element, &$form_state) {
  if (!form_get_errors() && isset($form_state['values']['user_id'][LANGUAGE_NONE][0]['value'])) {
    form_set_value($element, "EVE API Account " . $form_state['values']['user_id'][LANGUAGE_NONE][0]['value'], $form_state);
  }
}

/**
 * Not a real validate function. Uses submitted form values to populate character_id field value
 */
function eve_account_node_form_step_character_id_validate($element, &$form_state) {
  if (form_get_errors()) {
    return ;
  }
  $userID = $form_state['values']['user_id'][LANGUAGE_NONE][0]['value'];
  $apiKey = $form_state['values']['api_key'][LANGUAGE_NONE][0]['value'];
  $eveAccount = new eveAccount($userID, $apiKey);
  $value = array();
  foreach ($eveAccount->getCharacters() as $char) {
    $value[LANGUAGE_NONE][] = array('value' => $char->characterID);
  }
  // Display errors if any happened
  foreach ($eveAccount->getErrors() as $code => $description) {
    form_set_error('', $description);
  }
  // Do not allow setting value if error(s) happened
  if (!form_get_errors()) {
    form_set_value($element, $value, $form_state);
  }
}

/**
 * Single purpose function, sends our form to previous step
 */
function eve_account_node_form_step_submit_previous($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
  $form_state['storage']['step'] = isset($form_state['storage']['step']) ? $form_state['storage']['step'] : 2;
  $form_state['storage']['step']--;
}

/**
 * Sends our form to next step until last which is when it will stop rebuilding and will submit to be saved in db
 */
function eve_account_node_form_step_submit($form, &$form_state) {
  $form_state['rebuild'] = TRUE;

  $form_state['storage']['step'] = isset($form_state['storage']['step']) ? $form_state['storage']['step'] : 1;

  // On last step stop rebuilding and performing multistep form.
  if ($form_state['storage']['step'] == $form['#last_step']) {
    $form_state['rebuild'] = FALSE;
  }
  else {
    $form_state['storage']['step']++;
  }
}

/**
 * Tells which field appears on what form step. -1 means don't show.
 */
function eve_form_eve_account_node_form_steps() {
  return array(
    'title'           => -1,
    'author'          => -1,
    'revision_information' => -1,
    'options'         => -1,
    'user_id'         => 1,
    'api_key'         => 1,
    'character_id'    => 2,
  );
}

