<?php
/**
 * @file
 * module file for mongodb_spaces_overrides module.
 */

/**
 * Implements hook_ctools_plugin_api().
 *
 * @param string $module
 * @param string $api
 * @return multitype:number
 */
function mongodb_spaces_overrides_ctools_plugin_api($module, $api) {
  if ($module == 'spaces' && $api == 'plugins') {
    return array('version' => 3);
  }
}

/**
 * Implements hook_spaces_plugins().
 */
function mongodb_spaces_overrides_spaces_plugins() {
  $plugins = array();
  $plugins['mongodb_spaces_overrides_controller'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'mongodb_spaces_overrides') . '/plugins',
      'file' => 'mongodb_spaces_overrides_controller.inc',
      'class' => 'mongodb_spaces_overrides_controller',
      'parent' => 'spaces_controller',
    ),
  );
  $plugins['mongodb_spaces_overrides_controller_context'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'mongodb_spaces_overrides') . '/plugins',
      'file' => 'mongodb_spaces_overrides_controller_context.inc',
      'class' => 'mongodb_spaces_overrides_controller_context',
      'parent' => 'mongodb_spaces_overrides_controller',
    ),
  );
  $plugins['mongodb_spaces_overrides_controller_variable'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'mongodb_spaces_overrides') . '/plugins',
      'file' => 'mongodb_spaces_overrides_controller_variable.inc',
      'class' => 'mongodb_spaces_overrides_controller_variable',
      'parent' => 'mongodb_spaces_overrides_controller',
    ),
  );
  return $plugins;
}

/**
 * Implements hook_spaces_registry_alter().
 *
 * @param array $registry
 */
function mongodb_spaces_overrides_spaces_registry_alter(&$registry) {
  if (isset($registry['controllers']['context'])) {
    $registry['controllers']['context']['plugin'] = 'mongodb_spaces_overrides_controller_context';
  }
  if (isset($registry['controllers']['variable'])) {
    $registry['controllers']['variable']['plugin'] = 'mongodb_spaces_overrides_controller_variable';
  }
}

function mongodb_spaces_overrides_migrate_to_mongodb() {
  $query = db_select('spaces_overrides', 's')
    ->fields('s', array('id'))
    ->condition(
      db_or()
        ->condition('s.object_type', 'variable')
        ->condition('s.object_type', 'context')
    )
    ->distinct();
  $spaces = $query->execute();

  foreach ($spaces as $space) {
    $overrides = db_select('spaces_overrides', 's')
      ->fields('s', array('type', 'id', 'object_type', 'object_id', 'value'))
      ->condition('s.id', $space->id)
      ->execute();
    foreach($overrides as $override) {
      $override = array(
        'type' => $override->type,
        'id' => $override->id,
        'object_type' => $override->object_type,
        'object_id' => $override->object_id,
        'value' => unserialize($override->value),
      );
      mongodb_collection('spaces_overrides')
        ->insert($override);
    }
  }
}

function mongodb_spaces_overrides_migrate_to_db() {
  if ($spaces = mongodb_collection('spaces_overrides')->db->command(array('distinct' => 'spaces_overrides', 'key' => 'id'))) {
    foreach ($spaces['values'] as $space_id) {
      $overrides = mongodb_collection('spaces_overrides')->find(array('id' => $space_id));
      foreach($overrides as $mid => $override) {
        $db_override = array(
          'type' => $override['type'],
          'id' => $override['id'],
          'object_type' => $override['object_type'],
          'object_id' => $override['object_id'],
          'value' => serialize($override['value']),
        );
        db_insert('spaces_overrides')
          ->fields($db_override)
          ->execute();
      }
    }
  }
}
