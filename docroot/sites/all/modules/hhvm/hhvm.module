<?php

/**
 * @file
 * HHVM module routines.
 */

/**
 * Implements hook_requirements().
 */
function hhvm_requirements() {
  $requirements = array();
  $t = get_t();

  if (!defined('HHVM_VERSION')) {
    return NULL;
  }
  $requirements['hhvminfo'] = array(
    'title' => $t('HHVM information'),
    'value' => $t(
      'HHVM detected (!infolink)',
      array(
        '!infolink' => l(
          $t('more information'),
          'admin/reports/status/hhvm'
        )
      )
    ),
  );

  return $requirements;
}

/**
 * Implements hook_menu().
 */
function hhvm_menu() {

  $items['admin/reports/status/hhvm'] = array(
    'title' => 'HHVM info',
    'page callback' => 'hhvm_info',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function hhvm_info() {
  drupal_add_css('.hhvminfo td{max-width: 180px;}.hhvmfull{max-width: 100%;}', 'inline');
  $attributes = array('class' => array('hhvminfo'));
  if (($pidfile = ini_get('pid')) || ($pidfile = ini_get('hhvm.pid_file'))) {
    $uptime = ($pidfile) && ($mtime = @filemtime($pidfile)) ? (
    new DateTime(
      '@' . $mtime
    )
    )->diff(new DateTime('NOW'))->format(
        '%a days, %h hours, %i minutes'
      ) : '<i>unknown<i>';
    if (!($inifile = (function_exists(
        'php_ini_loaded_file'
      ) ? php_ini_loaded_file() : '')) && ($pid = @file_get_contents($pidfile))
      && ($cmdline = @file_get_contents("/proc/$pid/cmdline"))
    ) {
      $inifile = preg_match(
        '@-?-c(onfig)?\s*([^ ]+?)($|\s|--)@',
        $cmdline,
        $match
      ) ? $match[2] : '';
    }
  }
  else {
    $uptime = $inifile = '<i>unknown</i>';
  }

  $data = array();

  $top = array();
  $top[] = array(
    'Host',
    function_exists('gethostname') ? @gethostname() : @php_uname('n')
  );
  $top[] = array('System', php_uname());

  $top[] = array('PHP Version', phpversion());
  $top[] = array('HHVM Version', ini_get('hphp.compiler_version'));
  $top[] = array('HHVM compiler id', ini_get('hphp.compiler_id'));
  $top[] = array('SAPI', php_sapi_name() . ' ' . ini_get('hhvm.server.type'));
  $top[] = array('Loaded Configuration File', $inifile);
  $top[] = array('Uptime', $uptime);

  $headers = array('name', 'value');
  $markup = theme(
    'table',
    array(
      'header' => $headers,
      'rows' => $top,
      'attributes' => $attributes,
      'sticky' => FALSE
    )
  );
  $data['summary'] = array(
    '#type' => 'container',
    '#prefix' => '<h2>' . t('Summary') . '</h2>
    <a href="#ini">' . t('Ini') . '</a>
    <a href="#extensions">' . t('Extensions') . '</a>
    <a href="#constants">' . t('Constants') . '</a>
    <a href="#globals">' . t('Globals') . '</a>
    ',
  );

  $data['summary']['info'] = array(
    '#markup' => $markup,
  );

  $data['ini'] = array(
    '#type' => 'container',
    '#prefix' => '<h2 id="ini">' . t('Ini') . '</h2><a href="#page-title">' . t(
        'back to top'
      ) . '</a>',
  );
  $ini = ini_get_all();
  $headers = array(
    t('Directive'),
    t('Global Value'),
    t('Local Value'),
    t('Access')
  );
  $rows = array();
  foreach ($ini as $directive => $values) {
    $rows[] = array(
      $directive,
      $values['global_value'],
      $values['local_value'],
      $values['access']
    );
  }
  $data['ini']['info'] = array(
    '#markup' => theme(
      'table',
      array('header' => $headers, 'rows' => $rows, 'attributes' => $attributes)
    ),
  );

  $extensions = get_loaded_extensions(TRUE);
  $data['extensions'] = array(
    '#type' => 'container',
    '#prefix' => '<h2 id="extensions">' . t(
        'Extensions'
      ) . '</h2><a href="#page-title">' . t('back to top') . '</a>',
  );

  $data['extensions']['info'] = array(
    '#markup' => '<p class="hhvmfull">' . implode(', ', $extensions) . '</p>',
  );

  $constants = get_defined_constants(TRUE);
  $data['constants'] = array(
    '#type' => 'container',
    '#prefix' => '<h2 id="constants">' . t(
        'Constants'
      ) . '</h2><a href="#page-title">' . t('back to top') . '</a>',

  );

  $headers = array(t('Name of the constant'), t('Value'));
  $rows = array();
  foreach ($constants as $block => $srows) {
    $data['constants'][$block] = array(
      '#type' => 'container',
      '#prefix' => '<h3>' . $block . '</h3><a href="#page-title">' . t(
          'back to top'
        ) . '</a>',
    );
    foreach ($srows as $key => $value) {
      $rows[] = array($key, $value);
    }
    $data['constants'][$block]['info'] = array(
      '#markup' => theme(
        'table',
        array(
          'header' => $headers,
          'rows' => $rows,
          'attributes' => $attributes
        )
      )
    );
  }

  $data['globals'] = array(
    '#type' => 'container',
    '#prefix' => '<h2 id="globals">' . t(
        'Globals'
      ) . '</h2><a href="#page-title">' . t('back to top') . '</a>',

  );
  $order = array_flip(
    array('_SERVER', '_ENV', '_COOKIE', '_GET', '_POST', '_REQUEST', '_FILES')
  );

  $headers = array(t('Name'), t('Value'));
  foreach ($order as $key => $ignore) {
    if (!isset($GLOBALS[$key])) {
      continue;
    }
    $data['globals'][$key] = array(
      '#type' => 'container',
      '#prefix' => '<h3>' . $key . '</h3><a href="#page-title">' . t(
          'back to top'
        ) . '</a>',
    );
    $rows = array();
    foreach ($GLOBALS[$key] as $gkey => $value) {
      $rows[] = array($gkey, $value);
    }
    if (empty($rows)) {
      continue;
    }
    $data['globals'][$key]['info'] = array(
      '#markup' => theme(
        'table',
        array(
          'header' => $headers,
          'rows' => $rows,
          'attributes' => $attributes
        )
      )
    );
  }

  return $data;
}
