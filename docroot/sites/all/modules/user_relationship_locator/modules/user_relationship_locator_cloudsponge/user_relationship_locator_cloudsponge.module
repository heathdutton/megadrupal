<?php
/**
 * @file
 * Basic implementation of User Relationship Locator network.
 */

/**
 * Implements hook_urlocator_user_query().
 * Get a list of a current users relationships and build out a list of uids
 *
 * @param $uid
 *   The user ID we want to find matches to almost always actual current user
 *
 * @return array
 *   Returns an array of uids for main locator module to combine with results from other submodules
 */
function user_relationship_locator_cloudsponge_urlocator_user_query($uid) {
  $matches = array();

  $query = db_select('user_relationship_locator_cloudsponge', 'url');
  $query->fields('u', array('uid'));
  $query->Join('users', 'u', 'url.mail = u.mail');
  $query->condition('url.uid', $uid);
  $query->orderBy('RAND()');
  $results = $query->execute()->fetchCol();

  foreach ($results as $result) {
    $matches[$result] = 99;
  }

  unset($matches[$uid]);

  return $matches;
}

/**
 * Implements hook_cloudsponge_all_contacts().
 */
function user_relationship_locator_cloudsponge_cloudsponge_all_contacts($emails, $owner, $source) {
  $emails = _user_relationship_locator_cloudsponge_prepare_emails($emails);
  $account = $GLOBALS['user'];

  $query = db_insert('user_relationship_locator_cloudsponge')->fields(array('uid', 'mail', 'name', 'source'));
  foreach ($emails as $mail => $name) {
    $query->values(array(
      'uid' => $account->uid,
      'mail' => $mail,
      'name' => $name,
      'source' => $source,
    ));
  }
  $query->execute();

  // Invoke hook_urlocator_data_imported.
  module_invoke_all('urlocator_data_imported', $account, 'user_relationship_locator_cloudsponge');
}

/**
 * Implements hook_user_delete().
 */
function user_relationship_locator_cloudsponge_user_delete($account) {
  db_delete('user_relationship_locator_cloudsponge')
    ->condition('uid', $account->uid)
    ->execute();
}

/**
 * Implements hook_urlocator_load_buttons().
 */
function user_relationship_locator_cloudsponge_urlocator_load_buttons() {
  cloudsponge_add_js();
  $buttons = array();

  // @TODO: Add settings for it.
  $yahoo_img = theme('image', array('path' => 'http://www.cloudsponge.com/images/address_books/yahoo.png'));
  $buttons['cloudsponge-yahoo'] = l($yahoo_img, '', array(
    'html' => TRUE,
    'attributes' => array(
      'onclick' => "return cloudsponge.launch('yahoo');"
    ),
  ));

  $gmail_img = theme('image', array('path' => 'http://www.cloudsponge.com/images/address_books/google.png'));
  $buttons['cloudsponge-gmail'] = l($gmail_img, '', array(
    'html' => TRUE,
    'attributes' => array(
      'onclick' => "return cloudsponge.launch('gmail');"
    ),
  ));

  $windowslive_img = theme('image', array('path' => 'http://www.cloudsponge.com/images/address_books/msn.png'));
  $buttons['cloudsponge-windowslive'] = l($windowslive_img, '', array(
    'html' => TRUE,
    'attributes' => array(
      'onclick' => "return cloudsponge.launch('windowslive');"
    ),
  ));

  $aol_img = theme('image', array('path' => 'http://www.cloudsponge.com/images/address_books/aol.png?1372350809'));
  $buttons['cloudsponge-aol'] = l($aol_img, '', array(
    'html' => TRUE,
    'attributes' => array(
      'onclick' => "return cloudsponge.launch('aol');"
    ),
  ));

  $plaxo_img = theme('image', array('path' => 'http://www.cloudsponge.com/images/address_books/plaxo_button.png'));
  $buttons['cloudsponge-plaxo'] = l($plaxo_img, '', array(
    'html' => TRUE,
    'attributes' => array(
      'onclick' => "return cloudsponge.launch('plaxo');"
    ),
  ));

  $outlook_img = theme('image', array('path' => 'http://www.cloudsponge.com/images/address_books/microsoft.png'));
  $buttons['cloudsponge-outlook'] = l($outlook_img, '', array(
    'html' => TRUE,
    'attributes' => array(
      'onclick' => "return cloudsponge.launch('outlook');"
    ),
  ));

  $addressbook_img = theme('image', array('path' => 'http://www.cloudsponge.com/images/address_books/apple.png'));
  $buttons['cloudsponge-addressbook'] = l($addressbook_img, '', array(
    'html' => TRUE,
    'attributes' => array(
      'onclick' => "return cloudsponge.launch('addressbook');"
    ),
  ));

  return $buttons;
}

/**
 * Prepare emails to insert.
 *
 * @param $emails
 *   Emails from cloudsponge JSON.
 *
 * @return array
 *   Emails in format: array(mail => name).
 */
function _user_relationship_locator_cloudsponge_prepare_emails($emails) {
  // Get all emails from current user.
  $existed_emails = db_select('user_relationship_locator_cloudsponge', 'c')
    ->fields('c', array('mail', 'name'))
    ->condition('c.uid', $GLOBALS['user']->uid)
    ->execute()
    ->fetchAllKeyed();

  // Delete existed emails.
  $output = array();
  foreach ($emails as $email) {
    $mail = trim($email->email);
    $name = trim($email->name);

    if (valid_email_address($mail) && !isset($existed_emails[$mail])) {
      $output[$mail] = $name;
    }
  }

  return $output;
}
