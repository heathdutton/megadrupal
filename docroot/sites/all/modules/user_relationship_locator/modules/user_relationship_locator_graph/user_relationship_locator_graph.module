<?php
/**
 * @file
 * Basic implementation of User Relationship Locator network
 * to provide a local relationship graph.
 */

/**
 * Implements hook_urlocator_user_query().
 */
function user_relationship_locator_graph_urlocator_user_query($currentuser) {
  $matches = array();
  $iteration = 1;

  // Default to friends of friends (depth of 1)
  // unless we have already specified more.
  $depth = variable_get('user_relationship_locator_graph_depth', '1');

  $people_you_know = user_relationship_locator_graph_relations_lookup($currentuser, $iteration);
  foreach ($people_you_know as $key => $value) {
    $init_matches = user_relationship_locator_graph_relations_lookup($key, $iteration, $currentuser);
    foreach ($init_matches as $key => $value) {
      if (!array_key_exists($key, $people_you_know)) {
        $matches[$key] = $iteration;
      }
    }
  }

  for ($iteration = 1; $iteration <= $depth; $iteration++) {
    foreach ($matches as $userid => $score) {
      // @TODO: only check values added in the last round.
      $deeper_matches = user_relationship_locator_graph_relations_lookup($userid, $iteration, $currentuser);
      foreach ($deeper_matches as $key => $value) {
        $matches[$key] = array_key_exists($key, $matches)
          ? $matches[$key] + 0.1
          : ($iteration == 1) ? 0.5 : 0.2;
      }
    }
  }

  return $matches;
}

/**
 * Helper function for looking up a given users relations.
 *
 * @param object $currentuser
 *   User object.
 *
 * @param int $iteration
 *   Iteration.
 * @param object $exclude
 *  User object to exclude.
 *
 * @return array
 *   List of uids.
 */
function user_relationship_locator_graph_relations_lookup($currentuser, $iteration, $exclude = NULL) {
  // UR API or direct db query?
  // @TODO: log performance here.
  $matches = array();

  $relationship_id = variable_get('user_relationship_locator_relationship', '');
  $relationships = user_relationships_load(array('rtid' => $relationship_id, 'user' => $currentuser), array('include_twoway_reverse' => TRUE));

  foreach ($relationships as $relationship) {
    // Append both ways.
    // @TODO: do we want more or less weight depending on directionality?
    $matches[$relationship->requestee_id] = $iteration;
    $matches[$relationship->requester_id] = $iteration;
  }

  // Exclude provided user.
  if (!empty($exclude)) {
    unset($matches[$exclude]);
  }

  return $matches;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * Alter main locator setting form to set the depth
 * we should search for connections.
 */
function user_relationship_locator_graph_form_user_relationship_locator_admin_alter(&$form, &$form_state) {
  $form['user_relationship_locator_graph_depth'] = array (
    '#type' => 'textfield',
    '#title' => t('Depth to search for relationship matches.'),
    '#description' => t('1 = Friend of a Friend 2 = Friend of a Friend of a Friend etc.'),
    '#default_value' => variable_get('user_relationship_locator_graph_depth',''),
    '#maxlength' => 1,
    '#size' => 1,
  );

  return $form;
}
