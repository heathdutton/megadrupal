<?php
/**
 * @file
 * Basic implementation of User Relationship Locator network
 * to provide a local relationship graph.
 */

module_load_include('inc', 'fboauth', 'includes/fboauth.fboauth');

/**
 * Implements hook_urlocator_user_query().
 */
function user_relationship_locator_facebook_urlocator_user_query($uid) {
  $matches = array();

  $query = db_select('user_relationship_locator_facebook', 'url');
  $query->fields('fu', array('uid'));
  $query->Join('fboauth_users', 'fu', 'url.fbid = fu.fbid');
  $query->condition('url.uid', $uid);
  $query->orderBy('RAND()');
  $results = $query->execute()->fetchCol();

  foreach ($results as $result) {
    $matches[$result] = 99;
  }

  unset($matches[$uid]);

  return $matches;
}

/**
 * Implements hook_user_delete().
 */
function user_relationship_locator_facebook_user_delete($account) {
  db_delete('user_relationship_locator_facebook')
    ->condition('uid', $account->uid)
    ->execute();
}

/**
 * Implements hook_fboauth_actions_alter().
 *
 * @TODO: Hack: Rewriting 'connect' callback to authorize user before saving friends to database.
 */
function user_relationship_locator_facebook_fboauth_actions_alter(&$actions) {
  $actions['connect']['callback'] = 'user_relationship_locator_facebook_fboauth_action_connect';
}

/**
 * Facebook OAuth action callback.
 * Find our friend list for comparison.
 */
function user_relationship_locator_facebook_fboauth_action_connect($app_id, $access_token) {
  // Call original 'connect' callback.
  module_load_include('fboauth.inc', 'fboauth', 'includes/fboauth');
  fboauth_action_connect($app_id, $access_token);

  $friends = fboauth_graph_query('me/friends', $access_token);
  $account = $GLOBALS['user'];

  if (is_array($friends->data) && !empty($friends->data)) {
    $update = (bool) user_relationship_locator_facebook_friends_count($account->uid);

    // Delete existed friends.
    db_delete('user_relationship_locator_facebook')
      ->condition('uid', $account->uid)->execute();

    // Add new friends.
    $query = db_insert('user_relationship_locator_facebook')->fields(array('uid', 'fbid'));
    foreach ($friends->data as $friend) {
      $query->values(array(
        'uid' => $account->uid,
        'fbid' => $friend->id,
      ));
    }
    $query->execute();
  }

  // Invoke hook_urlocator_data_imported first time only.
  $update || module_invoke_all('urlocator_data_imported', $account, 'user_relationship_locator_facebook');
}

/**
 * Helper function to see if the current user has friends.
 *
 * @param int $uid
 *   User ID.
 *
 * @return int
 *   Count of friends.
 */
function user_relationship_locator_facebook_friends_count($uid) {
  return db_select('user_relationship_locator_facebook', 'u')
    ->condition('u.uid', $uid)
    ->countQuery()
    ->execute()
    ->fetchField();
}

/**
 * Implements hook_urlocator_load_buttons().
 */
function user_relationship_locator_facebook_urlocator_load_buttons() {
  $buttons = array();

  if (user_relationship_locator_facebook_friends_count($GLOBALS['user']->uid) == 0) {
    $buttons['facebook'] = fboauth_action_display('user_relationship_locator_users');
  }

  return $buttons;
}
