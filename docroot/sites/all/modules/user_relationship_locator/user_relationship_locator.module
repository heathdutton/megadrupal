<?php
/**
 * @file
 * Administrative functionality, each individual providers
 * info located within individual submodules.
 */

/**
 * Implements hook_permission().
 */
function user_relationship_locator_permission() {
  return array(
    'administer user relationship locator' => array(
      'title' => t('Administer relationship location'),
      'description' => t('Perform administration tasks for User Relationship Locator.'),
    ),
    'locate relationships' => array(
      'title' => t('Locate relationships'),
      'description' => t('Locate relationships using User Relationship Locator.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function user_relationship_locator_menu() {
  $items = array();

  $items['admin/config/people/locator'] = array(
    'title' => 'Relationship Locator',
    'description' => 'Configure how results are returned to the relationship locator.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_relationship_locator_admin'),
    'access arguments' => array('administer user relationship locator'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'user_relationship_locator.admin.inc',
  );

  $items['relationship_locator/%user/ignore'] = array(
    'title' => 'Ignore suggestion',
    'access arguments' => array('locate relationships'),
    'page callback' => 'user_relationship_locator_ignore_page',
    'page arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file' => 'user_relationship_locator.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_flush_caches().
 */
function user_relationship_locator_flush_caches() {
  return array('cache_user_relationship_locator');
}

/**
 * Implements hook_block_info().
 */
function user_relationship_locator_block_info() {
  $blocks['default'] = array(
    'info' => t('People you may know'),
    'cache' => DRUPAL_CACHE_PER_USER,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function user_relationship_locator_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'default':
      $requester = $GLOBALS['user'];

      $min = variable_get('user_relationship_locator_min', 0);
      $max = variable_get('user_relationship_locator_max', 0);

      if ($matches = user_relationship_locator_matches($requester->uid, $max, $min)) {
        $rtype_id = variable_get('user_relationship_locator_relationship', '0');
        $relationship = user_relationships_type_load($rtype_id);

        $block['subject'] = t('People you may know.');
        $block['content'] = array(
          '#theme' => 'user_relationship_locator_default_block',
          '#requester' => $requester,
          '#relationship' => $relationship,
          '#matches' => $matches,
        );
      }

      break;
  }

  return $block;
}

/**
 * Implements hook_theme().
 */
function user_relationship_locator_theme($existing, $type, $theme, $path) {
  return array(
    'user_relationship_locator_default_block' => array(
      'variables' => array(
        'requester' => NULL,
        'relationship' => NULL,
        'matches' => array(),
      ),
      'template' => 'user_relationship_locator_default_block',
      'path' => $path . '/templates',
      'file' => 'theme.inc',
    ),
    'user_relationship_locator_default_block_item' => array(
      'variables' => array(
        'requester' => NULL,
        'requestee' => NULL,
        'relationship' => NULL,
      ),
      'template' => 'user_relationship_locator_default_block_item',
      'path' => $path . '/templates',
      'file' => 'theme.inc',
    ),
    'user_relationship_locator_load_buttons' => array(
      'variables' => array(),
      'template' => 'user_relationship_locator_load_buttons',
      'path' => $path . '/templates',
      'file' => 'theme.inc',
    ),
  );
}

/**
 * Add user to ignore table.
 *
 * @param object $user
 *   User object.
 * @param object $suggestion
 *   Suggestion object.
 */
function user_relationship_locator_ignore($user, $suggestion) {
  db_insert('user_relationship_locator_ignore')
    ->fields(array(
      'uid' => $user->uid,
      'suggestion' => $suggestion->uid,
    ))->execute();
}

/**
 * Returns a list of user objects who are possible matches.
 *
 * @param int $uid
 *   User id.
 * @param int $max
 *   Maximum limit to show. 0 means - all.
 * @param int $min
 *   Minimum limit to show. 0 means - add random users.
 *
 * @return array
 *   List of User objects.
 */
function user_relationship_locator_matches($uid, $max = 0, $min = 0) {
  $cache = cache_get($uid, 'cache_user_relationship_locator');

  if (!$cache) {
    $rtid = variable_get('user_relationship_locator_relationship', '0');

    $matches = array();

    foreach (module_implements('urlocator_user_query') as $module) {
      $network_users = module_invoke($module, 'urlocator_user_query', $uid);

      if (is_array($network_users)) {
        // Check for users already returned.
        foreach ($network_users as $key => $value) {
          $matches[$key] = isset($matches[$key]) ? $matches[$key] + 0.1 : $value;
        }
      }
    }

    // Sort by final score.
    arsort($matches);

    // user_load doesn't like our score values.
    $matches = array_keys($matches);

    // Get existing & ignored users.
    $existing = _user_relationship_locator_existing($uid, $rtid);
    $ignored = _user_relationship_locator_ignored($uid);

    $strip = array_merge($existing, $ignored);

    // Strip from matches.
    $matches = array_diff($matches, $strip);

    cache_set($uid, $matches, 'cache_user_relationship_locator');
  }
  else {
    $matches = $cache->data;
  }

  // Cut results by max limit.
  if ($max) {
    $matches = array_slice($matches, 0, $max, TRUE);
  }

  // If count of matches is not enough then load more random users.
  if (count($matches) < $min) {
    $num_needed = $min - count($matches);
    $filler = _user_relationship_locator_filler($uid, $num_needed);
    $matches = array_merge($matches, $filler);
  }

  return user_load_multiple($matches);
}

/**
 * Ensure our min is met with random users if enough matches aren't found.
 *
 * @param int $uid
 *   User id.
 * @param int $number
 *   Required number of filler spots.
 *
 * @return array
 *   List of User ids.
 */
function _user_relationship_locator_filler($uid, $number) {
  return db_select('users', 'u')
    ->fields('u', array('uid'))
    ->condition('u.uid', 1, '>')
    ->condition('u.uid', $uid, '<>')
    ->orderBy('RAND()')
    ->range(0, $number)
    ->execute()->fetchCol();
}

/**
 * Get existing users.
 *
 * @param int $uid
 *   User id.
 * @param int $rtid
 *   Relationship id.
 *
 * @return array
 *   List of User ids.
 */
function _user_relationship_locator_existing($uid, $rtid) {
  // Remove any returned uids that the user already has a relationship with.
  return db_select('user_relationships', 'u')
    ->fields('u', array('requestee_id'))
    ->condition('u.rtid', $rtid)
    ->condition('u.requester_id', $uid)
    ->execute()->fetchCol();
}


/**
 * Get ignored users.
 *
 * @param int $uid
 *   User id.
 *
 * @return array
 *   List of User ids.
 */
function _user_relationship_locator_ignored($uid) {
  return db_select('user_relationship_locator_ignore', 'i')
    ->fields('i', array('suggestion'))
    ->condition('i.uid', $uid)
    ->execute()
    ->fetchCol();
}
