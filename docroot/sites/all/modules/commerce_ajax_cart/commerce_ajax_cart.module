<?php

define('COMMERCE_AJAX_CART_CACHE_PREFIX', 'commerce_ajax_cart_') ;
define('COMMERCE_AJAX_CART_DEFAULT_VIEW','commerce_cart_block');

/**
 * Implement MODULENAME_views_api(),
 */

function commerce_ajax_cart_views_api() {
  return array(	
    'api' => 3,
	  'path' => drupal_get_path('module', 'commerce_ajax_cart') . '/includes/views',
  );
}

/**
 * Implements hook_menu().
 */
function commerce_ajax_cart_menu() {
  $items['cart/ajax'] = array(
    'page callback'    => 'commerce_ajax_cart_show_contents',
    'access callback'  => 'commerce_ajax_validate_post_request',
    'type'             => MENU_CALLBACK
  ) ;
  $items['cart/ajax/update'] = array(
    'page callback'    => 'commerce_ajax_cart_update_block',
    'access callback'  => 'commerce_ajax_validate_post_request',
    'type'             => MENU_CALLBACK
  ) ;
  $items['cart/ajax/block'] = array(
    'page callback'    => 'commerce_ajax_cart_show_contents_block',
    'access callback'  => 'commerce_ajax_validate_post_request',
    'type'             => MENU_CALLBACK
  ) ;
  $items['admin/commerce/config/advanced-settings/ajax-cart'] = array(
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('commerce_ajax_cart_settings_form'),
    'file'             => 'commerce_ajax_cart.admin.inc' ,
    'title'            => 'Commerce ajax cart settings',
    'access arguments' => array('configure store'),
    'type' => MENU_NORMAL_ITEM
  ) ;
  return $items ;
}

function commerce_ajax_cart_get_defaults() {
  return array(
    'my' => 'left top',
    'at' => 'left bottom',
    'collision' => ''
  );
}

function commerce_ajax_cart_preprocess_block(&$variables) {
  if ( 'commerce_cart' == $variables['block']->module && $variables['block_id'] == 1) {
    $variables['content'] = l( '<span>'. t('Show cart').'</span>' , 'cart' ,array( 'html' => true, 'attributes' => array('class' => array('commerce-ajax-cart-loader'))));
  }
}

function commerce_ajax_cart_show_contents_block() {
  $content = commerce_cart_block_view('cart') ;
  print $content['content'] ;
}

function commerce_ajax_validate_post_request() {
  if ( strtolower($_SERVER['REQUEST_METHOD']) !== 'post' ) {
    drupal_goto('cart');
  }
  return true ;
}

function commerce_ajax_cart_preprocess_html() {
  $defaults = variable_get('commerce_ajax_cart_position',commerce_ajax_cart_get_defaults()) ;
  drupal_add_library('system', 'ui.position');
  drupal_add_js('misc/ajax.js',array('type' => 'file' , 'weight' => -100 ));
  drupal_add_js( drupal_get_path('module','commerce_ajax_cart') . '/js/commerce_ajax_cart.js',array('type' => 'file', 'scope' => 'footer' , 'weight' => 100 ));
  drupal_add_js(array('commerce_ajax_cart' => array(
                      'position' => $defaults,
                      'update_url' => url('cart/ajax/update'),
                      'update_url_block' => url('cart/ajax/block'),
                      'ajax_url' => url('cart/ajax'),
                      'text' => t(variable_get('commerce_ajax_cart_text', 'There is no product in your cart' )) )),
                'setting') ;
}

/**
 * Page callback for show cart contents
 */
function commerce_ajax_cart_show_contents() {
  global $user ;
  $cart_id = commerce_cart_order_id($user->uid);
  $cid = COMMERCE_AJAX_CART_CACHE_PREFIX . $cart_id ;
  if ( FALSE !== ($cache = cache_get($cid,'cache')) ) {
    print $cache->data; 
  } else {
    $view = views_get_view('commerce_cart_block');
    $view->set_arguments(array($cart_id)) ;
    $output = $view->execute_display() ;
    if ( !$view->result || count($view->result) == 0 ) {
      $output = '<div class="empty-cart">' . variable_get('commerce_ajax_cart_text', 'There is no product in your cart' ) . '</div>' ;
    }
    cache_set($cid, $output, 'cache', CACHE_TEMPORARY) ;
    print $output;
  }
}

/**
 * Page callback for update cart block
 */

function commerce_ajax_cart_update_block() {
  global $user ;
  $cart_id = commerce_cart_order_id($user->uid);
  print views_embed_view('shopping_cart','block',$cart_id) ;
}

/**
 * Implements hook_entity_info_alter().
 *
 * Create new view mode for product display, commerce product.
 */
function commerce_ajax_cart_entity_info_alter(&$entity_info) {
  $view_mode = array('commerce_product_in_cart' => array(
    'label' => t('Cart view mode'),
    'custom settings' => TRUE,
  ));
  $entity_info['commerce_line_item']['view modes'] += $view_mode ;
  $entity_info['commerce_product']['view modes'] += $view_mode ;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function commerce_ajax_cart_form_commerce_cart_add_to_cart_form_alter(&$form, $form_state, $form_id) {
  $form['submit']['#ajax'] = array(
    'callback' => 'commerce_ajax_cart_callback',
  );
}

function commerce_ajax_cart_callback($form, &$form_state){
  global $user;

  $form = drupal_rebuild_form($form['#form_id'], $form_state, $form);

  $commands = array();
  $commands[] = array('command' => 'commerce_ajax_cart_update') ;
  $commands[] = ajax_command_prepend('#block-system-main', theme('status_messages'));
  $commands[] = ajax_command_replace('.' . drupal_html_class($form['#form_id']), drupal_render($form));
  $commands[] = array(
  	'command' => 'commerceAjaxCartFireTrigger',
  	'data'    => $form['#form_id'] 
  );

  return array('#type' => 'ajax', '#commands' => $commands);
}
/**
 * Implement hook_boost_is_cacheable
 *
 * @param unknown $parts
 * @param string $request_type
 * @return boolean
 */
function commerce_ajax_cart_boost_is_cacheable($parts, $request_type = 'normal') {
  global $user;
  $urlParts = explode('/', $parts['normal_path']) ;
  if ( isset($urlParts[0]) && isset($urlParts[1]) && $urlParts[0] == 'cart' ) {
    if ( $urlParts[1] == 'ajax' ) {
      $parts['is_cacheable'] = FALSE;
      $parts['is_cacheable_reason'] = 'Do not cache cart update urls.';
    }
  } else {
    $parts['is_cacheable'] = TRUE;
  }
  return $parts;
}

function commerce_ajax_cart_entity_update($entity, $type) {
  if ( $type != 'commerce_order' ) return ;
  if ( $entity->status != 'cart' ) return ;
  $cid = COMMERCE_AJAX_CART_CACHE_PREFIX . $entity->order_number ;
  cache_clear_all($cid,'cache') ;
  commerce_ajax_cart_generate_cache($entity->order_number);
}

function commerce_ajax_cart_entity_delete($entity, $type) {
  if ( $type != 'commerce_order' ) return ;
  $cid = COMMERCE_AJAX_CART_CACHE_PREFIX . $entity->order_number ;
  cache_clear_all($cid,'cache') ;
}

function commerce_ajax_cart_generate_cache($cart_id) {
  $cid = COMMERCE_AJAX_CART_CACHE_PREFIX . $cart_id ;
  $view = views_get_view(variable_get('commerce_ajax_cart_view',COMMERCE_AJAX_CART_DEFAULT_VIEW));
  if ( !$view ) {
  	$output = t('Please configure view settings for ajax cart @link',array('@link' => l('Settings','admin/commerce/config/advanced-settings/ajax-cart') ) );
  	cache_set($cid, $output, 'cache', CACHE_TEMPORARY) ;
  	return;
  }
  $view->set_arguments(array($cart_id)) ;
  $output = $view->execute_display() ;
  if ( !$view->result || count($view->result) == 0 ) {
    $output = '<div class="empty-cart">' . variable_get('commerce_ajax_cart_text', 'There is no product in your cart' ) . '</div>' ;
  }
  cache_set($cid, $output, 'cache', CACHE_TEMPORARY) ;
}