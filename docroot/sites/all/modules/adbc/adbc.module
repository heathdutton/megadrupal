<?php

/**
 * @file
 *   Provides an alternative cache backend.
 */

/**
 * Implements hook_help().
 */
function adbc_help($path, $arg) {
  switch ($path) {
    case 'admin/help#adbc':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Alternative Database Cache module is a drop-in replacement for Drupal Core\'s default cache implementation. Its goal is to fix long-standing problems with Drupal\'s core caching mechanism.');
      $output .= '<p>' . t('Further details about the problems this module attempts to solve can be found in the "additional reading" section below.');
      $output .= '<h3>' . t('Installation') . '</h3>';
      $output .= '<ol>';
      $output .= '<li>' . t('Enable this module like you would any module, whether at /admin/modules or via drush.') . '</li>';
      $output .= '<li>' . t('In your settings.php file, you\'ll need to add the following lines to force Drupal to use the ADBC backend.');
      $output .= '<pre><code>' . "/**\n * ADBC settings.\n */\n\$conf['cache_backends'][] = './sites/all/modules/adbc/adbc.cache.inc';\n\$conf['cache_default_class'] = 'AlternativeDrupalDatabaseCache';" . '</code></pre></li>';
      $output .= '<li>' . t('Note: you may need to change the path to adbc.cache.inc depending on how your site\'s structure is set up.') . '</li>';
      $output .= '<li>' . t('This module introduces a new "cache garbage collection frequency" setting. You may want to configure that') . ' ' . l(t('on the performance settings page'), 'admin/config/development/performance') . '.</li>';
      $output .= '</ol>';
      $output .= '<h3>' . t('Additional Reading') . '</h3>';
      $output .= '<ul>';
      $output .= '<li>' . l(t('How Drupal\'s cron is killing you in your sleep'), 'http://www.metaltoad.com/blog/how-drupals-cron-killing-you-your-sleep-simple-cache-warmer', array('attributes' => array('target' => '_blank'))) . '</li>';
      $output .= '<li>' . l(t('Page and block caches are cleared the same way on cron as on content change'), 'http://drupal.org/node/891600', array('attributes' => array('target' => '_blank'))) . '</li>';
      $output .= '</ul>';
      return $output;
  }
}

/**
 * Implements hook_schema_alter().
 *
 * @see adbc_enable()
 */
function adbc_schema_alter(&$schema) {
  foreach($schema as &$scheme) {
    if (_adbc_is_cache_table($scheme)) {
      unset($scheme['indexes']['expire']);
      $scheme['indexes']['expire_created'] = array('expire', 'created');
    }
  }
}

/**
 * Implements hook_modules_enabled().
 *
 * This function handles schema alterations for all cache tables created after
 * this module is already installed.
 */
function adbc_modules_enabled($modules) {
  // Loop through all modules that were just enabled.
  foreach ($modules as $module) {
    // Return this module's schema and check for cache tables.
    $schema = drupal_get_schema_unprocessed($module);
    foreach ($schema as $table => $scheme) {
      if (_adbc_is_cache_table($scheme)) {
        _adbc_optimize_index($table);
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * This function gives more detail on cache-related variables and exposes the
 * new cache_garbage_collection_frequency variable provided by this module.
 */
function adbc_form_system_performance_settings_alter(&$form, &$form_state, $form_id) {
  // Give more detail about cache_lifetime.
  $form['caching']['cache_lifetime']['#description'] = '<p>' . $form['caching']['cache_lifetime']['#description'] . '</p>';
  $form['caching']['cache_lifetime']['#description'] .= '<p>' . t("When set to &lt;none&gt;, the entire block and page cache is cleared every time content is saved. You probably don't want that.") . '</p>';

  // Give more detail about page_cache_maximum_age.
  $form['caching']['page_cache_maximum_age']['#description'] = '<p>' . $form['caching']['page_cache_maximum_age']['#description'] . '</p>';
  $form['caching']['page_cache_maximum_age']['#description'] .= '<p>' . t('This not only affects reverse proxy caches like Varnish, but also how long browsers should keep cached versions of your pages.') . '</p>';

  // Expose the cache_garbage_collection_frequency variable.
  $form['caching']['cache_garbage_collection_frequency'] = array(
    '#type' => 'select',
    '#title' => t('Cache garbage collection frequency'),
    '#default_value' => variable_get('cache_garbage_collection_frequency', 86400),
    '#options' => array(
      900 => t('15 min'),
      1800 => t('30 min'),
      3600 => t('1 hour'),
      10800 => t('3 hours'),
      21600 => t('6 hours'),
      43200 => t('12 hours'),
      86400 => t('1 day'),
      172800 => t('2 days'),
      432000 => t('5 days'),
      604800 => t('1 week'),
    ),
    '#description' => '<p>' . t('The frequency with which cache bins are cleared on cron.') . '</p>' .
      '<p>' . t('If this is set below the minimum cache lifetime, cron will respect that value.') . '</p>',
  );

  // Re-order cache fields.
  $form['caching']['cache_lifetime']['#weight'] = 0;
  $form['caching']['cache_garbage_collection_frequency']['#weight'] = 1;
  $form['caching']['page_cache_maximum_age']['#weight'] = 2;
}

/**
 * Determines if a table implements Drupal's default cache schema.
 *
 * @param $schema
 *   An array representing a single table's schema.
 *
 * @return
 *   TRUE if it's a cache table, otherwise FALSE.
 */
function _adbc_is_cache_table($schema) {
  // Cache this because it gets called for every table in a DB.
  $default_fields = &drupal_static(__FUNCTION__);
  if (empty($default_fields)) {
    $default_cache = drupal_get_schema_unprocessed('system', 'cache');
    $default_fields = array_keys($default_cache['fields']);
  }

  if (array_keys($schema['fields']) == $default_fields) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Optimizes a cache table's index for use with this module.
 *
 * @param $table
 *   The name of the table to optimize.
 */
function _adbc_optimize_index($table) {
  if (db_drop_index($table, 'expire')) {
    db_add_index($table, 'expire_created', array('expire', 'created'));
  }
}

/**
 * Reverts a cache table's index to its default.
 *
 * @param $table
 *   The name of the table to revert.
 */
function _adbc_revert_index($table) {
  if (db_drop_index($table, 'expire_created')) {
    db_add_index($table, 'expire', array('expire'));
  }
}
