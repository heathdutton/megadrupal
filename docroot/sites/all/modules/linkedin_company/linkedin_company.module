<?php
/**
 * @file
 * Module file for the LinkedIn Company Module.
 */

define('LINKEDIN_COMPANY_OAUTH2_API_BASE_URL', 'https://www.linkedin.com/uas/oauth2/');
define('LINKEDIN_COMPANY_DEFAULT_REMINDER_DAYS', 10);

/**
 * Implements hook_cron().
 */
function linkedin_company_cron() {
  // Checks to see if the token expires soon and notifies user via an email.
  $reminder_in_days = variable_get('linkedin_company_reminder_days', LINKEDIN_COMPANY_DEFAULT_REMINDER_DAYS);
  $token_expires = variable_get('linkedin_company_oauth_expires', NULL);
  $token_activated = variable_get('linkedin_company_oauth_activated', NULL);

  // Return if the expire token hasn't been set yet.
  if ($token_expires === NULL) {
    return;
  }

  // Add token_activated and expires together to get the time it expires.
  if ($token_expires && $token_activated) {
    $token_expires = $token_activated + $token_expires;
    if (($token_expires - REQUEST_TIME < (3600 * 24 * $reminder_in_days))) {
      drupal_mail('linkedin_company', 'linkedin_company_oauth_reminder', variable_get('site_mail'), language_default());
    }
  }
}

/**
 * Implements hook_mail().
 */
function linkedin_company_mail($key, &$message, $params) {

  switch ($key) {
    case 'linkedin_company_oauth_reminder':
      $site_name = variable_get('site_name', $_SERVER['HTTP_HOST']);
      $message['subject'] = t('!site: Your LinkedIn Company API Token to Expire', array(
        '!site' => $site_name,
        )
      );
      $message['body'][] = t('Your LinkedIn Company authorization is set to expire. Please go to !link and click "Reauthorize" under "LinkedIn Company Settings" to renew.', array(
        '!link' => url('admin/services/linkedin', array('absolute' => TRUE, 'external' => TRUE))));
      break;
  }
}

/**
 * Implements hook_help().
 */
function linkedin_company_help($path, $arg) {
  $output = '';
  switch ($path) {
    case 'admin/help#linkedin_company':

      $path = dirname(__FILE__) . '/README.md';

      if (file_exists($path)) {
        $readme = file_get_contents($path);
      }
      
      if (!isset($readme)) {
        return NULL;
      }

      if (module_exists('markdown')) {
        $filters = module_invoke('markdown', 'filter_info');
        $info = $filters['filter_markdown'];
        if (function_exists($info['process callback'])) {
          $function = $info['process callback'];
          $output = filter_xss_admin($function($readme, NULL));
        }
        else {
          $output = '<pre>' . check_plain($readme) . '</pre>';
        }
      }
      else {
        $output = '<pre>' . check_plain($readme) . '</pre>';
      }

      return $output;
  }

  return $output;
}

/**
 * Implements hook_menu().
 */
function linkedin_company_menu() {
  // Callback for oauth token request on linkedin API.
  $items['linkedin/company/token'] = array(
    'type' => MENU_CALLBACK,
    'description' => 'Let user tie their LI account with their local company account',
    'page callback' => 'linkedin_company_access_token',
    'access arguments' => array('administer linkedin company settings'),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function linkedin_company_permission() {
  return array(
    'administer linkedin company settings' => array(
      'title' => t('Administer Linkedin Company Settings'),
      'description' => t('Allows roles to administer the Linkedin Company module settings.'),
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function linkedin_company_form_linkedin_admin_alter(&$form, &$form_state, $form_id) {
  $oauth_token = variable_get('linkedin_company_oauth_token', NULL);

  if (is_null($oauth_token)) {
    drupal_set_message(t('You have not authorized this site with LinkedIn. Click the "Authorize" button under "LinkedIn Company Integration" to continue.'), 'warning');
  }

  $form['linkedin_company'] = array(
    '#title' => t('LinkedIn Company Integration'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  if (!$oauth_token) {
    $form['linkedin_company']['linkedin_company_authorize_markup'] = array(
      '#type' => 'markup',
      '#markup' => '<p>' . t('In order to use the LinkedIn company integration, please click "Authorize" and follow the steps.') . '</p>',
    );

    $form['linkedin_company']['linkedin_company_authorize'] = array(
      '#type' => 'submit',
      '#value' => t('Authorize'),
      '#submit' => array('linkedin_company_authorize'),
    );
  }
  else {
    $form['linkedin_company']['linkedin_company_reauthorize'] = array(
      '#type' => 'submit',
      '#value' => t('Reauthorize'),
      '#submit' => array('linkedin_company_authorize'),
    );

    $form['linkedin_company']['linkedin_company_revoke'] = array(
      '#type' => 'submit',
      '#value' => t('Revoke Authentication'),
      '#submit' => array('linkedin_company_revoke_authorization'),
    );
  }

  $form['linkedin_company']['linkedin_company_company_id'] = array(
    '#required' => TRUE,
    '#default_value' => variable_get('linkedin_company_company_id', ''),
    '#description' => t('You can use the !lookup_tool to easily determine your company id.', array(
      '!lookup_tool' => l(t('Company Lookup Tool'), 'https://developer.linkedin.com/apply-getting-started#company-lookup', array(
        'attributes' => array(
          'target' => '_blank',
        ),
      )
        ),
      )
    ),
    '#title' => t('Company ID'),
    '#type' => 'textfield',
  );

  $form['linkedin_company']['linkedin_company_reminder_days'] = array(
    '#required' => TRUE,
    '#default_value' => variable_get('linkedin_company_reminder_days', LINKEDIN_COMPANY_DEFAULT_REMINDER_DAYS),
    '#description' => t('LinkedIn only allows applications to connect for 60 days after they are authorized.  Authorization must be accomplished every 60 days.  Drupal will send an email to remind you to reauthorize your LinkedIn connection the specified number of days before it expires. To disable this notification, set this value to 0.'),
    '#title' => t('Reminder (In Days)'),
    '#type' => 'textfield',
  );

  $form['#validate'][] = 'linkedin_company_form_linkedin_admin_validate';
  return $form;
}

/**
 * Custom validation hook for linkedin_admin form.
 */
function linkedin_company_form_linkedin_admin_validate($form_id, &$form_state) {
  $reminder_days = $form_state['values']['linkedin_company_reminder_days'];

  if ($reminder_days > 59) {
    form_set_error('linkedin_company_reminder_days', t('Reminder value must be less than 60'));
  }
}

/**
 * Custom submit for Authorization and Reauthorization button.
 */
function linkedin_company_authorize($form, &$form_state) {
  drupal_goto('linkedin/company/token');
}

/**
 * Custom submit for the revoke authentication button.
 */
function linkedin_company_revoke_authorization($form, &$form_state) {
  variable_set('linkedin_company_oauth_token', NULL);
  variable_set('linkedin_company_oauth_expires', NULL);
  variable_set('linkedin_company_oauth_activated', NULL);
  drupal_set_message(t('Authorization with the LinkedIn company API has been revoked.'));
}

/**
 * Page callback for linkedin/company/token menu item.
 */
function linkedin_company_access_token() {
  module_load_include('inc', 'linkedin_company');

  $consumer_key = variable_get('linkedin_consumer_key', '');
  $consumer_secret = variable_get('linkedin_consumer_secret', '');
  $random = drupal_random_key();

  if (isset($_REQUEST['error']) && isset($_REQUEST['error_description'])) {
    drupal_get_messages();
    $error = array(
      '@error' => $_REQUEST['error'],
      '@error_description' => $_REQUEST['error_description'],
    );

    if (variable_get('linkedin_debug_mode', 0) == 1) {
      drupal_set_message(t('There was an error authenticating with the LinkedIn network. Linkedin responded with the following error: @error | @error_description', $error), 'error');
    }
    else {
      drupal_set_message(t('There was an error authenticating with the LinkedIn network. Please check the logs, or turn on debugging, for more details.'), 'error');
    }
    drupal_goto('admin/config/services/linkedin');
  }

  // First or renewal request.
  if (!isset($_GET['step'])) {
    // Redirect the user to the authentication/authorization page.
    // This will authorize the token in LinkedIn.
    $params = array(
      'response_type' => 'code',
      'client_id' => $consumer_key,
      'state' => $random,
      'scope' => 'rw_company_admin',
      'redirect_uri' => url(NULL, array('absolute' => TRUE)) . 'linkedin/company/token?step=authorized',
    );

    $url = url(LINKEDIN_COMPANY_OAUTH2_API_BASE_URL . 'authorization', array(
      'absolute' => TRUE,
      'query' => $params,
    ));

    drupal_goto($url);
  }
  else {
    // This is called when the OAuth callback is invoked.
    // Clear the message queue to prevent duplicate messages from appearing.
    drupal_get_messages(NULL, TRUE);

    $params = array(
      'grant_type' => 'authorization_code',
      'code' => $_REQUEST['code'],
      'redirect_uri' => url(NULL, array('absolute' => TRUE)) . 'linkedin/company/token?step=authorized',
      'client_id' => $consumer_key,
      'client_secret' => $consumer_secret,
    );

    $url = url(LINKEDIN_COMPANY_OAUTH2_API_BASE_URL . 'accessToken', array(
      'absolute' => TRUE,
      'query' => $params,
    ));

    $response = drupal_json_decode(linkedin_company_http_request($url, NULL, 'token_request'));

    if (!empty($response['error']) && !empty($response['error_description'])) {

      $error = array(
        '@error' => $response['error'],
        '@error_description' => $response['error_description'],
      );

      if (variable_get('linkedin_debug_mode', 0) == 1) {
        drupal_set_message(t('There was an error authenticating with the LinkedIn network. Linkedin responded with the following error: @error | @error_description', $error), 'error');
      }
      else {
        drupal_set_message(t('There was an error authenticating with the LinkedIn network. Please check the logs, or turn on debugging, for more details.'), 'error');
      }
      watchdog('linkedin_company', 'There was an error authenticating with the LinkedIn network. Linkedin responded with the following error: @error | @error_description ', $error, WATCHDOG_ERROR);
    }
    else {
      variable_set('linkedin_company_oauth_token', $response['access_token']);
      variable_set('linkedin_company_oauth_activated', REQUEST_TIME);
      variable_set('linkedin_company_oauth_expires', $response['expires_in']);
      drupal_set_message(t('Your LinkedIn Company page has been authorized.'));
    }
    drupal_goto('admin/config/services/linkedin');
  }
}
