<?php
/**
 * @file
 * Linkedin company shares module file.
 */

define('LINKEDIN_COMPANY_SHARES_DEFAULT_SHARES_TO_DISPLAY', '5');
define('LINKEDIN_COMPANY_SHARES_DEFAULT_CACHE_LENGTH_SECONDS', 300);
define('LINKEDIN_COMPANY_SHARES_DEFAULT_LINK_TARGET', '_self');

/**
 * Implements hook_form_FORM_ID_alter().
 */
function linkedin_company_shares_form_linkedin_admin_alter(&$form, &$form_state, $form_id) {
  $form['linkedin_company']['linkedin_company_shares'] = array(
    '#title' => t('LinkedIn Company Shares Settings'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['linkedin_company']['linkedin_company_shares']['linkedin_company_shares_posts_to_display'] = array(
    '#required' => TRUE,
    '#default_value' => variable_get('linkedin_company_shares_posts_to_display', LINKEDIN_COMPANY_SHARES_DEFAULT_SHARES_TO_DISPLAY),
    '#title' => t('Shares to Display'),
    '#description' => t('The number of shares to display.'),
    '#type' => 'textfield',
  );

  $form['linkedin_company']['linkedin_company_shares']['linkedin_company_shares_cache_length'] = array(
    '#required' => TRUE,
    '#default_value' => variable_get('linkedin_company_shares_cache_length', LINKEDIN_COMPANY_SHARES_DEFAULT_CACHE_LENGTH_SECONDS),
    '#title' => t('Cache Duration'),
    '#description' => t('The length of time in seconds you wish the feed to be cached. The default value is 300 seconds (5 minutes).'),
    '#type' => 'textfield',
  );

  $form['linkedin_company']['linkedin_company_shares']['linkedin_company_shares_clickable_links'] = array(
    '#type' => 'checkbox',
    '#default_value' => variable_get('linkedin_company_shares_clickable_links'),
    '#title' => t('Make links in shares clickable'),
    '#description' => t('If checked any links in the share block will become clickable.'),
  );

  $form['linkedin_company']['linkedin_company_shares']['linkedin_company_shares_link_target'] = array(
    '#type' => 'select',
    '#default_value' => variable_get('linkedin_company_shares_link_target', LINKEDIN_COMPANY_SHARES_DEFAULT_LINK_TARGET),
    '#title' => t('Links Target'),
    '#description' => t('Determines how links should operate when clicked. Defaults to "Same Window".'),
    '#options' => array(
      '_self' => t('Same Window (_self)'),
      '_blank' => t('New Tab (_blank)'),
      '_parent' => t('Parent Frame (_parent)'),
      '_top' => t('Full Windowed Body (_top)'),
    ),
  );

  $form['#validate'][] = 'linkedin_company_shares_form_linkedin_admin_validate';

  return $form;
}

/**
 * Custom validation for linkedin_admin_company_shares form.
 */
function linkedin_company_shares_form_linkedin_admin_validate($form_id, &$form_state) {
  $posts_to_display = $form_state['values']['linkedin_company_shares_posts_to_display'];
  $cache_length = $form_state['values']['linkedin_company_shares_cache_length'];

  if ($posts_to_display == 0) {
    form_set_error('linkedin_company_shares_posts_to_display', t('The number of posts to display should be greater than 0.'));
  }

  if (!is_numeric($posts_to_display)) {
    form_set_error('linkedin_company_shares_posts_to_display', t('The number of posts to display should be numerical.'));
  }

  if (!is_numeric($cache_length)) {
    form_set_error('linkedin_company_shares_cache_length', t('The cache duration must be numeric.'));
  }

}

/**
 * Implements hook_block_info().
 */
function linkedin_company_shares_block_info() {
  $blocks['linkedin_company_shares_posts'] = array(
    'info' => t('LinkedIn Company Shares'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function linkedin_company_shares_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'linkedin_company_shares_posts':
      $block['subject'] = t('Recent Shares');
      $block['content'] = array(
        '#markup' => linkedin_company_shares_get_data(),
        '#attached' => array(
          'css' => array(
            drupal_get_path('module', 'linkedin_company_shares') . '/linkedin-company-shares.css',
          ),
        ),
      );
      break;
  }

  return $block;
}

/**
 * Callback function to generate block content.
 */
function linkedin_company_shares_get_data() {
  module_load_include('inc', 'linkedin_company');

  $shares_to_display  = variable_get('linkedin_company_shares_posts_to_display', LINKEDIN_COMPANY_SHARES_DEFAULT_SHARES_TO_DISPLAY);
  $company_id = variable_get('linkedin_company_company_id');
  $oauth_access_token = variable_get('linkedin_company_oauth_token');
  $is_error = FALSE;

  // If no oauth access token or company id return an empty block.
  if (!$oauth_access_token || !$company_id) {
    return;
  }

  // Create linkedin company api url.
  $url = "https://api.linkedin.com/v1/companies/$company_id/updates?start=0&count=$shares_to_display&oauth2_access_token=$oauth_access_token";

  // Make a call to api and cache the response.
  $cached_response = cache_get('linkedin_company_shares:share_api_response');

  if (!$cached_response) {
    $response = linkedin_company_http_request($url);

    // The response did not complete successfully. Return an empty block.
    if (!$response) {
      return '';
    }

    $response = simplexml_load_string($response);

    if (isset($response->{'error-code'})) {
      $error = array(
        '@error' => (string) $response->shares,
        '@error_description' => (string) $response->message,
      );
      $is_error = TRUE;
      if (variable_get('linkedin_debug_mode', 0) == 1) {
        drupal_set_message(t('There was an error pulling company shares from the LinkedIn network. Linkedin responded with the following error: @error | @error_description', $error), 'warning');
      }
      else {
        drupal_set_message(t('There was an error pulling company shares from the LinkedIn network. Please check the logs, or turn on debugging, for more details.'), 'warning');
      }
      watchdog('linkedin_company_posts', 'There was an error pulling company shares from the LinkedIn network. Linkedin responded with the following error: @error | @error_description', $error, WATCHDOG_ERROR);
    }
    else {
      cache_set('linkedin_company_shares:share_api_response', $response->asXML(), 'cache', REQUEST_TIME + variable_get('linkedin_company_shares_cache_length', LINKEDIN_COMPANY_SHARES_DEFAULT_CACHE_LENGTH_SECONDS));
    }
  }

  $response = $cached_response ? simplexml_load_string($cached_response->data) : $response;
  $shares = array();

  if (!$is_error) {
    foreach ($response->update as $update) {
      $shares[] = array(
        'company_id' => (string) $update->{'update-content'}->company->id,
        'company_name' => (string) $update->{'update-content'}->company->name,
        'timestamp' => (string) $update->{'update-content'}->{'company-status-update'}->share->timestamp,
        'submitted-url' => (string) $update->{'update-content'}->{'company-status-update'}->share->content->{'submitted-url'},
        'shortened-url' => (string) $update->{'update-content'}->{'company-status-update'}->share->content->{'shortened-url'},
        'comment' => (string) $update->{'update-content'}->{'company-status-update'}->share->comment,
        'title' => (string) $update->{'update-content'}->{'company-status-update'}->share->content->title,
        'description' => (string) $update->{'update-content'}->{'company-status-update'}->share->content->description,
        'submitted-image-url' => (string) $update->{'update-content'}->{'company-status-update'}->share->content->{'submitted-image-url'},
        'thumbnail-url' => (string) $update->{'update-content'}->{'company-status-update'}->share->content->{'thumbnail-url'},
        'eyebrow-url' => (string) $update->{'update-content'}->{'company-status-update'}->share->content->{'eyebrow-url'},
        'service-provider' => (string) $update->{'update-content'}->{'company-status-update'}->share->source->{'service-provider'}->name,
      );
    }
  }

  return theme('company_shares', array('shares' => $shares));
}

/**
 * Implements hook_theme().
 */
function linkedin_company_shares_theme() {
  return array(
    'company_shares' => array(
      'template'  => 'templates/company-shares',
      'variables' => array(
        'shares' => array(),
      ),
    ),
  );
}

/**
 * Implements hook_preprocess_HOOK().
 */
function linkedin_company_shares_preprocess_company_shares(&$variables) {

  $filter = new stdClass();
  $filter->settings = array(
    'filter_url_length' => 80,
  );

  foreach ($variables['shares'] as $key => $update) {
    // Format the date.
    $variables['shares'][$key]['timestamp'] = format_date($update['timestamp'], 'long');

    // Add the has_attachment variable.
    if ($update['title'] && $update['description']) {
      $variables['shares'][$key]['has_attachment'] = TRUE;
    }
    else {
      $variables['shares'][$key]['has_attachment'] = FALSE;
    }

    // Filter for XSS Protection.
    foreach ($update as $share_key => $value) {
      $variables['shares'][$key][$share_key] = check_plain($value);
    }

    // Clickable Links.
    if (variable_get('linkedin_company_shares_clickable_links', 0)) {
      $variables['shares'][$key]['comment'] = linkedin_company_shares_convert_text_to_links($update['comment']);
    }
  }
}

/**
 * Converts all URLs in text with links.
 *
 * Borrowed code from https://bitbucket.org/kwi/urllinker/.
 *
 * @param string $text
 *   The share text to search on.
 *
 * @return mixed|html
 *   The share text with properly linked URLs.
 */
function linkedin_company_shares_convert_text_to_links($text) {

  // HTTP/HTTPS optional.
  $protocol = '(https?://)?';

  // Should accept any top level domain.
  $domain   = '((?:[-a-zA-Z0-9]{1,63}\.)+[-a-zA-Z0-9]{2,63}|(?:[0-9]{1,3}\.){3}[0-9]{1,3})';

  // Port number should be allowed.
  $port     = '(:[0-9]{1,5})?';

  // URL Path (excluding any ending periods such as mysite.com.)
  $path     = '(/[!$-/0-9:;=@_\':;!a-zA-Z\x7f-\xff]*?)?';

  // Accept query parameters encoded or not.
  $query    = '(\?[!$-/0-9:;=@_\':;!a-zA-Z\x7f-\xff]+?)?';

  // Allow for fragments.
  $fragment = '(#[!$-/0-9:;=@_\':;!a-zA-Z\x7f-\xff]+?)?';

  return preg_replace_callback("&\\b$protocol$domain$port$path$query$fragment(?=[?.!,;:\"]?(\s|$))&",
    'linkedin_company_shares_convert_text_to_links_callback', $text);
}

/**
 * Callback for linkedin_company_shares_convert_text_to_links_function.
 */
function linkedin_company_shares_convert_text_to_links_callback($match) {

  // Prepend http:// if no protocol is specified.
  $complete_url = $match[1] ? $match[0] : "http://{$match[0]}";

  return l($match[2] . $match[3] . $match[4], $complete_url, array(
    'attributes' => array(
      'target' => variable_get('linkedin_company_shares_link_target', LINKEDIN_COMPANY_SHARES_DEFAULT_LINK_TARGET),
    ),
  ));
}
