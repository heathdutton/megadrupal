<?php

/**
 * @file
 * Test case for testing the multicolumn filter.
 *
 * This file contains the test cases to check if module is performing as
 * expected.  It is mostly copied from filter_example.test in the Examples
 * project.
 *
 */
class MulticolumnFilterTestCase extends DrupalWebTestCase {
  protected $webUser;
  protected $filtered_html;
  protected $full_html;

  public static function getInfo() {
    return array(
      'name' => 'Multicolumn filter functionality',
      'description' => 'Verify that content is processed by multicolumn filter.',
      'group' => 'Filter',
    );
  }

  /**
   * Enable modules and create user with specific permissions.
   */
  function setUp() {
    parent::setUp('multicolumn');

    // Load the used input formats.
    // TODO:  Rewrite this using the D7 db abstraction layer.
    $this->filtered_html = db_query_range('SELECT * FROM {filter_format} WHERE name = :name', 0, 1, array(':name' => 'Filtered HTML'))->fetchObject();
    $this->full_html = db_query_range('SELECT * FROM {filter_format} WHERE name = :name', 0, 1, array(':name' => 'Full HTML'))->fetchObject();

    // Create user.
    $this->webUser = $this->drupalCreateUser(array(
      'administer filters',
      filter_permission_name($this->filtered_html),
      filter_permission_name($this->full_html),
      'bypass node access',
    ));
  }

  /**
   * Login user, create an example node, and test blog functionality through
   * the admin and user interfaces.
   */
  function testMulticolumnFilterBasic() {
    // Login the admin user.
    $this->drupalLogin($this->webUser);

    // Enable multicolumn filter in format id 1 (default format).
    $edit = array(
      'filters[multicolumn][status]' => TRUE,
      'filters[filter_autop][status]' => FALSE,
    );
    $this->drupalPost('admin/config/content/formats/' .
      $this->filtered_html->format, $edit, t('Save configuration'));

    // Create a content type to test the filter (with default format).
    $content_type = $this->drupalCreateContentType();

    // Create a test node.
    $langcode = LANGUAGE_NONE;
    $plain = "one\ntwo\nthree\nfour\nfive\nsix\nseven\n";
    $list1 = '<li>one</li><li>two</li><li>three</li>';
    $list2 = '<li>four</li><li>five</li>';
    $list3 = '<li>six</li><li>seven</li>';
    $edit = array(
      "title" => $this->randomName(),
      "body[$langcode][0][value]" =>
        'foo<multicolumn cols="3" type="ol">' . $plain . '</multicolumn>bar',
    );
    $result
      = $this->drupalPost('node/add/' . $content_type->type, $edit, t('Save'));
    $this->assertResponse(200);
    $attributes = array('start' => 1, 'style' => 'width: 33%;');
    $ol = '<ol' . drupal_attributes($attributes) . ">$list1</ol>";
    $attributes['start'] = 4;
    $ol .= '<ol' . drupal_attributes($attributes) . ">$list2</ol>";
    $attributes['start'] = 6;
    $ol .= '<ol' . drupal_attributes($attributes) . ">$list3</ol>";
    $this->assertRaw('<div class="multicolumn multicolumn-3">' . "$ol</div>");
    $this->assertRaw("foo\n" . '<!-- multicolumn start -->');
    $this->assertRaw('<!-- multicolumn end -->' . "\nbar");

    // Enable multicolumn filter in other format id 2.
    $edit = array(
      'filters[multicolumn][status]' => TRUE,
      'filters[filter_autop][status]' => FALSE,
    );
    $this->drupalPost('admin/config/content/formats/' .
      $this->full_html->format, $edit, t('Save configuration'));

    // Create a test node with content format id 2.
    // Use multicolumn filter with a random attribute and default cols in
    // format id 2.
    $replacement = $this->randomName();
    $langcode = LANGUAGE_NONE;
    $edit = array(
      'title' => $this->randomName(),
      "body[$langcode][0][format]" => $this->full_html->format,
      "body[$langcode][0][value]" =>
        'foo[multicolumn type="plain" attr="' . $replacement . '"]' .
          "\n$plain" . '[/multicolumn]bar',
    );
    $result
      = $this->drupalPost('node/add/' . $content_type->type, $edit, t('Save'));
    $this->assertResponse(200);
    $attributes = array('attr' => $replacement, 'style' => 'width: 100%;');
    $attributes['class'] = 'plain';
    $ul = '<ul' . drupal_attributes($attributes) .
      ">$list1$list2$list3</ul>";
    $this->assertRaw('<div class="multicolumn multicolumn-1">' . "$ul</div>");
  }
}
