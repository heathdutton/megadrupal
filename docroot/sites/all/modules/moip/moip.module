<?php

/**
 * @file
 * Provides payment method for Drupal Commerce for MoIP Brazilian payment
 * gateway.
 *
 * @see http://www.moip.com.br/
 * @see http://labs.moip.com.br/
 */
define('MOIP_STATUS_INITIALIZED', 2);
define('MOIP_STATUS_PRINTED', 3);
define('MOIP_STATUS_PENDING', 6);
define('MOIP_STATUS_AUTHORIZED', 1);
define('MOIP_STATUS_COMPLETED', 4);
define('MOIP_STATUS_CANCELED', 5);
define('MOIP_STATUS_REVERSED', 7);
define('MOIP_STATUS_REFUNDED', 9);

/**
 * Implements hook_permission()
 */
function moip_permission() {
  return array(
    'administer moip' => array(
      'title' => t('Administer MoIP'),
    ),
  );
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function moip_commerce_payment_method_info() {
  return array(
    'moip_ct' => array(
      'base' => 'moip_ct',
      'title' => 'MoIP - Checkout Transparente',
      'display_title' => variable_get('moip_display_title', 'MoIP'),
      'short_title' => 'MoIP - CT',
      'description' => t('MoIP - Checkout Transparente'),
      'terminal' => FALSE,
      'offsite' => FALSE,
      'active' => TRUE
    )
  );
}

/**
 * Implements hook_commerce_order_state_info().
 *
 * We add a new "moip" state.
 */
function moip_commerce_order_state_info() {
  $order_states['moip'] = array(
    'name' => 'moip',
    'title' => 'MoIP',
    'description' => t('Orders in this state are being processed by MoIP.'),
    'weight' => 20,
    'default_status' => 'payment_authorized',
    'cart' => FALSE,
    'status' => TRUE,
  );
  return $order_states;
}

/**
 * Implements hook_commerce_order_state_info_alter().
 *
 * Assure that 'moip' order state comes before the 'completed'
 */
function moip_commerce_order_state_info_alter(&$order_states) {
  if (!empty($order_states['completed']) && $order_states['completed']['weight'] < $order_states['moip']['weight']) {
    $order_states['completed']['weight'] += 10;
    $order_states['moip']['weight'] = $order_states['completed']['weight'] - 1;
  }
}

/**
 * Implements hook_commerce_order_status_info().
 *
 * Add a status specific to the MoIP internal process.
 */
function moip_commerce_order_status_info() {
  $order_statuses['payment_authorized'] = array(
    'name' => 'payment_authorized',
    'title' => t('Payment authorized'),
    'state' => 'moip',
  );
  return $order_statuses;
}

/**
 * Implements hook_theme().
 *
 * Defines the theming capabilities provided by this module.
 */
function moip_theme() {
  return array(
    'moip_ct_js_form' => array(
      'variables' => array(
        'moip_payment_token' => NULL,
        'order_id' => NULL,
        'moip_user_phone' => NULL,
        'moip_user_name' => NULL,
        'moip_user_birthday' => NULL,
        'moip_user_cpf' => NULL,
      ),
      'path' => drupal_get_path('module', 'moip') . '/tpl',
      'template' => 'moip_ct_js_form',
    ),
  );
}

/**
 * Implements hook_commerce_checkout_router().
 * Check if the "commerce_payment_redirect" checkout pane is enabled in the current checkout page
 * and the payment is being made with "moip_ct" payment method, so that we can avoid an empty and
 * useless checkout page
 */
function moip_commerce_checkout_router($order, $checkout_page) {

  $payment_redirect_checkout_pane = commerce_checkout_pane_load('commerce_payment_redirect');

  if ($payment_redirect_checkout_pane['page'] == $checkout_page['page_id'] && $order->data['payment_method'] == 'moip_ct|commerce_payment_moip_ct') {
    commerce_order_status_update($order, 'checkout_complete');
    drupal_goto('checkout/' . $order->order_id . '/' . $checkout_page['next_page']);
  }
}

/**
 * Implements hook_entity_view_alter().
 * Show the bank billet or bank transfer URL so that if the person looses the link, it
 * could be recovered here
 */
function moip_entity_view_alter(&$build, $type) {

  if ($type == 'commerce_order') {

    $order = $build['#entity'];

    /*
     * Make sure that we are dealing with an order processed with Moip and the
     * logged user has the proper permission
     */
    if (user_access('administer moip') &&
      isset($order->data['payment_method']) &&
      $order->data['payment_method'] == 'moip_ct|commerce_payment_moip_ct') {

      switch ($order->data['moip_ct_payment_method']) {
        case 'creditcard':
          $payment_method = t('Creditcard');
          $manual_payment = FALSE;
          break;
        case 'bankbillet':
          $payment_method = t('Bank billet');
          $manual_payment = TRUE;
          break;
        case 'banktransfer':
          $payment_method = t('Internet banking');
          $manual_payment = TRUE;
          break;
      }

      $MoipDrupal = new \Drupal\moip\MoipDrupal();
      $moip_payment_details_xml = $MoipDrupal->getOrderDetailsOnMoip($order->data['moip_payment_token']);
      $payment_details = $moip_payment_details_xml->RespostaConsultar->Autorizacao;

      $rows = array();
      $rows[] = array(t('Payment method used'), $payment_method, t('Option'), $order->data['moip_ct_payment_method_option']);
      $rows[] = array(t('Name'), $payment_details->Pagador->Nome, t('E-mail'), $payment_details->Pagador->Email);

      $payment_details_address = get_object_vars(json_decode(json_encode($payment_details->EnderecoCobranca)));
      $addresses = array();
      foreach ($payment_details_address as $key => $value) {
        $addresses[] = $key . ': ' . $value;
      }
      $rows[] = array(t('Address'), array('data' => theme('item_list', array('items' => $addresses)), 'colspan' => 3));

      $payment_details_transaction = get_object_vars(json_decode(json_encode($payment_details->Pagamento)));
      $transaction = array();
      foreach ($payment_details_transaction as $key => $value) {
        if ($key == 'Parcela') {
          $transaction[] = 'Parcela: ' . $value->TotalParcelas;
        }
        else {
          $transaction[] = $key . ': ' . $value;
        }
      }
      $rows[] = array(t('Transaction'), array('data' => theme('item_list', array('items' => $transaction)), 'colspan' => 3));

      $build['order_moip_data'] = array(
        '#weight' => 100,
        '#markup' => '<h3>' . t('MoIP information') . '</h3>' . theme('table', array('rows' => $rows))
      );
    }
  }
}

/**
 * Moip payment details
 */
function moip_ct_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  try {
    return \Drupal\moip\Commerce\FormControllers\MoipCheckoutTransparenteForm::getDefinition($payment_method, $pane_values, $checkout_pane, $order);
  } catch (\Drupal\moip\Exceptions\InputValidationException $ex) {
    drupal_set_message($ex->getMessage(), 'error');
    return FALSE;
  } catch (\Exception $ex) {
    watchdog('moip_error', $ex->getMessage(), array(), WATCHDOG_EMERGENCY);
    drupal_set_message(t('The payment method is not working properly. Please contact the site administrators.'), 'error');
    return FALSE;
  }
}

/**
 * Moip payment details submit
 */
function moip_ct_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  return \Drupal\moip\Commerce\FormControllers\MoipCheckoutTransparenteForm::submit($payment_method, $pane_form, $pane_values, $order, $charge);
}

/**
 * Alters the checkout complete pane form
 */
function moip_form_commerce_checkout_form_complete_alter(&$form, &$form_state, $order) {
  return \Drupal\moip\Commerce\FormControllers\MoipCommerceCheckoutCompleteForm::alter($form, $form_state, $order);
}
