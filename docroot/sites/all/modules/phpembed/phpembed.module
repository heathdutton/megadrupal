<?php
/**
 * @file
 * Provides an input filter to allow users to embed simple php functionality
 * into their content while still using a WYSIWYG editor.
 */
/**
 * Implements hook_filter_info().
 */
function phpembed_filter_info() {
  $filters['phpembed'] = array(
    'title' => t('Limited PHP Shortcode Embedding'),
    'description' => t('Allows certain limited PHP and Drupal functions to run and return data without using the PHP code format.'),
    'process callback' => 'phpembed_filter_phpembed_process',
    'tips callback' => 'phpembed_filter_phpembed_tips',
  );

  return $filters;
}

/**
 * Implements hook_filter_FILTER_tips().
 */
function phpembed_filter_phpembed_tips($filter, $format, $long) {
  if ($long) {
    return t('The following Basic PHP functions can be embedded into your content using the patterns shown below.  Arguments follow the same requirements as if you were using them in raw code, thus not all arguments shown are required for each function.') .
    '<ul>' .
      '<li><strong>format_date()</strong><br />' .
        '[php|format_date{timestamp|type|format|timezone|langcode}]<br />' .
        '<em>Required: timestamp (may be an integer or relative string)</em><br />' .
        'ex. "If you start today, you must be complete by <strong>[php|format_date{+2 weeks|small}]</strong>"<br />' .
        'ex. "If you start today, you must be complete by <strong>' . format_date(strtotime('+2 weeks'), 'small') . '</strong>"</li>' .
      '<li><strong>format_interval()</strong><br />' .
        '[php|format_interval{timestamp1|timestamp2|granularity|langcode}]<br />' .
        '<em>Required: timestamp1, timestamp2 (may be an integer, relative string, or \'now\')</em><br />' .
        'ex. "The project started <strong>[php|format_interval{now|September 5, 2010|3}]</strong> ago."<br />' .
        'ex. "The project started <strong>' . format_interval(time() - strtotime('September 5, 2010'), 3) . '</strong> ago."</li>' .
      '<li><strong>l()</strong><br />' .
        '[php|l{text|path}]<br />' .
        '<em>Required: text and path</em><br />' .
        'ex. "The link to my page is <strong>[php|l{About Me|pages/about-me}]</strong>."<br />' .
        'ex. "The link to my page is <strong><a href="' . url('node/x') . '">About Me</a></strong> ago."</li>' .
    '</ul>';
  }
  else {
    return t('Embed basic PHP functions to generate dynamic text.');
  }
}

/**
 * Implements hook_filter_FILTER_process().
 */
function phpembed_filter_phpembed_process($text, $filter, $format, $langcode, $cache, $cache_id) {
  // Look for patterns
  $patt_arg = '([^\(\)\{\}]+\|?)';
  $pattern  = '#\[php\|([a-z0-9\_]+)\{' . $patt_arg . '*?\}\]#';
  preg_match_all($pattern, $text, $matches);

  /**
   * For each php call found, only process it if we can find a validator.
   *
   * $matches[0] = array(FULL PATTERNS);
   * $matches[1] = array(FUNCTIONS);
   * $matches[2] = array(ARGUMENTS);
   */
  foreach ($matches[1] as $key => $func) {
    // Only run the replacement if a validator is available.
    $validators = module_implements('phpembed_' . $func . '_validate_args');
    $replacement = '';
    if (!empty($validators)) {
      // Run our own cleanup on the args before we pass them off to the
      // implemented validators.
      $args = explode('|', htmlspecialchars_decode($matches[2][$key]));
      phpembed_default_validate_args($args);

      // Run the args through any implemented validators.
      foreach ($validators as $module) {
        $validator = $module . '_phpembed_' . $func . '_validate_args';
        $validator($args);
      }

      // Run the PHP command
      $replacement = call_user_func_array($func, $args);
    }

    // Replace the pattern with the returned value.
    $text = str_replace($matches[0][$key], $replacement, $text);
  }

  // Return the full text.
  return $text;
}

/**
 * Default validator for all functions.
 */
function phpembed_default_validate_args(&$args) {
  $before = $args;

  foreach ($args as &$arg) {
    // Decode any HMTL the WYSIWYG may have translated.
    $arg = htmlspecialchars_decode(trim($arg), ENT_QUOTES);

    // Trim the surrounding quotes if any.
    $arg = str_replace("'", '', $arg);

    // Remove any HTML tags.
    $arg = strip_tags($arg);
  }
}

/**
 * Validator for the format_date function.
 */
function phpembed_phpembed_format_date_validate_args(&$args) {
  foreach ($args as $key => &$arg) {
    switch ($key) {
      // Timestamp
      case 0:
        // Allow strings as dates to be entered.
        if (is_string($arg)) {
          $arg = (int)strtotime($arg);
        }
        else {
          $arg = (int)$arg;
        }
        break;

      // Type
      case 1:
        $arg = _phpembed_alphanum_filter($arg);
        break;

      // Format
      case 2:
        $arg = _phpembed_alphanum_filter($arg);
        break;

      // Timezone
      case 3:
        $arg = (string)$arg;
        break;

      // Langcode
      case 4:
        $arg = (string)$arg;
        break;
    }
  }

  // Remove any rogue args
  $args = array_slice($args, 0, 5);
}

/**
 * Validator for the format_interval() function.
 *
 * Since the user can't calculate an interval in the body, take the first
 * two parameters to create the interval.
 */
function phpembed_phpembed_format_interval_validate_args(&$args) {
  foreach ($args as $key => &$arg) {
    switch ($key) {
      // Timestamps
      case 0:
      case 1:
        // Allow strings as dates to be entered.
        if ($arg == 'time' || $arg == 'now') {
          $arg = time();
        }
        elseif (is_string($arg)) {
          $arg = (int)strtotime($arg);
        }
        else {
          $arg = (int)$arg;
        }
        break;

      // Granularity
      case 2:
        $arg = (int)$arg;
        break;

      // Langcode
      case 3:
        $arg = (string)$arg;
        break;
    }
  }

  // Combine the first two args to create the interval for the function.
  $interval = $args[0] - $args[1];
  array_shift($args);
  $args[0] = $interval;

  // Remove any rogue args
  $args = array_slice($args, 0, 3);
}

/**
 * Validator for the l() function.
 */
function phpembed_phpembed_l_validate_args(&$args) {
  foreach ($args as $key => &$arg) {
    switch ($arg) {
      // Text
      case 0:
        $arg = check_plain($arg);
        break;

      // Path
      case 1:
        if (!valid_url($arg)) {
          $arg = '#';
        }
        break;
    }
  }

  // Remove any rogue args
  $args = array_slice($args, 0, 2);
}

/**
 * Helper function to validate alphanumercs.
 */
function _phpembed_alphanum_filter($string) {
  return preg_replace('/[^a-z0-9\ ]/i', '', $string);
}
