<?php

define("WSRP_CONSUMER_AGENT","drupalwsrp.1.0");

function wsrp_boot()
{
}

function wsrp_init()
{
    require_once(drupal_get_path('module', 'wsrp') .'/wsrpconsumerv1.class.php');
    require_once(drupal_get_path('module', 'wsrp') .'/wsrpconsumerv2.class.php');
    
    wsrp_init_session();
    wsrp_process_request();
}

function wsrp_exit()
{
    wsrp_save_session();
}

function wsrp_portletinstancekey_toid ($portletInstanceKey)
{
	if (substr($portletInstanceKey,0,1)=="b") //block
	  $portlet_id= (int)substr($portletInstanceKey,1);
	else //node
	{
	  $portlet_id= split("p",$portletInstanceKey);
	  $portlet_id= (int)$portlet_id[1];
	}
	
	return $portlet_id;
}

function wsrp_init_session()
{
	global $wsrpSession,$user;
	
    $wsrpSession= $_SESSION['wsrp'];

    //syslog(LOG_ERR,"session: ". print_r($wsrpSession,true));
    
    if (!$wsrpSession)
    {
       $wsrpSession= array();
       $wsrpSession['portlet'.$user->uid]= array();
    }
   
}

function wsrp_save_session ()
{
	global $wsrpSession;
	 
	$_SESSION['wsrp']= $wsrpSession;
}

function wsrp_get_portletinstance ($portletInstanceKey)
{
	global $wsrpSession, $user;
	
	$portletInstance= (isset($wsrpSession['portlet'.$user->uid][$portletInstanceKey]) ? $wsrpSession['portlet'.$user->uid][$portletInstanceKey] : false);
	
	if (!$portletInstance)
	{
          $portletInstance= array();
          $portletInstance['key']= $portletInstanceKey;
          $portletInstance['mode']= "wsrp:view";
          $portletInstance['windowState']= "wsrp:normal";
          $portletInstance['portletContextChanged']= false;
          $portletInstance= (object)$portletInstance;
		       
          $userInstance= db_query("select b.portlet_id, b.handle, b.description, a.url, a.version, a.registration, a.init_cookie, c.context from {wsrp_producer} a, {wsrp_portlet} b, {wsrp_portlet_instance} c where a.producer_id= b.producer_id and b.portlet_id = c.portlet_id and c.instance_key= :key and c.uid= :uid and a.status= 1", array( 'key' => $portletInstance->key, 'uid' => $user->uid ))->fetchObject();
          
		  if ($userInstance)
		  {

		  	    $portletInstance->portlet_id= $userInstance->portlet_id;
		  	    $portletInstance->state= "readWrite";
		  	    $portletInstance->db= true;
		  	    $portletInstance->url= $userInstance->url;
                            $portletInstance->init_cookie= $userInstance->init_cookie;
                            $portletInstance->cookie_inited= false;
		  	    $portletInstance->version= $userInstance->version;
		  	    $portletInstance->description= unserialize($userInstance->description);
		  	    $portletInstance->portletContext= unserialize($userInstance->context);
                            $portletInstance->registrationContext= unserialize($userInstance->registration);
		  }
		  else
		  {
	            
		  	    $portlet_id= wsrp_portletinstancekey_toid($portletInstance->key); 
		  	    $offeredPortlet= db_query("select b.portlet_id, b.handle, b.description, a.producer_id, a.url, a.version, a.registration, a.init_cookie from {wsrp_producer} a, {wsrp_portlet} b where a.producer_id= b.producer_id and b.portlet_id = :portlet_id and a.status= 1", array( 'portlet_id' => $portlet_id ) )->fetchObject();
		  	    
		  	    if ($offeredPortlet)
		  	    {
			  	    $portletInstance->portlet_id= $portlet_id;
			  	    $portletInstance->state= "cloneBeforeWrite";
			  	    $portletInstance->db= false;
			  	    $portletInstance->url= $offeredPortlet->url;
                                    $portletInstance->init_cookie= $offeredPortlet->init_cookie;
                                    $portletInstance->cookie_inited= false;
			  	    $portletInstance->version= $offeredPortlet->version;
			  	    $portletInstance->description= unserialize($offeredPortlet->description);
			  	    $portletInstance->portletContext= (object)array("portletHandle" => $offeredPortlet->handle);
				    $portletInstance->registrationContext= unserialize($offeredPortlet->registration);
		  	    }
		  	    else
		  	        $portletInstance= false;
		  }		
		
	}

	if ($portletInstance)
        {
           $portletInstance->consumer= wsrp_get_consumer($portletInstance->url,$portletInstance->version);
           
           if ($portletInstance->init_cookie=='perUser'&&!$portletInstance->cookie_inited)
           {
              $portletInstance->cookies= $portletInstance->consumer->initCookie($portletInstance->registrationContext);              
              $portletInstance->cookie_inited= true;
           }
           else
           {
              if (isset($portletInstance->cookies))
                $portletInstance->consumer->setCookies($portletInstance->cookies);
           }

        }
    
	return $portletInstance;
}

function wsrp_get_runtimecontext($portletInstance)
{
	global $user;
	
	return array("userAuthentication" => ($user->uid > 0 ? 'wsrp:password' : 'wsrp:none'),
                 "portletInstanceKey" => $portletInstance->key,
                 "namespacePrefix"    => $portletInstance->key,
                 "sessionParams"      => array("sessionID" => (isset($portletInstance->sessionContext) ? $portletInstance->sessionContext->sessionID : '')));
}

function wsrp_get_usercontext()
{
	global $user;

        if (function_exists('wsrp_custom_user_context'))
    	    return wsrp_custom_user_context();
        else
    	    return array("userContextKey" => $user->uid,
		         "profile"=> array("name" => array("nickname" => $user->name),
                                           "businessInfo" => array("online" => array("email" => $user->mail ))),
                         "userCategories" => array_values($user->roles));
}

function wsrp_get_markupparams($portletInstance)
{
	$markupParams= array("secureClientCommunication" => false,
		   	     "locales"                   => array(0 => "en-US"),
	                     "mimeTypes"                 => array(0 => "text/html"),
	                     "mode"                      => $portletInstance->mode,
	                     "windowState"               => $portletInstance->windowState);
	
    if (isset($portletInstance->navigationalContext))
       $markupParams["navigationalContext"]= $portletInstance->navigationalContext;
    else
       $markupParams["navigationalContext"]= (object)array( 'publicValues' => array() );

    $markupParams["navigationalContext"]->publicValues[]= array( 'name' => 'q', 'value' => $_GET['q'] );
       
    return $markupParams;
}



function wsrp_set_portletinstance ($portletInstance)
{
	global $wsrpSession,$user;
	
	if ($portletInstance->portletContextChanged)
	{
		if (!$portletInstance->db)
		{
		   db_query("insert into {wsrp_portlet_instance} (instance_key,uid,portlet_id,context) values (?,?,?,?)",array($portletInstance->key,$user->uid,$portletInstance->portlet_id,serialize($portletInstance->portletContext)));
		   $portletInstance->db= true;
		}
		else
		   db_query("update {wsrp_portlet_instance} set context= ? where instance_key= ? and uid= ?",array(serialize($portletInstance->portletContext),$portletInstance->key,$user->uid));
	}
	
	$portletInstance->consumer= null;
	
	$wsrpSession['portlet'.$user->uid][$portletInstance->key]= $portletInstance;
	
}

function wsrp_list_portletinstances ()
{
	global $wsrpSession,$user;
	
	return $wsrpSession['portlet'.$user->uid];
}

function wsrp_process_request()
{
	global $wsrprequest;
	
	if (isset($_GET['wsrprequest']))
	{
	   $wsrprequest= unserialize(base64_decode($_GET['wsrprequest']));
	   
	   //syslog(LOG_ERR,"wsrprequest: ". print_r($wsrprequest,true));

	   $portletInstance= wsrp_get_portletinstance($wsrprequest['portletInstanceKey']);
	   
	   if (!$portletInstance) return;
	   
	   if ($wsrprequest['wsrp-urlType']=='blockingAction')
	   {
          wsrp_portlet_process_navigationalContext($portletInstance);
          wsrp_portlet_process_modes($portletInstance);
	   	  wsrp_portlet_blockingAction($portletInstance);
	   }
	   elseif ($wsrprequest['wsrp-urlType']=='render')
	   {
          wsrp_portlet_process_navigationalContext($portletInstance);
          wsrp_portlet_process_modes($portletInstance);
	   }
	     	   
	   wsrp_set_portletinstance($portletInstance);
	}
}

function wsrp_process_updateResponse($portletInstance,$response)
{
          //syslog(LOG_ERR,"response: ". print_r($response,true));
	          
	      if (isset($response->updateResponse))
		  {
		      	 if (isset($response->updateResponse->sessionContext))
		   	       $portletInstance->sessionContext=  $response->updateResponse->sessionContext;
	
		      	 if (isset($response->updateResponse->portletContext))
		      	 {
		   	       $portletInstance->portletContext= $response->updateResponse->portletContext;
		   	       
		   	       if ($portletInstance->state=="cloneBeforeWrite")
		   	         $portletInstance->state= "readWrite";
		   	         
		   	       $portletInstance->portletContextChanged= true;
		      	 }
		      	  
		      	 if (isset($response->updateResponse->markupContext))
		   	       $portletInstance->markupContext= $response->updateResponse->markupContext;
		      	 
		      	 if (isset($response->updateResponse->navigationalContext))
		      	 {
		      	 	if (isset($response->updateResponse->navigationalContext->opaqueValue))
		   	         $portletInstance->navigationalContext->opaqueValue=  $response->updateResponse->navigationalContext->opaqueValue;
		   	         
		   	        if (isset($response->updateResponse->navigationalContext->publicValues))
		   	         $portletInstance->navigationalContext->publicValues=  $response->updateResponse->navigationalContext->publicValues;
		      	 }
		      	 
		      	 if (isset($response->updateResponse->events))
		      	 	  foreach (wsrp_list_portletinstances() as $eventPortletInstance)
                           wsrp_portlet_distribute_events($eventPortletInstance,$response->updateResponse->events);			      	  	
		  }
}

function wsrp_portlet_process_navigationalContext($portletInstance)
{
	global $wsrprequest;
	
    if (isset($wsrprequest['wsrp-navigationalState']))
       if (!isset($portletInstance->navigationalContext))
		   $portletInstance->navigationalContext= (object)array("opaqueValue" => $wsrprequest['wsrp-navigationalState']);
       else
           $portletInstance->navigationalContext->opaqueValue= $wsrprequest['wsrp-navigationalState'];

           
    if (isset($wsrprequest['wsrp-navigationalValues']))
       if (!isset($portletInstance->navigationalContext))
		   $portletInstance->navigationalContext= (object)array("publicValues" => $wsrprequest['wsrp-navigationalValues']);
       else
           $portletInstance->navigationalContext->publicValues= $wsrprequest['wsrp-navigationalValues'];
    
}

function wsrp_portlet_process_modes($portletInstance)
{
	global $wsrprequest;
	
    if (isset($wsrprequest['wsrp-mode']))
	   $portletInstance->mode= $wsrprequest['wsrp-mode'];

    if (isset($wsrprequest['wsrp-windowState']))
	   $portletInstance->windowState= $wsrprequest['wsrp-windowState'];
	   
	if (!isset($portletInstance->mode))
       $portletInstance->mode= "wsrp:view";    

    if (!isset($portletInstance->windowState))
       $portletInstance->windowState= "wsrp:normal";    
}

function wsrp_name_tolocal($name)
{
	$local= split(":",$name);
	
	if (count($local)==2)
	  $local= $local[1];
	else
	  $local= $local[0];
	
	//syslog(LOG_ERR,$name." -> ".$local);
	
	return $local;
}

function wsrp_event_match ($eventName, $handledEventName)
{
	$localEventName= wsrp_name_tolocal($eventName);
	$localHandledEventName= wsrp_name_tolocal($handledEventName);
	$dotpos= strlen($localHandledEventName)-1;
	
	//syslog(LOG_ERR,$localEventName." ? ".$localHandledEventName);
	
	if (substr($localHandledEventName,$dotpos,1)=='.')
	 return (substr($localEventName,1,$dotpos-1)==substr($localHandledEventName,1,$dotpos-1));
	else
	 return ($localEventName==$localHandledEventName);
}

function wsrp_event_is_handled ($eventName, $handledEvents)
{
	foreach ($handledEvents as $handledEventName)
	  if (wsrp_event_match($eventName,$handledEventName))
	    return true;
	    
    return false;
}

function wsrp_get_http_params_standard()
{
      global $HTTP_RAW_POST_DATA;

      //syslog(LOG_ERR,"HGLOBALS: ".print_r($GLOBALS,true));
      $pars= "";
      
      if ($_SERVER['QUERY_STRING'])
        $pars.= $_SERVER['QUERY_STRING'];
        
      if ($HTTP_RAW_POST_DATA)
        $pars.= ($pars ? "&".$HTTP_RAW_POST_DATA : $HTTP_RAW_POST_DATA);
        
      $paramList= explode("&",$pars);
      
      $parameters= array();
      
      while (list($index,$data)=each($paramList))
      {
          $keyvalue=explode("=",$data);
          $name= $keyvalue[0];
          $value= urldecode($keyvalue[1]);
          
          if (isset($parameters[$name]))
          {
             if (is_array($parameters[$name]))
               $parameters[$name][]= $value;
             else
             {
               $parameters[$name]= array($parameters[$name]);
               $parameters[$name][]= $value;
             }
          }
          else 
            $parameters[$name]= $value;
      }

      if (!$HTTP_RAW_POST_DATA)
         foreach ($_POST as $name => $value)
           $parameters[$name]= $value;

      return $parameters;
}

function wsrp_filter_portlet_events ($portletDescription,$events)
{
	$filteredEvents= array();
	
	//syslog(LOG_ERR,print_r($portletDescription,true)." ".print_r($events,true));
	
 	if (isset($portletDescription->handledEvents))
 	{
 	  if (isset($events->payload))
 	  {
 	      if (wsrp_event_is_handled($events->name, $portletDescription->handledEvents))
 	      {
			   $events->name= wsrp_name_tolocal($events->name);
			   $filteredEvents[]= $events;
 	      }
 	  }
 	  else
		  foreach ($events as $event)
		  {
			 if (wsrp_event_is_handled($event->name, $portletDescription->handledEvents))
			 {
			   $event->name= wsrp_name_tolocal($event->name);
			   $filteredEvents[]= $event;
			 }
		  }
 	}
 	 
	return $filteredEvents;
}

function wsrp_portlet_distribute_events ($portletInstance,$events)
{
	    if ($portletInstance->consumer->version=='2')
	    {
		    $filteredEvents= wsrp_filter_portlet_events($portletInstance->description,$events);
		    
		    if (count($filteredEvents)>0)
		    try
			{
                  $eventParams= array("portletStateChange" => $portletInstance->state,
			                          "events"             => $filteredEvents);
				
                  $response= $portletInstance->consumer->handleEvents($portletInstance->registrationContext,
                                                                      $portletInstance->portletContext,
                                                                      wsrp_get_runtimecontext($portletInstance),
                                                                      wsrp_get_usercontext(),
                                                                      wsrp_get_markupparams($portletInstance),
                                                                      $eventParams);
                                                      
                  wsrp_process_updateResponse($portletInstance,$response);
				
			}
			catch (Exception $e)
			{
			    form_set_error('', t('Cannot perform event distribution on portlet_id: %id instance: %instance error: %error', array('%id' => $portlet_id, '%instance' => $portletInstanceKey, '%error' => $e->getMessage())));
			}
	    }
}

function wsrp_portlet_blockingAction($portletInstance)
{
	global $wsrprequest;
	
	  try
	  {
		   	  
		      if (isset($wsrprequest['wsrp-interactionState']))
		      	 $portletInstance->interactionState= $wsrprequest['wsrp-interactionState']; // (session lifetime)

		      $interactionParams= array("portletStateChange" => $portletInstance->state,
		                                "interactionState"   => (isset($portletInstance->interactionState) ? $portletInstance->interactionState : ''),
		                                "formParameters"     => array());
		      	 
		      $pars= wsrp_get_http_params_standard();
		      
		      //syslog(LOG_ERR,"pars: ".print_r($pars,true));
		      
			  while (list($paramName,$paramValue)=each($pars))
			     if ($paramName!='wsrprequest'&&$paramName!='q')
			       if (is_array($paramValue))
			       {
			          foreach ($paramValue as $value)
                       $interactionParams["formParameters"][]=array("name"=> $paramName, "value"=>$value);
			       } 
			       else
				     $interactionParams["formParameters"][]=array("name"=> $paramName, "value"=>$paramValue);
				  
              if (isset($_FILES)&&count($_FILES)>0)
              {
	              $interactionParams["uploadContexts"]= array(); 
			   	  
			   	  foreach ($_FILES as $name => $file)
			   	   if ($file["name"]&&!$file["error"])
			   	  	  $interactionParams["uploadContexts"][]= array("mimeType"=> $file["type"], 
			   	  	                                                "uploadData"=> file_get_contents($file["tmp_name"]),
			   	  	                                                "mimeAttributes"=> array
			   	  	                                                                   (
				   	  	                                                                   array("name"=> "Content-Disposition",
				   	  	                                                                         "value"=> 'form-data; name="'.$name.'"; filename="'. $file["name"] .'"'),
			   	  	                                                                   
			   	  	                                                                       array("name" => "fieldname",
			   	  	                                                                             "value" => $name),
			   	  	                                                                       
			   	  	                                                                       array("name" => "name",
			   	  	                                                                             "value" => $name),
			   	  	                                                                       
			   	  	                                                                       array("name" => "filename",
			   	  	                                                                             "value" => $file["name"])
			   	  	                                                                   ));
              }
              
		   	  $response= $portletInstance->consumer->performBlockingInteraction($portletInstance->registrationContext,
					   	                                                        $portletInstance->portletContext,
										   	                                    wsrp_get_runtimecontext($portletInstance),
										   	                                    wsrp_get_usercontext(),
										   	                                    wsrp_get_markupparams($portletInstance),
										   	                                    $interactionParams);
		   	  
              //		   	  syslog(LOG_ERR,"REQUEST:\n" . $consumer->getLastRequest() . "\n");
              
	          wsrp_process_updateResponse($portletInstance,$response);					   	                                       
		      
	  }
	  catch (Exception $e)
	  {
	  	 form_set_error('', t('Cannot perform blocking interaction on portlet instance: %instance error: %error', array('%id' => $portlet_id, '%instance' => $portletInstance->key, '%error' => $e->getMessage())));
	  }
	   	 
}

function wsrp_get_consumer($url, $version)
{
        syslog(LOG_ERR,'url: '.$url);

        foreach (module_implements('wsrp_rewrite_url') as $module) 
           $url = module_invoke($module, 'wsrp_rewrite_url', $url);

	if ($version=='1')
	  $consumer= new wsrpconsumerv1($url);
	else
	  $consumer= new wsrpconsumerv2($url);
	  
	return $consumer;
	  
}

function wsrp_menu ()
{
  $items = array();

  $items['admin/config/services/wsrp'] = array(
    'title' => 'WSRP',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wsrp_admin_settings'),
    'description' => 'Configure WSRP settings',
    'access arguments' => array('administer wsrp modules'),
    'file' => 'wsrp.admin.inc',
  );
  $items['admin/config/services/wsrp/configure'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/config/services/wsrp/list'] = array(
    'title' => 'Producers',
    'page callback' => 'wsrp_admin_list',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
    'access arguments' => array('administer wsrp modules'),
    'file' => 'wsrp.admin.inc',
  );
  $items['admin/config/services/wsrp/add'] = array(
    'title' => 'Add Producer',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wsrp_admin_form', 4),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
    'access arguments' => array('administer wsrp modules'),
    'file' => 'wsrp.admin.inc',
  );
  $items['admin/config/services/wsrp/edit'] = array(
    'title' => 'Configure WSRP Producer',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wsrp_admin_form', 4, 5),
    'type' => MENU_CALLBACK,
    'access arguments' => array('administer wsrp modules'),
    'file' => 'wsrp.admin.inc',
  );
  $items['admin/config/services/wsrp/delete'] = array(
    'title' => 'Delete WSRP Producer',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wsrp_admin_delete', 5),
    'type' => MENU_CALLBACK,
    'access arguments' => array('administer wsrp modules'),
    'file' => 'wsrp.admin.inc',
  );
  $items['admin/config/services/wsrp/activate'] = array(
    'title' => 'Activate WSRP Producer',
    'page callback' => 'wsrp_admin_activate',
    'page arguments' => array(5),
    'access arguments' => array('administer wsrp modules'),
    'type' => MENU_CALLBACK,
    'file' => 'wsrp.admin.inc',
  );
  $items['admin/config/services/wsrp/deactivate'] = array(
    'title' => 'De-Activate WSRP Producer',
    'page callback' => 'wsrp_admin_deactivate',
    'page arguments' => array(5),
    'access arguments' => array('administer wsrp modules'),
    'type' => MENU_CALLBACK,
    'file' => 'wsrp.admin.inc',
  );
  
  $items['wsrp/proxy/v1'] = array(
    'title' => 'Proxy WSRP Producer v1 resources',
    'page callback' => 'wsrp_proxy_v1',
    'page arguments' => array(5),
    'access arguments' => array('proxy wsrp resource'),
    'type' => MENU_CALLBACK,
    'file' => 'wsrp.proxyv1.inc',
  );
  
  $items['wsrp/proxy/v2'] = array(
    'title' => 'Proxy WSRP Producer v2 resources',
    'page callback' => 'wsrp_proxy_v2',
    'page arguments' => array(5),
    'access arguments' => array('proxy wsrp resource'),
    'type' => MENU_CALLBACK,
    'file' => 'wsrp.proxyv2.inc',
  );
  
  return $items;
}

function wsrp_block_info ()
{
	$result= db_query("select b.portlet_id, b.description, a.producer_id, a.name, a.url, a.version, a.registration from {wsrp_producer} a, {wsrp_portlet} b where a.producer_id= b.producer_id and a.status = 1");
	$blocks= array();
	
	while ($row=$result->fetchObject())
	{
		$portlet= unserialize($row->description);
		$blocks[$row->portlet_id]= array( 'info'   => $row->name. " - " .$portlet->title->value,
						  'cache'  => DRUPAL_NO_CACHE );
	}
	
	return $blocks;
}

function wsrp_portlet_load_theme_variables (&$portlet, $portletInstance)
{
	$portlet->key= $portletInstance->key;
	$portlet->mode= $portletInstance->mode;
	$portlet->windowState= $portletInstance->windowState;
	
	$portlet->modes= array();
	$portlet->windowStates= array();
	
	if (is_array($portletInstance->description->markupTypes->modes))
		foreach ($portletInstance->description->markupTypes->modes as $mode)
		 $portlet->modes[$mode]= $portletInstance->consumer->urlRewrite("wsrp_rewrite?wsrp-urlType=render&amp;wsrp-mode=".$mode."/wsrp_rewrite",$portletInstance->key);
    else
    {
    	 $mode= $portletInstance->description->markupTypes->modes;
         $portlet->modes[$mode]= $portletInstance->consumer->urlRewrite("wsrp_rewrite?wsrp-urlType=render&amp;wsrp-mode=".$mode."/wsrp_rewrite",$portletInstance->key);        
    }
    
	if (is_array($portletInstance->description->markupTypes->windowStates))
	    foreach ($portletInstance->description->markupTypes->windowStates as $windowState)
		 $portlet->windowStates[$windowState]= $portletInstance->consumer->urlRewrite("wsrp_rewrite?wsrp-urlType=render&amp;wsrp-windowState=".$windowState."/wsrp_rewrite",$portletInstance->key);
    else
    {
    	 $windowState= $portletInstance->description->markupTypes->windowStates;
		 $portlet->windowStates[$windowState]= $portletInstance->consumer->urlRewrite("wsrp_rewrite?wsrp-urlType=render&amp;wsrp-windowState=".$windowState."/wsrp_rewrite",$portletInstance->key);
    }
}

function wsrp_get_markup ($portletInstance,$markupContext)
{
	if ($portletInstance->version=='2') 
	  return $markupContext->itemString;
	else
	  return $markupContext->markupString;
}

function wsrp_portlet_render ($portletInstanceKey)
{

	  try
	  {			  
			  $portletInstance= wsrp_get_portletinstance($portletInstanceKey);
			  
			  if (!$portletInstance) return;
			  
	      	  wsrp_portlet_load_theme_variables($portlet, $portletInstance);
	      	  
	      	  if (isset($portletInstance->markupContext))
	      	  {
                  $portlet->markup= $portletInstance->consumer->urlRewrite(wsrp_get_markup($portletInstance,$portletInstance->markupContext),$portletInstance->key);
                  unset($portletInstance->markupContext);	      	  	
	      	  }
	      	  else
	      	  {
			      $response= $portletInstance->consumer->getMarkup($portletInstance->registrationContext, 
			                                                       $portletInstance->portletContext,
			                                                       wsrp_get_runtimecontext($portletInstance),
			                                                       wsrp_get_usercontext(),
			                                                       wsrp_get_markupparams($portletInstance));
			      
				  $portlet->markup= $portletInstance->consumer->urlRewrite(wsrp_get_markup($portletInstance,$response->markupContext),$portletInstance->key);
	      	  }
	      	  
			  unset($portletInstance->navigationalContext->publicValues);
			  
			  if (isset($response->sessionContext))
		      {
	   	         $portletInstance->sessionContext=  $response->sessionContext;
		      }
		      
		   	  wsrp_set_portletinstance($portletInstance);
		      
	  }
	  catch (Exception $e)
	  {
	  	 form_set_error('', t('Cannot render portlet id: %id instance: %instance error: %error', array('%id' => $portlet_id, '%instance' => $portletInstanceKey, '%error' => $e->getMessage())));
	  }
	  	
      return $portlet;
}

function wsrp_block_view($delta)
{
      $block['content']= theme('wsrp_portlet', array( 'portlet' => wsrp_portlet_render('b'.$delta) ));
      return $block;
}

function wsrp_node_info() {
  return array(
    'wsrp' => array(
      'name' => t('WSRP node'),
      'base' => 'wsrp',
      'description' => t("This WSRP node allows you to publish WSRP portlets as nodes."),
      'has_title' => TRUE,
      'title_label' => t('Title'),
      'has_body' => TRUE,
      'body_label' => t('Description')
    )
  );
}

function wsrp_access($op, $node, $account) {
  if ($op == 'create') {
    return user_access('create wsrp content', $account);
  }

  if ($op == 'update') {
    if (user_access('edit any wsrp content', $account) || (user_access('edit own wsrp content', $account) && ($account->uid == $node->uid))) {
      return TRUE;
    }
  }

  if ($op == 'delete') {
    if (user_access('delete any wsrp content', $account) || (user_access('delete own wsrp content', $account) && ($account->uid == $node->uid))) {
      return TRUE;
    }
  }
}

function wsrp_perm() {
  return array(
    'create wsrp content',
    'delete own wsrp content',
    'delete any wsrp content',
    'edit own wsrp content',
    'edit any wsrp content',
    'proxy wsrp resource',
    'administer wsrp modules'
  );
}

function wsrp_get_nls_string($nls_string) {
    global $language;

    if (is_array($nls_string))
    {
       foreach ($nls_string as $str)
       {
            if ($str->lang==$language->language)
              return $str->value;
       }

       foreach ($nls_string as $str)
       {
            if (substr($str->lang,0,strlen($language->language))==$language->language)
              return $str->value;
       }
       
       return $nls_string[0]->value;
    }
    else
       return $nls_string->value;

}

function wsrp_portlet_options() {

	$result= db_query("select b.portlet_id, b.description, a.name from {wsrp_producer} a, {wsrp_portlet} b where a.producer_id= b.producer_id and a.status = 1");
	$options= array();
	
	while ($row=$result->fetchObject())
	{
		$portlet= unserialize($row->description);
                //syslog(LOG_ERR,"portlet: ".print_r($portlet,true)." - ".print_r($language,true));
		$options[$row->portlet_id]= $row->name. " - " .wsrp_get_nls_string($portlet->title);
	}
	
	return $options;
	
}

function wsrp_form(&$node) {

  $type = node_type_get_type( $node);

  if ($type->has_title) {
    $form['title'] = array(
      '#type' => 'textfield',
      '#title' => check_plain($type->title_label),
      '#required' => TRUE,
      '#default_value' => $node->title,
      '#weight' => -5
    );
  }
  
  // Now we define the form elements specific to our node type.
  $form['portlet_id'] = array(
    '#type' => 'select',
    '#title' => t('Portlet'),
    '#required' => TRUE,
    '#default_value' => (isset($node->portlet_id) ? $node->portlet_id : ''),
    '#options' => wsrp_portlet_options()
  );

  return $form;
}

function wsrp_validate(&$node) {
    // nothing to do
}

function wsrp_insert($node) {
  db_query("INSERT INTO {node_wsrp} (vid, nid, portlet_id) VALUES (?,?,?)", array($node->vid, $node->nid, $node->portlet_id));
}


function wsrp_update($node) {
  if ($node->revision) {
    wsrp_insert($node);
  }
  else {
    db_query("UPDATE {node_wsrp} SET portlet_id = ? WHERE vid = ?", array($node->portlet_id, $node->vid));
  }
}

function wsrp_nodeapi(&$node, $op, $teaser, $page) {
  switch ($op) {
    case 'delete revision':
      db_query('DELETE FROM {node_wsrp} WHERE vid = ?', array($node->vid));
      break;
  }
}

function wsrp_delete($node) {
  db_query('DELETE FROM {node_wsrp} WHERE nid = ?', array($node->nid));
}

function wsrp_load($nodes) {
  $results = db_query('SELECT nid, portlet_id FROM {node_wsrp} WHERE nid IN (:nids)', array(':nids' => array_keys($nodes)));

  foreach ($results as $record)
    $nodes[$record->nid]->portlet_id = $record->portlet_id; 
}

function wsrp_view($node, $view_mode) {
  
  $node->content['portlet'] = array(
    '#markup' => theme('wsrp_portlet', array( 'portlet' => wsrp_portlet_render('n'.$node->nid.'p'.$node->portlet_id) )),
    '#weight' => 1
  );

  return $node;
}

function wsrp_theme() {
  return array(
    'wsrp_portlet' => array(
      'variables' => array('portlet'),
    ),
  );
}

function theme_wsrp_portlet($variables) {

  $portlet= $variables['portlet'];

  $output= '';

  if (count($portlet->modes)>1)
  {
	    foreach ($portlet->modes as $mode => $url)
		    if ($mode==$portlet->mode)
		         	$output.= '<li>'.$mode.'</li>';
		    else
		         	$output.= '<li><a href="'.$url.'">'.$mode.'</a></li>';
		    
	    
	  	$output= '<ul class="wsrpmodes">'.$output.'</ul>';
  }
  
  
  if (count($portlet->windowStates)>1)
  {
	    foreach ($portlet->windowStates as $windowState => $url)
		    if ($windowState==$portlet->windowState)
		         	$output.= '<li>'.$windowState.'</li>';
		    else
		         	$output.= '<li><a href="'.$url.'">'.$windowState.'</a></li>';
		    
	    
	  	$output= '<ul class="wsrpwindowstates">'.$output.'</ul>';
  }
    
  return '<div class="wsrpportlet" id="'.$portlet->key.'"><div class="wsrpportletheader">'.$output.'</div><div class="wsrpportletbody">'.$portlet->markup.'</div></div>';
}

?>
