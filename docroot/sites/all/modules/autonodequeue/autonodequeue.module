<?php

/**
 * Implements hook_nodequeue_alter().
 *
 * @TODO Optimize this OR don't nodequeue_alter at all. Reasons:
 * - Not every node (type) is nodequeue relevant;
 * - Autonodequeue settings aren't relevant for all nodes;
 * - Autonodequeue settings aren't always relevant. Actually only on:
 *   * nodequeue admin/edit
 *   * (some) node add/edit
 */
function autonodequeue_nodequeue_alter($queues, $context) {
  if ('load_queues' == $context) {
    $query = db_query('SELECT * FROM {nodequeue_types} WHERE qid IN (:qids)', array(
      ':qids' => array_keys($queues),
    ));
    foreach ($query as $info) {
      $queues[$info->qid]->autonodequeue[$info->type] = (int) $info->x_autonodequeue;
    }
  }
}


/**
 * Implements hook_form_FORM_ID_alter() for nodequeue_edit_queue_form().
 */
function autonodequeue_form_nodequeue_edit_queue_form_alter(&$form, &$form_state, $form_id = 'nodequeue_edit_queue_form') {
  $qid = isset($form['qid']) ? (int) $form['qid']['#value'] : 0;
  $queue = $qid ? nodequeue_load($qid) : NULL;

  $types = $form['types']['#options'];
  $enabled_types = $form['types']['#default_value'];
  $connection_types = $queue ? $queue->autonodequeue : array();

  $description = $qid ?
    t('Choose how automatically nodes are added to this queue per node type.') :
    t('Options will appear here per checked node type.');
  $form['autonodequeue'] = array(
    '#type' => 'fieldset',
    '#title' => t('Autonodequeue'),
    '#tree' => TRUE,
    '#attributes' => array('class' => array('autonodequeue-types')),
    '#description' => $description,
  );
  foreach ($types as $type_name => $type_title) {
    $classes = array();
    in_array($type_name, $enabled_types) && $classes[] = 'x-enabled';
    $form['autonodequeue'][$type_name] = array(
      '#type' => 'select',
      '#title' => $type_title,
      '#options' => array(
        '0' => t("Don't ask, don't add"),
        '1' => t("Ask me, off by default"),
        '2' => t("Ask me, on by default"),
        '3' => t("Always, don't ask"),
      ),
      '#default_value' => isset($connection_types[$type_name]) ? $connection_types[$type_name] : 0,
      '#states' => array(
        'invisible' => array(
          '#edit-types-' . str_replace('_', '-', $type_name) => array('checked' => false),
        ),
      ),
    );
  }

  $form['#submit'][] = 'autonodequeue_nodequeue_edit_queue_submit';
}


/**
 * Submit handler for autonodequeue_form_nodequeue_edit_queue_form_alter().
 */
function autonodequeue_nodequeue_edit_queue_submit($form, &$form_state) {
  $values = &$form_state['values'];

  $qid = (int) $values['qid'];
  $queue = nodequeue_load($qid);
  $enabled_types = isset($values['types']) ? array_filter($values['types']) : $queue->types;

  foreach ($values['autonodequeue'] as $type => $connection_type) {
    $connection_type = (int) $connection_type;
    if (isset($enabled_types[$type])) {
      db_update('nodequeue_types')
        ->fields(array(
          'x_autonodequeue' => $connection_type,
        ))
        ->condition('qid', $qid)
        ->condition('type', $type)
        ->execute();
    }
  }
}


/**
 * Returns in which queues a node exists.
 */
function _autonodequeue_in_queues_status($nid) {
  $query = db_query('SELECT * FROM {nodequeue_nodes} WHERE nid = ?', array($nid));
  $statuses = array();
  foreach ($query as $queue) {
    $statuses[$queue->qid] = $queue;
  }

  return $statuses;
}


/**
 * Implements hook_form_FORM_ID_alter() for node_form().
 */
function autonodequeue_form_node_form_alter(&$form, &$form_state, $form_id = 'node_form') {
  // Node info.
  $node = $form_state['node'];
  $node_type = $node->type;
  $nid = isset($node->nid) ? (int) $node->nid : 0;

  // Get queues.
  $query = db_query('SELECT qid FROM {nodequeue_types} WHERE type = :node_type AND x_autonodequeue > 0', array(
    ':node_type' => $node_type,
  ));
  $queues = array();
  foreach ($query as $info) {
    $queues[] = $info->qid;
  }
  $queues = nodequeue_load_queues($queues);

  // No queues, no tab.
  if (!$queues) {
    return;
  }

  $form['#attached']['js'][] = drupal_get_path('module', 'autonodequeue') . '/autonodequeue.admin.js';

  // Get current in-queues status.
  $statuses = _autonodequeue_in_queues_status($nid);

  // Add vertical tab for Autonodequeue.
  $form['autonodequeue'] = array(
    '#type' => 'fieldset',
    '#title' => t('Autonodequeue'),
    '#group' => 'additional_settings',
    '#weight' => 500,
    '#tree' => TRUE,
  );
  foreach ($queues as $queue) {
    $connection = $queue->autonodequeue[$node_type];

    $on = $nid ? isset($statuses[$queue->qid]) : 2 <= $connection;
    $always = $nid ? FALSE : 3 <= $connection;

    $form['autonodequeue'][$queue->qid] = array(
      '#title' => t('Add to %queue', array('%queue' => $queue->title)),
      '#type' => 'checkbox',
      '#default_value' => $on,
    );

    if ($always) {
      $form['autonodequeue'][$queue->qid] += array(
        '#value' => $on,
        '#disabled' => TRUE,
        '#description' => t('The node will be added to this nodequeue. The choice is not yours.'),
      );
    }
  }

  $form['#submit'][] = 'autonodequeue_node_form_submit';
}


/**
 * Submit handler for autonodequeue_form_node_form_alter().
 */
function autonodequeue_node_form_submit($form, &$form_state) {
  $values = &$form_state['values'];

  if (isset($values['autonodequeue'])) {
    $queues = $values['autonodequeue'];

    // Pass autonodequeue arguments to hook_node_insert.
    // If this is a new node, at this point we don't know its nid yet.
    $form_state['node']->autonodequeue = $queues;
  }
}


/**
 * Implements hook_node_insert().
 */
function autonodequeue_node_insert($node) {
  $nid = $node->nid;

  // Set your engines to inefficiency!
  if (isset($node->autonodequeue)) {

    // Fetch nodequeues.
    $queues = nodequeue_load_queues(array_keys($node->autonodequeue));

    // Get current in-queues status.
    $statuses = _autonodequeue_in_queues_status($nid);

    // Cycle through this node type's relevant queues.
    foreach ($node->autonodequeue as $qid => $add) {
      if ($add && !isset($statuses[$qid])) {
        // Add to all subqueues.
        $subqueues = nodequeue_load_subqueues_by_queue($qid);
        foreach ($subqueues as $subqueue) {
          nodequeue_subqueue_add($queues[$qid], $subqueue, $nid);
        }
      }
      elseif (!$add && isset($statuses[$qid])) {
        // Remove from all subqueues.
        $subqueues = nodequeue_load_subqueues_by_queue($qid);
        foreach ($subqueues as $subqueue) {
          nodequeue_subqueue_remove_node($subqueue->sqid, $nid);
        }
      }
    }
  }
}


/**
 * Implements hook_node_update().
 */
function autonodequeue_node_update($node) {
  return autonodequeue_node_insert($node);
}
