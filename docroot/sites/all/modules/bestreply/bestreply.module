<?php

/**
 * @file
 * The bestreply module
 */

/**
 * Implementation of hook_help().
 */
function bestreply_help($path, $arg) {
  switch ($path) {
    case 'admin/modules#description':
      // This description is shown in the listing at admin/modules.
      return t('Best Reply module');
      break;
  }
}

/**
 * Implementation of hook_perm().
 */
function bestreply_permission() {
  return array(
    'view bestreply' => array(
      'title' => t('View Best Reply'),
      'description' => t('Allow users to view the best reply'),
    ), 
    'mark bestreply' => array(
      'title' => t('Mark Best reply'),
      'description' => t('Mark best reply for nodes they authored'),
    ),
    'clear bestreply' => array(
      'title' => t('Clear Best Reply'),
      'description' => t('Clear or remove the best reply from nodes they authored'),
    ),
    'moderate bestreply' => array(
      'title' => t('Moderate Best Reply'),
      'description' => t('Mark and clear the bestreply from any node'),
    ),
    'administer bestreply' => array(
      'title' => t('Administer Best Reply'),
      'description' => t('Administer Best Reply configurations and settings'),
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function bestreply_menu() {
  $items = array();
    $items['bestreply/mark/%'] = array(
      'title' => 'Best Reply Mark',
      'page callback' => 'bestreply_mark',
      'page arguments' => array(2),
      'access arguments' => array('mark bestreply'),
      'type' => MENU_CALLBACK,
    );
    $items['bestreply/clear/%'] = array(
      'title' => 'Best Reply Clear',
      'page callback' => 'bestreply_clear',
      'page arguments' => array(2),
      'access arguments' => array('clear bestreply'),
      'type' => MENU_CALLBACK,
    );
    $items['bestreply/getcomment/%'] = array(
      'title' => 'Best Reply get comment',
      'page callback' => '_bestreply_getcomment',
      'page arguments' => array(2),
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
    );
    $items['admin/config/content/bestreply'] = array(
      'title' => 'Best Reply',
      'page callback' => 'bestreply_admin_list',
      'access arguments' => array('administer bestreply'),
      'description' => 'Allow users to mark the best reply to their topic.',
      'type' => MENU_NORMAL_ITEM,
    );
    $items['admin/config/content/bestreply/settings'] = array(
      'title' => 'Settings',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('bestreply_admin_settings'),
      'access arguments' => array('administer bestreply'),
      'type' => MENU_LOCAL_TASK,
    );
    $items['admin/config/content/bestreply/list'] = array(
      'title' => 'List',
      'access arguments' => array('administer bestreply'),
      'type' => MENU_DEFAULT_LOCAL_TASK,
    );
  return $items;
}

/**
 * Implementation of hook_admin_settings().
 */
function bestreply_admin_settings() {
  $form = array();
  $form['bestreply']['bestreply_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
    '#default_value' => variable_get('bestreply_name', 'bestreply'),
    '#description' => t('The name you wish to use for bestreply'),
  );
  
   $form['bestreply_change'] = array(
    '#type' => 'radios',
    '#title' => t('Show best reply link'),
    '#default_value' => variable_get('bestreply_change', '1'),
    '#options' =>  array('1' => 'yes', '0' => 'no'),
    '#description' => t("Show the change bestreply link, when a bestreply already exists."),
  );
  
  $form['bestreply_move_reply'] = array(
    '#type' => 'fieldset',
    '#title' => t('Move to top'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['bestreply_move_reply']['bestreply_movetotop'] = array(
    '#type' => 'radios',
    '#title' => t('Clone and Move to top'),
    '#default_value' => variable_get('bestreply_movetotop', 'no'),
    '#options' => array('yes' => 'yes', 'no' => 'no'),
    '#description' => t('Move the comment to the first comment position, and collapse in the original position.'),
  );
  $form['bestreply_move_reply']['bestreply_collapse'] = array(
    '#type' => 'radios',
    '#title' => t('Collapse reply'),
    '#default_value' => variable_get('bestreply_collapse', 'yes'),
    '#options' =>  array('yes' => 'yes', 'no' => 'no'),
    '#description' => t('Collapse the original comment in place, when it has been cloned and moved to top.'),
  );
  $form['bestreply_node_types'] = array(
    '#type' => 'fieldset',
    '#title' => t('Node types'),
    '#description' => t('Check the node types you want to be able to mark a comment as the !bestreply.', array('!bestreply' => variable_get('bestreply_name', 'bestreply')) ),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['bestreply_node_types']['bestreply_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Types'),
    '#default_value' => variable_get('bestreply_types', array()),
    '#options' => node_type_get_names(),
  );

  return system_settings_form($form);
}


/**
 * Implementation of hook_comment_load().
 */
function bestreply_comment_load($comments) {
  foreach ($comments as $comment) {
    if ($comment->cid && $comment->cid == bestreply_ismarked($comment->nid) && user_access('view bestreply')) {
      $comment->bestreply = 1; // add new variable to the comment so we can easily theme.
    }
    else {
      $comment->bestreply = 0;
    }
  }
}

/**
 * Implementation of hook_comment_view().
 */
function bestreply_comment_view($comment, $view_mode) {
  global $user;
  $nts = variable_get('bestreply_types', array());
  $ntype = bestreply_parent_type($comment->nid);
  $brname = variable_get('bestreply_name', 'bestreply');
  $brchange = variable_get('bestreply_change', '1');
  
  if (!isset($nts[$ntype]) || $nts[$ntype] == '0') {
    return;
  }
  $nuid = db_query('SELECT uid from {node} where nid = :nid', array('nid' => $comment->nid))->fetchField();
  $author = ($user->uid == $nuid);
  $moderator = user_access('moderate bestreply');
  $brcid = bestreply_ismarked($comment->nid);
  $links = array();
  
  if (!$brcid) {
    if ($author && user_access('mark bestreply') || $moderator) {
       $links['bestreply_link'] = array(
          'title' =>  $brname,
          'href' => 'bestreply/mark/' . $comment->cid,
          'attributes' => array('title' => t('Mark this comment as the !bestreply.', array('!bestreply' => $brname)), 'class' => array('br_mark')),
       );
    }
  }
  else {
    if ($brcid == $comment->cid) {
       if ($author && user_access('clear bestreply') || $moderator) {
          $links['bestreply_link'] = array(
          'title' => t('Clear !bestreply', array('!bestreply' => $brname)),
          'href' => 'bestreply/clear/' . $comment->cid,
          'attributes' => array('title' => t('Clear this !bestreply.', array('!bestreply' => $brname)), 'class' => array('br_clear')),
          );
       }
    }
    else {
      if (($author && user_access('mark bestreply') && $brchange) || $moderator) {
        $links['bestreply_link'] = array(
          'title' =>  $brname,
          'href' => 'bestreply/mark/' . $comment->cid,
          'attributes' => array('title' => t('Set this comment as the !bestreply.', array('!bestreply' => $brname)), 'class' => array('br_mark')),
        );
      }
    }
  }
  
  if (isset($links['bestreply_link'])) {
    $comment->content['links']['bestreply'] = array(
      '#theme' => 'links',
      '#links' => $links,
      '#attributes' => array('class' => array('links', 'inline')),
    );
  }
}  

/**
 * Implementation of hook_node_view().
 */
function bestreply_node_view($node, $view_mode) {
  if ($view_mode == 'full') {
    $nts = variable_get('bestreply_types', array());
    $brname = variable_get('bestreply_name', 'bestreply');
    if (!isset($nts[$node->type]) || $nts[$node->type] == '0') {
      return;
    }
    drupal_add_js(drupal_get_path('module', 'bestreply') . '/bestreply.js');
    $brid = bestreply_ismarked($node->nid);
    $movetotop = variable_get('bestreply_movetotop', 'yes');
    $collapse = variable_get('bestreply_collapse', '');

      drupal_add_js(array(
        'bestreply_name' => $brname,
        'bestreply_movetotop' => $movetotop,
        'bestreply_ismarked' => $brid,
        'bestreply_collapse' => $collapse,
      ), array('type' => 'setting')); //make it available to js

      if ($brid && user_access('view bestreply')) {
        $links = array();
        $links['bestreply_view'] = array(
          'title' => t('view !bestreply', array('!bestreply' => $brname)),
          'href' => 'node/' . $node->nid,
          'attributes' => array('title' => t('Jump to the !bestreply.', array('!bestreply' => $brname)), 'class' => array('br_view'), ),
          'fragment' => 'comment-' . $brid,
        );
        $node->content['links'] = array(
          '#theme' => 'links',
          '#links' => $links,
          '#attributes' => array('class' => array('links', 'inline')),
        );

     }
  }
}


/**
 * Insert or update the marked comment info.
 */
function bestreply_mark($cid = '') {
  if (isset($cid)) {
    global $user;
    $rt = FALSE;
    $dt = REQUEST_TIME;
    $comment = db_query("SELECT nid, uid FROM {comment} WHERE cid = :cid", array('cid' => $cid))->fetchObject();
    if (bestreply_ismarked($comment->nid)) {
      $action ='replace';
      //User points integration
      if (module_exists('userpoints')) {
        _bestreply_remove_upoints($comment->nid);
        _bestreply_add_upoints($comment->uid, $user->uid, $comment->nid );
      }
      $rt = db_query('UPDATE {bestreply} SET cid = :cid, aid = :aid, uid = :uid, dt = :dt  where nid = :nid',  
           array('cid' => $cid, 'aid' => $comment->uid, 'uid' => $user->uid, 'dt' => $dt, 'nid' => $comment->nid));
    }
    else{
      $action ='mark';
      $rt = db_query('INSERT into {bestreply} values( :nid, :cid, :aid, :uid, :dt)', 
           array('nid' => $comment->nid, 'cid' => $cid, 'aid' => $comment->uid, 'uid' => $user->uid, 'dt' => $dt));
      //User points integration
      if (module_exists('userpoints')) {
        _bestreply_add_upoints($comment->uid, $user->uid, $comment->nid);
      }
    }

    if (isset($_REQUEST['js'])) {
      $status = ($rt)?TRUE:FALSE;
      drupal_add_http_header('Content-Type', 'text/javascript');
      print drupal_json_encode(array(
        'status' => $status,
        'cid' => $cid,
        'action' => $action,
      ));
      exit;
    }
    else{
      drupal_goto('node/' . $comment->nid, array('fragment' => 'comment-' . $cid));
    }
  }
}


/**
 * Clear the marked comment info.
 */
function bestreply_clear($cid = '') {
  if (isset($cid)) {
    global $user;
    $dt = REQUEST_TIME;
    $comment = db_query("SELECT nid, uid FROM {comment} WHERE cid = :cid", array('cid' => $cid))->fetchObject();
    if (bestreply_ismarked($comment->nid)) {
      if (module_exists('userpoints')) {
        _bestreply_remove_upoints($comment->nid);
      }
      $rt = db_query("DELETE FROM {bestreply} WHERE nid = :nid", array('nid' => $comment->nid));
    }
    if (isset($_REQUEST['js'])) {
      $status=($rt)?TRUE:FALSE;
      drupal_add_http_header('Content-Type', 'text/javascript');
      print drupal_json_encode(array(
        'status' => $status,
        'cid' => $cid,
        'action' => 'clear',
      ));
      exit;
    }
    else {
      drupal_goto('node/' . $comment->nid, array());
    }
  }
}


/**
 * Return the marked cid (comment id) for the given node id.
 */
function bestreply_ismarked($nid = '') {
  if (!$nid) {
    return FALSE;
  }
  return db_query('SELECT cid FROM {bestreply} WHERE nid = :nid', array('nid' => $nid))->fetchField();
}


/**
 * List all the best reply data
 */
function bestreply_admin_list() {
  $head = array(
    array('data' => 'title'),
    array('data' => 'author', 'field' => 'cname', 'sort' => 'asc'),
    array('data' => 'marked by', 'field' => 'name', 'sort' => 'asc'),
    array('data' => 'when', 'field' => 'dt', 'sort' => 'asc')
  );

  $sql = db_select('bestreply', 'b')->fields('b', array('nid', 'cid', 'uid', 'aid', 'dt'));
  $sql->join('node', 'n', 'n.nid = b.nid' );
  $sql->addField('n', 'title');
  $sql->join('comment', 'c', 'c.cid = b.cid');
  $sql->addField('c', 'name', 'cname');
  $sql->join('users', 'u', 'u.uid = b.uid');
  $sql->addField('u', 'name');

  
  $sql = $sql->extend('PagerDefault')->extend('Tablesort')->orderByHeader($head);
  $result = $sql->execute()->fetchAll();

  foreach ($result as $reply) { 
  
    $options = array('fragment' => 'comment-' . $reply->cid);
    $rows[] = array(
      l($reply->title, 'node/' . $reply->nid, $options),
      l( $reply->cname, 'user/' . $reply->aid),
      l( $reply->name, 'user/' . $reply->uid),
      t('!time ago', array('!time' => format_interval(REQUEST_TIME - $reply->dt)))
    );
  }
  if (isset($rows)) {
    // Add the pager
    $build['content'] = array(
    '#theme' => 'table',
    '#header' => $head,
    '#rows' => $rows
    );
    $build['pager'] = array(
      '#theme' => 'pager',
      '#weight' => 5,
    );
  return $build;
  }
  else {
    return t('No results to display');
  }
}

/**
 * Return the node type give the node id.
 */
function bestreply_parent_type($nid) {
  return db_query('SELECT type FROM {node} WHERE nid = :nid', array('nid' => $nid))->fetchField(); 
}


function bestreply_userpoints($op, $params = array()) {
  global $base_url;
  $brname = variable_get('bestreply_name', 'bestreply');
  switch ($op) {
    case 'setting':
      $group = 'bestreply';
      $form[$group] = array(
        '#type' => 'fieldset',
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
        '#title' => t('!Points for Bestreply', userpoints_translation()),
      );

      $form[$group]['bestreply_userpoints_tid'] = array(
        '#type'          => 'select',
        '#title'         => t('Category'),
        '#default_value' => variable_get('bestreply_userpoints_tid', 0),
        '#options'       => userpoints_get_categories(),
        '#description'   => t('Points for Bestreply actions will be assigned to this category. You can modify what categories are available by modifying the <a href="!url"><b>Userpoints taxonomy</b></a>.',
        array('!url' => url('admin/content/taxonomy/' . variable_get(USERPOINTS_CATEGORY_DEFAULT_VID, '')))),
      );

      $form[$group]['userpoints_bestreply_mark'] = array(
        '#type'          => 'textfield',
        '#title'         => t('!Points for marking Bestreply', userpoints_translation()  ),
        '#default_value' => variable_get('userpoints_bestreply_mark', 1),
        '#size'          => 5,
        '#maxlength'     => 5,
        );

      $form[$group]['userpoints_bestreply_author'] = array(
        '#type'          => 'textfield',
        '#title'         => t('!Points for authoring a Bestreply', userpoints_translation() ),
        '#default_value' => variable_get('userpoints_bestreply_author', 2),
        '#size'          => 5,
        '#maxlength'     => 5,
        );
      return $form;
  }
}

function _bestreply_remove_upoints($nid) {
  $brname = variable_get('bestreply_name', 'bestreply');
  $upa = variable_get('userpoints_bestreply_author', 2);
  $upm = variable_get('userpoints_bestreply_mark', 1);
  //get the bestreply marker and comment author so we can remove the old ones.
  $oldbr = db_query("SELECT aid, uid FROM {bestreply} WHERE nid = :nid", array('nid' => $nid ))->fetchField();
  // Remove old best reply author userpoints
  $params = array(
    'uid' => $oldbr->aid,
    'points' => -$upa,
    'operation'   => 'bestreply_author_remove',
    'tid'         => variable_get('bestreply_userpoints_tid', 0),
    'reference'   => 'bestreply',
    'description' => t('Points removed as the !bestreply was changed or removed from', array('!bestreply' => $brname)) . ' ' . l( 'node/' . $nid, 'node/' . $nid ),
  );
  userpoints_userpointsapi($params);
  //Remove old best reply marker userpoints
  $params = array(
    'uid' => $oldbr->uid,
    'points' => -$upm,
    'operation'   => 'bestreply_mark_remove',
    'tid'         => variable_get('bestreply_userpoints_tid', 0),
    'reference'   => 'bestreply',
    'description' => t('Points removed as the !bestreply was changed or removed from', array('!bestreply' => $brname)) . ' ' . l( 'node/' . $nid, 'node/' . $nid ),
  );
  userpoints_userpointsapi($params);
}


function _bestreply_add_upoints($cuid, $uid, $nid) {
  $brname = variable_get('bestreply_name', 'bestreply');
  $upa = variable_get('userpoints_bestreply_author', 2);
  $upm = variable_get('userpoints_bestreply_mark', 1);
  // ADD best reply author userpoints
  $params = array(
    'uid' => $cuid,
    'points' => $upa,
    'operation'   => 'bestreply_author',
    'tid'         => variable_get('bestreply_userpoints_tid', 0),
    'reference'   => 'bestreply',
    'description' => t('Points added for authoring the !bestreply in', array('!bestreply' => $brname)) . ' ' . l( 'node/' . $nid, 'node/' . $nid ),
  );
  userpoints_userpointsapi($params);
  //ADD best reply marker userpoints
  $params = array(
    'uid' => $uid,
    'points' => $upm,
    'operation'   => 'bestreply_mark',
    'tid'         => variable_get('bestreply_userpoints_tid', 0),
    'reference'   => 'bestreply',
    'description' => t('Points added for marking the !bestreply in', array('!bestreply' => $brname)) . ' ' . l( 'node/' . $nid, 'node/' . $nid ),
  );
  userpoints_userpointsapi($params);
}

/**
 * output a single themed comment.
 */
function _bestreply_getcomment( $cid ) {
  $nid = db_query("Select nid FROM {comment} WHERE cid = :cid", array('cid' => $cid))->fetchField();
  $node = node_load($nid);
  $comment = comment_load($cid);
  print drupal_render(comment_view($comment, $node, 'full'));
  exit();
}


function bestreply_preprocess_comment(&$variables) {
  $comment = $variables['comment'];
  if (isset($comment->bestreply) && $comment->bestreply === 1) {
    $node = $variables['node'];
    $variables['title'] = l($comment->subject, 'node/' . $node->nid, array('fragment' => "comment-$comment->cid"));
    // add bestreply to the classes array. 
    $variables['classes_array'][] = 'bestreply';
    
     drupal_add_js(array(
        'bestreply_onthispage' => 1,
      ), array('type' => 'setting'));
    
  }
}

/**
 * Implementation of hook_view_api().
 */
function bestreply_views_api() {
  return array(
    'api' => 2.0,
  );
}

/**
 * Implementation of hook_node_load().
 */
function bestreply_node_load($nodes, $types) {
  foreach ($nodes as $key => $node) {
    if (bestreply_ismarked($key)) {
      $nodes[$key]->has_bestreply = TRUE;
    }
  }
}