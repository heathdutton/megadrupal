<?php

/**
 * @file
 * Contains CurrencyYahooFinanceCurrencyExchangerWebTestCase.
 */

/**
 * Tests CurrencyYahooFinanceCurrencyExchanger.
 */
class CurrencyYahooFinanceCurrencyExchangerWebTestCase extends DrupalWebTestCase {

  /**
   * Implements DrupalTestCase::getInfo().
   */
  static function getInfo() {
    return array(
      'name' => 'CurrencyYahooFinanceCurrencyExchanger',
      'group' => 'Yahoo! Finance currency exchange',
    );
  }

  /**
   * Overrides parent::setUp().
   */
  function setUp(array $modules = array()) {
    $this->profile = 'testing';
    parent::setUp($modules + array('currency_yahoo_finance'));
  }

  /**
   * Tests CurrencyYahooFinanceCurrencyExchanger::currencyCodes.
   */
  function testCurrencyCodes() {
    // Make sure all codes are three uppercase letters.
    foreach (CurrencyYahooFinanceCurrencyExchanger::currencyCodes() as $currency_code) {
      $this->assertTrue(preg_match('/^[A-Z]{3}$/', $currency_code), sprintf('Currency code %s consists of three uppercase letters.', $currency_code));
    }
  }

  /**
   * Tests CurrencyYahooFinanceCurrencyExchanger::parseResponse().
   */
  function testParseResponse() {
    $responses_valid = array(
      '"EURNLG=X",2.20371',
      '"UAHEUR=X",4',
    );
    foreach ($responses_valid as $response) {
      $this->assertTrue(CurrencyYahooFinanceCurrencyExchanger::parseResponse($response));
    }
    $responses_invalid = array(
      // An empty response.
      '',
      // A rate that could not be found.
      '"EURNLG=X",0.00',
      // A non-numeric rate.
      'EURUAH,foo',
      // Something unexpected.
      'Oons hat blif toch aaltied in Twèènte',
    );
    foreach ($responses_invalid as $response) {
      $this->assertFalse(CurrencyYahooFinanceCurrencyExchanger::parseResponse($response));
    }
  }

  /**
   * Tests CurrencyYahooFinanceCurrencyExchanger::operationsLinks().
   */
  function testOperationsLinks() {
    $this->assertTrue(is_array(CurrencyYahooFinanceCurrencyExchanger::operationsLinks()));
  }

  /**
   * Tests CurrencyYahooFinanceCurrencyExchanger::cacheLifetime().
   */
  function testCacheLifetime() {
    $this->assertTrue(is_int(CurrencyYahooFinanceCurrencyExchanger::cacheLifetime()));
  }

  /**
   * Tests CurrencyYahooFinanceCurrencyExchanger::testGetCache().
   */
  function testGetCache() {
    $rates = array(
      'EUR' => array(
        'NLG' => 7,
      ),
    );

    // Test that cached rates can be retrieved.
    CurrencyYahooFinanceCurrencyExchanger::setCache($rates);
    sleep(3);
    $this->assertEqual(CurrencyYahooFinanceCurrencyExchanger::getCache(), $rates);

    // Test that expired rates are not retrieved.
    variable_set('currency_yahoo_finance_cache_lifetime', 1);
    CurrencyYahooFinanceCurrencyExchanger::setCache($rates);
    sleep(3);
    drupal_flush_all_caches();
    $this->assertFalse(CurrencyYahooFinanceCurrencyExchanger::getCache());
  }
}