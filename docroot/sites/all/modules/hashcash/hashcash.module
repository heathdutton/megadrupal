<?php

/**
 * Implementation of hashcash for prevention of SPAM
 * 
 * S.D.Rycroft
 * 
 * 4/2/2011
 * 
 * The intention of this module is to allow site administrators to add a 
 * hashcash hidden form field to any form for anonymoous (or any defined role)
 * on their site.  This will prevent posting of values to the form without
 * a hashcash value also being submitted.  The form DOES NOT degrade when
 * javascript is not available, although this may be changed so that it
 * degrades to use a CAPTCHA.
 */
/**
 * Variables set by this module:
 * 
 * hashcash_addorignore (boolean):
 * This value states whether the following variable defines form_ids to add
 * hashcash to, or to NOT add hashcash to.  True if add, false if ignore.  By
 * default this is setup to "ignore" the listed forms.
 * 
 * hashcash_form_ids (array):
 * The IDs of the forms which are either being ignored, or are having hashcash
 * added to.  By default this is setup to ignore the user_login form.
 * 
 * hashcash_expire (date string):
 * The length of time for which a hashcash string should be valid.  The default
 * recommended by the writers of hashcash is set quite high, however, given the
 * original implementation of hashcash was for email, I feel we can set this
 * much lower, infact, one day is probably long enough.
 */
/**
 * Implementation of hook_permission
 * 
 * States the roles that DO NOT have to calculate a HASHCASH value for any 
 * form.
 */
function hashcash_permission(){
  return array(
    'submit form without hashcash' => array(
      'title' => t('Submit form without hashcash')
    ),
    'administer hashcash' => array(
      'title' => t('Administer hashcash')
    )
  );
}

/**
 * Implementation of hook_menu
 */
function hashcash_menu(){
  return array(
    'admin/config/system/hashcash' => array(
      'title' => 'Hashcash settings',
      'description' => 'Change the default hashcash settings to include or exclude forms.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array(
        'hashcash_admin_settings'
      ),
      'access arguments' => array(
        'administer hashcash'
      ),
      'file' => 'hashcash.admin.inc'
    ),
    'hashcash/%' => array(
      'title' => 'Get Hashcash',
      'description' => 'Returns the start part of a hashcash string',
      'page callback' => 'hashcash_get_hashcash',
      'page arguments' => array(
        1
      ),
      'access arguments' => array(
        'access content'
      ),
      'type' => MENU_CALLBACK,
      'file' => 'hashcash.js.inc'
    )
  );
}

/**
 * Implements hook_boost_is_cacheable().
 */
function hashcash_boost_is_cacheable($parts){
  if(isset($parts['menu_item']['path']) && $parts['menu_item']['path'] == 'hashcash/%'){
    $parts['is_cacheable'] = FALSE;
  }
  return $parts;
}

/**
 * Implementation of hook_init
 */
function hashcash_init(){
  // Add the js file if required.
  if(!user_access('submit form without hashcash')){
    drupal_add_js(array(
      'hashcash' => array(
        'url' => url('hashcash', array(
          'absolute' => TRUE
        ))
      )
    ), 'setting');
  }
}

/**
 * Implementation of hook_form_alter
 * 
 * This enables the addition of the hidden hashcash field to the form, and 
 * also changes the validate function of the form.  It is also necesary to
 * include the necesary JavaScript files which allow the client to calculate
 * the hashcash.
 *
 * @param String $form_id
 * @param Array $form
 */
function hashcash_form_alter(&$form, &$form_state, $form_id){
  // Firstl check to see if this user's role requires hashcash, or if we're
  // being called by the pesky upload_js form.
  if(user_access('submit form without hashcash') || $form_id == 'upload_js'){return;}
  // Secondly lets check if we actually want to add Hashcash to this form.
  $hc_addorignore = variable_get('hashcash_addorignore', false);
  $hc_form_ids = preg_split('/[\n\r]+/', variable_get('hashcash_form_ids', "user_login\nuser_login_block\nlegal_login"));
  // Check to see if this form wants hashcash
  if(($hc_addorignore && in_array($form_id, $hc_form_ids)) || (!$hc_addorignore && !in_array($form_id, $hc_form_ids))){
    // Check to see if we've already failed a check.  If we have, and the
    // Captcha module is installed, we'll present the user with a Captcha,
    // rather than adding Hashcash again.
    if(count($form_state['input']) && isset($form_state['input']['hashcash']) && module_exists('captcha') && !hashcash_passes($form, $form_state)){
      // Get CAPTCHA type and module for given form_id.
      $captcha_point = new stdClass();
      $captcha_point->module = 'image_captcha';
      $captcha_point->captcha_type = 'Image';
      module_load_include('inc', 'captcha');
      // Build CAPTCHA form element.
      $captcha_element = array(
        '#type' => 'captcha',
        '#captcha_type' => $captcha_point->module . '/' . $captcha_point->captcha_type
      );
      // Add a CAPTCHA description if required.
      if(variable_get('captcha_add_captcha_description', TRUE)){
        $captcha_element['#description'] = _captcha_get_description();
      }
      // Get placement in form and insert in form.
      $captcha_placement = _captcha_get_captcha_placement($form_id, $form);
      _captcha_insert_captcha_element($form, $captcha_placement, $captcha_element);
      unset($form['hashcash']);
    }else{
      $form_state['cache'] = FALSE;
      // Looks like we're adding the hashcash.
      // Hidden form field which will contain the hashcash once the client
      // "changes" it    
      $form['hashcash'] = array(
        '#type' => 'hidden',
        '#default_value' => $form_id,
        '#after_build' => array(
          'hashcash_after_build'
        ),
        '#attributes' => array(
          'id' => 'hashcash-' . $form_id
        )
      );
      // Alter validation to check the hashcash once submitted
      $form['#validate'][] = 'hashcash_validate';
      // Javascript which produces the hashcash
      $form['#attributes']['onsubmit'] = 'return hashcash_create("hashcash-' . $form_id . '");';
    }
  }
}

/**
 * After build, used to remove the value from the form if it has been set - 
 * basically enables preview to work.
 */
function hashcash_after_build($form_element, &$form_state){
  $form_element['#value'] = $form_element['#default_value'];
  return $form_element;
}

/**
 * Helper function for form_alter - simply returns true if the form passes
 */
function hashcash_passes($form, $form_state){
  if(substr(sha1($form_state['input']['hashcash']), 0, 2) != "00"){return FALSE;}
  // Hashcash passed, now check the parts.
  $hashcash_parts = explode(':', $form_state['input']['hashcash']);
  global $cookie_domain;
  if($hashcash_parts[0] != '1' || ($hashcash_parts[1] != date('ymd') && $hashcash_parts != date('ymd', time() - (24 * 60 * 60))) || $hashcash_parts[2] != $form['form_id']['#value'] || $hashcash_parts[3] != ip_address() || $hashcash_parts[4] != $cookie_domain || !(isset($hashcash_parts[5]) && strlen($hashcash_parts[5]) > 10)){return FALSE;}
  // Parts passed. Check not submitted already
  // First thing, delete all the stale hashcash values from the database.
  db_delete('hashcash')->condition('hcdate', date('ymd', time() - (24 * 60 * 60 * variable_get('hashcash_expire', 2))), '<')->execute();
  $count = db_query("SELECT COUNT(*) FROM {hashcash} WHERE hashcash = :hashcash", array(
    ':hashcash' => $form_state['input']['hashcash']
  ))->fetchField();
  if($count != 0){return FALSE;}
  return TRUE;
}

/**
 * Validation function to check the hashcash sent is actually SORTED!
 */
function hashcash_validate($form, $form_state){
  // Only validate the form if the form has been posted (views executes the form
  // validation bananas when rendering a view - me thinks).
  if($_SERVER['REQUEST_METHOD'] == 'POST' && $form['hashcash']['#default_value'] != 'views_exposed_form'){
    // Check the hashcash passes
    $hashcash = $form_state['values']['hashcash'];
    if(substr(sha1($hashcash), 0, 2) != "00"){
      // failed;
      form_set_error('hashcash', t('Your hashcash value failed.  Please ensure you have JavaScript enabled in your browser.'));
      if(variable_get('hashcash_log', FALSE)){
        watchdog('hashcash', 'Invalid hashcash (SHA1 fails) "@hashcash"', array(
          '@hashcash' => $hashcash
        ));
      }
      $form['extra'] = array(
        '#title' => 'Something',
        '#type' => 'textfield',
        '#description' => 'Something'
      );
      return $form;
    }else{
      // Hashcash passed, now check the parts.
      $hashcash_parts = explode(':', $hashcash);
      global $cookie_domain;
      if($hashcash_parts[0] != '1' || ($hashcash_parts[1] != date('ymd') && $hashcash_parts != date('ymd', time() - (24 * 60 * 60))) || $hashcash_parts[2] != $form['form_id']['#value'] || $hashcash_parts[3] != ip_address() || $hashcash_parts[4] != $cookie_domain || !(isset($hashcash_parts[5]) && strlen($hashcash_parts[5]) > 10)){
        if(!isset($hashcash_parts[5])){
          $hashcash_parts[5] = 'NOT SET';
        }
        form_set_error('hashcash', '<p>' . t('Your hashcash string is not valid.') . '</p><p>' . t('Please try "Hard-refreshing" this page (Most users should press Ctrl-F5)'));
        if(variable_get('hashcash_log', FALSE)){
          watchdog('hashcash', 'Invalid hashcash (Additional checks fail) "@hashcash" @parts1 == @date , @parts2 == @formid , @parts3 == @ipaddress , @parts4 == @cookiedomain , @parts5 == "is not empty"', array(
            '@hashcash' => $hashcash,
            '@parts1' => $hashcash_parts[1],
            '@date' => date('ymd'),
            '@parts2' => $hashcash_parts[2],
            '@formid' => $form['form_id']['#value'],
            '@parts3' => $hashcash_parts[3],
            '@ipaddress' => ip_address(),
            '@parts4' => $hashcash_parts[4],
            '@cookiedomain' => $cookie_domain,
            '@parts5' => $hashcash_parts[5]
          ));
        }
      }else{
        // Everything fine so far, final check.
        // Has this been used before?
        // First thing, delete all the stale hashcash values from the database.
        db_delete('hashcash')->condition('hcdate', date('ymd', time() - (24 * 60 * 60 * variable_get('hashcash_expire', 2))), '<')->execute();
        $count = db_query("SELECT COUNT(*) FROM {hashcash} WHERE hashcash = :hashcash", array(
          ':hashcash' => $hashcash
        ))->fetchField();
        if($count == 0){
          // No rows, add it, and we're HOT TO TROT!
          db_insert('hashcash')->fields(array(
            'hcdate' => date('ymd'),
            'hashcash' => $hashcash
          ))->execute();
        }else{
          // There must be a row, eep, SPAM
          form_set_error('hashcash', t('Your hashcash has already been submitted before.  Have you attempted to submit this form twice?'));
          watchdog('hashcash', 'Invalid hashcash (Already submitted) "@hashcash"', array(
            '@hashcash' => $hashcash
          ));
        }
      }
    }
  }
}
