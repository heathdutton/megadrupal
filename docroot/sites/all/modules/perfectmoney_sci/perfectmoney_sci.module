<?php

define('PERFECTMONEY_SCI_PAYMENT_URL' ,'https://perfectmoney.is/api/step1.asp');

function perfectmoney_sci_permission() {
  return array(
    'create payment order' => array('title' => t('Create payment order'), 'description' => ''),
    'make payment' => array('title' => t('Make payment'), 'description' => ''),
    'make foreign payment' => array('title' => t('Make foreign payment'), 'description' => ''),
    'administer payments' => array('title' => t('Administer Perfect Money payments'), 'description' => ''),
    'administer settings' => array(
      'title' => t('Administer Perfect Money settings'),
      'description' => '',
      'restrict access' => TRUE
    )
  );
}

function perfectmoney_sci_menu() {

  $items = array();

  $items['perfectmoney/payment'] = array(
    'title' => t('Perfect Money payment'),
    'description' => t('Payment using PM'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('perfectmoney_sci_prefillform'),
    'access arguments' => array('create payment order'),
    'file' => 'perfectmoney_sci.pages.inc',
    'type' => MENU_SUGGESTED_ITEM,
  );
  $items['perfectmoney/payment/%_perfectmoney_sci_pid'] = array(
    'title' => t('Perfect Money payment order'),
    'description' => t('Payment using PM'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('perfectmoney_sci_merchantform', 2),
    'access arguments' => array('make payment'),
    'type' => MENU_CALLBACK,
  );
  $items['perfectmoney/success'] = array(
    'title' => t('Perfect Money payment complete'),
    'description' => t('Payment using PM successfully proccessed.'),
    'page callback' => 'perfectmoney_sci_success',
    'access arguments' => array('make payment'),
    'file' => 'perfectmoney_sci.pages.inc',
    'type' => MENU_CALLBACK,
  );
  $items['perfectmoney/fail'] = array(
    'title' => t('Perfect Money payment failed'),
    'description' => t('Payment using PM was not complete.'),
    'page callback' => 'perfectmoney_sci_fail',
    'access arguments' => array('make payment'),
    'file' => 'perfectmoney_sci.pages.inc',
    'type' => MENU_CALLBACK,
  );
  $items['perfectmoney/status'] = array(
    'title' => 'Internal Data',
    'page callback' => 'perfectmoney_sci_status',
    'access callback' => TRUE,
    'file' => 'perfectmoney_sci.pages.inc',
    'type' => MENU_CALLBACK
  );

  // Admin Perfect Money pages.
  $items['admin/perfectmoney'] = array(
    'title' => 'Perfect Money SCI',
    'description' => 'Manage Perfect Money SCI payments.',
    'position' => 'left',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/perfectmoney/payments'] = array(
    'weight' => 1,
    'title' => 'Payments',
    'description' => 'Browse all PM payments, paid or unpaid.',
    'page callback' => 'perfectmoney_sci_payments_pre',
    'access arguments' => array('administer payments'),
    'file' => 'perfectmoney_sci.admin.inc',
  );

  $items['admin/perfectmoney/settings'] = array(
    'weight' => 2,
    'title' => 'Settings',
    'description' => 'Set Perfect Money SCI details (Payee Account, Alternate PassPhrase, etc.)',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('perfectmoney_sci_settingsform'),
    'access arguments' => array('administer settings'),
    'file' => 'perfectmoney_sci.admin.inc',
  );

  $items['admin/perfectmoney/currencies'] = array(
	'weight' => 3,
    'title' => 'Currencies',
    'description' => 'Manage available currencies and accounts',
    'page callback' => 'perfectmoney_sci_currencies',
    'access arguments' => array('administer settings'),
    'file' => 'perfectmoney_sci.admin.inc',
  );
  $items['admin/perfectmoney/currencies/edit/%'] = array(
    'title' => t('Edit currency'),
    'page callback'   => 'drupal_get_form',
    'page arguments'  => array('perfectmoney_sci_currency_edit', 4),
    'access arguments' => array('administer settings'),
	'file'            => 'perfectmoney_sci.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/perfectmoney/currencies/add'] = array(
    'title' => t('Add currency'),
    'page callback'   => 'drupal_get_form',
    'page arguments'  => array('perfectmoney_sci_currency_edit'),
    'access arguments' => array('administer settings'),
	'file'            => 'perfectmoney_sci.admin.inc',
  );
  $items['admin/perfectmoney/currencies/delete/%'] = array(
    'title' => t('Delete currency'),
    'page callback'   => 'drupal_get_form',
    'page arguments'  => array('perfectmoney_sci_currency_delete', 4),
    'access arguments' => array('administer settings'),
	'file'            => 'perfectmoney_sci.admin.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/perfectmoney/sample'] = array(
    'weight' => 4,
    'title' => 'Sample settings',
    'description' => 'View sample page, which shows how to apply settings to Perfect Money Merchant.',
    'page callback' => 'perfectmoney_sci_sample',
    'access arguments' => array('administer settings'),
    'file' => 'perfectmoney_sci.admin.inc',
  );

  return $items;
}

function _perfectmoney_sci_GetDefCurSetts(){

	return array(
		'USD' => array(
			'enabled' => 0,
			'account' => '',
			'presc' => 2
		),
		'EUR' => array(
			'enabled' => 0,
			'account' => '',
			'presc' => 2
		),
		'GOLD' => array(
			'enabled' => 0,
			'account' => '',
			'presc' => 5
		),
	);

}

function perfectmoney_sci_theme() {
  return array(
    'perfectmoney_sci_success' => array(
      'template' => 'perfectmoney-sci-success',
    ),
    'perfectmoney_sci_fail' => array(
      'template' => 'perfectmoney-sci-fail',
    ),
    'perfectmoney_sci_currenciesform' => array(
	  'arguments' => array('form' => NULL)
	),
    'perfectmoney_sci_payments' => array(
      'arguments' => array('form' => NULL),
      'file' => 'perfectmoney_sci.admin.inc',
    ),
  );
}

function _perfectmoney_sci_createpayment($args){

	// checking input values...

	if(!is_array($args)) {  form_set_error('', t('Can not create payment. Please contact site administrator for further assistance1.')); return false; }

	$args['created']=time();

	// parse additional params
	$required_params=array('uid', 'created', 'amount', 'currency', 'memo', 'payee_account');
	$additional_params=array();
	foreach($args as $key=>$value){
		if(!in_array($key ,$required_params)) $additional_params[$key]=$value;
	}
	$additional_params_ar=$additional_params;
	$additional_params=serialize($additional_params);

	// fire hook
	$args=module_invoke_all('perfectmoney_sci', 'insert', array(
		'uid' => $args['uid'],
		'created' => $args['created'],
		'amount' => $args['amount'],
		'currency' => $args['currency'],
		'memo' => $args['memo'],
		'payee_account' => $args['payee_account'],
	));


	$args['amount']=(float)$args['amount'];
	if($args['amount']<=0) { form_set_error('amount', t('Invalid amount.'));  return false; }
	if(!preg_match("/^[0-9]{1,10}$/", $args['amount']) && !preg_match("/^[0-9]{1,6}\.[0-9]{1,6}$/", $args['amount'])){ form_set_error('amount', t('Invalid amount.'));  return false; }

	$currency_settings = unserialize(variable_get('perfectmoney_sci_currencies', serialize(_perfectmoney_sci_GetDefCurSetts())));

	if(!array_key_exists($args['currency'], $currency_settings)) { form_set_error('currency', t('Please select valid currency.'));  return false; }

	$args['memo']=substr($args['memo'], 0, 255);

	if(empty($args['uid'])){
		global $user;
		$args['uid']=(!$user->uid) ? '0' : (string)$user->uid;
	}
	if(strlen($args['uid'])<=0) { form_set_error('', t('Can not create payment. Please contact site administrator for further assistance2.'.$args['uid']));  return false; }

	if(empty($args['payee_account'])){
		$args['payee_account']=$currency_settings["{$args['currency']}"]['account'];
	}
	if(empty($args['payee_account'])) { form_set_error('', t('Can not create payment. Please contact site administrator for further assistance3. Error code: no_payee_account'));  return false; }

	  // inserting payment
	  $pid = db_insert('perfectmoney_sci')
		->fields(array(
		'uid' => $args['uid'],
		'amount' => $args['amount'],
		'created' => $args['created'],
		'currency' => $args['currency'],
		'memo' => $args['memo'],
		'payee_account' => $args['payee_account'],
		'params' => $additional_params,
	  ))->execute();

	if($pid<=0) {  form_set_error('', t('Can not create payment. Please contact site administrator for further assistance4.'));   return false; }
	
	$payment=array(
		'pid' => $pid,
		'uid' => $args['uid'],
		'created' => $created,
		'amount' => $args['amount'],
		'currency' => $args['currency'],
		'memo' => $args['memo'],
		'payee_account' => $args['payee_account'],
	);

	$payment=array_merge($additional_params_ar, $payment);

	module_invoke_all('perfectmoney_sci', 'inserted', $payment);

	return $payment;

}

function _perfectmoney_sci_deletepayment($pid){

	$pid=(int)$pid;

	if($pid<=0) return false;
	
	$r=db_query('DELETE FROM {perfectmoney_sci} WHERE pid = :pid', array('pid'=>$pid));

	if(!$r) return false;

	module_invoke_all('perfectmoney_sci', 'deleted', $pid);

	return true;

}

function _perfectmoney_sci_enrollpayment($pid, $payer_account='via API', $t=""){

	$pid=(int)$pid;

	if(empty($t)) $t=time();
	
	if(empty($payer_account))  $payer_account='via API';

	if($pid<=0) return false;
	$payer_account=substr($payer_account, 0, 15);


    if ($pid > 0 && db_update('perfectmoney_sci')->fields(array(
		'batch' => (int)$_POST['PAYMENT_BATCH_NUM'],
		'payer_account' => $payer_account,
		'enrolled' => $t,
	))->condition('pid', $pid, '=')->execute()) {
		watchdog('Perfect Money', 'Order ID %invid successfully enrolled', array("%invid" => $pid), WATCHDOG_INFO);
		// fire hook
		module_invoke_all('perfectmoney_sci', 'enrolled', $pid, _perfectmoney_sci_pid_load($pid));
		return true;
	}

	return false;

}

// loopback hook implementation
function perfectmoney_sci_perfectmoney_sci($op, $ar) {
  return $ar;
}

function _perfectmoney_sci_pid_load($pid) {
	$pid=(int)$pid;

	if($pid<=0) return false;
	
	$result = db_query("SELECT * FROM {perfectmoney_sci} WHERE pid=$pid");
	if(!$result) return false;

	$payment=$result->fetchAssoc();

	if($payment['pid']>0){
		$payment=array_merge(unserialize($payment['params']), $payment);
		return $payment;
	}

	return false;
}

function perfectmoney_sci_merchantform($form, &$form_state, $payment) {
  
	global $base_url, $user;

	if(!is_array($payment) && is_integer($payment)){ // fetch payment info from DB
		$payment=_perfectmoney_sci_pid_load($payment);
	}

	if(!is_array($payment) || !($payment['pid']>0)){

		$form['error'] = array(
		  '#type' => 'item',
		  '#title' => t('Error'),
		  '#value' => t('Order you are going to pay for does not exist'),
		);

	}elseif ($payment['enrolled'] != 0) {

		$form['error'] = array(
		  '#type' => 'item',
		  '#title' => t('Error'),
		  '#markup' => t('Order you are going to pay already payed.'),
		);

	}elseif (user_is_logged_in() && $payment['uid'] != $user->uid && !user_access("make foreign payment")) {
		$form['error'] = array(
		  '#type' => 'item',
		  '#title' => t('Error'),
		  '#markup' => t('Order you are going to pay created by other user.'),
		);
	}else{

		$form['#action'] = variable_get('perfectmoney_sci_payment_url', PERFECTMONEY_SCI_PAYMENT_URL);
		
		$currency_settings = unserialize(variable_get('perfectmoney_sci_currencies', serialize(_perfectmoney_sci_GetDefCurSetts())));
		$presc = $currency_settings["{$payment['currency']}"]['presc'];

		// interface data:

		$form['payment_id'] = array(
		  '#type' => 'item',
		  '#title' => t('Order #'),
		  '#description' => $payment['pid'],
		);

		$form['amount'] = array(
		  '#type' => 'item',
		  '#title' => t('Amount'),
		  '#description' => round($payment['amount'], $presc).' '.$payment['currency'],
		);

		$form['memo'] = array(
		  '#type' => 'item',
		  '#title' => t('Memo'),
		  '#description' => $payment['memo']
		);

		// SCI data...

		$form['PAYEE_ACCOUNT'] = array(
			'#type' => 'hidden',
			'#value' => $payment['payee_account'],
		);

		$form['PAYMENT_ID'] = array(
			'#type' => 'hidden',
			'#value' => $payment['pid'],
		);
	 
		$form['SUGGESTED_MEMO'] = array(
			'#type' => 'hidden',
			'#value' => $payment['memo'],
		);

		$form['PAYMENT_AMOUNT'] = array(
			'#type' => 'hidden',
			'#value' => round($payment['amount'], $presc),
		);

		$form['PAYMENT_UNITS'] = array(
			'#type' => 'hidden',
			'#value' => $payment['currency'],
		);

		$form['PAYEE_NAME'] = array(
			'#type' => 'hidden',
			'#value' => variable_get('perfectmoney_sci_payee_name',  variable_get('site_name', 'Drupal')),
		);

		$form['STATUS_URL'] = array(
			'#type' => 'hidden',
			'#value' => $base_url.'/'.drupal_get_path_alias('perfectmoney/status'),
		);

		$form['PAYMENT_URL'] = array(
			'#type' => 'hidden',
			'#value' => $base_url.'/perfectmoney/success',
		);

		$form['PAYMENT_URL_METHOD'] = array(
			'#type' => 'hidden',
			'#value' => 'LINK',
		);

		$form['NOPAYMENT_URL'] = array(
			'#type' => 'hidden',
			'#value' => $base_url.'/perfectmoney/fail',
		);

		$form['NOPAYMENT_URL_METHOD'] = array(
			'#type' => 'hidden',
			'#value' => 'LINK',
		);

		$form['submit'] = array(
			'#type' => 'submit',
			'#value' => t('Pay now'),
		);

	}

	return $form;
}



function perfectmoney_sci_api($action, $params) {

  switch ($action) {
    case 'load':
      return _perfectmoney_sci_pid_load($params['pid']);
      break;
    case 'insert':
      return _perfectmoney_sci_createpayment($params);
      break;
    case 'delete':
      return _perfectmoney_sci_deletepayment($params['pid']);
      break;
    case 'enroll':
      return _perfectmoney_sci_enrollpayment($params['pid'], $params['time']);
      break;
    default:
      return FALSE;
      break;
  }
}

