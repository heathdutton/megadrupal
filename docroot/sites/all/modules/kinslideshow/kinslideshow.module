<?php

/**
 * @file
 * Module file for KinSlideshow.
 */

/**
 * Implements hook_block_info().
 */
function kinslideshow_block_info() {

  $blocks['kinslideshow'] = array(
    // info: The name of the block.
    'info' => t('KinSlideshow'),
    // Not worth caching.
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function kinslideshow_block_configure($delta = '') {

  $form = array();
  if ($delta == 'kinslideshow') {
    // All configuration options.
    $image_fields = _kinslideshow_get_all_image_fields();
    $image_styles = _kinslideshow_get_image_styles();

    if (!$kinslideshow_path = _kinslideshow_library_path()) {
      $form['no_kinslideshow_js'] = array(
        '#markup' => '<div style="color: red">' . t('You need to install the KinSlideshow plugin. Create a directory in sites/all/libraries called kinslideshow, and then copy jquery.KinSlideshow.min.js into it. You can find the plugin at !url.', array('!url' => l('http://code.google.com/p/kinslideshow-jquery-plugin/downloads/list', 'http://code.google.com/p/kinslideshow-jquery-plugin/downloads/list', array('attributes' => array('target' => '_blank'))))) . '</div>',
      );
    }

    $form['node_fieldset'] = array(
      '#title' => t('Node settings'),
      '#type' => 'fieldset',
    );
    $form['node_fieldset']['kinslideshow_image_field'] = array(
      '#type' => 'select',
      '#title' => t('Content fields'),
      '#options' => $image_fields,
      '#description' => t('All image type fields.'),
      '#default_value' => variable_get('kinslideshow_image_field', ''),
      '#required' => TRUE,
    );
    $form['image_fieldset'] = array(
      '#title' => 'Image settings',
      '#type' => 'fieldset',
    );
    $form['image_fieldset']['kinslideshow_image_style'] = array(
      '#type' => 'select',
      '#title' => t('Image style'),
      '#options' => $image_styles,
      '#default_value' => variable_get('kinslideshow_image_style', 'medium'),
      '#required' => TRUE,
    );
    $form['image_fieldset']['kinslideshow_image_items'] = array(
      '#type' => 'select',
      '#title' => t('Number of images'),
      '#options' => drupal_map_assoc(range(3, 10)),
      '#default_value' => variable_get('kinslideshow_image_items', 3),
    );

    // Disable kinslideshow_image_field select if there's no image tpye field.
    if (empty($image_fields)) {
      $form['node_fieldset']['kinslideshow_image_field']['#disabled'] = TRUE;
      $form['node_fieldset']['kinslideshow_image_field']['#description'] = t('You must create an image type field before selecting the field. Please go <a href="@url">/admin/structure/types</a> to create.', array('@url' => url("admin/structure/types")));
    }
  }

  return $form;
}

/**
 * Implements hook_block_save().
 */
function kinslideshow_block_save($delta = '', $edit = array()) {
  // We need to save settings from the configuration form.
  if ($delta == 'kinslideshow') {
    // Have Drupal save the string to the database.
    variable_set('kinslideshow_image_field', $edit['kinslideshow_image_field']);
    variable_set('kinslideshow_image_style', $edit['kinslideshow_image_style']);
    variable_set('kinslideshow_image_items', $edit['kinslideshow_image_items']);
  }
  return;
}

/**
 * Implements hook_block_view().
 */
function kinslideshow_block_view($delta = '') {
  $block['subject'] = t('KinSlideshow');
  if ($nodes = _kinslideshow_get_kinslideshow_content()) {
    $kinslideshow_path = _kinslideshow_library_path();
    drupal_add_js($kinslideshow_path);
    drupal_add_js('jQuery(document).ready(function () { jQuery("#' . $delta . '").KinSlideshow(); });', 'inline');
    $block['content'] = '<div id="' . $delta . '" style="visibility:hidden;">' . theme('kinslideshow_block', array('nodes' => $nodes)) . '</div>';
  }
  else {
    $block['content'] = t('No content available.');
  }

  return $block;
}

/**
 * Implements hook_theme().
 */
function kinslideshow_theme() {
  return array(
    'kinslideshow_block' => array(
      'variables' => array('nodes' => NULL),
    ),
  );
}

/**
 * Get all image type fields.
 */
function _kinslideshow_get_all_image_fields() {
  $options = array();

  $ks_fiis = field_info_instances('node');
  foreach ($ks_fiis as $key => $value) {
    if (!empty($value)) {
      $imgf  = array_filter($value, '_kinslideshow_field_image_type_validate');
      $field_map_assoc = _kinslideshow_field_image_type_map_assoc($imgf);
      $options  += $field_map_assoc;
    }
  }

  return $options;
}

/**
 * Get all current image styles.
 */
function _kinslideshow_get_image_styles() {
  $styles = array();
  $image_styles = image_styles();

  foreach ($image_styles as $key => $style) {
    $styles[$key] = $style['name'];
  }

  return $styles;
}

/**
 * Fields validate function to ensure the field type is image.
 */
function _kinslideshow_field_image_type_validate($field_info) {

  $field = field_info_field($field_info['field_name']);
  if ($field['type'] == 'image') {
    return TRUE;
  }
}

/**
 * Get an associative array.
 */
function _kinslideshow_field_image_type_map_assoc($field_info) {
  $result = array();
  if (!empty($field_info)) {
    foreach ($field_info as $value) {
      $result[$value['field_name']] = check_plain($value['label'] . ': ' . $value['field_name'] . ' field in ' . $value['bundle']);
    }
  }

  return $result;
}

/**
 * Get block contents. return an array contains image infomation.
 */
function _kinslideshow_get_kinslideshow_content() {
  $field_name = variable_get('kinslideshow_image_field', 'field_image');
  $number = variable_get('kinslideshow_image_items', 3);

  if (!field_info_field($field_name)) {
    return FALSE;
  }

  $query = new EntityFieldQuery();
  $entities = $query->entityCondition('entity_type', 'node')
                    ->propertyCondition('status', 1)
                    ->fieldCondition($field_name, 'fid', 'NULL', '!=')
                    ->propertyOrderBy('created', 'DESC')
                    ->range(0, $number)
                    ->execute();

  if (isset($entities['node'])) {
    $nodes = node_load_multiple(array_keys($entities['node']));
    return $nodes;
  }

  return FALSE;
}

/**
 * Returns HTML for an image field formatter.
 *
 * @param array $variables
 *   An associative array containing:
 *   - nodes: An array of recent node objects which has image field.
 *
 * @ingroup themeable
 */
function theme_kinslideshow_block($variables) {
  $output = '';
  $field_name = variable_get('kinslideshow_image_field', 'field_image');
  $image_style = variable_get('kinslideshow_image_style', 'large');
  foreach ($variables['nodes'] as $node) {
    $image_source = field_get_items('node', $node, $field_name);
    $image_vars = array(
      'style_name' => $image_style,
      'path' => $image_source[0]['uri'],
      'getsize' => FALSE,
      'alt' => $node->title,
    );
    $image = theme('image_style', $image_vars);
    $output .= l($image, 'node/' . $node->nid, array('html' => TRUE));
  }

  return $output;
}

/**
 * Gets the path to the jQuery kinslideshow library.
 *
 * @ string return
 *   The path to the kinslideshow library js file, or FALSE if not found.
 */
function _kinslideshow_library_path() {
  $kinslideshow_path = libraries_get_path('kinslideshow');

  if (!empty($kinslideshow_path)) {
    // Using minified version of jQuery kinslideshow plugin.
    if (file_exists($kinslideshow_path . '/jquery.KinSlideshow.min.js')) {
      $kinslideshow_path .= '/jquery.KinSlideshow.min.js';
    }
    else {
      $kinslideshow_path = FALSE;
    }
  }
  else {
    $kinslideshow_path = FALSE;
  }

  return $kinslideshow_path;
}
