<?php
/**
 * @file
 * Easily switch between different environments for your site. This will
 * automatically enable/disable modules and set various variables.
 */

define('TADAA_ENVIRONMENT', variable_get('tadaa_environment'));


/**
 * Implements hook_permission().
 */
function tadaa_permission() {
  return array(
    'use tadaa' => array(
      'title' => t('Use Tadaa!'),
      'description' => t('Switch environments using Tadaa!'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_menu().
 */
function tadaa_menu() {
  // Included files.
  $callback_file = 'tadaa.callbacks.inc';
  $status_page_file = 'tadaa.status.pages.inc';
  $config_page_file = 'tadaa.config.pages.inc';

  // Autocomplete for variable names.
  $items['tadaa/variable/autocomplete'] = array(
    'page callback' => 'tadaa_variable_autocomplete',
    'access arguments' => array('use tadaa'),
    'file' => $callback_file,
    'type' => MENU_CALLBACK,
  );
  // Switch environment.
  $items['tadaa/environment/switch/%'] = array(
    'page callback' => 'tadaa_environment_switch',
    'page arguments' => array(3),
    'access callback' => 'tadaa_environment_switch_access',
    'access arguments' => array(3),
    'file' => $callback_file,
    'type' => MENU_CALLBACK,
  );

  // Module status page.
  $items['admin/config/development/tadaa'] = array(
    'title' => 'Tadaa!',
    'description' => 'Configure Tadaa! and see the current status.',
    'page callback' => 'tadaa_module_status_page',
    'access arguments' => array('use tadaa'),
    'file' => $status_page_file,
  );
  $items['admin/config/development/tadaa/status'] = array(
    'title' => 'Status',
    'access arguments' => array('use tadaa'),
    'file' => $status_page_file,
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  $items['admin/config/development/tadaa/status/modules'] = array(
    'title' => 'Modules',
    'access arguments' => array('use tadaa'),
    'file' => $status_page_file,
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  // Fix a module configuration.
  $items['admin/config/development/tadaa/status/modules/%/fix'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tadaa_module_status_fix', 6),
    'access arguments' => array('use tadaa'),
    'file' => $status_page_file,
    'type' => MENU_CALLBACK,
  );
  // Variable status page.
  $items['admin/config/development/tadaa/status/variables'] = array(
    'title' => 'Variables',
    'page callback' => 'tadaa_variable_status_page',
    'access arguments' => array('use tadaa'),
    'file' => $status_page_file,
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
  // Fix a variable configuration.
  $items['admin/config/development/tadaa/status/variables/%/fix'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tadaa_variable_status_fix', 6),
    'access arguments' => array('use tadaa'),
    'file' => $status_page_file,
    'type' => MENU_CALLBACK,
  );
  // Environment status page.
  $items['admin/config/development/tadaa/status/environments'] = array(
    'title' => 'Change environment',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tadaa_environment_status_form'),
    'access arguments' => array('use tadaa'),
    'file' => $status_page_file,
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );

  // Module configuration.
  $items['admin/config/development/tadaa/configure'] = array(
    'title' => 'Configure',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tadaa_module_configuration_form'),
    'access arguments' => array('use tadaa'),
    'file' => $config_page_file,
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
  $items['admin/config/development/tadaa/configure/modules'] = array(
    'title' => 'Modules',
    'access arguments' => array('use tadaa'),
    'file' => $config_page_file,
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  // Variables configuration.
  $items['admin/config/development/tadaa/configure/variables'] = array(
    'title' => 'Variables',
    'page callback' => 'tadaa_variable_configuration_page',
    'access arguments' => array('use tadaa'),
    'file' => $config_page_file,
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
  // Add variable.
  $items['admin/config/development/tadaa/configure/variables/add/%'] = array(
    'title' => 'Add variable',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tadaa_variable_form', 7),
    'access arguments' => array('use tadaa'),
    'file' => $config_page_file,
    'type' => MENU_CALLBACK,
  );
  // Edit variable.
  $items['admin/config/development/tadaa/configure/variables/%/edit/%'] = array(
    'title' => 'Edit variable',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tadaa_variable_form', 6, 8),
    'access arguments' => array('use tadaa'),
    'file' => $config_page_file,
    'type' => MENU_CALLBACK,
  );
  // Delete variable.
  $items['admin/config/development/tadaa/configure/variables/%/delete/%'] = array(
    'title' => 'Delete variable',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tadda_variable_delete_confirm', 6, 8),
    'access arguments' => array('use tadaa'),
    'file' => $config_page_file,
    'type' => MENU_CALLBACK,
  );

  // Environment configurations.
  $items['admin/config/development/tadaa/configure/environments'] = array(
    'title' => 'Environments',
    'page callback' => 'tadaa_environment_configuration_page',
    'access arguments' => array('use tadaa'),
    'file' => $config_page_file,
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );
  // Add environment.
  $items['admin/config/development/tadaa/configure/environments/add'] = array(
    'title' => 'Add environment',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tadaa_environment_form'),
    'access arguments' => array('use tadaa'),
    'file' => $config_page_file,
    'type' => MENU_LOCAL_ACTION,
  );
  // Edit environment.
  $items['admin/config/development/tadaa/configure/environments/%/edit'] = array(
    'title' => 'Edit environment',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tadaa_environment_form', 6),
    'access arguments' => array('use tadaa'),
    'file' => $config_page_file,
    'type' => MENU_CALLBACK,
  );
  // Delete environment.
  $items['admin/config/development/tadaa/configure/environments/%/delete'] = array(
    'title' => 'Delete environment',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tadda_environment_delete_confirm', 6),
    'access arguments' => array('use tadaa'),
    'file' => $config_page_file,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Access callback for tadaa_environment_switch().
 *
 * This will verify the key that has been supplied in the query string. We will
 * use the same key as the cron key, for convenience. It will also verify that
 * the environment exists.
 */
function tadaa_environment_switch_access($environment) {
  $environments = variable_get('tadaa_environments', array());

  return isset($environments[$environment]) && isset($_GET['key']) && variable_get('cron_key', 'drupal') == $_GET['key'];
}

/**
 * Implements hook_theme().
 */
function tadaa_theme($existing, $type, $theme, $path) {
  return array(
    'tadaa_module_fieldset' => array(
      'render element' => 'form',
      'path' => drupal_get_path('module', 'tadaa') . '/theme',
      'file' => 'tadaa.theme.inc',
    ),
  );
}

/**
 * Gets every configured module and their state.
 *
 * @param string $environment
 *   A string indicating which environment we'd like to get the configuration
 *   for.
 *
 * @return array
 *   An associative array where each key is the name of the module, and
 *   the value is the state of the module, according to the $environment param.
 */
function tadaa_get_modules($environment) {
  // Load the configuration for the specified environment.
  $modules = variable_get('tadaa_' . $environment . '_modules', array());

  // Sort the modules by their name before return the array.
  ksort($modules);
  return $modules;
}

/**
 * Gets the configured variables for a specific environment.
 *
 * @param string $environment
 *   A string indicating which environment we'd like to get the configuration
 *   for.
 *
 * @return array
 *   An associative array where each key is the name of the variable,
 *   and the value is the value for the variable,
 *   according to the $environment param.
 */
function tadaa_get_variables($environment) {
  // Load the configuration for the specified environment.
  $variables = variable_get('tadaa_' . $environment . '_variables', array());

  // Sort the variables by their name before returning them.
  ksort($variables);
  return $variables;
}


/**
 * Batch callback that gets the old and new environment.
 *
 * This gets the environment switched from and the environment switched to.
 */
function tadaa_batch_init($old, $new, &$context) {
  // Set the old and new status in the results array.
  $context['results']['status']['old'] = $old;
  $context['results']['status']['new'] = $new;
}

/**
 * Batch callback that disables a list of modules.
 *
 * The modules will be disabled one by one in order to keep track of what's
 * happening, and to prevent a huge amount of modules to be disabled at the same
 * time
 */
function tadaa_batch_disable_modules($modules, &$context) {
  // Set up the initial sandbox variables.
  if (empty($context['sandbox'])) {
    $context['sandbox']['current_module'] = 0;
    $context['sandbox']['total_modules'] = count($modules);
  }

  // Only disable the module if it's currently enabled.
  if (module_exists($modules[$context['sandbox']['current_module']])) {
    module_disable(array($modules[$context['sandbox']['current_module']]));

    // Get the real module name, and set the message.
    $module_info = drupal_parse_info_file(drupal_get_path('module', $modules[$context['sandbox']['current_module']]) . '/' . $modules[$context['sandbox']['current_module']] . '.info');
    $context['message'] = t('Successfully disabled %module', array('%module' => $module_info['name']));
    $context['results']['disabled'][] = $module_info['name'];
  }

  // Move on to the next module.
  $context['sandbox']['current_module']++;
  $context['finished'] = $context['sandbox']['current_module'] / $context['sandbox']['total_modules'];
}

/**
 * Batch callback that enables a list of modules.
 *
 * The modules will be enabled one by one in order to keep track of what's
 * happening, and to prevent a huge amount of modules to be enabled at the same
 * time
 */
function tadaa_batch_enable_modules($modules, &$context) {
  // Set up the initial sandbox variables.
  if (empty($context['sandbox'])) {
    $context['sandbox']['current_module'] = 0;
    $context['sandbox']['total_modules'] = count($modules);
  }

  // Only enable the module if it's currently disabled.
  if (!module_exists($modules[$context['sandbox']['current_module']])) {
    $result = module_enable(array($modules[$context['sandbox']['current_module']]));

    // Get the real module name, and set the message.
    $module_info = drupal_parse_info_file(drupal_get_path('module', $modules[$context['sandbox']['current_module']]) . '/' . $modules[$context['sandbox']['current_module']] . '.info');
    if ($result) {
      $context['message'] = t('Successfully enabled %module', array('%module' => $module_info['name']));
      $context['results']['enabled']['successfully'][] = $module_info['name'];
    }
    else {
      $context['message'] = t('Failed to enable %module!', array('%module' => $module_info['name']));
      $context['results']['enabled']['failed'][] = $module_info['name'];
    }
  }

  // Move on to the next module.
  $context['sandbox']['current_module']++;
  $context['finished'] = $context['sandbox']['current_module'] / $context['sandbox']['total_modules'];
}

/**
 * Batch callback that sets a list of variables.
 *
 * The variables will be set one by one in order to keep track of what's
 * happening.
 */
function tadaa_batch_set_variables($variables, &$context) {
  // Set up the initial sandbox variables.
  if (empty($context['sandbox'])) {
    $context['sandbox']['current_variable'] = 0;
    $context['sandbox']['total_variables'] = count($variables);
  }

  // Get the current variable from the array.
  $current_variable = array_slice($variables, $context['sandbox']['current_variable'], 1);
  $variable = key($current_variable);
  $value = current($current_variable);

  // Only change the variables value if it's different from the current value.
  if (variable_get($variable) != $value) {
    variable_set($variable, $value);

    // Set a message and keep the result.
    $context['message'] = t('Altered %variable', array('%variable' => key($current_variable)));
    $context['results']['variables'][] = key($current_variable);
  }

  // Move on to the next variable.
  $context['sandbox']['current_variable']++;
  $context['finished'] = $context['sandbox']['current_variable'] / $context['sandbox']['total_variables'];
}

/**
 * Batch callback when switching environment.
 *
 * This is the last step, and will simply update the current environment
 * variable, and flush the cache.
 */
function tadaa_batch_finish($new_environment, &$context) {
  variable_set('tadaa_environment', $new_environment);
  drupal_flush_all_caches();
}

/**
 * Batch callback that's fired when the switch batch has finished.
 *
 * This will check the result, and print messages to the user so that he will
 * know exactly what has been changed.
 */
function tadaa_batch_finished($success, $results, $operations) {
  if ($success) {
    // Nothing has changed.
    if (empty($results)) {
      drupal_set_message(t('Nothing has been done.'));
    }

    // At least one module has been disabled.
    if (!empty($results['disabled'])) {
      drupal_set_message(t('The following modules have been disabled: !modules', array('!modules' => '<br />' . implode('<br />', $results['disabled']))));
    }

    // At least one module has tried to be enabled.
    if (!empty($results['enabled'])) {
      // At least one module has been successfully enabled.
      if (!empty($results['enabled']['successfully'])) {
        drupal_set_message(t('The following modules have been enabled: !modules', array('!modules' => '<br />' . implode('<br />', $results['enabled']['successfully']))));
      }
      // At least one module couldn't be enabled.
      if (!empty($results['enabled']['failed'])) {
        drupal_set_message(t('Failed to enable the following modules: !modules', array('!modules' => '<br />' . implode('</li><li>', $results['enabled']['failed']))), 'error');
      }
    }

    // At least one variable has been changed.
    if (!empty($results['variables'])) {
      drupal_set_message(t('Altered the following variables: !variables', array('!variables' => '<br />' . implode('<br />', $results['variables']))));
    }
  }
  else {
    // The batch process didn't succeed. This is probably caused by a PHP error
    // of some sort.
    drupal_set_message(t('An error occurred while switching environments. Please review the latest log entries, and try again.'), 'error');
  }

  // Make it possible for hooks to act on swtich between environments after
  // the alterations by tadaa is made.
  module_invoke_all('tadaa_post_switch', $results['status']['old'], $results['status']['new']);
}
