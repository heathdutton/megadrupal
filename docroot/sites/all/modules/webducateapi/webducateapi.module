<?php
/**
 * @file
 * Contains core functions for the WebducateAPI module.
 */

/**
 * Include additional files.
 */
foreach (module_list() as $module) {
  if (file_exists($file = dirname(__FILE__) . "/includes/{$module}.inc")) {
    require_once $file;
  }
}

/**
 * Implements hook_permission().
 */
function webducateapi_permission() {
  return array(
    'administer webducateapi' => array(
      'title' => t('Administer WebducateAPI'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function webducateapi_menu() {
  $items = array();

  $items['admin/config/services/webducate'] = array(
    'title' => 'WebducateAPI',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webducateapi_form'),
    'access arguments' => array('access administration menu'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'webducateapi.admin.inc',
  );

  return $items;
}

/**
 * Get session.
 */
function webducateapi_get_session($settings = array(), $reset = FALSE) {
  // Pull data from cache if available or applicable.
  $cache = cache_get('webducateapi_session');
  if (isset($cache->data) && !$reset) {
    return $cache->data;
  }

  // Check if settings are configured properly.
  if ($settings = webducateapi_get_settings($settings)) {
    // Call system.connect method.
    $response = webducateapi_method_system_connect($settings);
    if (!$response) {
      return FALSE;
    }
    $session = (string) $response->params->param->value->struct->member[0]->value->string;

    // Call user.login method.
    $response = webducateapi_method_user_login($session, $settings);
    if (!$response) {
      return FALSE;
    }
    $session = (string) $response->params->param->value->struct->member[0]->value->string;

    // Store session in cache.
    cache_set('webducateapi_session', $session, 'cache', CACHE_TEMPORARY);
  }

  // Return session.
  return isset($session) ? $session : FALSE;
}

/**
 * Get courses.
 */
function webducateapi_get_courses($settings = array(), $reset = FALSE) {
  $courses = array();

  // Pull data from cache if available or applicable.
  $cache = cache_get('webducateapi_courses');
  if (isset($cache->data) && !$reset) {
    return $cache->data;
  }

  // Check if settings are configured properly.
  if ($settings = webducateapi_get_settings($settings)) {
    // Call webducate.list method.
    $response = webducateapi_method_webducate_list($settings);
    if (!$response) {
      return $courses;
    }
    $data = $response->params->param->value->struct->member[1]->value->struct;

    // Build array of courses.
    $courses = webducateapi_recurse_data($data);

    // Store courses in cache.
    cache_set('webducateapi_courses', $courses, 'cache', CACHE_TEMPORARY);
  }

  // Return courses.
  return $courses;
}

/**
 * Get student data.
 */
function webducateapi_get_student_data($options = array(), $settings = array(), $reset = FALSE) {
  $options += array(
    'course_id' => NULL,
    'completed_only' => 1,
    'from' => 0,
    'to' => 0,
  );
  ksort($options);

  // Pull data from cache if available or applicable.
  $cid = 'webducateapi_student_data:' . md5(serialize($options));
  $cache = cache_get($cid);
  if (isset($cache->data) && !$reset) {
    return $cache->data;
  }

  $courses = array();

  // Check if settings are configured properly.
  if ($settings = webducateapi_get_settings($settings)) {
    // Call webducate.getStudentData method.
    $response = webducateapi_method_webducate_get_student_data($options, $settings);
    if (!$response) {
      return $courses;
    }
    $data = $response->params->param->value->struct->member[1]->value->struct;

    // Build array of courses.
    $courses = webducateapi_recurse_data($data);

    // Store courses in cache.
    cache_set($cid, $courses, 'cache', CACHE_TEMPORARY);
  }

  // Return courses.
  return $courses;
}

/**
 * Create token.
 */
function webducateapi_create_token($webducate_id, $mail, $settings = array()) {
  // Check if settings are configured properly.
  if ($settings = webducateapi_get_settings($settings)) {
    // Call webducate.getStudentData method.
    $response = webducateapi_method_webducate_token($webducate_id, $mail, $settings);
    if (!$response) {
      return FALSE;
    }
    return (bool) $response->params->param->value->struct->member[0]->value->boolean;
  }
  return FALSE;
}

/**
 * Method callback for system.connect.
 */
function webducateapi_method_system_connect($settings) {
  $method = 'system.connect';

  // Return response data as SimpleXMLElement.
  return webducateapi_method_callback($method, NULL, $settings);
}

/**
 * Method callback for user.login.
 */
function webducateapi_method_user_login($session, $settings) {
  $method = 'user.login';

  // Prepare data.
  $nonce = user_password();
  $hash = webducateapi_get_hash($settings['key'], $settings['domain'], $nonce, $method);

  // Build data array.
  $data = array($hash, $settings['domain'], REQUEST_TIME, $nonce, $session, $settings['username'], $settings['password']);

  // Return response data as SimpleXMLElement.
  return webducateapi_method_callback($method, $data, $settings);
}

/**
 * Method callback for webducate.list.
 */
function webducateapi_method_webducate_list($settings) {
  $method = 'webducate.list';

  // Prepare data.
  $session = webducateapi_get_session();
  $nonce = user_password();
  $hash = webducateapi_get_hash($settings['key'], $settings['domain'], $nonce, $method);

  // Build data array.
  $data = array($hash, $settings['domain'], REQUEST_TIME, $nonce, $session);

  // Return response data as SimpleXMLElement.
  return webducateapi_method_callback($method, $data, $settings);
}

/**
 * Method callback for webducate.getStudentData.
 */
function webducateapi_method_webducate_get_student_data($options, $settings) {
  $method = 'webducate.getStudentData';

  // Prepare data.
  $session = webducateapi_get_session();
  $nonce = user_password();
  $hash = webducateapi_get_hash($settings['key'], $settings['domain'], $nonce, $method);

  // Build data array.
  $data = array($hash, $settings['domain'], REQUEST_TIME, $nonce, $session, $options['course_id'], $options['completed_only'], $options['from'], $options['to']);

  // Return response data as SimpleXMLElement.
  return webducateapi_method_callback($method, $data, $settings);
}

/**
 * Method callback for webducate.token.
 */
function webducateapi_method_webducate_token($webducate_id, $mail, $settings) {
  $method = 'webducate.token';

  // Prepare data.
  $session = webducateapi_get_session();
  $nonce = user_password();
  $hash = webducateapi_get_hash($settings['key'], $settings['domain'], $nonce, $method);

  // Build data array.
  $data = array($hash, $settings['domain'], REQUEST_TIME, $nonce, $session, $webducate_id, $mail);

  // Return response data as SimpleXMLElement.
  return webducateapi_method_callback($method, $data, $settings);
}

/**
 * Method callback function.
 */
function webducateapi_method_callback($method, $data, $settings) {
  $response = drupal_http_request($settings['url'], array(
    'method' => 'POST',
    'data' => webducate_build_request_data($method, $data),
  ));

  if ($response->headers['content-type'] != 'text/xml') {
    watchdog('webducateapi', 'Unexpected response data, API URL may be incorrectly configured.', array(), WATCHDOG_ERROR);
    return FALSE;
  }

  $data = new SimpleXMLElement($response->data);
  if (isset($data->fault)) {
    watchdog('webducateapi', 'An error occured: %error', array('%error' => (string) $data->fault->value->struct->member[1]->value->string), WATCHDOG_ERROR);
    return FALSE;
  }

  return $data;
}

/**
 * Recurse through XML data and return as an array.
 */
function webducateapi_recurse_data($data) {
  $return = array();
  foreach ($data->member as $member) {
    if (isset($member->value->string)) {
      $return[(string) $member->name] = (string) $member->value->string;
    }
    elseif (isset($member->value->struct)) {
      $return[(string) $member->name] = webducateapi_recurse_data($member->value->struct);
    }
  }
  return $return;
}

/**
 * Provides WebducateAPI settings or errors if not set correctly.
 */
function webducateapi_get_settings($settings = array()) {
  $defaults = array(
    'url' => 'http://portal.webducate.com.au/services/xmlrpc',
    'key' => '',
    'domain' => '',
    'username' => '',
    'password' => '',
  );
  $settings = array_merge(variable_get('webducateapi_settings', $defaults), $settings);

  $setup = TRUE;
  foreach (array_keys($defaults) as $key) {
    if (!isset($settings[$key]) || empty($settings[$key])) {
      $setup = FALSE;
      watchdog('webducateapi', 'WebducateAPI settings are not setup correctly.', array(), WATCHDOG_ERROR);
      break;
    }
  }

  return $setup ? $settings : $setup;
}

/**
 * Generate a hash from the provided data.
 */
function webducateapi_get_hash($key, $domain, $nonce, $method) {
  $time = REQUEST_TIME;
  $message = "{$time};{$domain};{$nonce};{$method}";
  return hash_hmac('sha256', $message, $key);
}

/**
 * Build XML request object.
 */
function webducate_build_request_data($method, $params = array()) {
  $data = new SimpleXMLElement("<methodCall></methodCall>");
  $data->addChild('methodName', $method);
  $data->addChild('params');

  if (!empty($params)) {
    foreach ($params as $string) {
      $param = $data->params->addChild('param');
      $value = $param->addChild('value');
      $value->addChild('string', $string);
    }
  }

  return $data->asXML();
}
