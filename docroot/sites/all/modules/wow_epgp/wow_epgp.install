<?php

/**
 * @file
 * Install, update and uninstall functions for the epgp module.
 */

/**
 * Implements hook_schema().
 */
function wow_epgp_schema() {
  $schema['wow_epgp'] = array(
    'description' => 'Stores EPGP data.',
    'fields' => array(
      'cid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => "Character's {wow_character}.cid.",
      ),
      'ep' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => "Character's effort points.",
      ),
      'gp' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => "Character's gear points.",
      ),
      'pr' => array(
        'type' => 'float',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Loot priority.',
      ),
    ),
    'primary key' => array('cid'),
    'foreign keys' => array(
      'character' => array(
        'table' => 'wow_character',
        'columns' => array('cid' => 'cid'),
      ),
    ),
  );

  $schema['wow_epgp_history'] = array(
    'description' => 'Stores loot history.',
    'fields' => array(
      'created' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Timestamp for when loot was attributed.',
      ),
      'cid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => "Character's {wow_character}.cid.",
      ),
      'iid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => "Item's {wow_item}.id.",
      ),
      'gp' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => "Item's gear points.",
      ),
    ),
    'foreign keys' => array(
      'character' => array(
        'table' => 'wow_character',
        'columns' => array('cid' => 'cid'),
      ),
      'item' => array(
        'table' => 'wow_item',
        'columns' => array('iid' => 'id'),
      ),
    ),
    'primary key' => array('created', 'cid'),
  );

  return $schema;
}

/**
 * Implements hook_uninstall().
 */
function wow_epgp_uninstall() {
  variable_del('wow_epgp');
}

/**
 * Add pr column (Loot Priority).
 */
function wow_epgp_update_7000() {
  $spec = array(
    'type' => 'float',
    'not null' => TRUE,
    'default' => 0,
    'description' => "Loot priority.",
  );
  db_add_field('epgp', 'pr', $spec);
}

/**
 * Add epgp_history table.
 */
function wow_epgp_update_7001() {
  $table = array(
    'description' => 'Stores loot history.',
    'fields' => array(
      'created' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Timestamp for when loot was attributed.',
      ),
      'cid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => "Character's {wow_character}.cid.",
      ),
      'iid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => "Item's {wow_item}.id.",
      ),
      'gp' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => "Item's gear points.",
      ),
    ),
    'indexes' => array(
      'cid' => array('cid'),
    ),
    'foreign keys' => array(
      'character' => array(
        'table' => 'wow_character',
        'columns' => array('cid' => 'cid'),
      ),
      'item' => array(
        'table' => 'wow_item',
        'columns' => array('iid' => 'id'),
      ),
    ),
  );

  db_create_table('epgp_history', $table);
}

/**
 * Allows NULL value for cid (in case of guild bank).
 *
 * Add index over the (created, cid) keys.
 */
function wow_epgp_update_7002() {
  $spec = array(
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'description' => "Character's {wow_character}.cid.",
  );

  db_drop_index('epgp_history', 'cid');
  db_change_field('epgp_history', 'cid', 'cid', $spec, array('primary key' => array('created', 'cid')));
}

/**
 * Update existing items from battle.net in a batch processing.
 */
function wow_epgp_update_7005(&$sandbox) {

  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = 0; // The count of items updated so far.
    // Total items that must be updated.
    $sandbox['total'] = db_query('SELECT COUNT(DISTINCT iid) FROM {epgp_history} h LEFT JOIN {wow_item} i ON h.iid = i.id WHERE i.id IS NULL')->fetchField();
    $sandbox['messages'] = array();
  }

  // Process items by groups of 10.
  $limit = 10;

  // Retrieve the next group of ids.
  $query = db_select('epgp_history', 'h');
  $query->leftJoin('wow_item', 'i', 'i.id = h.iid');
  $query->fields('h', array('iid'))
    ->isNull('i.id')
    ->range($sandbox['progress'], $limit)
    ->distinct();

  // Fetch items which are not known yet from the database.
  foreach ($query->execute() as $row) {
    $temp = array();
    $temp['values'] = array();

    $item = wow_item_fetch('eu', $row->iid);
    $item->is_new = TRUE;

    drupal_form_submit('wow_item_form', $temp, $item);

    // Update our progress information.
    $sandbox['progress']++;
  }

  // Set the "finished" status, to tell batch engine whether this function
  // needs to run again.
  $sandbox['#finished'] = ($sandbox['progress'] >= $sandbox['total']) ? 1 : ($sandbox['progress'] / $sandbox['total']);

  if ($sandbox['#finished']) {
    return t('The update successfully completed. !n items has been updated.', array('!n' => $sandbox['progress']));
  }
}

/**
 * Renamed epgp table to wow_epgp, epgp_history to wow_epgp_history.
 */
function wow_epgp_update_7100() {
 db_rename_table('epgp', 'wow_epgp');
 db_rename_table('epgp_history', 'wow_epgp_history');

 $epgp = variable_get('epgp');
 variable_set('wow_epgp', $epgp);
 variable_del('epgp');
}
