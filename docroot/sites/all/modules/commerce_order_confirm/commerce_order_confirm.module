<?php
define('COMMERCE_ORDER_CONFIRM_CODE_LENGTH', 12);

/**
 * Implements hook_menu()
 *
 * @return array
 */
function commerce_order_confirm_menu() {
  $items['order-confirm/%commerce_order'] = array(
    'title' => 'Commerce order confirmation',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_order_confirm_confirm_order', 1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/commerce/config/order/confirm-settings'] = array(
    'title' => 'Administer order confirmation',
    'description' => 'Administer order confirmation',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_order_confirm_settings_form'),
    'file' => 'commerce_order_confirm.admin.inc',
    'access arguments' => array('configure order settings'),
    //'access' => 1,
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/*
 * Page callback for commerce_order_confirm_settings_form
 *
 * Confirms the order if the url contains the confirmation code or shows a form
 * for enter the confirmation code
 *
 * @param $form
 * @param $form_state
 * @param $order
 *   The order entity
 *
 * @return array
 *  The confirmation form or just a plain message
*/
function commerce_order_confirm_confirm_order($form, &$form_state, $order) {
  $do_redir = FALSE;
  $confirmed = FALSE;

  if ($order) {
    // order-confirm/[order id]/code/[confirmation code]
    $confirmation_code = arg(3);
    // check the confirm code
    if (!empty($order->order_confirm->confirmation_code)) {
      if ('confirmed' == arg(2)) {
        // do nothing, redir was to none
        $confirmed = TRUE;
      }
      elseif ($order->status != variable_get('commerce_order_confirm_run_on', 'pending')) {
        // wrong run-on status
        drupal_set_message(t('This order has been confirmed already!'), 'warning');
        $do_redir = TRUE;
      }
      else if ($order->order_confirm->confirmation_code == $confirmation_code) {
        // the confirmation code is valid
        drupal_set_message(t('Your order has just been confirmed. Thank you for your order!'));
        // set the order status.
        _commerce_order_confirm_set_order_status($order);
        $do_redir = TRUE;
      }
      else {
        $form['confirm_code'] = array(
          '#type' => 'textfield',
          '#title' => t('Confirmation code'),
          '#size' => 20,
          '#maxlength' => COMMERCE_ORDER_CONFIRM_CODE_LENGTH,
          '#description' => t('Confirmation code of your order. We sent it to you by e-mail after you finished the checkout process.'),
        );

        $form['actions'] = array(
          '#type' => 'actions'
        );

        $form['actions']['submit'] = array(
          '#type' => 'submit',
          '#value' => t('Confirm my order')
        );

        return $form;
      }

      if ($do_redir) {
        switch (variable_get('commerce_order_confirm_redir', 'none')) {
          case 'none':
            drupal_goto('order-confirm/' . $order->order_id . '/confirmed');
            break;
          case 'front':
            drupal_goto('<front>');
            break;
          case 'order':
            drupal_goto('user/' . $order->uid . '/orders/' . $order->order_id);
            break;
          case 'custom':
            drupal_goto(variable_get('commerce_order_confirm_redir_custom', ''));
            break;
        }
      }
    }
    else {
      // no confirmation for this order
      drupal_set_message(t('No confirmation code assigned to this order. Please get support from the shop administrator!'), 'error');
      drupal_goto('<front>');
    }
  }

  if (!$do_redir && !$confirmed) {
    drupal_set_message(t('You have tried to use an invalid order to confirm.'), 'error');
    drupal_goto('<front>');
  }
}

/**
 * Implements validation hook for commerce_order_confirm_settings_form form
 *
 * @param $form
 * @param $form_state
 */
function commerce_order_confirm_confirm_order_validate($form, &$form_state) {
  $order = $form_state['build_info']['args'][0];
  if ($form_state['values']['confirm_code'] != $order->order_confirm->confirmation_code) {
    form_set_error('confirm_code', 'The given confirmation code is invalid.');
  }
}

/**
 * Implements submit for the commerce_order_confirm_settings_form form
 *
 * @param $form
 * @param $form_state
 */
function commerce_order_confirm_confirm_order_submit($form, &$form_state) {
  $order = $form_state['build_info']['args'][0];
  // TODO: watchdog message
  // set order status
  _commerce_order_confirm_set_order_status($order);
  // TODO: fire order_confirmed rule

  drupal_set_message(t('Your order has just been confirmed. Thank you for your order!'));
  // do a redirection
  switch(variable_get('commerce_order_confirm_redir', 'none')) {
    case 'none':
      $form_state['redirect'] = 'order-confirm/' . $order->order_id . '/confirmed';
      break;
    case 'front':
      $form_state['redirect'] = '<front>';
      break;
    case 'order':
      $order = $form_state['build_info']['args'][0];
      $form_state['redirect'] = 'user/' . $order->uid . '/orders/' . $order->order_id;
      break;
    case 'custom':
      $form_state['redirect'] = variable_get('commerce_order_confirm_redir_custom', '');
      break;
  }
}

/**
 * Updates the order status to the confirmation status
 *
 * @param $order
 *  The commerce order entity
 *
 */
function _commerce_order_confirm_set_order_status($order) {
  $order_status = commerce_order_status_load(variable_get('commerce_order_confirm_set_to', 'completed'));
  if ($order_status) {
    $order->status = $order_status['state'];
    commerce_order_save($order);
    _commerce_order_confirm_close_confirm_record($order);

    rules_invoke_event('commerce_order_confirmed', $order);
  }
}

/**
 * Creates confirmation record for new order entities
 *
 * @param $entity
 *  The commerce order entity
 * @param $type
 *  The entity type
 */
function commerce_order_confirm_entity_insert($entity, $type) {
  if ('commerce_order' == $type) {
    _commerce_order_confirm_insert_confirm_code($entity);
  }
}

/**
 * Implements hook_entity_load()
 *
 * Adds the order_confirm property object to the order entity after the order load
 *
 * @param $entities
 *   The entities keyed by entity ID.
 * @param $type
 *   The type of entities being loaded (i.e. node, user, comment).
 */
function commerce_order_confirm_entity_load($entities, $type) {
  if ('commerce_order' == $type) {
    foreach ($entities as $idx => $entity) {
      $query = db_select('commerce_order_confirm', 'coc');
      $query->condition('coc.order_id', $entity->order_id, '=');
      $query->fields('coc', array('order_id', 'confirmation_code', 'confirmation_date'));
      $result = $query->execute();
      $record = $result->fetchObject();
      if ($record) {
        $entities[$idx]->order_confirm = $record;
        $entity->order_confirm = $record;
      }
      else {
        $entities[$idx]->order_confirm = array();
        $entity->order_confirm = array();
      }
    }
  }
}

/**
 * Creates a new confirmation record for the $order
 *
 * @param $order
 *  The commerce order entity
 */
function _commerce_order_confirm_insert_confirm_code($order) {
  $record = new stdClass();
  $record->order_id = $order->order_id;
  // generate random code
  $chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
  $code = substr(str_shuffle($chars), 0, COMMERCE_ORDER_CONFIRM_CODE_LENGTH);
  $record->confirmation_code = $code;
  drupal_write_record('commerce_order_confirm', $record);
}

/**
 * Updates the confirmation record's date
 *
 * @param $order
 *  The commerce order entity
 */
function _commerce_order_confirm_close_confirm_record($order) {
  $num_updated = db_update('commerce_order_confirm')
    ->fields(array(
      'confirmation_date' => REQUEST_TIME,
    ))
  ->condition('order_id', $order->order_id, '=')
  ->execute();
}

/**
 * Implements hook_token_info_alter().
 */
function commerce_order_confirm_token_info_alter(&$data) {
  $data['tokens']['commerce-order']['order-activate-url'] = array(
    'name' => t('Order activate url'),
    'description' => t('Url where user can confirm/activate his order.'),
  );

  $data['tokens']['commerce-order']['order-activation-code'] = array(
    'name' => t('Order activation code'),
    'description' => t('The order activation code which user can confirm/activate his order.'),
  );
}

/**
 * Implements hook_tokens().
 */
function commerce_order_confirm_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  if ($type == 'commerce-order' && !empty($data['commerce-order'])) {
    $order = $data['commerce-order'];

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'order-activation-code':
          $code = commerce_order_confirm_order_activation_code($order);
          $replacements[$original] = $code;
          break;
        case 'order-activate-url':
          $url = commerce_order_confirm_order_activate_url($order);
          $replacements[$original] = $url;
          break;
      }
    }
  }
  return $replacements;
}

function commerce_order_confirm_order_activation_code($order) {
  if (!empty($order->order_confirm->confirmation_code)) {
    return $order->order_confirm->confirmation_code;
  }
  return '';
}

/**
 * Build the order activation url for the given order
 *
 * @param $order
 *
 * @return string The activation url token
 */
function commerce_order_confirm_order_activate_url($order) {
  $code = '';
  if (!empty($order->order_confirm->confirmation_code)) {
    $code = $order->order_confirm->confirmation_code;
  }
  return 'order-confirm/' . $order->order_id . '/code/' . $code;
}


function commerce_order_confirm_commerce_order_status_info_alter(&$order_statuses, $context1, $context2) {
  //dpm($order_statuses, __FUNCTION__);

  $order_statuses['confirmed'] = array(
    'name' => variable_get('commerce_order_confirm_set_to', 'completed'),
    'title' => 'Confirmed',
    'state' => 'confirmed',
    'cart' => FALSE,
    'weight' => 10,
    'status' => TRUE,
  );

  //dpm($order_statuses, __FUNCTION__);
}
