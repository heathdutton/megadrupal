<?php
/**
 * @file   xsendfile.install
 * @author AntÃ³nio P. P. Almeida <appa@perusio.net>
 * @date   Wed Feb 23 00:19:31 2011
 *
 * @brief  Install file for the xsendfile module.
 *
 */

/**
 * Get the filename for testing access from the web to the private files
 * directory.
 *
 * @return nothing
 *   Only side effects.
 */
function xsendfile_get_check_filename() {
  if (!variable_get('xsendfile_run_filename', FALSE)) {
    variable_set(
      'xsendfile_run_filename',
      uniqid('00xsendfile', TRUE));
  }
  // Return the filename.
  return variable_get('xsendfile_run_filename', FALSE);
} // xsendfile_get_check_filename


/**
 * Implements hook_requirements().
 */
function xsendfile_requirements($phase) {

  // Ensure translations don't break at install time.
  $t = get_t();

  // On the runtime phase check to see if the files are acessible from
  // outside.
  if ($phase == 'runtime') {
    // Get the URL to the runtime file check. This mimics
    // http://api.drupal.org/api/drupal/includes--file.inc/function/file_create_url/6.
    $check_protected_filename =
      variable_get('file_private_path', '') . '/' . xsendfile_get_check_filename();
    $check_protected_url = $GLOBALS['base_url'] . '/' . $check_protected_filename;

    // Write the runtime check file if not in place.
    xsendfile_write_runtime_check_file($check_protected_filename);
    // Use cURL if available.
    if (extension_loaded('curl')) {
      $ch = curl_init();
      // Set the options to cURL.
      curl_setopt_array($ch,
                        array(CURLOPT_URL => $check_protected_url,
                              CURLOPT_RETURNTRANSFER => TRUE,
                        ));
      // Run cURL.
      curl_exec($ch);
      // Get the status code returned.
      $status = curl_getinfo($ch, CURLINFO_HTTP_CODE);
      // Destroy the handler.
      curl_close($ch);
    }
    else { // if cURL is not available use drupal_http_request().
      $status = drupal_http_request($check_protected_url)->code;
    }
    // Test if the location is protected or not.
    if ($status == '404') {
      $value = $t('Protected');
      $severity = REQUIREMENT_OK;
      $description = $t('Private files are protected. Not web accessible.');
    }
    else {
      $value = $t('Unprotected');
      $severity = REQUIREMENT_ERROR;
      $description = $t('Private files are acessible from the web. Protect them please with this ' . l('configuration', 'admin/config/media/file-system/nginx-accel-redirect')) . '.';
    }
    // Return the requirements array.
    return array(
      'xsendfile' => array('title' => $t('Private file directory web access status'),
                                      'description' => $description,
                                      'value' => $value,
                                      'severity' => $severity,
      ));
  } // runtime
} // xsendfile_requirements()


/**
 * Implements hook_install().
 */
function xsendfile_install() {
  // Check if there's a filename for testing the accessibility of the private
  // files dir.
  xsendfile_get_check_filename();
} // xsendfile_install


/**
 * Implements hook_uninstall().
 */
function xsendfile_uninstall() {
  // Remove no longer needed variables.
  variable_del('xsendfile_transfer');
  variable_del('xsendfile_run_filename');
} // xsendfile_uninstall


/**
 * Tries to stat() the runtime check file for testing web access to the
 * private files directory.
 *
 * @param $filename
 *   The run time check filename for web access protection.
 *
 * @return
 */
function xsendfile_write_runtime_check_file($filename) {
  // Check if the file exists. If not then touch it.
  if (!file_exists($filename)) {
    touch($filename);
  }
} // xsendfile_write_runtime_check_file
