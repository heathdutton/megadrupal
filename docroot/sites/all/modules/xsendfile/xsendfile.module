<?php
/**
 * @file   xsendfile.module
 * @author AntÃ³nio P. P. Almeida <appa@perusio.net>
 * @date   Wed Feb 23 00:18:59 2011
 *
 * @brief Module that implements accelerated private file transfers for Nginx.
 *
 *
 */

// Constants that define the options for the settings form.
define('XSENDFILE_PHP_TRANSFER', 0);
define('XSENDFILE_NGINX_TRANSFER', 1);
define('XSENDFILE_APACHE_TRANSFER', 2);


/**
 * Implementation of hook_help().
 */
function xsendfile_help($path, $arg) {
  switch ($path) {
    case 'admin/help#xsendfile':
      $output = t('<p>The Xsendfile (X-Accel-Redirect) Module implements the ' .
        l('XSendfile', 'http://wiki.nginx.org/XSendfile', array('attributes' => array('rel' => 'external'))) . ' facility in Nginx with Drupal.') . '</p>';
      $output .= t('<p>The Xsendfile Module implements the ' .
              l('XSendfile', 'https://tn123.org/mod_xsendfile', array('attributes' => array('rel' => 'external'))) . ' facility for Apache with Drupal.') . '</p>';
      $output .= '<p>' . t('You have to specify a private path at the' . ' ' . l(t('file settings page'), 'admin/config/media/file-system') . ' and then enable the X-Accel-Redirect transfer at the module ' . l(t('settings page'), 'admin/config/media/file-system/xsendfile')) . '.</p>';
      return $output;
      break;
    case 'admin/config/media/file-system':
      $output = '';
      if (module_exists('help')) {
        $output = '<p>' . t('If using a private file system please enable fast file transfers using Xsendfile at the module ') . l(t('settings page'), 'admin/config/media/file-system/xsendfile') . '.</p>';
      }
      return $output;
      break;
    case 'admin/config/media/file-system/xsendfile':
      $output = '';
      if (module_exists('help')) {
        $output = '<p>' . t('To use Xsendfile for fast private file transfer enable it below.') . '</p>';
        $output .= '<p>' . t('More help at') . ' ' . l(t('this page'), 'admin/help#xsendfile') . '.</p>';
      }
      return $output;
      break;
  }
} // xsendfile_help


/**
 * Implementation of hook_menu_alter().
 * Overriding the default system/files menu handler.
 */
function xsendfile_menu_alter(&$items) {
  $items['system/files'] = array(
    'title' => 'Xsendfile download',
    'page callback' => 'xsendfile_file_transfer',
    'page arguments' => array('private'),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
} // xsendfile_menu_alter


/**
 * Implementation of hook_menu().
 */
function xsendfile_menu() {
  $items = array();

  $items['admin/config/media/file-system/xsendfile'] = array(
    'title' => 'Xsendfile File Settings',
    'description' => 'Control how files are transferred when using private files.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xsendfile_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'weight' => -11,
  );
  return $items;
} // xsendfile_menu


/**
 * Transfering a private file using the X-Accel-Redirect facility.
 * Mosty stolen from file_download().
 * @see file_download()
 */
function xsendfile_file_transfer() {

  $args = func_get_args();
  // Get the stream wrapper scheme.
  $scheme = array_shift($args);
  // Get the target: URI = scheme://target.
  $target = implode('/', $args);
  $uri = $scheme . '://' . $target;

  $server_type = variable_get('xsendfile_transfer', XSENDFILE_PHP_TRANSFER);
  // Revert to default file_download if set to use PHP for transfer
  if ($server_type == XSENDFILE_PHP_TRANSFER) {
    array_unshift($args, 'private'); // add the page argument back on - stream wrapper scheme
    call_user_func_array('file_download', $args);
    exit();
  }


  if (file_stream_wrapper_valid_scheme($scheme) && file_exists($uri)) {
    // Let other modules provide headers and controls access to the file.
    // module_invoke_all() uses array_merge_recursive() which merges header
    // values into a new array. To avoid that and allow modules to override
    // headers instead, use array_merge() to merge the returned arrays.
    $headers = array();
    foreach (module_implements('file_download') as $module) {
      $function = $module . '_file_download';
      $result = $function($uri);
      if ($result == -1) {
        return drupal_access_denied();
      }
      if (isset($result) && is_array($result)) {
        $headers = array_merge($headers, $result);
      }
    }
    if (count($headers)) {
      foreach ($headers as $name => $value) {
        drupal_add_http_header($name, $value);
      }
      drupal_send_headers();

      // Setting the X-Accel-Redirect header for Nginx OR for Apache.
      if($server_type == XSENDFILE_APACHE_TRANSFER) {
        header('X-Sendfile: ' . base_path() . variable_get('file_private_path', '') . '/' . file_uri_target($uri));
      }
      if($server_type == XSENDFILE_NGINX_TRANSFER) {
        header('X-Accel-Redirect: ' . base_path() . variable_get('file_private_path', '') . '/' . file_uri_target($uri));
      }
      exit();
    }
  }
  return drupal_not_found();
} // xsendfile_file_transfer

/**
 * The module settings form.
 */
function xsendfile_admin_settings() {
  $form = array();

  // Add the CSS for styling the Nginx configuration suggestion.
  drupal_add_css(drupal_get_path('module', 'xsendfile') . '/xsendfile_form.css');

  $form['xsendfile']['xsendfile_transfer'] = array(
    '#type' => 'radios',
    '#title' => 'Xsendfile: Fast private file transfer support for Nginx or Apache',
    '#default_value' => variable_get('xsendfile_transfer', XSENDFILE_PHP_TRANSFER),
    '#options' => array(
      XSENDFILE_PHP_TRANSFER => t('Files transfered by PHP'),
      XSENDFILE_NGINX_TRANSFER => t('Files transferred by Nginx using X-Accel-Redirect'),
      XSENDFILE_APACHE_TRANSFER => t('Files transferred by Apache using xsendfile'),
    ),
    '#description' => 'Enable X-Accel-Redirect support.',
  );

  // NGINX
  $form['xsendfile']['nginx'] = array(
    '#type' => 'fieldset',
    '#title' => 'Fast private file transfer for Nginx',
    '#collapsible' => TRUE,
    '#states' => array(
      'visible' => array(
        ':input[name="xsendfile_transfer"]' => array('value' => '1'),
      )
    ),
  );

  $form['xsendfile']['nginx']['xsendfile_config_suggestion'] = array(
    '#type' => 'textarea',
    '#title' => t('X-Accel-Redirect: Basic configuration for serving files and protecting the private files directory'),
    '#description' => t('Copy & paste to your vhost Nginx configuration to protect the private files and serve them.'),
    '#default_value' => xsendfile_get_nginx_config(),
    '#rows' => 10,
    '#cols' => 70,

  );

  $form['xsendfile']['nginx']['xsendfile_advanced_config_text'] = array(
    '#prefix' => '<br/><p>',
    '#markup' => t('Also you can simplify the location /system/files if using an include file with the proper fastcgi parameters like this: ') . l('https://github.com/perusio/drupal-with-nginx/blob/master/fastcgi_private_files.conf', 'https://github.com/perusio/drupal-with-nginx/blob/master/fastcgi_private_files.conf') . '.',
    '#suffix' => '</p><br/>',
  );

  $form['xsendfile']['nginx']['xsendfile_advanced_config_suggestion'] = array(
    '#type' => 'textarea',
    '#title' => t('X-Accel-Redirect: Advanced configuration for serving and protecting private files.'),
    '#description' => t('Copy & paste to your vhost config to serve private files.'),
    '#default_value' => xsendfile_get_nginx_config(TRUE),
    '#cols' => '70',
    '#rows' => '10',

  );

  //APACHE
  $form['xsendfile']['apache'] = array(
    '#type' => 'fieldset',
    '#title' => 'Fast private file transfer for Apache',
    '#collapsible' => TRUE,
    '#states' => array(
      'visible' => array(
        ':input[name="xsendfile_transfer"]' => array('value' => '2'),
      )
    ),
  );

  $form['xsendfile']['apache']['apache_config'] = array(
    '#title' => t('.htaccess code'),
    '#type' => 'textarea',
    '#description' => t('You need to place the following code in your .htaccess inside the drupal root'),
    '#default_value' => xsendfile_get_apache_config(),
  );

  $form['xsendfile']['apache']['apache_config_text'] = array(
    '#prefix' => '<br/><p>',
    '#markup' => t('Additional config infos: ') . l('https://tn123.org/mod_xsendfile','https://tn123.org/mod_xsendfile'),
    '#suffix' => '</p><br/>',
    );

  return system_settings_form($form);
} // xsendfile_admin_settings


/**
 * Generates the suggested Nginx configuration for protecting the private
 *  files directory.
 *
 * @param $advanced boolean
 *   It's TRUE if the config to be generated is the advanced.
 *
 * @return string
 *   The suggested configuration for Nginx.
 */

function xsendfile_get_nginx_config($advanced = FALSE) {

  // Check to see if the purl module is installed. If so use regex based
  // locations otherwise use literal locations.
  $nginx_location_operator = module_exists('purl') ? '~*' : '^~';

  // The private files directory protection.
  $output = '## To be placed at the the top of your vhost configuration (server).';
  $output .= "\n## Protect the private files directory.\n";
  $output .= 'location ' . $nginx_location_operator . ' /' . variable_get('file_private_path', '') . "/ {\n";
  $output .= "   internal;\n}\n\n";

  // The system/files serving.
  $output .= '## Relay the file handling to Drupal at this location.';
  $output .= "\nlocation " . $nginx_location_operator . " /system/files/ {\n";
  // Check to see which configuration snippet is going to be served based on
  // the $advanced.
  if ($advanced) {
    $output .= "   ## fastcgi_private_files.conf is a file at the nginx config\n";
    $output .= "   ## root that contains the settings for fast private file serving.\n";
    $output .= "   include fastcgi_private_files.conf;\n";
  }
  else {
    $output .= "   ## fastcgi_params is a file at the nginx config root that contains\n";
    $output .= "   ## the 'usual' settings for FastCGI.\n";
    $output .= "   include fastcgi_params;\n";
    $output .= "   ## Here begins the specific part.\n";
    $output .= "   fastcgi_param QUERY_STRING q=\$uri;\n";
    $output .= "   fastcgi_param SCRIPT_NAME /index.php;\n";
    $output .= "   fastcgi_param SCRIPT_FILENAME \$document_root/index.php;\n";
  }

  $output .= "   ## Adjust accordingly to your setup.\n";
  $output .= "   ## This assumes UNIX sockets with php-fpm.\n";
  $output .= "   fastcgi_pass unix:/var/run/php-fpm.sock;\n\n";
  $output .= "   ## Uncomment the line below to disable 404 logging.\n";
  $output .= "   #log_not_found off;\n}\n\n";

  return $output;
} // xsendfile_get_nginx_config


/**
 * Generates the suggested APACHE configuration for protecting the private
 *  files directory.
 *
 * @param $advanced boolean
 *   It's TRUE if the config to be generated is the advanced.
 *
 * @return string
 *   The suggested configuration for Apache.
 */

function xsendfile_get_apache_config($advanced = FALSE) {

  $output = "XSendFile on\n";
  $output .= "XSendFileAllowAbove on\n";

  return $output;
} // xsendfile_get_apache_config
