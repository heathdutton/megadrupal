<?php
/**
 * @file
 * Module file for anonymous_suggestion_box.
 */

/**
 * Implements hook_help().
 */
function anonymous_suggestion_box_help($path, $arg) {
  switch ($path) {
    // Some text for the Help page for the module.
    case 'admin/help#anonymous_suggestion_box':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('A simple module to collect anonymous
      feedback from users, by allowing a formatted email to be sent to
      a either a settable email address or saved to a database. Module
      intentionally strips away identifiable information about user.') .
      '</p>';
      $output .= '<p>' . t('This module was specifically designed as an
      alternative to modules like Webform and Webform Anonymous as they
      are not fully anonymous and would not be compliant with some
      regulatory compliance situations.') . '</p>';
      $output .= '<p>' . t('Originally designed for use within company
      Staff Portal site for submissions to Human Resources Manager for
      compliance with worker&#8217;s comp policy requirements. Site being
      closed to anonymous users, required a different approach to
      submitting suggestions anonymously') . '</p>';
      $output .= '<h3>' . t('Use') . '</h3>';
      $output .= '<p>' . t('The default settings should work on most
      sites, an email will be sent to the configured site&#8217;s email
      address when the suggestion for is submitted. It is advisable to
      check the <a href="@anonymous_suggestion_box_settings">
      configuration page</a> to verify the settings are correct for your
      site&#8217;s specific needs.',
      array('@anonymous_suggestion_box_settings' => url('admin/config/system/anonymous_suggestion_box'))) . '</p>';
      $output .= '<p>' . t('There is a check box provided for selection
      of submissions being saved to database and submissions being sent
      by email. One or both of these checkboxes may be selected. If the
      box for sending submissions via email is selected, a valid to and
      from  email address must be entered. There is also a field provided
      that allows custom text to be displayed above the suggestion
      submission form. This is a plain text field, HTML formatting will
      be ignored.') . '</p>';
      $output .= '<p>' . t('Submissions saved to the database may be viewed
      on the <a href="@anonymous_suggestion_box_view">page provided
      </a>. If the views module is enabled, the default page will be
      overriden by a custom view. This enhances the functionality of the
      submission review page, and allows for customization of the results
      through the <a href="@anonymous_suggestion_box_views">views UI</a>
      .',
      array(
        '@anonymous_suggestion_box_view' => url('anonymous_suggestion_box/view'),
        '@anonymous_suggestion_box_views' => url('admin/structure/views/view/anonymous_suggestion_box_submissions'),
      )) . '</p>';
      return $output;

    // Help for the custom admin page.
    case 'admin/config/system/anonymous_suggestion_box':
      return '<p>' . t('You may specify the desired functions for the
      Anonymous Suggestion Box here. Select either Save to Database or
      Email, alternatively you may select both. If you select to have
      the suggestions sent via email, you will be required to provide a
      valid to and from email address. You may use the instructions
      field to provide information to users filling in the suggestion
      box. These instructions will be displayed above the form.') . '</p>';

  }
}

/**
 * Implements hook_permission().
 */
function anonymous_suggestion_box_permission() {
  return array(
    // Permission to allow a role to submit anonymous suggestions.
    'submit anonymous suggestions' => array(
      'title' => t('Submit anonymous suggestions'),
      'description' => t('Allow users to access Anonymous suggestion box'),
    ),
    // Permission to allow a role to view submitted anonymous suggestions.
    'view anonymous suggestion box' => array(
      'title' => t('View anonymous suggestion box submissions'),
      'description' => t('Allow users to view Anonymous suggestion box submissions'),
    ),
    // Permission to allow a role to set anonymous suggestion box settings.
    'admin anonymous suggestion box' => array(
      'title' => t('Admin anonymous suggestion box'),
      'description' => t('Allow users to administer Anonymous suggestion box settings'),
    ),
  );
}

/**
 * Implements hook_menu().
 *
 * Page callbacks and arguments for submission form, view page, and
 * admin form.
 */
function anonymous_suggestion_box_menu() {
  $items['anonymous_suggestion_box'] = array(
    'title' => 'Anonymous Suggestion Box',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('anonymous_suggestion_box_form'),
    'access arguments' => array('submit anonymous suggestions'),
  );
  $items['anonymous_suggestion_box/view'] = array(
    'title' => 'View All Submissions',
    'page callback' => 'anonymous_suggestion_box_view',
    'access arguments' => array('view anonymous suggestion box'),
  );
  $items['admin/config/system/anonymous_suggestion_box'] = array(
    'title' => 'Anonymous Suggestion Box',
    'description' => 'Anonymous Suggestion Box settings page',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('anonymous_suggestion_box_admin'),
    'access arguments' => array('admin anonymous suggestion box'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'anonymous_suggestion_box.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_mail().
 */
function anonymous_suggestion_box_mail($key, &$message, $params) {
  // Match $key to value from anonymous_suggestion_box_mail_send.
  switch ($key) {
    case 'anonymous_suggestion_box_message':
      $options = array(
        'langcode' => $message['language']->language,
      );
      // Set email message subject, substituting the word Drupal if
      // site_name is not set.
      $message['subject'] = t('Anonymous Suggestion Box submission from @site-name', array('@site-name' => variable_get('site_name', 'Drupal')), $options);
      // Sanatize each of the submitted fields with check_plain and
      // include them in the body of the message.
      $message['body'][] = t('Location: @location', array('@location' => $params['location']), $options);
      $message['body'][] = t('Observation: @observation', array('@observation' => $params['observation']), $options);
      $message['body'][] = t('Suggested Improvement: @suggested', array('@suggested' => $params['suggested']), $options);
      break;
  }
}

/**
 * Calls hook_mail().
 */
function anonymous_suggestion_box_mail_send($form_values) {
  $module = 'anonymous_suggestion_box';
  $key = 'anonymous_suggestion_box_message';
  // This passes through valid_email_address when the admin form is validated.
  $to = variable_get('anonymous_suggestion_box_to_email');
  // This passes through valid_email_address when the admin form is validated.
  $from = variable_get('anonymous_suggestion_box_from_email');
  // Check that $to and $from contain valid email address in the event
  // site_mail is empty.
  if (valid_email_address($to) && valid_email_address($from)) {
    $params = $form_values;
    // Use site default language for outgoing email message.
    $language = language_default();
    // This can be set to FALSE to prevent emails from being sent for
    // testing purposes.
    $send = TRUE;
    $result = drupal_mail($module, $key, $to, $language, $params, $from, $send);
  }
  else {
    // Set $return to false if $to or $from are not valid.
    $result = FALSE;
  }
  if ($result['result'] == TRUE) {
    drupal_set_message(t('Your Anonymous message has been sent.'));
  }
  else {
    drupal_set_message(t('There was a problem sending your message and it was not sent.'), 'error');
  }
}

/**
 * Custom function to insert records into database.
 */
function anonymous_suggestion_box_db_insert($form_values) {
  // Load values to be saved to database from form values.
  $entry = array(
    'location' => $form_values['location'],
    'observation' => $form_values['observation'],
    'suggested' => $form_values['suggested'],
  );
  // Try to write a new record to the database.
  try {
    $caught_error = FALSE;
    drupal_write_record('anonymous_suggestion_box', $entry);
  }
  // Catch any exceptions on write.
  catch (Exception $e) {
    drupal_set_message(t('Database write failed. Message = %message, query= %query',
      array('%message' => $e->getMessage(), '%query' => $e->query_string)), 'error');
    $caught_error = TRUE;
  }
  // Display a nice message on succses or failure.
  if (!$caught_error) {
    drupal_set_message(t('Your Anonymous message has been saved.'));
  }
  else {
    drupal_set_message(t('Something went wrong, sorry.'), 'error');
  }
}

/**
 * Implements hook_form().
 */
function anonymous_suggestion_box_form() {
  // Intro text set on admin page, default value set on hook_install.
  $intro_text = check_plain(variable_get('anonymous_suggestion_box_form_intro'));
  $form['intro'] = array(
    '#markup' => '<p>' . $intro_text . '</p>',
  );
  $form['location'] = array(
    '#type' => 'textarea',
    '#title' => t('Location'),
    '#required' => TRUE,
  );
  $form['observation'] = array(
    '#type' => 'textarea',
    '#title' => t('Observation'),
    '#required' => TRUE,
  );
  $form['suggested'] = array(
    '#type' => 'textarea',
    '#title' => t('Suggested Improvement'),
    '#required' => TRUE,
  );
  $form['info'] = array(
    '#markup' => t('Submissions are kept completely anonymous, no details of who submitted the information is stored or transmitted.') . '<br />',
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  return $form;
}

/**
 * Implements hook_form_validate().
 *
 * Checks that submitted values fall with in minimum and maximum length.
 */
function anonymous_suggestion_box_form_validate($form, &$form_state) {
  if (drupal_strlen($form_state['values']['location']) < variable_get('anonymous_suggestion_box_min_textarea')) {
    form_set_error('location', t('You must enter more text for the location.'));
  }
  if (drupal_strlen($form_state['values']['observation']) < variable_get('anonymous_suggestion_box_min_textarea')) {
    form_set_error('observation', t('You must enter more text for the observation.'));
  }
  if (drupal_strlen($form_state['values']['suggested']) < variable_get('anonymous_suggestion_box_min_textarea')) {
    form_set_error('suggested', t('You must enter more text for the suggested improvements.'));
  }
  if (drupal_strlen($form_state['values']['location']) > variable_get('anonymous_suggestion_box_max_textarea')) {
    form_set_error('suggested', t('You must enter less text for the location.'));
  }
  if (drupal_strlen($form_state['values']['observation']) > variable_get('anonymous_suggestion_box_max_textarea')) {
    form_set_error('suggested', t('You must enter less text for the observation.'));
  }
  if (drupal_strlen($form_state['values']['suggested']) > variable_get('anonymous_suggestion_box_max_textarea')) {
    form_set_error('suggested', t('You must enter less text for the suggested improvements.'));
  }
}

/**
 * Form submit callback for anonymous_suggestion_box_form.
 *
 * Calls mail_send or db_insert depending on selected values by admin.
 */
function anonymous_suggestion_box_form_submit($form, &$form_state) {
  if (variable_get('anonymous_suggestion_box_method_email') == 1) {
    anonymous_suggestion_box_mail_send($form_state['values']);
  }
  if (variable_get('anonymous_suggestion_box_method_db') == 1) {
    anonymous_suggestion_box_db_insert($form_state['values']);
  }
}

/**
 * Redenders custom page to view submissions.
 *
 * Can be overridden by the supplied view from the Views module. Uses
 * the PagerDefault extender.
 */
function anonymous_suggestion_box_view() {
  $query = db_select('anonymous_suggestion_box', 's')
    ->fields('s', array('sid', 'location', 'observation', 'suggested'));
  $results = $query
    ->extend('PagerDefault')
    ->orderBy('sid', 'DESC')
    ->limit(10)
    ->execute()
    ->fetchAll();
  $rows = array();
  foreach ($results as $row) {
    $rows[$row->sid] = array(
      check_plain($row->location),
      check_plain($row->observation),
      check_plain($row->suggested),
    );
  }
  $output['content'] = array(
    '#theme' => 'table',
    '#header' => array('location','observation','suggestion'),
    '#rows' => $rows,
    '#sticky' => 'false',
    '#empty' => t('No results found.'),
  );
  $output['pager'] = array(
    '#theme' => 'pager',
    '#weight' => 5,
  );
  return $output;
}

/**
 * Implements hook_views_api().
 *
 * Requires minimum of Views 2 API. Supplies Views API with the correct
 * path to the include files.
 */
function anonymous_suggestion_box_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'anonymous_suggestion_box') . '/views',
  );
}
