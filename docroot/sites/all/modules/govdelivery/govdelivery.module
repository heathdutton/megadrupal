<?php
/**
 * @file
 * GovDelivery TMS module.
 */

/**
 * Implements hook_permission().
 */
function govdelivery_permission() {
  return array(
    'Manage GovDelivery settings' => array(
      'title' => t('Manage GovDelivery settings'),
      'description' => t('Manage GovDelivery accounts, service endpoints, enable/disable cron events, enable/disable queuing, send test messages/subscriptions, manage the mail queue'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function govdelivery_menu() {
  $items['admin/config/govdelivery'] = array(
    'title' => 'GovDelivery',
    'description' => 'Configure GovDelivery settings.',
    'position' => 'right',
    'weight' => 0,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/config/govdelivery/settings'] = array(
    'title' => 'GovDelivery Integration',
    'description' => 'Settings for GovDelivery to connect with the GovDelivery TMS and Subscription service.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('govdelivery_settings'),
    'access arguments' => array('Manage GovDelivery settings'),
    'file' => 'govdelivery.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/govdelivery/settings/test'] = array(
    'title' => 'GovDelivery settings test - messages',
    'description' => 'Test sending messages through Drupal correctly route to the GovDelivery service.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('govdelivery_test_settings'),
    'access arguments' => array('Manage GovDelivery settings'),
    'file' => 'govdelivery.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/govdelivery/settings/test_subscriptions'] = array(
    'title' => 'GovDelivery settings test - subscriptions',
    'description' => 'Test signup process for GovDelivery Subscription services.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('govdelivery_test_subscriptions'),
    'access arguments' => array('Manage GovDelivery settings'),
    'file' => 'govdelivery.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/reports/govdelivery_message_queue'] = array(
    'title' => 'GovDelivery message queue',
    'description' => 'View current items in the message queue.',
    'page callback' => 'govdelivery_message_queue_report',
    'page arguments' => array(),
    'access arguments' => array('Manage GovDelivery settings'),
    'file' => 'govdelivery.admin-reports.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/reports/govdelivery_message_queue/details'] = array(
    'title' => 'GovDelivery message details',
    'description' => 'Details of a queued messaged',
    'page callback' => 'govdelivery_details',
    'page arguments' => array(),
    'access arguments' => array('Manage GovDelivery settings'),
    'file' => 'govdelivery.admin-reports.inc',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_mail().
 */
function govdelivery_mail($key, &$message, $params) {
  $message['subject'] = 'GovDelivery test message';
  if (isset($_SERVER['HTTP_HOST'])) {
    $_SERVER['HTTP_HOST'] = strtolower($_SERVER['HTTP_HOST']);
    if (drupal_valid_http_host($_SERVER['HTTP_HOST'])) {
      $message['subject'] = 'GovDelivery test message: ' . $_SERVER['HTTP_HOST'] . ' ' . time() . ' ' . rand(1, 10000);
    }
  }

  // Commenting out as it is causing problems sending body.
  // $message['body'][] = chr(0xb);
  // // Low level ctrl chars.
  // $message['body'][] = chr(0x10);
  // // Block D7FF < chr < E000
  // $message['body'][] = chr(0x800);
  // // Block FFFD < chr < 10000
  // $message['body'][] = chr(0xFFFE);
  $message['body'][] = "<html>";
  $message['body'][] = "<h1>H1 Test</h1>";
  $message['body'][] = "<h2>H2 Test</h2>";
  $message['body'][] = "<h3>H3 Test</h3>";
  $message['body'][] = "<p>This is a test message from the GovDelivery system</p>";
  $message['body'][] = "<ol><li>Item 1</li><li>Item 2</li><li>Item 3</li></ol>";
  $message['body'][] = "</html>";
}

/**
 * Implements hook_cron().
 *
 * @todo This is likely broken or limited.
 */
function govdelivery_cron() {
  $govdelivery_subscription_settings = variable_get('govdelivery_subscription_settings', NULL);
  $govdelivery_tms_settings = variable_get('govdelivery_tms_settings', array());

  // If subscriptions cron is Enabled.
  if (isset($govdelivery_subscription_settings['cron_subscriptions']) && $govdelivery_subscription_settings['cron_subscriptions']) {
    $messages_sent = govdelivery_process_subscription_queue();
  }

  // If subscriptions cron is Enabled.
  if (isset($govdelivery_tms_settings['cron_tms']) && $govdelivery_tms_settings['cron_tms']) {
    $items_sent = govdelivery_process_message_queue();
  }
}

/**
 * Implements hook_nagios_info().
 */
function govdelivery_nagios_info() {
  return array(
    'name' => 'GovDelivery',
    'id' => 'GovDelivery',
  );
}

/**
 * Get the count from a particular queue.
 */
function _govdelivery_get_queue_count($table) {
  try {
    $result = db_select($table)->countQuery()->execute()->fetchField();
    return $result;
  }
  catch (Exception $e) {
    return FALSE;
  }
}

/**
 * Implements hook_nagios().
 */
function govdelivery_nagios() {
  $queues = array(
    'messages' => array(
      'table' => 'govdelivery_message_queue',
    ),
    'subscriptions' => array(
      'table' => 'govdelivery_subscription_queue',
    ),
    'subscriber_api_topics' => array(
      'table' => 'govdelivery_subscriber_api_topic_queue',
    ),
    'subscriber_api_subscribers' => array(
      'table' => 'govdelivery_subscriber_api_subscriber_queue',
    ),
  );

  $return = array(
    'key' => 'GovDelivery',
  );

  // Get the user settings.
  foreach ($queues as $queue => $details) {
    $critical_threshold = variable_get('govdelivery_' . $queue . '_nagios_critical_threshold', 750);
    $warning_threshold = variable_get('govdelivery_' . $queue . '_nagios_warning_threshold', 350);

    $count = _govdelivery_get_queue_count($details['table']);
    if (is_numeric($count) && is_numeric($critical_threshold) && is_numeric($warning_threshold)) {
      if ($count > $critical_threshold) {
        $status = NAGIOS_STATUS_CRITICAL;
        $text = t("GovDelivery has @count backlogged @queue in the queue.", array('@count' => $count, '@queue' => $queue));
      }
      elseif ($count > $warning_threshold) {
        $status = NAGIOS_STATUS_WARNING;
        $text = t("GovDelivery has @count backlogged @queue in the queue.", array('@count' => $count, '@queue' => $queue));
      }
      else {
        $status = NAGIOS_STATUS_OK;
        $text = '';
      }
    }
    else {
      $status = NAGIOS_STATUS_UNKNOWN;
      $text = t("GovDelivery can't determine the queue status for: ", array('@queue' => $queue));
    }

    $return['data_' . $queue] = array(
      'status' => $status,
      'type' => 'state',
      'text' => $text,
    );
  }
  return $return;
}

/**
 * Implements hook_nagios_settings().
 */
function govdelivery_nagios_settings() {
  $queues = array(
    'messages' => array(
      'table' => 'govdelivery_message_queue',
    ),
    'subscriptions' => array(
      'table' => 'govdelivery_subscription_queue',
    ),
    'subscriber_api_topics' => array(
      'table' => 'govdelivery_subscriber_api_topic_queue',
    ),
    'subscriber_api_subscribers' => array(
      'table' => 'govdelivery_subscriber_api_subscriber_queue',
    ),
  );

  $form = array('GovDelivery' => array());
  foreach ($queues as $queue => $detail) {
    $form['GovDelivery'][] = array(
      'govdelivery_' . $queue . '_nagios_critical_threshold' => array(
        '#type' => 'textfield',
        '#title' => t($queue . ' Critical threshold'),
        '#default_value' => variable_get('govdelivery_' . $queue . '_nagios_critical_threshold', 750),
        '#description' => t('Issue a critical alert when GovDelivery has this number of items queued. (Make this greater then the warning number)'),
      ),
      'govdelivery_' . $queue . '_nagios_warning_threshold' => array(
        '#type' => 'textfield',
        '#title' => t($queue . ' Warning threshold'),
        '#default_value' => variable_get('govdelivery_' . $queue . '_nagios_warning_threshold', 350),
        '#description' => t('Issue a warning alert when GovDelivery has this number of items queued. (Make this less then the critical alert number)'),
      ),
    );
  }
  return $form;
}

/**
 * Message Queue Processor.
 */
function govdelivery_process_message_queue($items = NULL, $ignore_max_time = FALSE, $cid = NULL, $bid = NULL) {
  return _govdelivery_preprocess_queue('govdelivery_message_queue', 'govdelivery_send_message', $items, $ignore_max_time, $cid, $bid);
}

/**
 * Original Subscription Queue Processor.
 *
 * @deprecated This will be removed in version 2.0.
 */
function govdelivery_process_subscription_queue($items = NULL, $ignore_max_time = FALSE, $cid = NULL, $bid = NULL) {
  return _govdelivery_preprocess_queue('govdelivery_subscription_queue', 'govdelivery_queued_subscribe', $items, $ignore_max_time, $cid, $bid);
}

/**
 * Subscriber API Topic Queue Processor.
 */
function govdelivery_process_subscriber_api_topic_queue($items = NULL, $ignore_max_time = FALSE, $cid = NULL, $bid = NULL) {
  return _govdelivery_preprocess_queue('govdelivery_subscriber_api_topic_queue', 'govdelivery_subscriber_api_send_topic', $items, $ignore_max_time, $cid, $bid);
}

/**
 * Subscriber API Subscriber Queue Processor.
 */
function govdelivery_process_subscriber_api_subscriber_queue($items = NULL, $ignore_max_time = FALSE, $cid = NULL, $bid = NULL) {
  return _govdelivery_preprocess_queue('govdelivery_subscriber_api_subscriber_queue', 'govdelivery_subscriber_api_send_subscription', $items, $ignore_max_time, $cid, $bid);
}

/**
 * Generic pre-process queue.
 *
 * Handles parsing the bids and randomizing their order.
 */
function _govdelivery_preprocess_queue($queue, $callback, $items = NULL, $ignore_max_time = FALSE, $cid = NULL, $bid = NULL) {
  $items_sent = 0;

  try {
    foreach (_govdelivery_get_bids_from_bid($bid) as $notrandom => $random) {
      $items_sent += govdelivery_process_queue($queue, $callback, $random, $items, $ignore_max_time, $cid);
    }
  }
  catch (Exception $e) {
    watchdog('govdelivery', "Failed to get proper bid for processing. Validate that govdelivery_tms_settings['max_bid'] variable has a valid integer value or the Drush command is called with a valid second parameter. Error: @error",
      array('@error' => $e->getMessage()), WATCHDOG_ERROR);
    return FALSE;
  }

  watchdog('govdelivery', 'Sent %items items when processing the govdelivery @queue queue.',
           array('%items' => $items_sent, '@queue' => $queue), WATCHDOG_INFO);
  return $items_sent;
}

/**
 * Used to set high low bid values from a range input of n,n+1-x.
 *
 * Properly handles default values if no bid is specified in the correct form.
 * Handles randomizing the range so that semaphores are less likely to deadlock.
 */
function _govdelivery_get_bids_from_bid($bid) {
  $govdelivery_tms_settings = variable_get('govdelivery_tms_settings', array());

  // Flag for errors.
  $return = TRUE;

  $bid_range = array();
  if (!is_null($bid)) {
    $bid_range = explode(',', $bid);
  }
  else {
    $bid_range[0] = 1;
    $bid_range[1] = is_numeric($govdelivery_tms_settings['max_bid']) ? $govdelivery_tms_settings['max_bid'] : 5;
  }

  $bids = array();
  if (isset($bid_range[0], $bid_range[1])
      && is_numeric($bid_range[0]) && is_numeric($bid_range[1]) && $bid_range[0] <= $bid_range[1]) {
    $bids = range($bid_range[0], $bid_range[1]);
    // Shuffle returns true/false.
    $return = shuffle($bids);
  }
  else {
    $return = FALSE;
  }

  if (!$return) {
    throw new Exception(
      "Invalid Bid Range or unable to Shuffle the bids. Check calling function or the govdelivery_tms_settings['max_bid'] variable.");
  }

  return $bids;
}

/**
 * Generic thread-safe queue processor.
 */
function govdelivery_process_queue($queue, $callback, $bid, $items = NULL, $ignore_max_time = FALSE, $cid = NULL) {
  $govdelivery_tms_settings = variable_get('govdelivery_tms_settings', array());
  $start_time = (timer_read('page') / 1000);

  // Get the lock name.
  lock_initialize();
  if (is_numeric($bid)) {
    $lock_name = 'govdelivery_semaphore_' . $queue  . '_bin_' . $bid;
  }
  else {
    watchdog('govdelivery', 'Attempting to run govdelivery queue processing with invalid bid.', array(), WATCHDOG_ERROR);
    return FALSE;
  }

  // Check if the lock is available or fail.
  if (!lock_acquire($lock_name, $govdelivery_tms_settings['external_cron_interval'])) {
    watchdog('govdelivery', 'Attempting to re-run govdelivery queue processing while it is already running. @bin',
      array('@bin' => $lock_name), WATCHDOG_WARNING);
    return FALSE;
  }

  // Checks for maximum execution time cribbed from the job_queue module:
  // drupal.org/project/job_queue.
  $max_execution_time = ini_get('max_execution_time');
  if (!$ignore_max_time && empty($max_execution_time)) {
    $max_execution_time = 5 * 60;
  }

  $query = db_select($queue, 'q');
  $query->fields('q', array('cid'));
  $query->condition('bid', $bid, '=');
  $cache_queue = $query->execute();

  $items_sent = 0;
  foreach ($cache_queue as $queue_key) {
    // Check our status against the maximum execution time for a request,
    // and if we've used half of it we want to stop processing - it was
    // formerly checking whether half the time was used, rather than
    // whether we had used half of it in this module.
    if (!$ignore_max_time && (((timer_read('page') / 1000) - $start_time) > ($max_execution_time / 2))) {
      watchdog('govdelivery', 'Half of the available PHP execution time of %max_execution_time has been use processing the GovDelivery queue and processing will not continue.',
        array('%max_execution_time' => $max_execution_time), WATCHDOG_WARNING);
      // Stop once we have used over half of the maximum execution time.
      break;
    }

    $i = $queue_key->cid;
    // Only send one message from the queue if a cid is passed in
    // If the cid is null or blank process the queue as normal.
    if ((!empty($cid) && $i == $cid) || (empty($cid))) {
      // Get the most recently cached item.
      $item = govdelivery_queue_get($queue, $i);
      // If this item is still in the cache.
      if ($item) {
        // Resend the item. Add a callback.
        $status = call_user_func_array($callback, array($item));
        if ($status) {
          govdelivery_queue_remove($queue, $i);
          $items_sent++;
        }
      }
    }
    if (isset($items) && ($items_sent >= $items)) {
      // Break if we've sent the requested number of items.
      break;
    }
  }

  lock_release($lock_name);
  return $items_sent;
}

/**
 * Retrieve an item from the queue.
 */
function govdelivery_queue_get($queue, $cid) {
  $query = db_select($queue, 'q');
  $query->fields('q', array('data', 'created', 'expire', 'serialized'));
  $query->condition('q.cid', $cid);
  $result = $query->execute();

  $message = $result->fetchObject();
  if (isset($message->data) && !empty($message->data)) {
    if ($message->serialized) {
      $message->data = unserialize($message->data);
    }
    return $message->data;
  }
  return FALSE;
}

/**
 * Create or update an item in the queue.
 */
function govdelivery_queue_set($queue, $cid, $data) {
  $govdelivery_tms_settings = variable_get('govdelivery_tms_settings', array());
  if (!empty($govdelivery_tms_settings)) {
    $serialized = 0;
    if (is_object($data) || is_array($data)) {
      $data = serialize($data);
      $serialized = 1;
    }

    $created = REQUEST_TIME;
    try {
      $random = rand(1, $govdelivery_tms_settings['max_bid']);
      $query = db_update($queue);
      $query->fields(array(
          'data' => $data,
          'created' => $created,
          'serialized' => $serialized,
          'bid' => $random,
        ));
      $query->condition('cid', $cid);
      $num_updated = $query->execute();

      if ($num_updated <= 0) {
        db_insert($queue)
          ->fields(array(
            'cid' => $cid,
            'data' => $data,
            'created' => $created,
            'serialized' => $serialized,
            'bid' => $random,
          ))
          ->execute();
      }
    }
    catch (Exception $e) {
      print_r($e);
      watchdog('govdelivery', 'Queue Set Error: @e', array('@e' => $e->getMessage()), WATCHDOG_NOTICE);
    }
  }
  else {
    drupal_set_message(t('You must configure govdelivery TMS in order to use it'), 'status', FALSE);
  }
}

/**
 * Remove an item from the queue.
 */
function govdelivery_queue_remove($queue, $cid) {
  db_delete($queue)
    ->condition('cid', $cid)
    ->execute();
}

/**
 * Check the existence of a particular field-value pair in a given queue's data.
 *
 * @todo Switch this to use cache_api and verify if the multithreaded
 * version gets more hits.
 */
function govdelivery_queue_check($queue, $field, $match_value) {
  static $in_queue;

  // Check that the topic id isn't in the static cache of unsent items or
  // in the queue.
  if (is_array($in_queue)) {
    foreach ($in_queue as $cached_value) {
      if ($cached_value == $match_value) {
        watchdog('govdelivery', 'Cache Hit - Match Value: @match_value is still in the topic queue to be processed so we will not send this item yet.', array('@match_value' => $match_value), WATCHDOG_NOTICE);
        return TRUE;
      }
    }
  }

  $query = db_select($queue, 'q')->fields('q');
  $queue_data = $query->execute();
  foreach ($queue_data as $item) {
    if (isset($item->data) && !empty($item->data)) {
      if ($item->serialized) {
        $item->data = unserialize($item->data);
      }
    }
    else {
      continue;
    }

    if (isset($item->data->$field)) {
      // Stash this for speed.
      $in_queue[] = $item->data->$field;
    }
    else {
      continue;
    }

    if ($item->data->$field == $match_value) {
      watchdog('govdelivery', 'Cache Miss - Match Value: @match_value is still in the topic queue to be processed so we will not send this item yet.', array('@match_value' => $match_value), WATCHDOG_NOTICE);
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Filter user email.
 *
 * The user may have put in an address of the form
 * "Full Name" <email@domain.tld> instead of just the address,
 * so we want to filter to the right address.
 */
function govdelivery_filter_email($address) {
  // Borrowed from the drupal valid_email_address($mail) function.
  $user = '[a-zA-Z0-9_\-\.\+\^!#\$%&*+\/\=\?\`\|\{\}~\']+';
  $domain = '(?:(?:[a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.?)+';
  $ipv4 = '[0-9]{1,3}(\.[0-9]{1,3}){3}';
  $ipv6 = '[0-9a-fA-F]{1,4}(\:[0-9a-fA-F]{1,4}){7}';

  // Setup an array for the matching expression.
  $matches = array();

  // This regex is adapted from drupal's valid_email_address($mail) function.
  preg_match("/$user@($domain|(\[($ipv4|$ipv6)\]))/", $address, $matches);
  return (isset($matches[0]) ? $matches[0] : '');
}

/**
 * Send messages immediately or to the queue if enabled.
 */
function govdelivery_process_message($key, $message) {
  // Check preferences.
  if (is_array($message)) {
    $govdelivery_tms_settings = variable_get('govdelivery_tms_settings', array());
    $send_success = FALSE;
    // Attempt to send immediately.
    if (isset($govdelivery_tms_settings['queue']) && !$govdelivery_tms_settings['queue']) {
      $send_success = govdelivery_send_message($message);
      if ($send_success) {
        watchdog('govdelivery', 'Successfully sent a message immediately.', array(), WATCHDOG_INFO);
      }
    }

    // Queue the message if:
    // 1. Failure to send immediately.
    // 2. Queue preferences haven't been set.
    // 3. Queue is enabled.
    if (!$send_success) {
      govdelivery_queue_set('govdelivery_message_queue', $key, $message);
    }
  }
  else {
    watchdog('govdelivery', 'Bad message data got to the process message function.', array(), WATCHDOG_WARNING);
  }
}

/**
 * Queue a topic to be added to govdelivery.
 *
 * Use govdelivery_subscriber_get_topic_id($title).
 *
 * @param string $title
 *   The topic's title in GovDelivery.
 * @param string $short_title
 *   The topic's short title in GovDelivery.
 * @param string $topic_id
 *   The topic's ID.
 *
 * @return bool
 *   Return TRUE on successfully queuing or FALSE on error.
 */
function govdelivery_subscriber_api_add_topic($title, $short_title = "", $topic_id = NULL) {
  $queue = 'govdelivery_subscriber_api_topic_queue';

  // Build the data.
  if (empty($topic_id) && empty($title)) {
    return FALSE;
  }

  if (empty($topic_id) && !empty($title)) {
    $topic_id = variable_get('govdelivery_topic_prefix', '') . $title;
  }

  $short_title = (empty($short_title) ? $title : $short_title);
  $data = new stdClass();
  $data->title = $title;
  $data->short_title = $short_title;
  $data->topic_id = $topic_id;

  $queue_result = FALSE;
  // Try to queue.
  $key = md5(print_r($data->title . $data->short_title, TRUE) . microtime() . strval(rand()));
  $queue_result = govdelivery_queue_set($queue, $key, $data);

  return $queue_result;
}

/**
 * Queue a topic subscription to be added to GovDelivery.
 *
 * If $topic_id is NULL, $title will be used in a call to
 * govdelivery_subscriber_get_topic_id($title).
 *
 * @param string $email
 *   The email address being subscribed. If the subscriber doesn't exist a
 *   new subscriber will be created.
 * @param string $title
 *   The Topic's title from the GovDelivery system or as created during a
 *   call to govdelivery_subscriber_api_add_topic.
 * @param string $topic_id
 *   The topic_id from the GovDelivery system.
 *
 * @return bool
 *   Return TRUE on successfully queuing or FALSE on error.
 */
function govdelivery_subscriber_api_add_subscriber($email, $title = NULL, $topic_id = NULL) {
  $queue = 'govdelivery_subscriber_api_subscriber_queue';

  // Fail if there is noone to subscribe.
  if (empty($email)) {
    return FALSE;
  }

  // Fail if there is no way to get a topic_id.
  if (empty($topic_id) && empty($title)) {
    return FALSE;
  }

  // @todo remove this code.
  if (empty($topic_id) && !empty($title)) {
    $topic_id = variable_get('govdelivery_topic_prefix', '') . $title;
  }

  // Build the data.
  $data = new stdClass();
  $data->email = $email;
  $data->title = $title;
  $data->topic_id = $topic_id;

  $queue_result = FALSE;
  // Try to queue.
  $key = md5(print_r($data->email . $data->topic_id . $data->title, TRUE) . microtime() . strval(rand()));
  $queue_result = govdelivery_queue_set($queue, $key, $data);

  return $queue_result;
}

/**
 * Called by the queue processor to send a message from the queued.
 *
 * Also called to send immediately.
 */
function govdelivery_send_message($message) {
  $govdelivery_tms_settings = variable_get('govdelivery_tms_settings', array());
  $sendsuccess = FALSE;

  # Get list of recipients.
  $recipients = array();
  if (is_array($message["to"])) {
    foreach ($message["to"] as $address) {
      $tolist = explode(',', $address);
      if (is_array($tolist)) {
        $filtered_list = array_map("govdelivery_filter_email", $tolist);
        $recipients = array_merge($recipients, $filtered_list);
      }
      else {
        $recipients[] = govdelivery_filter_email($tolist);
      }
    }
  }
  else {
    $tolist = explode(',', $message["to"]);
    if (is_array($tolist)) {
      $filtered_list = array_map("govdelivery_filter_email", $tolist);
      $recipients = array_merge($recipients, $filtered_list);
    }
    else {
      $recipients[] = govdelivery_filter_email($tolist);
    }
  }

  # Check which account is mapped.
  $account = $govdelivery_tms_settings['default_username'];
  if (!isset($account) || empty($account)) {
    watchdog('govdelivery', "No default account specified.  Check 'Default mail username' in admin/config/govdelivery/settings.", NULL, WATCHDOG_ERROR);
    return FALSE;
  }

  $from_address = $govdelivery_tms_settings['accounts'][$account]['fromname'];
  if (isset($govdelivery_tms_settings['override_from']) && !empty($govdelivery_tms_settings['override_from'])) {
    if (!empty($message['from'])) {
      $from_address = $message['from'];
    }
  }

  $message_data = array(
    'body' => $message['body'],
    'from_name' => $from_address,
    'subject' => $message["subject"],
    'recipients' => array()
  );
  foreach ($recipients as $recipient) {
    $message_data['recipients'][] = array('email' => $recipient);
  }
  $data = json_encode($message_data);
  $auth_token = $govdelivery_tms_settings['auth_token'];
  $options = array(
    'method' => 'POST',
    'data' => $data,
    'timeout' => 15,
    'headers' => array('Content-Type' => 'application/json', 'X-AUTH-TOKEN' => $auth_token),
  );

  $server = $govdelivery_tms_settings['server'];
  $result = drupal_http_request($server . '/messages/email', $options);
  // HTTP code for this?
  if ($result->code == 200 or $result->code == 201) {
    $send_success = TRUE;
  }
  else {
    watchdog('govdelivery', 'Exception: Error in sending email: %error', array('%error' => $result->code), WATCHDOG_ERROR);
    $sendsuccess = FALSE;
  }

  return $sendsuccess;
}

/**
 * Helper function when calling subscribe from the queue run.
 */
function govdelivery_queued_subscribe($item) {
  return govdelivery_subscribe($item['code'], $item['email'], TRUE);
}

/**
 * Process a subscription from the queue.
 *
 * Do not call this directly.
 */
function govdelivery_subscribe($list_code, $email, $from_queue = FALSE) {
  // Check the initial prototype input.
  if (is_null($list_code) || empty($list_code)) {
    watchdog('govdelivery', 'Supplied list code is null or empty.', array(), WATCHDOG_ERROR);
    // Return TRUE to remove something from the queue.
    if ($from_queue) {
      return TRUE;
    }
    return FALSE;
  }

  if (is_null($email) || empty($email)) {
    watchdog('govdelivery', 'Supplied email is null or empty.', array(), WATCHDOG_ERROR);
    // Return TRUE to remove something from the queue.
    if ($from_queue) {
      return TRUE;
    }
    return FALSE;
  }

  // Prototype input is good now lets check the settings.
  $request = array(
    'code' => $list_code,
    'email' => $email,
  );
  $key = md5(print_r($request, TRUE) . microtime() . strval(rand()));

  $govdelivery_subscription_settings = variable_get('govdelivery_subscription_settings', NULL);
  if (is_null($govdelivery_subscription_settings) || empty($govdelivery_subscription_settings)) {
    if (!$from_queue) {
      govdelivery_queue_set('govdelivery_subscription_queue', $key, $request);
    }
    watchdog('govdelivery', 'Settings for subscribing this user are not available. Subscription will be queued.', array(), WATCHDOG_ERROR);
    return FALSE;
  }

  // General settings exist, check the specific settings we need.
  $service_url = $govdelivery_subscription_settings['service_url'];
  if (is_null($service_url) || empty($service_url)) {
    if (!$from_queue) {
      govdelivery_queue_set('govdelivery_subscription_queue', $key, $request);
    }
    watchdog('govdelivery', 'Service URL for subscribing this user is not available. Subscription will be queued.', array(), WATCHDOG_ERROR);
    return FALSE;
  }

  // Settings are valid now send the request.
  $request_url = url($service_url, array('query' => $request));
  $response = drupal_http_request($request_url);

  // The response is well-formed XML, but seems pretty heavyweight to parse
  // as XML, we're better off with a simple regex match.
  $matches = array();
  preg_match("/<response code='(\d+)' message=[',\"](.*)[',\"]><\/response>/", $response->data, $matches);
  $result_code = $matches[1];
  $message = $matches[2];

  // Check if the URL is totally borked.
  if (!empty($response->error)) {
    watchdog('govdelivery', 'System Error: %error', array('%error' => var_export($response, TRUE)), WATCHDOG_ERROR);
    return FALSE;
  }

  // Check if the url is redirecting...this might need to be removed if
  // something changes on govdeliverys side.
  // Currently - 10/24/2011 GovDelivery will redirect to their homepage if
  // you hit the wrong url in their domain.
  if (!empty($response->redirect_code)) {
    watchdog('govdelivery', 'System Error: %error', array('%error' => var_export($response, TRUE)), WATCHDOG_ERROR);
    return FALSE;
  }

  // If the response code in the response header from govdelivery is
  // anything other then 200 there is something seriously wrong with
  // this request and we should consider it malicious.
  // It also doesn't help that GovDelivery isn't sending back a
  // standard response like the other error codes.
  // Note: This is different then result_code pulled from the xml body of
  // the response.
  if ($response->code != '200') {
    watchdog('govdelivery', 'Error subscribing - Email: %email List: %list The response from GovDelivery was not 200 meaning this request is probably malicious. Response Code: %response',
    array(
      '%email' => $request['email'],
      '%list' => $request['code'],
      '%respons' => $response->code,
    ), WATCHDOG_ERROR);
    // Return TRUE to remove something from the queue.
    if ($from_queue) {
      return TRUE;
    }
    return FALSE;
  }

  // In the future we should be able to switch this to key off of
  // $response->code but until then we need to keep parsing.
  // Key off the Result Code from the response body instead of the header.
  switch ($result_code) {
    case "200":
      watchdog('govdelivery', 'Subscribed Email: %email to List: %list', array('%email' => $request['email'], '%list' => $request['code']), WATCHDOG_INFO);
      return TRUE;

    case "404":
    case "414":
    case "500":
      watchdog('govdelivery', 'Error subscribing - Email: %email List: %list Response: %response Message: %message; Item will not be queued.',
        array(
          '%email' => $request['email'],
          '%list' => $request['code'],
          '%response' => $result_code,
          '%message' => $message,
        ), WATCHDOG_ERROR);
      // Return TRUE to remove something from the queue.
      if ($from_queue) {
        return TRUE;
      }
      return FALSE;

    default:
      if (!$from_queue) {
        govdelivery_queue_set('govdelivery_subscription_queue', $key, $request);
      }
      watchdog('govdelivery', 'Error subscribing - Email:  %email List: %list Response: %response Message: %message; Item will be queued.',
        array(
          '%email' => $request['email'],
          '%list' => $request['code'],
          '%response' => $result_code,
          '%message' => $message,
        ), WATCHDOG_ERROR);
      return FALSE;
  }
}

/**
 * Process a topic create item from the subscriber api queue.
 *
 * Do not call this function directly.
 *
 * Returns TRUE on success or unrecoverable failures.
 * Returns FALSE on failure or recoverable failures.
 */
function govdelivery_subscriber_api_send_topic($data) {
  // @todo Move as much of this to a check function to be called
  // from all the Processors.
  // Check the required class library exists or fail.
  if (!class_exists('GovDeliverySubscriberAPI')) {
    watchdog('govdelivery',
      'No GovDeliverySubscriberAPI class found. Check the libraries folder in the govdelivery module or the govdelivery.info includes.',
      NULL, WATCHDOG_ERROR);
    return FALSE;
  }

  // Check settings are available or fail.
  $govdelivery_tms_settings = variable_get('govdelivery_tms_settings', array());
  if (empty($govdelivery_tms_settings)) {
    watchdog('govdelivery', 'No settings found. Check settings.php.', NULL, WATCHDOG_ERROR);
    return FALSE;
  }

  // Check account mappings from the settings file or fail.
  $govdelivery_subscription_settings = variable_get('govdelivery_subscription_settings', NULL);
  if (isset($govdelivery_subscription_settings['subscriber_api_account']) && !empty($govdelivery_subscription_settings['subscriber_api_account'])) {
    $account = $govdelivery_subscription_settings['subscriber_api_account'];
  }
  else {
    watchdog('govdelivery', 'No default account specified.  Check settings.php.', NULL, WATCHDOG_ERROR);
    return FALSE;
  }

  // Get the password parameter or fail.
  if (isset($govdelivery_tms_settings['accounts'][$account]['password']) && !empty($govdelivery_tms_settings['accounts'][$account]['password'])) {
    $password = $govdelivery_tms_settings['accounts'][$account]['password'];
  }
  else {
    watchdog('govdelivery', 'No password for default account. Check settings.php.', NULL, WATCHDOG_ERROR);
    return FALSE;
  }

  // Get the URL Base parameter or fail.
  $url_base = $govdelivery_subscription_settings['subscriber_api_url_base'];
  if (empty($url_base)) {
    watchdog('govdelivery', 'Subscription settings subscriber_api_base_url not set. Check settings.php.', NULL, WATCHDOG_ERROR);
    return FALSE;
  }

  // Try to create the SubscriberAPI object or fail.
  $subscriber_api = new GovDeliverySubscriberAPI($account, $password, $url_base);
  if (!($subscriber_api instanceof GovDeliverySubscriberAPI)) {
    watchdog('govdelivery', 'Failed to create new GovDeliverySubscriberAPI object. Check settings for default account, password, and url base.', NULL, WATCHDOG_ERROR);
    return FALSE;
  }

  $data->topic_id = (!empty($data->topic_id) ? $data->topic_id : $govdelivery_subscription_settings['subscriber_api_topic_prefix'] . $data->title);
  // @todo remove this code.
  // Check title and topic are present or fail and remove from queue.
  if (empty($data->title) && empty($data->topic_id)) {
    watchdog('govdelivery', 'Title and topic_id not set. Removing from queue.', NULL, WATCHDOG_ERROR);
    // Return TRUE to trick the queue processor into removing this item.
    return TRUE;
  }

  // Send request.
  try {
    $result = $subscriber_api->create_topic($data);
  }
  catch (Exception $e) {
    watchdog('govdelivery', 'Exception in GovDeliverySubscriberAPI::create_topic($topic), Exception: @e', array('@e' => $e->getMessage()), WATCHDOG_ERROR);
    // The message length too long exception we can recover from
    // reasonably with manual intervention.
    return FALSE;
  }

  // Requeue or remove from queue on success.
  switch ($result->info['http_code']) {
    // Success.
    case 200:
      watchdog('govdelivery', 'Successfully created topic - Topic ID: @topic_id; Title: @title; HTTP Code: @http_code; Item will not be queued.',
        array(
          '@topic_id' => $data->topic_id,
          '@title' => $data->title,
          '@http_code' => $result->info['http_code'],
        ), WATCHDOG_NOTICE);
      _govdelivery_set_default_topic_category($data->topic_id, $subscriber_api);
      return TRUE;

    // Non recoverable failure.
    // Bad syntax.
    case 422:
      watchdog('govdelivery', 'Error creating topic - Topic ID: @topic_id; Title: @title; HTTP Code: %http_code; Response: %response; Item will not be queued.',
        array(
          '@topic_id' => $data->topic_id,
          '@title' => $data->title,
          '%http_code' => $result->info['http_code'],
          '%response' => $result->error,
        ), WATCHDOG_ERROR);
      // Return TRUE to remove the item from the queue.
      return TRUE;

    // Recoverable failure.
    // Failure to authenticate.
    case 302:
      // Unauthorized.
    case 401:
    default:
      watchdog('govdelivery', 'Error creating topic - Topic ID: @topic_id; Title: @title; HTTP Code: %http_code; Response: %response; Item will be queued.',
        array(
          '@topic_id' => $data->topic_id,
          '@title' => $data->title,
          '%http_code' => $result->info['http_code'],
          '%response' => $result->error,
        ), WATCHDOG_ERROR);
      return FALSE;
  }
}

/**
 * Pull the default topic setting.
 *
 * Set the supplied topic id to be part of that category.
 */
function _govdelivery_set_default_topic_category($topic_id, $subscriber_api_object) {
  if (!($subscriber_api_object instanceof GovDeliverySubscriberAPI)) {
    return FALSE;
  }

  if (empty($topic_id)) {
    return FALSE;
  }

  $govdelivery_subscription_settings = variable_get('govdelivery_subscription_settings', NULL);
  $category_id = isset($govdelivery_subscription_settings['default_topic_category_id']) ? $govdelivery_subscription_settings['default_topic_category_id'] : '';
  if (empty($category_id)) {
    watchdog('govdelivery', 'Subscription settings default_topic_category_id not set. Check settings.php.', NULL, WATCHDOG_ERROR);
    return FALSE;
  }

  $data = new stdClass();
  $data->topic_id = $topic_id;
  $data->category_id = $category_id;

  // Set the default topic category.
  // @todo maybe this is imperative to someone else.
  try {
    $subscriber_api_object->update_topic_category($data);
    return TRUE;
  }
  catch (Exception $e) {
    watchdog('govdelivery', 'Exception in GovDeliverySubscriberAPI::update_topic_category($topic), Exception: @e', array('@e' => $e->getMessage()), WATCHDOG_ERROR);
    return FALSE;
  }
}

/**
 * Process a subscription create item from the subscriber api queue.
 *
 * Do not call this function directly.
 *
 * Returns TRUE on success or unrecoverable failures.
 * Returns FALSE on failure or recoverable failures.
 */
function govdelivery_subscriber_api_send_subscription($data) {
  $govdelivery_subscription_settings = variable_get('govdelivery_subscription_settings', NULL);

  // @todo remove this code and hopefully leverage queue_subscribe fully.
  $field = 'topic_id';
  $value = $data->$field;
  if (empty($value)) {
    $field = 'title';
    $value = $govdelivery_subscription_settings['subscriber_api_topic_prefix'] . $data->$field;
  }

  if (govdelivery_queue_check('govdelivery_subscriber_api_topic_queue', $field, $value)) {
    // Return FALSE to keep the item in the queue.
    return FALSE;
  }

  // If this isn't on the do not send list then send away.
  return govdelivery_subscribe($data->topic_id, $data->email, TRUE);
}
