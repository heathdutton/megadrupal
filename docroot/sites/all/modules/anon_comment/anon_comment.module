<?php

/**
 * @file
 * A module that allows authenticated users to post comments anonymously without logging out.
 */


/**
 * Implements hook_help().
 */
function anon_comment_help($path, $arg) {
  if ($path == 'admin/help#anon_comment') {
    return '<p>' . t('This module gives authenticated users the option of posting comments anonymously. There are no configuration options at this time. </p>');
  }
  if ($path == 'admin/content/comment/anon') {
    return '<p>' . t("Below is a list of the latest <strong>published</strong> anonymized comments. Click on a subject to see the comment, the actual author's name to edit the author's information, 'edit' to modify the text, and 'delete' to remove the comment.") . '</p>';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function anon_comment_form_comment_form_alter(&$form, &$form_state) {

  global $user;

  //no need to alter the form if we're already anonymous
  if ($user->uid == 0) {
    return;
  }

  //implement the checkbox on the comment form
  $form['anonymize'] = array(
    '#type' => 'checkbox',
    '#title' => t('Post this comment anonymously'),
    '#default_value' => 0,
    '#weight' => '10',
    '#access' => user_access('comment anonymously when logged in')
  );

  //alter the previews, if we're doing that
  if (array_key_exists('preview', $form['actions'])) {
    array_unshift( $form['actions']['preview']['#submit'], 'anon_comment_form_preview');
  }

  //alter the comment as its submitted
  if (array_key_exists('#submit', $form) && is_array($form['#submit'])) {
    array_unshift( $form['#submit'], 'anon_comment_form_submit');
    $form['#submit'][] = 'anon_comment_log_author'; //log whoever actually made this comment
  }
}

/**
 * Custom submit handler to anonymize the comment if the user indicated such
 */
function anon_comment_form_submit($form, &$form_state) {
  if ($form_state['values']['anonymize'] == "1") {
    //perform the anonymization... in several places, just to be sure
    $author_string = t("Anonymized User");
    $form_state['values']['name'] = $author_string;
    $form_state['values']['is_anonymous'] = TRUE;
  }
}

/**
 * Custom preview handler to anonymize the comment for preview, called before comment_form_build_preview()
 */
function anon_comment_form_preview($form, &$form_state) {
  if ($form_state['values']['anonymize'] == "1") {
    //perform the anonymization... in several places, just to be sure
    $author_string = t("Anonymized User");
    $form_state['values']['name'] = $author_string;
    $form_state['values']['is_anonymous'] = TRUE;
  }
  return $form;
}

/**
 * Logs the comment_id and user id into the anon_comment table for safe-keeping
 */
function anon_comment_log_author($form, &$form_state) {

  global $user;

  $field_map = array('cid' => $form_state['values']['cid'], 'uid' => $user->uid);
  $query = db_insert('anon_comment_authors')->fields($field_map)->execute();
}

/**
 * Implements hook_permission().
 */
function anon_comment_permission() {
  return array(
    'comment anonymously' => array(
      'title' => t('Comment anonymously, even when logged in.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function anon_comment_menu() {
  $items['admin/content/comment/anon'] = array(
    'title' => 'Anonymized comments',
    'type' => MENU_LOCAL_TASK,
    'file' => 'anon_comment.admin.inc',
    'access arguments' => array('administer comments'),
    'page callback' => 'anon_comment_admin',
  );
  return $items;
}

/**
 * Implements hook_comment_delete().
 */
function anon_comment_comment_delete($comment) {
  db_delete('anon_comment_authors')
  ->condition('cid', $comment->cid)
  ->execute();
}

/**
 * Implements hook_theme().
 */
function anon_comment_theme() {
  return array(
    'anon_comment_admin_overview' => array(
      'render element' => 'form',
    )
  );
}