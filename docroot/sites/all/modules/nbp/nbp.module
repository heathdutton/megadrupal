<?php
/**
 * @file
 * Prevents NULL byte poisoning in any form input.
 */

/**
 * Implements hook_form_alter().
 */
function nbp_form_alter(&$form, &$form_state, $form_id) {
  array_unshift($form['#validate'], 'nbp_sanitize_values');
}

/**
 * Sanitizes all data in $form_state['values'].
 */
function nbp_sanitize_values($form, &$form_state) {
  $values = $form_state['values'];
  $secure = nbp_sanitize($values);

  // Log any NULL byte poisoning attempts.
  if ($modified = nbp_modified_data($values, $secure)) {
    $message = 'NULL byte poisoining attempt in form %form_id.<br />The following values were poisoned: !fields';
    $replace = array(
      '%form_id' => $form_state['build_info']['form_id'],
      '!fields' => theme('item_list', array('type' => 'ul', 'items' => nbp_format_modified($modified))),
    );

    watchdog('security', $message, $replace, WATCHDOG_ALERT);
  }

  // Save the sanitized input.
  $form_state['values'] = $secure;
}

/**
 * Sanitizes input data.
 *
 * @param array|string $data
 *   The data to sanitize.
 *
 * @return array|string
 *   The sanitized data.
 */
function nbp_sanitize($data) {
  // Recursively run through arrays.
  if (is_array($data)) {
    foreach ($data as $key => $value) {
      $data[$key] = nbp_sanitize($value);
    }
  }

  // Prevent NULL byte poisoning.
  elseif (!is_object($data)) {
    $data = str_replace(chr(0), '', $data);
  }

  return $data;
}

/**
 * Internal use only.
 *
 * Compares an array of original $form_state values with their sanitized
 * counterparts. Any values that were subject to NULL byte poisoning will
 * have their keys returned by this function.
 */
function nbp_modified_data($original, $sanitized) {
  $keys = array();

  foreach ($original as $key => $value) {
    // Recursively run through arrays.
    if (is_array($value)) {
      // Only add the key if it has any hits on a lower level.
      if ($results = nbp_modified_data($value, $sanitized[$key])) {
        $keys[$key] = $results;
      }
    }

    // Add poisoned keys to the return array. We cast $value as a string
    // because we are potentially checking a non-string against something
    // we cast to a string by using str_replace() in nbp_sanitize().
    elseif (!is_object($value) && $sanitized[$key] !== (string) $value) {
      $keys[$key] = str_replace(chr(0), 'NULLBYTE', $value);
    }
  }

  return $keys;
}

/**
 * Formats which data was modified.
 *
 * Construct an array of message strings in the following format:
 * $form_state['values']['foo']['bar']: file.phpNULLBYTE.jpg
 *
 * @param array $modified
 *   The modified data as detected by nbp_modified_data().
 * @param array $parents
 *   (optional) Internal use only.
 *
 * @return array
 *   A list of messages stating which parts of the form state were modified.
 *
 * @see nbp_modified_data()
 */
function nbp_format_modified($modified, $parents = array()) {
  $items = array();

  foreach ($modified as $key => $data) {
    // Update this item's list of parents.
    $item_parents = array_merge($parents, array($key));

    // Recursively run through arrays.
    if (is_array($data)) {
      $items = array_merge($items, nbp_format_modified($data, $item_parents));
    }

    // Format the string with its parents listed.
    else {
      $items[] = '$form_state["values"]["' . implode('"]["', $item_parents) . '"]: ' . $data;
    }
  }

  return $items;
}
