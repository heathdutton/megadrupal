<?php

/**
 * @file
 * Core handlers and function for the SecKit Override modules.
 */

// Flag in drop down lists to indicate inherit.
define('SECKIT_OVERRIDE_INHERIT', '_SECKIT_OVERRIDE_INHERIT_');

/**
 * Implements hook_menu().
 */
function seckit_override_menu() {
  $items = array(
    'admin/config/system/seckit/override' => array(
      'title' => 'Overrides',
      'description' => 'Allows overriding Security Kit global settings by URL',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('seckit_override_manage_paths'),
      'access arguments' => array('administer seckit'),
      'file' => 'seckit_override.admin.inc',
      'type' => MENU_LOCAL_TASK,
      'weight' => 10,
    ),
    'admin/config/system/seckit/override/edit/%' => array(
      'title' => 'Edit Override',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('seckit_override_edit_path', 6),
      'access arguments' => array('administer seckit'),
      'file' => 'seckit_override.admin.inc',
      'type' => MENU_CALLBACK,
    ),
    'admin/config/system/seckit/override/delete/%' => array(
      'title' => 'Delete Override',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('seckit_override_delete_path', 6),
      'access arguments' => array('administer seckit'),
      'file' => 'seckit_override.admin.inc',
      'type' => MENU_CALLBACK,
    ),
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function seckit_override_menu_alter(&$items) {
  // See if seckit has a top level menu with no local tasks.
  $base = 'admin/config/system/seckit';

  $seckit_menu = NULL;
  $seckit_local = FALSE;

  foreach ($items as $path => $data) {
    if ($path == $base) {
      $seckit_menu = $data;
    }
    elseif (drupal_substr($path, 0, strlen($base) == $base)) {
      if ($data['type'] == MENU_DEFAULT_LOCAL_TASK) {
        $seckit_local = TRUE;
        break;
      }
    }
  }

  // If main found, but not a local menu, add a dummy default local.
  if ($seckit_menu && !$seckit_local) {
    $seckit_menu['type'] = MENU_DEFAULT_LOCAL_TASK;
    $items[$base . '/global'] = $seckit_menu;
  }
}

/**
 * Implements hook_theme().
 */
function seckit_override_theme() {
  return array(
    'seckit_override_manage_paths' => array(
      'render element' => 'form',
      'file' => 'seckit_override.admin.inc',
    ),
  );
}

/**
 * Implements hook_seckit_options_alter().
 */
function seckit_override_seckit_options_alter(&$options) {
  $path = request_path();

  // Bypass if our tables aren't available.
  if (!db_table_exists('cache_seckit_override')) {
    return;
  }

  // See if we have this path in the cache.
  $cached = cache_get($path, 'cache_seckit_override');
  if ($cached) {
    // Yes. Use it.
    $override = $cached->data;
  }
  else {
    // No. Calculate it, then store it for next time.
    $override = seckit_override_lookup_path($path);
    cache_set($path, $override, 'cache_seckit_override');
  }

  if ($override) {
    // Handle any overrides set by this record.
    foreach ($override as $tree => $value) {
      // Figure out which setting we need to update.
      $treelist = explode(':', $tree);
      $target =& seckit_override_find_reference($options, $treelist);

      // Any known special handling goes here.
      switch ($tree) {
        case 'seckit_clickjacking:x_frame_allow_from':
          $value = _seckit_explode_value($value);
          break;
      }

      // And store the value.
      $target = $value;
    }
  }
}

/**
 * Implements hook_flush_caches().
 */
function seckit_override_flush_caches() {
  return array('cache_seckit_override');
}

/**
 * Implements hook_help().
 */
function seckit_override_help($path, $arg) {
  switch ($path) {
    // Main module help for the SecKit Override module.
    case 'admin/help/#seckit_override':
      return '<p>' . t('Override global Security Kit settings based on a URL pattern. Overrides are based on an inheritance model. If no overrides match a given URL, then the global settings will be used. If one or more overrides match, they will be applied in order to determine the final active settings.') . '</p>';

    // Main configuration page.
    case 'admin/config/system/seckit/override':
      return '<p>' . t('Security kit override rules are managed from this form. Rules are processed in the order shown. The order can be changed by dragging the rules into a new order and clicking "Save". Each time a page request is received by Drupal, it will be checked against each of the paths shown here. For each matching pattern, the corresponding settings will be overlaid on top of the existing settings.') . '</p>';

    // Edit settings.
    case 'admin/config/system/seckit/override/edit/%':
      return '<p>' . t('These settings correspond to the global Security Kit settings, except that all checkboxes have been replaced with dropdowns, and all dropdowns have an additional option, %inherit. If a drop down is set to %inherit, then it will keep the setting of the last rule, or the global setting if no prior rule changed the global setting. A similar process applies to text fields. If the field is left blank, then it will inherit the prior value. Placing any text into the field will override the value.', array('%inherit' => t('Inherit'))) . '</p>';
  }
}

/**
 * Finds all overrides that apply to a given path.
 */
function seckit_override_lookup_path($path) {
  $override_list = seckit_override_load();
  $result = NULL;

  foreach ($override_list as $target_path => $overrides) {
    // See if this row matches.
    if (drupal_match_path($path, $target_path)) {
      // Handle any overrides set by this record.
      foreach ($overrides as $override) {
        $result[$override['tree']] = $override['value'];
      }
    }
  }

  return $result;
}

/**
 * Loads all of the overrides into an array.
 */
function seckit_override_load() {
  $overrides = array();

  $query = db_select('seckit_override_path', 'p');
  $query->join('seckit_override_details', 'd', 'p.id = d.pid');

  $rows = $query
    ->fields('p', array('path', 'weight'))
    ->fields('d', array('tree', 'value'))
    ->orderBy('weight', 'ASC')
    ->execute()
    ->fetchAll();

  foreach ($rows as $row) {
    $overrides[$row->path][] = array(
      'tree' => $row->tree,
      'value' => $row->value,
    );
  }

  return $overrides;
}

/**
 * Gets a reference to an array element at an arbitrary depth.
 *
 * @param array $array
 *   A reference to an array to be searched.
 * @param array $tree
 *   The keys to navigate down in the source array.
 *
 * @return ref
 *   A reference to the array element keyed by $tree.
 */
function &seckit_override_find_reference(array &$array, array $tree) {
  $target =& $array;
  foreach ($tree as $index) {
    $target =& $target[$index];
  }

  return $target;
}
