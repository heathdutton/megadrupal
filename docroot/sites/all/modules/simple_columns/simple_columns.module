<?php

/**
 * Implements hook_menu().
 */
function simple_columns_menu() {
  $items = array();

  $items['admin/structure/simple-columns'] = array(
    'title' => 'Simple columns',
    'description' => 'Build Simple columns block.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simple_columns_admin_form'),
    'access arguments' => array('administer simple columns'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function simple_columns_permission() {
  return array(
    'administer simple columns' => array(
      'title' => t('Administer simple columns'),
    )
  );
}

/**
 * Edit columns form.
 */
function simple_columns_admin_form($form, &$form_state) {

  // Number of columns.
  $count = variable_get('simple_columns_count', 1);
  $form['simple_columns_count'] = array(
    '#type' => 'select',
    '#options' => array_combine(range(1, 10), range(1, 10)),
    '#title' => t('Number of columns:'),
    '#default_value' => $count,
    '#required' => TRUE,
  );

  // Simple columns.
  $columns_values = variable_get('simple_columns_columns', array());
  $form['simple_columns_columns'] = array(
    '#type' => 'fieldset',
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#tree' => TRUE,
  );
  for ($i = 0; $i < $count; ++$i) {
    $column_values = &$columns_values[$i];

    $form['simple_columns_columns'][$i] = array(
      '#type' => 'fieldset',
      '#title' => t('Column !nr', array('!nr' => $i + 1)),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );

    $form['simple_columns_columns'][$i]['title'] = array(
      '#type' => 'textfield',
      '#title' => t('Title'),
      '#default_value' => $column_values['title'],
    );

    $form['simple_columns_columns'][$i]['body'] = array(
      '#type' => 'text_format',
      '#title' => t('Body'),
      '#default_value' => $column_values['body']['value'],
      '#format' => (isset($column_values['body']['format']) ? $column_values['body']['format'] : filter_default_format()),
    );

    $form['simple_columns_columns'][$i]['links'] = array(
      '#type' => 'container',
      '#tree' => TRUE,
      '#language' => LANGUAGE_NONE,
    );
    $form['simple_columns_columns'][$i]['links'][LANGUAGE_NONE] = array(
      '#theme' => 'field_multiple_value_form',
      '#title' => t('Links'),
      '#cardinality' => FIELD_CARDINALITY_UNLIMITED,
      '#description' => '',
      '#language' => LANGUAGE_NONE,
    );
    // One link field by default.
    $links_count = 1;
    // If you have pressed add more button then display that amount of link fields.
    if (isset($form_state['link_field_counts'][$i])) {
      $links_count = $form_state['link_field_counts'][$i];
    }
    // Count the number of existing fields.
    elseif (isset($column_values['links'][LANGUAGE_NONE]) && count($column_values['links'][LANGUAGE_NONE]) >= 1) {
      // Filled fields puls one empty.
      $links_count = count($column_values['links'][LANGUAGE_NONE]) + 1;
    }
    // Save fields count for later additions.
    $form_state['link_field_counts'][$i] = $links_count;
    for ($l = 0; $l < $links_count; ++$l) {
      $form['simple_columns_columns'][$i]['links'][LANGUAGE_NONE][$l] = array(
        '#type' => 'link_field',
        '#weight' => $l,
        '#delta' => $l,
        '#language' => LANGUAGE_NONE,
        '#field_parents' => NULL,
        '#default_value' => $column_values['links'][LANGUAGE_NONE][$l],
      );
      $form['simple_columns_columns'][$i]['links'][LANGUAGE_NONE][$l]['_weight'] = array(
        '#type' => 'weight',
        '#title' => t('Weight for row @number', array('@number' => $l + 1)),
        '#title_display' => 'invisible',
        '#delta' => $links_count,
        '#default_value' => isset($form['simple_columns_columns'][$i]['links'][LANGUAGE_NONE]['_weight']) ? $form['simple_columns_columns'][$i]['links'][LANGUAGE_NONE][$l]['_weight'] : $l,
        '#weight' => 100,
      );
    }
    $form['simple_columns_columns'][$i]['links'][LANGUAGE_NONE]['add_more'] = array(
      '#type' => 'submit',
      '#name' => 'simple_columns_'.$i.'_links_add_more',
      '#value' => t('Add another item'),
      '#attributes' => array('class' => array($i.'-links')),
      '#submit' => array('simple_columns_add_more_add_one'),
    );
  }

  // Order by weight and remove empty.
  $form['#validate'][] = 'simple_columns_admin_save_fixes';
  // Save fields.
  $form = system_settings_form($form);
  // Clear cache so simple_columns_variable_type_info() gets reloaded for options update.
  $form['#submit'][] = 'variable_cache_clear';

  return $form;
}

/**
 * Alter links on save to remove empty content and have the right order.
 */
function simple_columns_admin_save_fixes($form, &$form_state) {

  $form_state['values']['simple_columns_columns'] = $form_state['input']['simple_columns_columns'];

  // Iterate through each column.
  foreach ($form_state['values']['simple_columns_columns'] as &$column) {
    // Iterate through each link.
    foreach ($column['links'][LANGUAGE_NONE] as $key => &$values) {
      // Trim values.
      foreach ($values as &$value) {
        $value = trim($value);
      }
      // Remove empty results.
      if ((bool)drupal_strlen($values['title'].$values['url']) === FALSE) {
        unset($column['links'][LANGUAGE_NONE][$key]);
      }
    }

    // Keys by order.
    $column['links'][LANGUAGE_NONE] = array_values($column['links'][LANGUAGE_NONE]);

  }
  $form_state['executed'] = TRUE;
}

function simple_columns_add_more_add_one($form, &$form_state) {
  $form_state['link_field_counts'][$form_state['triggering_element']['#parents'][1]]++;
  $form_state['rebuild'] = TRUE;
}

/**
 * Implements hook_variable_type_info().
 */
function simple_columns_variable_type_info() {
  $type = array();

  $type['simple_columns'] = array(
    'title' => t('Simple columns'),
    'type' => 'select',
    'options' => array_combine(range(1, 10), range(1, 10)),
  );

  return $type;
}

/**
 * Implements hook_variable_group_info().
 */
function simple_columns_variable_group_info() {
  $groups = array();

  $groups['simple_columns'] = array(
    'title' => t('Simple columns'),
  );

  return $groups;
}

/**
 * Implements hook_variable_info().
 */
function simple_columns_variable_info($options) {
  $variable = array();

  $variable['simple_columns_count'] = array(
    'title' => t('Number of columns', array(), $options),
    'type' => 'number',
    'default' => 1,
    'element' => array(
      '#type' => 'select',
      '#options' => array_combine(range(1, 10), range(1, 10)),
      '#required' => TRUE,
      '#size' => 1,
    ),
    'group' => 'simple_columns',
    'localize' => TRUE,
  );

  $variable['simple_columns_columns'] = array(
    'title' => t('Columns', array(), $options),
    'type' => 'multiple',
    'multiple' => 'simple_columns',
    'repeat' => array(
      'type' => 'array',
      'default' => array(),
    ),
    'group' => 'simple_columns',
    'localize' => TRUE,
  );

  return $variable;
}

/**
 * Implements hook_block_info().
 */
function simple_columns_block_info() {
  $blocks = array();

  $blocks['simple_columns'] = array(
    'info' => t('Simple columns'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function simple_columns_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'simple_columns':

      $block['subject'] = t('Simple columns');

      $columns = variable_get('simple_columns_columns', array());
      foreach ($columns as &$column) {
        $column['links'][LANGUAGE_NONE] = array_reverse($column['links'][LANGUAGE_NONE]);
      }
      $block['content'] = theme('simple_columns_block', array('block_items' => $columns));

      break;
  }

  return $block;
}

/**
 * Implements hook_contextual_links_view_alter().
 *
 * Contextual links for simple colunms block.
 */
function simple_columns_contextual_links_view_alter(&$element, $items) {
  if ($element['#element']['#block']->module === 'simple_columns') {
    $element['#links']['simple-columns'] = array(
      'title' => t('Simple columns'),
      'href' => 'admin/structure/simple-columns',
      'query' => drupal_get_destination(),
    );
  }
}

/**
 * Implements hook_theme().
 */
function simple_columns_theme() {
  $theme = array();

  $theme['simple_columns_block'] = array(
    'variables' => array(
      'block_items' => NULL,
    ),
    'template'  => 'simple_columns_block',
  );

  return $theme;
}
