<?php

/**
 * @file
 * Populate Flickr Gallery filter sets based on galleries in a collection.
 */


/**
 * Implements hook_menu().
 */
function flickrcollection_menu() {
  $items = array();

  $items['admin/config/media/flickrcollection'] = array(
    'title' => 'FlickrCollection',
    'description' => 'Configure Collection ID for FlickrCollection',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('flickrcollection_collection_form'),
    'access arguments' => array('administer flickr settings'),
    'file' => 'flickrcollection.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}


/**
 * Implements hook_hook_info().
 */
function flickrcollection_hook_info() {
  return array(
    'flickrcollection_sets' => array(
      'group' => 'flickrcollection',
    ),
    'flickrcollection_collection_alter' => array(
      'group' => 'flickrcollection',
    ),
  );
}


/**
 * Get sets from collection.
 *
 * Based on the code from theme_flickrgallery_set().
 *
 * @see theme_flickrgallery_set()
 */
function flickrcollection_get_sets_from_collection() {
  // Require FlickrAPI.
  module_load_include('module', 'flickrapi');

  // Create Flickr object.
  libraries_load('phpFlickr');
  $f = new phpFlickr(variable_get('flickrapi_api_key', NULL), variable_get('flickrapi_api_secret', NULL));

  $collection_id = variable_get('flickrcollection_collection_id', FALSE);

  if (!$collection_id) {
    return;
  }

  // Get Flickr User info and User ID.
  $flickr_user = $f->people_getInfo(variable_get('flickrgallery_userID', NULL));
  $flickr_uid = $flickr_user['id'];

  $collections = $f->collections_getTree($collection_id, $flickr_uid);

  drupal_alter('flickrcollection_collection', $collections);

  $sets = array();
  if ($collections['stat'] == 'ok' && is_array($collections['collections']['collection'][0]['set'])) {
    foreach ($collections['collections']['collection'][0]['set'] as $set) {
      $sets[] = $set['id'];
    }
    variable_set('flickrgallery_displaysets_bool', TRUE);
    variable_set('flickrgallery_displaysets_values', implode("\n", $sets));
  }

  module_invoke_all('flickrcollection_sets', $sets);
}


/**
 * Implements hook_form_FORM_ID_alter() for flickrgallery_settings_form().
 *
 * When a collection ID has been configured disable the sets field on the
 * flickrgallery settings.
 */
function flickrcollection_form_flickrgallery_settings_form_alter(&$form, &$form_state, $form_id) {
  if (variable_get('flickrcollection_collection_id')) {
    $form['flickrgallery_displaysets_bool']['#disabled'] = TRUE;
    $form['flickrgallery_displaysets_values']['#disabled'] = TRUE;
    $form['flickrgallery_displaysets_values']['#description'] = t('Disabled because a !collection-id specifies which sets to display.', array('!collection-id' => l(t('Collection ID'), 'admin/config/media/flickrcollection')));
  }
}


/**
 * Implements hook_cron().
 *
 * On cron runs update the list of sets in the collection.
 *
 * @see flickrcollection_cronapi()
 */
function flickrcollection_cron() {
  flickrcollection_get_sets_from_collection();
}
