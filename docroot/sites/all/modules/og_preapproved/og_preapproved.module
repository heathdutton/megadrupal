<?php
/**
 * @file
 * Adds a field to OG group types to allow for a preapproved list of email
 * address to be entered.
 */
/**
 * Implements hook_field_info().
 */
function og_preapproved_field_info() {
  return array(
    'bulk_email' => array(
      'label' => t('Email (Bulk)'),
      'description' => t('This field validates and stores a block of email addresses.'),
      'settings' => array('max_length' => ''),
      'instance_settings' => array('text_processing' => 0),
      'default_widget' => 'bulk_email_textarea',
      'default_formatter' => 'bulk_email_default',
    ),
  );
}

/**
 * Implements hook_field_settings_form().
 */
function og_preapproved_field_settings_form($field, $instance, $has_data) {
  $settings = $field['settings'];
  $form = array();

  switch ($field['type']) {
    case 'group_preapproved':
      $form['auto_join'] = array(
        '#type' => 'textfield',
        '#title' => t('Maximum length'),
        '#default_value' => $settings['auto_join'],
        '#required' => FALSE,
      );
      break;
  }

  return $form;
}

/**
 * Implements hook_field_validate().
 */
function og_preapproved_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    // Preg_split more reliable than split to eliminate empty array elements
    $emails = preg_split('/[\n\r]+/', $item['emails']);

    foreach ($emails as $email) {
      if ($email = trim($email)) {
        $args = array('%email' => $email);

        // portion of validation logic copied from _user_edit_validate()
        if (!valid_email_address($email) && !og_preapproved_valid_domain($email)) {
          $errors[$field['field_name']][$langcode][$delta][] = array(
            'error' => 'og_preapproved_invalid_email',
            'message' => t('The e-mail address or domain %email is not valid.', $args),
          );
        }
        elseif (db_select('users', 'u')->condition('u.mail', $email)->fields('u')->execute()->rowCount()) {
          $errors[$field['field_name']][$langcode][$delta][] = array(
            'error' => 'og_preapproved_already_registered',
            'message' => t('The e-mail address %email is already registered.', $args),
          );
        }
        elseif (drupal_strlen($email) > EMAIL_MAX_LENGTH) {
          $errors[$field['field_name']][$langcode][$delta][] = array(
            'error' => 'og_preapproved_invalid_email_length',
            'message' => t('The e-mail address or domain %email cannot not exceed !maxlength characters.', array('%email' => $email, '!maxlength' => EMAIL_MAX_LENGTH)),
          );
        }
      }
    }
  }
}

/**
 * Implements hook_field_widget_error().
 */
function og_preapproved_field_widget_error($element, $error, $form, &$form_state) {
  form_error($element, $error['message']);
}

/**
 * Implements hook_content_is_empty().
 */
function og_preapproved_field_is_empty($item, $field) {
  if (empty($item['emails'])) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_field_widget_info().
 */
function og_preapproved_field_widget_info() {
  return array(
    'bulk_email_textarea' => array(
      'label' => t('Bulk e-mail text field'),
      'field types' => array('bulk_email'),
      'settings' => array('rows' => 10),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function og_preapproved_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $base) {
  $element = $base;
  $element['emails'] = $base + array(
    '#type' => 'textarea',
    '#default_value' => isset($items[$delta]['emails']) ? $items[$delta]['emails'] : NULL,
    '#rows' => $instance['widget']['settings']['rows'],
    '#prefix' => '<div class="textarea-full-wrapper">',
    '#suffix' => '</div>',
  );
  return $element;
}

/**
 * Implements hook_field_formatter_info().
 *
 */
function og_preapproved_field_formatter_info() {
  $formats = array(
    'bulk_email_default' => array(
      'label' => t('Bulk E-mails'),
      'description' => t('Display the email addresses one per line.'),
      'field types' => array('emails'),
    ),
  );
  return $formats;
}

/**
 * Implements hook_field_formatter_view().
 */
function og_preapproved_field_formatter_view($object_type, $object, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'bulk_email_default':
      foreach ($items as $delta => $item) {
        $output = nl2br($item['emails']);
        $element[$delta] = array('#markup' => $output);
      }
      break;
  }
  return $element;
}

/**
 * Implements hook_user_presave().
 *
 * We process the user here instead of hook_user_insert so we have access
 * to the STATUS attribute to approve the user.  This is already set by the time
 * hook_user_insert is called.
 */
function og_preapproved_user_presave(&$edit, $account, $category) {
  // Only process new user accounts.
  if ($account->is_new && $category == 'account') {

    // Load the data from the user's chosen group and see if they are on the
    // pre-approved list.
    $groups = field_get_items('user', $account, 'group_audience');
    foreach ($groups as $group) {
      $og = og_load($group['gid']);
      $node = node_load($og->etid);

      $preapproved = field_get_items('node', $node, 'group_preapproved');
      if ($empty($preapproved)) {
        foreach ($preapproved as $bulk) {
          $emails = preg_split('/[\n\r]+/', $bulk['emails']);
          foreach ($emails as $email) {
            if ($email = trim($email)) {
              if ((stripos($email, '@') == 0 && stristr($edit['mail'], $email)) || $edit['mail'] == $email) {
                // Approve the user.
                $edit['status'] = TRUE;

                // @TODO: Set the appropriate OG status.
              }
            }
          }
        }
      }
    }
  }
}

/**
 * Provide information about fields that are related to Organic groups.
 *
 * Using this info, Organic groups is aware of the fields, and allows adding
 * them to the correct bundle.
 *
 * - type: Array with the values "group" and/ or "group content". To define to
 *   which bundles the field may be attached.
 * - Description: The description of the field.
 * - field: The field info array as will be passed to field_create_field().
 * - instance: The field instance array as will be passed to
 *   field_info_instance().
 * - entity type: Optional; Array of the entity types this field can be attached
 *   to. The field will not be attachable to other entity types. Defaults to
 *   empty array.
 * - disable on node translate: Optional; If set to TRUE then on translated
 *   node, the field will be un-editable, and a message will be shown that the
 *   field can be only edited via the source node. Defaults to TRUE.
 */
function og_preapproved_og_fields_info() {
  $items = array();
  $items['group_preapproved'] = array(
    'type' => array('group'),
    'label' => t('Group Pre-approved Members'),
    'description' => t('Preapprove e-mail addresses for members to join this group.'),
    'field' => array(
      'field_name' => 'group_preapproved',
      'no_ui' => TRUE,
      'type' => 'bulk_email',
      'cardinality' => 1,
      'settings' => array(
        'auto_join' => FALSE,
      ),
      'instance_settings' => array(
        'auto_join' => FALSE,
      ),
    ),
    'instance' => array(
      'label' => t('Group Pre-approved Members'),
      'description' => t('Enter a list of pre-approved e-mail addresses or domain names (beginning with @).'),
      'widget_type' => 'text_textarea',
      'required' => FALSE,
      // Make the group type default.
      'default_value' => NULL,
      'view modes' => array(
        'full' => array(
          'label' => 'above',
          'settings' => array(),
          'type' => 'hidden',
        ),
        'teaser' => array(
          'label' => 'above',
          'settings' => array(),
          'type' => 'hidden',
        ),
      ),
      'settings' => array(
        'text_processing' => '0',
      ),
      'widget' => array(
        'settings' => array(
          'rows' => '10',
        ),
      ),
    ),
  );
  return $items;
}

/**
 * Copy of valid_email_address(), but without user name.
 * Validate everything after and including the @ symbol.
 * Exp. @domain.com
 *
 * @param $mail
 *   Email address to validate.
 *
 * @return boolean
 */
function og_preapproved_valid_domain($mail) {
  $domain = '(?:(?:[a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.?)+';
  $ipv4 = '[0-9]{1,3}(\.[0-9]{1,3}){3}';
  $ipv6 = '[0-9a-fA-F]{1,4}(\:[0-9a-fA-F]{1,4}){7}';

  return preg_match("/^@($domain|(\[($ipv4|$ipv6)\]))$/", $mail);
}
