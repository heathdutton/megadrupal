<?php

/**
 * @file
 * Pin It Settings and Edit Form.
 */

require_once 'pinit.class.inc';

/**
 * Implements of hook_menu().
 */
function pinit_menu() {
  $admin_access = array(PINIT_PERM_ADMIN);

  $items['admin/config/content/pinit'] = array(
    'title' => 'Pin It Button',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pinit_settings_form'),
    'description' => 'Configure Pin It Button for Sharing.',
    'access arguments' => $admin_access,
    'file' => 'pinit.admin.inc',
    'menu_name' => 'management',
  );

  return $items;
}

/**
 * Implements of hook_form_alter().
 */
function pinit_form_alter(&$form, $form_state, $form_id) {
  // If editing a node.
  if ('node_form' == stristr($form_id, 'node_form')) {

    $node = $form['#node'];
    // Check that pins are enabled for this type and that user has permission.
    if (!PinIt::instance()->pinsAreEnabledForContentType($node->type) || !user_access(PINIT_PERM_EDIT)) {
      return;
    }

    $pin_count = array(
      'horizontal' => t('Horizontal'),
      'vertical' => t('Vertical'),
      'none' => t('No count'),
    );

    // Add meta tags editing for making it easier to share on Facebook.
    $form['pinit'] = array(
      '#type' => 'fieldset',
      '#title' => t('Pin It Button'),
      '#description' => t('Here you can specify the exact summary text for this node as it will appear when shared on Pinterest'),
      '#tree' => TRUE,
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#weight' => 100,
      PinIt::PINCOUNT => array(
        '#title' => t('Pin Count'),
        '#type' => 'select',
        '#options' => $pin_count,
        '#default_value' => variable_get(PINIT_VAR_DEFAULT_PINCOUNT, ''),
      ),
      PinIt::DESCRIPTION => array(
        '#title' => t('Description'),
        '#type' => 'textarea',
        '#default_value' => !empty($node->pinit) ? $node->pinit[PinIt::DESCRIPTION] : '',
        '#description' => t('The summary of the node or title.'),
      ),
    );

    // If we have images in this node then show thumbnail selector.
    $images = PinIt::instance()->harvestImagesFromNode($node);
    $default_value = '';
    if (!empty($images)) {
      $image_selector_options = array();
      foreach ($images as $image) {
        $image_selector_options[$image['url']] = PinItDrupalLayer::themeSelectorImage($image);
      }

      // If the image is not selected, we will use the first image.
      $pinit = $node->pinit;
      if (!empty($node->url)) {
        $default_value = $node->pinit;
      }
      else {
        list($default_value, $img) = each($image_selector_options);
      }

      // The form.
      $form['pinit'][PinIt::IMAGE] = array(
        '#title' => t('Thumbnail image'),
        '#type' => 'radios',
        //'#default_value' => !empty($node->pinit) ? $node->pinit[PinIt::IMAGE] : '',
        '#default_value' => $default_value,
        '#description' => t('The thumbnail image that will get shown. If left unset then then the first available image will be used. If none available then the global fallback image will be used.'),
        '#options' => $image_selector_options,
        '#attributes' => array('class' => array('pinit-thumbs-wrapper', 'clearfix')),
      );
    }
  }
}

require_once 'pinit.hooks.inc';
