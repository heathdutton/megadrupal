<?php

/**
 * @defgroup hide_node_links Hide Node Links: Show / Hide node links on per node basis.
 *
 * The Hide Node Links module allows node links to be shown or hidden on a per
 * node basis.
 *
 * @author Tom Kirkpatrick (mrfelton), www.systemseed.com
 */

/**
 * @file
 * Main file for the Hide Node Links module,
 *
 * @ingroup hide_node_links
 */

/**
 * The default inclusion status for node links.
 */
define('HIDE_NODE_LINKS_STATUS_DEFAULT', 0);

/**
 * Implements hook_hook_info().
 */
function hide_node_links_hook_info() {
  $hooks = array(
    'hide_node_links_link_info',
    'hide_node_links_link_info_alter',
  );

  $hooks = array_combine($hooks, $hooks);
  foreach ($hooks as $hook => $info) {
    $hooks[$hook] = array('group' => 'hide_node_links');
  }

  return $hooks;
}

/**
 * Implements hook_entity_info_alter().
 */
function hide_node_links_entity_info_alter(array &$entity_info) {
  $entity_info['node']['label'] = t('Content');
  $entity_info['node']['bundle label'] = t('Content type');
  $entity_info['node']['hide_node_links'] = array(
    'process callback' => 'hide_node_links_hide_node_links_process_node_links',
  );
}

/**
 * Implements hook_permission().
 */
function hide_node_links_permission() {
  return array(
    'hide node links' => array(
      'title' => t('Hide node links'),
      'description' => t('Hide node links on a per node basis.'),
    ),
  );
}

/**
 * Implements hook_field_extra_fields().
 */
function hide_node_links_field_extra_fields() {
  $extras = array();
  foreach (node_type_get_names() as $type => $name) {
    $extras['node'][$type]['form']['hide_node_links'] = array(
      'label' => t('Hide node links'),
      'description' => t('Hide node links module element'),
      'weight' => 30,
    );
  }
  return $extras;
}

/**
 * Process hide node links settings.
 *
 * @param $nids
 *   An array of node IDs.
 */
function hide_node_links_hide_node_links_process_node_links(array $nids) {
  $nodes = node_load_multiple($nids);
  foreach ($nodes as $node) {
    $link = hide_node_links_create_link($node);
    hide_node_links_link_save($link);
  }
}

/**
 * Implements hook_node_load().
 */
function hide_node_links_node_load($nodes) {
  $ids = array();
  foreach ($nodes as $nid => $node) {
    array_push($ids, $nid);
  }
  $links = hide_node_links_link_load_multiple(array('type' => 'node', 'id' => array($ids, 'IN')));
  foreach ($nodes as $nid => $node) {
    foreach ($links as $link) {
      if ($link['id'] == $nid) {
        $nodes[$nid]->hide_node_links = $link;
        continue;
      }
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function hide_node_links_node_insert(stdClass $node) {
  hide_node_links_node_update($node);
}

/**
 * Implements hook_node_update().
 */
function hide_node_links_node_update(stdClass $node) {
  $link = hide_node_links_create_link($node);
  hide_node_links_link_save($link);
}

/**
 * Implements hook_node_delete().
 */
function hide_node_links_node_delete(stdClass $node) {
  hide_node_links_link_delete('node', $node->nid);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @see node_type_form()
 * @see hide_node_links_add_link_bundle_settings()
 */
function hide_node_links_form_node_type_form_alter(array &$form, array $form_state) {
  $node_type = isset($form['#node_type']->type) ? $form['#node_type']->type : '';
  module_load_include('inc', 'hide_node_links', 'hide_node_links.admin');
  hide_node_links_add_link_bundle_settings($form, $form_state, 'node', $node_type);
}

/**
 * Implements hook_form_alter().
 *
 * Add the Node type individual link options for a node.
 *
 * @see hide_node_links_add_form_link_options()
 */
function hide_node_links_form_node_form_alter(array &$form, array &$form_state) {
  // Add the link options.
  module_load_include('inc', 'hide_node_links', 'hide_node_links.admin');
  hide_node_links_add_form_link_options($form, 'node', $form['type']['#value'], $form['nid']['#value']);
  $form['hide_node_links']['#weight'] = 30;
}

/**
 * Create a node link settings array from a node.
 *
 * The link will be saved as $node->hide_node_links.
 *
 * @param $node
 *   A node object.
 */
function hide_node_links_create_link(stdClass $node) {
  if (!isset($node->hide_node_links) || !is_array($node->hide_node_links)) {
    $node->hide_node_links = array();
    if ($node->nid && $link = hide_node_links_link_load('node', $node->nid)) {
      $node->hide_node_links = $link;
    }
  }

  $settings = hide_node_links_link_bundle_load('node', $node->type);
  $uri = entity_uri('node', $node);

  $node->hide_node_links += array(
    'type' => 'node',
    'id' => $node->nid,
    'subtype' => $node->type,
    'status' => $settings['status'],
    'status_default' => $settings['status'],
    'status_override' => 0,
  );

  return $node->hide_node_links;
}



function hide_node_links_process_form_link_options($form, &$form_state) {
  $link = &$form_state['values']['hide_node_links'];
  $fields = array('status' => HIDE_NODE_LINKS_STATUS_DEFAULT);

  foreach ($fields as $field => $default) {
    if ($link[$field] === 'default') {
      $link[$field] = isset($link[$field . '_default']) ? $link[$field . '_default'] : $default;
      $link[$field . '_override'] = 0;
    }
    else {
      $link[$field . '_override'] = 1;
    }
  }
}

function hide_node_links_link_bundle_settings_form_submit($form, &$form_state) {
  $entity = $form['hide_node_links']['#entity'];
  $bundle = $form['hide_node_links']['#bundle'];

  // Handle new bundles by fetching the proper bundle key value from the form
  // state values.
  if (empty($bundle)) {
    $entity_info = $form['hide_node_links']['#entity_info'];
    if (isset($entity_info['bundle keys']['bundle'])) {
      $bundle_key = $entity_info['bundle keys']['bundle'];
      if (isset($form_state['values'][$bundle_key])) {
        $bundle = $form_state['values'][$bundle_key];
        $form['hide_node_links']['#bundle'] = $bundle;
      }
    }
  }

  hide_node_links_link_bundle_settings_save($entity, $bundle, $form_state['values']['hide_node_links']);

  $entity_info = $form['hide_node_links']['#entity_info'];
  if (!empty($form['hide_node_links']['#show_message'])) {
    drupal_set_message(t('Node links settings for the @bundle-label %bundle have been saved.', array('@bundle-label' => drupal_strtolower($entity_info['bundle label']), '%bundle' => $entity_info['bundles'][$bundle]['label'])));
  }

  // Unset the form values since we have already saved the bundle settings and
  // we don't want these values to get saved as variables in-case this form
  // also uses system_settings_form().
  unset($form_state['values']['hide_node_links']);
}


/**
 * Returns information about supported hide node link types.
 *
 * @param $type
 *   (optional) The link type to return information for. If omitted,
 *   information for all link types is returned.
 * @param $reset
 *   (optional) Boolean whether to reset the static cache and do nothing. Only
 *   used for tests.
 *
 * @see hook_hide_node_links_link_info()
 * @see hook_hide_node_links_link_info_alter()
 */
function hide_node_links_get_link_info($type = NULL, $reset = FALSE) {
  $link_info = &drupal_static(__FUNCTION__);

  if ($reset) {
    $link_info = NULL;
    cache_clear_all('hide_node_links:link_info', 'cache', TRUE);
  }

  if (!isset($link_info)) {
    $cid = 'hide_node_links:link_info';
    if ($cache = cache_get($cid)) {
      $link_info = $cache->data;
    }
    else {
      entity_info_cache_clear();
      $link_info = entity_get_info();
      foreach ($link_info as $key => $info) {
        if (!isset($info['hide_node_links'])) {
          // Remove any un-supported entites.
          unset($link_info[$key]);
        }
      }
      $link_info = array_merge($link_info, module_invoke_all('hide_node_links_link_info'));
      foreach ($link_info as $key => &$info) {
        $info += array(
          'type' => $key,
          'base table' => FALSE,
          'bundles' => array(),
          'hide_node_links' => array(),
        );
        foreach ($info['bundles'] as $bundle => &$bundle_info) {
          $bundle_info += array(
            'hide_node_links' => array(),
          );
          $bundle_info['hide_node_links'] += hide_node_links_link_bundle_load($key, $bundle, FALSE);
        }
      }
      drupal_alter('hide_node_links_link_info', $link_info);
      ksort($link_info);

      cache_set($cid, $link_info);
    }
  }

  if (isset($type)) {
    return isset($link_info[$type]) ? $link_info[$type] : NULL;
  }

  return $link_info;
}

function hide_node_links_link_bundle_settings_save($entity, $bundle, array $settings, $update_links = TRUE) {
  if ($update_links) {
    $old_settings = hide_node_links_link_bundle_load($entity, $bundle);
    if ($settings['status'] != $old_settings['status']) {
      hide_node_links_link_update_multiple(array('status' => $settings['status']), array('type' => $entity, 'subtype' => $bundle, 'status_override' => 0));
    }
  }

  variable_set("hide_node_links_settings_{$entity}_{$bundle}", $settings);
  cache_clear_all('hide_node_links:link_info:', 'cache', TRUE);
  //hide_node_links_get_link_info(NULL, TRUE);
}

function hide_node_links_link_bundle_rename($entity, $bundle_old, $bundle_new) {
  if ($bundle_old != $bundle_new) {
    $settings = hide_node_links_link_bundle_load($entity, $bundle_old);
    variable_del("hide_node_links_settings_{$entity}_{$bundle_old}");
    hide_node_links_link_bundle_settings_save($entity, $bundle_new, $settings, FALSE);
    hide_node_links_link_update_multiple(array('subtype' => $bundle_new), array('type' => $entity, 'subtype' => $bundle_old));
  }
}

/**
 * Rename a link type.
 */
function hide_node_links_link_type_rename($entity_old, $entity_new, $bundles = NULL) {
  $variables = db_query("SELECT name FROM {variable} WHERE name LIKE :pattern", array(':pattern' => db_like('hide_node_links_settings_' . $entity_old . '_') . '%'))->fetchCol();
  foreach ($variables as $variable) {
    $value = variable_get($variable);
    variable_del($variable);
    if (isset($value)) {
      $variable_new = str_replace('hide_node_links_settings_' . $entity_old, 'hide_node_links_settings_' . $entity_new, $variable);
      variable_set($variable_new, $value);
    }
  }

  hide_node_links_link_update_multiple(array('type' => $entity_new), array('type' => $entity_old), FALSE);
  hide_node_links_get_link_info(NULL, TRUE);
}

function hide_node_links_link_bundle_load($entity, $bundle, $load_bundle_info = TRUE) {
  $info = array(
    'entity' => $entity,
    'bundle' => $bundle,
  );
  if ($load_bundle_info) {
    $entity_info = hide_node_links_get_link_info($entity);
    if (isset($entity_info['bundles'][$bundle])) {
      $info['info'] = $entity_info['bundles'][$bundle];
    }
  }
  $info += variable_get("hide_node_links_settings_{$entity}_{$bundle}", array());
  $info += array(
    'status' => HIDE_NODE_LINKS_STATUS_DEFAULT,
  );
  return $info;
}

function hide_node_links_link_bundle_delete($entity, $bundle, $delete_links = TRUE) {
  variable_del("hide_node_links_settings_{$entity}_{$bundle}");
  if ($delete_links) {
    hide_node_links_link_delete_multiple(array('type' => $entity, 'subtype' => $bundle));
  }
  cache_clear_all('hide_node_links:link_info:', 'cache', TRUE);
  //hide_node_links_get_link_info(NULL, TRUE);
}

function hide_node_links_get_bundle_path($entity, $bundle) {
  $info = hide_node_links_get_link_info($entity);

  if (!empty($info['bundles'][$bundle]['admin']['real path'])) {
    return $info['bundles'][$bundle]['admin']['real path'];
  }
  elseif (!empty($info['bundles'][$bundle]['admin']['path'])) {
    return $info['bundles'][$bundle]['admin']['path'];
  }
  else {
    return FALSE;
  }
}

/**
 * Implements hook_field_attach_rename_bundle().
 */
function hide_node_links_field_attach_rename_bundle($entity_type, $bundle_old, $bundle_new) {
  hide_node_links_link_bundle_rename($entity_type, $bundle_old, $bundle_new);
}

/**
 * Implements hook_field_attach_delete_bundle().
 */
function hide_node_links_field_attach_delete_bundle($entity_type, $bundle, $instances) {
  hide_node_links_link_bundle_delete($entity_type, $bundle, TRUE);
}

/**
 * Delete a specific hide node link setting from the database.
 *
 * @param $entity_type
 *   A string with the entity type.
 * @param $entity_id
 *   An integer with the entity ID.
 * @return
 *   The number of links that were deleted.
 */
function hode_node_links_link_delete($entity_type, $entity_id) {
  $conditions = array('type' => $entity_type, 'id' => $entity_id);
  return hide_node_links_link_delete_multiple($conditions);
}

/**
 * Delete multiple hide node link settings from the database.
 *
 * @param $conditions
 *   An array of conditions on the {hode_node_links} table in the form
 *   'field' => $value.
 * @return
 *   The number of links that were deleted.
 */
function hide_node_links_link_delete_multiple(array $conditions) {
  $query = db_delete('hode_node_links');
  foreach ($conditions as $field => $value) {
    $query->condition($field, $value);
  }

  return $query->execute();
}

/**
 * Load a specific hide node link setting from the database.
 *
 * @param $entity_type
 *   A string with the entity type.
 * @param $entity_id
 *   An integer with the entity ID.
 * @return
 *   A hide node links array or FALSE if the conditions were not found.
 */
function hide_node_links_link_load($entity_type, $entity_id) {
  $link = hide_node_links_link_load_multiple(array('type' => $entity_type, 'id' => $entity_id));
  return $link ? reset($link) : FALSE;
}

/**
 * Load hide node links settings from the database.
 *
 * @param $conditions
 *   An array of conditions on the {hide_node_links} table in the form
 *   'field' => $value.
 * @return
 *   An array of hide node links setting arrays.
 */
function hide_node_links_link_load_multiple(array $conditions = array()) {
  $query = db_select('hide_node_links');
  $query->fields('hide_node_links');

  foreach ($conditions as $field => $value) {
    if (is_array($value)) {
      list($value, $operator) = $value;
      $query->condition($field, $value, $operator);
    }
    else {
      $query->condition($field, $value);
    }
  }

  $links = $query->execute()->fetchAll(PDO::FETCH_ASSOC);

  return $links;
}

/**
 * Saves or updates a hide node links setting.
 *
 * @param $link
 *   An hide node links settings array.
 */
function hide_node_links_link_save(array $link) {
  $link += array(
    'status' => 1,
    'status_override' => 0,
  );

  // Allow other modules to alter the link before saving.
  drupal_alter('hide_node_links_link', $link);

  $existing = db_query_range("SELECT status FROM {hide_node_links} WHERE type = :type AND id = :id", 0, 1, array(':type' => $link['type'], ':id' => $link['id']))->fetchAssoc();

  if ($existing) {
    drupal_write_record('hide_node_links', $link, array('type', 'id'));
  }
  else {
    drupal_write_record('hide_node_links', $link);
  }

  // Allow other modules to respond after saving the link.
  //module_invoke_all('hide_node_links_save_link', $link);

  return $link;
}

/**
 * Perform a mass update of hide_node_links data.
 *
 * @param $updates
 *   An array of values to update fields to, keyed by field name.
 * @param $conditions
 *   An array of values to match keyed by field.
 * @return
 *   The number of links that were updated.
 */
function hide_node_links_link_update_multiple($updates = array(), $conditions = array(), $check_flag = TRUE) {
  $query = db_update('hide_node_links');
  $query->fields($updates);
  foreach ($conditions as $field => $value) {
    $query->condition($field, $value);
  }

  return $query->execute();
}

/*
 * Implemtation of hook_link_alterform_alter().
 */
function hide_node_links_preprocess_node(&$vars) {
  if (isset($vars['hide_node_links']) && $vars['hide_node_links']['status']) {
    unset($vars['content']['links']);
  }
}