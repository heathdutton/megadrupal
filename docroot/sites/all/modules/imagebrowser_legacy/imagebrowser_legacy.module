<?php
/**
 * Permissions.
 */
/**
 * Implement hook_permission().
 */
function imagebrowser_legacy_permission() {
  return array(
    'view images' => array(
      'title' => t('View images'),
      'description' => t('View image files.'), // @TODO better description
    ),
  );
}
/**
 * @file
 * Image Browser Legacy main module file.
 */
function imagebrowser_legacy_menu() {
  $items = array();
  // Request image details (AJAX - JSON)
  $items['imagebrowser_legacy/ajax'] = array(
    'title' => 'Image Browser Legacy Ajax call',
    'description' => 'Ajax Callback for getting images',
    'page callback' => 'imagebrowser_legacy_ajax',
    'access callback' => 'user_access',
    'access arguments' => array('view images'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}
/**
 * Implements hook_filter_info().
 */
function imagebrowser_legacy_filter_info() {
  $filters['imagebrowser_legacy'] = array(
    'title' => t('Image Browser Legacy'),
    'description' => t('Display Image Browser images.'),
    'process callback' => '_imagebrowser_legacy_process',
//     'settings callback' => 'wysiwyg_filter_filter_wysiwyg_settings',
//     'tips callback' => 'wysiwyg_filter_filter_wysiwyg_tips',
//     'default settings' => $defaults
  );
  return $filters;
}
/**
 * Implements hook_filter_FILTER_process
 */
function _imagebrowser_legacy_process($text, $filter) {
  $processed = FALSE;
  foreach (imagebrowser_legacy_get_tags($text) as $unexpanded_macro => $macro) {
    $expanded_macro = imagebrowser_legacy_render_tag($macro);
    $text = str_replace($unexpanded_macro, $expanded_macro, $text);
  }
  return $text;

}
function imagebrowser_legacy_get_tags($text) {
  $m = array();
  preg_match_all('/ \[ ( [^\[\]]+ )* \] /x', $text, $matches);
  // Don't process duplicates.
  $tag_match = (array) array_unique($matches[1]);
  
  foreach ($tag_match as $macro) {
    $current_macro = '['. $macro .']';
    $param = array_map('trim', explode('==', $macro));
    // The first macro param is assumed to be the function name.
    $func_name = array_shift($param);
    if ($func_name == 'ibimage') {
      // The full unaltered filter string is the key for the array of filter attributes.
      $m[$current_macro] = implode('==', $param);
    }
  }
  
  return $m;
}

/**
 * Returned an image rendered from a tag
 */
function imagebrowser_legacy_render_tag($rawtag) {
  // Get attributes
  $attr = imagebrowser_legacy_decode_tag($rawtag);
  // Create Image
//   $image = theme('image', $attr['preset'], $attr['filepath'], 'File' .' '. $attr['fid'], NULL, array('class'=>'ibimage '.$attr['styles']));
//   $attr['style_name'] = $attr['preset'];
//   $attr['path'] = $attr['filepath'];
  $attr['path'] = $attr['image_url'];
  $attr['attributes'] = array('class'=>'ibimage '.$attr['styles']);
  
  $image = theme('image', $attr);
  return theme_ibimage($image, $attr['link_url'], $attr['link_target']);
}

/**
 * Decode a tag.
 */
function imagebrowser_legacy_decode_tag($rawtag) {
  $tag = array();
  // {FID}=={PRESET_NAME}=={LINK_PRESET_NAME/URL}=={LINK_TARGET}=={STYLES}
  $attr = array_map('trim', explode('==', $rawtag));
  
  $tag['fid'] = $attr[0];
  $tag['preset'] = $attr[1];
  $tag['link_preset'] = $attr[2];
  $tag['link_target'] = $attr[3];
  $tag['styles'] = $attr[4];
  
  $tag['styles'] = str_replace(',', ' ', $tag['styles']);
  
  // Get image URL  
  $tag['filepath'] = db_query("SELECT filepath FROM {files} WHERE fid = :fid",
    array(':fid' => $tag['fid']))->fetchField();
  
  if ($tag['filepath'] == FALSE) {
    $tag['image_url'] = NULL;
  }
  else {
    $tag['image_url'] = imagebrowser_legacy_url($tag['preset'], $tag['filepath'], FALSE);
//     dsm($tag);
//     $tag['image_url'] = imagecache_create_url($tag['preset'], $tag['filepath'], FALSE);
  }
  // Get link URL
  if ($tag['link_preset'] == '' || $tag['link_preset'] == 'none') {
    $tag['link_url'] = NULL;
  }
  else if ($tag['link_preset'] == 'node') {
    // Search a corresponding image node
    /// TODO this is untested
    $nid = db_query("SELECT nid FROM {image} INNER JOIN {node} USING (nid)  WHERE type='image' and fid = :fid", array(':fid' => $tag['fid']))->fetchField();

    if ($nid == FALSE) {
      $tag['link_url'] = NULL;
    }
    else {
      $tag['link_url'] = url("node/$nid");
    }
  }
  else if (substr($tag['link_preset'], 0, 4) == 'http') {
    $tag['link_url'] = $tag['link_preset']; 
  }
  else {
//     $tag['link_url'] = imagecache_create_url($tag['link_preset'], $tag['filepath'], FALSE);
    $tag['link_url'] = imagebrowser_legacy_url($tag['link_preset'], $tag['filepath'], FALSE);
  }
  return $tag;
}
function imagebrowser_legacy_url($presetname, $filepath, $bypass_browser_cache = FALSE, $absolute = TRUE) {
  $args = array('query' => empty($bypass_browser_cache) ? NULL : time());
  $file_directory = variable_get('file_public_path', conf_path() . '/files');

  // Determine the path of the derivative inside the files directory.
  $derivative_path = 'imagecache/'. $presetname .'/'. _imagebrowser_legacy_strip_file_directory($filepath);

  // Then construct a full path and see if anyone wants to alter it.
  $altered_path = $old_path = $file_directory .'/'. $derivative_path;
  drupal_alter('file_url', $altered_path);

  // If any module has altered the path, then return the alteration...
  if ($altered_path != $old_path) {
    // ...but use url() so our $bypass_browser_cache parameter is honored.
    return url($altered_path, $args);
  }

  // It was unchanged so use the download method's prefix.
  /*
  $prefix = array(
    FILE_DOWNLOADS_PUBLIC => $file_directory,
    FILE_DOWNLOADS_PRIVATE => 'system/files',
  );
  $path = $prefix[variable_get('file_downloads', FILE_DOWNLOADS_PUBLIC)] .'/'. $derivative_path;
  */
  ///TODO implement handling of download method other than public
  $path = $file_directory .'/'. $derivative_path;
  return url($path, $args + array('absolute' => $absolute));
}
function _imagebrowser_legacy_strip_file_directory($path) {
  $dirpath = variable_get('file_public_path', conf_path() . '/files');
  $dirlen = strlen($dirpath);
  if (substr($path, 0, $dirlen + 1) == $dirpath .'/') {
    $path = substr($path, $dirlen + 1);
  }
  return $path;
}

/** ========================================
 * THEME FUNCTIONS
 */


/**
 * Sets theme preprocessor functions for Image Browser.
 */
function imagebrowser_legacy_theme() {
//   $path = drupal_get_path('module', 'imagebrowser_legacy') .'/theme';
  return array(
    'ibimage' => array(
      'arguments' => array(
        'imageurl' => NULL,
        'linkurl' => NULL,
        'classes' => NULL,
      ),
    ),
  );
}

/**
 * Theme an IB image.
 */
function theme_ibimage($image, $link, $link_target) {
  if($link != NULL) {
    return '<a href="'.$link.'" target="_'. $link_target .'">'. $image .'</a>';
  }
  else {
    return $image;
  }
}

/**
 * Implements hook_wysiwyg_include_directory().
 */
function imagebrowser_legacy_wysiwyg_include_directory($type) {
  switch ($type) {
    case 'plugins':
      return 'plugins';
      break;
  }
}
/**
 * Return JSON of image properties from supplied tag.
 */
function imagebrowser_legacy_ajax() {
  if (empty($_GET['tag'])) {
    exit;
  }

  if (!preg_match("/^\[ibimage\s*([^\]]*?)\]$/", $_GET['tag'])) {
    exit;
  }

  $rawtag = substr($_GET['tag'], 10, strlen($_GET['tag'])-11);

  $attr = imagebrowser_legacy_decode_tag($rawtag);

  drupal_json_output($attr);

//   print json_encode($attr);
  exit;
}