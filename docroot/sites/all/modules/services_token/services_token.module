<?php

/**
 * @file
 * Token resource and authentication for services.
 */

define('SERVICES_TOKEN_TTL_DEFAULT', 2592000);


/**
 * @defgroup services_token_lowlevel Services token low level API
 * @{
 * Compute and verify services tokens.
 */

/**
 * Computes an URL-safe base64 encoded authentication token.
 *
 * @param string $realm
 *   A string defining a group of resources this token is valid for. Typically
 *   an URL, e.g., http://example.com/api.
 * @param int $uid
 *   The user id the token should be generated for.
 * @param int $expires
 *   The Unix timestamp of the time when the token will expire.
 *
 * @return string
 *   An URL-safe base64 encoded authentication token for the given account.
 */
function services_token($realm, $uid, $expires) {
  $properties = (array) module_invoke_all('services_token_properties', $realm, $uid);
  drupal_alter('services_token_properties', $properties, $realm, $uid);

  ksort($properties);
  $data = serialize($properties);

  $hmac = drupal_hmac_base64($uid . $data . $expires, drupal_get_private_key() . drupal_get_hash_salt());

  return services_token_join($uid, $expires, $hmac);
}

/**
 * Checks whether the supplied token is valid.
 *
 * @param string $supplied_token
 *   A token string supplied by the user-agent.
 * @param string $realm
 *   A string defining a group of resources this token is valid for.
 *
 * @return bool
 *   TRUE if the supplied token is valid, FALSE otherwise.
 */
function services_token_validate($supplied_token, $realm) {
  $result = FALSE;

  if (substr_count($supplied_token, '.') === 2) {
    list($uid, $expires,) = services_token_split($supplied_token);
    $computed_token = services_token($realm, $uid, $expires);
    $result = (_services_token_hash_equals($computed_token, $supplied_token) && REQUEST_TIME < $expires);
  }

  return $result;
}

/**
 * Implements hook_services_token_properties().
 */
function services_token_services_token_properties($realm, $uid) {
  $account = user_load($uid);
  return array(
    'realm' => $realm,
    'name' => $account->name,
    'pass' => $account->pass,
    'status' => $account->status,
  );
}

/**
 * @} End of "defgroup services_token_lowlevel"
 */


/**
 * @defgroup services_token_crud CRUD API for services tokens.
 * @{
 * Create and return services token objects.
 */

/**
 * Creates and returns an authentication token record.
 *
 * @param string $realm
 *   A string defining a group of resources this token is valid for. Typically
 *   an URL, e.g., http://example.com/api.
 * @param int $uid
 *   (optional) The user account id the token should be generated for. Defaults
 *   to the currently logged in user.
 * @param int $expires
 *   (optional) The Unix timestamp of the time when the token will expire.
 *   Defaults to a timestamp computed based on the value of the
 *   services_token_ttl variable.
 *
 * @return object
 *   A token record with the following attributes:
 *   - expires: The expiry date formatted according to ISO8601
 *   - token: A string which can be used in place of the basic auth username
 *     on subsequent requests.
 */
function services_token_create($realm, $uid = NULL, $expires = NULL) {
  global $user;

  if (!isset($uid)) {
    $uid = $user->uid;
  }

  if (!isset($expires)) {
    $expires = REQUEST_TIME + variable_get('services_token_ttl', SERVICES_TOKEN_TTL_DEFAULT);
  }

  drupal_alter('services_token_expires', $expires, $realm, $uid);

  $resource = (object) array(
    'expires' => date(DATE_ISO8601, $expires),
    'token' => services_token($realm, $uid, $expires),
  );

  drupal_alter('services_token_create', $resource, $realm, $uid);

  return $resource;
}

/**
 * @} End of "defgroup services_token_crud"
 */


/**
 * @defgroup services_token_hooks Services token hook implementations
 * @{
 * Implementations of core and contrib hooks.
 */

/**
 * Implements hook_permission().
 */
function services_token_permission() {
  return array(
    'generate services token' => array(
      'title' => t('Generate services token'),
    ),
  );
}

/**
 * Implements hook_services_resources().
 */
function services_token_services_resources() {
  $resources['services_token'] = array(
    'actions' => array(
      'generate' => array(
        'callback' => '_services_token_generate',
        'file' => array(
          'type' => 'inc',
          'module' => 'services_token',
          'name' => 'services_token.services',
        ),
        'access arguments' => array('generate services token'),
        'help' => 'Generate a service token and return the token record.',
      ),
    ),
  );

  return $resources;
}

/**
 * Implements hook_services_authentication_info().
 */
function services_token_services_authentication_info() {
  return array(
    'title' => t('Token authentication'),
    'description' => t('Token based authentication method'),
    'file' => 'services_token.services.inc',
    'authenticate_call' => '_services_token_authenticate',
    'security_settings' => '_services_token_authentication_settings_form',
    'default_security_settings' => '_services_token_authentication_settings_defaults',
    'controller_settings' => '_services_token_controller_settings',
  );
}

/**
 * Implements hook_rest_server_execute_errors_alter().
 */
function services_token_rest_server_execute_errors_alter(&$error, $controller, $arguments) {
  module_load_include('inc', 'services_token', 'services_token.services');
  _services_token_authenticate_send_challenge($error);
}

/**
 * @} End of "defgroup services_token_hooks"
 */


/**
 * @defgroup services_token_utilities Services token helper functions
 * @{
 * Implementations of core and contrib hooks.
 */

/**
 * Separates a token into its parts.
 *
 * @param string $token
 *   A token string.
 *
 * @return array
 *   An array with 3 elements representing the token parts: uid, expires, hmac.
 */
function services_token_split($token) {
  list($hexuid, $hexexpires, $hmac) = explode('.', $token);
  $uid = hexdec($hexuid);
  $expires = hexdec($hexexpires);
  return array($uid, $expires, $hmac);
}

/**
 * Joins token elements into an URL-safe base64 encoded string.
 *
 * @param int $uid
 *   The user id the token should be generated for.
 * @param int $expires
 *   The Unix timestamp of the time when the token will expire.
 * @param string $hmac
 *   An URL-safe base64 encoded hmac.
 *
 * @return string
 *   The token string.
 */
function services_token_join($uid, $expires, $hmac) {
  $parts = array(dechex($uid), dechex($expires), $hmac);
  return implode('.', $parts);
}

/**
 * Returns the basic auth realm for an endpoint with token authentication.
 *
 * @param object $endpoint
 *   (optional) The services endpoint for which to retrieve the realm. If
 *   omitted, the endpoint currently being invoked is used. Note that this only
 *   works in the context of a services resource request.
 *
 * @return string|NULL
 *   Basic auth realm or null if there is none.
 */
function services_token_endpoint_get_realm($endpoint = NULL) {
  if (!isset($endpoint)) {
    $endpoint_name = services_get_server_info('endpoint');
    $endpoint = services_endpoint_load($endpoint_name);
  }

  if (isset($endpoint->authentication['services_token']['realm'])) {
    return $endpoint->authentication['services_token']['realm'];
  }
}

/**
 * Compares strings in constant time.
 *
 * @param string $known_string
 *   The expected string.
 * @param string $user_string
 *   The user supplied string to check.
 *
 * @return bool
 *   Returns TRUE when the two strings are equal, FALSE otherwise.
 */
function _services_token_hash_equals($known_string, $user_string) {
  if (function_exists('hash_equals')) {
    return hash_equals($known_string, $user_string);
  }
  else {
    // Backport of hash_equals() function from PHP 5.6.
    // @see https://github.com/php/php-src/blob/PHP-5.6/ext/hash/hash.c#L739
    if (!is_string($known_string)) {
      trigger_error(sprintf("Expected known_string to be a string, %s given", gettype($known_string)), E_USER_WARNING);
      return FALSE;
    }

    if (!is_string($user_string)) {
      trigger_error(sprintf("Expected user_string to be a string, %s given", gettype($user_string)), E_USER_WARNING);
      return FALSE;
    }

    $known_len = strlen($known_string);
    if ($known_len !== strlen($user_string)) {
      return FALSE;
    }

    // This is security sensitive code. Do not optimize this for speed.
    $result = 0;
    for ($i = 0; $i < $known_len; $i++) {
      $result |= (ord($known_string[$i]) ^ ord($user_string[$i]));
    }

    return $result === 0;
  }
}

/**
 * @} End of "defgroup services_token_utilities"
 */
