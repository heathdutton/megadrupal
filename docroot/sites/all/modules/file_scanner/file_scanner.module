<?php

/**
 * @file
 * File Scanner main functions and hooks.
 *
 * This is the main module file for File Scanner.
 * It contains Drupal hooks, CRUD functions, helper functions and internal
 * (private) functions as well.
 */

/**
 * Implements hook_menu().
 */
function file_scanner_menu() {
  $items['admin/config/development/file_scanner'] = array(
    'title' => 'File Scanner analyses overview',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('file_scanner_admin_overview_form'),
    'access arguments' => array('use file scanner'),
    'description' => '',
    'file' => 'file_scanner.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/development/file_scanner/add'] = array(
    'title' => 'Create a new analysis',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('file_scanner_admin_analysis_form', NULL, 'add'),
    'access arguments' => array('use file scanner'),
    'description' => '',
    'file' => 'file_scanner.admin.inc',
    'type' => MENU_LOCAL_ACTION,
  );
  $items['admin/config/development/file_scanner/view/%file_scanner_analysis'] = array(
    'title' => 'View',
    'page callback' => 'file_scanner_analysis_view',
    'page arguments' => array(5),
    'access arguments' => array('use file scanner'),
    'description' => '',
    'file' => 'file_scanner.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
  $items['admin/config/development/file_scanner/edit/%file_scanner_analysis'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('file_scanner_admin_analysis_form', 5, 'edit'),
    'access arguments' => array('use file scanner'),
    'description' => '',
    'file' => 'file_scanner.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );
  $items['admin/config/development/file_scanner/clone/%file_scanner_analysis'] = array(
    'title' => 'Clone',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('file_scanner_admin_analysis_form', 5, 'clone'),
    'access arguments' => array('use file scanner'),
    'description' => '',
    'file' => 'file_scanner.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
  );
  $items['admin/config/development/file_scanner/delete/%file_scanner_analysis'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('file_scanner_analysis_delete_confirm', 5),
    'access arguments' => array('use file scanner'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'file_scanner.admin.inc',
    'weight' => 4,
  );
  return $items;
}

/**
 * Implement hook_permission().
 */
function file_scanner_permission() {
  return array(
    'use file scanner' => array(
      'title' => t('Use File Scanner'),
      'description' => t('Perform and view analyses results.'),
    ),
  );
}

/**
 * Performs an analysis
 * @param object $analysis
 * @return int
 *   Number of files parsed (regardless the selector matched anything or not)
 */
function file_scanner_perform_analysis($analysis) {
  // Try to load library
  if (($library = libraries_detect('querypath')) && !empty($library['installed'])) {
    // Load library's files
    libraries_load_files($library);
  }
  else {
    watchdog('file_scanner', $library['error'], NULL, WATCHDOG_ERROR);
    drupal_set_message($library['error message'], 'error');
    return FALSE;
  }

  $extensions = $analysis->extensions;

  // Delete all potential previous results
  _file_scanner_clean_analysis_results($analysis->aid);

  foreach ($analysis->folders as $current_folder) {
    $folder = _file_scanner_get_root_folder() . $current_folder;

    $it = new RecursiveDirectoryIterator($folder, FilesystemIterator::UNIX_PATHS);
    $files_parsed = 0;
    $file_matches = 0;
    foreach (new RecursiveIteratorIterator($it) as $file) {
      $files_parsed++;
      $filename = $file->getPathName();

      // Check if file extension is allowed
      $pattern = '/^.*\.(' . implode('|', $extensions) . ')$/i';
      if (!empty($extensions) && !preg_match($pattern, $filename)) {
        continue;
      }

      // Check if file can be opened
      if (!$html = file_get_contents($filename)) {
        drupal_set_message(t('File %file could not be opened.', array('%file' => $filename)), 'warning');
        continue;
      }

      // Find selector macthes into the file, with the help of querypath magic
      $matches = htmlqp($html, $analysis->selector, array('convert_to_encoding' => 'utf-8'));

      // Get path relative to root folder
      $file_path = $file->getPath();
      if (strpos($file_path, _file_scanner_get_root_folder()) === 0) {
        $file_path = substr($file_path, strlen(_file_scanner_get_root_folder()));
      }

      // Save file to database
      $file_object = new stdClass();
      $file_object->path = $file_path;
      $file_object->filename = $file->getFilename();
      file_scanner_file_save($file_object);

      // Save result to database
      $result = new stdClass();
      $result->aid = $analysis->aid;
      $result->fid = $file_object->fid;
      $result->result = count($matches);
      drupal_write_record('file_scanner_analysis_results', $result);
      $file_matches++;
    }
  }

  // Update analysis
  $analysis->last_run = REQUEST_TIME;
  $analysis->last_run_files_parsed = $files_parsed;
  file_scanner_analysis_save($analysis);
  
  _file_scanner_clean_orphaned_files();

  return $file_matches;
}

/**
 * Implements hook_libraries_info().
 */
function file_scanner_libraries_info() {
  $libraries['querypath'] = array(
    'name' => 'Querypath',
    'vendor url' => 'http://querypath.org/',
    'download url' => 'https://github.com/technosophos/querypath',
    'version arguments' => array(
      'file' => 'RELEASE',
      'pattern' => '@([0-9\.]+)@',
      'lines' => 3,
    ),
    'files' => array(
      'php' => array(
        'src/qp.php',
      ),
    ),
    'versions' => array(
      '3.0.0' => array(
        'files' => array(
          'php' => array(
            'src/qp.php',
          ),
        ),
      ),
    ),
  );
  return $libraries;
}

/***************************** Batch functions *******************************/

/**
 * Builds batch analyses
 */
function file_scanner_analysis_build_batch($aids) {
  $operations = array();

  // Define operations to run
  foreach ($aids as $aid) {
    $analysis = file_scanner_analysis_load($aid);
    $operations[] = array('_file_scanner_analyis_batch_perform', array($analysis));
  }

  $batch = array(
    'title' => t('Performing file analyses'),
    'operations' => $operations,
    'finished' => '_file_scanner_analysis_batch_finished',
  );
  batch_set($batch);
}

/**
 * Performs batch analyses
 * @param object $analysis
 * @param array $context
 */
function _file_scanner_analyis_batch_perform($analysis, &$context) {
  $result = file_scanner_perform_analysis($analysis);
  $context['results']['messages'][] = t('!title successfully analysed @count files.', array(
    '!title' => $analysis->label,
    '@count' => $result,
  ));
}


/**
 * Complete a batch process.
 *
 * Callback for batch_set().
 *
 * This callback may be specified in a batch to perform clean-up operations, or
 * to analyze the results of the batch operations.
 *
 * @param $success
 *   A boolean indicating whether the batch has completed successfully.
 * @param $results
 *   The value set in $context['results'] by callback_batch_operation().
 * @param $operations
 *   If $success is FALSE, contains the operations that remained unprocessed.
 */
function _file_scanner_analysis_batch_finished($success, $results, $operations) {
  if (!empty($results['messages'])) {
    foreach ($results['messages'] as $message) {
      drupal_set_message(check_plain($message));
    }
  }
}

/***************************** Theme functions *******************************/

/**
 * Implements hook_theme().
 */
function file_scanner_theme() {
  return array(
    'file_scanner_admin_overview_form' => array(
      'file' => 'file_scanner.theme.inc',
      'render element' => 'form',
    ),
    'file_scanner_analysis_summary' => array(
      'variables' => array('analysis' => NULL, 'analysis_stats' => NULL),
      'file' => 'file_scanner.theme.inc',
    ),
    'file_scanner_analysis_results_display' => array(
      'variables' => array('analysis' => NULL, 'analysis_results' => NULL),
      'file' => 'file_scanner.theme.inc',
    ),
  );
}

/****************************** CRUD functions ********************************/

/**
 * Saves changes to an analysis or adds a new analysis.
 *
 * @param $analysis
 *   The $analysis object to be saved. If $analysis->aid is
 *   omitted, a new analysis will be added.
 */
function file_scanner_analysis_save(&$analysis) {
  // Make sure folders are a string
  if (is_array($analysis->folders)) {
    $analysis->folders = implode(PHP_EOL, $analysis->folders);
  }
  // Make sure extensions are a string
  if (is_array($analysis->extensions)) {
    $analysis->extensions = implode(PHP_EOL, $analysis->extensions);
  }

  if (empty($analysis->aid)) {
    // Insert
    $result = drupal_write_record('file_scanner_analyses', $analysis);
  }
  else {
    // Update
    $result = drupal_write_record('file_scanner_analyses', $analysis, 'aid');
  }
  return $result;
}

/**
 * Loads an analysis object from the database.
 *
 * @param $aid
 *   The analysis ID.
 *
 * @return
 *   A fully-populated analysis object, or FALSE if the analysis is not found.
 */
function file_scanner_analysis_load($aid) {
  // Check if argument is valid
  if (empty($aid) || !is_numeric($aid)) {
    return FALSE;
  }

  // Get the object from the database
  $query = db_select('file_scanner_analyses', 'fsa');
  $query->fields('fsa', array())
          ->condition('fsa.aid', $aid);
  $result = $query->execute();
  
  if ($analysis = $result->fetchObject()) {
    // Transform folders and extensions properties into arrays
    $analysis->folders = explode(PHP_EOL, $analysis->folders);
    $analysis->extensions = explode(PHP_EOL, $analysis->extensions);
  }

  return $analysis;
}

/**
 * Deletes an analysis.
 *
 * @param $aid
 *   An analysis ID.
 */
function file_scanner_analysis_delete($aid) {
  db_delete('file_scanner_analyses')
    ->condition('aid', $aid, '=')
    ->execute();
}

/**
 * Saves changes to a file or adds a new file.
 *
 * @param $file
 *   The $file object to be saved. If path/filename combination already exists,
 *   then nothing is done
 */
function file_scanner_file_save(&$file) {
  $result = db_query('SELECT fid FROM {file_scanner_files} WHERE path = :path AND filename = :filename', array(
    ':path' => $file->path,
    ':filename' => $file->filename,
  ));

  // If file doesn't exist in database, record it
  if (!$row = $result->fetch()) {
    $result = drupal_write_record('file_scanner_files', $file);
  }
  else {
    $file->fid = $row->fid;
  }

  return $result;
}

/***************************** Helper functions *******************************/

/**
 * Get all analyses.
 * @return array
 *   Array containing analysis objects
 */
function file_scanner_get_analyses() {
  $analyses = array();
  $rows = db_select('file_scanner_analyses', 'fsa')
    ->fields('fsa', array('aid'))
    ->execute();

  foreach ($rows as $row) {
    $analyses[$row->aid] = file_scanner_analysis_load($row->aid);
  }
  return $analyses;
}

/**
 * Get all analysis results.
 * @param int $aid Analysis ID
 * @param string $mode Result mode raw|flat|nested. Defaults to raw.
 * @return array
 *   Array containing analysis result objects
 */
function file_scanner_get_analysis_results($aid, $mode = 'raw') {
  $results = array();

  $query = db_select('file_scanner_analysis_results', 'fsar')
    ->fields('fsf', array('fid', 'path', 'filename'))
    ->fields('fsar', array('result'))
    ->condition('fsar.aid', $aid, '=')
    ->orderBy('fsf.path', 'ASC')
    ->orderBy('fsf.filename', 'ASC');
  $query->innerJoin('file_scanner_files', 'fsf', 'fsar.fid = fsf.fid');
  $rows = $query->execute();

  switch ($mode) {
    case 'flat' :
      foreach ($rows as $row) {
        $path = $row->path;

        // Folder information
        if (empty($results[$path]['@folder'])) {
          $results[$path]['@folder'] = array(
            'files_count' => NULL,
            'files_selector_matched' => NULL,
          );
        }
        if (is_null($results[$path]['@folder']['files_selector_matched'])) {
          $results[$path]['@folder']['files_selector_matched'] = 0;
        }
        if ($row->result > 0) {
          $results[$path]['@folder']['files_selector_matched']++;
        }
        $results[$path]['@folder']['files_count']++;
        $results[$path]['@files'][] = $row;
        if (empty($results[$path]['@parent'])) {
          $results[$path]['@parent'] = _file_scanner_get_parent_folder($path);
        }
      }
      // Tree information
      foreach ($results as $path => $item) {
        // Initialise tree statistics
        $results[$path]['@tree']['files_count'] = $results[$path]['@folder']['files_count'];
        $results[$path]['@tree']['files_selector_matched'] = $results[$path]['@folder']['files_selector_matched'];

        // Add current folder's statistics to parent
        $parent_path = NULL;
        do {
          if (empty($parent_path)) {
            $parent_path = _file_scanner_get_parent_folder($path);
          }
          else {
            $parent_path = _file_scanner_get_parent_folder($parent_path);
          }
          if (!isset($results[$parent_path]['@tree'])) {
            $results[$parent_path]['@tree'] = array(
              'files_count' => NULL,
              'files_selector_matched' => NULL,
            );
          }
          $results[$parent_path]['@tree']['files_count'] += $results[$path]['@folder']['files_count'];
          $results[$parent_path]['@tree']['files_selector_matched'] += $results[$path]['@folder']['files_selector_matched'];
        }
        while ($parent_path);

        ksort($results);
        unset($results['']);
      }
      break;

    case 'nested' :
      foreach ($rows as $row) {
        $path = $row->path;

        $path_folders = explode('/', $path);

        $temp = &$results;
        foreach ($path_folders as $key => $folder) {
          empty($temp) ? $temp = &$temp[$folder] :$temp = &$temp['@children'][$folder];

          
          if (empty($temp['@folder'])) {
            $temp['@folder'] = array(
              'files_count' => NULL,
              'files_selector_matched' => NULL,
            );
          }
        }

        if (is_null($temp['@folder']['files_selector_matched'])) {
          $temp['@folder']['files_selector_matched'] = 0;
        }
        if ($row->result > 0) {
          $temp['@folder']['files_selector_matched']++;
        }
        $temp['@folder']['files_count']++;
        $temp['@files'][] = $row;
        if (empty($temp['@parent'])) {
          $temp['@parent'] = _file_scanner_get_parent_folder($path);
        }
      }
      break;

    case 'raw' :
    default :
      foreach ($rows as $row) {
        $results[] = $row;
      }
      break;
  }

  return $results;
}

/**
 * Returns statistics of an analysis
 * @param int $aid Analysis ID
 * @return array Array containing stats keyed by : files_count, files_selector_matched
 */
function file_scanner_get_analysis_statistics($analysis) {
  $stats = array(
    'files_count' => NULL,
    'files_selector_matched' => NULL,
  );

  // If no files have been parsed, then we do not need to count analysed files
  // nor selector macthed files
  if ($analysis->last_run_files_parsed < 1) {
    return $stats;
  }

  // Get files_count
  $result = db_query('SELECT COUNT(aid) AS count FROM {file_scanner_analysis_results} WHERE aid = :aid', array(':aid' => $analysis->aid))->fetch();
  $stats['files_count'] = $result->count;

  if ($stats['files_count'] > 0) {
    // Get files_selector_matched
    $result = db_query('SELECT COUNT(aid) AS count FROM {file_scanner_analysis_results} WHERE aid = :aid AND result > 0', array(':aid' => $analysis->aid))->fetch();
    $stats['files_selector_matched'] = $result->count;
  }

  return $stats;
}

/**
 * Removes files that aren't linked to any analysis from database
 */
function _file_scanner_clean_orphaned_files() {
  $sql = "DELETE {file_scanner_files} FROM {file_scanner_files} LEFT JOIN {file_scanner_analysis_results} fsar ON fsar.fid = file_scanner_files.fid WHERE fsar.fid IS NULL";
  db_query($sql, array(), array(Database::RETURN_AFFECTED))->execute();
  // @todo : log number of orphaned files cleaned
}

/**
 * Deletes all analysis results from database
 * @param int $aid Analysis ID
 */
function _file_scanner_clean_analysis_results($aid) {
  db_query('DELETE FROM {file_scanner_analysis_results} WHERE aid = :aid', array(':aid' => $aid));
}

/**
 * Returns the root folder
 */
function _file_scanner_get_root_folder() {
  return DRUPAL_ROOT . base_path();
}

/**
 * Returns the parent folder path of a folder
 * @param string $path Folder path
 * @return string The parent folder path or FALSE if there is no parent
 */
function _file_scanner_get_parent_folder($path) {
  // If this is root folder then return false
  if ($path == '/') {
    return FALSE;
  }

  if (strrpos($path, '/') !== 0) {
    $path = substr($path, 0, strrpos($path, '/'));
  }
  return $path;
}
