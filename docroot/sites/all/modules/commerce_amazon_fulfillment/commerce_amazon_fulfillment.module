<?php
/**
 * @file
 * Maps associated nodequeues and menus with one another for easier sorting
 */

module_load_include('inc', 'commerce_amazon_fulfillment', 'includes/commerce_amazon_fulfillment.admin');
module_load_include('inc', 'commerce_amazon_fulfillment', 'includes/commerce_amazon_fulfillment.utility');


/**
 * Implements hook_menu().
 */
function commerce_amazon_fulfillment_menu() {
  $items = array();
  // Administrative page for amazon fulfillment.
  $items['admin/commerce/config/shipping/amazon-fulfillment'] = array(
    'title' => 'Amazon fulfillment',
    'description' => 'Administer amazon fulfillment settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_amazon_fulfillment_admin'),
    'access arguments' => array('Configure store settings'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}


/**
 * Implements hook_checkout_complete().
 *
 * Takes order and submits checked product to amazon for fulfillment.
 *
 * @para object
 * The full order object as passed through Drupal Commerce Checkout.
 */

function commerce_amazon_fulfillment_commerce_checkout_complete($order) {
  // Initiate array of items to ship.
  $amazon_items_to_ship = array();

  // Get all line items for amazon to ship.
  foreach ($order->commerce_line_items['und'] as $line_item_id) {
    // Load the line item.
    $line_item = commerce_line_item_load($line_item_id);

    // Will call all modules with hook_commerce_amazon_fulfillment_shipping.
    // Expects $data as 'shipping_machine_name' => 'amazon_shipping_speed'.
    $shipping_mapping = array();
    drupal_alter('commerce_amazon_fulfillment_shipping', $shipping_mapping);

    // If loop hits a shipping item, set shipping speed based on mapped value.
    if ($line_item->type == 'shipping') {
      if (array_key_exists($line_item->data['shipping_service']['name'], $shipping_mapping)) {
        $shipping_speed = $shipping_mapping[$line_item->data['shipping_service']['name']];
      }
    }

    // Check if a line item is a product.
    if ($line_item->type == 'product') {
      // Load relevant product.
      $product = commerce_product_load($line_item->commerce_product['und'][0]);

      // Check if line item parent product is fulfilled by Amazon.
      if ($product->field_product_amazon_fulfillment['und'][0]['value'] == 1) {
        // Load line item wrapper.
        $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
        $line_item_value = $line_item_wrapper->commerce_product->commerce_price->value();

        // Get the product sku.
        $product_sku = $line_item_wrapper->commerce_product->sku->value();

        // Get the fulfillment sku.
        $fulfillment_sku = $line_item_wrapper->commerce_product->field_product_amazon_sku->value();

        // Add sku and quantity to data to ship to amazon.
        $amazon_items_to_ship[] = array(
          'sku' => $product_sku,
          'fulfillment_sku' => $fulfillment_sku,
          'quantity' => intval($line_item->quantity),
          'value' => $line_item_value['amount'],
          'currency' => $line_item_value['currency_code'],
        );
      }
    }
  }

  // Get address to ship to.
  $shipping_profile_id = $order->commerce_customer_shipping['und'][0]['profile_id'];
  $shipping_profile = commerce_customer_profile_load($shipping_profile_id);
  $amazon_address_to_ship_to = $shipping_profile->commerce_customer_address['und'][0];

  // If no shipping speed is set, use system default.
  if (!isset($shipping_speed)) {
    $shipping_speed = variable_get('amazon_fulfillment_ShippingSpeedCategory', 'Standard');
  }
  // Create amazon fulfillment order, if there are any items to ship.
  if (!empty($amazon_items_to_ship)) {
    commerce_amazon_fulfillment_create_order($order->order_number,
      $amazon_items_to_ship, $amazon_address_to_ship_to, $shipping_speed);
  }
}

/**
 * Implements hook_field_attach_create_bundle().
 *
 * This fires every time a new entity is created (if the entity
 * structure was done correctly) and if the entity is of type commerce_product,
 * it adds the amazon fulfillment field.
 */
function commerce_amazon_fulfillment_field_attach_create_bundle($entity_type, $bundle) {
  if ($entity_type == 'commerce_product') {
    commerce_amazon_fulfillment_create_field_instance($bundle);
  }
}

/**
 * Implements hook_form_alter().
 *
 * Purpose: add validation to the commerce product form.
 */
function commerce_amazon_fulfillment_form_alter(&$form, &$form_state, $form_id) {
  // Alter the add new product form for custom amazon validation.
  if ($form_id == 'commerce_product_ui_product_form') {
    $form['#validate'][] = 'commerce_amazon_fulfillment_validate';
  }
}

/**
 * Implements hook_rules_event_info().
 *
 * Purpose: create a rules event for error on amazon submission.
 */
function commerce_amazon_fulfillment_rules_event_info() {
  $events = array();

  $events['commerce_amazon_fulfillment_submission_error'] = array(
    'label' => t('Error is triggered from amazon MWS Fulfillment submission'),
    'group' => t('Amazon MWS'),
    'variables' => array(
      'error' => array(
        'type' => 'text',
        'label' => t('Error message returned from amazon MWS.'),
      ),
    ),
    'access callback' => 'commerce_order_rules_access',
  );

  return $events;
}
