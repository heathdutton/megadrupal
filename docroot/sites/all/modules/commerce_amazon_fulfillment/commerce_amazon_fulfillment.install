<?php

/**
 * @file Install
 */


/**
 * Implements hook install().
 *
 * Purpose: To bring in field instance of amazon fulfillment field.
 */
function commerce_amazon_fulfillment_install() {
  // Load all fields.
  $fields = field_read_fields(array(), array('include_inactive' => TRUE));
  $field_types = field_info_field_types();

  // Check that the field does not already exist, and add if it does not exist.
  if (empty($fields['field_product_amazon_fulfillment'])) {
    // Create Amazon Fulfillment boolean field.
    $field = array(
      'translatable' => '0',
      'settings' => array(
        'allowed_values' => array(
          0 => '',
          1 => 'Fulfilled by Amazon (Shipping)',
        ),
        'allowed_values_function' => '',
      ),
      'field_name' => 'field_product_amazon_fulfillment',
      'type' => 'list_boolean',
      'active' => '1',
      'locked' => '0',
      'cardinality' => '1',
    );
    field_create_field($field);
  }

  // Creat amazon Fulfillment SKU field
  $field = array(
    'translatable' => '0',
    'settings' => array(
      'max_length' => '255',
    ),
    'field_name' => 'field_product_amazon_sku',
    'type' => 'text',
    'active' => '1',
    'locked' => '0',
    'cardinality' => '1',
  );
  field_create_field($field);

  // Make sure all bundles have field instance.
  commerce_amazon_fulfillment_check_all_bundles_for_field_instance();
}

/**
 * Helper function for placing amazon fulfillment on bundles.
 *
 * Loops through all bundles of product entity type to make sure
 * they've got an amazon fulfillment field.
 */
function commerce_amazon_fulfillment_check_all_bundles_for_field_instance(){
  // Get full entity info for commerce product.
  $commerce_product_entity_info = entity_get_info('commerce_product');

  // Loop through all the bundles of commerce product entity.
  foreach ($commerce_product_entity_info['bundles'] as $bundle => $info) {
    // Get instance fields.
    $instance_info = field_info_instances('commerce_product', $bundle);
    // Check if the instance already has the field.
    if (!array_key_exists('field_product_amazon_fulfillment', $instance_info)) {
      commerce_amazon_fulfillment_create_field_instance($bundle);
    }
  }
}

/**
 * Implements hook_uninstall().
 *
 * Purpose: Remove settings and fields on uninstall.
 */
function commerce_amazon_fulfillment_uninstall() {
  // Delete all variables set in the administrative settings.
  variable_del('amazon_fulfillment_dai');
  variable_del('amazon_fulfillment_keyid');
  variable_del('amazon_fulfillment_merchantid');
  variable_del('amazon_fulfillment_DisplayableOrderIdPrefix');
  variable_del('amazon_fulfillment_displayable_comment');
  variable_del('amazon_fulfillment_FulfillmentPolicy');
  variable_del('amazon_fulfillment_MWS_endpoint');
  variable_del('amazon_fulfillment_marketplaceid');
  variable_del('amazon_fulfillment_marketplace_endpoint');
  variable_del('amazon_fulfillment_marketplace_url');
  variable_del('amazon_fulfillment_FulfillmentAction');
  variable_del('amazon_fulfillment_ShippingSpeedCategory');
  variable_del('amazon_fulfillment_secretkey');

  // Get full entity info for commerce product.
  $commerce_product_entity_info = entity_get_info('commerce_product');

  // Loop through all the bundles of commerce product entity.
  foreach ($commerce_product_entity_info['bundles'] as $bundle => $info) {
    // Delete field field_product_amazon_fulfillment.
    if ($field_instance = field_info_instance('commerce_product', 'field_product_amazon_fulfillment', $bundle)) {
      field_delete_instance($field_instance);
    }
    // Delete field_product_amazon_sku.
    if ($field_instance = field_info_instance('commerce_product', 'field_product_amazon_sku', $bundle)) {
      field_delete_instance($field_instance);
    }
  }

}
