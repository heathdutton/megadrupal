<?php
/**
 * Implements hook_restws_resource_info
 * 
 * @return array
 */
function restws_search_api_restws_resource_info() {
  $resources = array();
  
  foreach (search_api_index_load_multiple(FALSE) as $index) {
    $resources[$index->machine_name] = array(
      'label' => $index->machine_name,
      'class' => 'RestWSSearchApiResource',  
    );
  }

  return $resources;
}

/**
 * Implements hook_restws_response_alter
 * 
 * Adds facet information on queryResource function
 * 
 * @param mixed $data
 * @param string $function
 * @param string $format
 */
function restws_search_api_restws_response_alter(&$data, $function, $format) {
  if ('queryResource' == $function) {
    $menu_item = menu_get_item();
    $index = $menu_item['page_arguments'][0];
    $searcher_name = 'search_api@' . $index;
    $build = facetapi_build_realm($searcher_name, 'restws');
    $facets = array();
    
    foreach ($build as $value => $item) {
      if ('#' != substr($value, 0, 1)) {
        $facets[$value] = $item[$value];
      }
    }
  
    // Now add the facets in the correct way for the output
    switch($format) {
      case 'xml':
      case 'rdf':
        $facets_data = $data->createElement('facets');
        
        foreach ($facets as $name => $facet) {
          $facet_item = $data->createElement('facet');
          $facet_item->setAttribute('name', $name);
          $items = $data->createElement('items');
          
          foreach ($facet['items'] as $facet_values) {
            $item = $data->createElement('item');
            foreach (array_keys($facet_values) as $key) {
              $item->setAttribute($key, $facet_values[$key]);
            }
  
            $items->appendChild($item);
          }
          $facet_item->appendChild($items);
          $facets_data->appendChild($facet_item);
        }
        $data->appendChild($facets_data);
        break;
        
      case 'json':
        $data['facets'] = $facets;
        break;
    }
  }
}

/**
 * Implements hook_facetapi_realm_info
 * 
 * @return array
 */
function restws_search_api_facetapi_realm_info() {
  return array(
    'restws' => array(
      'label' => t('RESTWS'),
      'sortable' => FALSE,
      'weight' => -10,
      'default widget' => 'facetapi_links',
      'element type' => 'links',
      'description' => t('Shows facets in REST responses')
    ),
  );
}

/**
 * Implements hook_facetapi_widgets
 * 
 * @return array
 */
function restws_search_api_facetapi_widgets() {
  return array(
    'restws_search_api_raw' => array(
      'handler' => array(
        'label' => t('Raw'),
        'class' => 'RestWsSearchApiWidgetRaw',
        'query types' => array('term', 'date'),
      ),
    ),
  );
}

/**
 * Implements hook_angularjs_services
 */
function restws_search_api_angularjs_services($version = NULL) {
  $services = array();
  
  $services[drupal_get_path('module', 'restws_search_api') . '/js/resources/restws_search.js'] = array();
  
  return $services;
}

/**
 * Implements hook_angularjs_directives
 */
function restws_search_api_angularjs_directives($version = NULL) {
  $directives = array();

  $directives[drupal_get_path('module', 'restws_search_api') . '/js/directives/restws_search_facet.js'] = array();

  return $directives;
}
