<?php

/**
 * Implements hook_views_api().
 */
function commerce_add_to_cart_radio_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Implements hook_form_alter().
 */
function commerce_add_to_cart_radio_form_alter(&$form, &$form_state, $form_id) {
  $is_radio_form = FALSE;
  if (strpos($form_id, 'views_form_') === 0) {
    $view = $form_state['build_info']['args'][0];
    foreach ($view->field as $field) {
      if ($field instanceof commerce_add_to_cart_radio_handler_field) {
        $is_radio_form = TRUE;
      }
    }
    // Allow form to work when embedded using views_embed_view(), or in a block.
    if (empty($view->override_path)) {
      if (!empty($view->preview) || $view->display_handler instanceof views_plugin_display_block) {
        $view->override_path = $_GET['q'];
        $query = drupal_get_query_parameters($_GET, array('q'));
        $form['#action'] = url($view->get_url(), array('query' => $query));
      }
    }
  }

  if ($is_radio_form) {
    $form['actions']['submit']['#value'] = t('Continue');
  }
}

/**
 * Helper function to calculate the product sell price for specific quantity, in
 * Commerce exists a similar function commerce_product_calculate_sell_price()
 * but only calculates for quantity = 1.
 */
function commerce_add_to_cart_radio_calculate_sell_price($product, $quantity) {
  // create a pseudo product line and calculate price
  $line_item = commerce_product_line_item_new($product, $quantity);
  drupal_alter('commerce_product_calculate_sell_price_line_item', $line_item);
  rules_invoke_event('commerce_product_calculate_sell_price', $line_item);
  $wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);

  // calculate total based on unit price and quantity
  $unit_price = commerce_price_wrapper_value($wrapper, 'commerce_unit_price', TRUE);
  $wrapper->commerce_total->amount = $line_item->quantity * $unit_price['amount'];
  $wrapper->commerce_total->currency_code = $unit_price['currency_code'];
  $price = $wrapper->commerce_total->value();

  // format the price
  return commerce_currency_format($price['amount'], $price['currency_code']);
}
