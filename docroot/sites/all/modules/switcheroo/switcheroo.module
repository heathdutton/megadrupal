<?php
// $Id: switcheroo.module,v 1.1 2010/10/08 02:59:00 boombatower Exp $

/**
 * @file
 * Provides an easy method to switch between a core and contrib version of a
 * module.
 */

/**
 * Implements hook_menu().
 */
function switcheroo_menu() {
  $items = array();

  $items['admin/config/development/switcheroo'] = array(
    'title' => 'Switcheroo',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('switcheroo_list_form'),
    'access arguments' => array('switcheroo'),
  );
  $items['admin/config/development/switcheroo/switch'] = array(
    'page callback' => 'switcheroo_switch_process',
    'access arguments' => array('switcheroo'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function switcheroo_permission() {
  return array(
    'switcheroo' => array(
      'title' => t('Switcheroo'),
      'description' => t('Switch module between core and contrib version.'),
    ),
  );
}

/**
 * Form that displays modules which can be overriden.
 */
function switcheroo_list_form($form, &$form_state) {
  $core = array_keys(file_scan_directory('modules', '/.*.module/m', array('key' => 'name')));
  $overrides = db_select('system')
    ->fields('system', array('name'))
    ->condition('filename', 'sites/%', 'LIKE')
    ->condition('name', $core, 'IN')
    ->execute()
    ->fetchAllAssoc('name');

  // Any modules that are currently being overriden will not return in the
  // query since their path will point to the modules directory instead of
  // sites so we need to add those to the list of overrides.
  $overrides = array_merge(array_keys($overrides), switcheroo_overrides_get());

  $form['switch'] = array(
    '#type' => 'fieldset',
    '#title' => t('Switch'),
    '#description' => t('The following modules have been identified as having a version in a sites folder that will override the core version. Use the checkboxes to override the behavior and use the core module instead.'),
  );
  $form['switch']['modules'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Modules'),
    '#options' => array(),
    '#default_value' => array(),
  );
  foreach ($overrides as $override) {
    $form['switch']['modules']['#options'][$override] = $override;
    if (switcheroo_state_get($override)) {
      $form['switch']['modules']['#default_value'][] = $override;
    }
  }
  $form['op'] = array(
    '#type' => 'submit',
    '#value' => t('Switch'),
  );
  return $form;
}

/**
 * Store override preferences and clear caches.
 */
function switcheroo_list_form_submit($form, &$form_state) {
  // Load previous state and compare with new state to see if there are changes
  // that require caches and what not to be reset.
  $state = variable_get('switcheroo', array());
  $new_state = array();
  foreach ($form_state['values']['modules'] as $module => $override) {
    $new_state[$module] = (bool) $override;
  }

  // Store new state.
  variable_set('switcheroo', $new_state);

  // Clear caches and direct to second clear cache callback.
  switcheroo_clear_cache();
  drupal_goto('admin/config/development/switcheroo/switch');
}

/**
 * Process the switch by clearing the caches a second time and return to form.
 */
function switcheroo_switch_process() {
  switcheroo_clear_cache();
  drupal_set_message(t('Modules have been switched.'));
  drupal_goto('admin/config/development/switcheroo');
}

/**
 * Get the override state of a module.
 *
 * @param $module
 *   Module name.
 * @return
 *   TRUE if the module is being overriden with core, otherwise FALSE.
 */
function switcheroo_state_get($module) {
  $state = variable_get('switcheroo', array());
  return isset($state[$module]) ? (bool) $state[$module] : FALSE;
}

/**
 * Get a list of modules to be overidden.
 *
 * @return
 *   List of modules to be overriden.
 */
function switcheroo_overrides_get() {
  return array_keys(array_filter(variable_get('switcheroo', array())));
}

/**
 * Set a modules to be overriden with core.
 *
 * @param $module
 *   Module name.
 * @param $override
 *   TRUE to override with core, otherwise FALSE to use default behavior.
 */
function switcheroo_state_set($module, $override) {
  $state = variable_get('switcheroo', array());
  $state[$module] = (bool) $override;
  variable_set('switcheroo', $state);
}

/**
 * Clear Drupal caches and change active testing API version.
 *
 * Due to the complexity of the switch this function must be called twice. The
 * first time simply to change the testing API version and the second to
 * complete the switch.
 */
function switcheroo_clear_cache() {
  // Use the built in system form to ensure that any addon modules are cleared.
  module_load_include('admin.inc', 'system');
  $form_state = array();
  $form_state['values'] = array('op' => t('Clear all caches'));
  drupal_form_submit('system_performance_settings', $form_state);

  // Hide the cache clearing messages.
  drupal_get_messages();
}

/**
 * Implement hook_registry_files_alter().
 */
function switcheroo_registry_files_alter(&$files, $modules) {
  // Only bother processing if some modules have been overriden.
  if ($overrides = switcheroo_overrides_get()) {
    // Get the directories in which the modules being overriden reside.
    $directories = array();
    foreach ($modules as $module) {
      if (in_array($module->name, $overrides)) {
        $directories[$module->name] = $module->dir;
      }
    }

    // Cycle through all the files and move or delete the ones belonging to
    // modules that are being overriden.
    foreach ($files as $key => $file) {
      // Check to see if file is apart of a module that is to be overriden with
      // its counterpart in core.
      if (in_array($file['module'], $overrides)) {
        // Change the file path to the modules directory.
        $new_key = str_replace($directories[$file['module']], 'modules/' . $file['module'], $key);

        // Only bother if there was a change in the key.
        if ($new_key != $key) {
          // If the new file exists then copy its definition to the new location.
          if (file_exists($new_key)) {
            $files[$new_key] = $file;
          }

          // Remove the old file since that module is not longer enabled.
          unset($files[$key]);
        }
      }
    }
  }
}

/**
 * Implement hook_system_modules_alter().
 */
function switcheroo_system_modules_alter(&$modules) {
  if ($overrides = switcheroo_overrides_get()) {
    $core = file_scan_directory('modules', '/.*.module/m', array('key' => 'name'));
    foreach ($overrides as $module) {
      if (isset($modules[$module]) && isset($core[$module])) {
        $modules[$module]->uri = $core[$module]->uri;
      }
    }
  }
}
