<?php

/**
 * @file
 * Allow nodequeues to have suggestions queues attached, which can be moderated.
 */

/**
 * Implements hook_menu().
 */
function nodequeue_suggestions_menu() {
  $items = array();

  $admin_access = array('administer nodequeue');
  $access = array('manipulate queues');

  $items['admin/structure/nodequeue/suggestions'] = array(
    'title' => 'Suggestions',
    'page callback' => 'nodequeue_suggestions_queue_list',
    'access arguments' => $access,
    'weight' => -10,
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/structure/nodequeue/%nodequeue/moderate/%subqueue'] = array(
    'title' => 'Moderate123',
    'page callback' => 'nodequeue_suggestions_moderate',
    'page arguments' => array(3, 5),
    'access callback' => 'nodequeue_queue_access',
    'access arguments' => array(3, 5),
    'weight' => -10,
    'tab parent' => 'admin/structure/nodequeue/%',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Lists all queues and subqueue that can be moderated.
 *
 * @return string
 *   themed page
 */
function nodequeue_suggestions_queue_list() {
  module_load_include('inc', 'nodequeue', 'includes/nodequeue.admin');
  $suggestion_queues = variable_get('nodequeue_suggestions_queues', array());

  drupal_set_title(t("Nodequeue suggestions"), PASS_THROUGH);
  $queues = array();
  foreach ($suggestion_queues as $key => $value) {
    if (!empty($value)) {
      $nq = nodequeue_load_queue_by_name($key);
      if (nodequeue_queue_access($nq->qid)) {
        $nq->suggestion_queue = $value;
        $queues[] = $nq;
      }
    }
  }
  return nodequeue_suggestions_view_subqueues($queues);
}

/**
 * Display a list of subqueues for a queue and their sizes.
 *
 * @param array $queues
 *   if nodequeues
 *
 * @return string
 *   themed output for rendering the page
 */
function nodequeue_suggestions_view_subqueues($queues) {
  $output = '';
  foreach ($queues as $queue) {
    $output .= '<h1>' . $queue->title . '</h1>';
    // Fetch all of the subqueues.
    $subqueues = nodequeue_load_subqueues_by_queue($queue->qid);

    $header = array(
      t('Title'),
      t('In queue'),
      t('Suggestions'),
      t('Operations'),
    );

    $rows = array();
    foreach ($subqueues as $subqueue) {
      if (nodequeue_api_subqueue_access($subqueue, NULL, $queue)) {
        $sub_text = nodequeue_subqueue_size_text($queue->size, $subqueue->count, FALSE);

        $suggestion_queue = nodequeue_load_queue_by_name($queue->suggestion_queue);

        $subqueues = nodequeue_load_subqueues_by_reference(array($suggestion_queue->qid => array($subqueue->reference)));
        $suggestion_subqueue = current($subqueues);
        $sub_suggestions_text = nodequeue_subqueue_size_text($suggestion_queue->size, $suggestion_subqueue->count, FALSE);

        $rows[] = array(
          array(
            'class' => array('nodequeue-title'),
            'data' => check_plain($subqueue->title)),
          array(
            'class' => array('nodequeue-subqueues'),
            'data' => $sub_text),
          array(
            'class' => array('nodequeue-subqueues-suggestions'),
            'data' => $sub_suggestions_text),
          array(
            'class' => array('nodequeue-operation'),
            'data' => l(t('Moderate'), "admin/structure/nodequeue/$queue->qid/moderate/$subqueue->sqid")),
        );
      }
    }

    $output .= '<p>' . t('Max nodes in queue: @size', array(
          '@size' => $queue->size ? $queue->size : t("Infinite")))
        . '</p>';
    $output .= theme('table', array('header' => $header, 'rows' => $rows));
    $output .= theme('pager', array('tags' => NULL));
  }
  return $output;
}

/**
 * Page callback for the suggestions moderation page.
 *
 * @param object $queue
 *   Nodequeue.
 * @param object $subqueue
 *   Subqueue.
 *
 * @return string
 *   Returns the suggestion moderation form.
 */
function nodequeue_suggestions_moderate($queue, $subqueue) {
  module_load_include('inc', 'nodequeue', 'includes/nodequeue.admin');

  drupal_set_title(t("Moderation of suggestions in '@subqueue'", array('@subqueue' => $subqueue->title)), PASS_THROUGH);
  drupal_set_breadcrumb(array(
    l(t('Home'), '<front>'),
    l(t('Administration'), 'admin'),
    l(t('Structure'), 'admin/structure'),
    l(t('Nodequeue'), 'admin/structure/nodequeue'),
    l(t('Suggestions'), 'admin/structure/nodequeue/suggestions'),
  ));

  $suggestion_queues = variable_get('nodequeue_suggestions_queues', array());
  if (!isset($suggestion_queues[$queue->name])) {
    return t('Error, nodequeue not found.');
  }
  $suggestions_queue_name = $suggestion_queues[$queue->name];
  $suggestion_queue = nodequeue_load_queue_by_name($suggestions_queue_name);

  $subqueues = nodequeue_load_subqueues_by_reference(array($suggestion_queue->qid => array($subqueue->reference)));
  $suggestion_subqueue = current($subqueues);

  $nodes = _nodequeue_dragdrop_get_nodes($queue, $subqueue);
  // Reset node_load cache.
  node_load(NULL, NULL, TRUE);
  $suggestion_nodes = _nodequeue_dragdrop_get_nodes($suggestion_queue, $suggestion_subqueue);

  foreach ($nodes as $nid => $node) {
    // If node exists in both subqueues, the node in the suggestions is ignored.
    if (array_key_exists($nid, $suggestion_nodes)) {
      unset($suggestion_nodes[$nid]);
      nodequeue_subqueue_remove_node($suggestion_queue->qid, $nid);
    }
  }
  return drupal_get_form(
    'nodequeue_suggestions_moderate_form',
    $queue->qid,
    array($queue->qid => $queue, $suggestion_queue->qid => $suggestion_queue),
    array($subqueue->sqid => $subqueue, $suggestion_subqueue->sqid => $suggestion_subqueue),
    array($subqueue->sqid => $nodes, $suggestion_subqueue->sqid => $suggestion_nodes)
  );
}

/**
 * Creates the form used for moderation of the suggestions.
 *
 * @param array $form
 *   The form array.
 * @param array $form_state
 *   The form state array.
 * @param int $main_qid
 *   Queue ID of the main queue.
 * @param array $queue_list
 *   List of queues, indexed by qid.
 * @param array $subqueue_list
 *   List of subqueues, indexed by sqid.
 * @param array $nodes_list
 *   List of nodes, indexed by sqid.
 *
 * @return array
 *   The form array.
 */
function nodequeue_suggestions_moderate_form($form, $form_state, $main_qid, $queue_list, $subqueue_list, $nodes_list) {
  $form = array('#tree' => TRUE);
  $form['nodes'] = array();

  $count = 0;

  $form['nodes']['#main_qid'] = $main_qid;

  $form['nodes']['#subqueues'] = array();
  foreach ($subqueue_list as $sqid => $subqueue) {
    $subqueues[$sqid] = $queue_list[$subqueue->qid]->title . ': ' . $subqueue->title;
    $form['nodes']['#subqueues'][$sqid] = (array) $subqueue;
    $count += count($nodes_list[$sqid]);
  }

  $form['nodes']['#theme'] = 'nodequeue_suggestions_moderate_form_table';

  $form['nodes']['#queues'] = array();
  foreach ($queue_list as $sqid => $queue) {
    $form['nodes']['#queues'][$sqid] = (array) $queue;
  }

  foreach ($subqueue_list as $sqid => $subqueue) {

    foreach ($nodes_list[$sqid] as $node) {
      $num_nodes = count($nodes_list[$sqid]);

      $form['nodes'][$node->nid]['#node'] = (array) $node;
      if ($node->visible) {
        $form['nodes'][$node->nid]['#node'] = (array) $node;
        $form['nodes'][$node->nid]['title'] = array('#markup' => l($node->title, 'node/' . $node->nid));
        $form['nodes'][$node->nid]['author'] = array('#markup' => theme('username', array('account' => $node)));
        $form['nodes'][$node->nid]['date'] = array('#markup' => format_date($node->created, 'short'));
      }
      else {
        $form['nodes'][$node->nid]['title'] = array(
          '#value' => t('Restricted node, NID: @nid', array('@nid' => $node->nid)),
        );
        $form['nodes'][$node->nid]['author'] = array('#value' => '');
        $form['nodes'][$node->nid]['date'] = array('#value' => '');
      }

      if (node_access('update', $node)) {
        $form['nodes'][$node->nid]['edit'] = array(
          '#markup' => l(t('edit'), 'node/' . $node->nid . '/edit',
              array('attributes' => array('title' => t('Edit this node')))
          ),
        );
      }
      $form['nodes'][$node->nid]['position'] = array(
        '#type' => 'position',
        '#delta' => $count,
        // Reversing position for reversed queues.
        '#default_value' => $queue->reverse ? $num_nodes - ($node->position - 1) : $node->position,
        '#attributes' => array(
          'class' => array('node-position', 'node-position-' . $subqueue->sqid),
        ),
      );

      $form['nodes'][$node->nid]['subqueue'] = array(
        '#type' => 'select',
        '#options' => $subqueues,
        '#default_value' => $subqueue->sqid,
        '#attributes' => array(
          'class' => array('subqueue-select', 'subqueue-' . $subqueue->sqid),
        ),
      );

      $attr = array(
        '#attributes' => array(
          'title' => t('Remove from queue'),
          'style' => 'display: none;',
          'class' => array('nodequeue-remove'),
          'id' => 'nodequeue-remove-' . $node->nid,
        ),
        'query' => nodequeue_get_query_string($node->nid, TRUE),
      );
      $form['nodes'][$node->nid]['remove'] = array(
        '#markup' => l(
          t('remove'),
          'nodequeue/' . $queue->qid . '/remove-node/' . $subqueue->sqid . '/' . $node->nid,
          $attr
        ),
      );
    }
  }

  // Submit action.
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#submit' => array('nodequeue_suggestions_moderate_form_submit'),
  );

  return $form;
}

/**
 * Implements hook_theme().
 */
function nodequeue_suggestions_theme() {
  return array(
    'nodequeue_suggestions_moderate_form_table' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Theme the suggestion queue overview as a sortable list.
 *
 * @ingroup themeable
 */
function theme_nodequeue_suggestions_moderate_form_table($variables) {
  // Set header labels.
  $header = array(
    t('Title'),
    t('Author'),
    t('Post Date'),
    t('Position'),
    array(
      'data' => t('Operations'),
      'colspan' => 2,
    ),
    t('Position'),
  );

  $form = $variables['form'];
  $nodes = array();
  $subqueues = array();

  // Make a list of subqueues.
  foreach (element_children($form['#subqueues']) as $sqid) {
    $subqueues[$sqid] = $form['#subqueues'][$sqid];
    $subqueues[$sqid]['queue'] = $form['#queues'][$subqueues[$sqid]['qid']];
  }

  // Make a structured array of nodes based on subqueue.
  foreach (element_children($form) as $nid) {
    $sqid = $form[$nid]['subqueue']['#default_value'];
    $nodes[$sqid][$nid] = $form[$nid];
  }

  drupal_add_css(drupal_get_path('module', 'nodequeue_suggestions') . '/nodequeue_suggestions.css');

  // Set up nodequeue specific classes, JS, settings etc.
  $table_id = 'nodequeue_suggestions_dragdrop';
  $table_classes = array(
    'nodequeue-suggestions-dragdrop',
  );
  drupal_add_js(drupal_get_path('module', 'nodequeue_suggestions') . '/nodequeue_suggestions.js');
  $reverse[str_replace('-', '_', $table_id)] = (bool) $form['#queues'][$form['#main_qid']]['reverse'];
  drupal_add_js(
    array(
      'nodequeue' => array(
        'reverse' => $reverse,
      ),
    ),
    array(
      'type' => 'setting',
      'scope' => JS_DEFAULT,
    )
  );

  // Render form as table rows.
  $rows = array();
  $counter = 1;
  foreach ($subqueues as $sqid => $subqueue) {
    // Add a tabledrag for both subqueue and position fields.
    drupal_add_tabledrag($table_id, 'match', 'sibling', 'subqueue-select', 'subqueue-' . $sqid, NULL, TRUE);
    drupal_add_tabledrag($table_id, 'order', 'sibling', 'node-position', 'node-position-' . $sqid, NULL, TRUE);
    // Add a title row for each queue.
    $rows[] = array(
      'data' => array(
        array(
          'data' => '<strong>' . check_plain($subqueue['queue']['title']) . ': ' . check_plain($subqueue['title']) . '</strong>',
          'colspan' => count($header),
        ),
      ),
      'class' => array('region-title', 'region-title-' . $sqid),
    );

    $region_status = !isset($nodes[$sqid]) || !count($nodes[$sqid]) ? 'region-empty' : 'region-populated';
    $rows[] = array(
      'class' => array(
        $region_status,
        'region-message',
        'region-' . $sqid . '-message',
      ),
      'data' => array(
        'data' => array(
          'data' => t('No nodes in this queue.'),
          'colspan' => count($header),
        ),
      ),
    );

    // Fill content into table cells.
    if (isset($nodes[$sqid])) {
      foreach ($nodes[$sqid] as $nid => $node) {
        if (isset($node['title'])) {
          $row = array();
          $row[] = drupal_render($node['title']);
          $row[] = drupal_render($node['author']);
          $row[] = drupal_render($node['date']);
          $row[] = drupal_render($node['position']);
          $row[] = array('data' => drupal_render($node['subqueue']), 'class' => array('tabledrag-hide'));
          $row[] = (!empty($node['edit'])) ? drupal_render($node['edit']) : '&nbsp;';
          $row[] = drupal_render($node['remove']);
          $row[] = array(
            'data' => $counter,
            'class' => array('position'),
          );
          $rows[] = array(
            'data' => $row,
            'class' => array('draggable'),
          );
        }
        $counter++;
      }
    }
  }
  // Render the main nodequeue table.
  $output = theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array(
      'id' => $table_id,
      'class' => $table_classes),
    )
  );
  return $output;
}

/**
 * Implements hook_form_FORM_ID_alter() for nodequeue_edit_queue_form().
 */
function nodequeue_suggestions_form_nodequeue_edit_queue_form_alter(&$form, &$form_state) {
  // Add weight to all elements, because nodequeue developers were too lazy.
  $weight = (int) ceil(count(element_children($form)) / -2);
  foreach (element_children($form) as $key) {
    $form[$key]['#weight'] = $weight * 5;
    $weight++;
  }

  // Get a list of all node queues.
  $nodequeues = nodequeue_load_queues(nodequeue_get_all_qids());
  $options = array();
  foreach ($nodequeues as $value) {
    if (empty($form['name']['#value']) || $form['name']['#value'] != $value->name) {
      $options[$value->name] = $value->title;
    }
  }

  // Load variable with suggestion queue mapping.
  $enabled_queues = variable_get('nodequeue_suggestions_queues', array());

  // If the queue is used as suggestion queue for another queue, disable the
  // 'reverse' field.  Else add the suggestion queue checkbox and selector to
  // the configuration form.
  if (isset($form['name']['#value']) && $main_queue_name = array_search($form['name']['#value'], $enabled_queues)) {
    $main_queue = nodequeue_load_queue_by_name($main_queue_name);
    $form['suggestions_text'] = array(
      '#markup' => '<p>' . t('This queue contains suggestions for the <strong>@nodequeue</strong> nodequeue.', array('@nodequeue' => $main_queue->title)) . '</p>',
      '#weight' => $form['name']['#weight'] + 1,
    );
    $form['reverse']['#disabled'] = TRUE;
    $form['reverse']['#description'] = t('This setting is inherited from the <strong>@nodequeue</strong> nodequeue.', array('@nodequeue' => $main_queue->title));
  }
  else {
    $form['suggestions_enabled'] = array(
      '#type' => 'checkbox',
      '#title' => t('Has suggestion queues attached'),
      '#description' => t('Select the nodequeues which should have an suggestions queue attached and allow moderation'),
      '#default_value' => isset($form['name']['#value']) && array_key_exists($form['name']['#value'], $enabled_queues),
      '#weight' => $form['submit']['#weight'] - 2,
    );
    $form['suggestions_queue'] = array(
      '#type' => 'select',
      '#title' => t('Nodequeue with suggestion nodes'),
      '#options' => $options,
      '#description' => t('Select the nodequeues which should have an suggestions queue attached and allow moderation'),
      '#default_value' => isset($form['name']['#value']) && array_key_exists($form['name']['#value'], $enabled_queues) ? $enabled_queues[$form['name']['#value']] : NULL,
      '#weight' => $form['submit']['#weight'] - 1,
      '#states' => array(
        'visible' => array(
          ':input[name="suggestions_enabled"]' => array('checked' => TRUE),
        ),
      ),
    );
  }

  $form['#validate'][] = 'nodequeue_suggestions_edit_queue_form_validate';
  $form['#submit'][] = 'nodequeue_suggestions_edit_queue_form_submit';
}

/**
 * Validate callback for the nodequeue edit form.
 */
function nodequeue_suggestions_edit_queue_form_validate(&$form, &$form_state) {
  // Set the reference of the new queue to is own name if owner is nodequeue.
  if ($form_state['values']['suggestions_enabled'] && $form_state['values']['owner'] == 'nodequeue') {
    $form_state['values']['reference'] = $form_state['values']['name'];
  }
}

/**
 * Submit handler for the extra fields in the nodequeue_edit_queue_form().
 */
function nodequeue_suggestions_edit_queue_form_submit(&$form, &$form_state) {
  // Load variable with suggestion queue mapping.
  $queues = variable_get('nodequeue_suggestions_queues', array());

  if (!empty($form_state['values']['suggestions_enabled'])) {
    $queues[$form_state['values']['name']] = $form_state['values']['suggestions_queue'];

    // Load suggestion queue and update it's reverse flag.
    $suggestion_queue = nodequeue_load_queue_by_name($form_state['values']['suggestions_queue']);
    $suggestion_queue->reverse = $form_state['values']['reverse'];

    if ($form_state['values']['owner'] == 'nodequeue') {
      // Force the same reference to queues if owned by nodequeue.
      $main_queue = nodequeue_load_queue_by_name($form_state['values']['name']);
      $main_queue->reference = $form_state['values']['name'];
      $suggestion_queue->reference = $form_state['values']['name'];
      nodequeue_save($main_queue);

      // Remove existing subqueues and add new ones with proper references.
      $main_subqueues = nodequeue_load_subqueues_by_queue($main_queue->qid);
      foreach ($main_subqueues as $sq) {
        nodequeue_remove_subqueue($sq->sqid);
      }
      nodequeue_add_subqueue($main_queue, $main_queue->title, $main_queue->name);
      $suggestion_subqueues = nodequeue_load_subqueues_by_queue($suggestion_queue->qid);
      foreach ($suggestion_subqueues as $sq) {
        nodequeue_remove_subqueue($sq->sqid);
      }
      nodequeue_add_subqueue($suggestion_queue, $main_queue->title, $main_queue->name);
    }

    nodequeue_save($suggestion_queue);
  }
  else {
    unset($queues[$form_state['values']['name']]);
  }
  // Update variable with suggestion queue mapping.
  variable_set('nodequeue_suggestions_queues', $queues);
}

/**
 * Validate handler for nodequeue_suggestions_moderate_form.
 */
function nodequeue_suggestions_moderate_form_validate($form, &$form_state) {
  $sqids = array_keys($form['nodes']['#subqueues']);

  $positions = array();
  foreach ($form_state['values']['nodes'] as $nid => $element) {
    if (is_numeric($nid) && is_numeric($element['position'])) {
      $positions[$element['subqueue']][$nid] = $element['position'];
    }
  }
  foreach ($sqids as $sqid) {
    if (isset($positions[$sqid]) && count(array_unique($positions[$sqid])) < count($positions[$sqid])) {
      $seen = array();
      foreach ($positions[$sqid] as $nid => $position) {
        if (isset($seen[$sqid][$position])) {
          form_set_error($nid . '][position', t('Duplicate position value.'));
        }
        $seen[$sqid][$position] = TRUE;
      }
    }
  }
}

/**
 * Submit handler for nodequeue suggestions drag'n'drop form.
 */
function nodequeue_suggestions_moderate_form_submit($form, &$form_state) {
  $queues = nodequeue_load_queues(array($form['nodes']['#main_qid']));
  $queue = current($queues);
  $num_nodes = count($form_state['values']['nodes']);
  foreach (array_keys($form['nodes']['#subqueues']) as $sqid) {
    $nodes = array();
    foreach ($form_state['values']['nodes'] as $nid => $element) {
      if (is_numeric($nid) && $form_state['values']['nodes'][$nid]['subqueue'] == $sqid) {
        // Reversing position for reversed queues.
        if ($queue->reverse) {
          $form_state['values']['nodes'][$nid]['position'] = $num_nodes - ($form_state['values']['nodes'][$nid]['position'] - 1);
        }
        $nodes[$form_state['values']['nodes'][$nid]['position']] = array(
          'nid' => $nid,
          'data' => $form_state['values']['nodes'][$nid],
        );
      }
    }
    $message = 'The queue has been updated.';
    $qid = $form['nodes']['#subqueues'][$sqid]['qid'];
    nodequeue_save_subqueue_order($nodes, $qid, $sqid);
  }
  drupal_set_message(t('@message', array('@message' => $message)));
}

/**
 * Implements hook_nodequeue_delete().
 */
function nodequeue_suggestions_nodequeue_delete($queue) {
  $queues = variable_get('nodequeue_suggestions_queues', array());
  // Remove the suggestion mapping if the main queue is deleted.
  if (array_key_exists($queue->name, $queues)) {
    unset($queues[$queue->name]);
    variable_set('nodequeue_suggestions_queues', $queues);
  }
  // Remove the suggestion mapping if the suggeestion queue is deleted.
  if (($key = array_search($queue->name, $queues)) !== FALSE) {
    unset($queues[$key]);
    variable_set('nodequeue_suggestions_queues', $queues);
  }
}
