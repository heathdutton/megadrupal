<?php

/**
 * @file
 * This file holds drupal_hook's implementations . 
 */

/**
 * Implements hook_menu().
 */
function sn_block_visualizer_menu() {

  $items["admin/structure/block/list/%/snblockvisualize"] = array(
    'title' => 'Theme Visualizer',
    'description' => 'Configure ',
    'page arguments' => array(4),
    'page callback' => 'sn_block_visualizer_custom_demo',
    'access arguments' => array('administer blocks'),
    'type' => MENU_CALLBACK,
    'theme callback' => '_snvisualize_custom_theme',
    'theme arguments' => array(4),
  );
  $items["snblockvisualize/save/block"] = array(
    'title' => 'SN Block Visualize - save block',
    'page callback' => 'sn_block_visualizer_save_block',
    'page arguments' => array(1),
    'access arguments' => array('administer blocks'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_admin_paths_alter().
 */
function sn_block_visualizer_admin_paths_alter(&$paths) {
  $paths['admin/structure/block/list/*/snblockvisualize'] = FALSE;
}

/**
 * Implementation theme callback for menu.
 */
function _snvisualize_custom_theme($theme = NULL) {
  return $theme;
}

/**
 * Implements menu callback.
 */
function sn_block_visualizer_custom_demo($theme) {
  // Drupal_add_css(drupal_get_path('module', 'block') . '/block.css');
  return '';
}

/**
 * Implements hook_page_alter().
 */
function sn_block_visualizer_page_alter(&$page) {

  foreach (list_themes(TRUE) as $theme_name => $theme) {
    // Selective - tabs only on block page.
    if (
            $_GET['q'] == 'admin/structure/block' || $_GET['q'] == 'admin/structure/block/list/' . $theme_name || $_GET['q'] == 'admin/structure/block/list/' . $theme_name . '/default'
    ) {
      // Do something for the root admin page.
      if ($_GET['q'] == 'admin/structure/block') {
        $theme_name = variable_get('theme_default', 'bartik');
      }
      $help_markup = $page['help']['system_help']['#markup'];
      $list = array();
      $list[] = l(t('Default'), 'admin/structure/block/list/' . $theme_name . '/default');
      $list[] = l(t('SN Block Visualizer'), 'admin/structure/block/list/' . $theme_name . '/snblockvisualize');

      $help_markup = theme('item_list', array(
          'type' => 'UL',
          'items' => $list,
          'attributes' => array(
            'class' => array('secondary'))))
            . '<br />'
            . $help_markup;

      $page['help']['system_help']['#markup'] = $help_markup;
      break;
    }
    elseif ($_GET['q'] == 'admin/structure/block/list/' . $theme_name . '/snblockvisualize') {
      $visible_regions = array_keys(system_region_list($theme_name, REGIONS_VISIBLE));
      foreach ($visible_regions as $value) {
        $page[$value] = array(
          "#prefix" => "<div class='sn-region-container' rel='" . $value . "'>",
          "#suffix" => '</div>',
          "description" => isset($page[$value]) ? $page[$value] : '');
      }
    }
  }
}

/**
 * Implements hook_page_build().
 *
 * Renders blocks into their regions.
 */
function sn_block_visualizer_page_build(&$page) {
  global $user;
  global $theme;
  $user_permission = user_access('administer blocks', $user);
  // The theme system might not yet be initialized. We need $theme.
  drupal_theme_initialize();
  // Fetch a list of regions for the current theme.
  $all_regions = system_region_list($theme);
  $item = menu_get_item();
  if ($item['path'] == 'admin/structure/block/list/%/snblockvisualize') {
    if ($user_permission == 1) {
      // Append region description if we are rendering the regions demo page.
      $visible_regions = array_keys(system_region_list($theme, REGIONS_VISIBLE));
      foreach ($visible_regions as $region) {
        $a[] = block_list($region);
        $description = $all_regions[$region];
        $page[$region]['block_description'] = array(
          '#markup' => "<div class='sn-block-region droppable' rel='" . $region . "'>" . $description . "</div>",
          '#weight' => -1000,
        );
      }
      $page['page_bottom']['block_slides'] = sn_block_visualizer_custom_blocklist($theme);
      $page['page_top']['backlink'] = array(
        '#prefix' => "<div class='sn-overlay'>",
        '#suffix' => "</div>");
      $page['page_top']['backlink']['link'] = array(
        '#type' => 'link',
        '#title' => t('Exit SN Block Visualizer'),
        '#href' => 'admin/structure/block' . (variable_get('theme_default', 'bartik') == $theme ? '' : '/list/' . $theme),
      // Add the "overlay-restore" class to indicate this link should restore
      // the context in which the region demonstration page was opened.
        '#weight' => -10,
      );
      $page['page_top']['backlink']['ddl'] = array(
        '#prefix' => "<div class='sn-inline'>",
        '#suffix' => '</div>',
        '#type' => 'select',
        '#value' => arg(4),
        '#title_display' => 'invisible',
        '#attributes' => array('onchange' => 'window.location.href = Drupal.settings.basePath + "admin/structure/block/list/"+this.value+"/snblockvisualize"'),
        '#options' => sn_block_visualizer_enabled_themes(),
      );
    }
  }
}

/**
 * Function that lists out all the enabled themes.
 * 
 * @return array 
 *   $theme_list - list of all enabled themes.
 */
function sn_block_visualizer_enabled_themes() {
  $themes_enabled = list_themes();
  foreach ($themes_enabled as $key => $value) {
    if ($value->status == 1) {
      $list[] = $value->info['name'];
      $list_value[] = $value->name;
    }
  }
  $theme_list = array_combine($list_value, $list);
  return $theme_list;
}

/**
 * Function to fetch regions for the selected theme and blocks.
 */
function sn_block_visualizer_custom_blocklist($theme) {

  module_load_include('inc', 'block', 'block.admin');
  // The theme system might not yet be initialized. We need $theme.
  drupal_theme_initialize();

  // Fetch a list of regions for the current theme.
  $all_regions = system_region_list($theme);

  // Fetch and sort blocks.
  $blocks = block_admin_display_prepare_blocks($theme);

  $form = array();
  $blocks_data = array();
  $block_name_new = '';
  foreach (element_children($blocks) as $key) {
    $region = $blocks[$key]['region'];
    if ($region == BLOCK_REGION_NONE) {
      $block_name = ($blocks[$key]['module'] . '_' . $blocks[$key]['delta']);
      $block_data = block_load($blocks[$key]['module'], $blocks[$key]['delta']);
      $render_array = _block_get_renderable_array(_block_render_blocks(array($block_data)));
      $output = render($render_array);
      if (empty($output)) {
        $output = "<h2>" . $blocks[$key]['info'] . "</h2><span>No Preview Available</span>";
      }
      $block_name_new .= '<div class="sn-block-title" rel="' . $blocks[$key]['bid'] . '">' . $output . '</div>';
    }
  }
  // Add this module's JS.
  drupal_add_library('system', 'jquery.form');
  drupal_add_library('system', 'drupal.ajax');
  drupal_add_library('system', 'ui.draggable');
  drupal_add_library('system', 'ui.sortable');
  drupal_add_library('system', 'ui.droppable');

  $path = drupal_get_path('module', 'sn_block_visualizer');
  drupal_add_js($path . '/sn_block_visualizer.js');

  $form['blocks'] = array(
    '#title' => t('Block List'),
    '#markup' => theme('sn_block_visualizer_block',
              array(
                'blocks' => $block_name_new,
              )),
  );

  return $form;
}

/**
 * Implements hook_theme().
 */
function sn_block_visualizer_theme() {
  $theme = array();
  $theme['sn_block_visualizer_block'] = array(
    'template' => 'sn_block_visualizer-block',
    'variables' => array('blocks_data' => NULL, 'regions_data' => NULL),
  );
  return $theme;
}

/**
 * Function to save blocks in regions.
 */
function sn_block_visualizer_save_block($option) {
  $blocks = (json_decode($_POST['blocks']));
  $transaction = db_transaction();
  foreach ($blocks as $block) {
    try {
      $status = (int) ($block->region != BLOCK_REGION_NONE);

      $result = db_update('block')->fields(array(
                  'status' => $status,
                  'weight' => $block->weight,
                  'region' => $block->region,
              ))->condition('bid', $block->bid)->execute();
    }
    catch (Exception $e) {
      $transaction->rollback();
      watchdog_exception('block', $e);
      throw $e;
    }
  }
  cache_clear_all();
  echo $result . t('The block settings have been updated.');
}

/**
 * Function to add custom container by prefix and suffix.
 */
function sn_block_visualizer_block_view_alter(&$data, $block) {
  if (arg(5) == 'snblockvisualize' && $block->status == 1) {
    if (!empty($data['content'])) {
      if (!is_array($data['content'])) {
        $data['content'] = '<div class="sortable-helper" rel="' . $block->bid . '">' . $data['content'] . '</div>';
      }
      else {
        $data['content']['#prefix'] = '<div class="sortable-helper" rel="' . $block->bid . '">';
        $data['content']['#suffix'] = '</div>';
      }
    }
    else {
      $data['content'] = '<div class="sortable-helper" rel="' . $block->bid . '">No Preview Available</div>';
    }
  }
}

/**
 * Function to reperesent the variables in formatted way.
 */
function pr($var) {
  print "<pre>";
  print_r($var);
  print "</pre>";
}
