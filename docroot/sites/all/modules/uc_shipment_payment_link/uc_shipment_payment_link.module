<?php
/**
 * @file
 * Module main file.
 */

/**
 * Implements hook_menu().
 */
function uc_shipment_payment_link_menu() {
  $items = array();

  $items['admin/store/settings/shipment_payment'] = array(
    'title' => 'Shipment-Payment Link',
    'description' => 'Link shipping quotes to payment methods',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_shipment_payment_link_settings_form'),
    'access arguments' => array('configure quotes'),
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function uc_shipment_payment_link_theme($existing, $type, $theme, $path) {
  return array(
    'uc_shipment_payment_link_settings_form' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Form constructor for the administration settings form.
 *
 * @see uc_shipment_payment_link_settings_form_submit()
 *
 * @ingroup forms
 */
function uc_shipment_payment_link_settings_form() {
  if (variable_get('uc_use_next_buttons', FALSE)) {
    drupal_set_message(t('The UC Shipment-Payment Link module is not compatible with the <em>Use collapsing checkout panes with Next buttons</em> setting in <a href="@settings">Store Checkout settings</a>.',
      array('@settings' => url('admin/store/settings/checkout'))), 'warning');
  }

  $form = array();
  $form['links'] = array();
  $form['links']['#tree'] = TRUE;

  $form['description'] = array(
    '#type' => 'markup',
    '#markup' => '<p>'. t('Choose which payment methods are allowed in combination with which shipping methods. Those with an enabled checkbox will be allowed to be selected by the user. Those with a disabled checkbox will disappear from the checkout pane when the associated shipping method is selected.') .'</p>',
  );

  foreach (uc_quote_methods(TRUE) as $shipping_key => $shipping) {
    $form['links'][$shipping_key]['#title'] = array(
      '#type' => 'markup',
      '#markup' => check_plain($shipping['title']),
    );
    foreach (_uc_payment_method_list() as $payment_key => $payment) {
      $default = db_query("SELECT allowed FROM {uc_shipment_payment_link} WHERE shipping_key = :shipping AND payment_key = :payment", array(
        ':shipping' => $shipping_key,
        ':payment' => $payment_key,
      ))->fetchField();
      $form['links'][$shipping_key][$payment_key] = array(
        '#type' => 'checkbox',
        '#default_value' => ($default === FALSE) ? 1 : $default,
      );
    }
  }

  $form['#theme'] = 'uc_shipment_payment_link_settings_form';
  $form['#submit'][] = 'uc_shipment_payment_link_settings_form_submit';
  return system_settings_form($form);
}

/**
 * Returns HTML for the administration settings form.
 *
 * @param array $form
 *   The form array to be themed.
 *
 * @ingroup themeable
 */
function theme_uc_shipment_payment_link_settings_form($vars) {
  $form = $vars['form'];
  $payment_methods = _uc_payment_method_list();

  $header = array();
  $header[] = t('Shipping method');
  foreach ($payment_methods as $payment) {
    $header[] = check_plain($payment['name']);
  }

  $rows = array();
  foreach (element_children($form['links']) as $shipping_key) {
    $row = array();
    $row[] = render($form['links'][$shipping_key]['#title']);
    foreach ($payment_methods as $payment_key => $payment) {
      $row[] = render($form['links'][$shipping_key][$payment_key]);
    }
    $rows[] = $row;
  }

  $output = render($form['description']);
  $output .= theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'sticky' => TRUE,
    'empty' => t('No shipping methods available.'),
  ));
  $output .= drupal_render_children($form); 
  return $output;
}

/**
 * Form submission handler for uc_shipment_payment_link_settings_form().
 */
function uc_shipment_payment_link_settings_form_submit($form, &$form_state) {
  $combinations = $form_state['values']['links'];
  foreach ($combinations as $shipping_key => $shipping) {
    foreach ($shipping as $payment_key => $allowed) {
      db_merge('uc_shipment_payment_link')
        ->key(array(
          'shipping_key' => $shipping_key,
          'payment_key' => $payment_key,
        ))->fields(array(
          'allowed' => $allowed,
        ))->execute();
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for uc_cart_checkout_form().
 */
function uc_shipment_payment_link_form_uc_cart_checkout_form_alter(&$form, &$form_state) {
  drupal_add_js(drupal_get_path('module', 'uc_shipment_payment_link') .'/uc_shipment_payment_link.js', array('group' => JS_DEFAULT, 'preprocess' => FALSE));

  $allowed = array();
  $result = db_query('SELECT * FROM {uc_shipment_payment_link}')->fetchAll();
  foreach ($result as $item) {
    $allowed[$item->shipping_key][$item->payment_key] = $item->allowed;
  }
  drupal_add_js(array('uc_shipment_payment_link' => array('allowed' => $allowed)), array('type' => 'setting', 'group' => JS_DEFAULT));
}
