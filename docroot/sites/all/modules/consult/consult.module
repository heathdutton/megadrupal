<?php
/**
 * @file
 * Best answer module.
 */


define('CONSULT_INTERVIEW_ENTITY_NAME', 'consult_interview');

define('CONSULT_QUESTION_ENTITY_NAME', 'consult_question');

define('CONSULT_RESULT_ENTITY_NAME', 'consult_result');

/**
 * Implements hook_entity_info().
 */
function consult_entity_info() {
  $entities[CONSULT_INTERVIEW_ENTITY_NAME] = array(
    'label' => t('Interview'),
    'entity class' => 'ConsultInterview',
    'controller class' => 'ConsultInterviewController',
    'base table' => 'consultation',
    'module' => 'consult',
    'label callback' => 'entity_class_label',
    'access callback' => 'consult_access',
    'uri callback' => 'entity_class_uri',
    'fieldable' => FALSE,
    'entity keys' => array(
      'label' => 'label',
      'id' => 'name',
      'name' => 'name',
    ),
    'admin ui' => array(
      'path' => 'admin/structure/consult',
      'file' => 'consult.admin.inc',
      'controller class' => 'ConsultInterviewAdminUiController',
    ),
    'form callback' => 'consult_consultation_form',
    'bundles' => array(),
    'exportable' => TRUE,
  );
  $entities[CONSULT_QUESTION_ENTITY_NAME] = array(
    'label' => t('Question'),
    'entity class' => 'ConsultQuestion',
    'controller class' => 'ConsultQuestionController',
    'label callback' => 'entity_class_label',
    'base table' => 'consultation_question',
    'module' => 'consult',
    'access callback' => 'consult_access',
    'fieldable' => FALSE,
    'entity keys' => array(
      'label' => 'label',
      'id' => 'name',
      'name' => 'name',
    ),
    'bundles' => array(),
    'exportable' => TRUE,
  );
  $entities[CONSULT_RESULT_ENTITY_NAME] = array(
    'label' => t('Result'),
    'entity class' => 'ConsultResult',
    'controller class' => 'ConsultResultController',
    'label callback' => 'entity_class_label',
    'base table' => 'consultation_result',
    'module' => 'consult',
    'access callback' => 'consult_access',
    'fieldable' => FALSE,
    'entity keys' => array(
      'label' => 'label',
      'id' => 'name',
      'name' => 'name',
    ),
    'bundles' => array(),
    'exportable' => TRUE,
  );

  return $entities;
}

/**
 * Implements hook_menu().
 */
function consult_menu() {
  $items = array();

  $items['consult/%consult_interview'] = array(
    'title callback' => 'entity_label',
    'title arguments' => array(CONSULT_INTERVIEW_ENTITY_NAME, 1),
    'page callback' => 'consult_interview_page',
    'page arguments' => array(1),
    'access arguments' => array('view', 1),
    'access callback' => 'consult_access',
    'file' => 'consult.pages.inc',
  );

  $items['admin/structure/consult/manage/%consult_interview/summary'] = array(
    'title' => 'Truth table',
    'page callback' => 'consult_interview_truth_page',
    'page arguments' => array(4),
    'access arguments' => array('administer consult'),
    'file' => 'consult.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['consult/%consult_interview/js-settings'] = array(
    'title' => 'JavaScript settings for consult module',
    'page callback' => 'consult_interview_js_settings',
    'page arguments' => array(1),
    'access arguments' => array('view', 1),
    'access callback' => 'consult_access',
    'file' => 'consult.pages.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function consult_permission() {
  $permissions['administer consult'] = array(
    'title' => t('Administer Consult'),
    'description' => t('Access consultation overview page and add or create new consultations.'),
  );
  $permissions['view consult'] = array(
    'title' => t('View Consults'),
    'description' => t('View any consultation interview.'),
  );

  return $permissions;
}

/**
 * Access callback for Consult entities.
 */
function consult_access($op, $entity) {
  if (user_access('administer consult')) {
    return TRUE;
  }

  if ($op == 'view') {
    return user_access('view consult');
  }

  return FALSE;
}

/**
 * Implements hook_WILDCARD_load().
 */
function consult_interview_load($entity) {
  if (is_string($entity)) {
    $entity_name = str_replace('-', '_', $entity);
    $entity = entity_load_single(CONSULT_INTERVIEW_ENTITY_NAME, $entity_name);
  }

  return $entity;
}

/**
 * Implements hook_WILDCARD_load().
 */
function consult_question_load($entity) {
  if (is_string($entity)) {
    $entity_name = str_replace('-', '_', $entity);
    $entity = entity_load_single(CONSULT_QUESTION_ENTITY_NAME, $entity_name);
  }

  return $entity;
}


/**
 * Implements hook_WILDCARD_load().
 */
function consult_result_load($entity) {
  if (is_string($entity)) {
    $entity_name = str_replace('-', '_', $entity);
    $entity = entity_load_single(CONSULT_RESULT_ENTITY_NAME, $entity_name);
  }

  return $entity;
}

/**
 * Implements hook_theme().
 */
function consult_theme() {
  return array(
    'consult_interview' => array(
      'render element' => 'elements',
      'template' => 'theme/consult-interview',
    ),
    'consult_question' => array(
      'render element' => 'elements',
      'template' => 'theme/consult-question',
    ),
    'consult_result' => array(
      'render element' => 'elements',
      'template' => 'theme/consult-result',
    ),
  );
}

/**
 * Implements hook_library().
 */
function consult_library() {
  $libraries['consult'] = array(
    'title' => 'Consult javascript component',
    'website' => 'http://drupal.org/project/consult',
    'version' => '1',
    'js' => array(
      drupal_get_path('module', 'consult') . '/js/consult.js'  => array(),
    ),
    'css' => array(
      drupal_get_path('module', 'consult') . '/css/consult.css' => array(
        'type' => 'file',
        'media' => 'screen',
      ),
    ),
    'dependencies' => array(
      array('backbone_library', 'backbone'),
    ),
  );

  return $libraries;
}

/**
 * Implements template_preprocess_THEME_HOOK().
 *
 * Do not add to theme.inc file as theme_hook_suggestions will not load it.
 */
function consult_preprocess_entity(&$variables) {
  $type = $variables['entity_type'];

  switch ($type) {
    case CONSULT_INTERVIEW_ENTITY_NAME:
      _consult_preprocess_interview($variables);
      break;

    case CONSULT_RESULT_ENTITY_NAME:
      _consult_preprocess_result($variables);
      _consult_preprocess_sub_entity($variables);
      break;

    case CONSULT_QUESTION_ENTITY_NAME:
      _consult_preprocess_question($variables);
      _consult_preprocess_sub_entity($variables);
      break;
  }
}

/**
 * Preprocessor for interview entities.
 *
 * Do not add to theme.inc file as theme_hook_suggestions will not load it.
 */
function _consult_preprocess_interview(&$variables) {
  drupal_add_library('consult', 'consult');

  $entity = $variables[CONSULT_INTERVIEW_ENTITY_NAME];

  $variables['attributes_array']['data-interview-id'] = $entity->identifier();
  $variables['attributes_array']['class'][] = 'js-consult-interview';
  $variables['attributes_array']['class'][] = 'consult-interview--' . drupal_clean_css_identifier($entity->identifier());

  $variables['result_groups'] = $entity->getResultGroups();
  $variables['question_groups'] = $entity->getQuestionGroups();
}

/**
 * Preprocessor for interview entities.
 *
 * Do not add to theme.inc file as theme_hook_suggestions will not load it.
 */
function _consult_preprocess_result(&$variables) {
  $entity = $variables[CONSULT_RESULT_ENTITY_NAME];

  $variables['attributes_array']['data-result-id'] = $entity->identifier();
}

/**
 * Preprocessor for interview entities.
 *
 * Do not add to theme.inc file as theme_hook_suggestions will not load it.
 */
function _consult_preprocess_question(&$variables) {
  $entity = $variables[CONSULT_QUESTION_ENTITY_NAME];

  $variables['attributes_array']['data-question-id'] = $entity->identifier();
}

/**
 * Preprocessor for interview sub entities (questions and results).
 *
 * Do not add to theme.inc file as theme_hook_suggestions will not load it.
 */
function _consult_preprocess_sub_entity(&$variables) {
  $entity = $variables[$variables['entity_type']];

  $safe_group_name = str_replace(' ', '_', strtolower($entity->getGroupName()));

  // Add group based and interview based theme hook suggestions. Entity API
  // already provides a theme hook suggestion for entity-type__entity-id.
  $variables['theme_hook_suggestions'][] = CONSULT_QUESTION_ENTITY_NAME . '__' . $entity->interview->identifier();
  $variables['theme_hook_suggestions'][] = CONSULT_QUESTION_ENTITY_NAME . '__' . $safe_group_name;
  $variables['theme_hook_suggestions'][] = CONSULT_QUESTION_ENTITY_NAME . '__' . $entity->interview->identifier() . '__' . $safe_group_name;
}
