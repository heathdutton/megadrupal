<?php
/**
 * @file
 * Tests for interview Entity output.
 */

if (!class_exists('AibmWebTestCase') || !class_exists('AibmSeleniumWebTestCase')) {
  drupal_set_message(t('AIBM tests are not displayed because the aibm_test module is not enabled.'), 'warning', FALSE);

  return;
}

/**
 * Interview test case.
 */
class ConsultInterviewTestCase extends DrupalWebTestCase {
  /**
   * Admin user object.
   */
  public $adminUser;

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => 'Consult interview',
      'description' => 'Tests Consult entities render correctly.',
      'group' => 'Consult',
    );
  }

  /**
   * {@inheritdoc}
   */
  protected function setUp() {
    parent::setUp('entity', 'consult');
    $this->adminUser = $this->drupalCreateUser(array('administer consult'));
  }

  /**
   * Test that consult interview settings are outputted correctly.
   */
  public function testConsultInterviewSettings() {
    $interview = $this->createInterviewEntity();
    $interview_name = $interview->identifier();

    $question_one = $this->createQuestionEntity($interview_name);
    $question_two = $this->createQuestionEntity($interview_name);
    $questions_names = array(
      $question_one->identifier(),
      $question_two->identifier(),
    );

    $this->drupalGet('consult/' . $interview->identifier() . '/js-settings');

    $this->assertRaw('Drupal.settings.consult', 'Found consult object injection in the settings array');

    // Get settings for this interview.
    $raw = $this->drupalGetContent();
    $raw = str_replace('Drupal.settings.consult.' . $interview->identifier() . '=', '', $raw);
    $settings = drupal_json_decode($raw);

    $this->assertEqual(2, count($settings['questions']), 'Correct number of questions found');

    foreach ($settings['questions'] as $question) {
      $this->assertTrue(in_array($question['name'], $questions_names), 'Found question in consult interview object');
    }
  }

  /**
   * Create an interview entity.
   *
   * @return ConsultInterview
   *   The created interview.
   */
  public function createInterviewEntity() {
    $entity = entity_create(CONSULT_INTERVIEW_ENTITY_NAME, array(
      'name' => $this->randomName(),
      'label' => $this->randomString(),
    ));
    entity_save(CONSULT_INTERVIEW_ENTITY_NAME, $entity);

    return $entity;
  }

  /**
   * Create a question.
   *
   * @param string $interview_name
   *   The name of the interview to associate the question with.
   *
   * @return ConsultQuestion
   *   The question entity.
   */
  protected function createQuestionEntity($interview_name) {
    $entity = entity_create(CONSULT_QUESTION_ENTITY_NAME, array(
      'name' => $this->randomName(),
      'label' => $this->randomString(),
      'interview_name' => $interview_name,
      'question' => array(
        'format' => FILTER_DEFAULT,
        'value' => $this->randomString(),
      ),
      'answers' => array(
        'q2a1' => $this->randomString(),
        'q2a2' => $this->randomString(),
      ),
    ));
    entity_save(CONSULT_QUESTION_ENTITY_NAME, $entity);

    return $entity;
  }

  /**
   * Create a result.
   *
   * @param string $interview_name
   *   The name of the interview to associate the result with.
   *
   * @return ConsultResult
   *   The result entity.
   */
  protected function createResultEntity($interview_name) {
    $entity = entity_create(CONSULT_RESULT_ENTITY_NAME, array(
      'name' => $this->randomName(),
      'label' => $this->randomString(),
      'interview_name' => $interview_name,
      'message' => array(
        'format' => FILTER_DEFAULT,
        'value' => $this->randomString(),
      ),
    ));
    entity_save(CONSULT_RESULT_ENTITY_NAME, $entity);

    return $entity;
  }
}
