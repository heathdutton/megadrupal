<?php

/**
 * @file
 * Provides a UK Direct Debit payment method for Drupal Commerce.
 */


/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_directdebit_commerce_payment_method_info() {
  $payment_methods = array();

  $logo = commerce_directdebit_logo();

  $payment_methods['commerce_directdebit'] = array(
    'title' => t('UK Direct Debit payment method'),
    'display_title' => t('!logo Direct Debit', array('!logo' => $logo)),
    'description' => t('Provides a UK Direct Debit payment method for Drupal Commerce.'),
    'active' => FALSE,
  );

  return $payment_methods;
}

/**
 * Returns a themed Direct Debit logo.
 */
function commerce_directdebit_logo() {
  $variables = array(
    'path' => drupal_get_path('module', 'commerce_directdebit') . '/images/logo.png',
    'title' => t('Direct Debit'),
    'alt' => '',
    'attributes' => array(
      'class' => array('commerce-directdebit-logo'),
    ),
  );
  $logo = theme('image', $variables);

  return $logo;
}


/**
 * Payment method callback: submit form.
 */
function commerce_directdebit_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form = array();

  // Merge in values from the order.
  if (!empty($order->data['commerce_directdebit'])) {
    $pane_values += $order->data['commerce_directdebit'];
  }

  // Merge in default values.
  $pane_values += array(
    'account_name' => '',
    'sort_code' => '',
    'account_number' => '',
  );

  $form['account_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Name of account holder'),
    '#description' => t('Please enter the name of the account holder.'),
    '#default_value' => $pane_values['account_name'],
    '#required' => TRUE,
    '#maxlength' => 256,
    '#size' => 32,
  );

  $form['sort_code'] = array(
    '#type' => 'textfield',
    '#title' => t('Bank sort code'),
    '#description' => t('Please enter the sort code of your bank.'),
    '#default_value' => $pane_values['sort_code'],
    '#required' => TRUE,
    '#maxlength' => 10,
    '#size' => 10,
  );

  $form['account_number'] = array(
    '#type' => 'textfield',
    '#title' => t('Bank account number'),
    '#description' => t('Please enter your account number.'),
    '#default_value' => $pane_values['account_number'],
    '#required' => TRUE,
    '#maxlength' => 20,
    '#size' => 10,
  );

  return $form;
}

/**
 * Payment method callback: submit form submission.
 */
function commerce_directdebit_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  $order->data['commerce_directdebit'] = $pane_values;

  commerce_directdebit_transaction($payment_method, $order, $charge, $pane_values['account_name'], $pane_values['sort_code'], $pane_values['account_number']);
}

/**
 * Creates an example payment transaction for the specified charge amount.
 *
 * @param array $payment_method
 *   The payment method instance object used to charge this payment.
 * @param object $order
 *   The order object the payment applies to.
 * @param array $charge
 *   An array indicating the amount and currency code to charge.
 * @param string $account_name
 *   The name entered on the submission form.
 * @param string $sort_code
 *   The sort code entered on the submission form.
 * @param string $account_number
 *   The account number entered on the submission form.
 */
function commerce_directdebit_transaction($payment_method, $order, $charge, $account_name, $sort_code, $account_number) {
  $transaction = commerce_payment_transaction_new('commerce_directdebit', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
  $transaction->message = 'Account name: @account_name, Sort code: @sort_code, Account number: @account_number';
  $transaction->message_variables = array(
    '@account_name' => $account_name,
    '@sort_code' => $sort_code,
    '@account_number' => $account_number,
  );

  commerce_payment_transaction_save($transaction);
}
