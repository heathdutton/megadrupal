<?php
/**
 * @file
 *   Main code for the "Commerce Customer Contact" module.
 *
 *   Â© 2015 RedBottle Design, LLC. All rights reserved.</p>
 *
 * @author Guy Paddock (guy.paddock@redbottledesign.com)
 */

require_once('commerce_customer_contact.constants.inc');
require_once('commerce_customer_contact.messages.inc');

/**
 * Implements <code>hook_permission()</code>.
 */
function commerce_customer_contact_permission() {
  $permissions = array();

  $permissions[COCUCO_PERM_CONTACT_CUSTOMERS] = array(
    'title'       => t('Contact customers'),
    'description' => t('Lets users with access to order information contact customers from order pages.'),
  );

  $permissions[COCUCO_PERM_ADMIN_CONTACT_SETTINGS] = array(
    'title'       => t('Administer order contact settings'),
    'description' => t('Lets users to adjust where the customer contact form appears.'),
  );

  return $permissions;
}

/**
 * Implements <code>hook_menu()</code>.
 */
function commerce_customer_contact_menu() {
  $items = array();

  $items['admin/commerce/orders/%commerce_order/contact'] = array(
    'title'             => 'Contact customer',
    'type'              => MENU_LOCAL_TASK,

    'page callback'     => 'commerce_customer_contact_get_embedded_contact_form',
    'page arguments'    => array(3),

    'access callback'   => 'commerce_customer_contact_tab_access',
    'access arguments'  => array(3),
  );

  $items['admin/commerce/config/customer/contact'] = array(
    'title'             => 'Customer contact settings',
    'description'       => 'Configures where the customer contact form appears on orders.',
    'type'              => MENU_NORMAL_ITEM,

    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('commerce_customer_contact_admin_form'),

    'access callback'   => 'user_access',
    'access arguments'  => array(COCUCO_PERM_ADMIN_CONTACT_SETTINGS),

    'file'              => 'commerce_customer_contact.admin.inc',
  );

  return $items;
}

/**
 * Access callback for the "Contact customer" tab on the order.
 *
 * Tab access is only granted when the form is configured to appear on its own
 * tab and the customer has permission to contact customers.
 *
 * @param stdClass $order
 *  The order for which tab access is being assessed.
 *
 * @return bool
 */
function commerce_customer_contact_tab_access(stdClass $order) {
  return commerce_customer_contact_appears_on(COCUCO_SHOW_ON_OWN_TAB) &&
         commerce_customer_contact_access($order);
}

/**
 * Menu access callback for contacting a customer about an order.
 *
 * @param stdClass $order
 *   The order about which a customer is being contacted.
 *
 * @return boolean
 */
function commerce_customer_contact_access(stdClass $order) {
  global $user;

  $result = FALSE;

  // Anonymous users cannot have contact forms.
  if (!$order->uid) {
    $result = FALSE;
  }

  // Users may not contact themselves.
  elseif ($user->uid == $order->uid) {
    $result = FALSE;
  }

  else {
    $account = user_load($order->uid);

    if (!empty($account)) {
      // If requested user has been blocked, do not allow users to contact them.
      if (empty($account->status)) {
        $result = FALSE;
      }

      else {
        $result = user_access(COCUCO_PERM_CONTACT_CUSTOMERS);
      }
    }
  }

  return $result;
}

/**
 * Implements <code>hook_entity_view_alter()</code>.
 *
 * Adds the customer contact form to the bottom of the 'View' tab on orders.
 */
function commerce_customer_contact_entity_view_alter(&$build, $type) {
  if (($type == 'commerce_order') &&
      commerce_customer_contact_appears_on(COCUCO_SHOW_ON_VIEW_TAB)) {
    $order = $build['#entity'];

    if (commerce_customer_contact_access($order)) {
      $contact_form
        = commerce_customer_contact_get_embedded_contact_form($order, TRUE);

      $build['contact_customer'] = $contact_form;
    }
  }
}

/**
 * Implements <code>hook_views_pre_render()</code>.
 *
 * Adds the customer contact form to the bottom of the 'Payments' tab on orders.
 */
function commerce_customer_contact_views_pre_render(&$view) {
  if (($view->name == 'commerce_payment_order') && !empty($view->args[0]) &&
      commerce_customer_contact_appears_on(COCUCO_SHOW_ON_PAYMENTS_TAB)) {
    $order = commerce_order_load($view->args[0]);

    if (!empty($order) && commerce_customer_contact_access($order)) {
      $contact_form
        = commerce_customer_contact_get_embedded_contact_form($order, TRUE);

      $view->attachment_after = render($contact_form);
    }
  }
}

/**
 * Gets the personal contact form for the user who owns the specified order,
 * wrapped in a fieldset.
 *
 * If the order includes an alternate e-mail address to use when contacting the
 * owner of the order, then that e-mail address will automatically be used.
 *
 * @param stdClass $order
 *   The Commerce Order entity whose owner is being contacted.
 * @param bool $preserve_title
 *   Whether or not the current page title should be preserved as-is. When
 *   FALSE, the page title is set to "Contact customer about order NUMBER".
 *
 * @return array
 *   The render array for the fieldset that contains the contact form.
 */
function commerce_customer_contact_get_embedded_contact_form(stdClass $order, $preserve_title = FALSE) {
  $form_wrapper = array();

  $recipient = user_load($order->uid);

  if (!empty($recipient)) {
    module_load_include('inc', 'contact', 'contact.pages');
    drupal_add_library('system', 'drupal.collapse');

    if ($preserve_title) {
      $original_title = drupal_get_title();
    }

    $form = drupal_get_form('contact_personal_form', $recipient, $order);

    if ($preserve_title) {
      drupal_set_title($original_title);
    }
    else {
      drupal_set_title(
        t('Contact customer about order @order', array('@order' => $order->order_number)));
    }

    $form_wrapper = array(
      '#type'         => 'fieldset',
      '#title'        => t('Contact customer'),
      '#weight'       => 10,
      '#collapsible'  => TRUE,
      '#collapsed'    => TRUE,
      '#attributes'   => array(
        'class'       => array(
          'collapsible',
          'collapsed',
        ),
      ),

      'form' => array(
        '#type'   => 'markup',
        '#markup' => drupal_render($form),
      ),
    );
  }

  return $form_wrapper;
}

/**
 * Gets an array of the options that are enabled for where to display the
 * "Contact customer" form.
 *
 * Options include:
 *   - COCUCO_SHOW_ON_VIEW_TAB:
 *     Show in a collapsible fieldset at the bottom of the "View" tab on orders.
 *
 *   - COCUCO_SHOW_ON_PAYMENTS_TAB:
 *     Show in a collapsible fieldset at the bottom of the "Payments" tab on
 *     orders.
 *
 *   - COCUCO_SHOW_ON_OWN_TAB:
 *     Show on a new "Contact customer" tab on orders
 *
 * @return array
 */
function commerce_customer_contact_get_appearance_locations() {
  $default_value = array(
    COCUCO_SHOW_ON_VIEW_TAB,
    COCUCO_SHOW_ON_PAYMENTS_TAB,
  );

  return variable_get(COCUCO_VARIABLE_APPEARANCE_OPTIONS, $default_value);
}

/**
 * Determines whether or not the "Contact customer" form should appear in the
 * provided location.
 *
 * @param $appearance_type
 *   One of the following:
 *   - COCUCO_SHOW_ON_VIEW_TAB
 *   - COCUCO_SHOW_ON_PAYMENTS_TAB
 *   - COCUCO_SHOW_ON_OWN_TAB
 *
 * @return bool
 */
function commerce_customer_contact_appears_on($appearance_type) {
  $appearance_types = commerce_customer_contact_get_appearance_locations();

  return in_array($appearance_type, $appearance_types);
}

/**
 * Implements <code>hook_form_FORM_ID_alter()</code> for the
 * personal contact form, when embedded in orders.
 *
 * @param array $form
 *   A reference to the contact form array.
 * @param array $form_state
 *   A reference to the contact form state array.
 */
function commerce_customer_contact_form_contact_personal_form_alter(array &$form, array &$form_state) {
  if (!empty($form_state['build_info']['args'][1])) {
    $order = $form_state['build_info']['args'][1];

    if (($order instanceof stdClass) && ($order->type == 'commerce_order')) {
      $recipient =& $form['recipient'];

      if (!empty($order->mail)) {
        $recipient['#value']->mail = $order->mail;
      }

      $email = $recipient['#value']->mail;

      $form['to']['#markup'] .=
        t(' (via !email)', array('!email' => l($email, 'mailto:' . $email)));

      $form_state['order'] = $order;

      $form['#submit'][]
        = 'commerce_customer_contact_form_submit_redirect';

      $prefix = commerce_customer_contact_get_salutation($recipient['#value']);
      $suffix = commerce_customer_contact_get_closing();

      $form['message'] = array(
        '#type'   => 'item',
        '#title'  => t('Message'),
        'message' => array(
          '#type'     => 'textarea',
          '#rows'     => 15,
          '#required' => TRUE,
          '#prefix'   => implode("<br />", $prefix),
          '#suffix'   => implode("<br />", $suffix),
        ),
      );
    }
  }
}