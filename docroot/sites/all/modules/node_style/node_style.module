<?php

/**
 * @file
 *   Allows for node specific customisations at the theme level.
 * @author
 *   Karthik Kumar/Zen [ http://drupal.org/user/21209 ].
 * @todo
 *   Discern custom regions.
 *   Make module usable with more than just nodes.
 *   Add Tests.
 *   Simplify terminology - use "styles" rather than "styles" and "schemes".
 */

/**
 * Implements hook_help().
 */
function node_style_help($path, $arg) {
  switch ($path) {
    case 'admin/help#node_style':
      return t('This module allows for node specific style customisations. Its primary uses include:
<ul>
  <li>Hiding html, page and node elements as per the selected node style.</li>
  <li>Calling specific template process functions for pages asscociated with a style.</li>
  <li>Setting a custom theme for associated nodes.</li>
  <li>Injecting HTML in the &lt;head /&gt; block for specific nodes. A common use of this feature is to introduce node-specific styles or JavaScript.</li>
  <li>Optionally introducing node file attachments such as CSS and JavaScript files into the page markup.</li>
</ul>');
    case 'admin/structure/node-style':
      return t('This module allows for node-specific style customisations. The
        style schemes listed below can be associated with nodes on their edit
        forms. Besides the options presented in this interface, node styles can
        be extended further by creating <em>process</em> and <em>preprocess</em>
        hooks. Please check the README.txt file for more information.');
  }
}

/**
 * Implements hook_menu().
 */
function node_style_menu() {
  $items = array();

  $items['admin/structure/node-style'] = array(
    'title' => 'Node styles',
    'description' => 'The node style module allows for node-specific style customisations.',
    'page callback' => '_node_style_schemes',
    'access arguments' => array('administer node styles'),
    'file' => 'node_style.admin.inc'
  );
  $items['admin/structure/node-style/schemes'] = array(
    'title' => 'Schemes',
    'page callback' => '_node_style_schemes',
    'access arguments' => array('administer node styles'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
    'file' => 'node_style.admin.inc'
  );
  $items['admin/structure/node-style/add'] = array(
    'title' => 'Add scheme',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_node_style_schemes_add'),
    'access arguments' => array('administer node styles'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'node_style.admin.inc'
  );
  $items['admin/structure/node-style/edit/%'] = array(
    'title' => 'Edit scheme',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_node_style_schemes_edit', 4),
    'access arguments' => array('administer node styles'),
    'type' => MENU_CALLBACK,
    'file' => 'node_style.admin.inc'
  );
  $items['admin/structure/node-style/delete/%'] = array(
    'title' => 'Delete scheme',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_node_style_schemes_delete', 4),
    'access arguments' => array('administer node styles'),
    'type' => MENU_CALLBACK,
    'file' => 'node_style.admin.inc'
  );
  $items['admin/structure/node-style/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_node_style_settings_form'),
    'access arguments' => array('administer node styles'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'node_style.admin.inc'
  );

  return $items;
}

/**
 * Implements hook_perm().
 */
function node_style_permission() {
  return array(
    'customise node styles' => array('title' => t('Customise node styles')),
    'administer node styles' => array('title' => t('Administer node styles'))
  );
}

/**
 * Implements hook_custom_theme().
 */
function node_style_custom_theme() {
  $node_style = _node_style_style_get();

  if (isset($node_style->variables['theme']) && $node_style->variables['theme'] != 'default') {
    // The current theme is overridden regardless of whether the theme is active
    // or not. This is how core works ..
    return $node_style->variables['theme'];
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function node_style_form_node_form_alter(&$form, &$form_state, $form_id) {
  $node = $form['#node'];
  $node->node_style = isset($node->node_style) ? $node->node_style : FALSE;

  $defaults = variable_get('node_style', array('defaults' => array()));
  $default = isset($defaults['defaults'][$node->type]) ? $defaults['defaults'][$node->type] : 0;

  if (user_access('customise node styles')) {
    $schemes = array('0' => t('None')) + _node_style_schemes_get();

    $form['node_style'] = array(
      '#type' => 'fieldset',
      '#title' => t('Node style'),
      '#collapsible' => TRUE,
      '#collapsed' => empty($node->node_style),
      '#group' => 'additional_settings',
      '#attached' => array(
        'js' => array(drupal_get_path('module', 'node_style') . '/node_style.js')
      )
    );
    $form['node_style']['node_style_scheme'] = array(
      '#type' => 'select',
      '#title' => t('Node style scheme'),
      '#description' => t('Select the <a href="!scheme">style scheme</a> to associate with this node.', array('!scheme' => url('admin/structure/node-style'))),
      '#options' => $schemes,
      '#default_value' => $node->node_style ? $node->node_style->sid : $default
    );
  }
  elseif ($default) {
    $form['node_style_scheme'] = array(
      '#type' => 'value',
      '#value' => $node->node_style ? $node->node_style->sid : $default
    );
  }
}

/**
 * Implements hook_node_load().
 */
function node_style_node_load($nodes, $types) {
  $node = current($nodes);
  if (isset($node->nid)) {
    $node->node_style = _node_style_style_load($node->nid);
  }
}

/**
 * Implements hook_node_view().
 */
function node_style_node_view($node, $view_mode) {
  if ($view_mode == 'full' && $node->node_style && module_exists('file')) {
    $fields = field_info_instances('node', $node->type);
    foreach ($fields as $name => $info) {
      if (isset($info['widget']) && $info['widget']['module'] == 'file') {
        $field = $node->$name;
        $files = $field[$node->language];
        foreach ($files as $file) {
          // File attachments need to have "display" checked on the node form to
          // be visible here.
          if (isset($node->node_style->variables['file_types']['css']) && $file['filemime'] == 'text/css') {
            drupal_add_css($file['uri']);
          }
          elseif (isset($node->node_style->variables['file_types']['js']) && $file['filemime'] == 'application/x-javascript') {
            drupal_add_js($file['uri']);
          }
        }
      }
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function node_style_node_insert($node) {
  if (!empty($node->node_style_scheme)) {
    _node_style_style_add($node->nid, $node->node_style_scheme);
  }
}

/**
 * Implements hook_node_update().
 */
function node_style_node_update($node) {
  // Check for node_style_scheme to avoid for weirdness with revision reverts.
  if (isset($node->node_style_scheme)) {
    node_style_node_delete($node);
    node_style_node_insert($node);
  }
}

/**
 * Implements hook_node_delete().
 */
function node_style_node_delete($node) {
  _node_style_style_delete($node->nid);
}

/**
 * hook_preprocess allows node_style to override default variables.
 *
 * @param Array $variables
 *   The variables available for overriding.
 * @param String $hook
 *   The section of a Drupal page that the variables might belong to. This can
 *   be page, block, node etc.
 * @return string
 */
function node_style_preprocess(&$variables, $hook) {
  $node_style = _node_style_style_get();

  if ($node_style) {
    $return = module_invoke_all('node_style_preprocess_' . $node_style->machine_name, $variables, $hook);
    if (!empty($return)) {
      $variables = $return;
    }
  }
}

/**
 * hook_process allows node_style to override default variables including those
 * modified by preprocess overrides.
 *
 * @param Array $variables
 *   The variables available for overriding.
 * @param String $hook
 *   The section of a Drupal page that the variables might belong to. This can
 *   be page, block, node etc.
 * @return string
 */
function node_style_process(&$variables, $hook) {
  $node_style = _node_style_style_get();

  // N.B. These sections all involve directly injecting user input into the
  // page markup. We are intentionally not going to bother with vetting the
  // input as it is assumed that these operations are being carried out by
  // those with administrator privileges.
  if ($node_style) {
    $scheme = $node_style->variables;
    // Hide chosen "display" elements.
    if (isset($scheme['display'][$hook])) {
      foreach ($scheme['display'][$hook] as $name => $value) {
        // Only affect existing variables.
        if ($value) {
          if (isset($variables[$name])) {
            // Set to null rather than '' or array() to ensure that no data type
            // mismatches occur.
            $variables[$name] = NULL;
          }
          // The node hook has its values inside 'content'.
          elseif ($hook == 'node' && isset($variables['content'][$name])) {
            $variables['content'][$name] = NULL;
          }
        }
      }
    }

    switch ($hook) {
      case 'html':
        // The "head" and "styles" variables are only made available in the
        // process hook.
        if (isset($scheme['classes_body']) && !empty($scheme['classes_body'])) {
          $variables['classes'] .= " " . trim($scheme['classes_body']);
        }

        // Rather than appending to "head", append to styles, thereby allowing
        // for overrides of existing stylesheets. This will not matter for JS.
        if (isset($scheme['head']) && !empty($scheme['head'])) {
          $variables['styles'] .= trim($scheme['head']) . "\n";
        }

        // We do not want a completely empty title bar.
        if (isset($scheme['display']['html']['head_title']) && !empty($scheme['display']['html']['head_title'])) {
          $variables['head_title'] = $variables['head_title_array']['name'];
        }
        break;
      case 'node':
        if (isset($scheme['classes_node']) && !empty($scheme['classes_node'])) {
          $variables['classes'] .= " " . trim($scheme['classes_node']);
        }
        break;
    }

    $return = module_invoke_all('node_style_process_' . $node_style->machine_name, $variables, $hook);
    if (!empty($return)) {
      $variables = $return;
    }
  }
}

/**
 * Insert node_style settings into the database.
 */
function _node_style_style_add($nid, $sid) {
  db_query("INSERT INTO {node_style_maps} (nid, sid) VALUES (:nid, :sid)", array(':nid' => $nid, ':sid' => $sid));
}

/**
 * Delete node_style settings associated with a node.
 */
function _node_style_style_delete($nid) {
  db_query('DELETE FROM {node_style_maps} WHERE nid = :nid', array(':nid' => $nid));
}

/**
 * Retrieve any node_style settings for the current node from the database.
 */
function _node_style_style_get() {
  static $node_style = NULL;

  if (!isset($node_style)) {
    if (arg(0) == 'node') {
      // Override for node views as well as previews where the node_style might
      // be different to the one saved.
      if (is_numeric(arg(1)) && empty($_POST)) {
        $node_style = _node_style_style_load(arg(1));
      }
      elseif (!empty($_POST) && (arg(1) == 'add' || arg(2) == 'edit') && isset($_POST['op']) && $_POST['op'] == 'Preview' && isset($_POST['node_style_scheme'])) {
        // Access $_POST to retrieve the node_style scheme. hook_custom_theme()
        // is triggered well before everything else; hence this workaround.
        $node_style = _node_style_scheme_get((int) $_POST['node_style_scheme']);
      }
    }
  }

  return $node_style;
}

/**
 * Load the style associated with $nid.
 */
function _node_style_style_load($nid) {
  $node_style = db_query("SELECT m.sid, s.variables, s.machine_name FROM {node_style_maps} m
    LEFT JOIN {node_style_schemes} s USING (sid)
    WHERE m.nid = :nid", array(':nid' => arg(1)))
    ->fetchObject();
  if ($node_style) {
    $node_style->variables = unserialize($node_style->variables);
  }

  return $node_style;
}

/**
 * Insert a scheme into the database.
 */
function _node_style_scheme_add($machine_name, $name, $scheme) {
  db_query("INSERT INTO {node_style_schemes} (machine_name, name, variables) VALUES (:mn, :name, :scheme)", array(':mn' => $machine_name, ':name' => $name, ':scheme' => serialize($scheme)));
}

/**
 * Update an existing scheme.
 */
function _node_style_scheme_update($sid, $machine_name, $name, $scheme) {
  db_query("UPDATE {node_style_schemes} SET machine_name = :mn, name = :name, variables = :variables WHERE sid = :sid", array(':mn' => $machine_name, ':name' => $name, ':variables' => serialize($scheme), ':sid' => $sid));
}

/**
 * Retrieve a scheme.
 */
function _node_style_scheme_get($sid) {
  $scheme = db_query('SELECT * FROM {node_style_schemes} WHERE sid = :sid', array(':sid' => $sid))->fetchObject();
  if ($scheme) {
    $scheme->variables = unserialize($scheme->variables);
  }

  return $scheme;
}

/**
 * Retrieve a scheme by its machine_name.
 */
function _node_style_scheme_get_by_machine_name($machine_name) {
  return db_query('SELECT name FROM {node_style_schemes} WHERE machine_name = :mn', array(':mn' => $machine_name))->fetchObject();
}

/**
 * Retrieve all schemes.
 */
function _node_style_schemes_get() {
  $result = db_query('SELECT sid, name FROM {node_style_schemes} ORDER BY name')->fetchAll();
  $schemes = array();
  foreach ($result as $scheme) {
    // The scheme name is translated only for the node form.
    $schemes[$scheme->sid] = check_plain($scheme->name);
  }

  return $schemes;
}

/**
 * Implements hook_node_style_process_SCHEME_MACHINE_NAME().
 */
function node_style_node_style_process_garland_example($variables, $hook) {
  switch ($hook) {
    case 'page':
      $variables['title'] = '';
      $variables['secondary_nav'] = '';
      $variables['site_html'] = '<em>Node Style</em>';
      $variables['page']['sidebar_first'] = array();
      break;
    case 'node':
      $variables['display_submitted'] = FALSE;
      $variables['classes'] .= ' node-style';
      break;
  }

  return $variables;
}
