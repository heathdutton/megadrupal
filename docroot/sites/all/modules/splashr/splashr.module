<?php

/**
 * @file
 * SplashR module displaying configurable splash overlay.
 */

/**
 * Implements hook_menu().
 */
function splashr_menu() {
  $items = array();
  $items['admin/config/system/splashr'] = array(
    'title' => 'Splash',
    'description' => 'Manage the splash page.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('splashr_admin_form'),
    'access arguments' => array('access administration pages'),
    'file' => 'splashr.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_page_alter().
 *
 * Add splashR elements inside header before page is rendered.
 *
 * @param $page
 *   Nested array of renderable elements that make up the page.
 */
function splashr_page_alter(&$page) {
  global $user;

  if (variable_get('splashr_enabled', 0) == 1 && _splashr_visibility_pages() && _splashr_visibility_roles($user)) {
    drupal_add_js(drupal_get_path('module', 'splashr') . '/js/splashr.js');
    if (!variable_get('splashr_cookie_disable', 0)) {
      drupal_add_library('system', 'jquery.cookie');
    }
    $settings = array(
      'no_cookie' => variable_get('splashr_cookie_disable', 0),
      'num_day_cookie' => variable_get('splashr_cookie_validity', 0),
      'show_overlay' => variable_get('splashr_overlay', 0),
      'dismiss_click' => variable_get('splashr_dismiss_click', 0),
      'dismiss_timeout' => variable_get('splashr_dismiss_timeout') ? variable_get('splashr_dismiss_timeout_time', 0) : 0,
      'called' => FALSE,
    );
    drupal_add_js(array('splash' => $settings), 'setting');
    drupal_add_css(drupal_get_path('module', 'splashr') . '/css/splashr.css');
    $page['page_top']['splashr'] = array(
      '#type' => 'markup',
      '#markup' => splashr_get_content(),
    );
  }
}

/**
 * Return HTML of splash block.
 */
function splashr_get_content() {
  if (variable_get('splashr_enabled', 0) == 1) {
    $element = array(
      '#tag' => 'div',
      '#attributes' => array(
        'id' => 'splashr',
        'style' => 'position:' . variable_get('splashr_position', 'absolute'),
      ),
      '#value' => '',
    );
    switch (variable_get('splashr_type', 'flash')) {

      case 'flash':
        $flash_url = variable_get('splashr_flash_path', '');
        $flash_width = variable_get('splashr_flash_width', 300);
        $flash_height = variable_get('splashr_flash_height', 300);
        $element['#value'] = '<div id="splashr-box" style="width: ' . $flash_width . 'px;height: ' . $flash_height . 'px;">'
                           . '<object id="splashr-anim" height="' . $flash_height . '" width="' . $flash_width . '" data="' . $flash_url . '" type="application/x-shockwave-flash" name="flashplayer">'
                           . '<param value="sameDomain" name="allowScriptAccess" />'
                           . '<param value="' . $flash_url . '" name="movie" />'
                           . '<param value="high" name="quality" />'
                           . '</object></div>';
        break;

      case 'image':
        $image_path = '/' . ltrim(variable_get('splashr_image_path', ''), '/');
        $element['#attributes']['style'] .= ';background:transparent url(' . $image_path . ') no-repeat center top';
        break;

      case 'html':
        $element['#value'] = variable_get('splashr_html', '');
        break;
    }

    if ($top_offset = variable_get('splashr_offset_top', 0)) {
      $element['#attributes']['style'] .= ';top:' . $top_offset . 'px;';
    }

    $content = '';
    if (variable_get('splashr_overlay', FALSE)) {
      $position = variable_get('splashr_position', 'absolute');
      $opacity = variable_get('splashr_overlay_opacity', 100);
      $opacity = $opacity ? $opacity / 100 : 1;
      $opacity_ie = $opacity * 100;
      $overlay_element = array(
        '#tag' => 'div',
        '#attributes' => array(
          'id' => 'splashr_overlay',
          'style' => "position:$position;opacity:$opacity;filter:alpha(opacity=$opacity_ie);",
        ),
        '#value' => ' ',
      );
      $content .= theme('html_tag', array('element' => $overlay_element));
    }
    if (variable_get('splashr_dismiss_link')) {
      $element['#value'] .= '<a href="javascript:void(0)" id="splashr_close">' . variable_get('splashr_dismiss_link_text', '') . '</a>';
    }
    $content .= theme('html_tag', array('element' => $element));
    return $content;
  }
}

/**
 * Based on visibility setting this function returns TRUE if splash
 * should be added to the current page and otherwise FALSE.
 */
function _splashr_visibility_pages() {
  static $page_match;

  // Cache visibility result if function is called more than once.
  if (!isset($page_match)) {

    $visibility = variable_get('splashr_visibility_pages', 0);
    $setting_pages = variable_get('splashr_pages', '');

    // Match path if necessary.
    if (!empty($setting_pages)) {
      // Convert path to lowercase. This allows comparison of the same path
      // with different case. Ex: /Page, /page, /PAGE.
      $pages = drupal_strtolower($setting_pages);
      if ($visibility < 2) {
        // Convert the Drupal path to lowercase
        $path = drupal_strtolower(drupal_get_path_alias($_GET['q']));
        // Compare the lowercase internal and lowercase path alias (if any).
        $page_match = drupal_match_path($path, $pages);
        if ($path != $_GET['q']) {
          $page_match = $page_match || drupal_match_path($_GET['q'], $pages);
        }
        // When $visibility has a value of 0, the tracking code is displayed on
        // all pages except those listed in $pages. When set to 1, it
        // is displayed only on those pages listed in $pages.
        $page_match = !($visibility xor $page_match);
      }
      elseif (module_exists('php')) {
        $page_match = php_eval($setting_pages);
      }
      else {
        $page_match = FALSE;
      }
    }
    else {
      $page_match = TRUE;
    }

  }
  return $page_match;
}

/**
 * Based on visibility setting this function returns TRUE if splash
 * should be added for the current role and otherwise FALSE.
 */
function _splashr_visibility_roles($account) {

  $visibility = variable_get('splashr_visibility_roles', 0);
  $enabled = $visibility;
  $roles = variable_get('splashr_roles', array());

  if (array_sum($roles) > 0) {
    // One or more roles are selected.
    foreach (array_keys($account->roles) as $rid) {
      // Is the current user a member of one of these roles?
      if (isset($roles[$rid]) && $rid == $roles[$rid]) {
        // Current user is a member of a role that should be tracked/excluded from tracking.
        $enabled = !$visibility;
        break;
      }
    }
  }
  else {
    // No role is selected for tracking, therefore all roles should be tracked.
    $enabled = TRUE;
  }

  return $enabled;
}
