<?php

/**
 * @file
 * Provides a method of signing up to dotMailer with a webform.
 */

/**
 * Implements hook_webform_component_info().
 */
function dotmailer_webform_webform_component_info() {
  $components = array();
  $components['dotmailer'] = array(
    'label' => t('dotMailer signup'),
    'description' => t('Signup to dotMailer mailing lists (requires you to add an email field)'),
    'features' => array(
      'title_inline' => FALSE,
      'title_display' => FALSE,
      'default_value' => TRUE,
    ),
    'file' => 'dotmailer_webform.inc',
  );
  return $components;
}

/**
 * Implements hook_webform_submission_insert().
 */
function dotmailer_webform_webform_submission_insert($node, $submission) {

  foreach ($node->webform['components'] as $key => $component) {
    if ($component['type'] !== 'dotmailer') {
      continue;
    }
    $address_book_id = $submission->data[$key]['value'][0];

    // Check that they actually want to sign up (or have been appropriatley forced)
    if (!$address_book_id) {
      continue;
    }

    $address_book = dotmailer_get_saved_address_book($address_book_id);

    $email_key = $component['extra']['dotmailer_email_field'];
    $email = $submission->data[$email_key]['value'][0];

    $datafields = array();
    if (isset($node->dotmailer_webform)) {
      foreach ($node->dotmailer_webform['mappings'] as $cid => $field_name) {
        if ($field_name && isset($submission->data[$cid])) {
          $datafields[$field_name] = array(
            'type' => 'string',
            'data' => $submission->data[$cid]['value'][0],
          );
        }
      }
    }
    // We don't present the user with a success message here and we surpress the
    // built in dotMailer message.
    dotmailer_add_contact($address_book, $email, $datafields, NULL, FALSE);
  }
}

/**
 * Implements hook_menu().
 */
function dotmailer_webform_menu() {

  $items = array();
  // Webform specific dotmailer settings.
  $items['node/%webform_menu/webform/dotmailer'] = array(
    'title' => 'dotMailer settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dotmailer_webform_settings', 1),
    'access callback' => 'dotmailer_webform_access_settings',
    'access arguments' => array(1),
    'file' => 'dotmailer_webform.pages.inc',
    'weight' => 10,
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Access callback.
 *
 * Returns true if you are eligable to edit the dotmailer settings for a node.
 * Includes check to make sure that this webform is using dotMailer.
 */
function dotmailer_webform_access_settings($node) {
  if ($node && node_access('update', $node)) {
    foreach ($node->webform['components'] as $component) {
      if ($component['type'] == 'dotmailer') {
        return TRUE;
      }
    }
  }
  return FALSE;
}


/**
 * Implements hook_webform_validator_alter().
 */
function dotmailer_webform_webform_validator_alter(&$items) {
  $items['oneoftwo']['component_types'][] = 'dotmailer';
  $items['oneofseveral']['component_types'][] = 'dotmailer';
}

/**
 * Implements hook_node_load().
 */
function dotmailer_webform_node_load($nodes, $types) {
  // Quick check to see if we need to do anything at all for these nodes.
  $webform_types = webform_variable_get('webform_node_types');
  if (count(array_intersect($types, $webform_types)) == 0) {
    return;
  }

  $result = db_select('dotmailer_webform_node_settings')
    ->fields('dotmailer_webform_node_settings')
    ->condition('nid', array_keys($nodes))
    ->execute()
    ->fetchAllAssoc('nid', PDO::FETCH_ASSOC);

  foreach ($result as $nid => $settings) {
    $nodes[$nid]->dotmailer_webform = unserialize($settings['settings']);
  }

}

/**
 * Implements hook_node_update().
 */
function dotmailer_webform_node_update($node) {
  if (!in_array($node->type, webform_variable_get('webform_node_types'))) {
    return;
  }

  if (isset($node->dotmailer_webform)) {
    db_merge('dotmailer_webform_node_settings')
      ->key(array('nid' => $node->nid))
      ->fields(array(
        'nid' => $node->nid,
        'settings' => serialize($node->dotmailer_webform),
      ))
      ->execute();
  }
}

function dotmailer_webform_node_insert($node) {
  return dotmailer_webform_node_update($node);
}

function dotmailer_webform_node_delete($node) {
  db_delete('dotmailer_webform_node_settings')
    ->condition('nid', $node->nid)
    ->execute();
}