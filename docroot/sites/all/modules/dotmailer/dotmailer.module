<?php

/**
 * @file
 *
 * The dotmailer module file, provides most of the main
 * Drual based functionality with more internal functions found
 * in the include file and for dotmailer API functions look in
 * the class include.
 *
 * Please note that this module makes various references to 'books'. These are,
 * in fact, address books. These references should be replaced where possible
 * and you should avoid such terminoligy especially in user visible text.
 */

// Define the book opt in options
define('DOTMAILER_BOOKTYPE_REQUIRED', 'required');
define('DOTMAILER_BOOKTYPE_OPTIN', 'optin');
define('DOTMAILER_BOOKTYPE_OPTOUT', 'optout');

// Load the main internal functions include
// TODO we don't really want to do this.
module_load_include('inc', 'dotmailer', 'dotmailer');

/**
 * Implements hook_menu().
 *
 * @return array
 */
function dotmailer_menu() {
  $items = array();
  $items['user/%user/dotmailer'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dotmailer_subscribe_auth_form', 1),
    'title' => 'Newsletter Subscriptions',
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'dotmailer_user_edit_access',
    'access arguments' => array(1),
    'tab_parent' => 'user/%/edit',
    'file' => 'dotmailer.pages.inc',
  );
  $items['dotmailer/subscribe'] = array(
    'page callback' => 'dotmailer_subscribe_page',
    'title' => 'Newsletter Subscription',
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('access content'),
    'file' => 'dotmailer.pages.inc',
  );
  $items['dotmailer/unsubscribe'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dotmailer_unsubscribe_form'),
    'title' => 'Newsletter Unsubscribe',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
    'file' => 'dotmailer.pages.inc',
  );
  $items['admin/config/dotmailer'] = array(
    'title' => 'Dotmailer',
    'description' => 'Manage Dotmailer Settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dotmailer_admin_settings'),
    'access arguments' => array('administer dotmailer'),
    'file' => 'dotmailer.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/dotmailer/reset'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dotmailer_reset'),
    'type' => MENU_CALLBACK,
    'access arguments' => array('administer site configuration'),
    'file' => 'dotmailer.pages.inc',
  );
  return $items;
}

/**
 * Implements hook_admin_paths().
 */
function dotmailer_admin_paths() {
  return array(
    'user/*/dotmailer' => TRUE,
  );
}

/**
 * Implements hook_permission().
 */
function dotmailer_permission() {
  return array(
    'administer dotmailer' => array(
      'title' => t('Administer dotMailer'),
    ),
  );
}

/**
 * Implements hook_user_insert().
 */
function dotmailer_user_insert(&$edit, $account, $category) {
  _dotmailer_ensure_required_subscriptions($account);
}

/**
 * Implements hook_user_update().
 */
function dotmailer_user_update(&$edit, $account, $category) {
  _dotmailer_ensure_required_subscriptions($account);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @param array $form
 * @param array $form_state
 */
function dotmailer_form_user_register_form_alter(&$form, &$form_state) {

  if (!variable_get('dotmailer_user_register', TRUE)) {
    return;
  }

  form_load_include($form_state, 'inc', 'dotmailer', 'dotmailer.pages');

  $subscribe_elements = _dotmailer_subscribe_auth_form_elements($form['#user']);

  // When there is no user and no subscriptions available, the return is an empty
  // array.
  if ($subscribe_elements) {
    // wrap in a fieldset
    $form['dotmailer_books'] = array(
      '#type' => 'fieldset',
      '#title' => t('Newsletters'),
    );
    $form['dotmailer_books']['content'] = $subscribe_elements;
    $form['#submit'][] = 'dotmailer_subscribe_auth_form_submit';
  }
}

/**
 * Determine if the user can edit their Dotmailer settings
 *
 * @param object $user
 *
 * @return
 */
function dotmailer_user_edit_access($user) {
  return variable_get('dotmailer_user_edit', TRUE) && user_edit_access($user);
}

/*********************************
 * Improved API functions
 *////////////////////////////////

/**
 * Retrieve the actual credentials for each of the dotMailer accounts that are
 * configured.
 *
 */
function dotmailer_get_accounts() {
  $accounts = &drupal_static(__FUNCTION__, NULL);
  if ($accounts === NULL) {
    $accounts = array();
    // Storage format is 1-based not 0-based, hence the initiall increment.
    $i = 0;
    do {
      $i ++;
      $username = variable_get('dotmailer_username' . $i);
      $password = variable_get('dotmailer_password' . $i);
      $account = array(
        'username' => $username,
        'password' => $password,
        'variable_username' => 'dotmailer_username' . $i,
        'variable_password' => 'dotmailer_password' . $i,
      );
    } while ($username !== NULL && ($accounts[$i] = $account));
  }
  return $accounts;
}

/**
 * Returns a list of active dotmailer address books.
 */
function dotmailer_get_active_address_books() {

  $address_books = &drupal_static(__FUNCTION__);

  if (!isset($address_books)) {
    $address_books = array();
    $active = variable_get('dotmailer_active_lists');
    if ($active) {
      foreach ($active as $addres_books) {
        foreach ($addres_books as $addres_book_id) {
          $address_books[$addres_book_id] = dotmailer_get_saved_address_book($addres_book_id);
        }
      }
    }
  }

  return $address_books;
}

/**
 * Returns a list of active address books for use in form options
 * (hook_options_list()).
 */
function dotmailer_active_address_books_list(){
  $options = array();
  foreach (dotmailer_get_active_address_books() as $address_book) {
    $options[$address_book->Id] = $address_book->Name;
  }
  return $options;
}

/**
 * The *only* correct way to add a contact to a dotmailer address book.
 *
 * @param stdClass $address_book
 * @param string $email
 * @param array $datafields
 * @param array|NULL $is_subscribed
 * @param bool $message
 *
 * @return bool
 */
function dotmailer_add_contact(stdClass $address_book, $email, $datafields = array(), $is_subscribed = NULL, $message = TRUE) {

  if (!isset($is_subscribed)) {
    $is_subscribed = array('subscribed' => FALSE, 'contactId' => NULL);
  }

  // TRUE or FALSE is more than sufficient here.
  return (bool)_dotmailer_subscribe_user($address_book, $email, $datafields, $is_subscribed, $message);
}

