<?php

/**
 * Implements hook_menu().
 */
function simpleantispam_menu() {
  $items = array();

  $items['admin/config/system/simpleantispam'] = array(
    'title' => 'Simple Anti-Spam',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simpleantispam_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'simpleantispam.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_form_alter().
 */
function simpleantispam_form_alter(&$form, &$form_state, $form_id) {
  if (!user_is_anonymous()) {
    return;
  }

  $forms = variable_get('simpleantispam_forms', array());
  if (isset($forms[$form_id])) {
    $form['smplntspm1'] = array(
      '#type' => 'checkbox',
      '#title' => t('I\'m not a spammer'),
      '#weight' => $forms[$form_id],
    );

    $form['smplntspm2'] = array(
      '#type' => 'checkbox',
      '#title' => t('I\'m a spammer'),
      '#weight' => $forms[$form_id],
      '#prefix' => '<div class="element-invisible">',
      '#suffix' => '</div>',
    );

    $form['#validate'][] = 'simpleantispam_form_validate';

    $form['#attached']['library'][] = array('system', 'jquery.cookie');
    $form['#attached']['js'][] = drupal_get_path('module', 'simpleantispam') . '/simpleantispam.js';
  }
}

/**
 * Custom validate callback.
 */
function simpleantispam_form_validate($form, $form_state) {
  if (!$form_state['values']['smplntspm1'] || $form_state['values']['smplntspm2']) {
    form_set_error('smplntspm1', t('Detected spam.'));
    simpleantispam_error($form, t('Checkboxes check fail'));
  }
  else {
    $check_stopwords = variable_get('simpleantispam_check_stopwords', FALSE);
    $check_length    = variable_get('simpleantispam_check_length', FALSE);
    $check_links     = variable_get('simpleantispam_check_links', FALSE);
    $check_php       = variable_get('simpleantispam_check_php', FALSE);

    if ($check_stopwords || $check_length || $check_links || $check_php) {
      foreach (simpleantispam_get_form_text_elements($form) as $element) {
        $text = simpleantispam_get_text_from_element($element);
        $error = '';

        if ($check_stopwords) {
          $error = simpleantispam_check_text_on_stopwords($text);
        }
        if ($check_length && !$error) {
          $error = simpleantispam_check_text_on_max_length($text);
        }
        if ($check_links && !$error) {
          $error = simpleantispam_check_text_on_max_links($text);
        }
        if ($check_php && !$error) {
          $error = simpleantispam_check_text_on_php_code($text, $element, $form);
        }

        if ($error) {
          form_error($element, t('Detected spam: @error.', array('@error' => $error)));
          simpleantispam_error($form, $error);
          break;
        }
      }
    }
  }

  setcookie('simpleantispamState', $form_state['values']['smplntspm1'], REQUEST_TIME + 31536000, base_path());
}

/**
 * Return form text elements.
 */
function simpleantispam_get_form_text_elements($form) {
  $text_elements = array();

  foreach (element_children($form) as $element_name) {
    $element = $form[$element_name];

    if (isset($element['#type']) && in_array($element['#type'], array('text_format', 'textarea', 'textfield'))) {
      $text_elements[] = $element;
    }
    else {
      $text_elements = array_merge($text_elements, simpleantispam_get_form_text_elements($element));
    }
  }

  return $text_elements;
}

/**
 * Return text value from element.
 */
function simpleantispam_get_text_from_element($element) {
  if (isset($element['#type'])) {
    if ($element['#type'] == 'text_format') {
      return $element['value']['#value'];
    }
    if (in_array($element['#type'], array('textarea', 'textfield'))) {
      return $element['#value'];
    }
  }
}

/**
 * Check text on stopwords.
 */
function simpleantispam_check_text_on_stopwords($text) {
  if (!$text) {
    return FALSE;
  }

  $stopwords = variable_get('simpleantispam_stopwords', array());
  foreach ($stopwords as $stopword) {
    if (strpos($text, $stopword) !== FALSE) {
      return t('text contains stopwords');
    }
  }
}

/**
 * Check text on max length.
 */
function simpleantispam_check_text_on_max_length($text) {
  $max_length = variable_get('simpleantispam_max_text_length', 2000);
  if (drupal_strlen($text) > $max_length) {
    return t('text too long');
  }
}

/**
 * Check text on links count.
 */
function simpleantispam_check_text_on_max_links($text) {
  $max_links = variable_get('simpleantispam_max_links_count', 5);
  if (substr_count($text, '<a ') > $max_links) {
    return t('text contains too many links');
  }
}

/**
 * Check text with custom php code.
 */
function simpleantispam_check_text_on_php_code($text, $element, $form) {
  $php_code = variable_get('simpleantispam_php_code', '');
  if ($php_code) {
    return eval($php_code);
  }
}

/**
 * Log form submission.
 */
function simpleantispam_log_submission($form, $error = '') {
  watchdog(
    'simpleantispam',
    'Detected spam. <b>Error</b>: @error, <b>Form ID</b>: @form_id, <b>IP</b>: @user_ip, <b>User-Agent</b>: @user_agent, <b>$_POST</b>: <pre>@post</pre>',
    array(
      '@error' => $error,
      '@form_id' => $form['#form_id'],
      '@user_ip' => ip_address(),
      '@user_agent' => isset($_SERVER['HTTP_USER_AGENT']) ? $_SERVER['HTTP_USER_AGENT'] : 'Unknown',
      '@post' => print_r($_POST, TRUE),
    ),
    WATCHDOG_WARNING
  );
}

/**
 * Error handler.
 */
function simpleantispam_error($form, $error = '') {
  if (variable_get('simpleantispam_log', TRUE)) {
    simpleantispam_log_submission($form, $error);
  }

  if (variable_get('simpleantispam_ban', FALSE)) {
    if (flood_is_allowed('simpleantispam', variable_get('simpleantispam_ban_submissions_count', 3) - 1)) {
      flood_register_event('simpleantispam');
    }
    else {
      system_block_ip_action();
    }
  }
}
