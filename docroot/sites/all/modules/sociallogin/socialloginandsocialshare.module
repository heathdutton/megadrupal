<?php
/**
 * @file
 * Implement socialloginandsocialshare support for Drupal
 */
module_load_include('inc', 'socialloginandsocialshare', 'socialloginandsocialshare.functions');
/**
 * Implements hook_menu().
 *
 * Responed to url handling for socialloginandsocialshare module.
 *
 * @return array An array of menu items
 */
function socialloginandsocialshare_menu() {
  $items['user/%user/socialloginandsocialshare/delete'] = array(
    'title' => 'Delete Social Login',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('socialloginandsocialshare_user_delete_form', 1),
    'access callback' => 'user_edit_access',
    'access arguments' => array(1),
    'file' => 'socialloginandsocialshare.functions.inc',
  );
  $items['admin/config/people/socialloginandsocialshare'] = array(
    'title' => 'Social Login and Share',
    'description' => 'Configure setting for LoginRadius Social Login and Share',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('socialloginandsocialshare_admin_settings'),
    'access arguments' => array('administer social login'),
    'weight' => -4,
    'file' => 'socialloginandsocialshare.admin.inc',
  );
  $items['admin/config/people/socialloginandsocialshare/settings'] = array(
    'title' => 'Social Login',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('socialloginandsocialshare_admin_settings'),
    'access arguments' => array('administer social login'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
    'file' => 'socialloginandsocialshare.admin.inc',
  );
  $items['admin/config/people/socialloginandsocialshare/advancesettings'] = array(
    'title' => 'Advance Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('socialloginandsocialshare_lr_advance_settings'),
    'access arguments' => array('administer social login'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
    'file' => 'socialloginandsocialshare.admin.inc',
  );
  $items['socialloginandsocialshare/token_handler'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('socialloginandsocialshare_user_register_validate'),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * @return null|string
 *
 * Welcome email content.
 */
function socialloginandsocialshare_email_content_text() {
  $output = variable_get('socialloginandsocialshare_email_content', FALSE);

  if (!$output && $output !== '') {
    $output = '';
    $output .= '[user:name],

Your account at [site:name] has been created.

Please use following credentials to log into your account:

Website : [site:login-url]
User name : [user:name]
Password :  @password

--  [site:name]';
  }

  return $output;
}

/**
 * Implements hook_admin_paths().
 *
 * Respond to Define administrative paths.
 *
 * @return array A list of administrative paths.
 */
function socialloginandsocialshare_admin_paths() {
  return array(
    'user/*/socialloginandsocialshare' => TRUE,
    'user/*/socialloginandsocialshare/delete/*' => TRUE,
  );
}

/**
 * Implements hook_permission().
 *
 * Responed to Define user permissions.
 *
 * @return array An array of permission settings
 */
function socialloginandsocialshare_permission() {
  return array(
    'administer social login' => array(
      'title' => t('Administer Social Login settings'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_theme().
 *
 * @return array An associative array of theme hook information
 */
function socialloginandsocialshare_theme() {
  $path = drupal_get_path('module', 'socialloginandsocialshare') . '/theme';
  return array(
    'socialloginandsocialshare_popup' => array(
      'template' => 'socialloginandsocialshare_popup',
      'variables' => array(
        'popup_params' => NULL,
      ),
      'path' => $path,
    ),
    'socialloginandsocialshare_links' => array(
      'variables' => array(
        'params' => NULL,
      ),
      'template' => 'socialloginandsocialshare_links',
      'path' => $path,
    ),
    'socialloginandsocialshare_linked' => array(
      'variables' => array(
        'params' => NULL,
      ),
      'template' => 'socialloginandsocialshare_linked',
      'path' => $path,
    ),
  );
}

/**
 * Implements hook_user_update().
 * Block/unblock user, Set/Update password and create new user.
 *
 *
 * @param $edit
 * @param $account user account object
 * @param $category
 */
function socialloginandsocialshare_user_update(&$edit, $account, $category) {
  if (isset($_POST['op']) && ($_POST['op'] == 'Update' || $_POST['op'] == 'Save') && !variable_get('user_email_verification', TRUE)) {
    if (user_access('administer site configuration')) {
      if (!$account->login) {
        db_update('users')
          ->fields(array(
            'login' => REQUEST_TIME,
          ))
          ->condition('uid', $account->uid)
          ->execute();
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 *
 * Respond to disable traditional login block form.
 *
 * @param array $form Nested array of form elements that comprise the form.
 * @param array $form_state A keyed array containing the current state of the form
 * @param string $form_id A unique string identifying the form
 * @return array A renderable html form
 */
function socialloginandsocialshare_form_alter(&$form, &$form_state, $form_id) {
  if (variable_get('socialloginandsocialshare_disable_traditional_login') == 1) {
    if ($form_id == 'user_login_block') {
      unset($form['name']);
      unset($form['pass']);
      unset($form['actions']);
      unset($form['links']);
    }

    return $form;
  }
}

/**
 * Implements hook_form_comment_form_alter().
 *
 * Add Social Login interface at comment form.
 *
 * @param array $form Nested array of form elements that comprise the form.
 * @param array $form_state A keyed array containing the current state of the form
 * @return null
 */
function socialloginandsocialshare_form_comment_form_alter(&$form, &$form_state) {
  if (variable_get('socialloginandsocialshare_commenting_enable') == 1) {
    if (user_is_logged_in()) {
      return;
    }

    // check if loginradius sent a token to authenticate the user
    socialloginandsocialshare_user_login_form_alter($form, $form_state);
  }
}

/**
 * Implements hook_help().
 *
 * Respond to Provide online user help links.
 *
 * @param string $path The router menu path
 * @return string A localized string containing the help text
 */


function socialloginandsocialshare_help($path) {
  if ($path == 'admin/help#socialloginandsocialshare') {
    $loginradius_link = l(t('LoginRadius'), 'http://www.LoginRadius.com/', array('attributes' => array('target' => '_blank')));
    $output = '';
    $output .= '<h3>' . t('About') . '</h3>';
    $output .= '<p>' . t('This social login module is developed by LoginRadius which is a Software As A Service (SaaS).Social Login module enables social login on a Drupal website letting users log in through their existing IDs such as Facebook, Twitter, Google, Yahoo and over 15 more! Other than social login, socialloginandsocialshare plugin also include User Profile Data and Social Analytics. Please visit the !loginradius.', array('!loginradius' => $loginradius_link)) . '</p>';
    $items_list = array(
      t('Social login'),
      t('User profile data'),
      t('Social analytics'),
      t('Eliminating registration process'),
      t('Syncronize social login with traditional login'),
    );
    $output .= theme('item_list', array(
      'items' => $items_list,
      'title' => t('Use')
    ));
    $items = array(
      l(t('Drupal live demo'), 'http://demo.loginradius.com/', array('attributes' => array('target' => '_blank'))),
      l(t('Drupal Plugin Documentations'), 'http://www.loginradius.com/developers/Plugins/Drupal', array('attributes' => array('target' => '_blank'))),
      l(t('LoginRadius'), 'http://www.LoginRadius.com/', array('attributes' => array('target' => '_blank'))),
      l(t('Other live demo'), 'https://www.loginradius.com/demo', array('attributes' => array('target' => '_blank'))),
      l(t('Developers'), 'http://www.loginradius.com/developers/gettingstarted/', array('attributes' => array('target' => '_blank'))),
      l(t('LoginRadius blog'), 'http://blog.loginradius.com/', array('attributes' => array('target' => '_blank'))),
      l(t('LoginRadius video'), 'http://www.youtube.com/LoginRadius', array('attributes' => array('target' => '_blank'))),
    );
    $output .= theme('item_list', array(
      'items' => $items,
      'title' => t('Important links')
    ));
    return $output;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Respond to altering user login block.
 *
 * @param array $form Nested array of form elements that comprise the form.
 * @param array $form_state A keyed array containing the current state of the form
 */
function socialloginandsocialshare_form_user_login_block_alter(&$form, &$form_state) {
  if (variable_get('socialloginandsocialshare_attach_login_form') == 1) {
    socialloginandsocialshare_user_login_form_alter($form, $form_state);
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for socialloginandsocialshare_form_user_login_alter().
 *
 * Respond to add a socialloginandsocialshare link on user login form.
 *
 * @param array $form Nested array of form elements that comprise the form.
 * @param array $form_state A keyed array containing the current state of the form
 */
function socialloginandsocialshare_form_user_login_alter(&$form, &$form_state) {
  if (variable_get('socialloginandsocialshare_loginpage_position') == 1) {
    socialloginandsocialshare_user_login_form_alter($form, $form_state);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Respond to add a socialloginandsocialshare link on user register form.
 *
 * @param array $form Nested array of form elements that comprise the form.
 * @param array $form_state A keyed array containing the current state of the form
 */
function socialloginandsocialshare_form_user_register_form_alter(&$form, &$form_state) {
// Add socialloginandsocialshare link to registration form.
  if (isset($_SESSION['social_lrdata'])) {
    $userprofile = $_SESSION['social_lrdata'];
    unset($_SESSION['social_lrdata']);

    if (isset($userprofile->ID) && !empty($userprofile->ID)) {
      $data = socialloginandsocialshare_check_exist_username($userprofile);
      $form['account']['name']['#default_value'] = $data['username'];
      $form['account']['mail']['#default_value'] = $userprofile->Email_value;

      if (variable_get('user_email_verification', TRUE)) {
        $form['account']['pass']['#type'] = 'hidden';
        $form['account']['pass']['#value'] = user_password();
      }
      socialloginandsocialshare_field_show_profile_field_to_register_form($form, $userprofile);
    }
  }

  if (variable_get('socialloginandsocialshare_registerpage_position') == 1 && !user_access('administer site configuration')) {
    socialloginandsocialshare_user_login_form_alter($form, $form_state);
  }
}

/**
 * Implements hook_user_insert() The module should save its custom additions to the user object into the database
 * Insert user data when New user register via traditional social login.
 *
 * @param array $edit The array of form values submitted by the user
 * @param object $account The user object on which the operation is being performed
 * @param string $category The active category of user information being edited
 */
function socialloginandsocialshare_user_insert(&$edit, $account, $category) {
  if (isset($_SESSION['social_lrdata'])) {
    $userprofile = $_SESSION['social_lrdata'];
    unset($_SESSION['social_lrdata']);

    if (variable_get('user_pictures') == 1 && !empty($userprofile->ImageUrl)) {
      socialloginandsocialshare_insert_picture($userprofile->ImageUrl, $account);
    }

    socialloginandsocialshare_insert_into_mapping_table($userprofile->ID, $userprofile->Provider, $account->uid);
  }
}

/**
 *
 * @param object $account The user object on which the operation is being performed
 *
 * Function that insert social user picture.
 */
function socialloginandsocialshare_user_delete($account) {
  $aid = db_query('SELECT aid FROM {authmap} WHERE uid = :id', array('id' => $account->uid))->fetchField();
  db_delete('loginradius_mapusers')
    ->condition('aid', $aid)
    ->execute();
}

/**
 * Implements hook_block_info().
 *
 * @return array An associative array whose keys define the delta for each block and whose values contain the block descriptions
 */
function socialloginandsocialshare_block_info() {
  $blocks['login'] = array(
    'info' => t('LoginRadius Social login'),
    'cache' => DRUPAL_CACHE_PER_PAGE | DRUPAL_CACHE_PER_ROLE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * @param string $delta Which block to render. This is a unique identifier for the block within the module, defined in hook_block_info()
 * @return array Contain block's body and subject
 */
function socialloginandsocialshare_block_view($delta) {
  $block = array();
  if ($delta == 'login') {
    if (user_is_logged_in()) {
      $block['content'] = '';
    }
    else {
      $my_settings = socialloginandsocialshare_inetrafce_settings();
      $block['content'] = array(
        '#theme' => 'socialloginandsocialshare_links',
        '#attached' => array(
          'js' => array(
            array('data' => array('lrsociallogin' => $my_settings), 'type' => 'setting')
          )
        ),
      );
    }
  }

  return $block;
}

/**
 * Implements hook_mail().
 *
 * @param string $key An identifier of the mail
 * @param array $message An array to be filled in
 * @param array $params An arbitrary array of parameters set by the caller to drupal_mail
 *
 */
function socialloginandsocialshare_mail($key, &$message, $params) {
  switch ($key) {
    case 'newuser':
      $language = $message['language'];
      $variables = array(
        'user' => $params['account'],
        'pass' => isset($params['pass']) ? $params['pass'] : ''
      );
      $message['subject'] = socialloginandsocialshare_mail_text($key . '_subject', $language, $variables);
      $message['body'][] = socialloginandsocialshare_mail_text($key . '_body', $language, $variables);
      break;
  }
}

/**
 * Implements hook_form_FORM_ID_form_alter().
 * Show Social Account Linking interface at user profile page.
 *
 * @param array $form Nested array of form elements that comprise the form.
 * @param array $form_state A keyed array containing the current state of the form
 * @param string $form_id A unique string identifying the form
 * @return array A renderable html form
 */
function socialloginandsocialshare_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  if (!user_access('administer site configuration') && variable_get('socialloginandsocialshare_account_linking') == 1) {
    $identity_title = variable_get('socialloginandsocialshare_identity_label_string');
    $value = theme('socialloginandsocialshare_linked');
    $my_settings = socialloginandsocialshare_inetrafce_settings();
    $form['socialloginandsocialshare_linked'] = array(
      '#type' => 'item',
      '#title' => '',
      '#markup' => $value,
      '#attributes' => array('class' => array('socialloginandsocialshare_linked')),
      '#prefix' => '<fieldset class="form-wrapper" id="edit-social-linked"><legend><span class="fieldset-legend">' . t($identity_title) . '</span></legend>',
      '#suffix' => '</fieldset>',
      '#weight' => -20,
      '#attached' => array(
        'js' => array(
          array('data' => array('lrsociallogin' => $my_settings), 'type' => 'setting')
        )
      ),
    );
  }

  return $form;
}

/**
 * Implements hook_preprocess.
 * variables for socialloginandsocialshare_linked.tpl file
 * Show Account Linking interface
 *
 * @global type $user
 *
 * @param array $vars variables array used in linked tpl file
 */
function socialloginandsocialshare_preprocess_socialloginandsocialshare_linked(&$vars) {
  global $user;
  $result = db_query("SELECT am.aid, authname, provider, provider_id FROM {authmap} am INNER JOIN {loginradius_mapusers} sm ON am.aid = sm.aid WHERE uid = :uid", array(
    ':uid' => $user->uid
  ));

  foreach ($result as $identity) {
    $vars['providers'][$identity->provider_id] = $identity->provider;
  }
}


/**
 * hook_preprocess_page()
 *
 * Add Social login Script and Sharing script in all pages.
 *
 * @param $vars variables array
 * @param $hook hook name
 */
function socialloginandsocialshare_preprocess_page(&$vars, $hook) {
  drupal_add_js(drupal_get_path('module', 'socialloginandsocialshare') . '/js/LoginRadiusSDK.js', array(
    'type' => 'file',
    'scope' => 'header'
  ));
}

/**
 * Function that process login/registration/popup functionality.
 *
 * @global object $user user information
 * @param array $form Nested array of form elements that comprise the form.
 * @param array $form_state A keyed array containing the current state of the form
 * @param string $token LoginRadius access token
 * @return array A renderable html form
 */
function socialloginandsocialshare_user_register_validate($form, &$form_state) {
  global $user;
  $post_value = $_POST;

  // Get socialloginandsocialshare variable.
  module_load_include('inc', 'socialloginandsocialshare', 'socialloginandsocialshare.loginradius');
  $obj = new LoginRadius();

  // handle email popup.
  if (isset($post_value['socialloginandsocialshare_emailclick'])) {
    return socialloginandsocialshare_email_popup_submit($form, $form_state, $post_value);
  }
  //clear session of loginradius data when email popup cancel.
  elseif (isset($post_value['socialloginandsocialshare_emailclick_cancel'])) {
    unset($_SESSION['lrdata']);
    drupal_goto();
  }
  $secret =  trim(variable_get('socialloginandsocialshare_apisecret'));
  $token = $obj->loginradius_fetch_access_token($secret);

  //check loginradius token is posted on this page.
  if (empty($token)) {
    return;
  }

  $userprofile = $obj->loginradius_get_user_profiledata($token);

  //Handle login/registration functionality when user os not logged in.
  if (!user_is_logged_in()) {
    if (isset($userprofile->ID) && $userprofile->ID != '') {
      $userprofile = socialloginandsocialshare_getuser_data($userprofile);
      $userprofile->widget_token = trim($token);
      variable_set('user_verify', 0);

      if (variable_get('socialloginandsocialshare_email_required', 1) && empty($userprofile->Email_value)) {
        $account = user_external_load($userprofile->ID);

        if (isset($account->uid) && $account->uid != 0) {
          return $form = socialloginandsocialshare_provide_login_to_unblock_user($account, $userprofile, $form, $form_state);
        }
        else {
          socialloginandsocialshare_enable_force_registration($userprofile);
          $_SESSION['lrdata'] = $userprofile;
          $text_emailpoup = variable_get('socialloginandsocialshare_emailrequired_popup_text');
          $popup_params = array(
            'msg' => t($text_emailpoup, array('@provider' => t($userprofile->Provider))),
            'provider' => $userprofile->Provider,
            'msgtype' => 'status'
          );
          $theme = theme('socialloginandsocialshare_popup', array('popup_params' => $popup_params));
          $form['socialloginandsocialshare_popup'] = socialloginandsocialshare_get_popup_form_element_array($theme);
          return $form;
        }
      }

      return $form = socialloginandsocialshare_check_existing_user($form, $form_state, $userprofile);
    }
    elseif (!user_is_logged_in()) {
      socialloginandsocialshare_show_error_message($userprofile);
    }
  }
  elseif (!empty($token)) {
    if ((!isset($post_value['lr_source'])) || (isset($post_value['lr_source']) && !in_array($post_value['lr_source'], array(
          'wall_post',
          'friend_invite'
        )))
    ) {
      socialloginandsocialshare_user_identities_submit($form, $user, $token);
    }
  }
}
