<?php

/**
 * @file
 * File routing_debug.module.
 *
 * Module provides simple functionality - printing out Drupal routing
 * information including callback and where the callback is defined.
 */

/**
 * HOOKS ----------------------------------------------------------------------.
 */

/**
 * Implements hook_menu().
 *
 * We define following menus here:
 * 1) main page with table containing routing data,
 * 2) debug page - a helper displaying raw data,
 * 3) settings page with log debug toggle.
 */
function routing_debug_menu() {
  $menu_items = array();

  // Adding our menu to Reports group, so it's easily accessible when
  // Administration menu is not enabled.
  $menu_items['admin/reports/routing_debug'] = array(
    'title' => 'Routing debug',
    'description' => 'Get detailed information about all registered routes.',
    'page callback' => 'routing_debug_page',
    'access arguments' => array('access routing information'),
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'management',
    'file' => 'routing_debug.pages.inc',
  );

  // Adding our menu to 'devel' group, so it's displayed under Development
  // group in Administration menu.
  $menu_items['devel/routing_debug'] = array(
    'title' => 'Routing debug',
    'description' => 'Get detailed information about all registered routes.',
    'page callback' => 'routing_debug_page',
    'access arguments' => array('access routing information'),
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'devel',
    'file' => 'routing_debug.pages.inc',
  );

  $menu_items['devel/routing_debug/routing'] = array(
    'title' => 'Routing info',
    'description' => 'Get detailed information about all registered routes.',
    'access arguments' => array('access routing information'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1,
  );

  $menu_items['devel/routing_debug/debug'] = array(
    'title' => 'Devel debug',
    'description' => 'Verbose debug page with additional information provided by Devel module.',
    'page callback' => 'routing_debug_debug_page',
    'access arguments' => array('access routing information'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
    'file' => 'routing_debug.pages.inc',
  );

  $menu_items['devel/routing_debug/settings'] = array(
    'title' => 'Settings',
    'description' => 'Additional settings for Routing Debug module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('routing_debug_admin_form'),
    'access arguments' => array('access routing information'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
    'file' => 'routing_debug.admin.inc',
  );

  // Let's generate link to the config page for admin menu/pages as well.
  $menu_items['admin/config/development/routing_debug'] = array(
    'title' => 'Routing Debug settings',
    'description' => 'Additional settings for Routing Debug module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('routing_debug_admin_form'),
    'access arguments' => array('access routing information'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'routing_debug.admin.inc',
  );

  return $menu_items;
}

/**
 * Implements hook_permission().
 *
 * Defining 'Access routing information' permission for Routing Debug module.
 */
function routing_debug_permission() {
  return array(
    'access routing information' => array(
      'title' => t('Access routing information'),
    ),
  );
}

/**
 * Implements hook_help().
 *
 * Providing help text for the module.
 *
 * @inheritdoc
 */
function routing_debug_help($path, $arg) {
  switch ($path) {
    case 'admin/help#routing_debug':
      $help_text = '<h2>' . t('Description') . '</h2>';
      $help_text .= t('Routing Debug is a simple module that provides menu routing table with additional information like:');
      $help_text .= '<ul>';
      $help_text .= '<li>' . t('Name of the callback function,') . '</li>';
      $help_text .= '<li>' . t('Filename and path of file where the callback is defined,') . '</li>';
      $help_text .= '<li>' . t('Line number of function definition.') . '</li>';
      $help_text .= '</ul>';
      $help_text .= '<p>' . t('Intention of the module is to help developer to identify potential menu overrides.
        Module also provides a block with the same routing information. Add the
        block to your preferred region to always show routing debug information
        for current path.') . '</p>';
      $help_text .= '<p>' . t('Module interface is accessible on <a href="@url">/devel/routing_debug</a> page.', array('@url' => url('devel/routing_debug'))) . '</p>';

      $help_text .= '<h2>' . t('README file contents') . '</h2>';

      $path = dirname(__FILE__) . '/README.md';
      if (file_exists($path)) {
        $readme_content = file_get_contents($path);

        if (module_exists('markdown')) {
          $filters = module_invoke('markdown', 'filter_info');
          $info = $filters['filter_markdown'];

          if (function_exists($info['process callback'])) {
            $readme_output = $info['process callback']($readme_content, NULL);
          }
          else {
            $readme_output = '<pre>' . $readme_content . '</pre>';
          }
        }
        else {
          $readme_output = '<pre>' . $readme_content . '</pre>';
        }
      }

      $help_text .= $readme_output;

      return $help_text;
  }
}

/**
 * BLOCKS ---------------------------------------------------------------------.
 */

/**
 * Implements hook_block_info().
 *
 * We just define our block here; it's actual contents is being provided
 * by hook_block_view() function: Routing Debug block is the only block defined
 * by this module. Block displays the routing debug information for
 * current path.
 */
function routing_debug_block_info() {
  $routing_debug_block = array(
    'info' => t('Routing Debug'),
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks = array();
  $blocks['routing_debug'] = $routing_debug_block;

  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * Provides actual content for blocks defined by this module, in our case there
 * is only one block: 'Routing Debug block' displays the routing debug
 * information for current path.
 */
function routing_debug_block_view($delta = '') {
  $block = array();

  if (user_access('access routing information')) {
    switch ($delta) {
      case 'routing_debug':
        $block['subject'] = t('Routing Debug');
        $block['content'] = _routing_debug_block_contents();
    }
  }

  return $block;
}

/**
 * HELPERS --------------------------------------------------------------------.
 */

/**
 * Helper function trying to retrieve file and line number for given function.
 *
 * @param string $page_callback
 *   Name of function to inspect (string).
 *
 * @returns array
 *  Array consists of two parts - 'file_name' and 'line_number'.
 *
 * @throws ReflectionException
 *   Throws exception, e.g. if function does not exist/is not found.
 */
function _routing_debug_get_file_info($page_callback) {
  /* @var $rf ReflectionFunction */
  $rf = new ReflectionFunction($page_callback);
  $file_name = $rf->getFileName();
  // Removing Drupal root path from the beginning of file path.
  $file_name = substr($file_name, strlen(DRUPAL_ROOT) + 1);
  $line_number = $rf->getStartLine();

  $result = array();
  $result['file_name'] = $file_name;
  $result['line_number'] = $line_number;
  return $result;
}

/**
 * Helper function - returns debug mode flag.
 *
 * @return bool
 *   TRUE if debug mode is enabled, FALSE otherwise.
 */
function _routing_debug_debug_mode() {
  return variable_get('routing_debug_debug_mode', FALSE);
}

/**
 * Helper function - generates Routing Debug block contents.
 *
 * @return array
 *   Block contents.
 */
function _routing_debug_block_contents() {
  $block_content = array();

  $current_path = current_path();

  // We render contents of the block only if the path is valid, otherwise
  // what's to write there.
  if (drupal_valid_path($current_path)) {
    // Let's get the whole router, because menu_get_item() doesn't give us
    // everything we need. We don't mind calling menu_get_router(), because it
    // has caching implemented.
    $menu_router = menu_get_router();
    // We need to convert specific path to generic one, e.g. user/15 to user/%,
    // otherwise we won't be able to find our path in array from
    // menu_get_router. Also current_path() handles things like Drupal in
    // a sub-folder for us, so we don't need to worry about that.
    $menu_item = menu_get_item($current_path);
    $routing_item_name = $menu_item['path'];
    $routing_item = $menu_router[$routing_item_name];

    /* @var $routing_info RoutingInfo Let's retrieve routing item information
     * here magically, using Reflection. */
    $routing_info = _routing_debug_get_path_info($routing_item_name, $routing_item);

    // Build link to 'devel/menu/item' with current path.
    $url = "<a href=";
    $url .= url("devel/menu/item", array('query' => array('path' => $routing_item_name)));
    $url .= ">/" . $routing_item_name . "</a>";

    // And build content of whole block from information we've gathered.
    $block_markup = "<em>" . t("Path:") . "</em><br />'" . $url . "'<br /><br />";
    $block_markup .= "<em>" . t("Callback:") . "</em><br />'" . $routing_info->getCallback() . "()'<br /><br />";
    $block_markup .= "<em>" . t("Module:") . "</em><br /><strong>'" . $routing_info->getModule() . "'</strong><br /><br />";
    $block_markup .= "<em>" . t("File:") . "</em><br />'" . $routing_info->getFile() . "'<br /><br />";
    $block_markup .= "<em>" . t("Line:") . "</em><br />" . $routing_info->getLine();
  }
  else {
    $block_markup = "<em>" . t("This does not seem to be a valid path!") . "</em>";
  }

  $block_content['#markup'] = $block_markup;

  return $block_content;
}

/**
 * Helper function. Does actual logic of retrieving route information.
 *
 * @param string $routing_item_name
 *   Name of routing item being examined. Can be e.g. current_path().
 * @param array $routing_item
 *   Associative array, either one item from menu_get_router() array OR output
 *   from menu_get_item().
 *
 * @return object RoutingInfo
 *   Instance of RoutingInfo object.
 */
function _routing_debug_get_path_info($routing_item_name, array $routing_item) {
  /* Let's get the correct callback first,
   * as it might be masked behind 'drupal_get_form'. */

  /* @var $menu_routing_item MenuRoutingItem */
  $menu_routing_item = new MenuRoutingItem($routing_item);
  // @TODO: Are there any other options that can mask actual callback?
  $page_callback = $menu_routing_item->getPageCallbackName();
  if (0 == strcmp($page_callback, 'drupal_get_form')) {
    $page_callback = $routing_item['page arguments'][0];
  }

  // Default options for file name and function definition line number,
  // in case we can't retrieve them.
  $line_number = '?';

  // We need to wrap this into try-catch block, as creating ReflectionFunction
  // instance for callback that are not included/enabled throws an Exception.
  try {
    $function_data = _routing_debug_get_file_info($page_callback);
    $file_name = $function_data['file_name'];
    $line_number = $function_data['line_number'];
  }
  catch (ReflectionException $re) {
    // We got some failure, so let's write some debug first.
    (_routing_debug_debug_mode()) ? watchdog('routing_debug', "Reflection failed: " . $re->getMessage() . "; Trace: " . $re->getTraceAsString(), array(), WATCHDOG_DEBUG) : NULL;

    // In case we were not able to get the file name dynamically, we'll
    // have to work with data provided in 'menu_get_router' array.
    $file_name = $routing_item['include file'];

    // Let's prepare or file parts for it's loading.
    $file_parts = pathinfo($file_name);
    $module_path = drupal_get_path('module', $routing_item['module']);
    $incl_type = $file_parts['extension'];
    $incl_module = $routing_item['module'];
    $incl_name = substr(substr($file_name, strlen($module_path) + 1), 0, -(strlen($incl_type) + 1));
    module_load_include($incl_type, $incl_module, $incl_name);

    // And let's try getting the function declaration again.
    try {
      $function_data = _routing_debug_get_file_info($page_callback);
      $file_name = $function_data['file_name'];
      $line_number = $function_data['line_number'];
    }
    catch (ReflectionException $re) {
      // Not much else we can do here - we'll print what ever we got.
      // Default options for file name and function definition line number,
      // in case we can't retrieve them.
      $file_name = t('unavailable/not enabled');
    }
  }

  /* @var $routing_info RoutingInfo */
  $routing_info = new RoutingInfo();
  $routing_info->setPath($routing_item_name);
  $routing_info->setCallback($page_callback);
  $routing_info->setModule($routing_item['module']);
  $routing_info->setFile($file_name);
  $routing_info->setLine($line_number);

  return $routing_info;
}
