<?php
/**
 * @file
 * This module is for subscription.
 */

/**
 * Implements hook_menu().
 */
function total_subscription_menu() {
  $items = array();
  $items['total-subscription-verify'] = array(
    'title' => 'Verification mail',
    'page callback' => 'total_subscription_verification_mail',
    'access arguments' => array('total subscription permission'),
    'type' => MENU_CALLBACK,
  );
  $items['total-subscription/unsubscribe'] = array(
    'title' => 'Unsubscribe',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('total_subscription_unsubscribe_entry'),
    'access arguments' => array('total subscription permission'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/user-interface/subscription-mail'] = array(
    'title' => 'Total Subscription',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('total_subscription_mail_admin_form_settings'),
    'access arguments' => array('admin settings for mail'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'total_subscription.admin.inc',
  );
  $items['admin/config/user-interface/subscription-mail/subscription-mail-settings'] = array(
    'title' => 'Mail Settings',
    'weight' => 1,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/config/user-interface/subscription-mail/subscription-mail'] = array(
    'title' => 'Template',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('total_subscription_admin_form'),
    'access arguments' => array('admin settings for mail'),
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
    'file' => 'total_subscription.admin.inc',
  );
  $items['admin/config/user-interface/subscription-mail/result'] = array(
    'title' => 'Result',
    'page callback' => array('total_subscription_taxonomy_search'),
    'access arguments' => array('total subscription permission'),
    'type' => MENU_LOCAL_TASK,
    'expanded' => TRUE,
    'weight' => 3,
  );
  $items['admin/config/user-interface/subscription-mail/result/taxonomy'] = array(
    'title' => 'Taxonomy',
    'access arguments' => array('total subscription permission'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1,
  );
  $items['admin/config/user-interface/subscription-mail/result/nodes'] = array(
    'title' => 'Node',
    'page callback' => array('total_subscription_node_search'),
    'access arguments' => array('total subscription permission'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function total_subscription_permission() {
  return array(
    'total subscription permission' => array(
      'title' => t('total subscription permission'),
      'description' => t('Permission for Total Subscription.'),
    ),
    'admin settings for mail' => array(
      'title' => t('admin settings for mail'),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function total_subscription_block_info() {
  $blocks = array();
  $blocks['susbcription_block'] = array(
    'info' => t('Total Subscription Block'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function total_subscription_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'susbcription_block':
      $block['content'] = total_subscription_block();
      break;
  }
  return $block;
}

/**
 * Callback of total_subscription_block().
 */
function total_subscription_block() {
  $block = array();
  $arg = arg();
  $block = drupal_get_form('total_subscription_subscribe_form', $arg);
  return $block;
}

/**
 * Callback function for verification of unsubscription.
 */
function total_subscription_unsubscribe_entry($form, $form_state) {
  $selected_email = isset($form_state['values']['unsubscribe_email']) ? $form_state['values']['unsubscribe_email'] : '';

  $form['terms_nodes_fieldset'] = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#prefix' => '<div id="subscription-list">',
    '#suffix' => '</div>',
  );

  $form['terms_nodes_fieldset']['unsubscribe_email'] = array(
    '#type' => 'textfield',
    '#attributes' => array(
      'placeholder' => array(t('Please Enter your Email.')),
    ),
    '#default_value' => $selected_email,
    '#size' => 60,
    '#maxlength' => 128,
  );

  $subscription_terms = total_subscription_related_terms($selected_email, 'taxonomy_term');
  $susbscription_nodes = total_subscription_related_terms($selected_email, 'node');

  $form['terms_nodes_fieldset']['get_ajax'] = array(
    '#type' => 'button',
    '#ajax' => array(
      'callback' => 'total_subscription_unsubscribe_email_callback',
      'wrapper' => 'subscription-list',
    ),
    '#default_value' => t('Fetch Categories'),
  );

  if (!empty($subscription_terms)) {
    $form['terms_nodes_fieldset']['unsubscribe_checkbox_terms'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Select Categories:'),
      '#options' => $subscription_terms,
    );
  }
  if (!empty($susbscription_nodes)) {

    $form['terms_nodes_fieldset']['unsubscribe_checkbox_nodes'] = array(
      '#type' => 'checkboxes' ,
      '#title' => t('Select Content Types:'),
      '#options' => $susbscription_nodes,
    );
  }
  if (!empty($subscription_terms) || !empty($susbscription_nodes)) {
    $form['terms_nodes_fieldset']['unsubscribe'] = array(
      '#type' => 'submit' ,
      '#value' => t('Unsubscribe'),
    );
  }
  return $form;
}

/**
 * Submit handler for total_subscription_unsubscribe_entry form.
 */
function total_subscription_unsubscribe_entry_submit($form, $form_state) {
  total_subscription_mail_send($form_state['values']);
  drupal_set_message(t('You must follow instructions in the mail to confirm that you have unsubscribed'), 'status', FALSE);
}

/**
 * Validate handler for total_subscription_unsubscribe_entry form.
 */
function total_subscription_unsubscribe_entry_validate($form, $form_state) {
  if (!valid_email_address($form_state['values']['unsubscribe_email'])) {
    form_set_error('mail', t('That e-mail address is not valid.'));
  }
}

/**
 * Function for getting all details by per user by entity type.
 */
function total_subscription_related_terms($email, $entity_type) {
  $result = array();
  $all_user_detail = total_subscription_get_all_subscribe_entry_by_user($email);
  foreach ($all_user_detail as $user_detail) {
    if ($entity_type == 'taxonomy_term') {
      if (!empty($user_detail->entity_type)) {
        if ($user_detail->entity_type == "taxonomy_term") {
          $result[$user_detail->entity_id] = $user_detail->bundle;

        }
      }
    }
    elseif ($entity_type == 'node') {
      if ($user_detail->entity_type == "node") {
        $result[$user_detail->entity_id] = $user_detail->bundle;
      }
    }
  }
  return $result;
}

/**
 * Function for ajax callback by Email textarea.
 */
function total_subscription_unsubscribe_email_callback($form, &$form_state) {

  return $form['terms_nodes_fieldset'];
}

/**
 * Function for getting all details by per user.
 */
function total_subscription_get_all_subscribe_entry_by_user($email) {
  $hash = db_select('total_subscription', 'ts');
  $hash->fields('ts', array('entity_id', 'entity_type', 'bundle'))
        ->condition('ts.mail', $email);
  $result = $hash->execute()->fetchAll();
  return $result;
}

/**
 * Callback function for verification of subscription and unsubscription.
 */
function total_subscription_verification_mail() {
  global $base_url;
  if (isset($_GET['entity_type'])) {
    $explode_array = explode('-', $_GET['entity_type']);
    if (isset($explode_array['0'])) {
      $entity_type = $explode_array['0'];
    }
    if (isset($explode_array['1'])) {
      $select_node_type = $explode_array['1'];
    }
  }
  if (isset($_GET['Subscribe'])) {
    if ($entity_type == 'home') {
      foreach (drupal_json_decode($_GET['tids']) as $tids) {
        // Checking the hash thing.
        $result = total_subscription_get_hash('taxonomy_term', $tids, $_GET['email']);
        if (!empty($result)) {
          total_subscription_active_update('taxonomy_term', $tids, $_GET['email']);
        }
      }
      drupal_set_message(t("Thank you for verifying your email subscription"), 'status', FALSE);
      drupal_goto($base_url);
    }
    if ($entity_type == 'node') {
      // Checking the taxonomies in a specific node.
      foreach (drupal_json_decode($_GET['tids']) as $tids) {
        // Checking the hash thing.
        $result = total_subscription_get_hash('taxonomy_term', $tids, $_GET['email']);
        if (!empty($result)) {
          total_subscription_active_update('taxonomy_term', $tids, $_GET['email']);
        }
      }
      if ($select_node_type == 1) {
        // Checking the hash thing.
        $result = total_subscription_get_hash($entity_type, $_GET['entity_id'], $_GET['email']);
        // Checking only nodes.
        if (!empty($result)) {
          total_subscription_active_update($entity_type, $_GET['entity_id'], $_GET['email']);
        }
      }
      drupal_set_message(t("Thank you for verifying your email subscription"), 'status', FALSE);
      drupal_goto('node/' . $_GET['entity_id']);
    }
    elseif ($entity_type == 'taxonomy_term') {
      // Checking the hash thing.
      $result = total_subscription_get_hash($entity_type, $_GET['entity_id'], $_GET['email']);
      if (!empty($result)) {
        total_subscription_active_update($entity_type, $_GET['entity_id'], $_GET['email']);
      }
      drupal_set_message(t("Thank you for verifying your email subscription"), 'status', FALSE);
      drupal_goto('taxonomy/term/' . $_GET['entity_id']);
    }
  }
  elseif (isset($_GET['Unsubscribe'])) {
    if ($_GET['node']) {
      foreach (drupal_json_decode($_GET['node']) as $nids) {
        // Checking the hash thing.
        $result = total_subscription_get_hash('node', $nids, $_GET['email']);
        if (!empty($result)) {
          total_subscription_delete_unsubscribe_entry('node', $nids, $_GET['email']);
        }
      }
    }
    if ($_GET['tids']) {
      foreach (drupal_json_decode($_GET['tids']) as $tids) {
        // Checking the hash thing.
        $result = total_subscription_get_hash('taxonomy_term', $tids, $_GET['email']);
        if (!empty($result)) {
          total_subscription_delete_unsubscribe_entry('taxonomy_term', $tids, $_GET['email']);
        }
      }
    }
    drupal_set_message(t("You are now unsubscribed. We're sorry to see you go. If you change your mind, you can always subscribe once again to categories of your choice."), 'status', FALSE);
    drupal_goto($base_url);
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function total_subscription_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/' . $plugin_type;
  }
}

/**
 * Form For the pages.
 */
function total_subscription_subscribe_form($form, &$form_state, $contexts) {
  global $user;
  $taxonomy_name = array();
  $taxonomy_tids = array();
  if (is_array($contexts) && $contexts['0'] instanceof ctools_context) {
    foreach ($contexts as $contexts_values) {
      if (isset($contexts_values->data)) {
        switch ($contexts_values->keyword) {
          case 'node':
            $taxonomy_tids = total_subscription_get_tids($contexts_values->data->nid);
            if (isset($taxonomy_tids)) {
              foreach ($taxonomy_tids as $tids) {
                $taxonomy_detail = taxonomy_term_load($tids);
                $taxonomy_name[$tids] = $taxonomy_detail->name;
              }
              if (!empty($taxonomy_name)) {
                $form['node_taxonomy'] = array(
                  '#type' => 'select',
                  '#multiple' => TRUE,
                  '#title' => t('Subscribe to this category:'),
                  '#options' => $taxonomy_name,
                );
              }
            }
            $form['content_type_name'] = array(
              '#type' => 'checkbox',
              '#name' => 'content_type_name',
              '#title' => t('Subscribe to these kind of @content_type_name', array('@content_type_name' => $contexts_values->data->type)),
            );

            $form['entity_type'] = array(
              '#type' => 'hidden',
              '#name' => 'entity_type',
              '#value' => $contexts_values->type['2'],
            );

            $form['bundle'] = array(
              '#type' => 'hidden',
              '#name' => 'bundle_type',
              '#value' => $contexts_values->data->type,
            );
            $form['entity_id'] = array(
              '#type' => 'hidden',
              '#name' => 'entity_id',
              '#value' => $contexts_values->data->nid,
            );
            break;

          case 'term':
            $form['entity_type'] = array(
              '#type' => 'hidden',
              '#name' => 'entity_type',
              '#value' => $contexts_values->type['2'],
            );
            $form['bundle'] = array(
              '#type' => 'hidden',
              '#name' => 'bundle_type',
              '#value' => $contexts_values->data->name,
            );
            $form['entity_id'] = array(
              '#type' => 'hidden',
              '#name' => 'entity_id',
              '#value' => $contexts_values->data->tid,
            );
            break;
        }
      }
    }
  }
  elseif (is_array($contexts) && ($contexts['0'] == 'taxonomy' || $contexts['0'] == 'node')) {
    if ($contexts['0'] == 'node' && !drupal_is_front_page()) {
      $node = node_load($contexts['1']);
      $taxonomy_tids = total_subscription_get_tids($node->nid);
      if (isset($taxonomy_tids)) {
        foreach ($taxonomy_tids as $tids) {
          $taxonomy_detail = taxonomy_term_load($tids);
          $taxonomy_name[$tids] = $taxonomy_detail->name;
        }
        if (!empty($taxonomy_name)) {
          $form['node_taxonomy'] = array(
            '#type' => 'select',
            '#multiple' => TRUE,
            '#title' => t('Subscribe to this category:'),
            '#options' => $taxonomy_name,
          );
        }
      }
      $form['content_type_name'] = array(
        '#type' => 'checkbox',
        '#name' => 'content_type_name',
        '#title' => t('Subscribe to these kind of @node_type', array('@node_type' => $node->type)),
      );

      $form['entity_type'] = array(
        '#type' => 'hidden',
        '#name' => 'entity_type',
        '#value' => 'node',
      );

      $form['bundle'] = array(
        '#type' => 'hidden',
        '#name' => 'bundle_type',
        '#value' => $node->type,
      );
      $form['entity_id'] = array(
        '#type' => 'hidden',
        '#name' => 'entity_id',
        '#value' => $node->nid,
      );
    }
    elseif ($contexts['0'] == 'taxonomy' && $contexts['1'] == 'term') {
      $term = taxonomy_term_load($contexts['2']);
      $form['entity_type'] = array(
        '#type' => 'hidden',
        '#name' => 'entity_type',
        '#value' => 'taxonomy_term',
      );
      $form['bundle'] = array(
        '#type' => 'hidden',
        '#name' => 'bundle_type',
        '#value' => $term->name,
      );
      $form['entity_id'] = array(
        '#type' => 'hidden',
        '#name' => 'entity_id',
        '#value' => $term->tid,
      );
    }
  }

  // For the Home page.
  if (drupal_is_front_page()) {
    $form['front_taxonomy'] = array(
      '#type' => 'select',
      '#title' => t('Subscribe:'),
      '#multiple' => TRUE,
      '#options' => total_subscription_get_all_tids(),
    );
  }

  // Checking for logged-in User.
  if (user_is_logged_in()) {
    $form['mail'] = array(
      '#type' => 'hidden',
      '#value' => $user->mail,
    );
  }
  else {
    $form['mail'] = array(
      '#type' => 'textfield',
      '#attributes' => array(
        'class' => array('total_subscription_email'),
        'placeholder' => array(t('Please Enter your Email.')),
      ),
      '#size' => 60,
      '#maxlength' => 128,
    );
  }

  $form['subscribe'] = array(
    '#type' => 'submit',
    '#value' => t('Subscribe'),
  );
  if (is_array($contexts) && $contexts['0'] instanceof ctools_context) {
    foreach ($contexts as $contexts_values) {
      if (isset($contexts_values->data) && $contexts_values->keyword == 'term') {
        $form['subscribe']['#value'] = t('Subscribe to @data_name', array('@data_name' => $contexts_values->data->name));
      }
    }
  }
  elseif (is_array($contexts) && ($contexts['0'] == 'taxonomy' || $contexts['0'] == 'node')) {
    if ($contexts['0'] == 'taxonomy' && $contexts['1'] == 'term') {
      $term = taxonomy_term_load($contexts['2']);
      $form['subscribe']['#value'] = t('Subscribe to @term_name', array('@term_name' => $term->name));
    }
  }

  return $form;
}
/**
 * Submit callback for Subscription.
 */
function total_subscription_subscribe_form_submit($form, &$form_state) {
  global $user;
  global $base_url;
  $checked_tids = array();
  $hash = md5(rand(0, 1000));
  if (isset($form_state['values']['front_taxonomy'])) {
    $array_value = 0;
    foreach ($form_state['values']['front_taxonomy'] as $values) {
      $array_value += $values;
    }
    // Checking the taxonomies.
    if ($form_state['values']['front_taxonomy'] && $array_value) {
      foreach ($form_state['values']['front_taxonomy'] as $tid => $value) {
        if ($value != 0) {
          $checked_tids[] = $tid;
        }
      }
    }
    if (empty($checked_tids)) {
      return drupal_set_message(t('Please select a valid category to subscribe from'), 'warning', FALSE);
    }
    foreach ($checked_tids as $tids) {
      $taxonomy_detail = taxonomy_term_load($tids);
      // Query for the checking whether is already subscribe or not.
      $result = total_subscription_check_mail('taxonomy_term', $tids, $form_state['values']['mail']);
      if (empty($result)) {
        db_insert('total_subscription')
          ->fields(array(
            'mail' => $form_state['values']['mail'],
            'entity_type' => 'taxonomy_term',
            'bundle' => $taxonomy_detail->name,
            'entity_id' => $tids,
            'hash' => $hash,
          ))
          ->execute();
        if ($user->uid > 0) {
          total_subscription_active_update('taxonomy_term', $tids, $form_state['values']['mail']);
        }
      }
    }
  }

  if ($form_state['values']['entity_type'] == "node") {
    // Query for the checking whether is already subscribe or not.
    $result = total_subscription_check_mail($form_state['values']['entity_type'], $form_state['values']['entity_id'], $form_state['values']['mail']);
    if (empty($result)) {
      if ($form_state['values']['content_type_name'] == 1) {
        db_insert('total_subscription')
          ->fields(array(
            'mail' => $form_state['values']['mail'],
            'entity_type' => $form_state['values']['entity_type'],
            'bundle' => $form_state['values']['bundle'],
            'entity_id' => $form_state['values']['entity_id'],
            'hash' => $hash,
          ))
          ->execute();
        if ($user->uid > 0) {
          total_subscription_active_update($form_state['values']['entity_type'], $form_state['values']['entity_id'], $form_state['values']['mail']);
        }
      }
    }

    $array_value = 0;
    foreach ($form_state['values']['node_taxonomy'] as $values) {
      $array_value += $values;
    }
    // Checking the taxonomies.
    if ($form_state['values']['node_taxonomy'] && $array_value) {
      foreach ($form_state['values']['node_taxonomy'] as $tid => $value) {
        if ($value != 0) {
          $checked_tids[] = $tid;
        }
      }
      foreach ($checked_tids as $tids) {
        $taxonomy_detail = taxonomy_term_load($tids);
        // Query for the checking whether is already subscribe or not.
        $result = total_subscription_check_mail('taxonomy_term', $tids, $form_state['values']['mail']);
        if (empty($result)) {
          db_insert('total_subscription')
            ->fields(array(
              'mail' => $form_state['values']['mail'],
              'entity_type' => 'taxonomy_term',
              'bundle' => $taxonomy_detail->name,
              'entity_id' => $tids,
              'hash' => $hash,
            ))
            ->execute();
          if ($user->uid > 0) {
            total_subscription_active_update('taxonomy_term', $tids, $form_state['values']['mail']);
          }
        }
      }
    }
  }
  elseif ($form_state['values']['entity_type'] == "taxonomy_term") {
    // Query for the checking whether is already subscribe or not.
    $result = total_subscription_check_mail($form_state['values']['entity_type'], $form_state['values']['entity_id'], $form_state['values']['mail']);
    if (empty($result)) {
      db_insert('total_subscription')
        ->fields(array(
          'mail' => $form_state['values']['mail'],
          'entity_type' => $form_state['values']['entity_type'],
          'bundle' => $form_state['values']['bundle'],
          'entity_id' => $form_state['values']['entity_id'],
          'hash' => $hash,
        ))
        ->execute();
      if ($user->uid > 0) {
        total_subscription_active_update($form_state['values']['entity_type'], $form_state['values']['entity_id'], $form_state['values']['mail']);
      }
    }
  }
  if ($user->uid == 0) {
    $form_state['values']['hash'] = $hash;
    // Sending mails.
    total_subscription_mail_send($form_state['values']);
    drupal_set_message(t('Thank you for subscribing. Please check your email for steps to verify your account.'), 'status', FALSE);
  }
  if ($user->uid > 0) {
    drupal_set_message(t('Thank you for subscribing.'), 'status', FALSE);
  }
  if (drupal_is_front_page()) {
    drupal_goto($base_url);
  }
}

/**
 * Form validation.
 */
function total_subscription_subscribe_form_validate($form, &$form_state) {
  $checked_tids = array();
  $taxonomy_names = '';
  if (isset($form_state['values']['front_taxonomy'])) {
    $array_value = 0;
    foreach ($form_state['values']['front_taxonomy'] as $values) {
      $array_value += $values;
    }
    // Checking the taxonomies.
    if ($form_state['values']['front_taxonomy'] && $array_value) {
      foreach ($form_state['values']['front_taxonomy'] as $tid => $value) {
        if ($value != 0) {
          $checked_tids[] = $tid;
        }
      }
    }
    foreach ($checked_tids as $tids) {
      $taxonomy_detail = taxonomy_term_load($tids);
      // Query for the checking whether is already subscribe or not.
      $result = total_subscription_check_mail('taxonomy_term', $tids, $form_state['values']['mail']);
      if (!empty($result)) {
        $taxonomy_detail = taxonomy_term_load($tids);
        $taxonomy_names .= $taxonomy_detail->name . ',';
      }
    }
    if (isset($taxonomy_names)) {
      form_set_error('subscribe', t('You are already subscribed to @term_name', array('@term_name' => $taxonomy_names)));
    }
  }
  if (isset($form_state['values']['entity_type']) == "node") {
    // Query for the checking whether is already subscribe or not.
    $result = total_subscription_check_mail($form_state['values']['entity_type'], $form_state['values']['entity_id'], $form_state['values']['mail']);
    if (!empty($result)) {
      if ($form_state['values']['content_type_name'] == 1) {
        $node_detail = node_load($form_state['values']['entity_id']);
        form_set_error('subscribe', t('You are already subscribed to @node_type', array('@node_type' => $node_detail->type)));
      }
    }
    if (!empty($form_state['values']['node_taxonomy'])) {
      $array_value = 0;
      foreach ($form_state['values']['node_taxonomy'] as $values) {
        $array_value += $values;
      }
      // Checking the taxonomies.
      if ($form_state['values']['node_taxonomy'] && $array_value) {
        foreach ($form_state['values']['node_taxonomy'] as $tid => $value) {
          if ($value != 0) {
            $checked_tids[] = $tid;
          }
        }
        foreach ($checked_tids as $tids) {
          $taxonomy_detail = taxonomy_term_load($tids);
          // Query for the checking whether is already subscribe or not.
          $result = total_subscription_check_mail('taxonomy_term', $tids, $form_state['values']['mail']);
          if (!empty($result)) {
            $taxonomy_detail = taxonomy_term_load($tids);
            $taxonomy_name .= $taxonomy_detail->name . ',';
          }
        }
        if (isset($taxonomy_name)) {
          form_set_error('subscribe', t('You are already subscribed to @term_name', array('@term_name' => $taxonomy_name)));
        }
      }
    }
  }
  elseif (isset($form_state['values']['entity_type']) == "taxonomy_term") {
    // Query for the checking whether is already subscribe or not.
    $result = total_subscription_check_mail($form_state['values']['entity_type'], $form_state['values']['entity_id'], $form_state['values']['mail']);
    if (!empty($result)) {
      $taxonomy_detail = taxonomy_term_load($form_state['values']['entity_id']);
      form_set_error('subscribe', t('You are already subscribed to @term_name', array('@term_name' => $taxonomy_detail->name)));
    }
  }
  if ($form_state['values']['mail'] == "") {
    form_set_error('mail', t('Please fill the e-mail address.'));
  }
  elseif (!valid_email_address($form_state['values']['mail'])) {
    form_set_error('mail', t('That e-mail address is not valid.'));
  }
}

/**
 * Function for Getting All tids.
 */
function total_subscription_get_all_tids() {
  $all_tids = db_select('taxonomy_term_data', 'td');
  $all_tids->fields('td', array('tid', 'name'))
            ->groupBy('td.tid');
  $result = $all_tids->execute()->fetchAll();
  foreach ($result as $tids) {
    $all_tids_array[$tids->tid] = $tids->name;
  }
  return $all_tids_array;
}

/**
 * Function for getting hash for particular entity id.
 */
function total_subscription_get_hash($entity_type, $entity_id, $email) {
  $hash_check = db_select('total_subscription', 'ti');
  $hash_check->fields('ti', array('hash'))
        ->condition('ti.entity_type', $entity_type)
        ->condition('ti.entity_id', $entity_id)
        ->condition('ti.mail', $email)
        ->range(0, 1);
  $result = $hash_check->execute()->fetchObject();
  return $result;
}

/**
 * Function for activating the particular user.
 */
function total_subscription_active_update($entity_type, $entity_id, $email) {
  db_update('total_subscription')
    ->fields(array('active' => 1))
    ->condition('mail', $email)
    ->condition('entity_type', $entity_type)
    ->condition('entity_id', $entity_id)
    ->execute();
}

/**
 * Function for deleting the particular user.
 */
function total_subscription_delete_unsubscribe_entry($entity_type, $entity_id, $email) {
  db_delete('total_subscription')
    ->condition('mail', $email)
    ->condition('entity_type', $entity_type)
    ->condition('entity_id', $entity_id)
    ->execute();
}

/**
 * Function for Checking the mail entry.
 */
function total_subscription_check_mail($entity_type, $entity_id, $email) {
  db_delete('total_subscription')
    ->condition('mail', $email)
    ->condition('entity_type', $entity_type)
    ->condition('entity_id', $entity_id)
    ->condition('active', 0)
    ->execute();

  $query = db_select('total_subscription', 'ti');
  $query->fields('ti', array('mail'))
        ->condition('mail', $email)
        ->condition('entity_type', $entity_type)
        ->condition('entity_id', $entity_id)
        ->condition('active', 1)
        ->range(0, 1);
  $result = $query->execute()->fetchAll();
  return $result;
}

/**
 * Function to retrieve tids associate with the specific node.
 */
function total_subscription_get_tids($nid) {
  $data = array();
  $query = db_select('taxonomy_index', 'ti');
  $query->fields('ti', array('tid'))
          ->condition('ti.nid', $nid);
  $data = $query->execute()->fetchCol();
  return $data;
}

/**
 * Function to update hash according based on entity_id, entity_type, email.
 */
function total_subscription_hash_update($hash, $email, $entity_type, $entity_id) {
  db_update('total_subscription')
    ->fields(array('hash' => $hash))
    ->condition('mail', $email)
    ->condition('entity_type', $entity_type)
    ->condition('entity_id', $entity_id)
    ->execute();
}

/**
 * Implements hook_mail().
 */
function total_subscription_mail($key, &$message, $params) {
  global $base_url;

  watchdog('total_subscription', 'sending email from subscription module.' . $key, array(), WATCHDOG_NOTICE, NULL);
  switch ($key) {
    case 'total_subscription_message':
      $array_values = "";
      $checked_tids = array();
      $message['subject'] = variable_get('total_subscription_subject_subscription', '');
      if (isset($params['message'])) {
        $message['body'][] = check_plain($params['message']);
      }
      $array_value = 0;
      if (isset($params['node_taxonomy'])) {
        foreach ($params['node_taxonomy'] as $values) {
          $array_value += $values;
        }
        // Checking the taxonomies.
        if ($params['node_taxonomy'] && $array_value) {
          foreach ($params['node_taxonomy'] as $tid => $value) {
            if ($value != 0) {
              $checked_tids[] = $tid;
            }
          }
        }
      }
      elseif (isset($params['front_taxonomy'])) {
        foreach ($params['front_taxonomy'] as $values) {
          $array_value += $values;
        }
        // Checking the taxonomies.
        if ($params['front_taxonomy'] && $array_value) {
          foreach ($params['front_taxonomy'] as $tid => $value) {
            if ($value != 0) {
              $checked_tids[] = $tid;
            }
          }
        }
        $subscription_link = $base_url . '/total-subscription-verify?' . '&email=' . $params['mail'] . '&entity_type=home&entity_id=home&tids=' . drupal_json_encode($checked_tids) . '&' . $params['op'] . '=' . $params['hash'];
        $shorten_url = variable_get('total_subscription_shorten_url', 0);
        if ($shorten_url) {
          $subscription_link = total_subscription_bitly_shorten($subscription_link);
        }
        $message['body'][] .= variable_get('total_subscription_send_start_template', "");
        $message['body'][] .= $subscription_link;
      }

      if ($params['entity_type'] == "node") {
        if ($params['content_type_name'] == 1) {
          $params['entity_type'] = $params['entity_type'] . '-1';
        }
        else {
          $params['entity_type'] = $params['entity_type'] . '-0';
        }
        $subscription_link = $base_url . '/total-subscription-verify?' . '&email=' . $params['mail'] . '&entity_type=' . $params['entity_type'] . '&entity_id=' . $params['entity_id'] . '&tids=' . drupal_json_encode($checked_tids) . '&' . $params['op'] . '=' . $params['hash'];
        $shorten_url = variable_get('total_subscription_shorten_url', 0);
        if ($shorten_url) {
          $subscription_link = total_subscription_bitly_shorten($subscription_link);
        }
        $message['body'][] .= variable_get('total_subscription_send_start_template', "");
        $message['body'][] .= $subscription_link;
      }
      elseif ($params['entity_type'] == "taxonomy_term") {
        $subscription_link = $base_url . '/total-subscription-verify?' . '&email=' . $params['mail'] . '&entity_type=' . $params['entity_type'] . '-0' . '&entity_id=' . $params['entity_id'] . '&' . $params['op'] . '=' . $params['hash'];
        $shorten_url = variable_get('total_subscription_shorten_url', 0);
        if ($shorten_url) {
          $subscription_link = total_subscription_bitly_shorten($subscription_link);
        }
        $message['body'][] .= variable_get('total_subscription_send_start_template', "");
        $message['body'][] .= $subscription_link;
      }
      if (!empty($params['op'])) {
        if ($params['op'] == t('Unsubscribe')) {
          $hash = md5(rand(0, 1000));
          if (isset($params['unsubscribe_checkbox_terms'])) {
            foreach ($params['unsubscribe_checkbox_terms'] as $values) {
              $array_value += $values;
            }
            // Checking the taxonomies.
            if ($params['unsubscribe_checkbox_terms'] && $array_value) {
              foreach ($params['unsubscribe_checkbox_terms'] as $tid => $value) {
                if ($value != 0) {
                  $unsubscribed_tids[] = $tid;
                  total_subscription_hash_update($hash, $params['unsubscribe_email'], 'taxonomy_term', $tid);
                }
              }
            }
          }
          if (isset($params['unsubscribe_checkbox_nodes'])) {
            foreach ($params['unsubscribe_checkbox_nodes'] as $values) {
              $array_values += $values;
            }
            if ($params['unsubscribe_checkbox_nodes'] && $array_values) {
              foreach ($params['unsubscribe_checkbox_nodes'] as $nid => $value) {
                if ($value != 0) {
                  $unsubscribed_nids[] = $nid;
                  total_subscription_hash_update($hash, $params['unsubscribe_email'], 'node', $nid);
                }
              }
            }
          }
          $subscription_link = $base_url . '/total-subscription-verify?' . '&email=' . $params['unsubscribe_email'] . '&node=' . drupal_json_encode($unsubscribed_nids) . '&tids=' . drupal_json_encode($unsubscribed_tids) . '&' . $params['op'] . '=' . $hash;
          $shorten_url = variable_get('total_subscription_shorten_url', 0);
          if ($shorten_url) {
            $subscription_link = total_subscription_bitly_shorten($subscription_link);
          }
          $message['body'][] .= variable_get('total_unsubscription_send_start_template', "");
          $message['body'][] .= $subscription_link;
        }
      }
      break;

    case 'total_subscription_node_message':
      $message['subject'] = $params['subject'];
      $message['body'] = array($params['body']);
      break;
  }
}

/**
 * Sends an e-mail.
 */
function total_subscription_mail_send($form_values) {
  $module = 'total_subscription';
  $key = 'total_subscription_message';

  // Specify 'to' and 'from' addresses.
  $to = isset($form_values['mail']) ? $form_values['mail'] : $form_values['unsubscribe_email'];
  $from  = variable_get('total_subscription_email_address', 'admin@example.com');
  $params = $form_values;
  $language = language_default();
  $send = TRUE;
  $result = drupal_mail($module, $key, $to, $language, $params, $from, $send);
  if ($result['result'] == TRUE) {
    return;
  }
  else {
    drupal_set_message(t('There was a problem sending your message and it was not sent.'), 'error');
  }
}

/**
 * Implements hook_node_presave().
 */
function total_subscription_node_presave($node) {
  if (isset($node->original)) {
    if ($node->original->status == 0 && $node->status == 1) {
      if (node_access('view', $node, drupal_anonymous_user())) {
        total_subscription_node_queue_mail($node);
      }
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function total_subscription_node_insert($node) {
  if ($node->status == 1) {
    if (node_access('view', $node, drupal_anonymous_user())) {
      total_subscription_node_queue_mail($node);
    }
  }
}

/**
 * Sends an e-mail.
 *
 * @param stdclass $node
 *   An array of values from the node_presave form that were submitted.
 */
function total_subscription_node_queue_mail($node) {
  $queue = 'total_subscription_mailing_queue';
  $queue = DrupalQueue::get($queue);
  $queue->createItem($node->nid);
}

/**
 * Implements hook_views_api().
 */
function total_subscription_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'total_subscription'),
  );
}

/**
 * Implements callback for taxonomy search.
 */
function total_subscription_taxonomy_search() {
  $view = views_get_view('total_subscription');
  $view->set_display('block');
  $view->pre_execute();
  $view->execute();
  return $view->render();
}

/**
 * Implements callback for node search.
 */
function total_subscription_node_search() {
  $view = views_get_view('total_subscription');
  $view->set_display('block_1');
  // Change the amount of items to show.
  $view->pre_execute();
  $view->execute();
  return $view->render();
}

/**
 * @file
 * bitly shorten url.
 */
/**
 * Implements total_subscription_bitly_shorten().
 */
function total_subscription_bitly_shorten($url) {
  $login = variable_get('total_subscription_login');
  $api_key = variable_get('total_subscription_api_key');
  $query = array(
    "version" => "2.0.1",
    "longUrl" => $url,
    "login" => $login,
    "apiKey" => $api_key,
  );

  $query = http_build_query($query);

  $request = drupal_http_request("http://api.bit.ly/shorten?" . $query);
  $response = json_decode($request->data);

  if ($response->errorCode == 0 && $response->statusCode == "OK") {
    return $response->results->{$url}->shortUrl;
  }
  else {
    return NULL;
  }
}

/**
 * Implements hook_cron_queue_info().
 */
function total_subscription_cron_queue_info() {
  $queues['total_subscription_mailing_queue'] = array(
    'worker callback' => 'total_subscription_mailing_queue_callback',
  );
  return $queues;
}

/**
 * Callback function for mailing queue.
 */
function total_subscription_mailing_queue_callback($nid) {
  global $base_url;
  $node = node_load($nid);
  $mails = array();
  $module = 'total_subscription';
  $key_of_mail = 'total_subscription_node_message';

  if (variable_get('total_subscription_email_address', '')) {
    $from = variable_get('total_subscription_email_address', '');
  }
  else {
    $from = variable_get('site_mail', '');
  }

  $language = language_default('language');

  $send = TRUE;
  $mails = array();
  $query = db_select('total_subscription', 'ts');
  $query->fields('ts', array('mail'))
    ->condition('ts.bundle', $node->type)
    ->condition('ts.entity_type', 'node')
    ->condition('ts.active', 1);
  $result = $query->execute()->fetchAll();

  if (!empty($result)) {
    foreach ($result as $subscription_mail) {
      $mails[] = $subscription_mail->mail;
    }
  }

  $fields_detail = field_info_fields();
  foreach ($fields_detail as $value) {
    if ($value['type'] == 'taxonomy_term_reference' && in_array($node->type, $value['bundles']['node'])) {
      $taxonomy_fields[] = $value['field_name'];
    }
  }
  foreach ($taxonomy_fields as $tax_fields) {
    if (!empty($node->{$tax_fields}[LANGUAGE_NONE])) {
      foreach ($node->{$tax_fields}[LANGUAGE_NONE] as $tags) {
        $node_related_tids[] = $tags['tid'];
      }
    }
  }

  if (!empty($node_related_tids)) {
    foreach ($node_related_tids as $tids) {
      $subscription_mail = db_select('total_subscription', 'ts');
      $subscription_mail->fields('ts', array('mail'))
                  ->condition('ts.entity_id', $tids)
                  ->condition('ts.entity_type', 'taxonomy_term')
                  ->condition('ts.active', 1);
      $final_mail = $subscription_mail->execute()->fetchAll();
      foreach ($final_mail as $subscription_mail_tids) {
        $mails[] .= $subscription_mail_tids->mail;
      }
    }
  }

  if (!empty($mails)) {
    $subject = "";
    $body = "";
    $subject = variable_get('total_subscription_subject_published', '');
    $body .= token_replace(variable_get('total_subscription_email_template', ""), array('node' => $node));
    $body .= $base_url . '/total-subscription/unsubscribe';
    $params = array(
      'subject' => $subject,
      'body' => $body,
    );
    $sending_mail = array_unique($mails);
    if (!empty($sending_mail)) {
      foreach ($sending_mail as $email) {
        $result = drupal_mail($module, $key_of_mail, $email, $language, $params, $from, $send);
      }
    }
  }
}
