<?php

/**
 * @file
 * Implements create and display an entity with data catched from page request.
 */

define('IMPRESSION_LOAD_PAGE', 0);
define('IMPRESSION_TOUCH_PAGE', 1);
define('IMPRESSION_MOUSE_MOVE', 2);
define('IMPRESSION_KEY_UP', 3);

/**
 * Implements hook_entity_info().
 *
 * This is the fundamental description of the entity.
 *
 * It provides a single entity with a single bundle and without revision
 * support.
 */
function impression_entity_info() {
  $info['impression_base'] = array(
    'label' => t('Impression Entity'),

    // The controller for our Entity, extending the Drupal core controller.
    'controller class' => 'ImpressionBaseController',

    // The table for this entity defined in hook_schema()
    'base table' => 'impression_base',

    // Returns the uri elements of an entity.
    'uri callback' => 'impression_base_uri',

    // IF fieldable == FALSE, we can't attach fields.
    'fieldable' => TRUE,

    'entity keys' => array(
      // The 'id' (iid here) is the unique id.
      'id' => 'iid' ,
      // Bundle will be determined by the 'bundle_type' field.
      'bundle' => 'bundle_type',
    ),
    'bundle keys' => array(
      'bundle' => 'bundle_type',
    ),

    'static cache' => TRUE,

    // Bundles are alternative groups of fields or configuration
    // associated with a base entity type.
    'bundles' => array(
      'i' => array(
        'label' => 'Impression basic bundle',
        'admin' => array(
          'path' => 'admin/structure/impression_base/manage',
          'access arguments' => array('administer impression_base entities'),
        ),
      ),
    ),
    // View modes allow entities to be displayed differently based on context.
    // As a demonstration we'll support "Tweaky", but we could have and support
    // multiple display modes.
    'view modes' => array(
      'tweaky' => array(
        'label' => t('Tweaky'),
        'custom settings' => FALSE,
      ),
    ),
  );

  return $info;
}

/**
 * Implements hook_views_api().
 */
function impression_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Fetch a basic object.
 */
function impression_base_load($iid = NULL, $reset = FALSE) {
  $iids = (isset($iid) ? array($iid) : array());
  $basic = impression_base_load_multiple($iids, array(), $reset);
  return $basic ? reset($basic) : FALSE;
}

/**
 * Loads multiple entities.
 */
function impression_base_load_multiple($iids = FALSE, $conditions = array(), $reset = FALSE) {
  return entity_load('impression_base', $iids, $conditions, $reset);
}

/**
 * Implements the uri callback.
 */
function impression_base_uri($basic) {
  return array(
    'path' => 'impression/base/' . $basic->iid,
  );
}

/**
 * Implements hook_menu().
 */
function impression_menu() {
  $items['impression'] = array(
    'title' => 'Impression Base Entity',
    'page callback' => 'impression_info_page',
    'access arguments' => array('view any impression_base entity'),
  );

  $items['impression/mousemove/%'] = array(
    'page callback' => 'impression_mouse_move',
    'access arguments' => array('access content'),
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
  );

  $items['impression/touch/%'] = array(
    'page callback' => 'impression_touch_page',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['impression/keyup/%'] = array(
    'page callback' => 'impression_keyup',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  // This provides a place for Field API to hang its own
  // interface and has to be the same as what was defined
  // in basic_entity_info() above.
  $items['admin/structure/impression_base/manage'] = array(
    'title' => 'Impression',
    'page callback' => 'impression_base_list_entities',
    'access arguments' => array('administer impression_base entities'),
  );

  // List of all impression_base entities.
  $items['admin/structure/impression_base/manage/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  // The page to view our entities - needs to follow what
  // is defined in basic_uri and will use load_basic to retrieve
  // the necessary entity info.
  $items['impression/base/%impression_base'] = array(
    'title callback' => 'impression_base_title',
    'title arguments' => array(2),
    'page callback' => 'impression_base_view',
    'page arguments' => array(2),
    'access arguments' => array('view any impression_base entity'),
  );

  // 'View' tab for an individual entity page.
  $items['impression/base/%impression_base/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  // 'Edit' tab for an individual entity page.
  $items['impression/base/%impression_base/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('impression_base_form', 2),
    'access arguments' => array('edit any impression_base entity'),
    'type' => MENU_LOCAL_TASK,
  );

  // Add example entities.
  $items['impression/base/add'] = array(
    'title' => 'Add an Impression Base Entity',
    'page callback' => 'impression_base_add',
    'access arguments' => array('create impression_base entities'),
  );

  $items['admin/config/people/impression'] = array(
    'title' => 'Impression Configuration',
    'description' => 'Impression form configuration interface.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('impression_admin_settings'),
    'access arguments' => array('administer impression'),
    'file' => 'impression.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Basic information for the page.
 */
function impression_info_page() {
  $content['preface'] = array(
    '#type' => 'item',
    '#markup' => t('The impression base entity.'),
  );
  if (user_access('administer impression_base entities')) {
    $content['preface']['#markup'] = t('You can administer these and add fields and change the view !link.',
      array('!link' => l(t('here'), 'admin/structure/impression_base/manage'))
    );
  }

  return $content;
}

/**
 * Implements hook_permission().
 */
function impression_permission() {
  $permissions = array(
    'administer impression_base entities' => array(
      'title' => t('Administer impression_base entities'),
    ),
    'view any impression_base entity' => array(
      'title' => t('View any Entity Example Basic entity'),
    ),
    'edit any impression_base entity' => array(
      'title' => t('Edit any Entity Example Basic entity'),
    ),
    'create impression_base entities' => array(
      'title' => t('Create Entity Example Basic Entities'),
    ),
    'administer impression' => array(
      'title' => t('Administrate impression module'),
    ),
  );
  return $permissions;
}

/**
 * Returns a render array with all impression_base entities.
 *
 * In this basic example we know that there won't be many entities,
 * so we'll just load them all for display. See pager_example.module
 * to implement a pager. Most implementations would probably do this
 * with the contrib Entity API module, or a view using views module,
 * but we avoid using non-core features in the Examples project.
 *
 * @see pager_example.module
 */
function impression_base_list_entities() {
  $content = array();

  $query = db_select('impression_base', 'd')->extend('PagerDefault');

  $query->fields('d', array('iid'));

  $result = $query
    ->limit(50)
    ->orderBy('d.iid', 'DESC')
    ->execute();

  $rows = array();
  foreach ($result as $row) {
    // Normally we would add some nice formatting to our rows
    // but for our purpose we are simply going to add our row
    // to the array.
    $iids[] = $row->iid;
  }

  // Load all of our entities.
  $entities = impression_base_load_multiple($iids);
  if (!empty($entities)) {
    foreach ($entities as $entity) {
      // Create tabular rows for our entities.
      $rows[] = array(
        'data' => array(
          'id' => l($entity->iid, 'impression/base/' . $entity->iid),
          'uid' => $entity->uid,
          'ip' => $entity->ip,
          'domain' => $entity->domain,
          'uri' => $entity->uri,
          'ref' => $entity->ref,
          'action' => impression_action_name($entity->action),
          'created' => $entity->created,
        ),
      );
    }
    // Put our entities into a themed table. See theme_table() for details.
    $content['entity_table'] = array(
      '#theme' => 'table',
      '#rows' => $rows,
      '#header' => array(t('ID'), t('User ID'), t('IP'), t('Domain'), t('Uri'), t('Referal URL'), t('Action'), t('Time')),
    );
  }
  else {
    // There were no entities. Tell the user.
    $content[] = array(
      '#type' => 'item',
      '#markup' => t('No impression_base entities currently exist.'),
    );
  }
  $content['pager_pager'] = array('#theme' => 'pager');
  return $content;
}

/**
 * Callback for a page title when this entity is displayed.
 */
function impression_base_title($entity) {
  return t('Impression Base (hi=@hi)', array('@hi' => $entity->hi));
}

/**
 * Menu callback to display an entity.
 *
 * As we load the entity for display, we're responsible for invoking a number
 * of hooks in their proper order.
 *
 * @see hook_entity_prepare_view()
 * @see hook_entity_view()
 * @see hook_entity_view_alter()
 */
function impression_base_view($entity, $view_mode = 'tweaky') {
  $entity_type = 'impression_base';
  $entity->content = array(
    '#view_mode' => $view_mode,
  );
  field_attach_prepare_view($entity_type, array($entity->iid => $entity),
    $view_mode);
  entity_prepare_view($entity_type, array($entity->iid => $entity));
  $entity->content += field_attach_view($entity_type, $entity, $view_mode);

  $entity->content['created'] = array(
    '#type' => 'item',
    '#title' => t('Created date'),
    '#markup' => format_date($entity->created),
  );
  $entity->content['hi'] = array(
    '#type' => 'item',
    '#title' => t('ID'),
    '#markup' => $entity->hi,
  );
  $entity->content['ip'] = array(
    '#type' => 'item',
    '#title' => t('IP'),
    '#markup' => $entity->ip,
  );
  $entity->content['uid'] = array(
    '#type' => 'item',
    '#title' => t('User ID'),
    '#markup' => $entity->uid,
  );
  $entity->content['uri'] = array(
    '#type' => 'item',
    '#title' => t('URI'),
    '#markup' => $entity->uri,
  );
  $entity->content['ref'] = array(
    '#type' => 'item',
    '#title' => t('Referral URL'),
    '#markup' => $entity->ref,
  );
  $entity->content['domain'] = array(
    '#type' => 'item',
    '#title' => t('Domain'),
    '#markup' => $entity->domain,
  );
  $entity->content['action'] = array(
    '#type' => 'item',
    '#title' => t('Action'),
    '#markup' => $entity->action,
  );

  global $language;
  $langcode = $language->language;
  module_invoke_all('entity_view', $entity, $entity_type, $view_mode,
    $langcode);
  drupal_alter(array('impression_base_view', 'entity_view'),
    $entity->content, $entity_type);

  return $entity->content;
}

/**
 * Implements hook_field_extra_fields().
 *
 * This exposes the "extra fields" (usually properties that can be configured
 * as if they were fields) of the entity as pseudo-fields
 * so that they get handled by the Entity and Field core functionality.
 * Node titles get treated in a similar manner.
 */
function impression_field_extra_fields() {
  $form_elements['hi'] = array(
    'label' => t('ID'),
    'description' => t('ID'),
    'weight' => -5,
  );
  $form_elements['action'] = array(
    'label' => t('Action'),
    'description' => t('Action user are taking on the page.'),
    'weight' => -8,
  );
  $form_elements['domain'] = array(
    'label' => t('Domain'),
    'description' => t('domain, this is only for those website have both www.example.com and example domain enabled.'),
    'weight' => -8,
  );
  $form_elements['ref'] = array(
    'label' => t('Referral URL'),
    'description' => t('Referral URL of current page'),
    'weight' => -3,
  );
  $form_elements['uid'] = array(
    'label' => t('User ID'),
    'description' => t('User id of the page impression'),
    'weight' => -9,
  );
  $form_elements['uri'] = array(
    'label' => t('URI'),
    'description' => t('URI of the page impression'),
    'weight' => -7,
  );
  $form_elements['ip'] = array(
    'label' => t('IP'),
    'weight' => -6,
  );
  $display_elements['created'] = array(
    'label' => t('Creation date'),
    'description' => t('Creation date (an extra display field)'),
    'weight' => 0,
  );
  $display_elements['hi'] = array(
    'label' => t('Hash Index'),
    'description' => t('ID'),
    'weight' => 0,
  );
  $display_elements['ip'] = array(
    'label' => t('IP'),
    'weight' => 1,
  );
  $display_elements['ref'] = array(
    'label' => t('Referral URL'),
    'weight' => 4,
  );
  $display_elements['uid'] = array(
    'label' => t('UID'),
    'weight' => 2,
  );
  $display_elements['uri'] = array(
    'label' => t('URI'),
    'weight' => 2,
  );
  $display_elements['domain'] = array(
    'label' => t('Domain'),
    'weight' => 3,
  );
  $display_elements['action'] = array(
    'label' => t('Action'),
    'weight' => 5,
  );

  $extra_fields['impression_base']['i']['form'] = $form_elements;
  $extra_fields['impression_base']['i']['display'] = $display_elements;

  return $extra_fields;
}

/**
 * Provides a wrapper on the edit form to add a new entity.
 */
function impression_base_add() {
  // Create a basic entity structure to be used and passed to the validation
  // and submission functions.
  $entity = entity_get_controller('impression_base')->create();
  return drupal_get_form('impression_base_form', $entity);
}

/**
 * Form function to create an impression_base entity.
 *
 * The pattern is:
 * - Set up the form for the data that is specific to your
 *   entity: the columns of your base table.
 * - Call on the Field API to pull in the form elements
 *   for fields attached to the entity.
 */
function impression_base_form($form, &$form_state, $entity) {
  $form['hi'] = array(
    '#type' => 'textfield',
    '#title' => t('ID'),
    '#default_value' => $entity->hi,
  );

  $form['domain'] = array(
    '#type' => 'textfield',
    '#title' => t('Domain'),
    '#default_value' => $entity->domain,
  );

  $form['action'] = array(
    '#type' => 'textfield',
    '#title' => t('Action'),
    '#default_value' => $entity->action,
  );

  $form['uid'] = array(
    '#type' => 'textfield',
    '#title' => t('UID'),
    '#required' => TRUE,
    '#default_value' => $entity->uid,
  );
  $form['uri'] = array(
    '#type' => 'textfield',
    '#title' => t('URI'),
    '#required' => TRUE,
    '#default_value' => $entity->uri,
  );

  $form['ref'] = array(
    '#type' => 'textfield',
    '#title' => t('Refferal URL'),
    '#required' => FALSE,
    '#default_value' => $entity->ref,
  );

  $form['ip'] = array(
    '#type' => 'textfield',
    '#title' => t('IP'),
    '#required' => TRUE,
    '#default_value' => $entity->ip,
  );
  $form['basic_entity'] = array(
    '#type' => 'value',
    '#value' => $entity,
  );

  field_attach_form('impression_base', $entity, $form, $form_state);

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#weight' => 100,
  );
  $form['delete'] = array(
    '#type' => 'submit',
    '#value' => t('Delete'),
    '#submit' => array('impression_base_edit_delete'),
    '#weight' => 200,
  );

  return $form;
}


/**
 * Validation handler for impression_base_add_form form.
 *
 * We pass things straight through to the Field API to handle validation
 * of the attached fields.
 */
function impression_base_form_validate($form, &$form_state) {
  field_attach_form_validate('impression_base', $form_state['values']['basic_entity'], $form, $form_state);
}


/**
 * Form submit handler: Submits basic_add_form information.
 */
function impression_base_form_submit($form, &$form_state) {
  $entity = $form_state['values']['basic_entity'];
  $entity->hi = $form_state['values']['hi'];
  $entity->ip = $form_state['values']['ip'];
  $entity->uri = $form_state['values']['uri'];
  $entity->uid = $form_state['values']['uid'];
  $entity->ref = $form_state['values']['ref'];
  $entity->domain = $form_state['values']['domain'];
  $entity->action = $form_state['values']['action'];
  field_attach_submit('impression_base', $entity, $form, $form_state);
  $entity = impression_base_save($entity);
  $form_state['redirect'] = 'impression/base/' . $entity->iid;
}

/**
 * Form deletion handler.
 *
 * @todo: 'Are you sure?' message.
 */
function impression_base_edit_delete($form, &$form_state) {
  $entity = $form_state['values']['basic_entity'];
  impression_base_delete($entity);
  drupal_set_message(t('The entity %hi (ID %id) has been deleted',
    array('%hi' => $entity->hi, '%id' => $entity->iid))
  );
  $form_state['redirect'] = 'impression';
}

/**
 * We save the entity by calling the controller.
 */
function impression_base_save(&$entity) {
  return entity_get_controller('impression_base')->save($entity);
}

/**
 * Use the controller to delete the entity.
 */
function impression_base_delete($entity) {
  entity_get_controller('impression_base')->delete($entity);
}

/**
 * EntityExampleBasicControllerInterface definition.
 *
 * We create an interface here because anyone could come along and
 * use hook_entity_info_alter() to change our controller class.
 * We want to let them know what methods our class needs in order
 * to function with the rest of the module, so here's a handy list.
 *
 * @see hook_entity_info_alter()
 */
interface ImpressionBaseControllerInterface
  extends DrupalEntityControllerInterface {

  /**
   * Create an entity.
   */
  public function create();

  /**
   * Save an entity.
   *
   * @param object $entity
   *   The entity to save.
   */
  public function save($entity);

  /**
   * Delete an entity.
   *
   * @param object $entity
   *   The entity to delete.
   */
  public function delete($entity);

}

/**
 * ImpressionBaseController extends DrupalDefaultEntityController.
 */
class ImpressionBaseController
  extends DrupalDefaultEntityController
  implements ImpressionBaseControllerInterface {

  /**
   * Create and return a new impression_base entity.
   */
  public function create() {
    $entity = new stdClass();
    $entity->type = 'impression_base';
    $entity->iid = 0;
    $entity->bundle_type = 'i';
    $entity->hi = '';
    $entity->ip = '';
    $entity->uid = '';
    $entity->uri = '';
    $entity->ref = '';
    $entity->domain = '';
    $entity->action = '';
    return $entity;
  }

  /**
   * Saves the custom fields using drupal_write_record().
   */
  public function save($entity) {
    // If our entity has no iid, then we need to give it a
    // time of creation.
    if (empty($entity->iid)) {
      $entity->created = time();
    }
    module_invoke_all('entity_presave', $entity, 'impression_base');
    $primary_keys = $entity->iid ? 'iid' : array();
    drupal_write_record('impression_base', $entity, $primary_keys);
    $invocation = 'entity_insert';
    if (empty($primary_keys)) {
      field_attach_insert('impression_base', $entity);
    }
    else {
      field_attach_update('impression_base', $entity);
      $invocation = 'entity_update';
    }
    // Invoke either hook_entity_update() or hook_entity_insert().
    module_invoke_all($invocation, $entity, 'impression_base');
    return $entity;
  }

  /**
   * Delete a single entity.
   */
  public function delete($entity) {
    $this->deleteMultiple(array($entity));
  }

  /**
   * Delete one or more impression_base entities.
   */
  public function deleteMultiple($entities) {
    $iids = array();
    if (!empty($entities)) {
      $transaction = db_transaction();
      try {
        foreach ($entities as $entity) {
          // Invoke hook_entity_delete().
          module_invoke_all('entity_delete', $entity, 'impression_base');
          field_attach_delete('impression_base', $entity);
          $iids[] = $entity->iid;
        }
        db_delete('impression_base')
          ->condition('iid', $iids, 'IN')
          ->execute();
      }
      catch (Exception $e) {
        $transaction->rollback();
        watchdog_exception('impression', $e);
        throw $e;
      }
    }
  }
}

/**
 * Implements hook_boot().
 */
function impression_boot() {
  global $user;
  $goaway = TRUE;
  $reverse = variable_get('impression_execlude_roles', FALSE);
  $activeroles = variable_get('impression_active_roles', array(1 => '1', 2 => '2', 3 => 0));
  if (isset($user->roles) && is_array($user->roles)) {
    foreach ($user->roles as $rid => $rname) {
      if (isset($activeroles[$rid]) && $activeroles[$rid]) {
        $goaway = FALSE;
        break;
      }
    }
  }
  else {
    if ($activeroles[1]) {
      $goaway = FALSE;
    }
  }

  if ($reverse) {
    $goaway = !$goaway;
  }

  if ($goaway) {
    return;
  }

  if (isset($user->uid)) {
    $uid = $user->uid;
  }
  else {
    $uid = 0;
  }
  $position = stripos($_SERVER['REQUEST_URI'], '/impression');
  if ($position === FALSE || $position != 0) {
    $record = array(
      'domain' => $_SERVER['HTTP_HOST'],
      'bundle_type' => 'i',
      'uid' => $uid,
      'uri' => $_SERVER['REQUEST_URI'],
      'ref' => $_SERVER['HTTP_REFERER'],
      'action' => IMPRESSION_LOAD_PAGE,
      'ip' => ip_address(),
      'created' => $_SERVER['REQUEST_TIME'],
    );
    $test = db_insert('impression_base')
      ->fields($record)->execute();
  }
}

/**
 * Check reference url and see if it start with /impression
 */
function impression_skip_url_check() {
  $refurl = $_SERVER['HTTP_REFERER'];
  $pasurl = parse_url($refurl);
  $position = stripos($pasurl['path'], '/impression');
  if ($position === 0) {
    return TRUE;
  }
  return FALSE;

}

/**
 * Callback function.
 */
function impression_touch_page($key) {
  // Skips if the URI start with /impression.
  $skip = impression_skip_url_check();
  if ($skip) {
    return;
  }

  impression_create_a_new_entity($key, IMPRESSION_TOUCH_PAGE);
}

/**
 * Callback function.
 */
function impression_mouse_move($key) {
  // Skips if the URI start with /impression.
  $skip = impression_skip_url_check();
  if ($skip) {
    return;
  }

  impression_create_a_new_entity($key, IMPRESSION_MOUSE_MOVE);
}

/**
 * Callback function.
 */
function impression_keyup($key) {
  // Skips if the URI start with /impression.
  $skip = impression_skip_url_check();
  if ($skip) {
    return;
  }

  impression_create_a_new_entity($key, IMPRESSION_KEY_UP);
}

/**
 * Create entity for callback impression.
 */
function impression_create_a_new_entity($key, $action, $options = array()) {
  global $user;
  $goaway = TRUE;
  $reverse = variable_get('impression_execlude_roles', FALSE);
  $activeroles = variable_get('impression_active_roles', array(1 => '1', 2 => '2', 3 => 0));
  if (isset($user->roles) && is_array($user->roles)) {
    foreach ($user->roles as $rid => $rname) {
      if (isset($activeroles[$rid]) && $activeroles[$rid]) {
        $goaway = FALSE;
        break;
      }
    }
  }
  else {
    if ($activeroles[1]) {
      $goaway = FALSE;
    }
  }

  if ($reverse) {
    $goaway = !$goaway;
  }

  if ($goaway) {
    return;
  }

  if (isset($user->uid)) {
    $uid = $user->uid;
  }
  else {
    $uid = 0;
  }
  $controller = entity_get_controller('impression_base');
  $entity = $controller->create();
  $entity->hi = check_plain($key);
  $entity->ip = ip_address();
  $entity->uri = isset($options['uri']) ? $options['uri'] : $_SERVER['HTTP_REFERER'];
  $entity->ref = $_SERVER['HTTP_REFERER'];
  $entity->uid = $uid;
  $entity->domain = $_SERVER['HTTP_HOST'];
  $entity->action = $action;
  $controller->save($entity);
}

/**
 * Retrives name of the action.
 */
function impression_action_name($aid) {
  $name = '';
  switch ($aid) {
    case IMPRESSION_LOAD_PAGE:
    $name = 'Page load';
    break;

    case IMPRESSION_TOUCH_PAGE:
    $name = 'Mobile Screen Touch';
    break;

    case IMPRESSION_MOUSE_MOVE:
    $name = 'Mouse Move';
    break;

    case IMPRESSION_KEY_UP:
    $name = 'Keyboard';
    break;

    default:
      $name = 'unknown action';
  }
  return $name;
}

/**
 * Verifies token.
 */
function impression_token_verify($token) {
  if (empty($token)) {
    return FALSE;
  }
  else {
    $result = db_query('SELECT created FROM {impression_base} WHERE hi = :token', array(':token' => $token));
    foreach ($result as $record) {
      if ($record) {
        return $record->created;
      }
      else {
        return FALSE;
      }
    }
  }
}

/**
 * Implements hook_cron().
 *
 * For some house keeping tasks like remove old impression data.
 * Run this cron once a day is recommended.
 */
function impression_cron() {

  $daysdelete = variable_get('impression_purge', 0);


  if (intval($daysdelete) > 0) {

    $tippingpoint = REQUEST_TIME - intval($daysdelete) * 3600 * 24;

    try {
      $queue = DrupalQueue::get('impression_remove_history_data');

      $query = db_select('impression_base', 'n')
      ->fields('n', array('iid'))
      ->condition('created', $tippingpoint, '<');
      $results = $query->execute()->fetchAll();

      $count = 0;
      $nids = array();
      $nidss = array();
      foreach ($results as $key => $nid) {
        $count++;
        $nids[] = $nid->iid;
        if ($count > 99) {
          $count = 0;
          $nidss[] = $nids;
          $nids = array();
        }
      }

      if (!empty($nids)) {
        $nidss[] = $nids;
      }

      if (!empty($nidss)) {
        foreach ($nidss as $nids) {
          $task = array(
            'nids' => $nids,
          );
          $queue->createItem($task);
        }
      }
    }
    catch (Exception $e) {
      watchdog_exception('impression', $e);
    }
  }
}

/**
 * Implements hook_cron_queue_info().
 */
function impression_cron_queue_info() {
  return array(
    'impression_remove_history_data' => array(
      'worker callback' => 'impression_queue_process',
      'time' => '1800',
    ),
  );
}

/**
 * Worker callback for queue.
 */
function impression_queue_process($item) {
  $nids = $item['nids'];

  $entities = impression_base_load_multiple($nids);
  try {
    entity_get_controller('impression_base')->deleteMultiple($entities);
  }
  // Due to the stateless of queue, we ignore any expection. Exeception was
  // reported on up level of function.
  catch(Exception $e){
  }
}
