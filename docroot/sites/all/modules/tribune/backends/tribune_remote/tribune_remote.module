<?php

/**
* @file
* The core module that manages all common tribune operations
*/

/**
* Implements hook_menu().
*/
function tribune_remote_menu() {
return array(
  'node/%tribune_remote_menu/auth' => array(
    'type' => MENU_LOCAL_TASK,
    'title' => t('Authentication'),
    'page callback' => 'tribune_remote_auth',
    'page arguments' => array(1),
    'access callback' => 'tribune_remote_access',
    'access arguments' => array('set remote auth settings', 1),
  ),
  'node/%tribune_remote_menu/tribune-push' => array(
    'type' => MENU_CALLBACK,
    'title' => t('Message push'),
    'page callback' => 'tribune_remote_push',
    'page arguments' => array(1),
    'access callback' => FALSE,
  ),
  'tribune-remote/autocomplete' => array(
    'type' => MENU_CALLBACK,
    'title' => t('Autoconfiguration autocompletion'),
    'page callback' => 'tribune_remote_autocomplete',
    'access callback' => TRUE,
  ),
  );
}

/**
 * Used to enable Miaoli to push new messages to a tribune instead
 * of using polling. It should be used in the future also directly
 * from tribunes. The Miaoli service doesn't have a homepage, yet.
 *
 * TODO no auth whatsoever for now, but it is needed.
 */
function tribune_remote_push($node) {
  watchdog('tribune', 'plop');
  if (!empty($_POST['post'])) {
    $post = drupal_json_decode($_POST['post']);

    watchdog('tribune', 'Tribune !nid - new post pushed:<br /><pre>@post</pre>', array('!nid' => $node->nid, '@post' => print_r($post, TRUE), WATCHDOG_INFO));

    if (!lock_acquire('tribune_remote_' . md5($node->tribune_xml_url) . '_push', 10)) {
      lock_wait('tribune_remote_' . md5($node->tribune_xml_url) . '_push', 10);
    }
    $posts = _tribune_remote_retrieve_cached_posts($node);

    $text = tribune_remote_sanitize($post['message'], $node->tribune_max_length, $node->tribune_backend_type);

    $post = array(
      'id' => (int)$post['id'],
      'text' => $text,
      'info' => $post['info'],
      'uid' => 0,
      'username' => $post['login'],
      'timestamp' => $post['time'],
      'clock_index' => '',
    );
    if (!isset($posts[$post['id']])) {
      $posts[$post['id']] = $post;
      krsort($posts);
      _tribune_remote_store_cached_posts($node, '', $posts);
      header('201 Post Created');
    }
    lock_release('tribune_remote_' . md5($node->tribune_xml_url) . '_push');
  } else {
    watchdog('tribune', 'Tribune !nid - new post not pushed:<br /><pre>@post</pre>', array('!nid' => $node->nid, '@post' => print_r($_POST, TRUE), WATCHDOG_INFO));
    header('400 Bad Request');
  }

  exit();
}

/**
 * Autocompletion for autoconfiguration of tribunes. Completes with
 * known tribune names when the string doesn't begin with 'http',
 * using Tifauv<'s repository (on catwitch.eu).
 */
function tribune_remote_autocomplete($string = '') {
  $matches = array();

  if (strlen($string) > 2 and substr($string, 0, 3) != 'htt') {
    $list_url = 'http://catwitch.eu/koinkoin/dist/config/list.xml';
    $curl = curl_init();

    curl_setopt_array($curl, array(
      CURLOPT_URL => $list_url,
      CURLOPT_RETURNTRANSFER => TRUE,
      CURLOPT_FOLLOWLOCATION => TRUE,
      CURLOPT_USERAGENT => 'Drupal Tribune',
      CURLOPT_CONNECTTIMEOUT => 10,
      CURLOPT_TIMEOUT => 10,
      CURLOPT_MAXREDIRS => 5,
      CURLOPT_SSL_VERIFYHOST => 0,
      CURLOPT_SSL_VERIFYPEER => FALSE,
      CURLOPT_NOSIGNAL => TRUE,
    ));

    $result = curl_exec($curl);
    $xml = @simplexml_load_string($result);

    if ($xml) {
      foreach ($xml as $tribune) {
        $name = $tribune['name']->__toString();
        if (strpos($name, $string) === 0) {
          $matches[$name] = $name;
        }
      }
    }
  }
  drupal_json_output($matches);
}

/**
 * Displays a page allowing users to set their authentication settings
 * for the remote tribune.
 */
function tribune_remote_auth($node) {
  return drupal_get_form('tribune_remote_auth_form', $node);
}

/**
 * Form for auth information.
 */
function tribune_remote_auth_form($form, $form_state, $node) {
  global $user;

  $result = db_select('tribune_remote_user_auth')
    ->condition('tribune_remote_user_auth.nid', $node->nid)
    ->condition('tribune_remote_user_auth.uid', $user->uid)
    ->fields('tribune_remote_user_auth')
    ->execute()
    ->fetchAssoc();

  $cookie = $result['cookie'];
  $username = $result['username'];
  $cookie = _tribune_remote_decrypt($cookie, ($node->nid + $user->uid) . $username);

  $form = array();

  $form['auth'] = array(
    '#type' => 'fieldset',
    '#title' => t('Remote authentication'),
    '#description' => t('Your authentication information for accessing this remote tribune.'),
  );
  $form['auth']['cookie'] = array(
    '#type' => 'textfield',
    '#title' => t('Authentication cookie'),
    '#description' => t('This cookie is stored encrypted.'),
    '#maxlength' => 2048,
    '#default_value' => $cookie,
  );
  $form['auth']['username'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#maxlength' => 2048,
    '#default_value' => isset($result['username']) ? $result['username'] : '',
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#submit' => array('tribune_remote_auth_form_submit'),
  );
  $form['node'] = array(
    '#type' => 'value',
    '#value' => $node,
  );

  return $form;
}

/**
 * Simplistic way of encrypting sensible information to
 * make it less easily retrievable from the database.
 */
function _tribune_remote_encrypt($data, $key) {
  $encrypted = '';

  $key = hash('sha512', $key);
  while (strlen($key) < strlen($data)) {
    $key .= $key;
  }

  for ($i = 0 ; $i < strlen($data) ; $i++) {
    $encrypted .= chr(ord($data[$i]) ^ ord($key[$i]));
  }

  return $encrypted;
}

/**
 * Simplistic way of decrypting sensible information to
 * make it less easily retrievable from the database.
 */
function _tribune_remote_decrypt($data, $key) {
  // Since I use a simple XOR...
  return _tribune_remote_encrypt($data, $key);
}

/**
 * Saves user auth information.
 */
function tribune_remote_auth_form_submit($form, $form_state) {
  $node = $form_state['values']['node'];
  $cookie = $form_state['values']['cookie'];
  $username = $form_state['values']['username'];
  global $user;

  // Let's just use easily available data, no need
  // to look for something too complicated.
  $cookie = _tribune_remote_encrypt($cookie, ($node->nid + $user->uid) . $username);

  db_merge('tribune_remote_user_auth')
    ->fields(array(
      'nid' => $node->nid,
      'uid' => $user->uid,
      'cookie' => $cookie,
      'username' => $username,
      'password' => '',
    ))
    ->condition('nid', $node->nid)
    ->condition('uid', $user->uid)
    ->execute();
}

/**
 * This function is there to hide the auth settings page from
 * anonymous users.
 */
function tribune_remote_access($permission, $tribune, $user = NULL) {
  if ($user === NULL) {
    global $user;
  }

  switch ($permission) {
    case 'set remote auth settings':
      return $user->uid > 0 && tribune_access('read tribune', $tribune, $user);
    default:
      return tribune_access($permission, $tribune, $user);
  }
}

/**
 * Handles menu wildcards.
 */
function tribune_remote_menu_load($nid) {
  if ($node = tribune_menu_load($nid) and $node->tribune_type == 'remote') {
    return $node;
  }

  return FALSE;
}

/**
 * Implements hook_node_view().
 * Adds some JS settings.
 */
function tribune_remote_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'tribune' and $node->tribune_type == 'remote') {
    global $user;
    if ($user->uid > 0) {
      $username = db_select('tribune_remote_user_auth')
        ->condition('tribune_remote_user_auth.nid', $node->nid)
        ->condition('tribune_remote_user_auth.uid', $user->uid)
        ->fields('tribune_remote_user_auth', array('username'))
        ->execute()
        ->fetchField();
      drupal_add_js(array(
        'tribune' => array(
          'tribune-'.$node->nid => array(
            'username' => $username,
          ),
        ),
      ), 'setting');
    }
  }
}

/**
 * Implements hook_tribune_types().
 */
function tribune_remote_tribune_types() {
  return array(
    'remote' => array(
      'title' => t('Remote'),
      'description' => t('A tribune hosted on another server'),
      'module' => 'tribune_remote',
    ),
  );
}

/**
 * AJAX callback used when user enters a tribune address
 * for autoconfiguration.
 */
function tribune_remote_autoconfigure_ajax($form, &$form_state) {
  return $form['tribune']['settings']['tribune_remote_details']['remote_settings'];
}

function tribune_remote_autoconfigure_retrieve($tribune_url) {
  $direct = FALSE;
  if (strpos($tribune_url, 'http') !== 0) {
    // Try to use configuration files at Tifauv<
    $tribune_url = 'http://catwitch.eu/koinkoin/dist/config/'.strtolower($tribune_url).'.config';
    $direct = TRUE;
  }

  $settings = array();

  $curl = curl_init();
  curl_setopt_array($curl, array(
    CURLOPT_URL => $tribune_url,
    CURLOPT_RETURNTRANSFER => TRUE,
    CURLOPT_FOLLOWLOCATION => TRUE,
    CURLOPT_USERAGENT => 'Drupal Tribune',
    CURLOPT_CONNECTTIMEOUT => 10,
    CURLOPT_TIMEOUT => 10,
    CURLOPT_MAXREDIRS => 5,
    CURLOPT_SSL_VERIFYHOST => 0,
    CURLOPT_SSL_VERIFYPEER => FALSE,
    CURLOPT_NOSIGNAL => TRUE,
  ));

  $result = curl_exec($curl);

  if (!$direct
  and strpos(strtolower(curl_getinfo($curl, CURLINFO_CONTENT_TYPE)), 'xml') === FALSE
  and strpos(strtolower(curl_getinfo($curl, CURLINFO_CONTENT_TYPE)), 'x-coincoin') === FALSE) {
    $dom = new DOMDocument;
    @$dom->loadHTML($result);

    if ($dom) {
      $xpath = new DOMXpath($dom);
      $elements = $xpath->query('*/link[@rel="tribune configuration"]');

      if ($elements and $elements->length > 0) {
        $autoconf_url = $elements->item(0)->getAttribute('href');

        $settings = tribune_remote_autoconfigure_from_url($autoconf_url);
      }
    }
  } else {
    $settings = tribune_remote_autoconfigure_from_string($result);
  }
  curl_close($curl);

  return $settings;
}

/**
 * Tries to parse a tribune XML autoconfiguration document.
 */
function tribune_remote_autoconfigure_from_url($autoconf_url) {
  $curl = curl_init();
  curl_setopt_array($curl, array(
    CURLOPT_URL => $autoconf_url,
    CURLOPT_RETURNTRANSFER => TRUE,
    CURLOPT_FOLLOWLOCATION => TRUE,
    CURLOPT_USERAGENT => 'Drupal Tribune',
    CURLOPT_CONNECTTIMEOUT => 10,
    CURLOPT_TIMEOUT => 10,
    CURLOPT_MAXREDIRS => 5,
    CURLOPT_SSL_VERIFYHOST => 0,
    CURLOPT_SSL_VERIFYPEER => FALSE,
    CURLOPT_NOSIGNAL => TRUE,
  ));

  $result = curl_exec($curl);
  curl_close($curl);

  return tribune_remote_autoconfigure_from_string($result);
}

function tribune_remote_autoconfigure_from_string($string) {

  $xml = @simplexml_load_string($string);

  if ($xml) {
    $settings = array();

    if ($xml['baseurl']) {
      $base_url = $xml['baseurl']->__toString();
    } else if ($xml->site->__toString()) {
      $base_url = $xml->site->__toString();
    }


    $board = $xml->board->__toString() ? $xml->board : $xml->module;

    if ($board->backend['path']) {
      $xml_url = $board->backend['path']->__toString();
    } else if ($board->backend['url']) {
      $xml_url = $board->backend['url']->__toString();
    }

    if (strpos($xml_url, 'http') !== 0) {
      $xml_url = $base_url . $xml_url;
    }

    $settings['tribune_xml_url'] = $xml_url;

    if (!$board->backend['tags_encoded'] or $board->backend['tags_encoded']->__toString() == 'false') {
      $settings['tribune_backend_type'] = 'raw';
    } else {
      $settings['tribune_backend_type'] = 'htmlentitised';
    }

    if ($board->post['max_length']) {
      $settings['tribune_max_length'] = $board->post['max_length']->__toString();
    } else if ($board->post->maxlength and $board->post->maxlength->__toString()) {
      $settings['tribune_max_length'] = $board->post->maxlength->__toString();
    }

    if ($board->post['anonymous']) {
      $settings['tribune_anonymous_allowed'] = strtolower($board->post['anonymous']->__toString()) == 'true' ? TRUE : FALSE;
    } else if ($board->post->anonym and $board->post->anonym->__toString()) {
      $settings['tribune_anonymous_allowed'] = strtolower($board->post->anonym->__toString()) == 'true' ? TRUE : FALSE;
    }

    if ($board->post['path']) {
      $post_url = $board->post['path']->__toString();
    } else if ($board->post['url']) {
      $post_url = $board->post['url']->__toString();
    }

    if (strpos($post_url, 'http') !== 0) {
      $post_url = $base_url . $post_url;
    }

    $settings['tribune_post_url'] = $post_url;

    if ($board->post->data and $board->post->data->__toString()) {
      $settings['tribune_post_template'] = str_replace('%m', '%s', $board->post->data->__toString());
    } else {
      $post_fields = array();
      foreach ($board->post->field as $field) {
        $post_fields[] = $field['name']->__toString().'='.$field->__toString();
      }

      $settings['tribune_post_template'] = str_replace('$m', '%s', join('&', $post_fields));
    }

    return $settings;
  }

  return FALSE;
}

/**
 * Implements hook_tribune_form().
 */
function tribune_remote_tribune_form($node, &$form_state) {
  if ((!empty($form_state['values']['tribune_type']) and $form_state['values']['tribune_type'] == 'remote')
      or (!empty($node->tribune_type) and $node->tribune_type == 'remote')) {

    $remote_settings = array(
      'tribune_post_url' => isset($node->tribune_post_url) ? $node->tribune_post_url : '',
      'tribune_post_template' => isset($node->tribune_post_template) ? $node->tribune_post_template : 'message=%s',
      'tribune_xml_url' => isset($node->tribune_xml_url) ? $node->tribune_xml_url : '',
      'tribune_anonymous_allowed' => isset($node->tribune_anonymous_allowed) ? $node->tribune_anonymous_allowed : '',
      'tribune_max_length' => isset($node->tribune_max_length) ? $node->tribune_max_length : 256,
      'tribune_backend_type' => isset($node->tribune_backend_type) ? $node->tribune_backend_type : 'raw',
    );

    $form = array(
      'tribune_remote_details' => array(
        '#weight' => 2,
        '#type' => 'fieldset',
        '#title' => t('Tribune details'),

        'tribune_autoconfigure' => array(
          '#type' => 'textfield',
          '#title' => t('Tribune autoconfiguration'),
          '#description' => t('If the remote tribune supports autoconfiguration, enter its URL here and the settings will be filled automatically. You can also enter the name of a known tribune to try and autodiscover its settings.'),
          '#required' => FALSE,
          '#autocomplete_path' => 'tribune-remote/autocomplete',
          '#ajax' => array(
            'callback' => 'tribune_remote_autoconfigure_ajax',
            'wrapper' => 'tribune-remote-ajax-wrapper',
          ),
        ),

        'remote_settings' => array(
          '#type' => 'fieldset',
          '#collapsible' => TRUE,
          '#collapsed' => FALSE,
          '#title' => t('Settings'),
          '#prefix' => '<div id="tribune-remote-ajax-wrapper">',
          '#suffix' => '</div>',

          'tribune_post_url' => array(
            '#type' => 'textfield',
            '#title' => t('Post URL'),
            '#description' => t('URL to which new posts are sent.'),
            '#default_value' => $remote_settings['tribune_post_url'],
            '#required' => FALSE,
          ),
          'tribune_post_template' => array(
            '#type' => 'textfield',
            '#title' => t('Post template'),
            '#description' => t('POST fields sent to the remote tribune when posting a message. %s is replaced by the actual message typed.'),
            '#default_value' => $remote_settings['tribune_post_template'],
            '#required' => FALSE,
          ),
          'tribune_xml_url' => array(
            '#type' => 'textfield',
            '#title' => t('XML URL'),
            '#description' => t('URL from which posts are retrieved.'),
            '#default_value' => $remote_settings['tribune_xml_url'],
            '#required' => FALSE,
          ),
          'tribune_anonymous_allowed' => array(
            '#type' => 'checkbox',
            '#title' => t('Anonymous users'),
            '#description' => t('Whether anonymous users are allowed to post on this tribune.'),
            '#default_value' => $remote_settings['tribune_anonymous_allowed'],
            '#required' => FALSE,
          ),
          'tribune_max_length' => array(
            '#type' => 'textfield',
            '#title' => t('Maximum length'),
            '#description' => t('Maximum allowed length for messages.'),
            '#default_value' => $remote_settings['tribune_max_length'],
            '#required' => FALSE,
          ),
          'tribune_backend_type' => array(
            '#type' => 'select',
            '#title' => t('Backend type'),
            '#description' => t('How the XML backend is encoded.'),
            '#default_value' => $remote_settings['tribune_backend_type'],
            '#options' => array(
              t('Common encodings') => array(
                'raw' => t('Raw XML'),
                'htmlentitised' => t('HTML entities'),
              ),
              t('Exotic encodings') => array(
                'json' => t('JSON encoded'),
              ),
            ),
            '#required' => FALSE,
          ),
        ),
      ),
    );

    if (!empty($form_state['values']['tribune_autoconfigure'])) {
      $remote_settings = tribune_remote_autoconfigure_retrieve($form_state['values']['tribune_autoconfigure']);

      // I could not figure out how to change the default value without
      // forcing the #value of fields, so I just set the value= attribute
      // of the HTML elements myself, with some more exceptions for the
      // checkbox and select elements.
      foreach ($remote_settings as $element => $value) {
        $form['tribune_remote_details']['remote_settings'][$element]['#attributes'] = array('value' => $value);

        if ($element == 'tribune_anonymous_allowed' or $element == 'tribune_backend_type') {
          $form['tribune_remote_details']['remote_settings'][$element]['#value'] = $value;
        }
      }
    }

    return $form;
  } else {
    return NULL;
  }
}

/**
 * Implements hook_load().
 */
function tribune_remote_load($nodes) {
  $result = db_select('tribune_remote')
    ->condition('tribune_remote.nid', array_keys($nodes))
    ->fields('tribune_remote')
    ->execute()
    ->fetchAllAssoc('nid');
  foreach ($result as $nid => $record) {
    foreach ($record as $field => $value) {
      $nodes[$nid]->{'tribune_' . $field} = $value;
    }

    if (!$record->anonymous_allowed) {
      $nodes[$nid]->tribune_permissions['write'] = 'nobody';
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function tribune_remote_node_insert($node) {
  if ($node->type == 'tribune' and $node->tribune_type == 'remote') {
    db_insert('tribune_remote')
      ->fields(array(
        'nid' => $node->nid,
        'post_url' => $node->tribune_post_url,
        'post_template' => $node->tribune_post_template,
        'xml_url' => $node->tribune_xml_url,
        'anonymous_allowed' => (int)$node->tribune_anonymous_allowed,
        'max_length' => $node->tribune_max_length,
        'backend_type' => $node->tribune_backend_type,
        'reload_rate' => 30,
      ))
      ->execute();
  }
}

/**
 * Implements hook_node_update().
 */
function tribune_remote_node_update($node) {
  if ($node->type == 'tribune' and $node->tribune_type == 'remote') {
    db_merge('tribune_remote')
      ->fields(array(
        'nid' => $node->nid,
        'post_url' => $node->tribune_post_url,
        'post_template' => $node->tribune_post_template,
        'xml_url' => $node->tribune_xml_url,
        'anonymous_allowed' => (int)$node->tribune_anonymous_allowed,
        'max_length' => $node->tribune_max_length,
        'backend_type' => $node->tribune_backend_type,
        'reload_rate' => 30,
      ))
      ->condition('nid', $node->nid)
      ->execute();
  }
}

/**
 * Implements hook_node_delete().
 */
function tribune_remote_node_delete($node) {
  if ($node->type == 'tribune' and $node->tribune_type == 'remote') {
    db_delete('tribune_remote')
      ->condition('nid', $node->nid)
      ->execute();
  }
}

function _tribune_remote_store_cached_posts($node, $xml, $posts, $time = NULL) {
  $data = htmlentities(serialize($posts));

  if (strlen($data) < 32*1024) {
    if ($time === NULL) {
      $time = REQUEST_TIME;
    }
    db_merge('tribune_remote_cache')
      ->fields(array(
        'xml_url' => $node->tribune_xml_url,
        'backend' => substr($xml, 0, 32*1024),
        'posts' => $data,
        'time' => $time,
      ))
      ->condition('xml_url', $node->tribune_xml_url)
      ->execute();
  }
}

function _tribune_remote_retrieve_cached_posts($node, $max_age = NULL) {
  if ($max_age) {
    db_delete('tribune_remote_cache')
      ->condition('xml_url', $node->tribune_xml_url)
      ->condition('time', REQUEST_TIME - $max_age, '<')
      ->execute();
  }

  $posts = db_select('tribune_remote_cache')
    ->condition('tribune_remote_cache.xml_url', $node->tribune_xml_url)
    ->fields('tribune_remote_cache', array('posts'))
    ->execute()
    ->fetchField();

  return unserialize(html_entity_decode($posts));
}

function _tribune_remote_clear_cache($url, $max_age = 0) {
  db_delete('tribune_remote_cache')
    ->condition('tribune_remote_cache.xml_url', $url)
    ->condition('tribune_remote_cache.time', REQUEST_TIME - $max_age, '<')
    ->execute();
}

function _tribune_remote_parse_xml_backend($backend, $max_length, $backend_type) {
  $posts = array();

  if (!($xml = @simplexml_load_string($backend))) {
    return t('Remote tribune XML feed is malformed.');
  }

  foreach ($xml->post as $xml_post) {
    $text = tribune_remote_sanitize($xml_post->message, $max_length, $backend_type);

    $post = array(
      'id' => $xml_post['id']->__toString(),
      'text' => $text,
      'info' => $xml_post->info->__toString(),
      'uid' => 0,
      'username' => $xml_post->login->__toString(),
      'timestamp' => $xml_post['time']->__toString(),
      'clock_index' => '',
    );
    $posts[$post['id']] = $post;
  }

  return $posts;
}

function _tribune_remote_parse_json_backend($backend, $max_length) {
  $posts = array();

  $backend = preg_replace('/,\s*([\]}])/m', '$1', $backend);
  $backend = preg_replace("/'([a-z]*)':/m", '"$1":', $backend);
  $data = drupal_json_decode($backend);

  if (!$data) {
    return t('Remote tribune JSON feed is malformed.');
  }

  foreach ($data['posts'] as $json_post) {
    if (!isset($json_post['moderated']) or !$json_post['moderated']) {
      $post = _tribune_remote_parse_json_html_post($json_post['text']);
      $post['id'] = $json_post['id'];
      $post['uid'] = 0;
      $post['username'] = $json_post['login'];

      $posts[$post['id']] = $post;
    }
  }

  return $posts;
}

function _tribune_remote_parse_json_html_post($html) {
  $post = array();

  $dom = new DOMDocument;
  @$dom->loadXML($html);

  $spans = $dom->firstChild->getElementsByTagName('span');
  foreach ($spans as $node) {
    switch ($node->attributes->getNamedItem('class')->value) {
      case 'tribune-first-clock':
        $clock = $node;
        $date = DateTime::createFromFormat('H:i:s', substr($clock->nodeValue, 0, 8));
        break;
      case 'tribune-login':
        $login = $node;
        break;
      case 'tribune-message':
        $message = $node;
        break;
      default:
        break;
    }
  }

  $post['timestamp'] = date('Ymd') . $date->format('His');
  $post['info'] = $login->attributes->getNamedItem('title')->value;
  $text = $dom->saveHTML($message);
  $text = preg_replace('/<span[^>]*>/', '', $text);
  $text = preg_replace('/<\/span>/', '', $text);
  $text = preg_replace('/<img[^>]*>/', '', $text);
  $post['text'] = html_entity_decode($text);

  return $post;
}

/**
 * Implements hook_tribune_posts().
 */
function tribune_remote_tribune_posts($node, $count = PHP_INT_MAX, $last_id = 0) {
  if ($node->tribune_backend_type != 'json') {
    $posts = _tribune_remote_retrieve_cached_posts($node, floor($node->tribune_reload_rate * 0.5));
  }

  if (empty($posts)) {
    $posts = array();

    global $user;

    if ($node->tribune_backend_type == 'json') {
      // This special backend type uses the JSON feed intended for AJAX reloading, it
      // needs a few special things. The specified URL should include a string to pass
      // to the strtotime() function, as this feed needs a timestamp argument and
      // returns all posts since this date. For some tribunes this might be -1 day, for
      // others -1 month or even -1 year.

      $timespec = preg_replace('/.*{(.*)}.*/', '$1', $node->tribune_xml_url);
      $timestamp = strtotime($timespec);
      if ($timestamp) {
        $node->tribune_xml_url = preg_replace('/{.*}/', $timestamp, $node->tribune_xml_url);
      }
    }

    $record = db_select('tribune_remote_user_auth')
      ->condition('tribune_remote_user_auth.nid', $node->nid)
      ->condition('tribune_remote_user_auth.uid', $user->uid)
      ->fields('tribune_remote_user_auth', array('cookie', 'username'))
      ->execute()
      ->fetchAssoc();
    $cookie = _tribune_remote_decrypt($record['cookie'], ($node->nid + $user->uid) . $record['username']);
    $curl = curl_init();
    curl_setopt_array($curl, array(
      CURLOPT_URL => $node->tribune_xml_url,
      CURLOPT_HTTPHEADER => array('Cookie: ' . $cookie),
      CURLOPT_RETURNTRANSFER => TRUE,
      CURLOPT_FOLLOWLOCATION => TRUE,
      CURLOPT_USERAGENT => 'Drupal Tribune',
      CURLOPT_CONNECTTIMEOUT => 2,
      CURLOPT_TIMEOUT => 5,
      CURLOPT_MAXREDIRS => 3,
      CURLOPT_SSL_VERIFYHOST => 0,
      CURLOPT_SSL_VERIFYPEER => FALSE,
      CURLOPT_NOSIGNAL => TRUE,
    ));

    $backend = curl_exec($curl);

    if (curl_getinfo($curl, CURLINFO_HTTP_CODE) == 404) {
      drupal_set_message(t('@tribune_title: cannot retrieve remote tribune posts.', array('@tribune_title' => $node->title)), 'error', FALSE);
      return array();
    }

    curl_close($curl);

    switch ($node->tribune_backend_type) {
      case 'json':
        $posts = _tribune_remote_parse_json_backend($backend, $node->tribune_max_length);
        break;
      case 'raw':
      case 'htmlentitised':
        $posts = _tribune_remote_parse_xml_backend($backend, $node->tribune_max_length, $node->tribune_backend_type);
        break;
    }

    if (!is_array($posts)) {
      return $posts;
    }

    krsort($posts);
    if ($node->tribune_backend_type != 'json') {
      _tribune_remote_store_cached_posts($node, $backend, $posts, REQUEST_TIME + (24 * 3600));
    }

    $url = url('node/' . $node->nid, array('absolute' => TRUE));
    cache_clear_all($url, 'cache_page', '*');
  }
  if (count($posts) > $count) {
    $posts = array_slice($posts, 0, $count, TRUE);
  }

  return $posts;
}

/**
 * Implements hook_tribune_post().
 */
function tribune_remote_tribune_post($node, $message, $user, $timestamp, $info) {
  _tribune_remote_clear_cache($node->tribune_xml_url, 2);

  $post_id = NULL;

  $post = str_replace('%s', urlencode($message), $node->tribune_post_template);

  $record = db_select('tribune_remote_user_auth')
    ->condition('tribune_remote_user_auth.nid', $node->nid)
    ->condition('tribune_remote_user_auth.uid', $user->uid)
    ->fields('tribune_remote_user_auth', array('cookie', 'username'))
    ->execute()
    ->fetchAssoc();
  $cookie = _tribune_remote_decrypt($record['cookie'], ($node->nid + $user->uid) . $record['username']);
  $curl = curl_init();
  curl_setopt_array($curl, array(
    CURLOPT_URL => $node->tribune_post_url,
    CURLOPT_HTTPHEADER => array('Cookie: ' . $cookie),
    CURLOPT_REFERER => $node->tribune_post_url,
    CURLOPT_FOLLOWLOCATION => TRUE,
    CURLOPT_USERAGENT => $info,
    CURLOPT_RETURNTRANSFER => TRUE,
    CURLOPT_POST => TRUE,
    CURLOPT_POSTFIELDS => $post,
    CURLOPT_CONNECTTIMEOUT => 2,
    CURLOPT_TIMEOUT => 5,
    CURLOPT_AUTOREFERER => TRUE,
    CURLOPT_MAXREDIRS => 3,
    CURLOPT_SSL_VERIFYHOST => 0,
    CURLOPT_SSL_VERIFYPEER => FALSE,
    CURLOPT_NOSIGNAL => TRUE,
    CURLOPT_HEADER => TRUE,
  ));

  $response = curl_exec($curl);
  foreach (explode("\n", $response) as $line) {
    $line = trim($line);
    if ($line == "") {
      break;
    }

    if (strpos($line, 'X-Post-Id:') === 0) {
      list($header, $value) = explode(':', $line);
      $post_id = trim($value);
    }
  }

  if (($code = curl_getinfo($curl, CURLINFO_HTTP_CODE)) >= 400) {
    return array(
      'error' => $code,
    );
  }

  curl_close($curl);
  if ($post_id) return array(
    'post_id' => $post_id,
    'post' => array(
      'post_id' => $post_id,
    ),
  );
}

/**
 * Implements hook_tribune_reference().
 * This could be done via an URL provided by the remote tribune
 * for this purpose. Since no tribune I know of provide this,
 * for now we will look for the reference in the cached posts,
 * just in case it is there.
 */
function tribune_remote_tribune_reference($node, $timestamp, $from) {
  $posts = _tribune_remote_retrieve_cached_posts($node);

  foreach ($posts as $id => $post) {
    if (strpos($post['timestamp'], $timestamp) == 8) {
      $post['id'] = $id;
      $post['tribune'] = $node;
      return array($post);
    }
  }

  return array();
}

function tribune_remote_htmlspecialchars_encode($text) {
  return strtr($text, array(
    '&' => '&amp;',
    '>' => '&gt;',
    '<' => '&lt;',
  ));
}

function tribune_remote_htmlspecialchars_decode($text) {
  return strtr($text, array(
    '&gt;' => '>',
    '&lt;' => '<',
    '&amp;' => '&',
  ));
}

/**
 * Sanitizes a post, leaving only safe HTML tags.
 * This function isn't beautiful, it might not even be very safe, but
 * I tried to stay simple and use what PHP already provides as much
 * as possible.
 */
function tribune_remote_sanitize($element, $length = -1, $backend_type = 'raw') {
  if (!is_string($element)) {
    if ($backend_type == 'raw') {
      $text = $element->asXML();
      $text = str_replace('<message>', '', $text);
      $text = str_replace('</message>', '', $text);
    } else {
      $text = htmlspecialchars($element->__toString(), ENT_NOQUOTES);
    }
  } else {
    $text = htmlspecialchars($element, ENT_NOQUOTES);
  }

  $dom = new DOMDocument;
  @$dom->loadXML('<message>' . $text . '</message>');

  $post = $dom->firstChild;

  if ($post) {
    foreach ($post->childNodes as $node) {
      if (isset($node->tagName)) switch ($node->tagName) {
        case 'a':
        case 'b':
        case 'i':
        case 'u':
        case 's':
          break;
        default:
          $node->parentNode->replaceChild($dom->createTextNode($node->textContent), $node);
          break;
      }
    }

    $post = $dom->saveHTML($post);
    $post = str_replace('<message>', '', $post);
    $post = str_replace('</message>', '', $post);
    if ($backend_type != 'raw') {
      $post = html_entity_decode($post);
    }
    return $post;
  } else {
    // Let's stay safe, but still try to display something.
    return htmlspecialchars($element->__toString(), ENT_NOQUOTES);
  }
}

