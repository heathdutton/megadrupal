<?php

/**
 * @file
 * Install, update and uninstall functions for the galerie module.
 */

/**
 * Implements hook_schema().
 */
function tribune_local_schema() {
  return array(
    'tribune_local' => array(
      'description' => 'The table for local tribunes.',
      'fields' => array(
        'nid' => array(
          'description' => 'The nid of the tribune node.',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        ),
        'max_length' => array(
          'description' => 'Maximum length of posts.',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        ),
        'reload_rate' => array(
          'description' => 'Seconds between page reloading.',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        ),
        'nofollow' => array(
          'description' => 'Add nofollow to links',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        ),
        'target' => array(
          'description' => 'Add target to links',
          'type' => 'varchar',
          'length' => 32,
          'not null' => TRUE,
          'default' => '_blank',
        ),
        'filter_format' => array(
          'description' => 'Filter format to use for filtering posts',
          'type' => 'varchar',
          'length' => 255,
          'not null' => TRUE,
          'default' => '_tribune_standard_filter',
        ),
        'users' => array(
          'description' => 'Current users',
          'type' => 'text',
          'not null' => TRUE,
        ),
      ),
      'primary key' => array('nid'),
      'foreign keys' => array(
        'tribune_node' => array(
          'table' => 'node',
          'columns' => array('nid' => 'nid'),
        ),
      ),
    ),
    'tribune_local_post' => array(
      'description' => 'The table for tribune posts.',
      'fields' => array(
        'pid' => array(
          'description' => 'The post id.',
          'type' => 'serial',
        ),
        'nid' => array(
          'description' => 'Tribune id.',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        ),
        'uid' => array(
          'description' => 'Post author id.',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        ),
        'post_id' => array(
          'description' => 'The public id of the post.',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        ),
        'text' => array(
          'description' => 'Post text.',
          'type' => 'text',
          'mysql_type' => 'blob',
          'size' => 'normal',
          'not null' => TRUE,
        ),
        'info' => array(
          'description' => 'Poster user-agent or nickname.',
          'type' => 'varchar',
          'length' => 128,
          'not null' => TRUE,
          'default' => '',
        ),
        'timestamp' => array(
          'description' => 'Post timestamp',
          'type' => 'varchar',
          'length' => 14,
          'not null' => TRUE,
          'default' => '',
        ),
        'clock_index' => array(
          'description' => 'Index of this post, for use when two posts were posted at the same second.',
          'type' => 'varchar',
          'length' => 2,
          'not null' => TRUE,
          'default' => 0,
        ),
        'moderated' => array(
          'description' => 'Whether this post has been moderated down or not, holds the post_id of the latest post at the time of moderation (a bit of a hack, but allows to know when it was moderated).',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        ),
        'ip' => array(
          'description' => 'IP address',
          'type' => 'varchar',
          'length' => 15,
          'not null' => TRUE,
          'default' => '',
        ),
        'ua' => array(
          'description' => 'Poster user-agent.',
          'type' => 'varchar',
          'length' => 128,
          'not null' => TRUE,
          'default' => '',
        ),
      ),
      'primary key' => array('pid'),
      'foreign keys' => array(
        'tribune_post_user' => array(
          'table' => 'user',
          'columns' => array('uid' => 'uid'),
        ),
        'tribune_post_node' => array(
          'table' => 'node',
          'columns' => array('nid' => 'nid'),
        ),
      ),
      'indexes' => array(
        'nid' => array('nid'),
        'post_id' => array('nid', 'post_id'),
        'timestamp' => array('nid', 'post_id', 'timestamp'),
        'moderated' => array('nid', 'post_id', 'moderated'),
      )
    ),
    'tribune_local_post_references' => array(
      'description' => 'The table for tribune post references.',
      'fields' => array(
        'reference_id' => array(
          'description' => 'Id of the reference pair',
          'type' => 'serial',
        ),
        'nid' => array(
          'description' => 'Tribune id.',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        ),
        'target_post_id' => array(
          'description' => 'Id of the target post',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        ),
        'reference_post_id' => array(
          'description' => 'Id of the referencing post',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        ),
        'reference_clock_id' => array(
          'description' => 'Index of the referencing clock in the referencing post',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        ),
        'target_uid' => array(
          'description' => 'Id of the targetted user',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        ),
        'reference_uid' => array(
          'description' => 'Id of the targetting user',
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        ),
      ),
      'primary key' => array('reference_id'),
      'indexes' => array(
        'target_ref' => array('nid', 'target_post_id', 'reference_post_id'),
        'user_target_ref' => array('nid', 'target_uid', 'reference_uid'),
      )
    ),
  );
}

/**
 * Increase useragent size
 */
function tribune_local_update_7000() {
  db_change_field('tribune_local_post', 'info', 'info',
    array(
      'description' => 'Poster user-agent.',
      'type' => 'varchar',
      'length' => 128,
      'not null' => TRUE,
      'default' => '',
    )
  );
}

/**
 * Save post IPs.
 */
function tribune_local_update_7001() {
  db_add_field('tribune_local_post', 'ip', array(
    'description' => 'IP address',
    'type' => 'varchar',
    'length' => 15,
    'not null' => TRUE,
    'default' => '',
  ));
}

/**
 * Add nofollow parameter.
 */
function tribune_local_update_7002() {
  db_add_field('tribune_local', 'nofollow', array(
    'description' => 'Add nofollow to links',
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'default' => 0,
  ));
}

/**
 * Add target parameter.
 */
function tribune_local_update_7003() {
  db_add_field('tribune_local', 'target', array(
    'description' => 'Add target to links',
    'type' => 'varchar',
    'length' => 32,
    'not null' => TRUE,
    'default' => '_blank',
  ));
}

/**
 * Add filter format parameter.
 */
function tribune_local_update_7004() {
  db_add_field('tribune_local', 'filter_format', array(
    'description' => 'Filter format to use for filtering posts',
    'type' => 'varchar',
    'length' => 255,
    'not null' => TRUE,
    'default' => '_tribune_standard_filter',
  ));
}

/**
 * Add current users.
 */
function tribune_local_update_7005() {
  db_add_field('tribune_local', 'users', array(
    'description' => 'Current users',
    'type' => 'text',
    'not null' => TRUE,
    'initial' => 'a:0:{}',
  ));
}

/**
 * Add indexes.
 */
function tribune_local_update_7006() {
  db_add_index('tribune_local_post', 'nid', array(
    'nid',
  ));
  db_add_index('tribune_local_post', 'post_id', array(
    'nid', 'post_id',
  ));
  db_add_index('tribune_local_post', 'latest', array(
    'nid', 'post_id', 'moderated',
  ));
  db_add_index('tribune_local_post', 'reference', array(
    'nid', 'post_id', 'timestamp',
  ));
}

/**
 * Change type of message column to BLOB to support all of Unicode (workaround for MySQL glitch).
 */
function tribune_local_update_7007() {
  db_change_field('tribune_local_post', 'text', 'text',
    array(
      'description' => 'Post text.',
      'type' => 'text',
      'mysql_type' => 'blob',
      'size' => 'normal',
      'not null' => TRUE,
    )
  );
}

/**
 * Record real user-agent for banning purposes.
 */
function tribune_local_update_7008() {
  db_add_field('tribune_local_post', 'ua', array(
    'description' => 'Poster user-agent.',
    'type' => 'varchar',
    'length' => 128,
    'not null' => TRUE,
    'default' => '',
  ));
}

/**
 * Record post references server-side.
 */
function tribune_local_update_7009() {
  db_create_table('tribune_local_post_references', array(
    'description' => 'The table for tribune post references.',
    'fields' => array(
      'reference_id' => array(
        'description' => 'Id of the reference pair',
        'type' => 'serial',
      ),
      'nid' => array(
        'description' => 'Tribune id.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'target_post_id' => array(
        'description' => 'Id of the target post',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'reference_post_id' => array(
        'description' => 'Id of the referencing post',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'reference_clock_id' => array(
        'description' => 'Index of the referencing clock in the referencing post',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'target_uid' => array(
        'description' => 'Id of the targetted user',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'reference_uid' => array(
        'description' => 'Id of the targetting user',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('reference_id'),
    'indexes' => array(
      'target_ref' => array('nid', 'target_post_id', 'reference_post_id'),
      'user_target_ref' => array('nid', 'target_uid', 'reference_uid'),
    )
  ));
}

/**
 * Parse existing post references server-side.
 */
function tribune_local_update_7010(&$sandbox) {
  // Only references of posts from 7.x-3.x will be correctly found, anyway.
  // Timezones are messed up in imported posts.
  $start = '20120101000000';

  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = 0;
    $sandbox['current_pid'] = 0;
    $sandbox['max'] = db_query("SELECT COUNT(*) FROM {tribune_local_post} WHERE timestamp > '" . $start . "'")->fetchField();
  }

  $posts = db_select('tribune_local_post', 't')
    ->fields('t')
    ->condition('pid', $sandbox['current_pid'], '>')
    ->condition('timestamp', $start, '>')
    ->range(0, 100)
    ->orderBy('pid', 'ASC')
    ->execute();

  $nodes = array();

  foreach ($posts as $post) {
    if (!isset($nodes[$post->nid])) {
      $nodes[$post->nid] = node_load($post->nid);
    }

    tribune_local_find_references($nodes[$post->nid], $post);

    $sandbox['progress']++;
    $sandbox['current_pid'] = $post->pid;
  }

  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : ($sandbox['progress'] / $sandbox['max']);

  return t('All post references were updated');
}

