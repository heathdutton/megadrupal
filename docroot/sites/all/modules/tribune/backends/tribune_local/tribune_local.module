<?php

/**
 * @file
 * The core module that manages all common tribune operations
 */

/**
 * Implements hook_permission().
 */
function tribune_local_permission() {
  return array(
    'access local tribunes history' => array(
      'title' => t('Access tribunes history'),
      'description' => t('Access and search the histories of tribunes for which the user has access.'),
    ),
    'access local tribunes statistics' => array(
      'title' => t('Access tribunes statistics'),
      'description' => t('Access the statistics of tribunes for which the user has access.'),
    ),
  );
}

/**
 * Implements hook_tribune_types().
 */
function tribune_local_tribune_types() {
  return array(
    'local' => array(
      'title' => t('Local'),
      'description' => t('A local tribune'),
      'module' => 'tribune_local',
    ),
  );
}

/**
 * Implements hook_tribune_form().
 */
function tribune_local_tribune_form($node, $form_state) {
  if ((!empty($form_state['values']['tribune_type']) and $form_state['values']['tribune_type'] == 'local')
      or (!empty($node->tribune_type) and $node->tribune_type == 'local')) {

    $formats = array('_tribune_standard_filter' => t('Standard (u/i/b/s/tt allowed - XSS-proof)'));
    foreach (filter_formats() as $format) {
      $formats[$format->format] = $format->name;
    }

    $form = array(
      'tribune_local_details' => array(
        '#weight' => 2,
        '#type' => 'fieldset',
        '#title' => t('Tribune details'),

        'tribune_max_length' => array(
          '#type' => 'textfield',
          '#title' => t('Maximum length'),
          '#description' => t('Maximum allowed length for messages.'),
          '#default_value' => isset($node->tribune_max_length) ? $node->tribune_max_length : 256,
          '#required' => FALSE,
        ),

        'tribune_nofollow' => array(
          '#type' => 'checkbox',
          '#title' => t('Add nofollow attribute to links'),
          '#description' => t('The nofollow attribute will prevent search engines from following links posted to this tribune.'),
          '#default_value' => isset($node->tribune_nofollow) ? $node->tribune_nofollow : 0,
          '#required' => FALSE,
        ),

        'tribune_target' => array(
          '#type' => 'select',
          '#title' => t('Choose target for links'),
          '#options' => array(
            '_blank' => t('Open in new tab or window'),
            'NULL' => t('Open in same page'),
            // yes, this is a string containing 'NULL'
          ),
          '#default_value' => isset($node->tribune_target) ? $node->tribune_target : '_blank',
          '#required' => FALSE,
        ),

        'tribune_filter_format' => array(
          '#type' => 'select',
          '#title' => t('Filter format'),
          '#options' => $formats,
          '#default_value' => isset($node->tribune_filter_format) ? $node->tribune_filter_format : '_tribune_standard_filter',
          '#required' => FALSE,
        ),
      ),
    );

    return $form;
  } else {
    return NULL;
  }
}

/**
 * Implements hook_load().
 */
function tribune_local_load($nodes) {
  $records = db_select('tribune_local', 't')
    ->condition('nid', array_keys($nodes))
    ->fields('t')
    ->execute()
    ->fetchAllAssoc('nid');
  foreach ($records as $record) {
    $nodes[$record->nid]->tribune_max_length = $record->max_length;
    $nodes[$record->nid]->tribune_reload_rate = $record->reload_rate;
    $nodes[$record->nid]->tribune_nofollow = $record->nofollow;
    $nodes[$record->nid]->tribune_target = $record->target;
    $nodes[$record->nid]->tribune_filter_format = $record->filter_format;
    $nodes[$record->nid]->tribune_users = unserialize($record->users);
  }
}

/**
 * Implements hook_node_insert().
 */
function tribune_local_node_insert($node) {
  if ($node->type == 'tribune' and $node->tribune_type == 'local') {
    db_insert('tribune_local')
      ->fields(array(
        'nid' => $node->nid,
        'max_length' => $node->tribune_max_length,
        'nofollow' => $node->tribune_nofollow,
        'target' => $node->tribune_target,
        'filter_format' => $node->tribune_filter_format,
        'users' => serialize(array()),
        'reload_rate' => 30,
      ))
      ->execute();
  }
}

/**
 * Implements hook_node_update().
 */
function tribune_local_node_update($node) {
  if ($node->type == 'tribune' and $node->tribune_type == 'local') {
    db_update('tribune_local')
      ->fields(array(
        'nid' => $node->nid,
        'max_length' => $node->tribune_max_length,
        'reload_rate' => $node->tribune_reload_rate,
        'nofollow' => $node->tribune_nofollow,
        'target' => $node->tribune_target,
        'filter_format' => $node->tribune_filter_format,
      ))
      ->condition('nid', $node->nid)
      ->execute();
  }
}

/**
 * Implements hook_node_delete().
 */
function tribune_local_node_delete($node) {
  if ($node->type == 'tribune' and $node->tribune_type == 'local') {
    db_delete('tribune_local')
      ->condition('nid', $node->nid)
      ->execute();
  }
}

/**
 * Implements hook_tribune_posts().
 */
function tribune_local_tribune_posts($node, $count, $last_id = 0, $include_moderated = TRUE) {
  global $user;

  // Let's update here the list of active users.
  $users = array();
  foreach ($node->tribune_users as $uid => $time) {
    if ($time > REQUEST_TIME - 300) {
      $users[$uid] = $time;
    }
  }
  $users[$user->uid] = REQUEST_TIME;

  // No need to node_save the whole tribune.
  db_update('tribune_local')
    ->fields(array(
      'users' => serialize($users),
    ))
    ->condition('nid', $node->nid)
    ->execute();

  $query = db_select('tribune_local_post', 't');
  $query->condition('t.nid', $node->nid);

  if ($include_moderated) {
    $db_or = db_or();
    $db_or->condition('t.moderated', $last_id, '>=');
    $db_or->condition('t.post_id', $last_id, '>');
    $query->condition($db_or);
  } else {
    $query->condition('t.post_id', $last_id, '>');
    $query->condition('t.moderated', 0);
  }

  $query->fields('t');
  $query->orderBy('t.post_id', 'DESC');
  $query->range(0, $count);
  $posts = $query->execute()->fetchAllAssoc('post_id');

  return $posts;
}

/**
 * Implements hook_tribune_posts_history().
 */
function tribune_local_tribune_posts_history($node, $count, $until_id) {
  global $user;

  // Let's update here the list of active users.
  $users = array();
  foreach ($node->tribune_users as $uid => $time) {
    if ($time > REQUEST_TIME - 300) {
      $users[$uid] = $time;
    }
  }
  $users[$user->uid] = REQUEST_TIME;

  // No need to node_save the whole tribune.
  db_update('tribune_local')
    ->fields(array(
      'users' => serialize($users),
    ))
    ->condition('nid', $node->nid)
    ->execute();

  $query = db_select('tribune_local_post', 't');
  $query->condition('t.nid', $node->nid);
  $query->condition('t.post_id', $until_id, '<');
  $query->condition('t.moderated', 0);

  $query->fields('t');
  $query->orderBy('t.post_id', 'DESC');
  $query->range(0, $count);
  $posts = $query->execute()->fetchAllAssoc('post_id');

  return $posts;
}

/**
 * Implements hook_tribune_info().
 */
function tribune_local_tribune_info($node) {
  return array(
    'moderated' => TRUE,
    'history' => TRUE,
    'max_length' => $node->tribune_max_length,
  );
}

/**
 * Implements hook_tribune_post().
 */
function tribune_local_tribune_post($node, $message, $user, $timestamp, $info) {
  if ($node->tribune_filter_format == '_tribune_standard_filter') {
    $message = tribune_local_sanitize($message, $node->tribune_max_length);
    $message = tribune_local_replace_urls($node, $message);
  } else {
    $message = substr($message, 0, $node->tribune_max_length);
    $message = check_markup($message, $node->tribune_filter_format);
  }
  $message = tribune_local_resolve_post_ids($node, $message);
  $transaction = db_transaction();
  $last_post_id = db_select('tribune_local_post')
    ->condition('tribune_local_post.nid', $node->nid)
    ->fields('tribune_local_post', array('post_id'))
    ->orderBy('tribune_local_post.post_id', 'DESC')
    ->range(0, 1)
    ->execute()
    ->fetchField();

  $post = array(
    'nid' => $node->nid,
    'uid' => $user->uid,
    'post_id' => $last_post_id + 1,
    'text' => $message,
    'info' => substr($info, 0, 128),
    'timestamp' => $timestamp,
    'clock_index' => 0,
    'ip' => ip_address(),
    'ua' => substr($_SERVER['HTTP_USER_AGENT'], 0, 128),
  );
  db_insert('tribune_local_post')
    ->fields($post)
    ->execute();

  $post['id'] = $last_post_id + 1;
  $post['tribune'] = $node;

  tribune_local_find_references($node, $post);

  return array(
    'post_id' => $post['id'],
    'post' => $post,
  );
}

/**
 * Implements hook_tribune_delete().
 */
function tribune_local_tribune_delete($node) {
  db_delete('tribune_local_post')
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * Implements hook_tribune_delete_post()
 */
function tribune_local_tribune_delete_post($node, $post_id) {
  $last_id = db_select('tribune_local_post')
    ->fields('tribune_local_post', array('post_id'))
    ->condition('tribune_local_post.nid', $node->nid)
    ->orderBy('post_id', 'DESC')
    ->range(0, 1)
    ->execute()
    ->fetchField();

  db_update('tribune_local_post')
    ->fields(array(
      'moderated' => $last_id,
    ))
    ->condition('post_id', $post_id)
    ->condition('nid', $node->nid)
    ->execute();

  module_invoke_all('tribune_deleted_post', $node, $post_id);
}

/**
 * Implements hook_tribune_delete_all_user_posts()
 */
function tribune_local_tribune_delete_all_user_posts($node, $post_id) {
  $info = tribune_local_tribune_post_info($node, $post_id);

  $last_id = db_select('tribune_local_post')
    ->fields('tribune_local_post', array('post_id'))
    ->condition('tribune_local_post.nid', $node->nid)
    ->orderBy('post_id', 'DESC')
    ->range(0, 1)
    ->execute()
    ->fetchField();

  $sel_query = db_select('tribune_local_post', 't')
      ->fields('t', array('post_id'));

  $query = db_update('tribune_local_post')
      ->fields(array('moderated' => $last_id));

  $query->condition('nid', $node->nid);
  $sel_query->condition('nid', $node->nid);
  if (!empty($info['uid'])) {
      $query->condition('uid', $info['uid']);
      $sel_query->condition('uid', $info['uid']);
  } else if (!empty($info['ip'])) {
      $query->condition('ip', $info['ip']);
      $sel_query->condition('ip', $info['ip']);

      if (!empty($info['ua'])) {
        $query->condition('ua', $info['ua']);
        $sel_query->condition('ua', $info['ua']);
      }
  } else {
    // We can't discriminate precisely enough
    // so we'll only delete this one post.
    $query->condition('post_id', $post_id);
    $sel_query->condition('post_id', $post_id);
  }

  $query->execute();

  $sel_query->orderBy('t.post_id', 'ASC');
  $sel_query->range(0, 50);
  $ids = $sel_query->execute()->fetchAllKeyed(0, 0);

  foreach ($ids as $id) {
    module_invoke_all('tribune_deleted_post', $node, $id);
  }
}

/**
 * Implements hook_tribune_reference().
 */
function tribune_local_tribune_reference($node, $timestamp, $from) {
  if (strlen($timestamp) == 4) {
    $timestamp .= '__';
  }
  $post = db_select('tribune_local_post')
    ->condition('tribune_local_post.nid', $node->nid)
    ->condition('tribune_local_post.post_id', $from, '<')
    ->condition('tribune_local_post.timestamp', '%'.$timestamp, 'LIKE')
    ->fields('tribune_local_post')
    ->orderBy('tribune_local_post.post_id', 'DESC')
    ->range(0, 1)
    ->execute()
    ->fetchAssoc();

  $post['id'] = $post['post_id'];
  $post['tribune'] = $node;

  return array($post);
}

/**
 * Parses a post and stores references.
 */
function tribune_local_find_references($node, $post) {
  if (is_array($post)) {
    $post = (object)$post;
  }

  $clock_regex = '/((([01]?[0-9])|(2[0-3])):([0-5][0-9])(:([0-5][0-9]))?([:\^][0-9]|¹|²|³)?)/';

  if (preg_match_all($clock_regex, $post->text, $matches, PREG_SET_ORDER)) {
    foreach ($matches as $clock_id => $match) {
      $hour   = str_pad($match[2], 2, '0', STR_PAD_LEFT);
      $minute = str_pad($match[5], 2, '0', STR_PAD_LEFT);
      $second = str_pad($match[7], 2, '0', STR_PAD_LEFT);

      $ref_date = DateTime::createFromFormat('YmdHis', $post->timestamp);

      if ($match[7] == "") {
        $second = -1;
      }

      $rank = $match[8];

      switch ($rank) {
        case '¹':
          $rank = 1;
          break;
        case '²':
          $rank = 2;
          break;
        case '³':
          $rank = 3;
          break;
        default:
          $rank = substr($rank, 1);
          break;
      }

      $posts = array();
      // if the clock does not match any post today, this tries again
      // to look for matching posts on yesterday, and then on the day
      // before for $days days
      $posts = tribune_local_find_clock_references($node, $hour, $minute, $second, $rank, $ref_date);

      if (count($posts)) {
        foreach ($posts as $target_post) {
          db_insert('tribune_local_post_references')
            ->fields(array(
              'nid' => $node->nid,
              'target_post_id' => $target_post->post_id,
              'reference_post_id' => $post->post_id,
              'reference_clock_id' => $clock_id,
              'target_uid' => $target_post->uid,
              'reference_uid' => $post->uid,
            ))
            ->execute();
        }
      }
    }
  }
}

function tribune_local_find_clock_references($node, $hour, $minute, $second, $rank, $ref_date) {
  $query = db_select('tribune_local_post', 't')
    ->fields('t')
    ->condition('t.nid', $node->nid)
    ->condition('t.timestamp', $ref_date->format('YmdHis'), '<');

  $hour   = str_pad($hour, 2, '0', STR_PAD_LEFT);
  $minute = str_pad($minute, 2, '0', STR_PAD_LEFT);
  $second = str_pad($second, 2, '0', STR_PAD_LEFT);

  if ($rank > 1) {
    $query->condition('t.timestamp', $ref_date->format('Ymd') . $hour . $minute . $second, '=');
  } else if ($rank == 1) {
    $query->condition('t.timestamp', $ref_date->format('Ymd') . $hour . $minute . $second, '=');
  } else if ($second < 0) {
    $query->condition('t.timestamp', $ref_date->format('Ymd') . $hour . $minute . '__', 'LIKE');
  } else {
    $query->condition('t.timestamp', $ref_date->format('Ymd') . $hour . $minute . $second, '=');
  }

  $query->orderBy('post_id', 'DESC');
  $query->range(0, 1);

  $posts = $query->execute()->fetchAllAssoc('post_id');

  return $posts;
}

/**
 * Implements hook_tribune_post_info();
 */
function tribune_local_tribune_post_info($node, $post_id) {
  $post = db_select('tribune_local_post')
    ->condition('tribune_local_post.nid', $node->nid)
    ->condition('tribune_local_post.post_id', $post_id, '=')
    ->fields('tribune_local_post')
    ->execute()
    ->fetchAssoc();

  $post['id'] = $post['post_id'];
  $post['tribune'] = $node;

  return $post;
}

/**
 * Implements hook_menu().
 */
function tribune_local_menu() {
  return array(
    'admin/config/tribune' => array(
      'title' => 'Tribune',
      'page callback' => 'system_admin_menu_block_page',
      'access arguments' => array('access administration pages'),
      'file' => 'system.admin.inc',
      'file path' => drupal_get_path('module', 'system'),
      'position' => 'right',
    ),
    'admin/config/tribune/local-upgrade' => array(
      'title' => 'Upgrade',
      'description' => 'Upgrade from older versions of the tribune module.',
      'page callback' => 'tribune_local_upgrade_page',
      'file' => 'tribune_local.update.inc',
      'access arguments' => array('access administration pages'),
    ),
    'node/%tribune_local_menu/active-users.ahah' => array(
      'type' => MENU_CALLBACK,
      'theme callback' => 'ajax_base_page_theme',
      'page callback' => 'tribune_local_active_users_ahah',
      'page arguments' => array(1),
      'access callback' => 'tribune_access',
      'access arguments' => array('read tribune', 1),
    ),
    'node/%tribune_local_menu/tribune-stats' => array(
      'type' => MENU_LOCAL_TASK,
      'title' => 'Statistics',
      'page callback' => 'tribune_local_stats',
      'page arguments' => array(1),
      'access callback' => 'tribune_local_access',
      'access arguments' => array('access local tribunes statistics', 1),
      'file' => 'tribune_local.stats.inc',
    ),
    'node/%tribune_local_menu/history' => array(
      'type' => MENU_LOCAL_TASK,
      'title' => 'History',
      'page callback' => 'tribune_local_history',
      'page arguments' => array(1),
      'access callback' => 'tribune_local_access',
      'access arguments' => array('access local tribunes history', 1),
    ),
    // The last wildcard isn't used in the path even though it
    // is used (and absolutely needed). I seems to work fine this
    // way, and it prevents a PHP notice, which is displayed when
    // a wildcard is used in a MENU_LOCAL_TASK menu entry.
    'node/%tribune_local_menu/history/date' => array(
      'type' => MENU_LOCAL_TASK,
      'title' => 'History by date',
      'page callback' => 'tribune_local_history_by_date',
      'page arguments' => array(1, 4),
      'access callback' => 'tribune_local_access',
      'access arguments' => array('access local tribunes history', 1),
    ),
    'node/%tribune_local_menu/history/user' => array(
      'type' => MENU_LOCAL_TASK,
      'title' => 'History by user',
      'page callback' => 'tribune_local_history_by_user',
      'page arguments' => array(1, 4),
      'access callback' => 'tribune_local_access',
      'access arguments' => array('access local tribunes history', 1),
    ),
    'node/%tribune_local_menu/history/user-autocomplete/%' => array(
      'type' => MENU_CALLBACK,
      'page callback' => 'tribune_local_user_autocomplete',
      'page arguments' => array(1, 4),
      'access callback' => 'tribune_local_access',
      'access arguments' => array('access local tribunes history', 1),
    ),
    'node/%tribune_local_menu/history/search' => array(
      'type' => MENU_LOCAL_TASK,
      'title' => 'History by string',
      'page callback' => 'tribune_local_history_by_string',
      'page arguments' => array(1, 4),
      'access callback' => 'tribune_local_access',
      'access arguments' => array('access local tribunes history', 1),
    ),
  );
}

function tribune_local_resolve_post_ids($node, $message) {
  return preg_replace_callback('/(^|\W)#\{([0-9]+)\}(\W|$)/', function($matches) use ($node) {
    $post_id = $matches[2];

    $timestamp = db_select('tribune_local_post')
      ->condition('tribune_local_post.nid', $node->nid)
      ->condition('tribune_local_post.post_id', $post_id, '=')
      ->fields('tribune_local_post', array('timestamp'))
      ->execute()
      ->fetchField();

      if ($timestamp) {
        $clock = tribune_format_time($node, $timestamp);
        return $matches[1] . $clock . $matches[3];
      } else {
        return $matches[0];
      }

  }, $message);
}

function tribune_local_access($perm, $node) {
  switch ($perm) {
    case 'access local tribunes history':
      return user_access('access local tribunes history') and tribune_access('read tribune', $node);
      break;
    case 'access local tribunes statistics':
      return user_access('access local tribunes statistics') and tribune_access('read tribune', $node);
      break;
  }
}

/**
 * Autocompletes usernames using users who have actually posted
 * in a tribune.
 */
function tribune_local_user_autocomplete($node, $string) {
  $records = db_select('tribune_local_post')
    ->condition('tribune_local_post.nid', $node->nid)
    ->groupBy('uid')
    ->fields('tribune_local_post', array('uid'))
    ->execute()
    ->fetchAllAssoc('uid');

  $uids = array_keys($records);
  $users = user_load_multiple($uids);

  $matches = array();
  foreach ($users as $user) {
    if (stripos($user->name, $string) === 0) {
      $matches[$user->name] = $user->name;
    }
  }

  drupal_json_output($matches);
}

/**
 * Show all posts posted on some day.
 */
function tribune_local_history_by_date($node, $date) {
  if (!$date or strlen($date) < 6) {
    drupal_goto('node/' . $node->nid . '/history');
  }

  $query = db_select('tribune_local_post');
  $query->condition('tribune_local_post.nid', $node->nid);
  $query->addExpression('SUBSTRING(timestamp FROM 1 FOR 8)', 'day');
  $query->fields('tribune_local_post');
  $query->addField('tribune_local_post', 'post_id', 'id');
  $query->havingCondition('day', $date);
  $query->orderBy('tribune_local_post.post_id', 'ASC');

  $count = $query->countQuery()->execute()->fetchField();
  $page = pager_default_initialize($count, $node->tribune_display_posts);
  $offset = $node->tribune_display_posts * $page;

  $posts = $query->range($offset, $node->tribune_display_posts)->execute()->fetchAllAssoc('post_id');
  $posts = array_reverse($posts, TRUE);

  drupal_alter('tribune_posts', $node, $posts);

  tribune_add_css();
  drupal_add_js(drupal_get_path('module', 'tribune') . '/tribune.js');
  drupal_add_js(array(
    'tribune' => array(
      'tribune-'.$node->nid => array(
        'referencesearchurl' => url('node/' . $node->nid . '/reference-search'),
      ),
    ),
  ), 'setting');

  $content = array('#theme' => 'tribune', '#posts' => $posts, '#node' => $node, '#read-only' => TRUE);
  return drupal_render($content).theme('pager');
}

/**
 * Show all posts posted by an user.
 */
function tribune_local_history_by_user($node, $username) {
  if (!$username) {
    drupal_goto('node/' . $node->nid . '/history');
  }

  $query = db_select('tribune_local_post');
  $query->condition('tribune_local_post.nid', $node->nid);

  if ($username == t('Anonymous')) {
    $query->condition('tribune_local_post.uid', 0);
  } else if ($user = user_load_by_name($username)) {
    $or = db_or();
    $or->condition('tribune_local_post.info', $username . '%', 'LIKE');
    $or->condition('tribune_local_post.uid', $user->uid);
    $query->condition($or);
  } else {
    $query->condition('tribune_local_post.info', $username . '%', 'LIKE');
  }
  $query->fields('tribune_local_post');
  $query->addField('tribune_local_post', 'post_id', 'id');
  $query->orderBy('tribune_local_post.post_id', 'ASC');

  $count = $query->countQuery()->execute()->fetchField();
  $page = pager_default_initialize($count, $node->tribune_display_posts);
  $offset = $node->tribune_display_posts * $page;

  $posts = $query->range($offset, $node->tribune_display_posts)->execute()->fetchAllAssoc('post_id');
  $posts = array_reverse($posts, TRUE);

  drupal_alter('tribune_posts', $node, $posts);

  tribune_add_css();
  drupal_add_js(drupal_get_path('module', 'tribune') . '/tribune.js');
  drupal_add_js(array(
    'tribune' => array(
      'tribune-'.$node->nid => array(
        'referencesearchurl' => url('node/' . $node->nid . '/reference-search'),
      ),
    ),
  ), 'setting');

  $content = array('#theme' => 'tribune', '#posts' => $posts, '#node' => $node, '#read-only' => TRUE);
  return drupal_render($content).theme('pager');
}

/**
 * Show all posts containing a string.
 */
function tribune_local_history_by_string($node, $string) {
  if (!$string) {
    drupal_goto('node/' . $node->nid . '/history');
  }

  $query = db_select('tribune_local_post');
  $query->condition('tribune_local_post.nid', $node->nid);
  $query->condition('tribune_local_post.text', '%' . $string . '%', 'LIKE');
  $query->fields('tribune_local_post');
  $query->addField('tribune_local_post', 'post_id', 'id');
  $query->orderBy('tribune_local_post.post_id', 'ASC');

  $count = $query->countQuery()->execute()->fetchField();
  $page = pager_default_initialize($count, $node->tribune_display_posts);
  $offset = $node->tribune_display_posts * $page;

  $posts = $query->range($offset, $node->tribune_display_posts)->execute()->fetchAllAssoc('post_id');
  $posts = array_reverse($posts, TRUE);

  drupal_alter('tribune_posts', $node, $posts);

  tribune_add_css();
  drupal_add_js(drupal_get_path('module', 'tribune') . '/tribune.js');
  drupal_add_js(array(
    'tribune' => array(
      'tribune-'.$node->nid => array(
        'referencesearchurl' => url('node/' . $node->nid . '/reference-search'),
      ),
    ),
  ), 'setting');

  $content = array('#theme' => 'tribune', '#posts' => $posts, '#node' => $node, '#read-only' => TRUE);
  return drupal_render($content).theme('pager');
}

/**
 * Handles menu wildcards.
 */
function tribune_local_menu_load($nid) {
  if ($node = tribune_menu_load($nid) and $node->tribune_type == 'local') {
    return $node;
  }

  return FALSE;
}

/**
 * Displays a page allowing users to view the tribune history.
 */
function tribune_local_history($node) {
  $form_date = drupal_get_form('tribune_local_history_form_date', $node);
  $form_user = drupal_get_form('tribune_local_history_form_user', $node);
  $form_string = drupal_get_form('tribune_local_history_form_string', $node);

  return drupal_render($form_date).drupal_render($form_user).drupal_render($form_string);
}

/**
 * Search posts by date.
 */
function tribune_local_history_form_date($form, $form_state, $node) {
  $form = array();

  $form['by-date'] = array(
    '#type' => 'fieldset',
    '#title' => t('Messages by date'),
    '#description' => t('See all the messages posted at a specific date.'),
  );
  $form['by-date']['by-date-date'] = array(
    '#type' => 'date',
  );
  $form['by-date']['by-date-submit'] = array(
    '#type' => 'submit',
    '#value' => t('By date'),
    '#submit' => array('tribune_local_history_by_date_handler'),
  );
  $form['node'] = array(
    '#type' => 'value',
    '#value' => $node,
  );

  return $form;
}

/**
 * Search posts by author.
 */
function tribune_local_history_form_user($form, $form_state, $node) {
  $form['by-user'] = array(
    '#type' => 'fieldset',
    '#title' => t('Messages by user'),
    '#description' => t('See all the messages posted by an user.'),
  );
  $form['by-user']['by-user-user'] = array(
    '#type' => 'textfield',
    '#autocomplete_path' => 'node/' . $node->nid . '/history/user-autocomplete',
  );
  $form['by-user']['by-user-submit'] = array(
    '#type' => 'submit',
    '#value' => t('User'),
    '#submit' => array('tribune_local_history_by_user_handler'),
  );
  $form['node'] = array(
    '#type' => 'value',
    '#value' => $node,
  );

  return $form;
}

/**
 * Search posts by string.
 */
function tribune_local_history_form_string($form, $form_state, $node) {
  $form['by-string'] = array(
    '#type' => 'fieldset',
    '#title' => t('Search messages'),
    '#description' => t('Search messages containing a string.'),
  );
  $form['by-string']['by-string-string'] = array(
    '#type' => 'textfield',
  );
  $form['by-string']['by-string-submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
    '#submit' => array('tribune_local_history_by_string_handler'),
  );
  $form['node'] = array(
    '#type' => 'value',
    '#value' => $node,
  );

  return $form;
}

function tribune_local_history_by_date_handler($form, $form_state) {
  $node = $form_state['values']['node'];
  $date = mktime(0, 0, 0, $form_state['values']['by-date-date']['month'], $form_state['values']['by-date-date']['day'], $form_state['values']['by-date-date']['year']);

  header("Location: ". url('node/' . $node->nid . '/history/date/'. date("Ymd", $date)));
  exit();
}

function tribune_local_history_by_user_handler($form, $form_state) {
  $node = $form_state['values']['node'];

  header("Location: ". url('node/' . $node->nid . '/history/user/' . $form_state['values']['by-user-user']));
  exit();
}

function tribune_local_history_by_string_handler($form, $form_state) {
  $node = $form_state['values']['node'];

  header("Location: ". url('node/' . $node->nid . '/history/search/' . $form_state['values']['by-string-string']));
  exit();
}


/**
 * Replaces URLs with tags.
 */
function tribune_local_replace_urls($node, $text) {
  $text = preg_replace_callback('#'.
      '('.                                        // 1
        '(https?|ftp|gopher|file|mms|rtsp|rtmp)'. // 2
        '://.*?'.
      ')'.
      '('.                                        // 3
        '(,|\.|\)|\]|\})?'.                       // 4
        '(<| | |"|$)'.                            // 5
      ')'.
      '#', function($matches) use ($node) {return tribune_local_url_replace_callback($node, $matches);}, $text);

  return $text;
}

function tribune_local_url_replace_callback($node, $matches) {
  $url = $matches[1];
  $text = 'url';

  $pairs = array(
    ')' => '(',
    '}' => '{',
    ']' => '[',
  );

  $before = "";
  $after  = "";

  if ($matches[4]) {
    if (isset($pairs[$matches[4]]) && substr_count($url, $pairs[$matches[4]]) == substr_count($url, $matches[4]) + 1) {
      $url .= $matches[4];
    } else {
      $after = $matches[4];
    }
  }

  $after .= $matches[5];

  $attributes = array();

  if ($node->tribune_nofollow) {
    $attributes['rel'] = 'nofollow';
  }

  if ($node->tribune_target != 'NULL') {
    $attributes['target'] = $node->tribune_target;
  }

  return $before .'<a href="'. $url .'" ' . drupal_attributes($attributes) . '>['. $text .']</a>'. $after;
}

/**
 * Sanitizes a post, leaving only safe HTML tags.
 */
function tribune_local_sanitize($text, $length = -1) {
  $l    = strlen($text);
  $byte = 0 ;

  for ($i=0 ; $i < $l ; $i++) {
    $byte = ord($text[$i]);
    if ($byte < 32 or $byte == 127) {
      $text[$i] = ' ';
    }
  }

  $text = trim($text);

  if (function_exists("mb_detect_encoding")) {
    // let us assume that mb_substr exists too then
    if (strcasecmp(mb_detect_encoding($text, 'UTF-8', TRUE), 'UTF-8') == 0) {
      $clean = mb_substr($text, 0, $length, 'UTF-8');
    }
  } else if (function_exists("iconv_substr")) {
    // there is no iconv_detect_encoding, so let us assume that the string is UTF-8-encoded
    $clean = iconv_substr($text, 0, $length, 'UTF-8');
  } else {
    // better than nothing?
    //$clean = substr(str_ctrl_clean($s), 0, $length);
    // actually, we'll just pass it as it is, rather than risking splitting a character in two
    $clean = $text;
  }

  $message = preg_replace_callback(':<(m|s|u|b|i|tt|code)>(.*?)</\1>:', 'tribune_local_replace_callback', $clean);

  $replacement = array(
        "&" =>   "&amp;",
        "<" =>    "&lt;",
        ">" =>    "&gt;",
    chr(26) =>       "<",
    chr(27) =>       ">",
    chr(28) =>       "'",
    chr(29) =>       '"',
  );

  return str_replace(array_keys($replacement), array_values($replacement), $message);
}

function tribune_local_replace_callback($matches) {
  $text = preg_replace_callback(':<(m|s|u|b|i|tt)>(.*?)</\1>:', 'tribune_local_replace_callback', $matches[2]);
  switch ($matches[1]) {
    case 'm':
      $start = "====> ". chr(26) ."b". chr(27) ."Moment ";
      $stop  = chr(26) ."/b". chr(27) ." <====";
      break;
    case 'tt':
      $matches[1] = 'code';
    default:
      $start = chr(26) . $matches[1] . chr(27);
      $stop  = chr(26) ."/". $matches[1] . chr(27);
  }
  return $start . $text . $stop;
}

/**
 * Implements hook_block_info().
 */
function tribune_local_block_info() {
  $tribunes = node_load_multiple(array(), array('type' => 'tribune'));

  $blocks = array();

  foreach ($tribunes as $tribune) {
    if ($tribune->tribune_type == 'local') {
      $blocks['tribune-active-users-' . $tribune->nid] = array(
        'info' => t('Tribune: @title [nid: !nid] active users', array('@title' => $tribune->title, '!nid' => $tribune->nid)),
        'cache' => DRUPAL_CACHE_PER_USER,
        'properties' => array(
          'nid' => $tribune->nid,
        ),
      );
    }
  }

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function tribune_local_block_view($delta = '') {
  $nid = str_replace('tribune-active-users-', '', $delta);
  if ($node = node_load($nid)) {
    return array(
      'subject' => t('Active users in @title', array('@title' => $node->title)),
      'content' => '<div id="tribune-active-users-' . $nid . '" class="tribune-active-users">' . tribune_local_active_users($node) . '</div>',
    );
  }
}

function tribune_local_get_active_users($node) {
  foreach ($node->tribune_users as $uid => $time) {
    if ($time < REQUEST_TIME - 300) {
      unset($node->tribune_users[$uid]);
    }
  }

  return user_load_multiple(array_keys($node->tribune_users));
}

function tribune_local_active_users($node) {
  drupal_add_js(drupal_get_path('module', 'tribune_local') . '/tribune_local.js');
  drupal_add_js(array(
    'tribune' => array(
      'tribune-'.$node->nid => array(
        'activeusers' => url('node/' . $node->nid . '/active-users.ahah'),
      ),
    ),
  ), 'setting');
  return theme('tribune_active_users', array('node' => $node, 'users' => tribune_local_get_active_users($node)));
}

function tribune_local_active_users_ahah($node) {
  if (!empty($_POST['active'])) {
    // The user is watching the tribune, not just its user count.
    global $user;

    // Let's update here the list of active users.
    $users = array();
    foreach ($node->tribune_users as $uid => $time) {
      if ($time > REQUEST_TIME - 300) {
        $users[$uid] = $time;
      }
    }
    $users[$user->uid] = REQUEST_TIME;

    // No need to node_save the whole tribune.
    db_update('tribune_local')
      ->fields(array(
        'users' => serialize($users),
      ))
      ->condition('nid', $node->nid)
      ->execute();
  }

  echo tribune_local_active_users($node);
  exit();
}

function tribune_local_theme($existing, $type, $theme, $path) {
  return array(
    'tribune_active_users' => array(
      'template' => 'tribune-active-users',
      'variables' => array('node' => NULL, 'users' => array()),
    ),
  );
}

/**
 * Process variables for tribune-active-users.tpl.php.
 *
 * @see tribune-active-users.tpl.php
 */
function tribune_local_preprocess_tribune_active_users(&$variables) {
  $users_list = array(
    'items' => array(),
    'type' => 'ul',
  );
  foreach ($variables['users'] as $user) {
    $users_list['items'][] = theme('username', array('account' => $user));
  }

  $variables['users_list'] = theme('item_list', $users_list);
}

function tribune_local_views_api() {
  return array(
    'api' => 3,
  );
}


