<?php

/**
 * @file
 * The core module that manages all common tribune operations
 */

/**
 * Implements hook_permission().
 */
function tribune_permission() {
  return array(
    'moderate all tribunes' => array(
      'title' => t('Moderate all tribunes'),
      'description' => t('Delete and ban users from any tribune.'),
    ),
  );
}

/**
 * Implements hook_node_info().
 */
function tribune_node_info() {
  return array(
    'tribune' => array(
      'base' => 'tribune',
      'name' => t('Tribune'),
      'description' => t('A tribune.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function tribune_theme($existing, $type, $theme, $path) {
  return array(
    'tribune' => array(
      'template' => 'tribune',
      'render element' => 'elements',
    ),
    'tribune_posts' => array(
      'template' => 'tribune_posts',
      'render element' => 'elements',
    ),
    'tribune_post' => array(
      'template' => 'tribune-post',
      'variables' => array('post' => NULL, 'node' => NULL),
    ),
  );
}

/**
 * Returns an array containing a 'posts' index with the tribune latest posts and
 * an 'error' index indicating whether there was an error or not retrieving the
 * posts.
 */
function tribune_posts($node, $count, $last_id = 0, $include_moderated = TRUE) {
  $module = _tribune_module($node);
  $info = tribune_info($node);
  if ($info['moderated']) {
    $posts = module_invoke($module, 'tribune_posts', $node, $count, $last_id, $include_moderated);
  } else {
    $posts = module_invoke($module, 'tribune_posts', $node, $count, $last_id);
  }

  drupal_alter('tribune_posts', $node, $posts);

  $error = FALSE;

  if (is_array($posts)) foreach ($posts as $id => &$post) {
    $post = (array)$post;
    if ($post === NULL) {
      if (!$include_moderated) {
        unset($posts[$id]);
        continue;
      } else {
        $post = array('moderated' => TRUE);
      }
    }

    $post += array(
      'id' => $id,
      'tribune' => $node,
      'text' => '',
      'info' => '',
      'uid' => '',
      'timestamp' => '',
      'clock_index' => '',
      'moderated' => FALSE,
    );

    $posts[$id] = $post;
  } else {
    // The tribune probably returned an error message,
    if ($posts === NULL) {
      $error = t('Unable to retrieve posts from this tribune.');
    } else {
      $error = $posts;
    }

    $error = t('Tribune @title: ', array('@title' => $node->title)) . $error;
    $posts = array();
  }

  return array('posts' => $posts, 'error' => $error);
}

/**
 * Returns an array containing a 'posts' index with $count tribune posts until $until_id.
 */
function tribune_posts_history($node, $count, $until_id) {
  $module = _tribune_module($node);
  $info = tribune_info($node);
  if ($info['history']) {
    $posts = module_invoke($module, 'tribune_posts_history', $node, $count, $until_id);
  } else {
    return array('posts' => array(), 'error' => array());
  }

  drupal_alter('tribune_posts', $node, $posts);

  $error = FALSE;

  if (is_array($posts)) foreach ($posts as $id => &$post) {
    $post = (array)$post;
    if ($post === NULL) {
      if (!$include_moderated) {
        unset($posts[$id]);
        continue;
      } else {
        $post = array('moderated' => TRUE);
      }
    }

    $post += array(
      'id' => $id,
      'tribune' => $node,
      'text' => '',
      'info' => '',
      'uid' => '',
      'timestamp' => '',
      'clock_index' => '',
      'moderated' => FALSE,
    );

    $posts[$id] = $post;
  } else {
    // The tribune probably returned an error message,
    if ($posts === NULL) {
      $error = t('Unable to retrieve posts from this tribune.');
    } else {
      $error = $posts;
    }

    $error = t('Tribune @title: ', array('@title' => $node->title)) . $error;
    $posts = array();
  }

  return array('posts' => $posts, 'error' => $error);
}

function tribune_add_css() {
  switch (variable_get('tribune_stylesheet', 'light')) {
    case 'none';
      break;
    case 'basic';
      drupal_add_css(drupal_get_path('module', 'tribune') . '/tribune.css');
      break;
    case 'light';
      drupal_add_css(drupal_get_path('module', 'tribune') . '/tribune.css');
      drupal_add_css(drupal_get_path('module', 'tribune') . '/light.css');
      break;
    case 'dark';
      drupal_add_css(drupal_get_path('module', 'tribune') . '/tribune.css');
      drupal_add_css(drupal_get_path('module', 'tribune') . '/dark.css');
      break;
  }
}

/**
 * Implements hook_view().
 */
function tribune_view($node, $view_mode = 'full') {
  if (!tribune_access('read tribune', $node)) {
    $node->content['#access'] = FALSE;
    return $node;
  }

  global $user;

  $count = $node->tribune_display_posts;

  if ($node->tribune_scrollback) {
    // Let's add a few posts more to get some history
    $count += 10;
  }

  if ($view_mode == 'full') {
    drupal_add_feed('node/' . $node->nid . '/tribune.rss', $node->title);
    $return = tribune_posts($node, $count, 0, FALSE);

    if ($return['error']) {
      drupal_set_message($return['error'], 'error');
    }

    $node->content['tribune'] = array(
      '#theme' => 'tribune',
      '#posts' => $return['posts'],
      '#error' => $return['error'],
      '#node' => $node,
    );
  } else if ($view_mode == 'teaser') {
    $count = 5;

    $return = tribune_posts($node, $count, 0, FALSE);

    if ($return['error']) {
      drupal_set_message($return['error'], 'error');
    }

    $node->content['tribune'] = array(
      '#theme' => 'tribune',
      '#posts' => $return['posts'],
      '#error' => $return['error'],
      '#node' => $node,
    );
  }

  drupal_add_html_head_link(array(
    'type' => 'application/xml',
    'href' => url('node/' . $node->nid . '/config.xml', array('absolute' => TRUE)),
    'rel' => 'tribune configuration',
  ));
  tribune_add_css();
  drupal_add_js(drupal_get_path('module', 'tribune') . '/tribune.js');
  drupal_add_js(array(
    'tribune' => array(
      // Have to use a string index with alphabetic characters or
      // this will be output as a numerically indexed js array.
      'tribune-'.$node->nid => array(
        'uid' => $user->uid,
        'count' => $count,
        'buttons' => !!(isset($node->tribune_filter_format) and $node->tribune_filter_format == '_tribune_standard_filter'),
        'reloadurl' => url('node/' . $node->nid . '/json'),
        'staticurl' => $node->tribune_public ? file_create_url(tribune_static_backend($node)) : NULL,
        'period' => $node->tribune_public ? 10000 : 30000,
        'posturl' => url('node/' . $node->nid . '/post'),
        'controlurl' => url('node/' . $node->nid . '/control/' . drupal_get_token()),
        'referencesearchurl' => url('node/' . $node->nid . '/reference-search'),
        'historyurl' => url('node/' . $node->nid . '/history.json'),
        'permissions' => array(
          'mod' => tribune_access('moderate tribune', $node),
          'write' => tribune_access('post in tribune', $node),
          'read' => tribune_access('read tribune', $node),
        ),
        'favicon_notification' => !!$node->tribune_favicon_notification,
        'favicons' => array(
          'answer' => url(drupal_get_path('module', 'tribune') .'/images/answer.ico', array('absolute' => TRUE)),
          'new_post' => url(drupal_get_path('module', 'tribune') .'/images/newpost.ico', array('absolute' => TRUE)),
        ),
      ),
    ),
  ), 'setting');

  return $node;
}

/**
 * Creates posting form.
 */
function _tribune_post_form($form, &$form_state, $node) {
  $info = tribune_info($node);

  return array(
    '#access' => tribune_access('post in tribune', $node),
    '#attributes' => array(
      'class' => array(
        'tribune-post-form',
      ),
    ),

    'tribune' => array(
      '#type' => 'value',
      '#value' => $node,
    ),
    'nid' => array(
      '#type' => 'value',
      '#value' => $node->nid,
    ),
    'palmipede' => array(
      'message' => array(
        '#type' => 'textfield',
        '#maxlength' => $info['max_length'],
        '#size' => 200,
        '#attributes' => array(
          'class' => array('tribune-form-message'),
          'placeholder' => t('Message'),
          'spellcheck' => 'true',
          'autocomplete' => 'false',
          'autocapitalize' => 'off',
        ),
      ),
      'tribune-email' => array(
        '#type' => 'textfield',
        '#default_value' => '',
        '#description' => 'Please leave this field empty: it is only here to confuse spambots, and you should not even see it. If you <em>do</em> see it, there is probably a CSS problem somewhere and you should contact the website administrator.',
        '#attributes' => array('class' => array('tribune-email-field')),
        // I'll leave this untranslated because it shouldn't appear, anyway
      ),
      'submit' => array(
        '#prefix' => '<div class="form-item">',
        '#suffix' => '</div>',
        '#type' => 'submit',
        '#value' => 'Post',
      ),
    ),
    '#submit' => array('_tribune_post_form_submit'),
  );
}

/**
 * Handles form submission.
 */
function _tribune_post_form_submit($form, &$form_state) {
  if (empty($form_state['values']['tribune-email'])) {
    tribune_post(node_load($form_state['values']['nid']), $form_state['values']['message']);
  }
}

/**
 * Handles message posting.
 */
function tribune_post($node, $message, $user = NULL, $info = NULL, $timestamp = NULL) {
  if ($message and $message = tribune_censor_message($node, $message)) {
    $module = _tribune_module($node);

    if ($user === NULL) {
      $user = clone $GLOBALS['user'];
    }

    if ($timestamp === NULL) {
      $timestamp = date('YmdHis', REQUEST_TIME);
    }

    if ($info === NULL) {
      $info = isset($_SERVER['HTTP_USER_AGENT']) ? $_SERVER['HTTP_USER_AGENT']: '';
    }

    foreach (module_implements('tribune_before_post') as $module_implements) {
      $func = $module_implements.'_tribune_before_post';
      if ($func($node, $message, $user, $timestamp, $info) === FALSE) {
        return array();
      }
    }

    $return = module_invoke($module, 'tribune_post', $node, $message, $user, $timestamp, $info);

    if ($post = $return['post']) {
      $modules = module_implements('tribune_after_post');
      if (count($modules)) {
        foreach ($modules as $module) {
          $func = $module.'_tribune_after_post';
          $func($node, $post);
        }
      }
    }

    $url = url('node/' . $node->nid, array('absolute' => TRUE));
    cache_clear_all($url, 'cache_page', TRUE);

    if ($node->tribune_public) {
      tribune_cache_backend($node);
    }

    return $return;
  } else {
    return array();
  }
}

/**
 * Censors messages according to access settings.
 */
function tribune_censor_message($node, $message) {
  if (!empty($node->tribune_censorship['patterns'])) {
    $type = $node->tribune_censorship['type'];
    $censored_patterns = $node->tribune_censorship['patterns'];

    foreach ($censored_patterns as $pattern) {
      $pattern = preg_quote(trim($pattern));
      $pattern = str_replace('\*', '\p{L}*', $pattern);
      $pattern = str_replace('\?', '\p{L}', $pattern);

      switch ($type) {
        case 'stars':
          $message = preg_replace_callback('/' . $pattern . '/',
            function($matches) {
              return str_pad('', mb_strlen($matches[0]), '*');
            },
            $message);
          break;
        case 'reject':
          if (preg_match('/' . $pattern . '/', $message)) {
            return NULL;
          }
      }
    }
  }

  return $message;
}

function tribune_ban_match_ip($pattern) {
  return fnmatch($pattern, ip_address());
}

function tribune_ban_match_ua($pattern) {
  return fnmatch($pattern, $_SERVER['HTTP_USER_AGENT']);
}

function tribune_user_is_banned($node) {
  if (isset($node->tribune_bans) and is_array($node->tribune_bans)) foreach ($node->tribune_bans as $ban) {
    if (empty($ban['ip']) || tribune_ban_match_ip($ban['ip'])) {
      if (empty($ban['ua']) || tribune_ban_match_ua($ban['ua'])) {
        return TRUE;
      }
    }
  }

  return FALSE;
}

/**
 * Handles message posting from a remote client (AJAX or coincoins)
 */
function tribune_post_from_client($node) {
  if (isset($_POST['message'])) {
    $ret = tribune_post($node, $_POST['message']);

    if (isset($ret['post_id'])) {
      drupal_add_http_header('X-Post-Id', $ret['post_id']);
    }

    if (!empty($_SERVER['HTTP_ACCEPT'])) {
      // If the client explicitely accepts XML, we'll send it the backend in response
      // same if it accepts JSON, but we'll assume */* is more of a default setting
      // for browsers and isn't really asking for that.
      if (strpos($_SERVER['HTTP_ACCEPT'], 'application/xml') !== FALSE) {
       //or strpos($_SERVER['HTTP_ACCEPT'], 'text/xml') !== FALSE) {
        // Since many wmCoinCoin users post with a custom user-agent, I just
        // can't send XML even when text/xml is supposed to be accepted.
        // STUPID STUPID STUPID STUPID
        // Why would you say you accept text/xml and throw an error when you
        // actually receive XML? Retarded client.
        tribune_deliver_xml(tribune_xml($node));
      } else if (strpos($_SERVER['HTTP_ACCEPT'], 'application/json') !== FALSE) {
        module_load_include('inc', 'tribune', 'tribune.feeds');
        tribune_json_posts($node);
      }
    }
  }

  exit();
}

/**
 * Process variables for tribune.tpl.php.
 *
 * @see tribune.tpl.php
 */
function tribune_preprocess_tribune(&$variables) {
  $variables['posts'] = '';

  foreach (array_reverse($variables['elements']['#posts']) as $post) {
    if (!is_array($post)) {
      $post = (array)$post;
    }

    if (!isset($post['tribune'])) {
      $post['tribune'] = $variables['elements']['#node'];
    }

    if ($post['moderated']) {
      continue;
    }

    $post = array(
      '#theme' => 'tribune_post',
      '#post' => $post,
    );
    $variables['posts'] .= drupal_render($post);
  }

  $variables['node'] = $variables['elements']['#node'];
  $variables['tribune_type'] = $variables['elements']['#node']->tribune_type;
  $variables['classes_array'] = array(
    'tribune-wrapper',
    'tribune-' . $variables['elements']['#node']->tribune_type,
    'tribune-' . $variables['elements']['#node']->nid,
  );

  if (!empty($variables['elements']['#node']->tribune_scrollback)) {
    $variables['classes_array'][] = 'tribune-scrollback';
  }

  if (!tribune_access('post in tribune', $variables['elements']['#node'])) {
    $variables['form'] = '';
  } else if (isset($variables['elements']['#read-only']) and $variables['elements']['#read-only']) {
    $variables['form'] = '';
  } else {
    $form = drupal_get_form('_tribune_post_form', $variables['node']);
    $variables['form'] = drupal_render($form);
  }

  if (isset($variables['elements']['#page'])) {
    $variables['page'] = $variables['elements']['#page'];
  } else {
    $variables['page'] = '';
  }
}

/**
 * Process variables for tribune-post.tpl.php.
 *
 * @see tribune-post.tpl.php
 */
function tribune_preprocess_tribune_post(&$variables) {
  $variables['post']['prefix'] = '';
  $variables['post']['suffix'] = '';
  if ($variables['post']['uid'] && $user = user_load($variables['post']['uid'])) {
    $variables['post']['username'] = $user->name;
  } else if (isset($variables['post']['username']) and $variables['post']['username']) {
    $variables['post']['username'] = $variables['post']['username'];
  } else {
    if ($variables['post']['tribune']->tribune_show_useragent) {
      $variables['post']['username'] = '';
      $variables['post']['mini-info'] = tribune_reduce_info($variables['post']['info']);
    } else {
      $variables['post']['username'] = t('Anonymous');
    }
  }
  $variables['post']['clock'] = tribune_format_time($variables['post']['tribune'], $variables['post']['timestamp']);
  $variables['post']['clock'] = str_replace('#', '<span class="tribune-clock-sign">#</span>', $variables['post']['clock']);
  $variables['post']['unixtimestamp'] = tribune_format_time($variables['post']['tribune'], $variables['post']['timestamp'], 'U');

  drupal_alter('tribune_post', $variables['post']['tribune'], $variables['post']);
}

/**
 * Returns all types provided by installed modules.
 */
function tribune_types() {
  return module_invoke_all('tribune_types');
}

function tribune_format_time($node, $timestamp, $format = NULL) {
  $date = DateTime::createFromFormat('YmdHis', $timestamp);
  $clock = $date->format($format ?: $node->tribune_time_format);
  return $clock;
}

/**
 * Implements hook_form().
 */
function tribune_form($node, &$form_state) {
  $options = array();
  foreach (tribune_types() as $type => $info) {
    $options[$type] = $info['title'];
  }

  if (empty($options)) {
    drupal_set_message(t('You need to enable at least one tribune provider module.'), 'error');
  }

  $type = node_type_get_type($node);

  $drupal_time_formats = array();
  foreach (system_get_date_formats() as $group => $formats) {
    $drupal_time_formats[$group] = array();
    foreach ($formats as $format) {
      $string = $format['format'];
      $drupal_time_formats[$group][$string] = date($string);
    }
  }
  $time_format_options = array(
    t('Standard tribune formats') => array(
      'H:i:s' => date('H:i:s'),
      'Y-m-d#H:i:s' => date('Y-m-d#H:i:s'),
    ),
    '&nbsp;' => array(),
    t('Drupal formats (may not be supported)') => $drupal_time_formats,
  );

  drupal_add_js(drupal_get_path('module', 'tribune') . '/tribune-form.js');
  $form = array(
    'node' => array(
      '#type' => 'value',
      '#value' => $node,
    ),
    'title' => array(
      '#type' => 'textfield',
      '#title' => check_plain($type->title_label),
      '#required' => TRUE,
      '#default_value' => $node->title,
    ),
    'tribune' => array(
      '#type' => 'fieldset',
      '#title' => t('Tribune settings'),
      'tribune_display_posts' => array(
        '#type' => 'textfield',
        '#title' => t('Posts shown'),
        '#description' => t('Number of posts displayed on the tribune page.'),
        '#required' => TRUE,
        '#default_value' => isset($node->tribune_display_posts) ? $node->tribune_display_posts : 40,
      ),
      'tribune_favicon_notification' => array(
        '#type' => 'checkbox',
        '#title' => t('Favicon notification'),
        '#description' => t('Use a special favicon to show when a new message has been posted.'),
        '#default_value' => isset($node->tribune_favicon_notification) ? $node->tribune_favicon_notification : TRUE,
      ),
      'tribune_show_useragent' => array(
        '#type' => 'checkbox',
        '#title' => t('Show user-agent'),
        '#description' => t('Displays anonymous user user-agent (Firefox, IE9, Safari...) instead of just "Anonymous" to make it easier to identify different anonymous users.'),
        '#default_value' => isset($node->tribune_show_useragent) ? $node->tribune_show_useragent : FALSE,
      ),
      'tribune_time_format' => array(
        '#type' => 'select',
        '#title' => t('Time format'),
        '#description' => t('Format used to display post time and references.'),
        '#default_value' => isset($node->tribune_time_format) ? $node->tribune_time_format : 'H:i:s',
        '#options' => $time_format_options,
      ),
      'tribune_public' => array(
        '#type' => 'checkbox',
        '#title' => t('Public read access'),
        '#description' => t('This setting disables read access control for this tribune, but enables the module to cache posts very efficiently, greatly reducing server load and improving responsiveness.'),
        '#default_value' => isset($node->tribune_public) ? $node->tribune_public : FALSE,
      ),
      'tribune_scrollback' => array(
        '#type' => 'checkbox',
        '#title' => t('Allow scrollback'),
        '#description' => t('This setting will display the tribune with a scrollbar, and allow users to see older posts by scrolling up.'),
        '#default_value' => isset($node->tribune_scrollback) ? $node->tribune_scrollback : FALSE,
      ),
      'tribune_type' => array(
        '#type' => 'radios',
        '#title' => t('Type'),
        '#options' => $options,
        '#default_value' => isset($node->tribune_type) ? $node->tribune_type : FALSE,
        '#required' => TRUE,
        '#ajax' => array(
          'callback' => 'tribune_type_form',
          'wrapper' => 'tribune-type-ajax-wrapper',
        ),
      ),
      'settings' => array(
        '#markup' => '<div id="tribune-type-ajax-wrapper"></div>',
      ),
    ),
  );


  $tribune_type = NULL;
  if (!empty($form_state['values']['tribune_type'])) {
    $tribune_type = $form_state['values']['tribune_type'];
  }
  if (isset($node->tribune_type)) {
    $tribune_type = $node->tribune_type;
    $form['tribune']['tribune_type']['#disabled'] = TRUE;
    $form['tribune']['tribune_type']['#description'] = t('You cannot change the type of a tribune after its creation.');
  }

  $form['tribune']['settings'] = array();
  foreach (module_implements('tribune_form') as $module) {
    $func = $module.'_tribune_form';
    if ($result = $func($node, $form_state) and is_array($result)) {
      $form['tribune']['settings'] = array_merge($form['tribune']['settings'], $result);
    }
  }

  $form['tribune']['settings']['#prefix'] = '<div id="tribune-type-ajax-wrapper">';
  $form['tribune']['settings']['#suffix'] = '</div>';

  return $form;
}

/**
 * Implements hook_load().
 */
function tribune_load($nodes) {
  $types = tribune_types();
  $nodes_by_module = array();
  $result = db_select('tribunes')
    ->fields('tribunes')
    ->condition('nid', array_keys($nodes))
    ->execute()
    ->fetchAllAssoc('nid');
  foreach ($result as $record) {
    $custom_access = $record->custom_access ? unserialize($record->custom_access) : array();
    foreach ($custom_access as $uid => $perms) {
      if (!isset($perms['mod'])) $custom_access[$uid]['mod'] = 0;
      if (!isset($perms['write'])) $custom_access[$uid]['write'] = 0;
      if (!isset($perms['read'])) $custom_access[$uid]['read'] = 0;
      if (!isset($perms['banned'])) $custom_access[$uid]['banned'] = 0;
    }
    $nodes[$record->nid]->tribune_type = $record->type;
    $nodes[$record->nid]->tribune_display_posts = $record->display_posts;
    $nodes[$record->nid]->tribune_favicon_notification = $record->favicon_notification;
    $nodes[$record->nid]->tribune_show_useragent = $record->show_useragent;
    $nodes[$record->nid]->tribune_time_format = $record->time_format;
    $nodes[$record->nid]->tribune_permissions = array(
      'mod' => $record->mod_access,
      'write' => $record->write_access,
      'read' => $record->read_access,
      'custom' => $custom_access,
    );
    $nodes[$record->nid]->tribune_bans = unserialize($record->bans) ?: array();
    $nodes[$record->nid]->tribune_public = !!($record->public);
    $nodes[$record->nid]->tribune_scrollback = !!($record->scrollback);
    $nodes[$record->nid]->tribune_censorship = unserialize($record->censorship) ?: array();

    $module = $types[$record->type]['module'];

    if (!isset($nodes_by_module[$module])) {
      $nodes_by_module[$module] = array();
    }
    $nodes_by_module[$module][$record->nid] = $nodes[$record->nid];
  }

  foreach ($nodes_by_module as $module => $nodes) {
    $function = $module . '_load';
    if (function_exists($function)) {
      $function($nodes);
    }
  }
}

/**
 * Implements hook_insert().
 */
function tribune_insert($node) {
  db_insert('tribunes')
    ->fields(array(
      'nid' => $node->nid,
      'type' => $node->tribune_type,
      'display_posts' => (int)$node->tribune_display_posts,
      'favicon_notification' => (int)$node->tribune_favicon_notification,
      'show_useragent' => (int)$node->tribune_show_useragent,
      'time_format' => $node->tribune_time_format,
      'mod_access' => 'owner',
      'write_access' => 'all',
      'read_access' => 'all',
      'custom_access' => serialize(array()),
      'bans' => serialize(array()),
      'public' => $node->tribune_public ? 1 : 0,
      'scrollback' => $node->tribune_scrollback ? 1 : 0,
      'censorship' => serialize(array()),
    ))
    ->execute();

  $module = _tribune_module($node);
  $posts = module_invoke($module, 'tribune_insert', $node);
}

/**
 * Implements hook_update().
 */
function tribune_update($node) {
  db_update('tribunes')
    ->fields(array(
      'nid' => $node->nid,
      'type' => $node->tribune_type,
      'display_posts' => (int)$node->tribune_display_posts,
      'favicon_notification' => (int)$node->tribune_favicon_notification,
      'show_useragent' => (int)$node->tribune_show_useragent,
      'time_format' => $node->tribune_time_format,
      'mod_access' => $node->tribune_permissions['mod'],
      'write_access' => $node->tribune_permissions['write'],
      'read_access' => $node->tribune_permissions['read'],
      'custom_access' => serialize($node->tribune_permissions['custom']),
      'bans' => serialize($node->tribune_bans),
      'public' => $node->tribune_public ? 1 : 0,
      'scrollback' => $node->tribune_scrollback ? 1 : 0,
      'censorship' => serialize($node->tribune_censorship),
    ))
    ->condition('nid', $node->nid)
    ->execute();

  $module = _tribune_module($node);
  $posts = module_invoke($module, 'tribune_update', $node);
}

/**
 * Implements hook_delete().
 */
function tribune_delete($node) {
  db_delete('tribunes')
    ->condition('nid', $node->nid)
    ->execute();

  $module = _tribune_module($node);
  $posts = module_invoke($module, 'tribune_delete', $node);
}

/**
 * Implements hook_menu().
 */
function tribune_menu() {
  return array(
    'node/%tribune_menu/tribune-access' => array(
      'type' => MENU_LOCAL_TASK,
      'title' => t('Access'),
      'page callback' => 'tribune_access_page',
      'page arguments' => array(1),
      'access callback' => 'tribune_access',
      'access arguments' => array('change permissions', 1),
      'file' => 'tribune.access.inc',
    ),
    'node/%tribune_menu/tribune-access/unban/%' => array(
      'type' => MENU_CALLBACK,
      'title' => t('Access'),
      'page callback' => 'tribune_access_unban',
      'page arguments' => array(1, 4),
      'access callback' => 'tribune_access',
      'access arguments' => array('change permissions', 1),
      'file' => 'tribune.access.inc',
    ),
    'node/%tribune_menu/tribune.rss' => array(
      'type' => MENU_CALLBACK,
      'delivery callback' => 'tribune_deliver_xml',
      'page callback' => 'tribune_rss',
      'page arguments' => array(1),
      'access callback' => 'tribune_access',
      'access arguments' => array('read tribune', 1),
      'file' => 'tribune.feeds.inc',
    ),
    'node/%tribune_menu/xml' => array(
      'type' => MENU_CALLBACK,
      'delivery callback' => 'tribune_deliver_xml',
      'page callback' => 'tribune_xml',
      'page arguments' => array(1),
      'access callback' => 'tribune_access',
      'access arguments' => array('read tribune', 1),
      'file' => 'tribune.feeds.inc',
    ),
    'node/%tribune_menu/tsv' => array(
      'type' => MENU_CALLBACK,
      'delivery callback' => 'tribune_deliver_tsv',
      'page callback' => 'tribune_tsv',
      'page arguments' => array(1),
      'access callback' => 'tribune_access',
      'access arguments' => array('read tribune', 1),
      'file' => 'tribune.feeds.inc',
    ),
    'node/%tribune_menu/config.xml' => array(
      'type' => MENU_CALLBACK,
      'delivery callback' => 'tribune_deliver_xml',
      'page callback' => 'tribune_config',
      'page arguments' => array(1),
      'access callback' => 'tribune_access',
      'access arguments' => array('read tribune', 1),
      'file' => 'tribune.feeds.inc',
    ),
    'node/%tribune_menu/json' => array(
      'type' => MENU_CALLBACK,
      'page callback' => 'tribune_json_posts',
      'theme callback' => 'ajax_base_page_theme',
      'page arguments' => array(1),
      'access callback' => 'tribune_access',
      'access arguments' => array('read tribune', 1),
      'file' => 'tribune.feeds.inc',
    ),
    'node/%tribune_menu/history.json' => array(
      'type' => MENU_CALLBACK,
      'page callback' => 'tribune_json_posts_history',
      'theme callback' => 'ajax_base_page_theme',
      'page arguments' => array(1),
      'access callback' => 'tribune_access',
      'access arguments' => array('read tribune', 1),
      'file' => 'tribune.feeds.inc',
    ),
    'node/%tribune_menu/reference-search' => array(
      'type' => MENU_CALLBACK,
      'page callback' => 'tribune_json_reference_search',
      'theme callback' => 'ajax_base_page_theme',
      'page arguments' => array(1),
      'access callback' => 'tribune_access',
      'access arguments' => array('read tribune', 1),
    ),
    'node/%tribune_menu/post' => array(
      'type' => MENU_CALLBACK,
      'page callback' => 'tribune_post_from_client',
      'page arguments' => array(1),
      'access callback' => 'tribune_access',
      'access arguments' => array('post in tribune', 1),
    ),
    'node/%tribune_menu/control/%' => array(
      'type' => MENU_CALLBACK,
      'page callback' => 'tribune_control',
      'page arguments' => array(1, 3),
      'access callback' => 'tribune_access',
      'access arguments' => array('moderate tribune', 1),
    ),
    'admin/config/tribune' => array(
      'title' => 'Tribune',
      'page callback' => 'system_admin_menu_block_page',
      'access arguments' => array('access administration pages'),
      'file' => 'system.admin.inc',
      'file path' => drupal_get_path('module', 'system'),
      'position' => 'right',
    ),
    'admin/config/tribune/global' => array(
      'title' => 'Global tribune settings',
      'description' => 'These settings apply to all tribunes.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('tribune_global_settings_page'),
      'access arguments' => array('access administration pages'),
    ),
  );
}

/**
 * Ajax callback for controling several aspects of a tribune
 * for moderators
 */
function tribune_control($tribune, $token) {
  if (drupal_valid_token($token)) {
    if (isset($_REQUEST['delete'])) {
      $info = tribune_info($tribune);
      if (tribune_access('moderate tribune', $tribune) and $info['moderated']) {
        $post_id = $_REQUEST['delete'];
        $module = _tribune_module($tribune);
        module_invoke($module, 'tribune_delete_post', $tribune, $post_id);
      }
    }
    if (isset($_REQUEST['ban'])) {
      $post_id = $_REQUEST['ban'];
      tribune_ban_user($tribune, $post_id);
    }
    if (isset($_REQUEST['delete-ban'])) {
      $post_id = $_REQUEST['delete-ban'];
      tribune_ban_user($tribune, $post_id);
      $module = _tribune_module($tribune);
      module_invoke($module, 'tribune_delete_all_user_posts', $tribune, $post_id);
    }
  }
}

function tribune_ban_user($tribune, $post_id) {
  $info = tribune_info($tribune);
  if (tribune_access('moderate tribune', $tribune) and $info['moderated']) {
    $module = _tribune_module($tribune);
    $implements = module_implements('tribune_post_info');
    if (in_array($module, $implements)) {
      $post = module_invoke($module, 'tribune_post_info', $tribune, $post_id);

      $ua = !empty($post['ua']) ? $post['ua'] : (!empty($post['info']) ? $post['info'] : '');
      $ip = !empty($post['ip']) ? $post['ip'] : '';

      if ($ua or $ip) {
        $ban = array(
          'ip' => $ip,
          'ua' => $ua,
        );
        $tribune->tribune_bans[] = $ban;
        tribune_update($tribune);

        module_invoke_all('tribune_ban', $tribune, $ban);
      }
    }
  }
}

/**
 * Access callback for tribune permissions
 */
function tribune_access($permission, $tribune, $user = NULL) {
  if ($user === NULL) {
    global $user;
  }

  if ($user->uid != 1 and tribune_user_is_banned($tribune)) {
    return FALSE;
  }

  if (!user_access('access content', $user)) {
    return FALSE;
  }

  switch ($permission) {
    case 'change permissions':
      return $tribune->uid and $tribune->uid == $user->uid;
    case 'read tribune':
      if ($tribune->uid and $tribune->uid == $user->uid) {
        return true;
      } else if (isset($tribune->tribune_permissions['custom'][$user->uid])) {
        $perms = $tribune->tribune_permissions['custom'][$user->uid];
        return !$perms['banned'] && $perms['read'];
      } else if ($user->uid == 0) {
        return in_array($tribune->tribune_permissions['read'], array('all'));
      } else {
        return in_array($tribune->tribune_permissions['read'], array('all', 'registered'));
      }
    case 'post in tribune':
      if ($tribune->uid and $tribune->uid == $user->uid) {
        return true;
      } else if (isset($tribune->tribune_permissions['custom'][$user->uid])) {
        $perms = $tribune->tribune_permissions['custom'][$user->uid];
        return !$perms['banned'] && $perms['write'];
      } else if ($user->uid == 0) {
        return in_array($tribune->tribune_permissions['write'], array('all'));
      } else {
        return in_array($tribune->tribune_permissions['write'], array('all', 'registered'));
      }
    case 'moderate tribune':
      $info = tribune_info($tribune);
      if ($info and $info['moderated']) {
        if ($tribune->uid and $tribune->uid == $user->uid) {
          return true;
        } else if (user_access('moderate all tribunes')) {
          return true;
        } else if (isset($tribune->tribune_permissions['custom'][$user->uid])) {
          $perms = $tribune->tribune_permissions['custom'][$user->uid];
          return !$perms['banned'] && $perms['mod'];
        }
      }
    default:
      return FALSE;
  }
}

/**
 * Sends a post matching a clock in JSON format
 */
function tribune_json_reference_search($tribune) {
  $timestamp = $_REQUEST['timestamp'];
  $post_id = $_REQUEST['from'];

  $module = _tribune_module($tribune);
  $result = module_invoke($module, 'tribune_reference', $tribune, $timestamp, $post_id);

  $posts = array();
  if ($result) foreach ($result as $post) {
    if ($post['moderated']) {
      $posts['moderated'][] = $post['id'];
    } else {
      $posts['posts'][$post['id']] = theme('tribune_post', array('post' => $post, 'node' => $tribune));
    }
  }

  drupal_json_output($posts);
}

/**
 * Returns information on a trbune
 */
function tribune_info($node) {
  if (!isset($node->tribune_info)) {
    $module = _tribune_module($node);
    $info = module_invoke($module, 'tribune_info', $node);

    if (!$info) {
      $info = array();
    }

    $node->tribune_info = $info + array(
      'title' => $node->title,
      'machine_name' => preg_replace('/[^a-z-0-9]/', '_', strtolower($node->title)),
      'max_length' => '256',
      'reload_rate' => 30,
      'url' => url('node/' . $node->nid, array('absolute' => TRUE)),
      'moderated' => FALSE,
      'history' => FALSE,
    );
  }

  return $node->tribune_info;
}

/**
 * Almost the same as format_xml_elements() except this one doesn't pass values through check_plain().
 * It also ignores keys beginning with '#' so they can be used to pass extra information.
 */
function _tribune_format_xml_elements($array) {
  $output = '';
  foreach ($array as $key => $value) {
    if (is_numeric($key)) {
      if ($value['key']) {
        $output .= ' <' . $value['key'];
        if (isset($value['attributes']) && is_array($value['attributes'])) {
          $output .= drupal_attributes($value['attributes']);
        }

        if (isset($value['value']) && $value['value'] != '') {
          $output .= '>' . (is_array($value['value']) ? _tribune_format_xml_elements($value['value']) : $value['value']) . '</' . $value['key'] . ">\n";
        }
        else {
          $output .= " />\n";
        }
      }
    }
    else if ($key[0] != '#') {
      $output .= ' <' . $key . '>' . (is_array($value) ? _tribune_format_xml_elements($value) : $value) . "</$key>\n";
    }
  }
  return $output;
}

/**
 * Sends a tab-separated document
 */
function tribune_deliver_tsv($tsv) {
  drupal_add_http_header('Content-Type', 'text/tsv; charset=utf-8');
  print $tsv;
}

/**
 * Sends an XML formatted document
 */
function tribune_deliver_xml($xml) {
  drupal_add_http_header('Content-Type', 'text/xml');
  printf("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");
  print $xml;
}

/**
 * Returns form elements for use in tribune settings forms.
 */
function tribune_type_form($form, $form_state) {
  return $form['tribune']['settings'];
}

/**
 * Helper for building the type-specific settings form.
 */
function _tribune_type_form($form, $form_state, $module, $node) {
  return module_invoke($module, 'tribune_form', $node, $form_state);
}

/**
 * Returns the module that handles a tribune type.
 *
 * @param $type Can be either a "tribune_type" or a node object.
 * @return Name of the module that handles the given type.
 */
function _tribune_module($type) {
  if (is_object($type)) {
    $type = $type->tribune_type;
  }
  $types = tribune_types();

  return isset($types[$type]['module']) ? $types[$type]['module'] : NULL;
}

/**
 * Handles menu wildcards
 */
function tribune_menu_load($nid) {
  $node = node_load($nid);

  return $node && $node->type == 'tribune' ? $node : FALSE;
}

/**
  * Reduce an user agent to a smaller yet still meaningful string
  * Simple regular expressions
  */
function tribune_reduce_info($info, $length = 15) {
  $replacements = array(
    "Mozilla/5.0.*Linux.*Firefox/([0-9]\.[0-9]).*" => "FF$1/Lnx",
    "Mozilla/5.0.*OS X.*Firefox/([0-9]\.[0-9]).*" => "FF$1/OSX",
    "Mozilla/5.0.*NT 5.1.*Firefox/([0-9]\.[0-9]).*" => "FF$1/WinXP",
    "Mozilla/5.0.*Windows.*Firefox/([0-9]\.[0-9]).*" => "FF$1/Win",
    "Mozilla/5.0.* Gecko/.* ([\pL]*)/([0-9\.]*).*" => "$1$2",
    "Mozilla/5.0.*Linux.*rv:([0-9\.])+.*" => "Moz$1/Lnx",
    "Mozilla/5.0.*OS X.*rv:([0-9\.])+.*" => "Moz$1/OSX",
    "Mozilla/5.0.*NT 5.1.*rv:([0-9\.])+.*" => "Moz$1/WinXP",
    "Mozilla/5.0.*Windows.*rv:([0-9\.])+.*" => "Moz$1/Win",
    "Opera/([0-9\.]+).*Linux.*" => "Op$1/Linux",
    "Opera/([0-9\.]+).*OS X.*" => "Op$1/OSX",
    "Opera/([0-9\.]+).*NT 5.1.*" => "Op$1/WinXP",
    "Opera/([0-9\.]+).*Windows.*" => "Op$1/Win",
    "py[Cc]\w*[/ ]?([0-9]\.[0-9]+\w*).*" => "pycc$1",
    "wm[Cc]\w*[/ ]?([0-9]\.[0-9]+\w*).*" => "wmcc$1",
    "[Cc]\#oin[Cc]\#oin[/ ]?([0-9\.]+).*" => "C#C#$1",
    "Mozilla/4.0.*MSIE ([0-9\.]+).*NT 5.1.*" => "IE$1/WinXP",
    "Mozilla/4.0.*MSIE ([0-9\.]+).*NT 6.0.*" => "IE$1/Vista",
    "Mozilla/4.0.*MSIE ([0-9\.]+).*NT 6.1.*" => "IE$1/Win7",
    "Mozilla/4.0.*MSIE ([0-9\.]+).*NT ([0-9\.]+).*" => "IE$1/NT$2",
    "Mozilla/4.0.*MSIE ([0-9\.]+).*" => "IE$1/Win",
    "Mozilla/5.0.*MSIE ([0-9\.]+).*NT 5.1.*" => "IE$1/WinXP",
    "Mozilla/5.0.*MSIE ([0-9\.]+).*NT 6.0.*" => "IE$1/Vista",
    "Mozilla/5.0.*MSIE ([0-9\.]+).*NT 6.1.*" => "IE$1/Win7",
    "Mozilla/5.0.*MSIE ([0-9\.]+).*NT ([0-9\.]+).*" => "IE$1/NT$2",
    "Mozilla/5.0.*MSIE ([0-9\.]+).*" => "IE$1/Win",
    "Mozilla/5.0.*OS X.*Version/([0-9\.]+).*Safari.*" => "Saf$1/OSX",
    "Mozilla/5.0.*NT 5.1.*Version/([0-9\.]+).*Safari.*" => "Saf$1/WinXP",
    "Mozilla/5.0.*Windows.*Version/([0-9\.]+).*Safari.*" => "Saf$1/Win",
    "Mozilla/5.0.*PPC.*OS X.*Safari.*" => "Saf/OSXPPC",
    "Mozilla/5.0.*Intel.*OS X.*Safari.*" => "Saf/OSXIntel",
    "Mozilla/5.0.*Intel.*OS X.*Safari.*" => "Saf/OSXIntel",
    "Konqueror.*KHTML/([0-9\.]+).*" => "Konq$1/Lnx",
    "Mozilla/5.1.* Gecko/20060425 SUSE/1.5.0.3-7 Firefox/1.5.0.3.*" => "hv3/Lnx",
    ".*Linux.*Chrome/([0-9]+\.[0-9]+).*" => "Chrome$1/Lnx",
    ".*Win.*Chrome/([0-9]+\.[0-9]+).*" => "Chrome$1/Win",
  );

  $changed = FALSE;

  foreach ($replacements as $pattern => $replacement) {
    $pattern = str_replace('@', '\@', $pattern);
    $new_info = preg_replace("@". $pattern ."@u", $replacement, $info);

    if ($new_info != $info) {
      $changed = TRUE;
      $info = $new_info;
    }
  }

  if (!$changed) {
    $info = html_entity_decode($info, ENT_QUOTES, "UTF-8");
    $info = htmlspecialchars(substr($info, 0, $length));
  }

  return trim($info);
}

function tribune_static_backend($node, $type = 'json') {
  $dir = 'public://tribune';

  if (file_prepare_directory($dir, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS)) {
    return $dir . '/' . $node->nid . '.' . $type;
  } else {
    return FALSE;
  }
}

function tribune_cache_backend($node) {
  if ($path = tribune_static_backend($node, 'json')) {
    module_load_include('inc', 'tribune', 'tribune.feeds');
    $json = tribune_json_posts($node, 0, FALSE);
    file_put_contents($path, $json);
  }

  if ($path = tribune_static_backend($node, 'xml')) {
    module_load_include('inc', 'tribune', 'tribune.feeds');
    $xml = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" . tribune_xml($node, 0);
    file_put_contents($path, $xml);
  }

  if ($path = tribune_static_backend($node, 'tsv')) {
    module_load_include('inc', 'tribune', 'tribune.feeds');
    $tsv = tribune_tsv($node, 0);
    file_put_contents($path, $tsv);
  }
}

function tribune_global_settings_page() {
  $stylesheets = array(
    'none' => t('None'),
    'basic' => t('Basic'),
    'light' => t('Light'),
    'dark' => t('Dark'),
  );

  $form = array(
    'tribune_stylesheet' => array(
      '#title' => t('Stylesheet'),
      '#description' => t('A few stylesheets are provided to match most themes, but if none of these fit your theme, your best bet is to choose the "basic" stylesheet as a base, and then adapt your theme.'),
      '#type' => 'radios',
      '#options' => $stylesheets,
      '#default_value' => variable_get('tribune_stylesheet', 'light'),
      '#required' => TRUE,
    ),
  );
  return system_settings_form($form);
}

