<?php

/**
 * Implements hook_tribune_form().
 */
function tribune_pyrolyse_tribune_form($node, $form_state) {
  if ((!empty($node->tribune_type) and $node->tribune_type == 'local')
      or (!empty($form_state['values']['tribune_type']) and $form_state['values']['tribune_type'] == 'local')) {
    $default_value = '';
    if (!empty($node->nid)) {
      $default_value = variable_get('tribune_pyrolyse_api_key_' . $node->nid, '');
    }

    return array(
      'tribune_pyrolyse_details' => array(
        '#weight' => 10,
        '#type' => 'fieldset',
        '#title' => t('Pyroly.se'),
        '#description' => t('Enable push notifications for this tribune using Pyroly.se <a href="http://pyroly.se">service</a>.'),

        'tribune_pyrolyse_api_key' => array(
          '#type' => 'textfield',
          '#title' => t('Pyroly.se API key'),
          '#default_value' => $default_value,
        ),
      ),
    );
  } else {
    return array();
  }
}

/**
 * Implements hook_node_update().
 */
function tribune_pyrolyse_node_update($node) {
  if ($node->type == 'tribune' and isset($node->tribune_pyrolyse_api_key)) {
    variable_set('tribune_pyrolyse_api_key_' . $node->nid, $node->tribune_pyrolyse_api_key);
  }
}

/**
 * Implements hook_node_insert().
 */
function tribune_pyrolyse_node_insert($node) {
  if ($node->type == 'tribune' and isset($node->tribune_pyrolyse_api_key)) {
    variable_set('tribune_pyrolyse_api_key_' . $node->nid, $node->tribune_pyrolyse_api_key);
  }
}

/**
 * Implements hook_node_delete().
 */
function tribune_pyrolyse_node_delete($node) {
  if ($node->type == 'tribune') {
    variable_del('tribune_pyrolyse_api_key_' . $node->nid);
  }
}

/**
 * Implements hook_menu().
 */
function tribune_pyrolyse_menu() {
  return array(
    'node/%tribune_local_menu/pyrolyse-auth' => array(
      'page callback' => 'tribune_pyrolyse_auth',
      'page arguments' => array(1),
      'access callback' => 'tribune_access',
      'access arguments' => array('read tribune', 1),
      'type' => MENU_CALLBACK,
    ),
  );
}

function tribune_pyrolyse_auth($node) {
  if ($node->tribune_type == 'local'
      and $api_key = variable_get('tribune_pyrolyse_api_key_' . $node->nid, '')) {
    if (!empty($_POST['socket_id'])) {
      $identification = array(
        'ip' => ip_address(),
        'ua' => $_SERVER['HTTP_USER_AGENT'],
      );
      PyrolyseNodejs::joinTribune($api_key, $node, $_POST['socket_id'], $identification);
    }
  }

  exit();
}

function tribune_pyrolyse_access($action) {
  if ($action == 'auth callback') {
    return TRUE;
  }
}

/**
 * Implements hook_tribune_post().
 */
function tribune_pyrolyse_tribune_after_post($node, $post) {
  if ($node->tribune_type == 'local'
    and $api_key = variable_get('tribune_pyrolyse_api_key_' . $node->nid, '')) {
    $post_html = theme('tribune_post', array('post' => $post, 'node' => $node));

    $message = (object) array(
      'data' => (object) array(
        'post_html' => $post_html,
        'post_id' => $post['post_id'],
        'tribune' => $node->nid,
      ),
    );

    PyrolyseNodejs::sendMessage($api_key, $node, $message);
  }
}

/**
 * Implements hook_tribune_ban().
 */
function tribune_pyrolyse_tribune_ban($node, $ban) {
  // We just need to kick the user here, since he will not be
  // able to authentify back when trying to join again the tribune.
  if ($node->tribune_type == 'local'
    and $api_key = variable_get('tribune_pyrolyse_api_key_' . $node->nid, '')) {
    PyrolyseNodejs::kickUser($api_key, $node, $ban);
  }
}

/**
 * Implements hook_tribune_deleted_post().
 */
function tribune_pyrolyse_tribune_deleted_post($node, $post_id) {
  // We just need to kick the user here, since he will not be
  // able to authentify back when trying to join again the tribune.
  if ($node->tribune_type == 'local'
    and $api_key = variable_get('tribune_pyrolyse_api_key_' . $node->nid, '')) {
    PyrolyseNodejs::deletePost($api_key, $node, $post_id);
  }
}

/**
 * Implements hook_node_view().
 */
function tribune_pyrolyse_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'tribune'
    and $node->tribune_type == 'local'
    and $api_key = variable_get('tribune_pyrolyse_api_key_' . $node->nid, '')) {
    drupal_add_js(drupal_get_path('module', 'tribune_pyrolyse') . '/socket.io.js', array('weight' => 9));
    drupal_add_js(drupal_get_path('module', 'tribune_pyrolyse') . '/tribune_pyrolyse.js', array('weight' => 10));

    drupal_add_js(array(
      'tribune' => array(
        'tribune-' . $node->nid => array(
          'pyrolyse' => array(
            'auth_url' => url('node/' . $node->nid . '/pyrolyse-auth', array('absolute' => TRUE)),
            'socket_server' => PyrolyseNodejs::$baseUrl,
          ),
        ),
      ),
    ), 'setting');
  }
}

/**
 * Implements hook_block_view_alter().
 */
function tribune_pyrolyse_block_view_alter(&$data, $block) {
  if ($block->module == 'tribune_block') {
    $nid = str_replace('tribune-', '', $block->delta);
    if ($node = node_load($nid)
      and $node->tribune_type == 'local'
      and $api_key = variable_get('tribune_pyrolyse_api_key_' . $node->nid, '')) {
      drupal_add_js(drupal_get_path('module', 'tribune_pyrolyse') . '/socket.io.js', array('weight' => 9));
      drupal_add_js(drupal_get_path('module', 'tribune_pyrolyse') . '/tribune_pyrolyse.js', array('weight' => 10));

      drupal_add_js(array(
        'tribune' => array(
          'tribune-' . $node->nid => array(
            'pyrolyse' => array(
              'auth_url' => url('node/' . $node->nid . '/pyrolyse-auth', array('absolute' => TRUE)),
              'socket_server' => PyrolyseNodejs::$baseUrl,
            ),
          ),
        ),
      ), 'setting');
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 * Reorders module so that tribune_pyrolyse is last
 */
function tribune_pyrolyse_module_implements_alter(&$module_list, $context) {
  if ($context == 'tribune_after_post') {
    $pyrolyse = $module_list['tribune_pyrolyse'];
    unset($module_list['tribune_pyrolyse']);
    $module_list['tribune_pyrolyse'] = $pyrolyse;
  }
}

/**
 * Returns an id that should be unique to a tribune. We can't really
 * use url() as the same site could be accessed from several different
 * urls, so the (create time, nid) couple should be fairly unique among
 * the tribunes using the same API key (and thus belonging to the same
 * admin).
 */
function tribune_pyrolyse_tribune_id($tribune) {
  return md5($tribune->created . $tribune->nid);
}

/**
 * Comes more or less directly from the Nodejs module (obviously).
 */
class PyrolyseNodejs {
  public static $baseUrl = 'https://pyroly.se';
  public static $headers = array(
    'Content-Type' => 'application/json',
  );

  public static function sendMessage($key, $tribune, StdClass $message) {
    $options = array(
      'method' => 'POST',
      'data' => drupal_json_encode($message),
      'headers' => self::$headers,
    );
    $tribune_id = tribune_pyrolyse_tribune_id($tribune);
    return drupal_http_request(self::$baseUrl . '/tribune/' . $key . '/' . $tribune_id . '/message', $options);
  }

  public static function joinTribune($key, $tribune, $socket_id, $identification = array()) {
    $options = array(
      'method' => 'POST',
      'data' => drupal_json_encode(array(
        'socket_id' => $socket_id,
        'identification' => $identification,
      )),
      'headers' => self::$headers,
    );
    $tribune_id = tribune_pyrolyse_tribune_id($tribune);
    return drupal_http_request(self::$baseUrl . '/tribune/' . $key . '/' . $tribune_id . '/join', $options);
  }

  public static function kickUser($key, $tribune, $identification = array()) {
    $options = array(
      'method' => 'POST',
      'data' => drupal_json_encode(array(
        'identification' => $identification,
      )),
      'headers' => self::$headers,
    );
    $tribune_id = tribune_pyrolyse_tribune_id($tribune);
    return drupal_http_request(self::$baseUrl . '/tribune/' . $key . '/' . $tribune_id . '/kick', $options);
  }

  public static function deletePost($key, $tribune, $post_id) {
    $options = array(
      'method' => 'POST',
      'data' => drupal_json_encode(array(
        'tribune_id' => $tribune->nid,
        'post_id' => $post_id,
      )),
      'headers' => self::$headers,
    );
    $tribune_id = tribune_pyrolyse_tribune_id($tribune);
    return drupal_http_request(self::$baseUrl . '/tribune/' . $key . '/' . $tribune_id . '/delete-post', $options);
  }
}
