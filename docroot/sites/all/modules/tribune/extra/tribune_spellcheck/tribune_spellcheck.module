<?php

/**
 * Implements hook_tribune_post_alter().
 */
function tribune_spellcheck_tribune_post_alter($node, &$post) {
  drupal_add_css(drupal_get_path('module', 'tribune_spellcheck') . '/tribune_spellcheck.css');

  $spellcheck = variable_get('tribune_spellcheck_' . $node->nid, 'NULL');

  if ($spellcheck and $spellcheck != 'NULL' and function_exists('enchant_broker_init')) {
    $newtext = '';

    $r = enchant_broker_init();
    if ($d = enchant_broker_request_dict($r, $spellcheck)) {
      $array = preg_split('/( |[:;.,!?] )/', $post['text'], NULL, PREG_SPLIT_DELIM_CAPTURE);
      foreach ($array as $string) {
        if ($string != 'url' and preg_match('/^\p{Ll}[\pL]{1,}$/ui', trim($string)) and !($wordcorrect = enchant_dict_check($d, $string))) {

          drupal_add_js(drupal_get_path('module', 'tribune_spellcheck') . '/tribune_spellcheck.js');

          $suggestions = enchant_dict_suggest($d, $string);
          if (!is_array($suggestions)) {
            $suggestions = array();
          }
          $newtext .= '<span class="tribune-spellcheck-error" title="' . implode(', ', $suggestions) . '">' . $string . '</span>';
        } else {
          $newtext .= $string;
        }
      }
    }
    enchant_broker_free_dict($d);
    enchant_broker_free($r);

    $post['text'] = $newtext;
  }
}

/**
 * Implements hook_tribune_form().
 */
function tribune_spellcheck_tribune_form($node, $form_state) {
  $default_value = 'NULL';
  if (!empty($node->nid)) {
    $default_value = variable_get('tribune_spellcheck_' . $node->nid, 'NULL');
  }

  $lang = array();
  if (function_exists('enchant_broker_init')) {
    $r = enchant_broker_init();
    $bprovides = enchant_broker_describe($r);
    $dicts = enchant_broker_list_dicts($r);

    include_once DRUPAL_ROOT . '/includes/iso.inc';
    $languages = _locale_get_predefined_list();
    $countries = country_get_list();

    foreach ($dicts as $dict) {
      $tag = $dict['lang_tag'];

      $parts = explode('_', $tag);
      $title = t($languages[$parts[0]][0]);
      if (isset($parts[1])) {
        $title .= ' (' . $countries[$parts[1]] . ')';
      }

      $lang[$tag] = $title;
      natsort($lang);
    }
    enchant_broker_free($r);
    $lang = array_reverse($lang);
    $lang['NULL'] = t('Disabled');
    $lang = array_reverse($lang);
  } else {
    $lang = array(
      'NULL' => t('Disabled (Enchant not detected on this server)'),
    );
  }

  return array(
    'tribune_spellcheck_details' => array(
      '#weight' => 10,
      '#type' => 'fieldset',
      '#title' => t('Spellchecking'),
      '#description' => t('Displays a red underline under badly spelled words in this tribune.'),

      'tribune_spellcheck' => array(
        '#type' => 'select',
        '#title' => t('Language'),
        '#default_value' => $default_value,
        '#options' => $lang,
      ),
    ),
  );
}

/**
 * Implements hook_node_update().
 */
function tribune_spellcheck_node_update($node) {
  if ($node->type == 'tribune' and isset($node->tribune_spellcheck)) {
    variable_set('tribune_spellcheck_' . $node->nid, $node->tribune_spellcheck);
  }
}

/**
 * Implements hook_node_insert().
 */
function tribune_spellcheck_node_insert($node) {
  if ($node->type == 'tribune' and isset($node->tribune_spellcheck)) {
    variable_set('tribune_spellcheck_' . $node->nid, $node->tribune_spellcheck);
  }
}

/**
 * Implements hook_node_delete().
 */
function tribune_spellcheck_node_delete($node) {
  if ($node->type == 'tribune') {
    variable_del('tribune_spellcheck_' . $node->nid);
  }
}
