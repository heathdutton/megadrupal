<?php

/**
 * @file
 * i18n_pc module routines.
 */

/**
 * Implements hook_ctools_plugin_post_alter().
 */
function i18n_pc_ctools_plugin_post_alter(&$plugin, &$info) {

  if ($info['type'] == 'task_handlers' && (!isset($plugin['contextual link']) || $plugin['contextual link'] === FALSE)) {
    $plugin['contextual link'] = 'i18n_pc_contextual_link';
  }
}

/**
 * Callback for changing panel page contextual links.
 */
function i18n_pc_contextual_link(
  $handler = NULL,
  $plugin = NULL,
  $contexts = NULL,
  $args = NULL
) {
  // Disable contextual links when module admin_menu enabled.
  if (module_exists('admin_menu')) {
    return;
  }

  if ($handler == NULL) {
    return ctools_task_handler_default_contextual_link(
      $handler,
      $plugin,
      $contexts,
      $args
    );
  }

  // Links array for contextual links.
  $links = array();

  // Get current system language.
  global $language;
  $default_language = language_default();
  $languages = language_list('language');

  // Get current page.
  $cur_page = page_manager_get_current_page();

  // Get tpid for the current page.
  $tpid = $cur_page['subtask']['subtask']->tpid;
  $pid = $cur_page['subtask']['subtask']->pid;

  if ($tpid != 0 && $tpid != $pid) {
    // Current page has source page defined.
    ctools_include('export');
    $task = ctools_export_load_object(
      'page_manager_pages',
      'conditions',
      array('pid' => $tpid)
    );
    $source_page = array_shift($task);
    $source_page_language = $default_language;
    if ($source_page->language != LANGUAGE_NONE) {
      $source_page_language = $languages[$source_page->language];
    }
    $links[] = array(
      // @todo check if Drupal in subfolder.
      'href' => ($default_language->prefix == '') ? $source_page->path : $default_language->prefix . '/' . $source_page->path,
      'title' => t(
        'Source @name page translation',
        array('@name' => $source_page_language->name)
      ),
      'language' => $source_page_language,
    );
  }

  if ($tpid == 0 || $tpid == $pid) {
    // Current page is source or untranslated.
    ctools_include('export');
    $tasks = ctools_export_load_object(
      'page_manager_pages',
      'conditions',
      array('tpid' => $pid)
    );
    if (!empty($tasks)) {
      // Page has translated pages.
      foreach ($tasks as $l_task) {
        $l_task_language = $default_language;
        if ($l_task->language != LANGUAGE_NONE) {
          $l_task_language = $languages[$l_task->language];
        }
        $links[] = array(
          // @todo check if Drupal in subfolder.
          'href' => $l_task->path,
          'title' => t(
            '@name page translation',
            array('@name' => $l_task_language->name)
          ),
          'language' => $l_task_language,
        );
      }
    }
    else {
      // Page has no translations yes.
      $new_languages = $languages;
      unset($new_languages[$default_language->language]);
      // Populate contextual links with links to create translations popups.
      foreach ($new_languages as $language_key => $new_lang_object) {
        $links[] = array(
          'href' => 'admin/structure/pages/i18n_pc/' . $cur_page['subtask']['name'] . '/' . $new_lang_object->language . '/%ctools_js',
          'title' => t(
            'Add @name translation',
            array('@name' => $new_lang_object->name)
          ),
          'attributes' => array(
            'class' => array(
              'ctools-use-modal',
              'ctools-modal-first-popup-style'
            )
          ),
        );
      }
    }

  }

  $all_links = array_merge(
    $links,
    ctools_task_handler_default_contextual_link(
      $handler,
      $plugin,
      $contexts,
      $args
    )
  );

  return $all_links;
}

/**
 * Implements hook_menu().
 */
function i18n_pc_menu() {
  $items['admin/structure/pages/i18n_pc/%ctools_js'] = array(
    'page arguments' => array(1),
    // @todo add access rule.
    'access callback' => TRUE,
    'page callback' => 'i18n_pc_translation_popup_callback',
    'type' => MENU_CALLBACK,
  );
  $items['admin/structure/pages/i18n_pc/%/%/%'] = array(
    'page arguments' => array(4, 5, 6),
    // @todo add access rule.
    'access callback' => TRUE,
    'page callback' => 'i18n_pc_translation_popup_callback_new',
    'type' => MENU_CALLBACK,
  );
  $items['admin/structure/pages/i18n_pc_redirect/%/%'] = array(
    'page arguments' => array(4, 5),
    // @todo add access rule.
    'access callback' => TRUE,
    'page callback' => 'i18n_pc_translation_redirect',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Popup’s callback function.
 */
function i18n_pc_translation_popup_callback($js = NULL) {

  $popup_content = drupal_render(drupal_get_form('i18n_pc_translation_form'));

  if (!$js) {
    return $popup_content;
  }
  ctools_include('modal');
  ctools_include('ajax');
  ctools_add_js('ajax-responder');
  // Forming a modal window.
  $output = array();
  $output[] = ctools_modal_command_display(
    t('Translate panel page'),
    $popup_content
  );
  print ajax_render($output);
  drupal_exit();
}

/**
 * Popup’s callback function for new translation.
 */
function i18n_pc_translation_popup_callback_new($pname, $lang, $js = NULL) {

  ctools_include('node.pages', 'node', '');
  ctools_include('modal');
  ctools_include('ajax');
  ctools_add_js('ajax-responder');

  $form_state = array(
    'ajax' => TRUE,
    'title' => t(
      'Translate panel page to @lang language',
      array('@lang' => $lang)
    ),
  );
  $form_state['build_info']['args'] = array(
    'pname' => $pname,
    'lang' => $lang,
  );
  if (!$js) {
    print drupal_render(
      drupal_build_form('i18n_pc_translation_form', $form_state)
    );
    drupal_exit();
  }
  $form = ctools_modal_form_wrapper('i18n_pc_translation_form', $form_state);

  print ajax_render($form);
  drupal_exit();
}

/**
 * Implement form for panel page translation.
 */
function i18n_pc_translation_form($form, &$form_state) {
  if (isset($form_state['build_info']['args'])) {
    $pname = isset($form_state['build_info']['args']['pname']) ? $form_state['build_info']['args']['pname'] : NULL;
    $lang = isset($form_state['build_info']['args']['lang']) ? $form_state['build_info']['args']['lang'] : NULL;
  }

  $form['title'] = array(
    '#title' => t('Title'),
    '#type' => 'textfield',
    '#description' => t(
      'The title of the page in Spanish should be brief and comprehensive. It will be used for page URI below.'
    ),
  );
  $form['path'] = array(
    '#description' => t(
      'No leading slash needed. It is automatically filled in per page Title entered above. You can edit it manually'
    ),
    '#type' => 'machine_name',
    '#title' => t('Path URI of the translated page'),
    '#maxlength' => 255,
    '#machine_name' => array(
      'source' => array('title'),
    ),
  );
  $form['url'] = array(
    '#type' => 'hidden',
    // The name of the class is the #id of $form['ajax_button'] with "-url"
    // suffix.
    '#attributes' => array('class' => array('i18n-pc-ajax-submit-url')),
    '#value' => url(
      'admin/structure/pages/i18n_pc_redirect/' . $pname . '/' . $lang
    ),
  );

  $form['submit'] = array(
    '#type' => 'button',
    '#value' => t('Save and view clone for translation'),
    '#attributes' => array('class' => array('ctools-use-modal')),
    '#id' => 'i18n-pc-ajax-submit',
  );
  return $form;
}

/**
 * Clone source page, prepare handlers and redirect to new page.
 *
 * @param string $page_name
 *   Page name - 'name' from pages table.
 * @param string $lang
 *   Language cloning to.
 */
function i18n_pc_translation_redirect($page_name, $lang) {

  $languages = language_list('language');
  $redirect_language = $languages[$lang];
  ctools_include('export');

  $source_page = page_manager_get_page_cache('page-' . $page_name);
  $cloned_page = clone page_manager_page_load($page_name);
  // Language of the source page.
  $source_lang = $cloned_page->language;

  if (!isset($_POST['title']) || !isset($_POST['path'])) {
    return;
  }
  if ($_POST['title'] != '') {
    $cloned_page->admin_title = check_plain($_POST['title']);
  }
  if ($_POST['path'] != '') {
    $cloned_page->path = check_url($_POST['path']);
  }
  $cloned_page->name = $source_page->subtask['name'] . '_' . $lang . '_' . drupal_strtolower(
      drupal_random_key(
        3
      )
    );

  $cloned_page->language = $lang;
  $cloned_page->tpid = $source_page->subtask['subtask']->pid;

  // Make redirect handler for cloned page.
  $cloned_redirect_handler = i18n_pc_init_redirect_handler(
    $cloned_page->name,
    $source_page->subtask['admin path'],
    $cloned_page->name,
    $source_lang
  );

  $source_handlers = $source_page->handlers;
  i18n_pc_init_redirect_handlers(
    $source_handlers,
    $cloned_redirect_handler,
    $lang
  );

  $export = page_manager_page_export($cloned_page, $source_handlers);
  ob_start();
  eval($export);
  ob_end_clean();

  $cache = new stdClass();

  page_manager_page_new_page_cache($page, $cache);
  page_manager_set_page_cache($cache);

  page_manager_save_page_cache($cache);

  // Save source page with modified handlers.

  // Make redirect handler for source page.
  $source_redirect_handler = i18n_pc_init_redirect_handler(
    $source_page->subtask['name'],
    $cloned_page->path,
    $source_page->subtask['name'],
    $lang
  );
  i18n_pc_add_redirect_handlers(
    $source_page,
    $source_redirect_handler,
    $source_lang
  );
  page_manager_set_page_cache($source_page);

  page_manager_save_page_cache($source_page);

  ctools_include('ajax');
  ctools_add_js('ajax-responder');
  $commands = array();
  // $redirect_url = ($redirect_language->prefix == '') ? $cloned_page->path : $redirect_language->prefix . '/' . $cloned_page->path;
  $redirect_url = $cloned_page->path;
  $commands[] = ctools_ajax_command_redirect(
    $redirect_url,
    0,
    array('language' => $redirect_language)
  );
  print ajax_render($commands);
  exit;
}

/**
 * Init new handler.
 *
 * @param $subtask
 *   Subtask name to be attached to.
 * @param $destination
 *   Redirect destination in case of language detected.
 * @param $name
 *   Unique name of the handler.
 * @param string $for_lang
 *   For which language should be access ON.
 *
 * @return \stdClass
 *   Object of the handler to be saved.
 */
function i18n_pc_init_redirect_handler(
  $subtask,
  $destination,
  $name = '',
  $for_lang = 'default'
) {

  // Obtain new unique name in case of already has one in database.
  if ($name == '') {
    $name = truncate_utf8($subtask, 46);
  }
  if (empty($subtask)) {
    $subtask = drupal_strtolower(drupal_random_key());
  }

  // Check if name is already within db, make it unique.
  $random_name = $name;
  if ($name != $subtask) {
    while (db_select('page_manager_handlers', 'p')
      ->fields('p', array('did'))
      ->condition('name', $random_name)
      ->execute()
      ->fetchCol()) {
      $random_name = $name . drupal_strtolower(drupal_random_key());
    }
  }

  $handler = new stdClass();
  $handler->disabled = FALSE; /* Edit this to true to make a default handler disabled initially */
  $handler->api_version = 1;
  $handler->name = drupal_strtolower($random_name);
  $handler->task = 'page';
  $handler->subtask = $subtask;
  $handler->handler = 'http_response';
  $handler->weight = 1;
  $handler->conf = array(
    'title' => 'HTTP response code',
    'contexts' => array(),
    'relationships' => array(),
    'code' => '301',
    'destination' => $destination,
    'name' => 'http_response_code',
    'access' => array(
      'plugins' => array(
        0 => i18n_pc_init_access_language_plugin($for_lang)
      ),
    ),
  );
  $output = array($handler->name => $handler);
  return $output;
}

/**
 * Returns array of access plugin for been applied for specific language.
 *
 * @param string $for_lang
 *   For which language should be access ON.
 * @param array $plugin
 *   Plugin to be processing on.
 *
 * @return array
 *   Array of site_language access plugin.
 */
function i18n_pc_init_access_language_plugin(
  $for_lang = LANGUAGE_NONE,
  &$plugin = array()
) {

  $default_language = variable_get('language_default');
  $languages = language_list('language');

  // Prepopulate array of enabled languages.
  foreach ($languages as $lang_id => $lang_object) {
    $lang[$lang_id] = ($lang_id == $for_lang) ? $lang_id : 0;
  }

  // Deal with default language.
  $lang['default'] = 0;
  if ($for_lang == LANGUAGE_NONE) {
    $lang['default'] = 'default';
    $lang[$default_language->language] = $default_language->language;
  }

  $plugin['name'] = 'site_language';
  $plugin['settings'] = array(
    'language' => $lang
  );
  $plugin['not'] = FALSE;

  return $plugin;
}

/**
 * Adding handler to handlers array. This works for new pages only.
 *
 * @param array $handlers
 *   Handlers array for page been created.
 * @param array $redirect_handler
 *   Array($NAME => handler_object) of the handler been added to handlers array.
 * @param string $for_lang
 *   Language for page to be applied to.
 */
function i18n_pc_init_redirect_handlers(
  &$handlers,
  $redirect_handler,
  $for_lang = LANGUAGE_NONE
) {
  $has_lang_plugin = FALSE;
  $has_redirect_handler = FALSE;
  foreach ($handlers as $handler_name => $handler_object) {
    if ($handler_object->handler == 'http_response') {
      $has_redirect_handler = TRUE;
      break;
    }
  }
  foreach ($handlers as $h_name => &$handler) {
    if ($handler->handler != 'panel_context') {
      continue;
    }
    // Modify already created language plugin.
    foreach ($handler->conf['access']['plugins'] as $p_id => $plugin) {
      if ($plugin['name'] == 'site_language') {
        $has_lang_plugin = TRUE;
        i18n_pc_init_access_language_plugin(
          $for_lang,
          $handler->conf['access']['plugins'][$p_id]
        );
      }
    }
    if (!$has_lang_plugin) {
      $handler->conf['access']['plugins'][] = i18n_pc_init_access_language_plugin(
        $for_lang
      );
    }
  }
  if (!$has_redirect_handler) {
    $handlers = array_merge($handlers, $redirect_handler);
  }
}

/**
 * Adding redirect handler to already stored page in database.
 *
 * @param object $page
 *   Page object from page_manager_get_page_cache().
 * @param array $redirect_handler
 *   Array($NAME => handler_object) of the handler to add to page.
 * @param string $for_lang
 *   Language for page to be applied to.
 */
function i18n_pc_add_redirect_handlers(
  &$page,
  $redirect_handler,
  $for_lang = LANGUAGE_NONE
) {
  $handlers = &$page->handlers;
  $has_lang_plugin = FALSE;
  $has_redirect_handler = FALSE;
  foreach ($handlers as $handler_name => $handler_object) {
    if ($handler_object->handler == 'http_response') {
      $has_redirect_handler = TRUE;
      break;
    }
  }
  foreach ($handlers as $h_name => &$handler) {
    if ($handler->handler != 'panel_context') {
      continue;
    }
    // Modify already created language plugin.
    foreach ($handler->conf['access']['plugins'] as $p_id => $plugin) {
      if ($plugin['name'] == 'site_language') {
        $has_lang_plugin = TRUE;
        i18n_pc_init_access_language_plugin(
          $for_lang,
          $handler->conf['access']['plugins'][$p_id]
        );
      }
    }
    if (!$has_lang_plugin) {
      $handler->conf['access']['plugins'][] = i18n_pc_init_access_language_plugin(
        $for_lang
      );
    }
  }
  if (!$has_redirect_handler) {
    reset($redirect_handler);
    $name = key($redirect_handler);
    page_manager_handler_add_to_page($page, $redirect_handler[$name]);
  }
  // Mark all handlers as changed for ability to get they updated within DB.
  foreach ($page->handler_info as &$handler) {
    $handler['changed'] = PAGE_MANAGER_CHANGED_CACHED;
  }
}

/**
 * Implements hook_admin_menu_output_alter().
 */
function i18n_pc_admin_menu_output_alter(&$content) {
  $content['i18n_pc'] = array(
    '#markup' => '<ul id="i18n_pc_contextual_links" class="dropdown"></ul>',
    '#weight' => 101
  );
}

/**
 * Implements hook_admin_menu_replacements().
 */
function i18n_pc_admin_menu_replacements($complete) {

  // Links array for admin_menu links.
  $links = array();

  // Get current system language.
  global $language;
  $lang = $language->language;
  $default_language = language_default();
  $languages = language_list('language');

  // Get current page.
  $cur_page = page_manager_get_current_page();
  $handler = isset($cur_page['handler']) ? $cur_page['handler'] : NULL;
  // We should follow only when there is a pagemaker page view.
  if ($handler == NULL || $handler->task != 'page') {
    return;
  }

  $plugin = page_manager_get_task_handler($handler->handler);
  $contexts = page_manager_page_get_contexts(
    $cur_page['task'],
    $cur_page['subtask']
  );
  $arguments = page_manager_page_get_arguments(
    $cur_page['task'],
    $cur_page['subtask']
  );

  // Get tpid for the current page.
  $tpid = $cur_page['subtask']['subtask']->tpid;
  $pid = $cur_page['subtask']['subtask']->pid;

  if ($tpid != 0 && $tpid != $pid) {
    // Current page has source page defined.
    ctools_include('export');
    $task = ctools_export_load_object(
      'page_manager_pages',
      'conditions',
      array('pid' => $tpid)
    );
    $source_page = array_shift($task);
    $source_page_language = $default_language;
    if ($source_page->language != LANGUAGE_NONE) {
      $source_page_language = $languages[$source_page->language];
    }
    $links[] = array(
      // @todo check if Drupal in subfolder.
      'href' => ($default_language->prefix == '') ? $source_page->path : $default_language->prefix . '/' . $source_page->path,
      'title' => t(
        'Source @name page translation',
        array('@name' => $source_page_language->name)
      ),
      'language' => $source_page_language,
    );
  }

  if ($tpid == 0 || $tpid == $pid) {
    // Current page is source or untranslated.
    ctools_include('export');
    $tasks = ctools_export_load_object(
      'page_manager_pages',
      'conditions',
      array('tpid' => $pid)
    );
    if (!empty($tasks)) {
      // Page has translated pages.
      foreach ($tasks as $l_task) {
        $l_task_language = $default_language;
        if ($l_task->language != LANGUAGE_NONE) {
          $l_task_language = $languages[$l_task->language];
        }
        $links[] = array(
          // @todo check if Drupal in subfolder.
          'href' => $l_task->path,
          'title' => t(
            '@name page translation',
            array('@name' => $l_task_language->name)
          ),
          'language' => $l_task_language,
        );
      }
    }
    else {
      // Page has no translations yes.
      $new_languages = $languages;
      unset($new_languages[$default_language->language]);
      // Populate contextual links with links to create translations popups.
      foreach ($new_languages as $language_key => $new_lang_object) {
        $links[] = array(
          'href' => 'admin/structure/pages/i18n_pc/' . $cur_page['subtask']['name'] . '/' . $new_lang_object->language . '/%ctools_js',
          'title' => t(
            'Add @name translation',
            array('@name' => $new_lang_object->name)
          ),
          'attributes' => array(
            'class' => array(
              'ctools-use-modal',
              'ctools-modal-first-popup-style'
            )
          ),
        );
      }
    }
  }

  // Provide links from panel page default contextual links.
  $all_links = array_merge(
    $links,
    ctools_task_handler_default_contextual_link(
      $handler,
      $plugin,
      $contexts,
      $arguments
    )
  );

  if (empty($all_links)) {
    return;
  }
  $admin_menu_links['menu_name'] = array(
    '#markup' => l(
      t('Translate'),
      'admin/config/regional/translate/translate',
      array(
        'language' => isset($l_task_language) ? $l_task_language : language_default(
        )
      )
    )
  );
  $top_menu_item = drupal_render($admin_menu_links);
  foreach ($all_links as $id => $item) {
    $menu_links[] = array(
      'data' => l(
        $item['title'],
        $item['href'],
        array(
          'language' => isset($l_task_language) ? $l_task_language : language_default(
          ),
          'attributes' => isset($item['attributes']['class']) ? array(
            'class' => implode(
              ' ',
              $item['attributes']['class']
            )
          ) : array()
        )
      ),
    );
  }
  $dropdown_items = theme_item_list(
    array(
      'items' => $menu_links,
      'title' => '',
      'type' => 'ul',
      'attributes' => array('class' => 'dropdown')
    )
  );

  $items = array();
  $items['ul#i18n_pc_contextual_links'] = '<li class="admin-menu-action">' . $top_menu_item . $dropdown_items . '</li>';
  return $items;
}
