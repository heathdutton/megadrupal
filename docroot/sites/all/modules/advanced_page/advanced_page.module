<?php

/**
 * @file
 * Code for the advanced_page feature.
 */

include_once 'advanced_page.features.inc';

/**
 * Implements hook_ctools_plugin_directory().
 */
function advanced_page_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}

/**
 * Implements hook_permission().
 */
function advanced_page_permission() {
  return array(
    'administer static page' => array(
      'title' => t('Administer Static Page'),
      'description' => t('Configure Static page related settings.'),
    ),
    'view static page list' => array(
      'title' => t('View Statc Page List'),
      'description' => t('View static page list.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function advanced_page_menu() {
  $items = array();

  $items['admin/config/system/advanced-page-manage'] = array(
    'title' => 'Advanced Page',
    'description' => 'Advanced page configurations. Enabled or disable advanced-page functionality.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('advanced_page_settings_form'),
    'access arguments' => array('configure static page'),
    'file' => 'advanced_page.admin.inc',
  );

  $items['advanced-page-manager'] = array(
    'title' => 'List of static pages',
    'description' => 'List of all the nodes with edit and delete links',
    'page callback' => 'page_manager_list',
    'page arguments' => array(1),
    'type' => MENU_CALLBACK,
    'access arguments' => array('view static page list'),
    'file' => 'advanced_page.list.inc',
  );
  return $items;
}

/**
 * Implements hook_page_alter().
 */
function advanced_page_page_alter($page) {
  $node = menu_get_object("node");
  if (isset($node)) {
    switch ($node->type) {
      case "advanced_page":
        // Get the field value in the language,
        // it is supposed to be displayed in.
        $attach_css = field_get_items('node', $node, 'field_advanced_page_attach_css');
        if (isset($attach_css[0]['uri'])) {
          foreach ($attach_css as $array_file) {
            drupal_add_css($array_file['uri'], array("type" => "file"));
          }
        }
        $attach_js = field_get_items('node', $node, 'field_advanced_page_attach_js');
        if (isset($attach_js[0]['uri'])) {
          foreach ($attach_js as $array_file) {
            drupal_add_js($array_file['uri'], array("type" => "file"));
          }
        }

        break;
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function advanced_page_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case "advanced_page_node_form":
      $form['path']['#access'] = variable_get('advanced_page_url', FALSE);
      $form['field_advanced_page_attach_file']['#access'] = variable_get('advanced_page_file_upload_field', FALSE);
      $form['field_advanced_page_attach_js']['#access']    = variable_get('advanced_page_javascript_field', FALSE);
      $form['field_advanced_page_attach_css']['#access']   = variable_get('advanced_page_css_field', FALSE);
      $form['field_advanced_page_url']['#access']          = variable_get('advanced_page_url', FALSE);
      $form['field_advanced_page_aux_content']['#access']  = variable_get('advanced_page_aux_content_field', FALSE);
      if (variable_get('advanced_page_aux_content_field', FALSE) && !variable_get('advanced_page_aux_content_field_title', FALSE)) {
        $field_lang = $form['field_advanced_page_aux_content']['#language'];
        foreach ($form['field_advanced_page_aux_content'][$field_lang] as $delta => &$item) {
          if (is_numeric($delta)) {
            $item['first']['#access'] = FALSE;
          }
        }
      }

      // If this is an upgraded instance of advanced-page,
      // we could have URL aliases that exist in the URL alias table,
      // but don't exist in the field.
      if ($nid = $form['nid']['#value']) {
        if (variable_get('advanced_page_url', FALSE) && !empty($form['field_advanced_page_url'][$form['language']['#value']][0]['value']['#default_value'])) {
          $form['field_advanced_page_url'][$form['language']['#value']][0]['value']['#default_value'] = drupal_get_path_alias('node/' . $nid);
        }
      }

      $form['menu']['#access'] = variable_get('advanced_page_menu', FALSE);
      break;
  }
}

/**
 * Implements hook_node_presave().
 */
function advanced_page_node_presave($node) {
  if ($node->type == "advanced_page") {
    $status_lang = field_language('node', $node, 'field_advanced_page_status');
    // If a advanced_page is created programatically,
    // automatically set the status.
    if (!isset($node->field_advanced_page_status)) {
      $node_options = variable_get('node_options_advanced_page', array('status', 'promote'));
      $node->field_advanced_page_status[$status_lang][0]['value'] = in_array('status', $node_options);
    }
    $node->status = $node->field_advanced_page_status[$status_lang][0]['value'];
  }
}

/**
 * Implements hook_node_insert().
 */
function advanced_page_node_insert($node) {
  if ($node->type == "advanced_page") {
    if (variable_get('advanced_page_url', FALSE)) {
      $url_lang = field_language('node', $node, 'field_advanced_page_url');
      if (!empty($node->field_advanced_page_url[$url_lang][0]['value'])) {
        // Build the connonical URL.
        // Grab the page url entered by user.
        $field_page_url = $node->field_advanced_page_url[$url_lang][0]['value'];
        // Get the clean alias for advanced page.
        $url = _advanced_page_get_node_alias($field_page_url);
        $node->field_advanced_page_url[$url_lang][0]['value'] = $url;

        // Save the path.
        $node->path['pathauto'] = 0;
        $path = array(
          'source' => 'node/' . $node->nid,
          'alias' => $url,
          'language' => $node->language,
        );
        path_save($path);
      }

      // Need to set the original property to avoid errors.
      $node->original = isset($node->original) ? $node->original : NULL;

      // Assign field values and give other module an opportunity to act.
      field_attach_presave('node', $node);
    }
  }
}

/**
 * Implements hook_node_update().
 */
function advanced_page_node_update($node) {
  if ($node->type == "advanced_page") {
    if (variable_get('advanced_page_url', FALSE)) {
      $url_lang = field_language('node', $node, 'field_advanced_page_url');
      if (!empty($node->field_advanced_page_url[$url_lang][0]['value'])) {
        // Build the connonical URL.
        // Grab the page url entered by user.
        $field_page_url = $node->field_advanced_page_url[$url_lang][0]['value'];
        // Get the clean alias for advanced page.
        $url = _advanced_page_get_node_alias($field_page_url);
        $node->field_advanced_page_url[$url_lang][0]['value'] = $url;

        // Save the path.
        $path = array(
          'source' => 'node/' . $node->nid,
          'alias' => $url,
          'language' => $node->language,
        );
        path_save($path);
      }

      // Need to set the original property to avoid errors.
      $node->original = isset($node->original) ? $node->original : NULL;

      // Assign field values and give other module an opportunity to act.
      field_attach_presave('node', $node);
    }
  }
}

/**
 * Helper function to return the url alias.
 */
function _advanced_page_get_node_alias($url) {
  $url = trim($url, '/');
  if ($url_prefix = variable_get('advanced_page_url_alias', '')) {
    $url_prefix = trim($url_prefix, '/') . '/';
    if (strpos($url, $url_prefix) !== 0) {
      $url = $url_prefix . $url;
    }
  }
  return $url;
}
