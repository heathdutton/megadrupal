 <?php
 /**
* @file
* Install and uninstall functions for the Swipe module.
*/

function swipe_photo_gallery_install() {
 
  $t = get_t();

  // Create new taxonomy vocabularies
  $vocabularies = array();

  if (!taxonomy_vocabulary_machine_name_load('gallery_photo_series')) {
    $vocabularies['series'] = array(
      'name'          => 'Photo series albums name',
      'machine_name'  => 'gallery_photo_series',
      'description'   => st('Use keywords to identify photo series.'),
      'module'        => 'taxonomy',
    );
  }

  if (!taxonomy_vocabulary_machine_name_load('gallery_series_covers')) {
    $vocabularies['themes'] = array(
      'name'          => 'Photo series albums cover',
      'machine_name'  => 'gallery_series_covers',
      'description'   => st(''),
      'module'        => 'taxonomy',
    );
  }

  foreach ($vocabularies as $vocabulary) {
    $vocabulary = (object) $vocabulary;
    $status = taxonomy_vocabulary_save($vocabulary);
    // Replacement rule for the messages.
    $t_args = array('%name' => $vocabulary->name);

    if ($status == SAVED_UPDATED) { // update case
      drupal_set_message($t('The taxonomy vocabulary %name has been updated.', $t_args));
    } 
    elseif ($status == SAVED_NEW) { // create case
      drupal_set_message($t('The taxonomy vocabulary %name has been added.', $t_args));
      watchdog('node', 'Added taxonomy vocabulary %name.', $t_args, WATCHDOG_NOTICE, l($t('view'), 'admin/structure/taxonomy')); 
    }  
  } 

  // Define the node type.
  $node_new = array(
    'type'        => 'gallery_photo',
    'name'        => $t('Slide photo'),
    'base'        => 'node_content',
    'has_title'   => TRUE,      
    'description' => $t('This is a gallery photo node type.'),
  );

  $content_type = node_type_set_defaults($node_new); 

  // add peristant variables that control settings
  variable_set('additional_settings__active_tab_gallery_photo', 'edit-menu');
  variable_set('node_preview_gallery_photo', 1);
  variable_set('node_options_gallery_photo', array('status'));
  variable_set('node_submitted_gallery_photo', 0);
  variable_set('menu_options_gallery_photo', array());
  variable_set('menu_parent_gallery_photo', 'main-menu:0');
  variable_set('page_path', 'overview');

  // Create new fields
  $fields = array();
  $instances = array();

  if (!field_info_field('field_slide_photo')) {
    $fields['slide'] = array(
        'field_name'  => 'field_slide_photo', 
        'type'        => 'image', 
    );
    // Create the instance on the bundle.
    $instances['slide'] = array(
      'field_name'  => 'field_slide_photo', 
      'entity_type' => 'node', 
      'label'       => $t('Slide image'), 
      'bundle'      => 'gallery_photo',
      'required'    => TRUE,
      'settings'    => array(),
      'widget'      => array(
          'type' => 'image',
      ), 
    );
  }

  if (!field_info_field('field_slide_weight')) {
    $fields['weight'] = array(
        'field_name'  => 'field_slide_weight', 
        'type'        => 'number_integer', 
    );
    // Create the instance on the bundle.
    $instances['weight'] = array(
      'field_name'  => 'field_slide_weight', 
      'entity_type' => 'node', 
      'label'       => $t('Slide position'), 
      'bundle'      => 'gallery_photo',
      'settings'    => array(),
      'widget'      => array(
          'type' => 'number',
      ), 
    );
  }

  if (!field_info_field('field_tax_series')) {
    $fields['series'] = array(
      'field_name'  => 'field_tax_series',
      'type'        => 'taxonomy_term_reference',
      //'label'       => $t('Series taxonomy term'),
      'label'       => $t('Album'),
      'settings'    => array(
        'allowed_values' => array(
          array(
            'vocabulary'  => 'gallery_photo_series',
            'parent'      => 0
          )
        )
      ),
      'default_formatter' => 'plain',
    );
    // Add the field to the content type as a HTML select box.
    $instances['series'] = array(
      'field_name'  => 'field_tax_series',
      'entity_type' => 'node',
      'bundle'      => 'gallery_photo',
      //'label'       => $t('Series taxonomy term'),
      'label'       => $t('Album'),
      'description' => 'Photo series name (album name).',
      'required'    => TRUE,
      'widget'      => array(
        'type'    => 'taxonomy_autocomplete'
      )
    );
  }

  if (!field_info_field('field_main_slide_position')) {
    $fields['themes'] = array(
      'field_name'  => 'field_main_slide_position',
      'type'        => 'taxonomy_term_reference',
      'label'       => $t('Horizontal position of firsts slides'),
      'description' => $t('Necessary if check FIRST SLIDE'),
      'settings'    => array(
        'allowed_values' => array(
          array(
            'vocabulary'  => 'gallery_series_covers',
            'parent'      => 0
          )
        )
      ),
      'default_formatter' => 'plain',
    );

    // Add the field to the content type as a HTML select box.
    $instances['themes'] = array(
      'field_name'  => 'field_main_slide_position',
      'entity_type' => 'node',
      'bundle'      => 'gallery_photo',
      'label'       => $t('Horizontal position of firsts slides (albums cover)'),
      'description' => $t('Necessary if check FIRST SLIDE'),
//      'required'    => TRUE,
      'widget'      => array(
        'type'    => 'taxonomy_autocomplete'
      )
    );
  }

  if (!field_info_field('field_first_slide')) {
    $fields['first'] = array(
      'field_name'  => 'field_first_slide', 
      'type'        => 'list_boolean', 
      'cardinality' => 1,
      'settings' => array(
        'allowed_values' => array(
          '0' => 'No',
          '1' => 'Yes',
        ),
      ),      
    );
    // Create the instance on the bundle.
    $instances['first'] = array(
      'field_name'  => 'field_first_slide',
      'entity_type' => 'node', 
      'label'       => $t('First slide (Album cover).'), 
      'description' => st('Albums first slide'),
      'bundle'      => 'gallery_photo',
      'required'    => FALSE,
      'widget'      => array(
      'type'        => 'options_onoff',
      'settings'    => array(
        'display_label' => TRUE,
      ),
      ),
      'settings' => array(),      
    );
  }

  foreach ($fields as $field) {
    field_create_field($field);
  }

  foreach ($instances as $instance) {
    field_create_instance($instance);
  }

  // Check if we create content type or update.
  $status = node_type_save($content_type);
  // Replacement rule for the messages.
  $t_args = array('%name' => $content_type->name);
  if ($status == SAVED_UPDATED) { // update case
    drupal_set_message($t('The content type %name has been updated.', $t_args));
  } 
  elseif ($status == SAVED_NEW) { // create case
    drupal_set_message($t('The content type %name has been added.', $t_args));
    watchdog('node', 'Added content type %name.', $t_args, WATCHDOG_NOTICE, l($t('view'), 'admin/structure/types')); 
  }

  //Check jQuery version.
  $jquery = drupal_get_library('system', 'jquery');
  $version = substr($jquery['version'], 0, 3);

  if (($version == '1.5') or ($version == '1.6')) {
    drupal_set_message($t('Your version of jQuery @ver. Please update your version of jQuery to 1.7 or higher.', array('@ver' => $jquery['version'])), 'warning');
  }
  else {
    drupal_set_message($t('jQuery version @ver - OK.', array('@ver' => $jquery['version'])));
  }

} 

function swipe_photo_gallery_schema() {
  $schema['module_settings'] = array(
    'description' => 'swipe photo gallery module settings',
 
    'fields' => array(
      'gallery_id' => array(
        'type' => 'int',
      ),
      'page_name' => array(
        'type'     => 'varchar', 
        'length'   => 32, 
        'not null' => TRUE, 
        'default'  => 'gallery'
      ),
    ),
   'primary key' => array('gallery_id'),
  );

  return $schema;
}

function swipe_photo_gallery_uninstall() {
 
  $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
  $result = db_query($sql, array(':type' => 'gallery_photo'));
  $nids = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }
  // Delete all the nodes at once
  node_delete_multiple($nids);

  field_delete_field('field_slide_photo');
  field_delete_field('field_slide_weight');
  field_delete_field('field_tax_series');
  field_delete_field('field_main_slide_position');

  $instances = field_info_instances('node', 'gallery_photo');
  foreach ($instances as $instance_name => $instance) {
    field_delete_instance($instance);
  }

  // Delete our content type
  node_type_delete('gallery_photo');

  // Delete our taxonomy vocabularies
  $vids['series'] = db_query("SELECT vid FROM {taxonomy_vocabulary} WHERE machine_name = 'gallery_photo_series'")->fetchField();
  $vids['themes'] = db_query("SELECT vid FROM {taxonomy_vocabulary} WHERE machine_name = 'gallery_series_covers'")->fetchField();
  foreach ($vids as $vid) {
    taxonomy_vocabulary_delete($vid);
  }  

}
