<?php
/**
* @file
* Create page with slide photo gallery and provides link to main menu.
*/

/**
 * Implements hook_menu().
 */
function swipe_photo_gallery_menu() {

  $page_path = variable_get('page_path', 'overview');

  $items[$page_path] = array(
    'title'             => variable_get('page_name', 'GallerY'),
    'page callback'     => 'swipe_photo_gallery_modal_page',
    'access arguments'  => array('access content'),
    'type'              =>  MENU_SUGGESTED_ITEM,
    'menu_name'         => 'main-menu',
    'options'           => array(
      'attributes'  => array(
        'class' => 'swipe-photo-gallery-popup',
        ),
      ),
  );

  $items['admin/config/media/swipe_photo_gallery'] = array(
    'title' => 'Swipe photo gallery', 
    'description' => 'Configure module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('swipe_photo_gallery_settings_form'),
    'access arguments' => array('administer site configuration'),
  );

  return $items;
}

/**
 * Page callback
 */
function swipe_photo_gallery_modal_page() {

  $my_settings = array(
    'page_path' => variable_get('page_path', 'overview')
  );
  drupal_add_js(array('myModule' => $my_settings), 'setting');

  if (isset($_POST["nid"]) && isset($_POST["series"])) {
   
  } 
  else {
    if (isset($_GET['ajax']) && $_GET['ajax']) {

      $query = new EntityFieldQuery;
      $result = $query
        ->entityCondition('entity_type', 'node')
        ->propertyCondition('status', 1)
        ->fieldCondition('field_first_slide', 'value', 1, '=')
        ->fieldOrderBy('field_main_slide_position', 'tid', 'ASC')
        ->execute();

      $nodes = node_load_multiple(array_keys($result['node']));
      $main_nids = array_keys($nodes);
      $node = $nodes[$main_nids[0]];

    } 
    else {
      return '<div id="slideshow-page"></div>';
    }
    
    if (isset($node) && isset($main_nids)) {
      if ($main_nids[1] == NULL) {
        $main_nids[1] = $main_nids[0];
      }

      display_slide($node, $main_nids[1], $main_nids[sizeof($main_nids)-1], $main_nids, $nodes);
    } 
  } 
}

/**
 * Function create slide 
 *
 * @param $node
 *   curent node 
 * @param $next_nid
 *   nid of next node 
 * @param $prev_nid
 *   nid of previous node  
 * @param $main_nids
 *   array contain nids of nodes then checked as main_slide in each theme
 * @param $nodes
 *   nodes with nids from $main_nids
 *
 * @return 
 *   new vocabulary termin tid.
 */
function display_slide($node, $next_nid, $prev_nid, $main_nids=NULL, $nodes) {

  drupal_add_js(array('duration' => 700), 'setting');

  if ($main_nids != NULL) {
    $main_slides_html = '<div class="main-nids" >';
    
    foreach ($nodes as $n_key => $n_series) {
      $html = '';        
      $series = field_get_items('node', $n_series, 'field_tax_series');
      $series_output = field_view_value('node', $n_series, 'field_tax_series', $series[0], array(
        'type' => 'plain',
        'label' => 'hidden',
      ));
  
      $nids = get_tax_nids($series_output['#title'], "gallery_photo_series");

      $result = db_select('field_data_field_slide_weight', 'fsw')
          ->fields('fsw', array('entity_id', 'field_slide_weight_value'))
          ->condition('entity_id', $nids, 'IN')
          ->orderby('field_slide_weight_value')
          ->execute();

      while ($record = $result->fetchObject()) {
          
        $ent = node_load($record->entity_id);
        $image = field_get_items('node', $ent, 'field_slide_photo');
        $img_output = field_view_value('node', $ent, 'field_slide_photo', $image[0], array(
          'type' => 'image',
          'label' => 'hidden',
          'settings' => array(),
        ));

        $img_rendered = drupal_render($img_output);
     
        $html .= '<input class="series-nid hidden" value=\'' . $img_rendered . '\' data-pos="' . $record->field_slide_weight_value . '" name="' 
          . $record->entity_id . '">';  
    
        $image = '';
      }

      $main_slides_html .= '<div id="' . $n_key . '" class="nod">' . $html;
      $main_slides_html .= '<input class="series_name hidden" value="' . $series_output['#title'] . '">' . '</div>';
    }

    $main_slides_html .= '<div>';
  }

  if ($cached = cache_get('node_' . $next_nid, 'cache'))  {
    $node_next = $cached->data;
  }

  if (empty($node_next)) {
    $node_next = node_load($next_nid);
  }
  cache_set('node_' . $next_nid, $node_next, 'cache', time() + 60 * 60); //1 hour

  if ($cached = cache_get('node_' . $prev_nid, 'cache'))  {
    $node_prev = $cached->data;
  }

  if (empty($node_prev)) {
    $node_prev = node_load($prev_nid);
  }
  cache_set('node_' . $prev_nid, $node_prev, 'cache', time() + 60 * 60); //1 hour

  $series = field_get_items('node', $node, 'field_tax_series');
  $series_output = field_view_value('node', $node, 'field_tax_series', $series[0], array(
    'type' => 'plain',
    'label' => 'hidden',
  ));
  $series_next = field_get_items('node', $node_next, 'field_tax_series');
  $series_next_output = field_view_value('node', $node_next, 'field_tax_series', $series_next[0], array(
    'type' => 'plain',
    'label' => 'hidden',
  ));
  $series_prev = field_get_items('node', $node_prev, 'field_tax_series');
  $series_prev_output = field_view_value('node', $node_prev, 'field_tax_series', $series_prev[0], array(
    'type' => 'plain',
    'label' => 'hidden',
  ));

  $series_rendered = drupal_render($series_output);
  $series_next_rendered = drupal_render($series_next_output);
  $series_prev_rendered = drupal_render($series_prev_output);

  $image = field_get_items('node', $node, 'field_slide_photo');
  $img_output = field_view_value('node', $node, 'field_slide_photo', $image[0], array(
    'type' => 'image',
    'label' => 'hidden',
    'settings' => array(),
  ));
  $img_rendered = drupal_render($img_output);
  echo $img_rendered . '!SPLIT!';
  echo '<div class="photo-gallery-tax tax-series tax-top">';
  echo $series_rendered;
  echo '</div>';
  echo '<div class="photo-gallery-tax tax-themes tax-left">';
  echo $series_prev_rendered;
  echo '</div>';
  echo '<div class="photo-gallery-tax tax-themes tax-right">';
  echo $series_next_rendered;
  echo '</div>';  
  echo '<div class="photo-gallery-tax tax-series tax-bottom">';
  echo $series_rendered;
  echo '</div>';
  echo '<input class="series-val" type="hidden" value="' . $series_output['#title'] . '">';
  echo '<input class="nid" type="hidden" value="' . $node->nid . '">';
  if (isset($main_slides_html)) echo $main_slides_html;
}

/*
* function return array of taxanomy terms nids 
*
* @param $tax_name
*   taxanomy term name from vocabulary
*
* @param $voc_name
*   vocabulary name 
*/
function get_tax_nids($tax_name, $voc_name = NULL) {
  $tids = taxonomy_get_term_by_name($tax_name, $voc_name);
  $nids = array();
  foreach ($tids as $key => $value) {
    $nids = array_merge($nids, taxonomy_select_nodes($value->tid));
  }

  return $nids;
}

function swipe_photo_gallery_node_presave($node) {
  if ($node->type == "gallery_photo") {
    $first = field_get_items('node', $node, 'field_first_slide');
    $series = field_get_items('node', $node, 'field_tax_series');
    if ($first[0]['value']) {
      $query = new EntityFieldQuery;
      $result = $query
        ->entityCondition('entity_type', 'node')
        ->propertyCondition('status', 1)
        ->fieldCondition('field_first_slide', 'value', 1, '=')
        ->fieldCondition('field_tax_series', 'tid', $series[0]["tid"], '=')
        ->execute();
      if (!empty($result['node'])) {
        $nodes = node_load_multiple(array_keys($result['node']));
        foreach ($nodes as $node) {
          $node->field_first_slide[$node->language][0]['value'] = 0;
          node_save($node);
        }
      }      
    }
  }
}

/*
* function return form of data settings 
*/
function swipe_photo_gallery_settings_form() {

  $form['page_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Page name'),
    '#default_value' => variable_get('page_name', 'Gallery'),
    '#maxlength' => 30,
  );

  $form['page_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Page path'),
    '#default_value' => variable_get('page_path', 'overview'),
    '#description' => t('After change, need to flush menu cache and enable in  Administration » Structure » Menus.'),
    '#maxlength' => 30,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Save config',
    '#submit' => array('swipe_photo_gallery_settings_form_submit'),
  );

  return $form;
}

function swipe_photo_gallery_settings_form_validate($form, &$form_state) {

  $url = $form_state['values']['page_path'];

  if ($url == '') {
    form_set_error('page_path', t('Page path is empty.'));
  }
  elseif (ereg("[^a-zA-Z0-9_]", $url)) {
     form_set_error('page_path', t('Check page path. Use only: a-z A-Z 0-9 and \'_\''));
  }
  else {
    $query = db_select('url_alias', 'u')
      ->fields('u', array('alias', 'source'))
      ->condition(
        db_or()
        ->condition('u.alias', $url)
        ->condition('u.source', $url)
      );
    $count = $query->execute()->fetchAllAssoc('alias');

    //dvm($count);
    if (COUNT($count) != 0) {
      form_set_error('page_path', t('The alias is already in use.'));
    }
  }  
}

function swipe_photo_gallery_settings_form_submit($form, &$form_state) {
  variable_set('page_name', $_POST['page_name']);
  variable_set('page_path', $_POST['page_path']);
  drupal_set_message('Configuration saved. Please flush menu cache.');
}
