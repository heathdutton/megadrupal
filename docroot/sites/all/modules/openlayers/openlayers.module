<?php
/**
 * @file
 * Openlayers module.
 */

include 'includes/openlayers.helpers.inc';

/**
 * Implements hook_ctools_plugin_api().
 */
function openlayers_ctools_plugin_api($module, $api) {
  return array(
    'version' => 1,
    'path' => drupal_get_path('module', 'openlayers') . '/includes',
  );
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function openlayers_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/' . $plugin_type;
  }
}

/**
 * Create an object instance for an export.
 *
 * @param string $object_type
 *   The object type to look up. See openlayers_object_types() for a list of
 *   available object types.
 * @param array|string|object $export
 *   The exported object.
 *
 * @return mixed|openlayers_error
 *   Returns the instance of the requested object or an instance of
 *   openlayers_error on error.
 */
function openlayers_object_load($object_type, $export) {
  // @todo: This needs to be refactored properly.
  ctools_include('export');

  $object = NULL;
  $exportable = array();

  if (is_object($export)) {
    $array_object = new ArrayObject($export);
    $exportable = $array_object->getArrayCopy();
  }
  if (is_string($export)) {
    $exportable = (array) ctools_export_crud_load('openlayers_' . strtolower($object_type) . 's', $export);
  }

  if (is_array($exportable) && isset($exportable['factory_service'])) {
    list($plugin_manager_id, $plugin_id) = explode(':', $exportable['factory_service'], 2);
    if (\Drupal::hasService($plugin_manager_id)) {
      $plugin_manager = \Drupal::service($plugin_manager_id);
      if ($plugin_manager->hasDefinition($plugin_id)) {
        $object = $plugin_manager->createInstance($plugin_id);
      } else {
        $exportable += array(
          'type' => $object_type,
          'errorMessage' => 'Unable to load @type @machine_name',
        );
        $object = \Drupal::service('openlayers.Types')->createInstance('Error');
      }
    }
    else {
      $exportable += array(
        'type' => $object_type,
        'errorMessage' => 'Service <em>@service</em> doesn\'t exists, unable to load @type @machine_name',
      );
      $object = \Drupal::service('openlayers.Types')->createInstance('Error');
    }
  }
  else {
    $exportable += array(
      'type' => $object_type,
      'machine_name' => $export,
      'errorMessage' => 'Unable to load CTools exportable @type @machine_name.',
    );
    $object = \Drupal::service('openlayers.Types')->createInstance('Error');
  }
  $object->init($exportable);

  if (isset($exportable['disabled']) && ($exportable['disabled'] == 1 || $exportable['disabled'] == TRUE)) {
    $object->disabled = 1;
  }

  return $object;
}

/**
 * Implements hook_permission().
 */
function openlayers_permission() {
  return array(
    'administer openlayers' => array(
      'title' => t('Administer OpenLayers'),
      'description' => t('Configure OpenLayers settings, styles, maps, and layers.'),
    ),
  );
}

/**
 * Implements hook_libraries_info().
 */
function openlayers_libraries_info() {
  $libraries['openlayers3'] = array(
    'name' => 'OpenLayers3',
    'vendor url' => 'http://ol3js.org/',
    'download url' => 'https://github.com/openlayers/ol3/releases/download/v3.6.0/v3.6.0.zip',
    'version arguments' => array(
      'file' => 'build/ol.js',
      'pattern' => '@Version: (.*)@',
      'lines' => 3,
    ),
    'files' => array(
      'js' => array(
        'closure-library/closure/goog/base.js' => array(
          'type' => 'file',
          'weight' => 4,
          'group' => \Drupal\openlayers\Config::get('openlayers.js_css.group'),
        ),
        'build/ol.js' => array(
          'type' => 'file',
          'weight' => 6,
          'group' => \Drupal\openlayers\Config::get('openlayers.js_css.group'),
        ),
      ),
      'css' => array(
        'css/ol.css' => array(
          'type' => 'file',
          'weight' => 4,
          'group' => \Drupal\openlayers\Config::get('openlayers.js_css.group'),
        ),
      ),
    ),
    'integration files' => array(
      'openlayers' => array(
        'js' => array(
          'js/openlayers.goog.js' => array(
            'type' => 'file',
            'weight' => 2,
            'group' => \Drupal\openlayers\Config::get('openlayers.js_css.group'),
          ),
          'js/openlayers.js' => array(
            'type' => 'file',
            'weight' => 8,
            'group' => \Drupal\openlayers\Config::get('openlayers.js_css.group'),
          ),
          'js/openlayers.pluginManager.js' => array(
            'type' => 'file',
            'weight' => 12,
            'group' => \Drupal\openlayers\Config::get('openlayers.js_css.group'),
          ),
          'js/openlayers.behaviors.js' => array(
            'type' => 'file',
            'weight' => 14,
            'group' => \Drupal\openlayers\Config::get('openlayers.js_css.group'),
          ),
        ),
        'css' => array(
          'css/openlayers.css' => array(
            'type' => 'file',
            'weight' => 4,
            'group' => \Drupal\openlayers\Config::get('openlayers.js_css.group'),
          ),
        ),
      ),
    ),
    'variants' => array(
      'debug' => array(
        'files' => array(
          'js' => array(
            'closure-library/closure/goog/base.js' => array(
              'type' => 'file',
              'weight' => 4,
              'group' => \Drupal\openlayers\Config::get('openlayers.js_css.group'),
            ),
            'build/ol-deps.js' => array(
              'type' => 'file',
              'weight' => 6,
              'group' => \Drupal\openlayers\Config::get('openlayers.js_css.group'),
            ),
            'build/ol-debug.js' => array(
              'type' => 'file',
              'weight' => 8,
              'group' => \Drupal\openlayers\Config::get('openlayers.js_css.group'),
            ),
          ),
          'css' => array(
            'css/ol.css' => array(
              'type' => 'file',
              'group' => \Drupal\openlayers\Config::get('openlayers.js_css.group'),
            ),
          ),
        ),
        'integration files' => array(
          'openlayers' => array(
            'js' => array(
              'js/openlayers.goog.js' => array(
                'type' => 'file',
                'weight' => 2,
                'group' => \Drupal\openlayers\Config::get('openlayers.js_css.group'),
              ),
              'js/openlayers.js' => array(
                'type' => 'file',
                'weight' => 8,
                'group' => \Drupal\openlayers\Config::get('openlayers.js_css.group'),
              ),
              'js/openlayers.pluginManager.js' => array(
                'type' => 'file',
                'weight' => 12,
                'group' => \Drupal\openlayers\Config::get('openlayers.js_css.group'),
              ),
              'js/openlayers.behaviors.js' => array(
                'type' => 'file',
                'weight' => 14,
                'group' => \Drupal\openlayers\Config::get('openlayers.js_css.group'),
              ),
              'js/openlayers.console.js' => array(
                'type' => 'file',
                'weight' => 16,
                'group' => \Drupal\openlayers\Config::get('openlayers.js_css.group'),
              ),
              'js/openlayers.debug.js' => array(
                'type' => 'file',
                'weight' => 18,
                'group' => \Drupal\openlayers\Config::get('openlayers.js_css.group'),
              ),
            ),
            'css' => array(
              'css/openlayers.css' => array(
                'type' => 'file',
                'weight' => 4,
                'group' => \Drupal\openlayers\Config::get('openlayers.js_css.group'),
              ),
            ),
          ),
        ),
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_element_info().
 */
function openlayers_element_info() {
  return array(
    'openlayers' => array(
      '#input' => FALSE,
      '#tree' => TRUE,
      '#process' => array('openlayers_element_process_callback'),
      '#theme_wrappers' => array('form_element'),
    ),
  );
}

/**
 * Process callback for the openlayers form element.
 *
 * Renders the map and returns the markup in an renderable array.
 */
function openlayers_element_process_callback($element, &$form_state) {
  $map = openlayers_object_load('Map', $element['#map']);
  $element['map'] = $map->build();

  return $element;
}

/**
 * If the PHP version is < 5.3.0 we need to create array_replace_recursive().
 */
if (!function_exists('array_replace_recursive')) {
  /**
   * Replaces elements from passed arrays into the first array recursively.
   *
   * @link http://php.net/manual/en/function.array-replace-recursive.php
   *
   * @param array $array
   *   The array in which elements are replaced.
   * @param array $array1
   *   The array from which elements will be extracted.
   *
   * @return array|NULL
   *   An array, or NULL if an error occurs.
   */
  function array_replace_recursive(array $array, array $array1) {
    // Get array arguments.
    $arrays = func_get_args();

    // Define the original array.
    $original = array_shift($arrays);

    // Loop through arrays.
    foreach ($arrays as $array) {
      // Loop through array key/value pairs.
      foreach ($array as $key => $value) {
        // Value is an array.
        if (is_array($value)) {
          // Traverse the array; replace or add result to original array.
          $original[$key] = array_replace_recursive($original[$key], $array[$key]);
        }
        // Value is not an array.
        else {
          // Replace or add current value to original array.
          $original[$key] = $value;
        }
      }
    }

    // Return the joined array.
    return $original;
  }
}

/**
 * Implements hook_i18n_string_info().
 */
function openlayers_i18n_string_info() {
  $groups['openlayers'] = array(
    'title' => t('Openlayers'),
    'format' => TRUE,
  );
  return $groups;
}

/**
 * Translate a string using i18n_string, if available.
 *
 * @param string $name
 *   Textgroup and context glued with ':'.
 * @param string $default
 *   String in default language. Default language may or may not be English.
 * @param array $options
 *   An associative array of additional options, with the following keys:
 *   - langcode: the language code to translate to a language other than what is
 *     used to display the page; defaults to the current language
 *   - filter: filtering callback to apply to the translated string only
 *   - format: input format to apply to the translated string only
 *   - callback: callback to apply to the result (both to the translated or
 *     untranslated string)
 *   - update: whether to update source table; defaults to FALSE
 *   - translate: whether to return a translation; defaults to TRUE.
 *
 * @return string
 *   The translated string if i18n_string is available, the original otherwise.
 *
 * @see i18n_string()
 */
function openlayers_i18n_string($name, $default, $options = array()) {
  if (module_exists('i18n_string')) {
    $result = i18n_string($name, $default, $options);
  }
  else {
    $result = $default;
    $options += array(
      'format' => NULL,
      'sanitize' => FALSE,
    );
    if ($options['sanitize']) {
      $result = check_markup($result, $options['format']);
    }
  }

  return $result;
}

/**
 * Wrapper to update / create translation source for user defined strings.
 *
 * Wrapper around i18n_string_update() that ensures the module is available.
 *
 * @param string|array $name
 *   Array or string concatenated with ':' that contains textgroup and string
 *   context.
 * @param string $string
 *   Source string in default language. Default language may or may not be
 *   English. Array of key => string to update multiple strings at once.
 * @param array $options
 *   Array with additional options:
 *   - 'format', String format if the string has text format
 *   - 'messages', Whether to print out status messages.
 *
 * @return mixed
 *   Same return as from i18n_string_update()
 *
 * @see i18n_string_update()
 */
function openlayers_i18n_string_update($name, $string, $options = array()) {
  if (module_exists('i18n_string')) {
    return i18n_string_update($name, $string, $options);
  }
}

/**
 * Wrapper to remove source and translations for user defined string.
 *
 * Though for most strings the 'name' or 'string id' uniquely identifies that
 * string, there are some exceptions (like profile categories) for which we need
 * to use the source string itself as a search key.
 *
 * @param string $name
 *   String name.
 * @param string $string
 *   Optional source string (string in default language).
 * @param array $options
 *   Array of string properties to remove.
 *
 * @return mixed
 *   Same return as from i18n_string_remove()
 *
 * @see i18n_string_remove()
 */
function openlayers_i18n_string_remove($name, $string = NULL, $options = array()) {
  if (module_exists('i18n_string')) {
    return i18n_string_remove($name, $string, $options);
  }
}

/**
 * Form callback handler to prepare the developer dialog form.
 *
 * Prepares an object options form to be used in a frontend development dialog.
 *
 * @param array $form
 *   The form array - likely emtpy.
 * @param array $form_state
 *   The form state.
 * @param object $object
 *   The object that provides the options form. Has to have the public method
 *   optionsForms().
 *
 * @return array
 *   The populated form.
 *
 * @see \Drupal\openlayers\Source\GeoJSON::getJS()
 */
function openlayers_dev_dialog_form($form, $form_state, $object) {
  $object->optionsForm($form, $form_state);
  openlayers_dev_dialog_form_clean($form);
  return $form;
}

/**
 * Prepares a form structure to be added to a development dialog.
 *
 * Removes all JS related stuff.
 *
 * @param array $form
 *   The form array to prepare.
 */
function openlayers_dev_dialog_form_clean(array &$form) {
  foreach (element_children($form) as $key) {
    unset(
      $form[$key]['#states'],
      $form[$key]['#attached']
    );
    openlayers_dev_dialog_form_clean($form[$key]);
  }
}
