<?php
/**
 * @file
 *  wildfire.install
 *
 * Installation functions for Wildfire core
 *
 * @author Craig Jones <craig@tiger-fish.com>
 * @author Chris Cohen <chris.cohen@tiger-fish.com>
 */

/**
 * Implements hook_install().
 */
function wildfire_install() {

}

/**
 * Implements hook_requirements().
 */
function wildfire_requirements($phase) {

  $t = get_t();
  $requirements = array();

  $requirements = array(
    'wildfire_modules' => array(
      'title' => $t('Wildfire child modules'),
      'severity' => REQUIREMENT_OK
    )
  );

  if ($phase == 'install' || $phase == 'runtime') {

    /**
     * Check this 'blacklist' of modules that are known to conflict or lead
     * to unexplained behaviour within Wildfire. If any are enabled, fail the
     * requirements check.
     *
     * Note that it might be possible to fix compatibility with some of these
     * modules in the future.
     */
    $blacklist_modules = array(
      'background_batch',
    );

    $enabled_modules = array();

    foreach ($blacklist_modules as $module) {

      if (module_exists($module)) {
        $requirements['wildfire_modules']['severity'] = REQUIREMENT_ERROR;
        $enabled_modules[] = $module;
      }

    }

    if ($requirements['wildfire_modules']['severity'] == REQUIREMENT_OK) {
      $requirements['wildfire_modules']['value'] = $t('OK');
    }
    else {
      $requirements['wildfire_modules']['value'] = $t('Incompatible modules found');
      $requirements['wildfire_modules']['description'] = $t(
        'Wildfire is not yet compatible with the following modules, and they will need to be disabled: !modules',
        array(
          '!modules' => implode(', ', $enabled_modules)
        )
      );
    }

    if ($phase == 'runtime') {

      if ($requirements['wildfire_modules']['severity'] == REQUIREMENT_OK) {

        /**
         * Whilst it should be possible to only activate certain child modules
         * of Wildfire, as this is an early release, all the kinks haven't been
         * worked out to allow this to happen without unwanted side-effects.
         *
         * For now, check that all of the child modules are activated, else
         * produce an error when requirements are checked.
         *
         * FIXME: full compartmentalization of functionality and resolution to
         * the interdependency issues are required for selectively disabling
         * child modules to actually work correctly.
         */

        $required_modules = array(
          'wildfire_lists',
          'wildfire_messages',
          'wildfire_broadcasts',
          'wildfire_tracking',
          'wildfire_jobs',
          'wildfire_rpc_jobs',
          'wildfire_auth',
        );

        $missing_modules = array();

        foreach ($required_modules as $module) {

          if (!module_exists($module)) {
            $requirements['wildfire_modules']['severity'] = REQUIREMENT_ERROR;
            $missing_modules[] = $module;
          }

        }

        if ($requirements['wildfire_modules']['severity'] == REQUIREMENT_OK) {
          $requirements['wildfire_modules']['value'] = $t('OK');
        }
        else {
          $requirements['wildfire_modules']['value'] = $t('Required modules missing');
          $requirements['wildfire_modules']['description'] = $t(
            'The following modules need to be enabled for Wildfire to operate correctly: !modules',
            array(
              '!modules' => implode(', ', $missing_modules)
            )
          );
        }

      }

    }

  }

  return $requirements;

}

/**
 * Implements hook_enable().
 */
function wildfire_enable() {

  /**
   * When the core module is enabled, enable all required child modules are
   * as well. This is to ensure that Wildfire has everything enabled for the
   * full system out of the box, and satisfies the interdependencies we
   * currently have.
   *
   * FIXME: full comparmentalization of functionality and resolution to the
   * interdependency issues are required for selectively disabling child
   * modules to actually work correctly.
   */

  $required_modules = array(
    'wildfire_lists',
    'wildfire_messages',
    'wildfire_broadcasts',
    'wildfire_tracking',
    'wildfire_jobs',
    'wildfire_rpc_jobs',
    'wildfire_auth',
  );

  module_enable($required_modules);

}

/**
 * Implements hook_uninstall().
 */
function wildfire_uninstall() {

  // Remove all variables.
  variable_del('wildfire_system_name');
  variable_del('wildfire_bounce_mode');
  variable_del('wildfire_batch_result');
  variable_del('wildfire_content_types');
  variable_del('wildfire_max_lists');
  variable_del('wildfire_optout_label');
  variable_del('wildfire_optout_description');
  variable_del('wildfire_registration_add_to_list');
  variable_del('wildfire_registration_list');
  variable_del('wildfire_return_path');
  variable_del('wildfire_snippet_format_id');
}

/**
 * Implements hook_schema().
 */
function wildfire_schema() {
  /**
   * 2012-02-15, craig: Wildfire 1 defined all tables here, however the
   * live schemas for Wildfire 2 have been moved out to their corresponding
   * modules, so there's nothing currently defined here.
   */
}

/**
 * Reset default email address set in tables to the sites email address
 */
function wildfire_update_7001() {

  $t = get_t();

  /**
   * 2011-10-31, craig:
   * We don't want a default address read from the fields default value.
   * Code should not rely on table defaults in any places now, so it's safe
   * to nuke the defaults that would have been used.
   */

  db_change_field(
    'wildfire_broadcasts',
    'from_email',
    'from_email',
    array(
      'type' => 'varchar',
      'description' => $t('The email of the broadcast sender.'),
      'not null' => TRUE,
      'length' => 128,
      'default' => '',
    )
  );

  db_change_field(
    'wildfire_broadcasts',
    'reply_email',
    'reply_email',
    array(
      'type' => 'varchar',
      'description' => $t('The email address of the person to act as a reply-to.'),
      'not null' => TRUE,
      'length'  => 128,
      'default' => '',
    )
  );

}

/**
 * Updates wildfire_jobs table to track number of processed emails
 */
function wildfire_update_7002() {

  $t = get_t();

  db_add_field(
    'wildfire_jobs',
    'processed_count',
    array(
      'type' => 'int',
      'unsigned'  => TRUE,
      'not null' => TRUE,
      'default' => 0,
      'description' => $t('The number of people processed on this job so far'),
    )
  );

}

/**
 * Adds extra fields to enable lists to handle live and test scenarios.
 */
function wildfire_update_7003() {

  $t = get_t();

  /**
   * Add a field to track when this list was last used for a send
   */
  db_add_field(
    'wildfire_lists',
    'last_sent_to',
    array(
      'type'        => 'int',
      'unsigned'    => TRUE,
      'not null'    => TRUE,
      'default'     => 0,
      'description' => $t('UNIX timestamp for the last time the list was used.'),
    )
  );

  /**
   * Add a field to contain a hash of the user list, to use for integrity
   * checking and fast checking of whether a list contains a given set of users.
   */
  db_add_field(
    'wildfire_lists',
    'users_hash',
    array(
      'type' => 'varchar',
      'length' => 128,
      'not null' => TRUE,
      'default' => '',
      'description' => $t('A hash of the users in the list'),
    )
  );

  /**
   * Add a field denoting if this is a live or test list.
   */
  db_add_field(
    'wildfire_lists',
    'status',
    array(
      'type' => 'int',
      'unsigned' => TRUE,
      'not null' => TRUE,
      'default' => 1,
      'description' => $t('0 = disabled, 1 = live, 2 = test'),
    )
  );

  /**
   * Add an email address storage to the list users table. Used only for test
   * lists.
   */
  db_add_field(
    'wildfire_lists_users',
    'mail',
    array(
      'type' => 'varchar',
      'length' => 128,
      'not null' => TRUE,
      'default' => '',
      'description' => $t('Users email address. Used by test lists only'),
    )
  );

  // Fix up the primary key index on the table, now we've added the 'mail'
  // field.
  db_drop_primary_key('wildfire_lists_users');
  db_add_primary_key('wildfire_lists_users', array('lid', 'uid', 'mail'));

}

/**
 * Removes the wildfire_max_lists variable, as the functionality for limiting
 * the number of lists a user can add has been removed
 */
function wildfire_update_7004() {

  variable_del('wildfire_max_lists');

}

/**
 * Adds indexes to field on tables that are frequently used for joins / lookups
 *
 * This trades off table sizes for performance.
 */
function wildfire_update_7005() {

  /**
   * Add an index for jid to the wildfire_tracking table, as this is likely to
   * be the thing most used for a lookup index. This speeds up pages such as
   * the jobs list page by 1000% (approx!)
   */
  db_add_index('wildfire_tracking', 'jid', array('jid'));

  // Same for job mails
  db_add_index('wildfire_job_mails', 'jid', array('jid'));

  // Make index of link IDs makes it quicker to determine who clicked on what
  db_add_index('wildfire_link_clicks', 'linkid', array('linkid'));

  // This makes it quicker to determine what links are on a job
  db_add_index('wildfire_links', 'jid', array('jid'));

  /**
   * If you look up a list, getting what users are in it is much faster
   * as a result of this index.
   */
  db_add_index('wildfire_lists_users', 'lid', array('lid'));

  /**
   * Add list ID index to jobs, as this will further improve joins to it on
   * this field.
   */
  db_add_index('wildfire_jobs', 'lid', array('lid'));

}

/**
 * Updates Wildfire 1 tables (if found) to Wildfire 2
 */
function wildfire_update_7200() {

  // Wildfire 2 doesn't do any form of local delivery unlike Wildfire 1,
  // so these settings are irrelevant now.
  variable_del('wildfire_bounce_mode');
  variable_del('wildfire_return_path');

}
