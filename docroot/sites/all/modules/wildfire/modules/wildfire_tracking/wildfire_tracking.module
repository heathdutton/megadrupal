<?php
/**
 * @file
 *  wildfire_tracking.module
 *
 * Manages Wildfire tracking and reports
 *
 * @author Craig Jones <craig@tiger-fish.com>
 *
 * Code derived from Wildfire 1:
 * @author Chris Cohen <chris.cohen@tiger-fish.com>
 */

/**
 * Implements hook_menu().
 */
function wildfire_tracking_menu() {
  $items = array();

  /**
   * Tracking system
   */
  $items['wildfire/track/%/%/%/%'] = array(
    'title' => 'Wildfire image tracking',
    'description' => 'Tracks that a user has opened an email by registering a hit on the website when the user downloads the tracking image',
    'access callback' => TRUE,
    'page callback' => 'wildfire_tracking_image',
    'page arguments' => array(2, 3, 4, 5),
    'type' => MENU_CALLBACK,
  );
  $items['wildfire/link/%/%'] = array(
    'title' => 'Wildfire Link Tracking',
    'description' => 'Accepts a link tracking URL, grabs the data and '
                         . 'redirects to the correct URL.',
    'access callback' => TRUE,
    'page callback' => 'wildfire_tracking_link_redirect',
    'page arguments' => array(2, 3),
  );

  /**
   * Reports
   */
  $items['admin/wildfire/report/job/%'] = array(
    'title' => 'Reports',
    'type' => MENU_CALLBACK,
    'description' => 'View a report for a job',
    'access arguments' => array('use wildfire'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wildfire_reports_job_form', 4),
    'file' => 'wildfire_tracking.reports.inc',
  );
  $items['admin/wildfire/report/job/%/view'] = array(
    'title' => 'OverView',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'description' => 'View a report for a job',
    'access arguments' => array('use wildfire'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wildfire_reports_job_form', 4),
    'file' => 'wildfire_tracking.reports.inc',
  );
  $items['admin/wildfire/report/link/%'] = array(
    'title' => 'Clicks for link',
    'title callback' => 'wildfire_title_link_report',
    'title arguments' => array(4),
    'type' => MENU_CALLBACK,
    'description' => 'View the clicks for a particular link',
    'access arguments' => array('use wildfire'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wildfire_reports_link_form', 4),
    'file' => 'wildfire_tracking.reports.inc',
  );

  $items['admin/wildfire/report/job/%/opens'] = array(
    'title' => 'Open Emails Overview',
    'type' => MENU_LOCAL_TASK,
    'description' => 'View a report for a open list',
    'access arguments' => array('use wildfire'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wildfire_reports_open_list', 4),
    'file' => 'wildfire_tracking.reports.inc',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function wildfire_tracking_theme() {
  $tpath = drupal_get_path('module', 'wildfire_tracking') . '/templates';

  return array(
  );

}

/**
 * Wildfire Add Link
 *
 * Add a link to the database if it does not already exist and return the
 * freshly created Link ID. If it does, return the Link ID that's already there.
 *
 * @access public
 * @param string $url
 *    A URL.
 * @param int $jid
 *    The Job ID.
 * @return int
 *  The ID of the link
 */
function wildfire_tracking_link_add($url, $jid) {
  $jid = (int) $jid;
  // Make sure the input is a string that is less than 333 characters in length.
  if (!is_string($url) || drupal_strlen($url) > 333 || $jid < 1) {
    return FALSE;
  }
  // If the link already exists in the database, pull the already existing Link
  // ID.
  $query = db_select('wildfire_links', 'cl')
    ->fields('cl', array(
      'linkid',
    ));
  $query->condition('url', $url, '=');
  $query->condition('jid', $jid, '=');
  $result = $query->execute();

  $linkid = $result->fetchField();

  if ($linkid) {
    return $linkid;
  }
  // It doesn't already exist? Well, let's beat that URL into existance with
  // these uber cool statements.
  $insert = array(
    'url' => $url,
    'jid' => $jid,
  );
  $result = drupal_write_record('wildfire_links', $insert);
  if ($result === FALSE) {
    return FALSE;
  }
  /**
   * 2011-06-13, craig: db_last_insert_id() removed in Drupal 7
   * drupal_write_record() operates on $insert by ref, and upon return,
   * $insert contains extra variables to indicate the status. We can
   * read these back to get the insert ID we are after.
   */
  //$linkid = db_last_insert_id('wildfire_links', 'linkid');
  $linkid = $insert['linkid'];
  return $linkid;
}

/**
 * Gets the number of opens for a particular job.
 *
 * @param $jid int
 *    The ID of the job.
 * @return int
 *    The unique number of times the email has been opened.
 */
function wildfire_tracking_get_opens($jid) {

  $query = db_select('wildfire_tracking', 'ct');
  $query->condition('jid', $jid, '=');
  $query->addExpression('COUNT(1)', 'count');
  $result = $query->execute();

  return $result->fetchField();

}

/**
 * Page callback to redirect an aliased link, and track the click if necessary.
 *
 * @param int $linkid
 *    The link's ID.
 * @param int $uid
 *    The user ID of the user who clicked it. Might be 0, which means that this
 *    is not trackable, such as if the user has clicked the link from the
 *    browser view, but never received the original email.
 */
function wildfire_tracking_link_redirect($linkid, $uid) {
  // Check that the link exists.

  $query = db_select('wildfire_links', 'cl')
    ->fields('cl', array(
     'url',
     'jid',
  ));
  $query->condition('linkid', $linkid, '=');
  $result = $query->execute();

  if ($result === FALSE) {
    return t('Cannot perform redirect for this link.');
  }
  else {
    $row = $result->fetchAssoc();
    $url = $row['url'];
    $jid = $row['jid'];

    // Only bother doing the tracking if the uid was not 0, since a 0 indicates
    // we don't want to track.
    if ($uid != 0) {
      // Check that the user exists, the job exists, and the user was included in
      // the list that the job used.

      $query = db_select('wildfire_jobs', 'cj');
      $query->join('wildfire_lists_users', 'clu', 'cj.lid = clu.lid');
      $query->condition('clu.uid', $uid, '=');
      $query->condition('cj.jid', $jid, '=');
      $query->addExpression('COUNT(1)', 'count');
      $result = $query->execute();

      if (!$result->fetchField()) {
        return t('Link has been tampered with. Cannot redirect.');
      }

      // Save all the data.
      $id = db_insert('wildfire_link_clicks')
        ->fields(array(
          'linkid' => $linkid,
          'uid' => $uid,
          'timestamp' => REQUEST_TIME,
        ))
        ->execute();

      // Add a track to the tracking table to show that this user has opened the
      // email.
      module_load_include('inc', 'wildfire_jobs', 'wildfire_jobs.api');

      $job = new WildfireClientJob($jid);
      wildfire_tracking_add($job->type, $job->extra, $uid, $jid);
    }

    // Redirect to URL. We can't use drupal_goto(). We'll have to do it the hard
    // way.
    if (headers_sent()) {
      return t('Cannot redirect to URL. Headers have already been sent.');
    }

    // Perform the manual redirect.
    header('HTTP/1.1 307 Temporary Redirect', TRUE, 307);
    header('Location: ' . $url);
    exit;
  }
}

/**
 * Insert a tracking entry into the database.
 *
 * @param string $type
 *    The message type, such as broadcast or alert.
 * @param int $mid
 *    The message ID.
 * @param int $uid
 *    The user ID.
 * @param int $jid
 *    The job ID of the job in which the user was sent the message.
 * @return bool
 *    TRUE if successful, or FALSE if the tracking entry has already been made
 *    or invalid parameters were supplied.
 */
function wildfire_tracking_add($type, $mid, $uid, $jid) {

  $debug = FALSE;

  module_load_include('inc', 'wildfire_jobs', 'wildfire_jobs.send');
  module_load_include('inc', 'wildfire_jobs', 'wildfire_jobs.api');

  // Make sure we haven't already tracked this click.
  $query = db_select('wildfire_tracking', 'ct')
    ->fields('ct', array(
      'timestamp'
    ));
  $query->condition('type', $type, '=');
  $query->condition('mid', $mid, '=');
  $query->condition('uid', $uid, '=');
  $query->condition('jid', $jid, '=');
  $result = $query->execute();

  $tracked = $result->fetchField();

  if ($tracked !== FALSE) {
    if ($debug) {
      drupal_set_message(t('wildfire_tracking_add: DEBUG: link not tracked'));
    }
    return FALSE;
  }

  // Do some parameter checking. Begin with the type of the message.
  $types = wildfire_mail_types();

  if (!in_array($type, array_keys($types))) {
    if ($debug) {
      drupal_set_message(t('wildfire_tracking_add: DEBUG: not a mail type'));
    }
    return FALSE;
  }

  // Now check the message is valid.
  $message = wildfire_message_get($type, $mid);

  //if ($message[0] === FALSE) {
  if (!isset($message)) {
    if ($debug) {
      drupal_set_message(t('wildfire_tracking_add: DEBUG: no message'));
    }
    return FALSE;
  }

  // Is the user valid?
  $account = user_load($uid);

  if ($account === FALSE) {
    if ($debug) {
      drupal_set_message(t('wildfire_tracking_add: DEBUG: invalid user'));
    }
    return FALSE;
  }

  // Is the job valid?
  $job = wildfire_job_valid($jid);

  if ($job === FALSE) {
    if ($debug) {
      drupal_set_message(t('wildfire_tracking_add: DEBUG: job invalid'));
    }
    return FALSE;
  }

  // Put together the array of data to insert.
  $edit = array(
    'type' => $type,
    'mid' => $mid,
    'uid' => $uid,
    'jid' => $jid,
    'timestamp' => REQUEST_TIME,
  );

  // Perform the insert.
  drupal_write_record('wildfire_tracking', $edit);
  return TRUE;
}

/**
 * Registers that a user has opened an email, and returns a 1x1 image.
 *
 * @param string $type
 *    The message type, such as broadcast or alert.
 * @param int $mid
 *    The message ID.
 * @param int $uid
 *    The user ID.
 * @param int $jid
 *    The job ID of the job in which the user was sent the message.
 */
function wildfire_tracking_image($type = '', $mid = 0, $uid = 0, $jid = 0) {
  // Perform the tracking. Might not necessarily succeed. We still serve the
  // image regardless.
  $valid = wildfire_tracking_add($type, $mid, $uid, $jid);

  // Put together the image.
  $image = imagecreatetruecolor(1, 1);
  imagecolortransparent($image, imagecolorallocate($image, 0, 0, 0));

  // Construct the resposne containing the header and the image.
  drupal_add_http_header('Content-Type', 'image/png; charset=utf-8');
  imagepng($image);
  imagedestroy($image);
  exit(0);
}

/**
 * Takes the HTML of an email and puts in the tracking image.
 *
 * @param string $contents
 *    The HTML content of the email.
 * @param string $type
 *    The job type, eg broadcast or alert.
 * @param int $mid
 *    The message ID, such as the broadcast ID.
 * @param int $jid
 *    The job ID of the job in which this send is occurring.
 * @return string
 *    The HTML of the email, but with the tracking image in place.
 */
function wildfire_tracking_inject_image($contents, $type = 'broadcast', $mid, $jid) {

  module_load_include('inc', 'wildfire_jobs', 'wildfire_jobs.api');

  global $base_url;

  $valid = TRUE;
  $bad_param = array();
  $img_url = '';
  $message = array();

  // Parameter checking.
  if (!in_array($type, array_keys(wildfire_mail_types()))) {
    $bad_param = array(
      'name' => 'type',
      'value' => $type,
    );
    $valid = FALSE;
  }
  elseif (wildfire_message_get($type, $mid) === FALSE) {
    $bad_param = array(
      'name' => 'mid',
      'value' => $type,
    );
    $valid = FALSE;
  }
  elseif (wildfire_job_valid($jid) === FALSE) {
    $bad_param = array(
      'name' => 'uid',
      'value' => $jid,
    );
  }

  if ($valid) {
    $img_url = 'wildfire/track/' . $type . '/' . $mid . '/{{wildfire:uid}}/' . $jid;
  }
  else {
    // Log the invalid parameter.
    watchdog(
      'wildfire',
      'Invalid parameter: The %param parameter passed to wildfire_tracking_inject_image was invalid. Value was: !value',
      array('%param' => $bad_param['name'], '!value' => $bad_param['value'])
    );

    $img_url = 'wildfire/track/invalid/param';
  }

  // Create the tracking image, using the special theme function.
  $trackimg = $base_url . '/' . $img_url;
  $trackimg = '<img src="' . $trackimg . '" width="1" height="1" alt=" "/>';

  // Work out whether to inject the tracking image before the end of the body,
  // or whether to stick it at the very end.
  if (($pos = mb_strpos($contents, '</body>')) === FALSE) {
    $contents .= $trackimg;
  }
  else {
    // Split the contents up before and after, and sandwich the tracking image.
    $before = drupal_substr($contents, 0, $pos);
    $after = drupal_substr($contents, $pos);
    $contents = $before . $trackimg . $after;
  }

  return $contents;
}

/**
 * Make sure that a specified link ID is valid.
 *
 * @param int $linkid
 *    The ID of the link to check.
 * @param int $jid
 *    Optional job ID. If specified, the function will only return TRUE if the
 *    job is valid and if the link was part of the job itself.
 */
function wildfire_tracking_link_valid($linkid = 0, $jid = 0) {

  $query = db_select('wildfire_links', 'cl')
    ->fields('cl', array(
      'jid',
    ));
  $query->condition('linkid', $linkid, '=');
  $result = $query->execute();

  $result = $result->fetchField();

  // If the link ID was not found, we can return FALSE right away here.
  if ($result === FALSE) {
    return FALSE;
  }

  if ($jid > 0) {
    module_load_include('inc', 'wildfire_jobs', 'wildfire_jobs.send');
    module_load_include('inc', 'wildfire_jobs', 'wildfire_jobs.api');

    // Make sure that the job ID was valid.
    if (!wildfire_job_valid($jid)) {
      return FALSE;
    }

    // We got the job ID for the link earlier, so just compare that with what
    // we've been given in the parameters.
    return $jid == $result;
  }
  else {
    // We don't care what job the link is attached to. We've already established
    // that it's valid, so we've done all we need to.
    return TRUE;
  }

}

/**
 * Title callback for the link report pages.
 *
 * @param int $linkid
 *    The link ID.
 * @return
 *    The page title in the form 'Link report for %link' where %link is the URL.
 */
function wildfire_title_link_report($linkid = 0) {
  module_load_include('module', 'wildfire_tracking', 'wildfire_tracking');

  if (!wildfire_tracking_link_valid($linkid)) {
    // We couldn't get the link information, so just return a generic title.
    return t('Link report');
  }

  $query = db_select('wildfire_links', 'cl')
    ->fields('cl', array(
      'url',
    ));
  $query->condition('linkid', $linkid, '=');
  $result = $query->execute();

  $url = $result->fetchField();

  return t('Link report for @link', array('@link' => $url));
}
