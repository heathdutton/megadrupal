<?php
/**
 * @file
 * Tests the tracking systems.
 */
module_load_include('test', 'wildfire', 'tests/wildfire');

class WildfireTrackingTestCase extends WildfireWebTestCase {

  /**
   * Get Information
   */
  public static function getInfo() {
    return array(
      'name' => 'Tracking - Main',
      'description' => 'Test the Tracking functionality of the Wildfire module.',
      'group' => 'Wildfire',
    );
  }

  /**
   * Setup
   *
   * @access public
   * @return void
   */
  public function setUp() {
    // Load the parts of the module we want to use
    module_load_include('inc', 'wildfire_broadcasts', 'wildfire_broadcasts.api');
    module_load_include('inc', 'wildfire_lists', 'wildfire_lists.api');
    module_load_include('inc', 'wildfire_jobs', 'wildfire_jobs.send');
    module_load_include('module', 'wildfire_tracking', 'wildfire_tracking');

    // Create our random details for our example test case.
    $this->track = new stdClass;
    $this->track->job = new stdClass;
    // Generic setup, eg, user, etc.
    parent::setUp();

    // Create some extra permissions needed for this module
    $permissions = array(
      'use wildfire jobs',
    );

    // Add a new role with these permissions
    $new_role = $this->drupalCreateRole($permissions);

    // Add this additional role to the user account.
    $this->user->roles[$new_role] = $new_role;
    user_save($this->user);

    // Log in again to ensure the permissions are being picked up
    $this->drupalLogin($this->user);

  }

  /**
   * Tracking Test
   *
   * Generic tests, and to group all the other tests together.
   *
   * @access public
   * @return void
   */
  public function testTracking() {
    // Test if setup failed.
    if ($this->preFail !== FALSE) {
      $preFail = is_string($this->preFail)
        ? $this->preFail
        : 'Setup failed. Test aborted.';
      $this->fail($preFail);
      return;
    }

    $start = microtime();

    // Set up a job to be used with these tests.
    $this->track->job = $this->generateJob(2, 2);

    // Set the demo job to be "sent". We aren't interested in the pending to
    // complete process (where counts are generated) as that's tested elsewhere,
    // but we are interested in whether the completed jobs stats are correct.
    $row = array(
      'jid' => $this->track->job['jid'],
      'count' => '2',
      'last_modified' => time() - 300,
      'status' => WILDFIRE_JOB_COMPLETE
    );
    drupal_write_record('wildfire_jobs', $row, 'jid');

    // List the tests here.
    $this->trackingAPI();
    $this->trackingImage();
    $this->trackingPage();
    $this->trackingLinks();
    $this->trackingDatabase();
    $this->trackingClicks();

    $this->pass(t(
      'Tests completed in !time seconds',
      array('!time' => $this->elapsedTime($start))
    ));
  }

  /**
   * A few API function tests.
   */
  protected function trackingAPI() {
    // Create a job. Make sure that a link from the job (any link) passes the
    // validity API function, and a fake link does not.
    $generated_job = $this->generateJob();

    /**
     * Build the job, and process the content. The process of pulling in the
     * content will build the tracking alias links, so is required before you
     * can check that the report is actually correct.
     */
    $job = new WildfireClientJob($generated_job['jid']);

    /**
     * Writing directly to the database for this Job - discouraged, but in
     * testing, we need to emulate that the job has been processed without
     * actually needing to process it as we want to check each piece in turn
     */
    $save_record = array(
      'jid' => $generated_job['jid'],
      'status' => WILDFIRE_JOB_PREPARED,
      'last_modified' => time(),
      'processed_count' => $job->getListUsersCount(),
      'count' => $job->getListUsersCount(),
    );
    $saved = drupal_write_record('wildfire_jobs', $save_record, 'jid');

    // Reload to get the new status
    $job->load($generated_job['jid']);
    $job->getContent();

    $query = db_select('wildfire_links', 'cl')
      ->fields('cl', array(
      'linkid'
    ));
    $query->condition('jid', $job->jid, '=');
    $result = $query->execute();

    $linkid = $result->fetchField();

    $this->assertTrue(
      wildfire_tracking_link_valid($linkid),
      t('The link we created is deemed valid')
    );
    $this->assertFalse(
      wildfire_tracking_link_valid(2345098),
      t('A fake link ID is not deemed valid')
    );
  }

  /**
   * Make sure the tracking image is present in the HTML of the email.
   */
  protected function trackingImage() {

    global $base_url;

    $job = new WildfireClientJob($this->track->job['jid']);
    $job->getContent();
    $list_entries = $job->getListUsers();

    $tracking_image_path = 'wildfire/track/' . $job->type . '/' . $job->extra;
    $tracking_image_path .= '/' . $list_entries[0]['uid'] . '/' . $job->jid;

    $message = WildfireClientMessage::getMessageObject($job->type);
    $message->load($job->extra);

    // Render the message
    $message->render();

    // Populate the tracking image
    $message->addTrackingImage($job->jid);

    // Populate the rest of the token replacements
    $message->populateTokenReplacements($job->jid, $list_entries[0]['uid']);

    // Get the contents with the tokens replaced, and check that the tracking
    // image is included

    $contents = $message->getContentWithTokenReplacements();

    $this->verbose($contents);

    $this->assertNotIdentical(
      strpos($contents, $tracking_image_path),
      FALSE,
      t('Tracking URL found on page')
    );

    /**
     * Replace class contents with our rendered HTML and force an element
     * reparse, to allow further tests to be run using the xPath class methods.
     */
    $this->content = $contents;
    $this->elements = FALSE;
    $this->parse();

    /**
     * The tracking image needs to be inserted before the </body> tag in
     * a mail template. Let's make sure that the insertion didn't cause
     * a valid markup fail.
     */
    $xpath = $this->xpath('/html/body');

    if (!empty($xpath)) {
      if (!empty($xpath[0]->img->attributes()->src)) {
        $this->assertEqual(
          $xpath[0]->img->attributes()->src,
          $base_url . '/' . $tracking_image_path,
          t('img tag found in the mail template body with the correct tracking image URL')
        );
      }
      else {
        $this->fail(t('Tracking img tag missing from mail template body tag'));
      }
    }
    else {
      $this->fail(t('Mail template HTML is missing body tag'));
    }

  }

  /**
   * Check the jobs page to make sure the tracking info is there.
   */
  protected function trackingPage() {

    $job = new WildfireClientJob($this->track->job['jid']);
    $job->getContent();
    $list_entries = $job->getListUsers();

    $broadcast = wildfire_message_get($job->type, $job->extra);

    // First, check to make sure no tracks have been recorded.
    $this->drupalGet('admin/wildfire/jobs');
    $this->assertText('0 (0%)');

    // Make sure that the following page exists.
    // Get the fake PNG tracking image in order to register a track.
    $this->drupalGet(
      'wildfire/track/broadcast/'
    . $broadcast['mid']
    . '/'
    . $list_entries[0]['uid']
    . '/'
    . $job->jid
    );

    // Check again to make sure that the track was recorded.
    $this->drupalGet('admin/wildfire/jobs');
    $this->assertText('1 (50%)');

    // Track the second recipient's opening of the broadcast and make sure the
    // count goes up to 2.
    $this->drupalGet(
      'wildfire/track/broadcast/' .
      $broadcast['mid'] . '/' .
      $list_entries[1]['uid'] . '/' .
      $job->jid
    );

    $this->drupalGet('admin/wildfire/jobs');
    $this->assertText('2 (100%)');
  }

  /**
   * Tracking Test: Check Database.
   *
   * @access protected
   * @return void
   */
  protected function trackingDatabase() {
    // Make sure that the timestamp was recorded in the database.

    $job = new WildfireClientJob($this->track->job['jid']);
    $job->getContent();
    $list_entries = $job->getListUsers();

    $broadcast = wildfire_message_get($job->type, $job->extra);

    $query = db_select('wildfire_tracking', 'ct')
      ->fields('ct', array(
        'timestamp'
      ));
    $query->condition('type', 'broadcast', '=');
    $query->condition('uid', $list_entries[0]['uid'], '=');
    $query->condition('mid', $broadcast['mid'], '=');
    $result = $query->execute();

    $timestamp = $result->fetchField();

    $this->assertNotIdentical($timestamp, FALSE);
  }

  /**
   * Tracking Test: Tracking Hyperlinks
   *
   * @access protected
   * @return void
   */
  protected function trackingLinks() {

    $job = $this->generateJob();
    wildfire_job_execute($job['jid']);

    $job = new WildfireClientJob($job['jid']);
    $job->getContent();
    $list_entries = $job->getListUsers();

    // We want some dummy links.
    // Use well known and established domains that are unlikely to be down.
    $input = array(
      'http://maps.google.co.uk/',
      'http://www.youtube.com/',
      'http://drupal.org/',
      'http://en.wikipedia.org/',
      'http://bbc.co.uk/',
    );
    $links = array();

    foreach ($input as $l) {
      $linkid = wildfire_tracking_link_add($l, $job->jid);

      if ($linkid) {
        $links[$linkid] = $l;
        $this->pass(t(
          'Gave the link "%link" an ID of !linkid.',
          array(
          '%link' => $l,
          '!linkid' => $linkid,
        )
        ));
      }
      else {
        $this->fail(t(
          'Gave the link "%link" an ID.',
          array(
          '%link' => $l,
        )
        ));
      }
    }

    // Test what happens when you try to add a link that already exists.
    // Grab the first item in the links array and pass to API function.
    $keys = array_keys($links);
    $linkid = wildfire_tracking_link_add($input[0], $job->jid);
    $this->assertEqual(
      $linkid,
      $keys[0],
      t('Link API function returned an already existing Link ID instead of creating a new one.')
    );

    // Check that there are no entries in the database for these links.
    // Click on the links.
    foreach ($links as $linkid => $link) {
      $this->drupalGet('wildfire/link/' . $linkid . '/' . $list_entries[0]['uid']);
      $this->assertNoText(t('Link has been tampered with, cannot redirect.'));
      $this->assertNoText(t('Link ID has been tampered with, cannot redirect.'));
      $this->assertNoText(t('Wildfire Link Tracking'));
    }

    // Check that the {wildfire_link_clicks} table was updated.
    $query = db_select('wildfire_link_clicks', 'clc');
    $query->addExpression('COUNT(1)', 'count');
    $result = $query->execute();

    $result = $result->fetchField();

    $this->assertEqual(
      $result,
      count($links),
      t(
        '!num entries found in database equal to entries in generated links array.',
        array('!num' => count($links))
      )
    );

    // Check that the {wildfire_tracking} table has been updated.
    $query = db_select('wildfire_tracking', 'ct');
    $query->condition('jid', $job->jid, '=');
    $query->condition('uid', $list_entries[0]['uid'], '=');
    $query->addExpression('COUNT(1)', 'count');
    $result = $query->execute();

    $result = $result->fetchField();

    $this->assertEqual(
      1,
      $result,
      t('Opening links has inserted an open into the tracking table')
    );

    $this->assertTrue(($job->jid), t('Job, as specified by Job ID, returned.'));

    $message = WildfireClientMessage::getMessageObject($job->type);
    $message->load($job->extra);
    $message->render();

    // Get the messages content before aliasing links
    $preprocess = $message->getContent();

    // Add the aliases
    $message->addTrackingToLinks($job->jid);

    // Get the message content after aliasing links
    $postprocess = $message->getContent();

    // Before and after should not be the same
    $this->assertNotEqual(
      $preprocess,
      $postprocess,
      t('Email body has been rendered and pre-processed.')
    );
  }

  /**
   * Make sure 'opens' are tracked based on images AND clicks in the email.
   */
  protected function trackingClicks() {
    // Generate and execute a job.
    $job = $this->generateJob(2, 3);
    wildfire_job_execute($job['jid']);

    $job = new WildfireClientJob($job['jid']);
    $job->getContent();
    $list_entries = $job->getListUsers();

    // Opens should be 0.
    // TODO: Check the jobs summary page too
    $this->drupalGet('admin/wildfire/jobs/history');

    $xpath = $this->xpath('//table[@id="wildfire-jobs-table"]/tbody/tr');

    // Go through each row in the table until we find the job we're looking
    // for. Note the current open rate of this job.
    $row = -1;
    $openstring = '';

    foreach ($xpath as $num => $xrow) {
      if ($xrow->td[0]->a == $job->title) {
        $openstring = $xrow->td[3];
        break;
      }
    }

    // If $row is still -1 at this stage, something has gone wrong.
    if ($openstring == '') {
      $this->fail('Could not find job ID ' . $job->jid . ' in the jobs table.');
      return;
    }

    $opens = drupal_substr($openstring, 0, 1);
    $this->assertEqual(
      $opens,
      '0',
      t('The job has been opened by 0 users so far (actual: @opens)', array('@opens' => $opens))
    );

    // Use the tracking image for the job's first recipient to simulate an
    // open. Open count should now be one.
    $this->drupalGet('wildfire/track/' . $job->type . '/' . $job->extra . '/' . $list_entries[0]['uid'] . '/' . $job->jid);

    // TODO: Check the jobs summary page too
    $this->drupalGet('admin/wildfire/jobs/history');

    $xpath = $this->xpath('//table[@id="wildfire-jobs-table"]/tbody/tr');
    $openstring = $xpath[$num]->td[3];

    $opens = drupal_substr($openstring, 0, 1);
    $this->assertEqual(
      $opens,
      '1',
      t('The job has been opened by 1 user so far (actual: @opens)', array('@opens' => $opens))
    );

    // Grab any old link from this job. Simulate a click by the second job
    // recipient. Opens should now be 2.
    $query = db_select('wildfire_links', 'cl')
      ->fields('cl', array(
      'linkid',
    ));
    $query->condition('jid', $job->jid, '=');
    $query->range(0, 1);
    $result = $query->execute();

    $linkid = $result->fetchField();

    if ($linkid === FALSE) {
      $this->fail('Unable to find any links to track on job' . $job->jid);
      return;
    }

    $this->drupalGet('wildfire/link/' . $linkid . '/' . $list_entries[1]['uid']);

    // TODO: Check the jobs summary page too
    $this->drupalGet('admin/wildfire/jobs/history');

    $xpath = $this->xpath('//table[@id="wildfire-jobs-table"]/tbody/tr');
    $openstring = $xpath[$num]->td[3];

    $opens = drupal_substr($openstring, 0, 1);
    $this->assertEqual(
      $opens,
      '2',
      t('The job has been opened by 2 users so far (actual: @opens)', array('@opens' => $opens))
    );
  }

}
