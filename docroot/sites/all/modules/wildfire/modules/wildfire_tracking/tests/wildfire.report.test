<?php
/**
 * @file
 * Tests the report generation system.
 */
module_load_include('test', 'wildfire', 'tests/wildfire');

/**
 * Test the reporting system.
 */
class WildfireReportsTestCase extends WildfireWebTestCase {
  protected $reportJob;
  protected $linkid;

  public static function getInfo() {
    return array(
      'name' => 'Tracking - Reports',
      'description' => 'Test the reporting functionality of the Wildfire module.',
      'group' => 'Wildfire',
    );
  }

  public function setUp() {
    // Generic setup, eg, user, etc.
    parent::setUp();

    // Create some extra permissions needed for this module
    $permissions = array(
      'use wildfire jobs',
    );

    // Add a new role with these permissions
    $new_role = $this->drupalCreateRole($permissions);

    // Add this additional role to the user account.
    $this->user->roles[$new_role] = $new_role;
    user_save($this->user);

    // Log in again to ensure the permissions are being picked up
    $this->drupalLogin($this->user);
  }

  /**
   * Main test function for the reports.
   */
  public function testReports() {
    // Test if setup failed.
    if ($this->preFail !== FALSE) {
      $preFail = is_string($this->preFail)
        ? $this->preFail
        : 'Setup failed. Test aborted.';
      $this->fail($preFail);
      return;
    }

    $start = microtime();

    // Generate a local job and set it to prepared, it, thereby creating some
    // dummy links we can track and see in reports.
    $this->reportJob = $this->generateJob();
    $job = new WildfireClientJob($this->reportJob['jid']);

    /**
     * Writing directly to the database for this Job - discouraged, but in
     * testing, we need to emulate that the job has been processed without
     * actually needing to process it as we want to check each piece in turn
     */
    $save_record = array(
      'jid' => $this->reportJob['jid'],
      'status' => WILDFIRE_JOB_PREPARED,
      'last_modified' => time(),
      'processed_count' => $job->getListUsersCount(),
      'count' => $job->getListUsersCount(),
    );
    $saved = drupal_write_record('wildfire_jobs', $save_record, 'jid');

    // Reload to get the new status
    $job->load($this->reportJob['jid']);
    $job->getContent();

    // List the tests here.
    $this->reportsChartAPI();
    $this->reportsJobPage();
    $this->reportsPage();
    $this->reportsLinkPage();

    $this->pass(t(
      'Tests completed in !time seconds',
      array('!time' => $this->elapsedTime($start))
    ));
  }

  /**
   * Test the API calls for reporting, including WildfireChart class.
   *
   */
  protected function reportsChartAPI() {
    module_load_include('class', 'wildfire_tracking', 'wildfire_tracking');

    $this->reportsPieChart();
    $this->reportsLineChart();
    $this->reportsBarChart();
  }

  protected function reportsPieChart() {
    // Test with default constructor.
    $chart = new WildfirePieChart();
    $this->assertEqual(
      $chart->type,
      'p3',
      t('Pie chart default type is fine')
    );
    $this->assertEqual(
      $chart->width,
      300,
      t('Pie chart default width is fine')
    );
    $this->assertEqual(
      $chart->height,
      250,
      t('Pie chart default height is fine')
    );
    $this->assertEqual(
      count($chart->series),
      0,
      t('Pie chart series is emtpy')
    );
  }

  protected function reportsLineChart() {
    $chart = new WildfireLineChart();
    $this->assertEqual(
      $chart->type,
      'lc',
      t('Line chart default type is fine')
    );
    $this->assertEqual(
      $chart->width,
      300,
      t('Line chart default width is fine')
    );
    $this->assertEqual(
      $chart->height,
      250,
      t('Line chart default height is fine')
    );
    $this->assertEqual(
      count($chart->series),
      0,
      t('Line chart series is emtpy')
    );
  }

  protected function reportsBarChart() {
    $chart = new WildfireBarChart();
    $this->assertEqual(
      $chart->type,
      'bvg',
      t('Bar chart default type is fine')
    );
    $this->assertEqual(
      $chart->width,
      300,
      t('Bar chart default width is fine')
    );
    $this->assertEqual(
      $chart->height,
      250,
      t('Bar chart default height is fine')
    );
    $this->assertEqual(
      count($chart->series),
      0,
      t('Bar chart series is emtpy')
    );
  }

  /**
   * Test that there are report links on the job list page.
   */
  protected function reportsJobPage() {
    // Make sure there are view report links on the page.
    $this->drupalGet('admin/wildfire/jobs');
    $this->assertLink('View report');
  }

  /**
   * Test the report overview page for a particular job.
   */
  protected function reportsPage() {
    // We need 3 users on this job so that the percentages will have decimals
    $generated_job = $this->generateJob(2, 3);

    /**
     * Build the job, and process the content. The process of pulling in the
     * content will build the tracking alias links, so is required before you
     * can check that the report is actually correct.
     */
    $job = new WildfireClientJob($generated_job['jid']);

    /**
     * Writing directly to the database for this Job - discouraged, but in
     * testing, we need to emulate that the job has been processed without
     * actually needing to process it as we want to check each piece in turn
     */
    $save_record = array(
      'jid' => $generated_job['jid'],
      'status' => WILDFIRE_JOB_PREPARED,
      'last_modified' => time(),
      'processed_count' => $job->getListUsersCount(),
      'count' => $job->getListUsersCount(),
    );
    $saved = drupal_write_record('wildfire_jobs', $save_record, 'jid');

    // Reload to get the new status
    $job->load($generated_job['jid']);
    $job->getContent();

    // Get the list generated for the Job
    $list_entries = $job->getListUsers();

    // Simulate one open.
    $this->drupalGet('wildfire/track/' . $job->type . '/' . $job->extra . '/' . $list_entries[0]['uid'] . '/' . $job->jid);

    $this->drupalGet('admin/wildfire/report/job/' . $job->jid . '/view');
    $this->assertText('The number of users who opened the email.');

    // Find the pie chart for open rates and check that the parameters look
    // all right.
    $xpath = $this->xpath('//img[@id="report-open-pie"]');
    $xpath = (array) $xpath[0];
    $imgsrc = $xpath['@attributes']['src'];

    $this->assertNotIdentical(
      strpos($imgsrc, 'cht=p3'),
      FALSE,
      t('Chart type was found')
    );
    $this->assertNotIdentical(
      strpos($imgsrc, 'chs=300x150'),
      FALSE,
      t('Chart size was found')
    );
    $this->assertNotIdentical(
      strpos($imgsrc, 'chdl='),
      FALSE,
      t('Chart series was found')
    );

    // Grab the chd= part which should have the raw numbers in it.
    $matches_raw = array();
    $matches_display = array();
    preg_match('/chd=t%3A(.+?)%2C(.+?)&/', $imgsrc, $matches_raw);
    preg_match('/chdl=Opens%20%28(.+?)%25%29%7CNot%20tracked%20%28(.+?)%25%29&/', $imgsrc, $matches_display);

    $this->assertEqual(
      drupal_substr($matches_raw[1], 0, 3),
      '33.',
      t('Raw opened rate value correct')
    );
    $this->assertEqual(
      drupal_substr($matches_raw[2], 0, 3),
      '66.',
      t('Raw not opened rate value correct')
    );
    $this->assertEqual(
      $matches_display[1],
      '33.33',
      t('Displayed opened rate value correct')
    );
    $this->assertEqual(
      $matches_display[2],
      '66.67',
      t('Displayed not opened rate value correct')
    );

    module_load_include('inc', 'wildfire_broadcasts', 'wildfire_broadcasts.api');
    module_load_include('inc', 'wildfire_jobs', 'wildfire_jobs.send');
    module_load_include('inc', 'wildfire_jobs', 'wildfire_jobs.api');

    // Make sure there are the correct number of rows in the links table.
    $query = db_select('wildfire_links', 'cl');
    $query->condition('jid', $this->reportJob['jid'], '=');
    $query->addExpression('COUNT(1)', 'count');
    $result = $query->execute();

    $num_rows = $result->fetchField();

    $xpath = $this->xpath('//table[@id="report-links-table"]/tbody/tr');
    $this->assertEqual(
      count($xpath),
      $num_rows,
      t('Correct number of rows in links table')
    );

    // Make sure that there is not a "who?" link on the page, since nobody
    // has clicked a link yet.
    $this->assertNoLink('who?');

    // There should also appear "Never" instead of a timestamp.
    $this->assertText('Never');

    // Test by simulating some link clicks. Get a random link out of the
    // database for this, and also get the details of our job's recipient.
    $query = db_select('wildfire_links', 'cl')
      ->fields('cl', array(
        'linkid'
      ));
    $query->condition('jid', $this->reportJob['jid'], '=');
    $result = $query->execute();

    $linkid = $result->fetchField();

    // Get the list generated for the Job
    $list_entries = wildfire_list_get($this->reportJob['lid'], FALSE);

    $recipient = $list_entries[0];
    $uid = $recipient['uid'];

    // Simulate 4 clicks on the link.
    for ($i = 0; $i < 4; $i++) {
      $this->drupalGet('wildfire/link/' . $linkid . '/' . $uid);
      sleep(1); // Wait so that there are not two clicks in the same second.
    }

    // View the report page again. We should see that there are 4 clicks and
    // 1 unique click for the link we simulated.
    $this->drupalGet('admin/wildfire/report/job/' . $this->reportJob['jid'] . '/view');
    $xpath = $this->xpath('//tr[contains(@class, "linkid-' . $linkid . '")]');
    $tds = (array) ($xpath[0]);
    $tds = $tds['td'];

    // Test total clicks.
    $this->assertEqual(
      drupal_substr($tds[1], 0, 1),
      4,
      t('Total clicks is 4')
    );

    // Test unique clicks.
    $this->assertEqual(
      $tds[2],
      1,
      t('Unqiue clicks is 1')
    );

    // There should now be a link to "who?".
    $this->assertLink('who?');

    // We want to use the link on which we simulated clicked later in the
    // test class, so store it.
    $this->linkid = $linkid;

    // Load a junk job, and check that we get a 'no can do' message
    $invalid_jid = rand(999, 9999);
    $this->drupalGet('admin/wildfire/report/job/' . $invalid_jid . '/view');

    $this->assertText(
      t(
        'Cannot load report as Job #!jid is invalid',
        array(
          '!jid' => $invalid_jid
        )
      )
    );

    // Create an embryonic job, and check that we get a 'no can do' for the
    // report link. Note this is a different error message to an invalid job.
    $generated_job = $this->generateJob(2, 3);

    $this->drupalGet('admin/wildfire/report/job/' . $generated_job['jid'] . '/view');

    $this->assertText(t('A report cannot be generated for this Job'));

    $this->drupalGet('admin/wildfire/report/job/' . $generated_job['jid'] . '/opens');

    $this->assertText(t('A report cannot be generated for this Job'));

  }

  /**
   * Test the report page for an individual link.
   */
  protected function reportsLinkPage() {
    // Get the link ID we stored earlier.
    $linkid = $this->linkid;

    $this->drupalGet('admin/wildfire/report/link/' . $linkid);
    $this->assertText('This table lists who clicked on each link');

    $xpath = $this->xpath('//table[@id="link-click-report"]/tbody/tr');

    // Make sure that there are the same number of rows as there are link
    // clicks for this job.
    $this->assertEqual(
      count($xpath),
      4,
      t('Correct number of rows (4) in link table')
    );
  }
}
