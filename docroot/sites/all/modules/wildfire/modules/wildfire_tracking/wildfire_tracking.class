<?php
/**
 * @file
 *  wildfire_tracking.inc
 *
 * Helper class for making calls to the Google Charts API.
 *
 * @author Chris Cohen <chris.cohen@tiger-fish.com>
 */

abstract class WildfireChart {

  // Chart dimensions and type.
  private $type;
  private $width;
  private $height;

  // This should be an array whose keys are the labels to be used on the chart
  // and the values are the values on the chart. For example:
  // array(
//   'January'  => 30,
//   'February' => 40,
//   'March'    => 50,
//   'April'    => 60,
  // );
  private $series;

  /**
   * Constructor.
   *
   * @param string $type
   *    The type of chart using Google Chart API's types.
   * @param int $width
   *    The width of the resulting image in pixels.
   * @param int $height
   *    The height of the resulting image in pixels.
   * @param array $series
   *    The series definition for the chart
   */
  public function __construct($type = 'bvs', $width = 300, $height = 250, $series = array()) {
    $this->type   = $type;
    $this->width  = $width;
    $this->height = $height;
    $this->series = $series;
  }

  abstract public function buildUrl();

  /**
   * Check all internal properties to make sure their values are correct.
   */
  abstract protected function check();

  /**
   * Create an image tag that can be put into a web page.
   *
   * @param string $alt
   *    The alt attribute for the img tag.
   * @param string $title
   *    The title attribute for the img tag.
   * @param array $attributes
   *    Any attributes that should be added, such as a class or an ID.
   * @return string
   *    A fully XHTML-compatible img tag that will display the chart using the
   *    Google Chart API.
   */
  public function render($alt = 'Chart', $title = 'Chart', $attributes = array()) {
    // Make sure all the necessary internal properties are set.
    $this->check();

    // Set up the URL to use when calling the Chart API.
    $url = $this->buildUrl();

    // Add the title, alt, width and height to the attributes, then use Drupal's
    // API to format them into XHTML.
    $attributes['alt'] = $alt;
    $attributes['title'] = $title;
    $attributes['width'] = $this->width;
    $attributes['height'] = $this->height;
    $attributes = drupal_attributes($attributes);

    // Formulate a fully functional img tag and return it.
    return '<img src="' . $url . '" ' . $attributes . '/>';
  }
}


class WildfirePieChart extends WildfireChart {

    public function __construct($type = 'p3', $width = 300, $height = 250, $series = array()) {
        $this->type   = $type;
        $this->width  = $width;
        $this->height = $height;
        $this->series = $series;
      }

  /**
   * Build the Google Chart API URL.
   *
   * @return string
   *    The URL, including query string, that will be used to generate the
   *    chart API call.
   */
  public function buildUrl() {
    // Set up the base URL for the chart API.
    $url = 'http://chart.apis.google.com/chart?';
    $pieces = array();

    // URL-encode the series labels and data.
    $series = array();

    // Add the chart type to the URL.
    $pieces['cht'] = $this->type;

    // Add the chart size.
    $pieces['chs'] = $this->width . 'x' . $this->height;

    // Add the chart data itself.
    $data = implode(',', $this->series);
    $pieces['chd'] = 't:' . $data;

    // Add the chart labels.
    $pieces['chdl'] = implode('|', array_keys($this->series));

    // Transparent background please!
    $pieces['chf'] = 'bg,s,00000000';

    // Formulate the URL itelf.
    return url(
      'http://chart.apis.google.com/chart',
      array(
        'query' => $pieces,
        'absolute' => TRUE,
        'external' => TRUE,
      )
    );
  }

  protected function check() {
    $defaults = array(
      'type' => 'bvs',
      'width' => 300,
      'height' => 250,
      'series' => array(
        'Sample 1' => 60,
        'Sample 2' => 40,
      ),
    );

    // Check that each of the properties has at least been set.
    foreach ($defaults as $key => $default) {
      if (!isset($this->$key) || empty($this->$key)) {
        $this->$key = $default;
      }
    }
  }
}

class WildfireLineChart extends WildfireChart {

  public function __construct($type = 'lc', $width = 300, $height = 250, $series = array()) {
    $this->type   = $type;
    $this->width  = $width;
    $this->height = $height;
    $this->series = $series;
  }

  /**
   * Build the Google Chart API URL.
   *
   * @return string
   *    The URL, including query string, that will be used to generate the
   *    chart API call.
   */
  public function buildUrl() {
    // Set up the base URL for the chart API.
    $url = 'http://chart.apis.google.com/chart?';
    $pieces = array();

    // URL-encode the series labels and data.
    $series = array();

    // Add the chart type to the URL.
    $pieces['cht'] = $this->type;

    // Add the chart size.
    $pieces['chs'] = $this->width . 'x' . $this->height;

    // Add the chart data itself.
    $data = $this->series['values'];
    $pieces['chd'] = 't2:' . $data;

    // Add the chart line labels.
    if (isset($this->series['line_labels']) && !empty($this->series['line_labels'])) {
      $pieces['chdl'] = $this->series['line_labels'];
    }

    // X and Y axis co-ordinates labels separated by pipe.
    if (isset($this->series['co-ordinates']) && !empty($this->series['co-ordinates'])) {
      $pieces['chxl'] = $this->series['co-ordinates'];
      $pieces['chxt'] = 'x,y';
    }

    // Transparent background please!
    $pieces['chf'] = 'bg,s,00000000';

    // Set the graph title.
    if (isset($this->series['graph_title']) && !empty($this->series['graph_title'])) {
      $pieces['chtt'] = $this->series['graph_title'];
    }

    // Multiple color can be given separated bu comma if multiple lines are given.
    if (isset($this->series['line_color']) && !empty($this->series['line_color'])) {
      $pieces['chco'] = $this->series['line_color'];
    }

    // Formulate the URL itelf.
    return url(
      'http://chart.apis.google.com/chart',
      array(
        'query' => $pieces,
        'absolute' => TRUE,
        'external' => TRUE,
      )
    );
  }

  protected function check() {
    $defaults = array(
      'type' => 'lc',
      'width' => 300,
      'height' => 250,
      'series' => array(
      ),
    );

    // Check that each of the properties has at least been set.
    foreach ($defaults as $key => $default) {
      if (!isset($this->$key) || empty($this->$key)) {
        $this->$key = $default;
      }
    }
  }
}

class WildfireBarChart extends WildfireChart {

  public function __construct($type = 'bvg', $width = 300, $height = 250, $series = array()) {
    $this->type   = $type;
    $this->width  = $width;
    $this->height = $height;
    $this->series = $series;
  }

  /**
   * Build the Google Chart API URL.
   *
   * @return string
   *    The URL, including query string, that will be used to generate the
   *    chart API call.
   */
  public function buildUrl() {
    // Set up the base URL for the chart API.
    $url = 'http://chart.apis.google.com/chart?';
    $pieces = array();

    // URL-encode the series labels and data.
    $series = array();

    // Add the chart type to the URL.
    $pieces['cht'] = $this->type;

    // Add the chart size.
    $pieces['chs'] = $this->width . 'x' . $this->height;

    // Add the chart data itself.
    $data = $this->series['values'];
    $pieces['chd'] = 't:' . $data;

    // Add the chart bar labels.
    if (isset($this->series['bar_labels']) && !empty($this->series['bar_labels'])) {
      $pieces['chdl'] = $this->series['bar_labels'];
    }

    // X and Y axis co-ordinates labels separated by pipe.
    if (isset($this->series['co-ordinates']) && !empty($this->series['co-ordinates'])) {
      $pieces['chxl'] = $this->series['co-ordinates'];

    }

    if ($this->type == 'bhg') {
      $pieces['chxt'] = 'y,x';
    } else {
      $pieces['chxt'] = 'x,y';
    }

    // Transparent background please!
    $pieces['chf'] = 'bg,s,00000000';

    $pieces['chbh'] = 'a';

    // Set the graph title.
    if (isset($this->series['graph_title']) && !empty($this->series['graph_title'])) {
      $pieces['chtt'] = $this->series['graph_title'];
    }

    // Multiple color can be given separated bu comma if multiple bars are given.
    if (isset($this->series['bar_color']) && !empty($this->series['bar_color'])) {
      $pieces['chco'] = $this->series['bar_color'];
    }

    // Formulate the URL itelf.
    return url(
      'http://chart.apis.google.com/chart',
      array(
        'query' => $pieces,
        'absolute' => TRUE,
        'external' => TRUE,
      )
    );
  }

  protected function check() {
    $defaults = array(
      'type' => 'bvg',
      'width' => 300,
      'height' => 250,
      'series' => array(
      ),
    );

    // Check that each of the properties has at least been set.
    foreach ($defaults as $key => $default) {
      if (!isset($this->$key) || empty($this->$key)) {
        $this->$key = $default;
      }
    }
  }
}