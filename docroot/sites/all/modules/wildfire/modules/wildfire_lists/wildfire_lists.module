<?php
/**
 * @file
 *  wildfire_lists.module
 *
 * Manages Wildfire mailing lists
 *
 * @author Craig Jones <craig@tiger-fish.com>
 *
 * Code derived from Wildfire 1:
 * @author Chris Cohen <chris.cohen@tiger-fish.com>
 *
 * TODO: Refactor to class-based system and API.
 */

define('WILDFIRE_LIST_UNLOCKED', 0);
define('WILDFIRE_LIST_LOCKED', 1);
define('WILDFIRE_LIST_USER_UNLOCKED', 0);
define('WILDFIRE_LIST_USER_LOCKED', 1);
define('WILDFIRE_LIST_USER_PENDING_REMOVAL', 2);

/**
 * Implements hook_permission().
 * @return array
 */
function wildfire_lists_permission() {
  return array(
    'use wildfire lists' => array(
      'title' => t('use wildfire lists'),
      'description' => t('Allows use of the Wildfire Lists system'),
    ),
    'administer wildfire lists' => array(
      'title' => t('administer wildfire lists'),
      'description' => t('Allows settings to be changed for Wildfire Lists'),
    ),
    'lock unlock wildfire lists' => array(
      'title' => t('lock unlock wildfire lists'),
      'description' => t('Role can lock and unlock lists arbitrarily. USE WITH CAUTION!'),
    ),
    'clean wildfire lists' => array(
      'title' => t('clean wildfire lists'),
      'description' => t('Role can manually clean lists.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function wildfire_lists_menu() {
  $items = array();

  /**
   * Lists
   */
  $items['admin/wildfire/lists'] = array(
    'title' => 'Lists',
    'description' => 'View the mailing lists',
    'access arguments' => array('use wildfire lists'),
    'page callback' => 'wildfire_lists_list',
    'file' => 'wildfire_lists.admin.inc',
  );
  $items['admin/wildfire/lists/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'description' => 'View the mailing lists',
    'access arguments' => array('use wildfire lists'),
    'page callback' => 'wildfire_lists_list',
    'file' => 'wildfire_lists.admin.inc',
    'weight' => 0,
  );
  $items['admin/wildfire/lists/add'] = array(
    'title' => 'Add',
    'type' => MENU_LOCAL_TASK,
    'description' => 'Add a mailing list',
    'access arguments' => array('administer wildfire lists'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wildfire_lists_add_form'),
    'file' => 'wildfire_lists.admin.inc',
    'weight' => 1,
  );
  $items['admin/wildfire/lists/import'] = array(
    'title' => 'Import',
    'type' => MENU_LOCAL_TASK,
    'description' => 'Import a list from a CSV file',
    'access arguments' => array('administer wildfire lists'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wildfire_lists_import_form'),
    'file' => 'wildfire_lists.admin.inc',
    'weight' => 2,
  );
  $items['admin/wildfire/lists/%'] = array(
    'title' => 'View',
    'title callback' => 'wildfire_title_list',
    'title arguments' => array(3),
    'type' => MENU_CALLBACK,
    'description' => 'View a specific mailing list',
    'access arguments' => array('use wildfire lists'),
    'page callback' => 'wildfire_lists_view',
    'page arguments' => array(3),
    'file' => 'wildfire_lists.admin.inc',
  );
  $items['admin/wildfire/lists/%/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'description' => 'View a specific mailing list',
    'access arguments' => array('use wildfire lists'),
    'page callback' => 'wildfire_lists_view',
    'page arguments' => array(3),
    'file' => 'wildfire_lists.admin.inc',
  );
  $items['admin/wildfire/lists/%/delete'] = array(
    'title' => 'Delete',
    'type' => MENU_LOCAL_TASK,
    'description' => 'Delete a given mailing list',
    'access arguments' => array('administer wildfire lists'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wildfire_lists_delete_form', 3),
    'file' => 'wildfire_lists.admin.inc',
  );
  $items['admin/wildfire/lists/%/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_LOCAL_TASK,
    'description' => 'Edit a given mailing list',
    'access arguments' => array('administer wildfire lists'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wildfire_lists_edit_form', 3),
    'file' => 'wildfire_lists.admin.inc',
  );
  $items['admin/wildfire/lists/%/export'] = array(
    'title' => 'Export',
    'type' => MENU_LOCAL_TASK,
    'description' => 'Export a given mailing list in CSV format.',
    'access arguments' => array('administer wildfire lists'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wildfire_lists_export_form', 3),
    'file' => 'wildfire_lists.admin.inc',
  );
  $items['admin/wildfire/lists/%/lock'] = array(
    'title' => 'Lock',
    'type' => MENU_CALLBACK,
    'description' => 'Lock / unlock a specific list',
    'access arguments' => array('lock unlock wildfire lists'),
    'page callback' => 'wildfire_lists_lock_toggle',
    'page arguments' => array(3),
    'file' => 'wildfire_lists.admin.inc',
  );
  $items['admin/wildfire/lists/%/clean'] = array(
    'title' => 'Clean list',
    'type' => MENU_CALLBACK,
    'description' => 'Clean a specific list',
    'access arguments' => array('clean wildfire lists'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wildfire_lists_clean_form', 3),
    'file' => 'wildfire_lists.admin.inc',
  );
  $items['admin/wildfire/lists/user/remove/%/%'] = array(
    'title' => 'Remove user from list',
    'type' => MENU_CALLBACK,
    'description' => 'Removes the user from the specified list',
    'access arguments' => array('administer wildfire lists'),
    'page callback' => 'wildfire_lists_user_remove_ajax',
    'page arguments' => array(5, 6),
    'file' => 'wildfire_lists.admin.inc',
  );

  /**
   * User profile: adds a tab to allow user to be added to lists.
   */
  $items['user/%/wildfire-add'] = array(
    'title' => 'Add user to mailing list',
    'type' => MENU_LOCAL_TASK,
    'description' => 'Add the specified user to a mailing list.',
    'access arguments' => array('administer wildfire lists'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wildfire_lists_user_lists_form', 1),
    'file' => 'wildfire_lists.admin.inc',
    'weight' => 2,
  );

  /**
   * Unsubscribe
   */
  $items['wildfire/unsubscribe/%'] = array(
    'title' => 'Unsubscribe',
    'description' => 'Unsubscribe from a mailing',
    'access callback' => TRUE,
    'page callback' => 'wildfire_unsubscribe_page',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'file' => 'wildfire_lists.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function wildfire_lists_theme() {
  $tpath = drupal_get_path('module', 'wildfire_lists') . '/templates';

  return array(
    'wildfire_list_selector' => array(
       'file' => 'wildfire_lists.theme',
       'path' => $tpath,
       'template' => 'wildfire-list-selector',
    ),
    'wildfire_lists_import_form_step2' => array(
      'render element' => 'form',
      'file' => 'wildfire_lists.theme',
      'path' => $tpath,
    ),
    'wildfire_lists_import_form_step3' => array(
      'render element' => 'form',
      'file' => 'wildfire_lists.theme',
      'path' => $tpath,
    ),
    'wildfire_list_unsubscribe' => array(
      'variables' => array(
        'outcome' => FALSE,
        'mail' => NULL,
      ),
      'file' => 'wildfire_lists.theme',
      'path' => $tpath,
      'template' => 'wildfire-unsubscribe',
    ),
    'wildfire_list_row' => array(
      'render element' => 'row',
      'file' => 'wildfire_lists.theme',
      'path' => $tpath,
    ),
  );

}

/**
 * Implements hook_form_alter().
 *
 * The list module adds extra options to the Wildfire settings form for
 * configuring the opt out label / description and default list settings.
 * TODO: When settings are reorganised, move list settings to a sub tab
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function wildfire_lists_form_alter(&$form, &$form_state, $form_id) {

  module_load_include('inc', 'wildfire_lists', 'wildfire_lists.api');
  module_load_include('inc', 'wildfire_lists', 'wildfire_lists.admin');

  if ($form_id == 'wildfire_settings_form') {

    // Add our custom validator to the chain
    $form['#validate'][] = 'wildfire_lists_form_validate';

    // Get optout label and description for user profile edit page as this is
    // editable it needs to come from the variables table in the database
    $optout_text = wildfire_lists_user_get_optout_text();

    $form['optout_fieldset'] = array(
      '#type' => 'fieldset',
      '#title' => t('Optout settings'),
    );
    $form['optout_fieldset']['wildfire_optout_label'] = array(
      '#type' => 'textfield',
      '#title' => t('Opt out label'),
      '#required' => TRUE,
      '#description' => t('This is the text used as the label for the "Opt Out of all emails" check box on the user profile edit page'),
      '#default_value' => $optout_text['label'],
    );
    $form['optout_fieldset']['wildfire_optout_description'] = array(
      '#type' => 'textarea',
      '#title' => t('Opt out description'),
      '#cols' => 60,
      '#rows' => 3,
      '#description' => t('This is the text used as the description for the "Opt Out of all emails" check box on the user profile edit page'),
      '#default_value' => $optout_text['description'],
    );

    // Get the default list. If there is a list called 'Subscribers', this will
    // be the default. If two lists are called this, one of these will be the
    // default. If there are no lists called this, the first list in the array
    // returned by wildfire_lists_get() will be used.
    $lists = wildfire_lists_get();
    $default_list = array();

    foreach ($lists as $lid => $list) {
      if ($list == 'Subscribers') {
        $default_list['lid'] = $lid;
        $default_list['name'] = $list;
        break;
      }
    }

    if (!count($default_list)) {
      $first = each($lists);
      $default_list['lid'] = $first[0];
      $default_list['name'] = $first[1];
    }

    $options = array(0 => t('(none)'));

    foreach ($lists as $lid => $list) {
      $options[$lid] = $list;
    }

    $form['list_fieldset'] = array(
      '#type' => 'fieldset',
      '#title' => t('List settings'),
    );
    $form['list_fieldset']['wildfire_registration_add_to_list'] = array(
      '#type' => 'checkbox',
      '#title' => t('Automatically add new users to a mailing list'),
      '#default_value' => variable_get('wildfire_registration_add_to_list', FALSE),
    );
    $form['list_fieldset']['wildfire_registration_list'] = array(
      '#type' => 'select',
      '#title' => t('Default list on registration'),
      '#description' => t('When a user registers on the site, the system will automatically place the user in the specified list.'),
      '#options' => $options,
      '#default_value' => variable_get('wildfire_registration_list', $default_list['lid']),
      '#states' => array(
        'visible' => array(
          ':input[name="wildfire_registration_add_to_list"]' => array('checked' => TRUE),
        )
      )
    );

  }

  if ( $form_id == 'user_register_form' || $form_id == 'user_profile_form') {

    if ($form_id == 'user_profile_form') {
      $account = user_load($form['#user']->uid);
      $global_optout = isset($account->wildfire_optouts[0]);
    }
    else {
      $global_optout = FALSE;
    }

    // Get the base FAPI form, then set the default value of the global
    // optout checkbox depending on whether the user is globally opted out.
    $user_form = wildfire_user_form();
    $form = array_merge($form, $user_form);
    $form['wildfire_fieldset']['global_optout']['#default_value'] = $global_optout;

  }

}

/**
 * Custom form validation for our extra entries in the wildfire settings form
 *
 * @param $form
 * @param $form_state
 */
function wildfire_lists_form_validate($form, &$form_state) {

// Check label text is safe
  $input_label = $form_state['values']['wildfire_optout_label'];
  $output_label = check_plain(strip_tags($input_label));
  if ($input_label !== $output_label) {
    form_set_error(
      'wildfire_optout_label',
      t('The label must contain no HTML and be valid UTF-8 text')
    );
  }

  // Check description text is safe
  $input_description = $form_state['values']['wildfire_optout_description'];
  $output_description = check_plain(strip_tags($input_description));
  if ($input_description !== $output_description) {
    form_set_error(
      'wildfire_optout_description',
      t('The description must contain no HTML and be valid UTF-8 text')
    );
  }

}


/**
 * Implements hook_user_insert().
 */
function wildfire_lists_user_insert(&$edit, $account, $category) {
  module_load_include('inc', 'wildfire_lists', 'wildfire_lists.api');

  /**
   * 2011-08-16, craig: This element is only actually set on users that
   * came in via an import, and the flag triggers special behaviour for
   * those users. Thus it's not always defined; explicitly set to
   * FALSE (i.e. not an import) on users it's NOT set on so that checks
   * for its value later on do the right thing.
   * see: wildfire_list_batch_import_process()
   */
  if (!isset($edit['wildfire_import'])) {
    $edit['wildfire_import'] = FALSE;
  }

  if (
        ($lid = variable_get('wildfire_registration_list', 0)) > 0 &&
        variable_get('wildfire_registration_add_to_list', FALSE) &&
        wildfire_list_valid($lid) &&
        // Check the special flag that indicates we're performing an import, as
        // we don't want to force the user into the default list when importing.
        $edit['wildfire_import'] !== TRUE
      ) {
    wildfire_lists_user_add($account->uid, $lid);
  }

  if (isset($edit)) {
    global $user;
    // Insert a global optout if the user has checked that box.
    if (!empty($edit['global_optout'])) {
      wildfire_list_add_optout(0, $account->uid, REQUEST_TIME, 1, $user->uid);
    }
  }

}

/**
 * Implements hook_user_load().
 */
function wildfire_lists_user_load($users) {
  module_load_include('inc', 'wildfire_lists', 'wildfire_lists.api');

  // Add the user's optouts to the user object if uid is not 0.

  /**
   * 2011-09-13, craig: This hook is called during installation,
   * but as you can't use the table until it's instantiated, the installation
   * fails. Thus bypass the checks if the table doesn't exist (e.g. in install)
   */

  if (db_table_exists('wildfire_optouts')) {
    foreach ($users as $account) {
      if ($account->uid > 0) {
        $account->wildfire_optouts = wildfire_user_get_optouts($account->uid);
      }
    }
  }
}

/**
 * Implements hook_user_update().
 */
function wildfire_lists_user_update(&$edit, $account, $category) {

  module_load_include('inc', 'wildfire_lists', 'wildfire_lists.api');

  if (isset($edit)) {
    global $user;

    // Update this user's optouts. Begin by deleting them all.
    wildfire_list_remove_optouts($account->uid);

    // Insert a global optout if the user has checked that box.
    if (!empty($edit['global_optout'])) {
      wildfire_list_add_optout(0, $account->uid, REQUEST_TIME, 1, $user->uid);
    }
  }
}

/**
 * Implements hook_user_delete().
 *
 * For now, all this does is behave the same as user cancel.
 */
function wildfire_lists_user_delete($account) {
  return wildfire_lists_user_cancel(array(), $account, 'user_cancel_delete');
}

/**
 * Implements hook_user_cancel().
 */
function wildfire_lists_user_cancel($edit, $account, $method) {
  /**
   * 2011-08-22, craig: Upon user deletion, all references bar tracking
   * should be removed from the wildfire_* tables
   *
   * In order to maintain tracking information, the info should only be
   * removed from the following tables:
   *
   * wildfire_lists_users
   * wildfire_optouts
   *
   * This will ensure that the user is no longer attached to lists,
   * however upon reference to the deleted user ID in the logs, it
   * should display 'Deleted User' for the log lines kept around
   * to ensure that the numbers aren't skewed.
   */

  if (db_delete('wildfire_lists_users')
    ->condition('uid', $account->uid, '=')
    ->execute()
  === FALSE) {
    drupal_set_message(t('Unable to remove user from lists table'), 'error');
    //$error =
  }

  if (db_delete('wildfire_optouts')
    ->condition('uid', $account->uid, '=')
    ->execute()
  === FALSE) {
    drupal_set_message(t('Unable to remove user from opt-outs table'), 'error');
  }

}


/**
 * Gets the opt out label and description for the user profile edit page
 *
 * @return array
 *    An associative array containing the label and description for the
 *    opt out checkbox on the user profile edit page
 */
function wildfire_lists_user_get_optout_text() {
  $return = array();
  $return['label'] = variable_get(
    'wildfire_optout_label',
    'Opt out of all emails'
  );
  $return['description'] = variable_get(
    'wildfire_optout_description',
    'If checked, no bulk emails will be sent. Note that this will not affect regular emails, such as purchase confirmations, or password reminders, where appropriate.'
  );
  return $return;
}






/**
 * Title callback for the list-related pages.
 *
 * @param int $lid
 *    The list ID.
 *
 * @return string
 *    The title text
 *
 * TODO: lists/% and lists/%/view have inconsistent titling
 */
function wildfire_title_list($lid = 0) {
  $query = db_select('wildfire_lists', 'cl')
    ->fields('cl', array(
    'name'
  ));
  $query->condition('lid', $lid, '=');
  $result = $query->execute();

  $title = $result->fetchField();
  return $title === FALSE ? t('Unknown list') : $title;
}
