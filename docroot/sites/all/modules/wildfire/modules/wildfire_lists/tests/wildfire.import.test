<?php
/**
 * @file
 * Tests the import into list routines.
 */
module_load_include('test', 'wildfire', 'tests/wildfire');

class WildfireListImportTestCase extends WildfireWebTestCase {

  protected $list;

  /** ------------------------------------------------------------------------
   * Get Information
   *
   * @access public
   * @return array
   */
  public static function getInfo() {
    return array(
      'name' => 'Lists - Import',
      'description' => 'Test the List Import functionality',
      'group' => 'Wildfire',
    );
  }

  /** ------------------------------------------------------------------------
   * Setup
   *
   * @access public
   * @return void
   */
  public function setUp() {
    // Create our random details for our example test case.
    $this->list = new stdClass();
    $this->list->name = $this->randomName(12);
    $this->csvfile = new stdClass();
    $this->csvfile->path = drupal_get_path('module', 'wildfire_lists')
      . '/tests/testsubscribers.csv';
    $this->csvfile->linecount = wildfire_get_lines_in_file(
      $this->csvfile->path
    );
    // Generic setup, eg, user, etc.
    parent::setUp();

    // Create some extra permissions needed for this module
    $permissions = array(
      'administer wildfire lists',
      'use wildfire lists',
    );

    // Add a new role with these permissions
    $new_role = $this->drupalCreateRole($permissions);

    // Add this additional role to the user account.
    $this->user->roles[$new_role] = $new_role;
    user_save($this->user);

    // Log in again to ensure the permissions are being picked up
    $this->drupalLogin($this->user);

  }

  /** ------------------------------------------------------------------------
   * Lists Test
   *
   * @access public
   * @return void
   */
  public function testListImport() {
    // Test if setup failed.
    if ($this->preFail !== FALSE) {
      $preFail = is_string($this->preFail)
        ? $this->preFail
        : 'Setup failed. Test aborted.';
      $this->fail($preFail);
      return;
    }

    $start = microtime();

    $this->listCreate();
    $this->listImportFormChecks();
    $this->listImportIntoExisting();
    $this->listImportIntoNew();
    $this->listImportMissingListName();
    $this->listImportMissingFields();

    $this->pass(t(
      'Tests completed in !time seconds',
      array('!time' => $this->elapsedTime($start))
    ));
  }


  /** ------------------------------------------------------------------------
   * Create List
   *
   * @access protected
   * @return void
   */
  protected function listCreate() {

    $this->pass(t('START: listCreate'));

    // Make sure that the add list page exists.
    $this->drupalGet('admin/wildfire/lists/add');
    $this->assertText(t('List name'));
    // Create a list by entering the form.
    $create_list = array(
      'listname' => $this->list->name,
    );
    $this->drupalPost(
      'admin/wildfire/lists/add',
      $create_list,
      t('Add')
    );
    // Confirm that it was created successfully, both outpu-wise and database.
    $this->assertText(t(
      'The list !list has been created.',
      array('!list' => $this->list->name)
    ));

    // Let's check that the list has been entered into the database.
    $query = db_select('wildfire_lists', 'cl')
      ->fields('cl', array(
      'lid'
    ));
    $query->condition('name', $this->list->name, '=');
    $result = $query->execute();

    $result = $result->fetchField();

    $this->list->id = $result;
  }

  /**
   * List Tests: Import
   */
  protected function listImportFormChecks() {

    $this->pass(t('START: listImportFormChecks'));

    // Fetch the Import page. We want to test for form fields.
    $this->drupalGet('admin/wildfire/lists/import');
    // Check that the page is displaying the correct message to the user.
    $this->assertText('Choose a CSV file to import from your local computer.');
    // Check the the file upload form, and the upload button, exist.
    $this->assertFieldById('edit-importsubmit', 'Upload');
    $this->assertFieldById(
      'edit-csvfile',
      '',
      t('File upload field exists for importing to lists.')
    );

    // Make sure we have the CSV file for testing.
    $csv = $this->csvfile->path;
    $csv = realpath($csv);
    $this->assertTrue(
      is_file($csv),
      t('Found the test CSV file for importing.')
    );

    // Upload the CSV file.
    $import = array(
      'files[csvfile]' => $csv,
    );
    $this->drupalPost(
      'admin/wildfire/lists/import',
      $import,
      t('Upload')
    );

    // Check the form shows the columns in the test file, and that they
    // default to the value of "skip".
    $this->assertFieldById(
      'edit-0',
      'skip',
      t('First column detected in output.')
    );
    $this->assertFieldById(
      'edit-1',
      'skip',
      t('Second column detected in output.')
    );
    $this->assertFieldById(
      'edit-2',
      'skip',
      t('Third column detected in output.')
    );
    $this->assertFieldById(
      'edit-3',
      'skip',
      t('Fourth column detected in output.')
    );
    $this->assertFieldById(
      'edit-4',
      'skip',
      t('Fourth column detected in output.')
    );
    // Find the list in the list selection field.
    $xpath = '//option[text()="' . $this->list->name . '"]';
    $option = $this->xpath($xpath);
    // Verify that it's actually there.
    $this->assertEqual(1, count($option), t('List found in list selection field.'));
    $option = (array) $option[0];
    // Check that the value for the list is 1. It should be because it's the
    // only one!
    $list_value = $option['@attributes']['value'];

    $query = db_select('wildfire_lists', 'cl')
      ->fields('cl', array(
      'lid'
    ));
    $query->condition('name', $this->list->name, '=');
    $result = $query->execute();

    $list_value_in_db = $result->fetchField();

    $this->assertEqual(
      $list_value_in_db,
      $list_value,
      t('List has correct value in list selection field. Value is %val and should be 1', array('%val' => $list_value))
    );

    // Grab the temporary file that the module has just created.
    // Unfortunately, it's held within a hidden field! Use xPath to find the
    // value.
    $xpath = '//input[@id="edit-file"]';
    $hidden = $this->xpath($xpath);
    $this->assertEqual(
      1,
      count($hidden),
      t('Hidden form field containing temporary CSV file found.')
    );
    // Because of SimpleXML's weird notation, we cannot access its attributes
    // property directly, so convert it to an array and grab it that way.
    $csv_tmp = (array) $hidden[0];
    $csv_tmp = $csv_tmp['@attributes']['value'];

    $this->pass(
      t('CSV path discovered was: !path',
        array(
      '!path' => $csv_tmp,
    )
      )
    );

  }

  /**
   * Check that we can import into a new list
   *
   * We skip checking the form here and assume it works; listImportFormChecks()
   * will lock out this test if it fails beforehand.
   */
  protected function listImportIntoNew() {

    $this->pass(t('START: listImportIntoNew'));

    $this->setupImportForm();

    $new_list_name = $this->randomName(16);

    // Assume that there is a 'mail' field for import in this test.
    $import = array(
      '0' => 'mail',
      'importlist' => 0,
      'newlistname' => $new_list_name,
    );

    $this->drupalPost(
      NULL,
      $import,
      t('Import')
    );

    $this->assertText('Import results');
    $this->assertLink('View the list »', 0);

    $query = db_select('wildfire_lists', 'cl')
      ->fields('cl', array(
        'lid'
      ));
    $query->condition('name', $new_list_name, '=');
    $result = $query->execute();

    $lid = $result->fetchField();

    $this->assertTrue(
      $lid > 0,
      t(
        'List ID found for list created via Import form (%lid)',
        array(
      '%lid' => $lid,
    )
      )
    );

    $query = db_select('wildfire_lists_users', 'clu')
      ->condition('lid', $lid, '=');
    $query->addExpression('COUNT(1)', 'count');
    $result = $query->execute();

    $user_count = $result->fetchField();

    $this->assertTrue(
      $user_count > 0,
      t(
        'List user count after import into new is > 0 (%count)',
        array(
      '%count' => $user_count,
    )
      )
    );

    // linecount is -1 to discount header line
    $this->assertEqual(
      $user_count,
      $this->csvfile->linecount - 1,
      t(
        'List user count matches CSV line count (%count, %csvcount)',
        array(
      '%count' => $user_count,
      '%csvcount' => $this->csvfile->linecount - 1,
    )
      )
    );

  }

  /**
   * Check that we can import into an existing list; namely, the one we
   * created in listCreate() earlier on in the testing.
   *
   * We skip checking the form here and assume it works; listImportFormChecks()
   * will lock out this test if it fails beforehand.
   */
  protected function listImportIntoExisting() {

    $this->pass(t('START: listImportIntoExisting'));

    // Get the user count on the list before we try the import
    // We haven't added any users to it yet, so it should be Zero
    $query = db_select('wildfire_lists_users', 'clu')
      ->condition('lid', $this->list->id, '=');
    $query->addExpression('COUNT(1)', 'count');
    $result = $query->execute();

    $existing_user_count = $result->fetchField();

    $this->assertTrue(
      $existing_user_count == 0,
      t('List existing user count is Zero (%count)', array('%count' => $existing_user_count))
    );

    $this->setupImportForm();

    // Assume that there is a 'mail' field for import in this test.
    $import = array(
      '0' => 'mail',
      'importlist' => $this->list->id,
    );

    $this->drupalPost(
      NULL,
      $import,
      t('Import')
    );

    $this->assertText('Import results');
    $this->assertLink('View the list »', 0);

    $query = db_select('wildfire_lists_users', 'clu');
    $query->condition('lid', $this->list->id, '=');
    $query->addExpression('COUNT(1)', 'count');
    $result = $query->execute();

    $user_count = $result->fetchField();

    $this->assertTrue(
      $user_count > $existing_user_count,
      t(
        'List user count after import into existing is > %existing (%count)',
        array(
          '%existing' => $existing_user_count,
          '%count' => $user_count,
        )
      )
    );

    // linecount is -1 to discount header line
    $this->assertEqual(
      $user_count,
      $this->csvfile->linecount - 1,
      t(
        'List user count matches CSV line count (%count, %csvcount)',
        array(
          '%count' => $user_count,
          '%csvcount' => $this->csvfile->linecount - 1,
        )
      )
    );

  }

  /**
   * Check that the import forms behave with a missing list name
   *
   * We skip checking the form here and assume it works; listImportFormChecks()
   * will lock out this test if it fails beforehand.
   */
  protected function listImportMissingListName() {

    $this->pass(t('START: listImportMissingListName'));

    $this->setupImportForm();

    // Assume that there is a 'mail' field for import in this test.
    $import = array(
      '0' => 'mail',
      'importlist' => 0,
      'newlistname' => '',
    );

    $this->drupalPost(
      NULL,
      $import,
      t('Import')
    );

    $this->assertText('Import results');
    $this->assertLink('View the list »', 0);

    /**
     * Check that the list is displayed on the list of lists under
     * the default name created when no other name is specified. Given we
     * are in a test sandbox there won't be any other lists with the default
     * name that would cause a wrong result.
     *
     * The default is presently 'Untitled list'
     *
     * @see wildfire_lists_import_form_submit()
     *  For where the default is set.
     */
    $default_list_name = 'Untitled list';

    $this->drupalGet('admin/wildfire/lists');
    $this->assertText($default_list_name);

    $query = db_select('wildfire_lists', 'cl')
      ->fields('cl', array(
      'lid'
    ));
    $query->condition('name', $default_list_name, '=');
    $result = $query->execute();

    $lid = $result->fetchField();

    $this->assertTrue(
      $lid > 0,
      t(
        'List ID found for list created via Import form (%lid)',
        array(
      '%lid' => $lid,
    )
      )
    );

    $query = db_select('wildfire_lists_users', 'clu')
      ->condition('lid', $lid, '=');
    $query->addExpression('COUNT(1)', 'count');
    $result = $query->execute();

    $user_count = $result->fetchField();

    $this->assertTrue(
      $user_count > 0,
      t(
        'List user count after import into new is > 0 (%count)',
        array(
      '%count' => $user_count,
    )
      )
    );

    // linecount is -1 to discount header line
    $this->assertEqual(
      $user_count,
      $this->csvfile->linecount - 1,
      t(
        'List user count matches CSV line count (%count, %csvcount)',
        array(
      '%count' => $user_count,
      '%csvcount' => $this->csvfile->linecount - 1,
    )
      )
    );

  }

  /**
   * Check that the import forms behave with missing csv field to import field
   * mappings
   *
   * We skip checking the form here and assume it works; listImportFormChecks()
   * will lock out this test if it fails beforehand.
   */
  protected function listImportMissingFields() {

    $this->pass(t('START: listImportMissingFields'));

    $this->setupImportForm();

    // Submit an empty array, emulating when a user hits 'Import' without
    // filling in the form.
    $import = array(
    );

    $this->drupalPost(
      NULL,
      $import,
      t('Import')
    );

    $this->assertText('One column must be mapped to email address');
    /**
     * 2011-09-27, craig: Batch isn't set off unless this is valid in D7,
     * so you never get this message EXCEPT on total batch fail. So, best not
     * check for it :)
     */
    //$this->assertText('No batch results could be found');

  }

  /**
   * Set up the Import form to be at the stage where it's accepted the CSV and
   * is waiting for user to map fields, select the list or add a new one,
   * and so on.
   *
   * The same steps are repeated in several tests.
   */
  protected function setupImportForm() {

    $this->drupalGet('admin/wildfire/lists/import');
    $csv = $this->csvfile->path;
    $csv = realpath($csv);
    $this->assertTrue(
      is_file($csv),
      t('Found the test CSV file for importing.')
    );

    $import = array(
      'files[csvfile]' => $csv,
    );

    $this->drupalPost(
      'admin/wildfire/lists/import',
      $import,
      t('Upload')
    );

  }

}
