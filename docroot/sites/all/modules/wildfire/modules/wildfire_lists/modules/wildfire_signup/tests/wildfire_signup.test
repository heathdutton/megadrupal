<?php
/**
 * @file
 * Test for the Wildfire Signup module.
 */

// Include the main Wildfire test file so we can get the class
// definition for WildfireWebTestCase and inherit from it.
module_load_include('test', 'wildfire', 'wildfire');

class WildfireSignupTestCase extends WildfireWebTestCase {

  /**
   * Implementation of getInfo().
   */
  public static function getInfo() {
    return array(
      'name'        => 'Signup - Main',
      'description' => 'Test the signup Form and API',
      'group'       => 'Wildfire',
    );
  }

  /**
   * Implementation of setUp().
   */
  public function setUp() {
    parent::setUp(array('wildfire_signup'));

// Create some extra permissions needed for this module
    $permissions = array(
      'administer wildfire signup',
    );

    // Add a new role with these permissions
    $new_role = $this->drupalCreateRole($permissions);

    // Add this additional role to the user account.
    $this->user->roles[$new_role] = $new_role;
    user_save($this->user);

    // Log in again to ensure the permissions are being picked up
    $this->drupalLogin($this->user);

  }

  /**
   * Implementation of tearDown().
   */
  public function tearDown() {
    parent::tearDown();
  }

  /**
   * Main test function which calls others.
   */
  public function testSignup() {

    module_load_include('inc', 'wildfire_lists', 'wildfire_lists.api');
    module_load_include('module', 'wildfire_lists', 'wildfire_lists');

    // Get the signup form and check that the email and submit buttons are there
    $this->drupalGet('wildfire_signup_form');
    $this->assertFieldById('edit-email');
    $this->assertFieldById('edit-submit');

    // Submit the form, and check whether we are now subscribed.
    // This first run should fail as there's no lists yet

    /**
     * 2011-11-08, craig: Submit using the default email address; should be
     * exactly the same value anyway and should be prefilled (test will of
     * course fail if either of those conditions prove to be untrue)
     */
    $form_vars = array(
      //'email' => $this->test_email,
    );

    $this->drupalPost(
      'wildfire_signup_form',
      $form_vars,
      t('Sign up')
    );

    $this->assertNoText(
      t(
        'Congratulations. You will now receive the regular email newsletter.'
      )
    );

    $this->assertFalse(
      wildfire_user_is_subscribed(
        $this->user->uid,
        wildfire_signup_get_list()
      )
    );

    // Add several lists, and check that the settings form allows us to set
    // one of them as the modules default
    $this->generateList(0);
    $list = $this->generateList(0);
    $this->generateList(0);

    /* Check that the form is displaying the correct default value - this
     * should equal whatever default wildfire_signup_get_list() uses at this
     * point, which should be 'first available list', as we haven't set it
     * otherwise yet.
     */
    $this->drupalGet('admin/wildfire/settings/signup');

    // FIXME: Selection by XPath works whilst By Id does not
    //$this->assertFieldById('edit-wildfire-signup-list');
    $this->assertFieldByXPath('//select[@id="edit-wildfire-signup-list"]');

    $ewsl_value = '';
    $xpath = $this->xpath('//select[@id="edit-wildfire-signup-list"]/option');
    foreach ($xpath as $option) {
      $ewsl_selected = (string) $option->attributes()->selected;
      if (!empty($ewsl_selected)) {
        $ewsl_value = (string) $option->attributes()->value;
        break;
      }
    }

    $this->assertEqual(
      $ewsl_value,
      wildfire_signup_get_list()
    );

    // Update the list to use to our new one by automating the form
    $form_vars = array(
      'wildfire_signup_list' => $list->id,
    );

    $this->drupalPost(
      'admin/wildfire/settings/signup',
      $form_vars,
      t('Save configuration')
    );

    // Check that the new value of 'wildfire_signup_list' is what we just set
    $this->assertEqual(
      variable_get('wildfire_signup_list', NULL),
      $list->id
    );

    // Check that the form is displaying the updated value
    // FIXME: Selection by XPath works whilst By Id does not
    //$this->assertFieldById('edit-wildfire-signup-list');
    $this->assertFieldByXPath('//select[@id="edit-wildfire-signup-list"]');

    $ewsl_value = '';
    $xpath = $this->xpath('//select[@id="edit-wildfire-signup-list"]/option');
    foreach ($xpath as $option) {
      $ewsl_selected = (string) $option->attributes()->selected;
      if (!empty($ewsl_selected)) {
        $ewsl_value = (string) $option->attributes()->value;
        break;
      }
    }

    $this->assertEqual(
      $ewsl_value,
      wildfire_signup_get_list()
    );

    // Does the modules get list ID function agree with what the new
    // default should be?
    $this->assertEqual(
      $list->id,
      wildfire_signup_get_list()
    );

    // Try a second use of the subscribe form
    // The subscribe should happen to the list we have set in the settings
    // if the settings form save operation worked OK.
    $form_vars = array(
      //'email' => $this->test_email,
    );

    $this->drupalPost(
      'wildfire_signup_form',
      $form_vars,
      t('Sign up')
    );

    $this->assertTrue(
      wildfire_user_is_subscribed(
        $this->user->uid,
        $list->id
      )
    );

    // Unsubscribe the user from the list, so we can try a one-click signup
    wildfire_list_unsubscribe($this->user->uid, $list->id);

    $this->assertFalse(
      wildfire_user_is_subscribed(
        $this->user->uid,
        $list->id
      )
    );

    // Try a one-click subscribe with the wrong User ID. This should fail!
    $this->drupalGet('wildfire_signup/999');

    $this->assertNoText(
      t(
        'Congratulations. You will now receive the regular email newsletter.'
      )
    );

    $this->assertFalse(
      wildfire_user_is_subscribed(
        $this->user->uid,
        $list->id
      )
    );

    // Try a one-click subscribe with the right User ID. User should be
    // subscribed to our list now.
    $this->drupalGet('wildfire_signup/' . $this->user->uid);

    $this->assertText(
      t(
        'Congratulations. You will now receive the regular email newsletter.'
      )
    );

    $this->assertTrue(
      wildfire_user_is_subscribed(
        $this->user->uid,
        $list->id
      )
    );

  }

}
