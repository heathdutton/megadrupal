<?php
/**
 * @file
 * Tests the regions system.
 */
module_load_include('test', 'wildfire', 'tests/wildfire');

/**
 * Test region functionality (repeaters, snippets).
 */
class WildfireRegionsTestCase extends WildfireWebTestCase {

  /**
   * Implementation of getInfo() method.
   */
  public static function getInfo() {
    return array(
      'name' => 'Messages - Regions',
      'description' => 'Test the region functionality of the Wildfire system',
      'group' => 'Wildfire',
    );
  }

  /**
   * Implementation of setUp()
   */
  public function setUp() {
    parent::setUp();

    // Create some extra permissions needed for this module
    $permissions = array(
      'administer wildfire messages',
      'use wildfire messages',
    );

    // Add a new role with these permissions
    $new_role = $this->drupalCreateRole($permissions);

    // Add this additional role to the user account.
    $this->user->roles[$new_role] = $new_role;
    user_save($this->user);

    // Log in again to ensure the permissions are being picked up
    $this->drupalLogin($this->user);
  }

  /**
   * Implementation of tearDown()
   */
  public function tearDown() {
    parent::tearDown();
  }

  /**
   * Main test method. Other tests are called from here.
   */
  public function testRegions() {
    // Test if setup failed.
    if ($this->preFail !== FALSE) {
      $preFail = is_string($this->preFail)
        ? $this->preFail
        : 'Setup failed. Test aborted.';
      $this->fail($preFail);
      return;
    }

    $start = microtime();

    $this->regionsOverviewPage();
    $this->regionsSnippetsPage();
    $this->regionsRepeatersPage();

    $this->pass(t(
      'Tests completed in !time seconds',
      array('!time' => $this->elapsedTime($start))
    ));
  }

  /**
   * Test the overview page for the regions on a given broadcast.
   */
  protected function regionsOverviewPage() {
    $broadcast = $this->generateBroadcast(2);

    $this->assertNotEqual(
      $broadcast,
      FALSE,
      t('Broadcast successfully generated')
    );

    /**
     * 2011-08-25, craig: Although it's valid for a Broadcast to not have
     * Repeater or Snippet regions defined depending on the template it's
     * attached to our tests assume that at least one of each has been
     * defined. Essentially that's the functionality we want to test and
     * if we test a broadcast without either, it's kind of missing the point.
     */
    $this->assertTrue(
      !empty($broadcast->regions['repeaters']),
      t('Broadcast has repeater regions defined')
    );

    $this->assertTrue(
      !empty($broadcast->regions['snippets']),
      t('Broadcast has snippet regions defined')
    );

    $this->drupalGet('admin/wildfire/broadcasts/' . $broadcast->id . '/content');

    /**
     * Test the repeaters table.
     */
    foreach ($broadcast->regions['repeaters'] as $rname => $repeater) {

      // Check that the fieldset has the correct title.
      $title_xpath = $this->xpath('//fieldset[@id="edit-' . $rname . '"]/legend');
      $this->assertEqual(
        $title_xpath[0]->span,
        t($repeater['title']),
        t(
          'Repeater fieldset !rname has the correct title',
          array(
            '!rname' => $rname
          )
        )
      );

      // Check the table inside the repeater fieldset is correct
      $xpath = $this->xpath('//table[@id="wildfire-repeater-' . $rname . '-preview"]/tbody/tr');

      $count = count($repeater['content']);

      // Check that there are as many rows in the table as expected
      $this->assertEqual(
        $count,
        count($xpath),
        t('Number of rows in table matches number of expected rows')
      );

      // Go through the repeater table and look for the names of each node
      // If found, decrease $count
      $c = 0;
      foreach ($xpath as $part) {
        if ($part->td->a == $repeater['content'][$c]->title) {
          $count--;
        }
        $c++;
      }

      // If $count is Zero all content was checked off as being in the table
      // If not, we have more content than rows, or the rows don't correspond
      // to the expected nodes correctly.
      $this->assertTrue(
        $count == 0,
        t('All expected nodes were seen in the table')
      );

    }

    /**
      * Test the snippets table.
      */
    foreach ($broadcast->regions['snippets'] as $sname => $snippet) {

      // Check that the fieldset has the correct title.
      $sname = str_replace('_', '-', $sname);

      $xpath = $this->xpath('//fieldset[@id="edit-' . $sname . '"]/legend');
      $this->assertEqual(
        $xpath[0]->span,
        t($snippet['title']),
        t(
          'Snippet fieldset !sname has the correct title',
          array(
           '!sname' => $sname
          )
        )
      );

      // Check the content inside the snippet fieldset is correct
      $xpath = $this->xpath('//fieldset[@id="edit-' . $sname . '"]/div');

      // Check that the first 90 characters of the snippet are correct - we
      // crop at 100 characters
      $this->assertEqual(
        drupal_substr(strip_tags($snippet['content'][0]), 0, 90),
        drupal_substr((string)$xpath[0], 0, 90),
        t('Snippet preview text is correct')
      );

    }

  }

  /**
   * Test the snippets page.
   */
  protected function regionsSnippetsPage() {

    global $base_url;

    $broadcast = $this->generateBroadcast(2);

    $this->assertNotEqual(
      $broadcast,
      FALSE,
      t('Broadcast successfully generated')
    );

    $this->drupalGet('admin/wildfire/broadcasts/' . $broadcast->id . '/content/snippets');

    // Make sure there is a textarea for each snippet.
    foreach ($broadcast->regions['snippets'] as $sname => $snippet) {

      // 2011-09-21, craig: I'm using this convoluted method to check
      // as assertFieldByName() fails even though the field actually exists
      // and I don't care at this point what the field content contains.
      $this->assertFieldByXPath('//textarea[@name="snippet_' . $sname . '[value]"]', NULL, 'Snippet editor textarea exists');

    }

    // Shift the first name off the list for later use...
    $sname = array_shift(array_keys($broadcast->regions['snippets']));

    /*
     * Working with just one of the snippets, save the form and make sure that
     * it updates the database.
     *
     * We add HTML to the snippets content as we want to check it's filtered
     * correctly later on.
     */

    $rand_string = $this->randomName(32);

    $newtext = '<p>' . $rand_string . '</p>';
    $newtext .= '<iframe src="http://example.com/">(i)INNER IFRAME(i)</iframe>';
    $newtext .= '<script type="text/javascript"><!--(a)-->alert("TEST");<!--(a)--></script>';
    $newtext .= '<a href="/sites/all/themes/rubik/images/icons.png">';
    $newtext .= '<img src="/sites/all/themes/rubik/images/icons.png" />LINK';
    $newtext .= '</a>';
    $newtext .= '<a href="mailto:webmaster@example.com">';
    $newtext .= 'LINK 2';
    $newtext .= '</a>';

    $params = array(
      'mid' => $broadcast->id,
      'type'  => 'broadcast',
      'snippet_' . $sname . '[value]' => $newtext,
    );
    $this->drupalPost(
      'admin/wildfire/broadcasts/' . $broadcast->id . '/content/snippets',
      $params,
      t('Save')
    );

    // Read in the snippet directly, and emulate what the API does to ensure
    // we have a match.
    $query = db_select('wildfire_snippets_content', 'csc')
      ->fields('csc', array(
        'content')
      );
    $query->condition('mid', $broadcast->id, '=');
    $query->condition('type', 'broadcast', '=');
    $query->condition('snippet', $sname, '=');
    $result = $query->execute();

    $dbtext = $result->fetchField();

    $this->assertEqual(
      $newtext,
      $dbtext,
      t('Snippet saved to database successfully')
    );

    /*
     * Check that the database value, when read back conditional to the defined
     * filter format, is correct and expected.
     */
    $expected_content = check_markup(
      $dbtext,
      variable_get('wildfire_snippet_format_id', filter_default_format()),
      TRUE
    );

    // Check that the textarea renders the content as expected...
    $xpath = $this->xpath('//textarea[@name="snippet_' . $sname . '[value]"]');

    $textarea_content = (string)$xpath[0];

    $this->assertEqual(
      trim($expected_content),
      trim($textarea_content),
      t('Textarea content matches expected filtered content')
    );

    // Check the API function for reading the snippet back returns the expected
    // content as well. This is the RAW form without the links converted, as
    // the UI should display AS-IS bar the filtering options.
    $read_content = wildfire_snippet_get_content(
      $sname,
      $broadcast->id,
      'broadcast',
      TRUE
    );

    $this->assertEqual(
      trim($expected_content),
      trim($read_content),
      t('Snippet content read by API matches expected filtered content')
    );

    // This is the content we expect to get, once it has been filtered for
    // HTML tags and had all of the relative links converted to absolute.
    // It's very different for the original source, but if we don't get a
    // match at this stage, we royally screwed up somewhere!
    $converted_content = '<p>' . $rand_string;
    $converted_content .= '(i)INNER IFRAME(i)';
    $converted_content .= 'alert("TEST");';
    $converted_content .= '<a href="';
    $converted_content .= $base_url;
    $converted_content .= '/sites/all/themes/rubik/images/icons.png">';
    $converted_content .= 'LINK';
    $converted_content .= '</a>';
    $converted_content .= '<a href="mailto:webmaster@example.com">';
    $converted_content .= 'LINK 2';
    $converted_content .= '</a></p>';

    $read_content = wildfire_snippet_get_content(
      $sname,
      $broadcast->id,
      'broadcast',
      FALSE
    );

    $this->assertEqual(
      trim($read_content),
      trim($converted_content),
      t('Snippet content read by API matches expected converted content')
    );

  }

  /**
   * Test the repeaters page.
   */
  protected function regionsRepeatersPage() {
    $broadcast = $this->generateBroadcast(3);

    $this->assertNotEqual(
      $broadcast,
      FALSE,
      t('Broadcast successfully generated')
    );

    $this->drupalGet('admin/wildfire/broadcasts/' . $broadcast->id . '/content/repeaters');

    // Check that the form has all the expected fields on it
    $this->assertFieldById(
      'edit-node',
      '',
      t('The edit-node field exists on the page')
    );
    $this->assertFieldById(
      'edit-repeater',
      '',
      t('The edit-repeater field exists on the page')
    );

    // Does the Repeater selector have the right values in there?
    $this->assertTrue(
      !empty($broadcast->regions['repeaters']),
      t('Broadcast has repeater regions defined')
    );

    foreach ($broadcast->regions['repeaters'] as $repeater_name => $content) {
      $repeater_checklist[$repeater_name] = 1;
    }

    $saw_unexpected_option = FALSE;
    $xpath = $this->xpath('//select[@id="edit-repeater"]/option');
    foreach ($xpath as $option) {
      $value = (string) $option->attributes()->value;
      if (isset($repeater_checklist[$value])) {
        unset($repeater_checklist[$value]);
      }
      else {
        // If it's not set in repeaters_checklist, its either a duplicate
        // option, or it's bad in some other way
        $saw_unexpected_option = TRUE;
      }
    }

    $this->assertTrue(
      empty($repeater_checklist),
      t('All repeaters defined in broadcast are present in repeater selector')
    );

    $this->assertFalse(
      $saw_unexpected_option,
      t('All options in repeater selector have been accounted for')
    );

    $this->assertFieldById(
      'edit-add-submit',
      '',
      t('The edit-add-submit field exists on the page')
    );
    $this->assertFieldById(
      'edit-save-submit',
      '',
      t('The edit-save-submit field exists on the page')
    );

    /**
     * Check the nodes that are supposed to be displayed actually are
     * and that they are in the right order.
     *
     * TODO: Add tests for reordering in the UI
     */

    foreach ($broadcast->regions['repeaters'] as $rname => $repeater) {

      $xpath = $this->xpath('//table[@id="repeater-' . $rname . '-order-nodes"]/tbody/tr');
      $valid = TRUE;
      $c = 0;

      foreach ($xpath as $part) {
        // This test ensures that the <a> tag that contains a link to the node
        // view page has the expected text i.e. the nodes title.

        /**
         * Each row has three links:
         *  0 => The node title
         *  1 => The edit link to it
         *  2 => The remove from repeater link
         */

        if ((string)$part->td[0]->a[0] != $repeater['content'][$c]->title) {
          $valid = FALSE;
          break;
        }

        if ((string)$part->td[0]->a[1] != t('edit')) {
          $valid = FALSE;
          break;
        }

        if ((string)$part->td[0]->a[2] != t('remove')) {
          $valid = FALSE;
          break;
        }

        if ((string)$part->td[0]->a[1]->attributes()->href
          != '/node/' . $repeater['content'][$c]->nid . '/edit') {
          $valid = FALSE;
          break;
        }

        if ((string)$part->td[0]->a[2]->attributes()->href
          != '/admin/wildfire/broadcasts/' . $broadcast->id . '/content/repeaters/remove/'
            . $rname . '/' . $repeater['content'][$c]->nid) {
          $valid = FALSE;
          break;
        }

        $c++;
      }

      $this->assertTrue(
        $valid,
        t(
          'Node content and order for repeater "!repeater_name" is displayed correctly',
          array(
        '!repeater_name' => $rname,
      )
        )
      );

    }

    // Let's add a node to the first repeater we find
    $node = $this->drupalCreateNode(array(
      'body' => array(LANGUAGE_NONE => array(array('Lorem Ipsum'))),
      'title' => $this->randomName(12),
      'type' => 'story',
    ));

    $repeater_keys = array_keys($broadcast->regions['repeaters']);
    $repeater_name = $repeater_keys[0];

    // Use the submission form to add the node to check you actually can
    $params = array(
      'mid' => $broadcast->id,
      'type' => 'broadcast',
      'repeater' => $repeater_name,
      'node' => $node->title,
    );
    $this->drupalPost(
      'admin/wildfire/broadcasts/' . $broadcast->id . '/content/repeaters',
      $params,
      t('Add')
    );

    // Check we a confirmation message was displayed
    $this->assertText(
      'content was added to the selected repeater.',
      t('Node added message was displayed')
    );

    // Check the node was added to the table correctly
    $query = db_select('wildfire_repeaters_nodes', 'crn')
      ->fields('crn', array(
        'nid'
      ));
    $query->condition('mid', $broadcast->id, '=');
    $query->condition('type', 'broadcast', '=');
    $query->condition('nid', $node->nid, '=');
    $result = $query->execute();

    $dbresult = $result->fetchField();

    $this->assertTrue(
      $dbresult > 0,
      t('Node saved to repeater successfully in database')
    );

    /**
     * Check it's also displayed in the UI and is the last entry in the
     * corresponding repeater table, as that's where new entries should go
     * We do a reget here so that we are viewing the page fresh, not right
     * after the POST that added the node.
     */
    $this->drupalGet('admin/wildfire/broadcasts/' . $broadcast->id . '/content/repeaters');
    $last_tr = $this->xpath('//table[@id="repeater-' . $repeater_name . '-order-nodes"]/tbody/tr[last()]');

    $this->assertEqual(
      (string) $last_tr[0]->td[0]->a,
      $node->title,
      t(
        'Node "!node_title" is displayed correctly in the "!repeater_name" repeater section',
        array(
      '!node_title' => $node->title,
      '!repeater_name' => $repeater_name,
    )
      )
    );

    // Delete that same node from the repeater using the remove link in the UI
    $this->drupalGet(
      'admin/wildfire/broadcasts/' . $broadcast->id . '/content/repeaters'
      . '/remove/' . $repeater_name . '/' . $dbresult
    );

    $this->drupalGet('admin/wildfire/broadcasts/' . $broadcast->id . '/content/repeaters');

    // Check it's gone by rescanning the table for the nodes title
    $xpath = $this->xpath('//table[@id="repeater-' . $repeater_name . '-order-nodes"]/tbody/tr');

    $valid = TRUE;
    foreach ($xpath as $part) {

      if ((string)$part->td[0]->a[0] == $node->title) {
        $valid = FALSE;
        break;
      }

    }

    $this->assertTrue(
      $valid,
      t(
        'Node does not appear in list for repeater "!repeater_name" after deletion',
        array(
          '!repeater_name' => $rname,
        )
      )
    );

    // Check we get errors if we try to post in a node that doesn't exist
    // as this is something that an end user will sometimes do
    $params = array(
      'mid' => $broadcast->id,
      'type' => 'broadcast',
      'repeater' => $repeater_name,
      'node' => $this->randomName(12),
    );
    $this->drupalPost(
      'admin/wildfire/broadcasts/' . $broadcast->id . '/content/repeaters',
      $params,
      t('Add')
    );

    $this->assertText(
      'No content by this name exists',
      t('Node add failed message was displayed')
    );

  }


}
