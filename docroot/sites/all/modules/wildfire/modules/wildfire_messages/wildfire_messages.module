<?php
/**
 * @file
 *  wildfire_messages.module
 *
 * Manages Wildfire messages
 *
 * @author Craig Jones <craig@tiger-fish.com>
 *
 * Code derived from Wildfire 1:
 * @author Chris Cohen <chris.cohen@tiger-fish.com>
 */

/**
 * Implements hook_permission().
 */
function wildfire_messages_permission() {
  return array(
    'use wildfire messages' => array(
      'title' => t('use wildfire messages'),
      'description' => t('Allows use of the Wildfire Messages system'),
    ),
    'administer wildfire messages' => array(
      'title' => t('administer wildfire messages'),
      'description' => t('Allows settings to be changed in Wildfire message'),
    ),
    'use wildfire templates' => array(
      'title' => t('use wildfire templates'),
      'description' => t('Allows use of the Wildfire templates system'),
    ),
    'administer wildfire templates' => array(
      'title' => t('administer wildfire templates'),
      'description' => t('Allows settings to be changed for Wildfire templates'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function wildfire_messages_menu() {
  $items = array();

  /**
   * Admin
   */
  $items['admin/wildfire/settings/content-types'] = array(
    'title' => 'Content types settings',
    'type' => MENU_LOCAL_TASK,
    'description' => 'Configure which content types can be used with Wildfire',
    'access arguments' => array('administer wildfire messages'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wildfire_settings_content_types_form'),
    'file' => 'wildfire_messages.admin.inc',
    'weight' => 1,
  );
  $items['admin/wildfire/settings/regions'] = array(
    'title' => 'Region settings',
    'type' => MENU_LOCAL_TASK,
    'description' => 'Configure Wildfire settings for regions',
    'access arguments' => array('administer wildfire messages'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wildfire_settings_regions_form'),
    'file' => 'wildfire_messages.admin.inc',
    'weight' => 3,
  );

  /**
   * Templates
   */
  $items['admin/wildfire/templates'] = array(
    'title' => 'Templates',
    'description' => 'View a list of the mail templates.',
    'access arguments' => array('use wildfire templates'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wildfire_template_list_form'),
    'file' => 'wildfire_messages.template.admin.inc',
  );
  $items['admin/wildfire/templates/%/settings'] = array(
    'title' => 'Template settings',
    'description' => 'Settings for a given template',
    'access arguments' => array('administer wildfire templates'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wildfire_template_settings_form', 3),
    'file' => 'wildfire_messages.template.admin.inc',
  );

  /**
   * Preview
   */
  $items['wildfire/preview/%/%/%'] = array(
    'title' => 'Preview email',
    'description' => 'Displays a templated preview of the given content being sent',
    'access arguments' => array('use wildfire messages'),
    'page callback' => 'wildfire_preview',
    'page arguments' => array(2, 3, 4),
    'type' => MENU_CALLBACK,
  );


  /**
   * Viewing system
   */
  $items['wildfire/view/%'] = array(
    'title' => 'View email message',
    'title callback' => 'wildfire_get_job_subject',
    'title arguments' => array(2), // jid
    'description' => 'Show a browser-based version of a message',
    'page callback' => 'wildfire_browserview',
    'page arguments' => array(2), // jid, also optionally the token
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function wildfire_messages_theme() {
  $tpath = drupal_get_path('module', 'wildfire_messages') . '/templates';

  return array(
    'wildfire_repeater_edit_form' => array(
       'render element' => 'form',
       'file' => 'wildfire_messages.theme',
       'path' => $tpath,
    ),
    'wildfire_template_list_form' => array(
      'render element' => 'form',
      'file' => 'wildfire_messages.theme',
      'path' => $tpath,
    ),
    'wildfire_template_regions' => array(
      'variables' => array('template' => array()),
      'file' => 'wildfire_messages.theme',
      'path' => $tpath,
      'template' => 'wildfire-template-regions',
    ),
    'wildfire_template_selector' => array(
      'variables' => array(
        'templates' => array(),
        'current_template' => ''
      ),
      'file' => 'wildfire_messages.theme',
      'path' => $tpath,
      'template' => 'wildfire-template-selector',
    ),
  );

}


/**
 * Implements hook_wildfire_region_content().
 *
 * Here, we return content if the region is a repeater or a snippet.
 *
 * @param string $region
 *  The machine name for the region to obtain content for
 * @param string $region_type
 *  The type of region to obtain. Presently, this is either 'repeater'
 *  or 'snippet'
 * @param int $mid
 *  The message ID that the content is attached to
 * @param string $message_type
 *  The type of message referenced by $mid. Presently, only 'broadcast' is
 *  supported internally, though other modules may later extend this with other
 *  types
 *
 * @return string
 *  The retrieved content, or an empty string if there isn't any content for the
 *  params supplied.
 */
function wildfire_messages_wildfire_region_content($region, $region_type, $mid, $message_type) {
  if (in_array($region_type, array('repeater', 'snippet'))) {
    module_load_include('inc', 'wildfire_messages', 'wildfire_messages.template.api');

    return call_user_func(
      'wildfire_' . $region_type . '_get_content',
      $region,
      $mid,
      $message_type,
      FALSE     /* Will convert href/src in content to absolute */
    );
  }
  else {
    return '';
  }
}

/**
 * Implements hook_wildfire_region_descriptions().
 *
 * Provides descriptions for the repeater and snippet regions.
 */
function wildfire_messages_wildfire_region_descriptions() {
  return array(
    'repeater' => t('A repeater is a region that can contain a list of content, in a customisable order. For example, you could add the ten most popular news stories, or the three latest events, or the five best blog posts, to a repeater.'),
    'snippet' => t('A snippet is a region that contains your free text. You could add a simple sentence or paragraph here, or you could add more complicated content, such as text and images, or a table or information, or anything else you could create with a rich text editor.'),
  );
}

/**
 * Implements hook_wildfire_region_preview().
 *
 * Here, we return a preview if the region is a repeater or a snippet.
 *
 * @param string $region_type
 *  The type of region to obtain. Presently, this is either 'repeater'
 *  or 'snippet'
 * @param int $mid
 *  The message ID that the content is attached to
 * @param string $message_type
 *  The type of message referenced by $mid. Presently, only 'broadcast' is
 *  supported internally, though other modules may later extend this with other
 *  types
 *
 * @return string
 *  A string representing the markup for the preview, or an empty string if
 *  no preview is available
 */
function wildfire_messages_wildfire_region_preview($region_type, $mid, $message_type) {
  if (in_array($region_type, array('repeater', 'snippet'))) {
    module_load_include('inc', 'wildfire_messages', 'wildfire_messages.regions');

    return call_user_func(
      'wildfire_' . $region_type . '_get_preview',
      $mid,
      $message_type
    );
  }
  else {
    return '';
  }
}

/**
 * Implements hook_wildfire_region_save().
 *
 * Save this region if it's a snippet or a repeater.
 *
 * @param string $region
 *  The machine name for the region to obtain content for
 * @param string $region_type
 *  The type of region to obtain. Presently, this is either 'repeater'
 *  or 'snippet'
 * @param int $mid
 *  The message ID that the content is attached to
 * @param string $message_type
 *  The type of message referenced by $mid. Presently, only 'broadcast' is
 *  supported internally, though other modules may later extend this with other
 *  types
 * @param string $content
 *  The content to save to the given region.
 *
 * @return bool
 *  TRUE if the save was successful, else FALSE
 *
 */
function wildfire_messages_wildfire_region_save($region_type, $region, $mid, $message_type, $content) {
  if (in_array($region_type, array('repeater', 'snippet'))) {
    module_load_include('inc', 'wildfire_messages', 'wildfire_messages.regions');

    return call_user_func(
      'wildfire_' . $region_type . '_save',
      $region,
      $mid,
      $message_type,
      $content
    );
  }
  else {
    return FALSE;
  }
}

/**
 * Implements hook_wildfire_template_regions().
 *
 * We provide snippets and repeaters in this module.
 *
 * @param string $template
 *    The name of the template to get the regions for. If omitted, we'll get
 *    regions for ALL the templates.
 *
 * @return array
 *  An associative array containing all of the regions in the given template
 *
 */
function wildfire_messages_wildfire_template_get_regions($template) {
  module_load_include('inc', 'wildfire_messages', 'wildfire_messages.regions');

  // Get ALL repeaters and snippets, even if not enabled.
  $repeaters = wildfire_repeaters_get($template, TRUE);
  $snippets = wildfire_snippets_get($template, TRUE);

  $output = array();

  // Assemble the output array.
  if (!empty($repeaters)) {
    foreach ($repeaters as $name => $repeater) {
      $output['repeaters'][$name] = $repeater;
    }
  }

  if (!empty($snippets)) {
    foreach ($snippets as $name => $snippet) {
      $output['snippets'][$name] = $snippet;
    }
  }

  return $output;
}

/**
 * Title callback for the broadcast pages.
 *
 * @param int $mid
 *    The broadcast ID
 * @return
 *    The page title in the form 'Broadcast %name' where %name is the broadcast
 *    name.
 */
function wildfire_title_broadcast($mid = 0) {

  try {
    $message = new WildfireBroadcast($mid);
  }
  catch (Exception $e) {
    watchdog(
      'wildfire',
      'wildfire_title_broadcast for @mid failed: @message',
      array(
        '@mid' => $mid,
        '@message' => $e->getMessage(),
      ),
      WATCHDOG_ERROR
    );
    return 'Unknown broadcast';
  }

  if (isset($message->name)) {
    return t(
      'Broadcast: !name',
      array(
        '!name' => $message->name
      )
    );
  }
  else {
    return t('Broadcast');
  }

}

/**
 * Wildfire Allowed Content Types.
 *
 * Will return a boolean value depending on whether the user is allowed to use
 * Wildfire, and whether the currectly viewed node's content type is
 * allowed to be added to broadcasts (as specified in the Wildfire
 * Content Types Setting page).
 *
 * @access public
 * @param  integer $nid
 * @return boolean
 */
function wildfire_allowed_content_types($nid) {
  // Check that the node exists.
  if (($node = node_load($nid)) === FALSE) {
    return FALSE;
  }
  // Check that the user has permissions to use wildfire.
  $required = 'use wildfire';
  if (!user_access($required)) {
    return FALSE;
  }
  // Check that the node content type is allowed.
  $cm_content_types = variable_get('wildfire_content_types', array());
  if (!isset($cm_content_types[$node->type])
        || !$cm_content_types[$node->type]) {
    return FALSE;
  }
  // If everything is okay, return true.
  return TRUE;
}

/**
 * Gets an array of the types of mail that can be sent.
 *
 * @deprecated
 *  Used mostly by pre class-based code; should be refactored out
 *
 * @return array
 *    An array of the types of mail that can be sent.
 *
 */
function wildfire_mail_types() {
  $wildfire_mail_types =& drupal_static(__FUNCTION__);

  if (empty($wildfire_mail_types)) {
    $types = module_invoke_all('wildfire_type_info');
    $wildfire_mail_types = array();

    foreach ($types as $typename => $type) {
      $wildfire_mail_types[$typename] = $type;
    }
  }

  return $wildfire_mail_types;
}

/**
 * Implements hook_entity_info_alter().
 *
 * This will create a custom display mode for nodes, that can then be used
 * within Wildfire templating.
 */
function wildfire_messages_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['wildfire'] = array(
    'label' => t('Wildfire'),
    'custom settings' => TRUE,
  );
}

/**
 * Get a message given its type and ID.
 *
 * @deprecated
 *  To be replaced by pure class-based methods
 *
 * @param string $type
 *    The type such as broadcast or alert.
 * @param int $mid
 *    The message ID.
 * @return array
 */
function wildfire_message_get($type = '', $mid = 0) {
  // Parameter checking.
  $types = wildfire_mail_types();

  if (!in_array($type, array_keys($types)) || $mid < 1) {
    return FALSE;
  }

  return module_invoke_all('wildfire_message_get', $type, $mid);
}
