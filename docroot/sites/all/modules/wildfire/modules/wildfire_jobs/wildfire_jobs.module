<?php
/**
 * @file
 * Manages Wildfire jobs and sends
 *
 * @author Craig Jones <craig@tiger-fish.com>
 *
 * Code derived from Wildfire 1:
 * @author Chris Cohen <chris.cohen@tiger-fish.com>
 */

define('WILDFIRE_JOB_PENDING', 0);
define('WILDFIRE_JOB_PAUSED', 1);
define('WILDFIRE_JOB_CANCELLED', 2);
define('WILDFIRE_JOB_PROCESSING', 3);
define('WILDFIRE_JOB_COMPLETE', 4);
define('WILDFIRE_JOB_FAILED', 5);
define('WILDFIRE_JOB_PREPARING', 6);
define('WILDFIRE_JOB_PREPARED', 7);

define('WILDFIRE_JOB_PART_PENDING', 0);
define('WILDFIRE_JOB_PART_UPLOADED', 1);

define('WILDFIRE_JOB_CREATE_NORMAL', 0);
define('WILDFIRE_JOB_CREATE_IMMEDIATE', 1);
define('WILDFIRE_JOB_CREATE_DEFERRED', 2);

define('WILDFIRE_JOB_MODE_NORMAL', 0);
define('WILDFIRE_JOB_MODE_TEST', 1);


/**
 * Page to show a view of the content that was sent for the Job.
 *
 * @param int $jid
 *   The ID of the job to preview.
 *
 * @return array
 *   Drupal render array.
 */
function wildfire_jobs_content_page($jid) {

  drupal_set_title(
    t(
      'Content for Job #!job',
      array(
        '!job' => $jid,
      )
    )
  );

  return array(
    '#theme' => 'wildfire_jobs_content_page',
    '#jid' => $jid,
  );

}

/**
 * Implements hook_permission().
 */
function wildfire_jobs_permission() {
  return array(
    'administer wildfire jobs' => array(
      'title' => t('administer wildfire jobs'),
      'description' => t('Allows settings to be changed for Wildfire Jobs'),
    ),
    'use wildfire jobs' => array(
      'title' => t('use wildfire jobs'),
      'description' => t('Allows use of the Wildfire Jobs system'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function wildfire_jobs_menu() {
  $items = array();

  // Jobs.
  $items['admin/wildfire/jobs'] = array(
    'title' => 'Jobs',
    'description' => 'View the current jobs',
    'access arguments' => array('use wildfire jobs'),
    'page callback' => 'wildfire_jobs_current_page',
  );
  $items['admin/wildfire/jobs/overview'] = array(
    'title' => 'Current jobs',
    'description' => 'View the current jobs',
    'access arguments' => array('use wildfire jobs'),
    'page callback' => 'wildfire_jobs_current_page',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/wildfire/jobs/history'] = array(
    'title' => 'History',
    'description' => 'View previous job details',
    'access arguments' => array('use wildfire jobs'),
    'page callback' => 'wildfire_jobs_history_page',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/wildfire/jobs/%/cancel'] = array(
    'title' => 'Cancel job',
    'description' => 'Cancel a job before its send has begun',
    'access arguments' => array('administer wildfire jobs'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wildfire_job_cancel_form', 3),
  );

  // 'View on the web' snapshot for this job.
  $items['admin/wildfire/report/job/%/content'] = array(
    'title' => 'Content',
    'description' => 'View the actual content that was sent for this job',
    'page callback' => 'wildfire_jobs_content_page',
    'page arguments' => array(4),
    'access arguments' => array('use wildfire jobs'),
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function wildfire_jobs_theme() {
  $tpath = drupal_get_path('module', 'wildfire_jobs') . '/templates';

  return array(
    // Override theme_mimemail_message() to prevent default behaviour.
    'mimemail_message' => array(
      'variables' => array('body' => NULL, 'mailkey' => NULL),
      'file' => 'wildfire_jobs.theme',
      'path' => $tpath,
    ),
    'wildfire_jobs_list' => array(
      'render element' => 'table',
      'file' => 'wildfire_jobs.theme',
      'path' => $tpath,
    ),
    'wildfire_job_progress_bar' => array(
      'variables' => array(
        'title' => t('Processing'),
        'progress' => 0,
        'attributes' => array(),
      ),
      'template' => 'wildfire_job_progress_bar',
      'file' => 'wildfire_jobs.theme',
      'path' => $tpath,
    ),
    'wildfire_jobs_current_page' => array(
      'variables' => array(
        'active' => array(),
        'pending' => array(),
        'latest' => array(),
      ),
      'template' => 'wildfire_jobs_current_page',
      'file' => 'wildfire_jobs.theme',
      'path' => $tpath,
    ),
    'wildfire_jobs_content_page'  => array(
      'variables' => array('jid' => NULL),
      'template' => 'wildfire_jobs_content_page',
      'file' => 'wildfire_jobs.theme',
      'path' => $tpath,
    ),
    'wildfire_status_cell' => array(
      'render element' => 'cell',
      'file' => 'wildfire_jobs.theme',
      'path' => $tpath,
    ),
  );

}

/**
 * FAPI form to cancel a job.
 */
function wildfire_job_cancel_form($form, &$form_state, $jid) {

  try {

    $form = array();

    $job = new WildfireClientJob($jid);

    if ($job->canCancel()) {

      $form = confirm_form(
        array(
          'jid' => array(
            '#type' => 'hidden',
            '#value' => $jid,
          ),
        ),
        t('Please confirm'),
        'admin/wildfire/jobs',
        t(
          'Are you sure you want to cancel job %jid? Once cancelled, this cannot be undone!',
          array(
            '%jid' => $jid)
        ),
        t('Yes'),
        t('No')
      );

    }
    else {

      $form['blurb'] = array(
        '#markup' => t(
          'Job %jid is at a stage from which it cannot be cancelled. !returnlink.',
          array(
            '%jid' => $jid,
            '!returnlink' => l(t('Return to the list of jobs'), 'admin/wildfire/jobs'),
          )
        ),
      );

    }

  }
  catch (Exception $e) {

    $form['blurb'] = array(
      '#markup' => t(
        'Job %jid cannot be cancelled. !message. !returnlink.',
        array(
          '%jid' => $jid,
          '!returnlink' => l(t('Return to the list of jobs'), 'admin/wildfire/jobs'),
          '!message' => $e->getMessage(),
        )
      ),
    );

  }

  return $form;
}

/**
 * Submit handler for wildfire_job_cancel_form().
 */
function wildfire_job_cancel_form_submit($form_id, &$form_state) {

  $job = new WildfireClientJobRpc($form_state['values']['jid']);

  if ($job->cancelJob()) {
    drupal_set_message(t('Job %jid has been cancelled.', array('%jid' => $form_state['values']['jid'])));
  }
  else {
    drupal_set_message(t('There was a problem attempting to cancel job %jid. It may have already started processing on the server', array('%jid' => $form_state['values']['jid'])), 'warning');
  }

  // Redirect the user back to the main jobs list.
  drupal_goto('admin/wildfire/jobs');
}

/**
 * Provide a latest send jobs block for the Wildfire overview page.
 */
function wildfire_jobs_admin_block() {
  module_load_include('inc', 'wildfire_lists', 'wildfire_lists.api');
  module_load_include('inc', 'wildfire_jobs', 'wildfire_jobs.api');

  $jobs = wildfire_jobs_get(3);

  $headers = array(
    t('Title'),
    t('List'),
    t('Status'),
    t('Operations'),
  );

  $rows = array();

  foreach ($jobs as $job) {
    $row = array();

    $row[] = $job['title'];

    $listname = wildfire_list_get_name($job['lid']);
    if (!empty($listname)) {
      $row[] = l(
        $listname,
        'admin/wildfire/lists/' . $job['lid'] . '/view',
        array(
          'attributes' => array(
            'title' => t('View the list !listname', array('!listname' => $listname)),
          ),
        )
      );
    }
    else {
      $row[] = 'â€¦';
    }

    $status_text = wildfire_get_status_text($job);
    $row[] = render($status_text);

    $row[] = l(
      t('View report'),
      'admin/wildfire/report/job/' . $job['jid'] . '/view',
      array(
        'attributes' => array(
          'title' => t('View a report for this job'),
        ),
      )
    );

    $rows[] = $row;
  }

  if (count($rows) == 0) {
    $row = array();
    $row[] = array(
      'colspan' => count($headers),
      'data' => t('There are no jobs to display.'),
    );
    $rows[] = $row;
  }

  $content = theme(
    'table',
    array(
      'header' => $headers,
      'rows' => $rows,
      'attributes' => array(
        'id' => 'wildfire-latest-jobs-table',
      ),
    )
  );

  $content .= l(
    t('View full list'),
    'admin/wildfire/jobs',
    array(
      'attributes' => array(
        'title' => t('View a full list of jobs'),
        'class' => array('wildfire-overview-view-full'),
      ),
    )
  );

  return array(
    'title' => t('Latest send jobs'),
    'description' => t('The latest jobs that are queued or have been sent.'),
    'content' => $content,
    'show' => TRUE,
  );
}

/**
 * Implements hook_wildfire_token_info().
 */
function wildfire_jobs_wildfire_token_info() {

  $tokens = array(
    'wildfire_jobs' => array(
      'wildfire:uid',
      'wildfire:email',
      'wildfire:unsubscribe',
      'wildfire:browserview',
      'subject',
      'from_name',
      'from_email',
      'reply_name',
      'reply_email',
    ),
  );

  if (module_exists('field')) {

    // Get a list of user fields, and add them to the list of accepted tokens.
    $fields = field_info_instances('user');
    foreach ($fields['user'] as $field) {
      $tokens['wildfire_jobs'][] = $field['field_name'];
      // If the name starts with 'field_', also advertise that we support
      // the version without the prefix.
      if (drupal_substr($field['field_name'], 0, drupal_strlen('field_')) == 'field_') {
        $tokens['wildfire_jobs'][] = drupal_substr($field['field_name'], drupal_strlen('field_'));
      }
    }

  }

  return $tokens;

}

/**
 * Implements hook_wildfire_token().
 */
function wildfire_jobs_wildfire_token($token, $context) {

  $uid =& $context['uid'];
  $jid =& $context['jid'];

  module_load_include('inc', 'wildfire_jobs', 'wildfire_jobs.tokens');
  module_load_include('inc', 'wildfire_jobs', 'wildfire_jobs.api');

  /**
   * We store data that only needs looking up once in a static cache
   * for performance e.g. broadcast details, field definitions, etc.
   */
  static $cache = array('pma' => NULL);

  switch ($token) {
    /*
     * ***********
     * 'system' TOKEN SET
     * ***********
     */
    case 'wildfire:uid':
      return $uid;

    case 'wildfire:email':
      if ($uid > 0) {
        $query = db_select('users', 'u')
          ->fields('u', array(
            'mail',
          ));
        $query->condition('uid', $uid, '=');
        $result = $query->execute();

        return $result->fetchField(0);
      }

      break;

    case 'wildfire:browserview':
      $unsub_token = wildfire_job_get_unsubscribe_token($uid, $jid);
      if ($unsub_token === FALSE) {
        // This may be the case on an anonymous view. If so, just get
        // a 'fudged' value so that we have something to use.
        $unsub_token = wildfire_random_string(WILDFIRE_UNSUBSCRIBE_LENGTH);
      }

      // Set up the browserview URL.
      return url(
        'wildfire/view/' . $jid . '/' . $unsub_token,
        array(
          'absolute'  => TRUE,
          'alias'     => TRUE,
        )
      );

    case 'wildfire:unsubscribe':
      $unsub_token = wildfire_job_get_unsubscribe_token($uid, $jid);
      if ($unsub_token === FALSE) {
        // This may be the case on an anonymous view. If so, just get
        // a 'fudged' value so that we have something to use.
        $unsub_token = wildfire_random_string(WILDFIRE_UNSUBSCRIBE_LENGTH);
      }

      // Set up the unsubscribe URL.
      return url(
        'wildfire/unsubscribe/' . $unsub_token,
        array(
          'absolute' => TRUE,
          'alias'    => TRUE,
        )
      );
    break;

    /*
     * ***********
     * 'message' TOKEN SET
     * ***********
     */
    case 'subject':
    case 'from_name':
    case 'from_email':
    case 'reply_name':
    case 'reply_email':
      // Get the message associated with the job if it's not already cached.
      if (empty($cache['message'][$jid][$token])) {
        $job = new WildfireClientJob($jid);
        $message = WildfireClientMessage::getMessageObject($job->type);
        $message->load($job->extra);
        $cache['message'][$jid][$token] = $message->{$token};
      }
      if (isset($cache['message'][$jid][$token])
      && is_string($cache['message'][$jid][$token])) {
        return $cache['message'][$jid][$token];
      }

      break;

    /*
     * ***********
     * 'field' TOKEN SET
     * ***********
     */
    default:
      if ($uid > 0) {

        // Wildfire provides built-in support for obtaining extra user fields,
        // if the module is enabled. Let's store a field map statically in the
        // cache.
        if ($cache['pma'] == NULL) {
          if (module_exists('field')) {
            $cache['pma'] = TRUE;

            $fields = field_info_instances('user');

            foreach ($fields['user'] as $field) {
              $cache['pma_map'][$field['field_name']] = $field['field_name'];
            }
          }
          else {
            $cache['pma'] = FALSE;
          }
        }

        // If profile module isn't available, how did we get here?
        if (!$cache['pma']) {
          return '';
        }

        // Let's also cache the tokens we can accept as valid.
        if (empty($cache['accepted_tokens'])) {
          $cache['accepted_tokens'] = module_invoke(
            'wildfire_jobs',
            'wildfire_token_info'
          );
          $cache['accepted_tokens'] = $cache['accepted_tokens']['wildfire_jobs'];
        }

        if (!in_array($token, $cache['accepted_tokens'])) {
          return '';
        }

        // If the token doesn't start with 'field_', prefix it as we support
        // tokens both with and without the prefix.
        if (drupal_substr($token, 0, drupal_strlen('field_')) !== 'field_') {
          $token = 'field_' . $token;
        }

        // We get the field data directly rather than using the API
        // for performance reasons; field_get_items() requires fully-loaded
        // entity objects to exist to perform lookups on, so you have
        // the overhead of a user_load() or entity_load() as well as the actual
        // field value lookup. Note that the direct method of course will not
        // honour revision data.
        $query = db_select('field_data_' . $token, 'fd');
        $query->fields('fd', array(
          $token . '_value',
        ));
        $query->condition('entity_id', $uid, '=');
        $result = $query->execute();
        $value = $result->fetchField(0);

        if ($value !== FALSE) {
          return $value;
        }

      }

      break;

  }

  // If the callback was called in a way that means we have nothing to return,
  // do just that...
  return '';

}

/**
 * Callback function to render the jobs history page.
 *
 * @return array
 *   Drupal render array representing the history page.
 */
function wildfire_jobs_history_page() {

  $headers = array(
    array(
      'data' => t('Title'),
      'field' => 'title',
    ),
    array(
      'data'  => t('List'),
      'field' => 'lid',
    ),
    array(
      'data'  => t('Send count'),
      'field' => 'count',
    ),
    array(
      'data'  => t('Open Count'),
      'field' => '',
    ),
    array(
      'data'  => t('Started'),
      'field' => 'started',
      'sort'  => 'desc',
      'sortable' => FALSE,
    ),
    array(
      'data'  => t('Status'),
      'field' => 'status',
    ),
    array(
      'data'  => t('Operations'),
    ),
  );

  $rows = array();

  $query = db_select('wildfire_jobs', 'wj')->extend('PagerDefault')->extend('TableSort');
  $query->limit(20);
  $query->orderByHeader($headers);
  $query->join('wildfire_lists', 'wl', 'wj.lid = wl.lid');
  $query->fields('wj', array(
      'jid',
      'template',
      'uid',
      'lid',
      'started',
      'count',
      'status',
      'scheduled',
      'completed',
      'processed_count',
      'title',
      'type',
    ));
  $query->addField('wl', 'name', 'listname');
  $result = $query->execute();

  while ($dbrow = $result->fetchAssoc()) {
    $rows[] = wildfire_jobs_list_renderable_row_get($dbrow);
  }

  return array(
    array(
      'table' => array(
        '#theme' => 'wildfire_jobs_list',
        '#table' => array(
          '#header' => $headers,
          '#rows' => $rows,
          '#empty' => t('There are no jobs to display'),
          '#attributes' => array(
            'id' => 'wildfire-jobs-table',
          ),
        ),
      ),
      'pager' => array(
        '#theme' => 'pager',
      ),
    ),
  );

}

/**
 * Callback function to render the current jobs page.
 *
 * @return array
 *   Drupal render array representing the history page.
 */
function wildfire_jobs_current_page() {

  $headers = array(
    t('Title'),
    t('List'),
    t('Started'),
    t('Recpt. Total'),
    t('Recpt. Processed'),
    t('Progress'),
    t('Operations'),
  );

  // == Table 1: Active jobs.
  $rows = array();

  $query = db_select('wildfire_jobs', 'wj')->extend('PagerDefault');
  $query->limit(5);
  $query->orderBy('started', 'DESC');
  $query->join('wildfire_lists', 'wl', 'wj.lid = wl.lid');
  $query->fields('wj', array(
      'jid',
      'title',
      'lid',
      'started',
      'status',
      'count',
      'processed_count',
      'type',
      'template',
      'type',
    ));
  $query->addField('wl', 'name', 'listname');
  $query->condition('wj.status', WILDFIRE_JOB_PROCESSING, '=');
  $result = $query->execute();

  while ($dbrow = $result->fetchAssoc()) {
    $row = array();

    $row[] = l(
      $dbrow['title'],
      'admin/wildfire/report/job/' . $dbrow['jid'] . '/view',
      array(
        'attributes' => array(
          'title' => t(
            'Job ID: !jid, Type: !type, Template: !template',
            array(
              '!jid' => $dbrow['jid'],
              '!type' => $dbrow['type'],
              '!template' => $dbrow['template'],
            )
          ),
        ),
      )
    );

    // If this job is being sent to a list, show the list name and set the list
    // count. Otherwise, use 'test' and count the number of recipients.
    if (isset($dbrow['recipients'])) {
      $row[] = t('Test');
    }
    else {
      $row[] = l(
        $dbrow['listname'],
        'admin/wildfire/lists/' . $dbrow['lid'] . '/view',
        array('attributes' => array('title' => t('View the contents of this list.')))
      );
    }

    $row[] = format_date($dbrow['started'], 'custom', WILDFIRE_DATETIME);

    $row[] = $dbrow['count'];
    $row[] = $dbrow['processed_count'];

    $status_cell = wildfire_get_status_text($dbrow);
    $status_cell['#theme_wrappers'] = array('wildfire_status_cell');

    // This needs to be a complex cell item for the cells render array to
    // pass through rendering rather than being taken as a literal string.
    $row[] = array(
      'data' => $status_cell,
    );

    $ops = array();

    // If the user is allowed to manually refresh a jobs status from the server,
    // provide the link to it here. The permission is defined in
    // wildfire_rpc_jobs, so if that module is not enabled, the link
    // will not show up anyway.
    //
    if (user_access('use wildfire rpc jobs status refresh')) {

      $ops[] = l(
        t('Refresh'),
        'admin/wildfire/jobs/' . $dbrow['jid'] . '/status-refresh',
        array(
          'attributes' => array(
            'title' => t('Manually refresh the jobs status from the server'),
          ),
        )
      );

    }

    $ops[] = l(
      t('View report'),
      'admin/wildfire/report/job/' . $dbrow['jid'] . '/view',
      array(
        'attributes' => array(
          'title' => t('View a report for this send job and see statistics on how many people opened the email or clicked links within it'),
        ),
      )
    );

    $row[] = implode(' | ', $ops);

    $rows[] = $row;
  }

  $active_jobs = array(
    '#theme' => 'wildfire_jobs_list',
    '#table' => array(
      '#header' => $headers,
      '#rows' => $rows,
      '#empty' => t('There are no jobs to display'),
      '#attributes' => array(
        'id'    => 'wildfire-jobs-active-table',
        'class' => array('wildfire-jobs'),
      ),
    ),
  );

  // == Table 2: Pending jobs.
  $headers = array(
    t('Title'),
    t('List'),
    t('Send count'),
    t('Open Count'),
    t('Scheduled/Started'),
    t('Status'),
    t('Operations'),
  );

  $rows = array();

  $query = db_select('wildfire_jobs', 'wj')->extend('PagerDefault');
  $query->limit(5);
  $query->orderBy('scheduled', 'DESC');
  $query->join('wildfire_lists', 'wl', 'wj.lid = wl.lid');
  $query->fields('wj', array(
      'jid',
      'template',
      'uid',
      'lid',
      'started',
      'count',
      'status',
      'scheduled',
      'completed',
      'processed_count',
      'title',
      'type',
    ));
  $query->addField('wl', 'name', 'listname');
  $query->condition(
    'wj.status',
    array(
      WILDFIRE_JOB_PENDING,
      WILDFIRE_JOB_PREPARING,
      WILDFIRE_JOB_PREPARED,
      WILDFIRE_JOB_PAUSED,
    ),
    'IN'
  );
  $result = $query->execute();

  while ($dbrow = $result->fetchAssoc()) {
    $rows[] = wildfire_jobs_list_renderable_row_get($dbrow);
  }

  $pending_jobs = array(
    '#theme' => 'wildfire_jobs_list',
    '#table' => array(
      '#header' => $headers,
      '#rows' => $rows,
      '#empty' => t('There are no jobs to display'),
      '#attributes' => array(
        'id' => 'wildfire-jobs-pending-table',
        'class' => array('wildfire-jobs'),
      ),
    ),
  );

  // == Table 3: Latest jobs.
  $headers = array(
    t('Title'),
    t('List'),
    t('Send count'),
    t('Open Count'),
    t('Scheduled/Started'),
    t('Status'),
    t('Operations'),
  );

  $rows = array();

  $query = db_select('wildfire_jobs', 'wj')->extend('PagerDefault');
  $query->limit(5);
  $query->orderBy('scheduled', 'DESC');
  $query->join('wildfire_lists', 'wl', 'wj.lid = wl.lid');
  $query->fields('wj', array(
      'jid',
      'template',
      'uid',
      'lid',
      'started',
      'count',
      'status',
      'scheduled',
      'completed',
      'processed_count',
      'title',
      'type',
    ));
  $query->addField('wl', 'name', 'listname');
  $query->condition(
    'wj.status',
    array(
      WILDFIRE_JOB_PROCESSING,
      WILDFIRE_JOB_PENDING,
      WILDFIRE_JOB_PAUSED,
      WILDFIRE_JOB_PREPARING,
      WILDFIRE_JOB_PREPARED,
    ),
    'NOT IN'
  );
  $result = $query->execute();

  while ($dbrow = $result->fetchAssoc()) {
    $rows[] = wildfire_jobs_list_renderable_row_get($dbrow);
  }

  $latest_jobs = array(
    '#theme' => 'wildfire_jobs_list',
    '#table' => array(
      '#header' => $headers,
      '#rows' => $rows,
      '#empty' => t('There are no jobs to display'),
      '#attributes' => array(
        'id' => 'wildfire-jobs-latest-table',
        'class' => array('wildfire-jobs'),
      ),
    ),
  );

  return array(
    '#theme' => 'wildfire_jobs_current_page',
    '#active' => $active_jobs,
    '#pending' => $pending_jobs,
    '#latest' => $latest_jobs,
  );

}

/**
 * Get a renderable representation of a row for use in the jobs lists.
 *
 * @param array $dbrow
 *   Associative array containing the row to render.
 *
 * @return array
 *   An array suitable for use as a row to pass to the "wildfire_jobs_list"
 *   theming function.
 */
function wildfire_jobs_list_renderable_row_get($dbrow) {

  $row = array();

  $row[] = l(
    $dbrow['title'],
    'admin/wildfire/report/job/' . $dbrow['jid'] . '/view',
    array(
      'attributes' => array(
        'title' => t(
          'Job ID: !jid, Type: !type, Template: !template',
          array(
            '!jid' => $dbrow['jid'],
            '!type' => $dbrow['type'],
            '!template' => $dbrow['template'],
          )
        ),
      ),
    )
  );

  // If this job is being sent to a list, show the list name and set the list
  // count. Otherwise, use 'test' and count the number of recipients.
  if (isset($dbrow['recipients'])) {
    $row[] = t('Test');
  }
  else {
    $row[] = l(
      $dbrow['listname'],
      'admin/wildfire/lists/' . $dbrow['lid'] . '/view',
      array('attributes' => array('title' => t('View the contents of this list.')))
    );
  }

  $row[] = $dbrow['count'];

  // Calculate the number of opens. It takes one query per job - could we
  // improve this?
  $opens = wildfire_tracking_get_opens($dbrow['jid']);

  // Check to see that "$dbrow->count" is greater than zero to avoid
  // division by Zero error.
  if ($dbrow['count'] > 0) {
    $rounded_dbrow_count = round($opens / $dbrow['count'] * 100, 2);
  }
  else {
    $rounded_dbrow_count = 0;
  }

  $row[] = $opens . ' (' . $rounded_dbrow_count . '%)';

  // If the job is completed, show the completed date along with how long
  // it took, else show started/scheduled date.
  if ($dbrow['completed'] > 0) {

    $markup = format_date($dbrow['completed'], 'custom', WILDFIRE_DATETIME);
    $markup .= ' (';
    $markup .= wildfire_format_duration($dbrow['completed'] - $dbrow['started']);
    $markup .= ')';

    $date_cell = array(
      '#type' => 'markup',
      '#markup' => $markup,
      '#attributes' => array(
        'class' => array('date-completed'),
      ),
    );
  }
  else {
    if ($dbrow['started'] > 0) {
      $date_cell = array(
        '#type' => 'markup',
        '#markup' => format_date($dbrow['started'], 'custom', WILDFIRE_DATETIME),
        '#attributes' => array(
          'class' => array('date-started'),
        ),
      );
    }
    else {
      $date_cell = array(
        '#type' => 'markup',
        '#markup' => format_date($dbrow['scheduled'], 'custom', WILDFIRE_DATETIME),
        '#attributes' => array(
          'class' => array('date-scheduled'),
        ),
      );
    }
  }

  $date_cell['#theme_wrappers'] = array('wildfire_status_cell');

  $row[] = array(
    'data' => $date_cell,
  );

  $status_cell = wildfire_get_status_text($dbrow);
  $status_cell['#theme_wrappers'] = array('wildfire_status_cell');

  // Add the cancel button on if we're able to cancel this job.
  $job = new WildfireClientJob($dbrow['jid']);
  if ($job->canCancel()) {
    $status_cell['#markup'] .= ' (' . l(
      t('cancel'),
      'admin/wildfire/jobs/' . $dbrow['jid'] . '/cancel',
      array('attributes' => array('title' => t('Cancel this job and prevent any of its emails from being sent')))
    ) . ')';
  }

  // This needs to be a complex cell item for the cells render array to
  // pass through rendering rather than being taken as a literal string.
  $row[] = array(
    'data' => $status_cell,
  );

  $ops = array();

  $ops[] = l(
    t('View report'),
    'admin/wildfire/report/job/' . $dbrow['jid'] . '/view',
    array(
      'attributes' => array(
        'title' => t('View a report for this send job and see statistics on how many people opened the email or clicked links within it'),
      ),
    )
  );

  $row[] = implode(' | ', $ops);

  return $row;

}

/**
 * Implements hook_wildfire_admin_block().
 */
function wildfire_jobs_wildfire_admin_block() {
  $output = array();

  module_load_include('inc', 'wildfire_jobs', 'wildfire_jobs.send');
  $output[] = wildfire_jobs_admin_block();

  return $output;
}

/**
 * Given a numeric status code for a mail job, gets the textual equivalent.
 *
 * @param array $job
 *   An array containing a loaded job.
 *
 * @return array
 *   A drupal render array containing the status as text plus any required
 *   formatting.
 */
function wildfire_get_status_text($job) {
  switch ($job['status']) {
    case WILDFIRE_JOB_PENDING:
      return array(
        '#type' => 'item',
        '#markup' => t('Pending'),
        '#attributes' => array(
          'class' => array('status-pending'),
        ),
      );

    case WILDFIRE_JOB_PAUSED:
      // If the user can unpause a job, provide a link to allow them to do so.
      if (user_access('use wildfire rpc jobs unpause')) {
        return array(
          '#type' => 'item',
          '#markup' => t(
            'Paused (!retry)',
            array(
              '!retry' => l(t('retry'), 'admin/wildfire/jobs/' . $job['jid'] . '/retry'),
            )
          ),
          '#attributes' => array(
            'class' => array('status-paused'),
          ),
        );
      }
      else {
        return array(
          '#type' => 'item',
          '#markup' => t('Paused'),
          '#attributes' => array(
            'class' => array('status-paused'),
          ),
        );
      }
    case WILDFIRE_JOB_CANCELLED:
      return array(
        '#type' => 'markup',
        '#markup' => t('Cancelled'),
        '#attributes' => array(
          'class' => array('status-cancelled'),
        ),
      );

    case WILDFIRE_JOB_PROCESSING:
      return array(
        '#theme' => 'wildfire_job_progress_bar',
        '#title' => t('Processing'),
        '#progress' => (100 / (int) $job['count']) * (int) $job['processed_count'],
        '#attributes' => array(
          'class' => array('status-progress'),
        ),
      );

    case WILDFIRE_JOB_COMPLETE:
      return array(
        '#type' => 'item',
        '#markup' => t('Complete'),
        '#attributes' => array(
          'class' => array('status-complete'),
        ),
      );

    case WILDFIRE_JOB_FAILED:
      return array(
        '#type' => 'item',
        '#markup' => t(
          'Failed (!why)',
          array(
            '!why' => l(t('view log'), 'admin/reports/dblog'),
          )
        ),
        '#attributes' => array(
          'class' => array('status-cancelled'),
        ),
      );

    case WILDFIRE_JOB_PREPARING:
      return array(
        '#type' => 'item',
        '#markup' => t('Preparing'),
        '#attributes' => array(
          'class' => array('status-preparing'),
        ),
      );

    case WILDFIRE_JOB_PREPARED:
      return array(
        '#type' => 'item',
        '#markup' => t('Prepared'),
        '#attributes' => array(
          'class' => array('status-progress'),
        ),
      );

    default:
      return array(
        '#type' => 'item',
        '#markup' => t(
          'Unknown status (code @n)',
          array(
            '@n' => $job['status'],
          )
        ),
        '#attributes' => array(
          'class' => array('status-cancelled'),
        ),
      );
  }
}
