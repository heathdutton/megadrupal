<?php
/**
 * @file
 *  wildfire_jobs.install
 *
 * Installation functions for Wildfire jobs
 *
 * @author Craig Jones <craig@tiger-fish.com>
 * @author Chris Cohen <chris.cohen@tiger-fish.com>
 */

/**
 * Implements hook_install().
 */
function wildfire_jobs_install() {

}

/**
 * Implements hook_uninstall().
 */
function wildfire_jobs_uninstall() {

}

/**
 * Implements hook_schema().
 */
function wildfire_jobs_schema() {
  /**
   * This should be representative of the NOW schema, not the START schema
   * See: http://drupal.org/node/146862
   *
   * It is expected that the hook_update_X() functions will update existing
   * installations to match this schema, they aren't incremental updates
   * from this schema
   */
  $schema = array();
  $t = get_t();

  $schema['wildfire_sends'] = array(
    'description' => $t('The email sends that have been made.'),
    'fields' => array(
      'sid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => $t('The auto-incrementing send id.'),
      ),
      'uid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => $t('The user id to whom this was sent.'),
      ),
      'sent' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => $t('UNIX timestamp for when this send was executed.'),
      ),
      'type' => array(
        'type' => 'varchar',
        'length' => 16,
        'not null' => TRUE,
        'default' => '',
        'description' => $t('The type of email sent, such as broadcast or alert. Types are defined in hook_wildfire_type_info().'),
      ),
    ),
    'primary key' => array('sid'),
  );
  $schema['wildfire_jobs'] = array(
    'description' => $t('A list of mailing jobs to be carried out.'),
    'fields' => array(
      'jid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => $t('The auto-incrementing job id.'),
      ),
      'template' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => $t('The machine-readable name of the template used on this job.'),
      ),
      'uid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => $t('The user ID of the user who created this job.'),
      ),
      'lid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => $t('The list ID of the list to which the job should be sent. If 0, will be sent to everyone on the system.'),
      ),
      'type' => array(
        'type' => 'varchar',
        'length' => 16,
        'not null' => TRUE,
        'default' => '',
        'description' => $t('The type of mailing this job is for, such as alert or broadcast.'),
      ),
      'extra' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => $t('Extra information for this job. Usually contains the mailing ID, such as alert 5, or broadcast 6.'),
      ),
      'started' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => $t('A UNIX timestamp representing the time at which this send started.'),
      ),
      'scheduled' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => $t('A UNIX timestamp representing the earliest time this job should begin.'),
      ),
      'completed' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => $t('A UNIX timestamp representing when this job was completed.'),
      ),
      'count' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => $t('How many people were in the list at the time the job was queued.'),
      ),
      'status' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => $t('The status code of the job, such as pending or complete.'),
      ),
      'processed_count' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => $t('The number of people processed on this job so far'),
      ),
      'failed_count' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => $t('The number of failed sends on this job so far'),
      ),
      'processor' => array(
        'type' => 'varchar',
        'length' => 8,
        'not null' => TRUE,
        'default' => 'local',
        'description' => $t('Processor used for the job, either "local" or "remote"'),
      ),
      'juid' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => $t('The unique Job ID used with the remote server'),
      ),
      'title' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => $t('A human-readable identifier for the job'),
      ),
      'mode' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
        'description' => $t('Mode for the job. 0=Normal, 1=Test'),
      ),
      'last_modified' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => $t('The UNIX Timestamp when this job was last modified'),
      )
    ),
    'primary key' => array('jid'),
    'indexes' => array(
      'started' => array('started'),
      'scheduled' => array('scheduled'),
    ),
  );
  $schema['wildfire_job_mails'] = array(
    'description' => $t('Individual emails queued and waiting to be sent.'),
    'fields' => array(
      'jid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => $t('The job ID for the mail.'),
      ),
      'processed' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => $t('Whether or not this job mail has been sent'),
      ),
      'token' => array(
        'type' => 'varchar',
        'length' => 8,
        'not null' => TRUE,
        'default' => '',
        'description' => $t('The unsubscribe token, comprising 8 alphanumeric characters.'),
      ),
      'uid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => $t('The ID of the user this email is being sent to.'),
      ),
      'uploaded' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => $t('Flag for uploaded status (0 = false, 1 = true)'),
      ),
      'mail' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => $t('Users email address at the time the job was initiated'),
      ),
      'metadata' => array(
        'type' => 'text',
        'size' => 'medium',  // 16MB per metadata entry should be plenty
        'serialize' => TRUE,
        'description' => $t('Serialized metadata containing custom user fields, chunk map, etc'),
      ),
    ),
    'primary key' => array('jid', 'uid'),
    'indexes' => array(
      'token' => array('token'),
    ),
  );
  $schema['wildfire_job_content'] = array(
    'description' => $t('Individual content parts for the job.'),
    'fields' => array(
      'jid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => $t('The job ID for the mail.'),
      ),
      'type' => array(
        'type' => 'varchar',
        'length' => 16,
        'not null' => TRUE,
        'default' => '',
        'description' => $t('The type of content.'),
      ),
      'delta' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => $t('The delta for this job content'),
      ),
      'content' => array(
        'type' => 'text',
        'size' => 'medium',  // 16MB per chunk should be plenty
        'description' => $t('The actual content'),
        'serialize' => TRUE,
      ),
      'token_list' => array(
        'type' => 'text',
        'size' => 'medium',  // 16MB per chunk should be plenty
        'description' => $t('A list of tokens within the content with their offsets'),
        'serialize' => TRUE,
      ),
      'uploaded' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => $t('Flag for uploaded status (0 = false, 1 = true)'),
      ),
    ),
    'primary key' => array('jid', 'delta'),
  );

  return $schema;

}

/**
 * Adds processor and juid fields to wildfire_jobs
 */
function wildfire_jobs_update_7201() {

  $t = get_t();

  db_add_field(
    'wildfire_jobs',
    'processor',
    array(
      'type' => 'varchar',
      'length' => 8,
      'not null' => TRUE,
      'default' => 'local',
      'description' => $t('Processor used for the job, either "local" or "remote"'),
    )
  );

  db_add_field(
    'wildfire_jobs',
    'juid',
    array(
      'type' => 'varchar',
      'length' => 128,
      'not null' => TRUE,
      'default' => '',
      'description' => $t('The unique Job ID used with the remote server'),
    )
  );

}

/**
 * Adds a field to store a messages title as a human-readable title for the job
 */
function wildfire_jobs_update_7202() {

  $t = get_t();

  db_add_field(
    'wildfire_jobs',
    'title',
    array(
      'type' => 'varchar',
      'length' => 128,
      'not null' => TRUE,
      'default' => 'Untitled job',
      'description' => $t('A human-readable identifier for the job'),
    )
  );

}

/**
 * Adds a flag to job mails to indicate if the entry has been uploaded or not.
 */
function wildfire_jobs_update_7203() {

  $t = get_t();

  db_add_field(
    'wildfire_job_mails',
    'uploaded',
    array(
      'type' => 'int',
      'size' => 'tiny',
      'unsigned' => TRUE,
      'not null' => TRUE,
      'default' => 0,
      'description' => $t('Flag for uploaded status (0 = false, 1 = true)'),
    )
  );

}

/**
  * Adds a last modified field to the Jobs table.
  */
function wildfire_jobs_update_7204() {

  $t = get_t();

  db_add_field(
    'wildfire_jobs',
    'last_modified',
    array(
      'type' => 'int',
      'not null' => TRUE,
      'default' => 0,
      'description' => $t('The UNIX Timestamp when this job was last modified'),
    )
  );

}

/**
 * Adds a metadata field to job users allowing the values to be preprocessed
 * prior to upload.
 */
function wildfire_jobs_update_7205() {

  $t = get_t();

  db_add_field(
    'wildfire_job_mails',
    'mail',
    array(
      'type' => 'varchar',
      'length' => 128,
      'not null' => TRUE,
      'default' => '',
      'description' => $t('Users email address at the time the job was initiated'),
    )
  );

  db_add_field(
    'wildfire_job_mails',
    'metadata',
    array(
      'type' => 'text',
      'size' => 'medium',  // 16MB per metadata entry should be plenty
      'serialize' => TRUE,
      'description' => $t('Serialized metadata containing custom user fields, chunk map, etc'),
    )
  );

}

/**
 * Adds the job content table, to store the content that is actually going to
 * be used for a job.
 */
function wildfire_jobs_update_7206() {

  $t = get_t();

  db_create_table(
    'wildfire_job_content',
    array(
      'description' => $t('Individual content parts for the job.'),
      'fields' => array(
        'jid' => array(
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
          'description' => $t('The job ID for the mail.'),
        ),
        'type' => array(
          'type' => 'varchar',
          'length' => 16,
          'not null' => TRUE,
          'default' => '',
          'description' => $t('The type of content.'),
        ),
        'delta' => array(
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
          'description' => $t('The delta for this job content'),
        ),
        'content' => array(
          'type' => 'text',
          'size' => 'medium',  // 16MB per chunk should be plenty
          'description' => $t('The actual content'),
          'serialize' => TRUE,
        ),
        'token_list' => array(
          'type' => 'text',
          'size' => 'medium',  // 16MB per chunk should be plenty
          'description' => $t('A list of tokens within the content with their offsets'),
          'serialize' => TRUE,
        ),
        'uploaded' => array(
          'type' => 'int',
          'size' => 'tiny',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
          'description' => $t('Flag for uploaded status (0 = false, 1 = true)'),
        ),
      ),
      'primary key' => array('jid', 'delta'),
    )
  );

}

/**
 * Adds a mode field to the Jobs table to denote whether it is a normal or
 * test job.
 */
function wildfire_jobs_update_7207() {

  $t = get_t();

  db_add_field(
    'wildfire_jobs',
    'mode',
    array(
      'type' => 'int',
      'size' => 'tiny',
      'not null' => TRUE,
      'default' => 0,
      'description' => $t('Mode for the job. 0=Normal, 1=Test'),
    )
  );

}

/**
 * Adds a failed_count field to the Jobs table to store the count of send fails
 * returned from the server.
 */
function wildfire_jobs_update_7208() {

  $t = get_t();

  db_add_field(
    'wildfire_jobs',
    'failed_count',
    array(
      'type' => 'int',
      'unsigned' => TRUE,
      'not null' => TRUE,
      'default' => 0,
      'description' => $t('The number of failed sends on this job so far'),
    )
  );

}

/**
 * Adds an extra index on the job mails table for UIDs.
 */
function wildfire_jobs_update_7209() {

  // This makes it quicker to determine mails for specific UIDs.
  db_add_index('wildfire_job_mails', 'uid', array('uid'));

}

/**
 * Resets the indexes on the Job Mails table to compensate for adding only
 * anon entries e.g. test lists that contain no registered users.
 */
function wildfire_jobs_update_7210() {

  db_drop_primary_key('wildfire_job_mails');
  db_add_primary_key('wildfire_job_mails', array('jid', 'uid', 'mail'));

}
