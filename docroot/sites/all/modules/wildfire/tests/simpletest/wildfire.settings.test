<?php
/**
 * @file
 * Tests the settings pages for the module.
 */
module_load_include('test', 'wildfire', 'tests/wildfire');

class WildfireSettingsTestCase extends WildfireWebTestCase {
  /**
   * Get Information
   */
  public static function getInfo() {
    return array(
      'name' => 'Core - Settings',
      'description' => 'Test the settings functionality of the Wildfire module.',
      'group' => 'Wildfire',
    );
  }

  /**
  /*
   * Setup
   */
  public function setUp() {
    // Load the parts of the module we want to use
    module_load_include('inc', 'wildfire_broadcasts', 'wildfire_broadcasts.api');
    module_load_include('module', 'wildfire_lists', 'wildfire_lists');

    // Create our random details for our example test case.
    $this->settings = new stdClass;
    $this->settings->contenttype = drupal_strtolower($this->randomName(12));
    $this->settings->broadcast = new stdClass;
    $this->settings->list = new stdClass;
    $this->settings->node = array();
    $this->settings->system_name = $this->randomName(16);
    // Generic setup, eg, user, etc.
    parent::setUp();

    // Create some extra permissions needed for this module
    $permissions = array(
      'administer wildfire global settings',
      'administer wildfire lists', // See $this->generalUserAddedToList()
      'administer wildfire messages', // See $this->contenttypesCreate()
    );

    // Add a new role with these permissions
    $new_role = $this->drupalCreateRole($permissions);

    // Add this additional role to the user account.
    $this->user->roles[$new_role] = $new_role;
    user_save($this->user);

    // Log in again to ensure the permissions are being picked up
    $this->drupalLogin($this->user);
  }

  /**
   * Settings Test: General tab
   */
  protected function testSettings() {
    // Test if setup failed.
    if ($this->preFail !== FALSE) {
      $preFail = is_string($this->preFail)
        ? $this->preFail
        : 'Setup failed. Test aborted.';
      $this->fail($preFail);
      return;
    }

    $start = microtime();

    $this->general();
    $this->generalUserAddedToList();

    $this->contenttypesCreateBroadcast();
    $this->contenttypesCreate();
    $this->contenttypesCreateNode();
    $this->contenttypesEnable();

    $this->regionsSnippetFormat();

    $this->pass(t(
      'Tests completed in !time seconds',
      array('!time' => $this->elapsedTime($start))
    ));
  }

  /**
   * Non Numerical
   *
   * Return a string $n characters long consisting of non numerical
   * characters.
   *
   * @param integer $n
   * @return string|false
   */
  protected function nonNumeric($n = 8) {
    if (!is_int($n)) {
      return FALSE;
    }
    $non_numeric = 'abcdefghijklmnopqrstuvwxyzBACDEFGHIJKLMNOPQRSTUVWXYZ/.,?>'
                 . '<#\';~@:][}{=-+_)(*&^%$Â£"!")]';
    $str = '';
    for ($i = 0; $i < $n; $i++) {
      $m = rand(0, drupal_strlen($non_numeric) - 1);
      $str .= $non_numeric[$m];
    }
    return $str;
  }

  /**
   * Test the general settings tab.
   */
  protected function general() {
    // Make sure the relevant fields are on the form and defaults are correct.
    $this->drupalGet('admin/wildfire/settings');
    $this->assertFieldByName('wildfire_system_name', '');
    $this->assertFieldByName('wildfire_optout_label', '');
    // assertFieldByName() seems to be bugged for textareas, but can't see why?
    $this->assertFieldByXPath('//textarea[@name="wildfire_optout_description"]');

    // Test that the system name field cannot be empty.
    $post = array(
      'wildfire_system_name' => '',
    );
    $this->drupalPost(
      'admin/wildfire/settings',
      $post,
      t('Save configuration')
    );
    $this->assertText('System Name field is required.');

    // Fill out the system name with invalid characters and test that it's
    // rejected.
    $wrong = array(
      'wildfire_system_name' => 'string contains(in)valid characters!',
    );
    $this->drupalPost(
      'admin/wildfire/settings',
      $wrong,
      t('Save configuration')
    );
    $this->assertText(t('You are only permitted use to alphanumeric characters and hyphens in the system name.'));

    // Fill the system name with something that is valid, and check that the
    // error code text doesn't show up
    $post = array(
      'wildfire_system_name' => $this->settings->system_name,
    );
    $this->drupalPost(
      'admin/wildfire/settings',
      $post,
      t('Save configuration')
    );
    $this->assertNoText('System Name field is required.');
    $this->assertNoText(t('You are only permitted use to alphanumeric characters and hyphens in the system name.'));

    // Fill out the optout label with an empty string and test that it's
    // rejected.
    $wrong = array(
      'wildfire_optout_label' => '',
    );
    $this->drupalPost(
      'admin/wildfire/settings',
      $wrong,
      t('Save configuration')
    );
    $this->assertText(t('Opt out label field is required.'));

    // Fill out the optout label with invalid characters and test that it's
    // rejected.
    $wrong = array(
      'wildfire_optout_label' => 'Label <a href="http://www.google.com">LINK</a>',
    );
    $this->drupalPost(
      'admin/wildfire/settings',
      $wrong,
      t('Save configuration')
    );
    $this->assertText(t('The label must contain no HTML and be valid UTF-8 text'));

    // Fill out the optout description with invalid characters and test that it's
    // rejected.
    $wrong = array(
      'wildfire_optout_description' => 'Description <a href="http://www.google.com">LINK</a>',
    );
    $this->drupalPost(
      'admin/wildfire/settings',
      $wrong,
      t('Save configuration')
    );
    $this->assertText(t('The description must contain no HTML and be valid UTF-8 text'));

    // Set some allowed values for label and description and test that they are
    // stored in the database
    $test = array(
      'wildfire_optout_label' => 'This is the label',
      'wildfire_optout_description' => 'This is the description',
    );
    $this->drupalPost(
      'admin/wildfire/settings',
      $test,
      t('Save configuration')
    );
    $temp['label'] = variable_get('wildfire_optout_label', '');
    $temp['description'] = variable_get('wildfire_optout_description', '');
    $this->assertEqual(
      $temp['label'],
      $test['wildfire_optout_label'],
      t('Label saved in database.')
    );
    $this->assertEqual(
      $temp['description'],
      $test['wildfire_optout_description'],
      t('Description saved in database.')
    );

    // Check the new values are returned in the form fields
    $this->drupalGet('admin/wildfire/settings');
    $this->assertRaw(
      $test['wildfire_optout_label'],
      t('Label value found on settings page.')
    );
    $this->assertRaw(
      $test['wildfire_optout_description'],
      t('Description value found on settings page.')
    );

    // delete the optout variables from the database and test that there are
    // the default values being set in the form
    // Check the new values are returned in the form fields
    variable_del('wildfire_optout_label');
    variable_del('wildfire_optout_description');
    $defaults = wildfire_lists_user_get_optout_text();
    $this->drupalGet('admin/wildfire/settings');
    $this->assertRaw(
      $defaults['label'],
      t('Default label value found on settings page.')
    );
    $this->assertRaw(
      $defaults['description'],
      t('Default description value found on settings page.')
    );

    // Check that the form defaults are now set correctly.
    $this->drupalGet('admin/wildfire/settings');
    $this->assertFieldByName('wildfire_system_name', $this->settings->system_name);

    // Check that the variables have been saved correctly.
    $this->assertEqual(
      $this->settings->system_name,
      variable_get('wildfire_system_name', ''),
      t('System name saved in database.')
    );

  }

  /**
   * Set users to be added to a specific list on registration, then create user.
   *
   * The user should be added to the specified list. Also, test the import
   * functionality to make sure the user is NOT added to the specified list,
   * since we don't want to do this automatically on import.
   */
  protected function generalUserAddedToList() {
    /**
     * Test that a basic user creation results in the user being added to the
     * list
     */
    $list1 = $this->generateList();
    variable_set('wildfire_registration_add_to_list', TRUE);
    variable_set('wildfire_registration_list', $list1->id);

    $account = $this->drupalCreateUser();

    $this->assertTrue(
      wildfire_user_is_subscribed($account->uid, $list1->id),
      t('User was added to list on registration')
    );

    /**
     * Test that an import does NOT result in the user being added to the list.
     */

    // Create an EMPTY list to import into.
    $list2 = $this->generateList(0);

    // Make sure we have the CSV file for testing.
    $csv = drupal_get_path('module', 'wildfire')
         . '/tests/testsettings.csv';
    $csv = realpath($csv);
    $this->assertTrue(
      is_file($csv),
      t('Found the test CSV file for importing.')
    );

    // Upload the CSV file and perform the import.
    $import = array(
      'files[csvfile]' => $csv,
    );
    $this->drupalPost(
      'admin/wildfire/lists/import',
      $import,
      t('Upload')
    );

    $import = array(
      '0' => 'mail',
      'importlist' => $list2->id,
    );
    $this->drupalPost(
      NULL,
      $import,
      t('Import')
    );

    // Get the user ID of the newly imported user.
    $query = db_select('wildfire_lists_users', 'clu')
      ->fields('clu', array(
        'uid'
      ));
    $query->condition('lid', $list2->id, '=');
    $query->range(0, 1);
    $result = $query->execute();

    $uid = $result->fetchField();

    $this->assertFalse(
      wildfire_user_is_subscribed($uid, $list1->id),
      t('User was not subscribed to the default list when imported')
    );
  }

  /**
   * Settings Test: Create Requisits
   *
   * Create a temporary broadcast for this test so we can test adding nodes of
   * our ContentType.
   */
  protected function contenttypesCreateBroadcast() {
    // Create a broadcast.
    $this->settings->broadcast->name = $this->randomName(16);
    $this->settings->broadcast->subject = $this->randomName(32);
    $broadcast = array(
      'name' => $this->settings->broadcast->name,
      'subject' => $this->settings->broadcast->subject,
      'template' => $this->template,
    );
    $broadcast = wildfire_broadcasts_add($broadcast);
    $this->assertTrue(
      $broadcast,
      t(
        'Created broadcast with name "!name".',
        array('!name' => $this->settings->broadcast->name)
      )
    );

    $query = db_select('wildfire_broadcasts', 'cb')
      ->fields('cb', array(
      'mid'
    ));
    $query->condition('name', $this->settings->broadcast->name, '=');
    $result = $query->execute();

    $mid = $result->fetchField();

    // Check that the returned value is a Broadcast ID (it will be an
    // integer/numeric string).
    if (!is_numeric($mid)) {
      $this->fail(t('Broadcast was not entered into database.'));
      return;
    }
    $this->settings->broadcast->id = (int) $mid;
    $this->pass(t(
      'Broadcast with name "!broadcast" successfully entered into database '
    . 'with ID !mid.',
      array(
      '!broadcast' => $this->settings->broadcast->name,
      '!mid' => $this->settings->broadcast->id,
    )
    ));
  }

  /**
   * Settings Test: Create Custom Content Type
   *
   * Create a custom ContentType, make sure that the settings page
   * acknowledges that it's there, but also make sure that it is disabled by
   * default.
   */
  protected function contenttypesCreate() {
    // Check that the content type does not appear in the list.
    $this->drupalGet('admin/wildfire/settings/content-types');
    $this->assertNoFieldByName(
      'wildfire_content_types['
      . $this->settings->contenttype
      . ']'
    );
    // Create the content type.
    $contenttype = $this->drupalCreateContentType(array(
      'type' => $this->settings->contenttype,
      'title' => 'WildfireSettingsWebTestCaseCustomContentType',
      'name' => $this->randomName(32),
    ));
    $this->assertEqual($contenttype->type, $this->settings->contenttype);
    // Make sure it appears in the list. UNCHECKED.
    // Fetch the page again (browser refresh).
    $this->drupalGet('admin/wildfire/settings/content-types');
    $this->assertText($contenttype->name);
    // Try to add the content type and FAIL.
    $this->assertNoFieldChecked(
      'edit-wildfire-content-types-'
      . $this->settings->contenttype
    );
  }

  /**
   * Settings Test: Create Node
   *
   * Create a node temporarily for this test and assign it to the custom
   * ContentType we created. Try to add it to the broadcast, which should fail
   * because the ContentType is not yet enabled.
   */
  protected function contenttypesCreateNode() {
    $this->settings->node['custom'] = $this->drupalCreateNode(array(
      'type' => $this->settings->contenttype,
    ));
    $this->assertEqual(
      $this->settings->node['custom']->type,
      $this->settings->contenttype
    );
    $this->drupalGet('node/' . $this->settings->node['custom']->nid);
    $this->assertNoText(t('Add to broadcast'));
    $this->drupalGet(
      'node/'
    . $this->settings->node['custom']->nid
    . '/add_to_broadcast'
    );
    $this->assertNoFieldByName(
      'broadcast['
    . $this->settings->broadcast->id
    . ']'
    );
    // Try to add it to broadcast.
    $add = array(
      'title' => $this->settings->node['custom']->title,
    );
    // We are using simplePost, because drupalPost cannot handle Ajax calls.
    $this->simplePost(
      'admin/wildfire/broadcasts/node/add/'
    . $this->settings->broadcast->id,
      $add
    );
    // Refresh the page to make sure any changes are being shown.
    $this->drupalGet(
      'admin/wildfire/broadcasts/'
    . $this->settings->broadcast->id
    . '/content'
    );

    $this->assertNoText($this->settings->node['custom']->title);
  }

  /**
   * Settings Test: Enable Content Type
   *
   * Enable the custom ContentType we created, and check that it is possible
   * to add nodes to the broadcast now.
   */
  protected function contenttypesEnable() {
    // Make sure that the checkbox defaults to unchecked, even though we have
    // probably already checked this...
    $this->drupalGet('admin/wildfire/settings/content-types');
    $this->assertNoFieldChecked(
      'edit-wildfire-content-types-'
    . $this->settings->contenttype
    );
    // Enable the content type.
    $enable = array(
      'wildfire_content_types[' . $this->settings->contenttype . ']' => 1,
    );
    $this->drupalPost(
      'admin/wildfire/settings/content-types',
      $enable,
      t('Save configuration')
    );
    // Check that the checkbox is now enabled.
    $this->assertFieldChecked(
      'edit-wildfire-content-types-'
    . $this->settings->contenttype
    );

    /**
     * 2011-08-30, craig: This could do with being a somewhat better check
     */
    // Get the first valid repeater name from the broadcasts template, and
    // attempt to add our new node to it.
    $repeater_keys = array_keys(wildfire_repeaters_get($this->template));
    $repeater = $repeater_keys[0];
    $add = array(
      'mid' => $this->settings->broadcast->id,
      'node' => $this->settings->node['custom']->title,
      'repeater' => $repeater,
      'type' => 'broadcast',
    );

    $this->drupalPost(
      'admin/wildfire/broadcasts/' . $this->settings->broadcast->id . '/content/repeaters',
      $add,
      t('Add')
    );

    // Refresh the page to make sure any changes are being shown.
    $this->drupalGet(
      'admin/wildfire/broadcasts/'
    . $this->settings->broadcast->id
    . '/content/repeaters'
    );

    // The broadcast should now have content. Check that this is the case.
    $this->assertText($this->settings->node['custom']->title);

  }

  /**
   * Settings Test: Check the Snippets section of the regions settings page
   */
  function regionsSnippetFormat() {

    $this->drupalGet('admin/wildfire/settings/regions');

    // Assert all of the expected fields are there...
    // FIXME: Selection by XPath works whilst By Id does not
        //$this->assertFieldById('edit-wildfire-snippet-format-id');
    $this->assertFieldByXPath('//select[@id="edit-wildfire-snippet-format-id"]');
    $this->assertFieldById('edit-submit');
    // system_settings_form() doesn't build a reset button in D7
    //$this->assertFieldById('edit-reset');

    // Does the snippet format select box have all of the expected options?
    $formats = filter_formats($this->user);
    $format_checklist = array();

    foreach ($formats as $fid => $format) {
      $filter = filter_format_load($fid);
      if (filter_access($filter, $this->user)) {
        $format_checklist[$fid] = $format->name;
      }
    }

    // Assumptions are made that we have at least two filters to choose from
    $saw_unexpected_option = FALSE;
    $xpath = $this->xpath('//select[@id="edit-wildfire-snippet-format-id"]/option');
    foreach ($xpath as $option) {
      $value = (string) $option->attributes()->value;
      if (isset($format_checklist[$value])) {
        unset($format_checklist[$value]);
      }
      else {
        // If it's not set in format_checklist, its either a duplicate
        // option, or it's bad in some other way
        $saw_unexpected_option = TRUE;
      }
    }

    $this->assertTrue(
      empty($format_checklist),
      t('All formats defined are present in the snippet format selector drop-down')
    );

    $this->assertFalse(
      $saw_unexpected_option,
      t('All options in repeater selector have been accounted for')
    );

    $lo_xpath = $this->xpath('//select[@id="edit-wildfire-snippet-format-id"]/option[1]');
    $hi_xpath = $this->xpath('//select[@id="edit-wildfire-snippet-format-id"]/option[last()]');

    /**
     * Make sure that the results are objects before calling member functions
     * on them - if the page does not contain the relevant select elements,
     * the objects will be returned as FALSE.
     */
    if (is_object($lo_xpath[0])) {
      $lo_option = (string) $lo_xpath[0]->attributes()->value;
    }
    if (is_object($hi_xpath[0])) {
      $hi_option = (string) $hi_xpath[0]->attributes()->value;
    }

    $this->assertFalse(empty($lo_option));
    $this->assertFalse(empty($hi_option));

    $this->assertNotEqual(
      $hi_option,
      $lo_option,
      t('More than one filter option is available')
    );

    // Change and save the option selected on the form by automating it,
    // then check the value was saved correctly
    $post = array(
      'wildfire_snippet_format_id' => $hi_option,
    );

    $this->drupalPost(
      'admin/wildfire/settings/regions',
      $post,
      t('Save configuration')
    );

    $this->assertText(t('The configuration options have been saved.'));

    $this->assertTrue(
      variable_get('wildfire_snippet_format_id', filter_default_format()) == $hi_option,
      t('Filter set to highest available value')
    );

    // Reset and set value to something else
    $this->drupalGet('admin/wildfire/settings/regions');

    $post = array(
      'wildfire_snippet_format_id' => $lo_option,
    );

    $this->drupalPost(
      'admin/wildfire/settings/regions',
      $post,
      t('Save configuration')
    );

    $this->assertText(t('The configuration options have been saved.'));

    $this->assertTrue(
      variable_get('wildfire_snippet_format_id', filter_default_format()) == $lo_option,
      t('Filter set to lowest available value')
    );

  }


}
