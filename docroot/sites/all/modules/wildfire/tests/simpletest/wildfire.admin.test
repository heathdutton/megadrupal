<?php
/**
 * @file
 * Tests the administration system.
 */
module_load_include('test', 'wildfire', 'tests/wildfire');

/**
 * Test administerial interface.
 */
class WildfireAdminTestCase extends WildfireWebTestCase {
  /**
   * Implementation of getInfo() method.
   */
  public static function getInfo() {
    return array(
      'name' => 'Core - Admin UI',
      'description' => 'Test the administerial interface and screens in the Wildfire module',
      'group' => 'Wildfire',
    );
  }

  /**
   * Test the admin overview page at admin/wildfire.
   */
  protected function adminOverviewPage() {
    module_load_include('inc', 'wildfire_broadcasts', 'wildfire_broadcasts.api');
    module_load_include('inc', 'wildfire_lists', 'wildfire_lists.api');
    module_load_include('inc', 'wildfire_jobs', 'wildfire_jobs.api');
    module_load_include('inc', 'wildfire_messages', 'wildfire_messages.template.api');

    // Get the page without doing anything else. There should be no jobs or
    // lists.
    $this->drupalGet('admin/wildfire');

    // Check the Broadcast block title is there
    $this->assertText(
      t('Latest broadcasts'),
      t('Broadcasts block title found')
    );

    // Check the Jobs block title is there
    $this->assertText(
      t('Latest send jobs'),
      t('Jobs block title found')
    );

    // Check the menu links are present in the left-hand column with the
    // expected href values
    $menu_list = array(
      t('Broadcasts') => '/admin/wildfire/broadcasts',
      t('Jobs') => '/admin/wildfire/jobs',
      t('Lists') => '/admin/wildfire/lists',
      t('Settings') => '/admin/wildfire/settings',
      t('Templates') => '/admin/wildfire/templates',
    );

    $saw_unexpected_item = FALSE;
    // We are checking both href and title match, which is why we aren't using
    // assertLinkByHref() here, which only does the former.
    // NOTE: With 'Bartik' the list is rendered as <dl>; 'WildFireAdmin' uses
    // <ul> and the list is formatted slightly differently.
    $xpath_dt = $this->xpath('//dl[@class="admin-list"]/dt/a');
    foreach ($xpath_dt as $option) {

      $a_href = (string)$option->attributes()->href;
      $a_text = (string)$option;

      if (!empty($menu_list[$a_text])) {
        if ($menu_list[$a_text] == $a_href) {
          unset($menu_list[$a_text]);
        }
      }
      else {
        $saw_unexpected_item = TRUE;
      }
    }

    $this->assertTrue(
      empty($menu_list),
      t('All overview menu list entries are present and correct')
    );

    // If the list isn't empty, dump what's there so we can see it
    // in the results.
    if (!empty($menu_list)) {
      $this->verbose('Menu list = ' . print_r($menu_list, TRUE));
    }

    $this->assertFalse(
      $saw_unexpected_item,
      t('No unexpected items found in overview menu list entries')
    );

    // Check that the latest jobs table block currently is empty
    $latest_jobs = $this->xpath('//table[@id="wildfire-latest-jobs-table"]/tbody/tr');
    $this->assertEqual(
      trim((string)$latest_jobs[0]->td),
      t('There are no jobs to display.'),
      t('No jobs are displayed in the latest jobs table')
    );

    /**
     * Add some bits and test again.
     */

    // Get a template. Any template will do.
    $templates = wildfire_templates_get();

    // Make sure there is at least one template.
    if (count($templates) == 0) {
      $this->fail(t('Cannot find any templates. Must abort'));
      return;
    }

    $template = array_pop($templates);

    // Add a broadcast. Check it was added properly.
    $bid = wildfire_broadcasts_add(array(
      'name' => $this->randomName(),
      'template' => $template['name'],
      'subject' => $this->randomName(),
    ));
    if ($bid === FALSE) {
      $this->fail(t('Failed to add the broadcast during the test. Must abort.'));
      return;
    }

    // Add a list.
    $lid = wildfire_lists_add_list($this->randomName());

    // Add our user to the list:
    $added = wildfire_lists_user_add($this->user->uid, $lid);

    // Add a job. Use the template we chose earlier, and the list and
    // broadcast we have generated. Add just one recipient: the main user for
    // these tests.
    $job = array(
      'template' => $template['name'],
      'lid' => $lid,
      'type' => 'broadcast',
      'extra' => $bid,
    );
    wildfire_job_add($job, WILDFIRE_JOB_CREATE_IMMEDIATE);

    // Check that the latest jobs table block shows the added job in a Pending
    // state.
    $this->drupalGet('admin/wildfire');
    $latest_jobs = $this->xpath('//table[@id="wildfire-latest-jobs-table"]/tbody/tr');
    $this->assertEqual(
      trim((string)$latest_jobs[0]->td[2]->div),
      t('Pending'),
      t('Added job is displayed in a Pending state')
    );

  }

  /**
   * Implementation of setUp()
   */
  public function setUp() {

    parent::setUp();

    // Create some extra permissions needed to check the overview page(s)
    $permissions = array(
      'use wildfire messages',
      'use wildfire jobs',
      'use wildfire lists',
      'administer wildfire global settings',
      'use wildfire templates',
    );

    // Add a new role with these permissions
    $new_role = $this->drupalCreateRole($permissions);

    // Add this additional role to the user account.
    $this->user->roles[$new_role] = $new_role;
    user_save($this->user);

    // Log in again to ensure the permissions are being picked up
    $this->drupalLogin($this->user);

  }

  /**
   * Implementation of tearDown()
   */
  public function tearDown() {
    parent::tearDown();
  }

  /**
   * Main test method. Other tests are called from here.
   */
  public function testAdmin() {
    // Test if setup failed.
    if ($this->preFail !== FALSE) {
      $preFail = is_string($this->preFail)
        ? $this->preFail
        : 'Setup failed. Test aborted.';
      $this->fail($preFail);
      return;
    }

    $start = microtime();

    $this->adminOverviewPage();

    $this->pass(t(
      'Tests completed in !time seconds',
      array('!time' => $this->elapsedTime($start))
    ));
  }
}
