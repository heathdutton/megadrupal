<?php
/**
 * @file
 * Tests the user system.
 */
module_load_include('test', 'wildfire', 'tests/wildfire');

/**
 * Test user pages functionality.
 */
class WildfireUserTestCase extends WildfireWebTestCase {
  /**
   * Implementation of getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'Core - User Profile',
      'description' => 'Test the user profile pages.',
      'group' => 'Wildfire',
    );
  }

  public function setUp() {
    // Load the parts of the module we want to use
    module_load_include('inc', 'wildfire_broadcasts', 'wildfire_broadcasts.api');
    module_load_include('inc', 'wildfire_lists', 'wildfire_lists.api');
    module_load_include('inc', 'wildfire_jobs', 'wildfire_jobs.send');

    // Create our random details for our example test case.
    $this->userpages = new stdClass;

    // Generic setup, eg, user, etc.
    parent::setUp();
  }

  /**
   * Unsubscribe main test.
   */
  protected function testUserpage() {
    // Test if setup failed.
    if ($this->preFail !== FALSE) {
      $preFail = is_string($this->preFail)
        ? $this->preFail
        : 'Setup failed. Test aborted.';
      $this->fail($preFail);
      return;
    }

    $start = microtime();

    $this->userForm();
    $this->userGlobalOptout();
    $this->userOptoutText();

    $this->pass(t(
      'Tests completed in !time seconds',
      array('!time' => $this->elapsedTime($start))
    ));
  }

  /**
   * Make sure there are no lists listed on the user profile edit form.
   */
  protected function userForm() {
    $this->drupalGet('user/' . $this->user->uid . '/edit');

    // Make sure the fieldset is present, and that the global optout checkbox is
    // not checked.
    $this->assertFieldByXPath('//fieldset[@id="edit-wildfire-fieldset"]');
    $this->assertFieldById('edit-global-optout', FALSE);
  }

  /**
   * Test the optout label and description
   */
  protected function userOptoutText() {
    // make sure that the optout variables are removed from the Variables table
    // so we can check the defaults with nothing in the database
    variable_del('wildfire_optout_label');
    variable_del('wildfire_optout_description');

    // get default values
    $defaults = wildfire_lists_user_get_optout_text();

    // get user edit page
    $this->drupalGet('user/' . $this->user->uid . '/edit');

    $this->assertRaw($defaults['label'], t('Found default optout label'));
    $this->assertRaw($defaults['description'], t('Found default optout description'));

    // Set some allowed values for label and description and test that they are
    // displayed on the user edit page
    $test = array(
      'wildfire_optout_label' => 'This is the label',
      'wildfire_optout_description' => 'This is the description',
    );

    variable_set(
      'wildfire_optout_label',
      $test['wildfire_optout_label']
    );
    variable_set(
      'wildfire_optout_description',
      $test['wildfire_optout_description']
    );

    $this->drupalGet('user/' . $this->user->uid . '/edit');

    $this->assertRaw(
      $test['wildfire_optout_label'],
      t('Custom label displayed correctly - ' .
        $test['wildfire_optout_label'])
    );
    $this->assertRaw(
      $test['wildfire_optout_description'],
      t('Custom description displayed correctly - ' .
        $test['wildfire_optout_description'])
    );

    // clean up
    variable_del('wildfire_optout_label');
    variable_del('wildfire_optout_description');
  }

  /**
   * Test that the global optout option works.
   */
  protected function userGlobalOptout() {
    // Make sure the global optout is not already set.
    $query = db_select('wildfire_optouts', 'co')
      ->fields('co', array(
        'uid',
      ));
    $query->condition('uid', $this->user->uid, '=');
    $query->condition('lid', 0, '=');
    $result = $query->execute();

    $result = $result->fetchField();

    $this->assertIdentical($result, FALSE, t('User has not globally opted out'));

    $stamp = REQUEST_TIME;

    $this->drupalPost(
      'user/' . $this->user->uid . '/edit',
      array('global_optout' => 1),
      t('Save')
    );

    // Make sure the global optout is now set, the timestamp is greater than
    // the timestamp we set just before saving the page, and that method == 1.
    $query = db_select('wildfire_optouts', 'co')
      ->fields('co', array(
       'uid',
       'timestamp',
       'method',
    ));
    $query->condition('uid', $this->user->uid, '=');
    $query->condition('lid', 0, '=');
    $result = $query->execute();

    $result = $result->fetchAssoc();

    $this->assertEqual($result['uid'], $this->user->uid, t('User has globally opted out'));
    $this->assertEqual($result['method'], 1, t('Method 1 was used to opt the user out'));
    $this->assertTrue($result['timestamp'] >= $stamp, t('Timestamp in database is later than pre-save timestamp'));

    // Get the user profile page again and make sure the default value of the
    // global optout checkbox is now checked.
    $this->drupalGet('user/' . $this->user->uid . '/edit');
    $this->assertFieldById('edit-global-optout', TRUE);
  }
}
