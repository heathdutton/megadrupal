<?php
/**
 * @file
 * Tests the user creation system
 */
module_load_include('test', 'wildfire', 'tests/wildfire');

/**
 * 2011-10-03, craig
 *
 * Desired improvements to this test:
 *
 * * There should be a test inside here for checking that the global opt-out
 *  flag is on the user reg form, and when filled in/not filled in is handled
 *  correctly. We need to write a test that automates user registration in order
 *  to do this.
 * * Check the 'Add user to mailing list' functionality from a user node.
 */

/**
 * Test user creation functionality.
 */
class WildfireUserCreateTestCase extends WildfireWebTestCase {

  protected $usernames_created;

  /**
   * Implementation of getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'Core - User Create',
      'description' => 'Test the user creation process',
      'group' => 'Wildfire',
    );
  }

  public function setUp() {
    // Load the parts of the module we want to use
    module_load_include('inc', 'wildfire_broadcasts', 'wildfire_broadcasts.api');
    module_load_include('inc', 'wildfire_lists', 'wildfire_lists.api');
    module_load_include('inc', 'wildfire_send', 'wildfire_jobs.send');

    $this->usernames_created = array();

    // Generic setup, eg, user, etc.
    parent::setUp();

    $this->pass('Setup OK');
  }

  protected function testRun() {

    /**
     * To ensure that the tests are called in the desired order (create then
     * delete), we only have this one entry point, then call the class members
     * as appropriate
     */

    $this->userCreate();
    $this->userDelete();

  }

  /**
   * Tests user creation functions:
   * wildfire_generate_username()
   * wildfire_random_password()
   */
  protected function userCreate() {

    /**
     * NOTE: This uses our WildfireWebTestCase::drupalCreateUser()
     * implementation in order to pass $edit variables into it
     */

    $this->permissions = array(
      'use wildfire',
    );

    $edit = array();

    // Create three users with the same prefix but random suffixes
    for ($i = 0; $i < 3; $i++) {

      $edit['name'] = strstr($this->test_email, '@', TRUE) . $this->randomName();
      $user = $this->drupalCreateUser($this->permissions, $edit);

      $this->assertTrue(
        $edit['name'] == preg_replace('/[^A-Za-z0-9]/', '', $edit['name']),
        t('%user is an acceptable format for a username', array('%user' => $edit['name']))
      );

      $this->assertTrue(
        !in_array($edit['name'], $this->usernames_created),
        t('Created username %user does not match another user we created', array('%user' => $edit['name']))
      );

      $this->usernames_created[] = $edit['name'];

    }

    /**
     * Create five users using wildfire_generate_username()
     * with the same email address.
     * These should come out with unique user accounts.
     */
    for ($i = 0; $i < 5; $i++) {
      $edit['name'] = wildfire_generate_username($this->test_email);
      $user = $this->drupalCreateUser($this->permissions, $edit);

      $this->assertTrue(
        $edit['name'] == preg_replace('/[^A-Za-z0-9]/', '', $edit['name']),
        t('%user is an acceptable format for a username', array('%user' => $edit['name']))
      );

      $this->assertTrue(
        !in_array($edit['name'], $this->usernames_created),
        t('Created username %user does not match another user we created', array('%user' => $edit['name']))
      );

      $this->usernames_created[] = $edit['name'];

    }

    /**
     * Create five users using wildfire_generate_username()
     * with the same email but where some addresses an end user has entered are
     * in mixed case.
     * These should still come out with unique user accounts.
     */
    for ($i = 0; $i < 5; $i++) {

      $email = $i > 2 ? strtoupper($this->test_email) : $this->test_email;

      $edit['name'] = wildfire_generate_username($email);
      $user = $this->drupalCreateUser($this->permissions, $edit);

      $this->assertTrue(
        $edit['name'] == preg_replace('/[^A-Za-z0-9]/', '', $edit['name']),
        t('%user is an acceptable format for a username', array('%user' => $edit['name']))
      );

      $this->assertTrue(
        !in_array($edit['name'], $this->usernames_created),
        t('Created username %user does not match another user we created', array('%user' => $edit['name']))
      );

      $this->usernames_created[] = $edit['name'];

    }


    // Create two users, but pass wildfire_generate_username() junk
    for ($i = 0; $i < 2; $i++) {
      $edit['name'] = wildfire_generate_username('bad_email_address');
      $user = $this->drupalCreateUser($this->permissions, $edit);

      $this->assertTrue(
        $edit['name'] == preg_replace('/[^A-Za-z0-9]/', '', $edit['name']),
        t('%user is an acceptable format for a username', array('%user' => $edit['name']))
      );

      $this->assertTrue(
        !in_array($edit['name'], $this->usernames_created),
        t('Created username %user does not match another user we created', array('%user' => $edit['name']))
      );

      $this->usernames_created[] = $edit['name'];

    }

    /**
     * Create two users, but pass wildfire_generate_username()
     * an email address that ends up with a numeric prefix
     */
    for ($i = 0; $i < 2; $i++) {
      $edit['name'] = wildfire_generate_username('45892886@example.com');
      $user = $this->drupalCreateUser($this->permissions, $edit);

      $this->assertTrue(
        $edit['name'] == preg_replace('/[^A-Za-z0-9]/', '', $edit['name']),
        t('%user is an acceptable format for a username', array('%user' => $edit['name']))
      );

      $this->assertTrue(
        !in_array($edit['name'], $this->usernames_created),
        t('Created username %user does not match another user we created', array('%user' => $edit['name']))
      );

      $this->usernames_created[] = $edit['name'];

    }

    // Create two users, but pass wildfire_generate_username() nothing
    for ($i = 0; $i < 2; $i++) {
      // NOTE: This uses our drupalCreateUser() implementation in order
      // to pass $edit variables into it
      $edit['name'] = wildfire_generate_username();
      $user = $this->drupalCreateUser($this->permissions, $edit);

      $this->assertTrue(
        $edit['name'] == preg_replace('/[^A-Za-z0-9]/', '', $edit['name']),
        t('%user is an acceptable format for a username', array('%user' => $edit['name']))
      );

      $this->assertTrue(
        !in_array($edit['name'], $this->usernames_created),
        t('Created username %user does not match another user we created', array('%user' => $edit['name']))
      );

      $this->usernames_created[] = $edit['name'];

    }

  }

  /**
   * Tests user deletion functions
   */
  protected function userDelete() {

    /**
     * Let's delete a couple of the users that we generated in testUserCreate()
     */
    $load = array();
    for ($i = 0; $i < 3; $i++) {
      $load['name'] = $this->usernames_created[$i];
      $account = user_load_by_name($load);
      $uid = $account->uid;
      user_cancel(NULL, $uid, 'user_cancel_delete');

      // Check entries in the wildfire tables are gone...
      // Lists table
      $query = db_select('wildfire_lists_users', 'clu');
      $query->condition('uid', $uid, '=');
      $query->addExpression('COUNT(lid)', 'count');
      $result = $query->execute();

      $list_entry_count = $result->fetchField();

      $this->assertEqual(
        $list_entry_count,
        0,
        t('Entries for user in list table is Zero (%count)', array('%count' => $list_entry_count))
      );

      // Opt-out table
      $query = db_select('wildfire_optouts', 'co');
      $query->condition('uid', $uid, '=');
      $query->addExpression('COUNT(lid)', 'count');
      $result = $query->execute();

      $list_entry_count = $result->fetchField();

      $this->assertEqual(
        $list_entry_count,
        0,
        t('Entries for user in opt-out table is Zero (%count)', array('%count' => $list_entry_count))
      );

    }

  }


}
