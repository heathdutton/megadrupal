<?php
/**
 * @file
 * Theme functions for the wildfire module.
 */

/**
 * Theme function to render an image for use in an email.
 *
 * The main difference here is that the image src attribute has an absolute URL,
 * because when viewed from an email, the full URL must be present.
 *
 * See theme_image() for a description of parameters, except the first, which is
 * detailed here.
 *
 * @param string $variables
 *   The image variables to use to render the image tag, as an associative
 *   array.
 *
 * @return string
 *   A formatted XHTML <img> tag for the image, or a raw error message string.
 */
function theme_wildfire_image($variables) {
  $template = $variables['template'];
  $path = $variables['path'];
  $alt = $variables['alt'];
  $title = $variables['title'];
  $attributes = empty($variables['attributes']) ? array() : $variables['attributes'];
  $template = wildfire_template_get($template);

  // When locale support is enabled, and the detection method is URL,
  // all paths get prefixed with 'en-gb', or the equivalent for whatever the
  // language set is.
  //
  // Trouble is, the mail templates system expects a non-prefixed path -
  // in the vast majority of cases, template designers generally won't want to
  // provide different design-related images for different languages, but only
  // want to provide translated content.
  //
  // This strips the prefix by default so that the paths written out are fixed
  // regardless of the language selected.
  //
  // If you still want to use locale prefixed URLs as paths to design-related
  // images, optionally you can pass in a language object in
  // $variables['language'] which will override this behaviour.
  if (!empty($variables['language']) && is_object($variables['language'])) {
    $language = $variables['language'];
  }
  else {
    global $language_url;
    $language = clone $language_url;
    $language->prefix = '';
  }

  // Make sure the template exists and is valid.
  if ($template === FALSE) {
    return t('Warning: the %template template was not found', array('%template' => $template));
  }

  // If the file path exists inside the template folder, use that by default
  // else construct a URL for it.
  if (file_exists($template['path'] . '/images/' . $path)) {
    $realpath = $template['path'] . '/images/' . $path;
  }
  else {
    $realpath = file_create_url('public://wildfire_template_assets/' . $path);
  }

  $url = url(
    $realpath,
    array(
      'absolute' => TRUE,
      'alias'    => TRUE,
      'language' => $language,
    )
  );
  $attributes = drupal_attributes($attributes);

  // If dimensions were not provided, try to work it out from the image itself.
  if (empty($attributes['width']) || empty($attributes['height'])) {
    list(,,,$image_attributes) = @getimagesize($realpath);
  }

  return '<img src="' . check_url($url) . '" alt="' . check_plain($alt) . '" title="' . check_plain($title) . '" ' . (isset($image_attributes) ? $image_attributes : '') . $attributes . ' />';
}

/**
 * Theme function to get the path to a mailtemplate's image.
 *
 * @param string $variables
 *   The image variables to use to render the image tag, as an associative
 *   array.
 *
 * @return string
 *   A full URL path to the image.
 */
function theme_wildfire_image_path($variables) {
  $template = $variables['template'];
  $path = $variables['path'];
  $template = wildfire_template_get($template);

  // Make sure the template exists and is valid.
  if ($template === FALSE) {
    return t('Warning: the %template template was not found', array('%template' => $template));
  }

  // If the file path exists inside the template folder, use that by default
  // else construct a URL for it.
  if (file_exists($template['path'] . '/images/' . $path)) {
    $realpath = $template['path'] . '/images/' . $path;
  }
  else {
    $realpath = file_create_url('public://wildfire_template_assets/' . $path);
  }

  // Formulate the absolute link to the image.
  return url($realpath, array('absolute' => TRUE, 'alias' => TRUE));
}

/**
 * Override for default admin_page rendering.
 *
 * Renders a list of system menu entries on the left, and a quick-list
 * of broadcasts on the right, along with any other module-provided blocks
 *
 *
 * @param array $variables
 *   Variables that control the pages formatting, as an associative array.
 *
 * @return string
 *   The formatted XHTML output for the page.
 */
function theme_wildfire_admin_page($variables) {

  $container = array();
  $blocks = $variables['form'];

  drupal_add_css(drupal_get_path('module', 'wildfire') . '/css/wildfire.icons.css', array('preprocess' => FALSE));

  $item = menu_get_item();
  if ($content = system_admin_menu_block($item)) {
    $container['left'] = theme('admin_block_content', array('content' => $content));
  }

  foreach ($blocks as $block) {
    if ($block_output = theme('admin_block', array('block' => $block))) {
      if (!isset($container['right'])) {
        $container['right'] = '';
      }
      $container['right'] .= $block_output;
    }
  }

  $output = '<div class="admin clear-block">';
  foreach ($container as $id => $data) {
    $output .= '<div class="' . $id . ' clear-block">';
    $output .= $data;
    $output .= '</div>';
  }
  $output .= '</div>';

  return $output;
}

/**
 * Renders a given field from a node entity.
 *
 * It is no longer advised to read field values directly out of the $vars
 * array that is imported into a Wildfire mail template, as the 'raw' content
 * does not cater for detecting the correct display language, different display
 * views (e.g. obtaining a 'teaser' for a nodes 'body'), or adjusting relative
 * links to absolute (as required when sending the finished article out on a
 * broadcast).
 *
 * Therefore, with the exception of metadata, such as title or node ID,
 * when rendering fields for view in a Wildfire template, they should
 * always be rendered using this function to ensure the result is exactly what
 * you expect.
 *
 * @param array $variables
 *   Variables that control the fields formatting, as an associative array
 *
 * @return string
 *   The value for the field requested.
 */
function theme_wildfire_field_render($variables) {

  // Required variables.
  if (
       empty($variables['entity'])
    || empty($variables['field'])
  ) {
    return '';
  }
  $entity = $variables['entity'];
  $field = $variables['field'];

  // Optional variables.
  $display = !empty($variables['display']) ? $variables['display'] : 'wildfire';
  $delta = !empty($variables['delta']) ? $variables['delta'] : 0;
  $entity_type = !empty($variables['entity_type']) ? $variables['entity_type'] : 'node';

  $items = field_get_items(
    $entity_type,
    $entity,
    $field
  );

  // If the field requested does not return any items, don't try to get a value.
  if (!empty($items)) {

    $value = field_view_value(
      $entity_type,
      $entity,
      $field,
      $items[$delta],
      $display
    );

    $content = render($value);

    // Ensure any content rendered via this function converts links.
    // The function expects HTML to process, so do it as the final step
    // before return.
    $content = wildfire_convert_relative_links($content);

    return $content;

  }
  else {
    // If we couldn't get the field data, return an empty string.
    return '';
  }

}
