<?php

/**
 * @file
 * Example of reusing the user-modal.
 */

/**
 * Implements hook_menu().
 */
function user_modal_example_menu() {
  $items = array();
  $items['user-modal-example'] = array(
    'title' => 'User modal example page',
    'page callback' => 'user_modal_example_page',
    'access callback' => TRUE,
  );
  // The parameter is the operation (register/ login/ password).
  $items['user-modal-example/create-article/%'] = array(
    'title' => 'Create article via user modal',
    'page callback' => 'user_modal_example_create_article',
    'page arguments' => array(2),
    // For the example, let any user use this modal.
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_admin_paths().
 *
 * Let the overlay know this path needs to open in overlay for privileged users.
 */
function user_modal_example_admin_paths() {
  return array(
    'user-modal-example/create-article/*' => TRUE,
  );
}

/**
 * Callback function for create article that uses the user modal.
 *
 * This will open a modal that presents the anonymous user a form with title and
 * body text fields, and the user operations. Only after user has been
 * authenticated and provided the required title, will the modal close and
 * redirect user to newly create article node.
 *
 * If the user logged in, but didn't decide to complete the rest of the form,
 * and closes the overlay, the parent window will automatically refresh to make
 * sure the user sees the site as authenticated user.
 *
 * This is main entry and exit points to the modal. The results of a submitted
 * forms are checked here, and we act accordingly. For example, when a user
 * successfully submitted a "Reset password" form, we shouldn't close the
 * overlay, as the process is in fact not yet complete.
 * The callback is overlay aware, which means it will redirect properly in the
 * end of the process if outside of overlay context, or simple close the overlay
 * and refresh the parent window if in overlay context.
 *
 * @param $selected_tab
 *   The tab to select by default when the modal opens. Allowed values:
 *   - register
 *   - login
 *   - password
 */
function user_modal_example_create_article($selected_tab) {
  global $user;
  global $language;

  // Create a dummy node. We use Entity API as its helpful.
  $node = entity_create('node', array('type' => 'article', 'title' => ''));
  // For simplicity we assume the body field's language is LANGUAGE_NONE, as in
  // default, single language installations.
  $node->body[LANGUAGE_NONE][0]['value'] = '';

  $original_form_state = $form_state = array(
    // Make sure there is no redirection when a form submits. Our function will
    // take care of any redirection when needed.
    'no_redirect' => TRUE,
    // Pass the node to the form builder.
    'node' => $node,
    // Pass the selected tab along, as the user-modal form will need it.
    'selected tab' => $selected_tab,
  );

  $output = drupal_build_form('user_modal_example_create_article_form', $form_state);
  // We have nested subforms:
  // - our form
  //   - user modal
  //     - register
  //     - login
  //     - password
  // So get the user-modal $form_state and from it the user-password $form_state
  // so we can react on a user that requested a password.
  $user_modal = subform_get_state('subform-user_modal', $form_state);
  $subform_password = subform_get_state('subform-password', $user_modal);
  if (!empty($user_modal['reset password'])) {
    // Redirect user to login page.
    $selected_tab = 'login';
  }
  else {
    if (!empty($form_state['executed']) && empty($form_state['values']['title'])) {
      // If we're on overlay, and user just logged in, and closed the window
      // without posting a question, make sure the parent window reloads.
      overlay_request_page_refresh();
      overlay_trigger_refresh();
    }
    if (!empty($form_state['executed']) && !empty($form_state['values']['title'])) {

      // Save the node.
      $form_state['values'] += array('body' => '');
      $node->title = $form_state['values']['title'];
      $node->body[LANGUAGE_NONE][0]['value'] = $form_state['values']['body'];
      // We have the authenticated user.
      $node->uid = $user->uid;
      node_save($node);

      if (overlay_get_mode() == 'child') {
        // Redirect to the new node.
        overlay_close_dialog('node/' . $node->nid);
        return;
      }
      else {
        // No overlay.
        drupal_goto('node/' . $node->nid);
      }
    }

    // Get the tab selected by the user.
    $selected_tab = isset($user_modal['values']['selected_tab']) ? $user_modal['values']['selected_tab'] : $selected_tab;
  }

  if (!empty($form_state['submitted'])) {
    // Reset the $_POST values so they won't be picked up again and populated in
    // $form_state, but since user-modal is in a subform, keep the selected tab.
    $_POST = array(
      'subform-user_modal' => array('selected_tab' => $selected_tab),
    );

    // Keep the title and body.
    $node->title = $form_state['values']['title'];
    $node->body[LANGUAGE_NONE][0]['value'] = $form_state['values']['body'];
    $form_state = $original_form_state;
    $form_state['node'] = $node;
    $output = drupal_build_form('user_modal_example_create_article_form', $form_state);
  }

  return drupal_render($output);
}

/**
 * Form builder; Create article and user modal form.
 *
 * This form allows user to login and create a node in the same time. For
 * simplicity of the example, we don't embed the article's node form. Instead,
 * we add a textfield for the title and a textarea for the body. This might
 * serve in real life cases, but if not you might need to properly embed the
 * node's form.
 */
function user_modal_example_create_article_form($form, &$form_state) {
  global $user;
  // Get the dummy node. It might be populated with values the user already
  // submitted (e.g. login failed, but we want to keep the title and body values
  // they entered).
  $node = $form_state['node'];
  $form = array();

  $form['article_wrapper'] = array(
    '#weight' => -10,
  );

  $form['article_wrapper']['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Article title'),
    '#description' => t("The title of the node."),
    '#default_value' => $node->title,
    // Make this field required only when user is logged in. This will make sure
    // a user can still submit the logging form.
    '#required' => $user->uid,
  );

  $form['article_wrapper']['body'] = array(
    '#type' => 'textarea',
    '#title' => t('Article body'),
    '#description' => t('The main text of the article.'),
    '#default_value' => $node->body[LANGUAGE_NONE][0]['value'],
  );

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Post as...'),
    '#weight' => 999,
  );

  if (!$user->uid) {
    // Add the user modal, as subform (note that the user modal form itself has
    // subform in it).
    $form['user_modal'] = array(
      '#type' => 'subform',
      '#subform_id' => 'user_modal_modal_form',
      '#prefix' => '<div class="user-modal">',
      '#suffix' => '<div>',
    );

    // Hide the submit button when in "Reset password" tab, as it doesn't really
    // submit the article.
    $form['actions']['submit']['#states'] = array(
      'invisible' => array(
        ':input[name="subform-user_modal[selected_tab]"]' => array('value' => 'password'),
      ),
    );
  }

  return $form;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * User register form.
 */
function user_modal_example_form_user_register_form_alter(&$form, $form_state) {
  _user_modal_example_hide_submit($form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * User login form.
 */
function user_modal_example_form_user_login_alter(&$form, $form_state) {
  _user_modal_example_hide_submit($form, $form_state);
}

/**
 * Helper function to hide the submit button.
 *
 * @see user_modal_example_form_user_register_form_alter().
 * @see user_modal_example_form_user_login_alter().
 */
function _user_modal_example_hide_submit(&$form, $form_state) {
  $parent_state = user_modal_get_parent_state($form_state);
  if (empty($parent_state['complete form']) || $parent_state['complete form']['#form_id'] != 'user_modal_example_create_article_form') {
    return;
  }

  // We are in the correct context. Hide the submit button when viewing this
  // tab. We don't use #access = FALSE, as we need the button to submit the
  // subform.
  $form['actions']['submit']['#attributes'] = array('class' => array('element-invisible'));
}

/**
 * Page callback to display links, for demonstration purpose only.
 */
function user_modal_example_page() {
  global $user;
  $output = '';
  if ($user->uid) {
    $output .= t('<a href="@logout-url">Logout</a> to see the user modal in action.', array('@logout-url' => url('user/logout', array('query' => array('destination' => 'user-modal-example')))));
    $output .= t('In this <a href="@create-article-url">"Create article"</a> link You are authenticated user, so you will see only the creation form, without the user modal.', array('@create-article-url' => url('user-modal-example/create-article/login')));
  }
  else {
    $output .= t('<a href="@user-modal-url">Login</a> using user modal.', array('@user-modal-url' => url('user/modal/login')));
    $output .= t('<a href="@create-article-url">"Create article"</a> and login via modal..', array('@create-article-url' => url('user-modal-example/create-article/login')));
  }
  return array('markup' => array('#markup' => $output));
}