<?php

/**
 * @file
 * Show the user's register/ login/ reset password in modal window.
 */

/**
 * Return a link that can be used to invoke the user modal.
 *
 * @param $op
 *   The operation to link. Options are:
 *   - register
 *   - login
 *   - password
 * @param $text
 *   Optional; The text to show in the link. If empty default value will be
 *   shown based on the $op value.
 * @param $options
 *   Optional; Array of options that will be passed to l().
 */
function user_modal_link($op = 'register', $text = '', $options = array()) {
  global $user;
  if ($user->uid) {
    // Show link only to anonymous users.
    return;
  }

  $ops = user_modal_ops();
  if (empty($ops[$op])) {
    return;
  }

  if (!$text) {
    $text = $ops[$op];
  }

  return l($text, 'user/modal/' . $op, $options);
}

/**
 * Implements hook_menu().
 */
function user_modal_menu() {
  $items = array();
  // The parameter is the operation (register/ login/ password).
  $items['user/modal/%'] = array(
    'title' => 'User login/ register',
    'page callback' => 'user_modal_modal',
    'page arguments' => array(2),
    'access callback' => 'user_is_anonymous',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_admin_paths().
 */
function user_modal_admin_paths() {
  return array(
    'user/modal/*' => TRUE,
  );
}

/**
 * Callback function for user modal.
 *
 * @param $selected_tab
 *   The tab to select by default when the modal opens. Allowed values:
 *   - register
 *   - login
 *   - password
 */
function user_modal_modal($selected_tab) {
  if (empty($selected_tab) || !in_array($selected_tab, array('register', 'login', 'password'))) {
    // We should have a valid tab.
    return MENU_NOT_FOUND;
  }

  global $user;
  $form_state = array('selected tab' => $selected_tab);

  $output = drupal_build_form('user_modal_modal_form', $form_state);
  // Get the form state of the password form, to see if it was exeuted.
  $subform_password = subform_get_state('subform-password', $form_state);

  if (!empty($form_state['reset password'])) {
    // Redirect user to login page.
    $selected_tab = 'login';
  }
  else {
    // Form was executed, so we can finish.
    if (!empty($form_state['executed'])) {
      if (overlay_get_mode() == 'child') {
        // Allow other implementing modules to change the redirection.
        $data = array(
          'redirect' => NULL,
          'redirect_options' => array(),
          'refresh' => TRUE,
        );
        $context1 = array('form state' => $form_state);
        drupal_alter('user_modal', $data, $context1);
        // Close the window, and exit.
        overlay_close_dialog($data['redirect'], $data['redirect_options']);

        if (is_null($data['redirect']) && $data['refresh']) {
          // Refresh the parent page.
          overlay_request_page_refresh();
          overlay_trigger_refresh();
        }
        return;
      }
      else {
        // No overlay.
        drupal_redirect_form($form_state);
        // If the above redirect didn't work, default to homepage.
        drupal_goto();
      }
    }

    // Get the tab selected by the user.
    if (isset($form_state['values']['selected_tab'])) {
      $selected_tab = $form_state['values']['selected_tab'];
    }
  }

  if (!empty($form_state['submitted'])) {
    // Reset the $_POST values so they won't be picked up again and populated in
    // $form_state.
    $_POST = array();
    $form_state = array('selected tab' => $selected_tab);
    $output = drupal_build_form('user_modal_modal_form', $form_state);
  }

  return drupal_render($output);
}


/**
 * User modal form.
 */
function user_modal_modal_form($form, &$form_state) {
  global $user;

  // Make sure the user is anonymous.
  if (!$user->uid) {
    $selected_tab = user_modal_get_selected_tab($form_state);
    $ops = user_modal_ops();
    $items = array();
    foreach ($ops as $op => $name) {
      $items[$op] = array('data' => '<a href="#tab-' . $op . '">' . $name . '</a>');
    }

    $form['tabs'] = array(
      '#prefix' => '<div id="tabs">',
      '#suffix' => '</div>',
    );

    $form['tabs']['tabs_header'] = array(
      '#theme' => 'item_list',
      '#items' => $items,
    );

    module_load_include('inc', 'user', 'user.pages');
    foreach ($ops as $op => $name) {
      // Password needs a special submit handler.
      $submit = $op == 'password' ? array('subform_element_submit', 'user_modal_subform_pass_submit') : array('subform_element_submit');
      $form['tabs'][$op] = array(
        '#type' => 'subform',
        '#subform_id' => user_modal_get_form_id($op),
        // Set to FALSE the parent form will be able to submit even if the subform
        // contains errors. This is to make sure user-action is always submitted.
        '#required' => FALSE,
        '#prefix' => '<div id="tab-' . $op . '">',
        '#suffix' => '</div>',
        '#submit' => $submit,
      );
    }

    // Add a form item that will be hidden and will hold which user action is
    // selected (i.e. register or login), so we can process it as needed.
    // Setting the form item will be taken care of through Javascript.
    $form['selected_tab'] = array(
      '#type' => 'select',
      '#options' => array(
        'register' => t('Register'),
        'login' => t('Login'),
        'password' => t('Reset password'),
      ),
      '#default_value' => $selected_tab,
      // Hide this element, as it is just used to pass back to the server, the
      // tab the user selected, so we can submit the correct form.
      '#attributes' => array('class' => array('element-invisible')),
    );

    // Attach JS.
    $form['#attached'] = array(
      'library' => array(array('system', 'ui.tabs')),
      'js' => array(
        drupal_get_path('module', 'user_modal') . '/js/user_modal.js' => array('type' => 'file'),
      ),
    );

    // Pass the numeric value (i.e. its position) of the selected tab to JS.
    $form['#attached']['js'][] = array(
      'type' => 'setting',
      'data' => array('userModal' => array('selectedTab' => user_modal_selected_tab_numeric($selected_tab))),
    );

    $form['#after_build'][] = 'user_modal_subform_after_build';
  }
  return $form;
}

/**
 * After build; Set the triggering element.
 *
 * This makes sure a user can press enter, and the correct button will be
 * pressed.
 */
function user_modal_subform_after_build($element, &$form_state) {
  $selected_tab = user_modal_get_selected_tab($form_state);
  $form_state['triggering_element'] = $element['tabs'][$selected_tab];
  return $element;
}


/**
 * Submit handler; Reset password special handler.
 *
 * If form was submitted with no errors, we don't want modal to close as they
 * need to login with the new password.
 */
function user_modal_subform_pass_submit($form, &$form_state) {
  // Let others know reset password was invoked.
  $form_state['reset password'] = TRUE;
}

/**
 * Get the form according to the user operation.
 */
function user_modal_get_form_id($op) {
  switch ($op) {
    case 'register':
      return 'user_register_form';

    case 'login':
      return 'user_login';
      break;

    case 'password':
      return 'user_pass';
      break;
  }
}

/**
 * Return the user action in the ask question form.
 *
 * @return
 *   'register', 'login' or 'password'.
 */
function user_modal_get_selected_tab($form_state) {
  // Form state might not be processed yet, so we can't check
  // $form_state['values'].
  if (isset($form_state['input']['selected_tab'])) {
    return $form_state['input']['selected_tab'];
  }

  // The general contract with the selected tab is that it's value will be in
  // the parent form. So we need to make sure we have the parent's $form_state.
  $parent_state = user_modal_get_parent_state($form_state);
  if (isset($parent_state['selected tab'])) {
    return $parent_state['selected tab'];
  }
  return FALSE;
}

/**
 * Recursive helper function to get the top most parent.
 */
function user_modal_get_parent_state($form_state) {
  if (empty($form_state['subform_name'])) {
    return $form_state;
  }
  $parent_state = subform_get_parent_state($form_state);
  return user_modal_get_parent_state($parent_state);
}

/**
 * Get the numeric value from a user action.
 */
function user_modal_selected_tab_numeric($op) {
  switch ($op) {
    case 'register':
      return 0;

    case 'login':
      return 1;

    case 'password':
      return 2;
  }
}

/**
 * Map the operations with their names.
 */
function user_modal_ops() {
  return array(
    'register' => t('Register'),
    'login' => t('Login'),
    'password' => t('Reset password'),
  );
}