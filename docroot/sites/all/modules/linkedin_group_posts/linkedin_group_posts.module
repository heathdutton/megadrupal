<?php
/**
 * @file
 * Linkedin group posts module file.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 */
function linkedin_group_posts_form_linkedin_admin_alter(&$form, &$form_state, $form_id) {
  global $user;
  $oauth_token = variable_get('linkedin_oauth_token_key', '');
  $oauth_secret = variable_get('linkedin_oauth_secret_key', '');
  if (empty($oauth_token) && empty($oauth_secret)) {
    drupal_set_message(t('You have not authorized your drupal account with linkedin. Go to !url', array('!url' => l(t('Edit account.'), "user/$user->uid/edit/linkedin"))), 'warning');
  }

  $form['linkedin_group'] = array(
    '#title' => t('LinkedIn Group integration'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['linkedin_group']['group_id']['linkedin_group_id'] = array(
    '#default_value' => variable_get('linkedin_group_id', ''),
    '#title' => t('Group ID'),
    '#type' => 'textfield',
  );
  $form['linkedin_group']['oauth_token']['linkedin_oauth_token_key'] = array(
    '#default_value' => variable_get('linkedin_oauth_token_key', ''),
    '#value' => linkedin_group_posts_get_values('token_key'),
    '#description' => t('Authorize your drupal account with linkedin to obtain this value.'),
    '#title' => t('OAuth Token'),
    '#disabled' => TRUE,
    '#type' => 'textfield',
  );
  $form['linkedin_group']['oauth_secret']['linkedin_oauth_secret_key'] = array(
    '#default_value' => variable_get('linkedin_oauth_secret_key', ''),
    '#value' => linkedin_group_posts_get_values('token_secret'),
    '#description' => t('Authorize your drupal account with linkedin to obtain this value.'),
    '#title' => t('OAuth Secret'),
    '#disabled' => TRUE,
    '#type' => 'textfield',
  );
  $form['linkedin_group']['posts_count']['linkedin_posts_count'] = array(
    '#default_value' => variable_get('linkedin_posts_count', '5'),
    '#title' => t('No. of Posts'),
    '#type' => 'textfield',
    '#description' => t('Enter number of posts you wish to fetch.'),
  );
  return $form;
}

/**
 * Callback function to pre-populate oauth values.
 *
 * @param string $type
 *   Whether the token type is 'token' or 'secret'
 *
 * @return string
 *   Token type.
 */
function linkedin_group_posts_get_values($type) {
  $result = db_select('linkedin_token', 't')
          ->fields('t', array($type))
          ->condition('uid', 1, '=')
          ->execute()
          ->fetchAssoc();
  return $result[$type];
}

/**
 * Implements hook_theme().
 */
function linkedin_group_posts_theme($existing, $type, $theme, $path) {
  return array(
    'linkedin_group_posts' => array(
      'template' => 'linkedin-group-posts',
      'variables' => array(
        'response' => NULL,
        'group_id' => NULL,
        'image_path' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function linkedin_group_posts_block_info() {
  $blocks['linkedin_group_latest_posts'] = array(
    'info' => t('LinkedIn Group Latest Discussions'),
  );
  $blocks['linkedin_group_popular_posts'] = array(
    'info' => t('LinkedIn Group Popular Discussions'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function linkedin_group_posts_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'linkedin_group_latest_posts':
      $block['subject'] = t('Latest Discussions');
      $block['content'] = linkedin_group_posts_get_group_data('recency');
      break;

    case 'linkedin_group_popular_posts':
      $block['subject'] = t('Most Popular Discussions');
      $block['content'] = linkedin_group_posts_get_group_data('popularity');
      break;

  }
  return $block;
}

/**
 * Callback function to generate block content.
 *
 * @param string $order_type
 *   Whether the post type is 'Latest' or 'Popular'
 *
 * @return string
 *   Renderable LinkedIn posts.
 */
function linkedin_group_posts_get_group_data($order_type) {
  $output = '';
  // Add css file to theme blocks.
  drupal_add_css(drupal_get_path('module', 'linkedin_group_posts') . '/linkedin_group_posts.css');
  // Create an image path to be used if no image available.
  $image_path = drupal_get_path('module', 'linkedin_group_posts') . '/images/linkedin_icon_no_photo.png';
  // Fetch the required variables.
  $oauth_token = variable_get('linkedin_oauth_token_key', '');
  $oauth_secret = variable_get('linkedin_oauth_secret_key', '');
  $group_id = variable_get('linkedin_group_id', '');
  $count = variable_get('linkedin_posts_count', '5');
  // Create linkedin group api url.
  $url = "http://api.linkedin.com/v1/groups/$group_id/posts:(id,title,summary,creator,creation-timestamp,site-group-post-url)?count=$count&start=0&category=discussion&order=$order_type";
  $tokens = array(
    'token_key' => $oauth_token,
    'token_secret' => $oauth_secret,
    'type' => 'access',
  );
  // Add necessary parameters to url.
  $signature = new OAuthSignatureMethod_HMAC_SHA1();
  $consumer_key = variable_get('linkedin_consumer_key', '');
  $consumer_secret = variable_get('linkedin_consumer_secret', '');
  $consumer = new OAuthConsumer($consumer_key, $consumer_secret, NULL);
  $token = new OAuthConsumer($tokens['token_key'], $tokens['token_secret'], 1);
  $request = OAuthRequest::from_consumer_and_token($consumer, $token, "GET", $url);
  $request->sign_request($signature, $consumer, $token);
  try {
    $header = $request->to_header("https://api.linkedin.com");
  }
  catch (Exception $e) {
    watchdog('linkedin_group_posts', check_plain($e->getMessage()), WATCHDOG_ERROR);
  }
  // Make a call to api.
  $response = _linkedin_group_posts_http_request($url, $header);
  parse_str($response);
  // Interprets a string of XML response into an object.
  $response = simplexml_load_string($response);
  if (isset($response->{'error-code'})) {
    $response_message = array(
      '@status' => $response->status,
      '@message' => $response->message,
    );
    if (variable_get('linkedin_debug_mode', 0) == 1) {
      drupal_set_message(t('Linkedin debug : LinkedIn.com answered "@status : @message', $response_message), 'warning');
    }
    watchdog('linkedin_group_posts', 'Linkedin debug : LinkedIn.com answered "@status : @message', $response_message, WATCHDOG_ERROR);
  }
  $group_posts = array(
    'response' => $response,
    'group_id' => $group_id,
    'image_path' => $image_path,
  );
  $output = theme('linkedin_group_posts', $group_posts);
  return $output;
}

/**
 * Some internal helper functions...
 */
function _linkedin_group_posts_http_request($url, $header, $body = NULL) {

  $ch = curl_init();
  $curl_error_msg = '';
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
  curl_setopt($ch, CURLOPT_HTTPHEADER, array($header));
  curl_setopt($ch, CURLOPT_URL, $url);

  if ($body) {
    curl_setopt($ch, CURLOPT_POST, 1);
    if ($body == 'token_request') {
      curl_setopt($ch, CURLOPT_POSTFIELDS, '');
    }
    else {
      curl_setopt($ch, CURLOPT_POSTFIELDS, $body);
      curl_setopt($ch, CURLOPT_HTTPHEADER, array($header, 'Content-Type: text/xml;charset=utf-8'));
      curl_setopt($ch, CURLOPT_POST, 1);
      curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
    }
  }

  $output = curl_exec($ch);
  if (empty($output)) {
    // Some kind of an error happened.
    $curl_error_msg = filter_xss(curl_error($ch));
    watchdog('linkedin_group_posts', $curl_error_msg, WATCHDOG_ERROR);
    curl_close($ch);
  }
  else {
    $info = curl_getinfo($ch);
    curl_close($ch);
    if (empty($info['http_code'])) {
      watchdog('linkedin_group_posts', "No HTTP code was returned", array(), WATCHDOG_ERROR);
    }
    else {
      return $output;
    }
  }
}
