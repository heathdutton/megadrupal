<?php

/**
 * @file
 * Simplify Commerce module file.
 *
 * Provides an Simplify Commerce payment method for Drupal Commerce for testing
 *   and development.
 */

/**
 * Implements hook_libraries_info().
 */
function simplify_commerce_libraries_info() {
  $libraries = array();

  $libraries['simplify_commerce'] = array(
    'name' => 'Simplify Commerce SDK for PHP',
    'vendor url' => 'https://www.simplify.com/commerce/',
    'download url' => 'https://www.simplify.com/commerce/docs/sdk/php',
    'version arguments' => array(
      'file' => 'CHANGES.txt',
      'pattern' => '/version\s*([.0-9]+)/',
    ),
    'files' => array(
      'php' => array(
        'lib/Simplify.php',
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function simplify_commerce_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['simplify_commerce'] = array(
    'base' => 'simplify_commerce',
    'title' => t('Simplify Commerce'),
    'short_title' => t('Simplify Commerce'),
    'display_title' => t('Simplify Commerce by MasterCard'),
    'description' => t('Simplify Commerce by MasterCard'),
    'offsite' => FALSE,
  );

  return $payment_methods;
}

/**
 * Payment method callback: settings form.
 */
function simplify_commerce_settings_form($settings) {
  $form = array();
  $form['public_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Public Key'),
    '#description' => t('Public Key.'),
    '#default_value' => !empty($settings['public_key']) ? $settings['public_key'] : '',
    '#required' => TRUE,
  );
  $form['private_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Private Key'),
    '#description' => t('Private Key'),
    '#default_value' => !empty($settings['private_key']) ? $settings['private_key'] : '',
    '#required' => TRUE,
  );
  return $form;
}

/**
 * Form used to collect Simplify commerce data.
 *
 * @param array $payment_method
 *   The payment method instance object used to charge this payment.
 * @param array $pane_values
 *   The pane values.
 * @param array $checkout_pane
 *   The checkout pane.
 *   The order object the payment applies to.
 */
function simplify_commerce_submit_form(array $payment_method, array $pane_values, array $checkout_pane, $order) {

  $settings = $payment_method['settings'];

  if (user_access('administer payment methods') && (empty($settings['public_key']) || empty($settings['private_key']))) {
    drupal_set_message(t('The Simplify Commerce Public & Private API keys need to be set in order to process payments. See README.md for instructions.'), 'warning');
  }

  // Load the commerce module credit card form to utilize it's form fields.
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

  // List of credit card input fields needed by Simplify.
  $credit_card_fields = array(
    'number' => '',
    'exp_month' => '',
    'exp_year' => '',
    'code' => '',
  );

  $form = commerce_payment_credit_card_form($credit_card_fields);
  // Not all fields are required.
  foreach (array_keys($credit_card_fields) as $key) {
    $credit_card_field = &$form['credit_card'][$key];
    $credit_card_field['#required'] = FALSE;
  }

  return $form;
}

/**
 * Handles the form submit.
 *
 * @param array $payment_method
 *   The payment method instance object used to charge this payment.
 * @param array $pane_form
 *   The pane form.
 * @param array $pane_values
 *   The pane values.
 *   The order object the payment applies to.
 * @param array $charge
 *   An array indicating the amount and currency code to charge.
 *
 * @return bool
 *   Returns TRUE on success and FALSE on failure of transaction.
 */
function simplify_commerce_submit_form_submit(array $payment_method, array $pane_form, array $pane_values, $order, array $charge) {
  $order->data['simplify_commerce'] = $pane_values;
  return simplify_commerce_transaction($payment_method, $order, $charge, $pane_values);
}

/**
 * Creates a intuit payment transaction. Post data to intuit.
 *
 * @param array $payment_method
 *   The payment method instance object used to charge this payment.
 *   The order object the payment applies to.
 * @param array $charge
 *   An array indicating the amount and currency code to charge.
 * @param array $values
 *   The vlaues submited by user.
 *
 * @return bool
 *   Returns TRUE on success and FALSE on failure of transaction.
 */
function simplify_commerce_transaction(array $payment_method, $order, array $charge, array $values) {
  // Simplify PHP Library is loaded, so let's go.
  if (($library = libraries_load('simplify_commerce')) && !empty($library['loaded'])) {
    Simplify::$publicKey = $payment_method['settings']['public_key'];
    Simplify::$privateKey = $payment_method['settings']['private_key'];

    try {
      $card_token = Simplify_CardToken::createCardToken(array(
        'card' => array(
          'expMonth' => $values['credit_card']['exp_month'],
          'expYear' => substr($values['credit_card']['exp_year'], -2),
          'cvc' => $values['credit_card']['code'],
          'number' => $values['credit_card']['number'],
        ),
      ));
    }
    catch (Simplify_ApiException $e) {
      drupal_set_message(check_plain($e->getMessage()), 'error');
      watchdog('simplify_commerce', 'The following errors were found processing the cart token: @token_error.', array('@token_error' => $e->getMessage()), WATCHDOG_NOTICE);
      return FALSE;
    }

    $transaction = commerce_payment_transaction_new('simplify_commerce', $order->order_id);
    $transaction->amount = $charge['amount'];
    $transaction->currency_code = 'USD';

    try {
      $payment = Simplify_Payment::createPayment(array(
        // Cart total amount.
        'amount' => $charge['amount'],
        // Token returned by Simplify_CardToken.
        'token' => $card_token->id,
        'description' => t('Drupal Order Number: @order_number', array('@order_number' => $order->order_number)),
        'currency' => 'USD',
      ));
      watchdog('simplify_commerce', 'Simplify payment response:<pre> @param </pre>', array('@param' => print_r($payment, TRUE)));
      $payment_status = $payment->paymentStatus;

      // Display an error as the payment was not approved.
      if ($payment_status != 'APPROVED') {
        drupal_set_message(check_plain("The following errors were found processing the payment. Payment Status: " . $payment_status), 'error');
        watchdog('simplify_commerce', 'The following errors were found processing the payment: @payment_error.', array('@payment_error' => $payment_status), WATCHDOG_NOTICE);

        // Save failure transaction.
        $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
        $transaction->message = t('Error processing payment: @payment_error', array('@payment_error' => $payment_status));
        commerce_payment_transaction_save($transaction);

        return FALSE;
      }

      // Save success transaction.
      $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
      $transaction->message = t('@success', array('@success' => $payment_status));
      // Set the RemoteID.
      $transaction->remote_id = $payment->id;
      commerce_payment_transaction_save($transaction);
    }
    catch (Simplify_ApiException $e) {
      drupal_set_message(check_plain($e->getMessage()), 'error');
      watchdog('simplify_commerce', 'The following errors were found processing the payment: @payment_error.', array('@payment_error' => $e->getMessage()), WATCHDOG_NOTICE);

      // Save failure transaction.
      $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
      $transaction->message = t('Error processing payment: @payment_error', array('@payment_error' => $e->getMessage()));
      commerce_payment_transaction_save($transaction);

      return FALSE;
    }
  }
  else {
    watchdog('simplify_commerce', 'Failure to load Simplify Commerce PHP SDK.', array(), WATCHDOG_CRITICAL);
    drupal_set_message(t('There were errors processing the payment. Please contact the site administrator.'), 'error');
    return FALSE;
  }
}
