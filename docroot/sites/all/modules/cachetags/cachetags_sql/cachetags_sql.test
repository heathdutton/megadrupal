<?php

/**
 * Test cache tag clearing.
 */
class CacheTagsClearCase extends CacheTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Cache Tags test',
      'description' => 'Verify that cache can be expired via cache tags.',
      'group' => 'Cache'
    );
  }

  function setUp() {
    parent::setUp(array('cachetags_sql'));
  }

  /**
   * Test clearing using cache tags.
   */
  function testClearTags() {
    cache_set('test_cid_clear1', $this->default_value, $this->default_bin, CACHE_PERMANENT, array('test_tag' => array(1)));
    cache_set('test_cid_clear2', $this->default_value, $this->default_bin, CACHE_PERMANENT, array('test_tag' => array(1)));
    $this->assertTrue($this->checkCacheExists('test_cid_clear1', $this->default_value)
                      && $this->checkCacheExists('test_cid_clear2', $this->default_value),
                      t('Two cache items were created.'));
    
    cache_expire_tagged(array('test_tag' => array(1)));
    $this->assertFalse($this->checkCacheExists('test_cid_clear1', $this->default_value)
                      || $this->checkCacheExists('test_cid_clear2', $this->default_value),
                      t('Two caches removed after clearing a cache tag.'));

    cache_set('test_cid_clear1', $this->default_value, $this->default_bin, CACHE_PERMANENT, array('test_tag' => array(1)));
    cache_set('test_cid_clear2', $this->default_value, $this->default_bin, CACHE_PERMANENT, array('test_tag' => array(2)));
    cache_set('test_cid_clear3', $this->default_value, $this->default_bin, CACHE_PERMANENT, array('test_tag_foo' => array(3)));
    $this->assertTrue($this->checkCacheExists('test_cid_clear1', $this->default_value)
                      && $this->checkCacheExists('test_cid_clear2', $this->default_value)
                      && $this->checkCacheExists('test_cid_clear3', $this->default_value),
                      t('Two cached items were created.'));
    cache_expire_tagged(array('test_tag_foo' => array(3)));
    $this->assertTrue($this->checkCacheExists('test_cid_clear1', $this->default_value)
                      && $this->checkCacheExists('test_cid_clear2', $this->default_value),
                      t('Cached items not matching the tag were not cleared.'));

    $this->assertFalse($this->checkCacheExists('test_cid_clear3', $this->default_value),
                      t('Cached item matching the tag was removed.'));

    // For our next trick, we will attempt to clear data in multiple bins.
    $tags = array('test_tag' => array(1, 2, 3));
    $bins = array('cache', 'cache_page', 'cache_bootstrap');
    foreach ($bins as $bin) {
      cache_set('test', $this->default_value, $bin, CACHE_PERMANENT, $tags);
      $this->assertTrue($this->checkCacheExists('test', $this->default_value, $bin), t('Cache item was set in %bin.', array('%bin' => $bin)));
    }
    cache_expire_tagged(array('test_tag' => array(2)));
    foreach ($bins as $bin) {
      $this->assertFalse($this->checkCacheExists('test', $this->default_value, $bin), t('Tag expire affected item in %bin.', array('%bin' => $bin)));
    }
    $this->assertFalse($this->checkCacheExists('test_cid_clear2', $this->default_value), t('Cached items matching tag were cleared.'));
    $this->assertTrue($this->checkCacheExists('test_cid_clear1', $this->default_value), t('Cached items not matching tag were not cleared.'));
  }
}
