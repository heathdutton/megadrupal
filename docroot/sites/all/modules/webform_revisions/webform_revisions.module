<?php
// $Id$

/**
 * Implementation of hook_menu
 *
 */
function webform_revisions_menu() {
  $items = array();
  
  $items["node/%/submission/%/revisions"] = array(
    "title" => "Revisions",
    "access arguments" => array("view webform revisions"),
    "page callback" => "webform_revisions_display_revisions",
    "page arguments" => array(1, 3),
    "type" => MENU_LOCAL_TASK,
    "weight" => 4,
  );
   
  $items["node/%/submission/%/revisions/%"] = array(
    "title" => "Revisions",
    "access arguments" => array("view webform revisions"),
    "page callback" => "webform_revisions_display_revision",
    "page arguments" => array(1, 3, 5),
    "type" => MENU_CALLBACK,
    "weight" => 4,
  );

  $items["node/%/submission/%/revisions/%/delete"] = array(
    "title" => "Delete revision?",
    "access arguments" => array("delete webform revisions"),
    "page callback" => "drupal_get_form",
    "page arguments" => array("webform_revisions_confirm_delete_revision", 1, 3, 5),
    "type" => MENU_CALLBACK,
  );

  $items["node/%/submission/%/revisions/%/revert"] = array(
    "title" => "Revert revision?",
    "access arguments" => array("revert webform revisions"),
    "page callback" => "drupal_get_form",
    "page arguments" => array("webform_revisions_confirm_revert_revision", 1, 3, 5),
    "type" => MENU_CALLBACK,
  );

  $items["admin/config/webform-revisions"] = array(
    "title" => "Webform Revisions settings",
    "description" => "Configure how Webform Revisions works with your forms.",
    "page callback" => "drupal_get_form",
    "page arguments" => array("webform_revisions_admin_form"),
    "access arguments" => array("administer webform revisions"),
    "type" => MENU_NORMAL_ITEM,
  );
  
  
  return $items;
}


function webform_revisions_permission() {
  return array(
    "delete webform revisions" => array(
      "title" => t("Delete Webform Revisions"),
      "description" => t("Allow users to delete specific revisions."),
    ), 
    "revert webform revisions" => array(
      "title" => t("Revert Webform Revisions"),
      "description" => t("Allow users to revert older revisions to the current version."),      
    ),     
    "view webform revisions" => array(
      "title" => t("View Webform Revisions"),
      "descriptions" => t("Allow users to view older revisions of a submission."),
    ),
    "administer webform revisions" => array(
      "title" => t("Administer Webform Revisions"),
      "description" => t("Configure the settings for the Webform Revisions module."),
    ),
  );
}


/**
 * This is the form at admin/settings/webform-revisions
 * which will let the user configure this module.
 *
 */
function webform_revisions_admin_form() {
  
  $form = array();
  
  // We want to create settings fields for every webform in the system.
  // First, get a list of all available webforms by querying the database.
  $res = db_query("SELECT * FROM {node} WHERE type = 'webform'
                   ORDER BY title");
  foreach($res as $cur) {
    
    $fs_id = "fs_" . $cur->nid;
    $form[$fs_id] = array(
      "#type" => "fieldset",
      "#collapsible" => TRUE,
      "#title" => t("Settings for ") . $cur->title,
    );
      
    $form[$fs_id]["webform_revisions_setting_email_" . $cur->nid] = array(
      "#type" => "checkbox",
      "#title" => t("Resend email(s), if enabled, when a new revision is saved?"),
      "#default_value" => variable_get("webform_revisions_setting_email_" . $cur->nid, 0),
    );
    
  }
    
  return system_settings_form($form);
  
}


/**
 * The validate function which is called after the admin form is submitted.
 *
 * @param unknown_type $form
 * @param unknown_type $form_state
 */
function webform_revisions_admin_form_validate($form, $form_state) {
  
  // This may seem a little odd, but I want to delete any variable
  // in the variable table which has to do with saving these settings.
  // This way, we will clear out any old settings for webform nodes which
  // might have since been deleted.
  //db_query("DELETE FROM {variable} WHERE name LIKE 'webform_revisions_setting_%%' ");
  $res = db_delete("variable")
    ->condition("name", "webform_revisions_setting%", "LIKE")
    ->execute();
  
}


/**
 * Present a confirm form for the user before we revert to this revision.
 *
 */
function webform_revisions_confirm_revert_revision($form_state, $form_state2, $nid, $sid, $wvid) {
  $form = array();
  
  $form["sid"] = array(
    "#type" => "value",
    "#value" => $sid,
  );

  $form["nid"] = array(
    "#type" => "value",
    "#value" => $nid,
  );

  
  $form["wvid"] = array(
    "#type" => "value",
    "#value" => $wvid,
  );
  
  $cancel_path = "node/$nid/submission/$sid/revisions";
  
  
  $submitted = $_REQUEST["submitted"];
  
  return confirm_form($form, 
    	t('Are you sure you want to revert to this revision from ' . format_date($submitted) . '?'),
    	isset($_GET['destination']) ? $_GET['destination'] : $cancel_path,
    	t('This action will set this revision as the current version, and mark the current version as a new revision.'),
    	t('Revert'),
    	t('Cancel')); 
}

/**
 * Our submit handler from the confirm form.  If we got here, we should revert this revision to the current.
 *
 */
function webform_revisions_confirm_revert_revision_submit($form, $form_state) {
  $sid = $form_state["values"]["sid"];
  $nid = $form_state["values"]["nid"];
  $wvid = $form_state["values"]["wvid"];
  
  // Copy data from our selected revision (wvid) to the current version.
  $cur = db_query("SELECT * FROM {webform_revisions_submissions} 
                   WHERE sid = ? AND wvid = ?", array($sid, $wvid))->fetchObject();
  

  $nid = $cur->nid;
  $uid = $cur->uid;
  $submitted = $cur->submitted;
  $remote_addr = $cur->remote_addr;
  $comment = trim($cur->comment);

  
  webform_revisions_copy_existing_to_revisions($sid, t("Copy from revert operation."));  
  
  // Delete what's in webform_submissions and submitted data for this sid, so we can
  // populate it with our revision's data.
  //db_query("DELETE FROM {webform_submissions} WHERE sid = %d AND nid = %d", $sid, $nid);
  
  $res = db_delete("webform_submissions")
    ->condition("nid", $nid, "=")
    ->condition("sid", $sid, "=")
    ->execute();

  
  //db_query("DELETE FROM {webform_submitted_data} WHERE sid = %d AND nid = %d", $sid, $nid);
  $res = db_delete("webform_submitted_data")
    ->condition("nid", $nid, "=")
    ->condition("sid", $sid, "=")
    ->execute();
  
  
  // Now, add our submission and submission_data values...  
  /*db_query("INSERT INTO {webform_submissions} (sid, nid, uid, submitted, remote_addr)
              VALUES (%d, %d, %d, %d, '%s') ", $sid, $nid, $uid, $submitted, $remote_addr);*/
  $res = db_insert("webform_submissions")
    ->fields(array(
      "sid" => $sid,
      "nid" => $nid,
      "uid" => $uid,
      "submitted" => $submitted,
      "remote_addr" => $remote_addr,
    ))
    ->execute();
  
  // Update the comment.
  //db_query("UPDATE {webform_revisions} SET comment = '%s' WHERE sid = %d", $comment, $sid);
  $res = db_update("webform_revisions")
    ->fields(array("comment" => $comment))
    ->condition("sid", $sid, "=")
    ->execute();
  
  
  // Go through the webform_revisions_submitted_data table for this sid, and copy the information
  // there to the webform table.
  $res = db_query("SELECT * FROM {webform_revisions_submitted_data} 
                   WHERE sid = ? AND wvid = ?", array($sid, $wvid));
  foreach ($res as $cur) {
    $nid = $cur->nid;
    $cid = $cur->cid;
    $no = $cur->no;
    $data = $cur->data;
    
/*    db_query("INSERT INTO {webform_submitted_data}
              (nid, sid, cid, no, data)
              VALUES (%d, %d, %d, %d, '%s')
              ", $nid, $sid, $cid, $no, $data);
*/
    $res2 = db_insert("webform_submitted_data")
      ->fields(array(
        "nid" => $nid,
        "sid" => $sid,
        "cid" => $cid,
        "no" => $no,
        "data" => $data,
      ))    
      ->execute();
    
  }
  
  drupal_set_message(t("Revision sucessfully reverted."));
  drupal_goto("node/$nid/submission/$sid/revisions");
}




/**
 * Present a confirm form for the user before we delete this revision.
 *
 */
function webform_revisions_confirm_delete_revision($form_state, $form_state2, $nid, $sid, $wvid) {
  $form = array();
  
  $form["sid"] = array(
    "#type" => "value",
    "#value" => $sid,
  );
  
  $form["nid"] = array(
    "#type" => "value",
    "#value" => $nid,
  );
  
  
  $form["wvid"] = array(
    "#type" => "value",
    "#value" => $wvid,
  );
  
  $cancel_path = "node/$nid/submission/$sid/revisions";
  
  
  $submitted = $_REQUEST["submitted"];
  
  return confirm_form($form, 
    	t('Are you sure you want to delete this revision from ' . format_date($submitted) . '?'),
    	isset($_GET['destination']) ? $_GET['destination'] : $cancel_path,
    	t('This action cannot be undone.'),
    	t('Delete'),
    	t('Cancel')); 
}



/**
 * Our submit handler from the confirm form.  If we got here, we should delete this revision.
 *
 */
function webform_revisions_confirm_delete_revision_submit($form, $form_state) {

  $sid = $form_state["values"]["sid"];
  $nid = $form_state["values"]["nid"];
  $wvid = $form_state["values"]["wvid"];
  
/*  db_query("DELETE FROM {webform_revisions_submitted_data}
            WHERE wvid = %d
            AND sid = %d", $wvid, $sid);
*/  
  $res = db_delete("webform_revisions_submitted_data")
    ->condition("wvid", $wvid, "=")
    ->condition("sid", $sid, "=")
    ->execute();
  
/*  db_query("DELETE FROM {webform_revisions_submissions}
            WHERE wvid = %d
            AND sid = %d", $wvid, $sid);
*/
  $res = db_delete("webform_revisions_submissions")
    ->condition("wvid", $wvid, "=")
    ->condition("sid", $sid, "=")
    ->execute();


  drupal_set_message(t("Revision deleted."));
  drupal_goto("node/$nid/submission/$sid/revisions");
}



/**
 * This function will display a summary of the revision data for this particular revision.
 * We will use webform's method of displaying a submission to do this.
 *
 * @param int $sid
 * @param int $wvid
 */
function webform_revisions_display_revision($nid, $sid, $wvid) {
  $rtn = "";

  $rtn .= l("<- " . t("Return to Revisions"), "node/$nid/submission/$sid/revisions");
  
    
  $submission = new stdClass();
  // Load this revision information into the $submission object.
  $cur = db_query("SELECT * FROM {webform_revisions_submissions} WHERE sid = ? AND wvid = ? ", array($sid, $wvid))->fetchObject();
  
  $submission->submitted = $cur->submitted;
  $submission->uid = $cur->uid;  
  $submission->remote_addr = $cur->remote_addr;
  $submission->nid = $cur->nid;
  $submission->sid = $sid;
  
  // Now, get the data.
  $submission->data = array();  
  $res = db_query("SELECT * FROM {webform_revisions_submitted_data}
                   WHERE sid = ?
                   AND wvid = ?", array($sid, $wvid));
  foreach ($res as $cur) {
    $submission->data[$cur->cid]["value"][$cur->no] = $cur->data;
  }
    
  $node = node_load($nid);
  $enabled = false;
  
  
  $rtn .= "<h2>" . t("Revision from") . " " . format_date($submission->submitted) . "</h2>";
  
    
  // In Webform 3.x, submission informatin is handled differently.  In fact,
  // it has its own function for rendering it, but first we must load
  // an include file.
  module_load_include('inc', 'webform', 'includes/webform.submissions');
  $page = webform_submission_page($node, $submission, "html");
  $rtn .= theme("webform_submission_page", $page);
  
  drupal_set_title(t("Revisions for Submission") . " #$sid");
  
  
  return $rtn; 
}


/**
 * Displays a list of revisions on the screen, modeled to look like
 * Drupal's node revision screen.
 *
 * @param int $nid
 * @param int $sid
 */
function webform_revisions_display_revisions($nid, $sid) {
  $rtn = "";
  
  drupal_set_title(t("Revisions for Submission") . " #$sid");
  drupal_add_css(drupal_get_path("module", "webform_revisions") . "/css/webform_revisions.css");
  
  $header = array(
    t("Revision"),
    t("Operations"),
    "",
  );
  
  $rows = array();
  
  // Get current revision information (what is currently in the webform_submission table)
  $cur = db_query("SELECT * FROM {webform_submissions} WHERE sid = ?", array($sid))->fetchObject();
  $submitted = $cur->submitted;
  $uid = $cur->uid;
  $new_user = user_load($uid);
  
  // Get current revision comment, if any.
  $cur = db_query("SELECT * FROM {webform_revisions} WHERE sid = ?", array($sid))->fetchObject();

  $comment = "";
  if (is_object($cur)) {  
    $comment = $cur->comment;
    if ($comment != "") {
      $comment = "<div class='webform-revisions-comment'>" . check_plain($comment) . "</div>";
    }  
  }
  
  // Add in the current revision first.
  $rows[] = array(
    "data" => array(
      l(format_date($submitted), "node/$nid/submission/$sid") . " by " . l($new_user->name, "user/$uid") . $comment,
      "<em>" . t("current revision") . "</em>",
      "",
    ),
    "id" => "webform-revisions-current", 
  );
  

  
  $res = db_query("SELECT * FROM {webform_revisions_submissions}
                    WHERE sid = ?
                    ORDER BY wvid DESC", array($sid));
  foreach ($res as $cur) {    
    
    $submitted = $cur->submitted;
    $nid = $cur->nid;
    $uid = $cur->uid;
    $wvid = $cur->wvid;
    $comment = $cur->comment;
    if ($comment != "") {
      $comment = "<div class='webform-revisions-comment'>" . check_plain($comment) . "</div>";
    }
    
    $new_user = user_load($uid);

    $revert_link = $delete_link = "";
    
    if (user_access("revert webform revisions")) {            
      $revert_link = l(t("revert"), "node/$nid/submission/$sid/revisions/$wvid/revert", array("query"=>array("submitted"=>$submitted)));
    }

    if (user_access("delete webform revisions")) {
      $delete_link = l(t("delete"), "node/$nid/submission/$sid/revisions/$wvid/delete", array("query"=>array("submitted"=>$submitted)));
    }
    
    $rows[] = array(
      l(format_date($submitted), "node/$nid/submission/$sid/revisions/$wvid") . " by " . l($new_user->name, "user/$uid") . $comment,
      $revert_link,
      $delete_link,
    );
    
  }
  
  $rtn .= theme("table", array("header" => $header, "rows" => $rows));
    
  return $rtn;
}


/**
 * Our hook_form_alter.  In here, we will add our custom
 * submit handler BEFORE webform's.
 *
 */
function webform_revisions_form_alter(&$form, &$form_state, $form_id) {
  
  if (strstr($form_id, "webform_client_form_")) {
    // This is a webform.  Add our custom submit handler to the beginning
    // of the #submit array.
  
    if (is_array($form["#submit"])) {
      $form["#submit"] = array_merge(array("webform_revisions_webform_client_form_submit"), $form["#submit"]);
    }

    
    $sid = $form["details"]["sid"]["#value"];
    // We also might want to add our "log message" box to the bottom,
    // in its own fieldset.  Only do this is the user has turned this
    // on in admin/settings/webform-revisions
    
    if ($sid != "" && variable_get("webform_revisions_display_fs", 1)) {
      // We only want this on the LAST page of a multi-page form.
      
      if (!is_array($form["details"]["page_num"]) || 
          $form["details"]["page_num"]["#value"] == $form["details"]["page_count"]["#value"]) {
    
              
        $form["wfr_submitted"]["webform_revisions_fs"] = array(
          "#type" => "fieldset",
          "#collapsible" => TRUE,
          "#title" => t("Webform revision information"),
          "#weight" => 5000,
        );    
        
        $form["wfr_submitted"]["webform_revisions_fs"]["webform_revisions_create_revision"] = array(
          "#type" => "checkbox",
          "#title" => t("Create new revision"),
          "#default_value" => 1,
        );
        
        $form["wfr_submitted"]["webform_revisions_fs"]["webform_revisions_log_message"] = array(
          "#type" => "textarea",
          "#title" => t("Log message"),
          "#rows" => 2,      
          "#description" => t("An explanation of the additions or updates being made to help other authors understand your motivations."),
        );
        
            
      }
    }
    
     
  }
}


/**
 * This function will copy what is in the existing webform
 * table to our revisions table.
 *
 */
function webform_revisions_copy_existing_to_revisions($sid, $comment = "", $bool_append_last_comment = TRUE) {
  
  // Figure out what version id (wvid) we are going to use for this revision,
  // as well as what the last comment was for the most recent revision.
  $cur = db_query("SELECT * FROM {webform_revisions} WHERE sid = ?", array($sid))->fetchObject();
  $wvid = $last_comment = "";
  if (is_object($cur)) {
    // We had a database result.
    $wvid = $cur->wvid;
    $last_comment = $cur->comment;    
  }
    
  if ($wvid == "" || $wvid < 1) {
    $wvid = 0;
  }
  
  $wvid++; // move us to the next revision number.
  
  if ($comment == "") $comment = $last_comment;

  if ($bool_append_last_comment && $comment != "" && $last_comment != "" && $comment != $last_comment) {
    $comment .= " " . t("Original comment") . ": " . $last_comment;
  }
  
  // Copy data from webform_submissions into our revisions table.
  $cur = db_query("SELECT * FROM {webform_submissions} WHERE sid = ?", array($sid))->fetchObject();

  $nid = $cur->nid;
  $uid = $cur->uid;
  $submitted = $cur->submitted;
  $remote_addr = $cur->remote_addr;
    
  /*db_query("INSERT INTO {webform_revisions_submissions} (wvid, sid, nid, uid, submitted, remote_addr, comment)
              VALUES (%d, %d, %d, %d, %d, '%s', '%s') ", $wvid, $sid, $nid, $uid, $submitted, $remote_addr, $comment);
  */
  
  $res = db_insert("webform_revisions_submissions")
  ->fields(array(
    "wvid" => $wvid, 
    "sid" => $sid, 
    "nid" => $nid, 
    "uid" => $uid, 
    "submitted" => $submitted, 
    "remote_addr" => $remote_addr, 
    "comment" => $comment,
  ))
  ->execute();
  
  
  // Go through the webform_submitted_data table for this sid, and copy the information
  // there to our revisions table.
  $res = db_query("SELECT * FROM {webform_submitted_data} WHERE sid = ?", array($sid));
  foreach ($res as $cur) {
    $nid = $cur->nid;
    $cid = $cur->cid;
    $no = $cur->no;
    $data = $cur->data;


    
    $res = db_insert("webform_revisions_submitted_data")
      ->fields(array(
        "wvid" => $wvid, 
        "sid" => $sid, 
        "nid" => $nid, 
        "cid" => $cid, 
        "no" => $no, 
        "data" => $data,         
      ))
      ->execute();    
    
  }
  
  // Update the next version id for next time.
  //db_query("UPDATE {webform_revisions} SET wvid = %d WHERE sid = %d", $wvid, $sid);
  $num_updated = db_update("webform_revisions")
    ->fields(array("wvid" => $wvid))
    ->condition("sid", $sid, "=")
    ->execute();
                  
  if ($num_updated == 0) {
/*    db_query("INSERT INTO {webform_revisions} (sid, wvid)
              VALUES (%d, %d) ", $sid, $wvid);
*/
    $res = db_insert("webform_revisions")
      ->fields(array("sid" => $sid, "wvid" => $wvid, "comment" => ""))
      ->execute();
  }
  
}


/**
 * This is a webform hook, so we know when a submission is being deleted,
 * we can also clear out our own tables.
 *
 * @param unknown_type $node
 * @param unknown_type $submission
 */
function webform_revisions_webform_submission_delete($node, $submission) {
  // Delete a record from a 3rd-party module table when a submission is deleted.
  db_delete('webform_revisions')
    ->condition('sid', $submission->sid)
    ->execute();
    
  db_delete('webform_revisions_submissions')
    ->condition('nid', $node->nid)
    ->condition('sid', $submission->sid)
    ->execute();
    
  db_delete('webform_revisions_submitted_data')
    ->condition('nid', $node->nid)
    ->condition('sid', $submission->sid)
    ->execute();
    
}


/**
 * This submit handler is called when any webform client form is submitted.
 * We will use it to save the existing data to our revisions table, before it
 * gets overwritten.
 *
 */
function webform_revisions_webform_client_form_submit($form, $form_state) {
  
  $sid = $form_state["values"]["details"]["sid"];
  $nid = $form_state["values"]["details"]["nid"];
  
  if ($sid == 0 || $sid == "") {
    // This is not a revision, it is a first submission, so we do not
    // need to do anything yet.  We only care about subsequent submissions.
    return;
  }
  
  // Did the user select that they wanted to add a new revision?  We only
  // care about this if the "display_fs" variable has been set
  // in admin/settings/webform-revisions.

  $comment = "";
  if (variable_get("webform_revisions_display_fs", 1)) {  
    // Yes, it was shown to the user.  If they did NOT check the
    // create_revision checkbox, then let's harmelessly return
    // (and not try to save the revision).
    if (isset($form_state["values"]["webform_revisions_create_revision"])) {
      if ($form_state["values"]["webform_revisions_create_revision"] != 1) {
        return;
      }
      else {
        // The user DOES want to save a revision, so grab the log_message, if any.
        $comment = trim($form_state["values"]["webform_revisions_log_message"]);
      }
    }
  }
  
  // We only want to copy if we are actually submitting.  Because
  // webforms can be multi-page, we need to make sure we are on the last page!
  // This is the same method the webform module uses:
  $node = node_load($nid);
  $submit_op = empty($node->webform['submit_text']) ? t('Submit') : $node->webform['submit_text'];
  if ($form_state['values']['op'] == $submit_op) {  
    // Copy the exisitng data to our revisions tables
    webform_revisions_copy_existing_to_revisions($sid);
    
    // Update the webform table to reflect the new submitted time (ie, now)
    //db_query("UPDATE {webform_submissions} SET submitted = %d WHERE sid = %d", time(), $sid);
    
    $res = db_update("webform_submissions")
      ->fields(array("submitted" => time()))
      ->condition("sid", $sid, "=")
      ->execute();
    
    
    // Add the comment to our revisions table.
    /*db_query("UPDATE {webform_revisions} SET comment = '%s'
              WHERE sid = %d ", $comment, $sid);*/
    
    $res = db_update("webform_revisions")
      ->fields(array("comment" => $comment))
      ->condition("sid", $sid, "=")
      ->execute();
    
  }
  
  
  // Should we send out our emails again with this submission?
  // Basically, if the original form had emails attached, then
  // we would want to email those same people, just as if this were
  // being submitted for the first time.
  
  // Check to see if the user wants this behavior.
  if (variable_get("webform_revisions_setting_email_$nid", 0)) {
  
    // We will "trick" the webform module into resending its
    // emails by changing the "finished" flag in form_state
    // to the number 0.  This will cause the webform module
    // to assume it still needs to send an email.
    $form_state["values"]["details"]["finished"] = 0;
  }

  
  
}

