<?php

class ProjectIssueCreationTestCase extends ProjectIssueWebTestCase {
  protected $maintain_user;
  protected $power_user;
  protected $auth_user;

  public static function getInfo() {
    return array(
      'name' => 'Project issue creation',
      'description' => 'Test creating an issue.',
      'group' => 'Project Issue',
    );
  }

  protected function setUp() {
    parent::setUp();

    $perms = array('create project content', 'create project_issue content');
    $this->maintain_user = $this->drupalCreateUser(array_merge($perms, array('edit own project_issue content')));
    $this->power_user = $this->drupalCreateUser(array_merge($perms, array('edit any project_issue content')));
    $this->auth_user = $this->drupalCreateUser($perms);
    $this->drupalLogin($this->maintain_user);
  }

  /**
   * Test the creation of project issues and the display of issue properties.
   */
  function testProjectIssueCreation() {
    $project = $this->createProject();

    // Test project issue node form fields.
    $this->drupalGet('node/add/project-issue/' . $project->field_project_machine_name[LANGUAGE_NONE][0]['value']);
    $this->assertText(t('Create Issue'));

    $issue = $this->createIssue($project);

    $this->drupalGet('node/' . $issue->nid);
    $this->assertText($issue->title, t('Title found'));
    $this->assertRaw($issue->body[LANGUAGE_NONE][0]['value'], t('Body found'));

    $metadata = array(
      'component' => $project->field_project_components[LANGUAGE_NONE][2]['value'],
      'category' => 'Task',
      'status' => 'Active',
      'priority' => 'Normal',
    );
    $issue = $this->createIssue($project, $metadata);

    $this->assertIssueMetadata(array(
      'priority' => 'Normal',
      'status' => 'Active',
      'component' => $project->field_project_components[LANGUAGE_NONE][2]['value'],
      'category' => 'Task',
      'project' => $project->title,
    ), $issue->nid);

    // Now, test editing rights for various kinds of users.
    $this->drupalLogin($this->maintain_user);
    $this->drupalGet("node/$issue->nid/edit");
    $this->assertResponse(200, t('A user with "edit own project_issue content" can access the edit tab for an issue she owns.'));

    $this->drupalLogin($this->auth_user);
    $this->drupalGet("node/$issue->nid/edit");
    $this->assertResponse(403, t('A user with no issue editing permissions is denied access to the edit tab for an issue.'));

    $this->drupalLogin($this->power_user);
    $this->drupalGet("node/$issue->nid/edit");
    $this->assertResponse(200, t('A user with "edit any project_issue content" can access the edit tab for an issue she does not own.'));

    // Create an issue owned by the power user.
    $power_issue = $this->createIssue($project);

    $this->drupalLogin($this->maintain_user);
    $this->drupalGet("node/$power_issue->nid/edit");
    $this->assertResponse(403, t('A user with "edit own project issues" is denied access to the edit tab for an issue she does not own.'));
  }
}
