<?php
/**
 * @file
 * Automated tests to check project issue maintainers permissions.
 *
 * Class ProjectIssueMaintainersTestCase
 */

class ProjectIssueMaintainersTestCase extends ProjectIssueWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Project Issue maintainers functionality',
      'description' => 'Test Project Issue module maintainers access control system.',
      'group' => 'Project Issue'
    );
  }

  protected function setUp() {
    parent::setUp();

    $this->owner = $this->drupalCreateUser(array('create project content', 'create project_issue content', 'access user profiles', 'edit own project_issue content'));
    $this->maintainer = $this->drupalCreateUser(array('create project_issue content'));
    $this->drupalLogin($this->owner);
  }

  /**
   * Checks that the select's options are the same than the given options.
   *
   * It also checks that all of the given elements are displayed in the select
   * and also checks that the select elements are available in the given array.
   *
   * @param $name
   *   The name of the select element.
   * @param array $options
   *   The options which should shown in the select element.
   */
  function assertSelectFieldOptions($name, $options = array()) {
    $options = drupal_map_assoc($options);

    $elements = $this->xpath('//select[@name="' . $name . '"]/option');
    foreach ($elements as $element) {
      $element = (string) $element;
      if (in_array($element, $options)) {
        $this->assert('pass', t('The option %option was found.', array('%option' => $element)));
        unset($options[$element]);
      }
      else {
        $this->assert('fail', t('The option %option was found, but not expected.', array('%option' => $element)));
      }
    }
    if (!empty($options)) {
      foreach ($options as $option) {
        $this->assert('fail', t('The option %option was expected, but not found.', array('%option' => $option)));
      }
    }
  }

  /**
   * Test maintainer permissions.
   */
  function testProjectIssueMaintainerPermissions() {
    // Create project, make sure Maintainers link is shown.
    $project = $this->createProject();

    // Check the maintainers tab is shown and owner is included correctly.
    $this->drupalGet("node/$project->nid/maintainers");
    $this->assertFieldDisabled("maintainers[{$this->owner->uid}][permissions][maintain issues]", 'Checkbox is disabled for project owner');
    $this->assertFieldCheckedByName("maintainers[{$this->owner->uid}][permissions][maintain issues]", 'Owners permissions are automatically granted');

    // Check the maintainers list is shown correctly first.
    $this->drupalGet("node/add/project-issue/$project->nid");
    $this->assertSelectFieldOptions('field_issue_assigned[und]', array(t('Unassigned'), $this->owner->name));

    // Verify that other users do not have access.
    $this->drupalLogin($this->maintainer);
    $this->drupalGet("node/add/project-issue/$project->nid");
    $this->assertSelectFieldOptions('field_issue_assigned[und]', array(t('Unassigned'), $this->maintainer->name));

    // Add a new user and verify that they are added:
    // Login as owner.
    $this->drupalLogin($this->owner);
    // Add new user.
    $edit = array();
    $edit['new_maintainer[user]'] = $this->maintainer->name;
    $edit['new_maintainer[permissions][maintain issues]'] = TRUE;
    $this->drupalPost("node/$project->nid/maintainers", $edit, t('Update'));
    $this->assertFieldCheckedByName("maintainers[{$this->maintainer->uid}][permissions][maintain issues]", 'Permissions stored correctly.');

    // Test that owner can assign issues.
    $this->drupalGet("node/add/project-issue/$project->nid");
    $this->assertSelectFieldOptions('field_issue_assigned[und]', array(t('Unassigned'), $this->owner->name, $this->maintainer->name));

    // Test that maintainer can now assign issues.
    $this->drupalLogin($this->maintainer);
    $this->drupalGet("node/add/project-issue/$project->nid");
    $this->assertSelectFieldOptions('field_issue_assigned[und]', array(t('Unassigned'), '- Restricted access -', $this->maintainer->name));

    // Remove permissions and check.
    $this->drupalLogin($this->owner);
    $this->drupalGet("node/$project->nid/maintainers/delete/{$this->maintainer->uid}");
    $this->drupalPost(NULL, array(), t('Delete'));
    // Make sure that the user was deleted.
    $this->drupalGet("node/$project->nid/maintainers");
    $this->assertNoLink($this->maintainer->name, 0, 'Maintainer correctly removed from form.');

    // Verify that users do not show up in the maintainers list.
    $this->drupalGet("node/add/project-issue/$project->nid");
    $this->assertSelectFieldOptions('field_issue_assigned[und]', array(t('Unassigned'), $this->owner->name));

    $this->drupalLogin($this->maintainer);
    $this->drupalGet("node/add/project-issue/$project->nid");
    $this->assertSelectFieldOptions('field_issue_assigned[und]', array(t('Unassigned'), $this->maintainer->name));
  }
}
