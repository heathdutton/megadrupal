<?php

class ProjectIssueNotificationsTestCase extends ProjectIssueWebTestCase {
  protected $auth_user;
  protected $comment_user;

  public static function getInfo() {
    return array(
      'name' => 'Project issue notifications',
      'description' => 'Test notifications on issues.',
      'group' => 'Project Issue',
    );
  }

  protected function setUp($modules = array()) {
    parent::setUp($modules);

    $perms = array('create project content', 'create project_issue content');
    $this->auth_user = $this->drupalCreateUser($perms);
    $this->comment_user = $this->drupalCreateUser($perms);
    $this->drupalLogin($this->auth_user);
  }

  /**
   * Test the creation of project issues and notifications we get.
   */
  function testProjectIssueNotifications() {
    // Make sure we get notifications for things we're interested in.
    project_issue_notification_user_settings_load($this->auth_user);
    $this->auth_user->project_issue_notification['level'] = PROJECT_ISSUE_NOTIFICATION_OWN;
    project_issue_notification_user_settings_save($this->auth_user);
    project_issue_notification_user_settings_load($this->comment_user);
    $this->comment_user->project_issue_notification['level'] = PROJECT_ISSUE_NOTIFICATION_OWN;
    project_issue_notification_user_settings_save($this->comment_user);


    // Get ourselves a project.
    $project = $this->createProject();
    $project_machine_name = $project->field_project_machine_name[LANGUAGE_NONE][0]['value'];

    // Create ourselves an issue.
    $values_one = array(
      'category' => 'Task',
    );
    $issue_one = $this->createIssue($project, $values_one);

    // Check that we just sent an email to ourselves.
    $expected_subject = '[' . $project_machine_name . '] [' . $values_one['category'] . '] ' . $issue_one->title;
    $this->assertMailString('key', 'project_issue_update_notification', 1);
    $this->assertMailString('subject', $expected_subject, 1);
    $this->assertMailString('to', $this->auth_user->mail, 1);

    // Comment on the issue and make sure that we get a notification.
    $emails_before = $this->drupalGetMails();
    $this->createIssueComment($issue_one, $this->randomName());
    $emails_after = $this->drupalGetMails();
    $this->assertEqual(count($emails_before) + 1, count($emails_after),  'Commenting on an issue does trigger email notification if user has not opted out of self notification.');

    // Disable self notifications on the auth_user account.
    project_issue_notification_user_settings_load($this->auth_user);
    $this->auth_user->project_issue_notification['notify_own_updates'] = 0;
    project_issue_notification_user_settings_save($this->auth_user);

    // Create another new issue.
    $values_two = array(
      'category' => 'Bug report',
    );
    $emails_before = $this->drupalGetMails();
    $issue_two = $this->createIssue($project, $values_two);
    $emails_after = $this->drupalGetMails();
    $this->assertEqual(count($emails_before), count($emails_after),  'Creating an issue does not trigger email notification if user has opted out of self notification.');

    // Add a comment, and make sure that we do not get an e-mail.
    $emails_before = $this->drupalGetMails();
    $this->createIssueComment($issue_two, $this->randomName());
    $emails_after = $this->drupalGetMails();
    $this->assertEqual(count($emails_before), count($emails_after),  'Commenting on an issue does not trigger email notification if user has opted out of self notification.');

    // Check that when another user posts a comment to our issue, we still
    // get a notification.
    $this->drupalLogin($this->comment_user);
    $emails_before = $this->drupalGetMails();
    $this->createIssueComment($issue_two, $this->randomName());
    $emails_after = $this->drupalGetMails();
    // Assert that two emails were sent.
    $this->assertEqual(count($emails_before) + 2, count($emails_after),  'Commenting on an issue triggers notifications for all users that are following it.');
    // And that they were sent to the right people.
    $expected_subject = '[' . $project_machine_name . '] [' . $values_two['category'] . '] ' . $issue_two->title;
    $this->assertMailString('key', 'project_issue_update_notification', 2);
    $this->assertMailString('subject', $expected_subject, 2);
    $this->assertMailString('to', $this->auth_user->mail, 2);
    $this->assertMailString('to', $this->comment_user->mail, 2);
  }
}
