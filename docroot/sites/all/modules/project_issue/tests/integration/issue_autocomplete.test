<?php

class ProjectIssueAutocompleteTestCase extends DrupalWebTestCase {
  protected $admin_user;

  public static function getInfo() {
    return array(
      'name' => 'Project issue autocomplete',
      'description' => 'Test field autocomplete modifications.',
      'group' => 'Project Issue',
    );
  }

  protected function setUp() {
    parent::setUp(array('project_issue'));

    $perms = array(
      'administer taxonomy',
      'administer content types',
    );
    $this->admin_user = $this->drupalCreateUser($perms);
    $this->drupalLogin($this->admin_user);
  }

  /**
   * Test the autocomplete field modifications.
   */
  function testProjectIssueAutocomplete() {
    $vocabulary = new stdClass();
    $vocabulary->name = 'Autocomplete Test';
    $vocabulary->machine_name = 'project_issue_test_vocab';
    taxonomy_vocabulary_save($vocabulary);
    $vocabulary = taxonomy_vocabulary_machine_name_load($vocabulary->machine_name);

    // Enable this vocab for the issue queue, and have it use an autocomplete
    // widget.
    variable_set('project_issue_taxonomy_vocabulary_issue_queue_' . $vocabulary->vid, 'autocomplete');

    // Rebuild menu router table so that the menu_alter hook can insert the
    // proper autocomplete route override for the vocab we just added.
    menu_rebuild();

    $termA = new stdClass();
    $termA->name = 'testA';
    $termA->vid = $vocabulary->vid;
    taxonomy_term_save($termA);

    $termB = new stdClass();
    $termB->name = 'testB';
    $termB->vid = $vocabulary->vid;
    taxonomy_term_save($termB);

    $termC = new stdClass();
    $termC->name = 'testC';
    $termC->vid = $vocabulary->vid;
    taxonomy_term_save($termC);

    $field_1 = array(
      'field_name' => 'taxonomy_vocabulary_' . $vocabulary->vid,
      'type' => 'taxonomy_term_reference',
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
      'settings' => array(
        'allowed_values' => array(
          array(
            'vocabulary' => $vocabulary->machine_name,
            'parent' => 0,
          ),
        ),
      ),
    );
    field_create_field($field_1);
    $instance = array(
      'field_name' => 'taxonomy_vocabulary_' . $vocabulary->vid,
      'bundle' => 'article',
      'entity_type' => 'node',
      'widget' => array(
        'type' => 'autocomplete',
      ),
    );
    field_create_instance($instance);

    // Create nodes in such a way that the usage of TermC is heaviest and TermA
    // the lightest.
    $this->drupalCreateNode(array(
      'type' => 'article',
      'taxonomy_vocabulary_' . $vocabulary->vid => array(
        LANGUAGE_NONE => array(
          array('tid' => $termA->tid),
          array('tid' => $termB->tid),
          array('tid' => $termC->tid),
        ),
      ),
    ));
    $this->drupalCreateNode(array(
      'type' => 'article',
      'taxonomy_vocabulary_' . $vocabulary->vid => array(
        LANGUAGE_NONE => array(
          array('tid' => $termB->tid),
          array('tid' => $termC->tid),
        ),
      ),
    ));
    $this->drupalCreateNode(array(
      'type' => 'article',
      'taxonomy_vocabulary_' . $vocabulary->vid => array(
        LANGUAGE_NONE => array(
          array('tid' => $termC->tid),
        ),
      ),
    ));

    // The order of the terms returned should be based on usage of each term,
    // with highest usage listed first.
    $results = $this->drupalGet('taxonomy/autocomplete/taxonomy_vocabulary_' . $vocabulary->vid . '/test');
    $expected = '{"testC":"testC","testB":"testB","testA":"testA"}';
    $this->assertEqual($results, $expected);

    // Test the views version.
    $results = $this->drupalGet('admin/views/ajax/autocomplete/taxonomy/' . $vocabulary->vid . '/test');
    $this->assertEqual($results, $expected);

    $results = $this->drupalGet('taxonomy/autocomplete/taxonomy_vocabulary_foo');
    $this->assertEqual($results, 'Taxonomy field taxonomy_vocabulary_foo not found.');

    // Make sure that original sorting (seems to be alphabetical) still works
    // when we no longer use this vocabulary for project issue.
    variable_del('project_issue_taxonomy_vocabulary_issue_queue_' . $vocabulary->vid);
    menu_rebuild();
    $results = $this->drupalGet('taxonomy/autocomplete/taxonomy_vocabulary_' . $vocabulary->vid . '/test');
    $expected = '{"testA":"testA","testB":"testB","testC":"testC"}';
    $this->assertEqual($results, $expected);

    // Test the views version.
    $results = $this->drupalGet('admin/views/ajax/autocomplete/taxonomy/' . $vocabulary->vid . '/test');
    $this->assertEqual($results, $expected);
  }
}
