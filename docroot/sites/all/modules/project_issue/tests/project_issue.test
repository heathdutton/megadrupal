<?php

class ProjectIssueWebTestCase extends ProjectWebTestCase {

  protected function setUp($modules = array()) {
    $modules = array_merge(array('project_issue', 'nodechanges', 'dereference_list', 'entityreference', 'list', 'views', 'project', 'comment'), $modules);
    parent::setUp($modules);
  }

  /**
   * Helper function for creating a new project.
   *
   * This overrides, but still passes through to the parent in
   * ProjectWebTestCase so that we can add defaults for the fields that are
   * defined by project_issue for project nodes.
   *
   * @param $settings array
   *   An array of form values to be passed to DrupalWebTestCase::drupalPost().
   */
  function createProject($settings = array()) {
    $defaults = array(
      'field_project_components' => array(
        LANGUAGE_NONE => array(
          0 => array(
            'value' => $this->randomName(),
            'format' => NULL,
          ),
          2 => array(
            'value' => $this->randomName(),
            'format' => NULL,
          ),
          3 => array(
            'value' => $this->randomName(),
            'format' => NULL,
          ),
          4 => array(
            'value' => $this->randomName(),
            'format' => NULL,
          ),
        )
      ),
    );

    $settings = drupal_array_merge_deep($defaults, $settings);
    return parent::createProject($settings);
  }

  /**
   * Create an Issue node.
   *
   * @param stdClass $project
   *   A project node.
   * @param array $values
   *   An optional array of issue values.
   * @param array $settings
   *   An optional array of field values/node structure.
   * @return
   *   An issue node.
   */
  function createIssue($project, $values = array(), $settings = array()) {
    // If people are lazy and don't want to specify any of these, provide sane
    // defaults and map human readable names to machine names where possible.

    // Normalize values, so that we don't throw exceptions :(
    $values += array(
      'body' => NULL,
      'status' => NULL,
      'category' => NULL,
      'priority' => NULL,
      'component' => NULL,
    );

    // Map the defaults to a field strucutre
    $defaults = array(
      'type' => 'project_issue',
      'title' => (isset($values['title'])) ? $values['title'] : $this->randomName(8),
      'body' => array(
        LANGUAGE_NONE => array(
          0 => array(
            'value' => $this->assign_field_value($values['body'], 'body', $this->randomName(72))
          )
        )
      ),
      'field_project' => array(
        LANGUAGE_NONE => array(
          0 => array(
            'target_id' => $project->nid,
          ),
        )
      ),
      'field_issue_status' => array(
        LANGUAGE_NONE => array(
          0 => array(
            'value' => $this->assign_field_value($values['status'], 'field_issue_status', 1) // Active
          ),
        ),
      ),
      'field_issue_category' => array(
        LANGUAGE_NONE => array(
          0 => array(
            'value' => $this->assign_field_value($values['category'], 'field_issue_category', 2), // Task
          ),
        ),
      ),
      'field_issue_priority' => array(
        LANGUAGE_NONE => array(
          0 => array(
            'value' => $this->assign_field_value($values['priority'], 'field_issue_priority', 200), // Normal
          ),
        ),
      ),
      'field_issue_component' => array(
        LANGUAGE_NONE => array(
          0 => array(
            'value' => $this->assign_field_value($values['component'], 'field_issue_component', $project->field_project_components[LANGUAGE_NONE][0]['value']),
          ),
        ),
      ),
    );

    $settings = drupal_array_merge_deep($defaults, $settings);
    return $this->drupalCreateNode($settings);
  }

  /**
   * Map a human readable value to it's key from a fields allowed values
   * settings.
   *
   * @param $value
   *   The value to map.
   * @param $field
   *   The name of the field.
   * @param $default
   *   A default to use for the value if $value is empty.
   * @return
   *   The machine readable value for a field.
   */
  public function assign_field_value($value, $field, $default) {
    if (!is_null($value)) {
      $field_info = field_info_field($field);
      if (isset($field_info['settings']['allowed_values']) && !empty($field_info['settings']['allowed_values'])) {
        $field_values = array_flip($field_info['settings']['allowed_values']);
        $value = $field_values[$value];
      }
    }
    else {
      $value = $default;
    }
    return $value;
  }

  /**
   * Make sure issue metadata matches up to what it's intended to be.
   *
   * @param array $metadata
   *   Associative array of expected issue metadata field names and values.
   * @param $nid
   *   Optional integer node ID of the issue to check metadata fields for.
   */
  function assertIssueMetadata($metadata, $nid = NULL) {
    if ($nid) {
      $this->drupalGet('node/' . $nid);
    }
    $xpath = "//div[@id='node-$nid']//div[contains(@class,'content')]/div[contains(@class,'field')]";
    foreach ($this->xpath($xpath) as $field) {
      $key = trim(strtolower(preg_replace('(\W)', '', (string)$field->div[0])));
      if (isset($metadata[$key])) {
        $this->assertEqual(strtolower($metadata[$key]), strtolower((string)$field->div[1]->div), format_string('Issue value for @key matches expected: "'. strtolower($metadata[$key]). '" got: "' . strtolower((string)$field->div[1]->div) .'"', array('@key' => $key)));
      }
    }
  }

  /**
   * Post a comment.
   *
   * @param $issue
   *   Issue to post comment on.
   * @param $comment
   *   Comment body.
   * @param $subject
   *   Comment subject.
   *
   * @see CommentHelperCase::postComment()
   */
  function createIssueComment($issue, $comment, $subject = '') {
    $langcode = LANGUAGE_NONE;
    $edit = array();
    $edit['comment_body[' . $langcode . '][0][value]'] = $comment;

    // Force optional preview to simplify things.
    variable_set('comment_preview_' . $issue->type, DRUPAL_OPTIONAL);
    $subject_mode = variable_get('comment_subject_field' . $issue->type, 1);

    // Must get the page before we test for fields.
    if ($issue !== NULL) {
      $this->drupalGet('comment/reply/' . $issue->nid);
    }

    if ($subject_mode == TRUE) {
      $edit['subject'] = $subject;
    }

    $this->drupalPost(NULL, $edit, t('Save'));

    // Get comment ID
    $match = array();
    preg_match('/#comment-([0-9]+)/', $this->getURL(), $match);
    if (isset($match[1])) {
      return (object) array('id' => $match[1], 'subject' => $subject, 'comment' => $comment);
    }
  }
}



//class ProjectIssueCommentTestCase extends ProjectIssueWebTestCase {
//  public static function getInfo() {
//    return array(
//      'name' => 'Project issue comment',
//      'description' => 'Test commenting on an issue.',
//      'group' => 'Project Issue',
//    );
//  }
//
//  function setUp() {
//    parent::setUp();
//
//    $maintain_user = $this->drupalCreateUser(array('create full projects', 'create project issues', 'access project issues', 'access projects'));
//    $this->drupalLogin($maintain_user);
//  }
//
//  /**
//   * Test the creation of issue metadata.
//   */
//  function testProjectIssueMetadata() {
//    $project = $this->createProject();
//    // Test project issue node form fields.
//    $issue = $this->createIssue($project);
//    $html = $this->drupalGet('comment/reply/' . $issue->nid);
//    $this->parse();
//    // Let's iterate over all the forms.
//    $forms = $this->xpath('//form');
//    $form = $forms[0];
//    // We try to set the fields of this form as specified in $edit.
//    $post = $upload = $edit = array();
//    $this->handleForm($post, $edit, $upload, NULL, $form);
//    $map = array(
//      'priority' => 'priority',
//      'category' => 'category',
//      'component' => 'project_info[component]',
//      'assigned' => 'project_info[assigned]',
//      'pid' => 'project_info[pid]',
//    );
//    foreach ($map as $issue_key => $post_key) {
//      $this->assertEqual($issue->project_issue[$issue_key], $post[$post_key], t('Making sure comment form is correct.'));
//    }
//  }
//
//  /**
//   * Test the creation of issue comments.
//   */
//  function testProjectIssueComment() {
//    $project = $this->createProject();
//    // Test project issue node form fields.
//    $issue = $this->createIssue($project);
//    $comment = $this->createIssueComment($issue);
//    $this->assertText($comment['comment'], t('Body found'));
//  }
//}

//class ProjectIssuePriorityTestCase extends ProjectIssueWebTestCase {
//  /**
//   * A user who can maintain project issue administrative settings, projects, and create issues.
//   */
//  protected $maintain_user;
//
//  public static function getInfo() {
//    return array(
//      'name' => 'Project issue priority',
//      'description' => 'Test issue priority settings and functionality.',
//      'group' => 'Project Issue',
//    );
//  }
//
//  function setUp() {
//    parent::setUp();
//
//    $this->maintain_user = $this->drupalCreateUser(array('administer projects', 'create full projects', 'create project issues', 'access project issues', 'access projects'));
//    $this->drupalLogin($this->maintain_user);
//  }
//
//  /**
//   * Assert that the priorities are stored and displayed correctly.
//   *
//   * This function will take an array of priorities keyed by their priority ID,
//   * with each item being an array with they keys 'name' and 'weight'.
//   */
//  function assertAdminPrioritiesForm($values) {
//    $pass = TRUE;
//    $this->drupalGet('admin/project/project-issue-priority');
//    $forms = $this->xpath('//form');
//    $form = $forms[0];
//
//    $post = $edit = $upload = array();
//    $this->handleForm($post, $edit, $upload, NULL, $form);
//
//    foreach ($values as $key => $priority) {
//      $result = $this->assertEqual($post["priority[$key][name]"], $priority['name'], t('The name for the priority is correct.'));
//      $result = $this->assertEqual($post["priority[$key][weight]"], $priority['weight'], t('The weight for the priority is correct.'));
//    }
//  }
//
//  /**
//   * Test the project issue priority admin form.
//   */
//  function testProjectIssuePrioritySettings() {
//    // This matches the defaults setup in project_issue_install().
//    $default_priority_order = array(
//      1 => array(
//        'name' => 'critical',
//        'weight' => 1,
//      ),
//      2 => array(
//        'name' => 'normal',
//        'weight' => 2,
//      ),
//      3 => array(
//        'name' => 'minor',
//        'weight' => 3,
//      ),
//    );
//    $this->assertAdminPrioritiesForm($default_priority_order);
//
//    // Test reordering ability
//    $edit = array();
//    $edit['priority[1][weight]'] = -2;
//    $edit['priority[2][weight]'] = -3;
//    $edit['priority[3][weight]'] = -1;
//    $this->drupalPost('admin/project/project-issue-priority', $edit, t('Save'));
//
//    // Check new values
//    $priorities = array(
//      1 => array(
//        'name' => 'critical',
//        'weight' => 1,
//      ),
//      2 => array(
//        'name' => 'normal',
//        'weight' => 0,
//      ),
//      3 => array(
//        'name' => 'minor',
//        'weight' => 2,
//      ),
//    );
//    $this->assertAdminPrioritiesForm($priorities);
//
//    // Add a new priority, and check the form results
//    $edit = array();
//    $edit['priority[0][name]'] = $this->randomName(8);
//    $this->drupalPost('admin/project/project-issue-priority', $edit, t('Save'));
//
//    // Check new values
//    $priorities = array(
//      1 => array(
//        'name' => 'critical',
//        'weight' => 1,
//      ),
//      2 => array(
//        'name' => 'normal',
//        'weight' => 0,
//      ),
//      3 => array(
//        'name' => 'minor',
//        'weight' => 2,
//      ),
//      4 => array(
//        'name' => $edit['priority[0][name]'],
//        'weight' => 3,
//      ),
//    );
//    $this->assertAdminPrioritiesForm($priorities);
//
//    // Test deleting a priority without any issues.
//    $this->drupalGet('admin/project/project-issue-priority/delete/4');
//    $this->assertNoText('Reassign priority', t('Issue confirm form is displayed properly.'));
//    $this->drupalPost('admin/project/project-issue-priority/delete/4', array(), t('Delete'));
//    $this->assertText('Project issue priority '. $edit['priority[0][name]'] .' deleted.', t('Project issue priority has been deleted.'));
//
//    // Test that a custom priority can be assinged to an issue and is displayed correctly.
//    $edit = array();
//    $edit['priority[0][name]'] = $priority_name = $this->randomName(8);
//    $this->drupalPost('admin/project/project-issue-priority', $edit, t('Save'));
//    $project = $this->createProject();
//
//    $edit = array();
//    $edit['priority'] = '5';
//    $issue = $this->createIssue($project, $edit);
//
//    // Check that the issue priority is displayed correctly.
//    $this->assertIssueMetadata(array('priority' => $priority_name), $issue->nid, t('Custom issue priority is displyed correctly'));
//
//    // Delete the priority
//    $this->drupalGet('admin/project/project-issue-priority/delete/5');
//    $this->assertText('Reassign priority', t('Issue confirm form is displayed properly.'));
//
//    $edit = array();
//    $edit['new_pid'] = 2;
//    $this->drupalPost(NULL, $edit, t('Delete'));
//    $this->assertText('Project issue priority '. $priority_name .' deleted.', t('Issue priority was deleted'));
//
//    $this->assertIssueMetadata(array('priority' => 'normal'), $issue->nid);
//
//    $edit = array();
//    $edit['priority[1][weight]'] = -3;
//    $edit['priority[2][weight]'] = -2;
//    $edit['priority[3][weight]'] = -1;
//    $this->drupalPost('admin/project/project-issue-priority', $edit, t('Save'));
//
//    $priorities = array(
//      1 => array(
//        'name' => 'critical',
//        'weight' => 0,
//      ),
//      2 => array(
//        'name' => 'normal',
//        'weight' => 1,
//      ),
//      3 => array(
//        'name' => 'minor',
//        'weight' => 2,
//      ),
//    );
//    $this->assertAdminPrioritiesForm($priorities);
//
//    $edit = array();
//    $edit['priority'] = 1;
//    $edit['title'] = $critical_title = $this->randomName(8);
//    $critical_issue = $this->createIssue($project, $edit);
//
//    $edit = array();
//    $edit['priority'] = 3;
//    $edit['title'] = $minor_title = $this->randomName(8);
//    $minor_issue = $this->createIssue($project, $edit);
//
//    $this->drupalGet('project/issues/'. $project->project['uri']);
//    $this->clickLink(t('Priority'));
//
//    // Check that views handler
////    @TODO This code is not working yet but is quite important
////    $rows = $this->xpath("//table[@class='project-issue']/tr");
////    debug((string)$rows[0]->td[0]);
////
////    $this->assertEqual((string)$rows[0], $minor_issue->title);
////    $this->assertEqual((string)$rows[1], $issue->title);
////    $this->assertEqual((string)$rows[2], $critical_issue->title);
//  }
//}
