<?php
/**
 * @file
 * Install, update, and uninstall functions for the project_issue module.
 */

/**
 * Implements hook_install().
 */
function project_issue_install() {
  $t = get_t();

  /**
   * Set up project-specific field for 'has an issue queue'.
   */
  $field = array(
    'translatable' => '0',
    'settings' => array(
      'allowed_values' => array(
        0 => $t('No'),
        1 => $t('Yes'),
      ),
      'allowed_values_function' => '',
    ),
    'field_name' => 'field_project_has_issue_queue',
    'type' => 'list_boolean',
    'active' => '1',
    'locked' => '0',
    'cardinality' => 1,
  );
  field_create_field($field);

  /**
   * Set up project-specific field for project components.
   */
  $components = array(
    'type' => 'text',
    'field_name' => 'field_project_components',
    'label' => $t('Project components'),
    'cardinality' => FIELD_CARDINALITY_UNLIMITED,
    'settings' => array(
      'max_length' => 255,
    ),
  );
  field_create_field($components);


  $bundles = project_project_node_types();

  foreach ($bundles as $bundle) {
    $instance = array(
      'label' => $t('Enable issue tracker'),
      'widget' => array(
        'weight' => '3',
        'type' => 'options_onoff',
        'active' => 1,
        'settings' => array(
          'display_label' => 1,
        ),
      ),
      'settings' => array(
        'user_register_form' => FALSE,
      ),
      'display' => array(
        'default' => array(
          'label' => 'above',
          'type' => 'list_default',
          'settings' => array(),
          'weight' => 4,
        ),
        'teaser' => array(
          'type' => 'hidden',
          'label' => 'above',
          'settings' => array(),
          'weight' => 0,
        ),
      ),
      'required' => FALSE,
      'description' => '',
      'default_value' => array(
        0 => array(
          'value' => 1,
        ),
      ),
      'field_name' => 'field_project_has_issue_queue',
      'entity_type' => 'node',
      'bundle' => $bundle,
    );
    field_create_instance($instance);

    $components_instance = array(
      'bundle' => $bundle,
      'description' => $t('Used to classify different aspects of a project, eg. a software project might have <em>Code</em>, <em>User interface</em>, and <em>Documentation</em> components.'),
      'display' => array(
        'default' => array(
          'type' => 'hidden',
        ),
        'teaser' => array(
          'type' => 'hidden',
        ),
      ),
      'entity_type' => 'node',
      'field_name' => 'field_project_components',
      'label' => $t('Components'),
      'widget' => array(
        'weight' => '-1',
        'settings' => array(
          'size' => '60',
        ),
      ),
      'required' => TRUE,
      'default_value' => array(
        array('value' => $t('Code')),
        array('value' => $t('Documentation')),
        array('value' => $t('Miscellaneous')),
        array('value' => $t('User interface')),
      ),
    );
    field_create_instance($components_instance);
  }

  // Load the code to define the default project_issue node type and invoke it.
  require_once dirname(__FILE__) . '/includes/project_issue_node_type.inc';
  _project_issue_create_issue_node_type();

  // Create a queue for managing and sending issue update notifications.
  $queue = DrupalQueue::get('project_issue_notifications');
  $queue->createQueue();
}

/**
 * Implements hook_uninstall().
 */
function project_issue_uninstall() {
  require_once dirname(__FILE__) . '/includes/project_issue_node_type.inc';
  $variables = array(
    'project_issue_default_state',
    'project_issue_followup_user',
    'project_issue_hook_cron',
    'project_issue_follow_flag',
  );
  foreach ($variables as $variable) {
    variable_del($variable);
  }

  $node_types = node_type_get_types();
  foreach ($node_types as $name => $obj) {
    variable_del('project_issue_show_comment_signatures_' . $name);
  }

  foreach (taxonomy_get_vocabularies() as $vid => $vocabulary) {
    variable_del('project_issue_taxonomy_vocabulary_issue_queue_' . $vid);
  }

  _project_issue_delete_issue_node_type();
  field_delete_field('field_project_has_issue_queue');
  watchdog('project', 'Deleted the :field_name field from all content type instances.', array(':field_name' => 'field_project_has_issue_queue'));
}

/**
 * Implements hook_schema().
 */
function project_issue_schema() {
  $schema = array();

  $schema['project_issue_project_maintainer'] = array(
    'description' => t('Users who have various per-project maintainer permissions.'),
    'fields' => array(
      'nid' => array(
        'description' => t('Foreign key: {node}.nid of the project.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'uid' => array(
        'description' => t('Foreign key: {users}.uid of a user with any project maintainer permissions.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'maintain_issues' => array(
        'description' => t('Can this user maintain issues for the given project.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('nid', 'uid'),
  );

  $schema['project_issue_notification_global'] = array(
    'description' => 'Stores global issue notification settings per user.',
    'fields' => array(
      'uid' => array(
        'description' => 'The {users}.uid for the user.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'level' => array(
        'description' => 'The global default notification setting level. 0 = None, 1 = Flagged/Own, 2 = All.',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0, // PROJECT_ISSUE_NOTIFICATION_NONE
      ),
      'notify_own_updates' => array(
        'description' => 'User preference for whether they want to receive notifications of their own updates.',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ),
      // TODO: Remove, see https://www.drupal.org/node/2131983.
      'mail_body' => array(
        'description' => 'User preference for the body of notification e-mails (e.g. full history vs. only new content).',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0, // PROJECT_ISSUE_MAIL_BODY_FULL_HISTORY
      ),
      'mail_subject_project' => array(
        'description' => 'Defines if the subject of notification e-mails includes the project name.',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ),
      'mail_subject_category' => array(
        'description' => 'Defines if the subject of notification e-mails includes the issue category (bug, feature, etc).',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ),
    ),
    'primary key' => array('uid'),
    'indexes' => array(
      'level' => array('level'),
    ),
  );

  $schema['project_issue_notification_project'] = array(
    'description' => 'Table keeping track of per-project issue notification settings for each user.',
    'fields' => array(
      'nid' => array(
        'description' => 'The {node}.nid of the project which the user wants issue notification emails for.',
        'type' => 'int',
        'unsigned' => 1,
        'not null' => TRUE,
        'default' => 0,
      ),
      'uid' => array(
        'description' => 'Foreign key: The {users}.uid for this subscriber.',
        'type' => 'int',
        'unsigned' => 1,
        'not null' => TRUE,
        'default' => 0,
      ),
      'level' => array(
        'description' => 'The notification level for the project. Possible values are: 1 = notify for own/flagged issues; 2 = notify for all issues.',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => 1,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('uid', 'nid'),
    'indexes' => array(
      'nid_level' => array('nid', 'level'),
    ),
  );

  return $schema;
}

/**
 * Implements hook_update_dependencies().
 */
function project_issue_update_dependencies() {
  $dependencies['project_issue'][7000] = array(
    'project' => 7002,
  );
  return $dependencies;
}

/**
 * Ensure project and project_issue fields and node types are set up properly.
 */
function project_issue_update_7000() {
  $t = get_t();

  // Enable new dependencies.
  module_enable(array('entity', 'entityreference', 'list', 'file', 'dereference_list', 'nodechanges', 'token_formatters'));
  drupal_flush_all_caches();

  /**
   * Set up project-specific field for 'has an issue queue'.
   */
  $field = array(
    'translatable' => '0',
    'settings' => array(
      'allowed_values' => array(
        0 => $t('No'),
        1 => $t('Yes'),
      ),
      'allowed_values_function' => '',
    ),
    'field_name' => 'field_project_has_issue_queue',
    'type' => 'list_boolean',
    'active' => '1',
    'locked' => '0',
    'cardinality' => 1,
  );
  if (!field_info_field('field_project_has_issue_queue')) {
    field_create_field($field);
  }

  /**
   * Set up project-specific field for project components.
   */
  $components = array(
    'type' => 'text',
    'field_name' => 'field_project_components',
    'label' => $t('Project components'),
    'cardinality' => FIELD_CARDINALITY_UNLIMITED,
    'settings' => array(
      'max_length' => 255,
    ),
  );
  if (!field_info_field('field_project_components')) {
    field_create_field($components);
  }


  $bundles = project_project_node_types();

  foreach ($bundles as $bundle) {
    $instance = array(
      'label' => $t('Enable issue tracker'),
      'widget' => array(
        'weight' => '3',
        'type' => 'options_onoff',
        'active' => 1,
        'settings' => array(
          'display_label' => 1,
        ),
      ),
      'settings' => array(
        'user_register_form' => FALSE,
      ),
      'display' => array(
        'default' => array(
          'label' => 'above',
          'type' => 'list_default',
          'settings' => array(),
          'weight' => 4,
        ),
        'teaser' => array(
          'type' => 'hidden',
          'label' => 'above',
          'settings' => array(),
          'weight' => 0,
        ),
      ),
      'required' => FALSE,
      'description' => '',
      'default_value' => array(
        0 => array(
          'value' => 1,
        ),
      ),
      'field_name' => 'field_project_has_issue_queue',
      'entity_type' => 'node',
      'bundle' => $bundle,
    );
    if (!field_info_instance('node', 'field_project_has_issue_queue', $bundle)) {
      field_create_instance($instance);
    }

    $components_instance = array(
      'bundle' => $bundle,
      'description' => $t('Used to classify different aspects of a project, eg. a software project might have <em>Code</em>, <em>User interface</em>, and <em>Documentation</em> components.'),
      'display' => array(
        'default' => array(
          'type' => 'hidden',
        ),
        'teaser' => array(
          'type' => 'hidden',
        ),
      ),
      'entity_type' => 'node',
      'field_name' => 'field_project_components',
      'label' => $t('Components'),
      'widget' => array(
        'weight' => '-1',
        'settings' => array(
          'size' => '60',
        ),
      ),
      'required' => TRUE,
      'default_value' => array(
        array('value' => $t('Code')),
        array('value' => $t('Documentation')),
        array('value' => $t('Miscellaneous')),
        array('value' => $t('User interface')),
      ),
    );
    if (!field_info_instance('node', 'field_project_components', $bundle)) {
      field_create_instance($components_instance);
    }
  }

  // Load the code to define the default project_issue node type and invoke it.
  require_once dirname(__FILE__) . '/includes/project_issue_node_type.inc';
  _project_issue_create_issue_node_type();
}

/**
 * Move "enable issue tracker" and "components" project-level data from {project_issue_projects} into fields.
 */
function project_issue_update_7001(&$sandbox) {
  $t = get_t();
  if (!isset($sandbox['progress'])) {
    // Check if we need to run at all.
    if (!db_table_exists('project_issue_projects')) {
      return $t('No legacy data detected, skipping this update.');
    }
    $sandbox['progress'] = 0;
    $sandbox['current_nid'] = 0;
    // We'll -1 to disregard the uid 0...
    $sandbox['max'] = db_query('SELECT COUNT(DISTINCT p.nid) FROM {project_issue_projects} p INNER JOIN {node} n ON p.nid = n.nid')->fetchField() - 1;
  }

  $query = db_select('project_issue_projects', 'p');
  $query->innerJoin('node', 'n', 'p.nid = n.nid');
  $result = $query
    ->fields('p', array('nid', 'components'))
    ->fields('n', array('vid'))
    ->condition('p.nid', $sandbox['current_nid'], '>')
    ->range(0, 100)
    ->orderBy('p.nid', 'ASC')
    ->execute();

  // Set up queries for bulk inserting data into the field.
  $insertQueryData = db_insert('field_data_field_project_components')
    ->fields(array('entity_type', 'bundle', 'deleted', 'entity_id', 'revision_id', 'language', 'delta', 'field_project_components_value', 'field_project_components_format'));
  $insertQueryRevision = db_insert('field_revision_field_project_components')
    ->fields(array('entity_type', 'bundle', 'deleted', 'entity_id', 'revision_id', 'language', 'delta', 'field_project_components_value', 'field_project_components_format'));
  foreach ($result as $project) {
    $components = unserialize($project->components);
    foreach ($components as $delta => $component) {
      $record = array(
        'node',
        'project',
        0,
        $project->nid,
        $project->vid,
        LANGUAGE_NONE,
        $delta,
        $component,
        NULL
      );
      $insertQueryData->values($record);
      $revisions = db_query('SELECT vid FROM {node_revision} WHERE nid = :nid', array(':nid' => $project->nid));
      foreach ($revisions as $revision) {
        // Swap out the vid for each revision.
        $record[4] = $revision->vid;
        $insertQueryRevision->values($record);
      }
    }
    $sandbox['progress']++;
    $sandbox['current_nid'] = $project->nid;
  }
  $insertQueryData->execute();
  $insertQueryRevision->execute();

  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : ($sandbox['progress'] / $sandbox['max']);
  // Cache clearing is handled in the next update.
}

/**
 * Move {project_issue_projects}.issues into field_project_has_issue_queue field.
 */
function project_issue_update_7002() {
  if (!db_table_exists('project_issue_projects')) {
    return t('No legacy data detected, skipping this update.');
  }
  // We are using bare queries here for speed reasons.

  $query = db_select('project_issue_projects', 'p');
  $query->innerJoin('node', 'n', 'p.nid = n.nid');
  $query->addExpression(':entity_type', 'entity_type', array(':entity_type' => 'node'));
  $query->addExpression(':bundle', 'bundle', array(':bundle' => 'project_issue'));
  $query->addExpression(':deleted', 'deleted', array(':deleted' => 0));
  $query->addField('p', 'nid', 'entity_id');
  $query->addField('n', 'vid', 'revision_id');
  $query->addExpression(':language', 'language', array(':language' => LANGUAGE_NONE));
  $query->addExpression(':delta', 'delta', array(':delta' => 0));
  $query->addField('p', 'issues', 'field_project_has_issue_queue_value');

  db_insert('field_data_field_project_has_issue_queue')
    ->from($query)
    ->execute();

  $query = db_select('project_issue_projects', 'p');
  $query->innerJoin('node_revision', 'n', 'p.nid = n.nid');
  $query->addExpression(':entity_type', 'entity_type', array(':entity_type' => 'node'));
  $query->addExpression(':bundle', 'bundle', array(':bundle' => 'project_issue'));
  $query->addExpression(':deleted', 'deleted', array(':deleted' => 0));
  $query->addField('p', 'nid', 'entity_id');
  $query->addField('n', 'vid', 'revision_id');
  $query->addExpression(':language', 'language', array(':language' => LANGUAGE_NONE));
  $query->addExpression(':delta', 'delta', array(':delta' => 0));
  $query->addField('p', 'issues', 'field_project_has_issue_queue_value');

  db_insert('field_revision_field_project_has_issue_queue')
    ->from($query)
    ->execute();

  // Since we have manually injected data, we need to explicitly clear the field cache.
  field_cache_clear();
}

/**
 * Migrate comment_upload data for project issues.
 */
function project_issue_update_7003(&$sandbox) {
  $t = get_t();
  // We are only converting the files to Drupal 7 format here.
  // Attaching them is done later by the migration code, since they will be
  // attached to revisions instead of comments from here on out.
  // This code was heavily based on system_update_7061().
  // It is also based on support_update_7002() from support.install, another
  // comment_upload migration routine.

  if (!db_table_exists('comment_upload')) {
    return $t('No legacy data detected, skipping this update.');
  }

  if (!isset($sandbox['progress'])) {
    // Initialize batch update information.
    $sandbox['progress'] = 0;
    $sandbox['last_cid_processed'] = -1;
    // Delete stale rows from {upload} where the fid is not in the {files} table.
    db_delete('comment_upload')->notExists(db_select('files', 'f')->fields('f', array('fid'))->where('f.fid = {comment_upload}.fid'))->execute();
    $sandbox['max'] = db_query("SELECT COUNT(DISTINCT u.cid) FROM {comment_upload} u INNER JOIN {node} n ON u.nid = n.nid WHERE n.type = 'project_issue'")->fetchField();
  }

  $limit = variable_get('upload_update_batch_size', 1000);

  // Determine cids for this batch.
  // Process all files attached to a given comment during the same batch.
  // This prevents accidentally skipping files because we hit 1000 mid-comment.
  $cids = db_query_range("SELECT DISTINCT u.cid FROM {comment_upload} u INNER JOIN {node} n ON u.nid = n.nid WHERE n.type = 'project_issue' AND u.cid > :lastcid ORDER BY cid", 0, $limit, array(':lastcid' => $sandbox['last_cid_processed']))
    ->fetchCol();

  // Retrieve information on all the files attached to these comments.
  if (!empty($cids)) {
    $files = array();
    $result = db_query('SELECT c.fid, c.nid, c.cid, c.description, c.list, c.weight FROM {comment_upload} c WHERE c.cid IN (:cids) ORDER BY c.cid, c.weight, c.fid', array(':cids' => $cids));
    foreach ($result as $record) {
      $cid = max($cid, $record->cid);
      // For each uploaded file, retrieve the corresponding data from the old
      // files table (since comment_upload doesn't know about the new entry in the
      // file_managed table).
      $file = db_select('files', 'f')
        ->fields('f', array('fid', 'uid', 'filename', 'filepath', 'filemime', 'filesize', 'status', 'timestamp'))
        ->condition('f.fid', $record->fid)
        ->execute()
        ->fetchAssoc();
      if (!$file) {
        continue;
      }

      // Add in the file information from the upload table.
      $file['description'] = $record->description;
      $file['display'] = $record->list;

      $files[] = $file;
    }
    // Update sandbox count based on cids, not fids!
    // We have to do it as a group because we don't actually loop over comments
    // anywhere.
    $sandbox['progress'] += count($cids);
    $sandbox['last_cid_processed'] = $cid;

    // Add the files to {file_managed}.
    $basename = variable_get('file_directory_path', conf_path() . '/files');
    $scheme = file_default_scheme() . '://';
    foreach ($files as $file) {
      // We will convert filepaths to uri using the default scheme
      // and stripping off the existing file directory path.
      $file['uri'] = $scheme . preg_replace('#' . preg_quote($basename, '#') . '#', '', $file['filepath'], 1);
      $file['uri'] = file_stream_wrapper_uri_normalize($file['uri']);
      unset($file['filepath']);
      // Insert into the file_managed table.
      db_merge('file_managed')
        ->key(array(
          'fid' => $file['fid'],
        ))
        ->fields(array(
          'uid' => $file['uid'],
          'filename' => $file['filename'],
          'uri' => $file['uri'],
          'filemime' => $file['filemime'],
          'filesize' => $file['filesize'],
          'status' => $file['status'],
          'timestamp' => $file['timestamp'],
        ))
        ->execute();
    }
  }

  if ($sandbox['progress'] == $sandbox['max']) {
    return $t('Comment Upload data associated with Project issues have been converted into D7 files for further processing.');
  }
  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : ($sandbox['progress'] / $sandbox['max']);
}

/**
 * Update the project_issue_cockpit_categories variable.
 */
function project_issue_update_7004() {
  $old = variable_get('project_issue_cockpit_categories', array('All' => 'All', 'bug' => 'bug'));
  $old = array_filter($old);
  $new = array();
  foreach ($old as $category) {
    switch ($category) {
      case 'All':
        $new['All'] = 'All';
        break;
      case 'bug':
        $new[1] = 1; // Bug reports
        break;
      case 'task':
        $new[2] = 2; // Tasks
        break;
      case 'feature':
        $new[3] = 3; // Feature requests
        break;
      case 'support':
        $new[4] = 4; // Support requests
        break;
    }
  }
  variable_set('project_issue_cockpit_categories', $new);
}

/**
 * Install the notification settings tables if they are missing.
 */
function project_issue_update_7005() {
  $schema['project_issue_notification_global'] = array(
    'description' => 'Stores global issue notification settings per user.',
    'fields' => array(
      'uid' => array(
        'description' => 'The {users}.uid for the user.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'level' => array(
        'description' => 'The global default notification setting level. 0 = None, 1 = Flagged/Own, 2 = All.',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0, // PROJECT_ISSUE_NOTIFICATION_NONE
      ),
      'mail_body' => array(
        'description' => 'User preference for the body of notification e-mails (e.g. full history vs. only new content).',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0, // PROJECT_ISSUE_MAIL_BODY_FULL_HISTORY
      ),
      'mail_subject_project' => array(
        'description' => 'Defines if the subject of notification e-mails includes the project name.',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ),
      'mail_subject_category' => array(
        'description' => 'Defines if the subject of notification e-mails includes the issue category (bug, feature, etc).',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ),
    ),
    'primary key' => array('uid'),
    'indexes' => array(
      'level' => array('level'),
    ),
  );

  $schema['project_issue_notification_project'] = array(
    'description' => 'Table keeping track of per-project issue notification settings for each user.',
    'fields' => array(
      'nid' => array(
        'description' => 'The {node}.nid of the project which the user wants issue notification emails for.',
        'type' => 'int',
        'unsigned' => 1,
        'not null' => TRUE,
        'default' => 0,
      ),
      'uid' => array(
        'description' => 'Foreign key: The {users}.uid for this subscriber.',
        'type' => 'int',
        'unsigned' => 1,
        'not null' => TRUE,
        'default' => 0,
      ),
      'level' => array(
        'description' => 'The notification level for the project. Possible values are: 1 = notify for own/flagged issues; 2 = notify for all issues.',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => 1,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('uid', 'nid'),
    'indexes' => array(
      'nid_level' => array('nid', 'level'),
    ),
  );

  if (!db_table_exists('project_issue_notification_global')) {
    db_create_table('project_issue_notification_global', $schema['project_issue_notification_global']);
  }
  if (!db_table_exists('project_issue_notification_project')) {
    db_create_table('project_issue_notification_project', $schema['project_issue_notification_project']);
  }
}

/**
 * Ensure the views are reverted to code.
 */
function project_issue_update_7006() {
  ctools_include('object-cache');
  foreach (array('project_issue_all_projects', 'project_issue_project', 'project_issue_search_all', 'project_issue_search_project', 'project_issue_user_issues', 'project_issue_user_projects') as $viewname) {
    $view = views_get_view($viewname);
    if ($view->type == t('Overridden')) {
      // Revert the view.
      $view->delete();
      // Clear its cache.
      ctools_object_cache_clear('view', $view->name);
    }
  }
}

/**
 * Fix filters from D6.
 */
function project_issue_update_7007() {
  if (!db_table_exists('d6_upgrade_filter')) {
    return;
  }

  try {
    $query = db_select('d6_upgrade_filter')
      ->fields('d6_upgrade_filter', array('format', 'weight'))
      ->condition('module', 'project_issue')
      ->condition('delta', 0)
      ->distinct();

    $settings = array();

    foreach ($query->execute() as $record) {
      db_insert('filter')
        ->fields(array(
          'format' => $record->format,
          'module' => 'project_issue',
          'name' => 'filter_project_issue_link',
          'weight' => $record->weight,
          'settings' => serialize($settings),
          'status' => 1,
        ))
        ->execute();
    }

    db_delete('d6_upgrade_filter')
      ->condition('module', 'project_issue')
      ->condition('delta', 0)
      ->execute();
  }
  catch (Exception $e) {
    // If the user has already updated things by hand, we can just skip
    // the update anyway, so we don't need to do anything....
  }
}

/**
 * Add related issues and parent issue fields to our default node type.
 */
function project_issue_update_7008() {
  // Parent.
  $field = array(
    'translatable' => '0',
    'settings' => array(
      'target_type' => 'node',
      'handler' => 'issues',
      'handler_settings' => array(
        'target_bundles' => array(),
        'sort' => array(
          'type' => 'none',
        ),
      ),
    ),
    'field_name' => 'field_issue_parent',
    'type' => 'entityreference',
    'active' => '1',
    'locked' => '0',
    'cardinality' => '1',
  );
  if (!field_info_field('field_issue_parent')) {
    field_create_field($field);
  }

  $instance = array(
    'label' => 'Parent issue',
    'widget' => array(
      'weight' => 31,
      'type' => 'entityreference_autocomplete',
      'active' => 1,
      'settings' => array(
        'match_operator' => 'CONTAINS',
        'size' => '60',
        'path' => '',
      ),
    ),
    'settings' => array(
      'user_register_form' => FALSE,
    ),
    'display' => array(
      'default' => array(
        'label' => 'above',
        'type' => 'issue_id',
        'weight' => 6,
        'settings' => array(),
      ),
      'teaser' => array(
        'type' => 'hidden',
        'label' => 'above',
        'settings' => array(),
        'weight' => 0,
      ),
      'issuemetadata' => array(
        'type' => 'hidden',
        'label' => 'above',
        'settings' => array(),
        'weight' => 0,
      ),
    ),
    'required' => 0,
    'description' => '',
    'default_value' => NULL,
    'field_name' => 'field_issue_parent',
    'entity_type' => 'node',
    'bundle' => 'project_issue',
  );
  if (!field_info_instance('node', 'field_issue_parent', 'project_issue')) {
    field_create_instance($instance);
  }

  // Related.
  $field = array(
    'translatable' => '0',
    'settings' => array(
      'target_type' => 'node',
      'handler' => 'issues',
      'handler_settings' => array(
        'target_bundles' => array(),
        'sort' => array(
          'type' => 'none',
        ),
      ),
    ),
    'field_name' => 'field_issue_related',
    'type' => 'entityreference',
    'active' => '1',
    'locked' => '0',
    'cardinality' => FIELD_CARDINALITY_UNLIMITED,
  );
  if (!field_info_field('field_issue_related')) {
    field_create_field($field);
  }

  $instance = array(
    'label' => 'Related issues',
    'widget' => array(
      'weight' => 32,
      'type' => 'entityreference_autocomplete',
      'active' => 1,
      'settings' => array(
        'match_operator' => 'CONTAINS',
        'size' => '60',
        'path' => '',
      ),
    ),
    'settings' => array(
      'user_register_form' => FALSE,
    ),
    'display' => array(
      'default' => array(
        'label' => 'above',
        'type' => 'issue_id',
        'weight' => 7,
        'settings' => array(),
      ),
      'teaser' => array(
        'type' => 'hidden',
        'label' => 'above',
        'settings' => array(),
        'weight' => 0,
      ),
      'issuemetadata' => array(
        'type' => 'hidden',
        'label' => 'above',
        'settings' => array(),
        'weight' => 0,
      ),
    ),
    'required' => 0,
    'description' => '',
    'default_value' => NULL,
    'field_name' => 'field_issue_related',
    'entity_type' => 'node',
    'bundle' => 'project_issue',
  );
  if (!field_info_instance('node', 'field_issue_related', 'project_issue')) {
    field_create_instance($instance);
  }
}

/**
 * Configure issue instance settings for the 'nodechanges' view mode.
 */
function project_issue_update_7009() {
  // Define the display settings for each field on the project_issue bundle.
  $fields = array(
    'body' => array(
      'module' => 'text',
      'type' => 'text_default',
      'weight' => '40',
    ),
    'field_issue_status' => array(
      'module' => 'list',
      'type' => 'list_default',
      'weight' => '6',
    ),
    'field_issue_priority' => array(
      'module' => 'list',
      'type' => 'list_default',
      'weight' => '5',
    ),
    'field_issue_category' => array(
      'module' => 'list',
      'type' => 'list_default',
      'weight' => '4',
    ),
    'field_issue_component' => array(
      'module' => 'list',
      'type' => 'list_default',
      'weight' => '2',
    ),
    'field_issue_assigned' => array(
      'module' => 'entityreference',
      'settings' => array(
        'link' => TRUE,
      ),
      'type' => 'entityreference_label',
      'weight' => 3,
    ),
    'field_project' => array(
      'module' => 'entityreference',
      'settings' => array(
        'link' => FALSE,
      ),
      'type' => 'entityreference_label',
      'weight' => 0,
    ),
    'field_issue_files' => array(
      'module' => 'file',
      'type' => 'file_default',
      'weight' => 50,
    ),
    'field_issue_parent' => array(
      'type' => 'issue_id',
      'weight' => 31,
    ),
    'field_issue_related' => array(
      'type' => 'issue_id',
      'weight' => 32,
    ),
  );

  foreach ($fields as $field_name => $display_settings) {
    $instance = field_info_instance('node', $field_name, 'project_issue');
    $nodechanges_display = $display_settings + $instance['display']['nodechanges'];
    $nodechanges_display['label'] = 'inline';
    $instance['display']['nodechanges'] = $nodechanges_display;
    field_update_instance($instance);
  }
}

/**
 * Set up project issue 'default component' field.
 */
function project_issue_update_7011() {
  $t = get_t();

  // Set up project-issue specific field for 'default component'.
  $default_component = array(
    'type' => 'list_text',
    'field_name' => 'field_project_default_component',
    'label' => $t('Default component'),
    'cardinality' => 1,
    'settings' => array(
      'allowed_values_function' => 'project_issue_default_component_allowed_values',
    ),
  );
  if (!field_info_field('field_project_default_component')) {
    field_create_field($default_component);
  }

  // Add field to our known 'project' node types
  $bundles = project_project_node_types();

  foreach ($bundles as $bundle) {
  $default_component_instance = array(
      'bundle' => $bundle,
      'description' => $t('Used to set the initial default component for new project issues.'),
      'display' => array(
        'default' => array(
          'label' => 'above',
          'type' => 'hidden',
          'settings' => array(),
          'weight' => 6,
        ),
        'teaser' => array(
          'type' => 'hidden',
          'label' => 'above',
          'settings' => array(),
          'weight' => 0,
        ),
      ),
      'entity_type' => 'node',
      'field_name' => 'field_project_default_component',
      'label' => $t('Default component'),
      'widget' => array(
        'weight' => '0',
        'settings' => array(
          'display_label' => TRUE,
        ),
      ),
      'required' => FALSE,
      'default_value' => array(0),
    );
    if (!field_info_instance('node', 'field_project_default_component', $bundle)) {
      field_create_instance($default_component_instance);
    }
  }
}

/**
 * Migrate D6 project issue 'default component' values to the new project_issue_default_component field.
 */
function project_issue_update_7012(&$sandbox) {
  $t = get_t();
  if (!isset($sandbox['progress'])) {
    // Check if we need to run at all.
    if (!db_table_exists('project_issue_projects')) {
      return $t('No legacy data detected, skipping this update.');
    }
    $sandbox['progress'] = 0;
    $sandbox['current_nid'] = 0;
    $sandbox['max'] = db_query("SELECT COUNT(DISTINCT p.nid) FROM {project_issue_projects} p WHERE p.default_component != ''")->fetchField();
  }

  // Retrieve all projects which have a default component set
  $query = db_select('project_issue_projects', 'p');
  $result = $query
    ->fields('p', array('nid', 'default_component'))
    ->condition('p.default_component', '', '!=')
    ->condition('p.nid', $sandbox['current_nid'], '>')
    ->orderBy('p.nid', 'ASC')
    ->range(0, 100)
    ->execute();

  // Set up queries for bulk inserting data into the field.
  $insertQueryData = db_insert('field_data_field_project_default_component')
    ->fields(array('entity_type', 'bundle', 'deleted', 'entity_id', 'revision_id', 'language', 'delta', 'field_project_default_component_value'));
  $insertQueryRevision = db_insert('field_revision_field_project_default_component')
    ->fields(array('entity_type', 'bundle', 'deleted', 'entity_id', 'revision_id', 'language', 'delta', 'field_project_default_component_value'));

  // Loop over projects, populating our bulk insert data.
  foreach ($result as $record) {
    $project = node_load($record->nid);
    if (!empty($project) && empty($project->field_project_default_component)) {
      $record = array(
        'node',
        $project->type,
        0,
        $project->nid,
        $project->vid,
        LANGUAGE_NONE,
        0,
        $record->default_component,
      );
      $insertQueryData->values($record);

      $revisions = db_query('SELECT vid FROM {node_revision} WHERE nid = :nid', array(':nid' => $project->nid));
      foreach ($revisions as $revision) {
        // Swap out the vid for each revision.
        $record[4] = $revision->vid;
        $insertQueryRevision->values($record);
      }
    }
    $sandbox['progress']++;
    $sandbox['current_nid'] = $project->nid;
  }
  $insertQueryData->execute();
  $insertQueryRevision->execute();

  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : ($sandbox['progress'] / $sandbox['max']);
}

/**
 * Rename and turn off summary for body field.
 */
function project_issue_update_7013() {
  $instance = field_read_instance('node', 'body', 'project_issue');
  $instance['settings']['display_summary'] = FALSE;
  $instance['label'] = 'Issue summary';
  field_update_instance($instance);
}

/**
 * Set up project issue 'submission guidelines' field.
 */
function project_issue_update_7014() {
  $t = get_t();

  // Set up project-issue specific field for 'submission guidelines'.
  $submission_guidelines = array(
    'type' => 'text_long',
    'field_name' => 'field_project_issue_guidelines',
    'label' => $t('Submission guidelines'),
    'cardinality' => 1,
  );
  if (!field_info_field('field_project_issue_guidelines')) {
    field_create_field($submission_guidelines);
  }

  // Add field to our known 'project' node types
  $bundles = project_project_node_types();

  foreach ($bundles as $bundle) {
  $submission_guidelines_instance = array(
      'bundle' => $bundle,
      'display' => array(
        'default' => array(
          'label' => 'above',
          'type' => 'hidden',
          'settings' => array(),
          'weight' => 8,
        ),
        'teaser' => array(
          'type' => 'hidden',
          'label' => 'above',
          'settings' => array(),
          'weight' => 0,
        ),
      ),
      'entity_type' => 'node',
      'field_name' => 'field_project_issue_guidelines',
      'label' => $t('Submission guidelines'),
      'widget' => array(
        'weight' => '2',
        'settings' => array(
          'display_label' => TRUE,
        ),
      ),
      'settings' => array(
        'text_processing' => 1,
      ),
      'required' => FALSE,
    );
    if (!field_info_instance('node', 'field_project_issue_guidelines', $bundle)) {
      field_create_instance($submission_guidelines_instance);
    }
  }
}

/**
 * Migrate D6 project issue 'submission guidelines' values to the new project_issue_guidelines field.
 */
function project_issue_update_7015(&$sandbox) {
  $t = get_t();
  if (!isset($sandbox['progress'])) {
    // Check if we need to run at all.
    if (!db_table_exists('project_issue_projects')) {
      return $t('No legacy data detected, skipping this update.');
    }
    $sandbox['progress'] = 0;
    $sandbox['current_nid'] = 0;
    $sandbox['max'] = db_query("SELECT COUNT(DISTINCT p.nid) FROM {project_issue_projects} p WHERE p.help != '' AND p.help IS NOT NULL")->fetchField();
  }

  // Retrieve all projects which have a default component set
  $query = db_select('project_issue_projects', 'p');
  $result = $query
    ->fields('p', array('nid', 'help'))
    ->condition('p.help', '', '!=')
    ->isNotNull('p.help')
    ->condition('p.nid', $sandbox['current_nid'], '>')
    ->orderBy('p.nid', 'ASC')
    ->range(0, 100)
    ->execute();

  // Set up queries for bulk inserting data into the field.
  $insertQueryData = db_insert('field_data_field_project_issue_guidelines')
    ->fields(array('entity_type', 'bundle', 'deleted', 'entity_id', 'revision_id', 'language', 'delta', 'field_project_issue_guidelines_value'));
  $insertQueryRevision = db_insert('field_revision_field_project_issue_guidelines')
    ->fields(array('entity_type', 'bundle', 'deleted', 'entity_id', 'revision_id', 'language', 'delta', 'field_project_issue_guidelines_value'));

  // Loop over projects, populating our bulk insert data.
  foreach ($result as $record) {
    $project = node_load($record->nid);
    if (!empty($project) && empty($project->field_project_issue_guidelines)) {
      $record = array(
        'node',
        $project->type,
        0,
        $project->nid,
        $project->vid,
        LANGUAGE_NONE,
        0,
        $record->help,
      );
      $insertQueryData->values($record);

      $revisions = db_query('SELECT vid FROM {node_revision} WHERE nid = :nid', array(':nid' => $project->nid));
      foreach ($revisions as $revision) {
        // Swap out the vid for each revision.
        $record[4] = $revision->vid;
        $insertQueryRevision->values($record);
      }
    }
    $sandbox['progress']++;
    $sandbox['current_nid'] = $project->nid;
  }
  $insertQueryData->execute();
  $insertQueryRevision->execute();

  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : ($sandbox['progress'] / $sandbox['max']);
}

/**
 * Create a queue for managing and sending issue update notifications.
 */
function project_issue_update_7016() {
  $queue = DrupalQueue::get('project_issue_notifications');
  $queue->createQueue();
}

/**
 * Update 'Submission guidelines' field instances to use text processing.
 */
function project_issue_update_7017() {
  // Update field instance for all our known 'project' node types.
  foreach (project_project_node_types() as $bundle) {
    if ($submission_guidelines_instance = field_read_instance('node', 'field_project_issue_guidelines', $bundle)) {
      $submission_guidelines_instance['settings']['text_processing'] = 1;
      field_update_instance($submission_guidelines_instance);
    }
  }
}

/**
 * Update the issue node type to use our EntityReference selection handler.
 */
function project_issue_update_7018() {
  $issue_reference_fields = array(
    'field_issue_parent',
    'field_issue_related',
  );
  foreach ($issue_reference_fields as $field_name) {
    if (($field_definition = field_read_field($field_name))) {
      $field_definition['settings']['handler'] = 'issues';
      $field_definition['settings']['handler_settings'] = array(
        'target_bundles' => array(),
        'sort' => array(
          'type' => 'none',
        ),
      );
      field_update_field($field_definition);
    }
  }
}

/**
 * Update the 'field_project' field with better matching and selection settings.
 */
function project_issue_update_7019() {
  foreach (project_issue_issue_node_types() as $bundle) {
    $instance = field_read_instance('node', 'field_project', $bundle);
    $instance['widget']['settings']['match_operator'] = 'STARTS_WITH';
    field_update_instance($instance);
  }

  $field = field_read_field('field_project');
  $field['settings']['handler_settings']['sort'] = array(
    'type' => 'property',
    'property' => 'title',
    'direction' => 'ASC',
  );
  field_update_field($field);
}

/**
 * Update file field for improved usability.
 */
function project_issue_update_7020() {
  foreach (project_issue_issue_node_types() as $bundle) {
    $instance = field_read_instance('node', 'field_issue_files', $bundle);
    $instance['label'] = 'Files';
    $instance['widget']['settings']['extended_file_field_collapsible'] = 1;
    field_update_instance($instance);
  }
}

/**
 * Add the 'notify_own_updates' column to the global notifications table.
 */
function project_issue_update_7021() {
  $fields['notify_own_updates'] = array(
    'description' => 'User preference for whether they want to receive notifications of their own updates.',
    'type' => 'int',
    'size' => 'tiny',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'default' => 1,
  );
  foreach ($fields as $field => $spec) {
    db_add_field('project_issue_notification_global', $field, $spec);
  }
}

/**
 * Clear the menu cache for the new issue tag autocomplete sorting.
 */
function project_issue_update_7022() {
  menu_cache_clear_all();
}
