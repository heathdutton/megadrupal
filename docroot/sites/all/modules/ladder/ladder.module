<?php

/**
 * @file
 * Displays a Ladder, which may be made up of sections, listing Lessons in each
 * section.
 */

include_once 'ladder.features.inc';


/**
 * Implements hook_menu().
 */
function ladder_menu() {
  // Redirect the old curriculum path
  $items['curriculum/%'] = array(
    'page callback' => 'ladder_page_redirect',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
  );
  return $items;
}


/**
 * Callback to support old curriculum/[uuid] path. Redirect to ladder/[uuid]
 */
function ladder_page_redirect($id) {
  drupal_goto('ladder/' . $id);
}


/**
 * Implements hook_preprocess_node().
 */
function ladder_preprocess_node(&$vars) {
  if ($vars['type'] == 'ladder') {
    drupal_add_css(drupal_get_path('module', 'ladder') . '/ladder.css');

    // Show an empty message if there are no lessons
    if (!isset($vars['content']['field_lessons']) || empty($vars['content']['field_lessons'])) {
      $vars['content']['field_lessons'] = array(
        '#markup' => t('There are no lessons in this ladder.'),
        '#weight' => 1, // Weight higher than the Overview
      );
    }
  }
}


/**
 * Implements hook_field_formatter_info().
 */
function ladder_field_formatter_info() {
  return array(
    'ladder_ladder' => array(
      'label' => t('Ladder'),
      'field types' => array('entityreference'),
    ),
  );
}


/**
 * Implements hook_field_formatter_view().
 */
function ladder_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];

  switch ($display['type']) {
    // Display a Field Collection as a ladder
    case 'ladder_ladder':
      $node = $entity;

      // Determine if the current user is a maintainer of this ladder
      if (node_access('update', $node)) {
        $is_maintainer = TRUE;
      }
      else {
        // Check if the user is a maintainer of this ladder
        $is_maintainer = FALSE;
        $maintainers = field_get_items('node', $node, 'field_ladder_maintainers');
        if (!empty($maintainers) && is_array($maintainers)) {
          foreach ($maintainers as $maintainer) {
            if ($maintainer['target_id'] == $GLOBALS['user']->uid) {
              $is_maintainer = TRUE;
              break;
            }
          }
        }
      }

      // Gather the lessons
      if ($lessons = field_get_items('node', $node, 'field_lessons')) {
        $rows = array();
        $output = '';
        foreach ($lessons as $rung_index => $lesson) {
          // Build row from lesson node.
          $lesson_node = node_load($lesson['target_id']);

          // Just in case of a bad ID
          if (!is_object($lesson_node)) continue;
          $row = array();

          $row['classes'] = array('ladder-rung');

          $row['title'] = l($lesson_node->title, 'node/' . $lesson_node->nid);
          $row['flag_complete'] = flag_create_link('lessons_complete', $lesson_node->nid);
          $flag = flag_get_flag('lessons_provisional');
          if (is_object($flag)) {
            $row['flag_provisional_status'] = $flag->is_flagged($lesson_node->nid);
          }
          if (isset($row['flag_provisional_status']) && !empty($row['flag_provisional_status'])) {
            $row['classes'][] = 'ladder-rung-provisional';
          }
          if ($is_maintainer) {
            $row['flag_provisional'] = flag_create_link('lessons_provisional', $lesson_node->nid);
          }
          $rows[] = $row;
        }

        // Generate output.
        drupal_add_css(drupal_get_path('module', 'ladder') . '/ladder.css');

        // Ladder rungs.
        foreach ($rows as $row) {
          // @todo add status based on flag.
          $output .= '<div class="ladder clearfix"><div class="' . implode(' ', $row['classes']) . '"><div class="rung-line"></div></div>';
          $output .= '<span class="title">' . $row['title'] .'</span>';
          if (isset($row['flag_complete'])) {
            $output .= '<span class="flag_complete">'. $row['flag_complete'] . '</span>';
          }
          if ($is_maintainer && isset($row['flag_provisional'])) {
            $output .= '<span class="flag_provisional">'. $row['flag_provisional'] . '</span>';
          }
          $output .= '</div>';
        }

        // Stick the markup into the element
        // Use 0 as the delta, since Lessons only has one value
        $element[0]['#markup'] = $output;
      }
      break;
  }

  return $element;
}



/**
 * Determine which ladders that the given lesson appears in.
 *
 * @param $lesson_nid
 *   Lesson Node ID
 *
 * @return array
 *   Array of Ladder node IDs, or empty if none are found.
 */
function ladder_get_ladders_for_lesson($lesson_nid) {
  $ladder_nids = array();

  // Validate input
  $lesson = node_load($lesson_nid);
  if (empty($lesson)) {
    return array();
  }

  // Query for ladder sections that contain the lesson nid
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->fieldCondition('field_lessons', 'target_id', $lesson_nid, '=');
  $ladder_nodes = $query->execute();

  foreach ($ladder_nodes['node'] as $nid => $ladder_node) {
    $ladder_nids[] = $nid;
  }

  return $ladder_nids;
}





/**
 * Determine what Lesson comes after the given one
 */
function ladder_get_next_lesson($lesson_nid, $requested_ladder_nid) {
  // Make sure both Lesson and Ladder node ID are provided
  if ($lesson_nid > 0 && $requested_ladder_nid > 0) {
    $l = ladder_get_adjacent_lessons($lesson_nid, $requested_ladder_nid);
    return $l['next'];
  }
  return NULL;
}

/**
 * Determine what Lesson comes before the given one
 */
function ladder_get_prev_lesson($lesson_nid, $requested_ladder_nid) {
  // Make sure both Lesson and Ladder node ID are provided
  if ($lesson_nid > 0 && $requested_ladder_nid > 0) {
    $l = ladder_get_adjacent_lessons($lesson_nid, $requested_ladder_nid);
    return $l['prev'];
  }
  return NULL;
}


/**
 * Find the lessons next to the given one, both before and after
 */
function ladder_get_adjacent_lessons($lesson_nid, $requested_ladder_nid = 0) {
  $lesson = node_load($lesson_nid);
  if (empty($lesson)) {
    return NULL;
  }

  // Make an array of ladder node IDs to check
  if ($requested_ladder_nid > 0) {
    $ladders = array($requested_ladder_nid);
  }
  else {
    $ladders = ladder_get_ladders_for_lesson($lesson_nid);
  }

  // Loop over the ladders and find adjacent lessons for each
  $adjacent_lessons = array();
  foreach ($ladders as $ladder_nid) {
    // Start by assuming that there are no adjacent lessons
    $adjacent_lessons[$ladder_nid]['next'] = 0;
    $adjacent_lessons[$ladder_nid]['prev'] = 0;

    // Get a list of lessons, then loop over to find the one we want
    $lessons = _ladder_lessons($ladder_nid);
    foreach ($lessons as $index => $lnid) {
      if ($lnid == $lesson_nid) {
        // See if there's a lesson after this one
        $next_lesson_nid = $lessons[$index - 1];
        if ($next_lesson_nid > 0) {
          $adjacent_lessons[$ladder_nid]['next'] = $next_lesson_nid;
        }

        // See if there's a lesson before this one
        $prev_lesson_nid = $lessons[$index + 1];
        if ($prev_lesson_nid > 0) {
          $adjacent_lessons[$ladder_nid]['prev'] = $prev_lesson_nid;
        }
        // Done with this loop
        break;
      }
    }
  }

  // If a specific Ladder was requested, return the next Lesson for that Ladder
  if ($requested_ladder_nid > 0) {
    return $adjacent_lessons[$requested_ladder_nid];
  }
  else {
    // No Ladder specific, so return them all
    return $adjacent_lessons;
  }
}

/**
 * Return an array of the node IDs of the Lessons that appear in the given Ladder
 */
function _ladder_lessons($ladder_nid) {
  $ladder_node = node_load($ladder_nid);
  $lessons_value = field_get_items('node', $ladder_node, 'field_lessons');
  $lessons = array();
  foreach ($lessons_value as $l) {
    $lessons[] = $l['target_id'];
  }
  return $lessons;
}
