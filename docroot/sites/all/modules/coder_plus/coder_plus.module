<?php

 /**
 * @file
 * This file is the main module file for cyclometric complexity code and
 * functionality.
 */

/**
 * Implements hook_help().
 */
function coder_plus_help($path, $arg) {
  switch ($path) {
    case 'admin/help#coder_plus_photo':
      $output = '<p>' . t('The SN Coder Plus module to check cyclomatic complexity') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_permission().
 */
function coder_plus_permission() {
  return array(
      'administer coder_plus' => array(
          'title' => t('Administer SN Coder Plus'),
      ),
  );
}

/**
 * Implements hook_menu().
 */
function coder_plus_menu() {
  $items = array();

  $items['admin/config/system/check-complexity'] = array(
      'title' => 'Check Cyclomatic Complexity',
      'description' => 'Check Cyclomatic Complexity for different modules.',
      'page callback' => 'coder_plus_check_complexity_for_modules',
      'access arguments' => array('administer coder_plus'),
  );

  $items['admin/config/system/configure-threshold'] = array(
      'title' => 'Cyclomatic Complexity Threshold',
      'description' => 'Cyclometric Complexity Threshold settings.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('coder_plus_admin_settings_threshold_form'),
      'access arguments' => array('administer coder_plus'),
      'file' => 'coder_plus_threshold.admin.inc',
  );

  return $items;
}

/**
 * Function to display cyclometric complexity form.
 *
 * @return array
 *   Theme data in array format.
 */
function coder_plus_check_complexity_for_modules() {
  $build['search_form'] = drupal_get_form('coder_plus_modules_selection_form');
  if (isset($_POST) && !empty($_POST)) {
    $build['search_results'] = coder_plus_module_complexity($_POST);
  }

  return theme('coder_plus_coder_result', array('build' => $build));
}

/**
 * Implements hook_theme().
 */
function coder_plus_theme() {
  return array(
      'coder_plus_modules_selection_form' => array(
          'render element' => 'form',
          'template' => 'coder-plus-modules-selection-form',
      ),
      'coder_plus_coder_result' => array(
          'variables' => array('build' => NULL),
          'template' => 'coder-plus-coder-result',
      ),
      'coder_plus_review_table_cols' => array(
          'render element' => 'form',
      ),
  );
}

/**
 * Implements hook_form().
 */
function coder_plus_modules_selection_form($node, &$form_state) {
  $form = array();
  // Get the modules.
  $sql = "SELECT name, filename, type, status FROM {system} WHERE type='module' ORDER BY weight ASC, filename ASC";
  $result = db_query($sql);

  foreach ($result as $system) {
    $system_links[$system->name] = $system->name;
  }
  asort($system_links);
  $form['coder_what'] = array(
      '#type' => 'fieldset',
      '#title' => t('What to review'),
      '#collapsible' => TRUE,
      '#collapsed' => isset($form_state['storage']) ? TRUE : FALSE,
      'checkboxes' => array(
          '#theme' => 'coder_plus_review_table_cols',
          '#cols' => 2,
      ),
  );

  foreach ($system_links as $key => $value) {
    $form['coder_what']['checkboxes']["coder_modules-$value"] = array(
        '#type' => 'checkbox',
        '#title' => t('%title', array('%title' => $value)),
        '#default' => isset($form_state['values']['modules']) ? $form_state['values']['modules'] : '',
        '#attributes' => array('class' => array('coder-active')),
    );
  }

  $form['coder_what']['actions'] = array(
      '#type' => 'actions',
      '#weight' => 300,
  );

  $form['coder_what']['actions']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Check Complexity'),
  );

  $form['#theme'] = 'coder_plus_modules_selection_form';
  return $form;
}

/**
 * Implements hook_form_submit().
 */
function coder_plus_modules_selection_form_submit($form, &$form_state) {
  $form_state['storage'] = array_search(1, $form_state['values']);
  $form_state['rebuild'] = TRUE;
}

/**
 * Function retyrns file name and functions with table complexity.
 *
 * @param array $data
 *   File data with complexity.
 *
 * @return array
 *   Table display of complexity in array format. 
 */
function coder_plus_module_complexity($data) {
  $results = array();
  module_load_include('inc', 'coder_plus', 'coder_plus_complexity_logic.admin');
  $modules = coder_plus_modules_list_for_complexity_check($data);
  if (isset($modules) && count($modules) > 0) {
    foreach ($modules as $key => $value) {
      if ($key == $value) {
        $results = _check_module_for_complexity($value);
      }
    }
  }
  $table = count($results) > 0 ? coder_plus_prepare_table_of_complexity($results) : array();

  return $table;
}

/**
 * function to get complexity based on selected file types.
 * @param string $module_name.
 * @return array of complexity result.
 */
function _check_module_for_complexity($module_name) {
  $results = array();
  $mod_path = drupal_get_path('module', $module_name);
  $dirs = file_scan_directory($mod_path, '/.*\.(inc|module|install)$/');
  foreach ($dirs as $val) {
    $results[$val->uri] = coder_plus_check_complexity($val->uri);
  }
  return $results;
}

/**
 * Function will return list of modules to check complexity.
 *
 * @param array $data
 *   Post data to check modules for complexity checking.
 *
 * @return array
 *   Array list of modules.
 */
function coder_plus_modules_list_for_complexity_check($data) {
  foreach ($data as $name => $link) {
    $pos = strpos($name, 'coder_modules-');
    if ($pos !== FALSE) {
      $module_array = explode('coder_modules-', $name);
      $module[$module_array[1]] = $module_array[1];
    }
  }

  return $module;
}

/**
 * Function to return table with complexity results.
 *
 * @param array $results
 *   Result param conating function with their complexity
 *
 * @return array
 *   Array of table data with complexity.
 */
function coder_plus_prepare_table_of_complexity($results) {
  $data_result = array();
  $table = array();
  if (isset($results) && count($results)) {
    foreach ($results as $file_name => $function_array) {
      if (count($function_array)) {
        $i = 0;
        foreach ($function_array as $function_name => $function_details) {
          $data_result[$file_name][$i]['function_name'] = $function_name;
          foreach ($function_details['count'] as $pattern => $count) {
            if ($pattern == 'conditions' || $pattern == 'loops' || $pattern == 'operator') {
              $data_result[$file_name][$i][$pattern] = $count;
            }
          }
          $data_result[$file_name][$i]['complexity'] = $function_details['complexity'];
          $data_result[$file_name][$i]['function_line'] = $function_details['function_line'];
          $data_result[$file_name][$i]['icon'] = coder_plus_get_complexity_image($data_result[$file_name][$i]['complexity']);
          $i++;
        }

        $file_name_raw = explode('/', $file_name);
        $file_name_final = end($file_name_raw);
        $table[] = theme('table', array(
            'header' => array(
                'Function Name',
                'Conditions',
                'Loops',
                'Operator',
                'Complexity',
                'Function Lines',
                'Icon',
            ),
            'rows' => $data_result[$file_name],
            'caption' => $file_name_final,
        ));
      }
    }
  }

  return $table;
}

/**
 * Returns HTML for table column element of coder_plus_admin_settings_form().
 *
 * This function themes the radio buttons and check boxes form elements that
 * might exist in a table column.
 *
 * @param array $variables
 *   An associative array containing the follwoing keys:
 *   - form: An array with the form definition elements.
 *
 * @ingroup themeable
 */
function theme_coder_plus_review_table_cols($variables) {
  if (!isset($variables['form']) || !is_array($variables['form'])) {
    return '';
  }
  $form = $variables['form'];
  $total = 0;
  $cols = isset($form['#cols']) ? $form['#cols'] : 3;
  foreach ($form as $element_id => $element) {
    if ($element_id[0] != '#') {
      ++$total;
    }
  }

  $total = (int) (($total % $cols) ? (($total + $cols - 1) / $cols) : ($total / $cols));
  $pos = 0;
  $rows = array();

  foreach ($form as $element_id => $element) {
    if ($element_id[0] != '#') {
      ++$pos;
      $row = $pos % $total;
      $col = $pos / $total;
      if (!isset($rows[$row])) {
        $rows[$row] = array();
      }
      $rows[$row][$col] = drupal_render($element);
    }
  }

  return theme('table', array('rows' => $rows, 'attributes' => array('id' => 'filter-order')));
}
