<?php
/*
 * @file
 * Part of Code Server module for Drupal by netgenius.co.uk
 * https://www.drupal.org/project/codeserver
 *
 * This .module is intended to be compatible with D6, D7 and D8.
 * See codeserver_compat.inc for version-specific code.
 */


function codeserver_config_menu() {
  $items = array();
  $path = (VERSION >= 7)? 'admin/config/development/codeserver' : 'admin/settings/codeserver/config';
  $items[$path] = array(
    'title' => 'Code Server configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('codeserver_config_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer codeserver'),
    //'description' => '',
    //'file' => '',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/*
 * Build and return the configuration form.
 */
function codeserver_config_form() {

  // Set mode for client, server or both. Exit if neither client nor server is installed.
  $mode = module_exists('codeserver_client')? 'client' : FALSE;
  $mode = module_exists('codeserver_server')? ($mode? 'both' : 'server' ) : $mode;
  if (!$mode) {
    $msg = 'Enable server and/or client module first.';
    codeserver_set_message($msg, array(), 'error');
    return;
  }

  // Make sure the compatibility include file is loaded.
  module_load_include('inc', 'codeserver', 'codeserver_compat');

  // Get $form and $form_state;
  extract( codeserver_get_form_args( func_get_args() ));

  // Get $config_info array (descriptions for each config item).
  module_load_include('inc', 'codeserver', 'codeserver_config_info');
  $config_info = codeserver_config_info();

  // Get all existing configs.
  $configs = codeserver_configs();
  ksort($configs);

  // Store original config values in the form.
  $configs_original = $configs;
  $form['configs_original'] = array(
    '#type' => 'value',
    '#value' => $configs_original,
  );

  // Get default config values.
  $default_config = codeserver_config_defaults($mode);
  //dpm($default_config, '$default_config');

  // Add a default config for a new service.
  $configs['__new'] = array();

  // Set $config_keys which determines the order of display of config items in the form.
  $config_keys = array_intersect(array_keys($config_info), array_keys($default_config));

  // Store default config values in the form.
  $form['default_config'] = array(
    '#type' => 'value',
    '#value' => $default_config,
  );

  // Define required elements.
  $required_items = array('encrypt_method', 'server', 'request_timeout');

  // Define vertical tabs group.
  $form['config_tabs'] = array(
    '#type' => 'vertical_tabs',
  );

  // Set up a template for each tab.
  $template = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'config_tabs',
  );

  // Create tabs in the form for each config.
  $form['configs'] = array_combine(array_keys($configs), array_fill(0, count($configs), $template));
  $form['configs']['#tree'] = TRUE;

  foreach ($configs as $config_id => $config) {
    if (!is_string($config_id) || !is_array($config)) {
      codeserver_set_message('Configuration is invalid', array(), 'warning');
      continue;
    }
    // Reference the tab element.
    $tab =& $form['configs'][$config_id];

    // Add defaults to current configuration.
    $config += $default_config;

    // Set tab title.
    if ($config['service_id']) {
      $tab['#title'] = ($config['service_name'])? $config['service_name'] : $config['service_id'];
    }
    else {
      $tab['#title'] = t('Add a new service');
    }

    // Build and add a form element for each config item.
    // We iterate using $config_keys to control the order of display.
    foreach ($config_keys as $key) {
      // Get the current value of this item, packing array values into a string.
      if (is_array($current_value = $config[$key])) {
        if ($key == 'options') {
          // Pack options into a string, something like: login:id=joe, login:password=secret
          $options = '';
          foreach ($current_value as $group => $items) {
            foreach ($items as $item_key => $item_value) {
              $options .= $group . ':' . $item_key . '=' . $item_value . ', ';
            }
          }
          $current_value = rtrim($options, ', ');
        }
        else {
          // Simple array, just use implode(),
          $current_value = implode(', ', $current_value);
        }
      }

      $type = gettype($current_value);
      $entry_type = is_bool($default_config[$key])? 'checkbox' : 'textfield';

      // Add descriptivie information...
      $description = $config_info[$key];
      if ($type == 'string') {
        if ($key == 'service_id') {
          if ($current_value) {
            $description .= ' ' . t('Set blank to DELETE this entry in the configuration.');
          }
        }
        elseif ($key == 'encrypt_key' || $key == 'encrypt_iv') {
          $current_value = codeserver_config_binhex('encode', $current_value);
          $description .= ' ' . codeserver_config_binhex('info')  . ' ' . t('Leave blank to generate a random value.');
        }
        elseif ($key == 'options') {
          $tvars = array('%examples' => 'login:id=joe, login:password=secret');
          $description .= ' ' . t('Multiple values separated by a comma. Examples: %examples', $tvars);
        }
        else {
          if (is_array($default_config[$key])) {
            $description .= ' ' . t('Multiple values separated by a comma, or %all for no restriction.', array('%all' => 'ALL'));
          }
        }
      }
      elseif ($key == 'require_permission' && $config['service_id']) {
        $tvars = array('%permission' => 'codeserver access ' . $config['service_id']);
        $description .= ' ' . t('Permission %permission will be used.', $tvars);
      }

      // Add an input field (or checkbox) to the current tab.
      $tab[$key] = array(
        '#title' => check_plain( str_replace('_', ' ', $key)),
        '#description' => filter_xss($description),
        '#type' => $entry_type,
        '#default_value' => $current_value,
        '#required' => !empty($config['service_id']) && in_array($key, $required_items),
      );

      // If string is long, use a text-area instead.
      if ($key == 'options' || strlen($current_value) > 40) {
        $description .= ' ' . t('Line breaks may be used.');
        $tab[$key] = array(
          '#description' => filter_xss($description),
          '#type' => 'textarea',
          '#rows' => 2,
        ) + $tab[$key];
      }
    }
  }

  $form['actions'] = array(
    'submit' => array(
      '#type' => 'submit',
      '#value' => t('Update'),
    ),
  );

  if ($mode == 'client' || $mode == 'both') {
    $form['actions']['test'] = array(
      '#id' => 'btn_test',
      '#type' => 'button',
      '#value' => t('Test'),
      '#executes_submit_callback' => TRUE,
    );
  }

  return $form;
}

// Validate.
function codeserver_config_form_validate($form, &$form_state) {
  $values =& $form_state['values'];
  $configs =& $values['configs'];

  foreach ($configs as $config_id => &$config) {
    // In service_id, replace any spaces with underscores.
    $config['service_id'] = str_replace(' ', '_', trim($config['service_id']));

    // Process encrypt_key and encrypt_iv fields.
    foreach (array('encrypt_key', 'encrypt_iv') as $key) {
      $value =& $config[$key];
      // If blank, generate a random value.
      if (!$value) {
        $value = openssl_random_pseudo_bytes(16);
      }
      elseif (strlen($value = codeserver_config_binhex('decode', $value)) != 16) {
        $element = $config_id . ': ' . $key;
        $msg = t('%element is invalid.', array('%element' => $element)) . ' ' . codeserver_config_binhex('info') ;
        // Generate an id for form_set_error().
        $id = 'configs' . '][' . $config_id . '][' . $key;
        form_set_error($id, $msg);
      }
    }
  }

  // If no errors and test requested ...
  if (!form_get_errors() && $form_state['clicked_button']['#id'] == 'btn_test') {
    $new_configs = codeserver_config_form_process($form, $form_state);
    foreach ($new_configs as $config_id => &$config) {
      if ($config['service_id']) {
        $remote = new CodeServer($config);
        $service_name = empty($config['service_name'])? $config['service_id'] : $config['service_name'];
        if ($remote->codeserver_test(123) == 123) {
          drupal_set_message(t('%service: test passed', array('%service' => $service_name)));
        }
        else {
          drupal_set_message(t('%service: test failed', array('%service' => $service_name)), 'warning');
        }
      }
    }
    // Set an error to stop any further processing.
    form_set_error('Tests');
  }
}

// Submit.
function codeserver_config_form_submit($form, &$form_state) {
  // Process.
  $configs = codeserver_config_form_process($form, $form_state);
  // Save configs.
  codeserver_configs($configs);
  drupal_set_message(t('Configuration saved.'));
}

// Pre-submit processing.
function codeserver_config_form_process($form, &$form_state) {
  $values = $form_state['values'];
  $configs = $values['configs'];
  $original_values = $values['configs_original'];
  $default_config = $values['default_config'];

  $configs_out = array();
  foreach ($configs as $config_id => $config) {
    // Add new service tab will have empty service_id if not used.
    // Blank for an existing config means delete that config.
    if (empty($config['service_id'])) {
      continue;
    }

    // Reference $configs_out.
    // We output using service_id, not config_id. This allows a config to be renamed.
    $config_out = &$configs_out[$config['service_id']];

    foreach ($config as $key => $value) {
      $value = trim($value);
      $type = gettype($default_config[$key]);
      if ($type == 'array') {
        // If not empty or the special case 'ALL'.
        if ($value && $value != 'ALL') {
          // Convert to array.
          $value = array_map('trim', explode(',', $value));

          // Further processing needed for options.
          if ($key == 'options' && $value) {
            // In $value we have something like: array('login:id=joe', 'login:password=abc');
            $options = array();
            foreach ($value as &$item) {
              list($group, $item) = explode(':', $item);
              list($item_key, $item_value) = explode('=', $item);
              $options[trim($group)][trim($item_key)] = trim($item_value);
            }
            // Set extracted options back into $value.
            $value = $options;
          }
        }
      }
      else {
        settype($value, $type);
      }
      // If value is default, remove it (except for 'server').
      if ($value === $default_config[$key] && $key != 'server') {
        unset($original_values[$config_id][$key]);
      }
      // Otherwise, add it to output.
      else {
        $config_out[$key] = $value;
      }
    }
    // Add any missing original values.
    if (!empty($original_values[$config_id])) {
      $config_out += $original_values[$config_id];
    }
  }

  return $configs_out;
}

// Provide bin2hex and hex2bin functionality for PHP < 5.4.
function codeserver_config_binhex($op = 'info', $str = NULL)  {
  if ($op == 'encode') {
    if (function_exists('bin2hex')) {
      return bin2hex($str);
    }
    else {
      // bin2hex() equivalent.
      for ($n = 0, $hex = ''; $n < strlen($str); $n++) {
        $hex .= sprintf('%02x', ord($str[$n]));
      }
      return $hex;
    }
  }
  elseif ($op == 'decode') {
    if (function_exists('hex2bin')) {
      return hex2bin($str);
    }
    else {
      // hex2bin() equivalent.
      for ($n = 0, $bin = ''; $n < strlen($str); $n += 2) {
        $bin .= chr(hexdec(substr($str, $n, 2)));
      }
      return $bin;
    }
  }
  elseif ($op == 'info') {
    return t('Must be exactly 32 hexadecimal digits.');
  }
  else {
    return FALSE;
  }
}

// Implement hook_permission().
function codeserver_config_permission() {
  return array(
    'administer codeserver' => array(
      'title' => t('Configure Code Server'),
      'restrict access' => TRUE,
    ),
  );
}

