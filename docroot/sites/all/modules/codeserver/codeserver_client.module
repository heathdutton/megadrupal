<?php

/*
 * @file
 * Part of Code Server module for Drupal by netgenius.co.uk
 * https://www.drupal.org/project/codeserver
 *
 * This .module is intended to be compatible with D6, D7 and D8.
 * See codeserver_compat.inc for version-specific code.
 */

/*
 * CodeServer class.
 */
class CodeServer {

  public $result, $config, $http_response_header;

  // Initialise - get config and instantiate packager.
  // Caller can check returned $this->config for success.
  public function __construct($config_name = 'default') {
    // Include our Drupal compatibility file.
    module_load_include('inc', 'codeserver', 'codeserver_compat');

    // Get config.
    $config = $this->config = codeserver_get_config($config_name, 'client');

    // Report and abort if config validation failed.
    if ($config == FALSE) {
      return $this->report_error('config');
    }
    // Warn if service is marked as disabled (and continue).
    // A service marked disabled *locally* is information, not error.
    elseif (!$config->service_enabled) {
      $this->report_error(sprintf('service_enabled (%s)', $config->service_id), 'warning');
    }

    // Set up a packager.
    $this->packager = new CodeServerPackager($this->config);
  }

  // Anonymous function.
  public function __call($function, $arguments) {
    $request = new StdClass;
    $request->func = $function;
    $request->args = $arguments;
    return $this->execute($request);
  }

  // Run multiple functions or PHP code using eval() on the remote system.
  public function run($code, $vars = array()) {

    // Initialise $request.
    $request = new StdClass;

    // Run multiple functions (without eval())?
    if ($code == 'functions') {
      // $vars must be an array of $key => array($function_name, $arg1, $arg2, ...);
      // e.g: 'do_something' => array('drupal_set_message', 'message', 'warning'),
      // Note, the return value from the server will be an array of results for each function.
      $request->functions = $vars;
    }
    // Run PHP code with eval(), $vars provides data.
    else {
      // Run from a file?
      if ($code == 'file') {
        // Source filename may be specified directly as $vars, or as $vars['source'];
        $source = isset($vars['source'])? $vars['source'] : strval($vars);
        if (!is_readable($source)) {
          return $this->report_error(sprintf('is_readable (%s)', $source));
        }
        // Use the file contents for $code, handling <?php tags.
        $code = '?>' . file_get_contents($source);
      }
      // $code is PHP code, $vars provides data.
      $request->code = $code;
      $request->vars = $vars;
    }

    // Execute.
    return $this->execute($request);
  }

  // Utility to report error.
  private function report_error($msg, $type = 'error') {
    return codeserver_report_error($msg, $this->config, $type);
  }

  // Execute the request.
  private function execute($request) {
    // Reference the config and check that it's valid.
    $config = $this->config;
    if (empty($config)) {
      return $this->report_error('config');
    }

    // Reference the packager.
    $packager = $this->packager;

    // Add options to the request.
    $request->options = $this->config->options;

    // Build the HTTP post...
    $options = array('http' =>
      array(
        'method'  => 'POST',
        'header'  => 'Content-type: application/x-www-form-urlencoded',
        'content' => http_build_query(array('request' => $packager->encode($request))),
        'timeout' => $config->request_timeout,
        // Prevent any redirects - they don't seem to work with POST.
        'max_redirects' => 0,
      )
    );
    // Create stream context.
    $context = stream_context_create($options);

    // Get server URL from config (e.g. 'http://mysite.com/drupal').
    $server = $config->server;
    // Make the HTTP request.
    $url = sprintf('%s/codeserver/server/%s', $server, $config->service_id);
    $time = microtime(TRUE);
    $result = file_get_contents($url, FALSE, $context);
    $time = microtime(TRUE) - $time;

    // Save the response header.
    $this->http_response_header = $http_response_header;

    // Check for connection error.
    if ($result === FALSE) {
      // Check HTTP response code if available.
      // Ref: http://www.w3.org/Protocols/rfc2616/rfc2616-sec6.html
      if (!empty($http_response_header)) {
        $http_status = $http_response_header[0];
        // Check for access denied.
        if (strpos($http_status, '403') !== FALSE) {
          return $this->report_error(sprintf('access denied (%s %s)', $server, $http_status));
        }
        else {
          return $this->report_error(sprintf('connection error (%s %s)', $server, $http_status));
        }
      }
      else {
        // If the connection timed out, report that.
        if ($time >= $config->request_timeout) {
          return $this->report_error(sprintf('connection timeout (%s)', $server));
        }
        // Else, some other problem.
        else {
          return $this->report_error(sprintf('connection failed (%s)', $server));
        }
      }
    }
    // Else, we have what appears to be a valid result.
    else {
      // Check that the content-type is correct (don't try to decode HTML!).
      // If incorrect, we have received a web-page or something not provided by a CodeServer Server.
      if (!in_array('Content-Type: x-drupal-codeserver', $http_response_header)) {
        return $this->report_error(sprintf('content (%s)', $server));
      }

      // Decode and store result.
      $this->result = $packager->decode($result);
      if (empty($this->result)) {
        // Decode failed. Error was already reported, so just exit.
        return FALSE;
      }

      // Display messages.
      if ($config->show_messages) {
        foreach ($this->result->messages as $status => $messages) {
          foreach ($messages as $message) {
            $tvars = array(
              '%remote' => '[remote] ',
              '!message' => $message,
            );
            codeserver_set_message('%remote !message', $tvars, $status);
          }
        }
      }
      // Return result.
      return $this->result->return;
    }
  }
}
