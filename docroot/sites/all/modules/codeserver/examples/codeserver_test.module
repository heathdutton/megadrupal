<?php
/*
 * @file
 * Part of Code Server module for Drupal by netgenius.co.uk
 * https://www.drupal.org/project/codeserver
 *
 * This .module is intended to be compatible with D6, D7 and D8.
 * See codeserver_compat.inc for version-specific code.
 */

function codeserver_test_menu() {
  $items = array();

  $items['codeserver/test'] = array(
    'title' => 'Code Server Test (and example use)',
    'page callback' => 'codeserver_test_page',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/*
 * CodeServer Test Page.
 * Here we use CodeServer to read the time() from the "remote" server
 * (which is really the local server).
 */

function codeserver_test_page() {
  // Uncomment the next line to reinitialise the configuration.
  //module_load_install('codeserver_test'); codeserver_test_create_config(); drupal_set_message('Initialised config');

  $html = '';

  // Instantiate CodeServer using the 'codeserver_test' configuration.
  $remote = new CodeServer('codeserver_test');

  // If config not found ...
  if (!$remote->config) {
    module_load_install('codeserver_test');
    codeserver_test_create_config();
    codeserver_set_message('Recreated initial configuration', array(), 'warning');
    $remote = new CodeServer('codeserver_test');
  }

  // Set the request timeout to 2.0 seconds. (Use a higher value for slower connections and processes).
  $remote->config->request_timeout = 2;

  // Some variables for t().
  $tvars = array(
    '%remote' => '[remote]',
    '%function' => 'phpversion()',
    '%allowed' => 'allowed_functions',
    '%codeserver_test' => 'codeserver_test',
    '%codeserver' => 'Code Server',
  );

  // Test if CodeServer is working by calling codeserver_test() on the "remote" server.
  if ($remote->codeserver_test() == codeserver_test()) {
    $msg = '%codeserver is working! The %remote error message shown here is intentional.';
    codeserver_set_message($msg, $tvars);

    // Try to run phpversion() on the server. It won't work because it is not one of the configured allowed functions.
    // The error message from the server gets displayed locally with prefix [remote].
    $version = $remote->phpversion();

    $html .= sprintf('<h3>%s</h3>', t($msg, $tvars));
    $html .= sprintf('<p>%s</p>', t('It is there because we tried to access a prohibited function %function on the server - see configuration %allowed.', $tvars));

    $html .= sprintf('<p>%s ', t('Messages for error conditions on the server side are passed back and displayed by the client with the prefix %remote.', $tvars));
    $html .= sprintf('%s</p>', t('Return and display of server-side messages helps with debugging, and can be disabled via a configuration setting.'));
  }
  else {
    $msg = '%codeserver test failed. Check the active configuration shown below.';
    codeserver_set_message($msg, $tvars, 'warning');
    $html .= sprintf('<h3>%s</h3>', t($msg, $tvars));
    $test_failed = TRUE;
  }

  // Display the active configuration (shared between client and server in this case)...
  $html .= sprintf('<h3>%s:</h3>', t('Configuration'));
  $html .= sprintf('<h4>%s:</h4>', t('Here is the active configuration named %codeserver_test', $tvars));

  // Get $config_info array.
  module_load_include('inc', 'codeserver', 'codeserver_config_info');
  $config_info = codeserver_config_info();

  // Display the config.
  $display_config = (array) $remote->config + (array) codeserver_get_config($remote->config->service_id, 'server');
  ksort($display_config);
  foreach ($display_config as $item => $value) {
    if ($item == 'encrypt_key' || $item == 'encrypt_iv') {
      $value = '[hidden]';
    }
    $html .= sprintf('<em>%s</em> = <code>%s</code> : %s<br />', $item, var_export($value, 1), t($config_info[$item]));
  }

  // Exit now if the above test failed.
  if (isset($test_failed)) {
    return $html;
  }

  $tvars = array('%ips' => 'allowed_ips', '%functions' => 'allowed_functions', '%all' => '"ALL"');
  $html .= sprintf('<br /><p>%s</p>', t('Note that both %ips and %functions may be set to the special value %all - Use with caution!', $tvars));

  $html .= sprintf('<h3>%s:</h3>', t('Instantiation examples'));
  $lines = array(
    '// ' . t('Using the default configuration.'),
    '$remote = new CodeServer();',
    '// ' . t('Using a configuration named %service2.', array('%service2' => 'service2')),
    '// ' . t('This may be a different server and/or have different settings from %default.', array('%default' => 'default')),
    '$remote2 = new CodeServer("service2");',
    '// ' . t('Using a configuration defined in a suitable array.'),
    '$remote3 = new CodeServer($config);',
  );
  $html .= sprintf('<pre>%s</pre>', implode('<br />', $lines));


  // Display the local and "remote" time...
  $html .= sprintf('<h3>%s:</h3>', t('Simple function call'));
  $html .= sprintf('<p>%s', t('Functions on the remote server can be called almost as if they were local PHP functions.'));
  $html .= sprintf(' %s:</p>', t('The syntax is simply'));
  $html .= sprintf('<code>%s</code>', '$result = $remote->function_name($arg1, $arg2, ...);');
  $html .= sprintf('<h4>%s:</h4>', t('For example'));
  $html .= sprintf('<code>%s</code>', '$node = $remote->node_load($nid, $vid, TRUE);');

  $html .= sprintf('<h4>%s:</h4>', t('A live example using %microtime', array('%microtime' => 'microtime()')));

  // Get local and remote microtime values.
  $local_time = microtime(TRUE);
  $remote_time = $remote->microtime(TRUE);
  // Calculate the time taken by the CodeServer request.
  $request_duration = round(microtime(TRUE) - $local_time, 4);

  $tvars = array('%local' => 'microtime(TRUE)', '%remote' => '$remote->microtime(TRUE)');
  $html .= sprintf('<h4>%s %s</h4>', t('Local time %local is:', $tvars), $local_time);
  $html .= sprintf('<h4>%s %s</h4>', t('Remote time %remote is:', $tvars), $remote_time);
  $html .= sprintf('<h4>%s</h4>', t('The request took @duration seconds to complete.', array('@duration' => $request_duration)));
  $html .= t('In this test configuration, the "remote" server is the same as the local server. A request to a real remote site would take a bit longer.');

  // Display the local and "remote" time...
  $html .= sprintf('<h3>%s:</h3>', t('Example of copying content from the local to remote site'));
  $lines = array(
    '// Load a node on the local site.',
    '$node = node_load($nid);',
    '// Save the node on the remote site.',
    '$remote->node_save($node);',
  );
  $html .= sprintf('<pre>%s</pre>', implode('<br />', $lines));

  /*
   * We could also do something like this:
   $node = $remote->node_load(1);
   $node->title = 'New Title';
   $remote->node_save($node);
   *
   * We would first need to include 'node_load' into the configured 'allowed_functions' on the server side.
   * We could do that with:
   codeserver_test_config_update('allowed_functions', 'node_load', TRUE);
  */

  // Multiple functions can be called in a single request, as shown below.
  // The returned result will be an array holding the return values from each function.
  $html .= sprintf('<h3>%s:</h3>', t('Calling multiple functions in a single request'));

  $functions = array(
    'check' => array('codeserver_test', 'Hello'),
    'mtime' => array('microtime', TRUE),
    1 => array('sleep', 1),
    'mtime2' => array('microtime', TRUE),
  );

  // Comments for the above.
  $tvars = array(
    '%microtime' => 'microtime(TRUE)',
    '%sleep' => 'sleep(1)',
    '%test' => "codeserver_test('Hello')",
  );
  $comments = array(
    t("Call %test.", $tvars),
    t("Call %microtime.", $tvars),
    t("Call %sleep, discarding the return value (there is no array key).", $tvars),
    t("Call %microtime again (value will be about 1 second greater).", $tvars),
  );

  $html .= sprintf('<p>%s:</p>', t('We can define an array of functions to call like this'));
  $html .= codeserver_test_print_array('functions', $functions, $comments);

  $html .= sprintf('<p>%s:</p>', t('Then we just call %call. The live result looks like this', array('%call' => '$remote->run("functions", $functions)')));
  $result = $remote->run('functions', $functions);
  $html .= sprintf('<code>%s</code>', var_export($result, 1));

  $html .= sprintf('<h3>%s:</h3>', t('Running custom PHP on the remote site'));
  $html .= sprintf('<p>%s ', t('Finally, we can provide PHP that the remote site will execute, returning the result.'));
  $html .= sprintf('%s</p>', t('This is extremely powerful, but you need to think very carefully about security.'));

  $html .= '<ol>';
  $html .= sprintf('<li>%s</li>', t('Run PHP given in a string or array of strings: %call', array('%call' => '$result = $remote->run($code, $vars);')));
  $html .= sprintf('<li>%s</li>', t('Run PHP from a local file: %call', array('%call' => '$result = $remote->run("file", $filename);')));
  $html .= sprintf('<li>%s</li>', t('Run PHP from a local file with data: %call', array('%call' => '$result = $remote->run("file", array("source" => $filename, ...));')));
  $html .= '</ol>';
  $html .= sprintf('<p>%s ', t('In the first and third cases above, the second argument to %run provides an array of variables to be made available to the running code.', array('%run' => '$remote->run()')));
  $html .= sprintf('%s</p>', t('See the following example.'));

  // Simple example.
  $html .= sprintf('<h4>%s:</h4>', t('Simple example'));
  $vars = array('a' => 1, 'b' => 2, 'c' => 3);
  $code = 'return ($a + $b) * $c';

  $lines = array(
    sprintf('$vars = %s;', var_export($vars, 1)),
    sprintf('$code = %s%s%s;', "'", $code, "'"),
    '$result = $remote->run($code, $vars);',
  );
  $html .= sprintf('<pre>%s</pre>', implode('<br />', $lines));

  // Change the next line to TRUE to enable PHP examples after very carefully considering the security implications.
  $i_am_totally_sure_about_this = FALSE;
  // Note also that load time for this page will then be slower because we will be using variable_set() and so the variable cache will be cleared.
  if (!$i_am_totally_sure_about_this) {
    extract($vars);
    $expected_result = eval($code . ';');

    $html .= sprintf('<p><b>Expected result:</b> %s</p>', $expected_result);
    $html .= sprintf('<p>%s ', t('This module includes a live PHP example, but it is disabled for security reasons.'));
    $html .= sprintf('%s</p>', t('You can enable it by editing line #@line of the file %file.', array('@line' => __LINE__ -8, '%file' => __FILE__)));
  }
  else {
    // Save existing allowed_functions configuration.
    $saved_allowed_functions = $remote->config->allowed_functions;
    if ($saved_allowed_functions != 'ALL') {
      // Enable ALL functions.
      codeserver_test_config_update('allowed_functions', 'ALL');
    }

    // Run the simple example.
    $result = $remote->run($code, $vars);
    $html .= sprintf('<p><b>Actual result:</b> $result = %s</p>', $result);

    // Restore the original configs.
    if ($saved_allowed_functions != 'ALL') {
      codeserver_test_config_update('allowed_functions', $saved_allowed_functions);
    }
  }

  return $html;
}

/*
 * Utility to update the configuration.
 * See codeserver_test.install for how the initial configuration was created.
 * Remember, configurations must match on client and server (but here they are the same anyway).
 */
function codeserver_test_config_update($key, $new_value, $append = FALSE) {
  // Load CodeServer configurations.
  $configs = variable_get('codeserver_configs', array());
  // Set new value.
  if ($append) {
    $configs['codeserver_test'][$key][] = $new_value;
  }
  else {
    $configs['codeserver_test'][$key] = $new_value;
  }
  // Save the updated configurations.
  variable_set('codeserver_configs', $configs);
}

// Utility to print a simple array as code with comments from $comments.
function codeserver_test_print_array($name, $array, $comments) {

  $html = sprintf('$%s = array(<br />', $name);
  $indent = '&nbsp&nbsp';
  $n = 0;
  foreach ($array as $key => $value) {
    if (is_array($value)) {
      $value = var_export($value, 1);
      $value = preg_replace("!  \d => !", '', $value);
      $search = array('array (', "\n", ', )', 'true');
      $replace = array('array(', ' ', ' )', 'TRUE');
      $value = str_replace($search, $replace, $value);
    }
    $html .= sprintf('%s// %s<br />', $indent, $comments[$n++]);
    if (is_string($key)) {
      $html .= sprintf("%s'%s' => %s,<br />", $indent, $key, $value);
    }
    else {
      $html .= sprintf("%s%s,<br />", $indent, $value);
    }
  }
  $html .= ');<br />';
  //return sprintf('<code>%s</code>', $html);
  return sprintf('<pre>%s</pre>', $html);
}
