<?php
function i18n_sso_menu() {
  $items['i18n_sso/%i18n_sso_token/%'] = array(
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
    'page callback' => 'i18n_sso_authenticate_token',
    'page arguments' => array(1, 2),
  );

  return $items;
}

function _i18n_sso_prepare_form(&$form) {
  $form['#submit'][] = 'i18n_sso_start_login_chain';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function i18n_sso_form_user_login_alter(&$form, &$form_state, $form_id) {
  _i18n_sso_prepare_form($form);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function i18n_sso_form_user_login_block_alter(&$form, &$form_state, $form_id) {
  _i18n_sso_prepare_form($form);
}

// Create a token and save it in the database. Return the token object.
function i18n_sso_create_token($user, $destination, $langcode) {
  $token = new stdClass();

  $token->token = drupal_get_token(REQUEST_TIME);
  $token->uid = $user->uid;
  $token->expiration = REQUEST_TIME + 900; // Good for 15 minutes
  $token->destination = $destination;
  $token->language = $langcode;

  drupal_write_record('i18n_sso_tokens', $token);

  return $token;
}

// Return a populated token object. Does not ensure token validity.
function i18n_sso_token_load($token) {
  if (!$token) return FALSE;

  $token_result = db_select('i18n_sso_tokens')
    ->fields('i18n_sso_tokens')
    ->condition('token', $token)
    ->execute()
    ->fetchObject();

  if (!$token_result) return FALSE;

  return $token_result;
}

function i18n_sso_start_login_chain(&$form, &$form_state) {
  // The user has just logged in. Create the first authentication token
  // and store their destination.

  // We expect that $user will be populated at this point. If it isn't, don't do anything.
  if (!user_is_logged_in()) {
    return;
  }

  global $user;

  // Determine the destination. Use drupal_get_destination if
  // $_GET['destination'] is present, and otherwise the form redirect.
  // If there is no form redirect, go to the user page for whatever language
  // we are currently in.
  if (isset($_GET['destination']) && $_GET['destination']) {
    $destination_base = $_GET['destination'];
  }
  elseif (isset($form_state['redirect']) && $form_state['redirect']) {
    $destination_base = $form_state['redirect'];
  }
  else {
    $destination_base = 'user';
  }

  $destination = url($destination_base, array('absolute' => TRUE));

  $first_language = i18n_sso_next_language();

  $token = i18n_sso_create_token($user, $destination, $first_language);

  // Do a drupal_goto(); $form_state['redirect'] isn't reliable enough. For
  // example, if there was a destination passed via query string, it will
  // take precedence. We've already stored it, and we don't want that anymore.
  _i18n_sso_continue($token->token, $first_language);
}

// Check token's existence and validity. If all checks out, log in the user
// and send them to the next language domain. We take $langcode to avoid
// deadlocking on languages that aren't based on URL.
function i18n_sso_authenticate_token($token, $langcode) {
  global $user;

  // Can't be plain enough.
  $langcode = check_plain($langcode);

  $valid = FALSE;

  // If they are already authenticated, send them along.
  if (user_is_logged_in()) {
    $valid = TRUE;
  }

  // Avoid stinkers trying to trick us out, including providing nonsense
  // langcodes.
  if ($valid === FALSE && $token && in_array($langcode, array_keys(language_list())) && $token->language === $langcode) {
    if ($token->expiration > (REQUEST_TIME - 900)) {
      $valid = TRUE;
    }
  }

  if ($valid === FALSE) {
    drupal_access_denied();
    drupal_exit();
  }
  else {
    // Delete the token, authenticate them, regenerate the session,
    // create a new one, and go on to the next language.

    db_delete('i18n_sso_tokens')
      ->condition('token', $token->token)
      ->execute();

    if (!user_is_logged_in()) {
      $user = user_load($token->uid);

      // Borrowed from user_login_finalize() (we don't want to invoke all the
      // hooks)
      watchdog('user', 'Session opened automatically for %name.<br />
      Token info: !token<br />
      Request time: !request_time<br />
      User: !user', array(
        '%name' => $user->name,
        '!token' => print_r($token, TRUE),
        '!request_time' => REQUEST_TIME,
        '!user' => print_r($user, TRUE),
        ));

      // Update the user table timestamp noting user has logged in.
      // This is also used to invalidate one-time login links.
      $user->login = REQUEST_TIME;
      db_update('users')->fields(array('login' => $user->login))->condition('uid', $user->uid)->execute();

      // Avoid session fixation.
      drupal_session_regenerate();
    }

    $next_language = i18n_sso_next_language($langcode);

    // Pass along the destination.
    $next_token = i18n_sso_create_token($user, $token->destination, $next_language);

    if ($next_language) {
      _i18n_sso_continue($next_token->token, $next_language);
    }
    // If we're on the last language, then go to the original destination.
    else {
      // See comment on _i18n_sso_continue();
      drupal_goto($token->destination);
    }
  }
}

function _i18n_sso_continue($token, $langcode) {
  $next_sso_url = "i18n_sso/{$token}/{$langcode}";

  // Get the language object for the langcode provided to us. url() wants this.
  $languages = language_list();
  $language = $languages[$langcode];

  // drupal_goto() calls drupal_exit(), but browsers will generally redirect
  // as soon as they receive the Location header. So, commit the session
  // now just in case. Otherwise, the user won't be logged in when they
  // come back.
  drupal_goto($next_sso_url, array('language' => $language, 'absolute' => TRUE));
}

function i18n_sso_next_language($language = NULL) {
  $language_codes = array_keys(language_list());

  if (!isset($language)) {
    // Return the first language in the array.
    return $language_codes[0];
  }
  else {
    // Where are we currently?
    $current_language_position = array_search($language, $language_codes);

    // If we're at the end, return FALSE.
    if ($current_language_position === (count($language_codes) - 1)) {
      return FALSE;
    }
    else {
      // Return the next language.
      return $language_codes[$current_language_position + 1];
    }
  }
}

function i18n_sso_cron() {
  // Clean up any expired tokens.
  db_delete('i18n_sso_tokens')
    ->condition('expiration', REQUEST_TIME, '<')
    ->execute();
}
