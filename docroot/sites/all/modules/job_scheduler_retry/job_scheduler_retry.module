<?php

/**
 * @file
 * Provides queues that can retry items until they do not want to be retried anymore
 */

/**
 * Implementing hook_menu().
 */
function job_scheduler_retry_menu() {
  $items['admin/config/system/job_scheduler_retry'] = array(
    'title' => t('Job Scheduler Retry'),
    'description' => t('Manage Job Schedule Retry Settings.'),
    'page callback' => 'job_scheduler_retry_queues',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/system/job_scheduler_retry/queues'] = array(
    'title' => t('Queues'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/config/system/job_scheduler_retry/queues/%/%'] = array(
    'title' => t('Queues'),
    'description' => t('Manage Job Schedule Retry Settings.'),
    'page callback' => 'job_scheduler_retry_queues',
    'page arguments' => array(5, 6),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/system/job_scheduler_retry/settings'] = array(
    'title' => t('Settings'),
    'description' => t('Set general job_scheduler_retry Settings.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('job_scheduler_retry_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implements hook_hook_info().
 */
function job_scheduler_retry_hook_info() {
  return array(
      'job_scheduler_retry_info' => array(
          'group' => 'job_scheduler_retry',
      ),
    );
}

/**
 * Implements hook_job_scheduler_retry_info
 *
 */
function job_scheduler_retry_job_scheduler_retry_info() {
  return array (
      "oblivion" => array (
          'title' => 'Oblivion',
          'name' => "oblivion",
          'description' => 'Job runs never',
          'retries' => 0,
          'next_queue' => 'oblivion',
          'max_jobs' => 1000,
          'crontab' => '* * * * */2011', // never
          'weight' => 100,
      ),
  );
}

/**
 * Retrieves all retry queues
 *
 */
function job_scheduler_retry_get_job_scheduler_retry_info() {
  $retry_info = &drupal_static(__FUNCTION__);
  if (NULL === $retry_info) {
    $retry_info = module_invoke_all('job_scheduler_retry_info');
    foreach ($retry_info as $retry_name => $retry) {
      $retry_info[$retry_name] += array(
          'title' => $retry_name,
          'name' => $retry_name,
          'description' => '',
          'retries' => 0,
          'next_queue' => 'oblivion',
          'max_jobs' => 1000,
          'crontab' => '* * * * */2011',
          'weight' => 99,
      );
    }
    drupal_alter('job_scheduler_retry_info', $retry_info);
    uasort($retry_info, 'drupal_sort_weight');
  }
  return $retry_info;
}

/**
 * Implements hook_job_scheduler_info
 */
function job_scheduler_retry_cron_job_scheduler_info() {
  $schedulers = array();
  $schedulers['job_scheduler_retry'] = array(
    'worker callback' => 'job_scheduler_retry_processqueue',
  );
  return $schedulers;
}

/**
 * Starts the queue with the given name
 * @param string $queuename
 */
function job_scheduler_retry_start($queuename) {
  $queues = job_scheduler_retry_get_job_scheduler_retry_info();

  $queue = $queues[$queuename];

  $job = array(
    'data' => array(
      'queuename' => $queue['name'],
      'retries' => $queue['retries'],
      'max_jobs' => $queue['max_jobs'],
      'next_queue' => $queue['next_queue'],
    ),
    /* These are job_scheduler properties */
    'type' => $queue['name'],
    'id' => 1,
    'crontab' => $queue['crontab'],
    'periodic' => TRUE
  );

  JobScheduler::get('job_scheduler_retry')->set($job);

  drupal_set_message('Started retry queue "' . $queue['name'] . '"');
}

/**
 * Stops the queue with the given name
 * @param string $queuename
 */
function job_scheduler_retry_stop($queuename) {
  $queues = job_scheduler_retry_get_job_scheduler_retry_info();

  $queue = $queues[$queuename];
  $job = array(
    'type' => $queuename,
    'id' => 1 // we always have only 1 job at a time
  );

  JobScheduler::get('job_scheduler_retry')->remove($job);

  drupal_set_message('Stopped retry queue "' . $queue['title'] . '"');
}

/**
 * Resets the queue with the given name
 * @param string $queuename
 */
function job_scheduler_retry_reset($queuename) {
  $newqueue = variable_get('job_scheduler_retry_resetqueue', '');
  /*
   * This is very fast and very brutal. It also does not reset the 'retries' attribute
   * on the data attribute, which might lead to unexpected behaviour here and there.
   */
  if (!empty($newqueue)) {
    $started = db_update('advancedqueue')
    ->fields(array('status' => -1, 'name' => $newqueue))
    ->condition('name', $queuename)
    ->condition('status', 1, '<')->execute();
    drupal_set_message ("Reset the " . $queuename . ". Processed " . $started . " Messages.");
  }
  else {
    drupal_set_message("No reset queue set");
  }
}

/**
 * Main function that loops through the items in the
 * $job_schedule_retry_queue parameter and processes them
 * This is a loop of processing jobs, inside the job_scheduler loop.
 * @param retry_queue $job_schedule_retry_queue
 */
function job_scheduler_retry_processqueue($job_schedule_retry_queue) {
  if ((is_array($job_schedule_retry_queue)) && (isset($job_schedule_retry_queue['name']) && ($job_schedule_retry_queue['name'] == 'job_scheduler_retry'))) {

    $job = $job_schedule_retry_queue['data'];

    watchdog("job_scheduler_retry_processqueue", "Going to process the " . $job['queuename'] . " queue.");
    $queue = DrupalQueue::get($job['queuename']);
    $i = 0;
    $max = $job['max_jobs'];
    /*
     * Create an array that holds items that need to be retried.
     * We can not add these items to the queue inside the loop, or they would
     * immediately be claimed again.
     */
    $newitems = array();
    while ((($i != -1) && ($i < $max)) && ($item = $queue->claimItem(120))) {
      $main_function = $item->data['callback_main_function'];
      $main_function_arguments = isset($item->data['callback_main_function_arguments']) ? $item->data['callback_main_function_arguments'] : NULL;
      $error_function = isset($item->data['callback_error_function']) ? $item->data['callback_error_function'] : FALSE;
      $success_function = isset($item->data['callback_success_function'])? $item->data['callback_success_function'] : FALSE;
      try {
        $result = call_user_func_array($main_function, $main_function_arguments);
        watchdog('job_scheduler_retry_processqueue', "Succesfully processed " . $main_function);
        try {
          if ($success_function) {
            call_user_func($success_function, $item->data, $result);
            watchdog('job_scheduler_retry_processqueue', "Succesfully processed " . $success_function);
          }
        }
        catch (Exception $e_success) {
          watchdog('job_scheduler_retry_processqueue', "Error while processing " . $success_function);
        }
      }
      catch (Exception $e_main) {
        watchdog('job_scheduler_retry_processqueue', "Error while processing " . $main_function);
        try {
          $retry = TRUE;
          if ($error_function) {
            $retry = call_user_func($error_function, $item->data, $e_main);
            watchdog('job_scheduler_retry_processqueue', "Succesfully processed " . $error_function);
          }
        }
        catch (Exception $e_error) {
          watchdog('job_scheduler_retry_processqueue', "Error while processing " . $error_function);
        }
        if ($retry) {
          if (!(isset($item->data['retries']))) {
            // First time items pass through this function their retries are not set
            $item->data['retries'] = 0;
          }
          if ($item->data['retries'] <  $job['retries']) {
            $newitems[] = $item->data;
          }
          else {
            $item->data['retries'] = 0;
            $nextqueue = DrupalQueue::get($job['next_queue']);
            $nextqueue->createItem($item->data);
          }
        }
      }
      $queue->deleteItem($item);
      $i++;
    }
    /*
     * Now we save all items that get another go at it back into the queue
     */
    if (count($newitems) > 0) {
      $currentqueue = DrupalQueue::get($job['queuename']);
      foreach ($newitems as $newitem) {
        $newitem['retries'] = $newitem['retries'] + 1;
        $currentqueue->createItem($newitem);
      }
    }
  }
}

/**
 * Implements the settings form
 * @return form
 */
function job_scheduler_retry_settings() {
  $form = array();

  $list = job_scheduler_retry_get_job_scheduler_retry_info();
  foreach ($list as $key=>$queue) {
    $queues[$key] = $queue['title'];
  }

  $form['job_scheduler_retry_resetqueue'] = array(
    '#type' => 'select',
    '#title' => t('Reset to Queue'),
    '#description' => t('The Yo! Account Number.'),
    '#options' => $queues,
    '#default_value' => variable_get('job_scheduler_retry_resetqueue', ''),
  );

  return system_settings_form($form);
}

/**
 * Page that shows the queues and their status and that allows
 * us to stop and start queues.
 * @param unknown_type $operation
 * @param unknown_type $queuename
 */
function job_scheduler_retry_queues($operation = NULL, $queuename = NULL) {

  if (isset($queuename)) {
    if (!job_scheduler_retry_isstarted($queuename)) {
      if ($operation == 'start') {
        job_scheduler_retry_start($queuename);
      }
      if ($operation == 'reset') {
        job_scheduler_retry_reset($queuename);
      }
    }
    else {
      if ($operation == 'stop') {
        job_scheduler_retry_stop($queuename);
      }
    }
  }
  $queues = job_scheduler_retry_get_job_scheduler_retry_info();
  $table = array();
  $table['header'] = array();
  $table['rows'] = array();
  $table['caption'] = t('Queues');
  $table['attributes'] = array();
  $table['colgroups'] = array();
  $table['sticky'] = FALSE;
  $table['empty'] = t('There are no queues defined.');

  $table['header'][] = array (
    'data' => t('Queues'),
  );

  $table['header'][] = array (
    'data' => t('Operation'),
  );

  // (-1 = queue, 0 = processing, 1 = successfully processed, 2 = failed)
  $table['header'][] = array (
      'data' => t('Queued'),
  );

  $table['header'][] = array (
      'data' => t('Processing'),
  );

  $table['header'][] = array (
      'data' => t('Success'),
  );

  $table['header'][] = array (
      'data' => t('Failed'),
  );

  $table['header'][] = array (
      'data' => t('Reset'),
  );

  foreach($queues as $key=>$queue) {

    if (job_scheduler_retry_isstarted($key)) {
      $nextaction = 'stop';
    }
    else {
      $nextaction = 'start';
    }

    $statusses = array (
        '-1' => 0,
        '0' => 0,
        '1' => 0,
        '2' => 0,
        );

    $allrows = array(
        'title' => $queue['title'],
        'operation' => l(ucwords($nextaction), 'admin/config/system/job_scheduler_retry/queues/' . $nextaction . '/' . $key),
    );

    $results = db_query('SELECT COUNT(aq.item_id) as item_id, aq.status from {advancedqueue} aq WHERE aq.name=:mykey GROUP BY aq.status', array(':mykey' => $key));
    while($result =  $results->fetchObject()) {
      $statusses[$result->status] = $result->item_id;
    }

    $rows = $allrows + $statusses;

    if (!job_scheduler_retry_isstarted($key)) {
      $rows['reset'] = l('Reset', 'admin/config/system/job_scheduler_retry/queues/reset/' . $key);
    }

    $table['rows'][] = array(
      'data' => $rows,
    );
  }

  return theme_table($table);

}

/**
 * Helper function that checks if a queue is currently started
 * @param string $queuename
 */
function job_scheduler_retry_isstarted($queuename) {
  $started = db_select('job_schedule', 'js')
  ->fields('js', array('name', 'type'))
  ->condition('name', 'job_scheduler_retry')
  ->condition('type', $queuename);
  $started = $started->execute()->fetchAssoc();
  return ($started !== FALSE);
}
