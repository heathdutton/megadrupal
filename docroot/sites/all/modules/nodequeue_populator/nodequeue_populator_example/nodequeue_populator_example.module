<?php
/**
 * @file
 * Nodequeue Populator Example module.
 *
 * This module provides a processor for Nodequeue Populator.
 * It the latest nodes from the front page.
 */

/**
 * Implements nodequeue_populator_processor_info().
 */
function nodequeue_populator_example_nodequeue_populator_processor_info() {
  $items = array(
    'front_page' => array(
      'title' => t('Front page'),
      'description' => t('The latest nodes from the front page.'),
      'callback' => 'nodequeue_populator_example_processor_front_page_callback',
      'settings callback' => 'nodequeue_populator_example_processor_front_page_settings_form',
    ),
  );
  return $items;
}

/**
 * Settings form for the front page processor.
 */
function nodequeue_populator_example_processor_front_page_settings_form($settings) {
  $form = array();
  $form['count'] = array(
    '#title' => t('Number of nodes to fetch'),
    '#type' => 'textfield',
    '#default_value' => isset($settings['count']) ? $settings['count'] : 10,
  );
  $form['randomize'] = array(
    '#title' => t('Randomize fetched nodes'),
    '#type' => 'checkbox',
    '#default_value' => isset($settings['randomize']) ? $settings['randomize'] : FALSE,
  );
  return $form;
}

/**
 * Callback for the front page processor.
 */
function nodequeue_populator_example_processor_front_page_callback($populator) {
  $select = db_select('node', 'n')
    ->fields('n', array('nid', 'sticky', 'created'))
    ->condition('n.promote', 1)
    ->condition('n.status', 1)
    ->orderBy('n.sticky', 'DESC')
    ->orderBy('n.created', 'DESC')
    ->extend('PagerDefault')
    ->addTag('node_access');
  if ($populator->processor_settings['count']) {
    $select->limit($populator->processor_settings['count']);
  }

  $nids = $select->execute()->fetchCol();
  if ($populator->processor_settings['randomize']) {
    shuffle($nids);
  }

  return $nids;
}
