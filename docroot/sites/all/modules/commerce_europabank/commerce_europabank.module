<?php

/**
 * @file
 * Implements Europabank payment services for use in Drupal Commerce.
 */

/**
 * Implements hook_commerce_payment_method_info().
 *
 * This hook will define the Europabank payment method.
 */
function commerce_europabank_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['europabank'] = array(
    'base' => 'commerce_europabank',
    'title' => t('Europabank'),
    'short_title' => t('Europabank'),
    'display_title' => variable_get('europabank_payment_title', t('Online Payment (Visa, Mastercard, Maestro)')),
    'description' => t('Integrates Europabank payment system'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );

  return $payment_methods;
}

/**
 * Implements hook_menu().
 */
function commerce_europabank_menu() {
  $items = array();

  $items['commerce_europabank/callback'] = array(
    'page callback' => 'commerce_europabank_callback',
    'page arguments' => array(),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['commerce_europabank/%/process'] = array(
    'page callback' => 'commerce_europabank_process_payment',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Payment method callback: settings form.
 *
 * Returns form elements for the payment method's settings form included
 * as part of the payment method's enabling action in Rules
 */
function commerce_europabank_settings_form($settings = NULL) {
  $form = array();
  $languages = language_list();

  $settings = (array) $settings + array(
    'account' => 'test',
    'Uid' => '',
    'currency' => variable_get('commerce_default_currency', 'USD'),
    'error_message' => 'An error occured while processing your payment. Please try again or contact a site administrator when this happens again.',
    'language' => '',
    'shared_secret' => '',
    'server_secret' => '',
    'proxy_url' => '',
    'provider_url' => '',
    'language_list' => array(),
    'default_language' => 'nl',
    'user_language' => '0',
  );
  // BASIC settings.
  $form['account'] = array(
    '#type' => 'radios',
    '#title' => t('Europabank account'),
    '#options' => array(
      'test' => ('Test account - for testing purposes only'),
      'prod' => ('Production account - use for processing real transactions'),
    ),
    '#default_value' => $settings['account'],
  );
  $form['Uid'] = array(
    '#type' => 'textfield',
    '#title' => t('MPI Account number'),
    '#description' => t('Your Europabank account number'),
    '#default_value' => $settings['Uid'],
  );
  $form['currency'] = array(
    '#type' => 'select',
    '#title' => t('Currency code'),
    '#description' => t('Transactions can only be processed in one of the listed currencies.'),
    '#options' => commerce_europabank_currencies(),
    '#default_value' => $settings['currency'],
  );
  $form['error_message'] = array(
    '#type' => 'textfield',
    '#title' => t('Error message'),
    '#description' => t('This message is shown to the user when something goes wrong with te transaction.'),
    '#size' => 128,
    '#default_value' => $settings['error_message'],
    '#required' => TRUE,
  );
  // SECURITY settings.
  $form['provider_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Payment provider Url ( Url mpi)'),
    '#description' => t('The url to your payment gateway. <br /> e.g. https://www.ebonline.be/test/mpi/authenticate'),
    '#default_value' => $settings['provider_url'],
  );

  $form['shared_secret'] = array(
    '#type' => 'textfield',
    '#title' => t('Client secret'),
    '#description' => t('The shared client secret.'),
    '#default_value' => $settings['shared_secret'],
  );
  $form['server_secret'] = array(
    '#type' => 'textfield',
    '#title' => t('Server secret'),
    '#description' => t('The server secret.'),
    '#default_value' => $settings['server_secret'],
  );
  $form['proxy_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Proxy Url'),
    '#description' => t('Proxy Url where your images will be passed from. <br />e.g. https://www.ebonline.be/(test/)mpi/image'),
    '#default_value' => $settings['proxy_url'],
  );

  // LANGUAGE settings.
  $form['default_language'] = array(
    '#type' => 'select',
    '#title' => t('Default language'),
    '#description' => t('The language to send to europabank.'),
    '#options' => array(
      'nl' => 'NL',
      'en' => 'EN',
      'fr' => 'fr',
    ),
    '#default_value' => $settings['default_language'],
  );
  $form['user_language'] = array(
    '#type' => 'radios',
    '#title' => t("Send current user's language to europabank"),
    '#description' => t('Currently only nl/fr/en are supported by europabank. If the user has another language, the default language (see above) will be used'),
    '#options' => array(
      '1' => ('Yes'),
      '0' => ('No'),
    ),
    '#default_value' => $settings['user_language'],
  );
  // TODO: LAYOUT settings.
  //$form['#submit'][] = 'commerce_europabank_settings_form_submit';
  return $form;
}

/**
 * Europabank only allows hashes of these fields.
 */
function commerce_europabank_hash_keys() {
  return array('Uid' , 'Orderid' , 'Amount' , 'Description');
}

/**
 * Payment method callback: redirect form.
 *
 * returns form elements that should be submitted to the redirected
 * payment service
 */
function commerce_europabank_redirect_form($form, &$form_state, $order, $payment_method) {
  // Return an error if the enabling action's settings haven't been configured.
  if (empty($payment_method['settings']['Uid'])) {
    drupal_set_message(t('Europabank is not properly configured.<br /> No Europabank Uid has been specified.'), 'error');
    return array();
  }
  // Set feedback URLs.
  $settings = array(
    'return' => url('commerce_europabank/' . $order->order_id . '/process', array('absolute' => TRUE)),
    // Specify the current payment method instance ID in the notify_url.
    'payment_method' => $payment_method['instance_id'],
  );
  return commerce_europabank_build_redirect_form($form, $form_state, $order, $payment_method['settings'] + $settings);
}

/**
 * Render the description.
 *
 * @param object $order
 *   The order.
 */
function commerce_europabank_description($order) {
  return t('Order @order_number at @store', array(
    '@order_number' => $order->order_number,
    '@store' => variable_get('site_name', url('<front>', array(
      'absolute' => TRUE,
    ))),
  ));
}

/**
 * Helper function for the redirect_form callback.
 */
function commerce_europabank_build_redirect_form($form, &$form_state, $order, $settings) {
  // Builds an Europabank payment form from an order object.
  global $user;
  $wrapper = entity_metadata_wrapper('commerce_order', $order);

  // Get financial info.
  $currency_code = $wrapper->commerce_order_total->currency_code->value();
  $amount = $wrapper->commerce_order_total->amount->value();
  $customer_name = $wrapper->commerce_customer_billing->commerce_customer_address->name_line->value();

  // Build the data array that will be translated into hidden form values.
  // NOTE: keys should be uppercase for the SHA-1 security string.
  $hash_keys = commerce_europabank_hash_keys();
  $data = array(
    // General parameters.
    'Uid' => $settings['Uid'],
    'Orderid' => $order->order_number,
    'Amount' => $amount,
    'Description' => commerce_europabank_description($order),
    'Chname' => $customer_name,
    'Chemail' => $order->mail,
    'Beneficiary' => variable_get('site_name', ''),

    // Feedback URLs.
    // We will use the feedbackurl option as an extra security measure.
    'Feedbackurl' => url('commerce_europabank/callback', array('absolute' => TRUE)),
    'Feedbacktype' => 'OFFLINE',
    'Feedbackemail' => variable_get('site_mail', ''),
    'Merchantemail' => variable_get('site_mail', ''),
    'Redirecttype' => 'INDIRECT',
    'Redirecturl' => $settings['return'],
  );

  if ($settings['user_language'] == 1) {
    global $language;
    $allowed_languages = _commerce_europabank_get_allowed_languages();
    if (in_array($language->language, $allowed_languages)) {
      $data['Chlanguage'] = $language->language;
    }
  }
  if (empty($data['Chlanguage'])) {
    $data['Chlanguage'] = $settings['default_language'];
  }

  $country = variable_get('europabank_chcountry', NULL);
  if (!empty($country)) {
    $data['Chcountry'] = $country;
  }

  // Allow modules to add or alter the data sent to Europabank before signing.
  drupal_alter('commerce_europabank_data', $data, $order, $settings);

  // Build the Europabank redirection URL.
  $url = $settings['provider_url'];
  $form['#action'] = $url;

  // Generate SHA-1 security string & add hidden parameters to form.
  $sha1_sig = '';
  $sha1suffix = $settings['shared_secret'];
  $vals = '';
  foreach ($data as $name => $value) {
    if (!empty($value)) {
      $value = trim($value);
      if (in_array($name, $hash_keys)) {
        // Build the SHA-1 string from all filled in parameters.
        $sha1_sig .= $value;
        $vals .= $name;
      }
      // Add the value as a hidden form element.
      $form[$name] = array('#type' => 'hidden', '#value' => $value);
    }
  }
  // Add shared secret to the hash.
  $sha1_sig = $sha1_sig . $sha1suffix;
  $form['Hash'] = array('#type' => 'hidden', '#value' => sha1($sha1_sig));
  watchdog('commerce_europabank', "GENERATED HASH %content %sha", array('%content' => $sha1_sig, '%sha' => $form['Hash']['#value']), WATCHDOG_ERROR);

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit payment'),
  );
  $form['#pre_render'][] = 'commerce_europabank_form_modify';

  return $form;
}

/**
 * Custom_form_modify_handler($form).
 */
function commerce_europabank_form_modify($form) {
  if ($form['#id'] == 'commerce-europabank-redirect-form') {
    unset($form['form_token']);
    unset($form['form_build_id']);
    unset($form['form_id']);
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('submit payment'),
      '#name' => '',
    );
  }
  return $form;
}

/**
 * Implements hook_redirect_form_validate().
 */
function commerce_europabank_redirect_form_validate($order, $payment_method) {
  return commerce_europabank_process_callback($order, $payment_method);
}

/**
 * Get Europabank feedback from GET / POST parameters.
 */
function commerce_europabank_get_feedback() {
  $feedback = FALSE;
  if (isset($_REQUEST['Hash'])) {
    // Prepare the feedback values sent by Europabank for processing.
    // We don't use $_REQUEST since this includes the $_SESSION variables.
    $feedback = $_GET + $_POST;
    unset($feedback['q']);
  }
  return $feedback;
}

/**
 * Check if SHA1 in callback feedback is valid.
 */
function commerce_europabank_valid_sha1_callback($order, $payment_method, $feedback, $secret = 'shared_secret') {
  require_once 'commerce_europabank.sha1.inc';

  // Add data to feedback for checking returned hash.
  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  $amount = $wrapper->commerce_order_total->amount->value();
  $feedback['Amount'] = $amount;
  $feedback['Description'] = commerce_europabank_description($order);

  // Check if the received SHA-1 string is valid.
  $server_secret = $payment_method['settings'][$secret];
  if (!commerce_europabank_feedback_valid_sha1($feedback, $server_secret)) {
    return FALSE;
  }
  return TRUE;
}

/**
 * Process a europabank returned URL.
 *
 * @param string $order_id
 *   is also in the url.
 */
function commerce_europabank_process_payment($order_id) {
  // Europabank does not support different urls for handling your result.
  // So a custom callback with logic must do it.
  if ($feedback = commerce_europabank_get_feedback()) {
    if ($order_id != $feedback['Orderid']) {
      return FALSE;
    }
    $order = commerce_order_load($feedback['Orderid']);
    if ($order) {
      // Load the payment method, since it won't be available if no.
      // $order object was passed in as argument.
      $payment_method = commerce_payment_method_instance_load($order->data['payment_method']);
      if (!$payment_method || $payment_method['method_id'] != 'europabank') {
        return FALSE;
      }
      if (commerce_europabank_valid_sha1_callback($order, $payment_method, $feedback)) {
        commerce_europabank_process_transaction($order, $payment_method, $feedback);
      }
    }
  }

  // If the order has status checkout_complete (is that enough?).
  // Redirect as Normal payment gateways do (see ogone).
  if ($order->status == 'checkout_complete') {
    drupal_goto(url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)));
  }
  else {
    drupal_goto(url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)));
  }
}

/**
 * Process callback information from Europabank.
 */
function commerce_europabank_process_callback($order, $payment_method) {
  if ($feedback = commerce_europabank_get_feedback()) {
    if (commerce_europabank_valid_sha1_callback($order, $payment_method, $feedback)) {
      // Process the transaction based on the Europabank parameters received.
      commerce_europabank_process_transaction($order, $payment_method, $feedback);
      return TRUE;
    }
  }
}

/**
 * Calback function.
 */
function commerce_europabank_callback() {
  if ($feedback = commerce_europabank_get_feedback()) {
    $order = commerce_order_load($feedback['Orderid']);
    if ($order) {

      // Load the payment method, since it won't be available if no.
      // $order object was passed in as argument.
      $payment_method = commerce_payment_method_instance_load($order->data['payment_method']);
      if (!$payment_method || $payment_method['method_id'] != 'europabank') {
        return FALSE;
      }

      // Check sha callback.
      if (commerce_europabank_valid_sha1_callback($order, $payment_method, $feedback, 'server_secret')) {
        commerce_europabank_process_transaction($order, $payment_method, $feedback, FALSE);
      }
    }
  }
}

/**
 * Get transaction with a specific Europabank ID.
 */
function commerce_europabank_get_payment_transaction($feedback) {
  $feedback_remote_id = $feedback['Id'];
  $query = new EntityFieldQuery();

  $result = $query
    ->entityCondition('entity_type', 'commerce_payment_transaction')
    ->propertyCondition('payment_method', 'europabank')
    ->propertyCondition('remote_id', $feedback_remote_id)
    ->execute();
  if (isset($result['commerce_payment_transaction']) && count($result['commerce_payment_transaction']) > 0) {
    $transaction = array_pop($result['commerce_payment_transaction']);
    return $transaction->transaction_id;
  }
  return FALSE;
}

/**
 * Process the payment transaction with the info received from Europabank.
 *
 * @param object $order
 *   The loaded order that is being processed
 * @param string $payment_method
 *   The payment method settings
 * @param array $feedback
 *   The parameters received from Europabank regarding the payment
 * @param bool $redirect
 *   Specifies whether to call redirect functions or not
 */
function commerce_europabank_process_transaction($order, $payment_method, $feedback, $redirect = TRUE) {
  // Check if the transaction exists.
  // If it does, this is a validation check.
  // Else create a new transaction.
  $transaction_id = commerce_europabank_get_payment_transaction($feedback);
  if (!$transaction_id) {
    commerce_europabank_new_transaction($order, $payment_method, $feedback, $redirect);
  }
  else {
    commerce_europabank_validate_transaction($transaction_id, $feedback);
  }
}

/**
 * Create a new transaction for the received date.
 *
 * @param object $order
 *   The loaded order that is being processed
 * @param string $payment_method
 *   The payment method settings
 * @param array $feedback
 *   The parameters received from Europabank regarding the payment
 * @param bool $redirect
 *   Specifies whether to call redirect functions or not
 */
function commerce_europabank_new_transaction($order, $payment_method, $feedback, $redirect = TRUE) {
  // If the transaction is a success set the status to pending as we want.
  // To wait for a second server confirmation.
  // Create new transaction object.
  $transaction = commerce_payment_transaction_new('europabank', $order->order_id);
  $payment_status = commerce_europabank_feedback_status($feedback['Status']);

  if ($payment_status['code'] == COMMERCE_PAYMENT_STATUS_SUCCESS) {
    // Thou shall not register a success without a double check.
    $payment_status['code'] = COMMERCE_PAYMENT_STATUS_PENDING;
  }

  // Identifying data.
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->remote_id = $feedback['Id'];
  // Payment amount details.
  $transaction->amount = $order->commerce_order_total[LANGUAGE_NONE][0]['amount'];
  $transaction->currency_code = $order->commerce_order_total[LANGUAGE_NONE][0]['currency_code'];
  // Payment status.
  $transaction->remote_status = $feedback['Status'];
  $transaction->status = $payment_status['code'];
  $transaction->message = $payment_status['message'];
  $transaction->payload = $feedback;

  commerce_payment_transaction_save($transaction);

  if ($redirect) {
    watchdog('commerce_europabank', "is the payment IN FAILURE (%fail)? %status", array(
        '%fail' => COMMERCE_PAYMENT_STATUS_FAILURE,
        '%status' => print_r($payment_status, TRUE),
            ), WATCHDOG_ERROR);
    if ($payment_status['code'] == COMMERCE_PAYMENT_STATUS_FAILURE) {
      drupal_set_message($payment_method['settings']['error_message'], 'error');
      commerce_payment_redirect_pane_previous_page($order);
    }
    else {
      watchdog('commerce_europabank', "redirect to next page %order", array(
          '%order' => print_r($order, TRUE),
              ), WATCHDOG_ERROR);

      commerce_payment_redirect_pane_next_page($order);
    }
  }
}

/**
 * Validate the second return from europabank and change status to accepted.
 *
 *  @param int $transaction_id
 *   The id of an existing transaction.
 *
 *  @param array $feedback
 *   The parameters received from Europabank regarding the payment.
 */
function commerce_europabank_validate_transaction($transaction_id, $feedback) {
  $transaction = commerce_payment_transaction_load($transaction_id);

  // Check if the feedback and the saved transaction are the same.
  $errors = commerce_europabank_compare_transaction_data($transaction, $feedback);

  if (empty($errors)) {
    $payment_status = commerce_europabank_feedback_status($feedback['Status']);
    $transaction->status = $payment_status['code'];
    commerce_payment_transaction_save($transaction);
  }
  else {
    // Leave transaction status at pending and ask for user intermission.
    // TODO: throw rules event here.
    watchdog(
      'commerce_europabank',
      'A payment validation check went wrong. This needs a manual intervention. Original transaction: %transaction -- new response: %feedback -- error fields: %errors',
      array(
        '%transaction' => var_export($transaction, TRUE),
        '%feedback' => var_export($feedback, TRUE),
        '%errors' => var_export($errors, TRUE),
      ),
      WATCHDOG_INFO
    );
  }
}

/**
 * Compares transaction data.
 *
 * @param array $transaction
 *   An array representing returned data
 * @param array $feedback
 *   An array representing returned data
 *
 * @return bool
 *   true = the values are equal
 *   false = the transactions are not equal
 */
function commerce_europabank_compare_transaction_data($transaction, $feedback) {
  $errors = array();

  if ($transaction->payload['Uid'] != $feedback['Uid']) {
    $errors[] = 'Uid';
  }

  if ($transaction->payload['Id'] != $feedback['Id']) {
    $errors[] = 'id';
  }

  if ($transaction->order_id != $feedback['Orderid']) {
    $errors[] = 'orderid';
  }
  else {
    watchdog('commerce_europabank', "redirect to next page %order", array(
      '%order' => print_r($order, TRUE),
    ), WATCHDOG_ERROR);
    commerce_payment_redirect_pane_next_page($order);

    if ($transaction->payload['Status'] != $feedback['Status']) {
      $errors[] = 'status';
    }
  }

  if ($transaction->payload['Brand'] != $feedback['Brand']) {
    $errors[] = 'brand';
  }

  if ($transaction->payload['Refnr'] != $feedback['Refnr']) {
    $errors[] = 'refnr';
  }

  if ($transaction->payload['Txttype'] != $feedback['Txttype']) {
    $errors[] = 'txttype';
  }
  return $errors;
}

/**
 * Get a list of enabled currencies.
 *
 * @TODO: figure out which currencies Europabank actually supports
 */
function commerce_europabank_currencies() {
  // Build a currency options list from all enabled currencies.
  $options = array();

  foreach (commerce_currencies(TRUE) as $currency_code => $currency) {
    $options[$currency_code] = t('@code - !name', array(
      '@code' => $currency['code'],
      '@symbol' => $currency['symbol'],
      '!name' => $currency['name'],
    ));

    if (!empty($currency['symbol'])) {
      $options[$currency_code] .= ' - ' . check_plain($currency['symbol']);
    }
  }
  return $options;
}

/**
 * Get a payment status and message based on Europabank status ID.
 *
 * @param string $status
 *   received Europabank status ID
 *
 * @return array
 *   key 'code' contains the commerce status
 *   key 'message' contains a textual representation of the Europabank status ID
 */
function commerce_europabank_feedback_status($status) {
  switch ($status) {

    case "AU":
      $st = COMMERCE_PAYMENT_STATUS_SUCCESS;
      $msg = t('Authorized');
      break;

    case "DE":
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Declined by bank');
      break;

    case "CA":
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Cancelled by client');
      break;

    case "EX":
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('A technical error occurred');
      break;

    case "TI":
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('The payment timed out.');
      break;

    default:
      $st = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Unknown feedback status');
      break;

  }
  return array(
    'code' => $st,
    'message' => $msg,
  );
}

/**
 * Get a list of allowed languages for europabank.
 *
 * @return array
 *   return array of languages
 */
function _commerce_europabank_get_allowed_languages() {
  return array(
    'nl',
    'fr',
    'en',
  );
}
