<?php
/**
 * @file
 * Main file for the Election Droop Integration module.
 */

/**
 * Implements hook_menu().
 */
function election_droop_menu() {
  $items = array();
  $items['election-post/%election_post/results/droop'] = array(
    'title' => 'Droop',
    'description' => 'Count results with Droop',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('election_droop_form', 1),
    'access callback' => 'election_droop_access',
    'access arguments' => array('count', 1),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'weight' => 1,
  );
  return $items;
}

/**
 * Access callback function for running an Droop count.
 */
function election_droop_access($op, $post, $account = NULL) {
  if ($op != 'count') {
    return FALSE;
  }
  if (!election_droop_check_support($post->election)) {
    return FALSE;
  }
  return election_results_access('view', $post, $account);
}

/**
 * Check whether an election supports Droop counting.
 */
function election_droop_check_support($election) {
  return election_export_check_support($election);
}

/**
 * Form for counting an election's results with Droop.
 */
function election_droop_form($form, &$form_state, stdClass $post) {

  drupal_set_title(t('Droop: %post', array('%post' => $post->title)), PASS_THROUGH);

  if (!_election_droop_get_path()) {
    $form['#disabled'] = TRUE;
    drupal_set_message(t('The Droop framework is not installed. Ensure that <a href="@droop_url">Droop</a> is installed so that the site can access and execute "@droop_path".', array(
      '@droop_url' => 'http://code.google.com/p/droop/',
      '@droop_path' => libraries_get_path('droop') . '/Droop.py',
    )), 'warning');
  }

  $form['#post'] = $post;

  $form['method'] = array(
    '#type' => 'select',
    '#title' => t('Droop count method'),
    '#options' => _election_droop_get_methods(),
    '#required' => TRUE,
  );

  $form['buttons'] = array(
    '#type' => 'actions',
    '#weight' => 100,
  );
  $form['buttons']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Count'),
  );

  if (!empty($form_state['result'])) {
    $form['result'] = array(
      '#markup' => '<h2>Droop output</h2><div class="election-count-droop-result"><pre>' . check_plain($form_state['result']) . '</pre></div>',
      '#weight' => 101,
    );
  }

  return $form;

}

/**
 * Submit function for the form election_droop_form().
 */
function election_droop_form_submit($form, &$form_state) {

  $post = $form['#post'];
  $method = $form_state['values']['method'];

  $result = election_droop_count($post, $method);

  if (empty($result)) {
    drupal_set_message(t('An error occurred while counting.'), 'error');
    $form_state['rebuild'] = TRUE;
    return;
  }

  $form_state['rebuild'] = TRUE;
  $form_state['result'] = $result;

}

/**
 * Count results for a post.
 */
function election_droop_count($post, $method, array $options = array()) {
  // Export the results into a ballot file.
  $export_filename = election_export_post($post);

  // Get the absolute system path to the file.
  $export_filename = drupal_realpath($export_filename);

  // Build the Droop command.
  $droop_path = _election_droop_get_path();
  $cmd = $droop_path;
  $cmd .= ' rule=' . escapeshellarg($method);
  $cmd .= ' ' . escapeshellarg($export_filename);

  // Run the Droop command and capture the results.
  $result = shell_exec($cmd);

  // Delete the temporary export file.
  unlink($export_filename);

  if (empty($result)) {
    return FALSE;
  }

  return $result;
}

/**
 * Get the path to an existing, executable Droop.py.
 */
function _election_droop_get_path() {
  $executable = libraries_get_path('droop') . '/Droop.py';
  if (is_executable($executable)) {
    return $executable;
  }
  return FALSE;
}

/**
 * Get a list of valid Droop counting methods.
 */
function _election_droop_get_methods() {
  return array(
    'cfer' => t('CfER (single defeat)'),
    'cfer-batch' => t('CfER (batch defeat)'),
    'meek' => t('Meek Parametric (omega = 1/10^9)'),
    'meek-prf' => t('PR Foundation Meek Reference'),
    'mpls' => t('Minneapolis MN STV'),
    'qpq' => t('QPQ (Quota-Preferential by Quotient)'),
    'scotland' => t('Scottish STV'),
    'warren' => t('Warren Parametric (omega = 1/10^9)'),
    'wigm' => t('Generic Weighted Inclusive Gregory Method (WIGM)'),
    'wigm-prf' => t('PR Foundation WIGM Reference (single defeat)'),
    'wigm-prf-batch' => t('PR Foundation WIGM Reference (defeat sure losers)'),
  );
}
