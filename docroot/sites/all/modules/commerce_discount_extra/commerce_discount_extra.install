<?php

/**
 * @file
 * Installs necessary fields for extra discounts.
 */

/**
 * Field setup
 */
function commerce_discount_extra_install_helper() {
  field_info_cache_clear();

  $fields = field_info_fields();
  $instances = field_info_instances();

  /*
   * Discount trigger quantity ("x" in "Buy x get y free)
   */

  if (empty($fields['commerce_trigger_qty'])) {
    // Create entity reference field.
    $field = array(
      'entity_types' => array('commerce_discount_offer'),
      'field_name' => 'commerce_trigger_qty',
      'type' => 'number_integer',
      'locked' => TRUE,
    );
    field_create_field($field);
  }
  foreach (array('per_quantity_fixed', 'per_quantity_percentage') as $type) {
    if (empty($instances['commerce_discount_offer'][$type]['commerce_trigger_qty'])) {
      $instance = array(
        'field_name' => 'commerce_trigger_qty',
        'entity_type' => 'commerce_discount_offer',
        'bundle' => $type,
        'label' => t('Buy'),
        'description' => t('The offer reward is triggered once for each of this quantity of the offer product in the order.'),
        'required' => TRUE,
        'widget' => array(
          'weight' => 0,
        )
      );
      field_create_instance($instance);
    }
  }

  /*
   * Discount quantity ("y" in "Buy x get y free)
   */

  if (empty($fields['commerce_offer_qty'])) {
    // Create entity reference field.
    $field = array(
      'entity_types' => array('commerce_discount_offer'),
      'field_name' => 'commerce_offer_qty',
      'type' => 'number_integer',
      'locked' => TRUE,
    );
    field_create_field($field);
  }
  foreach (array('per_quantity_fixed', 'per_quantity_percentage') as $type) {
    if (empty($instances['commerce_discount_offer'][$type]['commerce_offer_qty'])) {
      $instance = array(
        'field_name' => 'commerce_offer_qty',
        'entity_type' => 'commerce_discount_offer',
        'bundle' => $type,
        'label' => t('Get'),
        'description' => t('For each trigger quantity in the cart, up to this many products may be discounted.'),
        'required' => TRUE,
        'widget' => array(
          'weight' => 2
        )
      );
      field_create_instance($instance);
    }
  }

  /*
   * Discount percentage (per-qty percentage only).
   */
  if (empty($fields['commerce_percentage'])) {
    // Add decimal field to the commerce discount offer "percentage" bundle.
    $field = array(
      'entity_types' => array('commerce_discount_offer'),
      'field_name' => 'commerce_percentage',
      'type' => 'number_decimal',
      'locked' => TRUE,
    );
    field_create_field($field);
  }
  if (empty($instances['commerce_discount_offer']['per_quantity_percentage']['commerce_percentage'])) {
    $instance = array(
      'field_name' => 'commerce_percentage',
      'entity_type' => 'commerce_discount_offer',
      'bundle' => 'per_quantity_percentage',
      'label' => t('at'),
      'description' => t('Enter a decimal.'),
      'required' => TRUE,
      'settings' => array(
        'suffix' => 'of normal price',
      ),
      'widget' => array(
        'weight' => 4,
      )
    );
    field_create_instance($instance);
  }

  /*
   * Discount fixed amount (per-qty fixed only).
   */
  if (empty($fields['commerce_fixed_amount'])) {
    // Add price field to the commerce discount offer "fixed_amount" bundle.
    $field = array(
      'entity_types' => array('commerce_discount_offer'),
      'field_name' => 'commerce_fixed_amount',
      'type' => 'commerce_price',
      'locked' => TRUE,
    );
    field_create_field($field);
  }
  if (empty($instances['commerce_discount_offer']['per_quantity_fixed']['commerce_fixed_amount'])) {
    $instance = array(
      'field_name' => 'commerce_fixed_amount',
      'entity_type' => 'commerce_discount_offer',
      'bundle' => 'per_quantity_fixed',
      'label' => t('at discount of'),
      'required' => TRUE,
      'widget' => array(
        'weight' => 4,
      )
    );
    field_create_instance($instance);
  }

  /*
   * Discount limit (number of times the offer amount can apply).
   */

  if (empty($fields['commerce_offer_limit'])) {
    // Create entity reference field.
    $field = array(
      'entity_types' => array('commerce_discount_offer'),
      'field_name' => 'commerce_offer_limit',
      'type' => 'number_integer',
      'locked' => TRUE,
    );
    field_create_field($field);
  }
  foreach (array('per_quantity_fixed', 'per_quantity_percentage') as $type) {
    if (empty($instances['commerce_discount_offer'][$type]['commerce_offer_limit'])) {
      $instance = array(
        'field_name' => 'commerce_offer_limit',
        'entity_type' => 'commerce_discount_offer',
        'bundle' => $type,
        'default_value' => NULL,
        'required' => FALSE,
        'label' => t('up to'),
        'description' => t('No limit assumed if this field is left blank.'),
        'settings' => array(
          'min' => 0,
          'suffix' => t('times'),
        ),
        'widget' => array(
          'weight' => 5,
        )
      );
      field_create_instance($instance);
    }
  }

  /*
   * Discount product (the product to discount)
   */

  if (empty($fields['commerce_discount_products'])) {
    $field = array(
      'entity_types' => array('commerce_discount_offer'),
      'field_name' => 'commerce_discount_products',
      'type' => 'commerce_product_reference',
      'locked' => TRUE,
      'cardinality' => FIELD_CARDINALITY_UNLIMITED
    );
    field_create_field($field);
  }
  foreach (array('per_quantity_fixed', 'per_quantity_percentage') as $type) {
    if (empty($instances['commerce_discount_offer'][$type]['commerce_discount_products'])) {
      $instance = array(
        'field_name' => 'commerce_discount_products',
        'entity_type' => 'commerce_discount_offer',
        'bundle' => $type,
        'label' => t('product(s)'),
        'required' => TRUE,
        'widget' => array(
          'type' => 'commerce_product_reference_autocomplete',
          'weight' => 3
        ),
      );
      field_create_instance($instance);
    }
  }

  /*
   * Discount trigger product (the product that enables the discount).
   */
  if (empty($fields['commerce_trigger_products'])) {
    $field = array(
      'entity_types' => array('commerce_discount_offer'),
      'field_name' => 'commerce_trigger_products',
      'type' => 'commerce_product_reference',
      'locked' => TRUE,
      'cardinality' => FIELD_CARDINALITY_UNLIMITED
    );
    field_create_field($field);
  }
  foreach (array('per_quantity_fixed', 'per_quantity_percentage') as $type) {
    if (empty($instances['commerce_discount_offer'][$type]['commerce_trigger_products'])) {
      $instance = array(
        'field_name' => 'commerce_trigger_products',
        'entity_type' => 'commerce_discount_offer',
        'bundle' => $type,
        'label' => t('product(s)'),
        'required' => TRUE,
        'widget' => array(
          'type' => 'commerce_product_reference_autocomplete',
          'weight' => 1
        ),
      );
      field_create_instance($instance);
    }
  }

  /*
   * BOGO pricing strategy
   */
  if (empty($fields['commerce_pricing_strategy'])) {
    $field = array(
      'settings' => array(
        'allowed_values' => array(
          'high_first' => 'Highest first',
          'low_first' => 'Lowest first',
        ),
        'allowed_values_function' => '',
        'entity_translation_sync' => FALSE,
      ),
      'field_name' => 'commerce_pricing_strategy',
      'type' => 'list_text',
      'locked' => TRUE,
      'cardinality' => '1',
    );
    field_create_field($field);
  }
  foreach (array('per_quantity_fixed', 'per_quantity_percentage') as $type) {
    if (empty($instances['commerce_discount_offer'][$type]['commerce_pricing_strategy'])) {
      $instance = array(
        'label' => 'Pricing strategy',
        'widget' => array(
          'weight' => 0,
          'type' => 'options_select',
          'active' => 1,
          'settings' => array(),
        ),
        'required' => 1,
        'description' => t('Determine whether the offer should discount lowest or highest price products first if there is a choice.'),
        'default_value' => array(
          0 => array(
            'value' => 'low_first',
          ),
        ),
        'field_name' => 'commerce_pricing_strategy',
        'entity_type' => 'commerce_discount_offer',
        'bundle' => $type,
      );
      field_create_instance($instance);
    }
  }
}

/*
 * Implements hook_install().
 */
function commerce_discount_extra_install() {
  commerce_discount_extra_install_helper();
}

/**
 * Change per-qty discount product fields to multivalue.
 */
function commerce_discount_extra_update_7001() {
  field_info_cache_clear();

  $fields = field_info_fields();
  $instances = field_info_instances();

  foreach (array('commerce_discount_product', 'commerce_trigger_product') as $field_name) {
    foreach (array('per_quantity_fixed', 'per_quantity_percentage') as $offer_type) {
      if (!empty($instances['commerce_discount_offer'][$offer_type][$field_name])) {
        // Delete instances.
        field_delete_instance($instances['commerce_discount_offer'][$offer_type][$field_name]);
      }
    }

    // Delete fields.
    if (isset($fields[$field_name])) {
      field_delete_field($field_name);
    }
  }

  // Create multivalue discount products field.
  $field = array(
    'entity_types' => array('commerce_discount_offer'),
    'field_name' => 'commerce_discount_products',
    'type' => 'commerce_product_reference',
    'locked' => TRUE,
    'cardinality' => FIELD_CARDINALITY_UNLIMITED
  );
  field_create_field($field);

  // Create multivalue trigger products field.
  $field = array(
    'entity_types' => array('commerce_discount_offer'),
    'field_name' => 'commerce_trigger_products',
    'type' => 'commerce_product_reference',
    'locked' => TRUE,
    'cardinality' => FIELD_CARDINALITY_UNLIMITED
  );
  field_create_field($field);

  // Create instances
  foreach (array('per_quantity_fixed', 'per_quantity_percentage') as $offer_type) {
    // Trigger products.
    $instance = array(
      'field_name' => 'commerce_trigger_products',
      'entity_type' => 'commerce_discount_offer',
      'bundle' => $offer_type,
      'label' => t('product(s)'),
      'required' => TRUE,
      'widget' => array(
        'type' => 'commerce_product_reference_autocomplete',
        'weight' => 1
      ),
    );
    field_create_instance($instance);
    // Offer products
    $instance = array(
      'field_name' => 'commerce_discount_products',
      'entity_type' => 'commerce_discount_offer',
      'bundle' => $offer_type,
      'label' => t('product(s)'),
      'required' => TRUE,
      'widget' => array(
        'type' => 'commerce_product_reference_autocomplete',
        'weight' => 3
      ),
    );
    field_create_instance($instance);
  }
}

/**
 * Add pricing strategy field to per-qty offers.
 */
function commerce_discount_extra_update_7002() {
  /*
   * BOGO pricing strategy
   */
  if (empty($fields['commerce_pricing_strategy'])) {
    $field = array(
      'settings' => array(
        'allowed_values' => array(
          'high_first' => 'Highest first',
          'low_first' => 'Lowest first',
        ),
        'allowed_values_function' => '',
        'entity_translation_sync' => FALSE,
      ),
      'field_name' => 'commerce_pricing_strategy',
      'type' => 'list_text',
      'locked' => TRUE,
      'cardinality' => '1',
    );
    field_create_field($field);
  }
  foreach (array('per_quantity_fixed', 'per_quantity_percentage') as $type) {
    if (empty($instances['commerce_discount_offer'][$type]['commerce_pricing_strategy'])) {
      $instance = array(
        'label' => 'Pricing strategy',
        'widget' => array(
          'weight' => 15,
          'type' => 'options_select',
          'active' => 1,
          'settings' => array(),
        ),
        'required' => 1,
        'description' => t('Determine whether the offer should discount lowest or highest price products first if there is a choice.'),
        'default_value' => array(
          0 => array(
            'value' => 'low_first',
          ),
        ),
        'field_name' => 'commerce_pricing_strategy',
        'entity_type' => 'commerce_discount_offer',
        'bundle' => $type,
      );
      field_create_instance($instance);
    }
  }
}
