<?php

/**
 * @file
 * Provides necessary inline conditions and support for extra discounts
 */

/*
 * Implements hook_inline_conditions_info().
 */
function commerce_discount_extra_inline_conditions_info() {

  // User has role: line item
  $conditions['commerce_discount_extra_line_item_user_has_role'] = array(
    'label' => t('Role'),
    'entity type' => 'commerce_line_item',
    'callbacks' => array(
      'configure' => 'commerce_discount_extra_user_has_role_configure',
      'build' => 'commerce_discount_extra_user_has_role_build',
    ),
  );

  // User has role: order
  $conditions['commerce_discount_extra_order_user_has_role'] = array(
    'label' => t('Role'),
    'entity type' => 'commerce_order',
    'callbacks' => array(
      'configure' => 'commerce_discount_extra_user_has_role_configure',
      'build' => 'commerce_discount_extra_user_has_role_build',
    ),
  );

  // Product price: line item
  $conditions['commerce_discount_extra_line_item_price_comp'] = array(
    'label' => t('Product price'),
    'entity type' => 'commerce_line_item',
    'callbacks' => array(
      'configure' => 'commerce_discount_extra_line_item_price_comp_configure',
      'build' => 'commerce_discount_extra_line_item_price_comp_build',
    ),
  );

  // Total items in order: line item
  $conditions['commerce_discount_extra_line_item_items_in_order'] = array(
    'label' => t('Total items in order'),
    'entity type' => 'commerce_line_item',
    'callbacks' => array(
      'configure' => 'commerce_discount_extra_items_in_order_configure',
      'build' => 'commerce_discount_extra_items_in_order_build',
    ),
  );

  // Total items in order: order
  $conditions['commerce_discount_extra_order_items_in_order'] = array(
    'label' => t('Total items in order'),
    'entity type' => 'commerce_order',
    'callbacks' => array(
      'configure' => 'commerce_discount_extra_items_in_order_configure',
      'build' => 'commerce_discount_extra_items_in_order_build',
    ),
  );

  // Products and quantity: line item
  $conditions['commerce_discount_extra_line_item_has_specific_quantity_products'] = array(
    'label' => t('Order has product(s) and quantity'),
    'entity type' => 'commerce_line_item',
    'callbacks' => array(
      'configure' => 'commerce_order_has_specific_quantity_products_configure',
      'build' => 'commerce_discount_extra_line_item_has_specific_quantity_products_build',
    ),
  );

  // Order total: line item
  $conditions['commerce_discount_extra_line_item_compare_order_amount'] = array(
    'label' => t('Order amount'),
    'entity type' => 'commerce_line_item',
    'callbacks' => array(
      'configure' => 'commerce_order_compare_order_amount_configure',
      'build' => 'commerce_discount_extra_line_item_compare_order_amount_build',
    ),
  );

  // Product type: line item
  $conditions['commerce_discount_extra_line_item_has_product_type'] = array(
    'label' => t('Product type'),
    'entity type' => 'commerce_line_item',
    'callbacks' => array(
      'configure' => 'commerce_discount_extra_line_item_has_product_type_configure',
      'build' => 'commerce_discount_extra_line_item_has_product_type_build',
    ),
  );

  return $conditions;
}


/**
 * Inline condition build callback: compare line item product type
 */
function commerce_discount_extra_line_item_has_product_type_build($line_item_wrapper, $product_types) {
  if (in_array($line_item_wrapper->type->value(), commerce_product_line_item_types()) && in_array($line_item_wrapper->commerce_product->type->value(), $product_types)) {
    return TRUE;
  }
}

/**
 * Inline condition build callback: compare order total for line items
 */
function commerce_discount_extra_line_item_compare_order_amount_build($line_item_wrapper, $operator, $total) {
  module_load_include('inc', 'commerce_discount', 'commerce_discount.rules');

  if ($line_item_wrapper->order->value() && $line_item_wrapper->order->order_id->value()) {
    $order = commerce_order_load($line_item_wrapper->order->order_id->value());
    if ($order) {
      $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

      // Need to do this to trigger the total field update.
      $line_item_wrapper->save();

      // Run the order amount comparison function.
      return commerce_order_compare_order_amount_build($order_wrapper, $operator, $total);
    }
  }
}

/**
 * Inline condition build callback: Determine whether the order associated with
 * a line item, either by reference or by user's current cart, contains all of a
 * list of skus.
 *
 * @param type $line_item_wrapper
 * @param type $skus
 * @return type
 */
function commerce_discount_extra_line_item_order_contains_products_build($line_item_wrapper, $skus) {
  $products_sku = explode(', ', (string) $skus);

  // If the line item has an order, run the "order has products" logic with that
  // as the argument.
  if ($line_item_wrapper->order->value()) {
    $order_wrapper = $line_item_wrapper->order;
  }

  // If the line item does not have an order (the most common reason is that it
  // is a line item spawned by a calculated price field display), use the user's
  // current cart as the subject for the product search.
  global $user;

  $cart_order = commerce_cart_order_load($user->uid);
  if ($cart_order) {
    $order_wrapper = entity_metadata_wrapper('commerce_order', $cart_order);
  }

  if (isset($order_wrapper)) {
    // Compare discount product ids with thoses of given order.
    foreach ($order_wrapper->commerce_line_items as $wrapper_line_item) {
      // Ensures that the type of current line item is product.
      if ($wrapper_line_item->getBundle() == 'product') {
        if (($key = array_search($wrapper_line_item->commerce_product->sku->value(), $products_sku)) !== FALSE) {
          unset($products_sku[$key]);
        }
      }
    }

    return empty($products_sku);
  }
}

/**
 * Inline conditions build callback: Determine if a user has a role.
 * Discount-type agnostic.
 *
 * @param type $wrapper
 * @param type $roles
 * @return boolean
 */
function commerce_discount_extra_user_has_role_build(EntityDrupalWrapper $wrapper, $roles) {
  // Get the appropriate user.
  switch ($wrapper->type()) {
    case 'commerce_order':
      if ($wrapper->owner->value()) {
        $user = $wrapper->owner->value();
      }
      break;
    case 'commerce_line_item':
      if ($wrapper->order->value() && $wrapper->order->owner->value()) {
        $user = $wrapper->order->owner->value();
      }
  }

  if (!isset($user) || empty($user->roles)) {
    return FALSE;
  }

  // Match role by name
  $user_roles = array_values($user->roles);
  return array_intersect($roles, $user_roles);
}

/**
 * Inline conditions build callback: line item product comparison
 *
 * @param EntityDrupalWrapper $line_item_wrapper
 * @param type $amount
 * @param type $operator
 * @param string $method
 * @return boolean
 */
function commerce_discount_extra_line_item_price_comp_build(EntityDrupalWrapper $line_item_wrapper, $price, $operator, $method, $negate) {
  // Ensure that it is a product line item and that it is the same currency as
  // the price argument.
  $line_item_total = $line_item_wrapper->commerce_total->value();
  if (!in_array($line_item_wrapper->type->value(), commerce_product_line_item_types()) || $line_item_total['currency_code'] != $price['currency_code']) {
    return;
  }

  // Calculate line item amount
  switch ($method) {
    case 'base':
      // Get product base price
      $line_item_amount = $line_item_wrapper->commerce_product->commerce_price->amount->value();

      break;
    case 'calculated':
      // Get line item total
      $line_item_amount = $line_item_wrapper->commerce_total->amount->value();

      break;
  }

  // Evaluate expression
  return _commerce_discount_extra_expression_eval($line_item_amount, $price['amount'], $operator, $negate);
}

/**
 * Inline conditions build callback: evaluate items in order condition
 *
 * @param EntityDrupalWrapper $entity
 * @param type $number
 * @param type $operator
 * @param type $negate
 */
function commerce_discount_extra_items_in_order_build(EntityDrupalWrapper $entity_wrapper, $number, $operator, $negate) {
  // Find the order depending on if the argument is an order or a line item.
  if ($entity_wrapper->type() == 'commerce_order') {
    $order_wrapper = $entity_wrapper;
  }
  else if ($entity_wrapper->order->value()) {
    $order_wrapper = $entity_wrapper->order;
  }

  $qty = 0;

  // Determine total item count on order.
  if (isset($order_wrapper)) {
    foreach ($order_wrapper->commerce_line_items as $line_item_wrapper) {
      if (in_array($line_item_wrapper->type->value(), commerce_product_line_item_types())) {
        $qty += $line_item_wrapper->quantity->value();
      }
    }
  }

  // Evaluate.
  return _commerce_discount_extra_expression_eval($qty, $number, $operator, $negate);
}

/**
 * Inline conditions build callback: evaluate product quantity conditions
 */
function commerce_discount_extra_line_item_has_specific_quantity_products_build($line_item_wrapper, $products, $operator, $quantity) {
  module_load_include('inc', 'commerce_discount', 'commerce_discount.rules');

  return commerce_order_has_specific_quantity_products_build($line_item_wrapper->order, $products, $operator, $quantity);
}

/**
 * Inline conditions configure callback
 *
 * Configure role selection form
 *
 * @param type $settings
 * @return type
 */
function commerce_discount_extra_user_has_role_configure($settings) {
  $form['roles'] = array(
    '#type' => 'select',
    '#title' => t('Select role(s)'),
    '#options' => array_combine(user_roles(TRUE), user_roles(TRUE)),
    '#default_value' => isset($settings['roles']) ? $settings['roles'] : array(),
    '#required' => TRUE,
    '#multiple' => TRUE
  );

  return $form;
}

/**
 * Inline conditions configure callback
 *
 * Configure line item price comp form
 *
 * @param type $settings
 * @return type
 */
function commerce_discount_extra_line_item_price_comp_configure($settings) {
  // Expression operator
  $form['operator'] = array(
    '#type' => 'select',
    '#title' => t('Operator'),
    '#title_display' => 'invisible',
    '#options' => _commerce_discount_extra_operator_options(),
    '#default_value' => !empty($settings['operator']) ? $settings['operator'] : '==',
    '#required' => TRUE
  );

  // Price container
  $form['price'] = array(
    '#type' => 'container',
    '#tree' => TRUE,
    '#element_validate' => array('commerce_price_field_widget_validate'),
    '#suffix' => '<div class="condition-instructions">' . t('Enter a value to compare to the product price.') . '</div>',
  );

  // Price amount
  $form['price']['amount'] = array(
    '#type' => 'textfield',
    '#title' => t('Product price'),
    '#title_display' => 'invisible',
    '#default_value' => commerce_currency_amount_to_decimal($settings['price']['amount'], commerce_default_currency()),
    '#size' => 10,
    '#field_suffix' => commerce_default_currency(),
    '#require' => TRUE,
  );

  // Price currency (hidden)
  $form['price']['currency_code'] = array(
    '#type' => 'value',
    '#default_value' => commerce_default_currency(),
  );

  // Negate expression
  $form['negate'] = array(
    '#type' => 'checkbox',
    '#title' => t('Negate'),
    '#default_value' => !empty($settings['negate']),
  );

  // Comparison method
  $form['method'] = array(
    '#type' => 'radios',
    '#title' => t('Compare using'),
    '#options' => _commerce_discount_extra_comp_method_options(),
    '#default_value' => !empty($settings['method']) ? $settings['method'] : 'base',
    '#required' => TRUE
  );

  return $form;
}

/*
 * Implements hook_commerce_discount_offer_type_info().
 */
function commerce_discount_extra_commerce_discount_offer_type_info() {
  $types['per_quantity_fixed'] = array(
    'label' => t('Per-quantity product discount ($ off)'),
    'action' => 'commerce_discount_extra_per_quantity_discount',
    'entity types' => array('commerce_order'),
  );

  $types['per_quantity_percentage'] = array(
    'label' => t('Per-quantity product discount (% off)'),
    'action' => 'commerce_discount_extra_per_quantity_discount',
    'entity types' => array('commerce_order'),
  );

  return $types;
}

/**
 * Inline conditions configure callback: configure items in order condition
 */
function commerce_discount_extra_items_in_order_configure($settings) {
  // Expression operator
  $form['operator'] = array(
    '#type' => 'select',
    '#title' => t('Operator'),
    '#title_display' => 'invisible',
    '#options' => _commerce_discount_extra_operator_options(),
    '#default_value' => !empty($settings['operator']) ? $settings['operator'] : '==',
    '#required' => TRUE
  );

  // Comparison number
  $form['number'] = array(
    '#type' => 'textfield',
    '#title' => t('Number'),
    '#default_value' => !empty($settings['number']) ? $settings['number'] : '',
    '#element_validate' => array('element_validate_integer'),
    '#required' => TRUE
  );

  // Negate expression
  $form['negate'] = array(
    '#type' => 'checkbox',
    '#title' => t('Negate'),
    '#description' => t('Hint: "not greater than" is the same as "less than or equal to."'),
    '#default_value' => !empty($settings['negate']),
  );

  return $form;
}

/**
 * Inline conditions configure callback: configure product type condition
 */
function commerce_discount_extra_line_item_has_product_type_configure($settings) {
  $form['product_types'] = array(
    '#type' => 'select',
    '#multiple' => TRUE,
    '#title' => t('Product types'),
    '#description' => t('Select the product types that should get this discount'),
    '#default_value' => !empty($settings['product_types']) ? $settings['product_types'] : array(),
    '#options' => commerce_product_type_options_list()
  );

  return $form;
}

/*
 * Implements hook_flush_caches().
 */
function commerce_discount_extra_flush_caches() {
  module_load_install('commerce_discount_extra');
  commerce_discount_extra_install_helper();
}

/*
 * Implements hook_inline_conditions_build_alter().
 */
function commerce_discount_extra_inline_conditions_build_alter(&$value) {
  switch ($value['condition_name']) {
    case 'commerce_discount_extra_line_item_has_specific_quantity_products':
      // See commerce_order_inline_conditions_build_alter().
      $entity_ids = array();
      foreach ($value['condition_settings']['products'] as $delta) {
        $entity_ids[] = reset($delta);
      }
      $products = commerce_product_load_multiple($entity_ids);

      $value['condition_settings']['products'] = '';
      foreach ($products as $product) {
        $value['condition_settings']['products'] .= $product->sku;
        if ($product !== end($products)) {
          $value['condition_settings']['products'] .= ', ';
        }
      }

      break;
  }
}

/**
 * Returns a list of operator labels keyed by symbol.
 *
 * @return type
 */
function _commerce_discount_extra_operator_options() {
  return array(
    '<' => t('lower than'),
    '==' => t('equals'),
    '>' => t('greater than'),
  );
}

/**
 * Returns a list of comparison method options.
 *
 * @return type
 */
function _commerce_discount_extra_comp_method_options() {
  return array(
    'base' => t('Product base price'),
    'calculated' => t('Calculated price')
  );
}

/**
 * Get the quantity of a given product in an order.
 *
 * @param EntityDrupalWrapper $order_wrapper
 * @param type $product_id
 * @return type
 */
function commerce_discount_extra_order_product_qty(EntityDrupalWrapper $order_wrapper, $product_ids) {
  $qty = 0;
  foreach ($order_wrapper->commerce_line_items as $line_item_wrapper) {
    if ($line_item_wrapper->value() && in_array($line_item_wrapper->type->value(), commerce_product_line_item_types()) &&
        in_array($line_item_wrapper->commerce_product->getIdentifier(), $product_ids)) {
      $qty += $line_item_wrapper->quantity->value();
    }
  }

  return $qty;
}

/**
 * Evalute a simple expression with two values, an operator, and a negate flag.
 *
 * @param type $v1
 * @param type $v2
 * @param type $operator
 * @param type $negate
 * @return type
 */
function _commerce_discount_extra_expression_eval($v1, $v2, $operator, $negate = FALSE) {
  switch ($operator) {
    case '>':
      $result = $v1 > $v2;

      break;
    case '<':
      $result = $v1 < $v2;

      break;
    case '==':
      $result = $v1 == $v2;

      break;
  }

  return $negate ? !$result : $result;
}

/*
 * Implements hook_form_FORM_ID_alter().
 */
function commerce_discount_extra_form_commerce_discount_form_alter(&$form, &$form_state) {
  // Inline entity form has a problem where it interprets a blank integer field
  // as a string rather than an integer.
  $form['#validate'][] = 'commerce_discount_extra_fix_limit_data';
  $limit_element =& $form['commerce_discount_fields']['commerce_discount_offer'][LANGUAGE_NONE]['form']['commerce_offer_limit'][LANGUAGE_NONE][0];
  if ($limit_element['value']['#default_value'] === '0') {
    $limit_element['value']['#default_value'] = '';
  }
}

/*
 * Form validate callback: change empty string to integer for limit field
 */
function commerce_discount_extra_fix_limit_data(&$form, &$form_state) {
  $limit =& $form_state['values']['commerce_discount_fields']['commerce_discount_offer'][LANGUAGE_NONE]['form']['commerce_offer_limit'][LANGUAGE_NONE][0]['value'];
  if ($limit === '') {
    $limit = (int)'';
  }
}
