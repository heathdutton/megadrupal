<?php

/**
 * @file
 * Main functions and hook implementations of the Move Region module.
 */

/**
 * Implements hook_menu().
 */
function move_region_menu() {
  $items['admin/config/content/move-region'] = array(
    'title' => 'Move Region',
    'description' => 'Move content to another region on certain pages.',
    'page callback' => 'move_region_list',
    'access arguments' => array('administer move region'),
    'file' => 'move_region.admin.inc',
  );
  $items['admin/config/content/move-region/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/config/content/move-region/add'] = array(
    'title' => 'Add configuration',
    'description' => 'Add configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('move_region_configure_form'),
    'access arguments' => array('administer move region'),
    'type' => MENU_LOCAL_ACTION,
    'weight' => 2,
    'file' => 'move_region.admin.inc',
  );
  $items['admin/config/content/move-region/configure/%'] = array(
    'title' => 'Edit configuration',
    'description' => 'Edit configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('move_region_configure_form', 5),
    'access callback' => 'move_region_access',
    'access arguments' => array(5),
    'file' => 'move_region.admin.inc',
  );
  $items['admin/config/content/move-region/delete/%'] = array(
    'title' => 'Delete configuration',
    'description' => 'Delete configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('move_region_delete_confirm', 5),
    'access callback' => 'move_region_access',
    'access arguments' => array(5),
    'file' => 'move_region.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function move_region_permission() {
  return array(
    'administer move region' => array(
      'title' => t('Administer move region'),
      'description' => t('Allows to move content between regions on chosen pages.'),
    ),
  );
}

/**
 * Implements hook_help().
 */
function move_region_help($path, $arg) {
  switch ($path) {
    case 'admin/help#move_region':
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Move Region module allows you to move the content of a region in its entirety into another region on specified pages. This is especially useful for pages that need to have a different region layout, for example having the sidebar on the opposite side.') . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Moving region content') . '</dt>';
      $output .= '<dd>' . t('With the Move Region module you can create multiple configurations in which you can decide which regions should be moved, where they should be moved to, and on which pages this should occur.') . '</dd>';
      $output .= '</dl>';
      $output .= '<h3>' . t('Limitations') . '</h3>';
      $output .= '<p>' . t('Currently only the region layout of the default theme is supported.') . '</p>';
      return $output;
    case 'admin/config/content/move-region':
      return '<p>' . t('Create a new configuration to move the content of a region into another region. When you create or edit a configuration you can choose which region to move, where to move it to, and on which pages this should occur.') . '</p>';
  }
}

/**
 * Menu access callback. Determines whether the current user may perform actions
 * on the given configuration.
 *
 * @param integer $id
 *   A configuration id.
 */
function move_region_access($id) {
  return user_access('administer move region') && move_region_load($id);
}

/**
 * Loads multiple configurations.
 *
 * @param array $ids
 *   An array containing the IDs of the configurations to load. Leave this empty
 *   to retrieve all configurations.
 * @param array $conditions
 *   An array of conditions in the form 'field' => $value, where the field can
 *   be one of 'id', 'theme', 'source' or 'destination'.
 *
 * @return array
 *   An array of configuration objects.
 */
function move_region_load_multiple($ids = array(), $conditions = array()) {
  $query = db_select('move_region', 'mr')->fields('mr');

  if ($ids) {
    $query->condition('mr.id', $ids, 'IN');
  }

  if ($conditions) {
    foreach ($conditions as $field => $value) {
      $query->condition('mr.' . $field, $value);
    }
  }

  return $query->execute()->fetchAllAssoc('id');
}

/**
 * Load a configuration from the database.
 *
 * @param integer $id
 *   The ID of the configuration to load.
 */
function move_region_load($id = NULL) {
  if (empty($id)) {
    return FALSE;
  }
  $config = move_region_load_multiple(array($id));
  return $config ? reset($config) : FALSE;
}

/**
 * Implements hook_page_alter().
 */
function move_region_page_alter(&$page) {
  global $theme_key;

  // Convert the Drupal path to lowercase. This allows comparison of the same
  // path with different case. Ex: /Page, /page, /PAGE.
  $path = drupal_strtolower(drupal_get_path_alias(current_path()));

  // Loop through all configurations.
  foreach (move_region_load_multiple(FALSE, array('theme' => $theme_key)) as $config) {
    // Convert the configuration path list to lowercase.
    $pages = drupal_strtolower($config->pages);
    // Compare the lowercase internal and lowercase path alias (if any).
    $page_match = drupal_match_path($path, $pages);
    if ($path != current_path()) {
      $page_match = $page_match || drupal_match_path(current_path(), $pages);
    }

    // Copy the content of the source region into the destination region and
    // then remove the source region.
    if ($page_match && !empty($page[$config->source])) {
      // Create the destination region if it does not yet exist.
      if (!isset($page[$config->destination])) {
        $page[$config->destination] = array();
      }
      $page[$config->destination] = array_merge($page[$config->destination], $page[$config->source]);
      unset($page[$config->source]);
    }
  }
}
