<?php

/**
 * @file
 * Light Shop module file.
 * Dalay - http://www.dupalka.ru
 * The module which adds functionality of a basket
 * for the nodes selected by the visitor.
 * The list of the chosen nodes then sends on the mail adjusted by the manager.
 */

define('LIGHTSHOP_ORDER_NODETYPE', 'lightshop_order');

/**
 * Implements hook_permission().
 */
function lightshop_permission() {
  return array(
    'use basket' => array(
      'title' => t('Use basket'),
      'description' => t('Permission to use basket'),
    ),
    'manage orders' => array(
      'title' => t('Manage orders'),
      'description' => t('View and edit all orders'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function lightshop_menu() {
  $items = array();
  $items['admin/config/lightshop'] = array(
    'title' => 'Light Shop',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lightshop_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'description' => 'The module adds functionality baskets nodes then send
    the order for the selected by e-mail.',
    'file' => 'lightshop.admin.inc',
  );
  $items['admin/config/lightshop/general'] = array(
    'title' => 'General settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/config/lightshop/mail'] = array(
    'title' => 'Notification settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lightshop_admin_mail_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'lightshop.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['basket'] = array(
    'title' => 'Your Basket',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lightshop_basket_form'),
    'access callback' => 'user_access',
    'access arguments' => array('use basket'),
    'type' => MENU_CALLBACK,
    'file' => 'lightshop.pages.inc',
  );
  $items['basket/add/%node'] = array(
    'page callback' => 'lightshop_add2basket',
    'page arguments' => array(2),
    'access arguments' => array('use basket'),
    'type' => MENU_CALLBACK,
    'file' => 'lightshop.pages.inc',
  );
  $items['basket/clear'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_lightshop_clear_confirm'),
    'access callback' => 'lightshop_basket_access',
    'type' => MENU_CALLBACK,
    'file' => 'lightshop.pages.inc',
  );
  $items['basket/checkout'] = array(
    'title' => 'Checkout',
    'page callback' => 'lightshop_checkout',
    'access callback' => 'lightshop_basket_access',
    'type' => MENU_CALLBACK,
    'file' => 'lightshop.pages.inc',
  );
  $items['order/%node'] = array(
    'title' => 'Order page',
    'page callback' => '_lightshop_get_my_order',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'lightshop.pages.inc',
  );
  $items['user/%user/orders'] = array(
    'title' => 'Orders',
    'page callback' => 'lightshop_my_orders_page',
    'page arguments' => array(1),
    'access callback' => 'lightshop_my_orders_page_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'lightshop.pages.inc',
  );
  $items['lightshop/ajax'] = array(
    'title' => 'Ajax callback',
    'page callback' => 'lightshop_ajaxform_process',
    'delivery callback' => 'ajax_deliver',
    'access callback' => TRUE,
    'theme callback' => 'ajax_base_page_theme',
    'type' => MENU_CALLBACK,
    'file' => 'lightshop.pages.inc',
  );
  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function lightshop_menu_alter(&$items) {
  $type = str_replace('_', '-', LIGHTSHOP_ORDER_NODETYPE);
  $items['node/add/' . $type]['access callback'] = FALSE;
}

/**
 * Implements hook_ajax_render_alter().
 */
function lightshop_ajax_render_alter(&$commands) {
  // Inject any new status messages into the content area.
  $commands[] = ajax_command_prepend('#block-system-main',
    '<div class="messages-ajax">' . theme('status_messages') . '</div>'
  );
}

/**
 * Implements template_preprocess_page().
 */
function lightshop_preprocess_page(&$vars) {
  if (arg(0) == 'basket') {
    $vars['title_prefix'][]['#markup'] = '<div id="lightshop-page-title">';
    $vars['title_suffix'][]['#markup'] = '</div>';
  }
}

/**
 * Create a «add to basket» link for display in the node body.
 */
function lightshop_add2basket_link($nid) {
  $build = array();
  if (_lightshop_in_basket($nid)) {
    $build['add2basket_link'] = array(
      '#markup' => '<span class="add2basket-link">' . t('Added to Basket') . '</span>',
    );
  }
  else {
    $build['add2basket_link'] = array(
      '#type' => 'link',
      '#title' => t('Add to Basket'),
      '#href' => 'basket/add/' . $nid . '/nojs/',
      '#attributes' => array(
        'rel' => 'nofollow',
        'class' => array('add2basket-link'),
      ),
      '#options' => array(
        'query' => drupal_get_destination(),
      ),
      '#ajax' => array(
        'wrapper' => 'add2basket-link-' . $nid,
      ),
    );
  }
  $build['add2basket_link']['#prefix'] = '<div id="add2basket-link-' . $nid . '" class="add2basket-link-container">';
  $build['add2basket_link']['#suffix'] = '</div>';
  $build['add2basket_link']['#attached'] = array(
    'css' => array(
      drupal_get_path('module', 'lightshop') . '/theme/lightshop.css',
    ),
    'js' => array(
      drupal_get_path('module', 'lightshop') . '/theme/lightshop.js',
    ),
  );
  return render($build);
}

/**
 * Implements hook_field_extra_fields().
 */
function lightshop_field_extra_fields() {
  $extra = array();
  foreach (variable_get('lightshop_node_types', array()) as $type) {
    $extra['node'][$type] = array(
      'display' => array(
        'lightshop_add2basket' => array(
          'label' => t('Add to basket button'),
          'description' => t('Button for adding node in basket'),
          'weight' => 10,
        ),
      ),
    );
  }
  $extra['node'][LIGHTSHOP_ORDER_NODETYPE] = array(
    'form' => array(
      'lightshop_order_mail' => array(
        'label' => t('Order mail'),
        'description' => t('Light Shop order contact mail'),
        'weight' => -10,
      ),
      'lightshop_order_items' => array(
        'label' => t('Order items'),
        'description' => t('Light Shop order items list'),
        'weight' => -9,
      ),
    ),
    'display' => array(
      'lightshop_order_mail' => array(
        'label' => t('Order mail'),
        'description' => t('Light Shop order contact e-mail'),
        'weight' => -10,
      ),
      'lightshop_order_items' => array(
        'label' => t('Order items'),
        'description' => t('Light Shop order items list'),
        'weight' => -9,
      ),
    ),
  );
  return $extra;
}

/**
 * Implements hook_node_view().
 */
function lightshop_node_view($node, $view_mode, $langcode) {
  $extra_fields = field_extra_fields_get_display('node', $node->type, $view_mode
  );
  if (user_access('use basket') && isset($extra_fields['lightshop_add2basket'])
    && $extra_fields['lightshop_add2basket']['visible']
  ) {
    $node->content['lightshop_add2basket'] = array(
      '#markup' => lightshop_add2basket_link($node->nid),
    );
  }
}

/**
 * Implements hook_insert().
 */
function lightshop_insert($node) {
  $order = new stdClass();
  $order->nid = $node->nid;
  $order->uid = $node->uid;
  $order->mail = $node->order_mail;
  $order->items = $_SESSION['basket'];
  if (isset($_SESSION['basket']['store'])) {
    unset($order->items['store']);
  }
  $order->code = $_SESSION['order_codes'][$node->nid] = drupal_get_token($node->nid);

  if (drupal_write_record('lightshop_order', $order)) {
    unset($_SESSION['basket']);
    $node->order_items = $order->items;
    $node->order_code = $order->code;
    lightshop_mail_send($node, 'site');
    if (variable_get('lightshop_mail_user_send')) {
      lightshop_mail_send($node, 'user');
    }
  }
  else {
    drupal_set_message(t('Error saving order'), 'error');
  }
}

/**
 * Implements hook_token_info().
 */
function lightshop_token_info() {
  $node['order-id'] = array(
    'name' => t('Order ID'),
    'description' => t('The unique ID of the order.'),
  );
  $node['order-mail'] = array(
    'name' => t("Customer's email"),
    'description' => t('The customer email adress'),
  );

  return array(
    'tokens' => array('node' => $node),
  );
}

/**
 * Implements hook_tokens().
 */
function lightshop_tokens($type, $tokens, array$data = array(), array$options = array()
) {
  $replacements = array();

  if ($type == 'node' && !empty($data['node']) && $data['node']->type
    == LIGHTSHOP_ORDER_NODETYPE
  ) {

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'order-id':
          $replacements[$original] = $data['node']->order_id;
          break;

        case 'order-mail':
          $replacements[$original] = $data['node']->order_mail;
          break;
      }
    }
  }

  return $replacements;
}

/**
 * Implements hook_load().
 */
function lightshop_load($nodes) {
  $result = db_query('SELECT * FROM {lightshop_order} WHERE nid IN (:nids)',
    array(':nids' => array_keys($nodes))
  );

  foreach ($result as $record) {
    $nodes[$record->nid]->order_id = $record->oid;
    $nodes[$record->nid]->order_mail = $record->mail;
    $nodes[$record->nid]->order_items = unserialize($record->items);
    $nodes[$record->nid]->order_code = $record->code;
    $nodes[$record->nid]->title = token_replace(
      variable_get('lightshop_order_title',
        t('Order #[node:order-id] | [node:created]')
      ), array('node' =>
        $nodes[$record->nid],
      )
    );
  }
}

/**
 * Implements hook_delete().
 */
function lightshop_delete($node) {
  db_delete('lightshop_order')->condition('nid', $node->nid)->execute();
}

/**
 * Implements hook_view().
 */
function lightshop_view($node, $view_mode) {
  global $user;
  if ($user->uid > 0) {
    if (($view_mode == 'full' && node_is_page($node)) &&
      ($user->uid == $node->uid || user_access('manage orders'))
    ) {
      // Breadcrumb navigation.
      drupal_set_breadcrumb(array(l(t('Home'), NULL), l(t("!name's orders",
              array(
                '!name' => format_username($node),
              )
            ),
            'user/' . $node->uid . '/orders'
          )));
    }
  }

  $node->content['lightshop_order_items'] = array(
    '#type' => 'markup',
    '#theme' => 'lightshop_items_table',
    '#basket' => $node->order_items,
  );
  $node->content['lightshop_order_mail'] = array(
    '#markup' => '<strong>' . t('Order contact mail: ') . '</strong>' . $node->order_mail,
  );

  return $node;
}

/**
 * Check to add item to its absence in the basket.
 */
function _lightshop_in_basket($nid) {
  return isset($_SESSION['basket']['items']) ? array_key_exists($nid, $_SESSION['basket']['items']) : FALSE;
}

/**
 * Implements hook_theme().
 */
function lightshop_theme($existing, $type, $theme, $path) {
  $path = drupal_get_path('module', 'lightshop') . '/theme';
  return array(
    'lightshop_block_display' => array(
      'variables' => array(),
      'template' => 'lightshop-block-display',
      'file' => 'theme.inc',
      'path' => $path,
    ),
    'lightshop_items_form' => array(
      'render element' => 'element',
      'file' => 'theme.inc',
      'path' => $path,
    ),
    'lightshop_items_table' => array(
      'variables' => array('basket' => NULL),
      'file' => 'theme.inc',
      'path' => $path,
    ),
    'lightshop_mail_notice' => array(
      'variables' => array(
        'node' => NULL,
        'destination' => NULL,
      ),
      'file' => 'theme.inc',
      'path' => $path,
    ),
  );
}

/**
 * Implements hook_node_access().
 */
function lightshop_node_access($node, $op, $account) {
  $type = is_string($node) ? $node : $node->type;
  if ($type == LIGHTSHOP_ORDER_NODETYPE) {
    if ($op == 'view' && (isset($_SESSION['order_codes'])
        && in_array($node->order_code, $_SESSION['order_codes'])
      )) {
      return NODE_ACCESS_ALLOW;
    }
    return NODE_ACCESS_IGNORE;
  }
}

/**
 * Implements hook_node_grants().
 */
function lightshop_node_grants($account, $op) {
  $grants = array();
  if (user_access('manage orders', $account)) {
    $grants['lsh_order_menage'] = array(1);
  }
  if ($account->uid > 0) {
    $grants['lsh_order_owner'] = array($account->uid);
  }
  return $grants;
}

/**
 * Implements hook_node_access_records().
 */
function lightshop_node_access_records($node) {
  if ($node->type == LIGHTSHOP_ORDER_NODETYPE) {
    $grants = array();
    $grants[] = array(
      'realm' => 'lsh_order_menage',
      'gid' => 1,
      'grant_view' => 1,
      'grant_update' => 1,
      'grant_delete' => 1,
      'priority' => 0,
    );
    if ($node->uid > 0) {
      $grants[] = array(
        'realm' => 'lsh_order_owner',
        'gid' => $node->uid,
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
        'priority' => 0,
      );
    }
    return $grants;
  }
}

/**
 * Access callback function for module menu items.
 */
function lightshop_basket_access() {
  return (user_access('use basket') && isset($_SESSION['basket']['items'])
    && !empty($_SESSION['basket']['items'])
  );
}

/**
 * Access callback for user orders history page.
 */
function lightshop_my_orders_page_access($account) {
  global $user;
  return ($account->uid && $account->uid == $user->uid
    && user_access('use basket')
  ) || user_access('manage orders');
}

/**
 * Implements hook_block_info().
 */
function lightshop_block_info() {
  $block['basket'] = array(
    'info' => t('Light Shop: Basket Content'),
    'cache' => DRUPAL_NO_CACHE,
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => "basket",
  );
  return $block;
}

/**
 * Implements hook_block_view().
 */
function lightshop_block_view() {
  if (!user_access('use basket')) {
    return;
  }
  $block = array();
  $block['subject'] = t('Your Basket');
  $block['content'] = lightshop_block_content();
  return $block;
}

/**
 * Basket block content.
 */
function lightshop_block_content() {
  $content[] = array(
    '#theme' => 'lightshop_block_display',
    '#prefix' => '<div  id="lightshop-ajax-block-content">',
    '#suffix' => '</div>',
  );
  return $content;
}

/**
 * Implements hook_form_alter().
 */
function lightshop_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == LIGHTSHOP_ORDER_NODETYPE . '_node_form' && empty($form['nid']['#value'])) {
    $form['#prefix'] = '<div id="new-order-add-form">';
    $form['#suffix'] = '</div>';
    unset($form['actions']['preview']);
    $form['actions']['submit']['#value'] = t('Send order');
    $form['actions']['submit']['#submit'][0] = 'lightshop_node_form_submit';
    $form['actions']['submit']['#name'] = 'new_order';
    $form['actions']['submit']['#ajax'] = array(
      'path' => 'lightshop/ajax',
      'wrapper' => 'new-order-add-form',
    );
    form_load_include($form_state, 'inc', 'node', 'node.pages');
  }
}

/**
 * Form submission handler for order node types.
 */
function lightshop_node_form_submit($form, &$form_state) {
  $node = node_form_submit_build_node($form, $form_state);
  node_save($node);

  drupal_set_message(t('Your order has been successfully created and sent to
  our managers for further processing.'));
  if (variable_get('lightshop_mail_user_send', FALSE)) {
    drupal_set_message(t('E-mail message with info about your order has been
    sent to the address you provided.'));
  }

  if ($node->nid) {
    $form_state['values']['nid'] = $node->nid;
    $form_state['nid'] = $node->nid;
    $form_state['redirect'] = 'node/' . $node->nid;
  }
  else {
    drupal_set_message(t('Sorry, there was a small technical problem.
    Currently, your order can not be accepted.'), 'error');
    $form_state['rebuild'] = TRUE;
  }
}

/**
 * Get price field value
 */
function _lightshop_get_price($node) {
  $price_field = variable_get('lightshop_price_field', '');
  if ($price_arr = field_get_items('node', $node, $price_field)) {
    $price = reset($price_arr);
    return $price['value'];
  }
  return FALSE;
}

/**
 * Get price value number format.
 */
function _lightshop_get_price_numberformat($price, $currency = '') {
  if (empty($price)) {
    return;
  }
  if (empty($currency)) {
    $currency = variable_get('lightshop_price_suffix', '');
  }

  $output = is_float($price) ? number_format($price, 2, '.', ' ') : (is_int($price) ? number_format($price, 0, ' ', ' ') : $price);
  $output .= ' ' . $currency;
  return $output;
}

/**
 * Implements hook_views_api().
 */
function lightshop_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'lightshop') . '/views',
  );
}

/**
 * Implements hook_node_info().
 */
function lightshop_node_info() {
  return array(
    LIGHTSHOP_ORDER_NODETYPE => array(
      'name' => t('Light Shop Order'),
      'base' => 'lightshop',
      'description' => t('This is an order node type from Light Shop module.'),
      'has_title' => FALSE,
      'locked' => TRUE,
    ),
  );
}

/**
 * Helper function. Returns header array for basket items in table display.
 */
function _lightshop_basket_items_header() {
  $header = array();
  $header['title'] = t('Title');
  if (variable_get('lightshop_show_qty', TRUE)) {
    $header['qty'] = t('Qty');
  }
  if (variable_get('lightshop_show_price', FALSE)) {
    $header['price'] = t('Price');
  }
  return $header;
}

/**
 * Implements hook_form().
 */
function lightshop_form($node, &$form_state) {
  if (!isset($node->nid) && !isset($_SESSION['basket'])) {
    drupal_goto('basket');
  }
  global $user;
  if (!isset($node->nid)) {
    drupal_set_title(t('Checkout page'));
  }
  $basket = isset($node->nid) ? $node->order_items : $_SESSION['basket'];

  $form['order_items'] = array(
    '#type' => 'markup',
    '#theme' => 'lightshop_items_table',
    '#basket' => $basket,
    '#weight' => -99,
  );
  $form['order_mail'] = array(
    '#type' => 'textfield',
    '#title' => t('Contact e-mail'),
    '#default_value' => isset($node->nid) ? $node->order_mail
     : ($user->uid > 0 ? $user->mail : ''),
    '#size' => 60,
    '#required' => TRUE,
    '#disabled' => isset($node->nid),
  );
  $form['#validate'][] = 'lightshop_order_validate';

  return $form;
}

/**
 * Order form validate callback.
 */
function lightshop_order_validate($form, $form_state) {
  if (!valid_email_address($form_state['values']['order_mail'])) {
    form_set_error('order_mail', t('The e-mail address you specified is not
    valid.'));
  }
}

/**
 * Validate callback. Check for empty session.
 */
function lightshop_check_empty_basket($form, $form_state) {
  if (!isset($_SESSION['basket']['items'])
    || empty($_SESSION['basket']['items'])
  ) {
    form_set_error('', t('Incorrect form'));
  };
}

/**
 * Implements hook_mail().
 */
function lightshop_mail($key, &$message, $params) {
  switch ($key) {
    case 'site':
      $message['subject'] = t('On site "@site" has been added a new order.',
        array('@site' => variable_get('site_name'))
      );
      break;

    case 'user':
      $message['subject'] = t('Details of your order from "@site".',
        array('@site' => variable_get('site_name'))
      );
      break;
  }
  $message['body'] = $params['message'];
}

/**
 * Helper function to send notifications when a new order.
 */
function lightshop_mail_send($node, $key) {
  $site_mail = variable_get('lightshop_basket_email',
    variable_get('site_mail', ini_get('sendmail_from'))
  );
  $user_mail = $node->order_mail;

  $to = ($key == 'user') ? $user_mail : $site_mail;
  $from = ($key == 'user') ? $site_mail : $user_mail;

  $params['message'] = theme('lightshop_mail_notice', array(
      'node' => $node,
      'destination' => $key,
    ));

  drupal_mail('lightshop', $key, $to, language_default(), $params, $from);
}

