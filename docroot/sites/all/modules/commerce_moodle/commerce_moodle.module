<?php

/**
 * @file
 * Provides Commerce integration with Moodle.
 */

/**
 * Implements hook_menu().
 */
function commerce_moodle_menu() {
  $items['admin/commerce/config/moodle'] = array(
    'title'            => 'Commerce Moodle Integration settings',
    'description'      => 'Set Moodle product types',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('commerce_moodle_admin_settings'),
    'access arguments' => array('administer checkout'),
    'file'             => 'commerce_moodle.admin.inc',
  );
  return $items;
}

/**
 * Enroll current user to Moodle course, by the Moodle course internal number.
 *
 * @param String $internal_number
 *   Course internal number in Moodle.
 *
 * @param Int $time_end
 *   Enrollment end time, in POSIX format. 0 (default) for unlimited.
 *
 * @return String
 *   The course id in Moodle, or FALSE if there is an error.
 */
function commerce_moodle_enroll_to_course_by_course_number($internal_number, $time_end = 0) {

  global $user;
  $time = REQUEST_TIME;

  // User start time of course.
  $time_start = $time;

  // Moodle role. 5 = student.
  $moodle_role_id = 5;

  // Moodle context. 50 = course.
  $moodle_context_level = 50;

  // Moodle user id for the record updates. 2 = admin.
  $moodle_modifier_id = 2;

  // Connect to the Moodle database.
  $con = moodle_connector_connect();
  if (!$con) {
    watchdog('Commerce Moodle', "Error connecting to the Moodle database.");
    return FALSE;
  }

  try {
    // Get Moodle user id.
    $moodle_user_id = $con->query("SELECT id FROM {user} WHERE username = :user_name", array(
      ':user_name' => $user->name,
    ))->fetchField();

    if (!$moodle_user_id) {
      watchdog('Commerce Moodle', "Cannot enroll user '%user' because it does not exist in Moodle.", array(
        '%user' => $user->name,
      ));
      return FALSE;
    }

    // Get Moodle course id, from course number.
    $moodle_course_id = $con->query("SELECT id FROM {course} WHERE idnumber = :idnumber", array(
      ':idnumber' => $internal_number,
    ))->fetchField();

    if (!$moodle_course_id) {
      watchdog('Commerce Moodle', "Cannot enroll user because a course with the internal number '%course' does not exist in Moodle.", array(
        '%course' => $internal_number,
      ));
      return FALSE;
    }

    // Get the 'manual' enrolment type for the course.
    $moodle_enrol_id = $con->query("SELECT id FROM {enrol} WHERE enrol = :enrol AND courseid = :courseid", array(
      ':enrol'    => 'manual',
      ':courseid' => $moodle_course_id,
    ))->fetchField();

    // Get the context id.
    $moodle_context_id = $con->query("SELECT id FROM {context} WHERE contextlevel = :contextlevel AND instanceid = :instanceid", array(
      ':contextlevel' => $moodle_context_level,
      ':instanceid'   => $moodle_course_id,
    ))->fetchField();
  }
  catch (Exception $e) {
    watchdog('commerce_moodle', 'Error getting data from the Moodle database: ' . print_r($e->getMessage(), TRUE), array(), WATCHDOG_ERROR);
    return FALSE;
  }

  try {
    // Insert the enrolment.
    $con->insert('user_enrolments')
      ->fields(array(
        'status'       => 0,
        'enrolid'      => $moodle_enrol_id,
        'userid'       => $moodle_user_id,
        'timestart'    => $time_start,
        'timeend'      => $time_end,
        'modifierid'   => $moodle_modifier_id,
        'timecreated'  => $time,
        'timemodified' => $time,
      ))
      ->execute();

    // Insert the role assignment.
    $con->insert('role_assignments')
      ->fields(array(
        'roleid'       => $moodle_role_id,
        'contextid'    => $moodle_context_id,
        'userid'       => $moodle_user_id,
        'timemodified' => $time,
        'modifierid'   => $moodle_modifier_id,
        'component'    => '',
        'itemid'       => 0,
        'sortorder'    => 0,
      ))
      ->execute();
  }
  catch (PDOException $e) {
    watchdog('Commerce Moodle', "Error inserting enrollment or role assignement for user '%user' (id %user_id) and course internal number '%course'.", array(
      '%user'      => $user->name,
      '%user_id'   => $moodle_user_id,
      '%course'    => $internal_number,
    ));
    return FALSE;
  }

  return $moodle_course_id;
}


/**
 * Implements hook_commerce_checkout_complete().
 *
 * Enroll online course(s) to user in Moodle when the product is bought.
 */
function commerce_moodle_commerce_checkout_complete($order) {

  $product_types = variable_get('commerce_moodle_product_types');

  if (!$product_types) {
    watchdog('Commerce Moodle', "Not doing anything because the product types are not set.");
  }
  else {
    $ow = entity_metadata_wrapper('commerce_order', $order);
    foreach ($ow->commerce_line_items as $line_item) {

      $is_product = in_array($line_item->type->value(), commerce_product_line_item_types());
      if (!$is_product) {

        // Skip line item.
        continue;
      }

      $is_moodle_course = !empty($product_types[$line_item->commerce_product->type->value()]);
      if (!$is_moodle_course) {

        // Skip product.
        continue;
      }

      // Get Drupal product SKU. Should be also a Moodle course internal number.
      $sku = $line_item->commerce_product->sku->value();

      // Try to enroll current user to course.
      commerce_moodle_enroll_to_course_by_course_number($sku);
    }
  }
}
