<?php

/**
 * @file
 * FileField Role Limit: Configure upload max size limit per role.
 *
 * The FileField Role Limit module helps to configure different
 * FileField max upload size settings for each user role as well as
 * file extension types per user.
 */

/**
 * Implements hook_help().
 */
function filefield_role_limit_help($path, $arg) {
  switch ($path) {
    case 'admin/help#filefield_role_limit':
      // Return a line-break version of the module README.txt.
      return _filter_autop(file_get_contents(dirname(__FILE__) . "/README.txt"));
  }
}

/**
 * Implements hook_element_info_alter().
 */
function filefield_role_limit_element_info_alter(&$type) {
  if (isset($type['managed_file'])) {
    $type['managed_file']['#process'][] = 'filefield_role_limit_file_field_process';
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function filefield_role_limit_field_widget_image_image_form_alter(&$widget, $context) {
  // Altering 'image_image' widget.
  _filefield_role_limit_field_widget_file_form_alter($widget, $context);
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function filefield_role_limit_field_widget_file_generic_form_alter(&$element, &$form_state, $context) {
// Altering 'file_generic' widget.
  _filefield_role_limit_field_widget_file_form_alter($element, $form_state);
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function filefield_role_limit_field_widget_media_generic_form_alter(&$element, &$form_state, $context) {
  // Altering 'media_generic' widget.
  $max_upload_size_plain = _filefield_role_limit_get_element_max_size($context, NULL, 'file', TRUE);
  $type_upload = _filefield_role_limit_get_element_type($context);
  $element['#media_options']['global']['max_filesize'] = $max_upload_size_plain;
  $element['#media_options']['global']['file_extensions'] = $type_upload;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for field_ui_field_edit_form().
 */
function filefield_role_limit_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['instance']['widget']['type']['#value'])
    && in_array($form['instance']['widget']['type']['#value'], _filefield_role_limit_supported_widgets())) {
    $roles = user_roles();
    if (!empty($roles)) {
      $current_maxsize = format_size(file_upload_max_size());
      $perfile_description = t('Specify the size limit that applies to each file separately for users for each role.');
      $perfile_description .= ' ' . t('Enter a value like "512" (bytes), "80 KB" (kilobytes) or "50 MB" (megabytes) in order to restrict the allowed file size.');
      $perfile_description .= ' ' . t("If you leave this empty the file sizes will be limited only by PHP's maximum post and file upload sizes");
      $perfile_description .= ' ' . t('(current limit <strong>%limit</strong>).', array('%limit' => $current_maxsize));
      $perfile_description .= ' ' . t('Also specify the allowable filetype extensions: separate extensions with a space or comma and do not include the leading dot.');
      $form['instance']['settings']['filefield_role_limit_file_per_role'] = array(
        '#type' => 'fieldset',
        '#title' => t('File upload restrictions per role'),
        '#description' => $perfile_description,
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
        '#weight' => $form['instance']['settings']['max_filesize']['#weight'] + 1,
      );
      foreach ($roles as $rid => $role) {
        $default_max_value = '';
        $default_type_value = '';
        if (isset($form['#instance']['settings']['filefield_role_limit_file_per_role']['max_filesize_per_file_role_' . $rid])) {
          $default_max_value = $form['#instance']['settings']['filefield_role_limit_file_per_role']['max_filesize_per_file_role_' . $rid];
        }
        if (isset($form['#instance']['settings']['filefield_role_limit_file_per_role']['filetypes_per_file_role_' . $rid])) {
          $default_type_value = $form['#instance']['settings']['filefield_role_limit_file_per_role']['filetypes_per_file_role_' . $rid];
        }
        $form['instance']['settings']['filefield_role_limit_file_per_role']['max_filesize_per_file_role_' . $rid] = array(
          '#type' => 'textfield',
          '#title' => t('Maximum upload size per file for role %role', array('%role' => $role)),
          '#default_value' => $default_max_value,
          '#element_validate' => array('_filefield_role_limit_widget_settings_max_filesize_per_file_validate'),
        );
        $form['instance']['settings']['filefield_role_limit_file_per_role']['filetypes_per_file_role_' . $rid] = array(
          '#type' => 'textfield',
          '#title' => t('Allowed file extensions for role %role', array('%role' => $role)),
          '#default_value' => $default_type_value,
          '#element_validate' => array('_file_generic_settings_extensions'),
        );
      }
    }
  }
}

/**
 * Element process callback for file-based fields.
 *
 * Adds a role-specific max size upload limit to the current file-based field
 * as well as file extension types per user.
 */
function filefield_role_limit_file_field_process(&$element, &$form_state, $form) {

  if (isset($element['#field_name'])) {
    $max_upload_size_plain = 0;
    if (isset($element['#language']) && isset($form_state['field'][$element['#field_name']][$element['#language']])) {
      $max_upload_size_plain = _filefield_role_limit_get_element_max_size($form_state['field'][$element['#field_name']][$element['#language']]);
    }
    elseif (isset($form_state['field'][$element['#field_name']]['und'])) {
      $max_upload_size_plain = _filefield_role_limit_get_element_max_size($form_state['field'][$element['#field_name']]['und']);
    }
    if ($max_upload_size_plain > 0) {
      $element['#upload_validators']['file_validate_size'][0] = $max_upload_size_plain;
    }
    $type_upload = '';
    if (isset($element['#language']) && isset($form_state['field'][$element['#field_name']][$element['#language']])) {
      $type_upload = _filefield_role_limit_get_element_type($form_state['field'][$element['#field_name']][$element['#language']]);
    }
    elseif (isset($form_state['field'][$element['#field_name']]['und'])) {
      $type_upload = _filefield_role_limit_get_element_type($form_state['field'][$element['#field_name']]['und']);
    }
    if ($type_upload <> '') {
      $element['#upload_validators']['file_validate_extensions'][0] = $type_upload;
    }
  }
  return $element;
}

/**
 * Alter file-based widgets to modify element max upload size and description
 * as well as for allowable file types per role.
 */
function _filefield_role_limit_field_widget_file_form_alter(&$widget, &$context) {
  $firstkey = NULL;
  foreach (element_children($widget) as $key) {
    if (is_null($firstkey)) {
      $firstkey = $key;
    }
    $element = $widget[$key];
    $max_upload_size_plain = 0;
    if (isset($element['#language']) && isset($context['field'][$element['#field_name']][$element['#language']])) {
      $max_upload_size_plain = _filefield_role_limit_get_element_max_size($context['field'][$element['#field_name']][$element['#language']]);
    }
    elseif (isset($context['field'][$element['#field_name']]['und'])) {
      $max_upload_size_plain = _filefield_role_limit_get_element_max_size($context['field'][$element['#field_name']]['und']);
    }
    if ($max_upload_size_plain > 0) {
      $widget[$key]['#upload_validators']['file_validate_size'][0] = $max_upload_size_plain;
      $widget[$key]['#description'] = theme('file_upload_help', array('description' => '', 'upload_validators' => $widget[$key]['#upload_validators']));
    }
    $type_upload = '';
    if (isset($element['#language']) && isset($context['field'][$element['#field_name']][$element['#language']])) {
      $type_upload = _filefield_role_limit_get_element_type($context['field'][$element['#field_name']][$element['#language']]);
    }
    elseif (isset($context['field'][$element['#field_name']]['und'])) {
      $type_upload = _filefield_role_limit_get_element_type($context['field'][$element['#field_name']]['und']);
    }
    if ($type_upload != '') {
      $widget[$key]['#upload_validators']['file_validate_extensions'][0] = $type_upload;
      $widget[$key]['#description'] = theme('file_upload_help', array('description' => '', 'upload_validators' => $widget[$key]['#upload_validators']));
    }
  }
  if (isset($widget['#file_upload_description']) && !is_null($firstkey)) {
    $widget['#file_upload_description'] = theme('file_upload_help', array('description' => '', 'upload_validators' => $widget[$firstkey]['#upload_validators']));
  }
}

/**
 * Supported widgets list for current module.
 *
 * @return array
 *   The list of supported widgets.
 */
function _filefield_role_limit_supported_widgets() {
  $types = array('file_generic', 'image_image', 'media_generic');
  drupal_alter('filefield_role_limit_supported_widgets', $types);
  return $types;
}

/**
 * Get the upload size limit for a specified or current user.
 *
 * Each user role could have a different upload size limit,
 * so it will be taken the max upload size limit through all user roles.
 * If use has no limits for its roles, the default field settings will be
 * taken.
 *
 * @param array $instance
 *   A field element instance as array.
 * @param object|null $account
 *   (optional) The user to be checked.
 *   If no user is provided, the current user will be used.
 * @param string $type
 *   (optional) The type of limit (possible values: 'file', 'node').
 * @param bool $is_raw
 *   (optional) If TRUE, it will return a not parse limit value
 *   like "512" (bytes), "80K" (kilobytes) or "50M" (megabytes).
 *
 * @return int|string
 *   The max upload size for the user as integer or string.
 */
function _filefield_role_limit_get_element_max_size($instance, $account = NULL, $type = 'file', $is_raw = FALSE) {
  static $limits;
  if (is_null($account)) {
    global $user;
    $account = $user;
  }
  if (!is_array($limits)) {
    $limits = array();
  }
  if (!isset($limits[$instance['instance']['field_name']])) {
    $limits[$instance['instance']['field_name']] = array();
  }
  if (!isset($limits[$instance['instance']['field_name']][$type])) {
    $limits[$instance['instance']['field_name']][$type] = array();
  }
  $raw_type = 'parsed';
  if ($is_raw) {
    $raw_type = 'raw';
  }
  if (isset($limits[$instance['instance']['field_name']][$type][$account->uid][$raw_type])
    && !empty($limits[$instance['instance']['field_name']][$type][$account->uid][$raw_type])) {
    return $limits[$instance['instance']['field_name']][$type][$account->uid][$raw_type];
  }
  $max_upload_size = 0;
  $roles = array();
  if (!empty($account->roles)) {
    $roles = array_keys($account->roles);
  }
  if (isset($instance['instance']['settings']['filefield_role_limit_file_per_role'])) {
    $widgets = $instance['instance']['settings']['filefield_role_limit_file_per_role'];
    if (!empty($roles)) {
      foreach ($roles as $rid) {
        if (isset($widgets['max_filesize_per_' . $type . '_role_' . $rid])
          && !empty($widgets['max_filesize_per_' . $type . '_role_' . $rid])
          && parse_size($widgets['max_filesize_per_' . $type . '_role_' . $rid]) > parse_size($max_upload_size)) {
          $max_upload_size = check_plain($widgets['max_filesize_per_' . $type . '_role_' . $rid]);
        }
      }
    }
    // Default settings value.
    if ($max_upload_size == 0 && !empty($instance['instance']['settings']['max_filesize'])) {
      $max_upload_size = check_plain($instance['instance']['settings']['max_filesize']);
    }
    // Default system value.
    if ($max_upload_size == 0) {
      $max_upload_size = file_upload_max_size();
    }
  }
  $limits[$instance['instance']['field_name']][$type][$account->uid]['raw'] = $max_upload_size;
  $limits[$instance['instance']['field_name']][$type][$account->uid]['parsed'] = parse_size($max_upload_size);
  if ($is_raw) {
    return $limits[$instance['instance']['field_name']][$type][$account->uid]['raw'];
  }
  return $limits[$instance['instance']['field_name']][$type][$account->uid]['parsed'];
}

/**
 * Get the allowable file type string for a specified or current user.
 *
 * Each user role could have a different allowable file type.
 * If user has a blank entry for allowable file type for a role,
 * then the default it used.
 * 
 * @param array $instance
 *   A field element instance as array.
 * @param object|null $account
 *   (optional) The user to be checked.
 *   If no user is provided, the current user will be used.
 * @param string $type
 *   (optional) The type of limit (possible values: 'file', 'node').
 *
 * @return string
 *   The allowable file upload types for the user.
 */
function _filefield_role_limit_get_element_type($instance, $account = NULL, $type = 'file') {
  static $limits;
  if (is_null($account)) {
    global $user;
    $account = $user;
  }
  if (!is_array($limits)) {
    $limits = array();
  }
  if (!isset($limits[$instance['instance']['field_name']])) {
    $limits[$instance['instance']['field_name']] = array();
  }
  if (!isset($limits[$instance['instance']['field_name']][$type])) {
    $limits[$instance['instance']['field_name']][$type] = array();
  }
  $raw_type = 'parsed';
  if (isset($limits[$instance['instance']['field_name']][$type][$account->uid][$raw_type])
    && !empty($limits[$instance['instance']['field_name']][$type][$account->uid][$raw_type])) {
    return $limits[$instance['instance']['field_name']][$type][$account->uid][$raw_type];
  }
  $allowed_file_types = '';
  $roles = array();
  if (!empty($account->roles)) {
    $roles = array_keys($account->roles);
  }
  if (isset($instance['instance']['settings']['filefield_role_limit_file_per_role'])) {
    $widgets = $instance['instance']['settings']['filefield_role_limit_file_per_role'];
    if (!empty($roles)) {
      foreach ($roles as $rid) {
        if (isset($widgets['filetypes_per_' . $type . '_role_' . $rid])
          && !empty($widgets['filetypes_per_' . $type . '_role_' . $rid])) {
          $allowed_file_types = check_plain($widgets['filetypes_per_' . $type . '_role_' . $rid]);
        }
      }
    }
    // Default settings value.
    if ($allowed_file_types == '' && !empty($instance['instance']['settings']['file_extensions'])) {
      $allowed_file_types = check_plain($instance['instance']['settings']['file_extensions']);
    }
  }
  $limits[$instance['instance']['field_name']][$type][$account->uid]['type'] = $allowed_file_types;
  return $limits[$instance['instance']['field_name']][$type][$account->uid]['type'];
}

/**
 * Element validate callback for the maximum upload size field for user role.
 *
 * Ensure a size that can be parsed by parse_size() has been entered.
 */
function _filefield_role_limit_widget_settings_max_filesize_per_file_validate($element, &$form_state) {
  if (empty($element['#value'])) {
    // Empty means no size restrictions, so don't throw an error.
    return;
  }
  $max_size = parse_size(check_plain($element['#value']));
  if (is_null($max_size) || !is_numeric($max_size) || $max_size <= 0) {
    $err_message = t('The "@field" option must contain a valid value.', array('@field' => field_filter_xss($element['#title'])));
    $err_message .= ' ' . t('You can either leave the text field empty or enter a string like "512" (bytes), "80 KB" (kilobytes) or "50 MB" (megabytes).');
    form_error($element, $err_message);
  }
  $max_upload_size = file_upload_max_size();
  if ($max_size > $max_upload_size) {
    $max_upload_size_formatted = format_size($max_upload_size);
    $err_message = t('The !field option cannot contain a value bigger than system upload max file size (current limit <strong>%limit</strong>).',
      array(
        '!field' => filter_xss($element['#title'], array('em')),
        '%limit' => $max_upload_size_formatted,
      )
    );
    form_error($element, $err_message);
  }
}
