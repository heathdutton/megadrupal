<?php

/**
 * @file
 * The whammy bar module
 */

/**
 * Implement hook_permissions()
 */
function whammy_bar_permission() {
  return array(
    'administer whammy bar' => array(
      'title' => t('Administer Whammy Bar'),
      'description' => t('Change the settings of the Whammy Bar.'),
    ),
    'use whammy bar' => array(
      'title' => t('Use Whammy Bar'),
      'description' => t('Grant this permission to show the WHammy Bar to a user.'),
    ),
  );
}

/**
 * Implements hook_page_alter().
 *
 * Add the whammy bar to the bottom of the page, to be moved by JS.
 */
function whammy_bar_page_alter(&$page) {
  if (!user_access('use whammy bar')) {
    return;
  }

  $module_path = drupal_get_path('module', 'whammy_bar');
  drupal_add_js($module_path . '/whammy_bar.js', array(
    'type' => 'file',
    'scope' => 'footer',
  ));
  drupal_add_css($module_path . '/whammy_bar.css', array(
    'type' => 'file',
  ));
  $page['page_bottom']['whammy_bar'] = whammy_bar_output();
}

/**
 * Render the Whammy Bar.
 */
function whammy_bar_output() {
  global $user;

  $output = array();
  $links = array();

  $links['home-links'] = l(variable_get('site_name', t('Home')), '<front>', array(
    'attributes' => array('title' => 'Home')
  ));

  // Create content links for all the content types they are allowed to create
  // permissions for node creation are 'create forum content.'
  $create_links = array();
  $weight = 0;
  foreach ($types = node_type_get_types() as $type) {
    $perm = 'create ' . $type->type . ' content';
    if (user_access($perm, $user)) {
      $create_links[] = array('data' => l($type->name, 'node/add/' . $type->type), 'weight' => $weight);
      $weight += 10;
    }
  }

  $links['node-create-links'] = array(
    'data' => l(t('Create'), 'node/add'),
    'children' => $create_links
    );

  $node = menu_get_object();
  if ($node && node_access('update', $node, $user)) {
    $links[] = l(t('Edit Page'), 'node/' . $node->nid . '/edit');
  }

  $user_picture = file_load($user->picture);
  if (!empty($user_picture->uri)) {
    $user_picture_html = theme_image_style(array(
      'style_name' => 'whammy-bar-profile-picture',
      'path' => $user_picture->uri,
      'alt' => t('A picture of handsome you!'),
      'title' => t('A picture of handsome you!'),
      'width' => NULL,
      'height' => NULL,
    ));

    $links['user-picture'] = array(
      'data' => $user_picture_html,
      'class' => array('user-profile-picture'),
    );
  }

  $links['profile-links'] = array(
    'data' => l(t('Hey !user', array('!user' => $user->name)), 'user'),
    'class' => array('user-profile'),
    'children' => array(
      'edit-profile' => array('weight' => 0, 'data' => l(t('Edit profile'), 'user/' . $user->uid . '/edit')),
      'logout' => array('weight' => 100, 'data' => l(t('Logout'), 'user/logout')),
    ),
  );

  foreach (module_implements('whammy_bar_links_alter') as $module) {
    $function = $module . '_whammy_bar_links_alter';
    $function($links);
  }

  foreach($links as $key => $link) {
    if(isset($link['children']) && is_array($link['children'])) {
      // sort by weight
      usort($link['children'], 'whammy_bar_sort_array_by_weight');
      $links[$key]['children'] = $link['children'];
    }
  }

  $output = array(
    '#type' => 'container',
    '#attributes' => array(
      'id' => 'whammy-bar-container',
      'style' => 'display: none;',
      ),
    );

  $output['whammy-bar-links'] = array(
    '#theme' => 'item_list',
    '#items' => $links
    );

  return $output;
}

/**
 * Custom sorting function for usort
 *
 * Sorts an array by an inside key of 'weight'
 * Inspired by: http://stackoverflow.com/a/2699159/43
 */
function whammy_bar_sort_array_by_weight($a, $b) {
    return $a['weight'] - $b['weight'];
}
