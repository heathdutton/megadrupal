<?php
/**
 * @file
 * Integrates NAB Transact Hosted Payment Page.
 *
 * Payment module for the NAB Transact platform using the Hosted Payment Page
 * method.
 *
 * Developed by Ian McLean based on the 2checkout Module
 * http://www.digitalink.com.au/
 *
 * UC3 D7 port by Ted Cooper http://drupal.org/user/784944
 *
 */

/**
 * Define NAB Transact HPP Live URL.
 */
define('UC_NAB_TRANSACT_HPP_LIVE_URL', 'https://transact.nab.com.au/live/hpp/payment');

/**
 * Define NAB Transact HPP Test URL.
 */
define('UC_NAB_TRANSACT_HPP_TEST_URL', 'https://transact.nab.com.au/test/hpp/payment');

/**
 * Implements hook_menu().
 */
function uc_nab_transact_hpp_menu() {
  $items = array();

  // NAB callback URL.
  $items['uc_nab_transact_hpp/complete/%uc_order'] = array(
    'type' => MENU_CALLBACK,
    'title' => t('NAB Transact HPP complete'),
    'page callback' => 'uc_nab_transact_hpp_callback_complete',
    'page arguments' => array(2),
    'access callback' => 'uc_nab_transact_hpp_callback_complete_access',
    'file' => 'uc_nab_transact_hpp.pages.inc',
  );

  // User return URL.
  $items['cart/nabhpp/complete/%uc_order'] = array(
    'type' => MENU_CALLBACK,
    'title' => t('Order complete'),
    'page callback' => 'uc_nab_transact_hpp_user_complete',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
    'file' => 'uc_nab_transact_hpp.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_uc_payment_method().
 */
function uc_nab_transact_hpp_uc_payment_method() {
  $methods = array();

  $title = variable_get('uc_nab_transact_hpp_method_title', t('NAB Transact HPP'));
  $methods['uc_nab_transact_hpp'] = array(
    'name' => t('NAB Transact HPP'),
    'title' => $title,
    'review' => t('Credit card'),
    'desc' => t('Redirect to NAB to pay by credit card.'),
    'callback' => 'uc_nab_transact_hpp_method_callback',
    'redirect' => 'uc_nab_transact_hpp_redirect_offsite',
    'weight' => 1,
    'checkout' => TRUE,
    'no_gateway' => TRUE,
  );

  return $methods;
}

/**
 * Implements hook_ucga_display().
 */
function uc_nab_transact_hpp_ucga_display() {
  // Tell UC Google Analytics to display the e-commerce JS on the custom
  // order completion page for this module.
  if (arg(0) == 'cart' && arg(1) == 'nabhpp' && arg(2) == 'complete') {
    return TRUE;
  }
}

/**
 * Implements hook_uc_payment_method_callback().
 */
function uc_nab_transact_hpp_method_callback($op, &$order, $form = NULL, &$form_state = NULL) {
  switch ($op) {
    case 'cart-details':
      return array('#markup' => t('Continue with checkout to complete payment.'));

    case 'settings':

      $form['uc_nab_transact_hpp_vendor_name'] = array(
        '#type' => 'textfield',
        '#title' => t('Vendor Name'),
        '#description' => t('Your NAB merchant ID.'),
        '#default_value' => variable_get('uc_nab_transact_hpp_vendor_name', 'NAB0010'),
        '#size' => 16,
      );

      $form['uc_nab_transact_hpp_method_title'] = array(
        '#type' => 'textfield',
        '#title' => t('Payment method title'),
        '#default_value' => variable_get('uc_nab_transact_hpp_method_title', t('NAB Transact HPP')),
      );

      // Fallback emails.
      $notify_email = '';
      $email_variables = array(
        'uc_nab_transact_hpp_payment_alert',
        'uc_store_email',
        'site_mail',
      );
      foreach ($email_variables as $var) {
        $notify_email = variable_get($var, '');
        if ($notify_email) {
          break;
        }
      }

      $form['uc_nab_transact_hpp_payment_alert'] = array(
        '#type' => 'textfield',
        '#title' => t('Merchant Notification Email'),
        '#description' => t('If you have not set up an email address in the administration, reporting and search tool to receive payment notifications, provide the email address that you want to receive an email when an order is processed by the NAB Transact Payment Page.'),
        '#default_value' => $notify_email,
      );

      $form['uc_nab_transact_hpp_refund_policy'] = array(
        '#type' => 'textfield',
        '#title' => t('Refund Policy URL'),
        '#description' => t('Link to your refund policy.'),
        '#default_value' => variable_get('uc_nab_transact_hpp_refund_policy', ''),
      );

      $form['uc_nab_transact_hpp_privacy_policy'] = array(
        '#type' => 'textfield',
        '#title' => t('Privacy Policy URL'),
        '#description' => t('Link to your privacy policy.'),
        '#default_value' => variable_get('uc_nab_transact_hpp_privacy_policy', ''),
      );

      $form['uc_nab_transact_hpp_information_fields'] = array(
        '#type' => 'textfield',
        '#title' => t('Information fields'),
        '#description' => t('Comma separated list of non-product fields containing information regarding the order.'),
        '#default_value' => variable_get('uc_nab_transact_hpp_information_fields', 'Name,Street_address,Street_address2,City,State,Post_code,Country,Email,Phone'),
      );

      $form['uc_nab_transact_hpp_suppress_field_names'] = array(
        '#type' => 'textfield',
        '#title' => t('Suppressed field names'),
        '#description' => t('Comma separated list of information fields whose names should not be displayed on the invoice.'),
        '#default_value' => variable_get('uc_nab_transact_hpp_suppress_field_names', 'Street_address2'),
      );

      $form['uc_nab_transact_hpp_return_link_text'] = array(
        '#type' => 'textfield',
        '#title' => t('Return link text'),
        '#description' => t("The text of the link back to the merchant's web site"),
        '#default_value' => variable_get('uc_nab_transact_hpp_return_link_text', t('Click here to complete your order.')),
      );

      $form['uc_nab_transact_hpp_payment_server'] = array(
        '#type' => 'select',
        '#title' => t('Payment Server'),
        '#description' => t('Select Test or Live payment page.'),
        '#options' => array(
          'test' => t('Test payment page'),
          'live' => t('Live payment page'),
        ),
        '#default_value' => variable_get('uc_nab_transact_hpp_payment_server', 'test'),
      );

      $form['uc_nab_transact_hpp_checkout_button'] = array(
        '#type' => 'textfield',
        '#title' => t('Order review submit button text'),
        '#description' => t('Text for the submit button on the order review page.'),
        '#default_value' => variable_get('uc_nab_transact_hpp_checkout_button', t('Submit Order')),
      );

      $form['uc_nab_transact_hpp_reply_link_allowed_ips'] = array(
        '#type' => 'textarea',
        '#title' => t('Allowed IPs for reply_link_url'),
        '#description' => t('Comma separated list of IP addresses that are allowed to access the reply callback which updates the order status.'),
        '#default_value' => implode(', ', variable_get('uc_nab_transact_hpp_reply_link_allowed_ips', array('203.22.215.23'))),
        '#element_validate' => array('_uc_nab_transact_hpp_validate_allowed_ips'),
      );

      return $form;
  }
}

/**
 * Access callback for reply_link_url callback. Limit by IP address or
 * fallback to "access content" permission.
 */
function uc_nab_transact_hpp_callback_complete_access() {
  $ips = variable_get('uc_nab_transact_hpp_reply_link_allowed_ips', '');

  if ($ips) {
    if (in_array($_SERVER['REMOTE_ADDR'], $ips)) {
      return TRUE;
    }
    else {
      watchdog(
        'uc_nab_transact_hpp',
        'Blocked reply_link_url access from unlisted IP address. <pre>@get</pre>',
        array('@get' => print_r($_GET, TRUE)),
        WATCHDOG_WARNING,
        l(t('settings'), 'admin/store/settings/payment/method/uc_nab_transact_hpp')
      );
    }
  }

  // Fallback to permissions.
  else {
    return user_access('access content');
  }
}

/**
 * Validate, and alter into an array, the allowed IP values.
 */
function _uc_nab_transact_hpp_validate_allowed_ips($element, &$form_state, $form) {

  $ips = array();
  $rawips = explode(',', $form_state['values']['uc_nab_transact_hpp_reply_link_allowed_ips']);

  // If that resulted in any kind of values, clean up validate each IP address.
  if ($rawips) {
    foreach ($rawips as $rawip) {
      $ip = trim($rawip);

      // Good for IPv4 and IPv6.
      if (filter_var($ip, FILTER_VALIDATE_IP)) {
        $ips[] = $ip;
      }
      else {
        form_set_error('uc_nab_transact_hpp_reply_link_allowed_ips', t('%ip is not a valid IP address.', array('%ip' => $ip)));
        return;
      }
    }
  }

  // Translate the comma separated values into something we can quickly use to
  // check that the IP is present.
  form_set_value($element, $ips, $form_state);
}

/**
 * Form to redirect to offsite Hosted Payment Page.
 */
function uc_nab_transact_hpp_redirect_offsite($form, &$form_state, $order) {
  $country = uc_get_country_data(array('country_id' => $order->billing_country));
  if ($country === FALSE) {
    $country = array(0 => array('country_iso_code_3' => 'Australia'));
  }

  // @todo Add gst_rate/gst_added support which would somehow tie into the
  // avaialble taxes modules.
  // @todo Does not confirm currency prior to allowing this. Assuming that NAB
  // transact HPP excepts AUD but currently any currency will be passed as is.

  $data = array(
    'vendor_name' => variable_get('uc_nab_transact_hpp_vendor_name', 'NAB0010'),
    'payment_alert' => variable_get('uc_nab_transact_hpp_payment_alert', ''),
    'privacy_policy' => variable_get('uc_nab_transact_hpp_privacy_policy', ''),
    'refund_policy' => variable_get('uc_nab_transact_hpp_refund_policy', ''),
    'payment_reference' => $order->order_id,
    'return_link_text' => variable_get('uc_nab_transact_hpp_return_link_text', t('Click here to complete your order.')),
    // Get NAB to callback to us as well. Must be port 80.
    'reply_link_url' => url('uc_nab_transact_hpp/complete/' . $order->order_id, array(
      'query' => array(
        'bank_reference' => '',
        'payment_amount' => '',
      ),
      'absolute' => TRUE,
    )),
    // Return the user to checkout complete page.
    'return_link_url' => url('cart/nabhpp/complete/' . $order->order_id, array(
      'query' => array(
        'bank_reference' => '',
      ),
      'absolute' => TRUE,
    )),
    'Name' => $order->billing_first_name . ' ' . $order->billing_last_name,
    'Street_address' => $order->billing_street1,
    'Street_address2' => $order->billing_street2,
    'City' => $order->billing_city,
    'State' => uc_get_zone_code($order->billing_zone),
    'Post_code' => $order->billing_postal_code,
    'Country' => $country[0]['country_iso_code_3'],
    'Email' => $order->primary_email,
    'receipt_address' => $order->primary_email,
    'Phone' => $order->billing_phone,
    'print_zero_qty' => 'FALSE',
    'information_fields' => variable_get('uc_nab_transact_hpp_information_fields', 'Name,Street_address,Street_address2,City,State,Post_code,Country,Email,Phone'),
    'suppress_field_names' => variable_get('uc_nab_transact_hpp_suppress_field_names', 'Street_address2'),
  );

  // Add products. Care must be taken to not duplicate the title as a product
  // with attributes will overwrite the previous incarnation.
  $product_suffixes = array();
  foreach ($order->products as $product) {
    if (isset($product_suffixes[$product->title])) {
      $title = sprintf('%s (%d)', $product->title, $product_suffixes[$product->title]++);
      $data[$title] = $product->qty . ',' . uc_currency_format($product->price, FALSE, FALSE, '.');
    }
    else {
      $data[$product->title] = $product->qty . ',' . uc_currency_format($product->price, FALSE, FALSE, '.');
      $product_suffixes[$product->title] = 1;
    }
  }

  // Add line items.
  foreach ($order->line_items as $line_item) {
    $data[$line_item['title']] = uc_currency_format($line_item['amount'], FALSE, FALSE, '.');
  }

  $form = array();

  // @todo A payment amount of $0 should require the "Free Order" module and
  // not have a working solution provided here.
  if  ($order->order_total == 0) {
    $form['#action'] = url('cart/nabhpp/complete/' . $order->order_id, array(
      'absolute' => TRUE,
    ));
  } else {
    $payment_server = variable_get('uc_nab_transact_hpp_payment_server', 'test');
    $action = ($payment_server == 'live') ? UC_NAB_TRANSACT_HPP_LIVE_URL : UC_NAB_TRANSACT_HPP_TEST_URL;
    $form['#action'] = $action;
  }

  foreach ($data as $name => $value) {
    $form[$name] = array('#type' => 'hidden', '#value' => trim($value));
  }

  $form['actions'] = array(
    '#type' => 'actions',

    'submit' => array(
      '#type' => 'submit',
      '#value' => variable_get('uc_nab_transact_hpp_checkout_button', t('Submit Order')),
    ),
  );

  return $form;
}
