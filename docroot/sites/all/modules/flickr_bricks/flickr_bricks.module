<?php
/**
 * @file
 * Flickr bricks will pull the latest thumbnail images from Flickr API.
 */

/**
 * Implements hook_permission().
 */
function flickr_bricks_permission() {
  return array(
    'administer flickr_bricks module'	=> array(
      'title' => t('Administer flickr_bricks module'),
      'description' => t('Perform administration tasks for flickr_bricks module.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function flickr_bricks_menu() {
  $items['admin/config/services/flickr_bricks'] = array(
    'title' => 'Flickr Bricks',
    'description' => 'Configure flickr bricks feed URL to get the images.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('flickr_bricks_admin_settings_form'),
    'access arguments' => array('administer flickr bricks module'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'flickr_bricks.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_block_info().
 */
function flickr_bricks_block_info() {
  $blocks['flickr_bricks'] = array(
    'info' => t('Flickr Bricks'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  return $blocks;
}

/**
 * To get the Flickr Contents.
 */
function flickr_bricks_feed_contents() {
  drupal_add_css(drupal_get_path('module', 'flickr_bricks') . '/css/flickr.css');

  $block = array();
  $args = '';
  $flickr_feed_url = check_url(variable_get('flickr_bricks_feed_url', 'http://api.flickr.com/services/feeds/photos_public.gne'));
  $flickr_tags = check_plain(str_replace(' ', '', variable_get('flickr_bricks_tags', '')));
  $flickr_ids = check_plain(str_replace(' ', '', variable_get('flickr_bricks_ids', '')));
  $flickr_img_count = check_plain(variable_get('flickr_bricks_img_count', '15'));

  if (!empty($flickr_ids)) {
    $args = '&ids=' . $flickr_ids;
  }
  if (!empty($flickr_tags)) {
    $args .= '&tags=' . $flickr_tags . '&tagmode=any';
  }
  $url = $flickr_feed_url . "?lang=en-us&format=xml" . $args;
  $content = file_get_contents($url);

  $rss = simplexml_load_string($content);
  if ($rss) {
    $attributes = array(
      'id' => 'flickr_wrapper',
      'class' => 'flickr_wrapper',
    );
    $counter = 1;
    $items = isset($rss->entry) ? $rss->entry : NULL;
    if (empty($items)) {
      $block['data'] = t('No photos found. Please check your Flickr bricks settings');
    }
    else {
      foreach ($items as $item) {
        foreach ($item->link as $link) {
          if ($link['rel'] == "enclosure") {
            if (strpos($link['href'], 'www.flickr.com') === FALSE) {
              // TODO: Find a better way to identify all the photo's
              // from the feed.
              $image = substr($link['href'], 0, strrpos($link['href'], '_', -1)) . '_s.jpg';
            }
          }
        }
        if (empty($image)) {
          continue;
        }
        $title = $item->title;
        $href_link = $item->link['href'];
        $content = $item->content;

        if ($counter <= $flickr_img_count) {
          $img_source = array(
            'path' => $image,
            'alt' => t('!title', array('!title' => $title)),
            'width' => '44px',
            'height' => '44px',
          );
          $image_source = theme('image', $img_source);
          $block[] = array(
            'data' => l($image_source, $href_link, array('html' => TRUE, 'attributes' => array('target' => '_blank'))),
            'class' => array('flickr_item'),
          );
        }
        $counter++;
      }
    }
    return theme('item_list', array('items' => $block, 'attributes' => $attributes));
  }
}

/**
 * Implements hook__block_view().
 */
function flickr_bricks_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'flickr_bricks':
      $block['subject'] = t('My Flickr Photos');
      $block['content'] = flickr_bricks_feed_contents();
      break;
  }
  return $block;
}
