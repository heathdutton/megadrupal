<?php

/**
 * @file
 * Provides failover feature.
 * Works with Cloud, Cluster and Scripting module.
 *
 * Copyright (c) 2010-2011 DOCOMO Innovations, Inc.
 *
 */

/**
 * Updated   by yas   2011/02/02
 */

module_load_include('inc', 'cloud',           'cloud_constants'         );
module_load_include('inc', 'cloud_failover', 'cloud_failover_constants');
module_load_include('inc', 'cloud_failover', 'cloud_failover_helper'   );
module_load_include('inc', 'cloud_failover', 'cloud_failover_menu'     );
module_load_include('inc', 'cloud_failover', 'cloud_failover_db'       );
module_load_include('inc', 'cloud_failover', 'cloud_failover'          );

/**
 * Implements hook_cron().
 * Call the cron as per setting in cloud_common.inc.
 * Currently two are supported Collectd/Nagios.
 * Entry Point for failover monitoring Cron.
 */
function cloud_failover_cron() {
  $cloud_array = cloud_get_clouds();
  for ($row_counter = 0; $row_counter < count($cloud_array); $row_counter++) {
    $cloud_context = $cloud_array[$row_counter]["module"];
    if ($cloud_context == "aws_cloud") {
      $cloud  = $cloud_array[$row_counter]["cloud_name"];
      $url    = $cloud_array[$row_counter]["monitoring_server_url"];
      $userid = $cloud_array[$row_counter]["monitoring_server_user_id"];
      $pwd    = $cloud_array[$row_counter]["monitoring_server_password"];

      _cloud_failover_dump_host_status_from_nagios($cloud, $url, $userid, $pwd);
      _cloud_failover_dump_service_status_from_nagios($cloud, $url, $userid, $pwd);
      _cloud_failover_check_instance_elastic_ip_cron($cloud_context, $cloud, $url);
      _cloud_failover_check_script_executing_servers_cron($cloud_context, $cloud);
      _cloud_failover_check_newly_launched_servers_cron($cloud_context, $cloud, $url);
      _cloud_failover_launch_failed_server_using_nagios($cloud_context, $cloud, $url);
    }
  }
}

/**
 * Implements hook_permission().
 */
function cloud_failover_permission() {
   return array(
    'create failover scenario' => array(
      'title' => t('create failover scenario'  ),
      'description' => t('Permission to create failover scenario'),
    ),
    'list failover scenarios' => array(
      'title' => t('list failover scenarios'),
      'description' => t('Permission to view failover scenarios'),
    ),
    'edit failover scenario' => array(
      'title' => t('edit failover scenario'),
      'description' => t('Permission to edit failover scenarios'),
    ),
    'delete failover scenario' => array(
      'title' => t('delete failover scenario'),
      'description' => t('Permissiont to delete failover scenario'),
    ),
    'view failover scenario' => array(
      'title' => t('view failover scenario'),
      'description' => t('Permission to view failover scenarios'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function cloud_failover_menu() {
  $items = array();
  $items['design/failover/scenarios'] = array(
    'title' => 'Failover Scenarios',
    'description' => 'Get a quick synopsis of Failover Scenarios.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cloud_failover_scenario_list', 'cloud_failover'),
    'weight' => -1,
    'access arguments' => array('list failover scenarios'),
  );
  $items['failover/stop_failover'] = array(
    'title' => 'Stop Failover',
    'page callback' => '_cloud_failover_stop_for_instance',
    'access arguments' => array('list failover scenarios'),
    'type' => MENU_CALLBACK,
  );
  $items['design/failover/view'] = array(
    'title' => 'Failover Scenario Details',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cloud_failover_scenario_view', 'cloud_failover'),
    'access arguments' => array('view failover scenario'),
    'type' => MENU_CALLBACK,
  );
  $items['design/failover/create'] = array(
    'title' => 'Add/Edit Failover Scenario',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cloud_failover_scenario_new', 'cloud_failover'),
    'access arguments' => array('create failover scenario'),
    'type' => MENU_CALLBACK,
  );
  $items['design/failover/delete'] = array(
    'title' => 'Delete',
    'page callback' => '_cloud_failover_delete_scenario',
    'page arguments' => array('cloud_failover'),
    'access arguments' => array('list failover scenarios'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function cloud_failover_theme() {

  return array(
    'cloud_failover_scenario_list' => array(
      'render element' => 'form',
      'file' => 'cloud_failover.module',
    ),
    'cloud_failover_scenario_new' => array(
      'render element' => 'form',
      'file' => 'cloud_failover.module',
    ),
    'cloud_failover_scenario_view' => array(
      'render element' => 'form',
      'file' => 'cloud_failover.module',
    ),
  );
}

/**
 *  Implementation of hook_cloud_action_notify().
 */
function cloud_failover_cloud_action_notify($op, $params) {
  switch ($op) {
    case 'launch':
      if (isset($params['cloud_context']) && isset($params['instance_id']) && isset($params['template_id'])) {
        //_cloud_failover_info_insert($params['cloud_context'], $params['instance_id'], $params['template_id']);
        //_cloud_failover_update_monitoring_server_entries($params['cloud_context']);
      }
      break;
    case 'enable_failover':
      if (isset($params['cloud_context']) && isset($params['instance_id'])) {
        $cloud_context = $params['cloud_context'];
        $instance_id   = $params['instance_id'];
        $params['instance_id'] = $instance_id;
        $cloud  = cloud_get_module_name($cloud_context);
        $pub_ip = cloud_get_instance_pub_ip($cloud, $cloud_context, $params);
        $dns    = cloud_get_dns_name($instance_id, $cloud_context);
        if (empty($pub_ip) && !empty($dns)) {
          _cloud_failover_update_failover_flag($params['cloud_context'], $params['instance_id'], CLOUD_FAILOVER_FLAG_READY_FOR_CHECK);
          _cloud_failover_update_monitoring_server_entries($params['cloud_context']);
        }
        else {
          _cloud_failover_update_failover_flag($params['cloud_context'], $params['instance_id'], CLOUD_FAILOVER_FLAG_INITIATED);
          _cloud_failover_update_eip_info($params['cloud_context'], $params['instance_id'], $pub_ip,   CLOUD_FAILOVER_FLAG_INITIATED);
        }
      }
      break;
    case 'disable_failover':
      if (isset($params['cloud_context']) && isset($params['instance_id'])) {
        _cloud_failover_update_failover_flag($params['cloud_context'], $params['instance_id'], CLOUD_FAILOVER_FLAG_NO_FAILOVER);
        _cloud_failover_update_eip_info($params['cloud_context'], $params['instance_id'], '',   CLOUD_FAILOVER_FLAG_NO_FAILOVER);
        _cloud_failover_update_monitoring_server_entries($params['cloud_context']);
      }
      break;
    case 'update_eip_info':
      if (isset($params['cloud_context']) && isset($params['instance_id'])) {
        //Lets start from scratch because it is going to take some time for eip assignment.
        _cloud_failover_update_eip_info($params['cloud_context'], $params['instance_id'], $params['ip'],   CLOUD_FAILOVER_FLAG_INITIATED);
      }
      break;
  }
}

/**
 * Form for creating a new failover scenario 
 */
function cloud_failover_scenario_new($form_submit) {

  drupal_add_js(cloud_get_module_base() . 'js/cloud_failover.js');

  $fsId = isset($_REQUEST['id']) ? $_REQUEST['id'] : FALSE;
  $action = "Add";
  $nickname = isset($_REQUEST['name_text']) ? $_REQUEST['name_text'] : FALSE;

  $form['name']['name_label'] = array(
    '#type' => 'item',
    '#title' => t('Nickname'),
  );
  $form['name']['name_text'] = array(
    '#type' => 'textfield',
    '#size' => 50,
  );

  $commandList = _cloud_failover_get_commands();
  $form['cloud_failover_command']['cloud_failover_command_label'] = array(
    '#type' => 'item',
    '#title' => t('Select Protocol'),
  );

  $failoverCommandElem = array(
    '#type' => 'fieldset',
    '#prefix' => '<div class="container-inline">',
    '#suffix' => '</div>',
  );
  $failoverCommandElem['cloud_failover_command_select'] = array(
    '#type' => 'select',
    '#options' => $commandList,
  );
  $failoverCommandElem['port_label'] = array(
    '#type' => 'item',
    '#title' => t('Port'),
  );
  $failoverCommandElem['port_text']  = array(
    '#type' => 'textfield',
    '#size' => 10,
    '#description' => t('If other than default.'),
  );

  $form['check_interval']['check_interval_label'] = array(
    '#type' => 'item'     ,
    '#title' => t('Check Interval (min)'),
    '#description' => t('Normal health check interval'),
  );

  $form['check_interval']['check_interval_text'] = array(
    '#type' => 'textfield',
    '#size' => 20,
  );

  $form['retry_interval']['retry_interval_label'] = array(
    '#type' => 'item'     ,
    '#title' => t('Retry Interval (min)'),
    '#description' => t('Retry interval in case of failure'),
  );
  $form['retry_interval']['retry_interval_text'] = array(
    '#type' => 'textfield',
    '#size' => 20,
  );

  $form['max_check_attempts']['max_check_attempts_label'] = array(
    '#type' => 'item',
    '#title' => t('Max Check Attempts'),
    '#description' => t('Max check attempts before declaring a failure.'),
  );
  $form['max_check_attempts']['max_check_attempts_text'] = array(
    '#type' => 'textfield',
    '#size' => 20,
  );

  $form['check_interval']['check_interval_text']['#default_value'] = '1';
  $form['retry_interval']['retry_interval_text']['#default_value'] = '1';
  $form['max_check_attempts']['max_check_attempts_text']['#default_value'] = '5';

  $form['cloud_failover_action']['cloud_failover_action_label'] = array(
    '#type' => 'item',
    '#title' => t('Action'),
  );

  $failoverActionElem = array(
    '#type' => 'fieldset',
    '#prefix' => '<div class="container-inline">',
    '#suffix' => '</div>',
  );

  $actionList = _cloud_failover_get_actions();
  $failoverActionElem['cloud_failover_action_select'] = array(
    '#id' => 'fAction',
    '#type' => 'select',
    '#options' => $actionList,
  );
  if ($action != t('Edit')) {
    $failoverActionElem['cloud_failover_action_select']['#attributes'] = array('onChange' => 'javaScript:switchOptions();');
  }
  $scriptList = _cloud_failover_get_executable_scripts();
  $failoverActionElem['cloud_failover_script_select'] = array(
    '#id' => 'fScript',
    '#type' => 'select',
    '#options' => $scriptList,
  );
  if (isset($_REQUEST['cloud_failover_action_select']) && $_REQUEST['cloud_failover_action_select'] != 1) {
    $failoverActionElem['cloud_failover_script_select']['#attributes'] = array('style' => 'display:none');
  }

  if ($fsId) { //Edit Case
    $query = _cloud_failover_get_scenarios_fsid($fsId);
    
    $result = db_query( $query);
    $count = 0;

    foreach ($result as $row1) {
      $failover_obj = $row1 ;
    }
    
    $action = "Edit";
    $form['id'] = array(
      '#type' => 'hidden',
      '#value' => $fsId,
    );

    $form['command_id'] = array(
      '#type' => 'hidden',
      '#value' => isset($template_obj) ? isset_variable($template_obj->failover_command_id) : FALSE,
    );
    $form['name'              ]['name_text'              ]['#default_value'] = isset_variable($failover_obj->nickname);
    $form['check_interval'    ]['check_interval_text'    ]['#default_value'] = isset_variable(trim($failover_obj->check_interval));
    $form['retry_interval'    ]['retry_interval_text'    ]['#default_value'] = isset_variable(trim($failover_obj->retry_interval));
    $form['max_check_attempts']['max_check_attempts_text']['#default_value'] = isset_variable(trim($failover_obj->max_check_attempts));
    $failoverCommandElem['port_text']['#default_value']                      = isset_variable(trim($failover_obj->port));
    $failoverCommandElem['cloud_failover_command_select']['#default_value'] = isset_variable($failover_obj->faid);
    $failoverCommandElem['cloud_failover_command_select']['#attributes'   ] = array('disabled' => TRUE);
    $failoverActionElem['cloud_failover_action_select'   ]['#default_value'] = isset_variable($failover_obj->faid);

    if ($failover_obj->faid == 1) {
      $failoverActionElem['cloud_failover_script_select']['#attributes'] = array('style' => 'display:');
      $failoverActionElem['cloud_failover_script_select']['#default_value'] = isset_variable($failover_obj->script_id);
    }
  }

  //on change command - case
  $failover_proto_id = isset($_REQUEST['cloud_failover_command_select']) ? $_REQUEST['cloud_failover_command_select'] : FALSE ;

  if ($failover_proto_id && $action != t('Edit')) { //Add
    $query = _cloud_failover_get_command_info($failover_proto_id);
    $result = db_query( $query);
    $count = 0;
    foreach ($result as $row1) {
      $commandObject = $row1;
    }
    $port = trim($commandObject->default_port);
    $form['name']['name_text']['#default_value'] = $nickname; //$_SESSION['nickname'];
    $form['check_interval']['check_interval_text']['#default_value']         = isset($_REQUEST['check_interval_text']);
    $form['retry_interval']['retry_interval_text']['#default_value']         = isset($_REQUEST['retry_interval_text']);
    $form['max_check_attempts']['max_check_attempts_text']['#default_value'] = isset($_REQUEST['max_check_attempts_text']);
    $failoverCommandElem['cloud_failover_command_select']['#default_value']  = isset($_REQUEST['cloud_failover_command_select']);

    $failoverActionElem['cloud_failover_action_select']['#default_value']    = isset($_REQUEST['cloud_failover_action_select']);
    $failoverActionElem['cloud_failover_script_select']['#default_value']    = isset($_REQUEST['cloud_failover_script_select']);
  }

  $form['cloud_failover_command']['cloud_failover_command_content'] = $failoverCommandElem;
  $form['cloud_failover_action']['cloud_failover_action_content']   = $failoverActionElem;

  $form['submit_buttons'] = array(
    '#type' => 'fieldset',
    '#prefix' => '<span class="clear"></span><div class="container-inline"><div class="buttons">',
    '#suffix' => '</div></div>',
  );

  $form['submit_buttons'][$action] = array(
    '#type' => 'submit',
    '#value' => t($action ),
  );
  $form['submit_buttons']['Cancel'] = array(
    '#type' => 'submit',
    '#value' => t('Cancel'),
  );
  return $form;
}

/**
 * Theme the new scenario form
 */
function theme_cloud_failover_scenario_new($form) {
  $form = $form['form'];

  $rows[] = array(
    drupal_render($form['name']['name_label']),
    drupal_render($form['name']['name_text']),
  );
  $rows[] = array(
    drupal_render($form['cloud_failover_command']['cloud_failover_command_label']),
    drupal_render($form['cloud_failover_command']['cloud_failover_command_content']),
  );
  $rows[] = array(
    drupal_render($form['check_interval']['check_interval_label']),
    drupal_render($form['check_interval']['check_interval_text']),
  );
  $rows[] = array(
    drupal_render($form['retry_interval']['retry_interval_label']),
    drupal_render($form['retry_interval']['retry_interval_text']),
  );
  $rows[] = array(
    drupal_render($form['max_check_attempts']['max_check_attempts_label']),
    drupal_render($form['max_check_attempts']['max_check_attempts_text']),
  );
  $rows[] = array(
    drupal_render($form['cloud_failover_action']['cloud_failover_action_label']),
    drupal_render($form['cloud_failover_action']['cloud_failover_action_content']),
  );

  $output = theme('table', array( 'header' => array(), 'rows' => $rows));
  $output .= drupal_render($form['submit_buttons']);
  $output .= drupal_render_children($form);
  return $output;
}

/**
 * Form for viewing scenarios 
 */
function cloud_failover_scenario_view($module, $page_submit = '') {

  drupal_add_js(cloud_get_module_base() . 'js/cloud_failover.js');

  $fsId = $_REQUEST['id'];
  $action = "Add";

  $commandList = _cloud_failover_get_commands();
  $form['command']['command_label'] = array(
    '#type' => 'item',
    '#title' => t('Command'),
  );
  $form['command']['command_select'] = array(
    '#type' => 'select',
    '#options' => $commandList,
  );

  if ($action != t('Edit')) {
    $form['command']['command_select']['#attributes'] = array('onChange' => 'javaScript:document.forms[0].submit()');
  }
  $failover_command_id = (isset($failover_command_id)
                       ?  $failover_command_id
                       : isset($_REQUEST['command_select'])
                       ?  $_REQUEST['command_select']
                       : '');

  $form['name']['name_label'] = array(
    '#type' => 'item',
    '#title' => t('Nickname'),
  );
  $form['name']['name_text'] = array(
    '#type' => 'textfield',
    '#size' => 50,
  );

  $form['port']['port_label'] = array(
    '#type' => 'item',
    '#title' => t('Port'),
  );
  $form['port']['port_text'] = array(
    '#type' => 'textfield',
    '#size' => 10,
  );

  $form['check_interval']['check_interval_label'] = array(
    '#type' => 'item',
    '#title' => t('Check Interval'),
  );
  $form['check_interval']['check_interval_text'] = array(
    '#type' => 'textfield',
    '#size' => 20,
  );

  $form['retry_interval']['retry_interval_label'] = array(
    '#type' => 'item',
    '#title' => t('Retry Interval'),
  );
  $form['retry_interval']['retry_interval_text'] = array(
    '#type' => 'textfield',
    '#size' => 20,
  );

  $form['max_check_attempts']['max_check_attempts_label'] = array(
    '#type' => 'item',
    '#title' => t('Max Check Attempts'),
  );
  $form['max_check_attempts']['max_check_attempts_text'] = array(
    '#type' => 'textfield',
    '#size' => 20,
  );

  $form['check_interval']['check_interval_text']['#default_value'] = '1';
  $form['retry_interval']['retry_interval_text']['#default_value'] = '1';
  $form['max_check_attempts']['max_check_attempts_text']['#default_value'] = '5';


  $form['cloud_failover_action']['cloud_failover_action_label'] = array(
    '#type' => 'item',
    '#title' => t('Action'),
  );

  $failoverActionElem = array(
    '#type' => 'fieldset',
    '#prefix' => '<div class="container-inline">',
    '#suffix' => '</div>',
  );

  if ($fsId) {
    $query = _cloud_failover_get_scenarios_fsid($fsId);
   
    $result = db_query( $query);
    $count  = 0;

    foreach ($result as $row1) {
      
      $failover_obj = $row1 ;
    }

    $action = "Edit";
    $form['id'] = array(
      '#type' => 'hidden',
      '#value' => $fsId,
    );

    $form['name'              ]['name_text'              ] = array(array('#markup' => check_plain(isset_variable($failover_obj->nickname) )));
    $form['check_interval'    ]['check_interval_text'    ] = array(array('#markup' => t(isset_variable($failover_obj->check_interval) )));
    $form['retry_interval'    ]['retry_interval_text'    ] = array(array('#markup' => t(isset_variable($failover_obj->retry_interval) )));
    $form['max_check_attempts']['max_check_attempts_text'] = array(array('#markup' => t(isset_variable($failover_obj->max_check_attempts) )));
    $form['port'              ]['port_text'              ] = array(array('#markup' => t(isset_variable($failover_obj->port) )));
    $form['command'           ]['command_select'         ] = array(array('#markup' => t(isset_variable($failover_obj->command_desc) )));
    $failoverActionElem['cloud_failover_action_select'] = array(array('#markup' => t(isset_variable($failover_obj->action_desc) )));

    if ($failover_obj->faid == 1 ) {
      $failoverActionElem['cloud_failover_script_info'] = array(array('#markup' => ' - '));
      $failoverActionElem['cloud_failover_script_select'] = array(array('#markup' => t(isset_variable($failover_obj->script_name) )));
    }
  }

  $form['cloud_failover_action']['cloud_failover_action_content'] = $failoverActionElem;

  $form['submit_buttons'] = array(
    '#type' => 'fieldset',
    '#prefix' => '<span class="clear"></span><div class="container-inline"><div class="buttons">',
    '#suffix' => '</div></div>',
  );

  $form['submit_buttons']['List Scenarios'] = array(
    '#type' => 'submit',
    '#value' => t('List Scenarios'),
  );

  if (user_access('delete failover scenario')) {
    $confirm_msg = cloud_get_messagebox('Are you sure you want to delete the Scenario "' . $failover_obj->nickname . '" ?');
    $form['submit_buttons']['Delete'] = array(
      '#type' => 'submit',
      '#value' => t('Delete'),
      '#attributes' => array('onclick' => $confirm_msg),
    );
  }
  if (user_access('edit failover scenario')) {
    $form['submit_buttons']['Edit'] = array(
      '#type' => 'submit',
      '#value' => t('Edit'),
    );
  }

  return $form;
}

/**
 * Theme the view scenario form
 * @param unknown_type $form
 */
function theme_cloud_failover_scenario_view($form) {
  $form = $form['form'];

  $rows[] = array(
    drupal_render($form['name']['name_label']),
    drupal_render($form['name']['name_text']),
  );

  $rows[] = array(
    drupal_render($form['command']['command_label']),
    drupal_render($form['command']['command_select']),
  );

  $rows[] = array(
    drupal_render($form['port']['port_label']),
    drupal_render($form['port']['port_text']),
  );

  $rows[] = array(
    drupal_render($form['check_interval']['check_interval_label']),
    drupal_render($form['check_interval']['check_interval_text']),
  );

  $rows[] = array(
    drupal_render($form['retry_interval']['retry_interval_label']),
    drupal_render($form['retry_interval']['retry_interval_text']),
  );

  $rows[] = array(
    drupal_render($form['max_check_attempts']['max_check_attempts_label']),
    drupal_render($form['max_check_attempts']['max_check_attempts_text']),
  );

  $rows[] = array(
    drupal_render($form['cloud_failover_action']['cloud_failover_action_label']),
    drupal_render($form['cloud_failover_action']['cloud_failover_action_content']),
  );

  $output = theme('table', array( 'rows' => $rows) );
  $output .= drupal_render($form['submit_buttons']);
  $output .= drupal_render_children($form);
  return $output;
}

/**
 * Form submit for new scenario
 */
function cloud_failover_scenario_new_submit($form_id, &$form_state) {
  $form_values = $form_state['values'];

  if ($form_values['op'] == t('Add')) {
    _cloud_failover_insert_scenario($form_values);
    drupal_set_message(t('Scenario has been saved.'));
    $form_state['redirect'] = CLOUD_FAILOVER_PATH . '/scenarios';
  }
  elseif ($form_values['op'] == t('Edit')) {
    $fsId = $form_values['id'];
    _cloud_failover_update_scenario($form_values, $fsId);
    drupal_set_message(t('Scenario has been updated.'));
    $form_state['redirect'] = CLOUD_FAILOVER_PATH . '/scenarios';
  }
  elseif ($form_values['op'] == t('Delete')) {
    $form_state['redirect'] = url(CLOUD_FAILOVER_PATH . '/delete', array('query' => array('id' => $form_values['id']), 'absolute' => TRUE));
  }
}

/**
 * Form submit for viewing a failover scenario
 */
function cloud_failover_scenario_view_submit($form_id, &$form_state) {
  $form_values = $form_state['values'];
  if ( $form_values['op'] == 'List Scenarios') {
    $form_state['redirect'] = CLOUD_FAILOVER_PATH . '/scenarios';
  }
  elseif ($form_values['op'] == t('Delete')) {
    $form_state['redirect'] = url(CLOUD_FAILOVER_PATH . '/delete', array('query' => array('id' => $form_values['id']), 'absolute' => TRUE));
  }
  elseif ($form_values['op'] == t('Edit')) {
    $form_state['redirect'] = url(CLOUD_FAILOVER_PATH . '/create', array('query' => array('id' => $form_values['id']), 'absolute' => TRUE));
  }
}

/**
 * Form validate function for creating and editing failover
 * scenarios
 * @param unknown_type $form_id
 * @param unknown_type $form_values
 */
function cloud_failover_scenario_new_validate($form_id, $form_values) {
  $form_values = $form_values['values'];

  if ( empty($form_values['name_text']) ) {
    form_set_error('name_text',   t('You must enter valid Scenario Name'));
  }
  else {
    $query = _cloud_failover_get_scenario($form_values['name_text']);
    $result = db_query($query);
    foreach ($result as $db_obj) {
      $fsId = $db_obj->fsid;
      if ($fsId != $form_values['id']) {
        form_set_error('name_text',   t('Name is already used by a Failover Scenario.'));
      }
      break ;
    }
  }
  if ($form_values['cloud_failover_command_select'] == '') {
    form_set_error('cloud_failover_command_select',   t('You must select protocol.'));
  }
  if (!preg_match(CLOUD_VALID_DIGIT, $form_values['check_interval_text'])) {
    form_set_error('check_interval_text',   t('You must enter valid Check Interval'));
  }
  if (!preg_match(CLOUD_VALID_DIGIT, $form_values['retry_interval_text'])) {
    form_set_error('retry_interval_text',   t('You must enter valid Retry Interval'));
  }
  if (!preg_match(CLOUD_VALID_DIGIT, $form_values['max_check_attempts_text'])) {
    form_set_error('max_check_attempts_text',   t('You must enter valid Max Check Attempts'));
  }
  if ($form_values['cloud_failover_action_select'] == '') {
    form_set_error('cloud_failover_action_select',   t('You must select Action'));
  }
  if ($form_values['cloud_failover_action_select'] == '1') {
    if ($form_values['cloud_failover_command_select'] == '') {
      form_set_error('cloud_failover_command_select',   t('You must select Script'));
    }
  }
}



function _cloud_failover_is_enabled($newDsn) {

  if (module_exists(CLOUD_FAILOVER_MODULE_NAME) === FALSE ) {
    return 0;
  }

  // TODO: DEPENDENCY: AWS_CLOUD_* (by Ram) / ELIMINATE $_INSTANCES_TABLE
  $_INSTANCES_TABLE = aws_cloud_get_table_info( AWS_CLOUD_INSTANCES_TABLE );
  // TODO: {cloud_cluster_servers} is hardcoding. (by Ram)
  $query = "select serverid from {cloud_cluster_servers} ds,  " . $_INSTANCES_TABLE . " vi
         where ds.failover_flag = '" . CLOUD_FAILOVER_FLAG_READY_FOR_CHECK . "' and vi.dns_name = '" . $newDsn . "' and ds.instance_id = vi.instance_id";

  return count(cloud_get_db_results($query));

}


function _cloud_failover_is_endbled_check_by_instance_id($instance_id) {

  // TODO: {cloud_cluster_servers} is hardcoding. (by Ram)
  $query = "select serverid from {cloud_cluster_servers} ds
         where ds.failover_flag <> '0' and ds.instance_id ='$instance_id'";

  
  $result = db_query( $query);

  $count = 0;

  foreach ($result as $row) {

    $count++;
  }
  return $count;
}


