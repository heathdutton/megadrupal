<?php

/**
 * @file
 * Provides scripting feature such as bash, Perl and etc (Mainly bash scripts).
 * Works with Cloud and Server Templates module.
 *
 * Copyright (c) 2010-2011 DOCOMO Innovations, Inc.
 *
 */

module_load_include('inc', 'cloud'    , 'cloud_constants'      );
module_load_include('inc', 'cloud_scripting', 'cloud_scripting_constants'  );
module_load_include('inc', 'cloud_scripting'                         );
module_load_include('inc', 'cloud_scripting', 'cloud_scripting_db'         );
module_load_include('inc', 'cloud_scripting', 'cloud_scripting_exec_helper');

/**
 * Implements hook_help().
 */
function cloud_scripting_help($section) {

  switch ($section) {

    case 'admin/help#':
      $output = '<p>' . t('The cloud module creates a user interface for users to manage clouds. Users can Create Instances,  Describe Instances etc..') . '</p>';
      return $output;

    case 'admin/content/comment':
    case 'admin/content/comment/create':
      return '<p>' . t("Below is a list of the latest comments posted to your site. Click on a subject to see the comment,  the author's name to edit the author's user information ,  'edit' to modify the text,  and 'delete' to remove their submission.") . '</p>';

    case 'admin/content/comment/approval':
      return '<p>' . t("Below is a list of the comments posted to your site that need approval. To approve a comment,  click on 'edit' and then change its 'moderation status' to Approved. Click on a subject to see the comment,  the author's name to edit the author's user information,  'edit' to modify the text,  and 'delete' to remove their submission.") . '</p>';

    case 'admin/content/comment/settings':
      return '<p>' . t("Comments can be attached to any node,  and their settings are below. The display comes in two types: a 'flat list' where everything is flush to the left side,  and comments come in chronological order,  and a 'threaded list' where replies to other comments are placed immediately below and slightly indented,  forming an outline. They also come in two styles: 'expanded',  where you see both the title and the contents,  and 'collapsed' where you only see the title. Preview comment forces a user to look at their comment by clicking on a 'Preview' button before they can actually add the comment.") . '</p>';


  }
}

/**
 * Implements hook_menu().
 */
function cloud_scripting_menu() {
  $items = array();
  $items['design/scripting/list'] = array(
    'title' => 'Scripting',
    'description' => 'List of all scripts',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cloud_scripting_list'),
    'weight' => -1,
    'access arguments' => array('list scripts'),
    'file' => '',
  );
  $items['design/scripting/create'] = array(
    'title' => 'Add/Edit Script',
    'description' => 'Add/Edit Script',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cloud_scripting_new'),
    'access arguments' => array('create script'),
    'file' => '',
    'type' => MENU_CALLBACK,
  );
  $items['design/scripting/%/edit'] = array(
    'title' => 'Add/Edit Script',
    'description' => 'Add/Edit Script',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cloud_scripting_new', 2),
    'access arguments' => array('create script'),
    'file' => '',
    'type' => MENU_CALLBACK,
  );
  $items['design/scripting/getdata'] = array(
    'title' => 'Scripting Get data',
    'page callback' => '_cloud_scripting_getdata',
    'page arguments' => array('cloud_scripting'),
    'access arguments' => array('list scripts'),
    'file' => '',
    'type' => MENU_CALLBACK,
  );
  $items['design/scripting/describe/%'] = array(
    'title' => 'Script Info',
    'description' => 'Script Info',
    'access arguments' => array('list scripts'),
    'file' => '',
    'type' => MENU_CALLBACK,
  );
  $items['design/scripting/describe/%/info'] = array(
    'title' => 'Info',
    'description' => 'Info',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cloud_scripting_desc_info', 3),
    'access arguments' => array('view script'),
    'file' => '',
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
  );
  $items['design/scripting/%/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'cloud_scripting_delete',
    'page arguments' => array(2),
    'access arguments' => array('delete script'),
    'file' => '',
    'type' => MENU_CALLBACK,
  );
  return $items;
}


/**
 * Implements hook_permission().
 */
function cloud_scripting_permission() {

  return array(
    'create script' => array(
      'title' => t('create script'),
      'description' => t('TODO Add a description for \'create script\''),
    ),
    'view script' => array(
      'title' => t('view script'),
      'description' => t('TODO Add a description for \'view script\''),
    ),
    'list scripts' => array(
      'title' => t('list scripts'  ),
      'description' => t('TODO Add a description for \'list scripts\''),
    ),
    'edit script' => array(
      'title' => t('edit script'),
      'description' => t('TODO Add a description for \'edit script\''),
    ),
    'delete script' => array(
      'title' => t('delete script'),
      'description' => t('TODO Add a description for \'delete script\''),
    ),
  );
}


/**
 * Implements hook_theme().
 */
function cloud_scripting_theme() {

  return array(
    'cloud_scripting_list' => array(
      'render element' => 'form',
      'file' => 'cloud_scripting.inc',
    ),
    'cloud_scripting_desc_info' => array(
      'render element' => 'form',
      'file' => 'cloud_scripting.inc',
    ),
    'cloud_scripting_desc_script' => array(
      'render element' => 'form',
      'file' => 'cloud_scripting.inc',
    ),
    'cloud_scripting_new' => array(
      'render element' => 'form',
      'file' => 'cloud_scripting.inc',
    ),
  );
}


/**
 * Implements hook_cron().
 */
function cloud_scripting_cron() {
  $cloud_list = cloud_get_all_clouds();
  foreach ($cloud_list as $cloud_context) {
    _cloud_scripting_exec_script_on_instances($cloud_context);
  }
}


/**
 *
 * @param type $cloud_context
 * @param type $op
 * @param type $params
 * @return type
 */

function _cloud_scripting_under_progress_scripts_for_instance($params) {
  return _cloud_scripting_under_progress_scripts_for_instance_db($params);
}
