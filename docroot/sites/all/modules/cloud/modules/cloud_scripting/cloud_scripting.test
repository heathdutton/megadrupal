<?php

/**
 * @file
 * Test Cases for Scripting Module
 *
 * Copyright (c) 2010-2011 DOCOMO Innovations, Inc.
 *
 */

/**
 * Updated by yas   2011/02/03
 * Updated by yas   2010/12/19
 * Created by manoj 2010/12/03
 */

define('SCRIPTING_TEST_REPEAT_COUNT', '3'                         ) ;
define('CLOUD_SCRIPTING_TEST_INPUT'       , 'MESSAGE, OUTPUT_FILE'      ) ;
define('CLOUD_SCRIPTING_TEST_SCRIPT'      , 'echo MESSAGE > OUTPUT_FILE') ;

class ScriptingTestCase extends CloudTestCase {

  public static function getInfo() {
    return array(
      'name'        => 'Scripting'          ,
      'description' => 'Scripting Test Case',
      'group'       => 'Cloud'              ,
    );
  }

  public function listScripts() {

    // List Scripting for Amazon EC2
    $this->drupalGet('design/scripting/list');
    $this->assertResponse(200, t('HTTP 200: Design | Scripting' ));
    $this->assertNoText(t('Notice' ), t('Make sure w/o Notice'   ));
    $this->assertNoText(t('warning'), t('Make sure w/o Warnings' ));    

    $this->drupalPost('design/scripting/list', '', t('Create'));
  }

  public function create() {

    $script = array();

    // Input Fields
    $script['name_text'       ] =  date('D M j G:i:s T Y') . ' - ' . $this->randomName();
    $script['description_text'] =  date('D M j G:i:s T Y') . ' - ' . $this->randomName();

    $add = array(
    //'script_id'            => $script['script_id']   ,
      'name_text'            => $script['name_text'       ] ,
      'description_text'     => $script['description_text'] ,
      'script_type_select'   => 'boot'                      ,
      'packages_text'        => 'aws'                       ,
      'inputs_text'          => CLOUD_SCRIPTING_TEST_INPUT        ,
      'script_template_text' => CLOUD_SCRIPTING_TEST_SCRIPT       ,
    );
    
    $this->drupalPost('design/scripting/create', $add, t('Add'));
    $this->assertResponse(200, t('HTTP 200: New Script Form | Add'));
    $this->assertText(t('Script has been saved.'),
                      t('Confirm Message:') . t('Script has been saved.'));
    $this->assertText($script['name_text'], t('Confirm New Script Item Name : @script_name' , array(
                                                                             '@script_name'  => $script['name_text'])));
    $this->assertText(CLOUD_SCRIPTING_TEST_INPUT, t('Confirm New Script Item Input: @script_input', array(
                                                                             '@script_input' => CLOUD_SCRIPTING_TEST_INPUT)));
    $this->assertNoText(t('Notice' ), t('Make sure w/o Notice'  ));
    $this->assertNoText(t('warning'), t('Make sure w/o Warnings'));

    $this->drupalGet('design/scripting/list');
    $this->assertResponse(200, t('HTTP 200: Design | Scripting' ));
    $this->assertNoText(t('Notice' ), t('Make sure w/o Notice'  ));
    $this->assertNoText(t('warning'), t('Make sure w/o Warnings'));

    return $script;
  }

  public function edit($info) {

    $this->drupalPost('design/scripting/' . $info['script_id'] . '/edit', $info, t('Edit'));
    $this->assertResponse(200, t('HTTP 200: New Script Form | Edit'));
    $this->assertText(t('Script has been saved.'),
                      t('Confirm Message:') . t('Script has been saved.'));
    $this->assertText($info['name_text'  ], t('Confirm New Script Item Name : @script_name' , array(
                                                                             '@script_name'  => $info['name_text']  )));
    $this->assertText(CLOUD_SCRIPTING_TEST_INPUT, t('Confirm New Script Item Input: @script_input', array(
                                                                             '@script_input' => CLOUD_SCRIPTING_TEST_INPUT)));
    $this->assertNoText(t('Notice' ), t('Make sure w/o Notice'  ));
    $this->assertNoText(t('warning'), t('Make sure w/o Warnings'));
  }
  
  public function delete($script_id = 1) {  

    // Delete a Scripting Item
    $this->drupalGet("design/scripting/$script_id/delete", array(
                     'id' => $script_id,
                     ));
    $this->assertResponse(200, t('HTTP 200: Design | Scripting | Delete'));
    $this->assertNoText(t('Notice'), t('Make sure w/o Notice'));
  //$this->assertText($scriptName, 'Deleted Item: ' . $scriptName);
  }

  public function filter($scriptName = NULL) {

    //filtering script item
    $filter = array(
        'filter'    => 'Test',
        'operation' => 0,
    );
      
    $this->drupalPost('design/scripting/list', $filter, t('Apply'));
    $this->assertResponse(200, t('HTTP 200: Search Listings | Filter'));
    $script_id = CLOUD_SCRIPTING_REPEAT_COUNT - 1 ;
    $this->assertText($scriptName[$script_id], t('Confirm Filter Item: @script_name'), array(
                                                               '@script_name' => $scriptName[$script_id ]));
    $this->assertNoText(t('Notice' ), t('Make sure w/o Notice'  ));
    $this->assertNoText(t('warning'), t('Make sure w/o Warnings'));
  }
  
  public function testScripting() {

    $this->listScripts();
    
    // Create a new script
    $script = array();
    for ($i = 0; $i < SCRIPTING_TEST_REPEAT_COUNT; $i++) { // 3 times

      $script[$i + 1] = $this->create();
    }

    //modify case
    $script_id = 1;
    $info = array(
      'script_id'            => $script_id                              ,
      'name_text'            => $script[$script_id]['name_text'       ] ,
      'description_text'     => $script[$script_id]['description_text'] ,
      'script_type_select'   => 'boot'                                  ,
      'packages_text'        => 'aws'                                   ,
      'inputs_text'          => CLOUD_SCRIPTING_TEST_INPUT                    ,
      'script_template_text' => CLOUD_SCRIPTING_TEST_SCRIPT                   ,
    );

    $this->edit($info);
    $this->delete($script_id = 1);
  }
}
