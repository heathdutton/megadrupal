<?php

/**
 * @file
 * Base Class for all the aws_cloud test cases
 * The base class does not provide any test classes.
 * It contains common methods that are used by the
 * actual test classes.
 * 
 * Copyright (c) 2010-2011 DOCOMO Innovations, Inc.
 * 
 */

module_load_include('inc' , 'aws_cloud', 'aws_cloud.test') ;

class AwsCloudTestCase extends DrupalWebTestCase {
  protected $userList = array();
  protected $privileged_user;
  
  public function setUp() {

    parent::setUp(
      'cloud',
      'cloud_server_templates',
      'cloud_scripting',
      'cloud_pricing',
      'cloud_alerts',
      'cloud_activity_audit',
      'cloud_cluster',
      'aws_ec2_api',
      'aws_ec2_lib',
      'aws',               
      'aws_cloud'             
    );

    // Create and log in our privileged user with the basic permissions
    $this->privileged_user = $this->drupalCreateUser(array(
      'access administration pages',
      'administer site configuration',
      'administer cloud',
      'access dashboard',
      'access audit report',
      'copy server template',
      'create server template',
      'delete server template',
      'edit server template',
      'launch server template',
      'list server templates',
      'set scripts and alerts',
      'view server template',
      'list alerts',
      'create alert',
      'view alerts',
      'edit alert',
      'delete alert',
    
      'create cluster',
      'delete cluster',
      'list clusters',
      'update cluster',
    
      'create script', 
      'list scripts', 
      'edit script', 
      'delete script',
      'create pricing', 
      'list pricing',  
      'edit pricing', 
      'delete pricing',
    ));
    $this->userList[] = $this->privileged_user->name;
    $this->drupalLogin($this->privileged_user);
    $this->configure();
  }
  
  public function configure() {
    //setup some sub-clouds in the system
    foreach ($this->data as $key => $value) {
      $this->drupalPost('admin/settings/clouds/add', $value, t('Create'));
      $this->assertText(t('Cloud @cloud_name has been created', array('@cloud_name' => $value['cloud_name'])), 
      'Confirm Message: The cloud has been created');
    }
    
    //reset the cached modules, permissions...etc
    $this->resetAll();

    //create a new user with permissions against the 
    //newly enabled sub-clouds
    $this->privileged_user = $this->drupalCreateUser(array(
      'access administration pages',
      'administer site configuration',
      'administer cloud',
      'access dashboard',
      'access audit report',
      'copy server template',
      'create server template',
      'delete server template',
      'edit server template',
      'launch server template',
      'list server templates',
      'set scripts and alerts',
      'view server template',
      'list alerts',
      'create alert',
      'view alerts',
      'edit alert',
      'delete alert',
    
      'create cluster',
      'delete cluster',
      'list clusters',
      'update cluster',
    
      'create script', 
      'list scripts', 
      'edit script', 
      'delete script',
      'create pricing', 
      'list pricing',  
      'edit pricing', 
      'delete pricing',
      //amazon sub-cloud
      'amazon_ec2 administer cloud',
      'amazon_ec2 list instances',
      'amazon_ec2 launch instance',
      'amazon_ec2 terminate all instances',
      'amazon_ec2 terminate own instance',
      'amazon_ec2 access all console',
      'amazon_ec2 access own console',
      'amazon_ec2 list images',
      'amazon_ec2 register image',
      'amazon_ec2 delete image',
      'amazon_ec2 list key fingerprints',
      'amazon_ec2 list key names',
      'amazon_ec2 register key',
      'amazon_ec2 update key',
      'amazon_ec2 delete key',
      'amazon_ec2 list IPs',
      'amazon_ec2 add IP',
      'amazon_ec2 delete IP',
      'amazon_ec2 assign IP',
      'amazon_ec2 update instance details',
      'amazon_ec2 list security group',
      'amazon_ec2 register security group',
      'amazon_ec2 setup security group',
      'amazon_ec2 delete security group',
      'amazon_ec2 list volume',
      'amazon_ec2 create volume',
      'amazon_ec2 delete volume',
      'amazon_ec2 attach volume',
      'amazon_ec2 detach volume',
      'amazon_ec2 list snapshot',
      'amazon_ec2 create snapshot',
      'amazon_ec2 delete snapshot',
      'amazon_ec2 display cpu load',
      'amazon_ec2 display traffic amount',
      'amazon_ec2 display storage space',
      'amazon_ec2 list template',
      'amazon_ec2 create template',
      'amazon_ec2 update template',
      'amazon_ec2 update own template',
      'amazon_ec2 delete template',
      'amazon_ec2 delete own template',
      'amazon_ec2 copy template',
      'amazon_ec2 access report',

      'access audit report',
      'copy server template',
      'create server template',
      'delete server template',
      'edit server template',
      'launch server template',
      'list server templates',
      'set scripts and alerts',
      'view server template',
    ));
    $this->userList[] = $this->privileged_user->name;
    $this->drupalLogin($this->privileged_user);
  }
  
  /**
   * Tear Down function
   */
  public function tearDown() {
    foreach ($this->userList as $name) {
      $this->tearDownSSHKey($name);
    }
    $this->tearDownSSHKEy($this->privileged_user->name);
    parent::tearDown();
  }
  
  /**
   * Data definition for test keys 
   * For each new sub cloud, add its access variables
   */
  private $data = array(
    'amazon_ec2' => array(
      'cloud_name'         => 'amazon_ec2'                 ,
      'base_cloud'         => 'amazon'                     ,
      'cloud_display_name' => 'Amazon EC2'                 ,
      'api_version'        => AMAZON_EC2_API_VERSION       ,
      'host_uri'           => AMAZON_EC2_HOST_URI          ,
      'aws_access_key'     => AMAZON_EC2_AWS_ACCESS_KEY    ,
      'aws_secret_key'     => AMAZON_EC2_API_SECRET_KEY    ,
      'user_id'            => AMAZON_EC2_USER_ID           ,
      'image_upload_url'   => AMAZON_S3_IMAGE_UPLOAD_URI   ,
      'image_register_url' => AMAZON_EC2_IMAGE_REGISTER_URI,
      'certificate'        => AMAZON_EC2_X509_CERTIFICATE  ,
    ),
  );
  
  /**
   * Test ssh key deletion
   */
  protected function tearDownSSHKey($key_name = '') {
    $clouds = $this->getClouds();    
    foreach ($clouds as $cloud) {
      $this->deleteSSHKey($key_name, $cloud);
      $this->assertText  (t('Key Pair deleted successfully: @keyname', array('@keyname' => $key_name)),
                          t('Confirmed: Key Pair deleted successfully: @keyname', array('@keyname' => $key_name)));
      $this->assertNoText(t('Notice' ), t('Make sure w/o Notice'  ));
      $this->assertNoText(t('warning'), t('Make sure w/o Warnings'));
    }
  }
  
  /**
   * Helper function to refresh a subcloud page
   */
  protected function refreshInstances($cloud) {
    $this->drupalGet('clouds/' . $cloud . '/get_instances_data', array(
      'query' => array(
        'destination' => 'clouds/' . $cloud . '/instances',
      ),
    ));
  }
  
  /**
   * Helper function to refresh an images listing page
   */
  protected function refreshImages($cloud) {
    $this->drupalGet('clouds/' . $cloud . '/getimagedata', array(
      'query' => array(
        'destination' => 'clouds/' . $cloud . '/images',
      ),
    ));
  }
  
  /**
   * Helper function to refresh a security group listing page 
   */
  protected function refreshSecurityGroups($cloud) {
    $this->drupalGet('clouds/' . $cloud . '/get_security_group_data');
  }
  
  /**
   * Helper function to refresh ssh keys
   */
  protected function refreshSSHKeys($cloud) {
    $this->drupalGet('clouds/' . $cloud . '/get_ssh_keys_data');
  }

  /**
   * Helper function to refresh Elastic IP
   */
  protected function refreshElasticIP($cloud) {
    $this->drupalGet('clouds/' . $cloud . '/get_elastic_ips_data');
  }
  
  /**
   * Helper function to refresh Volumes
   */
  protected function refreshVolumes($cloud) {
    $this->drupalGet('clouds/' . $cloud . '/get_volumes_data');
  }

  /**
   * Helper function to refresh snapshots 
   */
  protected function refreshSnapshots($cloud) {
    $this->drupalGet('clouds/' . $cloud . '/get_snapshots_data');
  }
  
  /**
   * Helper function to get the cloud names in the database.
   * Using the cloud name, we can then run all the tests.
   * This function will change after multi region gets 
   * implemented
   */
  protected function getClouds() {
    $clouds = array();
    $query = db_query("select cloud_name from {cloud_clouds}");
    while ($result = db_result($query)) {
      $clouds[] = $result;
    }
    return $clouds;
  }
  
  /**
   * Function returns an IP address from the {cloud_aws_elastic_ip} table
   */
  protected function getIp($cloud) {
    return db_result(db_query("select public_ip from {cloud_aws_elastic_ip} where cloud_type='%s' and public_ip_name = '%s'", array($cloud, '- changeme -')));
  }
  
  /**
   * Function finds a Volume by Nickname 
   */
  protected function getVolumeId($nickname, $cloud) {
    return db_result(db_query("select volume_id from {cloud_aws_ebs_volumes} where nickname = '%s' and cloud_type = '%s'", array('SimpleTest_Volume', $cloud)));
  }
  
  /**
   * Helper function to create ssh keys 
   */
  protected function createSSHKey($key_name, $cloud) {
    $edit = array(
      'keyname_text' => $key_name,
      'cloud_context' => $cloud,
    );
    $this->drupalPost('clouds/' . $cloud . '/ssh_keys/create', $edit, t('Create'));
  }
  
  /**
   * Helper function to delete ssh keys
   */
  protected function deleteSSHKey($key_name, $cloud) {
    $this->drupalGet('clouds/' . $cloud . '/ssh_keys/delete', array(
      'query' => array(
          'key_name' => $key_name,
        ),
      ));
  }
  /**
   * Helper function to refresh the clouds page
   */
  protected function refreshPageAll() {
    $this->drupalGet('clouds/getdata', array(
      'query' => array(
        'src' => 'clouds',
      ),
    ));
  }
  
}

class AwsCloudListTestCase extends AwsCloudTestCase {
  
  public static function getInfo() {
    return array(
      'name' => 'AWS Cloud - Listing Pages',
      'description' => 'AWS Cloud - Test all aws_cloud listing pages',
      'group' => 'Cloud',
    );
  }

  /**
   * Test Main Cloud Listing Page
   */
  public function testCloudList() {
    $this->drupalGet('clouds');
    $this->assertResponse(200, t('HTTP 200: Clouds Page'));
    $this->assertNoText(t('Notice'), t('Make sure w/o Notice'));
    $this->assertNoText(t('warning'), t('Make sure w/o Warnings'));
  }
  
  /**
   * Test Main Cloud Listing Page Refresh
   */
  public function testCloudRefresh() {
    $this->refreshPageAll();
    $this->drupalGet('clouds'); 
    $this->assertResponse(200, t('HTTP 200: Clouds Page'));
    $this->assertNoText(t('Notice'), t('Make sure w/o Notice'));
    $this->assertNoText(t('warning'), t('Make sure w/o Warnings'));
  }
  
  /**
   * Test the Sub Cloud Listing Page
   */
  public function testSubCloudLinks() {
    $clouds = $this->getClouds();
    foreach ($clouds as $cloud) {
      $this->testSubCloudList($cloud);      
      $this->testSubCloudLaunchList($cloud);
      $this->testSubCloudInstancesList($cloud);
      $this->testSubCloudImagesAllList($cloud);
      $this->testSubCloudImagesOwnerList($cloud);
      $this->testSecurityGroupsList($cloud);
      $this->testSubCloudImagesOwnerList($cloud);
      $this->testSecurityGroupsList($cloud);
      $this->testSSHKeysList($cloud);
      $this->testElasticIpList($cloud);
      $this->testVolumesList($cloud);
      $this->testSnapshotsList($cloud);
    }
  }
  
  /**
   * Tests refreshing the data and returning to 
   * Listing pages
   */
  public function testRefresh() {
    $clouds = $this->getClouds();  
    foreach ($clouds as $cloud) {
      $this->testSubCloudList($cloud, TRUE);
      $this->testSubCloudInstancesList($cloud, TRUE);
      $this->testSubCloudImagesAllList($cloud, TRUE);
      $this->testSSHKeysList($cloud, TRUE);
      $this->testElasticIpList($cloud, TRUE);
      $this->testVolumesList($cloud, TRUE);
      $this->testSnapshotsList($cloud, TRUE);
    }
  }
  
  /**
   * Test SubCloud Listing Page 
   */
  private function testSubCloudList($cloud, $refresh = FALSE) {
    if ($refresh) {
      $this->refreshPageAll();
    }
    $this->drupalGet('clouds/' . $cloud);
    $this->assertResponse(200, t('HTTP 200:' . $cloud . ' Listing page'));
    $this->assertNoText(t('Notice'), t('Make sure there are no Notices'));
    $this->assertNoText(t('warning'), t('Make sure there are no Warnings'));
  }
  
  /**
   * Test SubCloud Launch Page
   */
  private function testSubCloudLaunchList($cloud) {
    //design/server_templates/amazon_ec2/list
    $this->drupalGet('design/server_templates/' . $cloud . '/list');
    $this->assertResponse(200, t('HTTP 200:' . $cloud . ' Instance Templates page'));
    $this->assertNoText(t('Notice'), t('Make sure there are no Notices'));
    $this->assertNoText(t('warning'), t('Make sure there are no Warnings'));
  }
  
  /**
   * Test SubCloud Instances Listing Page 
   */
  private function testSubCloudInstancesList($cloud, $refresh = FALSE) {
    if ($refresh) {
      $this->refreshInstances($cloud);
    }
    $this->drupalGet('clouds/' . $cloud . '/instances');
    $this->assertResponse(200, t('HTTP 200:' . $cloud . ' Instances page'));
    $this->assertNoText(t('Notice'), t('Make sure there are no Notices'));
    $this->assertNoText(t('warning'), t('Make sure there are no Warnings'));
  }
  
  /**
   * Test SubCloud Images Listing page 
   */
  private function testSubCloudImagesAllList($cloud, $refresh = FALSE) {
    if ($refresh) {
      $this->refreshImages($cloud);
    }
    $this->drupalGet('clouds/' . $cloud . '/images');
    $this->assertResponse(200, t('HTTP 200:' . $cloud . ' Images All page'));
    $this->assertNoText(t('Notice'), t('Make sure there are no Notices'));
    $this->assertNoText(t('warning'), t('Make sure there are no Warnings'));
  }
  
  /**
   * Test SubCloud Images Listing page by Owner
   */  
  private function testSubCloudImagesOwnerList($cloud) {
    $this->drupalGet('clouds/' . $cloud . '/images/owner');
    $this->assertResponse(200, t('HTTP 200:' . $cloud . ' Images By Owner page'));
    $this->assertNoText(t('Notice'), t('Make sure there are no Notices'));
    $this->assertNoText(t('warning'), t('Make sure there are no Warnings'));
  }
  
  /**
   * Test security group listing page 
   */
  private function testSecurityGroupsList($cloud, $refresh = FALSE) {
    if ($refresh) {
      $this->refreshSecurityGroups($cloud);
    }
    $this->drupalGet('clouds/' . $cloud . '/security_groups');
    $this->assertResponse(200, t('HTTP 200:' . $cloud . ' Security Groups page'));
    $this->assertNoText(t('Notice'), t('Make sure there are no Notices'));
    $this->assertNoText(t('warning'), t('Make sure there are no Warnings'));
  }
  
  /**
   * Test SSH Keys Listing page 
   */
  private function testSSHKeysList($cloud, $refresh = FALSE) {
    if ($refresh) {
      $this->refreshSSHKeys($cloud);
    }
    $this->drupalGet('clouds/' . $cloud . '/ssh_keys');
    $this->assertResponse(200, t('HTTP 200:' . $cloud . ' SSH Keys page'));
    $this->assertNoText(t('Notice'), t('Make sure there are no Notices'));
    $this->assertNoText(t('warning'), t('Make sure there are no Warnings'));
  }
  
  /**
   * Test ElasticIP Listing Page 
   */
  private function testElasticIpList($cloud, $refresh = FALSE) {
    if ($refresh) {
      $this->refreshElasticIP($cloud);
    }
    $this->drupalGet('clouds/' . $cloud . '/elastic_ips');
    $this->assertResponse(200, t('HTTP 200:' . $cloud . ' Elastic IPs page'));
    $this->assertNoText(t('Notice'), t('Make sure there are no Notices'));
    $this->assertNoText(t('warning'), t('Make sure there are no Warnings'));
  }
  
  /**
   * Test Volumes Listing Page 
   */
  private function testVolumesList($cloud, $refresh = FALSE) {
    if ($refresh) {
      $this->refreshVolumes($cloud);
    }
    $this->drupalGet('clouds/' . $cloud . '/ebs_volumes');
    $this->assertResponse(200, t('HTTP 200:' . $cloud . ' EBS Volumes page'));
    $this->assertNoText(t('Notice'), t('Make sure there are no Notices'));
    $this->assertNoText(t('warning'), t('Make sure there are no Warnings'));
  }
  
  /**
   * Test Snapshots Listing Page 
   */
  private function testSnapshotsList($cloud, $refresh = FALSE) {
    if ($refresh) {
      $this->refreshSnapshots($cloud);
    }
    $this->drupalGet('clouds/' . $cloud . '/ebs_snapshots');
    $this->assertResponse(200, t('HTTP 200:' . $cloud . ' EBS Snapshot page'));
    $this->assertNoText(t('Notice'), t('Make sure there are no Notices'));
    $this->assertNoText(t('warning'), t('Make sure there are no Warnings'));
  }
  
}

class AwsCloudSSHTestCase extends AwsCloudTestCase {
  
  public static function getInfo() {
    return array(
      'name' => 'AWS Cloud - SSH Key',
      'description' => 'AWS Cloud - Test SSH Key Creation',
      'group' => 'Cloud',
    );
  }
  
  /**
   * Test ssh key creation
   */
  public function testCreateSSHKey() {
    $clouds = $this->getClouds();
    foreach ($clouds as $cloud) {
      $this->refreshInstances($cloud);
      $key_name = $this->privileged_user->name . '_simple_test';
      $this->createSSHKey($key_name, $cloud);
      $this->assertText  (t('Created a Key Pair Successfully.'            ),
                          t('Confirmed: Created a Key Pair Successfully for SubCloud: ' . $cloud));
      $this->assertNoText(t('Notice' ), t('Make sure w/o Notice'         ));
      $this->assertNoText(t('warning'), t('Make sure w/o Warnings'       ));
      //Delete the key after creation
      $this->deleteSSHKey($key_name, $cloud);
      $this->assertText  (t('Key Pair deleted successfully: @keyname', array('@keyname' => $key_name)),
                          t('Confirmed: Key Pair deleted successfully: @keyname', array('@keyname' => $key_name)));
      $this->assertNoText(t('Notice' ), t('Make sure w/o Notice'  ));
      $this->assertNoText(t('warning'), t('Make sure w/o Warnings'));
    }
  }
}

class AwsCloudSecurityTestCase extends AwsCloudTestCase {
  
  public static function getInfo() {
    return array(
      'name' => 'AWS Cloud - Security Group',
      'description' => 'AWS Cloud - Test security group creation',
      'group' => 'Cloud',
    );
  }
  
  /**
   * Test Security Group Creation
   */
  public function testSecurityGroupCreation() {
    $clouds = $this->getClouds();
    foreach ($clouds as $cloud) {
      $edit = array(
        'cloud_context' => $cloud,
        'GroupName_text' => 'SimpleTest_Group',
        'GroupDesc_text' => 'SimpleTest_Group Description',
      );
      $this->drupalPost('clouds/' . $cloud . '/security_groups/create', $edit, t('Create'));
      $this->assertText(t('Created a Security Group Successfully'), t('Confirmed: Security Group Created Successfuly for @cloud', array('@cloud' => $cloud)));
      $this->assertText(t('SimpleTest_Group'), t('SimpleTest_Group listed after creation'));
      $this->assertNoText(t('Notice' ), t('Make sure w/o Notice'  ));
      $this->assertNoText(t('warning'), t('Make sure w/o Warnings'));
    }  
  }
  
  /**
   * Test Deleting Security Group
   */
  public function testDeleteSecurityGroupCreation() {
    $clouds = $this->getClouds();
    foreach ($clouds as $cloud) {
      $this->drupalGet('clouds/' . $cloud . '/security_groups/delete', array(
        'query' => array(
          'sg_name' => 'SimpleTest_Group',
        )
      ));
      $this->assertText(t('Security Group deleted successfully: @group', array('@group' => 'SimpleTest_Group')), t('SimpleTest_Group delete'));
      $this->assertNoText(t('Notice' ), t('Make sure w/o Notice'  ));
      $this->assertNoText(t('warning'), t('Make sure w/o Warnings'));
    }
  }
}