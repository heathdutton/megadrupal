<?php

/**
 * @file
 * AWS Cloud module. This module handles UI interactions
 * with the cloud system for Amazon related clouds.  Amazon
 * clouds are EC2, OpenStack Nova, and Eucalyptus.
 *
 * Copyright (c) 2010-2011 DOCOMO Innovations, Inc.
 *
 */

// Updated by yas 2015/05/08
// Updated by yas 2015/05/07
// Updated by yas 2015/05/06
// Updated by yas 2013/10/31

// @todo: find  better way to load these include files
module_load_include('inc', 'aws_cloud', 'includes/aws_cloud_sdk'               );
module_load_include('inc', 'aws_cloud', 'includes/aws_cloud_constants'         );
module_load_include('inc', 'aws_cloud', 'includes/aws_cloud_db'                );
module_load_include('inc', 'aws_cloud', 'includes/aws_cloud'                   );
module_load_include('inc', 'aws_cloud', 'includes/aws_cloud_ebs_volumes_db'    );
module_load_include('inc', 'aws_cloud', 'includes/aws_cloud_elastic_ips_db'    );
module_load_include('inc', 'aws_cloud', 'includes/aws_cloud_images_db'         );
module_load_include('inc', 'aws_cloud', 'includes/aws_cloud_instances_db'      );
module_load_include('inc', 'aws_cloud', 'includes/aws_cloud_instances_lock_db' );
module_load_include('inc', 'aws_cloud', 'includes/aws_cloud_register_image_db' );
module_load_include('inc', 'aws_cloud', 'includes/aws_cloud_security_groups_db');
module_load_include('inc', 'aws_cloud', 'includes/aws_cloud_snapshots_db'      );
module_load_include('inc', 'aws_cloud', 'includes/aws_cloud_ssh_keys_db'       );
module_load_include('inc', 'aws_cloud', 'includes/aws_cloud_user_keys_db'      );
module_load_include('inc', 'aws_cloud', 'includes/aws_cloud_data'              );

/**
 * Implements hook_libraries_info()
 */
function aws_cloud_libraries_info() {
  return array(
    'awssdk' => array(
      'title' => 'AWS SDK for PHP',
      'vendor url' => 'http://aws.amazon.com/sdkforphp/',
      'download url' => 'http://aws.amazon.com/sdkforphp/',
      'version arguments' => array(
        'file' => 'sdk.class.php',
        'pattern' => "/define\('CFRUNTIME_VERSION', '(.*)'\);/",
        'lines' => 200,
      ),
      'files' => array(
        'php' => array(
          'sdk.class.php',
        ),
      ),
    ),
  );
}

/**
 * Implementation of hook_help()
 */
function aws_cloud_help($section) {
  switch ($section) {
    case 'admin/help#aws_cloud':
      $output = t('The aws_cloud module creates a user interface for managing AWS related clouds.
      AWS clouds are defined as EC2, OpenStack Nova, and Eucalyptus.');
      return $output;
  }
}

/**
 * Implementation of hook_menu().
 */
function aws_cloud_menu() {

  $items = array();
  // generate all the cloud related menus
  $clouds = aws_cloud_get_all_clouds();

  if (empty($clouds)) {
    $items['clouds/configure-aws'] = array(
      'title' => 'Configure AWS Clouds',
      'description' => 'Create/Update/Delete AWS Clouds',
      'page callback' => 'aws_cloud_list',
      'access arguments' => array('administer cloud'),
      'file' => 'includes/aws_cloud_ui.inc',
      'type' => MENU_NORMAL_ITEM,
    );
  }
  else {
    $items['admin/config/clouds/clear_logs'] = array(
      'title' => 'Clear Temporary Logs',
      'description' => 'Clear Temporary Logs',
      'page callback' => 'aws_cloud_clear_temporary_logs',
      'page arguments' => array(''),
      'access arguments' => array('administer cloud'),
      'file' => '',
    );
  }

  $items['admin/config/clouds/list'] = array(
    'title' => 'AWS Clouds',
    'description' => 'Create/Update/Delete AWS Clouds',
    'page callback' => 'aws_cloud_list',
    'access arguments' => array('administer cloud'),
    'file' => 'includes/aws_cloud_ui.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/clouds'] = array(
    'title' => 'AWS Clouds',
    'description' => 'Create/Update/Delete AWS Clouds',
    'page callback' => 'aws_cloud_list',
    'access arguments' => array('administer cloud'),
    'file' => 'includes/aws_cloud_ui.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/clouds/%'] = array(
    'title' => 'Administer @type',
    'title arguments' => array('@type' => 3),
    'page callback' => 'aws_cloud_edit',
    'page arguments' => array(3, 'edit'),
    'access arguments' => array('administer cloud'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/clouds/add'] = array(
    'title' => 'Add Cloud',
    'description' => 'Add a cloud to the system',
    'page callback' => 'aws_cloud_edit',
    'access arguments' => array('administer cloud'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/aws_cloud_ui.inc',
  );
  $items['admin/config/clouds/%/edit'] = array(
    'title' => 'Edit Cloud',
    'description' => 'Edit the details about a certain cloud',
    'page callback' => 'aws_cloud_edit',
    'page arguments' => array(3, 'edit'),
    'access arguments' => array('administer cloud'),
    'file' => 'includes/aws_cloud_ui.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/clouds/%/delete'] = array(
    'title' => 'Delete Cloud',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('aws_cloud_confirm_delete', 3),
    'access arguments' => array('administer cloud'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/aws_cloud_ui.inc',
  );
  
  foreach ($clouds as $cloud) {
    $cloud_context      = $cloud->cloud_name;
    $cloud_display_name = $cloud->cloud_display_name;
    $cloud_menu_path    = cloud_get_menu_path($cloud_context);

    $items[$cloud_menu_path] = array(
      'title' => $cloud_display_name,
      'description' => $cloud_context,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('aws_cloud_display_instances_list', $cloud_context),
      'access arguments' => array($cloud_context . ' list instances'),
      'file' => 'includes/aws_cloud_instances_ui.inc',
      'weight' => -5,
    );
    $items[$cloud_menu_path . '/get_instances_data'] = array(
      'title' => $cloud_display_name . ' API (get_instances_data)',
      'page callback' => 'aws_cloud_fetch_instances_data',
      'page arguments' => array($cloud_context),
      'access arguments' => array($cloud_context . ' list instances'),
//      'file' => 'includes/aws_cloud_instances_ui.inc',
      'type' => MENU_CALLBACK,
    );
  
    $items[$cloud_menu_path . '/callback_get_instances_list'] = array(
      'page callback' => '_aws_cloud_callback_get_instances_list',
      'page arguments' => array($cloud_context),
      'access arguments' => array($cloud_context . ' list instances'),
      'type' => MENU_CALLBACK,
      'file' => 'includes/aws_cloud_instances_ui.inc',
    );
  
    $items[$cloud_menu_path . '/get_volumes_data'] = array(
      'title' => $cloud_display_name . ' API (get volume_data)',
      'page callback' => 'aws_cloud_fetch_volumes_data',
      'page arguments' => array($cloud_context),
      'access arguments' => array($cloud_context . ' list instances'),
      //'file' => 'includes/aws_cloud_volume_ui.inc',
      'type' => MENU_CALLBACK,
    );
    $items[$cloud_menu_path . '/callback_get_volumes_list'] = array(
      'page callback' => '_aws_cloud_callback_get_volumes_list',
      'page arguments' => array($cloud_context),
      'access arguments' => array($cloud_context . ' list instances'),
      'file' => 'includes/aws_cloud_ebs_volumes_ui.inc',
      'type' => MENU_CALLBACK,
    );
    $items[$cloud_menu_path . '/get_elastic_ips_data'] = array(
      'title' => $cloud_display_name . ' API (get elastic_ips_data)',
      'page callback' => 'aws_cloud_fetch_elastic_ips_data',
      'page arguments' => array($cloud_context),
      'access arguments' => array($cloud_context . ' list instances'),
      //'file' => 'includes/aws_cloud_elastic_ips_ui.inc',
      'type' => MENU_CALLBACK,
    );
    $items[$cloud_menu_path . '/get_security_group_data'] = array(
      'title' => $cloud_display_name . ' API (get_security_data )',
      'page callback' => 'aws_cloud_fetch_security_group_data',
      'page arguments' => array($cloud_context),
      'access arguments' => array($cloud_context . ' list instances'),
      //'file' => 'includes/aws_cloud_security_groups_ui.inc',
      'type' => MENU_CALLBACK,
    );
    $items[$cloud_menu_path . '/get_snapshots_data'] = array(
      'title' => $cloud_display_name . ' API (get_snapshot_data)',
      'page callback' => 'aws_cloud_fetch_snapshots_data',
      'page arguments' => array($cloud_context),
      'access arguments' => array($cloud_context . ' list instances'),
      //'file' => 'includes/aws_cloud_snapshots_ui.inc',
      'type' => MENU_CALLBACK,
    );
    $items[$cloud_menu_path . '/callback_get_snapshots_list'] = array(
      'page callback' => '_aws_cloud_callback_get_snapshots_list',
      'page arguments' => array($cloud_context),
      'access arguments' => array($cloud_context . ' list instances'),
      'file' => 'includes/aws_cloud_snapshots_ui.inc',
      'type' => MENU_CALLBACK,
    );
    $items[$cloud_menu_path . '/get_ssh_keys_data'] = array(
      'title' => $cloud_display_name . ' get data',
      'page callback' => 'aws_cloud_fetch_ssh_keys_data',
      'page arguments' => array($cloud_context),
      'access arguments' => array($cloud_context . ' list instances'),
      //'file' => 'includes/aws_cloud_ssh_keys_ui.inc',
      'type' => MENU_CALLBACK,
    );
    $items[$cloud_menu_path . '/getimagedata'] = array(
      'title' => $cloud_display_name . ' get image data',
      'page callback' => 'aws_cloud_fetch_image_data',
      'page arguments' => array($cloud_context),
      'access arguments' => array($cloud_context . ' list instances'),
      //'file' => 'includes/aws_cloud_images_ui.inc',
      'type' => MENU_CALLBACK,
    );
    $items[$cloud_menu_path . '/instance_templates'] = array(
      'title' => 'Launch',
      'description' => 'Launch a New Instance',
      'page callback' => '_cloud_instance_templates',
      'page arguments' => array($cloud_context),
      'access arguments' => array('list template'),
      'weight' => -1,
    );
    $items[$cloud_menu_path . '/instances'] = array(
      'title' => 'Instances',
      'description' => 'Instances',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('aws_cloud_display_instances_list', $cloud_context),
      'access arguments' => array($cloud_context . ' list instances'),
      'file' => 'includes/aws_cloud_instances_ui.inc',
      'weight' => 1,
    );
    $items[$cloud_menu_path . '/instances/describe'] = array(
      'page callback' => 'drupal_get_form',
      'page arguments' => array('aws_cloud_display_instances_list', $cloud_context),
      'access arguments' => array($cloud_context . ' list instances'),
      'file' => 'includes/aws_cloud_instances_ui.inc',
      'type' => MENU_CALLBACK,
    );
    $items[$cloud_menu_path . '/instances/describe/%/info'] = array(
      'title' => 'Info',
      'description' => 'Info',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('aws_cloud_display_instance_info', $cloud_context, 4),
      'access arguments' => array($cloud_context . ' list instances'),
      'file' => 'includes/aws_cloud_instances_ui.inc',
      'weight' => 1,
      'type' => MENU_LOCAL_TASK,
    );
    $items[$cloud_menu_path . '/instances/describe/%/volume'] = array(
      'title' => 'Volumes',
      'description' => 'Volumes',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('aws_cloud_display_instance_volume_info', $cloud_context, 4),
      'access arguments' => array($cloud_context . ' list volume'),
      'file' => 'includes/aws_cloud_instances_ui.inc',
      'weight' => 2,
      'type' => MENU_LOCAL_TASK,
    );
    $items[$cloud_menu_path . '/instances/describe/%/volume/attach_volume'] = array(
      'page callback' => 'drupal_get_form',
      'page arguments' => array('aws_cloud_attach_instance_volume', $cloud_context, 4),
      'access arguments' => array($cloud_context . ' attach volume'),
      'file' => 'includes/aws_cloud_instances_ui.inc',
      'type' => MENU_CALLBACK,
    );
  
    $items[$cloud_menu_path . '/instances/describe/%/volume/detach_volume'] = array(
      'title' => 'Detach',
      'page callback' => 'aws_cloud_detach_instance_volume',
      'page arguments' => array($cloud_context, 4),
      'access arguments' => array($cloud_context . ' attach volume'),
      'file' => 'includes/aws_cloud_instances_ui.inc',
      'type' => MENU_CALLBACK,
    );
  
    $items[$cloud_menu_path . '/instances/terminate'] = array(
      'title' => 'Terminate',
      'page callback' => 'aws_cloud_terminate_instance',
      'page arguments' => array($cloud_context),
      'access arguments' => array($cloud_context . ' list instances'),
      'file' => 'includes/aws_cloud_instances_ui.inc',
      'type' => MENU_CALLBACK,
    );
  
    $items[$cloud_menu_path . '/instances/reboot'] = array(
      'title' => 'Reboot',
      'page callback' => 'aws_cloud_reboot_instance',
      'page arguments' => array($cloud_context),
      'access arguments' => array($cloud_context . ' list instances'),
      'file' => 'includes/aws_cloud_instances_ui.inc',
      'type' => MENU_CALLBACK,
    );
    $items[$cloud_menu_path . '/instances/bundle_instance'] = array(
      'title' => 'Bundle Instance',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('aws_cloud_bundle_instance', $cloud_context),
      'access arguments' => array($cloud_context . ' bundle instance'),
      'type' => MENU_CALLBACK,
      'file' => 'includes/aws_cloud_instances_ui.inc',
    );
  
  //   $items[$cloud_menu_path . '/instances/monitor'] = array(
  //     'title' => 'Monitor',
  //     'page callback' => 'aws_cloud_monitor_instance',
  //     'page arguments' => array($cloud_context),
  //     'access arguments' => array($cloud_context . ' list instances'),
  //     'file' => '',
  //     'type' => MENU_CALLBACK,
  //   );
    if (module_exists('cloud_failover')) {
      $items[$cloud_menu_path . '/instances/enable_failover'] = array(
        'title' => 'Enable Failover',
        'page callback' => 'aws_cloud_enable_failover',
        'page arguments' => array($cloud_context),
        'access arguments' => array($cloud_context . ' enable failover'),
        'file' => 'includes/aws_cloud_instances_ui.inc',
        'type' => MENU_CALLBACK,
      );
      $items[$cloud_menu_path . '/instances/disable_failover'] = array(
        'title' => 'Disable Failover',
        'page callback' => 'aws_cloud_disable_failover',
        'page arguments' => array($cloud_context),
        'access arguments' => array($cloud_context . ' disable failover'),
        'file' => 'includes/aws_cloud_instances_ui.inc',
        'type' => MENU_CALLBACK,
      );
    }
    $items[$cloud_menu_path . '/instances/describe/%/console'] = array(
      'title' => 'Console',
      'description' => 'Console',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('aws_cloud_display_instance_console', $cloud_context, 4),
      'access arguments' => array($cloud_context . ' list instances'),
      'file' => 'includes/aws_cloud_instances_ui.inc',
      'weight' => 3,
      'type' => MENU_LOCAL_TASK,
    );
    $items[$cloud_menu_path . '/instances/describe/%/console_popup'] = array(
      'title' => 'Console',
      'description' => 'Console',
      'page callback' => 'aws_cloud_console_popup',
      'page arguments' => array($cloud_context, 4),
      'access arguments' => array($cloud_context . ' list instances'),
      'file' => 'includes/aws_cloud_instances_ui.inc',
      'weight' => 3,
      'type' => MENU_CALLBACK,
    );
    $items[$cloud_menu_path . '/instances/describe/%/console_output'] = array(
      'title' => 'Console Output',
      'description' => 'Console Output',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('aws_cloud_display_instance_console_output', $cloud_context, 4),
      'access arguments' => array($cloud_context . ' list instances'),
      'weight' => 5,
      'file' => 'includes/aws_cloud_instances_ui.inc',
      'type' => MENU_LOCAL_TASK,
    );
    $items[$cloud_menu_path . '/images'] = array(
      'title' => 'Images',
      'description' => 'Images',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('aws_cloud_display_images_list', $cloud_context, 'all'),
      'weight' => 2,
      'access arguments' => array($cloud_context . ' list images'),
      'file' => 'includes/aws_cloud_images_ui.inc',
    );
    $items[$cloud_menu_path . '/images/all'] = array(
      'title' => 'All',
      'description' => 'All',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('aws_cloud_display_images_list', $cloud_context, 'all'),
      'weight' => 1,
      'access arguments' => array($cloud_context . ' list images'),
      'file' => 'includes/aws_cloud_images_ui.inc',
      'type' => MENU_LOCAL_TASK,
    );
    $items[$cloud_menu_path . '/images/owner'] = array(
      'title' => 'Owner',
      'description' => 'Owner',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('aws_cloud_display_images_list', $cloud_context, 'owner'),
      'weight' => 2,
      'access arguments' => array($cloud_context . ' list images'),
      'file' => 'includes/aws_cloud_images_ui.inc',
      'type' => MENU_LOCAL_TASK,
    );
    $items[$cloud_menu_path . '/instances/backup/%'] = array(
      'title' => 'Backup Instance',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('aws_cloud_display_backup_instance_form', $cloud_context, 4),
      'access arguments' => array($cloud_context . ' register image'),
      'file' => 'includes/aws_cloud_images_ui.inc',
      'type' => MENU_CALLBACK,
    );
    $items[$cloud_menu_path . '/security_groups'] = array(
      'title' => 'Security Groups',
      'description' => 'Security Groups',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('aws_cloud_display_security_group_list', $cloud_context),
      'weight' => 3,
      'access arguments' => array($cloud_context . ' list security group'),
      'file' => 'includes/aws_cloud_security_groups_ui.inc',
    );
  
    $items[$cloud_menu_path . '/security_groups/delete'] = array(
      'title' => 'Delete',
      'page callback' => 'aws_cloud_delete_security_group',
      'page arguments' => array($cloud_context),
      'access arguments' => array($cloud_context . ' delete security group'),
      'file' => 'includes/aws_cloud_security_groups_ui.inc',
      'type' => MENU_CALLBACK,
    );
    $items[$cloud_menu_path . '/security_groups/revoke'] = array(
      'title' => 'Revoke',
      'page callback' => 'aws_cloud_revoke_security_group',
      'page arguments' => array($cloud_context),
      'access arguments' => array($cloud_context . ' delete security group'),
      'file' => 'includes/aws_cloud_security_groups_ui.inc',
      'type' => MENU_CALLBACK,
    );
    $items[$cloud_menu_path . '/security_groups/create'] = array(
      'title' => 'New Security Group',
      'description' => 'New Security Group',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('aws_cloud_create_security_group', $cloud_context),
      'access arguments' => array($cloud_context . ' register security group'),
      'file' => 'includes/aws_cloud_security_groups_ui.inc',
      'type' => MENU_CALLBACK,
    );
    $items[$cloud_menu_path . '/security_groups/describe'] = array(
      'title' => 'Security Group Info',
      'description' => 'Security Group Info',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('aws_cloud_display_security_group', $cloud_context),
      'access arguments' => array($cloud_context . ' list security group'),
      'file' => 'includes/aws_cloud_security_groups_ui.inc',
      'type' => MENU_CALLBACK,
    );
    $items[$cloud_menu_path . '/ssh_keys'] = array(
      'title' => 'SSH Keys',
      'description' => 'SSH Keys',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('aws_cloud_display_ssh_keys_list', $cloud_context),
      'weight' => 4,
      'access arguments' => array($cloud_context . ' list key names'),
      'file' => 'includes/aws_cloud_ssh_keys_ui.inc',
    );
    $items[$cloud_menu_path . '/ssh_keys/create'] = array(
      'title' => 'Add SSH Key Pair',
      'description' => 'Add SSH Key Pair',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('aws_cloud_create_ssh_key', $cloud_context),
      'access arguments' => array($cloud_context . ' register key'),
      'file' => 'includes/aws_cloud_ssh_keys_ui.inc',
      'type' => MENU_CALLBACK,
    );
    $items[$cloud_menu_path . '/ssh_keys/delete'] = array(
      'title' => 'Delete',
      'page callback' => 'aws_cloud_delete_ssh_key',
      'page arguments' => array($cloud_context),
      'access arguments' => array($cloud_context . ' delete key'),
      'file' => 'includes/aws_cloud_ssh_keys_ui.inc',
      'type' => MENU_CALLBACK,
    );
    $items[$cloud_menu_path . '/ssh_keys/describe'] = array(
      'title' => 'SSH Key Pair Info',
      'description' => 'SSH Key Pair Info',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('aws_cloud_display_ssh_key', $cloud_context),
      'access arguments' => array($cloud_context . ' list key fingerprints'),
      'file' => 'includes/aws_cloud_ssh_keys_ui.inc',
      'type' => MENU_CALLBACK,
    );
    $items[$cloud_menu_path . '/ssh_keys/key_material/%'] = array(
      'title' => 'Get Key',
      'page callback' => 'aws_cloud_get_key_material',
      'page arguments' => array($cloud_context, 4),
      'access callback' => 'aws_cloud_lib_key_access',
      'access arguments' => array($cloud_context, 4),
      'type' => MENU_CALLBACK,
      'file' => 'includes/aws_cloud_ssh_keys_ui.inc',
    );
    $items[$cloud_menu_path . '/elastic_ips'] = array(
      'title' => 'Elastic IPs',
      'description' => 'Elastic IPs',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('aws_cloud_display_elastic_ip_list', $cloud_context),
      'weight' => 5,
      'access arguments' => array($cloud_context . ' list IPs'),
      'file' => 'includes/aws_cloud_elastic_ips_ui.inc',
    );
    $items[$cloud_menu_path . '/elastic_ips/delete'] = array(
      'title' => 'Delete',
      'page callback' => 'aws_cloud_delete_elastic_ip',
      'page arguments' => array($cloud_context),
      'access arguments' => array($cloud_context . ' delete IP'),
      'file' => 'includes/aws_cloud_elastic_ips_ui.inc',
      'type' => MENU_CALLBACK,
    );
    $items[$cloud_menu_path . '/elastic_ips/describe'] = array(
      'title' => 'Elastic IP Info',
      'description' => 'Elastic IP Details',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('aws_cloud_display_elastic_ip', $cloud_context),
      'access arguments' => array($cloud_context . ' list IPs'),
      'file' => 'includes/aws_cloud_elastic_ips_ui.inc',
      'type' => MENU_CALLBACK,
    );
    $items[$cloud_menu_path . '/ebs_volumes'] = array(
      'title' => 'Volumes',
      'description' => 'Volumes',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('aws_cloud_display_ebs_volumes_list', $cloud_context),
      'weight' => 6,
      'access arguments' => array($cloud_context . ' list volume'),
      'file' => 'includes/aws_cloud_ebs_volumes_ui.inc',
    );
  
    $items[$cloud_menu_path . '/ebs_volumes/create'] = array(
      'title' => 'New Volume',
      'description' => 'New Volume',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('aws_cloud_create_ebs_volume', $cloud_context),
      'access arguments' => array($cloud_context . ' create volume'),
      'file' => 'includes/aws_cloud_ebs_volumes_ui.inc',
      'type' => MENU_CALLBACK,
    );
    $items[$cloud_menu_path . '/ebs_volumes/delete'] = array(
      'title' => 'Delete Volume',
      'page callback' => 'aws_cloud_delete_ebs_volume',
      'page arguments' => array($cloud_context),
      'access arguments' => array($cloud_context . ' delete volume'),
      'file' => 'includes/aws_cloud_ebs_volumes_ui.inc',
      'type' => MENU_CALLBACK,
    );
    $items[$cloud_menu_path . '/ebs_volumes/detach'] = array(
      'title' => 'Detach Volume',
      'page callback' => 'aws_cloud_detach_ebs_volume',
      'page arguments' => array($cloud_context),
      'access arguments' => array($cloud_context . ' detach volume'),
      'file' => 'includes/aws_cloud_ebs_volumes_ui.inc',
      'type' => MENU_CALLBACK,
    );
    $items[$cloud_menu_path . '/ebs_volumes/create_snapshot'] = array(
      'title' => 'Create a Snapshot',
      'description' => 'Create a Snapshot',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('aws_cloud_create_ebs_volume_snapshot', $cloud_context),
      'access arguments' => array($cloud_context . ' create snapshot'),
      'file' => 'includes/aws_cloud_ebs_volumes_ui.inc',
      'type' => MENU_CALLBACK,
    );
    $items[$cloud_menu_path . '/ebs_volumes/describe'] = array(
      'title' => 'Volume Info',
      'description' => 'Volume Details',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('aws_cloud_display_ebs_volume', $cloud_context),
      'access arguments' => array($cloud_context . ' list volume'),
      'file' => 'includes/aws_cloud_ebs_volumes_ui.inc',
      'type' => MENU_CALLBACK,
    );
    $items[$cloud_menu_path . '/ebs_snapshots'] = array(
      'title' => 'Snapshots',
      'description' => 'Volume Snapshots',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('aws_cloud_display_snapshot_list', $cloud_context),
      'weight' => 7,
      'access arguments' => array($cloud_context . ' list snapshot'),
      'file' => 'includes/aws_cloud_snapshots_ui.inc',
    );
    $items[$cloud_menu_path . '/ebs_snapshots/delete'] = array(
      'title' => 'Delete Snapshot',
      'page callback' => 'aws_cloud_delete_snapshot',
      'page arguments' => array($cloud_context),
      'access arguments' => array($cloud_context . ' delete snapshot'),
      'file' => 'includes/aws_cloud_snapshots_ui.inc',
      'type' => MENU_CALLBACK,
    );
    $items[$cloud_menu_path . '/ebs_snapshots/describe'] = array(
      'title' => 'Volume Snapshot Info',
      'description' => 'Volume Snapshot Details',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('aws_cloud_display_snapshot_info', $cloud_context),
      'access arguments' => array($cloud_context . ' list snapshot'),
      'file' => 'includes/aws_cloud_snapshots_ui.inc',
      'type' => MENU_CALLBACK,
    );
    // @todo: find out if these are still needed    
    $items['design/server_templates/' . $cloud_context . '/ec2_lib_callback_list_machine_images'] = array(
      'title' => 'List Images',
      'page callback' => 'aws_cloud_callback_list_machine_images',
      'page arguments' => array($cloud_context),
      'access arguments' => array('create server template'),
      'type' => MENU_CALLBACK,
    );
    $items['design/server_templates/' . $cloud_context . '/ec2_lib_callback_list_kernel_images'] = array(
      'title' => 'List Images',
      'page callback' => 'aws_cloud_callback_list_kernel_images',
      'page arguments' => array($cloud_context),
      'access arguments' => array('create server template'),
      'type' => MENU_CALLBACK,
    );
    $items['design/server_templates/' . $cloud_context . '/ec2_lib_callback_list_ramdisk_images'] = array(
      'title' => 'List Images',
      'page callback' => 'aws_cloud_callback_list_ramdisk_images',
      'page arguments' => array($cloud_context),
      'access arguments' => array('create server template'),
      'type' => MENU_CALLBACK,
    );
  }

  return $items;
}

/**
 * Implementation of hook_theme().
 */
function aws_cloud_theme() {
  return array(
    'aws_cloud_list' => array(
      'arguments' => array(),
      'file' => 'includes/aws_cloud_ui.inc',
    ),
    'aws_cloud_cluster_form' => array(
      'render element' => 'form',
    ),
    'aws_cloud_display_instances_list' => array(
      'render element' => 'form',
      'file' => 'includes/aws_cloud_instances_ui.inc',
    ),
    'aws_cloud_display_instance_info' => array(
      'render element' => 'form',
      'file' => 'includes/aws_cloud_instances_ui.inc',
    ),
    'aws_cloud_attach_instance_volume' => array(
      'render element' => 'form',
      'file' => 'includes/aws_cloud_instances_ui.inc',
    ),
    'aws_cloud_display_instance_volume_info' => array(
      'render element' => 'form',
      'file' => 'includes/aws_cloud_instances_ui.inc',
    ),
    'aws_cloud_display_instance_monitor_info' => array(
      'render element' => 'form',
      'file' => 'includes/aws_cloud_instances_ui.inc',
    ),
    'aws_cloud_display_ebs_volumes_list' => array(
      'render element' => 'form',
      'file' => 'includes/aws_cloud_ebs_volumes_ui.inc',
    ),
    'aws_cloud_create_ebs_volume' => array(
      'render element' => 'form',
      'file' => 'includes/aws_cloud_ebs_volumes_ui.inc',
    ),
    'aws_cloud_display_ebs_volume' => array(
      'render element' => 'form',
      'file' => 'includes/aws_cloud_ebs_volumes_ui.inc',
    ),
    'aws_cloud_create_ebs_volume_snapshot' => array(
      'render element' => 'form',
      'file' => 'includes/aws_cloud_ebs_volumes_ui.inc',
    ),
    'aws_cloud_display_elastic_ip' => array(
      'render element' => 'form',
      'file' => 'includes/aws_cloud_elastic_ips_ui.inc',
    ),
    'aws_cloud_display_elastic_ip_list' => array(
      'render element' => 'form',
      'file' => 'includes/aws_cloud_elastic_ips_ui.inc',
    ),
    'aws_cloud_display_images_list' => array(
      'render element' => 'form',
      'file' => 'includes/aws_cloud_images_ui.inc',
    ),
    'aws_cloud_display_backup_instance_form' => array(
      'render element' => 'form',
      'file' => 'includes/aws_cloud_images_ui.inc',
    ),
    'aws_cloud_display_bundle_image_form' => array(
      'render element' => 'form',
      'file' => 'includes/aws_cloud_images_ui.inc',
    ),
    'aws_cloud_bundle_instance' => array(
      'render element' => 'form',
      'file' => 'includes/aws_cloud_instances_ui.inc',
    ),
    'aws_cloud_display_security_group' => array(
      'render element' => 'form',
      'file' => 'includes/aws_cloud_security_groups_ui.inc',
    ),
    'aws_cloud_create_security_group' => array(
      'render element' => 'form',
      'file' => 'includes/aws_cloud_security_groups_ui.inc',
    ),
    'aws_cloud_display_security_group_list' => array(
      'render element' => 'form',
      'file' => 'includes/aws_cloud_security_groups_ui.inc',
    ),
    'aws_cloud_display_snapshot_list' => array(
      'render element' => 'form',
      'file' => 'includes/aws_cloud_snapshots_ui.inc',
    ),
    'aws_cloud_display_ssh_key' => array(
      'render element' => 'form',
      'file' => 'includes/aws_cloud_ssh_keys_ui.inc',
    ),
    'aws_cloud_create_ssh_key' => array(
      'render element' => 'form',
      'file' => 'includes/aws_cloud_ssh_keys_ui.inc',
    ),
    'aws_cloud_display_ssh_keys_list' => array(
      'render element' => 'form',
      'file' => 'includes/aws_cloud_ssh_keys_ui.inc',
    ),
    'aws_cloud_display_snapshot_info' => array(
      'render element' => 'form',
      'file' => 'includes/aws_cloud_snapshots_ui.inc',
    ),
    'aws_cloud_display_instance_console_output' => array(
      'render element' => 'form',
      'file' => 'includes/aws_cloud_instances_ui.inc',
    ),
    'aws_cloud_server_templates_new' => array(
      'render element' => 'form',
      'file' => 'includes/aws_cloud_template_ui.inc',
      'function' => 'theme_cloud_server_templates_new',
    ),
    'aws_cloud_server_templates_view' => array(
      'render element' => 'form',
      'file' => 'includes/aws_cloud_template_ui.inc',
      'function' => 'theme_cloud_server_templates_view',
    ),
  );
}

/**
 * Implementation of hook_permission().
 */
function aws_cloud_permission() {
  $perm = array();
  $clouds = aws_cloud_get_all_clouds();
  $tmp_perm_arr = array(
    'administer cloud',
    'list instances',
    'launch instance',
    'bundle instance',
    'terminate all instances',
    'terminate own instance',
    'access all console',
    'access own console',
    'list images',
    'register image',
    'delete image',
    'list key fingerprints',
    'list key names',
    'register key',
    'update key',
    'delete key',
    'list IPs',
    'add IP',
    'delete IP',
    'assign IP',
    'update instance details',
    'list security group',
    'register security group',
    'setup security group',
    'delete security group',
    'list volume',
    'create volume',
    'delete volume',
    'attach volume',
    'detach volume',
    'list snapshot',
    'create snapshot',
    'delete snapshot',
    'display cpu load',
    'display traffic amount',
    'display storage space',
    'list template',
    'create template',
    'update template',
    'update own template',
    'delete template',
    'delete own template',
    'copy template',
    'access report',
    'enable failover',
    'disable failover',
  );
  
  foreach ($clouds as $cloud) {
    foreach ($tmp_perm_arr as $key) {
      $cloud_name = $cloud->cloud_name;
      $perm[$cloud_name . ' ' . $key] = array(
        'title' => t($cloud_name . ' ' . $key),
        'description' => t('Permission to "@key" on "@cloud"', array(
                                          '@key' => $key, '@cloud' => $cloud_name)),
      );
    }
  }
  return $perm;
}

/**
 * Implementation of hook_cron().
 */
function aws_cloud_cron() {
  $clouds = aws_cloud_get_all_clouds();
  foreach ($clouds as $cloud) {
    aws_cloud_fetch_data($cloud->cloud_name); // This will fetch Cloud related information
    // load the bundle code and run it
     module_load_include('inc', 'aws_cloud', 'includes/aws_cloud_bundle_instance');
     aws_cloud_process_bundle_instance();
  }
}

/**
 * Implementation of hook_user_validate().
 */
function aws_cloud_user_validate($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'login':
      $clouds = aws_cloud_get_all_clouds();
      foreach ($clouds as $cloud) {
        aws_cloud_ssh_keys_check_load($cloud->cloud_name, $account->name);
      }
    break;
  }
}

/**
 * Implementation of hook_server_template().
 * $params array will contain the cloud_context
 */
function aws_cloud_server_template($op, $params = array()) {
  module_load_include('inc', 'aws_cloud', 'includes/aws_cloud_template_ui');
  switch ($op) {
    case 'list':
      return _cloud_server_templates_list('cloud_server_templates', $params['cloud_context'], $params);
    case 'create':
      return drupal_get_form('aws_cloud_server_templates_new', $params['cloud_context'], $params);
    case 'view':
      return drupal_get_form('aws_cloud_server_templates_view', $params['cloud_context'], $params);
    case 'cluster_form':
      return drupal_get_form('aws_cloud_cluster_form', $params);
  }
}

/**
 * Implementation of hook_cloud_action()
 */
function aws_cloud_cloud_action($op, $params = array() ) {
  $cloud_context = $params['cloud_context'];
  switch ($op) {
    case 'launch':
      return aws_cloud_server_templates_launch($cloud_context, $params);
    case 'launch_using_params':
      return aws_cloud_launch_params($cloud_context, $params );
    case 'terminate':
      return aws_cloud_terminate_instance($cloud_context, $params);
    case 'check_key_sg_data':
      return aws_cloud_has_instances_data($cloud_context);
    case 'check_key_data':
      return aws_cloud_has_ssh_key_data($cloud_context);
    case 'check_sg_data':
      return aws_cloud_has_security_group_data($cloud_context);
    case 'get_ssh_key_owner':
      return aws_cloud_get_ssh_key_owner($cloud_context, $params['key_name']);
    case 'get_images_count':
      return _aws_cloud_get_images_list_count($cloud_context);
    case 'backup':
      return aws_cloud_save_snapshot($cloud_context, $params['volume_id'], $params['snapshot_name'], $params['snapshot_description']);
    case 'detach_volume':
      return aws_cloud_detach_volume($cloud_context, $params['volume_id']);
    case 'check_snapshot_completion':
      return _aws_cloud_check_snapshot_completion($params['snapshot_id']);
    case 'check_volume_attached_status':
      return _aws_cloud_check_volume_attached_status($params['volume_id']);
    case 'check_instance_terminated':
      return _aws_cloud_check_instance_terminated($params['instance_id']);
    case 'get_instance_lock_status':
      return _aws_cloud_get_lock_status_by_id_query($params['cloud_context'], $params['instance_id']);
  }
}

/**
 * Launch Instance using Server Template.  The template id 
 * can be passed in the $params array.
 *
 * @param $cloud_context
 *    Sub-cloud for which instance is to be launched
 * @param $params
 *   Params to be passed
 * @return
 */
function aws_cloud_server_templates_launch($cloud_context, $params = array()) {

  $template_id    = !empty($params['templateid']) ? $params['templateid'] : '';
  $cloud_type     = _cloud_server_templates_get_cloud($template_id);
  $binded_scripts = array();

  if (empty($template_id) || strlen($template_id) == 0) {
    drupal_goto( CLOUD_SERVER_TEMPLATES_PATH . '/list/' . $cloud_context);
  }

  if (module_exists('cloud_scripting')) {
    //get template scripts
    if ($template_id) {
      $query   = _cloud_server_templates_get_server_for_copy($edit = TRUE);
      $result1 = db_query($query, array(':template_id' => $template_id));

      foreach ($result1 as $template_obj) {
        $script_root      = ''  ;
        $file_name        = $script_root . 'script_' . $template_obj->script_id . '.sh';
        $binded_scripts[] = $file_name;
      }
    }
    //get template scripts
  }

  $query_args   = array();
  $query = '';
  $result = '';
  $key = '';

  $query         = _cloud_server_templates_get_server_template_details();
  $query->condition('template_id', $template_id, '=');
  $result = $query->execute();
  $count  = 0;
  $instance_ids = array();
  foreach ($result as $key) {
    $user_name = empty($key->user_name) ? CLOUD_SSH_USER_NAME : $key->user_name;
    $params = array(
      'bindedScripts' => $binded_scripts,
      'cloud_type' => $key->cloud_type,
    );
    $grp_id  = explode(',', $key->group_id);

    $result_launch = aws_cloud_launch_new_instance(
      $key->cloud_type        ,
      $key->template_nickname,
      $key->image_id          ,
      $key->count_instances   ,
      $key->key_name          ,
      $grp_id                 ,
      $key->user_data         ,
      $key->instance_type     ,
      $key->placement         ,
      $key->kernel_id         ,
      $key->ramdisk_id        ,
      $params                 ,
      $user_name
    );
    if ($result_launch) {
      $instance_ids = array_merge($instance_ids, $result_launch);
    }
    $count++;
  }

  if ($result_launch) {
    // Allow other modules to handle instance data
    foreach ($instance_ids as $new_instance_id) {
      cloud_action_notify('post_launch', array('cloud_context' => $cloud_context, 'instance_id' => $new_instance_id, 'template_id' => $template_id));
    }
    _aws_cloud_set_scripts_to_exec($instance_ids, $template_id, $cloud_context);
    drupal_goto('clouds/' . $cloud_context . '/instances');
  }
  else {
    if ($count == 0) {
      drupal_set_message(check_plain(t('Failed to launch instance. Template not found: @template_id', array('@template_id' => $template_id) ) ), 'error' );
    }
    else {
      drupal_set_message(t('Failed to launch instance.'), 'error' );
    }
    drupal_goto( CLOUD_SERVER_TEMPLATES_PATH . '/list/' . $cloud_context);
  }
}

/**
 *
 * @param type $cloud_context
 * @param type $params
 * @return type
 */
function aws_cloud_cloud_get_instance_pub_ip($cloud_context, $params) {
  $instance_id = $params['instance_id'];
  $ec2_lib_elastic_ip_table    = aws_cloud_get_table_info( AWS_CLOUD_ELASTIC_IP_TABLE );
  $sql_instance_select         = 'select public_ip from  {' . $ec2_lib_elastic_ip_table . "} where instance_id= :instance_id and cloud_type=:cloud_type";

  $sql_instance_select_args = array(
    ':instance_id' => $instance_id,
    ':cloud_type' => $cloud_context,
  );

  $result = db_query($sql_instance_select, $sql_instance_select_args);

  foreach ($result as $row) {
    return $row->public_ip;
  }

  return '';
}

/**
 *
 * @param type $cloud_context
 * @param type $params
 * @return type
 */
function aws_cloud_cloud_associate_elastic_ip($cloud_context, $params) {
  $instance_id = $params['instance_id'];
  $pub_ip      = $params['pub_ip'];

  $result = aws_cloud_associate_ip($cloud_context, $instance_id, $pub_ip);
  return $result;
}

/**
 *
 * @param type $cloud_context
 * @param type $params
 * @return type
 */
function aws_cloud_cloud_update_elastic_ip_mapping($cloud_context, $params) {
  $ec2_lib_elastic_ip_table    = aws_cloud_get_table_info( AWS_CLOUD_ELASTIC_IP_TABLE );
  
  return db_update($ec2_lib_elastic_ip_table)
    ->fields(array(
      'instance_id' => $params['old_instance_id'],
    ))
    ->condition('instance_id', $params['new_instance_id'], '=')
    ->execute();
}

/**
 * Implementation of hook_cloud_get_all_instances()
 */
function aws_cloud_cloud_get_all_instances($cloud_context, $filter = array()) {
  module_load_include('inc', 'aws_cloud', 'includes/aws_cloud_instances_ui');
  $instances_list = _aws_cloud_get_all_instances_db($cloud_context, $filter);
  foreach ($instances_list as &$instance) {
    $action_data = aws_cloud_get_instances_action($cloud_context, $instance);
    $instance['action_data'] = $action_data;
  }
  return $instances_list;
}

/**
 * Implementation of hook_cloud_get_instance_volumes()
 */
function aws_cloud_cloud_get_all_instance_volumes($cloud_context, $instance_id) {
  return _aws_cloud_get_all_volumes_db($cloud_context, $instance_id);
}


/**
 * Implementation of hook_cloud_get_ssh_key().
 */
function aws_cloud_cloud_get_ssh_key($params) {
  return _aws_cloud_get_ssh_key($params);
}

/**
 * Implementation of hook_cloud_update_data().
 */
function aws_cloud_cloud_update_data($cloud_context) {
  return aws_cloud_fetch_data($cloud_context);
}

/**
 * Implementation of hook_cloud_get_instance().
 */
function aws_cloud_cloud_get_instance($cloud_context, $filter = array()) {
  return _aws_cloud_get_all_instances_db($cloud_context, $filter);
}

/**
 * Get all the available sub cloud and their default
 * pricing and template data.
 * This function then calls hook_aws_cloud_data to allow
 * modules to add other amazon based sub-clouds into
 * the list.
 * @param $base_cloud
 *  Sub-cloud's key. If not passed, all sub cloud data
 *  is returned
 */
function aws_cloud_get_cloud_data($base_cloud = NULL) {

  static $data;

  $data = module_invoke_all('aws_cloud_data');
  if(empty($data)) $data = aws_cloud_aws_cloud_data();
  if (isset($base_cloud)) {
    return isset($data[$base_cloud]) ? $data[$base_cloud] : array();
  }

  return $data;
}

/**
 * Implementation of hook_cloud_set_info().
 * I feel this hook doesn't have much use anymore
 * in the new cloud management
 */
function aws_cloud_cloud_set_info($cloud_context = '') {

  //from cloud_context, get base_cloud, and return the base info
  $info = array();
  if (!empty($cloud_context)) {
    $cloud = aws_cloud_get_cloud($cloud_context);
    $info  = aws_cloud_get_cloud_data($cloud['base_cloud']);
  }

  return $info;
}

/**
 * Implementation of hook_cloud_save().
 * Gives this module a chance to save data into
 * its own database tables and perform other actions
 */
function aws_cloud_cloud_save($op, $cloud) {
  switch ($op) {
    case 'create':
      drupal_write_record(AWS_CLOUD_DETAILS_TABLE, $cloud);
      variable_set($cloud->cloud_name . '_menu_path', 'clouds/' . $cloud->cloud_name);
      variable_set($cloud->cloud_name . '_admin_menu_path', 'admin/config/clouds/' . $cloud->cloud_name . '/edit');
      menu_rebuild();
      break;
    case 'edit':
      drupal_write_record(AWS_CLOUD_DETAILS_TABLE, $cloud, 'cloud_name');
      menu_rebuild();
      break;
  }
}

/**
 * Implementation of hook_cloud_delete().
 * Delete row from the cloud_aws_cloud_details table
 */
function aws_cloud_cloud_delete($cloud_name) {
  aws_cloud_delete_cloud($cloud_name);
  menu_rebuild();
  variable_del($cloud_name . '_menu_path');
  variable_del($cloud_name . '_admin_menu_path');
  aws_cloud_delete_all($cloud_name);
}

/**
 * Implementation of hook_cloud_get_info().
 * Allows this module to return the information requested.
 * Use a static cache because this function gets called a lot
 * during a cloud refresh or on a cron run
 */
function aws_cloud_cloud_get_info($cloud_name, $key) {
  $values = &drupal_static(__FUNCTION__);
  $return = NULL;
  $cache_key = "$cloud_name:$key";
  if (isset($values[$cache_key])) {
    $return = $values[$cache_key];
  }
  else {
    $value = aws_cloud_get_info($cloud_name, $key);
    if ($value !== FALSE) {
      $values[$cache_key] = $value;
      $return = $value;
    }
  }
  return $return;
}

/**
 * Function to determine access to ssh key materials.
 * This permission check makes sure a user that can only
 * access their own console receives the same access to the
 * ssh key.
 *
 * Users without permissions will not be able to access the
 * private key
 */
function aws_cloud_lib_key_access($cloud_context, $key_name) {
  global $user;
  if ($user->uid == 1) {
    return TRUE;
  }
  if (user_access($cloud_context . ' access own console')) {
    $user_keys_all = aws_cloud_get_all_keys($cloud_context);
    if (in_array($key_name, $user_keys_all)) {
      return TRUE;
    }
    return FALSE;
  }
  return user_access($cloud_context . ' access all console');
}

/**
 * Launch an instance with parameters 
 */
function aws_cloud_launch_params($cloud_context, $launch_params = array() ) {
  if (empty($launch_params) || isset($launch_params['template_id']) === FALSE) {
    drupal_set_message(t('Cannot launch instance without a template_id'), 'error');
    return;
  }
  $redirect = '' ;
  if (isset($launch_params['redirect']) ) {
    $redirect = $launch_params['redirect'];
  }
  $template_id = $launch_params['template_id'];

  $key           = '';
  $result        = '';
  $result_launch = '';
  $new_instance_ids = array();
   
  $query         = _cloud_server_templates_get_server_template_details();
  $query->condition('template_id', $template_id, '=');
  $result = $query->execute();
  $count  = 0;

  foreach ($result as $key) {
    $user_name = empty($key->user_name) ? CLOUD_SSH_USER_NAME : $key->user_name;
    $params = array();

    // Set the overriding paramters
    $nickname         = isset( $launch_params['nickname'] ) ? $launch_params['nickname'] : $key->template_nickname;
    $key_name         = isset( $launch_params['key_name'] ) ? $launch_params['key_name'] : $key->key_name          ;
    $placement        = isset( $launch_params['placement'] ) ? $launch_params['placement'] : $key->placement         ;
    $count_instances  = isset( $launch_params['count_instances'] ) ? $launch_params['count_instances'] : $key->count_instances         ;
    $grp_str          = isset( $launch_params['security_group'] ) ? $launch_params['security_group'] : $key->group_id;
    $grp_id           = explode(',', $grp_str );

    $result_launch = aws_cloud_launch_new_instance(
      $key->cloud_type      ,
      $nickname             ,
      $key->image_id        ,
      $count_instances      ,
      $key_name             ,
      $grp_id               ,
      $key->user_data       ,
      $key->instance_type   ,
      $placement            ,
      $key->kernel_id       ,
      $key->ramdisk_id      ,
      $params               ,
      $user_name
    );

    $count = $count + 1;
  }

  if ($result_launch) {
    // Allow other modules to handle instance data
    foreach ($result_launch as $new_instance_id) {
      $new_instance_ids[] = (string) $new_instance_id;
      cloud_action_notify('post_launch', array('cloud_context' => $cloud_context, 'instance_id' => $new_instance_id, 'template_id' => $template_id));
    }
    _aws_cloud_set_scripts_to_exec($new_instance_ids, $template_id, $cloud_context);
  }
  else {
    if (empty($redirect)) {
      if ( $count == 0) {
        drupal_set_message(check_plain(t('Failed to launch instance. Template not found: @template_id', array('@template_id' => $template_id) ) ), 'error' );
      }
      else {
        drupal_set_message(t('Failed to launch instance.'), 'error');
      }
    }
  }
  //Return array of newly launched instances.
  if (empty($redirect)) {
    return $result_launch;
  }
  else {
    return $new_instance_ids;
  }
}


