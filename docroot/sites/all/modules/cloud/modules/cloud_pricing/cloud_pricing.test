<?php

/**
 * @file
 * Test Cases for Pricing Module
 *
 * Copyright (c) 2010-2011 DOCOMO Innovations, Inc.
 * 
 */

/**
 * Created by yas   2011/02/03
 * Created by monoj 2010/12/03
 */

module_load_include('test', 'aws_cloud') ;

define('CLOUD_PRICING_REPEAT_COUNT', '3');

class PricingTestCase extends AwsCloudTestCase {

  public static function getInfo() {
    return array(
      'name'        => 'Pricing'          ,
      'description' => 'Pricing Test Case',
      'group'       => 'Cloud'            ,
    );
  }

  public function testPricing() {

    // Access to Pricing Menu
    $clouds = $this->getClouds();
    foreach ($clouds as $cloud) {
      $this->drupalGet('admin/settings/clouds/' . $cloud . '/pricing');
      $this->assertResponse(200, t('HTTP 200: Design Menu'));
  
      // List Pricing for Amazon EC2
      $this->drupalGet('admin/settings/clouds/' . $cloud . '/pricing');
      $this->assertResponse(200, t('HTTP 200: Design | Pricing'));
  
      $this->drupalPost('admin/settings/clouds/' . $cloud . '/pricing', '', t('Create'));
  
      // Input Fields
      $pricingDesc = array();
      
      // Create a new script
      for ($i = 0; $i < CLOUD_PRICING_REPEAT_COUNT; $i++) { // 3 times
  
        // Input Fields
        $pricingDesc[] = '#' . ($i + 1) . ': ' . date('D M j G:i:s T Y')
                                    . ' - SimpleTest Pricing Description';
        $id = $i+1;
        $add = array(
          //'pricing_id'             => $id             ,
          'instance_type_select'     => 't1.micro-' . $id ,
          'description_text'         => $pricingDesc[$i],
          'linux_or_unix_usage_text' => '0.2'           ,
          'windows_usage_text'       => '0.3'           , 
          //'cloud_context'          => 'amazon_ec2'    ,
        );
        
        $this->drupalPost('admin/settings/clouds/' . $cloud . '/pricing/create/', $add, t('Add'));
        $this->assertResponse(200, t('HTTP 200: New Pricing Form | Add'));
        $this->assertText(t('Pricing has been saved.'),
                          t('Confirm Message:') . t('Pricing has been saved.'));
        $this->assertText('t1.micro', t('Confirm Item:') . 't1.micro');
        $this->assertNoText(t('Notice' ), t('Make sure w/o Notice'  ));
        $this->assertNoText(t('warning'), t('Make sure w/o Warnings'));      
         
        //modify case
        $edit = array(
          'pricing_id'             => $id             ,
          'instance_type_select'         => 't1.microproc-' . $id ,
          'description_text'         => $pricingDesc[$i],
          'linux_or_unix_usage_text' => '0.2'           ,
          'windows_usage_text'       => '0.3'           , 
          //'cloud_context'          => 'amazon_ec2'    ,
        );
        $this->drupalPost('admin/settings/clouds/' . $cloud . '/pricing/1/edit', $edit, t('Edit'), array( 'query' => $edit , ));
        $this->assertResponse(200, t('HTTP 200: New Pricing Form | Edit'));
        $this->assertText(t('Pricing has been saved.'),
                          t('Confirm Message:') . t('Pricing has been saved.'));
        $this->assertNoText(t('Notice' ), t('Make sure w/o Notice'  ));
        $this->assertNoText(t('warning'), t('Make sure w/o Warnings'));                        
  
        $this->drupalGet('admin/settings/clouds/' . $cloud . '/pricing');
        $this->assertResponse(200, t('HTTP 200: Pricing'));
        $this->assertNoText(t('Notice' ), t('Make sure w/o Notice'  ));
        $this->assertNoText(t('warning'), t('Make sure w/o Warnings'));      
      }
     
      // Delete a Pricing Item
      $this->drupalGet('admin/settings/clouds/' . $cloud . '/pricing/1/delete/', array(
                      'id' => 1,
                  ));
      $this->assertResponse(200, t('HTTP 200: Pricing | Delete'   ));
      $this->assertNoText(t('Notice' ), t('Make sure w/o Notice'  ));
      $this->assertNoText(t('warning'), t('Make sure w/o Warnings'));
    //$this->assertText($scriptName, 'Deleted Item: ' . $scriptName);
      
      //filtering alert item
      $filter = array(
          'filter'    => 't1',
          'operation' => 0,
        );
        
      $this->drupalPost('admin/settings/clouds/' . $cloud . '/pricing', $filter, t('Apply'));
      $this->assertResponse(200, t('HTTP 200: Search Listings | Filter'));
      $pricing_id = CLOUD_PRICING_REPEAT_COUNT - 1 ;
      $this->assertText('t1', t('Confirm Item:') . 't1.micro');
      $this->assertNoText(t('Notice' ), t('Make sure w/o Notice'  ));
      $this->assertNoText(t('warning'), t('Make sure w/o Warnings'));
      ///////end
    }
  }
}
