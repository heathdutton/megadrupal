<?php

/**
 * @file
 * Provides pricing for hourly rate configuration for Billing module.
 * Works with Cloud and Billing module.
 *
 * Copyright (c) 2010-2011 DOCOMO Innovations, Inc.
 *
 */


module_load_include('inc', 'cloud'        , 'cloud_constants'        );
module_load_include('inc', 'cloud_pricing', 'cloud_pricing_constants');
module_load_include('inc', 'cloud_pricing'                           );
module_load_include('inc', 'cloud_pricing', 'cloud_pricing_db'       );


/**
 * Implements hook_help().
 */
function cloud_pricing_help($section) {

  switch ($section) {

    case 'admin/help#':
      $output = '<p>' . t('The cloud module creates a user interface for users to manage clouds. Users can Create Instances,  Describe Instances etc..') . '</p>';
      return $output;
    case 'admin/content/comment':
    case 'admin/content/comment/create':
      return '<p>' . t("Below is a list of the latest comments posted to your site. Click on a subject to see the comment,  the author's name to edit the author's user information ,  'edit' to modify the text,  and 'delete' to remove their submission.") . '</p>';
    case 'admin/content/comment/approval':
      return '<p>' . t("Below is a list of the comments posted to your site that need approval. To approve a comment,  click on 'edit' and then change its 'moderation status' to Approved. Click on a subject to see the comment,  the author's name to edit the author's user information,  'edit' to modify the text,  and 'delete' to remove their submission.") . '</p>';
    case 'admin/content/comment/settings':
      return '<p>' . t("Comments can be attached to any node,  and their settings are below. The display comes in two types: a 'flat list' where everything is flush to the left side,  and comments come in chronological order,  and a 'threaded list' where replies to other comments are placed immediately below and slightly indented,  forming an outline. They also come in two styles: 'expanded',  where you see both the title and the contents,  and 'collapsed' where you only see the title. Preview comment forces a user to look at their comment by clicking on a 'Preview' button before they can actually add the comment.") . '</p>';
  }
}

/**
 * Implements hook_menu().
 */
function cloud_pricing_menu() {
  $items = array();

  $items['admin/config/clouds/%/pricing'] = array(
    'title' => 'Pricing Info',
    'description' => 'Pricing Info',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cloud_pricing_list', 3),
    'access arguments' => array(3, 'administer cloud'),
    'access callback' => 'cloud_pricing_access',
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
    'file' => '',
  );

  $items['admin/config/clouds/%/pricing/create'] = array(
    'title' => 'Add/Edit Pricing',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cloud_pricing_new', '', 3),
    'access arguments' => array('create pricing'),
    'type' => MENU_CALLBACK,
    'file' => '',
  );

  $items['admin/config/clouds/%/pricing/%/edit'] = array(
    'title' => 'Add/Edit Pricing',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cloud_pricing_new', 5, 3),
    'access arguments' => array('create pricing'),
    'type' => MENU_CALLBACK,
    'file' => '',
  );

  $items['admin/config/clouds/%/pricing/%/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'cloud_pricing_delete',
    'page arguments' => array(5, 3),
    'access arguments' => array('list pricing'),
    'type' => MENU_CALLBACK,
    'file' => '',
  );

  $items['admin/config/pricing/getdata'] = array(
    'title' => 'pricing Get data',
    'page callback' => '_cloud_pricing_getdata',
    'page arguments' => array('Pricing'),
    'access arguments' => array('list pricing'),
    'type' => MENU_CALLBACK,
    'file' => '',
  );

  return $items;
}


/**
 * Permission callback function to concatenate the
 * access type based on clouds
 */
function cloud_pricing_access($cloud_context, $access) {
  $access = user_access($cloud_context . ' ' . $access);
  return $access;
}

/**
 * Helper function that gets pricing data 
 */
function _cloud_pricing_pricing() {

  return drupal_get_form('cloud_pricing_fetch_data');
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function cloud_pricing_fetch_data($form) {

  $access = user_access('administer cloud');
  if ( !$access ) {
    return;
  }

  $form['options']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Get Data'),
  );
  return $form;
}

function _cloud_pricing_getdata($src = '') {

  setPricingVars();
  if ( $src == NULL || empty($src) ) {
    drupal_goto( CLOUD_PRICING_PATH . '/list' );
  }
  else {
    drupal_goto( $src );
  }
}


/**
 * Implements hook_permission().
 */
function cloud_pricing_permission() {

  return array(
    'create pricing' => array(
      'title' => t('create pricing'),
      'description' => t('Permission to create pricing'),
    ),
    'list pricing' => array(
      'title' => t('list pricing'),
      'description' => t('Permission to view pricing'),
    ),
    'edit pricing' => array(
      'title' => t('edit pricing'),
      'description' => t('Permission to edit pricing'),
    ),
    'delete pricing' => array(
      'title' => t('delete pricing'),
      'description' => t('Permission to delete pricing'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function cloud_pricing_theme() {
  return array(
    'cloud_pricing_list' => array(
      'render element' => 'form',
      'file' => 'cloud_pricing.inc',
    ),
    'cloud_pricing_view' => array(
      'render element' => 'form',
      'file' => 'cloud_pricing.inc',
    ),
    'cloud_pricing_new' => array(
      'render element' => 'form',
      'file' => 'cloud_pricing.inc',
    ),
  );
}

/**
 * Get pricing form 
 */
function _cloud_admin_settings_pricing($module, $cloud_context ) {
  return drupal_get_form('cloud_pricing_list');
}

/**
 * Implements hook_cloud_save().
 * Store any cloud_pricing data
 */
function cloud_pricing_cloud_save($op, $cloud) {
  if ($op == 'create') {
    if (isset($cloud->cloud_pricing_data)) {
      $pricing_data = &$cloud->cloud_pricing_data;
      $cloud_type = $cloud->cloud_name;
      foreach ($pricing_data as $key => $data) {
        $data_values = array(
          'instance_type_select' => $data['instance_type'     ]  ,
          'description_text' => isset($data['description'       ] ) ? $data['description'] : '',
          'linux_or_unix_usage_text' => $data['linux_or_unix_cost']  ,
          'windows_usage_text' => $data['windows_cost'      ]  ,
          'cloud_context' => $cloud_type  ,
        );
        // Insert the data in the Pricing table
        _cloud_pricing_insert($data_values);
      }
    }
  }
}

/**
 * Implements hook_cloud_delete().
 * Delete the pricing data upon cloud delete
 */
function cloud_pricing_cloud_delete($cloud_name) {
  cloud_pricing_delete_data($cloud_name);
}

