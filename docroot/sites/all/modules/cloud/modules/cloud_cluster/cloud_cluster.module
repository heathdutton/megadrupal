<?php


/**
 * @file
 * Provides cluster feature which enables to bundle server templates.
 * Works with Cloud and Server Templates module.
 *
 * Copyright (c) 2010-2011 DOCOMO Innovations, Inc.
 *
 */


/**
 *
 * @file Enables users to access clusters.
 */
module_load_include('inc', 'cloud'        , 'cloud_constants'        );
module_load_include('inc', 'cloud_cluster', 'cloud_cluster_constants');
module_load_include('inc', 'cloud_cluster'                           );
module_load_include('inc', 'cloud_cluster', 'cloud_cluster_db'       );
module_load_include('inc', 'cloud_cluster', 'cloud_cluster_server_db');



/**
 * Implementation of hook_help().
 */
function cloud_cluster_help($section) {
  switch ($section) {
    case 'admin/help#cluster':
      $output = '<p>' . t('A cluster consists of a group of servers that work together.') . '</p>';
      return $output;
  }
}


/**
 * Implementation of hook_menu().
 */
function cloud_cluster_menu() {

  $items = array();

  $items[CLOUD_CLUSTER_PATH] = array(
    'title' => CLOUD_CLUSTER_DISPLAY_NAME,
    'description' => CLOUD_CLUSTER_DISPLAY_NAME,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cloud_cluster_display_list'),
    'weight' => 10,
    'access arguments' => array('list clusters'),
    'file' => '',
  );


  $items[CLOUD_CLUSTER_PATH . '/get_data/%'] = array(
    'title' => 'Get data',
    'page callback' => '_cloud_cluster_get_data',
    'page arguments' => array(3),
    'access arguments' => array('list clusters'),
    'file' => '',
    'type' => MENU_CALLBACK,
  );


  $items[CLOUD_CLUSTER_PATH . '/callback_get_cluster_servers_list'] = array(
    'page callback' => '_cloud_cluster_callback_get_cluster_servers_list',
    'type' => MENU_CALLBACK,
    'access arguments' => array('list clusters'),
  );

  $items[CLOUD_CLUSTER_PATH . '/describe'] = array(
    'page callback' => '_cloud_cluster_describe',
    'access arguments' => array('list clusters'),
    'file' => '',
    'type' => MENU_CALLBACK,
  );


  $items[CLOUD_CLUSTER_PATH . '/create'] = array(
    'title' => 'New Cluster',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cloud_cluster_create_new_cluster'),
    'access arguments' => array('create cluster'),
    'file' => '',
    'type' => MENU_CALLBACK,
  );

  $items[CLOUD_CLUSTER_PATH . '/delete/%'] = array(
    'title' => 'Delete Cluster',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_cloud_cluster_delete_cluster', 3),
    'access arguments' => array('delete cluster'),
    'file' => '',
    'type' => MENU_CALLBACK,
  );

  $items[CLOUD_CLUSTER_PATH . '/describe/info/%'] = array(
    'title' => 'Info',
    'description' => 'Cluster Details',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cloud_cluster_display_detail_info', 4),
    'access arguments' => array('list clusters'),
    'file' => '',
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
  );


  $items[CLOUD_CLUSTER_PATH . '/describe/cluster_templates/%'] = array(
    'title' => 'Design',
    'description' => 'Cluster Design by adding Templates',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cloud_cluster_display_templates_list', 4),
    'access arguments' => array('list clusters'),
    'file' => '',
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
  );


  $items[CLOUD_CLUSTER_PATH . '/describe/servers/%'] = array(
    'title' => 'Instances',
    'description' => 'Instances',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cloud_cluster_display_server_list', 4),
    'access arguments' => array('list clusters'),
    'file' => '',
    'weight' => 3,
    'type' => MENU_LOCAL_TASK,
  );


  $items[CLOUD_CLUSTER_PATH . '/describe/servers/add_server'] = array(
    'title' => 'Add Server to Cluster',
    'description' => 'Add Server to Cluster',
    'access arguments' => array('update cluster'),
    'file' => '',
    'type' => MENU_CALLBACK,
  );

  //$enabled_cloud_list = cloud_get_clouds() ;
  $cloud_list = cloud_get_all_clouds();
  $row_counter = 0;
  $cloud_name_list = cloud_get_all_clouds_display_name();

  foreach ($cloud_list as $cloud_context) {
    //$cloud_name         = $enabled_cloud_list[$row_counter]["cloud_name"] ;
    //$cloud_display_name = $enabled_cloud_list[$row_counter]["cloud_display_name"] ;

    $items[CLOUD_CLUSTER_PATH . '/describe/servers/add_server/' . $cloud_context . '/%'] = array(
      'title' => $cloud_name_list[$cloud_context],
      'description' => $cloud_name_list[$cloud_context],
      'page callback' => '_cloud_cluster_add_server',
      'page arguments' => array($cloud_context, 6),
      'access arguments' => array('update cluster'),
      'file' => '',
      'weight' => $row_counter,
      'type' => MENU_LOCAL_TASK,
    );
    $row_counter++;
  }


  $items[CLOUD_CLUSTER_PATH . '/describe/servers/delete_server/%/%'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_cloud_cluster_delete_server'  , 5, 6),
    'access arguments' => array('update cluster'),
    'file' => '',
    'type' => MENU_CALLBACK,
  );

  $items[CLOUD_CLUSTER_PATH . '/describe/servers/launch_server/%/%'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_cloud_cluster_launch_server'  , 5, 6),
    'access arguments' => array('update cluster'),
    'file' => '',
    'type' => MENU_CALLBACK,
  );

  $items[CLOUD_CLUSTER_PATH . '/describe/servers/start_all_servers/%'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_cloud_cluster_launch_server_all', 5),
    'access arguments' => array('update cluster'),
    'file' => '',
    'type' => MENU_CALLBACK,
  );


  return $items;
}

function cloud_cluster_theme() {

  return array(
    'cloud_cluster_display_list' => array(
      'render element' => 'form',
      'file' => 'cloud_cluster.inc',
    ),
    'cloud_cluster_create_new_cluster' => array(
      'render element' => 'form',
      'file' => 'cloud_cluster.inc',
    ),
    'cloud_cluster_display_detail_info' => array(
      'render element' => 'form',
      'file' => 'cloud_cluster.inc',
    ),
    'cloud_cluster_display_server_list' => array(
      'render element' => 'form',
      'file' => 'cloud_cluster.inc',
    ),
    'cloud_cluster_display_templates_list' => array(
      'render element' => 'form',
      'file' => 'cloud_cluster.inc',
    ),
  );
}

/**
 * Implementation of hook_permission().
 */
function cloud_cluster_permission() {

  return array(
    'create cluster' => array(
      'title' => t('create cluster'  ),
      'description' => t('TODO Add a description for \'create cluster\''),
    ),
    'list clusters' => array(
      'title' => t('list clusters'),
      'description' => t('TODO Add a description for \'list clusters\''),
    ),
    'update cluster' => array(
      'title' => t('update cluster'),
      'description' => t('TODO Add a description for \'update cluster\''),
    ),
    'delete cluster' => array(
      'title' => t('delete cluster'),
      'description' => t('TODO Add a description for \'delete cluster\''),
    ),
  );
}


/*
 * This will be called when the respective Cloud submits the Cluster form
 * e.g. When Amazon EC2 Cluster form submit's the following function will be called to save the Cluster
 */
function cloud_cluster_add_server_submit($form_id, $form_values) {

  $cluster_id = $form_values['cluster_id']  ;

  if ( $form_values['op'] == t('List Servers') ) {

    drupal_goto( CLOUD_CLUSTER_PATH . '/describe/cluster_templates/' . $cluster_id );

    return;
  }
  elseif ($form_values['op'] == t('Save')) {
    _cloud_cluster_save_cluster_server_db($form_values);
    drupal_set_message(t('Server @server_name added to Cluster.', array('@server_name' => $form_values['nickname_text']) ));
    drupal_goto( CLOUD_CLUSTER_PATH . '/describe/cluster_templates/' . $cluster_id  );
  }
  elseif ($form_values['op'] == t('Add More')) {

    _cloud_cluster_save_cluster_server_db($form_values);
    drupal_set_message(t('Server @server_name added to Cluster.', array('@server_name' => $form_values['nickname_text'])  ));

    return;
  }

  return;
}


