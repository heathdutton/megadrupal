<?php

/**
 * @file
 * Alerts module test cases
 *
 * Copyright (c) 2010-2011 DOCOMO Innovations, Inc.
 *
 */

/**
 * Updated by yas   2011/02/03
 * Updated by manoj 2010/12/14
 * Updated by manoj 2010/12/03
 * Created by manoj 2010/12/02
 */


module_load_include('test', 'amazon_ec2') ;

define('CLOUD_ALERTS_REPEAT_COUNT', '3' );

class AlertsTestCase extends CloudTestCase {

  public static function getInfo() {
    return array(
      'name'        => 'Alerts'          ,
      'description' => 'Alerts Test Case',
      'group'       => 'Cloud'           ,
    );
  }

  public function testAlerts() {

 // AmazonEC2TestCase::refreshPage()     ;
 // AmazonEC2TestCase::refreshPageImage();

    // Access to Alerts Menu
    $this->drupalGet('design/alerts');
    $this->assertResponse(200, t('HTTP 200: Design Menu'        ));
    $this->assertNoText(t('Notice' ), t('Make sure w/o Notice'  ));
    $this->assertNoText(t('warning'), t('Make sure w/o Warnings'));
        
    // List Alerts for Amazon EC2
    $this->drupalGet('design/alerts/list');
    $this->assertResponse(200, t('HTTP 200: Design | Alerts'    ));
    $this->assertNoText(t('Notice' ), t('Make sure w/o Notice'  ));
    $this->assertNoText(t('warning'), t('Make sure w/o Warnings')); 

    $this->drupalPost('design/alerts/list', '', t('Create'));

    // Input Fields
    $alertName = array();
    $alertDesc = array();
    
    // Create a new alert
    for ($i = 0; $i < CLOUD_ALERTS_REPEAT_COUNT; $i++) { // 3 times

      // Input Fields
      $alertName[] = '#' . ($i + 1) . ': ' . date('D M j G:i:s T Y')
                                    . ' - SimpleTest Alerts Name'        ;
      $alertDesc[] = '#' . ($i + 1) . ': ' . date('D M j G:i:s T Y')
                                    . ' - SimpleTest Alerts Description' ;
      $id = $i+1;
      $add = array(
        'name_text'        => $alertName[$i],
        'description_text' => $alertDesc[$i],
        'metric_select'    => 'memory'      ,
        'variable_select'  => 'count'       , 
        'threshold_text'   => '5'           ,
        'duration_in_minutes_select' => '10',
      );
      
      $this->drupalPost('design/alerts/create', $add, t('Add'));
      $this->assertResponse(200, t('HTTP 200: New Alert Form | Add'));
      $this->assertText(t('Alert has been saved.'),
                        t('Confirm Message:') . t('Alert has been saved.'));
      $this->assertText($alertName[$i], t('Confirm Item:') . $alertName[$i]);
      $this->assertText($alertDesc[$i], t('Confirm Item:') . $alertDesc[$i]);
      $this->assertNoText(t('Notice' ), t('Make sure w/o Notice'  ));
      $this->assertNoText(t('warning'), t('Make sure w/o Warnings'));      

      $this->drupalGet('design/alerts/list');
      $this->assertResponse(200, t('HTTP 200: Design | Alerts'));
      $this->assertNoText(t('Notice' ), t('Make sure w/o Notice'  ));
      $this->assertNoText(t('warning'), t('Make sure w/o Warnings'));      

      /// modify case
      $edit = array(
        'alert_id'               => $id,
        'name_text'        => $alertName[$i],
        'description_text' => $alertDesc[$i],
        'metric_select'    => 'memory'      ,
        'variable_select'  => 'count'       , 
        'threshold_text'   => '5'           ,
        'duration_in_minutes_select' => '10',
      );
      
      $this->drupalPost('design/alerts/' . $id . '/edit', $edit, t('Edit'), array( 'query' => $edit , ));
      $this->assertResponse(200, t('HTTP 200: New Alert Form | Edit'));
      $this->assertText(t('Alert has been saved.'),
                        t('Confirm Message:') . t('Alert has been saved.'));
      $this->assertText($alertName[$i], t('Confirm Item:') . $alertName[$i] . '_modified');
      $this->assertText($alertDesc[$i], t('Confirm Item:') . $alertDesc[$i]);
      $this->assertNoText(t('Notice' ), t('Make sure w/o Notice'  ));
      $this->assertNoText(t('warning'), t('Make sure w/o Warnings'));
      
      $this->drupalGet('design/alerts/list');
      $this->assertResponse(200, t('HTTP 200: Design | Alerts'));
      $this->assertNoText(t('Notice' ), t('Make sure w/o Notice'  ));
      $this->assertNoText(t('warning'), t('Make sure w/o Warnings'));
    }
   
    // Delete a Alerts Item
    $this->drupalGet('design/alerts/1/delete', array(
                     'id' => 1,
                    ));
    $this->assertResponse(200, t('HTTP 200: Design | Alerts | Delete'));
    $this->assertNoText(t('Notice' ), t('Make sure w/o Notice'  ));
    $this->assertNoText(t('warning'), t('Make sure w/o Warnings'));
  //$this->assertText($alertName, 'Deleted Item: ' . $alertName);
    
    //filtering alert item
    $filter = array(
        'filter'    => 'Test',
        'operation' => 0,
      );
      
    $this->drupalPost('design/alerts', $filter, t('Apply'));
    $this->assertResponse(200, t('HTTP 200: Search Listings | Filter'));
    $alert_id = CLOUD_ALERTS_REPEAT_COUNT - 1 ;
    $this->assertText($alertName[$alert_id], t('Confirm Item:') . $alertName[$alert_id ]);
    $this->assertNoText(t('Notice' ), t('Make sure w/o Notice'  ));
    $this->assertNoText(t('warning'), t('Make sure w/o Warnings'));
    ///////end
  }
}
