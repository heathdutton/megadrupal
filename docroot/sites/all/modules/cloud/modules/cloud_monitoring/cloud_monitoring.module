<?php



/**
 * @file
 * This module provides monitoring capabilities
 */

module_load_include('inc', 'cloud_monitoring', 'cloud_monitoring_db');

require_once('plugins/cloud_monitoring_system.inc');

/**
 * Implementation of hook_menu()
 */
function cloud_monitoring_menu() {
  $items = array();
  $items['design/cloud_monitoring'] = array(
    'title' => 'Monitoring Systems',
    'description' => 'Create/Update/Delete Monitoring Systems',
    'page callback' => 'cloud_monitoring_list',
    'access arguments' => array('list cloud monitors'),
    'file' => 'cloud_monitoring_ui.inc',
  );
  $items['design/cloud_monitoring/%'] = array(
    'title' => 'Monitor Details',
    'description' => 'Edit an existing monitoring system',
    'page callback' => 'cloud_monitoring_details',
    'page arguments' => array(2),
    'access arguments' => array('list cloud monitors'),
    'file' => 'cloud_monitoring_ui.inc',
    'type' => MENU_CALLBACK,
  );
  $items['design/cloud_monitoring/add'] = array(
    'title' => 'Register Monitor',
    'description' => 'Register a monitoring system',
    'page callback' => 'cloud_monitoring_add',
    'access arguments' => array('add cloud monitors'),
    'file' => 'cloud_monitoring_ui.inc',
    'type' => MENU_CALLBACK,
  );
  $items['design/cloud_monitoring/launch'] = array(
    'title' => 'Launch New Monitor',
    'description' => 'Launch a new monitoring system',
    'page callback' => 'cloud_monitoring_launch',
    'access arguments' => array('add cloud monitors'),
    'file' => 'cloud_monitoring_ui.inc',
    'type' => MENU_CALLBACK,
  );
  $items['design/cloud_monitoring/%/details'] = array(
    'title' => 'Monitor Details',
    'description' => 'View details of a monitoring system',
    'page callback' => 'cloud_monitoring_details',
    'page arguments' => array(2),
    'access arguments' => array('list cloud monitors'),
    'file' => 'cloud_monitoring_ui.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['design/cloud_monitoring/%/delete'] = array(
    'title' => 'Delete Monitor',
    'page callback' => 'cloud_monitor_confirm_delete',
    'page arguments' => array(2),
    'access arguments' => array('delete cloud_monitors'),
    'type' => MENU_CALLBACK,
    'file' => 'cloud_monitoring_ui.inc',
  );
  $items['cloud_monitoring/instance_autocomplete'] = array(
    'title' => 'instance search',
    'page callback' => 'cloud_monitoring_instance_autocomplete',
    'access arguments' => array('add cloud monitors'),
    'type' => MENU_CALLBACK,
    'file' => 'cloud_monitoring_ui.inc',
  );
  $items['design/cloud_monitoring/%/dashboard'] = array(
    'title' => 'Monitoring Dashboard',
    'page callback' => 'cloud_monitoring_dashboard',
    'page arguments' => array(2),
    'access arguments' => array('list cloud monitors'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'cloud_monitoring_ui.inc',
  );
  $items['design/cloud_monitoring/%/stop/%/%'] = array(
    'title' => 'Stop Monitoring',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cloud_monitoring_confirm_monitoring_stop', 2, 4, 5),
    'access arguments' => array('edit cloud monitors'),
    'type' => MENU_CALLBACK,
    'file' => 'cloud_monitoring_ui.inc',
  );
  $items['design/cloud_monitoring/%/start/%/%'] = array(
    'title' => 'Start Monitoring',
    'page callback' => 'cloud_monitoring_instance_start',
    'page arguments' => array(2, 4, 5),
    'access arguments' => array('edit cloud monitors'),
    'type' => MENU_CALLBACK,
    'file' => 'cloud_monitoring_ui.inc',
  );
  $items['design/cloud_monitoring/%/delete/%/%'] = array(
    'title' => 'Delete Monitoring',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cloud_monitoring_instance_confirm_delete', 2, 4, 5),
    'access arguments' => array('edit cloud monitors'),
    'type' => MENU_CALLBACK,
    'file' => 'cloud_monitoring_ui.inc',
  );
  //add detailed view support - For Amazon based clouds
  $clouds = aws_cloud_get_all_clouds();
  foreach ($clouds as $cloud) {
    $cloud_menu_path = cloud_get_menu_path($cloud->cloud_name);
    $items[$cloud_menu_path . '/instances/describe/%/monitor'] = array(
      'title' => 'Monitor',
      'description' => 'Monitor',
      'page callback' => 'cloud_monitoring_instance_details',
      'page arguments' => array(1, 4),
      'access arguments' => array('list cloud monitors'),
      'file' => 'cloud_monitoring_ui.inc',
      'weight' => 5,
      'type' => MENU_LOCAL_TASK,
    );
    $items[$cloud_menu_path . '/instances/describe/%/graph-details'] = array(
      'title' => 'Graph Details',
      'description' => 'Large graphical and data view',
      'page callback' => 'cloud_monitoring_instance_graph_details',
      'page arguments' => array(4),
      'access arguments' => array('list cloud monitors'),
      'file' => 'cloud_monitoring_ui.inc',
      'type' => MENU_CALLBACK,
    );
  }

  return $items;
}

/**
 * Implementation of hook_permission()
 */
function cloud_monitoring_permission() {
  
  return array(
    'list cloud monitors' => array(
      'title' => t('list cloud monitors'),
      'description' => t('List cloud monitors'),
    ),
    'add cloud monitors' => array(
      'title' => t('add cloud monitors'),
      'description' => t('Add cloud monitors'),
    ),
    'edit cloud monitors' => array(
      'title' => t('edit cloud monitors'),
      'description' => t('Edit cloud monitors'),
    ),
    'delete cloud monitors' => array(
      'title' => t('delete cloud monitors'),
      'description' => t('Delete cloud monitors'),
    ),
  );
}

/**
 * Implementation of hook_theme()
 */
function cloud_monitoring_theme() {
  return array(
    'cloud_monitoring_dashboard' => array(
      'arguments' => array(
        'class' => NULL,
        'host' => NULL,
        'seconds' => NULL,
      ),
      'file' => 'cloud_monitoring_ui.inc',
    ),
    'cloud_monitoring_graph' => array(
      'arguments' => array(
        'class' => NULL,
        'host' => NULL,
        'seconds' => NULL,
        'params' => NULL,
      ),
      'file' => 'cloud_monitoring_ui.inc',
    ),
    'cloud_monitoring_graph_intervals' => array(
      'arguments' => array(
        'host' => NULL,
        'params' => NULL,
      ),
      'file' => 'cloud_monitoring_ui.inc',
    ),
    'cloud_monitoring_data_table' => array(
      'arguments' => array(
        'class' => NULL,
        'host' => NULL,
        'seconds' => NULL,
        'params' => NULL,
      ),
    ),
    'cloud_monitoring_data_link' => array(
      'arguments' => array(
        'class' => NULL,
        'host' => NULL,
        'seconds' => NULL,
        'params' => NULL,
      ),
    ),
  );
}

/**
 * Return an array of all monitoring implementations
 * defined by this module and contributed modules. The
 * array is cached in a cache table for easier access.
 * When a new monitor is added, clear cache and the new
 * monitor will be added
 */
function cloud_monitoring_get_monitor_definitions($key = NULL) {
  $monitors = array();
  $cached = cache_get('cloud_monitors');
  if ($cached == FALSE) {
    //load all available monitors via hook_cloud_monitor
    $monitors = module_invoke_all('cloud_monitor');
    cache_set('cloud_monitors', $monitors);
  }
  else {
    $monitors = $cached->data;
  }
  //if $key is passed, return an individual monitor
  //otherwise, return it all
  if (isset($key) && isset($monitors[$key])) {
    return $monitors[$key];
  }
  else {
    return $monitors;
  }
}

/**
 * Implementation of hook_cloud_monitor()
 */
function cloud_monitoring_cloud_monitor() {
  $monitors = array();
  $monitors['collectd'] = array(
    'display_name' => t('Collectd For Amazon/OpenStack/Eucalyptus'),
    'path' => drupal_get_path('module', 'cloud_monitoring') . '/plugins',
    'file' => 'cloud_monitoring_collectd.inc',
    'class' => 'collectd_monitor',
  );
  return $monitors;
}

/**
 * Implementation of hook_cloud_server_system_templates()
 */
function cloud_monitoring_cloud_server_system_templates() {
  $templates = array();
  //This template is specific to Ubuntu
  $templates['Collectd Template'] = array(
    'template_nickname' => 'Collectd Monitoring Template Ubuntu Lucid 10.04 i386',
    'description' => t('Default Template for starting a monitoring server'),
    'image_id' => '',
    'image_nickname' => 'ubuntu-lucid-10.04-i386-server-20110719',
    'instance_type' => 'c1.medium',
    'cloud_type' => '',
    'image_id' => '',
    'user_data' => '',
    'count_instances' => 1,
    'user_name' => 'ubuntu',
    'key_name' => '',
    'ramdisk_id' => '',
    'group_id' => 'default',
    'zone_select' => 'any',
    'scripts' => array(
      'install_collectd' => array(
        'id' => '',
        'name' => 'Install Collectd on Ubuntu Script',
        'description' => 'Install Collectd, RRD Rest Drupal Module',
        'type' => 'boot',
        'inputs' => 'EMAIL_ADDRESS',
        'script_template' => _cloud_monitoring_collectd_system_script(),
      ),
    ),
  );
  return $templates;
}

function _cloud_monitoring_collectd_instance_start() {
  $script = <<<EOF
#/bin/bash
sudo /etc/init.d/collectd start
exit

EOF;

  return $script;
}


function _cloud_monitoring_collectd_instance_stop() {
  $script = <<<EOF
#/bin/bash
sudo /etc/init.d/collectd stop
exit

EOF;
  return $script;
}

function _cloud_monitoring_collectd_instance_delete() {
  $script = <<<EOF
#/bin/bash
sudo apt-get autoremove -yqq collectd
sudo apt-get purge -yqq collectd
rm /tmp/.clanavi.install
exit

EOF;
  return $script;
}

/**
 * Define instance install script
 */
function _cloud_monitoring_collectd_instance_script() {
  $script = <<<EOF
#/bin/bash

#Gather information
MONITOR_ID='MONITOR_IP'

COLLECTD='/usr/sbin/collectd'
COLLECTD_CONF='/etc/collectd/collectd.conf'
TMP_FILE='/tmp/collectd.conf.tmp'
COLLECTD_BACKUP='/tmp/collect.conf.back'
COLLECTD_SCRIPT='/etc/init.d/collectd'
INSTALL_FLAG='/tmp/.clanavi.install'

install_collectd() {
  sudo apt-get -yqq install collectd
  if [ -f \$COLLECTD_CONF ]
  then
    #run these in the background
    (
    cp \$COLLECTD_CONF  \$COLLECTD_BACKUP
    sed -e "s/#LoadPlugin network/LoadPlugin network/g" \
        -e "s/Include \"\/etc\/collectd\/filters.conf\"/\<Plugin network\>\\n  Server \$MONITOR_ID\\n\<\/Plugin\>\\nInclude \"\/etc\/collectd\/filters.conf\"/g" \$COLLECTD_CONF > \$TMP_FILE;
    sudo cp \$TMP_FILE \$COLLECTD_CONF
    sudo \$COLLECTD_SCRIPT restart
    )
  fi
}

write_flag() {
  touch \$INSTALL_FLAG
}

if [ ! -x \$COLLECTD -a ! -e \$INSTALL_FLAG ]
then
  install_collectd
  write_flag
fi

exit 0
EOF;
  return $script;
}

/**
 * Defined system script
 */
function _cloud_monitoring_collectd_system_script() {
  $script = <<<EOF
#/bin/bash

#This script will install Collectd, RRDTool, Drupal, Apache
#PHP and the RRD_Rest module

#Gather information first
EMAIL='EMAIL_ADDRESS'

MAIL='/usr/bin/mail'

IP_ADDRESS=`ifconfig  | grep 'inet addr:'| grep -v '127.0.0.1' | cut -d: -f2 | awk '{ print $1}'`
COLLECTD='/usr/sbin/collectd'
COLLECTD_CONF='/etc/collectd/collectd.conf'
TMP_FILE='/tmp/collectd.conf.tmp'
COLLECTD_BACKUP='/tmp/collect.conf.back'
COLLECTD_SCRIPT='/etc/init.d/collectd'

WGET_TAR='/tmp/drush-7.x-4.5.tar.gz'
DRUSH_URL='http://drupal.org/files/projects/drush-7.x-4.5.tar.gz'
DRUSH='sudo /usr/local/drush/drush'
TEMP_DRUPAL_LOCATION='/tmp/collectd_drupal'
WWW_DATA='/var/www'
SQLITE_DB="$WWW_DATA/sites/default/files/.ht.sqlite"

INSTALL_FLAG='/tmp/.clanavi.install'

LOGFILE='/tmp/collectd_install.log'
DASHES="-----------------"


startlogging() {
  echo \$DASHES >> \$LOGFILE
  echo "Install script started running at `date`" >> \$LOGFILE
  echo \$DASHES >> \$LOGFILE
}

stoplogging() {
  echo "`date` [MESSAGE] $0 finished running" >> \$LOGFILE
  echo \$DASHES >> \$LOGFILE
}

check_return() {
  if [ "$?" -ne "0" ]
  then
    echo "`date` [ERROR] $1 failed to run" >> \$LOGFILE
    send_failure $1
    stoplogging
    exit 1
  fi
}

log() {
  echo "`date` $1" >> \$LOGFILE
}

update_system() {
  sudo apt-get clean > /dev/null
  check_return "apt-get clean"
  sudo apt-get -yq update > /dev/null
  check_return "apt-get -yq update"
  log "Updated System before any installation."
}

install_collectd() {
  sudo apt-get -yq install collectd
  check_return "sudo apt-get -yq install collectd"

  if [ -f \$COLLECTD_CONF ]
  then
    cp \$COLLECTD_CONF  \$COLLECTD_BACKUP
    sed -e "s/#LoadPlugin network/LoadPlugin network/g" \\
        -e "s/Include \"\/etc\/collectd\/filters.conf\"/\<Plugin network\>\\n  Listen \$IP_ADDRESS\\n\<\/Plugin\>\\nInclude \"\/etc\/collectd\/filters.conf\"/g" \$COLLECTD_CONF > \$TMP_FILE;
    sudo cp \$TMP_FILE \$COLLECTD_CONF
    check_return "sudo cp \$TMP \$COLLECTD_CONF"
    sudo \$COLLECTD_SCRIPT restart
    check_return "sudo \$COLLECTD_SCRIPT restart"
    log "Enabled network plugin and restarted collectd."
  fi

}

install_common() {
  sudo apt-get -yq install sendmail
  check_return "sudo apt-get -yq install sendmail"
  sudo apt-get -yq install git-core
  check_return "sudo apt-get -yq install git-core"
  sudo apt-get -yq install mailutils
  log "Finished installing common packages"
}

install_apache() {
  sudo apt-get -yq install apache2
  check_return "sudo apt-get -yp install apache2"
  log "Finish installing Apache"
}

install_php() {
  sudo apt-get -yq install php5 php5-cli php5-gd php5-sqlite
  check_return "sudo apt-get -yp install php5 php5-cli php5-gd php5-sqlite"
  log "Finish installing PHP"
}

install_drupal() {
  wget \$DRUSH_URL -O \$WGET_TAR
  log "Downloading DRUSH"
  sudo tar -zxvf \$WGET_TAR -C /usr/local
  \$DRUSH  dl drupal --destination=/tmp --drupal-project-rename=collectd_drupal
  check_return "\$DRUSH  dl drupal --destination=/tmp --drupal-project-rename=collectd_drupal"

  sudo cp -rfa \$TEMP_DRUPAL_LOCATION/. /var/www/

  if [ -e \$WWW_DATA/index.html ]
  then
    sudo rm \$WWW_DATA/index.html
  fi

  sudo chown -R www-data:www-data \$WWW_DATA

  #cleanup tmp install drupal
  sudo rm -rf \$TEMP_DRUPAL_LOCATION
  sudo rm -rf \$WGET_TAR

  cd \$WWW_DATA
  sudo chown -R www-data:www-data \$WWW_DATA
  sudo mkdir -p \$WWW_DATA/sites/default/files
  sudo chmod 777 \$WWW_DATA/sites/default/files

  \$DRUSH  -y site-install --db-url=sqlite:\$SQLITE_DB --clean-url=0
  check_return "\$DRUSH  -y site-install --db-url=sqlite:\$SQLITE_DB --clean-url=0"

  sudo chown -R www-data:www-data \$SQLITE_DB
  sudo chown -R www-data:www-data /var/www
  cd \$WWW_DATA/sites/all/modules

  #download rrd_rest module
  \$DRUSH dl -y rrd_rest

  \$DRUSH en -y rrd_rest
  check_return "\$DRUSH en -y rrd_rest"

  #restart apache one last time
  sudo /etc/init.d/apache2 restart
  log "Finish installing Drush and Drupal"
}

write_flag() {
  touch \$INSTALL_FLAG
}

send_failure() {
  MSG=$(cat<<HEREDOC
  The failure happened at $1
  The Collectd install script has failed.  Please review the logfile at \$LOGFILE
HEREDOC
)
  echo \$MSG | \$MAIL  -s "Collectd Install Failed" "\$EMAIL"
}

send_success() {
  MSG=$(cat<<HEREDOC
  The Collectd server is now configured.  The script installed collectd, rrdtool and Drupal 7.
  The Drupal module RRD_Rest has been installed to communicate with the RRDTool.

  Please login to the Drupal server and change the username and password!  They have been
  installed default as user:admin password:admin.

HEREDOC
)
  echo \$MSG | \$MAIL -s "Collectd Installed" "\$EMAIL"
}

startlogging

if [ ! -x \$COLLECTD -a ! -e \$INSTALL_FLAG ]
then
  update_system
  install_common
  install_collectd
  install_apache
  install_php
  install_drupal
  write_flag
  send_success
else
  log "Collectd script has run already"
fi

stoplogging
exit 0

EOF;
  return $script;
}

/**
 * Implementation of hook_cloud_server_template_delete()
 */
function cloud_monitoring_cloud_server_template_delete($template_id, $cloud_context) {
  cloud_monitoring_delete_lookup_record($template_id);
}

/**
 * Implementation of hook_aws_ec2_terminate_instance()
 */
function cloud_monitoring_aws_cloud_terminate_instance($cloud_context, $instance_id) {
  //delete the instance_id from the cloud_monitor table
  $monitor_id = cloud_monitoring_monitor_by_instance_id($instance_id);
  cloud_monitoring_delete_monitor($monitor_id);
}

/**
 * Get the monitor class and instantiate it.
 * In the future, look at using ctools for all
 * plugin definitions.
 */
function cloud_monitoring_get_class($monitor_id) {
  if ($monitor_id) {
    $monitor = cloud_monitoring_load_monitor($monitor_id);
    $definition = cloud_monitoring_get_monitor_definitions($monitor['monitor_type']);

    //make sure the path and file are declared
    if (isset($definition['path']) && isset($definition['file'])) {
      require_once './' . $definition['path'] . '/' . $definition['file'];
    }
    if (!isset($definition['class'])) {
      return FALSE;
    }

    $class = $definition['class'];
    //instaniate the class and return
    if (class_exists($class)) {
      return new $class($monitor_id);
    }
  }
  else {
    drupal_set_message(t('Unable to load the monitoring class.'), 'error');
  }
  return FALSE;
}

/**
 * This function can be called to decide which os is supported by the
 * install scripts
 */
function cloud_monitoring_get_installable($instance_id, $cloud_type) {
  $installable = FALSE;
  $os_list = module_invoke_all('cloud_monitor_installable');
  $instance = _aws_cloud_get_instance_details_by_id($cloud_type, $instance_id);
  if (count($instance)) {
    $image_nickname = $instance['image_nickname'];
    foreach ($os_list as $os) {
      if (preg_match("/({$os})/i", $image_nickname)) {
        $installable = TRUE;
        break;
      }
    }
  }
  return $installable;
}

/**
 * Implementation of hook_cloud_monitor_installable()
 */
function cloud_monitoring_cloud_monitor_installable() {
  return array('ubuntu', 'debian');
}

