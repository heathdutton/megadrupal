<?php

/**
 * @file
 * Provides unified audit log for user's activities.
 * Not using watchdog functionality of Drupal.
 * Works with cloud_*.module
 *
 * Copyright (c) 2010-2011 DOCOMO Innovations, Inc.
 *
 */

module_load_include('inc', 'cloud'               , 'cloud_constants'               );
module_load_include('inc', 'cloud_activity_audit', 'cloud_activity_audit_constants');

/**
 * Implements hook_help().
 */
function cloud_activity_audit_help($section) {
  switch ($section) {
    case 'admin/help#':
      $output = '<p>' . t('The cloud module creates a user interface for users to manage clouds. Users can Create Instances,  Describe Instances etc..') . '</p>';
      return $output;
    case 'admin/content/comment':
    case 'admin/content/comment/create':
      return '<p>' . t("Below is a list of the latest comments posted to your site. Click on a subject to see the comment,  the author's name to edit the author's user information ,  'edit' to modify the text,  and 'delete' to remove their submission.") . '</p>';

    case 'admin/content/comment/approval':
      return '<p>' . t("Below is a list of the comments posted to your site that need approval. To approve a comment,  click on 'edit' and then change its 'moderation status' to Approved. Click on a subject to see the comment,  the author's name to edit the author's user information,  'edit' to modify the text,  and 'delete' to remove their submission.") . '</p>';

    case 'admin/content/comment/settings':
      return '<p>' . t("Comments can be attached to any node,  and their settings are below. The display comes in two types: a 'flat list' where everything is flush to the left side,  and comments come in chronological order,  and a 'threaded list' where replies to other comments are placed immediately below and slightly indented,  forming an outline. They also come in two styles: 'expanded',  where you see both the title and the contents,  and 'collapsed' where you only see the title. Preview comment forces a user to look at their comment by clicking on a 'Preview' button before they can actually add the comment.") . '</p>';
  }
}

/**
 * Implements hook_menu().
 */
function cloud_activity_audit_menu() {
  $items = array();
  $items['reports'] = array(
    'title' => 'Report',
    'description' => 'User Activity Auditing',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cloud_activity_audit_page', 'cloud_activity_audit'),
    'access arguments' => array('access audit report'),
    'weight' => -1,
    'file' => '',
  );
  $items['reports/activity_audit/report'] = array(
    'title' => 'Activity Audit',
    'description' => 'User Activity Auditing',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cloud_activity_audit_page', 'cloud_activity_audit'),
    'weight' => 0,
    'access arguments' => array('access audit report'),
    'file' => '',
  );
  $items['clouds/activity_audit/create'] = array(
    'title' => 'Add/Edit Audit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cloud_activity_audit_new', 'cloud_activity_audit'),
    'access arguments' => array('access audit report'),
    'file' => '',
    'type' => MENU_CALLBACK,
  );
  $items['reports/activity_audit/%/delete'] = array(
    'title' => 'Delete',
    'page callback' => '_cloud_activity_audit_delete',
    'page arguments' => array(2),
    'access arguments' => array('access audit report'),
    'file' => '',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function cloud_activity_audit_permission() {
  return array(
    'access audit report' => array(
      'title' => t('access audit report'),
      'description' => t('View audit report'),
    ),
  );
}

/**
 * Returns a form with listing of audit entries
 * Build a form including table header and table body
 * @param $form_submit
 *        This is the form-submit submitted by audit-listing form
 * @param $module
 *        This is the module who's entry is being displayed
 * @return return a form
 */
function cloud_activity_audit_page($form, $form_submit = '', $module) {
  
  $column     = 'type';
  $filter     = cloud_get_filter_value( $form_submit, 'filter'    );
  $filter_col = cloud_get_filter_value( $form_submit, 'operation' );
  $operation  = cloud_get_filter_value( $form_submit, 'operation' );

  drupal_add_js(cloud_get_module_base() . 'js/cloud_activity_audit.js');

  $options = array(
    'message' => 'Event'  ,
    'hostname' => 'IP'     ,
  );

  $filter = trim($filter);
  if (!empty($filter)) {
    $query_args[] = ($filter_col == 'location') ? 'referer'     : $filter_col;
    $query_args[] = ($filter_col == 'location') ? $modulefilter : $filter     ;
  }
  else {
    // default query values
    $filter_col   = 'message';
    $query_args[] = 'type';
    $query_args[] = 'user_activity';
  }

  $form['options'] = array(
    '#prefix' => '<div class="container-inline">',
    '#type' => 'fieldset',
    '#suffix' => '</div>',
  );

  $form['options']['label'     ] = array(
    '#type' => 'item',
    '#title' => t('Filter'),
  );
  $form['options']['operation'] = array(
    '#id' => 'filterOption',
    '#type' => 'select'   ,
    '#options' => $options,
    '#default_value' => $filter_col,
  );
  $form['options']['operation']['#attributes'] = array('onChange' => 'javaScript:switchOptions();');
  $form['options']['moduleList'] = array(
    '#id' => 'moduleFilter',
    '#type' => 'select'   ,
    '#options' => _cloud_activity_audit_get_cloud_module_list(),
  );
  $form['options']['filter'    ] = array(
    '#id' => 'otherFilter',
    '#type' => 'textfield',
    '#size' => 40,
    '#default_value' => $filter,
  );

  if ($filter_col == 'location') {
    $form['options']['moduleList']['#default_value'] = $modulefilter;
    $form['options']['moduleList']['#attributes'   ] = array('style' => 'display:');
    $form['options']['filter'    ]['#attributes'   ] = array('style' => 'display:none');
  }
  else {
    $form['options']['moduleList']['#attributes'   ] = array('style' => 'display:none');
    $form['options']['filter'    ]['#attributes'   ] = array('style' => 'display:');
  }

  $form['options']['submit'    ] = array(
    '#type' => 'submit',
    '#value' => t('Apply'  ),
  );
  $form['header'] = array(
    '#type' => 'value',
    '#value' => array(
      array(
        'data' => t('Type'    ),
        'field' => 'name',
      ),
      array(
        'data' => t('Date'    ),
        'field' => 'timestamp',
        'sort' => 'desc',
      ),
      array(
        'data' => t('Event'   ),
        'field' => 'message',
      ),
      array(
        'data' => t('Hostname'),
        'field' => 'hostname',
      ),
      array(
        'data' => t('User'    ),
        'field' => 'name',
      ),
      array(
        'data' => t('Module'  ),
        'field' => 'name',
      ),
    ),
  );
  
  $cloud_list = cloud_get_all_clouds();
  
  // get entries based on passed arguments
  $result = cloud_activity_audit_get_entry($form['header']['#value'], $query_args);
  foreach ($result as $activity_audit_obj) {
    $module_name        = '';
    $audit_location     = $activity_audit_obj->location;
    $audit_location_arr = explode('?', $audit_location);
    
    if (!empty($audit_location_arr[1])) {
      $audit_link_arr = explode('/', $audit_location_arr[1]);
      $pos            = 0;
      $module_name    = 'cloud';
      if (!empty($audit_link_arr[1]) ) {

        $pos = strpos($audit_link_arr[1], '&');
        if ( !strstr( $audit_location, 'cron') && !strstr( $audit_location, 'getdata')) {
          $module_name = ( $pos > 0 )
                     ? substr($audit_link_arr[1], 0, strpos($audit_link_arr[1], '&'))
                     : $audit_link_arr[1];
          if ( !in_array($module_name, $cloud_list) ) {
            $module_name = CLOUD_ACTIVITY_AUDIT_PREFIX . $module_name;
          }
        }
      }
    }

    $form['type'][$activity_audit_obj->wid] = array('#markup' => t( ucwords($activity_audit_obj->type) ));
    $form['date'][$activity_audit_obj->wid] = array('#markup' => format_date(strtotime($activity_audit_obj->timestamp), 'short'));

    if ($activity_audit_obj->link) {
      $form['event'][$activity_audit_obj->wid] = array('#markup' => l( $activity_audit_obj->message,    urldecode($activity_audit_obj->link),    array(),     '',    NULL, FALSE, TRUE ));
    }
    else {
      $form['event'][$activity_audit_obj->wid] = array('#markup' => t( $activity_audit_obj->message ));
    }

    $form['hostname'][$activity_audit_obj->wid] = array('#markup' => t( $activity_audit_obj->hostname ));
    $form['user'    ][$activity_audit_obj->wid] = array('#markup' => t( ((!empty($activity_audit_obj->name)
                                                                        ? $activity_audit_obj->name
                                                                        : 'system') ) ));
    $form['module'  ][$activity_audit_obj->wid] = array('#markup' => empty($module_name)
                                                                        ? 'cloud'
                                                                        : $module_name);
  }

  $template_id = !empty($template_id) ? $template_id : '';
  $form['template_id'] = array(
    '#type' => 'hidden',
    '#value' => $template_id,
  );

  $form['pager'] = array('#value' => theme('pager', array('tags' => NULL, 'element' => 0)));
  $form['#redirect'] = FALSE;

  return $form;
}

/**
 * Theme Activity Audit Listing Page
 */
function theme_cloud_activity_audit_page($variables) {
  $form = $variables['form'];

  $output = drupal_render($form['options']);
  $form['pager']['#value'] = !empty($form['pager']['#value']) ? $form['pager']['#value'] : '';

  $rows = array();
  if ( !empty($form['type']) ) {
    foreach (element_children($form['type']) as $key) {
      $row = array(
        drupal_render($form['type'    ][$key] ),
        drupal_render($form['date'    ][$key] ),
        drupal_render($form['event'   ][$key] ),
        drupal_render($form['hostname'][$key] ),
        drupal_render($form['user'    ][$key] ),
        drupal_render($form['module'  ][$key] ),
      );
      $rows[] = $row;
    }
  }
  $output .= theme('table', array('header' => $form['header']['#value'], 'rows' => $rows));
  $output .= theme('pager', array('tags' => array()));
  $output .= drupal_render_children($form);

  return $output;
}

/**
 * Filter form submit
 * @param   $form_id
 * @param   $form_values
 * @return
 */
function cloud_activity_audit_page_submit($form_id, &$form_state) {
  $form_values = $form_state['values'];
  if ($form_values['op'] == t('Apply')) {
    $param_arr = array(
      'filter' => $form_values['filter'],
      'operation' => $form_values['operation'],
    );
    $destination = drupal_get_destination();
    $form_state['redirect']     = array(current_path(), array('query' => $param_arr));
  }
}

/**
 * Query activity audit table for log entries
 */
function cloud_activity_audit_get_entry($sort_column, $query_args) {
  $query = db_select(CLOUD_ACTIVITY_AUDIT_TABLE, 'a');
  $query->leftjoin(CLOUD_ACTIVITY_AUDIT_DRUPAL_USERS_TABLE, 'b', 'a.uid = b.uid');
  
  $query = $query
      ->extend('PagerDefault')
      ->extend('TableSort')
      ->orderByHeader($sort_column);

  $query
      ->condition($query_args[0], '%' . $query_args[1] . '%', 'like')
      ->fields('a')
      ->limit(CLOUD_ACTIVITY_AUDIT_PAGER_LIMIT);
  $result = $query->execute();
  
  return $result;
}

/**
 * Delete an Audit entry
 * redirect to audit listing page
 * @param $audit_id
 *   This is audit-id
 * @return return a form
 */
function _cloud_activity_audit_delete($audit_id = '') {
  $id = $audit_id;

  cloud_activity_audit_log( array(
    'type' => 'user_activity',
    'message' => t('Audit has been deleted: @id', array('@id' => $id)),
    'link' => '',
  )
  );

  $query = db_delete(CLOUD_ACTIVITY_AUDIT_TABLE)
  ->condition('wid', $id)
  ->execute();

  drupal_set_message(t('Audit has been deleted successfully.'));
  drupal_goto(CLOUD_ACTIVITY_AUDIT_PATH . '/report');

  return;
}

/**
 * Implementation of hook_theme().
 */
function cloud_activity_audit_theme() {
  return array(
    'cloud_activity_audit_page' => array(
      'render element' => 'form',
      'file' => 'cloud_activity_audit.module',
    ),
  );
}

/**
 * Store an Audit entry into database
 * insert audit entry with type, message, location etc.. details
 * @param $arr_audit
 *        This is audit info details
 * @return return last inserted audit-id
 */
function cloud_activity_audit_log($arr_audit) {
  global $user;
  $request_uri  = request_uri();
  $qstring_param = array();
  $qstring_obj   = array();

  $nid = db_insert(CLOUD_ACTIVITY_AUDIT_TABLE)
  ->fields(array(
    'uid' => (int) $user->uid,
    'type' => ($arr_audit['type'] ? $arr_audit['type'] : 'user_activity'),
    'message' => $arr_audit['message'],
    'link' => $arr_audit['link'   ],
    'location' => $request_uri,
    'referer' => request_uri(),
    'hostname' => $_SERVER['REMOTE_ADDR'],
    'timestamp' => date('c'),
    'cloud_type' => (!empty($cloud_type) ? $cloud_type : ''),
  ))
  ->execute();
  return;
}
