<?php

/**
 * @file
 * Test Cases for Server Template Module
 *
 * Copyright (c) 2010-2011 DOCOMO Innovations, Inc.
 *
 */

/**
 * Updated by yas   2011/07/11
 * Updated by yas   2011/06/10
 * Updated by yas   2011/02/03
 * Updated by yas   2010/12/15
 * Updated by yas   2010/12/14
 * Updated by yas   2010/12/09
 * Updated by jamir 2010/12/06
 * Updated by jamir 2010/12/03
 * Updated by yas   2010/12/01
 * Updated by yas   2010/11/30
 * Created by yas   2010/11/29
 */

module_load_include('test', 'aws_cloud') ;

define('CLOUD_SERVER_TEMPLATES_REPEAT_COUNT', '3');
//define('CLOUD_SERVER_TEMPLATES_AMI'         , 'ubuntu-natty-daily-amd64-server-20110602 (ami-f0de2799)');
define('CLOUD_SERVER_TEMPLATES_AMI', 'debian-4.0-etch-base-20080629 (ami-8bbc58e2)');
 
class ServerTemplatesTestCase extends AwsCloudTestCase {

  
  public static function getInfo() {
    return array(
      'name'        => 'Server Templates'          ,
      'description' => 'Server Templates Test Case',
      'group'       => 'Cloud'                     ,
    );
  }

  
  public function testServerTemplates($repeat_count = CLOUD_SERVER_TEMPLATES_REPEAT_COUNT) {
    $clouds = $this->getClouds();
    foreach ($clouds as $cloud) {
      $this->refreshInstances($cloud);
      $this->refreshImages($cloud);

      // Access to Server Template Menu
      $this->drupalGet('design/server_templates');
      $this->assertResponse(200, t('HTTP 200: Design Menu'));
      $this->assertNoText(t('Notice' ), t('Make sure w/o Notice'  ));
      $this->assertNoText(t('warning'), t('Make sure w/o Warnings'));    
  
      // List Server Template for Amazon EC2
      $this->listServerTemplates();
  
      // Input Fields
      $serverTemplateName = array();
      $serverTemplateDesc = array();
      
      // Create Server Template
      for ($i = 0; $i < $repeat_count; $i++) { // 3 times
  
        // Input Fields
        $serverTemplateName[] = t('#@number: @date - SimpleTest Template Name'       , array(
                                   '@number' => $i + 1,
                                   '@date'   => date('D M j G:i T Y')));
        $serverTemplateDesc[] = t('#@number: @date - SimpleTest Template Description', array(
                                   '@number' => $i + 1,
                                   '@date'   => date('D M j G:i T Y')));
        
        $edit = array(
          'name_text'            => $serverTemplateName[$i],
          'description_text'     => $serverTemplateDesc[$i],
          'instance_type_select' => 't1.micro'             ,
          'ssh_keys_select'      => 'default'              ,
          'ec2_image_id_select'  => CLOUD_SERVER_TEMPLATES_AMI   ,
          'SG_select[]'          => 'default'              ,
        );
  
        $this->drupalPost('design/server_templates/' . $cloud . '/create', $edit, t('Add'));
        $this->assertResponse(200, t('HTTP 200: New Template Form | Add'));
        $this->assertText(t('Template has been saved.'),
                          t('Confirm Message:') . t('Template has been saved.'));
        $this->assertText($serverTemplateName[$i], t('Confirm Created Item: @server_template_name', array(
                                                                           '@server_template_name' => $serverTemplateName[$i])));
        $this->assertText($serverTemplateDesc[$i], t('Confirm Created Item: @server_template_desc', array(
                                                                           '@server_template_desc' => $serverTemplateDesc[$i])));
        $this->assertNoText(t('Notice' ), t('Make sure w/o Notice'  ));
        $this->assertNoText(t('warning'), t('Make sure w/o Warnings'));      
  
        // Check view
        $edit['templateid'] = $i + 1;
        $this->view($edit);
      }    
  
      // List Template for Amazon EC2
      $this->listServerTemplates();
      
      //filtering template item
      $this->filter($serverTemplateName);
      
      // Copy a server template
      $this->copy($serverTemplateName, $serverTemplateDesc);
  
      // Modify the First server template
      $edit = array(
          'templateid'           => '1'                        ,
          'name_text'            => 'Name'                     ,
          'description_text'     => 'Desc'                     ,
          'instance_type_select' => 't1.micro'                 ,
          'ssh_keys_select'      => 'default'                  ,
          'SG_select[]'          => 'default'                  ,
      );
  
      $this->modify($edit);
  
      // Delete a Template Item (id = 1)
      $this->delete(1);
  
      // List Template for Amazon EC2
      $this->listServerTemplates();
    }
  } 

  
  public function listServerTemplates() {

    // List Template for All
    $this->drupalGet('design/server_templates/');
    $this->assertResponse(200, t('HTTP 200: Design | Template'  ));
    $this->assertNoText(t('Notice' ), t('Make sure w/o Notice'  ));
    $this->assertNoText(t('warning'), t('Make sure w/o Warnings'));

    $clouds = $this->getClouds();
    foreach ($clouds as $cloud) {
      // List Server Template for Amazon EC2
      $this->drupalGet('design/server_templates/' . $cloud . '/list');
      $this->assertResponse(200, t('HTTP 200: Design | Template | Amazon EC2'));
      $this->assertNoText(t('Notice' ), t('Make sure w/o Notice'  ));
      $this->assertNoText(t('warning'), t('Make sure w/o Warnings'));
    }
  }


  public function view($info = array()) {

    $clouds = $this->getClouds();
    foreach ($clouds as $cloud) {
      // List Server Template for Amazon EC2
      $this->drupalGet('design/server_templates/' . $cloud . '/' . $info['templateid'] . '/view', array(
                         'query'           => array(
                           'id'            => $info['templateid'] ,
                           'cloud_context' => 'amazon_ec2',
                       )));
  
      $this->assertResponse(200, t('HTTP 200: Design | Template | Amazon EC2 | View (templateid = 1)'));
      $this->assertText($info['name_text'           ], t('Confirm View Item: @item', array('@item' => $info['name_text'           ])));
      $this->assertText($info['description_text'    ], t('Confirm View Item: @item', array('@item' => $info['description_text'    ])));
      $this->assertText($info['instance_type_select'], t('Confirm View Item: @item', array('@item' => $info['instance_type_select'])));
      $this->assertText($info['ssh_keys_select'     ], t('Confirm View Item: @item', array('@item' => $info['ssh_keys_select'     ])));
      $this->assertText($info['SG_select[]'         ], t('Confirm View Item: @item', array('@item' => $info['SG_select[]'         ])));
      $this->assertNoText(t('Notice' ), t('Make sure w/o Notice'  ));
      $this->assertNoText(t('warning'), t('Make sure w/o Warnings'));
    }
  }

  
  public function filter($info  = array()) {

    //filtering template item
    $filter = array(
      'filter'    => 'Test',
      'operation' => 0     , // 0: Template Name
    );
      
    $this->drupalPost('design/server_templates', $filter, t('Apply'));
    $template_id = CLOUD_SERVER_TEMPLATES_REPEAT_COUNT - 1 ;
    $this->assertText($info[$template_id], t('Confirm Filtered Item: @id', array('@id' => $info[$template_id])));
    $this->assertNoText(t('Notice' ), t('Make sure w/o Notice'  ));
    $this->assertNoText(t('warning'), t('Make sure w/o Warnings'));
  }


  public function copy($serverTemplateName, $serverTemplateDesc) {
    $clouds = $this->getClouds();
    foreach ($clouds as $cloud) {
      // Copy a server template
      $this->drupalGet('design/server_templates/' . $cloud . '/1/copy', array(
                          'query'   => array(
                            'id'    => '1'         ,
                            'count' => '1'         ,
                            'type'  => $cloud,
                          ),
                        )
                      );
      $this->assertResponse(200, t('HTTP 200: Copy Template'));
      $serverTemplateNameCopy = t('Copy of @server_template_name' . '_' . '@time', array(
                                          '@server_template_name' => $serverTemplateName[0],
                                          '@time'                 => time(),
                                ));
      $serverTemplateNameCopy = rtrim($serverTemplateNameCopy, '0..9'); // Remove the last digit of time() for sec
      $serverTemplateNameCopy = rtrim($serverTemplateNameCopy, '0..9'); // Remove the last digit of time() for sec 
  
      $this->assertText(  t('Template copied.'),
                          t('Confirm Message:') . t('Template copied.'));
      $this->assertNoText(t('Notice' ), t('Make sure w/o Notice'  ));
      $this->assertNoText(t('warning'), t('Make sure w/o Warnings'));
  
      $this->drupalGet('design/server_templates/list');
      $this->assertResponse(200, t('HTTP 200: Design | Template'));
      $this->assertText($serverTemplateNameCopy, t('Confirm Copied Item: @server_template_name', array(
                                                                        '@server_template_name' => $serverTemplateNameCopy)));
      $this->assertText($serverTemplateDesc[0] , t('Confirm Copied Item: @server_template_desc', array(
                                                                        '@server_template_desc' => $serverTemplateDesc[0] )));
      $this->assertNoText(t('Notice' ), t('Make sure w/o Notice'  ));
      $this->assertNoText(t('warning'), t('Make sure w/o Warnings'));
    }
  }

  
  public function modify($edit = array()) {
    $clouds = $this->getClouds();
    foreach ($clouds as $cloud) {
      // Modify the First server template
      $this->drupalPost('design/server_templates/' . $cloud . '/' . $edit['templateid'] . '/edit', $edit, t('Edit'));
      $this->assertResponse(200, t('HTTP 200: Template Form | Modify (id = @id)', array('@id' => $edit['templateid'])));
      $this->assertText('Template has been updated', t('Confirm Modify') );
      $this->assertNoText(t('Notice' ), t('Make sure w/o Notice'  ));
      $this->assertNoText(t('warning'), t('Make sure w/o Warnings'));
      $this->view($edit);
    }
  }
  

  public function delete($template_id = 1) {
    $clouds = $this->getClouds();
    foreach ($clouds as $cloud) {
      $this->drupalGet('design/server_templates/' . $cloud . '/' . $template_id . '/delete', array(
                       'id' => $template_id,
                      ));
      $this->assertResponse(200, t('HTTP 200: Design | Template | Delete (id = @id)', array('@id' => $template_id)));
      $this->assertNoText(t('Notice' ), t('Make sure w/o Notice'  ));
      $this->assertNoText(t('warning'), t('Make sure w/o Warnings'));
      // $this->assertText($serverTemplateName, 'Deleted Item: ' . $serverTemplateNameCopy);
    }
  }
}
