<?php

/**
 * @file
 * This is the base class of all Cloud Metering Module.
 * Basically this test case does nothing. 
 *
 * Copyright (c) 2010-2011 DOCOMO Communications Laboratories USA, Inc.
 *
 */

/**
 * This class is the base class for some of the 
 * Simple Tests.  This class has been simplified
 * for unit tests that do not require loading of
 * sub-clouds.  For any tests that require sub-clouds,
 * implement AwsCloudTestCase instead of this class.
 */
define('CLOUD_METERING_TEST_USER_COUNT', 2);


class CloudMeretingTestCase extends CloudTestCase {
  
  protected $privileged_user;
  protected $userList;
  
  function setUp() {
    parent::setUp('cloud', 'cloud_metering', 'aws_cloud');
    
    // Create and log in our privileged user.
    $perm = array(
      'configure instance budget',
      'configure user budget',
      'configure group budget',
      'configure user budget',
      'configure group budget',
      'access administration pages',
      'administer site configuration',
      'administer cloud',
      'access administration pages',
      'administer site configuration',
      'administer cloud',
      'access dashboard',
      'access audit report',
      'copy server template',
      'create server template',
      'delete server template',
      'edit server template',
      'launch server template',
      'list server templates',
      'set scripts and alerts',
      'view server template',
      'list alerts',
      'create alert',
      'view alerts',
      'edit alert',
      'delete alert',
    
      'create cluster',
      'delete cluster',
      'list clusters',
      'update cluster',
    
      'create script', 
      'list scripts', 
      'edit script', 
      'delete script',
      'create pricing', 
      'list pricing',  
      'edit pricing', 
      'delete pricing',
    );
    $this->privileged_user = $this->drupalCreateUser($perm);
    $this->userList[] = $this->privileged_user->name;
    $this->drupalLogin($this->privileged_user);
    $this->configure();
  }
  
  /**
   * Data definition for test keys 
   * For each new sub cloud, add its access variables
   */
  private $data = array(
    'amazon_ec2' => array(
      'cloud_name'         => 'amazon_ec2_us_east'  ,
      'base_cloud'         => 'amazon'                     ,
      'cloud_display_name' => 'AWS EC2 Virginia'                 ,
      'api_version'        => AMAZON_EC2_API_VERSION       ,
      'host_uri'           => AMAZON_EC2_HOST_URI          ,
      'aws_access_key'     => AMAZON_EC2_AWS_ACCESS_KEY    ,
      'aws_secret_key'     => AMAZON_EC2_API_SECRET_KEY    ,
      'user_id'            => AMAZON_EC2_USER_ID           ,
      'image_upload_url'   => AMAZON_S3_IMAGE_UPLOAD_URI   ,
      'image_register_url' => AMAZON_EC2_IMAGE_REGISTER_URI,
      'certificate'        => AMAZON_EC2_X509_CERTIFICATE  ,
    ),
  );
  
  public function configure() {
    //setup some sub-clouds in the system
    foreach ($this->data as $key => $value) {
      $this->drupalPost('admin/settings/clouds/add', $value, t('Create'));
      $this->assertText(t('Cloud @cloud_name has been created', array('@cloud_name' => $value['cloud_name'])), 
      'Confirm Message: The cloud has been created');
    }
    
    $this->resetAll();
    
    //create a new user with permissions
    $this->privileged_user = $this->drupalCreateUser(array(
      'configure instance budget',
      'configure user budget',
      'configure group budget',
      'configure user budget',
      'configure group budget',
      'access administration pages',
      'administer site configuration',
      'administer cloud',
      'access administration pages',
      'administer site configuration',
      'administer cloud',
      'access dashboard',
      'access audit report',
      'copy server template',
      'create server template',
      'delete server template',
      'edit server template',
      'launch server template',
      'list server templates',
      'set scripts and alerts',
      'view server template',
      'configure user budget',
      'configure group budget',
      'list alerts',
      'create alert',
      'view alerts',
      'edit alert',
      'delete alert',
    
      'create cluster',
      'delete cluster',
      'list clusters',
      'update cluster',
    
      'create script', 
      'list scripts', 
      'edit script', 
      'delete script',
      'create pricing', 
      'list pricing',  
      'edit pricing', 
      'delete pricing',
      'amazon_ec2_us_east list instances',
      'amazon_ec2_us_east launch instance',
      'amazon_ec2_us_east terminate all instances',
      'amazon_ec2_us_east terminate own instance',
      'amazon_ec2_us_east access all console',
      'amazon_ec2_us_east list images',
      'amazon_ec2_us_east register image',
      'amazon_ec2_us_east list key names',
      'amazon_ec2_us_east register key',
      'amazon_ec2_us_east update key',
      'amazon_ec2_us_east delete key',
      ));
    
    $this->userList[] = $this->privileged_user->name;
    $this->drupalLogin($this->privileged_user);
  }

  public static function getInfo() {
    return array(
      'name'        => 'Cloud Metering'           ,
      'description' => 'Cloud Metering Test Cases',
      'group'       => 'Cloud'           ,
    );
  }
  
  /**
  * Test Cloud Metering Page
  */
  public function testCloudMeretingPage() {
    $this->drupalGet('admin/settings/cloud_metering');
    $this->assertResponse(200, t('HTTP 200: Cloud Metering'));
  }
  
  /**
  * Test Cloud Instances Listing
  */
  public function testCloudMeretingInstanceListing() {
    $clouds = $this->getCloudsList();
    foreach ($clouds as $cloud) {
      $this->refreshInstances($cloud);
      
      //Test for AWS Cloud instances
      $instances = $this->CloudInstancesList($cloud);
      foreach ($instances as $instance) {
        //Test Threshold settings
        $this->drupalGet('admin/settings/cloud_metering/threshold/' . $cloud . '/' . $instance, array(
          'query' => array(
          'destination' => 'admin/settings/cloud_metering',
          ),
        ));
        $this->assertResponse(200, t('HTTP 200: Cloud Metering | Set threshold'));
        $this->testSetThreshold($cloud, $instance);
        
        //Test budget settings in the instance details page
        $this->drupalGet('clouds/' . $cloud . '/instances/describe/' . $instance . '/info', array(
          'query' => array(
          'instance_id' => $instance,
          ),
        ));
        $this->assertResponse(200, t('HTTP 200: Instance Info'));
        $this->testInstanceDetailsBudget($cloud, $instance);
        break;
      } 
      
    }
  }
  
  /**
   *Test User Group settings in metering module
   */
  public function testUserSettingsMeteringBudget() {
    //Create a role to test User settings
    $rid = $this->drupalCreateRole(array('access content', 'access user profiles', 'create page content'), 'simpletestuser');  
    
    $roles = $this->privileged_user->roles;
    $roles[$rid] = 'simpletestuser';
    $this->privileged_user->roles = $roles;
    
    //Create two users
    for ($i = 1; $i < CLOUD_METERING_TEST_USER_COUNT; $i++) {
      $user_account = $this->testCreateUser($roles);
    }
    
    $this->drupalGet('admin/settings/cloud_metering/group_settings/' . $rid . '/edit');
    $this->assertResponse(200, t('HTTP 200: Cloud Metering | User Group Settings'));
    
    //$this->verbose('user: ' . var_export($account, TRUE));
    $this->testSetUserSettingsMeteringBudget($rid);  
  }

  /**
   * Test Server Templates for each cloud
   */
  /*
  public function testSubCloudtBudget() {
    $cloud = 'amazon_ec2_us_east';
    $this->refreshImages($cloud);
    
    $this->drupalGet('design/server_templates/' . $cloud . '/list');
    $this->assertResponse(200, t('HTTP 200: Design | Template | Amazon EC2'));
    $this->assertNoText(t('Notice' ), t('Make sure w/o Notice'  ));
    $this->assertNoText(t('warning'), t('Make sure w/o Warnings'));
    

    $this->drupalGet('clouds/' . $cloud . '/get_ssh_keys_data');
    $this->assertResponse(200, t('HTTP 200: SSH Key'));
        
    //Server Template create

    $serverTemplateName = t('#@number: @date - SimpleTest Template Name'       , array(
                                   '@number' => 1,
                                   '@date'   => date('D M j G:i T Y')));
    $serverTemplateDesc = t('#@number: @date - SimpleTest Template Description', array(
                                   '@number' => 1,
                                   '@date'   => date('D M j G:i T Y')));
    $server_details = array(
      'name_text'            => $serverTemplateName       ,
      'description_text'     => $serverTemplateDesc       ,
      'instance_type_select' => 't1.micro'                ,
      'ssh_keys_select'      => 'default'                 ,
      'ec2_image_id_select'  => CLOUD_SERVER_TEMPLATES_AMI,
      'SG_select[]'          => 'default'                 ,
    );
    
    $this->drupalpost('design/server_templates/' . $cloud .'/create', $server_details, t('Add'));
    $this->assertNoText(t('Notice' ), t('Make sure w/o Notice'  ));
    $this->assertNoText(t('warning'), t('Make sure w/o Warnings'));
    
    $this->drupalGet('clouds/' . $cloud . '/get_ssh_keys_data');
    $this->assertResponse(200, t('HTTP 200: SSH Key'));
    
    $template_id = db_last_insert_id(CLOUD_SERVER_TEMPLATES_TABLE, 'template_id');
    
    //$result = db_query('select * from {' . CLOUD_SERVER_TEMPLATES_TABLE . '}');
    //while($row = db_fetch_array($result)) {
    //    $this->verbose('Template <pre>' . print_r($row, TRUE) . '</pre>');
    //}
    //$this->verbose('Template Id:' . $template_id);
    //
    $edit['initial_budget'] = 10;
    $edit['cost_threshold'] = 1;
    
    $this->drupalGet('design/server_templates/' . $cloud . '/' . $template_id . '/edit');
    $this->assertResponse(200, '200: Get Message');
    
    $this->drupalPost('design/server_templates/' . $cloud . '/' . $template_id . '/edit', $edit, t('Update budget'));
    $this->assertResponse(200, t('HTTP 200: Template Edit Form'));
    $this->assertText(t('The template budget settings have been saved.'));
    $this->assertNoText(t('Notice' ), t('Make sure w/o Notice'  ));
    $this->assertNoText(t('warning'), t('Make sure w/o Warnings'));
  }
  */
  
  /**
   * To test the Budget in server templates
   */
  private function getServerTemplatesFromCloud($cloud) {
    $templates = array();
    $query = db_query("select template_id from {cloud_server_templates}");
    while ($result = db_fetch_array($query)) {
      $templates[] = $result['template_id'];
    }
    return $templates;
  }
  
  
  /**
   * To set the testSetUserSettingsMeteringBudget
   */
  private function testSetUserSettingsMeteringBudget($rid) {
    //Get users from the role
    $users = $this->getUsersFromRole($rid);
    
    $user_data = array();
    $user_budget_setting = array();
    foreach ($users as $user) {
        $user_data[$user] = (int)$user;
        $budget_temp = 'user_budget_' . $user;
        $budget_temp1 = 'user_budget_value_' . $user;
        $user_budget_setting[$budget_temp] = 1;
        $user_budget_setting[$budget_temp1] = 1;
    }
    $user_budget_setting['group_budget'] = 1;
    $user_budget_setting['group_threshold'] = 1;
    
    
    $this->drupalPost('admin/settings/cloud_metering/group_settings/' . $rid . '/edit', $user_budget_setting, t('Update'));
    //$this->assertText(t('New Group is added Added Successfully'));
    $this->assertNoText(t('Notice' ), t('Make sure w/o Notice'  ));
    $this->assertNoText(t('warning'), t('Make sure w/o Warnings'));
  }
  
  /**
   * Helper function to Create a user to execute test for user Group Settings
   */
  private function testCreateUser($roles) {
    
    // Create a user assigned to that role.
    $edit = array();
    $edit['name']   = $this->randomName();
    $edit['mail']   = $edit['name'] . '@example.com';
    $edit['roles']  = $roles;
    $edit['pass']   = user_password();
    $edit['status'] = 1;

    $account = user_save('', $edit);

    $this->assertTrue(!empty($account->uid), t('User created with name %name and pass %pass', array('%name' => $edit['name'], '%pass' => $edit['pass'])), t('User login'));
    if (empty($account->uid)) {
      return FALSE;
    }

    // Add the raw password so that we can log in as this user.
    $account->pass_raw = $edit['pass'];
    return $account;
  }
  
  /**
   *Test Instance detsils page budget settings
   */
  private function testInstanceDetailsBudget($cloud, $instance) {
    //$this->verbose('I am here: ' . $cloud . $instance);
    $threshold_setting = array(
      'cost_threshold' => 1,
      'initial_budget' => 1, 
    );
    $this->drupalPost('clouds/' . $cloud . '/instances/describe/' . $instance . '/info', $threshold_setting, t('Update budget'));
    $this->assertText(t('The instance budget settings have been saved.'));
    $this->assertNoText(t('Notice' ), t('Make sure w/o Notice'  ));
    $this->assertNoText(t('warning'), t('Make sure w/o Warnings'));
  }
  
  /**
   *Helper function to test set Threshold budget settings
   */
  private function testSetThreshold($cloud, $instance) {
    $threshold_setting = array(
      'cost_threshold' => 90,
      'initial_budget' => 100, 
    );
    $this->drupalPost('admin/settings/cloud_metering/threshold/' . $cloud . '/' . $instance, $threshold_setting, t('Save'));
    $this->assertText(t('The instance budget settings have been saved.'));
    $this->assertNoText(t('Notice' ), t('Make sure w/o Notice'  ));
    $this->assertNoText(t('warning'), t('Make sure w/o Warnings'));
  }
  
  
  
  /**
  * Helper function to get all Cloud Instances from database
  * Locked instances are not returned
  */
  private function CloudInstancesList($cloud) {
    $instances = array();
    $query = db_query("SELECT I.instance_id, L.is_locked FROM {cloud_aws_instances} I LEFT JOIN {cloud_aws_instances_lock} L ON I.instance_id = L.instance_id WHERE I.cloud_type = '%s'", $cloud);
    
    while ($result = db_fetch_array($query)) {
      if (empty($result['is_locked']) || $result['is_locked'] == t('Unlock')) {
        $instances[] = $result['instance_id']; 
      }
    }
    return $instances;
  }
  
  /**
  * Helper function to get the cloud names in the database.
  * Using the cloud name, we can then run all the tests.
  * This function will change after multi region gets 
  * implemented
  */
  protected function getCloudsList() {
    $clouds = array();
    $query = db_query("select cloud_name from {cloud_clouds}");
    while ($result = db_fetch_array($query)) {
      $clouds[] = $result['cloud_name'];
    }
    return $clouds;
  }
  
  
  /**
   * Helper function to refresh a subcloud page
   */
  protected function refreshInstances($cloud) {
    $this->drupalGet('clouds/' . $cloud . '/get_instances_data', array(
      'query' => array(
        'destination' => 'clouds/' . $cloud . '/instances',
      ),
    ));
  }
  
  /**
   * Helper function to get users from role id
   */
  protected function getUsersFromRole($rid) {
    $users = array();
    $query = db_query("select uid from {users_roles} where rid = %d", $rid);
    while ($result = db_fetch_array($query)) {
      $users[] = $result['uid'];
    }
    return $users;
  }
  
  /**
   * Helper function to refresh an images listing page
   */
  protected function refreshImages($cloud) {
    $this->drupalGet('clouds/' . $cloud . '/getimagedata', array(
      'query' => array(
        'destination' => 'clouds/' . $cloud . '/images',
      ),
    ));
  }
  
  public function tearDown() {
    foreach ($this->userList as $name) {
      $this->tearDownSSHKey($name);
    }
    $this->tearDownSSHKEy($this->privileged_user->name);
    parent::tearDown();    
  }
  
  /**
   * Delete SSH keys generated against the test users
   */
  protected function tearDownSSHKey($key_name = '') {
    $clouds = $this->getCloudsList();    
    foreach ($clouds as $cloud) {
      $this->deleteSSHKey($key_name, $cloud);
      $this->assertText  (t('Key Pair deleted successfully: @keyname', array('@keyname' => $key_name)),
                          t('Confirmed: Key Pair deleted successfully: @keyname', array('@keyname' => $key_name)));
      $this->assertNoText(t('Notice' ), t('Make sure w/o Notice'  ));
      $this->assertNoText(t('warning'), t('Make sure w/o Warnings'));
    }
  }
  
  /**
   *  Helper function for deleting SSH keys
   */
  protected function deleteSSHKey($key_name, $cloud) {
    $this->drupalGet('clouds/' . $cloud . '/ssh_keys/delete', array(
      'query' => array(
          'key_name' => $key_name,
        ),
      ));
  }
}