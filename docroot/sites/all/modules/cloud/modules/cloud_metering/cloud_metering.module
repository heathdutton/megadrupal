<?php

/**
 * @file
 * Allows setting budgets and thresholds against cloud instances
 *
 * Copyright (c) 2011 DOCOMO Innovations, Inc.
 *
 */

module_load_include('inc', 'cloud_metering', 'cloud_metering_constants');
module_load_include('inc', 'cloud_metering'                            );
module_load_include('inc', 'cloud_metering', 'cloud_metering_queue'    );
module_load_include('inc', 'cloud_metering', 'cloud_metering_queue_db' );
module_load_include('inc', 'cloud_metering', 'cloud_metering_db'       );

/**
 *  Implementation of hook_help()
 */
function cloud_metering_help($path, $arg) {
  $content = '';
  switch ($path) {
    case 'admin/help#cloud_metering':
      $content = t('The Cloud Metering module provides the ability to set cost thresholds.');
  }
  return $content;
}

/**
 *  Implementation of hook_menu()
 */
function cloud_metering_menu() {

  $items = array();

  $items['admin/config/cloud_metering'] = array(
    'title' => 'Cloud Metering',
    'description' => 'Set Cloud Metering settings',
    'page callback' => 'cloud_metering_instances_list',
    'page arguments' => array('cloud_metering_instances_list'),
    'access arguments' => array('configure instance budget'),
    'file' => 'cloud_metering.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/cloud_metering/group_settings'] = array(
    'title' => 'User Group Settings',
    'description' => 'Set Group details and Budget',
    'page callback' => 'cloud_metering_group_budget_configure',
    'access arguments' => array('configure group budget'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -9,
  );
  $items['admin/config/cloud_metering/group_settings/%/%'] = array(
    'title' => 'User Group Settings',
    'description' => 'Set Group details and Budget',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cloud_metering_user_list', 4, 5),
    'access arguments' => array('configure group budget'),
    'type' => MENU_CALLBACK,
    'weight' => -9,
  );

  $items['admin/config/cloud_metering/mail_settings'] = array(
    'title' => 'Mail Settings',
    'description' => 'Mail settings for Cloud Metering',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cloud_metering_mail_settings'),
    'access arguments' => array('configure instance budget'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );

  $items['admin/config/cloud_metering/threshold/%/%'] = array(
    'title' => 'Budget Setting',
    'description' => 'Set threshold for a specific instance',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cloud_metering_set_threshold', 4, 5),
    'access arguments' => array('configure instance budget'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 *  Implementation of hook_permission()
 */
function cloud_metering_permission() {

  return array(
    'configure instance budget' => array(
      'title' => 'Configure instance budget',
      'description' => 'Configure instance budget'),
    'configure user budget' => array(
      'title' => 'Configure user budget',
      'description' => 'Configure user budget'),
    'configure group budget' => array(
      'title' => 'Configure group budget',
      'description' => 'Configure group budget'),
    );

}

/**
 * Implements hook_form_FORM_ID_alter(). 
 * Add the Initial Budget field for Cloud Instances and Server Templates Edit/Form
 */
function cloud_metering_form_aws_cloud_server_templates_new_alter(&$form, &$form_state, $form_id) {
  // Only add this to Edit Template Initial Budget field
  if (user_access('configure instance budget')) {
    $template_id = isset($form['templateid']['#value']) ? $form['templateid']['#value'] : NULL;
    if (isset($template_id)) {
      $budget_data = _cloud_metering_get_template_budget($template_id);
      $form['initial_budget_info'] = array(
        '#type' => 'fieldset',
        '#title' => t('Budget'),
        '#description' => t('The budget and threshold values set here will be the default budget and threshold values for instances launched from this template.'),
        '#weight' => 2,
      );
      $form['initial_budget_info']['initial_budget'] = array(
        '#type' => 'textfield',
        '#title' => t('Initial Budget'),
        '#default_value' => isset($budget_data['initial_budget']) ? $budget_data['initial_budget'] : '0',
        '#size' => 20,
      );
      $form['initial_budget_info']['cost_threshold'] = array(
        '#title' => t('Threshold (%)'),
        '#description' => t('The cost threshold percentage. Thershold value will be percent of the Initial Budget.'),
        '#type' => 'textfield',
        '#default_value' => isset($budget_data['cost_threshold']) ? $budget_data['cost_threshold']: '0',
        '#size' => 20,
      );
      $form['initial_budget_info']['update_budget'] = array(
        '#type' => 'submit',
        '#value' => t('Update budget'),
        '#submit' => array('_cloud_metering_update_template_budget'),
        '#validate' => array('_cloud_metering_validate_template_budget'),
      );
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Insert metering information into instance form 
 */
function cloud_metering_form_aws_cloud_display_instance_info_alter(&$form, &$form_state, $form_id) {
  if (user_access('configure instance budget')) {
    $cloud_context = $form['cloud_context']['#value'];
    $instance_id   = $form['Instance_Id']['instance_id']['#value'];
    $lock_status = cloud_perform_action('', 'get_instance_lock_status', $cloud_context, array('instance_id' => $instance_id));
    $locked      = ( $lock_status == 'Lock' ? TRUE : FALSE );
    $budget_data = _cloud_metering_get_instance_budget($cloud_context, $instance_id);

    $form['initial_budget_info'] = array(
      '#type' => 'fieldset',
      '#title' => t('Threshold and Initial Budget for @instance_id', array('@instance_id' => $instance_id)),
      '#weight' => 2,
    );
  
    $form['initial_budget_info']['initial_budget'] = array(
      '#type' => 'textfield',
      '#title' => t('Initial Budget ($)'),
      '#description' => t('Enter Zero(0) for unlimited budget.'),
      '#default_value' => $budget_data['initial_budget'],
      '#size' => 20,
      '#disabled' => $locked,
    );
    $form['initial_budget_info']['cost_threshold'] = array(
      '#title' => t('Threshold (%)'),
      '#description' => t('The cost threshold percentage. Threshold value will be percent of the Initial Budget.'),
      '#type' => 'textfield',
      '#default_value' => $budget_data['cost_threshold'],
      '#size' => 20,
      '#disabled' => $locked,
    );
    $form['initial_budget_info']['terminate'] = array(
      '#title' => t('Terminate instance if budget is surpassed'),
      '#description' => t('If checked, the instance will be automatically terminated if the budget is surpassed'),
      '#type' => 'checkbox',
      '#default_value' => $budget_data['terminate'],
      '#disabled' => $locked,
    );
    $form['initial_budget_info']['update_budget'] = array(
      '#type' => 'submit',
      '#value' => t('Update budget'),
      '#submit' => array('_cloud_metering_update_instance_budget'),
      '#validate' => array('_cloud_metering_validate_template_budget'),
      '#disabled' => $locked,
    );
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Insert threshold information into server templates
 */
function cloud_metering_form_aws_cloud_server_templates_view_alter(&$form, &$form_state, $form_id) {
  
  $template_id = $form['templateid']['#value'];
  $budget_data = _cloud_metering_get_template_budget($template_id);
  
  $form['cloud_metering_budget'] = array(
    '#type' => 'fieldset',
    '#title' => t('Budget'),
  );
  // format the data in rows
  $rows = array();
  $rows[] = array(t('Budget'), number_format($budget_data['initial_budget'], 2, '.', ','));
  $rows[] = array(t('Threshold (%)'), isset($budget_data) && isset($budget_data['cost_threshold']) ? $budget_data['cost_threshold'] : '0');
  
  $table = theme('table', array('header' => NULL, 'rows' => $rows, 'attributes' => array('class' => 'template-budget-fields')));
  $form['cloud_metering_budget']['#children'] = $table;
}

/**
 *  Implementation of hook_cron()
 */
function cloud_metering_cron() {

  // Get the instances, properly grouped
  $grouped_instances = cloud_metering_get_grouped_instances();

  // Send notification to instance users for instances whose costs have crossed thresholds
  cloud_metering_notify_instance_users($grouped_instances['threshold_crossed_instances']);

  // Send notification to group admins for groups whose costs have crossed thershold/budget
  cloud_metering_notify_group_admins($grouped_instances['group_instances']);

  // Send notification to users whose total instance costs have crossed their budget
  cloud_metering_notify_users($grouped_instances['user_instances']);

  // Backup and Terminate instances for which costs have gone past the budgets
  cloud_metering_terminate_budget_crossed_instances($grouped_instances['budget_crossed_instances']);

  // Add checker tasks
  cloud_metering_add_checker_tasks();

  // Delete completed tasks
  _cloud_metering_delete_completed_tasks();
}

/**
 *  Implementation of hook_theme()
 */
function cloud_metering_theme() {
  return array(
    'cloud_metering_user_list' => array(
      'render element' => 'form',
      'file' => 'cloud_metering.inc',
    ),
  );
}

/**
 *  Implementation of hook_mail()
 */
function cloud_metering_mail($key, &$message, $params) {
  // call token_replace and set the subject and body
  $language = $message['language'];
  switch($key) {
    case 'threshold_mail':
      $message['subject'] = token_replace(CLOUD_METERING_DEFAULT_THRESHOLD_MAIL_SUBJECT, $params, array('language' => $language, 'sanitize' => FALSE, 'clear' => TRUE));
      $message['body'][] = token_replace(CLOUD_METERING_DEFAULT_THRESHOLD_MAIL_BODY, $params, array('language' => $language, 'sanitize' => FALSE, 'clear' => TRUE));
      break;
    case 'terminate_mail':
      $message['subject'] = token_replace(CLOUD_METERING_DEFAULT_TERMINATE_MAIL_SUBJECT, $params, array('language' => $language, 'sanitize' => FALSE, 'clear' => TRUE));
      $message['body'][] = token_replace(CLOUD_METERING_DEFAULT_TERMINATE_MAIL_BODY, $params, array('language' => $language, 'sanitize' => FALSE, 'clear' => TRUE));
      break;
    case 'terminate_warning_mail':
      $message['subject'] = token_replace(CLOUD_METERING_DEFAULT_TERMINATE_WARNING_MAIL_SUBJECT, $params, array('language' => $language, 'sanitize' => FALSE, 'clear' => TRUE));
      $message['body'][] = token_replace(CLOUD_METERING_DEFAULT_TERMINATE_WARNING_MAIL_BODY, $params, array('language' => $language, 'sanitize' => FALSE, 'clear' => TRUE));
      break;
    case 'user_mail':
      $message['subject'] = token_replace(CLOUD_METERING_DEFAULT_USER_MAIL_SUBJECT, $params, array('language' => $language, 'sanitize' => FALSE, 'clear' => TRUE));
      $message['body'][] = token_replace(CLOUD_METERING_DEFAULT_USER_MAIL_BODY, $params, array('language' => $language, 'sanitize' => FALSE, 'clear' => TRUE));
      break;
    case 'group_mail':
      $message['subject'] = token_replace(CLOUD_METERING_DEFAULT_GROUP_MAIL_SUBJECT, $params, array('language' => $language, 'sanitize' => FALSE, 'clear' => TRUE));
      $message['body'][] = token_replace(CLOUD_METERING_DEFAULT_GROUP_MAIL_BODY, $params, array('language' => $language, 'sanitize' => FALSE, 'clear' => TRUE));
      break;
  }
}

/**
 *  Implementation of hook_cloud_delete()
 */
function cloud_metering_cloud_delete($cloud_name) {
  _cloud_metering_delete_cloud_data($cloud_name);
}

/**
 *  Implementation of hook_cloud_action_notify()
 */
function cloud_metering_cloud_action_notify($op, $params) {
  switch ($op) {
    case 'launch':
      if (isset($params['cloud_context']) && isset($params['instance_id']) && isset($params['template_id'])) {
        $cloud_context = $params['cloud_context'];
        $instance_id   = $params['instance_id'];
        $template_id   = $params['template_id'];
        $template_budget = _cloud_metering_get_template_budget($template_id);

        if (!empty($template_budget['template_id'])) {
          _cloud_metering_instance_budget_save($cloud_context, $instance_id, array('budget' => $template_budget['initial_budget'], 'threshold' => $template_budget['cost_threshold']));
        }
      }
      break;
  }
}

/**
 *  Implementation of hook_menu_alter().
 *  Take over the server launching functionality. The _cloud_metering_check_launch
 *  will perform some usage calculations before launching an instance
 */
function cloud_metering_menu_alter(&$items) {
  // Alter the launch from server template menus, to add budget checks
  // post launch hook instead of something else!
  $clouds = cloud_get_all_clouds();
  foreach ($clouds as $cloud_context) {
    $items['design/server_templates/' . $cloud_context . '/%/launch'] = array(
      'title' => t('Launch'),
      'page callback' => '_cloud_metering_check_launch',
      'page arguments' => array(3, $cloud_context),
      'access arguments' => array('launch server template'),
      'file' => '',
      'type' => MENU_CALLBACK,
    );
  }
}

/**
 * Implementation of hook_cloud_server_template_delete()
 */
function cloud_metering_cloud_server_template_delete($template_id, $cloud_context) {
  _cloud_metering_delete_template_budget($template_id);
}

/**
 * Implementation of hook_aws_ec2_terminate_instance()
 */
function cloud_metering_aws_cloud_terminate_instance($cloud_context, $instance_id) {
  _cloud_metering_instance_budget_delete($cloud_context, $instance_id);
}

/**
 * Helper function to send email 
 */
function cloud_metering_send_mail($uid, $template, $params = array()) {
  if ($uid) {
    $account = user_load($uid);
    // add loaded account into the params
    $params['user'] = $account; 
    $mail_result = drupal_mail(CLOUD_METERING_MODULE_NAME, $template, $account->mail, user_preferred_language($account), $params, variable_get('site_mail', ini_get('sendmail_from')), TRUE);
    return $mail_result;
  }
}

/**
 * Add a task to the job queue
 */
function cloud_metering_add_checker_tasks() {
  $in_progress_tasks = _cloud_metering_get_in_progress_tasks();

  if (is_array($in_progress_tasks)) {
    foreach ($in_progress_tasks as $in_progress_task) {
      $data = unserialize($in_progress_task['data']);
      $cloud_context = $data['cloud_context'];
      $instance_id = $data['instance_id'];
      $task = $in_progress_task['task'];

      if ($task == CLOUD_METERING_BACKUP) {
        $task = CLOUD_METERING_BACKUP_CHECK;
      }
      elseif ($task == CLOUD_METERING_TERMINATE) {
        $task = CLOUD_METERING_TERMINATE_CHECK;
      }

      if (_cloud_metering_get_task_type($task) == 'base') {
        continue;
      }
      $data['qid'] = $in_progress_task['qid'];
      // Add a checker task
      _cloud_metering_add_task($cloud_context, $instance_id, $task, $data);
    }
  }
}

