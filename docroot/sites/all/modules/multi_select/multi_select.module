<?php
/**
* @file
* Basic Module file.
*
*/

/**
 * Implements hook_init().
 */

function multi_select_init() {
  $module_path = drupal_get_path('module', 'multi_select');
  $settings = variable_get('multi_select_settings');
  if (multi_select_check_path($settings['pages']['visibility'], $settings['pages']['pages']) && multi_select_check_theme() && isset($settings['triggers_fieldset'])) {
    $libraries = libraries_load('multi-select');
    if ($libraries['installed']) {
      drupal_add_js(array(
        'multi_select' => $settings,
      ),
      'setting');
      drupal_add_js($module_path . '/multi_select.custom.js');
    }
    else {
      drupal_set_message(t($libraries['error message']), 'error');
    }
  }
}


function multi_select_check_path($visibility, $pages) {
  $pages = drupal_strtolower($pages);
  // Convert the Drupal path to lowercase
  $path = drupal_strtolower(drupal_get_path_alias($_GET['q']));
  // Compare the lowercase internal and lowercase path alias (if any).
  $page_match = drupal_match_path($path, $pages);
  if ($path != $_GET['q']) {
    $page_match = $page_match || drupal_match_path($_GET['q'], $pages);
  }
  // When $block->visibility has a value of 0 (BLOCK_VISIBILITY_NOTLISTED),
  // the block is displayed on all pages except those listed in $block->pages.
  // When set to 1 (BLOCK_VISIBILITY_LISTED), it is displayed only on those
  // pages listed in $block->pages.
  $page_match = !($visibility xor $page_match);
  return $page_match;
}

function multi_select_check_theme() {
  global $theme_key;
  $settings = variable_get('multi_select_settings');
  $visibility = $settings['theme']['visibility'];
  $theme_match = in_array($theme_key, $settings['theme']['themes']);
  $theme_match = !($visibility xor $theme_match);
  return $theme_match;
}

/**
* Implementation of hook_menu().
*/
function multi_select_menu() {
  // Admin settings.
  $items['admin/config/user-interface/multi-select'] = array(
    'title' => 'Multi Select',
    'description' => 'Replaces Multi Select with Drop In widget',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('multi_select_admin'),
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

/**
 * Callback function for admin setting.
 */
function multi_select_admin($form, &$form_state) {
  // This module will not work if used in overlay paths such as 
  // admin/* , node/add etc if user has overlay access.
  // Since the form builder is called after every AJAX request, we rebuild
  // the form based on $form_state.
  $settings = variable_get('multi_select_settings');
  $num_elements = isset($settings['triggers_fieldset']) ? count($settings['triggers_fieldset']) + 1 : 1;
  $form_state['triggers'] = $num_elements;
  $themes = list_themes();
  $active_themes = array();
  foreach ($themes as $theme) {
    if ($theme->status) {
      $active_themes[$theme->name] = $theme->info['name'];
    }
  }

  $options['helper'] = array(
    '#markup' => t('<h3>Multi Select Options</h3>
<p>A simple way to create and maintain how elements fade in, triggered when they enter the viewport. An open-source experiment from <a href="https://twitter.com/julianlloyd">@JulianLloyd</a></p>'),
  );

  $options['triggers_fieldset'] = array(
    '#tree' => TRUE,
    '#title' => t("Target elements"),
    // The prefix/suffix provide the div that we're replacing, named by
    // #ajax['wrapper'] above.
    '#prefix' => '<div id="triggers-div">',
    '#suffix' => '</div>',
    '#type' => 'vertical_tabs',
    '#description' => t('Elements where Parallax Effect will be added'),
  );
  $i = 1;
  $triggers = isset($settings['triggers_fieldset']) ? $settings['triggers_fieldset'] : array();
  foreach ($triggers as $trigger) {
    $options['triggers_fieldset']["trigger$i"] = array(
      '#type' => 'fieldset',
      '#title' => isset($trigger["element"]) ? $trigger["element"] : t('New element'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#group' => 'triggers_fieldset'
    );
    $options['triggers_fieldset']["trigger$i"]["element"] = array(
      '#type' => 'textfield',
      '#default_value' => isset($trigger["element"]) ? $trigger["element"] : '',
      '#title' => "Valid jQuery selector",
      '#required' => TRUE,
      '#description' => "A jQuery selector to identify the element(s) that will be replace with Drop In. For example for a list of items in a view you could use #block-views-services-block .views-row.",
    );
    $options['triggers_fieldset']["trigger$i"]["selectableheader"] = array(
     '#type' => 'textfield',
      '#default_value' => isset($trigger["selectableheader"]) ? $trigger["selectableheader"] : '',
       '#title' => "Selectable Header",
      '#description' => "Text or HTML to display in the selectable header.",
      '#required' => FALSE,
    );
    $options['triggers_fieldset']["trigger$i"]["selectedheader"] = array(
      '#type' => 'textfield',
      '#default_value' => isset($trigger["selectedheader"]) ? $trigger["selectedheader"] : '',
      '#title' => "Selected Header",
      '#description' => "Text or HTML to display in the selection header.",
      '#required' => FALSE,
    );
    $options['triggers_fieldset']["trigger$i"]["selectablefooter"] = array(
      '#type' => 'textfield',
      '#default_value' => isset($trigger["selectablefooter"]) ? $trigger["selectablefooter"] : '',
      '#title' => "Selectable Footer",
      '#description' => "Text or HTML to display in the selectable footer.",
      '#required' => FALSE,
    );
    $options['triggers_fieldset']["trigger$i"]["selectedfooter"] = array(
      '#type' => 'textfield',
      '#default_value' => isset($trigger["selectedfooter"]) ? $trigger["selectedfooter"] : '',
      '#title' => "Selected Footer",
      '#description' => "Text or HTML to display in the selection footer.",
      '#required' => FALSE,
    );
    $options['triggers_fieldset']["trigger$i"]['delete'] = array(
      '#type' => 'button', 
      '#value' => t('Delete element'),
      '#name' => 'delete-' . $i,
      '#submit' => array('multi_select_delete_submit'),
    );
    $i++;
  }
  $options['triggers_fieldset']["trigger$i"] = array(
    '#type' => 'fieldset',
    '#title' => t('New element'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#group' => 'triggers_fieldset'
  );
  $options['triggers_fieldset']["trigger$i"]["element"] = array(
    '#type' => 'textfield',
    '#default_value' => NULL,
    '#title' => "Valid jQuery selector",
    '#description' => "A jQuery selector to identify the element(s) that will be replaced with Drop In. For example for a list of items in a view you could use #block-views-services-block .views-row.",
    '#required' => FALSE,
  );
  $options['triggers_fieldset']["trigger$i"]["selectableheader"] = array(
    '#type' => 'textfield',
    '#default_value' => NULL,
    '#title' => "Selectable Header",
    '#description' => "Text or HTML to display in the selectable header.",
    '#required' => FALSE,
  );
  $options['triggers_fieldset']["trigger$i"]["selectedheader"] = array(
    '#type' => 'textfield',
    '#default_value' => NULL,
    '#title' => "Selected Header",
    '#description' => "Text or HTML to display in the selection header.",
    '#required' => FALSE,
  );
  $options['triggers_fieldset']["trigger$i"]["selectablefooter"] = array(
    '#type' => 'textfield',
    '#default_value' => NULL,
    '#title' => "Selectable Footer",
    '#description' => "Text or HTML to display in the selectable footer.",
    '#required' => FALSE,
  );
  $options['triggers_fieldset']["trigger$i"]["selectedfooter"] = array(
    '#type' => 'textfield',
    '#default_value' => NULL,
    '#title' => "Selected Footer",
    '#description' => "Text or HTML to display in the selection footer.",
    '#required' => FALSE,
  );

  $options['pages'] = array(
    '#type' => 'fieldset',
    '#title' => t('Pages Visibility'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $options['pages']['visibility'] = array(
    '#type' => 'radios',
    '#title' => t('Activate on specific pages'),
    '#options' => array(
      0 => t('All pages except those listed'),
      1 => t('Only the listed pages'),
    ),
    '#default_value' => $settings['pages']['visibility'],
  );
  $options['pages']['pages'] = array(
    '#type' => 'textarea',
    '#title' => 'List of pages to activate',
    '#default_value' => $settings['pages']['pages'],
    '#description' => t("Specify pages by using their paths. Enter one path per line. The '*' character is a wildcard. Example paths are %blog for the blog page and %blog-wildcard for every personal blog. %front is the front page.", array('%blog' => 'blog', '%blog-wildcard' => 'blog/*', '%front' => '<front>')),
  );
  // Per-path visibility.
  $options['theme'] = array(
    '#type' => 'fieldset',
    '#title' => t('Themes Visibility'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $options['theme']['visibility'] = array(
    '#type' => 'radios',
    '#title' => t('Activate on specific themes'),
    '#options' => array(
      0 => t('All themes except those listed'),
      1 => t('Only the listed themes'),
    ),
    '#default_value' => $settings['theme']['visibility'],
  );
  $options['theme']['themes'] = array(
    '#type' => 'select',
    '#title' => 'List of themes where library will be loaded.',
    '#options' => $active_themes,
    '#multiple' => TRUE,
    '#default_value' => $settings['theme']['themes'],
    '#description' => t("Specify in which themes you wish the library to load."),
  );

  $options['#tree'] = TRUE;
  $form['multi_select_settings'] = $options;
  $form['actions']['#type'] = 'actions';
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save configuration'),
  );
  $form['#submit'][] = 'multi_select_admin_form_submit';
  // Disable automatic defaults, which don't work with nested values.
  return $form;
}

function multi_select_delete_submit($form, &$form_state) {
}

/**
 * Now we add a handler/function to validate the data entered into the
 * "year of birth" field to make sure it's between the values of 1900
 * and 2000. If not, it displays an error. The value report is
 * $form_state['values'] (see http://drupal.org/node/144132#form-state).
 *
 * Notice the name of the function. It is simply the name of the form
 * followed by '_validate'. This is always the name of the default validation
 * function. An alternate list of validation functions could have been provided
 * in $form['#validate'].
 *
 * @see multi_select_admin()
 */
function multi_select_admin_validate($form, &$form_state) {
  if ($form_state['clicked_button']['#value'] == "Delete element") {
    $settings = variable_get('multi_select_settings');
    $child = $form_state['clicked_button']['#parents'][2];
    unset($settings['triggers_fieldset'][$child]);
    variable_set('multi_select_settings', $settings);
    $form_state['rebuild'] = TRUE;
    $form_state['flag'] = 1;
    drupal_set_message(t('The element have been deleted.'));
    drupal_goto('admin/config/user-interface/multi_select');
  }
}

function multi_select_admin_form_submit($form, &$form_state) {
  // Exclude unnecessary elements.
  form_state_values_clean($form_state);
  $i = $form_state['triggers'];
  if (!strlen($form_state['values']['multi_select_settings']['triggers_fieldset']["trigger$i"]["element"])) {
    unset($form_state['values']['multi_select_settings']['triggers_fieldset']["trigger$i"]);
  }
  unset($form_state['values']['multi_select_settings']['triggers_fieldset']["multi_select_settings__triggers_fieldset__active_tab"]);

  foreach ($form_state['values'] as $key => $value) {
    if (is_array($value) && isset($form_state['values']['array_filter'])) {
      $value = array_keys(array_filter($value));
    }
    variable_set($key, $value);
  }

  drupal_set_message(t('The configuration options have been saved.'));
}

/**
 * Libraries implementation.
 */

/**
 * Implements hook_libraries_info().
 */
function multi_select_libraries_info() {
  $libraries['multi-select'] = array(
    'name' => 'Multi Select',
    'vendor url' => 'http://loudev.com/#home',
    'download url' => 'https://github.com/lou/multi-select/zipball/master',
    'version arguments' => array(
      'file' => 'js/jquery.multi-select.js',
      'pattern' => '/MultiSelect\s+v?([0-9\.]+)/',
      'lines' => 2,
    ),
    'files' => array(
      'js' => array(
        'js/jquery.multi-select.js',
      ),
      'css' => array(
        'css/multi-select.css',
      ),
    ),
  );

  return $libraries;
}

/**
 * Check if the Sroll Reveal library is installed.
 *
 * @return
 *   A boolean indicating the installed status.
 */
function multi_select_installed() {
  if (($library = libraries_detect('multi-select')) && !empty($library['installed'])) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Check if the Multi Select library has been loaded.
 *
 * @return
 *   A boolean indicating the loaded status.
 */
function multi_select_library_loaded() {
  if (($library = libraries_load('multi-select')) && !empty($library['loaded'])) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

