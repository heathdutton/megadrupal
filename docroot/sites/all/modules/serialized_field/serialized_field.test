<?php

class SerializedFieldTest extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Basic field functionality.',
      'description' => 'Tests basic serialized field functionality.',
      'group' => 'Serialized field',
    );
  }

  protected $field;
  protected $instance;
  protected $text_field;
  protected $text_field_instance;
  protected $web_user;

  function setUp() {
    parent::setUp(array('field_test', 'serialized_field', 'text'));
    $this->web_user = $this->drupalCreateUser(array('access field_test content', 'administer field_test content', 'administer content types'));
    $this->drupalLogin($this->web_user);
  }

  /**
   * Test out basic serialized field functionality.
   */
  function testDataSerialization() {
    // Create a text field to go alongside our field on the entity.
    $max_length = 3;
    $this->text_field = array(
      'field_name' => drupal_strtolower($this->randomName()),
      'type' => 'text',
      'settings' => array(
        'max_length' => $max_length,
      )
    );
    field_create_field($this->text_field);
    $this->text_field_instance = array(
      'field_name' => $this->text_field['field_name'],
      'entity_type' => 'test_entity',
      'bundle' => 'test_bundle',
      'widget' => array(
        'type' => 'text_textfield',
      ),
      'display' => array(
        'default' => array(
          'type' => 'text_default',
        ),
      ),
    );
    field_create_instance($this->text_field_instance);

    // Create a field with settings to validate.
    $this->field = array(
      'field_name' => drupal_strtolower($this->randomName()),
      'type' => 'serialized',
      'settings' => array(),
    );
    field_create_field($this->field);
    $this->instance = array(
      'field_name' => $this->field['field_name'],
      'entity_type' => 'test_entity',
      'bundle' => 'test_bundle',
      'widget' => array(
        'type' => 'serialized_hidden',
      ),
      'display' => array(
        'default' => array(
          'type' => 'hidden',
        ),
      ),
      'settings' => array(
        'serialization' => 'serialize',
        'namespace' => FALSE,
      ),
    );
    field_create_instance($this->instance);

    // Display creation form.
    $this->drupalGet('test-entity/add/test-bundle');
    $langcode = LANGUAGE_NONE;
    $this->assertNoFieldByName("{$this->field['field_name']}[$langcode][0][value]", '', 'Widget is displayed');

    $value = $this->randomString($max_length);
    $edit = array(
      "{$this->text_field['field_name']}[$langcode][0][value]" => $value,
    );

    $this->drupalPost(NULL, $edit, t('Save'));
    preg_match('|test-entity/manage/(\d+)/edit|', $this->url, $match);
    $id = $match[1];
    $this->assertRaw(t('test_entity @id has been created.', array('@id' => $id)), 'Entity was created');

    // Now load the entity.
    $entity = field_test_entity_test_load($id);
    // We're going to save some serialized data into our field.
    $serialized_value = array(
      $this->randomString() => $this->randomString(),
    );
    $entity->{$this->field['field_name']}[$langcode][0]['value'] = $serialized_value;

    // Save the entity.
    field_test_entity_save($entity);

    // Load a fresh copy of the entity.
    // Reset the field cache.
    cache_clear_all('*', 'cache_field', TRUE);
    $entity = field_test_entity_test_load($id);
    $this->assertArraysEqual($entity->{$this->field['field_name']}[$langcode][0]['value'], $serialized_value, 'Value serialized and loaded.');

    // Now save the entity using a form.
    $edit = array(
      "{$this->text_field['field_name']}[$langcode][0][value]" => $value,
    );
    $this->drupalPost('test-entity/manage/' . $id . '/edit', $edit, t('Save'));

    // And load the entity up, again, and make the the value is still there.
    cache_clear_all('*', 'cache_field', TRUE);
    $entity = field_test_entity_test_load($id);
    $this->assertArraysEqual($entity->{$this->field['field_name']}[$langcode][0]['value'], $serialized_value, 'Value serialized and loaded and not lost on forms.');
  }

  /**
   * Test out the namespacing functionality.
   */
  function testDataNamespacing() {

    // Create a field with settings to validate.
    $this->field = array(
      'field_name' => drupal_strtolower($this->randomName()),
      'type' => 'serialized',
      'settings' => array(),
    );
    field_create_field($this->field);
    $this->instance = array(
      'field_name' => $this->field['field_name'],
      'entity_type' => 'test_entity',
      'bundle' => 'test_bundle',
      'widget' => array(
        'type' => 'serialized_hidden',
      ),
      'display' => array(
        'default' => array(
          'type' => 'hidden',
        ),
      ),
      'settings' => array(
        'serialization' => 'serialize',
        'namespace' => TRUE,
      ),
    );
    field_create_instance($this->instance);

    // Create a test entity.
    $stub = field_test_create_stub_entity(NULL, NULL, 'test_bundle');
    field_test_entity_save($stub);
    $id = $stub->ftid;
    $langcode = LANGUAGE_NONE;

    // Now load the entity.
    $entity = field_test_entity_test_load($id);
    // We're going to save some serialized data into our field.
    $serialized_value = array(
      'namespace1' => array(
        $this->randomString() => $this->randomString(),
      ),
    );
    $entity->{$this->field['field_name']}[$langcode][0]['value'] = $serialized_value;

    // Save the entity.
    field_test_entity_save($entity);

    // Load a fresh copy of the entity.
    // Reset the field cache.
    cache_clear_all('*', 'cache_field', TRUE);
    $entity = field_test_entity_test_load($id);
    $this->assertArraysEqual($entity->{$this->field['field_name']}[$langcode][0]['value'], $serialized_value, 'Value serialized and loaded.');

    // Save something into the second namespace, and assert that we didn't wipe out the first.
    $entity = field_test_entity_test_load($id);
    // We're going to save some serialized data into our field.
    $serialized_value += array(
      'namespace2' => array(
        $this->randomString() => $this->randomString(),
      ),
    );
    $entity->{$this->field['field_name']}[$langcode][0]['value'] = array(
      'namespace2' => $serialized_value['namespace2'],
    );

    // Save the entity.
    field_test_entity_save($entity);

    // Load a fresh copy of the entity.
    // Reset the field cache.
    cache_clear_all('*', 'cache_field', TRUE);
    $entity = field_test_entity_test_load($id);
    $this->assertArraysEqual($entity->{$this->field['field_name']}[$langcode][0]['value'], $serialized_value, 'Namespaced value serialized and loaded.');

    // And now remove the first namespace item.
    $entity = field_test_entity_test_load($id);
    $entity->{$this->field['field_name']}[$langcode][0]['value'] = array(
      'namespace1' => NULL,
    );
    field_test_entity_save($entity);
    // Load a fresh copy of the entity.
    // Reset the field cache.
    cache_clear_all('*', 'cache_field', TRUE);
    $entity = field_test_entity_test_load($id);
    $this->assertArraysEqual($entity->{$this->field['field_name']}[$langcode][0]['value'], array('namespace2' => $serialized_value['namespace2']), 'Namespaced value removed.');

  }

  /**
   * Check to see if two arrays are identical.
   *
   * @param $first
   *   The first value to check.
   * @param $second
   *   The second value to check.
   * @param $message
   *   The message to display along with the assertion.
   * @param $group
   *   The type of assertion - examples are "Browser", "PHP".
   * @return
   *   TRUE if the assertion succeeded, FALSE otherwise.
   */
  protected function assertArraysEqual($first, $second, $message = '', $group = 'Other') {
    ksort($first);
    ksort($second);
    return $this->assertIdentical($first, $second, $message, $group);
  }

}
