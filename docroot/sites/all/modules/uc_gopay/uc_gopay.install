<?php

/**
 * Implements hook_requirements().
 */
function uc_gopay_requirements($phase) {
  $requirements = array();
  $t = get_t();

  if (!function_exists('mcrypt_module_open')) {
    $requirements['uc_gopay_mcrypt'] = array(
      'severity' => REQUIREMENT_ERROR,
      'title' => $t("GoPay mcrypt"),
      'description' => $t("GoPay payment methods require PHP <a href='!ext_url'>@extension</a> extension enabled.", array('!ext_url' => 'http://php.net/manual/en/book.mcrypt.php', '@extension' => 'mcrypt')),
    );
  }

  if (!class_exists('SoapClient')) {
    $requirements['uc_gopay_soap'] = array(
      'severity' => REQUIREMENT_ERROR,
      'title' => $t("GoPay SOAP"),
      'description' => $t("GoPay payment methods require PHP <a href='!ext_url'>@extension</a> extension enabled.", array('!ext_url' => 'http://www.php.net/manual/en/book.soap.php', '@extension' => 'SOAP')),
    );
  }

  return $requirements;
}

/**
 * Implements hook_schema().
 */
function uc_gopay_schema() {
  $schema = array();

  $schema['uc_payment_gopay_pn'] = array(
    'description' => 'Logs GoPay Payment Notifications.',
    'fields' => array(
      'order_id' => array(
        'description' => 'The order ID in the eshop.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'session_id' => array(
        'description' => 'The payment session ID from GoPay.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'product_name' => array(
        'description' => 'The product description as saved in the GoPay.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'variable_symbol' => array(
        'description' => 'The variable symbol of the order in the e-shop.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'total_price' => array(
        'description' => 'The total price in cents (x100).',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'session_state' => array(
        'description' => 'The payment state from GoPay.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'result' => array(
        'description' => 'If there was an error in the WS call or not.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'payment_channel' => array(
        'description' => 'The selected payment channel.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'received' => array(
        'description' => 'The PN receipt timestamp.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('session_id'),
    'indexes' => array(
      'order_id' => array('order_id'),
    ),
    'foreign keys' => array(
      'order_id' => array('uc_orders' => 'order_id'),
    ),
  );

  return $schema;
}

/**
 * Implements hook_install().
 */
function uc_gopay_install() {
  $t = get_t();

  db_merge('uc_order_statuses')
    ->key(array('order_status_id' => 'gopay_pending'))
    ->fields(array(
      'title' => t('GoPay pending'),
      'state' => 'payment_received',
      'weight' => 7,
      'locked' => 1,
    ))
    ->execute();
}

/**
 * Implements hook_uninstall().
 */
function uc_gopay_uninstall() {
  db_update('uc_order_statuses')
    ->fields(array('locked' => 0))
    ->condition('order_status_id', 'gopay_pending')
    ->execute();

  db_delete('variable')
    ->condition('name', 'uc_gopay_%', 'LIKE')
    ->execute();
}

/**
 * Reinstall GoPay pending status.
 */
function uc_gopay_update_7001() {
  $t = get_t();

  db_merge('uc_order_statuses')
    ->key(array('order_status_id' => 'gopay_pending'))
    ->fields(array(
      'title' => t('GoPay pending'),
      'state' => 'payment_received',
      'weight' => 7,
      'locked' => 1,
    ))
    ->execute();
}
