<?php

/**
 * @file
 * Integrates checkout.fi's redirected payment service.
 * Author: Juha Niemi (juhaniemi)
 * Maintainer: Olli Erinko (operinko)
 */

/**
 * Implementation of hook_menu().
 */
function uc_checkoutfi_menu() {
  $items['cart/checkoutfi/complete'] = array(
    'title' => 'Order complete',
    'page callback' => 'uc_checkoutfi_complete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['cart/checkoutfi/finalize'] = array(
    'title' => 'Order complete',
    'page callback' => 'uc_checkoutfi_finalize',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['cart/checkoutfi/cancel'] = array(
    'title' => 'Order cancelled',
    'page callback' => 'uc_checkoutfi_cancel',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

function uc_checkoutfi_cancel() {
  $output = t('Payment interrupted or an error occured.');
  return $output;
}

/**
 * Declare job scheduling holding items that need to be run periodically.
 */
function uc_checkoutfi_cron_job_scheduler_info() {
  $schedulers = array();
  $schedulers['uc_checkoutfi_check_payments'] = array(
    'worker callback' => 'uc_checkoutfi_check_payment',
  );
  return $schedulers;
}

/**
 * Job scheduler worker function to check status for each uncomplete order.
 */
function uc_checkoutfi_check_payment($job) {
  // Load the order tied to the job and get our password.
  $order = uc_order_load($job['id']);
  $data = $order->data;
  $private_key = variable_get('uc_checkoutfi_passphrase', 'SAIPPUAKAUPPIAS');
  // Prepare a request.
  $request = array(
    'VERSION' => '0001',
    'STAMP' => $data['STAMP'],
    'REFERENCE' => $data['REFERENCE'],
    'MERCHANT' => variable_get('uc_checkoutfi_merchant_id', 375917),
    'AMOUNT' => ($order->order_total * 100),
    'CURRENCY' => 'EUR',
    'FORMAT' => 1,
    'ALGORITHM' => 1,
  );

  // Generate a hash checksum for all the fields, with our password as "salt".
  $request['MAC'] = drupal_strtoupper(md5(
    $request['VERSION'] . '+' .
    $request['STAMP'] . '+' .
    $request['REFERENCE'] . '+' .
    $request['MERCHANT'] . '+' .
    $request['AMOUNT'] . '+' .
    $request['CURRENCY'] . '+' .
    $request['FORMAT'] . '+' .
    $request['ALGORITHM'] . '+' .
    $private_key));

  // Let's create a post-data string out of the prepared values.
  foreach ($request as $key => $name) {
    $data_string .= $key . "=" . $name . "&";
  }

  // Update job scheduling.
  // Check status once an hour from this on. CHANGE TO 3600 WHEN DONE TESTING!
  $job['period'] = 5;
  JobScheduler::get('uc_checkoutfi_check_payments')->set($job);

  // Build the http request and execute.
  $host = 'https://rpcapi.checkout.fi/poll';
  $http_options = array(
    'method' => 'POST',
    'data' => $data_string,
    'headers' => array('Content-Type' => 'application/x-www-form-urlencoded'),
  );
  $response = drupal_http_request($host, $http_options);

  // Check if we got an error or not.
  if ($response->data != 'error') {
    // Let's convert the response we got into an xml object.
    $response_xml = new SimpleXMLElement(drupal_convert_to_utf8($response->data, 'ISO-8859-1'));
    $status = uc_checkoutfi_check_status($response_xml->status);
    if($status['state'] == 'success'
       OR $status['state'] == 'failure') {
      // Remove the job as unnecessary.
      JobScheduler::get('uc_checkoutfi_check_payments')->remove($job);
    }
    // Save transaction and order if status changed.
    if ($order->order_status != $status['stat']) {
      $stat = $status['stat'];
      uc_order_update_status($order->order_id, $stat);
      uc_order_comment_save($order->order_id, 0, $status['msg'], 'admin');
      if ($status['state'] == 'success') {
        uc_payment_enter($order->order_id, 'uc_checkoutfi', $order->order_total, 0, NULL, $status['msg']);
      }
      // Log status change.
      watchdog('uc_checkoutfi', 'Order status updated in Checkout.fi. Old status: <pre>@existing_transaction</pre> Updated status: <pre>@transaction</pre>', array('@existing_transaction' => print_r($old_status, 1), '@transaction' => print_r($status, 1)), WATCHDOG_INFO);
    }
  }
}

/**
 * Implementation of hook_ucga_display().
 */
function uc_checkoutfi_ucga_display() {
  // Tell UC Google Analytics to display the e-commerce JS on the custom
  // order completion page for this module.
  if (arg(0) == 'cart' && arg(1) == 'uc_checkoutfi' && arg(2) == 'complete') {
    return TRUE;
  }
}

/**
 * Implementation of hook_form_alter().
 */
function uc_checkoutfi_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'uc_cart_checkout_review_form' && ($order_id = intval($_SESSION['cart_order'])) > 0 && empty($form_state['post'])) {
    $order = uc_order_load($order_id);
    if ($order->payment_method == 'uc_checkoutfi') {
      unset($form['#submit']);
      unset($form['actions']['submit']);
      $form['#suffix'] = drupal_render(drupal_get_form('uc_checkoutfi_form', $order));
    }
  }
}

/**
 * Implementation of hook_payment_method().
 */
function uc_checkoutfi_uc_payment_method() {
  $path = base_path() . drupal_get_path('module', 'uc_checkoutfi');
  $title = variable_get('uc_checkoutfi_method_title', t('Online payment (Finnish banks)'));

  $methods[] = array(
    'id' => 'uc_checkoutfi',
    'name' => t('Checkout.fi'),
    'title' => $title,
    'desc' => t('Redirect to checkout.fi to pay by online.'),
    'callback' => 'uc_checkoutfi_payment_method',
    'weight' => 3,
    'checkout' => TRUE,
    'no_gateway' => TRUE,
  );

  return $methods;
}

/**
 * Callback for checkoutfi payment method settings.
 */
function uc_checkoutfi_payment_method($op, &$arg1) {
  switch ($op) {

    case 'settings':
      $form['uc_checkoutfi_merchant_id'] = array(
        '#type' => 'textfield',
        '#title' => t('Merchant account number'),
        '#description' => t('Use <em>375917</em> for testing purposes. Most up to date test account information can be found from the documentation on http://www.checkout.fi website.'),
        '#default_value' => variable_get('uc_checkoutfi_merchant_id', 375917),
        '#size' => 16,
      );
      $form['uc_checkoutfi_passphrase'] = array(
        '#type' => 'textfield',
        '#title' => t('Secret passphrase'),
        '#description' => t('Use <em>SAIPPUAKAUPPIAS</em> for testing purposes. Most up to date test account information can be found from the documentation on http://www.checkout.fi website.'),
        '#default_value' => variable_get('uc_checkoutfi_passphrase', 'SAIPPUAKAUPPIAS'),
      );
      $form['uc_checkoutfi_language'] = array(
        '#type' => 'select',
        '#title' => t('Language preference'),
        '#options' => array(
          'FI' => t('Finnish'),
          'SE' => t('Swedish'),
          'EN' => t('English'),
        ),
        '#default_value' => variable_get('uc_checkoutfi_language', 'FI'),
      );
      return $form;
  }
}

// Form to build the submission to checkout.fi.
function uc_checkoutfi_form() {
  global $base_url;
  $order = uc_order_load($_SESSION['cart_order']);

  // Generate payment message from the products + quantities in order
 	$message = array();
  foreach($order->products as $product) {
    $message[] = $product->qty . ' x ' . $product->title;
  }
	$message = implode("\n", $message);
  $country = uc_get_country_data(array('country_id' => $order->billing_country));
  if ($country === FALSE) {
    $country = array(0 => array('country_iso_code_3' => 'FIN'));
  }

  // Check if Clean URLs are enabled and format our return links accordingly.
  if (!empty($GLOBALS['conf']['clean_url'])) {
    $return['return'] = url('cart/checkoutfi/complete', array('absolute' => TRUE));
    $return['cancel'] = url('cart/checkoutfi/cancel', array('absolute' => TRUE));
    $return['reject'] = url('cart/checkoutfi/cancel', array('absolute' => TRUE));
    $return['delayed'] = url('cart/checkoutfi/complete', array('absolute' => TRUE));
  } else {
    $return['return'] = $base_url . url('cart/checkoutfi/complete');
    $return['cancel'] = $base_url . url('cart/checkoutfi/cancel');
    $return['reject'] = $base_url . url('cart/checkoutfi/cancel');
    $return['delayed'] = $base_url . url('cart/checkoutfi/complete');
  }

  // Generate a unique stamp for orders, based on time modified and order ID.
  $stamp = substr(trim($order->modified) . "A" . substr(trim($order->order_id), -5), -20);
  $data = array(
    'VERSION'  =>  '0001',
    'STAMP' => $stamp,
    'AMOUNT' => round(trim($order->order_total*100),0),
    'REFERENCE' => uc_checkoutfi_reference_count($order->order_id),
    'MESSAGE' => $message,
    'LANGUAGE' => variable_get('uc_checkoutfi_language', 'FI'),
    'MERCHANT' => variable_get('uc_checkoutfi_merchant_id', 375917),
    'RETURN' => $return['return'],
    'CANCEL' => $return['cancel'],
    'REJECT' => $return['reject'],
    'DELAYED' => $return['delayed'],
    'COUNTRY' => trim($country[0]['country_iso_code_3']),
    'CURRENCY' => 'EUR',
    'DEVICE' => 1,
    'CONTENT' => 1,
    'TYPE' => 0,
    'ALGORITHM' => 1,
    'DELIVERY_DATE' => date('Ymd', strtotime('now +30 day')),
    'FIRSTNAME' => $order->delivery_first_name,
    'FAMILYNAME' => $order->delivery_last_name,
    'ADDRESS' => trim($order->delivery_street1 . " " . $order->delivery_street2),
    'POSTCODE' => $order->delivery_postal_code,
    'POSTOFFICE' => $order->delivery_city,
  );
  $data['MAC'] = $data['VERSION'] . '+' .
    $data['STAMP'] . '+' .
    $data['AMOUNT'] . '+' .
    $data['REFERENCE'] . '+' .
    $data['MESSAGE'] . '+' .
    $data['LANGUAGE'] . '+' .
    $data['MERCHANT'] . '+' .
    $data['RETURN'] . '+' .
    $data['CANCEL'] . '+' .
    $data['REJECT'] . '+' .
    $data['DELAYED'] . '+' .
    $data['COUNTRY'] . '+' .
    $data['CURRENCY'] . '+' .
    $data['DEVICE'] . '+' .
    $data['CONTENT'] . '+' .
    $data['TYPE'] . '+' .
    $data['ALGORITHM'] . '+' .
    $data['DELIVERY_DATE'] . '+' .
    $data['FIRSTNAME'] . '+' .
    $data['FAMILYNAME'] . '+' .
    $data['ADDRESS'] . '+' .
    $data['POSTCODE'] . '+' .
    $data['POSTOFFICE'] . '+' .
    variable_get('uc_checkoutfi_passphrase', 'SAIPPUAKAUPPIAS');
  $data['MAC'] = drupal_strtoupper(trim(md5($data['MAC'])));

  $form['#action'] = 'https://payment.checkout.fi/';
  foreach ($data as $name => $value) {
    $form[$name] = array('#type' => 'hidden', '#value' => $value);
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => variable_get('uc_checkoutfi_checkout_button', t('Submit Order')),
  );
  return $form;
}

function uc_checkoutfi_complete() {
  if($_GET['STAMP'] = check_plain($_GET['STAMP'])) {
    $order_id = substr($_GET['STAMP'], strpos($_GET['STAMP'], 'A')+1);
  }
  watchdog('uc_checkoutfi', 'Receiving new order notification for order @order_id.', array('@order_id' => $order_id));
  $payment = uc_checkoutfi_complete_check_vars($_GET);
  $order = uc_order_load($order_id);
  $order->data = $payment;

  if ($order === FALSE || uc_order_status_data($order->order_status, 'state') != 'in_checkout') {
    drupal_set_message(t('An error has occurred during payment. Please contact us to ensure your order has submitted.'), 'error');
    drupal_goto('cart/');
    exit();
  }
  // Save changes to order without it's completion (it will be on finalization step)
  uc_order_save($order);

  if ($payment['state'] == 'success') {
    $comment = t('Paid by Checkout.fi, order #@order. Checkout status: @status', array('@order' => $order_id, '@status' => $payment['msg']));
    uc_order_comment_save($order->order_id, 0, $comment, 'admin');
    uc_payment_enter($order->order_id, 'uc_checkoutfi', $order->order_total, 0, NULL, $comment);
  }
  elseif ($payment['state'] == 'pending') {
    $comment = t('Payment pending at Checkout.fi, order #@order. Checkout status: @status', array('@order' => $order_id, '@status' => $payment['msg']));

    uc_order_comment_save($order->order_id, 0, $comment, 'admin');

    // Don't try to handle delayed payment checking if job_scheduler is missing.
    if(module_exists('job_scheduler')) {
      // Create a scheduled job for each order.
      // It'll be used to check the payment status from Checkout.fi
      // Use period => 5 to check the status as soon as next cron is run.
      $job = array(
        'id' => $order->order_id,
        'type' => 'order',
        'created' => time(),
        'period' => 5,
        'periodic' => TRUE,
        'data' => $order,
      );

      $schedule = JobScheduler::get('uc_checkoutfi_check_payments');
      // Check that the job doesn't exist already.
      if (!$schedule->check($job)) {
        watchdog('uc_checkoutfi', 'New JobScheduler created');
        $schedule->set($job);
      }
      else {
        watchdog('uc_checkoutfi', "Job already exists, don't create another");
      }
    }
    else {
      // If it's missing, someone needs to know we want it.
      drupal_set_message(t('You need to install job_scheduler module to process pending payments'), 'error');
      uc_order_comment_save($order->order_id, 0, t('Payment is pending approval at Checkout.fi.'), 'admin');
    }
  }
  else {
    drupal_set_message(t('Your order will be processed soon.'));
    uc_order_comment_save($order_id, 0, t('Payment is pending approval at Checkout.fi.'), 'admin');
  }

  drupal_goto('cart/checkoutfi/finalize/' . $order->order_id . '/' . $payment['state'] . '/' . $payment['msg']);
}

function uc_checkoutfi_complete_check_vars($get) {
  $return_values = array(
    'VERSION' => check_plain($get['VERSION']),
    'STAMP' => check_plain($get['STAMP']),
    'REFERENCE' => check_plain($get['REFERENCE']),
    'PAYMENT' => check_plain($get['PAYMENT']),
    'STATUS' => check_plain($get['STATUS']),
    'ALGORITHM' => check_plain($get['ALGORITHM']),
    'MAC' => check_plain($get['MAC']),
  );

  // Validate payment status before proceeding
  $status = uc_checkoutfi_check_status($return_values['STATUS']);
  if ($status['state'] != 'success' AND $status['state'] != 'pending') {
    drupal_set_message($status['msg'],'error');
    exit();
  }
  $checksum = drupal_strtoupper(md5($return_values['VERSION'] .'+'. $return_values['STAMP'] .'+'. $return_values['REFERENCE'] .'+'. $return_values['PAYMENT'] .'+'. $return_values['STATUS'] .'+'. $return_values['ALGORITHM'] .'+'. variable_get('uc_checkoutfi_passphrase', 'SAIPPUAKAUPPIAS')));
  if ($checksum == $return_values['MAC']) {
    return $return_values + $status;
  }
  else {
    drupal_set_message(t('Order and payment validation failed.'), 'error');
    exit();
  }
  return $return_values + $status;
}

function uc_checkoutfi_check_status($status) {
  switch($status) {
    case -10:
      // Payment refunded to client.
      $state = 'failure';
      $st = 'canceled';
      $msg = t('Payment refunded to client');
      break;

    case -4:
      // Payment not found.
      $state = 'failure';
      $st = 'abandoned';
      $msg = t('Payment not found');
      break;

    case -3:
      // Payment timed out.
      $state = 'failure';
      $st = 'abandoned';
      $msg = t('Payment timed out');
      break;

    case -2:
      // Cancelled by system.
      $state = 'failure';
      $st = 'canceled';
      $msg = t('Cancelled by system');
      break;

    case -1:
      // Cancelled by client.
      $state = 'failure';
      $st = 'canceled';
      $msg = t('Cancelled by client');
      break;

    case 1:
      // Payment not finished.
      $state = 'pending';
      $st = 'pending';
      $msg = t('Payment not finished');
      break;

    case 2:
      // Payment accepted.
      $state = 'success';
      $st = 'payment_received';
      $msg = t('Payment accepted');
      break;

    case 3:
      // Payment pending.
      $state = 'pending';
      $st = 'pending';
      $msg = t('Payment pending');
      break;

    case 4:
      // Reserved for future, pending.
      $state = 'pending';
      $st = 'pending';
      $msg = t('Payment pending');
      break;

    case 5:
      // Reserved for future, success.
      $state = 'success';
      $st = 'payment_received';
      $msg = t('Payment accepted');
      break;

    case 6:
      // Payment frozen, accept it.
      $state = 'success';
      $st = 'payment_received';
      $msg = t('Payment frozen, accepted');
      break;

    case 7:
      // Third party accepted, waiting for client confirmation.
      $state = 'pending';
      $st = 'processing';
      $msg = t('Third party accepted, waiting for client confirmation');
      break;

    case 8:
      // Third party accepted and client has been charged.
      $state = 'success';
      $st = 'payment_received';
      $msg = t('Payment accepted');
      break;

    case 9:
      // Reserved for future, accepted.
      $state = 'success';
      $st = 'payment_received';
      $msg = t('Payment accepted');
      break;

    case 10:
      // Order paid to merchant.
      $state = 'success';
      $st = 'payment_received';
      $msg = t('Order paid to merchant.');
      break;

    default:
      // Catch-all failure
      $state = 'failure';
      $st = 'canceled';
      $msg = t('Unknown status');
      break;
  }
  return array(
    'state' => $state,
    'stat' => $st,
    'msg' => $msg,
  );
}

function uc_checkoutfi_finalize($order_id = NULL, $status, $message) {
  $order = uc_order_load($order_id);
  // Add a comment to let sales team know this came in through the site.
  if ($status == 'success') {
    $comment = $message;
    $status = 'payment_received';
  }
  if ($status == 'pending') {
    $comment = $message;
    $status = 'pending';
  }
  if ($status == 'failure') {
    $comment = $message;
    $status = 'canceled';
  }
  uc_order_comment_save($order->order_id, 0, $comment, 'admin');
  if ($status) {
    uc_order_update_status($order->order_id, $status);
  }
  $output = uc_cart_complete_sale($order, variable_get('uc_new_customer_login', FALSE));
  $page = variable_get('uc_cart_checkout_complete_page', '');
  if (!empty($page)) {
    drupal_goto($page);
  }
  return $output;
}

/**
 * Generate a reference number for each payment based on order_id
 */
function uc_checkoutfi_reference_count($order_id) {
  $tmpMultip = array(7, 3, 1);
  $tmpStr = (string) $order_id;
  $tmpSum = 0;
  $tmpIndex = 0;
  for ($i = strlen($tmpStr) - 1; $i >= 0; $i--) {
    $tmpSum += intval(substr($tmpStr, $i, 1)) * intval($tmpMultip[$tmpIndex % 3]);
    $tmpIndex++;
  }
  $nextTen = ceil(intval($tmpSum) / 10) * 10;
  return $tmpStr . (string) (abs($nextTen-$tmpSum));
}
