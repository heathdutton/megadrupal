<?php

/**
 * @file
 * General functions for the cvent_signup module.
 */

/**
 * Get Cvent sessions from an event code.
 */
function cvent_signup_get_sessions($event_code) {
  $filters = array(array(
      'field' => 'EventCode',
      'value' => $event_code,
      'operator' => 'Contains',
  ));

  $cvents = cvent_search_retrieve('Event', $filters);
  $cvent = $cvents[0];
  foreach ($cvent->ProductDetail as $ProductDetail) {
    $options[$ProductDetail->ProductId] = $ProductDetail->ProductName;
  }
  return $options;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Inject the Cvent configurations into the Signup admin form.
 */
function cvent_signup_form_signup_node_settings_form_alter(&$form, &$form_state) {
  $node = $form['#node'];
  $cvent = (object) $node->cvent_signup;

  $form['cvent_signup'] = array(
    '#type' => 'fieldset',
    '#title' => t('Cvent settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#weight' => -10,
    '#tree' => TRUE,
  );

  $form['cvent_signup']['event_code'] = array(
    '#type' => 'textfield',
    '#title' => t('Event code'),
    '#default_value' => $cvent->event_code,
    '#size' => 16,
  );

  $form['cvent_signup']['session_id'] = array(
    '#type' => 'select',
    '#title' => t('Session ID'),
    '#default_value' => $cvent->session_id,
    '#prefix' => '<div id="cvent-sessions">',
    '#suffix' => '</div>',
    '#description' => 'Click "Get session IDs" to get a list of sessions to choose from."',
  );

  if ($form_state['clicked_button']['#id'] != 'edit-cvent-signup-populate-session-ids') {
    // Populate possible options if this isn't ahah. Without this check we'll
    // end up with "illegal choice" errors.
    if ($cvent->session_id) {
      $options = array($cvent->session_id => $cvent->session_title);
    }
    else {
      $options = array('- none -');
    }

    $form['cvent_signup']['session_id']['#options'] = $options;
  }

  $form['cvent_signup']['populate_session_ids'] = array(
    '#type' => 'button',
    '#value' => 'Get session IDs',
    '#ajax' => array(
      'callback' => 'cvent_populate_session_ids',
      'wrapper' => 'cvent-sessions',
    ),
    '#suffix' => '<br/>',
    '#limit_validation_errors' => array(),
  );

  $form['cvent_signup']['weblink_detail_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Event URL'),
    '#default_value' => $cvent->weblink_detail_url,
    '#description' => 'Leave blank to retrieve a new URL',
    '#size' => 32,
  );


  $form['cvent_signup']['sync_end'] = array(
    '#type' => 'textfield',
    '#size' => 4,
    '#title' => t('Sync until'),
    '#default_value' => $cvent->sync_end,
    '#prefix' => '<div class="container-inline">' /* . t('Sync until') */,
    '#suffix' => t('days after event start date') . '</div>',
  );

  $form['#validate'][] = 'cvent_signup_node_settings_form_validate';

  $form['#submit'][] = 'cvent_signup_node_settings_form_submit';
}

/**
 * AJAX callback to handle populating the available sessions.
 */
function cvent_populate_session_ids($form, $form_state) {
  // Get Cvent sessions and populate selectbox.
  $event_code = $form_state['values']['cvent_signup']['event_code'];
  $cvent_form = $form['cvent_signup']['session_id'];
  $options = array('' => '- none -');
  if ($event_code) {
    $session_ids = cvent_signup_get_sessions($event_code);
    if ($session_ids) {
      $options += $session_ids;
      $cvent_form['#options'] = $options;
      return $cvent_form;
    }
  }

  // Failed.
  return $cvent_form;
}

/**
 * Validate the signup settings form to ensure a session is selected if an event
 * code is entered.
 */
function cvent_signup_node_settings_form_validate(&$form, $form_state) {
  if ($form_state['values']['cvent_signup']['event_code'] && !$form_state['values']['cvent_signup']['session_id']) {
    form_set_error('session_id', 'You must select a session.');
  }
}

/**
 * Submit handler for signup_node_settings_form.
 *
 * @see cvent_signup_form_signup_node_settings_form_alter()
 */
function cvent_signup_node_settings_form_submit($form, $form_state) {
  $node = $form['#node'];

  $op = isset($form_state['values']['op']) ? $form_state['values']['op'] : '';
  if ($op == t('Reset to defaults')) {
    // Reset to site-wide defaults.
    // @todo consider sitewide defaults. For now just delete the entry above.
  }
  else {
    // Populate $values from $form_state.
    $sql = 'select 1 from {cvent_signup} cs where nid = %d';
    $keys = db_query($sql, $node->nid)->fetchField() ? array('nid') : array();
    $record = array_merge(array('nid' => $node->nid), $form_state['values']['cvent_signup']);
    $sessions = cvent_signup_get_sessions($form_state['values']['cvent_signup']['event_code']);
    $record['session_title'] = $sessions[$record['session_id']];
    if (!$form_state['values']['cvent_signup']['weblink_detail_url']) {
      $record['weblink_detail_url'] = cvent_signup_get_weblink_detail_url($form_state['values']['cvent_signup']['event_code']);
    }
    drupal_write_record('cvent_signup', $record, $keys);
  }
}

/**
 * Implements hook_node_view().
 *
 * Put the web detail URL on the node.
 */
function cvent_signup_node_view($node, $view_mode = 'full') {
  if (isset($node->nid) && isset($node->signup)) {
    $node->content['cvent_signup_weblink_detail_url'] = array(
      '#title' => t('Cvent weblink detail URL'),
      '#value' => $node->cvent_signup->weblink_detail_url, // node_prepare() already ran check_markup()
      '#weight' => 0,
    );
  }
}

/**
 * Implements hook_node_load().
 *
 * Attach Cvent data to the node.
 */
function cvent_signup_node_load($nodes, $types) {
  foreach ($nodes as $node) {
    if ($result = db_query("SELECT * FROM {cvent_signup} WHERE nid = :nid", array(':nid' => $node->nid))) {
      $node->cvent_signup = $result->fetch();
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function cvent_signup_node_delete($node) {
  db_delete('cvent_signup')
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * Implements hook_content_extra_fields().
 */
function cvent_field_extra_fields($type) {
  $extras = array();

  foreach ($types as $type) {
    $extras['node'][$type]['display']['cvent_signup_weblink_detail_url'] = array(
      'label' => t('Cvent weblink detail URL'),
      'description' => t('Cvent weblink detail URL'),
      'weight' => 0,
    );
  }

  return $extras;
}

/**
 * Helper function to get the Cvent Event WeblinkDetail URL.
 */
function cvent_signup_get_weblink_detail_url($event_code) {
  // Get an array of object IDs that meet the search parameters supplied.
  $search = new stdClass();
  $search->ObjectType = 'Event';
  $search->CvSearchObject->SearchType = 'AndSearch';
  $search->CvSearchObject->Filter[] = array(
    'Field' => 'EventCode',
    'Operator' => 'Equals',
    'Value' => $event_code,
  );
  $event_response = cvent_call_search($search);

  // Retrieve the array of Event CvObjects.
  $events = cvent_retrieve('Event', $event_response->SearchResult->Id);

  // The url looks like http://www.cvent.com/d/4cq9l6/1J. We want everything but the last bit.
  // @todo not sure how to find the homepage yet.
  $url = $events->RetrieveResult->CvObject[0]->WeblinkDetail[0]->URL;
  $parts = explode('/', $url);
  array_pop($parts);
  $url = implode('/', $parts);
  return $url;
}

/**
 * Main wrapper function to import Cvent registration data into Signup.
 *
 * @param array $nodes
 *   An array of non-fullly-loaded node objects, as returned by the query in
 *   cvent_signup_cron(). This avoids node-load until absolutely necessary.
 *
 */
function cvent_signup_import_registrations(array $nodes) {
  // Get Cvent Registration CvObjects.
  foreach ($nodes as $node) {
    // The node object is not yet fully loaded, but as returned by hook_cron().
    $event_codes[$node->nid] = $node->event_code;
    $session_ids[$node->session_id] = $node->nid;
  }
  $registrations = cvent_signup_get_registrations($event_codes);

  // Loop over all registrations to the Cvent Event.
  if (!empty($registrations)) {
    foreach ($registrations as $registration) {
      // Now loop through each session of the registration.
      foreach ($registration->OrderDetail as $orderDetail) {
        // Find the node that matched this ProductId (session ID).
        $nid = $session_ids[$orderDetail->ProductId];
        $node = $nodes[$nid];

        if ($node) {
          // Set relevant Registration data variables.
          $mail = $registration->EmailAddress;
          $attended = isset($orderDetail->Participant) ? $orderDetail->Participant : $registration->Participant;
          // Ensure the anon or authenticated user is signed up.
          if ($sid = cvent_signup_ensure_signup($node, $mail)) {
            // Set attendance.
            cvent_signup_set_attendance($sid, $attended);
          }
        }
      }
    }
  }
}

/**
 * Helper function to handle returned Cvent data.
 *
 * @param array $event_codes
 *   An array of Registration CvObject EventCodes.
 *
 * @return array
 *   An array of Registration CvObjects.
 *
 * @see 3.7 in the Cvent SOAP API documentation:
 * http://www.mediaworksinc.net/uploads/resources/1-api_version_v200611_phaseii_05042007.pdf
 */
function cvent_signup_get_registrations(array $event_codes) {
  $registrations = array();

  if (empty($event_codes)) {
    return array();
  }

  $event_codes = array_unique($event_codes);

  // Search for multiple EventCodes
  $getEventIds = new stdClass;
  $getEventIds->ObjectType = 'Event';
  $getEventIds->CvSearchObject = new stdClass();
  $getEventIds->CvSearchObject->SearchType = 'OrSearch';
  foreach ($event_codes as $event_code) {
    $getEventIds->CvSearchObject->Filter[] = array(
      'Field' => 'EventCode',
      'Operator' => 'Equals',
      'Value' => $event_code,
    );
  }
  $event_ids = cvent_call_search($getEventIds);
  if ($event_ids) {

    // We have the event IDs, so search for the invitees
    $getEvents->ObjectType = 'Invitee';
    $getEvents->CvSearchObject->SearchType = 'OrSearch';
    foreach ($event_ids->SearchResult->Id as $event_id) {
      $getEvents->CvSearchObject->Filter[] = array(
        'Field' => 'EventId',
        'Operator' => 'Equals',
        'Value' => $event_id,
      );
    }
    $registrants = cvent_call_search($getEvents);

    // Now we have the invitee IDs, get their actual registration. Batch for
    // limitations of the Cvent API. @todo is this process generic enough to move
    // into cvent_retrieve() for all types of objects?
    //
  // Found the limit to be 200 objects.
    if ($registrants->SearchResult) {
      $registrations = array();
      foreach ($registrants->SearchResult->Id as $id) {
        $batch[] = $id;

        if (count($batch) == 200) {
          $response = cvent_retrieve('Registration', $batch);
          $registrations = array_merge($registrations, $response->RetrieveResult->CvObject);
          $batch = array();
        }
      }

      // Finish up rest.
      if ($batch) {
        $response = cvent_retrieve('Registration', $batch);
        $registrations = array_merge($registrations, $response->RetrieveResult->CvObject);
      }
    }
  }

  return $registrations;
}

/**
 * Helper function to ensure that an anon or authenticated email is signed up.
 *
 * @param object $node
 *   The node object.
 * @param string $mail
 *   The anon or authenticated email to ensure signup.
 *
 * @return
 *   The signup sid or FALSE.
 */
function cvent_signup_ensure_signup($node, $mail) {
  // Begin the signup form array.
  $signup_form = array();
  $signup_form['nid'] = $node->nid;
  $signup_form['signup_form_data'] = array();

  // Check whether the user is anonymous or registered.
  if (db_query("SELECT COUNT(*) FROM {users} WHERE mail like :mail", array(':mail' => $mail))->fetchField()) {
    // The email address entered belongs to a registered user. Load the user.
    $account = array_shift(user_load_multiple(array(), array('mail' => $mail)));
    // Check if the user is already signed up.
    if ($signup = db_query('SELECT * FROM {signup_log} WHERE nid = :nid AND uid = :uid', array(':nid' => $node->nid, ':uid' => $account->uid))->fetch()) {
      $sid = $signup->sid;
    }
    else {
      $signup_form['uid'] = $account->uid;
    }
  }
  else {
    // Load Signup validation functions.
    module_load_include('inc', 'signup', 'includes/signup_form');

    // First check if the anon user is already signed up.
    if ($signup = db_query("SELECT * FROM {signup_log} WHERE anon_mail = :anon_mail AND nid = :nid", array(':anon_mail' => $mail, ':nid' => $node->nid))->fetch()) {
      $sid = $signup->sid;
    }
    elseif (signup_validate_anon_email($node->nid, $mail)) {
      // The mail has validated, the user is anonymous, and ready for signup.
      $signup_form['signup_anon_mail'] = $mail;
    }
    else {
      // The anon mail didn't validate for reasons other than already signed up.
      return FALSE;
    }
  }

  // Attempt to sign up the user, if not already signed up.
  if (isset($signup_form['uid']) || isset($signup_form['signup_anon_mail'])) {
    // We can't use signup_sign_up_user() because it returns
    // drupal_access_denied() if $signup->status is 0. Not very helpful as an
    // API call.
    $sid = cvent_signup_sign_up_user($signup_form, FALSE);
  }

  return $sid;
}

/**
 * Almost lieral clone of signup_sign_up_user(), except:
 * - Strip out $notify_user (we will not want to notify users here)
 * - Strip out $reset_node_load (we don't call signup_open_signup() or anything
 *   else that static caches the node object).
 * - Don't check for duplicates, because we want to do that for both anonymous
 *   and authenticated users before we get here.
 * - Return FALSE rather than signup_sign_up_user() (his makes our function more
 *   compatible as an API call).
 */
function cvent_signup_sign_up_user($signup_form) {
  $node = node_load($signup_form['nid']);
  $account = $signup_form['uid'];

  if ($node->signup_status) {
    // Signup is open so we can use signup's function.
    signup_sign_up_user(array(
      'nid' => $node->nid,
      'uid' => $account->uid,
      ), FALSE);
  }
  else {
    // The signup was closed. Do it silently. We can't use
    // signup_sign_up_user() because this would result in a
    // drupal_access_denied() call.
    $signup = new stdClass();
    $signup->nid = $node->nid;
    $signup->uid = $account->uid;
    $signup->signup_time = REQUEST_TIME;
    $signup->form_data = array();
    $signup->count_towards_limit = 1;
    signup_save_signup($signup);
  }
}

/**
 * Helper function to set attendance.
 */
function cvent_signup_set_attendance($sid, $attended) {
  // If user is successfully signed up, set attendance.
  if (isset($sid)) {
    $signup = signup_load_signup($sid);
    if ($attended) {
      signup_mark_attended_action($signup);
    }
  }
}

/**
 * Implements hook_cron().
 */
function cvent_signup_cron() {
  $type_registrations_sql = array();
  foreach (signup_content_types() as $type) {
    // Don't bother supporting the Drupal Event module.
    // @see _signup_get_node_type_scheduler()
    if (module_exists('date')) {
      $date_field = variable_get('signup_date_field_' . $type, 0);
      if (!empty($date_field) && $date_field != 'none') {
        $type_sql = _cvent_signup_date_import_registrations_sql($type);
      }
    }
    if (!empty($type_sql)) {
      $type_registrations_sql[$type] = $type_sql;
    }
  }
  if (empty($type_registrations_sql)) {
    // No node types are configured for signup dates, so bail out now.
    return;
  }

  $registrations_common_sql = array(
    'primary' => '{node} n',
    'fields' => array('n.title', 'n.nid', 'cs.event_code', 'cs.sync_end', 'cs.session_id'),
    'where' => array("n.type = :type"),
    'joins' => array('INNER JOIN {cvent_signup} cs ON cs.nid = n.nid'),
  );

  foreach ($type_registrations_sql as $type => $registrations_sql) {
    $sql = _signup_build_query($registrations_common_sql, $registrations_sql);
    $result = db_query($sql, array(':type' => $type));

    // Loop over each node within the configured dates and sync_end settings.
    while ($node = $result->fetch()) {
      // Build the list of nodes included in Cvent registration import check.
      $nodes[$node->nid] = $node;
    }
    if (!empty($nodes)) {
      // Import Cvent registration data into multiple Signups.
      cvent_signup_import_registrations($nodes);
    }
  }
}

/**
 * @return Array of SQL clauses for cron Cvent registrations query builder.
 *
 * @see _signup_date_reminder_sql()
 */
function _cvent_signup_date_import_registrations_sql($content_type) {
  // Get the date field information for this content type.
  $field = signup_date_field($content_type);
  $start_field = $field['field_name'] . '_value';

  // Figure out what TZ we want to do the date comparisons in.
  $compare_tz = $field['settings']['tz_handling'] == 'none' ? date_default_timezone() : 'UTC';
  // Get a DateAPI SQL handler class for this field.
  $handler = date_field_get_sql_handler($field, $compare_tz);

  // Find the current time in the appropriate TZ for this field.
  $now_date = date_now($compare_tz);
  // Need to enclose this in ' marks to use directly in the SQL.
  $now = "'" . date_format($now_date, DATE_FORMAT_DATETIME) . "'";

  // Extract the correct SQL to represent the start time.
  $start_time = $handler->sql_field($start_field);

  // Create SQL to represent the time we should start stop synching Cvent
  // registrations, based on the SQL for the start time and the sync_end field.
  $sync_end = $handler->sql_date_math($start_time, 'ADD', 'cs.sync_end*86500', 'SECOND');

  // The WHERE clauses are now trivial: We want to make sure the current time
  // is before the time we should stop synching Cvent registrations.
  $where = array(
    "$now <= $sync_end",
  );

  // See what fields to SELECT.
  $fields[] = $start_field;
  if (isset($field['columns']['timezone'])) {
    $fields[] = $field['field_name'] . '_timezone';
  }
  $table = '{' . $field['database']['table'] . '}';
  return array(
    'fields' => $fields,
    'joins' => array("INNER JOIN $table ON $table.revision_id = n.vid"),
    'where' => $where,
  );
}
