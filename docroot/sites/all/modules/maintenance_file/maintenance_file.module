<?php

/**
 * @file
 * Put the site in maintenance mode with a file.
 *
 * Not much to say, really. It's a pretty simple module that checks for the
 * presence of a file called 'maintenance.lock' in either the Drupal root
 * directory or a site-specific directory (sites/mysite.com, for instance).
 * This is very helpful for using in deployment scripts, such as
 * Capistrano and the like.
 */

/**
 * Implementation of hook_boot().
 */
function maintenance_file_boot() {

  /**
   * Possible places where the maintenance file can be.
   * The more specific one takes precedence.
   * (i.e. a message set in sites/default/maintenance.lock will be displayed
   * rather than a message in maintenance.lock if both are set.)
   */
  $possible_files = array(
    'maintenance.lock',
    conf_path() . '/maintenance.lock',
  );

  // Running through each file.
  foreach ($possible_files as $f) {
    if (file_exists($f)) {
      $file = $f;
    }
  }

  if (isset($file)) {
    // If our file exists, put site in MM.
    _set_site_offline($file);
  } else {
    // If it doesn't, remove from MM.
    _set_site_online();
  }
  
}

/**
 * Puts the site in maintenance mode.
 */
function _set_site_offline($file) {

  variable_set('maintenance_mode', 1);
  variable_set('offline_set_by_file', 1);

  // Check to see if the file has stuff in it.
  // If it does, set that stuff as the site offline message.
  $message = _process_maintenance_file($file);
  if ($message) {
    variable_set('maintenance_mode_message', $message);
  }

}

/**
 * Setting the site back to online.
 */
function _set_site_online() {
  if (variable_get('offline_set_by_file', 0)) {
    variable_del('maintenance_mode');
    variable_del('offline_set_by_file');
  }
}

/**
 * Checking out the contents of our maintenance file.
 */
function _process_maintenance_file($file) {
  $contents = '';
  $handle = fopen($file, 'r');
  while (!feof($handle)) {
     $contents .= fgets($handle);
  }
  fclose($handle);
  return $contents;
}
