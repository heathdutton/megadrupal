<?php
/**
 * @file
 * Bot factoid search functions.
 */

/**
 * Implements hook_help().
 */
function bot_factoid_search_help($path, $arg) {
  $return = NULL;
  switch ($path) {
    case 'irc:features':
      $return = array(t('Search factoids'));
      break;

    case 'irc:features#botfactoid_search':
      $return = t('Search for factoids via "factoid search-string"');
      break;

  }
  return $return;
}

/**
 * Listen for conversation directed at, or about, the bot.
 *
 * @param stdObj $data
 *   The regular $data object prepared by the IRC library.
 * @param boolean $from_query
 *   Boolean; whether this was a queried request.
 */
function bot_factoid_search_irc_msg_channel($data, $from_query = FALSE) {

  $substitutions = array('!who' => $data->nick, '!channel' => $data->channel);
  $to = $from_query ? $data->nick : $data->channel;
  $addressed = bot_name_regexp();

  // Looking for factoids?
  if (preg_match("/^($addressed)?factoid(\s+)(.*)/i", $data->message, $matches)) {
    $response = bot_factoid_search($matches[4]);
    bot_message($to, $response, $substitutions);
  }
}

/**
 * Query the factoid table and return factoids names.
 *
 * Does a LIKE select on factoid names (so wildcards work!) and returns at
 * most 10 matches to the requester.
 *
 * @param string $string
 *   A search string to be passed to the select query.
 */
function bot_factoid_search($string) {
  $string = trim($string);

  if (strlen($string) < 3) {
    return t('Yeah, no. I only look for three or more characters.');
  }

  // Build the query.
  $query = db_select('bot_factoid', 'f')
    ->fields('f', array('subject'))
    ->range(0, 10);

  // Use an OR to look through both the factoid subject and statement.
  $or = db_or();
  $or->condition('f.subject', '%' . db_like($string) .'%', 'LIKE');
  $or->condition('f.statement', '%' . db_like($string) .'%', 'LIKE');

  // Run the query and get the results;
  $results = $query->condition($or)->execute()->fetchAll();

  // Early returns if no results.
  if (empty($results)) {
    return t('Woe, nothing matches "!string".', array('!string' => $string));
  }

  $factoids = array();
  foreach ($results as $result) {
    $factoids[] = $result->subject;
  }

  // Make a pretty list WITHOUT an Oxford comma, because hate.
  if (count($factoids) > 1) {
    $last = t(' and "!last"', array('!last' => array_shift($factoids)));
  }
  else {
    $last = '';
  }

  return t('Looking for "!string" I found: "!list"!last', array(
    '!string' => $string,
    '!results' => implode('", "', $factoids),
    '!last' => $last,
  ));
}
