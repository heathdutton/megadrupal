<?php
/**
 * @file
 * Hooks and global functions.
 */

use Drupal\aws_glacier\Entity\Job\Job;
use Drupal\aws_glacier\Entity\Vault\Vault;
use Drupal\aws_glacier\Entity\Archive\Archive;

/**
 * @var string
 * Main admin path.
 */
define('AWS_GLACIER_ADMIN_PATH', 'admin/config/aws/glacier');

/**
* Implements hook_entity_info_alter().
*/
function aws_glacier_ui_entity_info_alter(&$entity_info) {

  $entity_info['glacier_vault']['views controller class'] = '\Drupal\\aws_glacier_ui\\EntityViewsController';
  $entity_info['glacier_vault']['bundles']['glacier_vault'] = array(
    'label' => 'Vault',
    'admin' => array(
      'path' => AWS_GLACIER_ADMIN_PATH . '/vaults',
    ),
  );
  $entity_info['glacier_vault']['admin ui'] = array(
    'path' => AWS_GLACIER_ADMIN_PATH . '/vaults',
    'controller class' => '\Drupal\aws_glacier_ui\Entity\GlacierEntityContentUIController',
    'file' => 'includes/glacier_entity.admin.inc',
    'file path' => drupal_get_path('module', 'aws_glacier_ui'),
  );
  $entity_info['glacier_vault']['extra fields controller class'] = 'EntityDefaultExtraFieldsController';

  $entity_info['glacier_job']['bundles']['glacier_job'] = array(
    'label' => 'Job',
    'admin' => array(
      'path' => AWS_GLACIER_ADMIN_PATH . '/jobs',
    ),
  );
  $entity_info['glacier_job']['admin ui'] = array(
    'path' => AWS_GLACIER_ADMIN_PATH . '/jobs',
    'controller class' => '\Drupal\aws_glacier_ui\Entity\GlacierEntityContentUIController',
    'file' => 'includes/glacier_entity.admin.inc',
    'file path' => drupal_get_path('module', 'aws_glacier_ui'),
  );
  $entity_info['glacier_job']['extra fields controller class'] = 'EntityDefaultExtraFieldsController';

  $entity_info['glacier_archive']['views controller class'] = '\Drupal\\aws_glacier_ui\\EntityViewsController';
  $entity_info['glacier_archive']['bundles']['glacier_archive'] = array(
    'label' => 'Archive',
    'admin' => array(
      'path' => AWS_GLACIER_ADMIN_PATH . '/archives',
    ),
  );
  $entity_info['glacier_archive']['admin ui'] = array(
    'path' => AWS_GLACIER_ADMIN_PATH . '/archives',
    'controller class' => '\Drupal\aws_glacier_ui\Entity\GlacierEntityContentUIController',
    'file' => 'includes/glacier_entity.admin.inc',
    'file path' => drupal_get_path('module', 'aws_glacier_ui'),
  );
  $entity_info['glacier_archive']['extra fields controller class'] = 'EntityDefaultExtraFieldsController';
}

/**
 * Implements hook_views_api().
 */
function aws_glacier_ui_views_api() {
  return array("api" => "3.0");
}

/**
 * Implements hook_menu().
 */
function aws_glacier_ui_menu() {
  $items[AWS_GLACIER_ADMIN_PATH] = array(
    'title' => 'Amazon glacier',
    'description' => 'Administer vaults, jobs, archives etc.',
    'position' => 'right',
    'access arguments' => array('access administration pages'),
    'page callback' => 'system_admin_menu_block_page',
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items[AWS_GLACIER_ADMIN_PATH . '/vaults/manage'] = array(
    'title' => 'Vaults',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items[AWS_GLACIER_ADMIN_PATH . '/vaults/import'] = array(
    'title' => 'Import',
    'description' => 'Import existing vaults',
    'access arguments' => array(\Drupal\aws_glacier\Entity\Vault\Vault::$permission),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('aws_glacier_vault_import_form'),
    'file' => 'includes/glacier_entity.admin.inc',
    'type' => MENU_LOCAL_ACTION,
  );
  $items[AWS_GLACIER_ADMIN_PATH . '/jobs/manage'] = array(
    'title' => 'Jobs',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items[AWS_GLACIER_ADMIN_PATH . '/jobs/inventory/%glacier_vault/create'] = array(
    'title' => 'Inventory',
    'description' => 'Initiate inventory',
    'access arguments' => array(\Drupal\aws_glacier\Entity\Job\Job::$permission),
    'page callback' => 'aws_glacier_vault_initiate_inventory',
    'page arguments' => array(count(explode('/', AWS_GLACIER_ADMIN_PATH)) + 2),
    'type' => MENU_CALLBACK,
  );
  $items[AWS_GLACIER_ADMIN_PATH . '/jobs/%glacier_job/bulkdelete'] = array(
    'title' => 'Bulk delete',
    'description' => 'Deletes all archives inside this vault.',
    'access arguments' => array(\Drupal\aws_glacier\Entity\Job\Job::$permission),
    'page callback' => 'aws_glacier_vault_bulk_delete',
    'page arguments' => array(count(explode('/', AWS_GLACIER_ADMIN_PATH)) + 1),
    'type' => MENU_CALLBACK,
  );
  $items[AWS_GLACIER_ADMIN_PATH . '/jobs/%glacier_job/status'] = array(
    'title' => 'Status',
    'description' => 'Status request',
    'access arguments' => array(\Drupal\aws_glacier\Entity\Job\Job::$permission),
    'page callback' => 'aws_glacier_job_status',
    'page arguments' => array(count(explode('/', AWS_GLACIER_ADMIN_PATH)) + 1),
    'type' => MENU_CALLBACK,
  );
  $items[AWS_GLACIER_ADMIN_PATH . '/jobs/archive/%glacier_archive/create'] = array(
    'title' => 'Archive retrieval',
    'description' => 'Initiate archive retrieval',
    'access arguments' => array(\Drupal\aws_glacier\Entity\Job\Job::$permission),
    'page callback' => 'aws_glacier_archive_retrieval',
    'page arguments' => array(count(explode('/', AWS_GLACIER_ADMIN_PATH)) + 2),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Finish callback for the vault batch import.
 *
 * @see \Drupal\aws_glacier\Entity\Vault\batchImport()
 *
 */
function aws_glacier_ui_vault_import_finished($success, $results) {
  if ($success) {
    $message = format_plural(count($results), 'One vault imported.', '@count vaults imported.');
  }
  else {
    $message = t('Finished with an error.');
  }
  drupal_set_message($message);
}

/**
 * Page callback to initiate a inventory for a vault.
 *
 * @param \Drupal\aws_glacier\Entity\Vault\Vault $vault
 *
 * @return string
 */
function aws_glacier_vault_initiate_inventory(Vault $vault) {
  /** @var Job $job */
  $job = entity_create('glacier_job', array('vaultName' => $vault->VaultName, 'Type' => 'inventory-retrieval'));
  try{
    $job->save();
    drupal_set_message('Initiated inventory.');
  }
  catch(\Exception $e) {
    drupal_set_message($e->getMessage(), 'error');
  }
  $destination = drupal_get_destination();
  drupal_goto($destination['destination']);
  return '';
}

/**
 * Page callback to request the job status for a vault inventory
 * or archive retrieval.
 *
 * @param \Drupal\aws_glacier\Entity\Job\Job $job
 *
 * @return string
 */
function aws_glacier_job_status(Job $job) {
  try{
    $job->save();
    Vault::refresh($job->vaultName);
    drupal_set_message('Status updated.');
  }
  catch(\Exception $e) {
    drupal_set_message($e->getMessage(), 'error');
  }
  $destination = drupal_get_destination();
  drupal_goto($destination['destination']);
  return '';
}

/**
 * Page callback to start a restore of a file/archive.
 *
 * @param \Drupal\aws_glacier\Entity\Archive\Archive $archive
 *
 * @return string
 */
function aws_glacier_archive_retrieval(Archive $archive) {
  /** @var Job $job */
  $job = entity_create('glacier_job', array(
    'vaultName' => $archive->vaultName,
    'ArchiveId' => $archive->archiveId,
    'Type' => 'archive-retrieval',
  ));
  try{
    $job->save();
    drupal_set_message('Archive retrieval requested.');
  }
  catch(\Exception $e) {
    drupal_set_message($e->getMessage(), 'error');
  }
  $destination = drupal_get_destination();
  drupal_goto($destination['destination']);
  return '';
}

use Drupal\aws_glacier\Entity\Job\GetOutput;
use Guzzle\Http\EntityBody;

/**
 * Page callback to delete all archive of the vault.
 *
 * @param \Drupal\aws_glacier\Entity\Job\Job $job
 *
 * @return string
 */
function aws_glacier_vault_bulk_delete(Job $job) {
  $output = new GetOutput();
  $job->presave();
  try {
    $data = $output->setJob($job)->run()->getData();
  }
  catch (\Exception $e) {
    drupal_set_message($e->getMessage(), 'error');
    $destination = drupal_get_destination();
    drupal_goto($destination['destination']);
    return '';
  }
  $list = array();
  if (!empty($data['body']) && ($body = $data['body']) && $body instanceof EntityBody) {
    $json = json_decode($body->__toString());
    $list = $json->ArchiveList;
  }
  foreach ($list as $item) {
    /** @var Archive $archive */
    $archive = entity_create('glacier_archive', array('archiveId' => $item->ArchiveId, 'vaultName' => $job->vaultName));
    $archive->delete();
  }
  $destination = drupal_get_destination();
  drupal_goto($destination['destination']);
  return '';
}
