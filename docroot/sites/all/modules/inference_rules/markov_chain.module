<?php
// $Id$

function markov_chain_init() {
  markov_chain_load('adfasdf');
}

/**
 * CTools stuff.
 */

/**
 * Implementation of hook_ctools_plugin_api().
 */
function markov_chain_ctools_plugin_api($owner, $api) {
  if ($owner == 'markov_chain' && $api == 'markov_chain') {
    return array('version' => 1);
  }
}

/**
* Implementation of hook_ctools_plugin_directory().
*/
function markov_chain_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && $plugin == 'export_ui') {
    return $plugin;
  }
}

/**
* Load one chain or all.
*
* @param $name
*   This chains name value. Optional.
* @return
*   If $name is specified, an array of options for the specific chain.
*   If not, a nested array containing options for all chains.
*/
function markov_chain_load_settings($id = NULL) {

  // Use Ctools export API to fetch all presets from the DB as well as code.
  ctools_include('export');
  if ($id) {
    $chains = ctools_export_load_object('markov_chain', 'names', array($id));
    return isset($chains[$id]) ? $chains[$id] : NULL;
  }
  else {
    return ctools_export_load_object('markov_chain');
  }
}

function markov_chain_load($id) {
  $chain_settings = markov_chain_load_settings($id);
  $chain = new MarkovChain($chain_settings->settings['context']);
  $chain->set_range($chain_settings->settings['size_low'], $chain_settings->settings['size_high']);

  if ($chain_settings->settings['persist']) {
    $chain->set_table($chain_settings->chain);
  }

  else if (isset($chain_settings->settings['view'])) {
    $chain->load_from_view($chain_settings->settings['view'] && $chain_settings->settings['field']);
  }
  return $chain;
}

/**
* Delete a chain.
*
* @param $chain
*   A chain object, or a chains's id value.
*/
function markov_chain_delete($chain) {
  ctools_include('export');
  ctools_export_crud_delete('markov_chain', $id);

  // Clear the Ctools export API cache.
  ctools_export_load_object_reset('markov_chain');
}
