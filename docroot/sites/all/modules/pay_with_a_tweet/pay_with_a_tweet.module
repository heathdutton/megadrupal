<?php

/**
 * @file
 * Main file for the Pay with a Tweet module.
 *
 * The Pay with a Tweet module allows visitors to download files after allowing
 * website posts a tweet on his Twitter account.
 *
 * @defgroup pay_with_a_tweet Pay with a Tweet
 * @ingroup pay_with_a_tweet
 */

define('PAY_WITH_A_TWEET', 'pay-with-a-tweet');
define('PAY_WITH_A_TWEET_BLOCK_SHORTCUTS', 'pay-with-a-tweet-');

/**
 * Implements hook_permission().
 */
function pay_with_a_tweet_permission() {
  return array(
    'administer pay_with_a_tweet' => array(
      'title' => t('Administer Pay With a Tweet'),
      'restrict access' => TRUE,
    ),
    'view pay_with_a_tweet' => array(
      'title' => t('View Pay With a Tweet'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function pay_with_a_tweet_menu() {

  $items['admin/pay_with_a_tweet'] = array(
    'title' => 'Pay With a Tweet',
    'description' => 'Manage Pay With a Tweet structure',
    'page callback' => 'pay_with_a_tweet_info',
    'access arguments' => array('administer pay_with_a_tweet'),
    'file' => 'pay_with_a_tweet.admin.inc',
  );

  $items['admin/pay_with_a_tweet/manage'] = array(
    'title' => 'Manage',
    'description' => 'Manage pay with a tweet.',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/pay_with_a_tweet/config'] = array(
    'title' => 'Config',
    'description' => 'Manage pay with a tweet.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pay_with_a_tweet_config_form'),
    'access arguments' => array('administer pay_with_a_tweet'),
    'file' => 'pay_with_a_tweet.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/pay_with_a_tweet/add'] = array(
    'title' => 'new button',
    'page callback' => 'pay_with_a_tweet_add',
    'access arguments' => array('administer pay_with_a_tweet'),
    'file' => 'pay_with_a_tweet.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/pay_with_a_tweet/%pay_with_a_tweet/edit'] = array(
    'title' => 'edit button',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pay_with_a_tweet_form', 2),
    'access arguments' => array('administer pay_with_a_tweet'),
    'file' => 'pay_with_a_tweet.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/pay_with_a_tweet/%pay_with_a_tweet/delete'] = array(
    'title' => 'delete button',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pay_with_a_tweet_delete_form', 2),
    'access arguments' => array('administer pay_with_a_tweet'),
    'file' => 'pay_with_a_tweet.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['pay_with_a_tweet/%pay_with_a_tweet'] = array(
    'title' => 'Pay with a tweet to download',
    'page callback' => 'pay_with_a_tweet_twitter_connect',
    'page arguments' => array(1),
    'access arguments' => array('view pay_with_a_tweet'),
    'file' => 'pay_with_a_tweet.page.inc',
    'type' => MENU_CALLBACK,
  );

  $items['pay_with_a_tweet/%pay_with_a_tweet/callback'] = array(
    'title' => 'Twitter callback',
    'type' => MENU_CALLBACK,
    'page callback' => 'pay_with_a_tweet_twitter_callback',
    'page arguments' => array(1),
    'access arguments' => array('view pay_with_a_tweet'),
    'file' => 'pay_with_a_tweet.page.inc',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function pay_with_a_tweet_theme($existing, $type, $theme, $path) {
  return array(
    'pay_with_a_tweet_button' => array(
      'path' => $path . '/theme',
      'template' => 'pay-with-a-tweet-button',
      'variables' => array('pay_with_a_tweet' => NULL, 'configuration' => NULL),
    ),
    'pay_with_a_tweet_token' => array(
      'path' => $path . '/theme',
      'template' => 'pay-with-a-tweet-token',
      'variables' => array('pay_with_a_tweet' => NULL),
    ),
  );
}

/**
 * Implements hook_entity_info().
 */
function pay_with_a_tweet_entity_info() {
  $pay_with_a_tweet_info['pay_with_a_tweet'] = array(
    'label' => t('Pay with a Tweet Download'),
    'controller class' => 'DrupalDefaultEntityController',
    'base table' => 'pay_with_a_tweet',
    'uri callback' => 'pay_with_a_tweet_uri',
    'fieldable' => FALSE,
    // @TODO Change to TRUE to enable extra field support
    'entity keys' => array(
      'id' => 'pid',
    ),
    'static cache' => TRUE,
    'bundles' => array(
      'pay_with_a_tweet' => array(
        'label' => 'PayWithATweet',
        'admin' => array(
          'path' => 'admin/pay_with_a_tweet/manage',
          'access arguments' => array('administer pay with a tweet buttons'),
        ),
      ),
    ),
    'view modes' => array(
      'full' => array(
        'label' => t('Full PayWithATweet'),
        'custom settings' => FALSE,
      ),
    ),
  );

  return $pay_with_a_tweet_info;
}

/**
 * Delete pay_with_a_tweet entity.
 *
 * @param object $pay_with_a_tweet
 *   pay_with_a_tweet entity to be deleted
 * 
 * @return bool
 *   true if the entity saved or false instead
 */
function pay_with_a_tweet_delete($pay_with_a_tweet) {
  if (!empty($pay_with_a_tweet) && is_object($pay_with_a_tweet) && isset($pay_with_a_tweet->pid) && !empty($pay_with_a_tweet->pid)) {
    $transaction = db_transaction();

    try {
      module_invoke_all('pay_with_a_tweet_delete', $pay_with_a_tweet);
      // @TODO future support to extra fields.
      field_attach_delete('pay_with_a_tweet', $pay_with_a_tweet);

      db_delete('pay_with_a_tweet')
        ->condition('pid', $pay_with_a_tweet->pid, '=')
        ->execute();
    }
    catch (Exception $e) {
      $return = FALSE;
      $transaction->rollback();
      watchdog_exception('pay_with_a_tweet', $e);
      throw $e;
    }

    entity_get_controller('pay_with_a_tweet')->resetCache();
    $return = TRUE;
  }
  else {
    $return = FALSE;
  }
  return $return;
}

/**
 * Implements hook_field_extra_fields().
 * 
 * @TODO support to extra fields
 */
function pay_with_a_tweet_field_extra_fields() {
  $return = array();
  $return['pay_with_a_tweet']['pay_with_a_tweet'] = array(
    'form' => array(
      'note' => array(
        'label' => t('Note'),
        'description' => t('PostIt Note'),
      ),
    ),
  );

  return $return;
}

/**
 * Load a pay_with_a_tweet entity from the database.
 *
 * @param int $pid
 *   The pay_with_a_tweet ID.
 * @param bool $reset
 *   Whether to reset the pay_with_a_tweet_load_multiple cache.
 *
 * @return object
 *   A fully-populated pay_with_a_tweet object, or FALSE if the node is not
 *   found.
 */
function pay_with_a_tweet_load($pid = NULL, $reset = FALSE) {
  $pids = (isset($pid) ? array($pid) : array());
  $pay_with_a_tweet = pay_with_a_tweet_load_multiple($pids, $reset);
  return $pay_with_a_tweet ? reset($pay_with_a_tweet) : FALSE;
}

/**
 * Load pay_with_a_tweet entities from the database.
 *
 * This function should be used whenever you need to load more than one
 * pay_with_a_tweet from the database. pay_with_a_tweet are loaded into memory
 * and will not require database access if loaded again during the same page
 * request.
 *
 * @see entity_load()
 * 
 * @param array $pids
 *   An array of pay_with_a_tweet IDs
 * @param array $conditions
 *   (deprecated) An associative array of conditions on the {node}
 *   table, where the keys are the database fields and the values are the
 *   values those fields must have. Instead, it is preferable to use
 *   EntityFieldQuery to retrieve a list of entity IDs loadable by
 *   this function.
 * @param bool $reset
 *   Whether to reset the internal pay_with_a_tweet_load cache.
 *
 * @return array
 *   pay_with_a_tweet objects indexed by pid.
 *
 * @todo Remove $conditions in Drupal 8.
 */
function pay_with_a_tweet_load_multiple($pids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('pay_with_a_tweet', $pids, $conditions, $reset);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function pay_with_a_tweet_preprocess_pay_with_a_tweet_button(&$variables) {

  $variables['configuration']->text = check_plain($variables['configuration']->text);

  if (!empty($variables['pay_with_a_tweet']->image)) {
    $variables['pay_with_a_tweet']->file_image = file_load($variables['pay_with_a_tweet']->image);
    $variables['pay_with_a_tweet']->file_image->html = theme('image', array(
        'path' => $variables['pay_with_a_tweet']->file_image->uri,
        'attributes' => array('style' => 'max-width:100%')));
  }
  else {
    $variables['pay_with_a_tweet']->file_image->html = t('Pay with a Tweet and download "%title"', array('%title' => $variables['pay_with_a_tweet']->title));
  }

  $l_array = array(
    'html' => TRUE,
    'attributes' => array('target' => '_blank'),
  );

  $variables['pay_with_a_tweet']->file_download = file_load($variables['pay_with_a_tweet']->download);
  $variables['pay_with_a_tweet']->file_download->safe_uri = 'pay_with_a_tweet/' . $variables['pay_with_a_tweet']->pid;
  $variables['pay_with_a_tweet']->html = l($variables['pay_with_a_tweet']->file_image->html, $variables['pay_with_a_tweet']->file_download->safe_uri, $l_array);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function pay_with_a_tweet_preprocess_pay_with_a_tweet_token(&$variables) {

  if (!empty($variables['pay_with_a_tweet']->image)) {
    $variables['pay_with_a_tweet']->file_image = file_load($variables['pay_with_a_tweet']->image);
    $variables['pay_with_a_tweet']->file_image->html = theme('image', array(
        'path' => $variables['pay_with_a_tweet']->file_image->uri,
        'attributes' => array('style' => 'max-width:100%')));
  }
  else {
    $variables['pay_with_a_tweet']->file_image->html = t('Pay with a Tweet and download "%title"', array('%title' => $variables['pay_with_a_tweet']->title));
  }

  $l_array = array(
    'html' => TRUE,
    'attributes' => array('target' => '_blank'),
  );

  $variables['pay_with_a_tweet']->file_download = file_load($variables['pay_with_a_tweet']->download);
  $variables['pay_with_a_tweet']->file_download->safe_uri = 'pay_with_a_tweet/' . $variables['pay_with_a_tweet']->pid;
  $variables['pay_with_a_tweet']->html = l($variables['pay_with_a_tweet']->file_image->html, $variables['pay_with_a_tweet']->file_download->safe_uri, $l_array);
}

/**
 * Save pay_with_a_tweet entity.
 *
 * @param object $pay_with_a_tweet
 *   pay_with_a_tweet entity to be saved
 * 
 * @return object
 *   pay_with_a_tweet entity saved
 */
function pay_with_a_tweet_save($pay_with_a_tweet) {
  if (empty($pay_with_a_tweet->pid)) {
    drupal_write_record('pay_with_a_tweet', $pay_with_a_tweet);
  }
  else {
    drupal_write_record('pay_with_a_tweet', $pay_with_a_tweet, 'pid');
    entity_get_controller('pay_with_a_tweet')->resetCache();
  }

  /* @TODO future support to extra fields */
  field_attach_insert('pay_with_a_tweet', $pay_with_a_tweet);
  module_invoke_all('pay_with_a_tweet_insert', $pay_with_a_tweet);
  return $pay_with_a_tweet;
}

/**
 * Get all the pay_with_a_tweet buttons.
 *
 * @return array
 *   pay_with_a_tweet PIDs
 */
function pay_with_a_tweet_get_all() {
  return db_query('SELECT pid, title FROM {pay_with_a_tweet}')->fetchAllAssoc('pid');
}

/**
 * Private function to get the default pay_with_a_tweet configuration.
 * 
 * @return array
 *   the default pay_with_a_tweet configuration
 */
function _pay_with_a_tweet_config() {
  $return = array(
    'blocks' => 1,
    'own_blocks' => 1,
    'blocks-config' => array(),
    'consumer_key' => NULL,
    'consumer_secret' => NULL,
  );

  return $return;
}

/**
 * Private function to get the default pay_with_a_tweet blocks configuration.
 * 
 * @param int $pid
 *   PID of a pay_with_a_tweet entity
 *  
 * @return array
 *   the default pay_with_a_tweet blocks configuration
 */
function _pay_with_a_tweet_block_config($pid = NULL) {
  $return = array(
    'pid' => $pid,
    'show' => 0,
    'text' => NULL,
  );

  return $return;
}

/**
 * Implements hook_block_info().
 */
function pay_with_a_tweet_block_info() {
  $block = array();

  $settings = variable_get(PAY_WITH_A_TWEET, _pay_with_a_tweet_config());

  if ($settings['own_blocks']) {
    $entities = pay_with_a_tweet_get_all();
    if (is_array($entities)) {
      foreach ($entities as $entity) {
        $block[PAY_WITH_A_TWEET_BLOCK_SHORTCUTS . 'own-' . $entity->pid]['info'] = t('Pay with a tweet - !title', array('!title' => $entity->title));
        $block[PAY_WITH_A_TWEET_BLOCK_SHORTCUTS . 'own-' . $entity->pid]['cache'] = DRUPAL_CACHE_GLOBAL;
      }
    }
  }

  for ($i = 0; $i < $settings['blocks']; $i++) {
    $block[PAY_WITH_A_TWEET_BLOCK_SHORTCUTS . $i]['info'] = t('Pay with a tweet - block') . ' ' . $i;
    $block[PAY_WITH_A_TWEET_BLOCK_SHORTCUTS . $i]['cache'] = DRUPAL_CACHE_GLOBAL;
  }

  return $block;
}

/**
 * Implements hook_block_configure().
 */
function pay_with_a_tweet_block_configure($delta = '') {
  $form = array();
  if (preg_match('#^' . PAY_WITH_A_TWEET_BLOCK_SHORTCUTS . 'own-([\d]+)$#', $delta)) {

    $settings = variable_get(PAY_WITH_A_TWEET, _pay_with_a_tweet_config());
    $item = 'own-' . intval(preg_replace('#^' . PAY_WITH_A_TWEET_BLOCK_SHORTCUTS . 'own-([\d]+)$#', '$1', $delta));

    $form['pay_with_a_tweet']['pay_with_a_tweet_show'] = array(
      '#type' => 'select',
      '#title' => t('Show the text'),
      '#options' => array('0' => t('After button'), '1' => t('Before button')),
      '#default_value' => isset($settings['blocks-config'][$item]['show']) ? $settings['blocks-config'][$item]['show'] : '0',
    );

    $form['pay_with_a_tweet']['pay_with_a_tweet_text'] = array(
      '#type' => 'textarea',
      '#title' => t('Extra info to show in the block'),
      '#default_value' => isset($settings['blocks-config'][$item]['text']) ? $settings['blocks-config'][$item]['text'] : '',
    );
  }
  elseif (preg_match('#^' . PAY_WITH_A_TWEET_BLOCK_SHORTCUTS . '([\d]+)$#', $delta)) {

    $item = intval(preg_replace('#^' . PAY_WITH_A_TWEET_BLOCK_SHORTCUTS . '([\d]+)$#', '$1', $delta));
    $settings = variable_get(PAY_WITH_A_TWEET, _pay_with_a_tweet_config());

    $entities = pay_with_a_tweet_get_all();
    $options = array();
    if (is_array($entities)) {
      foreach ($entities as $value) {
        $options[$value->pid] = $value->title;
      }
    }
    $form['pay_with_a_tweet']['pay_with_a_tweet_pid'] = array(
      '#type' => 'select',
      '#title' => t('Select the button to show'),
      '#options' => $options,
      '#default_value' => isset($settings['blocks-config'][$item]['pid']) ? $settings['blocks-config'][$item]['pid'] : '',
    );

    $form['pay_with_a_tweet']['pay_with_a_tweet_show'] = array(
      '#type' => 'select',
      '#title' => t('Show the text'),
      '#options' => array('0' => t('After button'), '1' => t('Before button')),
      '#default_value' => isset($settings['blocks-config'][$item]['show']) ? $settings['blocks-config'][$item]['show'] : '0',
    );

    $form['pay_with_a_tweet']['pay_with_a_tweet_text'] = array(
      '#type' => 'textarea',
      '#title' => t('Extra info to show in the block'),
      '#default_value' => isset($settings['blocks-config'][$item]['text']) ? $settings['blocks-config'][$item]['text'] : '',
    );
  }
  return $form;
}

/**
 * Implements hook_block_save().
 */
function pay_with_a_tweet_block_save($delta = '', $edit = array()) {

  if (preg_match('#^' . PAY_WITH_A_TWEET_BLOCK_SHORTCUTS . 'own-([\d]+)$#', $delta)) {

    $pid = intval(preg_replace('#^' . PAY_WITH_A_TWEET_BLOCK_SHORTCUTS . 'own-([\d]+)$#', '$1', $delta));
    $item = 'own-' . $pid;
    $settings = variable_get(PAY_WITH_A_TWEET, _pay_with_a_tweet_config());
    $new_settings = $settings;

    $new_settings['blocks-config'][$item] = array(
      'pid' => $pid,
      'text' => $edit['pay_with_a_tweet_text'],
      'show' => $edit['pay_with_a_tweet_show'],
    );

    variable_set(PAY_WITH_A_TWEET, array_merge($settings, $new_settings));
  }
  elseif (preg_match('#^' . PAY_WITH_A_TWEET_BLOCK_SHORTCUTS . '([\d]+)$#', $delta)) {

    $item = intval(preg_replace('#^' . PAY_WITH_A_TWEET_BLOCK_SHORTCUTS . '([\d]+)$#', '$1', $delta));
    $settings = variable_get(PAY_WITH_A_TWEET, _pay_with_a_tweet_config());
    $new_settings = $settings;

    $new_settings['blocks-config'][$item] = array(
      'pid' => intval($edit['pay_with_a_tweet_pid']),
      'text' => $edit['pay_with_a_tweet_text'],
      'show' => $edit['pay_with_a_tweet_show'],
    );

    variable_set(PAY_WITH_A_TWEET, array_merge($settings, $new_settings));
  }
}

/**
 * Implements hook_block_view().
 */
function pay_with_a_tweet_block_view($delta = '') {
  $block = array();
  $view = FALSE;
  $pid = FALSE;

  if (preg_match('#^' . PAY_WITH_A_TWEET_BLOCK_SHORTCUTS . 'own-([\d]+)$#', $delta)) {
    $pid = intval(preg_replace('#^' . PAY_WITH_A_TWEET_BLOCK_SHORTCUTS . 'own-([\d]+)$#', '$1', $delta));
    $item = 'own-' . $pid;

    $settings = variable_get(PAY_WITH_A_TWEET, _pay_with_a_tweet_config());
    $config = isset($settings['blocks-config'][$item]) ? $settings['blocks-config'][$item] : _pay_with_a_tweet_block_config($pid);
    $view = TRUE;
  }
  elseif (preg_match('#^' . PAY_WITH_A_TWEET_BLOCK_SHORTCUTS . '([\d]+)$#', $delta)) {

    $item = intval(preg_replace('#^' . PAY_WITH_A_TWEET_BLOCK_SHORTCUTS . '([\d]+)$#', '$1', $delta));

    $settings = variable_get(PAY_WITH_A_TWEET, _pay_with_a_tweet_config());
    $config = isset($settings['blocks-config'][$item]) ? $settings['blocks-config'][$item] : _pay_with_a_tweet_block_config($item);
    $pid = !empty($config) ? $config['pid'] : FALSE;
    $view = TRUE;
  }

  if ($view && $pid) {
    $pay_with_a_tweet = pay_with_a_tweet_load($pid);

    if (!empty($pay_with_a_tweet)) {
      $css_to_load = NULL;
      $path = drupal_get_path('module', 'pay_with_a_tweet');
      $path_to_theme = path_to_theme();

      $path_css = array();
      $path_css[] = $path_to_theme . '/pay_with_a_tweet.css';
      $path_css[] = $path . '/css/blocks.css';

      foreach ($path_css as $value) {
        if (file_exists($value)) {
          $css_to_load = $value;
          break;
        }
      }
      drupal_add_css($css_to_load, 'screen');

      $block['content'] = theme('pay_with_a_tweet_button', array('pay_with_a_tweet' => $pay_with_a_tweet, 'configuration' => (object) $config));
    }
  }
  return $block;
}

/**
 * Implements hook_token_info().
 */
function pay_with_a_tweet_token_info() {
  $types['pay_with_a_tweet'] = array(
    'name' => t("Pay with a Tweet Tokens"),
    'description' => t("Tokens for Pay with a Tweet buttons."),
  );

  $pay_with_a_tweet['pid'] = array(
    'name' => t("Button"),
    'description' => t("Put the pid instead ? to show the Pay with a tweet button."),
    'dynamic' => TRUE,
  );

  return array(
    'types' => $types,
    'tokens' => array(
      'pay_with_a_tweet' => $pay_with_a_tweet,
    ),
  );
}

/**
 * Implements hook_tokens(). 
 */
function pay_with_a_tweet_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  if ($type == 'pay_with_a_tweet') {
    $dynamic_tokens = token_find_with_prefix($tokens, 'pid');
    foreach ($dynamic_tokens as $pid => $original) {
      $replacements[$original] = pay_with_a_tweet_token_render($pid);
    }
  }
  return $replacements;
}

/**
 * Token HTML result.
 *
 * @param int $pid
 *   pid to load pay_with_a_tweet entity.
 * 
 * @return string
 *   HTML to print of the pay_with_a_tweet entity.
 */
function pay_with_a_tweet_token_render($pid) {
  $pay_with_a_tweet = pay_with_a_tweet_load($pid);

  return theme('pay_with_a_tweet_token', array('pay_with_a_tweet' => $pay_with_a_tweet));
}
