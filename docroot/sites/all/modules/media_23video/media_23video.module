<?php

/**
 * @file
 * Main module hooks.
 */


/**
 * Implements hook_media_internet_providers().
 */
function media_23video_media_internet_providers() {
  $info['MediaInternet23VideoHandler'] = array(
    'title' => t('23Video'),
  );

  return $info;
}

/**
 * Implements hook_file_mimetype_mapping_alter().
 *
 * Regster the video/23video mimetype.
 */
function media_23video_file_mimetype_mapping_alter(&$mapping) {
  $mapping['mimetypes'][] = 'video/23video';
}

/**
 * Implements hook_ctools_plugin_api().
 */
function media_23video_ctools_plugin_api($owner, $api) {
  static $api_versions = array(
    'file_entity' => array(
      'file_default_displays' => 1,
    ),
  );
  if (isset($api_versions[$owner][$api])) {
    return array('version' => $api_versions[$owner][$api]);
  }
}

/**
 * Implements hook_stream_wrappers().
 */
function media_23video_stream_wrappers() {
  return array(
    '23video' => array(
      'name' => t('23Video'),
      'class' => 'Media23VideoStreamWrapper',
      'description' => t('Videos provided by 23Video.'),
      'type' => STREAM_WRAPPERS_READ_VISIBLE,
    ),
  );
}

/**
 * Implements hook_file_formatter_info().
 */
function media_23video_file_formatter_info() {
  $formatters['media_23video_video'] = array(
    'label' => t('23Video'),
    'file types' => array('video'),
    'default settings' => array(
      'width' => 480,
      'height' => 270,
      'autoplay' => 0,
    ),
    'view callback' => 'media_23video_file_formatter_video_view',
    'settings callback' => 'media_23video_file_formatter_video_settings',
  );

  $formatters['media_23video_image'] = array(
    'label' => t('23Video Preview Image'),
    'file types' => array('video'),
    'default settings' => array(
      'image_style' => '',
    ),
    'view callback' => 'media_23video_file_formatter_image_view',
    'settings callback' => 'media_23video_file_formatter_image_settings',
  );
  return $formatters;
}

/**
 * Implements hook_file_formatter_FORMATTER_view().
 */
function media_23video_file_formatter_video_view($file, $display, $langcode) {
  $scheme = file_uri_scheme($file->uri);
  if ($scheme != '23video') {
    return;
  }

  $uri_target = file_uri_target($file->uri);
  $video_id = arg(1, $uri_target);
  $source = arg(3, $uri_target);

  $video_handler = new MediaInternet23VideoHandler("http://{$source}/video/{$video_id}");
  $settings = array(
    'maxheight' => isset($file->override['height']) ? $file->override['height'] : $display['settings']['height'],
    'maxwidth' => isset($file->override['width']) ? $file->override['width'] : $display['settings']['width'],
    'autoplay' => isset($file->override['autoplay']) ? $file->override['autoplay'] : $display['settings']['autoplay'],
  );

  $info = $video_handler->getOEmbed($settings);
  if (empty($info)) {
    return;
  }

  $element = array(
    '#markup' => $info['html'],
  );
  return $element;
}

/**
 * Implements hook_file_formatter_FORMATTER_settings().
 */
function media_23video_file_formatter_video_settings($form, &$form_state, $settings) {
  $element = array();

  $element['width'] = array(
    '#title' => t('Width'),
    '#type' => 'textfield',
    '#default_value' => $settings['width'],
  );
  $element['height'] = array(
    '#title' => t('Height'),
    '#type' => 'textfield',
    '#default_value' => $settings['height'],
  );

  $element['autoplay'] = array(
    '#title' => t('Autoplay'),
    '#type' => 'checkbox',
    '#default_value' => $settings['autoplay'],
  );
  return $element;
}

/**
 * Implements hook_file_formatter_FORMATTER_view().
 */
function media_23video_file_formatter_image_view($file, $display, $langcode) {
  $scheme = file_uri_scheme($file->uri);
  if ($scheme == '23video') {
    $wrapper = file_stream_wrapper_get_instance_by_uri($file->uri);
    $image_style = $display['settings']['image_style'];
    $valid_image_styles = image_style_options(FALSE);

    if (empty($image_style) || !isset($valid_image_styles[$image_style])) {
      $element = array(
        '#theme' => 'image',
        '#path' => $wrapper->getOriginalThumbnailPath(),
        '#alt' => isset($file->override['attributes']['alt']) ? $file->override['attributes']['alt'] : $file->filename,
      );
    }
    else {
      $element = array(
        '#theme' => 'image_style',
        '#style_name' => $image_style,
        '#path' => $wrapper->getLocalThumbnailPath(),
        '#alt' => isset($file->override['attributes']['alt']) ? $file->override['attributes']['alt'] : $file->filename,
      );
    }

    return $element;
  }
}

/**
 * Implements hook_file_formatter_FORMATTER_settings().
 */
function media_23video_file_formatter_image_settings($form, &$form_state, $settings) {
  $element = array();
  $element['image_style'] = array(
    '#title' => t('Image style'),
    '#type' => 'select',
    '#options' => image_style_options(FALSE),
    '#default_value' => $settings['image_style'],
    '#empty_option' => t('None (original image)'),
  );
  return $element;
}

/**
 * Implements hook_media_parse().
 *
 * @todo This hook should be deprecated. Refactor Media module to not call it
 *   any more, since media_internet should be able to automatically route to the
 *   appropriate handler.
 */
function media_23video_media_parse($embed_code) {
  $handler = new MediaInternet23VideoHandler($embed_code);
  return $handler->parse($embed_code);
}
