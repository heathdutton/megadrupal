<?php
/**
 * @file
 * Provides an integration for the JQScribble library for Drupal.
 */

/*
 * Constants for the scribble title callback.
 */
define('SCRIBBLE_TITLE_SLIDESHOW', 'slideshow');
define('SCRIBBLE_TITLE_IMAGE_LIST', 'image_list');
define('SCRIBBLE_TITLE_REMOVE_IMAGE', 'remove_image');

/**
 * Implements hook_menu().
 */
function scribble_menu() {
  $items['scribble/%scribble'] = array(
    'title callback' => 'scribble_page_title',
    'title arguments' => array(1),
    'page callback' => 'scribble_blackboard_page',
    'page arguments' => array(1),
    'access arguments' => array('access scribbles'),
    'file' => 'scribble.pages.inc',
  );
  $items['scribble/%scribble/scribble'] = array(
    'title' => 'Scribble',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  $items['scribble/%scribble/slideshow'] = array(
    'title' => 'Slideshows',
    'page callback' => 'scribble_snapshot_slideshow_page',
    'page arguments' => array(1, 'scribble_image'),
    'access arguments' => array('view scribble slideshows'),
    'file' => 'scribble.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
  );
  $items['scribble/%scribble/slideshow/images'] = array(
    'title' => 'Merged images',
    'page callback' => 'scribble_snapshot_slideshow_page',
    'page arguments' => array(1, 'scribble_image'),
    'access arguments' => array('view scribble slideshows'),
    'file' => 'scribble.pages.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 5,
  );
  $items['scribble/%scribble/slideshow/snapshots'] = array(
    'title' => 'Snapshots',
    'page callback' => 'scribble_snapshot_slideshow_page',
    'page arguments' => array(1, 'scribble_image_snapshots'),
    'access arguments' => array('view scribble slideshows'),
    'file' => 'scribble.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 6,
  );
  $items['scribble/%scribble/manage-images'] = array(
    'title' => 'Manage Images',
    'page callback' => 'scribble_image_list_page',
    'page arguments' => array(1),
    'access arguments' => array('administer scribbles'),
    'file' => 'scribble.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );
  $items['scribble/%scribble/download'] = array(
    'title' => 'Download Images',
    'page callback' => 'scribble_get_images_archive',
    'page arguments' => array(1),
    'access arguments' => array('download scribble images'),
    'file' => 'scribble.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 15,
  );
  $items['scribble/save'] = array(
    'page callback' => 'scribble_save_ajax',
    'access arguments' => array('access scribbles'),
    'file' => 'scribble.pages.inc',
  );
  $items['scribble/add'] = array(
    'page callback' => 'scribble_add_ajax',
    'access arguments' => array('access scribbles'),
    'file' => 'scribble.pages.inc',
  );
  $items['admin/config/media/scribble/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('scribble_configuration_form'),
    'access arguments' => array('administer scribbles'),
    'file' => 'scribble.pages.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/media/scribble/%scribble/manage-images'] = array(
    'title callback' => 'scribble_page_title',
    'title arguments' => array(4, SCRIBBLE_TITLE_IMAGE_LIST),
    'page callback' => 'scribble_image_list_page',
    'page arguments' => array(4),
    'access arguments' => array('administer scribbles'),
    'file' => 'scribble.pages.inc',
  );
  $items['admin/config/media/scribble/%scribble/remove-image/%'] = array(
    'title callback' => 'scribble_page_title',
    'title arguments' => array(4, SCRIBBLE_TITLE_REMOVE_IMAGE),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('scribble_remove_image_form', 4, 6),
    'access arguments' => array('administer scribbles'),
    'file' => 'scribble.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_library().
 */
function scribble_library() {
  $settings = array(
    'scribble' => array(
      'bgImagePath' => url(
        variable_get('scribble_files_directory', 'sites/default/files/scribble'),
        array(
          'absolute' => TRUE,
          // This is required in order to get a url without language prefix.
          'language' => (object) array('language' => FALSE),
        )
      ),
      'saveURL' => url('scribble/save', array('absolute' => TRUE)),
      'addURL' => url('scribble/add', array('absolute' => TRUE)),
      'confirm' => array(
        'save' => variable_get('scribble_save_prompt', TRUE),
        'inject' => variable_get('scribble_inject_prompt', TRUE),
      ),
    ),
  );
  $libraries['jqscribble'] = array(
    'title' => t('JQScribble'),
    'website' => 'https://github.com/jimdoescode/jqScribble',
    'version' => '1.0',
    'js' => array(
      libraries_get_path('jqscribble') . '/jquery.jqscribble.js' => array(
        'type' => 'file',
      ),
      libraries_get_path('jqscribble') . '/jqscribble.extrabrushes.js' => array(
        'type' => 'file',
      ),
      drupal_get_path('module', 'scribble') . '/scribble.js' => array(
        'type' => 'file',
        'weight' => 999,
      ),
      libraries_get_path('colorpicker') . '/js/colorpicker.js' => array(
        'type' => 'file',
      ),
      array(
        'type' => 'setting',
        'data' => $settings,
      ),
    ),
    'css' => array(
      drupal_get_path('module', 'scribble') . '/theme/css/scribble.css' => array(
        'type' => 'file',
        'media' => 'screen',
      ),
      libraries_get_path('colorpicker') . '/css/colorpicker.css' => array(
        'type' => 'file',
        'media' => 'screen',
      ),
    ),
    'dependencies' => array(
      // Require some jQuery UI libraries.
      array('system', 'ui.draggable'),
      array('system', 'ui.slider'),
      array('system', 'ui.button'),
      array('system', 'ui.dialog'),
      array('system', 'ui.tabs'),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_image_default_styles().
 *
 * Adding default image styles.
 */
function scribble_image_default_styles() {
  return array(
    'scribble_uploaded_image_style' => array(
      'label' => 'Scribble uploaded image display',
      'effects' => array(
        array(
          'name' => 'image_scale',
          'data' => array('width' => 100, 'height' => NULL, 'upscale' => 0),
          'weight' => 0,
        ),
      ),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function scribble_theme($existing, $type, $theme, $path) {
  $path = drupal_get_path('module', 'scribble') . '/theme/';
  $theme_include = drupal_get_path('module', 'scribble') . '/theme/scribble.theme.inc';
  $base = array(
    'path' => $path,
    'file' => 'scribble.theme.inc',
  );
  return array(
    'scribble_blackboard' => array(
      'render element' => 'form',
    ) + $base,
    'scribble_slideshow' => array(
      'variables' => array('scribble' => NULL,'slideshow' => ''),
    ) + $base,
    'scribble_brush_buttons' => array(
      'variables' => array('brushes' => array()),
    ) + $base,
  );
}

/**
 * Implements hook_entity_info().
 */
function scribble_entity_info() {
  $entities = array(
    'scribble' => array(
      'module' => 'scribble',
      'label' => t('Scribble'),
      'access callback' => 'scribble_access',
      'view callback' => 'scribble_view',
      'entity class' => 'Scribble',
      'controller class' => 'ScribbleController',
      'metadata controller class' => 'ScribbleMetadataController',
      'fieldable' => TRUE,
      'exportable' => TRUE,
      'base table' => 'scribble',
      'entity keys' => array(
        'id' => 'sid',
        'label' => 'label',
        'name' => 'name',
      ),
      'view modes' => array(
        'full' => array(
          'label' => t('Full content'),
          'custom settings' => FALSE,
        ),
        'snapshot_administration' => array(
          'label' => t('Administer images'),
          'custom settings' => FALSE,
        ),
      ),
      'admin ui' => array(
        'controller class' => 'ScribbleUIController',
        'path' => 'admin/config/media/scribble',
        'menu wildcard' => '%scribble',
      ),
    ),
  );

  return $entities;
}

/**
 * Implements hook_permission().
 */
function scribble_permission() {
  return array(
    'access scribbles' => array(
      'title' => t('View Scribble blackboards.'),
    ),
    'view scribble slideshows' => array(
      'title' => t('View Scribble slideshows.'),
    ),
    'download scribble images' => array(
      'title' => t('Download Scribble images.'),
    ),
    'administer scribbles' => array(
      'title' => t('Administer Scribbles and settings.'),
    ),
  );
}

/**
 * Title callback for scribble pages.
 *
 * @param object $scribble
 *   The loaded scribble entity object.
 * @param int $title_part_key
 *   The title of the page.
 *
 * @return string
 *   The page title.
 */
function scribble_page_title($scribble, $title_part_key = NULL) {
  $items = field_get_items('scribble', $scribble, 'scribble_title');
  $return = $items[0]['safe_value'];
  $title_parts = scribble_get_menu_title_parts();
  if ($title_part_key && array_key_exists($title_part_key, $title_parts)) {
    $return .= ' | ' . $title_parts[$title_part_key];
  }
  return $return;
}

/**
 * Access callback for scribble.
 */
function scribble_access($op, $sharemessage, $account = NULL, $entity_type = NULL) {
  switch ($op) {
    case 'view':
      return user_access('access scribbles', $account);

    default:
      return user_access('administer scribbles', $account);

  }
}

/**
 * Form containing elements of the blackboard toolbar.
 */
function scribble_blackboard_form($form, &$form_state, $scribble) {
  $form['#theme'] = 'scribble_blackboard';
  // Store the entity for the theme function.
  $form['#scribble'] = $scribble;
  // Also store in form state for the AJAX callback.
  $form_state['scribble'] = $scribble;

  // Get background color.
  $items = field_get_items('scribble', $scribble, 'scribble_background_color');

  // Add the necessary JS and CSS as well as some settings.
  $form['#attached']['library'][] = array('scribble', 'jqscribble');
  $form['#attached']['js'][] = array(
    'data' => array(
      'scribble_info' => array(
        'scribbleId' => $scribble->sid,
        'newestScribble' => scribble_get_newest($scribble->sid),
        'backgroundColor' => $items[0]['jquery_colorpicker'],
      ),
    ),
    'type' => 'setting',
  );

  $form['message_container'] = array(
    '#markup' => '<div class="scribble-messages"></div>',
  );

  // Add fields for image loading from the web and ajax based image upload.
  $form['image_fetch_txt'] = array(
    '#type' => 'textfield',
    '#title' => t('Add an image from a URL'),
    '#title_display' => 'invisible',
    '#attributes' => array(
      'id' => 'img-src-txt',
      'placeholder' => t('Enter the URL of the image to add'),
    ),
  );

  $form['image_file'] = array(
    '#type' => 'file',
    '#title' => t('Choose a local file to upload'),
    '#title_display' => 'invisible',
    '#size' => 22,
    '#theme_wrappers' => array(),
  );

  $form['image_file_upload_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Upload'),
    '#submit' => array('scribble_image_upload'),
    '#ajax' => array(
      'callback' => 'scribble_image_upload_ajax',
    ),
  );

  return $form;
}

/**
 * AJAX callback that uploads a file.
 *
 * Displays an error message in case the file wasn't uploaded.
 */
function scribble_image_upload($form, &$form_state) {
  scribble_prepare_folders($form_state['scribble']->sid);
  $destination = 'public://' . variable_get('scribble_public_files_folder', 'scribble');
  $destination .= '/' . $form_state['scribble']->sid . '/uploads';

  $file = file_save_upload(
    'image_file',
    array('file_validate_extensions' => array('png gif jpg jpeg')),
    $destination,
    FILE_EXISTS_REPLACE
  );

  if ($file) {
    $file->status = FILE_STATUS_PERMANENT;
    file_save($file);

    // Store the image on the scribble's uploads field.
    scribble_add_image_to_scribble_field($file->uri, $form_state['scribble'], 'scribble_image_uploads');

    // Store this for usage in AJAX callback function.
    $form_state['scribble_added_image'] = file_create_url($file->uri);
  }
  else {
    // Display an error message in the corresponding container of the form.
    drupal_set_message('File was not uploaded due to failed validation.', 'error');
  }
}

/**
 * AJAX callback for image upload.
 *
 * Sends command to the client that will open a dialog containing the uploaded
 * image and update the list of added images. Renders and displays error
 * messages in case the upload failed.
 *
 * @return array
 *   Array of AJAX commands.
 */
function scribble_image_upload_ajax($form, &$form_state) {
  if (!empty($form_state['scribble_added_image'])) {
    $uploaded_images_field_view = scribble_get_uploaded_images_field_view($form_state['scribble']);
    $commands[] = ajax_command_replace(
      '.field-name-scribble-image-uploads',
      render($uploaded_images_field_view)
    );
    $commands[] = array(
      'command' => 'scribbleOpenImageDialog',
      'data' => array('file_name' => $form_state['scribble_added_image']),
    );
    unset($form_state['scribble_added_image']);
  }
  else {
    $commands[] = ajax_command_html(
      '.scribble-messages',
      theme('status_messages')
    );
  }
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Getter for the latest scribble image.
 *
 * @param int $sid
 *   The id of the scribble to get the latest image for.
 *
 * @return string
 *   Filename of the newest file or NULL if none was found.
 */
function scribble_get_newest($sid) {
  $results = db_query('SELECT scribble_image_fid FROM {field_data_scribble_image} WHERE entity_id = :sid ORDER BY delta DESC', array(':sid' => $sid))
    ->fetchAssoc();
  if (!empty($results['scribble_image_fid'])) {
    $file = file_load($results['scribble_image_fid']);
    return $file->filename;
  }
  return NULL;
}

/**
 * Allowed value function for brush field.
 *
 * @return array
 *   The list of brushes as available in the jqscribble library.
 */
function scribble_get_brushes() {
  return array(
    'BasicBrush' => 'Basic',
    'LineBrush' => 'Line',
    'CrossBrush' => 'Cross',
    'DotBrush' => 'Dot',
    'CircleBrush' => 'Circle',
    'SemiCircleBrush' => 'SemiCircle',
    'RectangleBrush' => 'Rectangle',
  );
}

/**
 * Returns the enabled brushes.
 *
 * @param object $scribble
 *   The scribble entity from which the brushes are returned.
 *
 * @return array
 *   Brush labels indexed by the brush's JS class name.
 */
function scribble_get_enabled_brushes($scribble) {
  $brushes = scribble_get_brushes();
  $return = array();
  if ($items = field_get_items('scribble', $scribble, 'scribble_brushes')) {
    foreach ($items as $item) {
      $return[$item['value']] = $brushes[$item['value']];
    }
  }
  return $return;
}

/**
 * Share message form.
 */
function scribble_form($form, &$form_state, $scribble) {
  $form_state['scribble'] = $scribble;
  $sid = entity_id('scribble', $scribble);

  $form['label'] = array(
    '#type' => 'textfield',
    '#title' => t('Label'),
    '#required' => TRUE,
    '#default_value' => isset($scribble->label) ? $scribble->label : '',
    '#weight' => 0,
  );

  if (empty($sid)) {
    $form['name'] = array(
      '#type' => 'machine_name',
      '#title' => t('Machine Name'),
      '#machine_name' => array(
        'exists' => 'scribble_check_existing_machine_name',
        'source' => array('label'),
      ),
      '#required' => TRUE,
      '#weight' => 1,
    );
  }

  field_attach_form('scribble', $scribble, $form, $form_state);

  $form['width'] = array(
    '#type' => 'textfield',
    '#title' => t('Width'),
    '#required' => TRUE,
    '#default_value' => isset($scribble->width) ? $scribble->width : '',
    '#weight' => 2,
    '#description' => t('Width of the blackboard canvas in pixel.'),
    '#size' => 10,
    '#maxlength' => 5,
  );

  $form['height'] = array(
    '#type' => 'textfield',
    '#title' => t('Height'),
    '#required' => TRUE,
    '#default_value' => isset($scribble->width) ? $scribble->width : '',
    '#weight' => 3,
    '#description' => t('Width of the blackboard canvas in pixel.'),
    '#size' => 10,
    '#maxlength' => 5,
  );

  $slideshow_defaults = !empty($scribble->scribble_slideshow_settings) ? $scribble->scribble_slideshow_settings : variable_get('scribble_slideshow_settings');
  scribble_add_slideshow_settings_elements($form, $slideshow_defaults);

  // Don't display the image field, it should not be editable because it's only
  // a backend container for the scribble snapshots.
  $form['scribble_image']['#access'] = FALSE;
  $form['scribble_image_snapshots']['#access'] = FALSE;

  // Background color is only intended to be set when creating a new scribble.
  if (!empty($sid)) {
    $form['scribble_background_color']['#access'] = FALSE;
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save scribble'),
    '#weight' => 40,
  );

  return $form;
}

/**
 * Returns whether a machine name already exists.
 */
function scribble_check_existing_machine_name($value) {
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'scribble')
    ->propertyCondition('name', $value)
    ->execute();

  return !empty($result['scribble']);
}

/**
 * Share message form submit.
 */
function scribble_form_submit($form, &$form_state) {
  $scribble = $form_state['scribble'];

  entity_form_submit_build_entity('scribble', $scribble, $form, $form_state);
  scribble_save($scribble);

  $info = entity_get_info('scribble');
  $form_state['redirect'] = $info['admin ui']['path'];

  drupal_set_message(t('Scribble %title saved.', array('%title' => entity_label('sharemessage', $scribble))));
}

/**
 * Saves a scribble entity.
 */
function scribble_save($scribble) {
  entity_save('scribble', $scribble);
}

/**
 * Deletes a single scribble entity.
 */
function scribble_delete($scribble) {
  entity_delete('scribble', entity_id('scribble', $scribble));
}

/**
 * Delete multiple scribble entities.
 */
function scribble_delete_multiple($scribble_ids) {
  entity_delete_multiple('scribble', $scribble_ids);
}

/**
 * Load a scribble.
 */
function scribble_load($sid, $reset = FALSE) {
  $scribble = scribble_load_multiple(array($sid), array(), $reset);
  return $scribble ? reset($scribble) : FALSE;
}

/**
 * Load multiple scribbles based on certain conditions.
 */
function scribble_load_multiple($sids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('scribble', $sids, $conditions, $reset);
}

/**
 * View callback for scribble entities.
 */
function scribble_view($entities, $view_mode, $langcode, $entity_type) {
  $output = '';
  foreach ($entities as $scribble) {
    $content = $scribble->buildContent($view_mode, $langcode);
    $output .= drupal_render($content);
  }
  return $output;
}

/**
 * Adds a given image to a given scribble entity.
 *
 * @param string $file_path
 *   The filepath of the image to save.
 * @param object $scribble
 *   The scribble entity to save the image into.
 * @param string $field_name
 *   The field on the entity that the image gets saved into.
 */
function scribble_add_image_to_scribble_field($file_path, $scribble, $field_name) {
  // Prepare filedata.
  $file_temp = file_get_contents($file_path);
  $file_temp = file_save_data($file_temp, $file_path, FILE_EXISTS_REPLACE);

  // Load the scribble and add image to image field of the scribble entity.
  $scribble->{$field_name}[LANGUAGE_NONE][] = array(
    'fid' => $file_temp->fid,
    'filename' => $file_temp->filename,
    'filemime' => $file_temp->filemime,
    'uid' => 1,
    'uri' => $file_temp->uri,
    'status' => 1,
  );
  $scribble->save();
}

/**
 * Creates image folder for a scribble entity.
 *
 * Checks there is already a folder for the images and snapshots of a scribble
 * in the public file files folder. If none exists, the directories will get
 * created.
 *
 * @param int $scribble_id
 *   The id of the scribble entity.
 *
 * @return array
 *   Path of the image and snapshot folder for the scribble entity.
 */
function scribble_prepare_folders($scribble_id) {
  // Load the scribble entity.
  $scribble = entity_load_single('scribble', $scribble_id);

  // Create filenames.
  $file_name = 'scribble_' . $scribble_id . '_' . date('d-m-Y_H-i-s') . '.' . variable_get('scribble_image_file_type', 'png');
  $snapshot_file_name = 'scribble_snapshot_' . $scribble_id . '_' . date('d-m-Y_H-i-s') . '.png';

  // Create directory on runtime if it doesn't exists.
  $base_path = variable_get('file_public_path', 'sites/default/files') . '/';
  $base_path .= variable_get('scribble_public_files_folder', 'scribble');
  $path = $base_path;
  file_prepare_directory($path, FILE_CREATE_DIRECTORY);
  if (!variable_get('scribble_files_directory', FALSE)) {
    variable_set('scribble_files_directory', $path);
  }

  // Create a separate folder and sub dirs for the entity if not existing yet.
  $path = $base_path . '/' . $scribble_id;
  file_prepare_directory($path, FILE_CREATE_DIRECTORY);
  $snapshot_path = $base_path . '/' . $scribble_id . '/snapshots';
  file_prepare_directory($snapshot_path, FILE_CREATE_DIRECTORY);
  $upload_path = $base_path . '/' . $scribble_id . '/uploads';
  file_prepare_directory($upload_path, FILE_CREATE_DIRECTORY);

  return array(
    $scribble,
    $path,
    $snapshot_path,
    $file_name,
    $snapshot_file_name,
  );
}

/**
 * Merges a snapshot onto the latest image.
 *
 * After merging both images, the merged image and the snapshot get added and
 * saved to the scribble entity.
 *
 * @param object $scribble
 *   The loaded scribble entity object.
 * @param resource $snapshot_resource
 *   The resource of the snapshot image to merge onto the image.
 * @param string $path
 *   The path of the scribble entity image folder.
 * @param string $file_name
 *   The file name of the scribble image.
 * @param string $snapshot_file_name
 *   The file name of the scribble snapshot.
 */
function scribble_merge_snapshot_to_newest($scribble, $snapshot_resource, $path, $file_name, $snapshot_file_name) {
  // If there is already an existing image on the scribble, use this as base
  // for the merge.
  if ($latest_file_name = scribble_get_newest($scribble->sid)) {
    $function = 'imagecreatefrom' . variable_get('scribble_image_file_type', 'png');
    $background_resource = $function($path . '/' . $latest_file_name);
  }
  // No image exists yet on the scribble, create a plain image with background
  // color as configured and use it that as base for the merge.
  else {
    $background_resource = scribble_create_blank_image_filled($scribble);
  }
  // Merge the snapshot to the determined base.
  imagecopy($background_resource, $snapshot_resource, 0, 0, 0, 0, $scribble->width, $scribble->height);

  // Write the new scribble image file and destroy resources.
  scribble_write_image_file($path . '/' . $file_name, $background_resource);
  imagedestroy($background_resource);
  imagedestroy($snapshot_resource);

  // Add the image and snapshot to the fields of the scribble entity.
  scribble_add_image_to_scribble_field('public://scribble/' . $scribble->sid . '/snapshots/' . $snapshot_file_name, $scribble, 'scribble_image_snapshots');
  scribble_add_image_to_scribble_field('public://scribble/' . $scribble->sid . '/' . $file_name, $scribble, 'scribble_image');
}

/**
 * Creates a blank image and fills it with the scribbles background color.
 *
 * @param object $scribble
 *   The scribble entity object.
 *
 * @return resource
 *   The image resource of the filled image.
 */
function scribble_create_blank_image_filled($scribble) {
  // Create base image.
  $background_resource = imagecreatetruecolor($scribble->width, $scribble->height);
  // Get background color, convert it and fill the create image with it.
  $items = field_get_items('scribble', $scribble, 'scribble_background_color');
  list($red, $green, $blue) = scribble_convert_hex_to_rgb($items[0]['jquery_colorpicker']);
  $background_color = imagecolorallocate($background_resource, $red, $green, $blue);
  imagefill($background_resource, 0, 0, $background_color);
  return $background_resource;
}

/**
 * Converts a hexadecimal color code into RGB values.
 *
 * @param string $hex
 *   The hexadecimal color code with or without leading #.
 *
 * @return array
 *   The RGB values as array.
 */
function scribble_convert_hex_to_rgb($hex) {
  $hex = str_replace("#", "", $hex);

  if (strlen($hex) == 3) {
    $r = hexdec(str_repeat(substr($hex, 0, 1), 2));
    $g = hexdec(str_repeat(substr($hex, 0, 1), 2));
    $b = hexdec(str_repeat(substr($hex, 0, 1), 2));
  }
  else {
    $r = hexdec(substr($hex, 0, 2));
    $g = hexdec(substr($hex, 2, 2));
    $b = hexdec(substr($hex, 4, 2));
  }
  $rgb = array($r, $g, $b);
  return $rgb;
}

/**
 * Adds slideshow setting form elements to given container.
 *
 * @param array $container
 *   The container to append the form elements to.
 * @param array $defaults
 *   The default values.
 */
function scribble_add_slideshow_settings_elements(&$container, $defaults) {

  $container['scribble_slideshow_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Slideshow settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#tree' => TRUE,
    '#weight' => 35,
  );

  $container['scribble_slideshow_settings']['slideshow_image_style'] = array(
    '#title'          => t('Image style'),
    '#type'           => 'select',
    '#default_value'  => $defaults['slideshow_image_style'],
    '#empty_option'   => t('None (original image)'),
    '#options'        => image_style_options(FALSE),
  );

  if (module_exists('colorbox')) {
    $container['scribble_slideshow_settings']['slideshow_colorbox_image_style'] = array(
      '#title'          => t('Colorbox image style'),
      '#type'           => 'select',
      '#default_value'  => $defaults['slideshow_colorbox_image_style'],
      '#empty_option'   => t('None (original image)'),
      '#options'        => image_style_options(FALSE),
      '#states' => array(
        'visible' => array(
          ':input[name$="[slideshow_link]"]' => array('value' => 'colorbox'),
        ),
      ),
    );
    $colorbox_slideshow = array(
      'automatic' => t('Automatic'),
      'manual'    => t('Manual'),
    );
    $container['scribble_slideshow_settings']['slideshow_colorbox_slideshow'] = array(
      '#title'          => t('Colorbox slideshow'),
      '#type'           => 'select',
      '#default_value'  => $defaults['slideshow_colorbox_slideshow'],
      '#empty_option'   => t('No slideshow'),
      '#options'        => $colorbox_slideshow,
      '#states' => array(
        'visible' => array(
          ':input[name$="[slideshow_link]"]' => array('value' => 'colorbox'),
        ),
      ),
    );
    $container['scribble_slideshow_settings']['slideshow_colorbox_slideshow_speed'] = array(
      '#title'          => t('Colorbox slideshow speed'),
      '#type'           => 'textfield',
      '#size'           => 5,
      '#default_value'  => $defaults['slideshow_colorbox_slideshow_speed'],
      '#description'    => t('Time between transitions (ms).'),
      '#states' => array(
        'invisible' => array(
          ':input[name$="[slideshow_colorbox_slideshow]"]' => array('value' => ''),
        ),
      ),
    );
    $colorbox_transitions = array(
      'none'    => t('None'),
      'elastic' => t('Elastic'),
      'fade'    => t('Fade'),
    );
    $container['scribble_slideshow_settings']['slideshow_colorbox_transition'] = array(
      '#title'          => t('Colorbox transition'),
      '#type'           => 'select',
      '#default_value'  => $defaults['slideshow_colorbox_transition'],
      '#options'        => $colorbox_transitions,
      '#states' => array(
        'visible' => array(
          ':input[name$="[slideshow_link]"]' => array('value' => 'colorbox'),
        ),
      ),
    );
    $container['scribble_slideshow_settings']['slideshow_colorbox_speed'] = array(
      '#title'          => t('Colorbox transition speed'),
      '#type'           => 'textfield',
      '#size'           => 5,
      '#default_value'  => $defaults['slideshow_colorbox_speed'],
      '#description'    => t('Duration of transition (ms).'),
      '#states' => array(
        'visible' => array(
          ':input[name$="[slideshow_link]"]' => array('value' => 'colorbox'),
        ),
      ),
    );
  }

  $container['scribble_slideshow_settings']['slideshow_fx'] = array(
    '#title'          => t('Transition effect'),
    '#type'           => 'select',
    '#default_value'  => $defaults['slideshow_fx'],
    '#options'        => array(
      'blindX'      => t('blindX'),
      'blindY'      => t('blindY'),
      'blindZ'      => t('blindZ'),
      'cover'       => t('cover'),
      'curtainX'    => t('curtainX'),
      'curtainY'    => t('curtainY'),
      'fade'        => t('fade'),
      'fadeZoom'    => t('fadeZoom'),
      'growX'       => t('growX'),
      'growY'       => t('growY'),
      'scrollUp'    => t('scrollUp'),
      'scrollDown'  => t('scrollDown'),
      'scrollLeft'  => t('scrollLeft'),
      'scrollRight' => t('scrollRight'),
      'scrollHorz'  => t('scrollHorz'),
      'scrollVert'  => t('scrollVert'),
      'shuffle'     => t('shuffle'),
      'slideX'      => t('slideX'),
      'slideY'      => t('slideY'),
      'toss'        => t('toss'),
      'turnUp'      => t('turnUp'),
      'turnDown'    => t('turnDown'),
      'turnLeft'    => t('turnLeft'),
      'turnRight'   => t('turnRight'),
      'uncover'     => t('uncover'),
      'wipe'        => t('wipe'),
      'zoom'        => t('zoom'),
    ),
  );

  $container['scribble_slideshow_settings']['slideshow_speed'] = array(
    '#title'          => t('Transition speed'),
    '#type'           => 'textfield',
    '#size'           => 5,
    '#default_value'  => $defaults['slideshow_speed'],
    '#description'    => t('Duration of transition (ms).'),
    '#required'       => TRUE,
  );

  $container['scribble_slideshow_settings']['slideshow_timeout'] = array(
    '#title'          => t('Timeout'),
    '#type'           => 'textfield',
    '#size'           => 5,
    '#default_value'  => $defaults['slideshow_timeout'],
    '#description'    => t('Time between transitions (ms). Enter 0 to disable automatic transitions (then, enable pager and/or controls).'),
    '#required'       => TRUE,
  );

  $container['scribble_slideshow_settings']['slideshow_order'] = array(
    '#title'          => t('Order'),
    '#type'           => 'select',
    '#default_value'  => $defaults['slideshow_order'],
    '#empty_option'   => t('Normal'),
    '#options'        => array(
      'reverse' => t('Reverse'),
      'random'  => t('Random'),
    ),
  );

  $container['scribble_slideshow_settings']['slideshow_controls'] = array(
    '#title'          => t('Create prev/next controls'),
    '#type'           => 'checkbox',
    '#default_value'  => $defaults['slideshow_controls'],
  );

  $container['scribble_slideshow_settings']['slideshow_controls_pause'] = array(
    '#title'          => t('Create play/pause button'),
    '#type'           => 'checkbox',
    '#default_value'  => $defaults['slideshow_controls_pause'],
    '#states' => array(
      'visible' => array(
        ':input[name$="[slideshow_controls]"]' => array('checked' => TRUE),
      ),
    ),
  );

  $container['scribble_slideshow_settings']['slideshow_controls_position'] = array(
    '#title'          => t('Prev/next controls position'),
    '#type'           => 'select',
    '#options'        => array('before' => t('Before'), 'after' => t('After')),
    '#default_value'  => $defaults['slideshow_controls_position'],
    '#states' => array(
      'visible' => array(
        ':input[name$="[slideshow_controls]"]' => array('checked' => TRUE),
      ),
    ),
  );

  $container['scribble_slideshow_settings']['slideshow_pause'] = array(
    '#title'          => t('Pause on hover'),
    '#type'           => 'checkbox',
    '#default_value'  => $defaults['slideshow_pause'],
  );

  $container['scribble_slideshow_settings']['slideshow_start_on_hover'] = array(
    '#title'          => t('Activate on hover'),
    '#type'           => 'checkbox',
    '#default_value'  => $defaults['slideshow_start_on_hover'],
  );

  $container['scribble_slideshow_settings']['slideshow_pager'] = array(
    '#title'          => t('Pager'),
    '#type'           => 'select',
    '#options'        => array(
      'number' => t('Slide number'),
      'image' => t('Image'),
      'carousel' => t('Carousel'),
    ),
    '#empty_option'   => t('None'),
    '#default_value'  => $defaults['slideshow_pager'],
  );

  $container['scribble_slideshow_settings']['slideshow_pager_position'] = array(
    '#title'          => t('Pager position'),
    '#type'           => 'select',
    '#options'        => array('before' => t('Before'), 'after' => t('After')),
    '#default_value'  => $defaults['slideshow_pager_position'],
    '#states' => array(
      'invisible' => array(
        ':input[name$="[slideshow_pager]"]' => array('value' => ''),
      ),
    ),
  );

  $container['scribble_slideshow_settings']['slideshow_pager_image_style'] = array(
    '#title'          => t('Pager image style'),
    '#type'           => 'select',
    '#default_value'  => $defaults['slideshow_pager_image_style'],
    '#empty_option'   => t('None (original image)'),
    '#options'        => image_style_options(FALSE),
    '#states' => array(
      'visible' => array(
        ':input[name$="[slideshow_pager]"]' => array('value' => 'image'),
      ),
    ),
  );

  $container['scribble_slideshow_settings']['slideshow_carousel_image_style'] = array(
    '#title'          => t('Carousel: Image style'),
    '#type'           => 'select',
    '#default_value'  => $defaults['slideshow_carousel_image_style'],
    '#empty_option'   => t('None (original image)'),
    '#options'        => image_style_options(FALSE),
    '#states' => array(
      'visible' => array(
        ':input[name$="[slideshow_pager]"]' => array('value' => 'carousel'),
      ),
    ),
  );

  $container['scribble_slideshow_settings']['slideshow_carousel_visible'] = array(
    '#title'          => t('Carousel: Number of visible images'),
    '#type'           => 'textfield',
    '#size'           => 2,
    '#default_value'  => $defaults['slideshow_carousel_visible'],
    '#description'    => t('The number of images that are visible in the pager. Defaults to 3.'),
    '#states' => array(
      'visible' => array(
        ':input[name$="[slideshow_pager]"]' => array('value' => 'carousel'),
      ),
    ),
  );

  $container['scribble_slideshow_settings']['slideshow_carousel_scroll'] = array(
    '#title'          => t('Carousel: Number of images to scroll by'),
    '#type'           => 'textfield',
    '#size'           => 2,
    '#default_value'  => $defaults['slideshow_carousel_scroll'],
    '#description'    => t('The number of images scrolled with each click. Defaults to 1.'),
    '#states' => array(
      'visible' => array(
        ':input[name$="[slideshow_pager]"]' => array('value' => 'carousel'),
      ),
    ),
  );

  $container['scribble_slideshow_settings']['slideshow_carousel_speed'] = array(
    '#title'          => t('Carousel: Transition speed'),
    '#type'           => 'textfield',
    '#size'           => 5,
    '#default_value'  => $defaults['slideshow_carousel_speed'],
    '#description'    => t('Speed of the Carousel scroll. Defaults to 500.'),
    '#states' => array(
      'visible' => array(
        ':input[name$="[slideshow_pager]"]' => array('value' => 'carousel'),
      ),
    ),
  );

  $skin_options = array();
  $path = libraries_get_path('jquery.jcarousel') . '/skins';
  if (file_exists($path)) {
    $dirnames = scandir($path);
    foreach ($dirnames as $dirname) {
      $dirname = check_plain($dirname);
      if (is_dir($path . '/' . $dirname) && file_exists($path . '/' . $dirname . '/skin.css')) {
        $skin_options[$dirname] = $dirname;
      }
    }
    $container['scribble_slideshow_settings']['slideshow_carousel_skin'] = array(
      '#title'         => t('Carousel Skin'),
      '#type'          => 'select',
      '#default_value' => $defaults['slideshow_carousel_skin'],
      '#options'       => $skin_options,
      '#empty_option'  => t('None'),
      '#states' => array(
        'visible' => array(
          ':input[name$="[slideshow_pager]"]' => array('value' => 'carousel'),
        ),
      ),
    );
  }

  $container['scribble_slideshow_settings']['slideshow_carousel_follow'] = array(
    '#title'          => t('Follow active slide'),
    '#type'           => 'checkbox',
    '#default_value'  => $defaults['slideshow_carousel_follow'],
    '#states' => array(
      'visible' => array(
        ':input[name$="[slideshow_pager]"]' => array('value' => 'carousel'),
      ),
    ),
  );

  $container['scribble_slideshow_settings']['slideshow_carousel_vertical'] = array(
    '#title'          => t('Vertical Carousel'),
    '#type'           => 'checkbox',
    '#default_value'  => $defaults['slideshow_carousel_vertical'],
    '#states' => array(
      'visible' => array(
        ':input[name$="[slideshow_pager]"]' => array('value' => 'carousel'),
      ),
    ),
  );

  $container['scribble_slideshow_settings']['slideshow_carousel_circular'] = array(
    '#title'          => t('Circular Carousel'),
    '#type'           => 'checkbox',
    '#default_value'  => $defaults['slideshow_carousel_circular'],
    '#states' => array(
      'visible' => array(
        ':input[name$="[slideshow_pager]"]' => array('value' => 'carousel'),
      ),
    ),
  );

}

/**
 * Getter for the mapping menu titles.
 *
 * Maps constants to translatable parts of menu titles.
 */
function scribble_get_menu_title_parts() {
  return array(
    SCRIBBLE_TITLE_SLIDESHOW => t('Slideshow'),
    SCRIBBLE_TITLE_IMAGE_LIST => t('Manage images'),
    SCRIBBLE_TITLE_REMOVE_IMAGE => t('Remove image'),
  );
}

/**
 * Writes an image file from a given resource.
 *
 * @param string $file_path
 *   The path of the image that will be saved including filename..
 * @param resource $image_resource
 *   The image resource of the image data that gets written.
 */
function scribble_write_image_file($file_path, $image_resource) {
  if (variable_get('scribble_image_file_type', 'png') == 'jpeg') {
    imagejpeg($image_resource, $file_path, variable_get('scribble_image_jpeg_quality', 100));
  }
  elseif (variable_get('scribble_image_file_type', 'png') == 'png') {
    imagepng($image_resource, $file_path, variable_get('scribble_image_png_quality', 9));
  }
}

/**
 * Validates access to AJAX request actions.
 *
 * @param mixed $sid
 *   Id of a scribble entity as found in $_POST upon AJAX request.
 *
 * @return bool
 *   TRUE if scribble can be loaded from given id and user has view access on
 *   the scribble, FALSE otherwise.
 */
function scribble_ajax_action_access($sid) {
  return !empty($sid) && entity_load_single('scribble', $sid) && user_access('access scribbles');
}

/**
 * Preprocess for the blackboard form.
 *
 * Renders some fields and adds them as variables for the template.
 */
function template_preprocess_scribble_blackboard(&$variables) {
  // Render form elements and add as variable.
  $fields = array(
    'message_container',
    'image_fetch_txt',
    'image_file',
    'image_file_upload_submit',
  );
  foreach ($fields as $field) {
    $variables[$field] = drupal_render($variables['form'][$field]);
  }

  // Prepare uploaded images for image list tab.
  $scribble = $variables['form']['#scribble'];
  $variables['uploaded_images'] = scribble_get_uploaded_images_field_view($scribble);

  // Background color of the canvas.
  $items = field_get_items('scribble', $scribble, 'scribble_background_color');
  $variables['background_color'] = $items[0]['jquery_colorpicker'];
}

/**
 * Getter for output of scribble_uploaded_images field.
 *
 * @param object $scribble
 *   The fully loaded scribble entity object.
 *
 * @return array
 *   The field_view's render array.
 */
function scribble_get_uploaded_images_field_view($scribble) {
  return field_view_field(
    'scribble',
    $scribble,
    'scribble_image_uploads',
    array(
      'label' => 'hidden',
      'type' => 'image',
      'module' => 'image',
      'settings' => array(
        'image_style' => variable_get('scribble_uploaded_images_image_style', 'scribble_uploaded_image_style'),
      ),
    )
  );
}

/**
 * Implements hook_preprocess_field().
 *
 * Adds original file urls as data property to field item wrappers.
 */
function scribble_preprocess_field(&$variables) {
  $element = $variables['element'];
  if ($variables['element']['#field_name'] == 'scribble_image_uploads') {
    foreach ($element['#items'] as $delta => $item) {
      $variables['item_attributes_array'][$delta]['data-original-image'] = file_create_url($variables['items'][$delta]['#item']['uri']);
    }
  }
}
