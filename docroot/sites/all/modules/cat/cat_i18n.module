<?php

/**
 * @file CAT/CAT_UI integration with internationalization (i18n) module.
 *
 * @author Oleksiy Kalinichenko <aexchecker@gmail.com>
 */

/**
 * Implements hook_i18n_string_info().
 *
 * List text groups for string translation.
 * This information will be automatically produced later for hook_locale()
 */
function cat_i18n_i18n_string_info() {
  $groups['cat_item'] = array(
    'title' => t('CAT item'),
    'description' => t('Translatable CAT item titles (local tabs and actions).'),
    'format' => FALSE, // This group doesn't have strings with format
    'list' => TRUE, // This group can list all strings
  );

  return $groups;
}

/**
 * Implements hook_i18n_object_info().
 */
function cat_i18n_i18n_object_info() {
  // Generic object properties, title, etc.
  $info['cat_item'] = array(
    'title' => t('Cat item'),
    // Field to be used as key to index different CAT items.
    'key' => 'machine_name',
    'class' => 'i18n_cat_item_object',
    'load callback' => 'cat_load_by_name',
    'list callback' => 'cat_i18n_load_all',
    // Mapping object fields and menu place holders.
    'placeholders' => array(
      '%cat_item' => 'machine_name',
    ),
    // Path for automatically generated translation tabs. Note placeholders above are used here.
    'edit path' => 'admin/structure/cat/edit/%cat_item',
    'translate tab' => 'admin/structure/cat/edit/%cat_item/translate',
    // Metadata for string translation.
    'string translation' => array(
      'textgroup' => 'cat_item',
      'type' => 'cat_item',
      'properties' => array(),
      'translate path' => 'admin/structure/cat/edit/%cat_item/translate/%i18n_language',
    ),
  );

  return $info;
}

/**
 * Implements hook_cat_save().
 */
function cat_i18n_cat_save($cat_item) {
  if (!empty($cat_item->translatable)) {
    i18n_string_object_update('cat_item', $cat_item);
  }
  else {
    i18n_string_object_remove('cat_item', $cat_item);
  }
}

/**
 * Implements hook_cat_delete().
 */
function cat_i18n_cat_delete($cat_item) {
  // Don't delete translations for in-code CAT items.
  if (!$cat_item->is_overwritten) {
    i18n_string_object_remove('cat_item', $cat_item);
  }
}

/**
 * Translate cat tab link title.
 *
 * @param string $title
 *   Link title.
 * @param object $cat_item
 *   Cat object.
 * @param integer $key
 *   Current tab key in $cat_item->{$type} array.
 * @param string $type
 *   Cat tab type: cat_tabs or cat_actions.
 *
 * @return string
 *   Translated string.
 */
function cat_i18n_string($title, $cat_item, $key, $type = 'cat_tabs') {
  $tab = $cat_item->{$type}[$key];

  $key_name = $key;
  if (!empty($tab['machine_name'])) {
    $key_name = $tab['machine_name'];
  }
  elseif (!empty($tab['reusabled_machine_name'])) {
    $key_name = $tab['reusabled_machine_name'];
  }
  return i18n_string("cat_item:{$type}:{$cat_item->machine_name}:{$key_name}", $title);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function cat_i18n_form_cat_ui_list_alter(&$form, $form_state) {
  // Do not process form if there are no cat_item.
  if (!empty($form_state['storage']['objects'])) {
    foreach ($form_state['storage']['objects'] as $cat_item) {
      if (!empty($cat_item->translatable)) {
        $form[$cat_item->machine_name]['actions']['#links'][] = array(
          'title' => t('Translate'),
          'href' => "admin/structure/cat/edit/{$cat_item->machine_name}/translate",
        );
      }
    }
  }
}

/**
 * Load all translatable CAT items from database and code.
 *
 * @return array
 */
function cat_i18n_load_all() {
  $cat_items = cat_load_all();
  $cat_items_translatable = array();

  foreach ($cat_items as $cat_item) {
    if (!empty($cat_item->translatable)) {
      $cat_items_translatable[] = $cat_item;
    }
  }

  return $cat_items_translatable;
}

