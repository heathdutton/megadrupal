<?php

define('DEFAULT_DOMAIN_TRAVERSAL_TIMEOUT', 60);

/**
 * Implements hook_menu().
 */
function domain_traversal_menu() {
  $items = array();

  $items['domain-traversal/login/%/%/%/%'] = array(
    'title' => 'Domain Traversal login',
    'description' => 'Login from other domain',
    'page callback' => 'domain_traversal_login',
    'page arguments' => array(2, 3, 4, 5),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['admin/domain-traversal'] = array(
    'title' => 'Domain Traversal',
    'page callback' => 'system_admin_menu_block_page',
    'access callback' => '_domain_traversal_access',
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  foreach (domain_domains() as $domain_id => $domain) {
    // Skip not active domains.
    if (empty($domain['valid'])) {
      continue;
    }

    $items['admin/domain-traversal/' . $domain['machine_name']] = array(
      'title' => $domain['sitename'],
      'description' => 'Traverse to this domain',
      'page callback' => 'domain_traversal_traverse',
      'page arguments' => array(2),
      'access callback' => '_domain_traversal_access_other_domains',
      'access arguments' => array(2),
    );
  }

  return $items;
}

/**
 * Menu access callback to check if the user has any traverse permissions.
 */
function _domain_traversal_access() {
  return user_access('traverse domains') || user_access('traverse all domains');
}

/**
 * Menu access callback to deny access for the current domain or domains to
 * which the user does not have access.
 */
function _domain_traversal_access_other_domains($domain_name) {
  $current_domain = domain_get_domain();
  $domain = domain_machine_name_load($domain_name, TRUE);

  if ($current_domain && $current_domain['domain_id'] == $domain['domain_id']) {
    return FALSE;
  }

  $account_domains = _domain_traversal_accessible_domains();
  if (!$domain || !isset($account_domains[$domain['domain_id']])) {
    return FALSE;
  }

  return user_access('traverse domains') || user_access('traverse all domains');
}

/**
 * Grabs the domains, except the current one, accessible by the current user.
 */
function _domain_traversal_accessible_domains($account = NULL) {
  global $user;
  $account_domains = array();

  if (empty($account)) {
    $account = $user;
  }

  if ($account->uid) {

    // If Domain Strict is active, only add domains the user has explicit access to.
    if (module_exists('domain_strict') || !user_access('traverse all domains')) {
      foreach (domain_get_user_domains($account) as $domain_id) {
        $account_domains[$domain_id] = domain_load($domain_id);
      }
    }
    else {
      foreach (domain_domains() as $domain) {
        $account_domains[$domain['domain_id']] = $domain;
      }
    }
  }

  return $account_domains;
}

/**
 * Implements hook_permission().
 */
function domain_traversal_permission() {
  return array(
    'traverse domains' => array(
      'title' => t('Traverse between assigned domains'),
    ),
    'traverse all domains' => array(
      'title' => t('Traverse between all domains'),
    ),
  );
}

/**
 * Generates a secret key.
 *
 * @see user_pass_rehash().
 */
function _domain_traversal_traverse_secret_key($account, $domain_name, $timestamp = REQUEST_TIME) {
  return drupal_hmac_base64($timestamp . $account->uid, drupal_get_hash_salt() . $domain_name . $account->pass);
}

/**
 * Page callback that sends the user to the other domain.
 */
function domain_traversal_traverse($domain_name) {
  global $user;
  $domain = domain_machine_name_load($domain_name, TRUE);

  $user_domains = _domain_traversal_accessible_domains();
  if (!isset($user_domains[$domain['domain_id']])) {
    drupal_set_message(t('You do not have access to the requested domain.'), 'error');
    drupal_access_denied();
  }

  // Generate secret.
  $secret_key = _domain_traversal_traverse_secret_key($user, $domain_name);

  // Store the secret in the database.
  $secret = array(
    'uid' => $user->uid,
    'domain_id' => $domain['domain_id'],
    'created' => REQUEST_TIME,
    'secret' => $secret_key,
  );
  drupal_write_record('domain_traversal', $secret);

  // Redirect the user to the traversal path on the other domain.
  $path = domain_get_path($domain) . implode('/', array(
    'domain-traversal',
    'login',
    $domain_name,
    $user->uid,
    REQUEST_TIME,
    $secret_key,
  ));
  drupal_goto($path);
}

/**
 * Page callback that logs a user in on the requested domain.
 */
function domain_traversal_login($domain_name, $uid, $timestamp, $secret) {
  global $user;

  // Already logged in?
  if ($user->uid) {
    if ($user->uid == $uid) {
      drupal_set_message(t('You are now logged in.'));
    }
    else {
      // Some other account is already logged in.
      drupal_set_message(t('Another user is already logged into the site on this computer. Please !logout and try using the link again.', array(
        '!logout' => l(t('log out'), 'user/logout'),
      )));
    }
    drupal_goto();
  }

  // Check if the one-time domain-traversal link is valid.
  $error_message = '';
  $timeout = variable_get('domain_traversal_timeout', DEFAULT_DOMAIN_TRAVERSAL_TIMEOUT);
  if ($timestamp >= REQUEST_TIME - $timeout) {
    $domain = domain_machine_name_load($domain_name, TRUE);
    if ($domain) {
      $account_id = db_select('domain_traversal', 'dt')
        ->fields('dt', array('uid'))
        ->condition('dt.domain_id', $domain['domain_id'])
        ->condition('dt.created', $timestamp)
        ->condition('dt.secret', $secret)
        ->range(0, 1)
        ->execute()
        ->fetchField();
      if ($account_id == $uid) {
        $account = user_load($uid);
        if ($account->status) {
          $user_domains = _domain_traversal_accessible_domains($account);
          if (isset($user_domains[$domain['domain_id']])) {
            $secret_key = _domain_traversal_traverse_secret_key($account, $domain_name, $timestamp);
            if ($secret_key == $secret) {
              // Cleanup the used and expired secrets.
              $and = db_and()
                ->condition('domain_id', $domain['domain_id'])
                ->condition('created', $timestamp)
                ->condition('secret', $secret);
              $or = db_or()
                ->condition($and)
                ->condition('created', REQUEST_TIME - $timeout, '<');
              db_delete('domain_traversal')
                ->condition($or)
                ->execute();

              $user = $account;
              user_login_finalize();
              watchdog('domain-traversal', 'User %name used one-time domain-traversal link at time %timestamp.', array(
                '%name' => format_username($account),
                '%timestamp' => $timestamp,
              ));
              drupal_set_message(t('You are now logged in.'));
              drupal_goto();
            }
          }
          else {
            $error_message = t('You do not have access to the requested domain.');
          }
        }
      }
    }
  }
  else {
    $error_message = t('You have tried to use a one-time-domain-traversal link that has expired.');
  }

  if (!$error_message) {
    $error_message = t('You have tried to use an invalid one-time-domain-traversal link.');
  }

  drupal_set_message($error_message, 'error');
  drupal_access_denied();
  drupal_exit();
}
