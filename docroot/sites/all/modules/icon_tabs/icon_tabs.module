<?php
/**
 * @file
 * Adds the 'Icon Tabs' styled block of the Local Tasks menu.
 */

/**
 * Implements hook_help().
 */
function icon_tabs_help($path, $arg) {
  if ($path == 'admin/help#icon_tabs') {
    $output = file_get_contents(drupal_get_path('module', 'icon_tabs') . '/README.txt');
    if (module_exists('markdown')) {
      $output = module_invoke('markdown', 'filter', 'process', 0, -1, $output);
      $output = filter_xss_admin($output);
    }
    else {
      $output = '<pre>' . check_plain($output) . '</pre>';
    }
    return $output;
  }
}

/**
 * Implements hook_menu().
 *
 * Add icon Tabs settings page to the menu.
 */
function icon_tabs_menu() {
  $items = array();
  $items['admin/config/user-interface/icon-tabs'] = array(
    'title' => 'Icon tabs',
    'description' => 'Settings for the Icon tabs module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('icon_tabs_admin'),
    'access arguments' => array('administer icon tabs'),
    'file' => 'icon_tabs.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_permission().
 *
 * Add a permission for editing icon tab settings.
 */
function icon_tabs_permission() {
  return array(
    'administer icon tabs' => array(
      'title' => t('Administer Icon Tabs'),
    ),
  );
}

/**
 * Implements hook_contextual_links_view_alter().
 *
 * Add a contextual link to the icon tabs block linking to the configuration.
 */
function icon_tabs_contextual_links_view_alter(&$element, &$items) {
  // If the user has permission to administer icon tabs.
  if (user_access('administer icon tabs')) {
    // Add a link to the edit page in the contextual links of our block.
    if (isset($element['#element']['#block']) && $element['#element']['#block']->delta == "icon-tabs") {
      $element['#links']['configure-icon-tabs'] = array(
        'title' => t('Configure icon tabs'),
        'href' => url('admin/config/user-interface/icon-tabs', array('absolute' => TRUE)),
      );
    }
  }
}

/**
 * Implements hook_block_info().
 *
 * Declare the icon Tabs block.
 */
function icon_tabs_block_info() {
  $blocks['icon-tabs'] = array(
    'info' => t('Icon Tabs'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function icon_tabs_block_view($delta = '') {
  $static = &drupal_static('icon_tabs_rendered');

  // Don't display block on admin pages.
  if (path_is_admin(current_path())) {
    return FALSE;
  }

  $block = array();
  switch ($delta) {
    case 'icon-tabs':
      $block['subject'] = '';
      $block['content'] = icon_tabs_block_contents();
      $block['classes_array'][] = 'fredfred';
      break;
  }

  // Since the block was rendered, set block_rendered to TRUE (this will inform
  // icon_tabs_process_menu_local_tasks() that it can hide the actual
  // MENU_LOCAL_TASKS tasks):
  $static['block_rendered'] = TRUE;

  return $block;
}

/**
 * Implements template_preprocess_block().
 */
function icon_tabs_preprocess_block(&$variables) {
  if ($variables['block']->delta == 'icon-tabs' && $variables['block']->module == 'icon_tabs') {
    // Add a reliable class the the block.
    $variables['classes_array'][] = drupal_html_class('icon-tabs-block');
  }
}

/**
 * Custom function returns the Local Tasks.
 */
function icon_tabs_block_contents() {
  // Rendered here because the variables are unset in
  // icon_tabs_process_menu_local_tasks() once this block is rendered.
  $tabs = array(
    '#theme' => 'menu_local_tasks',
    '#primary' => menu_primary_local_tasks(),
    '#secondary' => menu_secondary_local_tasks(),
  );

  return drupal_render($tabs);
}

/**
 * Implements hook_preprocess_HOOK() for theme_menu_local_task().
 *
 * Adds a class to the links used for local task items.
 */
function icon_tabs_preprocess_menu_local_task(&$variables) {
  // The link for the tab.
  $link = $variables['element']['#link'];

  // Href is used to generate class for better translation support.
  $class[] = 'menu-item-' . _icon_tabs_generate_class_name($link['href']);

  // Get the current list of tabs that we know about.
  $tab_classes = _icon_tabs_get_tab_classes();

  // If we arent on an admin page and there isn't an entry for our tab yet go
  // ahead and make one.
  if (!path_is_admin(current_path()) && !isset($tab_classes[$class[0]])) {
    // Add entry and use the main class as the key.
    $tab_classes[$class[0]] = array(
      'title' => $link['title'],
      'class' => array($class[0]),
      'code' => '',
    );
  }

  // If there have been any changes update the variable.
  if ($tab_classes != _icon_tabs_get_tab_classes()) {
    variable_set('icon_tabs_classes', $tab_classes);
  }

  // Add the class the the link.
  $variables['element']['#link']['localized_options']['attributes']['class'] = $class;
}

/**
 * Implimentation of hook_preprocess_html().
 *
 * Add the stylesheets for icon tabs and icon contextual links to the page.
 */
function icon_tabs_preprocess_html(&$variables) {
  // Don't add styles to admin pages.
  if (!path_is_admin(current_path())) {
    // Only add the css if there are any tabs.
    if (menu_primary_local_tasks() || menu_secondary_local_tasks()) {
      // Adds the default icon font to the page if it is to be used.
      _icon_tabs_add_font();

      // If the Fred Tabs theme is enabled.
      if (variable_get('icon_tabs_fred_tabs_theme', 0)) {
        drupal_add_css(drupal_get_path('module', 'icon_tabs') . '/css/fred-tabs-theme.css');

        // If Environment Indicator is enabled.
        if (module_exists('environment_indicator')
            && variable_get('icon_tabs_fred_tabs_environment_indicator', FALSE)) {

          $environment_info = environment_indicator_get_active();
          if ($environment_info && environment_indicator_check_access($environment_info)) {
            $color      = $environment_info['color'];
            $text_color = $environment_info['text_color'];

            if ($color && $text_color) {
              drupal_add_css("ul.tabs li:not(.active) {
                background-color: $color !important;
                color: $text_color !important;
              }", 'inline');
            }
          }
        }
      }

      // If the vertical stacking is enabled.
      if (variable_get('icon_tabs_fred_tabs_vertical', 0)) {
        // Get the vertical width.
        $vertical_width = variable_get('icon_tabs_fred_tabs_vertical_width', 1260);
        $css = '.icon-tabs-block ul.tabs {
            position: absolute;
            right: 100%;
            margin-right: 20px;
            top: 0;
            z-index: 97;
            text-align: right;
          }
          .icon-tabs-block ul.tabs li {
            margin: 0 0 10px 0 !important;
            float: right;
            clear: both;
            max-width: 32px;
            max-height: 33px;
          }
          .icon-tabs-block ul.tabs li:hover {
            max-width: 135px;
            max-height: 96px;
          }
          .icon-tabs-block ul.tabs li a {
            float: right;
          }';

        // If the value is greater than zero, put it in a media query.
        $media = ($vertical_width > 0) ? '(min-width: ' . $vertical_width . 'px)' : 'screen';
        // Add the vertical styles to the page.
        drupal_add_css($css, array(
          'group' => CSS_DEFAULT,
          'type' => 'inline',
          'media' => $media,
          'weight' => '9999',
        ));
      }

      // Get the current list of tabs that we know about.
      $tab_classes = _icon_tabs_get_tab_classes();
      // Loop through the tabs and add css for the user selected icons.
      foreach ($tab_classes as $key => $tab) {
        if ($tab['code']) {
          // Add the default icon.
          if ($key == 'default') {
            drupal_add_css(
              'body ul.tabs li a:after {content: "\\' . $tab['code'] . '"}',
              array(
                'group' => CSS_DEFAULT,
                'type' => 'inline',
                'weight' => '9999',
              )
            );
          }
          else {
            drupal_add_css(
              'body ul.tabs li a.' . $key . ':after {content: "\\' . $tab['code'] . '"}',
              array(
                'group' => CSS_DEFAULT,
                'type' => 'inline',
                'weight' => '9999',
              )
            );
          }
        }
      }
    }

    // If user has access to view contextual links and the icon contextal links
    // are enabled, there probabaly are some so add the CSS.
    if (user_access('access contextual links') && variable_get('icon_tabs_contextual_links', FALSE)) {
      drupal_add_css(drupal_get_path('module', 'icon_tabs') . '/css/icon-contextual-links.css');
    }
  }
}

/**
 * Adds the default icon font to the page if it is to be used.
 */
function _icon_tabs_add_font() {
  $css = '';
  $css_name = 'icontabs';

  if (!variable_get('icon_tabs_custom_icon_font', 0)) {
    // Path to the icon tabs module.
    $module_path = drupal_get_path('module', 'icon_tabs');
    // The css for declaring the default icon font.
    $css .= '@font-face {
      font-family: "icontabs";
      src: url("/' . $module_path . 'font/icontabs.eot");
      src: url("/' . $module_path . '/font/icontabs.eot#iefix") format("embedded-opentype"),
        url("/' . $module_path . '/font/icontabs.ttf") format("truetype"),
        url("/' . $module_path . '/font/icontabs.woff") format("woff"),
        url("/' . $module_path . '/font/icontabs.svg#fredtabs") format("svg");
      font-weight: normal;
      font-style: normal;
    }';
  }
  else {
    // Get the CSS name and svg of the custom font.
    $css_name = variable_get('icon_tabs_css_name', '');
    $svg_file = variable_get('icon_tabs_svg_path', '');

    if (path_is_admin(current_path())) {
      // Get path info for svg file.
      $path_info = pathinfo($svg_file);
      // Use this to check if the extenstions exist.
      $file = $path_info['dirname'] . '/' . $path_info['filename'];

      // Begin the font stack.
      $css .= '@font-face {
        font-family: "' . $css_name . '";src: ';

      // If there are other font files with the same name.
      if (file_exists($file . '.eot')) {
        $css .= 'url("/' . $file . '.eot");
          src: url("/' . $file . '.eot#iefix") format("embedded-opentype"),';
      }
      if (file_exists($file . '.ttf')) {
        $css .= 'url("/' . $file . '.ttf") format("truetype"),';
      }
      if (file_exists($file . '.woff')) {
        $css .= 'url("/' . $file . '.woff") format("woff"),';
      }

      // Finish the font stack.
      $css .= 'url("/' . $svg_file . '#customfont") format("svg");
        font-weight: normal;
        font-style: normal;
      }';
    }
  }

  // Apply the other font to the things that need it.
  $css .= "body ul.tabs li a:after {
      speak: none;
      font-style: normal;
      font-weight: normal;
      font-variant: normal;
      text-transform: none;
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
      margin-left: 10px;
    }
    body ul.tabs li a:after,
    .icon-selector-default-icon,
    #icon-dialog .icon-wrapper,
    body .icon-cell,
    body ul.tabs li a:after {
      font-family: '" . $css_name . "' !important;'
    }";

  // Add the font css to the page.
  drupal_add_css($css, array(
    'group' => CSS_THEME,
    'type' => 'inline',
    'weight' => '9999',
  ));
}

/**
 * Implements hook_process_HOOK() for menu_local_tasks().
 *
 * Unsets MENU_LOCAL_TASKS prior to display, if our block has been displayed and
 * we're not currently in the process of rendering the plain MENU_LOCAL_TASKS.
 */
function icon_tabs_process_menu_local_tasks(&$variables) {
  $static = &drupal_static('icon_tabs_rendered');

  // Get the icon_tabs_hide_default variable.
  $hide_default = variable_get('icon_tabs_hide_default', 1);

  // If the Icons tabs block has been rendered.
  $block_already_rendered = isset($static['block_rendered']) && $static['block_rendered'];

  if ($block_already_rendered && $hide_default) {
    // Prevents the Local Tasks from being rendered if our block already has.
    $variables = array();
  }
}

/**
 * Custom function used to generate css class from string.
 */
function _icon_tabs_generate_class_name($text) {
  // Remove numbers (entity ids) from class.
  $text = preg_replace('/[^\\/\-a-z\s]/i', '', $text);
  // Convert text to a nice class name.
  $text = drupal_html_class($text);
  // Remove trailing dash if there is one.
  $class = rtrim($text, "-");

  return $class;
}

/**
 * Custom function to return the icon_tabs_classes variable.
 */
function _icon_tabs_get_tab_classes($return_defaults = FALSE) {

  // Array of common tabs provided by default. Order is: class, title, code.
  $default_tabs = array(
    array('default', 'Default Icon', 'e690'),
    array('menu-item-node', 'View', 'e6c6'),
    array('menu-item-user', 'View', 'e670'),
    array('menu-item-taxonomy-term', 'View', 'e6c6'),
    array('menu-item-node--edit', 'Edit', 'e605'),
    array('menu-item-user--edit', 'Edit', 'e605'),
    array('menu-item-taxonomy-term--edit', 'Edit', 'e605'),
    array('menu-item-node--display', 'Manage display', 'e74c'),
    array('menu-item-user--display', 'Manage display', 'e74c'),
    array('menu-item-taxonomy-term--display', 'Manage display', 'e74c'),
    array('menu-item-node--devel', 'Devel', 'e68f'),
    array('menu-item-user--devel', 'Devel', 'e68f'),
    array('menu-item-taxonomy-term--devel', 'Devel', 'e68f'),
    array('menu-item-node--translate', 'Translate', 'e6c2'),
    array('menu-item-user--translate', 'Translate', 'e6c2'),
    array('menu-item-taxonomy-term--translate', 'Translate', 'e6c2'),
    array('menu-item-user-register', 'Create new account', 'e670'),
    array('menu-item-user-password', 'Request new password', 'e687'),
    array('menu-item-node--webform', 'Webform', 'e628'),
    array('menu-item-node--webform-results', 'Results', 'e6fe'),
  );

  if ($return_defaults) {
    return $default_tabs;
  }

  // Create $defaults array for the icon_tabs_variable using $defaults_tabs.
  foreach ($default_tabs as $tab) {
    // Put into same structure as variable expects.
    $defaults[$tab[0]] = array(
      'title' => $tab[1],
      'class' => array($tab[0]),
      'code' => $tab[2],
    );
  }

  // Return the variable_get with defaults.
  return variable_get('icon_tabs_classes', $defaults);

}

/**
 * Custom function to return an array of icons in font.
 */
function _icon_tabs_get_icons() {
  // Default svg.
  $svg_file = drupal_get_path('module', 'icon_tabs') . '/font/icontabs.svg';
  // If the user has uploaded their own svg.
  if (variable_get('icon_tabs_custom_icon_font', 0) && variable_get('icon_tabs_svg_path', '') != '') {
    $svg_file = variable_get('icon_tabs_svg_path', '');
  }
  $icons = array();

  // Load the icon font svg file.
  $font = new DOMDocument();
  $font->load($svg_file);

  // Get each glyph (icon).
  $glyphs = $font->getElementsByTagName('glyph');

  // Go through the glyphs and get the data from each one.
  foreach ($glyphs as $glyph) {
    // The unicode icon itself.
    $icon = $glyph->getAttribute('unicode');
    // The icon code.
    $code = bin2hex(iconv('UTF-8', 'UTF-16BE', $icon));
    // The data of the glyph.
    $data = $glyph->getAttribute('d');
    // If there is any data (if it is a valid glyph);
    if ($data) {
      $icons[$code]['icon'] = $icon;
      $icons[$code]['code'] = $code;
    }
  }

  return $icons;
}
