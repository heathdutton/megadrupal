<?php

/**
 * @todo
 * delete form isn't bringing in extra options
 * thread types form protection
 * report to mollom linkage - nice to have
 * option to choose whether or not to publish/unpublish before pushin to mod queue
 * check that thread is unpublished after post is unpublished
 */

/**
 * Implements hook_permission().
 */
function harmony_mollom_permission() {
  return array(
    'administer harmony_mollom' => array(
      'title' => t('Moderate Harmony Mollom integration'),
      'description' => t('Gives access to the Harmony Mollom integration settings.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_menu().
 */
function harmony_mollom_menu() {
  $items = array();

  $items['admin/harmony/config/moderation/mollom'] = array(
    'title' => 'Mollom',
    'description' => 'Configure Harmony & Mollom integration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('harmony_mollom_settings_form'),
    'access arguments' => array('administer harmony_mollom'),
  );

  return $items;
}

/**
 * The two following Mollom module hooks are named for harmony_core which I
 * dislike greatly, shouldn't be defining hooks for other modules. We need to
 * do this so that when things like "delete form file" are used,
 * module_load_include grabs whatever from the correct module.
 */

/**
 * Implements hook_mollom_form_list().
 */
function harmony_core_mollom_form_list() {
  $forms = array();

  $forms['harmony_core_thread_form'] = array(
    'title' => t('Thread form'),
    'entity' => 'harmony_thread',
    'delete form' => 'harmony_thread_delete_confirm',
    'delete form file' => array(
      'name' => 'harmony_core.pages',
    ),
    'report path' => 'thread/%id/delete',
  );

  $forms['harmony_core_post_form'] = array(
    'title' => t('Post form'),
    'entity' => 'harmony_post',
    'delete form' => 'harmony_post_delete_confirm',
    'delete form file' => array(
      'name' => 'harmony_core.pages',
    ),
    'report path' => 'post/%id/delete',
  );

  return $forms;
}

/**
 * Implements hook_mollom_form_info().
 */
function harmony_core_mollom_form_info($form_id) {
  switch ($form_id) {
    case 'harmony_core_thread_form':
      $form_info = array(
        'bypass access' => array('administer harmony forum content', 'bypass harmony forum access control'),
        'moderation callback' => 'harmony_mollom_thread_moderate_callback',
        'elements' => array(
          'title' => t('Title'),
          'harmony_mollom_text' => t('Text'),
        ),
        'mapping' => array(
          'post_id' => 'thread_id',
          'post_title' => 'title',
        ),
      );
      break;

    case 'harmony_core_post_form':
      $form_info = array(
        'bypass access' => array('administer harmony forum content', 'bypass harmony forum access control'),
        'moderation callback' => 'harmony_mollom_post_moderate_callback',
        'elements' => array(
          'field_harmony_text][und][0][value' => t('Text'),
        ),
        'mapping' => array(
          'post_id' => 'post_id',
        ),
        'entity delete callback' => 'harmony_post_delete_thread',
        // Looking at the mollom module code this is to be removed as an option
        // but we've got this function anywho.
        'entity delete multiple callback' => 'harmony_post_delete_thread_multiple',
      );
      break;

    default:
    $form_info = array();
  }

  return $form_info;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * In order to integrate Mollom with the thread form we need to copy the post
 * text value to a simpler array property so it can be grabbed, instead of the
 * embedded inline entity form.
 */
function harmony_mollom_form_harmony_core_thread_form_alter(&$form, &$form_state, $form_id) {
  // Add in a custom submit handler which will go before the harmony_core one.
  array_unshift($form['#validate'], 'harmony_mollom_thread_form_validate');
}

/**
 * Form validate handler for the Harmony core thread form to copy the inline
 * entity post form value to the form_state in an easy to get to way.
 */
function harmony_mollom_thread_form_validate($form, &$form_state) {
  // This makes me a bit sad...
  $thread_lang = !empty($form_state['values']['thread']->language) ? $form_state['values']['thread']->language : LANGUAGE_NONE;
  $post_lang = !empty($form_state['values']['thread']->language) ? $form_state['values']['field_harmony_first_post'][$thread_lang]['form']['post']->language : LANGUAGE_NONE;

  if (!empty($form_state['values']['field_harmony_first_post'][$thread_lang]['form']['field_harmony_text'][$post_lang][0]['value'])) {
    $form_state['values']['harmony_mollom_text'] = $form_state['values']['field_harmony_first_post'][$thread_lang]['form']['field_harmony_text'][$post_lang][0]['value'];
  }
}

/**
 * Thread moderation callback.
 */
function harmony_mollom_thread_moderate_callback(&$form, &$form_state) {
  // Unpublish this thread.
  $form_state['values']['status'] = HARMONY_NOT_PUBLISHED;

  // We need the post to exist before we can flag it, we want the thread to
  // exist too. Prepare for hook_harmony_thread_save_finalised by setting a
  // value now.
  $form_state['values']['thread']->harmony_mollom_flag_content = TRUE;
  $form_state['values']['thread']->to_be_unpublished = TRUE;
}

/**
 * Post moderation callback.
 */
function harmony_mollom_post_moderate_callback(&$form, &$form_state) {
  // Unpublish this thread.
  $form_state['values']['status'] = HARMONY_NOT_PUBLISHED;

  // We need the post to exist before we can flag it, we want the thread to
  // exist too. Prepare for hook_harmony_thread_save_finalised by setting a
  // value now.
  $form_state['values']['post']->harmony_mollom_flag_content = TRUE;
  $form_state['values']['thread']->to_be_unpublished = TRUE;
}

/**
 * Implements hook_harmony_thread_save_finalised().
 */
function harmony_mollom_harmony_thread_save_finalised(&$thread, &$form_state) {
  if (!empty($thread->harmony_mollom_flag_content)) {
    $wrapper = entity_metadata_wrapper('harmony_thread', $thread);
    $post_id = $wrapper->field_harmony_first_post->value() ? $wrapper->field_harmony_first_post->post_id->value() : NULL;

    // If we've worked out the first post, flag it as spam!
    if ($post_id) {
      harmony_mollom_flag_post($post_id);
    }

    // Setup a different path to redirect to so the user doesn't see an access
    // denied page.
    $message = variable_get('harmony_mollom_thread_entered_queue', t('Your thread has been entered into a moderation queue pending approval.'));
    drupal_set_message(check_plain($message));

    $redirect_path = variable_get('harmony_mollom_thread_entered_queue_redirect_path', 'forum');
    if ($redirect_path != '') {
      $form_state['redirect'] = $redirect_path;
    }
  }
}

/**
 * Implements hook_harmony_post_save_finalised().
 */
function harmony_mollom_harmony_post_save_finalised(&$post, &$form_state) {
  if (!empty($post->harmony_mollom_flag_content)) {
    // Flag the post!
    harmony_mollom_flag_post($post->post_id);

    // Setup a different path to redirect to so the user doesn't see an access
    // denied page.
    $message = variable_get('harmony_mollom_post_entered_queue', t('Your post has been entered into a moderation queue pending approval.'));
    drupal_set_message(check_plain($message));

    $redirect_path = variable_get('harmony_mollom_post_entered_queue_redirect_path', 'forum');
    if ($redirect_path != '') {
      $form_state['redirect'] = $redirect_path;
    }
  }
}

/**
 * This function takes care of flagging a post and setting the flag details
 * as to why it was flagged (Spam).
 */
function harmony_mollom_flag_post($post_id) {
  global $user;
  // @todo integrate properly with:
  // variable_get('harmony_moderation_flags', array('harmony_post_report'));

  $flag_name = 'harmony_post_report';
  // Load the flag.
  $flag = flag_get_flag($flag_name);
  $values = array(
    'fid' => $flag->fid,
    'flag_name' => $flag_name,
    'entity_type' => 'harmony_post',
    'entity_id' => $post_id,
    'uid' => $user->uid,
    'timestamp' => REQUEST_TIME,
  );

  // Create the flagging entity, set the values but don't save yet.
  $reasons = variable_get('harmony_mollom_report_reasons', array('spam', 'other'));

  $flagging = entity_create('flagging', $values);
  $flagging_wrapper = entity_metadata_wrapper('flagging', $flagging);

  $flagging_wrapper->field_harmony_moderation_source->set(t('Mollom'));
  $flagging_wrapper->field_harmony_moderation_reason->set($reasons);
  $flagging_wrapper->field_harmony_moderation_text->set(t('This content was reported by Mollom.'));

  // Set the flag.
  $flag->flag('flag', $post_id, NULL, TRUE, $flagging);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function harmony_mollom_form_harmony_thread_delete_confirm_alter(&$form, &$form_state, $form_id) {
  if (!empty($form['mollom']['feedback'])) {
    // Mollom module is a pest that changes the description weight...
    $form['description']['#weight'] = -100;
    // Change the default value to be Do not report else there isn't a default
    // value.
    $form['mollom']['feedback']['#default_value'] = '';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function harmony_mollom_form_harmony_post_delete_confirm_alter(&$form, &$form_state, $form_id) {
  if (!empty($form['mollom']['feedback'])) {
    // Mollom module is a pest that changes the description weight...
    $form['description']['#weight'] = -100;
    // Change the default value to be Do not report else there isn't a default
    // value.
    $form['mollom']['feedback']['#default_value'] = '';
  }
}

/**
 * Module settings form callback.
 */
function harmony_mollom_settings_form() {
  $form = array();

  $form['harmony_mollom_thread_entered_queue'] = array(
    '#type' => 'textfield',
    '#title' => t('Thread moderation message'),
    '#required' => TRUE,
    '#default_value' => variable_get('harmony_mollom_thread_entered_queue', t('Your thread has been entered into a moderation queue pending approval.')),
    '#description' => t("This message is shown to the user when a thread they've created is moved to the moderation queue."),
  );

  $form['harmony_mollom_post_entered_queue'] = array(
    '#type' => 'textfield',
    '#title' => t('Post moderation message'),
    '#required' => TRUE,
    '#default_value' => variable_get('harmony_mollom_post_entered_queue', t('Your post has been entered into a moderation queue pending approval.')),
    '#description' => t("This message is shown to the user when a post they've created is moved to the moderation queue."),
  );

  return system_settings_form($form);
}
