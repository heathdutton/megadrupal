<?php

/**
* @file
* Pulls sports scores updates from ESPN's bottomline service.
*
* While storing data in the DB, it provides hooks for other
* modules and users to make use of.
*/

global $_SPORTS_SCORES_SPORTS;
require_once 'sports_scores.inc';

 /**
 * Implements hook_menu().
 */
function sports_scores_menu() {
  $items = array();

  $items['sports_scores/dpm/%'] = array(
    'title' => 'Sports Scores Test Page',
    'description' => 'Test the sports scores parser',
    'page callback' => 'sports_scores_dpm',
    'page arguments' => array(2),
    'access arguments' => array(TRUE),
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/system/sports_scores'] = array(
    'title' => 'Sports Scores',
    'description' => 'Administer Sports Scores Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sports_scores_admin_settings'),
    'access arguments' => array('administer sports scores'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implement hook_help().
 */
function sports_scores_help($path, $arg) {
  switch ($path) {
    case 'admin/help#sports_scores':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Sports Scores is a module that fetches scores from an external site for certain sports. The module stores the data returned in the database, and provides hooks for other modules to integrate with.') . '</p>';
      $output .= '<h3>' . t('How to Configure') . '</h3>';
      $output .= '<ul>';
      $output .= '<li>' . t('Configure the module by following the link to the Configure link on the module page and choose the sports you would like to see scores for.') . '</li>';
      $output .= '<li>' . t('Create a new view and choose Show: Sports Scores Games') . '</li>';
      $output .= '<li>' . t('Configure the view as you normally would. Be sure to add fields to show the information you would like.') . '</li>';
      $output .= '</ul>';
      return $output;
   }
}

/**
 * Implements hook_perm().
 */
function sports_scores_perm() {
  return array('administer sports scores');
}

/**
 * Implementation of hook_cron().
 */

function sports_scores_cron() {
  $sports = sports_scores_get_sports();
  foreach ($sports as $sport => $parsers) {
    $selected_parser = sports_scores_get_sports($sport);
    if ( $selected_parser != FALSE ) {
      $last_fetch = variable_get('sports_scores_' . $sport . '_last_fetch', "0");
      $minimum_cron_timeout_minutes = variable_get('sports_scores_min_cron_timeout_minutes', "30");
      if (time() - $last_fetch > ($minimum_cron_timeout_minutes * 60)) {
        watchdog('sports_scores', 'Fetching %sport scores.', array('%sport' => $sport), WATCHDOG_NOTICE);
        $scores = sports_scores_fetch_scores($sport);
        variable_set('sports_scores_' . $sport . '_last_fetch', time());
        if (count($scores['games']) > 0) {
          $oldscores = sports_scores_load_db_scores($sport);
          sports_scores_process_game_updates($oldscores, $scores);
        }
      }
    }
  }
}

function trigger_sports_scores($game, $op, $sport) {
  if (!in_array($op, array('game_score_final', 'game_score_update'))) {
    return;
  }
  module_invoke_all('sports_scores', $op, $game, $sport);
}

/*
 * Print out the raw and parsed feed data.
 */
function sports_scores_dpm($sport) {
  $scores = sports_scores_fetch_scores($sport);
  print_r($scores);
  exit();
}


function sports_scores_admin_settings() {
  $sports = sports_scores_get_sports();
  $form = array();

  foreach ($sports as $sport => $parsers) {

    $test_link = $sport . t(' parser ') . ' ' . l("test", "sports_scores/dpm/" . $sport) . '.';

    $form['sport_' . $sport] = array(
      '#type' => 'fieldset',
      '#title' => t($sport . ' Feed'),
      '#collapsible' => TRUE,
      '#description' => $test_link,
    );

    $parser_options = array(0 => t('Disabled'));
    foreach ($parsers as $parser) {
      $parser_options[$parser['name']] = $parser['name'] . ' (' . strtoupper($parser['source'] . ') ');
    }

    $form['sport_' . $sport]['sports_scores_' . $sport . '_parser'] = array(
      '#type' => 'radios',
      '#options' => $parser_options,
      '#default_value' => variable_get('sports_scores_' . $sport . '_parser', "0"),
    );

  }

  $form['sports_scores_min_cron_timeout_minutes'] = array(
    '#type' => 'textfield',
    '#size' => 5,
    '#title' => t('Minimum cron timeout'),
    '#default_value' => variable_get('sports_scores_min_cron_timeout_minutes', "30"),
    '#description' => t('The minimum amount of time in minutes between fetching new score updates.  If you set this to zero it will fetch scores everytime cron runs.'),
  );

  return system_settings_form($form);
}


/**
 * Get a list of supported sports and parsers or return a single selected sport parser.
 *
 * @param $sport
 *   A single sport key string.
 * @param $reset
 *   A boolean switch to clear and reset the global $_SPORTS_SCORES_SPORTS list.
 *
 * @return
 *   A deep array of supported sports and parsers OR a single sport-parser.
 */
function sports_scores_get_sports($sport = NULL, $reset = FALSE) {
  global $_SPORTS_SCORES_SPORTS;

  if ($reset || !isset($_SPORTS_SCORES_SPORTS)) {
    $_SPORTS_SCORES_SPORTS = module_invoke_all('sports_scores_info');
  }

  if (isset($sport)) {
    foreach ($_SPORTS_SCORES_SPORTS[$sport] as $parser) {
      $parser_name = variable_get('sports_scores_' . $sport . '_parser', "0");
      if ( $parser_name == "0") {
        return FALSE;
      }
      elseif ( $parser['name'] == $parser_name ) {
        return $parser;
      }
    }
  }
  else {
    return $_SPORTS_SCORES_SPORTS;
  }
}


/**
 * Implementation of hook_sports_scores_info().
 * Other implementing module's results will be merged with this one.
 * Right now the 'name' property is key within a sport.
 * Other modules implementing the same sport should have unique names.
 *
 * @return
 *   A keyed array, array('Sport' => array( array('name'=>'', 'url=>'', 'parser'=>'', 'source'=>''), ... )).
 */
function sports_scores_sports_scores_info() {
  $s = array();
  $s['NFL'] = array(
    array('name' => 'nfl.com scorestrip regular season json',
          'sport' => 'NFL',
          'url' => array(
            'http://www.nfl.com/liveupdate/scorestrip/scorestrip.json',
          ),
          'parser' => 'sports_scores_parse_nfl_dot_com_result',
          'source' => 'Sports Scores',
          'feed_timezone' => 'America/New_York',
    ),
    array('name' => 'nfl.com scorestrip post-season json',
          'sport' => 'NFL',
          'url' => array(
            'http://www.nfl.com/liveupdate/scorestrip/postseason/scorestrip.json',
          ),
          'parser' => 'sports_scores_parse_nfl_dot_com_result',
          'source' => 'Sports Scores',
          'feed_timezone' => 'America/New_York',
    ),
    array('name' => 'espn bottomline',
          'sport' => 'NFL',
          'url' => 'http://sports.espn.go.com/nfl/bottomline/scores',
          'parser' => 'sports_scores_parse_espn_dot_com_result',
          'source' => 'Sports Scores',
          'feed_timezone' => 'America/New_York',
    ),
  );
  $s['NBA'] = array(
    array('name' => 'espn bottomline',
          'sport' => 'NBA',
          'url' => 'http://sports.espn.go.com/nba/bottomline/scores',
          'parser' => 'sports_scores_parse_espn_dot_com_result',
          'source' => 'Sports Scores',
          'feed_timezone' => 'America/New_York',
    ),
  );
  $s['MLB'] = array(
    array('name' => 'espn bottomline',
          'sport' => 'MLB',
          'url' => 'http://sports.espn.go.com/mlb/bottomline/scores',
          'parser' => 'sports_scores_parse_espn_dot_com_result',
          'source' => 'Sports Scores',
          'feed_timezone' => 'America/New_York',
    ),
  );
  $s['NHL'] = array(
    array('name' => 'espn bottomline',
          'sport' => 'NHL',
          'url' => 'http://sports.espn.go.com/nhl/bottomline/scores',
          'parser' => 'sports_scores_parse_espn_dot_com_result',
          'source' => 'Sports Scores',
          'feed_timezone' => 'America/New_York',
    ),
  );
  $s['NCAA_Football'] = array(
    array('name' => 'espn bottomline',
          'sport' => 'NCAA_Football',
          'url' => 'http://sports.espn.go.com/ncf/bottomline/scores',
          'parser' => 'sports_scores_parse_espn_dot_com_result',
          'source' => 'Sports Scores',
          'feed_timezone' => 'America/New_York',
    ),
  );
  $s['EURO_Soccer'] = array(
    array('name' => 'espn bottomline soccernet',
          'sport' => 'EURO_Soccer',
          'url' => 'http://soccernet.espn.go.com/bottomline/scores/scores?scoresSource=euro',
          'parser' => 'sports_scores_parse_espn_soccernet_result',
          'source' => 'Sports Scores',
          'feed_timezone' => 'America/New_York',
    ),
  );
  $s['UK_Soccer'] = array(
    array('name' => 'espn bottomline soccernet',
          'sport' => 'UK_Soccer',
          'url' => 'http://soccernet.espn.go.com/bottomline/scores/scores?scoresSource=uk',
          'parser' => 'sports_scores_parse_espn_soccernet_result',
          'source' => 'Sports Scores',
          'feed_timezone' => 'America/New_York',
    ),
  );
  $s['USA_Soccer'] = array(
    array('name' => 'espn bottomline soccernet',
          'sport' => 'USA_Soccer',
          'url' => 'http://soccernet.espn.go.com/bottomline/scores/scores?scoresSource=usa',
          'parser' => 'sports_scores_parse_espn_soccernet_result',
          'source' => 'Sports Scores',
          'feed_timezone' => 'America/New_York',
    ),
  );

  return $s;
}


/**
 * Implementation of hook_views_api for Views integration.
 */
function sports_scores_views_api() {
 return array(
   'api' => 2,
 );
}
