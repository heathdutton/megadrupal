<?php

/**
 * @file
 * Tests for OpenstackQueues. Run with Simpletest.
 */

/**
 * Tests queue functionality.
 */
class OpenstackQueuesTest extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'OpenstackQueues',
      'description' => 'Check basic queue functionality.',
      'group' => 'OpenstackQueues',
    );
  }

  public function setUp() {
    parent::setUp('openstack_queues');
  }

  /**
   * Test basic queue functionality.
   */
  public function testQueue() {
    global $conf;
    global $databases;

    // This will need to be adjusted for your environment.
    $conf['openstack_queues_default_queue'] = array(
      'client_id' => $_ENV['marconi_client_id'],
      'auth_url' => 'https://identity.api.rackspacecloud.com/v2.0/',
      'credentials' => array(
        'username' => $_ENV['marconi_username'],
        'apiKey' => $_ENV['marconi_apikey'],
      ),
      'region' => $_ENV['marconi_region'],
      'service' => 'cloudQueues',
      'prefix' => $databases['default']['default']['database'],
      'provider' => 'Rackspace', // There is an OpenCloud\Rackspace class
    );

    $name1 = $this->randomName();
    $name2 = $this->randomName();

    variable_set('queue_class_' . $name1, 'OpenstackQueuesQueue');
    variable_set('queue_class_' . $name2, 'OpenstackQueuesQueue');

    $queue1_settings = openstack_queues_get_queue_options($name1);
    $queue2_settings = openstack_queues_get_queue_options($name2);

    variable_set('openstack_queues_queue_' . $name1, $queue1_settings);
    variable_set('openstack_queues_queue_' . $name2, $queue2_settings);

    $queue1 = DrupalQueue::get($name1);
    $queue1->createQueue();
    $queue2 = DrupalQueue::get($name2);
    $queue2->createQueue();

    $data = array();
    for ($i = 0; $i < 4; $i++) {
      $data[] = array($this->randomName() => $this->randomName());
    }

    $this->assertTrue($queue1->createItem($data[0]), t('Adding first item to Queue 1'));
    $this->assertTrue($queue1->createItem($data[1]), t('Adding second item to Queue 1'));

    $items = array();
    $new_items = array();

    $items[] = $item = $queue1->claimItem();
    $new_items[] = $item->data;

    $items[] = $item = $queue1->claimItem();
    $new_items[] = $item->data;

    $score = $this->queueScore($data, $new_items);
    $this->assertEqual($score, 2, t('Two items matched - score of @score', array('@score' => $score)));

    $this->assertEqual($this->queueScore($new_items, $new_items), 2, t('Two items matched - no duplicates claimed.'));

    foreach ($items as $item) {
      $queue1->deleteItem($item);
    }

    $this->assertFalse($queue1->numberOfItems(), t('Queue 1 is empty. Both items were deleted from this queue.'));
    $this->assertFalse($queue2->numberOfItems(), t('Queue 2 is empty. No items were added to this queue.'));
  }

  /**
   * Helper function to compare number of items.
   */
  private function queueScore($items, $new_items) {
    $score = 0;
    foreach ($items as $item) {
      foreach ($new_items as $new_item) {
        if ($item == $new_item) {
          $score++;
        }
      }
    }

    return $score;
  }

}
