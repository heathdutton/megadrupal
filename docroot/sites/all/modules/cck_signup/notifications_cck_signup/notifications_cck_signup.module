<?php
/**
 * @file
 * Notification integration for the CCK Sign-up module.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 */
function notifications_cck_signup_form_node_type_form_alter(&$form, $form_state) {
  module_load_include('admin.inc', 'notifications_cck_signup');
  _notifications_cck_signup_form_node_type_form_alter($form, $form_state);
}

/**
 * Implements hook_node_insert().
 */
function notifications_cck_signup_node_insert($node) {
  $account = user_load($node->uid);
  if (($signup_field = variable_get('cck_signup_signup_type_' . $node->type, 0))
     && notifications_user_setting('signup', $account, TRUE)
     && !empty($account->uid)) {
    // Signup for initial notification.
    $subscription = (object) array(
      'uid' => $account->uid,
      'type' => 'signup',
      'event_type' => 'initial',
      'fields' => array(
        'nid' => $node->nid,
      ),
    );
    notifications_save_subscription($subscription);

    // Signup for reminder.
    unset($subscription->sid);
    $subscription->type = 'reminder';
    $subscription->event_type = 'reminder';
    $subscription->fields['nid'] = $node->{$signup_field}[0]['nid'];
    notifications_save_subscription($subscription);

    // Trigger initial signup.
    $event = array(
      'module' => 'cck_signup',
      'oid' => $node->nid,
      'uid' => $account->uid,
      'type' => 'initial',
      'action' => 'insert',
      'node' => $node,
      'params' => array('nid' => $node->nid),
    );
    notifications_event($event);
  }
}

/**
 * Implements hook_node_delete().
 */
function notifications_cck_signup_node_delete($node) {
  if ($signup_field = variable_get('cck_signup_signup_type_' . $node->type, 0)) {
    // Remove reminder notifications for this signup.
    $params = array(
      'event_type' => 'reminder',
      'uid' => $account->uid,
    );
    $conditions = array('nid' => $node->{$signup_field}[0]['nid']);
    Notifications_Subscription::delete_multiple($params, $conditions);
  }
}

/**
 * Implements hook_nodeapi().
 */
function notifications_cck_signup_nodeapi_OLD(&$node, $op) {
  // TODO Remaining code in this function needs to be moved to the appropriate new hook function.
  // TODO Convert "user_load" to "user_load_multiple" if "$node->uid" is other than a uid.
  // To return a single user object, wrap "user_load_multiple" with "array_shift" or equivalent.
  // Example: array_shift(user_load_multiple(array(), $node->uid))
  $account = user_load($node->uid);
}

/**
 * Implements hook_notifications().
 */
function notifications_cck_signup_notifications($op, &$arg0, $arg1 = NULL, $arg2 = NULL) {
  switch ($op) {
    case 'names':
      $subs = &$arg0;
      break;

    case 'subscription types':
      $types['signup'] = array(
        'title' => t('Initial sign-up notice'),
        'access' => 'subscribe to signups',
        'fields' => array('nid'),
        'event_type' => 'initial',
        'description' => t('Subscribe to initial e-mail reminder for sign-ups'),
      );
      $types['reminder'] = array(
        'title' => t('Signup reminder notifications'),
        'access' => 'subscribe to signups',
        'fields' => array('nid'),
        'event_type' => 'reminder',
        'description' => t('Subscribe to e-mail reminders for upcoming shifts you are signed up for.'),
      );
      return $types;

    case 'subscription fields':
      // Information about available fields for subscriptions.
      $fields['nid'] = array(
        'name' => t('Shifts'),
        'field' => 'nid',
        'type' => 'int',
        'format callback' => 'notifications_cck_signup_get_title',
      );
      return $fields;

    case 'event types':
      $types[] = array(
        'type' => 'reminder',
        'action' => 'approaching',
        'name' => t('Sign-up reminder'),
        'line' => "Shift reminder [title]",
        'digest' => array('feed', 'type'),
        'description' => t('Event reminder'),
      );
      $types[] = array(
        'type' => 'initial',
        'action' => 'insert',
        'name' => t('Initial sign-up'),
        'line' => '',
        'digest' => array('node', 'type'),
        'description' => t('Initial event sign-up'),
      );
      return $types;

    case 'query':
      // $arg2 is $event array.
      if ($arg0 == 'event' && in_array($arg1, array('reminder', 'initial')) && ($node = $arg2->node)) {
        $query[]['fields'] = array(
          'nid' => $node->nid,
        );

        return $query;
      }
      break;

    case 'event objects':
      return array(
        'node' => t('Node'),
      );

    case 'event load':
      $event = &$arg0;
      $load = array();
      if ($event->module == 'cck_signup') {
        if (!empty($event->params['nid']) && empty($event->objects['node'])) {
          if ($node = node_load($event->params['nid'])) {
            $event->objects['node'] = $node;
          }
          else { // Node not available anymore, mark event for deletion
            $event->delete = TRUE;
          }
        }
      }
      break;

    case 'access':
      // @TODO
      return array(TRUE);

    case 'event queued':
      $event = $arg0;
      $query = $arg1;
      if ($event->type == 'reminder' && $event->action == 'approaching') {
        // Remove subscriptions for reminders for this event.
        // TODO Please convert this statement to the D7 database API syntax.
        /* db_query("UPDATE {notifications} n LEFT JOIN {notifications_fields} nf ON (nf.sid = n.sid AND nf.field = 'nid') SET status = 0 WHERE nf.intval=%d", array(':nid' => $event->node->nid)) */
        NULL;
      }
      break;
  }
}

/**
 * Convert a given nid to the corresponding title.
 */
function notifications_cck_signup_get_title($nid) {
  return db_select('node', 'n')
    ->fields('n', array('title'))
    ->condition('nid', $nid)
    ->execute()
    ->fetchField();
}

/**
 * Implements hook_cron().
 *
 * Detects upcoming events and fires notification events.
 */
function notifications_cck_signup_cron() {
  xdebug_break();
  foreach (node_type_get_types() as $type) {
    if (variable_get('cck_signup_type_' . $type->type, 0) && $field = variable_get('cck_signup_field_date_' . $type->type, FALSE)) {
      // Find all upcoming shifts for this type.
      $field = field_info_field($field);
      // @TODO Ideally this would an EntityFieldQuery.
      $table = 'field_data_' . $field['field_name'];
      $column = $field['storage']['details']['sql'][FIELD_LOAD_CURRENT][$table]['value'];

      // The interval before the event to send notifications.
      $interval = variable_get('notification_cck_signup_interval_' . $type->type, 2);
      if ($interval > 0) {
        $query = db_select('node', 'n')
          ->fields('n', array('nid'));
        $query->leftJoin($table, 's', 's.revision_id = n.vid');
        $query->condition('n.type', $type->type);
        $query->where("STR_TO_DATE($column, '%%Y-%%m-%%dT%%T') BETWEEN now() AND now() + INTERVAL $interval DAY");
        $result = $query->execute();
        foreach ($result as $nid) {
          $node = node_load($nid->nid);
          $event = array(
            'module' => 'cck_signup',
            'oid' => $node->nid,
            'uid' => 0,
            'type' => 'reminder',
            'action' => 'approaching',
            'node' => $node,
            'params' => array('nid' => $node->nid),
          );
          notifications_event($event);
        }
      }
    }
  }
}

/**
 * Implements hook_messaging().
 */
function notifications_cck_signup_messaging($op, $arg1 = NULL, $arg2 = NULL, $arg3 = NULL, $arg4 = NULL) {
  switch ($op) {
    case 'message groups':
      // Generic notifications event.
      $info['notifications-cck-signup'] = array(
        'module' => 'notifications_cck_signup',
        'name' => t('CCK sign-up notifications (default)'),
        'help' => t('Most fields will be provided during the event.'),
        'description' => t('Notifications for CCK Sign-up events.'),
      );
      $info['notifications-event-initial-insert'] = array(
        'module' => 'notifications_cck_signup',
        'name' => t('E-mail on initial sign-up'),
        'help' => t('Most fields will be provided during the event.'),
        'description' => t('Initial sign-up notification.'),
      );
      $info['notifications-event-reminder-approaching'] = array(
        'module' => 'notifications_cck_signup',
        'name' => t('Reminder e-mail'),
        'help' => t('Most fields will be provided during the event.'),
        'description' => t('The reminder e-mail sent out prior to the event.'),
      );
      $info['notifications-cck-signup-remove'] = array(
        'module' => 'notifications_cck_signup',
        'name' => t('Sign-up removal'),
        'help' => t('Most fields will be provided during the event.'),
        'description' => t('E-mail sent out when a user removes the sign-up'),
      );
      return $info;

    case 'message keys':
      $type = $arg1;
      switch ($type) {
        case 'notifications-cck-signup':
        case 'notifications-event-initial-insert':
        case 'notifications-event-reminder-approaching':
        case 'notifications-cck-signup-remove':
          return array(
            'subject' => t('Subject'),
            'header' => t('Body header'),
            'main' => t('Body'),
            'footer' => t('Body footer')
          );
          break;
      }
      break;

    case 'messages':
      $type = $arg1;
      switch ($type) {
        case 'notifications-event-initial-insert':
          return array(
            'subject' => t('[site-name] [title]'),
            'header' => t('Greetings, [user]'),
            'main' => array(
              t('You have signed up for [event-title]'),
              t('Date/time: [event-dates]'),
              t('Manage this sign-up: [node-edit-url].'),
            ),
            'footer' => array(
              t('This is an automatic message from [site-name]'),
              t('To manage your subscriptions, browse to [subscriptions-manage]'),
            ),
          );
          break;

        case 'notifications-event-reminder-approaching':
          return array(
            'subject' => t('[site-name] [title]'),
            'header' => t('Greetings, [user]'),
            'main' => array(
              t('This is a reminder that you have signed-up for [event-title]'),
              t('Date/time: [event-dates]'),
              t('Manage this sign-up: [node-edit-url]'),
            ),
            'footer' => array(
              t('This is an automatic message from [site-name]'),
              t('To manage your subscriptions, browse to [subscriptions-manage]'),
            ),
          );
          break;
      }
      break;

    case 'tokens':
      $tokens = array();
      $type = explode('-', $arg1);

      if (($type[2] == 'initial' && $type[3] == 'insert')
         || ($type[2] == 'reminder' && $type[3] == 'approaching')) {
        $tokens = array('global', 'subscription', 'user', 'node', 'comment');
      }

      return $tokens;
  }
}

/**
 * Implements hook_token_list(). Documents the individual().
 * tokens handled by the module.
 */
function notifications_cck_signup_token_list($type = 'all') {
  $tokens = array();
  if ($type == 'node' || $type == 'all') {
    $tokens['node']['node-teaser']     = t('The node teaser.');
    $tokens['node']['node-body']       = t('The node body.');
    $tokens['node']['node-url']        = t('The node view url for read more links.');
    $tokens['node']['node-edit-url']   = t('Edit link for the node.');
    $tokens['node']['node-teaser-raw'] = t('Unfiltered node teaser. WARNING - raw user input.');
    $tokens['node']['node-body-raw']   = t('Unfiltered node body. WARNING - raw user input.');

    // Event nodes.
    $tokens['node']['event-title']      = t('The event title.');
    $tokens['node']['event-title-raw']  = t('Unfiltered event title. WARNING - raw user input.');
    $tokens['node']['event-teaser']     = t('The event teaser.');
    $tokens['node']['event-teaser-raw'] = t('Unfiltered event teaser. WARNING - raw user input.');
    // Dates.
    $tokens['node']['event-dates']      = t('The dates (in medium format) of the event.');
  }
  return $tokens;
}

/**
 * Implements hook_token_values().
 */
function notifications_cck_signup_token_values($type, $object = NULL, $options = array()) {
  switch ($type) {
    case 'node':
      if ($node = $object) {
        $values['node-teaser'] = !empty($node->teaser) ? check_markup($node->teaser, $node->format, $langcode = '' /* TODO Set this variable. */, FALSE) : '';
        $values['node-body'] = !empty($node->body) ? check_markup($node->body, $node->format, $langcode = '' /* TODO Set this variable. */, FALSE) : '';
        $values['node-url'] = url('node/' . $node->nid, array('absolute' => TRUE));
        $values['node-edit-url'] = url('node/' . $node->nid . '/edit', array('absolute' => TRUE));
        $values['node-teaser-raw'] = !empty($node->teaser) ? $node->teaser : '';
        $values['node-body-raw'] = !empty($node->body) ? $node->body : '';

        if (($field = variable_get('cck_signup_signup_type_' . $node->type, FALSE))
           && ($event = node_load($node->{$field}[0]['nid']))) {
          // If this is a sign-up, load the event.
          _notifications_cck_signup_make_event_tokens($values, $event);
        }
        elseif (variable_get('cck_signup_field_' . $node->type, FALSE)) {
          // If this is an event, populate tokens.
          _notifications_cck_signup_make_event_tokens($values, $node);
        }
        return $values;
      }
      break;
  }
}

/**
 * Helper function to create tokens from an event node.
 *
 * @param $values
 *   Array of token/value pairs.
 * @param $event
 *   A CCK-Signup event node object.
 */
function _notifications_cck_signup_make_event_tokens(&$values, $event) {
  $values['event-title'] = check_plain($event->title);
  $values['event-title-raw'] = $event->title;
  $values['event-teaser'] = !empty($event->teaser) ? check_markup($event->teaser, $event->format, $langcode = '' /* TODO Set this variable. */, FALSE) : '';
  $values['event-teaser-raw'] = !empty($event->teaser) ? $event->teaser : '';

  $date_field = variable_get('cck_signup_field_date_' . $event->type, FALSE);
  if ($date_field) {
    // @TODO Ideally this would be as flexible as the tokens defined by the date module.
    $timezone_db = !empty($event->{$date_field}[0]['timezone_db']) ? $event->{$date_field}[0]['timezone_db'] : 'UTC';
    $timezone = !empty($event->{$date_field}[0]['timezone'])
      ? $event->{$date_field}[0]['timezone']
      : date_default_timezone_name();

    $date1 = date_make_date($event->{$date_field}[0]['value'], $timezone_db);
    $date2 = date_make_date($event->{$date_field}[0]['value2'], $timezone_db);
    if ($timezone != $timezone_db) {
      date_timezone_set($date1, timezone_open($timezone));
      date_timezone_set($date2, timezone_open($timezone));
    }
    $date1 = date_format_date($date1);
    $date2 = date_format_date($date2);

    if ($date1 && $date2) {
      // TODO Please change this theme call to use an associative array for the $variables parameter.
      $values['event-dates'] = theme('date_display_range', $date1, $date2);
    }
    elseif ($date1) {
      $values['event-dates'] = $date1;
    }
    else {
      $values['event-dates'] = '';
    }
  }
}
