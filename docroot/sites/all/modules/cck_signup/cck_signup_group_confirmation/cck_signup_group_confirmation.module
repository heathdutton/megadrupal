<?php

/**
 * @file
 * CCK Sign-up Group Confirmation module allows for users to
 * confirm attendance of a shift or event that a group has registered
 * to attend.
 */

/**
 * Implements hook_form_FROM_ID_alter().
 */
function cck_signup_group_confirmation_form_node_type_form_alter(&$form, $form_state) {
  module_load_include('admin.inc', 'cck_signup_group_confirmation');
  _cck_signup_group_confirmation_form_node_type_form_alter($form, $form_state);
}

/**
 * Implements hook_form_alter().
 */
function cck_signup_group_confirmation_form_alter(&$form, $form_state, $form_id) {
  if (!empty($form['type']['#value'])) {
    if ($form_id == $form['type']['#value'] . '_node_form'
       && variable_get('cck_signup_group_confirmation_type_' . $form['type']['#value'], FALSE)
       && !in_array('_cck_signup_group_confirmation_validate_node', $form['#validate'])) {
      $form['#validate'][] = '_cck_signup_group_confirmation_validate_node';
    }
  }
}

/**
 * Implements hook_link_alter().
 */
function cck_signup_group_confirmation_link_alter(&$links, $node) {
  // Check if this is a sign-up node, that has a group confirmation field
  // pointing back at it.
  if ($field = variable_get('cck_signup_group_confirmation_field_' . $node->type, FALSE)) {
    // Load the field definition.
    $field = content_fields($field);

    // The key that will be passed in the $links array.
    $key = $field['type_name'] . '_' . $field['field_name'];

    if (!cck_signup_group_is_group_signup($node)) {
      // This isn't a group sign-up, so the add link is unset.
      if (isset($links[$key])) {
        unset($links[$key]);
      }
    }

    if (isset($links[$key]) && $confirmation = cck_signup_group_confirmation_get_confirmation($node)) {
      $links[$key] = array(
        'href' => 'node/' . $confirmation->nid . '/edit',
        'title' => t('Manage your attendance'),
        'attributes' => array('title' => t('Manage your attendance')),
      );
    }
  }
}

/**
 * Implements hook_nodeapi().
 */
function cck_signup_group_confirmation_nodeapi_OLD(&$node, $op) {
  // TODO Remaining code in this function needs to be moved to the appropriate new hook function.
  if (module_exists('notifications_cck_signup')) {
    // TODO Convert "user_load" to "user_load_multiple" if "$node->uid" is other than a uid.
    // To return a single user object, wrap "user_load_multiple" with "array_shift" or equivalent.
    // Example: array_shift(user_load_multiple(array(), $node->uid))
    $account = user_load($node->uid);

    if ($op == 'insert'
       && variable_get('cck_signup_group_confirmation_field_' . $node->type, FALSE)
       && cck_signup_group_is_group_signup($node)
       && notifications_user_setting('group_confirmation', $account, TRUE)) {
      // This is a group sign-up that has a confirmation field
      // pointing back at it. Subscribe group creator to
      // confirmations.
      $subscription = (object) array(
        'uid' => $account->uid,
        'type' => 'group_confirmation',
        'event_type' => 'group_confirmation',
        'fields' => array(
          'nid' => $node->nid,
        ),
      );
      notifications_save_subscription($subscription);
    }

    // Trigger notifications event for users that are subscribed to
    // receive notifications of attendance confirmation.
    if ($op == 'insert'
       && ($signup_field = variable_get('cck_signup_group_confirmation_type_' . $node->type, FALSE))
       && !empty($node->{$signup_field})) {
      // This is a group confirmation, load the signup node and then the event
      // node.
      $signup = node_load($node->{$signup_field}[0]['nid']);
      $event_field = variable_get('cck_signup_signup_type_' . $signup->type, FALSE);
      $event = node_load($signup->{$event_field}[0]['nid']);

      // Trigger notification for groups.
      $notifications_event = array(
        'module' => 'cck_signup',
        'oid' => $signup->nid,
        'uid' => $signup->uid,
        'type' => 'group_confirmation',
        'action' => 'insert',
        'node' => $node,
        'params' => array('nid' => $node->nid),
      );
      notifications_event($notifications_event);

      // Subscribe the individual that confirmed attendance to the
      // event notifications.
      $subscription = (object) array(
        'uid' => $account->uid,
        'type' => 'signup',
        'event_type' => 'initial',
        'fields' => array(
          'nid' => $node->nid,
        ),
      );
      notifications_save_subscription($subscription);

      // Signup for reminder.
      unset($subscription->sid);
      $subscription->type = 'reminder';
      $subscription->event_type = 'reminder';
      $subscription->fields['nid'] = $event->nid;
      notifications_save_subscription($subscription);

      // Trigger initial sign-up.
      $event = array(
        'module' => 'cck_signup',
        'oid' => $node->nid,
        'uid' => $account->uid,
        'type' => 'initial',
        'action' => 'insert',
        'node' => $node,
        'params' => array('nid' => $node->nid),
      );
      notifications_event($event);
    }
  }
}

/**
 * Implements hook_notifications().
 */
function cck_signup_group_confirmation_notifications($op, &$arg0, $arg1 = NULL, $arg2 = NULL) {
  switch ($op) {
    case 'subscription types':
      $types['group_confirmation'] = array(
        'title' => t('Initial sign-up notice'),
        'access' => 'subscribe to group confirmations',
        'fields' => array('nid'),
        'event_type' => 'group_confirmation',
        'description' => t('Receive notifications when an individual confirm attendance of a group sign-up'),
      );
      return $types;

    case 'event types':
      $types[] = array(
        'type' => 'group_confirmation',
        'action' => 'insert',
        'name' => t('Individual attendance of a group sign-up'),
        'line' => '',
        'digest' => array('node', 'type'),
        'description' => t('An individual has confirmed attendance of a group sign-up'),
      );
      return $types;

    case 'query':
      // $arg2 is $event array.
      if ($arg0 == 'event' && in_array($arg1, array('group_confirmation')) && ($nid = $arg2->oid)) {
        $query[]['fields'] = array(
          'nid' => $nid,
        );

        return $query;
      }
      break;

    case 'access':
      // @TODO
      return array(TRUE);
  }
}

/**
 * Implements hook_messaging().
 */
function cck_signup_group_confirmation_messaging($op, $arg1 = NULL, $arg2 = NULL, $arg3 = NULL, $arg4 = NULL) {
  switch ($op) {
    case 'message groups':
      // Generic notifications event.
      $info['notifications-event-group_confirmation-insert'] = array(
        'module' => 'cck_signup_group_confirmation',
        'name' => t('Individual confirmation'),
        'help' => t('Most fields will be provided during the event.'),
        'description' => t('Individual confirmation for a group sign-up.'),
      );
      return $info;

    case 'messages':
      $type = $arg1;
      switch ($type) {
        case 'notifications-event-group_confirmation-insert':
          return array(
            'subject' => t('[site-name] [title]'),
            'header' => t('Greetings, [user]'),
            'main' => array(
              t('[author-name] has confirmed attendance of [event-title]'),
              t('Date/time: [event-dates]'),
              t('Manage this sign-up: [node-edit-url].'),
            ),
            'footer' => array(
              t('This is an automatic message from [site-name]'),
              t('To manage your subscriptions, browse to [subscriptions-manage]'),
            ),
          );
      }
      break;

    case 'message keys':
      $type = $arg1;
      switch ($type) {
        case 'notifications-event-group_confirmation-insert':
          return array(
            'subject' => t('Subject'),
            'header' => t('Body header'),
            'main' => t('Body'),
            'footer' => t('Body footer'),
          );
          break;
      }
      break;

    case 'tokens':
      $tokens = array();
      $type = explode('-', $arg1);
      if ($type[2] == 'group_confirmation') {
        $tokens[] = 'node';
      }
      return $tokens;
  }
}

/**
 * Implements hook_token_values().
 */
function cck_signup_group_confirmation_token_values($type, $object = NULL, $options = array()) {
  switch ($type) {
    case 'node':
      if ($node = $object) {
        if (($signup_field = variable_get('cck_signup_group_confirmation_type_' . $node->type, FALSE))
           && !empty($node->{$signup_field})) {
          // This is a group confirmation, load the signup node and then the
          // event node.
          $signup = node_load($node->{$signup_field}[0]['nid']);
          $event_field = variable_get('cck_signup_signup_type_' . $signup->type, FALSE);
          if ($event_field) {
            $event = node_load($signup->{$event_field}[0]['nid']);
            if ($event && module_exists('notifications_cck_signup')) {
              // @TODO The tokens shouldn't necessarily be part of the
              // notifications module, but for now they are.
              _notifications_cck_signup_make_event_tokens($values, $event);
            }
            return $values;
          }
        }
      }
  }
}

/**
 * Get a confirmation record for a given event record.
 *
 * @param object $event
 *   Event node object.
 * @param object $account
 *   User object.
 * @param boolean $existing
 *   Indicates the confirmation is being edited.
 *
 * @return object
 *   The confirmation node object.
 */
function cck_signup_group_confirmation_get_confirmation($event, $account = NULL, $existing = FALSE) {
  if (!empty($existing)) {
    return FALSE;
  }

  if (!$field = variable_get('cck_signup_group_confirmation_field_' . $event->type, FALSE)) {
    return;
  }

  if (empty($account)) {
    global $user;
    $account = user_load($user->uid);
  }

  $field = content_fields($field);
  $db_info = content_database_info($field);

  $table = $db_info['table'];
  $column = $db_info['columns']['nid']['column'];

  // TODO Please convert this statement to the D7 database API syntax.
  $confirmation_nid = db_query("SELECT n.nid FROM {node} n LEFT JOIN {" . $table . "} s USING (vid) WHERE s." . $column . " = %d AND n.uid = %d", array(':shift_nid' => $event->nid, ':uid' => $account->uid))->fetchField();

  if (!empty($confirmation_nid)) {
    return node_load($confirmation_nid);
  }
  return FALSE;
}

/**
 * Validate confirmation node to ensure a user doesn't confirm more than once.
 */
function _cck_signup_group_confirmation_validate_node($form, &$form_state) {
  $values = $form_state['values'];
  $field = variable_get('cck_signup_group_confirmation_type_' . $values['type'], FALSE);
  if (!empty($values[$field][0])) {
    $event = node_load($values[$field][0]);
    global $user;
    if ($existing = cck_signup_group_confirmation_get_confirmation($event, $user, $values['nid'])) {
      // form_set_error($field, t('You have already confirmed attendance: !event.', array('!event' => l($existing->title, 'node/' . $existing->nid))));
    }
  }
}
