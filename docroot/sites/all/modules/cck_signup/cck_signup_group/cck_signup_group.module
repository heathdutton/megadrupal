<?php


/**
 * @file
 * Sign-up functionality for groups.
 */

/**
 * Implements hook_cck_signup_validate().
 */
function cck_signup_group_cck_signup_validate($type, $event, &$form_state) {
  if (variable_get('cck_signup_group_type_' . $type, FALSE) && $field = variable_get('cck_signup_group_field_count_' . $type, FALSE)) {
    $values = $form_state['values'];
    if ($check_limit = variable_get('cck_signup_field_capacity_' . $event->type, FALSE)) {
      // Sign-up count cannot exceed the event capacity.
      $language = $values['language'];
      $count = $values[$field][$language][0]['value'];
      if (empty($count)) {
        // CCK should catch this error.
      }
      else {
        // Need to account for updating the number of signups.
        $old_count = 0;
        if ($values['nid']) {
          $old = node_load($values['nid']);
          $old_count = field_get_items('node', $old, $field);
          $old_count = $old_count[0]['value'];
        }
        $limit = field_get_items('node', $event, $check_limit);
        $limit = $limit[0]['value'];
        $remaining = cck_signup_get_remaining_capacity($event);
        if (($count - $old_count) > $remaining && !user_access('override cck signup restrictions')) {
          form_set_error($field, t('There are only %remaining slots open for %title.', array('%remaining' => $remaining, '%title' => $event->title)));
        }
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function cck_signup_group_form_alter(&$form, $form_state, $form_id) {
  if (!empty($form['type']['#value'])) {
    if ($form_id == $form['type']['#value'] . '_node_form'
       && variable_get('cck_signup_group_type_' . $form['type']['#value'], FALSE)) {
      $field = variable_get('cck_signup_group_field_count_' . $form['type']['#value'], '');
      $group = variable_get('cck_signup_group_fieldgroup_' . $form['type']['#value'], FALSE);

      if ($field && $group) {
        // @TODO use #attached.
        $settings = array(
          'field' => str_replace('_', '-', $field),
          'group' => str_replace('_', '-', $group),
          // @TODO probably a better way to pass language to JS via FAPI?
          'language' => $form['language']['#value'],
        );
        // @TODO the jQuery in cck-signup-group.js isn't targetting the
        // fieldset.
        drupal_add_js(array('cckSignupGroup' => $settings), array('type' => 'setting', 'scope' => JS_DEFAULT));
        drupal_add_js(drupal_get_path('module', 'cck_signup_group') . '/cck-signup-group.js');
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function cck_signup_group_form_node_type_form_alter(&$form, $form_state) {
  module_load_include('admin.inc', 'cck_signup_group');
  _cck_signup_group_form_node_type_form_alter($form, $form_state);
}

/**
 * Implements hook_cck_signup_available_capacity_alter().
 */
function cck_signup_group_cck_signup_available_capacity_alter(&$signups, $event) {
  $signup_field = variable_get('cck_signup_field_' . $event->type, FALSE);
  foreach ($signups as $type => $count) {
    if (variable_get('cck_signup_group_type_' . $type, FALSE) && $field = variable_get('cck_signup_group_field_count_' . $type, FALSE)) {
      // Since this is a group signup, the $count passed here only
      // reflects the number of group signups. This needs to be turned into the
      // actual number signup up in each record.
      $count_field = field_info_field($field);
      $signup_field = field_info_field($signup_field);
      $count_table = 'field_data_' . $count_field['field_name'];
      $count_value = $count_field['storage']['details']['sql'][FIELD_LOAD_CURRENT][$count_table]['value'];
      $signup_table = 'field_data_' . $signup_field['field_name'];
      $signup_value = $signup_field['storage']['details']['sql'][FIELD_LOAD_CURRENT][$signup_table]['nid'];

      // Note, since this doesn't use EntityFieldQuery, it will break
      // with non-SQL field storage. However, using EntityFieldQuery requires
      // then loading every signup node simply to grab the sum. For now, we
      // stick with SQL to make this simple calculation.
      $query = db_select('node', 'n');
      $query->leftJoin($count_table, 'gc', "n.vid = gc.revision_id AND gc.entity_type = 'node'");
      $query->leftJoin($signup_table, 'sn', "n.vid = sn.revision_id AND sn.entity_type = 'node'");
      $query->addExpression("SUM(gc.$count_value)", 'real_count');
      $query->condition('n.type', $type);
      $query->condition('sn.' . $signup_value, $event->nid);
      $real_count = $query->execute()->fetchField();
      $signups[$type] = $real_count;
    }
  }
}

/**
 * Determine if a given sign-up node is a group sign-up (defined by having a
 * count of more than 1).
 *
 * @param object $signup
 *   A sign-up node object.
 *
 * @return boolean
 *   TRUE if this is a group signup.
 */
function cck_signup_group_is_group_signup($signup) {
  // Get the count field.
  $group_count_field = variable_get('cck_signup_group_field_count_' . $signup->type, FALSE);
  $language = $signup->language;
  if ($count = field_get_items('node', $signup, $group_count_field)) {
    $count = $count[0]['value'];
    return $count > 1;
  }
  return FALSE;
}
