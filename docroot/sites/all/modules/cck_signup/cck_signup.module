<?php
/**
 * @file
 * CCK Signup module.
 */

/**
 * Implements hook_hook_info().
 */
function cck_signup_hook_info() {
  $hooks['cck_signup_validate'] = array(
    'group' => 'cck_signup',
  );
  return $hooks;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function cck_signup_form_node_type_form_alter(&$form, $form_state) {
  module_load_include('admin.inc', 'cck_signup');
  _cck_signup_form_node_type_form_alter($form, $form_state);
}

/**
 * Implements hook_form_alter().
 *
 * Add a validator to any node type that is being used as a sign-up node.
 */
function cck_signup_form_alter(&$form, $form_state, $form_id) {
  if (!empty($form['type']['#value'])) {
    if ($form_id == $form['type']['#value'] . '_node_form'
       && variable_get('cck_signup_signup_type_' . $form['type']['#value'], FALSE)
       && !in_array('_cck_signup_validate_signup_node', $form['#validate'])) {
      $form['#validate'][] = '_cck_signup_validate_signup_node';
    }
  }
}

/**
 * Implements hook_node_view_alter().
 */
function cck_signup_node_view_alter(&$build) {
  $type = $build['#bundle'];
  if (variable_get('cck_signup_type_' . $type, FALSE)
    && ($field_name = variable_get('cck_signup_field_' . $type, FALSE))
    && !empty($build['links']['nodereference_url'])) {

    $node = $build['#node'];

    // Loop through each possible node type.
    $signup_types = cck_signup_get_signup_types($field_name);
    foreach ($signup_types as $signup_type) {
      // Nodereference URL will be passing this link along, if it is configured.
      $nodereference_url_link = $signup_type . '_' . $field_name;
      if (isset($build['links']['nodereference_url']['#links'][$nodereference_url_link]) && $signup = cck_signup_get_signup($node)) {

        // User already has a signup, change link.
        $build['links']['nodereference_url']['#links'][$nodereference_url_link] = array(
          'href' => 'node/' . $signup->nid . '/edit',
          'title' => t('Manage your signup'),
          'attributes' => array('title' => t('Manage your signup')),
        );
      }
      elseif (isset($links[$nodereference_url_link]) && cck_signup_event_is_past($node)) {
        // Check if event is in the past, remove link if that is the case.
        unset($links[$nodereference_url_link]);
      }
    }
  }
}

/**
 * Implements hook_permission().
 */
function cck_signup_permission() {
  return array(
    'override cck signup restrictions' => array(
      'title' => t('override cck signup restrictions'),
      'description' => t('Allow a user with this permission to bypass capacity and other restrictions on signups.'),
    ),
  );
}

/**
 * Validate node types that are being used as a sign-up.
 *
 * - Don't allow sign-ups to be added /after/ an event unless user has
 *   appropriate override permission.
 *
 * - Don't allow sign-ups to be added to events with closed registration.
 *
 * - Don't allow a user to have more than one sign-up per event.
 */
function _cck_signup_validate_signup_node($form, &$form_state) {
  $values = $form_state['values'];
  $type = $values['type'];
  $field_name = variable_get('cck_signup_signup_type_' . $type, FALSE);
  $override = user_access('override cck signup restrictions');
  $event = FALSE;
  $language = $values['language'];
  if (!$event = node_load($values[$field_name][$language][0]['nid'])) {
    return;
  }

  // Check signup status.
  if ($check_status = variable_get('cck_signup_field_status_' . $event->type, FALSE)) {
    // Simple status check.
    if ($status = field_get_items('node', $event, $check_status)) {
      $status = $status[0]['value'];
      if (($status < 1) && !$override) {
        form_set_error($field_name, t('Sign-ups are closed for %title', array('%title' => $event->title)));
      }
    }
  }

  // Check if event is in the past.
  if (cck_signup_event_is_past($event) && !$override) {
    form_set_error($field_name, t('Sign-ups are closed for %title, as it has already happened.', array('%title' => $event->title)));
  }

  // Verify that there is at least one spot available, then allow
  // other modules to also validate the signup.
  if (cck_signup_validate_capacity($type, $event, $form_state)) {
    // Allow other modules to easily validate event sign-ups.
    foreach (module_implements('cck_signup_validate') as $module) {
      $function = $module . '_cck_signup_validate';
      $function($type, $event, $form_state);
    }
  }
}

/**
 * Implements hook_cck_signup_validate().
 */
function cck_signup_cck_signup_validate($type, $event, &$form_state) {
  $values = $form_state['values'];
  if (empty($values['nid']) && $existing = cck_signup_get_signup($event)) {
    // Verify user isn't already signed up.
    form_set_error('', t('You are <a href="!url">already signed up</a> for this event.', array('!url' => url('node/' . $existing->nid))));
  }
}

/**
 * Validate that the given event has capacity.
 *
 * @param string $type
 *   The signup node type.
 * @param object $event
 *   The event node object.
 * @param array $form_state
 *   The form state array.
 *
 * @return boolean
 *   TRUE if the given event has capacity.
 */
function cck_signup_validate_capacity($type, $event, &$form_state) {
  $remaining = cck_signup_get_remaining_capacity($event);
  if ($remaining === NULL) {
    // This event type doesn't have a capacity field.
    return;
  }
  $values = $form_state['values'];
  if (!empty($values['nid'])) {
    // This node is being edited, so set the remaining by 1.
    $remaining = 1;
  }
  if ($remaining < 1 && !user_access('override cck signup restrictions')) {
    form_set_error('nid', t('There are no slots open for %title.', array('%title' => $event->title)));
    return FALSE;
  }
  return TRUE;
}

/**
 * Get the remaining capacity for an event.
 */
function cck_signup_get_remaining_capacity($event) {
  if (!variable_get('cck_signup_type_' . $event->type)) {
    // If this event type does not have signups enabled, return.
    return NULL;
  }
  $capacity_field = variable_get('cck_signup_field_capacity_' . $event->type, FALSE);
  if (!$capacity_field || !$capacity = field_get_items('node', $event, $capacity_field)) {
    return;
  }
  $capacity = $capacity[0]['value'];
  $signup_field = variable_get('cck_signup_field_' . $event->type, FALSE);
  $types = cck_signup_get_signup_types($signup_field);

  $signups = array();
  foreach ($types as $type) {
    $field = field_info_field($signup_field);
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', $type)
      ->fieldCondition($field, 'nid', $event->nid)
      ->count();

    // If there is an attendance status field, only count signups with
    // a status greater than 0.
    if ($attendance_status_field = variable_get('cck_signup_field_attendance_status_' . $event->type, 0)) {
      $attendance_status_field = field_info_field($attendance_status_field);
      $query->fieldCondition($attendance_status_field, 'value', 0, '>');
    }

    $count = $query->execute();
    $signups[$type] = $count;
  }

  // Allow other modules to alter the capacity (group signup, for example).
  drupal_alter('cck_signup_available_capacity', $signups, $event);

  return $capacity - array_sum($signups);
}

/**
 * Get available signup types for a given node reference field.
 */
function cck_signup_get_signup_types($field_name) {
  $types = &drupal_static(__FUNCTION__, array());

  if (!isset($types[$field_name])) {
    $types[$field_name] = array();
    $field = field_info_field($field_name);
    if (!empty($field['bundles']['node'])) {
      foreach ($field['bundles']['node'] as $type_name) {
        $types[$field_name][$type_name] = $type_name;
      }
    }
  }
  return $types[$field_name];
}

/**
 * Determine if an event is past.
 *
 * @param object $event
 *   Event node object.
 */
function cck_signup_event_is_past($event) {
  if (($check_date = variable_get('cck_signup_field_date_' . $event->type, FALSE)) && class_exists('DateObject')) {
    $date = field_get_items('node', $event, $check_date);
    $event_date = new DateObject(
      $date[0]['value'],
      $date[0]['timezone']
    );
    $now = date_now();
    return $event_date <= $now;
  }
  return FALSE;
}

/**
 * Get a signup record for a given event.
 *
 * @param object $event
 *   Event node object.
 * @param object $account
 *   User object.
 *
 * @return mixed
 *   Signup node object on success.
 */
function cck_signup_get_signup($event, $account = NULL) {
  if (empty($account)) {
    global $user;
    $account = user_load($user->uid);
  }

  if (!$account->uid) {
    return FALSE;
  }

  // Get field db information.
  $field_name = variable_get('cck_signup_field_' . $event->type, FALSE);
  if (!$field_name) {
    return;
  }
  $field = field_info_field($field_name);
  $signup_types = cck_signup_get_signup_types($field_name);
  foreach ($signup_types as $signup_type) {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', $signup_type)
      ->fieldCondition($field, 'nid', $event->nid)
      ->propertyCondition('uid', $account->uid);
    foreach ($query->execute() as $entity_type => $entities) {
      foreach ($entities as $entity_id => $entity) {
        if (!empty($entity->nid)) {
          return node_load($entity->nid);
        }
      }
    }
  }
  return FALSE;
}
