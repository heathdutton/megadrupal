<?php
/**
 * @file
 * Tests for the CCK Signup module.
 */

/**
 * Test the administrative interface.
 */
class CCKSignupTestCase extends DrupalWebTestCase {
  /**
   * Event node type object.
   */
  public $event_type;

  /**
   * Signup node type object.
   */
  public $signup_type;

  /**
   * Signup field (reference from signup to event type).
   */
  public $signup_field;

  /**
   * Signup status field.
   */
  public $status_field;

  /**
   * Attendance field.
   */
  public $attendance_field;

  function setUp() {
    $modules = func_get_args();
    if (isset($modules[0]) && is_array($modules[0])) {
      $modules = $modules[0];
    }
    $modules += array('cck_signup', 'node_reference');
    parent::setUp($modules);

    // Create and login user
    $admin_user = $this->drupalCreateUser(array('administer content types'));
    $this->drupalLogin($admin_user);

    // Create an event content type.
    $this->event_type = $this->drupalCreateContentType();
    // Create a signup content type.
    $this->signup_type = $this->drupalCreateContentType();
  }

  protected function addSignupField() {
    // Add a node reference field to the signup type, pointing at the
    // event type.
    $name = drupal_strtolower($this->randomName());
    $field = array(
      'field_name' => $name,
      'type' => 'node_reference',
      'cardinality' => 1,
      'translatable' => FALSE,
      'locked' => FALSE,
      'indexes' => array('nid' => array('nid')),
      'settings' => array(
        'referenceable_types' => array(
          $this->event_type->type => $this->event_type->type,
        ),
      ),
    );
    field_create_field($field);

    $instance = array(
      'field_name' => $name,
      'entity_type' => 'node',
      'label' => 'Event',
      'bundle' => $this->signup_type->type,
      'description' => '',
      'required' => TRUE,
      'settings' => array(),
      'widget' => array(
        'type' => 'options_buttons',
        'weight' => 0,
        'module' => 'options',
        'active' => 1,
      ),
      'display' => array(
        'default' => array(
          'label' => 'above',
          'type' => 'node_reference_default',
          'weight' => 0,
          'settings' => array(),
          'module' => 'node_reference',
        ),
      ),
    );
    field_create_instance($instance);

    return $name;
  }

  /**
   * Create an integer field and instance.
   * @param $bundle
   *   The bundle to add the field to.
   * @return string
   *   The field's machine name.
   */
  protected function addIntegerField($bundle = NULL) {
    if (empty($bundle)) {
      $bundle = $this->event_type->type;
    }

    $name = drupal_strtolower($this->randomName());
    $field = array(
      'field_name' => $name,
      'type' => 'number_integer',
      'settings' => array(),
    );
    field_create_field($field);
    $instance = array(
      'field_name' => $field['field_name'],
      'entity_type' => 'node',
      'bundle' => $bundle,
      'widget' => array(
        'type' => 'number',
      ),
      'display' => array(
        'default' => array(
          'type' => 'number_integer',
        ),
      ),
    );
    field_create_instance($instance);

    return $name;
  }

  protected function configureEventNodeType() {
    variable_set('cck_signup_type_' . $this->event_type->type, TRUE);

    // Capacity field.
    $this->capacity_field = $this->addIntegerField($this->event_type->type);
    variable_set('cck_signup_field_capacity_' . $this->event_type->type, $this->capacity_field);

    // Signup field.
    $this->status_field = $this->addIntegerField($this->event_type->type);
    variable_set('cck_signup_field_status_' . $this->event_type->type, $this->status_field);
  }

  protected function configureSignupNodeType() {
    // Add node reference field.
    $this->signup_field = $this->addSignupField();
    variable_set('cck_signup_field_' . $this->event_type->type, $this->signup_field);
    variable_set('cck_signup_signup_type_' . $this->signup_type->type, $this->signup_field);

    // Attendance field.
    $this->attendance_field = $this->addIntegerField($this->signup_type->type);
    variable_set('cck_signup_field_attendance_status_' . $this->event_type->type, $this->attendance_field);
  }
}

/**
 * Test administrative interface.
 */
class CCKSignupTestAdmin extends CCKSignupTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Administrative interface',
      'description' => 'Test the configuration of event and signup node types.',
      'group' => 'CCK Signup',
    );
  }

  function testEventAdmin() {
    $url = 'admin/structure/types/manage/' . $this->event_type->type;
    $this->drupalGet($url);
    $this->assertText(t('CCK Sign-up'));

    // Without a node reference field, the checkbox should be disabled.
    $this->assertText(t('In order to use this type as a CCK Sign-up node, there must be a nodereference field from a different type referencing this node type.'));

    // Add node reference field.
    $this->signup_field = $this->addSignupField();

    // Check cck_signup_type, should get an error.
    $edit = array(
      'cck_signup_type' => TRUE,
    );
    $this->drupalPost($url, $edit, t('Save content type'));
    $this->assertText(t('Must select a reference field if sign-ups are enabled for this node type.'));
    $this->assertFalse(variable_get('cck_signup_type_' . $this->event_type->type, 0), t('Variable %variable is FALSE', array('%variable' => 'cck_signup_type_' . $this->event_type->type)));

    // Select field to use and save--this should add no additional
    // options to the form.
    $edit['cck_signup_field'] = $this->signup_field; 
    $this->drupalPost($url, $edit, t('Save content type'));
    $this->assertTrue(variable_get('cck_signup_type_' . $this->event_type->type, 0), t('Variable %variable is TRUE', array('%variable' => 'cck_signup_type_' . $this->event_type->type)));
    $this->assertEqual($this->signup_field, variable_get('cck_signup_signup_type_' . $this->signup_type->type, 0));
    $this->assertEqual($this->signup_field, variable_get('cck_signup_field_' . $this->event_type->type, 0));

    // Add an integer field to the event type to use for capacity.
    $capacity_field = $this->addIntegerField($this->event_type->type);

    // There should now be 2 additional fields on the admin form.
    $this->drupalGet($url);
    $this->assertText(t('Capacity field to associate with sign-ups'));
    $this->assertText(t('Status field to associate with event sign-up status'));

    // Add an integer field to the signup type.
    $attendance_field = $this->addIntegerField($this->signup_type->type);

    // There should now be an additional field on the admin form.
    $this->drupalGet($url);
    $this->assertText(t('Attendance status to associate with sign-ups'));

    // Add an integer field to the event type to use for signup status.
    $status_field = $this->addIntegerField($this->event_type->type);

    // Submit the form with the 3 additonal fields.
    $edit['cck_signup_field_attendance_status'] = $attendance_field;
    $edit['cck_signup_field_capacity'] = $capacity_field;
    $edit['cck_signup_field_status'] = $status_field;
    $this->drupalPost($url, $edit, t('Save content type'));

    // Verify the proper variables are now set.
    $variables = array(
      'cck_signup_field_attendance_status' => $attendance_field,
      'cck_signup_field_capacity' => $capacity_field,
      'cck_signup_field_status' => $status_field,
    );
    foreach ($variables as $variable => $value) {
      $variable .= '_' . $this->event_type->type;
      $this->assertIdentical($value, variable_get($variable, 0), t('Variable %variable properly set to %value', array('%variable' => $variable, '%value' => $value)));
    }
  }
}

/**
 * Test event signups.
 */
class CCKSignupTestSignups extends CCKSignupTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Event signups',
      'description' => 'Test adding and managing event signup nodes.',
      'group' => 'CCK Signup',
    );
  }

  function setUp() {
    parent::setUp();

    // Create and login user.
    $create_event_permission = 'create ' . $this->event_type->type . ' content';
    $create_signup_permission = 'create ' . $this->signup_type->type . ' content';
    $signup_user = $this->drupalCreateUser(array($create_signup_permission, $create_event_permission));
    $this->drupalLogin($signup_user);
  }

  /**
   * Test event signup status field functionality.
   */
  function testEventSignupStatus() {
    // Create and configure event and signup node types.
    $this->configureEventNodeType();
    $this->configureSignupNodeType();

    // Create an event.
    $settings = array(
      'type' => $this->event_type->type,
      $this->status_field => array(LANGUAGE_NONE => array(array('value' => 1))),
    );
    $event = $this->drupalCreateNode($settings);

    // Signup for this event.
    $edit = array(
      'title' => $this->randomName(),
      $this->signup_field . '[' . LANGUAGE_NONE . ']' => $event->nid,
    );
    $this->drupalPost('node/add/' . $this->signup_type->type, $edit, t('Save'));

    // Set signup status to 0, signup should fail.
    $settings[$this->status_field] = array(LANGUAGE_NONE => array(array('value' => 0)));
    $event_2 = $this->drupalCreateNode($settings);

    $edit[$this->signup_field . '[' . LANGUAGE_NONE . ']'] = $event_2->nid;
    $this->drupalPost('node/add/' . $this->signup_type->type, $edit, t('Save'));
    $this->assertRaw(t('Sign-ups are closed for %title', array('%title' => $event_2->title)));
  }

  /**
   * Test event capacity and attendance status field functionality.
   */
  function testEventCapacity() {
   // Create and configure event and signup node types.
    $this->configureEventNodeType();
    $this->configureSignupNodeType();

    // Create an event with a capacity of 2.
    $settings = array(
      'type' => $this->event_type->type,
      $this->capacity_field => array(LANGUAGE_NONE => array(array('value' => 2))),
      $this->status_field => array(LANGUAGE_NONE => array(array('value' => 1))),
    );
    $event = $this->drupalCreateNode($settings);

    // Create 3 users.
    $user_1 = $this->drupalCreateUser(array('create ' . $this->signup_type->type . ' content'));
    // This user gets edit permissions.
    $user_2 = $this->drupalCreateUser(array('create ' . $this->signup_type->type . ' content', 'edit own ' . $this->signup_type->type . ' content'));
    $user_3 = $this->drupalCreateUser(array('create ' . $this->signup_type->type . ' content'));

    // Login user 1 and signup.
    $this->drupalLogin($user_1);
    $edit = array(
      'title' => $this->randomName(),
      $this->signup_field . '[' . LANGUAGE_NONE . ']' => $event->nid,
      // Set attendance status to 1.
      $this->attendance_field . '[' . LANGUAGE_NONE . '][0][value]' => 1,
    );
    $this->drupalPost('node/add/' . $this->signup_type->type, $edit, t('Save'));
    $signup_1 = $this->drupalGetNodeByTitle($edit['title']);
    $this->assertTrue($signup_1, t('Signup node found in database.'));

    // Login user 2 and signup.
    $this->drupalLogin($user_2);
    $edit = array(
      'title' => $this->randomName(),
      $this->signup_field . '[' . LANGUAGE_NONE . ']' => $event->nid,
      // Set attendance status to 1.
      $this->attendance_field . '[' . LANGUAGE_NONE . '][0][value]' => 1,
    );
    $this->drupalPost('node/add/' . $this->signup_type->type, $edit, t('Save'));
    $signup_2 = $this->drupalGetNodeByTitle($edit['title']);
    $this->assertTrue($signup_2, t('Signup node found in database.'));

    // Login user 3, signup should fail.
    $this->drupalLogin($user_3);
    $edit = array(
      'title' => $this->randomName(),
      $this->signup_field . '[' . LANGUAGE_NONE . ']' => $event->nid,
      // Set attendance status to 1.
      $this->attendance_field . '[' . LANGUAGE_NONE . '][0][value]' => 1,
    );
    $this->drupalPost('node/add/' . $this->signup_type->type, $edit, t('Save'));
    $this->assertRaw(t('There are no slots open for %title.', array('%title' => $event->title)));

    // Set attendance status to 0, signup should work as this doesn't
    // count the signup towards capacity.
    $edit[$this->attendance_field . '[' . LANGUAGE_NONE . '][0][value]'] = 0;
    $this->drupalPost('node/add/' . $this->signup_type->type, $edit, t('Save'));
    $signup_3 = $this->drupalGetNodeByTitle($edit['title']);
    $this->assertTrue($signup_3, t('Signup node found in database.'));

    // Login user 2 to edit signup, edit should work on a full event.
    $this->drupalLogin($user_2);
    $edit = array(
      'title' => $this->randomName(),
      $this->signup_field . '[' . LANGUAGE_NONE . ']' => $event->nid,
      // Set attendance status to 1.
      $this->attendance_field . '[' . LANGUAGE_NONE . '][0][value]' => 1,
    );
    $this->drupalPost('node/' . $signup_2->nid . '/edit', $edit, t('Save'));
    $signup_2 = $this->drupalGetNodeByTitle($edit['title']);
    $this->assertTrue($signup_2, t('Able to edit a signup on a full capacity event.'));

    // @TODO move to separate test.
    // Create user with 'override cck signup restrictions' permission,
    // signup to full event should work.
    $user_4 = $this->drupalCreateUser(array('override cck signup restrictions', 'create ' . $this->signup_type->type . ' content'));
    $this->drupalLogin($user_4);
    $edit = array(
      'title' => $this->randomName(),
      $this->signup_field . '[' . LANGUAGE_NONE . ']' => $event->nid,
      // Set attendance status to 1.
      $this->attendance_field . '[' . LANGUAGE_NONE . '][0][value]' => 1,
    );
    $this->drupalPost('node/add/' . $this->signup_type->type, $edit, t('Save'));
    $signup_4 = $this->drupalGetNodeByTitle($edit['title']);
    $this->assertTrue($signup_4, t('User with <em>override cck signup restrictions</em> permission able to add a signup to a full event.'));
  }

  // TODO test for duplicate signups.

  // TODO test with date module integration.
}