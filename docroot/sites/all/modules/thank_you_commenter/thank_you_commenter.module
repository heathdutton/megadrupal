<?php
/**
 * @file
 * This module sends a thank you email to commenter
 */

define('TYC_AUTHENTICATED_USER_MAILTEXT',
'Hi !username,

Thank you for commenting on: "!node_title"

You can view your comment here - !comment_url

!site
!mission
!uri');

define('TYC_ANONYMOUS_USER_MAILTEXT',
'Hi !username,

Thank you for commenting on: "!node_title"

You can view your comment here - !comment_url

!site
!mission
!uri');


/**
 * Implements hook_menu().
 */
function thank_you_commenter_menu() {
  $items = array();

  $items['admin/config/content/thank-you-commenter'] = array(
    'title' => 'Thank You Commenter Settings',
    'description' => 'This will allow user to administer thank you commenter settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('thank_you_commenter_admin_settings'),
    'access arguments' => array('administer thank you commenter'),
  );

  return $items;
}

/**
 * Page callback for admin settings form.
 */
function thank_you_commenter_admin_settings($form, &$form_state) {
  $content_types = node_type_get_names();
  foreach ($content_types as $name => $content_type) {
    $options[check_plain($name)] = check_plain($content_type);
  }
  $form = array();

  $form['tyc_registered_users'] = array(
    '#type' => 'checkbox',
    '#title' => t('Authenticated Users'),
    '#description' => t('Mail will be send to registered users only.'),
    '#default_value' => variable_get('tyc_registered_users', ''),
  );

  $form['tyc_anonymous_users'] = array(
    '#type' => 'checkbox',
    '#title' => t('Anonymous Users'),
    '#description' => t('Mail will be send to anonymous users only if they
      provide their email.'),
    '#default_value' => variable_get('tyc_anonymous_users', ''),
  );

  $form['tyc_content_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Content Types'),
    '#description' => t('The above will be applicable on these content types
      only.'),
    '#options' => $options,
    '#default_value' => variable_get('tyc_content_types', array()),
  );
  // Todo : Add available variables in help text.
  $form['tyc_authenticated_user_mailtext'] = array(
    '#type' => 'textarea',
    '#title' => t('Authenticated Users Mailtext'),
    '#description' => t('The mail text that will be send to authenticated users.
      '),
    '#default_value' => variable_get('tyc_authenticated_user_mailtext', TYC_AUTHENTICATED_USER_MAILTEXT),
  );

  $form['tyc_anonymous_user_mailtext'] = array(
    '#type' => 'textarea',
    '#title' => t('Anonymous Users Mailtext'),
    '#description' => t('The mail text that will be send to anonymous users.'),
    '#default_value' => variable_get('tyc_anonymous_user_mailtext', TYC_ANONYMOUS_USER_MAILTEXT),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_comment_insert().
 */
function thank_you_commenter_comment_insert($comment) {
  global $user;
  if ($user->uid) {
    // If a mail is to be send to registered user.
    if (variable_get('tyc_registered_users', '')) {
      // Get node type and check if mail is to be send to for this type.
      $node_type = db_select('node', 'n')
        ->fields('n', array('type'))
        ->condition('nid', $comment->nid)
        ->execute()
        ->fetchField();

      if (in_array($node_type, variable_get('tyc_content_types', ''))) {
        $params['subject'] = t('Thank you for commenting on !site', array('!site' => variable_get('site_name', 'drupal')));
        $params['body'] = t(variable_get('tyc_authenticated_user_mailtext', TYC_AUTHENTICATED_USER_MAILTEXT), thank_you_commenter_mail_tokens($comment));
        drupal_mail('thank_you_commenter', 'tyc_authenticated_usermail', $user->mail, 'en', $params);
      }
    }
  }
  else {
    // If a mail is to be send to anonymous user, and will be send only if
    // mail is provided during commenting process.
    if (variable_get('tyc_anonymous_users', '') && !empty($comment->mail)) {
      // Get node type and check if mail is to be send to for this type.
      $node_type = db_select('node', 'n')
        ->fields('n', array('type'))
        ->condition('nid', $comment->nid)
        ->execute()
        ->fetchField();

      if (in_array($node_type, variable_get('tyc_content_types', ''))) {
        $params['subject'] = t('Thank you for commenting on !site', array('!site' => variable_get('site_name', 'drupal')));
        $params['body'] = t(variable_get('tyc_anonymous_user_mailtext', TYC_ANONYMOUS_USER_MAILTEXT), thank_you_commenter_mail_tokens($comment));
        drupal_mail('thank_you_commenter', 'tyc_anonymous_usermail', $comment->mail, 'en', $params);
      }
    }
  }
}

/**
 * Returns an array of variables to be replaced in mail text.
 */
function thank_you_commenter_mail_tokens($comment) {
  global $user;
  global $base_url;

  $node_title = db_select('node', 'n')
    ->fields('n', array('title'))
    ->condition('nid', $comment->nid)
    ->execute()
    ->fetchField();

  $tokens = array(
    '!username' => $user->name ? $user->name : $comment->name,
    '!node_title' => $node_title,
    '!comment_url' => url('node/' . $comment->nid, array('absolute' => TRUE, 'fragment' => 'comment-' . $comment->cid)),
    '!site' => variable_get('site_name', 'Drupal'),
    '!uri' => $base_url,
    '!mission' => variable_get('site_mission', ''),
    '!uri_brief' => preg_replace('!^https?://!', '', $base_url),
  );
  return $tokens;
}

/**
 * Implements hook_mail().
 */
function thank_you_commenter_mail($key, &$message, $params) {
  $message['subject'] = $params['subject'];
  $message['body'][] = $params['body'];
}

/**
 * Implements hook_permission().
 */
function thank_you_commenter_permission() {
  return array(
    'administer thank you commenter' => array(
      'title' => t('administer thank you commenter'),
      'description' => t('This will allow user to administer thank you commenter settings'),
    ),
  );
}
