<?php

/**
 * @file
 *  ilink.module
 *
 * @todo pass arguments into ilink and render them as #href.
 * @todo disable callback in plugin process.
 * @todo consider merging ilink_extract_*_property().
 * @todo ilink_disabled theme.
 * @todo Possibly support image buttons.
 */

define('ILINK_TYPE_LINK', 'link');
define('ILINK_TYPE_BUTTON', 'button');

/**
 * Render a link.
 */
function ilink($type, $arguments = array()) {
  $ilink = ilink_build($type, $arguments);
                              /*
                             //|                              ,|
                           //,/                             -~ |
                         // / |                         _-~   /  ,
                       /'/ / /                       _-~   _/_-~ |
                      ( ( / /'                   _ -~     _-~ ,/'
                       \~\/'/|             __--~~__--\ _-~  _/,
               ,,)))))));, \/~-_     __--~~  --~~  __/~  _-~ /
            __))))))))))))));,>/\   /        __--~~  \-~~ _-~
           -\(((((''''(((((((( >~\/     --~~   __--~' _-~ ~|
  --==//////((''  .     `)))))), /     ___---~~  ~~\~~__--~
          ))|  |  ;-.     (((((/           __--~~~'~~/
          ( `|    /  )      )))/      ~~~~~__\__---~~__--~~-
             |   |   |       (/      ---~~~/__-----~~  ,;::'\            ,
             o_);   ;        /      ----~~/           \,-~~~\ \         /*/
                    return drupal_render($ilink);     /*     \ |       //
                   /  _      `----~~~~'      /      `:|       \;\_____//
            ______/ /~    |                 /        /         ~------~
          /~;;.____/;;'  /          ___----(   `;;;/
         / //  _;______;'------~~~~~    |;;/\    /
        //  | |                        /  |  \;;,\
       (<_  | ;                      /',/-----'  _>
        \_| ||_                     //~;~~~~~~~~~
            `\_|                   (,~~
                                    \~\_
                                     \_*/
}

/**
 * Returns a render array for an ilink, in case you're into that sort of stuff.
 */
function ilink_build($type, $arguments = array()) {
  return array(
    '#type' => 'ilink',
    '#ilink' => $type,
    '#arguments' => $arguments,
  );
}

/**
 * Builds an iLink submit button.
 */
function ilink_build_submit($type, $arguments = array()) {
  return _ilink_build_button('submit', $type, $arguments);
}

/**
 * Builds an ordinary iLink button.
 */
function ilink_build_button($type, $arguments = array()) {
  return _ilink_build_button('button', $type, $arguments);
}

/**
 * Internal function to build an iLink button form element. Processing that
 * occurs here is necessary, because certain critical values are used before we
 * get an opportunity to manipulate in #process callbacks.
 */
function _ilink_build_button($button, $type, $arguments) {
  ctools_include('plugins');
  ctools_include('info', 'ilink');

  if (!($plugin = ctools_get_plugins('ilink', 'ilink', $type))) {
    throw new IlinkMissingPluginInfoException(t('The plugin !plugin does not exist.', array('!plugin' => $type)));
  }

  // Set up basic submit element.
  $build = array(
    '#type' => $button == 'submit' ? 'ilink_submit' : 'ilink_button',
    '#ilink' => $type,
    '#arguments' => $arguments,
    '#value' => strip_tags(ilink_extract_string_info('label', $plugin, $arguments)),
  );

  // Determine if submit button will be disabled.
  if (isset($plugin['disable'])) {
    if ($plugin['disable'] === TRUE || ilink_extract_boolean_info('disable', $plugin, $arguments)) {
      $build['#disabled'] = TRUE;
    }
  }

  return $build;
}

/**
 * Implements hook_ctools_plugin_type().
 *
 * @see ilink_info_process().
 */
function ilink_ctools_plugin_type() {
  return array(
    'ilink' => array(
      'use hooks' => TRUE,
      'alterable' => TRUE,
      'hook' => 'ilink_info',
      'process' => array(
        'function' => 'ilink_info_process',
        'file' => 'info.inc',
        'path' => drupal_get_path('module', 'ilink') . '/includes',
      ),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function ilink_theme($existing, $theme, $type, $path) {
  $hooks['ilink_disabled'] = array(
    'render element' => 'element',
    'path' => $path . '/includes',
    'file' => 'ilink.theme.inc',
  );

  ctools_include('plugins');
  ctools_include('info', 'ilink');
  foreach (ctools_get_plugins('ilink', 'ilink') as $plugin) {
    if (isset($plugin['hook theme'])) {
      $hooks += ilink_extract_array_info('hook theme', $plugin);
    }
  }

  return $hooks;
}

/**
 * Implements hook_menu().
 */
function ilink_menu() {
  $items = array();

  ctools_include('plugins');
  ctools_include('info', 'ilink');
  foreach (ctools_get_plugins('ilink', 'ilink') as $plugin) {
    if (isset($plugin['hook menu'])) {
      $provided_items = ilink_extract_array_info('hook menu', $plugin);
      // Set some defaults that the menu system requires.
      foreach ($provided_items as &$item) {
        $item += array(
          'module' => $plugin['module'],
          'file path' => $plugin['path'],
          'file' => $plugin['file'],
        );
      }
      $items += $provided_items;
    }
  }

  return $items;
}

/**
 * Implements hook_element_info().
 */
function ilink_element_info() {
  return array(
    'ilink' => array(
      '#pre_render' => array(
        'ilink_element_pre_render',
        'drupal_pre_render_link',
        'drupal_pre_render_markup',
      ),
    ),
    'ilink_button' => array(
      '#input' => TRUE,
      '#name' => 'op',
      '#button_type' => 'submit',
      '#executes_submit_callback' => FALSE,
      '#limit_validation_errors' => FALSE,
      '#process' => array('ilink_button_process', 'ajax_process_form'),
      '#theme_wrappers' => array('button'),
      '#value_callback' => 'ilink_button_element_value',
    ),
    'ilink_submit' => array(
      '#input' => TRUE,
      '#name' => 'op',
      '#button_type' => 'submit',
      '#executes_submit_callback' => TRUE,
      '#limit_validation_errors' => FALSE,
      '#process' => array('ilink_button_process', 'ajax_process_form'),
      '#theme_wrappers' => array('button'),
      '#value_callback' => 'ilink_button_element_value',
    ),
  );
}

/**
 * Pre-render callback for ilink links.
 */
function ilink_element_pre_render($element) {
  return _ilink_common_process($element, ILINK_TYPE_LINK);
}

/**
 * Process callback for ilink buttons.
 */
function ilink_button_process($element) {
  return _ilink_common_process($element, ILINK_TYPE_BUTTON);
}

/**
 * Value callback for iLink button elements.
 *
 * This will only execute if a #value is not already provided in the form
 * element. Such would be the case if the user opted to not use the provided
 * ilink_build_button() or ilink_build_submit().
 */
function ilink_button_element_value($element, $input, &$form_state) {
  ctools_include('plugins');
  ctools_include('info', 'ilink');

  if (!($plugin = ctools_get_plugins('ilink', 'ilink', $element['#ilink']))) {
    throw new IlinkMissingPluginInfoException(t('The plugin !plugin does not exist.', array('!plugin' => $element['#ilink'])));
  }
  $arguments = isset($element['#arguments']) ? $element['#arguments'] : array();

  return ilink_extract_string_info('label', $plugin, $arguments);
}

/**
 * Common element processor.
 * @throws IlinkMissingPluginInfoException when a plugin is not found.
 */
function _ilink_common_process($element, $type) {
  ctools_include('plugins');
  ctools_include('info', 'ilink');

  if (!($plugin = ctools_get_plugins('ilink', 'ilink', $element['#ilink']))) {
    throw new IlinkMissingPluginInfoException(t('The plugin !plugin does not exist.', array('!plugin' => $element['#ilink'])));
  }

  // Shortcut variables so I don't have to repeat myself.
  $link = ($type == ILINK_TYPE_LINK);
  $button = ($type == ILINK_TYPE_BUTTON);
  $arguments = isset($element['#arguments']) ? $element['#arguments'] : array();
  $element['#id'] = drupal_html_id($element['#ilink']);

  // Processes specific to links.
  if ($link) {
    // The element '#href' will be a product of the 'href' property of the plugin
    // and the provided arguments. If a required argument is missing, no path
    // will be generated, and the plugin will be set to be "disabled".
    $element['#href'] = ilink_build_path($plugin, $arguments);

    // Label
    $element['#title'] = ilink_extract_string_info('label', $plugin, $arguments);

    // Disable
    if (isset($plugin['disable'])) {
      if ($plugin['disable'] === TRUE || ilink_extract_boolean_info('disable', $plugin, $arguments)) {
        // Hijack the output with something that isn't a link.
        $element['#theme'] = 'ilink_disabled';

        // No need to process the rest of the element.. I guess.
        return $element;
      }
    }

    // Link options
    if (!empty($plugin['options'])) {
      $element += array('#options' => array());
      $element['#options'] = array_merge_recursive($element['#options'], ilink_extract_array_info('options', $plugin, $arguments));
    }
  }


  // Processes specific to buttons.
  if ($button) {
    // Label
    if (!isset($element['#value'])) {
      $element['#value'] = ilink_extract_string_info('label', $plugin, $arguments);
    }

    // Disable
    if (!isset($element['#disabled']) && isset($plugin['disable'])) {
      if ($plugin['disable'] === TRUE || ilink_extract_boolean_info('disable', $plugin, $arguments)) {
        // Hijack the output with something that isn't a link.
        $element['#disabled'] = TRUE;

        // No need to process the rest of the element.. I guess.
        return $element;
      }
    }

    // Ajax handling, if applicable.
    if (isset($plugin['ajax'])) {
      $element += array('#ajax' => array());
      $element['#ajax'] = array_merge_recursive($element['#ajax'], ilink_extract_array_info('ajax', $plugin, $arguments));

      // Add a reasonable default event handler if none was specified.
      // @see ajax_pre_render_element().
      $element['#ajax'] += array(
        'event' => 'mousedown',
        'keypress' => TRUE,
        'prevent' => 'click',
      );
    }
  }

  // Process JS events, if applicable.
  if (isset($plugin['js events']) && is_array($plugin['js events'])) {
    $element['#attached']['js'][] = ctools_attach_js('ilink.bind', 'ilink');
    $settings['ilink']['resources'][$element['#ilink']] = array(
      'name' => $element['#ilink'],
      'events' => drupal_map_assoc($plugin['js events']),
    );
    $settings['ilink']['instances'][$element['#id']] = array(
      'name' => $element['#ilink'],
      'arguments' => $arguments,
      'type' => $type,
    );

    // $settings['ilink']['instances']
    $element['#attached']['js'][] = array('data' => $settings, 'type' => 'setting');
  }

  // Attached assets
  if (isset($plugin['attached'])) {
    $element += array('#attached' => array());
    $element['#attached'] = array_merge_recursive($element['#attached'], ilink_extract_array_info('attached', $plugin, $arguments));
  }

  // Attributes
  // Add defacto classes
  $element['#attributes']['class'][] = 'ilink';
  $element['#attributes']['class'][] = 'ilink-' . $element['#ilink'];
  $element['#attributes'] = array_merge_recursive($element['#attributes'], ilink_extract_array_info('attributes', $plugin, $arguments));

  // Alter the ilink build just before its returned.
  drupal_alter('ilink_build', $element);

  return $element;
}
