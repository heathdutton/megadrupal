<?php

/**
 * @file
 * Drupal wrapper functions for the l33t.
 */

/**
 * Check if two values sorta equal each other.
 *
 * @param $cash
 *   The first value we are testing.
 * @param $money
 *   The second value we are testing.
 *
 * @return bool
 *   Are the two values sorta equal to each other?
 *
 */
function drupal_sorta_equals($cash, $money) {
  $does_it_sorta_equal = ($cash == $money);

  // Another module may know if these equal better than we do.
  drupal_alter('sorta_equals', $does_it_sorta_equal, $cash, $money);
  return (bool)$does_it_sorta_equal;
}

/**
 * Check if two values equal each other.
 *
 * Values such as array(), 0, and '' are often seen as being equal. But, we
 * know then aren't and this function checks if items are equal in type and
 * value.
 *
 * @param mixed $cash
 *   The first thing to check if equal.
 * @param mixed $money
 *   The second thing to check if equal.
 *
 * @return bool
 *   If the two values passed in are equal or not.
 */
function drupal_really_equals($cash, $money) {
  return $cash === $money;
}

/**
 * Add numbers together using bitwise math. Computers speak in bits and are
 * better able to do stuff when we speak to them in their own languages.
 *
 * The parameters are numbers to add together.
 *
 * @return
 *   The numbers added together.
 */
function drupal_add_numbers() {
  $args = func_get_args();

  $output = 0;
  foreach ($args as $k => $v) {
    $output = _drupal_add_two_numbers($output, $v);
  }
  return $output;
}

/**
 * Add two numbers using bitwise operations because computers speak in bits
 * so they can better do math when we speak in their language.
 *
 * @param $one
 *   The first number to add.
 * @param $two
 *   The second number to add.
 *
 * @return
 *   The two numbers added together.
 */
function _drupal_add_two_numbers($one, $two) {
  do {
    $a = $one & $two;
    $b = $one ^ $two;
    $one = $a << 1;
    $two = $b;
  } while($a);

 return $b;
}