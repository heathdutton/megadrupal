<?php 

/**
 * Implements hook_permission().
 */
function otrs_permission() {
  // We set up permisssions to manage otrs configuration, new ticket creation
  $permissions = array(
    'administer otrs configuration' => array(
      'title' => t('Administer OTRS Configuration'),
      'description' => t('Allow user to administer OTRS configuration, create connection to OTRS server.'),
    ),
    //'create own ticket' => array(
    //  'title' => t('Create own ticket'),
    //  'description' => t('Create new OTRS ticket in OTRS server.'),
    //),
  );
  return $permissions;  
}

function otrs_user_own_ticket_access($account) {
  //print_r($account);
  global $user;
  $username = variable_get('otrssoapusername','');
  $password = variable_get('otrssoappassword','');
  //$cusid = "e002610";
  $customer_user = $user->name; //Must match with Drupal Username and OTRS Customer UserLogin name.
  # Set up a new SOAP connection:
  $client = new SoapClient(null, array(
      'location'  => variable_get('otrssoapurl',''),
      'uri'       => "Core",
      'trace'     => 1,
      'login'     => variable_get('otrssoapusername',''),
      'password'  => variable_get('otrssoappassword',''),
      'style'     => SOAP_RPC,
      'use'       => SOAP_ENCODED
    )
  );

  # Use the Customer Username to validate existance of customer if Customer search is returned.
  $CustomerSearch = $client->__soapCall("Dispatch", array(
      $username, $password,
      "CustomerUserObject", "CustomerSearch",
      "UserLogin", $customer_user,
    )
  );

  if(empty($CustomerSearch))
    return FALSE;


  return (($GLOBALS['user']->uid == $account) || user_access('administer users')) && $account > 0;
}

/**
 * Implements hook_menu()
 */

function otrs_menu(){

  $items = array();
  $items['admin/config/content/otrs'] = array(
    'title' => 'OTRS Configuration',
    'description' => 'Administer OTRS Configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('otrs_config_form'),
    'access arguments' => array('administer otrs configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'otrs.admin.inc'
  );
  $items['user/%/otrs'] = array(
    'title' => 'Tickets',
    'description' => 'Create a new ticket in OTRS',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('otrs_user_new_ticket_form', 1),
    'access callback' => 'otrs_user_own_ticket_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );
  $items['user/%/otrs/new'] = array(
    'title' => 'Create New',
    'description' => 'Create a new ticket in OTRS',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('otrs_user_new_ticket_form', 1),
    'access callback' => 'otrs_user_own_ticket_access',
    'access arguments' => array(1),
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
  );
  $items['user/%/otrs/list-open'] = array(
    'title callback' => '_otrs_list_ticket_title_callback',
    'title arguments' => array("Open"),
    'description' => 'Ticket Listings',
    'page callback' => 'otrs_ticket_listing',
    'page arguments' => array('Open'),
    'access callback' => 'otrs_user_own_ticket_access',
    'access arguments' => array(1),
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
  );
  $items['user/%/otrs/list-closed'] = array(
    'title callback' => '_otrs_list_ticket_title_callback',
    'title arguments' => array("Closed"),
    'description' => 'Ticket Listings',
    'page callback' => 'otrs_ticket_listing',
    'page arguments' => array('Closed'),
    'access callback' => 'otrs_user_own_ticket_access',
    'access arguments' => array(1),
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
  );

  $items['user/%/otrs/%'] = array(
    'title' => 'Ticket Details',
    'description' => 'Ticket Listings',
    'page callback' => 'otrs_ticket_detail_listing',
    'page arguments' => array(3),
    'access callback' => 'otrs_user_own_ticket_access',
    'access arguments' => array(1),
    'weight' => 2,
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Title callback to rewrite the title based on Ticket Number.
 *
 * @param $state
 *   ticket count to be appended to tab based on state of the ticket.
 */
function _otrs_list_ticket_title_callback($state) {
  return $state . ' Tickets (' . otrs_ticket_count($state) . ')';
}

/**
 */
function otrs_user_new_ticket_form($form, &$form_state) {
  $form['description'] = array(
    '#type' => 'item',
    '#title' => t('Create new ticket in OTRS server'),
  );

  $form['type'] = array(
    '#type' => 'select',
    '#title' => t('Type'),
    '#options' => otrs_ticket_get_all_types(),
    '#required' => TRUE,
  );
  $form['queue'] = array(
    '#type' => 'select',
    '#title' => t('To'),
    '#options' => otrs_ticket_get_all_queues(),
    '#required' => TRUE,
  );
  $form['subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#required' => TRUE,
  ); 
  $form['detail'] = array(
    '#type' => 'textarea',
    '#title' => t('Text'),
    '#required' => TRUE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
  );
  return $form;
}

function otrs_user_new_ticket_form_submit($form, &$form_state) {
  //echo "<pre>";
  //print_r($form_state);
  //exit;
  global $user;
  $username = variable_get('otrssoapusername','');
  $password = variable_get('otrssoappassword','');
  //$cusid = "e002610";
  $customer_user = $user->name; //Must match with Drupal Username and OTRS Customer UserLogin name.
  # Set up a new SOAP connection:
  $client = new SoapClient(null, array(
      'location'  => variable_get('otrssoapurl',''),
      'uri'       => "Core",
      'trace'     => 1,
      'login'     => variable_get('otrssoapusername',''),
      'password'  => variable_get('otrssoappassword',''),
      'style'     => SOAP_RPC,
      'use'       => SOAP_ENCODED
    )
  );
  $Queue = $client->__soapCall("Dispatch",array(
      $username, $password,
      "QueueObject", "QueueLookup",
      "QueueID", $form_state['values']['queue'],
    )
  );

  # Use the Customer Username to validate existance of customer if Customer Name is returned.
  $CustomerName = $client->__soapCall("Dispatch", array(
      $username, $password,
      "CustomerUserObject", "CustomerName",
      "UserLogin", $customer_user,
    )
  );

  # Use the Customer Username to validate existance of customer if Customer ID is returned.
  $cusid = $client->__soapCall("Dispatch", array(
      $username, $password,
      "CustomerUserObject",   "CustomerIDs",
      "User",       $customer_user,
    )
  );

  # Create a new ticket. The function returns the Ticket ID.
  $TicketID = $client->__soapCall("Dispatch", array(
      $username, $password,
      "TicketObject", "TicketCreate", 
      "Title", $form_state['values']['subject'], 
      "QueueID", $form_state['values']['queue'], 
      "Lock", "unlock", 
      "PriorityID", 2, 
      "State", "new", 
      "TypeID",	$form_state['values']['type'],
      "CustomerID", $cusid,
      "CustomerUser", $customer_user, 
      "OwnerID", 1, 
      "UserID", 1,
    )
  );

  # A ticket is not usefull without at least one article. The function
  # returns an Article ID. 
  $ArticleID = $client->__soapCall("Dispatch", array(
      $username, $password,
      "TicketObject",   "ArticleCreate",
      "TicketID",       $TicketID,
      "ArticleType",    "webrequest",
      "SenderType",     "customer",
      "HistoryType",    "WebRequestCustomer",
      "HistoryComment", "Created from DAL Interface",
      "From",           $CustomerName,
      "Subject",        $form_state['values']['subject'],
      "ContentType",    "text/plain; charset=ISO-8859-1",
      "Body",           $form_state['values']['detail'],
      "UserID",         1,
      "Loop",           0,
      "AutoResponseType", 'auto reply',
      "OrigHeader", array(
        'From' => $CustomerName,
        'To' => $Queue,
        'Subject' => $form_state['values']['subject'],
        'Body' => $form_state['values']['detail']
      ),
    )
  );

  # Use the Ticket ID to retrieve the Ticket Number.
  $TicketNr = $client->__soapCall("Dispatch", array(
      $username, $password,
      "TicketObject",   "TicketNumberLookup",
      "TicketID",       $TicketID,
    )
  );
  
  drupal_set_message(t("The Ticket ($TicketNr) has been submitted"));
}

/*
function otrs_ticket_get_queue_name() {
  $username = variable_get('otrssoapusername','');
  $password = variable_get('otrssoappassword','');
  # Set up a new SOAP connection:
  $client = new SoapClient(null, array(
      'location'  => variable_get('otrssoapurl',''),
      'uri'       => "Core",
      'trace'     => 1,
      'login'     => variable_get('otrssoapusername',''),
      'password'  => variable_get('otrssoappassword',''),
      'style'     => SOAP_RPC,
      'use'       => SOAP_ENCODED
    )
  );

  $GetAllQueues = $client->__soapCall("Dispatch", array(
      $username, $password,
      "QueueObject",   "GetAllQueues",
    )
  );

  $getallqueues = array();
  $GetAllQueues = array_values($GetAllQueues);
  for ($i=0; $i<sizeof($GetAllQueues); $i++) {
    $getallqueues[$GetAllQueues[$i]] = $GetAllQueues[++$i];
  }

  ksort($getallqueues);
  
  return $getallqueues;
}
*/

function otrs_ticket_get_all_queues() {
  $username = variable_get('otrssoapusername','');
  $password = variable_get('otrssoappassword','');
  # Set up a new SOAP connection:
  $client = new SoapClient(null, array(
      'location'  => variable_get('otrssoapurl',''),
      'uri'       => "Core",
      'trace'     => 1,
      'login'     => variable_get('otrssoapusername',''),
      'password'  => variable_get('otrssoappassword',''),
      'style'     => SOAP_RPC,
      'use'       => SOAP_ENCODED
    )
  );
  $GetAllQueues = $client->__soapCall("Dispatch", array(
      $username, $password,
      "QueueObject",   "GetAllQueues",
    )
  );

  $getallqueues = array();
  $GetAllQueues = array_values($GetAllQueues);
  for ($i=0; $i<sizeof($GetAllQueues); $i++) {
    $getallqueues[$GetAllQueues[$i]] = $GetAllQueues[++$i];
  }
  ksort($getallqueues);
  
  return $getallqueues;
}

function otrs_ticket_get_all_types() {
  $username = variable_get('otrssoapusername','');
  $password = variable_get('otrssoappassword','');
  # Set up a new SOAP connection:
  $client = new SoapClient(null, array(
      'location'  => variable_get('otrssoapurl',''),
      'uri'       => "Core",
      'trace'     => 1,
      'login'     => variable_get('otrssoapusername',''),
      'password'  => variable_get('otrssoappassword',''),
      'style'     => SOAP_RPC,
      'use'       => SOAP_ENCODED
    )
  );
  $GetAllTypes = $client->__soapCall("Dispatch", array(
      $username, $password,
      "TicketObject",   "TicketTypeList",
      "UserID", "1",
    )
  );

  $getalltypes = array();
  $GetAllTypes = array_values($GetAllTypes);
  for ($i=0; $i<sizeof($GetAllTypes); $i++) {
    $getalltypes[$GetAllTypes[$i]] = $GetAllTypes[++$i];
  }
  ksort($getalltypes);
  
  return $getalltypes;
}



function otrs_ticket_listing($state) {
  global $user;
  drupal_set_title("My $state tickets in OTRS");
  $output = "";
  $username = variable_get('otrssoapusername','');
  $password = variable_get('otrssoappassword','');
  $customer_user = $user->name; //Must match with Drupal Username and OTRS Customer UserLogin name.
  # Set up a new SOAP connection:
  $client = new SoapClient(null, array(
      'location'  => variable_get('otrssoapurl',''),
      'uri'       => "Core",
      'trace'     => 1,
      'login'     => variable_get('otrssoapusername',''),
      'password'  => variable_get('otrssoappassword',''),
      'style'     => SOAP_RPC,
      'use'       => SOAP_ENCODED
    )
  );
  
  # Use the Customer Username to validate existance of customer if Customer ID is returned.
  $cusid = $client->__soapCall("Dispatch", array(
      $username, $password,
      "CustomerUserObject",   "CustomerIDs",
      "User",       $customer_user,
    )
  );

  # Use the customer id to search all tickets.
  $TicketIDs = $client->__soapCall("Dispatch", array(
      $username, $password,
      "TicketObject",   "TicketSearch",
      "Result",       "ARRAY",
      "StateType",	$state,
      "CustomerUserID",		$cusid,
      "CustomerUserLogin",	$customer_user,
    )
  );
  
  //print_r($TicketIDs);
  
  $header = array('Ticket Number', 'Title', 'State', 'Age');
  $options = array();
  if (!is_array($TicketIDs) && !empty($TicketIDs)) {
    $TicketIDs = array($TicketIDs);
  }
  if (isset($TicketIDs)) {
    foreach ($TicketIDs as $TicketID) {
      $TicketID = $client->__soapCall("Dispatch", array(
          $username, $password,
          "TicketObject",   "TicketGet",
          "TicketID",       $TicketID,
          //"Extended", 1,
        )
      );
    
      $newTicket = array();
      $TicketID = array_values($TicketID);
      for ($i=0; $i<sizeof($TicketID); $i++) {
        $newTicket[$TicketID[$i]] = $TicketID[++$i];
      }
    
      //echo "<pre>";
      //print_r($newTicket);
      //echo "</pre>";
    
      $options[] = array('data'=> array(l($newTicket['TicketNumber'],arg(0)."/".arg(1)."/".arg(2)."/".$newTicket['TicketNumber']),$newTicket['Title'],$newTicket['State'],get_age($newTicket['Created'])), 'title' => array($newTicket['TicketNumber']));
      //echo "\n=============================================================\n";
    }
  }

  $output = theme('table', array(
    'header' => $header,
    'rows' => $options,
    'attributes' => array('class' => array('ticketoverview'))
    )
  );

  //echo "</pre>";
  return $output;
}

function otrs_ticket_detail_listing($TicketNr) {
  $title = "";
  $state = "";
  $type = "";
  $queue = "";
  $output = "";
  $username = variable_get('otrssoapusername','');
  $password = variable_get('otrssoappassword','');

  # Set up a new SOAP connection:
  $client = new SoapClient(null, array(
      'location'  => variable_get('otrssoapurl',''),
      'uri'       => "Core",
      'trace'     => 1,
      'login'     => variable_get('otrssoapusername',''),
      'password'  => variable_get('otrssoappassword',''),
      'style'     => SOAP_RPC,
      'use'       => SOAP_ENCODED
    )
  );

  # Use the Ticket Number to retrieve the Ticket ID.
  //$TicketNr = "2012022110000013";
  $TicketID = $client->__soapCall("Dispatch", array(
      $username, $password,
      "TicketObject",   "TicketIDLookup",
      "TicketNumber",       $TicketNr,
    )
  );
  
  /*
  # Use the Ticket ID to retrieve the Ticket History.
  $HistoryGet = $client->__soapCall("Dispatch", array(
      $username, $password,
      "TicketObject",   "HistoryGet",
      "TicketID",       $TicketID,
      "UserID", 1,
    )
  );
  */

  # Use the Ticket ID to retrieve the Ticket Articles.
  $ArticleGet = $client->__soapCall("Dispatch", array(
      $username, $password,
      "TicketObject",   "ArticleGet",
      "TicketID",       $TicketID,
      "UserID", 1,
    )
  );

  if (!is_array($ArticleGet)) {
    $title = $ArticleGet->Title;
    $state = $ArticleGet->State;
    $priority = $ArticleGet->Priority;
    $queue = $ArticleGet->Queue;
  }
  if (is_array($ArticleGet)) {
    $ArticleGet = array_values($ArticleGet);
    $title = $ArticleGet[0]->Title;
    $state = $ArticleGet[0]->State;
    $priority = $ArticleGet[0]->Priority;
    $queue = $ArticleGet[0]->Queue;

  }
  drupal_set_title("$title ($TicketNr)");
  $output .= "<div class='ticket-details clearfix'>Criticality: <span class='ticket-details-value'>-  </span>  Impact: <span class='ticket-details-value'>-  </span>  State: <span class='ticket-details-value'>$state  </span> Priority: <span class='ticket-details-value'>$priority  </span> Queue: <span class='ticket-details-value'>$queue</span></div>";
  $output .= "<div class='ticket-articles'>";
  
  if (!is_array($ArticleGet)) {
    $age = date("Y-m-d H:i:s", $ArticleGet->IncomingTime);
    $handle = theme('otrs_ctools_collapsible_handle', array('from' => $ArticleGet->FromRealname, 'subject' => $ArticleGet->Subject, 'age' => get_age($age)));
    $content = theme('otrs_ctools_collapsible_content', array('from' => $ArticleGet->FromRealname, 'subject' => $ArticleGet->Subject, 'body' => $ArticleGet->Body));
    $output .= theme('otrs_ctools_collapsible', array('handle' => $handle, 'content' => $content, 'collapsed' => FALSE));
  }
  if (is_array($ArticleGet)) {
    foreach ($ArticleGet as $id => $article) {
      $collapsed = TRUE;
      if ($article->ArticleType == "note-internal") {
        continue;
      }
      $age = date("Y-m-d H:i:s", $article->IncomingTime);
      $handle = theme('otrs_ctools_collapsible_handle', array('from' => $article->FromRealname, 'subject' => $article->Subject, 'age' => get_age($age)));
      $content = theme('otrs_ctools_collapsible_content', array('from' => $article->FromRealname, 'subject' => $article->Subject, 'body' => $article->Body));

      if (sizeof($ArticleGet) == $id+1) {
        //echo "<pre>";
        //print_r($article);
        //echo "</pre>";
        $collapsed = FALSE;
      }
      
      $output .= theme('otrs_ctools_collapsible', array('handle' => $handle, 'content' => $content, 'collapsed' => $collapsed));
    }
  }
  $output .= "</div>";
  return $output;
}

function otrs_ticket_count($state) {
  global $user;
  $output = "";
  $username = variable_get('otrssoapusername','');
  $password = variable_get('otrssoappassword','');
  # Set up a new SOAP connection:
  $client = new SoapClient(null, array(
      'location'  => variable_get('otrssoapurl',''),
      'uri'       => "Core",
      'trace'     => 1,
      'login'     => variable_get('otrssoapusername',''),
      'password'  => variable_get('otrssoappassword',''),
      'style'     => SOAP_RPC,
      'use'       => SOAP_ENCODED
    )
  );
  
  //echo "<pre>";

  # Use the Customer Username to validate existance of customer if Customer ID is returned.
  $cusid = $client->__soapCall("Dispatch", array(
      $username, $password,
      "CustomerUserObject",   "CustomerIDs",
      "User",       $user->name,
    )
  );

  # Use the customer id to search all tickets.
  $TicketIDs = $client->__soapCall("Dispatch", array(
      $username, $password,
      "TicketObject",   "TicketSearch",
      "Result",       "COUNT",
      "StateType",	$state,
      //"CustomerID",		'e002610',
      "CustomerUserID", $cusid,
      "CustomerUserLogin", $user->name,
    )
  );
  return $TicketIDs;
}

function get_age($date,$date_start = '') {

  // If no start date is submitted, we'll calculate this based on today's date.
  if (empty($date_start)) {
    $date_start = date('Y-m-d H:i:s');
  }

  /**
  * Subtract the date of the content from current date or inputted date.
  * If the difference is negative, multiply it by -1 to make it positive. This just means that the date 
  * we are using as the basis for the calculation is before the content's date of creation.
  */

  $joined = strtotime($date_start) - strtotime($date);
  if ($joined < 0) {
    $joined = $joined * -1;
  }

  $age = array();
  
  /**
  * The age is greater than a year, so show in years.
  */
  //if ($joined > 31556926) {
  //  $final = floor($joined / 31556926);
  //  if ($final >= 1) { 
  //    $age[]= $final." y  "; 
  //  }
  //  $joined = $joined - ($final * 31556926);
  //}
  
  /**
  * The age is less than a year old, so show days.
  */
  if ($joined <= 31556926) {
    $final = floor($joined / 86400);
    if ($final >= 1) { 
      $age[]= $final." d   "; 
    }
    $joined = $joined - ($final * 86400);
  }

  /**
  * The age is less than a day old, so show hours.
  */

  if ($joined <= 86400) {
    $final = floor($joined / 3600);
    if ($final >= 0) { 
      $age[]= $final." h   "; 
    }
    $joined = $joined - ($final * 3600);
  }

  /**
  * The age is less than a hour old, so show minutes.
  */

  if ($joined <= 3600) {
    $final = floor($joined / 60);
    if ($final >= 1) { 
      $age[]= $final." m   "; 
    }
    $joined = $joined - ($final * 60);
  }

  /**
  * The age is less than a minute old, so show seconds.
  */

  if ($joined <= 60) {
    $final = $joined;
    if ($final >= 1) { 
      $age[]= $final." s   "; 
    }
  }
 
  
       
  if (sizeof($age) > 2) {
    return $age[0]."  ".$age[1];
  }
  else {
    return implode("  ",$age);
  }
}

function otrs_theme() {
  $items = array();
  $items['otrs_ctools_collapsible'] = array(
    'variables' => array(
      'handle' => NULL,
      'content' => NULL,
      'collapsed' => FALSE,
    ), 
  );

  $items['otrs_ctools_collapsible_handle'] = array(
    'variables' => array(
      'from' => NULL,
      'subject' => NULL,
      'age' => NULL,
    ), 
  );

  $items['otrs_ctools_collapsible_content'] = array(
    'variables' => array(
      'from' => NULL,
      'subject' => NULL,
      'body' => NULL,
    ), 
  );


  return $items;
}

function theme_otrs_ctools_collapsible_handle($vars) {
  $output = "<strong>" . $vars['from'] . "</strong> - " . $vars['subject'] . "  <span class='age'>" . $vars['age'] . "</span>";
  return $output;
}

function theme_otrs_ctools_collapsible_content($vars) {
  $output = "<div class='article-header clearfix'>";
  $output .= "<div class='article-from'><div class='label'>From:&nbsp;</div><span title='" . $vars['from'] . "'>" . $vars['from'] . "</span></div>";
  $output .= "<div class='article-subject'><div class='label'>Subject:&nbsp;</div><span title='" . $vars['subject'] . "'>" . $vars['subject'] . "</span></div>";
  $output .= "</div>";
  $output .= "<div class='article-content'>" . $vars['body'] . "</div>";
  
  return $output;

}
function theme_otrs_ctools_collapsible($vars) {
  ctools_add_js('collapsible-div');
  ctools_add_css('collapsible-div');

  $class = $vars['collapsed'] ? ' ctools-collapsed' : '';
  $output = '<div class="ctools-collapsible-container clearfix' . $class . '">';
  $output .= '<div class="ctools-collapsible-handle">' . $vars['handle'] . '</div>';
  $output .= '<div class="ctools-collapsible-content">' . $vars['content'] . '</div>';
  $output .= '</div>';

  return $output;
}
