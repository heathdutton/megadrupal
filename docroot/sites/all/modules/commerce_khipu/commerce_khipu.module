<?php

/**
 * @file
 * Implements Khipu payment services for use with Drupal Commerce.
 */

define('COMMERCE_KHIPU_BUTTON_TEXT_DEFAULT', t('Click to be redirected manually to Khipu'));

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_khipu_commerce_payment_method_info() {
  $payment_methods = array();
  $title = '';
  $buttons = khipu_get_buttons();
  $display_title = t('Payment through') . ' ' . theme('image', array(
    'path' => $buttons['50x25'],
    'alt' => t('Khipu'),
    'attributes' => array(
      'class' => array('commerce-khipu-logo'),
    ),
  ));
  $title = t('Khipu');
  $payment_methods['khipu'] = array(
    'base'                  => 'commerce_khipu',
    'title'                 => $title,
    'short_title'           => $title,
    'display_title'         => $display_title,
    'description'           => t('Redirects to Khipu to pay'),
    'terminal'              => FALSE,
    'offsite'               => TRUE,
    'offsite_autoredirect'  => TRUE,
  );

  return $payment_methods;
}


/**
 * Payment method callback: settings form.
 */
function commerce_khipu_settings_form($settings = array()) {
  $form = array();
  $settings = (array) $settings + array(
    'kaid'          => NULL,
    'subject'       => '',
    'body'          => '',
    'picture_url'   => '',
    'button_text'  => COMMERCE_KHIPU_BUTTON_TEXT_DEFAULT,
  );
  $khipu_accounts = khipu_get_all_accounts();
  $environments = khipu_get_environments();
  $options = array();
  foreach ($khipu_accounts as $khipu_account) {
    $options[$khipu_account->kaid] = $khipu_account->receiver_name . ' (' . $environments[$khipu_account->environment] . ')';
  }

  $form['kaid'] = array(
    '#type' => 'select',
    '#title' => t('Khipu Account'),
    '#options' => $options,
    '#description' => t('Select a khipu account.'),
    '#default_value' => $settings['kaid'],
    '#required' => TRUE,
  );
  $form['subject'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#maxlength' => 255,
    '#title' => t('Subject'),
    '#default_value' => $settings['subject'],
    '#description' => t('Defines the subject of the payment. This is used in khipu page.'),
  );
  $form['body'] = array(
    '#type' => 'textarea',
    '#title' => t('Body'),
    '#default_value' => $settings['body'],
    '#description' => t('Defines the body of the payment. This is used in khipu page. OPTIONAL'),
  );
  $form['picture_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Picture URL'),
    '#default_value' => $settings['picture_url'],
    '#description' => t('Defines an absolute url of an image to be used in khipu page.'),
    '#element_validate' => array('commerce_khipu_validate_picture_url'),
  );
  $form['button_text'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#maxlength' => 255,
    '#title' => t('Button Text'),
    '#default_value' => $settings['button_text'],
    '#description' => t('Defines the text of the button that appear in the redirect form.'),
  );

  return $form;
}


/**
 * Form element validation handler.
 */
function commerce_khipu_validate_picture_url($element, &$form_state) {
  if ($element['#value']) {
    if (!valid_url($element['#value'], TRUE)) {
      form_error($element, t('The URL %url is invalid', array('%url' => $element['#value'])));
    }
    else {
      // The url must be an image.
      if (getimagesize($element['#value']) === FALSE) {
        form_error($element, t('The URL must refer to an image.'));
      }
    }
  }

}


/**
 * Payment method callback: submit_form.
 */
function commerce_khipu_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form = array();
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $currency = $order_wrapper->commerce_order_total->currency_code->value();

  // Merge in default values.
  $pane_values += array(
    'currency' => $currency,
  );

  $form['currency'] = array(
    '#type' => 'value',
    '#value' => $pane_values['currency'],
  );

  $txt = t('Continue with checkout to complete payment via Khipu.');
  $markup = '<span class="commerce-khipu-info">' . $txt . '</span>';

  $form['commerce_khipu_information'] = array(
    '#markup' => $markup,
  );

  return $form;
}


/**
 * Payment method callback: submit_form_validate.
 */
function commerce_khipu_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  // Validates if the currency is allowed.
  if ($pane_values['currency'] != 'CLP') {
    $message = t('Khipu does not support currency @currency', array('@currency' => $pane_values['currency']));
    form_set_error('commerce_payment', $message);
    return FALSE;
  }
  // Khipu need an account.
  if (!$payment_method['settings']['kaid']) {
    $message = t('At the moment it is not possible to use this payment method.');
    form_set_error('commerce_payment', $message);
    return FALSE;
  }
}


/**
 * Payment method callback: redirect_form.
 */
function commerce_khipu_redirect_form($form, &$form_state, $order, $payment_method) {
  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  // Get the currency.
  $currency = $wrapper->commerce_order_total->currency_code->value();
  // Get the amount of the order total.
  $amount_value = $wrapper->commerce_order_total->amount->value();
  $amount = commerce_currency_amount_to_decimal($amount_value, $currency);

  $settings = $payment_method['settings'];

  // Before redirecting, we create a transaction in pending status because there
  // is no intermediate step between this step and the return page and the user
  // can close the browser before the last step happens.
  // The notification of the payment is made minutes later by khipu.
  $transaction = commerce_payment_transaction_new('khipu', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $amount;
  $transaction->currency_code = $currency;
  $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
  $transaction->message = t('This transaction is awaiting notification of khipu.');

  commerce_payment_transaction_save($transaction);

  $data = array(
    'amount' => $amount,
    'subject' => $settings['subject'],
    'body' => isset($settings['body']) ? $settings['body'] : '',
    'picture_url' => isset($settings['picture_url']) ? $settings['picture_url'] : '',
    'transaction_id' => $transaction->transaction_id,
    'cancel_url' => url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
    // Return to the payment redirect page for processing successful payments.
    'return_url' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
  );
  $kaid = $settings['kaid'];
  $msg = isset($settings['button_text']) ? $settings['button_text'] : COMMERCE_KHIPU_BUTTON_TEXT_DEFAULT;
  $form = khipu_redirect_form($form, $form_state, $data, $kaid, $payment_method['instance_id'], $msg, FALSE);

  return $form;
}


/**
 * Implements hook_khipu_verified().
 */
function commerce_khipu_khipu_verified($instance_id) {
  $payment_method = commerce_payment_method_instance_load($instance_id);
  if ($payment_method && $payment_method['method_id'] == 'khipu') {
    $transaction_id = $_POST['transaction_id'];
    if ($transaction = commerce_payment_transaction_load($transaction_id)) {
      if ($transaction->status == COMMERCE_PAYMENT_STATUS_PENDING) {
        $transaction->message = t('Transaction Completed');
        $transaction->remote_id = $_POST['notification_id'];
        $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
        commerce_payment_transaction_save($transaction);
        $order_id = $transaction->order_id;
        $order = commerce_order_load($order_id);
        $message = t('Khipu has responded that the payment has been successfully made​​, the order is complete.');
        commerce_order_status_update($order, 'completed', FALSE, NULL, $message);
      }
    }
  }
}
