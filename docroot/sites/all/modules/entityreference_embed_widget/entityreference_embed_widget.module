<?php

/**
 * @file
 * Primarily Drupal hooks.
 *
 * This is the main module file for Entity Reference Embed Widget.
 */

/**
 * Implements hook_field_widget_info().
 */
function entityreference_embed_widget_field_widget_info() {
  $widgets['entityreference_embed_widget_autocomplete'] = array(
    'label' => t('Autocomplete (embed)'),
    'description' => t('An autocomplete text field with embed entity.'),
    'field types' => array('entityreference'),
    'settings' => array(
      'match_operator' => 'CONTAINS',
      'size' => 60,
      // We don't have a default here, because it's not the same between
      // the two widgets, and the Field API doesn't update default
      // settings when the widget changes.
      'path' => '',
      'entity_view_mode' => 'full',
    ),
    'behaviors' => array(
      'multiple values' => FIELD_BEHAVIOR_CUSTOM,
      'default value' => FIELD_BEHAVIOR_NONE,
    ),
  );

  return $widgets;
}

/**
 * Implements hook_field_widget_settings_form().
 */
function entityreference_embed_widget_field_widget_settings_form($field, $instance) {
  $form = array();

  $widget = $instance['widget'];
  if ($widget['type'] == 'entityreference_embed_widget_autocomplete') {
    $settings = $widget['settings'] + field_info_widget_settings($widget['type']);
    if ($entity_info = entity_get_info($field['settings']['target_type'])) {
      $view_modes = array();
      foreach ($entity_info['view modes'] as $view_mode_key => $view_mode) {
        $view_modes[$view_mode_key] = $view_mode['label'];
      }

      $form['entity_view_mode'] = array(
        '#type' => 'select',
        '#title' => t('Entity view mode'),
        '#default_value' => $settings['entity_view_mode'],
        '#options' => $view_modes,
      );
    }

    $form['match_operator'] = array(
      '#type' => 'select',
      '#title' => t('Autocomplete matching'),
      '#default_value' => $settings['match_operator'],
      '#options' => array(
        'STARTS_WITH' => t('Starts with'),
        'CONTAINS' => t('Contains'),
      ),
      '#description' => t('Select the method used to collect autocomplete suggestions. Note that <em>Contains</em> can cause performance issues on sites with thousands of nodes.'),
    );

    $form['size'] = array(
      '#type' => 'textfield',
      '#title' => t('Size of textfield'),
      '#default_value' => $settings['size'],
      '#element_validate' => array('_element_validate_integer_positive'),
      '#required' => TRUE,
    );
  }

  return $form;
}

/**
 * Implements hook_field_widget_form().
 */
function entityreference_embed_widget_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $field_elements = array();

  if ($instance['widget']['type'] == 'entityreference_embed_widget_autocomplete') {
    // Ensure that the entity target type exists before displaying the widget.
    if ($entity_info = entity_get_info($field['settings']['target_type'])) {
      if ($field['cardinality'] == 1) {
        $field_elements = entityreference_embed_widget_field_single_value_form($form, $form_state, $field, $instance, $langcode, $items, $delta, $element);
      }
      else {
        $field_elements = entityreference_embed_widget_field_multiple_value_form($form, $form_state, $field, $instance, $langcode, $items, $element);
      }

      $field_elements['#attached']['css'][] = drupal_get_path('module', 'entityreference_embed_widget') . '/css/entityreference-embed-widget.css';
    }
  }

  return $field_elements;
}

/**
 * Implements hook_field_widget_error().
 */
function entityreference_embed_widget_field_widget_error($element, $error) {
  form_error($element, $error['message']);
}

/**
 * Special handling to create form element for single value.
 *
 * @param array $form
 *   An array representing the form that the editing element will be attached
 *   to.
 * @param array $form_state
 *   An array containing the current state of the form.
 * @param array $field
 *   An array representing the field whose editing element is being created.
 * @param array $instance
 *   An array representing the structure for $field in its current context.
 * @param string $langcode
 *   The language associated with the field.
 * @param array $items
 *   An array of the field values. When creating a new entity this may be NULL
 *   or an empty array to use default values.
 * @param int $delta
 *   A specific delta value of a field.
 * @param array $element
 *   An array of editing element which will be attached to $form.
 *
 * @return array
 *   The form element array created for this field.
 *
 * @see entityreference_embed_widget_field_widget_form()
 */
function entityreference_embed_widget_field_single_value_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $field_elements = array();

  $field_name = $field['field_name'];
  $parents = $form['#parents'];

  $id_prefix = implode('-', array_merge($parents, array($field_name)));
  $wrapper_id = drupal_html_id($id_prefix . '-add-more-wrapper');

  // Determine the number of widgets to display.
  $field_state = field_form_get_state($parents, $field_name, $langcode, $form_state);
  $max = $field_state['items_count'];

  $element['#required'] = $instance['required'];
  $field_elements[$delta] = entityreference_embed_widget_build_autocomplete_widget($form, $form_state, $field, $instance, $langcode, $items, $delta, $element, $wrapper_id);
  if ($max) {
    $field_elements[$delta] += array(
      '#type' => 'fieldset',
      '#title' => $element['#title'],
      '#colapsible' => FALSE,
    );
  }
  // Add 'add item' button, if not working with a programmed form.
  elseif (empty($form_state['programmed'])) {
    $limit_validation_errors = array(array_merge($parents, array(
      $field_name,
      $langcode,
    )));

    $field_elements['add_more'] = array(
      '#type' => 'submit',
      '#name' => strtr($id_prefix, '-', '_') . '_entityreference_embed_widget_add_more',
      '#value' => t('Add item'),
      '#attributes' => array('class' => array('field-add-more-submit')),
      '#limit_validation_errors' => $limit_validation_errors,
      '#submit' => array('field_add_more_submit'),
      '#ajax' => array(
        'callback' => 'entityreference_embed_widget_field_add_more_js',
        'wrapper' => $wrapper_id,
        'effect' => 'fade',
      ),
    );
  }

  $field_elements += array(
    '#theme' => 'field_multiple_value_form',
    '#field_name' => $field['field_name'],
    '#cardinality' => $field['cardinality'],
    '#title' => check_plain($instance['label']),
    '#required' => $instance['required'],
    '#description' => field_filter_xss($instance['description']),
    '#prefix' => '<div id="' . $wrapper_id . '">',
    '#suffix' => '</div>',
    '#max_delta' => $max,
  );

  return $field_elements;
}

/**
 * Special handling to create form element for multiple values.
 *
 * @param array $form
 *   An array representing the form that the editing element will be attached
 *   to.
 * @param array $form_state
 *   An array containing the current state of the form.
 * @param array $field
 *   An array representing the field whose editing element is being created.
 * @param array $instance
 *   An array representing the structure for $field in its current context.
 * @param string $langcode
 *   The language associated with the field.
 * @param array $items
 *   An array of the field values. When creating a new entity this may be NULL
 *   or an empty array to use default values.
 * @param array $element
 *   An array of editing element which will be attached to $form.
 *
 * @return array
 *   The form element array created for this field.
 *
 * @see entityreference_embed_widget_field_widget_form()
 */
function entityreference_embed_widget_field_multiple_value_form(&$form, &$form_state, $field, $instance, $langcode, $items, $element) {
  $field_elements = array();

  $field_name = $field['field_name'];
  $parents = $form['#parents'];

  $id_prefix = implode('-', array_merge($parents, array($field_name)));
  $wrapper_id = drupal_html_id($id_prefix . '-add-more-wrapper');

  // Determine the number of widgets to display.
  $field_state = field_form_get_state($parents, $field_name, $langcode, $form_state);
  $max = $field_state['items_count'];
  $is_unlimited = $field['cardinality'] == FIELD_CARDINALITY_UNLIMITED;
  if (!$is_unlimited && $field['cardinality'] == $max) {
    $max -= 1;
  }

  $element['#title_display'] = 'invisible';
  $element['#description'] = '';

  for ($delta = 0; $delta <= $max; $delta++) {
    // Only the first widget should be required.
    $element['#required'] = ($delta == 0 && $instance['required']);

    $field_elements[$delta] = entityreference_embed_widget_build_autocomplete_widget($form, $form_state, $field, $instance, $langcode, $items, $delta, $element, $wrapper_id);
    $field_elements[$delta]['#weight'] = $delta;

    // Input field for the delta (drag-n-drop reordering).
    // We name the element '_weight' to avoid clashing with elements
    // defined by widget.
    $field_elements[$delta]['_weight'] = array(
      '#type' => 'weight',
      '#title' => t('Weight for row @number', array('@number' => $delta + 1)),
      '#title_display' => 'invisible',
      // Note: this 'delta' is the FAPI 'weight' element's property.
      '#delta' => $max,
      '#default_value' => isset($items[$delta]['_weight']) ? $items[$delta]['_weight'] : $delta,
      '#weight' => 100,
    );
  }

  $field_elements += array(
    '#theme' => 'field_multiple_value_form',
    '#field_name' => $field['field_name'],
    '#cardinality' => $field['cardinality'],
    '#title' => check_plain($instance['label']),
    '#required' => $instance['required'],
    '#description' => field_filter_xss($instance['description']),
    '#prefix' => '<div id="' . $wrapper_id . '">',
    '#suffix' => '</div>',
    '#max_delta' => $max,
  );

  // Add 'add more' button, if not working with a programmed form.
  if (empty($form_state['programmed']) && ($is_unlimited || $field['cardinality'] > $field_state['items_count'])) {
    $limit_validation_errors = array(array_merge($parents, array(
      $field_name,
      $langcode,
    )));

    $field_elements['add_more'] = array(
      '#type' => 'submit',
      '#name' => strtr($id_prefix, '-', '_') . '_entityreference_embed_widget_add_more',
      '#value' => t('Add item'),
      '#attributes' => array('class' => array('field-add-more-submit')),
      '#limit_validation_errors' => $limit_validation_errors,
      '#submit' => array('field_add_more_submit'),
      '#ajax' => array(
        'callback' => 'entityreference_embed_widget_field_add_more_js',
        'wrapper' => $wrapper_id,
        'effect' => 'fade',
      ),
    );
  }

  return $field_elements;
}

/**
 * Wrapper function to build the widget.
 *
 * @see entityreference_embed_widget_field_widget_form()
 */
function entityreference_embed_widget_build_autocomplete_widget(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element, $wrapper_id) {
  $entity_type = $instance['entity_type'];
  $entity = isset($element['#entity']) ? $element['#entity'] : NULL;
  $handler = entityreference_get_selection_handler($field, $instance, $entity_type, $entity);
  $target_type = $field['settings']['target_type'];

  $parents = array_merge($element['#field_parents'], array(
    $element['#field_name'],
    $langcode,
    $delta,
  ));

  if (!empty($form_state['input'])) {
    $items[$delta]['target_id'] = NULL;
    $value = drupal_array_get_nested_value($form_state['input'], $parents);
    // Take "label (entity id)', match the id from parenthesis.
    if (isset($value['target_id']) && preg_match("/.+\((\d+)\)/", $value['target_id'], $matches)) {
      $items[$delta]['target_id'] = $matches[1];
    }
  }

  $target_entity = NULL;
  $target_entity_id = NULL;
  $target_entity_label = NULL;
  if (isset($items[$delta]['target_id'])) {
    // Load those entities and loop through them to extract their labels.
    if ($target_entity = entity_load($target_type, array($items[$delta]['target_id']))) {
      $target_entity = reset($target_entity);
      list($target_entity_id) = entity_extract_ids($target_type, $target_entity);
      $label = $handler->getLabel($target_entity);
      $target_entity_label = "$label ($target_entity_id)";
      // Labels containing commas or quotes must be wrapped in quotes.
      if (strpos($target_entity_label, ',') !== FALSE || strpos($target_entity_label, '"') !== FALSE) {
        $target_entity_label = '"' . str_replace('"', '""', $target_entity_label) . '"';
      }
    }
  }

  // Prepare the autocomplete path.
  $autocomplete_path = 'entityreference/autocomplete/single';
  if (!empty($instance['widget']['settings']['path'])) {
    $autocomplete_path = $instance['widget']['settings']['path'];
  }

  $autocomplete_path .= '/' . $field['field_name'] . '/' . $instance['entity_type'] . '/' . $instance['bundle'] . '/';
  // Use <NULL> as a placeholder in the URL when we don't have an entity.
  // Most webservers collapse two consecutive slashes.
  $id = 'NULL';
  if ($entity) {
    list($eid) = entity_extract_ids($entity_type, $entity);
    if ($eid) {
      $id = $eid;
    }
  }
  $autocomplete_path .= $id;

  $element += array(
    '#type' => 'textfield',
    '#maxlength' => 1024,
    '#default_value' => $target_entity_label,
    '#autocomplete_path' => $autocomplete_path,
    '#size' => $instance['widget']['settings']['size'],
    '#element_validate' => array(
      '_entityreference_autocomplete_validate',
      '_entityreference_embed_widget_validate',
    ),
  );

  if (!empty($target_entity_label)) {
    $element['#type'] = 'hidden';
    unset($element['#autocomplete_path']);
  }

  $element_view = array();
  $element_remove = array();
  if (!empty($target_entity)) {
    $target_entity_info = entity_get_info($target_type);
    $target_view_mode = $instance['widget']['settings']['entity_view_mode'];
    if (!isset($target_entity_info['view modes'][$target_view_mode])) {
      $target_view_modes = reset($target_entity_info['view modes']);
      $target_view_mode = key($target_view_modes);
    }

    $element_view = entity_view($target_type, array($target_entity), $target_view_mode);

    // Add 'remove' button.
    $element_remove = array(
      '#delta' => $delta,
      '#type' => 'submit',
      '#name' => implode('_', $parents) . '_remove_button',
      '#value' => t('Remove'),
      '#attributes' => array('class' => array('entityreference-preview-widget-field-remove-submit')),
      '#submit' => array('entityreference_embed_widget_field_remove_submit'),
      '#limit_validation_errors' => array(),
      '#ajax' => array(
        'callback' => 'entityreference_embed_widget_field_remove_js',
        'wrapper' => $wrapper_id,
        'effect' => 'fade',
      ),
    );
  }

  return array(
    'target_id' => $element,
    'target_view' => $element_view,
    'target_remove' => $element_remove,
  );
}

/**
 * Validate that field not empty on click "Add item" button.
 *
 * @param array $element
 *   An array of validating element.
 * @param array $form_state
 *   An array containing the current state of the form.
 */
function _entityreference_embed_widget_validate($element, &$form_state) {
  // If a value was not entered into the autocomplete...
  $button = $form_state['triggering_element'];
  if (strpos($button['#name'], '_entityreference_embed_widget_add_more') !== FALSE && empty($element['#value'])) {
    if (isset($element['#title'])) {
      form_error($element, t('!name field is empty.', array('!name' => $element['#title'])));
    }
    else {
      form_error($element);
    }
  }
}

/**
 * Submit callback for the "Remove" button of a field form.
 *
 * When a remove button is submitted, we need to find the item that it
 * referenced and delete it. Since field UI has the deltas as a straight
 * unbroken array key, we have to renumber everything down. Since we do this
 * we *also* need to move all the deltas around in the $form_state['values']
 * and $form_state['input'] so that user changed values follow. This is a bit
 * of a complicated process.
 */
function entityreference_embed_widget_field_remove_submit($form, &$form_state) {
  $button = $form_state['triggering_element'];
  $delta = $button['#delta'];

  // Where in the form we'll find the parent element.
  $address = array_slice($button['#array_parents'], 0, -2);

  // Go one level up in the form, to the widgets container.
  $parent_element = drupal_array_get_nested_value($form, $address);
  $field_name = $parent_element['#field_name'];
  $langcode = $parent_element['#language'];
  $parents = $parent_element['#field_parents'];

  $field_state = field_form_get_state($parents, $field_name, $langcode, $form_state);

  // Go ahead and renumber everything from our delta to the last
  // item down one. This will overwrite the item being removed.
  for ($i = $delta; $i <= $field_state['items_count']; $i++) {
    $old_element_address = array_merge($address, array($i + 1));
    $new_element_address = array_merge($address, array($i));

    $moving_element = drupal_array_get_nested_value($form, $old_element_address);
    $moving_element_value = drupal_array_get_nested_value($form_state['values'], $old_element_address);
    $moving_element_input = drupal_array_get_nested_value($form_state['input'], $old_element_address);

    // Tell the element where it's being moved to.
    $moving_element['#parents'] = $new_element_address;

    // Move the element around.
    form_set_value($moving_element, $moving_element_value, $form_state);
    drupal_array_set_nested_value($form_state['input'], $moving_element['#parents'], $moving_element_input);

    // Move the entity in our saved state.
    if (isset($field_state['entity'][$i + 1])) {
      $field_state['entity'][$i] = $field_state['entity'][$i + 1];
    }
    else {
      unset($field_state['entity'][$i]);
    }
  }

  // Replace the deleted entity with an empty one. This helps to ensure that
  // trying to add a new entity won't ressurect a deleted entity from the
  // trash bin.
  // Then remove the last item. But we must not go negative.
  if ($field_state['items_count'] > 0) {
    $field_state['items_count']--;
  }

  // Fix the weights. Field UI lets the weights be in a range of
  // (-1 * item_count) to (item_count). This means that when we remove one,
  // the range shrinks; weights outside of that range then get set to
  // the first item in the select by the browser, floating them to the top.
  // We use a brute force method because we lost weights on both ends
  // and if the user has moved things around, we have to cascade because
  // if I have items weight weights 3 and 4, and I change 4 to 3 but leave
  // the 3, the order of the two 3s now is undefined and may not match what
  // the user had selected.
  $input = drupal_array_get_nested_value($form_state['input'], $address);
  // Sort by weight.
  uasort($input, '_field_sort_items_helper');

  // Re-weight everything in the correct order.
  $weight = -1 * $field_state['items_count'];
  foreach ($input as $key => $item) {
    if ($item) {
      $input[$key]['_weight'] = $weight++;
    }
  }

  drupal_array_set_nested_value($form_state['input'], $address, $input);
  field_form_set_state($parents, $field_name, $langcode, $form_state, $field_state);

  $form_state['rebuild'] = TRUE;
}

/**
 * Ajax callback in response to a new empty widget being added to the form.
 *
 * This returns the new page content to replace the page content made obsolete
 * by the form submission.
 *
 * @see field_add_more_submit()
 */
function entityreference_embed_widget_field_add_more_js($form, $form_state) {
  $button = $form_state['triggering_element'];

  // Go one level up in the form, to the widgets container.
  $element = drupal_array_get_nested_value($form, array_slice($button['#array_parents'], 0, -1));

  // Add a DIV around the delta receiving the Ajax effect.
  $delta = $element['#max_delta'];
  $element[$delta]['#prefix'] = '<div class="ajax-new-content">' . (isset($element[$delta]['#prefix']) ? $element[$delta]['#prefix'] : '');
  $element[$delta]['#suffix'] = (isset($element[$delta]['#suffix']) ? $element[$delta]['#suffix'] : '') . '</div>';

  return $element;
}

/**
 * Ajax callback remove field when remove click is trigger.
 *
 * In this callback we will replace field items. Main job
 * to delete field item we will done into submit handler.
 *
 * @see entityreference_embed_widget_field_remove_submit()
 */
function entityreference_embed_widget_field_remove_js($form, $form_state) {
  $button = $form_state['triggering_element'];

  // Go two levels up in the form, to the whole widget.
  $element = drupal_array_get_nested_value($form, array_slice($button['#array_parents'], 0, -2));
  return $element;
}
