<?php
/**
 * @file
 * Provides the ability to add comment to user profile.
 */

// @todo disable pathauto.

/**
 * Implements hook_node_info().
 */
function user_profile_comments_node_info() {
  return array(
    'user_profile_comment' => array(
      'name' => t('User profile comment'),
      'base' => 'user_profile_comment',
      'description' => t('Use for user profile comment. Every user related to this entity.'),
    ),
  );
}

/**
 * Implements hook_field_extra_fields().
 */
function user_profile_comments_field_extra_fields() {
  $info['user']['user'] = array(
    'display' => array(
      'user_profile_comments' => array(
        'label' => t('User profile comments'),
        'description' => t('User profile comments and comment form.'),
        'weight' => 5,
      ),
    ),
  );
  return $info;
}

/**
 * Implements hook_menu().
 */
function user_profile_comments_menu() {
  $items = array();

  $items['admin/config/people/accounts/comment-fields'] = array(
    'title' => 'Comment fields',
    'description' => 'Configure user profile comment fields',
    'access callback' => 'user_access',
    'access arguments' => array('administer content types'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'field_ui_field_overview_form',
      'comment',
      'comment_node_user_profile_comment',
    ),
    'weight' => 10,
    'type' => MENU_LOCAL_TASK,
    'file' => 'field_ui.admin.inc',
    'file path' => drupal_get_path('module', 'field_ui'),
  );

  $items['admin/config/people/accounts/comment-display'] = array(
    'title' => 'Comment display',
    'description' => 'Configure user profile comment display',
    'access callback' => 'user_access',
    'access arguments' => array('administer content types'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'field_ui_display_overview_form',
      'comment',
      'comment_node_user_profile_comment',
      'default',
    ),
    'weight' => 11,
    'type' => MENU_LOCAL_TASK,
    'file' => 'field_ui.admin.inc',
    'file path' => drupal_get_path('module', 'field_ui'),
  );

  return $items;
}

/**
 * Implements hook_node_access().
 */
function user_profile_comments_node_access($node, $op, $account) {
  // Allow user add comment to unpublished node.
  if (!empty($node->type) && $node->type == 'user_profile_comment' && ($op == 'view' || $op == 'update')) {
    return NODE_ACCESS_ALLOW;
  }
}

/**
 * Implements hook_user_view().
 */
function user_profile_comments_user_view($account) {
  $content = '';
  $profile_comment = user_profile_comments_get_profile_entity($account->uid);
  if (!isset($account->content['user_profile_comments'])) {
    $account->content['user_profile_comments'] = array();
  }
  if (!isset($profile_comment->comment_count)) {
    $profile_comment->comment_count = 0;
  }

  // Build comments thread.
  $comments = comment_node_page_additions($profile_comment);
  if (!empty($comments)) {
    $content = drupal_render($comments);
  }

  // Attach links if necessary.
  _user_profile_comments_attach_links($content, $profile_comment);

  // Add user profile elements.
  $account->content['user_profile_comments'] += array(
    '#type' => 'user_profile_category',
    '#attributes' => array('class' => array('user-profile-comments')),
    '#weight' => 5,
    '#title' => t('Comments'),
  );

  $account->content['user_profile_comments']['comments'] = array(
    '#type' => 'user_profile_item',
    '#title' => '',
    '#markup' => $content,
  );
}

/**
 * Implements hook_query_alter().
 */
function user_profile_comments_query_alter(QueryAlterableInterface $query) {
  // Hide user_profile_comment content type from admin/content page.
  // @TODO should be configurable from admin UI.
  if (arg(0) == 'admin' && arg(1) == 'content' && !arg(2) && $query->hasTag('node_access')) {
    $query->condition('n.type', 'user_profile_comment', '<>');
  }
}

/**
 * Implements hook_form_alter().
 */
function user_profile_comments_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'node_admin_content') {
    if (!empty($form['filter']['filters']['status']['filters']['type']['#options']['user_profile_comment'])) {
      unset($form['filter']['filters']['status']['filters']['type']['#options']['user_profile_comment']);
    }
  }
}

/**
 * Implements hook_user_insert().
 */
function user_profile_comments_user_insert(&$edit, $account, $category) {
  user_profile_comments_create_entity($account->uid);
}

/**
 * Implements hook_user_delete().
 */
function user_profile_comments_user_delete($account) {
  $profile_comment = user_profile_comments_get_profile_entity($account->uid);
  node_delete($profile_comment->nid);
}

/**
 * Implements hook_preprocess_page().
 */
function user_profile_comments_preprocess_page(&$variables) {
  // Redirect to user page.
  if (!empty($variables['node']->type) && $variables['node']->type == 'user_profile_comment' && !empty($variables['node']->uid)) {
    // @TODO args and query.
    drupal_goto('user/' . $variables['node']->uid);
  }
}

/**
 * Implements hook_init().
 */
function user_profile_comments_init() {
  // @TODO need to improve access handling.
  if (arg(0) == 'admin' && arg(1) == 'structure' && arg(2) == 'types' && arg(3) == 'manage') {
    $node_type = menu_get_object('node_type', 4);
    if (!empty($node_type->type) && $node_type->type == 'user_profile_comment') {
      drupal_set_message('Access denied to user profile comment content type.');
      drupal_goto('admin/structure/types');
    }

    // Allow user edit/add comment fields.
    if (arg(4) == 'user-profile-comment' && arg(5) == 'comment' && arg(6) == 'fields' && arg(7) == '') {
      drupal_goto('admin/config/people/accounts/comment-fields');
    }
  }
}

/**
 * Implements hook_menu_alter().
 */
function user_profile_comments_menu_alter(&$items) {
  if (!empty($items['node/add/user-profile-comment'])) {
    unset($items['node/add/user-profile-comment']);
  }
}

/**
 * Implements of hook_views_api().
 */
function user_profile_comments_views_api() {
  return array('api' => 3);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function user_profile_comments_form_user_admin_settings_alter(&$form, &$form_state, $form_id) {
  // Add comment settings to user settings page.
  $form['type'] = array(
    '#type' => 'hidden',
    '#value' => 'user_profile_comment',
  );
  $form['#node_type'] = new stdClass();
  $form['#node_type']->type = 'user_profile_comment';

  comment_form_node_type_form_alter($form, $form_state);
  if (isset($form['email_title']) && isset($form['email']) && isset($form['comment'])) {
    $form['comment']['#weight'] = 4;
    $form['email_title']['#weight'] = 5;
    $form['email']['#weight'] = 6;
    $form['#submit'][] = 'user_profile_comments_settings_form_submit';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function user_profile_comments_form_field_ui_display_overview_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#entity_type'] == 'comment' && $form['#bundle'] == 'comment_node_user_profile_comment') {
    $form['modes']['#access'] = FALSE;
  }
}

/**
 * Submit callback for user_admin_settings form.
 */
function user_profile_comments_settings_form_submit(&$form, &$form_state) {
  $values = $form_state['values'];
  $settings = user_profile_comments_get_comment_settings();
  if (!empty($values['type'])) {
    foreach ($settings as $setting) {
      if (isset($values[$setting])) {
        variable_set($setting . '_' . $values['type'], $values[$setting]);
      }
    }
  }


}

/**
 * Load user_profile_comment entity for user.
 *
 * @param int $uid
 *   User id.
 *
 * @return int
 *   Node id.
 */
function user_profile_comments_load_entity($uid) {
  $node = db_select('node', 'n')
    ->fields('n')
    ->condition('n.uid', $uid)
    ->condition('n.type', 'user_profile_comment')
    ->execute()
    ->fetchObject();
  return !empty($node->nid) ? node_load($node->nid) : FALSE;
}

/**
 * Check if user_profile_comment entity is exist.
 */
function user_profile_comments_user_entity_is_exist($uid) {
  $node = db_select('node', 'n')
    ->fields('n')
    ->condition('n.uid', $uid)
    ->condition('n.type', 'user_profile_comment')
    ->execute()
    ->fetchObject();
  return !empty($node->nid) ? TRUE : FALSE;
}

/**
 * Create user_profile_comment entity for user.
 */
function user_profile_comments_create_entity($uid) {
  $node = new stdClass();
  $node->type = 'user_profile_comment';
  $node->title = 'User comments node';
  $node->language = LANGUAGE_NONE;
  $node->status = 0;
  node_object_prepare($node);
  $node->uid = $uid;
  node_save($node);
  return $node;
}

/**
 * Return user_profile_comment for user.
 */
function user_profile_comments_get_profile_entity($uid) {
  if (!user_profile_comments_user_entity_is_exist($uid)) {
    $profile_comment = user_profile_comments_create_entity($uid);
  }
  else {
    $profile_comment = user_profile_comments_load_entity($uid);
  }
  return $profile_comment;
}

/**
 * Return list of comment settings.
 */
function user_profile_comments_get_comment_settings() {
  return array(
    'comment',
    'comment_default_mode',
    'comment_default_per_page',
    'comment_anonymous',
    'comment_subject_field',
    'comment_preview',
    'comment_form_location',
  );
}

/**
 * Attach links if comment form location is separate page.
 */
function _user_profile_comments_attach_links(&$content, $profile_comment) {
  $comment_form_location = variable_get('comment_form_location_user_profile_comment', COMMENT_FORM_BELOW);
  if ($comment_form_location == COMMENT_FORM_SEPARATE_PAGE) {
    comment_node_view($profile_comment, 'full');
    if (!empty($profile_comment->content['links'])) {
      $content .= drupal_render($profile_comment->content['links']);
    }
  }
}

/**
 * Implements hook_preprocess_comment().
 */
function user_profile_comments_preprocess_comment(&$variables) {
  if ($variables['node']->type == 'user_profile_comment') {
    $variables['theme_hook_suggestions'][] = 'comment__user_profile';
  }
}

/**
 * Implements hook_preprocess_comment_wrapper().
 */
function user_profile_comments_preprocess_comment_wrapper(&$variables) {
  if ($variables['node']->type == 'user_profile_comment') {
    $variables['theme_hook_suggestions'][] = 'comment_wrapper__user_profile';
  }
}
