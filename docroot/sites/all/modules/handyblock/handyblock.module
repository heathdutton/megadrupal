<?php

/**
 * @file
 * Provides blocks that contain the current entity (among other things)
 * as context, and that are super-easy to theme.
 */


/**
 * Implements hook_theme().
 */
function handyblock_theme($existing, $type, $theme, $path) {
  $ret = array();
  
  $callback_data = handyblock_get_block_info();
  if (!empty($callback_data) && is_array($callback_data)) {
    foreach ($callback_data as $delta => $info) {
      if (empty($info['theme_callback'])) {
        $key = 'handyblock_' . $delta;
        $ret[$key] = array(
          'template' => 'handyblock-' . str_replace('_', '-', $delta),
          'variables' => array(),
        );
        if (!empty($info['theme_variables']) && is_array($info['theme_variables'])) {
          foreach ($info['theme_variables'] as $var_name) {
            $ret[$key]['variables'][$var_name] = NULL;
          }
        }
      }
    }
  }
  
  return $ret;
}

/**
 * Implements hook_block_info().
 */
function handyblock_block_info() {
  $blocks = array();
  
  $callback_data = handyblock_get_block_info();
  if (!empty($callback_data) && is_array($callback_data)) {
    foreach ($callback_data as $delta => $info) {
      if (!empty($info['block_info'])) {
        if (!is_array($info['block_info'])) {
          $info['block_info'] = array('info' => $info['block_info']);
        }
        $blocks[$delta] = $info['block_info'];
      }
    }
  }
  
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function handyblock_block_view($delta = '') {
  $default_theme = variable_get('theme_default', 'bartik');
  $callback_data = handyblock_get_block_info();
  $callback_key = $delta;
  
  if (!empty($callback_data[$delta]['alter_callback']) && !empty($callback_data[$callback_data[$delta]['alter_callback']])) {
    $callback_key = $callback_data[$delta]['alter_callback'];
  }
  
  $context = array();
  if (!empty($callback_data[$callback_key]['handyblock_context'])) {
    $func_name = 'handyblock_context_' . $callback_data[$callback_key]['handyblock_context'];
    
    if (function_exists($func_name)) {
      if (!empty($callback_data[$delta]['context_arguments'])) {
        $context = call_user_func_array($func_name, $callback_data[$delta]['context_arguments']);
      }
      elseif (!empty($callback_data[$callback_key]['context_arguments'])) {
        $context = call_user_func_array($func_name, $callback_data[$callback_key]['context_arguments']);
      }
      else {
        $context = $func_name();
      }
      
      if (empty($context)) {
        return;
      }
    }
  }
  
  $theme_key = $delta;
  if (!empty($callback_data[$delta]['theme_callback']) && !empty($callback_data[$callback_data[$delta]['theme_callback']])) {
    $theme_key = $callback_data[$delta]['theme_callback'];
  }
  
  $block = array(
    'content' => array(
      '#theme' => 'handyblock_' . $theme_key,
    ),
  );
  
  $func_name = $default_theme . '_handyblock_' . $callback_key . '_alter';
  if (function_exists($func_name)) {
    $func_name($block, $context);
  }
  
  if (!empty($block)) {
    return $block;
  }
}

/**
 * Calls the YOURTHEME_handyblock() callback in template.php (if
 * available), and returns its response.
 * 
 * @return
 *   Response of YOURTHEME_handyblock() callback (if available).
 */
function handyblock_get_block_info() {
  global $theme_key;
  
  if (!isset($theme_key)) {
    drupal_theme_initialize();
  }
  
  $default_theme = variable_get('theme_default', 'bartik');
  handyblock_load_template_php($default_theme);
  
  $func_name = $default_theme . '_handyblock';
  if (function_exists($func_name)) {
    return $func_name();
  }
}

/**
 * Loads the template.php file for the active theme, in case it's not
 * already loaded.
 * 
 * @param $theme_key
 *   Active theme name.
 */
function handyblock_load_template_php($theme_key) {
  $themes = list_themes();
  if (!empty($themes[$theme_key]->filename) && !empty($themes[$theme_key]->engine) && $themes[$theme_key]->engine == 'phptemplate') {
    $file = dirname($themes[$theme_key]->filename) . '/template.php';
    if (file_exists($file)) {
      include_once DRUPAL_ROOT . '/' . $file;
    }
  }
}

/**
 * Handy Block context callback for type 'curr_page_node'.
 */
function handyblock_context_curr_page_node() {
  $node = handyblock_get_curr_page_node();
  if (!empty($node->nid)) {
    return array('node' => $node);
  }
}

/**
 * Handy Block context callback for type 'curr_page_user'.
 */
function handyblock_context_curr_page_user() {
  $user = handyblock_get_curr_page_user();
  if (!empty($user->uid)) {
    return array('user' => $user);
  }
}

/**
 * Handy Block context callback for type 'curr_page_term'.
 */
function handyblock_context_curr_page_term() {
  $term = handyblock_get_curr_page_term();
  if (!empty($term->tid)) {
    return array('term' => $term);
  }
}

/**
 * Determines if the page currently being displayed is a node view page,
 * and if so, returns the corresponding node object.
 *
 * @param $must_be_view_page
 *   If this is set to FALSE, then the current page can be any node/%node/...
 *   page, it doesn't have to be node/%node/view. Defaults to TRUE.
 *
 * @return
 *   Node object or NULL.
 */
function handyblock_get_curr_page_node($must_be_view_page = TRUE) {
  $arg1 = arg(1);
  $arg2 = arg(2);
  $arg3 = arg(3);
  $arg4 = arg(4);

  if (arg(0) == 'node' && !empty($arg1) && is_numeric($arg1) && (!$must_be_view_page || empty($arg2) || ($arg2 == 'revisions' && !empty($arg3) && is_numeric($arg3) && (empty($arg4) || $arg4 == 'view')))) {
    $node = node_load($arg1);

    if (!empty($node->nid)) {
      return $node;
    }
  }
  
  return NULL;
}

/**
 * Determines if the page currently being displayed is a user view page,
 * and if so, returns the corresponding user object.
 *
 * @param $must_be_view_page
 *   If this is set to FALSE, then the current page can be any user/%user/...
 *   page, it doesn't have to be user/%user/view. Defaults to TRUE.
 *
 * @return
 *   User object or NULL.
 */
function handyblock_get_curr_page_user($must_be_view_page = TRUE) {
  $arg1 = arg(1);
  $arg2 = arg(2);

  if (arg(0) == 'user' && !empty($arg1) && is_numeric($arg1) && (!$must_be_view_page || empty($arg2))) {
    $user = user_load($arg1);

    if (!empty($user->uid)) {
      return $user;
    }
  }
  
  return NULL;
}

/**
 * Determines if the page currently being displayed is a term view page,
 * and if so, returns the corresponding term object.
 *
 * @param $must_be_view_page
 *   If this is set to FALSE, then the current page can be any taxonomy/term/%term/...
 *   page, it doesn't have to be taxonomy/term/%term/view. Defaults to TRUE.
 *
 * @return
 *   Term object or NULL.
 */
function handyblock_get_curr_page_term($must_be_view_page = TRUE) {
  $arg1 = arg(1);
  $arg2 = arg(2);
  $arg3 = arg(3);

  if (arg(0) == 'taxonomy' && arg(1) == 'term' && !empty($arg2) && is_numeric($arg2) && (!$must_be_view_page || empty($arg3))) {
    $term = taxonomy_term_load($arg2);

    if (!empty($term->tid)) {
      return $term;
    }
  }
  
  return NULL;
}

/**
 * Handy Block context callback for type 'nodequeue'.
 */
function handyblock_context_nodequeue($nqid) {
  $nodes = nodequeue_load_nodes($nqid, FALSE, 0, 0);
  if (!empty($nodes[0])) {
    return array('nodes' => $nodes);
  }
}
