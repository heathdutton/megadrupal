<?php
/**
 * @file mail_media.install
 *    Install file for mail_media.
 */

/**
 * Implement hook_install().
 */
function mail_media_install() {
  
  $t = get_t();

  drupal_static_reset('ctools_plugin_setup');
  cache_clear_all('plugins:feeds:plugin', 'cache');

  // We define the node type as an associative array.
  $node_example = array(
    'type' => 'mail_media_import',
    'name' => $t('mail_media_import'),
    'base' => 'node_content',
    'description' => $t('Content type used by mail_media module for importing media.'),
    'title_label' => $t('Title'),
    'custom' => TRUE,
  );
  $content_type = node_type_set_defaults($node_example);
  node_add_body_field($content_type, $t('Body'));
  node_type_save($content_type);
  $body_instance = field_info_instance('node', 'body', 'mail_media_import');
  field_update_instance($body_instance);
  
  // Create fields
  foreach (_mail_media_field_defs() as $field) {
    field_create_field($field['field_config']);
  }
  // Create instances of our fields on the node types
  foreach (_mail_media_field_defs() as $field) {
    field_create_instance($field['field_instance']);
  }
  
  // Create feeds source entry
  $source_config = array(
    'MailhandlerFetcher' => array(
        'mailbox' => _mail_media_get_default_mailbox(),
    ),
    'MailhandlerParser' => array(
        'auth_required' => TRUE,
    ),
  );
  $source = feeds_source('mailhandler_media_nodes');
  $source->addConfig($source_config);
  $source->save();

}

/**
 * Implements hook_uninstall()
 */
function mail_media_uninstall() {
  // delete feeds source
  $source = feeds_source('mailhandler_media_nodes');
  $source->delete();
  // delete content type
  _media_mail_delete_content_type();
}

/**
 * Return the default mailhandler mailbox if one is defined.
 * 
 * @return mailbox name or empty string if undefined.
 */
function _mail_media_get_default_mailbox() {
  $retval = '';
  // Load all available mailhandler mailboxes.
  $mailboxes = mailhandler_mailbox_load_all(FALSE);
  if (count($mailboxes)) {
    // if there are any mailboxes just grab the first one.
    $first_mailbox = array_shift($mailboxes);
    $retval = $first_mailbox->mail;
  }
  return $retval;
}

/**
 * Define the fields to be created (generated by features).
 * 
 * @return array containing the field definitions
 */
function _mail_media_field_defs() {
  $fields = array();

  // field_mail_media_attachment
  $fields['field_mail_media_attachment'] = array(
    'field_config' => array(
      'cardinality' => '1',
      'field_name' => 'field_mail_media_attachment',
      'type' => 'image',
    ),
    'field_instance' => array(
      'bundle' => 'mail_media_import',
      'display' => array(
        'default' => array(
          'label' => 'above',
          'type' => 'image',
        ),
      ),
      'entity_type' => 'node',
      'field_name' => 'field_mail_media_attachment',
      'label' => 'Image',
      'required' => FALSE,
      'widget' => array(
        'type' => 'image_image',
        'weight' => '6',
      ),
    ),
  );

  // field_mail_media_from
  $fields['field_mail_media_from'] = array(
    'field_config' => array(
      'cardinality' => '1',
      'field_name' => 'field_mail_media_from',
      'settings' => array(
        'max_length' => '255',
      ),
      'type' => 'text',
    ),
    'field_instance' => array(
      'bundle' => 'mail_media_import',
      'display' => array(
        'default' => array(
          'type' => 'text_default',
          'weight' => 3,
        ),
      ),
      'entity_type' => 'node',
      'field_name' => 'field_mail_media_from',
      'label' => 'From',
      'type' => 'text',
      'widget' => array(
        'type' => 'text_textfield',
      ),
    ),
  );

  // field_mail_media_link
  $fields['field_mail_media_link'] = array(
    'field_config' => array(
      'cardinality' => '1',
      'field_name' => 'field_mail_media_link',
      'settings' => array(
        'max_length' => '255',
      ),
      'type' => 'text',
    ),
    'field_instance' => array(
      'bundle' => 'mail_media_import',
      'display' => array(
        'default' => array(
          'type' => 'text_default',
          'weight' => 1,
        ),
      ),
      'entity_type' => 'node',
      'field_name' => 'field_mail_media_link',
      'label' => 'Link',
      'type' => 'text',
      'widget' => array(
        'type' => 'text_textfield',
      ),
    ),
  );

  // field_mail_media_to
  $fields['field_mail_media_to'] = array(
    'field_config' => array(
      'cardinality' => '1',
      'field_name' => 'field_mail_media_to',
      'settings' => array(
        'max_length' => '255',
      ),
      'type' => 'text',
    ),
    'field_instance' => array(
      'bundle' => 'mail_media_import',
      'display' => array(
        'default' => array(
          'type' => 'text_default',
          'weight' => 4,
        ),
      ),
      'entity_type' => 'node',
      'field_name' => 'field_mail_media_to',
      'label' => 'To',
      'type' => 'text',
      'widget' => array(
        'type' => 'text_textfield',
      ),
    ),
  );
  
  return $fields;
}

/**
 * Delete content and content type.
 */
function _media_mail_delete_content_type() {
  // delete content
  $sql = "SELECT nid FROM {node} n WHERE n.type = 'mail_media_import'";
  $result = db_query($sql);
  $nids = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }
  node_delete_multiple($nids);
  // delete fields and dataa
  foreach (array_keys(_mail_media_field_defs()) as $field) {
    field_delete_field($field);
  }
  // delete remaining field instances
  $instances = field_info_instances('node', 'mail_media_import');
  foreach ($instances as $instance_name => $instance) {
    field_delete_instance($instance);
  }
  // delete content type
  node_type_delete('mail_media_import');
  // purge all field information
  field_purge_batch(1000);

}

/**
 * Update feeds source to support new mailhandler 2.4 authorization settings
 */
function mail_media_update_7002() {
    // Create feeds source entry
  $source_config = array(
    'MailhandlerFetcher' => array(
        'mailbox' => _mail_media_get_default_mailbox(),
    ),
    'MailhandlerParser' => array(
        'auth_required' => FALSE,
    ),
  );
  $source = feeds_source('mailhandler_media_nodes');
  $source->addConfig($source_config);
  $source->save();
}