<?php

/**
 * @file seonet_by.module
 *
 * Link exchange module for Sape, TrustLink
 */

define('SEONET_DEFAULT_USERCODE', '000');
define('SEONET_DEFAULT_BLOCKS_COUNT', 3);

define('SEONET_SAPE_DISABLE', 0);
define('SEONET_SAPE_ENABLE', 1);
define('SEONET_SAPE_MULTI_DISABLE', 0);
define('SEONET_SAPE_MULTI_ENABLE', 1);
define('SEONET_SAPE_GIP_DISABLE', 0);
define('SEONET_SAPE_GIP_ENABLE', 1);
define('SEONET_SAPE_FORCE_SHOW_CODE_DISABLE', 0);
define('SEONET_SAPE_FORCE_SHOW_CODE_ENABLE', 1);
define('SEONET_SAPE_CACHE_CLEAR_DISABLE', 0);
define('SEONET_SAPE_CACHE_CLEAR_ENABLE', 1);
define('SEONET_SAPE_CACHE_ENGINE_NONE', 'none');

define('SEONET_TRUSTLINK_DISABLE', 0);
define('SEONET_TRUSTLINK_ENABLE', 1);
define('SEONET_TRUSTLINK_MULTI_DISABLE', 0);
define('SEONET_TRUSTLINK_MULTI_ENABLE', 1);
define('SEONET_TRUSTLINK_CACHE_CLEAR_DISABLE', 0);
define('SEONET_TRUSTLINK_CACHE_CLEAR_ENABLE', 1);
define('SEONET_TRUSTLINK_VERBOSE_DISABLE', 0);
define('SEONET_TRUSTLINK_VERBOSE_ENABLE', 1);
define('SEONET_TRUSTLINK_ORIENTATION_VERTICAL', 'vertical');

define('SEONET_LINKFEED_DISABLE', 0);
define('SEONET_LINKFEED_ENABLE', 1);
define('SEONET_LINKFEED_MULTI_DISABLE', 0);
define('SEONET_LINKFEED_MULTI_ENABLE', 1);
define('SEONET_LINKFEED_CACHE_CLEAR_DISABLE', 0);
define('SEONET_LINKFEED_CACHE_CLEAR_ENABLE', 1);
define('SEONET_LINKFEED_VERBOSE_DISABLE', 0);
define('SEONET_LINKFEED_VERBOSE_ENABLE', 1);

/**
 * Implements hook_help().
 */
function seonet_help($path, $arg) {
  switch ($path) {
    case 'admin/help#seonet':
      return t('Link exchange - Sape, TrustLink, LinkFeed (support: <a href="@url" target="_blank">www.seonet.by</a>)', array('@url' => 'http://www.seonet.by/'));
      break;

    case 'admin/config/services/seonet':

    case 'admin/config/services/seonet/sape':

    case 'admin/config/services/seonet/trustlink':

    case 'admin/config/services/seonet/linkfeed':
      return t('Link exchange - Sape, TrustLink, LinkFeed (support: <a href="@url" target="_blank">www.seonet.by</a>)', array('@url' => 'http://www.seonet.by/'));
      break;
  }
}

/**
 * Implements hook_menu().
 */
function seonet_menu() {

  $items = array();

  $items['admin/config/services/seonet'] = array(
    'title' => 'Seonet configuration',
    'description' => 'Settings for link exchange engines.',
    'page arguments' => array('seonet_admin_main'),
    'page callback' => 'drupal_get_form',
    'access arguments' => array('administer site configuration'),
    'file' => 'seonet.admin.inc',
  );

  $items['admin/config/services/seonet/general'] = array(
    'title' => 'General',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['admin/config/services/seonet/sape'] = array(
    'title' => 'Sape',
    'description' => 'Sape settings.',
    'page arguments' => array('seonet_admin_sape'),
    'page callback' => 'drupal_get_form',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'seonet.admin.inc',
    'weight' => 10,
  );

  $items['admin/config/services/seonet/trustlink'] = array(
    'title' => 'TrustLink',
    'description' => 'TrustLink settings.',
    'page arguments' => array('seonet_admin_trustlink'),
    'page callback' => 'drupal_get_form',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'seonet.admin.inc',
    'weight' => 20,
  );

  /*$items['admin/config/services/seonet/linkfeed'] = array(
    'title' => 'LinkFeed',
    'description' => 'LinkFeed settings.',
    'page arguments' => array('seonet_admin_linkfeed'),
    'page callback' => 'drupal_get_form',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'seonet.admin.inc',
    'weight' => 30,
  );*/
  return $items;
}

/**
 * Implements hook_block_info().
 */
function seonet_block_info() {

  // Block for Sape service.
  $count = variable_get('seonet_sape_blocks', SEONET_DEFAULT_BLOCKS_COUNT);
  for ($i = 1; $i < $count + 1; $i++) {
    $blocks[] = array(
      'info' => 'Sape ' . $i,
      'cache' => DRUPAL_NO_CACHE,
    );
  }

  // Block for Trustlink service.
  $blocks['trustlink'] = array(
    'info' => 'TrustLink',
    'cache' => DRUPAL_NO_CACHE,
  );

  //block for LinkFeed service.
  /*$blocks['linkfeed'] = array(
    'info' => 'LinkFeed',
    'cache' => DRUPAL_NO_CACHE,
  );*/

  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function seonet_block_configure($delta = '') {

  // Number of links in Sape block.
  $form = array();
  if (ctype_digit($delta)) {
    $opts = drupal_map_assoc(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10));
    $form['sape_links'] = array(
      '#type' => 'select',
      '#title' => t('Number of links in the block'),
      '#options' => $opts,
      '#default_value' => variable_get('seonet_sape_n' . $delta,  3),
    );
    return $form;
  }
}

/**
 * Implements hook_block_save().
 */
function seonet_block_save($delta = '', $edit = array()) {

  // Saving settings for Sape block.
  if (ctype_digit($delta)) {
    variable_set('seonet_sape_n' . $delta, $edit['sape_links']);
  }
}

/**
 * Implements hook_block_view().
 */
function seonet_block_view($delta = '') {

  // Array with servise's block.
  $block = array();

  // Block output for Trustlink.
  if ($delta == 'trustlink' && variable_get('seonet_trustlink', SEONET_TRUSTLINK_DISABLE)) {
    $obj = _seonet_trustlink();

    // Use different templates for selected orientation.
    if (variable_get('seonet_trustlink_orientation', SEONET_TRUSTLINK_ORIENTATION_VERTICAL) == SEONET_TRUSTLINK_ORIENTATION_VERTICAL) {
      $obj->tl_template = 'template-v';
    }
    else {
      $obj->tl_template = 'template-h';
    }

    $content = $obj->build_links();
    if ($check_empty = strip_tags($content)) {
      $block['content'] = $content;
    }
  }

  // Block output for LinkFeed.
  elseif ($delta == 'linkfeed') {
    $count = variable_get('seonet_linkfeed_block', SEONET_DEFAULT_BLOCKS_COUNT);
    if (variable_get('seonet_linkfeed', SEONET_LINKFEED_DISABLE)) {
      $obj = _seonet_linkfeed($count);
      $block['content'] = $obj->return_links();
    }
  }

  // Block output for Sape.
  elseif (ctype_digit($delta)) {
    $count = variable_get('seonet_sape_blocks', SEONET_DEFAULT_BLOCKS_COUNT);
    if (variable_get('seonet_sape', SEONET_SAPE_DISABLE) && $delta < $count) {
      $obj = _seonet_sape();
      $block['content'] = $obj->return_links(variable_get('seonet_sape_n' . $delta, 3));
    }
  }

  return $block;
}

/**
 * Implements hook_init().
 */
function seonet_init() {

  // If Trustlink service enabled, include styles for TL block.
  if (variable_get('seonet_trustlink', SEONET_TRUSTLINK_DISABLE)) {
    drupal_add_css(drupal_get_path('module', 'seonet') . '/seonet-trustlink.css');
  }
}

/**
 * Implements hook_node_view().
 */
function seonet_node_view($node, $view_mode, $langcode) {
  if (variable_get('seonet_sape', SEONET_SAPE_DISABLE) && variable_get('seonet_sape_gip', SEONET_SAPE_GIP_DISABLE)) {
    if (!empty($node->content['body'][0]['#markup'])) {
      $context = _seonet_sape(TRUE);
      $node->content['body'][0]['#markup'] = $context->replace_in_text_segment($node->content['body'][0]['#markup']);
    }
  }
}

/**
 * Implements hook_boot().
 *
 * Clears cached pages for updated links.
 */
function seonet_boot() {
  // sape.ru
  /*if (variable_get('seonet_sape', 0) && variable_get('seonet_sape_cache_clear', 0)) {
    // Clear cache to update new links.
    $hash = variable_get('seonet_sape_hash', array());
    if (isset($hash['time'])) {
      if ($hash['time'] < REQUEST_TIME) {
        $obj = _seonet_sape();
        if ($new_hash = md5(serialize($obj->_links))) {
          if ($hash['hash'] != $new_hash) {
            $hash = array(
              'hash' => $new_hash,
              'time' => REQUEST_TIME + 900,
            );
            variable_set('seonet_sape_hash', $hash);
            cache_clear_all(NULL, 'cache_page');
          }
        }
      }
    }
    else {
      $obj = _seonet_sape();
      if ($obj->_links) {
        $hash = array(
          'hash' => md5(serialize($obj->_links)),
          'time' => REQUEST_TIME + 900,
        );
        variable_set('seonet_sape_hash', $hash);
        cache_clear_all(NULL, 'cache_page');
      }
    }
  }
  // trustlink.ru
  if (variable_get('seonet_trustlink', 0) && variable_get('seonet_trustlink_cache_clear', 0)) {
    // Clear cache to update new links.
    $hash = variable_get('seonet_trustlink_hash', array());
    if (isset($hash['time'])) {
      if ($hash['time'] < REQUEST_TIME) {
        $obj = _seonet_trustlink();
        if ($new_hash = md5(serialize($obj->tl_links))) {
          if ($hash['hash'] != $new_hash) {
            $hash = array(
              'hash' => $new_hash,
              'time' => REQUEST_TIME + 900,
            );
            variable_set('seonet_trustlink_hash', $hash);
            cache_clear_all(NULL, 'cache_page');
          }
        }
      }
    }
    else {
      $obj = _seonet_trustlink();
      if ($obj->tl_links) {
        $hash = array(
          'hash' => md5(serialize($obj->tl_links)),
          'time' => REQUEST_TIME + 900,
        );
        variable_set('seonet_trustlink_hash', $hash);
        cache_clear_all(NULL, 'cache_page');
      }
    }
  }
  // linkfeed.ru
  if (variable_get('seonet_linkfeed', 0) && variable_get('seonet_linkfeed_cache_clear', 0)) {
    // Clear cache if new links.
    $hash = variable_get('seonet_linkfeed_hash', array());
    if (isset($hash['time'])) {
      if ($hash['time'] < REQUEST_TIME) {
        $obj = _seonet_linkfeed();
        if ($new_hash = md5(serialize($obj->lc_links))) {
          if ($hash['hash'] != $new_hash) {
            $hash = array(
              'hash' => $new_hash,
              'time' => REQUEST_TIME + 900,
            );
            variable_set('seonet_linkfeed_hash', $hash);
            cache_clear_all(NULL, 'cache_page');
          }
        }
      }
    }
    else {
      $obj = _seonet_linkfeed();
      if ($obj->lc_links) {
        $hash = array(
          'hash' => md5(serialize($obj->lc_links)),
          'time' => REQUEST_TIME + 900,
        );
        variable_set('seonet_linkfeed_hash', $hash);
        cache_clear_all(NULL, 'cache_page');
      }
    }
  }*/
}

/**
 * Implements template_preprocess_block().
 */
function seonet_preprocess_block(&$vars) {
  if ($vars['block']->module == 'seonet') {

    // Overrides module's main css class.
    if ($module_css = variable_get('seonet_css', '')) {
      $vars['block']->module = $module_css;
    }

    // Overrides module's delta css class.
    if ($vars['block']->delta == 'trustlink' && $css = variable_get('seonet_trustlink_css', '')) {
      $vars['block']->delta = $css;
    }
    elseif ($vars['block']->delta == 'linkfeed' && $css = variable_get('seonet_linkfeed_css', '')) {
      $vars['block']->delta = $css;
    }
    elseif (ctype_digit($vars['block']->delta) && $css = variable_get('seonet_sape_css', '')) {
      $vars['block']->delta = $css;
    }

    $vars['block_html_id'] = drupal_html_id('block-' . $vars['block']->module . '-' . $vars['block']->delta);
  }
}

/**
 * Helper function: initializes SAPE objects.
 *
 * Creates and returns SAPE_client or SAPE_context object.
 *
 * @param bool $is_context
 *
 * @return object
 */
function _seonet_sape($is_context = FALSE) {
  static $sape = NULL;
  static $context = NULL;
  
  if (variable_get('seonet_sape_id', SEONET_DEFAULT_USERCODE) !== SEONET_DEFAULT_USERCODE) {
 
    if ($is_context && isset($context)) {
      return $context;
    }
 
    if ($is_context == FALSE && isset($sape)) {
      return $sape;
    }

    if (!defined('_SAPE_USER')) {
      define('_SAPE_USER', variable_get('seonet_sape_id', SEONET_DEFAULT_USERCODE));
    }

    if (!class_exists('SAPE_client')) {
      require_once drupal_get_path('module', 'seonet') . '/engines/sape.php';
    }

    $o['charset'] = 'UTF-8';
    if (variable_get('seonet_sape_fetch', '')) {
      $o['fetch_remote_type'] = variable_get('seonet_sape_fetch', '');
    }

    $o['multi_site'] = variable_get('seonet_sape_multi', SEONET_SAPE_MULTI_ENABLE);
    if (variable_get('seonet_sape_host', '')) {
      $o['host'] = variable_get('seonet_sape_host', $_SERVER['HTTP_HOST']);
    }

    if (variable_get('seonet_sape_force_show_code', SEONET_SAPE_FORCE_SHOW_CODE_ENABLE)) {
      $o['force_show_code'] = TRUE;
    }

    require_once DRUPAL_ROOT . '/' . 'includes/file.inc';

    $path = variable_get('file_public_path', conf_path() . '/files') . '/sape';
    file_prepare_directory($path, FILE_CREATE_DIRECTORY);

    $o['folder'] = realpath($path);
    $o['cache'] = variable_get('seonet_sape_cache', SEONET_SAPE_CACHE_ENGINE_NONE);

    if ($o['cache'] == 'memcache') {
      $mc = variable_get('seonet_sape_mc', '');
      if (strpos($mc, 'unix://') === 0) {
        $o['memcache'][] = $mc;
      }
      else {
        $mc = explode(':', $mc);
        if (is_array($mc) && count($mc) == 2) {
          $o['memcache'][] = array('host' => $mc[0], 'port' => $mc[1]);
        }
      }
    }

    if ($is_context) {
      $context = new SAPE_context($o);
      return $context;
    }
    else {
      $sape = new SAPE_client($o);
      return $sape;
    }
  }

  return FALSE;
}

/**
 * Helper function: initializes TrustlinkClient object.
 *
 * Creates and returns TrustlinkClient object.
 *
 * @return object
 */
function _seonet_trustlink() {
  static $client = NULL;
  $trustlink_id = variable_get('seonet_trustlink_id', SEONET_DEFAULT_USERCODE);
  if ($trustlink_id !== SEONET_DEFAULT_USERCODE) {
    if (!isset($client)) {

      // Define trustlink user id.
      if (!defined('TRUSTLINK_USER')) {
        define('TRUSTLINK_USER', $trustlink_id);
      }

      // @TODO: check why drupal requieres this includes.
      require_once DRUPAL_ROOT . '/' . 'includes/file.inc';
      require_once DRUPAL_ROOT . '/' . 'includes/common.inc';

      // Includes trustlink code.
      if (!class_exists('TrustlinkClient')) {
        require_once drupal_get_path('module', 'seonet') . '/engines/trustlink.php';
      }

      // An array with trustlink settings.
      $settings = array();

      // UTF-8 is a Default for both trustlink and Drupal.
      // But links are passed as WIN-1251.
      $settings['charset'] = 'UTF-8';

      // Enalbes multi site option.
      $settings['multi_site'] = variable_get('seonet_trustlink_multi', SEONET_TRUSTLINK_MULTI_ENABLE);
      $settings['fetch_remote_type'] = variable_get('seonet_trustlink_fetch', '');

      // Enables debug output.
      $settings['verbose'] = variable_get('seonet_trustlink_verbose', SEONET_TRUSTLINK_VERBOSE_DISABLE);

      // Host name.
      $settings['host'] = variable_get('seonet_trustlink_host', '');

      // Always show code.
      $settings['force_show_code'] = TRUE;

      // Creating a folder trustlink, if it doesn't exist.
      $path_to_folder = variable_get('file_public_path', conf_path() . '/files') . '/trustlink';
      file_prepare_directory($path_to_folder, FILE_CREATE_DIRECTORY);
      chmod($path_to_folder, 0777);
      $settings['folder'] = realpath($path_to_folder);

      // Creating new client with our settings.
      $client = new TrustlinkClient($settings);
    }
  }
  return $client;
}

/**
 * Helper function: initializes LinkfeedClient object.
 *
 * Creates and returns LinkfeedClient object.
 *
 * @return object
 */
function _seonet_linkfeed() {
  static $client = NULL;
  if (variable_get('seonet_linkfeed_id', SEONET_DEFAULT_USERCODE) !== SEONET_DEFAULT_USERCODE) {
    if (!isset($client)) {
      if (!defined('LINKFEED_USER')) {
        define('LINKFEED_USER', variable_get('seonet_linkfeed_id', SEONET_DEFAULT_USERCODE));
      }

      if (!class_exists('LinkfeedClient')) {
        require_once drupal_get_path('module', 'seonet') . '/engines/linkfeed.php';
      }

      $o['charset'] = 'UTF-8';
      if (variable_get('seonet_linkfeed_multi', SEONET_LINKFEED_MULTI_ENABLE)) {
        $o['multi_site'] = TRUE;
      }

      if (variable_get('seonet_linkfeed_fetch', '')) {
        $o['fetch_remote_type'] = variable_get('seonet_linkfeed_fetch', '');
      }

      $o['verbose'] = variable_get('seonet_linkfeed_verbose', SEONET_LINKFEED_VERBOSE_DISABLE);
      if (variable_get('seonet_linkfeed_host', '')) {
        $o['host'] = variable_get('seonet_linkfeed_host', $_SERVER['HTTP_HOST']);
      }

      require_once DRUPAL_ROOT . '/' . 'includes/file.inc';
      $path = variable_get('file_public_path', conf_path() . '/files') . '/linkfeed';
      file_prepare_directory($path, FILE_CREATE_DIRECTORY);
      $o['folder'] = realpath($path);
      $client = new LinkfeedClient($o);
    }
  }

  return $client;
}
