<?php

/**
 * @file
 * Restricts domain publishing options to the user assigned domains only.
 */

/**
 * Implements hook_help().
 */
function domain_restrict_publishing_help($path, $arg) {
  if ($path == 'admin/help#domain_restrict_publishing') {
    return '<p>' . t('Domain Restrict Publishing allows site administrators to restrict the domains a user can publish to, based on their assigned domains. The nodes can still be sent to affiliate domains.') . '</p>';
  }
}

/**
 * Implements hook_permission().
 */
function domain_restrict_publishing_permission() {
  return array(
    'set unrestricted domain access' => array(
      'title' => t('Set unrestricted domain access status for all content'),
      'description' => t('domain_restrict_publishing restricts the publishing options to the domains the user belongs to. This permission skips the module alterations and reverts to the default Domain Access behavior.'),
    ),
  );
}

/**
 * Implements hook_form_alter().
 *
 * Hide non-assigned domains from the 'Publish to' options.
 * Works in tandem with the 'set domain access' permission which allows sending
 * to affiliates.
 */
function domain_restrict_publishing_form_alter(&$form, &$form_state, $form_id) {
  // There are forms that we never want to alter, and they are passed here.
  $forms = module_invoke_all('domain_ignore');
  if (in_array($form_id, $forms)) {
    return;
  }

  if (empty($form['#node_edit_form'])) {
    return;
  }

  if (!user_access('set domain access') || user_access('set unrestricted domain access')) {
    return;
  }

  global $user;
  $_domain = domain_get_domain();

  $domains_user = domain_get_user_domains($user);
  $domains_excluded = $domains_published = $domains_raw = array();

  foreach ($form['domain']['domains']['#options'] as $key => $value) {
    if (!isset($domains_user[$key])) {
      $domains_excluded[] = $key;
      if (isset($form['domain']['domains']['#default_value'][$key])) {
        $domains_raw[] = $key;
        $domains_published[] = $value;
      }

      unset($form['domain']['domains']['#options'][$key]);
    }
  }

  if (!empty($domains_excluded)) {
    $affiliates = array();
    foreach (domain_domains() as $affiliate) {
      $affiliates[] = check_plain($affiliate['sitename']);
    }

    $form['domain']['domains']['#description'] .= ' ' . t('You can only publish to the domain(s) above');

    $description = t('This content will be shown on') . ': ' . theme('item_list', array('items' => $affiliates));
    $form['domain']['domain_site']['#description'] .= ' ' . $description;

  }

  if (!empty($domains_raw)) {
    $form['domain']['domain_notice_publish'] = array(
      '#type' => 'item',
      '#title' => t('Also published to'),
      '#markup' => theme('item_list', array('items' => $domains_published)),
    );

    if (!isset($form['domains_raw'])) {
      $form['domains_raw'] = array(
        '#type' => 'value',
        '#value' => array(),
      );
    }

    $form['domains_raw']['#value'] += $domains_raw;
  }
}

/**
 * Implements hook_workbench_moderation_access_alter().
 *
 * Deny Workbench Moderation for nodes not published on the domains the
 * current user is assigned to.
 */
function domain_restrict_publishing_workbench_moderation_access_alter(&$access, $op, $node) {
  global $user;
  $account = $user;

  if (empty($account->domain_user)
      || empty($node->domains) || user_access('administer domains', $account)) {
    return TRUE;
  }

  // If the node falls outside this user's assigned domains, deny access.
  $allow = FALSE;
  foreach ($node->domains as $domain_id) {
    if (isset($account->domain_user[$domain_id])) {
      $allow = TRUE;
      break;
    }
  }

  $access &= $allow;
}
