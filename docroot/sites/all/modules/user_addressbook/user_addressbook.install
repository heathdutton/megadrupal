<?php

/**
 * Implements hook_schema().
 */
function user_addressbook_schema() {
  $schema = array();

  $schema['user_address'] = array(
    'description' => 'The base table for user addressbook.',
    'fields' => array(
      'address_id' => array(
        'description' => 'The primary identifier for an addressbook entry.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => 60,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Unique addressbook name for user.',
      ),
      'uid' => array(
        'description' => 'The {users}.uid that this addressbook belongs to.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the user addressbook was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the user addressbook was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'data' => array(
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of additional data.',
      ),
    ),
    'primary key' => array('address_id'),
    'indexes' => array(
      'uid' => array('uid'),
    ),
    'foreign keys' => array(
      'owner' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
    ),
  );

  $schema['user_address_defaults'] = array(
    'description' => 'Stores user address defaults.',
    'fields' => array(
      'uad_id' => array(
        'description' => 'Serial numeric ID of the default user address.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'address_id' => array(
        'description' => 'Serial numeric ID of the user address in the local database.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'The {users}.uid that owns this address-.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'The address type (default is not specified).',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'primary key' => array('uad_id'),
    'foreign keys' => array(
      'address_id' => array(
        'table' => 'user_address',
        'columns'=> array('address_id' => 'address_id'),
      ),
      'uid' => array(
        'table' => 'users',
        'columns'=> array('uid' => 'uid'),
      ),
    ),
    'indexes' => array(
      'address_id' => array('address_id'),
      'uid' => array('uid'),
    ),
  );

  return $schema;
}

/**
 * Implements hook_uninstall().
 */
function user_addressbook_uninstall() {
  // Todo
  // Loop over any remaining field instances attached to the user_address
  // entity type and bundle and delete them individually.
  $params = array(
    'entity_type' => 'user_address',
    'bundle' => 'user_address',
  );
  // Delete this bundle's field bundle settings.
  variable_del('field_bundle_settings_user_address__user_address');
  foreach (field_read_instances($params, array('include_inactive' => TRUE)) as $instance) {
    $field_name = $instance['field_name'];
    field_delete_instance($instance);
    // Now check to see if there are any other instances of the field left.
    $field = field_info_field($field_name);

    if (count($field['bundles']) == 0) {
      field_delete_field($field_name);
    }
  }
  // Purge all field information
  field_purge_batch(1000);
}
