<?php

/**
 * Implements hook_entity_info_alter().
 */
function user_addressbook_commerce_entity_info_alter(&$info) {
  $info['user_address']['view modes']['user_addressbook_checkout'] = array(
    'label' => t('User addressbook for commerce'),
    'custom settings' => FALSE,
  );
}

/**
 * Implements hook_menu().
 */
function user_addressbook_commerce_menu() {
  $items = array();
  // @to do : User addressbook commerce admin page,
  // some settings/options for the commerce integration.

  return $items;
}

/**
 * Implements hook_views_api().
 */
function user_addressbook_commerce_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'user_addressbook_commerce') . '/includes/views',
  );
}

/**
 * Implements hook_user_addressbook_address_type_info().
 *
 * Use the (Drupal commerce) customer profile types as address types.
 */
function user_addressbook_commerce_user_addressbook_address_type_info() {
  $user_address_types = array();
  if (user_access('edit own user_address entities')) {
    foreach (commerce_customer_profile_types() as $type => $profile_type) {
      if (!empty($profile_type['addressfield']) || isset($checkout_panes['customer_profile_' . $type])) {
        $user_address_types[$type] = array(
          'type' => $type,
          'title' => $profile_type['name'],
        );
      }
    }
  }

  return $user_address_types;
}

/**
 * Implements hook_entity_view().
 *
 * Adds the change address link to the customer profile view
 * on checkout review.
 */
function user_addressbook_commerce_entity_view($entity, $type, $view_mode, $langcode) {
  if ($type == 'commerce_customer_profile' && $view_mode == 'customer') {
    // For checkout review page only.
    $menu_item = menu_get_item();
    if ($menu_item['map'][0] == 'checkout' && $menu_item['map'][2]['page_id'] == 'review') {
      $order = $menu_item['map'][1];
      $links = array();
      $links['change_address'] = array(
        '#theme' => 'link',
        '#text' => t('Change %profile_type address', array('%profile_type' => $entity->type)),
        '#path' => 'checkout/' . $order->order_id . '/addresses',
        '#options' => array(
          'attributes' => array(),
          'html' => TRUE,
         ),
      );
      if (user_access('edit own user_address entities')) {
        $links['change_address']['#path'] .= '/' . $entity->type;
      }
      $entity->content['user_addressbook_options'] = array(
        '#type' => 'container',
        '#attributes' => array(
          'id' => $entity->type . '-change-address',
          'class' => array('user-addressbook' , 'change-address'),
        ),
      );
      $entity->content['user_addressbook_options'] += $links;
    }
  }
}

/**
 * Implements hook_commerce_checkout_page_info().
 */
function user_addressbook_commerce_commerce_checkout_page_info() {
  $checkout_pages = array();

  $checkout_pages['addresses'] = array(
    'title' => t('Addresses'),
    'weight' => 0,
  );

  return $checkout_pages;
}

/**
 * Implements hook_commerce_checkout_page_info_alter().
 */
function user_addressbook_commerce_commerce_checkout_page_info_alter(&$checkout_pages) {
  // Disable the Addresses checkout page buttons.
  if (user_access('edit own user_address entities')) {
    $checkout_pages['addresses']['buttons'] = FALSE;
  }
}

/**
 * Implements hook_commerce_checkout_pane_info().
 */
function user_addressbook_commerce_commerce_checkout_pane_info() {
  $checkout_panes = array();

  $checkout_panes['user_addressbook'] = array(
    'title' => t('Addresses'),
    'base' => 'user_addressbook_commerce_checkout_pane',
    'file' => 'includes/user_addressbook_commerce.checkout_pane.inc',
    'page' => 'addresses',
    'weight' => 2,
  );

  return $checkout_panes;
}

/**
 * Implements hook_commerce_checkout_pane_info_alter().
 */
function user_addressbook_commerce_commerce_checkout_pane_info_alter(&$checkout_panes) {
  // Disable the customer profiles panes if the addressbook is available.
  foreach (commerce_customer_profile_types() as $type => $profile_type) {
    if (!empty($profile_type['addressfield']) && isset($checkout_panes['customer_profile_' . $type])) {
      if (user_access('edit own user_address entities')) {
        $checkout_panes['customer_profile_' . $type]['enabled'] = FALSE;
        $checkout_panes['customer_profile_' . $type]['page'] = 'disabled';
      }
      else {
        $checkout_panes['customer_profile_' . $type]['enabled'] = TRUE;
        $checkout_panes['customer_profile_' . $type]['page'] = 'addresses';
      }
    }
  }
  // Disable the user addressbook pane.
  if (!user_access('edit own user_address entities')) {
    $checkout_panes['user_addressbook']['enabled'] = FALSE;
    $checkout_panes['user_addressbook']['page'] = 'disabled';
  }
}

/**
 * Implements hook_commerce_checkout_router().
 */
function user_addressbook_commerce_commerce_checkout_router($order, $checkout_page) {
  // Skip Addresses checkout page for default address set.
  // It will happen first time only, when the order has no customer profile defined.
  // Define conditions.
  $is_addresses_page = ($checkout_page['page_id'] == 'addresses');
  $has_permission = user_access('edit own user_address entities');
  $skip_addresses_page = variable_get('commerce_checkout_user_addressbook_skip_addresses_page', FALSE);
  $user_addresses = user_addressbook_get_default_addresses($order->uid);
  if ($is_addresses_page && $has_permission && $skip_addresses_page && $user_addresses) {
    // Get the customer profile types.
    $panes = user_addressbook_commerce_customer_profile_panes();
    $wrapper = entity_metadata_wrapper('commerce_order', $order);
    foreach ($panes as $type => $pane) {
      $field_name = variable_get('commerce_customer_profile_' . $type . '_field', '');
      // Exit if there is a customer profile defined.
      if (!empty($order->{$field_name})) {
        return;
      }
      // Define new customer profile and use the default address for it.
      else {
        $customer_profile = commerce_customer_profile_new($type, $order->uid);

        // Save the new customer profile.
        commerce_customer_profile_save($customer_profile);

        // Store the customer profile ID for the related field as specified on the settings form.
        $wrapper->{$field_name} = $customer_profile;

        // Use this select user address event to do extra operations,
        // as using the default user address data to complete the customer profile.
        rules_invoke_all('user_addressbook_commerce_user_address_select', $user_addresses[$type], $customer_profile, $order);
      }
    }
    // Update the order status to reflect the next checkout page.
    commerce_order_status_update($order, 'checkout_' . $checkout_page['next_page'], TRUE);
    // Save the order.
    commerce_order_save($order);
    // Redirect to the next checkout page.
    return drupal_goto('checkout/' . $order->order_id . '/' . $checkout_page['next_page']);
  }
}

/**
 * Helper function.
 *
 * Get the customer profiles panes, keeping the order from checkout settings.
 */
function user_addressbook_commerce_customer_profile_panes() {
  foreach (commerce_customer_profile_types() as $type => $profile) {
    // Only customer profiles with addressfield and checkout pane defined.
    $customer_profile_panes = commerce_checkout_panes(array('pane_id' => 'customer_profile_' . $type));
    $customer_profile_pane = reset($customer_profile_panes);
    if (!empty($profile['addressfield']) && $customer_profile_pane) {
      $panes[$type] = $customer_profile_pane;
      $panes[$type]['type'] = $type;
    }
  }
  uasort($panes, 'drupal_sort_weight');
  return $panes;
}

/**
 * Implements hook_i18n_string_list().
 */
function user_addressbook_commerce_i18n_string_list($group) {
  if ($group == 'commerce') {
    // Allow the checkout completion message to be translated.
    $help_text_default = array(
      'value' => '',
      'format' => 'filtered_html',
    );
    foreach ($customer_profile_panes as $type => $customer_profile_pane) {
      // Custom User addressbook pane title.
      $user_addressbook_pane_title = variable_get('commerce_checkout_' . $type . '_user_addressbook_pane_title', $customer_profile_pane['title']);
      $strings['commerce']['checkout']['addresses']['commerce_checkout_' . $type . '_user_addressbook_pane_title'] = $user_addressbook_pane_title;
      // Help text User addressbook pane.
      $user_addressbook_help_text = variable_get('commerce_checkout_' . $type . '_user_addressbook_help_text', $help_text_default);
      $strings['commerce']['checkout']['addresses']['commerce_checkout_' . $type . '_user_addressbook_help_text'] = $user_addressbook_help_text['value'];
      // Help text for add new customer profile form.
      $add_new_customer_profile_help_text = variable_get('commerce_checkout_' . $type . '_add_new_customer_profile_help_text', $help_text_default);
      $strings['commerce']['checkout']['addresses']['commerce_checkout_' . $type . '_add_new_customer_profile_help_text'] = $add_new_customer_profile_help_text['value'];
    }
  }
  return $strings;
}
