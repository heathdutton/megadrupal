<?php

/**
 * Implements hook_entity_info().
 */
function user_addressbook_entity_info() {
  $return = array(
    'user_address' => array(
      'label' => t('User address'),
      'base table' => 'user_address',
      'uri callback' => 'user_addressbook_uri',
      'entity class' => 'Entity',
      'controller class' => 'UserAddressEntityController',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'address_id',
        'label' => 'name',
      ),
      'bundles' => array(
        'user_address' => array(
          'label' => t('User address'),
          'admin' => array(
            'path' => 'admin/config/people/addressbook/manage',
            'access arguments' => array('administer user_address entities'),
          ),
        ),
      ),
      'load hook' => 'user_address_load',
      'view modes' => array(
        'user_addressbook' => array(
          'label' => t('User addressbook'),
          'custom settings' => FALSE,
        ),
      ),
      'access callback' => 'user_address_access',
      'view callback' => 'entity_metadata_view_single',
      'metadata controller class' => '',
    ),
  );
  return $return;
}

/**
 * Implements hook_field_extra_fields().
 */
function user_addressbook_field_extra_fields() {
  $return['user_address']['user_address'] = array(
    'form' => array(
      'name' => array(
        'label' => t('Address name'),
        'description' => t('Name for this addressbook.'),
        'weight' => -20,
      ),
    ),
    'display' => array(
      'name' => array(
        'label' => t('Address name'),
        'description' => t('Name for this addressbook.'),
        'weight' => -20,
      ),
    ),
  );

  return $return;
}

/**
 * Implements hook_menu().
 */
function user_addressbook_menu() {
  $items = array();

  $items['user/%user/addresses'] = array(
    'title' => 'Address Book',
    'page callback' => 'user_addressbook_page',
    'page arguments' => array(1),
    'access callback' => 'user_addresses_access',
    'access arguments' => array('view', 1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,
  );

  $items['user/%user/addresses/add'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_addressbook_address_form', 1),
    'access callback' => 'user_addresses_access',
    'access arguments' => array('edit', 1),
    'title' => 'Add an address',
    'type' => MENU_LOCAL_ACTION,
    'file' => 'includes/user_addressbook.admin.inc',
  );

  $items['user/%user/addresses/%user_address'] = array(
    'title' => 'Address Book',
    'title callback' => 'user_address_page_title',
    'title arguments' => array(3),
    'page callback' => 'user_address_view',
    'page arguments' => array(3),
    'access callback' => 'entity_access',
    'access arguments' => array('view', 'user_address', 3, 1),
    'file' => 'includes/user_addressbook.admin.inc',
    'weight' => 10,
  );

  $items['user/%user/addresses/%user_address/view'] = array(
    'title' => 'View',
    'page callback' => 'user_address_view',
    'page arguments' => array(3),
    'access callback' => 'entity_access',
    'access arguments' => array('view', 'user_address', 3, 1),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'includes/user_addressbook.admin.inc',
    'weight' => 10,
  );

  $items['user/%user/addresses/%user_address/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_addressbook_address_form', 3, 1),
    'access callback' => 'entity_access',
    'access arguments' => array('edit', 'user_address', 3, 1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/user_addressbook.admin.inc',
    'weight' => 20,
  );

  $items['user/%user/addresses/%user_address/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_addressbook_address_options_delete_form', 3),
    'access callback' => 'entity_access',
    'access arguments' => array('edit', 'user_address', 3, 1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/user_addressbook.admin.inc',
    'weight' => 30,
  );

  $items['user/%user/addresses/%user_address/default'] = array(
    'title' => 'Make default',
    'page callback' => 'user_addressbook_address_options_default',
    'page arguments' => array(1, 3),
    'access callback' => 'entity_access',
    'access arguments' => array('edit', 'user_address', 3, 1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/user_addressbook.admin.inc',
    'weight' => 40,
  );

  // Administration pages.
  $items['admin/config/people/addressbook'] = array(
    'title' => t('User addresbook'),
    'page callback' => 'user_addressbook_admin_page_redirect',
    'access callback' => 'user_access',
    'access arguments' => array('administer user_address entities'),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function user_addressbook_permission() {
  $permissions = array(
    'administer user_address entities' => array(
      'title' => t('Administer user addreses entities'),
    ),
    'edit own user_address entities' => array(
      'title' => t('Edit own user addresses'),
    ),
    'edit any user_address entities' => array(
      'title' => t('Edit any user addresses'),
    ),
    'view own user_address entities' => array(
      'title' => t('View own user addresses'),
    ),
    'view any user_address entities' => array(
      'title' => t('View any user addresses'),
    ),
  );

  return $permissions;
}

/**
* Access callback for user_address entities.
*/
function user_addresses_access($op = 'view', $account = NULL) {
  global $user;

  if (!isset($account)) {
    $account = $user;
  }
  return user_access('administer user_address entities')
      || user_access('view any user_address entities')
      || (user_access('view own user_address entities')  && ($user->uid == $account->uid));
}

/**
* Access callback for user_address entities.
*/
function user_address_access($op, $user_address = NULL, $account = NULL) {
  global $user;
  if (!isset($account)) {
    $account = $user;
  }
  switch ($op) {
    case 'create':
      return user_access('administer user_address entities')
          || user_access('edit any user_address entities')
          || (user_access('edit own user_address entities') && $account->uid == $user->uid);
    case 'view':
      return user_access('administer user_address entities')
          || user_access('view any user_address entities')
          || (user_access('view own user_address entities')  && !empty($user_address) && ($user_address->uid == $user->uid));
    case 'edit':
      return user_access('administer user_address entities')
          || user_access('edit any user_address entities')
          || (user_access('edit own user_address entities') && !empty($user_address) && ($user_address->uid == $user->uid));
  }
}

/**
 * Implements hook_views_api().
 */
function user_addressbook_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'user_addressbook') . '/includes/views',
  );
}

/**
 * Fetch a user_addressbook object.
 *
 * @param $address_id
 *   Integer specifying the address id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $user_address object or FALSE if it cannot be loaded.
 *
 * @see addressbook_load_multiple()
 */
function user_address_load($address_id, $reset = FALSE) {
  $user_addresss = user_address_load_multiple(array($address_id), array(), $reset);
  return reset($user_addresss);
}

/**
 * Load multiple user addreses based on certain conditions.
 *
 * @param $address_ids
 *   An array of address IDs.
 * @param $conditions
 *   An array of conditions to match against the {user_address} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of user address objects, indexed by address_id.
 *
 * @see entity_load()
 * @see user_addressbook_load()
 * @see user_addressbook_load_by_user()
 */
function user_address_load_multiple($address_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('user_address', $address_ids, $conditions, $reset);
}


/**
 * Fetch user addreses by account.
 *
 * @param $account
 *   The user account to load addreses for, or its uid.
 * @return
 *   An array of user address objects, indexed by address_id.
 *
 * @see user_addressbook_load_multiple()
 * @see user_addressbook_entity_delete()
 */
function user_addresses_load_by_user($account = NULL) {
  global $user;

  if (!isset($account)) {
    $account = $user;
  }
  // Use a separate query to determine all profile ids per user and cache them.
  // That way we can look up profiles by id and benefit from the static cache
  // of the entity loader.
  $cache = &drupal_static(__FUNCTION__, array());
  $uid = is_object($account) ? $account->uid : $account;

  if (!isset($cache[$uid]) && !isset($cache[$uid]['addressbook'])) {
    $query = new EntityFieldQuery;
    $result = $query
      ->entityCondition('entity_type', 'user_address')
      ->propertyCondition('uid', $uid)
      ->execute();
    $user_addresses = !empty($result['user_address']) ? user_address_load_multiple(array_keys($result['user_address'])) : array();
    // Cache ids for further lookups.
    $cache[$uid]['addressbook'] = $user_addresses;
  }

  // Return an array containing user addresses.
  return $cache[$uid]['addressbook'];
}

/**
 * Implements callback_entity_info_uri().
 */
function user_addressbook_uri($user_address) {
  $user_addressbook_path = 'user/' . $user_address->uid . '/addresses';
  $user_address_path = $user_addressbook_path . '/' . $user_address->address_id;
  return array(
    'path' => $user_address_path,
    'delete_path' => $user_address_path . '/delete',
    'edit_path' => $user_address_path . '/edit',
    'redirect_path' => $user_addressbook_path,
  );
}

/**
 * Implements hook_enable().
 */
function user_addressbook_enable() {
  user_addressbook_entity_configure();
}

/**
 * Ensures the address field is present for the user_address entities.
 */
function user_addressbook_entity_configure() {
  // Define an addressfield for the user_address entities.
  $field_name = 'user_addressbook_address';
  field_cache_clear();
  $field = field_info_field($field_name);


  $instance = field_info_instance('user_address', $field_name, 'user_address');
  if (empty($field)) {
    $field = array(
      'field_name' => $field_name,
      'type' => 'addressfield',
      'cardinality' => 1,
      'entity_types' => array('user_address'),
      'translatable' => FALSE,
    );

    $field = field_create_field($field);
  }
  if (empty($instance)) {
    $instance = array(
      'field_name' => $field_name,
      'entity_type' => 'user_address',
      'bundle' => 'user_address',
      'label' => t('Address'),
      'required' => TRUE,
      'widget' => array(
        'type' => 'addressfield_standard',
        'weight' => -10,
        'settings' => array(
          'format_handlers' => array('address', 'name-oneline'),
        ),
      ),
      'display' => array(),
    );

    // Set the default display formatters for various view modes.
    foreach (array('default', 'customer', 'administrator') as $view_mode) {
      $instance['display'][$view_mode] = array(
        'label' => 'hidden',
        'type' => 'addressfield_default',
        'weight' => -10,
      );
    }

    field_create_instance($instance);
  }
}

/**
 * Redirects a User addresbook configuration URL to its fields management page.
 */
function user_addressbook_admin_page_redirect() {
  drupal_goto('admin/config/people/addressbook/manage/fields');
}

/**
* Menu item title callback - use the user address name.
*/
function user_address_page_title($user_address) {
return is_object($user_address) ? $user_address->name : '';
}

/**
 * Page callback for listing user addresses.
 */
function user_addressbook_page($account = NULL) {
  global $user;

  if (!isset($account)) {
    $account = $user;
  }
  $output = drupal_get_form('user_addressbook_page_form', $account);

  return $output;
}

/**
 * Build the form for listing user addresses page.
 */
function user_addressbook_page_form($form, &$form_state, $account = NULL) {
  global $user;

  if (!isset($account)) {
    $account = $user;
  }
  $form['user_addresses'] = array(
    '#type' => 'container',
    '#prefix' => '<div id="user-addressbook-wrapper">',
    '#suffix' => '</div>',
  );

  $form['user_addresses'] += _user_addressbook_retrieve_view_form($form['user_addresses'], $form_state, 'user_addressbook', 'default', array($account->uid, 'user-addressbook-wrapper'));

  return $form;
}

/**
 * User address entity View callback.
 */
function user_address_view($user_address, $view_mode = 'user_addressbook') {
  return $user_address->view($view_mode);
}

/**
 * Returns an initialized user address object.
 *
 * @param $uid
 *   The uid of the user the address is for.
 *
 * @return
 *   A user address object with all default fields initialized.
 */
function user_addressbook_new($uid = 0) {
  return entity_get_controller('user_address')->create(array(
    'uid' => $uid,
  ));
}

/**
 * Implements hook_entity_insert().
 *
 * Set the new user_address as default if there is none.
 */
function user_addressbook_entity_insert($user_address) {
  if (!empty($user_address->address_id)) {
      // Check if there are default addreses defined.
      $default_addresses = user_addressbook_get_default_addresses($user_address->uid);
      if (empty($default_addresses)) {
        $user_address_types = user_addressbook_address_types();
        foreach ($user_address_types as $type => $user_address_type) {
          user_addressbook_set_default_address($user_address, $type);
        }
      }
  }
}

/**
 * Implements hook_entity_delete().
 *
 * Delete the customer profile entry from commerce_addressbook_defaults table,
 * set a new default customer profile for this type.
 */
function user_addressbook_entity_delete($entity, $type) {
  if ($type == 'user_address') {
    $user_address = $entity;
    // Update the default addresses if the deleted addresses was set as default.
    // Use latest one address.
    $record = db_select('user_address_defaults', 'uad')
      ->fields('uad')
      ->condition('address_id', $user_address->address_id)
      ->execute();
    if ($record->rowCount() > 0) {
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'user_address')
        ->propertyCondition('uid', $user_address->uid)
        ->propertyOrderBy('address_id', 'DESC')
        ->range(0, 1);
      $results = $query->execute();
      if (!empty($results['user_address'])) {
        $new_user_address = user_address_load(key($results['user_address']));
        while ($default_address_entry = $record->fetchAssoc()) {
          $query = new EntityFieldQuery();
          user_addressbook_set_default_address($new_user_address, $default_address_entry['type']);
        }
      }
    }
    // Delete the old ones if any.
    db_delete('user_address_defaults')
      ->condition('address_id', $user_address->address_id)
      ->execute();
  }
}

/**
 * Implements hook_user_delete().
 */
function user_addressbook_user_delete($account) {
  foreach (user_addresses_load_by_user($account) as $user_address) {
    entity_delete('user_address', $user_address->address_id);
  }
}

/**
 * Find an existing default address for a given user and
 * update it to a new address, or set it if a default is not already set.
 */
function user_addressbook_address_types() {
  // First check the static cache for an address types.
  $user_address_types = &drupal_static(__FUNCTION__);
  // If it did not exist, fetch the types now.
  if (empty($user_address_types)) {
    $user_address_types = module_invoke_all('user_addressbook_address_type_info');
    if (!empty($user_address_types)) {
      // Give other modules a chance to alter the order states.
      drupal_alter('user_addressbook_address_type_info_alter', $user_address_types);
      uasort($user_address_types, 'drupal_sort_weight');
    }
    else {
      $user_address_types['default'] = array(
        'type' => 'default',
        'title' => t('Default'),
      );
    }
  }

  return $user_address_types;
}

/**
 * Callback for getting user address properties.
 *
 * @see user_addressbook_entity_property_info()
 */
function user_address_get_properties($user_address, array $options, $name) {
  switch ($name) {
    case 'user':
      return $user_address->uid;
  }
}

/**
 * Callback for setting user addres properties.
 *
 * @see user_addressbook_entity_property_info()
 */
function user_address_set_properties($user_address, $name, $value) {
  if ($name == 'user') {
    $user_address->uid = $value;
  }
}

/**
 * Find an existing default address for a given user and
 * update it to a new address, or set it if a default is not already set.
 */
function user_addressbook_set_default_address($user_address, $type = 'default') {
  db_merge('user_address_defaults')
    ->key(array(
      'uid' => $user_address->uid,
      'type' => $type,
    ))
    ->fields(array('address_id' => $user_address->address_id))
    ->execute();
}

/**
 * Returns the default user address id for a specific uid and address type.
 *
 * @param $uid
 *   The uid of the user whose default user address id should be returned.
 * @param $type
 *   The type of user address to look up.
 *
 * @return
 *  The id of the default user address if set, FALSE otherwise.
 */
function user_addressbook_get_default_addresses($uid, $type = NULL) {
  $users_default_addresses = &drupal_static(__FUNCTION__, array());
  if (!isset($users_default_addresses[$uid])) {
    $result = db_select('user_address_defaults', 'uad')
      ->fields('uad', array('address_id', 'type'))
      ->condition('uid', $uid)
      ->execute();
    while ($record = $result->fetchAssoc()) {
      $users_default_addresses[$uid][$record['type']] = $record['address_id'];
    }
  }
  if ($type) {
    return isset($users_default_addresses[$uid][$type]) ? $users_default_addresses[$uid][$type] : FALSE;
  }
  else {
    return isset($users_default_addresses[$uid]) ? $users_default_addresses[$uid] : FALSE;
  }
}

/**
 * Validation after set default address is checked.
 *
 * Rebuild the form with default address changed.
 */
function user_addressbook_field_handler_user_address_set_default_validate($element, &$form_state, &$form) {
  if($element['#value'] === $element['#return_value']) {
    list($address_id, $type) = explode('-', $element['#return_value']);
    $user_address = user_address_load($address_id);
    $view_form_parents = array_slice($element['#parents'], 0, -2);
    $view_form = drupal_array_get_nested_value($form, $view_form_parents);
    user_addressbook_set_default_address($user_address, $type);
    $form_state['rebuild'] = TRUE;
  }
}

/**
 * Ajax callback for the "edit" button.
 */
function user_addressbook_ajax_form_refresh($form, &$form_state) {
  $form_wrapper = reset($form_state['triggering_element']['#array_parents']);
  if (!empty($form_state['redirect'])) {
    ctools_include('ajax');
    ctools_add_js('ajax-responder');
    $commands = array();
    $commands[] = ctools_ajax_command_redirect($form_state['redirect']);
    print ajax_render($commands);
    exit;
  }
  return $form[$form_wrapper];
}

/**
 * Helper function.
 *
 * Returns a form of a given View for inclusion in another form (given).
 */
function _user_addressbook_retrieve_view_form($form, &$form_state, $view_id, $display_id, $arguments = array(), $override_url = NULL) {
  $view = views_get_view($view_id);
  $view->set_display($display_id);

  // Set the specific arguments passed in.
  $view->set_arguments($arguments);

  // Override the view url, if an override was provided.
  if (!empty($override_url)) {
    $view->override_url = $override_url;
  }

  // Prepare and execute the View query.
  $view->pre_execute();
  $view->execute();
  // Output of the view, needed for building the view form.
  $view->preview();
  $output = (!empty($view->result) || $view->style_plugin->even_empty()) ? $view->style_plugin->render($view->result) : '';
  $empty_view = empty($output);

  // Get the view form in the pane.
  $view_form = views_form($form, $form_state, $view, $output);
  $view_form['output']['#weight'] = 0;
  // Add the other View elements to output,
  // as header, footer and/or attachments.
  if (!empty($view->header)) {
    $view_form['header'] = array(
      '#markup' => $view->display_handler->render_area('header', $empty_view),
      '#weight' => -20,
    );
  }
  if (!empty($view->attachment_before)) {
    $view_form['attachment_before'] = array(
      '#markup' => $view->attachment_before,
      '#weight' => -10,
    );
  }
  if (!empty($view->attachment_after)) {
    $view_form['attachment_after'] = array(
      '#markup' => $view->attachment_after,
      '#weight' => 10,
    );
  }
  if (!empty($view->footer)) {
    $view_form['footer'] = array(
      '#markup' => $view->display_handler->render_area('footer', $empty_view),
      '#weight' => 20,
    );
  }
  $view_form['#view'] = $view;
  unset($view_form['actions']);

  return $view_form;
}
