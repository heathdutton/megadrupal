<?php

/**
 * @file
 * Contains installation functions of commerce_reverse_auction module.
 */

/**
 * Implements hook_enable().
 */
function commerce_reverse_auction_enable() {
  // This function configures all existing line item types, including ours.
  commerce_line_item_configure_line_item_types();
  $line_item_type = commerce_line_item_type_load('commerce_reverse_auction_lineitem');
  if ($line_item_type) {
    commerce_line_item_configure_line_item_type($line_item_type);
  }
}


/**
 * Implements hook_install(). 
 */
function commerce_reverse_auction_install() {
  $bundle = new Bundle();
  $bundle->name = 'reverse_auction_bid';
  $bundle->label = 'Reverse Auction Bid';
  $bundle->entity_type = 'commerce_auction_bid';
  $bundle->save();

  // This is a workaround for fixing http://drupal.org/node/1365602
  // @TODO: remove this after the issue is fixed.
  drupal_get_schema('eck_commerce_auction_bid', TRUE);

  $t = get_t();
  $product_field = field_info_field('bid_product');
  if (!$product_field) {
    field_create_field(array(
      'field_name' => 'bid_product',
      'type' => 'commerce_product_reference',
      'cardinality' => 1,
    ));
  }
  $instance = field_info_instance($bundle->entity_type, 'bid_product', $bundle->name);
  if (!$instance) {
    field_create_instance(array(
      'field_name' => 'bid_product',
      'entity_type' => $bundle->entity_type,
      'bundle' => $bundle->name,
      'label' => t('Product'),
      'required' => TRUE,
      'widget' => array(
        'active' => 1,
        'module' => 'inline_entity_form',
        'settings' => array(
          'fields' => array(),
          'type_settings' => array(
            'autogenerate_title' => 1,
            'use_variation_language' => 0,
          ),
        ),
        'type' => 'inline_entity_form',
        'weight' => '1',
      ),
    ));
  }

  $node_ref_field = field_info_field('reverse_auction_ref');
  if (!$node_ref_field) {
    field_create_field(array(
      'field_name' => 'reverse_auction_ref',
      'type' => 'entityreference',
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
      'settings' => array(
        'target_type' => 'node',
      ),
    ));
  }
  $instance = field_info_instance($bundle->entity_type, 'reverse_auction_ref', $bundle->name);
  if (!$instance) {
    field_create_instance(array(
      'field_name' => 'reverse_auction_ref',
      'entity_type' => $bundle->entity_type,
      'bundle' => $bundle->name,
      'label' => t('Reverse auction'),
    ));
  }
}

/**
 *Implements hook_uninstall().
 */
function commerce_reverse_auction_uninstall() {
  $field = field_info_instance('commerce_auction_bid', 'bid_product', 'reverse_auction_bid');
  if ($field) {
    field_delete_instance($field);
  }
  
  module_load_include('inc', 'eck', 'eck.entity_type');
  module_load_include('inc', 'eck', 'eck.bundle');
  module_load_include('inc', 'eck', 'eck.classes');
  $entity_type = EntityType::loadByName('commerce_auction_bid');
  $bundle = Bundle::loadByMachineName('reverse_auction_bid');
  eck__bundle__delete($entity_type, $bundle);
  
  $types = variable_get('commerce_reverse_auction_display_types');
  if ($types) {
    include 'commerce_reverse_auction.module';
    commerce_reverse_auction_remove_fields($types);
  }
  variable_del('commerce_reverse_auction_display_types');
  variable_del('commerce_reverse_auction_extend');
  variable_del('commerce_reverse_auction_final_period');
  variable_del('commerce_reverse_auction_extension_time');
}
 