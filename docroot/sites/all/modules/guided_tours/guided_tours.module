<?php

/**
 * $_SESSION['guided tours']['active tour']       data of the currently active tour
 *
 * $_SESSION['guided tours']['next step']         id of the next step
 * $_SESSION['guided tours']['current step']      id of the current step
 *
 * $_SESSION['guided tours']['last menu item']    href of the last menu item to follow the user
 */

/**
 * Implements hook_menu();
 */
function guided_tours_menu() {
  return array(
    'admin/config/content/guided_tours' => array(
      'title' => 'Guided tours',
      'page callback' => '_guided_tours_list_tours',
      'access arguments' => array('access administration pages'),
      'file' => 'guided_tours.admin.inc',
      'type' => MENU_NORMAL_ITEM,
    ),
    'admin/config/content/guided_tours/overview' => array(
      'title' => 'List',
      'description' => 'List of guided tours',
      'page callback' => '_guided_tours_list_tours',
      'access arguments' => array('access administration pages'),
      'file' => 'guided_tours.admin.inc',
      'type' => MENU_DEFAULT_LOCAL_TASK,
    ),
    'admin/config/content/guided_tours/settings' => array(
      'title' => 'Settings',
      'description' => 'Settings of guided tours',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('guided_tours_settings_form'),
      'access arguments' => array('access administration pages'),
      'file' => 'guided_tours.admin.inc',
      'type' => MENU_LOCAL_TASK,
    ),
    'admin/config/content/guided_tours/configure_tour' => array(
      'title' => 'Editor',
      'description' => 'Configure the sequence of a guided tour',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('guided_tours_configure_form'),
      'access arguments' => array('access administration pages'),
      'file' => 'guided_tours.admin.inc',
      'type' => MENU_LOCAL_TASK,
    ),
    'guided_tours' => array(
      'title' => 'Guided tours (start/stop/hide)',
      'page callback' => '_guided_tours_start_stop_hide',
      'access callback' => 'user_is_logged_in',
      'type' => MENU_CALLBACK,
    ),
  );
}

function guided_tours_block_info() {
  return array(
    'guided_tours_available' => array(
      'info' => t('A listing of available guided tours.'),
      'cache' => DRUPAL_NO_CACHE,
    ),
  );
}

function guided_tours_block_view($block_name = '') {
  $block = null;

  if ($block_name == 'guided_tours_available') {
    // Build query
    $tours_select = db_select('guided_tours', 'gt')
      ->fields('gt', array('tour_id', 'title', 'description', 'visible'))
      ->orderBy('title')
      ->condition('visible', '1')
      ->execute();

    if ($tours_select->rowCount() > 0) {
      $subject = t('Available guided tours');
      $content = '';

      $available = array();
      $seen = array();

      foreach ($tours_select->fetchAll() as $tour) {
        $state = _guided_tours_get_state_for_user($tour->tour_id);

        $tour->title = l($tour->title, 'guided_tours/start/' . $tour->tour_id);
        if ($tour->seen == 1)
          $tour->title = '<em>' . $tour->title . '</em>';
        if (!empty($tour->description))
          $tour->title .= '<br />' . $tour->description;

        if ($state->seen == '1') {
          $seen[] = $tour->title;
        } else {
          $available[] = $tour->title;
        }
      }

      if (count($available) > 0) {
        $content .= theme('item_list', array(
          'items' => $available,
          'type' => 'ul',
        ));
      } else {
        $subject = t('Already seen tours');
      }

      if (count($seen) > 0) {
        $seen_content = array(
          'items' => $seen,
          'type' => 'ul',
        );
        if (count($available) > 0)
          $seen_content['title'] = t('Already seen tours');

        $content .= theme('item_list', $seen_content);
      }
    } else {
      $content = t('There are no guided tours available for you!');
    }

    // Configure block
    $block = array(
      'subject' => $subject,
      'content' => $content,
    );
  }

  return $block;
}

/**
 * Implements hook_user_login()
 */
function guided_tours_user_login(&$edit) {
  // Make sure this isn't used for password resetting
  if (isset($_POST['form_id']) && $_POST['form_id'] == 'user_pass_reset')
    return;

  // Get obligatory tour
  $obligatory_tour = variable_get('guided_tours obligatory_tour');

  // Check if we have an obligatory tour
  if (!empty($obligatory_tour) && $obligatory_tour != '0') {
    $state = _guided_tours_get_state_for_user($obligatory_tour);

    // If the user hasn't seen the tour
    if ($state->seen == 0) {
      if (!variable_get('guided_tours obligatory_tour intrusive', false)) {
        // Inform the user about the available tour

        drupal_set_message('<strong>' . t('We have a guided tour waiting for you!') . '</strong><br /><br />' . variable_get('guided_tours obligatory_tour description', '') . '<br /><br />' . l(t('Start the guided tour!'), 'guided_tours/start/' . $obligatory_tour));
      } else {
        // Force it
        drupal_set_message('<strong>' . t('Guided tour started automatically') . '</strong><br /><br />' . variable_get('guided_tours obligatory_tour description', ''));

        $edit['redirect'] = 'guided_tours/start/' . $obligatory_tour;
        $_GET['destination'] = 'guided_tours/start/' . $obligatory_tour;
        drupal_goto('guided_tours/start/' . $obligatory_tour);
      }
    }
  }
}

/**
 * Implements template_preprocess_page().
 */
function guided_tours_preprocess_page() {
  drupal_add_js(array('qTipExtensions' => array(
      'tour additional classes' => variable_get('guided_tours tour_additional_classes', ''),
      'dialog additional classes' => variable_get('guided_tours dialog_additional_classes', ''),
      'button additional classes' => variable_get('guided_tours button_additional_classes', ''),
    )), 'setting');

  drupal_add_library('jgrowl_d7', 'jgrowl');

  if (!isset($_SESSION['guided tours']) || !is_array($_SESSION['guided tours']) || count($_SESSION['guided tours']) < 4) {
    $_SESSION['guided tours'] = array(
      'active tour' => null,
      'next step' => null,
      'current step' => null,
      'last menu item' => null,
    );
  }

  // Don't show tours in admin panel
  if (arg(0) == 'admin') {
    _guided_tours_stop();
    return;
  }

  $menu_item = menu_get_item();
  $href = (!empty($menu_item['tab_parent_href'])) ? $menu_item['tab_parent_href'] : $menu_item['href'];

  if (is_object($_SESSION['guided tours']['active tour'])) {
    drupal_add_js(drupal_get_path('module', 'guided_tours') . '/js/guided_tours.js');
    drupal_add_css(drupal_get_path('module', 'guided_tours') . '/css/guided_tours.css');

    $tour = $_SESSION['guided tours']['active tour'];
    $next_step = $_SESSION['guided tours']['next step'];

    if ($next_step == 0)
      _guided_tours_set_seen_for_user($tour->tour_id);

    if (
    // frontpage
      ($next_step == 0 && drupal_is_front_page())
      // step taken and address match
      || ($tour->configuration['steps'][$next_step]['location']['switch'] == 'address' && preg_match($tour->configuration['steps'][$next_step]['location']['address'], request_uri()))
      // step taken and entity match
      || ($tour->configuration['steps'][$next_step]['location']['switch'] == 'entity' && $tour->configuration['steps'][$next_step]['location']['entity'] == _guided_tours_get_entity())) {

      $_SESSION['guided tours']['current step'] = $_SESSION['guided tours']['next step']++;
      $_SESSION['guided tours']['last menu item'] = $href;
    } elseif ($_SESSION['guided tours']['last menu item'] == $href) {
      // Remained on same step
    } else {
      // Error
    }

    drupal_add_js(array('GuidedTours' => ($_SESSION['guided tours'])), 'setting');

    if ($_SESSION['guided tours']['current step'] == count($_SESSION['guided tours']['active tour']->configuration['steps']) - 1)
      _guided_tours_reach_end();
  }
}

/**
 * Get the data of a guided tour by its id
 * @param int $tour_id
 */
function _guided_tours_get_data($tour_id = NULL) {
  $return = array();

  $tour_select = db_select('guided_tours', 'gd')
    ->fields('gd', array('tour_id', 'title', 'description', 'visible', 'configuration', 'start_count', 'finish_count'));

  if (is_numeric($tour_id))
    $tour_select->condition('tour_id', $tour_id);

  $tour_execute = $tour_select->execute();

  if ($tour_execute->rowCount() != 1)
    return $return;

  foreach ($tour_execute->fetchAll() as $tour) {
    $tour->configuration = unserialize($tour->configuration);
    $return[] = $tour;
  }

  if (is_numeric($tour_id))
    return $return[0];

  return $return;
}

/**
 * Starts a tour for the current user
 * @param int $tour
 * @return array
 */
function _guided_tours_start($tour_id) {
  $tour = _guided_tours_get_data($tour_id);

  if (is_object($tour) && $tour->visible) {
    $_SESSION['guided tours']['active tour'] = $tour;
    $_SESSION['guided tours']['next step'] = 0;
    $_SESSION['guided tours']['last menu item'] = null;
    $_SESSION['guided tours']['current step'] = null;
  }

  return array(
    'status' => 'success',
    'text' => 'started',
  );
}

/**
 * Stop the currently active tour for the current user
 */
function _guided_tours_stop() {
  $_SESSION['guided tours'] = array();
}

/**
 * Is called a tour is completed
 */
function _guided_tours_reach_end() {
  _guided_tours_stop();
  drupal_set_message(t('You reached the end of the guided tour. You can now simply continue using the site.'));
}

/**
 * Callback for URL
 */
function _guided_tours_start_stop_hide() {
  $message = array(
    'status' => 'error',
    'text' => 'error',
  );

  if (arg(1) == 'start') {
    $message = _guided_tours_start(arg(2));
    drupal_goto();
  } elseif (arg(1) == 'stop') {
    _guided_tours_stop();
    $message = array('status' => 'success', 'text' => 'stopped');
  } elseif (arg(1) == 'decrease') {
    if ($_SESSION['guided tours']['current step'] == 0) {
      $_SESSION['guided tours']['current step'] = null;
      $_SESSION['guided tours']['next step'] = 0;
    } else {
      $_SESSION['guided tours']['current step']--;
      $_SESSION['guided tours']['next step']--;
    }
    $message = array('status' => 'success', 'text' => 'decreased');
  }

  echo json_encode($message);

  return null;
}

/**
 * Get entity and entity type for the current menu item
 * @return string
 */
function _guided_tours_get_entity() {
  $entity_info = entity_get_info();
  $entity = arg(0);

  if (array_key_exists($entity, $entity_info)) {
    $object = menu_get_object($entity);
    $bundle = $object->{$entity_info[$entity]['bundle keys']['bundle']};

    return $entity . ':' . $bundle;
  }

  return '';
}

/**
 * Get the state of a tour for the current user
 * @global stdClass $user
 * @param int $tour_id
 */
function _guided_tours_get_state_for_user($tour_id) {
  global $user;

  $return = new stdClass();
  $return->tour = $tour_id;
  $return->user = $user->uid;
  $return->seen = 0;

  $state_select = db_select('guided_tours_states', 'gts')
    ->fields('gts', array('user', 'tour', 'seen'))
    ->condition('user', $user->uid)
    ->condition('tour', $tour_id)
    ->execute();

  if ($state_select->rowCount() == 1) {
    $state = $state_select->fetchAll();

    $return = $state[0];
  }

  return $return;
}

/**
 * Set the state of a tour as seen for the current user
 * @global stdClass $user
 * @param int $tour_id
 * @return mixed
 */
function _guided_tours_set_seen_for_user($tour_id) {
  global $user;

  db_delete('guided_tours_states')
    ->condition('tour', $tour_id)
    ->condition('user', $user->uid)
    ->execute();

  $record = array(
    'tour' => $tour_id,
    'user' => $user->uid,
    'seen' => '1'
  );

  return drupal_write_record('guided_tours_states', $record);
}