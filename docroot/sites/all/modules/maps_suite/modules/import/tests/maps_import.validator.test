<?php

/**
 * @file
 * Tests suite for the mapping validation.
 */

use Drupal\maps_import\Mapping\Validator\Multiple as MultipleValidator;
use Drupal\maps_import\Mapping\Validator\Translate as TranslateValidator;
use Drupal\maps_import\Mapping\Validator\Type as TypeValidator;
use Drupal\maps_import\Mapping\Validator\Validator;

/**
 * Performs functional tests on MaPS Import / Validator.
 *
 * @see DrupalWebTestCase
 */
class MapsImportValidatorWebTestCase extends MapsImportWebTestCase {

  /**
   * SimpleTest getInfo.
   * @inheritdoc
   */
  public static function getInfo() {
    return array(
      'name' => 'MaPS Import Validator',
      'description' => 'Tests the mapping validations.',
      'group' => MapsSuiteTestInterface::TEST_GROUP,
    );
  }

  /**
   * Test the settings form.
   */
  public function testSettings() {
    // Accessing the settings form.
    $this->drupalGet('admin/maps-suite/settings/fields');
    $this->assertResponse(200);

    $maps_types = TypeValidator::getMapsTypes();

    foreach ($maps_types as $maps_type) {
      $drupal_types = TypeValidator::getDrupalTypes();

      // Set random values.
      for ($i = 0; $i < rand(0, count($drupal_types)); $i++) {
        $drupal_type = array_rand($drupal_types);

        $edit['types[' . $maps_type . '][validation][]'][] = $drupal_types[$drupal_type];
        unset($drupal_types[$drupal_type]);
      }
    }

    $this->drupalPost('admin/maps-suite/settings/fields', $edit, t('Save'));
    $this->assertRaw('Fields validation updated.', 'Save succesfull.');

    foreach ($edit as $field => $value) {
      // We actually can't assert the fields because the assertField* functions
      // don't take care of multiple select in SimpleTest.
      // $this->assertFieldByName($field, $value);
    }
  }

  /**
   * Test the mapping items type validation.
   */
  public function testTypeValidation() {
    $types_validators = array(
      0 => array(
        'attribute' => 'int',
        'field' => 'number_integer',
        'code' => Validator::VALIDATOR_SUCCESS,
        'message' => 'Type validator SUCCESS.',
      ),
      1 => array(
        'attribute' => 'int',
        'field' => 'unknown_type',
        'code' => Validator::VALIDATOR_WARNING,
        'message' => 'Type validator WARNING.',
      ),
      2 => array(
        'attribute' => 'text',
        'field' => 'number_integer',
        'code' => Validator::VALIDATOR_ERROR,
        'message' => 'Type validator ERROR.',
      ),
    );

    foreach ($types_validators as $type_validator) {
      $attribute = $this->randomDefaultAttribute(array('attribute_type_code' => $type_validator['attribute']));
      $field = $this->randomDefaultField(array('type' => $type_validator['field']));
      $validator = new TypeValidator($attribute, $field);
      $this->assertTrue($validator->validate() == $type_validator['code'], $type_validator['message']);
    }
  }

  /**
   * Test the mapping items translate validation.
   */
  public function testTranslateValidation() {
    $translate_validators = array(
      0 => array(
        'attribute' => TRUE,
        'field' => TRUE,
        'code' => Validator::VALIDATOR_SUCCESS,
        'message' => 'Translate validator SUCCES (translatable).',
      ),
      1 => array(
        'attribute' => FALSE,
        'field' => FALSE,
        'code' => Validator::VALIDATOR_SUCCESS,
        'message' => 'Translate validator SUCCES (not translatable).',
      ),
      2 => array(
        'attribute' => FALSE,
        'field' => TRUE,
        'code' => Validator::VALIDATOR_SUCCESS,
        'message' => 'Translate validator SUCCES (only Drupal translatable).',
      ),
      3 => array(
        'attribute' => TRUE,
        'field' => FALSE,
        'code' => Validator::VALIDATOR_WARNING,
        'message' => 'Translate validator WARNING (only Drupal translatable.',
      ),
    );

    foreach ($translate_validators as $translate_validator) {
      $attribute = $this->randomDefaultAttribute(array('localisable' => $translate_validator['attribute']));
      $field = $this->randomDefaultField(array('translatable' => $translate_validator['field']));
      $validator = new TranslateValidator($attribute, $field);
      $this->assertTrue($validator->validate() == $translate_validator['code'], $translate_validator['message']);
    }
  }

  /**
   * Test the mapping items multiple validation.
   */
  public function testMultipleValidation() {
    $multiple_validators = array(
      0 => array(
        'attribute_multiple' => FALSE,
        'field_type' => 'integer',
        'cardinality' => 1,
        'code' => MultipleValidator::MULTIPLE_VALIDATOR_DRUPAL_SUCCESS,
        'message' => 'Multiple validator SUCCES (not multiple).',
      ),
      1 => array(
        'attribute_multiple' => FALSE,
        'field_type' => 'list<integer>',
        'cardinality' => 3,
        'code' => MultipleValidator::MULTIPLE_VALIDATOR_DRUPAL_SUCCESS,
        'message' => 'Multiple validator SUCCES (only Drupal multiple).',
      ),
      2 => array(
        'attribute_multiple' => TRUE,
        'field_type' => 'integer',
        'cardinality' => 1,
        'code' => MultipleValidator::MULTIPLE_VALIDATOR_DRUPAL_NOT_MULTIPLE,
        'message' => 'Multiple validator WARNING (Drupal not multiple).',
      ),
      3 => array(
        'attribute_multiple' => TRUE,
        'field_type' => 'list<integer>',
        'cardinality' => 3,
        'code' => MultipleValidator::MULTIPLE_VALIDATOR_DRUPAL_NOT_INFINITE,
        'message' => 'Multiple validator WARNING (Drupal cardinality not infinite).',
      ),
      4 => array(
        'attribute_multiple' => TRUE,
        'field_type' => 'list<integer>',
        'cardinality' => FIELD_CARDINALITY_UNLIMITED,
        'code' => MultipleValidator::MULTIPLE_VALIDATOR_DRUPAL_SUCCESS,
        'message' => 'Multiple validator SUCCESS (Drupal cardinality infinite).',
      ),
    );

    foreach ($multiple_validators as $multiple_validator) {
      $attribute = $this->randomDefaultAttribute(array('multiple' => $multiple_validator['attribute_multiple']));
      $field = $this->randomDefaultField(array('type' => $multiple_validator['field_type']));
      $field->setCardinality($multiple_validator['cardinality']);
      $validator = new MultipleValidator($attribute, $field);
      $this->assertTrue($validator->validate() == $multiple_validator['code'], $multiple_validator['message']);
    }
  }
}
