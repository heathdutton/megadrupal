<?php

/**
 * @file
 * Tests suite for the mapping process.
 */

use Drupal\maps_import\Cache\Data\MappingItems as CacheMappingItems;
use Drupal\maps_import\Cache\Data\DrupalFields as CacheDrupalFields;

/**
 * Performs functional tests on MaPS Import / Mapping.
 *
 * @see DrupalWebTestCase
 */
class MapsImportMappingWebTestCase extends MapsImportWebTestCase {

  /**
   * SimpleTest getInfo.
   * @inheritdoc
   */
  public static function getInfo() {
    return array(
      'name' => 'MaPS Import Mapping',
      'description' => 'Tests the mapping configuration.',
      'group' => MapsSuiteTestInterface::TEST_GROUP,
    );
  }

  /**
   * Test the overview page.
   */
  public function testOverview() {
    $profile = $this->createProfile();
    $this->createLanguages($profile);

    foreach (array_keys($this->converterTypes) as $converter_type) {
      $converter = $this->createConverter($profile, $converter_type);

      // Access the overview page.
      $this->drupalGet("admin/maps-suite/profiles/{$profile->getName()}/$converter_type/{$converter->getCid()}/mapping");
      $this->assertResponse(200, t('User can access the mapping overview tab for an %converterType converter.', array('%converterType' => $converter_type)));
      $this->assertRaw(t('There is no defined mapping yet.'), 'No mapping defined.');

      // Clear cache.
      CacheMappingItems::getInstance()->clearBinCache();

      // Create a random mapping item.
      $item = $this->createMappingItem($converter);
      $this->drupalGet("admin/maps-suite/profiles/{$profile->getName()}/$converter_type/{$converter->getCid()}/mapping");
      $this->assertResponse(200, t('User can access the mapping overview tab for an %converterType converter.', array('%converterType' => $converter_type)));
      $this->assertRaw($item->getProperty()->getTranslatedTitle(), 'Property title found.');
      $this->assertRaw($item->getField()->getLabel(), 'Field label found.');
    }
  }

  /**
   * Test the add page.
   */
  public function testAdd() {
    $profile = $this->createProfile();
    $this->createLanguages($profile);

    // Make that all Drupal types are valid,
    // so we don't care about the types in this test.
    $this->allowAllValidators();

    foreach (array_keys($this->converterTypes) as $converter_type) {
      $converter = $this->createConverter($profile, $converter_type);
      $this->drupalGet("admin/maps-suite/profiles/{$profile->getName()}/$converter_type/{$converter->getCid()}/mapping");

      $attribute = array_rand($converter->getMapping()->getSourceProperties() + $converter->getMapping()->getSourceAttributes());
      $field = array_rand($converter->getMapping()->getTargetFields());

      $edit = array(
        'new[property_id]' => $attribute,
        'new[field_name]' => $field,
      );

      $this->drupalPost("admin/maps-suite/profiles/{$profile->getName()}/$converter_type/{$converter->getCid()}/mapping", $edit, t('Save'));
      $this->assertResponse(200, 'User can add a new mapping item');
      $this->assertRaw(t('The new mapping has been created.'));
      $this->assertRaw($attribute, 'Attribute found.');
      $this->assertRaw($field, 'Field found.');
    }
  }

  /**
   * Test the delete page.
   */
  public function testDelete() {
    $profile = $this->createProfile();
    $this->createLanguages($profile);

    foreach (array_keys($this->converterTypes) as $converter_type) {
      $converter = $this->createConverter($profile, $converter_type);
      $item = $this->createMappingItem($converter);

      $this->drupalGet("admin/maps-suite/profiles/{$profile->getName()}/$converter_type/{$converter->getCid()}/mapping");
      $this->assertLink('delete');

      $this->drupalGet("admin/maps-suite/profiles/{$profile->getName()}/$converter_type/{$converter->getCid()}/mapping/{$item->getId()}/delete");
      $this->assertResponse(200, 'User can access the delete page.');
      $this->assertRaw(t('Are you sure you want to delete the mapping %field for the property %name?', array('%field' => $item->getField()->getLabel(), '%name' => $item->getProperty()->getTranslatedTitle())));

      $this->drupalPost("admin/maps-suite/profiles/{$profile->getName()}/$converter_type/{$converter->getCid()}/mapping/{$item->getId()}/delete", array(), t('Delete'));
      $this->assertRaw(t('The mapping was successfully deleted!'));
      $this->assertRaw(t('There is no defined mapping yet.'));
    }
  }

  /**
   * Test the required option of mapping items.
   */
  public function testRequired() {
    $profile = $this->createProfile();
    $this->createLanguages($profile);

    foreach (array_keys($this->converterTypes) as $converter_type) {
      $converter = $this->createConverter($profile, $converter_type);

      $item_required = $this->createMappingItem($converter, array('required' => 1));
      $item_not_required = $this->createMappingItem($converter);

      $this->drupalGet("admin/maps-suite/profiles/{$profile->getName()}/$converter_type/{$converter->getCid()}/mapping");

      // Assert that the required checkboxes are correctly marked.
      $this->assertFieldByName("mapping[{$item_required->getId()}][required]", 1, 'Required item correctly checked.');
      $this->assertFieldByName("mapping[{$item_not_required->getId()}][required]", 0, 'Not required item correctly unchecked.');

      // Inverse required values.
      $edit = array(
        "mapping[{$item_required->getId()}][required]" => 0,
        "mapping[{$item_not_required->getId()}][required]" => 1,
      );
      $this->drupalPost("admin/maps-suite/profiles/{$profile->getName()}/$converter_type/{$converter->getCid()}/mapping", $edit, t('Save'));
      $this->assertFieldByName("mapping[{$item_required->getId()}][required]", 0, 'Required item correctly checked.');
      $this->assertFieldByName("mapping[{$item_not_required->getId()}][required]", 1, 'Not required item correctly unchecked.');
    }
  }

  /**
   * Test the object/media mapping.
   */
  public function testObjectMedia() {
    $profile = $this->createProfile();
    $this->createLanguages($profile);

    $configuration_fetcher = new MapsImportConfigurationFetcherMock($profile);
    $configuration_fetcher->process();

    // Create media types.
    $media_types = $this->createMediaTypes($profile->getPid());

    $converter = $this->createConverter($profile, 'object');
    $this->drupalGet("admin/maps-suite/profiles/{$profile->getName()}/object/{$converter->getCid()}/mapping/add_object_media");
    $this->assertResponse(200, 'User can access the object media mapping form.');

    $start_range = rand(1, 10);
    $limit_range = rand($start_range, $start_range + 10);
    $fields = $converter->getMapping()->getTargetFields();

    $field = array_rand($fields);
    $edit = array(
      'media_type' => array_rand($media_types),
      'start' => $start_range,
      'limit' => $limit_range,
      'field_name' => $field,
      'required' => rand(0, 1),
    );

    $this->drupalPost("admin/maps-suite/profiles/{$profile->getName()}/object/{$converter->getCid()}/mapping/add_object_media", $edit, t('Save'));
    $this->assertResponse(200, 'User can add an object media mapping.');
    $this->assertRaw(t('The new mapping has been created.'), 'Mapping item succesfully added.');
    $this->assertRaw(t($field));

    // Firstly get the previously create mapping item.
    $result = db_select('maps_import_mapping_item', 'mimi')
      ->fields('mimi')
      ->execute()
      ->fetchAssoc();

    $this->drupalGet("admin/maps-suite/profiles/{$profile->getName()}/object/{$converter->getCid()}/mapping/{$result['id']}/edit_object_media");
    $this->assertResponse(200, 'User can access the object media mapping edition form.');

    // Assert fields values.
    foreach ($edit as $field => $value) {
      $this->assertFieldByName($field, $value);
    }

    // Now we try to edit the mapping item.
    // Set new values.
    $field = array_rand($fields);
    $edit = array(
      'media_type' => (($edit['media_type'] + 1) % 4) + 1,
      'start' => $edit['start'] + 1,
      'limit' => $edit['limit'] + 1,
      'field_name' => $field,
      'required' => ($edit['required'] + 1) % 2,
    );

    $this->drupalPost("admin/maps-suite/profiles/{$profile->getName()}/object/{$converter->getCid()}/mapping/{$result['id']}/edit_object_media", $edit, t('Save'));
    $this->assertResponse(200, 'User can edit the object media mapping.');

    $this->drupalGet("admin/maps-suite/profiles/{$profile->getName()}/object/{$converter->getCid()}/mapping/{$result['id']}/edit_object_media");
    $this->assertResponse(200, 'User can access the object media mapping edition form.');

    // Assert fields values.
    foreach ($edit as $field => $value) {
      $this->assertFieldByName($field, $value);
    }
  }

  /**
   * Test the related entity mapping.
   */
  public function testRelatedEntityAdd() {
    $profile = $this->createProfile();
    $this->createLanguages($profile);

    foreach (array_keys($this->converterTypes) as $converter_type) {
      $converter = $this->createConverter($profile, $converter_type);

      $this->drupalGet("admin/maps-suite/profiles/{$profile->getName()}/$converter_type/{$converter->getCid()}/mapping/add_related_entity");
      $this->assertResponse(200, 'User can access the add related entity form.');

      $entity_type = $this->randomEntityType($profile, $converter_type);
      $bundle = $this->randomBundle($entity_type);

      $fields = $converter->getMapping()->getTargetFields();

      $edit = array(
        'entity_type' => $entity_type,
        'bundles[' . $entity_type . ']' => $bundle,
        'field_name' => array_rand($fields),
      );

      $this->drupalPost("admin/maps-suite/profiles/{$profile->getName()}/$converter_type/{$converter->getCid()}/mapping/add_related_entity", $edit, t('Save'));
      $this->assertResponse(200, 'User can submit the add related entity form.');
      $this->assertRaw(t('Related entity saved.'), 'Mapping item succesfully added.');
    }
  }

  /**
   * Test the delayed entity mapping.
   */
  public function testDelayedEntity() {
    $profile = $this->createProfile();
    $this->createLanguages($profile);

    $update_mode = array('add', 'replace');

    foreach (array_keys($this->converterTypes) as $converter_type) {
      $converter = $this->createConverter($profile, $converter_type);
      $attributes = $converter->getMapping()->getSourceProperties() + $converter->getMapping()->getSourceAttributes();

      $this->drupalGet("admin/maps-suite/profiles/{$profile->getName()}/$converter_type/{$converter->getCid()}/mapping/add_delayed_entity");
      $this->assertResponse(200, 'User can access the add delayed entity form.');

      $entity_type = $this->randomEntityType($profile, $converter_type);
      $bundle = $this->randomBundle($entity_type);

      $dummy_class = get_class($converter);
      $dummy_converter = new $dummy_class($converter->getProfile());
      $dummy_converter->setEntityType($entity_type);
      $dummy_converter->setBundle($bundle);

      $edit = array(
        'property_id' => array_rand($attributes),
        'entity_type' => $entity_type,
        'bundles[' . $entity_type . ']' => $bundle,
        'field_names[' . $bundle . ']' => array_rand($dummy_converter->getMapping()->getTargetFields()),
        'update_mode' => $update_mode[array_rand($update_mode)],
      );

      $this->drupalPost("admin/maps-suite/profiles/{$profile->getName()}/$converter_type/{$converter->getCid()}/mapping/add_delayed_entity", $edit, t('Save'));
      $this->assertResponse(200, 'User can submit the add delayed entity form.');
      $this->assertRaw(t('Delayed entity saved.'), 'Mapping item succesfully added.');
    }
  }

  /**
   * Test format options.
   */
  public function testFormatFieldOptions() {
    $profile = $this->createProfile();
    $this->createLanguages($profile);

    // Firstly, we have to create a field that need option configuration,
    // and a second that accept no options.
    field_create_field(array(
      'field_name' => 'field_options',
      'type' => 'text_with_summary',
    ));
    field_create_field(array(
      'field_name' => 'field_no_options',
      'type' => 'number_integer',
    ));

    foreach (array_keys($this->converterTypes) as $converter_type) {
      $converter = $this->createConverter($profile, $converter_type);

      // No options.
      // Create a new field instance.
      field_create_instance(array(
        'field_name' => 'field_no_options',
        'entity_type' => $converter->getEntityType(),
        'bundle' => $converter->getBundle(),
      ));

      $item_no_options = $this->createMappingItem($converter, array(
        'field' => 'field_no_options',
      ));

      // Check if the option link exists and if we can access the form.
      $this->drupalGet("admin/maps-suite/profiles/{$profile->getName()}/$converter_type/{$converter->getCid()}/mapping");
      $this->assertResponse(200);
      $this->assertNoLink('options', 0, t('Mapping item with options not found.'));

      $this->drupalGet("admin/maps-suite/profiles/{$profile->getName()}/$converter_type/{$converter->getCid()}/mapping/{$item_no_options->getId()}/options");
      $this->assertNoResponse(200);

      // Options.
      // Create a new field instance.
      field_create_instance(array(
        'field_name' => 'field_options',
        'entity_type' => $converter->getEntityType(),
        'bundle' => $converter->getBundle(),
      ));

      $item_options = $this->createMappingItem($converter, array(
        'field' => 'field_options',
      ));

      CacheDrupalFields::getInstance()->clearBinCache();
      CacheMappingItems::getInstance()->clearBinCache();

      // Check if the option link exists and if we can access the form.
      $this->drupalGet("admin/maps-suite/profiles/{$profile->getName()}/$converter_type/{$converter->getCid()}/mapping");
      $this->assertResponse(200);
      $this->assertLink('options', 0, t('Mapping item with options found.'));

      $this->drupalGet("admin/maps-suite/profiles/{$profile->getName()}/$converter_type/{$converter->getCid()}/mapping/{$item_options->getId()}/options");
      $this->assertResponse(200);

      foreach (filter_formats() as $format_name => $format) {
        // Submit the options form.
        $edit = array('format' => $format_name);
        $this->drupalPost("admin/maps-suite/profiles/{$profile->getName()}/$converter_type/{$converter->getCid()}/mapping/{$item_options->getId()}/options", $edit, t('Save'));

        CacheMappingItems::getInstance()->clearBinCache();

        // Check the value in database.
        $item = $converter->getMapping()->getItem($item_options->getId());
        $saved_options = $item->getTargetOptions();

        $this->assertTrue($format_name == $saved_options['format'], t('Format correctly set to %format', array('%format' => $format_name)));
      }
    }
  }

}
