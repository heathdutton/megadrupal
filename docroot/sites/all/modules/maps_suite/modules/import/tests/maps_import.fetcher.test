<?php

/**
 * @file
 * Tests suite for fetchers related to MaPS Import module.
 */

/**
 * Performs functional tests on MaPS Import / Fetcher.
 *
 * @see DrupalWebTestCase
 */
class MapsImportFetcherWebTestCase extends MapsImportWebTestCase {

  /**
   * SimpleTest getInfo.
   * @inheritdoc
   */
  public static function getInfo() {
    return array(
      'name' => 'MaPS Import Fetcher',
      'description' => 'Tests the fetcher.',
      'group' => MapsSuiteTestInterface::TEST_GROUP,
    );
  }

  /**
   * SimpleTest setUp.
   * @inheritdoc
   */
  public function setUp(array $modules = array(), array $permissions = array()) {
    $permissions[] = 'access site in maintenance mode';
    parent::setUp($modules, $permissions);
  }

  /**
   * Test the configuration import operation.
   *
   * By count: we only assert that there is more rows in the specified table.
   */
  public function testConfigurationFetcher() {
    include drupal_get_path('module', 'maps_import') . '/tests/files/maps_import_configuration.php';

    // Put the site in maintenance mode.
    variable_set('maintenance_mode', 1);

    $profile = $this->createProfile();
    $import_url = "admin/maps-suite/profiles/{$profile->getName()}/import";
    $empty_field_message = t('Operation to perform field is required.');

    // Assert that there is only the configuration import operation.
    $this->drupalGet($import_url);
    $this->assertResponse(200);
    $this->assertNoRaw(t('Global'), 'Only configuration import available');

    $tabs = array(
      'object',
      'media',
      'languages',
      'statuses',
      'media_types',
      'libraries',
    );
    foreach ($tabs as $key) {
      $this->drupalGet("admin/maps-suite/profiles/{$profile->getName()}/$key");
      $this->assertResponse(403, 'User cannot access the "' . $key . '" tab.');
    }

    $this->createLanguages($profile);

    // First step
    // Fill the configuration table
    // Process with configuration fetch operation.
    $configuration_fetcher = new MapsImportConfigurationFetcherMock($profile);
    $configuration_fetcher->process();

    // We have to ensure that the values in our array are in
    // the same order than the results from the database.
    // So we create a specific index pid-type-id-id_language.
    $configuration = array();
    foreach ($maps_import_configuration as $row) {
      $key = $row['pid'] . '-' . $row['type'] . '-' . $row['id'] . '-' . $row['id_language'];
      $configuration[$key] = $row;
    }
    ksort($configuration);

    // Retreive values from database.
    $result = db_select('maps_import_configuration', 'mic')
      ->fields('mic')
      ->orderBy('pid')
      ->orderBy('type')
      ->orderBy('id')
      ->orderBy('id_language')
      ->execute();

    foreach ($result as $i => $record) {
      $key = $record->pid . '-' . $record->type . '-' . $record->id . '-' . $record->id_language;

      foreach ($record as $name => $value) {
        $this->assertEqual($value, $configuration[$key][$name]);
      }
    }
  }

  /**
   * Test the objects import operation.
   */
  public function testObjectFetcher() {
    include drupal_get_path('module', 'maps_import') . '/tests/files/maps_import_objects.php';
    include drupal_get_path('module', 'maps_import') . '/tests/files/maps_import_medias.php';

    // Put the site in maintenance mode.
    variable_set('maintenance_mode', 1);

    $profile = $this->createProfile();
    $this->createLanguages($profile);

    // Assert that the operation is available.
    $this->drupalGet("admin/maps-suite/profiles/{$profile->getName()}/import");
    $this->assertResponse(200);
    $this->assertRaw(t('Global'), 'User can access the object import operation');

    // Process with objects fetch operation.
    $configuration_fetcher = new MapsImportConfigurationFetcherMock($profile);
    $configuration_fetcher->process();
    $objects_fetcher = new MapsImportObjectsFetcherMock($profile);
    $objects_fetcher->process();

    // Test objects import.
    // Retreive values from database.
    $result = db_select('maps_import_objects', 'mio')
      ->fields('mio')
      ->orderBy('id', 'ASC')
      ->execute();

    $objects = array();
    foreach ($maps_import_objects as $row) {
      $objects[$row['id']] = $row;
    }

    foreach ($result as $i => $record) {
      foreach ($record as $name => $value) {
        if ($name != 'updated' && $name != 'inserted') {
          $this->assertEqual($value, $objects[$record->id][$name]);
        }
      }
    }

    // Test medias import.
    $result = db_select('maps_import_medias', 'mia')
      ->fields('mia')
      ->orderBy('id', 'ASC')
      ->execute();

    $medias = array();
    foreach ($maps_import_medias as $row) {
      $medias[$row['id']] = $row;
    }

    foreach ($result as $i => $record) {
      foreach ($record as $name => $value) {
        if ($name != 'inserted' && $name != 'updated') {
          $this->assertEqual($value, $medias[$record->id][$name]);
        }
      }
    }
  }

}
