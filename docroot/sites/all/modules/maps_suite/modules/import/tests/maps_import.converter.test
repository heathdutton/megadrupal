<?php

/**
 * @file
 * Tests suite for converters related to MaPS Import module.
 */

use Drupal\maps_import\Cache\Object\Converter as CacheConverter;

/**
 * Performs functional tests on MaPS Import / converters.
 *
 * @see DrupalWebTestCase
 */
class MapsImportConverterWebTestCase extends MapsImportWebTestCase {

  /**
   * SimpleTest getInfo.
   * @inheritdoc
   */
  public static function getInfo() {
    return array(
      'name' => 'MaPS Import Converter',
      'description' => "Tests the converter's functionnalities.",
      'group' => MapsSuiteTestInterface::TEST_GROUP,
    );
  }

  /**
   * Tests that the user can access the converter tab and the overview page.
   */
  public function testTabAccess() {
    $profile = $this->createProfile();

    // Test if no language.
    foreach (array_keys($this->converterTypes) as $converter_type) {
      $this->drupalGet('admin/maps-suite/profiles/' . $profile->getName() . '/' . $converter_type);
      $this->assertResponse(403, 'User can\'t acces the overview because no language has been defined');
    }

    // Add a langauge in configuration.
    $this->createLanguages($profile);

    // Test without converters.
    foreach (array_keys($this->converterTypes) as $converter_type) {
      $this->drupalGet('admin/maps-suite/profiles/' . $profile->getName() . '/' . $converter_type);
      $this->assertResponse(200);
      $this->assertRaw(t('There is no defined converter yet'), 'No converter defined');
    }
  }

  /**
   * Tests the overview page for the different types of converter.
   */
  public function testOverview() {
    $profile = $this->createProfile();
    $this->createLanguages($profile);

    foreach (array_keys($this->converterTypes) as $converter_type) {
      $this->drupalGet('admin/maps-suite/profiles/' . $profile->getName() . '/' . $converter_type);
      $this->assertResponse(200);
      $this->assertRaw(t('There is no defined converter yet'), 'No converter defined: passed');

      // Create a converter.
      $converter = $this->createConverter($profile, $converter_type);

      // Check if the converter appears in the overview page.
      $this->drupalGet('admin/maps-suite/profiles/' . $profile->getName() . '/' . $converter_type);
      $this->assertResponse(200);
      $this->assertNoRaw(t('There is no defined converter yet'), 'Converter defined: passed');
      $this->assertRaw(t('@title', array('@title' => $converter->getTitle())), 'Converter succesfully added.');
    }
  }

  /**
   * Tests the converter's weight in the overview form.
   */
  public function testWeight() {
    $profile = $this->createProfile();
    $this->createLanguages($profile);

    foreach (array_keys($this->converterTypes) as $converter_type) {
      // Create additional converters.
      $converters = array();
      $weight = array();
      for ($i = 0; $i < rand(2, self::MAX_CONVERTERS); $i++) {
        $converter = $this->createConverter($profile, $converter_type);
        $converters[] = $converter;
        $weight[$converter->getCid()] = $converter->getWeight();
      }

      $this->drupalGet('admin/maps-suite/profiles/' . $profile->getName() . '/' . $converter_type);
      $this->assertResponse(200);

      // Assert that the original weight are correctly used in the overview.
      foreach ($weight as $id => $value) {
        $name = 'converters[' . $id . '][weight]';
        $this->assertFieldByName($name, $value, format_string('The %name field is correctly set to %value.', array('%name' => $name, '%value' => $value)));
      }

      // Modify weight values.
      $edit = array();
      foreach ($converters as $converter) {
        $edit['converters[' . $converter->getCid() . '][weight]'] = rand(-50, 50);
      }

      $this->drupalPost('admin/maps-suite/profiles/' . $profile->getName() . '/' . $converter_type, $edit, t('Save'));
      foreach ($weight as $id => $value) {
        $name = 'converters[' . $id . '][weight]';
        $value = $edit[$name];
        $this->assertFieldByName($name, $value, format_string('The %name field is correctly set to %value.', array('%name' => $name, '%value' => $value)));
      }
    }
  }

  /**
   * Test adding a new converter.
   */
  public function testAdd() {
    $profile = $this->createProfile();
    $this->createLanguages($profile);

    foreach (array_keys($this->converterTypes) as $converter_type) {
      $this->drupalGet('admin/maps-suite/profiles/' . $profile->getName() . '/add/' . $converter_type);
      $this->assertResponse(200);

      // Generate random values.
      $name = $this->randomName(8);
      $entity_type = $this->randomEntityType($profile, $converter_type);

      // Create a new converter.
      $edit = array(
        'title' => ucfirst($name),
        'description' => ucfirst($name),
        'uid' => $this->randomConverterUid($profile, $converter_type),
        'uid_scope' => rand(1, 2),
        'entity_type' => $entity_type,
        'bundles[' . $entity_type . ']' => $this->randomBundle($entity_type),
      );

      $this->drupalPost('admin/maps-suite/profiles/' . $profile->getName() . '/add/' . $converter_type, $edit, t('Save'));
      $this->assertResponse(200);

      $this->assertRaw(ucfirst($name), 'Save successfull');
    }
  }

  /**
   * Test editing a converter.
   */
  public function testEdit() {
    $profile = $this->createProfile();
    $this->createLanguages($profile);

    foreach (array_keys($this->converterTypes) as $converter_type) {
      $converter = $this->createConverter($profile, $converter_type);

      $this->drupalGet('admin/maps-suite/profiles/' . $profile->getName() . '/' . $converter_type . '/' . $converter->getCid() . '/edit');

      $name = $this->randomName(8);
      // Creating new random values.
      $edit = array(
        'title' => ucfirst($name),
        'description' => ucfirst($name),
        'uid' => $this->randomConverterUid($profile, $converter_type),
        'uid_scope' => rand(1, 2),
      );

      // Asserting that the old values appears in the form before submission.
      foreach ($edit as $name => $value) {
        $getter = 'get' . maps_suite_drupal2camelcase($name);
        $value = call_user_func(array($converter, $getter));
        $this->assertFieldByName($name, $value, format_string('The %name field is correctly set to %value.', array('%name' => $name, '%value' => $value)));
      }

      // Entity type and bundle cannot be edited once the converter is created.
      $edit['entity_type'] = $converter->getEntityType();
      $edit['bundle'] = $converter->getBundle();

      // Submitting the new values.
      $this->drupalPost('admin/maps-suite/profiles/' . $profile->getName() . '/' . $converter_type . '/' . $converter->getCid() . '/edit', $edit, t('Save'));
      $this->assertResponse(200);

      $this->drupalGet('admin/maps-suite/profiles/' . $profile->getName() . '/' . $converter_type . '/' . $converter->getCid() . '/edit');
      $this->assertResponse(200);

      unset($edit['entity_type'], $edit['bundle']);
      foreach ($edit as $name => $value) {
        $this->assertFieldByName($name, $value, format_string('The %name field is correctly set to %value.', array('%name' => $name, '%value' => $value)));
      }
    }
  }

  /**
   * Test deleting a converter.
   */
  public function testDelete() {
    $profile = $this->createProfile();
    $this->createLanguages($profile);

    foreach (array_keys($this->converterTypes) as $converter_type) {
      // Create a random converter.
      $converter = $this->createConverter($profile, $converter_type);

      $this->drupalGet('admin/maps-suite/profiles/' . $profile->getName() . '/' . $converter_type . '/' . $converter->getCid() . '/delete');
      $this->assertResponse(200);
      $this->assertRaw(t('Are you sure you want to delete the converter %title ?', array('%title' => ucfirst($converter->getTitle()))), 'Title correctly set.');

      // Try deleting without launching the "delete entities" process.
      $edit = array(
        'mode' => 'unlink',
      );
      $this->drupalPost('admin/maps-suite/profiles/' . $profile->getName() . '/' . $converter_type . '/' . $converter->getCid() . '/delete', $edit, t('Delete'));
      $this->assertResponse(200);
      $this->assertRaw('There is no defined converter yet', 'The converter has been succesfully deleted.');
    }
  }

  /**
   * Test the media settings tab.
   */
  public function testMediaSettings() {
    include drupal_get_path('module', 'maps_import') . '/tests/files/maps_import_configuration.php';

    $profile = $this->createProfile();
    $this->createLanguages($profile);

    // Access the tab.
    $this->drupalGet('admin/maps-suite/profiles/' . $profile->getName() . '/settings/media');
    $this->assertResponse(200);

    $this->assertRaw(t('There is no media types defined.'));

    // We have to import the configuration first.
    $configuration_fetcher = new MapsImportConfigurationFetcherMock($profile);
    $configuration_fetcher->process();

    $media_types = $profile->getConfigurationTypes('media_type');
    $presets = $profile->getConfigurationTypes('image_preset');
    $preset = $presets[array_rand($presets)];

    $this->drupalGet('admin/maps-suite/profiles/' . $profile->getName() . '/settings/media');
    $this->assertResponse(200);
    $this->assertNoRaw(t('There is no media types defined.'));

    // Assert that there are all media types.
    foreach ($media_types as $media_type) {
      $this->assertRaw(t('@title', array('@title' => $media_type['title'])));
    }

    // Create random data for the form.
    $edit = array();
    foreach ($media_types as $media_type) {
      $edit['media_type[' . $media_type['id'] . '][path]'] = $this->randomName(8);
    }
    // Only images can have a preset.
    $edit['media_type[1][preset]'] = $preset['id'];

    $this->drupalPost('admin/maps-suite/profiles/' . $profile->getName() . '/settings/media', $edit, t('Save'));
    $this->assertResponse(200);

    // Finally, assert that the values has been correctly set.
    foreach ($media_types as $media_type) {
      $this->assertRaw($edit['media_type[' . $media_type['id'] . '][path]'], t('Path correctly set for image type @id.', array('@id' => $media_type['id'])));
    }
  }

}
