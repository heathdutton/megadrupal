<?php

/**
 * @file
 * Tests suite for media types configuration related to to MaPS Import module.
 */

/**
 * Performs functional tests on MaPS Import / Media types.
 *
 * @see DrupalWebTestCase
 */
class MapsImportMediaTypesWebTestCase extends MapsImportWebTestCase {

  /**
   * SimpleTest getInfo.
   * @inheritdoc
   */
  public static function getInfo() {
    return array(
      'name' => 'MaPS Import Media Types',
      'description' => 'Tests the mapping configuration for media types.',
      'group' => MapsSuiteTestInterface::TEST_GROUP,
    );
  }

  /**
   * Test tab access.
   *
   * Tests if the tab is visible or not, according to the existence
   * of media types in the MaPS SystemÂ® configuration.
   */
  public function testTabAccess() {
    $profile = $this->createProfile();

    $this->drupalGet('admin/maps-suite/profiles/' . $profile->getName() . '/media_types');
    $this->assertResponse(403, 'User cannot access tab because no configuration has been imported');

    $this->createMediaTypes($profile->getPid());

    $this->drupalGet('admin/maps-suite/profiles/' . $profile->getName() . '/media_types');
    $this->assertResponse(200);

    $this->assertNoRaw(t('Media types configuration is empty'), 'Configuration succesfully imported.');
  }

  /**
   * Tests the form submission.
   */
  public function testSettingsForm() {
    $profile = $this->createProfile();
    $media_types = $this->createMediaTypes($profile->getPid());

    $this->drupalGet('admin/maps-suite/profiles/' . $profile->getName() . '/media_types');
    $this->assertResponse(200);

    $i = 1;
    $edit = array();
    foreach ($media_types as $id => $media_type) {
      $edit['maps_import:media_types:' . $profile->getPid() . '[' . $i . '][media_types]'] = rand(0, count(maps_import_get_drupal_file_types()) - 1);
      $i++;
    }

    $this->drupalPost('admin/maps-suite/profiles/' . $profile->getName() . '/media_types', $edit, t('Save configuration'));
    $this->assertResponse(200);

    foreach (array_keys($media_types) as $id) {
      $name = 'maps_import:media_types:' . $profile->getPid() . '[' . $id . '][media_types]';
      $this->assertFieldByName($name, $edit[$name], format_string('The %name field is correctly set to %value.', array('%name' => $name, '%value' => $edit[$name])));
    }
  }
}
