<?php

/**
 * @file
 * Tests suite for Languages related to MaPS Import module.
 */

/**
 * Performs functional tests on MaPS Import / Languages.
 *
 * @see DrupalWebTestCase
 */
class MapsImportStatusWebTestCase extends MapsImportWebTestCase {

  /**
   * SimpleTest getInfo.
   * @inheritdoc
   */
  public static function getInfo() {
    return array(
      'name' => 'MaPS Import Status',
      'description' => 'Tests the status assignement.',
      'group' => MapsSuiteTestInterface::TEST_GROUP,
    );
  }

  /**
   * Test tab access.
   *
   * Tests if the tab is visible or not, according to the existence
   * of status in the MaPS System® configuration.
   */
  public function testTabAccess() {
    $profile = $this->createProfile();

    $this->drupalGet('admin/maps-suite/profiles/' . $profile->getName() . '/statuses');
    $this->assertResponse(403, 'User cannot access tab because no statuses has been imported');

    $this->createStatuses($profile->getPid());

    $this->drupalGet('admin/maps-suite/profiles/' . $profile->getName() . '/statuses');
    $this->assertResponse(200);

    // Check if there is languages in the MaPS System® configuration.
    $this->assertNoRaw(t('Access denied.'), 'Existing configuration: passed.');
  }

  /**
   * Test the statuses settings form submission.
   */
  public function testSettingsForm() {
    $profile = $this->createProfile();
    $statuses = $this->createStatuses($profile->getPid());

    $indexes = array_keys($statuses);
    shuffle($indexes);

    $i = 1;
    $edit = array();
    foreach ($indexes as $id) {
      $edit['maps_import:statuses:' . $profile->getPid() . '[' . $i . '][weight]'] = $id;
      $edit['maps_import:statuses:' . $profile->getPid() . '[' . $i . '][status]'] = rand(0, 1);
      $i++;
    }

    $this->drupalPost('admin/maps-suite/profiles/' . $profile->getName() . '/statuses', $edit, t('Save configuration'));
    $this->assertResponse(200);

    foreach ($indexes as $id) {
      $name = 'maps_import:statuses:' . $profile->getPid() . '[' . $id . '][status]';
      $value = $edit['maps_import:statuses:' . $profile->getPid() . '[' . $id . '][status]'];
      $this->assertFieldByName($name, $value, format_string('The %name field is correctly set to %value.', array('%name' => $name, '%value' => $value)));
    }
  }

  /**
   * Test the weight functionnality.
   */
  public function testWeight() {
    $profile = $this->createProfile();
    $statuses = $this->createStatuses($profile->getPid());

    $indexes = array_keys($statuses);
    $edit = array();
    $weight = array();
    $i = 1;

    // We set random weight.
    foreach ($indexes as $id) {
      $weight[$id] = $status_weight = rand(-10, 10);
      $edit['maps_import:statuses:' . $profile->getPid() . '[' . $i . '][weight]'] = $status_weight;
      $edit['maps_import:statuses:' . $profile->getPid() . '[' . $i . '][status]'] = rand(0, 1);
      $i++;
    }

    $this->drupalPost('admin/maps-suite/profiles/' . $profile->getName() . '/statuses', $edit, t('Save configuration'));
    $this->assertResponse(200);

    foreach ($weight as $id => $value) {
      $name = 'maps_import:statuses:' . $profile->getPid() . '[' . $id . '][weight]';
      $this->assertFieldByName($name, $value, format_string('The %name field is correctly set to %value.', array('%name' => $name, '%value' => $value)));
    }
  }

}
