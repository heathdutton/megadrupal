<?php

/**
 * @file
 * Tests suite for Web Services related to MaPS Import module.
 */

/**
 * Performs functional tests on MaPS Import / Web Services.
 *
 * @see DrupalWebTestCase
 */
class MapsImportWebServicesWebTestCase extends MapsImportWebTestCase {

  /**
   * SimpleTest getInfo.
   * @inheritdoc
   */
  public static function getInfo() {
    return array(
      'name' => 'MaPS Import Web services',
      'description' => 'Tests profile creation, edition and update.',
      'group' => MapsSuiteTestInterface::TEST_GROUP,
    );
  }

  /**
   * Test the profiles overview page when there is no defined profile.
   */
  public function testEmptyOverview() {
    $this->drupalGet('admin/maps-suite/profiles');
    $this->assertResponse(200);

    // Check if there is a message indicating that there is no existing profile.
    $this->assertRaw(t('There is no existing profile yet. Add a !link now.', array('!link' => l(t('new profile'), 'admin/maps-suite/profiles/add'))), 'No existing profile');
  }

  /**
   * Test the profiles overview page with defined profile.
   */
  public function testOverview() {
    // Add a new profile.
    $profile = $this->createProfile();

    $this->drupalGet('admin/maps-suite/profiles');
    $this->assertResponse(200);
    $this->assertNoRaw(t('There is no existing profile yet.'), 'Existing profile');
    $this->assertRaw($profile->getTitle(), 'Title found!');
    $this->assertRaw($profile->getPublicationId('Publication found!'));
    $this->assertRaw($profile->getRootObjectId('Root object found!'));
  }

  /**
   * Tests profile creation.
   */
  public function testCreate() {
    // Format data to fill the create form.
    $edit = (array) $this->randomProfileData();
    $edit['enabled[1]'] = (int) $edit['enabled'];
    unset($edit['weight'], $edit['options'], $edit['enabled']);

    // Submit the form.
    $this->drupalPost('admin/maps-suite/profiles/add', $edit, t('Save'));
    $this->assertResponse(200);
    $this->assertRaw(t('The profile @title has been created.', array('@title' => $edit['title'])), 'The new profile has been created');

    // Check if the newly created profile appears in the overview.
    $this->drupalGet('admin/maps-suite/profiles');
    $this->assertResponse(200);
    $this->assertRaw($edit['title'], 'New profile title found on the overview.');
  }

  /**
   * Test editing of an existing profile.
   */
  public function testEdit() {
    $profile = $this->createProfile();

    // Access the edit form.
    $this->drupalGet('admin/maps-suite/profiles/' . $profile->getName() . '/edit');
    $this->assertResponse(200);
    $this->assertRaw(t('@title', array('@title' => $profile->getTitle())), 'Page title was found on edit form.');

    // Check form values.
    $edit = $profile->toArray();
    $edit['enabled[1]'] = (int) $edit['enabled'];

    // Remove data that are not show on the edit form.
    $additional_data = array(
      'name',
      'enabled',
      'pid',
      'weight',
      'options',
      'statuses',
      'defaultLanguageId',
    );

    foreach ($additional_data as $index) {
      unset($edit[$index]);
    }

    // Check if the form has been succesfully filled.
    foreach ($edit as $name => $value) {
      $this->assertFieldByName($name, $value, format_string('The %name field is correctly set to %value.', array('%name' => $name, '%value' => $value)));
    }

    // Change values.
    $edit = (array) $this->randomProfileData($profile->getPid());
    $edit['enabled[1]'] = (int) $edit['enabled'];
    unset($edit['name'], $edit['weight'], $edit['options'], $edit['pid'], $edit['enabled']);

    // Submit the edit form.
    $this->drupalPost('admin/maps-suite/profiles/' . $profile->getName() . '/edit', $edit, t('Update'));
    $this->assertResponse(200);
    $this->assertRaw(t('The profile @title has been updated', array('@title' => $edit['title'])), 'Profile successfully updated!');

    // We check if the title has been correctly modified on the overview.
    $this->drupalGet('admin/maps-suite/profiles');
    $this->assertResponse(200);
    $this->assertRaw(t('@title', array('@title' => $edit['title'])), 'New page title was found on the overview.');

    // We try to edit our profile with an existing title.
    $this->drupalGet('admin/maps-suite/profiles/' . $profile->getName() . '/edit');
    $this->assertResponse(200);

    // Set the title to the old title.
    $old_title = $edit['title'];
    $profile = $this->createProfile();

    $edit = $profile->toArray();
    $edit['title'] = $old_title;
    $edit['enabled[1]'] = (int) $edit['enabled'];

    foreach ($additional_data as $index) {
      unset($edit[$index]);
    }

    // Post the edit form.
    $this->drupalPost('admin/maps-suite/profiles/' . $profile->getName() . '/edit', $edit, t('Update'));
    $this->assertRaw(t('The title @title is already in use.', array('@title' => $old_title)));
  }

  /**
   * Test the profile delete process.
   */
  public function testDelete() {
    $profile = $this->createProfile();

    // Access the delete page.
    $this->drupalGet('admin/maps-suite/profiles/' . $profile->getName() . '/delete');
    $this->assertResponse('200', 'User is allow to access the delete page');

    $this->assertRaw(t('Are you sure you want to delete the profile @title?', array('@title' => $profile->getTitle())), 'User is allowed to delete the profile');
    $this->drupalPost('admin/maps-suite/profiles/' . $profile->getName() . '/delete', array(), t('Delete'));

    // We need here to reset the Drupal static variable,
    // because the last Drupal POST call that clear this
    // static variable is called on a PHP instance apart, so the
    // data inside Drupal static variables still persist.
    drupal_static_reset('Drupal\\maps_import\\Cache\\Object\\Profile');

    $this->assertRaw(t('The profile @title has been deleted.', array('@title' => $profile->getTitle())));

    $this->assertResponse(200);
  }
}
