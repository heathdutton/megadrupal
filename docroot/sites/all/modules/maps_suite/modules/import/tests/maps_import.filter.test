<?php

/**
 * @file
 * Tests suite for Languages related to MaPS Import module.
 */

use Drupal\maps_import\Filter\Condition\Leaf\Object\ConfigurationType;
use Drupal\maps_import\Filter\Condition\Operator as Operator;
use Drupal\maps_import\Filter\Condition\Leaf\Object as ObjectCondition;
use Drupal\maps_import\Filter\Condition\Leaf\Media as MediaCondition;

/**
 * Performs functional tests on MaPS Import / Languages.
 *
 * @see DrupalWebTestCase
 */
class MapsImportFilterWebTestCase extends MapsImportWebTestCase {

  /**
   * SimpleTest getInfo.
   * @inheritdoc
   */
  public static function getInfo() {
    return array(
      'name' => 'MaPS Import Filter',
      'description' => 'Tests the filters management.',
      'group' => MapsSuiteTestInterface::TEST_GROUP,
    );
  }

  /**
   * Test condition overview form.
   */
  public function testOverview() {
    $profile = $this->createProfile();
    $this->createLanguages($profile);

    foreach (array_keys($this->converterTypes) as $converter_type) {
      $converter = $this->createConverter($profile, $converter_type);

      $this->drupalGet("admin/maps-suite/profiles/{$profile->getName()}/$converter_type/{$converter->getCid()}/filters");
      $this->assertResponse(200);
      $this->assertRaw(t('There is no condition defined yet.'));

      $filters_type = array('Operator', 'Condition');
      foreach ($filters_type as $filter_type) {
        $function = 'createFilter' . $filter_type;
        $filter = call_user_func(array($this, $function), $converter);

        $this->drupalGet("admin/maps-suite/profiles/{$profile->getName()}/$converter_type/{$converter->getCid()}/filters/{$filter->getId()}/delete");
        $this->assertResponse(200);
      }
    }
  }

  /**
   * Test filter operator add.
   */
  public function testAddOperator() {
    $profile = $this->createProfile();
    $this->createLanguages($profile);

    foreach (array_keys($this->converterTypes) as $converter_type) {
      $converter = $this->createConverter($profile, $converter_type);

      // Create 2 random filters for use as parents.
      $parents = $this->createRandomParents($converter, 'operator');

      foreach ($this->filterOperators as $filter_operator) {
        $this->drupalGet("admin/maps-suite/profiles/{$profile->getName()}/$converter_type/{$converter->getCid()}/filters/add_$filter_operator");
        $this->assertResponse(200);

        $edit = array(
          'weight' => rand(-10, 10),
        );
        $parent = $parents[array_rand($parents)];
        if (!is_null($parent)) {
          $edit['parent_id'] = $parent;
        }

        // Submit the add form.
        $this->drupalPost("admin/maps-suite/profiles/{$profile->getName()}/$converter_type/{$converter->getCid()}/filters/add_$filter_operator", $edit, t('Save'));
        $this->assertRaw(t('Operator @operator', array('@operator' => strtoupper($filter_operator))), 'Operator condition has been succesfully added');
      }

      // Retreive all conditions from the database.
      $conditions = $converter->getFilter()->getFlattenConditions();
      foreach ($conditions as $condition) {
        // Test weight and parent id.
        $this->assertFieldByName("filters[{$condition->getId()}][weight]", $condition->getWeight(), t('Condition %id: Weight succesfully set to %weight', array('%id' => $condition->getId(), '%weight' => $condition->getWeight())));
        $this->assertFieldByName("filters[{$condition->getId()}][parent_id]", $condition->getParentId(), t('Condition %id: Parent succesfully set %parent', array('%id' => $condition->getId(), '%parent' => $condition->getParentId())));
      }
    }
  }

  /**
   * Test filter operator edit.
   */
  public function testEditOperator() {
    $profile = $this->createProfile();
    $this->createLanguages($profile);

    foreach (array_keys($this->converterTypes) as $converter_type) {
      $converter = $this->createConverter($profile, $converter_type);

      // Create 2 random filters for use as parents.
      $parents = $this->createRandomParents($converter, 'operator');

      foreach ($this->filterOperators as $filter_operator) {
        $operator = $this->createFilterOperator($converter);

        $this->drupalGet("admin/maps-suite/profiles/{$profile->getName()}/$converter_type/{$converter->getCid()}/filters/{$operator->getId()}/edit");
        $this->assertResponse(200);

        $edit = array(
          'weight' => rand(-10, 10),
        );
        $parent = $parents[array_rand($parents)];
        if (!is_null($parent)) {
          $edit['parent_id'] = $parent;
        }

        $this->drupalPost("admin/maps-suite/profiles/{$profile->getName()}/$converter_type/{$converter->getCid()}/filters/add_$filter_operator", $edit, t('Save'));
        $this->assertRaw(t('Operator @operator', array('@operator' => strtoupper($filter_operator))), 'Operator condition has been succesfully edited');
        $this->assertFieldByName("filters[{$operator->getId()}][weight]", $operator->getWeight(), t('Condition %id: Weight succesfully set to %weight', array('%id' => $operator->getId(), '%weight' => $operator->getWeight())));
        $this->assertFieldByName("filters[{$operator->getId()}][parent_id]", $operator->getParentId(), t('Condition %id: Parent succesfully set %parent', array('%id' => $operator->getId(), '%parent' => $operator->getParentId())));
      }
    }
  }

  /**
   * Test filter condition add.
   */
  public function testAddCondition() {
    $profile = $this->createProfile();
    $this->createLanguages($profile);

    $configuration_fetcher = new MapsImportConfigurationFetcherMock($profile);
    $configuration_fetcher->process();

    foreach (array_keys($this->converterTypes) as $converter_type) {
      $converter = $this->createConverter($profile, $converter_type);

      // Create 2 random filters for use as parents.
      $parents = $this->createRandomParents($converter, 'operator');

      foreach ($this->conditionTypes[$converter_type] as $condition_type => $class) {
        $this->drupalGet("admin/maps-suite/profiles/{$profile->getName()}/$converter_type/{$converter->getCid()}/filters/add");
        $this->assertResponse(200);

        // First form step.
        $this->drupalPost("admin/maps-suite/profiles/{$profile->getName()}/$converter_type/{$converter->getCid()}/filters/add", array('type' => $condition_type), t('Continue'));
        $this->assertResponse(200);

        // Set form values.
        $edit = array(
          'weight' => rand(-10, 10),
        );
        $parent = $parents[array_rand($parents)];
        if (!is_null($parent)) {
          $edit['parent_id'] = $parent;
        }

        $config_row = $this->getRandomConfigurationEntry($profile, $condition_type);

        // We can encounter specific forms.
        // Configuration type.
        if ($condition_type == 'config_type') {
          $tmp = new ConfigurationType($converter);
          $criteria = array_rand($tmp->getOptions());
          $edit['criteria'] = $criteria;
        }
        // Object class.
        elseif ($condition_type == 'class') {
          $edit['at_least[]'] = array($config_row->id);
          $edit['at_most[]'] = array($config_row->id);
        }
        // Default.
        else {
          $edit['criteria'] = $config_row->id;
        }

        $this->drupalPost("admin/maps-suite/profiles/{$profile->getName()}/$converter_type/{$converter->getCid()}/filters/add/$condition_type", $edit, t('Finish'));
        $this->assertResponse(200);
        $this->assertRaw(t('The new criteria has been created.'), 'Condition succesfully created.');

        unset($config_row, $tmp);
      }
    }
  }

  /**
   * Test the edit functionnalities.
   * @todo
   */
  public function testEditCondition() {}

  /**
   * Delete a filter and the children if any.
   */
  public function testDelete() {
    $profile = $this->createProfile();
    $this->createLanguages($profile);

    foreach (array_keys($this->converterTypes) as $converter_type) {
      $converter = $this->createConverter($profile, $converter_type);

      // Try to delete a filter without any children.
      $filters_type = array('Operator', 'Condition');
      foreach ($filters_type as $filter_type) {
        $function = 'createFilter' . $filter_type;
        $filter = call_user_func(array($this, $function), $converter);

        $this->drupalGet("admin/maps-suite/profiles/{$profile->getName()}/$converter_type/{$converter->getCid()}/filters/{$filter->getId()}/delete");
        $this->assertResponse(200);
        $this->drupalPost("admin/maps-suite/profiles/{$profile->getName()}/$converter_type/{$converter->getCid()}/filters/{$filter->getId()}/delete", array(), t('Delete'));

        $this->assertNoRaw(t('@title', array('@title' => $filter->getLabel())), 'Operator succesfully deleted.');
      }

      // Try to delete a filter with children.
      // Create filter tree.
      $filter1 = $this->createFilterOperator($converter);
      $filter2 = $this->createFilterOperator($converter, $filter1->getId());
      $filter3 = $this->createFilterCondition($converter, $filter2->getId());

      $this->drupalPost("admin/maps-suite/profiles/{$profile->getName()}/$converter_type/{$converter->getCid()}/filters/{$filter1->getId()}/delete", array(), t('Delete'));
      $this->assertRaw(t('The condition has been deleted.'));
      $this->assertRaw(format_plural(2, 'A child condition was also deleted.', '@count children conditions were also deleted.'));
    }
  }

  /**
   * Test the matching process for object converters.
   */
  public function testObjectMatching() {
    $profile = $this->createProfile();
    $this->createLanguages($profile);

    // Test on object converter.
    $converter = $this->createConverter($profile, 'object');

    // Create random configuration.
    $configuration = $this->createRandomConfiguration($profile, 5);
    extract($configuration);

    // Create a tree of conditions.
    $conditions = array();
    $conditions[] = new ObjectCondition\Type($converter, array(
      'extra' => array(
        'criteria' => $type[1]['id'],
      ),
    ));

    $conditions[] = new Operator\OperatorOr($converter);
    $conditions[] = new ObjectCondition\Nature($converter, array(
      'extra' => array(
        'criteria' => $nature[1]['id'],
      ),
      'parent_id' => 2,
    ));
    $conditions[] = new ObjectCondition\ObjectClass($converter, array(
      'extra' => array(
        'criteria' => array(
          'at_least' => array($class[1]['id']),
          'at_most' => array($class[1]['id']),
        ),
      ),
      'parent_id' => 2,
    ));
    $conditions[] = new Operator\OperatorAnd($converter, array('parent_id' => 2));
    $conditions[] = new ObjectCondition\Nature($converter, array(
      'extra' => array(
        'criteria' => $nature[2]['id'],
      ),
      'parent_id' => 5,
    ));
    $conditions[] = new ObjectCondition\ObjectClass($converter, array(
      'extra' => array(
        'criteria' => array(
          'at_least' => array($class[1]['id'], $class[2]['id']),
          'at_most' => array(
            $class[1]['id'],
            $class[2]['id'],
            $class[3]['id'],
            $class[4]['id'],
          ),
        ),
      ),
      'parent_id' => 5,
    ));

    foreach ($conditions as $condition) {
      $condition->save();
    }
    $filter = $converter->getFilter();

    // Create test objects.
    $objects = array(
      0 => array(
        'type' => $type[2]['id'],
        'nature' => $nature[4]['id'],
        'classes' => array($class[4]['id']),
        'result' => FALSE,
      ),
      1 => array(
        'type' => $type[1]['id'],
        'nature' => $nature[4]['id'],
        'classes' => array($class[4]['id']),
        'result' => FALSE,
      ),
      2 => array(
        'type' => $type[1]['id'],
        'nature' => $nature[4]['id'],
        'classes' => array($class[1]['id']),
        'result' => TRUE,
      ),
      3 => array(
        'type' => $type[1]['id'],
        'nature' => $nature[4]['id'],
        'classes' => array(
          $class[1]['id'],
          $class[2]['id'],
          $class[3]['id'],
          $class[4]['id'],
        ),
        'result' => FALSE,
      ),
      4 => array(
        'type' => $type[1]['id'],
        'nature' => $nature[1]['id'],
        'classes' => array($class[4]['id']),
        'result' => TRUE,
      ),
      5 => array(
        'type' => $type[1]['id'],
        'nature' => $nature[2]['id'],
        'classes' => array($class[1]['id']),
        'result' => TRUE,
      ),
      6 => array(
        'type' => $type[1]['id'],
        'nature' => $nature[2]['id'],
        'classes' => array($class[1]['id'], $class[2]['id']),
        'result' => TRUE,
      ),
      7 => array(
        'type' => $type[1]['id'],
        'nature' => $nature[2]['id'],
        'classes' => array(
          $class[1]['id'],
          $class[2]['id'],
          $class[3]['id'],
          $class[4]['id'],
        ),
        'result' => TRUE,
      ),
      8 => array(
        'type' => $type[1]['id'],
        'nature' => $nature[2]['id'],
        'classes' => array($class[3]['id']),
        'result' => FALSE,
      ),
    );

    foreach ($objects as $_object) {
      $bool = $filter->checkConditions($_object);

      if ($_object['result']) {
        $this->assertTrue($bool);
      }
      else {
        $this->assertFalse($bool);
      }
    }
  }

  /**
   * Test the matching process for media converters.
   */
  public function testMediaMatching() {}

  /**
   * Create a random count of filters (between 1 and 10) and return the ids.
   *
   * Used to test the "parent id" functionnalities.
   *
   * @param string $type
   *   The filter type (condition or operator).
   *
   * @return array
   *   The ids of the generated filters.
   */
  public function createRandomParents($converter, $type) {
    $function = 'createFilter' . ucfirst($type);

    if (!method_exists($this, $function)) {
      return array();
    }

    $ids = array();
    for ($i = 0; $i <= rand(1, 10); $i++) {
      $filter = call_user_func(array($this, $function), $converter);
      $ids[] = $filter->getId();
    }

    return $ids;
  }

  /**
   * Create a random configuration of natures, types and classes.
   *
   * @param Profile $profile
   *   The MaPS Import profile.
   * @param int $count
   *   The number of each entry to create.
   *
   * @return array
   *   The configuration.
   */
  public function createRandomConfiguration($profile, $count) {
    $id = 1;

    $configuration = array();
    for ($i = 1; $i <= $count; $i++) {
      $configuration['nature'][$i] = $this->createConfigurationEntry($profile, 'object_nature', $id++);
      $configuration['type'][$i] = $this->createConfigurationEntry($profile, 'object_type', $id++);
      $configuration['class'][$i] = $this->createConfigurationEntry($profile, 'class', $id++);
    }

    return $configuration;
  }
}
