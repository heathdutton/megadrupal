<?php

/**
 * @file
 * Tests suite for the library mapping process.
 */

use Drupal\maps_import\Mapping\Library\Library as LibraryMapping;

/**
 * Performs functional tests on MaPS Import / Library Mapping.
 *
 * @see DrupalWebTestCase
 */
class MapsImportLibraryWebTestCase extends MapsImportWebTestCase {

  /**
   * SimpleTest getInfo.
   * @inheritdoc
   */
  public static function getInfo() {
    return array(
      'name' => 'MaPS Import Library',
      'description' => 'Tests the library mapping functionnalities.',
      'group' => MapsSuiteTestInterface::TEST_GROUP,
    );
  }

  /**
   * SimpleTest setUp.
   * @inheritdoc
   */
  public function setUp(array $modules = array(), array $permissions = array()) {
    $permissions[] = 'access site in maintenance mode';
    parent::setUp($modules, $permissions);
  }

  /**
   * Test the library mapping overview.
   */
  public function testOverview() {
    include drupal_get_path('module', 'maps_import') . '/tests/files/maps_import_configuration.php';

    $profile = $this->createProfile();
    $this->createLanguages($profile);

    // Because no configuration has been imported, there must be no library.
    $this->drupalGet("admin/maps-suite/profiles/{$profile->getName()}/libraries");
    $this->assertResponse(200);
    $this->assertRaw('There is no defined library yet. You may try to process the configuration import.');

    // Import configuration and objects.
    $configuration_fetcher = new MapsImportConfigurationFetcherMock($profile);
    $configuration_fetcher->process();

    $objects_fetcher = new MapsImportObjectsFetcherMock($profile);
    $objects_fetcher->process();

    // Check if there is libraries in the overview.
    $this->drupalGet("admin/maps-suite/profiles/{$profile->getName()}/libraries");
    $this->assertResponse(200);
    $this->assertNoRaw('There is no defined library yet. You may try to process the configuration import.');

    // Parse configuration.
    foreach ($maps_import_configuration as $configuration_row) {
      if ($configuration_row['type'] == 'attribute' && $configuration_row['id_language'] == $profile->getDefaultLanguage()) {
        $data = unserialize($configuration_row['data']);

        // Only test lirary attributes.
        if ($data['attribute_type_code'] == 'library') {
          $this->assertRaw($configuration_row['title'], t('Library @title was found !', array('@title' => $configuration_row['title'])));
        }
      }
    }
  }

  /**
   * Test the library mapping add form.
   */
  public function testAddAndEdit() {
    $profile = $this->createProfile();
    $this->createLanguages($profile);

    // Create a random library.
    $library = $this->createConfigurationEntry($profile, 'attribute', NULL, NULL, array('attribute_type_code' => 'library'));
    $this->createLibraryItem($profile, $library['id']);

    $this->drupalGet("admin/maps-suite/profiles/{$profile->getName()}/libraries");
    $this->assertResponse(200);
    $this->assertRaw($library['title'], 'Library found.');

    $this->drupalGet("admin/maps-suite/profiles/{$profile->getName()}/libraries/{$library['id']}/add");
    $this->assertResponse(200);

    // Select a random vocabulay to map with;
    $vocabularies = taxonomy_get_vocabularies();
    $vocabulary = $vocabularies[array_rand($vocabularies)];

    $this->drupalPost("admin/maps-suite/profiles/{$profile->getName()}/libraries/{$library['id']}/add", array('vocabulary' => $vocabulary->vid), t('Save'));
    $this->assertResponse(200);
    $this->assertRaw($vocabulary->name, t('Library correctly map with vocabulary @vocabulary', array('@vocabulary' => $vocabulary->name)));

    // Edit the mapping.
    $edit_vocabulary = new stdClass();
    $edit_vocabulary->name = $this->randomName(8);
    $edit_vocabulary->machine_name = $this->randomName(8);
    taxonomy_vocabulary_save($edit_vocabulary);

    $this->drupalGet("admin/maps-suite/profiles/{$profile->getName()}/libraries/{$library['id']}/edit");
    $this->assertResponse(200);

    $this->drupalPost("admin/maps-suite/profiles/{$profile->getName()}/libraries/{$library['id']}/edit", array('vocabulary' => $edit_vocabulary->vid), t('Save'));
    $this->assertResponse(200);
    $this->assertRaw($edit_vocabulary->name, t('Library correctly map with vocabulary @vocabulary', array('@vocabulary' => $edit_vocabulary->name)));
  }

  /**
   * Test the library delete form.
   */
  public function testDelete() {
    $profile = $this->createProfile();
    $this->createLanguages($profile);

    // Create a random library mapping.
    $library_mapping = $this->createLibraryMapping($profile);
    extract($library_mapping);

    $this->drupalGet("admin/maps-suite/profiles/{$profile->getName()}/libraries");
    $this->assertRaw($library['title'], t('Library found.'));
    $this->assertRaw($vocabulary->name, t('Vocabulary found.'));

    $this->drupalGet("admin/maps-suite/profiles/{$profile->getName()}/libraries/{$library['id']}/delete");
    $this->assertResponse(200);
    $this->assertRaw(t('Are you sure you want to delete the library mapping for library %library ?', array('%library' => $library['id'])));

    $this->drupalPost("admin/maps-suite/profiles/{$profile->getName()}/libraries/{$library['id']}/delete", array(), t('Delete'));
    $this->assertResponse(200);

    $this->assertRaw(t('The library mapping was successfully deleted!'));
    $this->assertNoRaw($vocabulary->name, t('Vocabulary not found.'));
  }

  /**
   * Test the library mapping process.
   */
  public function testMapping() {
    $profile = $this->createProfile();
    $this->createLanguages($profile);

    // Create a random library mapping.
    $library_mapping = $this->createLibraryMapping($profile);
    extract($library_mapping);

    // Launch the mapping process.
    $library_mapping = new LibraryMapping($profile);
    $library_mapping->process();

    // Ensure that the taxonomy vocabulary has been correctly filled.
    $result = db_select('maps_import_libraries', 'libraries')
      ->fields('libraries')
      ->condition('id_attribute', $library['id'])
      ->execute()
      ->fetchAllAssoc('id', \PDO::FETCH_ASSOC);

    foreach ($result as $row) {
      // Check if the item has been add in {maps_import_library_index}
      $item = db_select('maps_import_library_index', 'library_index')
        ->fields('library_index')
        ->condition('id', $row['id'])
        ->execute()
        ->fetchAssoc();

      $term = taxonomy_term_load($item['tid']);
      $this->assertTrue($term, t('Taxonomy term %value succesfully created.', array('%value' => $row['value'])));
    }
  }

  /**
   * Test the terms deletion functionnality.
   */
  public function testDeleteTerms() {
    $this->deleteOperation('deleteTerms', 'taxonomy_term_data');
  }

  /**
   * Test the vocabularies deletion functionnality.
   */
  public function testDeleteVocabularies() {
    $this->deleteOperation('deleteVocabularies', 'taxonomy_vocabulary');
  }

  /**
   * Tests the given static operation from Library.
   *
   * Tests that the related table has been processed.
   *
   * @param string $operation
   *   The operation to process.
   * @param string $table
   *   The table to check.
   */
  protected function deleteOperation($operation, $table) {
    $profile = $this->createProfile();
    $this->createLanguages($profile);

    // Create a random library mapping.
    $library_mapping = $this->createLibraryMapping($profile);
    extract($library_mapping);

    // Launch the mapping process.
    $library_mapping = new LibraryMapping($profile);
    $library_mapping->process();

    // Deleting the terms.
    call_user_func_array('Drupal\maps_import\Mapping\Library\Library::' . $operation, array($profile));

    $result = db_select($table, 'taxonomy_table')
      ->fields('taxonomy_table')
      ->condition('vid', $vocabulary->vid)
      ->execute()
      ->fetchAll();

    $deleted = empty($result);
    $this->assertTrue($deleted, t('Operation %operation completed with success.', array('%operation' => $operation)));
  }

}
