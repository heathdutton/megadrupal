<?php

/**
 * @file
 * Installation functions for MaPS Import module.
 */

/**
 * Implements hook_enable().
 */
function maps_import_enable() {
  // @todo move that to hook_modules_enabled() to react if
  // Entity Translation module is installed.
  // @todo remove dependency on Entity Translation.
  // @@todo invoke the hook_modules_enabled() in current function
  // only if Entity Translation is already enabled.
  module_load_include('module', 'maps_import');
  $types = variable_get('entity_translation_entity_types', array());

  foreach (maps_import_entity_translation_default() as $type) {
    $types[$type] = $type;
  }

  variable_set('entity_translation_entity_types', $types);
}

/**
 * Implements hook_schema().
 */
function maps_import_schema() {
  $schema = array();

  $schema['maps_import_profile'] = array(
    'description' => 'Stores the MaPS Import profiles.',
    'fields' => array(
      'pid' => array(
        'description' => 'The primary identifier for a profile.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'no export' => TRUE,
      ),
      'name' => array(
        'description' => 'The machine name of this profile.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'title' => array(
        'description' => 'The title of this profile, always treated as non-markup plain text.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'translatable' => TRUE,
      ),
      'fetch_method' => array(
        'description' => 'The fetch method to use.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => 'ws',
      ),
      'token' => array(
        'description' => 'The security token used to authenticate with MaPS System® Web Services.',
        'type' => 'varchar',
        'length' => 40,
        'not null' => FALSE,
        'default' => '',
      ),
      'publication_id' => array(
        'description' => 'The MaPS System® publication ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => 0,
      ),
      'root_object_id' => array(
        'description' => 'ID of the MaPS System® root object.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => 0,
      ),
      'preset_group_id' => array(
        'description' => 'ID of the MaPS System® preset group.',
        'type' => 'int',
        'unsigned' => TRUE,
      ),
      'url' => array(
        'description' => 'The MaPS System® Web Services URL.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => '',
      ),
      'media_directory' => array(
        'description' => 'The relative path to the media inside the Drupal file system (public or private).',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
      ),
      'media_accessibility' => array(
        'description' => 'The medias accessibility.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => 'public',
      ),
      'max_objects_per_request' => array(
        'description' => 'Maximum number of objects for each HTTP request.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'max_objects_per_op' => array(
        'description' => 'Maximum number of objects to process per mapping operation.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'format' => array(
        'description' => 'The response format.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'enabled' => array(
        'description' => 'Boolean indicating whether the profile is active.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The weight of this profile.',
      ),
      'web_template' => array(
        'description' => 'The name of the web template to use in the MaPS System® Webervices parameters.',
        'type' => 'varchar',
        'not null' => FALSE,
        'length' => 255,
        'default' => '',
      ),
      'options' => array(
        'description' => 'The serialized options related to target entity/bundle.',
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
      ),
      'objects_file' => array(
        'description' => 'The MaPS objects file.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'configuration_file' => array(
        'description' => 'The MaPS configuration file.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
    ),
    'indexes' => array(
      'weight' => array('weight'),
    ),
    'unique keys' => array(
      'title' => array('title'),
      'name' => array('name'),
    ),
    'primary key' => array('pid'),
    // CTools exportable.
    'export' => array(
      'key' => 'name',
      // 'key name' => 'title',
      'admin_title' => 'title',
      'primary key' => 'pid',
      'identifier' => 'profile',
      'bulk export' => TRUE,
      'object' => 'Drupal\\maps_import\\Plugins\\CTools\\ExportUI\\ProfileExportable',
      'default hook' => 'maps_import_default_profiles',
      'create callback' => 'maps_import_profile_export_create',
      'load callback' => 'maps_import_profile_export_load',
      'load multiple callback' => 'maps_import_profile_export_load_multiple',
      'load all callback' => 'maps_import_profile_export_load_all',
      'save callback' => 'maps_import_profile_export_save',
      'delete callback' => 'maps_import_profile_export_delete',
      'export callback' => 'maps_import_profile_export',
      'status callback' => 'maps_import_profile_export_set_status',
      // 'to hook code callback' => 'maps_import_profile_export_to_hook_code',
      // We have our own cache.
      'cache defaults' => FALSE,
      'default cache bin' => 'cache_maps_suite',
      'api' => array(
        'owner' => 'maps_import',
        'api' => 'maps_import_profile_default',
        'minimum_version' => 1,
        'current_version' => 1,
      ),
    ),
  );

  $schema['maps_import_configuration'] = array(
    'description' => 'Stores the raw MaPS System® configuration.',
    'fields' => array(
      'pid' => array(
        'description' => 'The {maps_import_profile} profile ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'type' => array(
        'description' => 'The type of configuration data.',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
      ),
      'id' => array(
        'description' => 'The MaPS System® ID if applicable.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'code' => array(
        'description' => 'The MaPS System® code if applicable.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'id_language' => array(
        'description' => 'The MaPS System® language ID if applicable.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'title' => array(
        'description' => 'The MaPS System® title if applicable.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'data' => array(
        'description' => 'The serialized data.',
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
      ),
    ),
    'indexes' => array(
      'pid' => array('pid'),
      'type' => array('type'),
      'id' => array('id'),
    ),
    'primary key' => array('pid', 'type', 'id', 'id_language'),
    'foreign keys' => array(
      'maps_import_profile' => array(
        'table' => 'maps_import_profile',
        'columns' => array('pid' => 'pid'),
      ),
    ),
  );

  $schema['maps_import_libraries'] = array(
    'description' => 'Stores the MaPS System® library items.',
    'fields' => array(
      'pid' => array(
        'description' => 'The {maps_import_profile} profile ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'id' => array(
        'description' => 'The MaPS System® ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'code' => array(
        'description' => 'The MaPS System® code.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'id_attribute' => array(
        'description' => 'The MaPS System® related attribute ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'id_language' => array(
        'description' => 'The MaPS System® language ID if applicable.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'value' => array(
        'description' => 'The item value.',
        'type' => 'text',
        'not null' => TRUE,
      ),
    ),
    'indexes' => array(
      'pid' => array('pid'),
      'id_attribute' => array('id_attribute'),
      'id' => array('id'),
    ),
    'primary key' => array('pid', 'id', 'id_attribute', 'id_language'),
    'foreign keys' => array(
      'maps_import_profile' => array(
        'table' => 'maps_import_profile',
        'columns' => array('pid' => 'pid'),
      ),
    ),
  );

  $schema['maps_import_library_map'] = array(
    'description' => 'Stores the entity types/bundles affected to a library.',
    'fields' => array(
      'pid' => array(
        'description' => 'The {maps_import_profile} profile ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'id_attribute' => array(
        'description' => 'The MaPS System® related attribute ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'vocabulary' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => FALSE,
        'default' => NULL,
      ),
    ),
    'indexes' => array(
      'pid' => array('pid'),
    ),
    'primary key' => array('pid', 'id_attribute'),
    'foreign keys' => array(
      'maps_import_profile' => array(
        'table' => 'maps_import_profile',
        'columns' => array('pid' => 'pid'),
      ),
    ),
  );

  $schema['maps_import_library_index'] = array(
    'description' => 'Stores the mapping between MaPS System® library items and entity IDs.',
    'fields' => array(
      'pid' => array(
        'description' => 'The {maps_import_profile} profile ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'id_attribute' => array(
        'description' => 'The MaPS System® related attribute ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'id' => array(
        'description' => 'The MaPS System® ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'id_language' => array(
        'description' => 'The MaPS System® language ID if applicable.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'tid' => array(
        'description' => 'The taxonomy term ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array(
      'pid' => array('pid'),
      'pid_id_attribute' => array('pid', 'id_attribute'),
    ),
    'primary key' => array('pid', 'id_attribute', 'id', 'id_language', 'tid'),
    'foreign keys' => array(
      'maps_import_profile' => array(
        'table' => 'maps_import_profile',
        'columns' => array('pid' => 'pid'),
      ),
      'maps_import_library_map' => array(
        'table' => 'maps_import_library_map',
        'columns' => array(
          'pid' => 'pid',
          'id_attribute' => 'id_attribute',
        ),
      ),
    ),
  );

  $schema['maps_import_converter'] = array(
    'description' => 'Stores the converters settings.',
    'fields' => array(
      'cid' => array(
        'description' => 'The {maps_import_converter} converter ID.',
        'type' => 'serial',
        'not null' => TRUE,
        'no export' => TRUE,
      ),
      'pid' => array(
        'description' => 'The {maps_import_profile} profile ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'no export' => TRUE,
      ),
      'name' => array(
        'description' => 'The human-readable name of this converter.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'title' => array(
        'description' => 'The title of the converter.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
        'translatable' => TRUE,
      ),
      'description' => array(
        'description' => 'A description of the converter for the admin interface.',
        'type' => 'varchar',
        'length' => 255,
        'default' => '',
      ),
      'uid' => array(
        'description' => 'The unique identifier for fetched objects.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'uid_scope' => array(
        'description' => 'The scope for the unique identifier.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'entity_type' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'bundle' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'options' => array(
        'description' => 'The serialized options related to target entity/bundle.',
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The weight of this converter.',
      ),
      'class' => array(
        'description' => 'The converter class.',
        'type' => 'varchar',
        'length' => 255,
        'default' => 'Drupal\\\\maps_import\\\\Converter\\\\Object',
        'no export' => TRUE,
      ),
      'parent_id' => array(
        'description' => 'The parent converter id.',
        'default' => 0,
        'length' => 10,
        'type' => 'int',
        'no export' => TRUE,
      ),
    ),
    'indexes' => array(
      'pid' => array('pid'),
      'weight' => array('weight'),
    ),
    'unique keys' => array(
      'pid_name' => array('pid', 'name'),
    ),
    'primary key' => array('cid', 'pid'),
    'foreign keys' => array(
      'maps_import_profile' => array(
        'table' => 'maps_import_profile',
        'columns' => array('pid' => 'pid'),
      ),
    ),
  );

  $schema['maps_import_converter_conditions'] = array(
    'description' => 'Stores the converters conditions.',
    'fields' => array(
      'id' => array(
        'description' => 'The {maps_import_converter_conditions} primary key.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'cid' => array(
        'description' => 'The {maps_import_converter} converter ID.',
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
      ),
      'parent_id' => array(
        'description' => 'The parent condition ID if any.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'type' => array(
        'description' => 'The type of the condition.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'class' => array(
        'description' => 'The converter condition class.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'extra' => array(
        'description' => 'The serialized extra data.',
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The weight of this condition.',
      ),
    ),
    'indexes' => array(
      'weight' => array('weight'),
    ),
    'primary key' => array('id'),
    'foreign keys' => array(
      'maps_import_converter' => array(
        'table' => 'maps_import_converter',
        'columns' => array('cid' => 'cid', 'pid' => 'pid'),
      ),
      'maps_ws_profile' => array(
        'table' => 'maps_import_profile',
        'columns' => array('pid' => 'pid'),
      ),
    ),
  );

  $schema['maps_import_objects'] = array(
    'description' => 'Stores the fetched objects.',
    'fields' => array(
      'id' => array(
        'description' => 'The MaPS System® ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'pid' => array(
        'description' => 'The {maps_import_profile} profile ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'parent_id' => array(
        'description' => 'The object parent ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'source_id' => array(
        'description' => 'The object origin ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'code' => array(
        'description' => 'The MaPS System® code.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => '',
      ),
      'nature' => array(
        'description' => 'The object nature.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'type' => array(
        'description' => 'The object type.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'status' => array(
        'description' => 'The object status.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'weight' => array(
        'description' => 'The object weight.',
        'type' => 'int',
        'unsigned' => FALSE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'updated' => array(
        'description' => 'The last object update time.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'classes' => array(
        'description' => 'The object classes.',
        'type' => 'blob',
        'size' => 'big',
        'not null' => FALSE,
        'serialize' => TRUE,
      ),
      'attributes' => array(
        'description' => 'The object attributes.',
        'type' => 'blob',
        'size' => 'big',
        'not null' => FALSE,
        'serialize' => TRUE,
      ),
      'inserted' => array(
        'description' => 'The Unix timestamp when the object was saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'config_type' => array(
        'description' => 'The related configuration type, when the object is added by the configuration stream.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => FALSE,
        'default' => NULL,
      ),
    ),
    'indexes' => array(
      'inserted' => array('inserted'),
    ),
    'primary key' => array('id', 'pid'),
    'foreign keys' => array(
      'maps_ws_profile' => array(
        'table' => 'maps_import_profile',
        'columns' => array('pid' => 'pid'),
      ),
    ),
  );

  $schema['maps_import_links'] = array(
    'description' => 'Stores the fetched links.',
    'fields' => array(
      'id' => array(
        'description' => 'The {maps_import_links} primary key. It should be replaced by the MaPS link ID in a near future, and be available to use by {maps_link_ids} table.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'pid' => array(
        'description' => 'The {maps_import_profile} profile ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'type_id' => array(
        'description' => 'The MaPS System® link type ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'source_id' => array(
        'description' => 'The source object ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'target_id' => array(
        'description' => 'The target object ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'count' => array(
        'description' => 'The object status.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'inserted' => array(
        'description' => 'The Unix timestamp when the object was saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array(
      'pid' => array('pid'),
    ),
    'primary key' => array('id'),
    'foreign keys' => array(
      'maps_import_profile' => array(
        'table' => 'maps_import_profile',
        'columns' => array('pid' => 'pid'),
      ),
    ),
  );

  $schema['maps_import_medias'] = array(
    'description' => 'Stores the medias.',
    'fields' => array(
      'id' => array(
        'description' => 'The MaPS media id.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'pid' => array(
        'description' => 'The {maps_import_profile} profile ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'extension' => array(
        'description' => 'The file extension.',
        'type' => 'varchar',
        'length' => 4,
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'The MaPS media type.',
        'type' => 'int',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'url' => array(
        'description' => 'The media URL.',
        'type' => 'varchar',
        'length' => 182,
        'not null' => TRUE,
      ),
      'weight' => array(
        'description' => 'The file weight.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ),
      'filename' => array(
        'description' => 'The file name.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
      ),
      'attributes' => array(
        'description' => 'The media attributes',
        'type' => 'blob',
        'size' => 'big',
        'not null' => TRUE,
        'serialize' => TRUE,
      ),
      'updated' => array(
        'description' => 'The last object update time.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'inserted' => array(
        'description' => 'The Unix timestamp when the media was saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array(
      'pid' => array('pid'),
    ),
    'primary key' => array('id', 'pid'),
    'foreign keys' => array(
      'maps_import_profile' => array(
        'table' => 'maps_import_profile',
        'columns' => array('pid' => 'pid'),
      ),
    ),
  );

  $schema['maps_import_object_media'] = array(
    'description' => 'Stores the association between objects and medias.',
    'fields' => array(
      'object_id' => array(
        'description' => 'The MaPS media id.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'media_id' => array(
        'description' => 'The MaPS media id.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'pid' => array(
        'description' => 'The {maps_import_profile} profile ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'foreign keys' => array(
      'maps_import_objects' => array(
        'table' => 'maps_import_objects',
        'columns' => array('id' => 'id'),
      ),
      'maps_import_medias' => array(
        'table' => 'maps_import_medias',
        'columns' => array('id' => 'id'),
      ),
    ),
  );

  $schema['maps_import_mapping_item'] = array(
    'description' => 'Stores the mapping settings.',
    'fields' => array(
      'id' => array(
        'description' => 'The {maps_import_mapping_item} primary key.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'cid' => array(
        'description' => 'The converter ID.',
        'type' => 'varchar',
        'length' => 15,
        'not null' => FALSE,
        'default' => '',
      ),
      'property_id' => array(
        'type' => 'varchar',
        'description' => 'The property ID of source object.',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'field_name' => array(
        'type' => 'varchar',
        'description' => 'The field identifier of target entity.',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'static' => array(
        'description' => 'Boolean indicating whether the mapped value is static.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'required' => array(
        'description' => 'Boolean indicating whether the mapped field is required.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The weight of the mapping.',
      ),
      'options' => array(
        'description' => 'The serialized extra options.',
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
      ),
      'type' => array(
        'description' => 'The converter type.',
        'type' => 'varchar',
        'length' => 128,
        'default' => 'object',
      ),
    ),
    'primary key' => array('id', 'type'),
    'indexes' => array(
      'cid' => array('cid'),
      'weight' => array('weight'),
    ),
    'foreign keys' => array(
      'maps_import_converter' => array(
        'table' => 'maps_import_converter',
        'columns' => array('cid' => 'cid'),
      ),
    ),
  );

  $schema['maps_import_entities'] = array(
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'description' => 'The primary key.',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
      'entity_type' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'bundle' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'uid' => array(
        'description' => 'The source object unique ID.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'uid_scope' => array(
        'description' => 'The scope for the unique identifier.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'entity_id' => array(
        'description' => 'The target entity ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'id_language' => array(
        'description' => 'The MaPS System® language ID if applicable.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'pid' => array(
        'description' => 'The {maps_import_profile} profile ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'cid' => array(
        'description' => 'The {maps_import_converter} converter ID.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'indexes' => array(
      'uid_entity_scope_pid_bundle' => array(
        'uid',
        'entity_type',
        'uid_scope',
        'pid',
        'bundle',
      ),
    ),
    'primary key' => array('id'),
    'foreign keys' => array(
      'maps_import_profile' => array(
        'table' => 'maps_import_profile',
        'columns' => array('pid' => 'pid'),
      ),
      'maps_import_converter' => array(
        'table' => 'maps_import_converter',
        'columns' => array('cid' => 'cid', 'pid' => 'pid'),
      ),
    ),
  );

  $schema['maps_import_object_ids'] = _maps_import_create_maps_entity_ids_table();

  $schema['maps_import_media_ids'] = _maps_import_create_maps_entity_ids_table();

  return $schema;
}

/**
 * Create an array that represents a MaPS entity ids table.
 *
 * @return array
 *   The table schema.
 */
function _maps_import_create_maps_entity_ids_table() {
  return array(
    'fields' => array(
      'maps_id' => array(
        'description' => 'The MaPS Sytem entity identifier.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'correspondence_id' => array(
        'description' => 'The correspondence id form {maps_import_entities} table.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'updated' => array(
        'description' => 'The Unix timestamp when the object was saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('maps_id', 'correspondence_id'),
    'foreign keys' => array(
      'correspondence_id' => array(
        'table' => 'maps_import_entities',
        'columns' => array('id' => 'id'),
      ),
    ),
  );
}

/**
 * Implements hook_uninstall().
 *
 * @todo remove profiles and converters.
 * @todo add settings to choose the deletion mode on uninstall.
 */
function maps_import_uninstall() {
  variable_del('maps_import_lock');
  variable_del('maps_import_log_drush');
  variable_del('maps_import_log_drush_global_notifications');
  variable_del('maps_import_log_emails');
  variable_del('maps_import_log_subject');
  variable_del('maps_import_log_message');
  variable_del('maps_import_log_manual');
  variable_del('maps_import_log_template');

  $or = db_or()
    ->condition('name', 'maps_import:media_types:%', 'LIKE')
    ->condition('name', 'maps_import:validators:%', 'LIKE')
    ->condition('name', 'maps_import:statuses:%', 'LIKE')
    ->condition('name', 'maps_import:languages:%', 'LIKE');

  $result = db_select('variable')
    ->fields('variable', array('name'))
    ->condition($or)
    ->execute();

  foreach ($result as $row) {
    variable_del($row->name);
  }
}

/**
 * Implements hook_update_N().
 *
 * Add a "name" column in the {maps_import_profile} table to play
 * nicely with CTools exportable.
 */
function maps_import_update_7000() {
  db_add_field(
    'maps_import_profile',
    'name',
    array(
      'description' => 'The human-readable name of this profile.',
      'type' => 'varchar',
      'length' => 255,
      'not null' => TRUE,
      'default' => '',
    ),
    array(
      'unique keys' => array('name' => array('name')),
    ));

  $result = db_query('SELECT * FROM {maps_import_profile}');

  foreach ($result as $row) {
    db_query('UPDATE {maps_import_profile} SET name = :name WHERE pid = :pid', array(
      ':name' => preg_replace('/[^a-z0-9_]+/', '_', drupal_strtolower($row->title)),
      ':pid' => $row->pid,
    ));
  }
}

/**
 * Implements hook_update_N().
 *
 * Add an "updated" column in the {maps_import_medias} table to
 * check the last version of the media.
 */
function maps_import_update_7001() {
  db_add_field(
    'maps_import_medias',
    'updated',
    array(
      'description' => 'The last media update time.',
      'type' => 'int',
      'unsigned' => TRUE,
      'not null' => TRUE,
      'default' => 0,
    )
  );
}

/**
 * Implements hook_update_N().
 *
 * Add a "name" field in {maps_import_converter} table and
 * generate values for this field for old rows.
 */
function maps_import_update_7002() {
  $spec = array(
    'description' => 'The human-readable name of this converter.',
    'type' => 'varchar',
    'length' => 255,
    'not null' => TRUE,
    'default' => '',
  );

  db_add_field(
    'maps_import_converter',
    'name',
    $spec
  );

  $result = db_query('SELECT * FROM {maps_import_converter}');

  foreach ($result as $row) {
    $name = preg_replace('/[^a-z0-9_]+/', '_', drupal_strtolower($row->title));
    if ($row->parent_id > 0) {
      $name .= time();
    }

    db_query('UPDATE {maps_import_converter} SET name = :name WHERE cid = :cid', array(
      ':name' => $name,
      ':cid' => $row->cid,
    ));
  }

  db_change_field(
    'maps_import_converter',
    'name',
    'name',
    $spec,
    array(
      'unique keys' => array(
        'pid_name' => array('pid', 'name'),
      ),
    )
  );

}

/**
 * Implements hook_update_N().
 *
 * Add a "pid" field in the {maps_import_object_media} table.
 */
function maps_import_update_7003() {
  db_add_field(
    'maps_import_object_media',
    'pid',
    array(
      'description' => 'The {maps_import_profile} profile ID.',
      'type' => 'int',
      'unsigned' => TRUE,
      'not null' => TRUE,
      'default' => 0,
    )
  );
}

/**
 * Implements hook_update_N().
 *
 * Set values for the newly created "pid" field
 * in the {maps_import_object_media} table.
 */
function maps_import_update_7004() {
  $result = db_query('SELECT * FROM {maps_import_objects}');

  foreach ($result as $row) {
    db_query('UPDATE {maps_import_object_media} SET pid = :pid where object_id = :object_id', array(
      ':pid' => $row->pid,
      ':object_id' => $row->id,
    ));
  }
}

/**
 * Implements hook_update_N().
 *
 * No uid has been set for child converters. Because of that
 * we have empty values for the uid column in {maps_import_entities}.
 * Set the uid value to the parent value in the {maps_import_entities}
 * table for empty values.
 */
function maps_import_update_7005() {
  // Update the entities table.
  // Get all row with empty values.
  $entities = db_select('maps_import_entities', 'mie')
    ->fields('mie')
    ->execute()
    ->fetchAllAssoc('id', \PDO::FETCH_ASSOC);

  foreach ($entities as $id => $entity) {
    if (!empty($entity['uid'])) {
      continue;
    }

    $parent = $entities[(int) $id + 1];
    db_update('maps_import_entities')
      ->fields(array(
        'uid' => $parent['uid'],
      ))
      ->condition('id', $id)
      ->execute();
  }
}

/**
 * Implements hook_update_N().
 *
 * Create the {maps_import_relation} table.
 */
function maps_import_update_7006() {
  $schema = array(
    'description' => 'Stores the converter relations.',
    'fields' => array(
      'id' => array(
        'description' => 'The relation id.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'cid' => array(
        'description' => 'The converter id.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'relation_type' => array(
        'description' => 'The relation type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'translatable' => TRUE,
      ),
      'endpoints' => array(
        'description' => 'The relation endpoints.',
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
      ),
    ),
    'primary key' => array('id'),
    'foreign keys' => array(
      'maps_import_converter' => array(
        'table' => 'maps_import_converter',
        'columns' => array('cid' => 'cid'),
      ),
    ),
  );

  db_create_table('maps_import_relation', $schema);
}

/**
 * Implements hook_update_N().
 *
 * Add an "inserted" column in {maps_import_links}.
 */
function maps_import_update_7007() {
  $field = array(
    'description' => 'The Unix timestamp when the object was saved.',
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
  );

  db_add_field('maps_import_links', 'inserted', $field);
}

/**
 * Implements hook_update_N().
 *
 * Set the "preset_group_id" column as optional in {maps_import_profile}.
 */
function maps_import_update_7008() {
  db_change_field('maps_import_profile', 'preset_group_id', 'preset_group_id', array('description' => 'ID of the MaPS System® preset group.', 'type' => 'int', 'unsigned' => TRUE));
  db_query('UPDATE {maps_import_profile} SET `preset_group_id` = NULL WHERE `preset_group_id` = 0');
}

/**
 * Implements hook_update_N().
 *
 * Update the fetching updated date format.
 */
function maps_import_update_7009() {
  // Firstly, we have to retreive the MaPS Suite profiles.
  $pids = db_select('maps_import_profile', 'mip')
    ->fields('mip', array('pid'))
    ->execute()
    ->fetchCol();

  $indexes = array(
    'maps_import:configuration_full:',
    'maps_import:objects_full:',
    'maps_import:configuration_diff:',
    'maps_import:objects_diff:',
  );

  foreach ($pids as $pid) {
    foreach ($indexes as $index) {
      $index .= $pid;

      $value = variable_get($index);
      if (!$value || \DateTime::createFromFormat('Y-m-d H:i:s', $value)) {
        continue;
      }

      $date = \DateTime::createFromFormat('YmdHis', $value);
      if (!$date instanceof \DateTime) {
        variable_set($index, $date->format('Y-m-d H:i:s'));
      }
    }
  }
}

/**
 * Implements hook_update_N().
 *
 * Add the "fetch_method", "configuration_file" and "objects_file" columns in {maps_import_profile} table.
 * Set MaPS webservice configuration optional.
 */
function maps_import_update_7010() {
  db_change_field('maps_import_profile', 'token', 'token', array(
    'description' => 'The security token used to authenticate with MaPS System® Web Services.',
    'type' => 'varchar',
    'length' => 40,
    'not null' => FALSE,
    'default' => '',
  ));

  db_change_field('maps_import_profile', 'publication_id', 'publication_id', array(
    'description' => 'The MaPS System® publication ID.',
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => FALSE,
    'default' => 0,
  ));

  db_change_field('maps_import_profile', 'root_object_id', 'root_object_id', array(
    'description' => 'ID of the MaPS System® root object.',
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => FALSE,
    'default' => 0,
  ));

  db_change_field('maps_import_profile', 'url', 'url', array(
    'description' => 'The MaPS System® Web Services URL.',
    'type' => 'varchar',
    'length' => 255,
    'not null' => FALSE,
    'default' => '',
  ));

  db_change_field('maps_import_profile', 'web_template', 'web_template', array(
    'description' => 'The name of the web template to use in the MaPS System® Webervices parameters.',
    'type' => 'varchar',
    'not null' => FALSE,
    'length' => 255,
    'default' => '',
  ));

  db_add_field('maps_import_profile', 'fetch_method', array(
    'description' => 'The fetch method to use.',
    'type' => 'varchar',
    'length' => 255,
    'not null' => TRUE,
    'default' => 'ws',
  ));

  db_add_field('maps_import_profile', 'configuration_file', array(
    'description' => 'The MaPS configuration file.',
    'type' => 'varchar',
    'length' => 255,
    'not null' => FALSE,
  ));

  db_add_field('maps_import_profile', 'objects_file', array(
    'description' => 'The MaPS objects file.',
    'type' => 'varchar',
    'length' => 255,
    'not null' => FALSE,
  ));

}

/**
 * Implements hook_update_N().
 *
 * Add the "media accessibility" column in {maps_import_profile} table.
 */
function maps_import_update_7011() {
  db_add_field('maps_import_profile', 'media_accessibility', array(
    'description' => 'The medias accessibility.',
    'type' => 'varchar',
    'length' => 255,
    'not null' => FALSE,
    'default' => 'public',
  ));
}

/**
 * Implements hook_update_N().
 *
 * Change the primary key of the {maps_import_medias} table. This is
 * necessary when working with several profiles from different MaPS System®
 * instances.
 */
function maps_import_update_7012() {
  db_drop_primary_key('maps_import_medias');
  db_add_primary_key('maps_import_medias', array('id', 'pid'));
}
