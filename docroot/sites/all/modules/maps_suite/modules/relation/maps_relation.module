<?php

use Drupal\maps_import\Converter\ConverterInterface;
use Drupal\maps_relation\Relation\Relation as Relation;
use Drupal\maps_import\Mapping\Source\MapsSystem\EntityInterface as MapsEntityInterface;
use Drupal\maps_import\Mapping\Target\Drupal\EntityInterface as DrupalEntityInterface;

/**
 * Implements hook_theme().
 */
function maps_relation_theme($existing, $type, $theme, $path) {
  return array(
    'maps_relation_relation_overview' => array(
      'render element' => 'form',
      'file' => 'admin/maps_relation.admin.inc',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function maps_relation_menu() {
  $items = array();

  $items['admin/maps-suite/profiles/%maps_import_profile/object/%maps_import_converter/converter_relation'] = array(
    'title' => 'Relation',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('maps_relation_relation_overview', 3, 5),
    'access callback' => 'maps_import_converter_access',
    'access arguments' => array(5, 'relation'),
    'load arguments' => array(3),
    'type' => MENU_LOCAL_TASK,
    'file' => 'admin/maps_relation.admin.inc',
  );

  $items['admin/maps-suite/profiles/%maps_import_profile/object/%maps_import_converter/converter_relation/add'] = array(
    'title' => 'Add relation',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('maps_relation_relation_add_form', 3, 5, 8),
    'access callback' => 'maps_import_converter_access',
    'access arguments' => array(5, 'relation'),
    'load arguments' => array(3, 5),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'admin/maps_relation.admin.inc',
  );

  $items['admin/maps-suite/profiles/%maps_import_profile/object/%maps_import_converter/converter_relation/%maps_relation_converter_relation/endpoints'] = array(
    'title' => 'Edit relation',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'maps_relation_relation_endpoints_add_form',
      3,
      5,
      7,
    ),
    'access callback' => 'maps_import_converter_access',
    'access arguments' => array(5, 'relation'),
    'load arguments' => array(3, 5, 7),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'admin/maps_relation.admin.inc',
  );

  $items['admin/maps-suite/profiles/%maps_import_profile/object/%maps_import_converter/converter_relation/%maps_relation_converter_relation/delete'] = array(
    'title' => 'Delete relation',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('maps_relation_relation_delete_form', 3, 5, 7),
    'access callback' => 'maps_import_converter_access',
    'access arguments' => array(5, 'relation'),
    'load arguments' => array(3, 5, 7),
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
    'file' => 'admin/maps_relation.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_maps_import_converter_actions().
 */
function maps_relation_maps_import_converter_actions(ConverterInterface $converter) {
  if ($converter->getType() !== 'object') {
    return array();
  }

  return array(
    'converter-relation' => array(
      'href' => strtr('admin/maps-suite/profiles/%maps_import_profile/%type/%maps_import_converter/converter_relation', array(
        '%maps_import_profile' => $converter->getProfile()->getName(),
        '%maps_import_converter' => $converter->getCid(),
        '%type' => $converter->getType(),
      )),
      'title' => t('relations'),
    ),
  );
}

/**
 * Load a relation from a converter.
 *
 * @param int $id
 *   The relation id.
 * @param int $pid
 *   The profile id.
 * @param int $cid
 *   The converter id.
 *
 * @return Relation
 *   The relation.
 */
function maps_relation_converter_relation_load($id, $pid, $cid) {
  $converter = maps_import_converter_load($cid);

  return Relation::load($id, $converter);
}

/**
 * Implements hook_maps_import_entity_mapping_finished().
 */
function maps_relation_maps_import_entity_mapping_finished(DrupalEntityInterface $drupalEntity, MapsEntityInterface $mapsEntity, $entity_type, $bundle, ConverterInterface $converter) {
  $relations = Relation::loadAll($converter);

  foreach ($relations as $relation) {
    \Drupal\maps_relation\Mapping\Target\Drupal\Relation::deleteExistingRelations($relation->getMappingConverter(), $mapsEntity->getId());
    $relation->getMappingConverter()->getMapping()->process($mapsEntity);
  }
}

/**
 * Implements hook_entity_info_alter().
 */
function maps_relation_entity_info_alter(&$entity_info) {
  if (isset($entity_info['relation'])) {
    $entity_info['relation']['maps_import_handler'] = 'Drupal\\maps_relation\\Mapping\\Target\\Drupal\\Relation';
  }
}
