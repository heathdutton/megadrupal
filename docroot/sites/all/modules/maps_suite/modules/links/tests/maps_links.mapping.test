<?php

/**
 * @file
 * Tests suite for the mapping process.
 */

/**
 * Performs functional tests on MaPS Links / Mapping.
 *
 * @see DrupalWebTestCase
 */
class MapsLinksMappingWebTestCase extends MapsLinksWebTestCase {

  /**
   * SimpleTest getInfo.
   * @inheritdoc
   */
  public static function getInfo() {
    return array(
      'name' => 'MaPS Links Mapping',
      'description' => 'Tests the mapping configuration for links.',
      'group' => MapsSuiteTestInterface::TEST_GROUP,
    );
  }

  /**
   * Test the overview page.
   */
  public function testOverview() {
    $profile = $this->createProfile();
    $this->createLanguages($profile);

    $converter = $this->createLinkConverter($profile);

    // Access the overview page.
    $this->drupalGet("admin/maps-suite/profiles/{$profile->getName()}/link/{$converter->getCid()}/mapping");
    $this->assertResponse(200, t('User can access the mapping overview tab for link converters.'));
    $this->assertRaw(t('There is no defined mapping yet.'), 'No mapping defined.');

    // Create a random mapping item.
    $item = $this->createMappingItem($converter, array('type' => 'link'));
    $this->drupalGet("admin/maps-suite/profiles/{$profile->getName()}/link/{$converter->getCid()}/mapping");
    $this->assertResponse(200, t('User can access the mapping overview tab for an links converters.'));
    $this->assertRaw($item->getProperty()->getTranslatedTitle(), 'Property title found.');
    $this->assertRaw($item->getField()->getLabel(), 'Field label found.');
  }

  /**
   * Test the add page.
   */
  public function testAdd() {
    $profile = $this->createProfile();
    $this->createLanguages($profile);

    // Make that all Drupal types are valid,
    // so we don't care about the types in this test.
    $this->allowAllValidators();

    $converter = $this->createLinkConverter($profile);
    $this->drupalGet("admin/maps-suite/profiles/{$profile->getName()}/link/{$converter->getCid()}/mapping");

    $attribute = array_rand($converter->getMapping()->getSourceProperties() + $converter->getMapping()->getSourceAttributes());
    $field = array_rand($converter->getMapping()->getTargetFields());

    $edit = array(
      'new[property_id]' => $attribute,
      'new[field_name]' => $field,
    );

    $this->drupalPost("admin/maps-suite/profiles/{$profile->getName()}/link/{$converter->getCid()}/mapping", $edit, t('Save'));
    $this->assertResponse(200, 'User can add a new mapping item');
    $this->assertRaw(t('The new mapping has been created.'));
    $this->assertRaw($attribute, 'Attribute found.');
    $this->assertRaw($field, 'Field found.');
  }

  /**
   * Test the delete page.
   */
  public function testDelete() {
    $profile = $this->createProfile();
    $this->createLanguages($profile);

    $converter = $this->createLinkConverter($profile);
    $item = $this->createMappingItem($converter, array('type' => 'link'));

    $this->drupalGet("admin/maps-suite/profiles/{$profile->getName()}/link/{$converter->getCid()}/mapping");
    $this->assertLink('delete');

    $this->drupalGet("admin/maps-suite/profiles/{$profile->getName()}/link/{$converter->getCid()}/mapping/{$item->getId()}/delete");
    $this->assertResponse(200, 'User can access the delete page.');
    $this->assertRaw(t('Are you sure you want to delete the mapping %field for the property %name?', array('%field' => $item->getField()->getLabel(), '%name' => $item->getProperty()->getTranslatedTitle())));

    $this->drupalPost("admin/maps-suite/profiles/{$profile->getName()}/link/{$converter->getCid()}/mapping/{$item->getId()}/delete", array(), t('Delete'));
    $this->assertRaw(t('The mapping was successfully deleted!'));
    $this->assertRaw(t('There is no defined mapping yet.'));
  }

  /**
   * Test the required option of mapping items.
   */
  public function testRequired() {
    $profile = $this->createProfile();
    $this->createLanguages($profile);

    $converter = $this->createLinkConverter($profile);

    $item_required = $this->createMappingItem($converter, array('required' => 1, 'type' => 'link'));
    $item_not_required = $this->createMappingItem($converter, array('type' => 'link'));

    $this->drupalGet("admin/maps-suite/profiles/{$profile->getName()}/link/{$converter->getCid()}/mapping");

    // Assert that the required checkboxes are correctly marked.
    $this->assertFieldByName("mapping[{$item_required->getId()}][required]", 1, 'Required item correctly checked.');
    $this->assertFieldByName("mapping[{$item_not_required->getId()}][required]", 0, 'Not required item correctly unchecked.');

    // Inverse required values.
    $edit = array(
      "mapping[{$item_required->getId()}][required]" => 0,
      "mapping[{$item_not_required->getId()}][required]" => 1,
    );
    $this->drupalPost("admin/maps-suite/profiles/{$profile->getName()}/link/{$converter->getCid()}/mapping", $edit, t('Save'));
    $this->assertFieldByName("mapping[{$item_required->getId()}][required]", 0, 'Required item correctly checked.');
    $this->assertFieldByName("mapping[{$item_not_required->getId()}][required]", 1, 'Not required item correctly unchecked.');
  }

}
