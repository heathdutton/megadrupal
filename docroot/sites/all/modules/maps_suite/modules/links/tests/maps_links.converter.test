<?php

/**
 * @file
 * Tests suite for Languages related to MaPS Import module.
 */

/**
 * Performs functional tests on MaPS Import / Languages.
 *
 * @see DrupalWebTestCase
 */
class MapsLinksConverterWebTestCase extends MapsLinksWebTestCase {

  /**
   * SimpleTest getInfo.
   * @inheritdoc
   */
  public static function getInfo() {
    return array(
      'name' => 'MaPS Links Converter',
      'description' => "Tests the converter's functionnalities.",
      'group' => MapsSuiteTestInterface::TEST_GROUP,
    );
  }

  /**
   * Tests that the user can access the converter tab and the overview page.
   */
  public function testTabAccess() {
    $profile = $this->createProfile();

    // Test if no language.
    $this->drupalGet('admin/maps-suite/profiles/' . $profile->getName() . '/link');
    $this->assertResponse(403, 'User can\'t acces the overview because no language has been defined');

    // Add a langauge in configuration.
    $this->createLanguages($profile);

    // Test without converters.
    $this->drupalGet('admin/maps-suite/profiles/' . $profile->getName() . '/link');
    $this->assertResponse(200);
    $this->assertRaw(t('There is no defined converter yet'), 'No converter defined');
  }

  /**
   * Tests the overview page for the links converters.
   */
  public function testOverview() {
    $profile = $this->createProfile();
    $this->createLanguages($profile);

    // Ensure that the overview is empty.
    $this->drupalGet('admin/maps-suite/profiles/' . $profile->getName() . '/link');
    $this->assertResponse(200);
    $this->assertRaw(t('There is no defined converter yet'), 'No converter defined: passed');

    // Create a link converter.
    $converter = $this->createLinkConverter($profile);

    $this->drupalGet('admin/maps-suite/profiles/' . $profile->getName() . '/link');
    $this->assertResponse(200);
    $this->assertNoRaw(t('There is no defined converter yet'), 'Converter defined: passed');
    $this->assertRaw(t('@title', array('@title' => $converter->getTitle())), 'Converter succesfully added.');
  }

  /**
   * Tests the converter's weight in the overview form.
   */
  public function testWeight() {
    $profile = $this->createProfile();
    $this->createLanguages($profile);

    // Create additional converters.
    $converters = array();
    $weight = array();
    for ($i = 0; $i < rand(2, self::MAX_CONVERTERS); $i++) {
      $converter = $this->createLinkConverter($profile);
      $converters[] = $converter;
      $weight[$converter->getCid()] = $converter->getWeight();
    }

    $this->drupalGet('admin/maps-suite/profiles/' . $profile->getName() . '/link');
    $this->assertResponse(200);

    // Assert that the original weight are correctly used in the overview.
    foreach ($weight as $id => $value) {
      $name = 'converters[' . $id . '][weight]';
      $this->assertFieldByName($name, $value, format_string('The %name field is correctly set to %value.', array('%name' => $name, '%value' => $value)));
    }

    // Modify weight values.
    $edit = array();
    foreach ($converters as $converter) {
      $edit['converters[' . $converter->getCid() . '][weight]'] = rand(-50, 50);
    }

    $this->drupalPost('admin/maps-suite/profiles/' . $profile->getName() . '/link', $edit, t('Save'));
    foreach ($weight as $id => $value) {
      $name = 'converters[' . $id . '][weight]';
      $value = $edit[$name];
      $this->assertFieldByName($name, $value, format_string('The %name field is correctly set to %value.', array('%name' => $name, '%value' => $value)));
    }
  }

  /**
   * Test adding a new converter.
   */
  public function testAdd() {
    $profile = $this->createProfile();
    $this->createLanguages($profile);

    // Create a relation type and a link type.
    $relation_type = $this->createRelationType();
    $this->createConfigurationEntry($profile, 'link_type');
    $link_type = $this->getRandomConfigurationEntry($profile, 'link_type');

    $this->drupalGet('admin/maps-suite/profiles/' . $profile->getName() . '/add/link');
    $this->assertResponse(200);

    // Create a new converter.
    $name = $this->randomName(8);
    $edit = array(
      'title' => ucfirst($name),
      'description' => ucfirst($name),
      'bundle' => $relation_type->relation_type,
      'link_type' => $link_type->id,
    );

    $this->drupalPost('admin/maps-suite/profiles/' . $profile->getName() . '/add/link', $edit, t('Save'));
    $this->assertResponse(200);

    $this->assertRaw(ucfirst($name), 'Save successfull');
  }

  /**
   * Test editing a converter.
   */
  public function testEdit() {
    $profile = $this->createProfile();
    $this->createLanguages($profile);

    $converter = $this->createLinkConverter($profile);

    $this->drupalGet('admin/maps-suite/profiles/' . $profile->getName() . '/link/' . $converter->getCid() . '/edit');

    $name = $this->randomName(8);
    // Creating new random values.
    $edit = array(
      'title' => ucfirst($name),
      'description' => ucfirst($name),
    );

    // Asserting that the old values appears in the form before submission.
    foreach ($edit as $name => $value) {
      $getter = 'get' . maps_suite_drupal2camelcase($name);
      $value = call_user_func(array($converter, $getter));
      $this->assertFieldByName($name, $value, format_string('The %name field is correctly set to %value.', array('%name' => $name, '%value' => $value)));
    }

    // Link type and bundle cannot be edited once the converter is created.
    $edit['link_type'] = $converter->getLinkType();
    $edit['bundle'] = $converter->getBundle();

    // Submitting the new values.
    $this->drupalPost('admin/maps-suite/profiles/' . $profile->getName() . '/link/' . $converter->getCid() . '/edit', $edit, t('Save'));
    $this->assertResponse(200);

    $this->drupalGet('admin/maps-suite/profiles/' . $profile->getName() . '/link/' . $converter->getCid() . '/edit');
    $this->assertResponse(200);

    unset($edit['link_type'], $edit['bundle']);
    foreach ($edit as $name => $value) {
      $this->assertFieldByName($name, $value, format_string('The %name field is correctly set to %value.', array('%name' => $name, '%value' => $value)));
    }
  }


  /**
   * Test deleting a converter.
   */
  public function testDelete() {
    $profile = $this->createProfile();
    $this->createLanguages($profile);

    // Create a random converter.
    $converter = $this->createLinkConverter($profile);

    $this->drupalGet('admin/maps-suite/profiles/' . $profile->getName() . '/link/' . $converter->getCid() . '/delete');
    $this->assertResponse(200);
    $this->assertRaw(t('Are you sure you want to delete the converter %title ?', array('%title' => ucfirst($converter->getTitle()))), 'Title correctly set.');

    $this->drupalPost('admin/maps-suite/profiles/' . $profile->getName() . '/link/' . $converter->getCid() . '/delete', array(), t('Delete'));
    $this->assertResponse(200);
    $this->assertRaw('There is no defined converter yet', 'The converter has been succesfully deleted.');
  }

}
