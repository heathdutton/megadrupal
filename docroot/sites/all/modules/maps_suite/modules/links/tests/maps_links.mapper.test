<?php

/**
 * @file
 * Tests suite for the mapping process.
 */

use Drupal\maps_import\Converter\ConverterInterface;
use Drupal\maps_links\Mapping\Mapper\Link as LinkMapper;
use Drupal\maps_import\Mapping\Mapper\Object as ObjectMapper;
use Drupal\maps_import\Mapping\Mapping;

/**
 * Performs functional tests on MaPS Links / Mapper.
 *
 * @see DrupalWebTestCase
 */
class MapsLinksMapperWebTestCase extends MapsLinksWebTestCase {

  /**
   * The expected counts for mapping tables.
   * @var array
   */
  protected $count = array(
    'links' => 3,
    'links_diff_1' => 4,
    'links_diff_2' => 2,
  );

  /**
   * SimpleTest getInfo.
   * @inheritdoc
   */
  public static function getInfo() {
    return array(
      'name' => 'MaPS Links Mapper',
      'description' => 'Tests the mapper process  for links.',
      'group' => MapsSuiteTestInterface::TEST_GROUP,
    );
  }

  /**
   * SimpleTest setUp.
   * @inheritdoc
   */
  public function setUp(array $modules = array(), array $permissions = array()) {
    // Put the site in maintenance mode.
    variable_set('maintenance_mode', 1);

    parent::setUp($modules, $permissions);
  }

  /**
   * Initialize the mapping.
   * 
   * @inheritdoc
   */
  protected function initMapping($mapper = TRUE) {
    $return = parent::initMapping(FALSE);

    // Create a link converter.
    $return['link_converter'] = $this->createLinkConverter($return['profile'], array('link_type' => 6));

    // Create a field for the relation type.
    $field = array(
      'field_name' => 'count',
      'type' => 'number_integer',
    );
    field_create_field($field);
    $instance = array(
      'field_name' => 'count',
      'entity_type' => 'relation',
      'bundle' => $return['link_converter']->getBundle(),
    );
    field_create_instance($instance);

    // Add a mapping item.
    $this->createMappingItem($return['link_converter'], array(
      'property' => 'property:count',
      'field' => 'count',
      'type' => 'link',
    ));

    if ($mapper) {
      $return['mapper'] = new ObjectMapper($return['profile']);
      $return['mapper']->process();

      $return['link_mapper'] = new LinkMapper($return['profile']);
      $return['link_mapper']->process();
    }

    return $return;
  }

  /**
   * Tests the right count of relations after 2 mapping process.
   */
  public function testCount() {
    extract($this->initMapping());

    $this->assertCount();

    // We process the mapping a second time.
    $objects_fetcher->process();
    $mapper->process();
    $link_mapper->process();

    // Assert that there is the same count of relations.
    $this->assertCount();
  }

  /**
   * Tests the links mapping process.
   */
  public function testSave() {
    extract($this->initMapping());

    $this->assertRelationsCreated($link_converter);
  }

  /**
   * Tests the links mapping process with differential calls to the webservices.
   */
  public function testDifferential() {
    extract($this->initMapping());

    $differentials = array(1, 2);

    foreach ($differentials as $differential) {
      // Set the differential data.
      variable_set('test_differential', $differential);

      $configuration_fetcher->process();
      $objects_fetcher->process();
      $mapper->process();
      $link_mapper->process();

      $this->assertCount('links_diff_' . $differential);
      $this->assertRelationsCreated($link_converter);
    }
  }

  /**
   * Assert relation created.
   * 
   * Assert that the relation has been correctly created by checking the
   * endpoints, the relation type and the mapping item value.
   *
   * @param object $relation
   *   The relation to check.
   * @param array $entity
   *   The related entity.
   * @param ConverterInterface $link_converter
   *   The related link converter.
   */
  protected function assertRelationCreated(stdClass $relation, $entity, ConverterInterface $link_converter) {
    // Check the relation type.
    $this->assertTrue($relation->relation_type == $link_converter->getBundle(), t('Relation has the relation type %relation_type.', array('%relation_type' => $relation->relation_type)));

    // Check the endpoints.
    $wrapper = entity_metadata_wrapper('relation', $relation);
    $endpoints = $wrapper->endpoints->value();

    foreach ($endpoints as $i => $endpoint) {
      $mapped_entity_id = $i == 0 ? $entity['source_id'] : $entity['target_id'];
      $mapped_entity = Mapping::getEntityIdFromMapsId('object', $mapped_entity_id);

      $this->assertTrue($endpoint->getIdentifier() == reset($mapped_entity), t('Endpoint correctly set to %endpoint', array('%endpoint' => $endpoint->getIdentifier())));
    }

    // Check the count value (from the mapping item).
    $this->assertTrue($wrapper->count->value() == $entity['count'], t('Count correctly set to %count', array('%count' => $entity['count'])));
  }

  /**
   * Assert relations created.
   * 
   * Load all links entities and assert that the relations have been
   * successfully created.
   *
   * @param ConverterInterface $link_converter
   *   The link converter.
   */
  protected function assertRelationsCreated($link_converter) {
    // Get the links entities.
    $query = db_select('maps_links_entities', 'e')
      ->fields('e');

    $query->join('maps_import_links', 'l', 'l.id = e.link_id');
    $query->fields('l');

    $entities = $query->execute()
      ->fetchAllAssoc('link_id', PDO::FETCH_ASSOC);

    foreach ($entities as $link_id => $entity) {
      $relation = relation_load($entity['relation_id']);

      $this->assertRelationCreated($relation, $entity, $link_converter);
    }
  }

  /**
   * Assert count.
   * 
   * Check if the count of created relation is equal to
   * the hardcoded defined count.
   *
   * @param int $index
   *   The index of the count to verify.
   */
  protected function assertCount($index = 'links') {
    $relations = db_select('relation', 'r')
      ->fields('r')
      ->execute()
      ->fetchAllAssoc('rid', PDO::FETCH_ASSOC);

    $this->assertEqual(count($relations), $this->count[$index], t('Right count for @type : @count / @count2', array(
      '@type' => 'link',
      '@count' => count($relations),
      '@count2' => $this->count[$index],
    )));
  }

}
