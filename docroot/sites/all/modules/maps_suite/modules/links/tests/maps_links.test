<?php

/**
 * @file
 * Tests suite for MaPS Links module.
 */

use Drupal\maps_import\Profile\Profile;

/**
 * This class exposes some shared methods for extending classes that
 * represents each a specific functionality.
 *
 * @see DrupalWebTestCase
 */
class MapsLinksWebTestCase extends \MapsImportWebTestCase {

  /**
   * SimpleTest setUp.
   * @inheritdoc
   */
  public function setUp(array $modules = array(), array $permissions = array()) {
    $modules[] = 'maps_import';
    $modules[] = 'maps_links';
    parent::setUp($modules, $permissions);
  }

  /**
   * Create a link converter.
   *
   * @param Profile $profile
   *   The related profile.
   * @param array $options
   *   An associative array defining some options for the converter:
   *   - link_type: (optional) The converter entity type.
   *   - bundle: (optional) The converter bundle.
   *   - options: (optional) An associative array of options.
   */
  protected function createLinkConverter(Profile $profile, $options = array()) {
    $name = $this->randomName(8);

    $converter = array(
      'pid' => $profile->getPid(),
      'title' => ucfirst($name),
      'description' => ucfirst($name),
      'name' => strtolower($name),
      'weight' => rand(-50, 50),
    ) + $options;

    if (empty($converter['bundle'])) {
      $relation_type = $this->createRelationType();
    }
    if (empty($converter['link_type'])) {
      $this->createConfigurationEntry($profile, 'link_type');
      $link_type = $this->getRandomConfigurationEntry($profile, 'link_type');
      $converter['link_type'] = $link_type->id;
    }

    $converter += array(
      'bundle' => $relation_type->relation_type,
      'options' => array(),
    );

    $converter['options'] = serialize($converter['options']);

    $cid = db_insert('maps_links_converter')
      ->fields($converter)
      ->execute();

    return maps_links_converter_load($cid, $profile->getPid());
  }

  /**
   * Create a random relation type.
   *
   * @param array $info
   *   The array of relation type settings.
   */
  protected function createRelationType($info = array()) {
    if (empty($info['relation_type'])) {
      $info['relation_type'] = $this->randomName(8);
    }

    // If no bundles defined, we choose all available bundles for nodes.
    if (empty($info['source_bundles'])) {
      $info['source_bundles'] = array('node:*');
    }
    if (empty($info['target_bundles'])) {
      $info['target_bundles'] = array('node:*');
    }

    $relation = relation_type_create($info);
    relation_type_save($relation);

    return $relation;
  }

  /**
   * Create a random relation type.
   */
  protected function getRandomRelationType() {
    $relation_types = relation_get_types();
    var_dump($relation_types);
    $relation_type = $relation_types[array_rand($relation_types)];

    return $relation_type->relation_type;
  }

}
