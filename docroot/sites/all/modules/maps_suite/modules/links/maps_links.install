<?php

/**
 * @file
 * Installation functions for MaPS Link module.
 */

/**
 * Implements hook_schema().
 */
function maps_links_uninstall() {
  // @todo remove all converters.
}

/**
 * Implements hook_schema().
 */
function maps_links_schema() {
  $schema['maps_links_converter'] = array(
    'description' => 'Stores the link converters settings.',
    'fields' => array(
      'cid' => array(
        'description' => 'The {maps_links_converter} converter ID.',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'pid' => array(
        'description' => 'The {maps_import_profile} profile ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'name' => array(
        'description' => 'The human-readable name of this converter.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'title' => array(
        'description' => 'The title of the converter.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'description' => array(
        'description' => 'A description of the converter for the admin interface.',
        'type' => 'varchar',
        'length' => 255,
        'default' => '',
      ),
      'bundle' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'options' => array(
        'description' => 'The serialized options related to target entity/bundle.',
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The weight of this converter.',
      ),
      'link_type' => array(
        'description' => 'The link type.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array(
      'pid' => array('pid'),
      'weight' => array('weight'),
    ),
    'unique keys' => array(
      'pid_name' => array('pid', 'name'),
    ),
    'primary key' => array('cid', 'pid'),
    'foreign keys' => array(
      'maps_import_profile' => array(
        'table' => 'maps_import_profile',
        'columns' => array('pid' => 'pid'),
      ),
    ),
  );

  $schema['maps_links_entities'] = array(
    'description' => 'Stores the correpondance beetween MaPS links and Drupal relations',
    'fields' => array(
      'link_id' => array(
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
      ),
      'relation_id' => array(
        'description' => 'The Drupal relation id.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'pid' => array(
        'description' => 'The {maps_import_profile} profile ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'cid' => array(
        'description' => 'The {maps_links_converter} converter ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('link_id'),
    'foreign keys' => array(
      'maps_import_links' => array(
        'table' => 'maps_import_links',
        'columns' => array('link_id' => 'id'),
      ),
      'relation' => array(
        'table' => 'relation',
        'columns' => array('relation_id' => 'rid'),
      ),
      'maps_import_profile' => array(
        'table' => 'maps_import_profile',
        'columns' => array('pid' => 'pid'),
      ),
      'maps_links_converter' => array(
        'table' => 'maps_import_converter',
        'columns' => array('cid' => 'cid'),
      ),
    ),
  );

  return $schema;
}

/**
 * Implements hook_update_N().
 */
function maps_links_update_7000() {
  db_add_field(
    'maps_links_converter',
    'name',
    array(
      'description' => 'The human-readable name of this converter.',
      'type' => 'varchar',
      'length' => 255,
      'not null' => TRUE,
      'default' => '',
    ), array(
      'unique keys' => array(
        'pid_name' => array('pid', 'name'),
      ),
    ));

  $result = db_query('SELECT * FROM {maps_links_converter}');

  foreach ($result as $row) {
    db_query('UPDATE {maps_links_converter} SET name = :name WHERE cid = :cid', array(
      ':name' => preg_replace('/[^a-z0-9_]+/', '_', drupal_strtolower($row->title)),
      ':cid' => $row->cid,
    ));
  }
}

/**
 * Implements hook_update_N().
 *
 * Update the {maps_links_entities} table to handle properly the
 * differential data import.
 */
function maps_links_update_7001() {
  db_drop_field('maps_links_entities', 'id');
  db_add_field('maps_links_entities', 'link_id', array(
    'type' => 'int',
    'not null' => TRUE,
    'unsigned' => TRUE,
    'default' => 0,
  ), array('primary key' => array('link_id')));
  db_change_field('maps_links_entities', 'entity_id', 'relation_id', array(
    'description' => 'The {relation} ID.',
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'default' => 0,
  ));
}
