<?php

/**
 * @file
 * Tests suite for Logs related to MaPS  module.
 */

use Drupal\maps_suite\Log\Log;
use Drupal\maps_suite\Log\Logger;
use Drupal\maps_suite\Log\Context\Context;

/**
 * Performs functional tests on MaPS Log.
 *
 * @see DrupalWebTestCase
 */
class MapsSuiteLogWebTestCase extends MapsSuiteWebTestCase {

  /**
   * SimpleTest getInfo.
   *
   * @inheritdoc
   */
  public static function getInfo() {
    return array(
      'name' => 'MaPS Suite Logs',
      'description' => 'Tests the MaPS Suite log system.',
      'group' => MapsSuiteTestInterface::TEST_GROUP,
    );
  }

  /**
   * SimpleTest SetUp.
   *
   * @inheritdoc
   */
  public function setUp(array $modules = array()) {
    parent::setUp(array('maps_suite'));
  }

  /**
   * Test log functionality.
   *
   * Create a random log with an introduction message and save it.
   */
  public function testCreateLog() {
    // Create new log.
    $this->log_id = rand(1, 100);

    Logger::attachLog('test', $this->log_id, TRUE);
    $path = Logger::getLog('test', $this->log_id)->getPath();

    // Add introduction message.
    $this->introductionMessage = $this->randomName(15);
    $this->verbose('Introduction Message: ' . $this->introductionMessage);
    Logger::getLog('test', $this->log_id)->setIntroductionMessage($this->introductionMessage);

    // Check introduction message.
    $this->assertTrue((Logger::getLog('test', $this->log_id)->getIntroductionMessage() == $this->introductionMessage), 'Introduction Message correctly added!');

    // Saving file.
    $this->verbose($path);
    Logger::getLog('test', $this->log_id)->save();
    $this->assertTrue(is_file($path), Logger::getLog('test', $this->log_id)->getPath());

    // Check introduction message
    // confirm that the log has been successfully loaded.
    $this->assertTrue((Logger::getLog('test', $this->log_id)->getIntroductionMessage() == $this->introductionMessage), 'Introduction Message is right (' . $this->introductionMessage . '): File correctly loaded!');

    $new_introduction_message = $this->randomName(15);
    Logger::getLog('test', $this->log_id)->setIntroductionMessage($new_introduction_message);

    // Setting a second time the introduction message. It must always be unique.
    $this->assertTrue(
        (count(Logger::getLog('test', $this->log_id)->getDomDocument()->getElementsByTagName('introduction_message')) == 1) &&
        (Logger::getLog('test', $this->log_id)->getIntroductionMessage() == $new_introduction_message), 'Edit introduction message: success');

    // Adding random contexts with random contexts children
    // (eq objects > conditions).
    $count = array();
    for ($i = 1; $i <= rand(3, 5); $i++) {
      Logger::getLog('test', $this->log_id)->moveToContentRoot();

      $context = new Context('object', array('id' => $i));

      Logger::getLog('test', $this->log_id)->addContext($context, 'child');

      $count[$i] = 0;

      // Conditions.
      for ($j = 1; $j <= rand(1, 5); $j++) {
        $count[$i]++;

        $context = new Context('condition', array('id' => $j));
        Logger::getLog('test', $this->log_id)->addContext($context, 'child');

        // Messages.
        for ($k = 1; $k <= rand(1, 5); $k++) {
          Logger::getLog('test', $this->log_id)->addMessage($this->randomName(15), array(
            'level' => rand(0, 7),
            'variables' => array('foo' => array('bar' => TRUE, 'foo_bar' => 'some string')),
            'backtrace' => FALSE,
            'links' => array_fill(0, rand(1, 5), $this->randomUrl()),
          ));
        }

        Logger::getLog('test', $this->log_id)->moveToParent('object');
      }

      Logger::getLog('test', $this->log_id)->moveToContentRoot();
    }

    Logger::getLog('test', $this->log_id)->save();

    $dom = Logger::getLog('test', $this->log_id)->getDomDocument();

    // Test introduction message.
    $xpath = new DOMXPath($dom);

    $elements = $xpath->query('//root/introduction_message');
    $this->assertTrue($elements->length, 'Introduction message found !');

    // Test contexts.
    $elements = $xpath->query('//root/' . Log::CONTENT_ROOT);
    $this->assertTrue($elements->length, 'Content found !');

    // Test objects contexts.
    $elements = $xpath->query('//root/' . Log::CONTENT_ROOT . '/context[@type="object"]');

    if ($this->assertTrue(($elements->length == count($count)), 'Objects found !')) {
      foreach ($elements as $object) {
        $object_id = $object->getAttribute('id');

        $objects = $xpath->query('//root/' . Log::CONTENT_ROOT . '/context[@type="object"][@id="' . $object_id . '"]');

        // Test condition.
        foreach ($objects as $object) {
          $conditions = $xpath->query('//root/' . Log::CONTENT_ROOT . '/context[@type="object"][@id="' . $object_id . '"]/context[@type="condition"]');

          if ($this->assertTrue(($conditions->length == $count[$object_id]), 'Conditions for object ' . $object_id . ' found !')) {

            // Test messages.
            foreach ($conditions as $condition) {
              $condition_id = $condition->getAttribute('id');

              $message = $xpath->query('//root/' . Log::CONTENT_ROOT . '/context[@type="object"][@id="' . $object_id . '"]/context[@type="condition"]/message');
              $message_text = $xpath->query('//root/' . Log::CONTENT_ROOT . '/context[@type="object"][@id="' . $object_id . '"]/context[@type="condition"]/message/text');

              $this->assertTrue(($message && $message_text), 'Message for condition ' . $condition_id . ' of object ' . $object_id . ' found !');
            }
          }
        }
      }
    }

    Logger::getLog('test', $this->log_id)->save();
  }

}
