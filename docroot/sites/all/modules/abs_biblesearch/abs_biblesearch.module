<?php
/**
 * @file
 * Primary integration with American Bible Society Bible Search api
 */

/**
 * Implements hook_init().
 */
function abs_biblesearch_init() {
  $module_path = drupal_get_path('module', 'abs_biblesearch');

  drupal_add_js($module_path . '/js/abs_biblesearch.js');
  drupal_add_css($module_path . '/css/abs_bible_search.css');
}

/**
 * Implements hook_menu().
 */
function abs_biblesearch_menu() {
  $items = array();

  /* Set module settings, including the api key */
  $items['admin/config/search/abs_biblesearch'] = array(
    'title'             => 'ABS Bible Search Settings',
    'description'       => 'Add your API key, select versions, and more.',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('abs_biblesearch_settings'),
    'access arguments'  => array('administer content'),
 );

  /* This is used to ajax query up alternate versions of a verse. */
  $items['abs_biblesearch/ajax/verse/%/%'] = array(
    'title' => 'ABS Bible Search Different Versions of a Verse',
    'page callback' => 'abs_biblesearch_ajax_verse_versions',
    'type'  => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'page arguments' => array(3, 4),
 );

  /* This is used to ajax query up the books that are in a testament, for a given version.  Use by browse the bible function. */
  $items['abs_biblesearch/ajax/versionbooksinatestament/%/%'] = array(
    'title' => 'ABS Bible Search Books in a Testament for a Version',
    'page callback' => 'abs_biblesearch_ajax_version_booksinatestament',
    'type'  => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'page arguments' => array(3, 4),
 );

  /* This is used to ajax query up the chapters in a book for a given version.  Use by browse the bible function. */
  $items['abs_biblesearch/ajax/versionchaptersinabook/%/%'] = array(
    'title' => 'ABS Bible Search Chapters in a Book for a Version',
    'page callback' => 'abs_biblesearch_ajax_version_chaptersinabook',
    'type'  => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'page arguments' => array(3, 4),
 );

  /* This is used to ajax query up the allowed versions. */
  $items['abs_biblesearch/ajax/versions'] = array(
    'title' => 'ABS Bible Search Allowed Versions',
    'page callback' => 'abs_biblesearch_ajax_versions',
    'type'  => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function abs_biblesearch_theme() {
  $theme_hooks = array();

  $theme_hooks['abs_biblesearch_search_form'] = array(
    'template'  => 'abs_biblesearch_search_form',
    'render element' => 'form'
 );

  $theme_hooks['abs_biblesearch_search_results'] = array(
    'template'  => 'abs_biblesearch_search_results',
    'variables' => array(
      'verses' => array(),
      'total' => '',
      'limit' => '',
      'offset' => '',
      'pages' => '',
      'version' => 'GNT',
      'versionlist' => array())
 );

  $theme_hooks['abs_biblesearch_search_results_passage'] = array(
    'template'  => 'abs_biblesearch_search_results_passage',
    'variables' => array('passages' => '', 'version' => 'GNT', 'versionlist' => array())
 );

  $theme_hooks['abs_biblesearch_verse'] = array(
    'template'  => 'abs_biblesearch_verse',
    'variables' => array('verse' => '', 'version' => 'GNT')
 );

  $theme_hooks['abs_biblesearch_verse_passage'] = array(
    'template'  => 'abs_biblesearch_verse_passage',
    'variables' => array('passage' => NULL, 'version' => 'GNT')
 );

  $theme_hooks['abs_biblesearch_verses'] = array(
    'template'  => 'abs_biblesearch_verses',
    'variables' => array('version' => '',
      'book' => '',
      'chapter' => '',
      'verses' => '',
      'prev' => '',
      'next' => '',
      'versionlist' => array())
 );

  $theme_hooks['abs_biblesearch_ajax_verse_versions'] = array(
    'template'  => 'abs_biblesearch_ajax_verse_versions',
    'variables' => array('verses' => array())
 );

  $theme_hooks['abs_biblesearch_ajax_version_booksinatestament'] = array(
    'template'  => 'abs_biblesearch_ajax_version_booksinatestament',
    'variables' => array('books' => array())
 );

  $theme_hooks['abs_biblesearch_ajax_version_chaptersinabook'] = array(
    'template'  => 'abs_biblesearch_ajax_version_chaptersinabook',
    'variables' => array('chapters' => array())
 );

  $theme_hooks['abs_biblesearch_ajax_versions'] = array(
    'template'  => 'abs_biblesearch_ajax_versions',
    'variables' => array('versions' => array())
 );

  return $theme_hooks;
}

/**
 * Implements hook_block_info().
 */
function abs_biblesearch_block_info() {
  $blocks = array(
    'abs_biblesearch_search' => array(
      'info' => 'ABS Bible Search Form',
      'cache' => DRUPAL_CACHE_PER_PAGE,
   ),

    'abs_biblesearch_search_results' => array(
      'info' => 'ABS Bible Search Results',
      'cache' => DRUPAL_CACHE_PER_PAGE,
   ),
 );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function abs_biblesearch_block_view($delta = '') {
  switch ($delta) {
    case 'abs_biblesearch_search':
      $block = array(
        'subject' => '',
        'content' => abs_biblesearch_searchform($delta),
       );
      break;

    case 'abs_biblesearch_search_results':
      $block = array(
        'subject' => '',
        'content' => abs_biblesearch_searchresults($delta),
     );
      break;

  }

  return $block;
}

/********************* ADMIN FORM ***************************/
/**
 * Settings form to store settings for this module.
 */
function abs_biblesearch_settings() {
  $form = array(
    'abs_biblesearch_api_key' => array(
      '#type'             => 'textfield',
      '#title'            => t("An API key is required by the biblesearch application.  The key is free to obtain, and can be signed up for at http://biblesearch.americanbible.org/pages/api/signup.  You can find additional information about the API at http://biblesearch.americanbible.org/pages/api.<br/>API Key"),
      '#default_value'    => variable_get('abs_biblesearch_api_key', ''),
   ),

    'abs_biblesearch_results_path' => array(
      '#type'             => 'textfield',
      '#title'            => t('Path to the results page.  Leave empty if the search results block is on the same page as the search form block.'),
      '#default_value'    => variable_get('abs_biblesearch_results_path', '')
   ),
 );

  if (variable_get('abs_biblesearch_api_key', '') != '' &&
    abs_biblesearch_validate_api(variable_get('abs_biblesearch_api_key', ''))) {
    $versions = abs_biblesearch_versions(FALSE);
    $form['abs_biblesearch_allowed_versions'] = array(
      '#type' => 'checkboxes',
      '#multiple' => TRUE,
      '#title' => t('The versions you would like to search by'),
      '#options' => $versions,
      '#default_value' => variable_get('abs_biblesearch_allowed_versions', array_keys($versions))
   );
  }

  $form['abs_biblesearch_filter_path'] = array(
    '#type'                => 'textfield',
    '#title'               => t('If using the filter, you must fill in the results path field above.'),
    '#default_value'       => variable_get('abs_biblesearch_filter_path', '')
 );

  return system_settings_form($form);
}

/**
 * Validate admin form.
 */
function abs_biblesearch_settings_validate($form, $form_state) {
  if ($form['abs_biblesearch_api_key']['#value'] != '') {
    if (! abs_biblesearch_validate_api($form['abs_biblesearch_api_key']['#value'])) {
      form_set_error('abs_biblesearch_api_key', t("The ABS Biblesearch API Key is invalid"));
    }
  }
  else {
    form_set_error('abs_biblesearch_api_key', t("The ABS Biblesearch API Key is missing"));
  }
}

function abs_biblesearch_validate_api($key) {
  $library_path = libraries_get_path('abs_biblesearch');
  require_once("$library_path/Exception.php");
  require_once("$library_path/Request.php");
  require_once("$library_path/Response.php");
  require_once("$library_path/Api.php");
  require_once("$library_path/Base.php");
  require_once("$library_path/Book.php");
  require_once("$library_path/Chapter.php");
  require_once("$library_path/Bookgroup.php");
  require_once("$library_path/Iterator.php");
  require_once("$library_path/Search.php");
  require_once("$library_path/Verse.php");
  require_once("$library_path/Version.php");

  $api = new ABS_Api($key);
  try {
    $v = new ABS_Version($api);
    $xml = $v->listVersions();
  }
  catch (Exception $e) {
    return FALSE;
  }
  return TRUE;
}
/********************* END ADMIN FORM ***************************/

/********************* BLOCKS ***************************/
/**
 * Display the search form block
 */
function abs_biblesearch_searchform($delta) {
  if (variable_get('abs_biblesearch_api_key', '') == '') {
    drupal_set_message(t("Please enter an api key at /admin/settings/abs_biblesearch"), "error");
    return;
  }

  return drupal_get_form('abs_biblesearch_search_form');
}

/**
 * Display the search results block
 */
function abs_biblesearch_searchresults($delta) {
  if (variable_get('abs_biblesearch_api_key', '') == '') {
    drupal_set_message(t("Please enter an api key at /admin/settings/abs_biblesearch"), "error");
    return;
  }

  /* To make this simpler on the end user, we'll use the same block to both
  * display results and to browse the bible.  Otherwise we'll end up with
  * block mania.  So, first thing we'll do is check to see if a chapter
  * ID has been passed in.  If so, let's branch off to the browse chapter
  * function and go from there.  */
  if (isset($_REQUEST['viewid'])) {
    return abs_biblesearch_browse_chapter();
  }

  /* Still here?  Then we're doing a search...*/

  $keys = NULL;
  if (isset($_REQUEST['keys'])) {
    $keys = $_REQUEST['keys'];
  }

  if ($keys == t("Search by keyword, verse, or phrase")) {
    return '';
  }

  if ($keys) {
    $api = abs_biblesearch_get_api();

    $limit = isset($_REQUEST['limit']) ? $_REQUEST['limit'] : 10;
    $offset = isset($_REQUEST['offset']) ? $_REQUEST['offset'] : 0;

    if (isset($_REQUEST['versions'])) {
      if (is_array($_REQUEST['versions'])) {
        $version = implode(",", $_REQUEST['versions']);
      }
      else {
        $version = $_REQUEST['versions'];
      }
    }
    else {
      $version = "GNT";
    }

    $params = array(
      'query'  => $keys,
      'version'  => $version,
   );

    $s = new ABS_Search($api);
    $xml = $s->search($params);
    abs_biblesearch_set_fums($xml->meta->fums);

    /* Search for a passage by reference. */
    if ((string) $xml->result->type == 'passages') {
      return theme('abs_biblesearch_search_results_passage', array(
        'passages' => $s->getData('result/passages/passage'),
        'version' => $version
       ))
        . abs_biblesearch_get_fums();
    }

    /* Search by keyword.  type = verses */
    else {
      $params = array(
        'keyword'  => $keys,
        'limit'    => $limit,
        'version'  => $version,
        'offset'   => $offset,
     );

      foreach (array('precision', 'exclude', 'testament', 'spelling', 'sort_order', 'book') as $term) {
        if (!empty($_REQUEST[$term])) {
          $params[$term] = urldecode($_REQUEST[$term]);
        }
      }

      $v = new ABS_Verse($api);
      $xml = $v->search($params);
      abs_biblesearch_set_fums($xml->meta->fums);

      $verse_list = abs_biblesearch_verse_xml_to_array($v->getData('result/verses/verse'));
      $pages = abs_biblesearch_paginate($keys, $xml->result->summary->total, $limit, $offset);

      return theme('abs_biblesearch_search_results', array(
        'verses' => $verse_list,
        'total' => (integer) $xml->result->summary->total,
        'limit' => $limit,
        'offset' => $offset,
        'pages' => $pages,
        'version' => $version,
        'versionlist' => abs_biblesearch_versions_complete()))
        . abs_biblesearch_get_fums();
    }
  }

  else {
    return '';
  }
}

/**
 * A chapter has been selected to be viewed.  We browse by chapters, not by verses.
 */
function abs_biblesearch_browse_chapter() {
  $chapterid = $_REQUEST['viewid'];

  $api = abs_biblesearch_get_api();

  $v = new ABS_Verse($api);
  $v->setFromReceivedChapterID($chapterid);
  try {
    // Get the textual data.
    $versexml = $v->listVerses();
    abs_biblesearch_set_fums($versexml->meta->fums);

    // Get the navigation info
    $c = new ABS_Chapter($api);
    $c->setVersion($v->getVersion());
    $c->setBook($v->getBook());
    $chapterxml = $c->show($v->getChapter());
    abs_biblesearch_set_fums($chapterxml->meta->fums);

    $data = theme(
      'abs_biblesearch_verses', array(
        'version' => $v->getVersion(),
        'book' => $chapterxml->chapter->parent->book->name,
        'chapter' => $v->getChapter(),
        'verses' => html_entity_decode($chapterxml->chapter->text),
        'prev' => $chapterxml->chapter->previous->chapter,
        'next' => $chapterxml->chapter->next->chapter,
        'versionlist' => abs_biblesearch_versions_complete()
       ))
      . abs_biblesearch_get_fums();
    //cache_set('abs_biblesearch_browse_chapter'.$chapterid, $data, 'cache', time() + 604800);

    return $data;
  } catch (Exception $ex) {
    drupal_set_message(t("We were unable to get that chapter."), "error");
  }
}
/********************* BLOCKS ***************************/

/********************* SEARCH FORM ***************************/
/**
 * Provide search form for Bible search.  The form is styled in abs-biblesearch-search-form.tpl.php
 */
function abs_biblesearch_search_form($form, &$form_state) {
  $action = variable_get('abs_biblesearch_results_path', '');
  if ($action != '') {
    $form['#action'] = $action;
  }
  if (isset($form['#action'])) {
    $form['#action'] = preg_replace('/viewid=.*(&?.*)/', '$1', $form['#action']);
  }
  else {
    $form['#action'] = '.';
  }

  $form['#attributes'] = array('class' => 'abs-search-form');

  $keys = "";
  if (isset($_REQUEST['keys'])) {
    $keys = $_REQUEST['keys'];
  }

  $form['keys'] = array(
    '#title' => '',
    '#type' => 'textfield',
    '#default_value' => $keys,
    '#size' => 40,
    '#maxlength' => 255,
    '#required' => TRUE,
 );

  $versions = abs_biblesearch_versions();

  if (isset($_REQUEST['versions'])) {
    $selectedversions = array();
    if (is_array($_REQUEST['versions'])) {
      foreach ($_REQUEST['versions'] as $version) {
        $selectedversions[$version] = TRUE;
      }
    }
    else {
      foreach (explode(",", $_REQUEST['versions']) as $version) {
        $selectedversions[$version] = TRUE;
      }
    }
  }
  else {
    $selectedversions = $versions;
  }

  if (!empty($versions)) {
    $form['versions'] = array(
      '#type'     => 'checkboxes',
      '#multiple' => TRUE,
      '#options'  => $versions,
      '#title'    => '',
      '#default_value'  => array_keys($selectedversions)
   );
  }

  $form['processed_keys'] = array('#type' => 'value', '#value' => array());

  $form['submit'] = array('#type' => 'submit', '#value' => t('Search'));

  return $form;
}

/**
 * Implements hook_form_validate().
 */
function abs_biblesearch_search_form_validate($form, $form_state) {
  $keys = strip_tags($form_state['values']['keys']);
  form_set_value($form['processed_keys'], trim($keys), $form_state);

  if ($keys == "Search by keyword, verse, or phrase") {
    form_set_error('', t('Please enter a search phrase or passage.'));
  }
}

/**
 * Implements hook_form_submit().
 */
function abs_biblesearch_search_form_submit($form, &$form_state) {
  // New searches should always start on page (offset) number 1.
  $form_state['values']['offset'] = 1;

  // causes the form to get shown out with current values in place
  $form_state['redirect'] = FALSE;
  return;
}
/********************* END SEARCH FORM ***************************/

/********************* FILTER ***************************/
/**
 * Implements hook_filter_info().
 */
function abs_biblesearch_filter_info() {
  return array(array(
    'title' => t('Convert a Bible reference like [CEV:Gen.1.2] into a link.'),
    'process callback' => 'abs_biblesearch_filter_link'
   ));
}

function abs_biblesearch_filter_link($text = '') {
  if ($text == '') {
    return '';
  }
  if (variable_get('abs_biblesearch_filter_path', '') == '') {
    drupal_set_message(t('You must set the filter path in ABS Bible Search settings.'), 'error');
    return $text;
  }
  $path = variable_get('abs_biblesearch_filter_path', '');

  $search = array(
    '/\[([\w\d]+)\:([\w\d]+)\.(\d+)\.(\d+)\]/',
    '/\[([\w\d]+)\:([\w\d]+)\.(\d+)\]/',
   );
  $replace = array(
    '<a href="' . $path . '?viewid=$1:$2.$3#$1:$2.$3.$4">$2 $3:$4 ($1)</a>',
    '<a href="' . $path . '?viewid=$1:$2.$3">$2 $3 ($1)</a>'
   );
  $text = preg_replace($search, $replace, $text);

  return $text;
}
/********************* END FILTER ***************************/

/********************* VERSIONS ***************************/
/**
 * Helper functions to get a list of only the allowed version
 */
function abs_biblesearch_allowed_versions() {
  $allowed = variable_get('abs_biblesearch_allowed_versions', array('notset' => TRUE));

  // If the admin hasn't yet set an allowed list of versions, get the full list of versions and return that.
  // This will make new versions that become available automatically show up.
  if (isset($allowed['notset']) && TRUE == $allowed['notset']) {
    $allowed = abs_biblesearch_versions(FALSE);
    // Needs just a little rewrite to be the correct format.
    foreach ($allowed as $key => $name) {
      $allowed[$key] = $key;
    }
    return $allowed;
  }

  // The admin has set a specific list of allowed versions.  Remove any that are set to 0.
  foreach ($allowed as $key => $value) {
    if ("0" == $value) {
      unset($allowed[$key]);
    }
  }
  return $allowed;
}

/**
 * Helper functions to get a list of all versions, with their long name
 */
function abs_biblesearch_versions($filter = TRUE) {
  $xml = abs_biblesearch_get_versions_xml();
  if (NULL == $xml) {
    return array();
  }

  $versions = array();
  // Avoid an infinite loop
  if ($filter) {
    $allowed_versions = abs_biblesearch_allowed_versions();
  }
  foreach ($xml->version as $version) {
    $id = (string) $version->id;
    if (! $filter || in_array($id, $allowed_versions)) {
      $versions[$id] = (string) "($id) " . $version->name;
    }
  }

  // Don't cache the versions array since we need to extract the fums every time the data is
  // used, not just every api call.
  abs_biblesearch_set_fums($xml->meta->fums);
  return $versions;
}

/**
 * Helper functions to get a list of all versions with their complete info
 */
function abs_biblesearch_versions_complete() {
  $xml = abs_biblesearch_get_versions_xml();
  if (NULL == $xml) {
    return array();
  }

  $versions = $xml->xpath('version');

  for ($i = count($versions) - 1; $i>= 0; $i--) {
    if (! in_array($versions[$i]->id, abs_biblesearch_allowed_versions())) {
      unset($versions[$i]);
    }
  }

  // Can't cache the versions array since we need to extract the fums every time the data is
  // used, not just every api call.
  abs_biblesearch_set_fums($xml->meta->fums);

  return $versions;
}

/**
 * Helper functions to get / cache a list of all versions xml
 */
function abs_biblesearch_get_versions_xml() {
  $cache_key = 'abs_biblesearch_get_versions_xml';
  $data = cache_get($cache_key);

  if ($data and $data != '') {
    return simplexml_load_string($data->data);
  }

  else {
    $api = abs_biblesearch_get_api();

    try {
      $v = new ABS_Version($api);
      $xml = $v->listVersions();

      cache_set($cache_key, $xml->asXML(), 'cache', time() + 86400); //cache for a day
      return $xml;
    }
    catch (Exception $ex) {
      drupal_set_message(t("Unable to retrieve version list from Biblesearch API"), "error");
      return NULL;
    }
  }
}
/********************* END VERSIONS ***************************/

/**
 * Helper function to convert xml to an array of verse
 */
function abs_biblesearch_verse_xml_to_array($verses) {
  $ret = array();

  foreach ($verses as $verse) {
    $ret[] = abs_biblesearch_format_verse($verse);
  }
  return $ret;
}

/**
 * Helper function to format a single verse's xml as an array
 */
function abs_biblesearch_format_verse($verse) {
  list($version, $book, $chapter, $verse_number) = abs_biblesearch_parse_id($verse->id);
  $versions = abs_biblesearch_versions();

  $next_id = (string) $verse->next->verse->id;
  $prev_id = (string) $verse->previous->verse->id;
  $next = '';
  $prev = '';

  if ($next_id) {
    $next = abs_biblesearch_build_verse_url((string) $verse->next->verse->name, $next_id);
  }

  if ($prev_id) {
    $prev = abs_biblesearch_build_verse_url((string) $verse->previous->verse->name, $prev_id);
  }
  $text = (string) $verse->text;
  $plain_text = strip_tags($text);

  return (object) array(
    'id'         => (string) $verse->id,
    'version'    => $versions[$version],
    'book'      => abs_biblesearch_get_book_name($book),
    'chapter'   => $chapter,
    'verse'     => $verse_number,
    'text'      => $text,
    'plain_text' => $plain_text,
    'reference' => (string) $verse->reference,
    'parent'    => (string) $verse->parent->chapter->id,
    'next'      => $next,
    'prev'      => $prev,
 );
}

/********************* AJAX ***************************/
/*
 * Ajax function to return alternate versions of a specific verse by verse id
 */
function abs_biblesearch_ajax_verse_versions($id, $versions) {
  list($version, $book, $chapter, $verse_number) = abs_biblesearch_parse_id($id);

  /* Get all the available versions, then pair it down to only the ones that are requested via the passed
  * in variable.  Finally remove the one that is already being displayed. */
  $possibleversions = abs_biblesearch_versions();
  $versions = explode(',', $versions);
  foreach ($possibleversions as $abbr => $name) {
    if (! in_array($abbr, $versions)) {
      unset($possibleversions[$abbr]);
    }
  }
  unset($possibleversions[$version]);

  $verses = array();
  foreach ($possibleversions as $abbr => $name) {
    if ($verse = abs_biblesearch_get_verse($abbr, $book, $chapter, $verse_number)) {
      $verses[] = abs_biblesearch_format_verse($verse);
    }
  }

  echo theme('abs_biblesearch_ajax_verse_versions', array('verses' => $verses))
    . abs_biblesearch_get_fums(TRUE);
  exit;
}

/*
 * Ajax function to return all available version
 */
function abs_biblesearch_ajax_versions() {
  echo theme('abs_biblesearch_ajax_versions', array('versions' => abs_biblesearch_versions_complete()))
    . abs_biblesearch_get_fums(TRUE);
  exit;
}

/*
 * Ajax function to return books in a testament for a version
 */
function abs_biblesearch_ajax_version_booksinatestament($version, $testament) {
  $api = abs_biblesearch_get_api();

  $version_object = new ABS_Version($api);

  $booksxml = $version_object->books($version, $testament);
  echo theme('abs_biblesearch_ajax_version_booksinatestament', array('books' => $booksxml))
    . abs_biblesearch_get_fums(TRUE);
  exit;
}

/*
 * Ajax function to return chapters in a book for a version
 */
function abs_biblesearch_ajax_version_chaptersinabook($version, $book) {
  $api = abs_biblesearch_get_api();

  $chapter_object = new ABS_Chapter($api);

  $chaptersxml = $chapter_object->listChapters($version, $book);
  abs_biblesearch_set_fums($chaptersxml->meta->fums);
  echo theme('abs_biblesearch_ajax_version_chaptersinabook', array('chapters' => $chaptersxml))
   . abs_biblesearch_get_fums(TRUE);
  exit;
}
/********************* END AJAX ***************************/

/**
 * Helper function to get a single verse from the API
 */
function abs_biblesearch_get_verse($version, $book, $chapter, $verse_number) {

  $api = abs_biblesearch_get_api();
  $verse_object = new ABS_Verse($api);

  $cache_id = "$version:$book:$chapter:$verse";
  $data = cache_get($cache_id);

  $error = FALSE;
  $verse_number = (int) $verse_number;
  $chapter = (int) $chapter;

  if ($data) {
    $xml = $verse_object->loadXml($data->data);
    abs_biblesearch_set_fums($xml->meta->fums);
  }
  else {
    $verse_object->setVersion($version);
    $verse_object->setBook($book);
    $verse_object->setChapter($chapter);

    try {
      $xml = $verse_object->show($verse_number);
      abs_biblesearch_set_fums($xml->meta->fums);
      cache_set($cache_id, $xml->asXML(), 'cache', CACHE_PERMANENT);
    }
    catch (Exception $e) {
      $error = $e->getMessage();
    }
  }
  if ($error) {
    return FALSE;
  }

  $verse = abs_biblesearch_format_verse($xml->verse);
  return $verse;
}

/**
 * Helper function to build a verse URL
 */
function abs_biblesearch_build_verse_url($text, $id) {
  list($v, $b, $c, $verse) = abs_biblesearch_parse_id($id);
  $url = implode('', array('bible/verses/',
    drupal_strtolower($v),
    '/',
    drupal_strtolower($b),
    '/',
    $c,
    '/',
    $verse,
   ));
  return l($text, $url);
}

/**
 * Helper function to parse an id value return in xml
 * into its constituent part
 */
function abs_biblesearch_parse_id($id) {
  return preg_split("/(:|\.)/", $id);
}

/**
 * Helper function for pagination
 */
function abs_biblesearch_paginate($keys, $total_records, $limit = 50, $offset = 1) {
  //$targetoffset = '/bible/search/' . urlencode($keys);
  //$targetoffset = $_REQUEST['q'];
  $targetoffset = "";

  $paramstr = abs_biblesearch_build_params();
  if (!empty($paramstr)) {
    $paramstr = '&' . $paramstr;
  }

  $stages = 3;
  if ($offset) {
    $start = ($offset - 1) * $limit;
  }
  else {
    $start = 0;
  }

  // Initial offset num setup
  if ($offset == 0) {
    $offset = 1;
  }
  $prev = $offset - 1;
  $next = $offset + 1;
  $lastoffset = ceil($total_records/$limit);
  $LastPagem1 = $lastoffset - 1;

  $paginate = '';

  if ($lastoffset > 1) {
    $paginate .= "<div class='paginate'>";
    // Previous
    if ($offset > 1) {
      $paginate .= '&laquo; <a href="' . $targetoffset . '?offset=' . $prev . $paramstr . '">Prev</a>';
    }
    else{
      $paginate .= '<span class="disabled">&laquo; Prev</span>';
    }
    // Pages
    if ($lastoffset < 7 + ($stages * 2)) {  // Not enough offsets to breaking it up
      for ($counter = 1; $counter <= $lastoffset; $counter++) {
        if ($counter == $offset) {
          $paginate .= "<span class='current'>$counter</span>";
        }
        else {
          $paginate .= '<a href="' . $targetoffset . '?offset=' . $counter . $paramstr . '">' . $counter . "</a>";
        }
      }
    }
    elseif ($lastoffset > 5 + ($stages * 2)) {  // Enough offsets to hide a few?
      // Beginning only hide later offset
      if ($offset < 1 + ($stages * 2)) {
        for ($counter = 1; $counter < 4 + ($stages * 2); $counter++) {
          if ($counter == $offset) {
            $paginate .= "<span class='current'>$counter</span>";
          }
          else {
            $paginate .= '<a href="' . $targetoffset . '?offset=' . $counter . $paramstr . '">' . $counter . "</a>";
          }
        }
        $paginate .= "...";
        $paginate .= '<a href="' . $targetoffset . '?offset=' . $LastPagem1 . $paramstr . '">' . $LastPagem1 . '</a>';
        $paginate .= '<a href="' . $targetoffset . '?offset=' . $lastoffset . $paramstr . '">' . $lastoffset . '</a>';
      }
      // Middle hide some front and some back
      elseif ($lastoffset - ($stages * 2) > $offset && $offset > ($stages * 2)) {
        $paginate .= '<a href="' . $targetoffset . $paramstr . '?offset=1">1</a>';
        $paginate .= '<a href="' . $targetoffset . $paramstr . '?offset=2">2</a>';
        $paginate .= "...";
        for ($counter = $offset - $stages; $counter <= $offset + $stages; $counter++) {
          if ($counter == $offset) {
            $paginate .= "<span class='current'>$counter</span>";
          }
          else {
            $paginate .= '<a href="' . $targetoffset . '?offset=' . $counter . $paramstr . '">' . $counter . "</a>";
          }
        }
        $paginate .= "...";
        $paginate .= '<a href="' . $targetoffset . '?offset=' . $LastPagem1 . $paramstr . '">' . $LastPagem1 . '</a>';
        $paginate .= '<a href="' . $targetoffset . '?offset=' . $lastoffset . $paramstr . '">' . $lastoffset . '</a>';
      }
      // End only hide early offset
      else {
        $paginate .= '<a href="' . $targetoffset . $paramstr . '?offset=1">1</a>';
        $paginate .= '<a href="' . $targetoffset . $paramstr . '?offset=2">2</a>';
        $paginate .= "...";
        for ($counter = $lastoffset - (2 + ($stages * 2)); $counter <= $lastoffset; $counter++) {
          if ($counter == $offset) {
            $paginate .= "<span class='current'>$counter</span>";
          }
          else {
            $paginate .= '<a href="' . $targetoffset . '?offset=' . $counter . $paramstr . '">' . $counter . "</a>";
          }
        }
      }
    }
    if ($offset < $counter - 1) {
      $paginate .= '<a href="' . $targetoffset . '?offset=' . $next . $paramstr . '">next</a> &raquo;';
    }
    else {
      $paginate .= "<span class='disabled'>next &raquo;</span>";
    }
    $paginate .= "</div>";
  }

  return "$paginate";
}

/**
 * Build params for search URL
 *
  * keyword: the words(s) you are searching for. This parameter must be provided.
  * precision: may be "all" to return search results with all keywords or "any" to return search results where any keywords appear
  * exclude: any keywords that should not appear in the search result
  * spelling: may be "yes" to search for keywords like the terms you submitted if your keywords return no result
  * versions: may be one or several of the version "version" value
  * language: may be one or several of version "language" value
  * testament: may be one or several of the book "testament" value
  * book: may be one or several of the book "abbreviation" value
  * sort_order: may be either "canonical" or "relevance"
  * offset: may be an integer to request records returned after this number of records. That is, if the offset is 1000, the records returned will start with the one thousand first record.
  * limit: may be an integer to request a maximum number of records be returned. If provided, limit must be less than or equal to 500.
 */
function abs_biblesearch_build_params($ignore = '') {
  $keys = array('keys',
         'precision',
         'exclude',
         'spelling',
         'versions',
         'language',
         'testament',
         'book',
         'sort_order');
  if ($ignore != '') {
    unset($keys[array_search($ignore, $keys)]);
  }

  $params = array();
  $paramstr = '';
  if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $keys[] = 'page';
    $data = $_POST;
  }
  else {
    $data = $_GET;
  }
  foreach ($keys as $key) {
    if (isset($data[$key]) && ! empty($data[$key])) {
      if (is_array ($data[$key])) {
        $params[] = $key . '=' . urlencode(implode(',', $data[$key]));
      }
      else {
        $params[] = $key . '=' . urlencode($data[$key]);
      }
    }
  }

  if (count($params) > 0) {
    $paramstr = implode('&', $params);
  }

  return $paramstr;
}

function abs_biblesearch_build_hidden_inputs() {
  $keys = array(
    'keys',
    'precision',
    'exclude',
    'spelling',
    'versions',
    'language',
    'testament',
    'book',
    'sort_order');
  $params = array();
  $paramstr = '';
  if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $keys[] = 'page';
    $data = $_POST;
  }
  else {
    $data = $_GET;
  }

  foreach ($keys as $key) {
    if (isset($data[$key]) && ! empty($data[$key])) {
      if (is_array($data[$key])) {
        $paramstr .= '<input type="hidden" name="' . $key . '" value="' . join(",", $data[$key]) . '"/>';
      }
      else {
        $paramstr .= '<input type="hidden" name="' . $key . '" value="' . str_replace('"', '&quot;', $data[$key]) . '"/>';
      }
    }
  }

  return $paramstr;
}

/**
 * Helper function to get full name of book of Bible
 */
function abs_biblesearch_get_book_name($abbr) {
  $books = abs_biblesearch_books();
  return isset($books[$abbr]) ? $books[$abbr] : FALSE;
}

/**
 * Helper function to return api object
 */
function abs_biblesearch_get_api() {
  $key = variable_get('abs_biblesearch_api_key', '');

  $library_path = libraries_get_path('abs_biblesearch');
  require_once("$library_path/Exception.php");
  require_once("$library_path/Request.php");
  require_once("$library_path/Response.php");
  require_once("$library_path/Api.php");
  require_once("$library_path/Base.php");
  require_once("$library_path/Book.php");
  require_once("$library_path/Chapter.php");
  require_once("$library_path/Bookgroup.php");
  require_once("$library_path/Iterator.php");
  require_once("$library_path/Search.php");
  require_once("$library_path/Verse.php");
  require_once("$library_path/Version.php");

  $api = new ABS_Api($key);

  return $api;
}

/**
 * Store collected fair use management data as we go.  This is returned with each api call, and i
 * required to be displayed each time the data is used.
 */
global $_abs_biblesearch_fums;
$_abs_biblesearch_fums = '';

function abs_biblesearch_get_fums($filter = FALSE) {
  global $_abs_biblesearch_fums;
  $value = $_abs_biblesearch_fums;
  $_abs_biblesearch_fums = '';
  if ($filter) {
    $value = preg_replace('/\n/g', '', $value);
    $value = preg_replace('/<script>.+?<noscript>/gm', '', $value);
    $value = preg_replace('/</noscript>/g', '', $value);
  }
  return $value;
}

function abs_biblesearch_set_fums($data = '') {
  global $_abs_biblesearch_fums;
  $data = str_replace("\n", ' ', $data);
  if ($data != '' && strpos($_abs_biblesearch_fums, $data) === FALSE) {
    $_abs_biblesearch_fums .= $data;
  }
  return $_abs_biblesearch_fums;
}

/**
 * Simple helper to return validate list of Bible book
 */
function abs_biblesearch_books() {
  return array(
  'Gen' => 'Genesis',
  'Exod' => 'Exodus',
  'Lev' => 'Leviticus',
  'Num' => 'Numbers',
  'Deut' => 'Deuteronomy',
  'Josh' => 'Joshua',
  'Judg' => 'Judges',
  'Ruth' => 'Ruth',
  '1Sam' => '1 Samuel',
  '2Sam' => '2 Samuel',
  '1Kgs' => '1 Kings',
  '2Kgs' => '2 Kings',
  '1Chr' => '1 Chronicles',
  '2Chr' => '2 Chronicles',
  'Ezra' => 'Ezra',
  'Neh' => 'Nehemiah',
  'Esth' => 'Esther',
  'Job' => 'Job',
  'Ps' => 'Psalms',
  'Prov' => 'Proverbs',
  'Eccl' => 'Ecclesiastes',
  'Song' => 'Song of Solomon',
  'Isa' => 'Isaiah',
  'Jer' => 'Jeremiah',
  'Lam' => 'Lamentations',
  'Ezek' => 'Ezekiel',
  'Dan' => 'Daniel',
  'Hos' => 'Hosea',
  'Joel' => 'Joel',
  'Amos' => 'Amos',
  'Obad' => 'Obadiah',
  'Jonah' => 'Jonah',
  'Mic' => 'Micah',
  'Nah' => 'Nahum',
  'Hab' => 'Habakkuk',
  'Zeph' => 'Zephaniah',
  'Hag' => 'Haggai',
  'Zech' => 'Zechariah',
  'Mal' => 'Malachi',
  'Matt' => 'Matthew',
  'Mark' => 'Mark',
  'Luke' => 'Luke',
  'John' => 'John',
  'Acts' => 'Acts',
  'Rom' => 'Romans',
  '1Cor' => '1 Corinthians',
  '2Cor' => '2 Corinthians',
  'Gal' => 'Galatians',
  'Eph' => 'Ephesians',
  'Phil' => 'Philippians',
  'Col' => 'Colossians',
  '1Thess' => '1 Thessalonians',
  '2Thess' => '2 Thessalonians',
  '1Tim' => '1 Timothy',
  '2Tim' => '2 Timothy',
  'Titus' => 'Titus',
  'Phlm' => 'Philemon',
  'Heb' => 'Hebrews',
  'Jas' => 'James',
  '1Pet' => '1 Peter',
  '2Pet' => '2 Peter',
  '1John' => '1 John',
  '2John' => '2 John',
  '3John' => '3 John',
  'Jude' => 'Jude',
  'Rev' => 'Revelation',
  'Tob' => 'Tobit',
  'Jdt' => 'Judith',
  'AddEsth' => 'Additions to Esther',
  'Wis' => 'Wisdom of Solomon',
  'Sir' => 'Sirach/Ecclesiasticus',
  'Bar' => 'Baruch',
  'EpJer' => 'Letter of Jeremiah',
  'PrAzar' => 'Song of the Three Holy Children',
  'Sus' => 'Susanna',
  'Bel' => 'Bel and the Dragon',
  '1Macc' => '1 Maccabees',
  '2Macc' => '2 Maccabees',
  '1Esd' => '1 Esdras',
  '2Esd' => '2 Esdras',
  'PrMan' => 'Prayer of Manasseh',
 );
}
