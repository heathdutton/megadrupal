<?php

/**
 * @file
 * Integrates Drupal with Revive Adserver (formerly OpenX/Openads).
 *
 * Allows users to integerate Drupal with the Revive Adserver
 * (formerly OpenX/Openads)
 *
 * Created on 12.01.2007
 *
 * @author Gerd Riesselmann
 * @author Jeff Warrington (jaydub) is new maintainer March 2008
 *
 */

/**
 * Implements hook_help().
 */
function openads_help($path, $arg) {
  switch ($path) {
    case 'admin/help#openads':
    case 'admin/modules#description':
      return t('<p>The Openads module allows site administrators to integrate Drupal with the Revive Adserver (formerly OpenX/Openads). Revive Adserver ad zones that are configured to be used in with openads module can be shown anywhere in a theme directly using a function call or via Drupal blocks which are automatically created for each Revive Adserver ad zone. Additional information regarding Revive Adserver can be found at the <a href="@revive-site">Revive Adserver website</a>.</p>', array('@revive-site' => url('http://www.revive-adserver.org')));
  }
}

/**
 * Implements hook_theme().
 */
function openads_theme($existing, $type, $theme, $path) {
  return array(
    'openads_admin_settings_form' => array(
      'render element' => 'form',
    ),
    'openads_block' => array(
      'variables' => array('index'),
    ),
    'openads_channel' => array(
      'variables' => array(),
    ),
    'openads_invoke' => array(
      'variables' => array('zoneid', 'code'),
    ),
    'openads_remote' => array(
      'variables' => array('zoneid', 'code'),
    ),
    'openads_local' => array(
      'variables' => array('zoneid'),
    ),
    'openads_xmlrpc' => array(
      'variables' => array('zoneid'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function openads_menu() {
  $items = array();

  $items['admin/config/media/openads'] = array(
    'title' => 'Revive Adserver (OpenX/Openads) configuration',
    'description' => 'Configure Revive Adserver (OpenX/Openads) integration behavior and appearance.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('openads_admin_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM, // optional
  );

  return $items;
}

/**
 * Admin settings callback.
 */
function openads_admin_settings() {
  $form = array();

  $form['adserver'] = array(
    '#type' => 'fieldset',
    '#title' => t('Adserver settings'),
    '#description' => t('Select which delivery method to use - Javascript, Remote, Local or XML-RPC. <strong>Note</strong> Javascript will be used if caching is enabled and the current user is not logged in.'),
    '#collapsible' => TRUE,
  );

  $description = '';
  if (variable_get('openads_delivery_method', 'js') == 'xmlrpc') {
    $libs_available = _openads_xmlrpc_libraries_check();
    foreach ($libs_available as $status) {
      if ($status['missing'] == TRUE) {
        $description .= '<br />' . $status['message'];
      }
    }

    if (drupal_strlen($description)) {
      $description .= '<br /><strong>You will be unable to serve ads until the above missing libraries are added.</strong> The delivery method has been set to the default (Javascript)';
      variable_set('openads_delivery_method', 'js');
    }
  }

  $form['adserver']['openads_delivery_method'] = array(
    '#type' => 'radios',
    '#title' => t('Delivery Method'),
    '#description' => t('Select the delivery method to use. <br/><strong>Note:</strong> To use the Local method Revive Adserver and your banners must be stored on the same machine with the same top level domain. <br/><strong>Note:</strong> To use XML-RPC method you must have the PEAR XML-RPC package installed and the Revive Adserver openads-xmlrpc.inc.php file must be in your PHP include path.') . $description,
    '#options' => array('js' => 'Javascript', 'remote' => 'Remote', 'local' => 'Local', 'xmlrpc' => 'XML-RPC'),
    '#default_value' => variable_get('openads_delivery_method', 'js'),
  );

  $form['adserver']['openads_use_text_below_image'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable Revive Adserver "Text below Image"'),
    '#description' => t('Revive Adserver is able to show a user defined text below each banner. Click this checkbox to enable this feature. Only availble on Javascript, Local and XML-RPC delivery methods.'),
    '#default_value' => variable_get('openads_use_text_below_image', 0),
  );
  $form['adserver']['server_access_paths'] = array(
    '#type' => 'fieldset',
    '#title' => t('Revive Adserver Server Access Paths'),
    '#description' => t('This group of settings defines access paths to specific elements of your Revive Adserver server. These settings are located on your Revive Adserver server at <strong>Configuration -> Global Settings -> Banner Delivery Settings</strong>'),
  );
  $form['adserver']['server_access_paths']['openads_delivery_url'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('openads_delivery_url', ''),
    '#title' => t('The Revive Adserver delivery url'),
    '#description' => t('The Revive Adserver server address, for example "ads.example.org/delivery". "http://" is automatically prefixed.'),
    '#required' => TRUE,
  );
  $form['adserver']['server_access_paths']['openads_delivery_url_https'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('openads_delivery_url_https', ''),
    '#title' => t('The Revive Adserver https delivery url'),
    '#description' => t('The Revive Adserver server address, for example "ads.example.org/delivery". "https://" is automatically prefixed.')
  );

  $form['adserver']['javascript_options'] = array(
    '#type' => 'fieldset',
    '#title' => t('Javascript options'),
    '#description' => t('The following options affect the Javascript invocation method.'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['adserver']['javascript_options']['openads_js_delivery_filename'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('openads_js_delivery_filename', 'ajs.php'),
    '#title' => t('The Revive Adserver JavaScript delivery filename'),
    '#description' => t('The Revive Adserver JavaScript delivery filename for example "ajs.php"'),
    '#required' => TRUE,
  );

  $form['adserver']['remote_options'] = array(
    '#type' => 'fieldset',
    '#title' => t('Remote options'),
    '#description' => t('The following options affect the Remote invocation method.'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['adserver']['remote_options']['openads_remote_delivery_click_filename'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('openads_remote_delivery_click_filename', 'ck.php'),
    '#title' => t('The Revive Adserver Remote delivery click filename'),
    '#description' => t('The Revive Adserver Remote delivery click filename for example "ck.php"')
  );
  $form['adserver']['remote_options']['openads_remote_delivery_view_filename'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('openads_remote_delivery_view_filename', 'avw.php'),
    '#title' => t('The Revive Adserver Remote delivery view filename'),
    '#description' => t('The Revive Adserver Remote delivery view filename for example "avw.php"')
  );

  $form['adserver']['local_options'] = array(
    '#type' => 'fieldset',
    '#title' => t('Local options'),
    '#description' => t('The following options affect the Local invocation method.'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['adserver']['local_options']['openads_local_delivery_base_path'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('openads_local_delivery_base_path', ''),
    '#title' => t('The Revive Adserver Local delivery base path'),
    '#description' => t('The base path of the Revive Adserver installation for example "/opt/www/revive-adserver.example.com"')
  );
  $form['adserver']['local_options']['openads_local_delivery_filename'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('openads_local_delivery_filename', 'alocal.php'),
    '#title' => t('The Revive Adserver Local delivery filename'),
    '#description' => t('The Revive Adserver Local delivery filename for example "alocal.php"')
  );

  $form['adserver']['xmlrpc_options'] = array(
    '#type' => 'fieldset',
    '#title' => t('XML-RPC options'),
    '#description' => t('The following options affect the XML-RPC invocation method.'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['adserver']['xmlrpc_options']['openads_xmlrpc_delivery_filename'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('openads_xmlrpc_delivery_filename', 'axmlrpc.php'),
    '#title' => t('The Revive Adserver XML-RPC delivery filename'),
    '#description' => t('The Revive Adserver XML-RPC delivery filename for example "axmlrpc.php"')
  );
  $form['adserver']['xmlrpc_options']['openads_xmlrpc_port'] = array(
    '#type' => 'textfield',
    '#title' => t('XML-RPC Port'),
    '#description' => t('If your XML-RPC server is on a non-standard port, specify it here.'),
    '#default_value' => variable_get('openads_xmlrpc_port', 80),
    '#size' => 4,
  );
  $form['adserver']['xmlrpc_options']['openads_xmlrpc_use_ssl'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use SSL'),
    '#description' => t('If you wish to use SSL to connect to your Revive Adserver XML-RPC server, check this option'),
    '#default_value' => variable_get('openads_xmlrpc_use_ssl', ''),
  );
  $form['adserver']['xmlrpc_options']['openads_xmlrpc_timeout'] = array(
    '#type' => 'textfield',
    '#title' => t('Timeout'),
    '#description' => t('Set the timeout in seconds to connect to the Revive Adserver XML-RPC server'),
    '#default_value' => variable_get('openads_xmlrpc_timeout', 2),
    '#size' => 4,
  );

  $form['publisher'] = array(
    '#type' => 'fieldset',
    '#title' => t('Affiliate'),
    '#description' => t('The following settings can be copied from the websites page of your Revive Adserver server.'),
    '#collapsible' => TRUE,
  );
  $form['publisher']['openads_id'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('openads_id', ''),
    '#title' => t('Affiliate ID'),
    '#description' => t("This is the affiliate ID of the website you wish to serve ads from."),
    '#required' => TRUE,
    '#size' => 6,
  );
  $form['publisher']['openads_num_zones'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('openads_num_zones', '5'),
    '#title' => t('The number of zones defined'),
    '#description' => t('This is the number of zones you can enter below'),
    '#size' => 6,
  );

  $form['openads_zones'] = array(
    '#theme' => 'openads_admin_settings_form',
    '#type' => 'fieldset',
    '#title' => t('Zones'),
    '#description' => t('Configure your zones here. ' .
            '<ul>' .
            '<li>Both zone id and code are generated by your adserver, so copy it from there.</li>' .
            '<li>The name can be freely chosen, and you are able to invoke ads using this name later one.</li>' .
            '<li>For each user role, you can either show (checked) or hide (unchecked) ad of the according zone</li>' .
            '</ul>' .
            'Once you have configured your zones, you can invoke them within your templates using either the ' .
            'index number (0-4, for example, this is the first column) or by the names you gave your zones. ' .
            'The according code is <strong>&lt;?php print openads_invoke(0); ?&gt;</strong> or <strong>&lt;?php print openads_invoke("my zone name"); ?&gt;</strong>'),
    '#collapsible' => TRUE,
  );

  $zones = openads_get_zones();
  $roles = user_roles();
  $i = 0;

  foreach ($zones as $zone) {
    $form['openads_zones'][$i]['openads_zones_id_' . $i] = array(
      '#type' => 'textfield',
      '#default_value' => $zone['id'],
      '#size' => 6,
    );
    $form['openads_zones'][$i]['openads_zones_name_' . $i] = array(
      '#type' => 'textfield',
      '#default_value' => $zone['name'],
      '#size' => 20,
    );
    $form['openads_zones'][$i]['openads_zones_code_' . $i] = array(
      '#type' => 'textfield',
      '#default_value' => $zone['code'],
      '#size' => 10,
    );

    foreach ($roles as $key => $display) {
      $element_key = 'openads_zones_roles_' . $key . '_' . $i;
      $form['openads_zones'][$i][$element_key] = array(
        '#type' => 'checkbox',
        '#default_value' => $zone['roles'][$key],
      );
    }

    $i++;
  }

  return system_settings_form($form);
}

/**
 * admin_settings form validate
 */
function openads_admin_settings_validate($form, &$form_state) {
  switch ($form_state['values']['openads_delivery_method']) {
    case 'remote':
      if (!$form_state['values']['openads_remote_delivery_click_filename']) {
        form_set_error('openads_remote_delivery_click_filename', t('For Remote delivery you must specifiy the Revive Adserver remote delivery "click" filename.'));
      }

      if (!$form_state['values']['openads_remote_delivery_view_filename']) {
        form_set_error('openads_remote_delivery_view_filename', t('For Remote delivery you must specifiy the Revive Adserver remote delivery "view" filename.'));
      }
      break;

    case 'local':
      if (!$form_state['values']['openads_local_delivery_filename']) {
        form_set_error('openads_local_delivery_filename', t('For Local delivery you must specifiy the Revive Adserver local delivery filename.'));
      }

      if (!file_exists($form_state['values']['openads_local_delivery_base_path'] . '/www/delivery/' . $form_state['values']['openads_local_delivery_filename'])) {
        form_set_error('openads_local_delivery_base_path', t('For Local delivery you must specifiy a valid path to the Revive Adserver installation.'));
      }
      break;

    case 'xmlrpc':
      if (!$form_state['values']['openads_xmlrpc_delivery_filename']) {
        form_set_error('openads_xmlrpc_delivery_filename', t('For XML-RPC delivery you must specifiy the Revive Adserver XML-RPC delivery filename.'));
      }

      if (!is_numeric($form_state['values']['openads_xmlrpc_port'])) {
        form_set_error('openads_xmlrpc_port', t('For XML-RPC delivery you must specifiy a valid number for the Revive Adserver XML-RPC port number.'));
      }

      if (!is_numeric($form_state['values']['openads_xmlrpc_timeout'])) {
        form_set_error('openads_xmlrpc_timeout', t('For XML-RPC delivery you must specifiy a valid number for the Revive Adserver XML-RPC connection timeout.'));
      }
      break;
  }
}

/**
 * Theme function for the admin settings form
 */
function theme_openads_admin_settings_form($vars) {
  $output = '';

  $roles = user_roles();
  foreach (element_children($vars['form']) as $child) {
    $element = $vars['form'][$child];
    $id_col = 'openads_zones_id_' . $child;
    $code_col = 'openads_zones_code_' . $child;
    $name_col = 'openads_zones_name_' . $child;

    if (isset($element[$id_col]) && is_array($element[$id_col])) {
      $arr = array(
        check_plain($child),
        drupal_render($element[$id_col]),
        drupal_render($element[$name_col]),
        drupal_render($element[$code_col]),
      );

      foreach ($roles as $key => $rolename) {
        $element_key = 'openads_zones_roles_' . $key . '_' . $child;
        $arr[] = drupal_render($element[$element_key]);
      }

      $rows[] = $arr;
    }
  }

  $header = array(t('Number'), t('Zone ID'), t('Name'), t('Code'));
  foreach ($roles  as $key => $rolename) {
    $header[] = $rolename;
  }

  $output .= theme('table', array('header' => $header, 'rows' => $rows));

  return $output;
}

/**
 * Implements hook_block_info().
 */
function openads_block_info() {
  $zones = openads_get_zones();

  foreach ($zones as $index => $zone) {
    if ($zone['id']) {
      $blocks[$index] = array(
        'info' => t('Revive Adserver Zone @zone (@name)', array('@zone' => $zone['id'], '@name' => $zone['name'] != '' ? $zone['name'] : 'untitled')),
        'cache' => DRUPAL_NO_CACHE,
      );
    }
  }

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function openads_block_view($delta = '') {
  $block = array(
    'subject' => t('Advertising'),
    'content' => theme('openads_block', array('index' => $delta)),
  );

  return $block;
}

/**
 * Theme function for openads_block()
 */
function theme_openads_block($vars) {
  return openads_invoke($vars['index']);
}

/**
 * Implements hook_init()/
 *
 * Injects Javascript variables to be used by ad blocks.
 */
function openads_init() {
  $channel  = '
<script type="text/javascript">
  var az_u = "' . _openads_trim_path(variable_get('openads_delivery_url', '')) . '";
  var az_us = "' . _openads_trim_path(variable_get('openads_delivery_url_https', '')) . '";
  var az_js = "' . variable_get('openads_js_delivery_filename', '') . '";
  var az_wt = "' . variable_get('openads_use_text_below_image', 0) . '";
</script>
';

  drupal_add_html_head(
    array(
      '#type' => 'markup',
      '#markup' => $channel,
    ),
    'openads-variables'
  );
  drupal_add_js(drupal_get_path('module', 'openads') . '/openads.js');
}

/**
 * Prepare a server path
 */
function _openads_trim_path($path) {
  return trim($path, '/') . '/';
}

/**
 * Returns all stored zones
 */
function openads_get_zones() {
  static $ret = NULL;

  if ($ret) {
    return $ret;
  }

  $c = variable_get('openads_num_zones', 5);
  $ret = array();
  for ($i = 0; $i < $c; $i ++) {
    $ret[$i]['id'] = variable_get('openads_zones_id_' . $i, NULL);
    $ret[$i]['code'] = variable_get('openads_zones_code_' . $i, NULL);
    $ret[$i]['name'] = variable_get('openads_zones_name_' . $i, NULL);
    $ret[$i]['roles'] = array();

    foreach (user_roles() as $key => $name) {
      $element_key = 'openads_zones_roles_' . $key . '_' . $i;
      $ret[$i]['roles'][$key] = variable_get($element_key, TRUE);
    }
  }

  return $ret;
}

/**
 * Return zone with given index
 */
function openads_get_zone($index_or_key) {
  $zones = openads_get_zones();

  if (isset($zones[$index_or_key])) {
    return $zones[$index_or_key];
  }
  else {
    foreach ($zones as $zone) {
      if ($zone['name'] == $index_or_key) {
        return $zone;
      }
    }
  }

  return array('id' => FALSE, 'code' => FALSE, 'name' => '', 'roles' => array());
}

/**
 * Builds and returns at_channel content
 */
function openads_channel() {
  return theme('openads_channel');
}

/**
 * Theme function for openads_channel().
 */
function theme_openads_channel() {
  global $user;

  $url = check_plain($_GET['q']);
  $channel[] = variable_get('openads_id', '') . '/' . $url;

  if ($user) {
    if ($user->uid == 1) {
      $channel[] = 'type_admin';
    }
    foreach ($user->roles as $roleid => $rolename) {
      $channel[] = 'type_' . str_replace(' ', '_', $rolename);
    }
  }

  $channel[] = 'url_' . $url;

  return implode(',', $channel);
}

/**
 * Builds the call to Revive Adserver
 */
function openads_invoke($index_or_key) {
  global $user;

  $zone = openads_get_zone($index_or_key);
  $id = $zone['id'];
  $code = $zone['code'];

  if (empty($id) || empty($zone)) {
    return '';
  }

  $proceed = FALSE;
  foreach ($user->roles as $key => $value) {
    // If any user roles match, proceed.
    if ($zone['roles'][$key]) {
      $proceed = TRUE;
      break;
    }
  }

  if ($proceed == FALSE) {
    return '';
  }

  return theme('openads_invoke', array('zoneid' => $id, 'code' => $code));
}

/**
 * Theme function for openads_invoke().
 */
function theme_openads_invoke($vars) {
  global $user;

  $delivery_method = variable_get('openads_delivery_method', 'js');

  if (_openads_is_cache_page() || $delivery_method == 'js') {
    $out = "
    <script type=\"text/javascript\"><!--
      az_adjs(" . $vars['zoneid'] . ", '" . $vars['code'] . "');
    --></script>";
    return $out;
  }

  switch ($delivery_method) {
    case 'remote':
      return theme('openads_remote', array('zoneid' => $vars['zoneid'], 'code' => $vars['code']));
      break;
    case 'local':
      return theme('openads_local', array('zoneid' => $vars['zoneid']));
      break;
    case 'xmlrpc':
      return theme('openads_xmlrpc', array('zoneid' => $vars['zoneid']));
      break;
  }

  return $out;
}

/**
 * Theme function for Remote delivery.
 */
function theme_openads_remote($vars) {
  $url = variable_get('openads_delivery_url', '');
  $click = variable_get('openads_remote_delivery_click_filename', 'ck.php');
  $view = variable_get('openads_remote_delivery_view_filename', 'avw.php');

  $out = '<a href="http://' . $url . '/' . $click . '?n=' . $vars['code'] . '&cb=' . REQUEST_TIME . '" target="_blank"><img src="http://' . $url . '/' . $view . '?zoneid=' . $vars['zoneid'] . '&cb=' . REQUEST_TIME . '&n=' . $vars['code'] . '" border="0" alt="" /></a>';

  return $out;
}

/**
 * Theme function for Local delivery.
 */
function theme_openads_local($vars) {
  $url = variable_get('openads_delivery_url', '');
  $path = variable_get('openads_local_delivery_base_path', '');
  $local = variable_get('openads_local_delivery_filename', 'alocal.php');

  if ((@include_once $path . '/www/delivery/' . $local) !== FALSE) {
    if (!isset($ads_context)) {
      $ads_context = array();
    }
    $use_text = variable_get('openads_use_text_below_image', 0);
    $ads_raw = view_local('', $vars['zoneid'], 0, 0, '', '', $use_text, $ads_context);

    return $ads_raw['html'];
  }
  else {
    return '';
  }
}

/**
 * Theme function for XML-RPC delivery.
 */
function theme_openads_xmlrpc($vars) {
  static $oaXmlRpc;
  static $OA_context;

  if (!isset($OA_context)) {
    $OA_context = array();
  }
  if (!$oaXmlRpc) {
    $xmlrpc_settings = _openads_get_xmlrpc_settings();
    $oaXmlRpc = _openads_connect_xmlrpc($xmlrpc_settings);
  }
  $use_text = variable_get('openads_use_text_below_image', 0);
  if ($oaXmlRpc) {
    $ad = $oaXmlRpc->view('zone:' . $vars['zoneid'], 0, '', '', $use_text, $OA_context);
    return $ad['html'];
  }
  else {
    return '';
  }
}

/* private functions */

/**
 * Return the XML-RPC settings
 */
function _openads_get_xmlrpc_settings() {
  $xmlrpc_settings['url'] = variable_get('openads_delivery_url', '');
  list($xmlrpc_settings['host'], $xmlrpc_settings['path']) = explode('/', $xmlrpc_settings['url'], 2);
  $xmlrpc_settings['file'] = variable_get('openads_xmlrpc_delivery_filename', 'axmlrpc.php');
  $xmlrpc_settings['port'] = variable_get('openads_xmlrpc_port', 80);
  $xmlrpc_settings['ssl'] = (variable_get('openads_xmlrpc_use_ssl', 0) == 0) ? FALSE : TRUE ;
  $xmlrpc_settings['timeout'] = variable_get('openads_xmlrpc_timeout', 2);

  return $xmlrpc_settings;
}

/**
 * Connect to Revive Adserver via XML-RPC
 */
function _openads_connect_xmlrpc($xmlrpc_settings) {
  $oaXmlRpc = NULL;

  if ((@include_once 'openads-xmlrpc.inc.php') !== FALSE) {
    $oaXmlRpc = new OA_XmlRpc($xmlrpc_settings['host'], '/' . $xmlrpc_settings['path'] . '/' . $xmlrpc_settings['file'], $xmlrpc_settings['port'], $xmlrpc_settings['ssl'], $xmlrpc_settings['timeout']);
  }

  return $oaXmlRpc;
}

/**
 * Test to see if page request is destined for cache.
 */
function _openads_is_cache_page() {
  global $user;

  $cache = variable_get('cache', 0);
  if ($cache != 0 && isset($user->uid) && $user->uid == 0) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Check to see if required libraries for XML-RPC are installed.
 */
function _openads_xmlrpc_libraries_check() {
  $results = array();
  $include_paths = explode(':', get_include_path());

  $libs = array(
    'XML/RPC.php' => t('<span class="error">PEAR XML-RPC appears to not be installed!</span> You must install the <a href="@link">PEAR XML-RPC</a> package.', array('@link' => 'http://pear.php.net/package.XML_RPC')),
    'openads-xmlrpc.inc.php' => '<span class="error">openads-xmlrpc.inc.php file appears to not be installed!</span> You must put the file openads-xmlrpc.inc.php from the Revive Adserver installation files into your PHP path.',
  );

  foreach ($libs as $lib => $message) {
    $results[$lib]['missing'] = TRUE;
    $results[$lib]['message'] = $message;
    foreach ($include_paths as $path) {
      if ($path == '.') {
        $path = drupal_get_path('module', 'openads');
      }
      if (file_exists($path . '/' . $lib)) {
        $results[$lib]['missing'] = FALSE;
        break;
      }
    }
  }

  return $results;
}