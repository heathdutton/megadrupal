<?php

/**
 * @file
 * Defines ordered list field type.
 */


/**
 * Implements hook_elements().
 */
function ordered_list_element_info() {
  return array(
    'ordered_list' => array(
      '#input' => TRUE,
      '#element_validate' => array('ordered_list_element_validate'),
      '#theme' => 'ordered_list_element',
    ),
  );
}


/**
 * Validation function for the ordered_list form element.
 */
function ordered_list_element_validate($element, &$form_state) {
  foreach ($element['#value'] as $value) {
    if (!isset($element['#values'][$value['value']])) {
      form_error($element, t('An illegal choice has been detected.'));
    }
  }
}


/**
 * Implements form_type_hook_value().
 */
function form_type_ordered_list_value($element, $edit = FALSE) {
  $values = func_num_args() == 1 ? $element['#default_value'] : $edit;
  if ($values) {
    $values = explode('|', $values);
    foreach ($values as &$value) {
      $value = array(
        'value' => $value,
      );
    }
  }
  else {
    $values = array();
  }

  return $values;
}


/**
 * Implements hook_theme().
 */
function ordered_list_theme() {
  $registry = array();

  $registry['ordered_list_element'] = array(
    'render element' => 'element',
  );

  return $registry;
}


/**
 * Renders ordered list element.
 */
function theme_ordered_list_element($vars) {
  $element = $vars['element'];
  $selected = $available = array();
  $i = 0;
  foreach ($element['#values'] as $key => $value) {
    $available[$key] = array(
      'key' => $key,
      'data' => t($value),
      'index' => $i++,
    );
  }
  $raw_values = $element['#value'] ? $element['#value'] : $element['#default_value'];
  $values = array();
  foreach ($raw_values as $value) {
    if (!is_array($value)) {
      $values[] = array('value' => $value);
    }
    else {
      $values[] = $value;
    }
  }
  $hidden = array();
  foreach ($values as $value) {
    $value = $value['value'];
    if (isset($available[$value])) {
      $hidden[] = $value;
      $selected[] = $available[$value];
      unset($available[$value]);
    }
  }
  $available = theme('item_list', array('items' => $available));
  $selected = theme('item_list', array('items' => $selected));
  $output = '';
  if (isset($element['#field_prefix'])) {
    $output .= '<span class="field-prefix">' . $element['#field_prefix'] . '</span> ';
  }
  $name = isset($element['#name']) ? $element['#name'] : $element['#id'];
  $output .= '<div class="wrapper"><div class="buttons">' . ordered_list_button('up') . ordered_list_button('down')
    . '</div><div class="items-selected"><div class="label">'
    . t('Selected Items') . '</div>' . $selected . '</div><div class="buttons">'
    . ordered_list_button('left') . ordered_list_button('right')
    . '</div><div class="items-available"><div class="label">'
    . t('Available Items') . '</div>' . $available
    . '</div><input type="hidden" name="' . $name . '" id="' . $element['#id']
    . '" value="' . implode('|', $hidden) . '"/></div>';
  if (isset($element['#field_suffix'])) {
    $output .= '<span class="field-suffix">' . $element['#field_suffix'] . '</span>';
  }
  $element['#children'] = $output;
  $element['#theme'] = 'form_element';
  $path = drupal_get_path('module', 'ordered_list');
  $element['#attached'] = array(
    'css' => array($path . '/css/ordered_list.css'),
    'js' => array($path . '/js/ordered_list.js'),
  );

  return drupal_render($element);
}


/**
 * Renders widget button.
 */
function ordered_list_button($class) {
  return '<div class="button-' . $class . '">' . l(t($class), '', array(
    'external' => TRUE,
    'fragment' => FALSE,
  )) . '</div>';
}


/**
 * Implements hook_field_info().
 */
function ordered_list_field_info() {
  return array(
    'ordered_list' => array(
      'label' => t('Ordered List'),
      'description' => t('This field stores text values from a list of allowed "value => label" pairs, keeping the order of the selected values.'),
      'settings' => array(
        'values_source' => '',
        'values_list' => array(),
        'values_function' => '',
      ),
      'default_widget' => 'ordered_list_default',
      'default_formatter' => 'ordered_list_default',
    ),
  );
}


/**
 * Implements hook_field_settings_form().
 */
function ordered_list_field_settings_form($field, $instance, $has_data) {
  $settings = $field['settings'];
  $form = array(
    '#element_validate' => array('ordered_list_values_setting_validate'),
  );

  $form['values_source'] = array(
    '#type' => 'radios',
    '#title' => t('Source of values'),
    '#default_value' => $settings['values_source'],
    '#options' => array(
      0 => t('List of values'),
      1 => t('Values function'),
    ),
  );

  $form['values_list'] = array(
    '#type' => 'textarea',
    '#title' => t('Allowed values list'),
    '#default_value' => ordered_list_allowed_values_string($settings['values_list']),
    '#rows' => 10,
    '#description' => '<p>' . t('The possible values this field can contain. Enter one value per line, in the format key|label.')
    . '<br/>' . t('The key is the stored value. The label will be used in displayed values and edit forms.')
    . '<br/>' . t('The label is optional: if a line contains a single string, it will be used as key and label.') . '</p>'
    . '<p>' . t('Allowed HTML tags in labels: @tags', array('@tags' => _field_filter_xss_display_allowed_tags())) . '</p>',
    '#states' => array(
      'visible' => array(
        ':input[name="field[settings][values_source]"]' => array('value' => 0),
      ),
    ),
  );

  $form['values_function'] = array(
    '#type' => 'textfield',
    '#title' => t('Allowed values function'),
    '#default_value' => $settings['values_function'],
    '#description' => t('The possible values of this field is being determined by the function. Function must return an array of "value => label" pairs.'),
    '#states' => array(
      'visible' => array(
        ':input[name="field[settings][values_source]"]' => array('value' => 1),
      ),
    ),
  );

  return $form;
}


/**
 * Element validate callback; check that the entered values are valid.
 */
function ordered_list_values_setting_validate($element, &$form_state) {
  $settings = $form_state['values']['field']['settings'];
  if (!$settings['values_source']) {
    $e = $element['values_list'];
    $values = ordered_list_extract_allowed_values($settings['values_list']);
    if (!is_array($values)) {
      form_error($e, t('Allowed values list: invalid values format.'));
    }
    elseif (!$values) {
      form_error($e, t('Allowed values list: no values were specified.'));
    }
    else {
      foreach ($values as $key => $value) {
        if (drupal_strlen($key) > 255) {
          form_error($e, t('Allowed values list: each value must be a string at most 255 characters long.'));
        }
      }
      form_set_value($e, $values, $form_state);
      form_set_value($element['values_function'], '', $form_state);
    }
  }
  else {
    $e = $element['values_function'];
    $function = $settings['values_function'];
    if (empty($function)) {
      form_error($e, t('Allowed values function: values function is not specified.'));
    }
    elseif (!function_exists($function)) {
      form_error($e, t("Allowed values function: specified values function doesn't exist."));
    }
    else {
      $values = $function();
      if (!is_array($values)) {
        form_error($e, t('Allowed values function: invalid values format.'));
      }
      elseif (!$values) {
        form_error($e, t('Allowed values function: no values were specified.'));
      }
      else {
        foreach ($values as $key => $value) {
          if (!is_string($value)) {
            form_error($e, t('Allowed values function: each label must be a string.'));
          }
          if (drupal_strlen($key) > 255) {
            form_error($e, t('Allowed values function: each value must be a string at most 255 characters long.'));
          }
        }
        form_set_value($e, $function, $form_state);
        form_set_value($element['values_list'], array(), $form_state);
      }
    }
  }
}


/**
 * Implements hook_field_update_field().
 */
function ordered_list_field_update_field($field, $prior_field, $has_data) {
  drupal_static_reset('ordered_list_allowed_values');
}


/**
 * Returns the array of allowed values for an ordered list field.
 *
 * The strings are not safe for output. Keys and values of the array should be
 * sanitized through field_filter_xss() before being displayed.
 */
function ordered_list_allowed_values($field, $instance = NULL, $entity_type = NULL, $entity = NULL) {
  $allowed_values = &drupal_static(__FUNCTION__, array());

  if (!isset($allowed_values[$field['id']])) {
    if ($field['settings']['values_source']) {
      $function = $field['settings']['values_function'];
      if (!empty($function) && function_exists($function)) {
        $values = $function($field, $instance, $entity_type, $entity);
      }
      else {
        $values = array();
      }
    }
    else {
      $values = $field['settings']['values_list'];
    }
    $allowed_values[$field['id']] = $values;
  }

  return $allowed_values[$field['id']];
}


/**
 * Parses a string of 'allowed values' into an array.
 */
function ordered_list_extract_allowed_values($string) {
  $values = array();
  $list = explode("\n", $string);
  $list = array_map('trim', $list);
  $list = array_filter($list, 'strlen');
  foreach ($list as $text) {
    $value = $key = FALSE;
    $matches = array();
    if (preg_match('/(.*?)\|(.*)/', $text, $matches)) {
      $key = trim($matches[1]);
      $value = trim($matches[2]);
    }
    else {
      $key = $value = $text;
    }
    $values[$key] = $value;
  }

  return $values;
}


/**
 * Generates a string representation of an array of 'allowed values'.
 *
 * This string format is suitable for edition in a textarea.
 */
function ordered_list_allowed_values_string($values) {
  $lines = array();
  foreach ($values as $key => $value) {
    $lines[] = $key . '|' . $value;
  }
  return implode("\n", $lines);
}


/**
 * Implements hook_field_validate().
 */
function ordered_list_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  $allowed_values = ordered_list_allowed_values($field, $instance, $entity_type, $entity);
  foreach ($items as $delta => $item) {
    if (!empty($item['value'])) {
      if (!empty($allowed_values) && !isset($allowed_values[$item['value']])) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'list_illegal_value',
          'message' => t('%name: illegal value.', array('%name' => $instance['label'])),
        );
      }
    }
  }
}


/**
 * Implements hook_field_is_empty().
 */
function ordered_list_field_is_empty($item, $field) {
  if (empty($item)) {
    return TRUE;
  }
  return FALSE;
}


/**
 * Implements hook_field_widget_info().
 */
function ordered_list_field_widget_info() {
  return array(
    'ordered_list_default' => array(
      'label' => t('Default'),
      'field types' => array('ordered_list'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
      ),
    ),
  );
}


/**
 * Implements hook_field_widget_form().
 */
function ordered_list_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $values = ordered_list_allowed_values($field, $instance);
  $value = array();
  if (!empty($instance['default_value'])) {
    $value = $instance['default_value'];
  }
  if (!empty($items)) {
    $value = $items;
  }
  $element += array(
    '#type' => 'ordered_list',
    '#values' => $values,
    '#default_value' => $value,
  );

  return $element;
}


/**
 * Implements hook_field_formatter_info().
 */
function ordered_list_field_formatter_info() {
  return array(
    'ordered_list_default' => array(
      'label' => t('Default'),
      'field types' => array('ordered_list'),
    ),
  );
}


/**
 * Implements hook_field_formatter_view().
 */
function ordered_list_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'ordered_list_default':
      $allowed_values = ordered_list_allowed_values($field, $instance, $entity_type, $entity);
      foreach ($items as $delta => $item) {
        $item = isset($allowed_values[$item['value']]) ? $allowed_values[$item['value']] : $item['value'];
        $output = field_filter_xss($item);
        $element[$delta] = array('#markup' => $output);
      }
      break;
  }

  return $element;
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function ordered_list_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id) {
  if ('field_ui_field_edit_form' == $form_id && 'ordered_list' == $form['#field']['type']) {
    $form['field']['cardinality']['#default_value'] = FIELD_CARDINALITY_UNLIMITED;
    $form['field']['cardinality']['#access'] = FALSE;
  }
}
