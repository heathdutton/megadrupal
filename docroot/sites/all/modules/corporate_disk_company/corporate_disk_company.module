<?php

/**
 * @file
 * Corporate Disk Fulfillment Main Module file.
 */
// Setup and including necessary files for operation.
module_load_include('inc', 'corporate_disk_company', 'includes/corporate_disk_company.functions');

/**
 * Implements hook_permission().
 */
function corporate_disk_company_permission() {
  return array(
    'access corporate disk module' => array(
      'title' => t('Access Corporate Disk Fulfillment Module'),
      'description' => t('Perform administration tasks for Disk.com module.'),
    ),
  );
}

/**
 * Implements hook_preprocess_html().
 * Adds the CSS needed for the pages to the head of the document.
 */
function corporate_disk_company_preprocess_html() {
  drupal_add_css(drupal_get_path('module', 'corporate_disk_company') . '/css/corporate-disk-company.css', array('every_page' => TRUE));
}

/**
 * Checks if current user has access to delivra module or is an admin.
 */
function corporate_disk_company_module_access() {
  return user_access('access corporate disk module') || user_access('administer site configuration');
}

/**
 * Implements hook_menu().
 */
function corporate_disk_company_menu() {
  $items = array();
  $items['admin/config/services/corporatedisk'] = array(
    'title' => t('Corporate Disk Fulfillment Service'),
    'description' => t('Configure Disk.com integration.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('corporate_disk_admin_settings'),
    'access callback' => 'corporate_disk_company_module_access',
    'file' => 'corporate_disk_company.admin.inc',
  );
  $items['admin/config/services/corporatedisk/default'] = array(
    'title' => t('Corporate Disk Fulfillment'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  $items['admin/config/services/corporatedisk/shippingservices'] = array(
    'title' => t('Available Shipping Services'),
    'description' => t('Configure Disk.com shipping services.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('corporate_disk_admin_settings_shipping'),
    'access callback' => 'corporate_disk_company_module_access',
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
    'file' => 'corporate_disk_company.admin.inc',
  );
  $items['admin/config/services/corporatedisk/shippingservicesconfig'] = array(
    'title' => t('Shipping Configuration for Cart'),
    'description' => t('Configure Disk.com shipping services.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('corporate_disk_admin_settings_shipping_configuration'),
    'access callback' => 'corporate_disk_company_module_access',
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
    'file' => 'corporate_disk_company.admin.inc',
  );
  $items['admin/config/services/corporatedisk/failures'] = array(
    'title' => t('Failures'),
    'description' => t('Orders that failed to be processed.'),
    'page arguments' => array('corporate_disk_company_failed_orders'),
    'access callback' => 'corporate_disk_company_module_access',
    'type' => MENU_LOCAL_TASK,
    'weight' => 15,
    'file' => 'corporate_disk_company.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_cron().
 */
function corporate_disk_company_cron() {
  // First we see if cron is turned on.
  $status = variable_get('corporate_disk_company_cron_status', 0);
  if ($status == 1) {
    // Default to an hourly interval. Of course, cron has to be running at least
    // hourly for this to work.
    $interval = variable_get('corporate_disk_company_interval', 60 * 60);
    // We usually don't want to act every time cron runs (which could be every
    // minute) so keep a time for the next run in a variable.

    if (time() >= variable_get('corporate_disk_company_next_execution', 0)) {
      //Lets process existing orders for fulfillment.
      corporate_disk_company_process('cron');
      corporate_disk_company_scrap_failures('cron');
      corporate_disk_company_tracking('cron');
      watchdog('corporate_disk_company', 'Corporate Disk Cron Ran');
      variable_set('corporate_disk_company_next_execution', time() + $interval);
    }
  }
}

/**
 * Implements hook_entity_view().
 */
function corporate_disk_company_entity_view($entity, $entity_type, $view_mode, $langcode) {
  if ($entity_type == 'commerce_order') {

    $table = corporate_disk_company_order_tracking_numbers_view($entity);

    $markup = '<div class="field corporate-disk-company-tracking-numbers">';
    $markup .= '<div class="corporate-disk-company-tracking-numbers-label">' . t('Tracking information') . '</div>';
    $markup .= $table;
    $markup .= '<div class="corporate-disk-company-tracking-numbers-footer">';
    $markup .= t(filter_xss(variable_get('corporate_disk_company_order_view_message_footer', '')));
    $markup .= '</div></div>';

    $entity->content['tracking'] = array(
      '#weight' => 9,
      '#markup' => $markup,
      '#access' => commerce_order_access('view', $entity),
    );
  }
}

/**
 * Helper function to build html to show tracking numbers on orders
 * @param type $order
 * @return type
 */
function corporate_disk_company_order_tracking_numbers_view($order) {
  // Pull tracking information basedon the order id
  $sql = 'SELECT * from {corporate_disk_company_shipments} where order_updated = \'1\' and order_number = ' . $order->order_id;
  $result = db_query($sql)
      ->fetchAll();
  // Lets create an array of items that need to be updated.
  $rows = array();
  $headers = array(
    'Shipping Service',
    'Tracking Number',
  );
  // @TODO Add tracking links based on the service used
  foreach ($result as $items) {
    $rows[] = array(
      $items->shipping_service,
      l($items->tracking_number, 'https://tools.usps.com/go/TrackConfirmAction.action?tLabels=' . $items->tracking_number, array('attributes' => array('target' => '_blank'))),
    );
  }
  if (count($rows) === 0) {
    $headers = array();
    $row = array(
      t('No tracking information is available at this time or your order has no tracking.'),
    );
    $rows = array($row);
  }
  $output = theme('table', array('header' => $headers, 'rows' => $rows));
  return $output;
}

/**
 * Implements hook_entity_info().
 */
function corporate_disk_company_entity_info() {
  $return = array(
    'corporate_disk_company_shipment' => array(
      'label' => t('Corporate Disk Company Shipment'),
      'entity class' => 'CorporateDiskCompanyShipment',
      'controller class' => 'EntityAPIController',
      'views controller class' => 'EntityDefaultViewsController',
      'module' => 'corporate_disk_company',
      'base table' => 'corporate_disk_company_shipments',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'order_number',
      ),
    ),
  );

  return $return;
}
