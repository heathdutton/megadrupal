<?php
/**
 * @file
 * Freebase Schema importer.
 *
 * Utility to import FreeBase Topic schemas as Content Types (Entity bundles).
 *
 * Designed to be used with 'field_schema_importer', it declares the services,
 * subform elements and formats that field_schema_importer UI uses to create
 * its forms.
 *
 * The data conversion is done by freebase_cck.schema.inc)
 *
 *
 * This tool will make a request to Freebase and retrieve 'Topic' schemas which
 * are equivalent to our Drupal content types.
 *
 * It converts those Freebase schemas into form elements we can use to define
 * new types. The module publishes a few methods that are used by
 * field_schema_importermodule that handles the actual importing and creation.
 *
 * @author 'dman' Dan Morrison http://coders.co.nz/
 * @version 2010
 */

/**
 * Load the conversion routines.
 * TODO - think about where this lives, where freebase API things go,
 * and how to load this on demand properly.
 */
module_load_include('inc', 'freebase_cck', 'freebase_cck.schema');

/**
 * Return descriptions of this service for field_schema_importer to know about.
 *
 * Implementation of HOOK_field_schema_importer_services()
 *
 * This will add to the list found by
 * field_schema_importer_field_schema_importer_services()
 * and displayed on /admin/structure/types/schema
 */
function freebase_cck_field_schema_importer_services() {
  $services = array();
  $services['freebase-topic'] = [
    'provider'             => 'Freebase',
    'name'                 => 'Freebase Topic type',
    'id'                   => 'freebase-topic',
    'about'                => FB_URI,
    'description'          => '
      Freebase describes a number of "topic" types to store information about
      a subject. We can import each of the field definitions attached to a
      Freebase topic as a field API field.
      ',
    // Define the name of the form function that returns service-specific UI
    // form that gets displayed for this service.
    'import_form_callback' => 'freebase_cck_form',
    // Function that can take parameter and return the raw response.
    'request_callback'     => 'freebase_api_fetch_schema_definition',
    // Format that the raw response will be in.
    'conversion_format'    => 'freebase_json',
    // Function that performs the format conversion.
    // Takes a string, returns a PHP array.
    'conversion_callback'  => 'freebase_api_schema_to_cck_content_type',
  ];
  return $services;
}

/**
 * Return a list of formats we can handle.
 *
 * This will add to the list found by field_schema_importer_formats()
 * and displayed on /admin/structure/types/schema
 *
 * Implementation of HOOK_field_schema_importer_formats()
 */
function freebase_cck_field_schema_importer_formats() {
  $formats = array(
    'freebase_json' => array(
      'id'                  => 'freebase_json',
      'name'                => 'FreeBase JSON',
      'module'              => 'freebase_cck',
      // Function that can read this type of input and return a PHP array.
      'conversion_callback' => 'freebase_api_json_to_cck_content_type',
    ),
  );
  return $formats;
}

/**
 * Form UI for communicating with Freebase and choosing a type definition.
 *
 * This form is named above as a callback in
 * freebase_cck_cck_importer_services()
 *
 * This is a SUB-form, that gets included from something higher.
 *
 * It presents a selection method for choosing what to import from Freebase.
 *
 * On submission, it may be rebuilt to include the import preview form also
 */
function freebase_cck_form(&$form_state, $service_info) {
  // I need to be sure that this inc always gets loaded if using this form.
  // The automatic includes are failing.
  form_load_include($form_state, 'inc', 'importer_ui', 'importer_services/' . pathinfo(__FILE__, PATHINFO_FILENAME));

  $service_id = $service_info['id'];
  // EG 'freebase_cck';

  $form_values = @$form_state['values'];
  $our_form_values = @$form_values[$service_id];

  $form = array(
    '#type'  => 'fieldset',
    '#title' => $service_info['name'],
  );
  $form['chosen_type'] = array(
    '#title'         => 'Type definition name',
    '#type'          => 'textfield',
    '#default_value' => $our_form_values['chosen_type'] ? $our_form_values['chosen_type'] : "",
  );

  // Add Freebase Search widget (formerly Freebase Suggest).
  // Take suggestions when typing in the Search box.
  // When something is selected, copy iy to the Type ID field.
  $inline_js_code = 'jQuery(function() {
    jQuery("#edit-freebase-topic-chosen-type")
      .suggest({filter:"(all type:/type/type)"});})
      .bind("fb-select", function(e, data) {
        jQuery("#edit-freebase-topic-chosen-type-id").val(data.id);
      });
  ';

  $form['chosen_type']['#attached'] = array(
    'css' => array(
      array(
        'data' => 'https://www.gstatic.com/freebase/suggest/4_2/suggest.min.css',
        'type' => 'external',
      ),
    ),
    'js'  => array(
      array(
        'data' => 'https://www.gstatic.com/freebase/suggest/4_2/suggest.min.js',
        'type' => 'external',
      ),
      array(
        'data' => $inline_js_code,
        'type' => 'inline',
      ),
    ),
  );

  $form['chosen_type_id'] = array(
    '#title'         => 'Type ID',
    '#type'          => 'textfield',
    '#default_value' => @$our_form_values['chosen_type_id'],
  );

  if (!module_exists('rdfx')) {
    $form['rdfx'] = array(
      '#type'   => 'markup',
      '#markup' => t("
        I can import schemas for you directly, but to helpfully remember the
        semantics of the data types we are using,
        (each field in a data schema has a specific predicate)
        you really would be best to also enable
        rdf and rdfx.module before you continue.
      "),
      '#prefix' => '<p>',
      '#suffix' => '</p>',
    );
  }

  $form['load_schema'] = array(
    '#type'     => 'submit',
    '#value'    => t('Load Schema'),
    '#validate' => array(
      'freebase_cck_form_validate',
      'importer_ui_import_form_validate',
    ),
    '#submit'   => array('freebase_cck_form_submit'),
    '#id'       => 'freebase-topic',
  );

  return $form;
}

/**
 * FAPI submit handler.
 */
function freebase_cck_form_submit(&$form, &$form_state) {
  $form_state['rebuild'] = TRUE;
  $config = $form_state['importer_ui_config'];
  $form_values = @$form_state['input'];
  $service_id = $form_state['clicked_button']['#id'];
  $our_form_values = @$form_values[$service_id];
  $formats_info = $config['formats_callback']();
  // We only accept one format, freebase_json.
  $format_info = $formats_info['freebase_json'];
  $type_id = $our_form_values['chosen_type_id'];

  $strings = array(
    '@type_id'           => $type_id,
    '!type_id'           => l($type_id, 'http://www.freebase.com/view' . $type_id),
    '!freebase'          => l(t('Freebase'), 'http://freebase.com'),
    '!schema_definition' => l(t('schema definition'), 'http://www.freebase.com/type/schema' . $type_id),
  );

  // Now get the data from freebase.
  $schema_definition = freebase_api_fetch_schema_definition($type_id);
  if (empty($schema_definition)) {
    drupal_set_message(t("Failed to retrieve a !schema_definition for !type_id from !freebase.", $strings), 'error');
    return FALSE;
  }

  // Convert it to something like a cck definition.
  $parsed_result = freebase_api_schema_to_cck_content_type($schema_definition, $format_info);
  // This is now an array as used by CCK import.

  if ($parsed_result) {
    $form_state['storage']['parsed_result'] = $parsed_result;
  }
  else {
    drupal_set_message(t('Ran parser over a query on "!type_id" but got no result back', $strings), 'notice');
    if (function_exists('devel')) {
      dpm(get_defined_vars(), __FUNCTION__);
    }
  }
  return $form;
}

/**
 * Checks before attempting to load a freebase schema.
 *
 * Called when the load_schema button was pressed within the freebase source
 * selector.
 * Ensure that a valid freebase chosen_type_id identifier is present
 *
 * Can't just make it required as it depends on higher choices.
 *
 * This is called from #element_validate, so the $form context is just the
 * freebase input fieldset
 *
 * @see freebase_cck_form()
 */
function freebase_cck_form_validate($form, &$form_state) {
  $form_values = $form_state['values'];
  $service_id = $form_values['service_id'];
  $our_form_values = $form_values[$service_id];
  if (empty($our_form_values['chosen_type_id'])) {
    form_set_error("$service_id][chosen_type_id", t('Please enter a Freebase topic identifier, eg /book/book'));
  }
}
