<?php
/**
 * Attaches autocomplete suggestions to configured fields.
 *
 * A successor to jquery_freebase, refactored because the Google API service
 * changed entirely.
 * Enhanced to add awareness of RDF mapping fields as hints to the suggested type.
 */

/**
 * Implements hook_field_widget_info().
 *
 * Declare that we provide an alternative widget for text fields.
 */
function freebase_suggest_field_widget_info() {
  return array(
    'freebase_suggest_autocomplete' => array(
      'label'       => t('Autocomplete text widget (with suggestions from Freebase)'),
      'field types' => array('text'),
      'settings'    => array(
        'freebase_suggest_filter' => '',
      ),
      'behaviors'   => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value'   => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
  );
}

/**
 * Edit and save the 'autocomplete_arguments' parameter.
 *
 * Additions to the "Manage Field" screen under content types. Configures
 * specific settings for this field instance.
 *
 * Implements hook_field_widget_settings_form().
 */
function freebase_suggest_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];

  $form['freebase_suggest_filter'] = array(
    '#type' => 'textfield',
    '#title' => t('Freebase Search Filter'),
    '#default_value' => @$settings['freebase_suggest_filter'],
    '#description' => t('
       <p>
       Enter some instructions for filtering the Freebase results,
       as per the <a href="https://developers.google.com/freebase/v1/search-widget#configuration-options">Freebase Search documentation</a>.
       This will restrict the results from freebase that the autocomplete
       search will return.
       </p><p>
       Must be in Freebase search filter notation.
       The keyword "all" or "any" is required, and implies boolean search
       filters AND & OR to the conditions inside the clause respectively.
       </p><p>
       eg <code>all type:"/location/country"</code>
       or <code>all type:"/people/person"</code>
       , <code>any type:"/film/production_company" type:"/book/publishing_company"</code>.
       </p>
    '),
  );

  // If using Freebase_api and RDFx, then we may know what the expected type is.
  // Lets make this really obvious and easy to use.
  if (module_exists('freebase_api')) {
    $rdf_mappings = rdf_mapping_load($instance['entity_type'], $instance['bundle']);
    if (!empty($rdf_mappings[$field['field_name']])) {
      $field_mappings = $rdf_mappings[$field['field_name']];
      $freebase_ids = array();
      $datatype_uri = $field_mappings['datatype'];
      $freebase_id = freebase_api_rdf_curie_to_freebase_id($datatype_uri);
      if ($freebase_id) {
        $freebase_ids[] = $freebase_id;
      }
      if (! empty($freebase_ids)) {
        $hint = t("Based on the RDF mappings, it seems <b>your suggested type should be %ids</b>", array('%ids' => implode(', ', $freebase_ids)));
        $form['freebase_suggest_filter']['#description'] .= $hint;
      }
    }
  }

  return $form;
}

/**
 * Defines how the data-entry field on node edit-forms works.
 *
 * It's MOSTLY like a textfield, just with a bit of extra javascript when it
 * gets rendered.
 *
 * TODO - can I just layer the behavior on top of a text field without
 * changing the widget type?
 *
 * Implements hook_field_widget_form().
 */
function freebase_suggest_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];

  $element_info = element_info('textfield');
  $element += array(
    '#type' => 'textfield',
    '#default_value' => isset($items[$delta]) ? $items[$delta] : NULL,
    '#process' => array_merge($element_info['#process'], array('freebase_suggest_attach_autocomplete_suggest')),
    '#freebase_suggest_filter' => $settings['freebase_suggest_filter'],
  );

  return $element;
}

/**
 * A form element #process callback to add autocomplete suggestions.
 *
 * Used when using our custom widget. Can also be invoked on any field via code.
 *
 * Invoke this when making a FAPI form element by adding:
 * $form['fieldname'] = array(
 *   '#type' => 'textfield',
 *   '#process' => array('freebase_suggest_attach_autocomplete_suggest'),
 *   '#freebase_suggest_filter' => "(all type:/freebase/type_profile)"
 * )
 *
 * Or in a hook_form_alter():
 * $form['fieldname']['#process'][] = 'freebase_suggest_attach_autocomplete_suggest';
 * $form['fieldname']['#freebase_suggest_filter'] = "(all type:/freebase/type_profile)";
 *
 * This runs at the 'process' phase because we need access to the element #id.
 */
function freebase_suggest_attach_autocomplete_suggest($element, $form_state) {
  $element_id = $element['#id'];
  // Display UI hint that this element has autocomplete.
  $element['#attributes']['class'][] = 'form-autocomplete';

  // Add Freebase Search widget (formerly Freebase Suggest) to this field.
  // Provide suggestions when typing in the text box.
  // Note the API docs at
  // https://developers.google.com/freebase/v1/search-overview#advanced-filtering
  // When the filter has 'all' keyword, the constraints are ANDed.
  // When the filter has 'any' keyword, the constraints are ORed.
  // TODO
  //   Review quote escaping. The filter string MAY include quotes that
  //   need attention. addslashes() seems like a good start.
  $inline_js_code = 'jQuery(function() {
    jQuery("#' . $element_id . '")
      .suggest({filter:"(' . addslashes($element['#freebase_suggest_filter']) . ')"})
    ;});
  ';

  $element['#attached'] = array(
    'css' => array(
      array(
        'data' => 'https://www.gstatic.com/freebase/suggest/4_2/suggest.min.css',
        'type' => 'external',
      ),
    ),
    'js' => array(
      array(
        'data' => 'https://www.gstatic.com/freebase/suggest/4_2/suggest.min.js',
        'type' => 'external',
      ),
      array(
        'data' => $inline_js_code,
        'type' => 'inline'
      ),
    ),
  );

  return $element;
}
