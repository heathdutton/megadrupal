<?php
/**
 * @file
 * Tests for ensuring the services do their job.
 *
 * Only the free ones can be auto-tested.
 * For the ones that require API keys, a developer key is provided.
 *
 * These should be able to be called headless (as a unit test)
 * but it does actually need the full site install, so it's a WebTestCase.
 */

/**
 * Test URL API calls.
 */
class GoogleAPIURLShortenerTest extends DrupalWebTestCase {

  // Provide a developer key, hopefully it will work without getting hammered.
  protected $apiKey = 'AIzaSyBiLRLX7iL13utNME7XHqqjRHwvLDCPZKk';

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => t('Url Shortener'),
      'description' => t('Test Url Shortener service.'),
      'group' => t('GoogleAPI WSClient'),
      'dependencies' => array('wsclient'),
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    parent::setUp('wsclient', 'googleapi_wsclient');
  }

  /**
   * Test that expanding a known short URL works.
   */
  public function testUrlExpander() {
    $short_url = 'http://goo.gl/00NyWn';
    $long_url = 'https://drupal.org/project/wsclient';
    $args = array(
      'query' => $short_url,
    );

    // Start calling WSClient.
    $service = wsclient_service_load('google_url_shortener');
    $response = $service->invoke('urlExpander', $args);

    // The response is expected to contain a 'longUrl';
    $this->assertEqual($response['status'], 'OK', 'Request returned OK');
    $this->assertEqual($response['longUrl'], $long_url, 'Short URL was expanded correctly');
    // debug($response);
  }

}

  /**
   * Test Translate API calls.
   */
class GoogleAPITranslateTest extends DrupalWebTestCase {

  // Provide a developer key, hopefully it will work without getting hammered.
  protected $apiKey = 'AIzaSyBiLRLX7iL13utNME7XHqqjRHwvLDCPZKk';

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => t('Translate'),
      'description' => t('Test translation service.'),
      'group' => t('GoogleAPI WSClient'),
      'dependencies' => array('wsclient'),
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    parent::setUp('wsclient', 'googleapi_wsclient');
  }

  /**
   * Test that translation service works.
   */
  public function testGoogleTranslate() {
    $args = array(
      'q' => 'Explain this to me',
      'source' => 'en',
      'target' => 'de',
      'key' => $this->apiKey,
    );
    $expected_result = "ErklÃ¤ren Sie mir das";

    // Start calling WSClient.
    $service = wsclient_service_load('google_translate');
    $response = $service->invoke('translate', $args);

    // The response should contain data[translations][0][translatedText];
    // Dunno about errors etc.
    $translated_text = $response['data']['translations'][0]['translatedText'];
    $this->assertEqual($translated_text, $expected_result, 'Expected translation was returned correctly');
    // debug($response);
  }

}

/**
 * Test Freebase API calls.
 */
class GoogleAPIFreebaseTest extends DrupalWebTestCase {
  // Don't need most of default core modules.
  protected $profile = 'minimal';
  // Provide a developer key, hopefully it will work without getting hammered.
  protected $apiKey = 'AIzaSyBiLRLX7iL13utNME7XHqqjRHwvLDCPZKk';

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => t('Freebase'),
      'description' => t('Test Freebase lookups. (Makes network requests)'),
      'group' => t('GoogleAPI WSClient'),
      'dependencies' => array('wsclient'),
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    parent::setUp('wsclient', 'googleapi_wsclient');
  }

  /**
   * Test that Topic search works.
   */
  public function testFreebaseSearch() {
    $args = array(
      'query' => 'apteryx',
      'key' => $this->apiKey,
    );
    $expected_result = "Kiwi";

    // Start calling WSClient.
    $service = wsclient_service_load('freebase');
    $response = $service->invoke('search', $args);

    // The response is expected to contain an array of matches;
    $this->assertEqual($response['status'], '200 OK', 'Request returned OK');
    $found = FALSE;
    foreach ($response['result'] as $option) {
      if ($option['name'] == $expected_result) {
        $found = TRUE;
      }
    }
    $this->assertTrue($found, 'Expected topic was found correctly via search');
    // debug($response);
  }

  /**
   * Test that Topic lookup works.
   */
  public function testFreebaseTopic() {
    $args = array(
      'id' => '/m/01641s',
      'filter' => 'suggest',
    );
    // Filtered by 'suggest' to keep the weight down.
    // Too huge a result crashes the debugger.
    $expected_result = "Drupal";

    // Start calling WSClient.
    $service = wsclient_service_load('freebase');
    $response = $service->invoke('topic', $args);

    // The response is expected to contain an array of matches.
    // Scan for the name we expect.
    // There seems to be no status.
    $names = $response['property']['/type/object/name']['values'];
    $found = FALSE;
    foreach ($names as $option) {
      if ($option['text'] == $expected_result) {
        $found = TRUE;
      }
    }
    $this->assertTrue($found, 'Expected topic was retrieved and matches the expected name');
    // debug($response);
  }

}
