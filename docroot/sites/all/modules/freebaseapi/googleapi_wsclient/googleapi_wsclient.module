<?php
/**
 * @file
 * Provide Web Service Client definitions for Google APIs (2014)
 */

/**
 * Defines available Google API Freebase web service descriptions.
 *
 * The Google Freebase API is a REST service, and the official libraries are
 * broken, so we use WSClient to handle the REST stuff for us.
 *
 * https://code.google.com/p/google-api-php-client/ DOES NOT WORK (2013-2014)
 * as it just doesn't include support for the Freebase services at all.
 *
 * This module currently provides 'topic', 'mqlread' and  'search'
 * API definitions as described at https://developers.google.com/freebase/
 *
 * Implements hook_default_wsclient_service()
 *
 * @return array
 *   An array of web service descriptions with the web service names as keys.
 */
function googleapi_wsclient_default_wsclient_service() {
  $services = array();
  // Google provides a dozen services, each with several operations inside.
  // Each distinct service is broken into a subroutine just for code management.
  $services += googleapi_wsclient_freebase_wsclient_service();
  $services += googleapi_wsclient_google_translate_wsclient_service();
  $services += googleapi_wsclient_google_url_shortener_wsclient_service();
  $services += googleapi_wsclient_discovery_wsclient_service();
  return $services;
}


/**
 * Subroutine for googleapi_wsclient_default_wsclient_service().
 *
 * freebase:topic
 * freebase:mqlread
 * freebase:search
 *
 * Implements hook_default_wsclient_service()
 */
function googleapi_wsclient_freebase_wsclient_service() {
  $services = array();
  // Note the field 'type' is not identical to Drupal fields,
  // and is closer to the data types used by Rules.
  // eg, 'text_formatted'.
  // @see rules_rules_core_data_info()

  $service = new WSClientServiceDescription();
  $service->name = 'freebase';
  $service->label = 'Google Freebase.';
  $service->url = "https://www.googleapis.com/freebase/v1/";
  $service->type = 'rest';
  $service->authentication = 'null';

  // Try to switch to POST.
  // This is a per-operation flag, but also:
  //
  // We need to use 'form' formatter if POSTING, but that disabled the
  // automatic decoding that was happening.
  // Wonderfully, the HTTPClient provides 'Composite' formatter
  // which is exactly what we want - POST as a form, Parse response as JSON.
  $service->settings['formatter'] = 'HttpClientCompositeFormatter';
  // If trying to POST to the endpoint that expects a GET, Google says:
  // Error invoking the REST service Google Freebase.,
  // operation mqlread: Not Found
  // But it's not really a not found, it's a method-not-allowed.
  // The X-HTTP-Method-Override is expected to fix that.
  // Service curl options get passed to httpclient and eventually to CURL.
  $service->settings['curl options'] = array(
    CURLOPT_HTTPHEADER => array(
      'X-HTTP-Method-Override: GET',
    ),
  );

  // Add info about the REST service,
  // @see https://developers.google.com/freebase/v1/topic
  $operation = array();
  $operation['label'] = 'Topic lookup';
  $operation['url'] = 'topic@id';
  $operation['type'] = 'GET';
  $operation['parameter']['id'] = array(
    'type' => 'token',
    'label' => 'ID',
    'description' => "The ID of the item that you want data about.",
    'optional' => FALSE,
  );
  $operation['parameter']['dateline'] = array(
    'type' => 'text',
    'label' => 'dateline',
    'description' => "Determines how up-to-date the data returned is. A UNIX epoch time, a <code>guid</code> or <code>now</code>.",
    'optional' => TRUE,
  );
  $operation['parameter']['filter'] = array(
    'type' => 'text',
    'label' => 'filter',
    'description' => 'A Freebase domain, type or property ID. <code>suggest</code>, <code>commons</code>, or <code>all</code>. Filter the results and return only appropriate properties. See <a href="https://developers.google.com/freebase/v1/topic-overview#filter">filters parameter details</a> for more information.',
    'optional' => TRUE,
  );
  $operation['parameter']['lang'] = array(
    'type' => 'text',
    'label' => 'lang',
    'description' => 'The language you\'d like the content in - a Freebase /type/lang language key.',
    'optional' => TRUE,
  );
  $operation['parameter']['limit'] = array(
    'type' => 'integer',
    'label' => 'Limit',
    'optional' => TRUE,
    'description' => 'The maximum number of property values to return for each property. Must be a positive integer. Default is 10.',
  );
  $operation['parameter']['raw'] = array(
    'type' => 'boolean',
    'label' => 'raw',
    'optional' => TRUE,
    'description' => 'Do not apply any constraints, or get any names. (Default: false)',
  );
  $operation['result'] = array(
    'type' => 'text',
    'label' => 'Topic',
  );
  $service->operations['topic'] = $operation;

  // @see https://developers.google.com/freebase/v1/mqlread
  // @see https://www.freebase.com/query
  $operation = array();
  $operation['label'] = 'MQL Read';
  $operation['url'] = 'mqlread';
  $operation['type'] = 'GET';
  $operation['type'] = 'POST';

  $operation['parameter']['query'] = array(
    'type' => 'text_formatted',
    'label' => 'Query',
    'description' => 'An envelope containing a single MQL query. For more on MQL, see <a href="https://www.freebase.com/query">the interactive editor</a>',
    'optional' => FALSE,
  );
  $operation['parameter']['as_of_time'] = array(
    'type' => 'date',
    'label' => 'as_of_time',
    'optional' => TRUE,
    'description' => 'Run the query as it would have been run at the specified point in time. Must be a valid timestamp (e.g. "2007-01-09T22" or "2007-02").',
  );
  $operation['parameter']['callback'] = array(
    'type' => 'text',
    'label' => 'callback',
    'optional' => TRUE,
    'description' => 'JS method name for JSONP callbacks.',
  );
  $operation['parameter']['cost'] = array(
    'type' => 'text',
    'label' => 'cost',
    'optional' => TRUE,
    'description' => 'Toggles whether or not to show the costs. (Default: false)',
  );
  $operation['parameter']['cursor'] = array(
    'type' => 'text',
    'label' => 'Cursor',
    'optional' => TRUE,
    'description' => 'The MQL cursor. Provides a mechanism for paging out results. Can be used in conjunction with limit directive in MQL. Contains either no value (for the first request e.g. /mqlread?cursor=&query=...) OR a valid cursor returned by a previous request.',
  );
  $operation['parameter']['dateline'] = array(
    'type' => 'text',
    'label' => 'dateline',
    'description' => "The dateline that you get in a mqlwrite response to ensure consistent results.",
    'optional' => TRUE,
  );
  $operation['parameter']['html_escape'] = array(
    'type' => 'boolean',
    'label' => 'html_escape',
    'optional' => TRUE,
    'description' => 'Whether or not to escape entities. (Default: true)',
  );
  $operation['parameter']['indent'] = array(
    'type' => 'integer',
    'label' => 'indent',
    'optional' => TRUE,
    'description' => 'How many spaces to indent the JSON. (Default: false.)',
  );
  $operation['parameter']['lang'] = array(
    'type' => 'text',
    'label' => 'lang',
    'description' => 'The language of the results. An ID of a <code>/type/lang</code> object. Default: <code>/lang/en</code>',
    'optional' => TRUE,
  );
  $operation['parameter']['uniqueness_failure'] = array(
    'type' => 'text',
    'label' => 'uniqueness_failure',
    'description' => 'How MQL responds to uniqueness failures.',
    'optional' => TRUE,
  );
  $service->operations['mqlread'] = $operation;

  // @see https://developers.google.com/freebase/v1/search
  $operation = array();
  $operation['label'] = 'Search';
  $operation['url'] = 'search';
  $operation['type'] = 'GET';
  $operation['parameter']['query'] = array(
    'type' => 'text',
    'label' => 'Query',
  );
  $operation['parameter']['as_of_time'] = array(
    'type' => 'date',
    'label' => 'as_of_time',
    'optional' => TRUE,
    'description' => 'Run the query as it would have been run at the specified point in time. Must be a valid timestamp (e.g. "2007-01-09T22" or "2007-02").',
  );
  $operation['parameter']['callback'] = array(
    'type' => 'text',
    'label' => 'callback',
    'optional' => TRUE,
    'description' => 'JS method name for JSONP callbacks.',
  );
  $operation['parameter']['cursor'] = array(
    'type' => 'text',
    'label' => 'Cursor',
    'optional' => TRUE,
    'description' => 'The MQL cursor. Provides a mechanism for paging out results. Can be used in conjunction with limit directive in MQL. Contains either no value (for the first request e.g. /mqlread?cursor=&query=...) OR a valid cursor returned by a previous request.',
  );
  $operation['parameter']['domain'] = array(
    'type' => 'text',
    'label' => 'domain',
    'optional' => TRUE,
    'description' => 'Restrict to topics with this Freebase domain ID.',
  );
  $operation['parameter']['encode'] = array(
    'type' => 'text',
    'label' => 'encode',
    'optional' => TRUE,
    'description' => 'The encoding of the response. You can use this parameter to enable HTML encoding.',
  );
  $operation['parameter']['exact'] = array(
    'type' => 'boolean',
    'label' => 'exact',
    'optional' => TRUE,
    'description' => 'Query on exact name and keys only.',
  );
  $operation['parameter']['filter'] = array(
    'type' => 'text_formatted',
    'label' => 'filter',
    'optional' => TRUE,
    'description' => 'The filter parameter allows you to create more complex rules and constraints to apply to your query.',
  );
  $operation['parameter']['format'] = array(
    'type' => 'text',
    'label' => 'format',
    'optional' => TRUE,
    'description' => 'Structural format of the JSON response.',
  );
  $operation['parameter']['indent'] = array(
    'type' => 'boolean',
    'label' => 'indent',
    'optional' => TRUE,
    'description' => 'Whether to indent the JSON results or not.',
  );
  $operation['parameter']['lang'] = array(
    'type' => 'text',
    'label' => 'lang',
    'optional' => TRUE,
    'description' => "The code of the language with which to run the query. Default is 'en'.",
  );
  $operation['parameter']['limit'] = array(
    'type' => 'integer',
    'label' => 'limit',
    'optional' => TRUE,
    'description' => "Maximum number of results to return. By default, 20 matches in decreasing order of relevance are returned, if that many exist. Fewer or more matches may be requested by using the limit parameter with a different value.",
  );
  $operation['parameter']['mql_output'] = array(
    'type' => 'text_formatted',
    'label' => 'mql_output',
    'optional' => TRUE,
    'description' => "The MQL query to run againist the results to extract more data. After the query is run, the matching documents' IDs are passed to the mql_output MQL query to retrieve actual data about the matches. The MQL results are sorted by decreasing relevance score. ",
  );
  $operation['parameter']['prefixed'] = array(
    'type' => 'boolean',
    'label' => 'prefixed',
    'optional' => TRUE,
    'description' => 'Prefix match against names and aliases.',
  );
  $operation['parameter']['scoring'] = array(
    'type' => 'text',
    'label' => 'scoring',
    'optional' => TRUE,
    'description' => "Relevance scoring algorithm to use.",
  );
  $operation['parameter']['spell'] = array(
    'type' => 'text',
    'label' => 'spell',
    'optional' => TRUE,
    'description' => "Request 'did you mean' suggestions ",
  );
  $operation['parameter']['stemmed'] = array(
    'type' => 'boolean',
    'label' => 'stemmed',
    'optional' => TRUE,
    'description' => "Query on stemmed names and aliases. May not be used with prefixed.",
  );
  $operation['parameter']['type'] = array(
    'type' => 'text',
    'label' => 'type',
    'optional' => TRUE,
    'description' => "Restrict to topics with this Freebase type id.",
  );
  $operation['parameter']['with'] = array(
    'type' => 'text_formatted',
    'label' => 'with',
    'optional' => TRUE,
    'description' => "A filter rule to match against.",
  );
  $operation['parameter']['without'] = array(
    'type' => 'text_formatted',
    'label' => 'without',
    'optional' => TRUE,
    'description' => "A filter rule to not match against.",
  );
  $service->operations['search'] = $operation;
  $services[$service->name] = clone $service;

  return $services;
}

/**
 * Subroutine for googleapi_wsclient_default_wsclient_service().
 *
 * google_translate:translate
 *
 * Implements hook_default_wsclient_service()
 */
function googleapi_wsclient_google_translate_wsclient_service() {
  $services = array();
  // Google Translate service (REST)
  // https://developers.google.com/translate/v2/using_rest
  // THIS IS NO LONGER FREE! You must have a Google developer account set up
  // *with billing enabled*. The pricing is $20 for a miiilion characters.
  $service = new WSClientServiceDescription();
  $service->name = 'google_translate';
  $service->label = 'Google Translate';
  $service->url = 'https://www.googleapis.com/';
  $service->type = 'rest';

  $operation = array();
  $operation['label'] = 'Translate text';
  $operation['url'] = 'language/translate/v2';
  $operation['parameter']['q'] = array('type' => 'text', 'label' => 'Text');
  $operation['parameter']['source'] = array(
    'type' => 'text',
    'label' => 'Source language',
    'description' => 'Language identifier, eg <code>de</code>',
  );
  $operation['parameter']['target'] = array(
    'type' => 'text',
    'label' => 'Target language',
    'description' => 'Language identifier, eg <code>de</code>',
  );
  $operation['parameter']['key'] = array(
    'type' => 'text',
    'label' => 'API key',
    'description' => 'You need to <a href="https://developers.google.com/translate/v2/using_rest#auth">register an API key</a>. The translation service costs a few cents.',
  );

  // Expected structure of the response packet.
  // TODO - find why this doesn't do anything.
  $service->datatypes = array(
    'translation_result' => array(
      'label' => 'Translation result',
      'property info' => array(
        'responseData' => array(
          'type' => 'struct',
          'label' => 'Response data',
          'property info' => array(
            'translatedText' => array(
              'type' => 'text',
              'label' => 'Translated text',
            ),
          ),
        ),
      ),
    ),
  );

  $operation['result'] = array('type' => 'wsclient_google_translation_result', 'label' => 'Translation result');
  $service->operations['translate'] = $operation;
  $services[$service->name] = clone $service;

  return $services;
}

/**
 * Subroutine for googleapi_wsclient_default_wsclient_service().
 *
 * google_url_shortener:urlShortener (broken)
 * google_url_shortener:urlExpander
 *
 * Implements hook_default_wsclient_service()
 */
function googleapi_wsclient_google_url_shortener_wsclient_service() {
  $services = array();
  // Google Url Shortener (Pretty hopeless, but free).
  // @see https://developers.google.com/url-shortener/
  // eg
  // https://www.googleapis.com/urlshortener/v1/url?shortUrl=http://goo.gl/0yWn
  // Expanding is free, creating needs an API key.
  $service = new WSClientServiceDescription();
  $service->name = 'google_url_shortener';
  $service->label = 'Google URL Shortener';
  $service->url = 'https://www.googleapis.com/';
  $service->type = 'rest';

  $operation = array();
  $operation['label'] = 'Shorten a long URL (needs work)';
  $operation['url'] = 'urlshortener/v1/url';
  // Shorten is a POST, as it adds data to the service.
  $operation['type'] = 'POST';
  $operation['parameter']['longUrl'] = array(
    'type' => 'text',
    'label' => 'Long URL',
  );
  // It seems this needs a key,
  // but even so, so far I haven't been able to invoke it right.
  $operation['parameter']['key'] = array(
    'type' => 'text',
    'label' => 'API key',
    'description' => 'You need to <a href="https://developers.google.com/translate/v2/using_rest#auth">register an API key</a>.',
  );
  $operation['result'] = array('type' => 'urlshortener#url', 'label' => 'Shortened URL');
  $service->operations['urlShortener'] = $operation;


  $operation = array();
  $operation['label'] = 'Expand a short URL';
  $operation['url'] = 'urlshortener/v1/url';
  $operation['parameter']['shortUrl'] = array(
    'type' => 'text',
    'label' => 'Short URL',
    'description' => 'eg <code>http://goo.gl/00NyWn</code>',
  );
  $operation['result'] = array('type' => 'urlshortener#url', 'label' => 'Expanded URL');
  $service->operations['urlExpander'] = $operation;

  $service->datatypes['urlshortener#url'] = array(
    'label' => 'urlshortener result',
    'property info' => array(
      'responseData' => array(
        'type' => 'struct',
        'label' => 'Response data',
        'property info' => array(
          'kind' => array('type' => 'text'),
          'id' => array('type' => 'text'),
          'longUrl' => array('type' => 'text'),
          'status' => array('type' => 'text'),
        ),
      ),
    ),
  );

  $services[$service->name] = clone $service;

  return $services;
}

/**
 * Subroutine for googleapi_wsclient_default_wsclient_service().
 *
 * Implements hook_default_wsclient_service()
 */
function googleapi_wsclient_discovery_wsclient_service() {
  $services = array();
  // Google API discovery. COuld be woul could use this to auto-configure?
  // @see https://developers.google.com/discovery/
  // curl https://www.googleapis.com/discovery/v1/apis \
  // -H 'Content-Type: application/json'
  $service = new WSClientServiceDescription();
  $service->name = 'google_api_discovery';
  $service->label = 'Google APIs Discovery Service';
  $service->url = 'https://www.googleapis.com/';
  $service->type = 'rest';

  $operation = array();
  $operation['label'] = 'List';
  $operation['url'] = 'discovery/v1/apis';
  $operation['type'] = 'GET';
  $operation['parameter']['name'] = array(
    'type' => 'text',
    'label' => 'Only include APIs with the given name.',
    'allow null' => 1,
  );
  $operation['parameter']['preferred'] = array(
    'type' => 'boolean',
    'label' => 'Return only the preferred version of an API.  "false" by default.',
    'allow null' => 1,
  );
  $operation['result'] = array(
    'type' => 'discovery#directoryList',
    'label' => 'List of APIs',
  );
  $service->operations['list'] = $operation;

  $service->datatypes['discovery#directoryList'] = array(
    'label' => 'discovery directoryList',
    'property info' => array(
      'kind' => array('type' => 'text', 'label' => 'kind'),
      'discoveryVersion' => array('type' => 'text', 'label' => 'discoveryVersion'),
      'items' => array('type' => 'list<discovery#directoryItem>', 'label' => 'items'),
    ),
  );
  $service->datatypes['discovery#directoryItem'] = array(
    'label' => 'discovery directoryItem',
    'property info' => array(
      'kind' => array('type' => 'text'),
      'id' => array('type' => 'text'),
      'name' => array('type' => 'text'),
      'title' => array('type' => 'text'),
      'discoveryRestUrl' => array('type' => 'text'),
      'discoveryLink' => array('type' => 'text'),
      'documentationLink' => array('type' => 'text'),
    ),
  );

  $services[$service->name] = clone $service;
  return $services;
}
