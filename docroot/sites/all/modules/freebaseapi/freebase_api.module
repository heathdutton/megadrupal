<?php
/**
 * @file
 * Utility to make requests from the Freebase API.
 *
 * See the README for theory and usage.
 *
 * @author 'dman' Dan Morrison http://coders.co.nz/
 * @version 2014
 */

define('FB_URI', 'http://www.freebase.com/');
define('FB_NS', 'http://rdf.freebase.com/ns/');
define('FB_PREFIX', 'freebase');
define('FB_SEARCH_URI', FB_URI . 'api/service/search');
define('FB_API_URI', 'http://api.freebase.com/');

module_load_include('inc', 'freebase_api', 'freebase_api');


/**
 * Publishes admin config page and autocomplete callbacks.
 *
 * Implements hook_menu().
 */
function freebase_api_menu() {
  $items = array();
  $items['admin/config/services/freebase'] = array(
    'title' => 'Google Freebase',
    'description' => 'Freebase settings and tests.',
    'page callback' => 'freebase_api_admin_page',
    'access arguments' => array('administer site configuration'),
    'file' => 'freebase_api.admin.inc',
  );
  $items['freebase_api/topic_autocomplete_callback'] = array(
    'title' => 'Autocomplete Freebase topic lookup',
    'page callback' => 'freebase_api_topic_autocomplete_callback',
    'access arguments' => array('access content'),
    'file' => 'freebase_api.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['freebase_api/schema_autocomplete_callback'] = array(
    'title' => 'Autocomplete Freebase schema lookup',
    'page callback' => 'freebase_api_schema_autocomplete_callback',
    'access arguments' => array('access content'),
    'file' => 'freebase_api.admin.inc',
    'type' => MENU_CALLBACK,
  );
  return $items;
}


/**
 * Implements hook_help().
 */
function freebase_api_help($path, $arg) {
  switch ($path) {
    case 'admin/config/services/freebase':
      return t('Sample queries here are for lightweight testing only. To really test the services with all options and diagnostics, enable and use the <a href="!test_link">WSClient tester module</a>', array('!test_link' => url('admin/config/services/wsclient/manage/freebase')));
  }
  return NULL;
}


/**
 * Implements hook_rdf_namespaces().
 *
 * Used on the off-change that the system is RDF-aware.
 *
 * @see rdf.api
 */
function freebase_api_rdf_namespaces() {
  return array(
    'freebase'  => FB_NS,
    FB_PREFIX  => FB_NS,
  );
}


/**
 * Render a link to a Freebase topic.
 *
 * Utility function for data dumps.
 */
function freebase_api_link($id, $label = NULL, $options = array()) {
  return l((empty($label) ? $id : $label), 'http://www.freebase.com' . $id);
}

/**
 * Theme functions used by this module.
 */
function freebase_api_theme() {
  $theme = array();
  $theme['freebase_api_topic_summary'] = array(
    'file' => 'freebase_api.theme.inc',
    'variables' => array(
      'topic' => NULL,
      'nested' => NULL,
    ),
  );
  $theme['freebase_api_search_results'] = array(
    'file' => 'freebase_api.theme.inc',
    'variables' => array(
      'response' => NULL,
    ),
  );
  $theme['freebase_api_schema_summary'] = array(
    'file' => 'freebase_api.theme.inc',
    'variables' => array(
      'response' => NULL,
    ),
  );
  return $theme;
}

/**
 * Initiates the web service and runs the given MQL (string or array).
 *
 * Originally, this would be a GET request, and things work OK.
 * However, if there are more than 200 characters in the query, then the
 * URL gets too long and the endpoint refuses to honor it.
 *
 * To work around that, Needed to switch the mqlread action to a POST, though
 * that has many implications.
 *
 * * Need to switch the operation definition to type=POST (easy)
 * @see googleapi_wsclient_default_wsclient_service()
 *
 * * Need to add a curl header that tells the server to treat the POST like
 *   it was a get (!) or you get a 404!
 *   So our $service uses X-HTTP-Method-Override
 *
 * * WSClient needs to shift the $args from being URL parameters into the POST
 *   body data, and the packing method has to change.
 *   Switching the HTTPClient 'formatter' to HttpClientCompositeFormatter
 *   means the REQUEST is no longer JSON-packed, which was the
 *   WSClientRESTEndpoint default.
 *   But also, the args needed to be shifted, this means setting a 'data' key
 * @see WSClientRESTEndpoint:call()
 *
 * @throws MQLError
 *
 * @param string|array $query_string
 *   MQL string.
 *
 * @return array $response
 *   Result.
 */
function freebase_api_run_mql_query($query_string) {
  // Allow PHP structs as well, JSON-ify on-the-fly.
  if (is_array($query_string)) {
    $query_string = json_encode($query_string);
  }
  module_load_include('inc', 'freebase_api', 'freebase_api');
  $service = wsclient_service_load('freebase');
  $operation_name = 'mqlread';
  $args = array('query' => $query_string);

  // Wierdness for WSClient :
  if ($service->operations[$operation_name]['type'] == 'POST') {
    // If POSTing (needed if making long questions)
    // then need to shift the args into the POST data body.
    // To make this happen, WSClient seems to want me to
    // set an id in the operation,
    // and then shifts the argument with that ID into the data body later.
    // Hm.
    // $service->operations[$operation_name]['data'] = 'datawrapper';
    // $args['datawrapper'] = $args;
    // This feels like it's abusing the intent of the $operation['data']
    // device, but it does let us run on an unpatched wsclient.
    // Issue #1280332 seems to resolve this.
  }

  // Ready to actually invoke the call. Take it careful.
  // This may throw an error, let it bubble.
  watchdog('freebase_api', 'Invoking Freebase %operation_name', array('%operation_name' => $operation_name), WATCHDOG_INFO);
  $response = $service->invoke($operation_name, $args);

  // The response *may* either be raw JSON string or an unpacked struct,
  // depending on whether we had to use POST or not.
  if (is_string($response)) {
    $response = (array) json_decode($response);
  }

  // On success, return the result packet immediately.
  if (isset($response['result'])) {
    return $response['result'];
  }
  // On error, return the full packet (or throw? TODO).
  return $response;
}

/**
 * Initiates the web service and runs the given lookup.
 *
 * @param string $fb_id
 *   Freebase ID.
 */
function freebase_api_run_topic_lookup($fb_id) {
  module_load_include('inc', 'freebase_api', 'freebase_api');
  $service = wsclient_service_load('freebase');
  $operation_name = 'topic';
  $args = array('id' => $fb_id);

  // Ready to actually invoke the call. Take it careful.
  // This may throw an error, let it bubble.
  watchdog('freebase_api', 'Invoking Freebase %operation_name', array('%operation_name' => $operation_name), WATCHDOG_INFO);
  $response = $service->invoke($operation_name, $args);
  // On success, return the result packet immediately.
  if (isset($response['result'])) {
    return $response['result'];
  }
  // On error, return the full packet (or throw? TODO).
  return $response;
}
