<?php
/**
 * @file Freebase data module - form enhancements.
 *
 * Uses Freebase to add automatic data assistance for content types.
 *
 * This annotates node edit forms with data hints and autocompletion from
 * freebase, based on the data mappings that may be attached to fields.
 *
 *
 * @author 'dman' Dan Morrison http://coders.co.nz/
 * @version 2010
 */

/**
 * Attaches autocomplete support to all known content type titles and their
 * fields.
 *
 * HOOK_form_alter()
 */
function freebase_data_form_alter(&$form, &$form_state, $form_id) {
  // If it's a node form.
  if (isset($form['#id']) && $form['#id'] == 'node-form') {
    $node = &$form['#node'];

    // $node rdf_mapping may have already been loaded, but probably not if it's new.
    // Ensure it has been loaded
    rdf_mapping_node_load($node);
    $rdf_mapping = $node->rdf_mapping;


    // Add autocomplete to the title, based on the known object type
    $rdf_schema_ids = (array)$rdf_mapping['rdftype'];
    // Convert the rdf curies to zero-numbered freebase keys.
    $freebase_schema_ids = array_values(array_filter(array_map('freebase_api_rdf_curie_to_freebase_id', $rdf_schema_ids)));
    if (! empty($freebase_schema_ids)) {
      // Parameter should look like
      // '#freebase_suggest_arguments' => '{"type": ["/location/country", "/location/us_state"]}'
      $suggest_arguments = array('type' => $freebase_schema_ids);
      $form['title']['#process'][] = 'jquery_freebase_attach_autocomplete_suggest';
      $form['title']['#freebase_suggest_arguments'] = $suggest_arguments;
      // Hints to the user
      $form['title']['#attributes']['title'] = t("This field will autocomplete with suggestions from Freebase !types data types", array('!types' => join(', ', $freebase_schema_ids)));
    }

    // Add autocomplete support to any known fields too
    foreach ($rdf_mapping as $field_id => $field_mapping) {
      // Remember, we don't autocomplete based on 'predicates', but based on datatype
      if (isset($field_mapping['datatype'])) {
        $rdf_data_types = $field_mapping['datatype'];
        // Normally there is only one datatype per field, but it's possible to
        // sort of have more. Assume multiple.
        if (is_string($rdf_data_types)) {
          $rdf_data_types = array($rdf_data_types);
        }
        $freebase_data_types = array_values(array_filter(array_map('freebase_api_rdf_curie_to_freebase_id', $rdf_data_types)));
        // fb doesn't like it if I send an array of one item ?? Need to find out WTF with that
        if (count($freebase_data_types) == 1) {
          $freebase_data_types = reset($freebase_data_types);
        }
        $suggest_arguments = array('type' => $freebase_data_types);
        // loop over CCK multiple fields
        // TODO - how about other normal or single fields? check
        foreach (element_children($form[$field_id]) as $delta) {
          if ($form[$field_id][$delta]['#type'] == 'text_textfield') {
            // CCK will not process normally if I set my own process also?
            $form[$field_id][$delta]['#process'][] = 'text_textfield_process';
            $form[$field_id][$delta]['#process'][] = 'jquery_freebase_attach_autocomplete_suggest';
            $form[$field_id][$delta]['#freebase_suggest_arguments'] = $suggest_arguments;
            $form[$field_id][$delta]['#description'] = t("This field will autocomplete with suggestions from %types data types", array('%types' => join(', ', $rdf_data_types)));
          }
        } // each cck row
      } // has a datatype to use
    } // each field

    // Also add local javascript and data for client-side data mapping
    $form['title']['#process'][] = 'freebase_data_attach_content_type_mapping';

  } // Is a node form
}

/**
 * Insert javascript hints about the content type and the fields it contains,
 * along with the mapping to its freebase equivalents.
 *
 * A local Drupal content type 'Person' may map to freebase '/people/person' in
 * the type schema.
 *
 * This process function just adds the javascript needed, does not modify the
 * element. Needs to be here not form_alter as it's needed when the form is
 * refreshed or invalid, and form_alter doesn't run then.
 *
 */
function freebase_data_attach_content_type_mapping(&$form_element, $data, &$form_state, $form) {

  static $added;
  if ($added) {
    return $form_element;
  }

  if (empty($form['#node'])) {
    return $form_element;
  }
  $node = &$form['#node'];

  $rdf_mapping = $node->rdf_mapping;
  $rdf_schema_ids = (array)$rdf_mapping['rdftype'];
  // Convert the rdf curies to zero-numbered freebase keys.
  $freebase_schema_ids = array_values(array_filter(array_map('freebase_api_rdf_curie_to_freebase_id', $rdf_schema_ids)));

  ////////////////////////////////////////////////////
  // Add js Drupal.settings data that can Tag each field with its data type

  // This forward mapping lists all fields and what retrieved data is suppose to go there
  // for convenience, we'll also provide reverse mapping:
  // Given some data, what field should it be stored in?
  foreach ($rdf_mapping as $field_id => $field_mapping) {
    if (isset($field_mapping['predicates'])) {
      // the rdftype is a different shape, skip it here
      foreach ($field_mapping['predicates'] as $predicate) {
        // Freebase js response doesn't use the fully qualified identifier.
        // convert /people/person/date_of_birth (which we store)
        // back to 'date_of_birth' which is what the client-side code needs to know
        $rdf_mapping['reverse_mapping'][basename(freebase_api_rdf_curie_to_freebase_id($predicate))][] = $field_id;
      }
    }
  }

  // js_freebase doesn't store type hints in a retrievable way after it retrieved the topic data
  // and freebase suggest function doesn't seem to hang on to the data
  // anywhere I can find it again either.

  // So put my meta-information about this content type 'type's into Drupal.settings
  $freebase_data = array(
    'freebase_data' => array(
      // The currently being edited node type
      'content_type' => $node->type,
      // What its equivalent types are in Freebase Schemas
      'content_types' => array(
        $node->type => $freebase_schema_ids,
      ),
      // Also provide details about the fields we support on this content type,
      // and what the freebase equivalents are, so that data can be mapped to the right place.
      'mappings' => array($node->type => $rdf_mapping),
    ),
  );
  drupal_add_js($freebase_data, 'setting');
  // So settings.freebase_data.content_types.page = ['/type/topic' , '/type/document'];

  // Add script that captures a successful title match and triggers a data load.
  drupal_add_js(drupal_get_path('module', 'freebase_data') . '/freebase_data.js', 'module');

  // js is now added.
  $added = TRUE;
  return $form_element;
}

/**
 * Declares the autocomplete handler that will ask Freebase for suggestions.
 *
 * Return a list of namespaces and functions that I know how to talk to.
 *
 * Implementation of HOOK_rdf_mapping_info.
 */
function freebase_data_rdf_mapping_info() {
  $resolvers = array();

  $resolvers['freebase'] = array(
    'prefix' => 'freebase',
    'name' => 'Freebase service lookup',
    'suggest_callback' => 'freebase_data_suggest_callback',
    'tables_blacklist' => array(),
    'suggest_arguments' => array(),
  );

  return $resolvers;
}

/**
 * Autocomplete handler for lookups to Freebase.
 *
 * TODO more than one CURIE,type?
 *
 * @param unknown_type $curie The type of thing to narrow the search to.
 * @param unknown_type $string The partial string to lookup.
 * @param unknown_type $db_args
 * @param unknown_type $limit
 * @return $matches
 */
function freebase_data_suggest_callback($curie, $string = '', $db_args = array(), $limit = 10) {
  $matches = array();

  // Prepare a freebase query for things of type $curie matching $string.
  // @see https://www.gstatic.com/freebase/suggest/3_1/suggest.js
  // @see http://wiki.freebase.com/wiki/ApiSearch
  // /freebase/v1/search?query=bob+dylan&filter=<original filter>&filter=(all type:artist)

  // Base url for autocomplete service.
  $service_url = "https://www.googleapis.com";
  // Service_url + service_path = url to autocomplete service.
  $service_path = "/freebase/v1/search";
  $fb_type = freebase_api_rdf_curie_to_freebase_id($curie);
  $args = array(
    'query' => $string,
    'type' => $fb_type,
    'limit' => $limit,
    'prefixed' => 'true',
  );
  $url = url($service_url . $service_path,  array('query' => $args));

  // Make query.
  $response = file_get_contents($url);
  $result = json_decode($response);
  if ($result->status == '200 OK') {
    foreach ($result->result as $suggestion) {
      $matches[$suggestion->name] = $suggestion->name;
    }
  }
  else {
    watchdog('freebase_data', 'Bad response from search. Query: %url Status: "%status" Response: <code>%result</code>', array('%url' => $url, '%status' => $result->status, '%result' => $response));
  }

  return $matches;
}

