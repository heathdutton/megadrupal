<?php

/**
 * @file
 * Module for integrating a referral system with the user registration system.
 * Enables tracking of referrals and clicks, and granting of commission to
 * affiliates when referrals make purchases. Also facilitates payout via PayPal
 * and manual payout tracking.
 *
 * Original author: Leighton Whiting - Released under GENERAL PUBLIC LICENSE
 * Current maintenance by multiple MoneySuite users.
 * Re: new initiative: https://www.drupal.org/node/2315653 
 *
 * @todo - Add payment gateway functionality to let the users pay with their balance
 *
 * @todo - Add a field where users can enter their affiliate's name or affiliate id
 * 
 */

/**
 * Implements hook_help().
 */
function ms_affiliates_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/help#ms_affiliates":
      $output = '<p>' . t("MoneySuite Affiliates Suite is a module which is designed to help you keep track of who referred who to your site, and handle commissions.") . '</p>';
      break;
  }
  return $output;
}

/**
 * Implements hook_permission().
 */
function ms_affiliates_permission() {
  return array(
    'act as affiliate' => array(
      'title' => t('act as affiliate'),
      'description' => t('Gives the ability to refer users and have access to the Affiliate Dashboard.'),
    ),
    'request payment' => array(
      'title' => t('request payment'),
      'description' => t('Allows the user to request a payment when they reach the minimum payout.'),
    ),
    'administer affiliates' => array(
      'title' => t('administer affiliates'),
      'description' => t('Administer the affiliates and affiliate system.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Access callback: Tests to see if the user can access the affiliate dashboard.
 *
 * @param object $account
 *   The account of the affiliate.
 *
 * @return bool
 *   Returns TRUE if the user has access, FALSE otherwise.
 *
 * @see ms_affiliates_menu
 */
function ms_affiliates_access_test($account) {
  global $user;
  return (user_access('access administration pages') OR (user_access('act as affiliate') && ($account->uid == $user->uid)));
}

/**
 * Access callback: Tests to see if the current user can request a payment.
 *
 * @return bool
 *   Returns TRUE if the user has access, FALSE otherwise.
 *
 * @see ms_affiliates_menu
 */
function ms_affiliates_request_payment_access_test() {
  global $user;
  $account = user_load($user->uid);
  return (user_access('request payment') AND !empty($account->af_balance) && $account->af_balance >= variable_get('ms_affiliates_min_payout', 0) AND ms_affiliates_get_payment_methods($account));
}

/**
 * Access callback: Tests to see if the current user can access the program info page.
 *
 * @return bool
 *   Returns TRUE if the user has access, FALSE otherwise.
 *
 * @see ms_affiliates_menu
 */
function ms_affiliates_program_info_access_test() {
  if ($program_info = variable_get('ms_affiliates_program_info', '') AND !empty($program_info)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Access callback: Tests to see if the user can access the affiliate signup page.
 *
 * @param object $account
 *   The account of the affiliate.
 *
 * @return bool
 *   Returns TRUE if the user has access, FALSE otherwise.
 *
 * @see ms_affiliates_menu
 */
function ms_affiliates_signup_test($account) {
  global $user;
  if ($user->uid AND variable_get('ms_affiliates_allow_signup', FALSE) AND !user_access('act as affiliate') AND ($account->uid == $user->uid)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Access callback: Tests to see if paypal_wps is enabled.
 *
 * @return bool
 *   Returns TRUE if the user has access, FALSE otherwise.
 *
 * @see ms_affiliates_menu
 */
function ms_affiliates_paypal_access_test() {
  if (module_exists('ms_paypal_wps')) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_menu().
 */
function ms_affiliates_menu() {
  $items = array();

  $items['admin/moneysuite/ms_affiliates'] = array(
    'title' => 'Affiliates Suite',
    'description' => 'Set the various MoneySuite Affiliates Suite Settings here',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_affiliates_admin'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['ms_affiliates/backend'] = array(
    'title' => 'Affiliates Backend',
    'page callback' => 'ms_affiliates_paypal_ipn_page',
    'type' => MENU_CALLBACK,
    'access callback' => 'ms_core_view_page_access_test',
  );
  $items['ms_affiliates/request-payment'] = array(
    'title' => 'Request Payment',
    'page callback' => 'ms_affiliates_request_payment_page',
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
    'access callback' => 'ms_affiliates_request_payment_access_test',
  );
  $items['user/%user/ms_affiliate'] = array(
    'title' => 'Affiliates',
    'page callback' => 'ms_affiliates_dashboard_page',
    'page arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'ms_affiliates_access_test',
    'access arguments' => array(1),
  );
  $items['user/%user/affiliate-signup'] = array(
    'title' => 'Affiliate Signup',
    'page callback' => 'ms_affiliates_signup_page',
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'ms_affiliates_signup_test',
    'access arguments' => array(1),
  );
  $items['user/%user/ms_affiliate/dashboard'] = array(
    'title' => 'Dashboard',
    'page callback' => 'ms_affiliates_dashboard_page',
    'page arguments' => array(1),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access callback' => 'ms_affiliates_access_test',
    'access arguments' => array(1),
    'weight' => 0
  );
  $items['user/%user/ms_affiliate/referrals'] = array(
    'title' => 'Referrals',
    'page callback' => 'ms_affiliates_referrals_page',
    'page arguments' => array(1),
    'access callback' => 'ms_affiliates_access_test',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );
  $items['user/%user/ms_affiliate/clicks'] = array(
    'title' => 'Unique Click Count',
    'page callback' => 'ms_affiliates_clicks_page',
    'page arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'ms_affiliates_access_test',
    'access arguments' => array(1),
    'weight' => 3
  );
  $items['user/%user/ms_affiliate/tell-friend'] = array(
    'title' => 'Tell a Friend',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_affiliates_tell_friend_form', 1),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'ms_affiliates_access_test',
    'access arguments' => array(1),
  );
  $items['user/%user/ms_affiliate/clicks/details'] = array(
    'title' => 'Unique Clicks - Details',
    'page callback' => 'ms_affiliates_click_details',
    'page arguments' => array(1),
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
    'access callback' => 'ms_affiliates_access_test',
    'access arguments' => array(1),
  );
  $items['user/%user/ms_affiliate/info'] = array(
    'title' => 'Program Info',
    'page callback' => 'ms_affiliates_program_info_page',
    'page arguments' => array(1),
    'access callback' => 'ms_affiliates_program_info_access_test',
    'type' => MENU_LOCAL_TASK,
  );
  $items[variable_get('ms_affiliates_af_url', 'af')] = array(
    'title' => 'Incoming Referral',
    'page callback' => 'ms_affiliates_incoming_referral',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/people/pay_affiliates'] = array(
    'title' => 'Pay Affiliates',
    'page callback' => 'ms_affiliates_list_affiliates',
    'access arguments' => array('administer affiliates'),
    'description' => 'View and Pay Affiliates',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/people/assign_affiliates'] = array(
    'title' => 'Assign Affiliates',
    'page callback' => 'ms_affiliates_assign_affiliates',
    'access arguments' => array('administer affiliates'),
    'description' => 'Assign Affiliates for users',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/people/pay_affiliates/pay/%'] = array(
    'title' => 'Pay Affiliate',
    'page callback' => 'ms_affiliates_pay_affiliate',
    'page arguments' => array(4),
    'access callback' => 'ms_affiliates_paypal_access_test',
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );
  $items['admin/people/pay_affiliates/enter_payment/%'] = array(
    'title' => 'Pay Affiliate - Enter Manual Payment',
    'page callback' => 'ms_affiliates_enter_payment',
    'page arguments' => array(4),
    'access arguments' => array('administer affiliates'),
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );
  $items['admin/people/pay_affiliates/credit/%'] = array(
    'title' => 'Credit Affiliate',
    'page callback' => 'ms_affiliates_enter_credit',
    'page arguments' => array(4),
    'access arguments' => array('administer affiliates'),
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );
  $items['admin/moneysuite/ms_affiliates/rebuild_balances'] = array(
    'title' => 'Rebuild Balances',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_affiliates_rebuild_balances_confirm'),
    'access arguments' => array('administer affiliates'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/moneysuite/ms_affiliates/custom_commissions/add'] = array(
    'title' => 'Add Custom Commission for a User',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_affiliates_user_commission_form', 'add'),
    'access arguments' => array('administer affiliates'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/moneysuite/ms_affiliates/custom_commissions/edit/%'] = array(
    'title' => 'Edit Custom Commission for a User',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_affiliates_user_commission_form', 'edit', 5),
    'access arguments' => array('administer affiliates'),
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );
  $items['admin/moneysuite/ms_affiliates/custom_commissions/delete/%'] = array(
    'title' => 'Delete Custom Commission for a User',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_affiliates_delete_user_commission_confirm', 5),
    'access arguments' => array('administer affiliates'),
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );

  return $items;
}

/**
 * Handles an incoming referral by storing it in the $_SESSION and cookie.
 */
function ms_affiliates_incoming_referral() {
  $af_name = urldecode(arg(1));
  $goto = variable_get('ms_affiliates_af_redirect', '');
  if ($account = user_load_by_name($af_name)) {
    $_SESSION['affiliate'] = $account->uid;
    $_SESSION['af_name'] = $account->name;

    // Set the cookie.
    ms_affiliates_set_cookie($_SESSION['affiliate']);

    // Record the click.
    ms_affiliates_clicked($account, $goto);
  } else {
    ms_core_log_error('ms_affiliates', 'Unable to load the affiliate: @affiliate', array('@affiliate' => $af_name));
  }

  // Redirect the User.
  drupal_goto($goto);
}

/**
 * Implements hook_init().
 */
function ms_affiliates_init() {
  global $user;
  if (!$user->uid AND (isset($_REQUEST['an']) OR isset($_REQUEST['a']))) {
    $account = NULL;
    if (isset($_REQUEST['a'])) {
      $account = user_load($_REQUEST['a']);
    } elseif (isset($_REQUEST['an'])) {
      $account = user_load_by_name(urldecode($_REQUEST['an']));
    }

    if (!empty($account->uid)) {
      // Set the session variable.
      $_SESSION['affiliate'] = $account->uid;
      $_SESSION['af_name'] = $account->name;

      // Get the redirect.
      $goto = drupal_get_path_alias($_GET['q']);
      if (empty($goto)) {
        $goto = variable_get('ms_affiliates_af_redirect', '');
      }

      // Set the cookie.
      ms_affiliates_set_cookie($_SESSION['affiliate']);

      // Record the Click.
      ms_affiliates_clicked($account, $goto);

      // Redirect to clear the '?a=#'.
      drupal_goto($goto);
    }
  }

  // Load the affiliate from the order, used in PayPal WPS return page.
  if (isset($_POST['custom'])) {
    if ($order = ms_core_order_load($_POST['custom']) AND isset($order->data['affiliate_aid']) AND $order->data['affiliate_aid']) {
      $_SESSION['affiliate'] = $order->data['affiliate_aid'];
    }
  } // Repopulate from Cookie.
  elseif (isset($_COOKIE['affiliate']) AND !isset($_SESSION['affiliate'])) {
    $_SESSION['affiliate'] = isset($_COOKIE['affiliate']['uid']) ? $_COOKIE['affiliate']['uid'] : 0;
    $_SESSION['af_name'] = isset($_COOKIE['affiliate']['name']) ? $_COOKIE['affiliate']['name'] : '';
    $_SESSION['affiliate_cookie_timestamp'] = isset($_COOKIE['affiliate']['timestamp']) ? $_COOKIE['affiliate']['timestamp'] : time();
  }
}

/**
 * Implements hook_ms_order_save().
 */
function ms_affiliates_ms_order_save($order) {
  if (isset($_SESSION['affiliate']) AND $_SESSION['affiliate']) {
    // Add the affiliate id to the order object.
    $order->data['affiliate_aid'] = $_SESSION['affiliate'];
  }
  return $order;
}

/**
 * Implements hook_block_info().
 */
function ms_affiliates_block_info() {
  $blocks['ms_affiliates_top-affiliates'] = array(
    'info' => t('Top Affiliates'),
  );
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function ms_affiliates_block_configure($delta) {
  $form = array();
  if ($delta == 'ms_affiliates_top-affiliates') {
    $form['ms_affiliates_top_x_affiliates'] = array(
      '#type' => 'textfield',
      '#title' => t('How many top affiliates should be shown?'),
      '#size' => 60,
      '#description' => t('This will determine how many top affiliates will be shown in the block.'),
      '#default_value' => variable_get('ms_affiliates_top_x_affiliates', 10),
    );
  }
  return $form;
}

/**
 * Implements hook_block_save().
 */
function ms_affiliates_block_save($delta, $edit) {
  if ($delta == 'ms_affiliates_top-affiliates') {
    // Have Drupal save the string to the database.
    variable_set('ms_affiliates_top_x_affiliates', $edit['ms_affiliates_top_x_affiliates']);
  }
  return;
}

/**
 * Implements hook_block_view().
 */
function ms_affiliates_block_view($delta) {
  switch ($delta) {
    case 'ms_affiliates_top-affiliates':
      $block['subject'] = t('Top Affiliates');
      $block['content'] = ms_affiliates_top_affiliates_html();
      return $block;
  }
}

/**
 * Implements hook_block().
 */
function ms_affiliates_block_OLD($op = 'list', $delta = '', $edit = array()) {
}

/**
 * Generates the content for the top affiliates block.
 *
 * @return string
 *   The block html.
 */
function ms_affiliates_top_affiliates_html() {
  $num = variable_get('ms_affiliates_top_x_affiliates', 10);
  $result = db_query_range("SELECT COUNT(aid) AS aidnum, aid FROM {ms_affiliates_genealogy} GROUP BY aid ORDER BY aidnum DESC", 0, $num);
  $items = array();
  foreach ($result as $affiliate) {
    $account = user_load($affiliate->aid);
    if ($account->name) {
      $items[] = t('@affname - @affnum', array('@affname' => $account->name, '@affnum' => format_plural($affiliate->aidnum, '1 referral', '@count referrals')));
    }
  }

  return theme_item_list(array('items' => $items, 'title' => NULL, 'type' => 'ol', 'attributes' => array()));
}

/**
 * Implements hook_user_insert().
 */
function ms_affiliates_user_insert(&$edit, $account, $category) {
  if (isset($edit['affiliate_aid'])) {
    ms_affiliates_save_referral_helper($account, $edit['affiliate_aid']);
  }
}

/**
 * Implements hook_user_presave().
 */
function ms_affiliates_user_presave(&$edit, $account, $category) {
  // Add the data to the user account.
  $edit['data']['ms_affiliates_paypal_address'] = isset($edit['ms_affiliates_paypal_address']) ? $edit['ms_affiliates_paypal_address'] : '';
  $edit['data']['ms_affiliates_mailing_address'] = isset($edit['ms_affiliates_mailing_address']) ? $edit['ms_affiliates_mailing_address'] : '';
  $edit['data']['ms_affiliates_iban'] = isset($edit['ms_affiliates_iban']) ? $edit['ms_affiliates_iban'] : '';
  $edit['data']['ms_affiliates_swift'] = isset($edit['ms_affiliates_swift']) ? $edit['ms_affiliates_swift'] : '';

  if ($category == 'account' AND user_access('administer affiliates')) {
    //Save the New Referrer.
    if (isset($edit['af_ref']) AND $raccount = user_load_by_name($edit['af_ref'])) {
      $edit['affiliate_aid'] = $raccount->uid;
      if ($account->uid AND (!isset($account->affiliate_aid) OR $raccount->uid != $account->affiliate_aid)) {
        ms_affiliates_set_affiliate($account, $raccount);
        // Delete form fields in $edit.
        $edit['af_ref'] = NULL;
        $edit['affiliate_aid'] = NULL;
      }
    }

    //Save the New Balance.
    if (user_access('act as affiliate', $account)) {
      if (isset($edit['af_balance']) AND ($edit['af_balance'] != $account->af_balance)) {
        $commission = $edit['af_balance'] - $account->af_balance;
        ms_affiliates_update_balance($account->uid, $edit['af_balance'], TRUE);
        if ($commission) {
          global $user;
          drupal_set_message(t('Updated Balance for the Affiliate'));
          ms_affiliates_insert_record($account->uid, $user->uid, 0, 0, t('Manual Credit'), 'af_credit', $commission);
        }
      }
    }
    //Delete form fields in $edit.
    $edit['af_balance'] = NULL;
  }
}

/**
 * Implements hook_user_view().
 */
function ms_affiliates_user_view($account, $view_mode) {
  if (variable_get('ms_affiliates_show_referrer', 0) AND isset($account->affiliate_aid)) {
    if ($raccount = user_load($account->affiliate_aid)) {
      $r_name = $raccount->name;
    } else {
      $r_name = "No Referrer";
    }
    $account->content['ms_affiliates'] = array(
      '#type' => 'user_profile_category',
      '#title' => t('Referrer'),
      '#weight' => -50,
    );
    $account->content['ms_affiliates']['af_ref'] = array(
      '#type' => 'item',
      '#title' => t('Your Referrer'),
      '#markup' => $r_name,
      '#weight' => 3,
    );
  }
}

/**
 * Implements hook_user_cancel().
 */
function ms_affiliates_user_cancel($edit, $account, $method) {
  // Move the User's Downline to be under the user's referrer.
  $puid = db_query('SELECT aid FROM {ms_affiliates_genealogy} WHERE uid = :uid', array(':uid' => $account->uid))->fetchField();
  db_update('ms_affiliates_genealogy')
    ->fields(array(
      'aid' => $puid,
    ))
    ->condition('aid', $account->uid)
    ->execute();

  // Remove the Record from the Referrals Table.
  db_delete('ms_affiliates_genealogy')
    ->condition('uid', $account->uid)
    ->execute();

  // Remove the Record from the Balance Table.
  db_delete('ms_affiliates_balance')
    ->condition('uid', $account->uid)
    ->execute();

  // Remove the Record from the Affiliates Table.
  db_delete('ms_affiliates_history')
    ->condition('uid', $account->uid)
    ->execute();
}

/**
 * Implements hook_user_load().
 */
function ms_affiliates_user_load($users) {
  foreach ($users as $uid => $account) {
    // Load the Paypal mail and address into the user object.
    $account->ms_affiliates_paypal_address = isset($account->data['ms_affiliates_paypal_address']) ? $account->data['ms_affiliates_paypal_address'] : '';
    $account->ms_affiliates_mailing_address = isset($account->data['ms_affiliates_mailing_address']) ? $account->data['ms_affiliates_mailing_address'] : '';
    $account->ms_affiliates_iban = isset($account->data['ms_affiliates_iban']) ? $account->data['ms_affiliates_iban'] : '';
    $account->ms_affiliates_swift = isset($account->data['ms_affiliates_swift']) ? $account->data['ms_affiliates_swift'] : '';

    //Load the Balance to the $account object.
    $account->af_balance = ms_affiliates_get_balance($account->uid);

    $count = db_query('SELECT COUNT(*) FROM {ms_affiliates_genealogy} WHERE aid = :aid', array(':aid' => $account->uid))->fetchField();
    $account->num_referrals = $count;

    if ($account->uid != 1) {
      //Load the aid to the $account object.
      $account->affiliate_aid = ms_affiliates_get_affiliate($account->uid);

      if ($account->affiliate_aid AND $account->affiliate_aid != $account->uid AND user_access('act as affiliate', user_load($account->affiliate_aid))) {
        //Load the affiliation date.
        $account->affiliation_date = ms_affiliates_get_affiliation_date($account->uid);
      } else {
        //Remove the affiliate_aid so it can't be used elsewhere.
        unset($account->affiliate_aid);
      }
    }
    $users[$uid] = $account;
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for user_profile_form().
 *
 * Shows the affiliate balance and other information on the user edit form.
 */
function ms_affiliates_form_user_profile_form_alter(&$form, &$form_state) {
  if ($form['#user_category'] == 'account') {
    $account = $form['#user'];

    $account = user_load($account->uid, TRUE);

    if (user_access('act as affiliate', $account)) {
      $form['ms_affiliates'] = array(
        '#type' => 'fieldset',
        '#title' => t('Affiliate Settings'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
      );
      if (variable_get('ms_affiliates_method_paypal', TRUE)) {
        $form['ms_affiliates']['ms_affiliates_paypal_address'] = array(
          '#type' => 'textfield',
          '#title' => t('PayPal Email Address'),
          '#default_value' => $account->ms_affiliates_paypal_address,
          '#description' => t('Enter your PayPal Address you wish to be paid with.'),
          '#weight' => 11,
          '#required' => FALSE,
        );
      }
      if (variable_get('ms_affiliates_method_check', TRUE)) {
        $form['ms_affiliates']['ms_affiliates_mailing_address'] = array(
          '#type' => 'textarea',
          '#title' => t('Mailing Address'),
          '#default_value' => $account->ms_affiliates_mailing_address,
          '#description' => t('Enter your Mailing Address you wish to receive a check at.'),
          '#weight' => 12,
          '#required' => FALSE,
        );
      }
      if (variable_get('ms_affiliates_method_iban', TRUE)) {
        $form['ms_affiliates']['ms_affiliates_iban'] = array(
          '#type' => 'textfield',
          '#title' => t('IBAN'),
          '#default_value' => $account->ms_affiliates_iban,
          '#description' => t('Enter your bank IBAN number.'),
          '#weight' => 13,
          '#required' => FALSE,
        );
      }
      if (variable_get('ms_affiliates_method_swift', TRUE)) {
        $form['ms_affiliates']['ms_affiliates_swift'] = array(
          '#type' => 'textfield',
          '#title' => t('SWIFT'),
          '#default_value' => $account->ms_affiliates_swift,
          '#description' => t('Enter your bank SWIFT number.'),
          '#weight' => 14,
          '#required' => FALSE,
        );
      }
    }
    if (user_access('administer affiliates')) {
      $affiliate = user_load(ms_affiliates_get_affiliate($account->uid), TRUE);

      $form['ms_affiliates']['af_ref'] = array(
        '#type' => 'textfield',
        '#title' => t('Affiliate'),
        '#default_value' => $affiliate->name,
        '#description' => t('The affiliate for the user. Must be a valid user.'),
        '#weight' => 10,
        '#autocomplete_path' => 'admin/structure/ms_core/autocomplete',
        '#required' => FALSE,
      );
      if (user_access('act as affiliate', $account)) {
        $form['ms_affiliates']['af_balance'] = array(
          '#type' => 'textfield',
          '#title' => t('Affiliate Balance'),
          '#default_value' => $account->af_balance,
          '#description' => t('The current Affiliate Balance for the user.'),
          '#weight' => 11,
          '#required' => FALSE,
        );
      }
    }
  }
}

/**
 * Gets the date the user became affiliated.
 *
 * @param int $uid
 *   The user id.
 *
 * @return int
 *   The timestamp of the affiliation, or the creation date of the user.
 */
function ms_affiliates_get_affiliation_date($uid) {
  $date = db_query('SELECT date FROM {ms_affiliates_genealogy} WHERE uid = :uid', array(':uid' => $uid))->fetchField();
  if (!$date) {
    $date = db_query('SELECT created FROM {users} WHERE uid = :uid', array(':uid' => $uid))->fetchField();
  }
  return $date;
}

/**
 * Saves a referral for an affiliate.
 *
 * @param object $account
 *   The referral account.
 * @param int $aid
 *   The user id of the affiliate.
 */
function ms_affiliates_save_referral_helper($account, $aid) {
  // If the affiliate is already set, skip this.
  if (!empty($account->affiliate_aid) && $account->affiliate_aid == $aid) {
    return;
  }
  if ($affiliate = user_load($aid, TRUE)) {
    // Insert a new referral into the referrals table.
    ms_affiliates_set_affiliate($account, $affiliate);

    // Insert a new record into the balance table.
    if (user_access('act as affiliate', $account)) {
      ms_affiliates_update_balance($account->uid, 0, TRUE);
    }

    // Credit the Affiliates with the 1 time signup bonus.
    $bonus = variable_get('ms_affiliates_referral_bonus', '0');
    ksort($account->roles);
    foreach ($account->roles as $rid => $rolename) {
      if (variable_get('ms_affiliates_use_role_specific_commission_' . $rid, FALSE)) {
        $bonus = variable_get('ms_affiliates_referral_bonus_' . $rid, '0');
      }
    }
    if ($bonus) {
      // Get the genealogy of the user.
      $genealogy = ms_affiliates_get_parents($account->uid, variable_get('ms_affiliates_max_levels', 3));
      $commissions = explode(',', $bonus);

      ms_affiliates_credit_affiliates($genealogy, 1, 0, 0, 'ref_bonus', 'ms_affiliates', t('Referral Bonus'), $commissions);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for user_register_form().
 *
 * Shows the affiliate on the user registration form.
 */
function ms_affiliates_form_user_register_form_alter(&$form, &$form_state) {
  $aid = isset($_SESSION['affiliate']) ? $_SESSION['affiliate'] : 0;

  // Redirect the user to login page if force referral signup is turned on and
  // the user is not referred.
  if (variable_get('ms_affiliates_force_referral', 0) AND !$aid AND !user_access('administer affiliates')) {
    // Show error if no referrer is specified
    drupal_set_message(t('Sorry, you must be referred to signup.'));
    drupal_goto('user');
  }

  $a_user = user_load($aid, TRUE);
  if ((!$aid OR !$a_user OR !$a_user->uid) AND module_exists('invite')) {
    // Make the Inviter the Affiliate if Invite module was used.
    if ($invite = invite_load_from_context()) {
      $a_user = $invite->inviter;
    }
  }

  if ($a_user AND $a_user->uid) {
    $form['affiliate_aid'] = array(
      '#type' => 'value',
      '#value' => $a_user->uid,
    );
    if (variable_get("ms_affiliates_show_referrer_registration", 0)) {
      $form['ms_affiliates'] = array(
        '#type' => 'fieldset',
        '#title' => t('Referrer'),
        '#collapsible' => FALSE,
      );

      // Add the form fields if Show Referrer is on.
      $form['ms_affiliates']['af_ref'] = array('#type' => 'textfield',
        '#title' => t("Your Referrer"),
        '#value' => $a_user->name,
        '#weight' => -25,
        '#disabled' => TRUE,
      );
    }
  }


  if (user_access('administer affiliates')) {
    $form['ms_affiliates']['af_ref'] = array(
      '#type' => 'textfield',
      '#title' => t('Affiliate'),
      '#default_value' => '',
      '#description' => t('The affiliate for the user. Must be a valid user.'),
      '#weight' => 10,
      '#autocomplete_path' => 'admin/structure/ms_core/autocomplete',
      '#required' => FALSE,
    );
  }
}

/**
 * Implements hook_ms_core_overrides().
 */
function ms_affiliates_ms_core_overrides() {
  return array(
    'ms_affiliates' => array(
      'title' => t('Affiliates Suite'),
      'form' => 'ms_affiliates_admin',
    ),
  );
}

/**
 * Form constructor for the admin settings form.
 *
 * @see ms_affiliates_admin_validate()
 * @see system_settings_form()
 * @ingroup forms
 */
function ms_affiliates_admin($form, &$form_state) {
  $form['main'] = array(
    '#type' => 'fieldset',
    '#title' => t('Main Settings'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['extra'] = array(
    '#type' => 'fieldset',
    '#title' => t('Extra Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['integration'] = array(
    '#type' => 'fieldset',
    '#title' => t('3rd Party Integration Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['email'] = array(
    '#type' => 'fieldset',
    '#title' => t('Email Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['roles'] = array(
    '#type' => 'fieldset',
    '#title' => t('Role Specific Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['users'] = array(
    '#type' => 'fieldset',
    '#title' => t('Custom User Commissions'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['main']['ms_affiliates_show_commission_levels'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show Commission Levels'),
    '#default_value' => variable_get('ms_affiliates_show_commission_levels', FALSE),
    '#description' => t('If this is checked, the users will be able to see their Commission Levels on the Affiliates Dashboard page.'),
    '#required' => FALSE,
  );
  $form['main']['ms_affiliates_method_paypal'] = array(
    '#type' => 'checkbox',
    '#title' => t('Collect PayPal Email for Payout?'),
    '#default_value' => variable_get('ms_affiliates_method_paypal', FALSE),
    '#description' => t('If this is checked, the users will be able to enter their PayPal Email Address in their User Account so that you can pay them via PayPal.'),
    '#required' => FALSE,
  );
  $form['main']['ms_affiliates_method_check'] = array(
    '#type' => 'checkbox',
    '#title' => t('Collect Mailing Address for Payout?'),
    '#default_value' => variable_get('ms_affiliates_method_check', FALSE),
    '#description' => t('If this is checked, the users will be able to enter their Mailing Address in their User Account so that you can pay them via Check.'),
    '#required' => FALSE,
  );
  $form['main']['ms_affiliates_method_iban'] = array(
    '#type' => 'checkbox',
    '#title' => t('Collect IBAN # for Payout?'),
    '#default_value' => variable_get('ms_affiliates_method_iban', FALSE),
    '#description' => t('If this is checked, the users will be able to enter their IBAN # in their User Account so that you can pay them via Bank Transfer.'),
    '#required' => FALSE,
  );
  $form['main']['ms_affiliates_method_swift'] = array(
    '#type' => 'checkbox',
    '#title' => t('Collect SWIFT # for Payout?'),
    '#default_value' => variable_get('ms_affiliates_method_swift', FALSE),
    '#description' => t('If this is checked, the users will be able to enter their SWIFT # in their User Account so that you can pay them via Bank Transfer.'),
    '#required' => FALSE,
  );
  $form['main']['ms_affiliates_af_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Affiliate URL'),
    '#default_value' => variable_get('ms_affiliates_af_url', 'af'),
    '#description' => t("The part of the link that your affiliates can use to refer users. Example: yoursite.com/af/username where 'af' is the affiliate url setting here"),
    '#required' => FALSE,
  );
  $form['main']['ms_affiliates_af_redirect'] = array(
    '#type' => 'textfield',
    '#title' => t('Affiliate Redirect'),
    '#default_value' => variable_get('ms_affiliates_af_redirect', ''),
    '#description' => t("Where referrals will be redirected to when they come through yoursite.com/af/username . Leave blank to redirect to the front page."),
    '#required' => FALSE,
  );
  $form['main']['ms_affiliates_min_payout'] = array(
    '#type' => 'textfield',
    '#title' => t('Minimum Payout'),
    '#default_value' => variable_get('ms_affiliates_min_payout', '0'),
    '#size' => 32,
    '#maxlength' => 64,
    '#description' => t("The minimum amount an affiliate must have earned before Payout is available"),
    '#required' => FALSE,
  );
  $form['main']['ms_affiliates_net_term'] = array(
    '#type' => 'textfield',
    '#title' => t('Net Term'),
    '#default_value' => variable_get('ms_affiliates_net_term', '0'),
    '#size' => 32,
    '#maxlength' => 64,
    '#description' => t("How many days after a commission is granted should the affiliate be able to access the commission?"),
    '#required' => FALSE,
  );
  $form['main']['ms_affiliates_max_levels'] = array(
    '#type' => 'textfield',
    '#title' => t('Max Referral Levels'),
    '#default_value' => variable_get('ms_affiliates_max_levels', '3'),
    '#size' => 32,
    '#maxlength' => 64,
    '#description' => t('How many levels of referrals can an affiliate have?'),
    '#required' => TRUE,
    '#ms_override' => TRUE,
  );
  $form['main']['ms_affiliates_payout_percentages'] = array(
    '#type' => 'textfield',
    '#title' => t('Affiliate Level Commissions'),
    '#default_value' => variable_get('ms_affiliates_payout_percentages', '15,10,5'),
    '#size' => 32,
    '#maxlength' => 64,
    '#description' => t("Sets the default commission structure.
      This should be a comma separated list of number with the first value corresponding
      to the first level in the hierarchy and each successive value corresponding to the
      next level in the hierarchy. To give an exact amount, use the '$' sign in front of
      the number, no matter the currency. To give a percentage of the order amount, specify
      simply the number. Example: '15,$" . "10.50,5.25' . This would give 15% of the order
      amount to the direct affiliate, ten dollars and fifty cents to the affiliate's
      affiliate, and 5.25 percent of the order amount to the affiliate of the second tier."),
    '#required' => TRUE,
    '#ms_override' => TRUE,
  );
  $form['main']['ms_affiliates_referral_bonus'] = array(
    '#type' => 'textfield',
    '#title' => t('Referral One-Time Bonus'),
    '#default_value' => variable_get('ms_affiliates_referral_bonus', '0'),
    '#size' => 32,
    '#maxlength' => 64,
    '#description' => t("If you want affiliates to receive an instant bonus for referring new users, put that amount here. You must set an amount for each level, and you can only use $ amounts. For example, if you have 3 levels, and you only want the first two to receive the bonus, do something like this: '$5,$2,0'. Otherwise leave as 0 to disable this feature."),
    '#required' => FALSE,
  );
  $form['main']['ms_affiliates_recurring_one_time'] = array(
    '#type' => 'checkbox',
    '#title' => t('Pay Commission For First Recurring Payment Only?'),
    '#default_value' => variable_get('ms_affiliates_recurring_one_time', 0),
    '#description' => t('If this is checked, affiliates will only receive commission for the first recurring payment a referral makes.'),
    '#required' => FALSE,
    '#ms_override' => TRUE,
  );
  $form['main']['ms_affiliates_default_currency'] = array(
    '#type' => 'select',
    '#title' => t('Default Currency'),
    '#options' => ms_core_get_currencies(),
    '#default_value' => variable_get('ms_affiliates_default_currency', 'USD'),
    '#description' => t("The Default Currency for the Affiliate System"),
    '#required' => TRUE,
  );
  $form['main']['ms_affiliates_force_referral'] = array(
    '#type' => 'checkbox',
    '#title' => t('Force Referred Signups'),
    '#default_value' => variable_get('ms_affiliates_force_referral', 0),
    '#description' => t('Select to disable registration unless the user comes through a referrer link.'),
    '#required' => FALSE,
  );
  $form['main']['ms_affiliates_banner_template'] = array(
    '#type' => 'textarea',
    '#title' => t('Affiliate Banner Templates'),
    '#description' => t('The IMG tag(s) around which the url of the affiliate is wrapped around. Insert as many as you want.'),
    '#default_value' => variable_get('ms_affiliates_banner_template', ''),
  );

  $form['extra']['ms_affiliates_allow_signup'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow users to Signup to be Affiliates?'),
    '#default_value' => variable_get('ms_affiliates_allow_signup', 0),
    '#description' => t('This will add a signup page in the User Account where users can signup to be affiliates. They will click a button and be granted the affiliate role.'),
    '#required' => FALSE,
  );
  $roles = (user_roles(TRUE));
  unset($roles[DRUPAL_AUTHENTICATED_RID]);
  $form['extra']['ms_affiliates_signup_role'] = array(
    '#type' => 'select',
    '#title' => t('Signup Role'),
    '#options' => $roles,
    '#default_value' => variable_get('ms_affiliates_signup_role', 0),
    '#description' => t('Select which role to grant to a user who signs up to be an affiliate on the Signup Page.'),
    '#required' => FALSE,
  );
  $signup_page_text = variable_get('ms_affiliates_signup_page_text', array('format' => '', 'value' => ''));
  $form['extra']['ms_affiliates_signup_page_text'] = array(
    '#type' => 'text_format',
    '#format' => isset($signup_page_text['format']) ? $signup_page_text['format'] : NULL,
    '#title' => t('Signup Page Text'),
    '#description' => t('The text that will appear on the signup page'),
    '#default_value' => $signup_page_text['value'],
  );
  $program_info = variable_get('ms_affiliates_program_info', array('format' => '', 'value' => ''));
  $form['extra']['ms_affiliates_program_info'] = array(
    '#type' => 'text_format',
    '#format' => isset($program_info['format']) ? $program_info['format'] : NULL,
    '#title' => t('Program Information'),
    '#default_value' => $program_info['value'],
    '#description' => t("Put the Program Information and anything else you want here, and it will show on the Affiliates Dashboard. Leave blank to show nothing."),
    '#required' => FALSE,
  );
  $form['extra']['ms_affiliates_signup_page_checkbox'] = array(
    '#type' => 'textfield',
    '#title' => t('Signup Page Checkbox'),
    '#default_value' => variable_get('ms_affiliates_signup_page_checkbox', t('I agree')),
    '#description' => t("Enter the text for the checkbox. Leave blank to show nothing."),
    '#required' => FALSE,
  );

  $form['integration']['ms_affiliates_uc_integration'] = array(
    '#type' => 'checkbox',
    '#title' => t('Turn on Ubercart Integration?'),
    '#default_value' => variable_get('ms_affiliates_uc_integration', 0),
    '#description' => t("Select this to turn on integration with Ubercart (http://drupal.org/project/ubercart).
    Whenever a referral purchases an order through Ubercart, the affiliates will be
    granted a percentage of the sale as commission. The percentage is set above."),
    '#required' => FALSE,
  );
  $form['integration']['ms_affiliates_uc_commission_grant_op'] = array(
    '#type' => 'select',
    '#title' => t('Ubercart Trigger Hook'),
    '#options' => array(
      'payment_received' => t('Payment Received'),
      'completed' => t('Order Completed'),
    ),
    '#default_value' => variable_get('ms_affiliates_uc_commission_grant_op', 'payment_received'),
    '#description' => t('Select which hook operation from ubercart to use for the trigger to grant commission to an affiliate.
      Payment Received is recommended.'),
    '#required' => FALSE,
  );
  $form['integration']['ms_affiliates_invite_integration'] = array(
    '#type' => 'checkbox',
    '#title' => t('Turn on Invite Integration?'),
    '#default_value' => variable_get('ms_affiliates_invite_integration', 0),
    '#description' => t('Select this to turn on integration with Invite (http://drupal.org/project/invite).
    When the invited user registers, the inviter will become the affiliate automatically.'),
    '#required' => FALSE,
  );
  $form['main']['ms_affiliates_show_referrer_registration'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show Referrer During Registration'),
    '#default_value' => variable_get('ms_affiliates_show_referrer_registration', 0),
    '#description' => t('Select whether to show the referrer during registration.'),
    '#required' => FALSE,
  );
  $form['main']['ms_affiliates_show_referrer'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show Referrer in User Account Menu'),
    '#default_value' => variable_get('ms_affiliates_show_referrer', 0),
    '#description' => t('Select whether to show the referrer in the user account page.'),
    '#required' => FALSE,
  );

  $roles = user_roles(TRUE);

  foreach ($roles as $rid => $role) {
    $form['roles'][$rid] = array(
      '#type' => 'fieldset',
      '#title' => $role,
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['roles'][$rid]['ms_affiliates_use_role_specific_commission_' . $rid] = array(
      '#type' => 'checkbox',
      '#title' => t('Use Custom Settings for !role?', array('!role' => $role)),
      '#default_value' => variable_get('ms_affiliates_use_role_specific_commission_' . $rid, FALSE),
      '#description' => t('Check this to use custom commission settings for this role.'),
      '#required' => FALSE,
    );
    $form['roles'][$rid]['ms_affiliates_recurring_one_time_' . $rid] = array(
      '#type' => 'checkbox',
      '#title' => t('Pay Commission For First Recurring Payment Only?'),
      '#default_value' => variable_get('ms_affiliates_recurring_one_time_' . $rid, 0),
      '#description' => t('If this is checked, affiliates will only receive commission for the first recurring payment a referral makes.'),
      '#required' => FALSE,
    );
    $form['roles'][$rid]['ms_affiliates_referral_bonus_' . $rid] = array(
      '#type' => 'textfield',
      '#title' => t('Referral One-Time Bonus'),
      '#default_value' => variable_get('ms_affiliates_referral_bonus_' . $rid, 0),
      '#size' => 32,
      '#maxlength' => 64,
      '#description' => t("If you want affiliates to receive an instant bonus for referring new users, put that amount here. You must set an amount for each level, and you can only use $ amounts. For example, if you have 3 levels, and you only want the first two to receive the bonus, do something like this: '$5,$2,0'. Otherwise leave as 0 to disable this feature."),
      '#required' => FALSE,
    );
    $form['roles'][$rid]['ms_affiliates_role_specific_commission_' . $rid] = array(
      '#type' => 'textfield',
      '#title' => t('Affiliate Level Commissions'),
      '#default_value' => variable_get('ms_affiliates_role_specific_commission_' . $rid, ''),
      '#size' => 32,
      '#maxlength' => 64,
      '#description' => t("This should be a comma separated list of number with the first value corresponding
        to the first level in the hierarchy and each successive value corresponding to the
        next level in the hierarchy. To give an exact amount, use the '$' sign in front of
        the number, no matter the currency. To give a percentage of the order amount, specify
        simply the number."),
      '#required' => FALSE,
    );
  }

  $headers = array(t('Affiliate Name'), t('Commissions'), t('Actions'));
  $rows = array();
  $attr = array('id' => 'custom-affiliates-table');
  $result = db_query("SELECT * FROM {ms_affiliates_user_commissions}");

  foreach ($result as $row) {
    $account = user_load($row->uid, TRUE);
    $actions = array();
    $actions[] = l(t('Edit'), 'admin/moneysuite/ms_affiliates/custom_commissions/edit/' . $account->uid);
    $actions[] = l(t('Delete'), 'admin/moneysuite/ms_affiliates/custom_commissions/delete/' . $account->uid);

    $rows[] = array(
      l($account->name, 'user/' . $account->uid),
      $row->commissions,
      implode(' | ', $actions),
    );
  }

  $form['users']['custom_user_commissions_table'] = array(
    '#type' => 'item',
    '#title' => t('Custom User Commissions'),
    '#markup' => theme('table', array('header' => $headers, 'rows' => $rows, 'attributes' => $attr, 'empty' => t('No custom commissions found.'))),
    '#description' => t("To Add a custom commissions setting for a specific user, !click",
      array('!click' => l(t('Click Here'), 'admin/moneysuite/ms_affiliates/custom_commissions/add'))),
  );

  $form['main']['ms_affiliates_cookie_lifetime'] = array(
    '#type' => 'select',
    '#title' => t('Cookie Lifetime'),
    '#default_value' => variable_get('ms_affiliates_cookie_lifetime', '1 year'),
    '#options' => array(
      '1 year' => t('1 Year'),
      '6 months' => t('6 Months'),
      '3 months' => t('3 Months'),
      '2 months' => t('2 Months'),
      '1 month' => t('1 Month'),
      '15 days' => t('15 Days'),
      '7 days' => t('7 Days'),
    ),
    '#description' => t('How long should the cookie be valid?'),
    '#required' => TRUE,
  );
  $form['email']['ms_affiliates_payment_mail_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Payment Sent Email Subject'),
    '#required' => TRUE,
    '#default_value' => variable_get('ms_affiliates_payment_mail_subject', t("Payment of [ms_affiliate:amount] has been sent")),
  );
  $form['email']['ms_affiliates_payment_mail_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Payment Sent Email Body'),
    '#description' => t("The email that is sent to an affiliate after they have been paid by PayPal. Leave Blank to Not Send an Email."),
    '#required' => TRUE,
    '#default_value' => variable_get('ms_affiliates_payment_mail_body', t("Dear [user:name],
A payment for the amount of [ms_affiliate:amount] has been sent to your PayPal Account ([ms_affiliate:paypalEmail]) on [date:long].
Your new Affiliate Balance is [ms_affiliate:balance].

Sincerely,
Staff")),
  );
  $form['email']['ms_affiliates_payment_mail_body_token_help']['tokens'] = array(
    '#theme' => 'token_tree',
    '#token_types' => array('ms_affiliate'),
    '#dialog' => TRUE,
  );

  $form['email']['ms_affiliates_manual_payment_mail_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Manual Payment Email Subject'),
    '#required' => TRUE,
    '#default_value' => variable_get('ms_affiliates_manual_payment_mail_subject', t("Payment of [ms_affiliate:amount] has been entered")),
  );
  $form['email']['ms_affiliates_manual_payment_mail_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Manual Payment Email Body'),
    '#description' => t("The email that is sent to an affiliate when a manual payment has been entered. Leave Blank to Not Send an Email."),
    '#required' => TRUE,
    '#default_value' => variable_get('ms_affiliates_manual_payment_mail_body', t("Dear [user:name],
A payment for the amount of [ms_affiliate:amount] has been entered to your account on [date:long].
Notes: [ms_affiliate:notes]
Your new Affiliate Balance is [ms_affiliate:balance].

Sincerely,
Staff")),
  );
  $form['email']['ms_affiliates_manual_payment_mail_body_token_help']['tokens'] = array(
    '#theme' => 'token_tree',
    '#token_types' => array('ms_affiliate'),
    '#dialog' => TRUE,
  );

  $form['email']['ms_affiliates_earned_commission_mail_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Commission Earned Email Subject'),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_affiliates_earned_commission_mail_subject', t("Commission Earned: [ms_affiliate:amount]!")),
  );
  $form['email']['ms_affiliates_earned_commission_mail_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Commission Earned Email Body'),
    '#description' => t("The email that is sent to an affiliate each time they earn commission. Leave Blank to Not Send an Email."),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_affiliates_earned_commission_mail_body', t("Dear [user:name],
You have earned [ms_affiliate:amount] commission on [ms_affiliate:itemName] purchased by [ms_affiliate:refName] on [date:long]. The amount has been credited to your Affiliate Balance.
Your new Affiliate Balance is [ms_affiliate:balance].

Sincerely,
Staff")),
  );

  $form['email']['ms_affiliates_earned_commission_mail_body_token_help']['tokens'] = array(
    '#theme' => 'token_tree',
    '#token_types' => array('ms_affiliate'),
    '#dialog' => TRUE,
  );

  $form['email']['ms_affiliates_earned_bonus_mail_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Bonus Earned Email Subject'),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_affiliates_earned_bonus_mail_subject', t("Bonus Earned: [ms_affiliate:amount]!")),
  );
  $form['email']['ms_affiliates_earned_bonus_mail_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Bonus Earned Email Body'),
    '#description' => t("The email that is sent to an affiliate when he receives a bonus for a referral signup. Leave Blank to Not Send an Email."),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_affiliates_earned_bonus_mail_body', t("Dear [user:name],
You have earned a [ms_affiliate:amount] bonus for referring [ms_affiliate:refName] on [date:long]. The amount has been credited to your Affiliate Balance.
Your new Affiliate Balance is [ms_affiliate:balance].

Sincerely,
Staff")),
  );

  $form['email']['ms_affiliates_earned_bonus_mail_body_token_help']['tokens'] = array(
    '#theme' => 'token_tree',
    '#token_types' => array('ms_affiliate'),
    '#dialog' => TRUE,
  );

  $form['email']['ms_affiliates_tell_friend_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Tell a Friend Email Subject'),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_affiliates_tell_friend_subject', t("A special message from [user:name]!")),
  );
  $form['email']['ms_affiliates_tell_friend_message'] = array(
    '#type' => 'textarea',
    '#title' => t('Tell a Friend Email Body'),
    '#description' => t("The template that will show in the Tell a Friend page of the User Affiliate Dashboard."),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_affiliates_tell_friend_message', t("Dear friend,
Check out this website: [ms_affiliate_email:affLink] . I love it, and you will too!

Sincerely,
[user:name]")),
  );

  $form['email']['ms_affiliates_tell_friend_message_token_help']['tokens'] = array(
    '#theme' => 'token_tree',
    '#token_types' => array('ms_affiliate_email', 'user'),
    '#dialog' => TRUE,
  );

  return system_settings_form($form);
}

/**
 * Form validation handler for ms_affiliates_admin().
 */
function ms_affiliates_admin_validate($form, &$form_state) {
  if (isset($form_state['values']['ms_affiliates_af_url']) AND $form_state['values']['ms_affiliates_af_url'] != variable_get('ms_affiliates_af_url', '')) {
    variable_set('ms_affiliates_af_url', $form_state['values']['ms_affiliates_af_url']);
    menu_rebuild();
  }
}

/**
 * Logs an affiliate click.
 *
 * @param object $account
 *   The user object.
 * @param string $target_path
 *   The path that was visited.
 *
 * @ingroup ms_affiliates_api
 */
function ms_affiliates_clicked($account, $target_path) {
  // Check if the account provided is an affiliate (not admin or anonymous).
  if ($account->uid <= 1 || !user_access('act as affiliate', $account)) {
    ms_core_log_error('ms_affiliates', 'Failed to log a click for the affiliate: %aff_name', array('%aff_name' => $account->name));
    return FALSE;
  }

  $target_path = ($target_path == 'node') ? '' : $target_path;

  db_insert('ms_affiliates_clicks')
    ->fields(array(
      'aid' => $account->uid,
      'time' => REQUEST_TIME,
      'client_ip' => $_SERVER['REMOTE_ADDR'],
      'referrer' => $_SERVER['HTTP_REFERER'],
      'destination' => $target_path,
    ))
    ->execute();

  ms_core_log('ms_affiliates', 'Logged a click for the affiliate: %aff_name', array('%aff_name' => $account->name));
  return TRUE;
}

/**
 * Sets the Affiliate for a User.
 *
 * @param object $account
 *   The referral user account.
 * @param object $affiliate
 *   The affiliate user account.
 * @param int $date
 *   (optional) The date of affiliation. Defaults to NULL, which uses the time
 *   right now.
 *
 * @ingroup ms_affiliates_api
 */
function ms_affiliates_set_affiliate($account, $affiliate, $date = NULL) {
  if ($affiliate->uid AND $account->uid AND $account->uid != $affiliate->uid) {
    $time = ($date) ? $date : REQUEST_TIME;
    db_delete('ms_affiliates_genealogy')
      ->condition('uid', $account->uid)
      ->execute();
    db_insert('ms_affiliates_genealogy')
      ->fields(array(
        'uid' => $account->uid,
        'aid' => $affiliate->uid,
        'date' => $time,
      ))
      ->execute();

    // Provide a hook for other modules to act on this.
    foreach (module_implements('ms_affiliates_referral') as $module_hook) {
      $hook = $module_hook . '_ms_affiliates_referral';
      $hook($account, $affiliate);
    }

    ms_core_log('ms_affiliates', 'Set %affiliate as the affiliate for user %user.',
      array('%user' => $account->name, '%affiliate' => $affiliate->name));
  }
}

/**
 * Gets the Affiliate of a User.
 *
 * @param int $uid
 *   The user id.
 *
 * @return int
 *   The affiliate user id or 0.
 *
 * @ingroup ms_affiliates_api
 */
function ms_affiliates_get_affiliate($uid) {
  static $affiliates = array();
  if (!isset($affiliates[$uid])) {
    $affiliates[$uid] = db_query("SELECT aid FROM {ms_affiliates_genealogy} WHERE uid = :uid", array(':uid' => $uid))->fetchField();
  }
  return !empty($affiliates[$uid]) ? $affiliates[$uid] : 0;
}

/**
 * Sets the Cookie.
 *
 * @param int $aid
 *   The affiliate user id.
 */
function ms_affiliates_set_cookie($aid) {
  $account = user_load($aid, TRUE);
  $c_life = variable_get('ms_affiliates_cookie_lifetime', '1 year');
  $c_life = strtotime('+ ' . $c_life);

  setcookie('affiliate[uid]', $account->uid, $c_life, '/');
  setcookie('affiliate[name]', $account->name, $c_life, '/');
  setcookie('affiliate[timestamp]', REQUEST_TIME, $c_life, '/');
}

/**
 * Gets the Children of a User.
 *
 * @param int $aid
 *   The affiliate user id.
 * @param int $max
 *   The max depth to return.
 *
 * @return array
 *   A children tree array.
 *
 * @ingroup ms_affiliates_api
 */
function ms_affiliates_get_children($aid, $max = NULL) {
  $children = array();

  if (is_null($max) || $max > 0) {
    if (!is_null($max)) {
      $max -= 1;
    }
    $result = db_query("SELECT uid FROM {ms_affiliates_genealogy} WHERE aid = :aid", array(':aid' => $aid));

    foreach ($result as $row) {
      $children[$row->uid] = ms_affiliates_get_children($row->uid, $max);
    }
  }

  return $children;
}

/**
 * Gets the Parents of a User.
 *
 * @param int $uid
 *   The user id.
 * @param int $max
 *   The max depth to return.
 *
 * @return array
 *   A parents tree array.
 *
 * @ingroup ms_affiliates_api
 */
function ms_affiliates_get_parents($uid, $max) {
  $parents = array();
  $parents[0] = $uid;
  for ($i = 1; $i <= $max; $i++) {
    $rid = $parents[$i - 1];
    $aid = db_query("SELECT aid FROM {ms_affiliates_genealogy} WHERE uid = :uid", array(':uid' => $rid))->fetchField();
    if ($aid) {
      $parents[$i] = $aid;
    } else {
      break;
    }
  }
  return $parents;
}


/**
 * Calculates the Commission owed.
 *
 * @param int $level
 *   The depth level.
 * @param float $amount
 *   The amount to calculate commission from.
 * @param array $commissions
 *   An array of commission settings to use for calculation.
 *
 * @return float
 *   The commission amount.
 *
 * @ingroup ms_affiliates_api
 */
function ms_affiliates_get_commission($level, $amount, $commissions) {
  if ($commissions[0] == '') {
    $commission = 0;
  } else {
    $this_level_commission = isset($commissions[$level - 1]) ? $commissions[$level - 1] : 0;
    if (stristr($this_level_commission, '$')) {
      // Check if the commission should be a percentage or a dollar amount
      $commission = str_replace('$', '', $this_level_commission);
    } else {
      $commission = ($this_level_commission / 100) * $amount;
    }
  }

  return $commission;
}

/**
 * Credits all of the Affiliates who deserve it for a purchase.
 *
 * @param array $genealogy
 *   A genealogy tree.
 * @param float $amount
 *   The purchase amount.
 * @param int $pid
 *   The payment id.
 * @param int $oid
 *   The order id.
 * @param string $info
 *   A message to include with the commission in the history.
 * @param string $module
 *   The module name responsible for this commission.
 * @param string $item_name
 *   The name of the item.
 * @param array $commissions
 *   (optional) An array of commission settings. Defaults to NULL.
 *
 * @ingroup ms_affiliates_api
 */
function ms_affiliates_credit_affiliates($genealogy, $amount, $pid, $oid, $info, $module, $item_name, $commissions = NULL) {
  $check_override = FALSE;

  ms_core_log('ms_affiliates', 'Starting out with the following commissions: !aff.',
    array('!aff' => ms_core_print_r($commissions)));

  // Load the default commissions if no product overrides are set.
  if (!$commissions) {
    $order = ms_core_order_load($oid);
    $commissions = explode(',', ms_core_variable_get('ms_affiliates_payout_percentages', '', $order));
    $check_override = TRUE;
    ms_core_log('ms_affiliates', 'Loaded the default commissions: !aff.',
      array('!aff' => ms_core_print_r($commissions)));
  }

  ms_core_log('ms_affiliates', 'Using the following genealogy: !gen.',
    array('!gen' => ms_core_print_r($genealogy)));

  $referral = user_load($genealogy[0], TRUE);

  foreach ($genealogy as $level => $aid) {
    // Skip the First Level.
    if (!$level) {
      continue;
    }
    $affiliate = user_load($aid, TRUE);
    if ($affiliate->uid AND user_access('act as affiliate', $affiliate)) {
      $use_commissions = $commissions;
      if ($check_override) {
        $use_commissions = ms_affiliates_get_affiliate_commission_levels($affiliate, $oid);
      }

      ms_core_log('ms_affiliates', 'Using the following final levels to calculate commissions: !aff.',
        array('!aff' => ms_core_print_r($use_commissions)));

      // Get the Commission to pay for this level.
      $commission = round(ms_affiliates_get_commission($level, $amount, $use_commissions), 2);

      // Provide a hook for other modules to change the commission.
      foreach (module_implements('ms_affiliates_commission') as $module_hook) {
        $hook = $module_hook . '_ms_affiliates_commission';
        $hook($commission, $level, $amount, $affiliate);
      }

      // Credit the Affiliate.
      $end_balance = ms_affiliates_update_balance($affiliate->uid, $commission);
      ms_affiliates_insert_record($affiliate->uid, $genealogy[0], $pid, $oid, $info, 'af_credit', $commission);

      $currency = variable_get('ms_affiliates_default_currency', 'USD');

      $payment_vars = array(
        'amount' => ms_core_format_money($commission, $currency),
        'userName' => $affiliate->name,
        'balance' => ms_core_format_money($end_balance, $currency),
        'refName' => $referral->name,
        'itemName' => $item_name,
        'account' => $affiliate,
      );

      if ($commission > 0) {
        if ($info == 'ref_bonus') {
          // Send Email to User.
          if (variable_get('ms_affiliates_earned_bonus_mail_body', FALSE)) {
            drupal_mail('ms_affiliates', 'earned_bonus', $affiliate->mail, user_preferred_language($affiliate), $payment_vars);
          }
        } else {
          // Send Email to User.
          if (variable_get('ms_affiliates_earned_commission_mail_body', FALSE)) {
            drupal_mail('ms_affiliates', 'earned_commission', $affiliate->mail, user_preferred_language($affiliate), $payment_vars);
          }
        }

        ms_core_log('ms_affiliates', "Credited %commission to user <a href='@url'>@name</a>.",
          array(
            '%commission' => $commission,
            '@name' => $affiliate->name,
            '@url' => url('user/' . $affiliate->uid)
          ));
      }
      if ($commission < 0) {
        ms_core_log('ms_affiliates', "Deducted %commission from user <a href='@url'>@name</a>.",
          array(
            '%commission' => $commission,
            '@name' => $affiliate->name,
            '@url' => url('user/' . $affiliate->uid)
          ));
      }
    }
  }
}

/**
 * Updates the affiliate balance.
 *
 * @param int $uid
 *   The user id.
 * @param float $add
 *   The amount to add to the balance. Can be negative.
 * @param bool $absolute
 *   (optional) If this is TRUE, then set the balance to the $add amount,
 *   instead of adding it. Defaults to FALSE.
 *
 * @ingroup ms_affiliates_api
 */
function ms_affiliates_update_balance($uid, $add, $absolute = FALSE) {
  $start_balance = db_query("SELECT balance FROM {ms_affiliates_balance} WHERE uid = :uid", array(':uid' => $uid))->fetchField();
  if ($absolute) {
    $end_balance = $add;
  } elseif (!$start_balance) {
    $end_balance = $add;
  } else {
    $end_balance = $add + $start_balance;
  }

  db_delete('ms_affiliates_balance')
    ->condition('uid', $uid)
    ->execute();
  db_insert('ms_affiliates_balance')
    ->fields(array(
      'uid' => $uid,
      'balance' => $end_balance,
    ))
    ->execute();

  ms_core_log('ms_affiliates', 'Updated Balance for User !uid from !start to !end',
    array('!uid' => $uid, '!start' => $start_balance, '!end' => $end_balance));

  return $end_balance;
}

/**
 * Inserts an affiliate history record.
 *
 * @param int $aid
 *   The affiliate user id.
 * @param int $rid
 *   The referral user id.
 * @param int $pid
 *   The payment id.
 * @param int $oid
 *   The order id.
 * @param string $info
 *   A message for the history item.
 * @param string $type
 *   The type of history item.
 * @param float $commission
 *   The commission amount.
 *
 * @return int
 *   The id of the history item.
 *
 * @ingroup ms_affiliates_api
 */
function ms_affiliates_insert_record($aid, $rid, $pid, $oid, $info, $type, $commission, $foreign_key = '') {
  $balance = ms_affiliates_get_balance($aid, TRUE);
  return $id = db_insert('ms_affiliates_history')
    ->fields(array(
      'uid' => $aid,
      'rid' => $rid,
      'pid' => $pid,
      'oid' => $oid,
      'info' => $info,
      'type' => $type,
      'date' => REQUEST_TIME,
      'amount' => $commission,
      'balance' => $balance + $commission,
      'foreign_key' => $foreign_key,
    ))
    ->execute();
}

/**
 * Gets the Balance for a User.
 *
 * @param int $uid
 *   The user id.
 * @param bool $total
 *   (optional) Whether to get the total balance including what isn't yet
 *   available. Defaults to FALSE.
 *
 * @return float
 *   The balance.
 *
 * @ingroup ms_affiliates_api
 */
function ms_affiliates_get_balance($uid, $total = FALSE) {
  static $balances;
  $element = $total ? 'total' : 'non-total';

  if (!isset($balances[$uid][$element])) {
    $cutoff = strtotime("-" . variable_get('ms_affiliates_net_term', '0') . " days");
    $balance = 0.0;
    $result = db_query("SELECT * FROM {ms_affiliates_history} WHERE uid = :uid", array(':uid' => $uid));

    foreach ($result as $item) {
      if ($total OR ($item->amount < 0) OR ($item->date < $cutoff)) {
        $balance += $item->amount;
      }
    }
    $balances[$uid][$element] = $balance;
  }
  return !empty($balances[$uid][$element]) ? $balances[$uid][$element] : 0;
}

/**
 * Gets a balance object for a user.
 *
 * @param int $uid
 *   The user id.
 *
 * @return object
 *   The balance object.
 */
function ms_affiliates_get_balance_object($uid) {
  $result = db_query('SELECT * FROM {ms_affiliates_balance} WHERE uid = :uid', array(':uid' => $uid));
  foreach ($result as $balance) {
    return $balance;
  }
  return FALSE;
}

/**
 * Form constructor for the Period Selection form.
 *
 * @param string $method
 *   The method to use.
 *
 * @see ms_affiliates_time_selection_form_submit()
 * @ingroup forms
 */
function ms_affiliates_time_selection_form($form, &$form_state, $method = '') {
  // Date Setup.
  $dates = ms_affiliates_predefined_range(arg(4));
  $dt_first = $dates['start'];
  $dt_last = $dates['end'];

  // Create the form.
  $form = array();
  $form['range_display'] = array(
    '#prefix' => '<p><strong>',
    '#value' => t('Currently Displaying: @start through @end', array('@start' => format_date($dt_first), '@end' => format_date($dt_last))),
    '#suffix' => '</strong></p>'
  );
  $form['time_selector'] = array(
    '#title' => t('Customize This Report'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE
  );
  $form['periods'] = array(
    '#type' => 'value',
    '#value' => array(t('This Month'), t('Last Month'), t('Last 30 days'), t('Last 60 Days'), t('Last 90 Days'))
  );
  $form['time_selector']['period'] = array(
    '#title' => t('Select a predefined range'),
    '#type' => 'select',
    '#options' => $form['periods']['#value'],
    '#default_value' => arg(4)
  );
  $form['time_selector']['use_dates'] = array(
    '#type' => 'checkbox',
    '#title' => t('Search using date range.'),
    '#default_value' => arg(5) != 0 ? 1 : 0,
  );
  $form['time_selector']['begin_date'] = array(
    '#prefix' => '<span style="float:left;margin-right:15px;">',
    '#suffix' => '</span>',
    '#title' => t('Start Date'),
    '#type' => 'date',
    '#description' => t('Select a beginning date.'),
    '#default_value' => array(
      'month' => date('n', $dt_first),
      'day' => date('j', $dt_first),
      'year' => date('Y', $dt_first)
    ),
    '#required' => FALSE
  );
  $form['time_selector']['end_date'] = array(
    '#prefix' => '<span style="float:left;">',
    '#suffix' => '</span><br class="clearfix"/>',
    '#title' => t('End Date'),
    '#type' => 'date',
    '#description' => t('Select an end date.'),
    '#default_value' => array(
      'month' => date('n', $dt_last),
      'day' => date('j', $dt_last),
      'year' => date('Y', $dt_last)
    )
  );
  $form['time_selector']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit')
  );
  return $form;
}

/**
 * Form submission handler for ms_affiliates_time_selection_form().
 */
function ms_affiliates_time_selection_form_submit($form, &$form_state) {
  if ($form_state['values']['use_dates']) {
    $start_date = mktime(0, 0, 0, $form_state['values']['begin_date']['month'], $form_state['values']['begin_date']['day'], $form_state['values']['begin_date']['year']);
    $end_date = mktime(23, 59, 59, $form_state['values']['end_date']['month'], $form_state['values']['end_date']['day'], $form_state['values']['end_date']['year']);
  } else {
    $start_date = '0';
    $end_date = '0';
  }
  drupal_goto(arg(0) . '/' . arg(1) . '/' . arg(2) . '/' . arg(3) . '/' . $form_state['values']['period'] . '/' . $start_date . '/' . $end_date);
}

/**
 * Gets a predefined date range.
 *
 * @param int $type
 *   The type of range to get.
 *
 * @return array
 *   An array with a start and end key.
 */
function ms_affiliates_predefined_range($type = 0) {
  $now = REQUEST_TIME;
  $dates = array();

  if (arg(5) != 0 && arg(6) != 0) {
    $dates = array('start' => arg(5), 'end' => arg(6));

    return $dates;
  }

  switch ($type) {
    case 0:
      // This month.
      $dates['start'] = mktime(0, 0, 0, date("m", $now), 1, date("Y", $now));
      $dates['end'] = mktime(23, 59, 59, date("m", $now) + 1, 0, date("Y", $now));
      break;

    case 1:
      // Last month.
      $dates['start'] = mktime(0, 0, 0, date("m", $now) - 1, 1, date("Y", $now));
      $dates['end'] = mktime(23, 59, 59, date("m", $now), 0, date("Y", $now));
      break;

    case 2:
      // Last 30 days.
      $start = strtotime("-30 days", $now);
      $dates['start'] = mktime(0, 0, 0, date("m", $start), date("d", $start), date("Y", $start));
      $dates['end'] = mktime(23, 59, 59, date("m", $now), date("d", $now), date("Y", $now));
      break;

    case 3:
      // Last 60 days.
      $start = strtotime("-60 days", $now);
      $dates['start'] = mktime(0, 0, 0, date("m", $start), date("d", $start), date("Y", $start));
      $dates['end'] = mktime(23, 59, 59, date("m", $now), date("d", $now), date("Y", $now));
      break;

    case 4:
      // Last 90 days.
      $start = strtotime("-90 days", $now);
      $dates['start'] = mktime(23, 59, 59, date("m", $start), date("d", $start), date("Y", $start));
      $dates['end'] = mktime(23, 59, 59, date("m", $now), date("d", $now), date("Y", $now));
      break;

    case 5:
      // Last 365 days.
      $start = strtotime("-365 days", $now);
      $dates['start'] = mktime(23, 59, 59, date("m", $start), date("d", $start), date("Y", $start));
      $dates['end'] = mktime(23, 59, 59, date("m", $now), date("d", $now), date("Y", $now));
      break;

    case 6:
      // Last 7 days.
      $start = strtotime("-7 days", $now);
      $dates['start'] = mktime(23, 59, 59, date("m", $start), date("d", $start), date("Y", $start));
      $dates['end'] = mktime(23, 59, 59, date("m", $now), date("d", $now), date("Y", $now));
      break;

    case 7:
      // Today.
      $start = strtotime("-1 days", $now);
      $dates['start'] = mktime(23, 59, 59, date("m", $start), date("d", $start), date("Y", $start));
      $dates['end'] = mktime(23, 59, 59, date("m", $now), date("d", $now), date("Y", $now));
      break;
  }

  return $dates;
}

/**
 * Gets an array of the available payment methods.
 *
 * @param object $account
 *   The user account.
 *
 * @return array
 *   An array of the available payment methods for this user.
 */
function ms_affiliates_get_payment_methods($account) {
  $methods = array();
  if (variable_get('ms_affiliates_method_paypal', FALSE) AND $account->ms_affiliates_paypal_address) {
    $methods['paypal'] = t('PayPal (@address)', array('@address' => $account->ms_affiliates_paypal_address));
  }
  if (variable_get('ms_affiliates_method_check', FALSE) AND $account->ms_affiliates_mailing_address) {
    $methods['check'] = t('Check (@address)', array('@address' => $account->ms_affiliates_mailing_address));
  }
  if (variable_get('ms_affiliates_method_iban', FALSE) AND $account->ms_affiliates_iban) {
    $methods['iban'] = t('IBAN (@num)', array('@num' => $account->ms_affiliates_iban));
  }
  if (variable_get('ms_affiliates_method_swift', FALSE) AND $account->ms_affiliates_swift) {
    $methods['swift'] = t('SWIFT (@num)', array('@num' => $account->ms_affiliates_swift));
  }

  return (empty($methods)) ? FALSE : $methods;
}

/**
 * Gets the user commission.
 *
 * @param int $uid
 *   The user id.
 *
 * @return float
 *   The commission.
 *
 * @ingroup ms_affiliates_api
 */
function ms_affiliates_get_user_commission($uid) {
  $result = db_query("SELECT * FROM {ms_affiliates_user_commissions} WHERE uid = :uid", array(':uid' => $uid));
  foreach ($result as $row) {
    return $row;
  }
  return 0;
}

/**
 * Gets the commission levels for a specific user.
 *
 * @param object $account
 *   The user object
 * @param int $oid
 *   (optional) The order id to use for override settings.
 *
 * @return array
 *   An array of commission levels.
 *
 * @ingroup ms_affiliates_api
 */
function ms_affiliates_get_affiliate_commission_levels($account, $oid = 0) {
  $order = ms_core_order_load($oid);
  // Get the commissions for each level.
  $commissions = explode(',', ms_core_variable_get('ms_affiliates_payout_percentages', '', $order));

  // Check for the custom role commissions levels.
  if (is_array($account->roles)) {
    ksort($account->roles);
    foreach ($account->roles as $rid => $rolename) {
      if (ms_core_variable_get('ms_affiliates_use_role_specific_commission_' . $rid, FALSE, $order)) {
        $commissions = explode(',', ms_core_variable_get('ms_affiliates_role_specific_commission_' . $rid, '', $order));
      }
    }
  }

  // Check if the user has custom commissions.
  if ($row = ms_affiliates_get_user_commission($account->uid)) {
    $commissions = explode(',', $row->commissions);
  }

  return $commissions;
}

/**
 * Gets the commission level strings for a specific user.
 *
 * @param object $account
 *   The user object.
 *
 * @return array
 *   An array of commission level strings.
 *
 * @ingroup ms_affiliates_api
 */
function ms_affiliates_get_affiliate_commission_levels_string($account) {
  $commissions = ms_affiliates_get_affiliate_commission_levels($account);

  $c_commissions = array();

  foreach ($commissions as $level => $amount) {
    $c_level = $level + 1;
    if (strstr($amount, '$')) {
      $c_amount = ms_core_format_money(str_replace('$', '', $amount));
    } else {
      $c_amount = $amount . '%';
    }
    $c_commissions[] .= t("Level") . ' ' . $c_level . ': ' . $c_amount;
  }

  return implode(', ', $c_commissions);
}

/**
 * Clears the request information.
 *
 * @param int $uid
 *   The user id.
 */
function ms_affiliates_clear_request($uid) {
  $balance = ms_affiliates_get_balance_object($uid);
  $balance->requested_amount = 0;
  $balance->requested_method = '';
  $balance->requested_notes = '';

  drupal_write_record('ms_affiliates_balance', $balance, 'uid');
}

/**
 * Page callback: Signup as an affiliate page.
 *
 * @see ms_affiliates_menu()
 */
function ms_affiliates_signup_page() {
  $build = array();
  $signup_page_text = variable_get('ms_affiliates_signup_page_text', array('format' => '', 'value' => ''));
  $build['content'] = array(
    'ms_affiliates_signup_page_text' => array(
      '#markup' => check_markup($signup_page_text['value'], $signup_page_text['format']),
    ),
    'ms_affiliates_signup_page_form' => drupal_get_form('ms_affiliates_signup_form'),
  );

  return $build;
}

/**
 * Form constructor for the Affiliate Signup Form.
 *
 * @see ms_affiliates_signup_form_submit()
 * @ingroup forms
 */
function ms_affiliates_signup_form($form, &$form_state) {
  if ($agree_text = variable_get('ms_affiliates_signup_page_checkbox', t('I agree'))) {
    $form['agree_checkbox'] = array(
      '#type' => 'checkbox',
      '#required' => TRUE,
      '#title' => check_plain($agree_text),
    );
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Accept'),
  );

  return $form;
}

/**
 * Form submission handler for ms_affiliates_signup_form().
 */
function ms_affiliates_signup_form_submit($form, &$form_state) {
  global $user;
  $rid = variable_get('ms_affiliates_signup_role', 0);
  if ($rid AND $user->uid AND !isset($user->roles[$rid])) {
    if (!in_array($rid, array(DRUPAL_ANONYMOUS_RID, DRUPAL_AUTHENTICATED_RID))) {
      db_insert('users_roles')
        ->fields(array(
          'uid' => $user->uid,
          'rid' => $rid,
        ))
        ->execute();

      $roles = user_roles(TRUE);
      ms_core_log('ms_affiliates', 'Added affiliate role !role to !user.',
        array('!role' => $roles[$rid], '!user' => l($user->name, 'user/' . $user->uid)));
    }
  }

  drupal_set_message(t("You have successfully signed up as an Affiliate. Click the new 'Affiliates' tab for more information."));
  $form_state['redirect'] = 'user';
}

/**
 * Form constructor for the Tell a Friend Form.
 *
 * @param object $account
 *   The user object.
 *
 * @see ms_affiliates_tell_friend_form_validate()
 * @see ms_affiliates_tell_friend_form_submit()
 * @ingroup forms
 */
function ms_affiliates_tell_friend_form($form, &$form_state, $account) {
  $form['main'] = array(
    '#type' => 'fieldset',
    '#title' => t('Tell a Friend'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );

  $form['main']['from'] = array(
    '#type' => 'textfield',
    '#title' => t('From'),
    '#size' => 32,
    '#maxlength' => 64,
    '#description' => t("Enter your email address."),
    '#default_value' => $account->mail,
    '#required' => TRUE,
  );

  $form['main']['to-1'] = array(
    '#type' => 'textfield',
    '#title' => t('Email address 1'),
    '#size' => 32,
    '#maxlength' => 64,
    '#required' => FALSE,
  );
  $form['main']['to-2'] = array(
    '#type' => 'textfield',
    '#title' => t('Email address 2'),
    '#size' => 32,
    '#maxlength' => 64,
    '#required' => FALSE,
  );
  $form['main']['to-3'] = array(
    '#type' => 'textfield',
    '#title' => t('Email address 3'),
    '#size' => 32,
    '#maxlength' => 64,
    '#required' => FALSE,
  );

  $message = variable_get('ms_affiliates_tell_friend_message', '');

  $message = token_replace($message,
    array(
      'ms_affiliate_email' => $account,
      'user' => $account,
    ));

  $form['main']['message'] = array(
    '#type' => 'textarea',
    '#title' => t('Message'),
    '#default_value' => $message,
    '#required' => TRUE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Send'),
  );

  return $form;
}

/**
 * Form validation handler for ms_affiliates_tell_friend_form().
 *
 * @see ms_affiliates_tell_friend_form_submit()
 */
function ms_affiliates_tell_friend_form_validate($form, &$form_state) {
  $v = $form_state['values'];

  if (!valid_email_address($v['from'])) {
    form_set_error('from', t('You must enter a valid email address'));
  }

  if ($v['to-1'] AND !valid_email_address($v['to-1'])) {
    form_set_error('to-1', t('You must enter a valid email address'));
  }

  if ($v['to-2'] AND !valid_email_address($v['to-2'])) {
    form_set_error('to-2', t('You must enter a valid email address'));
  }

  if ($v['to-3'] AND !valid_email_address($v['to-1'])) {
    form_set_error('to-3', t('You must enter a valid email address'));
  }
}

/**
 * Form submission handler for ms_affiliates_tell_friend_form().
 *
 * @see ms_affiliates_tell_friend_form_validate()
 */
function ms_affiliates_tell_friend_form_submit($form, &$form_state) {
  global $user;
  $v = $form_state['values'];

  $params = array(
    'message' => $v['message'],
    'account' => $user,
  );

  if ($v['to-1']) {
    drupal_mail('ms_affiliates', 'tell_friend', $v['to-1'], user_preferred_language($user), $params, $v['from']);
    drupal_set_message(t('An email was sent to %mail.', array('%mail' => $v['to-1'])));
  }

  if ($v['to-2']) {
    drupal_mail('ms_affiliates', 'tell_friend', $v['to-2'], user_preferred_language($user), $params, $v['from']);
    drupal_set_message(t('An email was sent to %mail.', array('%mail' => $v['to-2'])));
  }

  if ($v['to-3']) {
    drupal_mail('ms_affiliates', 'tell_friend', $v['to-3'], user_preferred_language($user), $params, $v['from']);
    drupal_set_message(t('An email was sent to %mail.', array('%mail' => $v['to-3'])));
  }
}

/**
 * Form constructor for the Add Custom Commissions Form.
 *
 * @param string $action
 *   The action to take.
 * @param int $uid
 *   (optional) The user id. Defaults to NULL.
 *
 * @see ms_affiliates_user_commission_form_validate()
 * @see ms_affiliates_user_commission_form_submit()
 * @ingroup forms
 */
function ms_affiliates_user_commission_form($form, &$form_state, $action, $uid = NULL) {
  $is_edit = FALSE;

  $form['main'] = array(
    '#type' => 'fieldset',
    '#title' => t('Custom Commission Levels'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );

  $custom_commissions = NULL;
  $account = NULL;
  if ($action == 'edit') {
    $is_edit = TRUE;
    $account = user_load($uid, TRUE);
    $custom_commissions = ms_affiliates_get_user_commission($account->uid);

    $form['main']['uid'] = array(
      '#type' => 'value',
      '#value' => $account->uid,
    );
  }

  $form['main']['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Affiliate Name'),
    '#size' => 32,
    '#maxlength' => 64,
    '#description' => t("The Name of the Affiliate"),
    '#default_value' => ($is_edit) ? $account->name : '',
    '#autocomplete_path' => 'admin/structure/ms_core/autocomplete',
    '#required' => TRUE,
  );
  $form['main']['commissions'] = array(
    '#type' => 'textfield',
    '#title' => t('Commissions'),
    '#size' => 32,
    '#maxlength' => 64,
    '#description' => t("This should be a comma separated list of number with the first value corresponding
        to the first level in the hierarchy and each successive value corresponding to the
        next level in the hierarchy. To give an exact amount, use the '$' sign in front of
        the number, no matter the currency. To give a percentage of the order amount, specify
        simply the number. Example: '15,$" . "10.50,5.25' . This would give 15% of the order
        amount to the direct affiliate, ten dollars and fifty cents to the affiliate's
        affiliate, and 5.25 percent of the order amount to the affiliate of the second tier."),
    '#default_value' => ($is_edit) ? $custom_commissions->commissions : variable_get('ms_affiliates_payout_percentages', '15,10,5'),
    '#required' => TRUE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );

  return $form;
}

/**
 * Form validation handler for ms_affiliates_user_commission_form().
 *
 * @see ms_affiliates_user_commission_form_submit()
 */
function ms_affiliates_user_commission_form_validate($form, &$form_state) {
  $v = $form_state['values'];
  $account = user_load_by_name($v['name']);
  if (!$account->uid) {
    form_set_error('name', t('You must enter a valid user'));
  }
}

/**
 * Form submission handler for ms_affiliates_user_commission_form().
 *
 * @see ms_affiliates_user_commission_form_validate()
 */
function ms_affiliates_user_commission_form_submit($form, &$form_state) {
  $v = $form_state['values'];
  $account = user_load_by_name($v['name']);

  $record = new stdClass();

  $record->uid = $account->uid;
  $record->commissions = $v['commissions'];

  // Remove the record.
  if ($v['uid']) {
    db_delete('ms_affiliates_user_commissions')
      ->condition('uid', $v['uid'])
      ->execute();
  }

  // Write the record.
  drupal_write_record('ms_affiliates_user_commissions', $record);

  drupal_set_message(t('Set the custom commission levels for %user.', array('%user' => $account->name)));
  $form_state['redirect'] = 'admin/moneysuite/ms_affiliates';
}

/**
 * Form constructor for the Delete Custom Commission for a User form.
 *
 * @param int $uid
 *   The user id.
 *
 * @see ms_affiliates_delete_user_commission_confirm_submit()
 * @see confirm_form()
 * @ingroup forms
 */
function ms_affiliates_delete_user_commission_confirm($form, &$form_state, $uid) {
  $account = user_load($uid, TRUE);
  $custom_commissions = ms_affiliates_get_user_commission($account->uid);
  if ($custom_commissions->uid) {
    $form['#ms_uid'] = $custom_commissions->uid;
    return confirm_form($form, t('Are you sure you want to delete the custom commission levels for user %user?',
      array('%user' => $account->name)), 'admin/moneysuite/ms_affiliates', t('This action cannot be undone.'), t('Delete'));
  } else {
    drupal_not_found();
  }
}

/**
 * Form submission callback for ms_affiliates_delete_user_commission_confirm().
 */
function ms_affiliates_delete_user_commission_confirm_submit($form, &$form_state) {
  $account = user_load($form['#ms_uid'], TRUE);

  // Delete the commission levels for the user.
  db_delete('ms_affiliates_user_commissions')
    ->condition('uid', $account->uid)
    ->execute();

  drupal_set_message(t('Custom Commission Levels for user %user have been deleted', array('%user' => $account->name)));
  $form_state['redirect'] = 'admin/moneysuite/ms_affiliates';
}

/**
 * Page callback: Enter a Manual Payment for an Affiliate.
 *
 * @param int $uid
 *   The user id.
 *
 * @see ms_affiliates_menu()
 * @see ms_affiliates_enter_credit_form()
 */
function ms_affiliates_enter_credit($uid) {
  $account = user_load($uid, TRUE);
  $account->af_balance = ms_affiliates_get_balance($account->uid);
  global $user;

  if ($account->uid) {
    return drupal_get_form('ms_affiliates_enter_credit_form', $account, $user->uid);
  } else {
    drupal_set_message(t('There was a problem loading the affiliate user.'), 'error');
    drupal_goto('user/' . $uid . '/ms_affiliate/history');
  }
}

/**
 * Form constructor for the enter credit form.
 *
 * @param object $account
 *   The user account.
 * @param int $uid
 *   The user id of the admin account.
 *
 * @see ms_affiliates_enter_credit_form_submit()
 * @ingroup forms
 */
function ms_affiliates_enter_credit_form($form, &$form_state, $account, $uid) {
  $form['main'] = array(
    '#type' => 'fieldset',
    '#title' => t('Credit/Debit Info'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['main']['af_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Affiliate'),
    '#disabled' => TRUE,
    '#default_value' => $account->name,
  );
  $form['main']['amount'] = array(
    '#type' => 'textfield',
    '#title' => t('Amount'),
    '#size' => 8,
    '#maxlength' => 10,
    '#description' => t("Enter the amount to credit/debit the affiliate. Ex: '15.99', '-27.95' etc"),
    '#required' => TRUE,
  );
  $form['af_uid'] = array(
    '#type' => 'value',
    '#default_value' => $account->uid,
  );
  $form['uid'] = array(
    '#type' => 'value',
    '#default_value' => $uid,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  return $form;
}

/**
 * Form submission handler for ms_affiliates_enter_credit_form().
 */
function ms_affiliates_enter_credit_form_submit($form, &$form_state) {
  $affiliate = user_load($form_state['values']['af_uid'], TRUE);
  $admin_account = user_load($form_state['values']['uid'], TRUE);
  $amount = $form_state['values']['amount'];

  // Update the User Balance.
  ms_affiliates_update_balance($affiliate->uid, $amount);

  // Add Item to History.
  ms_affiliates_insert_record($affiliate->uid, $admin_account->uid, 0, 0, t('Manual Adjustment'), $amount > 0 ? 'af_credit' : 'af_payment', $amount);

  // Set Message to Watchdog and Screen.
  drupal_set_message(t("Entered Credit of %payment to user <a href='@url'>@name</a>.",
    array(
      '%payment' => ms_core_format_money($amount),
      '@name' => $affiliate->name,
      '@url' => url('user/' . $affiliate->uid)
    )));
  ms_core_log('ms_affiliates', "Entered Credit of %payment to user <a href='@url'>@name</a>.",
    array(
      '%payment' => ms_core_format_money($amount),
      '@name' => $affiliate->name,
      '@url' => url('user/' . $affiliate->uid)
    ));
  $form_state['redirect'] = 'user/' . $affiliate->uid . '/ms_affiliate/history';
}

/**
 * Page callback: Enter a Manual Payment for an Affiliate.
 *
 * @param int $uid
 *   The user id.
 *
 * @see ms_affiliates_enter_payment_form()
 * @see ms_affiliates_menu()
 */
function ms_affiliates_enter_payment($uid) {
  $account = user_load($uid, TRUE);
  $account->af_balance = ms_affiliates_get_balance($account->uid);
  global $user;

  if ($account->uid) {
    return drupal_get_form('ms_affiliates_enter_payment_form', $account, $user->uid);
  } else {
    drupal_set_message(t('There was a problem loading the affiliate user.'), 'error');
    drupal_goto('admin/people/pay_affiliates');
  }
}

/**
 * Form constructor for the enter payment form.
 *
 * @param object $account
 *   The user account.
 * @param int $uid
 *   The user id of the admin account.
 *
 * @see ms_affiliates_enter_payment_form_submit()
 * @ingroup forms
 */
function ms_affiliates_enter_payment_form($form, &$form_state, $account, $uid) {
  $balance = ms_affiliates_get_balance_object($account->uid);

  $form['request'] = array(
    '#type' => 'fieldset',
    '#title' => t('Request Info'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#description' => t("If the user has requested a payment, the request info is shown here."),
  );
  if ($balance->requested_amount > 0) {
    $form['request']['requested_amount'] = array(
      '#type' => 'item',
      '#title' => t('Requested Amount'),
      '#markup' => ms_core_format_money($balance->requested_amount),
    );
  }
  if ($balance->requested_method) {
    $form['request']['requested_method'] = array(
      '#type' => 'item',
      '#title' => t('Requested Method'),
      '#markup' => filter_xss($balance->requested_method),
    );
  }
  if ($balance->requested_notes) {
    $form['request']['requested_notes'] = array(
      '#type' => 'item',
      '#title' => t('Notes'),
      '#markup' => filter_xss($balance->requested_notes),
    );
  }

  $form['main'] = array(
    '#type' => 'fieldset',
    '#title' => t('Payment Info'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['main']['af_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Affiliate'),
    '#disabled' => TRUE,
    '#default_value' => $account->name,
  );
  $form['main']['amount'] = array(
    '#type' => 'textfield',
    '#title' => t('Amount'),
    '#size' => 8,
    '#maxlength' => 10,
    '#description' => t("Enter the amount to pay the affiliate. Ex: '15.99', '27.95' etc"),
    '#default_value' => $balance->requested_amount > 0 ? $balance->requested_amount : $balance->balance,
    '#required' => TRUE,
  );
  $form['main']['notes'] = array(
    '#type' => 'textfield',
    '#title' => t('Notes'),
    '#description' => t("Enter any notes for this payment."),
    '#default_value' => '',
    '#required' => FALSE,
  );
  $form['main']['notify'] = array(
    '#type' => 'checkbox',
    '#title' => t('Notify Affiliate by Email?'),
    '#return_value' => 1,
    '#default_value' => FALSE,
  );
  $form['af_uid'] = array(
    '#type' => 'value',
    '#default_value' => $account->uid,
  );
  $form['uid'] = array(
    '#type' => 'value',
    '#default_value' => $uid,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Enter Payment'),
  );

  return $form;
}

/**
 * Form submission handler for ms_affiliates_enter_payment_form().
 */
function ms_affiliates_enter_payment_form_submit($form, &$form_state) {
  $affiliate = user_load($form_state['values']['af_uid'], TRUE);
  $admin_account = user_load($form_state['values']['uid'], TRUE);
  $amount = $form_state['values']['amount'];

  // Update the User Balance.
  $end_balance = ms_affiliates_update_balance($affiliate->uid, -$amount);

  // Add Item to History.
  ms_affiliates_insert_record($affiliate->uid, $admin_account->uid, 0, 0, t('Manual Payment'), 'af_payment', -$amount);

  // Clear the Request Info.
  ms_affiliates_clear_request($affiliate->uid);

  // Email Affiliate the Payment Details.
  if ($form_state['values']['notify'] AND variable_get('ms_affiliates_manual_payment_mail_body', FALSE)) {
    $vars = array(
      'amount' => ms_core_format_money($amount, variable_get('ms_affiliates_default_currency', 'USD')),
      'userName' => $affiliate->name,
      'balance' => ms_core_format_money($end_balance, variable_get('ms_affiliates_default_currency', 'USD')),
      'itemName' => t('Affiliate Payment to !user', array('!user' => $affiliate->name)),
      'notes' => $form_state['values']['notes'],
      'account' => $affiliate,
    );
    drupal_mail('ms_affiliates', 'manual_payment', $affiliate->mail, user_preferred_language($affiliate), $vars);
  }

  // Set Message to Watchdog and Screen.
  drupal_set_message(t("Entered Payment of %payment to user <a href='@url'>@name</a>.",
    array(
      '%payment' => ms_core_format_money($amount, variable_get('ms_affiliates_default_currency', 'USD')),
      '@name' => $affiliate->name,
      '@url' => url('user/' . $affiliate->uid)
    )));
  ms_core_log('ms_affiliates', "Entered Payment of %payment to user <a href='@url'>@name</a>.",
    array(
      '%payment' => ms_core_format_money($amount, variable_get('ms_affiliates_default_currency', 'USD')),
      '@name' => $affiliate->name,
      '@url' => url('user/' . $affiliate->uid)
    ));

  $form_state['redirect'] = 'admin/people/pay_affiliates';
}

/**
 * Page callback: Set up the PayPal Screen to Pay Affiliates.
 *
 * @param int $uid
 *   The user id.
 *
 * @see ms_affiliates_pay_affiliate_form()
 * @see ms_affiliates_menu()
 */
function ms_affiliates_pay_affiliate($uid) {
  return drupal_get_form('ms_affiliates_pay_affiliate_form', $uid);
}

/**
 * Form constructor for the pay affiliate form.
 *
 * @param int $uid
 *   The user id.
 *
 * @see ms_affiliates_pay_affiliate_form_submit()
 * @ingroup forms
 */
function ms_affiliates_pay_affiliate_form($form, &$form_state, $uid) {
  $account = user_load($uid, TRUE);
  $balance = ms_affiliates_get_balance_object($account->uid);

  $form['request'] = array(
    '#type' => 'fieldset',
    '#title' => t('Request Info'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#description' => t("If the user has requested a payment, the request info is shown here."),
  );
  if ($balance->requested_amount > 0) {
    $form['request']['requested_amount'] = array(
      '#type' => 'item',
      '#title' => t('Requested Amount'),
      '#markup' => ms_core_format_money($balance->requested_amount),
    );
  }
  if ($balance->requested_method) {
    $form['request']['requested_method'] = array(
      '#type' => 'item',
      '#title' => t('Requested Method'),
      '#markup' => filter_xss($balance->requested_method),
    );
  }
  if ($balance->requested_notes) {
    $form['request']['requested_notes'] = array(
      '#type' => 'item',
      '#title' => t('Notes'),
      '#markup' => filter_xss($balance->requested_notes),
    );
  }

  $form['main'] = array(
    '#type' => 'fieldset',
    '#title' => t('Payment Info'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['main']['af_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Affiliate'),
    '#disabled' => TRUE,
    '#default_value' => $account->name,
  );
  $form['main']['af_mail'] = array(
    '#type' => 'textfield',
    '#title' => t('PayPal Email Address'),
    '#default_value' => $account->ms_affiliates_paypal_address,
  );
  $form['main']['amount'] = array(
    '#type' => 'textfield',
    '#title' => t('Amount'),
    '#size' => 8,
    '#maxlength' => 10,
    '#description' => t("Enter the amount to pay the affiliate. Ex: '15.99', '27.95' etc"),
    '#default_value' => $balance->requested_amount,
    '#required' => TRUE,
  );
  $form['main']['notes'] = array(
    '#type' => 'textfield',
    '#title' => t('Notes'),
    '#description' => t("Enter any notes for this payment."),
    '#default_value' => '',
    '#required' => FALSE,
  );
  $form['af_uid'] = array(
    '#type' => 'value',
    '#default_value' => $account->uid,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Get PayPal Button'),
  );

  return $form;
}

/**
 * Form submission handler for ms_affiliates_pay_affiliate_form().
 */
function ms_affiliates_pay_affiliate_form_submit($form, &$form_state) {
  $account = user_load($form_state['values']['af_uid'], TRUE);
  global $user;

  if ($account->uid) {
    // Use the correct link for Sandbox.
    if (variable_get('ms_paypal_wps_use_sandbox', FALSE)) {
      $ipn_link = 'https://www.sandbox.paypal.com/cgi-bin/webscr';
    } else {
      $ipn_link = 'https://www.paypal.com/cgi-bin/webscr';
    }

    require_once(DRUPAL_ROOT . "/" . drupal_get_path('module', 'ms_paypal_wps') . "/includes/ms_paypal_wps_class.php");

    // Construct the payment class.
    $payment = new ms_paypal_wps_class;
    $payment->ipnLink = $ipn_link;
    $payment->add('business', $form_state['values']['af_mail']);
    $payment->add('item_name', htmlspecialchars(t("Affiliate Payment to !user", array('!user' => $account->name), array('langcode' => ENT_QUOTES))));
    $payment->add('no_shipping', 1);
    $payment->add('rm', variable_get('ms_paypal_wps_rm', 2));
    $payment->add('return', url('admin/people/pay_affiliates', array('absolute' => TRUE)));
    $payment->add('cancel_return', url('admin/people/pay_affiliates', array('absolute' => TRUE)));
    $payment->add('notify_url', url('ms_affiliates/backend', array('absolute' => TRUE)));
    $payment->add('custom', "af_uid=" . $account->uid . "&uid=" . $user->uid);
    $payment->add('currency_code', variable_get('ms_affiliates_default_currency', 'USD'));
    $payment->add('lc', variable_get('ms_paypal_wps_lc', 'US'));

    $payment->add('cmd', '_xclick');
    $payment->add('amount', $form_state['values']['amount']);

    $button = $payment->submit(t('Pay Now'));

    // @ignore security_3
    drupal_set_message(t('The payment button has been generated. Please click it to continue: !button',
      array('!button' => $button)));
  } else {
    drupal_set_message(t('There was an error with the user account.'));
  }
}

/**
 * Form constructor for the requested info form.
 *
 * @param object $balance
 *   A balance object.
 *
 * @ingroup forms
 */
function ms_affiliates_requested_info_form($form, &$form_state, $balance) {
  $form['requested_amount'] = array(
    '#type' => 'item',
    '#title' => t('Requested Amount'),
    '#markup' => ms_core_format_money($balance->requested_amount),
  );
  $form['requested_method'] = array(
    '#type' => 'item',
    '#title' => t('Requested Method'),
    '#markup' => filter_xss($balance->requested_method),
  );
  $form['requested_notes'] = array(
    '#type' => 'item',
    '#title' => t('Notes'),
    '#markup' => filter_xss($balance->requested_notes),
  );

  return $form;
}

/**
 * Page callback: List the affiliates in the admin area.
 *
 * @see ms_affiliates_menu()
 */
function ms_affiliates_list_affiliates() {
  // Check if they are returning from PayPal.
  $ipn = $_POST;
  $amount = isset($ipn['mc_gross']) ? $ipn['mc_gross'] : 0;
  if ($amount) {
    // Get the Variables.
    $a_raw = explode('&', $ipn['custom']);
    $vars = array();
    foreach ($a_raw as $a) {
      $b = explode('=', $a);
      $vars[$b[0]] = $b[1];
    }

    $affiliate = user_load($vars['af_uid'], TRUE);

    // Clear the Request Info.
    ms_affiliates_clear_request($affiliate->uid);

    // Set Message to Screen.
    drupal_set_message(t("Paid %payment to user <a href='@url'>@name</a>, paypal email: %paypalEmail.
      Please allow up to 2 minutes for the changes to show.",
      array(
        '%paypalEmail' => $affiliate->ms_affiliates_paypal_address,
        '%payment' => ms_core_format_money($amount, variable_get('ms_affiliates_default_currency', 'USD')),
        '@name' => $affiliate->name,
        '@url' => url('user/' . $affiliate->uid)
      )));
  }

  $max_balance = isset($_GET['max_balance']) ? $_GET['max_balance'] : 0;
  $min_balance = isset($_GET['min_balance']) ? $_GET['min_balance'] : variable_get('ms_affiliates_min_payout', 0);

  $filters = array(
    'min_balance' => array(
      '#title' => t('Minimum Balance'),
      '#default_value' => $min_balance,
    ),
    'max_balance' => array(
      '#title' => t('Maximum Balance'),
      '#default_value' => $max_balance,
    ),
  );

  $build = array();
  $build['content'] = array(
    'ms_affiliates_list_affiliates_filters' => drupal_get_form('ms_core_get_filter_form', $filters),
    'ms_affiliates_list_affiliates_table' => drupal_get_form('ms_affiliates_pay_affiliates_form', $min_balance, $max_balance),
  );

  return $build;
}

/**
 * Form constructor for the pay affiliates form.
 *
 * This is used to pay many affiliates at once, for MassPay, for example.
 *
 * @param float $min
 *   The minimum payout amount.
 * @param float $max
 *   The maximum payout amount.
 *
 * @see ms_affiliates_pay_affiliates_form_submit()
 * @ingroup forms
 */
function ms_affiliates_pay_affiliates_form($form, &$form_state, $min, $max) {
  $form['b_action'] = array(
    '#type' => 'select',
    '#options' => array(
      '' => t('Choose action'),
    ),
    '#title' => t('Action'),
  );

  $options = module_invoke_all('ms_affiliates_bulk_options');

  // Add other options.
  $form['b_action']['#options'] = array_merge($form['b_action']['#options'], $options);

  $m_path = drupal_get_path('module', 'ms_affiliates');
  drupal_add_css($m_path . '/css/payAffiliates.css', array('type' => 'file', 'weight' => CSS_THEME));
  drupal_add_js($m_path . '/js/pay_affiliates.js');

  $headers = array(
    'name' => array('data' => t('Affiliate Name'), 'field' => 'u.name'),
    'balance' => array('data' => t('Balance'), 'field' => 'b.balance', 'sort' => 'desc'),
    'request' => array('data' => t('Requested Amount'), 'field' => 'b.requested_amount'),
    'actions' => t('Actions'),
  );

  $rows = array();
  $attr = array('id' => 'ms-affiliates-table');
  $currency = variable_get('ms_affiliates_default_currency', 'USD');

  $query = db_select('ms_affiliates_balance', 'b');
  $query->fields('b');
  $query->leftjoin('users', 'u', 'b.uid = u.uid');
  $query = $query->extend('TableSort')->orderByHeader($headers);
  $query->fields('u', array('name'));
  $query->condition('b.balance', $min, '>');

  if ($max) {
    $query->condition('b.balance', $max, '<');
  }

  $result = $query->execute();

  foreach ($result as $aff) {
    $account = user_load($aff->uid, TRUE);
    if ($account) {
      $pay_links = array();
      $pay_links[] = l(t('Enter Manual Payment'), 'admin/people/pay_affiliates/enter_payment/' . $aff->uid);
      if ($account->ms_affiliates_paypal_address AND module_exists('ms_paypal_wps')) {
        $pay_links[] = l(t('Pay via PayPal'), 'admin/people/pay_affiliates/pay/' . $aff->uid);
      }
      drupal_alter('ms_affiliates_payment_links', $pay_links, $account, $aff);
      $request = '';
      if ($aff->requested_amount > 0) {
        $info_form = drupal_get_form('ms_affiliates_requested_info_form', $aff);
        $request = l(t('View Request'), '',
          array('attributes' => array('class' => array('ms-view-request'))));
        $request .= "<div class='ms-request-info'>"
          . drupal_render($info_form)
          . "</div>";
      }
      $rows[$aff->uid] = array(
        'name' => l($account->name, 'user/' . $account->uid),
        'balance' => ms_core_format_money($aff->balance, $currency),
        'request' => $request,
        'actions' => implode(' | ', $pay_links),
      );
    }
  }

  $form['table'] = array(
    '#type' => 'tableselect',
    '#header' => $headers,
    '#options' => $rows,
    '#attributes' => $attr,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  return $form;
}

/**
 * Form submission handler for ms_affiliates_pay_affiliates_form().
 */
function ms_affiliates_pay_affiliates_form_submit($form, &$form_state) {
  $action = $form_state['values']['b_action'];
  $_SESSION['ms_affiliates_bulk_uids'] = $form_state['values']['table'];
  $form_state['redirect'] = 'admin/people/pay_affiliates/' . $action;
}

/**
 * Page callback: Assign Affiliates for users.
 *
 * @see ms_affiliates_assign_affiliates_form()
 * @see ms_affiliates_menu()
 */
function ms_affiliates_assign_affiliates() {
  return drupal_get_form('ms_affiliates_assign_affiliates_form');
}

/**
 * Form constructor for the assign affiliates form.
 *
 * @see ms_affiliates_assign_affiliates_form_validate()
 * @see ms_affiliates_assign_affiliates_form_submit()
 * @ingroup forms
 */
function ms_affiliates_assign_affiliates_form($form, &$form_state) {
  // Select users that have no affiliates.
  $result = db_query("SELECT * FROM {users} u WHERE NOT EXISTS (
    SELECT * FROM {ms_affiliates_genealogy} a WHERE a.uid = u.uid) AND u.uid != :uid ORDER BY u.name ASC",
    array(':uid' => 0));

  $users = array();
  $roles = user_roles(TRUE);
  foreach ($result as $account) {
    $users_roles = array();
    $roles_result = db_query('SELECT rid FROM {users_roles} WHERE uid = :uid', array(':uid' => $account->uid));
    foreach ($roles_result as $user_role) {
      $users_roles[] = $roles[$user_role->rid];
    }
    asort($users_roles);
    if (!empty($users_roles)) {
      $users[$account->uid] = t('@name - @roles', array('@name' => $account->name, '@roles' => implode(', ', $users_roles)));
    } else {
      $users[$account->uid] = t('@name', array('@name' => $account->name));
    }
  }

  $form['main']['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Affiliate Name'),
    '#size' => 32,
    '#description' => t("The Name of the Affiliate"),
    '#default_value' => '',
    '#autocomplete_path' => 'admin/structure/ms_core/autocomplete',
    '#required' => TRUE,
  );

  $form['main']['users'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Users'),
    '#description' => t("The Name of the Affiliate"),
    '#options' => $users,
    '#required' => TRUE,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Assign Affiliates'),
  );

  return $form;
}

/**
 * Form validation handler for ms_affiliates_assign_affiliates_form().
 *
 * @see ms_affiliates_assign_affiliates_form_submit()
 */
function ms_affiliates_assign_affiliates_form_validate($form, &$form_state) {
  $v = $form_state['values'];
  $account = user_load_by_name($v['name']);
  if (!$account->uid) {
    form_set_error('name', t('You must enter a valid user'));
  }
}

/**
 * Form submission handler for ms_affiliates_assign_affiliates_form().
 *
 * @see ms_affiliates_assign_affiliates_form_validate()
 */
function ms_affiliates_assign_affiliates_form_submit($form, &$form_state) {
  $v = $form_state['values'];
  $users = array_filter($v['users']);
  $affiliate = user_load_by_name($v['name']);
  foreach ($users as $uid => $name) {
    $account = user_load($uid, TRUE);
    ms_affiliates_set_affiliate($account, $affiliate);
    drupal_set_message(t('Set %aff_name as the affiliate for %ref_name',
      array('%aff_name' => $affiliate->name, '%ref_name' => $account->name)));
  }

  $form_state['redirect'] = 'admin/people/assign_affiliates';
}

/**
 * Page callback: Handle PayPal IPNs.
 *
 * @see ms_affiliates_menu()
 */
function ms_affiliates_paypal_ipn_page() {
  if (module_exists('ms_paypal_wps')) {
    require_once(DRUPAL_ROOT . "/" . drupal_get_path('module', 'ms_paypal_wps') . "/includes/ms_paypal_wps_class.php");
    $ipn = ms_paypal_wps_ipn_handler($_POST);

    if ($ipn) {
      ms_core_log('ms_affiliates', 'Successfully Received an IPN from PayPal. Here are the details: Data: !data',
        array('!data' => ms_core_print_r($ipn)));

      $a_raw = explode('&', $ipn['custom']);
      $vars = array();
      foreach ($a_raw as $a) {
        $b = explode('=', $a);
        $vars[$b[0]] = $b[1];
      }

      $affiliate = user_load($vars['af_uid'], TRUE);
      $account = user_load($vars['uid'], TRUE);
      $amount = $ipn['mc_gross'];

      // Update the User Balance.
      $end_balance = ms_affiliates_update_balance($affiliate->uid, -$amount);

      // Add Item to History.
      ms_affiliates_insert_record($affiliate->uid, $account->uid, 0, 0, t('Payment via PayPal'), 'paypal_payout', -$amount);

      // Email Affiliate the Payment Details.
      if (variable_get('ms_affiliates_payment_mail_body', FALSE)) {
        $payment_vars = array(
          'amount' => ms_core_format_money($amount),
          'userName' => $affiliate->name,
          'balance' => ms_core_format_money($end_balance),
          'itemName' => t('Affiliate Payment'),
          'paypalEmail' => $affiliate->ms_affiliates_paypal_address,
          'account' => $affiliate,
        );
        drupal_mail('ms_affiliates', 'payment', $affiliate->mail, user_preferred_language($affiliate), $payment_vars);
      }

      ms_core_log('ms_affiliates', "Paid %payment to user <a href='@url'>@name</a>, paypal email: %paypalEmail.
        Please allow up to 2 minutes for the changes to show.",
        array(
          '%paypalEmail' => $affiliate->ms_affiliates_paypal_address,
          '%payment' => ms_core_format_money($amount, variable_get('ms_affiliates_default_currency', 'USD')),
          '@name' => $affiliate->name,
          '@url' => url('user/' . $affiliate->uid)
        ));
    }
  }
}

/**
 * Page callback: Show the Request Payment form.
 *
 * @see ms_affiliates_request_payment_form()
 * @see ms_affiliates_menu()
 */
function ms_affiliates_request_payment_page() {
  global $user;
  return drupal_get_form('ms_affiliates_request_payment_form', $user->uid);
}

/**
 * Form constructor for the request payment form.
 *
 * Lets the user choose how much money to request and how they wish to be paid.
 *
 * @param int $uid
 *   The user id.
 *
 * @see ms_affiliates_request_payment_form_submit()
 * @ingroup forms
 */
function ms_affiliates_request_payment_form($form, &$form_state, $uid) {
  $account = user_load($uid, TRUE);
  $form['main'] = array(
    '#type' => 'fieldset',
    '#title' => t('Payment Info'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['main']['amount'] = array(
    '#type' => 'textfield',
    '#title' => t('Payment Amount'),
    '#size' => 8,
    '#maxlength' => 10,
    '#description' => t("Enter the amount you wish to request. Must be less than or equal to the current balance of %balance.",
      array('%balance' => ms_core_format_money($account->af_balance))),
    '#default_value' => $account->af_balance,
    '#required' => TRUE,
  );
  if (!$methods = ms_affiliates_get_payment_methods($account)) {
    $methods = array();
  }

  $form['main']['method'] = array(
    '#type' => 'select',
    '#title' => t('Payment Method'),
    '#options' => $methods,
    '#description' => t("Choose which payment method you prefer.
      If you have not set any payment types, or wish to make changes to the ones currently set,
      you may do so here: !link",
      array('!link' => l(t('User Account'), 'user/' . $account->uid . '/edit'))),
    '#required' => TRUE,
  );
  $form['main']['notes'] = array(
    '#type' => 'textarea',
    '#title' => t('Notes'),
    '#description' => t("Enter any notes about this request."),
    '#default_value' => '',
    '#required' => FALSE,
  );
  $form['af_uid'] = array(
    '#type' => 'value',
    '#default_value' => $account->uid,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Request Payment'),
  );

  return $form;
}

/**
 * Form submission handler for ms_affiliates_request_payment_form().
 */
function ms_affiliates_request_payment_form_submit($form, &$form_state) {
  $account = user_load($form_state['values']['af_uid'], TRUE);
  $method = '';
  switch ($form_state['values']['method']) {
    case 'paypal':
      $method = t('PayPal: @address', array('@address' => $account->ms_affiliates_paypal_address));
      break;
    case 'check':
      $method = t('Check: @address', array('@address' => $account->ms_affiliates_mailing_address));
      break;
    case 'iban':
      $method = t('IBAN: @num', array('@num' => $account->ms_affiliates_iban));
      break;
    case 'swift':
      $method = t('SWIFT: @num', array('@num' => $account->ms_affiliates_swift));
      break;
  }

  // Update the record.
  $record = new stdClass();

  $record->uid = $account->uid;
  $record->requested_method = $method;
  $record->requested_amount = $form_state['values']['amount'];
  $record->requested_notes = $form_state['values']['notes'];

  drupal_write_record('ms_affiliates_balance', $record, 'uid');

  $payment_vars = array(
    'account' => $account,
    'requested_amount' => $form_state['values']['amount'],
    'requested_method' => $method,
    'requested_notes' => $form_state['values']['notes'],
  );

  // Send an email to the admin.
  drupal_mail('ms_affiliates', 'request_payment', variable_get('site_mail', ''), language_default(), $payment_vars);

  // Set the message.
  drupal_set_message(t('Your request has been submitted, and you will be notified once a payment has been sent. Thank you.'));
  $form_state['redirect'] = 'user/' . $account->uid . '/ms_affiliate';
}

/**
 * Page callback: Program Info Page.
 *
 * @param object $account
 *   The user account.
 *
 * @see ms_affiliates_menu()
 */
function ms_affiliates_program_info_page($account) {
  $program_info = variable_get('ms_affiliates_program_info', array('format' => '', 'value' => ''));
  return '<div id="affiliate-sales-header"><h2>' . t('Program Info') . '</h2></div>' . check_markup($program_info['value'], $program_info['format']);
}

/**
 * Page callback: Affiliates Dashboard Page.
 *
 * @param object $account
 *   The user account.
 *
 * @see ms_affiliates_menu()
 */
function ms_affiliates_dashboard_page($account) {
  $account = user_load($account->uid, TRUE);

  $commissions = array('today' => 0, '7days' => 0, '365days' => 0);
  $clicks = array('today' => 0, '7days' => 0, '365days' => 0);

  // Get today's commissions.
  $dates_today = ms_affiliates_predefined_range(7);
  $result = db_query('SELECT COUNT(id) AS cnt FROM {ms_affiliates_history}
    WHERE uid = :uid AND type != :af_payment AND type != :af_credit AND date between :start AND :end',
    array(':uid' => $account->uid, ':af_payment' => 'af_payment', ':af_credit' => 'af_credit', ':start' => $dates_today['start'], ':end' => $dates_today['end']));

  foreach ($result as $count) {
    $commissions['today'] += $count->cnt;
  }

  // Get commissions from the last 7 days.
  $dates_week = ms_affiliates_predefined_range(6);

  $result = db_query('SELECT COUNT(id) AS cnt FROM {ms_affiliates_history}
    WHERE uid = :uid AND type != :af_payment AND type != :af_credit AND date BETWEEN :start AND :end',
    array(':uid' => $account->uid, ':af_payment' => 'af_payment', ':af_credit' => 'af_credit', ':start' => $dates_week['start'], ':end' => $dates_week['end']));

  foreach ($result as $count) {
    $commissions['7days'] += $count->cnt;
  }

  // Get commissions from the last year.
  $dates_year = ms_affiliates_predefined_range(5);

  $result = db_query('SELECT COUNT(id) AS cnt FROM {ms_affiliates_history}
    WHERE uid = :uid AND type != :af_payment AND type != :af_credit AND date BETWEEN :start AND :end',
    array(':uid' => $account->uid, ':af_payment' => 'af_payment', ':af_credit' => 'af_credit', ':start' => $dates_year['start'], ':end' => $dates_year['end']));

  foreach ($result as $count) {
    $commissions['365days'] += $count->cnt;
  }

  // Get today's clicks.
  $result = db_query("SELECT unix_timestamp(from_unixtime(time, '%%Y-%%m-%%d')) AS click_date,
    count(click_id) AS clicks FROM {ms_affiliates_clicks}
    WHERE aid = :aid AND time BETWEEN :start AND :end GROUP BY click_date",
    array(':aid' => $account->uid, ':start' => $dates_today['start'], ':end' => $dates_today['end']));

  foreach ($result as $count) {
    $clicks['today'] += $count->clicks;
  }

  // Get commissions from the last 7 days.
  $result = db_query("SELECT unix_timestamp(from_unixtime(time, '%%Y-%%m-%%d')) AS click_date,
    COUNT(click_id) AS clicks FROM {ms_affiliates_clicks}
    WHERE aid = :aid AND time BETWEEN :start AND :end GROUP BY click_date",
    array(':aid' => $account->uid, ':start' => $dates_week['start'], ':end' => $dates_week['end']));

  foreach ($result as $count) {
    $clicks['7days'] += $count->clicks;
  }

  // Get commissions from the last year.
  $result = db_query("SELECT unix_timestamp(from_unixtime(time, '%%Y-%%m-%%d')) AS click_date,
    COUNT(click_id) AS clicks FROM {ms_affiliates_clicks}
    WHERE aid = :aid AND time BETWEEN :start AND :end GROUP BY click_date",
    array(':aid' => $account->uid, ':start' => $dates_year['start'], ':end' => $dates_year['end']));

  foreach ($result as $count) {
    $clicks['365days'] += $count->clicks;
  }

  $top_content = '';

  $top_content .= '<div id="affiliate-sales-header"><h2>' . t('Affiliate Info') . '</h2></div>';

  $top_content .= t('Balance: @amount (@avail Available)',
    array(
      '@amount' => ms_core_format_money(ms_affiliates_get_balance($account->uid, TRUE)),
      '@avail' => ms_core_format_money($account->af_balance),
    ));

  if (ms_affiliates_request_payment_access_test()) {
    $top_content .= ' - ' . l(t('Request Payment'), 'ms_affiliates/request-payment');
  }

  if (variable_get('ms_affiliates_min_payout', 0)) {
    $top_content .= "<br />" . t('Minimum Payout') . ': ' . ms_core_format_money(variable_get('ms_affiliates_min_payout', 0));
  }

  if (variable_get('ms_affiliates_show_commission_levels', FALSE)) {
    $top_content .= "<br />" . t('Commission Levels') . ': ' . ms_affiliates_get_affiliate_commission_levels_string($account);
  }

  $top_content .= ms_affiliates_get_payment_options_html($account);

  $top_content .= '<div id="affiliate-sales-header"><h2>' . t('Commission History') . '</h2></div>';

  $top_content .= t('Sales Today') . ': ' . $commissions['today'] . ' <br />'
    . t('Sales last 7 Days') . ': ' . $commissions['7days'] . ' <br />'
    . t('Last 365 Days') . ': ' . $commissions['365days'];

  $top_content .= '<div id="affiliate-sales-click-count"><h2>' . t('Unique Click Count') . '</h2></div>';

  $top_content .= t("Today's Clicks") . ": " . $clicks['today'] . "<br />"
    . t('Last 7 Days') . ": " . $clicks['7days'] . "<br />"
    . t('Last 365 Days') . ": " . $clicks['365days'];

  global $base_url;

  $ref_links = array();

  $ref_links['ref_link1'] = array(
    '#type' => 'textfield',
    '#title' => t('Example Affiliate Link 1'),
    '#prefix' => "<div class='ms_affiliates_example_link_1'>",
    '#suffix' => "</div>",
    '#description' => t('Link to any page with your affiliate ID at the end for the referral to count as yours (just add "?a=!uid"to any url from this site).', array('!uid' => $account->uid)),
    '#value' => $base_url . "?a=" . $account->uid,
    '#weight' => 4,
  );
  $ref_links['ref_link2'] = array(
    '#type' => 'textfield',
    '#title' => t('Example Affiliate Link 2'),
    '#prefix' => "<div class='ms_affiliates_example_link_2'>",
    '#suffix' => "</div>",
    '#description' => t('Link to any page with your user name at the end for the referral to count as yours (just add "?an=!uname"to any url from this site).', array('!uname' => urlencode($account->name))),
    '#value' => $base_url . "?an=" . urlencode($account->name),
    '#weight' => 5,
  );
  $ref_links['ref_link3'] = array(
    '#type' => 'textfield',
    '#title' => t('Example Affiliate Link 3'),
    '#prefix' => "<div class='ms_affiliates_example_link_3'>",
    '#suffix' => "</div>",
    '#description' => t('Link to this site with the following url'),
    '#value' => $base_url . '/' . variable_get('ms_affiliates_af_url', 'af') . '/' . urlencode($account->name),
    '#weight' => 6,
  );

  $top_content .= '<div id="affiliate-links-header"><h2>' . t('Affiliate Links') . '</h2></div>';

  $banners = ms_affiliates_display_banners();

  $extras = module_invoke_all('ms_affiliates_dashboard', $account);
  $other_blocks = '';
  foreach ($extras as $extra) {
    $other_blocks .= '<div id="affiliate-links-header"><h2>' . $extra['title'] . '</h2></div>';
    $other_blocks .= $extra['body'];
  }

  $build = array();
  $build['content'] = array(
    'ms_affiliates_dashboard_top' => array(
      '#markup' => $top_content,
    ),
    'ms_affiliates_dashboard_ref_links' => $ref_links,
    'ms_affiliates_dashboard_banners' => array(
      '#markup' => $banners,
    ),
    'ms_affiliates_dashboard_other_blocks' => array(
      '#markup' => $other_blocks,
    ),
  );

  return $build;
}

/**
 * Gets the payment options html.
 *
 * @param object $account
 *   The user account.
 *
 * @return string
 *   The payment options html.
 */
function ms_affiliates_get_payment_options_html($account) {
  $content = '';
  if (variable_get('ms_affiliates_method_paypal', FALSE)) {
    if (!empty($account->ms_affiliates_paypal_address)) {
      $content .= '<br />' . t('PayPal Email Address') . ': ' . $account->ms_affiliates_paypal_address;
    } else {
      $content .= '<br />' . l(t('Add PayPal Email'), 'user/' . $account->uid . '/edit');
    }
  }

  if (variable_get('ms_affiliates_method_check', FALSE)) {
    if (!empty($account->ms_affiliates_mailing_address)) {
      $content .= '<br />' . t('Mailing Address') . ':<br />' . $account->ms_affiliates_mailing_address . '<br />';
    } else {
      $content .= '<br />' . l(t('Add Mailing Address'), 'user/' . $account->uid . '/edit');
    }
  }

  if (variable_get('ms_affiliates_method_iban', FALSE)) {
    if (!empty($account->ms_affiliates_iban)) {
      $content .= '<br />' . t('IBAN #') . ':<br />' . $account->ms_affiliates_iban . '<br />';
    } else {
      $content .= '<br />' . l(t('Add IBAN #'), 'user/' . $account->uid . '/edit');
    }
  }

  if (variable_get('ms_affiliates_method_swift', FALSE)) {
    if (!empty($account->ms_affiliates_swift)) {
      $content .= '<br />' . t('SWIFT #') . ':<br />' . $account->ms_affiliates_swift . '<br />';
    } else {
      $content .= '<br />' . l(t('Add SWIFT #'), 'user/' . $account->uid . '/edit');
    }
  }
  return $content;
}

/**
 * Gets a listing of the banners.
 *
 * @return string
 *   HTML for the banners.
 */
function ms_affiliates_display_banners() {
  global $base_url, $user;

  $banners = variable_get('ms_affiliates_banner_template', '');

  $banners = explode('<', $banners);
  unset($banners[0]);

  if (count($banners) < 1) {
    return;
  }

  $output = '';
  $output .= '<div id="affiliate-sales-click-count"><h2>' . t('Affiliate Banners') . '</h2></div>';

  foreach ($banners as $banner) {
    $banner = '<' . $banner;
    $url = $base_url . '/' . variable_get('ms_affiliates_af_url', 'af') . '/' . urlencode($user->name);
    $banner_link = l($banner, $url, array('query' => NULL, 'fragment' => NULL, 'absolute' => TRUE, 'html' => TRUE));
    $output .= "<div class='banner_template'>";
    $output .= $banner;
    $output .= '<textarea cols="45">' . $banner_link . '</textarea>';
    $output .= "</div>";
  }

  return $output;
}

/**
 * Page callback: Affiliates Dashboard Page.
 *
 * @param object $account
 *   The user account.
 *
 * @see ms_affiliates_menu()
 */
function ms_affiliates_clicks_page($account) {
  // Setup the table.
  $header = array(
    array('data' => t('Date'), 'field' => "click_date", 'sort' => 'desc'),
    array('data' => t('Unique Clicks'), 'field' => "clicks"),
  );

  // Create sql to display level of affiliate specified.
  $dates = ms_affiliates_predefined_range(arg(4));

  $query = db_select('ms_affiliates_clicks', 'c');
  $query->fields('c');
  $query->addExpression("unix_timestamp(from_unixtime(c.time, '%Y-%m-%d'))", 'click_date');
  $query->addExpression("COUNT(c.click_id)", 'clicks');
  $query->condition('c.aid', $account->uid, '=');
  $query->condition('c.time', array($dates['start'], $dates['end']), 'BETWEEN');
  $query->groupBy('click_date');

  $query = $query->extend('TableSort')->orderByHeader($header);

  $result = $query->execute();

  $total_clicks = 0;
  foreach ($result as $click_day) {
    $link = l(format_date($click_day->click_date), 'user/' . $account->uid . '/ms_affiliate/clicks/details/' . $click_day->click_date);

    $rows[] = array($link, $click_day->clicks);
    $total_clicks += $click_day->clicks;
  }
  $rows[] = array(t('Total:'), $total_clicks);

  $build = array();
  $build['content'] = array(
    'ms_affiliates_clicks_table' => array(
      '#markup' => theme('table', array('header' => $header, 'rows' => $rows)),
    ),
    'ms_affiliates_time_selection_form' => drupal_get_form('ms_affiliates_time_selection_form'),
  );

  return $build;
}

/**
 * Page callback: Displays a detailed clicks view for the selected date.
 *
 * @param object $account
 *   The user account.
 *
 * @see ms_affiliates_menu()
 */
function ms_affiliates_click_details($account) {
  $output = 'Viewing clicks for: ' . format_date(arg(5)) . '<br /> <br />';

  // Setup the table.
  $header = array(
    array('data' => t('Date/Time'), 'field' => "time", 'sort' => 'desc'),
    array('data' => t('Client IP'), 'field' => "client_ip"),
    array('data' => t('Referrer'), 'field' => "referrer"),
    array('data' => t('Destination'), 'field' => "destination"),
  );

  // Create sql to display level of affiliate specified.
  $start = arg(5);

  $dates['start'] = mktime(00, 00, 00, date("m", $start), date("d", $start), date("Y", $start));
  $dates['end'] = mktime(23, 59, 59, date("m", $start), date("d", $start), date("Y", $start));

  $query = db_select('ms_affiliates_clicks', 'c');
  $query->fields('c');
  $query->addExpression("COUNT(c.click_id)", 'clicks');
  $query->condition('c.aid', $account->uid, '=');
  $query->condition('c.time', array($dates['start'], $dates['end']), 'BETWEEN');

  $query = $query->extend('TableSort')->orderByHeader($header);

  $result = $query->execute();

  $total_clicks = 0;
  foreach ($result as $click) {
    $rows[] = array(format_date($click->time),
      $click->client_ip ? $click->client_ip : 'N/A',
      $click->referrer ? wordwrap($click->referrer, 25, "\n", TRUE) : 'N/A',
      $click->destination ? wordwrap($click->destination, 25, "\n", TRUE) : 'Frontpage',
    );

    $total_clicks += 1;
  }
  $rows[] = array(t('Total:'), $total_clicks);
  $output .= theme('table', array('header' => $header, 'rows' => $rows));

  return $output;
}

/**
 * Loads a history item by foreign key.
 *
 * @param string $foreign_key
 *   The foreign key to load the history item by.
 *
 * @return
 *   The history item or FALSE.
 */
function ms_affiliates_load_history_item_by_foreign_key($foreign_key) {
  $query = db_select('ms_affiliates_history', 'h');
  $query->fields('h');
  $query->condition('h.foreign_key', $foreign_key);
  $result = $query->execute();

  foreach ($result as $item) {
    return $item;
  }
  return FALSE;
}

/**
 * Page callback: Shows the referrals in the user account.
 *
 * @param object $account
 *   The user account.
 *
 * @see ms_affiliates_menu()
 */
function ms_affiliates_referrals_page($account) {
  $m_path = drupal_get_path('module', 'ms_affiliates');
  drupal_add_js($m_path . '/js/jquery.treeview.js');
  $js = "
  (function ($) {
  $(document).ready(function(){
        $('#tree').treeview({
          collapsed: true,
          animated: 'medium',
          control:'#sidetreecontrol',
          prerendered: true,
          persist: 'location'
        });
        $('.aItem > a').mouseover(function(){
           var aInfo = $(this).parent().find('.aInfo').html();
            $('#aInfoBox').html(aInfo);
          });
      });
      })(jQuery);
      ";
  drupal_add_js($js, array('type' => 'inline', 'scope' => JS_DEFAULT));

  $output = "<h3>Referrals:</h3>";
  if (db_query('SELECT COUNT(*) FROM {ms_affiliates_genealogy} WHERE aid = :aid', array(':aid' => $account->uid))->fetchField()) {
    drupal_add_css($m_path . '/js/jquery.treeview.css', array('type' => $type = 'module'));
    $output .= "<div id='sidetreecontrol'> <a href='?#'>Collapse All</a> | <a href='?#'>Expand All</a> </div>
      <div id='aInfoBox'> </div>
      <h3>" . $account->name . "</h3><ul class='level2 treeview' id='tree'>";

    // Build the tree.
    $nav_query = db_query("SELECT * FROM {ms_affiliates_genealogy} WHERE aid = :aid ORDER BY uid", array(':aid' => $account->uid));
    $depth = 1;
    $max_depth = variable_get('ms_affiliates_max_levels', 3) - 1;

    foreach ($nav_query as $row) {
      if ($ref_account = user_load($row->uid, TRUE)) {
        $temp_tree = '';

        $child_tree = ms_affiliates_build_child($row->uid, $max_depth, $depth);
        if ($child_tree) {
          $temp_tree .= "<li class='expandable'>";
          $temp_tree .= theme('ms_affiliates_referral', array('account' => $ref_account));
          $temp_tree .= "<ul class='rListUl'>" . $child_tree . "</ul>";
          $temp_tree .= "</li>";
        } else {
          $temp_tree .= "<li>";
          $temp_tree .= theme('ms_affiliates_referral', array('account' => $ref_account, 'parent' => FALSE));
          $temp_tree .= $child_tree;
          $temp_tree .= "</li>";
        }
        $output .= $temp_tree;
      }
    }

    $output .= "</ul>";
    $output .= "<div style='clear:both;'></div>";
  } else {
    $output .= t("No referrals.");
  }
  return $output;
}

/**
 * Implementation of hook_theme().
 */
function ms_affiliates_theme() {
  return array(
    'ms_affiliates_referral' => array(
      'variables' => array('account' => NULL, 'parent' => TRUE),
    ),
  );
}

/**
 * Themes the referral.
 *
 * @param array $variables
 *   An array containing:
 *     account: The user account.
 *     parent: The parent user account.
 *
 * @ingroup themeable
 */
function theme_ms_affiliates_referral($variables) {
  $account = $variables['account'];
  $parent = $variables['parent'];
  $created = getdate($account->created);
  $role_level = "";
  foreach ($account->roles as $role_name) {
    $role_level = $role_name;
  }
  $joined = $created['month'] . " " . $created['mday'] . ", " . $created['year'];
  $r_link = l($account->name, "user/" . $account->uid);
  $c_link = (module_exists('contact')) ? l('Contact User', "user/" . $account->uid . "/contact") : '';

  $html = '';
  if ($parent) {
    $html .= "<div class='hitarea expandable-hitarea'></div>";
  }
  $html .= "<div class='aItem'>$r_link<div class='aInfo'>
    <h4>" . $account->name . "</h4>
    Joined: $joined<br />
    Level: $role_level $c_link</div></div>";

  return $html;
}

/**
 * Recursively builds the children for an affiliate.
 *
 * @param int $aid
 *   The affiliate id.
 * @param int $max_depth
 *   The maximum depth to go to.
 * @param int $depth
 *   The current depth.
 *
 * @return string
 *   HTML for the children.
 */
function ms_affiliates_build_child($aid, $max_depth, &$depth) {
  if ($depth >= $max_depth) {
    return FALSE;
  }
  $child_query = db_query("SELECT * FROM {ms_affiliates_genealogy} WHERE aid = :aid", array(':aid' => $aid));
  $temp_tree = FALSE;
  foreach ($child_query as $child) {
    if ($child->uid != $child->aid) {
      if ($account = user_load($child->uid, TRUE)) {
        $depth++;
        $child_tree = ms_affiliates_build_child($child->uid, $max_depth, $depth);
        $depth--;
        if ($child_tree) {
          $temp_tree .= "<li class='expandable'>";
          $temp_tree .= theme('ms_affiliates_referral', array('account' => $account));
          $temp_tree .= "<ul class='rListUl'>" . $child_tree . "</ul>";
          $temp_tree .= "</li>";
        } else {
          $temp_tree .= "<li>";
          $temp_tree .= theme('ms_affiliates_referral', array('account' => $account, 'parent' => FALSE));
          $temp_tree .= $child_tree;
          $temp_tree .= "</li>";
        }
      }
    }
  }

  return $temp_tree;
}

/**
 * Implements hook_mail().
 */
function ms_affiliates_mail($key, &$message, $vars) {
  $object = (object)$vars;
  $account = $vars['account'];
  switch ($key) {
    case 'tell_friend':
      $subject = variable_get('ms_affiliates_tell_friend_subject', t("A special message from [user]!"));

      $message_subject = token_replace($subject,
        array(
          'ms_affiliate_email' => $account,
          'user' => $account,
        ));
      $message_body = $vars['message'];
      break;

    case 'request_payment':
      $account = $vars['account'];
      $message_subject = t("Affiliate Payment Requested");
      $message_body = t("User !user has requested !amount via the following method: !method \n And the following notes: !notes \n To make a payment, click here: !link",
        array(
          '!user' => $account->name,
          '!amount' => ms_core_format_money($vars['requested_amount']),
          '!method' => $vars['requested_method'],
          '!notes' => $vars['requested_notes'],
          '!link' => url('admin/people/pay_affiliates', array('absolute' => TRUE))
        ));
      break;

    case 'earned_bonus':
      $message_subject = variable_get('ms_affiliates_earned_bonus_mail_subject', t("Bonus Earned: [ms_affiliate:amount]!"));
      $message_body = variable_get('ms_affiliates_earned_bonus_mail_body', t("Dear [user:name],
You have earned a [ms_affiliate:amount] bonus for referring [ms_affiliate:refName] on [date:long]. The amount has been credited to your Affiliate Balance.
Your new Affiliate Balance is [ms_affiliate:balance].

Sincerely,
Staff"));
      break;

    case 'earned_commission':
      $message_subject = variable_get('ms_affiliates_earned_commission_mail_subject', t("Commission Earned: [ms_affiliate:amount]!"));
      $message_body = variable_get('ms_affiliates_earned_commission_mail_body', t("Dear [user:name],
You have earned [ms_affiliate:amount] commission on [ms_affiliate:itemName] purchased by [ms_affiliate:refName] on [date:long]. The amount has been credited to your Affiliate Balance.
Your new Affiliate Balance is [ms_affiliate:balance].

Sincerely,
Staff"));
      break;

    case 'payment':
      $message_subject = variable_get('ms_affiliates_payment_mail_subject', t("Payment of [ms_affiliate:amount] has been sent"));
      $message_body = variable_get('ms_affiliates_payment_mail_body', t("Dear [user:name],
A payment for the amount of [ms_affiliate:amount] has been sent to your PayPal Account ([ms_affiliate:paypalEmail]) on [date:long].
Your new Affiliate Balance is [ms_affiliate:balance].

Sincerely,
Staff"));
      break;

    case 'manual_payment':
      $message_subject = variable_get('ms_affiliates_manual_payment_mail_subject', t("Payment of [ms_affiliate:amount] has been entered"));
      $message_body = variable_get('ms_affiliates_manual_payment_mail_body', t("Dear [user:name],
A payment for the amount of [ms_affiliate:amount] has been entered to your account on [date:long].
Notes: [ms_affiliate:notes]
Your new Affiliate Balance is [ms_affiliate:balance].

Sincerely,
Staff"));
      break;
  }

  if (!empty($message_subject) && !empty($message_body)) {
    // Replace Tokens.
    $message['subject'] = token_replace($message_subject,
      array(
        'ms_affiliate' => $object,
        'user' => $account,
      )
    );
    $message['body'][] = token_replace($message_body,
      array(
        'ms_affiliate' => $object,
        'user' => $account,
      )
    );
  }
}

/**
 * Implements hook_tokens().
 */
function ms_affiliates_tokens($type, $tokens, $data = array(), $options = array()) {
  $replacements = array();

  if ($type == 'ms_affiliate' && !empty($data['ms_affiliate'])) {
    $object = $data['ms_affiliate'];
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'amount':
          $replacements[$original] = $object->amount;
          break;

        case 'refName':
          $replacements[$original] = $object->refName;
          break;

        case 'itemName':
          $replacements[$original] = $object->itemName;
          break;

        case 'balance':
          $replacements[$original] = $object->balance;
          break;

        case 'paypalEmail':
          $replacements[$original] = $object->paypalEmail;
          break;

        case 'notes':
          $replacements[$original] = $object->notes;
          break;
      }
    }
  }

  if ($type == 'ms_affiliate_email' && !empty($data['ms_affiliate_email'])) {
    $object = $data['ms_affiliate_email'];
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'affLink':
          $replacements[$original] = url(variable_get('ms_affiliates_af_url', 'af') . '/' . urlencode($object->name), array('absolute' => TRUE));
          break;
      }
    }
  }

  return $replacements;
}

/**
 * Implements hook_token_info().
 */
function ms_affiliates_token_info() {
  $types = array(
    'ms_affiliate' => array(
      'name' => t('MS Affiliate'),
      'description' => t('Affiliate Variables as defined by Affiliates Suite'),
      'needs-data' => 'ms_affiliate',
    ),
    'ms_affiliate_email' => array(
      'name' => t('MS Affiliate Email'),
      'description' => t('Affiliate Email Variables as defined by Affiliates Suite'),
      'needs-data' => 'ms_affiliate_email',
    )
  );

  $tokens = array(
    'ms_affiliate' => array(
      'amount' => array(
        'name' => t('Amount'),
        'description' => t("The amount that that the user is earning or being payed"),
      ),
      'refName' => array(
        'name' => t('Referral Name'),
        'description' => t("The name of the referral"),
      ),
      'itemName' => array(
        'name' => t('Item Name'),
        'description' => t("The name of the item that was purchased"),
      ),
      'balance' => array(
        'name' => t('Balance'),
        'description' => t("The affiliate balance"),
      ),
      'paypalEmail' => array(
        'name' => t('PayPal Email'),
        'description' => t("The PayPal Email entered by the affiliate"),
      ),
      'notes' => array(
        'name' => t('Notes'),
        'description' => t("Any notes entered by the admin"),
      ),
    ),
    'ms_affiliate_email' => array(
      'affLink' => array(
        'name' => t('Affiliate Link'),
        'description' => t('The affiliate link to the site for the user.'),
      ),
    ),
  );

  return array('types' => $types, 'tokens' => $tokens);
}

/**
 * Implements hook_uc_order().
 */
function ms_affiliates_uc_order($op, $order, $arg2) {
  if (variable_get('ms_affiliates_uc_integration', FALSE)) {
    switch ($op) {
      case 'new':
        ms_core_log('ms_affiliates', 'Ubercart Order New hook called for action %action . Order Object: !order.',
          array('%action' => $arg2, '!order' => ms_core_print_r($order)));
        // Repopulate from Cookie.
        if (isset($_COOKIE['affiliate']) AND (!isset($_SESSION['affiliate']) OR !$_SESSION['affiliate'])) {
          $_SESSION['affiliate'] = $_COOKIE['affiliate']['uid'];
          $_SESSION['affiliate_cookie_timestamp'] = $_COOKIE['affiliate']['timestamp'];
        }

        if (isset($_SESSION['affiliate']) AND $affiliate = user_load($_SESSION['affiliate'], TRUE)) {
          $order->data['ms_affiliate'] = $affiliate->uid;
        }

        break;

      case 'update':
        ms_core_log('ms_affiliates', 'Ubercart Order Update hook called for action %action . Order Object: !order.',
          array('%action' => $arg2, '!order' => ms_core_print_r($order)));
        if ($arg2 == variable_get('ms_affiliates_uc_commission_grant_op', 'payment_received')) {
          if (!$order->uid) {
            ms_core_log('ms_affiliates', 'No user specified for the order, taking no action.');
            return;
          }

          // Load the accounts.
          $account = user_load($order->uid, TRUE);
          $aid = ms_affiliates_get_affiliate($account->uid);

          if (isset($order->data['ms_affiliate'])) {
            if ($affiliate = user_load($order->data['ms_affiliate'], TRUE) AND !$aid) {
              ms_affiliates_set_affiliate($account, $affiliate);
            }
          } else {
            $affiliate = user_load($aid, TRUE);
          }

          if ($affiliate->uid) {
            $genealogy = ms_affiliates_get_parents($account->uid, variable_get('ms_affiliates_max_levels', 3));

            $amount = $order->order_total;

            // Credit the affiliates.
            ms_affiliates_credit_affiliates($genealogy, $amount, 0, $order->order_id, t('Ubercart Purchase'), 'ubercart', 'Order # ' . $order->order_id);
          } else {
            ms_core_log('ms_affiliates', 'Unable to determine the affiliate for the customer. No commission was granted.');
            return;
          }
        }
        break;
    }
  }
}

/**
 * Implements hook_ms_order_payment_total().
 */
function ms_affiliates_ms_order_payment_total($type, $order, MsPayment $payment) {
  $account = user_load($order->uid, TRUE);

  switch ($payment->type) {
    case 'rec_signup':
    case 'cart':
      if (!isset($account->affiliate_aid) AND isset($order->data['affiliate_aid'])) {
        ms_affiliates_save_referral_helper($account, $order->data['affiliate_aid']);
        $account = user_load($order->uid, TRUE);
        $account->affiliate_aid = $order->data['affiliate_aid'];
      }
      break;
  }

  if (!isset($account->affiliate_aid)) {
    ms_core_log('ms_affiliates', 'No Affiliate set, so unable to act on a !type payment. Here are the details: Payment: !payment Order: !order',
      array(
        '!type' => $type,
        '!payment' => ms_core_print_r($payment),
        '!order' => ms_core_print_r($order))
    );
    return;
  }

  $affiliate = user_load($account->affiliate_aid);

  ms_core_log('ms_affiliates', 'Acting on a !type payment. Here are the details: Payment: !payment Order: !order',
    array(
      '!type' => $type,
      '!payment' => ms_core_print_r($payment),
      '!order' => ms_core_print_r($order))
  );

  if ($affiliate->uid) {
    $pay_once = ms_core_variable_get('ms_affiliates_recurring_one_time', FALSE, $order);

    foreach ($affiliate->roles as $rid => $role_name) {
      if (ms_core_variable_get('ms_affiliates_use_role_specific_commission_' . $rid, FALSE, $order)) {
        if (ms_core_variable_get('ms_affiliates_recurring_one_time_' . $rid, FALSE, $order)) {
          $pay_once = TRUE;
        } else {
          $pay_once = FALSE;
        }
      }
    }

    if ($pay_once) {
      // Check if the affiliate should only be paid one time for a recurring
      // product.
      // Check if the user has already been credited for a membership.
      $result = db_query("SELECT * FROM {ms_affiliates_history} WHERE rid = :rid", array(':rid' => $account->uid));
      foreach ($result as $history_record) {
        if ($affiliate->uid == $history_record->uid) {
          // Stop the credit.
          return FALSE;
        }
      }
    }

    // Get the genealogy of the user.
    $max_levels = ms_core_variable_get('ms_affiliates_max_levels', 3, $order);
    $genealogy = ms_affiliates_get_parents($account->uid, $max_levels);

    $title = ms_core_get_order_title($order);

    // Handle Payments and Refunds.
    switch ($type) {
      case 'rec_payment':
      case 'rec_signup':
      case 'cart':
        // Credit the affiliates.
        ms_affiliates_credit_affiliates($genealogy, $payment->amount, $payment->pid, $order->oid, t('Payment Received'), 'ms_core', $title);
        break;

      case 'refund':
      case 'reversal':
        ms_core_log('ms_affiliates', 'Subtracting Commission from Affiliate Because of Refund');

        // Subtract Commission from the Affiliate.
        ms_affiliates_credit_affiliates($genealogy, $payment->amount, $payment->pid, $order->oid, t('Refunded Payment'), 'ms_core', $title);
        break;

      default:
        ms_core_log('ms_affiliates', 'Not acting on payment type @type', array('@type' => $type));
        break;
    }
  }
}

/**
 * Form constructor for the rebuild affiliate balances form.
 *
 * @see ms_affiliates_rebuild_balances_confirm_submit()
 * @see confirm_form()
 * @ingroup forms
 */
function ms_affiliates_rebuild_balances_confirm($form, &$form_state) {
  return confirm_form($form, t('Are you sure you want to rebuild the user balances?'), 'admin/moneysuite/ms_affiliates', t('This action cannot be undone.'), t('Rebuild'));
}

/**
 * Form submission handler for ms_affiliates_rebuild_balances_confirm().
 */
function ms_affiliates_rebuild_balances_confirm_submit($form, &$form_state) {
  $result = db_query("SELECT * FROM {ms_affiliates_balance}");

  foreach ($result as $aff) {
    if ($account = user_load($aff->uid)) {
      if ($account->af_balance != $aff->balance) {
        ms_affiliates_update_balance($account->uid, $account->af_balance, TRUE);
        drupal_set_message(t("Updated the balance for !name from @old to @new.",
            array('!name' => l($account->name, 'user/' . $account->uid), '@old' => $aff->balance, '@new' => $account->af_balance))
        );
      }
    }
  }

  drupal_set_message(t('Successfully rebuilt the balances for affiliates.'));
  $form_state['redirect'] = 'admin/moneysuite/ms_affiliates';
}

/**
 * Implements hook_views_api().
 */
function ms_affiliates_views_api() {
  return array(
    'api' => '3.0',
  );
}

/**
 * Implements hook_ms_affiliates_commission().
 */
function ms_affiliates_ms_affiliates_commission($commission, $level, $amount, $affiliate) {
  if (module_exists('rules')) {
    rules_invoke_event('ms_affiliates_event_commission_granted', $commission, $level, $amount, $affiliate);
  }
}

/**
 * Implements hook_ms_affiliates_referral().
 */
function ms_affiliates_ms_affiliates_referral($referral, $affiliate) {
  if (module_exists('rules')) {
    rules_invoke_event('ms_affiliates_event_referral_signup', $referral, $affiliate);
  }
}

/**
 * Implements hook_entity_info().
 */
function ms_affiliates_entity_info() {
  return array(
    'ms_affiliates_history' => array(
      'label' => t('Affiliates Suite History'),
      'base table' => 'ms_affiliates_history',
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIController',
      'entity keys' => array(
        'id' => 'id',
      ),
      'fieldable' => FALSE,
      'label callback' => 'ms_affiliates_history_label',
      'module' => 'ms_affiliates',
    ),
  );
}

/**
 * Creates the label for a Gift Card.
 *
 * @param object $entity
 *   The entity order.
 * @param string $entity_type
 *   The entity type.
 *
 * @return string
 *   The label for the gift card.
 */
function ms_affiliates_history_label($entity, $entity_type) {
  $account = user_load($entity->uid);
  return t('History item for @user on @date', array('@user' => $account->name, '@date' => format_date($entity->date, 'short')));
}

/**
 * Implements hook_entity_property_info_alter().
 */
function ms_affiliates_entity_property_info_alter(&$info) {
  $user = & $info['user']['properties'];
  $user['ms_affiliates_mailing_address'] = array(
    'label' => t('Affiliates Suite Mailing Address'),
    'getter callback' => 'ms_affiliates_user_field_getter_callback',
    'entity views field' => TRUE,
    'computed' => TRUE,
  );
  $user['ms_affiliates_mailing_address'] = array(
    'label' => t('Affiliates Suite Mailing Address'),
    'getter callback' => 'ms_affiliates_user_field_getter_callback',
    'entity views field' => TRUE,
    'computed' => TRUE,
  );
  $user['ms_affiliates_paypal_address'] = array(
    'label' => t('Affiliates Suite PayPal E-mail'),
    'getter callback' => 'ms_affiliates_user_field_getter_callback',
    'entity views field' => TRUE,
    'computed' => TRUE,
  );
  $user['af_balance'] = array(
    'label' => t('Affiliates Suite Balance'),
    'getter callback' => 'ms_affiliates_user_field_getter_callback',
    'entity views field' => TRUE,
    'computed' => TRUE,
  );
  $user['affiliate_aid'] = array(
    'type' => 'user',
    'label' => t('Referrer'),
    'getter callback' => 'ms_affiliates_user_field_getter_callback',
    'entity views field' => TRUE,
    'computed' => TRUE,
  );

  $ms_affiliates_history = & $info['ms_affiliates_history']['properties'];
  $ms_affiliates_history['oid']['type'] = 'ms_order';
  $ms_affiliates_history['uid']['type'] = 'user';
  $ms_affiliates_history['rid']['type'] = 'user';
  $ms_affiliates_history['pid']['type'] = 'ms_payment';
  $ms_affiliates_history['date']['type'] = 'date';
  $ms_affiliates_history['type']['options list'] = 'ms_affiliates_get_history_types';
}

/**
 * Gets the history item types.
 *
 * @return array
 */
function ms_affiliates_get_history_types() {
  $types = array(
    'af_credit' => t("Credit"),
    'af_payment' => t("Payout"),
    'paypal_payout' => t("PayPal Payout"),
  );

  drupal_alter('ms_affiliates_history_types', $types);

  return $types;
}

/**
 * Getter callback for affiliate fields on the user object.
 */
function ms_affiliates_user_field_getter_callback($data, array $options, $name, $type, $info) {
  if (!empty($data->$name)) {
    return $data->$name;
  }

  return '';
}