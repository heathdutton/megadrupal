<?php

/**
 * @file
 * MoneySuite Ads module that facilitates the creation of dynamic affiliate
 * ads that include affiliate links and more.
 *
 * Original author: Leighton Whiting - Released under GENERAL PUBLIC LICENSE
 * Current maintenance by multiple MoneySuite users.
 * Re: new initiative: https://www.drupal.org/node/2315653 
 */

/**
 * Implements hook_menu().
 */
function ms_ads_menu() {
  $items = array();

  $items['admin/moneysuite/ms_ads'] = array(
    'title' => 'Affiliate Ads',
    'description' => 'Manage affiliate ads.',
    'page callback' => 'ms_ads_show_ads_page',
    'page arguments' => array('active'),
    'access arguments' => array('view ads'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/moneysuite/ms_ads/list'] = array(
    'title' => 'Affiliate Ads',
    'description' => 'View affiliate ads',
    'page callback' => 'ms_ads_show_ads_page',
    'access arguments' => array('view ads'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/moneysuite/ms_ads/add'] = array(
    'title' => 'Add new ad',
    'description' => 'Add a new affiliate ad.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_ads_ad_form', 'add'),
    'access arguments' => array('manage ads'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );
  $items['admin/moneysuite/ms_ads/edit/%'] = array(
    'title' => 'Edit ad',
    'description' => 'Edit an existing affiliate ad.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_ads_ad_form', 'edit', 4),
    'access arguments' => array('manage ads'),
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );
  $items['admin/moneysuite/ms_ads/delete/%'] = array(
    'title' => 'Delete ad',
    'description' => 'Delete an affiliate ad.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_ads_ad_delete_confirm', 4),
    'access arguments' => array('manage ads'),
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );
  $items['ms_ads/serve/%/%'] = array(
    'page callback' => 'ms_ads_serve_ad',
    'page arguments' => array(2, 3),
    'access arguments' => array('fetch ads'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function ms_ads_permission() {
  return array(
    'fetch ads' => array(
      'title' => t('Fetch Ads'),
      'description' => t('This should always be enabled for anonymous users.'),
    ),
    'manage ads' => array(
      'title' => t('Manage Ads'),
      'description' => t('Administer the ads'),
    ),
    'view ads' => array(
      'title' => t('View Ads'),
      'description' => t('View an overview of all the ads'),
    ),
  );
}

// ======================================
// Pages:
// ======================================


/**
 * Serves an ad
 *
 * @param $uid
 *   The user id
 * @param $id
 *   The id of the ad
 */
function ms_ads_serve_ad($uid, $id) {
  $ad = ms_ads_load_ad($id);
  $account = user_load($uid);

  if ($ad->id AND $account->uid) {
    $html = ms_ads_get_ad_html($account->uid, $ad->id);
    $html .= "<style>#ms_ad_placeholder_$id {display:none;}</style>";
    $html = str_replace(array("\r\n", "\r", "\n", "\t"), '', $html);
    $clean_html = addslashes($html);
    Header("content-type: application/x-javascript");
    print "document.write('$clean_html');";
    return;
  } else {
    drupal_not_found();
  }
}

/**
 * Gets the html for an ad
 *
 * @param $uid
 *   The user id
 * @param $id
 *   The id of the ad
 */
function ms_ads_get_ad_html($uid, $id) {
  $ad = ms_ads_load_ad($id);
  $account = user_load($uid);

  if ($ad->id AND $account->uid) {

    $url = ($ad->url) ? url($ad->url, array('absolute' => TRUE, 'query' => array('an' => urlencode($account->name)))) : url(variable_get('ms_affiliates_af_url', 'af') . '/' . urlencode($account->name), array('absolute' => TRUE));

    $styles = array(
      'font-size' => $ad->size,
      'position' => 'relative',
      'border' => 0,
    );

    if ($ad->font != '0') {
      $styles['font-family'] = $ad->font;
    }
    if ($ad->width) {
      $styles['width'] = $ad->width . 'px';
    }
    if ($ad->height) {
      $styles['min-height'] = $ad->height . 'px';
    }
    if ($ad->color) {
      $styles['color'] = $ad->color;
    }
    if ($ad->background) {
      $styles['background-color'] = $ad->background;
    }

    $bottom_text = '';
    if ($ad->bottom) {
      $bottom_text = $ad->bottom;
      $bottom_text = token_replace($bottom_text, array(
        'ms_affiliate_email' => $account,
        'user' => $account,
      ));
      $bottom_text = nl2br($bottom_text);
    }

    $link_styles = array(
      'position' => 'absolute',
      'z-index' => '999',
      'cursor' => 'pointer',
      'top' => '0',
      'left' => '0',
      'height' => '100%',
      'width' => '100%',
      'border' => 0,
    );

    if ($ad->width) {
      $link_styles['width'] = $ad->width . 'px';
    }
    if ($ad->height) {
      $link_styles['height'] = $ad->height . 'px';
    }

    if ($ad->file) {
      $file = file_load($ad->file);

      switch ($ad->type) {
        case 'image':
          $image_path = file_create_url($file->uri);

          return theme('ms_image_ad', array('ad' => $ad, 'account' => $account, 'url' => $url, 'styles' => $styles, 'link_styles' => $link_styles, 'text' => $bottom_text, 'image_path' => $image_path, 'class' => $ad->class));

        case 'swf':
          $flash_path = file_create_url($file->uri);
          return theme('ms_flash_ad', array('ad' => $ad, 'account' => $account, 'url' => $url, 'styles' => $styles, 'link_styles' => $link_styles, 'text' => $bottom_text, 'flash_path' => $flash_path, 'class' => $ad->class));
      }
    } else {
      return theme('ms_text_ad', array('ad' => $ad, 'account' => $account, 'url' => $url, 'styles' => $styles, 'link_styles' => $link_styles, 'text' => $bottom_text, 'class' => $ad->class));
    }
  }

  return '';
}

/**
 * Helper function that gets an ad's html code
 */
function ms_ads_get_ad_code($uid, $id) {
  $ad = ms_ads_load_ad($id);

  $html = "<!-- Begin Ad Code -->";
  // Put in the actual ad as the placeholder
  $ad_html = ms_ads_get_ad_html($uid, $id);
  $html .= "
<div id='ms_ad_placeholder_$id'>$ad_html</div>";

  // If the ad delivery_type is dynamic, include the javascript
  if ($ad->delivery_type == 'dynamic') {
    $html .= "
<script type='text/javascript' src='" . url('ms_ads/serve/' . $uid . '/' . $id, array('absolute' => TRUE)) . "'></script>";
  }

  $html .= "
<!-- End Ad Code -->";
  return $html;
}

/**
 * Show all of the affiliate ads
 */
function ms_ads_show_ads_page() {
  global $user;
  $output = '';
  $headers = array(
    array(
      'data' => t('Name'),
      'class' => 'ms_ads_name_header',
    ),
    array(
      'data' => t('Type'),
      'class' => 'ms_ads_type_header',
    ),
    array(
      'data' => t('Code'),
      'class' => 'ms_ads_code_header',
    ),
    array(
      'data' => t('Preview'),
      'class' => 'ms_ads_preview_header',
    ),
    array(
      'data' => t('Actions'),
      'class' => 'ms_ads_actions_header',
    ),
  );

  $query = db_select('ms_ads', 'a');
  $query->fields('a');
  if (!empty($_GET['class'])) {
    $query->condition('a.class', check_plain($_GET['class']), 'LIKE');
  }
  $query = $query->extend('TableSort')->orderByHeader($headers);
  $query = $query->extend('PagerDefault')->limit(20);

  // execute the query
  $result = $query->execute();

  $rows = array();
  $attr = array('id' => 'ms-ads-table');
  foreach ($result as $ad) {
    $actions = array();

    $actions[] = l(t('Edit'), 'admin/moneysuite/ms_ads/edit/' . $ad->id);
    $actions[] = l(t('Remove'), 'admin/moneysuite/ms_ads/delete/' . $ad->id);

    $rows[] = array(
      array(
        'data' => $ad->name,
        'class' => 'ms_ads_name',
      ),
      array(
        'data' => $ad->type . ' - ' . $ad->delivery_type,
        'class' => 'ms_ads_type',
      ),
      array(
        'data' => "<textarea>" . ms_ads_get_ad_code($user->uid, $ad->id) . "</textarea>",
        'class' => 'ms_ads_code',
      ),
      array(
        'data' => ms_ads_get_ad_code($user->uid, $ad->id),
        'class' => 'ms_ads_preview',
      ),
      array(
        'data' => implode(' | ', $actions),
        'class' => 'ms_ads_actions',
      ),
    );
  }

  $output .= theme('table', array('header' => $headers, 'rows' => $rows, 'attributes' => $attr, 'empty' => t('No ads.')));
  $output .= theme('pager', array('tags' => NULL, 'element' => 0));
  return $output;
}

// ======================================
// FORMS:
// ======================================


/**
 * Build function for the coupon template form
 */
function ms_ads_ad_form($form, $form_state, $action, $id = 0) {
  $edit = FALSE;
  $ad = NULL;
  if ($action == 'edit') {
    $edit = TRUE;
    $ad = ms_ads_load_ad($id);
    $form['ad_id'] = array(
      '#type' => 'value',
      '#value' => $ad->id,
    );
  }

  $form['#attributes'] = array('enctype' => "multipart/form-data");

  // Add Farbtastic color picker
  drupal_add_css('misc/farbtastic/farbtastic.css');
  drupal_add_js('misc/farbtastic/farbtastic.js');

  $form['main'] = array(
    '#type' => 'fieldset',
    '#title' => t('Ad Settings'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );

  $form['main']['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Ad Name'),
    '#default_value' => ($edit) ? $ad->name : '',
    '#size' => 32,
    '#required' => TRUE,
  );
  $form['main']['description'] = array(
    '#type' => 'textarea',
    '#title' => t('Description'),
    '#default_value' => ($edit) ? $ad->description : '',
    '#required' => FALSE,
  );
  $form['main']['class'] = array(
    '#type' => 'textfield',
    '#title' => t('Class'),
    '#description' => t("Specify a class/category for this ad. This will be added to the class attribute tag of the ad if applicable."),
    '#default_value' => ($edit) ? $ad->class : '',
    '#size' => 32,
    '#required' => FALSE,
  );
  $form['main']['delivery_type'] = array(
    '#type' => 'radios',
    '#title' => t('Ad Delivery Type'),
    '#default_value' => ($edit) ? $ad->delivery_type : 'dynamic',
    '#options' => array(
      'dynamic' => t('Dynamic'),
      'static' => t('Static'),
    ),
    '#description' => t("Select the delivery method for this ad. Both options are good for SEO, as search engines will follow the links in the ads to your site, providing SEO value for you.<br />
    Dynamic: This is the option with the simplest and shortest code.
    All ads will be controlled by your settings, so your ads will be modified for all your affiliates when you decide it.
    Search engines will follow the original links when the ad was copied and pasted.<br />
    Static: This option can be helpful if you have load or performance concerns regarding your ads, as your affiliates' sites will only download an static file from your site per visit(or even nothing at all if it is a text ad). The down side to static ads is that you can't modify them once your affiliates place them on their website."),
    '#required' => TRUE,
  );
  $form['main']['link'] = array(
    '#type' => 'checkbox',
    '#title' => t('Make Linked Ad?'),
    '#description' => t('Click this to make the ad be linked with the user affiliate link.'),
    '#default_value' => ($edit) ? $ad->link : 0,
  );
  $form['main']['url'] = array(
    '#type' => 'textfield',
    '#title' => t('Link URL'),
    '#description' => t("If this ad is a link, specify the url here. Leave blank to link to the default affiliate page set in Affiliates Suite."),
    '#default_value' => ($edit) ? $ad->url : '',
  );
  $form['main']['alt'] = array(
    '#type' => 'textfield',
    '#title' => t('Alt Text'),
    '#default_value' => ($edit) ? $ad->alt : '',
    '#size' => 32,
    '#description' => t('If this ad is an image type, specify the alt text.'),
    '#required' => FALSE,
  );

  $form['main']['layout-settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Layout Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['main']['layout-settings']['width'] = array(
    '#type' => 'textfield',
    '#title' => t('Width'),
    '#default_value' => ($edit) ? $ad->width : 0,
    '#size' => 32,
    '#description' => t('Specify the width of the ad.'),
    '#required' => TRUE,
  );
  $form['main']['layout-settings']['height'] = array(
    '#type' => 'textfield',
    '#title' => t('Height'),
    '#default_value' => ($edit) ? $ad->height : 0,
    '#size' => 32,
    '#description' => t('Specify the height of the ad. Use 0 for no height limit.'),
    '#required' => FALSE,
  );
  $form['main']['layout-settings']['background'] = array(
    '#type' => 'textfield',
    '#title' => t('Background Color'),
    '#default_value' => ($edit) ? $ad->background : '#ffffff',
    '#size' => 32,
    '#description' => t('Specify the background color of the ad. Leave blank for no background color.'),
    '#required' => FALSE,
  );

  $form['main']['layout-settings']['background_picker'] = array(
    '#type' => 'item',
    '#description' => "<div id='bgcolorpicker'></div><script type='text/javascript'>
    $(document).ready(function() {
      $('#bgcolorpicker').farbtastic('#edit-background');
    });
    </script>",
  );

  $form['main']['font-settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Font Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['main']['font-settings']['font'] = array(
    '#type' => 'select',
    '#title' => t('Font Family'),
    '#default_value' => ($edit) ? $ad->font : 0,
    '#options' => ms_ads_get_fonts_list(),
    '#description' => t('Select which font to use with this ad.'),
    '#required' => FALSE,
  );
  $form['main']['font-settings']['size'] = array(
    '#type' => 'textfield',
    '#title' => t('Font Size'),
    '#default_value' => ($edit) ? $ad->size : 12,
    '#size' => 32,
    '#description' => t('Specify the size of the font used in the ad.'),
    '#required' => TRUE,
  );
  $form['main']['font-settings']['color'] = array(
    '#type' => 'textfield',
    '#title' => t('Font Color'),
    '#default_value' => ($edit) ? $ad->color : '#000000',
    '#size' => 32,
    '#description' => t('Specify the color of the text used in the ad. Leave blank for no set color (site default).'),
    '#required' => FALSE,
  );
  $form['main']['font-settings']['color_picker'] = array(
    '#type' => 'item',
    '#description' => "<div id='fontcolorpicker'></div><script type='text/javascript'>
    $(document).ready(function() {
      $('#fontcolorpicker').farbtastic('#edit-color');
    });
    </script>",
  );

  $form['main']['content-settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Content Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['main']['content-settings']['type'] = array(
    '#type' => 'radios',
    '#title' => t('Ad Type'),
    '#default_value' => ($edit) ? $ad->type : 'text',
    '#options' => array(
      'text' => t('Text'),
      'image' => t('Image'),
      'swf' => t('SWF'),
    ),
    '#description' => t('Select which type of content this ad will use.'),
    '#required' => TRUE,
  );
  if ($edit AND $ad->file) {
    $file = file_load($ad->file);
    $form['main']['content-settings']['file'] = array(
      '#type' => 'item',
      '#title' => t('File'),
      '#value' => $file->filename,
    );
    $form['main']['content-settings']['delete_file'] = array(
      '#type' => 'checkbox',
      '#title' => t('Delete File'),
      '#default_value' => 0,
    );
  } else {
    $form['main']['content-settings']['upload_file'] = array(
      '#type' => 'file',
      '#title' => t('Upload a new file'),
      '#size' => 32,
      '#description' => t("The max upload filesize as set by your server is: %filesize. See <a href='http://drupal.org/node/109994'>here</a> for more information on changing your upload limit.",
        array('%filesize' => round(file_upload_max_size() / 1000000) . ' MB')),
      '#required' => FALSE,
    );
  }

  $form['main']['content-settings']['bottom'] = array(
    '#type' => 'textarea',
    '#title' => t('Text'),
    '#default_value' => ($edit) ? $ad->bottom : '',
    '#description' => t('Enter the text you wish to appear in the ad.'),
    '#required' => FALSE,
  );
  $form['main']['content-settings']['bottom_token_help']['tokens'] = array(
    '#theme' => 'token_tree',
    '#token_types' => array('ms_affiliate_email', 'user'),
    '#dialog' => TRUE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  $form_state['#redirect'] = 'admin/moneysuite/ms_ads';

  return $form;
}

/**
 * Submit function for the coupon template form
 */
function ms_ads_ad_form_submit($form, &$form_state) {
  if (isset($form_state['values']['ad_id'])) {
    $ad = ms_ads_load_ad($form_state['values']['ad_id']);

    if ($form_state['values']['delete_file']) {
      $file = file_load($ad->file);
      $ad->file = 0;
      if ($file) {
        file_delete($file);
        drupal_set_message(t('File %file has been removed.', array('%file' => $file->filename)));
      }
    } elseif (!$ad->file AND $form_state['values']['type'] != 'text') {
      $dir = ms_ads_get_default_directory();
      if (file_prepare_directory($dir, FILE_CREATE_DIRECTORY)) {
        if ($file = file_save_upload('upload_file', array(), $dir)) {
          drupal_set_message(t('The file %file was successfully uploaded to %dir', array('%file' => $file->filename, '%dir' => $dir)));
          $file->status = 1;
          $file = file_save($file); // Mark the file as permanent

          $ad->file = $file->fid;
        } else {
          drupal_set_message(t('Error uploading file %file to %dir', array('%file' => $file->filename, '%dir' => $dir)), 'error');
        }
      } else {
        drupal_set_message(t('The directory %dir is not accessible', array('%dir' => $dir)), 'error');
      }
    }

    foreach ($form_state['values'] as $key => $value) {
      $ad->$key = $value;
    }

    // Write the record
    drupal_write_record('ms_ads', $ad, 'id');

    drupal_set_message(t('Successfully updated the ad. Note that all existing implementations of this ad will reflect the change.'));
  } else {
    $ad = new stdClass();

    if ($form_state['values']['type'] == 'text') {
      $ad->file = 0;
    } else {
      $dir = ms_ads_get_default_directory();
      if (file_prepare_directory($dir, FILE_CREATE_DIRECTORY)) {
        if ($file = file_save_upload('upload_file', array(), $dir)) {
          drupal_set_message(t('The file %file was successfully uploaded to %dir', array('%file' => $file->filename, '%dir' => $dir)));
          $file->status = 1;
          $file = file_save($file); // Mark the file as permanent

          $ad->file = $file->fid;
        } else {
          drupal_set_message(t('Error uploading file %file to %dir', array('%file' => $file->filename, '%dir' => $dir)), 'error');
        }
      } else {
        drupal_set_message(t('The directory %dir is not accessible', array('%dir' => $dir)), 'error');
      }
    }

    foreach ($form_state['values'] as $key => $value) {
      $ad->$key = $value;
    }

    // Write the record
    drupal_write_record('ms_ads', $ad);

    drupal_set_message(t('Successfully created a new ad.'));
  }
}

/**
 * Delete ad confirm form.
 */
function ms_ads_ad_delete_confirm($form, &$form_state, $id) {
  $ad = ms_ads_load_ad($id);
  $form['#ms_ad_id'] = $ad->id;
  return confirm_form($form, t('Are you sure you want to delete this ad?'), 'admin/moneysuite/ms_ads', t('This action cannot be undone. In addition, all implementations of this ad will cease functioning.'), t('Delete'));
}

/**
 * Delete the ad.
 */
function ms_ads_ad_delete_confirm_submit($form, &$form_state) {
  $ad = ms_ads_load_ad($form['#ms_ad_id']);

  db_delete('ms_ads')
    ->condition('id', $ad->id)
    ->execute();

  drupal_set_message(t('Ad Template and all associated affiliate ads have been deleted.'));
  $form_state['redirect'] = 'admin/moneysuite/ms_ads';
}

/**
 * Get the default ms ads directory
 */
function ms_ads_get_default_directory() {
  return variable_get('ms_ads_default_directory', 'public://ms_ads');
}

/**
 * Get a list of the fonts
 */
function ms_ads_get_fonts_list() {
  $fonts = array(
    '0' => t('None'),
    "Impact, Charcoal, sans-serif" => 'Impact',
    "Palatino Linotype, Book Antiqua, Palatino, serif" => 'Palatino Linotype',
    "Tahoma, Geneva, sans-serif" => 'Tahoma',
    "Century Gothic, sans-serif" => 'Century Gothic',
    "Lucida Sans Unicode, Lucida Grande, sans-serif" => 'Lucida Sans Unicode',
    "Arial Black, Gadget, sans-serif" => 'Arial Black',
    "Times New Roman, Times, serif" => 'Times New Roman',
    "Arial Narrow, sans-serif" => 'Arial Narrow',
    "Verdana, Geneva, sans-serif" => 'Verdana',
    "Copperplate / Copperplate Gothic Light, sans-serif" => 'Copperplate Gothic Light',
    "Lucida Console, Monaco, monospace;" => 'Lucida Console',
    "Gill Sans / Gill Sans MT, sans-serif" => 'Gill Sans',
    "Trebuchet MS, Helvetica, sans-serif" => 'Trebuchet MS',
    "Courier New, Courier, monospace" => 'Courier New',
    "Arial, Helvetica, sans-serif" => 'Arial',
    "Georgia, Serif" => 'Georgia',
  );

  $list = array();

  foreach ($fonts as $font => $name) {
    $list[$font] = $name;
  }

  return $list;
}

/**
 * Get a list of the ads
 */
function ms_ads_get_ads() {
  $ads = array();

  $query = db_select('ms_ads', 'a')
    ->fields('a');

  if (!empty($_GET['class'])) {
    $query->condition('a.class', check_plain($_GET['class']), 'LIKE');
  }

  $result = $query->execute();

  foreach ($result as $ad) {
    $ads[$ad->id] = $ad;
  }

  return $ads;
}

/**
 * Load an affiliate ad object
 */
function ms_ads_load_ad($id) {
  $result = db_query("SELECT * FROM {ms_ads} WHERE id = :id", array(':id' => $id));

  foreach ($result as $row) {
    return $row;
  }

  return FALSE;
}

/**
 * Implementation of hook_ms_affiliates_dashboard()
 */
function ms_ads_ms_affiliates_dashboard($account) {
  $ads = ms_ads_get_ads();
  $extras = array();

  if (!empty($ads)) {
    $output = '';

    $headers = array(
      array(
        'data' => t('Description'),
        'class' => 'ms_ads_description_header',
      ),
      array(
        'data' => t('Preview'),
        'class' => 'ms_ads_preview_header',
      ),
      array(
        'data' => t('Code'),
        'class' => 'ms_ads_code_header',
      ),
    );

    $rows = array();
    $attr = array('id' => 'ms-af-ads-table');
    foreach ($ads as $ad) {
      $code = ms_ads_get_ad_code($account->uid, $ad->id);

      $rows[] = array(
        array(
          'data' => "<h4>" . $ad->name . "</h4>" . $ad->description,
          'class' => 'ms_ads_description',
        ),
        array(
          'data' => $code,
          'class' => 'ms_ads_preview',
        ),
        array(
          'data' => "<textarea>$code</textarea>",
          'class' => 'ms_ads_code',
        ),
      );
    }

    $output .= theme('table', array('header' => $headers, 'rows' => $rows, 'attributes' => $attr, 'empty' => t('None.')));

    $extras[] = array(
      'title' => t('Affiliate Ads'),
      'body' => $output,
    );
  }

  return $extras;
}


/**
 * Implements hook_theme().
 */
function ms_ads_theme($existing, $type, $theme, $path) {

  return array(
    'ms_image_ad' => array(
      'template' => 'ms-image-ad',
      'path' => $path . '/templates',
      'variables' => array(
        'ad' => NULL,
        'account' => NULL,
        'url' => NULL,
        'styles' => NULL,
        'link_styles' => NULL,
        'text' => NULL,
        'image_path' => NULL,
        'class' => NULL,
      ),
    ),
    'ms_flash_ad' => array(
      'template' => 'ms-flash-ad',
      'path' => $path . '/templates',
      'variables' => array(
        'ad' => NULL,
        'account' => NULL,
        'url' => NULL,
        'styles' => NULL,
        'link_styles' => NULL,
        'text' => NULL,
        'flash_path' => NULL,
        'class' => NULL,
      ),
    ),
    'ms_text_ad' => array(
      'template' => 'ms-text-ad',
      'path' => $path . '/templates',
      'variables' => array(
        'ad' => NULL,
        'account' => NULL,
        'url' => NULL,
        'styles' => NULL,
        'link_styles' => NULL,
        'text' => NULL,
        'class' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_entity_info().
 */
function ms_ads_entity_info() {
  return array(
    'ms_ad' => array(
      'label' => t('MS Ad'),
      'base table' => 'ms_ads',
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIController',
      'entity keys' => array(
        'id' => 'id',
      ),
      'fieldable' => FALSE,
      'module' => 'ms_ads',
    ),
  );
}

/**
 * Implements hook_entity_property_info_alter().
 */
function ms_ads_entity_property_info_alter(&$info) {
  $ms_ad = & $info['ms_ad']['properties'];

  $ms_ad['link']['type'] = 'boolean';
  $ms_ad['size']['type'] = 'decimal';
  $ms_ad['width']['type'] = 'decimal';
  $ms_ad['height']['type'] = 'decimal';
}
