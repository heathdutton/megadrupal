<?php

/**
 * Implements hook_install().
 */
function ms_core_install() {
  // Populate the Countries and Regions tables.
  _ms_core_import_countries_regions();
}

/**
 * Implements hook_uninstall().
 */
function ms_core_uninstall() {
  // Delete related variables all at once.
  db_delete('variable')
    ->condition('name', 'ms_core_%%', 'LIKE')
    ->execute();
}

/**
 * Implements hook_schema().
 */
function ms_core_schema() {
  $schema['ms_orders'] = array(
    'description' => 'Used to hold orders',
    'fields' => array(
      'oid' => array(
        'type' => 'serial',
        'description' => 'The unique Order ID (primary)',
        'not null' => TRUE,
      ),
      'uid' => array(
        'type' => 'int',
        'description' => 'The User ID',
        'disp_width' => '11',
        'not null' => TRUE,
        'default' => 0,
      ),
      'order_key' => array(
        'type' => 'varchar',
        'description' => 'Key for this order',
        'length' => '32',
        'not null' => TRUE,
        'default' => '',
      ),
      'status' => array(
        'type' => 'varchar',
        'description' => 'Status of the Order',
        'length' => '32',
        'not null' => TRUE,
        'default' => '',
      ),
      'order_type' => array(
        'type' => 'varchar',
        'description' => 'Cart, Recurring',
        'length' => '32',
        'not null' => TRUE,
        'default' => '',
      ),
      'gateway' => array(
        'type' => 'varchar',
        'description' => 'Which Gateway was used',
        'length' => '64',
        'not null' => TRUE,
        'default' => '',
      ),
      'amount' => array(
        'type' => 'numeric',
        'description' => 'The amount to be paid',
        'not null' => TRUE,
        'default' => 0,
        'precision' => '10',
        'scale' => '2',
      ),
      'total' => array(
        'type' => 'numeric',
        'description' => 'The total amount that has been paid for the order',
        'not null' => TRUE,
        'default' => 0,
        'precision' => '10',
        'scale' => '2',
      ),
      'currency' => array(
        'type' => 'varchar',
        'description' => 'The Currency Code used for the order',
        'length' => '32',
        'not null' => TRUE,
        'default' => '',
      ),
      'recurring_schedule' => array(
        'type' => 'text',
        'description' => 'Serialized Array of the recurring schedule',
        'serialize' => TRUE,
      ),
      'first_name' => array(
        'type' => 'varchar',
        'description' => 'First Name of the Purchaser',
        'length' => '64',
        'not null' => TRUE,
        'default' => '',
      ),
      'last_name' => array(
        'type' => 'varchar',
        'description' => 'Last Name of the Purchaser',
        'length' => '64',
        'not null' => TRUE,
        'default' => '',
      ),
      'email_address' => array(
        'type' => 'varchar',
        'description' => 'Email Address of the Purchaser',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'shipping_address' => array(
        'type' => 'text',
        'description' => 'The shipping address',
        'serialize' => TRUE,
      ),
      'billing_address' => array(
        'type' => 'text',
        'description' => 'The billing address',
        'serialize' => TRUE,
      ),
      'data' => array(
        'type' => 'text',
        'description' => 'The data that is stored with the order',
        'serialize' => TRUE,
      ),
      'created' => array(
        'type' => 'int',
        'description' => 'When the order was created',
        'disp_width' => '11',
        'not null' => TRUE,
        'default' => 0,
      ),
      'modified' => array(
        'type' => 'int',
        'description' => 'When the order was modified',
        'disp_width' => '11',
        'not null' => TRUE,
        'default' => 0,
      ),
      'unique_key' => array(
        'type' => 'varchar',
        'description' => 'Unique Identifier for this order',
        'length' => '64',
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'primary key' => array('oid'),
  );

  $schema['ms_core_order_history'] = array(
    'description' => 'History of the order',
    'fields' => array(
      'id' => array(
        'description' => 'The ID.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'oid' => array(
        'description' => 'The order ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'uid' => array(
        'description' => 'The user ID who made the change.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'hidden' => array(
        'description' => 'Whether the history item should show for regular users',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'status' => array(
        'description' => 'The status the order had when the comment was made.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'message' => array(
        'description' => 'Message applied to the history item',
        'type' => 'text',
      ),
      'created' => array(
        'type' => 'int',
        'description' => 'Timestamp of when the comment was created.',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array(
      'oid' => array('oid'),
    ),
    'primary key' => array('id'),
  );

  $schema['ms_recurring_schedules'] = array(
    'description' => 'Used to hold recurring schedules',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'description' => 'The unique ID (primary)',
        'not null' => TRUE,
      ),
      'oid' => array(
        'description' => 'The order ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'pid' => array(
        'description' => 'The product ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'status' => array(
        'type' => 'varchar',
        'description' => 'Status of the Recurring Schedule',
        'length' => '32',
        'not null' => TRUE,
        'default' => '',
      ),
      'module' => array(
        'type' => 'varchar',
        'description' => 'Which Module was used',
        'length' => '64',
        'not null' => TRUE,
        'default' => '',
      ),
      'gateway' => array(
        'type' => 'varchar',
        'description' => 'Which Gateway was used',
        'length' => '64',
        'not null' => TRUE,
        'default' => '',
      ),
      'main_amount' => array(
        'type' => 'numeric',
        'description' => 'The Regular Fee',
        'precision' => '10',
        'scale' => '2',
        'not null' => TRUE,
      ),
      'main_length' => array(
        'type' => 'int',
        'description' => 'The Regular Period Length',
        'not null' => TRUE,
      ),
      'main_unit' => array(
        'type' => 'varchar',
        'description' => 'The Regular Period Unit',
        'length' => '128',
      ),
      'trial_amount' => array(
        'type' => 'numeric',
        'description' => 'The Trial Fee',
        'precision' => '10',
        'scale' => '2',
        'not null' => TRUE,
      ),
      'trial_length' => array(
        'type' => 'int',
        'description' => 'The Trial Period Length',
        'not null' => TRUE,
      ),
      'trial_unit' => array(
        'type' => 'varchar',
        'description' => 'The Trial Period Unit',
        'length' => '128',
      ),
      'total_occurrences' => array(
        'type' => 'int',
        'description' => 'The Number of Payments',
        'not null' => TRUE,
      ),
      'next_payment' => array(
        'type' => 'int',
        'description' => 'When will the next payment be processed',
        'disp_width' => '11',
        'not null' => TRUE,
        'default' => 0,
      ),
      'current_payments' => array(
        'type' => 'int',
        'description' => 'How many payments have been completed',
        'disp_width' => '11',
        'not null' => TRUE,
        'default' => 0,
      ),
      'created' => array(
        'type' => 'int',
        'description' => 'When the order was created',
        'disp_width' => '11',
        'not null' => TRUE,
        'default' => 0,
      ),
      'expiration' => array(
        'type' => 'int',
        'description' => 'When the recurring schedule will expire',
        'disp_width' => '11',
        'not null' => TRUE,
        'default' => 0,
      ),
      'modified' => array(
        'type' => 'int',
        'description' => 'When the order was modified',
        'disp_width' => '11',
        'not null' => TRUE,
        'default' => 0,
      ),
      'failed_payments' => array(
        'description' => 'The number of failed payments in a row',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'notified' => array(
        'description' => t('Whether the payment notification has been sent.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('id'),
  );

  $schema['ms_order_products'] = array(
    'description' => 'The items that have been ordered.',
    'fields' => array(
      'order_product_id' => array(
        'description' => 'The unique product ID.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'oid' => array(
        'description' => 'The order ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'type' => array(
        'description' => 'The Product Type (recurring/cart).',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'uid' => array(
        'description' => t('The user id who owns the products.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ),
      'id' => array(
        'description' => 'The item ID in the respective module.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'name' => array(
        'description' => 'The product title.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'module' => array(
        'description' => 'The product module.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'qty' => array(
        'description' => 'The number of the same product ordered.',
        'type' => 'int',
        'size' => 'small',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'amount' => array(
        'description' => 'The amount of money for the product.',
        'type' => 'numeric',
        'precision' => 16,
        'scale' => 5,
        'not null' => TRUE,
        'default' => 0.0,
      ),
      'recurring_schedule' => array(
        'type' => 'text',
        'description' => 'Serialized Array of the recurring schedule',
        'serialize' => TRUE,
      ),
      'data' => array(
        'description' => 'Serialized array of extra data.',
        'type' => 'text',
        'serialize' => TRUE,
      ),
    ),
    'indexes' => array(
      'oid' => array('oid'),
    ),
    'primary key' => array('order_product_id'),
  );

  $schema['ms_order_adjustments'] = array(
    'description' => 'Order adjustments',
    'fields' => array(
      'adjustment_id' => array(
        'description' => 'The adjustment ID.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'oid' => array(
        'description' => 'The order ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'product_id' => array(
        'description' => t('The product id associated with the adjustment.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'id' => array(
        'description' => 'The identifier string of the adjustment.',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
      ),
      'type' => array(
        'description' => 'The Adjustment Type (percentage/fixed).',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'scope' => array(
        'description' => 'Whether the adjustment should apply to whole order or just first payment',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => 'recurring',
      ),
      'display' => array(
        'description' => 'The label of the adjustment.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'value' => array(
        'description' => 'The value of the adjustment.',
        'type' => 'numeric',
        'precision' => 16,
        'scale' => 5,
        'not null' => TRUE,
        'default' => 0.0,
      ),
      'weight' => array(
        'description' => 'How early to process the adjustment',
        'type' => 'int',
        'size' => 'small',
        'not null' => TRUE,
        'default' => 0,
      ),
      'active' => array(
        'description' => t('Whether the adjustment is active.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => 1,
      ),
      'optional' => array(
        'description' => t('Whether the adjustment is optional.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => 0,
      ),
      'data' => array(
        'description' => 'Serialized array of extra data.',
        'type' => 'text',
        'serialize' => TRUE,
      ),
    ),
    'indexes' => array(
      'oid' => array('oid'),
    ),
    'primary key' => array('adjustment_id'),
  );

  $schema['ms_cart_products'] = array(
    'fields' => array(
      'cart_product_id' => array(
        'description' => 'Unique identifier for cart product.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'cart_id' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '0',
      ),
      'type' => array(
        'description' => 'The Product Type (recurring/cart).',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'uid' => array(
        'description' => t('The user id who owns the products.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ),
      'id' => array(
        'description' => 'The item ID in the respective module.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'name' => array(
        'description' => 'The product title.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'module' => array(
        'description' => 'The product module.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'qty' => array(
        'description' => 'The number of the same product ordered.',
        'type' => 'int',
        'size' => 'small',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'amount' => array(
        'description' => 'The amount of money for the product.',
        'type' => 'numeric',
        'precision' => 16,
        'scale' => 5,
        'not null' => TRUE,
        'default' => 0.0,
      ),
      'recurring_schedule' => array(
        'type' => 'text',
        'description' => 'Serialized Array of the recurring schedule',
        'serialize' => TRUE,
      ),
      'changed' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'data' => array(
        'type' => 'text',
        'serialize' => TRUE,
      ),
    ),
    'indexes' => array(
      'cart_id' => array('cart_id'),
    ),
    'primary key' => array('cart_product_id'),
  );

  $schema['ms_cart_adjustments'] = array(
    'description' => 'Cart adjustments',
    'fields' => array(
      'adjustment_id' => array(
        'description' => 'The adjustment ID.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'cart_id' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '0',
      ),
      'product_id' => array(
        'description' => t('The product id associated with the adjustment.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'id' => array(
        'description' => 'The identifier string of the adjustment.',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
      ),
      'type' => array(
        'description' => 'The Adjustment Type (percentage/fixed).',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'scope' => array(
        'description' => 'Whether the adjustment should apply to whole order or just first payment',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => 'recurring',
      ),
      'display' => array(
        'description' => 'The label of the adjustment.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'value' => array(
        'description' => 'The value of the adjustment.',
        'type' => 'numeric',
        'precision' => 16,
        'scale' => 5,
        'not null' => TRUE,
        'default' => 0.0,
      ),
      'weight' => array(
        'description' => 'How early to process the adjustment',
        'type' => 'int',
        'size' => 'small',
        'not null' => TRUE,
        'default' => 0,
      ),
      'active' => array(
        'description' => t('Whether the adjustment is active.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => 1,
      ),
      'optional' => array(
        'description' => t('Whether the adjustment is optional.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => 0,
      ),
      'data' => array(
        'description' => 'Serialized array of extra data.',
        'type' => 'text',
        'serialize' => TRUE,
      ),
    ),
    'indexes' => array(
      'cart_id' => array('cart_id'),
    ),
    'primary key' => array('adjustment_id'),
  );

  $schema['ms_payments'] = array(
    'description' => 'Used to hold payments',
    'fields' => array(
      'pid' => array(
        'type' => 'serial',
        'description' => 'The unique Payment ID (primary)',
        'not null' => TRUE,
      ),
      'oid' => array(
        'type' => 'int',
        'description' => 'The Order ID',
        'disp_width' => '11',
        'not null' => TRUE,
        'default' => 0,
      ),
      'type' => array(
        'type' => 'varchar',
        'description' => 'The Type of Payment',
        'length' => '32',
        'not null' => TRUE,
      ),
      'transaction' => array(
        'type' => 'varchar',
        'description' => 'Transaction ID',
        'length' => '128',
        'not null' => TRUE,
      ),
      'recurring_id' => array(
        'type' => 'varchar',
        'description' => 'Recurring ID',
        'length' => '128',
      ),
      'gateway' => array(
        'type' => 'varchar',
        'description' => 'Which Gateway was used',
        'length' => '64',
        'not null' => TRUE,
      ),
      'amount' => array(
        'type' => 'numeric',
        'description' => 'The amount that was paid',
        'not null' => TRUE,
        'precision' => '10',
        'scale' => '2',
      ),
      'currency' => array(
        'type' => 'varchar',
        'description' => 'The Currency Code used for the payment',
        'length' => '32',
        'not null' => TRUE,
      ),
      'data' => array(
        'type' => 'text',
        'description' => 'The data that is stored with the payment from the gateway',
        'serialize' => TRUE,
      ),
      'created' => array(
        'type' => 'int',
        'description' => 'When the payment was created',
        'disp_width' => '11',
        'not null' => TRUE,
        'default' => 0,
      ),
      'modified' => array(
        'type' => 'int',
        'description' => 'When the payment was modified',
        'disp_width' => '11',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('pid'),
  );

  $schema['ms_core_countries'] = array(
    'description' => 'Used to hold countries',
    'fields' => array(
      'iso' => array(
        'type' => 'char',
        'description' => 'The ISO code for the country',
        'not null' => TRUE,
        'length' => '2',
      ),
      'name' => array(
        'type' => 'varchar',
        'description' => 'The name of the country',
        'length' => '80',
      ),
      'numcode' => array(
        'type' => 'int',
        'description' => 'The Number Code for the Country',
        'disp_width' => '11',
      ),
      'currency' => array(
        'type' => 'varchar',
        'description' => 'The currency of the country',
        'length' => '3',
      ),
    ),
    'primary key' => array('iso'),
  );
  $schema['ms_core_regions'] = array(
    'description' => 'Used to hold regions',
    'fields' => array(
      'code' => array(
        'type' => 'char',
        'description' => 'The code for the region',
        'length' => '2',
      ),
      'name' => array(
        'type' => 'varchar',
        'description' => 'The name of the region',
        'length' => '80',
      ),
      'numcode' => array(
        'type' => 'int',
        'description' => 'The Number Code for the Country',
        'disp_width' => '11',
      ),
    ),
  );
  $schema['ms_core_payment_profiles'] = array(
    'description' => 'Used to hold Customer Payment Profiles',
    'fields' => array(
      'id' => array(
        'description' => 'The unique ID.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'remote_id' => array(
        'description' => 'Remote ID',
        'type' => 'varchar',
        'length' => 255,
        'default' => '',
      ),
      'uid' => array(
        'description' => 'The user ID',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'oid' => array(
        'description' => 'The order ID',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'module' => array(
        'type' => 'varchar',
        'description' => 'The module this payment profile is associated with.',
        'length' => '128',
        'not null' => TRUE,
        'default' => '',
      ),
      'status' => array(
        'description' => 'The status of the Payment Profile',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'first_name' => array(
        'description' => 'First Name',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'last_name' => array(
        'description' => 'Last Name',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'address' => array(
        'description' => 'Address',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'city' => array(
        'description' => 'City',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
      ),
      'state' => array(
        'description' => 'State ISO2',
        'type' => 'varchar',
        'length' => 16,
        'not null' => TRUE,
        'default' => '',
      ),
      'zip' => array(
        'description' => 'Zip',
        'type' => 'varchar',
        'length' => 16,
        'not null' => TRUE,
        'default' => '',
      ),
      'country' => array(
        'description' => 'Country ISO2',
        'type' => 'varchar',
        'length' => 16,
        'not null' => TRUE,
        'default' => '',
      ),
      'phone' => array(
        'description' => 'Phone',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'fax' => array(
        'description' => 'Fax',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'email' => array(
        'description' => 'Email',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'cc_type' => array(
        'description' => 'CC Type',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'cc_num' => array(
        'description' => 'Last 4 Digits of Card Number',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'exp_month' => array(
        'description' => 'Expiration Month of the Card',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'exp_year' => array(
        'description' => 'Expiration Year of the Card',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'notified' => array(
        'description' => t('Whether the payment notification has been sent.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array(
      'uid' => array('uid'),
    ),
    'primary key' => array('id'),
  );

  return $schema;
}

// ======================================
// Updates:
// ======================================
/**
 * Add the scope field to the adjustments database
 */
function ms_core_update_7100(&$sandbox) {
  if (!db_field_exists('ms_order_adjustments', 'scope')) {
    db_add_field('ms_order_adjustments', 'scope', array(
      'description' => 'Whether the adjustment should apply to whole order or just first payment',
      'type' => 'varchar',
      'length' => 32,
      'not null' => TRUE,
      'default' => 'recurring',
    ));
    db_add_field('ms_cart_adjustments', 'scope', array(
      'description' => 'Whether the adjustment should apply to whole order or just first payment',
      'type' => 'varchar',
      'length' => 32,
      'not null' => TRUE,
      'default' => 'recurring',
    ));
  }
  return t('Successfully added a scope column to the cart and order adjustment database tables.');
}

/**
 * Add the total field to the ms_orders database
 */
function ms_core_update_7101(&$sandbox) {
  if (!db_field_exists('ms_orders', 'total')) {
    db_add_field('ms_orders', 'total', array(
      'type' => 'numeric',
      'description' => 'The total amount that has been paid for the order',
      'not null' => TRUE,
      'default' => 0,
      'precision' => '10',
      'scale' => '2',
    ));
  }
  return t('Successfully added the total column to the ms_orders database table.');
}

/**
 * Add the order_key field to the ms_orders database
 */
function ms_core_update_7102(&$sandbox) {
  if (!db_field_exists('ms_orders', 'order_key')) {
    db_add_field('ms_orders', 'order_key', array(
      'type' => 'varchar',
      'description' => 'Key for this order',
      'length' => '32',
      'not null' => TRUE,
      'default' => '',
    ));

    // Populate the order_key of existing orders
    $result = db_query("SELECT oid FROM {ms_orders}");
    foreach ($result as $row) {
      $key = ms_core_generate_order_key();
      db_update('ms_orders')
        ->fields(array(
          'order_key' => $key,
        ))
        ->condition('oid', $row->oid)
        ->execute();
    }
  }
  return t('Successfully added the order_key column to the ms_orders database table.');
}


/**
 * Add the first_name, last_name, and email_address fields to the database
 */
function ms_core_update_7103(&$sandbox) {
  // Add new fields to the database
  if (!db_field_exists('ms_orders', 'first_name')) {
    db_add_field('ms_orders', 'first_name', array(
      'type' => 'varchar',
      'description' => 'First Name of the Purchaser',
      'length' => '64',
      'not null' => TRUE,
      'default' => '',
    ));
    db_add_field('ms_orders', 'last_name', array(
      'type' => 'varchar',
      'description' => 'Last Name of the Purchaser',
      'length' => '64',
      'not null' => TRUE,
      'default' => '',
    ));
    db_add_field('ms_orders', 'email_address', array(
      'type' => 'varchar',
      'description' => 'Email Address of the Purchaser',
      'length' => '255',
      'not null' => TRUE,
      'default' => '',
    ));

    // Populate the first_name and last_name and email_address of existing orders
    $result = db_query("SELECT * FROM {ms_orders}");
    foreach ($result as $row) {
      $last_name = '';
      $email = '';

      $name = explode(' ', $row->full_name);
      $first_name = $name[0];
      unset($name[0]);

      if (is_array($name)) {
        $last_name = implode(' ', $name);
      }

      if ($row->uid) {
        $account = user_load($row->uid);
        $email = $account->mail;
      }

      db_update('ms_orders')
        ->fields(array(
          'first_name' => $first_name,
          'last_name' => $last_name,
          'email_address' => $email,
        ))
        ->condition('oid', $row->oid)
        ->execute();
    }
  }

  return t('Successfully added the first_name, last_name, and email_address columns to the ms_orders database table.');
}

/**
 * Remove the full_name field from the database
 */
function ms_core_update_7104(&$sandbox) {
  db_drop_field('ms_orders', 'full_name');

  return t('Successfully dropped the full_name column from the ms_orders database table.');
}

/**
 * Add the notified field to the ms_recurring_schedules table
 */
function ms_core_update_7105(&$sandbox) {
  if (!db_field_exists('ms_recurring_schedules', 'notified')) {
    db_add_field('ms_recurring_schedules', 'notified', array(
      'description' => t('Whether the payment notification has been sent.'),
      'type' => 'int',
      'unsigned' => TRUE,
      'not null' => TRUE,
      'default' => 0,
    ));

    db_update('ms_recurring_schedules')
      ->fields(array(
        'notified' => 1,
      ))
      ->execute();
  }

  return t('Successfully added the notified field to the ms_recurring_schedules database table.');
}

/**
 * Change the product id tables to use varchar
 */
function ms_core_update_7106(&$sandbox) {
  db_query("ALTER TABLE {ms_order_products} MODIFY id VARCHAR(100)");
  db_query("ALTER TABLE {ms_cart_products} MODIFY id VARCHAR(100)");

  return t('Successfully changed the id field to varchar.');
}

/**
 * Add the uid field to the ms_cart_products table
 */
function ms_core_update_7201(&$sandbox) {
  if (!db_field_exists('ms_cart_products', 'uid')) {
    db_add_field('ms_cart_products', 'uid', array(
      'description' => t('The user id who owns the products.'),
      'type' => 'int',
      'unsigned' => TRUE,
      'not null' => TRUE,
      'default' => 1,
    ));
  }

  return t('Successfully added the uid field to the ms_cart_products database table.');
}

/**
 * Add the uid field to the ms_order_products table
 */
function ms_core_update_7202(&$sandbox) {
  if (!db_field_exists('ms_order_products', 'uid')) {
    db_add_field('ms_order_products', 'uid', array(
      'description' => t('The user id who owns the products.'),
      'type' => 'int',
      'unsigned' => TRUE,
      'not null' => TRUE,
      'default' => 1,
    ));
  }

  return t('Successfully added the uid field to the ms_order_products database table.');
}

/**
 * Change the product id tables to use varchar 128
 */
function ms_core_update_7203(&$sandbox) {
  db_query("ALTER TABLE {ms_order_products} MODIFY id VARCHAR(128)");
  db_query("ALTER TABLE {ms_cart_products} MODIFY id VARCHAR(128)");

  return t('Successfully changed the id field to varchar 128.');
}

/**
 * Add the remote_id field to the ms_core_payment_profiles table
 */
function ms_core_update_7204(&$sandbox) {
  if (!db_field_exists('ms_core_payment_profiles', 'remote_id')) {
    db_add_field('ms_core_payment_profiles', 'remote_id', array(
      'description' => 'Remote ID',
      'type' => 'varchar',
      'length' => 255,
      'default' => '',
    ));
  }

  return t('Successfully added the remote_id field to the ms_core_payment_profiles database table.');
}

/**
 * Update permissions to access checkout page
 */
function ms_core_update_7205(&$sandbox) {
  $result = db_query("SELECT * FROM {role_permission} WHERE permission = :perm", array(':perm' => 'access content'));

  foreach ($result as $row) {
    db_merge('role_permission')
      ->key(array(
        'rid' => $row->rid,
        'permission' => 'access checkout page',
      ))
      ->fields(array(
        'module' => 'ms_core',
      ))
      ->execute();
  }

  // Clear the user access cache.
  drupal_static_reset('user_access');
  drupal_static_reset('user_role_permissions');

  return t('Updated permissions to access checkout page.');
}

/**
 * Add the product_id fields
 */
function ms_core_update_7206(&$sandbox) {
  if (!db_field_exists('ms_order_adjustments', 'product_id')) {
    db_add_field('ms_order_adjustments', 'product_id', array(
      'description' => t('The product id associated with the adjustment.'),
      'type' => 'int',
      'unsigned' => TRUE,
      'not null' => FALSE,
      'default' => NULL,
    ));
  }

  if (!db_field_exists('ms_cart_adjustments', 'product_id')) {
    db_add_field('ms_cart_adjustments', 'product_id', array(
      'description' => t('The product id associated with the adjustment.'),
      'type' => 'int',
      'unsigned' => TRUE,
      'not null' => FALSE,
      'default' => NULL,
    ));
  }

  return t('Added the product_id fields.');
}

/**
 * Add the active and optional fields to adjustments.
 */
function ms_core_update_7301(&$sandbox) {
  if (!db_field_exists('ms_order_adjustments', 'active')) {
    db_add_field('ms_order_adjustments', 'active', array(
      'description' => t('Whether the adjustment is active.'),
      'type' => 'int',
      'unsigned' => TRUE,
      'not null' => FALSE,
      'default' => 1,
    ));
    db_add_field('ms_order_adjustments', 'optional', array(
      'description' => t('Whether the adjustment is optional.'),
      'type' => 'int',
      'unsigned' => TRUE,
      'not null' => FALSE,
      'default' => 0,
    ));
  }

  if (!db_field_exists('ms_cart_adjustments', 'active')) {
    db_add_field('ms_cart_adjustments', 'active', array(
      'description' => t('Whether the adjustment is active.'),
      'type' => 'int',
      'unsigned' => TRUE,
      'not null' => FALSE,
      'default' => 1,
    ));
    db_add_field('ms_cart_adjustments', 'optional', array(
      'description' => t('Whether the adjustment is optional.'),
      'type' => 'int',
      'unsigned' => TRUE,
      'not null' => FALSE,
      'default' => 0,
    ));
  }

  return t('Added the optional and active fields for adjustments.');
}

/**
 * Create the new tables for countries and regions.
 */
function ms_core_update_7302(&$sandbox) {
  $schema['ms_core_countries'] = array(
    'description' => 'Used to hold countries',
    'fields' => array(
      'iso' => array(
        'type' => 'char',
        'description' => 'The ISO code for the country',
        'not null' => TRUE,
        'length' => '2',
      ),
      'name' => array(
        'type' => 'varchar',
        'description' => 'The name of the country',
        'length' => '80',
      ),
      'numcode' => array(
        'type' => 'int',
        'description' => 'The Number Code for the Country',
        'disp_width' => '11',
      ),
      'currency' => array(
        'type' => 'varchar',
        'description' => 'The currency of the country',
        'length' => '3',
      ),
    ),
    'primary key' => array('iso'),
  );
  $schema['ms_core_regions'] = array(
    'description' => 'Used to hold regions',
    'fields' => array(
      'code' => array(
        'type' => 'char',
        'description' => 'The code for the region',
        'length' => '2',
      ),
      'name' => array(
        'type' => 'varchar',
        'description' => 'The name of the region',
        'length' => '80',
      ),
      'numcode' => array(
        'type' => 'int',
        'description' => 'The Number Code for the Country',
        'disp_width' => '11',
      ),
    ),
  );

  // First, drop the old table.
  db_drop_table('ms_core_countries');

  // Then create the new tables.
  if (!db_table_exists('ms_core_countries')) {
    db_create_table('ms_core_countries', $schema['ms_core_countries']);
  }
  if (!db_table_exists('ms_core_regions')) {
    db_create_table('ms_core_regions', $schema['ms_core_regions']);
  }
}

/**
 * Import the countries and regions.
 */
function ms_core_update_7303(&$sandbox) {
  db_truncate('ms_core_countries')->execute();
  db_truncate('ms_core_regions')->execute();

  // Now import the data.
  _ms_core_import_countries_regions();
}

/**
 * Update payment types.
 */
function ms_core_update_7304(&$sandbox) {
  db_update('ms_payments')
    ->fields(array(
      'type' => 'refund',
    ))
    ->condition('type', 'rec_refund')
    ->execute();
  db_update('ms_payments')
    ->fields(array(
      'type' => 'failed',
    ))
    ->condition('type', 'rec_failed')
    ->execute();
  db_update('ms_payments')
    ->fields(array(
      'type' => 'reversal',
    ))
    ->condition('type', 'rec_reversal')
    ->execute();
}

/**
 * Add the pid field to ms_recurring_schedules table.
 */
function ms_core_update_7305(&$sandbox) {
  if (!db_field_exists('ms_recurring_schedules', 'pid')) {
    db_add_field('ms_recurring_schedules', 'pid', array(
      'description' => 'The product ID.',
      'type' => 'int',
      'unsigned' => TRUE,
      'not null' => FALSE,
    ));
  }

  return t('Added the pid field to the ms_recurring_schedules table.');
}

/**
 * Remove the recurring_schedule and secured fields.
 */
function ms_core_update_7306(&$sandbox) {
  if (db_field_exists('ms_payments', 'recurring_schedule')) {
    db_drop_field('ms_payments', 'recurring_schedule');
  }
  if (db_field_exists('ms_orders', 'secured')) {
    db_drop_field('ms_orders', 'secured');
  }

  return t('Removed the recurring_schedule and secured fields.');
}

/**
 * Remove duplicate recurring_schedule records.
 *
 * Due to a bug in the new multi_recurring feature, there is a chance there could be duplicate recurring_schedule
 * records for recurring orders. We remove any duplicates here.
 */
function ms_core_update_7307(&$sandbox) {
  $result = db_query("SELECT * FROM {ms_recurring_schedules} a
INNER JOIN (SELECT oid FROM {ms_recurring_schedules}
GROUP BY oid HAVING count(id) > 1) dup ON a.oid = dup.oid WHERE a.status = :status", array(':status' => 'active'));

  $all = array();
  foreach ($result as $row) {
    $all[$row->oid][$row->id] = $row;
  }
  foreach ($all as $records) {
    array_pop($records);
    foreach ($records as $row) {
      db_update('ms_recurring_schedules')
        ->fields(array(
          'status' => 'inactive',
        ))
        ->condition('id', $row->id)
        ->execute();
    }
  }
}

/**
 * Add a notified field for payment profiles.
 */
function ms_core_update_7308(&$sandbox) {
  db_add_field('ms_core_payment_profiles', 'notified', array(
    'description' => t('Whether the payment notification has been sent.'),
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'default' => 0,
  ));
}

/**
 * Imports the countries and regions.
 */
function _ms_core_import_countries_regions() {
  module_load_include('inc', 'ms_core', 'ms_core.countries');
  $countries = _ms_core_get_countries_data();

  foreach ($countries as $raw_values) {
    $map = array('name', 'iso', 'numcode', 'currency');
    $country = array_combine($map, $raw_values);
    db_insert('ms_core_countries')
      ->fields($country)
      ->execute();
  }

  module_load_include('inc', 'ms_core', 'ms_core.regions');
  $regions = _ms_core_get_regions_data();

  foreach ($regions as $raw_values) {
    $map = array('name', 'code', 'numcode');
    $region = array_combine($map, $raw_values);
    db_insert('ms_core_regions')
      ->fields($region)
      ->execute();
  }
}

/**
 * Make sure there aren't any old tokens from Drupal 6.
 */
function ms_core_update_7309(&$sandbox) {
  if (function_exists('token_update_token_text')) {
    $replacements = array(
      'userName' => 'user:name',
    );
    $variables = array();
    $messages = array();

    $settings_functions = module_invoke_all('ms_core_overrides');

    if (is_array($settings_functions) && !empty($settings_functions)) {
      foreach ($settings_functions as $module => $info) {
        if (function_exists($module . '_token_info')) {
          $tokens_info = call_user_func($module . '_token_info');

          foreach ($tokens_info['tokens'] as $type => $tokens) {
            foreach ($tokens as $token_key => $token_info) {
              $replacements[$token_key] = $type . ':' . $token_key;
            }
          }
        }

        $t_form_state = form_state_defaults();
        if (!empty($info['params'])) {
          $t_form_state['build_info']['args'] = $info['params'];
        }
        $module_form = drupal_retrieve_form($info['form'], $t_form_state);

        $settings = array();
        _ms_core_extract_token_variables($module_form, $settings);

        if (!empty($settings)) {
          foreach ($settings as $key => $element) {
            $variables[] = $key;
          }
        }
      }
    }

    $variables_count = 0;

    foreach ($variables as $variable) {
      if ($string = variable_get($variable, '')) {
        $new_string = token_update_token_text($string, $replacements);
        if ($new_string != $string) {
          variable_set($variable, $new_string);
          $variables_count += 1;
        }
      }
    }

    $messages[] = t('Updated tokens in @count variables.', array('@count' => $variables_count));

    // Now we need to update all of the overridden settings in the orders.
    $result = db_select('ms_orders', 'o')
      ->fields('o')
      ->execute();

    $orders_count = 0;
    foreach ($result as $order) {
      $order->data = unserialize($order->data);
      $changed = FALSE;
      if (!empty($order->data['override_settings'])) {
        foreach ($order->data['override_settings'] as $key => &$string) {
          if (in_array($key, $variables)) {
            $new_string = token_update_token_text($string, $replacements);
            if ($new_string != $string) {
              $string = $new_string;
              $changed = TRUE;
            }
          }
        }
      }

      if ($changed) {
        db_update('ms_orders')
          ->fields(array(
            'data' => $order->data,
          ))
          ->condition('oid', $order->oid)
          ->execute();
        $orders_count += 1;
      }
    }

    $messages[] = t('Updated tokens in override settings of @count orders.', array('@count' => $orders_count));

    return implode('<br />', $messages);
  } else {
    throw new DrupalUpdateException('There was an error updating the tokens. You may need to perform the update manually.');
  }
}

/**
 * Recursively extracts the textarea form elements.
 */
function _ms_core_extract_token_variables($parent, &$settings) {
  foreach (element_children($parent) as $child_name) {
    if (!empty($parent[$child_name]['#type']) && $parent[$child_name]['#type'] == 'textarea') {
      $settings[$child_name] = $parent[$child_name];
    }
    _ms_core_extract_token_variables($parent[$child_name], $settings);
  }
}