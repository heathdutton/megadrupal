<?php

/**
 * @file
 * MoneySuite Coupons
 *
 * Adds the ability to create Coupons, which are codes which can be entered on
 * the checkout and cart pages to receive discounts. Coupons can be set to only
 * work for certain users, roles, or products. You can also set various price
 * thresholds for the coupons.
 *
 * Original author: Leighton Whiting - Released under GENERAL PUBLIC LICENSE
 * Current maintenance by multiple MoneySuite users.
 * Re: new initiative: https://www.drupal.org/node/2315653 
 */

/**
 * Implements hook_help().
 */
function ms_coupons_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/moneysuite/ms_coupons":
    case "admin/help#ms_coupons":
      $output .= '<p>' . t("MoneySuite Coupons Module. This allows you to create Coupon Codes
      that can be entered by a customer at checkout to receive a discount. The discount can be a fixed amount or
      a percentage.") . '</p>';
      break;
  }
  return $output;
}


/**
 * Implements hook_init().
 */
function ms_coupons_init() {
  // Add a coupon to the cart if set in url.
  if (!empty($_GET['coupon'])) {
    $coupon = ms_coupons_load($_GET['coupon']);
    if ($coupon) {
      ms_coupons_add_coupon_to_cart($coupon);
    }
  }
}

/**
 * Implements hook_menu().
 */
function ms_coupons_menu() {
  $items = array();

  $items['admin/moneysuite/ms_coupons'] = array(
    'title' => 'Coupons',
    'description' => 'Manage discount coupons.',
    'page callback' => 'ms_coupons_display',
    'page arguments' => array('active'),
    'access arguments' => array('view coupons'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/moneysuite/ms_coupons/list'] = array(
    'title' => 'Active coupons',
    'description' => 'View active coupons.',
    'page callback' => 'ms_coupons_display',
    'page arguments' => array('active'),
    'access arguments' => array('view coupons'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/moneysuite/ms_coupons/inactive'] = array(
    'title' => 'Inactive coupons',
    'description' => 'View inactive coupons.',
    'page callback' => 'ms_coupons_display',
    'page arguments' => array('inactive'),
    'access arguments' => array('view coupons'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/moneysuite/ms_coupons/settings'] = array(
    'title' => 'Coupon Settings',
    'description' => 'Manage Coupon Settings here',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_coupons_admin'),
    'access arguments' => array('administer moneysuite settings'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/moneysuite/ms_coupons/add'] = array(
    'title' => 'Add new coupon',
    'description' => 'Add a new coupon.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_coupons_add_form', 'add'),
    'access arguments' => array('manage coupons'),
    'type' => MENU_LOCAL_ACTION,
    'weight' => 10,
  );
  $items['admin/moneysuite/ms_coupons/edit/%'] = array(
    'title' => 'Edit coupon',
    'description' => 'Edit an existing coupon.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_coupons_add_form', 'edit', 4),
    'access arguments' => array('manage coupons'),
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );
  $items['admin/moneysuite/ms_coupons/delete/%'] = array(
    'title' => 'Delete coupon',
    'description' => 'Delete a coupon.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_coupons_delete_confirm', 4),
    'access arguments' => array('manage coupons'),
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );

  return $items;
}

/**
 * Form constructor for the admin settings form.
 *
 * @see system_settings_form()
 */
function ms_coupons_admin($form, &$form_state) {
  $form['main'] = array(
    '#type' => 'fieldset',
    '#title' => t('Main Settings'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['main']['ms_coupons_enforce_single_coupon_per_cart'] = array(
    '#type' => 'checkbox',
    '#title' => t('Force one coupon max per cart?'),
    '#default_value' => variable_get('ms_coupons_enforce_single_coupon_per_cart', TRUE),
    '#description' => t("If this is checked, only one coupon will be allowed per
      cart, with the latest one overriding older ones."),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_permission().
 */
function ms_coupons_permission() {
  return array(
    'view coupons' => array(
      'title' => t('view coupons'),
      'description' => t('View all of the available coupons.'),
      'restrict access' => TRUE,
    ),
    'manage coupons' => array(
      'title' => t('manage coupons'),
      'description' => t('Add, edit and delete coupons.'),
      'restrict access' => TRUE,
    ),
  );
}


/**
 * Displays a brief overview of the coupons.
 *
 * @param string $view_type
 *   (optional) An argument to filter out active/inactive coupons. Defaults to
 *   'active'.
 */
function ms_coupons_display($view_type = 'active') {
  $header[] = array(
    'data' => t('Name'),
    'field' => 'name',
  );
  $header[] = array(
    'data' => t('Code'),
    'field' => 'code',
    'sort' => 'asc',
  );
  $header[] = array(
    'data' => t('Value'),
    'field' => 'value',
  );
  $header[] = array(
    'data' => t('Scope'),
    'field' => 'scope',
  );
  $header[] = array(
    'data' => t('Valid until'),
    'field' => 'valid_until',
  );
  $header[] = array(
    'data' => t('Usage'),
    'field' => 'used',
  );
  $header[] = array('data' => t('Actions'));

  $query = db_select('ms_coupons', 'c');
  $query->fields('c', array('cid', 'name', 'value', 'used', 'scope', 'code', 'type', 'valid_until'));
  $query->condition('c.status', $view_type == 'inactive' ? 0 : 1, '=');

  $query = $query->extend('TableSort')->orderByHeader($header);
  $query = $query->extend('PagerDefault')->limit(20);
  $result = $query->execute();

  $rows = array();
  foreach ($result as $row) {
    if ($row->type == 'percentage') {
      $value = $row->value . '%';
    } else {
      $value = ms_core_format_money($row->value);
    }

    $code = $row->code;
    $actions = l(t('edit'), "admin/moneysuite/ms_coupons/edit/" . $row->cid);

    $actions .= ' ' . l(t('delete'), "admin/moneysuite/ms_coupons/delete/" . $row->cid);

    $rows[] = array(
      $row->name,
      $code,
      $value,
      ms_core_get_scope_name($row->scope),
      format_date($row->valid_until, 'small'),
      $row->used,
      $actions,
    );
  }

  if (count($rows)) {
    $output = theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('width' => '100%'), 'empty' => t('No coupons.')));
    $output .= theme('pager', array('tags' => NULL));
  } else {
    $output = '<p>' . t('There are currently no !type coupons in the system.', array('!type' => $view_type)) . '</p>';
  }

  return $output;
}

/**
 * Gets all of the possible coupon types.
 *
 * @return array
 */
function ms_coupons_get_types() {
  return array(
    'percentage' => 'Percentage',
    'fixed' => 'Fixed Value',
  );
}

/**
 * Form constructor for the add coupon form.
 *
 * @param string $action
 *   Form action, edit or add. 'edit' loads default values.
 * @param int $cid
 *   (optional) The coupon id if this is an edit coupon form.
 *
 * @see ms_coupons_add_form_validate()
 * @see ms_coupons_add_form_submit()
 * @ingroup forms
 */
function ms_coupons_add_form($form, &$form_state, $action, $cid = NULL) {
  if ($action == 'edit') {
    $coupon = ms_coupons_load($cid);
    $value = $coupon;
    $form['#ms_coupons_cid'] = $value->cid;
    $form['#ms_coupons'] = $value;
    $used = $coupon->used;
  } else {
    $value = new stdClass;
    $value->valid_until = REQUEST_TIME;
    $value->minimum_order = 0;
    $value->max_uses = 0;
    $value->name = '';
    $value->code = '';
    $value->scope = 'recurring';
    $value->status = '';
    $value->type = '';
    $value->minimum_order = '';
    $value->value = '';
    $used = 0;
  }

  $value->valid_until = array(
    'year' => format_date($value->valid_until, 'custom', 'Y'),
    'month' => format_date($value->valid_until, 'custom', 'n'),
    'day' => format_date($value->valid_until, 'custom', 'j'),
  );

  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Coupon name'),
    '#default_value' => $value->name,
    '#required' => TRUE,
  );

  $form['code'] = array(
    '#type' => 'textfield',
    '#title' => t('Coupon code'),
    '#description' => t('Coupon codes cannot be changed once they have been used in an order.'),
    '#default_value' => $value->code,
    '#size' => 25,
    '#required' => !$used,
    '#maxlength' => 14,
  );
  if ($value->code AND $used) {
    $form['code']['#attributes'] = array('readonly' => 'readonly');
  }

  $form['valid_until'] = array(
    '#type' => 'date',
    '#title' => t('Expiry date'),
    '#default_value' => $value->valid_until,
    '#required' => TRUE,
  );

  $form['status'] = array(
    '#type' => 'checkbox',
    '#title' => t('Active'),
    '#description' => t('Check to enable the coupon, uncheck to disable the coupon.'),
    '#default_value' => $value->status,
  );

  $form['type'] = array(
    '#type' => 'select',
    '#title' => t('Discount type'),
    '#default_value' => $value->type,
    '#options' => ms_coupons_get_types(),
  );

  $form['scope'] = array(
    '#type' => 'radios',
    '#title' => t('Scope'),
    '#required' => TRUE,
    '#default_value' => $value->scope,
    '#options' => ms_core_get_scopes(),
    '#description' => t('Whether the coupon should affect the first payment only or all payments. Only applies for Recurring Payments.'),
  );

  $form['value'] = array(
    '#type' => 'textfield',
    '#title' => t('Discount value'),
    '#default_value' => $value->value,
    '#size' => 10,
    '#description' => t('Enter values without symbols, for 15%, enter "15" and choose Percentage as the discount type.'),
    '#required' => TRUE,
  );

  $form['minimum_order'] = array(
    '#type' => 'textfield',
    '#title' => t('Minimum order limit'),
    '#default_value' => $value->minimum_order,
    '#size' => 10,
    '#description' => t('A minimum order total that applies to the coupon, or 0 for no minimum order limit.'),
    '#required' => TRUE,
  );

  $form['max_uses'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum number of redemptions (per code)'),
    '#default_value' => $value->max_uses,
    '#description' => t('Enter the maximum number of times each code for this coupon can be used, or 0 for unlimited.'),
    '#size' => 5,
    '#required' => TRUE,
  );

  $form['max_uses_per_user'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum number of redemptions (per user)'),
    '#default_value' => isset($value->data['max_uses_per_user']) ? $value->data['max_uses_per_user'] : 0,
    '#description' => t('Enter the maximum number of times this coupon can be used by a single user, or 0 for unlimited.'),
    '#size' => 5,
    '#required' => TRUE,
  );

  $form['users'] = array(
    '#type' => 'fieldset',
    '#title' => t('User restrictions'),
    '#description' => t('Enter one or more user names and/or "anonymous users" below to make this coupon valid only for those users.'),
    '#tree' => TRUE,
    '#collapsible' => TRUE,
    '#collapsed' => !isset($value->data['users']),
  );

  if (isset($value->data['users'])) {
    foreach ($value->data['users'] as $username) {
      $form['users'][] = array(
        '#type' => 'textfield',
        '#default_value' => $username,
        '#autocomplete_path' => 'ms_core/autocomplete/user',
      );
    }
  }

  for ($i = 0; $i < 3; $i++) {
    $form['users'][] = array(
      '#type' => 'textfield',
      '#autocomplete_path' => 'ms_core/autocomplete/user',
    );
  }

  $form['roles'] = array(
    '#type' => 'fieldset',
    '#title' => t('Role restrictions'),
    '#description' => t('Enter one or more role names below to make this coupon valid only for users with those roles.'),
    '#tree' => TRUE,
    '#collapsible' => TRUE,
    '#collapsed' => !isset($value->data['roles']),
  );

  if (isset($value->data['roles'])) {
    foreach ($value->data['roles'] as $role) {
      $form['roles'][] = array(
        '#type' => 'textfield',
        '#default_value' => $role,
        '#autocomplete_path' => 'ms_core/autocomplete/role',
      );
    }
  }

  for ($i = 0; $i < 3; $i++) {
    $form['roles'][] = array(
      '#type' => 'textfield',
      '#autocomplete_path' => 'ms_core/autocomplete/role',
    );
  }

  $form['products'] = array(
    '#type' => 'fieldset',
    '#title' => t('Product restrictions'),
    '#description' => t('Enter one or more products below to make this coupon valid only for those products. Just enter the product name and it will be auto-completed.'),
    '#tree' => TRUE,
    '#collapsible' => TRUE,
    '#collapsed' => !isset($value->data['products']),
  );
  if (isset($value->data['products'])) {
    foreach ($value->data['products'] as $id) {
      $form['products'][] = array(
        '#type' => 'textfield',
        '#default_value' => $id,
        '#autocomplete_path' => 'ms_core/autocomplete/product',
      );
    }
  }
  for ($i = 0; $i < 3; $i++) {
    $form['products'][] = array(
      '#type' => 'textfield',
      '#autocomplete_path' => 'ms_core/autocomplete/product',
    );
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  return $form;
}

/**
 * Gets a list of the coupons that are active.
 */
function ms_coupons_get_coupons_list() {
  $coupons = array();
  $result = db_query("SELECT * FROM {ms_coupons} WHERE status = :status", array(':status' => 1));

  foreach ($result as $row) {
    $coupons[$row->cid] = $row->name;
  }

  return $coupons;
}

/**
 * Form validation handler for ms_coupons_add_form().
 *
 * @see ms_coupons_add_form_submit().
 */
function ms_coupons_add_form_validate($form, &$form_state) {
  // Ensure a unique coupon code.
  if ($coupon = ms_coupons_find($form_state['values']['code'])) {
    if ($coupon->cid != $form['#ms_coupons_cid']) {
      form_set_error('code', t('Coupon code already used by %name.', array('%name' => $coupon->name)));
    }
  }
}

/**
 * Form submission_handler for ms_coupons_add_form().
 *
 * @see ms_coupons_add_form_validate()
 */
function ms_coupons_add_form_submit($form, &$form_state) {
  $code = strtoupper($form_state['values']['code']);
  $valid_until = mktime(0, 0, 0, $form_state['values']['valid_until']['month'], $form_state['values']['valid_until']['day'], $form_state['values']['valid_until']['year']);
  $data = array();

  if ($form_state['values']['max_uses_per_user']) {
    $data['max_uses_per_user'] = $form_state['values']['max_uses_per_user'];
  }

  foreach ($form_state['values']['users'] as $username) {
    $data['users'][] = $username;
  }

  foreach ($form_state['values']['roles'] as $role) {
    if ($role) {
      $data['roles'][] = $role;
    }
  }

  foreach ($form_state['values']['products'] as $id) {
    if ($id) {
      $data['products'][] = $id;
    }
  }

  if (!isset($form['#ms_coupons_cid'])) {
    // Only set bulk coupon seed once.
    db_insert('ms_coupons')
      ->fields(array(
        'name' => $form_state['values']['name'],
        'code' => $code,
        'value' => floatval($form_state['values']['value']),
        'type' => $form_state['values']['type'],
        'scope' => $form_state['values']['scope'],
        'status' => $form_state['values']['status'],
        'valid_until' => $valid_until,
        'max_uses' => $form_state['values']['max_uses'],
        'minimum_order' => $form_state['values']['minimum_order'],
        'data' => serialize($data),
      ))
      ->execute();
    drupal_set_message(t('Coupon %name has been created.', array('%name' => $form_state['values']['name'])));
  } else {
    db_update('ms_coupons')
      ->fields(array(
        'name' => $form_state['values']['name'],
        'code' => $code,
        'value' => floatval($form_state['values']['value']),
        'type' => $form_state['values']['type'],
        'scope' => $form_state['values']['scope'],
        'status' => $form_state['values']['status'],
        'valid_until' => $valid_until,
        'max_uses' => $form_state['values']['max_uses'],
        'minimum_order' => $form_state['values']['minimum_order'],
        'data' => serialize($data),
      ))
      ->condition('cid', $form['#ms_coupons_cid'])
      ->execute();
    drupal_set_message(t('Coupon %name has been updated.', array('%name' => $form_state['values']['name'])));
  }

  $form_state['redirect'] = 'admin/moneysuite/ms_coupons' . ($form_state['values']['status'] ? '' : '/inactive');
}

/**
 * Loads a coupon object from the database.
 *
 * @param int $cid
 *   Unique coupon ID.
 *
 * @return object|false
 *   A coupon object.
 */
function ms_coupons_load($cid) {
  $coupon = db_query("SELECT * FROM {ms_coupons} WHERE cid = :cid", array(':cid' => $cid))->fetchObject();
  if ($coupon->data) {
    $coupon->data = unserialize($coupon->data);
  }
  return $coupon;
}

/**
 * Form constructor for the delete coupon form.
 *
 * @param int $cid
 *   Coupon ID.
 *
 * @see ms_coupons_delete_confirm_submit()
 * @ingroup forms
 */
function ms_coupons_delete_confirm($form, &$form_state, $cid) {
  $coupon = ms_coupons_load($cid);
  $form['#ms_coupons_cid'] = $coupon->cid;
  return confirm_form($form, t('Are you sure you want to delete coupon %name with code %code?', array('%name' => $coupon->name, '%code' => $coupon->code)), 'admin/moneysuite/ms_coupons', t('This action cannot be undone. Deleting this coupon will remove all records of past uses as well.'), t('Delete'));
}

/**
 * Form submission handler for ms_coupons_delete_confirm().
 */
function ms_coupons_delete_confirm_submit($form, &$form_state) {
  $coupon = ms_coupons_load($form['#ms_coupons_cid']);

  db_delete('ms_coupons')
    ->condition('cid', $form['#ms_coupons_cid'])
    ->execute();

  drupal_set_message(t('Coupon %name has been deleted.', array('%name' => $coupon->name)));
  $form_state['redirect'] = 'admin/moneysuite/ms_coupons' . ($coupon->status ? '' : '/inactive');
}

/**
 * Loads a coupon from the supplied code.
 *
 * @param string $code
 *   The coupon code.
 *
 * @return object|false
 *   The coupon object or FALSE.
 */
function ms_coupons_find($code) {
  $code = strtoupper($code);
  // Look for matching single coupon first.
  $result = db_query("SELECT * FROM {ms_coupons} WHERE code = :code AND status = :status AND valid_until > :valid_until",
    array(':code' => $code, ':status' => 1, ':valid_until' => REQUEST_TIME));
  foreach ($result as $coupon) {
    if ($coupon->data) {
      $coupon->data = unserialize($coupon->data);
    }
    return $coupon;
  }

  // Next give other modules a chance.
  $module_coupons = module_invoke_all('ms_coupons', $code);

  if (isset($module_coupons[$code]) AND $coupon = $module_coupons[$code]) {
    if (!is_array($coupon->data)) {
      $coupon->data = unserialize($coupon->data);
    }
    return $coupon;
  }

  return FALSE;
}

/**
 * Validates a coupon and calculates the amount from the current cart contents.
 *
 * @param string $code
 *   The coupon code entered at the checkout screen.
 *
 * @return object
 *   A coupon result object with details about the validation.
 */
function ms_coupons_validate($code) {
  global $user;
  $account = user_load($user->uid);
  $result = new stdClass();
  $result->valid = FALSE;

  $code = strtoupper($code);
  $coupon = ms_coupons_find($code);

  if (!$coupon) {
    $result->message = t('This coupon code is invalid or has expired.');
    return $result;
  }

  $cart = ms_core_get_cart();
  $applicable_total = ms_core_get_order_products_total($cart);
  $applicable_qty = 1;

  if ($applicable_total == 0 AND $coupon->scope == 'initial') {
    $result->message = t('You cannot use a coupon when the total for the products is 0.');
    return $result;
  }

  // Check the max uses total.
  if ($coupon->max_uses > 0) {
    // @todo - Fix coupons so that they won't be counted as used unless they have been through checkout, so we need to check the order status.
    $used = db_query("SELECT COUNT(*) FROM {ms_order_adjustments} AS msoa
      LEFT JOIN {ms_orders} AS mso ON msoa.oid = mso.oid
      WHERE msoa.id LIKE :msoaid AND mso.uid <> :msouid",
      array(':msoaid' => 'ms_coupons_' . $coupon->cid . '%', ':msouid' => 0))->fetchField();
    if ($used >= $coupon->max_uses) {
      $result->message = t('This coupon has reached the maximum redemption limit.');
      return $result;
    }
  }

  // Check the max uses per user.
  if ($account->uid AND isset($coupon->data['max_uses_per_user'])) {
    $coupon_id = 'ms_coupons_' . $coupon->cid;
    if (!empty($coupon->data['products'])) {
      foreach ($coupon->data['products'] as $product_id) {
        $coupon_id .= '-' . $product_id;
      }
    }
    $used = db_query("SELECT COUNT(*) FROM {ms_order_adjustments} AS msoa
      LEFT JOIN {ms_orders} AS mso ON msoa.oid = mso.oid
      WHERE msoa.id LIKE :msoaid AND mso.uid = :msouid",
      array(':msoaid' => $coupon_id . '%', ':msouid' => $account->uid))->fetchField();
    if ($used >= $coupon->data['max_uses_per_user']) {
      $result->message = t('This coupon has reached the maximum redemption limit.');
      return $result;
    }
  }

  // Check the minimum purchase value.
  if ($coupon->minimum_order > 0 && $coupon->minimum_order > $applicable_total) {
    $result->message = t('You have not reached the minimum order total for this coupon.');
    return $result;
  }

  // Check the user id.
  if (isset($coupon->data['users'])) {
    if (!in_array($account->name, $coupon->data['users'])) {
      $result->message = t('Your user ID is not allowed to use this coupon.');
      return $result;
    }
  }

  // Check the roles.
  if (isset($coupon->data['roles'])) {
    $role_found = FALSE;
    foreach ($coupon->data['roles'] as $role) {
      if (in_array($role, $account->roles)) {
        $role_found = TRUE;
        break;
      }
    }
    if (!$role_found) {
      $result->message = t('You do not have the correct permission to use this coupon.');
      return $result;
    }
  }

  // Check the products.
  if (isset($coupon->data['products'])) {
    $product_found = FALSE;
    foreach ($coupon->data['products'] as $id) {
      foreach ($cart->products as $product) {
        if ($id == $product->module . '-' . $product->id) {
          $product_found = TRUE;
          break;
        }
      }
    }
    if (!$product_found) {
      $result->message = t('You must use this coupon with a valid product.');
      return $result;
    }
  }

  $result->valid = TRUE;
  $result->code = $code;
  $result->cid = $coupon->cid;
  $result->title = t('Coupon: @code', array('@code' => $code));

  if ($coupon->type == 'percentage') {
    $result->amount = $applicable_total * $coupon->value / 100;
  } elseif ($coupon->type == 'fixed') {
    $result->amount = min($applicable_total, $applicable_qty * $coupon->value);
  }

  return $result;
}

/**
 * Form constructor for the enter coupon form on the cart page.
 *
 * @see ms_coupons_enter_coupon_form_validate()
 * @see ms_coupons_enter_coupon_form_submit()
 * @ingroup forms
 */
function ms_coupons_enter_coupon_form($form, $form_state) {
  $form = array();
  $form['code'] = array(
    '#type' => 'textfield',
    '#title' => t('Coupon code'),
    '#default_value' => '',
    '#size' => 25,
  );
  $form['apply_coupon'] = array(
    '#type' => 'submit',
    '#value' => t('Apply to order'),
    '#validate' => array('ms_coupons_enter_coupon_form_validate'),
    '#submit' => array('ms_coupons_enter_coupon_form_submit'),
  );

  return $form;
}

/**
 * Form validation handler for ms_coupons_enter_coupon_form().
 *
 * @see ms_coupons_enter_coupon_form_submit()
 */
function ms_coupons_enter_coupon_form_validate($form, $form_state) {
  $code = $form_state['input']['code'];

  // First clear out the validation messages.
  drupal_get_messages('error');

  $result = ms_coupons_validate($code);
  if (!$result->valid) {
    form_set_error('code', $result->message);
  }
}

/**
 * Form submission handler for ms_coupons_enter_coupon_form() and ms_coupons_enter_coupon_form().
 *
 * This is called from both the cart and the checkout page forms.
 *
 * @see ms_coupons_enter_coupon_form_validate()
 * @see ms_coupons_enter_coupon_form_validate()
 */
function ms_coupons_enter_coupon_form_submit($form, $form_state) {
  $code = $form_state['values']['code'];
  $coupon = ms_coupons_find($code);

  ms_coupons_add_coupon_to_cart($coupon);
}

/**
 * Adds a coupon to a cart.
 *
 * @param object $coupon
 *   The coupon to add to the cart
 */
function ms_coupons_add_coupon_to_cart($coupon) {
  $adjustment = new MsAdjustment();
  $adjustment->id = 'ms_coupons_' . $coupon->cid;
  $adjustment->display = t('Coupon Code: !code', array('!code' => $coupon->code));
  $adjustment->type = $coupon->type;
  $adjustment->scope = $coupon->scope;
  $adjustment->value = -$coupon->value;
  $adjustment->optional = TRUE;
  $adjustment->data = $coupon->data;

  // @todo - Add an adjustment for each product in the cart that matches,
  // instead of just the first one.

  // @todo - Only add the adjustment for the product if
  // specified $coupon->data['products_apply'] or something. So that admins can
  // choose whether or not the coupon is applied to the product or whole order.

  // Associate this with a product if applicable.
  if (!empty($coupon->data['products'])) {
    $cart = ms_core_get_cart();
    foreach ($coupon->data['products'] as $id) {
      foreach ($cart->products as $product) {
        if ($id == $product->module . '-' . $product->id) {
          $adjustment->id .= '-' . $id;
          $adjustment->product_id = $product->cart_product_id;
          break 2;
        }
      }
    }
  }

  // First, remove coupons from the cart if needed.
  if (variable_get('ms_coupons_enforce_single_coupon_per_cart', TRUE)) {
    ms_core_remove_cart_adjustment_match('ms_coupons_');
  }

  // Add the coupon to the order.
  ms_core_add_cart_adjustment($adjustment, TRUE);

  // Increment the used counter.
  db_query("UPDATE {ms_coupons} SET used = used + 1 WHERE cid = :cid", array(':cid' => $coupon->cid));

  // Next give other modules a chance to act on this.
  module_invoke_all('ms_coupon_added', $coupon);

  drupal_set_message(t('Discount Coupon @code has been applied to your order, for a discount of @discount.',
    array('@discount' => ms_coupons_get_discount_string($coupon), '@code' => $coupon->code)));
}

/**
 * Creates a discount string for a coupon.
 *
 * @param object $coupon
 *   The coupon object.
 * @param string $currency
 *   (optional) The currency to use. Defaults to NULL.
 *
 * @return string
 *   The discount string for the coupon.
 */
function ms_coupons_get_discount_string($coupon, $currency = NULL) {
  switch ($coupon->type) {
    case 'percentage':
      return rtrim(trim($coupon->value, '0'), '.') . '%';
      break;

    case 'fixed':
      return ms_core_format_money($coupon->value, $currency);
      break;
  }
  return '';
}

/**
 * Implements hook_ms_checkout_fields().
 */
function ms_coupons_ms_checkout_fields($order) {
  $fields = array();
  if (empty($order->oid)) {
    // Hide the coupons form if there is already a coupon in the cart.
    if (variable_get('ms_coupons_enforce_single_coupon_per_cart', TRUE)) {
      foreach ($order->adjustments as $adjustment) {
        if (stristr($adjustment->id, 'ms_coupons')) {
          return $fields;
        }
      }
    }

    // Add the Coupon Entry Form.
    $fields[] = array(
      'id' => 'ms_coupons_enter_coupon',
      'title' => t('Discount Coupon'),
      'type' => 'form',
      'html' => 'ms_coupons_enter_coupon_form',
      'weight' => 11,
    );
  }

  return $fields;
}

/**
 * Implements hook_ms_cart_fields().
 */
function ms_coupons_ms_cart_fields($cart) {
  $fields = array();

  // Hide the coupons form if there is already a coupon in the cart.
  if (variable_get('ms_coupons_enforce_single_coupon_per_cart', TRUE)) {
    foreach ($cart->adjustments as $adjustment) {
      if (stristr($adjustment->id, 'ms_coupons')) {
        return $fields;
      }
    }
  }

  // Add the Coupon Entry Form.
  $fields[] = array(
    'id' => 'ms_coupons_enter_coupon',
    'title' => t('Discount Coupon'),
    'type' => 'form',
    'html' => 'ms_coupons_enter_coupon_form',
    'weight' => 11,
  );

  return $fields;
}

/**
 * Implements hook_ms_product_id_change().
 */
function ms_coupons_ms_product_id_change($old_id, $new_id) {
  $coupons = ms_coupons_get_coupons_list();
  foreach ($coupons as $cid => $name) {
    $coupon = ms_coupons_load($cid);
    if (!empty($coupon->data['products']) && in_array($old_id, $coupon->data['products'])) {
      $i = array_search($old_id, $coupon->data['products']);
      unset($coupon->data['products'][$i]);
      $coupon->data['products'][] = $new_id;
      drupal_write_record('ms_coupons', $coupon, 'cid');
    }
  }
}
