<?php

/**
 * @file
 * MoneySuite Core
 *
 * Includes many functions that are used by other MoneySuite modules, as well
 * as the core cart/order system that handles checkout, products, payments and
 * more.
 *
 * Original author: Leighton Whiting - Released under GENERAL PUBLIC LICENSE 
 * Current maintenance by multiple MoneySuite users.
 * Re: new initiative: https://www.drupal.org/node/2315653
 */

require_once('ms_core.recurring.inc');
require_once('ms_core.forms.inc');

/**
 * Implements hook_help().
 */
function ms_core_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/help#ms_core":
      $output .= '<p>' . t("MoneySuite Core Module. This contains a number of API functions that are
      required by all MoneySuite modules. It also provides storage and classes for Orders, Payments,
      Recurring Schedules, Products and Carts. In addition, a number of helper functions are provided
      which are used by payment gateways and other MoneySuite modules.") . '</p>';
      break;
    case "admin/moneysuite/orders":
      $output .= '<p>' . t("This page provides a listing of all MoneySuite orders, and allows you
      to filter the listing. There are also links to View, Edit and Delete Orders. Be careful when
      deleting orders, as this action cannot be undone and will delete all related order data.") . '</p>';
      break;
    case "admin/moneysuite/payments":
      $output .= '<p>' . t("This page provides an overview of all payments that were processed. You can
      export the reports as CSV files, as well as apply filters.") . '</p>';
      break;
    case "admin/moneysuite/orders/add":
      $output .= '<p>' . t("Use the form on this page to add an order manually. This can be useful
      when you want to add a product to a user's account without requiring them to go through checkout
      and make a payment. Once you create the order, you will probably also want to Add one or more
      Products to the order as well as Add a Payment so that the modules can act on the payment and
      grant the product to the user.") . '</p>';
      break;
    case "admin/moneysuite/orders/view/%":
      $output .= '<p>' . t("This page shows all of the details relating to a specific order. You can also
      perform various actions, depending on the order type, such as Cancel Recurring Payments.") . '</p>';
      break;
    case "admin/moneysuite/orders/edit/%":
      $output .= '<p>' . t("Only advanced users should attempt to edit an order. Most of the time there
      should be no need to edit an order. From this page you can also Add or Remove Products from an
      order, as well as Add, Remove or Resubmit Payments.") . '</p>';
      break;
    case "admin/moneysuite/gateways":
      $output .= '<p>' . t("Here you can view all of the Payment Gateways which you have currently
      enabled. Most payment gateways require that you configure them before they will work properly.") . '</p>';
      break;
    case "admin/moneysuite/reports":
      $output .= '<p>' . t("Using the reports pages listed below, you can quickly view the sales and other
      statistics of your MoneySuite modules.") . '</p>';
      break;
    case "admin/moneysuite/ms_core":
      $output .= '<p>' . t("Some of the basic settings which are used by many MoneySuite modules are
      listed here.") . '</p>';
      break;
  }
  return $output;
}

/**
 * Implements hook_permission().
 */
function ms_core_permission() {
  return array(
    'administer moneysuite settings' => array(
      'title' => t('Administer MoneySuite Settings'),
      'description' => t('Access the various admin pages and settings.'),
      'restrict access' => TRUE,
    ),
    'edit own payment info' => array(
      'title' => t('Edit Own Payment Info'),
      'description' => t('Allows the user to edit their own payment information, such as credit card.'),
    ),
    'access checkout page' => array(
      'title' => t('Access Checkout Page'),
      'description' => t('Required if the user should be able to buy anything.'),
    ),
    'view own moneysuite orders' => array(
      'title' => t('View own Orders'),
      'description' => t('Shows a tab in the User Account which allows users to view their own orders.'),
    ),
    'view moneysuite reports' => array(
      'title' => t('View Reports'),
      'description' => t('Allows admins to view various reports.'),
      'restrict access' => TRUE,
    ),
    'administer moneysuite orders' => array(
      'title' => t('Administer Orders'),
      'description' => t('Allows admins to edit, delete and add orders.'),
      'restrict access' => TRUE,
    ),
    'access moneysuite cart' => array(
      'title' => t('Access Cart'),
      'description' => t('Required if the user should be able to remove items from their cart. Recommended.'),
    ),
    'cancel own recurring moneysuite orders' => array(
      'title' => t('Cancel own recurring orders'),
      'description' => t('Allows users to cancel their own recurring orders when viewing the Order Details.'),
    ),
  );
}

/**
 * Implements hook_cron().
 */
function ms_core_cron() {
  // Empty anonymous carts.
  $time = strtotime(variable_get('ms_cart_anon_duration', '4') . ' ' . variable_get('ms_cart_anon_unit', 'hours') . ' ago');
  ms_core_clear_carts($time);

  // Clear the cache for updates.
  cache_clear_all('ms_updates', 'cache');
  cache_clear_all('ms_requirements', 'cache');

  // Empty authenticated carts.
  $time = strtotime(variable_get('ms_cart_auth_duration', '1') . ' ' . variable_get('ms_cart_auth_unit', 'years') . ' ago');
  ms_core_clear_carts($time, TRUE);

  // Send the emails notifying users when their card is expiring soon.
  $gateways = ms_core_get_payment_gateways();
  foreach ($gateways as $gateway) {
    if (variable_get($gateway['module'] . '_expiring_card_reminder_mail_body', '') && !empty($gateway['saved_cards_support'])) {
      $result = db_select('ms_core_payment_profiles', 'p')
        ->fields('p')
        ->condition('p.notified', 0)
        ->condition('p.module', $gateway['module'])
        ->condition('p.exp_year', intval(date('Y')))
        ->condition('p.exp_month', intval(date('M')))
        ->execute();

      foreach ($result as $row) {
        $account = user_load($row->uid);
        // Send the email.
        drupal_mail('ms_core', 'expiring_card', $account->mail, user_preferred_language($account),
          array('payment_profile' => $row), variable_get('ms_core_store_email', ''));

        // Mark as notified.
        db_update('ms_core_payment_profiles')
          ->fields(array(
            'notified' => 1,
          ))
          ->condition('id', $row->id)
          ->execute();

      }
    }
  }

  // Send the emails notifying users of upcoming payments.
  $result = db_select('ms_recurring_schedules', 'rs')
    ->fields('rs')
    ->condition('rs.status', 'active')
    ->condition('rs.next_payment', 0, '<>')
    ->condition('rs.notified', 0)
    ->execute();

  foreach ($result as $recurring_schedule) {
    $order_data = ms_core_order_load_data($recurring_schedule->oid);
    // Check if we should send the email.
    $days = 0;
    if ($days = ms_core_variable_get('ms_core_payment_reminder_days', 0, $order_data) && $recurring_schedule->next_payment < strtotime("+ " . $days . " days")) {
      // Load some variables.
      $order = ms_core_order_load($recurring_schedule->oid);
      $account = user_load($order->uid);

      ms_core_log('ms_core', 'Upcoming payment reminder sent to user @userid at @email.', array('@userid' => $account->uid, '@email' => $account->mail));

      // Send the email.
      if (variable_get('ms_core_upcoming_payment_mail_body', '')) {
        drupal_mail('ms_core', 'upcoming_payment', $account->mail, user_preferred_language($account), array('order' => $order), ms_core_variable_get('ms_core_store_email', '', $order));
      }

      // Mark as notified.
      db_update('ms_recurring_schedules')
        ->fields(array(
          'notified' => 1,
        ))
        ->condition('id', $recurring_schedule->id)
        ->execute();
    }
  }

  // Process payments that need to be processed.
  $result = db_select('ms_recurring_schedules', 'rs')
    ->fields('rs')
    ->condition('rs.status', 'active')
    ->condition('rs.next_payment', 0, '<>')
    ->condition('rs.next_payment', REQUEST_TIME, '<')
    ->execute();

  // Add a counter so that only a certain number of payments are processed each
  // cron run.
  $counter = array();

  foreach ($result as $recurring_schedule) {
    $gateway = $recurring_schedule->gateway;

    // Only process the set amount each time.
    if (!empty($counter[$gateway]) && $counter[$gateway] > variable_get($gateway . '_cron_number', 5)) {
      break;
    }
    $order = ms_core_order_load($recurring_schedule->oid);
    if ($order && $order->status == 'active' && function_exists($gateway . '_ms_process_recurring_payment')) {
      drupal_alter('ms_core_recurring_payment_recurring_schedule', $recurring_schedule, $order);
      if ($payment = call_user_func_array($gateway . '_ms_process_recurring_payment', array($recurring_schedule, $order))) {
        $counter[$gateway] = isset($counter[$gateway]) ? $counter[$gateway] + 1 : 1;
        $payment->data['product_id'] = $recurring_schedule->pid;
        // Add the Payment to the Order.
        ms_core_enter_payment($payment);

        // Check if the recurring_schedule is done and if so mark as end of term.
        if ($recurring_schedule->total_occurrences != 0 && $recurring_schedule->total_occurrences <= ($recurring_schedule->current_payments + 1)) {
          $payment->type = 'rec_eot';
          $payment->amount = 0;
          $payment->data['product_id'] = $recurring_schedule->pid;
          ms_core_enter_payment($payment);
        }
      } else {
        // Log an error.
        ms_core_log_error($gateway, 'There was an error charging a recurring payment. Order: !order', array('!order' => ms_core_print_r($order)));
        // If the failed payments counter is greater than or equal to the
        // allowed amount, cancel the order.
        if ($recurring_schedule->failed_payments >= ms_core_variable_get($gateway . '_retry_attempts', 3, $order)) {
          // Insert the rec_cancel Payment to the database.
          $payment = ms_core_new_payment($order->oid, $gateway, 'rec_cancel');
          $payment->transaction = ms_core_generate_transaction_id(10);
          $payment->currency = $order->currency;
          $payment->data['product_id'] = $recurring_schedule->pid;
          ms_core_enter_payment($payment);
        } else {
          // Mark the payment as failed.
          $payment = ms_core_new_payment($order->oid, $gateway, 'failed');
          $payment->transaction = ms_core_generate_transaction_id(10);
          $payment->currency = $order->currency;
          $payment->data['product_id'] = $recurring_schedule->pid;

          // Send an email to the user informing them they need to update their
          // card info.
          if (ms_core_variable_get($gateway . '_billing_error_body', '', $order)) {
            $account = user_load($order->uid);
            $vars = array(
              'payment_profile' => ms_core_order_get_payment_profile($order),
              'order' => $order,
            );
            drupal_mail('ms_core', 'billing_error', $account->mail, user_preferred_language($account), $vars);
          }

          ms_core_enter_payment($payment);
        }
      }
    } else {
      // Set the status to cancelled.
      ms_core_cancel_recurring_schedule($recurring_schedule->oid);
    }
  }

  // Downgrade orders that have the pending_downgrade status.
  $result = db_select('ms_recurring_schedules', 'rs')
    ->fields('rs')
    ->condition('status', 'pending_downgrade')
    ->condition('next_payment', 0, '!=')
    ->condition('next_payment', REQUEST_TIME, '<')
    ->execute();

  foreach ($result as $recurring_schedule) {
    $order = ms_core_order_load($recurring_schedule->oid);
    if ($order && !empty($order->data['new_product'])) {
      $new_product = $order->data['new_product']; // @fixme - This may be set to another product by this time for multi_recurring orders. Instead, we should check for the pid property of the recurring schedule, and store the new product in the product data.

      // Enter the rec_modify payment
      $payment = ms_core_new_payment($order->oid, $order->gateway, 'rec_modify', 0, $order->currency);

      // Generate a Unique Transaction ID
      $payment->data = array('new_product' => $new_product);
      $payment->recurring_id = $order->oid;
      $payment->data['product_id'] = $recurring_schedule->pid;

      // REMOVEME Change the status of the recurring schedule.
      ms_core_change_recurring_schedule_status($recurring_schedule->oid, 'trying_downgrade', $recurring_schedule->pid);

      ms_core_enter_payment($payment);
    }
  }
}

/**
 * Access callback: Lets everyone view the MS Core essential pages.
 */
function ms_core_view_page_access_test() {
  return TRUE;
}

/**
 * Access callback: Makes sure that only users who have permission can view the order history.
 *
 * @param object $account
 *   The user account.
 */
function ms_core_view_history_access_test($account) {
  global $user;
  return (user_access('administer moneysuite orders') OR (user_access('view own moneysuite orders') && ($account->uid == $user->uid)));
}

/**
 * Access callback: Checks if the user can change their billing info.
 *
 * @param object $account
 *   The user account.
 * @param int $id
 *   The payment profile id.
 */
function ms_core_billing_test($account, $id) {
  global $user;
  if ($payment_profile = ms_core_payment_profile_load($id)) {
    if ($user->uid == $payment_profile->uid OR user_access('administer moneysuite orders')) {
      return TRUE;
    }
  } else {
    if ($user->uid == $account->uid OR user_access('administer moneysuite orders')) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Access callback: Checks if the user should be able to see the Billing Info page in the User Account
 *
 * @param object $account
 *   The user account.
 */
function ms_core_billing_info_access_test($account) {
  global $user;

  $html = array();
  drupal_alter('ms_core_billing_info', $html, $user);
  if (empty($html)) {
    return FALSE;
  }

  return ($user->uid == $account->uid && user_access('edit own payment info', $account));
}

/**
 * Access callback: Makes sure that only users who have permission can view the order details.
 *
 * @param object $account
 *   The user account.
 * @param MsOrder $order
 *   The order.
 */
function ms_core_view_order_access_test($account, MsOrder $order) {
  // First, check if this is pdf crowd and the setting is on.
  if (ip_address() == '69.164.218.62' && variable_get('ms_core_pdfcrowd_support', FALSE)) {
    return TRUE;
  }

  return (user_access('administer moneysuite orders') OR (user_access('view own moneysuite orders') && ($order->uid == $account->uid)));
}

/**
 * Access callback: Checks if the user has access to resume an order.
 *
 * @param MsOrder $order
 *   The order.
 */
function ms_core_resume_checkout_access_test(MsOrder $order) {
  global $user;
  return ($user->uid && $user->uid == $order->uid);
}

/**
 * Access callback: Checks if the user should be able to delete an order.
 *
 * @param MsOrder $order
 *   The order.
 */
function ms_core_delete_order_access_test(MsOrder $order) {
  global $user;
  return (user_access('administer moneysuite orders') OR ($user->uid && $order->uid == $user->uid));
}

/**
 * Implements hook_menu().
 */
function ms_core_menu() {
  $items = array();
  $items['user/%user/order-history/view/%ms_core_order_key'] = array(
    'title' => 'Details',
    'page callback' => 'ms_core_view_order_details',
    'page arguments' => array(4),
    'access callback' => 'ms_core_view_order_access_test',
    'access arguments' => array(1, 4),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'ms_core.pages.inc',
  );
  $items['user/%user/order-history/view/%ms_core_order_key/details'] = array(
    'title' => 'Details',
    'page callback' => 'ms_core_view_order_details',
    'page arguments' => array(4),
    'access callback' => 'ms_core_view_order_access_test',
    'access arguments' => array(1, 4),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'ms_core.pages.inc',
  );
  $items['user/%user/order-history/view/%ms_core_order_key/invoice'] = array(
    'title' => 'Invoice',
    'page callback' => 'ms_core_view_order_invoice',
    'page arguments' => array(4),
    'access callback' => 'ms_core_view_order_access_test',
    'access arguments' => array(1, 4),
    'type' => MENU_LOCAL_TASK,
    'file' => 'ms_core.pages.inc',
  );
  $items['user/%user/order-history/view/%ms_core_order_key/print'] = array(
    'title' => 'Print',
    'page callback' => 'ms_core_view_order_print',
    'page arguments' => array(4),
    'access callback' => 'ms_core_view_order_access_test',
    'access arguments' => array(1, 4),
    'type' => MENU_LOCAL_TASK,
    'file' => 'ms_core.pages.inc',
  );
  $items['user/%user/order-history/delete/%ms_core_order_key'] = array(
    'title' => 'Delete Order',
    'description' => 'Delete an Order',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_core_delete_checkout_order_confirm', 4),
    'access callback' => 'ms_core_delete_order_access_test',
    'access arguments' => array(4),
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
    'file' => 'ms_core.forms.inc',
  );
  $items['user/%user/billing-info'] = array(
    'title' => 'Billing Information',
    'page callback' => 'ms_core_user_billing_info_page',
    'page arguments' => array(1),
    'access callback' => 'ms_core_billing_info_access_test',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'ms_core.pages.inc',
  );
  $items['ms/checkout'] = array(
    'title' => 'Checkout',
    'page callback' => 'ms_core_checkout_page',
    'access arguments' => array('access checkout page'),
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
    'file' => 'ms_core.pages.inc',
  );
  $items['ms/checkout/return/%'] = array(
    'page callback' => 'ms_core_checkout_return_page',
    'page arguments' => array(3),
    'access arguments' => array('access checkout page'),
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
    'file' => 'ms_core.pages.inc',
  );
  $items['ms/checkout/payment/%'] = array(
    'title' => 'Checkout',
    'page callback' => 'ms_core_checkout_payment_page',
    'page arguments' => array(3),
    'access arguments' => array('access checkout page'),
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
    'file' => 'ms_core.pages.inc',
  );
  $items['ms/resume-checkout/%ms_core_order_key'] = array(
    'title' => 'Resume Checkout',
    'page callback' => 'ms_core_resume_checkout_page',
    'page arguments' => array(2),
    'access callback' => 'ms_core_resume_checkout_access_test',
    'access arguments' => array(2),
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
    'file' => 'ms_core.pages.inc',
  );
  $items['ms/cart'] = array(
    'title' => 'Cart',
    'page callback' => 'ms_core_cart_page',
    'access arguments' => array('access moneysuite cart'),
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
    'file' => 'ms_core.pages.inc',
  );
  $items['ms/cancel/%'] = array(
    'title' => 'Cancel Payments',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_core_cancel_confirm', 2),
    'access callback' => 'ms_core_cancel_test',
    'access arguments' => array(2),
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );
  $items['ms/modify/%/%'] = array(
    'title' => 'Modify',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_core_modify_confirm', 2, 3),
    'access callback' => 'ms_core_modify_test',
    'access arguments' => array(2, 3),
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );
  $items['ms/downgrade/%/%'] = array(
    'title' => 'Downgrade',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_core_downgrade_confirm', 2, 3),
    'access callback' => 'ms_core_modify_test',
    'access arguments' => array(2, 3),
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );
  $items['ms/cart/remove/%'] = array(
    'page callback' => 'ms_core_cart_remove_page',
    'page arguments' => array(3),
    'access arguments' => array('access moneysuite cart'),
    'type' => MENU_CALLBACK,
    'file' => 'ms_core.pages.inc',
  );
  $items['ms/cart/remove_adjustment/%'] = array(
    'page callback' => 'ms_core_cart_remove_adjustment_page',
    'page arguments' => array(3),
    'access arguments' => array('access moneysuite cart'),
    'type' => MENU_CALLBACK,
    'file' => 'ms_core.pages.inc',
  );
  $items['admin/moneysuite/orders/rebuild'] = array(
    'title' => 'Rebuild Orders',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_core_rebuild_orders_confirm'),
    'access arguments' => array('administer moneysuite orders'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'ms_core.forms.inc',
  );
  $items['admin/moneysuite/orders/add'] = array(
    'title' => 'Add Order',
    'description' => 'Add an Order',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_core_order_form', 'add'),
    'access callback' => 'ms_core_view_orders_access_test',
    'type' => MENU_LOCAL_ACTION,
    'weight' => -2,
    'file' => 'ms_core.forms.inc',
  );
  $items['admin/moneysuite/orders/view/%ms_core_order_key'] = array(
    'title' => 'View Order Details',
    'description' => 'View Order',
    'page callback' => 'ms_core_view_order_details',
    'page arguments' => array(4),
    'access callback' => 'ms_core_edit_access_test',
    'access arguments' => array(4),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1,
    'file' => 'ms_core.pages.inc',
  );
  $items['admin/moneysuite/orders/edit/%ms_core_order_key'] = array(
    'title' => 'Edit Order',
    'description' => 'Edit an Order',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_core_order_form', 'edit', 4),
    'access callback' => 'ms_core_edit_access_test',
    'access arguments' => array(4),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
    'file' => 'ms_core.forms.inc',
  );
  $items['admin/moneysuite/orders/delete/%ms_core_order_key'] = array(
    'title' => 'Delete Order',
    'description' => 'Delete an Order',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_core_delete_order_confirm', 4),
    'access callback' => 'ms_core_edit_access_test',
    'access arguments' => array(4),
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
    'file' => 'ms_core.forms.inc',
  );
  $items['admin/moneysuite/products/add/%ms_core_order_key'] = array(
    'title' => 'Add Product',
    'description' => 'Add a Product to an Order',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_core_add_product_form', 4),
    'access arguments' => array('administer moneysuite orders'),
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
    'weight' => 2,
    'file' => 'ms_core.forms.inc',
  );
  $items['admin/moneysuite/products/remove/%'] = array(
    'title' => 'Remove Product',
    'description' => 'Remove a Product from an Order',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_core_remove_product_confirm', 4),
    'access arguments' => array('administer moneysuite orders'),
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
    'file' => 'ms_core.forms.inc',
  );
  $items['admin/moneysuite/ms_core/export_csv/%'] = array(
    'title' => 'Export CSV',
    'description' => 'Export this report to CSV',
    'page callback' => 'ms_core_csv_page',
    'page arguments' => array(4),
    'access arguments' => array('administer moneysuite orders'),
    'type' => MENU_CALLBACK,
    'file' => 'ms_core.pages.inc',
  );
  $items['admin/moneysuite/payments/add'] = array(
    'title' => 'Add Payment',
    'description' => 'Add a Payment to an Order',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_core_edit_payment_form', 'add'),
    'access arguments' => array('administer moneysuite orders'),
    'type' => MENU_LOCAL_ACTION,
    'weight' => 2,
    'file' => 'ms_core.forms.inc',
  );
  $items['admin/moneysuite/payments/edit/%ms_core_payment'] = array(
    'title' => 'Edit Payment',
    'description' => 'Edit a Payment',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_core_edit_payment_form', 'edit', 4),
    'access arguments' => array('administer moneysuite orders'),
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
    'file' => 'ms_core.forms.inc',
  );
  $items['admin/moneysuite/payments/delete/%ms_core_payment'] = array(
    'title' => 'Delete Payment',
    'description' => 'Delete a Payment',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_core_delete_payment_confirm', 4),
    'access arguments' => array('administer moneysuite orders'),
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
    'file' => 'ms_core.forms.inc',
  );
  $items['admin/moneysuite/payments/resubmit/%ms_core_payment'] = array(
    'title' => 'Resubmit Payment',
    'description' => 'Resubmit a Payment',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_core_resubmit_payment_confirm', 4),
    'access arguments' => array('administer moneysuite orders'),
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
    'file' => 'ms_core.forms.inc',
  );
  $items['admin/moneysuite/payments/refund/%ms_core_payment'] = array(
    'title' => 'Refund Payment',
    'description' => 'Refund a Payment',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_core_refund_payment_confirm', 4),
    'access callback' => 'ms_core_payment_refund_access',
    'access arguments' => array(4),
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
    'file' => 'ms_core.forms.inc',
  );
  $items['admin/moneysuite'] = array(
    'title' => 'MoneySuite',
    'description' => 'MoneySuite Modules',
    'page callback' => 'ms_core_main_page',
    'access arguments' => array('administer moneysuite settings'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'ms_core.admin.inc',
  );
  $items['admin/moneysuite/gateways'] = array(
    'title' => 'Gateways',
    'description' => 'MoneySuite Gateways',
    'page callback' => 'ms_core_gateways_page',
    'access arguments' => array('administer moneysuite settings'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'ms_core.admin.inc',
  );

  // Create menu entries for each payment gateway here.
  $gateways = ms_core_get_payment_gateways();
  foreach ($gateways as $gateway) {
    if (!empty($gateway['active'])) {
      $items['admin/moneysuite/gateways/' . $gateway['module']] = array(
        'title' => $gateway['name'],
        'page arguments' => array('ms_core_gateway_settings_form', 3),
        'page callback' => 'drupal_get_form',
        'access arguments' => array('administer moneysuite settings'),
        'type' => MENU_NORMAL_ITEM,
        'file' => 'ms_core.admin.inc',
      );
    }
  }

  $items['admin/moneysuite/reports'] = array(
    'title' => 'Reports',
    'description' => 'View various MoneySuite Reports, Charts and Statistics',
    'page callback' => 'ms_core_reports_page',
    'access arguments' => array('view moneysuite reports'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'ms_core.admin.inc',
  );
  $items['admin/moneysuite/ms_core'] = array(
    'title' => 'Core Settings',
    'description' => 'Set the various Core Settings here',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_core_admin'),
    'access arguments' => array('administer moneysuite settings'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'ms_core.admin.inc',
  );
  $items['user/%user/order-history'] = array(
    'title' => 'Order History',
    'page callback' => 'ms_core_history',
    'page arguments' => array(1),
    'access callback' => 'ms_core_view_history_access_test',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'ms_core.pages.inc',
  );
  $items['ms/thankyou'] = array(
    'title' => 'Thank You!',
    'page callback' => 'ms_core_thankyou_page',
    'access callback' => 'ms_core_view_page_access_test',
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
    'file' => 'ms_core.pages.inc',
  );
  $items['admin/structure/ms_core/autocomplete'] = array(
    'title' => 'Autocomplete',
    'page callback' => 'ms_core_autocomplete_user',
    'access arguments' => array('administer moneysuite settings'),
    'type' => MENU_CALLBACK,
    'file' => 'ms_core.pages.inc',
  );
  $items['ms_core/autocomplete/user'] = array(
    'page callback' => 'ms_core_autocomplete_user',
    'access arguments' => array('administer moneysuite settings'),
    'type' => MENU_CALLBACK,
    'file' => 'ms_core.pages.inc',
  );
  $items['ms_core/autocomplete/node'] = array(
    'page callback' => 'ms_core_autocomplete_node',
    'access arguments' => array('administer moneysuite settings'),
    'type' => MENU_CALLBACK,
    'file' => 'ms_core.pages.inc',
  );
  $items['ms_core/autocomplete/product'] = array(
    'page callback' => 'ms_core_autocomplete_product',
    'access arguments' => array('administer moneysuite settings'),
    'type' => MENU_CALLBACK,
    'file' => 'ms_core.pages.inc',
  );
  $items['ms_core/autocomplete/role'] = array(
    'page callback' => 'ms_core_autocomplete_role',
    'access arguments' => array('administer moneysuite settings'),
    'type' => MENU_CALLBACK,
    'file' => 'ms_core.pages.inc',
  );
  $items['user/%user/ms/billing/%'] = array(
    'title' => 'Update Billing Information',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_core_payment_profile_edit_form', 1, 4),
    'access callback' => 'ms_core_billing_test',
    'access arguments' => array(1, 4),
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
    'file' => 'ms_core.recurring.inc',
  );
  $items['ms/checkout/saved/%ms_core_payment_profile'] = array(
    'title' => 'Checkout',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_core_saved_method_checkout_form', 3),
    'access callback' => 'ms_core_view_page_access_test',
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
    'file' => 'ms_core.recurring.inc',
  );
  $items['ms/purchase/%ms_core_product'] = array(
    'page callback' => 'ms_core_purchase_product',
    'page arguments' => array(2),
    'access callback' => 'ms_core_purchase_product_access_test',
    'access arguments' => array(2),
    'type' => MENU_CALLBACK,
    'file' => 'ms_core.pages.inc',
  );
  $items['ms_gateway/landing/%'] = array(
    'title' => 'Please wait',
    'page callback' => 'ms_core_gateway_landing_page',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
    'file' => 'ms_core.pages.inc',
  );
  $items['ms_gateway/check_ipn_status/%'] = array(
    'page callback' => 'ms_core_gateway_ipn_ajax_page',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'ms_core.pages.inc',
  );

  return $items;
}

/**
 * Loads an MsProduct from the id for url arguments.
 */
function ms_core_product_load($id) {
  return ms_core_get_module_product($id);
}

/**
 * Access Callback: Check if the user has access to purchase the product.
 */
function ms_core_purchase_product_access_test(MsProduct $product) {
  global $user;
  if (empty($product->id)) {
    return FALSE;
  }
  if (!empty($product->access_callback)) {
    return call_user_func($product->access_callback, $user, $product);
  }
  return TRUE;
}

/**
 * Access Callback: Determines if a payment can be refunded.
 */
function ms_core_payment_refund_access(MsPayment $payment) {
  $gateway_info = ms_core_get_payment_gateway($payment->gateway);
  return user_access('administer moneysuite orders') && !empty($gateway_info['refund_callback']);
}

/**
 * Access callback: Checks if the user has access to view the orders.
 */
function ms_core_view_orders_access_test() {
  if (arg(4)) {
    return FALSE;
  }
  if (user_access('administer moneysuite orders')) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Access callback: Checks if the user has access to edit an order.
 *
 * @param string $order_key
 *   The order key.
 */
function ms_core_edit_access_test($order_key) {
  if ($order_key && user_access('administer moneysuite orders')) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_requirements().
 */
function ms_core_requirements($phase) {
  $requirements = array();
  if ($phase == 'runtime') {
    if ($req_cache = cache_get('ms_requirements')) {
      $requirements = $req_cache->data;
    }

    return $requirements;
  }
}

/**
 * Implements hook_ms_core_overrides().
 */
function ms_core_ms_core_overrides() {
  $overrides = array();
  $gateways = ms_core_get_payment_gateways();
  module_load_include('inc', 'ms_core', 'ms_core.admin');
  foreach ($gateways as $gateway) {
    $overrides[$gateway['module']] = array(
      'title' => $gateway['name'],
      'form' => 'ms_core_gateway_settings_form',
      'params' => array($gateway['module']),
    );
  }

  $overrides['ms_core'] = array(
    'title' => t('MS Core'),
    'form' => 'ms_core_admin',
  );

  return $overrides;
}

/**
 * Form constructor for the admin settings form.
 *
 * @ingroup forms
 */
function ms_core_admin($form, &$form_state) {
  $form['vertical_tabs'] = array(
    '#type' => 'vertical_tabs',
  );
  $form['main'] = array(
    '#type' => 'fieldset',
    '#title' => t('Main Settings'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#group' => 'vertical_tabs',
  );
  $form['main']['ms_core_debug_mode'] = array(
    '#type' => 'checkbox',
    '#title' => t('Log Module Messages in Database?'),
    '#default_value' => variable_get('ms_core_debug_mode', FALSE),
    '#description' => t('Module Messages will be found in the Logs/Reports section of your site, and are useful for debugging. The messages will not be shown to users. This mode is safe to use on a Live Site.'),
    '#required' => FALSE,
  );
  $form['main']['ms_core_default_currency'] = array(
    '#type' => 'select',
    '#title' => t('Default Currency'),
    '#options' => ms_core_get_currencies(),
    '#default_value' => variable_get('ms_core_default_currency', 'USD'),
    '#description' => t("Which currency to use for this site?"),
    '#required' => TRUE,
    '#ms_override' => TRUE,
    '#ms_i18n' => TRUE,
  );
  $form['main']['ms_core_format_money_template'] = array(
    '#type' => 'textfield',
    '#title' => t('Format Money Template'),
    '#default_value' => variable_get('ms_core_format_money_template', '[sign][number].[decimal]'),
    '#description' => t("Customize the template used for formatting money strings.
      You can use the following tokens: [sign], [number], [decimal], [currency_code]"),
    '#required' => TRUE,
    '#ms_i18n' => TRUE,
  );
  $form['main']['ms_core_auto_login'] = array(
    '#type' => 'checkbox',
    '#title' => t('Automatically Login New Users?'),
    '#default_value' => variable_get('ms_core_auto_login', FALSE),
    '#description' => t('Automatically Log Users In once they have paid?'),
    '#required' => FALSE,
    '#ms_override' => TRUE,
  );
  $form['main']['ms_core_thankyou_page_template'] = array(
    '#type' => 'textarea',
    '#title' => t('Thank-You Page Template'),
    '#default_value' => variable_get('ms_core_thankyou_page_template',
      "<p>Thank you for your purchase, [user:name]! Your payment has been received and your order details are below:</p>
<br />
<p>Order # [ms_core_order:orderId]</p>
<p>Order Status: [ms_core_order:orderStatus]</p>
<p>Payment: [ms_core_payment:paymentAmount] - [ms_core_payment:paymentDate]</p>
<p>Payment Method: [ms_core_payment:gatewayName]</p>
<br />
<p>Please print a copy of this page for your records.</p>
"),
    '#description' => t('Customize the text shown on the Thank-You page. You may use the Order, User and Payment tokens listed below.'),
    '#required' => FALSE,
    '#ms_i18n' => TRUE,
  );
  $form['main']['ms_core_thankyou_page_free_template'] = array(
    '#type' => 'textarea',
    '#title' => t('Thank-You Page Template for Free Orders'),
    '#default_value' => variable_get('ms_core_thankyou_page_free_template',
      "<p>Thank you for your order, [user:name]! Your order details are below:</p>
<br />
<p>Order # [ms_core_order:orderId]</p>
<p>Order Status: [ms_core_order:orderStatus]</p>
<br />
<p>Please print a copy of this page for your records.</p>
"),
    '#description' => t("Customize the text shown on the Free Order Thank-You page. You may use the Order and User tokens listed below. Payment tokens aren't available because there are no payments associated with free orders."),
    '#required' => FALSE,
    '#ms_i18n' => TRUE,
  );
  $form['main']['ms_core_thankyou_page_template_token_help']['tokens'] = array(
    '#theme' => 'token_tree',
    '#token_types' => array('ms_core_order', 'ms_core_payment', 'user'),
    '#dialog' => TRUE,
  );
  $form['main']['ms_core_thankyou_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Custom Thank-You Page URI'),
    '#default_value' => variable_get('ms_core_thankyou_path', ''),
    '#description' => t('If you would rather redirect the user to a custom Thank-You page,
    then enter the relative path of the page here.
    Leave blank to use the default Thank-You page and template above.'),
    '#required' => FALSE,
    '#ms_override' => TRUE,
    '#ms_i18n' => TRUE,
  );
  $form['main']['ms_core_order_number_mode'] = array(
    '#type' => 'radios',
    '#title' => t('Order Number Display'),
    '#options' => array(
      'sequential' => t('Sequential'),
      'random' => t('Random'),
    ),
    '#default_value' => variable_get('ms_core_order_number_mode', 'sequential'),
    '#description' => t('Choose whether you want to show the sequential order number or the random (6 digit alphanumeric) order key.'),
    '#required' => FALSE,
  );

  $form['user'] = array(
    '#type' => 'fieldset',
    '#title' => t('User settings'),
    '#group' => 'vertical_tabs',
  );
  $form['user']['ms_core_send_registration_mail'] = array(
    '#type' => 'checkbox',
    '#title' => t('Send the default drupal account creation email?'),
    '#default_value' => variable_get('ms_core_send_registration_mail', TRUE),
    '#description' => t("When the user is created after payment is received, the default Drupal account creation email isn't sent. Enable this to have it sent. You can edit this email from the Account Settings page."),
  );

  $form['cart'] = array(
    '#type' => 'fieldset',
    '#title' => t('Cart settings'),
    '#group' => 'vertical_tabs',
  );
  $form['cart']['ms_cart_add_item_msg'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display an update message when an item is added to the cart through an add to cart form.'),
    '#default_value' => variable_get('ms_cart_add_item_msg', TRUE),
  );
  $form['cart']['ms_core_continue_shopping_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Continue Shopping Path'),
    '#description' => t('Specify the drupal path to take the user when they click the Continue Shopping button.'),
    '#default_value' => variable_get('ms_core_continue_shopping_path', ''),
    '#size' => 16,
    '#ms_i18n' => TRUE,
  );
  $form['cart']['ms_minimum_subtotal'] = array(
    '#type' => 'textfield',
    '#title' => t('Minimum order subtotal'),
    '#description' => t('Optionally specify a minimum allowed subtotal for a cart to proceed to checkout.'),
    '#default_value' => variable_get('ms_minimum_subtotal', 0),
    '#size' => 16,
  );

  $form['cart']['anonymous'] = array(
    '#type' => 'fieldset',
    '#title' => t('Anonymous cart duration'),
    '#description' => t('Set the length of time products remain in the cart for customers who <strong>have not</strong> logged in.'),
  );
  $form['cart']['anonymous']['ms_cart_anon_duration'] = array(
    '#type' => 'select',
    '#title' => t('Duration'),
    '#options' => drupal_map_assoc(range(1, 60)),
    '#default_value' => variable_get('ms_cart_anon_duration', '4'),
    '#prefix' => '<div style="float: left; margin-right: 1em;">',
    '#suffix' => '</div>',
  );
  $form['cart']['anonymous']['ms_cart_anon_unit'] = array(
    '#type' => 'select',
    '#title' => t('Unit of time'),
    '#options' => array(
      'minutes' => t('Minute(s)'),
      'hours' => t('Hour(s)'),
      'days' => t('Day(s)'),
      'weeks' => t('Week(s)'),
      'years' => t('Year(s)'),
    ),
    '#default_value' => variable_get('ms_cart_anon_unit', 'hours'),
    '#prefix' => '<div style="float: left; margin-right: 1em;">',
    '#suffix' => '</div>',
  );
  $form['cart']['ms_core_show_subtotal'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show subtotal'),
    '#default_value' => variable_get('ms_core_show_subtotal', TRUE),
  );

  $form['cart']['authenticated'] = array(
    '#type' => 'fieldset',
    '#title' => t('Authenticated cart duration'),
    '#description' => t('Set the length of time products remain in the cart for customers who <strong>have</strong> logged in.'),
  );
  $form['cart']['authenticated']['ms_cart_auth_duration'] = array(
    '#type' => 'select',
    '#title' => t('Duration'),
    '#options' => drupal_map_assoc(range(1, 24)),
    '#default_value' => variable_get('ms_cart_auth_duration', '1'),
    '#prefix' => '<div style="float: left; margin-right: 1em;">',
    '#suffix' => '</div>',
  );
  $form['cart']['authenticated']['ms_cart_auth_unit'] = array(
    '#type' => 'select',
    '#title' => t('Unit of time'),
    '#options' => array(
      'hours' => t('Hour(s)'),
      'days' => t('Day(s)'),
      'weeks' => t('Week(s)'),
      'years' => t('Year(s)'),
    ),
    '#default_value' => variable_get('ms_cart_auth_unit', 'years'),
    '#prefix' => '<div style="float: left; margin-right: 1em;">',
    '#suffix' => '</div>',
  );

  $form['checkout'] = array(
    '#type' => 'fieldset',
    '#title' => t('Checkout Settings'),
    '#group' => 'vertical_tabs',
  );
  $form['checkout']['ms_core_skip_checkout'] = array(
    '#type' => 'checkbox',
    '#title' => t('Skip Checkout Page?'),
    '#default_value' => variable_get('ms_core_skip_checkout', FALSE),
    '#description' => t('This will bypass the checkout page if only one Payment Gateway is active. If you are using modules which place items on the Checkout Page (like Coupons), they will override this setting.'),
    '#required' => FALSE,
  );
  $form['checkout']['ms_core_terms_service_nid'] = array(
    '#type' => 'textfield',
    '#title' => t('Terms of Service Node'),
    '#default_value' => variable_get('ms_core_terms_service_nid', ''),
    '#description' => t('Enter the node id of your terms of service page if you would like to show an "Agree" checkbox on the Checkout page.'),
    '#required' => FALSE,
    '#ms_i18n' => TRUE,
  );
  $form['checkout']['ms_core_terms_service_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Terms of Service Agree Text'),
    '#default_value' => variable_get('ms_core_terms_service_text', t('I agree to the Terms of Service')),
    '#description' => t('Enter the agree text that you would like to use on the Checkout Form.'),
    '#required' => FALSE,
    '#ms_i18n' => TRUE,
  );
  $form['checkout']['ms_core_terms_service_hide_for_authenticated'] = array(
    '#type' => 'checkbox',
    '#title' => t('Hide the Terms of Service checkbox for authenticated users?'),
    '#default_value' => variable_get('ms_core_terms_service_hide_for_authenticated', FALSE),
    '#required' => FALSE,
  );
  $form['checkout']['ms_core_terms_service_collapsed'] = array(
    '#type' => 'checkbox',
    '#title' => t('Collapse Terms of Service?'),
    '#default_value' => variable_get('ms_core_terms_service_collapsed', FALSE),
    '#description' => t('This will cause the terms of service to be collapsed by default.'),
    '#required' => FALSE,
  );
  $form['checkout']['ms_core_order_title_recurring'] = array(
    '#type' => 'checkbox',
    '#title' => t('Add Recurring Payment Terms to Order Titles?'),
    '#default_value' => variable_get('ms_core_order_title_recurring', FALSE),
    '#description' => t('This will add the recurring payment terms to the end of recurring product orders titles.'),
    '#required' => FALSE,
  );
  $form['checkout']['ms_core_checkout_email_verify'] = array(
    '#type' => 'checkbox',
    '#title' => t('Add Email Verification Field?'),
    '#default_value' => variable_get('ms_core_checkout_email_verify', FALSE),
    '#description' => t('This will add an email verification field under the email field.'),
    '#required' => FALSE,
  );
  $form['checkout']['ms_core_allow_anonymous_email_checkout'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow Anonymous Checkout using Existing Email Address?'),
    '#default_value' => variable_get('ms_core_allow_anonymous_email_checkout', FALSE),
    '#description' => t('If this is active, users can checkout without logging in and using an email address that is already associated with a user account. The order will be assigned to the user account, but the user will not be automatically logged in, for security purposes.'),
    '#required' => FALSE,
  );
  $gateways = ms_core_get_payment_gateways_list();
  $form['checkout']['ms_core_default_gateway'] = array(
    '#type' => 'select',
    '#title' => t('Default Payment Method'),
    '#options' => $gateways,
    '#default_value' => variable_get('ms_core_default_gateway', key($gateways)),
    '#description' => t("Which gateway should be selected by default on the checkout page?"),
    '#required' => FALSE,
    '#ms_i18n' => TRUE,
  );
  $form['checkout']['ms_core_checkout_require_account_info'] = array(
    '#type' => 'select',
    '#title' => t('Additional Account Info'),
    '#options' => array(
      'optional' => t("Optional"),
      'hidden' => t("Hidden"),
      'required' => t("Required"),
    ),
    '#default_value' => variable_get('ms_core_checkout_require_account_info', 'optional'),
    '#description' => t("Required means the username and password fields are
      required on the Checkout page if the user is anonymous. Optional means
      the user is only required to enter their email address, and they can then
      optionally enter a username or password in a collapsed fieldset. If they opt
      not to enter these, they will be gererated for them later on. Hidden simply
      hides the fields altogether."),
    '#required' => FALSE,
  );

  $form['checkout']['form_fields'] = array(
    '#type' => 'fieldset',
    '#title' => t('Checkout Form Fields'),
    '#collapsed' => TRUE,
    '#collapsible' => TRUE,
  );

  // Show the Checkout Form Fields Admin UI.
  if (module_exists('profile2')) {
    $profile_fields = array(
      0 => 'N/A',
      'account_mail' => t('Account Email'),
    );
    foreach (profile2_get_types() as $type) {
      $fields = field_read_instances(array('bundle' => $type->type));
      foreach ($fields as $field) {
        $profile_fields[$type->type . '|' . $field['field_name']] = $type->label . ' - ' . $field['label'];
      }
    }

    $form['checkout']['form_fields']['ms_core_profile_sync_back'] = array(
      '#type' => 'checkbox',
      '#title' => t('Populate User Profile Fields with Checkout Fields?'),
      '#default_value' => variable_get('ms_core_profile_sync_back', FALSE),
      '#description' => t('This will populate empty user profile fields with the data they entered in the checkout field, according to the links defined below.'),
      '#required' => FALSE,
    );
    $form['checkout']['form_fields']['ms_core_profile2_checkout_integration'] = array(
      '#type' => 'checkbox',
      '#title' => t('Show the Profile 2 fields on the checkout page?'),
      '#default_value' => variable_get('ms_core_profile2_checkout_integration', FALSE),
      '#description' => t('This will let anonymous users fill in the profile 2 fields during checkout, but it also requires the user account to be created before payment is received.'),
      '#required' => FALSE,
    );
  }
  $form['checkout']['form_fields']['ms_core_user_fields_checkout_integration'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show the core account fields on the checkout page?'),
    '#default_value' => variable_get('ms_core_user_fields_checkout_integration', FALSE),
    '#description' => t('This will let anonymous users fill in the core user fields during checkout, but it also requires the user account to be created before payment is received.'),
    '#required' => FALSE,
  );

  $form['checkout']['form_fields']['cc'] = array(
    '#type' => 'fieldset',
    '#title' => t('Credit Card Fields'),
    '#collapsed' => TRUE,
    '#collapsible' => TRUE,
  );
  $form['checkout']['form_fields']['billing'] = array(
    '#type' => 'fieldset',
    '#title' => t('Billing Address'),
    '#collapsed' => TRUE,
    '#collapsible' => TRUE,
  );
  $form['checkout']['form_fields']['shipping'] = array(
    '#type' => 'fieldset',
    '#title' => t('Shipping Address'),
    '#collapsed' => TRUE,
    '#collapsible' => TRUE,
  );
  $form['checkout']['form_fields']['cc']['ms_core_billing_show_month_numbers'] = array(
    '#title' => t('Show CC Month Numbers instead of full month names?'),
    '#type' => 'checkbox',
    '#default_value' => variable_get('ms_core_billing_show_month_numbers', FALSE),
  );

  $fields = ms_core_get_checkout_form_fields();
  foreach ($fields as $field => $data) {
    $form['checkout']['form_fields'][$data['group']][$field] = array(
      '#type' => 'fieldset',
      '#title' => $data['name'],
      '#collapsed' => TRUE,
      '#collapsible' => TRUE,
    );
    $form['checkout']['form_fields'][$data['group']][$field]['ms_checkout_form_' . $field . '_title'] = array(
      '#title' => $data['name'] . ' - ' . t('Title'),
      '#type' => 'textfield',
      '#default_value' => variable_get('ms_checkout_form_' . $field . '_title', $data['name']),
      '#size' => 32,
      '#ms_i18n' => TRUE,
    );
    $form['checkout']['form_fields'][$data['group']][$field]['ms_checkout_form_' . $field . '_description'] = array(
      '#title' => $data['name'] . ' - ' . t('Description'),
      '#type' => 'textfield',
      '#default_value' => variable_get('ms_checkout_form_' . $field . '_description', $data['description']),
      '#size' => 80,
      '#ms_i18n' => TRUE,
    );
    $form['checkout']['form_fields'][$data['group']][$field]['ms_checkout_form_' . $field . '_enabled'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enabled?'),
      '#default_value' => variable_get('ms_checkout_form_' . $field . '_enabled', TRUE),
    );
    $form['checkout']['form_fields'][$data['group']][$field]['ms_checkout_form_' . $field . '_required'] = array(
      '#title' => t('Required?'),
      '#type' => 'checkbox',
      '#default_value' => variable_get('ms_checkout_form_' . $field . '_required', $data['required']),
    );

    if (module_exists('profile2')) {
      $form['checkout']['form_fields'][$data['group']][$field]['profile'] = array(
        '#type' => 'fieldset',
        '#title' => t('Profile Integration Settings'),
        '#description' => t('Select which Profile Fields will be used as the default values for this Checkout Form field.'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
      );
      if (!empty($profile_fields)) {
        $form['checkout']['form_fields'][$data['group']][$field]['profile']['ms_core_profile_' . $field] = array(
          '#type' => 'select',
          '#title' => t('Link Profile Field'),
          '#options' => $profile_fields,
          '#default_value' => variable_get('ms_core_profile_' . $field, $data['profile']),
        );
      }
    }
  }

  // Show an option for default country.
  $form['checkout']['ms_core_default_country'] = array(
    '#type' => 'select',
    '#title' => t('Default Country'),
    '#options' => ms_core_get_countries('iso'),
    '#default_value' => variable_get('ms_core_default_country', 'US'),
    '#required' => FALSE,
    '#empty_option' => t('None'),
    '#ms_i18n' => TRUE,
  );

  // Show an option for default state.
  $form['checkout']['ms_core_default_state'] = array(
    '#type' => 'textfield',
    '#title' => t('Default State'),
    '#default_value' => variable_get('ms_core_default_state', ''),
    '#description' => t("Enter the two later state code for the default state."),
    '#ms_i18n' => TRUE,
  );

  $form['advanced'] = array(
    '#type' => 'fieldset',
    '#title' => t('Advanced Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'vertical_tabs',
  );
  $form['advanced']['ms_core_charge_back_payments'] = array(
    '#type' => 'checkbox',
    '#title' => t('Charge all Back Payments?'),
    '#default_value' => variable_get('ms_core_charge_back_payments', FALSE),
    '#description' => t('If this setting is checked, MS Core will attempt to charge all back payments if a customer updates their billing information and there are multiple missed payments. Otherwise, it will only attempt to charge 1 back-payment, and continue from there.'),
    '#required' => FALSE,
  );
  $form['advanced']['ms_core_allow_multi_recurring'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow orders to have more than 1 Recurring product at a time?'),
    '#default_value' => variable_get('ms_core_allow_multi_recurring', FALSE),
    '#description' => t("This is still experimental and is only supported by one payment gateway: Stripe. If you don't have a supported gateway installed, this won't work."),
    '#required' => FALSE,
  );
  $form['email'] = array(
    '#type' => 'fieldset',
    '#title' => t('Email Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#ms_override' => TRUE,
    '#group' => 'vertical_tabs',
  );
  $form['email']['ms_core_store_email'] = array(
    '#type' => 'textfield',
    '#title' => t('Store Email'),
    '#description' => t('Enter the admin email you wish to use as the Sender for emails.
      If left blank, the Site Email will be used.'),
    '#default_value' => variable_get('ms_core_store_email', ''),
    '#required' => FALSE,
    '#ms_override' => TRUE,
    '#ms_i18n' => TRUE,
  );
  $form['email']['ms_core_payment_reminder_days'] = array(
    '#type' => 'textfield',
    '#title' => t('Upcoming Payment Reminder Days'),
    '#description' => t('How many days before a payment should the user be notified? Set to 0 to disable the email reminder.'),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_core_payment_reminder_days', '0'),
    '#ms_override' => TRUE,
    '#ms_i18n' => TRUE,
  );
  $form['email']['ms_core_upcoming_payment_mail_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Upcoming Payment Reminder Mail Subject'),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_core_upcoming_payment_mail_subject', t("Upcoming Payment")),
    '#ms_i18n' => TRUE,
  );
  $form['email']['ms_core_upcoming_payment_mail_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Upcoming Payment Reminder Mail Body'),
    '#description' => t("Leave blank to not send an email."),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_core_upcoming_payment_mail_body', t("This email is a reminder that you have a payment scheduled for [ms_core_order:nextPaymentDate] for [ms_core_order:nextPaymentAmount].

Sincerely,
Site Admin")),
    '#ms_i18n' => TRUE,
  );
  $form['email']['ms_core_upcoming_payment_mail_token_help']['tokens'] = array(
    '#theme' => 'token_tree',
    '#token_types' => array('ms_core_order', 'user'),
    '#dialog' => TRUE,
  );

  $form['email']['ms_core_order_thankyou_mail_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Order - Thank You Mail Subject'),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_core_order_thankyou_mail_subject', t("Thank You")),
    '#ms_override' => TRUE,
    '#ms_i18n' => TRUE,
  );
  $form['email']['ms_core_order_thankyou_mail_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Order - Thank You Mail Body'),
    '#description' => t("This email is sent whenever a non-recurring order is completed or a recurring order is started. Leave blank to not send an email."),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_core_order_thankyou_mail_body', ''),
    '#ms_override' => TRUE,
    '#ms_i18n' => TRUE,
  );
  $form['email']['ms_core_order_thankyou_mail_token_help']['tokens'] = array(
    '#theme' => 'token_tree',
    '#token_types' => array('ms_core_order', 'ms_core_payment', 'user'),
    '#dialog' => TRUE,
  );

  $form['invoice'] = array(
    '#type' => 'fieldset',
    '#title' => t('Invoice Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'vertical_tabs',
  );
  $form['invoice']['ms_core_pdfcrowd_support'] = array(
    '#type' => 'checkbox',
    '#title' => t("Save as PDF support by PDF Crowd"),
    '#default_value' => variable_get('ms_core_pdfcrowd_support', FALSE),
    '#description' => t("This will add a link in the Print view of an Invoice that
      will let the user save the invoice as a PDF through PDF Crowd."),
  );
  $form['invoice']['ms_core_invoice_header'] = array(
    '#type' => 'textarea',
    '#title' => t('Invoice Header'),
    '#description' => t("Enter the text that you wish to show on the invoice header.
      Suggestions include your business name, address, and contact info."),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_core_invoice_header', "<h2>[site:name]</h2><h4>[site:slogan]</h4>"),
    '#ms_i18n' => TRUE,
  );
  $form['invoice']['ms_core_invoice_header_token_help']['tokens'] = array(
    '#theme' => 'token_tree',
    '#token_types' => array('ms_core_order', 'user'),
    '#dialog' => TRUE,
  );

  return system_settings_form($form);
}

/**
 * AJAX callback for the default country selector.
 */
function ms_core_admin_settings_country_callback($form, $form_state) {
  return $form['checkout']['form_fields']['billing']['billing_state']['ms_core_default_state'];
}

/**
 * Form validation handler for ms_core_admin_form().
 *
 * Validates the admin settings form, rebuild cache if the keys were changed.
 */
function ms_core_admin_validate($form, &$form_state) {
   cache_clear_all('ms_updates', 'cache');
   cache_clear_all('ms_requirements', 'cache');
}

/**
 * Implements hook_block_info().
 */
function ms_core_block_info() {
  $blocks['ms_core_cart'] = array(
    'info' => t('MS Shopping Cart'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function ms_core_block_configure($delta = '') {
  $form = array();
  if ($delta == 'ms_core_cart') {
    $form['ms_core_cart_block_help_text'] = array(
      '#type' => 'textfield',
      '#title' => t('Help Text'),
      '#size' => 60,
      '#description' => t('Specify some help text that will appear at the bottom of the Cart Block.'),
      '#default_value' => variable_get('ms_core_cart_block_help_text', ''),
    );
    $form['ms_core_cart_block_empty_hide'] = array(
      '#type' => 'checkbox',
      '#title' => t('Hide block if cart is empty.'),
      '#default_value' => variable_get('ms_core_cart_block_empty_hide', FALSE),
    );
  }
  return $form;
}

/**
 * Implements hook_block_save().
 */
function ms_core_block_save($delta = '', $edit = array()) {
  if ($delta == 'ms_core_cart') {
    variable_set('ms_core_cart_block_help_text', $edit['ms_core_cart_block_help_text']);
    variable_set('ms_core_cart_block_empty_hide', $edit['ms_core_cart_block_empty_hide']);
  }
  return;
}

/**
 * Implements hook_block_view().
 */
function ms_core_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'ms_core_cart':
      $block['subject'] = t('Shopping Cart');
      $cart_contents = ms_core_get_cart_block_html(variable_get('ms_core_cart_block_empty_hide', FALSE), variable_get('ms_core_cart_block_help_text', ''));
      $block['content'] = $cart_contents;
      break;
  }
  return $block;
}

/**
 * Sets the Order ID in the SESSION.
 *
 * @param MsOrder $order
 *   The order object.
 */
function ms_core_set_order_session(MsOrder $order) {
  $_SESSION['ms_oid'] = $order->oid;
}

/**
 * Displays the messages associated with this order.
 *
 * @param MsOrder $order
 *   The order object.
 */
function ms_core_show_order_messages(MsOrder $order) {
  foreach ($order->products as $product) {
    if (isset($product->data['messages']) && is_array($product->data['messages'])) {
      foreach ($product->data['messages'] as $message) {
        drupal_set_message(filter_xss($message));
      }
    }
  }
}

/**
 * Page callback: Shows the order history in the user account.
 *
 * @param object $account
 *   The user object.
 *
 * @see ms_core_menu()
 */
function ms_core_history($account) {
  global $user;
  $output = t("View your Order History Here") . "<br />";
  $headers = array(
    array(
      'data' => t('Order #'),
      'class' => array('ms_user_history_oid_header'),
    ),
    array(
      'data' => t('Created'),
      'class' => array('ms_user_history_created_header'),
    ),
    array(
      'data' => t('Products'),
      'class' => array('ms_user_history_products_header'),
    ),
    array(
      'data' => t('Status'),
      'class' => array('ms_user_history_status_header'),
    ),
    array(
      'data' => t('Total'),
      'class' => array('ms_user_history_total_header'),
    ),
    array(
      'data' => t('Actions'),
      'class' => array('ms_user_history_actions_header'),
    ),
  );
  $attr = array();
  $rows = array();
  $orders = ms_core_get_orders($account->uid);
  foreach ($orders as $order) {
    $actions = array();
    $actions[] = l(t('View Details'), 'user/' . $account->uid . '/order-history/view/' . $order->order_key);
    if ($order->status == 'checkout' && $user->uid == $order->uid) {
      $actions[] = l(t('Checkout'), 'ms/resume-checkout/' . $order->order_key);
      $actions[] = l(t('Delete'), 'user/' . $user->uid . '/order-history/delete/' . $order->order_key);
    }

    if (user_access('administer moneysuite orders')) {
      $actions[] = l(t('Edit'), 'admin/moneysuite/orders/edit/' . $order->order_key);
    }

    $rows[] = array(
      array(
        'data' => $order->order_number,
        'class' => array('ms_user_history_oid'),
      ),
      array(
        'data' => format_date($order->created),
        'class' => array('ms_user_history_created'),
      ),
      array(
        'data' => ms_core_list_products($order),
        'class' => array('ms_user_history_products'),
      ),
      array(
        'data' => ms_core_get_order_status($order->status),
        'class' => array('ms_user_history_status'),
      ),
      array(
        'data' => ms_core_format_money($order->total, $order->currency, 'order_total'),
        'class' => array('ms_user_history_total'),
      ),
      array(
        'data' => implode($actions, ' | '),
        'class' => array('ms_user_history_actions'),
      ),
    );
  }

  // Output the table.
  $output .= theme('table', array('header' => $headers, 'rows' => $rows, 'attributes' => $attr, 'empty' => t('No history.')));
  return $output;
}

/**
 * Begins the checkout process.
 *
 * @ingroup ms_core_api
 */
function ms_core_checkout() {
  // Stop the caching.
  $GLOBALS['conf']['cache'] = FALSE;

  drupal_goto('ms/checkout');
}

/**
 * Generates a random transaction id.
 *
 * @param mixed $object
 *   Some variables to use for seeding the id.
 *
 * @return string
 *   A random transaction id.
 */
function ms_core_new_transaction($object) {
  return drupal_get_token(serialize($object));
}

/**
 * Gets the field title.
 *
 * @param string $field
 *   The field name.
 *
 * @return string
 *   The field title.
 */
function ms_core_get_checkout_field_title($field) {
  $fields = ms_core_get_checkout_form_fields();

  return check_plain(variable_get('ms_checkout_form_' . $field . '_title', $fields[$field]['name']));
}

/**
 * Gets the field description.
 *
 * @param string $field
 *   The field name.
 *
 * @return string
 *   The field description.
 */
function ms_core_get_checkout_field_description($field) {
  $fields = ms_core_get_checkout_form_fields();

  return check_plain(variable_get('ms_checkout_form_' . $field . '_description', $fields[$field]['description']));
}

/**
 * Gets the checkout field defaults.
 *
 * @param string $type
 *   (optional) The type of fields to get. Could be 'all', 'cc', 'billing', or
 *   'shipping'. Defaults to 'all'.
 *
 * @return array
 *   An array of fields with their defaults set.
 */
function ms_core_get_checkout_form_fields($type = 'all') {
  $fields = array();
  if ($type == 'all' || $type == 'cc') {
    $fields['cc_first_name'] = array(
      'name' => t('First name'),
      'required' => TRUE,
      'profile' => '',
      'type' => 'textfield',
      'size' => 32,
      'description' => t('Enter your first name as it appears on the card'),
      'group' => 'cc',
    );
    $fields['cc_last_name'] = array(
      'name' => t('Last name'),
      'required' => TRUE,
      'profile' => '',
      'type' => 'textfield',
      'size' => 32,
      'description' => t('Enter your last name as it appears on the card'),
      'group' => 'cc',
    );
  }
  if ($type == 'all' || $type == 'billing') {
    $fields['billing_address1'] = array(
      'name' => variable_get('ms_checkout_form_billing_address1_title', t('Street address 1')),
      'required' => TRUE,
      'profile' => '',
      'type' => 'textfield',
      'size' => 80,
      'description' => '',
      'group' => 'billing',
    );
    $fields['billing_address2'] = array(
      'name' => variable_get('ms_checkout_form_billing_address2_title', t('Street address 2')),
      'required' => FALSE,
      'profile' => '',
      'type' => 'textfield',
      'size' => 80,
      'description' => '',
      'group' => 'billing',
    );
    $fields['billing_city'] = array(
      'name' => variable_get('ms_checkout_form_billing_city_title', t('City')),
      'required' => TRUE,
      'profile' => '',
      'type' => 'textfield',
      'size' => 32,
      'description' => '',
      'group' => 'billing',
    );
    $fields['billing_state'] = array(
      'name' => variable_get('ms_checkout_form_billing_state_title', t('State')),
      'required' => FALSE,
      'profile' => '',
      'type' => 'textfield',
      'size' => 32,
      'description' => t('Enter the two letter state code'),
      'group' => 'billing',
    );
    $fields['billing_country'] = array(
      'name' => variable_get('ms_checkout_form_billing_country_title', t('Country')),
      'required' => TRUE,
      'profile' => '',
      'type' => 'select',
      'size' => 1,
      'description' => '',
      'group' => 'billing',
    );
    $fields['billing_zip'] = array(
      'name' => variable_get('ms_checkout_form_billing_zip_title', t('Zip code')),
      'required' => TRUE,
      'profile' => '',
      'type' => 'textfield',
      'size' => 32,
      'description' => '',
      'group' => 'billing',
    );
    $fields['billing_phone'] = array(
      'name' => variable_get('ms_checkout_form_billing_phone_title', t('Phone number')),
      'required' => FALSE,
      'profile' => '',
      'type' => 'textfield',
      'size' => 32,
      'description' => '',
      'group' => 'billing',
    );
    $fields['billing_email'] = array(
      'name' => t('Email address'),
      'required' => TRUE,
      'profile' => 'account_mail',
      'type' => 'textfield',
      'size' => 32,
      'description' => '',
      'group' => 'billing',
    );
  }
  if ($type == 'all' || $type == 'shipping') {
    $fields['shipping_first_name'] = array(
      'name' => t('First name'),
      'required' => TRUE,
      'profile' => '',
      'type' => 'textfield',
      'size' => 32,
      'description' => t('First Name of Shipping Address'),
      'group' => 'shipping',
    );
    $fields['shipping_last_name'] = array(
      'name' => t('Last name'),
      'required' => TRUE,
      'profile' => '',
      'type' => 'textfield',
      'size' => 32,
      'description' => t('Last Name of Shipping Address'),
      'group' => 'shipping',
    );
    $fields['shipping_address1'] = array(
      'name' => variable_get('ms_checkout_form_shipping_address1_title', t('Street address 1')),
      'required' => TRUE,
      'profile' => '',
      'type' => 'textfield',
      'size' => 80,
      'description' => '',
      'group' => 'shipping',
    );
    $fields['shipping_address2'] = array(
      'name' => variable_get('ms_checkout_form_shipping_address2_title', t('Street address 2')),
      'required' => FALSE,
      'profile' => '',
      'type' => 'textfield',
      'size' => 80,
      'description' => '',
      'group' => 'shipping',
    );
    $fields['shipping_city'] = array(
      'name' => variable_get('ms_checkout_form_shipping_city_title', t('City')),
      'required' => TRUE,
      'profile' => '',
      'type' => 'textfield',
      'size' => 32,
      'description' => '',
      'group' => 'shipping',
    );
    $fields['shipping_state'] = array(
      'name' => variable_get('ms_checkout_form_shipping_state_title', t('State')),
      'required' => FALSE,
      'profile' => '',
      'type' => 'select',
      'description' => '',
      'size' => 1,
      'group' => 'shipping',
    );
    $fields['shipping_country'] = array(
      'name' => variable_get('ms_checkout_form_shipping_country_title', t('Country')),
      'required' => TRUE,
      'profile' => '',
      'type' => 'select',
      'size' => 1,
      'description' => '',
      'group' => 'shipping',
    );
    $fields['shipping_zip'] = array(
      'name' => variable_get('ms_checkout_form_shipping_zip_title', t('Zip code')),
      'required' => TRUE,
      'profile' => '',
      'type' => 'textfield',
      'size' => 32,
      'description' => '',
      'group' => 'shipping',
    );
    $fields['shipping_phone'] = array(
      'name' => variable_get('ms_checkout_form_shipping_phone_title', t('Phone number')),
      'required' => FALSE,
      'profile' => '',
      'type' => 'textfield',
      'size' => 32,
      'description' => '',
      'group' => 'shipping',
    );
  }

  return $fields;
}

/**
 * Implements hook_ms_order_assign_user().
 */
function ms_core_ms_order_assign_user($type, MsProduct $product, MsOrder $order, MsPayment $payment) {
  if (isset($order->data['register_form']['email1']) && isset($order->data['register_form']['email1'])) {
    // Check if an account should be created.
    switch ($type) {
      case 'cart':
      case 'rec_signup':
        ms_core_log('ms_core', 'Assigning a user to an Order: <br />Order: !order <br />Payment: !payment',
          array('!order' => ms_core_print_r($order), '!payment' => ms_core_print_r($payment)));

        // Register the User once they have paid.
        $pass = !empty($order->data['register_form']['password1']) ? $order->data['register_form']['password1'] : user_password();
        $name = !empty($order->data['register_form']['username']) ? $order->data['register_form']['username'] : ms_core_create_username($order->data['register_form']['email1']);
        $roles = array();

        $account = user_save('', array_merge($order->data['register_form'], array(
          'name' => $name,
          'mail' => $order->data['register_form']['email1'],
          'init' => $order->data['register_form']['email1'],
          'pass' => $pass,
          'roles' => $roles,
          'status' => 1,
        )));

        $account->password = $pass;
        //Send the Default Email.
        if (variable_get('ms_core_send_registration_mail', TRUE)) {
          _user_mail_notify('register_no_approval_required', $account);
        }

        $order->uid = $account->uid;
        ms_core_order_save($order);
        break;

      case 'rec_payment':
        ms_core_log('ms_core', 'Waiting for Signup notification: Payment Type: !type<br />Product: !product <br />Payment: !payment',
          array(
            '!type' => $type,
            '!product' => ms_core_print_r($product),
            '!payment' => ms_core_print_r($payment),
          ));
        for ($counter = 1; $counter <= 10; $counter += 1) {
          $order = ms_core_order_load($order->oid);
          if ($order->uid) {
            break;
          }
          sleep(5);
        }
        break;
    }
  }
}

/**
 * Creates a Username from an email address.
 *
 * @param string $mail
 *   The email address.
 *
 * @return string
 *   A username.
 */
function ms_core_create_username($mail) {
  preg_match("/^(.+)@.+\..+/", $mail, $matches);
  $name = $matches[1];
  $temp_name = $name;
  $count = 0;
  while (1) {
    $count += 1;
    if ($name_account = user_load_by_name($temp_name)) {
      $temp_name = $name . $count;
    } else {
      break;
    }
  }

  return $temp_name;
}

/**
 * Gets an add to cart form for the given product.
 *
 * @param MsProduct $product
 *   The product.
 * @param string $text
 *   (optional) The text to display for the add to cart button. Defaults to
 *   'Add to cart'.
 *
 * @return string
 *   The add to cart form html.
 *
 * @ingroup ms_core_api
 */
function ms_core_get_add_to_cart_button(MsProduct $product, $text = '') {
  if (!$text) {
    $text = t('Add to cart');
  }
  $add_to_cart_form = drupal_get_form('ms_core_add_to_cart_form_' . $product->id, $product, $text);
  return drupal_render($add_to_cart_form);
}

/**
 * Form contructor for the Add to cart button.
 *
 * @param MsProduct $product
 *   The product.
 * @param string $text
 *   (optional) The text to display for the add to cart button. Defaults to
 *   'Add to cart'.
 *
 * @see ms_core_add_to_cart_form_submit()
 * @ingroup forms
 */
function ms_core_add_to_cart_form($form, &$form_state, MsProduct $product, $text) {
  $form['#attributes']['class'][] = 'ms-core-add-to-cart-form';
  $form['#attributes']['class'][] = 'clearfix';
  $form['product'] = array(
    '#type' => 'value',
    '#value' => $product,
  );

  $form['price'] = array(
    '#type' => 'item',
    '#title' => t('Price'),
    '#markup' => ms_core_format_money($product->amount),
  );

  // Add the product specific adjustments here.
  if (!empty($product->data['adjustments'])) {
    $form['options']['#tree'] = TRUE;
    foreach ($product->data['adjustments'] as $adjustment_id => $adjustment) {
      $adjustment->adjustment_id = $adjustment_id;
      if (!empty($adjustment->optional) || !empty($adjustment->options)) {
        $adjustment_widget = ms_core_optional_adjustment_form($form, $form_state, $adjustment);
        $form['options'][$adjustment_id] = $adjustment_widget['optional_' . $adjustment_id];
        unset($form['options'][$adjustment_id]['#ajax']);
      }
    }
  }

  // If the product has allow_multiple, show a widget to choose the amount.
  if (!empty($product->data['allow_multiple'])) {
    $form['qty'] = array(
      '#type' => 'textfield',
      '#title' => t('Qty'),
      '#element_validate' => array('ms_core_qty_validate'),
      '#required' => TRUE,
      '#size' => '5',
      '#default_value' => $product->qty,
    );
    if (!empty($product->data['qty_available'])) {
      $max_qty = $product->data['qty_available'];
      $form['qty']['#title'] .= ' ' . t('@num available', array('@num' => $max_qty));
    }

    $form['qty']['#attributes']['class'][] = 'ms_quantity_box';
    $form['#attached']['css'] = array(
      //drupal_get_path('module', 'ms_core') . '/js/smartspinner/smartspinner.css',
      drupal_get_path('module', 'ms_core') . '/css/ms_core.css',
    );

    if (!empty($product->data['qty_validate'])) {
      $form['qty']['#element_validate'][] = $product->data['qty_validate'];
    }
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => $text,
  );

  return $form;
}

/**
 * Field validation handler for the qty field.
 */
function ms_core_qty_validate($element, &$form_state, $form) {
  if (empty($element['#value'])) {
    form_error($element, t('This field is required.'));
  }
  if (!is_numeric($element['#value'])) {
    form_error($element, t('You must enter a number.'));
  }
}

/**
 * Implements hook_forms().
 *
 * We need this because there can be multiple add to cart forms on a page.
 */
function ms_core_forms($form_id, $args) {
  if (strpos($form_id, 'ms_core_add_to_cart_form') !== FALSE) {
    $product = $args[0];
    if ($form_id == 'ms_core_add_to_cart_form_' . $product->id) {
      $forms = array();
      $forms[$form_id] = array('callback' => 'ms_core_add_to_cart_form');
      return $forms;
    }
  }
  if (strpos($form_id, 'ms_cart_qty_widget_form') !== FALSE) {
    $product = $args[1];
    if ($form_id == 'ms_cart_qty_widget_form_' . $product->cart_product_id) {
      $forms = array();
      $forms[$form_id] = array('callback' => 'ms_cart_qty_widget_form');
      return $forms;
    }
  }
  if (strpos($form_id, 'ms_core_optional_adjustment_form') !== FALSE) {
    $adjustment = $args[0];
    if ($form_id == 'ms_core_optional_adjustment_form_' . $adjustment->adjustment_id) {
      $forms = array();
      $forms[$form_id] = array('callback' => 'ms_core_optional_adjustment_form');
      return $forms;
    }
  }
}

/**
 * Form submission handler for ms_core_add_to_cart_form().
 *
 * Adds the product to the cart.
 */
function ms_core_add_to_cart_form_submit($form, &$form_state) {
  $product = $form_state['values']['product'];

  // Set the appropriate quantity.
  if (!empty($form_state['values']['qty'])) {
    $product->qty = $form_state['values']['qty'];
  }

  // Set the selected options.
  if (!empty($form_state['values']['options'])) {
    foreach ($form_state['values']['options'] as $adjustment_id => $value) {
      if (!empty($product->data['adjustments'][$adjustment_id]['options'])) {
        $product->data['adjustments'][$adjustment_id]['active'] = TRUE;
        $product->data['adjustments'][$adjustment_id]['option'] = $value;
        $product->data['adjustments'][$adjustment_id]['display'] .= ": " . $product->data['adjustments'][$adjustment_id]['options'][$value]['name'];
        $product->data['adjustments'][$adjustment_id]['value'] = !empty($product->data['adjustments'][$adjustment_id]['options'][$value]['price']) ? $product->data['adjustments'][$adjustment_id]['options'][$value]['price'] : 0;
      } else {
        $product->data['adjustments'][$adjustment_id]['active'] = $value;
      }
    }
  }

  ms_core_add_cart_product($product, TRUE);

  // Go to checkout page directly if it is specified.
  if (!empty($product->data['go_checkout'])) {
    ms_core_checkout();
  }

  // Go to checkout page directly if it is specified.
  if (!empty($product->data['cart_redirect'])) {
    drupal_goto($product->data['cart_redirect']);
  }
}

/**
 * Logs an error in the database by wrapping watchdog().
 *
 * @param string $type
 *   The type of message.
 * @param string $message
 *   The message to log.
 * @param array $args
 *   (optional) Args for use in t().
 * @param int $severity
 *   (optional) The severity of the message. Defaults to WATCHDOG_ERROR.
 * @param string $link
 *   (optional) The link to use with the watchodg message.
 *
 * @ingroup ms_core_api
 */
function ms_core_log_error($type, $message, $args = array(), $severity = WATCHDOG_ERROR, $link = NULL) {
  if (function_exists('ddebug_backtrace')) {
    $trace = ddebug_backtrace();
  } else {
    $trace = debug_backtrace();
  }
  $file = isset($trace[1]['file']) ? $trace[1]['file'] : $trace[0]['file'];
  $line = isset($trace[1]['line']) ? $trace[1]['line'] : $trace[0]['line'];

  $location = "Logged at $file line $line";

  watchdog($type, $message . '<br />' . $location, $args, $severity, $link);

  // Also send an email to the admin if this is a critical error.
  if ($severity == WATCHDOG_CRITICAL) {
    $log_id = db_query("SELECT 1", array(), array('return' => Database::RETURN_INSERT_ID));
    $params = array(
      'log_id' => $log_id,
    );
    drupal_mail('ms_core', 'admin_error', variable_get('ms_core_store_email', variable_get('site_mail', '')), LANGUAGE_NONE, $params);
  }
}

/**
 * Log a message in the database by wrapping watchdog().
 *
 * @param string $type
 *   The type of message.
 * @param string $message
 *   The message to log.
 * @param array $args
 *   (optional) Args for use in t().
 * @param bool $always_log
 *   (optional) If the message should be always logged, even if
 *   'ms_core_debug_mode' is set to FALSE. Defaults to FALSE.
 * @param int $severity
 *   (optional) The severity of the message. Defaults to WATCHDOG_NOTICE.
 * @param string $link
 *   (optional) The link to use with the watchodg message.
 *
 * @ingroup ms_core_api
 */
function ms_core_log($type, $message, $args = array(), $always_log = FALSE, $severity = WATCHDOG_NOTICE, $link = NULL) {
  $trace = debug_backtrace();
  $file = isset($trace[1]['file']) ? $trace[1]['file'] : $trace[0]['file'];
  $line = isset($trace[1]['line']) ? $trace[1]['line'] : $trace[0]['line'];

  $location = "Logged at $file line $line";

  if ($always_log OR variable_get('ms_core_debug_mode', FALSE)) {
    watchdog($type, $message . '<br />' . $location, $args, $severity, $link);
  }
}

/**
 * Displays and/or logs a var for debug purposes.
 *
 * If the devel module is enabled, dpm() will be used instead of
 * drupal_set_message().
 *
 * @param mixed $var
 *   The variable to display.
 * @param bool $set_message
 *   (optional) Whether the message should be displayed to the screen as well.
 *   Defaults to TRUE.
 *
 * @see watchdog()
 * @see drupal_set_message()
 */
function ms_core_debug($var, $set_message = TRUE) {
  if (variable_get('ms_core_debug_mode', FALSE)) {
    $trace = debug_backtrace();
    $file = isset($trace[1]['file']) ? $trace[1]['file'] : $trace[0]['file'];
    $line = isset($trace[1]['line']) ? $trace[1]['line'] : $trace[0]['line'];

    $message = ms_core_print_r($var) . '<br /> ' . "Logged at $file line $line";

    if ($set_message) {
      if (function_exists('dpm')) {
        dpm($var);
      } else {
        // @ignore security_dsm
        drupal_set_message($message);
      }
    }

    watchdog('debug', $message, array(), WATCHDOG_DEBUG);
  }
}

/**
 * Debug with backtrace.
 *
 * @param bool $log
 *   Whether to log the trace.
 */
function ms_backtrace($log = FALSE) {
  $trace = debug_backtrace();

  array_shift($trace);

  if (function_exists('dpm')) {
    dpm($trace);
  } else {
    // @ignore security_2
    drupal_set_message(ms_core_print_r($trace));
  }

  if ($log) {
    ms_core_debug($trace, FALSE);
  }
}

/**
 * Wraps a print_r of a variable with pre tags.
 *
 * @param $var
 *   The variable to print_r.
 *
 * @return string
 *   The print_r'd variable
 */
function ms_core_print_r($var) {
  return '<pre>' . print_r($var, TRUE) . '</pre>';
}

/**
 * Uses Google to get an exchange rate between two currencies.
 *
 * @param string $from
 *   The currency to get the rate from, ex: USD.
 * @param string $to
 *   The currency to get the rate to, ex: EUR.
 *
 * @return float
 *   Returns the exchange rate as a float.
 */
function ms_core_get_exchange_rate_from_google($from, $to) {
  $google_url = "http://www.google.com/ig/calculator?hl=en&q=1" . $from . "=?" . $to;
  $result = file_get_contents($google_url);
  $result = explode('"', $result);
  $converted_amount = explode(' ', $result[3]);
  $conversion = $converted_amount[0];
  $conversion = round($conversion, 2);
  $rhs_text = ucwords(str_replace($converted_amount[0], "", $result[3]));
  $rhs = $conversion . $rhs_text;
  $rate = (float)preg_replace('_^\D+|\D+$_', "", $rhs);
  return $rate > 0 ? $rate : FALSE;
}

/**
 * Gets an exchange rate between two currencies.
 *
 * @param string $from
 *   The currency to get the rate from, ex: USD.
 * @param string $to
 *   The currency to get the rate to, ex: EUR.
 *
 * @return float
 *   Returns the exchange rate as a float.
 *
 * @ingroup ms_core_api
 */
function ms_core_get_currency_exchange_rate($from, $to) {
  // Attempt to fetch from cache first.
  if ($cache = cache_get('ms_core_currency_rate_' . $from . '_' . $to, 'cache')) {
    // Attempt to fetch new data if it is available and is more than 24 hours
    // old.
    if (strtotime("+24 hours", $cache->created) < time()) {
      if ($rate = ms_core_get_exchange_rate_from_google($from, $to)) {
        // Set the cache.
        cache_set('ms_core_currency_rate_' . $from . '_' . $to, $rate, 'cache', CACHE_PERMANENT);
        return $rate;
      }
    }

    return $cache->data;
  } else {
    // Attempt to fetch new data for the first time.
    if ($rate = ms_core_get_exchange_rate_from_google($from, $to)) {
      // Set the cache.
      cache_set('ms_core_currency_rate_' . $from . '_' . $to, $rate, 'cache', CACHE_PERMANENT);
      return $rate;
    } else {
      ms_core_log_error('ms_core', 'There was an error getting the Exchange Rates.');
      return FALSE;
    }
  }
}

/**
 * Converts from one currency to another.
 *
 * @param string $from
 *   The old currency.
 * @param string $to
 *   The new currency.
 * @param float $amount
 *   The amount in the old currency.
 *
 * @return float
 *   The amount in the new currency.
 *
 * @ingroup ms_core_api
 */
function ms_core_convert_currency($from, $to, $amount) {
  if ($rate = ms_core_get_currency_exchange_rate($from, $to)) {
    return round($amount * $rate, 2);
  } else {
    return FALSE;
  }
}

/**
 * Gets the order details table.
 *
 * @param MsOrder $order
 *   The Order to get the Details for.
 * @param bool $cart
 *   (optional) Whether this is a cart. Defaults to FALSE.
 *
 * @return string
 *   A themed table displaying all of the details of an order.
 *
 * @ingroup ms_core_api
 */
function ms_core_get_order_details_table(MsOrder $order, $cart = FALSE) {
  // Add the CSS
  drupal_add_css(drupal_get_path('module', 'ms_core') . '/ms_core.css');

  if (count($order->products)) {
    $headers = array(
      array(
        'data' => t('Item'),
        'class' => array('ms_item'),
        'sort' => 'desc',
      ),
      array(
        'data' => t('Price'),
        'class' => array('ms_price'),
        'sort' => 'desc',
      ),
    );
    $rows = array();

    // Show the Order Items.
    ms_core_get_order_items_html($rows, $order, $cart);

    // Show the Subtotal.
    if (variable_get('ms_core_show_subtotal', TRUE)) {
      $rows[] = array(
        'data' => array(
          array(
            'data' => t('Subtotal') . ': ' . ms_core_get_order_subtotal_html($order),
            'colspan' => 2,
          ),
        ),
        'class' => array('ms_subtotal'),
      );
    }

    // Show the Adjustments.
    ms_core_get_adjustments_html($rows, $order);

    // Show the Total.
    $rows[] = array(
      'data' => array(
        array(
          'data' => t('Total') . ': ' . ms_core_get_order_total_html($order),
          'header' => TRUE,
          'colspan' => 2,
        ),
      ),
      'class' => array('ms_total'),
    );

    drupal_alter('ms_cart_table', $rows, $order, $cart);

    $build = array(
      '#prefix' => "<div id='ms-core-order-items-table'>",
      '#suffix' => "</div>",
      'ms_order_info_table' => array(
        '#markup' => theme('table', array('header' => $headers, 'rows' => $rows, 'attributes' => array('class' => array('ms_order_items')))),
      ),
    );
    // If auto-bill is optional, show a checkbox.
    if (!empty($order->data['recurring_optional']) && count($order->products) == 1) {
      $build['ms_autobill_option'] = drupal_get_form('ms_core_autobill_option_form', $order, $cart);
    }
    return drupal_render($build);
  } else { // There are no products in the cart.
    return t('There are currently no products in your shopping cart.');
  }
}

/**
 * Gets the order payments table.
 *
 * @param MsOrder $order
 *   The Order to get the Payments for.
 *
 * @return string
 *   A themed table displaying all of the payments of an order.
 *
 * @ingroup ms_core_api
 */
function ms_core_get_order_payments_table(MsOrder $order) {
  // Add the CSS.
  drupal_add_css(drupal_get_path('module', 'ms_core') . '/css/ms_core.css');

  if (count($order->payments)) {
    $headers = array(
      array(
        'data' => t('Date'),
        'class' => array('ms_payments_date'),
        'sort' => 'desc',
      ),
      array(
        'data' => t('Type'),
        'class' => array('ms_payments_type'),
        'sort' => 'desc',
      ),
      array(
        'data' => t('Transaction ID'),
        'class' => array('ms_payments_txn'),
      ),
      array(
        'data' => t('Amount'),
        'class' => array('ms_payments_amount'),
        'sort' => 'desc',
      ),
    );
    $rows = array();

    foreach ($order->payments as $payment) {
      $rows[] = array(
        format_date($payment->created),
        ms_core_get_payment_type($payment->type),
        $payment->transaction,
        ms_core_format_money($payment->amount, $payment->currency, 'payment_amount'),
      );
    }

    // Show the next payment if it is recurring.
    if ($order->order_type == 'recurring') {
      $recurring_schedule = ms_core_load_recurring_schedule($order->oid);
      if ($recurring_schedule && $recurring_schedule->next_payment > REQUEST_TIME) {
        $rows[] = array(
          format_date($recurring_schedule->next_payment),
          t('Next Payment'),
          '',
          ms_core_format_money($recurring_schedule->main_amount, $order->currency),
        );
      }
    }

    $build = array();

    $build['content']['ms_core_payments_table']['#markup'] = theme('table', array('header' => $headers, 'rows' => $rows, 'attributes' => array(
      'class' => array('ms_order_table'),
      'id' => 'ms-core-order-history-table',
    ), 'empty' => t('No payments yet.'), 'caption' => t('Payments')));

    return $build;
  } else {
    // There are no products in the cart.
    return t('There are currently no payments associated with this order.');
  }
}

/**
 * Gets the order customer information table.
 *
 * @param MsOrder $order
 *   The Order to get the customer information for.
 *
 * @return string
 *   A themed table displaying all of the customer information of an order.
 *
 * @ingroup ms_core_api
 */
function ms_core_get_order_customer_information_table(MsOrder $order) {
  // Add the CSS.
  drupal_add_css(drupal_get_path('module', 'ms_core') . '/css/ms_core.css');

  $headers = array();

  $rows = array();

  if ($order->first_name) {
    $rows[] = array(
      'data' => array(t('Name'), $order->first_name . ' ' . $order->last_name),
      'class' => array('ms_order_address_name'),
    );
  }
  if ($order->billing_address['street']) {
    $rows[] = array(
      'data' => array(variable_get('ms_checkout_form_billing_address1_title', t('Street')), $order->billing_address['street']),
      'class' => array('ms_order_address_street'),
    );
  }
  if ($order->billing_address['city']) {
    $rows[] = array(
      'data' => array(variable_get('ms_checkout_form_billing_city_title', t('City')), $order->billing_address['city']),
      'class' => array('ms_order_address_city'),
    );
  }
  if ($order->billing_address['state']) {
    $rows[] = array(
      'data' => array(variable_get('ms_checkout_form_billing_state_title', t('State')), $order->billing_address['state']),
      'class' => array('ms_order_address_state'),
    );
  }
  if ($order->billing_address['zip']) {
    $rows[] = array(
      'data' => array(variable_get('ms_checkout_form_billing_zip_title', t('Zip')), $order->billing_address['zip']),
      'class' => array('ms_order_address_zip'),
    );
  }
  if ($order->billing_address['country']) {
    $rows[] = array(
      'data' => array(variable_get('ms_checkout_form_billing_country_title', t('Country')), $order->billing_address['country']),
      'class' => array('ms_order_address_country'),
    );
  }
  if ($order->billing_address['phone']) {
    $rows[] = array(
      'data' => array(variable_get('ms_checkout_form_billing_phone_title', t('Phone')), $order->billing_address['phone']),
      'class' => array('ms_order_address_phone'),
    );
  }
  if ($order->email_address) {
    $rows[] = array(
      'data' => array(t('Email'), $order->email_address),
      'class' => array('ms_order_email_address'),
    );
  }

  $billing_address = theme('table', array('header' => $headers, 'rows' => $rows, 'attributes' => array(
    'class' => array('ms_order_table'),
    'id' => 'ms-core-order-customer-information-table',
  ), 'caption' => t('Customer Information')));

  // Show the shipping information too.
  $rows = array();
  if ($order->shipping_address['first_name']) {
    $rows[] = array(
      'data' => array(t('Name'), $order->shipping_address['first_name'] . ' ' . $order->shipping_address['last_name']),
      'class' => array('ms_order_address_name'),
    );
  }
  if ($order->shipping_address['street']) {
    $rows[] = array(
      'data' => array(variable_get('ms_checkout_form_shipping_address1_title', t('Street')), $order->shipping_address['street']),
      'class' => array('ms_order_address_street'),
    );
  }
  if ($order->shipping_address['street2']) {
    $rows[] = array(
      'data' => array(variable_get('ms_checkout_form_shipping_address2_title', t('Street 2')), $order->shipping_address['street2']),
      'class' => array('ms_order_address_street2'),
    );
  }
  if ($order->shipping_address['city']) {
    $rows[] = array(
      'data' => array(variable_get('ms_checkout_form_shipping_city_title', t('City')), $order->shipping_address['city']),
      'class' => array('ms_order_address_city'),
    );
  }
  if ($order->shipping_address['state']) {
    $rows[] = array(
      'data' => array(variable_get('ms_checkout_form_shipping_state_title', t('State')), $order->shipping_address['state']),
      'class' => array('ms_order_address_state'),
    );
  }
  if ($order->shipping_address['zip']) {
    $rows[] = array(
      'data' => array(variable_get('ms_checkout_form_shipping_zip_title', t('Zip')), $order->shipping_address['zip']),
      'class' => array('ms_order_address_zip'),
    );
  }
  if ($order->shipping_address['country']) {
    $rows[] = array(
      'data' => array(variable_get('ms_checkout_form_shipping_country_title', t('Country')), $order->shipping_address['country']),
      'class' => array('ms_order_address_country'),
    );
  }
  if ($order->shipping_address['phone']) {
    $rows[] = array(
      'data' => array(variable_get('ms_checkout_form_shipping_phone_title', t('Phone')), $order->shipping_address['phone']),
      'class' => array('ms_order_address_phone'),
    );
  }

  $shipping_address = theme('table', array('header' => $headers, 'rows' => $rows, 'attributes' => array(
    'class' => array('ms_order_table'),
    'id' => 'ms-core-order-history-table',
  ), 'caption' => t('Shipping Address')));

  return $billing_address . $shipping_address;
}

/**
 * Gets the order history table.
 *
 * @param MsOrder $order
 *   The Order to get the History for.
 *
 * @return string
 *   A themed table displaying all of the history of an order.
 *
 * @ingroup ms_core_api
 */
function ms_core_get_order_history_table(MsOrder $order) {
  // Add the CSS.
  drupal_add_css(drupal_get_path('module', 'ms_core') . '/css/ms_core.css');

  $admin = user_access('administer moneysuite orders');

  if (count($order->history)) {
    $headers = array(
      array(
        'data' => t('Date'),
        'class' => array('ms_history_date'),
        'sort' => 'desc',
      ),
      array(
        'data' => t('Message'),
        'class' => array('ms_history_message'),
        'sort' => 'desc',
      ),
    );
    $rows = array();

    foreach ($order->history as $item) {
      if ($item->hidden && $admin) {
        $rows[] = array(format_date($item->created), $item->message);
      } elseif (!$item->hidden) {
        $rows[] = array(format_date($item->created), $item->message);
      }
    }

    return theme('table', array('header' => $headers, 'rows' => $rows, 'attributes' => array(
      'class' => array('ms_order_table'),
      'id' => 'ms-core-order-history-table',
    ), 'empty' => t('No history.'), 'caption' => t('History')));
  } else {
    // There are no products in the cart.
    return t('There are currently no history items associated with this order.');
  }
}

/**
 * Implements hook_user_login()
 */
function ms_core_user_login(&$edit, $account) {
  // Add items from an anonymous cart to a user's permanent cart on login.
  // Update the cart so the ID is switched from the session to user ID.
  if (isset($_SESSION['ms_cart_id']) && $_SESSION['ms_cart_id']) {
    db_update('ms_cart_products')
      ->fields(array(
        'cart_id' => $account->uid,
      ))
      ->condition('cart_id', $_SESSION['ms_cart_id'])
      ->execute();

    db_update('ms_cart_adjustments')
      ->fields(array(
        'cart_id' => $account->uid,
      ))
      ->condition('cart_id', $_SESSION['ms_cart_id'])
      ->execute();
  }
}

/**
 * Fills the rows with the HTMl to use for the Adjustments Field.
 *
 * @param array $rows
 *   The array of rows of the table that will be populated.
 * @param MsOrder $order
 *   The order to get the HTML of the Adjustments for.
 */
function ms_core_get_adjustments_html(&$rows, MsOrder $order) {
  $price = ms_core_get_order_products_total($order);
  foreach ($order->adjustments as $adjustment) {
    // Only show the adjustments that don't have product associations.
    if ($adjustment->active && empty($adjustment->product_id)) {
      $value = ms_core_get_adjusted_price($adjustment, $price);

      $adjustment_value = ms_core_get_adjustment_text($order, $adjustment, $value);

      $price += $value;

      // Add trash can for optional adjustments.
      if ($adjustment->optional) {
        $remove_button = "<span class='ms_cart_item_remove ms_cart_left'>"
          . "<a href='" . url('ms/cart/remove_adjustment/' . $adjustment->id, array('query' => drupal_get_destination())) . "'><img src='" . base_path() . drupal_get_path('module', 'ms_core') . '/images/trash_can.png' . "' /></a>"
          . "</span>";
        $adjustment->display = $remove_button . $adjustment->display;
      }

      $rows[] = array(
        'item' => array(
          'data' => $adjustment->display,
          'class' => array('ms_adjustment_display'),
        ),
        'price' => array(
          'data' => $adjustment_value,
          'class' => array('ms_adjustment_value'),
        ),
      );
    }
  }
}

/**
 * Generates the adjustment text for an order.
 *
 * @param MsOrder $order
 *   The order object.
 * @param MsAdjustment $adjustment
 *   The adjustment object.
 * @param float $value
 *   The value of the order total.
 *
 * @return string
 *   The adjustment text.
 */
function ms_core_get_adjustment_text(MsOrder $order, MsAdjustment $adjustment, $value) {
  $main_price = ms_core_get_order_products_total($order, FALSE);
  if ($order->order_type == 'recurring') {
    $recurring_schedule = $order->recurring_schedule;
    foreach ($order->products as $product) {
      $recurring_schedule['qty'] = $product->qty;
    }
    $recurring = TRUE;
    // If it has a trial period, do something else
    if ($recurring_schedule['has_trial']) {
      $main_value = ms_core_get_adjusted_price($adjustment, $main_price);
      $recurring_schedule['trial_amount'] = $value;
      $recurring_schedule['main_amount'] = $main_value;
      if ($main_value <= 0) {
        $recurring_schedule['has_trial'] = FALSE;
        $recurring = FALSE;
      }
    } else {
      $recurring_schedule['main_amount'] = $value;
    }

    if ($recurring_schedule['main_amount'] == $recurring_schedule['trial_amount']
      && $recurring_schedule['main_length'] == $recurring_schedule['trial_length']
    ) {
      $adjustment_value = ms_core_format_money($recurring_schedule['main_amount'], $order->currency);
    } else {
      $recurring_schedule['currency'] = $order->currency;
      $adjustment_value = ms_core_get_recurring_string($recurring_schedule, $recurring, TRUE);
    }
  } else {
    $adjustment_value = ms_core_format_money($value, $order->currency);
  }

  return $adjustment_value;
}

/**
 * Returns the HTMl to use for the Order Items Field.
 *
 * @param array $rows
 *   The rows array that will be populated.
 * @param MsOrder $order
 *   The order object to get the HTML for the items of.
 * @param bool $cart
 *   (optional) Whether or not this order is a cart. Defaults to FALSE.
 */
function ms_core_get_order_items_html(&$rows, MsOrder $order, $cart = FALSE) {
  foreach ($order->products as $prod_num => $product) {
    $item_display = array();
    if ($cart) {
      $destination = drupal_get_destination();
      if ($destination['destination'] == 'system/ajax') {
        $destination['destination'] = 'ms/cart';
      }
      $item_display['remove_button'] = array(
        '#type' => 'item',
        '#markup' => "<span class='ms_cart_item_remove ms_cart_left'>"
          . "<a href='" . url('ms/cart/remove/' . $prod_num, array('query' => $destination)) . "'><img src='" . base_path() . drupal_get_path('module', 'ms_core') . '/images/trash_can.png' . "' /></a>"
          . "</span>"
      );
    }
    // Add the data to the schedule so that the currency can be overridden.
    $product->recurring_schedule['data'] = $order->data;
    $product->recurring_schedule['currency'] = $order->currency;
    $product->recurring_schedule['qty'] = $product->qty;
    $price = ms_core_get_recurring_string($product->recurring_schedule, $product->type == 'recurring');

    $item_name = $product->name;
    if ($product->qty > 1) {
      $item_name .= ' (x' . $product->qty . ')';
    }

    $item_display['product_name'] = array(
      '#type' => 'item',
      '#markup' => $item_name,
    );

    // Add the quantity widget if the product is quantifiable.
    if ($cart && !empty($product->data['allow_multiple'])) {
      $item_display['qty_widget'] = drupal_get_form('ms_cart_qty_widget_form_' . $product->cart_product_id, $order->cart_id, $product);
    }

    $rows[] = array(
      'item' => array('data' => $item_display),
      'price' => array(
        'data' => $price,
        'class' => array('ms_price'),
      ),
    );

    // Add the product specific adjustments here.
    $product_total = ms_core_get_product_display_price($product);
    foreach ($order->adjustments as $adjustment) {
      if (!empty($adjustment->product_id) && (($cart && $adjustment->product_id == $product->cart_product_id) OR (!$cart && $adjustment->product_id == $product->order_product_id))) {
        if (!$cart && !$adjustment->active) {
          continue;
        }
        $value = ms_core_get_adjusted_price($adjustment, $product_total);

        if ($cart && $adjustment->optional) {
          $adjustment->display = drupal_get_form('ms_core_optional_adjustment_form_' . $adjustment->adjustment_id, $adjustment);
        }
        if ($adjustment->active) {
          $product_total += $value;
          $adjustment_value = ms_core_get_adjustment_text($order, $adjustment, $value);
        } else {
          $adjustment_value = "";
        }

        $rows[] = array(
          'item' => array(
            'data' => $adjustment->display,
            'class' => array('ms_adjustment_display'),
          ),
          'price' => array(
            'data' => $adjustment_value,
            'class' => array('ms_adjustment_value'),
          ),
        );
      }
    }
  }
}

/**
 * Form constructor for the optional adjustment form.
 *
 * @param MsAdjustment $adjustment
 *   The adjustment to show.
 *
 * @ingroup forms
 */
function ms_core_optional_adjustment_form($form, &$form_state, $adjustment) {
  $form_state['adjustment'] = $adjustment;
  $form['optional_' . $adjustment->adjustment_id] = array(
    '#type' => 'checkbox',
    '#title' => filter_xss($adjustment->display),
    '#default_value' => $adjustment->active,
    '#ajax' => array(
      'callback' => 'ms_core_optional_adjustment_toggle',
      'wrapper' => 'ms-core-order-items-table',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );

  // Add support for radio and select options.
  if (!empty($adjustment->options)) {
    $form['optional_' . $adjustment->adjustment_id]['#type'] = $adjustment->widget;

    $sub_options = array();
    foreach ($adjustment->options as $option_key => $sub_option) {
      $sub_options[$option_key] = $sub_option['name'];
      if (!empty($sub_option['price'])) {
        $sub_options[$option_key] .= " (+" . ms_core_format_money($sub_option['price']) . ")";
      }
    }

    $form['optional_' . $adjustment->adjustment_id]['#options'] = $sub_options;
  }

  return $form;
}

/**
 * AJAX callback for the optional adjustment checkbox.
 *
 * Toggles the active property of the adjustment, saves the order, then rebuilds
 * the order html.
 */
function ms_core_optional_adjustment_toggle($form, $form_state) {
  $adjustment = $form_state['adjustment'];
  // Change the adjustment so that active is opposite of what it is now.
  $result = db_select('ms_cart_adjustments', 'ca')
    ->fields('ca', array('active'))
    ->condition('cart_id', $adjustment->cart_id)
    ->condition('adjustment_id', $adjustment->adjustment_id)
    ->execute();

  foreach ($result as $row) {
    db_update('ms_cart_adjustments')
      ->fields(array(
        'active' => $row->active ? 0 : 1,
      ))
      ->condition('cart_id', $adjustment->cart_id)
      ->condition('adjustment_id', $adjustment->adjustment_id)
      ->execute();
  }

  $order = ms_core_get_cart($adjustment->cart_id);
  return ms_core_get_order_details_table($order, TRUE);
}

/**
 * Form constructor for the quantity widget.
 *
 * @param int $cid
 *   The cart id.
 * @param MsProduct $product
 *   The product object.
 *
 * @see ms_cart_qty_widget_form_validate()
 * @see ms_cart_qty_widget_form_submit()
 * @ingroup forms
 */
function ms_cart_qty_widget_form($form, &$form_state, $cid, MsProduct $product) {
  $form_state['product'] = $product;
  $form_state['cid'] = $cid;
  $unique_class_name = 'ms_qty_box-' . $product->cart_product_id;
  $form['qty'] = array(
    '#title' => t("Quantity"),
    '#type' => 'textfield',
    // @todo - Perhaps an update button would be best here, so users don't get confused...
    // Either that or a select box.
    '#default_value' => $product->qty,
    '#element_validate' => array('ms_core_qty_validate'),
    '#attributes' => array('class' => array('ms_quantity_box', $unique_class_name)),
    '#size' => '2',
    '#ajax' => array(
      'callback' => 'ms_core_qty_ajax_callback',
      'wrapper' => 'ms-core-order-items-table',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );
  if (!empty($product->data['qty_validate'])) {
    $form['qty']['#element_validate'][] = $product->data['qty_validate'];
  }

  $form['#attached']['css'] = array(
    drupal_get_path('module', 'ms_core') . '/css/ms_core.css',
  );

  return $form;
}

/**
 * AJAX callback for the optional adjustment checkbox.
 *
 * Toggles the active property of the adjustment, saves the order, then rebuilds
 * the order html.
 */
function ms_core_qty_ajax_callback($form, $form_state) {
  $qty = (int)$form_state['values']['qty'];
  $product = $form_state['product'];
  if ($qty > 0) {
    // Save the quantity for the product
    db_update('ms_cart_products')
      ->fields(array(
        'qty' => $qty,
      ))
      ->condition('cart_id', $form_state['cid'])
      ->condition('cart_product_id', $product->cart_product_id)
      ->execute();
    $cart = ms_core_get_cart($form_state['cid']);
    module_invoke_all('ms_cart_qty_changed', $cart, $form_state['values']['qty_product_number']);
  } else {
    drupal_set_message(t('Quantity amount must be greater than 0.'), 'error');
  }
  $cart = ms_core_get_cart($form_state['cid']);
  return ms_core_get_order_details_table($cart, TRUE);
}

/**
 * Form validation handler for ms_cart_qty_widget_form().
 *
 * @see ms_cart_qty_widget_form_submit()
 */
function ms_cart_qty_widget_form_validate($form, &$form_state) {
  $qty = (int)$form_state['values']['qty'];
  if ($qty <= 0) {
    form_set_error('qty', t("The quantity must be greater than 0."));
  }
}

/**
 * Form submission handler for ms_cart_qty_widget_form().
 *
 * @see ms_cart_qty_widget_form_validate()
 */
function ms_cart_qty_widget_form_submit($form, &$form_state) {
  // Save the quantity for the product.
  db_update('ms_cart_products')
    ->fields(array(
      'qty' => (int)$form_state['values']['qty'],
    ))
    ->condition('cart_id', $form_state['values']['cid'])
    ->condition('cart_product_id', $form_state['values']['qty_product_number'])
    ->execute();

  $cart = ms_core_get_cart($form_state['values']['cid']);
  module_invoke_all('ms_cart_qty_changed', $cart, $form_state['values']['qty_product_number']);
}

/**
 * Gets the Display Price for a product.
 *
 * @param MsProduct $product
 *   The product to get the price for.
 *
 * @return float
 *   The price to show in the cart and other places.
 */
function ms_core_get_product_display_price(MsProduct $product) {
  if (isset($product->recurring_schedule['trial_length']) && $product->recurring_schedule['trial_length']) {
    $price = $product->recurring_schedule['trial_amount'];
  } else {
    $price = $product->amount * $product->qty;
  }
  return $price;
}

/**
 * Returns an Adjusted Price based on the adjustment.
 *
 * @param MsAdjustment $adjustment
 *   The adjustment object to use to adjust the price.
 * @param float $price
 *   The price before the adjustment.
 *
 * @return float
 *   The adjusted price.
 */
function ms_core_get_adjusted_price(MsAdjustment $adjustment, $price) {
  switch ($adjustment->type) {
    case 'percentage':
      return round($price * ($adjustment->value / 100), 2);
    case 'fixed':
      return $adjustment->value;
    default:
      return $adjustment->value;
  }
}

/**
 * Calculates the final price of an order with adjustments.
 *
 * @param MsOrder $object
 *   The order object.
 * @param bool $final
 *   (optional) Whether to include taxes and other things. Defaults to TRUE.
 *
 * @return float
 *   The final price with adjustments.
 */
function ms_core_get_final_price(MsOrder $order, $final = TRUE) {
  $price = ms_core_get_order_products_total($order, TRUE, $final);

  if (is_array($order->adjustments)) {
    foreach ($order->adjustments as $adjustment) {
      if ($adjustment->active && empty($adjustment->product_id)) {
        if ($final OR $adjustment->weight < 1) {
          $value = ms_core_get_adjusted_price($adjustment, $price);
          $price += $value;
        }
      }
    }
  }

  // If the amount is negative, just set it to 0.
  if ($price < 0) {
    $price = 0;
  }

  return round($price, 2);
}

/**
 * Calculates the order total from payments.
 *
 * @param MsOrder $object
 *   The order object
 *
 * @return float
 *   The order total.
 */
function ms_core_get_order_total(MsOrder $order) {
  $price = 0;
  foreach ($order->payments as $payment) {
    // Only add the amount if the payment was successful.
    switch ($payment->type) {
      case 'rec_payment':
      case 'rec_signup':
      case 'rec_modify':
      case 'refund':
      case 'cart':
        $price += $payment->amount;
        break;
    }
  }

  return round($price, 2);
}

/**
 * Calculates the final price with adjustments.
 *
 * @param float $price
 *   The price to adjust.
 * @param array $adjustments
 *   An array of MsAdjustment objects to adjust the price with.
 * @param string $scope
 *   (optional) The scope of the adjustments. Could be 'all' or 'fixed'.
 *   Defaults to 'all'.
 * @param int $count
 *   (optional) How many products the adjustments should be divided up into.
 *   Defaults to 1.
 *
 * @return float
 *   The final price with adjustments.
 */
function ms_core_get_product_adjusted_price($price, $adjustments, $scope = 'all', $count = 1) {
  if (is_array($adjustments)) {
    foreach ($adjustments as $adjustment) {
      if ($adjustment->active && ($scope == 'all' OR $adjustment->scope == $scope)) {
        // If the order has multiple products and has a fixed adjustment, the
        // adjustment should be divided evenly among the products.
        if ($adjustment->type == 'fixed') {
          $adjustment->value = $adjustment->value / $count;
        }

        $value = ms_core_get_adjusted_price($adjustment, $price);
        $price += $value;
      }
    }
  }
  return round($price, 2);
}

/**
 * Calculates the Total of the products for an order.
 *
 * @param MsOrder $order
 *   The order object to get total for.
 * @param bool $trial
 *   (optional) Whether to get the trial total instead. Defaults to TRUE.
 * @param bool $final
 *   (optional) Whether to include taxes and other things. Defaults to TRUE.
 *
 * @return float
 *   The total of all the products in that order.
 */
function ms_core_get_order_products_total(MsOrder $order, $trial = TRUE, $final = TRUE) {
  switch ($order->order_type) {
    case 'multi_recurring':
    case 'recurring':
      // If Order is Recurring, return the amount for one period.
      $price = 0;

      if (isset($order->products) && is_array($order->products)) {
        foreach ($order->products as $product) {
          if ($trial && $product->recurring_schedule['trial_length']) {
            $product_total = $product->recurring_schedule['trial_amount'];
            foreach ($order->adjustments as $adjustment) {
              if ($adjustment->active && !empty($adjustment->product_id) && ((!empty($product->cart_product_id) && $adjustment->product_id == $product->cart_product_id) OR (!empty($product->order_product_id) && $adjustment->product_id == $product->order_product_id))) {
                if ($final OR $adjustment->weight < 1) {
                  $product_total += ms_core_get_adjusted_price($adjustment, $product_total);
                }
              }
            }

            $price += $product_total;
          } else {
            $product_total = ($product->recurring_schedule['main_amount']) ? $product->recurring_schedule['main_amount'] : $product->amount;

            foreach ($order->adjustments as $adjustment) {
              if ($adjustment->active && !empty($adjustment->product_id) && ((!empty($product->cart_product_id) && $adjustment->product_id == $product->cart_product_id) OR (!empty($product->order_product_id) && $adjustment->product_id == $product->order_product_id))) {
                if ($final OR $adjustment->weight < 1) {
                  $product_total += ms_core_get_adjusted_price($adjustment, $product_total);
                }
              }
            }

            $price += $product_total;
          }
        }
      }

      return $price;
      break;

    case 'cart':
      // If Order is Cart, return a sum of all the amounts for the products.
      $price = 0;

      if (isset($order->products) && is_array($order->products)) {
        foreach ($order->products as $product) {
          if (!empty($product->recurring_schedule['fixed_date'])) {
            $product_total = $product->recurring_schedule['trial_amount'] > 0 ? $product->recurring_schedule['trial_amount'] : $product->recurring_schedule['main_amount'];
          } else {
            $product_total = $product->amount * $product->qty;
          }

          foreach ($order->adjustments as $adjustment) {
            if ($adjustment->active && !empty($adjustment->product_id) && ((!empty($product->cart_product_id) && $adjustment->product_id == $product->cart_product_id) OR (!empty($product->order_product_id) && $adjustment->product_id == $product->order_product_id))) {
              if ($final OR $adjustment->weight < 1) {
                $product_total += ms_core_get_adjusted_price($adjustment, $product_total);
              }
            }
          }

          $price += $product_total;
        }
      }

      return $price;
      break;
  }
}

/**
 * Returns the checkout fields by calling hook_ms_checkout_fields.
 *
 * @param MsOrder $order
 *   The order object to get the checkout fields for.
 *
 * @return array
 *   An associative array of fields to use on the checkout page.
 */
function ms_core_get_checkout_fields(MsOrder $order) {
  // Invoke hook_ms_checkout_fields to get the fields.
  $fields = module_invoke_all('ms_checkout_fields', $order);

  if (!is_array($fields)) {
    $fields = array();
  }

  return $fields;
}

/**
 * Returns the fields by calling hook_ms_cart_fields.
 *
 * @param MsOrder $cart
 *   The cart object to get the checkout fields for.
 *
 * @return array
 *   An associative array of fields to use on the cart page.
 */
function ms_core_get_cart_fields($cart) {
  // Invoke hook_ms_checkout_fields to get the fields.
  $fields = module_invoke_all('ms_cart_fields', $cart);

  // Order the fields by weight.
  usort($fields, "ms_core_sort_fields");

  if (!is_array($fields)) {
    $fields = array();
  }

  return $fields;
}

/**
 * Sorts an associative array by weight.
 *
 * @param array $a
 *   The first array.
 * @param array $b
 *   The second array.
 * @param string $key
 *   The key to sort by, defaults to 'weight'.
 *
 * @return bool
 *   True or False depending on which one is bigger.
 */
function ms_core_sort_fields($a, $b, $key = 'weight') {
  if ($a[$key] == $b[$key]) {
    return 0;
  }
  return ($a[$key] < $b[$key]) ? -1 : 1;
}

/**
 * Adds or updates an adjusment for an order.
 *
 * @param MsOrder $order
 *   The order object to add the adjustment for.
 * @param MsAdjustment $adjustment
 *   The adjustment object.
 * @param bool $single
 *   (optional) Whether other copies of this adjustment should be removed.
 *   Defaults to FALSE.
 *
 * @ingroup ms_core_api
 */
function ms_core_add_order_adjustment(MsOrder $order, MsAdjustment $adjustment, $single = FALSE) {
  if ($single) {
    db_delete('ms_order_adjustments')
      ->condition('oid', $order->oid)
      ->condition('id', $adjustment->id)
      ->execute();
  }

  $adjustment->oid = $order->oid;
  $adjustment->product_id = isset($adjustment->product_id) ? $adjustment->product_id : NULL;
  unset($adjustment->adjustment_id);
  drupal_write_record('ms_order_adjustments', $adjustment);

  return ms_core_order_load($order->oid);
}

/**
 * Adds or updates an adjusment for an cart.
 *
 * @param MsAdjustment $adjustment
 *   The adjustment object.
 * @param bool $single
 *   (optional) Whether other copies of this adjustment should be removed.
 *   Defaults to FALSE.
 *
 * @ingroup ms_core_api
 */
function ms_core_add_cart_adjustment(MsAdjustment $adjustment, $single = FALSE) {
  $cart = ms_core_get_cart();
  if ($single) {
    db_delete('ms_cart_adjustments')
      ->condition('cart_id', $cart->cart_id)
      ->condition('id', $adjustment->id)
      ->execute();
  }
  $adjustment->cart_id = $cart->cart_id;
  $adjustment->product_id = isset($adjustment->product_id) ? $adjustment->product_id : NULL;
  drupal_write_record('ms_cart_adjustments', $adjustment);
}

/**
 * Removes an Adjustment from an order.
 *
 * @param MsAdjustment $adjustment
 *   The adjustment object.
 * @param MsOrder $order
 *   The order object to remove the adjustment from.
 *
 * @ingroup ms_core_api
 */
function ms_core_remove_order_adjustment(MsAdjustment $adjustment, MsOrder $order) {
  db_delete('ms_order_adjustments')
    ->condition('oid', $order->oid)
    ->condition('id', $adjustment->id)
    ->execute();
}

/**
 * Removes all Adjustments from an order.
 *
 * @param MsOrder $order
 *   The order object to remove the adjustments from.
 *
 * @ingroup ms_core_api
 */
function ms_core_remove_order_adjustments(MsOrder $order) {
  db_delete('ms_order_adjustments')
    ->condition('oid', $order->oid)
    ->execute();
}

/**
 * Gets the Cancel URL for a Recurring Order.
 *
 * @param MsOrder $order
 *   The Recurring Order to get the Cancellation URL for.
 * @param int $product_id
 *   (Optional) The order product id. Only applies to multi_recurring orders.
 *
 * @return string|false
 *   The URL for Cancellation for the correct Gateway, or FALSE if it is not
 *   applicable.
 *
 * @ingroup ms_core_api
 */
function ms_core_get_cancel_url(MsOrder $order, $product_id = NULL) {
  if (in_array($order->order_type, array('recurring', 'multi_recurring')) && ($gateway = ms_core_get_payment_gateway($order->gateway))) {
    switch ($order->status) {
      case 'active':
        if (isset($gateway['cancel_url']) && $gateway['cancel_url']) {
          $cancel_url = $gateway['cancel_url']($order, $product_id);
          foreach (module_implements('ms_core_cancel_url_override') as $module) {
            $function = $module . '_ms_core_cancel_url_override';
            $function($cancel_url, $product_id);
          }
          return $cancel_url;
        }
        break;
    }
  }

  return FALSE;
}

/**
 * Gets the Billing URL for a Recurring Order.
 *
 * @param MsOrder $order
 *   The Recurring Order to get the Billing URL for.
 *
 * @return string|false
 *   The URL for Billing Changes for the correct Gateway, or FALSE if it is not
 *   applicable.
 *
 * @ingroup ms_core_api
 */
function ms_core_get_billing_url(MsOrder $order) {
  if ($order->order_type == 'recurring' && ($gateway = ms_core_get_payment_gateway($order->gateway))) {
    if (isset($gateway['billing_url']) && $gateway['billing_url']) {
      return $gateway['billing_url']($order);
    } else {
      return FALSE;
    }
  } else {
    return FALSE;
  }
}

/**
 * Gets the Modify URL for a Recurring Order.
 *
 * @param MsOrder $order
 *   The Recurring Order to get the Modify URL for.
 * @param string $id
 *   The id of the new product.
 * @param int $product_id
 *   (Optional) The order product id to modify. Defaults to none.
 *
 * @return string|false
 *   The URL for Modify for the correct Gateway, or FALSE if it is not
 *   applicable.
 *
 * @ingroup ms_core_api
 */
function ms_core_get_modify_url(MsOrder $order, $id, $product_id = NULL) {
  if (isset($order->gateway) && ($gateway = ms_core_get_payment_gateway($order->gateway))) {
    if (!empty($gateway['modify_url'])) {
      $url = $gateway['modify_url']($order, $id, $product_id);

      return $url;
    }
  }

  return FALSE;
}

/**
 * Gets a product based on a module and id.
 *
 * @param string $module
 *   The module that the product belongs to.
 * @param string $id
 *   The id of the product.
 *
 * @return MsProduct
 *   The product object.
 *
 * @ingroup ms_core_api
 */
function ms_core_load_module_product($module, $id = 0) {
  $products = module_invoke_all('ms_product_load', $module, $id);
  if (isset($products[0])) {
    return $products[0];
  }
  return ms_core_get_module_product($module . '-' . $id);
}

/**
 * Returns a list of payments.
 *
 * @param array $payments
 *   Array of all the MsPayment objects to list.
 *
 * @return string
 *   A listing of all the payments in HTML.
 */
function ms_core_list_order_payments($payments) {
  $output = '';
  $count = 0;

  foreach ($payments as $payment) {
    if ($count) {
      $output .= '<br />';
    }
    $payment_info = array();
    $payment_info[] = t('Amount: !amount', array('!amount' => ms_core_format_money($payment->amount, $payment->currency, 'payment_amount')));
    $payment_info[] = t('Type: !type', array('!type' => ms_core_get_payment_type($payment->type)));
    $payment_info[] = t('Date: !date', array('!date' => format_date($payment->created)));
    if ($payment->transaction) {
      $payment_info[] = t('Transaction ID: !id', array('!id' => $payment->transaction));
    }

    $output .= implode($payment_info, ' | ');
    $count += 1;
  }

  return $output;
}

/**
 * Gets all the orders for a specific user.
 *
 * @param int $uid
 *   The user ID to get the orders for.
 *
 * @return array
 *   Return an array of all the orders for the specific user.
 *
 * @ingroup ms_core_api
 */
function ms_core_get_orders($uid) {
  $result = db_query("SELECT oid FROM {ms_orders} WHERE uid = :uid", array(':uid' => $uid));

  $orders = array();

  foreach ($result as $row) {
    $orders[] = ms_core_order_load($row->oid);
  }

  return $orders;
}

/**
 * Generates an order title to use with Payment Gateways.
 *
 * @param MsOrder $order
 *   The order to get the title for.
 * @param int $length
 *   (optional) The length of the title. Defaults to 255.
 * @param bool $modify
 *   (optional) Whether or not this is a modification. Defaults to FALSE.
 *
 * @return string
 *   A string title for the order.
 *
 * @ingroup ms_core_api
 */
function ms_core_get_order_title(MsOrder $order, $length = 255, $modify = FALSE) {
  if (!empty($order->gateway)) {
    $template = variable_get($order->gateway . '_order_title_template', '[site:name] - Order #[ms_core_order:orderId]');
    $tokens = array(
      'ms_core_order' => $order,
    );
    $title = token_replace($template, $tokens);
  } else {
    if ($modify) {
      $title = variable_get('site_name', '') . ' - ' . $order->data['new_product']->name;
    } elseif (count($order->products) == 1) {
      $title = variable_get('site_name', '') . ' - ' . $order->products[0]->name;
    } else {
      $title = variable_get('site_name', '') . ' - ' . t('Order', array(), array('context' => 'ms_core')) . ' #' . $order->order_number;
    }

    if (variable_get('ms_core_order_title_recurring', TRUE) && $order->order_type == 'recurring') {
      $title .= ' - ' . ms_core_get_recurring_string($order->recurring_schedule, TRUE);
    }
  }

  return substr($title, 0, $length);
}

/**
 * Initializes and returns a new product object.
 *
 * @param string $name
 *   The name of the product.
 * @param string $module
 *   The module that the product is associated with.
 * @param string $id
 *   The id of the project within the module.
 * @param float $amount
 *   (optional) The amount to charge for the product. Default is 0.
 * @param string $type
 *   (optional) The type of product, 'cart' or 'recurring'. Defaults to 'cart'.
 *
 * @return MsProduct
 *   A product object.
 *
 * @ingroup ms_core_api
 */
function ms_core_new_product($name, $module, $id, $amount = 0, $type = 'cart') {
  // Create a new object.
  $product = new MsProduct();

  // Set the default members.
  $product->type = $type;
  $product->name = $name;
  $product->module = $module;
  $product->amount = $amount;
  $product->id = $id;

  return $product;
}

/**
 * Initializes and returns a new payment object.
 *
 * @param int $oid
 *   The order id to associate the payment with.
 * @param string $gateway
 *   The payment gateway.
 * @param string $type
 *   The type of payment.
 * @param float $amount
 *   (Optional) The amount of the payment. Defaults to 0.
 * @param string $currency
 *   (Optional) The currency of the payment. Defaults to site default.
 *
 * @return MsPayment
 *   A new payment object.
 *
 * @ingroup ms_core_api
 */
function ms_core_new_payment($oid, $gateway, $type, $amount = 0, $currency = '') {
  // Create a new object
  $payment = new MsPayment();

  // Set the default members
  $payment->oid = $oid;
  $payment->gateway = $gateway;
  $payment->type = $type;
  $payment->amount = $amount;
  $payment->currency = ($currency) ? $currency : variable_get('ms_core_default_currency', 'USD');
  $payment->transaction = ms_core_generate_transaction_id(10);

  return $payment;
}

/**
 * Adds a product to an order.
 *
 * @param MsOrder $order
 *   The order to add the product to.
 * @param MsProduct $product
 *   The product object.
 * @param bool $single
 *   (optional) Whether to remove other instances of this product.
 *
 * @return MsOrder
 *   The order object with the added product.
 *
 * @ingroup ms_core_api
 */
function ms_core_add_order_product(MsOrder $order, MsProduct &$product, $single = FALSE) {
  // Set some defaults.
  if (!isset($product->data)) {
    $product->data = array();
  }
  if (!$product->amount && empty($product->recurring_schedule['main_amount'])) {
    $product->recurring_schedule = array(
      'main_amount' => $product->amount,
    );
  }
  if (!isset($product->qty)) {
    $product->qty = 1;
  }

  // Update the Order Data to use the product data.
  if (!empty($product->data)) {
    ms_core_add_data($order, $product->data);
  }

  if ($single) {
    db_delete('ms_order_products')
      ->condition('oid', $order->oid)
      ->condition('module', $product->module)
      ->condition('id', $product->id)
      ->execute();
  }

  // Make sure that if a recurring product is being added, to clear out other
  // products.
  if ($product->type == 'recurring' && !ms_core_multi_recurring_supported()) {
    $order->order_type = 'recurring';
    ms_core_order_save($order);
    db_delete('ms_order_products')
      ->condition('oid', $order->oid)
      ->execute();
  }

  $product->oid = $order->oid;
  $product->save();
  return ms_core_order_load($order->oid);
}

/**
 * Removes a product from an order.
 *
 * @param MsProduct $product
 *   The product object.
 * @param MsOrder $order .
 *   The order to remove the product from.
 *
 * @ingroup ms_core_api
 */
function ms_core_remove_order_product(MsProduct $product, MsOrder $order) {
  db_delete('ms_order_products')
    ->condition('oid', $order->oid)
    ->condition('order_product_id', $product->order_product_id)
    ->execute();
  // Remove any adjustments that were dependant on this product.
  db_delete('ms_order_adjustments')
    ->condition('oid', $order->oid)
    ->condition('product_id', $product->order_product_id)
    ->execute();
}

/**
 * Adds a product to a cart.
 *
 * @param MsProduct $product
 *   The product to add to the cart.
 * @param bool $single
 *   (optional) Whether existing entries of this same product should be removed
 *   from the cart. Defaults to FALSE.
 * @param bool $message
 *   (optional) Whether to show the message (Also requires the setting to be on
 *   in MS Core Settings). Defaults to TRUE.
 */
function ms_core_add_cart_product(MsProduct $product, $single = FALSE, $message = TRUE) {
  // If the order session is set, remove it.
  ms_core_clear_order_session();

  $cart = ms_core_get_cart();

  // Give other modules a chance to act on the product being added to the cart.
  module_invoke_all('ms_cart_add', $cart, $product);
  drupal_alter('ms_cart_added_product', $product, $cart);

  // Make sure that only one product of this type is entered if single is true.
  if ($single) {
    db_delete('ms_cart_products')
      ->condition('cart_id', $cart->cart_id)
      ->condition('module', $product->module)
      ->condition('id', $product->id)
      ->execute();
  }

  // Make sure that the order is either cart OR recurring.
  if (!ms_core_multi_recurring_supported() && $cart->order_type != $product->type) {
    db_delete('ms_cart_products')
      ->condition('cart_id', $cart->cart_id)
      ->execute();
  }

  // Make sure that if a recurring product is being added, to clear out other
  // products.
  if (!ms_core_multi_recurring_supported() && $product->type == 'recurring') {
    db_delete('ms_cart_products')
      ->condition('cart_id', $cart->cart_id)
      ->execute();
  }

  $product->cart_id = $cart->cart_id;
  $product->name = substr($product->name, 0, 127);
  $product->changed = REQUEST_TIME;

  if (empty($product->recurring_schedule['main_amount']) && !empty($product->amount)) {
    $product->recurring_schedule['main_amount'] = $product->amount;
  }

  drupal_write_record('ms_cart_products', $product);

  if ($message && variable_get('ms_cart_add_item_msg', TRUE)) {
    drupal_set_message(t("Added %title to your <a href='@cart_url'>Cart</a>. <a href='@checkout_url'>Checkout</a>", array(
      '%title' => $product->name,
      '@cart_url' => url('ms/cart'),
      '@checkout_url' => url('ms/checkout'),
    )));
  }

  // Trigger the rule.
  if (module_exists('rules')) {
    rules_invoke_event('ms_core_event_product_add_to_cart', $product, $cart);
  }

  // Give other modules a chance to act on the product being added to the cart.
  module_invoke_all('ms_cart_added', $cart, $product);

  // Add any product adjustments that are specified.
  if (!empty($product->data['adjustments'])) {
    foreach ($product->data['adjustments'] as $id => $info) {
      $adjustment = new MsAdjustment($info);
      $adjustment->id = $id;
      $adjustment->product_id = $product->cart_product_id;
      ms_core_add_cart_adjustment($adjustment);
    }
  }

  return $product;
}

/**
 * Adds data to an order.
 *
 * @param MsOrder $order
 *   The order to add the data to.
 * @param array $data
 *   Associative array of the data.
 *
 * @return MsOrder
 *   Return the modified order object.
 *
 * @ingroup ms_core_api
 */
function ms_core_add_data(MsOrder $order, $data) {
  if (is_array($data)) {
    $new_data = array_merge($order->data, $data);
    $order->data = $new_data;
    ms_core_order_save($order);
  }
  return $order;
}

/**
 * Gets the module for an order.
 *
 * @param MsOrder $order
 *   The order to get the module for.
 *
 * @return string|false
 *   The module for the order, or FALSE.
 */
function ms_core_get_order_module(MsOrder $order) {
  foreach ($order->products as $product) {
    return $product->module;
  }

  return FALSE;
}

/**
 * Sets the Recurring Schedule for an order.
 *
 * @param MsOrder $order
 *   The order to add the product to.
 * @param array $recurring_schedule
 *   Associative array of the recurring schedule containing:
 *     total_occurrences: How many times the payment will recur.
 *     main_amount: The main recurring amount.
 *     main_length: The main recurring length.
 *     main_unit: The main recurring unit (Days, Weeks, Months, Years).
 *     trial_amount: The first trial recurring amount.
 *     trial_length: The first trial recurring length.
 *     trial_unit: The first trial recurring unit (Days, Weeks, Months, Years).
 *
 * @return MsOrder
 *   Return the modified order object.
 */
function ms_core_set_recurring_schedule(MsOrder $order, $recurring_schedule) {
  $order->recurring_schedule = $recurring_schedule;

  // Update into Database.
  db_update('ms_orders')
    ->fields(array(
      'recurring_schedule' => serialize($order->recurring_schedule),
    ))
    ->condition('oid', $order->oid)
    ->execute();

  return $order;
}

/**
 * Gets the actions for an order.
 *
 * @param int $oid
 *   The order id.
 *
 * @return array
 *   An array of actions that can be performed on the order.
 */
function ms_core_get_order_actions($oid) {
  $order = ms_core_order_load($oid);

  $actions = module_invoke_all('ms_recurring_schedule_actions', $order);

  return $actions;
}

/**
 * Gets a string for a date.
 *
 * Deprecated. Kept for backwards compatibility.
 */
function ms_core_get_string_time($trial_length, $trial_unit) {
  switch ($trial_unit) {
    case 'H':
      $unit = ($trial_length > 1) ? 'hours' : 'hour';
      break;
    case 'D':
      $unit = ($trial_length > 1) ? 'days' : 'day';
      break;
    case 'W':
      $unit = ($trial_length > 1) ? 'weeks' : 'week';
      break;
    case 'M':
      $unit = ($trial_length > 1) ? 'months' : 'month';
      break;
    case 'Y':
      $unit = ($trial_length > 1) ? 'years' : 'year';
      break;
    default:
      $unit = $trial_unit;
      break;
  }
  return "+$trial_length $unit";
}

/**
 * Gets a timestamp using strtotime given a length and unit parameter.
 *
 * @param int $length
 *   The number of periods.
 * @param string $unit
 *   The unit. Could be 'H', 'D', 'W', 'M', 'Y', or a custom string.
 * @param int $now
 *   (Optional) The time to use as a base. Defaults to REQUEST_TIME.
 *
 * @return int
 *   The timestamp.
 */
function ms_core_get_string_timestamp($length, $unit, $now = NULL) {
  if (is_null($now)) {
    $now = REQUEST_TIME;
  }
  switch ($unit) {
    case 'H':
      $unit = ($length > 1) ? 'hours' : 'hour';
      break;

    case 'D':
      $unit = ($length > 1) ? 'days' : 'day';
      break;

    case 'W':
      $unit = ($length > 1) ? 'weeks' : 'week';
      break;

    case 'M':
      $unit = ($length > 1) ? 'months' : 'month';
      break;

    case 'Y':
      $unit = ($length > 1) ? 'years' : 'year';
      break;

    default:
      return $now + (strtotime($unit, 0) * $length);
  }
  return strtotime("+$length $unit", $now);
}

/**
 * Converts a table headers and rows to csv data and stores it in cache.
 *
 * @param array $headers
 *   The table headers.
 * @param array $rows
 *   The table rows.
 * @param string $id
 *   The id of this csv cache.
 */
function ms_core_store_csv($headers, $rows, $id) {
  $csv_output = '';
  $csv_row = array();
  foreach ($headers as $index => $row) {
    if (empty($row['ms_ignore'])) {
      $csv_row[$index] = '"' . str_replace('"', '""', strip_tags($row['data'])) . '"';
    }
  }
  $csv_output .= implode(',', $csv_row) . "\n\n";
  foreach ($rows as $row) {
    $csv_row = array();
    foreach ($row['data'] as $index => $column) {
      if (empty($column['ms_ignore'])) {
        $csv_row[$index] = '"' . str_replace('"', '""', strip_tags($column['data'])) . '"';
      }
    }
    $csv_output .= implode(',', $csv_row) . "\n";
  }
  cache_set('ms_core_csv_' . $id, $csv_output, 'cache', REQUEST_TIME + 86400);
}

/**
 * Gets the products that are associated with a cart.
 *
 * @param int $cid
 *   The cart id of the cart to get the products for.
 *
 * @return array
 *   An array of products for the cart.
 *
 * @ingroup ms_core_api
 */
function ms_core_get_cart_products($cid) {
  $result = db_query("SELECT * FROM {ms_cart_products} WHERE cart_id = :cart_id ORDER BY cart_product_id", array(':cart_id' => $cid));
  $products = array();
  foreach ($result as $row) {
    $product = new MsProduct();
    $product->initialize($row);
    $products[] = $product;
  }

  return $products;
}

/**
 * Gets the products that are associated with an order.
 *
 * @param int $oid
 *   The order id of the order to get the products for.
 *
 * @return array
 *   An array of products for the order.
 *
 * @ingroup ms_core_api
 */
function ms_core_get_order_products($oid) {
  $result = db_query("SELECT * FROM {ms_order_products} WHERE oid = :oid ORDER BY order_product_id", array(':oid' => $oid));
  $products = array();
  foreach ($result as $row) {
    $product = new MsProduct();
    if ($product->load($row->order_product_id)) {
      $products[] = $product;
    }
  }
  return $products;
}

/**
 * Gets the adjustments that are associated with a cart.
 *
 * @param object $cart
 *   The cart object.
 *
 * @return array
 *   An array of adjustments for the cart.
 *
 * @ingroup ms_core_api
 */
function ms_core_get_cart_adjustments($cart) {
  $result = db_query("SELECT * FROM {ms_cart_adjustments} WHERE cart_id = :cart_id ORDER BY weight", array(':cart_id' => $cart->cart_id));
  $adjustments = array();
  foreach ($result as $adjustment) {
    // Remove orphaned ajdustments.
    if ($adjustment->product_id) {
      $orphaned = TRUE;
      foreach ($cart->products as $product) {
        if ($adjustment->product_id == $product->cart_product_id) {
          $orphaned = FALSE;
        }
      }
      if ($orphaned) {
        ms_core_remove_cart_adjustment($adjustment, $cart);
      }
    }
    $adjustment = new MsAdjustment($adjustment);
    $adjustments[] = $adjustment;
  }
  return $adjustments;
}

/**
 * Gets the adjustments that are associated with an order.
 *
 * @param MsOrder $order
 *   The order object.
 *
 * @return array
 *   An array of adjustments for the order.
 *
 * @ingroup ms_core_api
 */
function ms_core_get_order_adjustments(MsOrder $order) {
  $result = db_query("SELECT * FROM {ms_order_adjustments} WHERE oid = :oid ORDER BY weight", array(':oid' => $order->oid));
  $adjustments = array();
  foreach ($result as $adjustment) {
    $adjustment = new MsAdjustment($adjustment);
    // Remove orphaned adjustments.
    if ($adjustment->product_id) {
      $orphaned = TRUE;
      foreach ($order->products as $product) {
        if ($adjustment->product_id == $product->order_product_id) {
          $orphaned = FALSE;
        }
      }
      if ($orphaned) {
        ms_core_remove_order_adjustment($adjustment, $order);
      }
    }

    $adjustments[] = $adjustment;
  }
  return $adjustments;
}

/**
 * Get the history items that are associated with an order.
 *
 * @param int $oid
 *   The order id of the order to get the history for.
 *
 * @return array
 *   An array of history items for the order.
 *
 * @ingroup ms_core_api
 */
function ms_core_get_order_history($oid) {
  $items = array();
  if (db_table_exists('ms_core_order_history')) {
    $result = db_query("SELECT * FROM {ms_core_order_history} WHERE oid = :oid ORDER BY created ASC", array(':oid' => $oid));

    foreach ($result as $item) {
      $items[] = $item;
    }
  }

  return $items;
}

/**
 * Gets the payments that are associated with an order.
 *
 * @param int $oid
 *   The order id of the order to get the payments for.
 *
 * @return array
 *   An array of payments for the order.
 *
 * @ingroup ms_core_api
 */
function ms_core_get_order_payments($oid) {
  $payments = array();

  $result = db_query("SELECT * FROM {ms_payments} WHERE oid = :oid ORDER BY created ASC", array(':oid' => $oid));

  foreach ($result as $row) {
    $payment = new MsPayment();
    if ($payment->load($row->pid)) {
      $payments[] = $payment;
    }
  }

  return $payments;
}

/**
 * Loads a payment.
 *
 * @param int $pid
 *   The payment id.
 *
 * @return MsPayment|false
 *   The MsPayment object.
 *
 * @ingroup ms_core_api
 */
function ms_core_load_payment($pid) {
  $payment = new MsPayment();

  if ($payment->load($pid)) {
    return $payment;
  }
  return FALSE;
}

/**
 * Loads a payment by transaction id.
 *
 * @param string $id
 *   The transaction id.
 *
 * @return MsPayment|false
 *   The payment object.
 *
 * @ingroup ms_core_api
 */
function ms_core_load_payment_by_transaction_id($id) {
  $result = db_query("SELECT pid FROM {ms_payments} WHERE transaction = :transaction",
    array(':transaction' => $id));

  foreach ($result as $row) {
    return ms_core_load_payment($row->pid);
  }

  return FALSE;
}

/**
 * Loads a product object.
 *
 * @param int $id
 *   The id of the product to load.
 *
 * @return MsProduct|false
 *   If successful, an MsProduct object is returned, otherwise FALSE.
 *
 * @ingroup ms_core_api
 */
function ms_core_load_order_product($id) {
  $product = new MsProduct();

  if ($product->load($id)) {
    return $product;
  }

  return FALSE;
}

/**
 * Creates a new order and return the order object.
 *
 * @param string $type
 *    (optional) Can either be 'recurring' or 'cart'. Defaults to 'cart'.
 * @param int $uid
 *   (optional) The User ID associated with this order, 0 for anonymous user.
 *   Defaults to 0.
 * @param int $oid
 *   (optional) The order id to give this new order. Defaults to 0, which means
 *   it will get an oid when it is saved the first time.
 *
 * @return MsOrder
 *   The new MsOrder object.
 *
 * @ingroup ms_core_api
 */
function ms_core_order_new($type = 'cart', $uid = 0, $oid = 0) {
  $order = new MsOrder();

  // Set the Order Variables.
  $order->uid = $uid;
  $order->oid = $oid;
  $order->order_type = $type;

  $order->save();

  // Invoke ms_order_new to let other modules do things with the order when it
  // is saved.
  module_invoke_all('ms_order_new', $order);

  return $order;
}

/**
 * Loads an order from the session.
 *
 * @return MsOrder
 *   The order object.
 *
 * @ingroup ms_core_api
 */
function ms_core_load_session_order() {
  if (isset($_SESSION['ms_oid'])) {
    $order = ms_core_order_load($_SESSION['ms_oid']);
    return $order;
  } else {
    return FALSE;
  }
}

/**
 * Loads an order from the recurring_id.
 *
 * @param string $rid
 *   The recurring id.
 *
 * @return MsOrder
 *   The order object.
 *
 * @ingroup ms_core_api
 */
function ms_core_order_load_by_rec_id($rid) {
  if ($rid) {
    $oid = db_query("SELECT oid FROM {ms_payments} WHERE recurring_id = :recurring_id", array(':recurring_id' => $rid))->fetchField();
    return ms_core_order_load($oid);
  }
  return FALSE;
}

/**
 * Returns the correct order number display.
 *
 * @param $order
 *   The MsOrder object.
 *
 * @return string
 *   The order id to show the user.
 *
 * @ingroup ms_core_api
 */
function ms_core_order_number($order) {
  if (variable_get('ms_core_order_number_mode', 'sequential') == 'sequential') {
    return $order->oid;
  } else {
    return $order->order_key;
  }
}

/**
 * Generates a unique random key.
 *
 * @return string
 *   The unique 6 digit order key.
 */
function ms_core_generate_order_key() {
  $order_key = ms_core_get_random_key(6);

  while (ms_core_order_load_by_key($order_key)) {
    $order_key = ms_core_get_random_key(6);
  }

  return $order_key;
}

/**
 * Generates a unique transaction id.
 *
 * @return string
 *   The unique 10 digit transaction id.
 */
function ms_core_generate_transaction_id($length = 10) {
  $id = ms_core_get_random_key($length);

  while (ms_core_load_payment_by_transaction_id($id)) {
    $id = ms_core_get_random_key($length);
  }

  return $id;
}

/**
 * Generates a unique recurring id.
 *
 * @return string
 *   The unique 10 digit recurring id.
 */
function ms_core_generate_recurring_id($length = 10) {
  $id = ms_core_get_random_key($length);

  while (ms_core_order_load_by_rec_id($id)) {
    $id = ms_core_get_random_key($length);
  }

  return $id;
}

/**
 * Generates a random alphanumeric string.
 *
 * @param int $length
 *   The length of the string.
 *
 * @return string
 *   Random alphanumeric string.
 */
function ms_core_get_random_key($length) {
  $random = "";
  srand((double)microtime() * 1000000);
  $letters = "ABCDEFGHJKLMNPQRSTUVWXYZ";
  $numbers = "123456789";

  for ($i = 0; $i < $length; $i++) {
    if ($i % 2) {
      $random .= substr($numbers, (rand() % (strlen($numbers))), 1);
    } else {
      $random .= substr($letters, (rand() % (strlen($letters))), 1);
    }
  }
  return $random;
}

/**
 * Loads an order by the key.
 *
 * @param string $order_key
 *   The order key.
 *
 * @return MsOrder|false
 *   MsOrder object or FALSE.
 *
 * @ingroup ms_core_api
 */
function ms_core_order_load_by_key($order_key) {
  if ($order_key) {
    $oid = db_query("SELECT oid FROM {ms_orders} WHERE order_key = :order_key", array(':order_key' => $order_key))->fetchField();
    return ms_core_order_load($oid);
  }
  return FALSE;
}

/**
 * Loads an order from the unique_key key.
 *
 * @param string $unique
 *   The unique_key key.
 *
 * @return MsOrder|false
 *   The order object or FALSE.
 *
 * @ingroup ms_core_api
 */
function ms_core_order_load_unique($unique) {
  if ($unique) {
    $oid = db_query("SELECT oid FROM {ms_orders} WHERE unique_key = :unique_key", array(':unique_key' => $unique))->fetchField();
    return ms_core_order_load($oid);
  }
  return FALSE;
}

/**
 * Alias to load an order by the key from the url.
 *
 * @see ms_core_order_load_by_key()
 */
function ms_core_order_key_load($key) {
  return ms_core_order_load_by_key($key);
}

/**
 * Alias to load a payment by id from URL.
 */
function ms_core_payment_load($id) {
  return ms_core_load_payment($id);
}

/**
 * Loads a lightweight version of an order object that just contains the order id and the data array.
 *
 * @param int $oid
 *   The order id.
 *
 * @return object
 *   A special object that just contains the oid and data fields for the order.
 */
function ms_core_order_load_data($oid) {
  $result = db_query("SELECT oid, data FROM {ms_orders} WHERE oid = :oid", array(':oid' => $oid));
  foreach ($result as $order) {
    $order->data = unserialize($order->data);
    return $order;
  }
}

/**
 * Gets the recurring_id for an order.
 *
 * @param int $oid
 *   The order id.
 *
 * @return string
 *   The recurring_id.
 *
 * @ingroup ms_core_api
 */
function ms_core_get_order_rec_id($oid) {
  return db_select('ms_payments', 'p')
    ->fields('p', array('recurring_id'))
    ->condition('p.oid', $oid)
    ->condition('p.recurring_id', '', '<>')
    ->orderBy('p.created', 'DESC')
    ->execute()
    ->fetchField();
}

/**
 * Loads an order from the database.
 *
 * @param int $oid
 *   The order id.
 *
 * @return MsOrder|false
 *   The MsOrder object or FALSE.
 *
 * @ingroup ms_core_api
 */
function ms_core_order_load($oid) {
  if (is_null($oid) || $oid < 1) {
    return FALSE;
  }

  $order = new MsOrder();

  if ($order->load($oid)) {
    // Invoke ms_order_save to let other modules do things with the order when
    // it is loaded.
    module_invoke_all('ms_order_load', $order);
    return $order;
  } else {
    ms_core_log_error('ms_core', 'Error loading an order: !oid', array('!oid' => $oid));
    return FALSE;
  }
}

/**
 * Deletes an order.
 *
 * @param int $oid
 *   The order id.
 *
 * @ingroup ms_core_api
 */
function ms_core_order_delete($oid) {
  db_delete('ms_orders')
    ->condition('oid', $oid)
    ->execute();
  db_delete('ms_payments')
    ->condition('oid', $oid)
    ->execute();
  db_delete('ms_core_payment_profiles')
    ->condition('oid', $oid)
    ->execute();
  db_delete('ms_recurring_schedules')
    ->condition('oid', $oid)
    ->execute();
  db_delete('ms_core_order_history')
    ->condition('oid', $oid)
    ->execute();
  db_delete('ms_order_products')
    ->condition('oid', $oid)
    ->execute();
  db_delete('ms_order_adjustments')
    ->condition('oid', $oid)
    ->execute();
}

/**
 * Deletes orphaned records.
 */
function ms_core_delete_orphaned_records() {
  db_query("DELETE FROM {ms_recurring_schedules} WHERE oid NOT IN (SELECT oid FROM {ms_orders})");
  db_query("DELETE FROM {ms_payments} WHERE oid NOT IN (SELECT oid FROM {ms_orders})");
  db_query("DELETE FROM {ms_core_payment_profiles} WHERE oid NOT IN (SELECT oid FROM {ms_orders})");
  db_query("DELETE FROM {ms_core_order_history} WHERE oid NOT IN (SELECT oid FROM {ms_orders})");
  db_query("DELETE FROM {ms_order_products} WHERE oid NOT IN (SELECT oid FROM {ms_orders})");
  db_query("DELETE FROM {ms_order_adjustments} WHERE oid NOT IN (SELECT oid FROM {ms_orders})");
}

/**
 * Saves the order object.
 *
 * @param MsOrder $order
 *   The order object to save.
 *
 * @return bool|MsOrder
 *   The DB Result boolean if this is a new order, or the order object if it
 *   is an existing order.
 *
 * @ingroup ms_core_api
 */
function ms_core_order_save(MsOrder $order) {
  // Set the order amount.
  $order->amount = ms_core_get_final_price($order);

  // Invoke ms_order_save to let other modules do things with the order before
  // it is saved.
  foreach (module_implements('ms_order_save') as $module) {
    $function = $module . '_ms_order_save';
    $order = call_user_func($function, $order);
  }

  // Load the old order object and see if the status has changed. If so, call
  // hook_ms_order_status_change.
  $old_order = ms_core_order_load($order->oid);
  if ($old_order && $old_order->status != $order->status) {
    foreach (module_implements('ms_order_status_change') as $module) {
      $function = $module . '_ms_order_status_change';
      $order = call_user_func($function, $old_order->status, $order->status, $order);
    }
  }

  return $order->save();
}

/**
 * Returns the last payment in an order.
 *
 * @param MsOrder $order
 *   The order object to get the last payment for.
 * @param bool $non_zero
 *   (Optional) Whether payments for $0 should be ignored. Defaults to TRUE.
 * @param int $pid
 *   (Optional) The order product id. Only applies to multi_recurring orders.
 *
 * @return MsPayment|false
 *   The last payment or FALSE if no payments.
 */
function ms_core_get_last_payment(MsOrder $order, $non_zero = TRUE, $pid = NULL) {
  if (!empty($order->payments) && is_array($order->payments)) {
    if ($pid) {
      $thepayment = FALSE;
      foreach ($order->payments as $payment) {
        // If $pid, see if the payment is for this product.
        if (!empty($payment->data['product_id']) && $payment->data['product_id'] == $pid && (!$non_zero OR ($non_zero && $payment->amount > 0))) {
          $thepayment = $payment;
        }
      }
      return $thepayment;

    } else {
      $thepayment = FALSE;
      foreach ($order->payments as $payment) {
        if (!$non_zero OR ($non_zero && $payment->amount > 0)) {
          $thepayment = $payment;
        }
      }
      return $thepayment;
    }
  }

  return FALSE;
}

/**
 * Enters a payment for an order.
 *
 * This also calls the hook so that modules can act on the payment.
 *
 * @param MsPayment $payment
 *   The MsPayment object to enter.
 * @param bool $notify
 *   (optional) Whether or not to run the hooks to let other modules act on
 *   this payment. Defaults to TRUE.
 * @param bool $insert
 *   (optional) Whether or not to save the payment. Defaults to TRUE.
 *
 * @ingroup ms_core_api
 */
function ms_core_enter_payment(MsPayment $payment, $notify = TRUE, $insert = TRUE) {
  unset($payment->pid);
  // Set some defaults.
  $payment->created = (isset($payment->created)) ? $payment->created : REQUEST_TIME;
  $payment->modified = (isset($payment->modified)) ? $payment->modified : REQUEST_TIME;

  if ($insert) {
    // Save the Payment.
    $payment->save();
  }

  // Load the order.
  $order = ms_core_order_load($payment->oid);

  $order->shipping_address = array_merge($order->shipping_address, array_filter($payment->shipping_address));
  $order->billing_address = array_merge($order->billing_address, array_filter($payment->billing_address));

  if ($payment->first_name) {
    $order->first_name = $payment->first_name;
  }
  if ($payment->last_name) {
    $order->last_name = $payment->last_name;
  }

  // Set the gateway for the order.
  $order->gateway = $payment->gateway;

  $order->currency = $payment->currency;

  ms_core_log('ms_core', 'A payment has been entered for an order. Here are the details: Order: !order Payment: !payment',
    array('!order' => ms_core_print_r($order), '!payment' => ms_core_print_r($payment)));

  // Save the order.
  ms_core_order_save($order);

  // Reload the order.
  $order = ms_core_order_load($order->oid);

  $type = $payment->type;

  if ($type) {
    ms_core_set_order_status_from_payment($order, $payment);

    // Reload the order.
    $order = ms_core_order_load($order->oid);

    switch ($type) {
      case 'cart':
        if ($payment->amount) {
          ms_core_add_history_item($order, 0, t('Payment logged: @amount',
            array('@amount' => ms_core_format_money($payment->amount, $order->currency))), TRUE);
        }
        break;

      case 'rec_signup':
        foreach ($order->products as $product) {
          if ($product->type == 'recurring') {
            ms_core_create_recurring_schedule($order->oid, $order->gateway, ms_core_get_order_module($order), $product->recurring_schedule, REQUEST_TIME, $product->order_product_id);
            if ($payment->amount) {
              ms_core_add_history_item($order, 0, t('Payment logged: @amount',
                array('@amount' => ms_core_format_money($payment->amount, $order->currency))), TRUE);
            }
          }
        }
        break;

      case 'rec_payment':
        ms_core_increment_recurring_schedule($order->oid, REQUEST_TIME, !empty($payment->data['product_id']) ? $payment->data['product_id'] : NULL);
        if ($payment->amount) {
          ms_core_add_history_item($order, 0, t('Payment logged: @amount',
            array('@amount' => ms_core_format_money($payment->amount, $order->currency))), TRUE);
        }
        break;

      case 'failed':
        // Mark the recurring_schedule next_payment date in 3 days.
        if ($recurring_schedule = ms_core_load_recurring_schedule($order->oid, !empty($payment->data['product_id']) ? $payment->data['product_id'] : NULL)) {
          db_update('ms_recurring_schedules')
            ->fields(array(
              'next_payment' => strtotime('+3 days', $recurring_schedule->next_payment),
              'failed_payments' => $recurring_schedule->failed_payments + 1,
            ))
            ->condition('id', $recurring_schedule->id)
            ->execute();
        }
        break;

      case 'rec_cancel':
        // Mark the recurring schedule as cancelled, and adjust the next payment
        // and expiration.
        ms_core_cancel_recurring_schedule($order->oid, !empty($payment->data['product_id']) ? $payment->data['product_id'] : NULL);
        break;

      case 'rec_modify':
        $new_product = $order->data['new_product'];

        // See if this $new_product is an MsProduct object or not.
        if (get_class($new_product) != 'MsProduct') {
          ms_core_log_error('ms_core', 'Expected an MsProduct object.');
          return FALSE;
        }

        // Delete the old product from the order.
        if (!empty($order->data['product_id']) && $old_product = ms_core_load_order_product($order->data['product_id'])) {
          // Also delete the old recurring schedule for the old product.
          db_delete('ms_recurring_schedules')
            ->condition('oid', $order->oid)
            ->condition('pid', $old_product->order_product_id)
            ->execute();
          ms_core_remove_order_product($old_product, $order);
          $order = ms_core_order_load($order->oid);
        } else {
          // Clear out old products.
          db_delete('ms_order_products')
            ->condition('oid', $order->oid)
            ->execute();
        }

        // Replace the Old Product with the New Product.
        $order = ms_core_add_order_product($order, $new_product, TRUE);
        $order = ms_core_set_recurring_schedule($order, $new_product->recurring_schedule);

        // Create a recurring schedule if one doesn't exist.
        $recurring_schedule = ms_core_create_recurring_schedule($order->oid, $order->gateway, ms_core_get_order_module($order), $order->recurring_schedule, REQUEST_TIME, $new_product->order_product_id);

        // Merge in the new terms.
        $recurring_schedule = (object)array_merge((array)$recurring_schedule, $order->recurring_schedule);

        $last_payment = time();
        $recurring_schedule->status = 'active';
        $recurring_schedule->next_payment = ms_core_calculate_next_payment_date($order, $last_payment); // @fixme - This may be the wrong date for multi_recurring orders.
        $recurring_schedule->expiration = ms_core_calculate_expiration_date($order->recurring_schedule);
        $recurring_schedule->modified = time();

        ms_core_update_recurring_schedule($recurring_schedule);

        if ($payment->amount) {
          ms_core_add_history_item($order, 0, t('Payment logged: @amount',
            array('@amount' => ms_core_format_money($payment->amount, $order->currency))), TRUE);
        }
        break;

      case 'rec_eot':
        // Change the recurring schedule.
        ms_core_change_recurring_schedule_status($order->oid, 'expiring', !empty($payment->data['product_id']) ? $payment->data['product_id'] : NULL);
        break;
    }

    // Reload the order.
    $order = ms_core_order_load($order->oid);

    if ($notify) {
      // Assign a user to this order.
      if (!$order->uid) {
        module_invoke_all('ms_order_assign_user', $type, $order->products[0], $order, $payment);
        $order = ms_core_order_load($order->oid);
      }

      // Invoke all ms_order_payment_total Hooks.
      module_invoke_all('ms_order_payment_total', $type, $order, $payment);

      // Call the hook for each product.
      foreach ($order->products as $product) {
        $payment_type = $type;
        if ($product->type == 'cart' && !in_array($type, array('cart', 'rec_modify'))) {
          $payment_type = 'cart'; // Force cart products to have the cart type
          $payment->type = 'cart';
        }
        if (is_array($payment->data) && !empty($payment->data['product_id'])) {
          // Only invoke the hook for the product referenced by the payment.
          if ($product->order_product_id == $payment->data['product_id'] || $product->id == $payment->data['product_id']) {
            module_invoke_all('ms_order_payment', $payment_type, $product, $order, $payment);
          }
        } else {
          module_invoke_all('ms_order_payment', $payment_type, $product, $order, $payment);
        }
      }
    }
  } else {
    ms_core_add_history_item($order, 0, t('Error logging payment: @amount',
      array('@amount' => ms_core_format_money($payment->amount, $payment->currency, 'payment_amount'))), TRUE);
    ms_core_log_error('ms_core', 'The payment could not be acted upon: !payment.', array('!payment' => ms_core_print_r($payment)));
  }
}

/**
 * Implements hook_ms_order_payment_total().
 */
function ms_core_ms_order_payment_total($type, $order, $payment) {
  // Send the thankyou email if applicable.
  if (variable_get('ms_core_order_thankyou_mail_body', '')) {
    switch ($type) {
      case 'cart':
      case 'rec_signup':
        $account = user_load($order->uid);
        $params = array(
          'user' => $account,
          'ms_core_order' => $order,
          'ms_core_payment' => $payment,
        );
        drupal_mail('ms_core', 'thankyou', $account->mail, user_preferred_language($account), $params);
        break;
    }
  }

  // Trigger the rule.
  if (module_exists('rules')) {
    $account = user_load($order->uid);
    rules_invoke_event('ms_core_event_order_payment_received', $account, $order, $payment);
  }
}

/**
 * Sets the order status from a payment.
 *
 * @param MsOrder $order
 *   The order object.
 * @param MsPayment $payment
 *   The payment object.
 */
function ms_core_set_order_status_from_payment(MsOrder $order, MsPayment $payment) {
  switch ($payment->type) {
    case 'rec_payment':
    case 'rec_modify':
      if ($order->order_type != 'multi_recurring') {
        ms_core_set_order_status($order, 'active');
      }
      break;

    case 'rec_signup':
      ms_core_set_order_status($order, 'active');
      break;

    case 'rec_eot':
      if ($order->order_type != 'multi_recurring') {
        ms_core_set_order_status($order, 'completed');
      }
      break;

    case 'cart':
      ms_core_set_order_status($order, 'completed');
      break;

    case 'rec_cancel':
      if ($order->order_type != 'multi_recurring') {
        ms_core_set_order_status($order, 'cancelled');
      }
      break;

    default:
      ms_core_log_error('ms_core', 'Setting order status to pending because of payment type %type',
        array('%type' => $payment->type), WATCHDOG_WARNING);
      ms_core_set_order_status($order, 'pending');
      break;
  }
}

/**
 * Sets an order's status.
 *
 * @param MsOrder $order
 *   The order object.
 * @param string $status
 *   The status.
 *
 * @return bool
 *   The db boolean result.
 *
 * @ingroup ms_core_api
 */
function ms_core_set_order_status(MsOrder $order, $status) {
  $old_status = $order->status;

  $order->status = $status;
  $result = db_update('ms_orders')
    ->fields(array(
      'status' => $status,
    ))
    ->condition('oid', $order->oid)
    ->execute();
  // Call hook_ms_order_status_change.
  if ($old_status != $status) {
    ms_core_add_history_item($order, 0, t('Status Changed to: @status',
      array('@status' => ms_core_get_order_status($status))), TRUE);
    foreach (module_implements('ms_order_status_change') as $module) {
      $function = $module . '_ms_order_status_change';
      $order = call_user_func($function, $old_status, $status, $order);
    }
  }
  return $result;
}

/**
 * Gets a status name for translation.
 *
 * @param string $status
 *   The status to get the name for.
 *
 * @return string
 *   The translated status text.
 */
function ms_core_get_order_status($status) {
  $statuses = ms_core_get_order_statuses();

  return isset($statuses[$status]) ? $statuses[$status] : $status;
}

/**
 * Gets a list of order statuses as an array.
 *
 * @return array
 *   An array of statuses.
 */
function ms_core_get_order_statuses() {
  return array(
    'completed' => t('Completed'),
    'active' => t('Active'),
    'cancelled' => t('Cancelled'),
    'pending' => t('Pending Payment'),
    'invoiced' => t('Invoiced'),
    'fulfilled' => t('Fulfilled'),
    'checkout' => t('In Checkout'),
  );
}

/**
 * Gets an order's type for translation.
 *
 * @param MsOrder $order
 *   The order object.
 *
 * @return string
 *   The order type.
 */
function ms_core_get_order_type(MsOrder $order) {
  switch ($order->order_type) {
    case 'recurring':
      return t('Recurring');
      break;

    case 'cart':
      return t('Cart');
      break;

    default:
      return $order->order_type;
      break;
  }
}

/**
 * Gets a payment type string.
 *
 * @param string $type
 *   The payment type.
 *
 * @return string
 *   The translated payment type.
 */
function ms_core_get_payment_type($type) {
  $types = ms_core_get_payment_types();
  return isset($types[$type]) ? $types[$type] : $type;
}

/**
 * Gets an array of payment types and strings.
 *
 * @param string $type
 *   (optional) The type of payment to get types for. Can be 'recurring',
 *   'cart', or 'all'. Defaults to 'all'.
 *
 * @return array
 *   An array of payment types.
 */
function ms_core_get_payment_types($type = 'all') {
  if ($type == 'type') {
    $type = 'all';
  }
  $types = array(
    'refund' => t('Refund'),
    'reversal' => t('Reversal'),
    'failed' => t('Payment Failed'),
    'pending' => t('Pending'),
  );
  if ($type == 'all' || $type == 'recurring') {
    $types += array(
      'rec_payment' => t('Payment'),
      'rec_signup' => t('Signup'),
      'rec_cancel' => t('Cancellation'),
      'rec_modify' => t('Modification'),
      'rec_downgrade' => t('Downgrade'),
      'rec_eot' => t('End of Term'),
    );
  }
  if ($type == 'all' || $type == 'cart') {
    $types += array(
      'cart' => t('Cart Payment'),
    );
  }

  return $types;
}

/**
 * Ensures that the payment was for the right amount.
 *
 * @param MsOrder $order
 *   The order object.
 * @param string $type .
 *   The payment type.
 *
 * @return string|false
 *   The string of the payment type, or FALSE if the amount did not validate.
 */
function ms_core_valid_payment(MsOrder $order, $type, $recurring_schedule) {
  if (!is_array($recurring_schedule)) {
    $recurring_schedule = array('main_amount' => $recurring_schedule);
  }

  switch ($type) {
    case 'rec_payment':
      if (!ms_core_recurring_schedule_match($order->recurring_schedule, $recurring_schedule)) {
        ms_core_log_error('ms_core', 'Error: Recurring payment received for incorrect amount. Here are the defails: Order: !order Payment Details: !payment',
          array('!order' => ms_core_print_r($order), '!payment' => ms_core_print_r($recurring_schedule)));
        return FALSE;
      }
      break;

    case 'rec_signup':
      // Check if this is a modify from a non-recurring item.
      if (!empty($order->data['new_product']->id)) {
        if (!ms_core_recurring_schedule_match($order->data['new_product']->recurring_schedule, $recurring_schedule, FALSE)) {
          ms_core_log_error('ms_core', 'Error: Invalid Modification Attempt. Here are the defails: New Product: !order Payment Details: !payment',
            array('!order' => ms_core_print_r($order->data['new_product']), '!payment' => ms_core_print_r($recurring_schedule)));
          return FALSE;
        }
      } else {
        if (!ms_core_recurring_schedule_match($order->recurring_schedule, $recurring_schedule)) {
          ms_core_log_error('ms_core', 'Error: Signup payment received for incorrect amount. Here are the defails: Order: !order Payment Details: !payment',
            array('!order' => ms_core_print_r($order), '!payment' => ms_core_print_r($recurring_schedule)));
          return FALSE;
        }
      }

      break;

    case 'cart':
      if (round(floatval($recurring_schedule['main_amount']), 2) != round(floatval($order->amount), 2)) {
        ms_core_log_error('ms_core', 'Error: Payment received for incorrect amount. Here are the defails: Order: !order Payment Details: !payment',
          array('!order' => ms_core_print_r($order), '!payment' => ms_core_print_r($recurring_schedule)));
        return FALSE;
      }
      break;

    case 'rec_modify':
      $new_product = $order->data['new_product'];
      if (!ms_core_recurring_schedule_match($new_product->recurring_schedule, $recurring_schedule, FALSE)) {
        ms_core_log_error('ms_core', 'Error: Invalid Modification Attempt. Here are the defails: New Product: !order Payment Details: !payment',
          array('!order' => ms_core_print_r($new_product), '!payment' => ms_core_print_r($recurring_schedule)));
        return FALSE;
      }
      break;
  }

  return TRUE;
}

/**
 * Checks if two recurring schedules match.
 *
 * @param array $rs1
 *   The first recurring schedule.
 * @param array $rs2
 *   The second recurring schedule.
 * @param bool $match_trial
 *   (optiona) Whether to match the trial settings too. Defaults to TRUE.
 *
 * @return bool
 *   Whether or not the two recurring schedules match.
 */
function ms_core_recurring_schedule_match($rs1, $rs2, $match_trial = TRUE) {
  if (round(floatval($rs1['main_amount']), 2) != round(floatval($rs2['main_amount']), 2)) {
    return FALSE;
  }
  if ($rs1['main_unit'] != $rs2['main_unit']) {
    return FALSE;
  }
  if ($rs1['main_length'] != $rs2['main_length']) {
    return FALSE;
  }
  if ($match_trial && $rs1['has_trial']) {
    if ($rs1['trial_length']) {
      if (round(floatval($rs1['trial_amount']), 2) != round(floatval($rs2['trial_amount']), 2)) {
        return FALSE;
      }
      if ($rs1['trial_unit'] != $rs2['trial_unit']) {
        return FALSE;
      }
      if ($rs1['trial_length'] != $rs2['trial_length']) {
        return FALSE;
      }
    }
  }

  return TRUE;
}

/**
 * Gets the proper variable if it is overridden in the object.
 *
 * @param string $name
 *   Name of the variable, as used in variable_get.
 * @param $default
 *   Default value if not set, as used in variable get.
 * @param object $object
 *   An order or product object, which has a 'data' array property containing
 *   the override settings.
 *
 * @return mixed
 *   The default variable if it isn't overridden, or the overridden variable if
 *   it is.
 *
 * @ingroup ms_core_api
 */
function ms_core_variable_get($name, $default, $object) {
  if (isset($object->data['override_settings'][$name])) {
    return $object->data['override_settings'][$name];
  }

  return variable_get($name, $default);
}

/**
 * Returns the settings which are different than the default settings.
 *
 * @param $override_settings
 *   The override settings that are set.
 *
 * @return array
 *   An associative array containing only the settings which were actually
 *   different from their defaults.
 */
function ms_core_get_overridden_settings($override_settings) {
  $overrides = array();
  global $conf;

  if (!empty($override_settings) && is_array($override_settings)) {
    foreach ($override_settings as $settings) {
      foreach ($settings as $key => $value) {
        if (isset($conf[$key]) && $value != variable_get($key, $conf[$key])) {
          $overrides[$key] = $value;
        }
      }
    }
  }

  return $overrides;
}

/**
 * Recursively extracts the override settings from a form.
 *
 * @param array $parent
 *   The form parent.
 * @param array &$overrides
 *   The override settings which have been found so far.
 */
function ms_core_extract_override_settings($parent, &$overrides) {
  foreach (element_children($parent) as $child_name) {
    if (!empty($parent[$child_name]['#ms_override']) && ms_core_variable_isset($child_name)) {
      $overrides[$child_name] = $parent[$child_name];
    }
    ms_core_extract_override_settings($parent[$child_name], $overrides);
  }
}

/**
 * Checks if a variable has been set yet.
 *
 * @param string $name
 *   The variable name.
 *
 * @return bool
 *   TRUE if it is set, FALSE otherwise.
 */
function ms_core_variable_isset($name) {
  $result = db_query("SELECT * FROM {variable} WHERE name = :name", array(':name' => $name));

  return !empty($result);
}

/**
 * Gets the form for the Product Override Settings to be used for per-product overrides.
 *
 * @param object $object
 *   (optional) The order or product object that contains the property data
 *   array of overriden settings. Defaults to NULL.
 *
 * @return array
 *   The elements that should be displayed on the form to allow for overriding.
 */
function ms_core_get_override_settings_form_elements(&$form, $object = NULL) {
  $override_settings = module_invoke_all('ms_core_overrides');
  $form['override_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Override Settings'),
    '#tree' => TRUE,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'vertical_tabs',
  );

  if (is_array($override_settings) && !empty($override_settings)) {
    foreach ($override_settings as $module => $info) {
      $t_form_state = form_state_defaults();
      if (!empty($info['params'])) {
        $t_form_state['build_info']['args'] = $info['params'];
      }
      $module_form = drupal_retrieve_form($info['form'], $t_form_state);

      $overrides = array();
      ms_core_extract_override_settings($module_form, $overrides);

      if (!empty($overrides)) {
        // Add a fieldset for the module.
        $form['override_settings'][$module] = array(
          '#type' => 'fieldset',
          '#title' => t('!module Settings', array('!module' => $info['title'])),
          '#collapsible' => TRUE,
          '#collapsed' => TRUE,
        );

        foreach ($overrides as $key => $element) {
          unset($element['#group']);
          $form['override_settings'][$module][$key] = $element;

          // Check if this value is overridden or not.
          if (isset($object->data['override_settings'][$key])) {
            $form['override_settings']['#collapsed'] = FALSE;
            $form['override_settings'][$module]['#collapsed'] = FALSE;
            $form['override_settings'][$module][$key]['#default_value'] = $object->data['override_settings'][$key];
            // Make all override settings not be required.
            $form['override_settings'][$module][$key]['#required'] = FALSE;
            $form['override_settings'][$module][$key]['#prefix'] = "<div style='margin:2px;padding: 2px;border: 2px solid #ffaa66;'>
              <div style='color: #ff6666; font-weight: bold;'>" . t('- OVERIDDEN - (Default: %default)', array(
                '%default' => $element['#default_value'],
              )) . "</div>";
            $form['override_settings'][$module][$key]['#suffix'] = "</div>";
          }
        }
      }
    }
  }
}

/**
 * Returns a list of currencies.
 *
 * @return array
 *   An associative array of currencies.
 */
function ms_core_get_currencies() {
  module_load_include('inc', 'ms_core', 'ms_core.currencies');
  $currencies = ms_core_get_currencies_config();

  $list = array();

  foreach ($currencies as $code => $info) {
    $list[$code] = $info['name'];
  }

  return $list;
}

/**
 * Formats a money string based on currency and amount.
 *
 * @param float $amount
 *   (optional) The amount to format. Defaults to 0.
 * @param string $currency_code
 *   (optional) The currency to use for the formatting. Defaults to NULL.
 * @param string $context
 *   (optional) The context of the display. Defauls to 'HTML'.
 *
 * @return string
 *   The formatted string for the money.
 *
 * @ingroup ms_core_api
 */
function ms_core_format_money($amount = 0, $currency_code = NULL, $context = 'HTML') {
  $alter_context = array(
    'amount' => $amount,
    'currency_code' => $currency_code,
    'context' => $context,
  );
  $pos_sign = '';
  if (!$currency_code) {
    $currency_code = variable_get('ms_core_default_currency', 'USD');
  }
  if ($amount < 0) {
    $pos_sign = '- ';
    $amount = abs($amount);
  }

  module_load_include('inc', 'ms_core', 'ms_core.currencies');
  $currencies = ms_core_get_currencies_config();
  $currency_info = array(
    'name' => '',
    'sign' => '',
    'decimal' => '.',
    'thousands' => ',',
    'format' => variable_get('ms_core_format_money_template', '[sign][number].[decimal]'),
  );

  if (isset($currencies[$currency_code])) {
    $currency_info = $currencies[$currency_code];
  }

  $f_amount = number_format(floatval($amount), 2, $currency_info['decimal'], $currency_info['thousands']);

  $amount_string = explode('.', $f_amount);

  $whole = $amount_string[0];
  $decimal = $amount_string[1];

  $sign = !empty($currency_info['sign']) ? $currency_info['sign'] : $currency_code . ' ';

  drupal_alter('ms_core_currency_sign', $sign, $alter_context);

  $format = $pos_sign . $currency_info['format'];

  drupal_alter('ms_core_currency_format', $format, $alter_context);

  $search = array('[sign]', '[number]', '[decimal]', '[currency_code]');
  $replace = array($sign, $whole, $decimal, $currency_code);

  return str_replace($search, $replace, $format);
}

/**
 * Formats a Recurring String.
 *
 * @param array $schedule
 *   The recurring schedule to get the string for.
 * @param bool $recurring
 *   (optional) Whether the schedule is recurring or not. Defaults to FALSE.
 * @param bool $adjustment
 *   (optional) Whether or not this is an adjustment. Defaults to FALSE.
 *
 * @return string
 *   The formatted string for recurring schedule.
 */
function ms_core_get_recurring_string($schedule, $recurring = FALSE, $adjustment = FALSE) {
  $schedule = (object)$schedule;
  $currency = !empty($schedule->currency) ? $schedule->currency : ms_core_variable_get('ms_core_default_currency', 'USD', $schedule);

  if (!empty($schedule->qty)) {
    $schedule->main_length *= $schedule->qty;
  }

  // Set the amount to 0 if it is negative, unless this is an adjustment.
  if (!$adjustment) {
    if ($schedule->main_amount < 0) {
      $schedule->main_amount = 0;
    }
    if (empty($schedule->trial_amount) || $schedule->trial_amount < 0) {
      $schedule->trial_amount = 0;
    }
  }

  if ($recurring) {
    if ($schedule->has_trial) {
      if (($schedule->total_occurrences > 1)) {
        if (!empty($schedule->fixed_date)) {
          return t('!trial_amount for now until !date, then !main_amount !every_period for !time_length',
            array(
              '!trial_amount' => ($schedule->trial_amount != 0) ? ms_core_format_money($schedule->trial_amount, $currency) : t('Free'),
              '!main_amount' => ($schedule->main_amount != 0) ? ms_core_format_money($schedule->main_amount, $currency) : t('Free'),
              '!every_period' => ms_core_format_unit($schedule->main_unit, $schedule->main_length, TRUE),
              '!time_length' => ms_core_format_unit($schedule->main_unit, $schedule->total_occurrences),
              '!date' => ms_core_format_next_fixed_date($schedule->fixed_date_string, $schedule->fixed_date_type),
            )
          );
        } else {
          return t('!trial_amount for !trial_period, then !main_amount !every_period for !time_length',
            array(
              '!trial_amount' => ($schedule->trial_amount != 0) ? ms_core_format_money($schedule->trial_amount, $currency) : t('Free'),
              '!trial_period' => ms_core_format_unit($schedule->trial_unit, $schedule->trial_length),
              '!main_amount' => ($schedule->main_amount != 0) ? ms_core_format_money($schedule->main_amount, $currency) : t('Free'),
              '!every_period' => ms_core_format_unit($schedule->main_unit, $schedule->main_length, TRUE),
              '!time_length' => ms_core_format_unit($schedule->main_unit, $schedule->total_occurrences),
            )
          );
        }
      } else {
        if (!empty($schedule->fixed_date)) {
          return t('!trial_amount for now until !date, then !main_amount !every_period',
            array(
              '!trial_amount' => ($schedule->trial_amount != 0) ? ms_core_format_money($schedule->trial_amount, $currency) : t('Free'),
              '!main_amount' => ($schedule->main_amount != 0) ? ms_core_format_money($schedule->main_amount, $currency) : t('Free'),
              '!every_period' => ms_core_format_unit($schedule->main_unit, $schedule->main_length, TRUE),
              '!date' => ms_core_format_next_fixed_date($schedule->fixed_date_string, $schedule->fixed_date_type),
            )
          );
        } else {
          return t('!trial_amount for !trial_period, then !main_amount !every_period',
            array(
              '!trial_amount' => ($schedule->trial_amount != 0) ? ms_core_format_money($schedule->trial_amount, $currency) : t('Free'),
              '!trial_period' => ms_core_format_unit($schedule->trial_unit, $schedule->trial_length),
              '!main_amount' => ($schedule->main_amount != 0) ? ms_core_format_money($schedule->main_amount, $currency) : t('Free'),
              '!every_period' => ms_core_format_unit($schedule->main_unit, $schedule->main_length, TRUE),
            )
          );
        }
      }
    } else {
      if (($schedule->total_occurrences > 1)) {
        if (!empty($schedule->fixed_date)) {
          return t('!main_amount for now until !date, then !main_amount !every_period for !time_length',
            array(
              '!main_amount' => ($schedule->main_amount != 0) ? ms_core_format_money($schedule->main_amount, $currency) : t('Free'),
              '!every_period' => ms_core_format_unit($schedule->main_unit, $schedule->main_length, TRUE),
              '!time_length' => ms_core_format_unit($schedule->main_unit, $schedule->total_occurrences),
              '!date' => ms_core_format_next_fixed_date($schedule->fixed_date_string, $schedule->fixed_date_type),
            )
          );
        } else {
          return t('!main_amount !every_period for !time_length',
            array(
              '!main_amount' => ($schedule->main_amount != 0) ? ms_core_format_money($schedule->main_amount, $currency) : t('Free'),
              '!every_period' => ms_core_format_unit($schedule->main_unit, $schedule->main_length, TRUE),
              '!time_length' => ms_core_format_unit($schedule->main_unit, $schedule->total_occurrences),
            )
          );
        }
      } else {
        if (!empty($schedule->fixed_date)) {
          return t('!main_amount for now until !date, then !main_amount !every_period',
            array(
              '!main_amount' => ($schedule->main_amount != 0) ? ms_core_format_money($schedule->main_amount, $currency) : t('Free'),
              '!every_period' => ms_core_format_unit($schedule->main_unit, $schedule->main_length, TRUE),
              '!date' => ms_core_format_next_fixed_date($schedule->fixed_date_string, $schedule->fixed_date_type),
            )
          );
        } else {
          return t('!main_amount !every_period',
            array(
              '!main_amount' => ($schedule->main_amount != 0) ? ms_core_format_money($schedule->main_amount, $currency) : t('Free'),
              '!every_period' => ($schedule->main_amount != 0) ? ms_core_format_unit($schedule->main_unit, $schedule->main_length, TRUE) : '',
            )
          );
        }
      }
    }
  } else {
    if (!empty($schedule->fixed_date)) {
      $amount = ($schedule->trial_amount != 0) ? $schedule->trial_amount : $schedule->main_amount;
      return t('!main_amount for now until !date',
        array(
          '!main_amount' => ($amount != 0) ? ms_core_format_money($amount, $currency) : t('Free'),
          '!date' => ms_core_format_next_fixed_date($schedule->fixed_date_string, $schedule->fixed_date_type),
        )
      );
    } else {
      if (!empty($schedule->main_length)) {
        return t('!main_amount for !main_period',
          array(
            '!main_amount' => ($schedule->main_amount != 0) ? ms_core_format_money($schedule->main_amount, $currency) : t('Free'),
            '!main_period' => ms_core_format_unit($schedule->main_unit, $schedule->main_length),
          )
        );
      } else {
        return ($schedule->main_amount != 0) ? ms_core_format_money($schedule->main_amount, $currency) : t('Free');
      }
    }
  }
}

/**
 * Generates the text for the next fixed date payment date.
 *
 * @param string $fixed_date_string
 *   The string used to generate the next payment date.
 * @param string $fixed_date_type
 *   The fixed date type. Could be 'W', 'M', or 'Y'.
 *
 * @return string
 *   The short date for the next payment date.
 */
function ms_core_format_next_fixed_date($fixed_date_string, $fixed_date_type) {
  return format_date(ms_core_calculate_next_fixed_date($fixed_date_string, $fixed_date_type), 'short');
}

/**
 * Calcuates the unix timestamp of the next payment date for fixed date schedules.
 *
 * @param string $fixed_date_string
 *   The string used to generate the next payment date.
 * @param string $fixed_date_type
 *   The fixed date type. Could be 'W', 'M', or 'Y'.
 * @param int $last_payment
 *   (Optional) The last payment time that the calculated date should be after.
 *   Defaults to now.
 *
 * @return int
 *   The unix timestamp of the next date.
 */
function ms_core_calculate_next_fixed_date($fixed_date_string, $fixed_date_type, $last_payment = 0) {
  if (empty($last_payment)) {
    $last_payment = REQUEST_TIME;
  }
  switch ($fixed_date_type) {
    case 'Y':
      $raw_time = strtotime($fixed_date_string);
      if ($raw_time < $last_payment) {
        $raw_time = strtotime('+1 Year', $raw_time);
      }
      break;

    case 'M':
      $raw_time = strtotime(date('M ' . $fixed_date_string . ', Y'));
      if ($raw_time < $last_payment) {
        $raw_time = strtotime('+1 Month', $raw_time);
      }
      break;

    case 'W':
      $raw_time = strtotime($fixed_date_string);
      if ($raw_time < $last_payment) {
        $raw_time = strtotime('+1 Week', $raw_time);
      }
      break;

    default:
      $raw_time = strtotime($fixed_date_string);
      break;
  }

  return $raw_time;
}

/**
 * Formats units in a plural form to faciliate translation.
 *
 * @param string $unit
 *   The unit. Can be 'D', 'W', 'M', or 'Y'.
 * @param int $occurrences
 *   (optional) The number of occurrences. Defaults to 1.
 * @param bool $every
 *   (optional) Whether this is used in an 'every' context. Defaults to FALSE.
 *
 * @return string
 *   The translated string.
 */
function ms_core_format_unit($unit, $occurrences = 1, $every = FALSE) {
  switch ($unit) {
    case 'D':
      return ($every) ? format_plural($occurrences, t('per day'), t('every @count days')) :
        format_plural($occurrences, t('1 day'), t('@count days'));

    case 'W':
      return ($every) ? format_plural($occurrences, t('per week'), t('every @count weeks')) :
        format_plural($occurrences, t('1 week'), t('@count weeks'));

    case 'M':
      return ($every) ? format_plural($occurrences, t('per month'), t('every @count months')) :
        format_plural($occurrences, t('1 month'), t('@count months'));

    case 'Y':
      return ($every) ? format_plural($occurrences, t('per year'), t('every @count years')) :
        format_plural($occurrences, t('1 year'), t('@count years'));

    default:
      $timestamp = ms_core_get_string_time($occurrences, $unit, 0);
      return ($every) ? t('every @unit', array('@unit' => format_interval($timestamp))) : format_interval($timestamp);
  }
}

/**
 * Returns a list of countries.
 *
 * @param string $key
 *   The country key to use for the array.
 *
 * @return array
 *   The associative array of Countries keyed by the $key.
 */
function ms_core_get_countries($key = 'iso') {
  $result = db_query("SELECT * FROM {ms_core_countries}");
  $countries = array();
  foreach ($result as $country) {
    $countries[$country->$key] = $country->name;
  }
  return $countries;
}

/**
 * Returns a list of regions for a specific country.
 *
 * @param int $numcode
 *   The country numcode.
 *
 * @return array
 *   An associative array of regions keyed by the code.
 */
function ms_core_get_regions($numcode) {
  $result = db_query("SELECT * FROM {ms_core_regions} WHERE numcode = :numcode", array(':numcode' => $numcode));
  $regions = array();
  foreach ($result as $region) {
    $regions[$region->code] = $region->name;
  }
  return $regions;
}

/**
 * Changes a country key from one type to another.
 *
 * @param string $country
 *   The country.
 * @param string $from
 *   The from key.
 * @param string $to .
 *   The to key.
 *
 * @return string
 *   The new country type.
 */
function ms_core_get_country_type($country, $from, $to) {
  $from_countries = ms_core_get_countries($from);
  $to_countries = array_flip(ms_core_get_countries($to));

  if (isset($from_countries[$country]) && isset($to_countries[$from_countries[$country]])) {
    return $to_countries[$from_countries[$country]];
  }

  return $country;
}

/**
 * Gets an array of years.
 *
 * @param int $future
 *   (optional) How many years in the future to get. Defaults to 25.
 *
 * @return array
 *   An associative array of the next X amount of years.
 */
function ms_core_get_years($future = 25) {
  $current_year = date('Y');
  $years = array();

  foreach (range($current_year, $current_year + $future) as $year) {
    $years[$year] = $year;
  }

  return $years;
}

/**
 * Gets the Months of the year.
 *
 * @return array
 *   An associative array of Months.
 */
function ms_core_get_months() {
  $show_number = variable_get('ms_core_billing_show_month_numbers', FALSE);
  return array(
    '01' => ($show_number) ? '01' : '01 - ' . t('January'),
    '02' => ($show_number) ? '02' : '02 - ' . t('February'),
    '03' => ($show_number) ? '03' : '03 - ' . t('March'),
    '04' => ($show_number) ? '04' : '04 - ' . t('April'),
    '05' => ($show_number) ? '05' : '05 - ' . t('May'),
    '06' => ($show_number) ? '06' : '06 - ' . t('June'),
    '07' => ($show_number) ? '07' : '07 - ' . t('July'),
    '08' => ($show_number) ? '08' : '08 - ' . t('August'),
    '09' => ($show_number) ? '09' : '09 - ' . t('September'),
    '10' => ($show_number) ? '10' : '10 - ' . t('October'),
    '11' => ($show_number) ? '11' : '11 - ' . t('November'),
    '12' => ($show_number) ? '12' : '12 - ' . t('December'),
  );
}

/**
 * Masks a Credit Card Number for Storage.
 *
 * @param string $num
 *   The credit card number.
 * @param int $break
 *   (optional) How many chunks to break into. Defaults to 4.
 * @param int $pad
 *   (optional) The length to pad to. Defaults to 16.
 * @param string $mask
 *   (optional) What character to use for the masking. Defaults to 'X'.
 * @param int $leave
 *   (optional) How many numbers to leave showing. Defaults to 4.
 *
 * @return string
 *   The masked string for the Credit Card.
 */
function ms_core_mask_cc($num, $break = 4, $pad = 16, $mask = 'X', $leave = 4) {
  return implode('-', str_split(substr_replace(str_pad(trim($num), $pad, '0', STR_PAD_LEFT), str_repeat($mask, $pad - $leave), 0, $leave * -1), $break));
}

/**
 * Gets the default value for a field if it is provided.
 *
 * @param string $key
 *   The key of the field.
 * @param array $values
 *   (optional) The values to use for defaults. Defaults to FALSE.
 *
 * @return object
 *   The default value for the field.
 */
function ms_core_get_form_field_default($key, $values = FALSE) {
  if (module_exists('profile2') && stristr($key, '|')) {
    list($type, $field_name) = explode('|', $key);
    if (isset($values['uid']) && ($account = user_load($values['uid']))) {
      if ($profile = profile2_load_by_user($account, $type)) {
        if (isset($profile->{$field_name}[LANGUAGE_NONE][0]['safe_value'])) {
          return $profile->{$field_name}[LANGUAGE_NONE][0]['safe_value'];
        }
      }
    } elseif (!empty($values['profile_' . $type][$field_name][LANGUAGE_NONE][0]['value'])) {
      return $values['profile_' . $type][$field_name][LANGUAGE_NONE][0]['value'];
    }
  }
  if ($key && is_array($values) && isset($values[$key])) {
    return $values[$key];
  } else {
    return '';
  }
}

/**
 * Form constructor for the Credit Card Billing Form.
 *
 * @param MsOrder $order
 *   (Optional) The order object. This is used to get variables for auto-fill.
 *   Defaults to NULL.
 * @param bool $billing
 *   (optional) Whether this is for billing or for shipping.
 *
 * @ingroup forms
 */
function ms_core_get_billing_form(&$form, MsOrder $order = NULL, $billing = TRUE) {
  $form['#attached']['js'][] = drupal_get_path('module', 'ms_core') . '/js/checkout_form.js';
  $form['#attached']['css'][] = drupal_get_path('module', 'ms_core') . '/css/ms_core.checkout.css';

  $vars = array();
  $billing_email = '';
  if (!is_null($order)) {
    // Load the account from the order.
    $account = user_load($order->uid);
    if ($account->uid) {
      $vars += (array)$account;
    }
    if (isset($order->data['register_form']['email1']) && $order->data['register_form']['email1']) {
      // Get the address and email from the registration form.
      $vars += $order->data['register_form'];
    }
    if (!empty($order->data['form']['mail'])) {
      $vars += $order->data['form'];
    }
    if (!empty($order->data['form']['values']['mail'])) {
      $vars += $order->data['form']['values'];
    }
    if (!empty($order->shipping_address)) {
      $varst = $order->shipping_address;
      $vars += array(
        'cc_first_name' => trim($varst['first_name']),
        'cc_last_name' => trim($varst['last_name']),
        'billing_address1' => trim($varst['street']),
        'billing_address2' => trim($varst['street2']),
        'billing_city' => trim($varst['city']),
        'billing_state' => trim($varst['state']),
        'billing_zip' => trim($varst['zip']),
        'billing_country' => trim($varst['country']),
        'billing_phone' => trim($varst['phone']),
      );
    }

    $billing_email = $order->email_address;
  }

  $form['billing'] = array(
    '#type' => 'fieldset',
    '#title' => check_plain(($billing) ? t('Billing Info') : t('Address')),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );

  $fields = ms_core_get_checkout_form_fields('billing');

  // Billing Info.
  foreach ($fields as $field => $data) {
    if (variable_get('ms_checkout_form_' . $field . '_enabled', TRUE)) {
      $form['billing'][$field] = array(
        '#type' => $data['type'],
        '#title' => check_plain(variable_get('ms_checkout_form_' . $field . '_title', $data['name'])),
        '#description' => check_plain(variable_get('ms_checkout_form_' . $field . '_description', $data['description'])),
        '#size' => $data['size'],
        '#required' => variable_get('ms_checkout_form_' . $field . '_required', $data['required']),
        '#default_value' => ms_core_get_form_field_default(variable_get('ms_core_profile_' . $field, $data['profile']), $vars),
      );
      if ($field == 'billing_country') {
        $form['billing'][$field]['#options'] = ms_core_get_countries('iso');
        $form['billing'][$field]['#default_value'] = ms_core_get_form_field_default(variable_get('ms_core_profile_' . $field, $data['profile']), $vars) ? ms_core_get_form_field_default(variable_get('ms_core_profile_' . $field, $data['profile']), $vars) : variable_get('ms_core_default_country', 'US');
      }
      if ($field == 'billing_email') {
        $form['billing'][$field]['#default_value'] = $billing_email;
      }
      if (empty($form['billing'][$field]['#default_value'])) {
        $form['billing'][$field]['#default_value'] = ms_core_get_form_field_default($field, $vars);
      }
      // @todo - Add state selection ajax.
    } else {
      $form['billing'][$field] = array(
        '#type' => 'value',
        '#value' => ms_core_get_form_field_default(variable_get('ms_core_profile_' . $field, $data['profile']), $vars),
      );
      if (empty($form['billing'][$field]['#value'])) {
        $form['billing'][$field]['#value'] = ms_core_get_form_field_default($field, $vars);
      }
    }
  }
}

/**
 * Form constructor for the Credit Card Form.
 *
 * @param MsOrder $order
 *   (Optional) The order object. This is used to get variables for auto-fill.
 *   Defaults to NULL.
 * @param array $cards
 *   (optional) What cards to allow. Defaults to an empty aray.
 * @param bool $use_card
 *   (optional) Whether to show the credit card portion of the form. Defaults
 *   to TRUE.
 *
 * @see ms_core_cc_form_validate()
 * @ingroup forms
 */
function ms_core_get_cc_form(&$form, $order = NULL, $cards = array(), $use_card = TRUE) {
  $form['#attached']['js'][] = drupal_get_path('module', 'ms_core') . '/js/checkout_form.js';
  $form['#attached']['css'][] = drupal_get_path('module', 'ms_core') . '/css/ms_core.checkout.css';

  if (!empty($cards[0])) {
    $cards = drupal_map_assoc($cards);
  }
  $vars = array();
  if (!is_null($order)) {
    // Load the account from the order.
    $account = user_load($order->uid);
    if ($account->uid) {
      $vars += (array)$account;
    }
    if (isset($order->data['register_form']['email1']) && $order->data['register_form']['email1']) {
      // Get the address and email from the registration form.
      $vars += $order->data['register_form'];
    }
    if (!empty($order->data['form']['mail'])) {
      $vars += $order->data['form'];
    }
    if (!empty($order->data['form']['values']['mail'])) {
      $vars += $order->data['form']['values'];
    }
    if (!empty($order->shipping_address)) {
      $varst = $order->shipping_address;
      $vars += array(
        'cc_first_name' => trim($varst['first_name']),
        'cc_last_name' => trim($varst['last_name']),
      );
    }
  }

  $form['cc'] = array(
    '#type' => 'fieldset',
    '#title' => check_plain(($use_card) ? t('Payment') : t('Name')),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );

  // Credit Card Info.
  $fields = ms_core_get_checkout_form_fields('cc');

  foreach ($fields as $field => $data) {
    if (variable_get('ms_checkout_form_' . $field . '_enabled', TRUE)) {
      $form['cc'][$field] = array(
        '#type' => $data['type'],
        '#title' => check_plain(variable_get('ms_checkout_form_' . $field . '_title', $data['name'])),
        '#description' => check_plain(variable_get('ms_checkout_form_' . $field . '_description', $data['description'])),
        '#size' => $data['size'],
        '#required' => variable_get('ms_checkout_form_' . $field . '_required', $data['required']),
        '#default_value' => ms_core_get_form_field_default(variable_get('ms_core_profile_' . $field, $data['profile']), $vars),
      );
      if (empty($form['cc'][$field]['#default_value'])) {
        $form['cc'][$field]['#default_value'] = ms_core_get_form_field_default($field, $vars);
      }
    } else {
      $form['cc'][$field] = array(
        '#type' => 'value',
        '#value' => ms_core_get_form_field_default(variable_get('ms_core_profile_' . $field, $data['profile']), $vars),
      );
      if (empty($form['cc'][$field]['#value'])) {
        $form['cc'][$field]['#value'] = ms_core_get_form_field_default($field, $vars);
      }
    }
  }

  if ($use_card) {
    $form['cc']['secure'] = array(
      '#type' => 'fieldset',
      '#title' => t('Secure Credit Card Payment'),
      '#prefix' => "<div class='ms_checkout_secure'>",
      '#suffix' => "</div>",
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
    );
    $form['cc']['secure']['cards'] = array(
      '#type' => 'item',
      '#markup' => ms_core_get_cc_images($cards, TRUE),
    );
    $form['cc']['secure']['cc_type'] = array(
      '#type' => 'select',
      '#options' => $cards,
      '#required' => TRUE,
      '#attributes' => array(
        'class' => array('ms_checkout_cc_type'),
      ),
    );
    $form['cc']['secure']['cc_number'] = array(
      '#type' => 'textfield',
      '#title' => t('Card Number'),
      '#size' => 32,
      '#maxlength' => 20,
      '#required' => TRUE,
      '#attributes' => array(
        'class' => array('ms_checkout_cc_number'),
      ),
    );
    $months = ms_core_get_months();
    $form['cc']['secure']['cc_exp_month'] = array(
      '#type' => 'select',
      '#title' => t('Month'),
      '#options' => $months,
      '#required' => TRUE,
      '#default_value' => key($months),
      '#prefix' => "<div class='ms_core_cc_month'>",
      '#suffix' => "</div>",
    );
    $years = ms_core_get_years();
    $form['cc']['secure']['cc_exp_year'] = array(
      '#type' => 'select',
      '#title' => t('Year'),
      '#options' => $years,
      '#required' => TRUE,
      '#default_value' => key($years),
      '#prefix' => "<div class='ms_core_cc_year'>",
      '#suffix' => "</div>",
    );
    drupal_add_library('system', 'ui.dialog');
    $cvv_image_path = url(drupal_get_path('module', 'ms_core') . '/images/cvv.png', array('absolute' => TRUE));
    $form['cc']['secure']['cc_cvv'] = array(
      '#type' => 'textfield',
      '#title' => t('CVC'),
      '#size' => 5,
      '#maxlength' => 5,
      '#required' => TRUE,
      // @todo - Make this CVV help translatable, perhaps use a template file.
      '#prefix' => "<div class='ms_core_cc_cvv'><div title='" . t('CVV') . "' class='ms_core_cvv_dialog' style='display: none;'>
        <img src='$cvv_image_path' /></div>",
      '#suffix' => l(t('What is this?'), $cvv_image_path, array('attributes' => array('class' => array('ms_core_cvv_link'), 'target' => '_blank'))) . "</div>",
    );
  }
}

/**
 * Form validation handler for ms_core_cc_form().
 */
function ms_core_cc_form_validate($form, &$form_state) {
  // Clean the card number.
  if (isset($form_state['values']['cc_number'])) {
    $form_state['values']['cc_number'] = ms_core_clean_cc_number($form_state['values']['cc_number']);
  }

  $v = $form_state['values'];
  // Validate Expiration Date.
  if (isset($v['cc_exp_year']) && $v['cc_exp_year'] < date('Y')) {
    form_set_error('cc_exp_year', t('The card you entered is expired.'));
  }
  if (isset($v['cc_exp_year']) && $v['cc_exp_year'] == date('Y') && $v['cc_exp_month'] < date('n')) {
    form_set_error('cc_exp_month', t('The card you entered is expired.'));
  }
}

/**
 * Cleans a credit card number by stripping non-integer characters.
 *
 * @param string $num
 *   The dirty credit card number.
 *
 * @return string
 *   The clean credit card number.
 */
function ms_core_clean_cc_number($num) {
  return str_replace(array('-', ' '), array('', ''), $num);
}

/**
 * Implements hook_mail().
 */
function ms_core_mail($key, &$message, $vars) {
  $tokens = array();
  $subject = "";
  $body = "";
  switch ($key) {
    case 'admin_error':
      $subject = t("Error Notice");
      $body = t("There was an error that needs your attention here: !url",
        array('!url' => url('admin/reports/event/' . $vars['log_id'], array('absolute' => TRUE))));
      break;

    case 'upcoming_payment':
      // Load the vars.
      $order = $vars['order'];
      $account = user_load($order->uid);

      $subject = variable_get('ms_core_upcoming_payment_mail_subject', '');
      $body = variable_get('ms_core_upcoming_payment_mail_body', '');
      $tokens = array(
        'ms_core_order' => $order,
        'user' => $account,
      );
      break;

    case 'billing_error':
      $payment_profile = $vars['payment_profile'];
      $order = $vars['order'];
      $account = user_load($payment_profile->uid);

      $subject = variable_get($payment_profile->module . '_billing_error_subject', '');
      $body = variable_get($payment_profile->module . '_billing_error_body', '');
      $tokens = array(
        'ms_core_order' => $order,
        'ms_core_payment_profile' => $payment_profile,
        'user' => $account,
      );
      break;

    case 'expiring_card':
      // Load the vars.
      $payment_profile = $vars['payment_profile'];
      $account = user_load($payment_profile->uid);

      $subject = variable_get($payment_profile->module . '_expiring_card_reminder_mail_subject', '');
      $body = variable_get($payment_profile->module . '_expiring_card_reminder_mail_body', '');
      $tokens = array(
        'ms_core_payment_profile' => $payment_profile,
        'user' => $account,
      );
      break;

    case 'thankyou':
      $subject = ms_core_variable_get('ms_core_order_thankyou_mail_subject', '', $vars['ms_core_order']);
      $body = ms_core_variable_get('ms_core_order_thankyou_mail_body', '', $vars['ms_core_order']);
      $tokens = $vars;
      break;
  }

  // Replace the Tokens.
  $message['subject'] = token_replace($subject, $tokens);
  $message['body'][] = token_replace($body, $tokens);
}

/**
 * Implements hook_token_info().
 */
function ms_core_token_info() {
  $types = array(
    'ms_core_order' => array(
      'name' => t('Order', array(), array('context' => 'ms_core')),
      'description' => t('Order Variables as defined by MS Core'),
      'needs-data' => 'ms_core_order',
    ),
    'ms_core_payment' => array(
      'name' => t('Payment'),
      'description' => t('Payment Variables as defined by MS Core'),
      'needs-data' => 'ms_core_payment',
    ),
    'ms_core_product' => array(
      'name' => t('Product'),
      'description' => t('Product Variables as defined by MS Core'),
      'needs-data' => 'ms_core_product',
    ),
    'ms_core_payment_profile' => array(
      'name' => t('Payment Profile'),
      'description' => t('Payment Profile Variables as defined by MS Core'),
      'needs-data' => 'ms_core_payment_profile',
    ),
  );

  $tokens = array(
    'ms_core_order' => array(
      'orderId' => array(
        'name' => t('Order ID'),
        'description' => t("The id number of the order"),
      ),
      'orderStatus' => array(
        'name' => t('Order Status'),
        'description' => t("The status of the order"),
      ),
      'orderType' => array(
        'name' => t('Order Type'),
        'description' => t("The type of the order"),
      ),
      'orderCreated' => array(
        'name' => t('Order Created Date'),
        'description' => t("When the order was created"),
      ),
      'orderModified' => array(
        'name' => t('Order Modified Date'),
        'description' => t("When the order was modified"),
      ),
      'nextPaymentDate' => array(
        'name' => t('Next Payment Date'),
        'description' => t("The date of the next scheduled payment"),
      ),
      'nextPaymentAmount' => array(
        'name' => t('Next Payment Amount'),
        'description' => t("The amount of the next scheduled payment"),
      ),
      'orderAmount' => array(
        'name' => t('Order Amount'),
        'description' => t("The total amount of the order"),
      ),
      'orderNet' => array(
        'name' => t('Order Net'),
        'description' => t("The net amount of the order before adjustments"),
      ),
      'orderProducts' => array(
        'name' => t('Order Products Summary'),
        'description' => t("A listing of the products in the order"),
      ),
      'orderPayments' => array(
        'name' => t('Order Payments Summary'),
        'description' => t("A listing of the payments made for the order"),
      ),
      'orderSummaryHTML' => array(
        'name' => t('Order Summary HTML'),
        'description' => t("A summary of the products, adjustments, and total of the order. In HTML rather than plain text."),
      ),
      'orderSummary' => array(
        'name' => t('Order Summary'),
        'description' => t("A summary of the products, adjustments, and total of the order"),
      ),
      'customerName' => array(
        'name' => t('Customer Name'),
        'description' => t("The customer's full name"),
      ),
      'customerEmail' => array(
        'name' => t('Customer Email'),
        'description' => t("The customer's email address"),
      ),
      'billingStreet' => array(
        'name' => t('Billing Address - Street'),
        'description' => t("The customer's billing address street"),
      ),
      'billingCity' => array(
        'name' => t('Billing Address - City'),
        'description' => t("The customer's billing address city"),
      ),
      'billingState' => array(
        'name' => t('Billing Address - State'),
        'description' => t("The customer's billing address state"),
      ),
      'billingZip' => array(
        'name' => t('Billing Address - Zip Code'),
        'description' => t("The customer's billing address zip"),
      ),
      'billingCountry' => array(
        'name' => t('Billing Address - Country'),
        'description' => t("The customer's billing address country"),
      ),
      'shippingStreet' => array(
        'name' => t('Shipping Address - Street'),
        'description' => t("The customer's shipping address street"),
      ),
      'shippingStreet2' => array(
        'name' => t('Shipping Address - Street 2'),
        'description' => t("The customer's shipping address street 2"),
      ),
      'shippingCity' => array(
        'name' => t('Shipping City'),
        'description' => t("The customer's shipping address city"),
      ),
      'shippingState' => array(
        'name' => t('Shipping Address - State'),
        'description' => t("The customer's shipping address state"),
      ),
      'shippingZip' => array(
        'name' => t('Shipping Address - Zip Code'),
        'description' => t("The customer's shipping address zip"),
      ),
      'shippingCountry' => array(
        'name' => t('Shipping Address - Country'),
        'description' => t("The customer's shipping address country"),
      ),
    ),
    'ms_core_payment' => array(
      'paymentAmount' => array(
        'name' => t('Payment Amount'),
        'description' => t("The amount that was paid"),
      ),
      'paymentAmountPlain' => array(
        'name' => t('Payment Amount (Plain)'),
        'description' => t("The amount that was paid. For use in Plain Text, such as emails."),
      ),
      'paymentType' => array(
        'name' => t('Payment Type'),
        'description' => t("The type of payment"),
      ),
      'gatewayName' => array(
        'name' => t('Gateway Name'),
        'description' => t("The payment gateway that was used"),
      ),
      'paymentDate' => array(
        'name' => t('Payment Date'),
        'description' => t("The date the payment was made"),
      ),
      'transactionID' => array(
        'name' => t('Transaction ID'),
        'description' => t("The 3rd party (paypal) transaction id"),
      ),
    ),
    'ms_core_product' => array(
      'productType' => array(
        'name' => t('Product Type'),
        'description' => t("The Product Type (recurring/cart)."),
      ),
      'productId' => array(
        'name' => t('Product ID'),
        'description' => t("The item ID in the respective module."),
      ),
      'productName' => array(
        'name' => t('Product Name'),
        'description' => t("The name of the product."),
      ),
      'productPrice' => array(
        'name' => t('Product Price'),
        'description' => t("The price set for the product"),
      ),
      'productQty' => array(
        'name' => t('Product Quantity'),
        'description' => t("The number of this product. Usually 1."),
      ),
      'productModule' => array(
        'name' => t('Product Module'),
        'description' => t("The module associated with the product."),
      ),
    ),
    'ms_core_payment_profile' => array(
      'first_name' => array(
        'name' => t('First Name'),
        'description' => t("The First Name associated with this profile."),
      ),
      'last_name' => array(
        'name' => t('Last Name'),
        'description' => t("The Last Name associated with this profile."),
      ),
      'address' => array(
        'name' => t('Address'),
        'description' => t("The Address associated with this profile."),
      ),
      'city' => array(
        'name' => t('City'),
        'description' => t("The City associated with this profile."),
      ),
      'state' => array(
        'name' => t('State'),
        'description' => t("The State associated with this profile."),
      ),
      'zip' => array(
        'name' => t('Zip Code'),
        'description' => t("The Zip Code associated with this profile."),
      ),
      'country' => array(
        'name' => t('Country'),
        'description' => t("The Country associated with this profile."),
      ),
      'phone' => array(
        'name' => t('Phone'),
        'description' => t("The Phone associated with this profile."),
      ),
      'fax' => array(
        'name' => t('Fax'),
        'description' => t("The Fax associated with this profile."),
      ),
      'email' => array(
        'name' => t('Email'),
        'description' => t("The Email associated with this profile."),
      ),
      'cc_type' => array(
        'name' => t('Credit Card Type'),
        'description' => t("The Credit Card Type associated with this profile."),
      ),
      'cc_num' => array(
        'name' => t('Credit Card Number'),
        'description' => t("The Credit Card Number associated with this profile."),
      ),
      'exp_month' => array(
        'name' => t('Credit Card Expiration Month'),
        'description' => t("The Credit Card Expiration Month associated with this profile."),
      ),
      'exp_year' => array(
        'name' => t('Credit Card Expiration Year'),
        'description' => t("The Credit Card Expiration Year associated with this profile."),
      ),
      'update_url' => array(
        'name' => t('Update URL'),
        'description' => t("The URL to the page where a user can update the Payment Profile."),
      ),
    ),
  );

  return array('types' => $types, 'tokens' => $tokens);
}

/**
 * Implements hook_tokens().
 *
 * @todo - Use the Entity API for this instead of tokens...
 */
function ms_core_tokens($type, $tokens, $data = array(), $options = array()) {
  $replacements = array();

  if ($type == 'ms_core_order' && !empty($data['ms_core_order'])) {
    $object = $data['ms_core_order'];
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'orderId':
          $replacements[$original] = ms_core_order_number($object);
          break;
        case 'orderStatus':
          $replacements[$original] = ms_core_get_order_status($object->status);
          break;
        case 'orderType':
          $replacements[$original] = ms_core_get_order_type($object);
          break;
        case 'orderCreated':
          $replacements[$original] = format_date($object->created, 'small');
          break;
        case 'orderModified':
          $replacements[$original] = format_date($object->modified, 'small');
          break;
        case 'nextPaymentDate':
          $recurring_schedule = ms_core_get_recurring_schedule($object->oid);
          $replacements[$original] = ms_core_get_next_payment_date($recurring_schedule);
          break;
        case 'nextPaymentAmount':
          $recurring_schedule = ms_core_get_recurring_schedule($object->oid);
          $replacements[$original] = ms_core_get_next_payment_amount($recurring_schedule);
          break;
        case 'orderAmount':
          $replacements[$original] = ms_core_format_money($object->amount, $object->currency, 'Plain');
          break;
        case 'orderNet':
          $replacements[$original] = ms_core_format_money(ms_core_get_order_products_total($object), $object->currency, 'Plain');
          break;
        case 'orderProducts':
          $replacements[$original] = ms_core_list_products($object);
          break;
        case 'orderPayments':
          $replacements[$original] = ms_core_list_payments($object);
          break;
        case 'orderSummaryHTML':
          $replacements[$original] = ms_core_get_order_details_table($object);
          break;
        case 'orderSummary':
          $replacements[$original] = ms_core_get_order_summary($object);
          break;
        case 'customerName':
          if ($object->first_name) {
            $replacements[$original] = $object->first_name . ' ' . $object->last_name;
          } else {
            if ($account = user_load($object->uid)) {
              $replacements[$original] = $account->name;
            } else {
              $replacements[$original] = t('N/A');
            }
          }
          break;
        case 'customerEmail':
          if ($object->email_address) {
            $replacements[$original] = $object->email_address;
          } else {
            if ($account = user_load($object->uid)) {
              $replacements[$original] = $account->mail;
            } else {
              $replacements[$original] = t('N/A');
            }
          }
          break;
        case 'billingStreet':
          $replacements[$original] = $object->billing_address['street'];
          break;
        case 'billingCity':
          $replacements[$original] = $object->billing_address['city'];
          break;
        case 'billingState':
          $replacements[$original] = $object->billing_address['state'];
          break;
        case 'billingZip':
          $replacements[$original] = $object->billing_address['zip'];
          break;
        case 'billingCountry':
          $replacements[$original] = $object->billing_address['country'];
          break;
        case 'shippingStreet':
          $replacements[$original] = $object->shipping_address['street'];
          break;
        case 'shippingStreet2':
          $replacements[$original] = $object->shipping_address['street2'];
          break;
        case 'shippingCity':
          $replacements[$original] = $object->shipping_address['city'];
          break;
        case 'shippingState':
          $replacements[$original] = $object->shipping_address['state'];
          break;
        case 'shippingZip':
          $replacements[$original] = $object->shipping_address['zip'];
          break;
        case 'shippingCountry':
          $replacements[$original] = $object->shipping_address['country'];
          break;
      }
    }
  }

  if ($type == 'ms_core_payment' && !empty($data['ms_core_payment'])) {
    $object = $data['ms_core_payment'];
    if (!isset($object->currency)) {
      $object->currency = '';
    }
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'paymentAmount':
          $replacements[$original] = ms_core_format_money($object->amount, $object->currency);
          break;
        case 'paymentAmountPlain':
          $replacements[$original] = ms_core_format_money($object->amount, $object->currency, 'Plain');
          break;
        case 'paymentType':
          $replacements[$original] = $object->type;
          break;
        case 'gatewayName':
          $replacements[$original] = isset($object->gateway) ? ms_core_get_payment_gateway_name($object->gateway) : t('N/A');
          break;
        case 'paymentDate':
          $replacements[$original] = isset($object->created) ? format_date($object->created, 'small') : t('N/A');
          break;
        case 'transactionID':
          $replacements[$original] = $object->transaction;
          break;
      }
    }
  }
  if ($type == 'ms_core_product' && !empty($data['ms_core_product'])) {
    $object = $data['ms_core_product'];
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'productType':
          $replacements[$original] = $object->type;
          break;
        case 'productId':
          $replacements[$original] = $object->id;
          break;
        case 'productName':
          $replacements[$original] = $object->name;
          break;
        case 'productPrice':
          $replacements[$original] = ms_core_format_money($object->amount);
          break;
        case 'productQty':
          $replacements[$original] = $object->qty;
          break;
        case 'productModule':
          $replacements[$original] = $object->module;
          break;
      }
    }
  }
  if ($type == 'ms_core_payment_profile' && !empty($data['ms_core_payment_profile'])) {
    $object = (array)$data['ms_core_payment_profile'];
    foreach ($tokens as $name => $original) {
      $replacements[$original] = !empty($object[$name]) ? $object[$name] : NULL;

      if ($name == 'update_url') {
        $replacements[$original] = url('user/' . $object['uid'] . '/billing-info', array('absolute' => TRUE));
      }
    }
  }

  return $replacements;
}

/**
 * Returns a string listing of the products for an order.
 *
 * @param MsOrder $order
 *   The order object.
 *
 * @return string
 *   The listing of products.
 */
function ms_core_list_products(MsOrder $order) {
  $products = array();
  if (is_array($order->products)) {
    foreach ($order->products as $product) {
      $products[] = $product->name;
    }
    return implode($products, ', ');
  } else {
    return '';
  }
}

/**
 * Returns a string listing of the payments for an order.
 *
 * @param MsOrder $order
 *   The order object.
 *
 * @return string
 *   A listing of the payments.
 */
function ms_core_list_payments(MsOrder $order) {
  $payments = array();
  if (is_array($order->payments)) {
    foreach ($order->payments as $payment) {
      $payments[] = format_date($payment->created, 'small') . ' - ' . ms_core_format_money($payment->amount, $payment->currency, 'payment_amount');
    }
    return implode($payments, ', ');
  } else {
    return '';
  }
}

/**
 * Returns a string summary of the order products, adjustments, and total.
 *
 * @param MsOrder $order
 *   The order object.
 *
 * @return string
 *   A summary for the order.
 */
function ms_core_get_order_summary(MsOrder $order) {
  $products = ms_core_list_products($order);
  $payments = ms_core_list_payments($order);

  return t('Order Summary') . ':
'
  . t('Products') . ':' . $products . '
'
  . t('Payments') . ': ' . $payments;
}

/**
 * Form constructor for the checkout button.
 *
 * @see ms_core_get_checkout_button_submit()
 * @ingroup forms
 */
function ms_core_get_checkout_button($form, $form_state) {
  $form = array();

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Checkout'),
  );

  return $form;
}

/**
 * Form submission handler for ms_core_get_checkout_button().
 */
function ms_core_get_checkout_button_submit($form, $form_state) {
  drupal_goto('ms/checkout');
}

/**
 * Form constructor for the continue shopping button.
 *
 * @see ms_core_get_continue_shopping_button_submit()
 * @ingroup forms
 */
function ms_core_get_continue_shopping_button($form, $form_state, $redirect) {
  $form = array();

  $form['redirect'] = array(
    '#type' => 'value',
    '#value' => $redirect,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Continue Shopping'),
  );

  return $form;
}

/**
 * Form submission handler for ms_core_get_continue_shopping_button().
 */
function ms_core_get_continue_shopping_button_submit($form, $form_state) {
  drupal_goto($form_state['values']['redirect']);
}

/**
 * Returns the HTML to use for the Subtotal Field.
 *
 * @param MsOrder $order
 *   The order object to get the HTML for the items of.
 *
 * @return string
 *   An HTML string listing the items for the order.
 */
function ms_core_get_order_subtotal_html(MsOrder $order) {
  if ($order->order_type == 'recurring') {
    $subtotal = ms_core_get_order_products_total($order);

    foreach ($order->products as $product) {
      if ($product->recurring_schedule['has_trial']) {
        $product->recurring_schedule['trial_amount'] = $subtotal;
      } else {
        $product->recurring_schedule['main_amount'] = $subtotal;
      }

      $product->recurring_schedule['qty'] = $product->qty;

      return ms_core_get_recurring_string($product->recurring_schedule, TRUE);
    }
    $subtotal = ms_core_get_order_products_total($order);
    return ms_core_format_money($subtotal, $order->currency);
  } else {
    $subtotal = ms_core_get_order_products_total($order);
    return ms_core_format_money($subtotal, $order->currency);
  }
}

/**
 * Returns the HTMl to use for the Total Field.
 *
 * @param MsOrder $order
 *   The order object to get the HTML for the items of.
 *
 * @return string
 *   An HTML string listing the items for the order.
 */
function ms_core_get_order_total_html(MsOrder $order) {
  if ($order->order_type == 'recurring') {
    $recurring_schedule = $order->recurring_schedule;

    foreach ($order->products as $product) {
      $recurring_schedule['qty'] = $product->qty;
    }

    // Add in the data for overrides.
    $recurring_schedule['data'] = $order->data;
    $recurring_schedule['currency'] = $order->currency;
    return ms_core_get_recurring_string($recurring_schedule, TRUE);
  } else {
    $recurring_schedule['main_amount'] = $order->amount;
    $recurring_schedule['data'] = $order->data;
    $recurring_schedule['currency'] = $order->currency;
    return ms_core_get_recurring_string($recurring_schedule);
  }
}

/**
 * Gets a translated string for the adjustment scope.
 *
 * @param string $scope
 *   The scope to get the name for.
 *
 * @return string
 *   A translated string for the scope name.
 */
function ms_core_get_scope_name($scope) {
  $scopes = ms_core_get_scopes();
  return isset($scopes[$scope]) ? $scopes[$scope] : $scope;
}

/**
 * Gets an array of scopes, used for forms.
 *
 * @return array
 *   An array of scopes.
 */
function ms_core_get_scopes() {
  return array(
    'initial' => t('Initial'),
    'recurring' => t('Persistent'),
  );
}

/**
 * Returns an array of adjustment types.
 *
 * @return array
 *   An array of adjustment types.
 */
function ms_core_get_adjustment_types() {
  return array(
    'percentage' => t('Percentage'),
    'fixed' => t('Fixed'),
  );
}

/**
 * Shortens a name.
 *
 * @param string $name
 *   The name to shorten.
 * @param int $length
 *   (optional) The length to shorten the name to. Defaults to 25.
 * @param string $char
 *   (optional) The string to append after the shortened name. Defaults to
 *   '...'.
 *
 * @return string
 *   The shortened name.
 */
function ms_core_shorten_name($name, $length = 25, $char = '...') {
  if (strlen($name) > $length) {
    return substr($name, 0, $length) . $char;
  }
  return $name;
}

/**
 * Returns the Cart Block HTML.
 *
 * @param bool $hide_if_empty
 *   Whether the block should be hidden if the cart is empty.
 * @param string $help_text
 *   The help text to show in the block.
 *
 * @return string
 *   The cart block html.
 */
function ms_core_get_cart_block_html($hide_if_empty, $help_text) {
  $html = '';
  $order = ms_core_load_session_order();
  if ($order && $order->status == 'checkout') {
    $cart = $order;
  } else {
    $cart = ms_core_get_cart();
  }
  if ($cart && count($cart->products)) {
    // Add the CSS.
    drupal_add_css(drupal_get_path('module', 'ms_core') . '/css/ms_core.css');

    $html .= "<div id='ms_cart_block_cart_contents'>";

    foreach ($cart->products as $prod_num => $product) {
      $qty_display = "";
      if ($product->qty > 1) {
        $qty_display = " x" . $product->qty;
      }
      $item = "<div class='ms_cart_block_contents_item'>";
      $item .= "<span class='ms_cart_block_contents_item_name ms_cart_left'>" . ms_core_shorten_name($product->name, 15) . $qty_display . "</span>";
      $item .= "<span class='ms_cart_block_contents_item_remove ms_cart_right'>"
        . "<a href='" . url('ms/cart/remove/' . $prod_num, array('query' => drupal_get_destination())) . "'><img src='" . base_path() . drupal_get_path('module', 'ms_core') . '/images/trash_can.png' . "' /></a>"
        . "</span>";
      $item .= "<span class='ms_cart_block_contents_item_price ms_cart_right'>" . ms_core_format_money($product->amount) . "</span>";
      $item .= "</div>";
      $html .= $item;

      // Add the product specific adjustments here.
      $product_total = ms_core_get_product_display_price($product);
      foreach ($cart->adjustments as $adjustment) {
        if ($adjustment->active && !empty($adjustment->product_id) && $adjustment->product_id == $product->cart_product_id) {
          $value = ms_core_get_adjusted_price($adjustment, $product_total);
          $product_total += $value;
          $item = "<div class='ms_cart_block_contents_item'>";
          $item .= "<span class='ms_cart_block_contents_adjustment_name ms_cart_left'>" . ms_core_shorten_name($adjustment->display, 15) . "</span>";
          $item .= "<span class='ms_cart_block_contents_adjustment_value ms_cart_right'>" . ms_core_format_money($value) . "</span>";
          $item .= "</div>";
          $html .= $item;
        }
      }
    }

    $price = ms_core_get_order_products_total($cart);
    foreach ($cart->adjustments as $adjustment) {
      // Only show the adjustments that don't have product associations.
      if ($adjustment->active && empty($adjustment->product_id)) {
        $value = ms_core_get_adjusted_price($adjustment, $price);
        $price += $value;
        $item = "<div class='ms_cart_block_contents_item'>";
        $item .= "<span class='ms_cart_block_contents_adjustment_name ms_cart_left'>" . ms_core_shorten_name($adjustment->display, 15) . "</span>";
        $item .= "<span class='ms_cart_block_contents_adjustment_value ms_cart_right'>" . ms_core_format_money($value) . "</span>";
        $item .= "</div>";
        $html .= $item;
      }
    }

    $html .= "<div class='ms_cart_cleardiv'></div>";
    $html .= "</div>";

    // Total.
    $html .= "<div id='ms_cart_block_total'>";
    $html .= "<span class='ms_cart_block_total_label ms_cart_left'>" . t('Total') . "</span>";
    $html .= "<span class='ms_cart_block_total_price ms_cart_right'>" . ms_core_format_money($cart->amount) . "</span>";
    $html .= "<div class='ms_cart_cleardiv'></div>";
    $html .= "</div>";

    // Buttons.
    $html .= "<div id='ms_cart_block_buttons'>";
    $html .= "<span class='ms_cart_block_cart_button ms_cart_button'>" . l(t('View Cart'), 'ms/cart') . "</span>";
    $html .= "<span class='ms_cart_block_checkout_button ms_cart_button'>" . l(t('Check out'), 'ms/checkout') . "</span>";
    $html .= "<div class='ms_cart_cleardiv'></div>";
    $html .= "</div>";

    if ($help_text) {
      $html .= "<div id='ms_cart_block_help_text'>" . $help_text . "</div>";
    }
  } elseif (!$hide_if_empty) {
    $html .= "<div id='ms_cart_block_cart_contents'>" . t('!cartLink your shopping cart.', array('!cartLink' => l(t('View'), 'ms/cart'))) . "</div>";
    if ($help_text) {
      $html .= "<div id='ms_cart_block_help_text'>" . $help_text . "</div>";
    }
  }
  return $html;
}

/**
 * Converts a cart product to a regular product.
 *
 * @param object $c_product
 *   The cart product to convert.
 *
 * @return MsProduct
 *   The new MsProduct object.
 */
function ms_core_cart_product_to_ms_product($c_product) {
  $product = new MsProduct();

  $product->type = $c_product->type;
  $product->id = $c_product->id;
  $product->name = $c_product->name;
  $product->module = $c_product->module;
  $product->qty = $c_product->qty;
  $product->amount = $c_product->amount;
  $product->recurring_schedule = $c_product->recurring_schedule;
  $product->data = $c_product->data;

  // Divide the recurring schedule by the quantity so that it isn't applied twice.
  $product->recurring_schedule['main_amount'] /= $product->qty;
  $product->recurring_schedule['trial_amount'] /= $product->qty;

  return $product;
}

/**
 * Converts a cart to an order.
 *
 * @param array $data
 *   (Optional) Any extra data. Default is NULL.
 *
 * @return MsOrder
 *   The new MsOrder object.
 *
 * @ingroup ms_core_api
 */
function ms_core_cart_to_order($data = NULL) {
  global $user;
  $cart = ms_core_get_cart();

  // Create a new order.
  $order = ms_core_order_new($cart->order_type, $user->uid);

  $product_ids_map = array();

  // Add the products to the order.
  foreach ($cart->products as $c_product) {
    // Create a new MsProduct object and load the values from the cart object.
    $c_product->recurring_schedule['main_length'] *= $c_product->qty;
    $product = ms_core_cart_product_to_ms_product($c_product);
    $order = ms_core_add_order_product($order, $product);
    if ($cart->order_type == 'recurring') {
      // Modify the occurrences by qty.
      $order = ms_core_set_recurring_schedule($order, $product->recurring_schedule);
    }

    $product_ids_map[$c_product->cart_product_id] = $product->order_product_id;
  }

  // Add the adjustments to the order.
  foreach ($cart->adjustments as $adjustment) {
    // Change the product_id if it is set, since the product id has changed.
    if (!empty($adjustment->product_id)) {
      $adjustment->product_id = $product_ids_map[$adjustment->product_id];
    }
    $order = ms_core_add_order_adjustment($order, $adjustment);
  }

  $order = ms_core_order_load($order->oid);

  // Add the data.
  if ($data) {
    $order = ms_core_add_data($order, $data);
  }

  if (isset($data['register_form']['shipping_country'])) {
    $order->shipping_address = array(
      'street' => !empty($data['register_form']['shipping_address1']) ? trim($data['register_form']['shipping_address1']) : '',
      'street2' => !empty($data['register_form']['shipping_address2']) ? trim($data['register_form']['shipping_address2']) : '',
      'city' => !empty($data['register_form']['shipping_city']) ? trim($data['register_form']['shipping_city']) : '',
      'state' => !empty($data['register_form']['shipping_state']) ? trim($data['register_form']['shipping_state']) : '',
      'zip' => !empty($data['register_form']['shipping_zip']) ? trim($data['register_form']['shipping_zip']) : '',
      'country' => !empty($data['register_form']['shipping_country']) ? trim($data['register_form']['shipping_country']) : '',
      'phone' => !empty($data['register_form']['shipping_phone']) ? trim($data['register_form']['shipping_phone']) : '',
    );
  }

  // Set the currency if it is overridden.
  $order->currency = ms_core_variable_get('ms_core_default_currency', 'USD', $order);

  // Set the email address for the order.
  $order->email_address = '';

  if ($user->uid) {
    $order->email_address = $user->mail;
  } elseif (isset($order->data['form']['mail'])) {
    $order->email_address = $order->data['form']['mail'];
  } elseif (isset($data['register_form']['email1'])) {
    $order->email_address = $data['register_form']['email1'];
  } elseif (isset($order->data['form']['values']['mail'])) {
    $order->email_address = $order->data['form']['values']['mail'];
  }

  // Save the order.
  ms_core_order_save($order);

  // Empty the cart.
  ms_core_empty_cart($cart->cart_id);

  // Reload the order object.
  $order = ms_core_order_load($order->oid);

  ms_core_set_order_session($order);

  return $order;
}

/**
 * Removes an Adjustment from a cart.
 *
 * @param MsAdjustment $adjustment
 *   The adjustment object to remove.
 *
 * @ingroup ms_core_api
 */
function ms_core_remove_cart_adjustment($adjustment, $cart = NULL) {
  if (!$cart) {
    $cart = ms_core_get_cart();
  }
  db_delete('ms_cart_adjustments')
    ->condition('cart_id', $cart->cart_id)
    ->condition('id', $adjustment->id)
    ->execute();
}

/**
 * Removes an Adjustment Pattern from a cart.
 *
 * @param string $code
 *   The pattern to use for removing an adjustment.
 *
 * @ingroup ms_core_api
 */
function ms_core_remove_cart_adjustment_match($code) {
  $cart = ms_core_get_cart();
  db_delete('ms_cart_adjustments')
    ->condition('cart_id', $cart->cart_id)
    ->condition('id', $code . '%', 'LIKE')
    ->execute();
}

/**
 * Removes an Adjustment Pattern from an order.
 *
 * @param MsOrder $order
 *   The order object.
 * @param string $code
 *   The pattern to use for removing an adjustment.
 *
 * @ingroup ms_core_api
 */
function ms_core_remove_order_adjustment_match($order, $code) {
  db_delete('ms_order_adjustments')
    ->condition('oid', $order->oid)
    ->condition('id', $code . '%', 'LIKE')
    ->execute();
}

/**
 * Removes a product from a cart.
 *
 * @param object $product
 *   The product object.
 * @param object $cart
 *   (optional) The cart object. Defaults to NULL, which gets the cart from
 *   the SESSION variable.
 *
 * @ingroup ms_core_api
 */
function ms_core_remove_cart_product($product, $cart = NULL) {
  if (!$cart) {
    $cart = ms_core_get_cart();
  }

  // Call a hook here to let modules act on this.
  module_invoke_all('ms_cart_remove', $cart, $product);

  db_delete('ms_cart_products')
    ->condition('cart_id', $cart->cart_id)
    ->condition('cart_product_id', $product->cart_product_id)
    ->execute();

  // Remove any adjustments that were dependant on this product.
  db_delete('ms_cart_adjustments')
    ->condition('cart_id', $cart->cart_id)
    ->condition('product_id', $product->cart_product_id)
    ->execute();

  // Call a hook here to let modules act on this.
  module_invoke_all('ms_cart_removed', $cart, $product);
}

/**
 * Clears the Order from the Session.
 */
function ms_core_clear_order_session() {
  if (isset($_SESSION['ms_oid'])) {
    $order = ms_core_order_load($_SESSION['ms_oid']);
    if ($order && $order->status == 'checkout') {
      ms_core_order_delete($order->oid);
    }
    $_SESSION['ms_oid'] = NULL;
    unset($_SESSION['ms_oid']);
  }
}

/**
 * Empties a Shopping Cart.
 *
 * @param int $cart_id
 *   (optional) The shopping cart id. Defaults to NULL, which gets the cart from
 *   the SESSION.
 *
 * @ingroup ms_core_api
 */
function ms_core_empty_cart($cart_id = NULL) {
  $cart = ms_core_get_cart($cart_id);
  db_delete('ms_cart_products')
    ->condition('cart_id', $cart->cart_id)
    ->execute();
  db_delete('ms_cart_adjustments')
    ->condition('cart_id', $cart->cart_id)
    ->execute();
}

/**
 * Gets the items in a shopping cart for a user.
 *
 * If $cid is not passed in, this function uses the uid of the person currently
 * accessing this function.
 *
 * @param int $cid
 *   (optiona) The cart id. Defaults to NULL, which gets the current cart from
 *   the SESSION variable.
 * @param string $action
 *   (optional) The action to take. Could be 'rebuild'. Defaults to NULL.
 *
 * @return array
 *   An array of the cart contents.
 *
 * @ingroup ms_core_api
 */
function ms_cart_get_contents($cid = NULL, $action = NULL) {
  static $items = array();
  $cid = $cid ? $cid : ms_cart_get_id();

  if ($action == 'rebuild') {
    unset($items[$cid]);
  }

  if (!isset($items[$cid])) {
    $items[$cid] = array();
    $result = db_query("SELECT * FROM {ms_cart_products} WHERE cart_id = :cart_id", array(':cart_id' => $cid));

    foreach ($result as $item) {
      $items[$cid][] = $item;
    }
  }

  return $items[$cid];
}

/**
 * Returns the Cart object of the current session.
 *
 * @param int $cid
 *   (optional) The cart id. Defaults to NULL.
 *
 * @return MsOrder
 *   The cart object.
 *
 * @ingroup ms_core_api
 */
function ms_core_get_cart($cid = NULL) {
  $cid = $cid ? $cid : ms_cart_get_id();

  // Update the products so they don't expire.
  db_update('ms_cart_products')
    ->fields(array(
      'changed' => REQUEST_TIME,
    ))
    ->condition('cart_id', $cid)
    ->execute();

  $cart = new MsOrder();

  $cart->cart_id = $cid;

  // Get the Products for the Order.
  $cart->products = ms_core_get_cart_products($cid);

  // Get the Adjustments for the Order.
  $cart->adjustments = ms_core_get_cart_adjustments($cart);

  // Set the order type to multi_recurring if there are more than 1 product in
  // the cart and at least one of them is recurring.
  if (ms_core_multi_recurring_supported() && count($cart->products) > 1) {
    foreach ($cart->products as $product) {
      if ($product->type == 'recurring') {
        $cart->order_type = 'multi_recurring';
      }
    }
  } else {
    foreach ($cart->products as $product) {
      if ($product->type == 'recurring') {
        $cart->order_type = 'recurring';
      }
    }
  }

  // Add the product data to the cart data.
  foreach ($cart->products as $product) {
    $cart->data = array_merge($cart->data, $product->data);
  }

  // Set the currency if it is overridden.
  $cart->currency = ms_core_variable_get('ms_core_default_currency', 'USD', $cart);

  $cart->gateway = isset($_SESSION['ms_gateway']) ? $_SESSION['ms_gateway'] : '';

  $cart->calculate_total();

  return $cart;
}

/**
 * Returns the unique cart_id of the user.
 *
 * @return string
 *   The cart id.
 */
function ms_cart_get_id() {
  global $user;

  if ($user->uid) {
    return $user->uid;
  } elseif (!isset($_SESSION['ms_cart_id'])) {
    $_SESSION['ms_cart_id'] = md5(uniqid(rand(), TRUE));
  }

  return $_SESSION['ms_cart_id'];
}

/**
 * Adds the timeentry javascript library to an element.
 *
 * @param array $element
 *   A form element to add the timeentry js to.
 */
function ms_core_add_timeentry_js($element) {
  $path = drupal_get_path('module', 'ms_core');
  drupal_add_js($path . '/js/timeentry/jquery.timeentry.min.js');
  drupal_add_css($path . '/js/timeentry/jquery.timeentry.css');
  $js = "
  $(document).ready(function() {
    $('#" . $element . "').timeEntry({spinnerImage: '/$path/js/timeentry/spinnerUpDown.png',
    spinnerSize: [15, 16, 0], spinnerBigSize: [30, 32, 0],
    spinnerIncDecOnly: true, show24Hours: true, showSeconds: true});
  });
  ";
  drupal_add_js($js, array('type' => 'inline', 'scope' => JS_DEFAULT));
}

/**
 * Builds a list of available products from modules.
 *
 * @return array
 *   An array of product names, keyed by ids.
 *
 * @ingroup ms_core_api
 */
function ms_core_get_module_products_list() {
  $products = module_invoke_all('ms_products');
  $products_list = array();

  foreach ($products as $product) {
    $products_list[$product->module . '-' . $product->id] = $product->module_title . ' :: ' . $product->name;
  }

  return $products_list;
}

/**
 * Builds an array of available products from modules.
 *
 * @todo - Add caching to this.
 *
 * @return array
 *   An array of products, keyed by id.
 *
 * @ingroup ms_core_api
 */
function ms_core_get_module_products() {
  $products = module_invoke_all('ms_products');
  $products_list = array();

  foreach ($products as $product) {
    $products_list[$product->module . '-' . $product->id] = $product;
  }

  return $products_list;
}

/**
 * Gets a module product.
 *
 * @param string $id
 *   The product id.
 *
 * @return MsProduct
 *   The product.
 */
function ms_core_get_module_product($id) {
  $products = ms_core_get_module_products();
  return !empty($products[$id]) ? $products[$id] : FALSE;
}

/**
 * Form constructor for the filter form.
 *
 * @param array $variables
 *   An array of variables.
 *
 * @ingroup forms.
 */
function ms_core_get_filter_form($form, &$form_state, $variables) {
  extract($variables);

  $collapsed = TRUE;
  foreach ($variables as $value) {
    if ((!is_array($value) && $value)) {
      $collapsed = FALSE;
    }
    if (is_array($value) && ($value['#default_value'] OR (isset($value['#required']) && $value['#required']))) {
      $collapsed = FALSE;
    }
  }

  $form = array();
  $form['#method'] = 'get';
  $form['#action'] = request_uri();
  $form['search'] = array(
    '#type' => 'fieldset',
    '#title' => t('Search'),
    '#collapsible' => TRUE,
    '#collapsed' => $collapsed,
  );

  if (isset($variables['name'])) {
    $form['search']['name'] = array(
      '#type' => 'textfield',
      '#title' => t('User Name'),
      '#size' => 32,
      '#maxlength' => 64,
      '#description' => t("All or part of the username."),
      '#default_value' => isset($name) ? $name : '',
      '#required' => FALSE,
      '#weight' => 1,
    );
    unset($variables['name']);
  }

  if (isset($variables['oid_key'])) {
    $form['search']['oid_key'] = array(
      '#type' => 'textfield',
      '#title' => t('Order ID / Key'),
      '#size' => 16,
      '#maxlength' => 16,
      '#description' => t("Enter the Order ID or Key"),
      '#default_value' => isset($oid_key) ? $oid_key : '',
      '#required' => FALSE,
      '#weight' => 2,
    );
    unset($variables['oid_key']);
  }

  if (isset($variables['order_status'])) {
    $statuses = ms_core_get_order_statuses();
    $statuses['All'] = t('All');

    $form['search']['order_status'] = array(
      '#type' => 'select',
      '#title' => t('Order Status'),
      '#description' => t("Select which order status to filter by."),
      '#default_value' => isset($order_status) ? $order_status : 'All',
      '#options' => $statuses,
      '#required' => FALSE,
      '#weight' => 3,
    );
    unset($variables['order_status']);
  }

  if (isset($variables['pager_amount'])) {
    $form['search']['pager_amount'] = array(
      '#type' => 'textfield',
      '#title' => t('Records per page'),
      '#size' => 16,
      '#maxlength' => 16,
      '#description' => t("How many records should be shown per page? Enter 0 to show all records."),
      '#default_value' => isset($pager_amount) ? $pager_amount : 20,
      '#required' => FALSE,
      '#weight' => 3,
    );
    unset($variables['pager_amount']);
  }

  // Add any other variables.
  foreach ($variables as $name => $element) {
    $form['search'][$name] = array(
      '#type' => isset($element['#type']) ? $element['#type'] : 'textfield',
      '#title' => filter_xss(isset($element['#title']) ? check_plain($element['#title']) : ''),
      '#description' => filter_xss(isset($element['#description']) ? check_plain($element['#description']) : ''),
      '#default_value' => isset($element['#default_value']) ? $element['#default_value'] : '',
      '#required' => isset($element['#required']) ? $element['#required'] : FALSE,
      '#weight' => isset($element['weight']) ? $element['weight'] : 4,
    );

    // Merge in any other settings.
    if (is_array($element)) {
      $form['search'][$name] = array_merge($form['search'][$name], $element);
    }
  }

  $form['search']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
    '#weight' => 99,
  );

  return $form;
}

/**
 * Gets an array of allowed Cards.
 *
 * @param array $cards
 *   An array of cards.
 * @param array $allowed_cards
 *   An array of allowed cards.
 * @param bool $filter
 *   (optional) Whether to filter the cards. Defaults to TRUE.
 *
 * @return array
 *   An array of cards.
 */
function ms_core_get_cards($cards, $allowed_cards, $filter = TRUE) {
  if ($filter) {
    $allowed_cards = array_filter($allowed_cards);
  }
  if (is_array($allowed_cards) && !empty($allowed_cards)) {
    $filtered_cards = array_intersect_key($cards, $allowed_cards);
    return $filtered_cards;
  } else {
    return $cards;
  }
}

/**
 * Formats a string as a time-ago string.
 *
 * @param int $date
 *   The timestamp.
 * @param int $granularity
 *   (optional) The granularity to use. Defaults to 2.
 *
 * @return string
 *   The formatted string.
 */
function ms_core_time_ago($date, $granularity = 2) {
  $difference = abs(REQUEST_TIME - $date);
  $periods = array(
    'decade' => 315360000,
    'year' => 31536000,
    'month' => 2628000,
    'week' => 604800,
    'day' => 86400,
    'hour' => 3600,
    'minute' => 60,
    'second' => 1,
  );

  $ret_val = '';
  foreach ($periods as $key => $value) {
    if ($difference >= $value) {
      $time = floor($difference / $value);
      $difference %= $value;
      $ret_val .= ($ret_val ? ' ' : '') . $time . ' ';
      $ret_val .= (($time > 1) ? $key . 's' : $key);
      $granularity--;
    }
    if ($granularity == '0') {
      break;
    }
  }
  return $ret_val;
}

/**
 * Inserts a history item for an order.
 *
 * @param MsOrder $order
 *   The order object.
 * @param int $uid
 *   The user id associated with entering this history item.
 * @param string $message
 *   The history message.
 * @param bool $hidden
 *   (optional) TRUE if the history item should be hidden from regular users.
 *   Defaults to FALSE.
 *
 * @ingroup ms_core_api
 */
function ms_core_add_history_item($order, $uid, $message, $hidden = FALSE) {
  return db_insert('ms_core_order_history')
    ->fields(array(
      'oid' => $order->oid,
      'uid' => $uid,
      'message' => $message,
      'status' => $order->status,
      'hidden' => $hidden ? 1 : 0,
      'created' => REQUEST_TIME,
    ))
    ->execute();
}

/**
 * Gets the credit card images.
 *
 * @param array $cards_raw
 *   An array of the cards to get images for.
 * @param bool $bw
 *   (Optional) Whether or not to use the black and white versions of the cards.
 *   Defaults to FALSE.
 *
 * @return string
 *   The html for the card images.
 */
function ms_core_get_cc_images($cards_raw = array(), $bw = FALSE) {
  $string = "<div class='ms_core_cc_images'>";
  global $base_url;
  $path = $base_url . '/' . drupal_get_path('module', 'ms_core') . '/images/cc/';
  $cards = $cards_raw;
  if (array_values($cards) !== $cards) {
    $cards = array_keys(array_filter($cards_raw));
  }
  foreach ($cards as $type) {
    if ($type) {
      if ($bw) {
        $string .= ' <div style="background: url(' . $path . $type . '_combo.png) no-repeat 0px -32px;" class="ms_cc_image-' . $type . ' ms_core_cc_image_combo"></div>';
      } else {
        $string .= ' <img src="' . $path . $type . '.png" class="' . $type . ' ms_core_cc_image" />';
      }
    }
  }
  $string .= "<div class='ms_core_clearfix'></div></div>";
  return $string;
}

/**
 * Implements hook_ms_order_status_change().
 */
function ms_core_ms_order_status_change($old_status, $new_status, $order) {
  if (module_exists('rules')) {
    $account = user_load($order->uid);
    rules_invoke_event('ms_core_event_order_status_changed', $account, $order, $old_status, $new_status);
  }

  return $order;
}

/**
 * Translates user strings via i18n.
 *
 * @param string $name
 *   The name of the string.
 * @param string $string
 *   The string.
 * @param string $textgroup
 *   (optional) The textgroup. Defaults to 'ms_core'.
 * @param string $langcode
 *   (optional) The language code to use. Defaults to NULL.
 *
 * @return string
 *   The translated string.
 */
function ms_core_translate($name, $string, $textgroup = 'ms_core', $langcode = NULL) {
  return function_exists('i18n_string') ? i18n_string($textgroup . ':' . $name, $string, array('langcode' => $langcode)) : $string;
}

/**
 * Implements hook_entity_info().
 */
function ms_core_entity_info() {
  return array(
    'ms_order' => array(
      'label' => t('Order'),
      'base table' => 'ms_orders',
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIController',
      'entity keys' => array(
        'id' => 'oid',
      ),
      'label callback' => 'ms_core_order_label',
      'uri callback' => 'ms_core_order_uri',
      'fieldable' => FALSE,
      'module' => 'ms_core',
    ),
    'ms_payment' => array(
      'label' => t('Payment'),
      'base table' => 'ms_payments',
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIController',
      'entity keys' => array(
        'id' => 'pid',
      ),
      'fieldable' => FALSE,
      'module' => 'ms_core',
    ),
    'ms_product' => array(
      'label' => t('Product'),
      'base table' => 'ms_order_products',
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIController',
      'entity keys' => array(
        'id' => 'order_product_id',
      ),
      'fieldable' => FALSE,
      'module' => 'ms_core',
    ),
    'ms_recurring_schedule' => array(
      'label' => t('Recurring Schedule'),
      'base table' => 'ms_recurring_schedules',
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIController',
      'entity keys' => array(
        'id' => 'id',
      ),
      'fieldable' => FALSE,
      'module' => 'ms_core',
    ),
    'ms_order_adjustment' => array(
      'label' => t('Order Adjustment'),
      'base table' => 'ms_order_adjustments',
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIController',
      'entity keys' => array(
        'id' => 'adjustment_id',
      ),
      'fieldable' => FALSE,
      'module' => 'ms_core',
    ),
  );
}

/**
 * Implements hook_entity_property_info_alter().
 */
function ms_core_entity_property_info_alter(&$info) {
  $ms_order = & $info['ms_order']['properties'];
  $ms_order['oid']['label'] = t('Order ID');
  $ms_order['uid']['type'] = 'user';
  $ms_order['order_key']['label'] = t('Order key');
  $ms_order['gateway']['options list'] = 'ms_core_get_payment_gateways_list';
  $ms_order['status']['options list'] = 'ms_core_get_order_statuses';
  $ms_order['order_type']['label'] = t('Order type');
  $ms_order['recurring_schedule']['label'] = t('Recurring schedule');
  $ms_order['first_name']['label'] = t('First name');
  $ms_order['last_name']['label'] = t('Last name');
  $ms_order['email_address']['label'] = t('Email address');
  $ms_order['shipping_address']['label'] = t('Shipping address');

  $ms_order['created']['type'] = 'date';
  $ms_order['modified']['type'] = 'date';
  $ms_order['unique_key']['label'] = t('Unique key');

  $ms_order['order_number'] = array(
    'label' => t('Order Number'),
    'type' => 'text',
    'description' => t("Either the order id or key, depending on the settings."),
    'getter callback' => 'ms_core_order_number_getter_callback',
    'entity views field' => TRUE,
    'computed' => TRUE,
  );
  $ms_order['products'] = array(
    'label' => t('Products'),
    'type' => 'text',
    'description' => t("A list of products in the order."),
    'getter callback' => 'ms_core_order_products_getter_callback',
    'entity views field' => TRUE,
    'computed' => TRUE,
  );
  $ms_order['notes'] = array(
    'label' => t('Notes'),
    'getter callback' => 'ms_core_notes_getter_callback',
    'entity views field' => TRUE,
    'computed' => TRUE,
  );

  // @todo - This isn't working for views...
  $ms_order['billing_address'] = array(
    'label' => t('Billing address'),
    'type' => 'struct',
    'getter callback' => 'ms_core_address_getter_callback',
    'entity views field' => TRUE,
    'computed' => TRUE,
    'property info' => array(),
  );
  $billing_fields = array(
    'street' => t('Street'),
    'street2' => t('Street 2'),
    'city' => t('City'),
    'state' => t('State'),
    'zip' => t('Zip'),
    'country' => t('Country'),
    'phone' => t('Phone'),
  );
  foreach ($billing_fields as $field_name => $field_label) {
    $ms_order['billing_address']['property info'][$field_name] = array(
      'label' => $field_label,
      'type' => 'text',
    );
  }

  $ms_payment = & $info['ms_payment']['properties'];
  $ms_payment['pid']['label'] = t('Payment ID');
  $ms_payment['oid']['type'] = 'ms_order';
  $ms_payment['recurring_id']['label'] = t('Recurring ID');
  $ms_payment['recurring_schedule']['label'] = t('Recurring schedule');
  $ms_payment['created']['type'] = 'date';
  $ms_payment['modified']['type'] = 'date';
  $ms_payment['type']['options list'] = 'ms_core_get_payment_types';
  $ms_payment['gateway']['options list'] = 'ms_core_get_payment_gateways_list';

  $ms_product = & $info['ms_product']['properties'];
  $ms_product['order_product_id']['label'] = t('Order Product ID');
  $ms_product['oid']['type'] = 'ms_order';
  $ms_product['uid']['type'] = 'user';
  $ms_product['type']['label'] = t('Product Type (recurring/cart)');
  $ms_product['name']['label'] = t('Name');
  $ms_product['module']['label'] = t('Module');
  $ms_product['qty']['label'] = t('Quantity');
  $ms_product['amount']['label'] = t('Amount');

  $ms_order_adjustment = & $info['ms_order_adjustment']['properties'];
  $ms_order_adjustment['oid']['type'] = 'ms_order';
  $ms_order_adjustment['scope']['options list'] = 'ms_core_get_scopes';
  $ms_order_adjustment['scope']['label'] = t('Scope');
  $ms_order_adjustment['type']['options list'] = 'ms_core_get_adjustment_types';
  $ms_order_adjustment['type']['label'] = t('Type');
  $ms_order_adjustment['active']['type'] = 'boolean';
  $ms_order_adjustment['active']['label'] = t('Active');
  $ms_order_adjustment['display']['label'] = t('Display name');
  $ms_order_adjustment['id']['label'] = t('Machine Name');
  $ms_order_adjustment['adjustment_id']['label'] = t('Internal ID');
  $ms_order_adjustment['optional']['type'] = 'boolean';
  $ms_order_adjustment['optional']['label'] = t('Optional');
  $ms_order_adjustment['value']['type'] = 'decimal';
  $ms_order_adjustment['value']['label'] = t('Value');
  $ms_order_adjustment['weight']['type'] = 'integer';
  $ms_order_adjustment['weight']['label'] = t('Weight');
  $ms_order_adjustment['product_id']['type'] = 'ms_product';
  $ms_order_adjustment['product_id']['label'] = t('Product ID');
  $ms_order_adjustment['amount'] = array(
    'label' => t('Amount'),
    'description' => t('The monetary value of the adjustment for the particular order.'),
    'type' => 'decimal',
    'getter callback' => 'ms_core_adjustment_amount_getter_callback',
    'entity views field' => TRUE,
    'computed' => TRUE,
  );

  $ms_recurring_schedule = & $info['ms_recurring_schedule']['properties'];
  $ms_recurring_schedule['oid']['type'] = 'ms_order';
  $ms_recurring_schedule['created']['type'] = 'date';
  $ms_recurring_schedule['next_payment']['type'] = 'date';
  $ms_recurring_schedule['expiration']['type'] = 'date';
  $ms_recurring_schedule['modified']['type'] = 'date';
  $ms_recurring_schedule['status']['label'] = t('Status');
  $ms_recurring_schedule['module']['label'] = t('Module');
  $ms_recurring_schedule['gateway']['label'] = t('Gateway');
  $ms_recurring_schedule['main_amount']['label'] = t('Price');
  $ms_recurring_schedule['main_length']['label'] = t('Regular period length');
  $ms_recurring_schedule['main_unit']['label'] = t('Regular period unit');
  $ms_recurring_schedule['trial_amount']['label'] = t('Trial price');
  $ms_recurring_schedule['trial_length']['label'] = t('Trial period length');
  $ms_recurring_schedule['trial_unit']['label'] = t('Trial period unit');
  $ms_recurring_schedule['total_occurrences']['label'] = t('Total Occurrences');
  $ms_recurring_schedule['next_payment']['label'] = t('Next Payment');
  $ms_recurring_schedule['current_payments']['label'] = t('Current Payments');
  $ms_recurring_schedule['created']['label'] = t('Created');
  $ms_recurring_schedule['expiration']['label'] = t('Expiration');
  $ms_recurring_schedule['modified']['label'] = t('Modified');
  $ms_recurring_schedule['failed_payments']['label'] = t('Failed Payments');
  $ms_recurring_schedule['notified']['label'] = t('Notified');
}

/**
 * Getter callback for the order number.
 */
function ms_core_order_number_getter_callback($data, array $options, $name, $type, $info) {
  return ms_core_order_number($data);
}

/**
 * Getter callback for the products for an order.
 */
function ms_core_order_products_getter_callback($data, array $options, $name, $type, $info) {
  $order_products = ms_core_get_order_products($data->oid);
  $products = array();
  foreach ($order_products as $product) {
    $products[] = $product->name;
  }
  return implode(', ', $products);
}

/**
 * Getter callback for the notes for an order.
 */
function ms_core_notes_getter_callback($data, array $options, $name, $type, $info) {
  if (!empty($data->data['notes'])) {
    return implode(', ', $data->data['notes']);
  }

  return t('N/A');
}

/**
 * Getter callback for the address struct for an order.
 */
function ms_core_address_getter_callback($data, array $options, $name, $type, $info) {
  switch ($name) {
    case 'shipping_address':
      return isset($data->shipping_address) ? $data->shipping_address : array();

    case 'billing_address':
      return isset($data->billing_address) ? $data->billing_address : array();

    default:
      return NULL;
  }
}

/**
 * Getter callback for the adjustment amount for an order.
 */
function ms_core_adjustment_amount_getter_callback($data, array $options, $name, $type, $info) {
  if ($order = ms_core_order_load($data->oid)) {
    $price = ms_core_get_order_products_total($order);
    foreach ($order->adjustments as $adjustment) {
      if ($adjustment->active && empty($adjustment->product_id)) {
        $value = ms_core_get_adjusted_price($adjustment, $price);

        if ($adjustment->id == $data->id) {
          return $value;
        }

        $price += $value;
      }
    }
  }

  return 0;
}

/**
 * Creates the label for an MS Order Entity
 *
 * @param object $entity
 *   The entity order.
 * @param string $entity_type
 *   The entity type.
 *
 * @return string
 *   The label for the order.
 */
function ms_core_order_label($entity, $entity_type) {
  return t('Order #!num', array('!num' => $entity->oid));
}

/**
 * Creates the uri for an MS Order Entity.
 *
 * @param object $entity
 *   The order entity.
 *
 * @return array
 *   The uri array for the order.
 */
function ms_core_order_uri($entity) {
  return array(
    'path' => 'admin/moneysuite/orders/view/' . $entity->order_key,
    'options' => array(),
  );
}

/**
 * Implements hook_theme().
 */
function ms_core_theme($existing, $type, $theme, $path) {
  return array(
    'ms_core_invoice' => array(
      'template' => 'ms-core-invoice',
      'path' => $path . '/templates',
      'variables' => array(
        'order' => NULL,
        'op' => 'view',
        'invoice_header' => NULL,
      ),
    ),
    'ms_core_checkout_steps' => array(
      'template' => 'ms-core-checkout-steps',
      'path' => $path . '/templates',
      'variables' => array(
        'steps' => NULL,
        'current' => NULL,
      ),
    ),
    'ms_core_checkout_page' => array(
      'template' => 'ms-core-checkout-page',
      'path' => $path . '/templates',
      'variables' => array(
        'checkout_steps' => NULL,
        'order_details' => NULL,
        'checkout_fields' => NULL,
        'checkout_form' => NULL,
      ),
    ),
  );
}

/**
 * Gets an array of checkout steps.
 *
 * @param object $cart
 *   The cart object.
 *
 * @return array
 *   An array of steps.
 */
function ms_core_get_checkout_steps($cart) {
  $steps = array(
    'checkout' => array(
      'weight' => 0,
      'title' => t('Order information'),
      'path' => 'ms/checkout',
      'show_link' => array('payment'),
    ),
    'payment' => array(
      'weight' => 10,
      'title' => t('Payment'),
    ),
    'thankyou' => array(
      'weight' => 20,
      'title' => t('Done'),
    ),
  );

  drupal_alter('ms_core_checkout_steps', $steps, $cart);

  if (variable_get('ms_core_skip_checkout', FALSE)) {
    // This should still show if checkout is still shown.
    unset($steps['checkout']['path'], $steps['checkout']['show_link']);
  }

  return $steps;
}

/**
 * Creates an autocomplete key from a node.
 *
 * @param int $nid
 *   The node id.
 *
 * @return string
 *   The key for the node to be used with autocomplete fields.
 */
function ms_core_create_autocomplete_key($nid) {
  if ($node = node_load($nid)) {
    return '[' . $node->nid . '] ' . $node->title;
  }
  return '';
}

/**
 * Extracts an nid from an autocomplete key.
 *
 * @param string $name
 *   The name to extract the nid from.
 *
 * @return int|null
 *   The nid or NULL.
 */
function ms_core_extract_nid_from_autocomplete_key($name) {
  if (preg_match('/^\[(\d+)\]/', $name, $matches) > 0) {
    return (int)$matches[1];
  }
  return NULL;
}

/**
 * Implements hook_services_resources().
 */
function ms_core_services_resources() {
  $resource = array(
    'ms_order' => array(
      'actions' => array(
        'create' => array(
          'help' => t('This method creates an order object for a given uid, and returns the order object.'),
          'access arguments' => array('administer moneysuite orders'),
          'callback' => 'ms_core_services_ms_order_create',
          'args' => array(
            array(
              'name' => 'type',
              'type' => 'string',
              'description' => t('The type of order, recurring or cart.'),
              'source' => 'data',
              'optional' => TRUE,
              'default value' => 'cart',
            ),
            array(
              'name' => 'uid',
              'type' => 'int',
              'description' => t('The user id to associate with the new order.'),
              'source' => 'data',
              'optional' => TRUE,
              'default value' => 0,
            ),
          ),
        ),
        'add_product' => array(
          'help' => t('This method adds a product to an order.'),
          'access arguments' => array('administer moneysuite orders'),
          'callback' => 'ms_core_services_ms_order_add_order_product',
          'args' => array(
            array(
              'name' => 'oid',
              'type' => 'int',
              'description' => t('The order id.'),
              'source' => 'data',
              'optional' => FALSE,
              'default value' => 0,
            ),
            array(
              'name' => 'module',
              'type' => 'string',
              'description' => t('The name of the module that the product belongs to.'),
              'source' => 'data',
              'optional' => FALSE,
              'default value' => '',
            ),
            array(
              'name' => 'pid',
              'type' => 'int',
              'description' => t('The product id.'),
              'source' => 'data',
              'optional' => FALSE,
              'default value' => 0,
            ),
          ),
        ),
        'add_payment' => array(
          'help' => t('This method adds a payment to an order.'),
          'access arguments' => array('administer moneysuite orders'),
          'callback' => 'ms_core_services_ms_order_add_order_payment',
          'args' => array(
            array(
              'name' => 'oid',
              'type' => 'int',
              'description' => t('The order id.'),
              'source' => 'data',
              'optional' => FALSE,
              'default value' => 0,
            ),
            array(
              'name' => 'gateway',
              'type' => 'string',
              'description' => t('The machine name of the gateway for this payment. Use ms_core if unsure.'),
              'source' => 'data',
              'optional' => FALSE,
              'default value' => 'ms_core',
            ),
            array(
              'name' => 'type',
              'type' => 'string',
              'description' => t('The type of payment, for example: cart, rec_payment, rec_signup, rec_cancel, etc.'),
              'source' => 'data',
              'optional' => FALSE,
              'default value' => 'cart',
            ),
            array(
              'name' => 'amount',
              'type' => 'float',
              'description' => t('The amount'),
              'source' => 'data',
              'optional' => FALSE,
              'default value' => 0.00,
            ),
            array(
              'name' => 'currency',
              'type' => 'string',
              'description' => t('The three digit currency code. Ex: USD'),
              'source' => 'data',
              'optional' => FALSE,
              'default value' => 'USD',
            ),
          ),
        ),
      ),
    ),
  );
  return $resource;
}

/**
 * Provides a wrapper method for Services to create a new order for a user.
 *
 * @param string $type
 *   (optional) The type of order. Defaults to 'cart'.
 * @param int $uid
 *   (optional) The user id. Defaults to 0.
 *
 * @return object
 *   A response object.
 */
function ms_core_services_ms_order_create($type = 'cart', $uid = 0) {
  $order = ms_core_order_new($type, $uid);

  return (object)array(
    'success' => TRUE,
    'message' => t("Order created successfully."),
    'order' => $order,
  );
}

/**
 * Provides a wrapper method for Services to add a payment to an order.
 *
 * @param int $oid
 *   The order id.
 * @param string $gateway
 *   The gateway.
 * @param string $type
 *   The order type.
 * @param float $amount
 *   The order amount.
 * @param string $currency
 *   The currency.
 *
 * @return object
 *   A response object.
 */
function ms_core_services_ms_order_add_order_payment($oid, $gateway, $type, $amount, $currency) {
  if ($order = ms_core_order_load($oid)) {
    $payment = ms_core_new_payment($order->oid, $gateway, $type, $amount, $currency);
    ms_core_enter_payment($payment);

    return (object)array(
      'success' => TRUE,
      'message' => t("Payment successfully added to order."),
      'payment' => $payment,
    );
  } else {
    // Show an error that the order couldn't be loaded.
    return (object)array(
      'success' => FALSE,
      'message' => t("The order could not be loaded."),
    );
  }
}

/**
 * Provides a wrapper method for Services to add a product to an order.
 *
 * @param int $oid
 *   The order id.
 * @param string $module
 *   The module.
 * @param string $pid
 *   The product id.
 *
 * @return object
 *   The response object.
 */
function ms_core_services_ms_order_add_order_product($oid, $module, $pid) {
  if ($order = ms_core_order_load($oid)) {
    if ($product = ms_core_load_module_product($module, $pid)) {
      $order = ms_core_add_order_product($order, $product);
      // Return the order object.
      return (object)array(
        'success' => TRUE,
        'message' => t("Product successfully added to order."),
        'product' => $product,
        'order' => $order,
      );
    } else {
      // Show an error that the product couldn't be loaded.
      return (object)array(
        'success' => FALSE,
        'message' => t("The product could not be loaded."),
        'order' => $order,
      );
    }
  } else {
    // Show an error that the order couldn't be loaded.
    return (object)array(
      'success' => FALSE,
      'message' => t("The order could not be loaded."),
    );
  }
}

/**
 * Implements hook_ms_order_payment().
 */
function ms_core_ms_order_payment($type, MsProduct $product, MsOrder $order, MsPayment $payment) {
  if (variable_get('ms_core_profile_sync_back', FALSE) && module_exists('profile2')) {
    // Load the user.
    $account = user_load($order->uid);
    $fields = ms_core_get_checkout_form_fields();

    // Billing Info.
    foreach ($fields as $field => $data) {
      if (variable_get('ms_checkout_form_' . $field . '_enabled', TRUE)
        && ($profile_field = variable_get('ms_core_profile_' . $field, ''))
        && stristr($profile_field, '|')
      ) {

        list($profile_type, $field_name) = explode('|', $profile_field);

        $profile = profile2_load_by_user($account->uid, $profile_type);
        if (!$profile) {
          profile_create(array('user' => $account, 'type' => $profile_type));
          $profile = profile2_load_by_user($account->uid, $profile_type);
        }

        // Map the payment information field to the profile field.
        // Save the profile fields if they are empty and the option is set.
        $new_value = '';
        switch ($field) {
          case 'cc_first_name':
            $new_value = $order->first_name;
            break;
          case 'cc_last_name':
            $new_value = $order->last_name;
            break;
          case 'billing_address1':
            $new_value = $order->billing_address['street'];
            break;
          case 'billing_city':
            $new_value = $order->billing_address['city'];
            break;
          case 'billing_state':
            $new_value = $order->billing_address['state'];
            break;
          case 'billing_zip':
            $new_value = $order->billing_address['zip'];
            break;
          case 'billing_country':
            $new_value = $order->billing_address['country'];
            break;
          case 'billing_phone':
            $new_value = $order->billing_address['phone'];
            break;
          case 'shipping_address1':
            $new_value = $order->shipping_address['street'];
            break;
          case 'shipping_address2':
            $new_value = $order->shipping_address['street2'];
            break;
          case 'shipping_city':
            $new_value = $order->shipping_address['city'];
            break;
          case 'shipping_state':
            $new_value = $order->shipping_address['state'];
            break;
          case 'shipping_zip':
            $new_value = $order->shipping_address['zip'];
            break;
          case 'shipping_country':
            $new_value = $order->shipping_address['country'];
            break;
          case 'shipping_phone':
            $new_value = $order->shipping_address['phone'];
            break;
          case 'shipping_first_name':
            $new_value = $order->shipping_address['first_name'];
            break;
          case 'shipping_last_name':
            $new_value = $order->shipping_address['last_name'];
            break;
        }
        if (empty($profile->{$field_name}[LANGUAGE_NONE][0]['value']) && $new_value) {
          $profile->{$field_name}[LANGUAGE_NONE][0]['value'] = $new_value;
          profile2_save($profile);
        }
      }
    }
  }
}

/**
 * Clears out old carts.
 *
 * @param int $time
 *   (optional) A timestamp. Any carts older than this time will be removed.
 *   Defaults to the current time, which would clear all carts.
 * @param bool $auth
 *   (optional) Whether or not to act on authenticated users. Defaults to FALSE.
 *
 * @ingroup ms_core_api
 */
function ms_core_clear_carts($time = REQUEST_TIME, $auth = FALSE) {
  if ($auth) {
    $result = db_query("SELECT DISTINCT cart_id FROM {ms_cart_products} WHERE changed <= :changed AND CHAR_LENGTH(cart_id) <= :length", array(':changed' => $time, ':length' => 8));

    foreach ($result as $row) {
      ms_core_empty_cart($row->cart_id);
    }

    // Delete old orders that were abandoned by authenticated users.
    $result = db_query("SELECT * FROM {ms_orders} WHERE status = :status AND modified <= :changed",
      array(':status' => 'pending', ':changed' => $time));
    foreach ($result as $row) {
      // If there are payments in this order, don't delete it.
      $order = ms_core_order_load($row->oid);
      if (count($order->payments) == 0) {
        ms_core_order_delete($row->oid);
      }
    }
  } else {
    $result = db_query("SELECT DISTINCT cart_id FROM {ms_cart_products} WHERE changed <= :changed AND CHAR_LENGTH(cart_id) > :length",
      array(':changed' => $time, ':length' => 8));
    foreach ($result as $row) {
      ms_core_empty_cart($row->cart_id);
    }

    // Delete old orders that were abandoned by anonymous users.
    $result = db_query("SELECT * FROM {ms_orders} WHERE status = :status AND uid = :uid AND modified <= :changed",
      array(':status' => 'checkout', ':uid' => 0, ':changed' => $time));
    foreach ($result as $row) {
      ms_core_order_delete($row->oid);
    }
  }

  // Make sure that we don't have any orphaned order products.
  db_query("DELETE FROM {ms_order_products} WHERE oid NOT IN (SELECT oid FROM {ms_orders})");
}

/**
 * Notifies other modules that a product id has changed.
 *
 * @param string $old_id
 *   The old product id.
 * @param string $new_id
 *   The new product id.
 */
function ms_core_product_id_change($old_id, $new_id) {
  module_invoke_all('ms_product_id_change', $old_id, $new_id);
}

/**
 * Implements hook_ctools_plugin_type().
 */
function ms_core_ctools_plugin_type() {
  $plugins['payment_gateway'] = array(
    'use hooks' => TRUE,
    'cache' => FALSE,
    'defaults' => array(
      'name' => '',
      'currency' => array(),
      'display_name' => '',
      'cards' => array(),
      'description' => '',
      'module' => '',
      'checkout_path' => '',
      'checkout_form' => '',
      'active' => TRUE,
      'active_variable' => '',
      'cancel_url' => '',
      'modify_url' => '',
      'billing_url' => '',
      'return_callback' => '',
      'recurring_schedule_support' => FALSE,
      'saved_cards_support' => FALSE,
      'refund_callback' => '',
      'multi_recurring' => FALSE,
      'recurring' => TRUE,
      'cart' => TRUE,
      'hosted' => FALSE,
    ),
  );

  return $plugins;
}

/**
 * Gets a payment gateway.
 *
 * @param string $name
 *   The gateway machine name.
 *
 * @return array
 *   An array of information for the payment gateway.
 */
function ms_core_get_payment_gateway($name) {
  $gateways = ms_core_get_payment_gateways('all', TRUE);
  return !empty($gateways[$name]) ? $gateways[$name] : FALSE;
}

/**
 * Gets the Gateway Name.
 *
 * @param string $module
 *   The module name.
 *
 * @return string
 *   The Name of the gateway.
 */
function ms_core_get_payment_gateway_name($module) {
  $gateway = ms_core_get_payment_gateway($module);
  if (!empty($gateway['name'])) {
    return $gateway['name'];
  } else {
    return t('None');
  }
}

/**
 * Gets the Gateway Display Name.
 *
 * @param string $module
 *   The module name.
 *
 * @return string
 *   The Display Name of the gateway.
 */
function ms_core_get_payment_gateway_display_name($module) {
  $gateway = ms_core_get_payment_gateway($module);
  if (!empty($gateway['display_name'])) {
    return $gateway['display_name'];
  } else {
    return t('None');
  }
}

/**
 * Checks if multi_recurring is supported.
 */
function ms_core_multi_recurring_supported() {
  $gateways = ms_core_get_payment_gateways('multi_recurring');

  return variable_get('ms_core_allow_multi_recurring', FALSE) && count($gateways) > 0;
}

/**
 * Gets all payment gateways.
 *
 * @param string $type
 *   (Optional) The type of gateway to get. Can be 'cart', 'recurring',
 *   'multi_recurring', or 'all'. Defaults to 'all'.
 * @param bool $include_saved_cards
 *   (Optional) Whether or not to include saved cards. Defaults to FALSE.
 *
 * @return array
 *   An array of payment gateways.
 */
function ms_core_get_payment_gateways($type = 'all', $include_saved_cards = FALSE) {
  global $user;
  ctools_include('context');
  ctools_include('plugins');
  $gateways_raw = ctools_get_plugins('ms_core', 'payment_gateway');
  $gateways = array();
  foreach ($gateways_raw as $name => $gateway) {
    $gateway['active_variable'] = $gateway['module'] . '_show_gateway';
    $gateway['weight'] = variable_get($gateway['module'] . '_checkout_weight', 0);
    $gateway['display_name'] = variable_get($gateway['module'] . '_gateway_name', $gateway['display_name']);
    $gateway['description'] = variable_get($gateway['module'] . '_gateway_description', $gateway['description']);

    if (!empty($gateway['cards'])) {
      $gateway['cards'] = variable_get($gateway['module'] . '_allowed_cards', $gateway['cards']);
    }

    if (!empty($gateway['recurring_schedule_support'])) {
      if (empty($gateway['cancel_url'])) {
        $gateway['cancel_url'] = 'ms_core_get_cancel_helper_url';
      }
      if (empty($gateway['modify_url'])) {
        $gateway['modify_url'] = 'ms_core_get_modify_helper_url';
      }
      if (empty($gateway['billing_url'])) {
        $gateway['billing_url'] = 'ms_core_get_billing_helper_url';
      }
    }

    // Let other modules alter the gateway if needed.
    drupal_alter('ms_core_payment_gateway', $gateway);

    if ($type == 'all') {
      $gateways[$name] = $gateway;
    } elseif ($gateway[$type]) {
      $gateways[$name] = $gateway;
    }

    // If the user has a saved card, show that as an option
    if ($include_saved_cards && !empty($gateway['saved_cards_support']) && $user->uid) {
      $payment_profiles = ms_core_payment_profiles_load_by_user($user->uid, $gateway['module']);
      foreach ($payment_profiles as $payment_profile) {
        $saved_card_gateway = array(
          'name' => t('Saved Card'),
          'display_name' => variable_get($gateway['module'] . '_gateway_name', t('Credit Card')),
          'description' => t("Pay with your saved card: @card", array('@card' => $payment_profile->cc_num)),
          'cards' => array($payment_profile->cc_type),
          'module' => $gateway['module'] . '_saved_profile_' . $payment_profile->id,
          'currency' => $gateway['currency'],
          'checkout_path' => 'ms/checkout/saved/' . $payment_profile->id,
          'active' => TRUE,
          'active_variable' => $gateway['module'] . '_show_gateway',
          'cancel_url' => 'ms_core_get_cancel_helper_url',
          'modify_url' => 'ms_core_get_modify_helper_url',
          'billing_url' => 'ms_core_get_billing_helper_url',
          'recurring_schedule_support' => TRUE,
          'weight' => variable_get($gateway['module'] . '_checkout_weight', 0),
        );

        // Let other modules alter the gateway if needed.
        drupal_alter('ms_core_payment_gateway', $saved_card_gateway);
        $gateways[$gateway['module'] . '_saved_payment_profile_' . $payment_profile->id] = $saved_card_gateway;
      }
    }
  }

  // Sort the gateways
  usort($gateways, "_ms_core_sort_by_weight");

  $sorted_gateways = array();
  foreach ($gateways as $gateway) {
    $sorted_gateways[$gateway['module']] = $gateway;
  }

  return $sorted_gateways;
}

function _ms_core_sort_by_weight($a, $b) {
  return $a['weight'] > $b['weight'];
}

/**
 * Returns an array of payment gateways that can be used for checkout.
 *
 * @param string $type
 *   (optional) The type of order, can be 'recurring' or 'cart'.
 * @param array $block_gateways
 *   (optional) An array of gateways that should be blocked.
 *
 * @return array
 *   An associative array of gateways
 *
 * @ingroup ms_core_api
 */
function ms_core_get_checkout_payment_gateways($type = 'all', $block_gateways = array()) {
  $type = strtolower($type);
  $gateways = ms_core_get_payment_gateways($type, TRUE);

  // Let other modules alter the gateways if needed.
  $cart = ms_core_get_cart();
  drupal_alter('ms_core_checkout_payment_gateways', $gateways, $cart);

  // Filter out the blocked gateways.
  $gateways = array_diff_key($gateways, $block_gateways);

  foreach ($gateways as $name => &$gateway) {
    // Append the cards to the description if needed.
    if (!empty($gateway['cards'])) {
      $gateway['description'] .= "<br /><span class='ms_core_gateway_includes'>"
        . ms_core_get_cc_images($gateway['cards'])
        . "</span>";
    }

    // Additional checks to make sure the gateway should show.
    if (!empty($gateway['active_variable'])) {
      $gateway['active'] = variable_get($gateway['active_variable'], FALSE, $cart);
    }
    if (!empty($gateway['active_callback'])) {
      $gateway['active'] = $gateway['active_callback']($cart);
    }
    if (!$gateway['active']) {
      unset($gateways[$name]);
    }
  }

  return $gateways;
}

/**
 * Returns an array of payment gateways that can be used in a select list.
 *
 * @param string $type
 *   (optional) The type of order, can be 'recurring' or 'cart'.
 * @param bool $requires
 *   (optional) Whether the requirements for the gateway should be shown.
 *   Defaults to FALSE.
 *
 * @return array
 *   An associative array of gateways.
 */
function ms_core_get_payment_gateways_list($type = 'all', $requires = FALSE) {
  if ($type == 'gateway') {
    $type = 'all';
  }
  $type = strtolower($type);
  $gateways = array();
  $gateways_raw = ms_core_get_payment_gateways($type);
  foreach ($gateways_raw as $name => $gateway) {
    $gateways[$name] = $gateway['name'];
    if ($requires && isset($gateway['requires'])) {
      $gateways[$name] .= ' (' . $gateway['requires'] . ')';
    }
  }

  return $gateways;
}

/**
 * Changes a cart type, including products inside and recurring schedules.
 *
 * @param MsOrder $order
 *   The order object.
 * @param string $type
 *   The type to change to. Can be 'cart' or 'recurring'.
 * @param bool $is_cart
 *   (Optional) Whether or not the order is a cart.
 */
function ms_core_change_order_type(MsOrder $order, $type, $is_cart = TRUE) {
  if ($is_cart) {
    db_update('ms_cart_products')
      ->fields(array(
        'type' => $type,
      ))
      ->condition('cart_id', $order->cart_id)
      ->execute();
  } else {
    db_update('ms_order_products')
      ->fields(array(
        'type' => $type,
      ))
      ->condition('oid', $order->oid)
      ->execute();
    $order->order_type = $type;
    $order->save();
  }
}

/**
 * Retrieves a payment profile for an order.
 *
 * @param MsOrder $order
 *   The order object.
 *
 * @return object|FALSE
 *   The payment profile object or FALSE.
 */
function ms_core_order_get_payment_profile($order) {
  return !empty($order->data['payment_profile_id']) ? ms_core_payment_profile_load($order->data['payment_profile_id']) : FALSE;
}

/**
 * Extracts options from a string formatted like "value|String\nvalue2|String2".
 *
 * @param string $raw
 *   The raw text.
 *
 * @return array
 *   The options extracted.
 */
function ms_core_extract_select_options($raw) {
  $options = array();
  if ($raw = trim($raw)) {
    foreach (explode("\n", $raw) as $line) {
      list($value, $name) = explode('|', $line);
      $options[$value] = $name;
    }
  }

  return $options;
}

/**
 * Maps options from a string formatted like "value|String\nvalue2|String2".
 *
 * @param string $raw
 *   The raw text.
 * @param array $keys
 *   An array of keys to use.
 *
 * @return array
 *   The options extracted.
 */
function ms_core_map_select_options($raw, $keys, $key_position = 0) {
  $options = array();
  if ($raw = trim($raw)) {
    foreach (explode("\n", $raw) as $line) {
      $parts = explode('|', $line);
      foreach ($parts as $key => $value) {
        $options[$parts[$key_position]][$keys[$key]] = trim($value);
      }
    }
  }

  return $options;
}

/**
 * Implements hook_user_delete().
 */
function ms_core_user_delete($account) {
  $orders = ms_core_get_orders($account->uid);

  foreach ($orders as $order) {
    ms_core_order_delete($order->oid);
  }
}

/**
 * Implements hook_ms_core_billing_info_alter().
 */
function ms_core_ms_core_billing_info_alter(&$html, $account) {
  $gateways = ms_core_get_payment_gateways();
  foreach ($gateways as $gateway) {
    if (!empty($gateway['recurring_schedule_support'])) {
      $html[$gateway['module'] . '_profile']['add'] = array(
        '#type' => 'markup',
        '#markup' => l(t('Add Card'), 'user/' . $account->uid . '/ms/billing/new/' . $gateway['module']),
      );

      $payment_profiles = ms_core_payment_profiles_load_by_user($account->uid, $gateway['module']);
      foreach ($payment_profiles as $payment_profile) {
        $saved_card = (!empty($payment_profile->cc_num)) ? $payment_profile->cc_num : t('N/A');

        $billing_address = t('N/A');
        if ($payment_profile && isset($payment_profile->address)) {
          $billing_address = t("@address - @city , @state", array(
            '@address' => $payment_profile->address,
            '@city' => $payment_profile->city,
            '@state' => $payment_profile->state,
          ));
        }

        $html[$gateway['module'] . '_profile'][$payment_profile->id] = array(
          '#type' => 'fieldset',
          '#title' => t('Saved Profile - !edit', array('!edit' => l(t('Edit'), 'user/' . $payment_profile->uid . '/ms/billing/' . $payment_profile->id))),
        );
        $html[$gateway['module'] . '_profile'][$payment_profile->id]['card'] = array(
          '#type' => 'item',
          '#title' => t('Saved Card'),
          '#markup' => $saved_card
        );
        $html[$gateway['module'] . '_profile'][$payment_profile->id]['billing_address'] = array(
          '#type' => 'item',
          '#title' => t('Billing Address'),
          '#markup' => $billing_address,
        );
      }
    }
  }
}

/**
 * Sets a session variable to redirect after a page load, rather than immediately.
 *
 * @param string $path
 *   (Optional) The path to redirect to. Defaults to front page.
 */
function ms_core_redirect($path = '') {
  $_SESSION['ms_core_redirect'] = $path;
}

/**
 * Implements hook_init().
 */
function ms_core_init() {
  if (isset($_SESSION['ms_core_redirect'])) {
    $path = $_SESSION['ms_core_redirect'];
    unset($_SESSION['ms_core_redirect']);
    drupal_goto($path);
  }
}

/**
 * Builds a cancel URL for an order during checkout process.
 */
function ms_core_get_checkout_cancel_url(MsOrder $order) {
  return url('ms/checkout', array('absolute' => TRUE));
}

/**
 * Builds a return URL for an order during checkout process.
 */
function ms_core_get_checkout_return_url(MsOrder $order) {
  return url('ms/checkout/return/' . $order->order_key, array('absolute' => TRUE));
}

/**
 * Implements hook_views_api().
 */
function ms_core_views_api() {
  return array('api' => 3.0);
}

/**
 * Implements hook_variable_group_info().
 */
function ms_core_variable_group_info() {
  $i18n_settings = module_invoke_all('ms_core_overrides');
  $groups = array();

  if (is_array($i18n_settings) && !empty($i18n_settings)) {
    foreach ($i18n_settings as $module => $info) {
      $groups[$module] = array(
        'title' => $info['title'],
        'description' => '',
        'access' => 'administer site configuration',
        'path' => array('admin/moneysuite'),
      );
    }
  }

  return $groups;
}

/**
 * Implements hook_variable_info().
 */
function ms_core_variable_info($options) {
  $i18n_settings = module_invoke_all('ms_core_overrides');
  $variable = array();

  if (is_array($i18n_settings) && !empty($i18n_settings)) {
    foreach ($i18n_settings as $module => $info) {
      $t_form_state = form_state_defaults();
      if (!empty($info['params'])) {
        $t_form_state['build_info']['args'] = $info['params'];
      }
      $module_form = drupal_retrieve_form($info['form'], $t_form_state);

      $settings = array();
      ms_core_extract_i18n_settings($module_form, $settings);

      if (!empty($settings)) {
        foreach ($settings as $key => $element) {
          $variable[$key] = array(
            'type' => 'string',
            'title' => !empty($element['#title']) ? $element['#title'] : '',
            'group' => $module,
            'default' => !empty($element['#default_value']) ? $element['#default_value'] : '',
            'description' => !empty($element['#description']) ? $element['#description'] : '',
          );
        }
      }
    }
  }

  return $variable;
}

/**
 * Recursively extracts the i18n settings from a form.
 *
 * @param array $parent
 *   The form parent.
 * @param array &$settings
 *   The i18n settings which have been found so far.
 */
function ms_core_extract_i18n_settings($parent, &$settings) {
  foreach (element_children($parent) as $child_name) {
    if (!empty($parent[$child_name]['#ms_i18n'])) {
      $settings[$child_name] = $parent[$child_name];
    }
    ms_core_extract_i18n_settings($parent[$child_name], $settings);
  }
}

/**
 * Implements hook_action_info
 */
function ms_core_action_info() {
  return array(
    'ms_core_change_order_status_action' => array(
      'type' => 'ms_order',
      'label' => t('Change order status'),
      'description' => t('Change the status of the order.'),
      'configurable' => TRUE,
      'behavior' => array('changes_property'),
      'triggers' => array('any'),
      'aggregate' => FALSE,
    ),
  );
}

/**
 * Generates settings form for ms_core_change_order_status_action().
 *
 * @param array $context
 *   An array of options of this action (in case it is being edited)
 *
 * @return array
 *   Settings form as Form API array.
 */
function ms_core_change_order_status_action_form($context) {
  $form['status'] = array(
    '#title' => t('Status'),
    '#type' => 'select',
    '#options' => ms_core_get_order_statuses(),
    '#default_value' => isset($context['status']) ? $context['status'] : '',
  );
  return $form;
}

/**
 * Submit handler for ms_core_change_order_status_action.
 *
 * Returns an associative array of values which will be available in the
 * $context when an action is executed.
 */
function ms_core_change_order_status_action_submit($form, $form_state) {
  return array('status' => $form_state['values']['status']);
}

/**
 * Implements hook_views_bulk_operations_object_info
 */
function ms_core_views_bulk_operations_object_info() {
  return array(
    'ms_order' => array(
      'type' => 'ms_order',
      'base_table' => 'ms_orders',
      'load' => 'ms_core_order_load',
      'title' => t('Order'),
    ),
  );
}

/**
 * Implementation of ms_core_change_order_status_action action.
 *
 * @param object $object
 * @param array $context
 */
function ms_core_change_order_status_action(&$order, $context = array()) {
  $order->status = $context['status'];
}