<?php

/**
 * @file
 * MoneySuite Tax.
 *
 * Original author: Leighton Whiting - Released under GENERAL PUBLIC LICENSE
 * Current maintenance by multiple MoneySuite users.
 * Re: new initiative: https://www.drupal.org/node/2315653 
 */

/**
 * Implements hook_help().
 */
function ms_tax_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/moneysuite/ms_tax":
    case "admin/help#ms_tax":
      $output .= '<p>' . t("MoneySuite Tax Module. This allows you to set a universal tax that will be
      applied to every order. The tax can be a fixed amount or a percentage.") . '</p>';
      break;
  }
  return $output;
}

/**
 * Implements hook_menu().
 */
function ms_tax_menu() {
  $items = array();

  $items['admin/moneysuite/ms_tax'] = array(
    'title' => 'Tax',
    'description' => 'Add a tax to all products',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_tax_admin'),
    'access arguments' => array('administer moneysuite settings'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_ms_core_overrides().
 */
function ms_tax_ms_core_overrides() {
  return array(
    'ms_tax' => array(
      'title' => t('MS Tax'),
      'form' => 'ms_tax_admin',
    ),
  );
}

/**
 * Form constructor for the Admin Settings Form.
 */
function ms_tax_admin($form, &$form_state) {
  $form['main'] = array(
    '#type' => 'fieldset',
    '#title' => t('Main Settings'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );

  $form['main']['ms_tax_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Display Text for Tax in Cart and Order'),
    '#size' => 32,
    '#maxlength' => 64,
    '#default_value' => variable_get('ms_tax_name', t('Tax')),
    '#description' => t("This is what will appear next to the Tax amount on orders."),
    '#required' => TRUE,
    '#ms_override' => TRUE,
  );
  $form['main']['ms_tax_amount'] = array(
    '#type' => 'textfield',
    '#title' => t('Tax Amount to apply to orders by default'),
    '#size' => 32,
    '#maxlength' => 64,
    '#default_value' => variable_get('ms_tax_amount', 0),
    '#description' => t("This tax will apply to all orders by default."),
    '#required' => TRUE,
    '#ms_override' => TRUE,
  );
  $form['main']['ms_tax_type'] = array(
    '#type' => 'radios',
    '#title' => t('Percentage or Fixed Amount?'),
    '#default_value' => variable_get('ms_tax_type', 'percentage'),
    '#options' => array(
      'percentage' => t('Percentage'),
      'fixed' => t('Fixed'),
    ),
    '#required' => TRUE,
    '#ms_override' => TRUE,
  );
  $scopes = ms_core_get_scopes();
  $form['main']['ms_tax_scope'] = array(
    '#type' => 'radios',
    '#title' => t('Scope'),
    '#default_value' => variable_get('ms_tax_scope', 'recurring'),
    '#options' => $scopes,
    '#required' => TRUE,
    '#description' => t('Whether the tax should affect the first payment only or all payments. Only applies for Recurring Payments.'),
    '#ms_override' => TRUE,
  );
  $form['main']['ms_tax_weight'] = array(
    '#type' => 'select',
    '#title' => t('Weight'),
    '#description' => t("Select the weight for the tax adjustment. The weight controls what order adjustments are calculated in."),
    '#options' => drupal_map_assoc(range(-50, 50)),
    '#default_value' => variable_get('ms_tax_weight', 0),
  );

  $form['countries'] = array(
    '#type' => 'fieldset',
    '#title' => t('Country and Region Specific Settings'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#description' => t("Here you can specify country and region specific settings for taxes.
      This can be very useful for charging VAT for different countries at different rates.
      If you have a profile field set in the MS Core Settings for the Billing Country or Region, then that field will be used to determine the default country or region associated with the user.
      If the user is not logged in, then if the profile field is included in the registration form, it will be used to determine the country or region.
      Other means are also used to attempt to automatically determine the country or region based on the user's past information."),
  );
  $form['countries']['ms_tax_use_country_specific_rates'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use Country and/or Region Specific Rates?'),
    '#size' => 32,
    '#maxlength' => 64,
    '#default_value' => variable_get('ms_tax_use_country_specific_rates', FALSE),
    '#description' => t("If this is checked, country and / or region fields will be added to the Checkout form so that users can select which country and region they are in for tax purposes."),
  );

  $form['countries']['regions'] = array(
    '#type' => 'fieldset',
    '#title' => t('Region Specific Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => variable_get('ms_tax_state_specific_rates', ''),
  );


  $form['countries']['regions']['ms_tax_state_specific_rates'] = array(
    '#type' => 'textarea',
    '#title' => t('Region Specific Settings'),
    '#description' => t("Here you can specify state/province specific settings for taxes.
      This can be very useful for charging VAT for different provinces at different rates.
      If you have a profile field set in the MS Core Settings for the Billing State,
      then that field will be used to determine the state/province associated with the user.
      If the user is not logged in, then if the profile field is included in the registration
      form, it will be used to determine the state/province. If all of these methods fail,
      then the user will be asked to select a state/province before they go
      to checkout.") . "<br />" .
      t("Enter the state 2-letter codes, tax names, and tax amounts on separate lines, divided by a | character. Ex: TX|Tax for Texas|5.95"),
    '#default_value' => variable_get('ms_tax_state_specific_rates', ''),
  );

  $countries_list = ms_core_get_countries('iso');
  $specific_countries = variable_get('ms_tax_specific_countries', array());

  if (isset($form_state['specific_countries']) AND is_array($form_state['specific_countries'])) {
    $specific_countries = array_merge($specific_countries, $form_state['specific_countries']);
  }

  foreach ($specific_countries as $country_iso) {
    $form['countries']['specific_countries'][$country_iso] = array(
      '#type' => 'fieldset',
      '#title' => t('Country Specific Settings for @name', array('@name' => $countries_list[$country_iso])),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );

    $form['countries']['specific_countries'][$country_iso]['ms_tax_name_' . $country_iso] = array(
      '#type' => 'textfield',
      '#title' => t('Display Text for Tax in Cart and Order'),
      '#size' => 32,
      '#maxlength' => 64,
      '#default_value' => variable_get('ms_tax_name_' . $country_iso, t('Tax')),
      '#description' => t("This is what will appear next to the Tax amount on orders."),
      '#required' => TRUE,
      '#ms_override' => TRUE,
    );
    $form['countries']['specific_countries'][$country_iso]['ms_tax_amount_' . $country_iso] = array(
      '#type' => 'textfield',
      '#title' => t('Tax Amount to apply to orders by default'),
      '#size' => 32,
      '#maxlength' => 64,
      '#default_value' => variable_get('ms_tax_amount_' . $country_iso, 0),
      '#description' => t("This tax will apply to all orders by default."),
      '#required' => TRUE,
      '#ms_override' => TRUE,
    );
    $form['countries']['specific_countries'][$country_iso]['ms_tax_type_' . $country_iso] = array(
      '#type' => 'radios',
      '#title' => t('Percentage or Fixed Amount?'),
      '#default_value' => variable_get('ms_tax_type_' . $country_iso, 'percentage'),
      '#options' => array(
        'percentage' => t('Percentage'),
        'fixed' => t('Fixed'),
      ),
      '#required' => TRUE,
      '#ms_override' => TRUE,
    );
    $form['countries']['specific_countries'][$country_iso]['ms_tax_scope_' . $country_iso] = array(
      '#type' => 'radios',
      '#title' => t('Scope'),
      '#default_value' => variable_get('ms_tax_scope_' . $country_iso, 'recurring'),
      '#options' => $scopes,
      '#required' => TRUE,
      '#description' => t('Whether the tax should affect the first payment only or all payments. Only applies for Recurring Payments.'),
      '#ms_override' => TRUE,
    );
    $form['countries']['specific_countries'][$country_iso]['ms_tax_remove_country-' . $country_iso] = array(
      '#type' => 'submit',
      '#value' => t('Remove @name', array('@name' => $countries_list[$country_iso])),
      '#submit' => array('ms_tax_remove_country'),
      // Since we are removing a country, don't validate until later.
      '#limit_validation_errors' => array(),
    );
  }

  $form['countries']['add'] = array(
    '#type' => 'fieldset',
    '#title' => t('New Country Specific Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['countries']['add']['ms_tax_new_country'] = array(
    '#type' => 'select',
    '#title' => t('Country'),
    '#options' => $countries_list,
    '#required' => FALSE,
  );
  $form['countries']['add']['ms_tax_add_country'] = array(
    '#type' => 'submit',
    '#value' => t('Add Country Specific Settings'),
    '#submit' => array('ms_tax_add_country'),
  );

  return system_settings_form($form);
}

/**
 * Form submission handler for "Add Country Specific Settings" button.
 */
function ms_tax_add_country($form, &$form_state) {
  $specific_countries = variable_get('ms_tax_specific_countries', array());
  if (isset($form_state['values']['ms_tax_new_country'])) {
    $country_iso = $form_state['values']['ms_tax_new_country'];
    $form_state['specific_countries'][$country_iso] = $country_iso;
    $specific_countries[$country_iso] = $country_iso;
  }

  variable_set('ms_tax_specific_countries', $specific_countries);

  $form_state['rebuild'] = TRUE;
}

/**
 * Form submission handler for "Remove Country Specific Settings" button.
 */
function ms_tax_remove_country($form, &$form_state) {
  $specific_countries = variable_get('ms_tax_specific_countries', array());
  $op = $form_state['values']['op'];
  foreach ($form_state['values'] as $key => $value) {
    if ($key != 'op' AND $value == $op) {
      list(, $country_iso) = explode("-", $key);
      unset($specific_countries[$country_iso]);
      variable_del('ms_tax_remove_country-' . $country_iso);
      variable_del('ms_tax_name_' . $country_iso);
      variable_del('ms_tax_amount_' . $country_iso);
      variable_del('ms_tax_type_' . $country_iso);
      variable_del('ms_tax_scope_' . $country_iso);
    }
  }
  variable_set('ms_tax_specific_countries', $specific_countries);
  $form_state['specific_countries'] = $specific_countries;
  $form_state['rebuild'] = TRUE;
}

/**
 * Implements hook_ms_cart_added().
 */
function ms_tax_ms_cart_added($order, $product) {
  global $user;

  // First add the default tax.
  ms_tax_add_tax_adjustment($order);

  // If there is a country set with a specific tax, add that tax.
  if (variable_get('ms_tax_use_country_specific_rates', FALSE)) {
    // Check if the cart already has a country_iso set in the data.
    if (isset($order->data['country_iso'])) {
      $country_iso = $order->data['country_iso'];
      ms_tax_add_tax_adjustment($order, $country_iso);
    }
    // Check if the user is logged in and if their profile has the data info.
    elseif ($user->uid) {
      $account = user_load($user->uid);
      // First check if the user has any saved payment profiles.
      $profiles = ms_core_payment_profiles_load_by_user($account->uid);
      if (!empty($profiles)) {
        foreach ($profiles as $profile) {
          if (isset($profile->country) AND $profile->country) {
            $country_iso = $profile->country;
            ms_tax_add_tax_adjustment($order, $country_iso);
          }
        }
      }
      // Then check if the country is set in their profile.
      elseif ($field_name = variable_get('ms_core_profile_billing_country', '') AND !empty($account->$field_name)) {
        $country_iso = $account->$field_name;
        ms_tax_add_tax_adjustment($order, $country_iso);
      }
      else {
        // Finally, check if it may be in one of their past orders.
        $orders = ms_core_get_orders($account->uid);
        foreach ($orders as $order) {
          if (!empty($order->billing_address['country'])) {
            $country_iso = $order->billing_address['country'];
            ms_tax_add_tax_adjustment($order, $country_iso);
          }
        }
      }
    }
    // Otherwise we'll try and get one from other means.
    elseif ($field_name = variable_get('ms_core_profile_billing_country', '')) {
      list($profile_type, $f_name) = explode('|', $field_name);
      // Check to see if the product has the billing country set in the data.
      if (isset($order->data['form']['values']['profile_' . $profile_type][$f_name][LANGUAGE_NONE][0]['value'])) {
        $country_iso = $order->data['form']['values']['profile_' . $profile_type][$f_name][LANGUAGE_NONE][0]['value'];
        ms_tax_add_tax_adjustment($order, $country_iso);
      }
    }
    elseif ($country_iso = ms_core_variable_get('ms_core_default_country', 'US', $order)) {
      // If the default country has a custom tax, we'll use that.
      ms_tax_add_tax_adjustment($order, $country_iso);
    }
  }

  // If there is a region set with a specific tax, add that tax.
  if ($state_specific = trim(variable_get('ms_tax_state_specific_rates', ''))) {
    // Check if the cart already has a tax_state set in the data.
    if (isset($order->data['tax_state'])) {
      $tax_state = $order->data['tax_state'];
      ms_tax_add_state_tax_adjustment($order, $tax_state);
    }
    // Check if the user is logged in and if their profile has the data info.
    elseif ($user->uid) {
      $account = user_load($user->uid);
      // First check if the user has any saved payment profiles.
      $profiles = ms_core_payment_profiles_load_by_user($account->uid);
      if (!empty($profiles)) {
        foreach ($profiles as $profile) {
          if (!empty($profile->state)) {
            $tax_state = $profile->state;
            ms_tax_add_state_tax_adjustment($order, $tax_state);
          }
        }
      }
      // Then check if the region is set in their profile.
      elseif ($field_name = variable_get('ms_core_profile_billing_state', '') AND !empty($account->$field_name)) {
        $tax_state = $account->$field_name;
        ms_tax_add_state_tax_adjustment($order, $tax_state);
      }
      else {
        // Finally, check if it may be in one of their past orders.
        $orders = ms_core_get_orders($account->uid);
        foreach ($orders as $order) {
          if (!empty($order->billing_address['state'])) {
            $tax_state = $order->billing_address['state'];
            ms_tax_add_state_tax_adjustment($order, $tax_state);
          }
        }
      }
    }
    // Otherwise we'll try and get one from other means.
    elseif ($field_name = variable_get('ms_core_profile_billing_state', '')) {
      list($profile_type, $f_name) = explode('|', $field_name);
      // Check to see if the product has the billing state set in the data.
      if (isset($order->data['form']['values']['profile_' . $profile_type][$f_name][LANGUAGE_NONE][0]['value'])) {
        $tax_state = $order->data['form']['values']['profile_' . $profile_type][$f_name][LANGUAGE_NONE][0]['value'];
        ms_tax_add_state_tax_adjustment($order, $tax_state);
      }
    }
    // Lastly, try and get it from the default state variable.
    if ($tax_state = ms_core_variable_get('ms_core_default_state', '', $order)) {
      ms_tax_add_state_tax_adjustment($order, $tax_state);
    }
  }
}

/**
 * Adds a state tax adjustment to the cart.
 */
function ms_tax_add_state_tax_adjustment(&$order, $tax_state) {
  if (!empty($order->oid)) {
    ms_core_remove_order_adjustment_match($order, "ms_tax");
  }
  else {
    ms_core_remove_cart_adjustment_match("ms_tax");
  }
  $states = ms_tax_get_region_specific_rates($order);

  $adjustment = new MsAdjustment();
  $adjustment->id = 'ms_tax_1';
  $adjustment->product_id = NULL;

  $adjustment->weight = variable_get('ms_tax_weight', 0);
  $adjustment->value = ms_core_variable_get('ms_tax_amount', 0, $order);
  $adjustment->display = ms_core_variable_get('ms_tax_name', '', $order);
  $adjustment->type = ms_core_variable_get('ms_tax_type', 'percentage', $order);
  $adjustment->scope = ms_core_variable_get('ms_tax_scope', 'recurring', $order);

  if (!empty($states[$tax_state])) {
    $order->data['tax_state'] = $tax_state;
    $adjustment->value = $states[$tax_state]['rate'];
    $adjustment->display = $states[$tax_state]['display'];
  }

  // Add the tax to the order.
  if ($adjustment->value) {
    if (!empty($order->oid)) {
      ms_core_add_order_adjustment($order, $adjustment);
    }
    else {
      ms_core_add_cart_adjustment($adjustment, TRUE);
    }
  }
}

/**
 * Adds a tax adjustment to the cart.
 */
function ms_tax_add_tax_adjustment(&$order, $country_iso = '') {
  if (!empty($order->oid)) {
    ms_core_remove_order_adjustment_match($order, "ms_tax");
  }
  else {
    ms_core_remove_cart_adjustment_match("ms_tax");
  }

  $adjustment = new MsAdjustment();
  $adjustment->id = 'ms_tax_1';
  $adjustment->product_id = NULL;

  $adjustment->weight = variable_get('ms_tax_weight', 0);
  $order->data['country_iso'] = $country_iso;
  if ($country_iso AND ms_core_variable_get('ms_tax_name_' . $country_iso, '', $order)) {
    // Use the country specific tax.
    $adjustment->display = ms_core_variable_get('ms_tax_name_' . $country_iso, '', $order);
    $adjustment->type = ms_core_variable_get('ms_tax_type_' . $country_iso, 'percentage', $order);
    $adjustment->value = ms_core_variable_get('ms_tax_amount_' . $country_iso, 0, $order);
    $adjustment->scope = ms_core_variable_get('ms_tax_scope_' . $country_iso, 'recurring', $order);
  }
  else {
    // Use the default tax.
    $adjustment->display = ms_core_variable_get('ms_tax_name', '', $order);
    $adjustment->type = ms_core_variable_get('ms_tax_type', 'percentage', $order);
    $adjustment->value = ms_core_variable_get('ms_tax_amount', 0, $order);
    $adjustment->scope = ms_core_variable_get('ms_tax_scope', 'recurring', $order);
  }

  // Add the tax to the order.
  if ($adjustment->value) {
    if (!empty($order->oid)) {
      ms_core_add_order_adjustment($order, $adjustment);
    }
    else {
      ms_core_add_cart_adjustment($adjustment, TRUE);
    }
  }
}

/**
 * Gets an array of region specific rates.
 *
 * @param object $object
 *   (optional) The object to use with ms_core_variable_get() for overrides.
 *
 * @return array
 *   An array of region specific rates, keyed by region code.
 */
function ms_tax_get_region_specific_rates($object = NULL) {
  $regions = array();

  if ($state_specific = trim(ms_core_variable_get('ms_tax_state_specific_rates', '', $object))) {
    foreach (explode("\n", $state_specific) as $line) {
      list($state_name, $tax_name, $state_rate) = explode('|', $line);
      $regions[$state_name] = array(
        'rate' => $state_rate,
        'display' => $tax_name,
      );
    }
  }

  return $regions;
}

/**
 * Implements hook_ms_core_checkout_country_changed().
 */
function ms_tax_ms_core_checkout_country_changed($order, $new_country) {
  ms_tax_add_tax_adjustment($order, $new_country);
}

/**
 * Implements hook_ms_core_checkout_region_changed().
 */
function ms_tax_ms_core_checkout_region_changed($order, $new_region) {
  $regions = ms_tax_get_region_specific_rates($order);
  if ($new_region && isset($regions[$new_region])) {
    ms_tax_add_state_tax_adjustment($order, $new_region);
  }
}

/**
 * Implements hook_token_info
 */
function ms_tax_token_info() {
  $types = array();

  $tokens = array(
    'ms_core_order' => array(
      'taxRate' => array(
        'name' => t('Tax Rate'),
        'description' => t("The tax rate. This could be a fixed amount or a percentage."),
      ),
      'taxAmount' => array(
        'name' => t('Tax Amount'),
        'description' => t("The tax amount."),
      ),
    ),
  );

  return array('types' => $types, 'tokens' => $tokens);
}

/**
 * Implements hook_tokens().
 */
function ms_tax_tokens($type, $tokens, $data = array(), $options = array()) {
  $replacements = array();

  if ($type == 'ms_core_order' && !empty($data['ms_core_order']) AND $data['ms_core_order']) {
    $object = $data['ms_core_order'];
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'taxRate':
          $replacements[$original] = t('N/A');
          foreach ($object->adjustments as $adjustment) {
            if ($adjustment->id == 'ms_tax_1') {
              $replacements[$original] = $adjustment->display;
            }
          }
          break;
        case 'taxAmount':
          $replacements[$original] = t('N/A');
          foreach ($object->adjustments as $adjustment) {
            if ($adjustment->id == 'ms_tax_1') {
              $price = ms_core_get_order_products_total($object);
              $replacements[$original] = ms_core_get_adjusted_price($adjustment, $price);
            }
          }
          break;
      }
    }
  }

  return $replacements;
}

/**
 * Implements hook_ms_core_checkout_form_alter().
 */
function ms_tax_ms_core_checkout_form_alter(&$form, $form_state, $cart) {
  if (ms_core_variable_get('ms_tax_use_country_specific_rates', FALSE, $cart) && empty($cart->data['shippable'])) {
    $form['outer_wrapper']['shipping'] = array(
      '#type' => 'fieldset',
      '#title' => t('Tax Information'),
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
      '#weight' => -1,
    );

    $fields = ms_core_get_checkout_form_fields('shipping');

    $vars = FALSE;
    // Load the account from the order.
    if ($cart->uid && ($account = user_load($cart->uid))) {
      $vars = (array) $account;
    }
    elseif (!empty($cart->data['register_form'])) {
      // Get the address and email from the registration form.
      $vars = $cart->data['register_form'];
    }
    elseif (!empty($cart->data['form']['mail'])) {
      $vars = $cart->data['form'];
    }
    elseif (!empty($cart->data['form']['values']['mail'])) {
      $vars = $cart->data['form']['values'];
    }

    // Shipping Info.
    foreach ($fields as $field => $data) {
      switch ($field) {
        case 'shipping_country':
          $form['outer_wrapper']['shipping'][$field] = array(
            '#type' => $data['type'],
            '#title' => check_plain(variable_get('ms_checkout_form_' . $field . '_title', $data['name'])),
            '#description' => check_plain(variable_get('ms_checkout_form_' . $field . '_description', $data['description'])),
            '#size' => $data['size'],
            '#required' => variable_get('ms_checkout_form_' . $field . '_required', $data['required']),
            '#default_value' => isset($vars[$field]) ? $vars[$field] : ms_core_get_form_field_default(variable_get('ms_core_profile_' . $field, $data['profile']), $vars),
          );

          $form['outer_wrapper']['shipping'][$field]['#options'] = ms_core_get_countries();

          $form['outer_wrapper']['shipping'][$field]['#ajax'] = array(
            'wrapper' => 'ms-core-checkout-page-wrapper',
            'callback' => 'ms_core_checkout_ajax_callback',
            'effect' => 'fade',
          );
          if (empty($form['outer_wrapper']['shipping'][$field]['#default_value'])) {
            $form['outer_wrapper']['shipping'][$field]['#default_value'] = variable_get('ms_core_default_country', 'US');
          }

          break;

        case 'shipping_state':
          if (ms_core_variable_get('ms_tax_state_specific_rates', '', $cart)) {
            $form['outer_wrapper']['shipping'][$field] = array(
              '#type' => $data['type'],
              '#title' => check_plain(variable_get('ms_checkout_form_' . $field . '_title', $data['name'])),
              '#description' => check_plain(variable_get('ms_checkout_form_' . $field . '_description', $data['description'])),
              '#size' => $data['size'],
              '#required' => variable_get('ms_checkout_form_' . $field . '_required', $data['required']),
              '#default_value' => isset($vars[$field]) ? $vars[$field] : ms_core_get_form_field_default(variable_get('ms_core_profile_' . $field, $data['profile']), $vars),
            );

            if (empty($form['shipping'][$field]['#default_value'])) {
              $form['outer_wrapper']['shipping'][$field]['#default_value'] = variable_get('ms_core_default_state', '');
            }

            $form['outer_wrapper']['shipping'][$field]['#prefix'] = "<div id='ms_core_checkout_shipping_state_wrapper'>";
            $form['outer_wrapper']['shipping'][$field]['#suffix'] = "</div>";
            $selected_country = ms_core_get_form_field_default(variable_get('ms_core_profile_' . $field, $data['profile']), $vars) ? ms_core_get_form_field_default(variable_get('ms_core_profile_' . $field, $data['profile']), $vars) : variable_get('ms_core_default_country', 'US');
            if (!empty($form_state['input']['shipping_country'])) {
              $selected_country = $form_state['input']['shipping_country'];
            }
            $numcode = ms_core_get_country_type($selected_country, 'iso', 'numcode');
            $options = ms_core_get_regions($numcode);
            if (!empty($options)) {
              $form['outer_wrapper']['shipping']['shipping_state']['#options'] = $options;
              $hook_check = module_implements('ms_core_checkout_region_changed');
              if (!empty($hook_check)) {
                $form['outer_wrapper']['shipping'][$field]['#ajax'] = array(
                  'wrapper' => 'ms-core-checkout-page-wrapper',
                  'callback' => 'ms_core_checkout_ajax_callback',
                  'effect' => 'fade',
                );
              }
            }
            else {
              // Hide the state field.
              $form['outer_wrapper']['shipping'][$field] = array(
                '#type' => 'value',
                '#value' => '',
                '#prefix' => "<div id='ms_core_checkout_shipping_state_wrapper'>",
                '#suffix' => "</div>",
              );
            }
          }
          break;
      }
    }

    // Call the hooks if applicable.
    if (!empty($form_state['input']['shipping_country']) && $form_state['input']['_triggering_element_name'] == 'shipping_country') {
      module_invoke_all('ms_core_checkout_country_changed', $cart, $form_state['input']['shipping_country']);
    }
    elseif (!empty($form['outer_wrapper']['shipping']['shipping_country']['#default_value'])) {
      module_invoke_all('ms_core_checkout_country_changed', $cart, $form['outer_wrapper']['shipping']['shipping_country']['#default_value']);
    }
    if (!empty($form_state['input']['shipping_state'])) {
      if ($form_state['input']['_triggering_element_name'] == 'shipping_country') {
        module_invoke_all('ms_core_checkout_region_changed', $cart, key($form['outer_wrapper']['shipping']['shipping_state']['#options']));
      }
      else {
        module_invoke_all('ms_core_checkout_region_changed', $cart, $form_state['input']['shipping_state']);
      }
    }
    elseif (!empty($form['outer_wrapper']['shipping']['shipping_state']['#default_value'])) {
      module_invoke_all('ms_core_checkout_region_changed', $cart, $form['outer_wrapper']['shipping']['shipping_state']['#default_value']);
    }
  }
}
