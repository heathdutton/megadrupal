<?php

/**
 * @file
 * MoneySuite Fortumo Gateway lets users pay via SMS messages.
 *
 * Original author: Leighton Whiting - Released under GENERAL PUBLIC LICENSE
 * Current maintenance by multiple MoneySuite users.
 * Re: new initiative: https://www.drupal.org/node/2315653 
 */

/**
 * Implements hook_help().
 */
function ms_fortumo_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/moneysuite/gateways/ms_fortumo":
    case "admin/help#ms_fortumo":
      $output = '<p>' .  t("Fortumo Mobile Payments gateway that lets you accept
      payments via SMS.") . '</p>';
      break;
  }
  return $output;
}

/**
 * Implements hook_menu().
 */
function ms_fortumo_menu() {
  $items = array();
  $items['ms_fortumo/widget_listener'] = array(
    'page callback' => 'ms_fortumo_widget_listener',
    'access callback' => 'ms_core_view_page_access_test',
    'type' => MENU_CALLBACK,
  );
  $items['ms_fortumo/sms_listener'] = array(
    'page callback' => 'ms_fortumo_sms_api_listener',
    'access callback' => 'ms_core_view_page_access_test',
    'type' => MENU_CALLBACK,
  );
  $items['ms_fortumo/billing_listener'] = array(
    'page callback' => 'ms_fortumo_sms_api_billing_listener',
    'access callback' => 'ms_core_view_page_access_test',
    'type' => MENU_CALLBACK,
  );
  $items['ms_fortumo/purchase/%'] = array(
    'page callback' => 'ms_fortumo_sms_api_purchase_page',
    'page arguments' => array(2),
    'access callback' => 'ms_core_view_page_access_test',
    'type' => MENU_CALLBACK,
  );
  $items['admin/moneysuite/gateways/ms_fortumo'] = array(
    'title' => 'Fortumo',
    'description' => 'Set the various Fortumo Settings here',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_fortumo_admin'),
    'access arguments' => array('administer moneysuite settings'),
    'type' => MENU_NORMAL_ITEM,
   );

  return $items;
}

// ======================================
// Administration Page:
// ======================================

/**
 * Implements hook_ms_core_overrides().
 */
function ms_fortumo_ms_core_overrides() {
  return array(
    'ms_fortumo' => array(
      'title' => t('MS Fortumo'),
      'form' => 'ms_fortumo_admin',
    ),
  );
}

/**
 * Admin Settings Form
 */
function ms_fortumo_admin($form, &$form_state) {
  $form['main'] = array(
    '#type' => 'fieldset',
    '#title' => t('General Fortumo Settings'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['main']['ms_fortumo_ips'] = array(
    '#type' => 'textarea',
    '#title' => t('Fortumo Server IP Addresses'),
    '#default_value' => variable_get('ms_fortumo_ips', '81.20.151.38,81.20.148.122,79.125.125.1,209.20.83.207'),
    '#description' => t("Enter a comma separated list of IP Addresses that are used
      by Fortumo. Default addresses are: '81.20.151.38,81.20.148.122,79.125.125.1,209.20.83.207'"),
    '#required' => TRUE,
  );

  // -----------------------------
  // Pay By Mobile Widget Fieldset
  // -----------------------------
  $form['widget'] = array(
    '#type' => 'fieldset',
    '#title' => t('Pay By Mobile Widget'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#description' => t("Using the Pay By Mobile Widget, you can easily allow users
      to purchase credits for your site. Place the Widget block on any page you want.
      Use Rules to act on received payments."),
  );
  $form['widget']['ms_fortumo_widget_type'] = array(
    '#type' => 'select',
    '#title' => t('Widget Type'),
    '#options' => array(
      'widget' => t('Widget'),
      'image' => t('Image'),
    ),
    '#default_value' => variable_get('ms_fortumo_widget_type', 'widget'),
    '#description' => t("What kind of widget do you want to use?"),
    '#required' => TRUE,
  );
  $form['widget']['ms_fortumo_widget_service_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Service ID'),
    '#size' => 32,
    '#default_value' => variable_get('ms_fortumo_widget_service_id', ''),
    '#description' => t("Enter the Service ID as found in the General tab of the Service on Fortumo."),
    '#required' => TRUE,
  );
  $form['widget']['ms_fortumo_widget_img'] = array(
    '#type' => 'textarea',
    '#title' => t('Image or Text HTML for Widget'),
    '#default_value' => variable_get('ms_fortumo_widget_img', "<img src='http://fortumo.com/images/fmp/fortumopay_96x47.png' width='96' height='47' alt='Mobile Payments by Fortumo' border='0' />"),
    '#description' => t("Enter any HTML you wish to put inside the widget link.
      Use any image you want, or just enter text."),
    '#required' => TRUE,
  );
  $form['widget']['ms_fortumo_widget_secret'] = array(
    '#type' => 'textfield',
    '#title' => t('Secret'),
    '#size' => 32,
    '#maxlength' => 255,
    '#default_value' => variable_get('ms_fortumo_widget_secret', ''),
    '#description' => t("Enter the Secret key as found in the General tab of the
      Widget Service in Fortumo's Dashboard."),
    '#required' => TRUE,
  );
  $form['widget']['ms_fortumo_widget_listener_url'] = array(
    '#type' => 'item',
    '#title' => t('Widget Listener URL'),
    '#description' => t("Copy and paste this URL to your Fortumo Service's Edit page
      where it says 'To which URL will your payment requests be forwarded to?'"),
    '#markup' => url('ms_fortumo/widget_listener', array('absolute' => TRUE)),
  );

  $form['sms_api_services'] = array(
    '#type' => 'fieldset',
    '#title' => t('SMS API Services'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#description' => t("Here you can link your Fortumo SMS API Services with Products,
      so that when a user pays via SMS to the service, they will be granted the product
      that is associated with it."),
  );
  $form['sms_api_services']['ms_fortumo_sms_api_listener_url'] = array(
    '#type' => 'item',
    '#title' => t('SMS Listener URL'),
    '#description' => t("Copy and paste this URL to your Fortumo Service's Edit page
      where it says 'To which URL will your payment requests be forwarded to?'"),
    '#markup' => url('ms_fortumo/sms_listener', array('absolute' => TRUE)),
  );
  $form['sms_api_services']['ms_fortumo_sms_api_billing_listener_url'] = array(
    '#type' => 'item',
    '#title' => t('Billing Listener URL'),
    '#description' => t("Copy and paste this URL to your Fortumo Service's Edit page
      where it says 'To which URL will your payment requests be forwarded to?'"),
    '#markup' => url('ms_fortumo/billing_listener', array('absolute' => TRUE)),
  );

  $linked_services = variable_get('ms_fortumo_sms_services', array());

  if (isset($form_state['linked_services']) AND is_array($form_state['linked_services'])) {
    $linked_services = array_merge($linked_services, $form_state['linked_services']);
  }

  foreach ($linked_services as $service_id) {
    $form['sms_api_services']['linked_services'][$service_id] = array(
      '#type' => 'fieldset',
      '#title' => t('Service ID: @name', array('@name' => $service_id)),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['sms_api_services']['linked_services'][$service_id]['ms_fortumo_sms_secret_' . $service_id] = array(
      '#type' => 'textfield',
      '#title' => t('Secret'),
      '#size' => 32,
      '#default_value' => variable_get('ms_fortumo_sms_secret_' . $service_id, ''),
      '#description' => t("Enter the Secret key for this service."),
      '#required' => TRUE,
    );
    $form['sms_api_services']['linked_services'][$service_id]['ms_fortumo_sms_xml_' . $service_id] = array(
      '#type' => 'textfield',
      '#title' => t('XML URL'),
      '#size' => 32,
      '#default_value' => variable_get('ms_fortumo_sms_xml_' . $service_id, ''),
      '#description' => t("Enter the URL for the XML file found in the Setup tab
        of the service. This is used to display prices and terms."),
      '#required' => TRUE,
    );
    $form['sms_api_services']['linked_services'][$service_id]['ms_fortumo_sms_product_id_' . $service_id] = array(
      '#type' => 'textfield',
      '#title' => t('Product'),
      '#autocomplete_path' => 'ms_core/autocomplete/product',
      '#size' => 32,
      '#maxlength' => 64,
      '#default_value' => variable_get('ms_fortumo_sms_product_id_' . $service_id, ''),
      '#description' => t("Enter the Product to link this service to."),
      '#required' => TRUE,
    );
    $form['sms_api_services']['linked_services'][$service_id]['ms_fortumo_sms_redirect_' . $service_id] = array(
      '#type' => 'textfield',
      '#title' => t('Redirect Path'),
      '#size' => 32,
      '#default_value' => variable_get('ms_fortumo_sms_redirect_' . $service_id, ''),
      '#description' => t("Enter the path to redirect to once the purchase is complete."),
      '#required' => FALSE,
    );
    $form['sms_api_services']['linked_services'][$service_id]['ms_fortumo_sms_purchase_path_' . $service_id] = array(
      '#type' => 'textfield',
      '#title' => t('Purchase Path'),
      '#size' => 32,
      '#default_value' => variable_get('ms_fortumo_sms_purchase_path_' . $service_id, ''),
      '#description' => t("Enter the purchase path extension that will be used for
        purchasing this product via SMS. For example, if you enter 'premium', then
        the purchase path will be @url",
        array("@url" => url('ms_fortumo/purchase/premium', array('absolute' => TRUE)))),
      '#required' => TRUE,
    );
    $form['sms_api_services']['linked_services'][$service_id]['ms_fortumo_sms_remove_service-' . $service_id] = array(
      '#type' => 'submit',
      '#value' => t('Remove Link'),
      '#submit' => array('ms_fortumo_remove_service'),
      '#limit_validation_errors' => array(),
    );
  }

  $form['sms_api_services']['add'] = array(
    '#type' => 'fieldset',
    '#title' => t('New Service Link'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['sms_api_services']['add']['ms_fortumo_new_service_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Service ID'),
    '#required' => FALSE,
  );
  $form['sms_api_services']['add']['ms_fortumo_add_service'] = array(
    '#type' => 'submit',
    '#value' => t('Add Service'),
    '#submit' => array('ms_fortumo_add_service'),
  );

  return system_settings_form($form);
}

/**
 * Submit handler for "Link Product" button
 */
function ms_fortumo_add_service($form, &$form_state) {
  $linked_services = variable_get('ms_fortumo_sms_services', array());
  if (isset($form_state['values']['ms_fortumo_new_service_id'])) {
    $service_id = $form_state['values']['ms_fortumo_new_service_id'];
    $form_state['linked_services'][$service_id] = $service_id;
    $linked_services[$service_id] = $service_id;
  }

  variable_set('ms_fortumo_sms_services', $linked_services);

  $form_state['rebuild'] = TRUE;
}

/**
 * Submit handler for "Remove Product Link" button
 */
function ms_fortumo_remove_service($form, &$form_state) {
  $linked_services = variable_get('ms_fortumo_sms_services', array());
  $op = $form_state['values']['op'];
  foreach ($form_state['values'] as $key => $value) {
    if ($key != 'op' AND $value == $op) {
      list( , $service_id) = explode("-", $key);
      unset($linked_services[$service_id]);
      variable_del('ms_fortumo_sms_remove_service-' . $service_id);
      variable_del('ms_fortumo_sms_product_id_' . $service_id);
    }
  }
  variable_set('ms_fortumo_sms_services', $linked_services);
  $form_state['linked_services'] = $linked_services;
  $form_state['rebuild'] = TRUE;
}

// ======================================
// Blocks
// ======================================

/**
 * Implements hook_block_info().
 */
function ms_fortumo_block_info() {
  $blocks['ms_fortumo_credits_widget'] = array(
        'info' => t('Fortumo Pay By Mobile Widget'),
      );
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function ms_fortumo_block_configure($delta) {
  $form = array();
  if ($delta == 'ms_fortumo_credits_widget') {
    $form['ms_fortumo_block_content'] = array(
      '#type' => 'textfield',
      '#title' => t('Block Content'),
      '#size' => 60,
      '#description' => t('Enter the block content. Use the !widget token to embed the widget.'),
      '#default_value' => variable_get('ms_fortumo_block_content',  "You may pay by SMS by clicking this: !widget"),
    );
  }
  return $form;
}

/**
 * Implements hook_block_save().
 */
function ms_fortumo_block_save($delta, $edit) {
  if ($delta == 'ms_fortumo_credits_widget') {
    variable_set('ms_fortumo_block_content', $edit['ms_fortumo_block_content']);
  }
  return;
}

/**
 * Implements hook_block_view().
 */
function ms_fortumo_block_view($delta) {
  $block = array();

  switch ($delta) {
    case 'ms_fortumo_credits_widget':
      global $user;
      $block['subject'] = t('Purchase Credits by SMS');
      if ($user->uid) {
        $text = variable_get('ms_fortumo_block_content', t("You may pay by SMS by clicking this: !widget"));
        if (variable_get('ms_fortumo_widget_type', 'widget') == 'widget') {
          ms_fortumo_add_js();
          $widget = ms_fortumo_get_widget($user->uid);
        }
        else {
          $widget = ms_fortumo_get_link($user->uid);
        }
        $block['content'] = str_replace("!widget", $widget, $text);
      }
      else {
        $block['content'] = t("You must be logged in to purchase by SMS.");
      }
      break;
  }
  return $block;
}

// ======================================
// Pages and Functions:
// ======================================

/**
 * Adds the fortumo widget js to the header
 */
function ms_fortumo_add_js() {
  drupal_add_js("http://fortumo.com/javascripts/fortumopay.js", 'external');
}

/**
 * Generates a pay by mobile link with the uid embedded
 */
function ms_fortumo_get_link($uid) {
  $rel = variable_get('ms_fortumo_widget_service_id', '');
  return "<a href='http://fortumo.com/mobile_payments/$rel/$uid'>
  <img ID='payment' alt='Mobile Payments by Fortumo'
  src='http://fortumo.com/images/fmp/fortumopay_106x58.png'
  border='0' height='58' width='106'>";
}

/**
 * Generates a pay by mobile widget with the uid embedded
 */
function ms_fortumo_get_widget($uid) {
  $rel = variable_get('ms_fortumo_widget_service_id', '');
  $img = variable_get('ms_fortumo_widget_img', "<img src='http://fortumo.com/images/fmp/fortumopay_96x47.png' width='96' height='47' alt='Mobile Payments by Fortumo' border='0' />");
  return "<a id='fmp-button' href='#' rel='$rel/$uid'>
    $img
  </a>";
}

/**
 * Listens for widget payments and acts on them
 *
 * The cuid corresponds to the user id in Drupal
 */
function ms_fortumo_widget_listener() {
  // Verify the data
  $secret = variable_get('ms_fortumo_widget_secret', '');
  ms_fortumo_verify_data($_GET, $secret);

  //$sender = $_GET['sender']; // Phone Number
  $credits = $_GET['amount']; // Credits purchased
  $uid = $_GET['cuid']; // User ID
  $account = user_load($uid);
  //$txn_id = $_GET['payment_id']; // Transaction id

  // Additional parameters: operator, price, user_share, country

  if(preg_match("/failed/i", $_GET['status'])) {
    // Payment failed, nothing to do
    ms_core_log_error("ms_fortumo", "Widget Payment Failed. Details: !details", array('!details' => ms_core_print_r($_GET)));
  }
  else {
    // Invoke hook_ms_fortumo_credits to let other modules act on a credits purchase
    ms_core_log("ms_fortumo", "Widget Payment Success. Details: !details", array('!details' => ms_core_print_r($_GET)));
    module_invoke_all('ms_fortumo_credits', $account, $credits);
  }

  // Print out the reply
  echo('OK');
}

/**
 * Implements hook_ms_fortumo_credits().
 */
function ms_fortumo_ms_fortumo_credits($account, $credits) {
  if (module_exists('rules')) {
    rules_invoke_event('ms_fortumo_event_widget_payment', $account, $credits);
  }
}

/**
 * Displays a page with instructions for how the user can pay via SMS
 *
 * The instructions will let the user know who to send the SMS to and what it should say
 *
 * It will also have a box so the user can enter the verification code
 */
function ms_fortumo_sms_api_purchase_page($extension) {
  global $user;
  // Make sure the user is logged in
  if (!$user->uid) {
    drupal_set_message(t('Please login below before proceeding.'));
    drupal_goto('user/login', array('query' => drupal_get_destination()));
  }
  $service_id = FALSE;
  $linked_services = variable_get('ms_fortumo_sms_services', array());
  foreach ($linked_services as $sid) {
    if (variable_get('ms_fortumo_sms_purchase_path_' . $sid, '') == $extension) {
      $service_id = $sid;
      break;
    }
  }
  if ($service_id) {
    return drupal_get_form('ms_fortumo_sms_api_purchase_form', $service_id);
  }
  else {
    drupal_not_found();
  }
}

/**
 * The form to enter the verification code and instructions to the user
 */
function ms_fortumo_sms_api_purchase_form($form, &$form_state, $service_id) {
  $product_id = variable_get('ms_fortumo_sms_product_id_' . $service_id, '');

  if ($product = ms_core_get_module_product($product_id)) {
    $xml_url = variable_get('ms_fortumo_sms_xml_' . $service_id, '');
    $countries = ms_fortumo_get_xml_countries_data($xml_url);

    // Add the js
    $js = ms_fortumo_get_countries_widget_js($countries);
    drupal_add_js($js, 'inline');

    $country_widget = ms_fortumo_get_countries_widget($countries);
    $form['instructions'] = array(
      '#type' => 'item',
      '#title' => t("Step 1 - Choose Country and Send SMS"),
      '#markup' => $country_widget,
    );
    $form['code'] = array(
      '#type' => 'textfield',
      '#title' => t('Step 2 - Enter Verification Code'),
      '#description' => t("Enter the Verification Code that you receive in response to the SMS."),
      '#required' => TRUE,
    );
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Continue'),
    );
    $form_state['redirect'] = variable_get('ms_fortumo_sms_redirect_' . $service_id, '');
  }
  else {
    drupal_set_message(t("Invalid Product."));
  }
  return $form;
}

/**
 * Validate the SMS Purchase Form
 */
function ms_fortumo_sms_api_purchase_form_validate($form, &$form_state) {
  $code = $form_state['values']['code'];
  // Validate the code
  if (!$message = ms_fortumo_load_message_by_code($code)) {
    form_set_error('code', t('You have entered an invalid code.'));
  }
  elseif ($message->record_status == 'failed') {
    form_set_error('code', t('The code you entered is for a failed payment. Please try again from another phone.'));
  }
  elseif ($message->record_status == 'complete') {
    form_set_error('code', t('The code you entered has already been used.'));
  }
  elseif ($message->record_status == 'pending') {
    form_set_error('code', t('The code you entered is for a pending payment. Please wait a while and then try again.'));
  }
  elseif (!$product = ms_core_get_module_product(variable_get('ms_fortumo_sms_product_id_' . $message->service_id, ''))) {
    form_set_error('code', t('There is no product associated with this service id.'));
  }
}

/**
 * Submit Function for the SMS Purchase Form
 */
function ms_fortumo_sms_api_purchase_form_submit($form, &$form_state) {
  // Load the message
  $code = $form_state['values']['code'];
  $message = ms_fortumo_load_message_by_code($code);

  // Update the status of the message
  db_update('ms_fortumo_sms_messages')
    ->fields(array(
      'record_status' => 'complete',
    ))
    ->condition('id', $message->id)
    ->execute();

  // Create the order
  global $user;
  $account = user_load($user->uid);
  $product = ms_core_get_module_product(variable_get('ms_fortumo_sms_product_id_' . $message->service_id, ''));

  $order = ms_core_order_new('cart', $account->uid);

  // Change the currency of the order to the message currency
  $order->currency = $message->currency;

  // Change the price of the product to match the amount received
  $product->amount = floatval($message->price);

  // Change the type of the product to 'cart'
  $product->type = 'cart';

  // Add the Product
  $order = ms_core_add_order_product($order, $product);

  ms_core_order_save($order);

  // Process the payment
  ms_fortumo_process_payment($message, $order);

  // Set a message
  drupal_set_message(t("Your SMS Payment has been processed."));

  $form_state['redirect'] = variable_get('ms_fortumo_sms_redirect_' . $message->service_id, '');
}

/**
 * Load a message by it's message id. Useful for billing notifications
 */
function ms_fortumo_load_message_by_message_id($message_id) {
  $result = db_query("SELECT * FROM {ms_fortumo_sms_messages} WHERE message_id = :message_id",
    array(':message_id' => $message_id));

  foreach ($result as $row) {
    return $row;
  }

  return FALSE;
}

/**
 * Loads a message by the unique code
 */
function ms_fortumo_load_message_by_code($code) {
  $result = db_query("SELECT * FROM {ms_fortumo_sms_messages} WHERE code = :code",
    array(':code' => $code));

  foreach ($result as $row) {
    return $row;
  }

  return FALSE;
}

/**
 * Inserts an SMS API message into the database
 */
function ms_fortumo_insert_sms_api_message($vars) {
  $id = db_insert('ms_fortumo_sms_messages')
    ->fields(array(
      'code' => $vars['code'],
      'status' => $vars['status'],
      'service_id' => $vars['service_id'],
      'record_status' => $vars['record_status'],
      'sender' => $vars['sender'],
      'message' => $vars['message'],
      'message_id' => $vars['message_id'],
      'keyword' => $vars['keyword'],
      'shortcode' => $vars['shortcode'],
      'country' => $vars['country'],
      'price' => $vars['price'],
      'currency' => $vars['currency'],
      'operator' => $vars['operator'],
      'test' => $vars['test'],
      'billing_type' => $vars['billing_type'],
      'received' => time(),
    ))
    ->execute();

  return $id;
}

/**
 * Listener for the sms payments
 *
 * Verifies the Signature and replies with a unique token
 */
function ms_fortumo_sms_api_listener() {
  $vars = $_GET;
  unset($vars['q']); // Remove the q so it doesn't mess with the verification
  ms_core_log("ms_fortumo", "Receiving message notification. Details: !details",
      array('!details' => ms_core_print_r($vars)));
  $secret = variable_get('ms_fortumo_sms_secret_' . $vars['service_id'], '');

  // Verify the data
  ms_fortumo_verify_data($vars, $secret);

  // Create a temporary token for the user to enter as a verification code
  $vars['code'] = ms_fortumo_generate_code();

  switch ($vars['status']) {
    case 'ok':
      $vars['record_status'] = 'ready';
      $reply = t("Please enter the following verification code: !code", array('!code' => $vars['code']));
      break;

    case 'pending':
      // If it is pending and billing type is MT, then we will listen on the billing callback for approved status
      if ($vars['billing_type'] == 'MT' AND !isset($vars['test'])) {
        $vars['record_status'] = 'pending';
        $reply = t("Your verification code is: !code . Payment is still pending
          so the code may not work right away.", array('!code' => $vars['code']));
      }
      else {
        $vars['record_status'] = 'ready';
        $reply = t("Please enter the following verification code: !code", array('!code' => $vars['code']));
      }

      break;

    case 'failed':
    default:
      $vars['record_status'] = 'failed';
      $reply = t("There was an error with the payment.");
      break;
  }

  // Save the message
  ms_fortumo_insert_sms_api_message($vars);

  // Print out the reply
  print $reply;

  exit();
}

/**
 * Listener for the sms billing notifications
 *
 * Verifies the Signature and replies with a unique token
 */
function ms_fortumo_sms_api_billing_listener() {
  $vars = $_GET;
  unset($vars['q']); // Remove the q so it doesn't mess with the verification
  ms_core_log("ms_fortumo", "Receiving billing notification. Details: !details",
      array('!details' => ms_core_print_r($vars)));
  $secret = variable_get('ms_fortumo_sms_secret_' . $vars['service_id'], '');

  // Verify the data
  ms_fortumo_verify_data($vars, $secret);

  // Load the message
  if (!$message = ms_fortumo_load_message_by_message_id($vars['message_id'])) {
    ms_core_log_error("ms_fortumo", "Error loading message for billing notification. Details: !details",
      array('!details' => ms_core_print_r($vars)));
    exit();
  }

  switch ($vars['status']) {
    case 'ok':
      // Set the record_status to 'ready'
      ms_core_log('ms_fortumo', "Updating status of message @id to @status",
        array("@id" => $message->message_id, '@status' => 'ready'));
      db_update('ms_fortumo_sms_messages')
        ->fields(array(
          'record_status' => 'ready',
        ))
        ->condition('message_id', $message->message_id)
        ->execute();
      break;

    case 'failed':
    default:
      ms_core_log('ms_fortumo', "Updating status of message @id to @status",
        array("@id" => $message->message_id, '@status' => 'failed'));
      // Set the record_status to 'failed'
      db_update('ms_fortumo_sms_messages')
        ->fields(array(
          'record_status' => 'failed',
        ))
        ->condition('message_id', $message->message_id)
        ->execute();
      break;
  }

  // Save the message
  ms_fortumo_insert_sms_api_message($vars);

  // Print out the reply
  print 'OK';

 /*
  * Add a billing callback page for things like this
 //customize this according to your needs
  if($billing_reports_enabled
    && preg_match("/Failed/i", $_GET['status'])
    && preg_match("/MT/i", $_GET['billing_type'])) {
   // find message by $_GET['message_id'] and suspend it
  }
  */

  exit();
}

/**
 * Generates a unique verification code
 *
 * @param int $length
 *   The length of the code.
 *
 * @return string
 *   The unique 10 digit transaction id
 */
function ms_fortumo_generate_code($length = 8) {
  $code = ms_core_get_random_key($length);

  while (ms_fortumo_load_message_by_code($code)) {
    $code = ms_core_get_random_key($length);
  }

  return $code;
}

/**
 * Process the payment by adding a Payment record to an Order
 */
function ms_fortumo_process_payment($message, $order) {
  // Create the payment object
  $payment = ms_core_new_payment($order->oid, 'ms_fortumo_sms', 'cart');

  $payment->transaction = $message->message_id;
  $payment->amount = $order->amount;

  $payment->currency = $order->currency;
  $payment->recurring_id = '';
  $payment->data = array('message' => $message);

  // Update the address
  $payment->billing_address = array(
    'street' => t('N/A'),
    'city' => t('N/A'),
    'state' => t('N/A'),
    'zip' => t('N/A'),
    'country' => isset($message->country) ? $message->country : '',
    'phone' => isset($message->sender) ? $message->sender : '',
  );

  switch ($payment->type) {
    case 'cart':
      ms_core_add_history_item($order, 0, t('Payment of @amount submitted through Fortumo SMS.',
        array('@amount' => ms_core_format_money($payment->amount, $payment->currency))));

      // Add the Payment to the Order
      ms_core_enter_payment($payment);
      break;
  }
}

/**
 * Verifies the IP Addresses and the signature
 */
function ms_fortumo_verify_data($vars, $secret) {
  // Check that the request comes from Fortumo server
  if(!in_array($_SERVER['REMOTE_ADDR'], explode(',', variable_get('ms_fortumo_ips', '81.20.151.38,81.20.148.122,79.125.125.1,209.20.83.207')))) {
      ms_core_log_error("ms_fortumo", "SMS Payment From Unknown Server. Details: !details", array('!details' => ms_core_print_r($vars)));
      header("HTTP/1.0 403 Forbidden");
      die("Error: Unknown IP");
  }

  // Check the signature
  if(empty($secret) || !ms_fortumo_check_signature($vars, $secret)) {
    ms_core_log_error("ms_fortumo", "SMS Payment Failed Validation. Details: !details", array('!details' => ms_core_print_r($vars)));
    header("HTTP/1.0 404 Not Found");
    die("Error: Invalid signature");
  }
}

/**
 * Validates the signature
 */
function ms_fortumo_check_signature($params_array, $secret) {
  ksort($params_array);

  $str = '';
  foreach ($params_array as $k=>$v) {
    if($k != 'sig' AND $k != 'q') {
      $str .= "$k=$v";
    }
  }
  $str .= $secret;
  $signature = md5($str);

  return ($params_array['sig'] == $signature);
}

/**
 * Get the xml data for a service
 */
function ms_fortumo_get_xml_countries_data($xml_url) {
  $countries = array();

  // load the xml file
  $xml_data = file_get_contents($xml_url);

  // parse the file into an SimpleXML object
  $xml = new SimpleXMLElement($xml_data);

  // check for errors
  if ($xml->status->code != 0) die('XML error: code ' . $xml->status->code . ' : ' . $xml->status->message);

  // let's fill the country array
  foreach ($xml->service->countries->country as $country) {
    $operators = array();

    // skip countries, that have not been approved yet
    if ($country['approved'] == 'false') continue;

    // get all pricepoints, message profiles and operators
    foreach ($country->prices->price as $price_level) {
      $price = $price_level['amount'] . ' ' . $price_level['currency'];

      foreach ($price_level->message_profile as $profile) {
        $keyword = $profile['keyword'];
        $shortcode = $profile['shortcode'];

        foreach ($profile->operator as $operator) {
          $name = $operator['name'];

          $operators[] = array(
            'name' => $name,
            'price' => $price,
            'keyword' => $keyword,
            'shortcode' => $shortcode
          );
        }
      }
    }

    // put everything to one countries->operators array
    $countries[] = array(
      'code' => $country['code'],
      'name' => $country['name'],
      'text' => $country->promotional_text->local,
      'operators' => $operators
    );
  }

  return $countries;
}

/**
 * Generates the countries widget html
 */
function ms_fortumo_get_countries_widget($countries) {
  $country_widget = "<div style='text-align:center; padding: 10px;'>
      <select id='ms_fortumo_country' onchange='ms_fortumo_select_country();ms_fortumo_select_operator();'>";
  foreach ($countries as $country) {
    $country_widget .= "<option value='" . $country['code'] . "'>" . $country['name'] . "</option>";
  }

  $country_widget .= "</select>
    <select id='ms_fortumo_operator' onchange='ms_fortumo_select_operator();'>";

  foreach ($countries[0]['operators'] as $id => $operator) {
    $country_widget .= "<option value='$id'>" . $operator['name'] . "</option>";
  }
  $country_widget .= "</select>
    <p id='text'>"
      . t('Send a SMS with @carrier to @number, for @price.', array(
        '@carrier' => "<strong id='ms_fortumo_keyword'>" . $countries[0]['operators'][0]['keyword'] . "</strong>",
        '@number' => "<strong id='ms_fortumo_shortcode'>" . $countries[0]['operators'][0]['shortcode'] . "</strong>",
        '@price' => "<strong id='ms_fortumo_price'>" . $countries[0]['operators'][0]['price'] . "</strong>"
      )) . "</p>
    <p id='ms_fortumo_legal'>" . nl2br($countries[0]['text']) . "</p>
  </div>";

  return $country_widget;
}

/**
 * Generates the countries widget js
 */
function ms_fortumo_get_countries_widget_js($countries) {
  $js = "
var operator = new Array();
var text = new Array();
";

  foreach ($countries as $country) {
    $country_code = $country['code'];
    $js .= "operator['$country_code'] = new Array();
    text['$country_code'] = '" . str_replace("\n", '<br />', $country['text']) ."';";

    foreach ($country['operators'] as $id => $operator) {
      $js .= "operator['$country_code'][$id] = new Array();
      operator['$country_code'][$id]['name'] = '" . $operator['name'] . "';
      operator['$country_code'][$id]['keyword'] = '" . $operator['keyword'] . "';
      operator['$country_code'][$id]['shortcode'] = '" . $operator['shortcode'] . "';
      operator['$country_code'][$id]['price'] = '" . $operator['price'] . "';";
    }
  }

$js .= "
function ms_fortumo_select_country() {
  // operator dropdown
  var c = document.getElementById('ms_fortumo_country');
  var op = document.getElementById('ms_fortumo_operator');

  var sel_c_id = c.options[c.selectedIndex].value;

  // empty the list
  for (q = op.options.length; q >= 0; q--) op.options[q] = null;

  // fill the list with new operators
  for (x = 0; x < operator[sel_c_id].length; x++) {
        myEle = document.createElement('option');
    myEle.setAttribute('value', x);

    var txt = document.createTextNode(operator[sel_c_id][x]['name']);
    myEle.appendChild(txt);
    op.appendChild(myEle);
  }
}

// after the operator is selected
function ms_fortumo_select_operator() {
  var c = document.getElementById('ms_fortumo_country');
  var op = document.getElementById('ms_fortumo_operator');

  // get selected values
  var sel_c_id = c.options[c.selectedIndex].value;
  var sel_o_id = op.options[op.selectedIndex].value;
  console.log(operator);

  // update keyword, shortcode, price and legal text
  var keyword = document.getElementById('ms_fortumo_keyword');
  keyword.innerHTML = operator[sel_c_id][sel_o_id]['keyword'];

  var shortcode = document.getElementById('ms_fortumo_shortcode');
  shortcode.innerHTML = operator[sel_c_id][sel_o_id]['shortcode'];

  var price = document.getElementById('ms_fortumo_price');
  price.innerHTML = operator[sel_c_id][sel_o_id]['price'];

  var legal = document.getElementById('ms_fortumo_legal');
  legal.innerHTML = text[sel_c_id];
}";

  return $js;
}
