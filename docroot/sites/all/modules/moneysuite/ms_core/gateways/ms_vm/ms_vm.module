<?php

/**
 * @file
 * MoneySuite Virtual Merchant Module
 *
 * Original author: Leighton Whiting - Released under GENERAL PUBLIC LICENSE
 * Current maintenance by multiple MoneySuite users.
 * Re: new initiative: https://www.drupal.org/node/2315653 
 */

/**
 * Implements hook_help().
 */
function ms_vm_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/moneysuite/gateways/ms_vm":
    case "admin/help#ms_vm":
      $output = '<p>' . t("Virtual Merchant Module for MoneySuite. This allows you to recieve payments
      using your Virtual Merchant account. This gateway supports Non-Recurring Orders only, so you won't
      be able to use this gateway to process Recurring Orders.") . '</p>';
      break;
  }
  return $output;
}

/**
 * Implements hook_menu().
 */
function ms_vm_menu() {
  $items = array();
  $items['ms/checkout/vm'] = array(
    'title' => 'Checkout',
    'page callback' => 'ms_vm_checkout',
    'access callback' => 'ms_core_view_page_access_test',
    'type' => MENU_CALLBACK,
  );
  $items['ms_vm/thank-you'] = array(
    'title' => 'Thank You',
    'page callback' => 'ms_vm_thankyou_page',
    'access callback' => 'ms_core_view_page_access_test',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Admin Settings Form
 */
function ms_vm_admin() {
  $form['api'] = array(
    '#type' => 'fieldset',
    '#title' => t('API access credentials'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['main'] = array(
    '#type' => 'fieldset',
    '#title' => t('Main Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  // -----------------------------
  // API Settings
  // -----------------------------

  $form['api']['ms_vm_merchant_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant ID'),
    '#description' => t('Your merchant ID is the Account number you use to login at Virtual Merchant.'),
    '#default_value' => variable_get('ms_vm_merchant_id', ''),
  );
  $form['api']['ms_vm_user_id'] = array(
    '#type' => 'textfield',
    '#title' => t('User ID'),
    '#description' => t('Same as the user ID you use to login at Virtual Merchant.'),
    '#default_value' => variable_get('ms_vm_user_id', ''),
  );
  $form['api']['ms_vm_pin'] = array(
    '#type' => 'textfield',
    '#title' => t('PIN'),
    '#description' => t('Found through the User > Change PIN menu item at Virtual Merchant.'),
    '#default_value' => variable_get('ms_vm_pin', ''),
  );

  $form['main']['ms_vm_transaction_mode'] = array(
    '#type' => 'radios',
    '#title' => t('Transaction mode'),
    '#description' => t('Make sure you update to production mode when your site goes live!'),
    '#options' => array(
      'production' => t('Production'),
      'test' => t('Test'),
      'demo' => t('Demo server'),
    ),
    '#default_value' => variable_get('ms_vm_transaction_mode', 'test'),
  );

  $form['main']['ms_vm_ship_to'] = array(
    '#type' => 'checkbox',
    '#title' => t('Submit shipping information to Virtual Merchant.'),
    '#default_value' => variable_get('ms_vm_ship_to', FALSE),
  );

  $form['main']['ms_vm_referer_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Authorized referring URL'),
    '#description' => t('Must be an authorized referer entered in the System Setup form. Leave blank if disabled.'),
    '#default_value' => variable_get('ms_vm_referer_url', ''),
  );

  return $form;
}

/**
 * Implements hook_ms_core_payment_gateway().
 */
function ms_vm_ms_core_payment_gateway() {
  $gateway['ms_vm'] = array(
    'name' => t('Virtual Merchant'),
    'display_name' => t('Credit Card'),
    'description' => t('Pay with a credit card.'),
    'cards' => array('visa', 'mc', 'amex', 'discover'),
    'module' => 'ms_vm',
    'checkout_path' => 'ms/checkout/vm',
    'recurring' => FALSE,
    'settings' => ms_vm_admin(),
  );

  return $gateway;
}

/**
 * Checkout Page
 *
 * Make a form to show on the checkout page, to collect the CC and Address Info
 *
 * Then in the submit function, submit the info to the payment gateway.
 * If it is successful, then go to thankyou page
 */
function ms_vm_checkout() {
  // Stop the caching
  $GLOBALS['conf']['cache'] = FALSE;

  // Get the Form
  return drupal_get_form('ms_vm_checkout_form');
}

/**
 * Build the Checkout Form
 */
function ms_vm_checkout_form($form, &$form_state) {
  if (!$order = ms_core_load_session_order()) {
    // Error
    return t('There was an error with the checkout');
  }

  $cards = array(
    'visa' => 'Visa',
    'mc' => 'MasterCard',
    'amex' => 'American Express',
    'discover' => 'Discover',
  );

  $allowed_cards = ms_core_get_cards($cards, $cards);

  ms_core_get_cc_form($form, $order, $allowed_cards);

  ms_core_get_billing_form($form, $order);

  $form['ms_oid'] = array(
    '#type' => 'value',
    '#value' => $order->oid,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Pay Now'),
  );
  return $form;
}

/**
 * Validate the Checkout Form, and Try to Charge the Card
 */
function ms_vm_checkout_form_validate($form, &$form_state) {
  $form_values = $form_state['values'];

  $order = ms_core_order_load($form_values['ms_oid']);

  $response = ms_vm_charge($order, $order->amount, $form_values);

  if ($response['approved'] == TRUE) {
    // The credit card was approved
    $form_state['values']['ms_oid'] = $order->oid;
    $form_state['values']['ms_order_charged'] = TRUE;

    // Insert the Payment to the database
    $payment = ms_core_new_payment($order->oid, 'ms_vm', 'cart');
    $payment->transaction = $response['values']['ssl_txn_id'];
    $payment->amount = $response['values']['ssl_amount'];
    $payment->currency = $order->currency;
    $payment->data = $response['values'];

    // Update the address
    $payment->billing_address = array(
      'street' => $form_values['billing_address1'] . '\n' . $form_values['billing_address2'],
      'city' => $form_values['billing_city'],
      'state' => $form_values['billing_state'],
      'zip' => $form_values['billing_zip'],
      'country' => $form_values['billing_country'],
      'phone' => $form_values['billing_phone'],
    );
    // Update the contact details
    $payment->first_name = $form_values['cc_first_name'];
    $payment->last_name = $form_values['cc_last_name'];

    // Add the Payment to the Order
    ms_core_enter_payment($payment);
  } else { // The Credit Card was not approved, set an error on the form
    form_set_error('ccnumber', $response['message']);
  }
}

/**
 * The card has been charged, mark the order as completed
 */
function ms_vm_checkout_form_submit($form, &$form_state) {
  $v = $form_state['values'];

  // If the Order was charged, complete it
  if ($v['ms_order_charged']) {
    $order = ms_core_order_load($v['ms_oid']);
    $order->status = 'Completed';
    ms_core_order_save($order);
    drupal_goto('ms/thankyou');
  } else {
    // There was an error...
  }
}

/**
 * Process a payment through the Virtual Merchant gateway.
 */
function ms_vm_charge($order, $amount, $data) {
  // Prepare the parameters that we will submit to process the transaction.
  $param = array(
    // Transaction information.
    'ssl_testmode' => 'FALSE',
    'ssl_transaction_type' => 'CCSALE',
    // API access credentials.
    'ssl_merchant_id' => variable_get('ms_vm_merchant_id', ''),
    'ssl_pin' => variable_get('ms_vm_pin', ''),
    'ssl_user_id' => variable_get('ms_vm_user_id', ''),
    // Transaction amount.
    'ssl_amount' => $amount,
    'ssl_salestax' => '0', // Always passed as 0 for the merchant provided form.
    // Payment details.
    'ssl_card_number' => $data['cc_number'],
    'ssl_exp_date' => sprintf('%02d%02d', $data['cc_exp_month'], substr($data['cc_exp_year'], -2)),
    // Include the CVV data
    'ssl_cvv2cvc2_indicator' => '1',
    'ssl_cvv2cvc2' => $data['cc_cvv'],
    // Order details.
    'ssl_description' => ms_core_get_order_title($order, 255),
    'ssl_invoice_number' => $order->oid,
    'ssl_customer_code' => $order->uid,
    // Billing address.
    'ssl_company' => '',
    'ssl_first_name' => substr($data['cc_first_name'], 0, 20),
    'ssl_last_name' => substr($data['cc_last_name'], 0, 30),
    'ssl_avs_address' => substr($data['billing_address1'], 0, 20),
    'ssl_address2' => substr($data['billing_address2'], 0, 30),
    'ssl_city' => substr($data['billing_city'], 0, 30),
    'ssl_state' => substr($data['billing_state'], 0, 30),
    'ssl_avs_zip' => substr($data['billing_zip'], 0, 9),
    'ssl_country' => isset($data['billing_country']) ? $data['billing_country'] : '',
    'ssl_phone' => substr($data['billing_phone'], 0, 20),
    'ssl_email' => substr($data['billing_email'], 0, 100),
    // Payment configuration.
    'ssl_show_form' => 'FALSE',
    // 'ssl_receipt_link_method' => 'GET',
    'ssl_result_format' => 'ASCII',
    // 'ssl_receipt_link_url' => url('<front>', array('absolute' => TRUE)),
  );

  // Update the order for test mode if enabled.
  if (variable_get('ms_vm_transaction_mode', 'test') != 'production') {
    $param['ssl_testmode'] = 'TRUE';

    // When testing, amount must be less than $50.
    if ($param['ssl_amount'] >= 50) {
      $param['ssl_amount'] = '49.99';
    }
  }

  // Include the shipping address if specified.
  if (variable_get('ms_vm_ship_to', FALSE)) {
    // Load the shipping country data.
    $param += array(
      'ssl_ship_to_company' => '',
      'ssl_ship_to_first_name' => substr($data['cc_first_name'], 0, 20),
      'ssl_ship_to_last_name' => substr($data['cc_last_name'], 0, 30),
      'ssl_ship_to_avs_address' => substr($data['billing_address1'], 0, 20),
      'ssl_ship_to_address2' => substr($data['billing_address2'], 0, 30),
      'ssl_ship_to_city' => substr($data['billing_city'], 0, 30),
      'ssl_ship_to_state' => substr($data['billing_state'], 0, 30),
      'ssl_ship_to_avs_zip' => substr($data['billing_zip'], 0, 9),
      'ssl_ship_to_country' => isset($data['billing_country']) ? $data['billing_country'] : '',
      'ssl_ship_to_phone' => substr($data['billing_phone'], 0, 20),
    );
  }

  // Set the proper URL based on the transaction mode.
  if (variable_get('ms_vm_transaction_mode', 'test') == 'demo') {
    $url = 'https://demo.myvirtualmerchant.com/VirtualMerchantDemo/process.do';
  } else {
    $url = 'https://www.myvirtualmerchant.com/VirtualMerchant/process.do';
  }

  // Setup the cURL request.
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_VERBOSE, 1);
  curl_setopt($ch, CURLOPT_POST, 1);
  curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($param, '', '&'));
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
  curl_setopt($ch, CURLOPT_NOPROGRESS, 1);
  curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 0);

  $referer = variable_get('ms_vm_referer_url', '');

  if (!empty($referer)) {
    curl_setopt($ch, CURLOPT_REFERER, $referer);
  }

  $result_raw = curl_exec($ch);

  $error = curl_error($ch);

  curl_close($ch);

  // Put the results into an associative array.
  parse_str(str_replace(array("\r", "\n"), array('', '&'), trim($result_raw)), $result);

  $response = array();
  $response['values'] = $result;

  // Log any errors to the watchdog.
  if ($error) {
    ms_core_log_error('ms_vm', 'cURL error: @error', array('@error' => $error));
    $response['approved'] = FALSE;
    $response['message'] = t('cURL error');
    return $response;
  }

  // First check for an error message.
  if (!empty($result['errorCode'])) {
    $response['approved'] = FALSE;
    $response['message'] = t('@name (@code) - @message.',
      array('@code' => $result['errorCode'], '@name' => $result['errorName'], '@message' => $result['errorMessage']));
    return $response;
  }

  if ($result['ssl_result'] != '0') {
    // Fail the charge with the reason text in the decline message.
    $response['approved'] = FALSE;
    $response['message'] = t('Credit card payment declined. This error has been logged.',
      array('!response' => check_plain(ms_core_print_r($result))));
    ms_core_log_error('ms_vm', 'Credit card payment declined: !response',
      array('!response' => check_plain(ms_core_print_r($result))));
    return $response;
  } else {
    // Build a message for display and comments in the payments table.
    $message = t('Type: @type<br />ID: @id',
      array('@type' => ms_vm_txn_type_text($data['txn_type']), '@id' => $result['ssl_txn_id']));
    $response['approved'] = TRUE;
    $response['message'] = $message;

    // Build an admin order comment.
    $comment = t('<b>@type</b><br /><b>@status:</b> @code<br /><b>Amount:</b> @amount<br /><b>AVS response:</b> @avs',
      array(
        '@type' => ms_vm_txn_type_text($data['txn_type']),
        '@status' => $result['ssl_result'] == '0' ? t('Accepted') : t('Rejected'),
        '@code' => $result['ssl_approval_code'],
        '@amount' => ms_core_format_money($result['ssl_amount'], $order->currency),
        '@avs' => ms_vm_avs_response_text($result['ssl_avs_response']),
      ));

    // Add the CVV response
    $comment .= '<br />' . t('<b>CVV match:</b> @cvv', array('@cvv' => ms_vm_cvv_response_text($result['ssl_cvv2_response'])));

    // Save the comment to the order.
    ms_core_add_history_item($order, 0, $comment, TRUE);

    return $response;
  }
}

/**
 * Return a human readable string for a CC transaction type.
 */
function ms_vm_txn_type_text($txn_type) {
  $txn_types = array(
    'CCSALE' => t('Credit card sale'),
    'CCAUTHONLY' => t('Credit card authorization'),
    'CCAVSONLY' => t('AVS Only'),
    'CCCREDIT' => t('Credit'),
    'CCFORCE' => t('Force'),
    'CCBALINQUIRY' => t('Balance Inquiry'),
    'CCVOID' => t('Void'),
    'DBPURCHASE' => t('Debit Purchase'),
    'DBRETURN' => t('Debit Return'),
    'DBBAINQUIRY' => t('Debit Inquiry'),
    'FSPURCHASE' => t('Food Stamp Purchase'),
    'FSRETURN' => t('Food Stamp Return'),
    'FSBAINQUIRY' => t('Food Stamp Inquiry'),
    'FSFORCEPURCHASE' => t('Food Stamp Force Purchase'),
    'FSFORCERETURN' => t('Food Stamp Force Return'),
    'CBPURCHASE' => t('Cash Benefit Purchase'),
    'CBBAINQUIRY' => t('Cash Benefit Inquiry'),
    'EGC' => t('Electronic Gift Card Transactions'),
    'EGCACTIVATION' => t('Activation'),
    'EGCSALE' => t('Sale / Redemption'),
    'EGCCARDREFUND' => t('Card Refund'),
    'EGCRELOAD' => t('Replenishment / Reload'),
    'EGCBALINQUIRY' => t('Card Balance Inquiry'),
    'EGCCREDIT' => t('Credit'),
    'ECS' => t('Electronic Check Service Transactions'),
    'ECSPURCHASE' => t('Electronic Check Purchase'),
    'ECSVOID' => t('Void'),
    'PLDPURCHASE' => t('PINLess Debit Purchase'),
  );

  return isset($txn_types[$txn_type]) ? $txn_types[$txn_type] : t('Error');
}

/**
 * Return a human readable string for an AVS response.
 */
function ms_vm_avs_response_text($code) {
  // Build an array defining all the possible response codes.
  $codes = array(
    'A' => t('Address matches - Zip Code does not match.'),
    'B' => t('Street address match, Postal code in wrong format. (International issuer)'),
    'C' => t('Street address and postal code in wrong formats'),
    'D' => t('Street address and postal code match (international issuer)'),
    'E' => t('AVS Error'),
    'G' => t('Service not supported by non-US issuer'),
    'I' => t('Address information not verified by international issuer.'),
    'M' => t('Street Address and Postal code match (international issuer)'),
    'N' => t('No Match on Address (Street) or Zip'),
    'O' => t('No Response sent'),
    'P' => t('Postal codes match, Street address not verified due to incompatible formats.'),
    'R' => t('Retry, System unavailable or Timed out'),
    'S' => t('Service not supported by issuer'),
    'U' => t('Address information is unavailable'),
    'W' => t('9 digit Zip matches, Address (Street) does not match.'),
    'X' => t('Exact AVS Match'),
    'Y' => t('Address (Street) and 5 digit Zip match.'),
    'Z' => t('5 digit Zip matches, Address (Street) does not match.'),
  );

  return $codes[$code];
}

/**
 * Return a human readable string for a CVV response.
 */
function ms_vm_cvv_response_text($code) {
  // Build an array defining all the possible response codes.
  $codes = array(
    'M' => t('CVV2 Match'),
    'N' => t('CVV2 No match'),
    'P' => t('Not Processed'),
    'S' => t('CVV2 data should be present on the card, but the merchant has indicated that it is not.'),
    'U' => t('Issuer has not certified for CVV2 or Issuer has not provided Visa with the CVV2 encryption keys.'),
  );

  return $codes[$code];
}
