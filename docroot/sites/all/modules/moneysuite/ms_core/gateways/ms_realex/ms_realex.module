<?php

/**
 * @file
 * This module allows you to use Realex to process payments on your site.
 *
 * Original author: Leighton Whiting - Released under GENERAL PUBLIC LICENSE
 * Current maintenance by multiple MoneySuite users.
 * Re: new initiative: https://www.drupal.org/node/2315653 
 */

/**
 * Implements hook_ms_process_recurring_payment().
 */
function ms_realex_ms_process_recurring_payment($recurring_schedule, $order) {
  if ($payment_profile = ms_core_payment_profile_load($order->data['payment_profile_id'])) {
    $result = ms_realex_charge_saved_profile($payment_profile, $recurring_schedule->main_amount, $order);
    if ($result['success']) {
      $payment = ms_core_new_payment($order->oid, 'ms_realex', 'rec_payment');

      $payment->transaction = $result['txn_id'];
      $payment->amount = $recurring_schedule->main_amount;
      $payment->currency = $order->currency;
      $payment->data = array('response' => $result);

      return $payment;
    } else {
      // The payment failed. Log an error.
      ms_core_log_error('ms_realex', 'There was an error charging a payment profile. Error: @error Order: !order Profile: !profile',
        array('@error' => $result['message'], '!order' => ms_core_print_r($order), '!profile' => ms_core_print_r($payment_profile)));
    }
  } else {
    // There is no payment profile for this recurring order, log an error.
    ms_core_log_error('ms_realex', 'There was an error loading a payment profile
      to charge a recurring payment. Order: !order', array('!order' => ms_core_print_r($order)));
  }

  return FALSE;
}

/**
 * Implements hook_menu().
 */
function ms_realex_menu() {
  $items = array();
  $items['ms_realex/callback'] = array(
    'page callback' => 'ms_realex_callback',
    'access callback' => 'ms_core_view_page_access_test',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Form constructor for the Admin Settings Form.
 */
function ms_realex_admin() {
  $form['main'] = array(
    '#type' => 'fieldset',
    '#title' => t('Main Settings'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['main']['ms_realex_merchant_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Realex Merchant ID'),
    '#description' => t('Your Realex Merchant ID.'),
    '#default_value' => variable_get('ms_realex_merchant_id', ''),
    '#ms_override' => TRUE,
  );
  $form['main']['ms_realex_account_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Realex Account ID'),
    '#description' => t('Your Realex Account ID.'),
    '#default_value' => variable_get('ms_realex_account_id', ''),
    '#ms_override' => TRUE,
  );
  $form['main']['ms_realex_secret_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Shared secret for order verification'),
    '#description' => t('Your secret key as set in your Realex account.'),
    '#default_value' => variable_get('ms_realex_secret_key', ''),
    '#ms_override' => TRUE,
  );
  $form['main']['ms_realex_use_realvault'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use RealVault for Recurring Payments?'),
    '#default_value' => variable_get('ms_realex_use_realvault', TRUE),
    '#ms_override' => TRUE,
  );
  $form['main']['ms_realex_checkout_method'] = array(
    '#type' => 'radios',
    '#title' => t('Checkout method'),
    '#options' => array(
      'redirect' => t('Redirect'),
      'remote' => t('Remote'),
    ),
    '#default_value' => variable_get('ms_realex_checkout_method', 'redirect'),
    '#ms_override' => TRUE,
  );

  $form['remote'] = array(
    '#type' => 'fieldset',
    '#title' => t('Remote Settings'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['remote']['ms_realex_api_url'] = array(
    '#type' => 'textfield',
    '#title' => t('API URL'),
    '#description' => t('The URL to send API requests to. Example: https://epage.payandshop.com/epage-remote.cgi'),
    '#default_value' => variable_get('ms_realex_api_url', 'https://epage.payandshop.com/epage-remote.cgi'),
    '#size' => 50,
    '#ms_override' => TRUE,
  );
  $form['remote']['ms_realex_api_realex_url'] = array(
    '#type' => 'textfield',
    '#title' => t('RealVault Remote URL'),
    '#description' => t('The URL to send API requests for RealVault to. Example: https://epage.payandshop.com/epage-remote-plugins.cgi'),
    '#default_value' => variable_get('ms_realex_api_realex_url', 'https://epage.payandshop.com/epage-remote-plugins.cgi'),
    '#size' => 50,
    '#ms_override' => TRUE,
  );

  $form['redirect'] = array(
    '#type' => 'fieldset',
    '#title' => t('Redirect Settings'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['redirect']['ms_realex_callback'] = array(
    '#type' => 'textfield',
    '#title' => t('Realex Callback URL'),
    '#description' => t('This is the URL that Realex will redirect their response to. You need to set this in your Realex account.'),
    '#value' => url('ms_realex/callback', array('absolute' => TRUE)),
    '#size' => 50,
    '#attributes' => array('readonly' => 'readonly'),
  );
  $form['redirect']['ms_realex_repsonse'] = array(
    '#type' => 'textfield',
    '#title' => t('Realex Request URL'),
    '#description' => t('This is the URL that Realex will see the request coming from. You need to set this in your Realex account.'),
    '#value' => url('ms/checkout/payment/ms_realex', array('absolute' => TRUE)),
    '#size' => 50,
    '#attributes' => array('readonly' => 'readonly'),
  );
  $form['redirect']['ms_realex_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Realex Gateway URL'),
    '#description' => t('The Realex URL to submit the order to. Example: https://epage.payandshop.com/epage.cgi'),
    '#default_value' => variable_get('ms_realex_url', 'https://epage.payandshop.com/epage.cgi'),
    '#size' => 50,
    '#ms_override' => TRUE,
  );

  return $form;
}

/**
 * Implements hook_ms_core_payment_gateway().
 */
function ms_realex_ms_core_payment_gateway() {
  $gateways['ms_realex'] = array(
    'name' => 'Realex',
    'display_name' => t('Credit Card'),
    'description' => t('Pay by Credit Card'),
    'cards' => variable_get('ms_realex_allowed_cards', array('visa', 'mc', 'discover', 'amex', 'maestro')),
    'module' => 'ms_realex',
    'checkout_form' => 'ms_realex_payment_submit_form',
    'settings' => ms_realex_admin(),
    'recurring_schedule_support' => variable_get('ms_realex_use_realvault', TRUE),
    'recurring' => variable_get('ms_realex_use_realvault', TRUE),
    'saved_cards_support' => TRUE,
  );

  return $gateways;
}

/**
 * Implements hook_ms_core_billing_info_alter().
 */
function ms_realex_ms_core_billing_info_alter(&$html, $account) {
  $html['ms_realex_profile']['add'] = array(
    '#type' => 'markup',
    '#markup' => l(t('Add Card'), 'user/' . $account->uid . '/ms/billing/new/ms_realex'),
  );
  $payment_profiles = ms_core_payment_profiles_load_by_user($account->uid, 'ms_realex');
  foreach ($payment_profiles as $payment_profile) {
    $saved_card = (!empty($payment_profile->cc_num)) ? $payment_profile->cc_num : t('N/A');

    $billing_address = t('N/A');
    if ($payment_profile && isset($payment_profile->address)) {
      $billing_address = t("@address - @city , @state", array(
        '@address' => $payment_profile->address,
        '@city' => $payment_profile->city,
        '@state' => $payment_profile->state,
      ));
    }

    $html['ms_realex_profile'][$payment_profile->id] = array(
      '#type' => 'fieldset',
      '#title' => t('Saved Profile - !edit', array('!edit' => l(t('Edit'), 'user/' . $payment_profile->uid . '/ms/billing/' . $payment_profile->id))),
    );
    $html['ms_realex_profile'][$payment_profile->id]['card'] = array(
      '#type' => 'item',
      '#title' => t('Saved Card'),
      '#markup' => $saved_card
    );
    $html['ms_realex_profile'][$payment_profile->id]['billing_address'] = array(
      '#type' => 'item',
      '#title' => t('Billing Address'),
      '#markup' => $billing_address,
    );
  }
}

/**
 * Form validation handler for ms_core_payment_profile_edit_form().
 *
 * Attempts to add or update a payment profile.
 */
function ms_realex_payment_profile_edit_form_validate($form, &$form_state) {
  $v = $form_state['values'];
  require_once 'ms_realex.class.php';

  if (isset($v['profile_id']) AND $payment_profile = ms_core_payment_profile_load($v['profile_id'])) {
    // Merge in the form values with the object
    $payment_profile = (object)array_merge((array)$payment_profile, $v);
    // Update the payment profile in RealVault.
    $result = ms_realex_update_profile($payment_profile);
    if (!$result['success']) {
      form_set_error('cc_num', $result['message']);
      return;
    }
  } else {
    $payment_profile = (object)$v;
    $v['cc_first_name'] = $v['first_name'];
    $v['cc_last_name'] = $v['last_name'];
    $v['cc_number'] = $v['cc_num'];
    $v['cc_exp_month'] = $v['exp_month'];
    $v['cc_exp_year'] = $v['exp_year'];
    $result = ms_realex_setup_profile($v);
    global $user;
    if ($result['success']) {
      // Save a new payent profile for this user.
      $payment_profile = array(
        'oid' => 0,
        'uid' => $user->uid,
        'remote_id' => $result['SAVED_PAYER_REF'] . '|' . $result['SAVED_PMT_REF'],
        'module' => 'ms_realex',
        'status' => 1,
        'first_name' => $v['cc_first_name'],
        'last_name' => $v['cc_last_name'],
        'address' => $v['address'],
        'city' => $v['city'],
        'state' => $v['state'],
        'zip' => $v['zip'],
        'country' => $v['country'],
        'phone' => $v['phone'],
        'email' => $v['email'],
        'fax' => '',
        'cc_type' => $v['cc_type'],
        'cc_num' => $v['cc_number'],
        'exp_month' => $v['cc_exp_month'],
        'exp_year' => $v['cc_exp_year'],
      );
      $payment_profile = ms_core_payment_profile_save($payment_profile);

      ms_core_log('ms_realex', 'Successfully set up a new payment profile: !profile', array('!profile' => ms_core_print_r($payment_profile)));
    } else {
      ms_core_log_error('ms_realex', check_plain($result['message']));
    }
  }

  // Update the payment profile
  ms_core_payment_profile_save($payment_profile);

  // Set a message
  drupal_set_message(t('Your Billing Information has been successfully updated.'));
  // Redirect to the correct page
  $form_state['redirect'] = 'user/' . $v['uid'] . '/billing-info';
}

/**
 * Implements hook_saved_method_checkout().
 *
 * Here we charge the payment with the saved profile.
 */
function ms_realex_saved_method_checkout($payment_profile, $order, $data) {
  // If there is a trial period, then we charge the trial amount
  if ($order->order_type == 'recurring') {
    if ($order->recurring_schedule['has_trial']) {
      $amount = round($order->recurring_schedule['trial_amount'], 2);
    } else {
      $amount = round($order->recurring_schedule['main_amount'], 2);
    }
  } else {
    $amount = round($order->amount, 2);
  }

  $result = ms_realex_charge_saved_profile($payment_profile, $amount, $order);
  if ($result['success']) {
    $payment = ms_core_new_payment($order->oid, 'ms_realex', 'cart');
    $payment->currency = $order->currency;
    $payment->recurring_id = $order->oid;

    $payment->transaction = $result['txn_id'];
    $payment->data = array('response' => $result);

    // Enter the address and things as saved in the payment profile
    $payment->billing_address = array(
      'street' => check_plain($payment_profile->address),
      'city' => check_plain($payment_profile->city),
      'state' => check_plain($payment_profile->state),
      'zip' => check_plain($payment_profile->zip),
      'country' => check_plain($payment_profile->country),
      'phone' => check_plain($payment_profile->phone),
    );
    $payment->first_name = check_plain($payment_profile->first_name);
    $payment->last_name = check_plain($payment_profile->last_name);

    switch ($order->order_type) {
      case 'recurring':
        $payment->type = 'rec_signup';
        $payment->amount = $amount;
        ms_core_enter_payment($payment);
        break;

      case 'cart':
        $payment->amount = $amount;
        ms_core_enter_payment($payment);
        break;
    }

    // Reload the order to save the payment_profile_id
    $order = ms_core_order_load($order->oid);
    $data = array(
      'payment_profile_id' => $payment_profile->id,
    );
    ms_core_add_data($order, $data);

    return TRUE;
  } else {
    ms_core_log_error('ms_realex', $result['message']);
    form_set_error('cc_number', t('We received the following error processing your card.
      Please enter your information again or try a different card. @error',
      array('@error' => $result['message'])));
  }

  return FALSE;
}

/**
 * Form constructor for the checkout page for a new card.
 *
 * @param MsOrder $order
 *   The order object.
 *
 * @see ms_realex_payment_submit_form_validate()
 * @see ms_realex_payment_submit_form_submit()
 * @ingroup forms
 */
function ms_realex_payment_submit_form($form, $form_state, $order) {
  switch (ms_core_variable_get('ms_realex_checkout_method', 'redirect', $order)) {
    case 'remote':
      ms_core_get_cc_form($form, $order, ms_core_variable_get('ms_realex_allowed_cards', array('visa', 'mc', 'discover', 'amex', 'maestro'), $order));

      ms_core_get_billing_form($form, $order);

      $form['billing']['billing_state']['#required'] = FALSE;

      $form['ms_oid'] = array(
        '#type' => 'value',
        '#value' => $order->oid,
      );

      $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Pay Now'),
      );

      $form['#validate'][] = 'ms_core_cc_form_validate';
      $form['#validate'][] = 'ms_realex_payment_submit_form_validate';

      return $form;

    case 'redirect':
      return drupal_get_form('ms_realex_redirect_form', $order);
  }
}

/**
 * Form validation handler for ms_realex_payment_submit_form().
 *
 * This only kicks in when we are using the remote method.
 * @see ms_realex_payment_submit_form_submit()
 */
function ms_realex_payment_submit_form_validate($form, &$form_state) {
  $v = $form_state['values'];
  $order = ms_core_order_load($v['ms_oid']);

  // If there is a trial period, then we charge the trial amount.
  if ($order->order_type == 'recurring') {
    if ($order->recurring_schedule['has_trial']) {
      $amount = round($order->recurring_schedule['trial_amount'], 2);
    } else {
      $amount = round($order->recurring_schedule['main_amount'], 2);
    }
  } else {
    $amount = round($order->amount, 2);
  }

  $response = ms_realex_remote_charge($order, $amount, $v);

  // Charge the Customer instead of the card
  if ($response['success']) {
    $payment = ms_core_new_payment($order->oid, 'ms_realex', 'cart', $amount, $order->currency);
    $payment->transaction = $response['txn_id'];
    $payment->data = array('response' => $response);

    switch ($order->order_type) {
      case 'recurring':
        $payment->type = 'rec_signup';
        $payment->amount = $amount;
        ms_core_enter_payment($payment);
        break;

      case 'cart':
        $payment->amount = $amount;
        ms_core_enter_payment($payment);
        break;
    }

    // Save the payment profile now if the values are there.
    if (ms_core_variable_get('ms_realex_use_realvault', TRUE, $order)) {
      $result = ms_realex_setup_profile($v);
      if ($result['success']) {
        // Reload the order to get the user id.
        $order = ms_core_order_load($order->oid);

        // Save a new payent profile for this user.
        $payment_profile = array(
          'oid' => $order->oid,
          'uid' => $order->uid,
          'remote_id' => $result['SAVED_PAYER_REF'] . '|' . $result['SAVED_PMT_REF'],
          'module' => 'ms_realex',
          'status' => 1,
          'first_name' => $v['cc_first_name'],
          'last_name' => $v['cc_last_name'],
          'address' => $v['billing_address1'],
          'city' => $v['billing_city'],
          'state' => $v['billing_state'],
          'zip' => $v['billing_zip'],
          'country' => $v['billing_country'],
          'phone' => $v['billing_phone'],
          'email' => $v['billing_email'],
          'fax' => '',
          'cc_type' => $v['cc_type'],
          'cc_num' => $v['cc_number'],
          'exp_month' => $v['cc_exp_month'],
          'exp_year' => $v['cc_exp_year'],
        );
        $payment_profile = ms_core_payment_profile_save($payment_profile);

        // Reload the order to save the payment_profile_id
        $order = ms_core_order_load($order->oid);
        $data = array(
          'payment_profile_id' => $payment_profile->id,
        );
        ms_core_add_data($order, $data);
        ms_core_log('ms_realex', 'Successfully set up a new payment profile: !profile', array('!profile' => ms_core_print_r($payment_profile)));
      } else {
        ms_core_log_error('ms_realex', check_plain($result['message']));
      }
    }
  } else {
    form_set_error('cc_number', check_plain($response['message']));
  }
}

/**
 * Form submission handler for ms_realex_payment_submit_form().
 *
 * @see ms_realex_payment_submit_form_validate()
 */
function ms_realex_payment_submit_form_submit($form, &$form_state) {
  // The card has been charged, redirect to the thankyou page.
  $form_state['redirect'] = 'ms/thankyou';
}

/**
 * Implements hook_ms_core_modification_charge().
 *
 * Charges the amount and approves or denies the modification.
 */
function ms_realex_ms_core_modification_charge($amount, $order) {
  // Load the payment profile.
  if (!empty($order->data['payment_profile_id']) AND $payment_profile = ms_core_payment_profile_load($order->data['payment_profile_id'])) {
    // Try to charge the payment.
    $result = ms_realex_charge_saved_profile($payment_profile, $amount, $order);
    if ($result['success']) {
      return TRUE;
    } else {
      drupal_set_message($result['message'], 'error');
      ms_core_log_error('ms_realex', $result['message']);
      return FALSE;
    }
  } else {
    drupal_set_message(t('The payment profile for this order was not able to be loaded.'), 'error');
    return FALSE;
  }
}

/**
 * Main handler for processing credit card transactions.
 */
function ms_realex_remote_charge(MsOrder $order, $amount, $data) {
  $return = array();
  require_once 'ms_realex.class.php';

  $amount = round($amount * 100);
  $currency = $order->currency;
  $cardnumber = $data['cc_number'];
  $cardname = trim($data['cc_first_name']) . ' ' . trim($data['cc_first_name']);
  $cardtype = _ms_realex_card_type($data['cc_type']);

  $expdate = str_pad($data['cc_exp_month'], 2, '0', STR_PAD_LEFT) . substr($data['cc_exp_year'], 2, 2);

  $cvn = $data['cc_cvv'];
  $issueno = ""; // Issue numbers aren't supported yet.

  $merchantid = ms_core_variable_get('ms_realex_merchant_id', '', $order);
  $account = ms_core_variable_get('ms_realex_account_id', '', $order);
  $timestamp = strftime('%Y%m%d%H%M%S');
  mt_srand((double)microtime() * 1000000);
  // We append the $account because each order must be unique in their system.
  $orderid = $order->oid . '-' . $account . ms_core_generate_transaction_id();

  $sha1hash = _ms_realex_sha1hash(array($timestamp, $merchantid, $orderid, $amount, $currency, $cardnumber), $order);

  $ip_address = ip_address();
  $userid = $order->uid;

  $xml = "<request type='auth' timestamp='$timestamp'>
  <merchantid>$merchantid</merchantid>
  <account>$account</account>
  <orderid>$orderid</orderid>
  <amount currency='$currency'>$amount</amount>
  <card>
    <number>$cardnumber</number>
    <expdate>$expdate</expdate>
    <type>$cardtype</type>
    <chname>$cardname</chname>
    <issueno>$issueno</issueno>
  </card>";
  if ($cvn) {
    $xml .= "
     <cvn>
      <number>$cvn</number>
      <presind>1</presind>
    </cvn>";
  }
  $xml .= "
    <autosettle flag='1'/>
    <sha1hash>$sha1hash</sha1hash>
    <tssinfo>
      <address type=\"billing\">
        <country>ie</country>
      </address>
      <custipaddress>$ip_address</custipaddress>
      <custnum>$userid</custnum>
    </tssinfo>
  </request>";

  // Parse the response with the class.
  $rr = new RealexRemote(ms_core_variable_get('ms_realex_api_url', 'https://epage.payandshop.com/epage-remote.cgi', $order), $xml);
  $result = $rr->record;

  if ($result['result'][0] == '00') {
    // Check to see if hashes match.
    $timestamp = $result['timestamp'];
    $resultcode = $result['result'][0];
    $message = $result['message'];
    $pasref = $result['pasref'];
    $authcode = $result['authcode'];
    $sha1hash = _ms_realex_sha1hash(array($timestamp, $merchantid, $orderid, $resultcode, $message, $pasref, $authcode), $order);

    if ($sha1hash != $result['sha1hash']) {
      ms_core_log_error('ms_realex', 'Hash match failed for order: !order Response: !response',
        array('!order' => ms_core_print_r($order), '!response' => ms_core_print_r($result)));
      $return['success'] = FALSE;
      $return['message'] = t("The security hashes didn't match.");
    } else {
      $return['success'] = TRUE;
      $return['txn_id'] = $result['pasref'];
    }
  } else {
    $return['success'] = FALSE;
    $return['message'] = $result['message'];
  }

  $return['result'] = $result;

  return $return;
}

/**
 * Page callback: Processes the response sent back from Realex once payment is completed.
 *
 * @see ms_realex_menu()
 */
function ms_realex_callback() {
  ms_core_log('ms_realex', 'New callback received: !post', array('!post' => ms_core_print_r($_POST)));
  $output = "";

  $timestamp = check_plain($_POST['TIMESTAMP']);
  $result = check_plain($_POST['RESULT']);
  $orderid = check_plain($_POST['ORDER_ID']);
  $message = filter_xss($_POST['MESSAGE']);
  $authcode = check_plain($_POST['AUTHCODE']);
  $pasref = check_plain($_POST['PASREF']);
  $realexsha1 = check_plain($_POST['SHA1HASH']);

  // Clean up the junk after the order id.
  list($oid) = explode('-', $orderid);

  if (!$order = ms_core_order_load($oid)) {
    print t('Unable to load the order.');
    exit();
  }

  $merchantid = ms_core_variable_get('ms_realex_merchant_id', '', $order);

  $sha1hash = _ms_realex_sha1hash(array($timestamp, $merchantid, $orderid, $result, $message, $pasref, $authcode), $order);
  // Check to see if hashes match or not.
  if ($sha1hash != $realexsha1) {
    ms_core_log_error('ms_realex', 'Hash match failed.');
    print t("Error: The security hashes didn't match.");
    exit();
  }

  $amount = round((int)check_plain($_POST['AMOUNT']) / 100, 2);

  // Check that the currency and amount match the order.
  if (!ms_core_valid_payment($order, $order->order_type == 'recurring' ? 'rec_signup' : 'cart', $amount)) {
    drupal_set_message(t('There was an error with the payment. Please contact the site administrator.'), 'error');
    ms_core_log_error('ms_realex', 'Possible spoofing attempt. Price mismatch. Ignoring IPN. Order: !order IPN: !ipn',
      array('!order' => ms_core_print_r($order), '!ipn' => ms_core_print_r($_POST)));
    return FALSE;
  }

  if ($result == '00') {
    switch ($order->order_type) {
      case 'recurring':
        $payment = ms_core_new_payment($order->oid, 'ms_realex', 'rec_signup', 0, $order->currency);
        $payment->amount = $amount;
        $payment->transaction = $pasref;
        ms_core_enter_payment($payment);
        break;

      case 'cart':
        $payment = ms_core_new_payment($order->oid, 'ms_realex', 'cart', $amount, $order->currency);
        $payment->transaction = $pasref;
        ms_core_enter_payment($payment);
        break;
    }

    // Save the payment profile now if the values are there.
    if (ms_core_variable_get('ms_realex_use_realvault', TRUE, $order) AND !empty($_REQUEST['REALWALLET_CHOSEN'])) {
      if ($_REQUEST['PAYER_SETUP']) {
        if ($_REQUEST['PMT_SETUP']) {
          // Reload the order to get the user id.
          $order = ms_core_order_load($order->oid);

          // Save a new payent profile for this user.
          $payment_profile = array(
            'oid' => $order->oid,
            'uid' => $order->uid,
            'remote_id' => $_REQUEST['SAVED_PAYER_REF'] . '|' . $_REQUEST['SAVED_PMT_REF'],
            'module' => 'ms_realex',
            'status' => 1,
            'first_name' => '',
            'last_name' => '',
            'address' => '',
            'city' => '',
            'state' => '',
            'zip' => '',
            'country' => '',
            'phone' => '',
            'email' => $order->email_address,
            'fax' => '',
            'cc_type' => $_REQUEST['SAVED_PMT_TYPE'],
            'cc_num' => $_REQUEST['SAVED_PMT_DIGITS'],
            'exp_month' => substr($_REQUEST['SAVED_PMT_EXPDATE'], 0, 2),
            'exp_year' => substr($_REQUEST['SAVED_PMT_EXPDATE'], 2, 2),
          );
          $payment_profile = ms_core_payment_profile_save($payment_profile);

          // Reload the order to save the payment_profile_id
          $order = ms_core_order_load($order->oid);
          $data = array(
            'payment_profile_id' => $payment_profile->id,
          );
          ms_core_add_data($order, $data);
        } else {
          ms_core_log_error('ms_realex', check_plain($_REQUEST['PMT_SETUP_MSG']));
        }
      } else {
        ms_core_log_error('ms_realex', check_plain($_REQUEST['PAYER_SETUP_MSG']));
      }
    }

    $data = array(
      'allow_key_login' => TRUE,
    );
    ms_core_add_data($order, $data);

    $output .= '<h2>' . t('Payment Successful!') . '</h2>';
    $output .= '<h3>' . l(t('Click here to return to @name', array('@name' => variable_get('site_name', 'website'))), 'ms/thankyou/' . $order->order_key, array('absolute' => TRUE)) . '</h3>';
  } else {
    $payment = ms_core_new_payment($order->oid, 'ms_realex', 'pending', $amount, $order->currency);
    $payment->transaction = $pasref;
    ms_core_enter_payment($payment);
    $output .= '<h2>' . t('Payment failed') . '</h2>';
    $output .= '<h3>' . t('Reason provided: ') . $message . '</h3>';
    $output .= '<h3>' . l(t('Click to return to website'), '<front>', array('absolute' => TRUE)) . '</h3>';
  }

  print $output;
  exit();
}

/**
 * Form constructor for the form to POST to Realex.
 *
 * @param MsOrder $order
 *   The order object.
 *
 * @ingroup forms
 */
function ms_realex_redirect_form($form, &$form_state, MsOrder $order) {
  $merchantid = ms_core_variable_get('ms_realex_merchant_id', '', $order);
  $account = ms_core_variable_get('ms_realex_account_id', '', $order);

  $timestamp = strftime('%Y%m%d%H%M%S');

  $orderid = $order->oid . '-' . $account . ms_core_generate_transaction_id();
  $curr = $order->currency;

  // Realex takes the value in cents.
  $amount = round(($order->amount * 100));

  // Generate the hash.
  $sha1hash = _ms_realex_sha1hash(array($timestamp, $merchantid, $orderid, $amount, $curr), $order);

  $data = array(
    'MERCHANT_ID' => $merchantid,
    'ACCOUNT' => $account,
    'ORDER_ID' => $orderid,
    'CURRENCY' => $curr,
    'AMOUNT' => $amount,
    'TIMESTAMP' => $timestamp,
    'SHA1HASH' => $sha1hash,
    'CUST_NUM' => $order->uid,
    'COMMENT1' => $order->title,
    'AUTO_SETTLE_FLAG' => 1,
    'VAR_REF' => check_plain($order->email_address),
  );

  drupal_alter('ms_realex_data', $data, $order);

  if (ms_core_variable_get('ms_realex_use_realvault', TRUE, $order)) {
    // Add the RealVault variables.
    $payerref = $order->order_key . '-' . $account;
    $pmtref = $order->order_key . '-' . $account . '-1';
    $data['OFFER_SAVE_CARD'] = 1;
    $data['PAYER_REF'] = $payerref;
    $data['PMT_REF'] = $pmtref;
    $data['PAYER_EXIST'] = 0;
    //$data['RECURRING_TYPE'] = "variable";
    //$data['RECURRING_SEQUENCE'] = "first";
    // Recalculate the hash.
    $data['SHA1HASH'] = _ms_realex_sha1hash(array($timestamp, $merchantid, $orderid, $amount, $curr, $payerref, $pmtref), $order);
  }

  foreach ($data as $name => $value) {
    $form[$name] = array('#type' => 'hidden', '#value' => $value);
  }

  // Add in the JS
  $js = "
    (function ($) {
    window.setTimeout(function() {
      $('#ms-realex-redirect-form').submit();
    }, 0);
    })(jQuery);
  ";
  drupal_add_js($js, array('type' => 'inline', 'scope' => 'footer'));

  $ajax_img = base_path() . drupal_get_path('module', 'ms_core') . '/images/ajax-bar-loader.gif';

  // Generate some HTML
  $form['instructions'] = array(
    '#type' => 'item',
    '#markup' => "<div class='ajax_loader' style='margin: 15px 0 0;clear:both;width:100%;text-align:center;'><img src='$ajax_img' alt='Loading' /></div>"
      . t("If you are not automatically redirected to the payment page within 5 seconds, click below:"),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#name' => '',
    '#value' => t('Continue to Payment'),
  );
  $form['#action'] = ms_core_variable_get('ms_realex_url', 'https://epage.payandshop.com/epage.cgi', $order);

  return $form;
}

/**
 * Setup a new payment profile.
 *
 * @param array $data
 *   The form data.
 *
 * @return array
 *   An array of results.
 */
function ms_realex_setup_profile($data) {
  require_once 'ms_realex.class.php';
  $return = array();

  $timestamp = strftime('%Y%m%d%H%M%S');

  $merchantid = variable_get('ms_realex_merchant_id', '');
  $orderid = ms_core_generate_order_key() . '-' . variable_get('ms_realex_account_id', '');
  $amount = '';
  $currency = '';
  $firstname = $data['cc_first_name'];
  $lastname = $data['cc_last_name'];
  $payerref = 'p_' . ms_core_generate_order_key() . '_' . variable_get('ms_realex_account_id', '');

  $sha1hash = _ms_realex_sha1hash(array($timestamp, $merchantid, $orderid, $amount, $currency, $payerref));

  $xml = "<request type='payer-new' timestamp='$timestamp'>
  <merchantid>$merchantid</merchantid>
  <orderid>$orderid</orderid>
  <payer type='Business' ref='$payerref'>
    <firstname>$firstname</firstname>
    <surname>$lastname</surname>
  </payer>
  <sha1hash>$sha1hash</sha1hash>
</request>";

  // Parse the response with the class.
  $rr = new RealexRemote(variable_get('ms_realex_api_realex_url', 'https://epage.payandshop.com/epage-remote-plugins.cgi'), $xml);
  $result = $rr->record;

  if ($result['result'][0] == '00') {
    $return['payer_response'] = $result;

    // Now we try to set up a payment method for this payer.
    $orderid .= '_m';
    $cardnumber = $data['cc_number'];
    $cardname = trim($data['cc_first_name']) . ' ' . trim($data['cc_first_name']);
    $cardtype = _ms_realex_card_type($data['cc_type']);

    $expdate = str_pad($data['cc_exp_month'], 2, '0', STR_PAD_LEFT) . substr($data['cc_exp_year'], 2, 2);
    $pmtref = $payerref . '-1';
    $sha1hash = _ms_realex_sha1hash(array($timestamp, $merchantid, $orderid, $amount, $currency, $payerref, $cardname, $cardnumber));

    $xml2 = "<request type='card-new' timestamp='$timestamp'>
<merchantid>$merchantid</merchantid>
<orderid>$orderid</orderid>
<card>
<ref>$pmtref</ref>
<payerref>$payerref</payerref>
<number>$cardnumber</number>
<expdate>$expdate</expdate>
<chname>$cardname</chname>
<type>$cardtype</type>
</card>
<sha1hash>$sha1hash</sha1hash>
</request>";

    // Parse the response with the class.
    $rr2 = new RealexRemote(variable_get('ms_realex_api_realex_url', 'https://epage.payandshop.com/epage-remote-plugins.cgi'), $xml2);
    $result2 = $rr2->record;

    if ($result2['result'][0] == '00') {
      // Success.
      $return['success'] = TRUE;
      $return['payment_response'] = $result2;

      // Set the variables that will be used later.
      $return['SAVED_PAYER_REF'] = $payerref;
      $return['SAVED_PMT_REF'] = $pmtref;
      $return['SAVED_PMT_TYPE'] = $cardtype;
      $return['SAVED_PMT_DIGITS'] = ms_core_mask_cc($cardnumber);
      $return['SAVED_PMT_EXPDATE'] = $expdate;
    } else {
      $return['success'] = FALSE;
      $return['message'] = $result2['message'];
    }
  } else {
    $return['success'] = FALSE;
    $return['message'] = $result['message'];
  }

  return $return;
}

/**
 * Updates an existing payment profile in RealVault.
 *
 * @param object $payment_profile
 *   The payment profile object.
 *
 * @return array
 *   An array with a success field and others.
 */
function ms_realex_update_profile($payment_profile) {
  require_once 'ms_realex.class.php';
  $return = array();

  $timestamp = strftime('%Y%m%d%H%M%S');
  list($payerref, $paymentmethod) = explode('|', $payment_profile->remote_id);
  $merchantid = variable_get('ms_realex_merchant_id', '');
  $cardnumber = $payment_profile->cc_num;
  $cardname = trim($payment_profile->first_name) . ' ' . trim($payment_profile->last_name);
  $cardtype = _ms_realex_card_type($payment_profile->cc_type);
  $expdate = str_pad($payment_profile->exp_month, 2, '0', STR_PAD_LEFT) . substr($payment_profile->exp_year, 2, 2);
  $sha1hash = _ms_realex_sha1hash(array($timestamp, $merchantid, $payerref, $paymentmethod, $expdate, $cardnumber));

  $xml = "<request timestamp='$timestamp' type='card-update-card'>
  <merchantid>$merchantid</merchantid>
  <card>
    <ref>$paymentmethod</ref>
    <payerref>$payerref</payerref>
    <number>$cardnumber</number>
    <expdate>$expdate</expdate>
    <chname>$cardname</chname>
    <type>$cardtype</type>
    <issueno></issueno>
  </card>
  <sha1hash>$sha1hash</sha1hash>
</request>";

  // Parse the response with the class.
  $rr = new RealexRemote(variable_get('ms_realex_api_realex_url', 'https://epage.payandshop.com/epage-remote-plugins.cgi'), $xml);
  $result = $rr->record;

  if ($result['result'][0] == '00') {
    $return['payer_response'] = $result;
    $return['success'] = TRUE;
  } else {
    $return['success'] = FALSE;
    $return['message'] = $result['message'];
  }

  return $return;
}

/**
 * Charges an amount to a saved profile.
 *
 * @param object $payment_profile
 *   The payment profile object.
 * @param float $amount
 *   The amount to charge.
 *
 * @return array
 *   An array with success and other fields.
 */
function ms_realex_charge_saved_profile($payment_profile, $amount, $order) {
  $return = array();
  $result = array();
  if ($amount > 0) {
    require_once 'ms_realex.class.php';

    $amount = round($amount * 100);
    $currency = $order->currency;
    $merchantid = ms_core_variable_get('ms_realex_merchant_id', '', $order);
    $account = ms_core_variable_get('ms_realex_account_id', '', $order);
    $timestamp = strftime('%Y%m%d%H%M%S');
    mt_srand((double)microtime() * 1000000);
    // We append the $account because each order must be unique in their system.
    $orderid = $order->oid . '-' . $account . ms_core_generate_transaction_id();
    list($payerref, $paymentmethod) = explode('|', $payment_profile->remote_id);

    $sha1hash = _ms_realex_sha1hash(array($timestamp, $merchantid, $orderid, $amount, $currency, $payerref), $order);

    $xml = "<request type='receipt-in' timestamp='$timestamp'>
  <merchantid>$merchantid</merchantid>
  <account>$account</account>
  <orderid>$orderid</orderid>
  <amount currency='$currency'>$amount</amount>
  <payerref>$payerref</payerref>
  <paymentmethod>$paymentmethod</paymentmethod>
  <autosettle flag='1' />
  <sha1hash>$sha1hash</sha1hash>
</request>";

    // Parse the response with the class.
    $rr = new RealexRemote(ms_core_variable_get('ms_realex_api_realex_url', 'https://epage.payandshop.com/epage-remote-plugins.cgi', $order), $xml);
    $result = $rr->record;
    // Verify the hash.
    $timestamp = $result['timestamp'];
    $resultcode = $result['result'][0];
    $message = $result['message'];
    $pasref = $result['pasref'];
    $authcode = $result['authcode'];
    $sha1hash = _ms_realex_sha1hash(array($timestamp, $merchantid, $orderid, $resultcode, $message, $pasref, $authcode), $order);

    if ($result['result'][0] == '00') {
      // Check to see if hashes match.
      if ($sha1hash != $result['sha1hash']) {
        ms_core_log_error('ms_realex', 'Hash match failed for order: !order Response: !response',
          array('!order' => ms_core_print_r($order), '!response' => ms_core_print_r($result)));
        $return['success'] = FALSE;
        $return['message'] = t("The security hashes didn't match.");
      } else {
        $return['txn_id'] = $result['pasref'];
        $return['success'] = TRUE;
      }
    } else {
      $return['success'] = FALSE;
      $return['message'] = $result['message'];
    }
  } else {
    // Let's just mark it as successful and generate a transaction id.
    $return['success'] = TRUE;
    $return['txn_id'] = ms_core_generate_transaction_id();
  }

  $return['result'] = $result;

  return $return;
}

/**
 * Generates a sha hash based on the passed in vars.
 */
function _ms_realex_sha1hash($vars, $order = NULL) {
  return sha1(sha1(implode('.', $vars)) . '.' . ms_core_variable_get('ms_realex_secret_key', '', $order));
}

/**
 * Returns the card type in the format expected by Realex.
 *
 * @param string $type
 *   The card type.
 *
 * @return string
 *   The Realex card type.
 */
function _ms_realex_card_type($type) {
  switch ($type) {
    case 'visa':
      return 'VISA';
    case 'mastercard':
    case 'ms':
      return 'MC';
    case 'amex':
      return 'AMEX';
    case 'laser':
      return 'LASER';
    case 'maestro':
    case 'switch':
      return 'SWITCH';
    case 'diners':
      return 'DINERS';
    case 'uatp':
      return 'UATP';
  }

  return $type;
}
