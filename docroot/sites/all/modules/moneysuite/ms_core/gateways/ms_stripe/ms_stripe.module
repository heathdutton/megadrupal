<?php

/**
 * @file
 * This module provides Stripe (http://stripe.com/) payment gateway integration
 * to MS Core. MS Stripe offers a PCI-compliant way to process payments
 * straight from your shop.
 *
 * Original author: Leighton Whiting - Released under GENERAL PUBLIC LICENSE
 * Current maintenance by multiple MoneySuite users.
 * Re: new initiative: https://www.drupal.org/node/2315653 
 */

/**
 * Implements hook_ms_process_recurring_payment().
 */
function ms_stripe_ms_process_recurring_payment($recurring_schedule, $order) {
  // Require needed Stripe library.
  require_once libraries_get_path('stripe-php') . '/lib/Stripe.php';

  Stripe::setApiKey(variable_get('ms_stripe_secret_key', ''));

  module_load_include('inc', 'ms_core', 'ms_core.recurring');
  if ((!empty($order->data['payment_profile_id']) && ($payment_profile = ms_core_payment_profile_load($order->data['payment_profile_id'])))
    || ($payment_profile = ms_core_payment_profile_load_by_oid($order->oid))) {
    try {
      // Load the customer.
      $customer = Stripe_Customer::retrieve($payment_profile->remote_id);
      // Process the payment.
      $response = Stripe_Charge::create(
        array(
          'amount' => ms_stripe_convert_amount($recurring_schedule->main_amount, $order->currency),
          'currency' => strtolower($order->currency),
          'customer' => $customer->id,
          'description' => t('Order Number: @order_number', array('@order_number' => $order->order_number)),
        )
      );

      // Insert the rec_payment Payment to the database.
      $payment = ms_core_new_payment($order->oid, 'ms_stripe', 'rec_payment');

      $payment->transaction = $response->id;
      $payment->amount = $recurring_schedule->main_amount;
      $payment->currency = $order->currency;
      $payment->data = array('response' => $response);

      // Add the Payment to the Order
      return $payment;
    }
    catch (Exception $e) {
      ms_core_log_error('ms_stripe', $e->getMessage());
    }
  }

  return FALSE;
}

/**
 * Converts the amount to the smallest units based on the currency.
 */
function ms_stripe_convert_amount($amount, $currency) {
  switch ($currency) {
    case 'BIF':
    case 'CLP':
    case 'DJF':
    case 'GNF':
    case 'JPY':
    case 'KMF':
    case 'KRW':
    case 'MGA':
    case 'PYG':
    case 'RWF':
    case 'VUV':
    case 'XAF':
    case 'XOF':
    case 'XPF':
      return round($amount);

    default:
      return round($amount * 100);
  }
}

/**
 * Admin Settings Form
 */
function ms_stripe_admin() {
  $form['main'] = array(
    '#type' => 'fieldset',
    '#title' => t('Main Settings'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['main']['ms_stripe_secret_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Secret Key'),
    '#description' => t('Secret API Key. Get your key from https://stripe.com/'),
    '#default_value' => variable_get('ms_stripe_secret_key', ''),
  );
  $form['main']['ms_stripe_public_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Publishable Key'),
    '#description' => t('Publishable API Key. Get your key from https://stripe.com/'),
    '#default_value' => variable_get('ms_stripe_public_key', ''),
  );
  $form['main']['ms_stripe_checkout_method'] = array(
    '#type' => 'radios',
    '#title' => t('Checkout method'),
    '#description' => t('Choose whether to show a form embedded on your site, or the new Stripe Checkout button.'),
    '#options' => array(
      'form' => t('Checkout form'),
      'button' => t('Checkout button'),
    ),
    '#default_value' => variable_get('ms_stripe_checkout_method', 'form'),
  );

  return $form;
}

/**
 * Implements hook_ms_core_payment_gateway().
 */
function ms_stripe_ms_core_payment_gateway() {
  $gateways['ms_stripe'] = array(
    'name' => 'Stripe',
    'display_name' => t('Credit Card'),
    'cards' => variable_get('ms_stripe_allowed_cards', array('visa', 'mc', 'discover', 'amex')),
    'description' => t('Pay by Credit Card'),
    'module' => 'ms_stripe',
    'settings' => ms_stripe_admin(),
    'recurring_schedule_support' => TRUE,
    'saved_cards_support' => TRUE,
    'multi_recurring' => TRUE,
    'checkout_form' => 'ms_stripe_payment_submit_form',
  );

  return $gateways;
}

/**
 * Implements hook_ms_core_billing_info_alter().
 */
function ms_stripe_ms_core_billing_info_alter(&$html, $account) {
  $html['ms_stripe_profile']['add'] = array(
    '#type' => 'markup',
    '#markup' => l(t('Add Card'), 'user/' . $account->uid . '/ms/billing/new/ms_stripe'),
  );
  $payment_profiles = ms_core_payment_profiles_load_by_user($account->uid, 'ms_stripe');
  foreach ($payment_profiles as $payment_profile) {
    $saved_card = (!empty($payment_profile->cc_num)) ? $payment_profile->cc_num : t('N/A');

    $billing_address = t('N/A');
    if ($payment_profile && isset($payment_profile->address)) {
      $billing_address = t("@address - @city , @state", array(
        '@address' => $payment_profile->address,
        '@city' => $payment_profile->city,
        '@state' => $payment_profile->state,
      ));
    }

    $html['ms_stripe_profile'][$payment_profile->id] = array(
      '#type' => 'fieldset',
      '#title' => t('Saved Profile - !edit', array('!edit' => l(t('Edit'), 'user/' . $payment_profile->uid . '/ms/billing/' . $payment_profile->id))),
    );
    $html['ms_stripe_profile'][$payment_profile->id]['card'] = array(
      '#type' => 'item',
      '#title' => t('Saved Card'),
      '#markup' => $saved_card
    );
    $html['ms_stripe_profile'][$payment_profile->id]['billing_address'] = array(
      '#type' => 'item',
      '#title' => t('Billing Address'),
      '#markup' => $billing_address,
    );
  }
}

/**
 * Implements hook_saved_method_checkout().
 */
function ms_stripe_saved_method_checkout($payment_profile, $order, $data) {
  // Require needed Stripe library.
  require_once libraries_get_path('stripe-php') . '/lib/Stripe.php';

  // Set stripe secret key.
  Stripe::setApiKey(variable_get('ms_stripe_secret_key', ''));

  try {
    // Load the customer
    $customer = Stripe_Customer::retrieve($payment_profile->remote_id);

    $payment = ms_stripe_do_customer_payment($customer, $order);

    // Enter the address and things as saved in the payment profile
    $payment->billing_address = array(
      'street' => check_plain($payment_profile->address),
      'city' => check_plain($payment_profile->city),
      'state' => check_plain($payment_profile->state),
      'zip' => check_plain($payment_profile->zip),
      'country' => check_plain($payment_profile->country),
      'phone' => check_plain($payment_profile->phone),
    );
    $payment->first_name = check_plain($payment_profile->first_name);
    $payment->last_name = check_plain($payment_profile->last_name);

    ms_core_enter_payment($payment);

    // Reload the order to save the payment_profile_id.
    $order = ms_core_order_load($order->oid);
    $data = array(
      'payment_profile_id' => $payment_profile->id,
    );
    ms_core_add_data($order, $data);

    return TRUE;
  }
  catch (Exception $e) {
    ms_core_log('ms_stripe', 'Following error received when processing card @stripe_error.', array('@stripe_error' => $e->getMessage()));
    form_set_error('cc_number', t('We received the following error processing your card.
      Please enter your information again or try a different card. @stripe_error',
      array('@stripe_error' => $e->getMessage())));
  }

  return FALSE;
}

/**
 * Build the Checkout Form
 */
function ms_stripe_payment_submit_form($form, $form_state, $order) {
  $form['ms_oid'] = array(
    '#type' => 'value',
    '#value' => $order->oid,
  );

  if (variable_get('ms_stripe_checkout_method', 'form') == 'form') {
    ms_core_get_cc_form($form, $order, variable_get('ms_stripe_allowed_cards', array('visa', 'mc', 'discover', 'amex')));
    ms_core_get_billing_form($form, $order);

    $form['#attributes']['class'] = array('ms_stripe_payment_form');
    $form['#id'] = 'ms-stripe-payment-submit-form';

    $form['billing']['billing_state']['#required'] = FALSE;

    // Include the stripe.js from stripe.com.
    $form['#attached']['js'][] = array(
      'data' => 'https://js.stripe.com/v1/',
      'type' => 'external'
    );

    $form['#attached']['js'][] = array(
      'data' => array('stripe' => array('publicKey' => variable_get('ms_stripe_public_key', ''))),
      'type' => 'setting'
    );

    // Load ms_stripe.js.
    $form['#attached']['js'][] = drupal_get_path('module', 'ms_stripe') . '/ms_stripe.js';

    // To display validation errors.
    $form['errors'] = array(
      '#type' => 'markup',
      '#markup' => '<div class="payment-errors"></div>',
    );

    // To display ajax loader.
    $form['ajax_loader'] = array(
      '#type' => 'markup',
      '#markup' => "<div id='ms_ajax_loader' style='display:none;'><div><img src='/" . drupal_get_path('module', 'ms_core') .'/images/ajax-loader.gif' . "' /></div></div>",
    );

    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Pay Now'),
    );

    $form['#validate'][] = 'ms_core_cc_form_validate';
  }
  else {
    $form['#id'] = 'ms-stripe-payment-submit-form';

    // Include the stripe.js from stripe.com.
    $form['#attached']['js'][] = array(
      'data' => 'https://checkout.stripe.com/checkout.js',
      'type' => 'external'
    );

    $amount = round($order->amount, 2);

    $form['#attached']['js'][] = array(
      'data' => array('stripe' => array(
        'publicKey' => variable_get('ms_stripe_public_key', ''),
        'orderTitle' => $order->title,
        'orderDescription' => '',
        'orderEmail' => $order->email_address,
        'orderTotal' => ms_stripe_convert_amount($amount, $order->currency),
        'orderCurrency' => strtolower($order->currency),
       )),
      'type' => 'setting'
    );
    $form['#attached']['js'][] = drupal_get_path('module', 'ms_stripe') . '/ms_stripe_checkout.js';
    $form['#attached']['css'][] = drupal_get_path('module', 'ms_stripe') . '/ms_stripe.css';

    $form['token_field'] = array(
      '#type' => 'hidden',
      '#attributes' => array(
        'class' => array('ms_stripe_token_field'),
      ),
    );
    $form['payment_button'] = array(
      '#type' => 'markup',
      '#markup' => "<a id='ms_stripe_payment_button' href='#' class='stripe-connect'><span>" . t('Pay with card') . "</span></a>"
    );
  }

  $form['#validate'][] = 'ms_stripe_payment_submit_form_validate';

  return $form;
}

/**
 * Payment method callback: checkout form submission.
 */
function ms_stripe_payment_submit_form_validate($form, &$form_state) {
  $v = $form_state['values'];
  $order = ms_core_order_load($v['ms_oid']);

  // Require needed Stripe library.
  require_once libraries_get_path('stripe-php') . '/lib/Stripe.php';

  // Set stripe secret key.
  Stripe::setApiKey(variable_get('ms_stripe_secret_key', ''));

  $token = '';

  if (isset($_REQUEST['stripeToken'])) {
    $token = $_REQUEST['stripeToken'];
  }
  else if (isset($v['token_field'])) {
    $token = $v['token_field'];
  }

  try {
    // Create a Customer
    $customer = Stripe_Customer::create(array(
      "card" => $token,
      "description" => isset($v['cc_first_name']) ? t("Customer record for @first_name @last_name - @email",
        array(
          '@first_name' => $v['cc_first_name'],
          '@last_name' => $v['cc_last_name'],
          '@email' => $v['billing_email'],
        )
      ) : '',
      "email" => isset($v['billing_email']) ? $v['billing_email'] : $order->email_address,
    ));

    $payment = ms_stripe_do_customer_payment($customer, $order);

    // Update the address
    $payment->billing_address = array(
      'street' => isset($v['billing_address1']) ? check_plain($v['billing_address1']) : '',
      'city' => isset($v['billing_city']) ? check_plain($v['billing_city']) : '',
      'state' => isset($v['billing_state']) ? check_plain($v['billing_state']) : '',
      'zip' => isset($v['billing_zip']) ? check_plain($v['billing_zip']) : '',
      'country' => isset($v['billing_country']) ? check_plain($v['billing_country']) : '',
      'phone' => isset($v['billing_phone']) ? check_plain($v['billing_phone']) : '',
    );

    // Update the contact details
    $payment->first_name = isset($v['cc_first_name']) ? check_plain($v['cc_first_name']) : '';
    $payment->last_name = isset($v['cc_last_name']) ? check_plain($v['cc_last_name']) : '';

    ms_core_enter_payment($payment);

    // Reload the order to get the uid
    $order = ms_core_order_load($order->oid);

    // Save a new payent profile for this user
    $payment_profile = array(
      'oid' => $order->oid,
      'uid' => $order->uid,
      'remote_id' => $customer->id,
      'module' => 'ms_stripe',
      'status' => 1,
      'first_name' => $payment->first_name,
      'last_name' => $payment->last_name,
      'address' => $payment->billing_address['street'],
      'city' => $payment->billing_address['city'],
      'state' => $payment->billing_address['state'],
      'zip' => $payment->billing_address['zip'],
      'country' => $payment->billing_address['country'],
      'phone' => $payment->billing_address['phone'],
      'email' => $order->email_address,
      'fax' => '',
      'cc_type' => isset($v['cc_type']) ? $v['cc_type'] : strtolower($customer->cards->data[0]->type),
      'cc_num' => isset($v['cc_type']) ? $v['cc_number'] : $customer->cards->data[0]->last4,
      'exp_month' => isset($v['cc_type']) ? $v['cc_exp_month'] : $customer->cards->data[0]->exp_month,
      'exp_year' => isset($v['cc_type']) ? $v['cc_exp_year'] : $customer->cards->data[0]->exp_year,
    );
    $payment_profile = ms_core_payment_profile_save($payment_profile);

    // Reload the order to save the payment_profile_id
    $order = ms_core_order_load($order->oid);
    $data = array(
      'payment_profile_id' => $payment_profile->id,
    );
    ms_core_add_data($order, $data);
    drupal_goto('ms/thankyou');
  }
  catch (Exception $e) {
    ms_core_log('ms_stripe', 'Following error received when processing card @stripe_error.', array('@stripe_error' => $e->getMessage()));
    form_set_error('cc_number', t('We received the following error processing your card.
      Please enter your information again or try a different card. @stripe_error',
      array('@stripe_error' => $e->getMessage())));
  }
}

/**
 * The card has been charged, mark the order as completed
 */
function ms_stripe_payment_submit_form_submit($form, &$form_state) {
  $form_state['redirect'] = 'ms/thankyou';
}

// ======================================
// MAIL
// ======================================

/**
 * Implements hook_mail()
 */
function ms_stripe_mail($key, &$message, $seed_vars) {
  $order = $seed_vars['order'];
  switch ($key) {
    case 'billing_error':
      $payment_profile = $seed_vars['payment_profile'];
      $account = user_load($payment_profile->uid);

      $subject = variable_get('ms_stripe_billing_error_subject', '');
      $body = variable_get('ms_stripe_billing_error_body', '');

      // Replace the Tokens
      $message['subject'] = token_replace($subject,
        array(
          'ms_core_order' => $order,
          'ms_core_payment_profile' => $payment_profile,
          'user' => $account,
        ));
      $message['body'][] = token_replace($body,
        array(
          'ms_core_order' => $order,
          'ms_core_payment_profile' => $payment_profile,
          'user' => $account,
        ));
      break;
  }
}

/**
 * Implements hook_ms_core_modification_charge().
 *
 * Charges the amount and approves or denies the modification.
 *
 * @param $amount
 *   The amount that should be charged before approval.
 * @param $order
 *   The $order object.
 *
 * @return bool
 *   TRUE if the amount was charged successfully, FALSE otherwise.
 */
function ms_stripe_ms_core_modification_charge($amount, $order) {
  // Load the payment profile
  if (!empty($order->data['payment_profile_id']) AND $payment_profile = ms_core_payment_profile_load($order->data['payment_profile_id'])) {
    try {
      // Require needed Stripe library.
      require_once libraries_get_path('stripe-php') . '/lib/Stripe.php';

      // Set stripe secret key.
      Stripe::setApiKey(variable_get('ms_stripe_secret_key', ''));

      // Try to charge the payment
      $customer = Stripe_Customer::retrieve($payment_profile->remote_id);
      Stripe_Charge::create(
        array(
          'amount' => ms_stripe_convert_amount($amount, $order->currency),
          'currency' => strtolower($order->currency),
          'customer' => $customer->id,
          'description' => t('Modification - Order Number: @order_number', array('@order_number' => $order->order_number)),
        )
      );
      return TRUE;
    }
    catch (Exception $e) {
      drupal_set_message(t('We received the following error processing your card. Please enter your information again or try a different card.'), 'error');
      drupal_set_message(check_plain($e->getMessage()), 'error');
      ms_core_log('ms_stripe', 'Following error received when processing card @stripe_error.', array('@stripe_error' => $e->getMessage()));
      return FALSE;
    }
  }
  else {
    drupal_set_message(t('The payment profile for this order was not able to be loaded.'), 'error');
    return FALSE;
  }
}

/**
 * Form validation handler for ms_core_payment_profile_edit_form().
 *
 * Saves a payment profile card for a user.
 */
function ms_stripe_payment_profile_edit_form_validate($form, &$form_state) {
  $v = $form_state['values'];

  try {
    // Require needed Stripe library.
    require_once libraries_get_path('stripe-php') . '/lib/Stripe.php';

    // Set stripe secret key.
    Stripe::setApiKey(variable_get('ms_stripe_secret_key', ''));

    if (isset($v['profile_id'])) {
      $payment_profile = ms_core_payment_profile_load($v['profile_id']);
      // Merge in the form values with the object
      $payment_profile = (object) array_merge((array) $payment_profile, $v);

      $customer = Stripe_Customer::retrieve($payment_profile->remote_id);
      $customer->card = array(
        'number' => $payment_profile->cc_num,
        'exp_month' => $payment_profile->exp_month,
        'exp_year' => $payment_profile->exp_year,
        'cvc' => $payment_profile->cc_cvv,
        'name' => $payment_profile->first_name . ' ' . $payment_profile->last_name,
        'address_line1' => $payment_profile->address,
        'address_zip' => $payment_profile->zip,
        'address_state' => $payment_profile->state,
        'address_country' => $payment_profile->country,
      );
      $customer->email = $payment_profile->email;
      $customer->save();
    }
    else {
      $payment_profile = (object) $v;

      $customer = Stripe_Customer::create(array(
        "description" => t("Customer record for @first_name @last_name - @email",
          array(
            '@first_name' => $payment_profile->first_name,
            '@last_name' => $payment_profile->last_name,
            '@email' => $payment_profile->email,
          )
        ),
        "card" => array(
          'number' => $payment_profile->cc_num,
          'exp_month' => $payment_profile->exp_month,
          'exp_year' => $payment_profile->exp_year,
          'cvc' => $payment_profile->cc_cvv,
          'name' => $payment_profile->first_name . ' ' . $payment_profile->last_name,
          'address_line1' => $payment_profile->address,
          'address_zip' => $payment_profile->zip,
          'address_state' => $payment_profile->state,
          'address_country' => $payment_profile->country,
        ),
        'email' => $payment_profile->email,
      ));
    }

    $payment_profile->remote_id = $customer->id;
    $payment_profile->module = 'ms_stripe';

    // Update the payment profile
    ms_core_payment_profile_save($payment_profile);

    // Set a message
    drupal_set_message(t('Your Billing Information has been successfully updated.'));
    // Redirect to the correct page
    $form_state['redirect'] = 'user/' . $v['uid'] . '/billing-info';
  }
  catch (Exception $e) {
    form_set_error('cc_number', t('Error: @details',
      array('@details' => $e->getMessage())));
  }
}

/**
 * Processes a payment for an order and a customer.
 *
 * @param $customer
 *   The Stripe customer object.
 * @param $order
 *   The MsOrder object.
 *
 * @return bool|MsPayment
 *   The MsPayment object or false.
 */
function ms_stripe_do_customer_payment($customer, $order) {
  // Require needed Stripe library.
  require_once libraries_get_path('stripe-php') . '/lib/Stripe.php';

  // Set stripe secret key.
  Stripe::setApiKey(variable_get('ms_stripe_secret_key', ''));

  try {
    $amount = round($order->amount, 2);
    $payment = ms_core_new_payment($order->oid, 'ms_stripe', $order->order_type == 'cart' ? 'cart' : 'rec_signup', $amount, $order->currency);
    $payment->recurring_id = $order->oid;

    if ($amount > 0) {
      // Give other modules a chance to handle the charge.
      $modules = module_implements('ms_stripe_charge_handler');
      $response = FALSE;
      foreach ($modules as $module) {
        $response = module_invoke($module, 'ms_stripe_charge_handler', $amount, $order, $customer);
        if ($response) {
          break;
        }
      }
      if (!$response) {
        $response = Stripe_Charge::create(
          array(
            'amount' => ms_stripe_convert_amount($amount, $order->currency),
            'currency' => strtolower($order->currency),
            'customer' => $customer->id,
            'description' => t('Order Number: @order_number', array('@order_number' => $order->order_number)),
          )
        );
      }

      $payment->transaction = $response->id;
      $payment->data = array('response' => $response);
    }
    else {
      $payment->transaction = ms_core_generate_transaction_id(10);
    }

    return $payment;
  }
  catch (Exception $e) {
    ms_core_log('ms_stripe', 'Following error received when processing card @stripe_error.', array('@stripe_error' => $e->getMessage()));
    form_set_error('cc_number', t('We received the following error processing your card.
      Please enter your information again or try a different card. @stripe_error',
      array('@stripe_error' => $e->getMessage())));
  }

  return FALSE;
}
