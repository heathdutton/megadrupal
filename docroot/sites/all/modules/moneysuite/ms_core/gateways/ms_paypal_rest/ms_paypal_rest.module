<?php

/**
 * @file
 * This module provides PayPal REST API payment gateway integration
 * to MS Core.
 *
 * Original author: Leighton Whiting - Released under GENERAL PUBLIC LICENSE
 * Current maintenance by multiple MoneySuite users.
 * Re: new initiative: https://www.drupal.org/node/2315653 
 */

use PayPal\Rest\ApiContext;
use PayPal\Auth\OAuthTokenCredential;
use PayPal\Api\Amount;
use PayPal\Api\Address;
use PayPal\Api\CreditCard;
use PayPal\Api\CreditCardToken;
use PayPal\Api\FundingInstrument;
use PayPal\Api\Payer;
use PayPal\Api\Payment;
use PayPal\Api\Transaction;

/**
 * Implements hook_libraries_info().
 */
function ms_paypal_rest_libraries_info() {
  return array(
    'paypal-rest-api-sdk' => array(
      'name' => 'PayPal Rest API SDK',
      'path' => 'lib',
      'xautoload' => function($api) {
        $api->namespaceRoot('XALib\PayPal');
      },
    ),
  );
}

/**
 * Implements hook_ms_process_recurring_payment().
 */
function ms_paypal_rest_ms_process_recurring_payment($recurring_schedule, $order) {
  require_once libraries_get_path('rest-api-sdk-php') . '/vendor/autoload.php';
  $apiContext = new ApiContext(new OAuthTokenCredential(variable_get('ms_paypal_rest_client_id', ''), variable_get('ms_paypal_rest_secret_key', '')));
  $apiContext->setConfig(array('mode' => variable_get('ms_paypal_rest_server', 'sandbox')));

  if ($payment_profile = ms_core_payment_profile_load($order->data['payment_profile_id'])) {
    try {
      $creditCardToken = new CreditCardToken();
      $creditCardToken->setCreditCardId($payment_profile->remote_id);

      $fi = new FundingInstrument();
      /** @noinspection PhpParamsInspection */
      $fi->setCreditCardToken($creditCardToken);

      $payer = new Payer();
      $payer->setPaymentMethod('credit_card');
      /** @noinspection PhpParamsInspection */
      $payer->setFundingInstruments(array($fi));

      // Process the payment.
      $amount_obj = new Amount();
      $amount_obj->setCurrency($order->currency);
      $amount_obj->setTotal($recurring_schedule->main_amount);

      $transaction = new Transaction();
      /** @noinspection PhpParamsInspection */
      $transaction->setAmount($amount_obj);
      $transaction->setDescription($order->title);

      $PayPalPayment = new Payment();
      $PayPalPayment->setIntent('sale');
      /** @noinspection PhpParamsInspection */
      $PayPalPayment->setPayer($payer);
      $PayPalPayment->setTransactions(array($transaction));

      $PayPalPayment->create($apiContext);

      // Insert the rec_payment Payment to the database.
      $payment = ms_core_new_payment($order->oid, 'ms_paypal_rest', 'rec_payment');

      $payment->amount = $recurring_schedule->main_amount;
      $payment->currency = $order->currency;
      $payment->transaction = $PayPalPayment->id;

      // Add the Payment to the Order
      return $payment;
    }
    catch (Exception $e) {
      ms_core_log_error('ms_paypal_rest', $e->getMessage());
    }
  }

  return FALSE;
}

/**
 * Gets the payment gateway settings form elements.
 */
function ms_paypal_rest_settings() {
  $form['main'] = array(
    '#type' => 'fieldset',
    '#title' => t('Main Settings'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );

  $form['main']['ms_paypal_rest_client_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Client ID'),
    '#description' => t('Get yours from https://developer.paypal.com'),
    '#default_value' => variable_get('ms_paypal_rest_client_id', ''),
    '#ms_override' => TRUE,
  );
  $form['main']['ms_paypal_rest_secret_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Secret Key'),
    '#description' => t('Get yours from https://developer.paypal.com'),
    '#default_value' => variable_get('ms_paypal_rest_secret_key', ''),
    '#ms_override' => TRUE,
  );
  $form['main']['ms_paypal_rest_server'] = array(
    '#type' => 'select',
    '#title' => t('Server'),
    '#options' => array(
      'sandbox' => t('Sandbox'),
      'live' => t('Live'),
    ),
    '#default_value' => variable_get('ms_paypal_rest_server', 'sandbox'),
    '#ms_override' => TRUE,
  );

  return $form;
}

/**
 * Implements hook_ms_core_payment_gateway().
 */
function ms_paypal_rest_ms_core_payment_gateway() {
  $gateways['ms_paypal_rest'] = array(
    'name' => 'PayPal REST API',
    'display_name' => t('Credit Card'),
    'cards' => array('visa', 'mc', 'discover', 'amex'),
    'description' => t('Pay by Credit Card'),
    'module' => 'ms_paypal_rest',
    'currency' => array(),
    'recurring_schedule_support' => TRUE,
    'saved_cards_support' => TRUE,
    'checkout_form' => 'ms_paypal_rest_payment_submit_form',
    'settings' => ms_paypal_rest_settings(),
  );

  return $gateways;
}

/**
 * Implements hook_saved_method_checkout().
 */
function ms_paypal_rest_saved_method_checkout($payment_profile, $order, $data) {
  require_once libraries_get_path('rest-api-sdk-php') . '/vendor/autoload.php';
  $apiContext = new ApiContext(new OAuthTokenCredential(variable_get('ms_paypal_rest_client_id', ''), variable_get('ms_paypal_rest_secret_key', '')));
  $apiContext->setConfig(array('mode' => variable_get('ms_paypal_rest_server', 'sandbox')));

  try {
    $creditCardToken = new CreditCardToken();
    $creditCardToken->setCreditCardId($payment_profile->remote_id);

    $fi = new FundingInstrument();
    /** @noinspection PhpParamsInspection */
    $fi->setCreditCardToken($creditCardToken);

    $payer = new Payer();
    $payer->setPaymentMethod('credit_card');
    /** @noinspection PhpParamsInspection */
    $payer->setFundingInstruments(array($fi));

    // If there is a trial period, then we charge the trial amount
    if ($order->order_type == 'recurring') {
      if ($order->recurring_schedule['has_trial']) {
        $amount = round($order->recurring_schedule['trial_amount'], 2);
      }
      else {
        $amount = round($order->recurring_schedule['main_amount'], 2);
      }
    }
    else {
      $amount = round($order->amount, 2);
    }

    $payment = ms_core_new_payment($order->oid, 'ms_paypal_rest', 'cart');
    $payment->currency = $order->currency;
    $payment->recurring_id = $order->oid;

    if ($amount > 0) {
      $amount_obj = new Amount();
      $amount_obj->setCurrency($order->currency);
      $amount_obj->setTotal($amount);

      $transaction = new Transaction();
      /** @noinspection PhpParamsInspection */
      $transaction->setAmount($amount_obj);
      $transaction->setDescription($order->title);

      $PayPalPayment = new Payment();
      $PayPalPayment->setIntent('sale');
      /** @noinspection PhpParamsInspection */
      $PayPalPayment->setPayer($payer);
      $PayPalPayment->setTransactions(array($transaction));

      $PayPalPayment->create($apiContext);

      $payment->transaction = $PayPalPayment->id;
    }
    else {
      $payment->transaction = ms_core_generate_transaction_id(10);
    }

    // Enter the address and things as saved in the payment profile
    $payment->billing_address = array(
      'street' => check_plain($payment_profile->address),
      'city' => check_plain($payment_profile->city),
      'state' => check_plain($payment_profile->state),
      'zip' => check_plain($payment_profile->zip),
      'country' => check_plain($payment_profile->country),
      'phone' => check_plain($payment_profile->phone),
    );
    $payment->first_name = check_plain($payment_profile->first_name);
    $payment->last_name = check_plain($payment_profile->last_name);

    switch ($order->order_type) {
      case 'recurring':
        $payment->type = 'rec_signup';
        $payment->amount = $amount;
        ms_core_enter_payment($payment);
        break;

      case 'cart':
        $payment->amount = $amount;
        ms_core_enter_payment($payment);
        break;
    }

    // Reload the order to save the payment_profile_id
    $order = ms_core_order_load($order->oid);
    $data = array(
      'payment_profile_id' => $payment_profile->id,
    );
    ms_core_add_data($order, $data);

    return TRUE;
  }
  catch (Exception $e) {
    ms_core_log('ms_paypal_rest', 'Following error received when processing card @stripe_error.', array('@stripe_error' => $e->getMessage()));
    form_set_error('cc_number', t('We received the following error processing your card.
      Please enter your information again or try a different card. @stripe_error',
      array('@stripe_error' => $e->getMessage())));
  }

  return FALSE;
}

/**
 * Form constructor for the payment form.
 *
 * @param MsOrder $order
 *   The order object.
 *
 * @return
 * @ingroup forms
 * @see ms_paypal_rest_payment_submit_form_validate()
 * @see ms_paypal_rest_payment_submit_form_submit()
 */
function ms_paypal_rest_payment_submit_form($form, &$form_state, $order) {
  ms_core_get_cc_form($form, $order, array('visa', 'mc', 'discover', 'amex'));
  ms_core_get_billing_form($form, $order);

  $form['billing']['billing_state']['#required'] = FALSE;

  $form['ms_oid'] = array(
    '#type' => 'value',
    '#value' => $order->oid,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Pay Now'),
  );

  $form['#validate'][] = 'ms_core_cc_form_validate';
  $form['#validate'][] = 'ms_paypal_rest_payment_submit_form_validate';

  return $form;
}

/**
 * Form validation handler for ms_paypal_rest_payment_submit_form().
 *
 * @see ms_paypal_rest_payment_submit_form_submit()
 */
function ms_paypal_rest_payment_submit_form_validate($form, &$form_state) {
  $v = $form_state['values'];
  $order = ms_core_order_load($v['ms_oid']);

  try {
    require_once libraries_get_path('rest-api-sdk-php') . '/vendor/autoload.php';
    $apiContext = new ApiContext(new OAuthTokenCredential(variable_get('ms_paypal_rest_client_id', ''), variable_get('ms_paypal_rest_secret_key', '')));
    $apiContext->setConfig(array('mode' => variable_get('ms_paypal_rest_server', 'sandbox')));

    $addr = new Address();
    $addr->setLine1(check_plain($v['billing_address1']));
    $addr->setCity(check_plain($v['billing_city']));
    $addr->setCountryCode(check_plain($v['billing_country']));
    $addr->setPostalCode(check_plain($v['billing_zip']));
    $addr->setState(check_plain($v['billing_state']));

    $card = new CreditCard();
    $card->setNumber(check_plain($v['cc_number']));
    $card->setType(check_plain($v['cc_type']));
    $card->setExpireMonth(check_plain($v['cc_exp_month']));
    $card->setExpireYear(check_plain($v['cc_exp_year']));
    $card->setCvv2(check_plain($v['cc_cvv']));
    $card->setFirstName(check_plain($v['cc_first_name']));
    $card->setLastName(check_plain($v['cc_last_name']));
    /** @noinspection PhpParamsInspection */
    $card->setBillingAddress($addr);
    $card->create($apiContext);

    $creditCardToken = new CreditCardToken();
    $creditCardToken->setCreditCardId($card->id);

    $fi = new FundingInstrument();
    /** @noinspection PhpParamsInspection */
    $fi->setCreditCardToken($creditCardToken);

    $payer = new Payer();
    $payer->setPaymentMethod('credit_card');
    /** @noinspection PhpParamsInspection */
    $payer->setFundingInstruments(array($fi));

    // If there is a trial period, then we charge the trial amount
    if ($order->order_type == 'recurring') {
      if ($order->recurring_schedule['has_trial']) {
        $amount = round($order->recurring_schedule['trial_amount'], 2);
      }
      else {
        $amount = round($order->recurring_schedule['main_amount'], 2);
      }
    }
    else {
      $amount = round($order->amount, 2);
    }

    $payment = ms_core_new_payment($order->oid, 'ms_paypal_rest', 'cart');
    $payment->currency = $order->currency;
    $payment->recurring_id = $order->oid;
    // Update the address
    $payment->billing_address = array(
      'street' => check_plain($v['billing_address1']),
      'city' => check_plain($v['billing_city']),
      'state' => check_plain($v['billing_state']),
      'zip' => check_plain($v['billing_zip']),
      'country' => check_plain($v['billing_country']),
      'phone' => check_plain($v['billing_phone']),
    );

    // Update the contact details
    $payment->first_name = check_plain($v['cc_first_name']);
    $payment->last_name = check_plain($v['cc_last_name']);

    if ($amount > 0) {
      $amount_obj = new Amount();
      $amount_obj->setCurrency($order->currency);
      $amount_obj->setTotal($amount);

      $transaction = new Transaction();
      /** @noinspection PhpParamsInspection */
      $transaction->setAmount($amount_obj);
      $transaction->setDescription($order->title);

      $PayPalPayment = new Payment();
      $PayPalPayment->setIntent('sale');
      /** @noinspection PhpParamsInspection */
      $PayPalPayment->setPayer($payer);
      $PayPalPayment->setTransactions(array($transaction));

      $PayPalPayment->create($apiContext);

      $payment->transaction = $PayPalPayment->id;
    }
    else {
      $payment->transaction = ms_core_generate_transaction_id(10);
    }

    switch ($order->order_type) {
      case 'recurring':
        $payment->type = 'rec_signup';
        $payment->amount = $amount;
        ms_core_enter_payment($payment);
        break;

      case 'cart':
        $payment->amount = $amount;
        ms_core_enter_payment($payment);
        break;
    }

    // Reload the order to get the uid
    $order = ms_core_order_load($order->oid);

    // Save a new payent profile for this user
    $payment_profile = array(
      'oid' => $order->oid,
      'uid' => $order->uid,
      'remote_id' => $card->id,
      'module' => 'ms_paypal_rest',
      'status' => 1,
      'first_name' => $v['cc_first_name'],
      'last_name' => $v['cc_last_name'],
      'address' => $v['billing_address1'],
      'city' => $v['billing_city'],
      'state' => $v['billing_state'],
      'zip' => $v['billing_zip'],
      'country' => $v['billing_country'],
      'phone' => $v['billing_phone'],
      'email' => $v['billing_email'],
      'fax' => '',
      'cc_type' => $v['cc_type'],
      'cc_num' => $v['cc_number'],
      'exp_month' => $v['cc_exp_month'],
      'exp_year' => $v['cc_exp_year'],
    );
    $payment_profile = ms_core_payment_profile_save($payment_profile);

    // Reload the order to save the payment_profile_id
    $order = ms_core_order_load($order->oid);
    $data = array(
      'payment_profile_id' => $payment_profile->id,
    );
    ms_core_add_data($order, $data);
    drupal_goto('ms/thankyou');
  }
  catch (Exception $e) {
    ms_core_log('ms_paypal_rest', 'Following error received when processing card @error.', array('@error' => $e->getMessage()));
    form_set_error('cc_number', t('We received the following error processing your card.
      Please enter your information again or try a different card. @error',
      array('@error' => $e->getMessage())));
  }
}

/**
 * Form submission handler for ms_paypal_rest_payment_submit_form().
 *
 * @see ms_paypal_rest_payment_submit_form_validate()
 */
function ms_paypal_rest_payment_submit_form_submit($form, &$form_state) {
  $form_state['redirect'] = 'ms/thankyou';
}

/**
 * Implements hook_ms_core_modification_charge().
 *
 * Charges the amount and approves or denies the modification.
 *
 * @param $amount
 *   The amount that should be charged before approval
 * @param $order
 *   The $order object
 *
 * @return bool
 *   TRUE if the amount was charged successfully, FALSE otherwise
 */
function ms_paypal_rest_ms_core_modification_charge($amount, $order) {
  // Load the payment profile
  if (!empty($order->data['payment_profile_id']) AND $payment_profile = ms_core_payment_profile_load($order->data['payment_profile_id'])) {
    try {
      require_once libraries_get_path('rest-api-sdk-php') . '/vendor/autoload.php';
      $apiContext = new ApiContext(new OAuthTokenCredential(variable_get('ms_paypal_rest_client_id', ''), variable_get('ms_paypal_rest_secret_key', '')));
      $apiContext->setConfig(array('mode' => variable_get('ms_paypal_rest_server', 'sandbox')));

      $creditCardToken = new CreditCardToken();
      $creditCardToken->setCreditCardId($payment_profile->remote_id);

      $fi = new FundingInstrument();
      /** @noinspection PhpParamsInspection */
      $fi->setCreditCardToken($creditCardToken);

      $payer = new Payer();
      $payer->setPaymentMethod('credit_card');
      /** @noinspection PhpParamsInspection */
      $payer->setFundingInstruments(array($fi));

      // Try to charge the payment
      $amount_obj = new Amount();
      $amount_obj->setCurrency($order->currency);
      $amount_obj->setTotal($amount);

      $transaction = new Transaction();
      /** @noinspection PhpParamsInspection */
      $transaction->setAmount($amount_obj);
      $transaction->setDescription($order->title);

      $PayPalPayment = new Payment();
      $PayPalPayment->setIntent('sale');
      /** @noinspection PhpParamsInspection */
      $PayPalPayment->setPayer($payer);
      $PayPalPayment->setTransactions(array($transaction));

      $PayPalPayment->create($apiContext);

      return TRUE;
    }
    catch (Exception $e) {
      drupal_set_message(t('We received the following error processing your card. Please enter your information again or try a different card.'), 'error');
      drupal_set_message(check_plain($e->getMessage()), 'error');
      ms_core_log('ms_paypal_rest', 'Following error received when processing card @stripe_error.', array('@stripe_error' => $e->getMessage()));
      return FALSE;
    }
  }
  else {
    drupal_set_message(t('The payment profile for this order was not able to be loaded.'), 'error');
    return FALSE;
  }
}
