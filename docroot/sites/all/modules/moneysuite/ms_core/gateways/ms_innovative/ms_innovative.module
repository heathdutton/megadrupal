<?php

/**
 * @file
 * MoneySuite Innovative Gateway Module
 *
 * Original author: Leighton Whiting - Released under GENERAL PUBLIC LICENSE
 * Current maintenance by multiple MoneySuite users.
 * Re: new initiative: https://www.drupal.org/node/2315653 
 * Based on a module for Ubercart created by Bobby Alcorn
 */

/**
 * Implements hook_help().
 */
function ms_innovative_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/moneysuite/gateways/ms_innovative":
    case "admin/help#ms_innovative":
      $output = '<p>' . t("Innovative Gateway Module for MoneySuite. This allows you to recieve payments
      using your Innovative Gateway account. This gateway supports Non-Recurring Orders only, so you won't
      be able to use this gateway to process Recurring Orders.") . '</p>';
      break;
  }
  return $output;
}

/**
 * Implements hook_menu().
 */
function ms_innovative_menu() {
  $items = array();
  $items['ms/checkout/innovative'] = array(
    'title' => 'Checkout',
    'page callback' => 'ms_innovative_checkout',
    'access callback' => 'ms_core_view_page_access_test',
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );
  $items['ms_innovative/thank-you'] = array(
    'title' => 'Thank You',
    'page callback' => 'ms_innovative_thankyou_page',
    'access callback' => 'ms_core_view_page_access_test',
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );

  return $items;
}

/**
 * Admin Settings Form
 */
function ms_innovative_admin() {
  $form['main'] = array(
    '#type' => 'fieldset',
    '#title' => t('Main Settings'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['advanced'] = array(
    '#type' => 'fieldset',
    '#title' => t('Advanced Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  // -----------------------------
  // Main Settings
  // -----------------------------
  $form['main']['ms_innovative_login_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Login ID'),
    '#default_value' => variable_get('ms_innovative_login_id', ''),
    '#description' => t('The login username used for the Innovative Gateway service.'),
  );
  $form['main']['ms_innovative_password'] = array(
    '#type' => 'textfield',
    '#title' => t('Password'),
    '#default_value' => variable_get('ms_innovative_password', ''),
    '#description' => t('Your password for the Innovative Gateway service.'),
  );
  $form['main']['ms_innovative_customer_notification'] = array(
    '#type' => 'select',
    '#title' => t('Customer notifications'),
    '#description' => t('Should Innovative Gateway e-mail a receipt to the customer?'),
    '#options' => array(
      'yes' => t('Enabled'),
      'no' => t('Disabled'),
    ),
    '#default_value' => variable_get('ms_innovative_customer_notification', 'False'),
  );
  $form['main']['ms_innovative_merchant_notification'] = array(
    '#type' => 'select',
    '#title' => t('Merchant Notifications'),
    '#description' => t('Should Innovative Gateway e-mail a receipt to the merchant?'),
    '#options' => array(
      'yes' => t('Enabled'),
      'no' => t('Disabled'),
    ),
    '#default_value' => variable_get('ms_innovative_merchant_notification', 'False'),
  );

  // -----------------------------
  // Advanced Settings
  // -----------------------------
  $form['advanced']['ms_innovative_delimiter'] = array(
    '#type' => 'textfield',
    '#title' => t('Response delimiter'),
    '#description' => t('If your Auth.net responses are being processed properly, do not adjust this value.'),
    '#size' => 5,
    '#maxlength' => 1,
    '#default_value' => variable_get('ms_innovative_delimiter', '&'),
  );
  $form['advanced']['ms_innovative_transaction_mode'] = array(
    '#type' => 'select',
    '#title' => t('Transaction mode'),
    '#description' => t('Transaction mode used for processing orders.'),
    '#options' => array(
      'production' => t('Production'),
      'test' => t('Test'),
    ),
    '#default_value' => variable_get('ms_innovative_transaction_mode', 'test'),
  );
  $form['advanced']['ms_innovative_transaction_type'] = array(
    '#type' => 'select',
    '#title' => t('Transaction type'),
    '#description' => t('Choosing <em>Capture</em> will authorize and capture funds at the same time.'),
    '#options' => array(
      'capture' => t('Capture'),
      'authorization' => t('Authorization'),
    ),
    '#default_value' => variable_get('ms_innovative_transaction_type', 'capture'),
  );

  return $form;
}

/**
 * Implements hook_ms_core_payment_gateway().
 */
function ms_innovative_ms_core_payment_gateway() {
  $gateway['ms_innovative'] = array(
    'name' => 'Innovative Gateway',
    'display_name' => t('Credit Card'),
    'description' => t('Pay with a credit card.'),
    'cards' => array('visa', 'mc', 'amex', 'discover'),
    'module' => 'ms_innovative',
    'checkout_path' => 'ms/checkout/innovative',
    'recurring' => FALSE,
    'settings' => ms_innovative_admin(),
  );

  return $gateway;
}

/**
 * Return the vars to use for an order
 * These settings would normally be from the Settings page in the Admin area,
 * but they can also be overridden by a product in an order, so we will first
 * check if the settings are being overridden, and if they are, we will use
 * the overridden settings.
 */
function ms_innovative_get_vars($order) {
  $vars = array(
    'business' => ms_core_variable_get('ms_innovative_email', '', $order),
    'use_sandbox' => ms_core_variable_get('ms_innovative_use_sandbox', FALSE, $order),
    'no_shipping' => ms_core_variable_get('ms_innovative_no_shipping', 1, $order),
    'return' => 'ms_innovative/thank-you',
    'cancel_return' => ms_core_variable_get('ms_innovative_cancel_return', '', $order),
    'notify_url' => ms_core_variable_get('ms_innovative_notify_url', 'paypal/backend', $order),
    'page_style' => ms_core_variable_get('ms_innovative_page_style', '', $order),
    'currency_code' => ms_core_variable_get('ms_core_default_currency', 'USD', $order),
    'lc' => ms_core_variable_get('ms_innovative_lc', 'US', $order),
    'no_note' => ms_core_variable_get('ms_innovative_no_note', 1, $order),
    'rm' => ms_core_variable_get('ms_innovative_rm', 2, $order),
    'sra' => ms_core_variable_get('ms_innovative_sra', FALSE, $order),
  );

  return $vars;
}

/**
 * Make a form to show on the checkout page, to collect the CC and Address Info
 * Then in the submit function, submit the info to the payment gateway. If it is successful, then go to thankyou page
 */
function ms_innovative_checkout() {
  // Stop the caching
  $GLOBALS['conf']['cache'] = FALSE;

  // Get the Form
  return drupal_get_form('ms_innovative_checkout_form');
}

/**
 * Build the Checkout Form
 */
function ms_innovative_checkout_form($form, &$form_state) {
  if (!$order = ms_core_load_session_order()) {
    // Error
    return t('There was an error with the checkout');
  }

  $cards = array(
    'visa' => 'Visa',
    'mc' => 'MasterCard',
    'amex' => 'American Express',
    'discover' => 'Discover',
  );

  $allowed_cards = ms_core_get_cards($cards, $cards);

  ms_core_get_cc_form($form, $order, $allowed_cards);

  ms_core_get_billing_form($form, $order);

  $form['ms_oid'] = array(
    '#type' => 'value',
    '#value' => $order->oid,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Pay Now'),
  );
  return $form;
}

/**
 * Validate the Checkout Form, and Try to Charge the Card
 */
function ms_innovative_checkout_form_validate($form, &$form_state) {
  $form_values = $form_state['values'];

  $order = ms_core_order_load($form_values['ms_oid']);

  $response = ms_innovative_charge_card($order, $form_values);

  if ($response['approved'] == TRUE) {
    // The credit card was approved
    $form_state['values']['ms_oid'] = $order->oid;
    $form_state['values']['ms_order_charged'] = TRUE;

    // Insert the Payment to the database
    $payment = ms_core_new_payment($order->oid, 'ms_innovative', 'cart');
    $payment->transaction = $response['values']['anatransid'];
    $payment->amount = $response['values']['fulltotal'];
    $payment->currency = 'USD';
    $payment->data = $response['values'];

    // Update the address
    $payment->billing_address = array(
      'street' => $form_values['billing_address1'] . '\n' . $form_values['billing_address2'],
      'city' => $form_values['billing_city'],
      'state' => $form_values['billing_state'],
      'zip' => $form_values['billing_zip'],
      'country' => $form_values['billing_country'],
      'phone' => $form_values['billing_phone'],
    );
    // Update the contact details
    $payment->first_name = $form_values['cc_first_name'];
    $payment->last_name = $form_values['cc_last_name'];

    // Add the Payment to the Order
    ms_core_enter_payment($payment);
  } else { // The Credit Card was not approved, set an error on the form
    if (stristr($response['values']['error'], 'error code 2001')) {
      form_set_error('month', t('The credit card expiration date is invalid.'));
    }
    if (stristr($response['values']['error'], 'error code 3050')) {
      form_set_error('ccnumber', t('The credit card number you have entered does not appear to be a valid number. Please check the card number carefully.'));
    } else {
      form_set_error('ccnumber', t('Error') . ': ' . $response['values']['error']);
    }
  }
}

/**
 * The card has been charged, mark the order as completed
 */
function ms_innovative_checkout_form_submit($form, &$form_state) {
  $v = $form_state['values'];

  // If the Order was charged, complete it
  if ($v['ms_order_charged']) {
    $order = ms_core_order_load($v['ms_oid']);
    $order->status = 'Completed';
    ms_core_order_save($order);
    drupal_goto('ms/thankyou');
  } else {
    // There was an error...
  }
}

/**
 * Helper function to charge the card
 */
function ms_innovative_charge_card($order, $form) {
  $submit_data = array(
    'target_app' => 'WebCharge_v5.06',
    'response_mode' => 'simple',
    'response_fmt' => 'delimited',
    'upg_auth' => 'zxcvlkjh',
    'delimited_fmt_field_delimiter' => '=',
    'delimited_fmt_include_fields' => 'true',
    'delimited_fmt_value_delimiter' => variable_get('ms_innovative_delimiter', '&'),
    'username' => variable_get('ms_innovative_login_id', ''),
    'pw' => variable_get('ms_innovative_password', ''),
    'trantype' => 'sale',
    'cardtype' => $form['cc_type'],
    'ccnumber' => $form['cc_number'],
    'ccidentifier1' => $form['cc_cvv'],
    'month' => $form['cc_exp_month'],
    'year' => $form['cc_exp_year'],
    'fulltotal' => $order->amount,
    'ccname' => $form['cc_first_name'] . ' ' . $form['cc_last_name'],
    'baddress' => $form['billing_address1'],
    'baddress1' => $form['billing_address2'],
    'bcity' => $form['billing_city'],
    'bstate' => $form['billing_state'],
    'bzip' => $form['billing_zip'],
    'bcountry' => $form['billing_country'],
    'bphone' => $form['billing_phone'],
    'email' => $form['billing_email'],
    /*
 'saddress' => $form['billing_address1'],
 'saddress1' => $form['billing_address2'],
 'scity' => $form['billing_city'],
 'sstate' => $form['billing_state'],
 'szip' => $form['billing_zip'],
 'scountry' => $form['billing_country'],
 'sphone' => $form['billing_phone'],
 'semail' => $form['billing_email'],
 */
    'ordernumber' => $order->oid,
    'NotifyEmail' => variable_get('ms_innovative_customer_notification', 'no'),
    'ReceiptEmail' => variable_get('ms_innovative_merchant_notification', 'no'),
    'created' => $order->created,
    'modified' => $order->modified,
  );

  $transaction_mode = variable_get('ms_innovative_transaction_mode', 'test');
  if ($transaction_mode == 'test') {
    $submit_data['test_override_errors'] = 'TRUE';
    $submit_data['username'] = 'gatewaytest';
    $submit_data['pw'] = 'GateTest2002';
    $url = 'https://transactions.innovativegateway.com/servlet/com.gateway.aai.Aai';
  } else {
    $submit_data['test_override_errors'] = 'FALSE';
    $url = 'https://transactions.innovativegateway.com/servlet/com.gateway.aai.Aai';
  }

  $postdata = '';
  while (list($key, $value) = each($submit_data)) {
    $postdata .= $key . '=' . urlencode(str_replace(',', '', $value)) . '&';
  }

  $postdata = substr($postdata, 0, -1);
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_VERBOSE, 0);
  curl_setopt($ch, CURLOPT_USERAGENT, "Mozilla/4.0");
  curl_setopt($ch, CURLOPT_POST, 1);
  curl_setopt($ch, CURLOPT_POSTFIELDS, $postdata);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
  curl_setopt($ch, CURLOPT_NOPROGRESS, 1);
  curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 0);
  curl_setopt($ch, CURLOPT_TIMEOUT, 120);
  $authorize = curl_exec($ch);
  if ($error = curl_error($ch)) {
    ms_core_log_error('ms_innovative', 'CURL Error: !error', array('!error' => $error));
  }
  curl_close($ch);

  $result = explode(variable_get('ms_innovative_delimiter', '&'), $authorize);
  $result_array = "";
  for ($i = 0; $i < count($result); $i++) {
    $tmp2 = explode("=", $result[$i]);
    $tmp2[0] = strtolower($tmp2[0]);
    $result_array[$tmp2[0]] = strip_tags($tmp2[1]);
  }

  $response = array();
  $response['values'] = $result_array;

  // If the Response is Approved, the Card has been charged
  if ($result_array["approval"] != "") {
    $response['approved'] = TRUE;
  } else { // Otherwise it was denied
    $response['approved'] = FALSE;
  }

  // Mask the CC Number to conform with Standards
  $response['values']['ccnumber'] = ms_core_mask_cc($response['values']['ccnumber']);

  return $response;
}
