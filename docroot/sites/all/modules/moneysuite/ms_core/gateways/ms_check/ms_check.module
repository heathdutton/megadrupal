<?php

/**
 * @file
 * MoneySuite Check/Bank Transfer Payment Gateway
 *
 * Original author: Leighton Whiting - Released under GENERAL PUBLIC LICENSE
 * Current maintenance by multiple MoneySuite users.
 * Re: new initiative: https://www.drupal.org/node/2315653 
 */

/**
 * Implements hook_help().
 */
function ms_check_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/moneysuite/gateways/ms_check":
      $output = '<p>' . t("This is the Check and Bank Transfer Payment Gateway Module for MoneySuite.
      Note that this gateway <strong>does not</strong> support Recurring Orders, since it is a manual admin gateway.
      This means that all orders will be put in a pending state and will need to be manually updated
      by the admin user once payment is received.") . '</p>';
      $output .= '<p>' . t("This gateway works by displaying an admin-configurable message on the checkout
      page after collecting such user information as name, address and email. The message should instruct
      the user how to send money (by check or bank transfer, or any other non-automated means). Once the
      payment is received, it is up to the admin to manually enter the payment in the order and mark it as
      completed. Once the order is completed, the product the user purchased will be delivered automatically
      according to the module that the product belongs to.") . '</p>';
      break;
  }
  return $output;
}

/**
 * Implements hook_cron()
 */
function ms_check_cron() {
  // Check if we need to send an email to the admin if the payment is overdue by X days
  if (variable_get('ms_check_last_overdue_reminder', 0) < (REQUEST_TIME - (86400)) AND variable_get('ms_check_payment_overdue_mail_body', '')) {
    variable_set('ms_check_last_overdue_reminder', REQUEST_TIME);
    $result = db_query("SELECT * FROM {ms_recurring_schedules} WHERE status = :status AND next_payment < :threshold AND notified = :zero2",
      array(
        ':status' => 'active',
        ':threshold' => strtotime("-" . variable_get('ms_check_payment_overdue_days', 7) . " days"),
        ':zero2' => 0,
      ));

    foreach ($result as $recurring_schedule) {
      $order = ms_core_order_load($recurring_schedule->oid);
      $vars = array(
        'order' => $order,
      );

      // Send the card expiring soon email
      drupal_mail('ms_check', 'payment_overdue', variable_get('site_mail', ''), language_default(), $vars, ms_core_variable_get('ms_core_store_email', '', $order));
    }
  }
}

/**
 * Access callback that always returns true
 */
function ms_check_access_test() {
  return TRUE;
}

/**
 * Access callback that always returns true
 */
function ms_check_checkout_access_test() {
  return TRUE;
}

/**
 * Implements hook_menu().
 */
function ms_check_menu() {
  $items = array();

  $items['ms/checkout/check'] = array(
    'title' => 'Details',
    'page callback' => 'ms_check_checkout',
    'access callback' => 'ms_check_checkout_access_test',
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );
  $items['ms_check/instructions'] = array(
    'title' => 'Instructions',
    'page callback' => 'ms_check_instructions_page',
    'access callback' => 'ms_check_access_test',
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );

  return $items;
}

/**
 * Admin Settings Form
 */
function ms_check_admin() {
  // Instruction Textarea
  // Checkboxes Check, Bank Transfer
  $form['general']['ms_check_instructions'] = array(
    '#type' => 'textarea',
    '#title' => t('Instructions'),
    '#description' => t('Enter the instructions that will be shown to the user.'),
    '#default_value' => variable_get('ms_check_instructions', t("
Your order has been saved and is pending payment.
<br />
Order Details:<br />
[ms_core_order:orderSummaryHTML]
<br />
To complete you order, please send a check to us with the order number attached: [ms_core_order:orderId]
<br />
Sincerely,<br />
Site Admin
    ")),
  );

  $form['general']['ms_check_instructions_token_help']['tokens'] = array(
    '#theme' => 'token_tree',
    '#token_types' => array('ms_core_order', 'system'),
    '#dialog' => TRUE,
  );
  $form['recurring'] = array(
    '#type' => 'fieldset',
    '#title' => t('Recurring Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['recurring']['ms_check_payment_overdue_days'] = array(
    '#type' => 'textfield',
    '#title' => t('Payment Overdue Mail Threshold'),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_check_payment_overdue_days', 7),
    '#description' => t('How many days after a payment is overdue should the email be sent to the admin?'),
  );
  $form['recurring']['ms_check_payment_overdue_mail_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Overdue Payment Admin Email Subject'),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_check_payment_overdue_mail_subject', t("Payment Overdue")),
  );
  $form['recurring']['ms_check_payment_overdue_mail_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Overdue Payment Admin Email Body'),
    '#description' => t("Leave blank to not send an email."),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_check_payment_overdue_mail_body', t("A recurring payment has not been entered for [ms_core_order:orderId].
      You may need to contact the user and/or cancel the order.")),
  );
  $form['recurring']['ms_check_payment_overdue_mail_token_help'] = array(
    '#title' => t('Replacement patterns'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['recurring']['ms_check_payment_overdue_mail_token_help']['help'] = array(
    '#value' => theme('token_tree', array('token_types' => array('ms_core_order', 'user'))),
  );

  $form['email'] = array(
    '#type' => 'fieldset',
    '#title' => t('Email Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['email']['ms_check_checkout_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Checkout Complete Email Subject'),
    '#default_value' => variable_get('ms_check_checkout_subject', t('Order Instructions')),
    '#required' => FALSE
  );
  $form['email']['ms_check_checkout_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Checkout Complete Email Body'),
    '#default_value' => variable_get('ms_check_checkout_body', t("
Your order has been saved and is pending payment.

Order Details:<br />
[ms_core_order:orderSummaryHTML]

To complete you order, please send a check to us with the order number attached: [ms_core_order:orderId]

Sincerely,
Site Admin
    ")),
    '#description' => t("This is the email that is sent to the user once they complete
      their checkout. You should let the user know what they need to do to complete
      the order. Leave blank to disable."),
    '#required' => FALSE
  );
  $form['email']['ms_check_checkout_token_help']['tokens'] = array(
    '#theme' => 'token_tree',
    '#token_types' => array('ms_core_order', 'system'),
    '#dialog' => TRUE,
  );
  $form['email']['ms_check_checkout_subject_admin'] = array(
    '#type' => 'textfield',
    '#title' => t('Checkout Complete Email Subject to Admin'),
    '#default_value' => variable_get('ms_check_checkout_subject_admin', t('New Order')),
    '#required' => FALSE
  );
  $form['email']['ms_check_checkout_body_admin'] = array(
    '#type' => 'textarea',
    '#title' => t('Checkout Complete Email Body to Admin'),
    '#default_value' => variable_get('ms_check_checkout_body_admin', t("
An order has been saved and is pending payment.

Customer: [ms_core_order:customerName]
Email: [ms_core_order:customerEmail]

Address:
[ms_core_order:billingStreet]
[ms_core_order:billingCity], [ms_core_order:billingState] [ms_core_order:billingZip]
[ms_core_order:billingCountry]

Order Details:
[ms_core_order:orderSummary]

Once payment is received, enter the payment from the Admin area and the order will be processed automatically.

Sincerely,
Site Admin
    ")),
    '#description' => t("This is the email that is sent to the admin once a user completes
      their checkout. Leave blank to disable."),
    '#required' => FALSE
  );
  $form['email']['ms_check_checkout_token_help']['tokens'] = array(
    '#theme' => 'token_tree',
    '#token_types' => array('ms_core_order', 'system'),
    '#dialog' => TRUE,
  );

  return $form;
}

/********************************************************************
 * FUNCTIONS
 *******************************************************************/

/**
 * Implements hook_ms_core_payment_gateway().
 */
function ms_check_ms_core_payment_gateway() {
  $gateways['ms_check_dp'] = array(
    'name' => 'Check or Bank Transfer',
    'display_name' => t('Check or Bank Transfer'),
    'description' => t('Pay with a check or bank transfer.'),
    'cards' => array('bank', 'check'),
    'module' => 'ms_check_dp',
    'checkout_path' => 'ms/checkout/check',
    'settings' => ms_check_admin(),
  );

  return $gateways;
}

/********************************************************************
 * Checkout Form
 *******************************************************************/

/**
 * Make a form to show on the checkout page, to collect the Address Info
 */
function ms_check_checkout() {
  $build = array();
  // Stop the caching
  $GLOBALS['conf']['cache'] = FALSE;

  if (!$order = ms_core_load_session_order()) {
    // The order wasn't loaded: Error
    return t('There was an error with the checkout');
  }

  if ($order->status != 'checkout') {
    // The order is not in checkout and shouldn't be here
    return t('This order has already been through Checkout.');
  }

  // Get the Payment Form
  $content = drupal_get_form('ms_check_checkout_form', $order);
  $build['content'] = $content;
  return $build;
}

/**
 * Build the Checkout Form
 */
function ms_check_checkout_form($form, $form_state, $order) {
  $form = array();

  $form['ms_order_contents'] = array(
    '#type' => 'markup',
    '#markup' => ms_core_get_order_details_table($order),
  );

  ms_core_get_cc_form($form, $order, array(), FALSE);

  ms_core_get_billing_form($form, $order, FALSE);

  $form['ms_oid'] = array(
    '#type' => 'value',
    '#value' => $order->oid,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Continue'),
  );

  return $form;
}

/**
 * Put the order in a pending state and display instructions to the user on how to submit payment
 */
function ms_check_checkout_form_submit($form, &$form_state) {
  $v = $form_state['values'];

  if (!$order = ms_core_load_session_order()) {
    // Should never get this far
    ms_core_log_error('ms_check', "Unable to save the address info because unable to load order.");
  }

  // Save the address information
  // Update the address
  $order->billing_address = array(
    'street' => $v['billing_address1'],
    'city' => $v['billing_city'],
    'state' => $v['billing_state'],
    'zip' => $v['billing_zip'],
    'country' => $v['billing_country'],
    'phone' => $v['billing_phone'],
  );
  $order->gateway = 'ms_check';

  $order->first_name = $v['cc_first_name'];
  $order->last_name = $v['cc_last_name'];

  $order->status = 'pending';

  ms_core_order_save($order);

  // Send email to user
  drupal_mail('ms_check', 'checkout_complete', $v['billing_email'], language_default(), array('order' => $order), ms_core_variable_get('ms_core_store_email', '', $order));
  // Send email to admin
  drupal_mail('ms_check', 'checkout_complete_admin', variable_get('site_mail', ''), language_default(), array('order' => $order), ms_core_variable_get('ms_core_store_email', '', $order));

  // Go to Instructions Page
  drupal_goto('ms_check/instructions');
}

/**
 * Show the instructions to the user
 */
function ms_check_instructions_page() {
  if (!$order = ms_core_load_session_order()) {
    // Should never get this far
    ms_core_log_error('ms_check', "Unable to save the address info because unable to load order.");
    return t('There was an error during checkout.');
  } else {
    // Show the instructions here
    $instructions = token_replace(variable_get('ms_check_instructions', ''),
      array(
        'ms_core_order' => $order,
      ));
    return $instructions;
  }
}

// ======================================
// MAIL
// ======================================

/**
 * Handle Mail functions
 */
function ms_check_mail($key, &$message, $seed_vars) {
  $order = $seed_vars['order'];
  $account = user_load($order->uid);
  $subject = "";
  $body = "";

  switch ($key) {
    case 'payment_overdue':
      $subject = variable_get('ms_check_payment_overdue_mail_subject', '');
      $body = variable_get('ms_check_payment_overdue_mail_body', '');
      break;

    case 'checkout_complete':
      $subject = variable_get('ms_check_checkout_subject', '');
      $body = variable_get('ms_check_checkout_body', '');
      break;

    case 'checkout_complete_admin':
      $subject = variable_get('ms_check_checkout_subject_admin', '');
      $body = variable_get('ms_check_checkout_body_admin', '');
      break;
  }

  // Replace the Tokens
  $message['subject'] = token_replace($subject,
    array(
      'ms_core_order' => $order,
      'user' => $account,
    ));
  $message['body'][] = token_replace($body,
    array(
      'ms_core_order' => $order,
      'user' => $account,
    ));
}

