<?php

/**
 * @file
 * MoneySuite WorldPay Gateway
 *
 * @todo Look into integrating FuturePay Limited Agreements, for Tokenisation
 *   features and more flexibility.
 *    -http://www.worldpay.com/support/kb/bg/htmlredirect/rhtml5904.html
 *    -http://www.worldpay.com/support/kb/bg/recurringpayments/rpfp.html
 *
 * Original author: Leighton Whiting - Released under GENERAL PUBLIC LICENSE
 * Current maintenance by multiple MoneySuite users.
 * Re: new initiative: https://www.drupal.org/node/2315653 
 */

/**
 * Implements hook_help().
 */
function ms_worldpay_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/moneysuite/gateways/ms_worldpay":
    case "admin/help#ms_worldpay":
      $output = '<p>' . t("WorldPay Payment Gateway Module for MoneySuite. This
      allows you to receive payments via your WorldPay account, which also supports
      a number of EU gateways. If you have FuturePay, you can process recurring orders.") . '</p>';
      break;
  }
  return $output;
}

/**
 * Implements hook_menu().
 */
function ms_worldpay_menu() {
  $items = array();
  $items['ms/checkout/worldpay'] = array(
    'title' => 'Checkout',
    'page callback' => 'ms_worldpay_initiate_payment',
    'access callback' => TRUE,
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );
  $items['ms_worldpay/backend'] = array(
    'title' => 'Backend',
    'page callback' => 'ms_worldpay_backend_page',
    'access callback' => TRUE,
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );
  $items['ms_worldpay/cancel/%'] = array(
    'title' => 'Cancel Payments',
    'page callback' => 'ms_worldpay_cancel_page',
    'page arguments' => array(2),
    'access callback' => 'ms_core_cancel_test',
    'access arguments' => array(2),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Admin Settings Form
 */
function ms_worldpay_admin() {
  $form['main'] = array(
    '#type' => 'fieldset',
    '#title' => t('Main Settings'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );

  $form['main']['ms_worldpay_sid'] = array(
    '#type' => 'textfield',
    '#title' => t('Install ID'),
    '#description' => t('Your Worldpay installation ID number.'),
    '#default_value' => variable_get('ms_worldpay_sid', ''),
  );
  $form['main']['ms_worldpay_adminsid'] = array(
    '#type' => 'textfield',
    '#title' => t('Admin Install ID'),
    '#description' => t('Your Worldpay admin panel installation ID number. This is used for cancellation of orders.'),
    '#default_value' => variable_get('ms_worldpay_adminsid', ''),
  );
  $form['main']['ms_worldpay_authpw'] = array(
    '#type' => 'textfield',
    '#title' => t('Remote Authorization Password'),
    '#description' => t("This is needed if you want to let users cancel their own
      recurring payments. May be called 'Info servlet password'"),
    '#default_value' => variable_get('ms_worldpay_authpw', ''),
  );
  $form['main']['ms_worldpay_md5_secret'] = array(
    '#type' => 'textfield',
    '#title' => t('MD5 Secret'),
    '#description' => t("If this is set, payment responses will be checked to ensure
      they are valid."),
    '#default_value' => variable_get('ms_worldpay_md5_secret', ''),
  );
  $form['main']['ms_worldpay_demo'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable test mode'),
    '#default_value' => variable_get('ms_worldpay_demo', TRUE),
  );
  $form['main']['ms_worldpay_demo_result'] = array(
    '#type' => 'select',
    '#title' => t('Specify the result of transactions when using test mode'),
    '#default_value' => variable_get('ms_worldpay_demo_result', 'AUTHORISED'),
    '#options' => array(
      'AUTHORISED' => 'Authorised',
      'REFUSED' => 'Refused',
      'ERROR' => 'Error',
      'CAPTURED' => 'Captured',
    ),
    '#disabled' => (variable_get('ms_worldpay_demo', TRUE)) ? FALSE : TRUE,
  );
  $form['main']['instructions'] = array(
    '#type' => 'item',
    '#title' => t('Worldpay configuration (Installation Administration)'),
    '#markup' => t('<ul>
      <li><strong>Payment Response URL</strong> should be set to: %response_url</li>
      <li>Alternatively, you can use the following dynamic code: %dynamic</li>
      <li><strong>Payment Response</strong> should be <em>enabled</em></li>
      <li><strong>Shopper Response</strong> should be <em>enabled</em> to get the response page (optional)',
      array('%response_url' => url('ms_worldpay/backend', array('absolute' => TRUE)), '%dynamic' => '<wpdisplay item=MC_callback>')),
  );

  $form['main']['ms_worldpay_jump_page_text'] = array(
    '#type' => 'textarea',
    '#title' => t('WorldPay Jump Page Text'),
    '#description' => t("Fill in the text you wish the user to see for the WorldPay Jump page. They will be redirected automatically if Javascript is enabled, otherwise a button is provided for them to click."),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_worldpay_jump_page_text',
    "Please wait for a few seconds, your registration is being processed and you will be redirected to WorldPay's secure payment page.
    <br/><br/>
    If you are not automatically redirected to the WorldPay payment page within 5 seconds, click below:
    <br/><br/>"),
  );
  $form['main']['ms_worldpay_jump_page_timeout'] = array(
    '#type' => 'textfield',
    '#title' => t('WorldPay Jump Page Timeout'),
    '#description' => t("How many seconds should the Jump Page wait until it automatically redirects?"),
    '#required' => TRUE,
    '#default_value' => variable_get('ms_worldpay_jump_page_timeout', 0),
  );

  return $form;
}

/**
 * Implements hook_ms_core_payment_gateway().
 */
function ms_worldpay_ms_core_payment_gateway() {
  $gateway['ms_worldpay'] = array(
    'name' => 'WorldPay',
    'display_name' => t('Credit Card'),
    'description' => t('Pay by Credit Card'),
    'cards' => array('visa', 'electron', 'mc', 'maestro', 'switch', 'solo'),
    'module' => 'ms_worldpay',
    'checkout_path' => 'ms/checkout/worldpay',
    'cancel_url' => variable_get('ms_worldpay_authpw', '') ? 'ms_worldpay_get_cancel_url' : '',
    'settings' => ms_worldpay_admin(),
  );

  return $gateway;
}

/**
 * Get the Cancellation URL for a recurring order
 */
function ms_worldpay_get_cancel_url($order) {
  return 'ms_worldpay/cancel/'. $order->oid;
}

/**
 * Initiate a cancellation
 */
function ms_worldpay_cancel_page($oid) {
  return drupal_get_form('ms_worldpay_cancel_page_confirm', $oid);
}

/**
 * Initiate a cancellation
 */
function ms_worldpay_cancel_page_confirm($form, &$form_state, $oid) {
  $order = ms_core_order_load($oid);
  $form['#ms_core_oid'] = $order->oid;
  return confirm_form($form, t('Are you sure you want to cancel your order?'), '', t('This action cannot be undone.'), t('Confirm'));
}

function ms_worldpay_cancel_page_confirm_submit($form, &$form_state) {
  $order = ms_core_order_load($form['#ms_core_oid']);

  // Get the subscription_id from the order
  $subscription_id = ms_core_get_order_rec_id($order->oid);

  $options = array(
    'method' => 'POST',
    'headers' => array('Content-Type' => 'application/x-www-form-urlencoded'),
    'data' => array(
      'instId' => variable_get('ms_worldpay_adminsid', ''),
      'authPW' => variable_get('ms_worldpay_authpw', ''),
      'futurePayId' => $subscription_id,
      'op-cancelFP' => '',
    ),
  );
  $response = drupal_http_request('https://secure.worldpay.com/wcc/iadmin', $options);

  if ($response->data == 'Y, Agreement cancelled') {
    // Enter the rec_cancel payment
    $payment = ms_core_new_payment($order->oid, 'ms_worldpay', 'rec_cancel');
    // Generate a Unique Transaction ID
    $payment->transaction = ms_core_generate_transaction_id(10);
    $payment->currency = $order->currency;
    $payment->recurring_id = $subscription_id;

    ms_core_enter_payment($payment);
  }
  else {
    // Log the error
    ms_core_log_error('ms_worldpay', 'There was a problem canceling the order: @error',
      array('@error' => $response->data));
    drupal_set_message(t('There was an error canceling the order. The error has been logged.'), 'error');
  }
}

// ======================================
// Functions:
// ======================================

/**
 * Process the IPN by adding a Payment record to an Order
 */
function ms_worldpay_backend_page() {
  ms_core_log('ms_worldpay', t('Receiving new order notification for order !order_id. POST: !post',
    array('!post' => ms_core_print_r($_POST), '!order_id' => check_plain($_POST['cartId']))));

  if (!$order = ms_core_order_load($_POST['cartId'])) {
    drupal_set_message(t('An error has occurred during payment.  Please contact us to ensure your order has submitted.'));
    return;
  }

  if (FALSE AND $secret = variable_get('ms_worldpay_md5_secret', '')) { // @todo - Re-test this. Verify the md5 and the order amount.
    if (isset($_POST['key'])) {
      $key = $_POST['key'];
      $valid = md5($secret . $_POST['sid'] . $_POST['merchant_order_id'] . $_POST['total']);
      if (strtolower($key) != strtolower($valid)) {
        ms_core_add_history_item($order, 0, t('Attempted unverified Worldpay completion for this order.'), TRUE);
        ms_core_log_error('ms_worldpay', 'Attempted unverified Worldpay completion for this order. Details: !details',
          array('!details' => ms_core_print_r($_POST)));
        print t("Error with MD5 Validation.");
        exit;
      }
    }
    else {
      ms_core_add_history_item($order, 0, t('Attempted unverified Worldpay completion for this order.'), TRUE);
      ms_core_log_error('ms_worldpay', 'Attempted unverified Worldpay completion for this order. Details: !details',
        array('!details' => ms_core_print_r($_POST)));
      print t("Error with MD5 Validation.");
      exit;
    }
  }

  // Insert the Payment to the order
  $payment = ms_core_new_payment($order->oid, 'ms_worldpay', 'cart', $_POST['amount'], $_POST['currency']);

  $payment->transaction = $_POST['transId'];
  $payment->recurring_id = isset($_POST['futurePayId']) ? $_POST['futurePayId'] : '';
  $payment->data = $_POST;

  // Update the address
  $payment->billing_address = array(
    'street' => isset($_POST['address']) ? $_POST['address'] : '',
    'city' => '',
    'state' => '',
    'zip' => isset($_POST['postcode']) ? $_POST['postcode'] : '',
    'country' => isset($_POST['country']) ? $_POST['country'] : '',
    'phone' => isset($_POST['tel']) ? $_POST['tel'] : '',
  );

  // Update the contact details
  $name = explode(' ', $_POST['name']);
  $payment->first_name = $name[0];
  $payment->last_name = $name[1];
  $payment->data = array(
    'wp_vars' => $_POST,
  );

  switch ($_POST['transStatus']) {
    case 'Y':
      $result_title = t('Success');
      // Add the Payment to the Order
      switch ($order->order_type) {
        case 'recurring':
          $amount = $payment->amount;
          $payment->amount = $amount;
          $payment->type = 'rec_signup';
          ms_core_enter_payment($payment);
          break;
        case 'cart':
          $payment->type = 'cart';
          ms_core_enter_payment($payment);
          break;
      }
      ms_core_add_history_item($order, 0, t('A payment has been accepted.'), TRUE);
      break;

    case 'N':
      $result_title = t('Error');
      // Add the Payment to the Order
      drupal_set_message(t('Your payment has failed.'));
      $payment->type = 'failed';
      ms_core_enter_payment($payment);
      break;

    case 'C':
      $result_title = t('Cancelled');
      // Add the Payment to the Order
      drupal_set_message(t('Your payment has been Cancelled.'));
      $payment->type = 'rec_cancel';
      ms_core_enter_payment($payment);
      break;

    default:
      $result_title = t('Error');
      drupal_set_message(t('Your order will be processed as soon as your payment clears at Worldpay.'));
      ms_core_add_history_item($order, 0, t('Payment is pending at Worldpay.'), TRUE);

      $payment->type = 'pending';
      // Add the Payment to the Order
      ms_core_enter_payment($payment);
      break;
  }

  // Return the shopper response page
  // @todo - Add a template for this in the settings
  $url = url('ms/thankyou/' . $order->unique_key, array('absolute' => TRUE));
  print "
<html>
  <head>
  <title>$result_title</title>
  </head>
  <WPDISPLAY FILE=header.html>
  <h1>$result_title</h1>
  <a href='$url'>Click here to return to the site and complete your order.</a>
  <WPDISPLAY ITEM=banner>
  <WPDISPLAY FILE=footer.html>
</html>";
  exit;
}

/**
 * Prep Variables for WorldPay and Send
 */
function ms_worldpay_checkout_form($form, &$form_state, $order) {
  $form = array();

  $data = array(
    'instId' => variable_get('ms_worldpay_sid', ''),
    'amount' => $order->amount,
    'cartId' => $order->oid,
    'currency' => ms_core_variable_get('ms_core_default_currency', 'USD', $order),
    'desc' => ms_core_get_order_title($order, 64),
    'MC_callback' => url('ms_worldpay/backend', array('absolute' => TRUE)),
  );

  if (variable_get('ms_worldpay_demo', TRUE)) {
    $data['testMode'] = '100';
  }

  // If the order is recurring, let's add the FuturePay parameters
  if ($order->order_type == 'recurring') {
    // The first payment is charged immediately, and the recurring payment is set to be charged in 1 period's time
    $data['futurePayType'] = 'regular';
    $data['option'] = 1;
    $data['startDelayMult'] = $order->recurring_schedule['main_length'];
    $data['startDelayUnit'] = ms_worldpay_get_unit($order->recurring_schedule['main_unit']);
    $data['noOfPayments'] = $order->recurring_schedule['total_occurrences'];
    $data['intervalMult'] = $order->recurring_schedule['main_length'];
    $data['intervalUnit'] = ms_worldpay_get_unit($order->recurring_schedule['main_unit']);
    $data['normalAmount'] = $order->recurring_schedule['main_amount'];
    $data['amount'] = $order->recurring_schedule['main_amount'];

    // If there is a trial period, set the parameters
    if ($order->recurring_schedule['has_trial']) {
      $data['amount'] = $order->recurring_schedule['trial_amount'];
      $data['startDelayMult'] = $order->recurring_schedule['trial_length'];
      $data['startDelayUnit'] = ms_worldpay_get_unit($order->recurring_schedule['trial_unit']);
    }
  }

  // Add the billing fields if set.
  $cc_form = array();
  ms_core_get_cc_form($cc_form, $order);
  $billing_form = array();
  ms_core_get_billing_form($billing_form, $order);
  if (TRUE) {
    $data['name'] = $cc_form['cc']['cc_first_name']['#default_value'] . ' ' . $cc_form['cc']['cc_last_name']['#default_value'];
    $data['address1'] = $billing_form['billing']['billing_address1']['#default_value'];
    $data['address2'] = $billing_form['billing']['billing_address2']['#default_value'];
    $data['town'] = $billing_form['billing']['billing_city']['#default_value'];
    $data['postcode'] = $billing_form['billing']['billing_zip']['#default_value'];
    $data['country'] = $billing_form['billing']['billing_country']['#default_value'];
    $data['tel'] = $billing_form['billing']['billing_phone']['#default_value'];
    $data['email'] = $billing_form['billing']['billing_email']['#default_value'];
    //$data['fixContact'] = 'true';
    //$data['hideContact'] = 'true';

    /*
    $data['withDelivery'] = 'true';
    $data['delvName'] = $billing_form['shipping']['shipping_first_name']['#default_value'] . ' ' . $billing_form['shipping']['shipping_last_name']['#default_value'];
    $data['delvAddress1'] = $billing_form['shipping']['shipping_address1']['#default_value'];
    $data['delvAddress2'] = $billing_form['shipping']['shipping_address2']['#default_value'];
    $data['delvTown'] = $billing_form['shipping']['shipping_city']['#default_value'];
    $data['delvPostcode'] = $billing_form['shipping']['shipping_zip']['#default_value'];
    $data['delvCountry'] = $billing_form['shipping']['shipping_country']['#default_value'];
    */
  }

  foreach ($data as $name => $value) {
    $form[$name] = array(
      '#type' => 'hidden',
      '#value' => $value,
    );
  }

  $test_server = 'https://select-test.worldpay.com/wcc/purchase';
  $live_server = 'https://select.worldpay.com/wcc/purchase';

  $form['#action'] = variable_get('ms_worldpay_demo', TRUE) ? $test_server : $live_server;
  $form['submit'] = array(
    '#type' => 'submit',
    '#name' => 'ms_worldpay_submit',
    '#value' => t('Submit Order'),
  );

  return $form;
}

/**
 * Gets the proper FuturePay unit
 */
function ms_worldpay_get_unit($unit) {
  switch ($unit) {
    case 'D':
      return 1;
    case 'W':
      return 2;
    case 'M':
      return 3;
    case 'Y':
      return 4;
    default:
      return $unit;
  }
}

/**
 * Initiate a Payment
 */
function ms_worldpay_initiate_payment() {
  // Stop the caching
  $GLOBALS['conf']['cache'] = FALSE;

  // Load the order
  if (!$order = ms_core_load_session_order()) {
    // Error
    return t('There was an error with the checkout');
  }

  // Set the order status
  ms_core_set_order_status($order, 'pending');

  $timeout = variable_get('ms_worldpay_jump_page_timeout', 0) * 1000;
  $js = "
  (function ($) {
    window.setTimeout(function() {
      $('#ms-worldpay-checkout-form').submit();
    }, $timeout);
  })(jQuery);
  ";
  drupal_add_js($js, array('type' => 'inline', 'scope' => 'footer'));

  // Generate some HTML
  $html = variable_get('ms_worldpay_jump_page_text', "Please wait for a few seconds, your purchase is being processed and you will be redirected to WorldPay's secure payment page.
    <br/><br/>
    If you are not automatically redirected to the WorldPay payment page within 5 seconds, click below:
    <br/><br/>");

  // Start the Payment
  $form = drupal_get_form('ms_worldpay_checkout_form', $order);
  $html .= drupal_render($form);

  return $html;
}
