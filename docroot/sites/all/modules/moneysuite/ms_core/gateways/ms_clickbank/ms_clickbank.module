<?php

/**
 * @file
 * MoneySuite ClickBank Payment Gateway
 *
 * Original author: Leighton Whiting - Released under GENERAL PUBLIC LICENSE
 * Current maintenance by multiple MoneySuite users.
 * Re: new initiative: https://www.drupal.org/node/2315653 
 */

/**
 * Implements hook_help().
 */
function ms_clickbank_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/help#ms_clickbank":
    case 'admin/moneysuite/gateways/ms_clickbank':
      $output .= '<p>' . t("This gateway is different from the other gateways in that it is only able to
      act on payment notifications that are sent by ClickBank. It is not able to be used for checkout
      on your site as a payment method. This is because ClickBank only supports one-way notifications.") . '</p>';
      $output .= '<p>' . t("Because of this, you need to create associations between MoneySuite
      products on your site and the products on your ClickBank account, so that when a user purchases
      the items from ClickBank, the associated MoneySuite product is delivered to the user.") . '</p>';
      $output .= '<p>' . t("You must enter the following url as the Instant Notification URL in your
      ClickBank Settings: %url", array('%url' => url('clickbank/backend', array('absolute' => TRUE)))) . '</p>';
      break;
  }
  return $output;
}

/**
 * Access callback that always returns true
 */
function ms_clickbank_access_test() {
  return TRUE;
}

/**
 * Implements hook_menu().
 */
function ms_clickbank_menu() {
  $items = array();
  $items['clickbank/backend'] = array(
    'title' => 'Backend',
    'page callback' => 'ms_clickbank_ipn',
    'access callback' => 'ms_clickbank_access_test',
    'type' => MENU_CALLBACK,
  );
  $items['admin/moneysuite/gateways/ms_clickbank/products'] = array(
    'title' => 'ClickBank Products',
    'page callback' => 'ms_clickbank_list_products',
    'access arguments' => array('access administration pages'),
    'description' => 'Add and Edit ClickBank Products',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/moneysuite/gateways/ms_clickbank/products/list'] = array(
    'title' => 'List ClickBank Product',
    'page callback' => 'ms_clickbank_list_products',
    'access arguments' => array('access administration pages'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => '-1',
  );
  $items['admin/moneysuite/gateways/ms_clickbank/products/add'] = array(
    'title' => 'Register ClickBank Product',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_clickbank_product_form', 'add'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/moneysuite/gateways/ms_clickbank/products/edit/%'] = array(
    'title' => 'Edit ClickBank Product',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_clickbank_product_form', 'edit', 6),
    'access arguments' => array('access administration pages'),
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );
  $items['admin/moneysuite/gateways/ms_clickbank/products/delete/%'] = array(
    'title' => 'Delete ClickBank Product',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_clickbank_delete_clickbank_product_confirm', 6),
    'access arguments' => array('access administration pages'),
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );
  $items['admin/moneysuite/gateways/ms_clickbank'] = array(
    'title' => 'ClickBank Settings',
    'description' => 'Set the various ClickBank Integration Settings here',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_clickbank_admin'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/moneysuite/gateways/ms_clickbank/settings'] = array(
    'title' => 'ClickBank Settings',
    'description' => 'Set the various ClickBank Integration Settings here',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_clickbank_admin'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/moneysuite/gateways/ms_clickbank/clickbank-test'] = array(
    'title' => 'ClickBank IPN Test',
    'page callback' => 'clickbank_send_test',
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

// ======================================
// Administration Page:
// ======================================

/**
 * Admin Settings Form
 */
function ms_clickbank_admin($form, &$form_state) {
  $form['main'] = array(
    '#type' => 'fieldset',
    '#title' => t('Main Settings'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['main']['ms_clickbank_secret_key'] = array(
    '#type' => 'textfield',
    '#title' => t('ClickBank Secret Key'),
    '#default_value' => variable_get('ms_clickbank_secret_key', ''),
    '#description' => t('Enter your Secret Key you set on your ClickBank Account'),
    '#required' => TRUE,
  );
  $form['main']['ms_clickbank_ipn_version'] = array(
    '#type' => 'select',
    '#title' => t('ClickBank Instant Notification Version'),
    '#default_value' => variable_get('ms_clickbank_ipn_version', '2.1'),
    '#options' => array(
      '2.1' => '2.1',
      '1.0' => '1.0',
    ),
    '#description' => t('Select the Instant Notifications version. 2.1 is recommended.'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

// ======================================
// Pages:
// ======================================

//Send a test IPN
function clickbank_send_test() {
  if (isset($_POST['cproditem'])) {
    $cverify = ms_clickbank_get_verify($_POST, variable_get('ms_clickbank_secret_key', ''));
    $formValues = "<input type='hidden' value='$cverify' name='cverify' />";
    foreach ($_POST as $field => $value) {
      $formValues .= "<input type='hidden' value='$value' name='$field' />";
    }
    $formValues .= "<input type='submit' value='Test' />";
    // @ignore security_18
    $content_html = "Ready to Submit: <form action='/clickbank/backend' method='post'>" . $formValues . "</form>";
  } else {
    $time_now = REQUEST_TIME;
    // @ignore security_18
    $content_html = "<form action='' method='post' target='_blank'>
    Transaction Receipt Number: <input type='text' name='ctransreceipt' value='12345678' /><br />
    Transaction Time: <input type='text' name='purchase_time' value='$time_now' /><br />
    Payment Method: <input type='text' name='ctranspaymentmethod' value='VISA' /><br />
    Product Type: <select name='cprodtype'><option value='STANDARD'>STANDARD</option><option value='RECURRING'>RECURRING</option></select><br />
    Transaction Type: <select name='ctransaction'>
    <option value='SALE'>SALE</option><option valuse='BILL'>BILL</option><option valuse='RFND'>RFND</option>
    <option value='CGBK'>CGBK</option><option valuse='INSF'>INSF</option><option valuse='CANCEL-REBILL'>CANCEL-REBILL</option>
    <option value='UNCANCEL-REBILL'>UNCANCEL-REBILL</option><option value='TEST'>TEST</option>
    </select><br />
    <br />
    Full Name: <input type='text' name='ccustname' value='Test User' /><br />
    Email: <input type='text' name='ccustemail' value='name@email.com' /><br />
    State: <input type='text' name='ccuststate' value='' /><br />
    Country Code: <input type='text' name='ccustcc' value='' /><br />
    <br />
    Product Price (in pennies): <input type='text' name='ctransamount' value='1943' /><br />
    Product ID: <input type='text' name='cproditem' value='123' /><br />
    Product Name: <input type='text' name='cprodtitle' value='Test Product' /><br />
    Merchant Username: <input type='text' name='ctranspublisher' value='merchperson' /><br />
    Affiliate Username: <input type='text' name='ctransaffiliate' value='' /><br />
    Affiliate ID: <input type='text' name='caffitid' value='' /><br />
    <input type='hidden' value='' name='cvendthru' />
    <input type='submit' value='Prepare' />
    </form>
    ";
  }
  return $content_html;
}

/**
 * List the clickbank products in the admin area
 */
function ms_clickbank_list_products() {
  $output = t("These are the ClickBank Products you have Registered") . ":<br />";

  $headers = array(t('ClickBank Product'), t('Edit'), t('Delete'));
  $rows = array();

  $result = db_query("SELECT * FROM {ms_clickbank_products}");

  foreach ($result as $cb_product) {
    $rows[] = array(
      $cb_product->name,
      l(t('Edit'), 'admin/moneysuite/gateways/ms_clickbank/products/edit/' . $cb_product->cbpid),
      l(t('Delete'), 'admin/moneysuite/gateways/ms_clickbank/products/delete/' . $cb_product->cbpid),
    );
  }

  if (is_array($rows)) {
    $output .= theme('table', array('header' => $headers, 'rows' => $rows, 'attributes' => array(), 'empty' => t('No linked products yet.')));
  } else {
    $output .= "No ClickBank Products - Use the 'Register ClickBank Product' Link to register products";
  }

  return $output;
}

/**
 * Receives and processes the IPN from ClickBank
 */
function ms_clickbank_ipn() {
  $ipn = ms_clickbank_ipn_handler(variable_get('ms_clickbank_secret_key', ''));

  if ($ipn) {
    ms_core_log('ms_clickbank', 'Received IPN: %data', array('%data' => ms_core_print_r($ipn)));

    $cb_product = ms_clickbank_load_clickbank_product_by_id($ipn['cproditem']);

    if ($cb_product->cbpid) {
      // Load the account from the email
      if (!$account = user_load_by_mail($ipn['ccustemail'])) {
        // Create an account if no existing account
        ms_core_log('ms_clickbank', 'Attempting to Create User from Email: !email',
          array('!email' => $ipn['ccustemail']));

        $pass = user_password();
        $account = user_save('', array(
          'name' => $ipn['ccustemail'],
          'mail' => $ipn['ccustemail'],
          'init' => $ipn['ccustemail'],
          'pass' => $pass,
          'roles' => array(),
          'status' => 1,
        ));
        $account->password = $pass;
        //Send the Default Email
        _user_mail_notify('register_no_approval_required', $account);
      }
      $type = ms_clickbank_get_payment_type($ipn['ctransaction'], $ipn['cprodtype']);

      switch ($type) {
        case 'cart':
          $amount = number_format(floatval($ipn['ctransamount']) / 100, 2);
          // We need to create a new order, add the product to the order, and then add the payment to the order.
          $order = ms_core_order_new('cart', $account->uid);
          if (!$product = ms_core_load_module_product($cb_product->module, $cb_product->product_id)) {
            ms_core_log_error('ms_clickbank', 'Error loading the product associated with this ClickBank order. Details: !ipn',
              array('ipn' => ms_core_print_r($ipn)));
            return;
          }

          // Add the product to the order
          $order = ms_core_add_order_product($order, $product);

          // Create a new payment
          $payment = ms_core_new_payment($order->oid, 'ms_clickbank', 'cart', $amount, 'USD');
          $name = explode(' ', $ipn['ccustname']);
          $payment->first_name = $name[0];
          $payment->last_name = $name[1];
          $payment->transaction = $ipn['ctransreceipt'];
          $payment->billing_address = array(
            'street' => '',
            'city' => '',
            'state' => $ipn['ccuststate'],
            'zip' => '',
            'country' => $ipn['ccustcc'],
            'phone' => '',
          );
          $payment->data = $ipn;

          // Add the Payment to the Order
          ms_core_enter_payment($payment);
          break;

        case 'rec_signup':
          $amount = number_format(floatval($ipn['crebillamnt']) / 100, 2);
          // We need to create a new order, add the product to the order, and then add the payment to the order.
          $order = ms_core_order_new('recurring', $account->uid);

          if (!$product = ms_core_load_module_product($cb_product->module, $cb_product->product_id)) {
            ms_core_log_error('ms_clickbank', 'Error loading the product associated with this ClickBank order. Details: !ipn',
              array('ipn' => ms_core_print_r($ipn)));
            return;
          }

          // Add the product to the order
          $order = ms_core_add_order_product($order, $product);

          // Create a new payment
          $payment = ms_core_new_payment($order->oid, 'ms_clickbank', 'rec_signup', 0, 'USD');
          $name = explode(' ', $ipn['ccustname']);
          $payment->first_name = $name[0];
          $payment->last_name = $name[1];
          $payment->transaction = $ipn['ctransreceipt'];
          $payment->recurring_id = $ipn['ccustemail'] . '-' . $ipn['cproditem'];
          $payment->billing_address = array(
            'street' => '',
            'city' => '',
            'state' => $ipn['ccuststate'],
            'zip' => '',
            'country' => $ipn['ccustcc'],
            'phone' => '',
          );
          $payment->data = $ipn;

          // Add the Payment to the Order
          ms_core_enter_payment($payment);

          // Add the rec_payment payment as well
          $payment->type = 'rec_payment';
          $payment->amount = $amount;

          // Add the Payment to the Order
          ms_core_enter_payment($payment);
          break;

        case 'rec_payment':
          $amount = number_format(floatval($ipn['crebillamnt']) / 100, 2);

          // Load the order
          $order = ms_core_order_load_by_rec_id($ipn['ccustemail'] . '-' . $ipn['cproditem']);

          // Create a new payment
          $payment = ms_core_new_payment($order->oid, 'ms_clickbank', 'rec_payment', $amount, 'USD');
          $name = explode(' ', $ipn['ccustname']);
          $payment->first_name = $name[0];
          $payment->last_name = $name[1];
          $payment->transaction = $ipn['ctransreceipt'];
          $payment->recurring_id = $ipn['ccustemail'] . '-' . $ipn['cproditem'];
          $payment->billing_address = array(
            'street' => '',
            'city' => '',
            'state' => $ipn['ccuststate'],
            'zip' => '',
            'country' => $ipn['ccustcc'],
            'phone' => '',
          );
          $payment->data = $ipn;

          // Add the Payment to the Order
          ms_core_enter_payment($payment);
          break;

        case 'rec_cancel':
          // Load the order
          $order = ms_core_order_load_by_rec_id($ipn['ccustemail'] . '-' . $ipn['cproditem']);

          // Create a new payment
          $payment = ms_core_new_payment($order->oid, 'ms_clickbank', 'rec_cancel', 0, 'USD');
          $name = explode(' ', $ipn['ccustname']);
          $payment->first_name = $name[0];
          $payment->last_name = $name[1];
          $payment->transaction = $ipn['ctransreceipt'];
          $payment->recurring_id = $ipn['ccustemail'] . '-' . $ipn['cproditem'];
          $payment->billing_address = array(
            'street' => '',
            'city' => '',
            'state' => $ipn['ccuststate'],
            'zip' => '',
            'country' => $ipn['ccustcc'],
            'phone' => '',
          );
          $payment->data = $ipn;

          // Add the Payment to the Order
          ms_core_enter_payment($payment);
          break;

        case 'refund':
        case 'reversal':
          // Load the order
          $order = ms_core_order_load_by_rec_id($ipn['ccustemail'] . '-' . $ipn['cproditem']);

          // Create a new payment
          $payment = ms_core_new_payment($order->oid, 'ms_clickbank', 'refund', 0, 'USD');
          $name = explode(' ', $ipn['ccustname']);
          $payment->first_name = $name[0];
          $payment->last_name = $name[1];
          $payment->transaction = $ipn['ctransreceipt'];
          $payment->recurring_id = $ipn['ccustemail'] . '-' . $ipn['cproditem'];
          $payment->billing_address = array(
            'street' => '',
            'city' => '',
            'state' => $ipn['ccuststate'],
            'zip' => '',
            'country' => $ipn['ccustcc'],
            'phone' => '',
          );
          $payment->data = $ipn;

          // Add the Payment to the Order
          ms_core_enter_payment($payment);
          break;

        default:
          ms_core_log_error('ms_clickbank', 'Received an IPN for an unknown type. IPN: !ipn',
            array('ipn' => ms_core_print_r($ipn)));
          break;
      }
    } else {
      ms_core_log_error('ms_clickbank', 'Received an IPN for a product that was not registered. IPN: !ipn',
        array('ipn' => ms_core_print_r($ipn)));
    }
  } else {
    ms_core_log_error('ms_clickbank', 'Error Validating the IPN, try checking your Secret Key setting.. IPN: !ipn',
      array('ipn' => ms_core_print_r($ipn)));
  }
}

// ======================================
// Functions:
// ======================================

/**
 * Implements hook_ms_core_payment_gateway().
 */
function ms_clickbank_ms_core_payment_gateway() {
  $gateway['ms_clickbank'] = array(
    'name' => 'ClickBank',
    'display_name' => t('ClickBank'),
    'description' => t('Pay with a Credit Card or PayPal account'),
    'module' => 'ms_clickbank',
    'currency' => array('USD'),
    'checkout_path' => 'ms/checkout/clickbank',
    'recurring' => FALSE,
    'cart' => FALSE,
    'active' => FALSE,
  );

  return $gateway;
}

/**
 * Helper function that gets the payment type
 */
function ms_clickbank_get_payment_type($type, $prod_type) {
  switch ($type) {
    case 'SALE':
    case 'TEST':
      if ($prod_type == 'RECURRING') {
        return 'rec_signup';
      }
      return 'cart';
      break;
    case 'BILL':
      return 'rec_payment';
      break;
    case 'CANCEL-REBILL':
      return 'rec_cancel';
      break;
    case 'RFND':
      return 'refund';
      break;
    case 'CGBK':
    case 'INSF':
      return 'reversal';
      break;
    default:
      return 'cart';
      break;
  }
}

/**
 * Colors for txn_type
 */
function ms_clickbank_get_txn_type($txn_type) {
  switch ($txn_type) {
    case 'SALE':
      return "<span style='color:green;'>Sale</span>";
    case 'BILL':
      return "<span style='color:blue;'>Payment</span>";
    case 'RFND':
      return "<span style='color:orange;'>Refund</span>";
    case 'CGBK':
      return "<span style='color:red;'>Chargeback</span>";
    case 'INSF':
      return "<span style='color:red;'>e-Check Chargeback</span>";
    case 'CANCEL-REBILL':
      return "<span style='color:red;'>Cancellation</span>";
    case 'UNCANCEL-REBILL':
      return "<span style='color:green;'>Un-Cancellation</span>";
    case 'TEST':
      return "<span style='color:purple;'>Test</span>";
    default:
      return $txn_type;
  }
}

/**
 * The IPN Callback Handler
 */
function ms_clickbank_ipn_handler($secretKey) {
  // Validate the ipn
  if (variable_get('ms_clickbank_ipn_version', '1.0') == '2.1') {
    $verified = ms_clickbank_verify_ipn_2($_POST, $secretKey);
  } else {
    $verified = ms_clickbank_verify_ipn($_POST, $secretKey);
  }
  if ($verified) {
    $ipn = array();
    foreach ($_POST as $field => $value) {
      $ipn["$field"] = $value;
    }
    return $ipn;
  } else {
    ms_core_log_error('ms_clickbank', 'IPN failed validation: !ipn', array('!ipn' => ms_core_print_r($_POST)));
    return FALSE;
  }
}

/**
 * Return a valid cverify code
 */
function ms_clickbank_get_verify($request, $secretKey) {
  $ccustname = $request['ccustname'];
  $ccustemail = $request['ccustemail'];
  $ccustcc = $request['ccustcc'];
  $ccuststate = $request['ccuststate'];
  $ctransreceipt = $request['ctransreceipt'];
  $cproditem = $request['cproditem'];
  $ctransaction = $request['ctransaction'];
  $ctransaffiliate = $request['ctransaffiliate'];
  $ctranspublisher = $request['ctranspublisher'];
  $cprodtype = $request['cprodtype'];
  $cprodtitle = $request['cprodtitle'];
  $ctranspaymentmethod = $request['ctranspaymentmethod'];
  $ctransamount = $request['ctransamount'];
  $caffitid = $request['caffitid'];
  $cvendthru = $request['cvendthru'];

  $xverify = sha1("$ccustname|$ccustemail|$ccustcc|$ccuststate|$ctransreceipt|$cproditem|$ctransaction|" . "$ctransaffiliate|$ctranspublisher|$cprodtype|$cprodtitle|$ctranspaymentmethod|$ctransamount|$caffitid|$cvendthru|$secretKey");

  $xverify = strtoupper(substr($xverify, 0, 8));

  return $xverify;
}

/**
 * Validate the Cipher
 */
function ms_clickbank_verify_ipn($request, $secretKey) {
  $ccustname = $request['ccustname'];
  $ccustemail = $request['ccustemail'];
  $ccustcc = $request['ccustcc'];
  $ccuststate = $request['ccuststate'];
  $ctransreceipt = $request['ctransreceipt'];
  $cproditem = $request['cproditem'];
  $ctransaction = $request['ctransaction'];
  $ctransaffiliate = $request['ctransaffiliate'];
  $ctranspublisher = $request['ctranspublisher'];
  $cprodtype = $request['cprodtype'];
  $cprodtitle = $request['cprodtitle'];
  $ctranspaymentmethod = $request['ctranspaymentmethod'];
  $ctransamount = $request['ctransamount'];
  $caffitid = $request['caffitid'];
  $cvendthru = $request['cvendthru'];
  $cverify = $request['cverify'];

  $xverify = sha1("$ccustname|$ccustemail|$ccustcc|$ccuststate|$ctransreceipt|$cproditem|$ctransaction|" . "$ctransaffiliate|$ctranspublisher|$cprodtype|$cprodtitle|$ctranspaymentmethod|$ctransamount|$caffitid|$cvendthru|$secretKey");

  $xverify = strtoupper(substr($xverify, 0, 8));

  if ($cverify == $xverify) {
    return TRUE;
  } else {
    return FALSE;
  }
}

/**
 * New verification script
 *
 * @param $request
 * @param $secret_key
 * @return
 *   TRUE if the ipn passes verification, FALSE otherwise
 */
function ms_clickbank_verify_ipn_2($request, $secret_key) {
  $pop = "";
  $ipn_fields = array();
  foreach ($request as $key => $value) {
    if ($key == "cverify") {
      continue;
    }
    $ipn_fields[] = $key;
  }
  sort($ipn_fields);
  foreach ($ipn_fields as $field) {
    // if Magic Quotes are enabled $_POST[$field] will need to be
    // un-escaped before being appended to $pop
    $pop = $pop . $request[$field] . "|";
  }
  $pop = $pop . $secret_key;
  $calced_verify = sha1(mb_convert_encoding($pop, "UTF-8"));
  $calced_verify = strtoupper(substr($calced_verify, 0, 8));
  return $calced_verify == $request["cverify"];
}


/**
 * Load a saved clickbank product from the database
 */
function ms_clickbank_load_clickbank_product_by_id($clickbank_id) {
  $result = db_query("SELECT * FROM {ms_clickbank_products} WHERE clickbank_id = :clickbank_id", array(':clickbank_id' => $clickbank_id));
  foreach ($result as $row) {
    return $row;
  }
  return FALSE;
}

/**
 * Load a saved clickbank product from the database
 */
function ms_clickbank_load_clickbank_product($cbpid) {
  $result = db_query("SELECT * FROM {ms_clickbank_products} WHERE cbpid = :cbpid", array(':cbpid' => $cbpid));
  foreach ($result as $row) {
    return $row;
  }
  return FALSE;
}

// ======================================
// Forms:
// ======================================

/**
 * Delete a ClickBank Product
 */
function ms_clickbank_delete_clickbank_product_confirm($form, &$form_state, $cbpid) {
  $cb_product = ms_clickbank_load_clickbank_product($cbpid);
  if ($cb_product->cbpid) {
    $form['#cbp_id'] = $cb_product->cbpid;
    return confirm_form($form, t('Are you sure you want to delete this ClickBank Product: %cbprod?', array('%cbprod' => $cb_product->name)), 'admin/moneysuite/gateways/ms_clickbank/products/list', t('This action cannot be undone.'), t('Delete'));
  } else {
    drupal_not_found();
  }
}

/**
 * Delete a ClickBank Product
 */
function ms_clickbank_delete_clickbank_product_confirm_submit($form, &$form_state) {
  $cbpid = $form['#cbp_id'];
  $cb_product = ms_clickbank_load_clickbank_product($cbpid);

  // Delete the clickbank product
  db_delete('ms_clickbank_products')
    ->condition('cbpid', $cb_product->cbpid)
    ->execute();

  drupal_set_message(t('ClickBank Product %cbprod has been deleted', array('%cbprod' => $cb_product->name)));
  $form_state['redirect'] = 'admin/moneysuite/gateways/ms_clickbank/products/list';
}

/**
 * Product Form
 */
function ms_clickbank_product_form($form, $form_state, $action, $cbpid = NULL) {
  $is_edit = FALSE;

  // -----------------------------
  // ClickBank Product Info Settings
  // -----------------------------
  $form['main'] = array(
    '#type' => 'fieldset',
    '#title' => t('ClickBank Product Info'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $cb_product = NULL;

  if ($action == 'edit') {
    $is_edit = TRUE;
    $cb_product = ms_clickbank_load_clickbank_product($cbpid);
    // Store the Membership Plan ID
    $form['main']['cbpid'] = array(
      '#type' => 'value',
      '#value' => $cb_product->cbpid,
    );
  }

  $form['main']['name'] = array(
    '#type' => 'textfield',
    '#title' => t('ClickBank Product Name'),
    '#size' => 32,
    '#maxlength' => 128,
    '#description' => t("The Name of this ClickBank Product"),
    '#default_value' => ($is_edit) ? $cb_product->name : '',
    '#required' => TRUE,
  );
  $form['main']['clickbank_id'] = array(
    '#type' => 'textfield',
    '#title' => t('ClickBank Product ID'),
    '#size' => 32,
    '#maxlength' => 128,
    '#description' => t("The ID Number of the ClickBank Product to Register. This can be found in your ClickBank Account"),
    '#default_value' => ($is_edit) ? $cb_product->clickbank_id : '',
    '#required' => TRUE,
  );
  $form['main']['product'] = array(
    '#type' => 'textfield',
    '#title' => t('MoneySuite Product'),
    '#description' => t('Enter a product below.'),
    '#required' => TRUE,
    '#default_value' => ($is_edit) ? $cb_product->module . '-' . $cb_product->product_id : '',
    '#autocomplete_path' => 'ms_core/autocomplete/product',
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  $form_state['#redirect'] = 'admin/moneysuite/gateways/ms_clickbank/products/list';

  return $form;
}

/**
 * Validation for the product form
 */
function ms_clickbank_product_form_validate($form, &$form_state) {
  $v = $form_state['values'];

  // Check the product is valid
  $p = explode('-', $v['product']);
  if (!$product = ms_core_load_module_product($p[0], $p[1])) {
    form_set_error('product', t('You must enter a valid product'));
  }
}

/**
 * Submit Function for the Add ClickBank Product Form
 */
function ms_clickbank_product_form_submit($form, &$form_state) {
  $form_values = (object)$form_state['values'];

  if (isset($form_values->cbpid)) {
    $cb_product = ms_clickbank_load_clickbank_product($form_values->cbpid);
  } else {
    $cb_product = new stdClass();
  }

  $p = explode('-', $form_values->product);
  $product = ms_core_load_module_product($p[0], $p[1]);

  // Set the values
  $cb_product->name = $form_values->name;
  $cb_product->module = $product->module;
  $cb_product->product_id = $product->id;
  $cb_product->clickbank_id = $form_values->clickbank_id;

  if (isset($form_values->cbpid)) {
    $cb_product->mpid = $form_values->mpid;
    drupal_write_record('ms_clickbank_products', $cb_product, 'cbpid');
  } else {
    drupal_write_record('ms_clickbank_products', $cb_product);
  }

  drupal_set_message(t('ClickBank Product Saved: %sname.', array('%sname' => $cb_product->name)));
}
