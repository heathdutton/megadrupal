<?php

/**
 * @file
 * MoneySuite PayPal Website Payments Pro Payment Gateway
 *
 * Original author: Leighton Whiting - Released under GENERAL PUBLIC LICENSE
 * Current maintenance by multiple MoneySuite users.
 * Re: new initiative: https://www.drupal.org/node/2315653 
 */

/**
 * Implements hook_help().
 */
function ms_paypal_wpp_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/moneysuite/gateways/ms_paypal_wpp":
    case "admin/help#ms_paypal_wpp":
      $output = '<p>' . t("PayPal Website Payments Pro Payment Gateway Module for MoneySuite. This allows
      you to receive payments with your PayPal WPP account. This gateway supports both Recurring and
      Non-Recurring Orders. This gateway supports both the Direct Payments API (allowing you to use a
      hosted credit card form, so users stay on your site) as well as Express Checkout, which redirects users
      to PayPal's secure payment form and allows customers to use their PayPal account to pay for orders.") . '</p>';
      break;
  }
  return $output;
}

/**
 * Make sure PayPal always has access to send IPNs.
 */
function ms_paypal_wpp_ipn_access() {
  return TRUE;
}

/**
 * Access callback that will always return true
 */
function ms_paypal_wpp_access_test() {
  return TRUE;
}

/**
 * Access callback that will always return true
 */
function ms_paypal_wpp_recurring_user_access($user, $rfid) {
  return TRUE;
}

/**
 * Access callback to check if the user can modify their order
 */
function ms_paypal_wpp_modify_test($oid, $id) {
  global $user;
  $order = ms_core_order_load($oid);
  if ($user->uid == $order->uid) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Access callback to check if the user can cancel their order
 */
function ms_paypal_wpp_cancel_test($oid) {
  global $user;
  $order = ms_core_order_load($oid);
  if ($user->uid == $order->uid OR user_access('administer moneysuite orders')) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Access callback that will always return true
 */
function ms_paypal_wpp_checkout_access_test() {
  return TRUE;
}

/**
 * Implements hook_menu().
 */
function ms_paypal_wpp_menu() {
  $items = array();

  // Always accessible, helps for testing while site is offline.
  $items['ms_paypal_wpp/ipn'] = array(
    'title' => 'PayPal IPN',
    'page callback' => 'ms_paypal_wpp_ipn',
    'access callback' => 'ms_paypal_wpp_ipn_access',
    'type' => MENU_CALLBACK,
  );

  $items['ms/checkout/express_checkout'] = array(
    'title' => 'Checkout',
    'page callback' => 'ms_paypal_wpp_ec_redirect',
    'access callback' => 'ms_paypal_wpp_checkout_access_test',
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );

  // Callback functions for Express Checkout.
  $items['ms/cart/echeckout/selected'] = array(
    'title' => 'Review order',
    'page callback' => 'ms_paypal_wpp_ec_review_redirect',
    'access callback' => 'ms_paypal_wpp_checkout_access_test',
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );
  $items['ms/cart/echeckout/review'] = array(
    'title' => 'Review payment',
    'page callback' => 'ms_paypal_wpp_ec_review',
    'access callback' => 'ms_paypal_wpp_checkout_access_test',
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );
  $items['ms/cart/echeckout/submit'] = array(
    'title' => 'Submit order',
    'page callback' => 'ms_paypal_wpp_ec_submit',
    'access callback' => 'ms_paypal_wpp_checkout_access_test',
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );

  $items['ms_paypal_wpp/cancel/%'] = array(
    'title' => 'Cancel Payments',
    'page callback' => 'ms_paypal_wpp_cancel_page',
    'page arguments' => array(2),
    'access callback' => 'ms_paypal_wpp_cancel_test',
    'access arguments' => array(2),
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );
  $items['ms_paypal_wpp/billing/%'] = array(
    'title' => 'Update Billing Information',
    'page callback' => 'ms_paypal_wpp_billing_page',
    'page arguments' => array(2),
    'access callback' => 'ms_paypal_wpp_cancel_test',
    'access arguments' => array(2),
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );
  $items['ms_paypal_wpp/modify/%/%'] = array(
    'title' => 'Modify Payments',
    'page callback' => 'ms_paypal_wpp_modify_page',
    'page arguments' => array(2, 3),
    'access callback' => 'ms_paypal_wpp_modify_test',
    'access arguments' => array(2, 3),
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );
  $items['ms_paypal_wpp/canceled'] = array(
    'title' => 'Payment Canceled',
    'page callback' => 'ms_paypal_wpp_cancel',
    'access callback' => 'ms_paypal_wpp_access_test',
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );

  return $items;
}

/**
 * Admin Settings Form
 */
function ms_paypal_wpp_admin() {
  $form['paypal_wpp']['api'] = array(
    '#type' => 'fieldset',
    '#title' => t('API credentials'),
    '#description' => t('!link for information on obtaining credentials.  You need to acquire an API Signature.  If you have already requested API credentials, you can review your settings under the API Access section of your PayPal profile.', array('!link' => l(t('Click here'), 'https://www.paypal.com/IntegrationCenter/ic_certificate.html'))),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['paypal_wpp']['api']['ms_paypal_wpp_wpp_server'] = array(
    '#type' => 'select',
    '#title' => t('API server'),
    '#description' => t('Sign up for and use a Sandbox account for testing.'),
    '#options' => array(
      'https://api-3t.sandbox.paypal.com/nvp' => t('Sandbox'),
      'https://api-3t.paypal.com/nvp' => t('Live'),
    ),
    '#default_value' => variable_get('ms_paypal_wpp_wpp_server', 'https://api-3t.sandbox.paypal.com/nvp'),
  );
  $form['paypal_wpp']['api']['ms_paypal_wpp_api_username'] = array(
    '#type' => 'textfield',
    '#title' => t('API username'),
    '#default_value' => variable_get('ms_paypal_wpp_api_username', ''),
  );
  $form['paypal_wpp']['api']['ms_paypal_wpp_api_password'] = array(
    '#type' => 'textfield',
    '#title' => t('API password'),
    '#default_value' => variable_get('ms_paypal_wpp_api_password', ''),
  );
  $form['paypal_wpp']['api']['ms_paypal_wpp_api_signature'] = array(
    '#type' => 'textfield',
    '#title' => t('Signature'),
    '#default_value' => variable_get('ms_paypal_wpp_api_signature', ''),
  );
  $form['paypal_wpp']['instructions'] = array(
    '#type' => 'fieldset',
    '#title' => t('IPN Instructions'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['paypal_wpp']['instructions']['ms_paypal_wpp_ipn_instructions'] = array(
    '#type' => 'textfield',
    '#title' => t('IPN URL'),
    '#attributes' => array('readonly' => 'readonly'),
    '#default_value' => url('ms_paypal_wpp/ipn', array('absolute' => TRUE)),
    '#description' => t('Currently, PayPal WPP does not support dynamic IPN URL settings when using Recurring Payments.
      This will hopefully be fixed soon, but until then, it is necessary to set your IPN Notification URL to the above in your PayPal Account.
      !link for instructions on how to do this. See !info for more information about this issue.',
      array(
        '!link' => l(t('Click here'), 'https://cms.paypal.com/us/cgi-bin/?cmd=_render-content&content_ID=developer/e_howto_admin_IPNSetup'),
        '!info' => l(t('this page'), 'https://www.x.com/developers/paypal/forums/instant-payment-notifications-ipn-payment-data-transfer-pdt/multiple-site-multiple-ipn#answer-182618'),
      )),
  );
  $form['general'] = array(
    '#type' => 'fieldset',
    '#title' => t('General Settings'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['general']['ms_paypal_wpp_max_failed_payments'] = array(
    '#type' => 'select',
    '#title' => t('Max Failed Payment Retry'),
    '#description' => t('How many failed payments will be allowed until the membership is cancelled?'),
    '#options' => range(0, 10),
    '#default_value' => variable_get('ms_paypal_wpp_max_failed_payments', 3),
  );
  $form['advanced'] = array(
    '#type' => 'fieldset',
    '#title' => t('Advanced Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['advanced']['ms_paypal_wpp_page_style'] = array(
    '#type' => 'textfield',
    '#title' => t('Page Style Name'),
    '#size' => 64,
    '#maxlength' => 128,
    '#default_value' => variable_get('ms_paypal_wpp_page_style', ''),
    '#description' => t("The style name of your custom paypal style. If you want to just use PayPal's Default style, leave this blank."),
    '#required' => FALSE,
    '#ms_override' => TRUE,
  );
  $form['notes'] = array(
    '#type' => 'fieldset',
    '#title' => t('Notes'),
  );
  $form['notes']['modification_notes'] = array(
    '#type' => 'item',
    '#title' => t("Recurring Payments Modification Notes"),
    '#markup' => t("NOTE: You cannot modify the billing frequency or billing period of a profile. You can
modify the number of billing cycles in the profile. Please keep this in mind when setting up which products
can be upgraded/downgraded to other products.
NOTE: For recurring payments with Express Checkout, certain updates, such as billing
amount, are not allowed within 3 days of the scheduled billing date, and an error is
returned.")
  );

  return $form;
}

/**
 * Implements hook_ms_core_payment_gateway().
 */
function ms_paypal_wpp_ms_core_payment_gateway() {
  $cards = array('visa', 'mc', 'discover', 'amex');
  $pp_cards = $cards + array('paypal' => 'paypal', 'echeck' => 'echeck');

  $gateways['ms_paypal_wpp_ec'] = array(
    'name' => 'PayPal WPP - Express Checkout',
    'display_name' => 'PayPal',
    'description' => '<img src="https://www.paypal.com/en_US/i/logo/PayPal_mark_37x23.gif" style="position: relative; top: 5px; margin-right: 4px;" />'
      . t('PayPal - pay without sharing your financial information.'),
    'module' => 'ms_paypal_wpp_ec',
    'cards' => $pp_cards,
    'checkout_path' => 'ms/checkout/express_checkout',
    'cancel_url' => 'ms_paypal_wpp_get_cancel_url',
    'modify_url' => 'ms_paypal_wpp_get_modify_url',
    'settings' => ms_paypal_wpp_admin(),
  );
  $gateways['ms_paypal_wpp_dp'] = array(
    'name' => 'PayPal WPP - Direct Payment',
    'display_name' => t('Credit Card'),
    'description' => t('Pay with a credit card.'),
    'cards' => $cards,
    'module' => 'ms_paypal_wpp_dp',
    'checkout_form' => 'ms_paypal_wpp_direct_payment_checkout_form',
    'cancel_url' => 'ms_paypal_wpp_get_cancel_url',
    'modify_url' => 'ms_paypal_wpp_get_modify_url',
    'billing_url' => 'ms_paypal_wpp_get_billing_url',
    'settings' => ms_paypal_wpp_admin(),
  );

  return $gateways;
}

/**
 * Get the Change Billing URL
 */
function ms_paypal_wpp_get_billing_url($order) {
  return 'ms_paypal_wpp/billing/' . $order->oid;
}

/**
 * Page Callback for the Billing Info page
 */
function ms_paypal_wpp_billing_page($oid) {
  if ($order = ms_core_order_load($oid)) {
    return drupal_get_form('ms_paypal_wpp_billing_page_form', $order);
  }

  return t('There was an error.');
}

/**
 * Form to change the billing info
 */
function ms_paypal_wpp_billing_page_form($form, &$form_state, $order) {
  $form['oid'] = array(
    '#type' => 'value',
    '#value' => $order->oid,
  );

  $payment_profile = ms_core_payment_profile_load_by_oid($order->oid);

  $form['ms_paypal_wpp_card'] = array(
    '#type' => 'fieldset',
    '#title' => t('Credit Card Information'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#description' => t('Please enter the new billing information you would like to use.'),
  );

  // Credit Card Info
  $form['ms_paypal_wpp_card']['cc_first_name'] = array(
    '#type' => 'textfield',
    '#title' => t('First Name'),
    '#size' => 80,
    '#maxlength' => 120,
    '#required' => TRUE,
    '#desription' => t('The First Name as it appears on the card.'),
    '#default_value' => $payment_profile->first_name,
  );
  $form['ms_paypal_wpp_card']['cc_last_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Last Name'),
    '#size' => 80,
    '#maxlength' => 120,
    '#required' => TRUE,
    '#desription' => t('The Last Name as it appears on the card.'),
    '#default_value' => $payment_profile->last_name,
  );

  $cards = array(
    'visa' => 'Visa',
    'mc' => 'MasterCard',
    'amex' => 'American Express',
    'discover' => 'Discover',
    'diners' => 'Diners',
    'jcb' => 'JCB',
  );

  $allowed_cards = ms_core_get_cards($cards, variable_get('ms_paypal_wpp_dp_allowed_cards', array('visa', 'mc', 'discover', 'amex', 'echeck', 'paypal')));

  $form['ms_paypal_wpp_card']['cc_type'] = array(
    '#type' => 'select',
    '#title' => t('Card Type'),
    '#options' => $allowed_cards,
    '#description' => t("Select the Card Type."),
    '#default_value' => $payment_profile->cc_type,
    '#required' => TRUE,
  );
  $form['ms_paypal_wpp_card']['cc_number'] = array(
    '#type' => 'textfield',
    '#title' => t('Credit Card Number'),
    '#size' => 40,
    '#maxlength' => 20,
    '#description' => t("The Credit Card Number. This is encrypted for your safety. You must enter the full card number if you are making any changes."),
    '#required' => TRUE,
    '#default_value' => $payment_profile->cc_num,
  );
  $form['ms_paypal_wpp_card']['cc_exp_month'] = array(
    '#type' => 'select',
    '#title' => t('Month'),
    '#options' => ms_core_get_months(),
    '#description' => t("The month this credit card expires."),
    '#default_value' => str_pad($payment_profile->exp_month, 2, 0, STR_PAD_LEFT),
    '#required' => TRUE,
  );
  $form['ms_paypal_wpp_card']['cc_exp_year'] = array(
    '#type' => 'select',
    '#title' => t('Year'),
    '#options' => ms_core_get_years(),
    '#description' => t("The year this credit card expires."),
    '#default_value' => $payment_profile->exp_year,
    '#required' => TRUE,
  );
  $form['ms_paypal_wpp_card']['cc_cvv'] = array(
    '#type' => 'textfield',
    '#title' => t('Credit Card Verification Code'),
    '#size' => 5,
    '#maxlength' => 5,
    '#description' => t("Enter the Credit Card Verification Code."),
    '#required' => FALSE,
  );

  $form['ms_paypal_wpp_billing'] = array(
    '#type' => 'fieldset',
    '#title' => t('Billing Info'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );

  // Billing Info
  $form['ms_paypal_wpp_billing']['billing_address1'] = array(
    '#type' => 'textfield',
    '#title' => t('Address Line 1'),
    '#size' => 80,
    '#required' => TRUE,
    '#default_value' => $payment_profile->address,
  );
  $form['ms_paypal_wpp_billing']['billing_city'] = array(
    '#type' => 'textfield',
    '#title' => t('City'),
    '#size' => 40,
    '#required' => TRUE,
    '#default_value' => $payment_profile->city,
  );
  $form['ms_paypal_wpp_billing']['billing_state'] = array(
    '#type' => 'textfield',
    '#title' => t('State'),
    '#size' => 40,
    '#description' => t('Enter the 2 Letter Code for the State'),
    '#required' => TRUE,
    '#default_value' => $payment_profile->state,
  );
  $form['ms_paypal_wpp_billing']['billing_zip'] = array(
    '#type' => 'textfield',
    '#title' => t('Zip Code'),
    '#size' => 20,
    '#required' => TRUE,
    '#default_value' => $payment_profile->zip,
  );
  $form['ms_paypal_wpp_billing']['billing_country'] = array(
    '#type' => 'select',
    '#title' => t('Country'),
    '#options' => ms_core_get_countries('iso'),
    '#required' => TRUE,
    '#default_value' => $payment_profile->country,
  );
  $form['ms_paypal_wpp_billing']['billing_phone'] = array(
    '#type' => 'textfield',
    '#title' => t('Phone Number'),
    '#size' => 40,
    '#required' => FALSE,
    '#default_value' => $payment_profile->phone,
  );
  $form['ms_paypal_wpp_billing']['billing_email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email'),
    '#size' => 40,
    '#required' => TRUE,
    '#default_value' => $payment_profile->email,
  );

  $form['#validate'][] = 'ms_core_cc_form_validate';
  $form['#validate'][] = 'ms_paypal_wpp_billing_page_form_validate';

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );

  return $form;
}

/**
 * Validate the Info and Update the Profile
 */
function ms_paypal_wpp_billing_page_form_validate($form, &$form_state) {
  $v = $form_state['values'];

  $order = ms_core_order_load($v['oid']);

  // Get the subscription_id from the order
  $profile_id = ms_core_get_order_rec_id($order->oid);

  $updates = array(
    'EXPDATE' => $v['cc_exp_month'] . $v['cc_exp_year'],
    'FIRSTNAME' => $v['cc_first_name'],
    'LASTNAME' => $v['cc_last_name'],
    'STREET' => $v['billing_address1'],
    'CITY' => $v['billing_city'],
    'STATE' => $v['billing_state'],
    'ZIP' => $v['billing_zip'],
    'COUNTRYCODE' => $v['billing_country'],
    'EMAIL' => $v['billing_email'],
    'DESC' => ms_core_get_order_title($order, 127),
  );

  if (!strstr($v['cc_number'], 'X')) {
    $updates['ACCT'] = $v['cc_number'];
    $updates['CREDITCARDTYPE'] = ms_paypal_wpp_get_cc_type($v['cc_type']);
    $updates['CVV2'] = $v['cc_cvv'];
  }

  if ($v['billing_phone']) {
    $updates['SHIPTOPHONENUM'] = $v['billing_phone'];
  }

  $result = ms_paypal_wpp_recurring_update($order, $profile_id, $updates);

  if ($result['success']) {
    drupal_set_message(t('Successfully changed your billing information.'));

    $payment_profile = array(
      'oid' => $order->oid,
      'uid' => $order->uid,
      'module' => 'ms_paypal_wpp_dp',
      'status' => 1,
      'first_name' => $v['cc_first_name'],
      'last_name' => $v['cc_last_name'],
      'address' => $v['billing_address1'],
      'city' => $v['billing_city'],
      'state' => $v['billing_state'],
      'zip' => $v['billing_zip'],
      'country' => $v['billing_country'],
      'phone' => $v['billing_phone'],
      'email' => $v['billing_email'],
      'fax' => '',
      'cc_type' => $v['cc_type'],
      'cc_num' => $v['cc_number'],
      'exp_month' => $v['cc_exp_month'],
      'exp_year' => $v['cc_exp_year'],
    );
    ms_core_payment_profile_save($payment_profile);
  } else {
    form_set_error('cc_number', t('Error: @num - @message', array('@num' => $result['code'], '@message' => $result['message'])));
  }
}

/**
 * Get the Cancellation URL for a recurring order
 */
function ms_paypal_wpp_get_cancel_url($order) {
  return 'ms_paypal_wpp/cancel/' . $order->oid;
}

/**
 * Initiate a cancellation
 */
function ms_paypal_wpp_cancel_page($oid) {
  return drupal_get_form('ms_paypal_wpp_cancel_page_confirm', $oid);
}

/**
 * Initiate a cancellation
 */
function ms_paypal_wpp_cancel_page_confirm($form, &$form_state, $oid) {
  $order = ms_core_order_load($oid);
  $form['#ms_core_oid'] = $order->oid;
  return confirm_form($form, t('Are you sure you want to cancel your order?'), '', t('This action cannot be undone.'), t('Confirm'));
}

/**
 * Initiate a cancellation
 */
function ms_paypal_wpp_cancel_page_confirm_submit($form, &$form_state) {
  $order = ms_core_order_load($form['#ms_core_oid']);

  // Get the subscription_id from the order
  $subscription_id = ms_core_get_order_rec_id($order->oid);

  $nvp_request = array(
    'METHOD' => 'ManageRecurringPaymentsProfileStatus',
    'PROFILEID' => $subscription_id,
    'ACTION' => 'Cancel',
    'NOTE' => t('Canceled through User Account'),
  );

  $nvp_response = ms_paypal_wpp_api_request($nvp_request, variable_get('ms_paypal_wpp_wpp_server', 'https://api-3t.sandbox.paypal.com/nvp'));

  if (isset($nvp_response['ACK']) AND $nvp_response['ACK'] == 'Success') {
    // Enter the rec_cancel payment
    $payment = ms_core_new_payment($order->oid, 'ms_paypal_wpp_ec', 'rec_cancel');

    // Generate a Unique Transaction ID
    $payment->transaction = $nvp_response['CORRELATIONID'];
    $payment->currency = $order->currency;
    $payment->recurring_id = $nvp_response['PROFILEID'];
    $payment->billing_address = $order->billing_address;
    $payment->shipping_address = $order->shipping_address;

    ms_core_enter_payment($payment);
  } else {
    // Log the error
    ms_core_log_error('ms_paypal_wpp', 'There was a problem canceling the order: @error',
      array('@error' => $nvp_response['L_LONGMESSAGE0']));
    drupal_set_message(t('There was an error canceling the order. The error has been logged.'), 'error');
  }
}

/**
 * Get the Modification URL for a recurring order
 */
function ms_paypal_wpp_get_modify_url($order, $id) {
  return 'ms_paypal_wpp/modify/' . $order->oid . '/' . $id;
}

/**
 * Initiate an order modification
 */
function ms_paypal_wpp_modify_confirm($form, &$form_state, $oid, $id) {
  $order = ms_core_order_load($oid);

  $module = ms_core_get_order_module($order);
  if ($new_product = ms_core_load_module_product($module, $id)) {
    // Show if there will be a charge
    $details_text = t('Your order will be modified immediately.');

    $form['#ms_core_oid'] = $order->oid;
    $form['#ms_core_id'] = $id;
    return confirm_form($form, t('Are you sure you want to change your order to %new_prod?',
      array('%new_prod' => $new_product->name)), '', $details_text, t('Confirm'));
  } else {
    drupal_set_message(t("Error loading the product: @id.", array('@id' => $module . '-' . $id)));
    drupal_not_found();
  }
}

/**
 * Submit callback when modifying an order
 */
function ms_paypal_wpp_modify_confirm_submit($form, &$form_state) {
  // Load the order and products
  $order = ms_core_order_load($form['#ms_core_oid']);

  $new_product = ms_core_load_module_product(ms_core_get_order_module($order), $form['#ms_core_id']);

  // Remove trial periods if any from modifications
  $new_product->recurring_schedule['has_trial'] = FALSE;
  $new_product->recurring_schedule['trial_length'] = 0;

  // Remove any coupons from the order
  ms_core_remove_order_adjustments($order);

  $data['new_product'] = $new_product;

  $order = ms_core_add_data($order, $data);

  // Get the subscription_id from the order
  $profile_id = ms_core_get_order_rec_id($order->oid);

  $updates = array(
    'AMT' => round($new_product->recurring_schedule['main_amount'], 2),
    'DESC' => ms_core_get_order_title($order, 127),
    'BILLINGPERIOD' => ms_paypal_wpp_switch_unit($new_product->recurring_schedule['main_unit']),
    'BILLINGFREQUENCY' => $new_product->recurring_schedule['main_length'],
    'TOTALBILLINGCYCLES' => $new_product->recurring_schedule['total_occurrences'],
    'PROFILESTARTDATE' => date(DATE_ATOM),
  );

  $result = ms_paypal_wpp_recurring_update($order, $profile_id, $updates);

  if ($result['success']) {
    drupal_set_message(t('Your billing cycle has been modified. Thank you.'));

    // Enter the rec_modify payment
    $payment = ms_core_new_payment($order->oid, 'ms_paypal_wpp_dp', 'rec_modify');

    $payment->transaction = $result['txn_id'];
    $payment->recurring_id = $profile_id;
    $payment->currency = $order->currency;
    $payment->data = array('new_product' => $new_product);
    $payment->billing_address = $order->billing_address;
    $payment->shipping_address = $order->shipping_address;

    ms_core_enter_payment($payment);

    drupal_goto();
  } else {
    drupal_set_message(t('There was a problem modifying your billing cycle. The error has been logged. Please contact a site admin for further help.'));
    // Log the error
    ms_core_log_error('ms_paypal_wpp', 'There was a problem changing the recurring payments: @error',
      array('@error' => $result['code'] . ' : ' . $result['message']));

    drupal_goto();
  }
}

/**
 * Initiate a modification
 */
function ms_paypal_wpp_modify_page($oid, $id) {
  return drupal_get_form('ms_paypal_wpp_modify_confirm', $oid, $id);
}

/**
 * Build error message(s) from PayPal failure responses.
 */
function _ms_paypal_wpp_build_error_messages($nvp_response) {
  $code = 0;
  $message = '';
  while (array_key_exists('L_SEVERITYCODE' . $code, $nvp_response)) {
    $message .= '<br /><b>' . check_plain($nvp_response['L_SEVERITYCODE' . $code]) . ':</b> ' . check_plain($nvp_response['L_ERRORCODE' . $code]) . ': ' . check_plain($nvp_response['L_LONGMESSAGE' . $code]);
    $code++;
  }
  return $message;
}

/*******************************************************************************
 * EXPRESS CHECKOUT
 ******************************************************************************/

/**
 * Redirects if a customer selects PayPal Express Checkout as a payment method.
 */
function ms_paypal_wpp_ec_redirect() {
  // Load the order
  if (!$order = ms_core_load_session_order()) {
    // Error
    drupal_set_message(t('There was an error with the checkout'));
    drupal_goto('');
  }

  $nvp_request = array(
    'METHOD' => 'SetExpressCheckout',
    'RETURNURL' => url('ms/cart/echeckout/selected', array('absolute' => TRUE)),
    'CANCELURL' => url('ms_paypal_wpp/canceled', array('absolute' => TRUE)),
    'AMT' => $order->amount,
    'CURRENCYCODE' => ms_core_variable_get('ms_core_default_currency', 'USD', $order),
    'PAYMENTACTION' => variable_get('ms_paypal_wpp_wpp_payment_action', 'Sale'),
    'DESC' => ms_core_get_order_title($order, 127),
    'INVNUM' => $order->oid . '-' . REQUEST_TIME,
    'REQCONFIRMSHIPPING' => variable_get('ms_paypal_wpp_ec_rqconfirmed_addr', 0),
  );

  // Add in some recurring specific variables
  if ($order->order_type == 'recurring') {
    $nvp_request['L_BILLINGTYPE0'] = 'RecurringPayments';
    $nvp_request['L_BILLINGAGREEMENTDESCRIPTION0'] = ms_core_get_order_title($order, 127);
  }

  if (variable_get('ms_paypal_wpp_page_style', '')) {
    $nvp_request['PAGESTYLE'] = variable_get('ms_paypal_wpp_page_style', '');
  }

  $nvp_response = ms_paypal_wpp_api_request($nvp_request, variable_get('ms_paypal_wpp_wpp_server', 'https://api-3t.sandbox.paypal.com/nvp'));

  if (isset($nvp_response['ACK']) AND $nvp_response['ACK'] != 'Success') {
    ms_core_log_error('ms_paypal_wpp', 'Error Request: !request Response: !response',
      array('!request' => ms_core_print_r($nvp_request), '!response' => ms_core_print_r($nvp_response)));
    drupal_set_message(t('Error message from PayPal:<br />@message', array('@message' => $nvp_response['L_LONGMESSAGE0'])), 'error');
    drupal_goto('');
  }

  $_SESSION['TOKEN'] = $nvp_response['TOKEN'];

  $sandbox = '';
  if (strpos(variable_get('ms_paypal_wpp_wpp_server', 'https://api-3t.sandbox.paypal.com/nvp'), 'sandbox') > 0) {
    $sandbox = 'sandbox.';
  }

  header('Location: https://www.' . $sandbox . 'paypal.com/cgi-bin/webscr?cmd=_express-checkout&token=' . $_SESSION['TOKEN']);
  exit();
}

/**
 * Charge the Express Checkout order
 */
function ms_paypal_wpp_ec_submit_form_submit($form, &$form_state) {
  $order = ms_core_load_session_order();
  if (!isset($_SESSION['TOKEN']) || $order == FALSE) {
    unset($_SESSION['ms_oid']);
    unset($_SESSION['TOKEN'], $_SESSION['PAYERID']);
    drupal_set_message(t('An error has occurred in your PayPal payment. Please review your cart and try again.'));
    drupal_goto('ms/cart');
  }

  switch ($order->order_type) {
    case 'recurring':
      $data = array(
        'TOKEN' => $_SESSION['TOKEN'],
        'PAYERID' => $_SESSION['PAYERID'],
      );
      $response = ms_paypal_wpp_setup_recurring_payment($order, $data, $order->recurring_schedule);

      if ($response['success']) {
        // Add the payment to the order
        $form_state['values']['ms_oid'] = $order->oid;
        $form_state['values']['ms_order_charged'] = TRUE;

        // Insert the rec_signup Payment to the database
        $payment = ms_core_new_payment($order->oid, 'ms_paypal_wpp_ec', 'rec_signup');

        $payment->transaction = $response['data']['txn_id'];
        $payment->currency = $order->currency;
        $payment->data = $response['data'];
        $payment->recurring_id = $response['data']['subscr_id'];

        $v = $response['data']['nvp_details'];
        $payment->billing_address = array(
          'street' => isset($v['SHIPTOSTREET']) ? trim($v['SHIPTOSTREET']) : '',
          'city' => isset($v['SHIPTOCITY']) ? trim($v['SHIPTOCITY']) : '',
          'state' => isset($v['SHIPTOSTATE']) ? trim($v['SHIPTOSTATE']) : '',
          'zip' => isset($v['SHIPTOZIP']) ? trim($v['SHIPTOZIP']) : '',
          'country' => isset($v['SHIPTOCOUNTRYCODE']) ? trim($v['SHIPTOCOUNTRYCODE']) : '',
          'phone' => isset($v['PHONENUM']) ? trim($v['PHONENUM']) : '',
        );

        // Update the contact details
        $name = explode(' ', $v['SUBSCRIBERNAME']);
        $payment->first_name = $name[0];
        $payment->last_name = $name[1];

        // Add the Payment to the Order
        $payment->amount = !empty($response['data']['nvp_details']['AMT']) ? $response['data']['nvp_details']['AMT'] : 0;
        ms_core_enter_payment($payment);

        // Prevent Duplicate Processing
        unset($_SESSION['TOKEN'], $_SESSION['PAYERID']);

        // Redirect
        $form_state['redirect'] = 'ms/thankyou';
      } else {
        // Log the error
        ms_core_log_error('ms_paypal_wpp', 'Error Setting up Recurring Payments: @message',
          array('@message' => $response['message']));
      }
      break;

    case 'cart':
      $result = ms_paypal_wpp_ec_do_express_checkout_payment($_SESSION['TOKEN'], $_SESSION['PAYERID'], $order, FALSE);

      if ($result['success']) {
        ms_core_add_history_item($order, 0, t('Payment of @amount received through PayPal.',
          array('@amount' => ms_core_format_money($result['amount'], $order->currency))));

        // Prevent Duplicate Processing
        unset($_SESSION['TOKEN'], $_SESSION['PAYERID']);

        // Insert the Payment to the database
        $payment = ms_core_new_payment($order->oid, 'ms_paypal_wpp_ec', 'cart');

        $payment->transaction = $result['data']['txn_id'];
        $payment->amount = $result['amount'];
        $payment->currency = $order->currency;
        $payment->data = $result['data'];

        $v = $result['data']['nvp_details'];

        $payment->billing_address = array(
          'street' => isset($v['SHIPTOSTREET']) ? trim($v['SHIPTOSTREET']) : '',
          'city' => isset($v['SHIPTOCITY']) ? trim($v['SHIPTOCITY']) : '',
          'state' => isset($v['SHIPTOSTATE']) ? trim($v['SHIPTOSTATE']) : '',
          'zip' => isset($v['SHIPTOZIP']) ? trim($v['SHIPTOZIP']) : '',
          'country' => isset($v['SHIPTOCOUNTRYCODE']) ? trim($v['SHIPTOCOUNTRYCODE']) : '',
          'phone' => isset($v['PHONENUM']) ? trim($v['PHONENUM']) : '',
        );

        // Update the contact details
        $payment->first_name = trim($v['FIRSTNAME']);
        $payment->last_name = trim($v['LASTNAME']);

        // Add the Payment to the Order
        ms_core_enter_payment($payment);

        $form_state['redirect'] = 'ms/thankyou';
      } else { // There was a problem
        drupal_set_message(t('Error: %error', array('%error' => $result['message'])));
      }
      break;
  }
}

/**
 * Do Express Checkout Payment
 */
function ms_paypal_wpp_ec_do_express_checkout_payment($token, $payer_id, $order, $notify = TRUE) {
  $subtotal = $order->amount;

  $nvp_request = array(
    'METHOD' => 'DoExpressCheckoutPayment',
    'TOKEN' => $token,
    'PAYMENTACTION' => variable_get('ms_paypal_wpp_wpp_payment_action', 'Sale'),
    'PAYERID' => $payer_id,
    'AMT' => $order->amount,
    'DESC' => ms_core_get_order_title($order, 127),
    'INVNUM' => $order->oid . '-' . REQUEST_TIME,
    'BUTTONSOURCE' => 'MoneySuite_ShoppingCart_EC_US',
    'ITEMAMT' => $subtotal,
    'SHIPPINGAMT' => 0,
    'TAXAMT' => 0,
    'CURRENCYCODE' => ms_core_variable_get('ms_core_default_currency', 'USD', $order),
  );

  if ($notify) {
    $nvp_request['NOTIFYURL'] = url('ms_paypal_wpp/ipn/' . $order->oid, array('absolute' => TRUE));
  }

  $nvp_response = ms_paypal_wpp_api_request($nvp_request, variable_get('ms_paypal_wpp_wpp_server', 'https://api-3t.sandbox.paypal.com/nvp'));

  ms_core_log('ms_paypal_wpp', 'Express Response: ' . ms_core_print_r($nvp_response));

  switch ($nvp_response['ACK']) {
    /** @noinspection PhpMissingBreakStatementInspection */
    case 'SuccessWithWarning':
      ms_core_log_error('ms_paypal_wpp', '<b>Payment succeeded with a warning.</b>!paypal_message',
        array(
          '!paypal_message' => _ms_paypal_wpp_build_error_messages($nvp_response),
        ),
        WATCHDOG_WARNING,
        l(t('view order'), 'admin/moneysuite/orders/view/' . $order->oid)
      );
    // Fall through.
    case 'Success':
      // Get the address of the customer using GetExpressCheckoutDetails
      $nvp_details_request = array(
        'METHOD' => 'GetExpressCheckoutDetails',
        'TOKEN' => $token,
      );

      $nvp_details = ms_paypal_wpp_api_request($nvp_details_request, variable_get('ms_paypal_wpp_wpp_server', 'https://api-3t.sandbox.paypal.com/nvp'));

      ms_core_log('ms_paypal_wpp', 'Express Details: ' . ms_core_print_r($nvp_details));

      $message = t('Payment succeeded.');

      $result = array(
        'success' => TRUE,
        'comment' => t('PayPal transaction ID: @transactionid', array('@transactionid' => $nvp_details['CORRELATIONID'])),
        'message' => $message,
        'amount' => $nvp_details['AMT'],
        'data' => array(
          'txn_id' => check_plain($nvp_details['CORRELATIONID']),
          'nvp_response' => $nvp_response,
          'nvp_details' => $nvp_details,
        ),
      );
      break;
    case 'FailureWithWarning':
      // Fall through.
    case 'Failure':
      $message = t('<b>Payment failed.</b>!paypal_message',
        array('!paypal_message' => _ms_paypal_wpp_build_error_messages($nvp_response)));
      $result = array(
        'success' => FALSE,
        'message' => $message,
        'data' => array(
          'nvp_response' => $nvp_response,
        ),
      );
      break;
    default:
      $message = t('Unexpected acknowledgement status: @status', array('@status' => $nvp_response['ACK']));
      $result = array(
        'success' => NULL,
        'message' => $message,
        'data' => array(
          'nvp_response' => $nvp_response,
        ),
      );
      break;
  }

  return $result;
}

/**
 * Handles the review page for Express Checkout Mark Flow.
 */
function ms_paypal_wpp_ec_review_redirect() {
  if (!isset($_SESSION['TOKEN']) || ($order = ms_core_load_session_order()) == FALSE) {
    unset($_SESSION['ms_oid']);
    unset($_SESSION['TOKEN'], $_SESSION['PAYERID']);
    drupal_set_message(t('An error has occurred in your PayPal payment. Please review your cart and try again.'));
    drupal_goto('ms/cart');
  }

  $nvp_request = array(
    'METHOD' => 'GetExpressCheckoutDetails',
    'TOKEN' => $_SESSION['TOKEN'],
  );

  $nvp_response = ms_paypal_wpp_api_request($nvp_request, variable_get('ms_paypal_wpp_wpp_server', 'https://api-3t.sandbox.paypal.com/nvp'));

  $_SESSION['PAYERID'] = $nvp_response['PAYERID'];

  drupal_goto('ms/cart/echeckout/review');
}

/**
 * Handles the review page for Express Checkout Shortcut Flow.
 */
function ms_paypal_wpp_ec_review() {
  $order = ms_core_load_session_order();
  if (!isset($_SESSION['TOKEN']) || ($order == FALSE)) {
    unset($_SESSION['ms_oid']);
    unset($_SESSION['TOKEN'], $_SESSION['PAYERID']);
    drupal_set_message(t('An error has occurred in your PayPal payment. Please review your cart and try again.'));
    drupal_goto('ms/cart');
  }

  if (!isset($_SESSION['have_details'][$order->oid]) OR $_SESSION['have_details'][$order->oid] !== TRUE) {
    $nvp_request = array(
      'METHOD' => 'GetExpressCheckoutDetails',
      'TOKEN' => $_SESSION['TOKEN'],
    );

    $nvp_response = ms_paypal_wpp_api_request($nvp_request, variable_get('ms_paypal_wpp_wpp_server', 'https://api-3t.sandbox.paypal.com/nvp'));

    $_SESSION['PAYERID'] = $nvp_response['PAYERID'];

    $_SESSION['have_details'][$order->oid] = TRUE;
  }

  drupal_goto('ms/cart/echeckout/submit');
}

/**
 * Present the final total to the user for checkout!
 */
function ms_paypal_wpp_ec_submit() {
  $order = ms_core_load_session_order();
  if (!isset($_SESSION['TOKEN']) || ($order == FALSE)) {
    unset($_SESSION['ms_oid']);
    unset($_SESSION['TOKEN'], $_SESSION['PAYERID']);
    drupal_set_message(t('An error has occurred in your PayPal payment. Please review your cart and try again.'));
    drupal_goto('ms/cart');
  }

  $output = '<div>' . ms_core_get_order_details_table($order) . '</div>';
  $output .= '<p>' . t("Your order is not complete until you click the 'Submit order' button below. Your PayPal account will be charged for the amount shown above once your order is placed. You will receive confirmation once your payment is complete.") . '</p>';

  $build = array();
  $build['content'] = array(
    'ms_paypal_wpp_ec_submit_html' => array(
      '#markup' => $output,
    ),
    'ms_paypal_wpp_ec_submit_form' => drupal_get_form('ms_paypal_wpp_ec_submit_form'),
  );

  return $build;
}

/**
 * Submits an order, calling the NVP API to send the order total to PayPal.
 */
function ms_paypal_wpp_ec_submit_form($form) {
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit order'),
  );

  return $form;
}

/*******************************************************************************
 * IPNs AND RETURN PAGE
 ******************************************************************************/

/**
 * Process Instant Payment Notifiations from PayPal.
 */
function ms_paypal_wpp_ipn($oid = 0) {
  // Give other modules a chance to act on this IPN
  if ($_POST['txn_type'] == 'masspay') {
    module_invoke_all('ms_paypal_wpp_masspay_ipn', $_POST);
    return;
  }

  if (isset($_POST['invoice'])) {
    if (($len = strpos($_POST['invoice'], '-')) > 0) { // For regular cart payments
      $order = ms_core_order_load(intval(substr($_POST['invoice'], 0, $len)));
    } else {
      $order = ms_core_order_load(intval($_POST['invoice']));
    }
  } elseif (isset($_POST['rp_invoice_id'])) { // For Recurring Payments
    // Load the order for a recurring payment from the rp_invoice_id
    $order = ms_core_order_load(intval($_POST['rp_invoice_id']));
  } elseif (isset($_POST['recurring_payment_id'])) {
    $order = ms_core_order_load_by_rec_id($_POST['recurring_payment_id']);
  }

  // Attempt to load the order for this IPN
  if (empty($order)) {
    // If no order found, log an error and exit
    ms_core_log_error('ms_paypal_wpp', 'IPN attempted for non-existent order. Details: !ipn',
      array('!ipn' => ms_core_print_r($_POST)));
    return;
  }

  // Validate the IPN
  if ($ipn = ms_paypal_wpp_ipn_handler($_POST)) {
    ms_core_log('ms_paypal_wpp', 'IPN received. Details: !ipn',
      array('!ipn' => ms_core_print_r($ipn)));
    // Insert the Payment to the order
    $payment = ms_core_new_payment($order->oid, $order->gateway, ms_paypal_wpp_get_type($ipn['txn_type']));
    $payment->transaction = isset($ipn['txn_id']) ? $ipn['txn_id'] : ms_core_new_transaction($ipn);
    $payment->amount = isset($ipn['mc_gross']) ? $ipn['mc_gross'] : 0;
    $payment->currency = isset($ipn['mc_currency']) ? $ipn['mc_currency'] : $payment->currency;
    $payment->recurring_id = '';
    if (isset($ipn['subscr_id'])) {
      $payment->recurring_id = $ipn['subscr_id'];
    }
    if (isset($ipn['recurring_payment_id'])) {
      $payment->recurring_id = $ipn['recurring_payment_id'];
    }
    $payment->data = $ipn;

    // Update the address
    $payment->billing_address = array(
      'street' => isset($ipn['address_street']) ? $ipn['address_street'] : '',
      'city' => isset($ipn['address_city']) ? $ipn['address_city'] : '',
      'state' => isset($ipn['address_state']) ? $ipn['address_state'] : '',
      'zip' => isset($ipn['address_zip']) ? $ipn['address_zip'] : '',
      'country' => isset($ipn['address_country']) ? $ipn['address_country'] : '',
      'phone' => isset($ipn['contact_phone']) ? $ipn['contact_phone'] : '',
    );

    // Update the contact details
    $payment->first_name = $ipn['first_name'];
    $payment->last_name = $ipn['last_name'];

    switch ($payment->type) {
      case 'rec_payment':
        // Add the Payment to the Order
        ms_core_enter_payment($payment);
        break;

      case 'rec_signup':
        // The signup is handled via the API
        // ms_core_enter_payment($payment);
        break;

      case 'rec_cancel':
        // The cancel is handled via the API - Do nothing here
        break;

      case 'rec_skipped':
        // DO nothing here
        break;

      case 'failed':
        // Log the failed payment
        ms_core_log_error('ms_paypal_wpp', 'Failed Payment IPN: ' . ms_core_print_r($ipn));
        ms_core_log_error('ms_paypal_wpp', 'Failed Payment: ' . ms_core_print_r($payment));

        // Add the Payment to the Order
        ms_core_enter_payment($payment);
        break;

      case 'cart':
        // Check what the payment status is
        switch ($ipn['payment_status']) {
          case 'Completed':
            ms_core_add_history_item($order, 0, t('Payment of @amount submitted through PayPal.', array('@amount' => ms_core_format_money($payment->amount))));
            ms_core_add_history_item($order, 0, t('PayPal IPN reported a payment of @amount.', array('@amount' => ms_core_format_money($payment->amount))), TRUE);

            // This status should be handled by the API. No need to submit it here.
            // ms_core_enter_payment($payment);
            break;

          case 'Processed':
            ms_core_add_history_item($order, 0, t('A payment has been accepted.'), TRUE);
            break;

          case 'Canceled_Reversal':
            ms_core_add_history_item($order, 0, t('PayPal has cancelled the reversal and returned !amount to your account.',
              array('!amount' => ms_core_format_money($payment->amount))), TRUE);
            // Add the Payment to the Order
            ms_core_enter_payment($payment);
            break;

          case 'Denied':
            ms_core_add_history_item($order, 0, t("You have denied the customer's payment."), TRUE);

            $payment->type = 'failed';
            // Add the Payment to the Order
            ms_core_enter_payment($payment);
            break;

          case 'Failed':
            ms_core_add_history_item($order, 0, t("The customer's attempted payment from a bank account failed."), TRUE);
            $payment->type = 'failed';
            // Add the Payment to the Order
            ms_core_enter_payment($payment);
            break;

          case 'Voided':
            ms_core_add_history_item($order, 0, t('The authorization has been voided.'), TRUE);

            $payment->type = 'failed';
            // Add the Payment to the Order
            ms_core_enter_payment($payment);
            break;

          case 'Expired':
            ms_core_add_history_item($order, 0, t('The authorization has failed and cannot be captured.'), TRUE);

            $payment->type = 'failed';
            // Add the Payment to the Order
            ms_core_enter_payment($payment);
            break;

          case 'Reversed':
            ms_core_log_error('ms_paypal_wpp', 'PayPal has reversed a payment!');
            ms_core_add_history_item($order, 0, t('Payment has been reversed by PayPal: @reason', array('@reason' => _ms_paypal_wpp_reversal_message(check_plain($_POST['reason_code'])))), TRUE);

            $payment->type = 'reversal';
            // Add the Payment to the Order
            ms_core_enter_payment($payment);
            break;

          case 'Refunded':
            $payment->type = 'refund';
            // Add the Payment to the Order
            ms_core_enter_payment($payment);
            break;

          case 'Pending':
            ms_core_add_history_item($order, 0, t('Payment is pending at PayPal: @reason', array('@reason' => _ms_paypal_wpp_pending_message(check_plain($_POST['pending_reason'])))), TRUE);

            $payment->type = 'pending';
            // Add the Payment to the Order
            ms_core_enter_payment($payment);
            break;
        }
        break;

      default:
        ms_core_log_error('ms_paypal_wpp', 'Error: Received an IPN with an unknown type. Here are the details: Data: !data',
          array('!data' => ms_core_print_r($_REQUEST)));
        break;
    }
  } else {
    ms_core_log_error('ms_paypal_wpp', 'Error: An IPN has Failed Validation. This may be from a spoofed IPN or an attempt to hack. Here are the details: Data: !data',
      array('!data' => ms_core_print_r($_REQUEST)));
  }
}

/**
 * IPN Callback Handler
 */
function ms_paypal_wpp_ipn_handler($ipn_vars) {
  $req = '';

  foreach ($_POST as $key => $value) {
    $value = urlencode(stripslashes($value));
    $req .= $key . '=' . $value . '&';
  }

  $req .= 'cmd=_notify-validate';

  if (variable_get('ms_paypal_wpp_wpp_server', '') == 'https://api-3t.paypal.com/nvp') {
    $host = 'https://www.paypal.com/cgi-bin/webscr';
  } else {
    $host = variable_get('ms_paypal_wpp_wps_server', 'https://www.sandbox.paypal.com/cgi-bin/webscr');
  }

  $response = drupal_http_request($host, array('headers' => array(), 'method' => 'POST', 'data' => $req));

  if (!empty($response->error)) {
    ms_core_log_error('ms_paypal_wpp', 'IPN failed with HTTP error @error, code @code.', array('@error' => $response->error, '@code' => $response->code));
    return FALSE;
  }

  if (strcmp($response->data, 'VERIFIED') == 0) {
    return $_POST;
  } elseif (strcmp($response->data, 'INVALID') == 0) {
    ms_core_log_error('ms_paypal_wpp', 'IPN transaction failed verification.');
    return FALSE;
  }
}

/**
 * Helper Function to Use the Correct TXN type name for MS Core to use
 */
function ms_paypal_wpp_get_type($txn = NULL) {
  switch ($txn) {
    case 'web_accept':
    case 'express_checkout':
      return 'cart';
    case 'subscr_modify':
      return 'rec_modify';
    case 'subscr_signup':
    case 'recurring_payment_profile_created':
      return 'rec_signup';
    case 'subscr_payment':
    case 'recurring_payment':
      return 'rec_payment';
    case 'subscr_cancel':
    case 'recurring_payment_profile_cancel':
      return 'rec_cancel';
    case 'subscr_eot':
      return 'rec_eot';
    case 'refund':
      return 'refund';
    case 'reverse':
      return 'reversal';
    case 'recurring_payment_outstanding_payment_failed':
    case 'recurring_payment_suspended_due_to_max_failed_payment':
    case 'subscr_failed':
    case 'recurring_payment_failed':
      return 'failed';
    case 'recurring_payment_skipped':
      return 'rec_skipped';
    default:
      return $txn ? $txn : 'cart';
  }
}

/*******************************************************************************
 * HELPER FUNCTIONS
 ******************************************************************************/

/**
 * Sends a request to PayPal and returns a response array.
 */
function ms_paypal_wpp_api_request($request, $server) {
  // We use $request += to add API credentials so that
  // if a key already exists, it will not be overridden
  $request += array(
    'USER' => variable_get('ms_paypal_wpp_api_username', ''),
    'PWD' => variable_get('ms_paypal_wpp_api_password', ''),
    'VERSION' => '64.4',
    'SIGNATURE' => variable_get('ms_paypal_wpp_api_signature', ''),
  );

  $data = '';
  foreach ($request as $key => $value) {
    $data .= $key . '=' . urlencode(str_replace(',', '', $value)) . '&';
  }
  $data = substr($data, 0, -1);

  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $server);
  curl_setopt($ch, CURLOPT_VERBOSE, 0);
  curl_setopt($ch, CURLOPT_POST, 1);
  curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
  curl_setopt($ch, CURLOPT_NOPROGRESS, 1);
  curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 0);
  $response = curl_exec($ch);
  if ($error = curl_error($ch)) {
    ms_core_log_error('ms_paypal_wpp', '!error', array('!error' => $error));
  }
  curl_close($ch);

  return _ms_paypal_wpp_nvp_to_array($response);
}

// Turns PayPal's NVP response to an API call into an associative array.
function _ms_paypal_wpp_nvp_to_array($nvpstr) {
  $nvp_array = array();
  foreach (explode('&', $nvpstr) as $nvp) {
    list($key, $value) = explode('=', $nvp);
    $nvp_array[urldecode($key)] = urldecode($value);
  }

  return $nvp_array;
}


// Returns a human readable message for the AVS code.
function _ms_paypal_wpp_avscode_message($code) {
  if (is_numeric($code)) {
    switch ($code) {
      case '0':
        return t('All the address information matched.');
      case '1':
        return t('None of the address information matched; transaction declined.');
      case '2':
        return t('Part of the address information matched.');
      case '3':
        return t('The merchant did not provide AVS information. Not processed.');
      case '4':
        return t('Address not checked, or acquirer had no response. Service not available.');
      case 'Null':
      default:
        return t('No AVS response was obtained.');
    }
  }

  switch ($code) {
    case 'A':
    case 'B':
      return t('Address matched; postal code did not');
    case 'C':
    case 'N':
      return t('Nothing matched; transaction declined');
    case 'D':
    case 'F':
    case 'X':
    case 'Y':
      return t('Address and postal code matched');
    case 'E':
      return t('Not allowed for MOTO transactions; transaction declined');
    case 'G':
      return t('Global unavailable');
    case 'I':
      return t('International unavailable');
    case 'P':
    case 'W':
    case 'Z':
      return t('Postal code matched; address did not');
    case 'R':
      return t('Retry for validation');
    case 'S':
      return t('Service not supported');
    case 'U':
      return t('Unavailable');
    default:
      return t('An unknown error occurred.');
  }
}

// Returns a human readable message for the CVV2 match code.
function _ms_paypal_wpp_cvvmatch_message($code) {
  if (is_numeric($code)) {
    switch ($code) {
      case '0':
        return t('Matched');
      case '1':
        return t('No match');
      case '2':
        return t('The merchant has not implemented CVV2 code handling.');
      case '3':
        return t('Merchant has indicated that CVV2 is not present on card.');
      case '4':
        return t('Service not available');
      default:
        return t('Unkown error');
    }
  }

  switch ($code) {
    case 'M':
      return t('Match');
    case 'N':
      return t('No match');
    case 'P':
      return t('Not processed');
    case 'S':
      return t('Service not supported');
    case 'U':
      return t('Service not available');
    case 'X':
      return t('No response');
    default:
      return t('Not checked');
  }
}

// Return a message for the pending reason of a PayPal payment.
function _ms_paypal_wpp_pending_message($reason) {
  switch ($reason) {
    case 'address':
      return t('Customer did not include a confirmed shipping address per your address settings.');
    case 'authorization':
      return t('Waiting on you to capture the funds per your authorization settings.');
    case 'echeck':
      return t('eCheck has not yet cleared.');
    case 'intl':
      return t('You must manually accept or deny this international payment from your Account Overview.');
    case 'multi-currency':
      return t('You must manually accept or deny a payment of this currency from your Account Overview.');
    case 'unilateral':
      return t('Your e-mail address is not yet registered or confirmed.');
    case 'upgrade':
      return t('You must upgrade your account to Business or Premier status to receive credit card payments.');
    case 'verify':
      return t('You must verify your account before you can accept this payment.');
    case 'other':
    default:
      return t('Reason unknown; contact PayPal Customer Service for more information.');
  }
}

// Return a message for the reason code of a PayPal reversal.
function _ms_paypal_wpp_reversal_message($reason) {
  switch ($reason) {
    case 'chargeback':
      return t('The customer has initiated a chargeback.');
    case 'guarantee':
      return t('The customer triggered a money-back guarantee.');
    case 'buyer-complaint':
      return t('The customer filed a complaint about the transaction.');
    case 'refund':
      return t('You gave the customer a refund.');
    case 'other':
    default:
      return t('Reason unknown; contact PayPal Customer Service for more information.');
  }
}

/**
 * Handles a canceled Website Payments Standard sale.
 */
function ms_paypal_wpp_cancel() {
  unset($_SESSION['ms_oid']);

  drupal_set_message(t('Your PayPal payment was cancelled. Please feel free to continue shopping or contact us for assistance.'));

  drupal_goto(variable_get('ms_paypal_wpp_wps_cancel_return_url', 'ms/cart'));
}

/******************************************************************************
 * PAYPAL WPP
 *****************************************************************************/

/**
 * Updates a PayPal subscription
 *
 * @param $order
 *   The order object.
 * @param $profile_id
 * @param $updates
 *   An array of data to update using key/ value pairs from the NVP API for
 *   PayPal.
 *
 * @return
 *   TRUE or FALSE indicating the success of the update.
 */
function ms_paypal_wpp_recurring_update($order, $profile_id, $updates = array()) {
  // Build an NVP request.
  $nvp_request = array(
      'METHOD' => 'UpdateRecurringPaymentsProfile',
      'PROFILEID' => $profile_id,
    ) + $updates;

  // Post the request, and parse the response.
  $nvp_response = ms_paypal_wpp_api_request($nvp_request, variable_get('ms_paypal_wpp_wpp_server', 'https://api-3t.sandbox.paypal.com/nvp'));
  if ($nvp_response['ACK'] != 'Success' && $nvp_response['ACK'] != 'SuccessWithWarning') {
    ms_core_log_error('ms_paypal_wpp', 'Failed to update recurring profile @id. Request: !request Result: !result',
      array('@id' => $profile_id, '!request' => ms_core_print_r($nvp_request), '!result' => ms_core_print_r($nvp_response)));
    return array('success' => FALSE, 'message' => $nvp_response['L_LONGMESSAGE0'], 'code' => $nvp_response['L_ERRORCODE0']);
  }

  return array('success' => TRUE, 'txn_id' => $nvp_response['CORRELATIONID']);
}

/**
 * Helper function; Get a recurring payments profile from PayPal.
 *
 * @param $rfid
 *   The recurring fee ID.
 *
 * @return
 *   FALSE on failure, otherwise, the NVP response from PayPal.
 */
function ms_paypal_wpp_get_profile($order) {
  $subscription_id = ms_core_get_order_rec_id($order->oid);

  // Build an NVP request.
  $nvp_request = array(
    'METHOD' => 'GetRecurringPaymentsProfileDetails',
    'PROFILEID' => $subscription_id,
  );

  // Post the request, and parse the response.
  $nvp_response = ms_paypal_wpp_api_request($nvp_request, variable_get('ms_paypal_wpp_wpp_server', 'https://api-3t.sandbox.paypal.com/nvp'));
  if ($nvp_response['ACK'] != 'Success' && $nvp_response['ACK'] != 'SuccessWithWarning') {
    return FALSE;
  }

  return $nvp_response;
}

/********************************************************************
 * Direct Payment Checkout Form
 *******************************************************************/

/**
 * Build the Checkout Form
 */
function ms_paypal_wpp_direct_payment_checkout_form($form, $form_state, $order) {
  $form = array();

  $cards = array(
    'visa' => 'Visa',
    'mc' => 'MasterCard',
    'amex' => 'American Express',
    'discover' => 'Discover',
    'diners' => 'Diners',
    'jcb' => 'JCB',
  );

  $allowed = variable_get('ms_paypal_wpp_dp_allowed_cards', array('visa', 'mc', 'discover', 'amex', 'echeck', 'paypal'));
  $allowed_cards = ms_core_get_cards($cards, $allowed);
  ms_core_get_cc_form($form, $order, $allowed_cards);

  ms_core_get_billing_form($form, $order);

  $form['billing']['billing_state']['#required'] = FALSE;

  $form['ms_oid'] = array(
    '#type' => 'value',
    '#value' => $order->oid,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Pay Now'),
  );

  $form['#validate'][] = 'ms_core_cc_form_validate';
  $form['#validate'][] = 'ms_paypal_wpp_direct_payment_checkout_form_validate';

  return $form;
}

/**
 * Validate the Checkout Form, and Try to Charge the Card
 */
function ms_paypal_wpp_direct_payment_checkout_form_validate($form, &$form_state) {
  $v = $form_state['values'];

  if ($errors = form_get_errors()) {
    return;
  }

  $order = ms_core_order_load($v['ms_oid']);

  switch ($order->order_type) {
    case 'recurring':
      // Create a new recurring payment profile with paypal
      $response = ms_paypal_wpp_setup_recurring_payment($order, $v, $order->recurring_schedule);

      if ($response['success']) {
        // Add the payment to the order
        $form_state['values']['ms_oid'] = $order->oid;
        $form_state['values']['ms_order_charged'] = TRUE;

        // Insert the rec_signup Payment to the database
        $payment = ms_core_new_payment($order->oid, 'ms_paypal_wpp_dp', 'rec_signup');

        $payment->transaction = $response['data']['txn_id'];
        $payment->currency = $order->currency;
        $payment->data = $response['data'];
        $payment->recurring_id = $response['data']['subscr_id'];

        // Update the address
        $payment->billing_address = array(
          'street' => check_plain($v['billing_address1']),
          'city' => check_plain($v['billing_city']),
          'state' => check_plain($v['billing_state']),
          'zip' => check_plain($v['billing_zip']),
          'country' => check_plain($v['billing_country']),
          'phone' => check_plain($v['billing_phone']),
        );

        // Update the contact details
        $payment->first_name = check_plain($v['cc_first_name']);
        $payment->last_name = check_plain($v['cc_last_name']);

        // Add the Payment to the Order
        $payment->amount = !empty($response['data']['nvp_details']['AMT']) ? $response['data']['nvp_details']['AMT'] : 0;
        ms_core_enter_payment($payment);

        // Prevent Duplicate Processing
        unset($_SESSION['TOKEN'], $_SESSION['PAYERID']);

        // Reload the order to get the uid
        $order = ms_core_order_load($order->oid);

        $payment_profile = array(
          'oid' => $order->oid,
          'uid' => $order->uid,
          'module' => 'ms_paypal_wpp_dp',
          'status' => 1,
          'first_name' => $v['cc_first_name'],
          'last_name' => $v['cc_last_name'],
          'address' => $v['billing_address1'],
          'city' => $v['billing_city'],
          'state' => $v['billing_state'],
          'zip' => $v['billing_zip'],
          'country' => $v['billing_country'],
          'phone' => $v['billing_phone'],
          'email' => $v['billing_email'],
          'fax' => '',
          'cc_type' => $v['cc_type'],
          'cc_num' => $v['cc_number'],
          'exp_month' => $v['cc_exp_month'],
          'exp_year' => $v['cc_exp_year'],
        );
        ms_core_payment_profile_save($payment_profile);
      } else {
        // Log the error
        ms_core_log_error('ms_paypal_wpp', 'Error Setting up Recurring Payment: !error Details: !details',
          array('!error' => $response['message'], '!details' => ms_core_print_r($response)), WATCHDOG_WARNING);
        form_set_error('ccnumber', t('Error: @error', array('@error' => $response['data']['nvp_response']['L_LONGMESSAGE0'])));
      }

      // Redirect
      $form_state['redirect'] = 'ms/thankyou';
      break;

    case 'cart':
      // Just charge the card with direct payment
      $response = ms_paypal_wpp_direct_payment_charge($order, $order->amount, $v);

      if ($response['success'] == TRUE) {
        // Insert the Payment to the database
        $payment = ms_core_new_payment($order->oid, 'ms_paypal_wpp_dp', 'cart');
        $payment->transaction = $response['data']['txn_id'];
        $payment->amount = $response['amount'];
        $payment->currency = $order->currency;
        $payment->data = $response['data'];

        // Update the address
        $payment->billing_address = array(
          'street' => trim($v['billing_address1']) . '\n' . trim($v['billing_address2']),
          'city' => trim($v['billing_city']),
          'state' => trim($v['billing_state']),
          'zip' => trim($v['billing_zip']),
          'country' => trim($v['billing_country']),
          'phone' => trim($v['billing_phone']),
        );

        // Update the contact details
        $payment->first_name = trim($v['cc_first_name']);
        $payment->last_name = trim($v['cc_last_name']);

        // Add the Payment to the Order
        ms_core_enter_payment($payment);

        // Save the values
        $form_state['values']['ms_oid'] = $order->oid;
        $form_state['values']['ms_order_charged'] = TRUE;

        // Remove Me
        // Reload the order to get the uid
        $order = ms_core_order_load($order->oid);

        $payment_profile = array(
          'oid' => $order->oid,
          'uid' => $order->uid,
          'module' => 'ms_paypal_wpp_dp',
          'status' => 1,
          'first_name' => $v['cc_first_name'],
          'last_name' => $v['cc_last_name'],
          'address' => $v['billing_address1'],
          'city' => $v['billing_city'],
          'state' => $v['billing_state'],
          'zip' => $v['billing_zip'],
          'country' => $v['billing_country'],
          'phone' => $v['billing_phone'],
          'email' => $v['billing_email'],
          'fax' => '',
          'cc_type' => $v['cc_type'],
          'cc_num' => $v['cc_number'],
          'exp_month' => $v['cc_exp_month'],
          'exp_year' => $v['cc_exp_year'],
        );
        ms_core_payment_profile_save($payment_profile);
      } else { // The Credit Card was not approved, set an error on the form
        form_set_error('ccnumber', t('Error: @error', array('@error' => $response['data']['nvp_response']['L_LONGMESSAGE0'])));
        ms_core_log_error('ms_paypal_wpp', 'Error Processing Direct Payment Form: !error Details: !details',
          array('!error' => $response['message'], '!details' => ms_core_print_r($response)), WATCHDOG_WARNING);
      }
      break;
  }
}

/**
 * The card has been charged, mark the order as completed
 */
function ms_paypal_wpp_direct_payment_checkout_form_submit($form, &$form_state) {
  $v = $form_state['values'];

  // If the Order was charged, complete it
  if (isset($v['ms_order_charged']) AND $v['ms_order_charged']) {
    drupal_goto('ms/thankyou');
  } else {
    // There was an error...
    drupal_set_message(t("There was an error processing the payment. Please contact the site administrator."), 'error');
  }
}

/********************************************************************
 * Direct Payment Charge Functions
 *******************************************************************/

/**
 * Calls DoDirectPayment
 */
function ms_paypal_wpp_direct_payment_charge($order, $amount, $data, $mode = 'AUTH_CAPTURE') {
  $nvp_request = array(
    'METHOD' => 'DoDirectPayment',
    'PAYMENTACTION' => 'Sale',
    'IPADDRESS' => ip_address(),
    'AMT' => $amount,
    'CREDITCARDTYPE' => ms_paypal_wpp_get_cc_type($data['cc_type']),
    'ACCT' => $data['cc_number'],
    'EXPDATE' => $data['cc_exp_month'] . $data['cc_exp_year'],
    'CVV2' => $data['cc_cvv'],
    'CURRENCYCODE' => $order->currency,
    'DESC' => ms_core_get_order_title($order, 127),
    'INVNUM' => $order->oid . '-' . REQUEST_TIME,
    'BUTTONSOURCE' => 'MoneySuite_ShoppingCart_DP_US',
    'EMAIL' => substr($data['billing_email'], 0, 127),
    'PHONENUM' => substr($data['billing_phone'], 0, 20),
  );

  $nvp_request['NOTIFYURL'] = url('ms_paypal_wpp/ipn/' . $order->oid, array('absolute' => TRUE));

  // Set the address fields
  if (isset($data['cc_first_name'])) {
    $nvp_request['FIRSTNAME'] = substr($data['cc_first_name'], 0, 25);
  }
  if (isset($data['cc_last_name'])) {
    $nvp_request['LASTNAME'] = substr($data['cc_last_name'], 0, 25);
  }
  if (isset($data['billing_address1'])) {
    $nvp_request['STREET'] = substr($data['billing_address1'], 0, 100);
  }
  if (isset($data['billing_address2'])) {
    $nvp_request['STREET2'] = substr($data['billing_address2'], 0, 100);
  }
  if (isset($data['billing_city'])) {
    $nvp_request['CITY'] = substr($data['billing_city'], 0, 40);
  }
  if (isset($data['billing_state'])) {
    $nvp_request['STATE'] = substr($data['billing_state'], 0, 25);
  }
  if (isset($data['billing_zip'])) {
    $nvp_request['ZIP'] = substr($data['billing_zip'], 0, 25);
  }
  if (isset($data['billing_country'])) {
    $nvp_request['COUNTRYCODE'] = substr($data['billing_country'], 0, 25);
  }

  $nvp_response = ms_paypal_wpp_api_request($nvp_request, variable_get('ms_paypal_wpp_wpp_server', 'https://api-3t.sandbox.paypal.com/nvp'));

  switch ($nvp_response['ACK']) {
    /** @noinspection PhpMissingBreakStatementInspection */
    case 'SuccessWithWarning':
      ms_core_log_error('ms_paypal_wpp', '<b>Payment succeeded with a warning.</b>!paypal_message',
        array(
          '!paypal_message' => _ms_paypal_wpp_build_error_messages($nvp_response),
        ),
        WATCHDOG_WARNING,
        l(t('view order'), 'admin/moneysuite/orders/view/' . $order->oid)
      );
    // Fall through.
    case 'Success':
      $message = t('<b>Payment</b><br /><b>Success: </b>@amount', array('@amount' => ms_core_format_money($nvp_request['AMT'], $nvp_response['CURRENCYCODE'])));

      $result = array(
        'success' => TRUE,
        'comment' => t('PayPal transaction ID: @transactionid', array('@transactionid' => $nvp_response['TRANSACTIONID'])),
        'message' => $message,
        'amount' => $nvp_request['AMT'],
        'data' => array(
          'txn_id' => check_plain($nvp_response['TRANSACTIONID']),
          'nvp_response' => $nvp_response,
        ),
      );
      break;
    case 'FailureWithWarning':
      // Fall through.
    case 'Failure':
      $message = t('<b>Payment failed.</b>!paypal_message',
        array('!paypal_message' => _ms_paypal_wpp_build_error_messages($nvp_response)));
      $result = array(
        'success' => FALSE,
        'message' => $message,
        'data' => array(
          'nvp_response' => $nvp_response,
        ),
      );
      break;
    default:
      $message = t('Unexpected acknowledgement status: @status', array('@status' => $nvp_response['ACK']));
      $result = array(
        'success' => NULL,
        'message' => $message,
        'data' => array(
          'nvp_response' => $nvp_response,
        ),
      );
      break;
  }

  return $result;
}

/**
 * Helper function to get the correct name for the unit
 */
function ms_paypal_wpp_switch_unit($unit) {
  switch ($unit) {
    case 'D':
      return 'Day';
    case 'M':
      return 'Month';
    case 'S':
      return 'SemiMonth';
    case 'W':
      return 'Week';
    case 'Y':
      return 'Year';
    default:
      return $unit;
  }
}

/**
 * Set up a recurring payment using CreateRecurringPaymentsProfile
 */
function ms_paypal_wpp_setup_recurring_payment($order, $data, $recurring_schedule) {
  // Get the length and unit values
  $length = $recurring_schedule['main_length'];
  $unit = ms_paypal_wpp_switch_unit($recurring_schedule['main_unit']);

  // Make sure we have valid values.
  if ($length <= 0 ||
    $unit == 'Day' && $length > 365 ||
    $unit == 'Month' && $length > 12 ||
    $unit == 'SemiMonth' && $length > 24 ||
    $unit == 'Week' && $length > 52 ||
    $unit == 'Year' && $length > 1
  ) {
    ms_core_log_error('ms_paypal_wpp', 'Order @oid has invalid interval settings for PayPal - @length @unit',
      array('@oid' => $order->oid, '@length' => $length, '@unit' => $unit));
    return FALSE;
  }

  // Build an NVP request.
  // @link https://cms.paypal.com/us/cgi-bin/?&cmd=_render-content&content_ID=developer/e_howto_api_WPRecurringPayments @endlink
  $nvp_request = array(
    'METHOD' => 'CreateRecurringPaymentsProfile',
    'DESC' => ms_core_get_order_title($order, 127),
    'BILLINGPERIOD' => $unit,
    'BILLINGFREQUENCY' => $length,
    // if TOTALBILLINGCYCLES = 0 the payments continue until the profile is canceled or suspended.
    'TOTALBILLINGCYCLES' => $order->recurring_schedule['total_occurrences'],
    'CURRENCYCODE' => ms_core_variable_get('ms_core_default_currency', 'USD', $order),
    'EMAIL' => substr($order->email_address, 0, 127),
    // The number of scheduled payments that can fail before the profile is automatically suspended.
    'MAXFAILEDPAYMENTS' => variable_get('ms_paypal_wpp_max_failed_payments', 3),
    'PROFILEREFERENCE' => $order->oid,
  );

  $nvp_request['NOTIFYURL'] = url('ms_paypal_wpp/ipn/' . $order->oid, array('absolute' => TRUE));

  // Set the AMT to the regular amount
  $nvp_request['AMT'] = round($recurring_schedule['main_amount'], 2);
  $nvp_request['PROFILESTARTDATE'] = date(DATE_ATOM);

  // Add the card information
  if (isset($data['cc_number'])) {
    $nvp_request['CREDITCARDTYPE'] = ms_paypal_wpp_get_cc_type($data['cc_type']);
    $nvp_request['ACCT'] = $data['cc_number'];
    $nvp_request['EXPDATE'] = date('mY', mktime(0, 0, 0, $data['cc_exp_month'], 1, $data['cc_exp_year']));
    $nvp_request['CVV2'] = $data['cc_cvv'];
  } else { // Otherwise, add the other info
    $nvp_request['TOKEN'] = $data['TOKEN'];
  }

  if ($order->recurring_schedule['has_trial']) {
    if ($recurring_schedule['trial_amount'] > 0) {
      // Set the trial amount as the initial amount to collect immediately
      $nvp_request['INITAMT'] = round($recurring_schedule['trial_amount'], 2);
    } else {
      // If there is a free trial, then we don't need an initial charge
    }
    // Set the start_date to after the trial period ends
    $nvp_request['PROFILESTARTDATE'] = date(DATE_ATOM, strtotime("+ " . $recurring_schedule['trial_length'] . ' ' . ms_paypal_wpp_switch_unit($recurring_schedule['trial_unit'])));
  } else {
    // Set the regular amount as the initial amount to collect immediately
    $nvp_request['INITAMT'] = round($recurring_schedule['main_amount'], 2);
    // Set the start_date to 1 period in the future
    $nvp_request['PROFILESTARTDATE'] = date(DATE_ATOM, strtotime("+ " . $recurring_schedule['main_length'] . ' ' . ms_paypal_wpp_switch_unit($recurring_schedule['main_unit'])));
  }

  // Add the customer information
  $nvp_request['SUBSCRIBERNAME'] = isset($data['cc_first_name']) ? substr($data['cc_first_name'] . ' ' . $data['cc_last_name'], 0, 32) : '';

  // Set the address fields
  if (isset($data['cc_first_name'])) {
    $nvp_request['FIRSTNAME'] = substr($data['cc_first_name'], 0, 25);
  }
  if (isset($data['cc_last_name'])) {
    $nvp_request['LASTNAME'] = substr($data['cc_last_name'], 0, 25);
  }
  if (isset($data['billing_address1'])) {
    $nvp_request['STREET'] = substr($data['billing_address1'], 0, 100);
  }
  if (isset($data['billing_address2'])) {
    $nvp_request['STREET2'] = substr($data['billing_address2'], 0, 100);
  }
  if (isset($data['billing_city'])) {
    $nvp_request['CITY'] = substr($data['billing_city'], 0, 40);
  }
  if (isset($data['billing_state'])) {
    $nvp_request['STATE'] = substr($data['billing_state'], 0, 25);
  }
  if (isset($data['billing_zip'])) {
    $nvp_request['ZIP'] = substr($data['billing_zip'], 0, 25);
  }
  if (isset($data['billing_country'])) {
    $nvp_request['COUNTRYCODE'] = substr($data['billing_country'], 0, 25);
  }

  // Post the request, and parse the response.
  $nvp_response = ms_paypal_wpp_api_request($nvp_request, variable_get('ms_paypal_wpp_wpp_server', 'https://api-3t.sandbox.paypal.com/nvp'));

  switch ($nvp_response['ACK']) {
    /** @noinspection PhpMissingBreakStatementInspection */
    case 'SuccessWithWarning':
      ms_core_log_error('ms_paypal_wpp', '<b>Recurring Profile Setup succeeded with a warning.</b>!paypal_message',
        array(
          '!paypal_message' => _ms_paypal_wpp_build_error_messages($nvp_response),
        ),
        WATCHDOG_WARNING,
        l(t('view order'), 'admin/moneysuite/orders/view/' . $order->oid)
      );
    // Fall through.
    case 'Success':
      $nvp_details_request = array(
        'METHOD' => 'GetRecurringPaymentsProfileDetails',
        'PROFILEID' => $nvp_response['PROFILEID'],
      );

      $nvp_details = ms_paypal_wpp_api_request($nvp_details_request, variable_get('ms_paypal_wpp_wpp_server', 'https://api-3t.sandbox.paypal.com/nvp'));

      $message = t('Recurring Payment Setup Successfully: @amount', array('@amount' => ms_core_format_money($nvp_details['AMT'], $nvp_details['CURRENCYCODE'])));

      $result = array(
        'success' => TRUE,
        'comment' => t('PayPal transaction ID: @transactionid', array('@transactionid' => $nvp_details['CORRELATIONID'])),
        'message' => $message,
        'amount' => $nvp_details['AMT'],
        'data' => array(
          'txn_id' => check_plain($nvp_details['CORRELATIONID']),
          'subscr_id' => $nvp_details['PROFILEID'],
          'nvp_response' => $nvp_response,
          'nvp_details' => $nvp_details,
        ),
      );
      break;
    case 'FailureWithWarning':
      // Fall through.
    case 'Failure':
      $message = t('<b>Recurring Payment Setup failed.</b>!paypal_message',
        array('!paypal_message' => _ms_paypal_wpp_build_error_messages($nvp_response)));
      $result = array(
        'success' => FALSE,
        'message' => $message,
        'data' => array(
          'nvp_response' => $nvp_response,
        ),
      );
      break;
    default:
      $message = t('Unexpected acknowledgement status: @status', array('@status' => $nvp_response['ACK']));
      $result = array(
        'success' => NULL,
        'message' => $message,
        'data' => array(
          'nvp_response' => $nvp_response,
        ),
      );
      break;
  }

  ms_core_add_history_item($order, 0, $message, TRUE);

  return $result;
}

/**
 * Helper function to get the correct card type name
 */
function ms_paypal_wpp_get_cc_type($type) {
  switch (strtolower($type)) {
    case 'amex':
    case 'american express':
      return 'Amex';
    case 'visa':
      return 'Visa';
    case 'mastercard':
    case 'mc':
    case 'master card':
      return 'MasterCard';
    case 'discover':
      return 'Discover';
  }
}
