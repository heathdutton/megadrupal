<?php

/**
 * @file
 * MoneySuite Paypal WPS Gateway
 *
 * Original author: Leighton Whiting - Released under GENERAL PUBLIC LICENSE
 * Current maintenance by multiple MoneySuite users.
 * Re: new initiative: https://www.drupal.org/node/2315653 
 */

/**
 * Implements hook_help().
 */
function ms_paypal_wps_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/moneysuite/gateways/ms_paypal_wps":
    case "admin/help#ms_paypal_wps":
      $output = '<p>' . t("PayPal WPS Payment Gateway Module for MoneySuite. This allows you to receive
      payments with your PayPal WPS account. This gateway supports both Recurring and Non-Recurring Orders.
      This gateway requires that IPN Notifications be turned on in your PayPal WPS account settings. This
      should be on by default. Also, this gateway will not work correctly if it is used on a localhost
      server, because it won't be able to receive the IPNs from PayPal.") . '</p>';
      break;
  }
  return $output;
}

/**
 * Implements hook_menu().
 */
function ms_paypal_wps_menu() {
  $items = array();
  $items['paypal/backend'] = array(
    'title' => 'Backend',
    'page callback' => 'ms_paypal_wps_ipn',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  if (variable_get('ms_paypal_wps_lm_paypal_support', TRUE)) {
    $items['lm_paypal/ipn'] = array(
      'title' => 'Backend',
      'page callback' => 'ms_paypal_wps_lm_paypal_ipn',
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    );
  }
  $items['ms/checkout/paypal_wps'] = array(
    'title' => 'Checkout',
    'page callback' => 'ms_paypal_wps_initiate_payment',
    'access callback' => TRUE,
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );
  $items['ms_paypal_wps/thank-you'] = array(
    'title' => 'Thank You',
    'page callback' => 'ms_paypal_wps_thankyou_page',
    'access callback' => TRUE,
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );
  $items['ms_paypal_wps/check_ipn_status/%'] = array(
    'title' => 'Check IPN Status',
    'page callback' => 'ms_paypal_wps_ipn_ajax_page',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['ms_paypal_wps/modify/%/%'] = array(
    'title' => 'Modify Payments',
    'page callback' => 'ms_paypal_wps_modify_page',
    'page arguments' => array(2, 3),
    'access callback' => 'ms_core_modify_test',
    'access arguments' => array(2, 3),
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );

  return $items;
}

/**
 * Admin Settings Form
 */
function ms_paypal_wps_admin() {
  $form['main'] = array(
    '#type' => 'fieldset',
    '#title' => t('Main Settings'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['advanced'] = array(
    '#type' => 'fieldset',
    '#title' => t('Advanced Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  // -----------------------------
  // Main Settings
  // -----------------------------
  $form['main']['ms_paypal_wps_email'] = array(
    '#type' => 'textfield',
    '#title' => t('Seller PayPal Email'),
    '#size' => 32,
    '#maxlength' => 64,
    '#default_value' => variable_get('ms_paypal_wps_email', ''),
    '#description' => t("Enter your PayPal email address, where all the payments will go."),
    '#required' => TRUE,
    '#ms_override' => TRUE,
  );
  $form['main']['ms_paypal_wps_use_sandbox'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use Sandbox for Testing?'),
    '#default_value' => variable_get('ms_paypal_wps_use_sandbox', FALSE),
    '#description' => t('You must have a PayPal Sandbox account to use this.'),
    '#required' => FALSE,
    '#ms_override' => TRUE,
  );
  $form['main']['ms_paypal_wps_paypal_page_text'] = array(
    '#type' => 'textarea',
    '#title' => t('PayPal Jump Page Text'),
    '#description' => t("Fill in the text you wish the user to see for the Paypal Jump page. They will be redirected in 5 seconds if Javascript is enabled, otherwise a button is provided for them to click."),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_paypal_wps_paypal_page_text',
      t("Please wait for a few seconds, your registration is being processed and you will be redirected to PayPal's secure payment page.
<br/><br/>
If you are not automatically redirected to the PayPal payment page within 5 seconds, click below:
<br/><br/>")),
  );
  $form['main']['ms_paypal_wps_paypal_page_timeout'] = array(
    '#type' => 'textfield',
    '#title' => t('PayPal Jump Page Timeout'),
    '#description' => t("How many seconds should the Jump Page wait until it automatically redirects?"),
    '#required' => TRUE,
    '#default_value' => variable_get('ms_paypal_wps_paypal_page_timeout', 0),
  );

  // -----------------------------
  // Advanced Settings
  // -----------------------------
  $form['advanced']['ms_paypal_wps_page_style'] = array(
    '#type' => 'textfield',
    '#title' => t('Page Style Name'),
    '#size' => 64,
    '#maxlength' => 128,
    '#default_value' => variable_get('ms_paypal_wps_page_style', ''),
    '#description' => t("The style name of your custom paypal style. If you want to just use PayPal's Default style, leave this blank."),
    '#required' => FALSE,
    '#ms_override' => TRUE,
  );
  $form['advanced']['ms_paypal_wps_cancel_return'] = array(
    '#type' => 'textfield',
    '#title' => t('Abort Payment Page'),
    '#size' => 64,
    '#maxlength' => 128,
    '#default_value' => variable_get('ms_paypal_wps_cancel_return', ''),
    '#description' => t("The Page the user will be returned to if they abort their payment from PayPal."),
    '#required' => FALSE,
    '#ms_override' => TRUE,
  );
  $form['advanced']['ms_paypal_wps_lc'] = array(
    '#type' => 'select',
    '#title' => t('Language Code'),
    '#options' => ms_paypal_wps_get_countries(),
    '#default_value' => variable_get('ms_paypal_wps_lc', 0),
    '#description' => t('Choose the Language Code to use, or simply use the PayPal cookie for each user.'),
    '#required' => FALSE,
    '#ms_override' => TRUE,
  );
  $form['advanced']['ms_paypal_wps_charset'] = array(
    '#type' => 'select',
    '#title' => t('Character Set'),
    '#options' => ms_paypal_wps_get_charsets(),
    '#default_value' => variable_get('ms_paypal_wps_charset', 'UTF-8'),
    '#description' => t('Choose the character set to use for PayPal. Default is UTF-8'),
    '#required' => FALSE,
    '#ms_override' => TRUE,
  );
  $form['advanced']['ms_paypal_wps_no_note'] = array(
    '#type' => 'select',
    '#title' => t('Prompt for Note?'),
    '#options' => array(
      '0' => 'Provide a text box and prompt for the note',
      '1' => 'Hide the text box and prompt',
    ),
    '#default_value' => variable_get('ms_paypal_wps_no_note', 0),
    '#description' => t('Prompt payers to include a note with their payments?'),
    '#required' => FALSE,
  );
  $form['advanced']['ms_paypal_wps_no_shipping'] = array(
    '#type' => 'select',
    '#title' => t('Ask for Shipping Address?'),
    '#options' => array(
      '0' => 'Prompt for an address, but do not require one.',
      '1' => 'Do not prompt for an address.',
      '2' => 'Prompt for an address, and require one.',
    ),
    '#default_value' => variable_get('ms_paypal_wps_no_shipping', ''),
    '#description' => t('Should the user be asked for his/her shipping address?'),
    '#required' => FALSE,
    '#ms_override' => TRUE,
  );
  $form['advanced']['ms_paypal_wps_shipping_amount'] = array(
    '#type' => 'textfield',
    '#title' => t('Shipping Amount'),
    '#size' => 64,
    '#maxlength' => 128,
    '#default_value' => variable_get('ms_paypal_wps_shipping_amount', ''),
    '#description' => t("Enter an amount that will be used to set shipping fees within
      PayPal. This will override the amount set in your PayPal account settings.
      Leave blank to use your PayPal account settings instead."),
    '#required' => FALSE,
    '#ms_override' => TRUE,
  );
  $form['advanced']['ms_paypal_wps_sra'] = array(
    '#type' => 'checkbox',
    '#title' => t('Try Again if Fail'),
    '#return_value' => 1,
    '#default_value' => variable_get('ms_paypal_wps_sra', FALSE),
    '#description' => t("Attempt to try again if there is an error."),
  );
  $form['advanced']['ms_paypal_wps_override_tax'] = array(
    '#type' => 'checkbox',
    '#title' => t('Override PayPal Tax Setting'),
    '#return_value' => 1,
    '#default_value' => variable_get('ms_paypal_wps_override_tax', FALSE),
    '#description' => t("This wil force orders to have 0 tax, regardless of the setting in the PayPal account."),
    '#ms_override' => TRUE,
  );
  $form['advanced']['ms_paypal_wps_process_pending_payments'] = array(
    '#type' => 'checkbox',
    '#title' => t('Process Pending Payments'),
    '#return_value' => 1,
    '#default_value' => variable_get('ms_paypal_wps_process_pending_payments', FALSE),
    '#description' => t("This will process pending payments as if they were completed.
      This means that bank transfers will be acted upon immediately instead of waiting
      until the payment clears. This can be used to defraud you, so use at your own risk."),
    '#ms_override' => TRUE,
  );
  $form['advanced']['ms_paypal_wps_lm_paypal_support'] = array(
    '#type' => 'checkbox',
    '#title' => t('Intercept LM PayPal IPNs'),
    '#return_value' => 1,
    '#default_value' => variable_get('ms_paypal_wps_lm_paypal_support', TRUE),
    '#description' => t("This will intercept LM PayPal IPNs so they are acted upon by MoneySuite modules. WARNING: This will break LM PayPal."),
  );

  return $form;
}

/**
 * Receive the IPN from PayPal for LM PayPal migration
 */
function ms_paypal_wps_lm_paypal_ipn() {
  if (!variable_get('ms_paypal_wps_lm_paypal_support', TRUE)) {
    return;
  }
  require_once 'includes/ms_paypal_wps_class.php';
  $ipn = ms_paypal_wps_ipn_handler($_POST);

  if ($ipn) {
    ms_core_log('ms_paypal_wps', 'Successfully Received an LM PayPal IPN from PayPal. Here are the details: Data: !data',
      array('!data' => ms_core_print_r($ipn)));

    // Load the order based on the custom and other info
    $oid = db_query("SELECT oid FROM {ms_orders} WHERE gateway = :gateway AND uid = :uid", array(':gateway' => 'lm_paypal', ':uid' => $ipn['custom']))->fetchField();

    if (!$order = ms_core_order_load($oid)) {
      // Load the order from the payments table by the recurring_id
      $order = ms_core_order_load_by_rec_id($ipn['recurring_payment_id']);
    }

    if ($order->oid) {
      ms_paypal_wps_process_ipn($ipn, $order, 'lm_paypal');
    } else {
      ms_core_log_error('ms_paypal_wps', 'Error loading the order for a LM_PayPal IPN: !data',
        array('!data' => ms_core_print_r($ipn)));
    }
  } else {
    ms_core_log_error('ms_paypal_wps', 'Error: An LM PayPal IPN has Failed Validation. This may be from a spoofed IPN or an attempt to hack. Here are the details: Data: !data',
      array('!data' => ms_core_print_r($_REQUEST)));
  }
}

/**
 * Process the IPN by adding a Payment record to an Order
 */
function ms_paypal_wps_process_ipn($ipn, $order, $gateway) {
  // Declare Defaults:
  if (!isset($ipn['recurring_payment_id'])) {
    $ipn['recurring_payment_id'] = '';
  }

  // Before we act on this, let's check to make sure it hasn't already been processed
  if (isset($ipn['txn_id']) AND $ipn['txn_id'] AND $existing_payment = ms_core_load_payment_by_transaction_id($ipn['txn_id']) AND $existing_payment->type != 'pending') {
    // Log that this IPN has already been processed, and exit
    ms_core_log_error('ms_paypal_wps', 'This IPN has already been acted on. Aborting.');
    return;
  }

  // Insert the Payment to the order
  $payment_type = isset($ipn['txn_type']) ? ms_paypal_wps_get_type($ipn['txn_type']) : ms_paypal_wps_get_type($ipn['payment_status']);
  $payment = ms_core_new_payment($order->oid, $gateway, $payment_type);

  $payment->transaction = isset($ipn['txn_id']) ? $ipn['txn_id'] : drupal_get_token(serialize($ipn));
  $payment->amount = isset($ipn['mc_gross']) ? $ipn['mc_gross'] : 0;

  // Check if PayPal added any taxes to the amount
  if (isset($ipn['tax']) AND $ipn['tax'] > 0) {
    // We need to subtract the tax amount from what is submitted to the system,
    // so that the security check gets the right number
    $payment->amount -= $ipn['tax'];
  }

  $payment->currency = $ipn['mc_currency'];
  $payment->recurring_id = (isset($ipn['subscr_id']) AND $ipn['subscr_id']) ? $ipn['subscr_id'] : $ipn['recurring_payment_id'];
  $payment->data = $ipn;

  // Update the address
  $payment->billing_address = array(
    'street' => isset($ipn['address_street']) ? $ipn['address_street'] : '',
    'city' => isset($ipn['address_city']) ? $ipn['address_city'] : '',
    'state' => isset($ipn['address_state']) ? $ipn['address_state'] : '',
    'zip' => isset($ipn['address_zip']) ? $ipn['address_zip'] : '',
    'country' => isset($ipn['address_country']) ? $ipn['address_country'] : '',
    'phone' => isset($ipn['contact_phone']) ? $ipn['contact_phone'] : '',
  );
  // Update the contact details
  $payment->first_name = $ipn['first_name'];
  $payment->last_name = $ipn['last_name'];

  switch ($payment->type) {
    case 'rec_payment':
      // If this is the first payment, we need to submit as rec_signup.
      $order = ms_core_order_load($payment->oid);
      if (count($order->payments) == 0) {
        $payment->type = 'rec_signup';
      }

      // Add the Payment to the Order.
      ms_core_enter_payment($payment);
      break;

    case 'rec_signup':
      // Validate the recurring schedule.
      $main_period = explode(' ', $ipn['period3']);
      $trial_period = isset($ipn['period1']) ? explode(' ', $ipn['period1']) : array('', '');
      $recurring_schedule = array(
        'total_occurrences' => (isset($ipn['recur_times'])) ? $ipn['recur_times'] : 0,
        'main_amount' => isset($ipn['mc_amount3']) ? $ipn['mc_amount3'] : isset($ipn['amount3']) ? $ipn['amount3'] : 0,
        'main_length' => $main_period[0],
        'main_unit' => $main_period[1],
        'has_trial' => ($trial_period[0]) ? TRUE : FALSE,
        'trial_amount' => isset($ipn['mc_amount1']) ? $ipn['mc_amount1'] : isset($ipn['amount1']) ? $ipn['amount1'] : 0,
        'trial_length' => $trial_period[0],
        'trial_unit' => $trial_period[1],
      );
      if (!ms_core_valid_payment($order, $payment->type, $recurring_schedule)) {
        drupal_set_message(t('There was an error with the payment. Please contact the site administrator.'), 'error');
        ms_core_log_error('ms_paypal_wps', 'Possible spoofing attempt. Price mismatch. Ignoring IPN. Order: !order IPN: !ipn',
          array('!order' => ms_core_print_r($order), '!ipn' => ms_core_print_r($ipn)));
        $payment->type = 'rec_failed';
        ms_core_enter_payment($payment);
        return FALSE;
      }
      // Because only 1 IPN is sent of rec_signup, we need to check if the
      // order has a free trial, and if so, enter this payment for it.
      if ($order->recurring_schedule['has_trial'] && $recurring_schedule['trial_amount'] == 0) {
        ms_core_enter_payment($payment);
      } else {
        // Do nothing since the rec_payment will insert a rec_signup if it's the
        // first payment. This is so the new system for calculating next payment
        // works.
      }
      break;

    case 'failed':
      // Log the failed payment
      ms_core_log_error('ms_paypal_wps', 'Failed Payment IPN: ' . ms_core_print_r($ipn));
      ms_core_log_error('ms_paypal_wps', 'Failed Payment: ' . ms_core_print_r($payment));

      // Add the Payment to the Order
      ms_core_enter_payment($payment);
      break;

    case 'cart':
      // Check that the currency and amount match the order.
      if (!ms_core_valid_payment($order, $payment->type, $payment->amount) || $payment->currency != $order->currency) {
        drupal_set_message(t('There was an error with the payment. Please contact the site administrator.'), 'error');
        ms_core_log_error('ms_paypal_wps', 'Possible spoofing attempt. Price mismatch. Ignoring IPN. Order: !order IPN: !ipn',
          array('!order' => ms_core_print_r($order), '!ipn' => ms_core_print_r($ipn)));
        return FALSE;
      }
      switch ($ipn['payment_status']) {
        case 'Completed':
          ms_core_add_history_item($order, 0, t('Payment of @amount submitted through PayPal.', array('@amount' => ms_core_format_money($payment->amount))));
          ms_core_add_history_item($order, 0, t('PayPal IPN reported a payment of @amount.', array('@amount' => ms_core_format_money($payment->amount))), TRUE);

          // Add the Payment to the Order
          ms_core_enter_payment($payment);
          break;

        case 'Processed':
          ms_core_add_history_item($order, 0, t('A payment has been accepted.'), TRUE);
          break;

        case 'Canceled_Reversal':
          ms_core_add_history_item($order, 0, t('PayPal has cancelled the reversal and returned !amount to your account.',
            array('!amount' => ms_core_format_money($payment->amount))), TRUE);
          // Add the Payment to the Order
          ms_core_enter_payment($payment);
          break;

        case 'Denied':
          ms_core_add_history_item($order, 0, t("You have denied the customer's payment."), TRUE);

          $payment->type = 'failed';
          // Add the Payment to the Order
          ms_core_enter_payment($payment);
          break;

        case 'Failed':
          ms_core_add_history_item($order, 0, t("The customer's attempted payment from a bank account failed."), TRUE);
          $payment->type = 'failed';
          // Add the Payment to the Order
          ms_core_enter_payment($payment);
          break;

        case 'Voided':
          ms_core_add_history_item($order, 0, t('The authorization has been voided.'), TRUE);

          $payment->type = 'failed';
          // Add the Payment to the Order
          ms_core_enter_payment($payment);
          break;

        case 'Expired':
          ms_core_add_history_item($order, 0, t('The authorization has failed and cannot be captured.'), TRUE);

          $payment->type = 'failed';
          // Add the Payment to the Order
          ms_core_enter_payment($payment);
          break;

        case 'Reversed':
          ms_core_log_error('ms_paypal_wps', 'PayPal has reversed a payment!');
          ms_core_add_history_item($order, 0, t('Payment has been reversed by PayPal: @reason', array('@reason' => _ms_paypal_wpp_reversal_message(check_plain($_POST['reason_code'])))), TRUE);

          $payment->type = 'reversal';
          // Add the Payment to the Order
          ms_core_enter_payment($payment);
          break;

        case 'Refunded':
          $payment->type = 'refund';
          // Subtract the mc_fee as well
          if (isset($ipn['mc_fee'])) {
            $payment->amount -= $ipn['mc_fee'];
          }
          // Add the Payment to the Order
          ms_core_enter_payment($payment);
          break;

        case 'Pending':
          // Check if the payment should be processed if it is pending
          if (ms_core_variable_get('ms_paypal_wps_process_pending_payments', FALSE, $order)) {
            ms_core_add_history_item($order, 0, t('Payment of @amount pending through PayPal. Completing order.', array('@amount' => ms_core_format_money($payment->amount))));
            ms_core_add_history_item($order, 0, t('PayPal IPN reported a pending payment of @amount. Completing order.', array('@amount' => ms_core_format_money($payment->amount))), TRUE);

            // Add the Payment to the Order
            ms_core_enter_payment($payment);
          } else {
            ms_core_add_history_item($order, 0, t('Payment is pending at PayPal: @reason', array('@reason' => _ms_paypal_wps_pending_message(check_plain($_POST['pending_reason'])))), TRUE);

            $payment->type = 'pending';
            // Add the Payment to the Order
            ms_core_enter_payment($payment);
          }
          break;
      }
      break;

    default:
      // Add the Payment to the Order
      ms_core_enter_payment($payment);
      break;
  }
}

/**
 * Returns a message for the pending reason of a PayPal payment.
 * @param $reason
 * @return
 *   String that explains the reason code
 */
function _ms_paypal_wps_pending_message($reason) {
  switch ($reason) {
    case 'address':
      return t('Customer did not include a confirmed shipping address per your address settings.');
    case 'authorization':
      return t('Waiting on you to capture the funds per your authorization settings.');
    case 'echeck':
      return t('eCheck has not yet cleared.');
    case 'intl':
      return t('You must manually accept or deny this international payment from your Account Overview.');
    case 'multi-currency':
      return t('You must manually accept or deny a payment of this currency from your Account Overview.');
    case 'unilateral':
      return t('Your e-mail address is not yet registered or confirmed.');
    case 'upgrade':
      return t('You must upgrade your account to Business or Premier status to receive credit card payments.');
    case 'verify':
      return t('You must verify your account before you can accept this payment.');
    case 'other':
    default:
      return t('Reason unknown; contact PayPal Customer Service for more information.');
  }
}

/**
 * Receive the IPN from PayPal, verify it, and load the associated order
 */
function ms_paypal_wps_ipn() {
  require_once 'includes/ms_paypal_wps_class.php';
  $ipn = ms_paypal_wps_ipn_handler($_POST);

  // Let's make sure it is UTF-8. If it isn't, let's try to convert it
  if ($ipn AND array_key_exists('charset', $ipn) && ($charset = $ipn['charset'])) {
    // Try to convert if not utf-8
    if ($charset != 'utf-8') {
      foreach ($ipn as &$value) {
        $value = mb_convert_encoding($value, 'utf-8', $charset);
      }
      // And store the charset values for future reference
      $ipn['charset'] = 'utf-8';
      $ipn['charset_original'] = $charset;
    }
  }

  if ($ipn) {
    ms_core_log('ms_paypal_wps', 'Successfully Received an IPN from PayPal. Here are the details: Data: !data',
      array('!data' => ms_core_print_r($ipn)));

    if (!$order = ms_core_order_load($ipn['custom'])) {
      // Load the order from the payments table by the recurring_id
      $order = ms_core_order_load_by_rec_id($ipn['recurring_payment_id']);
    }

    if ($order->oid) {
      ms_paypal_wps_process_ipn($ipn, $order, 'ms_paypal_wps');
    } else {
      ms_core_log_error('ms_paypal_wps', 'Error loading the order for a Payment IPN: !data',
        array('!data' => ms_core_print_r($ipn)));
    }
  } else {
    ms_core_log_error('ms_paypal_wps', 'Error: An IPN has Failed Validation. This may be from a spoofed IPN or an attempt to hack. Here are the details: Data: !data',
      array('!data' => ms_core_print_r($_REQUEST)), WATCHDOG_WARNING);
  }
}

/**
 * Get the Cancellation URL for a recurring order
 */
function ms_paypal_wps_get_cancel_url($order) {
  $cancel_url = '';
  // Find the merchant id.
  foreach ($order->payments as $payment) {
    if (!empty($payment->data['receiver_id'])) {
      if (ms_core_variable_get('ms_paypal_wps_use_sandbox', FALSE, $order)) {
        $cancel_url = url("https://www.sandbox.paypal.com/cgi-bin/webscr?cmd=_subscr-find&alias="
          . urlencode($payment->data['receiver_id']));
      } else {
        $cancel_url = url("https://www.paypal.com/cgi-bin/webscr?cmd=_subscr-find&alias="
          . urlencode($payment->data['receiver_id']));
      }
    }
  }

  return $cancel_url;
}

/**
 * Get the Modification URL for a recurring order
 */
function ms_paypal_wps_get_modify_url($order, $id) {
  return 'ms_paypal_wps/modify/' . $order->oid . '/' . $id;
}

/**
 * Initiate a modification
 */
function ms_paypal_wps_modify_page($oid, $id) {
  $order = ms_core_order_load($oid);
  $new_product = ms_core_load_module_product(ms_core_get_order_module($order), $id);

  $data['new_product'] = $new_product;

  $order = ms_core_add_data($order, $data);

  if ($order->order_type != 'recurring') {
    // $order = ms_core_add_order_product($order, $new_product);
    $order->order_type = 'recurring';
    $order->recurring_schedule = $new_product->recurring_schedule;
    // Start the Payment
    $output = ms_paypal_wps_get_button($order, ms_core_get_order_title($order, 64, 2));
  } else {
    $order->recurring_schedule = $new_product->recurring_schedule;
    // Start the Payment
    $output = ms_paypal_wps_get_button($order, ms_core_get_order_title($order, 64, 2), 2);
  }

  return $output;
}

/**
 * Implements hook_ms_core_payment_gateway().
 */
function ms_paypal_wps_ms_core_payment_gateway() {
  $gateway['ms_paypal_wps'] = array(
    'name' => 'PayPal Website Payments Standard',
    'display_name' => 'PayPal',
    'description' => '<img src="https://www.paypal.com/en_US/i/logo/PayPal_mark_37x23.gif" style="position: relative; top: 5px; margin-right: 4px;" />'
      . t('PayPal - pay without sharing your financial information.'),
    'module' => 'ms_paypal_wps',
    'cards' => array('visa', 'mc', 'discover', 'amex', 'echeck', 'paypal'),
    'currency' => array('AUD', 'BRL', 'CAD', 'CZK', 'DKK', 'EUR', 'HKD', 'HUF', 'ILS', 'JPY', 'MYR', 'MXN', 'NOK', 'NZD', 'PHP', 'PLN', 'GBP', 'SGD', 'SEK', 'CHF', 'TWD', 'THB', 'TRY', 'USD'),
    'checkout_path' => 'ms/checkout/paypal_wps',
    'cancel_url' => 'ms_paypal_wps_get_cancel_url',
    'modify_url' => 'ms_paypal_wps_get_modify_url',
    'settings' => ms_paypal_wps_admin(),
  );
  return $gateway;
}

/**
 * Helper Function to Use the Correct TXN type name for MS Core to use
 */
function ms_paypal_wps_get_type($txn) {
  switch ($txn) {
    case 'web_accept':
      return 'cart';
    case 'subscr_modify':
      return 'rec_modify';
    case 'subscr_signup':
      return 'rec_signup';
    case 'subscr_payment':
      return 'rec_payment';
    case 'subscr_cancel':
      return 'rec_cancel';
    case 'subscr_eot':
      return 'rec_eot';
    case 'Refunded':
      return 'refund';
    case 'reverse':
      return 'reversal';
    case 'recurring_payment_suspended_due_to_max_failed_payment':
    case 'subscr_failed':
      return 'failed';
    default:
      return $txn;
  }
}

/**
 * Prep Variables for PayPal and Send
 */
function ms_paypal_wps_get_button($order, $title, $modify = NULL) {
  ms_core_log('ms_paypal_wps', 'Creating a new PayPal button: Order: !data',
    array('!data' => ms_core_print_r($order)));

  // Use the correct link for Sandbox
  if (ms_core_variable_get('ms_paypal_wps_use_sandbox', FALSE, $order)) {
    $ipn_link = 'https://www.sandbox.paypal.com/cgi-bin/webscr';
  } else {
    $ipn_link = 'https://www.paypal.com/cgi-bin/webscr';
  }

  require_once 'includes/ms_paypal_wps_class.php';

  $data = array();

  //Construct the payment class
  $payment = new ms_paypal_wps_class;
  $payment->ipnLink = $ipn_link;

  // Add the variables
  $data['business'] = ms_core_variable_get('ms_paypal_wps_email', '', $order);
  $data['item_name'] = htmlspecialchars($title, ENT_QUOTES);
  $data['no_shipping'] = ms_core_variable_get('ms_paypal_wps_no_shipping', 1, $order);
  $data['rm'] = ms_core_variable_get('ms_paypal_wps_rm', 2, $order);
  $data['return'] = url('ms_paypal_wps/thank-you' . '/' . $order->unique_key, array('absolute' => TRUE));
  $data['cancel_return'] = url(ms_core_variable_get('ms_paypal_wps_cancel_return', '', $order), array('absolute' => TRUE));
  $data['notify_url'] = url(ms_core_variable_get('ms_paypal_wps_notify_url', 'paypal/backend', $order), array('absolute' => TRUE));

  $data['custom'] = $order->oid;
  $data['no_note'] = ms_core_variable_get('ms_paypal_wps_no_note', 1, $order);
  $data['mrb'] = 'QAJAZZWUQTE9G';

  if (ms_core_variable_get('ms_paypal_wps_override_tax', FALSE, $order)) {
    $data['tax'] = 0.0;
  }
  // Add shipping if it is set
  if (is_numeric(ms_core_variable_get('ms_paypal_wps_shipping_amount', '', $order))) {
    $data['shipping'] = variable_get('ms_paypal_wps_shipping_amount', '');
  }

  if ($lc = ms_core_variable_get('ms_paypal_wps_lc', 0, $order)) {
    $data['lc'] = $lc;
  }

  $data['charset'] = ms_core_variable_get('ms_paypal_wps_charset', 'UTF-8', $order);

  // Set the currency and amount
  $data['currency_code'] = $order->currency;
  $amount = $order->amount;
  $main_amount = $order->recurring_schedule['main_amount'];
  $trial_amount = $order->recurring_schedule['trial_amount'];

  if ($page_style = ms_core_variable_get('ms_paypal_wps_page_style', '', $order)) {
    $data['page_style'] = $page_style;
  }

  // Add the modify variables if this is a modification
  if ($modify) {
    $data['modify'] = $modify;
    $data['item_number'] = ms_core_get_order_rec_id($order->oid);
  }

  switch ($order->order_type) {
    case 'recurring':
      // Make sure the length and units are valid
      ms_paypal_wps_validate_period($order->recurring_schedule['main_unit'], $order->recurring_schedule['main_length']);
      $data['cmd'] = '_xclick-subscriptions';
      $data['a3'] = $main_amount;
      $data['p3'] = $order->recurring_schedule['main_length'];
      $data['t3'] = $order->recurring_schedule['main_unit'];
      $data['sra'] = ms_core_variable_get('ms_paypal_wps_sra', FALSE, $order);
      $data['src'] = 1;
      $data['srt'] = $order->recurring_schedule['total_occurrences'];

      // Add Trial Period Settings
      if ($order->recurring_schedule['has_trial']) {
        // Make sure the length and units are valid
        ms_paypal_wps_validate_period($order->recurring_schedule['trial_unit'], $order->recurring_schedule['trial_length']);
        $data['a1'] = $trial_amount;
        $data['p1'] = $order->recurring_schedule['trial_length'];
        $data['t1'] = $order->recurring_schedule['trial_unit'];
      }
      break;

    case 'cart':
      $data['cmd'] = '_xclick';
      $data['amount'] = $amount;
      break;

    default:
      ms_core_log_error('ms_paypal_wps', 'Something went wrong, using backup method...');
      $data['cmd'] = '_xclick';
      $data['amount'] = $amount;
      break;
  }

  if (FALSE) { // This isn't working
    // Build the link and Redirect
    header('Location: ' . $ipn_link . '?' . http_build_query($data));
    die();
  }

  // Add in the JS
  $timeout = variable_get('ms_paypal_wps_paypal_page_timeout', 0) * 1000;
  $js = "
    (function ($) {
    window.setTimeout(function() {
      $('#paypalPaymentForm').submit();
    }, $timeout);
    })(jQuery);
  ";
  drupal_add_js($js, array('type' => 'inline', 'scope' => 'footer'));

  // Generate some HTML
  $html = variable_get('ms_paypal_wps_paypal_page_text', t("Please wait for a few seconds, your purchase is being processed and you will be redirected to PayPal's secure payment page.
<br/><br/>
If you are not automatically redirected to the PayPal payment page within 5 seconds, click below:
<br/><br/>"));

  foreach ($data as $key => $value) {
    $payment->add($key, $value);
  }

  return $html . $payment->submit(t('Click Here'));
}

/**
 * Changes the units and length to a different type if needed
 */
function ms_paypal_wps_validate_period(&$unit, &$length) {
  // Make sure the length and units are valid
  if ($unit == 'D' AND $length > 90) {
    $unit = 'W';
    $length = ceil($length / 7);
    ms_core_log_error('ms_paypal_wps', 'The unit and period for this plan are not
      valid. Attempting to convert to a valid set.', array(), WATCHDOG_WARNING);
  }
  if ($unit == 'W' AND $length > 52) {
    $unit = 'M';
    $length = ceil($length / 30);
    ms_core_log_error('ms_paypal_wps', 'The unit and period for this plan are not
      valid. Attempting to convert to a valid set.', array(), WATCHDOG_WARNING);
  }
  if ($unit == 'M' AND $length > 24) {
    $unit = 'Y';
    $length = ceil($length / 12);
    ms_core_log_error('ms_paypal_wps', 'The unit and period for this plan are not
      valid. Attempting to convert to a valid set.', array(), WATCHDOG_WARNING);
  }
  if ($unit == 'Y' AND $length > 5) {
    ms_core_log_error('ms_paypal_wps', 'The unit and period for this plan are not
      valid and were not able to be converted to a valid set.', WATCHDOG_CRITICAL);
  }
}

/**
 * IPN Callback Handler
 */
function ms_paypal_wps_ipn_handler($ipn_vars) {
  //Construct the payment class
  $payment = new ms_paypal_wps_class($ipn_vars);

  // Validate the ipn
  if ($payment->verify()) {
    $ipn = $payment->ipn;
    return $ipn;
  } else {
    // Let's make sure it is UTF-8. If it isn't, let's try to convert it
    if (array_key_exists('charset', $ipn_vars) && ($charset = $ipn_vars['charset'])) {
      // Try to convert if not utf-8
      if ($charset != 'utf-8') {
        foreach ($ipn_vars as &$value) {
          $value = mb_convert_encoding($value, 'utf-8', $charset);
        }
        // And store the charset values for future reference
        $ipn_vars['charset'] = 'utf-8';
        $ipn_vars['charset_original'] = $charset;
        $payment = new ms_paypal_wps_class($ipn_vars);
        if ($payment->verify()) {
          $ipn = $payment->ipn;
          return $ipn;
        }
      }
    }
    ms_core_log_error('ms_paypal_wps', 'Failed IPN Validation. Response: !result Error: !error Vars: !vars',
      array('!result' => $payment->ipnResult, '!error' => $payment->lastError, '!vars' => ms_core_print_r($ipn_vars)));
    return FALSE;
  }
}

/**
 * Initiate a Payment
 */
function ms_paypal_wps_initiate_payment() {
  // Stop the caching
  $GLOBALS['conf']['cache'] = FALSE;

  // Load the order
  if (!$order = ms_core_load_session_order()) {
    // Error
    return t('There was an error with the checkout');
  }

  // Start the Payment
  $output = ms_paypal_wps_get_button($order, ms_core_get_order_title($order, 64));

  return $output;
}

/**
 * Landing page which will wait until the IPN has been received before proceeding
 */
function ms_paypal_wps_thankyou_page() {
  drupal_set_title(t('Thank You'));
  $txn_id = isset($_POST['txn_id']) ? $_POST['txn_id'] : 0;
  $unique_key = arg(2);
  if (!$order = ms_core_order_load_unique($unique_key)) {
    // Should never get this far
    ms_core_log_error('ms_paypal_wps', 'The order was unable to be loaded from the unique key: !key',
      array('!key' => $unique_key));
    return t("There was an error processing the payment. This error has been logged.");
  }

  ms_core_set_order_session($order);

  $thank_you_page = url('ms/thankyou');
  $check_url = url('ms_paypal_wps/check_ipn_status/' . $unique_key, array('absolute' => TRUE));

  // JS
  $js = "
  jQuery(function($) {
   jQuery('.ms_paypal_wps_landing_click_here').hide();
   check_ipn_status();
  });

  function check_ipn_status() {
    jQuery.getJSON('$check_url', {txn_id : '$txn_id'}, parse_info);
  }

  function parse_info(data) {
    switch (data.result) {
      case 'success':
        window.location.replace('$thank_you_page');
        break;
      case 'error':
        alert(data.error);
        break;
      case 'failure':
        setTimeout(check_ipn_status, 5000);
        break;
      default:
        alert('test');
        setTimeout(check_ipn_status, 5000);
        break;
    }
  }
  ";
  drupal_add_js($js, 'inline');

  // Show a loading page while we wait for the IPN from PayPal
  $output = '';
  $ajax_img = base_path() . drupal_get_path('module', 'ms_core') . '/images/ajax-bar-loader.gif';
  $output .= "<div style='text-align:center;width:100%;'>"
    . t('Your order is being processed. Please allow up to 2 minutes for this process to complete.')
    . "</div>";
  $output .= "<div style='text-align:center;width:100%;'>"
    . t('Thank you for your patience.')
    . "</div>";

  $output .= "<div class='ajax_loader' style='margin: 15px 0 0;clear:both;width:100%;text-align:center;'><img src='$ajax_img' alt='Loading' /></div>";
  $output .= "<div class='ms_paypal_wps_landing_click_here'>"
    . t('If you have waited for over one minute, please !click.',
      array('!click' => l(t('click here'), 'ms/thankyou')))
    . "</div>";

  return $output;
}

/**
 * Checks if an IPN has been received yet
 *
 * @param $unique_key
 *   The unique key associated with the order
 * @return
 *   Returns a json encoded string
 */
function ms_paypal_wps_ipn_ajax_page($unique_key) {
  // Stop the caching
  $GLOBALS['conf']['cache'] = FALSE;

  $data = array();
  if (!$order = ms_core_order_load_unique($unique_key)) {
    // Should never get this far
    ms_core_log_error('ms_paypal_wps', 'The order was unable to be loaded from the unique key: !key',
      array('!key' => $unique_key));
    $data['result'] = 'error';
    $data['error'] = t("There was an error loading the order. Please contact a site administrator.");
  } else {
    // Check if the payment has been recorded yet
    if (isset($_REQUEST['txn_id']) AND $txn_id = $_REQUEST['txn_id']) {
      $data['result'] = 'failure';

      // Check the status of the payment, and show a message
      foreach ($order->payments as $payment) {
        if ($payment->transaction == $txn_id) {
          $data['result'] = 'success';
          $data['status'] = $payment->data['payment_status'];

          switch ($payment->data['payment_status']) {
            case 'Completed':
            case 'Processed':
              drupal_set_message(t('The payment has been completed.'));
              break;

            case 'Denied':
            case 'Expired':
            case 'Failed':
              ms_core_log_error('ms_paypal_wps', 'A payment has failed.');
              ms_core_add_history_item($order, 0, t('Payment failed.'), TRUE);
              drupal_set_message(t('The order could not be charged. Please contact a site administrator.'));
              break;

            case 'Pending':
              ms_core_log_error('ms_paypal_wps', 'A payment was marked as pending. The reason was: @reason',
                array('@reason' => _ms_paypal_wps_pending_message($payment->data['pending_reason'])), WATCHDOG_WARNING);
              ms_core_add_history_item($order, 0, t('Payment marked as Pending. Reason: @reason', array('@reason' => _ms_paypal_wps_pending_message($payment->data['pending_reason']))), TRUE);
              drupal_set_message(t('The payment is pending. When the payment is completed, you will be notified by email.'));
              break;
          }
        }
      }
    } else {
      if ($order->uid && count($order->payments)) {
        // The order has a user id and is ready to go
        $data['result'] = 'success';
        $data['status'] = 'Unable to determine status';
      } else {
        $data['result'] = 'failure';
      }
    }
  }
  print drupal_json_encode($data);
}

/**
 * Returns an array of all charsets supported by PayPal WPS
 */
function ms_paypal_wps_get_charsets() {
  $charsets = array(
    'Big5 (Traditional Chinese in Taiwan)',
    'EUC-JP',
    'EUC-KR',
    'EUC-TW',
    'gb2312 (Simplified Chinese)',
    'gbk',
    'HZ-GB-2312 (Traditional Chinese in Hong Kong)',
    'ibm-862 (Hebrew with European characters)',
    'ISO-2022-CN',
    'ISO-2022-JP',
    'ISO-2022-KR',
    'ISO-8859-1 (Western European Languages)',
    'ISO-8859-2',
    'ISO-8859-3',
    'ISO-8859-4',
    'ISO-8859-5',
    'ISO-8859-6',
    'ISO-8859-7',
    'ISO-8859-8',
    'ISO-8859-9',
    'ISO-8859-13',
    'ISO-8859-15',
    'KOI8-R (Cyrillic)',
    'Shift_JIS',
    'UTF-7',
    'UTF-8',
    'UTF-16',
    'UTF-16BE',
    'UTF-16LE',
    'UTF16_PlatformEndian',
    'UTF16_OppositeEndian',
    'UTF-32',
    'UTF-32BE',
    'UTF-32LE',
    'UTF32_PlatformEndian',
    'UTF32_OppositeEndian',
    'US-ASCII',
    'windows-1250',
    'windows-1251',
    'windows-1252',
    'windows-1253',
    'windows-1254',
    'windows-1255',
    'windows-1256',
    'windows-1257',
    'windows-1258',
    'windows-874 (Thai)',
    'windows-949 (Korean)',
    'x-mac-greek',
    'x-mac-turkish',
    'x-mac-centraleurroman',
    'x-mac-cyrillic',
    'ebcdic-cp-us',
    'ibm-1047',
  );

  return array_combine($charsets, $charsets);
}

/**
 * Returns an array of all country codes
 */
function ms_paypal_wps_get_countries() {
  $c = array();

  // NONE
  $c[0] = t('Use PayPal Cookie');

  // A
  $c['AL'] = 'ALBANIA';
  $c['DZ'] = 'ALGERIA';
  $c['AS'] = 'AMERICAN SAMOA';
  $c['AD'] = 'ANDORRA';
  $c['AI'] = 'ANGUILLA';
  $c['AG'] = 'ANTIGUA AND BARBUDA';
  $c['AR'] = 'ARGENTINA';
  $c['AM'] = 'ARMENIA';
  $c['AW'] = 'ARUBA';
  $c['AU'] = 'AUSTRALIA';
  $c['AT'] = 'AUSTRIA';
  $c['AZ'] = 'AZERBAIJAN';

  // B
  $c['BS'] = 'BAHAMAS';
  $c['BH'] = 'BAHRAIN';
  $c['BD'] = 'BANGLADESH';
  $c['BB'] = 'BARBADOS';
  $c['BY'] = 'BELARUS';
  $c['BE'] = 'BELGIUM';
  $c['BZ'] = 'BELIZE';
  $c['BJ'] = 'BENIN';
  $c['BM'] = 'BERMUDA';
  $c['BO'] = 'BOLIVIA';
  $c['BA'] = 'BOSNIA AND HERZEGOVINA';
  $c['BW'] = 'BOTSWANA';
  $c['BR'] = 'BRAZIL';
  $c['VG'] = 'BRITISH VIRGIN ISLANDS';
  $c['BN'] = 'BRUNEI';
  $c['BG'] = 'BULGARIA';
  $c['BF'] = 'BURKINA FASO';

  // C
  $c['KH'] = 'CAMBODIA';
  $c['CM'] = 'CAMEROON';
  $c['CA'] = 'CANADA';
  $c['CV'] = 'CAPE VERDE';
  $c['KY'] = 'CAYMAN ISLANDS';
  $c['CL'] = 'CHILE';
  $c['CN'] = 'CHINA';
  $c['CO'] = 'COLOMBIA';
  $c['CK'] = 'COOK ISLANDS';
  $c['HR'] = 'CROATIA';
  $c['CY'] = 'CYPRUS';
  $c['CZ'] = 'CZECH REPUBLIC';

  // D
  $c['DK'] = 'DENMARK';
  $c['DJ'] = 'DJIBOUTI';
  $c['DM'] = 'DOMINICA';
  $c['DO'] = 'DOMINICAN REPUBLIC';

  // E
  $c['TP'] = 'EAST TIMOR';
  $c['EG'] = 'EGYPT';
  $c['SV'] = 'EL SALVADOR';
  $c['EE'] = 'ESTONIA';

  // F
  $c['FJ'] = 'FIJI';
  $c['FI'] = 'FINLAND';
  $c['FR'] = 'FRANCE';
  $c['GF'] = 'FRENCH GUIANA';
  $c['PF'] = 'FRENCH POLYNESIA';

  // G
  $c['GA'] = 'GABON';
  $c['GE'] = 'GEORGIA';
  $c['DE'] = 'GERMANY';
  $c['GH'] = 'GHANA';
  $c['GI'] = 'GIBRALTAR';
  $c['GR'] = 'GREECE';
  $c['GD'] = 'GRENADA';
  $c['GP'] = 'GUADELOUPE';
  $c['GU'] = 'GUAM';
  $c['GT'] = 'GUATEMALA';
  $c['GN'] = 'GUINEA';
  $c['GY'] = 'GUYANA';

  // H
  $c['HT'] = 'HAITI';
  $c['HN'] = 'HONDURAS';
  $c['HK'] = 'HONG KONG';
  $c['HU'] = 'HUNGARY';

  // I
  $c['IS'] = 'ICELAND';
  $c['IN'] = 'INDIA';
  $c['ID'] = 'INDONESIA';
  $c['IE'] = 'IRELAND';
  $c['IL'] = 'ISRAEL';
  $c['IT'] = 'ITALY';
  $c['CI'] = 'IVORY COAST';

  // J
  $c['JM'] = 'JAMAICA';
  $c['JP'] = 'JAPAN';
  $c['JO'] = 'JORDAN';

  // K
  $c['KZ'] = 'KAZAKHSTAN';
  $c['KE'] = 'KENYA';
  $c['KW'] = 'KUWAIT';

  // L
  $c['LA'] = 'LAO PEOPLE\'S DEMOCRATIC REPUBLIC';
  $c['LV'] = 'LATVIA';
  $c['LB'] = 'LEBANON';
  $c['LS'] = 'LESOTHO';
  $c['LT'] = 'LITHUANIA';
  $c['LU'] = 'LUXEMBOURG';

  // M
  $c['MO'] = 'MACAO';
  $c['MK'] = 'MACEDONIA';
  $c['MG'] = 'MADAGASCAR';
  $c['MY'] = 'MALAYSIA';
  $c['MV'] = 'MALDIVES';
  $c['ML'] = 'MALI';
  $c['MT'] = 'MALTA';
  $c['MH'] = 'MARSHALL ISLANDS';
  $c['MQ'] = 'MARTINIQUE';
  $c['MU'] = 'MAURITIUS';
  $c['MX'] = 'MEXICO';
  $c['FM'] = 'MICRONESIA, FEDERATED STATES OF';
  $c['MD'] = 'MOLDOVA';
  $c['MN'] = 'MONGOLIA';
  $c['MS'] = 'MONTSERRAT';
  $c['MA'] = 'MOROCCO';
  $c['MZ'] = 'MOZAMBIQUE';

  // N
  $c['NA'] = 'NAMIBIA';
  $c['NP'] = 'NEPAL';
  $c['NL'] = 'NETHERLANDS';
  $c['AN'] = 'NETHERLANDS ANTILLES';
  $c['NZ'] = 'NEW ZEALAND';
  $c['NI'] = 'NICARAGUA';
  $c['MP'] = 'NORTHERN MARIANA ISLANDS';
  $c['NO'] = 'NORWAY';

  // O
  $c['OM'] = 'OMAN';

  // P
  $c['PK'] = 'PAKISTAN';
  $c['PW'] = 'PALAU';
  $c['PS'] = 'PALESTINE';
  $c['PA'] = 'PANAMA';
  $c['PG'] = 'PAPUA NEW GUINEA';
  $c['PY'] = 'PARAGUAY';
  $c['PE'] = 'PERU';
  $c['PH'] = 'PHILIPPINES, REPUBLIC OF';
  $c['PL'] = 'POLAND';
  $c['PT'] = 'PORTUGAL';
  $c['PR'] = 'PUERTO RICO';

  // Q
  $c['QA'] = 'QATAR';

  // R
  $c['RO'] = 'ROMANIA';
  $c['RU'] = 'RUSSIAN FEDERATION';
  $c['RW'] = 'RWANDA';

  // S
  $c['KN'] = 'SAINT KITTS AND NEVIS';
  $c['LC'] = 'SAINT LUCIA';
  $c['VC'] = 'SAINT VINCENT AND THE GRENDINES';
  $c['WS'] = 'SAMOA';
  $c['SA'] = 'SAUDI ARABIA';
  $c['CS'] = 'SERBIA AND MONTENEGRO';
  $c['SC'] = 'SEYCHELLES';
  $c['SG'] = 'SINGAPORE';
  $c['SK'] = 'SLOVAKIA';
  $c['SI'] = 'SLOVENIA';
  $c['SB'] = 'SOLOMON ISLANDS';
  $c['ZA'] = 'SOUTH AFRICA';
  $c['KR'] = 'SOUTH KOREA';
  $c['ES'] = 'SPAIN';
  $c['LK'] = 'SRI LANKA';
  $c['SZ'] = 'SWAZILAND';
  $c['SE'] = 'SWEDEN';
  $c['CH'] = 'SWITZERLAND';

  // T
  $c['TW'] = 'TAIWAN';
  $c['TZ'] = 'TANZANIA, UNITED REPUBLIC OF';
  $c['TH'] = 'THAILAND';
  $c['TG'] = 'TOGO';
  $c['TO'] = 'TONGA';
  $c['TT'] = 'TRINIDAD AND TOBAGO';
  $c['TN'] = 'TUNISIA';
  $c['TR'] = 'TURKEY';
  $c['TM'] = 'TURKMENISTAN';
  $c['TC'] = 'TURKS AND CAICOS ISLANDS';

  // U
  $c['UG'] = 'UGANDA';
  $c['UA'] = 'UKRAINE';
  $c['AE'] = 'UNITED ARAB EMIRATES';
  $c['GB'] = 'UNITED KINGDOM';
  $c['US'] = 'UNITED STATES OF AMERICA';
  $c['UY'] = 'URUGUAY';
  $c['UZ'] = 'UZBEKISTAN';

  // V
  $c['VU'] = 'VANUATU';
  $c['VE'] = 'VENEZUELA';
  $c['VN'] = 'VIETNAM';
  $c['VI'] = 'VIRGIN ISLANDS, U.S.';

  // W, X, Y, Z
  $c['YE'] = 'YEMEN ARAB REPUBLIC';
  $c['ZM'] = 'ZAMBIA';

  return $c;
}
