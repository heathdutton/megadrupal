<?php

/**
 * @file
 * MoneySuite Payza Gateway
 *
 * Original author: Leighton Whiting - Released under GENERAL PUBLIC LICENSE
 * Current maintenance by multiple MoneySuite users.
 * Re: new initiative: https://www.drupal.org/node/2315653 
 */

/**
 * Implements hook_help().
 */
function ms_payza_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/moneysuite/gateways/ms_payza":
    case "admin/help#ms_payza":
      $output = '<p>' . t("Payza Gateway Module for MoneySuite. This allows you to recieve payments
      using your Payza account. This gateway supports both Recurring and Non-Recurring Orders.") . '</p>';
      break;
  }
  return $output;
}

/**
 * Access callback that always returns TRUE
 */
function ms_payza_access_test() {
  return TRUE;
}

/**
 * Test if the user should be able to cancel the payments
 */
function ms_payza_cancel_page_test($oid) {
  global $user;
  $order = ms_core_order_load($oid);
  if ($user->uid == $order->uid OR user_access('administer moneysuite orders')) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_menu().
 */
function ms_payza_menu() {
  $items = array();
  $items['ms_payza/ipn'] = array(
    'title' => 'IPN',
    'page callback' => 'ms_payza_ipn',
    'access callback' => 'ms_payza_access_test',
    'type' => MENU_CALLBACK,
  );
  $items['ms/checkout/payza'] = array(
    'title' => 'Checkout',
    'page callback' => 'ms_payza_initiate_payment',
    'access callback' => 'ms_payza_access_test',
    'type' => MENU_CALLBACK,
  );
  $items['ms_payza/thank-you'] = array(
    'title' => 'Thank You',
    'page callback' => 'ms_payza_thankyou_page',
    'access callback' => 'ms_payza_access_test',
    'type' => MENU_CALLBACK,
  );
  $items['ms_payza/return_cancel'] = array(
    'title' => 'Payment Canceled',
    'page callback' => 'ms_payza_return_cancel_page',
    'access callback' => 'ms_payza_access_test',
    'type' => MENU_CALLBACK,
  );
  $items['ms_payza/cancel/%'] = array(
    'title' => 'Cancel Payments',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_payza_cancel_page', 2),
    'access callback' => 'ms_payza_cancel_page_test',
    'access arguments' => array(2),
    'type' => MENU_CALLBACK,
  );
  $items['ms_payza/check_ipn_status/%'] = array(
    'title' => 'Check IPN Status',
    'page callback' => 'ms_payza_ipn_ajax_page',
    'page arguments' => array(2),
    'access callback' => 'ms_payza_access_test',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Admin Settings Form
 */
function ms_payza_admin() {
  $ipn_instructions = t("To receive IPN messages, you are required to enable the
  IPN Status for a particular business profile in your account and to specify an
  Alert URL which is the location of your IPN Handler.<br />
<br />
Please follow the instructions below to enable your IPN Status and to set up your Alert URL:<br />
<br />
   1. Login to your Payza account.<br />
   2. Click on 'Business Tools'.<br />
   3. Under 'Instant Payment Notification â€“ IPN', click on 'IPN Setup'.<br />
   4. Enter your Transaction PIN and click on 'Access'.<br />
   5. Click on the 'Edit' icon for the respective business profiles.<br />
   <br />
   1. Enter the information:<br />
         1. For IPN Status, select 'Enabled'.<br />
         2. For Alert URL, enter !url<br />
         3. For Enable IPN Version 2, select 'Enabled'<br />
   2. Click on 'Update' button.
  ", array('!url' => url('ms_payza/ipn', array('abosulte' => TRUE))));

  $api_instructions = t("You must activate your API from your Payza account and obtain an API password.
Please note that you must have a Personal Pro or Business account.<br />
<br />
To setup the API, just follow these steps:<br />
<br />
   1. Login to your Payza account.<br />
   2. Click on 'Business Tools'.<br />
   3. Under 'API', click on 'Setup API'.<br />
   4. Enter your 'Transaction PIN' and click 'Access'.<br />
   5. Under 'Activate API', select 'Enabled for API Status'.<br />
   6. Click on the 'Generate New' button to get your password. See the Security
   section of this guide.<br />
   7. Click 'Update'.
  ");
  $form['main'] = array(
    '#type' => 'fieldset',
    '#title' => t('Main Settings'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['api'] = array(
    '#type' => 'fieldset',
    '#title' => t('API Settings'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#description' => $api_instructions,
  );
  $form['ipn'] = array(
    '#type' => 'fieldset',
    '#title' => t('IPN Instructions'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#description' => $ipn_instructions,
  );

  // -----------------------------
  // Main Settings
  // -----------------------------
  $form['main']['ms_payza_jump_page_text'] = array(
    '#type' => 'textarea',
    '#title' => t('Jump Page Text'),
    '#description' => t("Fill in the text you wish the user to see for the Jump page. They will be redirected in 5 seconds if Javascript is enabled, otherwise a button is provided for them to click."),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_payza_jump_page_text',
      "Please wait for a few seconds, your registration is being processed and you will be redirected to Payza's secure payment page.
      <br/><br/>
      If you are not automatically redirected to the Payza payment page within 5 seconds, click below:
      <br/><br/>"),
  );
  $form['main']['ms_payza_jump_page_timeout'] = array(
    '#type' => 'textfield',
    '#title' => t('Jump Page Timeout'),
    '#description' => t("How many seconds should the Jump Page wait until it automatically redirects?"),
    '#required' => TRUE,
    '#default_value' => variable_get('ms_payza_jump_page_timeout', 0),
  );
  $form['main']['ms_payza_cancel_return'] = array(
    '#type' => 'textfield',
    '#title' => t('Abort Payment Page'),
    '#size' => 64,
    '#maxlength' => 128,
    '#default_value' => variable_get('ms_payza_cancel_return', ''),
    '#description' => t("The Page the user will be returned to if they abort their payment from Payza. Leave blank to use default."),
    '#required' => FALSE,
  );

  // -----------------------------
  // API Settings
  // -----------------------------
  $form['api']['ms_payza_email'] = array(
    '#type' => 'textfield',
    '#title' => t('Payza Seller Email'),
    '#size' => 32,
    '#maxlength' => 64,
    '#default_value' => variable_get('ms_payza_email', ''),
    '#description' => t("Enter your Payza Seller email address, where all the payments will go."),
    '#required' => TRUE,
  );
  $form['api']['ms_payza_api_password'] = array(
    '#type' => 'textfield',
    '#title' => t('API Password'),
    '#size' => 64,
    '#maxlength' => 128,
    '#default_value' => variable_get('ms_payza_api_password', ''),
    '#description' => t("The API Password found in your Payza account."),
    '#required' => TRUE,
  );
  $form['api']['ms_payza_sandbox_mode'] = array(
    '#type' => 'checkbox',
    '#title' => t('Sandbox Mode'),
    '#default_value' => variable_get('ms_payza_sandbox_mode', FALSE),
  );

  return $form;
}

/**
 * Receive the IPN from Payza, verify it, and load the associated order
 */
function ms_payza_ipn() {
  $ipn = ms_payza_ipn_handler($_REQUEST);

  if ($ipn) {
    ms_core_log('ms_payza', 'Successfully Received an IPN from Payza. Here are the details: Data: !data',
      array('!data' => ms_core_print_r($ipn)));

    if (!$order = ms_core_order_load($ipn['ap_itemcode'])) {
      // Try to load the order from the payments table by the recurring_id
      $order = ms_core_order_load_by_rec_id($ipn['ap_subscriptionreferencenumber']);
    }

    if ($order->oid) {
      ms_payza_process_ipn($ipn, $order);
    } else {
      ms_core_log_error('ms_payza', 'Error loading the order for a Payment IPN: !data', array('!data' => ms_core_print_r($ipn)));
    }
  } else {
    ms_core_log_error('ms_payza', 'Error: An IPN has Failed Validation. This may be from a spoofed IPN or an attempt to hack. Here are the details: Data: !data', array('!data' => ms_core_print_r($_REQUEST)));
  }
}

/**
 * IPN Callback Handler
 *
 * Verifies and preps the IPN vars
 */
function ms_payza_ipn_handler($post_vars) {
  $ch = curl_init();

  $url = "https://www.payza.com/ipn2.ashx";
  if (variable_get('ms_payza_sandbox_mode', FALSE)) {
    $url = "https://sandbox.Payza.com/sandbox/IPN2.ashx";
  }

  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_POST, TRUE);
  curl_setopt($ch, CURLOPT_POSTFIELDS, "token=" . urlencode($post_vars['token']));
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($ch, CURLOPT_HEADER, FALSE);
  curl_setopt($ch, CURLOPT_TIMEOUT, 60);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);

  $response = curl_exec($ch);

  curl_close($ch);

  if (strlen($response) > 0) {
    if (urldecode($response) == "INVALID TOKEN") {
      // The token is not valid
      return FALSE;
    } else {
      // urldecode the received response from Payza's IPN V2
      $response = urldecode($response);

      // Split the response string by the delimeter "&"
      $aps = explode("&", $response);

      // Define an array to put the IPN information
      $ipn = array();

      foreach ($aps as $ap) {
        // Put the IPN information into an associative array $info
        $ele = explode("=", $ap);
        $ipn[$ele[0]] = $ele[1];
      }

      return $ipn;
    }
  }

  return FALSE;
}

/**
 * Process the IPN by adding a Payment record to an Order
 */
function ms_payza_process_ipn($ipn, $order) {
  // Insert the Payment to the order
  $payment = ms_core_new_payment($order->oid, 'ms_payza', ms_payza_get_type($ipn['ap_purchasetype'], $ipn['ap_status']));
  $payment->transaction = isset($ipn['ap_referencenumber']) ? $ipn['ap_referencenumber'] : drupal_get_token(serialize($ipn));
  $payment->amount = isset($ipn['ap_amount']) ? $ipn['ap_amount'] : 0;
  $payment->currency = $ipn['ap_currency'];

  // Check that the currency and amount match the order.
  $recurring_schedule = array(
    'total_occurrences' => ($ipn['ap_periodcount']) ? $ipn['ap_periodcount'] : 0,
    'main_amount' => $ipn['ap_amount'],
    'main_length' => $ipn['ap_periodlength'],
    'main_unit' => $ipn['ap_timeunit'],
    'has_trial' => ($ipn['ap_trialperiodlength'] > 0) ? TRUE : FALSE,
    'trial_amount' => $ipn['ap_trialamount'],
    'trial_length' => $ipn['ap_trialperiodlength'],
    'trial_unit' => $ipn['ap_trialtimeunit'],
  );
  if (!ms_core_valid_payment($order, $payment->type, $recurring_schedule) || $payment->currency != $order->currency) {
    drupal_set_message(t('There was an error with the payment. Please contact the site administrator.'), 'error');
    ms_core_log_error('ms_payza', 'Possible spoofing attempt. Price mismatch. Ignoring IPN. Order: !order IPN: !ipn',
      array('!order' => ms_core_print_r($order), '!ipn' => ms_core_print_r($ipn)));
    return FALSE;
  }

  $payment->recurring_id = ($ipn['ap_subscriptionreferencenumber']) ? $ipn['ap_subscriptionreferencenumber'] : '';
  $payment->data = $ipn;

  // Update the address
  $payment->billing_address = array(
    'street' => $ipn['ap_custaddress'],
    'city' => $ipn['ap_custcity'],
    'state' => $ipn['ap_custstate'],
    'zip' => $ipn['ap_custzip'],
    'country' => $ipn['ap_custcountry'],
    'phone' => '',
  );
  // Update the contact details
  $payment->first_name = $ipn['ap_custfirstname'];
  $payment->last_name = $ipn['ap_custlastname'];

  // If this is a test transaction, we need to generate a transaction id that is unique
  if ($payment->transaction == 'TEST TRANSACTION') {
    $payment->transaction = 'TEST_TRANSACTION-' . $order->oid;
  }

  switch ($payment->type) {
    case 'rec_signup':
      // No need to do anything here, just handled it with the rec_payment check
      break;
    case 'rec_payment':
      // If this is the first payment, log a rec_signup payment first
      if ($ipn['ap_subscriptionpaymentnumber'] == 1) {
        $payment->type = 'rec_signup';
      } else {
        $payment->type = 'rec_payment';
      }

      // Add the Payment to the Order
      $payment->amount = $ipn['ap_amount'];
      ms_core_enter_payment($payment);
      break;

    case 'failed':
      // Log the failed payment
      ms_core_log('ms_payza', 'Failed Payment IPN: ' . ms_core_print_r($ipn));

      // Add the Payment to the Order
      ms_core_enter_payment($payment);
      break;

    case 'cart':
      ms_core_add_history_item($order, 0, t('Payment of @amount submitted through Payza.', array('@amount' => ms_core_format_money($payment->amount))));
      ms_core_add_history_item($order, 0, t('Payza IPN reported a payment of @amount.', array('@amount' => ms_core_format_money($payment->amount))), TRUE);

      // Add the Payment to the Order
      ms_core_enter_payment($payment);
      break;
  }
}

/**
 * Get the Cancellation URL for a recurring order
 */
function ms_payza_get_cancel_url($order) {
  return 'ms_payza/cancel/' . $order->oid;
}

/**
 * Confirm a cancellation
 */
function ms_payza_cancel_page($form, &$form_state, $oid) {
  $order = ms_core_order_load($oid);
  $form['#ms_core_oid'] = $order->oid;
  return confirm_form($form, t('Are you sure you want to cancel your order?'), '', t('This action cannot be undone.'), t('Confirm'));
}

/**
 * Initiate a cancellation
 */
function ms_payza_cancel_page_submit($form, &$form_state) {
  global $user;
  $order = ms_core_order_load($form['#ms_core_oid']);

  // Get the subscription_id from the order
  $subscription_id = ms_core_get_order_rec_id($order->oid);

  if ($subscription_id) {
    $note = t("Cancelled by user @name", array('@name' => $user->name));
    $request = sprintf("USER=%s&PASSWORD=%s&SUBSCRIPTIONREFERENCE=%s&NOTE=%s&TESTMODE=%s",
      urlencode(variable_get('ms_payza_email', '')),
      urlencode(variable_get('ms_payza_api_password', '')),
      urlencode((string)$subscription_id),
      urlencode((string)$note),
      urlencode((string)0)
    );

    $ch = curl_init();
    $url = "https://api.payza.com/svc/api.svc";
    if (variable_get('ms_payza_sandbox_mode', FALSE)) {
      $url = "https://sandbox.Payza.com/api/api.svc";
    }
    curl_setopt($ch, CURLOPT_URL, $url . '/CancelSubscription');
    curl_setopt($ch, CURLOPT_POST, TRUE);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $request);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
    curl_setopt($ch, CURLOPT_HEADER, FALSE);
    curl_setopt($ch, CURLOPT_TIMEOUT, 30);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
    $response = curl_exec($ch);
    curl_close($ch);

    parse_str(urldecode($response), $result);

    // If successful, cancel the order
    if ($result['RETURNCODE'] == 100) {
      // Enter the rec_cancel payment
      $payment = ms_core_new_payment($order->oid, 'ms_payza', 'rec_cancel');
      // Generate a Unique Transaction ID
      $payment->transaction = drupal_get_token(serialize($order));
      $payment->currency = $order->currency;
      $payment->recurring_id = $result['REFERENCENUMBER'];
      $payment->billing_address = $order->billing_address;
      $payment->shipping_address = $order->shipping_address;

      ms_core_enter_payment($payment);

      drupal_goto();
    } else {
      // Log the error
      ms_core_log_error('ms_payza', 'There was a problem cancelling the payments: @code - @error Order # !num',
        array('@code' => $result['RETURNCODE'], '@error' => $result['DESCRIPTION'], '!num' => $order->oid));
      drupal_set_message(t('There was a problem when trying to cancel this order. Please contact us for more help.'));
      drupal_goto();
    }
  } else {
    // Log the error
    ms_core_log_error('ms_payza', 'Unable to load the recurring_id for the order being canceled. Order # !num',
      array('!num' => $order->oid));
    drupal_set_message(t('There was a problem when trying to cancel this order. Please contact us for more help.'));
    drupal_goto();
  }
}

/**
 * Get the correct unit for Payza
 */
function ms_payza_switch_unit($unit) {
  switch ($unit) {
    case 'D':
      return 'Day';
    case 'W':
      return 'Week';
    case 'M':
      return 'Month';
    case 'Y':
      return 'Year';
  }
  return $unit;
}

/**
 * Implements hook_ms_core_payment_gateway().
 */
function ms_payza_ms_core_payment_gateway() {
  $gateway['ms_payza'] = array(
    'name' => 'Payza',
    'display_name' => 'Payza',
    'description' => t('Payza - pay without sharing your financial information.'),
    'module' => 'ms_payza',
    'cards' => array('visa', 'mc', 'discover', 'amex', 'echeck'),
    'checkout_path' => 'ms/checkout/payza',
    'cancel_url' => 'ms_payza_get_cancel_url',
    'settings' => ms_payza_admin(),
    'hosted' => TRUE,
  );

  return $gateway;
}

// ======================================
// Functions:
// ======================================

/**
 * Gets the Correct TXN type name for MS Core to use
 */
function ms_payza_get_type($type, $status) {
  switch ($type) {
    case 'item':
    case 'service':
    case 'item-goods':
    case 'item-auction':
      if ($status == 'Success') {
        return 'cart';
      }
      break;

    case 'subscription':
      switch ($status) {
        case 'Success':
          return 'rec_signup';
        case 'Subscription-Payment-Success':
          return 'rec_payment';
        case 'Subscription-Expired':
          return 'rec_eot';
        case 'Subscription-Payment-Failed':
        case 'Subscription-Payment-Rescheduled':
          return 'failed';
        case 'Subscription-Canceled':
          return 'rec_cancel';
      }
      break;
  }

  // Log this
  ms_core_log_error('ms_payza', 'Error: An IPN has been received for an unhandled type.
    Type: !type Status: !status', array('!type' => $type, '!status' => $status));
  return FALSE;
}

/**
 * Preps Variables for Payza Form
 */
function ms_payza_get_button($order) {
  $data = array();

  // Add the variables
  $data['ap_merchant'] = variable_get('ms_payza_email', '');

  $data['ap_itemname'] = htmlspecialchars(ms_core_get_order_title($order, 50), ENT_QUOTES);
  $data['ap_description'] = htmlspecialchars(ms_core_get_order_title($order, 150), ENT_QUOTES);
  $data['ap_itemcode'] = $order->oid;
  $data['ap_currency'] = $order->currency;

  $data['ap_returnurl'] = url('ms_payza/thank-you/' . $order->unique_key, array('absolute' => TRUE));
  $data['ap_cancelurl'] = url(variable_get('ms_payza_cancel_return', 'ms_payza/return_cancel'), array('absolute' => TRUE));
  $data['ap_alerturl'] = url('ms_payza/ipn', array('absolute' => TRUE));

  switch ($order->order_type) {
    case 'recurring':
      $data['ap_purchasetype'] = 'subscription';
      $data['ap_amount'] = $order->recurring_schedule['main_amount'];
      $data['ap_periodlength'] = $order->recurring_schedule['main_length'];
      $data['ap_timeunit'] = ms_payza_switch_unit($order->recurring_schedule['main_unit']);
      $data['ap_periodcount'] = $order->recurring_schedule['total_occurrences'];

      // Add Trial Period Settings
      if ($order->recurring_schedule['has_trial']) {
        $data['ap_trialamount'] = $order->recurring_schedule['trial_amount'];
        $data['ap_trialperiodlength'] = $order->recurring_schedule['trial_length'];
        $data['ap_trialtimeunit'] = ms_payza_switch_unit($order->recurring_schedule['trial_unit']);
      }

      break;

    case 'cart':
      $data['ap_purchasetype'] = 'item';
      $data['ap_amount'] = $order->amount;

      break;
  }

  // Add in the JS
  $timeout = variable_get('ms_payza_jump_page_timeout', 0) * 1000;
  $js = "
    window.setTimeout(function() {
      jQuery('#payzaPaymentForm').submit();
    }, $timeout);
  ";
  drupal_add_js($js, array('type' => 'inline', 'scope' => 'footer'));

  $url = "https://secure.payza.com/PayProcess.aspx";
  if (variable_get('ms_payza_sandbox_mode', FALSE)) {
    $url = "https://sandbox.Payza.com/sandbox/PayProcess.aspx";
  }

  // @ignore security_18
  $form = "<form id='payzaPaymentForm' method='post' name='payza_form' action='$url'>";

  foreach ($data as $name => $value) {
    $form .= "<input type='hidden' name='$name' value='$value' />";
  }

  $form .= "<input type='submit' value='" . t('Click Here') . "'></form>";

  return variable_get('ms_payza_jump_page_text', '') . $form;
}

/**
 * Initiates a Payment
 */
function ms_payza_initiate_payment() {
  // Stop the caching
  $GLOBALS['conf']['cache'] = FALSE;

  // Load the order
  if (!$order = ms_core_load_session_order()) {
    // Error
    return t('There was an error with the checkout');
  }

  // Set the order status
  ms_core_set_order_status($order, 'pending');

  // Start the Payment
  $output = ms_payza_get_button($order);

  return $output;
}

/**
 * Landing page which will wait until the IPN has been received before proceeding
 */
function ms_payza_thankyou_page() {
  drupal_set_title(t('Thank You'));
  $txn_id = isset($_POST['txn_id']) ? $_POST['txn_id'] : 0;
  $unique_key = arg(2);
  if (!$order = ms_core_order_load_unique($unique_key)) {
    // Should never get this far
    ms_core_log_error('ms_payza', 'The order was unable to be loaded from the unique key: !key',
      array('!key' => $unique_key));
    return t("There was an error processing the payment. This error has been logged.");
  }

  $thank_you_page = url('ms/thankyou');
  $check_url = url('ms_payza/check_ipn_status/' . $unique_key, array('absolute' => TRUE));

  // JS
  $js = "
  jQuery(function($) {
    jQuery('.ms_payza_landing_click_here').hide();
    check_ipn_status();
  });

  function check_ipn_status() {
    jQuery.getJSON('$check_url', {txn_id : '$txn_id'}, parse_info);
  }

  function parse_info(data) {
    switch (data.result) {
      case 'success':
        window.location.replace('$thank_you_page');
        break;
      case 'error':
        alert(data.error);
        break;
      case 'failure':
        setTimeout(check_ipn_status, 5000);
        break;
      default:
        alert('test');
        setTimeout(check_ipn_status, 5000);
        break;
    }
  }
  ";
  drupal_add_js($js, array('type' => 'inline', 'scope' => JS_DEFAULT));

  // Show a loading page while we wait for the IPN from PayPal
  $output = '';
  $ajax_img = base_path() . drupal_get_path('module', 'ms_core') . '/images/ajax-bar-loader.gif';
  $output .= "<div style='text-align:center;width:100%;'>"
    . t('Your order is being processed. Please allow up to 2 minutes for this process to complete.')
    . "</div>";
  $output .= "<div style='text-align:center;width:100%;'>"
    . t('Thank you for your patience.')
    . "</div>";

  $output .= "<div class='ajax_loader' style='margin: 15px 0 0;clear:both;width:100%;text-align:center;'><img src='$ajax_img' alt='Loading' /></div>";
  $output .= "<div class='ms_payza_landing_click_here'>"
    . t('If you have waited for over one minute, please !click.',
      array('!click' => l(t('click here'), 'ms/thankyou')))
    . "</div>";
  return $output;
}

/**
 * Checks if an IPN has been received yet
 *
 * @param $unique_key
 *   The unique key associated with the order
 * @return
 *   Returns a json encoded string
 */
function ms_payza_ipn_ajax_page($unique_key) {
  // Stop the caching
  $GLOBALS['conf']['cache'] = FALSE;

  $data = array();
  if (!$order = ms_core_order_load_unique($unique_key)) {
    // Should never get this far
    ms_core_log_error('ms_payza', 'The order was unable to be loaded from the unique key: !key',
      array('!key' => $unique_key));
    $data['result'] = 'error';
    $data['error'] = t("There was an error loading the order. Please contact a site administrator.");
  } else {
    // Check if the payment has been recorded yet
    if (isset($_REQUEST['txn_id']) AND $txn_id = $_REQUEST['txn_id']) {
      $data['result'] = 'failure';

      // Check the status of the payment, and show a message
      foreach ($order->payments as $payment) {
        if ($payment->transaction == $txn_id) {
          $data['result'] = 'success';
          $data['status'] = $payment->data['payment_status'];

          switch ($payment->data['payment_status']) {
            case 'Completed':
              drupal_set_message(t('The payment has been completed.'));
              break;

            default:
              ms_core_log_error('ms_payza', 'Error validating the payment ipn for ajax page');
              drupal_set_message(t('The order could not be charged. Please contact a site administrator.'));
          }
        }
      }
    } else {
      if ($order->uid) {
        // The order has a user id and is ready to go
        $data['result'] = 'success';
        $data['status'] = 'Unable to determine status';
      } else {
        $data['result'] = 'failure';
      }
    }
  }
  print json_encode($data);
}

/**
 * Return Cancel page
 */
function ms_payza_return_cancel_page() {
  return t("Your payment has been canceled and you will not be charged.");
}
