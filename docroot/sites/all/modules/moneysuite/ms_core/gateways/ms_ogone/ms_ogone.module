<?php

/**
 * @file
 * Ogone Payment Gateway for MS Core.
 *
 * Original author: Leighton Whiting - Released under GENERAL PUBLIC LICENSE
 * Current maintenance by multiple MoneySuite users.
 * Re: new initiative: https://www.drupal.org/node/2315653 
 */

/**
 * Implements  hook_menu
 */
function ms_ogone_menu() {
  $items = array();

  $items['ms_ogone/return_ok'] = array(
    'title' => 'Ogone Payment return status',
    'page callback' => 'ms_ogone_return_ok',
    'page arguments' => array(),
    'access callback' => 'ms_ogone_access_test',
    'access arguments' => array(),
    'type' => MENU_CALLBACK,
  );
  $items['ms_ogone/false'] = array(
    'title' => 'Ogone Payment Error',
    'page callback' => 'ms_ogone_false',
    'page arguments' => array(),
    'access callback' => 'ms_ogone_access_test',
    'access arguments' => array(),
    'type' => MENU_CALLBACK,
  );

  $items['ms_ogone/cancel'] = array(
    'title' => 'Ogone Payment cancel',
    'page callback' => 'ms_ogone_return_cancel',
    'page arguments' => array(),
    'access callback' => 'ms_ogone_access_test',
    'access arguments' => array(),
    'type' => MENU_CALLBACK,
  );
  $items['ms_ogone/template_call'] = array(
    'title' => 'Ogone Secure Payment',
    'page callback' => 'ms_ogone_template',
    'page arguments' => array(),
    'access callback' => 'ms_ogone_access_test',
    'access arguments' => array(),
    'type' => MENU_CALLBACK,
  );
  $items['ms/checkout/ogone'] = array(
    'title' => 'Checkout',
    'page callback' => 'ms_ogone_checkout',
    'page arguments' => array(),
    'access callback' => 'ms_ogone_access_test',
    'access arguments' => array(),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function ms_ogone_access_test() {
  // Ogone should always have access
  return TRUE;
}

/**
 * Admin Settings Form
 */
function ms_ogone_admin() {
  $form['main'] = array(
    '#type' => 'fieldset',
    '#title' => t('Main Settings'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['main']['ms_ogone_url'] = array(
    '#type' => 'select',
    '#title' => t('Gateway Mode'),
    '#options' => array(
      'https://secure.ogone.com/ncol/test/orderstandard.asp' => t('Test Mode'),
      'https://secure.ogone.com/ncol/prod/orderstandard.asp' => t('Production'),
    ),
    '#default_value' => variable_get('ms_ogone_url', 'https://secure.ogone.com/ncol/test/orderstandard.asp'),
  );
  $form['main']['ms_ogone_catalog_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant catalog URL'),
    '#default_value' => variable_get('ms_ogone_catalog_url', 'catalog'),
    '#description' => t('The relative path to your catalog page. For instance if your catalog page is www.yourdomain.com/catalog enter catalog'),
  );
  $form['main']['ms_ogone_pspid_id'] = array(
    '#type' => 'textfield',
    '#title' => t('pspid'),
    '#default_value' => variable_get('ms_ogone_pspid_id', ''),
    '#description' => t('The login username for the Ogone PSP service.'),
  );
  $form['main']['ms_ogone_currency'] = array(
    '#type' => 'textfield',
    '#title' => t('Currency'),
    '#default_value' => variable_get('ms_ogone_currency', 'EUR'),
    '#description' => t('Use "EUR", "USD" or "GBP" for currency. See Ogone documentation for details.'),
  );
  $form['main']['ms_ogone_language'] = array(
    '#type' => 'textfield',
    '#title' => t('Language'),
    '#default_value' => variable_get('ms_ogone_language', 'en_US'),
    '#description' => t('Use "en_US" notation for language. See Ogone documentation for details.'),
  );
  //Layout
  $form['main']['ms_ogone_layout_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#default_value' => variable_get('ms_ogone_layout_title', 'Secure Checkout'),
    '#description' => t('Shown in payment page.'),
  );
  $form['main']['ms_ogone_layout_bgcolor'] = array(
    '#type' => 'textfield',
    '#title' => t('BG Color'),
    '#default_value' => variable_get('ms_ogone_layout_bgcolor', ''),
    '#description' => t('Background color payment page.(empty for default)'),
  );
  $form['main']['ms_ogone_layout_txtcolor'] = array(
    '#type' => 'textfield',
    '#title' => t('text Color'),
    '#default_value' => variable_get('ms_ogone_layout_txtcolor', ''),
    '#description' => t('Text color payment page.(empty for default)'),
  );
  $form['main']['ms_ogone_layout_tblbgcolor'] = array(
    '#type' => 'textfield',
    '#title' => t('Table BG Color'),
    '#default_value' => variable_get('ms_ogone_layout_tblbgcolor', ''),
    '#description' => t('Background color tables in payment page.(empty for default)'),
  );
  $form['main']['ms_ogone_layout_tbltxtcolor'] = array(
    '#type' => 'textfield',
    '#title' => t('Table Text Color'),
    '#default_value' => variable_get('ms_ogone_layout_tbltxtcolor', ''),
    '#description' => t('Text color tables in payment page.(empty for default)'),
  );
  $form['main']['ms_ogone_layout_buttonbgcolor'] = array(
    '#type' => 'textfield',
    '#title' => t('Button Color'),
    '#default_value' => variable_get('ms_ogone_layout_buttonbgcolor', ''),
    '#description' => t('Button color in payment page.(empty for default)'),
  );
  $form['main']['ms_ogone_layout_buttontxtcolor'] = array(
    '#type' => 'textfield',
    '#title' => t('Button Text Color'),
    '#default_value' => variable_get('ms_ogone_layout_buttontxtcolor', ''),
    '#description' => t('Button text color in payment page.(empty for default)'),
  );
  $form['main']['ms_ogone_layout_logo'] = array(
    '#type' => 'textfield',
    '#title' => t('Logo Path'),
    '#default_value' => variable_get('ms_ogone_layout_logo', ''),
    '#description' => t('Logo to use on payment page.(empty for none)'),
  );
  $form['main']['ms_ogone_layout_fonttype'] = array(
    '#type' => 'textfield',
    '#title' => t('Fonttype'),
    '#default_value' => variable_get('ms_ogone_layout_fonttype', ''),
  );
  $form['main']['ms_ogone_sha1_signature_pre'] = array(
    '#type' => 'textfield',
    '#title' => t('SHA-1 Signature pre'),
    '#default_value' => variable_get('ms_ogone_sha1_signature_pre', ''),
    '#description' => t('SHA-1 signature for pre payment verification.'),
  );
  $form['main']['ms_ogone_sha1_signature_post'] = array(
    '#type' => 'textfield',
    '#title' => t('SHA-1 Signature post'),
    '#default_value' => variable_get('ms_ogone_sha1_signature_post', ''),
    '#description' => t('SHA-1 signature for post payment verification.'),
  );

  return $form;
}

/**
 * Implements hook_ms_core_payment_gateway().
 */
function ms_ogone_ms_core_payment_gateway() {
  $gateway['ms_ogone'] = array(
    'name' => 'Ogone',
    'display_name' => t('Credit Card'),
    'description' => t('Pay by Credit Card'),
    'cards' => array('visa', 'mc', 'discover', 'amex'),
    'currency' => array(variable_get('ms_ogone_currency', 'EUR')),
    'module' => 'ms_ogone',
    'checkout_path' => 'ms/checkout/ogone',
    'settings' => ms_ogone_admin(),
  );
  return $gateway;
}

/********************************************************************
 * Checkout Form
 *******************************************************************/
/**
 * Error return page
 */
function ms_ogone_false() {
  drupal_set_message(t('Ogone returned an error for your payment. Your order is not completed. Please try again or contact us.'), 'ERROR');
  ms_core_log_error('ms_ogone', 'Ogone returned an error for this payment.');
  drupal_goto('ms/checkout');
}

/**
 * Cancel return page
 */
function ms_ogone_return_cancel() {
  drupal_set_message(t('Ogone returned a cancel for your payment. Your order is not completed. Please try again or contact us.'), 'ERROR');
  drupal_goto('ms/checkout');
}

/**
 * Return callback from Ogone
 *
 * This is called by Ogone itself NOT within the user session!
 */
function ms_ogone_return_ok($auto = FALSE) {
  $secret = variable_get('ms_ogone_sha1_signature_post', TRUE);
  $params = $_REQUEST;
  $sha1_return_key = strtoupper($params['SHASIGN']);

  $valid_stat = array(5, 9);

  $orderid = $params['orderID'];
  $order = ms_core_order_load($orderid);

  if (!$order) {
    ms_core_log_error('ms_ogone', 'Error loading the order for a Ogone Return: !data',
      array('!data' => ms_core_print_r($params)));
  }

  $currency = $params['currency'];
  $amount = $params['amount'];
  $status = $params['STATUS'];

  // Check that the currency and amount match the order.
  // @todo - Also check the recurring schedule if it is a recurring order.
  if (!ms_core_valid_payment($order, 'cart', $amount) || $currency != $order->currency) {
    drupal_set_message(t('There was an error with the payment. Please contact the site administrator.'), 'error');
    ms_core_log_error('ms_ogone', 'Possible spoofing attempt. Price mismatch. Ignoring IPN. Order: !order IPN: !ipn',
      array('!order' => ms_core_print_r($order), '!ipn' => ms_core_print_r($params)));
    return FALSE;
  }

  $sha_sign = ms_ogone_make_sha1($params, $secret, 'in');

  if ($sha_sign == $sha1_return_key) {
    if (in_array($status, $valid_stat)) {
      $extra['txn_id'] = $params['ACCEPTANCE'];
      $extra['approved'] = TRUE;

      switch ($order->order_type) {
        case 'recurring':

          if ($extra['approved'] == TRUE) {
            // Insert the Payment to the database
            $payment = ms_core_new_payment($order->oid, 'ms_ogone', 'rec_signup');
            $payment->transaction = $extra['txn_id'];
            $payment->amount = $amount;
            $payment->currency = $currency;
            $payment->data = array();

            // Update the address
            $payment->billing_address = array(
              'street' => '',
              'city' => '',
              'state' => '',
              'zip' => '',
              'country' => '',
              'phone' => '',
            );
            // Update the contact details
            $name = explode(' ', $params['CN']);
            $payment->first_name = $name[0];
            $payment->last_name = $name[1];

            // Add the Payment to the Order
            ms_core_enter_payment($payment);

            drupal_goto('ms/thankyou');
          } else {
            // There was an error, log this
            ms_core_log_error('ms_ogone', 'There was an error with the payment: !data',
              array('!data' => ms_core_print_r($params)));
          }
          break;

        case 'cart':
          if ($extra['approved'] == TRUE) {
            // Insert the Payment to the database
            $payment = ms_core_new_payment($order->oid, 'ms_ogone', 'cart');
            $payment->transaction = $extra['txn_id'];
            $payment->amount = $amount;
            $payment->currency = $currency;
            $payment->data = array();

            // Update the address
            $payment->billing_address = array(
              'street' => '',
              'city' => '',
              'state' => '',
              'zip' => '',
              'country' => '',
              'phone' => '',
            );

            // Add the Payment to the Order
            ms_core_enter_payment($payment);

            drupal_goto('ms/thankyou');
          } else {
            // There was an error, log this
            ms_core_log_error('ms_ogone', 'There was an error with the payment: !data',
              array('!data' => ms_core_print_r($params)));
          }
          break;
      }
    } else {
      ms_core_log_error('ms_ogone', 'Invalid status: !data',
        array('!data' => ms_core_print_r($params)));
    }
  } else {
    ms_core_log_error('ms_ogone', 'The SHA key did not match: Generated SHA: !sha DATA: !data',
      array('!sha' => $sha_sign, '!data' => ms_core_print_r($params)));
  }

  return t('There was an error with the payment. Please contact an administrator for more help.');
}

/**
 * Return callback for ok order
 *
 * Can be used optionally to let Ogone return the payment status automatically/unmanaged
 */
function ms_ogone_return_ok_callback() {
  ms_ogone_return_ok(TRUE);
}

/**
 * Returns a template
 */
function ms_ogone_template() {
  drupal_set_title(variable_get('ms_ogone_layout_title', 'Secure Checkout'));
  $template = '<div align="right">IMAGE</div>';
  $template .= '<div align="center"><div align="left" style="width: 550px; padding: 10px; border:2px solid #666; background-color: #fff;">';
  $template .= '<h1>' . filter_xss(variable_get('ms_ogone_layout_title', TRUE)) . '</h1>';
  $template .= '$$$PAYMENT ZONE$$$';
  $template .= '</div></div>';
  return $template;
}

/*
 * Make a form to show on the checkout page, to collect the CC and Address Info
 */
function ms_ogone_checkout() {
  // Get the $order from the session
  if (!$order = ms_core_load_session_order()) {
    // Error
    return t('The order could not be loaded from the session');
  }

  // Get the Form
  $ogone_url = filter_xss(variable_get('ms_ogone_url', TRUE));

  $redirect_message1 = t('One moment please, you will automaticaly be redirected to the payment gateway...');
  $redirect_message2 = t('Popupblockers might stop the paymentpage from opening, please click the button to open the payment page if it does not open automaticaly.');
  $ogone_button_text = t('Click here to go to payment page manually');

  $params = array(
    'PSPID' => filter_xss(variable_get('ms_ogone_pspid_id', TRUE)),
    'orderID' => $order->oid,
    'amount' => round($order->amount * 100),
    'currency' => filter_xss(variable_get('ms_ogone_currency', TRUE)),
    'language' => filter_xss(variable_get('ms_ogone_language', 'en_US')),
    'TITLE' => filter_xss(variable_get('ms_ogone_layout_title', TRUE)),
    'BGCOLOR' => filter_xss(variable_get('ms_ogone_layout_bgcolor', TRUE)),
    'TXTCOLOR' => filter_xss(variable_get('ms_ogone_layout_txtcolor', TRUE)),
    'TBLBGCOLOR' => filter_xss(variable_get('ms_ogone_layout_tblbgcolor', TRUE)),
    'TBLTXTCOLOR' => filter_xss(variable_get('ms_ogone_layout_tbltxtcolor', TRUE)),
    'BUTTONBGCOLOR' => filter_xss(variable_get('ms_ogone_layout_buttonbgcolor', TRUE)),
    'BUTTONTXTCOLOR' => filter_xss(variable_get('ms_ogone_layout_buttontxtcolor', TRUE)),
    'LOGO' => filter_xss(variable_get('ms_ogone_layout_logo', TRUE)),
    'FONTTYPE' => filter_xss(variable_get('ms_ogone_layout_fonttype', TRUE)),
    'TP' => '',
    'HOMEURL' => url('', array('absolute' => TRUE)),
    'CATALOGURL' => url(variable_get('ms_ogone_catalog_url', 'catalog'), array('absolute' => TRUE)),
    'ACCEPTURL' => url('ms_ogone/return_ok', array('absolute' => TRUE)),
    'declineurl' => url('ms/checkout', array('absolute' => TRUE)),
    'exceptionurl' => url('ms/checkout', array('absolute' => TRUE)),
    'cancelurl' => url('ms_ogone/cancel', array('absolute' => TRUE)),
    'COM' => ms_core_get_order_title($order, 100),
    'CN' => substr((($order->first_name) ? $order->first_name . ' ' . $order->last_name : ''), 0, 35),
    'EMAIL' => $order->email_address,
    'PM' => '',
    'BRAND' => '',
    'ownerZIP' => '',
    'owneraddress' => '',
  );

  $trial_unit = "";
  $main_unit = "";

  switch ($order->recurring_schedule['trial_unit']) {
    case 'D':
      $trial_unit = 'Days';
      break;
    case 'M':
      $trial_unit = 'Months';
      break;
    case 'S':
      $trial_unit = 'Weeks';
      break;
    case 'W':
      $trial_unit = 'Weeks';
      break;
    case 'Y':
      $trial_unit = 'Years';
      break;
  }

  switch ($order->recurring_schedule['main_unit']) {
    case 'D':
      $main_unit = 'Days';
      break;
    case 'M':
      $main_unit = 'Months';
      break;
    case 'S':
      $main_unit = 'Weeks';
      break;
    case 'W':
      $main_unit = 'Weeks';
      break;
    case 'Y':
      $main_unit = 'Years';
      break;
  }

  // If the order is recurring, then we should add the fields for recurring
  if ($order->order_type == 'recurring') {

    // Add Trial Period Settings
    if ($order->recurring_schedule['has_trial']) {
      // Set the initial payment to the trial amount
      $params['amount'] = round($order->recurring_schedule['trial_amount'] * 100);
      // Set the regular payment to the regular amount
      $params['SUB_AMOUNT'] = round($order->recurring_schedule['main_amount'] * 100);
      // Set the start date to now + trial period
      $params['SUB_STARTDATE'] = date('Y-m-d', strtotime("+" . $order->recurring_schedule['trial_length'] . ' ' . $trial_unit));
    } else {
      // Set the initial payment to the trial amount
      $params['SUB_AMOUNT'] = round($order->amount * 100);
      // Set the start date to now + trial period
      $params['SUB_STARTDATE'] = date('Y-m-d', strtotime("+" . $order->recurring_schedule['main_length'] . ' ' . $main_unit));
    }

    // Set the end date
    $params['SUB_ENDDATE'] = date('Y-m-d', strtotime("+" . round($order->recurring_schedule['total_occurrences'] * $order->recurring_schedule['main_length']) . ' ' . $main_unit, strtotime($params['SUB_STARTDATE'])));

    $params['SUBSCRIPTION_ID'] = $order->order_key;
    $params['SUB_COM'] = ms_core_get_order_title($order, 100);
    $params['SUB_ORDERID'] = $order->oid;

    switch ($order->recurring_schedule['main_unit']) {
      case 'D':
        $params['SUB_PERIOD_UNIT'] = 'd';
        $params['SUB_PERIOD_NUMBER'] = $order->recurring_schedule['main_length'];
        break;
      case 'M':
        $params['SUB_PERIOD_UNIT'] = 'm';
        $params['SUB_PERIOD_NUMBER'] = $order->recurring_schedule['main_length'];
        break;
      case 'S':
        $params['SUB_PERIOD_UNIT'] = 'ww';
        $params['SUB_PERIOD_NUMBER'] = 2;
        break;
      case 'W':
        $params['SUB_PERIOD_UNIT'] = 'ww';
        $params['SUB_PERIOD_NUMBER'] = $order->recurring_schedule['main_length'];
        break;
      case 'Y':
        $params['SUB_PERIOD_UNIT'] = 'm';
        $params['SUB_PERIOD_NUMBER'] = $order->recurring_schedule['main_length'] * 12;
        break;
    }

    $params['SUB_PERIOD_MOMENT'] = 1;
    $params['SUB_STATUS'] = 1;
    $params['SUB_COMMENT'] = ms_core_get_order_title($order, 200);
  }

  $secret = variable_get('ms_ogone_sha1_signature_pre', TRUE);

  $params['SHASign'] = ms_ogone_make_sha1($params, $secret);

  $input_params = "";
  foreach ($params as $key => $value) {
    if (strlen($value) > 0) {
      $input_params .= "<input type='hidden' name='$key' value='$value' />";
    }
  }

  $html = '
    <div class="ogone_redirect_message_top">
      ' . $redirect_message1 . '
      </br>
    </div>
    <div class="ogone_redirect_container">
      <div class="ogone_redirect_form">';
  // @ignore security_18
  $html .= '<form method="post" action="' . $ogone_url . '" id="ogone_form" name="ogone_form">
          ' . $input_params . '

          <input type="submit" value="' . $ogone_button_text . '" id="submit2" name="submit2" />
        </form>
      </div>
    </div>
    <div class="ogone_redirect_message_bottom">
            ' . $redirect_message2 . '
        </div>
    ';

  // Add in the JS
  $timeout = 5;
  $js = "
    window.setTimeout(function() {
    $('#ogone_form').submit();
    }, $timeout);
    ";
  drupal_add_js($js, 'inline', 'footer');
  return $html;
}

/**
 * Constructs the sha1 key
 */
function ms_ogone_make_sha1($params, $secret, $mode = 'out') {
  uksort($params, 'strnatcasecmp');

  $in_map = array(
    'AAVADDRESS',
    'AAVCHECK',
    'AAVZIP',
    'ACCEPTANCE',
    'ALIAS',
    'AMOUNT',
    'BRAND',
    'CARDNO',
    'CCCTY',
    'CN',
    'COMPLUS',
    'CREATION_STATUS',
    'CURRENCY',
    'CVCCHECK',
    'DCC_COMMPERCENTAGE',
    'DCC_CONVAMOUNT',
    'DCC_CONVCCY',
    'DCC_EXCHRATE',
    'DCC_EXCHRATESOURCE',
    'DCC_EXCHRATETS',
    'DCC_INDICATOR',
    'DCC_MARGINPERCENTAGE',
    'DCC_VALIDHOURS',
    'DIGESTCARDNO',
    'ECI',
    'ED',
    'ENCCARDNO',
    'IP',
    'IPCTY',
    'NBREMAILUSAGE',
    'NBRIPUSAGE',
    'NBRIPUSAGE_ALLTX',
    'NBRUSAGE',
    'NCERROR',
    'ORDERID',
    'PAYID',
    'PM',
    'SCO_CATEGORY',
    'SCORING',
    'STATUS',
    'SUBSCRIPTION_ID',
    'TRXDATE',
    'VC',
  );

  $out_map = array(
    'ACCEPTURL',
    'ADDMATCH',
    'ADDRMATCH',
    'ALIAS',
    'ALIASOPERATION',
    'ALIASUSAGE',
    'ALLOWCORRECTION',
    'AMOUNT',
    'AMOUNTHTVA',
    'AMOUNTTVA',
    'BACKURL',
    'BGCOLOR',
    'BRAND',
    'BRANDVISUAL',
    'BUTTONBGCOLOR',
    'BUTTONTXTCOLOR',
    'CANCELURL',
    'CARDNO',
    'CATALOGURL',
    'CAVV_3D',
    'CAVVALGORITHM_3D',
    'CERTID',
    'CHECK_AAV',
    'CIVILITY',
    'CN',
    'COM',
    'COMPLUS',
    'COSTCENTER',
    'COSTCODE',
    'CREDITCODE',
    'CUID',
    'CURRENCY',
    'CVC',
    'DATA',
    'DATATYPE',
    'DATEIN',
    'DATEOUT',
    'DECLINEURL',
    'DEVICE',
    'DISCOUNTRATE',
    'ECI',
    'ECOM_BILLTO_POSTAL_CITY',
    'ECOM_BILLTO_POSTAL_COUNTRYCODE',
    'ECOM_BILLTO_POSTAL_NAME_FIRST',
    'ECOM_BILLTO_POSTAL_NAME_LAST',
    'ECOM_BILLTO_POSTAL_POSTALCODE',
    'ECOM_BILLTO_POSTAL_STREET_LINE1',
    'ECOM_BILLTO_POSTAL_STREET_LINE2',
    'ECOM_BILLTO_POSTAL_STREET_NUMBER',
    'ECOM_CONSUMERID',
    'ECOM_CONSUMERORDERID',
    'ECOM_CONSUMERUSERALIAS',
    'ECOM_PAYMENT_CARD_EXPDATE_MONTH',
    'ECOM_PAYMENT_CARD_EXPDATE_YEAR',
    'ECOM_PAYMENT_CARD_NAME',
    'ECOM_PAYMENT_CARD_VERIFICATION',
    'ECOM_SHIPTO_COMPANY',
    'ECOM_SHIPTO_DOB',
    'ECOM_SHIPTO_ONLINE_EMAIL',
    'ECOM_SHIPTO_POSTAL_CITY',
    'ECOM_SHIPTO_POSTAL_COUNTRYCODE',
    'ECOM_SHIPTO_POSTAL_NAME_FIRST',
    'ECOM_SHIPTO_POSTAL_NAME_LAST',
    'ECOM_SHIPTO_POSTAL_NAME_PREFIX',
    'ECOM_SHIPTO_POSTAL_POSTALCODE',
    'ECOM_SHIPTO_POSTAL_STREET_LINE1',
    'ECOM_SHIPTO_POSTAL_STREET_LINE2',
    'ECOM_SHIPTO_POSTAL_STREET_NUMBER',
    'ECOM_SHIPTO_TELECOM_FAX_NUMBER',
    'ECOM_SHIPTO_TELECOM_PHONE_NUMBER',
    'ECOM_SHIPTO_TVA',
    'ED',
    'EMAIL',
    'EXCEPTIONURL',
    'EXCLPMLIST',
    'FIRSTCALL',
    'FLAG3D',
    'FONTTYPE',
    'FORCECODE1',
    'FORCECODE2',
    'FORCECODEHASH',
    'FORCEPROCESS',
    'FORCETP',
    'GENERIC_BL',
    'GIROPAY_BL',
    'GIROPAY_ACCOUNT_NUMBER',
    'GIROPAY_BLZ',
    'GIROPAY_OWNER_NAME',
    'GLOBORDERID',
    'GUID',
    'HDFONTTYPE',
    'HDTBLBGCOLOR',
    'HDTBLTXTCOLOR',
    'HEIGHTFRAME',
    'HOMEURL',
    'HTTP_ACCEPT',
    'HTTP_USER_AGENT',
    'INCLUDE_BIN',
    'INCLUDE_COUNTRIES',
    'INVDATE',
    'INVDISCOUNT',
    'INVLEVEL',
    'INVORDERID',
    'ISSUERID',
    'LANGUAGE',
    'LEVEL1AUTHCPC',
    'LIMITCLIENTSCRIPTUSAGE',
    'LINE_REF',
    'LIST_BIN',
    'LIST_COUNTRIES',
    'LOGO',
    'MERCHANTID',
    'MODE',
    'MTIME',
    'MVER',
    'NETAMOUNT',
    'OPERATION',
    'ORDERID',
    'ORDERSHIPCOST',
    'ORDERSHIPTAX',
    'ORDERSHIPTAXCODE',
    'ORIG',
    'OR_INVORDERID',
    'OR_ORDERID',
    'OWNERADDRESS',
    'OWNERADDRESS2',
    'OWNERCTY',
    'OWNERTELNO',
    'OWNERTOWN',
    'OWNERZIP',
    'PAIDAMOUNT',
    'PARAMPLUS',
    'PARAMVAR',
    'PAYID',
    'PAYMETHOD',
    'PM',
    'PMLIST',
    'PMLISTPMLISTTYPE',
    'PMLISTTYPE',
    'PMLISTTYPEPMLIST',
    'PMTYPE',
    'POPUP',
    'POST',
    'PSPID',
    'PSWD',
    'REF',
    'REFER',
    'REFID',
    'REFKIND',
    'REF_CUSTOMERID',
    'REF_CUSTOMERREF',
    'REMOTE_ADDR',
    'REQGENFIELDS',
    'RTIMEOUT',
    'RTIMEOUTREQUESTEDTIMEOUT',
    'SCORINGCLIENT',
    'SETT_BATCH',
    'SID',
    'STATUS_3D',
    'SUBSCRIPTION_ID',
    'SUB_AM',
    'SUB_AMOUNT',
    'SUB_COM',
    'SUB_COMMENT',
    'SUB_CUR',
    'SUB_ENDDATE',
    'SUB_ORDERID',
    'SUB_PERIOD_MOMENT',
    'SUB_PERIOD_MOMENT_M',
    'SUB_PERIOD_MOMENT_WW',
    'SUB_PERIOD_NUMBER',
    'SUB_PERIOD_NUMBER_D',
    'SUB_PERIOD_NUMBER_M',
    'SUB_PERIOD_NUMBER_WW',
    'SUB_PERIOD_UNIT',
    'SUB_STARTDATE',
    'SUB_STATUS',
    'TAAL',
    'TBLBGCOLOR',
    'TBLTXTCOLOR',
    'TID',
    'TITLE',
    'TOTALAMOUNT',
    'TP',
    'TRACK2',
    'TXTBADDR2',
    'TXTCOLOR',
    'TXTOKEN',
    'TXTOKENTXTOKENPAYPAL',
    'TYPE_COUNTRY',
    'UCAF_AUTHENTICATION_DATA',
    'UCAF_PAYMENT_CARD_CVC2',
    'UCAF_PAYMENT_CARD_EXPDATE_MONTH',
    'UCAF_PAYMENT_CARD_EXPDATE_YEAR',
    'UCAF_PAYMENT_CARD_NUMBER',
    'USERID',
    'USERTYPE',
    'VERSION',
    'WBTU_MSISDN',
    'WBTU_ORDERID',
    'WEIGHTUNIT',
    'WIN3DS',
    'WITHROOT',
  );

  if ($mode == 'in') {
    $map = $in_map;
  } else {
    $map = $out_map;
  }

  $param_string = '';
  foreach ($params as $key => $val) {
    if (strlen($val) > 0 AND in_array(strtoupper($key), $map)) {
      $key = strtoupper($key);
      $param_string .= "{$key}={$val}{$secret}";
    }
  }

  return strtoupper(sha1($param_string));
}
