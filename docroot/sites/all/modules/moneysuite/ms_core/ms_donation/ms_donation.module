<?php

/**
 * @file
 * MoneySuite Donation
 *
 * Original author: Leighton Whiting - Released under GENERAL PUBLIC LICENSE
 * Current maintenance by multiple MoneySuite users.
 * Re: new initiative: https://www.drupal.org/node/2315653 
 */

/**
 * Implements hook_help().
 */
function ms_donation_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/moneysuite/ms_donation":
    case "admin/help#ms_donation":
      $output .= '<p>' . t("MoneySuite Donation Module. This allows users to
      enter an additional amount they wish to donate on top of their order total
      during checkout.") . '</p>';
      break;
  }
  return $output;
}

/**
 * Implements hook_menu().
 */
function ms_donation_menu() {
  $items = array();

  $items['admin/moneysuite/ms_donation'] = array(
    'title' => 'Donations',
    'description' => 'Manage donation settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_donation_admin'),
    'access arguments' => array('administer moneysuite settings'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Form constructor for the admin settings form.
 */
function ms_donation_admin() {
  $form['main'] = array(
    '#type' => 'fieldset',
    '#title' => t('Main Settings'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );

  $form['main']['ms_donation_minimum_amount'] = array(
    '#type' => 'textfield',
    '#title' => t('Minimum Donation Amount'),
    '#size' => 32,
    '#maxlength' => 64,
    '#default_value' => variable_get('ms_donation_minimum_amount', 0.01),
    '#description' => t("This is the minimum donation amount that will be accepted."),
    '#required' => TRUE,
  );
  $form['main']['ms_donation_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Donation Name'),
    '#default_value' => variable_get('ms_donation_name', t('Donation')),
    '#description' => t("Enter the title that should appear for the Donation box."),
    '#required' => FALSE,
  );
  $form['main']['ms_donation_description'] = array(
    '#type' => 'textarea',
    '#title' => t('Donation Description'),
    '#default_value' => variable_get('ms_donation_description', ''),
    '#description' => t("Enter the description that should appear for the Donation box."),
    '#required' => FALSE,
  );
  $form['main']['ms_donation_show_on_checkout'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show Donation Form on Checkout Page?'),
    '#default_value' => variable_get('ms_donation_show_on_checkout', TRUE),
  );
  $form['email'] = array(
    '#type' => 'fieldset',
    '#title' => t('Email Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['email']['ms_donation_received_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Donation Received Email Subject'),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_donation_received_subject', ''),
  );
  $form['email']['ms_donation_received_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Donation Received Email Body'),
    '#description' => t("Leave blank to not send an email."),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_donation_received_body', ''),
  );
  $form['email']['ms_donation_received_mail_token_help']['tokens'] = array(
    '#theme' => 'token_tree',
    '#token_types' => array('ms_core_order', 'ms_core_payment', 'user'),
    '#dialog' => TRUE,
  );
  $form['email']['ms_donation_received_recurring_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Recurring Donation Received Email Subject'),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_donation_received_recurring_subject', ''),
  );
  $form['email']['ms_donation_received_recurring_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Recurring Donation Received Email Body'),
    '#description' => t("Leave blank to not send an email."),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_donation_received_recurring_body', ''),
  );
  $form['email']['ms_donation_received_recurring_mail_token_help']['tokens'] = array(
    '#theme' => 'token_tree',
    '#token_types' => array('ms_core_order', 'ms_core_payment', 'user'),
    '#dialog' => TRUE,
  );
  $form['email']['ms_donation_received_admin_email'] = array(
    '#type' => 'textfield',
    '#title' => t('Admin Email'),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_donation_received_admin_email', variable_get('site_mail', '')),
  );
  $form['email']['ms_donation_received_admin_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Admin Donation Received Email Subject'),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_donation_received_admin_subject', ''),
  );
  $form['email']['ms_donation_received_admin_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Admin Donation Received Email Body'),
    '#description' => t("Leave blank to not send an email."),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_donation_received_admin_body', ''),
  );
  $form['email']['ms_donation_received_admin_mail_token_help']['tokens'] = array(
    '#theme' => 'token_tree',
    '#token_types' => array('ms_core_order', 'ms_core_payment', 'user'),
    '#dialog' => TRUE,
  );

  return system_settings_form($form);
}


/**
 * Implements hook_mail().
 */
function ms_donation_mail($key, &$message, $params) {
  switch ($key) {
    case 'donation_admin':
      $subject = variable_get('ms_donation_received_admin_subject', '');
      $body = variable_get('ms_donation_received_admin_body', '');

      $tokens = array(
        'ms_core_order' => $params['order'],
        'ms_core_payment' => $params['payment'],
        'user' => $params['account'],
      );

      $message['subject'] = token_replace($subject, $tokens);
      $message['body'][] = token_replace($body, $tokens);
      break;

    case 'recurring_donation_received':
      $subject = variable_get('ms_donation_received_recurring_subject', '');
      $body = variable_get('ms_donation_received_recurring_body', '');

      $tokens = array(
        'ms_core_order' => $params['order'],
        'ms_core_payment' => $params['payment'],
        'user' => $params['account'],
      );

      $message['subject'] = token_replace($subject, $tokens);
      $message['body'][] = token_replace($body, $tokens);
      break;

    case 'donation_received':
      $subject = variable_get('ms_donation_received_subject', '');
      $body = variable_get('ms_donation_received_body', '');

      $tokens = array(
        'ms_core_order' => $params['order'],
        'ms_core_payment' => $params['payment'],
        'user' => $params['account'],
      );

      $message['subject'] = token_replace($subject, $tokens);
      $message['body'][] = token_replace($body, $tokens);
      break;
  }
}

/**
 * Implements hook_ms_order_payment().
 */
function ms_donation_ms_order_payment($type, $product, $order, $payment) {
  switch ($product->module) {
    case 'ms_donation':
      $account = user_load($order->uid);

      switch ($type) {
        case "cart":
          if (variable_get('ms_donation_received_body', '')) {
            $payment_vars = array(
              'order' => $order,
              'payment' => $payment,
              'account' => $account,
            );

            // Send Email to User.
            drupal_mail('ms_donation', 'donation_received', $account->mail, user_preferred_language($account), $payment_vars);

            // Send email to admin.
            if (variable_get('ms_donation_received_admin_email', '') && variable_get('ms_donation_received_admin_body', '')) {
              drupal_mail('ms_donation', 'donation_admin', variable_get('ms_donation_received_admin_email', ''), language_default(), $payment_vars);
            }
          }
          break;

        case 'rec_payment':
        case "rec_signup":
          if (variable_get('ms_donation_received_recurring_body', '')) {
            $payment_vars = array(
              'order' => $order,
              'payment' => $payment,
              'account' => $account,
            );

            // Send Email to User.
            drupal_mail('ms_donation', 'recurring_donation_received', $account->mail, user_preferred_language($account), $payment_vars);

            // Send email to admin.
            if (variable_get('ms_donation_received_admin_email', '') && variable_get('ms_donation_received_admin_body', '')) {
              drupal_mail('ms_donation', 'donation_admin', variable_get('ms_donation_received_admin_email', ''), language_default(), $payment_vars);
            }
          }
          break;
      }
      break;
  }
}

/**
 * Form constructor for the enter donation form.
 *
 * @ingroup forms
 * @see ms_donation_enter_donation_form_validate()
 * @see ms_donation_enter_donation_form_submit()
 */
function ms_donation_enter_donation_form() {
  $form['donation'] = array(
    '#type' => 'textfield',
    '#title' => variable_get('ms_donation_name', t('Donation')),
    '#size' => 25,
    '#description' => variable_get('ms_donation_description', ''),
  );
  $form['apply_donation'] = array(
    '#type' => 'submit',
    '#value' => t('Apply to order'),
    '#validate' => array('ms_donation_enter_donation_form_validate'),
    '#submit' => array('ms_donation_enter_donation_form_submit'),
  );

  return $form;
}

/**
 * Form validation handler for ms_donation_enter_donation_form().
 */
function ms_donation_enter_donation_form_validate($form, &$form_state) {
  drupal_get_messages('error');

  $min = variable_get('ms_donation_minimum_amount', 0.01);
  $amount = floatval($form_state['values']['donation']);

  if ($amount < $min) {
    form_set_error('donation', t("You must enter an amount greater than @min", array('@min' => $min)));
  } else {
    ms_donation_add_donation_to_cart($amount);

    // Redirect to ms/checkout.
    drupal_goto('ms/checkout');
  }
}

/**
 * Form constructor for the enter donation form for the cart.
 *
 * @see ms_donation_enter_donation_cart_form_validate()
 * @see ms_donation_enter_donation_cart_form_submit()
 */
function ms_donation_enter_donation_cart_form($form, &$form_state) {
  $form = array();
  $form['ms_donation'] = array(
    '#type' => 'fieldset',
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['ms_donation']['donation'] = array(
    '#type' => 'textfield',
    '#title' => variable_get('ms_donation_name', t('Donation')),
    '#default_value' => '',
    '#size' => 25,
    '#description' => variable_get('ms_donation_description', ''),
  );
  $form['ms_donation']['apply_donation'] = array(
    '#type' => 'submit',
    '#value' => t('Apply to order'),
    '#validate' => array('ms_donation_enter_donation_form_validate'),
    '#submit' => array('ms_donation_enter_donation_form_submit'),
  );

  return $form;
}

/**
 * Form validation handler for ms_donation_enter_donation_cart_form().
 *
 * @see ms_donation_enter_donation_cart_form_submit()
 */
function ms_donation_enter_donation_cart_form_validate($form, &$form_state) {
  $amount = floatval($form_state['values']['donation']);
  $min = variable_get('ms_donation_minimum_amount', 0.01);

  if ($amount < $min) {
    form_set_error('donation', t("You must enter an amount greater than @min", array('@min' => $min)));
  }
}

/**
 * Form submission handler for ms_donation_enter_donation_cart_form().
 *
 * @see ms_donation_enter_donation_cart_form_validate()
 */
function ms_donation_enter_donation_cart_form_submit($form, &$form_state) {
  $amount = floatval($form_state['values']['donation']);

  ms_donation_add_donation_to_cart($amount);
}

/**
 * Adds a donation to a cart.
 *
 * @param $amount
 *   The amount to add to the cart
 */
function ms_donation_add_donation_to_cart($amount) {
  $adjustment = new MsAdjustment();
  $adjustment->id = 'ms_donation';
  $adjustment->display = variable_get('ms_donation_product_name', t('Donation'));
  $adjustment->type = 'fixed';
  $adjustment->scope = 'initial';
  $adjustment->value = $amount;

  // First, remove donation from the cart if needed.
  ms_core_remove_cart_adjustment_match('ms_donation');

  // Add the coupon to the order.
  ms_core_add_cart_adjustment($adjustment, TRUE);

  drupal_set_message(t('@amount has been applied to your order.',
    array('@amount' => ms_core_format_money($amount))));
}

/**
 * Implements hook_ms_checkout_fields()
 */
function ms_donation_ms_checkout_fields(MsOrder $order) {
  $fields = array();
  if (variable_get('ms_donation_show_on_checkout', TRUE)) {
    // Show the Donation Entry Form if there are no ms_donation products in the cart.
    foreach ($order->products as $product) {
      if ($product->module == 'ms_donation') {
        return $fields;
      }
    }
    $fields[] = array(
      'id' => 'ms_donation_enter_donation',
      'title' => variable_get('ms_donation_product_name', t('Donation')),
      'type' => 'form',
      'html' => 'ms_donation_enter_donation_form',
      'weight' => 11,
    );
  }

  return $fields;
}

/**
 * Implements hook_ms_cart_fields()
 */
function ms_donation_ms_cart_fields($cart) {
  $fields = array();
  if (variable_get('ms_donation_show_on_checkout', TRUE)) {
    // Show the Donation Entry Form.
    $fields[] = array(
      'id' => 'ms_donation_enter_donation',
      'title' => variable_get('ms_donation_product_name', t('Donation')),
      'html' => drupal_get_form('ms_donation_enter_donation_cart_form'),
      'weight' => 11,
    );
  }

  return $fields;
}

/**
 * Implements hook_block_info().
 */
function ms_donation_block_info() {
  $blocks['ms_donation'] = array(
    'info' => t('Donation form'),
  );

  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function ms_donation_block_configure($delta = '') {
  $form = array();
  if ($delta == 'ms_donation') {
    $form['ms_donation_product_name'] = array(
      '#type' => 'textfield',
      '#title' => t('Donation name'),
      '#description' => t('The name of the donation product as it will appear in the cart.'),
      '#default_value' => variable_get('ms_donation_product_name', t('Donation')),
    );
    $form['ms_donation_product_element'] = array(
      '#type' => 'radios',
      '#title' => t('Selection method'),
      '#description' => t('Choose which method should be used for selection of donation options and terms.'),
      '#options' => array(
        'select' => t('Select'),
        'radios' => t('Radios'),
      ),
      '#default_value' => variable_get('ms_donation_product_element', 'select'),
    );
    $form['ms_donation_product_custom_amount'] = array(
      '#type' => 'checkbox',
      '#title' => t('Allow custom donation amounts'),
      '#description' => t('If this is not checked, users will have to choose one of the options listed below.'),
      '#default_value' => variable_get('ms_donation_product_custom_amount', TRUE),
    );
    $form['ms_donation_product_choices'] = array(
      '#type' => 'textarea',
      '#title' => t('Donation choices'),
      '#description' => t('Enter as many options as you want in the amount|Name format, one per line. Example: 5.00|$5'),
      '#default_value' => variable_get('ms_donation_product_choices', ''),
    );
    $form['ms_donation_product_one_time'] = array(
      '#type' => 'checkbox',
      '#title' => t('Allow one-time donations'),
      '#description' => t('If this is not checked, users will have to choose one of the terms listed below, and it must be recurring.'),
      '#default_value' => variable_get('ms_donation_product_one_time', TRUE),
    );
    $form['ms_donation_product_terms'] = array(
      '#type' => 'textarea',
      '#title' => t('Donation terms'),
      '#description' => t('Enter as many terms as you want in the number|period|Name format, one per line. If this is blank, the payment will only be one-time. You can use the following periods: d (Day), w (Week), m (Month), and y (Year). Example: 1|m|Monthly'),
      '#default_value' => variable_get('ms_donation_product_terms', ''),
    );
  }
  return $form;
}

/**
 * Implements hook_block_save().
 */
function ms_donation_block_save($delta = '', $edit = array()) {
  if ($delta == 'ms_donation') {
    variable_set('ms_donation_product_name', $edit['ms_donation_product_name']);
    variable_set('ms_donation_product_choices', $edit['ms_donation_product_choices']);
    variable_set('ms_donation_product_element', $edit['ms_donation_product_element']);
    variable_set('ms_donation_product_custom_amount', $edit['ms_donation_product_custom_amount']);
    variable_set('ms_donation_product_one_time', $edit['ms_donation_product_one_time']);
    variable_set('ms_donation_product_terms', $edit['ms_donation_product_terms']);
  }
  return;
}

/**
 * Implements hook_block_view().
 */
function ms_donation_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'ms_donation':
      $form = drupal_get_form('ms_donation_form');
      $block['subject'] = variable_get('ms_donation_product_name', t('Donation'));
      $block['content'] = drupal_render($form);
      break;
  }
  return $block;
}

/**
 * Form constructor for the donation product form.
 *
 * @ingroup forms
 * @see ms_donation_form_submit()
 */
function ms_donation_form($form, &$form_state) {
  $form['#prefix'] = "<div id='ms_donation_block'>";
  $form['#suffix'] = "</div>";
  $choices = ms_core_extract_select_options(variable_get('ms_donation_product_choices', ''));
  if (!empty($choices)) {
    if (variable_get('ms_donation_product_custom_amount', TRUE)) {
      $choices['custom'] = t('Other');
    }
    $form['amount'] = array(
      '#type' => variable_get('ms_donation_product_element', 'select'),
      '#title' => t('Amount'),
      '#required' => TRUE,
      '#options' => $choices,
      '#description' => variable_get('ms_donation_description', ''),
      '#default_value' => key($choices),
      '#ajax' => array(
        'callback' => 'ms_donation_block_form_ajax_callback',
        'wrapper' => 'ms_donation_block',
        'method' => 'replace',
        'effect' => 'fade',
      ),
    );

    if (!empty($form_state['values']['amount']) && $form_state['values']['amount'] == 'custom') {
      $form['custom_amount'] = array(
        '#type' => 'textfield',
        '#size' => 15,
      );
    }
  } else {
    $form['amount'] = array(
      '#type' => 'textfield',
      '#required' => TRUE,
      '#title' => t('Amount'),
      '#description' => variable_get('ms_donation_description', ''),
      '#size' => 15,
    );
  }

  $terms = array();
  if ($raw = trim(variable_get('ms_donation_product_terms', ''))) {
    foreach (explode("\n", $raw) as $line) {
      list($count, $period, $name) = explode('|', $line);
      $terms[$count . '_' . $period] = $name;
    }
  }
  if (!empty($terms)) {
    if (variable_get('ms_donation_product_one_time', TRUE)) {
      $terms = array_merge(array('once' => t('One time')), $terms);
    }
    $form['term'] = array(
      '#type' => variable_get('ms_donation_product_element', 'select'),
      '#title' => t('How often?'),
      '#required' => TRUE,
      '#options' => $terms,
      '#default_value' => key($terms),
    );
  } else {
    $form['term'] = array(
      '#type' => 'value',
      '#value' => 'once',
    );
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Continue'),
  );

  return $form;
}

/**
 * AJAX form callback
 */
function ms_donation_block_form_ajax_callback($form, $form_state) {
  return $form;
}

/**
 * Form validation handler for ms_donation_form().
 */
function ms_donation_form_validate($form, &$form_state) {
  $min = variable_get('ms_donation_minimum_amount', 0.01);
  $amount = $form_state['values']['amount'];
  if ($amount == 'custom' && isset($form_state['values']['custom_amount'])) {
    $amount = $form_state['values']['custom_amount'];
  }
  if (!is_numeric($amount)) {
    form_set_error('amount', t("You must enter only numeric amounts."));
  } elseif ($amount <= 0) {
    form_set_error('amount', t("You must enter a positive number."));
  } elseif ($amount < $min) {
    form_set_error('amount', t("You must enter an amount greater than @min", array('@min' => $min)));
  }
}

/**
 * Form submission handler for ms_donation_form().
 */
function ms_donation_form_submit($form, &$form_state) {
  $amount = $form_state['values']['amount'];

  if ($amount == 'custom') {
    $amount = $form_state['values']['custom_amount'];
  }
  switch ($form_state['values']['term']) {
    case 'once':
      $product = ms_core_new_product(variable_get('ms_donation_name', t('Donation')), 'ms_donation', 'ms_donation', $amount, 'cart');
      break;

    default:
      $product = ms_core_new_product(variable_get('ms_donation_name', t('Donation')), 'ms_donation', 'ms_donation', $amount, 'recurring');
      // Add the recurring schedule.
      list($length, $unit) = explode('_', $form_state['values']['term']);
      $product->recurring_schedule = array(
        'total_occurrences' => 0,
        'main_amount' => $amount,
        'main_length' => $length,
        'main_unit' => strtoupper($unit),
        'has_trial' => FALSE,
        'trial_amount' => 0,
        'trial_length' => 0,
        'trial_unit' => '',
      );
      break;

  }

  // Add the donation product to the cart.
  ms_core_add_cart_product($product, FALSE, FALSE);

  drupal_goto('ms/checkout');
}
