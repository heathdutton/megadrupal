<?php

/**
 * @file
 * MoneySuite Discounts
 *
 * Adds the ability to create Automatic Discounts, which are discounts which are
 * automatically applied to a cart once certain criteria are met.
 *
 * Original author: Leighton Whiting - Released under GENERAL PUBLIC LICENSE
 * Current maintenance by multiple MoneySuite users.
 * Re: new initiative: https://www.drupal.org/node/2315653 
 */

/**
 * Implements hook_help().
 */
function ms_discounts_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/moneysuite/ms_discounts":
    case "admin/help#ms_discounts":
      $output .= '<p>' . t("MoneySuite Discounts Module. This allows you to create Automatic Discounts that are applied when certain criteria are met. The discount can be a fixed amount or a percentage.") . '</p>';
      break;
  }
  return $output;
}

/**
 * Implements hook_menu().
 */
function ms_discounts_menu() {
  $items = array();

  $items['admin/moneysuite/ms_discounts'] = array(
    'title' => 'Discounts',
    'description' => 'Manage automatic discount rules.',
    'page callback' => 'ms_discounts_display',
    'access arguments' => array('administer ms_discounts'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/moneysuite/ms_discounts/add'] = array(
    'title' => 'Add new discount',
    'description' => 'Add a new automatic discount.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_discounts_add_form', 'add'),
    'access arguments' => array('administer ms_discounts'),
    'type' => MENU_LOCAL_ACTION,
  );
  $items['admin/moneysuite/ms_discounts/edit/%'] = array(
    'title' => 'Edit discount',
    'description' => 'Edit an automatic discount.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_discounts_add_form', 'edit', 4),
    'access arguments' => array('administer ms_discounts'),
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );
  $items['admin/moneysuite/ms_discounts/delete/%'] = array(
    'title' => 'Delete discount',
    'description' => 'Delete an automatic discount.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_discounts_delete_confirm', 4),
    'access arguments' => array('administer ms_discounts'),
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function ms_discounts_permission() {
  return array(
    'administer ms_discounts' => array(
      'title' => t('Administer Discounts'),
      'description' => t('Add, edit and delete automatic discounts.'),
      'restrict access' => TRUE,
    ),
  );
}


/**
 * Displays an overview of the discounts.
 */
function ms_discounts_display() {
  $header[] = array(
    'data' => t('Name'),
    'field' => 'name',
  );
  $header[] = array(
    'data' => t('Status'),
    'field' => 'status',
    'sort' => 'asc',
  );
  $header[] = array(
    'data' => t('Value'),
    'field' => 'value',
  );
  $header[] = array(
    'data' => t('Scope'),
    'field' => 'scope',
  );
  $header[] = array(
    'data' => t('Valid until'),
    'field' => 'valid_until',
  );
  $header[] = array(
    'data' => t('Usage'),
    'field' => 'used',
  );
  $header[] = array('data' => t('Actions'));

  $query = db_select('ms_discounts', 'd');
  $query->fields('d');

  $query = $query->extend('TableSort')->orderByHeader($header);
  $query = $query->extend('PagerDefault')->limit(20);
  $result = $query->execute();

  $rows = array();
  foreach ($result as $row) {
    $actions = l(t('edit'), "admin/moneysuite/ms_discounts/edit/" . $row->id);
    $actions .= ' ' . l(t('delete'), "admin/moneysuite/ms_discounts/delete/" . $row->id);

    $rows[] = array(
      $row->name,
      $row->status,
      ms_discounts_get_discount_string($row),
      ms_core_get_scope_name($row->scope),
      format_date($row->valid_until, 'small'),
      $row->used,
      $actions,
    );
  }

  if (count($rows)) {
    $output = theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('width' => '100%'), 'empty' => t('No discounts.')));
    $output .= theme('pager', array('tags' => NULL));
  } else {
    $output = '<p>' . t('There are currently no discounts in the system.') . '</p>';
  }

  return $output;
}

/**
 * Form constructor for the add discount form.
 *
 * @param string $action
 *   Form action, edit or add. 'edit' loads default values.
 * @param int $id
 *   (optional) The discount id if this is an edit form.
 *
 * @see ms_discounts_add_form_validate()
 * @see ms_discounts_add_form_submit()
 * @ingroup forms
 */
function ms_discounts_add_form($form, &$form_state, $action, $id = NULL) {
  if ($action == 'edit') {
    $discount = ms_discounts_load($id);
    $form['#ms_discounts_id'] = $discount->id;
    $form['#ms_discounts'] = $discount;
  } else {
    $discount = new stdClass;
    $discount->valid_until = REQUEST_TIME;
    $discount->max_uses = 0;
    $discount->name = '';
    $discount->scope = 'recurring';
    $discount->status = '';
    $discount->type = '';
    $discount->minimum_order = '';
    $discount->value = '';
    $discount->data = array(
      'minimum_order' => 0,
      'roles' => array(),
      'products' => array(),
      'users' => array(),
      'max_per_user' => 0,
      'products_method' => 'any',
      'max_per_cart' => 0,
    );
  }

  $discount->valid_until = array(
    'year' => format_date($discount->valid_until, 'custom', 'Y'),
    'month' => format_date($discount->valid_until, 'custom', 'n'),
    'day' => format_date($discount->valid_until, 'custom', 'j'),
  );

  $form['main'] = array(
    '#type' => 'fieldset',
    '#title' => t('General settings'),
  );
  $form['main']['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Discount name'),
    '#default_value' => $discount->name,
    '#required' => TRUE,
  );
  $form['main']['valid_until'] = array(
    '#type' => 'date',
    '#title' => t('Expiry date'),
    '#default_value' => $discount->valid_until,
    '#required' => TRUE,
  );
  $form['main']['status'] = array(
    '#type' => 'checkbox',
    '#title' => t('Active'),
    '#description' => t('Check to enable the discount, uncheck to disable the discount.'),
    '#default_value' => $discount->status,
  );
  $form['main']['type'] = array(
    '#type' => 'select',
    '#title' => t('Discount type'),
    '#default_value' => $discount->type,
    '#options' => array(
      'percentage' => 'Percentage',
      'fixed' => 'Fixed Value',
    ),
    '#description' => t("Note: If you use a percentage and there are products criteria, the percentage will be calculated from the first product's cost.")
  );
  $form['main']['value'] = array(
    '#type' => 'textfield',
    '#title' => t('Discount value'),
    '#default_value' => $discount->value,
    '#size' => 10,
    '#description' => t('Enter values without symbols, for 15%, enter "15" and choose Percentage as the discount type.'),
    '#required' => TRUE,
  );
  $form['main']['scope'] = array(
    '#type' => 'select',
    '#title' => t('Scope'),
    '#required' => TRUE,
    '#default_value' => $discount->scope,
    '#options' => ms_core_get_scopes(),
    '#description' => t('Whether the discount should affect the first payment only or all payments. Only applies for Recurring Payments.'),
  );
  $form['main']['max_uses'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum number of redemptions'),
    '#default_value' => $discount->max_uses,
    '#description' => t('Enter the maximum number of times this discount can be used, or 0 for unlimited.'),
    '#size' => 5,
    '#required' => TRUE,
  );
  $form['main']['max_per_user'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum number of uses (per user)'),
    '#default_value' => isset($discount->data['max_per_user']) ? $discount->data['max_per_user'] : 0,
    '#description' => t('Enter the maximum number of times this discount can be used by a single user, or 0 for unlimited.'),
    '#size' => 5,
    '#required' => TRUE,
  );
  $form['main']['max_per_cart'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum number of uses (per order)'),
    '#default_value' => isset($discount->data['max_per_cart']) ? $discount->data['max_per_cart'] : 0,
    '#description' => t('Enter the maximum number of times this discount can be used in a single order, or 0 for unlimited.'),
    '#size' => 5,
    '#required' => TRUE,
  );

  $form['criteria'] = array(
    '#type' => 'fieldset',
    '#title' => t('Criteria'),
    '#description' => t("All of the criteria set must be met in order for the discount to be applied to a cart."),
  );
  $form['criteria']['minimum_order'] = array(
    '#type' => 'textfield',
    '#title' => t('Minimum order limit'),
    '#default_value' => $discount->data['minimum_order'],
    '#size' => 10,
    '#description' => t('A minimum order total that applies to the discount, or 0 for no minimum order limit.'),
    '#required' => TRUE,
  );

  $form['criteria']['users'] = array(
    '#type' => 'fieldset',
    '#title' => t('User restrictions'),
    '#description' => t('Enter one or more user names and/or "anonymous users" below to make this discount valid only for those users.'),
    '#tree' => TRUE,
    '#collapsible' => TRUE,
    '#collapsed' => empty($discount->data['users']),
  );

  if (isset($discount->data['users'])) {
    foreach ($discount->data['users'] as $username) {
      $form['criteria']['users'][] = array(
        '#type' => 'textfield',
        '#default_value' => $username,
        '#autocomplete_path' => 'ms_core/autocomplete/user',
      );
    }
  }

  for ($i = 0; $i < 4; $i++) {
    $form['criteria']['users'][] = array(
      '#type' => 'textfield',
      '#autocomplete_path' => 'ms_core/autocomplete/user',
    );
  }

  $form['criteria']['roles'] = array(
    '#type' => 'fieldset',
    '#title' => t('Role restrictions'),
    '#description' => t('Enter one or more role names below to make this discount valid only for users with those roles.'),
    '#tree' => TRUE,
    '#collapsible' => TRUE,
    '#collapsed' => empty($discount->data['roles']),
  );

  if (isset($discount->data['roles'])) {
    foreach ($discount->data['roles'] as $role) {
      $form['criteria']['roles'][] = array(
        '#type' => 'textfield',
        '#default_value' => $role,
        '#autocomplete_path' => 'ms_core/autocomplete/role',
      );
    }
  }

  for ($i = 0; $i < 4; $i++) {
    $form['criteria']['roles'][] = array(
      '#type' => 'textfield',
      '#autocomplete_path' => 'ms_core/autocomplete/role',
    );
  }

  $form['criteria']['products_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Product restrictions'),
    '#collapsible' => TRUE,
    '#collapsed' => empty($discount->data['products']),
  );
  $form['criteria']['products_fieldset']['products_method'] = array(
    '#type' => 'select',
    '#title' => t('Method'),
    '#options' => array(
      'all' => t("All"),
      'any' => t("One or more"),
    ),
    '#description' => t("If 'All' is selected, then all products listed below need to be in the cart for the discount to apply. If 'Any' is selected, then only one of them needs to be present. You may use '*' for wildcards."),
    '#default_value' => $discount->data['products_method'],
  );
  $form['criteria']['products_fieldset']['products'] = array(
    '#type' => 'fieldset',
    '#title' => t('Product restrictions'),
    '#description' => t('Enter one or more products below to make this discount valid only for those products. Just enter the product name and it will be auto-completed.'),
    '#tree' => TRUE,
  );
  if (isset($discount->data['products'])) {
    foreach ($discount->data['products'] as $id) {
      $form['criteria']['products_fieldset']['products'][] = array(
        '#type' => 'textfield',
        '#default_value' => $id,
        '#autocomplete_path' => 'ms_core/autocomplete/product',
      );
    }
  }
  for ($i = 0; $i < 4; $i++) {
    $form['criteria']['products_fieldset']['products'][] = array(
      '#type' => 'textfield',
      '#autocomplete_path' => 'ms_core/autocomplete/product',
    );
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  return $form;
}

/**
 * Form submission_handler for ms_discounts_add_form().
 *
 * @see ms_discounts_add_form_validate()
 */
function ms_discounts_add_form_submit($form, &$form_state) {
  $valid_until = mktime(0, 0, 0, $form_state['values']['valid_until']['month'], $form_state['values']['valid_until']['day'], $form_state['values']['valid_until']['year']);
  $data = array();

  $data['max_per_user'] = $form_state['values']['max_per_user'];
  $data['minimum_order'] = $form_state['values']['minimum_order'];
  $data['products_method'] = $form_state['values']['products_method'];
  $data['max_per_cart'] = $form_state['values']['max_per_cart'];

  foreach ($form_state['values']['users'] as $username) {
    $data['users'][] = $username;
  }

  foreach ($form_state['values']['roles'] as $role) {
    if ($role) {
      $data['roles'][] = $role;
    }
  }

  foreach ($form_state['values']['products'] as $id) {
    if ($id) {
      $data['products'][] = $id;
    }
  }

  if (!isset($form['#ms_discounts_id'])) {
    db_insert('ms_discounts')
      ->fields(array(
        'name' => $form_state['values']['name'],
        'value' => floatval($form_state['values']['value']),
        'type' => $form_state['values']['type'],
        'scope' => $form_state['values']['scope'],
        'status' => $form_state['values']['status'],
        'valid_until' => $valid_until,
        'max_uses' => $form_state['values']['max_uses'],
        'data' => serialize($data),
      ))
      ->execute();
    drupal_set_message(t('Discount %name has been created.', array('%name' => $form_state['values']['name'])));
  } else {
    db_update('ms_discounts')
      ->fields(array(
        'name' => $form_state['values']['name'],
        'value' => floatval($form_state['values']['value']),
        'type' => $form_state['values']['type'],
        'scope' => $form_state['values']['scope'],
        'status' => $form_state['values']['status'],
        'valid_until' => $valid_until,
        'max_uses' => $form_state['values']['max_uses'],
        'data' => serialize($data),
      ))
      ->condition('id', $form['#ms_discounts_id'])
      ->execute();
    drupal_set_message(t('Discount %name has been updated.', array('%name' => $form_state['values']['name'])));
  }

  $form_state['redirect'] = 'admin/moneysuite/ms_discounts';
}

/**
 * Gets a list of the discounts.
 */
function ms_discounts_get_discounts_list($status = 1) {
  $discounts = array();
  $result = db_query("SELECT * FROM {ms_discounts} WHERE status = :status", array(':status' => $status));

  foreach ($result as $row) {
    $discounts[$row->id] = $row->name;
  }

  return $discounts;
}

/**
 * Loads a discount object from the database.
 *
 * @param int $id
 *   Unique discount ID.
 *
 * @return object|false
 *   A discount object.
 */
function ms_discounts_load($id) {
  $discount = db_query("SELECT * FROM {ms_discounts} WHERE id = :id", array(':id' => $id))->fetchObject();
  if ($discount->data) {
    $discount->data = unserialize($discount->data);
  }
  if (empty($discount->data['products'])) {
    $discount->data['products'] = array();
  }
  return $discount;
}

/**
 * Form constructor for the delete discount form.
 *
 * @param int $id
 *   discount ID.
 *
 * @see ms_discounts_delete_confirm_submit()
 * @ingroup forms
 */
function ms_discounts_delete_confirm($form, &$form_state, $id) {
  $discount = ms_discounts_load($id);
  $form['#ms_discounts_id'] = $discount->id;
  return confirm_form($form, t('Are you sure you want to delete the discount %name?', array('%name' => $discount->name)), 'admin/moneysuite/ms_discounts', t('This action cannot be undone. Deleting this discount will remove all records of past uses as well.'), t('Delete'));
}

/**
 * Form submission handler for ms_discounts_delete_confirm().
 */
function ms_discounts_delete_confirm_submit($form, &$form_state) {
  $discount = ms_discounts_load($form['#ms_discounts_id']);

  db_delete('ms_discounts')
    ->condition('id', $form['#ms_discounts_id'])
    ->execute();

  drupal_set_message(t('Discount %name has been deleted.', array('%name' => $discount->name)));
  $form_state['redirect'] = 'admin/moneysuite/ms_discounts';
}

/**
 * Validates a discount and calculates the amount from the current cart contents.
 *
 * @param MsOrder $cart
 *   The cart object.
 * @param object $discount
 *   The discount to check.
 *
 * @return bool
 *   TRUE if the discount should be applied, FALSE otherwise.
 */
function ms_discounts_validate($cart, $discount) {
  global $user;

  $applicable_total = ms_core_get_order_products_total($cart);

  if ($applicable_total == 0 AND $discount->scope == 'initial') {
    return FALSE;
  }

  // Check the max uses total.
  if ($discount->max_uses > 0) {
    $used = db_query("SELECT COUNT(*) FROM {ms_order_adjustments} AS msoa
      LEFT JOIN {ms_orders} AS mso ON msoa.oid = mso.oid
      WHERE msoa.id = :msoaid AND mso.uid <> :msouid",
      array(':msoaid' => 'ms_discounts_' . $discount->id, ':msouid' => 0))->fetchField();
    if ($used >= $discount->max_uses) {
      return FALSE;
    }
  }

  // Check the max uses per user.
  if ($user->uid AND isset($discount->data['max_per_user'])) {
    $discount_id = 'ms_discounts_' . $discount->id;
    if (!empty($discount->data['products'])) {
      foreach ($discount->data['products'] as $product_id) {
        $discount_id .= '-' . $product_id;
      }
    }
    $used = db_query("SELECT COUNT(*) FROM {ms_order_adjustments} AS msoa
      LEFT JOIN {ms_orders} AS mso ON msoa.oid = mso.oid
      WHERE msoa.id LIKE :msoaid AND mso.uid = :msouid",
      array(':msoaid' => $discount_id, ':msouid' => $user->uid))->fetchField();
    if ($used >= $discount->data['max_per_user']) {
      return FALSE;
    }
  }

  // Check the minimum purchase value.
  if ($discount->data['minimum_order'] > 0 && $discount->data['minimum_order'] > $applicable_total) {
    return FALSE;
  }

  // Check the user id.
  if (!empty($discount->data['users'])) {
    if (!in_array("$user->uid", $discount->data['users'], TRUE)) {
      return FALSE;
    }
  }

  // Check the roles.
  if (!empty($discount->data['roles'])) {
    $role_found = FALSE;
    foreach ($discount->data['roles'] as $role) {
      if (in_array($role, $user->roles)) {
        $role_found = TRUE;
        break;
      }
    }
    if (!$role_found) {
      return FALSE;
    }
  }

  // Check the products.
  if (!empty($discount->data['products'])) {
    $number_discounts = ms_discounts_get_discount_quantity($cart, $discount, $discount->data['products_method']);
    if ($number_discounts == 0) {
      return FALSE;
    }
  }

  return TRUE;
}

/**
 * Calculates how many times the discount should be applied to an order.
 *
 * This only really applies when there are multiple matching product sets for a
 * discount within one cart.
 */
function ms_discounts_get_discount_quantity($cart, $discount, $method = 'any') {
  $matches = 0;

  switch ($method) {
    case 'any':
      foreach ($discount->data['products'] as $id) {
        foreach ($cart->products as $product) {
          $id = str_replace('*', '.*', $id);
          if (preg_match('/^' . $id . '$/i', $product->module . '-' . $product->id)) {
            $matches += $product->qty;
          }
        }
      }
      break;

    case 'all':
      $matched_count = array();
      $set = array();
      // First, put all of the sets into an array.
      foreach ($discount->data['products'] as $id) {
        $id = str_replace('*', '.*', $id);
        if (!isset($set[$id])) {
          $set[$id] = 0;
        }
        $set[$id] += 1;
      }

      foreach ($set as $id => $needed) {
        foreach ($cart->products as $product) {
          if (preg_match('/^' . $id . '$/i', $product->module . '-' . $product->id)) {
            if (!isset($matched_count[$id])) {
              $matched_count[$id] = 0;
            }
            $matched_count[$id] += $product->qty;
          }
        }
      }

      // Then, count how many sets we can make.
      $found = TRUE;
      while ($found) {
        // See if we have enough of each product type.
        foreach ($set as $id => $needed) {
          if (isset($matched_count[$id]) && $matched_count[$id] >= $needed) {
            $matched_count[$id] -= $needed;
          } else {
            $found = FALSE;
          }
        }

        if ($found) {
          $matches += 1;
        }
      }
      break;
  }

  return $matches;
}

/**
 * Implements hook_ms_cart_added().
 */
function ms_discounts_ms_cart_added($cart, $product) {
  $cart = ms_core_get_cart($cart->cart_id);
  // First, let's remove all discounts from the cart.
  ms_core_remove_cart_adjustment_match('ms_discounts_');

  // Then, let's apply the discounts.
  ms_discounts_apply_cart_discounts($cart);
}

/**
 * Implements hook_ms_cart_removed().
 */
function ms_discounts_ms_cart_removed($cart, $product) {
  $cart = ms_core_get_cart($cart->cart_id);
  // First, let's remove all discounts from the cart.
  ms_core_remove_cart_adjustment_match('ms_discounts_');

  // Then, let's apply the discounts.
  ms_discounts_apply_cart_discounts($cart);
}

/**
 * Implements hook_ms_cart_qty_changed().
 */
function ms_discounts_ms_cart_qty_changed($cart, $product_id) {
  $cart = ms_core_get_cart($cart->cart_id);
  // First, let's remove all discounts from the cart.
  ms_core_remove_cart_adjustment_match('ms_discounts_');

  // Then, let's apply the discounts.
  ms_discounts_apply_cart_discounts($cart);
}

/**
 * Apply the discounts that meet the criteria to the cart.
 */
function ms_discounts_apply_cart_discounts($cart) {
  // Load all of the discounts that are active.
  $discounts = ms_discounts_get_discounts_list();

  foreach ($discounts as $id => $name) {
    $discount = ms_discounts_load($id);

    if (ms_discounts_validate($cart, $discount)) {
      ms_discounts_add_discount_to_cart($cart, $discount);
    }
  }
}

/**
 * Adds a discount to a cart.
 *
 * @param object $discount
 *   The discount to add to the cart
 */
function ms_discounts_add_discount_to_cart($cart, $discount) {
  $adjustment = new MsAdjustment();
  $adjustment->display = $discount->name;
  $adjustment->scope = $discount->scope;

  // If it is percentage type and there are products, then we need to
  // set it to fixed and calculate the value as a percentage of the first
  // product's price.
  if ($discount->type == 'percentage' && !empty($discount->data['products'])) {
    $adjustment->type = 'fixed';
    $first_product = null;
    foreach ($discount->data['products'] as $id) {
      foreach ($cart->products as $product) {
        $id = str_replace('*', '.*', $id);
        if (preg_match('/^' . $id . '$/i', $product->module . '-' . $product->id)) {
          $first_product = $product;
          break;
        }
      }
    }
    $value = ($discount->value / 100) * $first_product->amount;
    $adjustment->value = -$value;
  } else {
    $adjustment->type = $discount->type;
    $adjustment->value = -$discount->value;
  }

  $adjustment->optional = FALSE;

  $number_discounts = 1;

  if (!empty($discount->data['products'])) {
    $number_discounts = ms_discounts_get_discount_quantity($cart, $discount, $discount->data['products_method']);
  }

  if ($discount->data['max_per_cart'] > 0 && $number_discounts > $discount->data['max_per_cart']) {
    $number_discounts = $discount->data['max_per_cart'];
  }
  if ($discount->data['max_per_user'] > 0 && $number_discounts > $discount->data['max_per_user']) {
    $number_discounts = $discount->data['max_per_user'];
  }
  if ($discount->max_uses > 0 && $number_discounts > $discount->max_uses) {
    $number_discounts = $discount->max_uses;
  }

  for ($i = $number_discounts; $i > 0; $i--) {
    // Add the discount to the order.
    $adjustment->id = 'ms_discounts_' . $discount->id . '_' . $i;
    unset($adjustment->adjustment_id);
    ms_core_add_cart_adjustment($adjustment, TRUE);
  }

  // Increment the used counter.
  db_query("UPDATE {ms_discounts} SET used = used + 1 WHERE id = :id", array(':id' => $discount->id));

  /**
   * drupal_set_message(t('Discount @name has been applied to your order, for a discount of @discount.',
   * array('@discount' => ms_discounts_get_discount_string($discount), '@name' => $discount->name)));
   */
}

/**
 * Creates a discount string for a discount.
 *
 * @param object $discount
 *   The discount object.
 *
 * @return string
 *   The discount string for the discount.
 */
function ms_discounts_get_discount_string($discount) {
  switch ($discount->type) {
    case 'percentage':
      return rtrim(trim($discount->value, '0'), '.') . '%';
      break;

    case 'fixed':
      return ms_core_format_money($discount->value);
      break;
  }
  return '';
}

/**
 * Implements hook_ms_product_id_change().
 */
function ms_discounts_ms_product_id_change($old_id, $new_id) {
  $discounts = ms_discounts_get_discounts_list();
  foreach ($discounts as $id => $name) {
    $discount = ms_discounts_load($id);
    if (!empty($discount->data['products']) && in_array($old_id, $discount->data['products'])) {
      $i = array_search($old_id, $discount->data['products']);
      unset($discount->data['products'][$i]);
      $discount->data['products'][] = $new_id;
      drupal_write_record('ms_discounts', $discount, 'id');
    }
  }
}
