<?php

/**
 * Implements hook_uninstall().
 */
function ms_products_uninstall() {
  // Delete related variables all at once.
  db_delete('variable')
    ->condition('name', 'ms_products_%%', 'LIKE')
    ->execute();
}

/**
 * Implements hook_schema().
 */
function ms_products_schema() {
  $schema['ms_products_plans'] = array(
    'description' => 'Product Plans',
    'export' => array(
      'key' => 'sku',
      'key name' => 'Machine Name',
      'admin_title' => 'name',
      'primary key' => 'pid',
      'admin_description' => 'description',
      'identifier' => 'ms_products_plan',
      'default hook' => 'default_ms_products_plan',
      'object factory' => 'ms_products_plan_factory',
      'api' => array(
        'owner' => 'ms_products',
        'api' => 'default_ms_products_plans',
        'minimum_version' => 1,
        'current_version' => 1,
      ),
      'save callback' => 'ms_products_plan_save',
      'load callback' => 'ms_products_plan_load',
      'load multiple callback' => 'ms_products_plan_load_multiple',
      'delete callback' => 'ms_products_plan_delete',
    ),
    'fields' => array(
      'pid' => array(
        'type' => 'serial',
        'description' => 'The unique product ID (primary)',
        'not null' => TRUE,
        'no export' => TRUE,
      ),
      'bundle' => array(
        'type' => 'varchar',
        'description' => 'The type of the Product',
        'length' => '255',
        'not null' => TRUE,
      ),
      'sku' => array(
        'type' => 'varchar',
        'description' => 'The unique sku',
        'length' => '255',
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => t('The user id who owns the products.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ),
      'name' => array(
        'type' => 'varchar',
        'description' => 'The name of the Product',
        'length' => '255',
        'not null' => TRUE,
      ),
      'cart_type' => array(
        'type' => 'varchar',
        'description' => 'cart or recurring',
        'length' => '100',
        'not null' => TRUE,
      ),
      'description' => array(
        'type' => 'text',
        'description' => 'Description of the Product',
      ),
      'signup_mail_subject' => array(
        'type' => 'varchar',
        'description' => 'Subject for Signup Email',
        'length' => '255',
      ),
      'signup_mail_body' => array(
        'type' => 'text',
        'description' => 'Body for Signup Email',
      ),
      'eot_mail_subject' => array(
        'type' => 'varchar',
        'description' => 'Subject for End of Term Email',
        'length' => '255',
      ),
      'eot_mail_body' => array(
        'type' => 'text',
        'description' => 'Body for End of Term Email',
      ),
      'cancel_mail_subject' => array(
        'type' => 'varchar',
        'description' => 'Subject for Cancellation Email',
        'length' => '255',
      ),
      'cancel_mail_body' => array(
        'type' => 'text',
        'description' => 'Body for Cancellation Email',
      ),
      'modify_mail_subject' => array(
        'type' => 'varchar',
        'description' => 'Subject for Modification Email',
        'length' => '255',
      ),
      'modify_mail_body' => array(
        'type' => 'text',
        'description' => 'Body for Modification Email',
      ),
      'expiring_mail_subject' => array(
        'type' => 'varchar',
        'description' => 'Subject for Expiring Soon Email',
        'length' => '255',
      ),
      'expiring_mail_body' => array(
        'type' => 'text',
        'description' => 'Body for Expiring Soon Email',
      ),
      'expiring_mail_days' => array(
        'type' => 'int',
        'description' => 'How many days before the membership Expires to send the email',
        'not null' => TRUE,
      ),
      'weight' => array(
        'type' => 'int',
        'description' => 'Weight',
        'not null' => TRUE,
        'default' => 0,
      ),
      'recurring_schedule' => array(
        'type' => 'text',
        'description' => 'Serialized Array of the recurring schedule',
        'serialize' => TRUE,
      ),
      'modify_options' => array(
        'type' => 'text',
        'description' => 'Which products can be changed to from this product',
        'serialize' => TRUE,
      ),
      'allow_roles' => array(
        'type' => 'text',
        'description' => 'Which Roles can Purchase/Upgrade this role',
        'serialize' => TRUE,
      ),
      'deny_roles' => array(
        'type' => 'text',
        'description' => 'Which Roles can not Purchase/Upgrade this role',
        'serialize' => TRUE,
      ),
      'expire_when' => array(
        'type' => 'varchar',
        'description' => 'When to remove the role',
        'length' => '32',
        'default' => 'subscr_eot',
      ),
      'data' => array(
        'type' => 'text',
        'description' => 'Serialized Array of Data for the plan',
        'serialize' => TRUE,
      ),
    ),
    'primary key' => array('pid'),
    'unique keys' => array(
      'sku' => array('sku'),
    ),
  );

  $schema['ms_products_purchases'] = array(
    'description' => 'Used to record all product purchases',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'description' => 'The unique ID (primary)',
        'not null' => TRUE,
      ),
      'oid' => array(
        'type' => 'int',
        'description' => 'The unique order ID',
        'not null' => TRUE,
      ),
      'uid' => array(
        'type' => 'int',
        'description' => 'The uid of the user making the record',
        'not null' => TRUE,
      ),
      'bundle' => array(
        'type' => 'varchar',
        'description' => 'The type of the Product',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'sku' => array(
        'type' => 'varchar',
        'description' => 'The machine name of the product plan.',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'pid' => array(
        'type' => 'int',
        'description' => 'The unique product ID (primary)',
        'not null' => TRUE,
        'default' => 0,
      ),
      'status' => array(
        'type' => 'varchar',
        'description' => 'The Status of the Purchase',
        'length' => '255',
      ),
      'expiration' => array(
        'type' => 'int',
        'description' => 'The Expiration of the Purchase',
        'not null' => TRUE,
        'default' => 0,
      ),
      'start_date' => array(
        'type' => 'int',
        'description' => 'Start Date for the Purchase',
        'not null' => TRUE,
        'default' => 0,
      ),
      'current_payments' => array(
        'type' => 'int',
        'description' => 'The current number of payments made',
        'not null' => TRUE,
        'default' => 0,
      ),
      'max_payments' => array(
        'type' => 'int',
        'description' => 'The max number of payments for the Purchase',
        'not null' => TRUE,
        'default' => 0,
      ),
      'data' => array(
        'type' => 'text',
        'description' => 'Serialized Array of Data for the purchase',
        'serialize' => TRUE,
      ),
    ),
    'primary key' => array('id'),
  );

  $schema['ms_products_plan_options'] = array(
    'description' => 'Options associated with plans.',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'description' => 'The unique ID (primary)',
        'not null' => TRUE,
      ),
      'sku' => array(
        'type' => 'varchar',
        'description' => 'The machine name of the product plan.',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'name' => array(
        'type' => 'varchar',
        'description' => 'The machine name of the option.',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'title' => array(
        'type' => 'varchar',
        'description' => 'The title of the option.',
        'length' => '255',
      ),
      'description' => array(
        'type' => 'varchar',
        'description' => 'The description of the option.',
        'length' => '255',
      ),
      'widget' => array(
        'type' => 'varchar',
        'description' => 'The widget used.',
        'length' => '32',
        'not null' => TRUE,
        'default' => 'checkbox',
      ),
      'sub_options' => array(
        'type' => 'varchar',
        'description' => 'The sub option choices.',
        'length' => '512',
        'not null' => TRUE,
        'default' => '',
      ),
      'optional' => array(
        'type' => 'int',
        'description' => 'Whether or not users are required to purchase the option.',
        'not null' => TRUE,
        'default' => 1,
      ),
      'default_value' => array(
        'type' => 'int',
        'description' => 'Whether or not the option is selected by default.',
        'not null' => TRUE,
        'default' => 1,
      ),
      'amount' => array(
        'type' => 'numeric',
        'description' => 'The fee for the option.',
        'precision' => '10',
        'scale' => '2',
        'not null' => TRUE,
        'default' => 0.00,
      ),
      'expiration' => array(
        'type' => 'int',
        'description' => 'How long until the option expires.',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('id'),
  );

  $schema['ms_products_purchase_options'] = array(
    'description' => 'Options associated with purchases.',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'description' => 'The unique ID (primary)',
        'not null' => TRUE,
      ),
      'pid' => array(
        'type' => 'int',
        'description' => 'The ID of the purchase.',
        'not null' => TRUE,
      ),
      'name' => array(
        'type' => 'varchar',
        'description' => 'The machine name of the option.',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'sub_option' => array(
        'type' => 'varchar',
        'description' => 'The value of the selected option.',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'status' => array(
        'type' => 'varchar',
        'description' => 'The status of the option.',
        'length' => '255',
      ),
      'expiration' => array(
        'type' => 'int',
        'description' => 'How long until the option expires.',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('id'),
  );

  return $schema;
}

// ======================================
// Updates:
// ======================================

/**
 * Add the uid field to the product plans table
 */
function ms_products_update_7101(&$sandbox) {
  if (!db_field_exists('ms_products_plans', 'uid')) {
    db_add_field('ms_products_plans', 'uid', array(
      'description' => t('The user id who owns the products.'),
      'type' => 'int',
      'unsigned' => TRUE,
      'not null' => TRUE,
      'default' => 1,
    ));
  }

  return t('Successfully added the uid field to the ms_products_plans database table.');
}

/**
 * Add the allow_roles, deny_roles, and expire_when fields to the ms_products_plans table
 */
function ms_products_update_7301(&$sandbox) {
  if (!db_field_exists('ms_products_plans', 'allow_roles')) {
    db_add_field('ms_products_plans', 'allow_roles', array(
      'type' => 'text',
      'description' => 'Which Roles can Purchase/Upgrade this role',
      'serialize' => TRUE,
    ));
  }
  if (!db_field_exists('ms_products_plans', 'deny_roles')) {
    db_add_field('ms_products_plans', 'deny_roles', array(
      'type' => 'text',
      'description' => 'Which Roles can not Purchase/Upgrade this role',
      'serialize' => TRUE,
    ));
  }
  if (!db_field_exists('ms_products_plans', 'expire_when')) {
    db_add_field('ms_products_plans', 'expire_when', array(
      'type' => 'varchar',
      'description' => 'When to remove the role',
      'length' => '32',
      'default' => 'subscr_eot',
    ));
  }

  // Set the default for all of the product plans for allow_roles and deny_roles and machine_name
  $result = db_query("SELECT * FROM {ms_products_plans}");
  foreach ($result as $plan) {
    $plan->allow_roles = array();
    $plan->deny_roles = array();
    db_update('ms_products_plans')
      ->fields(array(
        'allow_roles' => serialize($plan->allow_roles),
        'deny_roles' => serialize($plan->deny_roles),
      ))
      ->condition('pid', $plan->pid)
      ->execute();
  }
  return t('Successfully added the new fields to the ms_products_plans database table.');
}

/**
 * Make sure the arrays are serialized correctly.
 */
function ms_products_update_7302(&$sandbox) {
  $result = db_query("SELECT * FROM {ms_products_plans}");
  foreach ($result as $plan) {
    $plan->allow_roles = _ms_products_unserialize($plan->allow_roles);
    $plan->deny_roles = _ms_products_unserialize($plan->deny_roles);
    $plan->modify_options = _ms_products_unserialize($plan->modify_options);
    $plan->recurring_schedule = _ms_products_unserialize($plan->recurring_schedule);
    $plan->data = _ms_products_unserialize($plan->data);
    db_update('ms_products_plans')
      ->fields(array(
        'allow_roles' => serialize($plan->allow_roles),
        'deny_roles' => serialize($plan->deny_roles),
        'modify_options' => serialize($plan->modify_options),
        'recurring_schedule' => serialize($plan->recurring_schedule),
        'data' => serialize($plan->data),
      ))
      ->condition('pid', $plan->pid)
      ->execute();
  }
}

/**
 * Make sure sku is set and used for the purchases and add fixed date support.
 */
function ms_products_update_7304(&$sandbox) {
  $schema['ms_product_purchases'] = array(
    'description' => 'Used to record all product purchases',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'description' => 'The unique ID (primary)',
        'not null' => TRUE,
      ),
      'oid' => array(
        'type' => 'int',
        'description' => 'The unique order ID',
        'not null' => TRUE,
      ),
      'uid' => array(
        'type' => 'int',
        'description' => 'The uid of the user making the record',
        'not null' => TRUE,
      ),
      'bundle' => array(
        'type' => 'varchar',
        'description' => 'The type of the Product',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'sku' => array(
        'type' => 'varchar',
        'description' => 'The machine name of the product plan.',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'status' => array(
        'type' => 'varchar',
        'description' => 'The Status of the Purchase',
        'length' => '255',
      ),
      'expiration' => array(
        'type' => 'int',
        'description' => 'The Expiration of the Purchase',
        'not null' => TRUE,
        'default' => 0,
      ),
      'start_date' => array(
        'type' => 'int',
        'description' => 'Start Date for the Purchase',
        'not null' => TRUE,
        'default' => 0,
      ),
      'current_payments' => array(
        'type' => 'int',
        'description' => 'The current number of payments made',
        'not null' => TRUE,
        'default' => 0,
      ),
      'max_payments' => array(
        'type' => 'int',
        'description' => 'The max number of payments for the Purchase',
        'not null' => TRUE,
        'default' => 0,
      ),
      'data' => array(
        'type' => 'text',
        'description' => 'Serialized Array of Data for the purchase',
        'serialize' => TRUE,
      ),
    ),
    'primary key' => array('id'),
  );
  if (!db_table_exists('ms_product_purchases')) {
    db_create_table('ms_product_purchases', $schema['ms_product_purchases']);
  }

  // Rename table to ms_products_purchases.
  if (db_table_exists('ms_products_purchases')) {
    db_drop_table('ms_products_purchases');
  }
  db_rename_table('ms_product_purchases', 'ms_products_purchases');
  if (db_field_exists('ms_products_plans', 'type')) {
    db_change_field('ms_products_plans', 'type', 'cart_type', array(
      'type' => 'varchar',
      'description' => 'cart or recurring',
      'length' => '100',
      'not null' => TRUE,
    ));
    db_change_field('ms_products_plans', 'module', 'bundle', array(
      'type' => 'varchar',
      'description' => 'The type of the Product',
      'length' => '255',
      'not null' => TRUE,
      'default' => '',
    ));
    db_change_field('ms_products_purchases', 'pid', 'sku', array(
      'type' => 'varchar',
      'description' => 'The machine name of the product plan.',
      'length' => '255',
      'not null' => TRUE,
      'default' => '',
    ));
  }

  if (db_field_exists('ms_products_plans', 'machine_name')) {
    db_drop_field('ms_products_plans', 'machine_name');
  }

  if (!db_field_exists('ms_products_purchases', 'bundle')) {
    db_add_field('ms_products_purchases', 'bundle', array(
      'type' => 'varchar',
      'description' => 'The type of the Product',
      'length' => '255',
      'not null' => TRUE,
      'default' => '',
    ));
  }
  if (!db_field_exists('ms_products_purchases', 'data')) {
    db_add_field('ms_products_purchases', 'data', array(
      'type' => 'text',
      'description' => 'Serialized Array of Data for the purchase',
      'serialize' => TRUE,
    ));
  }

  // Add the new tables.
  $schema['ms_products_plan_options'] = array(
    'description' => 'Options associated with plans.',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'description' => 'The unique ID (primary)',
        'not null' => TRUE,
      ),
      'sku' => array(
        'type' => 'varchar',
        'description' => 'The machine name of the product plan.',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'name' => array(
        'type' => 'varchar',
        'description' => 'The machine name of the option.',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'title' => array(
        'type' => 'varchar',
        'description' => 'The title of the option.',
        'length' => '255',
      ),
      'description' => array(
        'type' => 'varchar',
        'description' => 'The description of the option.',
        'length' => '255',
      ),
      'optional' => array(
        'type' => 'int',
        'description' => 'Whether or not users are required to purchase the option.',
        'not null' => TRUE,
        'default' => 1,
      ),
      'default_value' => array(
        'type' => 'int',
        'description' => 'Whether or not the option is selected by default.',
        'not null' => TRUE,
        'default' => 1,
      ),
      'amount' => array(
        'type' => 'numeric',
        'description' => 'The fee for the option.',
        'precision' => '10',
        'scale' => '2',
        'not null' => TRUE,
        'default' => 0.00,
      ),
      'expiration' => array(
        'type' => 'int',
        'description' => 'How long until the option expires.',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('id'),
  );

  $schema['ms_products_purchase_options'] = array(
    'description' => 'Options associated with purchases.',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'description' => 'The unique ID (primary)',
        'not null' => TRUE,
      ),
      'pid' => array(
        'type' => 'int',
        'description' => 'The ID of the purchase.',
        'not null' => TRUE,
      ),
      'name' => array(
        'type' => 'varchar',
        'description' => 'The machine name of the option.',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
      ),
      'status' => array(
        'type' => 'varchar',
        'description' => 'The status of the option.',
        'length' => '255',
      ),
      'expiration' => array(
        'type' => 'int',
        'description' => 'How long until the option expires.',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('id'),
  );

  if (db_table_exists('ms_products_plan_options')) {
    db_drop_table('ms_products_plan_options');
  }
  if (db_table_exists('ms_products_purchase_options')) {
    db_drop_table('ms_products_purchase_options');
  }

  db_create_table('ms_products_plan_options', $schema['ms_products_plan_options']);
  db_create_table('ms_products_purchase_options', $schema['ms_products_purchase_options']);

  // Set the sku of the purchases table to the sku of the product plans table.
  $result = db_query("SELECT * FROM {ms_products_plans}");
  foreach ($result as $plan) {
    db_update('ms_products_purchases')
      ->fields(array(
        'sku' => $plan->sku,
        'bundle' => $plan->bundle,
      ))
      ->condition('sku', $plan->pid)
      ->execute();
  }

  $skus = array();
  module_load_include('inc', 'ms_products', 'ms_products.plans');
  foreach (ms_products_get_plans() as $plan) {
    $skus[$plan->pid] = $plan->sku;
    ms_core_product_id_change($plan->bundle . '-' . $plan->pid, $plan->bundle . '-' . $plan->sku);
    if (module_exists('i18n_string')) {
      module_load_install('i18n_string');
      i18n_string_install_update_context('ms_products_plan:plan:' . $plan->pid . ':*', 'ms_products_plan:plan:' . $plan->sku . ':*');
    }
  }

  // Migrate rules from pid to sku.
  if (module_exists('rules')) {
    // It's too hard to migrate rules because of dependencies, so just have
    // users manually migrate rules if there are any.
    // Unfortunately this can't be helped.
    //_ms_products_migrate_rules($skus);
  }

  // Clear the schema cache.
  cache_clear_all('schema', 'cache');

  return t('Successfully changed the sku of purchases to point to sku.');
}

/**
 * Migrate the modify options field.
 */
function ms_products_update_7305(&$sandbox) {
  $result = db_query("SELECT * FROM {ms_products_plans}");
  foreach ($result as $plan) {
    $modify_options = _ms_products_unserialize($plan->modify_options);
    $plan->modify_options = array(
      'upgrade' => $modify_options,
      'downgrade' => array(),
    );
    db_update('ms_products_plans')
      ->fields(array(
        'modify_options' => serialize($plan->modify_options),
      ))
      ->condition('pid', $plan->pid)
      ->execute();
  }

  return t('Successfully updated the modify options field.');
}

/**
 * Migrates rules from the old format to the new.
 */
function _ms_products_migrate_rules($skus) {
  // Set some variables.
  $rules_strings_map = array(
    'pid' => 'sku',
  );

  $rules = rules_config_load_multiple();

  foreach ($rules as $rule) {
    $export_string = $rule->export();
    // Only do this for rules using ms_products.
    if (strstr($export_string, 'ms_products')) {
      // Replace the strings.
      foreach ($rules_strings_map as $old => $new) {
        $export_string = str_replace($old, $new, $export_string);
      }
      // Replace the sku.
      foreach ($skus as $pid => $sku) {
        $export_string = str_replace('"sku" : "' . $pid . '"', '"sku" : "' . $sku . '"', $export_string);
      }

      // Delete the old actions and conditions.
      foreach ($rule->conditions() as $condition) {
        $condition->delete();
      }
      foreach ($rule->actions() as $action) {
        $action->delete();
      }

      // Reimport the rule.
      $export_object = drupal_json_decode($export_string);
      $rule->import($export_object[$rule->name]);
      $rule->save();
    }
  }
}

/**
 * Attempts to fully unserialize a string that may have been serialized multiple times.
 */
function _ms_products_unserialize($object) {
  for ($i = 0; $i < 6; $i++) {
    if (is_array($object)) {
      return $object;
    }
    $object = unserialize($object);
  }

  return array();
}

/**
 * Add new fields for Configurable Plan Options.
 */
function ms_products_update_7306(&$sandbox) {
  if (db_field_exists('ms_products_plan_options', 'widget')) {
    db_drop_field('ms_products_plan_options', 'widget');
  }
  if (!db_field_exists('ms_products_plan_options', 'widget')) {
    db_add_field('ms_products_plan_options', 'widget', array(
      'type' => 'varchar',
      'description' => 'The widget used.',
      'length' => '32',
      'not null' => TRUE,
      'default' => 'checkbox',
    ));
  }
  if (db_field_exists('ms_products_plan_options', 'sub_options')) {
    db_drop_field('ms_products_plan_options', 'sub_options');
  }

  if (!db_field_exists('ms_products_plan_options', 'sub_options')) {
    db_add_field('ms_products_plan_options', 'sub_options', array(
      'type' => 'varchar',
      'description' => 'The sub option choices.',
      'length' => '512',
      'not null' => TRUE,
      'default' => '',
    ));
  }
  if (db_field_exists('ms_products_purchase_options', 'sub_option')) {
    db_drop_field('ms_products_purchase_options', 'sub_option');
  }

  if (!db_field_exists('ms_products_purchase_options', 'sub_option')) {
    db_add_field('ms_products_purchase_options', 'sub_option', array(
      'type' => 'varchar',
      'description' => 'The value of the selected option.',
      'length' => '255',
      'not null' => TRUE,
      'default' => '',
    ));
  }

  return t('Successfully added fields for configurable plan options.');
}

/**
 * Add new pid field for Purchases.
 */
function ms_products_update_7307(&$sandbox) {
  if (db_field_exists('ms_products_purchases', 'pid')) {
    db_drop_field('ms_products_purchases', 'pid');
  }
  if (!db_field_exists('ms_products_purchases', 'pid')) {
    db_add_field('ms_products_purchases', 'pid', array(
      'type' => 'int',
      'description' => 'The unique product ID (primary)',
      'not null' => TRUE,
      'default' => 0,
    ));
  }

  // Populate the existing purchases.
  $result = db_query("SELECT * FROM {ms_products_purchases}");
  foreach ($result as $purchase) {
    $plan = ms_products_plan_load($purchase->sku);
    if ($plan) {
      db_update('ms_products_purchases')
        ->fields(array(
          'pid' => $plan->pid,
        ))
        ->condition('id', $purchase->id)
        ->execute();
    }
  }

  return t('Successfully added pid field for purchases.');
}
