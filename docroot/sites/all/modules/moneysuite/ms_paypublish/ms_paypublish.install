<?php

/**
 * @file
 * Contains install and update functions.
 */

/**
 * Implements hook_enable().
 */
function ms_paypublish_enable() {
  ms_products_create_fields('ms_paypublish');
}

/**
 * Implements hook_field_schema().
 */
function ms_paypublish_field_schema($field) {
  return array(
    'columns' => array(
      'sku' => array(
        'type' => 'varchar',
        'default' => '',
        'length' => 255,
        'not null' => TRUE,
      ),
      'sticky' => array(
        'type' => 'int',
        'length' => 1,
        'default' => 0,
        'not null' => FALSE,
      ),
      'promote' => array(
        'type' => 'int',
        'length' => 1,
        'default' => 0,
        'not null' => FALSE,
      ),
    ),
    'indexes' => array(),
  );
}

/**
 * Implements hook_uninstall().
 */
function ms_paypublish_uninstall() {
  if (function_exists('ms_products_delete_fields')) {
    ms_products_delete_fields('ms_paypublish');
  }

  // Delete related variables all at once.
  db_delete('variable')
    ->condition('name', 'ms_paypublish_%%', 'LIKE')
    ->execute();
}

// ======================================
// Updates:
// ======================================

/**
 * Migrate Override Settings
 */
function ms_paypublish_update_7501(&$sandbox) {
  foreach (ms_paypublish_get_plans() as $id => $name) {
    $product = ms_paypublish_load_plan($id);

    if (isset($product->data['override_settings']) AND is_array($product->data['override_settings'])) {
      $old_override_settings = $product->data['override_settings'];
      $new_override_settings = array();

      foreach ($old_override_settings as $module => $info) {
        if ($info['override']) {
          foreach ($info['settings'] as $key => $value) {
            if (is_array($value)) {
              foreach ($value as $child_key => $child_value) {
                if (!is_array($child_value)) {
                  if ($child_value != variable_get($child_key, '')) {
                    $new_override_settings[$child_key] = $child_value;
                  }
                }
              }
            }
            else {
              if ($value != variable_get($key, '')) {
                $new_override_settings[$key] = $value;
              }
            }
          }
        }
      }

      $product->data['override_settings'] = $new_override_settings;

      db_update('ms_paypublish_plans')
        ->fields((array) $product)
        ->condition('pid', $product->pid)
        ->execute();
    }
  }

  return '';
}

/**
 * Add the uid field to the ms_paypublish_plans table
 */
function ms_paypublish_update_7502(&$sandbox) {
  if (!db_field_exists('ms_paypublish_plans', 'uid')) {
  db_add_field('ms_paypublish_plans', 'uid', array(
      'description' => t('The user id who owns the products.'),
      'type' => 'int',
      'unsigned' => TRUE,
      'not null' => TRUE,
      'default' => 1,
    ));
  }

  return t('Successfully added the uid field to the ms_paypublish_plans database table.');
}

/**
 * Enable the new dependencies if they aren't yet.
 */
function ms_paypublish_update_7601(&$sandbox) {
  if (!module_exists('ms_products')) {
    module_enable(array('ms_products'));
  }
  if (!module_exists('entityreference')) {
    module_enable(array('entityreference'));
  }
  return t('Made sure ms_products and entityreference are enabled.');
}

/**
 * Move plans and records to the ms_products module database tables.
 */
function ms_paypublish_update_7602(&$sandbox) {
  module_load_include('inc', 'ms_paypublish', 'ms_paypublish.migrate');
  module_load_include('module', 'ms_products', 'ms_products');

  ms_products_create_fields('ms_paypublish');

  $skus = array();
  $result = db_query("SELECT * FROM {ms_paypublish_plans}");
  $plans = array();
  foreach ($result as $plan) {
    // Move the fields that aren't natively supported into the data array.
    $plan->data = unserialize($plan->data);

    $plan->cart_type = ($plan->recurring) ? 'recurring' : 'cart';
    $plan->bundle = 'ms_paypublish';
    $plan->sku = 'ms_paypublish_' . $plan->pid;
    $skus[$plan->pid] = $plan->sku;
    ms_core_product_id_change($plan->bundle . '-' . $plan->pid, $plan->bundle . '-' . $plan->sku);
    $plan->recurring_schedule = array(
      'total_occurrences' => $plan->total_occurrences,
      'main_amount' => $plan->main_amount,
      'main_length' => $plan->main_length,
      'main_unit' => $plan->main_unit,
      'has_trial' => ($plan->trial_length) ? TRUE : FALSE,
      'trial_amount' => $plan->trial_amount,
      'trial_length' => $plan->trial_length,
      'trial_unit' => $plan->trial_unit,
      'fixed_date' => 0,
      'fixed_date_discount' => 0,
      'fixed_date_type' => '',
      'fixed_date_string' => '',
    );

    // Add the email templates.
    if ($plan->main_length) {
      $plan->signup_mail_subject = ms_core_variable_get('ms_paypublish_payment_subject', '', $plan);
      $plan->signup_mail_body = ms_core_variable_get('ms_paypublish_payment_body', '', $plan);
    }
    else {
      $plan->signup_mail_subject = ms_core_variable_get('ms_paypublish_no_expire_subject', '', $plan);
      $plan->signup_mail_body = ms_core_variable_get('ms_paypublish_no_expire_body', '', $plan);
    }
    $plan->eot_mail_subject = ms_core_variable_get('ms_paypublish_expire_subject', '', $plan);
    $plan->eot_mail_body = ms_core_variable_get('ms_paypublish_expire_body', '', $plan);
    $plan->cancel_mail_subject = ms_core_variable_get('ms_paypublish_cancel_subject', '', $plan);
    $plan->cancel_mail_body = ms_core_variable_get('ms_paypublish_cancel_body', '', $plan);
    $plan->modify_mail_subject = '';
    $plan->modify_mail_body = '';
    $plan->expiring_mail_subject = ms_core_variable_get('ms_paypublish_expiring_subject', '', $plan);
    $plan->expiring_mail_body = ms_core_variable_get('ms_paypublish_expiring_body', '', $plan);
    $plan->expiring_mail_days = ms_core_variable_get('ms_paypublish_expiring_days', 3, $plan);

    // Add the custom emails to the data object.
    $plan->data['emails']['approval']['subject'] = _ms_paypublish_migrate_tokens(ms_core_variable_get('ms_paypublish_approval_subject', '', $plan));
    $plan->data['emails']['approval']['body'] = _ms_paypublish_migrate_tokens(ms_core_variable_get('ms_paypublish_approval_body', '', $plan));
    $plan->data['emails']['denial']['subject'] = _ms_paypublish_migrate_tokens(ms_core_variable_get('ms_paypublish_denial_subject', '', $plan));
    $plan->data['emails']['denial']['body'] = _ms_paypublish_migrate_tokens(ms_core_variable_get('ms_paypublish_denial_body', '', $plan));

    // Insert into the ms_products_plans database.
    db_insert('ms_products_plans')
      ->fields(
        array(
          'sku' => $plan->sku,
          'bundle' => $plan->bundle,
          'uid' => $plan->uid,
          'name' => $plan->name,
          'cart_type' => $plan->cart_type,
          'description' => '',
          'signup_mail_subject' => _ms_paypublish_migrate_tokens($plan->signup_mail_subject),
          'signup_mail_body' => _ms_paypublish_migrate_tokens($plan->signup_mail_body),
          'eot_mail_subject' => _ms_paypublish_migrate_tokens($plan->eot_mail_subject),
          'eot_mail_body' => _ms_paypublish_migrate_tokens($plan->eot_mail_body),
          'cancel_mail_subject' => _ms_paypublish_migrate_tokens($plan->cancel_mail_subject),
          'cancel_mail_body' => _ms_paypublish_migrate_tokens($plan->cancel_mail_body),
          'modify_mail_subject' => _ms_paypublish_migrate_tokens($plan->modify_mail_subject),
          'modify_mail_body' => _ms_paypublish_migrate_tokens($plan->modify_mail_body),
          'expiring_mail_subject' => _ms_paypublish_migrate_tokens($plan->expiring_mail_subject),
          'expiring_mail_body' => _ms_paypublish_migrate_tokens($plan->expiring_mail_body),
          'expiring_mail_days' => $plan->expiring_mail_days,
          'weight' => $plan->weight,
          'recurring_schedule' => serialize($plan->recurring_schedule),
          'modify_options' => serialize(array()),
          'allow_roles' => serialize(array()),
          'deny_roles' => serialize(array()),
          'expire_when' => 'eot',
          'data' => serialize($plan->data),
        )
      )
      ->execute();

    // Also save the plan options.
    $expiration = ms_products_get_expiration_date($plan->sku, 0);
    if ($plan->offer_sticky) {
      $option = array(
        'sku' => $plan->sku,
        'name' => 'sticky',
        'title' => t('Make sticky'),
        'description' => t('Make your content sticky so that it will stay at the top of lists.'),
        'optional' => TRUE,
        'default_value' => FALSE,
        'amount' => $plan->sticky_amount,
        'expiration' => $expiration,
      );
      db_insert('ms_products_plan_options')
        ->fields($option)
        ->execute();
    }
    if ($plan->offer_promote) {
      $option = array(
        'sku' => $plan->sku,
        'name' => 'promote',
        'title' => t('Promote content'),
        'description' => t('Promote your content to the front page.'),
        'optional' => TRUE,
        'default_value' => FALSE,
        'amount' => $plan->promote_amount,
        'expiration' => $expiration,
      );
      db_insert('ms_products_plan_options')
        ->fields($option)
        ->execute();
    }

    // Migrate translation strings.
    if (module_exists('i18n_string')) {
      $local_result = db_select('locales_source', 'ls')
        ->fields('ls')
        ->condition('textgroup', 'ms_paypublish_plan')
        ->execute();
      foreach ($local_result as $source) {
        // Update the tokens for these strings.
        $local_target_result = db_select('locales_target', 'lt')
          ->fields('lt')
          ->condition('lid', $source->lid)
          ->execute();
        foreach ($local_target_result as $target) {
          db_update('locales_target')
            ->fields(array(
              'translation' => _ms_paypublish_migrate_tokens($target->translation),
            ))
            ->condition('lid', $target->lid)
            ->condition('language', $target->language)
            ->execute();
        }
      }
      module_load_install('i18n_string');

      i18n_string_install_update_context('ms_paypublish_plan:plan:' . $plan->pid . ':*', 'ms_products_plan:plan:' . $plan->sku . ':*');
    }
  }

  // Now we move over the purchases.
  $result = db_query("SELECT * FROM {ms_paypublish_nodes}");
  foreach ($result as $record) {
    if (isset($skus[$record->pid])) {
      $pid = db_insert('ms_products_purchases')
        ->fields(array(
          'oid' => $record->oid,
          'uid' => $record->uid,
          'sku' => $skus[$record->pid],
          'bundle' => 'ms_paypublish',
          'status' => _ms_paypublish_migrate_status($record->status),
          'expiration' => $record->expiration_date,
          'start_date' => $record->start_date,
          'current_payments' => $record->current_payments,
          'max_payments' => $record->max_payments,
          'data' => serialize(array()),
        ))
        ->execute();

      // Also save the purchase fields.
      ms_products_set_purchase_field('ms_paypublish', $pid, 'nid', $record->nid);

      // Also save the purchase options.
      if ($record->is_sticky) {
        $option_info = array(
          'pid' => $pid,
          'name' => 'sticky',
          'status' => 'active',
          'expiration' => $record->sticky_expiration,
        );
        db_insert('ms_products_purchase_options')
          ->fields($option_info)
          ->execute();
      }
      if ($record->is_promoted) {
        $option_info = array(
          'pid' => $pid,
          'name' => 'promote',
          'status' => 'active',
          'expiration' => $record->promote_expiration,
        );
        db_insert('ms_products_purchase_options')
          ->fields($option_info)
          ->execute();
      }
    }
  }

  //db_drop_table('ms_paypublish_plans');
  //db_drop_table('ms_paypublish_nodes');

  // Migrate permissions.
  _ms_paypublish_migrate_insert_permission(2, 'purchase ms_paypublish products');
  _ms_paypublish_migrate_insert_permission(2, 'have multiple ms_paypublish purchases');


  _ms_paypublish_migrate_permission('administer pay to publish plans', 'administer ms_paypublish plans');
  _ms_paypublish_migrate_permission('administer pay to publish nodes', 'administer ms_paypublish purchases');
  _ms_paypublish_migrate_permission('view own pay to publish nodes', 'view own ms_paypublish purchases');
  _ms_paypublish_migrate_permission('renew own pay to publish nodes', 'renew own ms_paypublish purchases');

  // Migrate existing rules using the database.
  if (module_exists('rules')) {
    // It is too hard to migrate rules like this because of dependencies. They
    // will just need to be migrated manually.
    //_ms_paypublish_migrate_rules($skus);
  }

  // Clear the fields cache.
  field_cache_clear();
  field_associate_fields('ms_paypublish');

  // Change the content type variables to fields.
  if (!field_info_field('field_ms_paypublish_plan')) {
    $field = array(
      'field_name' => 'field_ms_paypublish_plan',
      'type' => 'ms_paypublish_plan',
      'settings' => array(
        'allowed_plans' => array(),
      ),
    );
    field_create_field($field);

    $instance = array(
      'field_name' => 'field_ms_paypublish_plan',
      'entity_type' => 'node',
      'label' => t('Publishing Plan'),
      'bundle' => '',
      'description' => t("Select a plan to use for publishing."),
      'required' => !variable_get('ms_paypublish_show_save_option', TRUE),
      'default_value' => array(array(
        'sku' => 0,
        'sticky' => 0,
        'promote' => 0,
      )),
      'widget' => array(
        'type' => 'ms_paypublish_plan_widget',
        'weight' => 99,
        'settings' => array(
          'allowed_plans' => array(),
        ),
      ),
      'display' => array(
        'default' => array(
          'type' => 'ms_paypublish_plan_info',
          'weight' => 99,
        ),
      ),
    );

    $content_types = node_type_get_types();
    foreach ($content_types as $type => $info) {
      $plans = variable_get('ms_paypublish_plan_' . $type, array());
      $allowed = array();
      foreach ($plans as $plan_id) {
        $allowed[$skus[$plan_id]] = $skus[$plan_id];
      }

      if (!empty($allowed)) {
        $instance['bundle'] = $type;
        $instance['default_value'][0]['sku'] = key($allowed);
        $instance['widget']['settings']['allowed_plans'] = $allowed;
        field_create_instance($instance);
      }
    }

    // Clear all carts in case they have old product data.
    ms_core_clear_carts();
  }

  return t('Successfully migrated plans and records to use the MS Products API.');
}

/**
 * Implements hook_update_dependencies().
 */
function ms_paypublish_update_dependencies() {
  $dependencies['ms_paypublish'][7602] = array(
    'ms_products' => 7307,
  );
  return $dependencies;
}
