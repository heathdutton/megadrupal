<?php

/**
 * @file
 * Module that allows users to Pay to Publish content.
 *
 * Original author: Leighton Whiting - Released under GENERAL PUBLIC LICENSE 
 * Current maintenance by multiple MoneySuite users.
 * Re: new initiative: https://www.drupal.org/node/2315653
 */

require_once('ms_paypublish.field.inc');

/**
 * Implements hook_help().
 * @TODO set URL for moneysuite tutorials once they exist
 */
function ms_paypublish_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/help#ms_paypublish":
      $output = '<p>' .  t("Let Users Pay to Publish Content. For tutorials, <a href='@url'>click here</a>",
        array('@url' => url(''))) . '</p>';
      break;
  }
  return $output;
}

/**
 * Implements hook_permission().
 */
function ms_paypublish_permission() {
  $perms = array();

  foreach (array_keys(node_type_get_types()) as $type) {
    $perms['publish ' . $type . ' for free'] = array(
      'title' => t('Publish %type for free', array('%type' => $type)),
      'description' => t('Allows the user to publish content of this type for free'),
      'restrict access' => FALSE,
    );
  }

  return $perms;
}

/**
 * Implements hook_menu().
 */
function ms_paypublish_menu() {
  $items = array();
  $items['admin/content/ms_paypublish_approval'] = array(
    'title' => 'Approval Queue',
    'page callback' => 'ms_paypublish_show_approval_queue',
    'access arguments' => array('administer ms_paypublish plans'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/content/ms_paypublish_approval/publish/%'] = array(
    'title' => 'Publish Content',
    'page callback' => 'ms_paypublish_approval_queue_publish',
    'page arguments' => array(4),
    'access arguments' => array('administer ms_paypublish plans'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/content/ms_paypublish_approval/deny/%'] = array(
    'title' => 'Deny Content',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_paypublish_deny_content_form', 4),
    'access arguments' => array('administer ms_paypublish plans'),
    'type' => MENU_CALLBACK,
  );
  $items['node/%node/ms_paypublish'] = array(
    'title' => 'Publishing Options',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_paypublish_publish_node_form', 1),
    'access callback' => 'ms_paypublish_tab_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
  );
  $items['admin/moneysuite/ms_paypublish'] = array(
    'title' => 'Pay to Publish',
    'description' => 'Set the various Pay to Publish Settings here',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_paypublish_admin'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
   );

  return $items;
}

/**
 * Access callback: Checks if the user has access to the Pay to Publish tab on a node page.
 *
 * @param object $node
 *   The node object.
 */
function ms_paypublish_tab_access($node) {
  global $user;
  return user_access('renew own ms_paypublish purchases') && $node->uid == $user->uid;
}

/**
 * Implements hook_ms_core_overrides().
 */
function ms_paypublish_ms_core_overrides() {
  return array(
    'ms_paypublish' => array(
      'title' => t('MS Pay to Publish'),
      'form' => 'ms_paypublish_admin',
    ),
  );
}

/**
 * Form constructor for the Admin Settings Form.
 *
 * @see system_settings_form()
 * @ingroup forms
 */
function ms_paypublish_admin() {
  $form['ms_paypublish_info'] = array(
    '#value' => '<p>' . t('Manage your payment plans in the !link',
      array('!link' => l('Pay to Publish Plans Manager', 'admin/structure/ms_products/ms_paypublish'))) .'</p>',
  );

  $form['main'] = array(
    '#type' => 'fieldset',
    '#title' => t('Main Settings'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['notices'] = array(
    '#type' => 'fieldset',
    '#title' => t('Notices'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['main']['ms_paypublish_show_plans_node_form'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show Payment Plans on the Node Creation Form?'),
    '#default_value' => variable_get('ms_paypublish_show_plans_node_form', FALSE),
    '#description' => t('This will display the payment plan options on the node creation form so that users can go straight to checkout once they have entered the title and body.'),
    '#required' => FALSE,
  );
  $form['main']['ms_paypublish_hide_plans_single'] = array(
    '#type' => 'checkbox',
    '#title' => t('Hide Plans Options if there is only 1 available?'),
    '#default_value' => variable_get('ms_paypublish_hide_plans_single', FALSE),
    '#description' => t('This will hide the plans fieldset when creating a node if there is only one option.'),
    '#required' => FALSE,
  );
  $form['main']['ms_paypublish_go_checkout'] = array(
    '#type' => 'checkbox',
    '#title' => t('Go Straight to Checkout?'),
    '#default_value' => variable_get('ms_paypublish_go_checkout', FALSE),
    '#description' => t('Check this to have the user go straight to the checkout
      page once they select a plan. Otherwise, they will be redirected to the shopping cart.'),
    '#required' => FALSE,
  );
  $form['main']['ms_paypublish_require_approval'] = array(
    '#type' => 'checkbox',
    '#title' => t('Require Admin Approval Before Content is Published?'),
    '#default_value' => variable_get('ms_paypublish_require_approval', FALSE),
    '#description' => t('This will put content that has been paid for in an admin approval queue before it is published.'),
    '#required' => FALSE,
    '#ms_override' => TRUE,
  );
  $form['main']['ms_paypublish_product_name'] = array(
    '#type' => 'select',
    '#title' => t('Product Name'),
    '#options' => array(
      'plan_name' => t('Plan Name'),
      'node_title' => t('Node Title'),
       ),
    '#description' => t("What will be used for the product name when paying to publish nodes?"),
    '#default_value' => variable_get('ms_paypublish_product_name', 'node_title'),
    '#required' => TRUE,
  );

  $form['main']['ms_paypublish_form_weight'] = array(
    '#type' => 'textfield',
    '#title' => t('Payment Plans Form Weight'),
    '#default_value' => variable_get('ms_paypublish_form_weight', 50),
    '#description' => t('Change this to place the Payment Plans form element wherever you want on the Node Creation page. The higher the number, the lower it will be on the form. You may also specify negative values.'),
    '#required' => FALSE,
  );
  $form['main']['ms_paypublish_show_plan_price'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show Plan Price?'),
    '#default_value' => variable_get('ms_paypublish_show_plan_price', TRUE),
    '#description' => t('This will be placed in between the Plan Name and Description on the Node Creation and Purchase Pages'),
    '#required' => FALSE,
  );
  $form['notices']['ms_paypublish_publish_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Not Yet Published Text'),
    '#default_value' => variable_get('ms_paypublish_publish_text', t('This content has not been published yet. To publish, please click here: !link')),
    '#description' => t('This is the text the user will see after they save the content but before it is published. You may use the !link variable to represent the clickable Publish link. Leave blank for no message.'),
    '#required' => FALSE,
  );
  $form['notices']['ms_paypublish_not_published_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Not Published or Expired Text'),
    '#default_value' => variable_get('ms_paypublish_not_published_text', t('This content is not published. To publish, please click here: !link')),
    '#description' => t('This is the text the user will see when they view their node that is currently not publish. It may have expired. You may use the !link variable to represent the clickable Publish link. Leave blank for no message.'),
    '#required' => FALSE,
  );
  $form['notices']['ms_paypublish_published_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Published Text'),
    '#default_value' => variable_get('ms_paypublish_published_text', t('This content will expire in !days days. To Promote / Extend, please click here: !link')),
    '#description' => t('This is the text the user will see when they view their node that is currently published. You may use the !link variable to represent the clickable Publish link, and the !days variable to represent how many days left until expiration. Leave blank for no message.'),
    '#required' => FALSE,
  );
  $form['notices']['ms_paypublish_approval_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Approval Queue Text'),
    '#default_value' => variable_get('ms_paypublish_approval_text', t('This content is Awaiting Admin Approval. It will be published shortly.')),
    '#description' => t('The text the user will see when they view their node that is in the admin approval queue. Leave blank for no message.'),
    '#required' => FALSE,
  );
  $form['notices']['ms_paypublish_sticky_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Sticky Option Text'),
    '#default_value' => variable_get('ms_paypublish_sticky_text', t('Make this content sticky for an additional !amount each term.')),
    '#description' => t('The Sticky Option text. You may use the !amount token to show the additional amount.'),
    '#required' => FALSE,
  );
  $form['notices']['ms_paypublish_promote_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Promote Option Text'),
    '#default_value' => variable_get('ms_paypublish_promote_text', t('Promote this content to the front page for an additional !amount each term.')),
    '#description' => t('The Promote Option text. You may use the !amount token to show the additional amount.'),
    '#required' => FALSE,
  );

  return system_settings_form($form);
}

/**
 * Implements hook_node_presave().
 */
function ms_paypublish_node_presave($node) {
  if (ms_paypublish_is_active($node)) {
    if (!empty($node->nid) AND $purchase = ms_products_load_purchase_by_field('ms_paypublish', 'nid', $node->nid)) {
      // If there is an active pp_node record, then we don't have to
      // unpublish the node.
    }
    else {
      // Since this is a new node, unpublish the node if it isn't already.
      if ($node->status) {
        $node->status = NODE_NOT_PUBLISHED;
      }
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function ms_paypublish_node_delete($node) {
  if ($purchase = ms_products_load_purchase_by_field('ms_paypublish', 'nid', $node->nid)) {
    ms_products_delete_purchase($purchase->id);
  }
}

/**
 * Checks if pay to publish is active on the node.
 *
 * This checks if the ms_paypublish_plan field is attached to the content type,
 * and if the user doesn't have permission to bypass the plan selection.
 *
 * @param object $node
 *   The node object.
 * @param object $account
 *   (optional) The user account to use for checking. Defaults to NULL which is
 *   the currently logged in user.
 *
 * @return bool
 *   TRUE if Pay to Publish is active on the node, FALSE otherwise.
 */
function ms_paypublish_is_active($node, $account = NULL) {
  if (!user_access('publish ' . $node->type . ' for free', $account) AND !user_access('administer nodes', $account)) {
    $fields = field_info_instances('node', $node->type);
    foreach ($fields as $field) {
      // Only take action if this node has the ms_paypublish_plan field.
      if ($field['widget']['type'] == 'ms_paypublish_plan_widget') {
        return TRUE;
      }
    }
  }

  return FALSE;
}

/**
 * Inserts a new node record.
 *
 * @param object $node
 *   The node object.
 * @param int $uid
 *   The user id.
 * @param int $sku
 *   The plan id.
 *
 * @return object
 *   The new pay to publish node record.
 *
 * @ingroup ms_paypublish_api
 */
function ms_paypublish_insert_node($node, $uid, $sku) {
  // Make sure that there isn't already a record first.
  if ($purchase = ms_products_load_purchase_by_field('ms_paypublish', 'nid', $node->nid)) {
    return $purchase;
  }
  else {
    ms_core_log('ms_paypublish', 'Inserting a new node record: %title',
      array('%title' => $node->title));

    $purchase = new MsProductsPurchase('ms_paypublish');
    $purchase->start_date = REQUEST_TIME;
    $purchase->uid = $uid;
    $purchase->sku = $sku;
    $purchase->status = 'expired';
    $purchase->save();

    // Save the nid field.
    ms_products_set_purchase_field('ms_paypublish', $purchase->id, 'nid', $node->nid);

    return $purchase;
  }
}

/**
 * Implements hook_field_attach_form().
 */
function ms_paypublish_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {
  if ($entity_type == 'node') {
    $bundle = $entity->type;
    // Check if the user must pay to publish.
    if (!user_access('publish ' . $bundle . ' for free') AND !user_access('administer nodes')) {
      $plans = ms_paypublish_get_plans_by_node_type($bundle);
      if (!empty($plans)) {
        $plan_fields = ms_paypublish_get_plan_fields($bundle);

        foreach ($plan_fields['blocked'] as $field_name => $non_supported_skus) {
          // Show which plans support this field.
          $plan_names = array();
          if (!empty($plan_fields['supported'][$field_name])) {
            foreach ($plan_fields['supported'][$field_name] as $sku) {
              $plan = $plans[$sku];
              $plan_names[] = $plan->name;
            }
          }
          $class = array('ms_paypublish_conditional_field', 'ms_paypublish_conditional_field_' . $field_name);
          foreach ($non_supported_skus as $sku) {
            $class[] = 'ms_paypublish_field_blur_when_' . $sku;
          }
          $classes = implode(' ', $class);
          $field_title = isset($form_state['field'][$field_name]['und']['instance']['label']) ? $form_state['field'][$field_name]['und']['instance']['label'] : $field_name;
          $form[$field_name]['#prefix'] = "<div class='$classes'><div class='ms_paypublish_conditional_field_inner'>";
          $form[$field_name]['#suffix'] = "</div><div class='ms_paypublish_field_supported_plans'>"
            . t("The %field_name field is only available with the following Publishing Plans: @plans",
              array('%field_name' => $field_title, '@plans' => implode(', ', $plan_names)))
            . "</div></div>";
        }
      }
    }
  }
}

/**
 * Implements hook_field_attach_view_alter().
 */
function ms_paypublish_field_attach_view_alter(&$output, $context) {
  if ($context['entity_type'] == 'node' AND !empty($context['entity']->nid)) {
    if ($purchase = ms_products_load_purchase_by_field('ms_paypublish', 'nid', $context['entity']->nid)) {
      if (isset($purchase->sku) && $plan = ms_products_plan_load($purchase->sku)) {
        $allowed_fields = array_filter($plan->allowed_fields);
        if (!empty($allowed_fields)) {
          $plan_fields = ms_paypublish_get_plan_fields($context['entity']->type);
          // Hide the fields that aren't supported by the active plan.
          foreach ($plan_fields['blocked'] as $field_name => $blocked_skus) {
            if (isset($output[$field_name]) AND in_array($purchase->sku, $blocked_skus)) {
              $output[$field_name]['#access'] = FALSE;
            }
          }
        }
      }
    }
  }
}

/**
 * Returns the full plans that are attached to a certain content type.
 *
 * @param string $type
 *   The content type.
 *
 * @return array
 *   The plans that are attached to the content type.
 *
 * @ingroup ms_paypublish_api
 */
function ms_paypublish_get_plans_by_node_type($type) {
  $fields = field_info_instances('node', $type);
  $plans = array();
  foreach ($fields as $field) {
    // Check if the field is the correct type.
    if ($field['widget']['module'] == 'ms_paypublish') {
      $skus = !empty($field['widget']['settings']['allowed_plans']) ? array_filter($field['widget']['settings']['allowed_plans']) : array();
      foreach ($skus as $sku) {
        if ($plan = ms_products_plan_load($sku)) {
          $plans[$sku] = $plan;
        }
      }
    }
  }

  return $plans;
}

/**
 * Returns the blocked and supported fields for different plans.
 *
 * @param string $type
 *   The content type.
 *
 * @return array
 *   An array of blocked and supported fields for this content type.
 *
 * @ingroup ms_paypublish_api
 */
function ms_paypublish_get_plan_fields($type) {
  $plans = ms_paypublish_get_plans_by_node_type($type);
  $fields = field_info_fields();

  $plan_fields = array();
  $plan_fields['blocked'] = array();
  $plan_fields['supported'] = array();
  foreach ($fields as $field) {
    if ($field['type'] == 'ms_paypublish_plan') {
      // Skip our own field type of ms_paypublish_plan.
      continue;
    }
    if (isset($field['bundles']['node']) AND in_array($type, $field['bundles']['node'])) {
      foreach ($plans as $plan) {
        $allowed_fields = array_filter($plan->allowed_fields);
        if (empty($allowed_fields) || (isset($allowed_fields[$field['field_name']]) AND $allowed_fields[$field['field_name']])) {
          // This field is supported.
          if (!isset($plan_fields['supported'][$field['field_name']])) {
            $plan_fields['supported'][$field['field_name']] = array();
          }
          $plan_fields['supported'][$field['field_name']][] = $plan->sku;
        }
        else {
          if (!isset($plan_fields['blocked'][$field['field_name']])) {
            $plan_fields['blocked'][$field['field_name']] = array();
          }
          // This field is not supported by this plan, let's mark it as a
          // conditional field.
          $plan_fields['blocked'][$field['field_name']][] = $plan->sku;
        }
      }
    }
  }

  return $plan_fields;
}

/**
 * Form constructor for the form that shows the pay to publish options.
 *
 * @param int $nid
 *   The node id to show the plans for.
 *
 * @see ms_paypublish_publish_node_form_submit()
 * @ingroup forms
 */

function ms_paypublish_publish_node_form($form, &$form_state, $node) {
  $purchase = ms_products_load_purchase_by_field('ms_paypublish', 'nid', $node->nid);

  // Show the current status of the node.
  $form['status'] = array(
    '#type' => 'item',
    '#markup' => ms_paypublish_get_node_info_table($node->nid),
  );

  $form['ms_paypublish'] = array(
    '#type' => 'fieldset',
    '#title' => t('Promote / Extend Options'),
    '#description' => t('Please select the plan to use to promote and/or extend this content.'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );

  $plans = ms_paypublish_get_plans_by_node_type($node->type);
  if (!empty($plans)) {
    $options = array();
    foreach ($plans as $sku => $plan) {
      if ($plan->show_add) {
        $options[$sku] = ms_products_get_plan_option_text($plan);
      }
    }

    $form['ms_paypublish'] = ms_products_plans_element($form_state, t('Select publishing plan'), '', $options, 'ms_paypublish', TRUE, $purchase && isset($purchase->sku) ? $purchase->sku : NULL);

    $form['nid'] = array(
      '#type' => 'value',
      '#value' => $node->nid,
    );

    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Continue'),
    );
  }
  else {
    $form['notice'] = array(
      '#type' => 'item',
      '#markup' => t('There are no available publishing plans.'),
    );
  }

  return $form;
}

/**
 * Form submission handler for ms_paypublish_publish_node_form().
 *
 * Adds the product to the cart.
 */
function ms_paypublish_publish_node_form_submit($form, &$form_state) {
  $v = $form_state['values'];
  $node = node_load($v['nid']);
  $plan = ms_products_plan_load($v['ms_paypublish']['sku']);
  global $user;

  if ($plan->sku) {
    $purchase = ms_paypublish_insert_node($node, $user->uid, $plan->sku);
    $data = array(
      'option_defaults' => !empty($v['ms_paypublish']['options']) ? $v['ms_paypublish']['options'] : array(),
      'renew_id' => $purchase->id,
      'product_title' => $node->title,
    );
    ms_products_add_product_to_cart($plan, $data);
    drupal_goto('ms/checkout');
  }
}

/**
 * Generates an info table for a pay to publish node.
 *
 * @param int $nid
 *   The node id.
 *
 * @return string
 *   The info table for a node.
 */
function ms_paypublish_get_node_info_table($nid) {
  global $user;
  $headers = array();

  $rows = array();
  $attr = array('id' => 'ms-paypublish-node-info-table');
  $node = node_load($nid);
  if ($purchase = ms_products_load_purchase_by_field('ms_paypublish', 'nid', $nid)) {
    $rows = array(
      array('data' => array(t("Title"), l($node->title, 'node/' . $node->nid)), 'class' => array('ms_paypublish_title')),
      array('data' => array(t("Created"), (isset($purchase->start_date) ? format_date($purchase->start_date, 'short') : t('N/A'))), 'class' => array('ms_paypublish_start_date')),
      array('data' => array(t("Status"), (isset($purchase->status) ? ms_products_get_purchase_status_text($purchase->status) : "")), 'class' => array('ms_paypublish_status')),
      array('data' => array(t("Expiration"), (isset($purchase->expiration) ? format_date($purchase->expiration, 'short') : t('N/A'))), 'class' => array('ms_paypublish_expiration')),
    );

    // Show the sticky and promote settings if applicable.
    if (!empty($purchase->options['promote']) && $purchase->options['promote']['status'] == 'active') {
      $rows[] = array('data' => array(t("Promoted Expiration"), ($purchase->options['promote']['expiration'] ? format_date($purchase->options['promote']['expiration'], 'short') : t('N/A'))), 'class' => array('ms_paypublish_promote'));
    }
    if (!empty($purchase->options['sticky']) && $purchase->options['sticky']['status'] == 'active') {
      $rows[] = array('data' => array(t("Sticky Expiration"), ($purchase->options['sticky']['expiration'] ? format_date($purchase->options['sticky']['expiration'], 'short') : t('N/A'))), 'class' => array('ms_paypublish_sticky'));
    }
  }

  $build = array();
  $build['content'] = array(
    'ms_paypublish_node_info_table' => array(
      '#markup' => theme('table', array('header' => $headers, 'rows' => $rows, 'attributes' => $attr)),
    ),
  );

  return drupal_render($build);
}

/**
 * Implements hook_ms_products_purchases_query_alter().
 */
function ms_paypublish_ms_products_purchases_query_alter(&$query, $bundle) {
  switch ($bundle) {
    case 'ms_paypublish': // FIXME - Add some checks here so it doesn't fail...
      // Add the join for the node table and the filter if the title is set.
      $query->leftjoin('field_data_ms_paypublish_nid', 'pf', 'pf.entity_id = d.id');
      $query->leftjoin('node', 'n', 'pf.ms_paypublish_nid_target_id = n.nid');
      $query->fields('n', array('title'));

      // Add the filter if it is set.
      if (isset($_GET['title'])) {
        $title = $_GET['title'];
        $query->condition('n.title', '%' . $title . '%', 'LIKE');
      }
      break;
  }
}

/**
 * Implements hook_ms_products_purchases_filters_alter().
 */
function ms_paypublish_ms_products_purchases_filters_alter(&$filters, $bundle) {
  switch ($bundle) {
    case 'ms_paypublish':
      $filters['title'] = array(
        '#title' => t('Title'),
        '#default_value' => isset($_GET['title']) ? $_GET['title'] : '',
      );
      break;
  }
}

/**
 * Implements hook_ms_products_api_purchase_edit_form_validate().
 */
function ms_paypublish_ms_products_api_purchase_edit_form_validate($form_state, $bundle) {
  switch ($bundle) {
    case 'ms_paypublish':
      $v = $form_state['values'];
      $nid = $v['ms_paypublish_nid'][LANGUAGE_NONE][0]['target_id'];
      if (!$node = node_load($nid)) {
        form_set_error('nid', t('Error: Please enter a valid node id.'));
      }
      // Check that a node record doesn't already exist.
      $purchase = ms_products_purchase_load($v['id']);
      if (!empty($purchase->fields['nid']->nid)) {
        if ($purchase->fields['nid']->nid != $nid AND ms_products_load_purchase_by_field('ms_paypublish', 'nid', $nid)) {
          form_set_error('nid', t('Error: A Pay to Publish Node Record already exists for that node.'));
        }
        $existing = ms_products_load_purchase_by_field('ms_paypublish', 'nid', $nid);
        if ($existing && $existing->id != $purchase->id) {
          form_set_error('nid', t('Error: A Pay to Publish Node Record already exists for that node.'));
        }
      }
      break;
  }
}

/**
 * Implements hook_ms_products_api_purchase_presave().
 */
function ms_paypublish_ms_products_api_purchase_presave($data, $purchase, $plan) {
  switch ($plan->bundle) {
    case 'ms_paypublish':
      if (!empty($data['ms_paypublish_nid'][LANGUAGE_NONE][0]['target_id'])) {
        $node = node_load($data['ms_paypublish_nid'][LANGUAGE_NONE][0]['target_id']);
      }
      else if (!empty($purchase->fields['nid'])) {
        $node = $purchase->fields['nid'];
      }

      if ($node) {
        // Unpublish/Publish the Node if needed.
        if (in_array($purchase->status, array('active', 'completed', 'cancelled', 'expiring'))) {
          if ($node->status == NODE_NOT_PUBLISHED) {
            ms_paypublish_update_node_property($node, 'status', NODE_PUBLISHED);
            drupal_set_message(t("'%title' has been Published.", array('%title' => $node->title)));
          }
        }
        else {
          if ($node->status == NODE_PUBLISHED) {
            ms_paypublish_update_node_property($node, 'status', NODE_NOT_PUBLISHED);
            drupal_set_message(t("'%title' has been Unpublished.", array('%title' => $node->title)));
          }
        }
      }
      break;
  }
}

/**
 * Implements hook_ms_products_purchase_actions().
 */
function ms_paypublish_ms_products_purchase_actions($account, $purchase, $plan) {
  return ms_paypublish_get_node_actions($purchase);
}

/**
 * Gets the actions that are available for a node.
 *
 * @param object $purchase
 *   The pay to publish node object.
 *
 * @return array
 *   An array of actions that can be taken for the node.
 */
function ms_paypublish_get_node_actions($purchase) {
  $actions = array();
  if (!empty($purchase->fields['nid']) && $node = $purchase->fields['nid']) {
    $plan = ms_products_plan_load($purchase->sku);

    if (node_access('update', $node)) {
      $actions[] = l(t('Edit'), 'node/' . $node->nid . '/edit');
    }

    switch ($purchase->status) {
      case 'expired':
        if (user_access('renew own ms_paypublish purchases')) {
          $actions[] = l(t('Publish'), 'node/' . $node->nid . '/ms_paypublish');
        }
        break;

      case 'active':
        if ($plan AND $plan->cart_type == 'recurring') {
          if ($order = ms_core_order_load($purchase->oid) AND $cancel_url = ms_core_get_cancel_url($order)) {
            $actions[] = l(t('Cancel'), $cancel_url, array('query' => drupal_get_destination()));
          }
        }
        elseif ($purchase->expiration) {
          // Don't show the Promote / Extend link if the user doesn't have
          // permission.
          if (user_access('renew own ms_paypublish purchases')) {
            $actions[] = l(t('Promote / Extend'), 'node/' . $node->nid . '/ms_paypublish');
          }
        }
        break;

      case 'cancelled':
      case 'expiring':
        if (user_access('renew own ms_paypublish purchases')) {
          $actions[] = l(t('Promote / Extend'), 'node/' . $node->nid . '/ms_paypublish');
        }
        break;
    }
  }

  return $actions;
}

/**
 * Implements hook_ms_products_purchases_headers().
 */
function ms_paypublish_ms_products_purchases_headers($bundle) {
  switch ($bundle) {
    case 'ms_paypublish':
      // Add the Title column.
      return array(
        array(
          'data' => t('Title'),
          'class' => array('ms_products_purchase_node_title_header'),
          'field' => 'n.title',
        ),
      );
      break;
  }
}

/**
 * Implements hook_ms_products_purchases_row().
 */
function ms_paypublish_ms_products_purchases_row($bundle, $purchase) {
  switch ($bundle) {
    case 'ms_paypublish':
      if (isset($purchase->fields['nid'])) {
        $data = l($purchase->fields['nid']->title, 'node/' . $purchase->fields['nid']->nid);
      }
      else {
        $data = t('N/A');
      }
      // Add the Title column.
      return array(
        array(
          'data' => $data,
          'class' => array('ms_products_purchase_node_title'),
        ),
      );
      break;
  }
}

/**
 * Gets the expiration string for a node record.
 *
 * @param object $purchase
 *   The pay to publish node record.
 *
 * @return string
 *   The expiration string for the node record.
 *
 * @ingroup ms_paypublish_api
 */
function ms_paypublish_get_expires_string($purchase) {
  if ($purchase->expiration) {
    $expires = $purchase->expiration - REQUEST_TIME;
    if ($expires > 0) {
      return t('Expires in @interval', array('@interval' => format_interval($expires)));
    }
    else {
      return t('Expired @interval ago', array('@interval' => format_interval($expires)));
    }
  }
  else {
    switch ($purchase->status) {
      case 'expired':
        return t('Expired');

      default:
        return t('N/A');
    }
  }
}

/**
 * Publishes a Node from the approval queue.
 *
 * @param int $nid
 *   The node id.
 */
function ms_paypublish_approval_queue_publish($nid) {
  // Get Node and Author.
  $node = node_load($nid);
  $account = user_load($node->uid);
  $purchase = ms_products_load_purchase_by_field('ms_paypublish', 'nid', $node->nid);

  // Get the correct status for non-expiring nodes.
  $status = ($purchase->expiration) ? 'active' : 'completed';

  ms_products_change_purchase_status($purchase->id, $status);

  // Publish the node.
  ms_paypublish_update_node_property($node, 'status', NODE_PUBLISHED);

  // Update the expiration date.
  ms_products_change_purchase_expiration($purchase->id, ms_products_get_expiration_date($purchase->sku));
  if (!empty($purchase->options['promote']) && $purchase->options['promote']['status'] == 'active') {
    ms_paypublish_update_node_property($node, 'promote', NODE_PROMOTED);
    ms_products_change_purchase_option_expiration($purchase->id, 'promote', ms_products_get_expiration_date($purchase->sku));
  }
  if (!empty($node->make_sticky)) {
    ms_paypublish_update_node_property($node, 'sticky', NODE_STICKY);
    ms_products_change_purchase_option_expiration($purchase->id, 'sticky', ms_products_get_expiration_date($purchase->sku));
  }

  // Set the message.
  drupal_set_message(t('The node %title has been published.', array('%title' => $node->title)));

  $e_vars = array(
    'id' => $purchase->id,
    'tokens' => array(
      'node' => $node->nid,
    ),
  );

  // Send an email to the user.
  $plan = ms_products_plan_load($purchase->sku);
  if (!empty($plan->data['emails']['approval']['body'])) {
    ms_products_send_mail('ms_paypublish', 'approval', $account->mail, user_preferred_language($account), $e_vars);
  }

  // Redirect to the Approval Queue Page.
  drupal_goto('admin/content/ms_paypublish_approval');
}

/**
 * Form constructor for the deny content form.
 *
 * @param int $nid
 *   The node id.
 *
 * @see ms_paypublish_deny_content_form_submit()
 * @see ms_paypublish_menu()
 * @ingroup forms
 */
function ms_paypublish_deny_content_form($form, &$form_state, $nid) {
  $node = node_load($nid);
  $account = user_load($node->uid);
  $purchase = ms_products_load_purchase_by_field('ms_paypublish', 'nid', $node->nid);
  $order = ms_core_order_load($purchase->oid);

  $form['main'] = array(
    '#type' => 'fieldset',
    '#title' => t('Deny Node'),
    '#weight' => -49,
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );

  $form['main']['info'] = array(
    '#type' => 'fieldset',
    '#title' => t('Info'),
    '#weight' => -49,
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#description' => t("Remember to refund the payment if applicable."),
  );

  $form['main']['info']['user'] = array(
    '#type' => 'item',
    '#title' => t('User'),
    '#markup' => l($account->name, 'user/' . $account->uid),
  );
  $form['main']['info']['title'] = array(
    '#type' => 'item',
    '#title' => t('Title'),
    '#markup' => l($node->title, 'node/' . $node->nid),
  );
  if ($order) {
    $form['main']['info']['order'] = array(
      '#type' => 'item',
      '#title' => t('Order', array(), array('context' => 'ms_core')),
      '#markup' => l($order->title, 'admin/moneysuite/orders/view/' . $order->order_key),
    );
  }

  $form['main']['nid'] = array(
    '#type' => 'value',
    '#value' => $nid,
  );

  $form['main']['notes'] = array(
    '#type' => 'textarea',
    '#title' => t('Notes'),
    '#description' => t("Enter an optional message explaining why the content was denied."),
    '#default_value' => '',
    '#required' => FALSE,
  );
  $form['main']['delete_node'] = array(
    '#type' => 'checkbox',
    '#title' => t('Delete Node?'),
    '#return_value' => 1,
    '#default_value' => FALSE,
    '#description' => t("Check this to delete the node after sending the denial message."),
  );
  $form['main']['send_email'] = array(
    '#type' => 'checkbox',
    '#title' => t('Send Email?'),
    '#return_value' => 1,
    '#default_value' => TRUE,
    '#description' => t("Check this to send the denial email to the user."),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );

  return $form;
}

/**
 * Form submission handler for ms_paypublish_deny_content_form().
 */
function ms_paypublish_deny_content_form_submit($form, &$form_state) {
  $form_values = (object) $form_state['values'];

  $node = node_load($form_values->nid);
  $account = user_load($node->uid);
  $purchase = ms_products_load_purchase_by_field('ms_paypublish', 'nid', $node->nid);

  // Set the status to denied.
  $status = 'approval_denied';

  // Update the Status.
  ms_products_change_purchase_status($purchase->id, $status);

  // Set the message.
  drupal_set_message(t('The node %title has been denied.', array('%title' => $node->title)));

  // Delete the node if needed.
  if ($form_values->delete_node) {
    node_delete($node->nid);
    drupal_set_message(t("Deleted %title", array('%title' => $node->title)));
  }

  $e_vars = array(
    'id' => $purchase->id,
    'tokens' => array(
      'node' => $node->nid,
    ),
    'purchase_tokens' => array(
      'denial_notes' => $form_values->notes,
    ),
  );
  $plan = ms_products_plan_load($purchase->sku);
  // Send an email to the user.
  if (!empty($plan->data['emails']['denial']['body']) && $form_values->send_email) {
    ms_products_send_mail('ms_paypublish', 'denial', $account->mail, user_preferred_language($account), $e_vars);
  }

  // Redirect.
  $form_state['redirect'] = 'admin/content/ms_paypublish_approval';
}

/**
 * Page callback: Shows the Approval Queue.
 *
 * @see ms_paypublish_menu()
 */
function ms_paypublish_show_approval_queue() {
  $output = t("Nodes Awaiting Approval") . ":<br />";
  $headers = array(t('Title'), t('Plan'), t('Status'), t('Expires'), t('Edit'), t('Publish'));
  $result = db_select('ms_products_purchases')
        ->fields('ms_products_purchases')
        ->condition('status', array('approval_queue', 'approval_denied'), 'IN')
        ->execute();
  $rows = array();
  $attr = array();
  foreach ($result as $row) {
    $purchase = ms_products_purchase_load($row->id);
    $node = $purchase->fields['nid'];
    $plan = ms_products_plan_load($purchase->sku);
    $expireString = ms_paypublish_get_expires_string($purchase);
    $actions = array(
      l(t('Publish'), 'admin/content/ms_paypublish_approval/publish/' . $node->nid),
      l(t('Deny'), 'admin/content/ms_paypublish_approval/deny/' . $node->nid),
    );
    $rows[] = array(
      l($node->title, 'node/' . $node->nid),
      $plan ? ms_products_translate_plan($plan, 'name') : t('N/A'),
      ms_products_get_purchase_status_text($row->status),
      $expireString,
      l(t('Edit'), 'node/' . $node->nid . '/edit'),
      implode(' | ', $actions),

    );
  }
  $output .= theme('table', array('header' => $headers, 'rows' => $rows, 'attributes' => $attr, 'empty' => t('Nothing awaiting approval.')));
  return $output;
}

/**
 * Implements hook_theme().
 */
function ms_paypublish_theme($existing, $type, $theme, $path) {
  return array(
    'ms_paypublish_plan_field' => array(
      'variables' => array(
        'node' => NULL,
        'plan' => NULL,
        'pp_node' => NULL,
        'is_sticky' => NULL,
        'sticky_expiration' => NULL,
        'is_promoted' => NULL,
        'promoted_expiration' => NULL,
        'is_published' => NULL,
        'published_expiration' => NULL,
        'status' => NULL,
        'order' => NULL,
        'actions' => NULL,
      ),
      'path' => $path . '/theme',
      'template' => 'ms-paypublish-plan-field-view',
    ),
  );
}

/**
 * Changes a property of a node, such as sticky or promote.
 *
 * @param object $node
 *   The node object.
 * @param string $property
 *   The property to update.
 * @param mixed $value
 *   The new value of the property.
 */
function ms_paypublish_update_node_property($node, $property, $value) {
  $node->$property = $value;
  node_save($node);
  /**
  db_update('node')
    ->fields(array(
      $property => $value,
    ))
    ->condition('nid', $node->nid)
    ->execute();
  db_update('node_revision')
    ->fields(array(
      $property => $value,
    ))
    ->condition('vid', $node->vid)
    ->execute();
  */
}

/**
 * Implements hook_ms_products_option_purchased().
 */
function ms_paypublish_ms_products_option_purchased($bundle, $option_name, $purchase, $purchase_option) {
  switch ($bundle) {
    case 'ms_paypublish':
      switch ($option_name) {
        case 'sticky':
          // Make the node sticky.
          if ($node = $purchase->fields['nid']) {
            ms_paypublish_update_node_property($node, 'sticky', NODE_STICKY);
          }
          break;

        case 'promote':
          // Make the node promoted.
          if ($node = $purchase->fields['nid']) {
            ms_paypublish_update_node_property($node, 'promote', NODE_PROMOTED);
          }
          break;
      }
      break;
  }
}

/**
 * Implements hook_ms_products_option_expired().
 */
function ms_paypublish_ms_products_option_expired($bundle, $option_name, $purchase, $purchase_option) {
  switch ($bundle) {
    case 'ms_paypublish':
      switch ($option_name) {
        case 'sticky':
          // Make the node not sticky.
          if ($node = $purchase->fields['nid']) {
            ms_paypublish_update_node_property($node, 'sticky', NODE_NOT_STICKY);
          }
          break;

        case 'promote':
          // Make the node not promoted.
          if ($node = $purchase->fields['nid']) {
            ms_paypublish_update_node_property($node, 'promote', NODE_NOT_PROMOTED);
          }
          break;
      }
      break;
  }
}

/**
 * Implements hook_mail().
 */
function ms_paypublish_mail($key, &$message, $vars) {
  // Get the email templates.
  switch ($key) {
    case 'approval_queue':
      $message['subject'] = t('New Post Awaiting Approval');
      $message['body'][] = t('A new post has been placed in the Admin Approval Queue. To view and approve it, click here: !link',
        array('!link' => url('admin/content/ms_paypublish_approval', array('absolute' => TRUE))));
      break;
  }
}

/**
 * Gets nice strings for units if they are plural or not.
 *
 * @param string $unit
 *   The unit.
 * @param bool $plural
 *   (optional) Whether or not it should be plural. Defaults to FALSE.
 *
 * @return string
 *   The nice string.
 */
function ms_paypublish_get_unit_string($unit, $plural = FALSE) {
  switch ($unit) {
    case 'D':
      ($plural) ? $return = t('days') : $return = t('day');
      break;
    case 'W':
      ($plural) ? $return = t('weeks') : $return = t('weeks');
      break;
    case 'M':
      ($plural) ? $return = t('months') : $return = t('months');
      break;
    case 'Y':
      ($plural) ? $return = t('years') : $return = t('years');
      break;
    default:
      $return = $unit;
  }

  return $return;
}

/**
 * Implements hook_ms_products_api_plan_form_validate().
 */
function ms_paypublish_ms_products_api_plan_form_validate($form_state, $bundle) {
  switch ($bundle) {
    case 'ms_paypublish':
      $v = $form_state['values'];
      // Validate Subscription Period Length.
      if (isset($v['expires_days'])) {
        if (!is_numeric($v['expires_days'])) {
          form_set_error('expires_days', t('You must use only numbers for the expiry.'));
        }
        elseif (is_numeric($v['expires_days']) && $v['expires_days'] < 0) {
          form_set_error('expires_days', t('Expiry cannot be negative.'));
        }
      }
      break;
  }
}

/**
 * Implements hook_ms_products_signup().
 */
function ms_paypublish_ms_products_signup($account, MsProductsPurchase $purchase, MsProductsPlan $plan) {
  switch ($plan->bundle) {
    case 'ms_paypublish':
      if ($node = $purchase->fields['nid']) {
        // Make sure that the user is marked as the node author if there is no
        // author.
        if (!$node->uid) {
          ms_core_log('ms_paypublish', 'Setting the author of %title to %name',
            array('%title' => $node->title, '%name' => $account->name));
          $node->uid = $account->uid;
          node_save($node);
        }

        // Also assign the user to the purchase if it isn't already.
        if ($purchase->uid != $account->uid) {
          $purchase->uid = $account->uid;
          $purchase->save();
        }

        // If admin approval is required, send the email to the admin.
        if (ms_core_variable_get('ms_paypublish_require_approval', FALSE, $plan)) {
          ms_products_change_purchase_status($purchase->id, 'approval_queue');
          drupal_mail('ms_paypublish', 'approval_queue', variable_get('ms_paypublish_admin_email', variable_get('site_mail', '')), language_default());

          drupal_set_message(t('The content will be published as soon as it is approved by a moderator.'));
        }
        else {
          // Otherwise we can go ahead and publish the node.
          ms_paypublish_update_node_property($node, 'status', NODE_PUBLISHED);
        }

        module_invoke_all('ms_paypublish_purchase', $account, $purchase, $plan);

        if (module_exists('rules')) {
          rules_invoke_event('ms_paypublish_event_paypublish_purchase', $account, $node, $purchase, $plan);
        }
      }
      break;
  }
}

/**
 * Implements hook_ms_products_expiring().
 */
function ms_paypublish_ms_products_expiring($account, $purchase, $plan) {
  switch ($plan->bundle) {
    case 'ms_paypublish':
      if ($node = $purchase->fields['nid']) {
        // Unpublish the node.
        ms_paypublish_update_node_property($node, 'status', NODE_NOT_PUBLISHED);

        module_invoke_all('ms_paypublish_expiring', $account, $purchase, $plan);

        if (module_exists('rules')) {
          rules_invoke_event('ms_paypublish_event_paypublish_expiring', $account, $node, $purchase, $plan);
        }
      }
      break;
  }
}

/**
 * Implements hook_ms_products_cancel().
 */
function ms_paypublish_ms_products_cancel($account, $purchase, $plan) {
  switch ($plan->bundle) {
    case 'ms_paypublish':
      if ($node = $purchase->fields['nid']) {
        module_invoke_all('ms_paypublish_cancel', $account, $purchase, $plan);

        if (module_exists('rules')) {
          rules_invoke_event('ms_paypublish_event_paypublish_cancel', $account, $node, $purchase, $plan);
        }
      }
      break;
  }
}

/**
 * Implements hook_ms_products_payment().
 */
function ms_paypublish_ms_products_payment($account, $purchase, $plan) {
  switch ($plan->bundle) {
    case 'ms_paypublish':
      if ($node = $purchase->fields['nid']) {
        module_invoke_all('ms_paypublish_payment', $account, $purchase, $plan);
        if (module_exists('rules')) {
          rules_invoke_event('ms_paypublish_event_paypublish_payment', $account, $node, $purchase, $plan);
        }
      }
      break;
  }
}

/**
 * Getter callback for allowed_fields property.
 */
function ms_paypublish_allowed_fields_getter_callback($item, array $options, $name, $type, $info) {
  if (!empty($item->data['allowed_fields'])) {
    return implode(', ', array_filter($item->data['allowed_fields']));
  }
  return '';
}

/**
 * Getter callback for publish_uri property.
 */
function ms_paypublish_publish_uri_getter_callback($item, array $options, $name, $type, $info) {
  return array('path' => 'ms_paypublish/publish/' . $item->fields['nid']->nid, 'options' => array());
}

/**
 * Loads a node object for a purchase.
 */
function ms_paypublish_load_node_from_purchase($purchase) {
  return $purchase->fields['nid'];
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function ms_paypublish_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ms_products' && $plugin == 'product_types') {
    return 'plugins/product_types';
  }
}

