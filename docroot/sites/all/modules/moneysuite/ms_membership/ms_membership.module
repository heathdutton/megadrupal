<?php

/**
 * @file
 * Membership Suite allows you to quickly and easily sell access to Drupal
 * Roles in the form of 'Memberships' by creating 'Membership Plans', which
 * define the terms of payment for memberships.
 *
 * TODO - Call the proper user hooks when changing roles.
 *
 * Original author: Leighton Whiting - Released under GENERAL PUBLIC LICENSE
 * Current maintenance by multiple MoneySuite users.
 * Re: new initiative: https://www.drupal.org/node/2315653 
 */

/**
 * Implements hook_help().
 */
function ms_membership_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/help#ms_membership":
      $output = '<p>' . t("Support for a fully-fledged Paid Membership System, including user registration integration for paid signup.") . '</p>';
      break;
  }
  return $output;
}

/**
 * Implements hook_menu().
 */
function ms_membership_menu() {
  $items = array();

  $items['membership/list'] = array(
    'title' => 'Purchase your membership',
    'page callback' => 'ms_membership_list_memberships',
    'access arguments' => array('purchase ms_membership products'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'ms_membership.pages.inc',
  );
  $items['membership/purchase/%'] = array(
    'page callback' => 'ms_membership_purchase_membership',
    'page arguments' => array(2),
    'access arguments' => array('purchase ms_membership products'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/moneysuite/ms_membership'] = array(
    'title' => 'Membership Suite',
    'description' => 'Set the various Membership Suite Settings here',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_membership_admin'),
    'access arguments' => array('administer moneysuite settings'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/people/rebuild_memberships'] = array(
    'title' => 'Rebuild Memberships',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_membership_rebuild_members_confirm'),
    'access arguments' => array('administer ms_membership purchases'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/people/members'] = array(
    'title' => 'View Members',
    'page callback' => 'ms_membership_show_members',
    'access arguments' => array('administer ms_membership purchases'),
    'type' => MENU_LOCAL_TASK,
    'weight' => '-1'
  );

  return $items;
}

/**
 * Implements hook_ms_core_overrides().
 */
function ms_membership_ms_core_overrides() {
  return array(
    'ms_membership' => array(
      'title' => t('Membership Suite'),
      'form' => 'ms_membership_admin',
    ),
  );
}

/**
 * Form constructor for the admin settings form.
 */
function ms_membership_admin($form, &$form_state) {
  $form['ms_membership_info'] = array(
    '#value' => '<p>' . t('Manage your membership plans in the !link', array('!link' => l(t('Membership Plans Manager'), 'admin/structure/ms_membership/list'))) . '</p>',
  );
  $form['main'] = array(
    '#type' => 'fieldset',
    '#title' => t('Main Settings'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['registration'] = array(
    '#type' => 'fieldset',
    '#title' => t('Registration Settings'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['email'] = array(
    '#type' => 'fieldset',
    '#title' => t('Email Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['integration'] = array(
    '#type' => 'fieldset',
    '#title' => t('3rd Party Modules Integration'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['registration']['ms_membership_force_signup'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enforce Paid Membership at Registration?'),
    '#default_value' => variable_get('ms_membership_force_signup', FALSE),
    '#description' => t('This option will require all new registering users to purchase a membership plan when registering.
    Due to the nature of the registration process in drupal, other modules which modify the registration process may not
    be fully compatible with MS Membership Suite.'),
    '#required' => FALSE,
  );
  $form['registration']['ms_membership_force_login'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enforce Membership at Login?'),
    '#default_value' => variable_get('ms_membership_force_login', FALSE),
    '#description' => t('This option will require all registered users 
      to have an active membership or purchase a membership plan after 
      login before they can access any content. If rules module is active 
      a rule will be created after cron run.'),
    '#required' => FALSE,
    '#states' => array(
      'visible' => array(
        ':input[name="ms_membership_force_signup"]' => array('checked' => TRUE),
      ),
    ),

  );
  $form['registration']['ms_membership_show_free_special_urls'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show free option on Special Registration URLs?'),
    '#default_value' => variable_get('ms_membership_show_free_special_urls', FALSE),
    '#description' => t("If this is checked and the Enforce Paid Membership option
      above is not checked, then the Free option will also show on the Special
      Registration Pages."),
    '#required' => FALSE,
  );
  $form['registration']['ms_membership_registration_free_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Free Option Name'),
    '#default_value' => variable_get('ms_membership_registration_free_name', t('None')),
    '#description' => t('If paid membership is not enforced, what should the free option be called?'),
    '#required' => TRUE,
  );
  $form['registration']['ms_membership_registration_free_description'] = array(
    '#type' => 'textarea',
    '#title' => t('Free Option Description'),
    '#default_value' => variable_get('ms_membership_registration_free_description', ''),
    '#description' => t('If paid membership is not enforced, what should the
      description for the free option be? Leave blank for no description.'),
    '#required' => FALSE,
  );
  $form['integration']['ms_membership_fix_profile'] = array(
    '#type' => 'checkbox',
    '#title' => t('Fix Fields?'),
    '#default_value' => variable_get('ms_membership_fix_profile', FALSE),
    '#description' => t('Due to a bug in Drupal, the Profile fields and other Fields
      modules which modify the registration form sometimes break the registration
      process. If you experience this, turn this on and see if it helps.'),
    '#required' => FALSE,
  );
  $form['registration']['ms_membership_skip_registration'] = array(
    '#type' => 'checkbox',
    '#title' => t('Skip Registration?'),
    '#default_value' => variable_get('ms_membership_skip_registration', FALSE),
    '#description' => t('This option will allow the purchase links to bypass the regular registration page, and go straight to checkout when anonymous users click them.
      They will still have to enter their new user information on the checkout page.
      Use this with settings in MS Core to combine the registration and checkout steps into one.'),
    '#required' => FALSE,
    '#ms_override' => TRUE,
  );
  $form['registration']['ms_membership_bypass_checkout_free'] = array(
    '#type' => 'checkbox',
    '#title' => t('Skip Checkout for Free Membership Plans?'),
    '#default_value' => variable_get('ms_membership_bypass_checkout_free', TRUE),
    '#description' => t('This option will allow users who select a Free Membership Plan on the Registration Page to bypass the checkout process.'),
    '#required' => FALSE,
  );
  $form['main']['ms_membership_show_membership_price'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show Membership Plan Price?'),
    '#default_value' => variable_get('ms_membership_show_membership_price', TRUE),
    '#description' => t('This will be placed in between the Membership Plan Name and Description on the Registration Page and Purchase Pages'),
    '#required' => FALSE,
  );
  $form['registration']['ms_membership_registration_form_weight'] = array(
    '#type' => 'textfield',
    '#title' => t('Membership Plans Fieldset Weight on the Registration Page'),
    '#default_value' => variable_get('ms_membership_registration_form_weight', 0),
    '#description' => t('Change this to place the Membership Plans form element wherever you want on the Registration page. The higher the number, the lower it will be on the form. You may also specify negative values.'),
    '#required' => FALSE,
  );
  $form['registration']['ms_membership_user_create_time'] = array(
    '#type' => 'select',
    '#title' => t('When to create user'),
    '#options' => array(
      'after_payment' => t("After Payment is Received"),
      'registration' => t("During Registration"),
      'registration_block' => t("During Registration but Block User"),
    ),
    '#default_value' => variable_get('ms_membership_user_create_time', 'after_payment'),
    '#description' => t('Determines when the user account is created. If you are
      experiencing problems with user creation, set this to During Registration.'),
    '#required' => TRUE,
  );
  $form['main']['ms_membership_refund_remove'] = array(
    '#type' => 'checkbox',
    '#title' => t('Remove Role for Refunds?'),
    '#default_value' => variable_get('ms_membership_refund_remove', FALSE),
    '#description' => t('Check this to have roles associated with non-recurring memberships be removed if that membership is refunded.'),
    '#required' => FALSE,
    '#ms_override' => TRUE,
  );
  $form['email']['ms_membership_notify_email_sender_address'] = array(
    '#type' => 'textfield',
    '#title' => t('Notification Email Sender Address'),
    '#description' => t('Enter an email address below to be used as the From: address when sending notification emails.'),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_membership_notify_email_sender_address', ''),
  );
  $form['email']['ms_membership_notify_emails'] = array(
    '#type' => 'textarea',
    '#title' => t('Notification Email Addresses'),
    '#description' => t("Enter a comma separated list of email addresses which should receive the emails below."),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_membership_notify_emails', ''),
  );
  $form['email']['ms_membership_new_membership_mail_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('New Membership Signup Admin Email Subject'),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_membership_new_membership_mail_subject', t("New Signup: [user:name]!")),
  );
  $form['email']['ms_membership_new_membership_mail_body'] = array(
    '#type' => 'textarea',
    '#title' => t('New Membership Signup Admin Email Body'),
    '#description' => t("Leave blank to not send an email."),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_membership_new_membership_mail_body', t("A new membership has been purchased!
    User: [user:name]
    Name: [ms_core_order:customerName]
    Membership Plan: [ms_products_plan:name]
    Amount: [ms_core_payment:paymentAmount]
    Date: [date:long]")),
  );

  $form['email']['ms_membership_cancelled_membership_mail_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Cancelled Membership Admin Email Subject'),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_membership_cancelled_membership_mail_subject', t("Membership Cancelled: [user:name]!")),
  );
  $form['email']['ms_membership_cancelled_membership_mail_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Cancelled Membership Admin Email Body'),
    '#description' => t("Leave blank to not send an email."),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_membership_cancelled_membership_mail_body', t("A membership has been cancelled.
    User: [user:name]
    Name: [ms_core_order:customerName]
    Membership Plan: [ms_products_plan:name]
    Date: [date:long]")),
  );
  $form['email']['ms_membership_cancelled_membership_mail_token_help']['tokens'] = array(
    '#theme' => 'token_tree',
    '#token_types' => array('ms_products_purchase', 'ms_products_plan', 'ms_membership_plan', 'ms_core_order', 'ms_core_payment', 'user'),
    '#dialog' => TRUE,
  );

  return system_settings_form($form);
}

/**
 * Implements hook_user_presave().
 *
 * Cleans up the registration artifacts.
 */
function ms_membership_user_presave(&$edit, $account, $category) {
  unset($edit['ms_membership_submit']);
}

/**
 * Implements hook_user_insert().
 *
 * This is used to provide support for registering with Free Memberships
 * without needing to go to checkout.
 */
function ms_membership_user_insert(&$edit, $account, $category) {
  // Check if there is a free membership requested.
  if (isset($edit['ms_membership_free_id'])) {
    $plan = ms_products_plan_load($edit['ms_membership_free_id']);

    $roles = user_roles(TRUE);
    // Add the roles to the array.
    foreach (array_filter($plan->start_grant_roles) as $rid) {
      $account->roles[$rid] = $roles[$rid];
    }
    // Remove roles from the array.
    foreach (array_filter($plan->start_remove_roles) as $rid) {
      unset($account->roles[$rid]);
    }

    // Create the order.
    $order = ms_core_order_new('cart', $account->uid);

    // Add the Product.
    $product = ms_core_new_product($plan->name, 'ms_membership', $plan->sku, $plan->recurring_schedule['main_amount'], 'cart');

    $order = ms_core_add_order_product($order, $product);

    $order->data['skip_registration'] = TRUE;

    // Set the gateway and status.
    $order->status = 'completed';

    ms_core_order_save($order);

    //Insert into Memberships database.
    $status = 'completed';
    $expiration = ms_products_get_expiration_date($plan->sku);
    $purchase = ms_products_insert_purchase($order->oid, $account->uid, $plan->sku, $expiration, $status, 0, 1, 1);

    // Invoke hook_ms_membership_signup to let other modules act on a new
    // membership signup.
    module_invoke_all('ms_membership_signup', $account, $purchase, $plan);

    $payment_vars = array(
      'id' => $purchase->id,
    );

    // Send email to the user.
    ms_products_send_mail('ms_products', 'signup', $account->mail, user_preferred_language($account), $payment_vars);

    // Send Email to Admin.
    if (variable_get('ms_membership_new_membership_mail_body', '')) {
      ms_membership_prepare_mail('ms_membership', 'admin_signup', variable_get('site_mail', ''), language_default(), $payment_vars);
    }
  }
}

/**
 * Implements hook_user_load().
 */
function ms_membership_user_load($users) {
  foreach ($users as $uid => $account) {
    // Load the memberships that a user has into the user object for use later.
    if (function_exists('ms_products_get_user_purchases')) {
      $users[$uid]->ms_memberships = ms_products_get_user_purchases($uid, 'ms_membership');
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for user_register_form().
 *
 * Inserts the Membership choices into the Registration Form.
 */
function ms_membership_form_user_register_form_alter(&$form, &$form_state) {
  // Make sure we don't show plans for admin created accounts.
  if (!user_access('administer users') AND (arg(0) != 'admin')) {
    $plans = ms_products_get_plans('ms_membership');
    $plan_options = array();
    $special_url_plan = FALSE;
    foreach ($plans as $plan) {
      $register_arg = FALSE;

      if (!empty($plan->disabled) AND $plan->disabled) {
        continue;
      }

      // Filter the Membership Plans for Special URLS.
      if ($register_arg = arg(2)) {
        $register_urls = explode(',', $plan->register_urls);

        // Check if it is a special page for 1 membership.
        if ($register_arg == 'membership' AND $arg_plan = arg(3)) {
          if ($plan->sku != $arg_plan) {
            continue;
          }
        } elseif (arg(0) == 'user' AND !in_array($register_arg, $register_urls)) {
          continue;
        }

        $special_url_plan = TRUE;
      }

      // Provide support for Profile 2 Registration Path module
      // (http://drupal.org/project/profile2_regpath).
      if (module_exists('profile2_regpath') AND arg(0) != 'user' AND arg(1) == 'register') {
        $register_arg = arg(0);
        $register_urls = explode(',', $plan->register_urls);

        if (!in_array($register_arg, $register_urls)) {
          continue;
        }

        $special_url_plan = TRUE;
      }

      $allowed_roles = $plan->allow_roles;
      if (is_array($allowed_roles)) {
        $allowed_roles = array_filter($allowed_roles);
      }
      // If the allowed roles setting is on and the anonymous user is not
      // checked, then skip this one.
      if (!empty($allowed_roles) AND (!isset($allowed_roles[DRUPAL_ANONYMOUS_RID]) OR !$allowed_roles[DRUPAL_ANONYMOUS_RID])) {
        // Only show plans that are available to anonymous users.
        continue;
      }

      // Only show plans that are set to show on the User Registration Screen.
      if (!$plan->show_registration AND !$special_url_plan) {
        continue;
      }

      $denied_roles = $plan->deny_roles;
      if (is_array($denied_roles)) {
        $denied_roles = array_filter($denied_roles);
      }
      // If the allowed roles setting is on and the anonymous user is not
      // checked, then skip this one.
      if (!empty($denied_roles) AND isset($denied_roles[DRUPAL_ANONYMOUS_RID])) {
        // Only show plans that are not denied to anonymous users.
        continue;
      }

      $plan_options[$plan->sku] = ms_products_get_plan_option_text($plan);
    }
    if (!empty($plan_options)) {
      $options = array();

      if (!variable_get('ms_membership_force_signup', FALSE) AND (!$special_url_plan OR (variable_get('ms_membership_show_free_special_urls', FALSE) AND $special_url_plan))) {
        $options[0] = variable_get('ms_membership_registration_free_name', t('None'));
        if (variable_get('ms_membership_registration_free_description', '')) {
          $options[0] .= ' - ' . variable_get('ms_membership_registration_free_description', '');
        }
      }

      foreach ($plan_options as $sku => $name) {
        $options[$sku] = $name;
      }

      $form['ms_membership'] = ms_products_plans_element($form_state, t('Choose your Membership Level'), '', $options, 'ms_membership', variable_get('ms_membership_force_signup', FALSE));
      $form['ms_membership']['#title'] = t('Membership Level');
      $form['ms_membership']['#weight'] = variable_get('ms_membership_registration_form_weight', 0);

      if (variable_get('ms_membership_force_signup', FALSE) OR $special_url_plan) {
        $form['ms_membership']['sku']['#default_value'] = key($options);
      }

      // Don't hook it if the settings are set.
      if ((isset($form_state['values']['ms_membership_paid']) AND $form_state['values']['ms_membership_paid'] == TRUE) || !isset($form['ms_membership'])) {
        return;
      }

      // Clean up
      unset($form_state['values']['ms_membership_submit'], $form_state['values']['ms_membership']['sku'], $form_state['values']['ms_membership_paid']);

      // Store the submit handlers for later use.
      $form['ms_membership_submit'] = array(
        '#type' => 'value',
        '#value' => $form['#submit']
      );

      array_unshift($form['#submit'], 'ms_membership_register_form_free_submit');

      // Put our form submit handler first in the list.
      if (variable_get('ms_membership_user_create_time', 'after_payment') == 'after_payment') {
        array_unshift($form['#submit'], 'ms_membership_register_form_submit');
      } else {
        // Let's try putting the submit at the end of the array.
        $form['#submit'][] = 'ms_membership_register_form_after_submit';
      }
    } elseif (arg(0) == 'user' && arg(1) == 'register' AND isset($register_arg) AND $register_arg AND variable_get('ms_membership_force_signup', FALSE)) {
      // Block Access to the user.
      drupal_goto('user/register');
    }
  }
}

/**
 * Implements hook_user_login()
 *
 * Checks that a registered user has an active Membership or sends him to the product purchase page
 */
function ms_membership_user_login(&$edit, $account)
{
  // Unless there is already a redirection going, or the user is trying to reset his password, we redirect to $redirection.
  if (!isset($_POST['form_id']) || $_POST['form_id'] != 'user_pass_reset')
    if (variable_get('ms_membership_force_login', FALSE) &&
	count(ms_products_get_user_purchases($account->uid, 'ms_membership'))==0 &&
        $account->uid!=1)
    {
      $edit['redirect'] = '/membership/list';
      $_GET['destination'] = '/membership/list';
    }
}

/**
 * Define a rule to send authenticated users
 * to membership purchase page
 * whenever they have no active membership
 */
function ms_membership_default_rules_configuration() {
	$configs = array();
	if (variable_get('ms_membership_force_login', FALSE)) {
		$rule= '{ "ms_membership_enforce_membership" : {
    "LABEL" : "Enforce subscription",
    "PLUGIN" : "reaction rule",
    "OWNER" : "rules",
    "REQUIRES" : [ "rules", "php" ],
    "ON" : { "node_view" : [  ] },
    "IF" : [
      { "NOT user_has_role" : {
          "account" : [ "site:current-user" ],
          "roles" : { "value" : { "1" : "1" } }
        }
      },
      { "php_eval" : { "code" : "return [site:current-user:uid]\u003E1 and !in_array(arg(0),array(\u0022membership\u0022,\u0022ms\u0022,\u0022ms_core\u0022)) and count(ms_products_get_user_purchases([site:current-user:uid], \u0027ms_membership\u0027))==0;" } }
    ],
    "DO" : [
      { "redirect" : { "url" : "\u002Fmembership\u002Flist", "force" : "0" } }
    ]
  }
}';
	$configs['ms_membership_enforce_membership'] = rules_import($rule);
  }
  return $configs;
}

/**
 * Adds membership records to an array of users.
 *
 * @param array $accounts
 *   An array of accounts that should be acted on.
 * @param string $sku
 *   The membership plan id.
 */
function ms_membership_add_bulk_memberships($accounts, $sku) {
  if ($plan = ms_products_plan_load($sku)) {
    // Add the membership to the accounts.
    foreach ($accounts as $uid) {
      if ($account = user_load($uid)) {
        // Add the roles.
        ms_membership_change_roles($account->uid, $plan->start_grant_roles, $plan->start_remove_roles);

        //Insert into Memberships database.
        $status = 'completed';
        $expiration = ms_products_get_expiration_date($plan->sku);
        $purchase = ms_products_insert_purchase(0, $account->uid, $plan->sku, $expiration, $status, 0, 1, 1);

        // Invoke hook_ms_membership_signup to let other modules act on a new
        // membership signup.
        module_invoke_all('ms_membership_signup', $account, $purchase, $plan);

        drupal_set_message(t("Added @plan to <a href='@url'>@name</a>",
          array('@plan' => $plan->name, '@name' => $account->name, '@url' => url('user/' . $account->uid))));
      }
    }
  }
}

/**
 * Removes membership records from an array of users.
 *
 * @param array $accounts
 *   An array of accounts that should be acted on.
 * @param string $sku
 *   The membership plan id.
 */
function ms_membership_remove_bulk_memberships($accounts, $sku) {
  if ($plan = ms_products_plan_load($sku)) {
    // Remove the membership from the accounts.
    foreach ($accounts as $uid) {
      if ($account = user_load($uid)) {
        $purchases = ms_products_get_user_purchases($account->uid, NULL, $plan->sku);

        // Remove roles and disable all memberships that match the description.
        foreach ($purchases as $purchase) {
          if ($purchase->status != 'expired') {
            // Add and remove the appropriate roles at expiration.
            ms_membership_change_roles($account->uid, $plan->expire_grant_roles, $plan->expire_remove_roles);

            // Set the Membership to Inactive.
            ms_products_change_purchase_status($purchase->id, 'expired');

            drupal_set_message(t("Removed @plan from <a href='@url'>@name</a>",
              array('@plan' => $plan->name, '@name' => $account->name, '@url' => url('user/' . $account->uid))));
          }
        }
      }
    }
  }
}

/**
 * Implements hook_user_operations().
 */
function ms_membership_user_operations() {
  $operations = array();
  $plans = ms_products_get_plans_list('ms_membership');
  if (user_access('administer ms memberships') AND !empty($plans)) {
    foreach ($plans as $sku => $name) {
      $operations['ms_add_membership-' . $sku] = array(
        'label' => t('Add !name to selected users', array('!name' => $name)),
        'callback' => 'ms_membership_add_bulk_memberships',
        'callback arguments' => array($sku),
      );
    }
    foreach ($plans as $sku => $name) {
      $operations['ms_remove_membership-' . $sku] = array(
        'label' => t('Remove !name from selected users', array('!name' => $name)),
        'callback' => 'ms_membership_remove_bulk_memberships',
        'callback arguments' => array($sku),
      );
    }
  }
  return $operations;
}

/**
 * Implements hook_form_FORM_ID_alter() for user_admin_account().
 *
 * In the user bulk update form, separate out the membership operations
 * and group and relabel them under 'Add a membership' and 'Remove a membership'
 * optgroups.
 */
function ms_membership_form_user_admin_account_alter(&$form, $form_state, $form_id) {
  $options = $form['options']['operation']['#options'];
  $plans = ms_products_get_plans_list('ms_membership');
  $add_plans = array();
  $remove_plans = array();
  foreach ($options as $option => $label) {
    $operation_array = explode('-', $option);
    $operation = $operation_array[0];
    if ($operation == 'ms_add_membership') {
      $sku = $operation_array[1];
      $add_plans[$option] = $plans[$sku];
      unset($options[$option]);
    } elseif ($operation == 'ms_remove_membership') {
      $sku = $operation_array[1];
      $remove_plans[$option] = $plans[$sku];
      unset($options[$option]);
    }
  }
  if (count($add_plans)) {
    $form['options']['operation']['#options'] = $options + array(
        t('Add a membership to the selected users') => $add_plans,
        t('Remove a membership from the selected users') => $remove_plans,
      );
  }
}

/**
 * Form submission handler for user_register_form().
 *
 * Adds the free id if the plan is free.
 *
 * @see user_register_form()
 * @see ms_membership_form_user_register_form_alter()
 */
function ms_membership_register_form_free_submit($form, &$form_state) {
  if (!empty($form_state['values']['ms_membership']['sku']) AND $plan = ms_products_plan_load($form_state['values']['ms_membership']['sku'])) {
    if (variable_get('ms_membership_bypass_checkout_free', TRUE) AND $plan->recurring_schedule['main_amount'] == 0) {
      // Also check for plan options.
      if (!empty($form_state['values']['ms_membership']['options'])) {
        foreach ($form_state['values']['ms_membership']['options'] as $option_name => $active) {
          // If the option costs money and was selected, the plan isn't free.
          if (!empty($plan->plan_options[$option_name]->amount) && $plan->plan_options[$option_name]->amount > 0) {
            return;
          }
        }
      }
      $form_state['values']['ms_membership_free_id'] = $plan->sku;
      return;
    }
  }
}

/**
 * Form submission handler for user_register_form().
 *
 * This is triggered after the user has been created, after the other form
 * submission handlers have run.
 *
 * @see user_register_form()
 * @see ms_membership_form_user_register_form_alter()
 */
function ms_membership_register_form_after_submit($form, &$form_state) {
  drupal_get_messages();
  if ($plan = ms_products_plan_load($form_state['values']['ms_membership']['sku'])) {
    if (variable_get('ms_membership_bypass_checkout_free', TRUE) AND $plan->recurring_schedule['main_amount'] == 0) {
      $is_free = TRUE;
      // Also check for plan options.
      if (!empty($form_state['values']['ms_membership']['options'])) {
        foreach ($form_state['values']['ms_membership']['options'] as $option_name => $active) {
          // If the option costs money and was selected, the plan isn't free.
          if (!empty($plan->plan_options[$option_name]->amount) && $plan->plan_options[$option_name]->amount > 0) {
            $is_free = FALSE;
          }
        }
      }

      if ($is_free) {
        $form_state['values']['ms_membership_free_id'] = $plan->sku;
        return;
      }
    }

    // Create a new product and add it to the order.
    $product = ms_core_new_product($plan->name, 'ms_membership', $plan->sku, $plan->recurring_schedule['main_amount'], $plan->cart_type);

    // Set the Recurring Schedule Settings.
    $product->recurring_schedule = $plan->recurring_schedule;

    // Load the created user.
    $account = $form['#user'];

    // Block the user if requested.
    if (variable_get('ms_membership_user_create_time', 'after_payment') == 'registration_block') {
      $account->status = 0;
      user_save($account);
      // Logout.
      global $user;
      $user = user_load(0);
    }

    // Store the custom data.
    $product->data = $plan->data;
    $product->data['skip_registration'] = TRUE;
    $product->data['created_user_id'] = $account->uid;

    // Empty the cart first if enforce single is on.
    if (!user_access('have multiple ms_membership purchases')) {
      ms_core_empty_cart();
    }

    // Store the plan options.
    if (!empty($form_state['values']['ms_membership']['options']) && is_array($form_state['values']['ms_membership']['options'])) {
      $option_defaults = $form_state['values']['ms_membership']['options'];
      ms_products_add_plan_options($product, $plan, $option_defaults);
    }

    ms_core_add_cart_product($product, TRUE);

    ms_core_checkout();
    exit;
  }
}

/**
 * Form submission handler for user_register_form().
 *
 * This is called before the other form submission handlers to prevent them
 * from creating the user. The form state is saved in the database so it can
 * be ran after the user has paid.
 *
 * @see user_register_form()
 * @see ms_membership_form_user_register_form_alter()
 */
function ms_membership_register_form_submit($form, &$form_state) {
  if (!empty($form_state['values']['ms_membership']['sku']) AND $plan = ms_products_plan_load($form_state['values']['ms_membership']['sku'])) {
    if (variable_get('ms_membership_bypass_checkout_free', TRUE) AND $plan->recurring_schedule['main_amount'] == 0) {
      $is_free = TRUE;
      // Also check for plan options.
      if (!empty($form_state['values']['ms_membership']['options'])) {
        foreach ($form_state['values']['ms_membership']['options'] as $option_name => $active) {
          // If the option costs money and was selected, the plan isn't free.
          if (!empty($plan->plan_options[$option_name]->amount) && $plan->plan_options[$option_name]->amount > 0) {
            $is_free = FALSE;
          }
        }
      }

      if ($is_free) {
        $form_state['values']['ms_membership_free_id'] = $plan->sku;
        return;
      }
    }

    // Create a new product and add it to the order.
    $product = ms_core_new_product($plan->name, 'ms_membership', $plan->sku, $plan->recurring_schedule['main_amount'], $plan->cart_type);

    $product->recurring_schedule = $plan->recurring_schedule;

    // Store the custom data.
    $product->data = $plan->data;

    $new_form_state = array();
    $new_form_state['values'] = $form_state['values'];
    if (isset($form_state['field'])) {
      if (variable_get('ms_membership_fix_profile', TRUE)) {
        $new_form_state['field'] = $form_state['field'];
      }
      // Let's strip out un-needed things here so it will fit in the database.
      $profile2_fields = array();
      if (module_exists('profile2')) {
        foreach (profile2_get_types() as $type) {
          $profile_type = 'profile_' . $type->type;
          if (isset($form_state['field']['#parents'][$profile_type]['#fields']) AND is_array($form_state['field']['#parents'][$profile_type]['#fields'])) {
            foreach ($form_state['field']['#parents'][$profile_type]['#fields'] AS $key => $field) {
              // List fields need to be set so that it is LANGUAGE_NONE.
              if (isset($field[LANGUAGE_NONE]['field']['module'])) {
                $profile2_fields[$profile_type][$key] = $field[LANGUAGE_NONE]['field']['module'];
              }
            }
          }
        }
      }
      if (!empty($profile2_fields)) {
        $new_form_state['profile2_fields'] = $profile2_fields;
      }
    }

    $product->data['form'] = $new_form_state;
    $product->data['skip_registration'] = TRUE;

    // Empty the cart first if enforce single is on.
    if (!user_access('have multiple ms_membership purchases')) {
      ms_core_empty_cart();
    }

    // Store the plan options.
    if (!empty($form_state['values']['ms_membership']['options']) && is_array($form_state['values']['ms_membership']['options'])) {
      $option_defaults = $form_state['values']['ms_membership']['options'];
      ms_products_add_plan_options($product, $plan, $option_defaults);
    }

    ms_core_add_cart_product($product, TRUE);

    ms_core_checkout();
    exit;
  }
}

/**
 * Adds a role to a user.
 *
 * @param int $uid
 *   The user id.
 * @param int $rid
 *   The role id.
 *
 * @ingroup ms_membership_api
 */
function ms_membership_add_role($uid, $rid) {
  $account = user_load($uid, TRUE);
  if ($account && $rid && $account->uid) {
    if (!in_array($rid, array(DRUPAL_ANONYMOUS_RID, DRUPAL_AUTHENTICATED_RID))) {
      // Remove the role first just in case the user already has it for some
      // reason.
      ms_membership_remove_role($account->uid, $rid);
      db_insert('users_roles')
        ->fields(array(
          'uid' => $account->uid,
          'rid' => $rid,
        ))
        ->execute();
      $roles = user_roles(TRUE);
      ms_core_log('ms_membership', 'Added role !role to !user.',
        array('!role' => $roles[$rid], '!user' => l($account->name, 'user/' . $account->uid)));
    }
  }
}

/**
 * Removes a role from a user.
 *
 * @param int $uid
 *   The user id.
 * @param int $rid
 *   The role id.
 *
 * @ingroup ms_membership_api
 */
function ms_membership_remove_role($uid, $rid) {
  $account = user_load($uid);

  if ($account && $rid && $account->uid && isset($account->roles[$rid])) {
    if (!in_array($rid, array(DRUPAL_ANONYMOUS_RID, DRUPAL_AUTHENTICATED_RID))) {
      db_delete('users_roles')
        ->condition('uid', $account->uid)
        ->condition('rid', $rid)
        ->execute();

      $roles = user_roles(TRUE);
      ms_core_log('ms_membership', 'Removed role !role from !user.',
        array('!role' => $roles[$rid], '!user' => l($account->name, 'user/' . $account->uid)));
    }
  }
}

/**
 * Checks if a user should keep a role that is about to be removed.
 *
 * @param int $uid
 *   The user id.
 * @param int $rid
 *   The role id.
 *
 * @return bool
 *   TRUE if the role shouldn't be removed, FALSE if it should.
 */
function ms_membership_is_role_protected($uid, $rid) {
  $purchases = ms_products_get_user_purchases($uid, 'ms_membership');
  foreach ($purchases as $purchase) {
    if ($purchase->status != 'expired' AND $plan = ms_products_plan_load($purchase->sku) AND in_array($rid, $plan->start_grant_roles)) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Removes and adds roles.
 *
 * @param int $uid
 *   The user id.
 * @param array $add
 *   An array of roles that should be added to the user.
 * @param array $remove
 *   An array of roles that should be removed from the user.
 */
function ms_membership_change_roles($uid, $add = array(), $remove = array()) {
  // Add the Roles.
  if (is_array($add)) {
    foreach ($add as $rid) {
      if ($rid) {
        ms_membership_add_role($uid, $rid);
      }
    }
  }

  // Remove the Roles.
  if (is_array($remove)) {
    foreach ($remove as $rid) {
      // Check to see if the role is protected by another membership.
      if ($rid AND !ms_membership_is_role_protected($uid, $rid)) {
        ms_membership_remove_role($uid, $rid);
      }
    }
  }
}

/**
 * Gets the Role Name from the ID.
 *
 * @param int $rid
 *   The role id.
 *
 * @return string
 *   The role name.
 */
function ms_membership_get_role_name($rid) {
  $roles = user_roles();
  return $roles[$rid];
}

/**
 * Page callback: Adds a membership product to the cart.
 *
 * This will add the membership to the cart and redirect to the checkout page.
 * This is still here as an alias only.
 *
 * @param int $mpid
 *   The old style membership plan id.
 *
 * @see ms_membership_menu()
 */
function ms_membership_purchase_membership($mpid) {
  drupal_goto('ms_product/purchase/ms_membership_' . $mpid);
}

/**
 * Implements hook_ms_products_before_added_to_cart().
 */
function ms_membership_ms_products_before_added_to_cart($account, $plan) {
  // If not registered, go to the registration page for that plan.
  if (!ms_core_variable_get('ms_membership_skip_registration', FALSE, $plan) AND !$account->uid) {
    drupal_goto('user/register/membership/' . $plan->sku);
  }
}

/**
 * Form constructor for the rebuild memberships form.
 *
 * @see ms_membership_rebuild_members_confirm_submit()
 * @see confirm_form()
 * @ingroup forms
 */
function ms_membership_rebuild_members_confirm($form, &$form_state) {
  return confirm_form($form, t('Are you sure you want to rebuild the Memberships?'), 'admin/people', t('This will remove and add any roles that should have been removed or added to users based on their current memberships, by first removing roles from Expired Memberships, then adding roles from Active Memberships. This action cannot be undone.'), t('Rebuild Memberships'));
}

/**
 * Form submission handler for ms_membership_rebuild_members_confirm().
 */
function ms_membership_rebuild_members_confirm_submit($form, &$form_state) {
  ms_membership_rebuild_memberships();

  drupal_set_message(t('Successfully rebuilt the memberships. Please see the Recent Logs to see which roles were added or removed from which users. Note that if users have multiple memberships of the same type, their roles will be removed and then added just to be sure that they have the right ones.'));

  $form_state['redirect'] = 'admin/people';
}

/**
 * Rebuilds the memberships.
 */
function ms_membership_rebuild_memberships() {
  // First, we will get all of the expired or inactive memberships and remove
  // all of the roles that should have been removed, and add the roles that
  // should have been added.
  $plans = ms_products_get_plans('ms_membership');
  $purchases = ms_products_get_purchases('ms_membership', array('expired'));
  foreach ($purchases as $purchase) {
    $plan = $plans[$purchase->sku];
    ms_membership_change_roles($purchase->uid, $plan->expire_grant_roles, $plan->expire_remove_roles);
    if ($purchase->oid AND $order = ms_core_order_load($purchase->oid) AND $recurring_schedule = ms_core_load_recurring_schedule($order->oid)
      AND !empty($recurring_schedule->current_payments)
    ) {
      db_update('ms_products_purchases')
        ->fields(array(
          'current_payments' => $recurring_schedule->current_payments,
        ))
        ->condition('oid', $order->oid)
        ->execute();
    }
  }

  // Then, we will get all of the active memberships and remove all of the
  // roles that should have been removed, and add the roles that should have
  // been added.
  $purchases = ms_products_get_purchases('ms_membership', array('active', 'canceled', 'expiring', 'completed'));
  foreach ($purchases as $purchase) {
    $plan = $plans[$purchase->sku];
    ms_membership_change_roles($purchase->uid, $plan->start_grant_roles, $plan->start_remove_roles);
    if ($purchase->oid AND $order = ms_core_order_load($purchase->oid) AND $recurring_schedule = ms_core_load_recurring_schedule($order->oid)
      AND !empty($recurring_schedule->current_payments)
    ) {
      db_update('ms_products_purchases')
        ->fields(array(
          'current_payments' => $recurring_schedule->current_payments,
        ))
        ->condition('oid', $order->oid)
        ->execute();
    }
  }
}

/**
 * Page callback: Shows a listing of all users and their memberships.
 *
 * @see ms_membership_menu()
 */
function ms_membership_show_members() {
  drupal_set_title(t('Members'));
  $content = '';
  $build = array();
  $name = '';

  $headers = array(
    array('data' => t('Join Date'), 'class' => array('ms_mem_join_date_header'), 'field' => 'created', 'sort' => 'desc'),
    array('data' => t('User'), 'class' => array('ms_mem_user_header'), 'field' => 'name', 'sort' => 'desc'),
    array('data' => t('Membership(s)'), 'class' => array('ms_mem_name_header'), 'sort' => 'desc'),
  );

  drupal_add_library('system', 'ui.dialog');
  drupal_add_js('jQuery(document).ready(function(){jQuery("#dialog").dialog({ modal: true });});', 'inline');

  // Add JS.
  drupal_add_js(drupal_get_path('module', 'ms_core') . '/js/jqBubblePopup/jquery.bubblepopup.min.js');
  drupal_add_css(drupal_get_path('module', 'ms_core') . '/js/jqBubblePopup/jquery.BubblePopup.css');
  $theme_path = url(drupal_get_path('module', 'ms_core') . '/js/jqBubblePopup/jquerybubblepopup-theme');
  $js = "
(function ($) {
  $(document).ready(function() {

    $('.memName').each(function(index, element) {
      $(element).CreateBubblePopup({
        innerHtml:           $(element).parents('.memPlan').children('.memInfo').html(),
        themeName:           'green',
        themePath:           '$theme_path',
        manageMouseEvents:   false
      });
    });

    $('.memName').click(function() {
      var mem_name_button = $(this);
      mem_name_button.ShowBubblePopup();
      mem_name_button.FreezeBubblePopup();
    })

  });
})(jQuery);
";
  drupal_add_js($js, array('type' => 'inline', 'scope' => JS_DEFAULT));

  // Add CSS.
  drupal_add_css(drupal_get_path('module', 'ms_membership') . '/css/ms_membership_view.css');

  $query = db_select('users', 'u');
  if ($sku = arg(3)) {
    $query->leftjoin('ms_products_purchases', 'm', 'u.uid = m.uid');
    $query->condition('m.sku', $sku, '=');
    $query->fields('m');
  }
  $query->fields('u');
  $query->condition('u.uid', 0, '!=');
  $query->fields('u', array('name'));

  if (isset($_GET['name'])) {
    $name = $_GET['name'];
    $query->condition('u.name', '%' . $name . '%', 'LIKE');
  }

  $query = $query->extend('TableSort')->orderByHeader($headers);

  $pager_amount = 20;
  if (!isset($_GET['pager_amount']) OR $pager_amount = $_GET['pager_amount']) {
    $query = $query->extend('PagerDefault')->limit($pager_amount);
  }

  // Execute the query.
  $result = $query->execute();

  $rows = array();
  $attr = array('id' => 'ms-members-table');

  // Load the plans.
  $plans = ms_products_get_plans_list('ms_membership');

  $stats_html = '<h3>' . t('Membership Statistics') . '</h3>';
  foreach ($plans as $sku => $plan_name) {
    $stats_html .= "<div class='statsPlan'>";
    $stats_html .= "<div class='statsPlanName'>" . l($plan_name, 'admin/people/members/' . $sku) . "</div>";
    $stats_html .= "<div class='statsPlanActive'>" . t('Active: %count', array('%count' => ms_products_get_purchases_count($sku, array('active', 'completed')))) . "</div>";
    $stats_html .= "<div class='statsPlanCancelled'>" . t('Cancelled: %count', array('%count' => ms_products_get_purchases_count($sku, array('canceled', 'expiring')))) . "</div>";
    $stats_html .= "<div class='statsPlanExpired'>" . t('Expired: %count', array('%count' => ms_products_get_purchases_count($sku, array('expired')))) . "</div>";
    $stats_html .= "</div>";
  }

  foreach ($result as $member) {
    // Get the memberships for this user.
    $purchases = ms_products_get_user_purchases($member->uid, 'ms_membership');

    $purchases_html = '';
    foreach ($purchases as $purchase) {
      $actions = array(
        l(t('Edit'), ms_products_get_purchase_edit_path($purchase->id)),
        l(t('Delete'), ms_products_get_purchase_delete_path($purchase->id)),
      );

      $plan = ms_products_plan_load($purchase->sku);

      // Build the info for the membership.
      $mem_info = array();
      $mem_info[] = t('User: %rep', array('%rep' => $member->name));
      $mem_info[] = t('Plan Name: %rep', array('%rep' => $plan->name));
      $mem_info[] = t('Start Date: %rep', array('%rep' => format_date($purchase->start_date, 'small')));
      $mem_info[] = t('Expiration Date: %rep', array('%rep' => ($purchase->expiration) ? format_date($purchase->expiration, 'small') : 'None'));
      $mem_info[] = t('Status: %rep', array('%rep' => ms_products_get_purchase_status_text($purchase->status)));
      $mem_info[] = t('Payments: %rep', array('%rep' => $purchase->current_payments . '/' . ($purchase->max_payments ? $purchase->max_payments : 'Unlimited')));
      $mem_info[] = t('Actions: !rep', array('!rep' => implode(' | ', $actions)));
      if ($purchase->oid != -1) {
        $recurring_schedule = ms_core_get_recurring_schedule($purchase->oid, $plan->sku, 'ms_membership');
        $mem_info[] = t('Order: !rep', array('!rep' => l(t('Order @num', array('@num' => $purchase->oid)), 'admin/moneysuite/orders/view/' . $purchase->oid)));
        $mem_info[] = t('Last Payment: %rep', array('%rep' => $recurring_schedule ? ms_core_get_last_payment_string($recurring_schedule) : t('N/A')));
        $mem_info[] = t('Next Payment: %rep', array('%rep' => $recurring_schedule ? ms_core_get_next_payment_string($recurring_schedule) : t('N/A')));
      }

      $status_class = 'status_' . $purchase->status;
      $purchases_html .= "<div class='memPlan $status_class'>";

      $purchases_html .= "<div class='memName'>"
        . $plan->name . " - "
        . ms_products_get_purchase_status_text($purchase->status)
        . "</div>";
      $purchases_html .= "<div class='memInfo' style='display:none;'>"
        . theme_item_list(array('items' => $mem_info, 'title' => t('Membership Info'), 'type' => 'ul', 'attributes' => array()))
        . "</div>";
      $purchases_html .= "</div>";
    }

    if (empty($purchases)) {
      $purchases_html .= "<div class='noPlan'>";
      $purchases_html .= "<div class='memName'>No Membership</div>";
      $purchases_html .= "</div>";
    }

    $rows[] = array(
      array('data' => format_date($member->created, 'small'), 'class' => array('ms_mem_join_date')),
      array('data' => l($member->name, 'user/' . $member->uid), 'class' => array('ms_mem_user')),
      array('data' => $purchases_html, 'class' => array('ms_mem_name')),
    );
  }
  // Add the name filter.
  $filters = drupal_get_form('ms_core_get_filter_form', array('name' => $name, 'pager_amount' => $pager_amount));
  $content .= drupal_render($filters);

  $content .= theme('table', array('header' => $headers, 'rows' => $rows, 'attributes' => $attr, 'empty' => t('No memberships found.')));
  $content .= $stats_html;

  // Add the content.
  $build['content'] = array('#markup' => $content);

  // Add the pager.
  $build['pager'] = array(
    '#theme' => 'pager',
    '#weight' => 5,
  );

  return $build;
}

/**
 * Prepares an email for sending.
 */
function ms_membership_prepare_mail($module, $id, $to, $language, $seed_vars, $send = TRUE) {
  // Load the vars.
  $purchase = ms_products_purchase_load($seed_vars['id']);
  $account = user_load($purchase->uid);
  $order = ms_core_order_load($purchase->oid);

  $vars = new stdClass();

  if (!$order) {
    $order = new stdClass();
    $order->first_name = $account->name;
    $order->last_name = '';
    $order->amount = 0;
    $vars->payment = new stdClass();
    $vars->payment->amount = 0;
  } else {
    if (!$vars->payment = ms_core_get_last_payment($order, FALSE)) {
      $vars->payment = new stdClass();
      $vars->payment->amount = 0;
    }
  }

  $plan = ms_products_plan_load($purchase->sku);
  $plan->key = $id;

  $vars->order = $order;
  $vars->plan = $plan;
  $vars->account = $account;
  $vars->membership = $purchase;

  $message = array();

  switch ($id) {
    case 'admin_signup':
      // Populate the amount field for the payment if it is not set.
      $vars->payment->amount = $order->amount;

      $message['subject'] = variable_get('ms_membership_new_membership_mail_subject', t("New Signup: [user:name]!"));
      $message['body'] = variable_get('ms_membership_new_membership_mail_body', t("A new membership has been purchased!
    User: [user:name]
    Name: [ms_core_order:customerName]
    Membership Plan: [ms_products_plan:name]
    Amount: [ms_core_payment:paymentAmount]
    Date: [date:long]"));
      break;
    case 'admin_cancel':
      $message['subject'] = variable_get('ms_membership_cancelled_membership_mail_subject', t("Membership Cancelled: [user:name]!"));
      $message['body'] = variable_get('ms_membership_cancelled_membership_mail_body', t("A membership has been cancelled.
    User: [user:name]
    Name: [ms_core_order:customerName]
    Membership Plan: [ms_products_plan:name]
    Date: [date:long]"));
      break;
  }

  // Replace the Tokens.
  $message['subject'] = token_replace($message['subject'],
    array(
      'ms_products_purchase' => $vars->membership,
      'ms_products_plan' => $vars->plan,
      'ms_membership_plan' => $vars->plan,
      'ms_core_order' => $vars->order,
      'ms_core_payment' => $vars->payment,
      'user' => $vars->account,
      'date' => REQUEST_TIME,
    )
  );
  $message['body'] = token_replace($message['body'],
    array(
      'ms_products_purchase' => $vars->membership,
      'ms_products_plan' => $vars->plan,
      'ms_membership_plan' => $vars->plan,
      'ms_core_order' => $vars->order,
      'ms_core_payment' => $vars->payment,
      'user' => $vars->account,
      'date' => REQUEST_TIME,
    )
  );

  if (trim($message['body'])) {
    drupal_mail($module, $id, $to, $language, $message, NULL, $send);
  }
}

/**
 * Implements hook_mail().
 */
function ms_membership_mail($key, &$message, $vars) {
  $message['from'] = variable_get('ms_membership_notify_email_sender_address', variable_get('site_mail', ''));
  $message['subject'] = $vars['subject'];
  $message['body'][] = $vars['body'];

  ms_core_log('ms_membership', 'Sending an Email to a User. Message: !message',
    array('!message' => ms_core_print_r($message)));
}

/**
 * Sends the admin emails.
 */
function ms_membership_notify_admins($template, $vars) {
  $emails_raw = trim(str_replace(' ', '', variable_get('ms_membership_notify_emails', '')));
  $emails = explode(',', $emails_raw);
  if (is_array($emails)) {
    $emails = array_filter($emails);
  }
  // Add the site mail if no admin emails specified.
  if (!$emails OR empty($emails)) {
    $emails = array();
    $emails[] = variable_get('site_mail', '');
  }

  switch ($template) {
    case 'admin_signup':
      if (variable_get('ms_membership_new_membership_mail_body', '')) {
        foreach ($emails as $email) {
          if (trim($email)) {
            ms_membership_prepare_mail('ms_membership', 'admin_signup', trim($email), language_default(), $vars);
          }
        }
      }
      break;
    case 'admin_cancel':
      if (variable_get('ms_membership_cancelled_membership_mail_body', '')) {
        foreach ($emails as $email) {
          if (trim($email)) {
            ms_membership_prepare_mail('ms_membership', 'admin_cancel', trim($email), language_default(), $vars);
          }
        }
      }
      break;
  }
}

/**
 * Implements hook_ms_order_assign_user().
 */
function ms_membership_ms_order_assign_user($type, $product, $order, $payment) {
  if (!isset($order->data['register_form']['email1']) OR !$order->data['register_form']['email1']) {
    switch ($product->module) {
      case 'ms_membership':
        // Check if an account should be created.
        switch ($type) {
          case 'cart':
          case 'rec_signup':
            ms_core_log('ms_membership', 'Assigning a user to an Order: Payment Type: !type<br />Product: !product <br />Payment: !payment',
              array(
                '!type' => $type,
                '!product' => ms_core_print_r($product),
                '!payment' => ms_core_print_r($payment)));
            // If the user has already been registered, just set the user and unblock the user.
            if (isset($product->data['created_user_id']) AND $account = user_load($product->data['created_user_id'])) {
              // Unblock the user.
              if (variable_get('ms_membership_user_create_time', 'after_payment') == 'registration_block') {
                $account->status = 1;
                user_save($account);
              }

              // Save the user to the order.
              $order->uid = $account->uid;
              ms_core_order_save($order);
            } else {
              //Register the User once they have paid.
              $form_state = $product->data['form'];

              if (isset($form_state['values']['pass'])) {
                if (is_array($form_state['values']['pass'])) {
                  $pass = $form_state['values']['pass']['pass1'];
                } else {
                  $pass = $form_state['values']['pass'];
                }
              } else {
                $pass = user_password();
              }

              $form_state['values']['pass'] = array(
                'pass1' => $pass,
                'pass2' => $pass,
              );

              unset($form_state['values']['roles']);

              $form_state['values']['ms_membership_paid'] = TRUE;
              // Send the email.
              if (variable_get('ms_core_send_registration_mail', TRUE)) {
                $form_state['values']['notify'] = TRUE;
              } else {
                $form_state['values']['notify'] = FALSE;
              }

              $form_state['#submit'] = $form_state['values']['ms_membership_submit'];

              if (variable_get('ms_membership_fix_profile', TRUE)) {
                // Ugly hack to fix profile fields. This is because of a bug in
                // core here: http://drupal.org/node/1161024.
                if (isset($form_state['field']) AND is_array($form_state['field'])) {
                  foreach ($form_state['field'] AS $key => $field) {
                    // List fields need to be set so that it is LANGUAGE_NONE.
                    if (isset($field[LANGUAGE_NONE]['field']['module'])) {
                      switch ($field[LANGUAGE_NONE]['field']['module']) {
                        case 'list':
                        case 'taxonomy':
                        case 'text':
                          if (isset($form_state['values'][$key])) {
                            $value = $form_state['values'][$key][LANGUAGE_NONE][0]['value'];
                            unset($form_state['values'][$key]);
                            $form_state['values'][$key][LANGUAGE_NONE] = $value;
                          }
                          break;
                      }
                    }
                  }
                }

                // Ugly Hack to make Profile 2 List Fields work. This is because
                // of a bug in Core here: http://drupal.org/node/1161024.
                if (module_exists('profile2')) {
                  foreach (profile2_get_types() as $type) {
                    $profile_type = 'profile_' . $type->type;
                    if (!empty($form_state['profile2_fields'][$profile_type])) {
                      foreach ($form_state['profile2_fields'][$profile_type] AS $key => $module) {
                        switch ($module) {
                          case 'list':
                            if (isset($form_state['values'][$profile_type][$key])) {
                              $value = $form_state['values'][$profile_type][$key][LANGUAGE_NONE][0]['value'];
                              unset($form_state['values'][$profile_type][$key]);
                              $form_state['values'][$profile_type][$key][LANGUAGE_NONE] = $value;
                            }
                            break;
                        }
                      }
                    }
                  }
                }
              }

              // Load the global $user object that contains the account of the
              // currently logged in user.
              global $user;
              // Preserve this account in the $temp_user variable so that we
              // can switch back to it after impersonating the privileged user.
              $temp_user = $user;
              // We must set this to FALSE in case the operation on the
              // following lines fails.
              drupal_save_session(FALSE);
              // Switch the currently logged in user to user 1 so that CAPTCHA
              // and other checks are not processed.
              $user = user_load(1);
              // Execute the Registration Form
              drupal_form_submit('user_register_form', $form_state);
              $errors = form_get_errors();
              if (is_array($errors) AND !empty($errors)) {
                ms_core_log_error('ms_membership', 'Form Errors: ' . ms_core_print_r($errors));
              }
              // Switch back to the account we saved in the $temp_user variable.
              $user = $temp_user;

              // Restore session saving.
              drupal_save_session(TRUE);

              drupal_get_messages();

              if (isset($form_state['user'])) {
                // Populate the $account variable with the account created as a
                // result of submitting the user_register form.
                $temp_account = $form_state['user'];

                $account = user_load($temp_account->uid);
              } else {
                $account = FALSE;
              }

              // Fall back to the foolproof method of user_save if the above
              // method didn't work.
              if (!$account) {
                form_clear_error();
                ms_core_log_error('ms_membership', 'Using the backup method to create the user account', array(), WATCHDOG_WARNING);
                $roles = isset($form_state['values']['roles']) ? array_filter($form_state['values']['roles']) : array();

                $edit = array_merge($form_state['values'], array(
                  'name' => $form_state['values']['name'],
                  'mail' => $form_state['values']['mail'],
                  'init' => $form_state['values']['mail'],
                  'pass' => $pass,
                  'roles' => $roles,
                  'status' => 1
                ));

                $account = user_save(NULL, $edit);

                $account->password = $pass;

                //Send the Default Email.
                if (variable_get('ms_core_send_registration_mail', TRUE)) {
                  _user_mail_notify('register_no_approval_required', $account);
                }

                $account = user_load($account->uid);
              }

              if ($account) {
                // Save the user to the order.
                $order->uid = $account->uid;
                ms_core_order_save($order);
                drupal_get_messages();
              } else {
                // Otherwise we have an error.
                ms_core_log_error('ms_membership', 'Failed to create a user.');
              }
            }

            break;
        }
        break;
    }
  }
}

/**
 * Implements hook_ms_products_refund().
 */
function ms_membership_ms_products_refund($account, $plan, $product, $payment) {
  switch ($plan->bundle) {
    case 'ms_membership':
      $order = ms_core_order_load($product->oid);
      // Remove the role if the option is on and if the membership is not
      // recurring.
      if (ms_core_variable_get('ms_membership_refund_remove', FALSE, $plan)) {
        ms_membership_change_roles($account->uid, $plan->expire_grant_roles, $plan->expire_remove_roles);
        ms_core_log('ms_membership', 'User %username had a refunded payment.', array('%username' => $account->name));

        // Set the Membership to Inactive.
        $purchase = ms_products_load_purchase_by_oid($order->oid, $plan->sku);
        ms_products_change_purchase_status($purchase->id, 'expired');
      }
      module_invoke_all('ms_membership_refund', $account, $plan, $order, $payment);
      break;
  }
}

/**
 * Implements hook_ms_products_signup().
 */
function ms_membership_ms_products_signup($account, $purchase, $plan) {
  switch ($plan->bundle) {
    case 'ms_membership':
      ms_membership_notify_admins('admin_signup', array('id' => $purchase->id));
      ms_membership_change_roles($account->uid, $plan->start_grant_roles, $plan->start_remove_roles);
      module_invoke_all('ms_membership_signup', $account, $purchase, $plan);
      break;
  }
}

/**
 * Implements hook_ms_products_renewal().
 */
function ms_membership_ms_products_renewal($account, $purchase, $plan) {
  switch ($plan->bundle) {
    case 'ms_membership':
      ms_membership_change_roles($account->uid, $plan->start_grant_roles, $plan->start_remove_roles);
      module_invoke_all('ms_membership_renewal', $account, $purchase, $plan);
      break;
  }
}

/**
 * Implements hook_ms_products_modification().
 */
function ms_membership_ms_products_modification($account, $purchase, $new_plan, $old_plan) {
  switch ($new_plan->bundle) {
    case 'ms_membership':
      ms_membership_change_roles($account->uid, $old_plan->expire_grant_roles, $old_plan->expire_remove_roles);
      ms_membership_change_roles($account->uid, $new_plan->start_grant_roles, $new_plan->start_remove_roles);
      module_invoke_all('ms_membership_modification', $account, $purchase, $new_plan, $old_plan);
      break;
  }
}

/**
 * Implements hook_ms_products_expiring_soon().
 */
function ms_membership_ms_products_expiring_soon($account, $purchase, $plan) {
  switch ($plan->bundle) {
    case 'ms_membership':
      module_invoke_all('ms_membership_expiring_soon', $account, $purchase, $plan);
      break;
  }
}

/**
 * Implements hook_ms_products_expiring().
 */
function ms_membership_ms_products_expiring($account, $purchase, $plan) {
  switch ($plan->bundle) {
    case 'ms_membership':
      ms_membership_change_roles($account->uid, $plan->expire_grant_roles, $plan->expire_remove_roles);
      module_invoke_all('ms_membership_expiring', $account, $purchase, $plan);
      break;
  }
}

/**
 * Implements hook_ms_products_cancel().
 */
function ms_membership_ms_products_cancel($account, $purchase, $plan) {
  switch ($plan->bundle) {
    case 'ms_membership':
      ms_membership_notify_admins('admin_cancel', array('id' => $purchase->id));
      module_invoke_all('ms_membership_cancel', $account, $purchase, $plan);
      break;
  }
}

/**
 * Implements hook_ms_products_payment().
 */
function ms_membership_ms_products_payment($account, $purchase, $plan) {
  switch ($plan->bundle) {
    case 'ms_membership':
      ms_membership_change_roles($account->uid, $plan->start_grant_roles, $plan->start_remove_roles);
      module_invoke_all('ms_membership_payment', $account, $purchase, $plan);
      break;
  }
}

/**
 * Implements hook_ms_products_api_purchase_presave().
 */
function ms_membership_ms_products_api_purchase_presave($data, $purchase, $plan) {
  switch ($plan->bundle) {
    case 'ms_membership':
      if ($purchase->status == 'expired') {
        ms_membership_change_roles($purchase->uid, $plan->expire_grant_roles, $plan->expire_remove_roles);
      }

      // Clear the user cache.
      drupal_flush_all_caches();
      break;
  }
}

/**
 * Implements hook_ms_products_user_purchases_page_alter().
 */
function ms_membership_ms_products_user_purchases_page_alter(&$build, $type) {
  switch ($type) {
    case 'ms_membership':
      // Hide the plan price if set.
      if (variable_get('ms_membership_show_membership_price', TRUE)) {
        drupal_add_css(".ms_products_plan_price {display: none;}", array('type' => 'inline'));
      }
      break;
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function ms_membership_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ms_products' && $plugin == 'product_types') {
    return 'plugins/product_types';
  }

  return NULL;
}
