<?php

/**
 * Implements hook_install().
 */
function ms_membership_install() {
  // Set the weight of the module to 2
  db_update('system')
    ->fields(array(
      'weight' => 2,
    ))
    ->condition('name', 'ms_membership')
    ->execute();
}

/**
 * Implements hook_uninstall().
 */
function ms_membership_uninstall() {
  // Delete related variables all at once.
  db_delete('variable')
    ->condition('name', 'ms_membership_%%', 'LIKE')
    ->execute();
}

// ======================================
// Updates:
// ======================================

/**
 * Migrate Override Settings
 */
function ms_membership_update_7701(&$sandbox) {
  module_load_include('module', 'ms_core');
  module_load_include('inc', 'ms_core', 'ms_core.recurring');
  module_load_include('module', 'ms_membership');
  module_load_include('module', 'ms_products');

  $result = db_query("SELECT mpid, name FROM {ms_membership_plans} ORDER BY weight ASC");

  foreach ($result as $product) {
    $product->data = unserialize($product->data);

    if (isset($product->data['override_settings']) AND is_array($product->data['override_settings'])) {
      $old_override_settings = $product->data['override_settings'];
      $new_override_settings = array();

      foreach ($old_override_settings as $info) {
        if ($info['override']) {
          foreach ($info['settings'] as $key => $value) {
            if (is_array($value)) {
              foreach ($value as $child_key => $child_value) {
                if (!is_array($child_value)) {
                  if ($child_value != variable_get($child_key, '')) {
                    $new_override_settings[$child_key] = $child_value;
                  }
                }
              }
            } else {
              if ($value != variable_get($key, '')) {
                $new_override_settings[$key] = $value;
              }
            }
          }
        }
      }

      $product->data['override_settings'] = $new_override_settings;

      db_update('ms_membership_plans')
        ->fields(array(
          'data' => serialize($product->data),
        ))
        ->condition('mpid', $product->mpid)
        ->execute();
    }
  }

  return '';
}

/**
 * Add the uid field to the ms_membership_plans table
 */
function ms_membership_update_7702(&$sandbox) {
  if (!db_field_exists('ms_membership_plans', 'uid')) {
    db_add_field('ms_membership_plans', 'uid', array(
      'description' => t('The user id who owns the products.'),
      'type' => 'int',
      'unsigned' => TRUE,
      'not null' => TRUE,
      'default' => 1,
    ));
  }

  return t('Successfully added the uid field to the ms_membership_plans database table.');
}


/**
 * Add the deny_roles field to the ms_membership_plans table
 */
function ms_membership_update_7703(&$sandbox) {
  if (!db_field_exists('ms_membership_plans', 'deny_roles')) {
    db_add_field('ms_membership_plans', 'deny_roles', array(
      'description' => t('Which Roles can not Purchase/Upgrade this role'),
      'type' => 'text',
      'serialize' => TRUE,
    ));

    // Set the default to an empty array
    db_update('ms_membership_plans')
      ->fields(array(
        'deny_roles' => serialize(array()),
      ))
      ->execute();
  }
  return t('Successfully added the deny_roles field to the ms_membership_plans database table.');
}

/**
 * Add the fixed_date field to the ms_membership_plans table
 */
function ms_membership_update_7704(&$sandbox) {
  if (!db_field_exists('ms_membership_plans', 'fixed_date')) {
    db_add_field('ms_membership_plans', 'fixed_date', array(
      'type' => 'int',
      'description' => 'The Subscription is Fixed Date',
      'not null' => TRUE,
      'default' => 0,
    ));
    db_add_field('ms_membership_plans', 'fixed_date_discount', array(
      'type' => 'int',
      'description' => 'If a discount should be applied.',
      'not null' => TRUE,
      'default' => 1,
    ));
    db_add_field('ms_membership_plans', 'fixed_date_string', array(
      'type' => 'varchar',
      'description' => 'Fixed date string',
      'length' => '255',
      'default' => '',
    ));
    db_add_field('ms_membership_plans', 'fixed_date_type', array(
      'type' => 'varchar',
      'description' => 'Fixed date type',
      'length' => '255',
      'default' => '',
    ));
  }
  return t('Successfully added the fixed_date field to the ms_membership_plans database table.');
}

/**
 * Rebuild the memberships to fix the current payments counter
 */
function ms_membership_update_7705(&$sandbox) {
  module_load_include('module', 'ms_core');
  module_load_include('inc', 'ms_core', 'ms_core.recurring');
  module_load_include('php', 'ms_core', 'ms_core.classes');
  // Update the current payments for all of the memberships to match the recurring schedules for the order
  $result = db_query("SELECT * FROM {ms_memberships}");
  foreach ($result as $membership) {
    if ($membership->oid AND $order = ms_core_order_load($membership->oid)
      AND $recurring_schedule = ms_core_load_recurring_schedule($order->oid)
      AND !empty($recurring_schedule->current_payments)
    ) {
      db_update('ms_memberships')
        ->fields(array(
          'current_payments' => $recurring_schedule->current_payments,
        ))
        ->condition('oid', $order->oid)
        ->execute();
    }
  }

  return t('Rebuilt the memberships to fix the current payments counter.');
}

/**
 * Enable the new dependencies if they aren't yet.
 */
function ms_membership_update_7801(&$sandbox) {
  if (!module_exists('ms_products')) {
    module_enable(array('ms_products'));
  }
  return t('Made sure ms_products is enabled.');
}

/**
 * Attempts to fully unserialize a string that may have been serialized multiple times.
 */
function _ms_membership_unserialize($object) {
  for ($i = 0; $i < 6; $i++) {
    if (is_array($object)) {
      return $object;
    }
    $object = unserialize($object);
  }

  return array();
}

/**
 * Move plans and memberships to the ms_products module database tables.
 */
function ms_membership_update_7802(&$sandbox) {
  module_load_include('inc', 'ms_membership', 'ms_membership.migrate');

  $skus = array();
  $result = db_query("SELECT * FROM {ms_membership_plans}");
  foreach ($result as $plan) {
    // Move the fields that aren't natively supported into the data array.
    $plan->data = unserialize($plan->data);
    $plan->data['show_registration'] = $plan->show_registration;
    $plan->data['show_account'] = $plan->show_account;
    $plan->data['start_grant_roles'] = unserialize($plan->start_grant_roles);
    $plan->data['start_remove_roles'] = unserialize($plan->start_remove_roles);
    $plan->data['expire_grant_roles'] = unserialize($plan->expire_grant_roles);
    $plan->data['expire_remove_roles'] = unserialize($plan->expire_remove_roles);
    $plan->data['register_urls'] = unserialize($plan->register_urls);
    $plan->data['grant_credit'] = variable_get('ms_membership_grant_credit', TRUE);

    $plan->cart_type = ($plan->recurring) ? 'recurring' : 'cart';
    $plan->bundle = 'ms_membership';
    $plan->sku = 'ms_membership_' . $plan->mpid;
    $skus[$plan->mpid] = $plan->sku;
    ms_core_product_id_change($plan->bundle . '-' . $plan->mpid, $plan->bundle . '-' . $plan->sku);
    $plan->recurring_schedule = array(
      'total_occurrences' => $plan->total_occurrences,
      'main_amount' => $plan->main_amount,
      'main_length' => $plan->main_length,
      'main_unit' => $plan->main_unit,
      'has_trial' => ($plan->trial_length) ? TRUE : FALSE,
      'trial_amount' => $plan->trial_amount,
      'trial_length' => $plan->trial_length,
      'trial_unit' => $plan->trial_unit,
      'fixed_date' => $plan->fixed_date,
      'fixed_date_discount' => $plan->fixed_date_discount,
      'fixed_date_type' => $plan->fixed_date_type,
      'fixed_date_string' => $plan->fixed_date_string,
    );

    // Fix the modify options.
    $modify_options = array();
    $plan->modify_options = _ms_membership_unserialize($plan->modify_options);
    foreach ($plan->modify_options as $key => $value) {
      $modify_options['ms_membership_' . $key] = $value;
    }

    $plan->modify_options = serialize($modify_options);

    // Insert into the ms_products_plans database.
    db_insert('ms_products_plans')
      ->fields(array(
        'sku' => $plan->sku,
        'bundle' => $plan->bundle,
        'uid' => $plan->uid,
        'name' => $plan->name,
        'cart_type' => $plan->cart_type,
        'description' => $plan->description,
        'signup_mail_subject' => _ms_membership_migrate_tokens($plan->signup_mail_subject),
        'signup_mail_body' => _ms_membership_migrate_tokens($plan->signup_mail_body),
        'eot_mail_subject' => _ms_membership_migrate_tokens($plan->eot_mail_subject),
        'eot_mail_body' => _ms_membership_migrate_tokens($plan->eot_mail_body),
        'cancel_mail_subject' => _ms_membership_migrate_tokens($plan->cancel_mail_subject),
        'cancel_mail_body' => _ms_membership_migrate_tokens($plan->cancel_mail_body),
        'modify_mail_subject' => _ms_membership_migrate_tokens($plan->modify_mail_subject),
        'modify_mail_body' => _ms_membership_migrate_tokens($plan->modify_mail_body),
        'expiring_mail_subject' => _ms_membership_migrate_tokens($plan->expiring_mail_subject),
        'expiring_mail_body' => _ms_membership_migrate_tokens($plan->expiring_mail_body),
        'expiring_mail_days' => $plan->expiring_mail_days,
        'weight' => $plan->weight,
        'recurring_schedule' => serialize($plan->recurring_schedule),
        'modify_options' => $plan->modify_options,
        'allow_roles' => $plan->allow_roles,
        'deny_roles' => $plan->deny_roles,
        'expire_when' => $plan->expire_when,
        'data' => serialize($plan->data),
      ))
      ->execute();

    // Migrate translation strings.
    if (module_exists('i18n_string')) {
      $local_result = db_select('locales_source', 'ls')
        ->fields('ls')
        ->condition('textgroup', 'ms_membership_plan')
        ->execute();
      foreach ($local_result as $source) {
        // Update the tokens for these strings.
        $local_target_result = db_select('locales_target', 'lt')
          ->fields('lt')
          ->condition('lid', $source->lid)
          ->execute();
        foreach ($local_target_result as $target) {
          db_update('locales_target')
            ->fields(array(
              'translation' => _ms_membership_migrate_tokens($target->translation),
            ))
            ->condition('lid', $target->lid)
            ->condition('language', $target->language)
            ->execute();
        }
      }
      module_load_install('i18n_string');

      i18n_string_install_update_context('ms_membership_plan:m_plan:' . $plan->mpid . ':*', 'ms_products_plan:plan:' . $plan->sku . ':*');
    }
  }

  // Now we move over the memberships.
  $result = db_query("SELECT * FROM {ms_memberships}");
  foreach ($result as $membership) {
    db_insert('ms_products_purchases')
      ->fields(array(
        'oid' => $membership->oid,
        'uid' => $membership->uid,
        'sku' => !empty($skus[$membership->mpid]) ? $skus[$membership->mpid] : 'unkown-' . $membership->mpid,
        'bundle' => 'ms_membership',
        'status' => _ms_membership_migrate_status($membership->status),
        'expiration' => $membership->expiration,
        'start_date' => $membership->start_date,
        'current_payments' => $membership->current_payments,
        'max_payments' => $membership->max_payments,
        'data' => serialize(array()),
      ))
      ->execute();
  }

  //db_drop_table('ms_membership_plans');
  //db_drop_table('ms_memberships');

  // Migrate settings to permissions.
  if (variable_get('ms_membership_show_current_memberships', FALSE)) {
    _ms_membership_migrate_insert_permission(2, array('view own ms_membership purchases'));
  }
  if (variable_get('ms_membership_enforce_single', FALSE)) {
    _ms_membership_migrate_insert_permission(2, array('have multiple ms_membership purchases'));
  }
  _ms_membership_migrate_insert_permission(2, array('cancel own ms_membership purchases'));

  // Migrate tokens for admin emails.
  variable_set('ms_membership_cancelled_membership_mail_body',
    _ms_membership_migrate_tokens(variable_get('ms_membership_cancelled_membership_mail_body', '')));
  variable_set('ms_membership_cancelled_membership_mail_subject',
    _ms_membership_migrate_tokens(variable_get('ms_membership_cancelled_membership_mail_subject', '')));
  variable_set('ms_membership_new_membership_mail_body',
    _ms_membership_migrate_tokens(variable_get('ms_membership_new_membership_mail_body', '')));
  variable_set('ms_membership_new_membership_mail_subject',
    _ms_membership_migrate_tokens(variable_get('ms_membership_new_membership_mail_subject', '')));

  // Migrate permissions.
  _ms_membership_migrate_permission('administer membership plans', 'administer ms_membership plans');
  _ms_membership_migrate_permission('administer ms memberships', 'administer ms_membership purchases');
  _ms_membership_migrate_permission('purchase membership', 'purchase ms_membership products');
  _ms_membership_migrate_permission('modify own membership', 'renew own ms_membership purchases');
  _ms_membership_migrate_permission('renew own membership', 'modify own ms_membership purchases');

  // Migrate existing views.
  if (module_exists('views')) {
    // It is too hard to migrate views like this. They need to be migrated manually.
    //_ms_membership_migrate_views();
  }

  // Migrate existing rules using the database.
  if (module_exists('rules')) {
    // It is too unreliable to migrate rules this way, so they will need to be manually migrated.
    //_ms_membership_migrate_rules($skus);
  }

  return t('Successfully migrated membership plans and memberships to use the MS Products API.');
}

/**
 * Clean up obsolete files.
 */
function ms_membership_update_7803(&$sandbox) {
  $files = array(
    'ms_membership.rules.inc',
    'ms_membership.classes.php',
    'ms_membership.product_type.inc',
    'ms_membership.rules.inc',
  );

  foreach ($files as $file) {
    if (file_exists(dirname(__FILE__) . '/' . $file)) {
      unlink(dirname(__FILE__) . '/' . $file);
    }
  }

  $folders = array(
    'views',
    'js',
  );

  foreach ($folders as $folder) {
    _ms_membership_rrmdir(dirname(__FILE__) . '/' . $folder);
  }

  return t('Cleaned up obsolete files.');
}

/**
 * Removes a directory recursively
 */
function _ms_membership_rrmdir($dir) {
  if (is_dir($dir)) {
    foreach (glob($dir . '/*') as $file) {
      if (is_dir($file))
        _ms_membership_rrmdir($file);
      else
        unlink($file);
    }
    rmdir($dir);
  }
}

/**
 * Implements hook_update_dependencies().
 */
function ms_membership_update_dependencies() {
  $dependencies = array();
  $dependencies['ms_membership'][7802] = array(
    'ms_products' => 7304,
  );
  $dependencies['ms_products'][7305] = array(
    'ms_membership' => 7802,
  );
  return $dependencies;
}
