<?php

/**
 * @file
 * Module that allows users to use gift cards that you generate instead of
 * paying for products.
 *
 * Original author: Leighton Whiting - Released under GENERAL PUBLIC LICENSE 
 * Current maintenance by multiple MoneySuite users.
 * Re: new initiative: https://www.drupal.org/node/2315653
 */

/**
 * Implements hook_help().
 */
function ms_gift_cards_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/help#ms_gift_cards":
      $output = '<p>' . t("Interface to Generate, Activate, and Redeem Gift Codes (can be used on Gift Cards).") . '</p>';
      break;
    case "activate":
      $output .= '<p>' . t("This page is where affiliates can go to pay to 'activate' a gift card.
        Once a gift card is activated, it can be redeemed. This is so that you can give gift cards
        to affiliates that aren't yet activated, which they will have to pay to activate (usually when
        they actually sell the gift card). If this isn't a part of your workflow, then you can
        safely ignore this page.") . '</p>';
      break;
    case "giftcard":
      $output .= '<p>' . t("This is the page where users go to redeem their giftcards. They will need
        to either sign in to an account or create a new account as a part of the redemption process.
        Once they redeem the card, the card will be marked as redeemed and the user will be
        granted the associated product.") . '</p>';
      break;
  }
  return $output;
}

/**
 * Implements hook_permission().
 */
function ms_gift_cards_permission() {
  return array(
    'activate gift card' => array(
      'title' => t('activate gift card'),
      'description' => t('TODO Add a description for \'activate gift card\''),
    ),
    'redeem gift card' => array(
      'title' => t('redeem gift card'),
      'description' => t('TODO Add a description for \'redeem gift card\''),
    ),
    'block redeem gift card' => array(
      'title' => t('block redeem gift card'),
      'description' => t('TODO Add a description for \'block redeem gift card\''),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function ms_gift_cards_menu() {
  $items = array();
  $items['activate'] = array(
    'title' => 'Activate Gift Card',
    'page callback' => 'ms_gift_cards_activate_card',
    'access arguments' => array('activate gift card'),
    'type' => MENU_CALLBACK,
  );
  $items['giftcard'] = array(
    'title' => 'Redeem Gift Card',
    'page callback' => 'ms_gift_cards_redeem_card',
    'access arguments' => array('redeem gift card'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/moneysuite/ms_gift_cards'] = array(
    'title' => 'MS Gift Cards',
    'description' => 'Set the various Gift Card Settings here',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_gift_cards_admin'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/moneysuite/ms_gift_cards/settings'] = array(
    'title' => 'Gift Card Settings',
    'description' => 'Set the various Gift Card Settings here',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_gift_cards_admin'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/moneysuite/ms_gift_cards/add'] = array(
    'title' => 'Generate Gift Cards',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_gift_cards_generate_cards_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/moneysuite/ms_gift_cards/change/%/%'] = array(
    'title' => 'Change Gift Card Status',
    'page callback' => 'ms_gift_cards_change_status_page',
    'page arguments' => array(4, 5),
    'access arguments' => array('access administration pages'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/moneysuite/ms_gift_cards/edit/%'] = array(
    'title' => 'Edit Gift Card',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_gift_cards_edit_card_form', 4),
    'access arguments' => array('access administration pages'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/moneysuite/ms_gift_cards/delete/%'] = array(
    'title' => 'Delete Gift Card',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_gift_cards_delete_card_confirm', 4),
    'access arguments' => array('access administration pages'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Admin Settings Form
 */
function ms_gift_cards_admin($form, &$form_state) {
  $form['main'] = array(
    '#type' => 'fieldset',
    '#title' => t('Main Settings'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#description' => t("The URL to redeem a giftcard is !redeem . The url to activate a giftcard is !activate",
      array('!redeem' => url('giftcard'), '!activate' => url('activate'))),
  );
  $form['email'] = array(
    '#type' => 'fieldset',
    '#title' => t('Email Settings'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['main']['ms_gift_cards_code_length'] = array(
    '#type' => 'textfield',
    '#title' => t('Code Length'),
    '#default_value' => variable_get('ms_gift_cards_code_length', 10),
    '#description' => t('Set the default length for gift card codes. This can be overridden when generating codes.'),
    '#required' => TRUE,
  );
  $form['main']['ms_gift_cards_code_allowed_characters'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Code Characters'),
    '#default_value' => variable_get('ms_gift_cards_code_allowed_characters', array('letters', 'numbers')),
    '#options' => array(
      'letters' => t('Letters (A-Z)'),
      'numbers' => t('Numbers (0-9)'),
    ),
    '#description' => t('Which characters can be used for gift card codes. This can be overridden when generating codes.'),
    '#required' => TRUE,
  );
  $form['main']['ms_gift_cards_amount_to_show'] = array(
    '#type' => 'textfield',
    '#title' => t('Records Per Page?'),
    '#default_value' => variable_get('ms_gift_cards_amount_to_show', 100),
    '#description' => t('Set how many records to show per page on the overview page.'),
    '#required' => TRUE,
  );

  $form['email']['ms_gift_cards_gift_activated_mail_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Gift Card Activated Email Subject'),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_gift_cards_gift_activated_mail_subject', t("Gift Card Activated")),
  );
  $form['email']['ms_gift_cards_gift_activated_mail_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Gift Card Activated Email Body'),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_gift_cards_gift_activated_mail_body', t("Your gift card has been activated.

      Gift: [productName]
      Code: [giftCode]
      Link: [redeemUrl]
      ")),
  );
  $form['email']['ms_gift_cards_gift_activated_mail_token_help']['tokens'] = array(
    '#theme' => 'token_tree',
    '#token_types' => array('ms_gift_cards', 'ms_core_product', 'ms_core_order', 'ms_core_payment', 'user'),
    '#dialog' => TRUE,
  );

  return system_settings_form($form);
}

/**
 * Show form for editing a Gift Card
 */
function ms_gift_cards_generate_cards_form($form, $form_state) {
  $form['gift_card'] = array(
    '#type' => 'fieldset',
    '#title' => t('Gift Card Generation Settings'),
    '#weight' => -50,
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );

  $form['gift_card']['admin_note'] = array(
    '#type' => 'textfield',
    '#title' => t('Admin note'),
    '#description' => t('Enter a note or label to distinguish these gift cards.'),
    '#required' => FALSE,
  );

  $form['gift_card']['product'] = array(
    '#type' => 'textfield',
    '#title' => t('Product'),
    '#description' => t('Enter a product below.'),
    '#required' => FALSE,
    '#autocomplete_path' => 'ms_core/autocomplete/product',
  );
  $form['type'] = array(
    '#type' => 'select',
    '#title' => t('Discount type'),
    '#options' => array(
      'percentage' => 'Percentage',
      'fixed' => 'Fixed Value',
    ),
  );
  $form['scope'] = array(
    '#type' => 'radios',
    '#title' => t('Scope'),
    '#required' => TRUE,
    '#default_value' => 'recurring',
    '#options' => ms_core_get_scopes(),
    '#description' => t('Whether the coupon should affect the first payment only or all payments. Only applies for Recurring Payments.'),
  );
  $form['value'] = array(
    '#type' => 'textfield',
    '#title' => t('Discount value'),
    '#default_value' => 100,
    '#size' => 10,
    '#description' => t('Enter values without symbols, for 15%, enter "15" and choose Percentage as the discount type.'),
    '#required' => TRUE,
  );
  $form['gift_card']['amount'] = array(
    '#type' => 'textfield',
    '#title' => t('Amount'),
    '#description' => t('Enter the amount to sell the gift cards for.'),
    '#required' => FALSE,
  );
  $form['gift_card']['status'] = array(
    '#type' => 'select',
    '#title' => t('Status'),
    '#options' => ms_gift_cards_get_gift_card_statuses(),
    '#description' => t("What is the Default Status of the Cards?"),
    '#required' => TRUE,
  );

  $form['gift_card']['number'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of Cards'),
    '#description' => t('How many cards to generate.'),
    '#required' => TRUE,
  );
  $form['gift_card']['code_length'] = array(
    '#type' => 'textfield',
    '#title' => t('Code Length'),
    '#default_value' => variable_get('ms_gift_cards_code_length', 10),
    '#description' => t('Set the length for the gift card codes.'),
    '#required' => TRUE,
  );
  $form['gift_card']['code_allowed_characters'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Code Characters'),
    '#default_value' => variable_get('ms_gift_cards_code_allowed_characters', array('letters', 'numbers')),
    '#options' => array(
      'letters' => t('Letters (A-Z)'),
      'numbers' => t('Numbers (0-9)'),
    ),
    '#description' => t('Which characters can be used for the gift card codes.'),
    '#required' => TRUE,
  );

  $form['gift_card']['created'] = array(
    '#type' => 'date',
    '#title' => t('Created Date'),
    '#description' => t("When were these cards created?"),
    '#required' => TRUE,
    '#default_value' => array(
      'year' => date('Y'),
      'month' => date('n'),
      'day' => date('j'),
    ),
  );

  if (module_exists('ms_affiliates')) {
    $form['gift_card']['affiliate'] = array(
      '#type' => 'textfield',
      '#title' => t('Affiliate'),
      '#size' => 32,
      '#maxlength' => 64,
      '#description' => t("The Affiliate for these Gift Cards"),
      '#autocomplete_path' => 'admin/structure/ms_core/autocomplete',
      '#required' => FALSE,
    );
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  $form_state['#redirect'] = 'admin/moneysuite/ms_gift_cards/overview';
  return $form;
}

/**
 * Validate Function for the Generate Cards Form
 */
function ms_gift_cards_generate_cards_form_validate($form, &$form_state) {
  $v = $form_state['values'];

  // Check the product is valid
  $p = explode('-', $v['product']);
  if (!$product = ms_core_load_module_product($p[0], $p[1])) {
    form_set_error('product', t('You must enter a valid product'));
  }

  // Check the affiliate is valid
  if (module_exists('ms_affiliates')) {
    if ($v['affiliate']) {
      $affiliate = user_load_by_name($v['affiliate']);
      if (!$affiliate->uid) {
        form_set_error('affiliate', t('You must enter a valid user'));
      }
    }
  }
}

/**
 * Submit Function for the Generate Cards Form
 */
function ms_gift_cards_generate_cards_form_submit($form, &$form_state) {
  $v = $form_state['values'];
  $affiliate = FALSE;
  if (!empty($v['affiliate'])) {
    $affiliate = user_load_by_name($v['affiliate']);
  }

  $p = explode('-', $v['product']);
  $product = ms_core_load_module_product($p[0], $p[1]);

  $count = 0;

  // Run the loop to generate the cards
  for ($i = 0; $i < $v['number']; $i += 1) {
    $gift_card = new stdClass();

    $gift_card->status = $v['status'];
    $gift_card->amount = $v['amount'];
    $gift_card->admin_note = $v['admin_note'];
    $gift_card->type = $v['type'];
    $gift_card->scope = $v['scope'];
    $gift_card->value = $v['value'];

    $gift_card->module = $product->module;
    $gift_card->product_id = $product->id;

    if ($affiliate) {
      $gift_card->affiliate = $affiliate->uid;
    } else {
      $gift_card->affiliate = 0;
    }

    $gift_card->created = strtotime($v['created']['year'] . '-' . $v['created']['month'] . '-' . $v['created']['day']);

    $gift_card->oid = 0;
    $gift_card->activated_user = 0;
    $gift_card->activated = 0;
    $gift_card->redeemed_user = 0;
    $gift_card->redeemed = 0;

    // Generate the code according to the constraints
    $gift_card->code = ms_gift_cards_generate_code($v['code_length'], $v['code_allowed_characters']);

    // Write the card to the database
    drupal_write_record('ms_gift_cards', $gift_card);
    $count += 1;
  }

  drupal_set_message(t('Successfully Generated %count codes.', array('%count' => $count)));
}

/**
 * Gets all of the possible gift card types.
 *
 * @return array
 */
function ms_gift_cards_get_types() {
  return array(
    'percentage' => 'Percentage',
    'fixed' => 'Fixed Value',
  );
}

/**
 * Show form for editing a Gift Card
 */
function ms_gift_cards_edit_card_form($form, $form_state, $id) {
  $gift_card = ms_gift_cards_load_gift_card($id);
  $affiliate = user_load($gift_card->affiliate);
  $redeemed_user = user_load($gift_card->redeemed_user);
  $activated_user = user_load($gift_card->activated_user);
  $form['gift_card'] = array(
    '#type' => 'fieldset',
    '#title' => t('Gift Card Settings'),
    '#weight' => -50,
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['gift_card']['id'] = array(
    '#type' => 'value',
    '#value' => $gift_card->id,
  );

  $form['gift_card']['status'] = array(
    '#type' => 'select',
    '#title' => t('Status'),
    '#options' => ms_gift_cards_get_gift_card_statuses(),
    '#description' => t("What is the Status of the Card?"),
    '#required' => TRUE,
    '#default_value' => $gift_card->status,
  );
  $form['gift_card']['admin_note'] = array(
    '#type' => 'textfield',
    '#title' => t('Admin note'),
    '#description' => t('Enter a note or label to distinguish these gift cards.'),
    '#required' => FALSE,
    '#default_value' => $gift_card->admin_note,
  );
  $form['type'] = array(
    '#type' => 'select',
    '#title' => t('Discount type'),
    '#options' => ms_gift_cards_get_types(),
    '#default_value' => $gift_card->type,
  );
  $form['scope'] = array(
    '#type' => 'radios',
    '#title' => t('Scope'),
    '#required' => TRUE,
    '#default_value' => $gift_card->scope,
    '#options' => ms_core_get_scopes(),
    '#description' => t('Whether the coupon should affect the first payment only or all payments. Only applies for Recurring Payments.'),
  );
  $form['value'] = array(
    '#type' => 'textfield',
    '#title' => t('Discount value'),
    '#default_value' => $gift_card->value,
    '#size' => 10,
    '#description' => t('Enter values without symbols, for 15%, enter "15" and choose Percentage as the discount type.'),
    '#required' => TRUE,
  );
  $form['gift_card']['product'] = array(
    '#type' => 'textfield',
    '#title' => t('Product'),
    '#description' => t('Enter a product below.'),
    '#required' => FALSE,
    '#default_value' => $gift_card->module . '-' . $gift_card->product_id,
    '#autocomplete_path' => 'ms_core/autocomplete/product',
  );
  $form['gift_card']['amount'] = array(
    '#type' => 'textfield',
    '#title' => t('Amount'),
    '#description' => t('Enter the amount to sell the gift card for.'),
    '#required' => FALSE,
    '#default_value' => $gift_card->amount,
  );
  $form['gift_card']['code'] = array(
    '#type' => 'textfield',
    '#title' => t('Code'),
    '#size' => 8,
    '#maxlength' => 10,
    '#description' => t("The code for this gift card"),
    '#required' => TRUE,
    '#default_value' => $gift_card->code,
  );


  $form['gift_card']['created'] = array(
    '#type' => 'date',
    '#title' => t('Created Date'),
    '#description' => t("When was this card created?"),
    '#required' => TRUE,
    '#default_value' => array(
      'year' => date('Y', $gift_card->created),
      'month' => date('n', $gift_card->created),
      'day' => date('j', $gift_card->created),
    ),
  );

  if (module_exists('ms_affiliates')) {
    $form['gift_card']['affiliate'] = array(
      '#type' => 'textfield',
      '#title' => t('Affiliate'),
      '#size' => 32,
      '#maxlength' => 64,
      '#description' => t("The Affiliate for this Gift Card"),
      '#autocomplete_path' => 'admin/structure/ms_core/autocomplete',
      '#required' => FALSE,
      '#default_value' => $affiliate->name,
    );
  }

  $form['gift_card']['activation'] = array(
    '#type' => 'fieldset',
    '#title' => t('Activation'),
    '#weight' => -50,
    '#collapsible' => TRUE,
    '#collapsed' => ($gift_card->activated) ? FALSE : TRUE,
  );
  $form['gift_card']['activation']['is_activated'] = array(
    '#type' => 'checkbox',
    '#title' => t('Activated?'),
    '#description' => t("Check this to set the activation details for this card."),
    '#required' => FALSE,
    '#default_value' => ($gift_card->activated ? TRUE : FALSE),
  );
  $form['gift_card']['activation']['activated'] = array(
    '#type' => 'date',
    '#title' => t('Activated Date'),
    '#description' => t("When was this card activated?"),
    '#required' => FALSE,
    '#default_value' => array(
      'year' => date('Y', $gift_card->activated),
      'month' => date('n', $gift_card->activated),
      'day' => date('j', $gift_card->activated),
    ),
  );
  $form['gift_card']['activation']['oid'] = array(
    '#type' => 'textfield',
    '#title' => t('Order ID'),
    '#size' => 32,
    '#maxlength' => 64,
    '#description' => t("The order id associated with the activation of this card. Don't change unless you have good reason to."),
    '#required' => FALSE,
    '#default_value' => $gift_card->oid,
  );
  $form['gift_card']['activation']['activated_user'] = array(
    '#type' => 'textfield',
    '#title' => t('Activation User'),
    '#size' => 32,
    '#maxlength' => 64,
    '#description' => t("The user who activated this Gift Card"),
    '#autocomplete_path' => 'admin/structure/ms_core/autocomplete',
    '#required' => FALSE,
    '#default_value' => $activated_user->name,
  );

  $form['gift_card']['redemption'] = array(
    '#type' => 'fieldset',
    '#title' => t('Redemption'),
    '#weight' => -50,
    '#collapsible' => TRUE,
    '#collapsed' => ($gift_card->redeemed) ? FALSE : TRUE,
  );
  $form['gift_card']['redemption']['is_redeemed'] = array(
    '#type' => 'checkbox',
    '#title' => t('Redeemed?'),
    '#description' => t("Check this to set the redemption details for this card."),
    '#required' => FALSE,
    '#default_value' => ($gift_card->redeemed ? TRUE : FALSE),
  );
  $form['gift_card']['redemption']['redeemed'] = array(
    '#type' => 'date',
    '#title' => t('Redeemed Date'),
    '#description' => t("When was this card redeemed?"),
    '#required' => FALSE,
    '#default_value' => array(
      'year' => date('Y', $gift_card->redeemed),
      'month' => date('n', $gift_card->redeemed),
      'day' => date('j', $gift_card->redeemed),
    ),
  );
  $form['gift_card']['redemption']['redeemed_user'] = array(
    '#type' => 'textfield',
    '#title' => t('Redemption User'),
    '#size' => 32,
    '#maxlength' => 64,
    '#description' => t("The user who redeemed this Gift Card"),
    '#autocomplete_path' => 'admin/structure/ms_core/autocomplete',
    '#required' => FALSE,
    '#default_value' => $redeemed_user->name,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  $form_state['#redirect'] = 'admin/moneysuite/ms_gift_cards/overview';
  return $form;
}

/**
 * Validate Function for the Edit Card Form
 */
function ms_gift_cards_edit_card_form_validate($form, &$form_state) {
  $v = $form_state['values'];

  // Check the product is valid
  $p = explode('-', $v['product']);
  if (!$product = ms_core_load_module_product($p[0], $p[1])) {
    form_set_error('product', t('You must enter a valid product'));
  }

  // Check the affiliate is valid
  if (module_exists('ms_affiliates')) {
    if ($v['affiliate']) {
      $affiliate = user_load_by_name($v['affiliate']);
      if (!$affiliate->uid) {
        form_set_error('affiliate', t('You must enter a valid user'));
      }
    }
  }

  // Check the activated_user is valid
  if ($v['activated_user']) {
    $activated_user = user_load_by_name($v['activated_user']);
    if (!$activated_user->uid) {
      form_set_error('activated_user', t('You must enter a valid user'));
    }
  }

  // Check the redeemed_user is valid
  if ($v['redeemed_user']) {
    $redeemed_user = user_load_by_name($v['redeemed_user']);
    if (!$redeemed_user->uid) {
      form_set_error('redeemed_user', t('You must enter a valid user'));
    }
  }
}

/**
 * Submit Function for the Edit Card Form
 */
function ms_gift_cards_edit_card_form_submit($form, &$form_state) {
  $v = $form_state['values'];
  $gift_card = ms_gift_cards_load_gift_card($v['id']);

  $gift_card->code = $v['code'];
  $gift_card->status = $v['status'];
  $gift_card->amount = $v['amount'];

  $product = explode('-', $v['product']);

  $gift_card->module = $product[0];
  $gift_card->product_id = $product[1];

  if (module_exists('ms_affiliates')) {
    $affiliate = user_load_by_name($v['affiliate']);
    $gift_card->affiliate = $affiliate->uid;
  } else {
    $gift_card->affiliate = 0;
  }

  $gift_card->created = strtotime($v['created']['year'] . '-' . $v['created']['month'] . '-' . $v['created']['day']);

  if (!$v['is_activated']) {
    $gift_card->oid = 0;
    $gift_card->activated_user = 0;
    $gift_card->activated = 0;
  } else {
    $gift_card->oid = $v['oid'];
    $activated_user = user_load_by_name($v['activated_user']);
    $gift_card->activated_user = $activated_user->uid;
    $gift_card->activated = strtotime($v['activated']['year'] . '-' . $v['activated']['month'] . '-' . $v['activated']['day']);
  }

  if (!$v['is_redeemed']) {
    $gift_card->redeemed_user = 0;
    $gift_card->redeemed = 0;
  } else {
    $redeemed_user = user_load_by_name($v['redeemed_user']);
    $gift_card->redeemed_user = $redeemed_user->uid;
    $gift_card->redeemed = strtotime($v['redeemed']['year'] . '-' . $v['redeemed']['month'] . '-' . $v['redeemed']['day']);
  }

  drupal_write_record('ms_gift_cards', $gift_card, 'id');
  drupal_set_message(t('Gift Card Saved.'));
}

/**
 * Delete a Gift Card
 */
function ms_gift_cards_delete_card_confirm($form, &$form_state, $id) {
  $gift_card = ms_gift_cards_load_gift_card($id);
  if ($gift_card->id) {
    $form['#ms_id'] = $gift_card->id;
    return confirm_form($form, t('Are you sure you want to delete this Gift Card?'), 'admin/moneysuite/ms_gift_cards/overview', t('This action cannot be undone.'), t('Delete'));
  } else {
    drupal_not_found();
  }
}

/**
 * Delete a Gift Card
 */
function ms_gift_cards_delete_card_confirm_submit($form, &$form_state) {
  $gift_card = ms_gift_cards_load_gift_card($form['#ms_id']);

  // Delete the membership
  db_delete('ms_gift_cards')
    ->condition('id', $gift_card->id)
    ->execute();

  drupal_set_message(t('Gift Card %code Deleted', array('%code' => $gift_card->code)));
  $form_state['redirect'] = 'admin/moneysuite/ms_gift_cards/overview';
}

/**
 * Return a new unique string based on the length and the chars
 */
function ms_gift_cards_generate_code($length, $allowed) {
  $characters = '';

  if ($allowed['letters']) {
    $characters .= 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
  }
  if ($allowed['numbers']) {
    $characters .= '0123456789';
  }

  $code = '';
  for ($i = 0; $i < $length; $i++) {
    $code .= $characters[mt_rand(0, strlen($characters) - 1)];
  }
  while (ms_gift_cards_load_gift_card_by_code($code)) {
    $code = '';
    for ($i = 0; $i < $length; $i++) {
      $code .= $characters[mt_rand(0, strlen($characters) - 1)];
    }
  }

  return $code;
}

/**
 * Return the text for the card status
 */
function ms_gift_cards_get_gift_card_status_text($status) {
  $statuses = ms_gift_cards_get_gift_card_statuses();
  return !empty($statuses[$status]) ? $statuses[$status] : $status;
}

/**
 * Return the card statuses
 */
function ms_gift_cards_get_gift_card_statuses() {
  return array(
    'dormant' => t('Dormant'),
    'printed' => t('Printed'),
    'activated' => t('Activated'),
    'redeemed' => t('Redeemed'),
  );
}

/**
 * Page Callback to change a card's status
 */
function ms_gift_cards_change_status_page($id, $status) {
  print ms_gift_cards_change_gift_card_status($id, $status) ? 'Success' : 'Failure';
  exit;
}

/**
 * Change a card's status
 */
function ms_gift_cards_change_gift_card_status($id, $status) {
  return db_update('ms_gift_cards')
    ->fields(array(
      'status' => $status,
    ))
    ->condition('id', $id)
    ->execute();
}

/**
 * Change a card's activated date
 */
function ms_gift_cards_change_activated_date($id, $time = NULL) {
  $time = ($time) ? $time : REQUEST_TIME;
  return db_update('ms_gift_cards')
    ->fields(array(
      'activated' => $time,
    ))
    ->condition('id', $id)
    ->execute();
}

/**
 * Change a card's activated user
 */
function ms_gift_cards_change_activated_user($id, $uid) {
  return db_update('ms_gift_cards')
    ->fields(array(
      'activated_user' => $uid,
    ))
    ->condition('id', $id)
    ->execute();
}

/**
 * Change a card's redeemed date
 */
function ms_gift_cards_change_redeemed_date($id, $time = NULL) {
  $time = ($time) ? $time : REQUEST_TIME;
  return db_update('ms_gift_cards')
    ->fields(array(
      'redeemed' => $time,
    ))
    ->condition('id', $id)
    ->execute();
}

/**
 * Change a card's redeemed user
 */
function ms_gift_cards_change_redeemed_user($id, $uid) {
  return db_update('ms_gift_cards')
    ->fields(array(
      'redeemed_user' => $uid,
    ))
    ->condition('id', $id)
    ->execute();
}

/**
 * Load a Gift Card Record
 */
function ms_gift_cards_load_gift_card($id) {
  $result = db_query("SELECT * FROM {ms_gift_cards} WHERE id = :id", array(':id' => $id));
  foreach ($result as $gift_card) {
    return $gift_card;
  }
  return FALSE;
}

/**
 * Load a Gift Card by Order ID
 */
function ms_gift_cards_load_gift_card_order_id($oid) {
  $result = db_query("SELECT * FROM {ms_gift_cards} WHERE oid = :oid", array(':oid' => $oid));
  foreach ($result as $row) {
    return $row;
  }
  return FALSE;
}

/**
 * Load a Gift Card by Code
 */
function ms_gift_cards_load_gift_card_by_code($code) {
  $result = db_query("SELECT * FROM {ms_gift_cards} WHERE code = :code", array(':code' => strtoupper($code)));
  foreach ($result as $row) {
    return $row;
  }
  return FALSE;
}

// ======================================
// User Pages:
// ======================================

/**
 * Redeem a Gift Card
 */
function ms_gift_cards_redeem_card() {
  $code = arg(1);
  // Load the gift card by the code
  if ($gift_card = ms_gift_cards_load_gift_card_by_code($code)) {
    // Check that the status is set to Activated (able to be redeemed)
    if ($gift_card->status == 'activated') {
      global $user;
      $html = '';

      // Check if the user is logged in
      if ($user->uid) {
        // Check if the user is not allowed to redeem gift card based on role
        if (user_access('block redeem gift card')) {
          // Inform the user that they are unable to redeem the gift with the current account. Give option to logout.
          $html .= t("You are currently logged in as @name.
            You currently are not able to redeem this gift.
            You have the option to get credited for the amount of the gift or credit back the giver.  Please !contact if you wish to receive a refund.
            If this is not the account you wish to use to claim the gift, you can !logout to logout.",
            array(
              '@name' => $user->name,
              '!logout' => l(t('click here'), 'user/logout', array('query' => drupal_get_destination())),
              '!contact' => l(t('contact us'), 'contact'),
            ));
        } else {
          // Ask the user if they want to use the account to apply the gift to. Give option to logout.
          $html .= t("You are currently logged in as @name. If this is the account you wish to claim the gift for, click the Claim Gift button below. If this is not the account you wish to use to claim the gift, you can !logout to logout.",
            array(
              '@name' => $user->name,
              '!logout' => l('click here', 'user/logout', array('query' => drupal_get_destination())),
            ));
          $html .= drupal_render(drupal_get_form('ms_gift_cards_redeem_card_form', $gift_card));
        }
      } else {
        // Show a form for the user to enter their username, email, and password
        $html .= drupal_render(drupal_get_form('ms_gift_cards_redeem_card_register_form', $gift_card));
      }
      return $html;
    } else {
      // Show a message and go to the redeem page
      drupal_set_message(t('That gift card code is not yet activated.'));
      drupal_goto('giftcard');
    }
  } else {
    return drupal_get_form('ms_gift_cards_enter_code_form');
  }
}

/**
 * Build Function for the Redeem Gift Card Form
 */
function ms_gift_cards_redeem_card_register_form($form, $form_state, $gift_card) {
  // Load the gift product
  $gift = ms_core_load_module_product($gift_card->module, $gift_card->product_id);

  $form['gift_card'] = array(
    '#type' => 'value',
    '#value' => $gift_card,
  );

  // Show the details of the gift card here
  $form['gift']['gift_code'] = array(
    '#title' => t('Code'),
    '#type' => 'item',
    '#value' => $gift_card->code,
  );
  $form['gift']['gift_name'] = array(
    '#title' => t('Gift'),
    '#type' => 'item',
    '#value' => $gift->name,
  );

  $form['information'] = array(
    '#type' => 'fieldset',
    '#title' => t('Customer Information'),
    '#description' => t('Create a new account for your gift or !click to login with an existing account to claim the gift.', array('!click' => l('click here', 'user/login', array('query' => drupal_get_destination())))),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['information']['gift_card'] = array(
    '#type' => 'value',
    '#value' => $gift_card,
  );
  $form['information']['email1'] = array(
    '#type' => 'textfield',
    '#title' => t('E-mail Address'),
    '#size' => 32,
    '#required' => TRUE,
  );
  $form['information']['email2'] = array(
    '#type' => 'textfield',
    '#title' => t('Confirm E-mail Address'),
    '#size' => 32,
    '#required' => TRUE,
  );
  $form['information']['username'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#size' => 32,
    '#required' => TRUE,
  );
  $form['information']['password1'] = array(
    '#type' => 'password',
    '#title' => t('Password'),
    '#size' => 32,
    '#required' => TRUE,
  );
  $form['information']['password2'] = array(
    '#type' => 'password',
    '#title' => t('Confirm Password'),
    '#size' => 32,
    '#description' => t('Passwords must match to proceed'),
    '#required' => TRUE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Create Account'),
    '#validate' => array('ms_gift_cards_redeem_card_register_form_validate'),
    '#submit' => array('ms_gift_cards_redeem_card_register_form_submit'),
    '#weight' => 999,
  );

  $form_state['#redirect'] = 'user';
  return $form;
}

/**
 * Validate Function for the Redeem Gift Card Form
 */
function ms_gift_cards_redeem_card_register_form_validate($form, &$form_state) {
  $v = $form_state['values'];
  // Verify Email Address is real
  if (!valid_email_address($v['email1'])) {
    form_set_error('email1', t('Please enter a valid email address'));
  }
  // Verify Email Addresses Match
  if ($v['email1'] != $v['email2']) {
    form_set_error('email2', t('The email addresses do not match'));
  }
  // Verify Email Address is not being used
  $email_account = user_load_by_mail($v['email1']);
  if ($email_account->uid) {
    form_set_error('email1', t('The email address you entered is already being used by an account on this site.
    Please !login to the account associated with this email address before proceeding.',
      array('!login' => l('log in', 'user/login', array('query' => drupal_get_destination())))
    ));
  }
  // Verify Username is not being used
  $name_account = user_load_by_name($v['username']);
  if ($name_account->uid) {
    form_set_error('username', t('The username you specified is already in use. Please choose a different username before proceeding.'));
  }
  // Verify Passwords Match
  if ($v['password1'] != $v['password2']) {
    form_set_error('password2', t('The passwords do not match'));
  }
}

/**
 * Submit Function for the Redeem Gift Form
 */
function ms_gift_cards_redeem_card_register_form_submit($form, &$form_state) {
  $v = $form_state['values'];

  // Create the user account
  $pass = ($v['password1']) ? $v['password1'] : user_password();
  $name = ($v['username']) ? $v['username'] : ms_core_create_username($v['email1']);
  $roles = array();

  $account = user_save('', array(
    'name' => $name,
    'mail' => $v['email1'],
    'init' => $v['email1'],
    'pass' => $pass,
    'roles' => $roles,
    'status' => 1,
  ));

  $account->password = $pass;

  //Send the Default Email
  _user_mail_notify('register_no_approval_required', $account);

  global $user;

  $user = $account;

  $gift_card = $v['gift_card'];

  // Redeem the gift
  ms_gift_cards_redeem_gift($account, $gift_card);

  $form_state['account'] = $account;

  // Notify the user
  drupal_set_message(t('Your gift has been redeemed, and you have been automatically logged in.'));
}

/**
 * Build Function for the Redeem Gift Card Form
 */
function ms_gift_cards_redeem_card_form($form, $form_state, $gift_card) {
  // Load the gift product
  $gift = ms_core_load_module_product($gift_card->module, $gift_card->product_id);

  $form['gift_card'] = array(
    '#type' => 'value',
    '#value' => $gift_card,
  );

  // Show the details of the gift card here
  $form['gift']['gift_code'] = array(
    '#title' => t('Code'),
    '#type' => 'item',
    '#value' => $gift_card->code,
  );
  $form['gift']['gift_name'] = array(
    '#title' => t('Gift'),
    '#type' => 'item',
    '#value' => $gift->name,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Claim Gift'),
  );
  $form_state['#redirect'] = '';
  return $form;
}

/**
 * Submit Function for the Redeem Gift Form
 */
function ms_gift_cards_redeem_card_form_submit($form, &$form_state) {
  global $user;

  $gift_card = $form_state['values']['gift_card'];

  // Redeem the gift
  ms_gift_cards_redeem_gift($user, $gift_card);

  // Notify the user
  drupal_set_message(t('Your gift has been redeemed.'));
}

/**
 * Helper Function to redeem a gift for an account
 */
function ms_gift_cards_redeem_gift($account, $gift_card) {
  // Load the appropriate product
  $product = ms_core_load_module_product($gift_card->module, $gift_card->product_id);

  // Create a new order, add the product to it, and insert a payment to process it
  $order = ms_core_order_new('cart', $account->uid);

  ms_core_order_save($order);

  // Set the product to be cart because recurring products don't work
  $product->type = 'cart';
  $product->amount = 0;

  // Add the product to the order
  ms_core_add_order_product($order, $product);

  // Enter the payment for the order
  $payment = ms_core_new_payment($order->oid, 'ms_core', 'cart');
  // Generate a Unique Transaction ID
  $payment->transaction = drupal_get_token(serialize($order));
  $payment->currency = $order->currency;

  // Enter a payment for 0
  ms_core_enter_payment($payment, FALSE);

  // Change the Gift Card Status to 'Redeemed'
  ms_gift_cards_change_gift_card_status($gift_card->id, 'redeemed');
  ms_gift_cards_change_redeemed_date($gift_card->id);
  ms_gift_cards_change_redeemed_user($gift_card->id, $account->uid);

  // Invoke hook_ms_gift_cards_redemption
  module_invoke_all('ms_gift_cards_redemption', $account, $gift_card, $order, $product);
}

/**
 * Used for Activating Gift Cards
 */
function ms_gift_cards_activate_card() {
  $code = arg(1);
  if ($gift_card = ms_gift_cards_load_gift_card_by_code($code)) {
    return drupal_get_form('ms_gift_cards_activate_card_form', $gift_card);
  } else {
    return drupal_get_form('ms_gift_cards_enter_code_form');
  }
}

/**
 * Build Function for the Enter Code Form
 */
function ms_gift_cards_enter_code_form($form, $form_state) {
  $form['gift'] = array(
    '#type' => 'fieldset',
    '#title' => t('Gift Card Code'),
    '#weight' => -49,
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );

  $form['gift']['code'] = array(
    '#type' => 'textfield',
    '#title' => t('Code'),
    '#size' => 32,
    '#required' => TRUE,
    '#description' => t('Enter the code found on your card'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Enter'),
  );

  return $form;
}

/**
 * Validate Function for the Redeem Gift Card Form
 */
function ms_gift_cards_enter_code_form_validate($form, &$form_state) {
  // Attempt to load the gift card object
  if (!$gift_card = ms_gift_cards_load_gift_card_by_code($form_state['values']['code'])) {
    form_set_error('code', t('The code you entered is not valid. Please try again.'));
  }

  // If the card is redeemed, show error
  if ($gift_card->status == 'redeemed') {
    form_set_error('code', t('The code you entered has already been redeemed. Please try again.'));
  }
}

/**
 * Submit Function for the Enter Code Form
 */
function ms_gift_cards_enter_code_form_submit($form, &$form_state) {
  // Load the gift card object
  $gift_card = ms_gift_cards_load_gift_card_by_code($form_state['values']['code']);

  switch ($gift_card->status) {
    case 'activated':
      // Redirect to the redeem page if the gift card has already been activated
      drupal_goto('giftcard/' . $gift_card->code);
      break;

    case 'redeemed':
      // Show a message if the code has already been used
      drupal_set_message(t('This gift card has already been redeemed.'));
      return;
      break;

    case 'dormant':
    case 'printed':
      // Redirect to the activate page if the card is dormant
      drupal_goto('activate/' . $gift_card->code);
      break;
  }
}

/**
 * Build Function for the Gift Card Form
 */
function ms_gift_cards_activate_card_form($form, $form_state, $gift_card) {
  // Load the gift product
  $gift = ms_core_load_module_product($gift_card->module, $gift_card->product_id);

  $form['gift'] = array(
    '#type' => 'fieldset',
    '#title' => t('Activate Gift Card'),
    '#weight' => -49,
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['gift_card'] = array(
    '#type' => 'value',
    '#value' => $gift_card,
  );

  // Show the details of the gift card here
  $form['gift']['gift_code'] = array(
    '#title' => t('Code'),
    '#type' => 'item',
    '#markup' => $gift_card->code,
  );
  $form['gift']['gift_name'] = array(
    '#title' => t('Gift'),
    '#type' => 'item',
    '#markup' => $gift->name,
  );
  $form['gift']['gift_amount'] = array(
    '#title' => t('Amount'),
    '#type' => 'item',
    '#markup' => ms_core_format_money($gift_card->amount),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Pay'),
  );
  $form_state['#redirect'] = 'ms/checkout';
  return $form;
}

/**
 * Submit Function for the Gift Card Form
 */
function ms_gift_cards_activate_card_form_submit($form, &$form_state) {
  // Load the Gift Card
  $gift_card = $form_state['values']['gift_card'];

  if ($gift_card->id) {
    // Set the affiliate
    if (module_exists('ms_affiliates')) {
      if ($affiliate = user_load($gift_card->affiliate)) {
        $_SESSION['affiliate'] = $affiliate->uid;

        //Set the cookie
        ms_affiliates_set_cookie($_SESSION['affiliate']);

        // Record the click
        ms_affiliates_clicked($affiliate, 'activate');
      }
    }

    // Load the gift product
    $gift = ms_core_load_module_product($gift_card->module, $gift_card->product_id);

    // Create the new product for the card
    // Create a new product and add it to the order
    $product = ms_core_new_product(t('Gift Card: @product', array('@product' => $gift->name)), 'ms_gift_cards', $gift_card->id, $gift_card->amount);

    // Store the Data
    $product->data = array(
      'gift_card_code' => $gift_card->code,
    );

    ms_core_add_cart_product($product);

    ms_core_checkout();
  } else {
    drupal_set_message(t('There was an error loading the gift card.'));
  }
}

// ======================================
// MAIL
// ======================================


/**
 * Handle Mail functions
 */
function ms_gift_cards_mail($key, &$message, $gift_card) {
  // Load some variables
  $order = ms_core_order_load($gift_card->oid);
  $payment = ms_core_get_last_payment($order);
  $product = ms_core_load_module_product($gift_card->module, $gift_card->product_id);
  $account = user_load($order->uid);

  switch ($key) {
    case 'activated_email':
      $subject = variable_get('ms_gift_cards_gift_activated_mail_subject', '');
      $body = variable_get('ms_gift_cards_gift_activated_mail_body', '');

      // Replace the Tokens
      $message['subject'] = token_replace($subject,
        array(
          'ms_gift_cards' => $gift_card,
          'ms_core_product' => $product,
          'ms_core_order' => $order,
          'ms_core_payment' => $payment,
          'user' => $account,
        ));
      $message['body'][] = token_replace($body,
        array(
          'ms_gift_cards' => $gift_card,
          'ms_core_product' => $product,
          'ms_core_order' => $order,
          'ms_core_payment' => $payment,
          'user' => $account,
        )
      );
      break;
  }
}

// ======================================
// TOKEN
// ======================================


/**
 * Implements hook_token_list().
 */
function ms_gift_cards_token_list($type = 'all') {
  $tokens = array();
  if ($type == 'ms_gift_cards' || $type == 'all') {
    $tokens['Gift Cards']['activatedDate'] = t("The date the card was activated");
    $tokens['Gift Cards']['redeemedDate'] = t("The date the card was redeemed");
    $tokens['Gift Cards']['createdDate'] = t("The date the card was created");
    $tokens['Gift Cards']['affiliateName'] = t("The name of the affiliate");
    $tokens['Gift Cards']['giftCode'] = t("The gift card code");
    $tokens['Gift Cards']['activateUrl'] = t("The message entered for the gift card");
    $tokens['Gift Cards']['redeemUrl'] = t("The URL to redeem the gift card");
  }

  return $tokens;
}

/**
 * Implements hook_token_values().
 */
function ms_gift_cards_token_values($type, $object = NULL, $options = array()) {
  $tokens = array();
  if ($type == 'ms_gift_cards') {
    $affiliate = user_load($object->affiliate);
    $tokens['activatedDate'] = ($object->activated) ? format_date($object->activated, 'short') : t('Not yet Activated');
    $tokens['redeemedDate'] = ($object->redeemed) ? format_date($object->redeemed, 'short') : t('Not yet Redeemed');
    $tokens['createdDate'] = format_date($object->created, 'short');
    $tokens['affiliateName'] = $affiliate->name;
    $tokens['giftCode'] = $object->code;
    $tokens['activateUrl'] = url('activate', array('absolute' => TRUE));
    $tokens['redeemUrl'] = url('giftcard', array('absolute' => TRUE));
  }

  return $tokens;
}

// ======================================
// MS Hooks
// ======================================


/**
 * Implements hook_ms_order_payment().
 */
function ms_gift_cards_ms_order_payment($type, $product, $order, $payment) {
  if ($product->module == 'ms_gift_cards') {

    ms_core_log('ms_gift_cards', 'Acting on a Gift Card Payment. Here are the details: !product',
      array('!product' => ms_core_print_r($product)));

    // Load the user account
    $account = user_load($order->uid);

    // Load the Gift Card object
    if ($gift_card = ms_gift_cards_load_gift_card_by_code($product->data['gift_card_code'])) {
      // Handle Refunds
      if ($type == 'refund' OR $type == 'reversal') {
        ms_core_log('ms_gift_cards', 'Refund Notice received for MS Gift Cards, deactivating gift card with code %code',
          array('%code' => $gift_card->code));

        // Set the gift card status back to dormant
        // db_query("DELETE FROM {ms_gift_cards} WHERE oid = %d", $order->oid);

        ms_gift_cards_change_gift_card_status($gift_card->id, 'dorman');
      } else {
        // Change the Gift Card Status to 'Activated'
        ms_gift_cards_change_gift_card_status($gift_card->id, 'activated');
        ms_gift_cards_change_activated_date($gift_card->id);
        ms_gift_cards_change_activated_user($gift_card->id, $account->uid);

        // Invoke hook_ms_gift_cards_activation
        module_invoke_all('ms_gift_cards_activation', $account, $gift_card, $order, $product, $payment);

        // Send Activation Email
        drupal_mail('ms_gift_cards', 'activated_email', $account->mail, user_preferred_language($account), $gift_card);
      }
    } else {
      ms_core_log_error('ms_gift_cards', "Error loading the gift card. Order: !order", array('!order' => ms_core_print_r($order)));
    }
  }
}

/**
 * Implements hook_ms_product_load().
 */
function ms_gift_cards_ms_product_load($module, $id) {
  if ($module == 'ms_gift_cards') {
    $gift_card = ms_gift_cards_load_gift_card($id);
    $gift = ms_core_load_module_product($gift_card->module, $gift_card->product_id);

    if ($gift_card->id) {
      $product = ms_core_new_product(t('Gift Card: @product', array('@product' => $gift->name)), 'ms_gift_cards', $gift_card->id, $gift_card->amount);

      // Store the Data Overrides
      $product->data = $gift_card;

      return $product;
    }
  }
}

/**
 * Implements hook_ms_product_id_change()
 */
function ms_gift_cards_ms_product_id_change($old_id, $new_id) {
  list($new_id_module, $new_id_id) = explode('-', $new_id);
  list($old_id_module, $old_id_id) = explode('-', $old_id);
  db_update('ms_gift_cards')
    ->fields(array(
      'module' => $new_id_module,
      'product_id' => $new_id_id,
    ))
    ->condition('product_id', $old_id_id)
    ->condition('module', $old_id_module)
    ->execute();
}

// ======================================
// RULES
// ======================================

/**
 * Implements hook_ms_gift_cards_activation().
 */
function ms_gift_cards_ms_gift_cards_activation($account, $gift_card, $order, $product, $payment) {
  if (module_exists('rules')) {
    rules_invoke_event('ms_gift_cards_event_activation', $account, $gift_card, $order, $product, $payment);
  }
}

/**
 * Implements hook_ms_gift_cards_redemption().
 */
function ms_gift_cards_ms_gift_cards_redemption($account, $gift_card, $order, $product) {
  if (module_exists('rules')) {
    rules_invoke_event('ms_gift_cards_event_redemption', $account, $gift_card, $order, $product);
  }
}

/**
 * Implements hook_ms_coupons().
 */
function ms_gift_cards_ms_coupons($code) {
  $coupons = array();

  if (($gift_card = ms_gift_cards_load_gift_card_by_code($code)) && !$gift_card->redeemed) {
    //dpm($gift_card);
    $coupons[$code] = (object)array(
      'cid' => 'gc-' . $gift_card->id,
      'name' => t('Gift card'),
      'code' => $code,
      'value' => $gift_card->value,
      'type' => $gift_card->type,
      'scope' => $gift_card->scope,
      'status' => 'active',
      'valid_until' => 0,
      'used' => 0,
      'max_uses' => 1,
      'minimum_order' => 0,
      'data' => array(
        'products' => array($gift_card->module . '-' . $gift_card->product_id),
        'gift_card_id' => $gift_card->id,
      ),
    );
  }

  return $coupons;
}

/**
 * Implements hook_ms_coupon_added().
 */
function ms_gift_cards_ms_coupon_added($code) {
  /*
  // We're doing this later when the order is completed. This isn't as secure, because someone could theoretically use
  // the coupon twice or more times in different sessions then checkout with them all at once. FIXME
  // Mark the gift card as redeemed when it is added to the cart.
  if ($gift_card = ms_gift_cards_load_gift_card_by_code($code)) {
    $gift_card->status = 'redeemed';
    $gift_card->redeemed = REQUEST_TIME;
    $gift_card->redeemed_user = 0;
    drupal_write_record('ms_gift_cards', $gift_card, 'id');
  }
  */
}

/**
 * Implements hook_ms_order_payment_total().
 */
function ms_gift_cards_ms_order_payment_total($type, $order, $payment) {
  foreach ($order->adjustments as $adjustment) {
    // If the adjustment is a gift_card, we need to set the redeemed_user for the gift card record.
    if (!empty($adjustment->data['gift_card_id'])) {
      if ($gift_card = ms_gift_cards_load_gift_card($adjustment->data['gift_card_id'])) {
        $gift_card->status = 'redeemed';
        $gift_card->redeemed = REQUEST_TIME;
        $gift_card->redeemed_user = $order->uid;
        drupal_write_record('ms_gift_cards', $gift_card, 'id');
      }
    }
  }
}

/**
 * Implements hook_entity_info().
 */
function ms_gift_cards_entity_info() {
  return array(
    'ms_gift_card' => array(
      'label' => t('Gift Card'),
      'base table' => 'ms_gift_cards',
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIController',
      'entity keys' => array(
        'id' => 'id',
      ),
      'fieldable' => FALSE,
      'label callback' => 'ms_gift_cards_label',
      'module' => 'ms_gift_cards',
    ),
  );
}

/**
 * Creates the label for a Gift Card.
 *
 * @param object $entity
 *   The entity order.
 * @param string $entity_type
 *   The entity type.
 *
 * @return string
 *   The label for the gift card.
 */
function ms_gift_cards_label($entity, $entity_type) {
  return t('Gift card: @num', array('@num' => $entity->code));
}

/**
 * Implements hook_entity_property_info_alter().
 */
function ms_gift_cards_entity_property_info_alter(&$info) {
  $ms_gift_card = & $info['ms_gift_card']['properties'];
  $ms_gift_card['oid']['type'] = 'ms_order';
  $ms_gift_card['affiliate']['type'] = 'user';
  $ms_gift_card['activated_user']['type'] = 'user';
  $ms_gift_card['redeemed_user']['type'] = 'user';

  $ms_gift_card['type']['options list'] = 'ms_gift_cards_get_types';
  $ms_gift_card['scope']['options list'] = 'ms_core_get_scopes';
  $ms_gift_card['status']['options list'] = 'ms_gift_cards_get_gift_card_statuses';

  $ms_gift_card['activated']['type'] = 'date';
  $ms_gift_card['redeemed']['type'] = 'date';
  $ms_gift_card['created']['type'] = 'date';

  $ms_gift_card['product_name'] = array(
    'label' => t('Product name'),
    'getter callback' => 'ms_gift_cards_product_getter_callback',
    'entity views field' => TRUE,
    'computed' => TRUE,
  );
}

/**
 * Getter callback for the notes for an order.
 */
function ms_gift_cards_product_getter_callback($data, array $options, $name, $type, $info) {
  if (!empty($data->product_id) && !empty($data->module) && $product = ms_core_load_module_product($data->module, $data->product_id)) {
    return $product->name;
  }

  return '';
}

/**
 * Implements hook_views_api().
 */
function ms_gift_cards_views_api() {
  return array('api' => 3.0);
}