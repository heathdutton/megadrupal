<?php

/**
 * @file
 * MS Drip Content module which enables you to create Drip 'Sets' and subscribe
 * users to these sets with Rules.
 *
 * Original author: Leighton Whiting - Released under GENERAL PUBLIC LICENSE 
 * Current maintenance by multiple MoneySuite users.
 * Re: new initiative: https://www.drupal.org/node/2315653
 *
 * @todo - Set Items view should show a summary of the actions and conditions attached to the rule
 */

// @todo - Add ability to clone drip sets.

/**
 * Implements hook_help().
 */
function ms_drip_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/help#ms_drip":
      $output = '<p>' . t("The Drip Content module allows you to create Drip Sets
        which contain Drip Set Items which can contain any Rules action. This makes
        it extremely powerful.") . '</p>';
      break;
    case "admin/structure/ms_drip_sets":
      $output .= '<p>' . t("From this page you can manage your Drip Sets, add new
        Drip Sets, and add Drip Set Items to Drip Sets.") . '</p>';
      break;
    case "admin/structure/ms_drip_sets/subscriptions/list":
      $output .= '<p>' . t("From this page you can view all of the current drip subscriptions
        and edit them, as well as add new subscriptions manually.") . '</p>';
      break;
  }
  return $output;
}

/**
 * Implements hook_permission().
 */
function ms_drip_permission() {
  return array(
    'administer ms_drip' => array(
      'title' => t('administer ms_drip'),
      'description' => t('Administer MS Drip Content.'),
    ),
    'unsubsribe drip sets' => array(
      'title' => t('unsubsribe drip sets'),
      'description' => t('Unsubscribe from drip sets.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function ms_drip_menu() {
  $items = array();
  $items['admin/structure/ms_drip_sets'] = array(
    'title' => 'Drip Sets',
    'page callback' => 'ms_drip_list_sets',
    'access arguments' => array('administer ms_drip'),
    'description' => 'Create and Edit Drip Sets',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/structure/ms_drip_sets/list'] = array(
    'title' => 'List Drip Sets',
    'page callback' => 'ms_drip_list_sets',
    'access arguments' => array('administer ms_drip'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => '-1',
  );
  $items['admin/structure/ms_drip_sets/add'] = array(
    'title' => 'Add Drip Set',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_drip_set_form', 'add'),
    'access arguments' => array('administer ms_drip'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/structure/ms_drip_sets/edit/%'] = array(
    'title' => 'Edit Drip Set',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_drip_set_form', 'edit', 4),
    'access arguments' => array('administer ms_drip'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/structure/ms_drip_sets/delete/%'] = array(
    'title' => 'Delete Drip Set',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_drip_delete_set_confirm', 4),
    'access arguments' => array('administer ms_drip'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/structure/ms_drip_sets/view/%'] = array(
    'title' => 'View Drip Set Items',
    'page callback' => 'ms_drip_list_set_items',
    'access arguments' => array('administer ms_drip'),
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );
  $items['admin/structure/ms_drip_sets/subscriptions'] = array(
    'title' => 'List Drip Subscriptions',
    'page callback' => 'ms_drip_list_subscriptions',
    'access arguments' => array('administer ms_drip'),
    'type' => MENU_LOCAL_TASK,
    'weight' => '9',
  );
  $items['admin/structure/ms_drip_sets/subscriptions/list'] = array(
    'title' => 'List Drip Subscriptions',
    'page callback' => 'ms_drip_list_subscriptions',
    'access arguments' => array('administer ms_drip'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => '9',
  );
  $items['admin/structure/ms_drip_sets/subscriptions/add'] = array(
    'title' => 'Add Drip Subscription',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_drip_subscription_form', 'add'),
    'access arguments' => array('administer ms_drip'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/structure/ms_drip_sets/subscriptions/edit/%'] = array(
    'title' => 'Edit Drip Subscription',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_drip_subscription_form', 'edit', 5),
    'access arguments' => array('administer ms_drip'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/structure/ms_drip_sets/subscriptions/delete/%'] = array(
    'title' => 'Delete Drip Subscription',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_drip_delete_subscription_confirm', 5),
    'access arguments' => array('administer ms_drip'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/structure/ms_drip_sets/subscriptions/view/%'] = array(
    'title' => 'View Drip Subscription',
    'page callback' => 'ms_drip_view_drip_subscription',
    'page arguments' => array(5),
    'access arguments' => array('administer ms_drip'),
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );
  $items['admin/structure/ms_drip_sets/view/%/add'] = array(
    'title' => 'Add Drip Set Item',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_drip_set_item_form', 'add', 4),
    'access arguments' => array('administer ms_drip'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/structure/ms_drip_sets/view/%/edit/%'] = array(
    'title' => 'Edit Drip Set Item',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_drip_set_item_form', 'edit', 4, 6),
    'access arguments' => array('administer ms_drip'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/structure/ms_drip_sets/view/%/delete/%'] = array(
    'title' => 'Delete Drip Set Item',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_drip_delete_set_item_confirm', 6),
    'access arguments' => array('administer ms_drip'),
    'type' => MENU_CALLBACK,
  );
  $items['ms_drip/unsubscribe/%'] = array(
    'title' => 'Unsubscribe',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_drip_user_unsubscribe_confirm_form', 2),
    'access arguments' => array('unsubsribe drip sets'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function ms_drip_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  switch ($root_path) {
    case 'admin/structure/ms_drip_sets/view/%':
      $item = menu_get_item('admin/structure/ms_drip_sets/view/' . arg(4) . '/add');
      if ($item['access']) {
        $data['actions']['output'][] = array(
          '#theme' => 'menu_local_action',
          '#link' => $item,
        );
      }
      break;
  }
}

// ======================================
// General:
// ======================================

/**
 * Implements hook_cron().
 */
function ms_drip_cron() {
  // Fire the appropriate rules
  $now = REQUEST_TIME;

  // Load the items once so we don't have to do it over and over
  $t_sets = ms_drip_get_sets();
  $sets = array();
  foreach ($t_sets as $set) {
    $sets[$set->id] = ms_drip_get_set_items($set->id);
  }

  // Load all of the active subscriptions
  $result = db_query("SELECT * FROM {ms_drip_subscriptions} WHERE status = :status", array(':status' => 1));

  foreach ($result as $subscription) {
    foreach ($sets[$subscription->set_id] as $item) {
      // Get the date this item should fire
      $item_run_date = ms_drip_get_item_run_date($subscription->start_date, $item->day);

      // Check if it needs to trigger the next item
      if (($subscription->last_run < $item_run_date) AND ($item_run_date < $now)) {
        // Load the user
        $account = user_load($subscription->uid);

        // Invoke the Rule
        if ($account->uid) {
          ms_drip_execute_item($item, $account);
        } else {
          ms_core_log_error('ms_drip', 'Error loading user for a drip subscription.');
        }

        // Update the subscription
        ms_drip_update_subscription_last_run($subscription->id, $now);
      }
    }
  }
}


// ======================================
// Functions:
// ======================================

/**
 * Gets the date that an item should run for a subscription
 *
 * @param $start
 *   The timestamp that the subscription started
 * @param $days
 *   The number of days that the item is set for
 * @return
 *   The timestamp that the item should run
 */
function ms_drip_get_item_run_date($start, $days) {
  return strtotime("+" . $days . ' days', $start);
}

/**
 * Updates the last run time of a subscription
 *
 * @param $id
 *   The subscription id
 * @param $time
 *   The new timestamp
 */
function ms_drip_update_subscription_last_run($id, $time) {
  return db_update('ms_drip_subscriptions')
    ->fields(array(
      'last_run' => $time,
    ))
    ->condition('id', $id)
    ->execute();
}

/**
 * List the drip set items in the admin area
 */
function ms_drip_list_set_items() {
  $set_id = arg(4);

  $build = array();
  $build['content'] = array(
    'ms_drip_set_header' => array(
      '#markup' => t("These are the Items in this set"),
    ),
    'ms_drip_items' => drupal_get_form('ms_drip_view_set_items_form', $set_id),
  );

  return $build;
}

/**
 * Show the items that belong to a set
 *
 * @param $set_id
 *   The set id
 */
function theme_ms_drip_view_set_items_form($variables) {
  $form = $variables['form'];
  $output = '';
  // Show a list of the items, along with links such as Edit and Delete
  $headers = array(
    array(
      'data' => t('Name'),
      'class' => array('ms_drip_items_name_header'),
    ),
    array(
      'data' => t('Rules'),
      'class' => array('ms_drip_items_rules_header'),
    ),
    array(
      'data' => t('Actions'),
      'class' => array('ms_drip_items_actions_header'),
    ),
    array(
      'data' => t('Day'),
      'class' => array('ms_drip_items_day_header'),
    ),
  );
  $rows = array();
  $attr = array('id' => 'ms-drip-items-table');

  if (isset($form['rows']) AND is_array($form['rows'])) {
    foreach ($form['rows'] as $mpid => $row) {
      if (intval($mpid)) {
        $this_row = $row['data']['#value'];

        $this_row[] = drupal_render($form['rows'][$mpid]['day-' . $mpid]);

        $rows[] = array('data' => $this_row, 'class' => array('draggable'));
      }
    }

    $output .= theme('table', array('header' => $headers, 'rows' => $rows, 'attributes' => $attr, 'empty' => t('No drip set items yet.')));
    $output .= drupal_render_children($form);
    drupal_add_tabledrag('ms-drip-items-table', 'order', 'sibling', 'day');
  } else {
    $output .= "No Items Found - Use the 'Add Item' Link to add items";
  }

  return $output;
}

/**
 * Helper function to get the rule item name
 */
function ms_drip_get_item_rule_name($set, $item) {
  return t('@set_name : @item_name (@day)', array('@set_name' => $set->name, '@item_name' => $item->name, '@day' => $item->day));
}

/**
 * Helper function to execute a rule item
 */
function ms_drip_execute_item($item, $account) {
  if ($rule = ms_drip_load_item_rule($item)) {
    $state = $rule->setUpState(array('site' => array(), 'account' => $account));

    return $rule->evaluate($state);
  }

  return FALSE;
}

/**
 * Form to List the Items for a drip set
 */
function ms_drip_view_set_items_form($form, &$form_state, $set_id) {
  $result = db_query("SELECT * FROM {ms_drip_items} WHERE set_id = :set_id ORDER BY day ASC", array(':set_id' => $set_id));
  foreach ($result as $item) {
    $actions = array(
      l(t('Edit'), 'admin/structure/ms_drip_sets/view/' . $set_id . '/edit/' . $item->id),
      l(t('Delete'), 'admin/structure/ms_drip_sets/view/' . $set_id . '/delete/' . $item->id),
    );
    $rules = array();
    if ($rule = ms_drip_load_item_rule($item)) {
      $rules[] = l($rule->label,
        'admin/config/workflow/rules/reaction/manage/' . $rule->name,
        array('attributes' => array('target' => '_blank')));
    }
    $row = array(
      array(
        'data' => $item->name,
        'class' => array('ms_drip_item_name'),
      ),
      array(
        'data' => implode(' | ', $rules),
        'class' => array('ms_drip_item_rules'),
      ),
      array(
        'data' => implode(' | ', $actions),
        'class' => array('ms_drip_item_actions'),
      ),
    );

    $form['rows'][$item->id]['data'] = array(
      '#type' => 'value',
      '#value' => $row,
    );

    $form['rows'][$item->id]['day-' . $item->id] = array(
      '#type' => 'textfield',
      '#size' => 5,
      '#default_value' => $item->day,
      '#attributes' => array('class' => array('day')),
    );
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save changes'),
  );

  return $form;
}

/**
 * Saves the day from the tabledrag
 *
 * @param $form
 * @param $form_state
 */
function ms_drip_view_set_items_form_submit($form, &$form_state) {
  foreach ($form_state['values'] as $key => $day) {
    if (substr($key, 0, 3) == 'day') {
      $id = str_replace('day-', '', $key);

      db_update('ms_drip_items')
        ->fields(array(
          'day' => $day,
        ))
        ->condition('id', $id)
        ->execute();

      // Update the rule
      $item = ms_drip_load_item($id);
      ms_drip_save_item_rule($item);
    }
  }

  // Clear the cache so that rules will update
  rules_clear_cache();
}

// ======================================
// THEME
// ======================================
/**
 * Main Theme Function
 */
function ms_drip_theme() {
  return array(
    'ms_drip_view_set_items_form' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Shows a list of all sets with action links
 */
function ms_drip_list_sets() {
  // Show a list of the drip sets, along with links such as Edit, View and Delete
  $headers = array(
    array(
      'data' => t('Set Name'),
      'class' => array('ms_drip_set_name_header'),
    ),
    array(
      'data' => t('Description'),
      'class' => array('ms_drip_set_description_header'),
    ),
    array(
      'data' => t('Status'),
      'class' => array('ms_drip_set_status_header'),
    ),
    array(
      'data' => t('Actions'),
      'class' => array('ms_drip_set_actions_header'),
    ),
  );
  $rows = array();

  $sets = ms_drip_get_sets();

  foreach ($sets as $set) {
    $actions = array(
      l(t('View Items'), 'admin/structure/ms_drip_sets/view/' . $set->id),
      l(t('Edit'), 'admin/structure/ms_drip_sets/edit/' . $set->id),
      l(t('Delete'), 'admin/structure/ms_drip_sets/delete/' . $set->id),
    );
    $rows[] = array(
      l($set->name, 'admin/structure/ms_drip_sets/view/' . $set->id),
      $set->description,
      ms_drip_get_set_status_text($set->active),
      implode(' | ', $actions),
    );
  }

  return theme('table', array('header' => $headers, 'rows' => $rows, 'empty' => t('No drip sets yet.')));
}

/**
 * Gets the text name of a status code
 *
 * @param $status
 *   The status number
 * @return
 *   Text string with the status name
 */
function ms_drip_get_set_status_text($status) {
  switch ($status) {
    case 0:
      return t('Inactive');
    case 1:
      return t('Active');
    default:
      return $status;
  }
}

/**
 * Gets an array of all sets
 *
 * @return
 *   An array of all sets, keyed by set id
 */
function ms_drip_get_sets() {
  $result = db_query("SELECT * FROM {ms_drip_sets}");
  $sets = array();
  foreach ($result as $set) {
    $sets[$set->id] = $set;
  }
  return $sets;
}

/**
 * Gets a list of all sets
 *
 * @return
 *   An array of all sets, keyed by set id
 */
function ms_drip_get_sets_list() {
  $sets = ms_drip_get_sets();
  $list = array();
  foreach ($sets as $set) {
    $list[$set->id] = $set->name;
  }
  return $list;
}

/**
 * Gets an array of all items in a set
 *
 * @param $set_id
 *   The set id
 * @return
 *   An array of the items in the set
 */
function ms_drip_get_set_items($set_id) {
  $result = db_query("SELECT * FROM {ms_drip_items} WHERE set_id = :set_id", array(':set_id' => $set_id));
  $items = array();
  foreach ($result as $item) {
    $items[$item->id] = $item;
  }
  return $items;
}

/**
 * Creates a new subscription for a user
 *
 * @param $set_id
 *   The set id
 * @param $uid
 *   The user id
 * @return
 *   The new subscription object
 */
function ms_drip_start_set($set_id, $uid, $time = NULL) {
  // Insert a new record into the ms_drip_subscriptions table,
  // marking the status as active, and generating a code for the subscription using drupal_get_token
  $subscription = new stdClass();
  $subscription->uid = $uid;
  $subscription->set_id = $set_id;
  $subscription->status = 1;
  $subscription->start_date = ($time) ? $time : REQUEST_TIME;
  $subscription->code = drupal_get_token(serialize($subscription));
  $subscription->last_run = 0;
  drupal_write_record('ms_drip_subscriptions', $subscription);

  return $subscription;
}

/**
 * End a set for a user
 */
function ms_drip_end_set($set_id, $uid) {
  // Set the status of the subscription to inactive
  return db_update('ms_drip_subscriptions')
    ->fields(array(
      'status' => 0,
    ))
    ->condition('set_id', $set_id)
    ->condition('uid', $uid)
    ->execute();
}

/**
 * Deletes a set and all items associated with it
 *
 * @param $set_id
 *   The set id
 */
function ms_drip_delete_set($set_id) {
  if ($set = ms_drip_load_set($set_id)) {
    // First, we delete all of the items in the set
    $items = ms_drip_get_set_items($set->id);

    foreach ($items as $item) {
      ms_drip_delete_item($item->id);
    }

    // Then we delete the set from the database
    db_delete('ms_drip_sets')
      ->condition('id', $set->id)
      ->execute();
  }
}

/**
 * Deletes a subscription
 *
 * @param $set_id
 *   The set id
 */
function ms_drip_delete_subscription($subscription_id) {
  return db_delete('ms_drip_subscriptions')
    ->condition('id', $subscription_id)
    ->execute();
}

/**
 * Deletes an item properly
 *
 * @param $item_id
 *   The item id
 */
function ms_drip_delete_item($item_id) {
  if ($item = ms_drip_load_item($item_id)) {
    if ($rule = ms_drip_load_item_rule($item)) {
      // Delete the rule associated with this item
      $rule->delete();
    }

    // Delete from the database
    db_delete('ms_drip_items')
      ->condition('id', $item->id)
      ->execute();
  }
}

/**
 * Check if the user has a set
 */
function ms_drip_user_has_set($set_id, $uid) {
  if ($uid) {
    $result = db_query("SELECT * FROM {ms_drip_subscriptions} WHERE uid = :uid AND set_id = :set_id", array(':uid' => $uid, ':set_id' => $set_id));

    foreach ($result as $row) {
      return !empty($row);
    }
  }

  return FALSE;
}

/**
 * Load a subscription from a code
 */
function ms_drip_load_subscription_by_code($code) {
  $result = db_query("SELECT * FROM {ms_drip_subscriptions} WHERE code = :code", array(':code' => $code));

  foreach ($result as $row) {
    return $row;
  }

  return FALSE;
}

/**
 * Load a subscription
 */
function ms_drip_load_subscription($id) {
  $result = db_query("SELECT * FROM {ms_drip_subscriptions} WHERE id = :id", array(':id' => $id));

  foreach ($result as $row) {
    return $row;
  }

  return FALSE;
}

/**
 * Load a drip set
 */
function ms_drip_load_set($set_id) {
  $result = db_query("SELECT * FROM {ms_drip_sets} WHERE id = :id", array(':id' => $set_id));

  foreach ($result as $row) {
    return $row;
  }

  return FALSE;
}

/**
 * Load a drip set item
 */
function ms_drip_load_item($id) {
  $result = db_query("SELECT * FROM {ms_drip_items} WHERE id = :id", array(':id' => $id));

  foreach ($result as $row) {
    return $row;
  }

  return FALSE;
}

// ======================================
// Forms:
// ======================================

/**
 * Add and Edit form for Drip Sets
 */
function ms_drip_set_form($form, $form_state, $action = 'add', $id = NULL) {
  // Show a form for editing or adding the details for a drip set
  $is_edit = FALSE;

  // -----------------------------
  // Set Info
  // -----------------------------
  $form['set'] = array(
    '#type' => 'fieldset',
    '#title' => t('Set Info'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );

  $set = NULL;
  if ($action == 'edit') {
    $is_edit = TRUE;
    $set = ms_drip_load_set($id);
    // Store the Set ID
    $form['set']['id'] = array(
      '#type' => 'value',
      '#value' => $set->id,
    );
  }

  $form['set']['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Set Name'),
    '#size' => 32,
    '#maxlength' => 64,
    '#description' => t("The Name of this Set."),
    '#default_value' => ($is_edit) ? $set->name : '',
    '#required' => TRUE,
  );
  $form['set']['description'] = array(
    '#type' => 'textarea',
    '#title' => t('Description'),
    '#description' => t("The Description of this Set."),
    '#default_value' => ($is_edit) ? $set->description : '',
    '#required' => TRUE,
  );
  $form['set']['message'] = array(
    '#type' => 'textarea',
    '#title' => t('Message'),
    '#description' => t("The Message to show the user when they have subscribed"),
    '#default_value' => ($is_edit) ? $set->message : '',
  );
  $form['set']['active'] = array(
    '#type' => 'checkbox',
    '#return_value' => 1,
    '#title' => t('Active'),
    '#description' => t("If the set is active, it will be ran during cron."),
    '#default_value' => ($is_edit) ? $set->active : 1,
  );
  $form['set']['unsubscribe'] = array(
    '#type' => 'checkbox',
    '#title' => t('Unsubscribe User at End?'),
    '#return_value' => 1,
    '#description' => t("Whether or not the user should be unsubscribed at the end of the set."),
    '#default_value' => ($is_edit) ? $set->unsubscribe : 0,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  $form_state['#redirect'] = 'admin/structure/ms_drip_sets/list';

  return $form;
}

/**
 * Submit Function for the Set Form
 */
function ms_drip_set_form_submit($form, &$form_state) {
  $form_values = (object)$form_state['values'];

  if (isset($form_values->id)) {
    $set = ms_drip_load_set($form_values->id);
  } else {
    $set = new stdClass();
  }

  // Set the values
  $set->name = $form_values->name;
  $set->description = $form_values->description;
  $set->message = $form_values->message;
  $set->active = $form_values->active;
  $set->unsubscribe = $form_values->unsubscribe;

  if (isset($form_values->id)) {
    $set->id = $form_values->id;
    drupal_write_record('ms_drip_sets', $set, 'id');
  } else {
    drupal_write_record('ms_drip_sets', $set);
  }

  drupal_set_message(t('Set Saved: %sname.', array('%sname' => $set->name)));

  $form_state['redirect'] = 'admin/structure/ms_drip_sets';
}

/**
 * Confirm the deletion of a set
 */
function ms_drip_delete_set_confirm($form, &$form_state, $set_id) {
  // Show a confirmation form before deleting a drip set
  $set = ms_drip_load_set($set_id);
  if ($set->id) {
    $form['#id'] = $set->id;
    return confirm_form($form, t('Are you sure you want to delete this Set: %name?',
      array('%name' => $set->name)), 'admin/structure/ms_drip_sets/list', t('This action cannot be undone. It will also delete the items and rules associated with the set.'), t('Delete'));
  } else {
    drupal_not_found();
  }
}

/**
 * Delete a Set from Form
 */
function ms_drip_delete_set_confirm_submit($form, &$form_state) {
  $set = ms_drip_load_set($form['#id']);

  // Delete the set
  ms_drip_delete_set($set->id);

  drupal_set_message(t('Set %name has been deleted', array('%name' => $set->name)));
  $form_state['redirect'] = 'admin/structure/ms_drip_sets/list';

  // Clear the cache so that rules will update
  rules_clear_cache();
}

/**
 * Add and Edit form for Drip Set Items
 */
function ms_drip_set_item_form($form, $form_state, $action = 'add', $set_id = NULL, $id = NULL) {
  // Show a form for editing or adding the details for a drip set item
  $is_edit = FALSE;
  $item = NULL;

  // -----------------------------
  // Item Info
  // -----------------------------
  $form['item'] = array(
    '#type' => 'fieldset',
    '#title' => t('Set Info'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );

  if ($action == 'edit') {
    $is_edit = TRUE;
    $item = ms_drip_load_item($id);
    // Store the Set ID
    $form['item']['id'] = array(
      '#type' => 'value',
      '#value' => $item->id,
    );
  }

  $form['item']['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Item Name'),
    '#size' => 32,
    '#maxlength' => 64,
    '#description' => t("The Name of this Set."),
    '#default_value' => ($is_edit) ? $item->name : '',
    '#required' => TRUE,
  );
  $form['item']['day'] = array(
    '#type' => 'textfield',
    '#title' => t('Day'),
    '#size' => 32,
    '#maxlength' => 64,
    '#description' => t("The Day this item will be run."),
    '#default_value' => ($is_edit) ? $item->day : 1,
    '#required' => TRUE,
  );

  $form['item']['set_id'] = array(
    '#type' => 'select',
    '#title' => t('Set'),
    '#description' => t("The Set this item belongs to"),
    '#options' => ms_drip_get_sets_list(),
    '#default_value' => ($is_edit) ? $item->set_id : $set_id,
    '#required' => TRUE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  $form_state['#redirect'] = 'admin/structure/ms_drip_sets/view/' . $set_id;

  return $form;
}

/**
 * Validates the set item form
 */
function ms_drip_set_item_form_validate($form, &$form_state) {
  $v = $form_state['values'];
  //Validate Day
  if (!is_numeric($v['day'])) {
    form_set_error('day', t('You must use a number for the Day.'));
  } elseif ($v['day'] < 0) {
    form_set_error('day', t('The Day must be positive.'));
  }
}

/**
 * Loads the rule that is associated with an item
 *
 * @param $item
 *   The item
 * @return
 *   The rule that is associated with the item
 */
function ms_drip_load_item_rule($item) {
  return rules_config_load('rules_ms_drip_' . $item->set_id . '_' . $item->id);
}

/**
 * Saves or updates a rule for an item
 *
 * @param $item
 *   The item
 */
function ms_drip_save_item_rule($item) {
  $set = ms_drip_load_set($item->set_id);

  // If there is no existing rule, then create one
  if (!$rule = ms_drip_load_item_rule($item)) {
    $rule = rules_plugin_factory('ms drip item');
    $rule->event('ms_drip_item_event');
    //$rule->event('ms_drip_event_' . $set->id . '_' . $item->id);
    $rule->active = TRUE;
    $rule->module = 'ms_drip';
    $rule->status = ENTITY_CUSTOM;
  }

  // Set the name and label
  $rule->label = ms_drip_get_item_rule_name($set, $item);
  $rule->name = 'rules_ms_drip_' . $set->id . '_' . $item->id;

  $rule->save();

  // Clear the cache so that rules will update
  rules_clear_cache();
}

/**
 * Submit Function for the Set Item Form
 */
function ms_drip_set_item_form_submit($form, &$form_state) {
  $form_values = (object)$form_state['values'];

  if (isset($form_values->id)) {
    $item = ms_drip_load_item($form_values->id);
  } else {
    $item = new stdClass();
  }

  // Set the values
  $item->name = $form_values->name;
  $item->day = $form_values->day;
  $item->set_id = $form_values->set_id;

  if (isset($form_values->id)) {
    $item->id = $form_values->id;
    drupal_write_record('ms_drip_items', $item, 'id');
  } else {
    drupal_write_record('ms_drip_items', $item);
  }

  // Create or update the rule associated with this item
  ms_drip_save_item_rule($item);

  drupal_set_message(t('Item Saved: %name.', array('%name' => $item->name)));

  $form_state['redirect'] = 'admin/structure/ms_drip_sets/view/' . $item->set_id;
}

/**
 * Confirm the deletion of a set
 */
function ms_drip_delete_set_item_confirm($form, &$form_state, $item_id) {
  // Show a confirmation form before deleting a drip set item
  $item = ms_drip_load_item($item_id);
  if ($item->id) {
    $form['#id'] = $item->id;
    return confirm_form($form, t('Are you sure you want to delete this Item: %name?',
      array('%name' => $item->name)), 'admin/structure/ms_drip_sets/view/' . $item->set_id, t('This action cannot be undone.'), t('Delete'));
  } else {
    drupal_not_found();
  }
}

/**
 * Delete a Set Item from Form
 */
function ms_drip_delete_set_item_confirm_submit($form, &$form_state) {
  $item = ms_drip_load_item($form['#id']);

  // Delete the set item
  ms_drip_delete_item($item->id);

  drupal_set_message(t('Item %name has been deleted', array('%name' => $item->name)));
  $form_state['redirect'] = 'admin/structure/ms_drip_sets/view/' . $item->set_id;

  // Clear the cache so that rules will update
  rules_clear_cache();
}

/**
 * Confirm the Unsubscription
 */
function ms_drip_user_unsubscribe_confirm_form($form, $code) {
  $subscription = ms_drip_load_subscription_by_code($code);
  $account = user_load($subscription->uid);
  $drip_set = ms_drip_load_set($subscription->set_id);
  if ($drip_set->id) {
    $form['#ms_drip_set_id'] = $drip_set->id;
    $form['#ms_drip_user_id'] = $account->uid;
    return confirm_form($form, t('Are you sure you want to Unsubscribe: %set_name?', array('%set_name' => $drip_set->name)), '', t('This action cannot be undone.'), t('Unsubscribe'));
  } else {
    drupal_not_found();
  }
}

/**
 * Unsubscribe the user from the set
 */
function ms_drip_user_unsubscribe_confirm_form_submit($form, &$form_state) {
  ms_drip_end_set($form['#ms_drip_set_id'], $form['#ms_drip_user_id']);
}

/**
 * Implementation of hook_rules_plugin_info().
 */
function ms_drip_rules_plugin_info() {
  return array(
    'ms drip item' => array(
      'class' => 'MsDripItem',
      'embeddable' => FALSE,
      'extenders' => array(
        'RulesPluginUIInterface' => array(
          'class' => 'MsDripItemUI',
        ),
      ),
    ),
  );
}

/**
 * Wrapper for our rule type
 */
class MsDripItem extends RulesReactionRule
{
  protected $itemName = 'ms drip item';
}

/**
 * MsDripItem specific UI.
 */
class MsDripItemUI extends RulesReactionRuleUI
{

  public function form(&$form, &$form_state, $options = array()) {
    parent::form($form, $form_state, $options);
    $form['events'] = array(
      '#type' => 'container',
      '#weight' => -10,
      '#access' => empty($options['init']),
    );
    $form['events']['#access'] = FALSE;
    $form['settings']['#access'] = FALSE;
    $form['submit']['#access'] = FALSE;

    drupal_set_breadcrumb(array(
      l(t('Home'), ''),
      l(t('Administration'), 'admin'),
      l(t('Structure'), 'admin/structure'),
      l(t('Drip Sets'), 'admin/structure/ms_drip_sets'),
    ));
  }
}

/**
 * Drip Subscriptions Admin
 */

/**
 * Shows a list of all Subscriptions with action links
 */
function ms_drip_list_subscriptions() {
  // Show a list of the drip subscriptions, along with links such as Edit, View and Delete
  $headers = array(
    array(
      'data' => t('Set Name'),
      'field' => 's.name',
      'class' => array('ms_drip_subscription_name_header'),
    ),
    array(
      'data' => t('User'),
      'field' => 'u.name',
      'class' => array('ms_drip_subscription_user_header'),
    ),
    array(
      'data' => t('Start Date'),
      'field' => 'sub.start_date',
      'class' => array('ms_drip_subscription_created_header'),
      'sort' => 'desc'
    ),
    array(
      'data' => t('Status'),
      'field' => 'sub.status',
      'class' => array('ms_drip_subscription_status_header'),
    ),
    array(
      'data' => t('Actions'),
      'class' => array('ms_drip_subscription_actions_header'),
    ),
  );
  $rows = array();

  $query = db_select('ms_drip_subscriptions', 'sub');
  $query->leftjoin('users', 'u', 'u.uid = sub.uid');
  $query->leftjoin('ms_drip_sets', 's', 's.id = sub.set_id');
  $query->fields('sub');
  $query = $query->extend('TableSort')->orderByHeader($headers);

  // Add the pager if requested
  $pager_amount = 20;
  if (!isset($_GET['pager_amount']) OR $pager_amount = $_GET['pager_amount']) {
    $query = $query->extend('PagerDefault')->limit($pager_amount);
  }

  // Act on the filters
  $name = '';
  if (isset($_GET['name']) AND $_GET['name']) {
    $name = $_GET['name'];
    $query->condition('u.name', '%' . $name . '%', 'LIKE');
  }

  // execute the query
  $result = $query->execute();

  foreach ($result as $subscription) {
    $set = ms_drip_load_set($subscription->set_id);
    $account = user_load($subscription->uid);
    $actions = array(
      l(t('View'), 'admin/structure/ms_drip_sets/subscriptions/view/' . $subscription->id),
      l(t('Edit'), 'admin/structure/ms_drip_sets/subscriptions/edit/' . $subscription->id),
      l(t('Delete'), 'admin/structure/ms_drip_sets/subscriptions/delete/' . $subscription->id),
    );
    $rows[] = array(
      l($set->name, 'admin/structure/ms_drip_sets/view/' . $set->id),
      l($account->name, 'user/' . $account->uid),
      format_date($subscription->start_date, 'short'),
      ms_drip_get_set_status_text($subscription->status) . ' (' . ms_drip_get_subscription_progress($subscription) . ')',
      implode(' | ', $actions),
    );
  }

  // Add the filters form
  $filters = array(
    'name' => $name,
    'pager_amount' => $pager_amount,
  );

  // Add the filters form
  $filters_form = drupal_get_form('ms_core_get_filter_form', $filters);
  $filters_html = drupal_render($filters_form);

  return $filters_html . theme('table', array('header' => $headers, 'rows' => $rows, 'empty' => t('No Drip Subscriptions.')));
}

/**
 * Returns the progress of a subscription based on the set items and last run date
 */
function ms_drip_get_subscription_progress($subscription) {
  $set_items = ms_drip_get_set_items($subscription->set_id);

  $ran = 0;
  $total = count($set_items);

  foreach ($set_items as $item) {
    $item_date = ms_drip_get_item_run_date($subscription->start_date, $item->day);
    if ($item_date < $subscription->last_run) {
      $ran += 1;
    }
  }

  return "$ran/$total";
}

/**
 * Add and Edit form for Drip Subscription
 */
function ms_drip_subscription_form($form, $form_state, $action = 'add', $id = NULL) {
  drupal_add_library('system', 'ui.datepicker');
  drupal_add_js('jQuery(document).ready(function(){jQuery( ".pickadate" ).datepicker({
      dateFormat: "MM d, yy",
      changeMonth: true,
      changeYear: true,
      showOtherMonths: true,
      selectOtherMonths: true,
      autoSize: true
    });});', 'inline');

  // Show a form for editing or adding the details for a drip subscription
  $is_edit = FALSE;

  // -----------------------------
  // Subscription Info
  // -----------------------------
  $form['subscription'] = array(
    '#type' => 'fieldset',
    '#title' => t('Subscription Info'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );

  $subscription = NULL;
  $account = NULL;
  if ($action == 'edit') {
    $is_edit = TRUE;
    $subscription = ms_drip_load_subscription($id);
    $account = user_load($subscription->uid);

    // Store the Set ID
    $form['set']['id'] = array(
      '#type' => 'value',
      '#value' => $subscription->id,
    );
  }

  $form['subscription']['username'] = array(
    '#type' => 'textfield',
    '#title' => t('User'),
    '#size' => 32,
    '#maxlength' => 64,
    '#description' => t("The User for this Subscription"),
    '#autocomplete_path' => 'admin/structure/ms_core/autocomplete',
    '#required' => TRUE,
    '#default_value' => ($is_edit) ? $account->name : '',
  );

  $sets = ms_drip_get_sets_list();
  $form['subscription']['set_id'] = array(
    '#type' => 'select',
    '#title' => t('Set'),
    '#description' => t("The Set this Subscription belongs to."),
    '#required' => TRUE,
    '#default_value' => ($is_edit) ? $subscription->set_id : 0,
    '#options' => $sets,
  );

  $form['subscription']['start_date'] = array(
    '#type' => 'textfield',
    '#title' => t('Created'),
    '#default_value' => $is_edit ? date('F j, Y', $subscription->start_date) : '',
    '#attributes' => array('class' => array('pickadate')),
  );

  $form['subscription']['last_run'] = array(
    '#type' => 'textfield',
    '#title' => t('Last Executed'),
    '#default_value' => $is_edit ? date('F j, Y', $subscription->last_run) : '',
    '#attributes' => array('class' => array('pickadate')),
  );

  $form['subscription']['status'] = array(
    '#type' => 'checkbox',
    '#return_value' => 1,
    '#title' => t('Active'),
    '#description' => t("If the subscription is active, it will be ran during cron."),
    '#default_value' => ($is_edit) ? (int)$subscription->status : 1,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  $form_state['#redirect'] = 'admin/structure/ms_drip_sets/subscriptions/list';

  return $form;
}

/**
 * Validate Function for the Subscription Form
 */
function ms_drip_subscription_form_validate($form, &$form_state) {
  $v = $form_state['values'];
  $account = user_load_by_name($v['username']);
  if (!$account->uid) {
    form_set_error('username', t('You must enter a valid user'));
  }
}

/**
 * Submit Function for the Subscription Form
 */
function ms_drip_subscription_form_submit($form, &$form_state) {
  $form_values = (object)$form_state['values'];

  $set = ms_drip_load_set($form_values->set_id);
  $account = user_load_by_name($form_values->username);

  if (isset($form_values->id)) {
    $subscription = ms_drip_load_subscription($form_values->id);
  } else {
    $subscription = new stdClass();
    $subscription->code = drupal_get_token(serialize($form_values));
  }

  // Set the values
  $subscription->uid = $account->uid;
  $subscription->set_id = $set->id;
  $subscription->status = (int)$form_values->status;
  $subscription->start_date = strtotime($form_values->start_date);
  $subscription->last_run = strtotime($form_values->last_run);

  if (isset($form_values->id)) {
    $subscription->id = $form_values->id;
    drupal_write_record('ms_drip_subscriptions', $subscription, 'id');
  } else {
    drupal_write_record('ms_drip_subscriptions', $subscription);
  }

  drupal_set_message(t('Subscription Saved for user %name and set %set.',
    array('%name' => $account->name, '%set' => $set->name)));

  $form_state['redirect'] = 'admin/structure/ms_drip_sets/subscriptions';
}

/**
 * Confirm the deletion of a Subscription
 */
function ms_drip_delete_subscription_confirm($form, &$form_state, $subscription_id) {
  // Show a confirmation form before deleting a drip set
  $subscription = ms_drip_load_subscription($subscription_id);
  if ($subscription->id) {
    $form['#id'] = $subscription->id;
    $account = user_load($subscription->uid);
    return confirm_form($form, t('Are you sure you want to delete this subscription for user: %name?',
      array('%name' => $account->name)), 'admin/structure/ms_drip_sets/subscriptions/list', t('This action cannot be undone.'), t('Delete'));
  } else {
    drupal_not_found();
  }
}

/**
 * Delete a Subscription from Form
 */
function ms_drip_delete_subscription_confirm_submit($form, &$form_state) {
  $subscription = ms_drip_load_subscription($form['#id']);
  $account = user_load($subscription->uid);

  // Delete the subscription
  ms_drip_delete_subscription($subscription->id);

  drupal_set_message(t('Subscription for user %name has been deleted', array('%name' => $account->name)));
  $form_state['redirect'] = 'admin/structure/ms_drip_sets/subscriptions/list';
}

/**
 * Show the drip set information, including the items and which ones have been done
 */
function ms_drip_view_drip_subscription($subscription_id) {
  $subscription = ms_drip_load_subscription($subscription_id);
  $account = user_load($subscription->uid);
  $set = ms_drip_load_set($subscription->set_id);
  $set_items = ms_drip_get_set_items($set->id);
  $items_list = array();

  $css = ".ms_drip_executed {color: green;} .ms_drip_waiting {color:red;}";
  drupal_add_css($css, array('type' => 'inline'));

  foreach ($set_items as $item) {
    // Get the date this item should fire
    $item_date = ms_drip_get_item_run_date($subscription->start_date, $item->day);
    $class = 'ms_drip_executed';
    if ($item_date > $subscription->last_run) {
      $class = 'ms_drip_waiting';
    }
    $items_list[] = array(
      'data' => t("@item_date - @item_name",
        array('@item_name' => $item->name, '@item_date' => format_date($item_date, 'long'))),
      'class' => array($class),
    );
  }

  $build = array(
    'ms_drip_subscription_header' => array(
      '#type' => 'item',
      '#markup' => t("<h3>Drip Subscription for %name in set %set</h3>",
        array(
          '%name' => $account->name,
          '%set' => $set->name,
        )
      ),
    ),
    'ms_drip_subscription_user' => array(
      '#type' => 'item',
      '#title' => t('User'),
      '#markup' => l($account->name, 'user/' . $account->uid),
    ),
    'ms_drip_subscription_set' => array(
      '#type' => 'item',
      '#title' => t('Set'),
      '#markup' => l($set->name, 'admin/structure/ms_drip_sets/view/' . $set->id),
    ),
    'ms_drip_subscription_start' => array(
      '#type' => 'item',
      '#title' => t('Started'),
      '#markup' => format_date($subscription->start_date, 'long'),
    ),
    'ms_drip_subscription_last_run' => array(
      '#type' => 'item',
      '#title' => t('Last Executed'),
      '#markup' => format_date($subscription->last_run, 'long'),
    ),
    'ms_drip_subscription_status' => array(
      '#type' => 'item',
      '#title' => t('Status'),
      '#markup' => ms_drip_get_set_status_text($subscription->status),
    ),
    'ms_drip_subscription_items' => array(
      '#type' => 'item',
      '#title' => t('Schedule Overview'),
      '#markup' => theme('item_list', array('title' => t('Items'), 'items' => $items_list, 'type' => 'ol', 'attributes' => array())),
    ),
  );

  return $build;
}
