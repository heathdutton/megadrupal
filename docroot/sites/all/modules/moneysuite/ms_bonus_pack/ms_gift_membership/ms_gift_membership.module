<?php

/**
 * @file
 * Module that allows users to buy and send gift memberships to their friends.
 *
 * Original author: Leighton Whiting - Released under GENERAL PUBLIC LICENSE 
 * Current maintenance by multiple MoneySuite users.
 * Re: new initiative: https://www.drupal.org/node/2315653
 */

/**
 * Implements hook_help().
 */
function ms_gift_membership_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/help#ms_gift_membership":
      $output = '<p>' . t("The Gift Memberships module allows you to let your
        users purchase 'Gift Memberships' for a friend.") . '</p>';
      break;
    case "gift/membership":
      $output = '<p>' . t("From here users can fill out the gift information,
        including the recipient name, email, delivery date and a message,
        and then proceed to checkout to pay for the gift membership.") . '</p>';
      break;
    case "gift/redeem":
      $output = '<p>' . t("Gift Recipients can redeem their gifts here.") . '</p>';
      break;
  }
  return $output;
}

/**
 * Implementation of hook_cron().
 */
function ms_gift_membership_cron() {
  // Send gifts that need to be sent
  $result = db_query("SELECT * FROM {ms_gift_memberships} WHERE status = :status AND gift_date < :time",
    array(':status' => 0, ':time' => time()));
  foreach ($result as $gift_mem) {
    watchdog('ms_gift_membership', t('Sending gift to @receiver from @giver',
      array(
        '@receiver' => $gift_mem->receiver_email,
        '@giver' => $gift_mem->giver_email,
      )));

    // Send Email to Receiver
    drupal_mail('ms_gift_membership', 'receiver_email', $gift_mem->receiver_email, language_default(), $gift_mem);

    // Send Email to Giver
    drupal_mail('ms_gift_membership', 'giver_email', $gift_mem->giver_email, language_default(), $gift_mem);

    // Change the Gift Membership Status to 'Gift Sent'
    ms_gift_membership_change_gift_status($gift_mem->id, 1);
    // Change the Sent Date
    ms_gift_membership_change_sent_date($gift_mem->id);
  }

  $timeago = strtotime('-' . variable_get('ms_gift_membership_reminder_days', 7) . ' days');

  // Send reminders that need to be sent
  $result = db_query("SELECT * FROM {ms_gift_memberships} WHERE status = :status AND sent_date < :time",
    array(':status' => 1, ':time' => $timeago));
  foreach ($result as $gift_mem) {
    watchdog('ms_gift_membership', t('Sending gift reminder to @receiver and @giver',
      array(
        '@receiver' => $gift_mem->receiver_email,
        '@giver' => $gift_mem->giver_email,
      )));

    // Send Email to Receiver
    drupal_mail('ms_gift_membership', 'receiver_reminder', $gift_mem->receiver_email, language_default(), $gift_mem);

    // Send Email to Giver
    drupal_mail('ms_gift_membership', 'giver_reminder', $gift_mem->giver_email, language_default(), $gift_mem);

    // Change the Sent Date
    ms_gift_membership_change_sent_date($gift_mem->id);
  }
}

/**
 * Implementation of hook_permission().
 */
function ms_gift_membership_permission() {
  return array(
    'purchase gift membership' => array(
      'title' => t('Purchase Gift Memberships'),
      'description' => t('Allows the user to purchase a gift membership.'),
    ),
    'redeem gift membership' => array(
      'title' => t('Redeem Gift Memberships'),
      'description' => t('Allows the user to redeem a gift membership.'),
    ),
    'block redeem gift membership' => array(
      'title' => t('Block from Redeeming Gift Memberships'),
      'description' => t('Prevents the user from redeeming a gift membership.'),
    ),
  );
}

/**
 * Implementation of hook_menu
 */
function ms_gift_membership_menu() {
  $items = array();
  $items['gift/membership'] = array(
    'title' => 'Send Gift Membership',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_gift_membership_gift_membership_form'),
    'access arguments' => array('purchase gift membership'),
    'type' => MENU_CALLBACK,
  );
  $items['gift/redeem'] = array(
    'title' => 'Redeem Gift Membership',
    'page callback' => 'ms_gift_membership_redeem_membership',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/moneysuite/ms_gift_membership'] = array(
    'title' => 'Gift Memberships Settings',
    'description' => 'Set the various Gift Memberships Settings here',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_gift_membership_admin'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/moneysuite/ms_gift_membership/settings'] = array(
    'title' => 'Gift Memberships Settings',
    'description' => 'Set the various Gift Memberships Settings here',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_gift_membership_admin'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/moneysuite/ms_gift_membership/change/%/%'] = array(
    'title' => 'Change Gift Membership Status',
    'page callback' => 'ms_gift_membership_change_status_page',
    'page arguments' => array(4, 5),
    'access arguments' => array('access administration pages'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/moneysuite/ms_gift_membership/overview'] = array(
    'title' => 'View Pending Gift Memberships',
    'description' => 'View Gift Memberships',
    'page callback' => 'ms_gift_membership_overview_page',
    'access arguments' => array('access administration pages'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

// ======================================
// Administration Page:
// ======================================

/**
 * Admin Settings Form
 */
function ms_gift_membership_admin() {
  $form['main'] = array(
    '#type' => 'fieldset',
    '#title' => t('Main Settings'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#description' => t("The page for purchasing gift memberships is !purchase_link and the url for redeeming them is !redeem_link.",
      array('!purchase_link' => l('gift/membership', 'gift/membership'), '!redeem_link' => l('gift/redeem', 'gift/redeem')))
  );
  $form['email'] = array(
    '#type' => 'fieldset',
    '#title' => t('Email Settings'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['main']['ms_gift_membership_allowed_plans'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Gift Memberships'),
    '#options' => ms_products_get_plans_list('ms_membership'),
    '#default_value' => variable_get('ms_gift_membership_allowed_plans', array()),
    '#description' => t('Select which memberships can be given as gifts.'),
    '#required' => FALSE,
  );

  $form['main']['ms_gift_membership_reminder_days'] = array(
    '#type' => 'textfield',
    '#title' => t('Send Reminder After How Many Days?'),
    '#default_value' => variable_get('ms_gift_membership_reminder_days', 7),
    '#description' => t('A reminder email will be sent every X days after the gift is sent for as long as it is unclaimed.'),
    '#required' => FALSE,
  );
  $form['main']['ms_gift_membership_allow_shipping'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow Physical Shipping'),
    '#default_value' => variable_get('ms_gift_membership_allow_shipping', TRUE),
    '#description' => t('Check this if you want users to be able to request a physical
      gift card be sent to them. It is up to you to fulfill it.'),
    '#required' => FALSE,
  );

  $form['email']['ms_gift_membership_receiver_gift_mail_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Receiver Gift Sent Email Subject'),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_gift_membership_receiver_gift_mail_subject', t("Redeem your Gift from [ms_gift_membership:giverName]!")),
  );
  $form['email']['ms_gift_membership_receiver_gift_mail_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Receiver Gift Sent Email Body'),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_gift_membership_receiver_gift_mail_body', t("A gift has been sent to you from [ms_gift_membership:giverName]! Here are the details:
      Gift: [ms_gift_membership:planName]
      Code: [ms_gift_membership:giftCode]
      Link: [ms_gift_membership:redeemUrl]
      Message: [ms_gift_membership:giftMessage]
      ")),
  );
  $form['email']['ms_gift_membership_receiver_gift_mail_token_help']['tokens'] = array(
    '#theme' => 'token_tree',
    '#token_types' => array('ms_gift_membership', 'ms_products_plan', 'ms_core_order', 'ms_core_payment', 'user'),
    '#dialog' => TRUE,
  );

  $form['email']['ms_gift_membership_giver_gift_mail_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Giver Gift Sent Email Subject'),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_gift_membership_giver_gift_mail_subject', t("Your Gift has been sent!")),
  );
  $form['email']['ms_gift_membership_giver_gift_mail_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Giver Gift Sent Email Body'),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_gift_membership_giver_gift_mail_body', t("Your gift has been sent to [ms_gift_membership:receiverName]! Here are the details:
      Gift: [ms_gift_membership:planName]
      Code: [ms_gift_membership:giftCode]
      Link: [ms_gift_membership:redeemUrl]
      Message: [ms_gift_membership:giftMessage]
      ")),
  );
  $form['email']['ms_gift_membership_giver_gift_mail_token_help']['tokens'] = array(
    '#theme' => 'token_tree',
    '#token_types' => array('ms_gift_membership', 'ms_products_plan', 'ms_core_order', 'ms_core_payment', 'user'),
    '#dialog' => TRUE,
  );

  $form['email']['ms_gift_membership_gift_purchase_mail_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Gift Purchased Email Subject'),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_gift_membership_gift_purchase_mail_subject', t("Gift Details")),
  );
  $form['email']['ms_gift_membership_gift_purchase_mail_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Gift Purchased Email Body'),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_gift_membership_gift_purchase_mail_body', t("Your purchase has been completed for your gift to [ms_gift_membership:receiverName]! Here are the details:
      Gift: [ms_gift_membership:planName]
      Code: [ms_gift_membership:giftCode]
      Link: [ms_gift_membership:redeemUrl]
      Delivery Date: [ms_gift_membership:giftDate]
      Receiver: [ms_gift_membership:receiverName] - [ms_gift_membership:receiverEmail]
      Order Number: [ms_core_order:orderId]
      Message: [ms_gift_membership:giftMessage]
      ")),
  );
  $form['email']['ms_gift_membership_gift_purchase_mail_token_help']['tokens'] = array(
    '#theme' => 'token_tree',
    '#token_types' => array('ms_gift_membership', 'ms_products_plan', 'ms_core_order', 'ms_core_payment', 'user'),
    '#dialog' => TRUE,
  );

  $form['email']['ms_gift_membership_gift_purchase_mail_mail_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Send by Mail Gift Purchased Email Subject'),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_gift_membership_gift_purchase_mail_mail_subject', t("Gift Details")),
  );
  $form['email']['ms_gift_membership_gift_purchase_mail_mail_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Send by Mail Gift Purchased Email Body'),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_gift_membership_gift_purchase_mail_mail_body', t("Your purchase has been completed for your gift to [ms_gift_membership:receiverName]! Here are the details:
      Gift: [ms_gift_membership:planName]
      Code: [ms_gift_membership:giftCode]
      Link: [ms_gift_membership:redeemUrl]
      Delivery Date: [ms_gift_membership:giftDate]
      Receiver: [ms_gift_membership:receiverName] - [receiverAddress]
      Order Number: [ms_core_order:orderId]
      Message: [ms_gift_membership:giftMessage]
      ")),
  );
  $form['email']['ms_gift_membership_gift_purchase_mail_mail_token_help']['tokens'] = array(
    '#theme' => 'token_tree',
    '#token_types' => array('ms_gift_membership', 'ms_products_plan', 'ms_core_order', 'ms_core_payment', 'user'),
    '#dialog' => TRUE,
  );

  $form['email']['ms_gift_membership_gift_giver_reminder_mail_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Gift Giver Reminder Email Subject'),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_gift_membership_gift_giver_reminder_mail_subject', t("Your gift has not been claimed yet")),
  );
  $form['email']['ms_gift_membership_gift_giver_reminder_mail_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Gift Giver Reminder Email Body'),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_gift_membership_gift_giver_reminder_mail_body', t("The gift you sent to [ms_gift_membership:receiverName] has not been claimed yet. Here are the details:
      Gift: [ms_gift_membership:planName]
      Code: [ms_gift_membership:giftCode]
      Link: [ms_gift_membership:redeemUrl]
      Delivery Date: [ms_gift_membership:giftDate]
      Receiver: [ms_gift_membership:receiverName] - [ms_gift_membership:receiverEmail]
      Order Number: [ms_core_order:orderId]
      Message: [ms_gift_membership:giftMessage]
      ")),
  );
  $form['email']['ms_gift_membership_gift_giver_reminder_mail_token_help']['tokens'] = array(
    '#theme' => 'token_tree',
    '#token_types' => array('ms_gift_membership', 'ms_products_plan', 'ms_core_order', 'ms_core_payment', 'user'),
    '#dialog' => TRUE,
  );

  $form['email']['ms_gift_membership_gift_receiver_reminder_mail_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Gift Receiver Reminder Email Subject'),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_gift_membership_gift_receiver_reminder_mail_subject', t("You have an unclaimed gift!")),
  );
  $form['email']['ms_gift_membership_gift_receiver_reminder_mail_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Gift Receiver Reminder Email Body'),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_gift_membership_gift_receiver_reminder_mail_body', t("You have an unclaimed gift ready for you! Here are the details:
      Gift: [ms_gift_membership:planName]
      Code: [ms_gift_membership:giftCode]
      Link: [ms_gift_membership:redeemUrl]
      Delivery Date: [ms_gift_membership:giftDate]
      Receiver: [ms_gift_membership:receiverName] - [ms_gift_membership:receiverEmail]
      Order Number: [ms_core_order:orderId]
      Message: [ms_gift_membership:giftMessage]
      ")),
  );
  $form['email']['ms_gift_membership_gift_receiver_reminder_mail_token_help']['tokens'] = array(
    '#theme' => 'token_tree',
    '#token_types' => array('ms_gift_membership', 'ms_products_plan', 'ms_core_order', 'ms_core_payment', 'user'),
    '#dialog' => TRUE,
  );

  return system_settings_form($form);
}

//function admin settings

/**
 * Show all of the Gift Memberships, with filters
 */
function ms_gift_membership_overview_page() {
  $output = '';

  // Add the CSS
  drupal_add_css(drupal_get_path('module', 'ms_gift_membership') . '/ms_gift_membership.css');

  // Add JS
  drupal_add_js(drupal_get_path('module', 'ms_gift_membership') . '/ms_gift_membership.js');

  $headers = array();

  $headers[] = array('data' => t('Created'), 'class' => array('ms_gift_membership_created_header', 'field' => 'd.created'));
  $headers[] = array('data' => t('Gift Date'), 'class' => array('ms_gift_membership_gift_date_header', 'field' => 'd.gift_date', 'sort' => 'asc'));
  $headers[] = array('data' => t('Status'), 'class' => array('ms_gift_membership_status_header', 'field' => 'd.status'));
  $headers[] = array('data' => t('Code'), 'class' => array('ms_gift_membership_code_header', 'field' => 'd.code'));
  $headers[] = array('data' => t('Giver Name'), 'class' => array('ms_gift_membership_giver_name_header'));
  $headers[] = array('data' => t('Receiver Name'), 'class' => array('ms_gift_membership_receiver_name_header'));
  $headers[] = array('data' => t('Address'), 'class' => array('ms_gift_membership_address_header'));
  $headers[] = array('data' => t('Message'), 'class' => array('ms_gift_membership_message_header'));
  $headers[] = array('data' => t('Actions'), 'class' => array('ms_gift_membership_actions_header'));

  $query = db_select('ms_gift_memberships', 'g');
  $query->fields('g');
  //$query->condition('g.status', array(3, 4), 'IN'); @todo - Use views instead.
  $query = $query->extend('TableSort')->orderByHeader($headers);

  $pager_amount = 20;
  if (!isset($_GET['pager_amount']) OR $pager_amount = $_GET['pager_amount']) {
    $query = $query->extend('PagerDefault')->limit($pager_amount);
  }

  $result = $query->execute();

  $rows = array();
  $attr = array('id' => 'ms-gift-membership-table');
  foreach ($result as $gift_mem) {
    $actions = array();

    // Load some variables
    if ($order = ms_core_order_load($gift_mem->oid)) {
      $uri = entity_uri('ms_order', $order);
      $actions[] = l(t('View Order @num', array('@num' => $order->oid)), $uri['path']);
    }

    $t_rows = array();

    $t_rows[] = array('data' => format_date($gift_mem->created, 'short'), 'class' => array('ms_gift_membership_created'));
    $t_rows[] = array('data' => format_date($gift_mem->gift_date, 'short'), 'class' => array('ms_gift_membership_gift_date'));
    $t_rows[] = array('data' => ms_gift_membership_get_gift_membership_status_text($gift_mem->status), 'class' => array('ms_gift_membership_status'));
    $t_rows[] = array('data' => $gift_mem->gift_code, 'class' => array('ms_gift_membership_code'));
    $t_rows[] = array('data' => $gift_mem->giver_name, 'class' => array('ms_gift_membership_giver_name'));
    $t_rows[] = array('data' => $gift_mem->receiver_name, 'class' => array('ms_gift_membership_receiver_name'));
    $t_rows[] = array('data' => $gift_mem->receiver_address, 'class' => array('ms_gift_membership_address'));
    $t_rows[] = array('data' => $gift_mem->message, 'class' => array('ms_gift_membership_message'));
    $t_rows[] = array('data' => implode(' | ', $actions), 'class' => array('ms_gift_membership_actions'));

    $rows[] = array('data' => $t_rows, 'class' => array('gift_row_' . $gift_mem->status), 'rel' => $gift_mem->id);
  }

  $output .= theme('table', array('header' => $headers, 'rows' => $rows, 'attributes' => $attr, 'empty' => t('No gift memberships.')));
  $output .= "<div id='ms_gift_membership_ajax_loader' style='display:none;'><div><img src='/" . drupal_get_path('module', 'ms_core') . '/images/ajax-loader.gif' . "' /></div></div>";
  $build['content'] = array('#markup' => $output);

  // Add the pager
  $build['pager'] = array(
    '#theme' => 'pager',
    '#weight' => 5,
  );

  return $build;
}

// ======================================
// Functions:
// ======================================

/**
 * Return the text for the membership status
 */
function ms_gift_membership_get_gift_membership_status_text($status) {
  switch ($status) {
    case 0:
      return t('Dormant');
    case 1:
      return t('Sent');
    case 2:
      return t('Opened');
    case 3:
      return t('Pending');
    case 4:
      return t('Mailed');
  }
}

/*
 * Change a membership's status
 */
function ms_gift_membership_change_gift_status($id, $status) {
  return db_query("UPDATE {ms_gift_memberships} SET status=:status WHERE id=:id",
    array(':status' => $status, ':id' => $id));
}

/*
 * Page Callback to change a card's status
 */
function ms_gift_membership_change_status_page($id, $status) {
  print ms_gift_membership_change_gift_status($id, $status) ? 'Success' : 'Failure';
  exit;
}

/*
 * Change a membership's sent date
 */
function ms_gift_membership_change_sent_date($id, $time = NULL) {
  $time = ($time) ? $time : time();
  return db_query("UPDATE {ms_gift_memberships} SET sent_date=:sent_date WHERE id=:id",
    array(':sent_date' => $time, ':id' => $id));
}

/*
 * Change a membership's opened date
 */
function ms_gift_membership_change_opened_date($id, $time = NULL) {
  $time = ($time) ? $time : time();
  return db_query("UPDATE {ms_gift_memberships} SET opened_date=:open_date WHERE id=:id",
    array(':open_date' => $time, ':id' => $id));
}

/**
 * Return a listing of Gift Membership Plans
 */
function ms_gift_membership_get_plans() {
  $gift_plans = array();
  $allowed_plans = variable_get('ms_gift_membership_allowed_plans', array());

  $plans = ms_products_get_plans('ms_membership');
  foreach ($plans as $plan) {
    // Make sure this plan is allowed as a gift
    if (!empty($allowed_plans[$plan->sku])) {
      $more_details = '';

      if (variable_get('ms_membership_show_membership_price', FALSE)) {
        $more_details .= ' - ' . ms_core_get_recurring_string($plan->recurring_schedule, $plan->cart_type == 'recurring');
      }
      if ($plan->description) {
        $more_details .= " - <span id='md" . $plan->sku . "' class='more_detailsDiv'>" . $plan->description . "</span>";
      }

      $gift_plans[$plan->sku] = $plan->name . $more_details;
    }
  }

  return $gift_plans;
}

/**
 * Load a Gift Membership Record
 */
function ms_gift_membership_load_gift_membership($id) {
  $result = db_query("SELECT * FROM {ms_gift_memberships} WHERE id=:id", array(':id' => $id));
  foreach ($result as $gift_mem) {
    return $gift_mem;
  }
  return FALSE;
}

/**
 * Load a Membership by Order ID
 */
function ms_gift_membership_load_gift_membership_order_id($oid) {
  $result = db_query("SELECT * FROM {ms_gift_memberships} WHERE oid=:oid", array(':oid' => $oid));
  foreach ($result as $gift_mem) {
    return $gift_mem;
  }
  return FALSE;
}

/**
 * Load a Membership by Code
 */
function ms_gift_membership_load_gift_membership_by_code($code) {
  $result = db_query("SELECT * FROM {ms_gift_memberships} WHERE gift_code=:code",
    array(':code' => strtoupper($code)));
  foreach ($result as $row) {
    return $row;
  }
  return FALSE;
}

// ======================================
// Pages:
// ======================================

/*
 * Redeem a Gift Membership
 */
function ms_gift_membership_redeem_membership() {
  $code = arg(2);
  $gift_mem = ms_gift_membership_load_gift_membership_by_code($code);

  // Check that the status is set to Sent or Mailed (able to be redeemed)
  if ($gift_mem && ($gift_mem->status == 1 OR $gift_mem->status == 4)) {
    global $user;
    $html = '';

    // Check if the user is logged in
    if ($user->uid) {
      // Check if the user is not allowed to redeem gift memberships based on role
      if (user_access('block redeem gift membership')) {
        // Ask the user if they want to use the account to apply the membership to. Give option to logout.
        $html .= t("You are currently logged in as @name.
          You currently have an active membership and are not able to redeem this gift.
          You have the option to get credited for the amount of the gift or credit back the giver.  Please !contact if you wish to receive a refund.
          If this is not the account you wish to use to claim the gift, you can !logout to logout.",
          array(
            '@name' => $user->name,
            '!logout' => l(t('click here'), 'logout', array('query' => drupal_get_destination())),
            '!contact' => l(t('contact us'), 'contact'),
          ));
      } else {
        // Ask the user if they want to use the account to apply the membership to. Give option to logout.
        $html .= t("You are currently logged in as @name. If this is the account you wish to claim the gift for, click the Claim Gift button below. If this is not the account you wish to use to claim the gift, you can !logout to logout.",
          array(
            '@name' => $user->name,
            '!logout' => l('click here', 'logout', array('query' => drupal_get_destination())),
          ));
        $html .= drupal_render(drupal_get_form('ms_gift_membership_redeem_gift_form', $gift_mem));
      }
    } else {
      // Show a form for the user to enter their username, email, and password
      $html .= drupal_render(drupal_get_form('ms_gift_membership_redeem_gift_register_form', $gift_mem));
    }
    return $html;
  } else {
    return drupal_get_form('ms_gift_membership_enter_code_form');
  }
}

/**
 * Build Function for the Enter Code Form
 */
function ms_gift_membership_enter_code_form($form, &$form_state) {
  $form['gift'] = array(
    '#type' => 'fieldset',
    '#title' => t('Gift Card Code'),
    '#weight' => -49,
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );

  $form['gift']['code'] = array(
    '#type' => 'textfield',
    '#title' => t('Code'),
    '#size' => 32,
    '#required' => TRUE,
    '#description' => t('Enter the code found on your card'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Enter'),
  );

  return $form;
}

/**
 * Validate Function for the Redeem Gift Card Form
 */
function ms_gift_membership_enter_code_form_validate($form, &$form_state) {
  // Attempt to load the gift card object
  if (!$gift_mem = ms_gift_membership_load_gift_membership_by_code($form_state['values']['code'])) {
    form_set_error('code', t('The code you entered is not valid. Please try again.'));
  }

  // If the card is redeemed, show error
  if ($gift_mem->status == 2) {
    form_set_error('code', t('The code you entered has already been redeemed. Please try again.'));
  }
}

/**
 * Submit Function for the Enter Code Form
 */
function ms_gift_membership_enter_code_form_submit($form, &$form_state) {
  // Load the gift card object
  $gift_mem = ms_gift_membership_load_gift_membership_by_code($form_state['values']['code']);

  //drupal_set_message('<pre>'. print_r($gift_mem, TRUE) .'</pre>');

  switch ($gift_mem->status) {
    case 1:
    case 4:
      // Redirect to the redeem page if the gift card has already been activated
      drupal_goto('gift/redeem/' . $gift_mem->gift_code);
      break;

    case 0:
    case 3:
      drupal_set_message(t('This gift card has not yet been activated.'));
      return;
      break;
  }
}

/**
 * Build Function for the Gift Membership Form
 */
function ms_gift_membership_redeem_gift_register_form($form, &$form_state, $gift_mem) {
  $form['information'] = array(
    '#type' => 'fieldset',
    '#title' => t('Customer Information'),
    '#description' => t('Create a new account for your gift or !click to login with an existing account to claim the gift.', array('!click' => l('click here', 'user/login', array('query' => drupal_get_destination())))),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['information']['gift_mem'] = array(
    '#type' => 'value',
    '#value' => $gift_mem,
  );
  $form['information']['email1'] = array(
    '#type' => 'textfield',
    '#title' => t('E-mail Address'),
    '#size' => 32,
    '#default_value' => $gift_mem->receiver_email,
    '#required' => TRUE,
  );
  $form['information']['email2'] = array(
    '#type' => 'textfield',
    '#title' => t('Confirm E-mail Address'),
    '#size' => 32,
    '#default_value' => $gift_mem->receiver_email,
    '#required' => TRUE,
  );
  $form['information']['username'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#size' => 32,
    '#required' => TRUE,
  );
  $form['information']['password1'] = array(
    '#type' => 'password',
    '#title' => t('Password'),
    '#size' => 32,
    '#required' => TRUE,
  );
  $form['information']['password2'] = array(
    '#type' => 'password',
    '#title' => t('Confirm Password'),
    '#size' => 32,
    '#description' => t('Passwords must match to proceed'),
    '#required' => TRUE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Create Account'),
    '#validate' => array('ms_gift_membership_redeem_gift_register_form_validate'),
    '#submit' => array('ms_gift_membership_redeem_gift_register_form_submit'),
    '#weight' => 999,
  );

  $form['#redirect'] = 'user';
  return $form;
}

/**
 * Validate Function for the Gift Membership Form
 */
function ms_gift_membership_redeem_gift_register_form_validate($form, &$form_state) {
  $v = $form_state['values'];
  // Verify Email Address is real
  if (!valid_email_address($v['email1'])) {
    form_set_error('email1', t('Please enter a valid email address'));
  }
  // Verify Email Addresses Match
  if ($v['email1'] != $v['email2']) {
    form_set_error('email2', t('The email addresses do not match'));
  }
  // Verify Email Address is not being used
  if ($email_account = user_load_by_mail($v['email1'])) {
    form_set_error('email1', t('The email address you entered is already being used by an account on this site.
    Please !login to the account associated with this email address before proceeding.',
      array('!login' => l('log in', 'user/login', array('query' => drupal_get_destination())))
    ));
  }
  // Verify Username is not being used
  if ($name_account = user_load_by_name($v['username'])) {
    form_set_error('username', t('The username you specified is already in use. Please choose a different username before proceeding.'));
  }
  // Verify Passwords Match
  if ($v['password1'] != $v['password2']) {
    form_set_error('password2', t('The passwords do not match'));
  }
}

/**
 * Submit Function for the Redeem Gift Form
 */
function ms_gift_membership_redeem_gift_register_form_submit($form, &$form_state) {
  $v = $form_state['values'];

  // Create the user account
  $pass = ($v['password1']) ? $v['password1'] : user_password();
  $name = ($v['username']) ? $v['username'] : ms_core_create_username($v['email1']);
  $roles = array();

  $account = user_save('', array(
      'name' => $name,
      'mail' => $v['email1'],
      'init' => $v['email1'],
      'pass' => $pass,
      'roles' => $roles,
      'status' => 1
    )
  );
  $account->password = $pass;

  //Send the Default Email
  _user_mail_notify('register_no_approval_required', $account);

  global $user;

  $user = user_load($account->uid);

  $gift_mem = $v['gift_mem'];

  // Change the owner of the order
  $order = ms_core_order_load($gift_mem->oid);
  $order->uid = $account->uid;
  ms_core_order_save($order);

  $m_plan = ms_products_plan_load($gift_mem->mpid);

  // Add and remove the roles at the start of the membership
  ms_membership_change_roles($account->uid, $m_plan->start_grant_roles, $m_plan->start_remove_roles);

  //Insert into Memberships database
  $status = 'completed';
  $expiration = ms_products_get_expiration_date($m_plan->sku);
  $membership = ms_products_insert_purchase($gift_mem->oid, $account->uid, $m_plan->sku, $expiration, $status, 0, 1, 1);

  // Invoke hook_ms_membership_expiring to let other modules act on a new membership
  module_invoke_all('ms_membership_signup', $account, $membership, $m_plan);

  $payment_vars = array(
    'id' => $membership->id,
  );

  // Send email.
  ms_products_send_mail('ms_membership', 'signup', $account->mail, user_preferred_language($account), $payment_vars);

  // Send Email to Admin(s).
  ms_membership_notify_admins('admin_signup', $payment_vars);

  // Notify the user.
  drupal_set_message(t('Your gift has been added to your account, and you have been automatically logged in.'));

  // Change the Gift Membership Status to 'Opened'.
  ms_gift_membership_change_gift_status($gift_mem->id, 2);
  ms_gift_membership_change_opened_date($gift_mem->id);

  drupal_goto();
}

/**
 * Build Function for the Gift Membership Form
 */
function ms_gift_membership_redeem_gift_form($form, &$form_state, $gift_mem) {
  $form['gift_mem'] = array(
    '#type' => 'value',
    '#value' => $gift_mem,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Claim Gift'),
  );
  $form['#redirect'] = 'user';
  return $form;
}

/**
 * Submit Function for the Redeem Gift Form
 */
function ms_gift_membership_redeem_gift_form_submit($form, &$form_state) {
  $v = $form_state['values'];
  global $user;
  $account = $user;

  $gift_mem = $v['gift_mem'];

  // Change the owner of the order
  $order = ms_core_order_load($gift_mem->oid);
  $order->uid = $account->uid;
  ms_core_order_save($order);

  $m_plan = ms_products_plan_load($gift_mem->mpid);

  // Add and remove the roles at the start of the membership
  ms_membership_change_roles($account->uid, $m_plan->start_grant_roles, $m_plan->start_remove_roles);

  // Insert into Memberships database
  $status = 'completed';
  $expiration = ms_products_get_expiration_date($m_plan->sku);
  $membership = ms_products_insert_purchase($gift_mem->oid, $account->uid, $m_plan->sku, $expiration, $status, 0, 1, 1);

  // Invoke hook_ms_membership_expiring to let other modules act on a new membership
  module_invoke_all('ms_membership_signup', $account, $membership, $m_plan);

  $payment_vars = array(
    'id' => $membership->id,
  );

  //send email
  ms_products_send_mail('ms_membership', 'signup', $account->mail, user_preferred_language($account), $payment_vars);

  // Send Email to Admin(s)
  ms_membership_notify_admins('admin_signup', $payment_vars);

  // Notify the user
  drupal_set_message(t('Your gift has been added to your account.'));

  // Change the Gift Membership Status to 'Opened'
  ms_gift_membership_change_gift_status($gift_mem->id, 2);
  ms_gift_membership_change_opened_date($gift_mem->id);
}

/**
 * Build Function for the Gift Membership Form
 */
function ms_gift_membership_gift_membership_form($form, &$form_state) {
  drupal_add_js(drupal_get_path('module', 'ms_gift_membership') . '/ms_gift_membership.js', 'module');
  drupal_add_css(drupal_get_path('module', 'ms_gift_membership') . '/ms_gift_membership.css', 'module');
  $form['gift'] = array(
    '#type' => 'fieldset',
    '#title' => t('Gift Membership'),
    '#weight' => -49,
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['gift']['giver_name'] = array(
    '#type' => 'textfield',
    '#title' => t("Your Name"),
    '#size' => 32,
    '#maxlength' => 64,
    '#description' => t("Your name as you would like it to appear to the Receiver."),
    '#required' => TRUE,
  );
  $form['gift']['giver_email'] = array(
    '#type' => 'textfield',
    '#title' => t("Your E-mail"),
    '#size' => 32,
    '#maxlength' => 64,
    '#description' => t("The E-mail Address you would like to be notified at when the Receiver receives the gift."),
    '#required' => TRUE,
  );
  $form['gift']['receiver_info'] = array(
    '#type' => 'fieldset',
    '#title' => t('Receiver Info'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#description' => t('How do you wish to send this gift?'),
  );
  $form['gift']['receiver_info']['send_email'] = array(
    '#type' => 'checkbox',
    '#title' => t("Send to recipient by e-mail"),
    '#required' => FALSE,
    '#default_value' => TRUE,
  );
  $form['gift']['receiver_info']['send_mail'] = array(
    '#type' => 'value',
    '#value' => FALSE,
  );
  if (variable_get('ms_gift_membership_allow_shipping', TRUE)) {
    $form['gift']['receiver_info']['send_mail'] = array(
      '#type' => 'checkbox',
      '#title' => t("Send physical gift card"),
      '#required' => FALSE,
    );
  }
  $form['gift']['receiver_info']['receiver_name'] = array(
    '#type' => 'textfield',
    '#title' => t("Receiver's Name"),
    '#size' => 32,
    '#maxlength' => 64,
    '#description' => t("The Name of the person you are giving this gift to."),
    '#required' => TRUE,
  );
  $form['gift']['receiver_info']['receiver_email'] = array(
    '#type' => 'textfield',
    '#title' => t("Receiver's E-mail"),
    '#size' => 32,
    '#maxlength' => 64,
    '#description' => t("The E-mail Address of the person you are giving this gift to."),
    '#required' => FALSE,
  );
  $form['gift']['receiver_info']['receiver_address'] = array(
    '#type' => 'value',
    '#value' => '',
  );
  if (variable_get('ms_gift_membership_allow_shipping', TRUE)) {
    $form['gift']['receiver_info']['receiver_address'] = array(
      '#type' => 'textarea',
      '#title' => t("Mailing Address"),
      '#required' => FALSE,
      '#description' => t('Type in your address if you would like it shipped to you. Or, if you would like the card sent directly to the recipient, use their address and make sure to include a message below.'),
    );
  }
  $form['gift']['message'] = array(
    '#type' => 'textarea',
    '#title' => t("Message"),
    '#description' => t("Enter an optional message that will be sent with the gift."),
    '#required' => FALSE,
  );
  $form['gift']['mpid'] = array(
    '#type' => 'radios',
    '#title' => 'Membership',
    '#options' => ms_gift_membership_get_plans(),
    '#description' => t("Select which Membership you would like to give."),
    '#required' => TRUE,
  );
  if ($mpid = arg(2) AND $m_plan = ms_products_plan_load($mpid)) {
    $form['gift']['mpid']['#default_value'] = $m_plan->sku;
  }
  $form['gift']['gift_date'] = array(
    '#type' => 'date',
    '#title' => t('When to Send?'),
    '#description' => t('Select what day you would like the gift to be sent.'),
    '#required' => TRUE,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Add to Cart'),
  );
  $form['#redirect'] = 'ms/checkout';
  return $form;
}

/**
 * Validate Function for the Gift Membership Form
 */
function ms_gift_membership_gift_membership_form_validate($form, &$form_state) {
  $v = $form_state['values'];

  if (!valid_email_address($v['giver_email'])) {
    form_set_error('giver_email', t('You must enter a valid e-mail address.'));
  }
  if ($v['send_mail']) {
    if (!$v['receiver_address']) {
      form_set_error('receiver_address', t('You must enter a mailing address.'));
    }
  } else {
    // Validate the email addresses
    if (!valid_email_address($v['receiver_email'])) {
      form_set_error('receiver_email', t('You must enter a valid e-mail address.'));
    }
    // Verify Email Address is not being used
    $email_account = user_load_by_mail($v['receiver_email']);
    if ($email_account && user_access('block redeem gift membership', $email_account)) {
      form_set_error('receiver_email', t('The email address you entered already has an active membership on this site.
        We are sorry, but a gift cannot be given to an existing subscriber at this time.'));
    }
  }
}

/**
 * Submit Function for the Gift Membership Form
 */
function ms_gift_membership_gift_membership_form_submit($form, &$form_state) {
  $v = $form_state['values'];

  if ($m_plan = ms_products_plan_load($v['mpid'])) {
    $title = t('Gift: @membership for @name', array('@membership' => $m_plan->name, '@name' => $v['receiver_name']));
    $product = ms_core_new_product($title, 'ms_gift_membership', $m_plan->sku, $m_plan->recurring_schedule['main_amount'], 'cart');
    $product->recurring_schedule = $m_plan->recurring_schedule;

    // Store the Data Overrides
    $product->data = array(
      'receiver_name' => $v['receiver_name'],
      'receiver_email' => $v['receiver_email'],
      'giver_name' => $v['giver_name'],
      'giver_email' => $v['giver_email'],
      'send_mail' => $v['send_mail'],
      'receiver_address' => $v['receiver_address'],
      'message' => $v['message'],
      'mpid' => $v['mpid'],
      'gift_date' => $v['gift_date'],
    );

    ms_core_add_cart_product($product);

    ms_core_checkout();
  } else {
    drupal_set_message(t('Error: Invalid plan selected.'), 'error');
  }
}

// ======================================
// MAIL
// ======================================

/**
 * Handle Mail functions
 */
function ms_gift_membership_mail($key, &$message, $gift_mem) {
  // Load some variables
  $m_plan = ms_products_plan_load($gift_mem->mpid);
  $m_plan->key = $key;


  $tokens = array(
    'ms_gift_membership' => $gift_mem,
    'ms_products_plan' => $m_plan,
  );
  $order = ms_core_order_load($gift_mem->oid);
  if ($order) {
    $payment = ms_core_get_last_payment($order);
    $tokens['ms_core_order'] = $order;
    $tokens['ms_core_payment'] = $payment;
    $account = user_load($order->uid);
    $tokens['user'] = $account;
  }

  $body = '';
  $subject = '';

  switch ($key) {
    case 'purchase_email':
      $subject = variable_get('ms_gift_membership_gift_purchase_mail_subject', '');
      $body = variable_get('ms_gift_membership_gift_purchase_mail_body', '');
      break;

    case 'purchase_email_mail':
      $subject = variable_get('ms_gift_membership_gift_purchase_mail_mail_subject', '');
      $body = variable_get('ms_gift_membership_gift_purchase_mail_mail_body', '');
      break;

    case 'purchase_email_mail_admin':
      $subject = t('New Gift Membership Pending');
      $body = t('A gift membership has been purchased and needs to be mailed. See the overview page for details: !link',
        array('!link' => url('admin/moneysuite/ms_gift_membership/overview', array('absolute' => TRUE))));
      break;

    case 'receiver_email':
      $subject = variable_get('ms_gift_membership_receiver_gift_mail_subject', '');
      $body = variable_get('ms_gift_membership_receiver_gift_mail_body', '');
      break;

    case 'giver_email':
      $subject = variable_get('ms_gift_membership_giver_gift_mail_subject', '');
      $body = variable_get('ms_gift_membership_giver_gift_mail_body', '');
      break;

    case 'receiver_reminder':
      $subject = variable_get('ms_gift_membership_gift_receiver_reminder_mail_subject', '');
      $body = variable_get('ms_gift_membership_gift_receiver_reminder_mail_body', '');
      break;

    case 'giver_reminder':
      $subject = variable_get('ms_gift_membership_gift_giver_reminder_mail_subject', '');
      $body = variable_get('ms_gift_membership_gift_giver_reminder_mail_body', '');
      break;
  }

  // Replace the Tokens
  $message['subject'] = token_replace($subject, $tokens);
  $message['body'][] = token_replace($body, $tokens);
}

// ======================================
// TOKEN
// ======================================

/**
 * Implements hook_token_info
 */
function ms_gift_membership_token_info() {
  $types = array(
    'ms_gift_membership' => array(
      'name' => t('Gift Membership'),
      'description' => t('Gift Membership Variables'),
      'needs-data' => 'ms_gift_membership',
    ),
  );

  $tokens = array(
    'ms_gift_membership' => array(
      'receiverName' => array(
        'name' => t('Receiver Name'),
        'description' => t("The name of the receiver"),
      ),
      'receiverEmail' => array(
        'name' => t('Receiver Email'),
        'description' => t("The email of the receiver"),
      ),
      'giverName' => array(
        'name' => t('Giver Name'),
        'description' => t("The name of the giver"),
      ),
      'giverEmail' => array(
        'name' => t('Giver Email'),
        'description' => t("The email of the giver"),
      ),
      'receiverAddress' => array(
        'name' => t('Receiver Address'),
        'description' => t("The mailing address to send the gift to."),
      ),
      'giftDate' => array(
        'name' => t('Gift Date'),
        'description' => t("The date the gift will be sent"),
      ),
      'giftCode' => array(
        'name' => t('Gift Code'),
        'description' => t("The gift code"),
      ),
      'giftMessage' => array(
        'name' => t('Gift Message'),
        'description' => t("The message entered for the gift"),
      ),
      'planName' => array(
        'name' => t('Plan name'),
        'description' => t("The name of the membership plan."),
      ),
      'redeemUrl' => array(
        'name' => t('Redeem URL'),
        'description' => t("The URL to redeem the gift"),
      ),
    ),
  );

  return array('types' => $types, 'tokens' => $tokens);
}

/**
 * Implements hook_tokens
 */
function ms_gift_membership_tokens($type, $tokens, $data = array(), $options = array()) {
  $replacements = array();
  if ($type == 'ms_gift_membership' && !empty($data['ms_gift_membership'])) {
    $object = $data['ms_gift_membership'];
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'receiverName':
          $replacements[$original] = $object->receiver_name;
          break;
        case 'receiverEmail':
          $replacements[$original] = $object->receiver_email;
          break;
        case 'giverName':
          $replacements[$original] = $object->giver_name;
          break;
        case 'giverEmail':
          $replacements[$original] = $object->giver_email;
          break;
        case 'receiverAddress':
          $replacements[$original] = $object->receiver_address;
          break;
        case 'giftDate':
          $replacements[$original] = format_date($object->gift_date, 'custom', 'M d, Y');
          break;
        case 'giftCode':
          $replacements[$original] = $object->gift_code;
          break;
        case 'giftMessage':
          $replacements[$original] = $object->message;
          break;
        case 'planName':
          $plan = ms_products_plan_load($object->mpid);
          $replacements[$original] = $plan->name;
          break;
        case 'redeemUrl':
          $replacements[$original] = url('gift/redeem/' . $object->gift_code, array('absolute' => TRUE));
          break;
      }
    }
  }

  return $replacements;
}

// ======================================
// MS Hooks
// ======================================

/**
 * Implementation of hook_ms_order_payment
 */
function ms_gift_membership_ms_order_payment($type, $product, $order, $payment) {
  if ($product->module == 'ms_gift_membership') {
    if (variable_get('ms_core_debug_mode', FALSE)) {
      watchdog('ms_gift_membership', 'Acting on a Gift Membership Payment. Here are the details: !product',
        array('!product' => '<pre>' . print_r($product, TRUE) . '</pre>'));
    }

    $account = user_load($order->uid);

    // Handle Refunds
    if ($type == 'refund' OR $type == 'reversal') {
      if (variable_get('ms_core_debug_mode', FALSE)) {
        watchdog('ms_gift_membership', 'Refund Notice received for MS Gift Memberships, removing gift membership',
          array('%username' => $account->name));
      }

      // Remove the gift membership record
      db_query("DELETE FROM {ms_gift_memberships} WHERE oid = :oid", array(':oid' => $order->oid));
    } else {
      // Create the Gift Membership object
      $gift_mem = (object)$product->data;
      $gift_mem->status = $gift_mem->send_mail ? 3 : 0;
      $gift_mem->oid = $order->oid;
      $gift_mem->created = time();
      $gift_mem->gift_date = strtotime($product->data['gift_date']['year'] . '-' . $product->data['gift_date']['month'] . '-' . $product->data['gift_date']['day']);

      if ($gift_mem->send_mail) {
        $code = ms_core_get_random_key(6);
        while (ms_gift_membership_load_gift_membership_by_code($code)) {
          $code = ms_core_get_random_key(6);
        }
        $gift_mem->gift_code = $code;
      } else {
        $gift_mem->gift_code = strtoupper(drupal_get_token(serialize($gift_mem)));
      }

      // Write the Gift Membership record
      if (drupal_write_record('ms_gift_memberships', $gift_mem)) {
        // Send a confirmation email to the purchaser

        if ($gift_mem->send_mail) {
          drupal_mail('ms_gift_membership', 'purchase_email_mail', $gift_mem->giver_email, user_preferred_language($account), $gift_mem);
          drupal_mail('ms_gift_membership', 'purchase_email_mail_admin', variable_get('site_mail', ''), language_default(), $gift_mem);
        } else {
          drupal_mail('ms_gift_membership', 'purchase_email', $gift_mem->giver_email, user_preferred_language($account), $gift_mem);
        }
      } else {
        ms_core_log_error('ms_gift_membership', 'ERROR: The gift membership record could not be written.');
      }
    }
  }
}

/**
 * Implementation of hook_ms_product_load
 */
function ms_gift_membership_ms_product_load($module, $id) {
  if ($module == 'ms_gift_membership') {
    $m_plan = ms_products_plan_load($id);

    if ($m_plan->sku) {
      $product = ms_core_new_product($m_plan->name, 'ms_membership', $m_plan->sku, $m_plan->recurring_schedule['main_amount'], $m_plan->cart_type);

      // Set the Recurring Schedule Settings
      $product->recurring_schedule = $m_plan->recurring_schedule;

      // Store the Data Overrides
      $product->data = $m_plan->data;

      return $product;
    }
  }
}

/**
 * Implements hook_ms_product_id_change().
 */
function ms_gift_membership_ms_product_id_change($old_id, $new_id) {
  list(, $new_id_id) = explode('-', $new_id);
  list($old_id_module, $old_id_id) = explode('-', $old_id);
  if ($old_id_module == 'ms_membership') {
    db_update('ms_gift_memberships')
      ->fields(array(
        'mpid' => $old_id_id,
      ))
      ->condition('mpid', $new_id_id)
      ->execute();

    $allowed_plans = variable_get('ms_gift_membership_allowed_plans', array());
    $new_plans = variable_get('ms_gift_membership_allowed_plans', array());

    foreach ($allowed_plans as $id => $plan) {
      if ($id == $old_id) {
        unset($new_plans[$id]);
        $new_plans[$new_id] = $plan;
      }
    }

    variable_set('ms_gift_membership_allowed_plans', $new_plans);
  }
}