<?php

/**
 * @file
 * Allows the user to turn nodes into simple products.
 *
 * Original author: Leighton Whiting - Released under GENERAL PUBLIC LICENSE 
 * Current maintenance by multiple MoneySuite users.
 * Re: new initiative: https://www.drupal.org/node/2315653
 */

/**
 * Implements hook_ms_products().
 */
function ms_simple_products_ms_products() {
  $products = array();
  $fields = field_info_fields();

  foreach ($fields as $field) {
    if ($field['type'] == 'ms_simple_products_product') {
      foreach ($field['bundles'] as $entity_type => $bundle) {
        $entities = entity_load($entity_type, FALSE, array('type' => $bundle));
        foreach ($entities as $entity) {
          list($entity_id) = entity_extract_ids($entity_type, $entity);
          if (!empty($entity->{$field['field_name']}['und'][0]['sku'])) {
            foreach ($entity->{$field['field_name']}['und'] as $product_info) {
              $product = ms_core_new_product($product_info['name'], 'ms_simple_products', $product_info['sku'], $product_info['price']);

              // Add the product variables
              $product->owner = $entity->uid;
              $product->module_title = t('MS Simple Products');
              $product->edit_path = 'node/' . $entity_id . '/edit';

              // Also add in the product options.
              $product_options = array();
              $raw_options = ms_core_map_select_options($product_info['options'], array('id', 'name', 'price'));

              foreach ($raw_options as $option_id => $option_info) {
                // Radios.
                if (strpos($option_id, '[') === 0) {
                  preg_match('/^\[(.+)\](.*)/', $option_id, $matches);
                  $parent_id = $matches[1];
                  // Check if this is a radio child or parent.
                  if (strpos($option_id, ']') === strlen($option_id) - 1) {
                    $product_options[$parent_id] = (object)array(
                      'amount' => !empty($option_info['price']) ? $option_info['price'] : 0,
                      'title' => !empty($option_info['price']) ? $option_info['name'] . " (" . ms_core_format_money($option_info['price']) . ")" : $option_info['name'],
                      'optional' => FALSE,
                      'widget' => 'radios',
                      'sub_options' => '',
                    );
                  } else {
                    $child_id = $matches[2];
                    $option_info['id'] = $child_id;
                    $product_options[$parent_id]->sub_options .= implode('|', $option_info) . "\n";
                  }
                } else {
                  $product_options[$option_id] = (object)array(
                    'amount' => !empty($option_info['price']) ? $option_info['price'] : 0,
                    'title' => !empty($option_info['price']) ? $option_info['name'] . " (" . ms_core_format_money($option_info['price']) . ")" : $option_info['name'],
                    'optional' => TRUE,
                    'widget' => 'checkbox',
                  );
                }
              }
              ms_products_add_product_options($product, $product_options);

              $products['ms_simple_products-' . $product_info['sku']] = $product;
            }
          }
        }
      }
    }
  }

  return $products;
}

/**
 * Loads a product given the sku.
 */
function ms_simple_products_get_product($sku) {
  return ms_core_get_module_product('ms_simple_products-' . $sku);
}

/**
 * Implements hook_field_info().
 *
 * Provides the description of the field.
 */
function ms_simple_products_field_info() {
  return array(
    'ms_simple_products_product' => array(
      'label' => t('MoneySuite Product'),
      'description' => t('Price field that lets you turn the entity into a simple product.'),
      'default_widget' => 'ms_simple_products_product_widget',
      'default_formatter' => 'ms_simple_products_product_link',
    ),
  );
}

/**
 * Implements hook_field_is_empty().
 */
function ms_simple_products_field_is_empty($item, $field) {
  return empty($item['name']);
}

/**
 * Implements hook_field_formatter_info().
 */
function ms_simple_products_field_formatter_info() {
  return array(
    'ms_simple_products_product_link' => array(
      'label' => t('Show a purchase link for the product'),
      'field types' => array('ms_simple_products_product'),
    ),
    'ms_simple_products_product_button' => array(
      'label' => t('Show a purchase button for the product'),
      'field types' => array('ms_simple_products_product'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function ms_simple_products_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'ms_simple_products_product_link':
      foreach ($items as $delta => $item) {
        $element[$delta]['#markup'] = theme('ms_simple_products_product_link', array('item' => $item));
      }
      break;

    case 'ms_simple_products_product_button':
      foreach ($items as $delta => $item) {
        $element[$delta]['#markup'] = theme('ms_simple_products_product_button', array('item' => $item));
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_theme().
 */
function ms_simple_products_theme() {
  return array(
    // Themes for the formatters.
    'ms_simple_products_product_link' => array(
      'render element' => 'item',
    ),
    'ms_simple_products_product_button' => array(
      'render element' => 'item',
    ),
    'ms_simple_products_product_widget_form' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Theme function for ms_simple_products_product_link field formatter.
 */
function theme_ms_simple_products_product_link($variables) {
  $item = $variables['item'];
  $output = "";

  $output .= "<div class='ms_simple_products-cart-link'>";
  if ($product = ms_core_get_module_product('ms_simple_products-' . $item['sku'])) {
    $output .= "<div class='ms_simple_products-cart-link-title'>" . $item['name'] . "</div>";
    $output .= l(t('Add to cart'), 'ms/purchase/ms_simple_products-' . $item['sku']);
  }
  $output .= "</div>";

  return $output;
}

/**
 * Theme function for ms_simple_products_product_button field formatter.
 */
function theme_ms_simple_products_product_button($variables) {
  $item = $variables['item'];
  $output = "";
  if ($product = ms_core_get_module_product('ms_simple_products-' . $item['sku'])) {
    $output .= "<div class='ms_simple_products-cart-button-title'>" . $item['name'] . "</div>";
    $output .= "<div class='ms_simple_products-cart-button'>";
    $output .= ms_core_get_add_to_cart_button($product);
    $output .= "</div>";
  }

  return $output;
}

/**
 * Implements hook_element_info().
 */
function ms_simple_products_element_info() {
  $elements = array();
  $elements['ms_simple_products_product_widget'] = array(
    '#input' => TRUE,
    '#process' => array('ms_simple_products_product_field_process'),
    '#theme' => 'ms_simple_products_product_widget_form',
    '#theme_wrappers' => array('form_element'),
  );
  return $elements;
}

/**
 * Implements hook_field_widget_info().
 */
function ms_simple_products_field_widget_info() {
  return array(
    'ms_simple_products_product_widget' => array(
      'label' => t('MS Product'),
      'field types' => array('ms_simple_products_product'),
    ),
  );
}

/**
 * Implements hook_field_presave().
 */
function ms_simple_products_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  foreach ($items as $delta => $value) {
    $items[$delta]['price'] = round((float)$items[$delta]['price'], 2);
  }
}

/**
 * Process the element before displaying the field.
 */
function ms_simple_products_product_field_process($element, $form_state, $complete_form) {
  $instance = field_widget_instance($element, $form_state);

  // Display a simple price field and name field, as well as stock and options
  $element['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
    '#required' => $instance['required'],
    '#default_value' => isset($element['#value']['name']) ? $element['#value']['name'] : '',
    '#description' => t("The name for this product, as displayed in the Order."),
  );
  $element['sku'] = array(
    '#type' => 'machine_name',
    '#title' => t('SKU'),
    '#required' => $instance['required'],
    '#default_value' => isset($element['#value']['sku']) ? $element['#value']['sku'] : '',
    '#description' => t("The sku for this product. Must be unique, with no spaces or special characters."),
    '#machine_name' => array(
      'exists' => 'ms_simple_products_get_product',
      'source' => array_merge($element['#array_parents'], array('name')),
      'label' => t('SKU'),
      'replace_pattern' => '[^a-z0-9-]+',
      'replace' => '-',
    ),
    '#element_validate' => array('ms_simple_products_field_sku_validate'),
  );
  $element['price'] = array(
    '#type' => 'textfield',
    '#title' => t('Price'),
    '#default_value' => isset($element['#value']['price']) ? $element['#value']['price'] : 0,
    '#description' => t("The price for this product."),
  );
  $element['stock'] = array(
    '#type' => 'textfield',
    '#title' => t('Stock'),
    '#default_value' => isset($element['#value']['stock']) ? $element['#value']['stock'] : '',
    '#description' => t("The stock for this product. Leave blank for unlimited."),
  );
  $element['options'] = array(
    '#type' => 'textarea',
    '#title' => t('Options'),
    '#default_value' => isset($element['#value']['options']) ? $element['#value']['options'] : '',
    '#description' => t("Enter options available, one per line, in the format key_name|Value Name|extra_fee(Optional). Example: xl|Extra Large|5.00"),
  );

  return $element;
}

/**
 * Validate the element to see if it is already in use.
 *
 * @todo - This isn't working. Maybe use #element_validate in the hook_element_info function instead: https://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_element_info/7
 */
function ms_simple_products_field_sku_validate($element, &$form_state) {
  if (!empty($element['#value']) && $element['#value'] != $element['#default_value'] && ($product = ms_simple_products_get_product($element['#value']))) {
    form_error($element, t('The sku is already in use.'));
  }
}

/**
 * Implements hook_field_validate().
 */
function ms_simple_products_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {

}

/**
 * FAPI theme for individual form elements.
 */
function theme_ms_simple_products_product_widget_form($vars) {
  $element = $vars['element'];

  $output = '';
  $output .= '<div>' . drupal_render($element['name']) . '</div>';
  $output .= '<div>' . drupal_render($element['sku']) . '</div>';
  $output .= '<div>' . drupal_render($element['price']) . '</div>';
  $output .= '<div>' . drupal_render($element['stock']) . '</div>';
  $output .= '<div>' . drupal_render($element['options']) . '</div>';

  return $output;
}

/**
 * Implements hook_field_widget_form().
 */
function ms_simple_products_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $element += array(
    '#type' => $instance['widget']['type'],
    '#default_value' => isset($items[$delta]) ? $items[$delta] : '',
  );

  return $element;
}

/**
 * Implements hook_field_widget_error().
 */
function ms_simple_products_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'ms_simple_products_invalid':
      form_error($element, $error['message']);
      break;
  }
}
