<?php

/**
 * @file
 * Provides integration with Google Analytics to add e-commerce tracking.
 *
 * Original author: Leighton Whiting - Released under GENERAL PUBLIC LICENSE 
 * Current maintenance by multiple MoneySuite users.
 * Re: new initiative: https://www.drupal.org/node/2315653
 * @todo Think of a way to record recurring payments. Would likely require a
 *   PHP/cURL method, which wouldn't allow for certain tracking properties...
 */

/**
 * Implements hook_help().
 */
function ms_googleanalytics_help($path, $arg) {
  switch ($path) {
    case 'admin/help#ms_googleanalytics':
      return '<p>' . t("You must setup your Google Analytics account to enable
        E-Commerce tracking. Follow the instructions <a href='@url'>here</a>.",
        array('@url' => url('http://support.google.com/analytics/bin/answer.py?hl=en&answer=1009612'))) . '</p>';
  }
}

/**
 * Implements hook_enable().
 */
function ms_googleanalytics_enable() {
  // Get the weight of the Google Analytics module.
  $weight = db_query("SELECT weight FROM {system} WHERE name = :module", array(':module' => 'googleanalytics'))->fetchField();

  // Update the weight of the MS Google Analytics module so its hooks get called
  // after the actual Google Analytics module.
  db_update('system')
    ->fields(array('weight' => max(1000, $weight + 1)))
    ->condition('name', 'ms_googleanalytics')
    ->execute();
}

/**
 * Implements hook_menu().
 */
function ms_googleanalytics_menu() {
  $items = array();
  $items['admin/moneysuite/ms_googleanalytics'] = array(
    'title' => 'MS Google Analytics',
    'description' => 'Set the Google Analytics Settings here',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_googleanalytics_admin'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_ms_core_overrides().
 */
function ms_googleanalytics_ms_core_overrides() {
  return array(
    'ms_googleanalytics' => array(
      'title' => t('MS Google Analytics'),
      'form' => 'ms_googleanalytics_admin',
    ),
  );
}

/**
 * Admin Settings Form
 */
function ms_googleanalytics_admin($form, &$form_state) {
  $form['main'] = array(
    '#type' => 'fieldset',
    '#title' => t('Main Settings'),
  );
  $form['main']['ms_googleanalytics_account'] = array(
    '#type' => 'textfield',
    '#title' => t('Account ID'),
    '#default_value' => variable_get('ms_googleanalytics_account', ''),
    '#description' => t('Set the account id used for tracking.'),
    '#required' => TRUE,
    '#ms_override' => TRUE,
  );

  return system_settings_form($form);
}

/**
 * Implements hook_ms_thankyou().
 */
function ms_googleanalytics_ms_thankyou($order) {
  // @todo Check if the payment has already been entered.
  // Build the GA tracking code.
  $script = ms_googleanalytics_ecommerce_js($order);

  // Add the code to the footer.
  drupal_add_js($script, array('type' => 'inline', 'scope' => 'footer', 'preprocess' => FALSE));
}

/**
 * Build the e-commerce JS passed to Google Analytics for order tracking.
 *
 * @param $order
 *   The fully loaded order object to convert into GA JS.
 *
 * @return
 *   The JS that should be added to the page footer.
 */
function ms_googleanalytics_ecommerce_js($order) {
  $account_id = ms_core_variable_get('ms_googleanalytics_account', '', $order);
  $script = "var _gaq = _gaq || [];
_gaq.push(['_setAccount', '$account_id']);
_gaq.push(['_trackPageview']);";

  // Put the arguments into an array that is safe to implode directly.
  $args = array(
    '"' . $order->order_number . '"', // order ID
    drupal_json_encode(variable_get('site_name', '')), // store
    '"' . $order->amount . '"', // total
    '"' . 0 . '"', // @todo - Add tax reporting
    '"' . 0 . '"', // @todo - Add shipping reporting
    drupal_json_encode($order->billing_address['city']), // city
    drupal_json_encode($order->billing_address['state']), // state
    drupal_json_encode($order->billing_address['country']), // country
  );

  // Add the transaction line to the JS.
  $script .= '_gaq.push(["_addTrans", ' . implode(', ', $args) . ']);';

  // Loop through the products on the order.
  foreach ($order->products as $product) {
    // Put the arguments into an array that is safe to implode directly.
    $args = array(
      '"' . $order->order_number . '"', // order ID
      drupal_json_encode($product->id), // SKU/code
      drupal_json_encode($product->name), // Product Name
      drupal_json_encode($product->module), // category or variation
      '"' . $product->amount . '"', // unit price
      '"' . $product->qty . '"', // quantity
    );

    // Add the item line to the JS.
    $script .= '_gaq.push(["_addItem", ' . implode(', ', $args) . ']);';
  }

  // Add the function to submit the transaction to GA.
  $script .= '_gaq.push(["_trackTrans"]);';

  $script .= "(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();";

  return $script;
}
