<?php
/**
 * @file
 * Allows you to sell Downloadable Files
 * Licensed under the GNU GPLv2 License
 * Original author: Leighton Whiting - Released under GENERAL PUBLIC LICENSE 
 * Current maintenance by multiple MoneySuite users.
 * Re: new initiative: https://www.drupal.org/node/2315653
 */

/**
 * Display help and module information
 */
function ms_files_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/help#ms_files":
      $output = '<p>' .  t("Allows you to sell Downloadable Files") . '</p>';
      break;
  }
  return $output;
}

/**
 * Implementation of hook_permission().
 */
function ms_files_permission() {
  $perms = array(
    'administer moneysuite file downloads' => array(
      'title' => t('Administer MS File Downloads'),
      'description' => t('Allows the user to add, remove and edit MS File Downloads.'),
      'restrict access' => TRUE,
    ),
    'download moneysuite file downloads' => array(
      'title' => t('Download MS File Downloads'),
      'description' => t('Allows the user to download their MS File Downloads.'),
    ),
    'download moneysuite file downloads for free' => array(
      'title' => t('Download MS File Downloads For Free'),
      'description' => t('Allows the user to download all MS File Downloads without having to pay.'),
      'restrict access' => TRUE,
    ),
    'purchase moneysuite file downloads' => array(
      'title' => t('Purchase MS File Downloads'),
      'description' => t('Allows the user to purchase MS File Downloads.'),
    ),
  );

  return $perms;
}

function ms_files_access_test($account) {
  global $user;
  return (user_access('administer moneysuite file downloads') OR (user_access('download moneysuite file downloads') && ($account->uid == $user->uid)));
}

/**
 * Implementation of hook_menu
 */
function ms_files_menu() {
  $items = array();
  $items['admin/structure/ms_files'] = array(
    'title' => 'File Download Plans',
    'page callback' => 'ms_files_list_files',
    'access arguments' => array('administer moneysuite file downloads'),
    'description' => 'Create and Edit File Download Plans',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/structure/ms_files/list'] = array(
    'title' => 'List File Download Plans',
    'page callback' => 'ms_files_list_files',
    'access arguments' => array('administer moneysuite file downloads'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => '-1'
  );
  $items['admin/structure/ms_files/downloads'] = array(
    'title' => 'File Downloads',
    'page callback' => 'ms_files_show_file_downloads',
    'access arguments' => array('administer moneysuite file downloads'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/structure/ms_files/downloads/add'] = array(
    'title' => 'Add File Download',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_files_download_add_form'),
    'access arguments' => array('administer moneysuite file downloads'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/structure/ms_files/downloads/edit/%'] = array(
    'title' => 'Edit File Download',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_files_download_edit_form', 5),
    'access arguments' => array('administer moneysuite file downloads'),
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );
  $items['admin/structure/ms_files/downloads/delete/%'] = array(
    'title' => 'Delete File Download',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_files_delete_file_download_confirm', 5),
    'access arguments' => array('administer moneysuite file downloads'),
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );
  $items['admin/structure/ms_files/autocomplete'] = array(
    'page callback' => 'ms_files_autocomplete_user',
    'access arguments' => array('administer moneysuite file downloads'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/structure/ms_files/add'] = array(
    'title' => 'Add File Download Plan',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_files_add_file_profile_form'),
    'access arguments' => array('administer moneysuite file downloads'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/structure/ms_files/edit/%'] = array(
    'title' => 'Edit File Download Plan',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_files_edit_file_profile_form', 'edit', 4),
    'access arguments' => array('administer moneysuite file downloads'),
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );
  $items['admin/structure/ms_files/clone/%'] = array(
    'title' => 'Clone File Download Plan',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_files_edit_file_profile_form', 'clone', 4),
    'access arguments' => array('administer moneysuite file downloads'),
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );
  $items['admin/structure/ms_files/delete/%'] = array(
    'title' => 'Delete File Download Plan',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_files_delete_file_profile_confirm', 4),
    'access arguments' => array('administer moneysuite file downloads'),
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );
  $items['user/%user/files'] = array(
    'title' => 'My Files',
    'description' => 'View your purchased files.',
    'page callback' => 'ms_files_user_downloads',
    'page arguments' => array(1),
    'access callback' => 'ms_files_access_test',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );
  $items['file/download/%'] = array(
    'page callback' => 'ms_files_download',
    'page arguments' => array(2),
    'access arguments' => array('download moneysuite file downloads'),
    'type' => MENU_CALLBACK,
  );
  $items['file/get/%'] = array(
    'page callback' => 'ms_files_download_test',
    'page arguments' => array(2),
    'access arguments' => array('download moneysuite file downloads for free'),
    'type' => MENU_CALLBACK,
  );
  $items['file/purchase/%'] = array(
    'title' => 'Purchase File',
    'page callback' => 'ms_files_purchase_file',
    'page arguments' => array(2),
    'access arguments' => array('purchase moneysuite file downloads'),
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );
  $items['admin/moneysuite/ms_files'] = array(
    'title' => 'File Downloads Suite',
    'description' => 'Set the various File Downloads Suite Settings here',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_files_admin'),
    'access arguments' => array('administer moneysuite file downloads'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

// ======================================
// Functions:
// ======================================

/**
 * Return the text for the file status
 */
function ms_files_get_file_status_text($status) {
  switch ($status) {
    case 0:
      return 'Inactive';
    case 1:
      return 'Active';
    case 2:
      return 'Download Limit Reached';
    case 3:
      return 'Expired';
  }
}

/**
 * Return the text for the file status
 */
function ms_files_get_file_statuses() {
  return array(
    '0' => 'Inactive',
    '1' => 'Active',
    '2' => 'Download Limit Reached',
    '3' => 'Expired',
  );
}

/*
 * Change a file status
 */
function ms_files_change_file_status($fuid, $status = 0) {
  ms_core_log('ms_files', 'Changed the Status of File Download !fuid to !status', array('!fuid' => $fuid, '!status' => $status));

  return db_update('ms_files_downloads')
    ->fields(array(
      'status' => $status,
    ))
    ->condition('fuid', $fuid)
    ->execute();
}

/*
 * Colors for txn_type
 */
function ms_files_get_status($status) {
  switch ($status) {
    case 'Refunded':
    case 'Reversed':
      return "<span style='color:red;'>$status</span>";
    case 'Completed':
      return "<span style='color:green;'>$status</span>";
    default:
      return $status;
  }
}

/*
 * Add a role from a user
 */
function ms_files_add_role($uid, $rid) {
  if ($uid) {
    if (!in_array($rid, array(DRUPAL_ANONYMOUS_RID, DRUPAL_AUTHENTICATED_RID))) {
      $id = db_insert('users_roles')
        ->fields(array(
              'uid' => $uid,
              'rid' => $rid,
            ))
        ->execute();
    }
    $roles = user_roles(TRUE);
    $account = user_load($uid);
    ms_core_log('ms_files', 'Added role !role to !user.',
      array('!role' => $roles[$rid], '!user' => l($account->name, 'user/' . $account->uid)));
  }
}

/*
 * Remove a role from a user
 */
function ms_files_remove_role($uid, $rid) {
  if ($uid) {
    if (!in_array($rid, array(DRUPAL_ANONYMOUS_RID, DRUPAL_AUTHENTICATED_RID))) {
      db_delete('users_roles')
        ->condition('uid', $uid)
        ->condition('rid', $rid)
        ->execute();
    }
    $roles = user_roles(TRUE);
    $account = user_load($uid);
    ms_core_log('ms_files', 'Removed role !role from !user.',
      array('!role' => $roles[$rid], '!user' => l($account->name, 'user/' . $account->uid)));
  }
}

/**
 * Generates a unique random key
 *
 * @return
 *   The unique 32 digit order key
 */
function ms_files_generate_file_key() {
  $key = ms_core_get_random_key(32);

  while (ms_files_load_file_by_key($key)) {
    $key = ms_core_get_random_key(32);
  }

  return $key;
}

/**
 * Save a file user to the database
 */
function ms_files_insert_file_user($f_profile, $uid, $oid = 0) {
  $account = user_load($uid);

  // Calculate the Expiration Date
  $expiration = ($f_profile->time_limit) ? strtotime('+' . $f_profile->time_limit . ' days') : 0;

  $f_profile->randomization = rand();

  // Generate a Key
  $file_key = ms_files_generate_file_key();

  $f_download = new stdClass();
  $f_download->pfid = $f_profile->pfid;
  $f_download->fid = $f_profile->fid;
  $f_download->uid = $uid;
  $f_download->oid = $oid;
  $f_download->file_key = $file_key;
  $f_download->downloads = 0;
  $f_download->addresses = array();
  $f_download->download_limit = $f_profile->download_limit;
  $f_download->address_limit = $f_profile->address_limit;
  $f_download->granted = REQUEST_TIME;
  $f_download->expiration = $expiration;
  $f_download->status = 1;

  drupal_write_record('ms_files_downloads', $f_download);

  module_invoke_all('ms_files_purchase', $account, $f_download, $f_profile);

  return $f_download;
}

/**
 * Load a File Download Plan from the database
 */
function ms_files_load_file_plan($pfid) {
  $pfid = (int) $pfid;
  $result = db_query("SELECT * FROM {ms_files_profiles} WHERE pfid = :pfid", array(':pfid' => $pfid));
  foreach ($result as $f_plan) {
    // Unserialize the data
    $f_plan->data = unserialize($f_plan->data);

    // Decode the emails
    $f_plan->purchase_mail_subject = htmlspecialchars_decode($f_plan->purchase_mail_subject);
    $f_plan->purchase_mail_body = htmlspecialchars_decode($f_plan->purchase_mail_body);
    $f_plan->expired_mail_subject = htmlspecialchars_decode($f_plan->expired_mail_subject);
    $f_plan->expired_mail_body = htmlspecialchars_decode($f_plan->expired_mail_body);

    return $f_plan;
  }
  return FALSE;
}

/**
 * Load a combined download profile and file by key
 */
function ms_files_load_file_by_key($key) {
  $result = db_query("SELECT * FROM {ms_files_downloads} WHERE file_key = :file_key", array(':file_key' => $key));
  foreach ($result as $download) {
    return ms_files_load_file_download_id($download->fuid);
  }
  return FALSE;
}

/**
 * Load a Download Profile
 */
function ms_files_load_file_download($pfid, $uid) {
  $result = db_query("SELECT * FROM {ms_files_downloads} WHERE pfid = :pfid AND uid = :uid", array(':pfid' => $pfid, ':uid' => $uid));
  foreach ($result as $download) {
    return ms_files_load_file_download_id($download->fuid);
  }
  return FALSE;
}

/**
 * Load a Download Profile
 */
function ms_files_load_file_download_id($fuid) {
  $result = db_query("SELECT * FROM {ms_files_downloads} WHERE fuid = :fuid", array(':fuid' => $fuid));
  foreach ($result as $download) {
    $download->addresses = unserialize($download->addresses);
    return $download;
  }
  return FALSE;
}

/**
 * Calculate the Expiration Date from the file ID
 */
function ms_files_get_expiration_date($pfid, $start = 0) {
  $f_plan = ms_files_load_file_plan($pfid);
  $date = 0;
  $now = ($start) ? $start : REQUEST_TIME;

  if ($f_plan->srt) {
    // Add time based on number of payments multiplied by period length and unit
    $regular_time = strtotime(ms_files_get_string_time($f_plan->p3, $f_plan->t3), 0);
    $date += $regular_time * $f_plan->srt;

    // Add Time for Trial Period 1
    if ($f_plan->t1) {
      $date += strtotime(ms_files_get_string_time($f_plan->p1, $f_plan->t1), 0);
    }

    // Add Time for Trial Period 2
    if ($f_plan->t2) {
      $date += strtotime(ms_files_get_string_time($f_plan->p2, $f_plan->t2), 0);
    }
    return $now + $date;
  }

  // If no expiration, return 0
  return 0;
}

/**
 * Generate the purchase button for a file
 */
function ms_files_get_purchase_button($pfid, $pname, $redirect = TRUE) {
  $f_plan = ms_files_load_file_plan($pfid);

  if ($f_plan->amount > 0) {
    $image_path = drupal_get_path('module', 'ms_files') . '/images/buynow.gif';
    if (variable_get('ms_files_custom_buynow', '')) {
      $image_path = variable_get('ms_files_custom_buynow', '');
    }
    global $base_url;
    return "<a href='"
        . url('file/purchase/' . $pfid, array('absolute' => TRUE, 'query' => ($redirect) ? drupal_get_destination() : NULL))
        . "' title='Purchase $pname'><img src='" . $base_url . '/' . $image_path
        . "' alt='Purchase $pname' /></a>";
  }
  else {
    // If it is free, just show a download link
    return l(t('Free Download'), 'file/purchase/'. $pfid,
      array('absolute' => TRUE, 'query' => ($redirect) ? drupal_get_destination() : NULL));
  }
}

/**
 * Generate the purchase button for a file
 *
 * TODO - Use this function for the ms_files_field and views display handlers
 */
function ms_files_get_purchase_button_new($pfid) {
  if ($f_plan = ms_files_load_file_plan($pfid)) {
    // Create a new product and add it to the order
    $product = ms_core_new_product(ms_files_translate_plan($f_plan, 'name'), 'ms_files', $f_plan->pfid, $f_plan->amount);

    // Store the custom data
    $product->data = $f_plan->data;
    $product->data['go_checkout'] = variable_get('ms_files_go_checkout', FALSE);

    return ms_core_get_add_to_cart_button($product, t('Purchase @pname',
      array('@pname' => ms_files_translate_plan($f_plan, 'name'))));
  }

  return t('Error building purchase button.');
}

/**
 * Get a string for a date
 */
function ms_files_get_string_time($p1, $t1) {
  switch ($t1) {
    case 'D':
      $unit = 'day';
      break;
    case 'W':
      $unit = 'week';
      break;
    case 'M':
      $unit = 'month';
      break;
    case 'Y':
      $unit = 'year';
      break;
    default:
      $unit = $t1;
      break;
  }
  if ($p1 > 1) {
    $unit .= 's';
  }
  return "+$p1 $unit";
}

function ms_files_update_status($f_download) {
  // Is the download limit reached?
  if (!empty($f_download->download_limit) && $f_download->downloads >= $f_download->download_limit) {
    ms_core_log_error('ms_files', '%user has been denied a file download by downloading it too many times.', array('%user' => $user_message), WATCHDOG_WARNING);
    ms_files_change_file_status($f_download->fuid, 2);
    return t('You have reached the download limit for this file.');
  }

  // Is the download expired?
  if ($f_download->expiration && REQUEST_TIME >= $f_download->expiration) {
    ms_core_log_error('ms_files', '%user has been denied an expired file download.', array('%user' => $user_message), WATCHDOG_WARNING);
    ms_files_change_file_status($f_download->fuid, 3);
    return t("This file download has expired.");
  }

  // Set the status to 1 if ok
  ms_files_change_file_status($f_download->fuid, 1);
}

/**
 * Validate whether the user should be able to download the file
 */
function ms_files_download_validate($f_download, $file, &$user, $ip) {
  // Figure out how many times this IP or user has tried to access a file
  $request_cache = cache_get('ms_file_' . $ip);
  $requests = ($request_cache) ? $request_cache->data + 1 : 1;

  // Use username for logged in users, IP for non-logged in users
  $user_message = ($user->uid) ? t('The user %user ', array('%user' => $user->name)) : t('The IP address %ip ', array('%ip' => $ip));

  // Don't let spammers win
  if ($requests > 30) {
    return t('You have attempted to download an incorrect file URL too many times.');
  }

  // Is the file valid?
  if (!$f_download || !$file) {
    cache_set('ms_file_' . $ip, $requests, 'cache', REQUEST_TIME + 86400);
    if ($requests == 30) {
      ms_core_log_error('ms_files', '%user has been temporarily banned from file downloads.', array('%user' => $user_message), WATCHDOG_WARNING);
    }
    return t("The URL is not a valid download link.");
  }

  // Are there too many IP addresses?
  if ($f_download->address_limit AND !in_array($ip, $f_download->addresses) AND count($f_download->addresses) >= $f_download->address_limit) {
    ms_core_log_error('ms_files', '%user has been denied a file download by downloading it from too many IP addresses.', array('%user' => $user_message), WATCHDOG_WARNING);
    return t('You have downloaded this file from too many different locations.');
  }

  // Is the download limit reached?
  if (!empty($f_download->download_limit) && $f_download->downloads >= $f_download->download_limit) {
    ms_core_log_error('ms_files', '%user has been denied a file download by downloading it too many times.', array('%user' => $user_message), WATCHDOG_WARNING);
    ms_files_change_file_status($f_download->fuid, 2);
    return t('You have reached the download limit for this file.');
  }

  // Is the download expired?
  if ($f_download->expiration && REQUEST_TIME >= $f_download->expiration) {
    ms_core_log_error('ms_files', '%user has been denied an expired file download.', array('%user' => $user_message), WATCHDOG_WARNING);
    ms_files_change_file_status($f_download->fuid, 3);
    return t("This file download has expired.");
  }

  // Set the status to 1 if ok
  ms_files_change_file_status($f_download->fuid, 1);

  // No Errors
  ms_core_log('ms_files', '%user has started download of the file %filename.',
    array('%user' => $user_message, '%filename' => basename($file->filename)), WATCHDOG_NOTICE);
}

/**
 * Transfer the file securely through Drupal
 */
function ms_files_download_transfer($f_download, $file, $ip, $make_log = TRUE) {
  // Set some variables
  $filename = $file->filename;
  $size = filesize($f_download->full_path);
  $fileinfo = pathinfo($f_download->full_path);
  $mimetype = file_get_mimetype($filename);

  // Work for IE filenames bug
  if (strstr($_SERVER['HTTP_USER_AGENT'], 'MSIE')) {
    $filename = preg_replace('/\./', '%2e', $filename, substr_count($filename, '.') - 1);
  }

  // Check for HTTP range
  if (isset($_SERVER['HTTP_RANGE'])) {
    list($size_unit, $range_orig) = explode('=', $_SERVER['HTTP_RANGE'], 2);

    if ($size_unit == 'bytes') {
      // Just grab the first range
      list($range, $extra_ranges) = explode(',', $range_orig, 2);
    }
    else {
      $range = '';
    }
  }
  else {
    $range = '';
  }

  if ($range) {
    // Set the correct download piece
    list($seek_start, $seek_end) = explode('-', $range, 2);
  }

  // Set the correct start and end, checking for invalid ranges
  $seek_end = intval((empty($seek_end)) ? ($size - 1) : min(abs(intval($seek_end)), ($size - 1)));
  $seek_start = intval((empty($seek_start) || $seek_end < abs(intval($seek_start))) ? 0 : max(abs(intval($seek_start)), 0));

  ob_end_clean();

  // Work for IE
  if ($seek_start > 0 || $seek_end < ($size - 1)) {
    drupal_add_http_header('Status', '206 Partial Content');
  }

  $headers = array(
    'Pragma' => 'public',
    'Cache-Control' => 'cache, must-revalidate',
    'Accept-Ranges' => 'bytes',
    'Content-Range' => 'bytes ' . $seek_start . '-' . $seek_end . '/' . $size,
    'Content-Type' => $mimetype,
    'Content-Disposition' => 'attachment; filename="' . $filename . '"',
    'Content-Length' => ($seek_end - $seek_start + 1),
    'Last-modified' => format_date(filemtime($f_download->full_path), 'long'),
    'ETag' => md5($f_download->full_path),
  );

  if ($make_log) {
    // Log the Download
    ms_files_log_download($f_download, $ip);
  }

  file_transfer($file->uri, $headers);
}

// Record the File Download
function ms_files_log_download($f_download, $ip_address) {
  // Add the address to the list
  $addresses = $f_download->addresses;
  if (!in_array($ip_address, $addresses)) { // Make sure it doesn't already exist
    $addresses[] = $ip_address;
  }
  $f_download->addresses = $addresses;

  // Increment the downloads counter
  $f_download->downloads++;

  // Generate a new Key
  if (variable_get('ms_files_generate_key', FALSE)) {
    $f_download->file_key = ms_files_generate_file_key();
  }

  drupal_write_record('ms_files_downloads', $f_download, 'fuid');
}

// Redirect the user
function ms_files_download_redirect($uid = NULL) {
  // Anonymous users don't get none
  if ($uid == 0) {
    drupal_access_denied();
  }
  // Redirect users back to their file page.
  else {
    drupal_goto('user/' . $uid . '/files');
  }
}

/**
 * Get the default ms files directory
 */
function ms_files_get_default_directory() {
  return variable_get('ms_files_default_directory', 'private://ms_files');
}

/**
 * Update the fid of all existing file_downloads
 */
function ms_files_update_file_downloads($pfid, $fid) {
  return db_update('ms_files_downloads')
    ->fields(array(
      'fid' => $fid,
    ))
    ->condition('pfid', $pfid)
    ->execute();
}

/**
 * Check if a user has a file download
 */
function ms_files_user_has_file($uid, $pfid) {
  $result = db_query("SELECT * FROM {ms_files_downloads} WHERE pfid = :pfid AND uid = :uid AND status = :status", array(':pfid' => $pfid, ':uid' => $uid, ':status' => 1));
  foreach ($result as $row) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Return a listing of File Download Plans
 */
function ms_files_get_files() {
  $result = db_query("SELECT pfid, name FROM {ms_files_profiles}");
  $files = array();
  foreach ($result as $f_plan) {
    $files[$f_plan->pfid] = ms_files_translate_plan($f_plan, 'name');
  }
  return $files;
}

// ======================================
// Administration Page:
// ======================================

/**
 * Admin Settings Form
 */
function ms_files_admin() {
  $form['ms_files_info'] = array(
    '#value' => '<p>Manage your Files in the ' . l('Files Manager', 'admin/structure/ms_files/list') . '</p>',
  );
  $form['main'] = array(
    '#type' => 'fieldset',
    '#title' => t('Main Settings'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['email'] = array(
    '#type' => 'fieldset',
    '#title' => t('Email Settings'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['advanced'] = array(
    '#type' => 'fieldset',
    '#title' => t('Advanced Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['main']['ms_files_generate_key'] = array(
    '#type' => 'checkbox',
    '#title' => t('Generate New Download Link Each Time?'),
    '#default_value' => variable_get('ms_files_generate_key', FALSE),
    '#description' => t('If this option is selected, the link to download a file will be changed each time the file is downloaded. This adds more security so that users cannot post a static link to a file on your site for anyone to download.'),
    '#required' => FALSE,
  );
  $form['main']['ms_files_refund_remove'] = array(
    '#type' => 'checkbox',
    '#title' => t('Remove File Download for Refunds?'),
    '#default_value' => variable_get('ms_files_refund_remove', TRUE),
    '#description' => t('Check this to have file downloads removed if that purchase is refunded or payment is reversed.'),
    '#required' => FALSE,
  );
  $form['main']['ms_files_go_checkout'] = array(
    '#type' => 'checkbox',
    '#title' => t('Go Straight to Checkout?'),
    '#default_value' => variable_get('ms_files_go_checkout', FALSE),
    '#description' => t('Check this to have the user go straight to the checkout page once they add the file to their cart.'),
    '#required' => FALSE,
  );
  $form['main']['ms_files_allowed_extensions'] = array(
    '#type' => 'textfield',
    '#title' => t('Allowed Extensions'),
    '#description' => t("Enter a list of allowed extensions separated by spaces"),
    '#required' => TRUE,
    '#default_value' => variable_get('ms_files_allowed_extensions', 'jpg jpeg gif png txt doc xls pdf ppt pps odt ods odp zip'),
  );
  $form['advanced']['ms_files_custom_buynow'] = array(
    '#type' => 'textfield',
    '#title' => t('Custom Buy Now Image'),
    '#description' => t("Optional - Set a Custom Buy Now Image. Use absolute path. Ex: http://www.yoursite.com/path/to/buynow.png"),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_files_custom_buynow', ""),
  );
  $form['advanced']['ms_files_search_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Existing Files Search Path'),
    '#description' => t("Optional - Set a base directory to use for adding Existing Files to File Download Plans.
      If this is not set, the default drupal files folder (%path) will be used. Be careful not to put a directory with too many files in it, or the script could run out of memory (don't put the base '/' directory, for example).", array('%path' => 'public:/')),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_files_search_path', ""),
  );
  $form['email']['ms_files_send_html'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use HTML in Emails?'),
    '#default_value' => variable_get('ms_files_send_html', FALSE),
    '#description' => t('Whether or not your emails use HTML.'),
    '#required' => FALSE,
  );
  $form['email']['ms_files_admin_purchase_mail_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('New file Admin Email Subject'),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_files_admin_purchase_mail_subject', t("File Purchased by [user:name]!")),
  );
  $form['email']['ms_files_admin_purchase_mail_body'] = array(
    '#type' => 'textarea',
    '#title' => t('New file Admin Email Body'),
    '#description' => t("The email that is sent to the admin when a user purchases a file. Leave blank to not send an email."),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_files_admin_purchase_mail_body', t("A file has been purchased!
    User: [user:name]
    Name: [ms_core_order:customerName]
    File: [ms_file_download:fileTitle]
    Amount: [ms_core_payment:paymentAmount]
    Date: [current-date:short]
    ")),
  );
  $form['email']['ms_files_admin_purchase_mail_token_help'] = array(
    '#title' => t('Replacement patterns'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['email']['ms_files_admin_purchase_mail_token_help']['tokens'] = array(
    '#theme' => 'token_tree',
    '#token_types' => array('ms_file_download', 'ms_file_profile', 'ms_core_order', 'ms_core_payment', 'user'),
  );


  $form['email']['ms_files_admin_expired_mail_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('File Expired Admin Email Subject'),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_files_admin_expired_mail_subject', t("File Download Expired: [user:name]!")),
  );
  $form['email']['ms_files_admin_expired_mail_body'] = array(
    '#type' => 'textarea',
    '#title' => t('File Expired Admin Email Body'),
    '#description' => t("The email that is sent to the admin when a file download expires. Leave blank to not send an email."),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_files_admin_expired_mail_body', t("A File Download has Expired.
    User: [user:name]
    Name: [ms_core_order:customerName]
    File: [ms_file_download:fileTitle]
    Date: [current-date:short]
    ")),
  );
  $form['email']['ms_files_admin_expired_mail_token_help'] = array(
    '#title' => t('Replacement patterns'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['email']['ms_files_admin_expired_mail_token_help']['tokens'] = array(
    '#theme' => 'token_tree',
    '#token_types' => array('ms_file_download', 'ms_file_profile', 'ms_core_order', 'ms_core_payment', 'user'),
  );

  return system_settings_form($form);
}

// ======================================
// Pages:
// ======================================

/**
 * Show the user's downloads in the User Account page
 */
function ms_files_user_downloads($account) {
  $build = array();

  drupal_set_title(t('File downloads'));
  // Create a header and the pager it belongs to.
  $headers = array(
    array('data' => t('Purchased'), 'field' => 'u.granted', 'sort' => 'asc'),
    array('data' => t('File')),
    array('data' => t('Description')),
    array('data' => t('Downloads'), 'field' => 'u.downloads'),
    array('data' => t('Addresses')),
  );

  $query = db_select('ms_files_downloads', 'u');
  $query->leftjoin('file_managed', 'f', 'u.fid = f.fid');
  $query->fields('u', array('fuid', 'pfid', 'granted', 'downloads', 'addresses', 'file_key', 'download_limit', 'address_limit', 'expiration', 'status'));
  $query->fields('f', array('filename', 'fid'));
  $query->condition('u.uid', $account->uid, '=');

  $query = $query->extend('TableSort')->orderByHeader($headers);
  $query = $query->extend('PagerDefault')->limit(20);

  $result = $query->execute();

  $rows = array();
  foreach ($result as $row) {
    $f_download = ms_files_load_file_download_id($row->fuid);

    // Don't show files that are disabled
    if ($f_download->status == 0) {
      continue;
    }
    $row = count($rows);

    // Load the $f_plan for the file, and use the name for that
    if (!$f_plan = ms_files_load_file_plan($f_download->pfid)) {
      drupal_set_message(t('Error loading file download plan. This error has been logged.'), 'error');
      ms_core_log_error('ms_files', 'Error loading file download plan. File Download: !file',
        array('!file' => ms_core_print_r($f_download)));
      continue;
    }

    // Set the JS behavior when this link gets clicked.
    $onclick = array(
      'attributes' => array(
        'onclick' => 'ms_files_update_download(' . $row . ', ' . $f_download->downloads . ', ' . ((empty($f_download->download_limit)) ? -1 : $f_download->download_limit) . ');', 'id' => 'link-' . $row
      ),
    );

    // Generate the proper file download link
    if ($f_download->download_limit AND ($f_download->downloads >= $f_download->download_limit)) { // Download Limit Reached
      $file_link = ms_files_translate_plan($f_plan, 'name') . '(' . t('Download Limit Reached') . ')';
    }
    else {
      if ($f_download->expiration == FALSE) { // No Expiration
        $file_link = l(ms_files_translate_plan($f_plan, 'name'), 'file/download/' . $f_download->file_key, $onclick);
      }
      elseif (REQUEST_TIME > $f_download->expiration) { // Expired
        $file_link = ms_files_translate_plan($f_plan, 'name') . '(' . t('Expired') . ')';
      }
      else { // Good to go
        $file_link = l(ms_files_translate_plan($f_plan, 'name'), 'file/download/' . $f_download->file_key, $onclick) . ' (' . t('expires on @date', array('@date' => format_date($f_download->expiration, 'short'))) . ')';
      }
    }

    $rows[] = array(
      array('data' => format_date($f_download->granted, 'short'), 'class' => array('ms_files_date-row'), 'id' => 'date-' . $row),
      array('data' => $file_link, 'class' => array('ms_files_filename-row'), 'id' => 'filename-' . $row),
      array('data' => ms_files_translate_plan($f_plan, 'description'), 'class' => array('ms_files_description-row'), 'id' => 'description-' . $row),
      array('data' => $f_download->downloads . '/' . ($f_download->download_limit ? $f_download->download_limit : t('Unlimited')), 'class' => array('ms_files_download-row'), 'id' => 'download-' . $row),
      array('data' => count($f_download->addresses) . '/' . ($f_download->address_limit ? $f_download->address_limit : t('Unlimited')), 'class' => array('ms_files_addresses-row'), 'id' => 'addresses-' . $row),
    );
  }
  if (empty($rows)) {
    $rows[] = array(array('data' => t('No downloads found'), 'colspan' => 5));
  }

  $footer_notes = '<div class="form-item"><p class="description">' .
  t('Once your download is finished, you must refresh the page to download again. (Provided you have permission)') .
  '<br /><b>' . t('Do not use any download acceleration feature to download the file, or you may lock yourself out of the download.') . '</b>' .
  '</p></div>';

  $build['content'] = array(
      'ms_files_user_downloads_table' => array(
          '#markup' => theme('table', array('header' => $headers, 'rows' => $rows)),
      ),
      'ms_files_user_downloads_footer_notes' => array(
          '#markup' => $footer_notes,
      ),
  );

  // Add the pager
  $build['pager'] = array(
    '#theme' => 'pager',
    '#weight' => 5,
  );

  return $build;
}

/**
 * Handle File Downloading
 */
function ms_files_download($key) {
  global $user;
  $ip = ip_address();
  if ($f_download = ms_files_load_file_by_key($key)) {
    if ($file = file_load($f_download->fid)) {
      $f_download->full_path = drupal_realpath($file->uri);

      // Validate the download first
      $error = ms_files_download_validate($f_download, $file, $user, $ip);
    }
    else {
      drupal_set_message(t("The download file has been removed, please contact a site administrator."));
      drupal_goto('user/'. $user->uid .'/files');
    }
  }
  else {
    drupal_set_message(t("The download link has expired, please try again."));
    drupal_goto('user/'. $user->uid .'/files');
  }
  if ($error) { // Report the error
    drupal_set_message($error . t(' Please contact the site administrator if this message has been received in error.'), 'error');
    // Redirect
    ms_files_download_redirect($user->uid);
  }
  else { // No errors so start the download
    // Change the status if need be
    ms_files_update_status($f_download);

    ms_files_download_transfer($f_download, $file, $ip);
  }
}

/**
 * Test the File Download
 */
function ms_files_download_test($pfid) {
  $f_plan = ms_files_load_file_plan($pfid);
  $file = file_load($f_plan->fid);

  $f_download_test = (object) array_merge((array) $file, (array) $f_plan);
  $f_download_test->full_path = drupal_realpath($file->uri);

  ms_files_download_transfer($f_download_test, $file, 0, FALSE);

  // Redirect
  drupal_goto('admin/structure/ms_files');
}

/*
 * Used for Purchasing Files
 */
function ms_files_purchase_file($pfid) {
  // Ensure the File Exists
  if ($f_plan = ms_files_load_file_plan($pfid)) {
    $redirect = (isset($_GET['destination'])) ? $_GET['destination'] : 'ms/cart';

    // Check that the product is not free and/or the user is not logged in before adding it to the cart
    global $user;
    if ($f_plan->amount > 0 || !$user->uid) {
      // Create a new product and add it to the order
      $product = ms_core_new_product(ms_files_translate_plan($f_plan, 'name'), 'ms_files', $f_plan->pfid, $f_plan->amount);

      // Store the custom data
      $product->data = $f_plan->data;

      ms_core_add_cart_product($product, TRUE);

      // If option is set, go straight to checkout
      if (variable_get('ms_files_go_checkout', FALSE)) {
        $redirect = 'ms/checkout';
      }
    }
    else {
      $account = user_load($user->uid);
      // It is free, and the user is logged in. Let's just grant it and show a message
      // Add a new entry for this user to download the file
      $f_download = ms_files_insert_file_user($f_plan, $account->uid, 0);

      $payment_vars = array(
        'fuid' => $f_download->fuid,
      );

      //Add the role to the user if they don't already have it
      if ($f_plan->rid AND !isset($account->roles[$f_plan->rid])) {
        ms_files_add_role($account->uid, $f_plan->rid);
      }

      drupal_set_message(t("The file has been added to your account and can be downloaded from the My Files section of your account."));

      // Send Email to User
      drupal_mail('ms_files', 'purchase', $account->mail, user_preferred_language($account), $payment_vars);

      // Send Email to Admin
      if (variable_get('ms_files_admin_purchase_mail_body', '')) {
        drupal_mail('ms_files', 'admin_purchase', variable_get('site_mail', ''), language_default(), $payment_vars);
      }

      drupal_goto('user/' . $account->uid . '/files');
    }

    drupal_goto($redirect);
  }
  else {
    drupal_not_found();
  }
}

/**
 * Show a listing of all file downloads in the Admin area
 */
function ms_files_show_file_downloads() {
  global $user;
  $output = '<h3>' . t("All File Downloads are shown here") . ' | ' . l(t('Add File Download'), 'admin/structure/ms_files/downloads/add') . '</h3>';
  $headers = array(
    array('data' => t('Start Date'), 'field' => 'd.granted', 'sort' => 'desc'),
    array('data' => t('Expiration'), 'field' => 'd.expiration'),
    array('data' => t('User'), 'field' => 'u.name'),
    array('data' => t('File'), 'field' => 'p.name'),
    array('data' => t('Status'), 'field' => 'd.status'),
    array('data' => t('Downloads'), 'field' => 'd.downloads'),
    array('data' => t('Addresses'), 'field' => 'd.addresses'),
    t('Actions'),
  );

  $query = db_select('ms_files_downloads', 'd');
  $query->leftjoin('file_managed', 'f', 'd.fid = f.fid');
  $query->leftjoin('ms_files_profiles', 'p', 'd.pfid = p.pfid');
  $query->leftjoin('users', 'u', 'd.uid = u.uid');
  $query->fields('d', array('granted', 'downloads', 'addresses', 'file_key', 'download_limit', 'address_limit', 'expiration', 'status', 'fuid', 'pfid', 'fid', 'uid'));
  $query->addField('p', 'name', 'filename');
  $query->addField('u', 'name', 'username');

  $query = $query->extend('TableSort')->orderByHeader($headers);
  $query = $query->extend('PagerDefault')->limit(20);

  $result = $query->execute();

  $rows = array();
  $attr = array();
  foreach ($result as $row) {
    $f_download = ms_files_load_file_download_id($row->fuid);
    $actions = l('Edit', 'admin/structure/ms_files/downloads/edit/' . $f_download->fuid)
      . ' | ' . l('Delete', 'admin/structure/ms_files/downloads/delete/' . $f_download->fuid, array('attributes' => array('class' => array('txn_del'))));
    $rows[] = array(
      format_date($f_download->granted, 'short'),
      ($f_download->expiration ? format_date($f_download->expiration, 'short') : 'None'),
      l($row->username, 'user/' . $f_download->uid),
      $row->filename,
      ms_files_get_file_status_text($f_download->status),
      $f_download->downloads . '/' . ($f_download->download_limit ? $f_download->download_limit : 'Unlimited'),
      count($f_download->addresses) . '/' . ($f_download->address_limit ? $f_download->address_limit : 'Unlimited'),
      $actions
    );
  }

  $build['content'] = array(
      'ms_files_file_downloads_table' => array(
          '#markup' => theme('table', array('header' => $headers, 'rows' => $rows, 'attributes' => $attr)),
      ),
  );

  // Add the pager
  $build['pager'] = array(
    '#theme' => 'pager',
    '#weight' => 5,
  );

  return $build;
}

/**
 * List the files in the admin area
 */
function ms_files_list_files() {
  $build = array();
  $build['content'] = array(
      'ms_files_list_files_header' => array(
          '#markup' => t("These are the files"),
      ),
      'ms_files_list_files_form' => drupal_get_form('ms_files_list_files_form'),
  );

  return $build;
}

/**
 * Form to List the files
 */
function ms_files_list_files_form($form, &$form_state) {
  $result = db_query("SELECT * FROM {ms_files_profiles} ORDER BY weight ASC");

  foreach ($result as $f_plan) {
    $downloads = ($f_plan->download_limit) ? $f_plan->download_limit : 'Unlimited';
    $addresses = ($f_plan->time_limit) ? $f_plan->address_limit : 'Unlimited';
    $expiration = ($f_plan->time_limit) ? $f_plan->time_limit . ' days' : 'None';
    $file = file_load($f_plan->fid);
    $info = t('Filename: %filename<br />Downloads: %downloads<br />IPs: %ips<br />Expiration: %expiration',
      array('%filename' => $file->filename, '%downloads' => $downloads, '%ips' => $addresses, '%expiration' => $expiration));
    $download_link = l("Test", 'file/get/' . $f_plan->pfid, array('absolute' => TRUE));

    $actions = array(
      l(t('Edit'), 'admin/structure/ms_files/edit/' . $f_plan->pfid),
      l(t('Clone'), 'admin/structure/ms_files/clone/' . $f_plan->pfid),
      l(t('Delete'), 'admin/structure/ms_files/delete/' . $f_plan->pfid),
    );

    $row = array($f_plan->name,
      ms_core_format_money($f_plan->amount),
      $info,
      $download_link,
      implode('<br />', $actions),
      "<textarea rows='2' cols='15'>"
      . ms_files_get_purchase_button($f_plan->pfid, $f_plan->name, FALSE)
      . "</textarea>"
    );

    $form['rows'][$f_plan->pfid]['data'] = array(
                                 '#type' => 'value',
                                 '#value' => $row
                               );

    $form['rows'][$f_plan->pfid]['weight-' . $f_plan->pfid] = array(
      '#type' => 'textfield',
      '#size' => 5,
      '#default_value' => $f_plan->weight,
      '#attributes' => array('class' => array('weight')),
    );
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save changes'),
  );

  return $form;
}

//Save the Weight
function ms_files_list_files_form_submit($form, &$form_state) {
  foreach ($form_state['values'] as $key => $data) {
    if (substr($key, 0, 6) == 'weight') {
      $pfid = str_replace('weight-', '', $key);
      db_update('ms_files_profiles')
        ->fields(array(
              'weight' => $data,
            ))
        ->condition('pfid', $pfid)
        ->execute();
    }
  }
}

/**
 * Form to List the files
 */
function theme_ms_files_list_files_form($variables) {
  $output = '';
  $form = $variables['form'];
  $headers = array(t('File'), t('Price'), t('Info'), t('Download'), t('Actions'), t('Purchase Button'), t('Order'));
  $rows = array();
  $attr = array('id' => 'ms-files-table');

  if (isset($form['rows']) AND is_array($form['rows'])) {
    foreach ($form['rows'] as $pfid => $row) {
      if (intval($pfid)) {
        $this_row = array();
        $this_row = $row['data']['#value'];

        $this_row[] = drupal_render($form['rows'][$pfid]['weight-' . $pfid]);

        $rows[] = array('data' => $this_row, 'class' => array('draggable'));
      }
    }

    $output .= theme('table', array('header' => $headers, 'rows' => $rows, 'attributes' => $attr));
    $output .= drupal_render_children($form);
    drupal_add_tabledrag('ms-files-table', 'order', 'sibling', 'weight');
  }
  else {
    $output .= "No Files - Use the 'Add File' Link to Add Files";
  }

  return $output;
}

/**
 * Delete a File Download
 */
function ms_files_delete_file_download_confirm($form, &$form_state, $fuid) {
  $f_download = ms_files_load_file_download_id($fuid);
  if ($f_download->fuid) {
    $f_plan = ms_files_load_file_plan($f_download->pfid);
    $account = user_load($f_download->uid);
    $form['#fsd_fuid'] = $f_download->fuid;
    return confirm_form($form, t('Are you sure you want to delete this File Download: %fname for user: %user?', array('%fname' => ms_files_translate_plan($f_plan, 'name'), '%user' => $account->name)), 'admin/structure/ms_files/downloads', t('This action cannot be undone.'), t('Delete'));
  }
  else {
    drupal_not_found();
  }
}

/**
 * Delete a File Download
 */
function ms_files_delete_file_download_confirm_submit($form, &$form_state) {
  $f_download = ms_files_load_file_download_id($form['#fsd_fuid']);
  $f_plan = ms_files_load_file_plan($f_download->pfid);
  $account = user_load($f_download->uid);
  // Delete the download plan
  $result = db_delete('ms_files_downloads')
    ->condition('fuid', $f_download->fuid)
    ->execute();

  drupal_set_message(t('File Download %fname has been deleted for user %user', array('%fname' => ms_files_translate_plan($f_plan, 'name'), '%user' => $account->name)));
  $form_state['redirect'] = 'admin/structure/ms_files/downloads';
}

/**
 * Delete a File Profile
 */
function ms_files_delete_file_profile_confirm($form, &$form_state, $pfid) {
  $f_plan = ms_files_load_file_plan($pfid);
  if ($f_plan->pfid) {
    $form['#fsd_pfid'] = $f_plan->pfid;
    return confirm_form($form, t('Are you sure you want to delete this File Profile: %fname?', array('%fname' => $f_plan->name)), 'admin/structure/ms_files/list', t('This action cannot be undone.'), t('Delete'));
  }
  else {
    drupal_not_found();
  }
}

/**
 * Delete a File Profile
 */
function ms_files_delete_file_profile_confirm_submit($form, &$form_state) {
  $f_plan = ms_files_load_file_plan($form['#fsd_pfid']);

  // Delete the file profile
  $result = db_delete('ms_files_profiles')
    ->condition('pfid', $f_plan->pfid)
    ->execute();

  drupal_set_message(t('File Profile %fname has been deleted.', array('%fname' => $f_plan->name)));
  $form_state['redirect'] = 'admin/structure/ms_files/list';
}

/**
 * Autocomplete a User Name
 */
function ms_files_autocomplete_user($name = '') {
  $matches = array();
  if ($name) {
    $result = db_query("SELECT name FROM {users}");
    foreach ($result as $account) {
      $possible_values[] = $account->name;
    }
    foreach ($possible_values as $value) {
      if (preg_match("/$name/i", $value)) {
        $matches[$value] = $value;
      }
    }
  }
  drupal_json_output($matches);
}

// ======================================
// THEME
// ======================================
/**
 * Main Theme Function
 */
function ms_files_theme() {
  return array(
    'ms_files_list_files_form' => array(
      'render element' => 'form',
    ),
    'ms_files_download_link' => array(
      'variables' => array('link' => NULL),
    ),
    'ms_files_buynow_button' => array(
      'variables' => array('button' => NULL),
    ),
  );
}

/**
 * Theme function for theming download link.
 *
 * @param $link
 * The download link
 * @return
 * An HTML themed string.
 */
function theme_ms_files_download_link($variables) {
  $output = "<div class='ms-files-cck-block-download'>";
  $output .= t('Download: !link', array('!link' => $variables['link']));
  $output .= "</div>";
  return $output;
}

/**
 * Theme function for theming buy now button.
 *
 * @param $button
 * The button
 * @return
 * An HTML themed string.
 */
function theme_ms_files_buynow_button($variables) {
  $output = "<div class='ms-files-cck-block-buynow'>". $variables['button'] ."</div>";
  return $output;
}

// ======================================
// MAIL
// ======================================

/**
 * Handle Mail functions
 */
function ms_files_mail($key, &$message, $seed_vars) {
  $f_download = ms_files_load_file_download_id($seed_vars['fuid']);
  $f_plan = ms_files_load_file_plan($f_download->pfid);
  $file = file_load($f_plan->fid);

  $headers = array(
    'Content-Type' => 'text/plain; charset=UTF-8;',
    'From' => variable_get('site_name', '') . " <" . variable_get('site_mail', '') . ">",
    'Reply-To' => variable_get('site_mail', ''),
  );

  if (variable_get('ms_files_send_html', FALSE)) {
    $headers['Content-Type'] = 'text/html; charset=UTF-8;';
  }

  $order = ms_core_order_load($f_download->oid);

  // Add some variables for token replacement later
  $f_download->name = $f_plan->name;
  $f_download->filename = $file->filename;

  $vars = new stdClass();
  $vars->payment = ms_core_get_last_payment($order);
  $vars->order = $order;
  $vars->d_file = $f_download;
  $vars->account = user_load($f_download->uid);

  switch ($key) {
    case 'purchase':
      $subject = ms_files_translate_plan($f_plan, 'purchase_mail_subject');
      $body = ms_files_translate_plan($f_plan, 'purchase_mail_body');
      break;
    case 'expired':
      $subject = ms_files_translate_plan($f_plan, 'expired_mail_subject');
      $body = ms_files_translate_plan($f_plan, 'expired_mail_body');
      break;
    case 'admin_purchase':
      $subject = variable_get('ms_files_admin_purchase_mail_subject', t("File Purchased by [user:name]!"));
      $body = variable_get('ms_files_admin_purchase_mail_body', t("A file has been purchased!
User: [user:name]
Name: [ms_core_order:customerName]
File: [ms_file_download:fileTitle]
Amount: [ms_core_payment:paymentAmount]
Date: [current-date:short]"));
      break;
    case 'admin_expired':
      $subject = variable_get('ms_files_admin_expired_mail_subject', t("File Download Expired: [user:name]!"));
      $body = variable_get('ms_files_admin_expired_mail_body', t("A File Download has Expired.
User: [user:name]
Name: [ms_core_order:customerName]
File: [ms_file_download:fileTitle]
Date: [current-date:short]"));
      break;
  }

  // Replace the Tokens
  $message['subject'] = token_replace($subject, array(
    'ms_file_download' => $vars->d_file,
    'ms_core_order' => $vars->order,
    'ms_core_payment' => $vars->payment,
    'user' => $vars->account,
  ));
  $message['body'][] = token_replace($body, array(
    'ms_file_download' => $vars->d_file,
    'ms_core_order' => $vars->order,
    'ms_core_payment' => $vars->payment,
    'user' => $vars->account,
  ));
}

// ======================================
// TOKEN
// ======================================

/**
 * Implementation of hook_token_info()
 */
function ms_files_token_info() {
  $types = array(
    'ms_file_download' => array(
      'name' => t('MS File Download'),
      'description' => t('MS File Download Variables'),
      'needs-data' => 'ms_file_download',
    ),
  );

  $tokens = array(
    'ms_file_download' => array(
      'fileTitle' => array(
        'name' => t('File Title'),
        'description' => t("The title of the file."),
      ),
      'fileName' => array(
        'name' => t('Filename'),
        'description' => t("The filename of the file."),
      ),
      'downloadLink' => array(
        'name' => t('Download Link'),
        'description' => t("The download link for the file."),
      ),
      'downloadLimit' => array(
        'name' => t('Download Limit'),
        'description' => t("The number of times the file may be downloaded."),
      ),
      'addressLimit' => array(
        'name' => t('Address Limit'),
        'description' => t("The number of IP Addresses that may download the file."),
      ),
      'expirationDate' => array(
        'name' => t('Expiration Date'),
        'description' => t("When the file download expires."),
      ),
    ),
  );

  return array('types' => $types, 'tokens' => $tokens);
}

/**
 * Implementation of hook_tokens()
 */
function ms_files_tokens($type, $tokens, $data = array(), $options = array()) {
  $replacements = array();

  if ($type == 'ms_file_download' && !empty($data['ms_file_download'])) {
    $object = $data['ms_file_download'];
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'fileTitle':
          $replacements[$original] = ms_files_translate_plan($object, 'name');
          break;
        case 'fileName':
          $replacements[$original] = $object->filename;
          break;
        case 'downloadLink':
          $replacements[$original] = url('file/download/' . $object->file_key, array('absolute' => True));
          break;
        case 'downloadLimit':
          $replacements[$original] = ($object->download_limit) ? $object->download_limit : t('Unlimited');
          break;
        case 'addressLimit':
          $replacements[$original] = ($object->address_limit) ? $object->address_limit : t('Unlimited');
          break;
        case 'expirationDate':
          $replacements[$original] = ($object->expiration) ? format_date($object->expiration, 'short') : t('None');
          break;
      }
    }
  }

  return $replacements;
}

// ======================================
// HOOK_PROCESS_IPN
// ======================================

/**
 * Implementation of hook_ms_order_payment
 */
function ms_files_ms_order_payment($type, $product, $order, $payment) {
  switch ($product->module) {
    case 'ms_files':
      $account = user_load($order->uid);

      //Get Membership Plan
      $f_plan = ms_files_load_file_plan($product->id);

      //Get Roles
      $roles = user_roles(TRUE);

      // Handle Refunds
      if ($type == 'refund' OR $type == 'reversal') {
        ms_core_log('ms_files', 'Refund Notice received for MS File Downloads Suite');

        // Set the File Download to Inactive
        $f_download = ms_files_load_file_download($f_plan->pfid, $account->uid);
        ms_files_change_file_status($f_download->fuid);
        ms_core_log('ms_files', 'Deactivated a file download because of Refund or Reversed Payment');

        $payment_vars = array(
          'fuid' => $f_download->fuid,
        );

        // Send Email to User
        drupal_mail('ms_files', 'expired', $account->mail, user_preferred_language($account), $payment_vars);

        // Send Email to Admin
        if (variable_get('ms_files_admin_expired_mail_body', '')) {
          drupal_mail('ms_files', 'admin_expired', variable_get('site_mail', ''), language_default(), $payment_vars);
        }
      }
      else {
        switch ($type) {
          case "cart":
            // Add a new entry for this user to download the file
            $f_download = ms_files_insert_file_user($f_plan, $account->uid, $order->oid);

            $payment_vars = array(
              'fuid' => $f_download->fuid,
            );

            //Add the role to the user if they don't already have it
            if ($f_plan->rid AND !isset($account->roles[$f_plan->rid])) {
              ms_files_add_role($account->uid, $f_plan->rid);
            }

            // Send Email to User
            drupal_mail('ms_files', 'purchase', $account->mail, user_preferred_language($account), $payment_vars);

            // Send Email to Admin
            if (variable_get('ms_files_admin_purchase_mail_body', '')) {
              drupal_mail('ms_files', 'admin_purchase', variable_get('site_mail', ''), language_default(), $payment_vars);
            }
            break;
        }
      }
      break;
  }
}

/**
 * Implementation of hook_ms_products
 */
function ms_files_ms_products() {
  $products = array();
  $plans = ms_files_get_files();

  foreach ($plans as $pfid => $name) {
    $f_plan = ms_files_load_file_plan($pfid);

    // Create a new product and add it to the order
    $product = ms_core_new_product(ms_files_translate_plan($f_plan, 'name'), 'ms_files', $f_plan->pfid, $f_plan->amount);
    // Add the product variables
    $product->owner = $f_plan->uid;
    $product->module_title = t('File Downloads Suite');
    $product->data = $f_plan;
    $product->edit_path = 'admin/structure/ms_files/edit/' . $f_plan->pfid;
    $product->purchase_path = 'file/purchase/' . $f_plan->pfid;

    $products[] = $product;
  }

  return $products;
}

// ======================================
// File Profiles
// ======================================
function ms_files_add_file_profile_form($form, &$form_state) {
  $form['#attributes'] = array('enctype' => "multipart/form-data");
  global $user;
  $form['file'] = array(
    '#type' => 'fieldset',
    '#title' => t('File Settings'),
    '#weight' => -49,
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['payment'] = array(
    '#type' => 'fieldset',
    '#title' => t('Payment Settings'),
    '#weight' => -48,
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['email'] = array(
    '#type' => 'fieldset',
    '#title' => t('Email Settings'),
    '#weight' => -46,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['file']['name'] = array(
    '#type' => 'textfield',
    '#title' => t('File Name'),
    '#size' => 32,
    '#maxlength' => 64,
    '#description' => t("The Name of the File"),
    '#required' => TRUE,
  );
  $form['file']['description'] = array(
    '#type' => 'textarea',
    '#title' => t('Description'),
    '#description' => t("Enter a short (less than 512 characters) description of the File."),
    '#required' => FALSE,
    '#default_value' => "",
  );
  $form['file']['username'] = array(
    '#type' => 'textfield',
    '#title' => t('Plan Owner'),
    '#size' => 32,
    '#maxlength' => 64,
    '#description' => t("The owner of this plan. Used for tracking purposes."),
    '#autocomplete_path' => 'admin/structure/ms_core/autocomplete',
    '#required' => TRUE,
    '#default_value' => $user->name,
  );
  // TODO - Use managed_file instead http://api.drupal.org/api/drupal/developer--topics--forms_api_reference.html/7#managed_file
  $form['file']['upload_file'] = array(
    '#type' => 'file',
    '#title' => t('Upload the File here'),
    '#description' => t('The max upload filesize as set by your server is: ') . round(file_upload_max_size() / 1000000) . ' MB. '
    . t('See !link for more information on changing your upload limit.', array('!link' => l('http://drupal.org/node/109994', 'http://drupal.org/node/109994'))),
  );
  $use_path = 'private://';
  if (variable_get('ms_files_search_path', '')) {
    $use_path = variable_get('ms_files_search_path', '');
  }
  $raw_files = file_scan_directory($use_path, '/.*/');
  $file_list = array('0' => 'None');
  foreach ($raw_files as $file_item) {
    $file_list[$file_item->uri] = $file_item->filename;
  }
  $form['file']['existing_file'] = array(
    '#type' => 'select',
    '#title' => t('Select an Existing File'),
    '#description' => t("Alternatively, you may select an existing file. Showing files in %path", array('%path' => $use_path)),
    '#options' => $file_list,
    '#required' => FALSE,
  );
  $form['payment']['amount'] = array(
    '#type' => 'textfield',
    '#title' => t('Sell Price'),
    '#size' => 8,
    '#maxlength' => 10,
    '#description' => t("The Cost of the file. Ex: '15.99', '27.95' etc. Enter 0 for a free file download"),
    '#required' => TRUE,
  );
  $roles = (user_roles(TRUE));
  unset($roles[DRUPAL_AUTHENTICATED_RID]);
  $roles[0] = 'None';
  ksort($roles);
  $form['file']['rid'] = array(
    '#type' => 'select',
    '#title' => t('Role to Grant'),
    '#description' => t("Role to be assigned if user purchases this file"),
    '#options' => $roles,
    '#required' => FALSE,
  );
  $form['file']['download_limit'] = array(
    '#type' => 'textfield',
    '#title' => t('Download Limit'),
    '#size' => 8,
    '#maxlength' => 10,
    '#description' => t("How many times can this file be downloaded? Use 0 for Unlimited."),
    '#required' => FALSE,
  );
  $form['file']['address_limit'] = array(
    '#type' => 'textfield',
    '#title' => t('IP Addresses'),
    '#size' => 8,
    '#maxlength' => 10,
    '#description' => t("How many IP Addresses can download this file? Use 0 for Unlimited."),
    '#required' => FALSE,
  );
  $form['file']['time_limit'] = array(
    '#type' => 'textfield',
    '#title' => t('Expiration'),
    '#size' => 8,
    '#maxlength' => 10,
    '#description' => t("How many days before this file expires? Use 0 for no expiration."),
    '#required' => FALSE,
  );
  $form['email']['purchase_mail_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('File Purchase Email Subject'),
    '#required' => TRUE,
    '#default_value' => "Your File Download Link for [ms_file_download:fileTitle]",
  );
  $form['email']['purchase_mail_body'] = array(
    '#type' => 'textarea',
    '#title' => t('File Purchase Email Body'),
    '#description' => ("The email that is sent to the user when a file download has been purchased. Leave blank to not send an email."),
    '#required' => TRUE,
    '#default_value' => "Dear [ms_core_order:customerName],
You have purchased the [ms_file_download:fileTitle] file for [ms_core_payment:paymentAmount] on [current-date:short]. Below are your download instructions. Thank you!

File Name: [ms_file_download:fileName]
Download Link: [ms_file_download:downloadLink]
Max Downloads Allowed: [ms_file_download:downloadLimit]
Max IP Addresses Allowed: [ms_file_download:addressLimit]
Download Expiration: [ms_file_download:expirationDate]

To download the file in the future and view download statistics, please visit the 'Files' section of your account on [site:url]

Sincerely,
[site:name]",
  );
  $form['email']['purchase_mail_token_help'] = array(
    '#title' => t('Replacement patterns'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['email']['purchase_mail_token_help']['tokens'] = array(
    '#theme' => 'token_tree',
    '#token_types' => array('ms_file_download', 'ms_file_profile', 'ms_core_order', 'ms_core_payment', 'user'),
  );
  $form['email']['expired_mail_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('File Expired Email Subject'),
    '#required' => FALSE,
    '#default_value' => "[ms_file_download:fileTitle] file has Expired",
  );
  $form['email']['expired_mail_body'] = array(
    '#type' => 'textarea',
    '#title' => t('File Expired Email Body'),
    '#description' => ("The email that is sent to the user when a file download has expired. Leave blank to not send an email."),
    '#required' => FALSE,
    '#default_value' => "Dear [ms_core_order:customerName],
Your [ms_file_download:fileTitle] file has expired or been cancelled. To reorder, please visit [site:url].

Sincerely,
[site:name]",
  );
  $form['email']['expired_mail_token_help'] = array(
    '#title' => t('Replacement patterns'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['email']['expired_mail_token_help']['tokens'] = array(
    '#theme' => 'token_tree',
    '#token_types' => array('ms_file_download', 'ms_file_profile', 'ms_core_order', 'ms_core_payment', 'user'),
  );

  // Add the override settings
  ms_core_get_override_settings_form_elements($form);

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );

  return $form;
}

function ms_files_edit_file_profile_form($form, &$form_state, $action, $pfid) {
  $f_plan = ms_files_load_file_plan($pfid);
  $account = user_load($f_plan->uid);
  if (!$file = file_load($f_plan->fid)) {
    drupal_set_message(t('The file associated with this plan is missing.'), 'error');
  }
  $form['#attributes'] = array('enctype' => "multipart/form-data");
  $form['file'] = array(
    '#type' => 'fieldset',
    '#title' => t('File Settings'),
    '#weight' => -50,
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );

  if ($action == 'edit') {
    $form['file']['pfid'] = array(
      '#type' => 'value',
      '#value' => $f_plan->pfid,
    );
  }

  if ($action == 'clone') {
    // Unset some values
    $f_plan->name = '';
  }

  $form['upload'] = array(
    '#type' => 'fieldset',
    '#title' => t('Choose New File'),
    '#weight' => -49,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['payment'] = array(
    '#type' => 'fieldset',
    '#title' => t('Payment Settings'),
    '#weight' => -48,
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['email'] = array(
    '#type' => 'fieldset',
    '#title' => t('Email Settings'),
    '#weight' => -46,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['file']['oldFid'] = array(
    '#type' => 'value',
    '#value' => ($file) ? $file->fid : '',
  );

  $form['file']['name'] = array(
    '#type' => 'textfield',
    '#title' => t('File Name'),
    '#size' => 32,
    '#maxlength' => 64,
    '#description' => t("The Name of the File"),
    '#required' => TRUE,
    '#default_value' => $f_plan->name,
  );
  $form['file']['description'] = array(
    '#type' => 'textarea',
    '#title' => t('Description'),
    '#description' => t("Enter a short (less than 512 characters) description of the File."),
    '#required' => FALSE,
    '#default_value' => "",
    '#default_value' => $f_plan->description,
  );
  $form['file']['username'] = array(
    '#type' => 'textfield',
    '#title' => t('Plan Owner'),
    '#size' => 32,
    '#maxlength' => 64,
    '#description' => t("The owner of this plan. Used for tracking purposes."),
    '#autocomplete_path' => 'admin/structure/ms_core/autocomplete',
    '#required' => TRUE,
    '#default_value' => $account->name,
  );
  $form['file']['current_file'] = array(
    '#type' => 'item',
    '#title' => 'Current File',
    '#markup' => ($file) ? $file->filename : t('MISSING FILE'),
  );
  $form['upload']['upload_file'] = array(
    '#type' => 'file',
    '#title' => t('To change the file associated with this File, upload a new one below'),
    '#description' => t('The max upload filesize as set by your server is: ') . round(file_upload_max_size() / 1000000) . ' MB. '
    . t('See !link for more information on changing your upload limit.', array('!link' => l('http://drupal.org/node/109994', 'http://drupal.org/node/109994'))),
  );
  $use_path = 'private://';
  if (variable_get('ms_files_search_path', '')) {
    $use_path = variable_get('ms_files_search_path', '');
  }
  $raw_files = file_scan_directory($use_path, '/.*/');

  $file_list = array('0' => 'None');
  foreach ($raw_files as $file_item) {
    $file_list[$file_item->uri] = $file_item->filename;
  }
  $form['upload']['existing_file'] = array(
    '#type' => 'select',
    '#title' => t('Select an Existing File'),
    '#description' => t("Alternatively, you may select an existing file. Showing files in %path", array('%path' => $use_path)),
    '#options' => $file_list,
    '#required' => FALSE,
  );
  $form['upload']['update_existing'] = array(
    '#type' => 'checkbox',
    '#title' => t('Update Existing File Downloads?'),
    '#description' => t("Check this to have existing File Downloads be updated with the new file."),
    '#required' => FALSE,
  );
  $form['payment']['amount'] = array(
    '#type' => 'textfield',
    '#title' => t('Sell Price'),
    '#size' => 8,
    '#maxlength' => 10,
    '#description' => t("The Cost of the file. Ex: '15.99', '27.95' etc"),
    '#required' => TRUE,
    '#default_value' => $f_plan->amount,
  );
  $roles = (user_roles(TRUE));
  unset($roles[DRUPAL_AUTHENTICATED_RID]);
  $roles[0] = 'None';
  ksort($roles);
  $form['file']['rid'] = array(
    '#type' => 'select',
    '#title' => t('Role to Grant'),
    '#description' => t("Role to be assigned if user purchases this file"),
    '#default_value' => $f_plan->rid,
    '#options' => $roles,
    '#required' => FALSE,
  );
  $form['file']['download_limit'] = array(
    '#type' => 'textfield',
    '#title' => t('Download Limit'),
    '#size' => 8,
    '#maxlength' => 10,
    '#description' => t("How many times can this file be downloaded? Use 0 for Unlimited."),
    '#required' => FALSE,
    '#default_value' => $f_plan->download_limit,
  );
  $form['file']['address_limit'] = array(
    '#type' => 'textfield',
    '#title' => t('IP Addresses'),
    '#size' => 8,
    '#maxlength' => 10,
    '#description' => t("How many IP Addresses can download this file? Use 0 for Unlimited."),
    '#required' => FALSE,
    '#default_value' => $f_plan->address_limit,
  );
  $form['file']['time_limit'] = array(
    '#type' => 'textfield',
    '#title' => t('Expiration'),
    '#size' => 8,
    '#maxlength' => 10,
    '#description' => t("How many days before this file expires? Use 0 for no expiration."),
    '#required' => FALSE,
    '#default_value' => $f_plan->time_limit,
  );
  $form['email']['purchase_mail_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('File Purchase Email Subject'),
    '#required' => TRUE,
    '#default_value' => $f_plan->purchase_mail_subject,
  );
  $form['email']['purchase_mail_body'] = array(
    '#type' => 'textarea',
    '#title' => t('File Purchase Email Body'),
    '#description' => ("The email that is sent to the user when a file download has been purchased. Leave blank to not send an email."),
    '#required' => TRUE,
    '#default_value' => $f_plan->purchase_mail_body,
  );
  $form['email']['purchase_mail_token_help'] = array(
    '#title' => t('Replacement patterns'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['email']['purchase_mail_token_help']['tokens'] = array(
    '#theme' => 'token_tree',
    '#token_types' => array('ms_file_download', 'ms_file_profile', 'ms_core_order', 'ms_core_payment', 'user'),
  );

  $form['email']['expired_mail_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('File Expired Email Subject'),
    '#required' => FALSE,
    '#default_value' => $f_plan->expired_mail_subject,
  );
  $form['email']['expired_mail_body'] = array(
    '#type' => 'textarea',
    '#title' => t('File Expired Email Body'),
    '#description' => ("The email that is sent to the user when a file download has expired. Leave blank to not send an email."),
    '#required' => FALSE,
    '#default_value' => $f_plan->expired_mail_body,
  );
  $form['email']['expired_mail_token_help'] = array(
    '#title' => t('Replacement patterns'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['email']['expired_mail_token_help']['tokens'] = array(
    '#theme' => 'token_tree',
    '#token_types' => array('ms_file_download', 'ms_file_profile', 'ms_core_order', 'ms_core_payment', 'user'),
  );

  // Add the override settings
  ms_core_get_override_settings_form_elements($form, $f_plan);

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );

  return $form;
}

/**
 * Validate Function for the Add File Form
 */
function ms_files_add_file_profile_form_validate($form, &$form_state) {
  $v = $form_state['values'];
  // Validate Sell Price
  if (!is_numeric($v['amount'])) {
    form_set_error('amount', t('You must enter a number for the Sell Price.'));
  }
  elseif ($v['amount'] < 0) {
    form_set_error('amount', t('Sell Price must be positive.'));
  }
}

/**
 * Validate Function for the Edit File Form
 */
function ms_files_edit_file_profile_form_validate($form, &$form_state) {
  $v = $form_state['values'];
  // Validate Sell Price
  if (!is_numeric($v['amount'])) {
    form_set_error('amount', t('You must enter a number for the Sell Price.'));
  }
  elseif ($v['amount'] < 0) {
    form_set_error('amount', t('Sell Price must be positive.'));
  }
}

/**
 * Submit Function for the Add File Form
 */
function ms_files_add_file_profile_form_submit($form, &$form_state) {
  $form_values = (object) $form_state['values'];
  $f_plan = (object) $form_state['values'];
  global $user;
  $default_dir = ms_files_get_default_directory();

  if ($f_plan->existing_file) { // Copy an existing file and use it
    $uri = $f_plan->existing_file;
    if ($filepath = file_unmanaged_copy($uri, $default_dir)) {
      $save_file = (object) array();
      $save_file->filename = basename($filepath);
      $save_file->uri = $filepath;
      $save_file->status = 1;
      $save_file->uid = $user->uid;

      $file = file_save($save_file);

      drupal_set_message(t('The file %file was successfully copied to %dir', array('%file' => $file->filename, '%dir' => ms_files_get_default_directory())));
    }
    else {
      drupal_set_message(t('Error copying the file'), 'error');
    }
  }
  // Deal with the File that was uploaded
  elseif (file_prepare_directory($default_dir)) {
    $validators = array(
      'file_validate_extensions' => array(
        0 => variable_get('ms_files_allowed_extensions', 'jpg jpeg gif png txt doc xls pdf ppt pps odt ods odp zip'),
      )
    );
    $file = file_save_upload('upload_file', $validators, $default_dir);
    if (!$file) {
      drupal_set_message(t('Error uploading file to %dir', array('%dir' => $default_dir)), 'error');

      // Exit here to rebuild the form
      $form['rebuild'] = TRUE;
      return;
    }
    else {
      drupal_set_message(t('The file %file was successfully uploaded to %dir', array('%file' => $file->filename, '%dir' => $default_dir)));
      $file->status = 1;
      $file = file_save($file); // Mark the file as permanent
    }
  }
  else {
    drupal_set_message(t('The directory %dir is not accessible', array('%dir' => $default_dir)), 'error');
    // Exit here to rebuild the form
    $form['rebuild'] = TRUE;
    return;
  }

  $account = user_load_by_name($form_values->username);

  unset($f_plan->existing_file);
  $f_plan->fid = $file->fid;
  $f_plan->uid = ($account) ? $account->uid : 0;
  $f_plan->purchase_mail_subject = htmlspecialchars($f_plan->purchase_mail_subject);
  $f_plan->purchase_mail_body = htmlspecialchars($f_plan->purchase_mail_body);
  $f_plan->expired_mail_subject = htmlspecialchars($f_plan->expired_mail_subject);
  $f_plan->expired_mail_body = htmlspecialchars($f_plan->expired_mail_body);
  $f_plan->data['override_settings'] = ms_core_get_overridden_settings($form_values->override_settings);

  drupal_write_record('ms_files_profiles', $f_plan);

  drupal_set_message(t('File Profile Saved: %name.', array('%name' => $f_plan->name)));

  $form_state['redirect'] = 'admin/structure/ms_files';
}

/**
 * Submit Function for the Edit File Form
 */
function ms_files_edit_file_profile_form_submit($form, &$form_state) {
  $form_values = (object) $form_state['values'];
  $default_dir = ms_files_get_default_directory();
  $f_plan = (object) $form_state['values'];
  global $user;

  if ($f_plan->existing_file) { // Copy an existing file and use it
    $uri = $f_plan->existing_file;
    if ($filepath = file_unmanaged_copy($uri, $default_dir)) {
      $save_file = (object) array();
      $save_file->filename = basename($filepath);
      $save_file->uri = $filepath;
      $save_file->status = 1;
      $save_file->uid = $user->uid;

      $file = file_save($save_file);
      $f_plan->fid = $file->fid;

      drupal_set_message(t('The file %file was successfully copied to %dir', array('%file' => $file->filename, '%dir' => ms_files_get_default_directory())));
    }
    else {
      drupal_set_message(t('Error copying the file'), 'error');
    }
  }
  // Deal with the File that was uploaded
  elseif (!empty($f_plan->upload_file)) {
    if (file_prepare_directory(ms_files_get_default_directory())) {
      $validators = array(
        'file_validate_extensions' => array(
          0 => variable_get('ms_files_allowed_extensions', 'jpg jpeg gif png txt doc xls pdf ppt pps odt ods odp zip'),
        )
      );
      $file = file_save_upload('upload_file', $validators, $default_dir);
      if (!$file) {
        drupal_set_message(t('Error uploading file to %dir', array('%dir' => $default_dir)), 'error');

        // Exit here to rebuild the form
        $form['rebuild'] = TRUE;
        return;
      }
      else {
        drupal_set_message(t('The new file %file was successfully uploaded to %dir', array('%file' => $file->filename, '%dir' => $default_dir)));
        $file->status = 1;
        $file = file_save($file); // Mark the file as permanent
        $f_plan->fid = $file->fid;
      }
    }
    else {
      drupal_set_message(t('The directory %dir is not accessible', array('%file' => $file->filename, '%dir' => $default_dir)));

      // Exit here to rebuild the form
      $form['rebuild'] = TRUE;
      return;
    }
  }

  // Update the fid of all existing file downloads?
  if ($form_values->update_existing) {
    ms_files_update_file_downloads($f_plan->pfid, $file->fid);
    drupal_set_message(t('Updated Existing File Downloads to use the new file.'));
  }

  $account = user_load_by_name($form_values->username);
  unset($f_plan->existing_file);
  unset($f_plan->oldFid);
  $f_plan->uid = ($account) ? $account->uid : 0;
  $f_plan->purchase_mail_subject = htmlspecialchars($f_plan->purchase_mail_subject);
  $f_plan->purchase_mail_body = htmlspecialchars($f_plan->purchase_mail_body);
  $f_plan->expired_mail_subject = htmlspecialchars($f_plan->expired_mail_subject);
  $f_plan->expired_mail_body = htmlspecialchars($f_plan->expired_mail_body);
  $f_plan->data['override_settings'] = ms_core_get_overridden_settings($form_values->override_settings);

  if (isset($f_plan->pfid)) {
    if (drupal_write_record('ms_files_profiles', $f_plan, 'pfid')) {
      drupal_set_message(t('File Profile Saved: %name.', array('%name' => $f_plan->name)));
    }
    else {
      drupal_set_message(t('Failed'));
    }
  }
  else {
    if (drupal_write_record('ms_files_profiles', $f_plan)) {
      drupal_set_message(t('File Profile Saved: %name.', array('%name' => $f_plan->name)));
    }
    else {
      drupal_set_message(t('Failed'));
    }
  }

  $form_state['redirect'] = 'admin/structure/ms_files';
}

// ======================================
// File Downloads
// ======================================

function ms_files_download_add_form($form, &$form_state) {
  $form['file'] = array(
    '#type' => 'fieldset',
    '#title' => t('New File Download'),
    '#weight' => -49,
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['file']['username'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#size' => 32,
    '#maxlength' => 64,
    '#description' => t("The Name of the User for this File Download"),
    '#autocomplete_path' => 'admin/structure/ms_files/autocomplete',
    '#required' => TRUE,
  );
  $file_plans = ms_files_get_files();
  $form['file']['pfid'] = array(
    '#type' => 'select',
    '#title' => 'File Download Plan',
    '#options' => $file_plans,
    '#description' => t("The File Download Plan"),
    '#required' => TRUE,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  $form_state['redirect'] = 'admin/structure/ms_files/downloads';
  return $form;
}

/**
 * Validate Function for the Add File Download Form
 */
function ms_files_download_add_form_validate($form, &$form_state) {
  $v = $form_state['values'];
  $account = user_load_by_name($v['username']);
  if (!$account->uid) {
    form_set_error('username', t('You must enter a valid user'));
  }
}

/**
 * Submit Function for the Add File Download Form
 */
function ms_files_download_add_form_submit($form, &$form_state) {
  $v = $form_state['values'];
  $account = user_load_by_name($v['username']);
  $f_plan = ms_files_load_file_plan($v['pfid']);

  // Add a new entry for this user to download the file
  $f_download = ms_files_insert_file_user($f_plan, $account->uid);

  $payment_vars = array(
    'fuid' => $f_download->fuid,
  );

  //Add the role to the user if they don't already have it
  if ($f_plan->rid AND !isset($account->roles[$f_plan->rid])) {
    ms_files_add_role($account->uid, $f_plan->rid);
  }

  // Send Email to User
  drupal_mail('ms_files', 'purchase', $account->mail, $language, $payment_vars, '', TRUE);

  drupal_set_message(t('File Download Added for user: %name.', array('%name' => $account->name)));
}

function ms_files_download_edit_form($form, &$form_state, $fuid) {
  $f_download = ms_files_load_file_download_id($fuid);
  $form['file'] = array(
    '#type' => 'fieldset',
    '#title' => t('File Download Settings'),
    '#weight' => -50,
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['file']['fuid'] = array(
    '#type' => 'value',
    '#value' => $f_download->fuid,
  );
  $form['file']['downloads'] = array(
    '#type' => 'textfield',
    '#title' => t('Downloads'),
    '#size' => 8,
    '#maxlength' => 10,
    '#description' => t("How many times has this file been downloaded?"),
    '#required' => FALSE,
    '#default_value' => $f_download->downloads,
  );
  $form['file']['download_limit'] = array(
    '#type' => 'textfield',
    '#title' => t('Download Limit'),
    '#size' => 8,
    '#maxlength' => 10,
    '#description' => t("How many times can this file be downloaded? Use 0 for Unlimited."),
    '#required' => FALSE,
    '#default_value' => $f_download->download_limit,
  );
  $form['file']['addresses'] = array(
    '#type' => 'textarea',
    '#title' => t('Addresses'),
    '#size' => 8,
    '#description' => t("What IP Addresses have downloaded this file?"),
    '#required' => FALSE,
    '#default_value' => implode(",", $f_download->addresses),
  );
  $form['file']['address_limit'] = array(
    '#type' => 'textfield',
    '#title' => t('IP Addresses'),
    '#size' => 8,
    '#maxlength' => 10,
    '#description' => t("How many IP Addresses can download this file? Use 0 for Unlimited."),
    '#required' => FALSE,
    '#default_value' => $f_download->address_limit,
  );
  $form['file']['granted'] = array(
    '#type' => 'date',
    '#title' => t('Start Date'),
    '#description' => t("When was this file download created?"),
    '#required' => TRUE,
    '#default_value' => array(
      'year' => date('Y', $f_download->granted),
      'month' => date('m', $f_download->granted),
      'day' => date('j', $f_download->granted),
      ),
  );
  $form['file']['expiration'] = array(
    '#type' => 'date',
    '#title' => t('Expiration Date'),
    '#description' => t("When does this file download expire?"),
    '#default_value' => array(
      'year' => date('Y', $f_download->expiration),
      'month' => date('m', $f_download->expiration),
      'day' => date('j', $f_download->expiration),
      ),
  );
  $form['file']['expiration_none'] = array(
    '#type' => 'checkbox',
    '#title' => t('No Expiration?'),
    '#description' => t("Check this to have no expiration"),
    '#required' => FALSE,
    '#default_value' => ($f_download->expiration ? FALSE : TRUE),
  );
  $form['file']['address_limit'] = array(
    '#type' => 'textfield',
    '#title' => t('IP Address Limit'),
    '#size' => 8,
    '#maxlength' => 10,
    '#description' => t("How many IP Addresses can download this file? Use 0 for Unlimited."),
    '#required' => FALSE,
    '#default_value' => $f_download->address_limit,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );

  return $form;
}

/**
 * Validate Function for the Edit File Form
 */
function ms_files_download_edit_form_validate($form, &$form_state) {
  $v = $form_state['values'];
  if (!is_numeric($v['downloads'])) {
    form_set_error('downloads', t('You must enter a number for the Downloads.'));
  }
  elseif ($v['downloads'] < 0) {
    form_set_error('downloads', t('Downloads must be positive.'));
  }
}

/**
 * Submit Function for the Edit File Form
 */
function ms_files_download_edit_form_submit($form, &$form_state) {
  $v = $form_state['values'];
  $f_download = ms_files_load_file_download_id($v['fuid']);
  $f_download->downloads = $v['downloads'];
  $f_download->download_limit = $v['download_limit'];
  $f_download->addresses = explode(',', $v['addresses']);
  $f_download->address_limit = $v['address_limit'];
  $f_download->granted = strtotime($v['granted']['year'] . '-' . $v['granted']['month'] . '-' . $v['granted']['day']);
  if ($v['expiration_none']) {
    $f_download->expiration = 0;
  }
  else {
    $f_download->expiration = strtotime($v['expiration']['year'] . '-' . $v['expiration']['month'] . '-' . $v['expiration']['day']);
  }
  drupal_write_record('ms_files_downloads', $f_download, 'fuid');
  drupal_set_message(t('File Download Saved.'));
  // Change the status if need be
  ms_files_update_status($f_download);

  $form_state['redirect'] = 'admin/structure/ms_files/downloads';
}

/**
 * Implementation of hook_ms_product_load
 */
function ms_files_ms_product_load($module, $id) {
  if ($module == 'ms_files') {
    $plan = ms_files_load_file_plan($id);

    if ($plan->pfid) {
      $product = ms_core_new_product(ms_files_translate_plan($plan, 'name'), 'ms_files', $plan->pfid, 'cart');

      // Store the Data Overrides
      $product->data = $plan->data;

      // Add the product variables
      $product->amount = $plan->amount;

      return $product;
    }
  }
}

// ======================================
// VIEWS
// ======================================

/**
 * Implementation of hook_views_api().
 */
function ms_files_views_api() {
  return array(
    'api' => '2.0',
    'path' => drupal_get_path('module', 'ms_files') . '/views',
  );
}

/**
 * Implementation of hook_views_handlers().
 */
function ms_files_views_handlers() {
  return array(
    'info' => array(
      'path' => drupal_get_path('module', 'ms_files') . '/views',
    ),
    'handlers' => array(
      'ms_files_username_handler' => array(
        'parent' => 'views_handler_field',
        ),
      'ms_files_buynow_handler' => array(
        'parent' => 'views_handler_field',
        ),
      'ms_files_price_handler' => array(
        'parent' => 'views_handler_field',
        ),
      'ms_files_filesize_handler' => array(
        'parent' => 'views_handler_field',
        ),
      'ms_files_filename_handler' => array(
        'parent' => 'views_handler_field',
        ),
    ),
  );
}

/**
 * Implementation of hook_date_api_fields().
 */
function ms_files_date_api_fields($field) {
  $values = array(
    // The type of date: DATE_UNIX, DATE_ISO, DATE_DATETIME.
    'sql_type' => DATE_UNIX,
    // Timezone handling options: 'none', 'site', 'date', 'utc'.
    'tz_handling' => 'site',
    // Needed only for dates that use 'date' tz_handling.
    'timezone_field' => '',
    // Needed only for dates that use 'date' tz_handling.
    'offset_field' => '',
    // Array of "table.field" values for related fields that should be
    // loaded automatically in the Views SQL.
    'related_fields' => array(),
    // Granularity of this date field's db data.
    'granularity' => array('year', 'month', 'day', 'hour', 'minute', 'second'),
  );
  return $values;
}

// ======================================
// RULES
// ======================================

/**
 * Implementation of hook_ms_files_purchase().
 */
function ms_files_ms_files_purchase($account, $f_download, $f_plan) {
  if (module_exists('rules')) {
    rules_invoke_event('ms_files_event_file_purchased', $account, $f_download, $f_plan);
  }
}

// ======================================
// i18n Integration
// ======================================

/**
 * Implements hook_i18n_string_info()
 */
function ms_files_i18n_string_info() {
  $groups['ms_files_profile'] = array(
    'title' => t('File Download Plans'),
    'description' => t('File Download Plans'),
    'format' => FALSE,
    'list' => TRUE,
  );
  return $groups;
}

/**
 * Implements hook_i18n_string_list()
 */
function ms_files_i18n_string_list($group) {
  if ($group == 'ms_files_profile') {
    foreach (ms_files_get_files() as $id => $name) {
      $plan = ms_files_load_file_plan($id);
      $strings['ms_files_profile']['file_profile'][$plan->pfid]['name'] = $plan->name;
      $strings['ms_files_profile']['file_profile'][$plan->pfid]['description'] = $plan->description;
      $strings['ms_files_profile']['file_profile'][$plan->pfid]['purchase_mail_subject'] = $plan->purchase_mail_subject;
      $strings['ms_files_profile']['file_profile'][$plan->pfid]['purchase_mail_body'] = $plan->purchase_mail_body;
      $strings['ms_files_profile']['file_profile'][$plan->pfid]['expired_mail_subject'] = $plan->expired_mail_subject;
      $strings['ms_files_profile']['file_profile'][$plan->pfid]['expired_mail_body'] = $plan->expired_mail_body;
    }
    return $strings;
  }
}

/**
 * Helper function for translating plan variables
 *
 * @param $plan
 *   The $plan object
 * @param $name
 *   The name of the plan member
 * @return
 *   The translated string
 */
function ms_files_translate_plan($plan, $name) {
  return ms_core_translate('file_profile:' . $plan->pfid . ':' . $name, $plan->$name, 'ms_files_profile');
}
