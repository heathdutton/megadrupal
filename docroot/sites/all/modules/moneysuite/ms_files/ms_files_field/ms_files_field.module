<?php

/**
 * @file
 * Adds a new File Plan field, which can be used with Entities (nodes, users, etc)
 */

/***************************************************************
 * Field Type API hooks
 ***************************************************************/

/**
 * Implements hook_field_info().
 *
 * Provides the description of the field.
 */
function ms_files_field_field_info() {
  return array(
    'ms_files_field_file_plan' => array(
      'label' => t('MoneySuite File'),
      'description' => t('Associate a MoneySuite File with this Node'),
      'default_widget' => 'ms_files_field_file_plan_widget',
      'default_formatter' => 'ms_files_field_file_plan_button',
    ),
  );
}

/**
 * Implements hook_field_is_empty().
 */
function ms_files_field_field_is_empty($item, $field) {
  return empty($item['pfid']);
}

/***********************************************************************
 *  Field Type API: Formatter
 *
 *  These are the api hooks that present formatted (themed) output to the
 *  user.
 **********************************************************************/

/**
 * Implements hook_field_formatter_info().
 */
function ms_files_field_field_formatter_info() {
  return array(
    'ms_files_field_file_plan_button' => array(
      'label' => t('Show a purchase or download button for the file'),
      'field types' => array('ms_files_field_file_plan'),
    ),
    'ms_files_field_file_plan_info' => array(
      'label' => t('Show the file details'),
      'field types' => array('ms_files_field_file_plan'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function ms_files_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'ms_files_field_file_plan_button':
      foreach ($items as $delta => $item) {
        $element[$delta]['#markup'] = theme('ms_files_field_file_plan_button', array('item' => $item));
      }
      break;

    case 'ms_files_field_file_plan_info':
      foreach ($items as $delta => $item) {
        $element[$delta]['#markup'] = theme('ms_files_field_file_plan_info', array('item' => $item));
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_theme().
 */
function ms_files_field_theme() {
  return array(
    // Themes for the formatters.
    'ms_files_field_file_plan_button' => array(
      'render element' => 'item',
    ),
    'ms_files_field_file_plan_info' => array(
      'render element' => 'item',
    ),
  );
}

/**
 * Theme function for 'button' ms_files_field_file_plan field formatter.
 */
function theme_ms_files_field_file_plan_button($variables) {
  $item = $variables['item'];
  global $user;
  drupal_add_css(drupal_get_path('module', 'ms_files') . '/css/ms_files.css');
  $p_file = ms_files_load_file_plan($item['pfid']);
  $output = "";
  if ($p_file) {
    $output .= "<div class='ms_files_field-file_plan-block'>";
    $output .= "<div class='ms_files_field-file_plan-block-title'><span class='label'>". t('Title') .":</span> " . $p_file->name . "</div>";

    // Check if the user has the file already
    if (user_access('download moneysuite file downloads for free')) {
      $output .= theme('ms_files_download_link', array('link' => l(basename($p_file->name), 'file/get/' . $p_file->pfid)));
    }
    else if (ms_files_user_has_file($user->uid, $p_file->pfid)) {
      $d_file = ms_files_load_file_download($p_file->pfid, $user->uid);
      $output .= theme('ms_files_download_link', array('link' => l(basename($p_file->name), 'file/download/' . $d_file->file_key)));
    }
    else {
      $output .= theme('ms_files_buynow_button', array('button' => ms_files_get_purchase_button($p_file->pfid, $p_file->name)));
    }
    $output .= "</div>";
  }

  return $output;
}

/**
 * Theme function for 'info' ms_files_field_file_plan field formatter.
 */
function theme_ms_files_field_file_plan_info($variables) {
  $item = $variables['item'];
  global $user;
  drupal_add_css(drupal_get_path('module', 'ms_files') . '/css/ms_files.css');
  $p_file = ms_files_load_file_plan($item['pfid']);
  $output = "";
  if ($p_file) {
    $file = file_load($p_file->fid);
    $output .= "<div class='ms_files_field-file_plan-block'>";
    $title = "<div class='ms_files_field-file_plan-block-title'><span class='ms-files-label'>". t('Title') .":</span> " . $p_file->name . "</div>";
    $description = "<div class='ms_files_field-file_plan-block-description'><span class='label'>". t('Description') .":</span> " . $p_file->description . "</div>";

    // Check if the user has the file already
    if (user_access('download moneysuite file downloads for free')) {
      $link = theme('ms_files_download_link', array('link' => l(basename($p_file->name), 'file/get/' . $p_file->pfid)));
      $downloadText = t("Unlimited");
      $expirationText = t("Unlimited");
    }
    else if (ms_files_user_has_file($user->uid, $p_file->pfid)) {
      $d_file = ms_files_load_file_download($p_file->pfid, $user->uid);
      $file = file_load($d_file->fid);
      $link = theme('ms_files_download_link', array('link' => l(basename($p_file->name), 'file/download/' . $d_file->file_key)));
      $downloadText = ($d_file->download_limit) ? $d_file->downloads . '/' . $d_file->download_limit : $d_file->downloads . '/Unlimited';
      $expirationText = ($d_file->expiration) ? format_date($d_file->expiration, 'short') : 'None';
    }
    else {
      $link = theme('ms_files_buynow_button', array('button' => ms_files_get_purchase_button($p_file->pfid, $p_file->name)));
      $downloadText = ($p_file->download_limit) ? $p_file->download_limit : 'Unlimited';
      $expirationText = ($p_file->time_limit) ? $p_file->time_limit . ' days' : 'None';
    }

    $fileName = "<div class='ms_files_field-file_plan-block-filename'><span class='label'>". t('Filename') .":</span> " . basename($file->filename) . "</div>";
    $fileSize = "<div class='ms_files_field-file_plan-block-filesize'><span class='label'>". t('Size') .":</span> " . number_format($file->filesize / 1000, 2) . " kb</div>";

    $downloads = "<div class='ms_files_field-file_plan-block-downloads'><span class='label'>". t('Downloads') .":</span> $downloadText</div>";
    $expiration = "<div class='ms_files_field-file_plan-block-expiration'><span class='label'>". t('Expiration') .":</span> $expirationText</div>";

    $output .= $title . $description . $fileName . $fileSize . $downloads . $expiration . $link;
    $output .= "</div>";
  }

  return $output;
}


/**************************************************************************
 * Field Type API: Widget
 *
 * The widget is the form element used to receive input from the user
 * when the field is being populated.
 **************************************************************************/

/**
 * Implements hook_field_widget_info().
 */
function ms_files_field_field_widget_info() {
  return array(
    'ms_files_field_file_plan_widget' => array(
      'label' => t('MoneySuite File'),
      'field types' => array('ms_files_field_file_plan'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function ms_files_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  switch ($instance['widget']['type']) {
    case 'ms_files_field_file_plan_widget':
      $p_files = ms_files_get_files();
      $file_list = array();
      if (!$instance['required']) {
        $file_list[0] = 'None';
      }

      foreach ($p_files as $key => $value) {
        $file_list[$key] = $value;
      }
      $element['pfid'] = array(
        '#type' => 'select',
        '#title' => 'File Download Plan',
        '#options' => $file_list,
        '#attributes' => array('class' => array('ms_files_field_file_plan')),
        '#required' => $instance['required'],
        '#default_value' => isset($items[$delta]['pfid']) ? $items[$delta]['pfid'] : '',
        '#delta' => $delta,
      );
      break;
  }
  return $element;
}

/**
 * Implements hook_field_widget_error().
 */
function ms_files_field_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'ms_files_field_invalid':
      form_error($element, $error['message']);
      break;
  }
}
