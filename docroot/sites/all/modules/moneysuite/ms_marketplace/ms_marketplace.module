<?php

/**
 * @file
 * Module that allows for multiple sellers on one site.
 *
 * @todo - Integration with Stripe Connect so that sites don't need to hold user
 *   balances.
 *   https://stripe.com/docs/connect
 * @todo - Integration with PayPal Adaptive Payments for the same type of thing.
 *   Perhaps this is better served as a new module...
 *   Users would be required to link either their Stripe account or PayPal email
 *   address before they can get paid. We should add an option to require it or
 *   not. If it is not required, then the commission balance would just be tracked
 *   and they can be paid out by PayPal.
 *   We can use the commission percentage setting to determine how much to charge
 *   a fee for.
 *   We could let modules like ms_stripe and ms_paypal_adaptive implement a hook
 *   that will set them up as a payment processor for marketplace users...
 *
 * Original author: Leighton Whiting - Released under GENERAL PUBLIC LICENSE 
 * Current maintenance by multiple MoneySuite users.
 * Re: new initiative: https://www.drupal.org/node/2315653
 */

/**
 * Implements hook_permission().
 */
function ms_marketplace_permission() {
  $perms = array(
    'act as marketplace seller' => array(
      'title' => t('Act as a marketplace seller'),
      'description' => t('Allows the user to earn commission for their products.'),
    ),
  );

  return $perms;
}

/**
 * Implements hook_help().
 */
function ms_marketplace_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/help#ms_marketplace":
      $output = '<p>' .  t("Marketplace provides support for granting commissions
        to multiple sellers on one site, with built-in integration for File Downloads
        Suite and Pay Per View, as well as custom products from the Generic Products
        module. You can set custom commission rates for different users in addition
        to the global and per-product-type commission rates. Sellers can also track
        their sales and commissions from a special dashboard.") . '</p>';
      break;
  }
  return $output;
}

/**
 * Access test to see if the user can access the seller signup page
 *
 * @param $account
 *   The account of the seller
 * @return
 *   Returns TRUE if the user has access, FALSE otherwise
 */
function ms_marketplace_signup_test($account) {
  global $user;
  if ($user->uid AND variable_get('ms_marketplace_allow_signup', FALSE) AND !user_access('act as marketplace seller') AND ($account->uid == $user->uid)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Access test to see if the user can access the program info page
 *
 * @return
 *   Returns TRUE if the user has access, FALSE otherwise
 */
function ms_marketplace_program_info_access_test() {
  if ($program_info = variable_get('ms_marketplace_program_info', array()) AND !empty($program_info)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Access test to see if the user can access the seller dashboard
 *
 * @param $account
 *   The account of the seller
 * @return
 *   Returns TRUE if the user has access, FALSE otherwise
 */
function ms_marketplace_access_test($account) {
  global $user;
  return (user_access('access administration pages') OR (user_access('act as marketplace seller') && ($account->uid == $user->uid)));
}

/**
 * Implements hook_menu().
 */
function ms_marketplace_menu() {
  $items = array();

  $items['admin/moneysuite/ms_marketplace'] = array(
    'title' => 'Marketplace Settings',
    'description' => 'Set the various Marketplace Settings here',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_marketplace_admin'),
    'access arguments' => array('administer moneysuite settings'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['user/%user/seller-signup'] = array(
    'title' => 'Seller Signup',
    'page callback' => 'ms_marketplace_signup_page',
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'ms_marketplace_signup_test',
    'access arguments' => array(1),
  );
  $items['user/%user/ms_marketplace'] = array(
    'title' => 'Seller Dashboard',
    'page callback' => 'ms_marketplace_dashboard_page',
    'page arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'ms_marketplace_access_test',
    'access arguments' => array(1),
  );
  $items['user/%user/ms_marketplace/dashboard'] = array(
    'title' => 'Seller Dashboard',
    'page callback' => 'ms_marketplace_dashboard_page',
    'page arguments' => array(1),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access callback' => 'ms_marketplace_access_test',
    'access arguments' => array(1),
    'weight' => 0
  );
  $items['user/%user/ms_marketplace/info'] = array(
    'title' => 'Program Info',
    'page callback' => 'ms_marketplace_program_info_page',
    'page arguments' => array(1),
    'access callback' => 'ms_marketplace_program_info_access_test',
    'type' => MENU_LOCAL_TASK,
    'weight' => 2
  );
  $items['user/%user/ms_marketplace/transactions'] = array(
    'title' => 'Transactions',
    'page callback' => 'ms_marketplace_program_transactions_page',
    'page arguments' => array(1),
    'access callback' => 'ms_marketplace_access_test',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2
  );
  $items['admin/moneysuite/ms_marketplace/custom_commission/add'] = array(
    'title' => 'Add Custom Commission for a User',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_marketplace_user_commission_form', 'add'),
    'access arguments' => array('administer moneysuite settings'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/moneysuite/ms_marketplace/custom_commission/edit/%'] = array(
    'title' => 'Edit Custom Commission for a User',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_marketplace_user_commission_form', 'edit', 5),
    'access arguments' => array('administer moneysuite settings'),
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );
  $items['admin/moneysuite/ms_marketplace/custom_commission/delete/%'] = array(
    'title' => 'Delete Custom Commission for a User',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_marketplace_delete_user_commission_confirm', 5),
    'access arguments' => array('administer moneysuite settings'),
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );

  return $items;
}

// ======================================
// Administration Page:
// ======================================

/**
 * Show the admin form options
 */
function ms_marketplace_admin($form, &$form_state) {
  $form['main'] = array(
    '#type' => 'fieldset',
    '#title' => t('Main Settings'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );

  $form['main']['ms_marketplace_commission_rate'] = array(
    '#type' => 'textfield',
    '#title' => t('Commission Rate'),
    '#default_value' => variable_get('ms_marketplace_commission_rate', ''),
    '#description' => t("Set the commission rate that will be used unless overridden
      in other settings. This should be a decimal number like '0.8' for 80%."),
    '#required' => TRUE,
  );

  $form['extra'] = array(
    '#type' => 'fieldset',
    '#title' => t('Extra Settings'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );

  $form['extra']['ms_marketplace_allow_signup'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow users to Signup to be Sellers?'),
    '#default_value' => variable_get('ms_marketplace_allow_signup', 0),
    '#description' => t('This will add a signup page in the User Account where users can signup to be sellers.
      They will click a button and be granted the seller role.'),
    '#required' => FALSE,
  );
  $roles = (user_roles(TRUE));
  unset($roles[DRUPAL_AUTHENTICATED_RID]);
  $form['extra']['ms_marketplace_signup_role'] = array(
    '#type' => 'select',
    '#title' => t('Signup Role'),
    '#options' => $roles,
    '#default_value' => variable_get('ms_marketplace_signup_role', 0),
    '#description' => t('Select which role to grant to a user who signs up to be a seller on the Signup Page.'),
    '#required' => FALSE,
  );
  $signup_page_text = variable_get('ms_marketplace_signup_page_text', array('format' => '', 'value' => ''));
  $form['extra']['ms_marketplace_signup_page_text'] = array(
    '#type' => 'text_format',
    '#format' => isset($signup_page_text['format']) ? $signup_page_text['format'] : NULL,
    '#title' => t('Signup Page Text'),
    '#description' => t('The text that will appear on the signup page'),
    '#default_value' => $signup_page_text['value'],
  );
  $program_info = variable_get('ms_marketplace_program_info', array('format' => '', 'value' => ''));
  $form['extra']['ms_marketplace_program_info'] = array(
    '#type' => 'text_format',
    '#format' => isset($program_info['format']) ? $program_info['format'] : NULL,
    '#title' => t('Program Information'),
    '#default_value' => $program_info['value'],
    '#description' => t("Put the Program Information and anything else you want here, and it will show on the Sellers Dashboard. Leave blank to show nothing."),
    '#required' => FALSE,
  );
  $form['extra']['ms_marketplace_signup_page_checkbox'] = array(
    '#type' => 'textfield',
    '#title' => t('Signup Page Checkbox'),
    '#default_value' => variable_get('ms_marketplace_signup_page_checkbox', t('I agree')),
    '#description' => t("Enter the text for the checkbox. Leave blank to show nothing."),
    '#required' => FALSE,
  );

  $form['roles'] = array(
    '#type' => 'fieldset',
    '#title' => t('Role Specific Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $roles = user_roles(TRUE);

  foreach ($roles as $rid => $role) {
    $form['roles'][$rid] = array(
      '#type' => 'fieldset',
      '#title' => $role,
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['roles'][$rid]['ms_marketplace_use_role_specific_commission_' . $rid] = array(
      '#type' => 'checkbox',
      '#title' => t('Use Custom Settings for !role?', array('!role' => $role)),
      '#default_value' => variable_get('ms_marketplace_use_role_specific_commission_' . $rid, FALSE),
      '#description' => t('Check this to use custom commission settings for this role.'),
      '#required' => FALSE,
    );
    $form['roles'][$rid]['ms_marketplace_role_specific_commission_' . $rid] = array(
      '#type' => 'textfield',
      '#title' => t('Custom Commission Rate'),
      '#default_value' => variable_get('ms_marketplace_role_specific_commission_' . $rid, ''),
      '#size' => 32,
      '#maxlength' => 64,
      '#description' => t("Set the commission rate that will be used unless overridden
      in other settings. This should be a decimal number like '0.8' for 80%."),
      '#required' => FALSE,
    );
  }

  $form['users'] = array(
    '#type' => 'fieldset',
    '#title' => t('Custom User Commission Rates'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $headers = array(t('Seller Name'), t('Commission Rate'), t('Actions'));
  $rows = array();
  $attr = array('id' => 'custom-sellers-table');
  $result = db_query("SELECT * FROM {ms_marketplace_user_commission_rates}");

  foreach ($result as $row) {
    $account = user_load($row->uid);
    $actions = array();
    $actions[] = l(t('Edit'), 'admin/moneysuite/ms_marketplace/custom_commission/edit/' . $account->uid);
    $actions[] = l(t('Delete'), 'admin/moneysuite/ms_marketplace/custom_commission/delete/' . $account->uid);

    $rows[] = array(
      l($account->name, 'user/' . $account->uid),
      $row->commission,
      implode(' | ', $actions),
    );
  }

  $form['users']['custom_user_commissions_table'] = array(
    '#type' => 'item',
    '#title' => t('Custom User Commission Rates'),
    '#markup' => theme('table', array('header' => $headers, 'rows' => $rows, 'attributes' => $attr, 'empty' => t('No custom commissions yet.'))),
    '#description' => t("To add a custom commission rate for a specific user, !click",
      array('!click' => l(t('Click Here'), 'admin/moneysuite/ms_marketplace/custom_commission/add'))),
  );

  $form['email'] = array(
    '#type' => 'fieldset',
    '#title' => t('Email Settings'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );

  $form['email']['email_info'] = array(
    '#type' => 'markup',
    '#markup' => t('The emails that are sent are handled by Rules. You can change them here: !link',
      array('!link' => l(t('Rules Admin'), 'admin/config/workflow/rules'))),
  );

  $form['integration'] = array(
    '#type' => 'fieldset',
    '#title' => t('Integration Settings'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );

  if (module_exists('ms_ppv')) {
    $form['integration']['ms_ppv'] = array(
      '#type' => 'fieldset',
      '#title' => t('Pay Per View'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['integration']['ms_ppv']['ms_marketplace_ppv_active'] = array(
      '#type' => 'checkbox',
      '#title' => t('Activate Marketplace Functions for Pay Per View?'),
      '#default_value' => variable_get('ms_marketplace_ppv_active', FALSE),
      '#required' => FALSE,
    );
    $form['integration']['ms_ppv']['ms_marketplace_ppv_form_hide_ms_ppv_price'] = array(
      '#type' => 'checkbox',
      '#title' => t('Hide the Price field?'),
      '#default_value' => variable_get('ms_marketplace_ppv_form_hide_ms_ppv_price', FALSE),
      '#required' => FALSE,
    );
    $form['integration']['ms_ppv']['ms_marketplace_ppv_form_ms_ppv_price_title'] = array(
      '#type' => 'textfield',
      '#title' => t('Price Field Title'),
      '#default_value' => variable_get('ms_marketplace_ppv_form_ms_ppv_price_title', t('Price')),
      '#description' => t("Set the title for the Price field."),
      '#required' => TRUE,
    );
    $form['integration']['ms_ppv']['ms_marketplace_ppv_form_ms_ppv_price_description'] = array(
      '#type' => 'textfield',
      '#title' => t('Price Field Description'),
      '#default_value' => variable_get('ms_marketplace_ppv_form_ms_ppv_price_description', t('Enter a price')),
      '#description' => t("Set the description for the Price field."),
      '#required' => TRUE,
    );
    $form['integration']['ms_ppv']['ms_marketplace_ppv_form_ms_ppv_price_weight'] = array(
      '#type' => 'textfield',
      '#title' => t('Price Field Weight'),
      '#default_value' => variable_get('ms_marketplace_ppv_form_ms_ppv_price_weight', 0),
      '#description' => t("Set the weight for the Price field."),
      '#required' => TRUE,
    );
    $form['integration']['ms_ppv']['ms_marketplace_ppv_form_hide_ms_ppv_use_override'] = array(
      '#type' => 'checkbox',
      '#title' => t('Hide the Override field?'),
      '#default_value' => variable_get('ms_marketplace_ppv_form_hide_ms_ppv_use_override', TRUE),
      '#required' => FALSE,
    );
    $form['integration']['ms_ppv']['ms_marketplace_ppv_form_hide_ms_ppv_protected_content_message'] = array(
      '#type' => 'checkbox',
      '#title' => t('Hide the Protected Message field?'),
      '#default_value' => variable_get('ms_marketplace_ppv_form_hide_ms_ppv_protected_content_message', TRUE),
      '#required' => FALSE,
    );
    $form['integration']['ms_ppv']['ms_marketplace_ppv_form_hide_ms_ppv_allow_multiple'] = array(
      '#type' => 'checkbox',
      '#title' => t('Hide the Allow Multiple field?'),
      '#default_value' => variable_get('ms_marketplace_ppv_form_hide_ms_ppv_allow_multiple', TRUE),
      '#required' => FALSE,
    );
    $form['integration']['ms_ppv']['ms_marketplace_ppv_form_hide_ms_ppv_expiration_string'] = array(
      '#type' => 'checkbox',
      '#title' => t('Hide the Expiration field?'),
      '#default_value' => variable_get('ms_marketplace_ppv_form_hide_ms_ppv_expiration_string', TRUE),
      '#required' => FALSE,
    );
    $form['integration']['ms_ppv']['ms_marketplace_ppv_form_hide_ms_ppv_stock'] = array(
      '#type' => 'checkbox',
      '#title' => t('Hide the Stock field?'),
      '#default_value' => variable_get('ms_marketplace_ppv_form_hide_ms_ppv_stock', TRUE),
      '#required' => FALSE,
    );
    $form['integration']['ms_ppv']['ms_marketplace_ppv_form_hide_ms_ppv_stock_message'] = array(
      '#type' => 'checkbox',
      '#title' => t('Hide the Stock Message field?'),
      '#default_value' => variable_get('ms_marketplace_ppv_form_hide_ms_ppv_stock_message', TRUE),
      '#required' => FALSE,
    );
  }

  return system_settings_form($form);
}

function ms_marketplace_form_node_form_alter(&$form, &$form_state, $form_id) {
  //drupal_set_message($form_id);
  //drupal_set_message(ms_core_print_r($form));
  //drupal_set_message(ms_core_print_r($form_state));
}


/**
 * Implements hook_module_implements_alter().
 */
function ms_marketplace_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter') {
    $group = $implementations['ms_marketplace'];
    unset($implementations['ms_marketplace']);
    $implementations['ms_marketplace'] = $group;
  }
}

/**
 * Implements hook_form_alter().
 *
 * We use this to hide elements that should only be visible to admin users
 */
function ms_marketplace_form_alter(&$form, &$form_state, $form_id) {
  // Sometimes the node edit form is a unique form name
  if (isset($form['#node_edit_form']) AND $form['#node_edit_form']) {
    $form_id = 'node-form';
  }
  switch ($form_id) {
    case 'node-form': // PPV
      if (variable_get('ms_marketplace_ppv_active', FALSE) AND variable_get('ms_ppv_active_' . $form['#node']->type, FALSE)) {
        $form['ms_ppv']['#type'] = '';
        $form['ms_ppv']['ms_ppv_price']['#title'] = variable_get('ms_marketplace_ppv_form_ms_ppv_price_title', t('Price'));
        $form['ms_ppv']['ms_ppv_price']['#description'] = variable_get('ms_marketplace_ppv_form_ms_ppv_price_description', t('Enter a price'));
        $form['ms_ppv']['ms_ppv_price']['#weight'] = variable_get('ms_marketplace_ppv_form_ms_ppv_price_weight', 0);
        if (variable_get('ms_marketplace_ppv_form_hide_ms_ppv_use_override', TRUE)) {
          $form['ms_ppv']['ms_ppv_use_override']['#type'] = 'value';
          $form['ms_ppv']['ms_ppv_use_override']['#value'] = 1;
        }
        if (variable_get('ms_marketplace_ppv_form_hide_ms_ppv_price', FALSE)) {
          $form['ms_ppv']['ms_ppv_price']['#type'] = 'value';
        }
        if (variable_get('ms_marketplace_ppv_form_hide_ms_ppv_expiration_string', TRUE)) {
          $form['ms_ppv']['ms_ppv_expiration_string']['#type'] = 'value';
        }
        if (variable_get('ms_marketplace_ppv_form_hide_ms_ppv_allow_multiple', TRUE)) {
          $form['ms_ppv']['ms_ppv_allow_multiple']['#type'] = 'value';
        }
        if (variable_get('ms_marketplace_ppv_form_hide_ms_ppv_protected_content_message', TRUE)) {
          $form['ms_ppv']['ms_ppv_protected_content_message']['#type'] = 'value';
          unset($form['ms_ppv']['ms_ppv_protected_content_message_token_help']);
        }
        if (variable_get('ms_marketplace_ppv_form_hide_ms_ppv_stock', TRUE)) {
          $form['ms_ppv']['ms_ppv_stock']['#type'] = 'value';
        }
        if (variable_get('ms_marketplace_ppv_form_hide_ms_ppv_stock_message', TRUE)) {
          $form['ms_ppv']['ms_ppv_out_of_stock_message']['#type'] = 'value';
        }
      }
      break;

    default:
      //drupal_set_message($form_id);
      //drupal_set_message(ms_core_print_r($form));
      //drupal_set_message(ms_core_print_r($form_state));
      break;
  }
}

// ======================================
// Functions
// ======================================

/**
 * Grants commission to a user
 *
 * @param $uid
 *  The user id
 * @param $oid
 *  The order id
 * @param $order_product_id
 *  The order product id
 * @param $commission
 *  The amount to grant
 */
function ms_marketplace_grant_commission($uid, $order, $product, $commission) {
  // Grant the commission to the user's balance
  ms_affiliates_insert_record($uid, 0, 0, $order->oid, t('Commission earned'), 'marketplace_commission', $commission);

  $owner = user_load($uid);
  module_invoke_all('ms_marketplace_commission_paid', $commission, $product, $order, $owner);
}

/**
 * Returns the base commission rate
 */
function ms_marketplace_get_commission_rate($account, $type) {
  $rate = floatval(variable_get('ms_marketplace_commission_rate', 0.5));

  // Check for role-specific rates
  if (is_array($account->roles)) {
    ksort($account->roles);
    foreach ($account->roles as $rid => $rolename) {
      if (variable_get('ms_marketplace_use_role_specific_commission_' . $rid, FALSE)) {
        $rate = floatval(variable_get('ms_marketplace_role_specific_commission_' . $rid, ''));
      }
    }
  }

  // Check if the user has custom commissions
  if ($row = ms_marketplace_get_user_commission_rate($account->uid)) {
    $rate = floatval($row->rate);
  }

  ms_core_debug(t('The calculated commission rate for @name is @rate',
    array('@name' => $account->name, '@rate' => $rate)), FALSE);

  return $rate;
}

/**
 * Calculate the product amount to be granted commission for
 */
function ms_marketplace_get_product_adjusted_price($order, $product) {
  if ($order->order_type == 'recurring') {
    if ($trial AND $product->recurring_schedule['trial_length']) {
      $product_total = $product->recurring_schedule['trial_amount'];
      foreach ($order->adjustments as $adjustment) {
        if (!empty($adjustment->product_id) AND ((!empty($product->cart_product_id) AND $adjustment->product_id == $product->cart_product_id) OR (!empty($product->order_product_id) AND $adjustment->product_id == $product->order_product_id))) {
          if ($final OR $adjusment->weight < 1) {
            $product_total += ms_core_get_adjusted_price($adjustment, $product_total);
          }
        }
      }
    }
    else {
      $product_total = ($product->recurring_schedule['main_amount']) ? $product->recurring_schedule['main_amount'] : $product->amount;

      foreach ($order->adjustments as $adjustment) {
        if (!empty($adjustment->product_id) AND ((!empty($product->cart_product_id) AND $adjustment->product_id == $product->cart_product_id) OR (!empty($product->order_product_id) AND $adjustment->product_id == $product->order_product_id))) {
          if ($final OR $adjusment->weight < 1) {
            $product_total += ms_core_get_adjusted_price($adjustment, $product_total);
          }
        }
      }

      $price += $product_total;
    }
  }
  else {
    $product_total = $product->amount * $product->qty;

    foreach ($order->adjustments as $adjustment) {
      if (!empty($adjustment->product_id) AND ((!empty($product->cart_product_id) AND $adjustment->product_id == $product->cart_product_id) OR (!empty($product->order_product_id) AND $adjustment->product_id == $product->order_product_id))) {
        if ($final OR $adjusment->weight < 1) {
          $product_total += ms_core_get_adjusted_price($adjustment, $product_total);
        }
      }
    }
  }

  return $product_total;
}

/**
 * Calculate the amound of commission to pay a seller
 */
function ms_marketplace_calculate_commission($amount, $owner, $type) {
  ms_core_debug(t('Calculating the commission amount for @name from base amount @amount',
    array('@name' => $owner->name, '@amount' => $amount)), FALSE);
  // Determine what rate should be used
  $rate = ms_marketplace_get_commission_rate($owner, $type);

  return round($amount * $rate, 2);
}

/**
 * Implements hook_ms_order_payment
 */
function ms_marketplace_ms_order_payment($type, $product, $order, $payment) {
  $owner = FALSE;
  switch ($product->module) {
    case 'ms_files':
      if (variable_get('ms_marketplace_files_active', FALSE)) {
        $product_plan = ms_files_load_file_plan($product->id);
        $owner = user_load($product_plan->uid);
      }
      break;

    case 'ms_membership':
      if (variable_get('ms_marketplace_membership_active', FALSE)) {
        $product_plan = ms_membership_load_membership_plan($product->id);
        $owner = user_load($product_plan->uid);
      }
      break;

    case 'ms_paypublish':
      if (variable_get('ms_marketplace_paypublish_active', FALSE)) {
        $product_plan = ms_paypublish_load_plan($product->id);
        $owner = user_load($product_plan->uid);
      }
      break;

    case 'ms_ppv':
      if (variable_get('ms_marketplace_ppv_active', FALSE)) {
        if ($node = node_load($product->data['nid'])) {
          $owner = user_load($node->uid);
        }
      }
      break;

    case 'ms_ppv_field':
      if (variable_get('ms_marketplace_ppv_active', FALSE)) {
        if ($entity = _ms_ppv_entity_load_single($product->data['entity_type'], $product->data['entity_id']) AND !empty($entity->uid)) {
          $owner = user_load($entity->uid);
        }
      }
      break;
  }

  if ($owner) {
    if (!user_access('skip commission for marketplace sales', $owner) AND user_access('act as marketplace seller', $owner)) {
      module_invoke_all('ms_marketplace_sale', $payment, $product, $order, $owner);
    }
  }
}

/**
 * Implementation of hook_ms_marketplace_sale().
 */
function ms_marketplace_ms_marketplace_sale($payment, $product, $order, $owner) {
  // Invoke the rule event
  rules_invoke_event('ms_marketplace_event_new_sale', $payment, $product, $order, $owner);
}

/**
 * Implementation of hook_ms_marketplace_commission_paid().
 */
function ms_marketplace_ms_marketplace_commission_paid($commission, $product, $order, $owner) {
  // Invoke the rule event
  rules_invoke_event('ms_marketplace_event_commission_paid', $commission, $product, $order, $owner);
}

// ======================================
// Pages:
// ======================================

/**
 * Signup as a seller page
 */
function ms_marketplace_signup_page() {
  $build = array();
  $signup_page_text = variable_get('ms_marketplace_signup_page_text', array('format' => '', 'value' => ''));
  $build['content'] = array(
      'ms_marketplace_signup_page_text' => array(
          '#markup' => check_markup($signup_page_text['value'], $signup_page_text['format']),
      ),
      'ms_marketplace_signup_page_form' => drupal_get_form('ms_marketplace_signup_form'),
  );

  return $build;
}

/**
 * Build Function for the Seller Signup Form
 */
function ms_marketplace_signup_form($form, &$form_state) {
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Accept'),
  );

  return $form;
}

/**
 * Submit Function for the Seller Signup Form
 */
function ms_marketplace_signup_form_submit($form, &$form_state) {
  global $user;
  $rid = variable_get('ms_marketplace_signup_role', 0);
  if ($rid AND $user->uid AND !isset($user->roles[$rid])) {
    if (!in_array($rid, array(DRUPAL_ANONYMOUS_RID, DRUPAL_AUTHENTICATED_RID))) {
      $id = db_insert('users_roles')
        ->fields(array(
              'uid' => $user->uid,
              'rid' => $rid,
            ))
        ->execute();

      $roles = user_roles(TRUE);
      ms_core_log('ms_marketplace', 'Added seller role !role to !user.',
        array('!role' => $roles[$rid], '!user' => l($user->name, 'user/' . $user->uid)));
    }
  }

  drupal_set_message(t("You have successfully signed up as a Seller. Click the new 'Seller' tab for more information."));
  $form_state['redirect'] = 'user';
}

/**
 * Program Info Page
 */
function ms_marketplace_program_info_page($account) {
  $program_info = variable_get('ms_marketplace_program_info', array('format' => '', 'value' => ''));
  return '<div id="marketplace-sales-header"><h2>' . t('Program Info') . '</h2></div>' . check_markup($program_info['value'], $program_info['format']);
}

/**
 * Builds the transactions page
 */
function ms_marketplace_program_transactions_page($account) {
  $headers = array(
    array('data' => t('Date'), 'field' => 'date', 'sort' => 'desc'),
    t('User'),
    array('data' => t('Item'), 'field' => 'type'),
    array('data' => t('Info'), 'field' => 'info'),
    array('data' => t('Amount'), 'field' => 'amount'),
    array('data' => t('Balance'), 'field' => 'balance'),
  );
  $attr = array();
  $history = array();

  $query = db_select('ms_affiliates_history', 'h');
  $query->fields('h');
  $query->condition('h.uid', $account->uid, '=');

  $query = $query->extend('TableSort')->orderByHeader($headers);
  $query = $query->extend('PagerDefault')->limit(20);

  $result = $query->execute();

  foreach ($result as $item) {
    $ref = user_load($item->rid);
    $ref_link = ($ref->uid) ? l($ref->name, 'user/' . $ref->uid) : '';
    $item_name = ($item->type == 'af_payment') ? t('Payment') : t('Credit');

    $history[] = array(
      'date' => format_date($item->date),
      'user' => $ref_link,
      'item' => $item_name,
      'info' => $item->info,
      'amount' => $item->amount,
      'balance' => $item->balance,
    );
  }

  $build = array();

  $build['content'] = array(
    '#markup' => theme('table', array('header' => $headers, 'rows' => $history, 'attributes' => $attr, 'empty' => t('No history items.'))),
  );

  // Add the pager.
  $build['pager'] = array(
    '#theme' => 'pager',
    '#weight' => 5,
  );

  return $build;
}

/**
 * Seller Dashboard Page
 */
function ms_marketplace_dashboard_page($account) {
  $balance = ms_core_format_money(ms_affiliates_get_balance($account->uid, TRUE));
  $available = ms_core_format_money($account->af_balance);
  $payment_link = l(t('Request Payment'), 'ms_affiliates/request-payment');
  $min_payout = ms_core_format_money(variable_get('ms_affiliates_min_payout', 0));
  $payment_options = ms_affiliates_get_payment_options_html($account);

  $commissions = array('today' => 0, '7days' => 0, '365days' => 0);

  // get today's commissions
  $dates_today = ms_affiliates_predefined_range(7);
  $result = db_query('SELECT COUNT(id) AS cnt FROM {ms_affiliates_history}
    WHERE uid = :uid AND type != :af_payment AND type != :af_credit AND date between :start AND :end',
  array(':uid' => $account->uid, ':af_payment' => 'af_payment', ':af_credit' => 'af_credit', ':start' => $dates_today['start'], ':end' => $dates_today['end']));

  foreach ($result as $count) {
    $commissions['today'] += $count->cnt;
  }

  // get commissions from the last 7 days
  $dates_week = ms_affiliates_predefined_range(6);

  $result = db_query('SELECT COUNT(id) AS cnt FROM {ms_affiliates_history}
    WHERE uid = :uid AND type != :af_payment AND type != :af_credit AND date BETWEEN :start AND :end',
    array(':uid' => $account->uid, ':af_payment' => 'af_payment', ':af_credit' => 'af_credit', ':start' => $dates_week['start'], ':end' => $dates_week['end']));

  foreach ($result as $count) {
    $commissions['7days'] += $count->cnt;
  }

  // get commissions from the last year
  $dates_year = ms_affiliates_predefined_range(5);

  $result = db_query('SELECT COUNT(id) AS cnt FROM {ms_affiliates_history}
    WHERE uid = :uid AND type != :af_payment AND type != :af_credit AND date BETWEEN :start AND :end',
    array(':uid' => $account->uid, ':af_payment' => 'af_payment', ':af_credit' => 'af_credit', ':start' => $dates_year['start'], ':end' => $dates_year['end']));

  foreach ($result as $count) {
    $commissions['365days'] += $count->cnt;
  }

  // @todo - Show the current products that belong to this user

  $build = array();
  $build['content'] = array(
    'ms_marketplace_dashboard' => array(
      '#type' => 'markup',
      '#markup' => theme('ms_marketplace_dashboard', array(
        'account' => $account,
        'commissions' => $commissions,
        'payment_options' => $payment_options,
        'balance' => $balance,
        'available' => $available,
        'payment_link' => $payment_link,
        'min_payout' => $min_payout,
      )
    ),
  ));

  return $build;
}

/**
 * Returns all of the products associated with a certain seller
 */
function ms_marketplace_get_seller_products($account) {
  $products = array();

  $all_products = ms_core_get_module_products();

  foreach ($all_products as $product) {
    if ($account->uid AND $product->owner == $acount->uid) {
      $products[] = $product;
    }
  }

  return $products;
}

/**
 * Implements hook_theme().
 */
function ms_marketplace_theme($existing, $type, $theme, $path) {
  return array(
    'ms_marketplace_dashboard' => array(
      'variables' => array('account' => NULL, 'commissions' => NULL, 'payment_options' => NULL,
        'balance' => NULL, 'available' => NULL, 'payment_link' => NULL, 'min_payment' => NULL),
      'template' => 'ms_marketplace_dashboard',
    ),
  );
}

/**
 * Build Function for the Add Custom Commissions Form
 */
function ms_marketplace_user_commission_form($form, &$form_state, $action, $uid = NULL) {
  $is_edit = FALSE;

  $form['main'] = array(
    '#type' => 'fieldset',
    '#title' => t('Custom Commission Rate'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );

  if ($action == 'edit') {
    $is_edit = TRUE;
    $account = user_load($uid);
    $custom_commissions = ms_marketplace_get_user_commission_rate($account->uid);

    $form['main']['uid'] = array(
      '#type' => 'value',
      '#value' => $account->uid,
    );
  }

  $form['main']['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Seller Name'),
    '#size' => 32,
    '#maxlength' => 64,
    '#description' => t("The Name of the Seller"),
    '#default_value' => ($is_edit) ? $account->name : '',
    '#autocomplete_path' => 'admin/structure/ms_core/autocomplete',
    '#required' => TRUE,
  );
  $form['main']['rate'] = array(
    '#type' => 'textfield',
    '#title' => t('Commission Rate'),
    '#size' => 32,
    '#maxlength' => 64,
    '#description' => t("This should be a comma separated list of number with the first value corresponding
        to the first level in the hierarchy and each successive value corresponding to the
        next level in the hierarchy. To give an exact amount, use the '$' sign in front of
        the number, no matter the currency. To give a percentage of the order amount, specify
        simply the number. Example: '15,$" . "10.50,5.25' . This would give 15% of the order
        amount to the direct affiliate, ten dollars and fifty cents to the affiliate's
        affiliate, and 5.25 percent of the order amount to the affiliate of the second tier."),
    '#default_value' => ($is_edit) ? $custom_commissions->rate : variable_get('ms_marketplace_payout_percentages', '15,10,5'),
    '#required' => TRUE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );

  return $form;
}

/**
 * Validate Function for the Add Custom Commissions Form
 */
function ms_marketplace_user_commission_form_validate($form, &$form_state) {
  $v = $form_state['values'];
  $account = user_load_by_name($v['name']);
  if (!$account->uid) {
    form_set_error('name', t('You must enter a valid user'));
  }
}

/**
 * Submit Function for the Add Custom Commissions Form
 */
function ms_marketplace_user_commission_form_submit($form, &$form_state) {
  $v = $form_state['values'];
  $account = user_load_by_name($v['name']);

  $record = new stdClass();

  $record->uid = $account->uid;
  $record->rate = $v['rate'];

  // Remove the record
  if ($v['uid']) {
    db_delete('ms_marketplace_user_commission_rates')
      ->condition('uid', $v['uid'])
      ->execute();
  }

  // Write the record
  drupal_write_record('ms_marketplace_user_commission_rates', $record);

  drupal_set_message(t('Set the custom commission rate for %user.', array('%user' => $account->name)));
  $form_state['redirect'] = 'admin/moneysuite/ms_marketplace';
}

/**
 * Delete a Custom Commission for a User
 */
function ms_marketplace_delete_user_commission_confirm($form, &$form_state, $uid) {
  $account = user_load($uid);
  $custom_commissions = ms_marketplace_get_user_commission($account->uid);
  if ($custom_commissions->uid) {
    $form['#ms_uid'] = $custom_commissions->uid;
    return confirm_form($form, t('Are you sure you want to delete the custom commission rate for user %user?',
      array('%user' => $account->name)), 'admin/moneysuite/ms_marketplace', t('This action cannot be undone.'), t('Delete'));
  }
  else {
    drupal_not_found();
  }
}

/**
 * Delete a Custom Commission for a User
 */
function ms_marketplace_delete_user_commission_confirm_submit($form, &$form_state) {
  $account = user_load($form['#ms_uid']);

  // Delete the commission levels for the user
  $result = db_delete('ms_marketplace_user_commission_rates')
    ->condition('uid', $account->uid)
    ->execute();

  drupal_set_message(t('Custom Commission Rate for user %user have been deleted', array('%user' => $account->name)));
  $form_state['redirect'] = 'admin/moneysuite/ms_marketplace';
}

/**
 * Get the user commission
 */
function ms_marketplace_get_user_commission_rate($uid) {
  $result = db_query("SELECT * FROM {ms_marketplace_user_commission_rates} WHERE uid = :uid", array(':uid' => $uid));
  foreach ($result as $row) {
    return $row;
  }
  return FALSE;
}
