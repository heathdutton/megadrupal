<?php

/**
 * @file
 * Sell access to individual nodes and fields.
 *
 * Original author: Leighton Whiting - Released under GENERAL PUBLIC LICENSE
 * Current maintenance by multiple MoneySuite users.
 * Re: new initiative: https://www.drupal.org/node/2315653 
 */

define("MS_PPV_ACCESS_INACTIVE", 0);
define("MS_PPV_ACCESS_ACTIVE", 1);
define("MS_PPV_ACCESS_EXPIRING_SOON", 2);

/**
 * Implements hook_cron()
 */
function ms_ppv_cron() {
  // Check for access records that are expiring soon.
  $cutoff = strtotime('+' . variable_get('ms_ppv_expiring_soon_string', '3 days'));

  $result = db_select('ms_ppv_access', 'a')
    ->fields('a')
    ->condition('expiration', 0, '!=')
    ->condition('expiration', $cutoff, '<')
    ->condition('status', MS_PPV_ACCESS_ACTIVE)
    ->execute();

  foreach ($result as $row) {
    $account = user_load($row->uid);
    if ($account->uid && variable_get('ms_ppv_expiring_soon_mail_body', '')) {
      $node = node_load($row->nid);
      $order = ms_core_order_load($row->oid);
      $params = array(
        'account' => $account,
        'access_record' => $row,
        'node' => $node,
        'order' => $order,
      );
      drupal_mail('ms_ppv', 'entity_access_expiring', $account->mail, language_default(), $params);

      // Mark the record as expiring soon.
      db_update('ms_ppv_access')
        ->fields(array(
          'status' => MS_PPV_ACCESS_EXPIRING_SOON,
        ))
        ->condition('id', $row->id)
        ->execute();
    }
  }

  // Also expire old access records
  $result = db_select('ms_ppv_access', 'a')
    ->fields('a')
    ->condition('expiration', 0, '!=')
    ->condition('expiration', REQUEST_TIME, '<')
    ->condition('status', MS_PPV_ACCESS_INACTIVE, '!=')
    ->execute();

  foreach ($result as $row) {
    // Mark the record as expiring soon.
    db_update('ms_ppv_access')
      ->fields(array(
        'status' => MS_PPV_ACCESS_INACTIVE,
      ))
      ->condition('id', $row->id)
      ->execute();
  }
}

/**
 * Implements hook_menu().
 */
function ms_ppv_menu() {
  $items = array();
  $items['ms_ppv/purchase/%'] = array(
    'title' => 'Purchase Content',
    'page callback' => 'ms_ppv_add_to_cart',
    'page arguments' => array(2),
    'access arguments' => array('purchase ms nodes'),
    'type' => MENU_CALLBACK,
  );
  $items['ms_ppv/field/%/%/%'] = array(
    'title' => 'Purchase Content',
    'page callback' => 'ms_ppv_field_add_to_cart',
    'page arguments' => array(2, 3, 4),
    'access arguments' => array('purchase ms fields'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/moneysuite/ms_ppv'] = array(
    'title' => 'Pay Per View Settings',
    'description' => 'Set the various Pay Per View Settings here',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_ppv_admin'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['user/%user/purchased-content'] = array(
    'title' => 'Purchased Content',
    'page callback' => 'ms_ppv_user_purchased_content_page',
    'page arguments' => array(1),
    'access callback' => 'ms_ppv_view_purchased_content_access_test',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/content/ms_ppv_nodes'] = array(
    'title' => 'PPV Node Access Records',
    'page callback' => 'ms_ppv_show_nodes',
    'access arguments' => array('administer pay per view'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/content/ms_ppv_nodes/list'] = array(
    'title' => 'PPV Node Access Records',
    'page callback' => 'ms_ppv_show_nodes',
    'access arguments' => array('administer pay per view'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => '-1'
  );
  $items['admin/content/ms_ppv_nodes/add'] = array(
    'title' => 'Add PPV Node Access',
    'page callback' => 'ms_ppv_edit_node_page',
    'access arguments' => array('administer pay per view'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/content/ms_ppv_nodes/edit/%'] = array(
    'title' => 'Edit PPV Node Access',
    'page callback' => 'ms_ppv_edit_node_page',
    'page arguments' => array(4),
    'access arguments' => array('administer pay per view'),
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );
  $items['admin/content/ms_ppv_nodes/delete/%'] = array(
    'title' => 'Delete PPV Node Access',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_ppv_delete_node_access_confirm', 4),
    'access arguments' => array('administer pay per view'),
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );
  $items['admin/content/ms_ppv_fields'] = array(
    'title' => 'PPV Field Access Records',
    'page callback' => 'ms_ppv_show_fields',
    'access arguments' => array('administer pay per view'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/content/ms_ppv_fields/list'] = array(
    'title' => 'PPV Field Access Records',
    'page callback' => 'ms_ppv_show_fields',
    'access arguments' => array('administer pay per view'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => '-1'
  );
  $items['admin/content/ms_ppv_fields/add'] = array(
    'title' => 'Add PPV Field Access',
    'page callback' => 'ms_ppv_edit_field_page',
    'access arguments' => array('administer pay per view'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/content/ms_ppv_fields/edit/%'] = array(
    'title' => 'Edit PPV Field Access',
    'page callback' => 'ms_ppv_edit_field_page',
    'page arguments' => array(4),
    'access arguments' => array('administer pay per view'),
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );
  $items['admin/content/ms_ppv_fields/delete/%'] = array(
    'title' => 'Delete PPV Field Access',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_ppv_delete_field_access_confirm', 4),
    'access arguments' => array('administer pay per view'),
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );

  return $items;
}

/**
 * Make sure that only users who have permission can view the purchased content
 */
function ms_ppv_view_purchased_content_access_test($account) {
  global $user;
  return (user_access('administer users') OR (user_access('view own purchased content') && ($account->uid == $user->uid)));
}

/**
 * Implements hook_permission().
 */
function ms_ppv_permission() {
  $perms = array(
    'administer pay per view' => array(
      'title' => t('Administer Pay Per View Access'),
      'description' => t('Allows the user to administer access to PPV content.'),
    ),
    'purchase ms fields' => array(
      'title' => t('Purchase premium fields'),
      'description' => t('Allows the user to purchase access to a field.'),
    ),
    'purchase ms nodes' => array(
      'title' => t('Purchase premium content'),
      'description' => t('Allows the user to purchase access to a node.'),
    ),
    'view own purchased content' => array(
      'title' => t('View own purchased content'),
      'description' => t('Allows a user to view their own purchased content in their User Account.'),
    ),
    'set ms nodes pricing' => array(
      'title' => t('Set premium content pricing'),
      'description' => t('Allows a node author to set the pricing for pay per view nodes.'),
    ),
  );

  foreach (array_keys(node_type_get_types()) as $type) {
    $perms['view ms node type ' . $type . ' for free'] = array(
      'title' => t('View @type content for free', array('@type' => $type)),
      'description' => t("Allows a user to view all @type nodes for free,
        even if they are set as premium content.", array('@type' => $type)),
    );
  }

  return $perms;
}

/**
 * Show the purchased content in the user account
 */
function ms_ppv_user_purchased_content_page($account) {
  $output = '';
  $headers = array(t('Title'), t('Expires'), t('Actions'));
  $result = db_query("SELECT * FROM {ms_ppv_access} WHERE uid = :uid", array(':uid' => $account->uid));
  $rows = array();
  $attr = array();
  foreach ($result as $ms_node) {
    if ($node = node_load($ms_node->nid)) {
      $actions = array();

      $actions[] = l(t('View'), 'node/' . $node->nid);

      // Show a link to add time to the node
      if ($node->ms_ppv_allow_multiple) {
        $actions[] = l(t('Add Time'), ms_ppv_get_add_to_cart_url($ms_node->nid));
      }

      $rows[] = array(
        l($node->title, 'node/' . $node->nid),
        ($ms_node->expiration) ? format_date($ms_node->expiration, 'short') : t('N/A'),
        implode($actions, ' | '),
      );
    }
  }

  $result = db_query("SELECT * FROM {ms_ppv_field_access} WHERE uid = :uid", array(':uid' => $account->uid));
  foreach ($result as $record) {
    // Load the entity
    if ($entity = _ms_ppv_entity_load_single($record->entity_type, $record->entity_id)) {
      $actions = array();

      // Show a link to add time to the node
      if (!empty($entity->ms_ppv_allow_multiple)) {
        $actions[] = l(t('Add Time'), ms_ppv_field_get_add_to_cart_url($record->entity_type, $record->entity_id, $record->field_name));
      }
      if ($uri = entity_uri($record->entity_type, $entity)) {
        $actions[] = l(t('View'), $uri['path']);
      }
      $label = entity_label($record->entity_type, $entity);

      $rows[] = array(
        ($uri) ? l($label, $uri['path']) : $label,
        ($record->expiration) ? format_date($record->expiration, 'short') : t('N/A'),
        implode($actions, ' | '),
      );
    }
  }

  $output .= theme('table', array('header' => $headers, 'rows' => $rows, 'attributes' => $attr, 'empty' => t('No purchased content.')));
  return $output;
}

/**
 * Get a node record's expiration as a string
 */
function ms_ppv_get_expiration_string($exp) {
  $timeNow = REQUEST_TIME;
  $diff = ($exp - $timeNow) / 86400;
  if ($diff > 0) {
    return round($diff, 1);
  }
  return 0;
}

// ======================================
// Administration Page:
// ======================================


/**
 * Admin Settings Form
 */
function ms_ppv_admin($form, &$form_state) {
  $form['main'] = array(
    '#type' => 'fieldset',
    '#title' => t('Main Settings'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#description' => t("Pay Per View Settings are shown on the Content Type pages and individual nodes."),
  );
  $form['main']['ms_ppv_use_custom_field_settings'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use Per-Node PPV Field Overrides?'),
    '#description' => t("By checking this, fields which use the PPV Display Formatter
      will have new fields added to the widget when editing the node, allowing the user to
      set custom settings for the amount, message, and access period for the node."),
    '#default_value' => variable_get('ms_ppv_use_custom_field_settings', FALSE),
  );
  $form['main']['ms_ppv_fields_allow_multiple'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show quantity widget for fields?'),
    '#description' => t("If this is checked and the field isn't set to an unlimited access period, users will be able to change the quantity when purchasing access."),
    '#default_value' => variable_get('ms_ppv_fields_allow_multiple', TRUE),
  );
  $form['main']['ms_ppv_block_file_access'] = array(
    '#type' => 'checkbox',
    '#title' => t('Restrict file access?'),
    '#description' => t("If this is active, users won't be able to download private files from a node unless they have access to that node."),
    '#default_value' => variable_get('ms_ppv_block_file_access', TRUE),
  );
  /*
  $form['main']['ms_ppv_hide_comments'] = array(
    '#type' => 'checkbox',
    '#title' => t('Hide Comments for Protected Nodes'),
    '#description' => t("If this is enabled, comments will not be shown for a node
      if the user doesn't have access to that node."),
    '#default_value' => variable_get('ms_ppv_hide_comments', FALSE),
  );
  */
  $form['main']['ms_ppv_add_cart_redirect'] = array(
    '#type' => 'select',
    '#title' => t("Add to Cart Redirect"),
    '#description' => t("Choose where the user should be redirected after adding a product to their cart."),
    '#default_value' => variable_get('ms_ppv_add_cart_redirect', 'node'),
    '#options' => array(
      'node' => t("Related Node"),
      'checkout' => t("Checkout"),
      'cart' => t("Cart"),
    )
  );
  $form['main']['ms_ppv_thankyou_node_page'] = array(
    '#type' => 'checkbox',
    '#title' => t("Thankyou Page - Go to Node"),
    '#description' => t("If this is selected, then the user will be redirected to
      the node when the order is complete, instead of seeing the default thank-you page."),
    '#default_value' => variable_get('ms_ppv_thankyou_node_page', FALSE),
  );

  $form['email'] = array(
    '#type' => 'fieldset',
    '#title' => t('Email Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['email']['ms_ppv_expiring_soon_string'] = array(
    '#type' => 'textfield',
    '#title' => t('Expiring soon threshold'),
    '#description' => t("How long before expiration should the expiring soon email be sent? You may use any string accepted by strtotime()."),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_ppv_expiring_soon_string', '3 days'),
  );
  $form['email']['ms_ppv_expiring_soon_mail_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Expiring Soon Mail Subject'),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_ppv_expiring_soon_mail_subject', t("Expiring Soon")),
  );
  $form['email']['ms_ppv_expiring_soon_mail_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Expiring Soon Mail Body'),
    '#description' => t("This email is sent when a user's access is about to expire. Leave blank to not send an email."),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_ppv_expiring_soon_mail_body',
      t("This email is a reminder that your access is expiring soon.

Sincerely,
Site Admin")),
  );
  $form['email']['ms_ppv_expiring_soon_mail_token_help']['tokens'] = array(
    '#theme' => 'token_tree',
    '#token_types' => array('node', 'ms_ppv', 'ms_core_order', 'user'),
    '#dialog' => TRUE,
  );

  $form['integration'] = array(
    '#type' => 'fieldset',
    '#title' => t('Integration Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#description' => t("Provide specific integration for 3rd party modules."),
  );
  $form['integration']['ms_ppv_books_integration'] = array(
    '#type' => 'checkbox',
    '#title' => t('Books Integration'),
    '#description' => t("When this is checked, Books and Pages will be considered one
      entity. This will allow you to sell a book and all pages by simply setting the price
      on the main book node."),
    '#default_value' => variable_get('ms_ppv_books_integration', FALSE),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_mail().
 */
function ms_ppv_mail($key, &$message, $vars) {
  switch ($key) {
    case 'entity_access_expiring':
      $subject = variable_get('ms_ppv_expiring_soon_mail_subject', '');
      $body = variable_get('ms_ppv_expiring_soon_mail_body', '');
      $tokens = array(
        'ms_core_order' => $vars['order'],
        'user' => $vars['account'],
        'ms_ppv' => $vars['access_record'],
        'node' => $vars['node'],
      );

      // Replace the Tokens.
      $message['subject'] = token_replace($subject, $tokens);
      $message['body'][] = token_replace($body, $tokens);
      break;
  }
}

/**
 * Implements hook_token_info().
 * @todo - Use Entity API instead, and migrate.
 */
function ms_ppv_token_info() {
  $types = array(
    'ms_ppv' => array(
      'name' => t('Pay Per View'),
      'description' => t('Pay Per View Variables'),
      'needs-data' => 'ms_ppv',
    ),
    'ms_ppv_field' => array(
      'name' => t('Pay Per View Field'),
      'description' => t('Pay Per View Field Variables'),
      'needs-data' => 'ms_ppv_field',
    ),
  );

  $tokens = array(
    'ms_ppv' => array(
      'addToCartUrl' => array(
        'name' => t('Add to Cart URL'),
        'description' => t("The URL to add the node to the cart"),
      ),
      'addToCartLink' => array(
        'name' => t('Add to Cart Link'),
        'description' => t("The link to add the node to the cart"),
      ),
      'price' => array(
        'name' => t('Price'),
        'description' => t("The price of the node"),
      ),
      'expirationLength' => array(
        'name' => t('Expiration Length'),
        'description' => t("The expiration length for this node"),
      ),
      'nodeTeaser' => array(
        'name' => t('Node Teaser'),
        'description' => t("The node teaser"),
      ),
    ),
    'ms_ppv_field' => array(
      'addToCartUrl' => array(
        'name' => t('Add to Cart URL'),
        'description' => t("The URL to add the field to the cart"),
      ),
      'addToCartLink' => array(
        'name' => t('Add to Cart Link'),
        'description' => t("The link to add the field to the cart"),
      ),
      'amount' => array(
        'name' => t('Price'),
        'description' => t("The view price of the field"),
      ),
      'accessPeriod' => array(
        'name' => t('Access Period'),
        'description' => t("The access period for this field"),
      ),
    ),
  );

  return array('types' => $types, 'tokens' => $tokens);
}

/**
 * Implementation of hook_tokens()
 */
function ms_ppv_tokens($type, $tokens, $data = array(), $options = array()) {
  $replacements = array();

  if ($type == 'ms_ppv' && !empty($data['ms_ppv'])) {
    $object = $data['ms_ppv'];
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'addToCartUrl':
          $replacements[$original] = ms_ppv_get_add_to_cart_url($object->nid, FALSE);
          break;
        case 'addToCartLink':
          $replacements[$original] = ms_ppv_get_add_to_cart_button($object->nid);
          break;
        case 'nodeTeaser':
          $object->ms_ppv_processed = TRUE;
          unset($object->content);
          // Block comments for the teaser
          $object->comment = 0;
          node_build_content($object, 'teaser');
          // Remove all links from the teaser
          unset($object->content['links']);
          $teaser = drupal_render($object->content);
          $replacements[$original] = $teaser;
          break;
        case 'price':
          $replacements[$original] = ms_core_format_money($object->ms_ppv_price);
          break;
        case 'expirationLength':
          $replacements[$original] = ($object->ms_ppv_expiration_string) ? $object->ms_ppv_expiration_string : t('Unlimited Access');
          break;
      }
    }
  }

  if ($type == 'ms_ppv_field' && !empty($data['ms_ppv_field'])) {
    $object = $data['ms_ppv_field'];
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'addToCartUrl':
          $replacements[$original] = ms_ppv_field_get_add_to_cart_url($object->entity_type, $object->entity_id, $object->field_name, FALSE);
          break;
        case 'addToCartLink':
          $replacements[$original] = ms_ppv_field_get_add_to_cart_button($object->entity_type, $object->entity_id, $object->field_name); // @todo - Pass in delta too
          break;
        case 'amount':
          $replacements[$original] = ms_core_format_money($object->amount);
          break;
        case 'accessPeriod':
          $replacements[$original] = ($object->access_period) ? $object->access_period : t('Unlimited Access');
          break;
      }
    }
  }

  return $replacements;
}

// ======================================
// FUNCTIONS
// ======================================


/**
 * Helper Function to insert a node access record into the database
 */
function ms_ppv_insert_access($uid, $nid, $oid = 0, $expiration = 0) {
  $id = db_insert('ms_ppv_access')
  ->fields(array(
    'uid' => $uid,
    'nid' => $nid,
    'oid' => $oid,
    'expiration' => (int) $expiration,
    'created' => REQUEST_TIME,
  ))
  ->execute();

  // Load the variables
  $account = user_load($uid);
  $node = node_load($nid);

  // Provide a hook for other modules to act
  foreach (module_implements('ms_ppv_access_granted') as $module_hook) {
    $hook = $module_hook . '_ms_ppv_access_granted';
    $hook($node, $oid, $expiration, $account);
  }

  return $id;
}

/**
 * Helper Function to remove a node access record into the database
 */
function ms_ppv_delete_access($uid, $nid) {
  $result = db_delete('ms_ppv_access')
  ->condition('uid', $uid)
  ->condition('nid', $nid)
  ->execute();

  // Load the variables
  $account = user_load($uid);
  $node = node_load($nid);

  // Provide a hook for other modules to act
  foreach (module_implements('ms_ppv_access_removed') as $module_hook) {
    $hook = $module_hook . '_ms_ppv_access_removed';
    $hook($node, $account);
  }

  return $result;
}

/**
 * Helper Function to insert a node access record into the database
 */
function ms_ppv_insert_field_access($uid, $entity_type, $entity_id, $field_name, $oid = 0, $expiration = 0, $action = 'view') {
  $id = db_insert('ms_ppv_field_access')
  ->fields(array(
    'uid' => $uid,
    'entity_type' => $entity_type,
    'entity_id' => $entity_id,
    'field_name' => $field_name,
    'oid' => $oid,
    'expiration' => $expiration,
    'created' => REQUEST_TIME,
    'action' => $action,
  ))
  ->execute();

  // Load the variables
  $account = user_load($uid);

  // Provide a hook for other modules to act
  foreach (module_implements('ms_ppv_field_access_granted') as $module_hook) {
    $hook = $module_hook . '_ms_ppv_field_access_granted';
    $hook($entity_type, $entity_id, $field_name, $oid, $expiration, $action, $account);
  }

  return $id;
}

/**
 * Helper Function to remove a node access record into the database
 */
function ms_ppv_delete_field_access($uid, $entity_type, $entity_id, $field_name, $action) {
  $result = db_delete('ms_ppv_field_access')
  ->condition('uid', $uid)
  ->condition('entity_type', $entity_type)
  ->condition('entity_id', $entity_id)
  ->condition('field_name', $field_name)
  ->condition('action', $action)
  ->execute();

  // Load the variables
  $account = user_load($uid);

  // Provide a hook for other modules to act
  foreach (module_implements('ms_ppv_field_access_removed') as $module_hook) {
    $hook = $module_hook . '_ms_ppv_field_access_removed';
    $hook($entity_type, $entity_id, $field_name, $action, $account);
  }

  return $result;
}

/**
 * Returns a field access record or FALSE
 */
function ms_ppv_get_field_access_record($uid, $entity_type, $entity_id, $field_name, $action) {
  $result = db_query("SELECT * FROM {ms_ppv_field_access}
    WHERE uid = :uid AND entity_id = :entity_id AND entity_type = :entity_type
      AND field_name = :field_name AND action = :action",
    array(':uid' => $uid, ':entity_id' => $entity_id, ':entity_type' => $entity_type,
      ':field_name' => $field_name, ':action' => $action));

  foreach ($result as $row) {
    return $row;
  }

  return FALSE;
}

/**
 * Returns a field access record or FALSE
 */
function ms_ppv_get_field_access_record_by_id($id) {
  $result = db_query("SELECT * FROM {ms_ppv_field_access} WHERE id = :id",
    array(':id' => $id));

  foreach ($result as $row) {
    return $row;
  }

  return FALSE;
}

/**
 * Returns a node access record or FALSE
 */
function ms_ppv_get_access_record($uid, $nid) {
  $result = db_query("SELECT * FROM {ms_ppv_access} WHERE uid = :uid AND nid = :nid",
    array(':uid' => $uid, ':nid' => $nid));

  foreach ($result as $row) {
    return $row;
  }

  return FALSE;
}

/**
 * Returns a node access record or FALSE
 */
function ms_ppv_get_access_record_by_id($id) {
  $result = db_query("SELECT * FROM {ms_ppv_access} WHERE id = :id",
    array(':id' => $id));

  foreach ($result as $row) {
    return $row;
  }

  return FALSE;
}

/**
 * Helper Function to load a price for a node
 */
function ms_ppv_load_node_info($vid) {
  $result = db_query("SELECT * FROM {ms_ppv_price} WHERE vid = :vid", array(':vid' => $vid));

  foreach ($result as $row) {
    return $row;
  }

  return FALSE;
}

/**
 * Helper Function to load a price for a node
 */
function ms_ppv_load_node_info_nid($nid) {
  $result = db_query("SELECT * FROM {ms_ppv_price} WHERE nid = :nid", array(':nid' => $nid));

  foreach ($result as $row) {
    return $row;
  }

  return FALSE;
}

/**
 * Helper Function to delete a price for a node
 */
function ms_ppv_delete_node_price($vid) {
  return db_delete('ms_ppv_price')
  ->condition('vid', $vid)
  ->execute();
}

/**
 * Helper Function to insert a price for a node
 */
function ms_ppv_insert_node_price($vid, $nid, $price, $expiration_string, $protected_message, $allow_multiple = TRUE, $stock = 0, $out_of_stock_message = '') {
  ms_ppv_delete_node_price($vid);

  db_insert('ms_ppv_price')
    ->fields(array(
    'vid' => $vid,
    'nid' => $nid,
    'price' => floatval($price),
    'expiration_string' => $expiration_string,
    'allow_multiple' => $allow_multiple,
    'protected_content_message' => $protected_message,
    'stock' => $stock,
    'out_of_stock_message' => $out_of_stock_message,
  ))
  ->execute();
}

/**
 * Helper Function to test if a user has access to a node
 */
function ms_ppv_check_field_access($uid, $entity_type, $entity_id, $field_name, $action) {
  $result = db_query("SELECT * FROM {ms_ppv_field_access}
    WHERE uid = :uid AND entity_id = :entity_id AND entity_type = :entity_type
    AND field_name = :field_name AND action = :action
    AND (expiration = :zero OR expiration > :expiration)",
    array(':uid' => $uid, ':entity_id' => $entity_id, ':entity_type' => $entity_type,
      ':field_name' => $field_name, ':zero' => 0, ':action' => $action,
      ':expiration' => REQUEST_TIME));

  foreach ($result as $row) {
    return !empty($row);
  }

  return FALSE;
}

/**
 * Loads a single entity.
 *
 * @param $entity_type
 *   The entity type.
 * @param $entity_id
 *   The entity id.
 *
 * @return object|bool
 *   The entity object or FALSE.
 */
function _ms_ppv_entity_load_single($entity_type, $entity_id) {
  $entities = entity_load($entity_type, array($entity_id));

  foreach ($entities as $entity) {
    return $entity;
  }

  return FALSE;
}

/**
 * Checks if a user has access to a field
 */
function ms_ppv_has_field_access($uid, $entity_type, $entity_id, $field_name) {
  $account = user_load($uid);
  $entity = _ms_ppv_entity_load_single($entity_type, $entity_id);

  switch ($entity_type) {
    case 'node':
      if (($account->uid == $entity->uid && $account->uid!=0) || user_access('view ms node type ' . $entity->type . ' for free', $account) OR user_access('administer nodes', $account)) {
        return TRUE;
      }
    break;

    case 'user':
      if (($account->uid == $entity->uid && $account->uid!=0) || user_access('administer users', $account)) {
        return TRUE;
      }
    break;
  }

  $access = ms_ppv_check_field_access($uid, $entity_type, $entity_id, $field_name, 'view');
  $block = FALSE;

  // Give other modules a chance to grant access
  $grants = array();
  drupal_alter('ms_ppv_field_access', $grants, $uid, $entity_type, $entity_id, $field_name, 'view');
  foreach ($grants as $grant) {
    if ($grant) {
      $access = TRUE;
    }
    else {
      $block = TRUE;
    }
  }

  return ($access AND !$block);
}

/**
 * Helper Function to test if a user has access to a node
 */
function ms_ppv_check_node_access($uid, $nid) {
  $result = db_query("SELECT * FROM {ms_ppv_access}
    WHERE uid = :uid AND nid = :nid AND (expiration = :zero OR expiration > :expiration)",
    array(':uid' => $uid, ':nid' => $nid, ':zero' => 0, ':expiration' => REQUEST_TIME));

  foreach ($result as $row) {
    return !empty($row);
  }

  return FALSE;
}

/**
 * Helper Function to test if a user has access to a node
 */
function ms_ppv_has_access($uid, $nid) {
  $account = user_load($uid);
  $node = node_load($nid);
  if (($account->uid == $node->uid AND $node->uid!=0) OR user_access('view ms node type ' . $node->type . ' for free', $account) OR user_access('administer nodes', $account)) {
    return TRUE;
  }
  $access = ms_ppv_check_node_access($uid, $nid);
  $block = FALSE;

  // Give other modules a chance to grant access
  $grants = array();
  drupal_alter('ms_ppv_access', $grants, $uid, $nid);
  foreach ($grants as $grant) {
    if ($grant) {
      $access = TRUE;
    }
    else {
      $block = TRUE;
    }
  }

  return ($access AND !$block);
}

/**
 * Gets the html for an add to cart button.
 *
 * @param int $nid
 *   The node id.
 *
 * @return string
 *   The html for the add to cart button.
 */
function ms_ppv_get_add_to_cart_button($nid) {
  $node = node_load($nid);

  if ($node->nid AND isset($node->ms_ppv_price) AND $node->ms_ppv_price) {
    // Create a new product and add it to the order
    $product = ms_core_new_product($node->title, 'ms_ppv', $node->nid, $node->ms_ppv_price);

    $time = strtotime($node->ms_ppv_expiration_string);
    if ($time) {
      $product->recurring_schedule['main_amount'] = $node->ms_ppv_price;
      $product->recurring_schedule['main_length'] = round($time / 86400);
      $product->recurring_schedule['main_unit'] = 'D';
    }

    // Store the custom data
    $product->data = array(
      'nid' => $node->nid,
      'recurring_optional' => $time > 0,
      'expiration_string' => $node->ms_ppv_expiration_string,
      'messages' => array(
        t('Access to view !link has been granted.', array('!link' => l($node->title, 'node/' . $node->nid))),
      ),
      'allow_multiple' => ($node->ms_ppv_allow_multiple) ? TRUE : FALSE,
    );

    // Add the custom thankyou page redirect to the node if the setting is set
    if (variable_get('ms_ppv_thankyou_node_page', FALSE)) {
      $product->data['thankyou_path'] = 'node/' . $node->nid;
    }

    switch (variable_get('ms_ppv_add_cart_redirect', 'node')) {
      case 'checkout':
        $product->data['cart_redirect'] = 'ms/checkout';
        break;
      case 'cart':
        $product->data['cart_redirect'] = 'ms/cart';
        break;
    }

    return ms_core_get_add_to_cart_button($product);
  }

  return FALSE;
}

/**
 * Helper Function to get an add to cart url
 */
function ms_ppv_field_get_add_to_cart_url($entity_type, $entity_id, $field_name, $redirect = TRUE) {
  drupal_alter('ms_ppv_field_add_to_cart', $entity_type, $entity_id, $field_name);
  $path = drupal_get_destination();
  if ($redirect) {
    switch (variable_get('ms_ppv_add_cart_redirect', 'node')) {
      case 'node':
        $path = drupal_get_destination();
        break;
      case 'checkout':
        $path = array('destination' => 'ms/checkout');
        break;
      case 'cart':
        $path = array('destination' => 'ms/cart');
        break;
    }
  }
  return url('ms_ppv/field/' . $entity_type . '/' . $entity_id . '/' . $field_name, array('absolute' => TRUE, 'query' => $path));
}

/**
 * Helper Function to get an add to cart button for the field
 */
function ms_ppv_field_get_add_to_cart_button($entity_type, $entity_id, $field_name, $delta = 0) {
  // Load the entity
  if ($entity = _ms_ppv_entity_load_single($entity_type, $entity_id)) {
    if ($instance = field_info_instance($entity_type, $field_name, $entity->type)) {
      foreach ($instance['display'] as $display) {
        if ($display['type'] == 'ms_ppv_field_formatter' AND $display['module'] == 'ms_ppv') {
          $amount = $display['settings']['amount'];
          $access_period = $display['settings']['access_period'];

          // Check for field overrides
          if (variable_get('ms_ppv_use_custom_field_settings', FALSE)) {
            list($entity_id, $vid) = entity_extract_ids($entity_type, $entity);
            if ($record = ms_ppv_get_custom_field_access_record($vid, $entity_type, $entity_id, $instance['field_name'], 0)) {
              // Override the default amounts
              $amount = $record->amount;
              $access_period = $record->access_period;
            }
          }
        }
      }
    }
    else {
      if (module_exists('field_group')) {
        // This might be a group, let's try checking for it
        $groups = field_group_read_groups();
        if (isset($groups[$entity_type][$entity->type])) {
          foreach ($groups[$entity_type][$entity->type] as $entity_groups) {
            if (isset($entity_groups[$field_name]) && ($group = $entity_groups[$field_name]) && $group->format_type == 'ms_ppv_fieldset') {
              $amount = $group->format_settings['instance_settings']['amount'];
              $access_period = $group->format_settings['instance_settings']['access_period'];
            }
          }
        }
      }
    }

    // Add a check here to make sure the user can purchase the access
    if (!user_access('purchase ms nodes')) {
      return t('You do not have access to purchase.');
    }
    if (!isset($amount) OR !isset($access_period)) {
      return t('This content is not eligible for Pay Per View.');
    }
    if (!ms_ppv_node_is_in_stock($entity)) {
      return t('Out of stock.');
    }

    // Figure out what to call the product
    switch ($entity_type) {
      case 'node':
        $title = t('View @name of @content', array(
          '@name' => isset($instance['label']) ? $instance['label'] : !empty($group) ? $group->label : '',
          '@content' => $entity->title,
        ));
        break;

      case 'user':
        $title = t('View @name of @content', array(
          '@name' => $instance['label'],
          '@content' => $entity->name,
        ));
        break;

      default:
        $title = t('View @name of @content', array(
          '@name' => $instance['label'],
          '@content' => $entity_type,
        ));
        break;
    }

    // Use both the entity type and the entity id as the id
    $product = ms_core_new_product($title, 'ms_ppv_field', $entity_type . '/' . $entity_id . '/' . $field_name, $amount);

    $time = !empty($access_period) ? strtotime($access_period) : 0;
    if ($time) {
      $product->recurring_schedule['main_amount'] = $amount;
      $product->recurring_schedule['main_length'] = round($time / 86400);
      $product->recurring_schedule['main_unit'] = 'D';
    }

    // Store the custom data
    $product->data = array(
      'recurring_optional' => $time > 0,
      'entity_type' => $entity_type,
      'entity_id' => $entity_id,
      'field_name' => $field_name,
      'access_period' => !empty($access_period) ? $access_period : '',
      'allow_multiple' => (!empty($access_period) && variable_get('ms_ppv_fields_allow_multiple', TRUE)) ? TRUE : FALSE,
    );

    switch (variable_get('ms_ppv_add_cart_redirect', 'node')) {
      case 'checkout':
        $product->data['cart_redirect'] = 'ms/checkout';
        break;
      case 'cart':
        $product->data['cart_redirect'] = 'ms/cart';
        break;
    }

    return ms_core_get_add_to_cart_button($product);
  }
  return '';
}

/**
 * Helper Function to get an add to cart button
 */
function ms_ppv_get_add_to_cart_url($nid, $redirect = TRUE) {
  $node = node_load($nid);
  drupal_alter('ms_ppv_add_to_cart', $nid, $node);
  $path = drupal_get_destination();
  if ($redirect) {
    switch (variable_get('ms_ppv_add_cart_redirect', 'node')) {
      case 'node':
        $path = drupal_get_destination();
        break;
      case 'checkout':
        $path = array('destination' => 'ms/checkout');
        break;
      case 'cart':
        $path = array('destination' => 'ms/cart');
        break;
    }

    return url('ms_ppv/purchase/' . $nid, array('absolute' => TRUE, 'query' => $path));
  }
  return url('ms_ppv/purchase/' . $nid, array('absolute' => TRUE));
}

/**
 * Implements hook_node_load().
 */
function ms_ppv_node_load($nodes, $types) {
  foreach ($nodes as $nid => $node) {
    $nodes[$nid]->ms_ppv_protected = FALSE;
    $defaults = ms_ppv_get_type_defaults($nodes[$nid]->type);
    if ($node_info = ms_ppv_load_node_info($nodes[$nid]->vid)) {
      $nodes[$nid]->ms_ppv_protected = TRUE;
      $nodes[$nid]->ms_ppv_price = $node_info->price;
      $nodes[$nid]->ms_ppv_expiration_string = $node_info->expiration_string;
      $nodes[$nid]->ms_ppv_allow_multiple = $node_info->allow_multiple;
      $nodes[$nid]->ms_ppv_protected_content_message = $node_info->protected_content_message;
      $nodes[$nid]->ms_ppv_stock = $node_info->stock;
      $nodes[$nid]->ms_ppv_out_of_stock_message = $node_info->out_of_stock_message;
    }
    elseif ($defaults['active']) {
      $nodes[$nid]->ms_ppv_protected = TRUE;
      $nodes[$nid]->ms_ppv_price = $defaults['price'];
      $nodes[$nid]->ms_ppv_expiration_string = $defaults['expiration_string'];
      $nodes[$nid]->ms_ppv_allow_multiple = $defaults['allow_multiple'];
      $nodes[$nid]->ms_ppv_protected_content_message = $defaults['protected_content_message'];
      $nodes[$nid]->ms_ppv_stock = $defaults['stock'];
      $nodes[$nid]->ms_ppv_out_of_stock_message = $defaults['out_of_stock_message'];
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function ms_ppv_node_delete($node) {
  db_delete('ms_ppv_price')
    ->condition('vid', $node->vid)
    ->execute();
  db_delete('ms_ppv_access')
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * Implements hook_node_insert().
 */
function ms_ppv_node_insert($node) {
  if (!empty($node->ms_ppv_use_override)) {
    ms_ppv_insert_node_price($node->vid, $node->nid, $node->ms_ppv_price, $node->ms_ppv_expiration_string, $node->ms_ppv_protected_content_message, $node->ms_ppv_allow_multiple, $node->ms_ppv_stock, $node->ms_ppv_out_of_stock_message);
  }
  else {
    // Delete any existing records
    ms_ppv_delete_node_price($node->vid, $node->nid);
  }
}

/**
 * Implements hook_node_update().
 */
function ms_ppv_node_update($node) {
  if ((isset($node->ms_ppv_use_override) AND $node->ms_ppv_use_override) OR (!isset($node->ms_ppv_use_override) AND ms_ppv_load_node_info_nid($node->nid))) {
    ms_ppv_insert_node_price($node->vid, $node->nid, $node->ms_ppv_price, $node->ms_ppv_expiration_string, $node->ms_ppv_protected_content_message, $node->ms_ppv_allow_multiple, $node->ms_ppv_stock, $node->ms_ppv_out_of_stock_message);
  }
  else {
    // Delete any existing records
    ms_ppv_delete_node_price($node->vid, $node->nid);
  }
}

/**
 * Checks if a node is in stock.
 *
 * @param object $node
 *   The node object.
 *
 * @return bool
 *   TRUE if the node is in stock, FALSE otherwise.
 */
function ms_ppv_node_is_in_stock($node) {
  // Check if it is out of stock first.
  $count = db_select('ms_ppv_access', 'm')
    ->fields('m')
    ->condition('m.nid', $node->nid)
    ->condition('m.status', 1)
    ->execute()
    ->rowCount();

  return !empty($node->ms_ppv_stock) ? $node->ms_ppv_stock == 0 || $count < $node->ms_ppv_stock : TRUE;
}

/**
 * Implements hook_node_view().
 */
function ms_ppv_node_view($node, $view_mode = 'full') {
  global $user;
  $protected_html=array('value'=>'','format'=>NULL);
  if (isset($node->ms_ppv_protected) AND $node->ms_ppv_protected) {
    if ((isset($node->ms_ppv_processed) AND $node->ms_ppv_processed) OR ms_ppv_has_access($user->uid, $node->nid)) {
      // The user has access
    }
    else {
      // Check if it is out of stock first.
      if ($node->ms_ppv_stock > 0 && !ms_ppv_node_is_in_stock($node)) {
        // Show the out of stock message.
        $protected_html['value'] = $node->ms_ppv_out_of_stock_message;
      }
      else {
        // Show the message and purchase link
        $protected_html = $node->ms_ppv_protected_content_message;
      }

      // Replace the Tokens
      $protected_html = check_markup(token_replace($protected_html['value'],
        array(
          'ms_ppv' => $node,
          'node' => $node,
        ))
        ,$protected_html['format']);

      if ($protected_html != 'FULL') {
        // Unset the content field
        unset($node->content);

        $node->content['ms_ppv_protect_message'] = array(
          '#markup' => $protected_html,
        );
      }

      // Hide the comments too if set
      if (variable_get('ms_ppv_hide_comments', FALSE)) {
        //unset($node->comments); // Comments are already hidden, this isn't needed
      }
    }
  }
}

/**
 * Helper function to supply some defaults for a type
 */
function ms_ppv_get_type_defaults($type) {
  return array(
    'active' => variable_get('ms_ppv_active_' . $type, ''),
    'price' => (float) variable_get('ms_ppv_price_' . $type, ''),
    'expiration_string' => variable_get('ms_ppv_expiration_string_' . $type, ''),
    'allow_multiple' => variable_get('ms_ppv_allow_multiple_' . $type, ''),
    'protected_content_message' => variable_get('ms_ppv_protected_content_message_' . $type, array('value'=>t('You must purchase this content before you may view it.
<br /><br />
Get Access: [ms_ppv:price] for [ms_ppv:expirationLength] - [ms_ppv:addToCartLink]
<br /><br />
Teaser:
<br /><br />
[ms_ppv:nodeTeaser]'),'format'=>NULL)),
    'stock' => variable_get('ms_ppv_stock_' . $type, 0),
    'out_of_stock_message' => variable_get('ms_ppv_out_of_stock_message_' . $type, ''),
  );
}

/**
 * Implements hook_form_alter().
 */
function ms_ppv_form_alter(&$form, $form_state, $form_id) {
  // Sometimes the node edit form is a unique form name
  if (isset($form['#node_edit_form']) AND $form['#node_edit_form']) {
    $form_id = 'node-form';
  }
  switch ($form_id) {
    case 'node-form':
      if (user_access('set ms nodes pricing')) {
        if (variable_get('ms_ppv_active_' . $form['#node']->type, FALSE)) {
          $defaults = ms_ppv_get_type_defaults($form['#node']->type);
          $override = isset($form['#node']->vid) ? ms_ppv_load_node_info($form['#node']->vid) : FALSE;

          if (isset($form['#node']->nid) AND $form['#node']->nid) {
            $defaults['price'] = $form['#node']->ms_ppv_price;
            $defaults['expiration_string'] = $form['#node']->ms_ppv_expiration_string;
            $defaults['allow_multiple'] = $form['#node']->ms_ppv_allow_multiple;
            $defaults['protected_content_message'] = $form['#node']->ms_ppv_protected_content_message;
            $defaults['stock'] = $form['#node']->ms_ppv_stock;
            $defaults['out_of_stock_message'] = $form['#node']->ms_ppv_out_of_stock_message;
          }
          $form['ms_ppv'] = array(
            '#type' => 'fieldset',
            '#title' => t('Pay Per View'),
            '#collapsed' => $override ? FALSE : TRUE,
            '#collapsible' => TRUE,
            '#group' => 'additional_settings',
          );

          $form['ms_ppv']['ms_ppv_use_override'] = array(
            '#type' => 'checkbox',
            '#title' => t('Override Content Type Settings?'),
            '#description' => t('Check this box to set specific settings for this content.'),
            '#default_value' => $override ? TRUE : FALSE,
          );
          $form['ms_ppv']['ms_ppv_price'] = array(
            '#type' => 'textfield',
            '#title' => t('View Price'),
            '#description' => t('Enter a price here to make this node only viewable once it has been purchased. Leave blank to make the node always viewable.'),
            '#default_value' => $defaults['price'],
          );
          $form['ms_ppv']['ms_ppv_expiration_string'] = array(
            '#type' => 'textfield',
            '#title' => t('Expiration'),
            '#description' => t("How long will the user have access to the node?
              Enter a number and a unit, like so: '1 month', '10 days', '2 years',
              etc. Leave blank for no expiration. To set an exact date that access
              to this content will expire, enter the full date, such as 'March 25, 2012'."),
            '#default_value' => $defaults['expiration_string'],
          );
          $form['ms_ppv']['ms_ppv_allow_multiple'] = array(
            '#type' => 'checkbox',
            '#title' => t('Allow Multiple?'),
            '#description' => t("If checked, allows users to purchase multiple time
              chunks of this content, so if the Expiration setting above were '1 day',
              the user could buy 2 of these during checkout to get access for 2 days.
              If using an absolute date, this is best left unchecked."),
            '#default_value' => $defaults['allow_multiple'],
          );
          $form['ms_ppv']['ms_ppv_stock'] = array(
            '#type' => 'textfield',
            '#title' => t('Stock'),
            '#description' => t("How many active purchases can this content have before it is 'out of stock'. Enter 0 for unlimited stock."),
            '#default_value' => $defaults['stock'],
          );
          $form['ms_ppv']['ms_ppv_out_of_stock_message'] = array(
            '#type' => 'textarea',
            '#title' => t('Out of Stock Message'),
            '#description' => t("Enter the message you want to show on content after it is out of stock."),
            '#required' => FALSE,
            '#default_value' => $defaults['out_of_stock_message'],
          );
          $form['ms_ppv']['ms_ppv_protected_content_message'] = array(
            '#type' => 'text_format',
            '#title' => t('Protected Content Message'),
            '#description' => t("Enter the message you want to show on protected content."),
            '#required' => FALSE,
            '#default_value' => isset($defaults['protected_content_message']['value'])?$defaults['protected_content_message']['value']:'',
            '#format' => isset($defaults['protected_content_message']['format'])?$defaults['protected_content_message']['format']:'',
          );
          $form['ms_ppv']['ms_ppv_protected_content_message_token_help']['tokens'] = array(
            '#theme' => 'token_tree',
            '#token_types' => array('ms_ppv', 'user', 'node'),
            '#dialog' => TRUE,
          );
        }
      }
      break;

    case 'node_type_form':
      //Add the stuff to the content type settings
      if (user_access('set ms nodes pricing')) {
        $defaults = ms_ppv_get_type_defaults($form['#node_type']->type);
        $form['ms_ppv'] = array(
          '#type' => 'fieldset',
          '#title' => t('Pay Per View Settings'),
          '#collapsible' => TRUE,
          '#collapsed' => !$defaults['active'],
          '#group' => 'additional_settings',
        );

        $form['ms_ppv']['ms_ppv_active'] = array(
          '#type' => 'checkbox',
          '#title' => t('Activate Pay Per View'),
          '#description' => t('Check this box to activate Pay Per View functionality for this Content Type.'),
          '#default_value' => $defaults['active'],
        );
        $form['ms_ppv']['ms_ppv_price'] = array(
          '#type' => 'textfield',
          '#title' => t('View Price'),
          '#description' => t('Enter a price here to make this node only viewable once it has been purchased. Leave blank to make the node always viewable.'),
          '#default_value' => $defaults['price'],
        );
        $form['ms_ppv']['ms_ppv_expiration_string'] = array(
          '#type' => 'textfield',
          '#title' => t('Expiration'),
          '#description' => t("How long will the user have access to the node?
              Enter a number and a unit, like so: '1 month', '10 days', '2 years',
              etc. Leave blank for no expiration. To set an exact date that access
              to this content will expire, enter the full date, such as 'March 25, 2012'."),
          '#default_value' => $defaults['expiration_string'],
        );
        $form['ms_ppv']['ms_ppv_allow_multiple'] = array(
          '#type' => 'checkbox',
          '#title' => t('Allow Multiple?'),
          '#description' => t("If checked, allows users to purchase multiple time
            chunks of this content, so if the Expiration setting above were '1 day',
            the user could buy 2 of these during checkout to get access for 2 days.
            If using an absolute date, this is best left unchecked."),
          '#default_value' => $defaults['allow_multiple'],
        );
        $form['ms_ppv']['ms_ppv_stock'] = array(
          '#type' => 'textfield',
          '#title' => t('Stock'),
          '#description' => t("How many active purchases can this content have before it is 'out of stock'."),
          '#default_value' => $defaults['stock'],
        );
        $form['ms_ppv']['ms_ppv_out_of_stock_message'] = array(
          '#type' => 'textarea',
          '#title' => t('Out of Stock Message'),
          '#description' => t("Enter the message you want to show on content after it is out of stock."),
          '#required' => FALSE,
          '#default_value' => $defaults['out_of_stock_message'],
        );
        $form['ms_ppv']['ms_ppv_protected_content_message'] = array(
          '#type' => 'text_format',
          '#title' => t('Protected Content Message'),
          '#description' => t("Enter the message you want to show on protected content."),
          '#required' => FALSE,
          '#default_value' => isset($defaults['protected_content_message']['value']) ? $defaults['protected_content_message']['value']:'',
          '#format' => isset($defaults['protected_content_message']['format']) ? $defaults['protected_content_message']['format'] : '',
        );
        $form['ms_ppv']['ms_ppv_protected_content_message_token_help']['tokens'] = array(
          '#theme' => 'token_tree',
          '#token_types' => array('ms_ppv', 'user', 'node'),
          '#dialog' => TRUE,
        );
      }
      break;
    
    default:
      //drupal_set_message($form_id);
      break;
  }
}

/**
 * Implements hook_user_cancel().
 */
function ms_ppv_user_cancel($edit, $account, $method) {
  $result = db_delete('ms_ppv_access')
    ->condition('uid', $account->uid)
    ->execute();
  return $result;
}

/**
 * Implements hook_ms_products().
 */
function ms_ppv_ms_products() {
  $products = array();

  $nids = array();

  // First get all nodes that belong to a content type where PPV is active.
  foreach (array_keys(node_type_get_types()) as $type) {
    if (variable_get('ms_ppv_active_' . $type, FALSE)) {
      $result = db_query("SELECT * FROM {node} WHERE type = :type", array(':type' => $type));

      foreach ($result as $row) {
        $nids[$row->nid] = $row->nid;
      }
    }
  }

  // Then get all custom prices and add them in.
  $result = db_query("SELECT * FROM {ms_ppv_price} ORDER BY nid ASC");

  foreach ($result as $row) {
    $nids[$row->nid] = $row->nid;
  }

  foreach ($nids as $nid) {
    $node = node_load($nid);

    // Create a new product and add it to the order
    $product = ms_core_new_product($node->title, 'ms_ppv', $node->nid, $node->ms_ppv_price);

    $time = strtotime($node->ms_ppv_expiration_string);
    if ($time) {
      $product->recurring_schedule['main_amount'] = $node->ms_ppv_price;
      $product->recurring_schedule['main_length'] = round($time / 86400);
      $product->recurring_schedule['main_unit'] = 'D';
    }

    // Add the product variables
    $product->owner = $node->uid;
    $product->module_title = t('Pay Per View');
    $product->type = 'cart';
    $product->data = array(
      'recurring_optional' => $time > 0,
      'nid' => $node->nid,
      'expiration_string' => $node->ms_ppv_expiration_string,
      'allow_multiple' => ($node->ms_ppv_allow_multiple) ? TRUE : FALSE,
    );

    // Add the custom thankyou page redirect to the node if the setting is set
    if (variable_get('ms_ppv_thankyou_node_page', FALSE)) {
      $product->data['thankyou_path'] = 'node/' . $node->nid;
    }

    $product->edit_path = 'node/' . $node->nid . '/edit';
    $product->purchase_path = 'ms_ppv/purchase/' . $node->nid;

    $products[$product->id] = $product;
  }

  return $products;
}

// ======================================
// PAGES
// ======================================


/**
 * Add a node to the cart
 */
function ms_ppv_add_to_cart($nid) {
  // Load the node
  $node = node_load($nid);

  if ($node->nid AND isset($node->ms_ppv_price) AND $node->ms_ppv_price) {
    // Create a new product and add it to the order
    $product = ms_core_new_product($node->title, 'ms_ppv', $node->nid, $node->ms_ppv_price);

    $time = strtotime($node->ms_ppv_expiration_string);
    if ($time) {
      $product->recurring_schedule['main_amount'] = $node->ms_ppv_price;
      $product->recurring_schedule['main_length'] = round($time / 86400);
      $product->recurring_schedule['main_unit'] = 'D';
    }

    // Store the custom data
    $product->data = array(
      'recurring_optional' => $time > 0,
      'nid' => $node->nid,
      'expiration_string' => $node->ms_ppv_expiration_string,
      'allow_multiple' => ($node->ms_ppv_allow_multiple) ? TRUE : FALSE,
    );

    // Add the custom thankyou page redirect to the node if the setting is set
    if (variable_get('ms_ppv_thankyou_node_page', FALSE)) {
      $product->data['thankyou_path'] = 'node/' . $node->nid;
    }

    ms_core_add_cart_product($product, TRUE);

    drupal_goto('ms/cart');
  }
  else {
    return t('This content is not eligible for Pay Per View.');
  }
}

/**
 * Add a field to the cart
 */
function ms_ppv_field_add_to_cart($entity_type, $entity_id, $field_name) {
  // Load the entity
  $access_period = '';
  if ($entity = _ms_ppv_entity_load_single($entity_type, $entity_id)) {

    if ($instance = field_info_instance($entity_type, $field_name, $entity->type)) {
      foreach ($instance['display'] as $display) {
        if ($display['type'] == 'ms_ppv_field_formatter' AND $display['module'] == 'ms_ppv') {
          $amount = $display['settings']['amount'];
          $access_period = $display['settings']['access_period'];

          // Check for field overrides
          if (variable_get('ms_ppv_use_custom_field_settings', FALSE)) {
            list($entity_id, $vid) = entity_extract_ids($entity_type, $entity);
            if ($record = ms_ppv_get_custom_field_access_record($vid, $entity_type, $entity_id, $instance['field_name'], 0)) {
              // Override the default amounts
              $amount = $record->amount;
              $access_period = $record->access_period;
            }
          }
        }
      }
    }
    else {
      if (module_exists('field_group')) {
        // This might be a group, let's try checking for it
        $groups = field_group_read_groups();

        if (isset($groups[$entity_type][$entity->type])) {
          foreach ($groups[$entity_type][$entity->type] as $entity_groups) {
            if (isset($entity_groups[$field_name]) AND $group = $entity_groups[$field_name]) {
              $amount = $group->format_settings['instance_settings']['amount'];
              $access_period = $group->format_settings['instance_settings']['access_period'];
              break;
            }
          }
        }
      }
    }

    if (!isset($amount) OR !isset($access_period)) {
      return t('This content is not eligible for Pay Per View.');
    }

    // Figure out what to call the product
    switch ($entity_type) {
      case 'node':
        $title = t('View @name of @content', array(
          '@name' => isset($instance['label']) ? $instance['label'] : !empty($group) ? $group->label : '',
          '@content' => $entity->title,
        ));
        break;

      case 'user':
        $title = t('View @name of @content', array(
          '@name' => $instance['label'],
          '@content' => $entity->name,
        ));
        break;

      default:
        $title = t('View @name of @content', array(
          '@name' => $instance['label'],
          '@content' => $entity_type,
        ));
        break;
    }

    // Use both the entity type and the entity id as the id
    $product = ms_core_new_product($title, 'ms_ppv_field', $entity_type . '/' . $entity_id . '/' . $field_name, $amount);

    $time = strtotime($access_period);
    if ($time) {
      $product->recurring_schedule['main_amount'] = $amount;
      $product->recurring_schedule['main_length'] = round($time / 86400);
      $product->recurring_schedule['main_unit'] = 'D';
    }

    // Store the custom data
    $product->data = array(
      'recurring_optional' => $time > 0,
      'entity_type' => $entity_type,
      'entity_id' => $entity_id,
      'field_name' => $field_name,
      'access_period' => $access_period,
      'allow_multiple' => ($access_period) ? TRUE : FALSE,
    );

    // Add the custom thankyou page redirect to the node if the setting is set
    if (variable_get('ms_ppv_thankyou_node_page', FALSE)) {
      if ($uri = entity_uri($entity_type, $entity)) {
        $product->data['thankyou_path'] = $uri['path'];
      }
    }

    ms_core_add_cart_product($product, TRUE);

    drupal_goto('ms/cart');
  }
  else {
    return t('This content is not eligible for Pay Per View.');
  }
}

/**
 * Implements hook_ms_order_payment().
 */
function ms_ppv_ms_order_payment($type, $product, $order, $payment) {
  switch ($product->module) {
    case 'ms_ppv_field':
      switch ($type) {
        case 'refund':
        case 'reversal':
          // Mark the record as inactive.
          if ($ms_field = ms_ppv_get_field_access_record($order->uid, $product->data['entity_type'], $product->data['entity_id'], $product->data['field_name'], 'view')) {
            ms_ppv_delete_field_access($order->uid, $product->data['entity_type'], $product->data['entity_id'], $product->data['field_name'], 'view');
          }
          break;

        case "cart":
        case "rec_signup":
          $now = time();
          // Load the user account
          $account = user_load($order->uid);

          // Set some variables
          $entity_type = $product->data['entity_type'];
          $entity_id = $product->data['entity_id'];
          $field_name = $product->data['field_name'];
          $access_period = $product->data['access_period'];

          // Check if there is already a record for this node and user
          if ($ms_field = ms_ppv_get_field_access_record($account->uid, $entity_type, $entity_id, $field_name, 'view')) {
            // Remove any access records that may have been there
            ms_ppv_delete_field_access($account->uid, $entity_type, $entity_id, $field_name, 'view');

            $now = REQUEST_TIME;

            // Get the expiration date
            $expiration = ($access_period) ? strtotime($access_period, $now) : 0;

            $expiration -= $now;
            $expiration *= $product->qty;
            $expiration += $now;

            // Add the time to the record if the user still has access
            if ($expiration AND $ms_field->expiration > $now) {
              $expiration += $ms_field->expiration;
            }

            // Add an access record
            ms_ppv_insert_field_access($account->uid, $entity_type, $entity_id, $field_name, $order->oid, $expiration);
          }
          else {
            // Get the expiration date
            $expiration = ($access_period) ? strtotime($access_period, $now) : 0;

            $expiration -= $now;
            $expiration *= $product->qty;
            $expiration += $now;

            // Add an access record
            ms_ppv_insert_field_access($account->uid, $entity_type, $entity_id, $field_name, $order->oid, $expiration);
          }
          break;
      }
      break;

    case 'ms_ppv':
      switch ($type) {
        case 'refund':
        case 'reversal':
          // Mark the record as inactive.
          if ($ms_node = ms_ppv_get_access_record($order->uid, $product->data['nid'])) {
            ms_ppv_delete_access($order->uid, $product->data['nid']);
          }
          break;

        case "cart":
        case "rec_signup":
          $now = time();
          // Load the user account
          $account = user_load($order->uid);

          // Load the node
          $node = node_load($product->data['nid']);

          // Check if there is already a record for this node and user
          if ($ms_node = ms_ppv_get_access_record($account->uid, $node->nid)) {
            // Remove any access records that may have been there
            ms_ppv_delete_access($account->uid, $node->nid);

            $now = REQUEST_TIME;

            // Get the expiration date
            $expiration = ($product->data['expiration_string']) ? strtotime($product->data['expiration_string'], $now) : 0;

            $expiration -= $now;
            $expiration *= $product->qty;
            $expiration += $now;

            // Add the time to the record if the user still has access
            if ($expiration AND $ms_node->expiration > $now) {
              $expiration += $ms_node->expiration;
            }

            // Add an access record
            ms_ppv_insert_access($account->uid, $node->nid, $order->oid, $expiration);
          }
          else {
            // Get the expiration date
            $expiration = ($product->data['expiration_string']) ? strtotime($product->data['expiration_string'], $now) : 0;

            $expiration -= $now;
            $expiration *= $product->qty;
            $expiration += $now;

            // Add an access record
            ms_ppv_insert_access($account->uid, $node->nid, $order->oid, $expiration);
          }
          break;
      }
      break;
  }
}

// ======================================
// RULES
// ======================================

/**
 * Implementation of hook_ms_ppv_field_access_granted().
 */
function ms_ppv_ms_ppv_field_access_granted($entity_type, $entity_id, $field_name, $oid, $expiration, $action, $account) {
  if (module_exists('rules')) {
    $order = ms_core_order_load($oid);
    rules_invoke_event('ms_ppv_event_field_access_granted', $entity_type, $entity_id, $field_name, $order, $expiration, $account);
  }
}

/**
 * Implementation of hook_ms_ppv_field_access_removed().
 */
function ms_ppv_ms_ppv_field_access_removed($entity_type, $entity_id, $field_name, $oid, $expiration, $action, $account) {
  if (module_exists('rules')) {
    $order = ms_core_order_load($oid);
    rules_invoke_event('ms_ppv_event_field_access_removed', $entity_type, $entity_id, $field_name, $order, $expiration, $account);
  }
}

/**
 * Implementation of hook_ms_ppv_access_granted().
 */
function ms_ppv_ms_ppv_access_granted($node, $oid, $expiration, $account) {
  if (module_exists('rules')) {
    $order = ms_core_order_load($oid);
    rules_invoke_event('ms_ppv_event_access_granted', $node, $order, $expiration, $account);
  }
}

/**
 * Implementation of hook_ms_ppv_access_removed().
 */
function ms_ppv_ms_ppv_access_removed($node, $account) {
  if (module_exists('rules')) {
    rules_invoke_event('ms_ppv_event_access_removed', $node, $account);
  }
}

// ======================================
// FIELDS
// ======================================

/**
 * Implements hook_field_formatter_info().
 */
function ms_ppv_field_formatter_info() {
  // Get a list of all field types
  $field_types = field_info_field_types();
  return array(
    'ms_ppv_field_formatter' => array(
      'label' => t('Pay Per View'),
      'field types' => array_keys($field_types),
      'settings'  => array(
        'amount' => '0',
        'access_period' => '',
        'access_display' => 'default',
        'message' => 'This field is premium only. Please pay [ms_ppv_field:amount] to have access for [ms_ppv_field:accessPeriod] : [ms_ppv_field:addToCartLink]',
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function ms_ppv_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element = array();

  $element['amount'] = array(
    '#type' => 'textfield',
    '#title' => t('Amount'),
    '#description' => t('How much the user will have to pay to view this field.'),
    '#default_value' => $settings['amount'],
  );
  $element['access_period'] = array(
    '#type' => 'textfield',
    '#title' => t('Access Period'),
    '#description' => t('How long will the user have access to the field once he has paid. Leave blank for unlimited access.'),
    '#default_value' => $settings['access_period'],
  );
  $element['access_display'] = array(
    '#type' => 'radios',
    '#title' => t('Access Display'),
    '#description' => t('What should be shown if the user has access?'),
    '#options' => array(
      'nothing' => t('Nothing'),
      'default' => t('Default Display'),
    ),
    '#default_value' => $settings['access_display'],
  );
  $element['message'] = array(
    '#type' => 'text_format',
    '#title' => t('Protected Message'),
    '#description' => t("Enter a message that will show if the user doesn't have access to this field.
      You may use the tokens below to add a link to 'add to cart', among other things."),
    '#default_value' => isset($settings['message']['value'])?$settings['message']['value']:'',
    '#format' => isset($settings['message']['format'])?$settings['message']['format']:'',
  );
  $element['message_token_help']['tokens'] = array(
    '#theme' => 'token_tree',
    '#token_types' => array('ms_ppv_field', 'user'),
    '#dialog' => TRUE,
  );
  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function ms_ppv_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = t('This field must be paid for before it can be viewed. Amount: @amount Access: @access_period', array(
    '@amount' => $settings['amount'],
    '@access_period' => ($settings['access_period']) ? $settings['access_period'] : t('Unlimited'),
  ));
  return $summary;
}

/**
 * Implements hook_field_display_alter().
 */
function ms_ppv_field_display_alter(&$display, $context) {
  if ($display['type'] == 'ms_ppv_field_formatter' AND $display['module'] == 'ms_ppv') {
    // Check if the user has paid to see this field
    list($entity_id) = entity_extract_ids($context['entity_type'], $context['entity']);
    global $user;
    if (ms_ppv_has_field_access($user->uid, $context['entity_type'], $entity_id, $context['field']['field_name'])) {
      // Since the user has access, we are going to use the formatter specified in the default display
      $display['settings']['access_display'] = isset($display['settings']['access_display']) ? $display['settings']['access_display'] : 'default';
      if ($display['settings']['access_display'] == 'nothing') {
        $display = '';
      }
      else {
        if (isset($context['instance']['display'][$display['settings']['access_display']])) {
          $display = $context['instance']['display'][$display['settings']['access_display']];
        }
        else {
          $display = '';
        }
      }
    }
  }
}

/**
 * Implements hook_field_formatter_view().
 */
function ms_ppv_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];
  list($entity_id) = entity_extract_ids($entity_type, $entity);
  global $user;

  $ms_ppv_field = new stdClass();
  $ms_ppv_field->amount = $settings['amount'];
  $ms_ppv_field->access_period = $settings['access_period'];
  $ms_ppv_field->message = $settings['message'];
  $ms_ppv_field->entity_type = $entity_type;
  $ms_ppv_field->entity_id = $entity_id;
  $ms_ppv_field->field_name = $instance['field_name'];

  switch ($display['type']) {
    case 'ms_ppv_field_formatter':
      foreach ($items as $delta => $item) {
        list($entity_id, $vid) = entity_extract_ids($instance['entity_type'], $entity);
        if (!ms_ppv_has_field_access($user->uid, $instance['entity_type'], $entity_id, $instance['field_name'])) {
          // The user doesn't have access, let's show the no access message
          if (variable_get('ms_ppv_use_custom_field_settings', FALSE)) {
            if ($record = ms_ppv_get_custom_field_access_record($vid, $entity_type, $entity_id, $instance['field_name'], $delta)) {
              // Override the default amounts
              $ms_ppv_field->amount = $record->amount;
              $ms_ppv_field->access_period = $record->access_period;
              $ms_ppv_field->message = $record->message;
            }
          }
          
          // Replace the Tokens
          $html = check_markup(token_replace($settings['message']['value'],
																						 array(
																						   'ms_ppv_field' => $ms_ppv_field,
																	             'user' => $user,
																             )),
																$settings['message']['format']);
        }
        else {
          if ($settings['access_display'] == 'nothing') {
            $html = '';
          }
          else {
            // The user already has access, show the default field display
            $render_array = field_view_field($instance['entity_type'], $entity, $instance['field_name'], $settings['access_display']);
            $html = drupal_render($render_array);
          }
        }

        $element[$delta] = array(
          '#markup' => $html,
        );
      }
      break;
  }

  return $element;
}

// ======================================
// FIELD GROUPS
// ======================================

/**
 * Implements hook_field_group_formatter_info().
 */
function ms_ppv_field_group_formatter_info() {

  return array(
    'display' => array(
      'ms_ppv_fieldset' => array(
        'label' => t('Pay Per View'),
        'description' => t('Require users to pay to view this fieldset.'),
        'instance_settings' => array(
          'classes' => '',
          'amount' => '0',
          'access_period' => '',
          'message' => 'This group is premium only. Please pay [ms_ppv_field:amount] to have access for [ms_ppv_field:accessPeriod] : [ms_ppv_field:addToCartLink]',
        ),
      ),
    ),
  );
}

/**
 * Implements hook_field_group_format_settings().
 */
function ms_ppv_field_group_format_settings($group) {
  $form = array();

  // Add optional instance_settings.
  switch ($group->format_type) {
    case 'ms_ppv_fieldset':
      // Add a wrapper for extra settings to use by others.
      $form = array(
        'instance_settings' => array(
          '#tree' => TRUE,
          '#weight' => 2,
        ),
      );

      $field_group_types = field_group_formatter_info();
      $mode = $group->mode == 'form' ? 'form' : 'display';
      $formatter = $field_group_types[$mode][$group->format_type];
      $form['instance_settings']['description'] = array(
        '#title' => t('Description'),
        '#type' => 'textarea',
        '#default_value' => isset($group->format_settings['instance_settings']['description']) ? $group->format_settings['instance_settings']['description'] : (isset($formatter['instance_settings']['description']) ? $formatter['instance_settings']['description'] : ''),
        '#weight' => 0,
      );
      $form['instance_settings']['amount'] = array(
        '#type' => 'textfield',
        '#title' => t('Amount'),
        '#description' => t('How much the user will have to pay to view this field.'),
        '#default_value' => isset($group->format_settings['instance_settings']['amount']) ? $group->format_settings['instance_settings']['amount'] : $formatter['instance_settings']['amount'],
      );
      $form['instance_settings']['access_period'] = array(
        '#type' => 'textfield',
        '#title' => t('Access Period'),
        '#description' => t('How long will the user have access to the field once he has paid. Leave blank for unlimited access.'),
        '#default_value' => isset($group->format_settings['instance_settings']['access_period']) ? $group->format_settings['instance_settings']['access_period'] : $formatter['instance_settings']['access_period'],
      );
      $form['instance_settings']['message'] = array(
        '#type' => 'text_format',
        '#title' => t('Protected Message'),
        '#description' => t("Enter a message that will show if the user doesn't have access to this field.
          You may use the tokens below to add a link to 'add to cart', among other things."),
        '#default_value' => isset($group->format_settings['instance_settings']['message']['value']) ? $group->format_settings['instance_settings']['message']['value'] : '',
        '#format' => isset($group->format_settings['instance_settings']['message']['format']) ? $group->format_settings['instance_settings']['message']['format'] : '',
      );
      $form['instance_settings']['message_token_help']['tokens'] = array(
        '#theme' => 'token_tree',
        '#token_types' => array('ms_ppv_field', 'user'),
        '#dialog' => TRUE,
      );
      break;
  }

  return $form;
}

/**
 * Implements hook_field_group_pre_render().
 */
function ms_ppv_field_group_pre_render(&$element, $group, &$form) {
  $view_mode = isset($form['#view_mode']) ? $form['#view_mode'] : 'form';
  $id = $form['#entity_type'] . '_' . $form['#bundle'] . '_' . $view_mode . '_' . $group->group_name;
  global $user;

  // Prepare extra classes.
  $classes = array($group->format_type, str_replace('_', '-', $group->group_name));

  $classes = implode(' ', $classes);
  if (isset($group->format_settings['instance_settings'], $group->format_settings['instance_settings']['classes'])) {
    $classes .= ' ' . check_plain($group->format_settings['instance_settings']['classes']);
  }

  $description = isset($group->format_settings['instance_settings']['description']) ? filter_xss_admin($group->format_settings['instance_settings']['description']) : '';

  switch ($group->format_type) {
    // Normal or collapsible div.
    case 'ms_ppv_fieldset':
      $amount = isset($group->format_settings['instance_settings']['amount']) ? $group->format_settings['instance_settings']['amount'] : 0;
      $access_period = isset($group->format_settings['instance_settings']['access_period']) ? $group->format_settings['instance_settings']['access_period'] : '';
      $message = isset($group->format_settings['instance_settings']['message']) ? $group->format_settings['instance_settings']['message'] : '';

      $add = array(
        '#type' => 'markup',
        '#weight' => $group->weight,
        '#id' => $id,
      );

      $add['#prefix'] = '<div class="field-group-formattest ' . $group->group_name . ' ' . $classes . '">';
      $add['#suffix'] = '</div>';

      if (!empty($description)) {
        $add['#prefix'] .= '<div class="description">' . $description . '</div>';
      }

      $element += $add;

      // Check if the user has access to this fieldgroup
      if (!ms_ppv_has_field_access($user->uid, $group->entity_type, $form['#node']->nid, $group->group_name)) {
        $ms_ppv_field = new stdClass();
        $ms_ppv_field->amount = $amount;
        $ms_ppv_field->access_period = $access_period;
        $ms_ppv_field->message = $message;
        $ms_ppv_field->entity_type = $group->entity_type;
        $ms_ppv_field->entity_id = $form['#node']->nid;
        $ms_ppv_field->field_name = $group->group_name;
        // The user doesn't have access, let's show the no access message
        // Replace the Tokens
        $protected_html = token_replace($message,
          array(
            'ms_ppv_field' => $ms_ppv_field,
            'user' => $user,
          )
        );

        $element['#markup'] = $protected_html;
      }

      break;
  }
}

// ======================================
// PER-FIELD SETTINGS
// ======================================

/**
 * Implements hook_field_attach_update().
 */
function ms_ppv_field_attach_update($entity_type, $entity) {
  ms_ppv_field_update_handler($entity_type, $entity);
}

/**
 * Implements hook_field_attach_insert().
 */
function ms_ppv_field_attach_insert($entity_type, $entity) {
  ms_ppv_field_update_handler($entity_type, $entity);
}

/**
 * Update/Insert handler for the custom field settings
 */
function ms_ppv_field_update_handler($entity_type, $entity) {
  if (variable_get('ms_ppv_use_custom_field_settings', FALSE) AND user_access('set ms nodes pricing')) {
    list($entity_id, $vid) = entity_extract_ids($entity_type, $entity);

    foreach ($entity as $field_name => $field) {
      if (is_array($field) AND isset($field['und']) AND is_array($field['und'])) {
        foreach ($field['und'] as $delta => $settings) {
          if (isset($settings['ms_ppv_field_amount'])) {
            // Save the field settings
            ms_ppv_save_custom_field_settings($vid, $entity_type, $entity_id, $field_name, $delta,
              $settings['ms_ppv_field_amount'], $settings['ms_ppv_field_access_period'], $settings['ms_ppv_field_message']);
          }
        }
      }
    }
  }
}

/**
 * Returns a custom field settings record
 */
function ms_ppv_get_custom_field_access_record($vid, $entity_type, $entity_id, $field_name, $delta) {
  $result = db_query("SELECT * FROM {ms_ppv_field_custom_prices}
    WHERE vid = :vid AND entity_id = :entity_id AND entity_type = :entity_type AND field_name = :field_name AND delta = :delta",
    array(':vid' => $vid, ':entity_id' => $entity_id, ':entity_type' => $entity_type, ':field_name' => $field_name, ':delta' => $delta));

  foreach ($result as $row) {
    return $row;
  }

  return FALSE;
}

/**
 * Deletes a custom field settings record
 */
function ms_ppv_delete_custom_field_settings($vid, $entity_type, $entity_id, $field_name, $delta) {
  db_delete('ms_ppv_field_custom_prices')
    ->condition('vid', $vid)
    ->condition('entity_type', $entity_type)
    ->condition('entity_id', $entity_id)
    ->condition('field_name', $field_name)
    ->condition('delta', $delta)
    ->execute();
}

/**
 * Saves the custom field settings record
 */
function ms_ppv_save_custom_field_settings($vid, $entity_type, $entity_id, $field_name, $delta, $amount, $access_period, $message) {
  ms_ppv_delete_custom_field_settings($vid, $entity_type, $entity_id, $field_name, $delta);

  db_insert('ms_ppv_field_custom_prices')
    ->fields(array(
      'vid' => $vid,
      'entity_type' => $entity_type,
      'entity_id' => $entity_id,
      'field_name' => $field_name,
      'delta' => $delta,
      'amount' => $amount,
      'access_period' => $access_period,
      'message' => $message,
    ))
    ->execute();
}

/**
 * Implements hook_field_widget_form_alter().
 */
function ms_ppv_field_widget_form_alter(&$element, &$form_state, $context) {
  if (variable_get('ms_ppv_use_custom_field_settings', FALSE) AND user_access('set ms nodes pricing')) {
    // We need to parse the form to look for widgets of fields that have PPV set as a display,
    // and allow the user to override the defaults here
    if (isset($context['instance']['display'])) {
      foreach ($context['instance']['display'] as $display) {
        if ($display['type'] == 'ms_ppv_field_formatter') {
          if (is_array($element) AND isset($element[0])) {
            foreach ($element as $delta => $settings) {
              if (is_array($settings) AND isset($settings['#entity_type'])) {
                if ($context['form']['vid']['#value']) {
                  // If the node has a vid, it must be being edited, and may have a previous override record
                  $record = ms_ppv_get_custom_field_access_record($context['form']['vid']['#value'], $element[$delta]['#entity_type'], $context['form']['nid']['#value'], $element[$delta]['#field_name'], $delta);
                }
                else {
                  $record = new stdClass();
                }
                $element[$delta]['ms_ppv_field_amount'] = array(
                  '#type' => 'textfield',
                  '#title' => t('MS PPV Amount'),
                  '#default_value' => isset($record->amount) ? $record->amount : $display['settings']['amount'],
                );
                $element[$delta]['ms_ppv_field_access_period'] = array(
                  '#type' => 'textfield',
                  '#title' => t('MS PPV Access Period'),
                  '#default_value' => isset($record->access_period) ? $record->access_period : $display['settings']['access_period'],
                );
                $element[$delta]['ms_ppv_field_message'] = array(
                  '#type' => 'textarea',
                  '#title' => t('MS PPV Message'),
                  '#default_value' => isset($record->message) ? $record->message : $display['settings']['message'],
                );
              }
            }
          }
          else {
            if (!empty($context['form']['vid']['#value'])) {
              // If the node has a vid, it must be being edited, and may have a previous override record
              $record = ms_ppv_get_custom_field_access_record($context['form']['vid']['#value'], $element['#entity_type'], $context['form']['nid']['#value'], $element['#field_name'], 0);
            }
            else {
              $record = new stdClass();
            }
            $element['ms_ppv_field_amount'] = array(
              '#type' => 'textfield',
              '#title' => t('MS PPV Amount'),
              '#default_value' => isset($record->amount) ? $record->amount : $display['settings']['amount'],
            );
            $element['ms_ppv_field_access_period'] = array(
              '#type' => 'textfield',
              '#title' => t('MS PPV Access Period'),
              '#default_value' => isset($record->access_period) ? $record->access_period : $display['settings']['access_period'],
            );
            $element['ms_ppv_field_message'] = array(
              '#type' => 'textarea',
              '#title' => t('MS PPV Message'),
              '#maxlength' => 512,
              '#default_value' => isset($record->message) ? $record->message : $display['settings']['message'],
            );
          }
          break;
        }
      }
    }
  }
}

/**
 * Delete a PPV Node Access Record
 */
function ms_ppv_delete_node_access_confirm($form, &$form_state, $id) {
  $record = ms_ppv_get_access_record_by_id($id);
  if ($record->id) {
    $form['#ms_id'] = $record->id;
    return confirm_form($form, t('Are you sure you want to delete this PPV Node Access Record?'), 'admin/content/ms_ppv_nodes', t('This action cannot be undone.'), t('Delete'));
  }
  else {
    drupal_not_found();
  }
}

/**
 * Delete a PPV Node Access Record
 */
function ms_ppv_delete_node_access_confirm_submit($form, &$form_state) {
  $record = ms_ppv_get_access_record_by_id($form['#ms_id']);
  $account = user_load($record->uid);
  $node = node_load($record->nid);

  // Delete the record
  db_delete('ms_ppv_access')
  ->condition('id', $record->id)
  ->execute();

  drupal_set_message(t('PPV Node Access Record %title for user %name Deleted', array('%name' => $account->name, '%title' => $node->title)));
  $form_state['redirect'] = 'admin/content/ms_ppv_nodes';
}

/**
 * Gets the status text
 */
function ms_ppv_get_status_text($status) {
  $statuses = ms_ppv_get_statuses();

  return isset($statuses[$status]) ? $statuses[$status] : $status;
}

/**
 * Gets the statuses in an array
 */
function ms_ppv_get_statuses() {
  return array(
    MS_PPV_ACCESS_INACTIVE => t('Inactive'),
    MS_PPV_ACCESS_ACTIVE => t('Active'),
    MS_PPV_ACCESS_EXPIRING_SOON => t('Expiring Soon'),
  );
}

/**
 * List all of the PPV Node Access Records
 */
function ms_ppv_show_nodes() {
  $headers = array(
    array('data' => t('Start Date'), 'class' => array('ms_ppv_created_header'), 'field' => 'pa.created', 'sort' => 'desc'),
    array('data' => t('User'), 'class' => array('ms_ppv_user_header'), 'field' => 'u.name'),
    array('data' => t('Title'), 'class' => array('ms_ppv_title_header'), 'field' => 'n.title'),
    array('data' => t('Status'), 'class' => array('ms_ppv_status_header'), 'field' => 'pa.status'),
    array('data' => t('Expiration'), 'class' => array('ms_ppv_expiration_header'), 'field' => 'pa.expiration'),
    array('data' => t('Actions'), 'class' => array('ms_ppv_actions_header')),
  );

  $query = db_select('ms_ppv_access', 'pa');
  $query->leftjoin('node', 'n', 'pa.nid = n.nid');
  $query->leftjoin('users', 'u', 'pa.uid = u.uid');
  $query->fields('pa', array('expiration', 'created', 'id', 'uid', 'status', 'nid'));
  $query->fields('u', array('name'));
  $query->fields('n', array('title'));
  $query = $query->extend('TableSort')->orderByHeader($headers);
  $query = $query->extend('PagerDefault')->limit(20);

  $name = '';
  if (isset($_GET['name'])) {
    $name = $_GET['name'];
    $query->condition('u.name', '%'. $name .'%', 'LIKE');
  }

  $result = $query->execute();

  $rows = array();
  $attr = array('id' => 'ms-ppv-nodes-table');
  foreach ($result as $record) {
    $actions = l('Edit', 'admin/content/ms_ppv_nodes/edit/' . $record->id)
      . ' | ' . l('Delete', 'admin/content/ms_ppv_nodes/delete/' . $record->id, array('attributes' => array('class' => array('txn_del'))));
    $rows[] = array(
      array('data' => format_date($record->created, 'short'), 'class' => array('ms_ppv_created')),
      array('data' => l($record->name, 'user/' . $record->uid), 'class' => array('ms_ppv_user')),
      array('data' => l($record->title, 'node/' . $record->nid), 'class' => array('ms_ppv_title')),
      array('data' => ms_ppv_get_status_text($record->status), 'class' => array('ms_ppv_status')),
      array('data' => ($record->expiration ? format_date($record->expiration, 'short') : 'None'), 'class' => array('ms_ppv_expiration')),
      array('data' => $actions, 'class' => array('ms_ppv_actions'))
    );
  }

  $build = array();
  $filters_form = drupal_get_form('ms_core_get_filter_form', array('name' => $name));
  $build['content'] = array(
    'ms_ppv_nodes_filter_form' => array(
      '#markup' => drupal_render($filters_form),
    ),
    'ms_ppv_nodes_table' => array(
      '#markup' => theme('table', array('header' => $headers, 'rows' => $rows, 'attributes' => $attr, 'empty' => t('No records.'))),
    ),
  );
  // Add the pager
  $build['pager'] = array(
    '#theme' => 'pager',
    '#weight' => 5,
  );

  return $build;
}

/**
 * Show the Edit PPV Node Access Record Form
 */
function ms_ppv_edit_node_page($id = NULL) {
  $build = array();
  $build['content'] = array(
      'ms_ppv_edit_node_form' => drupal_get_form('ms_ppv_edit_node_form', $id),
  );

  return $build;
}

/**
 * Builds the Edit PPV Node Access Record Form
 */
function ms_ppv_edit_node_form($form, &$form_state, $id = NULL) {
  drupal_add_js(drupal_get_path('module', 'ms_ppv') . '/js/ms_ppv_edit_form.js');
  $is_edit = FALSE;
  $account = NULL;
  $record = NULL;
  $form['ms_ppv_node'] = array(
    '#type' => 'fieldset',
    '#title' => t('PPV Node Access Record'),
    '#weight' => -50,
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  if ($id != NULL) {
    if ($record = ms_ppv_get_access_record_by_id($id)) {
      $is_edit = TRUE;
      $form['ms_ppv_node']['id'] = array(
        '#type' => 'value',
        '#value' => $record->id,
      );
      $account = user_load($record->uid);
    }
  }
  $form['ms_ppv_node']['username'] = array(
    '#type' => 'textfield',
    '#title' => t('User'),
    '#description' => t("The User this record is for"),
    '#autocomplete_path' => 'ms_core/autocomplete/user',
    '#required' => TRUE,
    '#default_value' => ($is_edit) ? $account->name : '',
  );
  $form['ms_ppv_node']['nid'] = array(
    '#type' => 'textfield',
    '#title' => t('Node'),
    '#description' => t("The Node this record is for"),
    '#autocomplete_path' => 'ms_core/autocomplete/node',
    '#required' => TRUE,
    '#default_value' => ($is_edit) ? ms_core_create_autocomplete_key($record->nid) : '',
  );
  $form['ms_ppv_node']['created'] = array(
    '#type' => 'date',
    '#title' => t('Start Date'),
    '#description' => t("When was this PPV Node Access Record created?"),
    '#required' => TRUE,
    '#default_value' => $is_edit ? array(
      'year' => date('Y', $record->created),
      'month' => date('n', $record->created),
      'day' => date('j', $record->created),
      ) : array(
      'year' => date('Y'),
      'month' => date('n'),
      'day' => date('j'),
    ),
  );
  $form['ms_ppv_node']['should_expire'] = array(
    '#type' => 'checkbox',
    '#title' => t('Expiration?'),
    '#description' => t("Check this to set an expiration date for this PPV Node Access Record. Leaving this unchecked will cause the access to never expire."),
    '#required' => FALSE,
    '#default_value' => ($is_edit AND $record->expiration) ? TRUE : FALSE,
  );
  $form['ms_ppv_node']['expiration'] = array(
    '#type' => 'date',
    '#title' => t('Expiration Date'),
    '#description' => t("When does this PPV Node Access Record Expire?"),
    '#default_value' => array(
      'year' => (($is_edit AND $record->expiration) ? date('Y', $record->expiration) : date('Y', REQUEST_TIME)),
      'month' => (($is_edit AND $record->expiration) ? date('n', $record->expiration) : date('n', REQUEST_TIME)),
      'day' => (($is_edit AND $record->expiration) ? date('j', $record->expiration) : date('j', REQUEST_TIME)),
      ),
  );
  $form['ms_ppv_node']['status'] = array(
    '#type' => 'select',
    '#title' => t('Status'),
    '#options' => ms_ppv_get_statuses(),
    '#description' => t("What is the Status of this PPV Node Access Record?"),
    '#required' => FALSE,
    '#default_value' => $is_edit ? $record->status : 1,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  $form_state['redirect'] = 'admin/content/ms_ppv_nodes';
  return $form;
}

/**
 * Validate Function for the Edit PPV Node Access Record Form
 */
function ms_ppv_edit_node_form_validate($form, &$form_state) {
  $v = $form_state['values'];

  if (!$node = node_load(ms_core_extract_nid_from_autocomplete_key($v['nid']))) {
    form_set_error('nid', t('Error: Please enter a valid node id.'));
  }
  if (!$account = user_load_by_name($v['username'])) {
    form_set_error('username', t('Error: Please enter a valid user.'));
  }
}

/**
 * Submit Function for the Edit PPV Node Access Record Form
 */
function ms_ppv_edit_node_form_submit($form, &$form_state) {
  $v = $form_state['values'];
  if (isset($v['id']) AND $record = ms_ppv_get_access_record_by_id($v['id'])) {
    // We are editing an existing record
    $node = node_load(ms_core_extract_nid_from_autocomplete_key($v['nid']));
    $account = user_load_by_name($v['username']);
    $record->nid = $node->nid;
    $record->uid = $account->uid;
    $record->status = $v['status'];
    $record->created = strtotime($v['created']['year'] . '-' . $v['created']['month'] . '-' . $v['created']['day']);
    if (!$v['should_expire']) {
      $record->expiration = 0;
    }
    else {
      $record->expiration = strtotime($v['expiration']['year'] . '-' . $v['expiration']['month'] . '-' . $v['expiration']['day']);
    }
    drupal_write_record('ms_ppv_access', $record, 'id');
  }
  else {
    $record = new stdClass();
    $node = node_load(ms_core_extract_nid_from_autocomplete_key($v['nid']));
    $account = user_load_by_name($v['username']);
    $record->nid = $node->nid;
    $record->uid = $account->uid;
    $record->status = $v['status'];
    $record->created = strtotime($v['created']['year'] . '-' . $v['created']['month'] . '-' . $v['created']['day']);
    if (!$v['should_expire']) {
      $record->expiration = 0;
    }
    else {
      $record->expiration = strtotime($v['expiration']['year'] . '-' . $v['expiration']['month'] . '-' . $v['expiration']['day']);
    }
    drupal_write_record('ms_ppv_access', $record);
  }

  drupal_set_message(t("PPV Node Access Record for %user - '%title' Saved.",
    array('%user' => $account->name, '%title' => $node->title)));
  $form_state['redirect'] = 'admin/content/ms_ppv_nodes';
}

/**
 * List all of the PPV Node Access Records
 */
function ms_ppv_show_fields() {
  $headers = array(
    array('data' => t('Start Date'), 'class' => array('ms_ppv_created_header'), 'field' => 'pa.created', 'sort' => 'desc'),
    array('data' => t('User'), 'class' => array('ms_ppv_user_header'), 'field' => 'u.name'),
    array('data' => t('Entity'), 'class' => array('ms_ppv_entity_header')),
    array('data' => t('Field'), 'class' => array('ms_ppv_field_name_header'), 'field' => 'pa.field_name'),
    array('data' => t('Status'), 'class' => array('ms_ppv_status_header'), 'field' => 'pa.status'),
    array('data' => t('Expiration'), 'class' => array('ms_ppv_expiration_header'), 'field' => 'pa.expiration'),
    array('data' => t('Actions'), 'class' => array('ms_ppv_actions_header')),
  );

  $query = db_select('ms_ppv_field_access', 'pa');
  $query->leftjoin('users', 'u', 'pa.uid = u.uid');
  $query->fields('pa');
  $query->fields('u', array('name'));
  $query = $query->extend('TableSort')->orderByHeader($headers);
  $query = $query->extend('PagerDefault')->limit(20);

  $name = '';
  if (isset($_GET['name'])) {
    $name = $_GET['name'];
    $query->condition('u.name', '%'. $name .'%', 'LIKE');
  }

  $result = $query->execute();

  $rows = array();
  $attr = array('id' => 'ms-ppv-fields-table');
  foreach ($result as $record) {
    $actions = l('Edit', 'admin/content/ms_ppv_fields/edit/' . $record->id)
      . ' | ' . l('Delete', 'admin/content/ms_ppv_fields/delete/' . $record->id, array('attributes' => array('class' => array('txn_del'))));
    $entity = _ms_ppv_entity_load_single($record->entity_type, $record->entity_id);
    $uri = entity_uri($record->entity_type, $entity);
    $label = entity_label($record->entity_type, $entity);
    $rows[] = array(
      array('data' => format_date($record->created, 'short'), 'class' => array('ms_ppv_created')),
      array('data' => l($record->name, 'user/' . $record->uid), 'class' => array('ms_ppv_user')),
      array('data' => ($uri) ? l($label, $uri['path']) : $label, 'class' => array('ms_ppv_entity')),
      array('data' => $record->field_name, 'class' => array('ms_ppv_field_name')),
      array('data' => ms_ppv_get_status_text($record->status), 'class' => array('ms_ppv_status')),
      array('data' => ($record->expiration ? format_date($record->expiration, 'short') : 'None'), 'class' => array('ms_ppv_expiration')),
      array('data' => $actions, 'class' => array('ms_ppv_actions'))
    );
  }

  $build = array();
  $filters_form = drupal_get_form('ms_core_get_filter_form', array('name' => $name));
  $build['content'] = array(
    'ms_ppv_fields_filter_form' => array(
      '#markup' => drupal_render($filters_form),
    ),
    'ms_ppv_fields_table' => array(
      '#markup' => theme('table', array('header' => $headers, 'rows' => $rows, 'attributes' => $attr, 'empty' => t('No records.'))),
    ),
  );
  // Add the pager
  $build['pager'] = array(
    '#theme' => 'pager',
    '#weight' => 5,
  );

  return $build;
}

/**
 * Show the Edit PPV Node Access Record Form
 */
function ms_ppv_edit_field_page($id = NULL) {
  $build = array();
  $build['content'] = array(
      'ms_ppv_edit_field_form' => drupal_get_form('ms_ppv_edit_field_form', $id),
  );

  return $build;
}

/**
 * Builds the Edit PPV Field Access Record Form
 */
function ms_ppv_edit_field_form($form, &$form_state, $id = NULL) {
  drupal_add_js(drupal_get_path('module', 'ms_ppv') . '/js/ms_ppv_edit_form.js');
  $is_edit = FALSE;
  $account = NULL;
  $record = NULL;
  $form['ms_ppv_field'] = array(
    '#type' => 'fieldset',
    '#title' => t('PPV Field Access Record'),
    '#weight' => -50,
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  if ($id != NULL) {
    if ($record = ms_ppv_get_field_access_record_by_id($id)) {
      $is_edit = TRUE;
      $form['ms_ppv_field']['id'] = array(
        '#type' => 'value',
        '#value' => $record->id,
      );
      $account = user_load($record->uid);
    }
  }
  $form['ms_ppv_field']['username'] = array(
    '#type' => 'textfield',
    '#title' => t('User'),
    '#description' => t("The User this record is for"),
    '#autocomplete_path' => 'ms_core/autocomplete/user',
    '#required' => TRUE,
    '#default_value' => ($is_edit) ? $account->name : '',
  );
  $fields = field_info_fields();
  $field_options = array();
  $entity_options = array();
  foreach ($fields as $field) {
    if (isset($field['bundles']['node']) AND !empty($field['bundles']['node'])) {
      $supported_entities = array();
      foreach ($field['bundles'] as $entity_type => $bundle) {
        $supported_entities[] = $entity_type;
        $entity_options[$entity_type] = $entity_type;
      }
      // Let's include this field in the list
      $field_options[$field['field_name']] = t("@field_name : Used in @bundles",
        array('@field_name' => $field['field_name'], '@bundles' => implode(', ', $supported_entities)));
    }
  }
  $form['ms_ppv_field']['entity_type'] = array(
    '#type' => 'select',
    '#title' => t('Entity Type'),
    '#description' => t("The Entity Type that this record is for."),
    '#options' => $entity_options,
    '#required' => TRUE,
    '#default_value' => ($is_edit) ? $record->entity_type : '',
  );
  $form['ms_ppv_field']['entity_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Entity ID'),
    '#description' => t("The Entity ID that this record is for. If this is a node,
      enter the node id; if it is a user, enter the user id, etc."),
    '#required' => TRUE,
    '#default_value' => ($is_edit) ? $record->entity_id : '',
  );
  $form['ms_ppv_field']['field_name'] = array(
    '#type' => 'select',
    '#title' => t('Field Name'),
    '#description' => t("The Field Name that this record is for."),
    '#options' => $field_options,
    '#required' => TRUE,
    '#default_value' => ($is_edit) ? $record->field_name : '',
  );
  $form['ms_ppv_field']['created'] = array(
    '#type' => 'date',
    '#title' => t('Start Date'),
    '#description' => t("When was this PPV Field Access Record created?"),
    '#required' => TRUE,
    '#default_value' => $is_edit ? array(
      'year' => date('Y', $record->created),
      'month' => date('n', $record->created),
      'day' => date('j', $record->created),
      ) : array(
      'year' => date('Y'),
      'month' => date('n'),
      'day' => date('j'),
    ),
  );
  $form['ms_ppv_field']['should_expire'] = array(
    '#type' => 'checkbox',
    '#title' => t('Expiration?'),
    '#description' => t("Check this to set an expiration date for this PPV Field
      Access Record. Leaving this unchecked will cause the access to never expire."),
    '#required' => FALSE,
    '#default_value' => ($is_edit AND $record->expiration) ? TRUE : FALSE,
  );
  $form['ms_ppv_field']['expiration'] = array(
    '#type' => 'date',
    '#title' => t('Expiration Date'),
    '#description' => t("When does this PPV Field Access Record Expire?"),
    '#default_value' => array(
      'year' => (($is_edit AND $record->expiration) ? date('Y', $record->expiration) : date('Y', REQUEST_TIME)),
      'month' => (($is_edit AND $record->expiration) ? date('n', $record->expiration) : date('n', REQUEST_TIME)),
      'day' => (($is_edit AND $record->expiration) ? date('j', $record->expiration) : date('j', REQUEST_TIME)),
      ),
  );
  $form['ms_ppv_field']['status'] = array(
    '#type' => 'select',
    '#title' => t('Status'),
    '#options' => ms_ppv_get_statuses(),
    '#description' => t("What is the Status of this PPV Field Access Record?"),
    '#required' => FALSE,
    '#default_value' => $is_edit ? $record->status : 1,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  $form_state['redirect'] = 'admin/content/ms_ppv_fields';
  return $form;
}

/**
 * Validate Function for the Edit PPV Field Access Record Form
 */
function ms_ppv_edit_field_form_validate($form, &$form_state) {
  $v = $form_state['values'];

  if (!$entity = _ms_ppv_entity_load_single($v['entity_type'], $v['entity_id'])) {
    form_set_error('entity_id', t('Error: Please enter a valid entity.'));
  }
  if (!$account = user_load_by_name($v['username'])) {
    form_set_error('username', t('Error: Please enter a valid user.'));
  }
}

/**
 * Submit Function for the Edit PPV Field Access Record Form
 */
function ms_ppv_edit_field_form_submit($form, &$form_state) {
  $v = $form_state['values'];
  $entity = _ms_ppv_entity_load_single($v['entity_type'], $v['entity_id']);
  $title = entity_label($v['entity_type'], $entity);
  if (isset($v['id']) AND $record = ms_ppv_get_field_access_record_by_id($v['id'])) {
    // We are editing an existing record
    $account = user_load_by_name($v['username']);
    $record->entity_id = $v['entity_id'];
    $record->entity_type = $v['entity_type'];
    $record->field_name = $v['field_name'];
    $record->uid = $account->uid;
    $record->status = $v['status'];
    $record->created = strtotime($v['created']['year'] . '-' . $v['created']['month'] . '-' . $v['created']['day']);
    if (!$v['should_expire']) {
      $record->expiration = 0;
    }
    else {
      $record->expiration = strtotime($v['expiration']['year'] . '-' . $v['expiration']['month'] . '-' . $v['expiration']['day']);
    }
    drupal_write_record('ms_ppv_field_access', $record, 'id');
  }
  else {
    $record = new stdClass();
    $account = user_load_by_name($v['username']);
    $record->entity_id = $v['entity_id'];
    $record->entity_type = $v['entity_type'];
    $record->field_name = $v['field_name'];
    $record->uid = $account->uid;
    $record->status = $v['status'];
    $record->created = strtotime($v['created']['year'] . '-' . $v['created']['month'] . '-' . $v['created']['day']);
    if (!$v['should_expire']) {
      $record->expiration = 0;
    }
    else {
      $record->expiration = strtotime($v['expiration']['year'] . '-' . $v['expiration']['month'] . '-' . $v['expiration']['day']);
    }
    drupal_write_record('ms_ppv_field_access', $record);
  }

  drupal_set_message(t("PPV Field Access Record for %user - %title : %field Saved.",
    array('%user' => $account->name, '%title' => $title, '%field' => $v['field_name'])));
  $form_state['redirect'] = 'admin/content/ms_ppv_fields';
}

/**
 * Delete a PPV Field Access Record
 */
function ms_ppv_delete_field_access_confirm($form, &$form_state, $id) {
  $record = ms_ppv_get_field_access_record_by_id($id);
  if ($record->id) {
    $form['#ms_id'] = $record->id;
    return confirm_form($form, t('Are you sure you want to delete this PPV Field Access Record?'), 'admin/content/ms_ppv_fields', t('This action cannot be undone.'), t('Delete'));
  }
  else {
    drupal_not_found();
  }
}

/**
 * Delete a PPV Field Access Record
 */
function ms_ppv_delete_field_access_confirm_submit($form, &$form_state) {
  $record = ms_ppv_get_field_access_record_by_id($form['#ms_id']);
  $account = user_load($record->uid);
  $entity = _ms_ppv_entity_load_single($record->entity_type, $record->entity_id);
  $title = entity_label($record->entity_type, $entity);

  // Delete the record
  db_delete('ms_ppv_field_access')
  ->condition('id', $record->id)
  ->execute();

  drupal_set_message(t('PPV Field Access Record %title : %field for user %name Deleted',
    array('%name' => $account ? $account->name : t('N/A'), '%title' => $title, '%field' => $record->field_name)));
  $form_state['redirect'] = 'admin/content/ms_ppv_fields';
}

/**
 * Implements hook_ms_ppv_access_alter()
 */
function ms_ppv_ms_ppv_access_alter(&$grants, $uid, $nid) {
  if (variable_get('ms_ppv_books_integration', FALSE)) {
    $node = node_load($nid);
    // Check if the user has access to this book page
    if (isset($node->book['bid']) AND $node->book['bid'] != $node->book['nid']) {
      $grants['ms_ppv'] = ms_ppv_check_node_access($uid, $node->book['bid']);
    }
  }
}

/**
 * Implements hook_ms_ppv_add_to_cart_alter()
 */
function ms_ppv_ms_ppv_add_to_cart_alter(&$nid, $node) {
  if (variable_get('ms_ppv_books_integration', FALSE)) {
    // If this is a book page, change the nid to the main book nid
    if (isset($node->book['bid']) AND $node->book['bid'] != $node->book['nid']) {
      $nid = $node->book['bid'];
    }
  }
}

// ======================================
// Entity Hooks
// ======================================

/**
 * Implements hook_entity_info().
 */
function ms_ppv_entity_info() {
  return array(
    'ms_ppv_access' => array(
      'label' => t('MS PPV Access Record'),
      'base table' => 'ms_ppv_access',
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIController',
      'entity keys' => array(
        'id' => 'id',
      ),
      'label callback' => 'ms_ppv_access_label',
      'fieldable' => FALSE,
      'module' => 'ms_ppv',
    ),
    'ms_ppv_field_access' => array(
      'label' => t('MS PPV Field Access Record'),
      'base table' => 'ms_ppv_field_access',
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIController',
      'entity keys' => array(
        'id' => 'id',
      ),
      'label callback' => 'ms_ppv_field_access_label',
      'fieldable' => FALSE,
      'module' => 'ms_ppv',
    ),
    'ms_ppv_price' => array(
      'label' => t('MS PPV Custom Node Price'),
      'base table' => 'ms_ppv_price',
      'revision table' => 'node_revision',
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIController',
      'entity keys' => array(
        'id' => 'vid',
        'revision' => 'nid',
      ),
      'label callback' => 'ms_ppv_price_label',
      'fieldable' => FALSE,
      'module' => 'ms_ppv',
    ),
  );
}

/**
 * Implements hook_entity_property_info_alter().
 */
function ms_ppv_entity_property_info_alter(&$info) {
  $ms_ppv_access = &$info['ms_ppv_access']['properties'];
  $ms_ppv_access['oid']['type'] = 'ms_order';
  $ms_ppv_access['nid']['type'] = 'node';
  $ms_ppv_access['uid']['type'] = 'user';
  $ms_ppv_access['status']['label'] = t('Status');
  $ms_ppv_access['status']['options list'] = 'ms_ppv_get_statuses';
  $ms_ppv_access['created']['label'] = t('Created');
  $ms_ppv_access['expiration']['label'] = t('Expiration');
  $ms_ppv_access['created']['type'] = 'date';
  $ms_ppv_access['expiration']['type'] = 'date';

  $ms_ppv_field_access = &$info['ms_ppv_field_access']['properties'];
  $ms_ppv_field_access['oid']['type'] = 'ms_order';
  $ms_ppv_field_access['uid']['type'] = 'user';
  $ms_ppv_field_access['status']['label'] = t('Status');
  $ms_ppv_field_access['status']['options list'] = 'ms_ppv_get_statuses';
  $ms_ppv_field_access['created']['label'] = t('Created');
  $ms_ppv_field_access['expiration']['label'] = t('Expiration');
  $ms_ppv_field_access['created']['type'] = 'date';
  $ms_ppv_field_access['expiration']['type'] = 'date';

  $ms_ppv_price = &$info['ms_ppv_price']['properties'];
  $ms_ppv_price['nid']['type'] = 'node';
  $ms_ppv_price['vid']['type'] = 'node_revision';
  $ms_ppv_price['allow_multiple']['label'] = t('Allow Multiple');
  $ms_ppv_price['expiration_string']['label'] = t('Expiration String');
  $ms_ppv_price['price']['label'] = t('Price');
  $ms_ppv_price['protected_content_message']['label'] = t('Protected Content Message');
  $ms_ppv_price['out_of_stock_message']['label'] = t('Out of Stock Message');
  $ms_ppv_price['stock']['label'] = t('Stock');
}

/**
 * Creates the label for a PPV Access Record
 */
function ms_ppv_access_label($entity, $entity_type) {
  $account = user_load($entity->uid);
  $node = node_load($entity->nid);
  return t('Access to @node for @user',
    array('@node' => $node->title, '@user' => $account->name));
}

/**
 * Creates the label for a PPV Field Access Record
 */
function ms_ppv_field_access_label($entity, $entity_type) {
  $account = user_load($entity->uid);
  $access_entity = _ms_ppv_entity_load_single($entity->entity_type, $entity->entity_id);
  return t('Access to @field field for @title for @user',
    array('@field' => $entity->field_name, '@title' => entity_label($entity->entity_type, $access_entity), '@user' => $account->name));
}

/**
 * Creates the label for a PPV Price Record
 */
function ms_ppv_price_label($entity, $entity_type) {
  $node = node_load($entity->nid);
  return t('Price for @node',
    array('@node' => $node->title));
}

/**
 * Implments hook_file_download()
 *
 * This is needed because of http://drupal.org/node/1170206
 */
function ms_ppv_file_download($uri) {
  $access_test_passed = FALSE;

  // Get the current file's fid to work with.
  $result = db_select('file_managed', 'c')
    ->fields('c')
    ->condition('uri', $uri)
    ->execute()
    ->fetchAssoc();

  // Only proceed if the URI produced results.
  if(count($result)) {
    // Get the FID to be used later.
    $fid = $result['fid'];

    global $user;

    // Get the current file's fid to work with
    $file_used_in = db_query("SELECT * FROM {file_usage} WHERE fid = :fid AND module = :module AND type = :type",
      array(':fid' => $fid, ':module' => 'file', ':type' => 'node'))->fetchAll();

    if(count($file_used_in)) {
      // Loop through all possible fields.
      foreach ($file_used_in as $this_file) {
        $node = node_load($this_file->id);

        // @todo Add a check here to see if the user has access to the field, instead of just node
        if(node_access('view', $node) && ms_ppv_has_access($user->uid, $node->nid) && !$access_test_passed) {
          $file = file_load($fid);
          $access_test_passed = TRUE;

          if ($file) {
            return array(
              'Content-Type' => $file->filemime,
              'Content-Length' => $file->filesize,
            );
          }
        }
      }
    }
  }

  if(!$access_test_passed) {
    if (variable_get('ms_ppv_block_file_access', TRUE)) {
      return -1;
    }
  }
}
