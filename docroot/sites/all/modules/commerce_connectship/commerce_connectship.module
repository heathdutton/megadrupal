<?php

/**
 * @file
 * Integrates Connectship with Commerce Shipping.
 */


/**
 * Implements hook_menu().
 */
function commerce_connectship_menu() {
  $items = array();

  $items['admin/commerce/config/shipping/methods/connectship/edit'] = array(
    'title' => 'Edit',
    'description' => 'Configure the ConnectShip shipping method.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_connectship_settings_form'),
    'access arguments' => array('administer shipping'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 0,
  );

  return $items;
}

/**
 * Form callback: builds the settings form used to collect ConnectShip API
 * credentials and enable supported shipping services.
 */
function commerce_connectship_settings_form($form, &$form_state) {
  $form['api'] = array(
    '#type' => 'fieldset',
    '#title' => t('ConnectShip API credentials'),
    '#collapsible' => TRUE,
  );

  $form['api']['commerce_connectship_api_loginid'] = array(
    '#type' => 'textfield',
    '#title' => t('Login ID'),
    '#default_value' => variable_get('commerce_connectship_api_loginid', 'TEST'),
  );

  $form['api']['commerce_connectship_api_password'] = array(
    '#type' => 'textfield',
    '#title' => t('Password'),
    '#default_value' => variable_get('commerce_connectship_api_password', 'TEST'),
  );

  $form['api']['commerce_connectship_xml_processor_url'] = array(
    '#type' => 'textfield',
    '#title' => t('XML Processor URL'),
    '#default_value' => variable_get('commerce_connectship_xml_processor_url', ''),
  );

  $form['api']['commerce_connectship_log'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Log the following messages for debugging'),
    '#options' => array(
      'request' => t('API request messages'),
      'response' => t('API response messages'),
    ),
    '#default_value' => variable_get('commerce_connectship_log', array()),
  );

  $form['rate'] = array(
    '#type' => 'fieldset',
    '#title' => t('Rate request settings'),
    '#collapsible' => TRUE,
  );

  $form['rate']['commerce_connectship_max_pkg_weight'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum package weight'),
    '#description' => t('If the total weight of an order exceeds the maximum package weight, multiple packages will be used in the rate request.') . '<br />' . t('Different services have different weight restrictions. Refer to the ConnectShip <a href="!url">carrier component documentation</a> for more information.', array('!url' => url('http://www.connectship.com/Docs/'))),
    '#default_value' => variable_get('commerce_connectship_max_pkg_weight', '70'),
    '#field_suffix' => t('lb'),
    '#size' => 10,
  );

  $form['rate']['commerce_connectship_shipper_symbol'] = array(
    '#type' => 'textfield',
    '#title' => t('Shipper symbol'),
    '#description' => t('The Shipper symbol as defined in Progistics.'),
    '#default_value' => variable_get('commerce_connectship_shipper_symbol', ''),
    '#size' => 10,
    '#maxlength' => 3,
  );

  $form['rate']['commerce_connectship_rate_currency_code'] = array(
    '#type' => 'select',
    '#title' => t('Currency'),
    '#options' => commerce_currency_code_options_list(),
    '#default_value' => variable_get('commerce_connectship_rate_currency_code', commerce_default_currency()),
  );

  $form['rate']['commerce_connectship_rates_timeout'] = array(
    '#type' => 'textfield',
    '#title' => t('Cached rates timeout'),
    '#description' => t('Enter the number of seconds after which cached ConnectShip shipping rates should no longer be considered valid.') . '<br />' . t('Set to 0 during testing to avoid caching failed rate request responses.'),
    '#default_value' => variable_get('commerce_connectship_rates_timeout', 60),
    '#field_suffix' => t('seconds'),
    '#size' => 10,
  );

  $form['services'] = array(
    '#type' => 'fieldset',
    '#title' => t('Enable ConnectShip shipping services'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#tree' => TRUE,
  );

  // Build an options array of all available ConnectShip package services.
  $package_services = commerce_connectship_package_services();

  foreach ($package_services as $optgroup => $optgroup_options) {
    $form['services'][strtr($optgroup, ' ', '-')] = array(
      '#type' => 'checkboxes',
      '#title' => check_plain($optgroup),
      '#options' => $optgroup_options,
      '#default_value' => array_keys(commerce_connectship_load_services()),
    );
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save configuration'),
    '#suffix' => l(t('Cancel'), 'admin/commerce/config/shipping/methods'),
  );

  return $form;
}

function commerce_connectship_settings_form_submit($form, &$form_state) {
  // Save the API credentials.
  variable_set('commerce_connectship_api_loginid', $form_state['values']['commerce_connectship_api_loginid']);
  variable_set('commerce_connectship_api_password', $form_state['values']['commerce_connectship_api_password']);
  variable_set('commerce_connectship_xml_processor_url', $form_state['values']['commerce_connectship_xml_processor_url']);
  variable_set('commerce_connectship_log', $form_state['values']['commerce_connectship_log']);

  // Save the rate request settings.
  variable_set('commerce_connectship_max_pkg_weight', $form_state['values']['commerce_connectship_max_pkg_weight']);
  variable_set('commerce_connectship_shipper_symbol', $form_state['values']['commerce_connectship_shipper_symbol']);
  variable_set('commerce_connectship_rate_currency_code', $form_state['values']['commerce_connectship_rate_currency_code']);
  variable_set('commerce_connectship_rates_timeout', $form_state['values']['commerce_connectship_rates_timeout']);

  // Load the enabled services.
  $enabled_services = commerce_connectship_load_services();
  $all_services = commerce_connectship_package_services();

  // Loop over the shipping services...
  foreach ($form_state['values']['services'] as $optgroup => $options) {
    foreach ($options as $key => $value) {
      // If a service was marked to be enabled and hasn't been saved yet, save
      // it to the database now.
      if ($key === $value && !isset($enabled_services[$key])) {
        $service = array(
          'name' => $key,
          'title' => $all_services[strtr($optgroup, '-', ' ')][$key],
        );

        commerce_connectship_save_service($service);
      }
      // Otherwise if a service that is enabled was unchecked, delete it from
      // the database if possible now.
      elseif ($value == '0' && isset($enabled_services[$key])) {
        // Check to make sure no line items are depending on this line item.
        $query = new EntityFieldQuery();

        $query
          ->entityCondition('entity_type', 'commerce_line_item', '=')
          ->fieldCondition('commerce_shipping_service', 'value', commerce_connectship_commerce_shipping_service_name($key), '=')
          ->count();

        // If no line items were found...
        if ($query->execute() == 0) {
          // Delete the record from the database.
          commerce_connectship_delete_service($key);
        }
        else {
          // Otherwise display a message indicating why it couldn't be disabled.
          $title = check_plain($all_services[strtr($optgroup, '-', ' ')][$key]);
          drupal_set_message(t('Could not disable the @title service, because a shipping line item exists for it.', array('@title' => $title)), 'error');
        }
      }
    }
  }

  drupal_set_message(t('ConnectShip configuration saved.'));

  $form_state['redirect'] = 'admin/commerce/config/shipping/methods';
}

/**
 * Loads all enabled ConnectShip package services from the database.
 */
function commerce_connectship_load_services() {
  $connectship_services = &drupal_static(__FUNCTION__);

  // If the services haven't been loaded yet, do so now.
  if (!isset($connectship_services)) {
    $connectship_services = db_query('SELECT * FROM {commerce_connectship_service}')->fetchAllAssoc('name', PDO::FETCH_ASSOC);
  }

  return $connectship_services;
}

/**
 * Saves an enabled ConnectShip package service.
 *
 * @param $service
 *   An array containing a 'name', 'title', and 'weight' of the service.
 * @param $update
 *   Boolean indicating whether or not the save should be processed as an update
 *   to an existing enabled service.
 * @param $skip_reset
 *   Boolean indicating whether or not the menu item cache and default rule
 *   configurations should be reset after the delete.
 *
 * @return
 *   The return value of the call to drupal_write_record() to save the tax type,
 *     either FALSE on failure or SAVED_NEW or SAVED_UPDATED indicating the type
 *     of query performed to save the tax type.
 */
function commerce_connectship_save_service($service, $update = FALSE, $skip_reset = FALSE) {
  $op = drupal_write_record('commerce_connectship_service', $service, $update ? array('name') : array());

  // Ensure the default rule is built.
  entity_defaults_rebuild();

  // Clear the necessary caches and rebuild the menu items.
  if (!$skip_reset) {
    commerce_shipping_services_reset();
    rules_clear_cache(TRUE);
    menu_rebuild();
  }

  return $op;
}

/**
 * Disables an enabled ConnectShip package service by deleting its database row.
 *
 * @param $name
 *   The name of the package service to delete.
 * @param $skip_reset
 *   Boolean indicating whether or not the menu item cache and default rule
 *   configurations should be reset after the delete.
 */
function commerce_connectship_delete_service($name, $skip_reset = FALSE) {
  db_delete('commerce_connectship_service')
    ->condition('name', $name)
    ->execute();

  rules_config_delete(array('commerce_shipping_service_' . $name));

  // Clear the necessary caches and rebuild the menu items.
  if (!$skip_reset) {
    commerce_shipping_services_reset();
    rules_clear_cache(TRUE);
    menu_rebuild();
  }
}

/**
 * Implements hook_commerce_shipping_method_info().
 */
function commerce_connectship_commerce_shipping_method_info() {
  $shipping_methods = array();

  $shipping_methods['connectship'] = array(
    'title' => t('ConnectShip'),
    'description' => t('Quote rates for any carrier service supported by ConnectShip.'),
  );

  return $shipping_methods;
}

/**
 * Returns the name of the Commerce shipping service name for the given
 * ConnectShip package service name.
 */
function commerce_connectship_commerce_shipping_service_name($service) {
  $service_names = commerce_connectship_package_service_names();
  return 'connectship_' . $service_names[$service];
}

/**
 * Implements hook_commerce_shipping_service_info().
 */
function commerce_connectship_commerce_shipping_service_info() {
  $shipping_services = array();
  $service_names = commerce_connectship_package_service_names();

  foreach (commerce_connectship_load_services() as $name => $service) {
    $shipping_services[commerce_connectship_commerce_shipping_service_name($name)] = array(
      'title' => t('ConnectShip @title', array('@title' => $service['title'])),
      'display_title' => check_plain($service['title']),
      'shipping_method' => 'connectship',
      'weight' => $service['weight'],
      'callbacks' => array(
        'rate' => 'commerce_connectship_service_rate_order',
      ),
    );
  }

  return $shipping_services;
}

/**
 * Shipping service callback: returns ConnectShip calculated shipping rates for
 * a given order.
 */
function commerce_connectship_service_rate_order($shipping_service, $order) {
  // First attempt to recover cached shipping rates for the current order.
  $rates = commerce_shipping_rates_cache_get('connectship', $order, variable_get('commerce_connectship_rates_timeout', 60));

  // If no rates were recovered from the cache or the cached rates are over five
  // minutes old...
  if (!$rates) {
    $rates = array();

    // Build the rate request for the current order.
    $rate_request_element = commerce_connectship_build_rate_request($order);

    // If we got a valid rate request object back...
    if ($rate_request_element) {
      // Submit the API request to ConnectShip.
      $response = commerce_connectship_api_request($rate_request_element->asXML(), t('Requesting shipping rates for Order @order_number', array('@order_number' => $order->order_number)));

      if (!empty($response)) {
        // Parse the response to cache all requested rates for the current order.
        foreach ($response->RATEDSHIPMENT as $rate) {
          // If there was no error for this shipment...
          if ($rate->ERROR->ERRORCODE == '0') {
            // Extract the service name and price information from the rate object.
            $service_name = commerce_connectship_commerce_shipping_service_name((string) $rate->SHIPMENTSERVICE->SCS);
            $decimal = (string) $rate->TOTALCHARGES->MONETARYVALUE;
            $currency_code = (string) $rate->TOTALCHARGES->CURRENCYCODE;

            // Add an item to the rates array for the current service.
            $rates[$service_name] = array(
              'amount' => commerce_currency_decimal_to_amount($decimal, $currency_code),
              'currency_code' => $currency_code,
              'data' => array(),
            );
          }
        }
      }
    }

    // Cache the calculated rates for subsequent requests.
    commerce_shipping_rates_cache_set('connectship', $order, $rates);
  }

  // Return the rate for the requested service or FALSE if not found.
  return isset($rates[$shipping_service['name']]) ? $rates[$shipping_service['name']] : FALSE;
}

/**
 * Returns a SimpleXML Element containing the rate request XML for an order for
 * every enabled ConnectShip package service.
 *
 * @param $order
 *   The order to generate a rate request for.
 *
 * @return
 *   A SimpleXML Element containing the rate request or FALSE if a rate request
 *   could not be generated.
 */
function commerce_connectship_build_rate_request($order) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  // Determine the shipping profile reference field name for the order.
  $field_name = commerce_physical_order_shipping_field_name($order);
  $shipping_profile = $order_wrapper->{$field_name}->value();

  // Prepare the shipping address for use in the request.
  if (!empty($order_wrapper->{$field_name}->commerce_customer_address)) {
    $shipping_address = $order_wrapper->{$field_name}->commerce_customer_address->value();
    $shipping_address['phone'] = '';
  }
  else {
    $shipping_address = array(
      'organisation_name' => '',
      'name_line' => '',
      'thoroughfare' => '',
      'premise' => '',
      'locality' => '',
      'administrative_area' => '',
      'postal_code' => '',
      'country' => '',
      'phone' => '',
    );
  }

  // Add the phone number if available.
  if ($phone_field_name = commerce_physical_customer_profile_phone_number_field_name($shipping_profile)) {
    if (!empty($order_wrapper->{$field_name}->{$phone_field_name})) {
      $shipping_address['phone'] = $order_wrapper->{$field_name}->{$phone_field_name}->value();
    }
  }

  // Get the total weight of the order in pounds.
  $weight = commerce_physical_order_weight($order, 'lb');

  // Create an array of rate request data.
  $rate_request_data = array(
    'LOGIN' => array(
      'LOGINID' => variable_get('commerce_connectship_api_loginid', 'TEST'),
      'PASSWORD' => variable_get('commerce_connectship_api_password', 'TEST'),
    ),
    'DEFATTRIBUTES' => array(
      'CONSIGNEE' => array(
        'COMPANY' => $shipping_address['organisation_name'],
        'CONTACT' => $shipping_address['name_line'],
        'ADDRESS1' => $shipping_address['thoroughfare'],
        'ADDRESS2' => $shipping_address['premise'],
        'CITY' => $shipping_address['locality'],
        'STATEPROVINCE' => $shipping_address['administrative_area'],
        'POSTALCODE' => $shipping_address['postal_code'],
        'RESIDENTIAL' => commerce_physical_customer_profile_residential($shipping_profile) ? 'TRUE' : 'FALSE',
        'PHONE' => $shipping_address['phone'],
        'COUNTRYSYMBOL' => commerce_connectship_country_symbol($shipping_address['country']),
        'CONSIGNEECODE' => $order->uid,
      ),
      'SHIPPERINFO' => array(
        'SHIPPER' => variable_get('commerce_connectship_shipper_symbol', ''),
      ),
      'TERMS' => 'SHIPPER',
      'CURRENCYCODE' => variable_get('commerce_connectship_rate_currency_code', commerce_default_currency()),
      'SHIPDATE' => commerce_connectship_next_ship_date(),
    ),
    'PACKAGES' => array(),
    'PKGSERVICE' => array(),
    'SORT' => '0',
  );

  // If the total weight of the order is less than the maximum package weight...
  $max_pkg_weight = variable_get('commerce_connectship_max_pkg_weight', '70');

  if ($weight['weight'] <= $max_pkg_weight) {
    // Add a single package to the request for the whole order.
    $rate_request_data['PACKAGES'][] = commerce_connectship_build_package_data($weight['weight'], $order->order_number);
  }
  else {
    // Otherwise determine how many packages will be required and add them.
    $num_packages = 2;

    while (ceil($weight['weight'] / $num_packages) > $max_pkg_weight) {
      $num_packages++;
    }

    for ($i = 0; $i < $num_packages; $i++) {
      $rate_request_data['PACKAGES'][] = commerce_connectship_build_package_data(ceil($weight['weight'] / $num_packages), $order->order_number);
    }
  }

  // Request a rate for every enabled ConnectShip package service.
  foreach (commerce_connectship_load_services() as $key => $value) {
    $rate_request_data['PKGSERVICE'][] = array('SCS' => $key);
  }

  // Build and populate the rate request SimpleXML element.
  $rate_request_element = new SimpleXMLElement('<RATEREQUEST/>');
  commerce_simplexml_add_children($rate_request_element, $rate_request_data);

  // Allow modules an opportunity to alter the request before it is sent.
  drupal_alter('commerce_connectship_rate_request', $rate_request_element);

  return $rate_request_element;
}

/**
 * Returns a single package data array for a rate request.
 */
function commerce_connectship_build_package_data($weight_value, $consignee_reference, $packaging = 'CUSTOM') {
  return array(
    'PKG' => array(
      'PKGWEIGHT' => array(
        'WEIGHTUNITS' => 'LB',
        'WEIGHTVALUE' => empty($weight_value) ? 0 : $weight_value,
      ),
      'PACKAGING' => $packaging,
      'REFERENCE' => array(
        'CONSIGNEEREFERENCE' => $consignee_reference,
      ),
    ),
  );
}

/**
 * Submits an API request to the Progistics XML Processor.
 *
 * @param $xml
 *   An XML string to submit to the Progistics XML Processor.
 * @param $message
 *   Optional log message to use for logged API requests.
 */
function commerce_connectship_api_request($xml, $message = '') {
  // Log the API request if specified.
  if (in_array('request', variable_get('commerce_connectship_log', array()))) {
    if (empty($message)) {
      $message = t('Submitting API request to the Progistics XML processor');
    }

    watchdog('connectship', '@message:<pre>@xml</pre>', array('@message' => $message, '@xml' => $xml));
  }

  // Build the array of header information for the request.
  $header = array();
  $header[] = 'Content-type: text/xml; charset=utf-8';
  $header[] = 'Content-length: ' . strlen($xml);

  // POST the XML to the XML Processor.
  $ch = curl_init(commerce_connectship_xml_processor_url());
  curl_setopt($ch, CURLOPT_VERBOSE, 0);
  curl_setopt($ch, CURLOPT_POST, 1);
  curl_setopt($ch, CURLOPT_POSTFIELDS, $xml);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_NOPROGRESS, 1);
  curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 0);
  $result = curl_exec($ch);

  // Log any errors to the watchdog.
  if ($error = curl_error($ch)) {
    watchdog('connectship', 'cURL error: @error', array('@error' => $error), WATCHDOG_ERROR);
    return FALSE;
  }
  curl_close($ch);

  // If we received data back from the server...
  if (!empty($result)) {
    // Extract the result into an XML response object.
    $response = new SimpleXMLElement($result);

    // Log the API request if specified.
    if (in_array('response', variable_get('commerce_connectship_log', array()))) {
      watchdog('connectship', 'API response received:<pre>@xml</pre>', array('@xml' => $response->asXML()));
    }

    return $response;
  }
  else {
    return FALSE;
  }
}

/**
 * Returns the URL to the XML Processor.
 */
function commerce_connectship_xml_processor_url() {
  return variable_get('commerce_connectship_xml_processor_url', '');
}

/**
 * Returns an options list of package services for the specified carriers.
 *
 * @param $carriers
 *   An array of carrier names whose services should be returned:
 *   - Canada Post
 *   - Canpar
 *   - FedEx
 *   - UPS
 *   - UPS Freight
 *   - USPS
 *   Leave empty to return all carriers' services.
 *
 * @return
 *   An associative array keyed by carrier name of each specified carrier's
 *     services, which are in turn keyed by the ConnectShip name for the service.
 */
function commerce_connectship_package_services($carriers = array()) {
  $package_services = array(
    'Canada Post' => array(
      'TANDATA_CANADAPOST.CANADAPOST.AIR_PARCEL_INTL' => t('Canada Post Air Parcel-International'),
      'TANDATA_CANADAPOST.CANADAPOST.EXPDT_PARCEL' => t('Canada Post Expedited Parcel'),
      'TANDATA_CANADAPOST.CANADAPOST.EXPDT_PARCEL_USA' => t('Canada Post Expedited Parcel-USA'),
      'TANDATA_CANADAPOST.CANADAPOST.SURFACE_PARCEL_INTL' => t('Canada Post International Parcel-Surface'),
      'TANDATA_CANADAPOST.CANADAPOST.PRIORITY' => t('Canada Post Priority Next A.M.'),
      'TANDATA_CANADAPOST.CANADAPOST.PRIORITY_WORLDWIDE' => t('Canada Post Priority Worldwide'),
      'TANDATA_CANADAPOST.CANADAPOST.REG_PARCEL' => t('Canada Post Regular Parcel'),
      'TANDATA_CANADAPOST.CANADAPOST.SMALLPACKET_AIR' => t('Canada Post Small Packet International-Air'),
      'TANDATA_CANADAPOST.CANADAPOST.SMALLPACKET_SURFACE' => t('Canada Post Small Packets International-Surface'),
      'TANDATA_CANADAPOST.CANADAPOST.EXPR_POST' => t('Canada Post Xpresspost'),
      'TANDATA_CANADAPOST.CANADAPOST.EXPR_POST_INTL' => t('Canada Post Xpresspost-International'),
      'TANDATA_CANADAPOST.CANADAPOST.XPS_USA' => t('Canada Post Xpresspost-USA'),
    ),
    'Canpar' => array(
      'TANDATA_CANPAR.CANPAR.GDS' => t('Canpar Ground'),
      'TANDATA_CANPAR.CANPAR.OVN' => t('Canpar Overnight'),
      'TANDATA_CANPAR.CANPAR.SEL' => t('Canpar Select'),
      'TANDATA_CANPAR.CANPAR.SELUSA' => t('Canpar Select USA'),
      'TANDATA_CANPAR.CANPAR.USA' => t('Canpar USA'),
    ),
    'FedEx' => array(
      'TANDATA_FEDEXFSMS.FEDEX.FR1' => t('FedEx 1Day Freight'),
      'TANDATA_FEDEXFSMS.FEDEX.2DA' => t('FedEx 2Day'),
      'TANDATA_FEDEXFSMS.FEDEX.FR2' => t('FedEx 2Day Freight'),
      'TANDATA_FEDEXFSMS.FEDEX.FR3' => t('FedEx 3Day Freight'),
      'TANDATA_FEDEXFSMS.FEDEX.EXP' => t('FedEx Express Saver'),
      'TANDATA_FEDEXFSMS.FEDEX.FO' => t('FedEx First Overnight'),
      'TANDATA_FEDEXFSMS.FEDEX.GND' => t('FedEx Ground'),
      'TANDATA_FEDEXFSMS.FEDEX.FHD' => t('FedEx Home Delivery'),
      'TANDATA_FEDEXFSMS.FEDEX.IECO' => t('FedEx International Economy'),
      'TANDATA_FEDEXFSMS.FEDEX.IFR2' => t('FedEx International Economy Freight'),
      'TANDATA_FEDEXFSMS.FEDEX.IFO' => t('FedEx International First'),
      'TANDATA_FEDEXFSMS.FEDEX.IPRI' => t('FedEx International Priority'),
      'TANDATA_FEDEXFSMS.FEDEX.IFR1' => t('FedEx International Priority Freight'),
      'TANDATA_FEDEXFSMS.FEDEX.PRI' => t('FedEx Priority Overnight'),
      'TANDATA_FEDEXFSMS.FEDEX.SP_BPM' => t('FedEx SmartPost Bound Printed Matter'),
      'TANDATA_FEDEXFSMS.FEDEX.SP_MEDIA' => t('FedEx SmartPost Media Mail'),
      'TANDATA_FEDEXFSMS.FEDEX.SP_PS' => t('FedEx SmartPost Parcel Select'),
      'TANDATA_FEDEXFSMS.FEDEX.SP_STD' => t('FedEx SmartPost Standard Mail'),
      'TANDATA_FEDEXFSMS.FEDEX.STD' => t('FedEx Standard Overnight'),
    ),
    'UPS' => array(
      'TANDATA_UPS.UPS.2DA' => t('UPS 2nd Day Air'),
      'TANDATA_UPS.UPS.2AM' => t('UPS 2nd Day Air A.M.'),
      'TANDATA_UPS.UPS.3DA' => t('UPS 3 Day Select'),
      'TANDATA_UPS.UPS.BAS' => t('UPS Basic'),
      'TANDATA_UPS.UPS.GND' => t('UPS Ground'),
      'TANDATA_UPS.UPS.GNDFRS' => t('UPS Ground Freight Pricing'),
      'TANDATA_UPS.UPS.NDA' => t('UPS Next Day Air'),
      'TANDATA_UPS.UPS.NAM' => t('UPS Next Day Air Early A.M.'),
      'TANDATA_UPS.UPS.NDS' => t('UPS Next Day Air Saver'),
      'TANDATA_UPS.UPS.WSTD' => t('UPS Standard'),
      'TANDATA_UPS.UPS.SPPS' => t('UPS SurePost 1 lb or Greater'),
      'TANDATA_UPS.UPS.SPBPM' => t('UPS SurePost Bound Printed Matter'),
      'TANDATA_UPS.UPS.SPSTD' => t('UPS SurePost Less than 1 lb'),
      'TANDATA_UPS.UPS.SPMM' => t('UPS SurePost Media'),
      'TANDATA_UPS.UPS.STDLTL' => t('UPS Trade Direct Standard LTL'),
      'TANDATA_UPS.UPS.WEPD' => t('UPS Worldwide Expedited'),
      'TANDATA_UPS.UPS.WEXP' => t('UPS Worldwide Express'),
      'TANDATA_UPS.UPS.WEXPPLS' => t('UPS Worldwide Express Plus'),
      'TANDATA_UPS.UPS.WEXPSVR' => t('UPS Worldwide Saver'),
    ),
    'UPS Freight' => array(
      'CONNECTSHIP_UPSFREIGHT.UPS.GUARANTEED' => t('UPS Freight Guaranteed'),
      'CONNECTSHIP_UPSFREIGHT.UPS.LTL' => t('UPS Freight LTL'),
      'CONNECTSHIP_UPSFREIGHT.UPS.URGENT' => t('UPS Freight Urgent'),
    ),
    'USPS' => array(
      'TANDATA_USPS.USPS.BPM_BULK' => t('USPS Bound Printed Matter (Presorted)'),
      'TANDATA_USPS.USPS.BPM' => t('USPS Bound Printed Matter (Single-Piece)'),
      'TANDATA_USPS.USPS.EXPR' => t('USPS Express Mail'),
      'TANDATA_USPS.USPS.I_EXP_DMND' => t('USPS Express Mail International'),
      'TANDATA_USPS.USPS.FIRST' => t('USPS First-Class Mail'),
      'TANDATA_USPS.USPS.I_FIRST' => t('USPS First-Class Mail International'),
      'TANDATA_USPS.USPS.I_GXG' => t('USPS Global Express Guaranteed'),
      'TANDATA_USPS.USPS.I_MBAG_AIR' => t('USPS Intl Airmail M-bags'),
      'TANDATA_USPS.USPS.LIBR_5DIG' => t('USPS Library Mail (5-Digit)'),
      'TANDATA_USPS.USPS.LIBR_BMC' => t('USPS Library Mail (Basic)'),
      'TANDATA_USPS.USPS.LIBRARY' => t('USPS Library Mail (Single-Piece)'),
      'TANDATA_USPS.USPS.MEDIA_5DIG' => t('USPS Media Mail (5-Digit)'),
      'TANDATA_USPS.USPS.MEDIA_BMC' => t('USPS Media Mail (Basic)'),
      'TANDATA_USPS.USPS.SPCL' => t('USPS Media Mail (Single-Piece)'),
      'TANDATA_USPS.USPS.PARCELPOST' => t('USPS Parcel Post'),
      'TANDATA_USPS.USPS.PS_DBMC' => t('USPS Parcel Select (DBMC)'),
      'TANDATA_USPS.USPS.PS_RG_ONDC' => t('USPS Parcel Select Regional Ground (ONDC)'),
      'TANDATA_USPS.USPS.PS_RG_OSCF' => t('USPS Parcel Select Regional Ground (OSCF)'),
      'TANDATA_USPS.USPS.PRIORITY' => t('USPS Priority Mail'),
      'TANDATA_USPS.USPS.I_PRIORITY' => t('USPS Priority Mail International'),
      'TANDATA_USPS.USPS.STD' => t('USPS Standard Mail'),
      'TANDATA_USPS.USPS.STD_DBMC' => t('USPS Standard Mail (DBMC)'),
    ),
  );

  return empty($carriers) ? $package_services : array_intersect_key($package_services, drupal_map_assoc($carriers));
}

/**
 * Returns an array of shipping service names keyed by ConnectShip package
 * service name.
 */
function commerce_connectship_package_service_names() {
  return array(
    'TANDATA_CANADAPOST.CANADAPOST.AIR_PARCEL_INTL' => 'cp_api',
    'TANDATA_CANADAPOST.CANADAPOST.EXPDT_PARCEL' => 'cp_ep',
    'TANDATA_CANADAPOST.CANADAPOST.EXPDT_PARCEL_USA' => 'cp_ep_usa',
    'TANDATA_CANADAPOST.CANADAPOST.SURFACE_PARCEL_INTL' => 'cp_spi',
    'TANDATA_CANADAPOST.CANADAPOST.PRIORITY' => 'cp_pri',
    'TANDATA_CANADAPOST.CANADAPOST.PRIORITY_WORLDWIDE' => 'cp_pw',
    'TANDATA_CANADAPOST.CANADAPOST.REG_PARCEL' => 'cp_rp',
    'TANDATA_CANADAPOST.CANADAPOST.SMALLPACKET_AIR' => 'cp_spa',
    'TANDATA_CANADAPOST.CANADAPOST.SMALLPACKET_SURFACE' => 'cp_sps',
    'TANDATA_CANADAPOST.CANADAPOST.EXPR_POST' => 'cp_epost',
    'TANDATA_CANADAPOST.CANADAPOST.EXPR_POST_INTL' => 'cp_eposti',
    'TANDATA_CANADAPOST.CANADAPOST.XPS_USA' => 'cp_xps_usa',
    'TANDATA_CANPAR.CANPAR.GDS' => 'c_ground',
    'TANDATA_CANPAR.CANPAR.OVN' => 'c_overn',
    'TANDATA_CANPAR.CANPAR.SEL' => 'c_select',
    'TANDATA_CANPAR.CANPAR.SELUSA' => 'c_select_usa',
    'TANDATA_CANPAR.CANPAR.USA' => 'c_usa',
    'TANDATA_FEDEXFSMS.FEDEX.FR1' => 'fedex_fr1',
    'TANDATA_FEDEXFSMS.FEDEX.2DA' => 'fedex_2da',
    'TANDATA_FEDEXFSMS.FEDEX.FR2' => 'fedex_fr2',
    'TANDATA_FEDEXFSMS.FEDEX.FR3' => 'fedex_fr3',
    'TANDATA_FEDEXFSMS.FEDEX.EXP' => 'fedex_exp',
    'TANDATA_FEDEXFSMS.FEDEX.FO' => 'fedex_fo',
    'TANDATA_FEDEXFSMS.FEDEX.GND' => 'fedex_gnd',
    'TANDATA_FEDEXFSMS.FEDEX.FHD' => 'fedex_fhd',
    'TANDATA_FEDEXFSMS.FEDEX.IECO' => 'fedex_ieco',
    'TANDATA_FEDEXFSMS.FEDEX.IFR2' => 'fedex_ifr2',
    'TANDATA_FEDEXFSMS.FEDEX.IFO' => 'fedex_ifo',
    'TANDATA_FEDEXFSMS.FEDEX.IPRI' => 'fedex_ipri',
    'TANDATA_FEDEXFSMS.FEDEX.IFR1' => 'fedex_ifr1',
    'TANDATA_FEDEXFSMS.FEDEX.PRI' => 'fedex_pri',
    'TANDATA_FEDEXFSMS.FEDEX.SP_BPM' => 'fedex_sp_bpm',
    'TANDATA_FEDEXFSMS.FEDEX.SP_MEDIA' => 'fedex_sp_media',
    'TANDATA_FEDEXFSMS.FEDEX.SP_PS' => 'fedex_sp_ps',
    'TANDATA_FEDEXFSMS.FEDEX.SP_STD' => 'fedex_sp_std',
    'TANDATA_FEDEXFSMS.FEDEX.STD' => 'fedex_std',
    'TANDATA_UPS.UPS.2DA' => 'ups_2da',
    'TANDATA_UPS.UPS.2AM' => 'ups_2am',
    'TANDATA_UPS.UPS.3DA' => 'ups_3da',
    'TANDATA_UPS.UPS.BAS' => 'ups_bas',
    'TANDATA_UPS.UPS.GND' => 'ups_gnd',
    'TANDATA_UPS.UPS.GNDFRS' => 'ups_gndfrs',
    'TANDATA_UPS.UPS.NDA' => 'ups_nda',
    'TANDATA_UPS.UPS.NAM' => 'ups_nam',
    'TANDATA_UPS.UPS.NDS' => 'ups_nds',
    'TANDATA_UPS.UPS.WSTD' => 'ups_wstd',
    'TANDATA_UPS.UPS.SPPS' => 'ups_spps',
    'TANDATA_UPS.UPS.SPBPM' => 'ups_spbpm',
    'TANDATA_UPS.UPS.SPSTD' => 'ups_spstd',
    'TANDATA_UPS.UPS.SPMM' => 'ups_spmm',
    'TANDATA_UPS.UPS.STDLTL' => 'ups_stdltl',
    'TANDATA_UPS.UPS.WEPD' => 'ups_wepd',
    'TANDATA_UPS.UPS.WEXP' => 'ups_wexp',
    'TANDATA_UPS.UPS.WEXPPLS' => 'ups_wexppls',
    'TANDATA_UPS.UPS.WEXPSVR' => 'ups_wexpsvr',
    'CONNECTSHIP_UPSFREIGHT.UPS.GUARANTEED' => 'upsf_gtd',
    'CONNECTSHIP_UPSFREIGHT.UPS.LTL' => 'upsf_ltl',
    'CONNECTSHIP_UPSFREIGHT.UPS.URGENT' => 'upsf_urgent',
    'TANDATA_USPS.USPS.BPM_BULK' => 'usps_bpm_bulk',
    'TANDATA_USPS.USPS.BPM' => 'usps_bpm',
    'TANDATA_USPS.USPS.EXPR' => 'usps_expr',
    'TANDATA_USPS.USPS.I_EXP_DMND' => 'usps_i_exp_dmnd',
    'TANDATA_USPS.USPS.FIRST' => 'usps_first',
    'TANDATA_USPS.USPS.I_FIRST' => 'usps_i_first',
    'TANDATA_USPS.USPS.I_GXG' => 'usps_i_gxg',
    'TANDATA_USPS.USPS.I_MBAG_AIR' => 'usps_i_mbag_air',
    'TANDATA_USPS.USPS.LIBR_5DIG' => 'usps_libr_5dig',
    'TANDATA_USPS.USPS.LIBR_BMC' => 'usps_libr_bmc',
    'TANDATA_USPS.USPS.LIBRARY' => 'usps_library',
    'TANDATA_USPS.USPS.MEDIA_5DIG' => 'usps_media_5dig',
    'TANDATA_USPS.USPS.MEDIA_BMC' => 'usps_media_bmc',
    'TANDATA_USPS.USPS.SPCL' => 'usps_spcl',
    'TANDATA_USPS.USPS.PARCELPOST' => 'usps_pp',
    'TANDATA_USPS.USPS.PS_DBMC' => 'usps_ps_dbmc',
    'TANDATA_USPS.USPS.PS_RG_ONDC' => 'usps_ps_rg_ondc',
    'TANDATA_USPS.USPS.PS_RG_OSCF' => 'usps_ps_rg_oscf',
    'TANDATA_USPS.USPS.PRIORITY' => 'usps_priority',
    'TANDATA_USPS.USPS.I_PRIORITY' => 'usps_i_priority',
    'TANDATA_USPS.USPS.STD' => 'usps_std',
    'TANDATA_USPS.USPS.STD_DBMC' => 'usps_std_dbmc',
  );
}

/**
 * Returns the ConnectShip country symbol for the given country code.
 */
function commerce_connectship_country_symbol($country_code) {
  module_load_include('inc', 'commerce_connectship', 'includes/commerce_connectship.countries');
  $country_symbols = commerce_connectship_country_symbols();
  return $country_symbols[$country_code];
}

/**
 * Returns the next valid ship date in MM/DD/YY format.
 */
function commerce_connectship_next_ship_date() {
  $timestamp = REQUEST_TIME;

  if (date('D') == 'Sat') {
    // Add two days to the timestamp to get to Monday.
    $timestamp += 86400 * 2;
  }
  elseif (date('D') == 'Sun') {
    // Add one day to the timestamp to get to Monday.
    $timestamp += 86400;
  }

  return date('m/d/y', $timestamp);
}
