<?php

/**
 * @file
 * The main file for the etracker module.
 *
 * etracker is a web controlling service that provides real time web traffic
 * analysis and this module provides easy and simple integration.
 */

include_once 'etracker.action.inc';

/**
 * ----------------------- Constants -------------------------------------------
 */
define('ETRACKER_VISIBLE_PATH_MODE_ALL', 0);
define('ETRACKER_VISIBLE_PATH_MODE_SELECTED', 1);
define('ETRACKER_VISIBLE_PATH_MODE_PHP', 2);
define('ETRACKER_VISIBLE_PATH_PAGES', "admin\nadmin/*\nbatch\nnode/add*\nnode/*/*\nuser/*/*");
define('ETRACKER_MODE_BREADCRUMB_OFF', 0);
define('ETRACKER_MODE_BREADCRUMB_ON', 1);
define('ETRACKER_MODE_BREADCRUMB_ON_EXCLUDE_HOME', 2);
define('ETRACKER_MODE_USERROLE_TAG_OFF', 0);
define('ETRACKER_MODE_USERROLE_TAG_INDIVIDUAL', 1);
define('ETRACKER_MODE_USERROLE_TAG_MERGE', 2);
define('ETRACKER_TRACK_DOWNLOAD_EXTENSIONS', '7z|aac|arc|arj|asf|asx|avi|bin|csv|doc|exe|flv|gif|gz|gzip|hqx|jar|jpe?g|js|mp(2|3|4|e?g)|mov(ie)?|msi|msp|pdf|phps|png|ppt|qtm?|ra(m|r)?|sea|sit|tar|tgz|torrent|txt|wav|wma|wmv|wpd|xls|xml|z|zip');


/**
 * ----------------------- Hooks -----------------------------------------------
 */

/**
 * Implements hook_menu().
 */
function etracker_menu() {
  $items = array();

  $items['admin/config/system/etracker'] = array(
    'title' => 'etracker',
    'description' => 'Configure the settings used to generate your etracker tracking.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('etracker_settings_form'),
    'access arguments' => array('administer etracker'),
    'file' => 'etracker.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function etracker_permission() {
  return array(
    'administer etracker' => array(
      'title' => t('Administer etracker'),
      'description' => t('Perform maintenance tasks for etracker.'),
    ),
    'opt-in or out of etracker tracking' => array(
      'title' => t('Opt-in or out of tracking'),
      'description' => t('Allow users to decide if tracking code will be added to pages or not.'),
    ),
    'use PHP for etracker settings' => array(
      'title' => t('Use PHP for tracking visibility'),
      'description' => t('Enter PHP code in the field for tracking visibility settings.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_theme().
 */
function etracker_theme($existing, $type, $theme, $path) {
  return array(
    'etracker_script' => array(
      'variables' => array(
        'account_key_1' => '',
        'query' => array(),
      ),
      'template' => 'etracker.script',
    ),
    'etracker_noscript' => array(
      'variables' => array(
        'account_key_1' => '',
        'query_string' => '',
      ),
      'template' => 'etracker.noscript',
    ),
  );
}

/**
 * Implements hook_page_alter().
 */
function etracker_page_alter(&$page) {

  // Check API key.
  $key_1 = variable_get('etracker_account_key_1', '');
  if (empty($key_1)) {
    // The key is not configured, we are not adding tracking code.
    return;
  }

  // Check page visibility settings.
  if (!_etracker_validate_visibility_path()) {
    return;
  }

  // Check user role and user custom visibility settings.
  if (!_etracker_validate_visibility_user()) {
    return;
  }

  // Check DNT visibility settings.
  if (!_etracker_validate_visibility_dnt()) {
    return;
  }

  // Get the variables for the tracking script.
  $query = etracker_add_variable();

  // Allow other modules to alter the variables.
  drupal_alter('etracker_variables', $query);

  // Get multi-lingual settings.
  $language_settings = _etracker_get_language_settings();

  // Add the language to the page name
  if (!empty($language_settings['page title suffix'])) {
    $query['et_pagename'] .= ' (' . $language_settings['current language'] . ')';
  }

  // Prepare the et_areas if present.
  if (empty($query['et_areas'])) {
    unset($query['et_areas']);
  }
  else {
    $et_areas = array();
    foreach ($query['et_areas'] as $areas) {
      if (!empty($language_settings['area prefix'])) {
        array_unshift($areas, $language_settings['current language']);
      }
      if (!empty($language_settings['area suffix'])) {
        array_push($areas, $language_settings['current language']);
      }
      $et_areas[] = implode('/', $areas);
    }
    $query['et_areas'] = implode(',', $et_areas);
  }

  // Prepare the et_target if present.
  if (empty($query['et_target'])) {
    unset($query['et_target']);
  }
  else {
    $target_history = isset($_COOKIE['et_target_history']) ? drupal_json_decode($_COOKIE['et_target_history']) : array();
    $query['et_target'] = array_merge($target_history, $query['et_target']);
    setcookie('et_target_history', drupal_json_encode($query['et_target']), NULL, '/');
    $query['et_target'] = implode('/', $query['et_target']);
  }

  // Prepare the et_tag variable(s) if present.
  if (empty($query['et_tag'])) {
    unset($query['et_tag']);
  }
  else {
    $et_tags = array();
    foreach ($query['et_tag'] as $key => $value) {
      if (is_array($value)) {
        foreach ($value as $v) {
          $et_tags[] = str_replace(' ', '_', $key . '=' . $v);
        }
      }
      else {
        $et_tags[] = str_replace(' ', '_', $key . '=' . $value);
      }
    }
    $query['et_tag'] = implode(';', $et_tags);
  }

  // JavaScript Settings
  $script_settings = array(
    'track' => array(
      'external' => variable_get('etracker_track_external', TRUE),
      'mailto' => variable_get('etracker_track_mailto', TRUE),
      'download' => variable_get('etracker_track_download', TRUE),
    ),
    'settings' => array(
      'download_extensions' => variable_get('etracker_track_download_extensions', ETRACKER_TRACK_DOWNLOAD_EXTENSIONS),
    ),
    'messages' => array(),
    'search_terms' => '',
  );

  // Prepare messages for tracking.
  if ($message_types = variable_get('etracker_track_messages', array())) {
    $message_types = array_values(array_filter($message_types));
    $status_heading = array(
      'status' => t('Status message'),
      'warning' => t('Warning message'),
      'error' => t('Error message'),
    );

    foreach (drupal_get_messages(NULL, FALSE) as $type => $messages) {
      // Track only the selected message types.
      if (in_array($type, $message_types)) {
        foreach ($messages as $message) {
          $script_settings['messages'][] = array(
            'type' => drupal_json_encode($status_heading[$type]),
            'text' => drupal_json_encode(strip_tags($message)),
          );
        }
      }
    }
  }

  // Prepare search terms for tracking.
  if (module_exists('search') && variable_get('etracker_track_site_search', FALSE) && arg(0) == 'search' && $search_terms = _etracker_get_search_terms()) {
    $script_settings['search_terms'][] = drupal_json_encode(strip_tags($search_terms));
  }

  // Add JavaScript and settings to the page.
  drupal_add_js(array('etracker' => $script_settings), 'setting');
  drupal_add_js(drupal_get_path('module', 'etracker') . '/etracker.js');

  // Render the script and no-script part of the tracking code.
  $script = theme('etracker_script', array('account_key_1' => $key_1, 'query' => $query));
  $noscript = theme('etracker_noscript', array('account_key_1' => $key_1, 'query_string' => drupal_http_build_query($query)));

  $header = $footer = '';
  if (variable_get('etracker_scope_script', 'header') == 'header') {
    $header .= $script;
  }
  else {
    $footer .= $script;
  }
  if (variable_get('etracker_scope_noscript', 'header') == 'header') {
    $header .= $noscript;
  }
  else {
    $footer .= $noscript;
  }

  if (!empty($header)) {
    drupal_add_html_head(array(
      '#type' => 'markup',
      '#markup' => $header,
      '#weight' => -999,
    ), 'etracker');
  }
  if (!empty($footer)) {
    $page['page_bottom']['etracker'] = array('#markup' => $footer,);
  }
}

/**
 * Implements hook_entity_view().
 */
function etracker_entity_view($entity, $type, $view_mode, $langcode) {
  $vids = module_exists('taxonomy') ? variable_get('etracker_mode_taxonomy_as_area', array()) : array();

  foreach (field_info_field_map() as $field_name => $field) {
    if (empty($entity->{$field_name})) {
      continue;
    }
    if (!in_array($field['type'], array('taxonomy_term_reference', 'etracker'))) {
      continue;
    }
    $items = isset($entity->{$field_name}[$langcode]) ? $entity->{$field_name}[$langcode] : $entity->{$field_name}[LANGUAGE_NONE];
    if ($field['type'] == 'taxonomy_term_reference') {
      if (!empty($vids)) {
        foreach ($items as $item) {
          if (!isset($item['taxonomy_term'])) {
            $item['taxonomy_term'] = taxonomy_term_load($item['tid']);
          }
          if (in_array($item['taxonomy_term']->vid, $vids)) {
            $parents = taxonomy_get_parents($item['taxonomy_term']->tid);
            array_unshift($parents, $item['taxonomy_term']);
            etracker_action_area_set($parents);
          }
        }
      }
    }
    else if ($field['type'] == 'etracker') {
      foreach ($items as $item) {
        if (!empty($item['page_name'])) {
          etracker_action_pagename_set($item['page_name']);
        }
        if (!empty($item['target'])) {
          etracker_action_target_append($item['target']);
        }
        if (!empty($item['ilevel'])) {
          etracker_action_interest_level_set($item['ilevel']);
        }
      }
    }
  }
}

/**
 * Implement hook_form_FORM_ID_alter().
 *
 * Allow users to decide if tracking code will be added to pages or not.
 */
function etracker_form_user_profile_form_alter(&$form, &$form_state) {
  $account = $form['#user'];
  $category = $form['#user_category'];

  if ($category == 'account' && user_access('opt-in or out of etracker tracking') && ($custom = variable_get('etracker_visible_user', 0)) != 0 && _etracker_validate_visibility_roles($account)) {
    $form['etracker'] = array(
      '#type' => 'fieldset',
      '#title' => t('etracker configuration'),
      '#weight' => 3,
      '#collapsible' => TRUE,
      '#tree' => TRUE
    );

    switch ($custom) {
      case 1:
        $description = t('Users are tracked by default, but you are able to opt out.');
        break;

      case 2:
        $description = t('Users are <em>not</em> tracked by default, but you are able to opt in.');
        break;
    }

    $form['etracker']['custom'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable user tracking'),
      '#description' => $description,
      '#default_value' => isset($account->data['etracker']['custom']) ? $account->data['etracker']['custom'] : ($custom == 1),
    );
  }
}

/**
 * Implements hook_user_presave().
 */
function etracker_user_presave(&$edit, $account, $category) {
  if (isset($edit['etracker']['custom'])) {
    $edit['data']['etracker']['custom'] = $edit['etracker']['custom'];
  }
}

/**
 * Implements hook_preprocess_search_results().
 */
function etracker_preprocess_search_results(&$variables) {
  global $pager_total_items;
  drupal_add_js(array('etracker' => array('number_of_search_results' => intval($pager_total_items[0]))), 'setting');
}

/**
 * ----------------------- Helper ----------------------------------------------
 */

function etracker_add_variable($key = NULL, $value = NULL) {
  $stored_values = & drupal_static(__FUNCTION__);

  if (!isset($stored_values)) {
    $stored_values = _etracker_default_variables();
  }

  if (isset($key) && isset($value)) {
    if (is_array($stored_values[$key])) {
      if (!in_array($value, $stored_values[$key])) {
        $stored_values[$key][] = $value;
      }
    }
    else {
      $stored_values[$key] = $value;
    }
  }

  return $stored_values;
}

function _etracker_get_language_settings() {
  $language_settings = & drupal_static(__FUNCTION__);

  if (!isset($language_settings)) {
    $languages = language_list();
    $language_settings = count($languages) == 1 ?
      array(
        'tag' => 0,
        'area prefix' => 0,
        'area suffix' => 0,
        'page title prefix' => 0,
      ) :
      variable_get('etracker_multilingual', array(
        'tag' => 1,
        'area prefix' => 1,
        'area suffix' => 0,
        'page title prefix' => 0,
      ));

    global $language;
    $language_settings['current language'] = $language->language;
  }

  return $language_settings;
}

function _etracker_default_variables() {
  $variables = array(
    'et_pagename' => drupal_get_title(),
    'et_areas' => array(),
    'et_target' => array(),
    'et_tag' => array(),
  );

  // Check multi-lingual settings.
  $language_settings = _etracker_get_language_settings();
  if (!empty($language_settings['tag'])) {
    $variables['et_tag']['language'] = $language_settings['current language'];
  }

  // Add the current URL if required.
  $query_params = drupal_get_query_parameters();
  $clean_urls = variable_get('clean_url', 0);
  if (empty($clean_urls) || !empty($query_params)) {
    $variables['et_url'] = rawurlencode(url($_GET['q'], array(
      'absolute' => TRUE,
      'query' => $query_params,
    )));
  }

  // Add breadcrumb as area.
  if (variable_get('etracker_mode_breadcrumb_as_area', ETRACKER_MODE_BREADCRUMB_ON) > ETRACKER_MODE_BREADCRUMB_OFF) {
    $breadcrumb = drupal_get_breadcrumb();
    if (variable_get('etracker_mode_breadcrumb_as_area', ETRACKER_MODE_BREADCRUMB_ON) == ETRACKER_MODE_BREADCRUMB_ON_EXCLUDE_HOME) {
      array_shift($breadcrumb);
    }
    $area = array();
    while (!empty($breadcrumb)) {
      $area[] = filter_xss(array_shift($breadcrumb), array());
    }
    if (!empty($area)) {
      $variables['et_areas'][] = $area;
    }
  }

  // Add tags for user roles.
  if (variable_get('etracker_mode_userrole_as_tag', ETRACKER_MODE_USERROLE_TAG_OFF) > ETRACKER_MODE_USERROLE_TAG_OFF) {
    global $user;
    $track_rids = variable_get('etracker_userroles_as_tag', array());
    $current_rids = array();
    foreach ($user->roles as $rid => $value) {
      if (!empty($user->roles[$rid]) && !empty($track_rids)) {
        $current_rids[] = $rid;
      }
    }
    switch (variable_get('etracker_mode_userrole_as_tag', ETRACKER_MODE_USERROLE_TAG_INDIVIDUAL)) {
      case ETRACKER_MODE_USERROLE_TAG_INDIVIDUAL:
        $variables['et_tag']['userrole'] = $current_rids;
        break;

      case ETRACKER_MODE_USERROLE_TAG_MERGE:
        $variables['et_tag']['userrole'] = implode(',', $current_rids);
        break;

    }
  }

  // Allow other modules to alter the default variables.
  drupal_alter('etracker_default_variables', $variables);

  return $variables;
}

/**
 * Validate the visibility settings for pages and return TRUE if the current
 * page should be tracked..
 */
function _etracker_validate_visibility_path() {
  static $path_match;

  // Cache visibility result if function is called more than once.
  if (!isset($path_match)) {

    $visible_path_mode = variable_get('etracker_visible_path_mode', ETRACKER_VISIBLE_PATH_MODE_ALL);
    $visible_path_pages = variable_get('etracker_visible_path_pages', ETRACKER_VISIBLE_PATH_PAGES);

    // Match path if necessary.
    if (!empty($visible_path_pages)) {
      // Convert path to lowercase. This allows comparison of the same path
      // with different case. Ex: /Page, /page, /PAGE.
      $pages = drupal_strtolower($visible_path_pages);
      if ($visible_path_mode < ETRACKER_VISIBLE_PATH_MODE_PHP) {
        // Convert the Drupal path to lowercase
        $path = drupal_strtolower(drupal_get_path_alias($_GET['q']));
        // Compare the lowercase internal and lowercase path alias (if any).
        $path_match = drupal_match_path($path, $pages);
        if ($path != $_GET['q']) {
          $path_match = $path_match || drupal_match_path($_GET['q'], $pages);
        }
        // When $visibility has a value of 0, the tracking code is displayed on
        // all pages except those listed in $pages. When set to 1, it
        // is displayed only on those pages listed in $pages.
        $path_match = !($visible_path_mode xor $path_match);
      }
      elseif (module_exists('php')) {
        $path_match = php_eval($visible_path_pages);
      }
      else {
        $path_match = FALSE;
      }
    }
    else {
      $path_match = ($visible_path_mode == ETRACKER_VISIBLE_PATH_MODE_ALL);
    }

  }
  return $path_match;
}

function _etracker_validate_visibility_roles($account = NULL) {
  static $roles_match;

  // Cache visibility result if function is called more than once.
  if (!isset($roles_match)) {
    $roles_match = FALSE;

    $visible_roles = variable_get('etracker_visible_roles', array());
    foreach ($visible_roles as $rid => $flag) {
      if (empty($flag)) {
        unset($visible_roles[$rid]);
      }
    }
    $visible_roles = array_keys($visible_roles);
    if (empty($visible_roles)) {
      $roles_match = TRUE;
    }
    else {
      if (!isset($account)) {
        global $user;
        $account = $user;
      }
      foreach ($visible_roles as $rid) {
        if (!empty($account->roles[$rid])) {
          $roles_match = TRUE;
        }
      }
    }
  }

  return $roles_match;
}

function _etracker_validate_visibility_dnt() {

  if (variable_get('etracker_visible_dnt', TRUE) && !empty($_SERVER['HTTP_DNT'])) {
    return FALSE;
  }

  return TRUE;
}

function _etracker_validate_visibility_user() {
  global $user;
  $enabled = FALSE;

  // Is current user a member of a role that should be tracked?
  if (_etracker_validate_visibility_roles($user)) {

    // Use the user's visibility setting, if necessary.
    if (($custom = variable_get('etracker_visible_user', 0)) != 0) {
      if ($user->uid && isset($user->data['etracker']['custom'])) {
        $enabled = $user->data['etracker']['custom'];
      }
      else {
        $enabled = ($custom == 1);
      }
    }
    else {
      $enabled = TRUE;
    }
  }

  return $enabled;
}

function _etracker_get_search_terms() {
  static $return;
  if (!isset($return)) {
    // Extract keys as remainder of path
    // Note: support old GET format of searches for existing links.
    $path = explode('/', $_GET['q'], 3);
    $keys = empty($_REQUEST['keys']) ? '' : $_REQUEST['keys'];
    $return = count($path) == 3 ? $path[2] : $keys;
  }
  return $return;
}

/**
 * ------------------------ Field implementation -------------------------------
 */

/**
 * Implements hook_field_info();
 */
function etracker_field_info() {
  return array(
    'etracker' => array(
      'label' => t('etracker'),
      'description' => t('This field stores individual settings for an entity to overwrite site-wide settings.'),
      'settings' => array(),
      'default_widget' => 'etracker_widget',
    ),
  );
}

/**
 * Implements hook_field_widget_info().
 */
function etracker_field_widget_info() {
  return array(
    'etracker_widget' => array(
      'label' => t('etracker widget'),
      'description' => t('TODO.'),
      'field types' => array('etracker'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function etracker_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $item = $items[$delta];

  $element['#type'] = 'fieldset';
  $element['#collapsible'] = TRUE;
  $element['#collapsed'] = TRUE;
  $element['page_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Page name'),
    '#default_value' => isset($item['page_name']) ? $item['page_name'] : '',
  );
  $element['target'] = array(
    '#type' => 'textfield',
    '#title' => t('Target'),
    '#default_value' => isset($item['target']) ? $item['target'] : '',
  );
  $element['ilevel'] = array(
    '#type' => 'select',
    '#title' => t('Interest level'),
    '#options' => array(0,1,2,3,4,5,6,7,8,9),
    '#default_value' => isset($item['ilevel']) ? $item['ilevel'] : 0,
  );

  return $element;
}

/**
 * Implements hook_field_is_empty().
 */
function etracker_field_is_empty($item, $field) {
  foreach ($item as $key => $value) {
    if (!empty($value)) {
      return FALSE;
    }
  }
  return TRUE;
}

/**
 * Implements hook_field_load().
 */
function etracker_field_load($entity_type, $entities, $field, $instances, $langcode, &$items, $age) {
  foreach ($entities as $id => $entity) {
    foreach ($items[$id] as $delta => $item) {
      $items[$id][$delta] = unserialize($item['settings']);
    }
  }
}

/**
 * Implements hook_field_presave().
 */
function etracker_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  if ($field['type'] == 'etracker') {
    foreach ($items as $index => $values) {
      $items[$index]['settings'] = serialize($values);
    }
  }
}
