<?php
/**
 * @file
 * Include term references embedded in field collections in the taxonomy index.
 */

/**
 * Implements hook_module_implements_alter().
 */
function taxonomy_deep_index_module_implements_alter(&$implementations, $hook) {
  if ($hook === 'node_insert' || $hook === 'node_update') {
    // Disable original taxonomy_node_insert() and taxonomy_node_update() hook
    // implementations.
    unset($implementations['taxonomy']);
  }
}

/**
 * Implements hook_entity_info_alter().
 */
function taxonomy_deep_index_entity_info_alter(&$entity_info) {
  // By default do not descend into node and term references.
  $exclude_types = variable_get('taxonomy_deep_index_exclude_entity_types', array('node', 'taxonomy_term'));
  foreach ($exclude_types as $entity_type) {
    if (!empty($entity_info[$entity_type]['bundles'])) {
      foreach (array_keys($entity_info[$entity_type]['bundles']) as $bundle_name) {
        $entity_info[$entity_type]['bundles'][$bundle_name]['taxonomy_deep_index_exclude'] = TRUE;
      }
    }
    elseif (!empty($entity_info[$entity_type])) {
      $entity_info[$entity_type]['taxonomy_deep_index_exclude'] = TRUE;
    }
  }
}

/**
 * Implements hook_ctools_plugin_post_alter().
 */
function taxonomy_deep_index_ctools_plugin_post_alter(&$plugin, &$info) {
  if ($info['module'] === 'entityreference' && $info['type'] === 'behavior' && $plugin['class'] === 'EntityReferenceBehavior_TaxonomyIndex') {
    $plugin = array();
  }
}

/**
 * Implements hook_node_insert().
 */
function taxonomy_deep_index_node_insert($node) {
  taxonomy_deep_index_build_node_index($node);
}

/**
 * Implements hook_node_update().
 */
function taxonomy_deep_index_node_update($node) {
  taxonomy_delete_node_index($node);
  taxonomy_deep_index_build_node_index($node);
}

/**
 * Build up term index for all terms embedded in the node.
 *
 * @see taxonomy_build_node_index()
 */
function taxonomy_deep_index_build_node_index($node) {
  // We maintain a denormalized table of term/node relationships, containing
  // only data for current, published nodes.
  $status = NULL;
  if (variable_get('taxonomy_maintain_index_table', TRUE)) {
    // If a node property is not set in the node object when node_save() is
    // called, the old value from $node->original is used.
    if (!empty($node->original)) {
      $status = (int)(!empty($node->status) || (!isset($node->status) && !empty($node->original->status)));
      $sticky = (int)(!empty($node->sticky) || (!isset($node->sticky) && !empty($node->original->sticky)));
    }
    else {
      $status = (int)(!empty($node->status));
      $sticky = (int)(!empty($node->sticky));
    }
  }
  // We only maintain the taxonomy index for published nodes.
  if ($status) {
    // Collect a unique list of all the term IDs from all node fields.
    $wrapper = entity_metadata_wrapper('node', $node);
    $tid_all = array_unique(_taxonomy_deep_index_collect($wrapper));
  }
  // Insert index entries for all the node's terms.
  if (!empty($tid_all)) {
    $query = db_insert('taxonomy_index')->fields(array('nid', 'tid', 'sticky', 'created'));
    foreach ($tid_all as $tid) {
      $query->values(array(
        'nid' => $node->nid,
        'tid' => $tid,
        'sticky' => $sticky,
        'created' => $node->created,
      ));
    }
    $query->execute();
  }
}

/**
 * Extract term references contained in embedded field collections.
 */
function _taxonomy_deep_index_collect(EntityMetadataWrapper $entity_wrapper, &$seen = NULL) {
  $result = array();
  if (_taxonomy_deep_index_wrapper_check($entity_wrapper, $seen)) {
    foreach ($entity_wrapper as $name => $field) {
      if ($field->type() == 'taxonomy_term') {
        try {
          $result[] = $field->tid->value();
        }
        catch (Exception $e) {
          continue;
        }
      }

      if (!_taxonomy_deep_index_entity_exclude($field)) {
        $result = array_merge($result, _taxonomy_deep_index_collect($field, $seen));
      }
    }
  }

  return $result;
}

/**
 * Return TRUE when the given wrapper should be examined, FALSE otherwise.
 */
function _taxonomy_deep_index_wrapper_check(EntityMetadataWrapper $entity_wrapper, &$seen) {
  if (!isset($seen)) {
    $seen = array();
  }

  if (!($entity_wrapper instanceof Traversable)) {
    return FALSE;
  }

  try {
    $value = $entity_wrapper->value();
  }
  catch (Exception $e) {
    return FALSE;
  }

  if (is_object($value)) {
    $hash = spl_object_hash($value);
    if (!empty($seen[$hash])) {
      return FALSE;
    }
    $seen[$hash] = TRUE;
  }

  return TRUE;
}

/**
 * Return TRUE when the given wrapper should be excluded, FALSE otherwise.
 */
function _taxonomy_deep_index_entity_exclude(EntityMetadataWrapper $entity_wrapper) {
  if ($entity_wrapper instanceof EntityDrupalWrapper) {
    try {
      $entity_info = $entity_wrapper->entityInfo();
      $bundle = $entity_wrapper->getBundle();
    }
    catch (Exception $e) {
      return TRUE;
    }

    if (empty($entity_info['bundles'])) {
      return !empty($entity_info['taxonomy_deep_index_exclude']);
    }
    else {
      return !$bundle || !empty($entity_info['bundles'][$bundle]['taxonomy_deep_index_exclude']);
    }
  }

  return FALSE;
}
