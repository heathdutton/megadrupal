<?php
/**
 * @file
 * A module to create Google DFP ad placements.
 */

use \Drupal\google_dfp\GoogleDfp;

/**
 * Implements hook_theme().
 */
function google_dfp_theme($existing, $type, $theme, $path) {
  return array(
    'google_dfp_block' => array(
      'variables' => array('data' => NULL),
      'template' => 'theme/google-dfp-block',
      'file' => 'theme/google_dfp.theme.inc',
    ),
    'google_dfp_plugin_order' => array(
      'file' => 'theme/google_dfp.theme.inc',
      'render element' => 'element',
    ),
    'google_dfp_form' => array(
      'file' => 'theme/google_dfp.theme.inc',
      'template' => 'theme/google-dfp-form',
      'render element' => 'form',
    ),
  );
}

/**
 * Utility to check if a block is already placed, so it isn't placed twice.
 *
 * @param string $delta
 *   The block delta to be placed
 *
 * @return bool
 *   TRUE if the block is already placed, else FALSE.
 */
function google_dfp_block_is_placed($delta) {
  $placements = google_dfp_place_block();
  return isset($placements[$delta]);
}

/**
 * Utility to mark a block as placed, so it isn't placed twice.
 *
 * @param string $delta
 *   (optional) The block delta to be placed. Pass NULL to return all
 *   placements. Defaults to NULL.
 *
 * @return array
 *   An array of placed blocks.
 */
function google_dfp_place_block($delta = NULL) {
  $placements = &drupal_static(__FUNCTION__, array());
  if ($delta) {
    $placements[$delta] = TRUE;
  }
  return $placements;
}

/**
 * Utility method to add the required javascript to a rendered block.
 */
function google_dfpd_js() {
  $added = &drupal_static(__FUNCTION__, FALSE);
  if (!$added) {
    $added = TRUE;
    // @codingStandardsIgnoreStart
    $return = array(
      "var googletag = googletag || {};
      googletag.cmd = googletag.cmd || [];
      (function() {
      var gads = document.createElement('script');
      gads.async = true;
      gads.type = 'text/javascript';
      var useSSL = 'https:' == document.location.protocol;
      gads.src = (useSSL ? 'https:' : 'http:') +
      '//www.googletagservices.com/tag/js/gpt.js';
      var node = document.getElementsByTagName('script')[0];
      node.parentNode.insertBefore(gads, node);
      })();" => array(
        'type' => 'inline',
        'scope' => 'header',
        'weight' => 10,
      ),
      // @codingStandardsIgnoreEnd
      drupal_get_path('module', 'google_dfp') . '/js/jquery.googleDfpAd.plugin.js' => array(
        'type' => 'file',
        'scope' => 'header',
        'weight' => 11,
      ),
      drupal_get_path('module', 'google_dfp') . '/js/google_dfp.js' => array(
        'type' => 'file',
        'scope' => 'header',
        'weight' => 11,
      ),
      'googletag.cmd.push(function() {googletag.pubads().collapseEmptyDivs(); googletag.enableServices();});' => array(
        'type' => 'inline',
        'scope' => 'footer',
        'weight' => 13,
      ),
    );
    if (module_exists('breakpoints')) {
      // Build the setting array.
      $breakpoints = breakpoints_breakpoint_load_all_active(variable_get('theme_default', ''));
      $return[] = array(
        'data' => array('googleDfpBreakpoints' => $breakpoints),
        'type' => 'setting',
      );
    }
    return $return;
  }
  return FALSE;
}

/**
 * Implements hook_block_info().
 */
function google_dfp_block_info() {
  $blocks = array();
  foreach (google_dfp_load() as $google_dfp) {
    $blocks[$google_dfp->placement] = array(
      'info' => t('Google DFP Ad: @title', array('@title' => $google_dfp->name)),
      'cache' => DRUPAL_NO_CACHE,
    );
  }

  return $blocks;
}

/**
 * Implements hook_ctools_plugin_api().
 */
function google_dfp_ctools_plugin_api($owner, $api) {
  if ($owner == 'google_dfp' && $api == 'default_google_dfps') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function google_dfp_ctools_plugin_directory($module, $type) {
  // Load the export_ui plugin.
  if ($type == 'export_ui') {
    return 'plugins/export_ui';
  }
  if ($module == 'google_dfp') {
    return 'lib/Drupal/google_dfp/Plugin/' . str_replace("\\", DIRECTORY_SEPARATOR, $type);
  }
}

/**
 * Loads a google_dfp item by id.
 *
 * @param string $name
 *   (optional) The ad machine name. Defaults to NULL. I
 * @param bool $reset
 *   (optional) Reset the internal cache. Defaults to FALSE
 *
 * @return \Drupal\google_dfp\GoogleDfp|bool|array[\Drupal\google_dfp\GoogleDfp]
 *   If $name is given and item exists, a google_dfp object. If $name is NULL,
 *   returns all known objects. If not found, returns FALSE.
 */
function google_dfp_load($name = NULL, $reset = FALSE) {
  ctools_include('export');
  static $google_dfps;
  static $altered;
  if (!isset($google_dfps) || $reset) {
    $google_dfps = $altered = array();
    if ($reset) {
      ctools_export_load_object_reset('google_dfp');
    }
    $google_dfps = ctools_export_load_object('google_dfp', 'all');
  }
  if (isset($name)) {
    // Allow other modules to alter the value just before it's returned.
    if (isset($google_dfps[$name]) && !isset($altered[$name])) {
      $altered[$name] = TRUE;
      drupal_alter('google_dfp_load', $google_dfps[$name]);
    }
    return isset($google_dfps[$name]) ? $google_dfps[$name] : FALSE;
  }
  return $google_dfps;
}

/**
 * Object factory to initialize an ad object.
 *
 * @param array $schema
 *   Schema definition.
 * @param array $data
 *   Object data.
 *
 * @return \Drupal\google_dfp\GoogleDfpInterface
 *   The loaded object.
 */
function google_dfp_create($schema = array(), $data = NULL) {
  if ($data == NULL) {
    $data = (object) array(
      'api_version' => 1,
      'placement' => '',
      'tiers' => array(),
      'width' => NULL,
      'height' => NULL,
      'position' => 0,
      'screen' => 'all',
      'keywords' => array(),
      'premium' => 0,
    );
  }
  return new GoogleDfp($data);
}

/**
 * Implements hook_ctools_plugin_type().
 */
function google_dfp_ctools_plugin_type() {
  $plugins['GoogleDfp\Keyword'] = array(
    'classes' => array('class'),
    'cache' => TRUE,
  );
  $plugins['GoogleDfp\Tier'] = array(
    'classes' => array('class'),
    'cache' => TRUE,
  );
  return $plugins;
}

/**
 * Implements hook_block_view().
 */
function google_dfp_block_view($delta = '') {
  $block = NULL;
  if (($ad = google_dfp_load($delta)) && !$ad->disabled) {
    $block['content'] = $ad->buildOutput();
  }
  else {
    if (!$ad) {
      watchdog('google_dfp', 'No such block %delta', array('%delta' => $delta), WATCHDOG_ERROR);
    }
  }
  return $block;
}

/**
 * Implements hook_permission().
 */
function google_dfp_permission() {
  return array(
    'administer google_dfp' => array(
      'title' => 'Administer Google DFP ads',
    ),
  );
}
