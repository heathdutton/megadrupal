<?php

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_usaepay_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['usaepay'] = array(
    'base' => 'commerce_usaepay',
    'title' => t('USAePay - Credit Card'),
    'short_title' => t('USAePay CC'),
    'display_title' => t('Credit card'),
    'description' => t('Integrates USAePay for card not present CC transactions.'),
  );

  return $payment_methods;
}

function commerce_usaepay_settings_default() {
  return array(
    'wsdl' => '',
    'source_key' => '',
    'pin' => '',
  );
}

function commerce_usaepay_settings_form(array $settings) {
  $form = array();

  $settings = array_merge(commerce_usaepay_settings_default(), $settings);

  $form['wsdl'] = array(
    '#title' => 'URL to WSDL',
    '#type' => 'textfield',
    '#description' => 'This is the URL to the WSDL generated through the USAePay portal.<br />Ex: https://www.usaepay.com/soap/gate/ABCDEFG123/usaepay.wsdl',
    '#default_value' => $settings['wsdl'],
  );

  $form['source_key'] = array(
    '#title' => 'Source key',
    '#type' => 'textfield',
    '#description' => 'Source key for the merchant account.',
    '#default_value' => $settings['source_key'],
  );

  $form['pin'] = array(
    '#title' => 'PIN',
    '#type' => 'textfield',
    '#description' => 'PIN for the merchant account.',
    '#default_value' => $settings['pin'],
  );


  return $form;
}

/**
 * Get a USAePay SOAP client.
 *
 * @param array $payment_method
 *   The instance ID of the payment method.
 */
function commerce_usaepay_client($payment_method) {
  static $client;
  if (!$client) {
    $wsdl = $payment_method['settings']['wsdl'];

    $client = new SoapClient($wsdl);
  }

  return $client;
}

function commerce_usaepay_call($payment_method, $function) {
  $client = commerce_usaepay_client($payment_method);

  $source_key = $payment_method['settings']['source_key'];
  $pin = $payment_method['settings']['pin'];

  // generate random seed value
  $seed = mktime() . rand();

  // make hash value using sha1 function
  $clear = $source_key . $seed . $pin;
  $hash = sha1($clear);

  // assembly ueSecurityToken as an array
  $token = array(
    'SourceKey' => $source_key,
    'PinHash' => array(
      'Type' => 'sha1',
      'Seed' => $seed,
      'HashValue' => $hash
    ),
    'ClientIP' => ip_address(),
  );

  $args = func_get_args();
  array_shift($args);
  array_shift($args);
  array_unshift($args, $token);

  try {
    return call_user_func_array(array($client, $function), $args);
  } catch (Exception $e) {
    watchdog('commerce_usaepay', t('USAePay SOAP Error !error'), array('!error' => $e->getMessage()), WATCHDOG_ALERT);
  }
}

/**
 * Callback: checkout form.
 */
function commerce_usaepay_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
  return commerce_payment_credit_card_form(array('code' => ''));
}

/**
 * Callback: checkout form validation.
 */
function commerce_usaepay_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
  // Validate the credit card fields.
  $settings = array(
    'form_parents' => array_merge($form_parents, array('credit_card')),
  );
  if (!commerce_payment_credit_card_validate($pane_values['credit_card'], $settings)) {
    return FALSE;
  }
}

/**
 * Callback: checkout form submit.
 */
function commerce_usaepay_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $billing_address = $order_wrapper->commerce_customer_billing->commerce_customer_address->value();
  if (module_exists('commerce_shipping')) {
    $shipping_address = $order_wrapper->commerce_customer_shipping->commerce_customer_address->value();
  }

  // Build a description for the order.
  $description = array();

  foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
    if (in_array($line_item_wrapper->type->value(), commerce_product_line_item_types())) {
      $description[] = round($line_item_wrapper->quantity->value(), 2) . 'x ' . $line_item_wrapper->line_item_label->value();
    }
  }

  $usaepay_trans = array(
    'CreditCardData' => array(
      'CardCode' => $pane_values['credit_card']['code'],
      'CardNumber' => $pane_values['credit_card']['number'],
      'CardPresent' => FALSE,
      'CardExpiration' => $pane_values['credit_card']['exp_month'] . substr($pane_values['credit_card']['exp_year'], 2),
    ),
    'ClientIP' => ip_address(),
    'Details' => array(
      'OrderID' => $order->order_id,
      'Amount' => commerce_currency_amount_to_decimal($charge['amount'], $charge['currency_code']),
      'Currency' => $charge['currency_code'],
      'Description' => implode("\n", $description),
    ),
    'BillingAddress' => array(
      'FirstName' => $billing_address['first_name'],
      'LastName' => $billing_address['last_name'],
      'Street' => $billing_address['thoroughfare'],
      'City' => $billing_address['locality'],
      'State' => $billing_address['administrative_area'],
      'Country' => $billing_address['country'],
      'Zip' => $billing_address['postal_code'],
    ),
    'AccountHolder' => $billing_address['first_name'] . ' ' . $billing_address['last_name'],
  );

  // Adds $shipping_address to $usaepay_trans
  if (!empty($shipping_address)) {
    $shipping_address_array = array(
      'ShippingAddress' => array(
        'FirstName' => $shipping_address['first_name'],
        'LastName' => $shipping_address['last_name'],
        'Street' => $shipping_address['thoroughfare'],
        'City' => $shipping_address['locality'],
        'State' => $shipping_address['administrative_area'],
        'Country' => $shipping_address['country'],
        'Zip' => $shipping_address['postal_code'],
      ),
    );
    $usaepay_trans = array_merge($usaepay_trans, $shipping_address_array);
  }

  $transaction = commerce_payment_transaction_new('usaepay', $order->order_id);

  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $charge['amount'];

  drupal_alter('commerce_usaepay_transaction', $usaepay_trans, $pane_values, $order, $charge);
  $r = commerce_usaepay_call($payment_method, 'runSale', $usaepay_trans);
  $transaction->remote_id = $r->RefNum;
  if ($r->ResultCode != 'A') {
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
    $transaction->message = $r->Error;
    drupal_set_message(t('We encountered an error processing your payment. Please verify your credit card details or try a different card.'), 'error');
  }
  else {
    $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
    $transaction->message = $r->Result;
  }
  $transaction->payload[REQUEST_TIME] = $r;
  commerce_payment_transaction_save($transaction);

  return $transaction->status == COMMERCE_PAYMENT_STATUS_SUCCESS;
}
