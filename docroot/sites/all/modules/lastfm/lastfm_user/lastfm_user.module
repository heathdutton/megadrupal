<?php

// Implementation of hook_menu
function lastfm_user_menu() {
  $items['user/%user/lastfm'] = array(
    'title' => 'Last.fm',
    'description' => 'Authentication settings for Last.fm',
    'page callback' => 'lastfm_user_user_page',
    'page arguments' => array(1),
    'access callback' => 'lastfm_user_user_access',
    'access arguments' => array(1, 'authorize lastfm account'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['user/%user/lastfm/authorize'] = array(
    'page callback' => 'lastfm_user_callback',
    'access callback' => 'lastfm_user_user_access',
    'access arguments' => array(1, 'authorize lastfm account'),
    'type' => MENU_CALLBACK,
  );
  $items['user/%user/lastfm/reset'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lastfm_user_reset_account', 1),
    'access callback' => 'lastfm_user_user_access',
    'access arguments' => array(1, 'authorize lastfm account'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Check which user is logged in and that they have the proper permission.
 */
function lastfm_user_user_access($account, $perm) {
  global $user;
  if ($user->uid === $account->uid && user_access($perm)) {
    return true;
  }
  return false;
}

/**
 * Page callback for managing Last.fm credentials
 *
 * @param $account
 *   User object
 */
function lastfm_user_user_page($account) {
  // TODO show more infor from user.getInfo http://www.last.fm/api/show?service=344
  if (!empty($account->lastfm_user)) {
    $o = '<p>'. t("This account is connected to the Last.fm user !user.", array(
      '!user' => l($account->lastfm_user['name'], 'http://www.last.fm/user/' .$account->lastfm_user['name'])
    )) .'</p>';
    $o .= '<p>'. t('To reset this association !link', array(
      '!link' => l(t('click here'), "user/$account->uid/lastfm/reset"))) .'</p>';
    $o .= '<p>'. t('To de-authorize this application log in to Last.fm and visit !link.',
      array('!link' => l(t('Settings > Applications'), 'http://www.last.fm/settings/applications')));
  }
  else {
    $o = t("Click here to connect your Last.fm account: ") . lastfm_user_authorization_link($account);
  }
  return $o;
}

/**
 * Generate an Last.fm authorization link.
 *
 * @param $account
 *   An user account to generate an authorization link for.
 */
function lastfm_user_authorization_link($account){
  $api_key = variable_get('lastfm_api_key', '');
  if ($api_key) {
    $url = "http://www.last.fm/api/auth/";
    $options = array('query' => array(
      'api_key' => $api_key,
      'cb' => url("user/{$account->uid}/lastfm/authorize", array('absolute' => true)),
    ));
    return l('Authorize', $url, $options);
  }
  watchdog('Lastfm API', t('Attempted to generate Last.fm authorization link before credentians had been set.'), 'WATCHDOG_WARNING');
  return '';
}

/**
 * Page callback for API authorizations process.
 * @see http://www.last.fm/api/webauth
 */
function lastfm_user_callback() {
  global $user;
  if (isset($_GET['token']) && $user->uid) {
    $data = array(
      'method' => 'auth.getSession',
      'token' => $_GET['token'],
      'api_key' => variable_get('lastfm_api_key', ''),
    );
    lastfm_user_sign($data);

    $url = url(LASTFM_DEFAULT_API_URL, array('query' => $data, 'absolute' => true));
    $response = drupal_http_request($url);

    $xml = new SimpleXMLElement($response->data);
    if ($xml['status'] == 'ok') {
      $info['name'] = (string)$xml->session->name;
      $info['key'] = (string)$xml->session->key;
      $info['subscriber'] = (string)$xml->session->subscriber;
      user_save($user, array('lastfm_user' => $info));
      drupal_set_message(t('Account authorization sucessful.'), 'status');
    }
    else {
      drupal_set_message(t('An error occured: ') . $response->data, 'error');
    }
    drupal_goto("user/{$user->uid}/lastfm");
  }
  else {
    return drupal_not_found();
  }
}

/**
 * Account association reset form
 */
function lastfm_user_reset_account(&$form_state, $account) {
  $form = array(
    'account' => array(
      '#type' => 'value',
      '#value' => $account,
    ),
    '#redirect' => "user/{$account->uid}/lastfm",
  );
  return confirm_form($form, t('Are you sure you want to reset this authorization?'), "user/{$account->uid}/lastfm");
}

// Submit handler for lastfm_user_reset_account.
function lastfm_user_reset_account_submit(&$form, &$form_state) {
  $account = $form_state['values']['account'];
  user_save($account, array('lastfm_user' => null));
  drupal_set_message(t('Last.fm account settings have been reset'), 'status');
}

/**
 * Generate a signature parameter for a call to the api and add it to the
 * params array.
 * @see http://www.last.fm/api/webauth#6
 *
 * @param $params
 *    The method of the request that is being signed.
 *
 * @return TRUE if the $params were successfully signed.
 */
function lastfm_user_sign(&$params) {
  $secret = variable_get('lastfm_api_secret', '');
  if ($secret) {
    ksort($params);
    $str = '';
    foreach ($params as $k => $v) {
      $str .= $k . $v;
    }
    $params['api_sig'] = md5($str . $secret);
    return true;
  }
  return false;
}

