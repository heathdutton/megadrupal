<?php
/**
 * @file
 * Main file for the  Dynamic Zendesk forms module.
 */

/**
 * Suffix variables for the Zendesk Service.
 */
define('DYNAMIC_ZENDESK_FORMS_REQUEST_LIST_FORMS', 'ticket_forms.json');
define('DYNAMIC_ZENDESK_FORMS_REQUEST_LIST_FIELDS', 'ticket_fields.json');
define('DYNAMIC_ZENDESK_FORMS_REQUEST_CREATE_TICKET', 'tickets.json');

/**
 * Implements hook_help().
 */
function dynamic_zendesk_forms_help($path, $arg) {
  switch ($path) {
    case 'admin/help#dynamic_zendesk_forms':
      return _dynamic_zendesk_forms_get_readme();
  }
}

/**
 * Returns the readme txt file content.
 *
 * @return mixed|string
 *   Returns the readme txt file content.
 */
function _dynamic_zendesk_forms_get_readme() {
  $readme = file_get_contents(dirname(__FILE__) . '/README.txt');
  $output = '<pre>' . check_plain($readme) . '</pre>';

  return $output;
}

/**
 * Implements hook_permission().
 */
function dynamic_zendesk_forms_permission() {
  $permissions = array(
    'administer dyanamic zendesk forms' => array(
      'title' => t('Administer Dynamic Zendesk Forms'),
      'description' => t('Perform administration tasks for Zendesk.'),
    ),
  );

  return $permissions;
}

/**
 * Implements hook_menu().
 */
function dynamic_zendesk_forms_menu() {
  $items = array(
    'admin/config/services/zendesk' => array(
      'title' => 'Zendesk',
      'description' => 'Zendesk integration configurations',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('dynamic_zendesk_forms_admin_form'),
      'access arguments' => array('administer administer dyanamic zendesk forms'),
      'file' => 'dynamic_zendesk_forms.admin.inc',
      'weight' => 1,
    ),
  );

  return $items;
}

/**
 * Implements hook_block_info().
 */
function dynamic_zendesk_forms_block_info() {
  $blocks = array();
  $blocks['dynamic_zendesk_support_form'] = array(
    'info' => t('Zendesk support form'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function dynamic_zendesk_forms_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'dynamic_zendesk_support_form':
      $block['content'] = drupal_get_form('dynamic_zendesk_forms_create_ticket_form');
      break;
  }
  return $block;
}


/**
 * Callback for create ticket form.
 *
 * @param array $form
 *   Nested array of form elements that comprise the form.
 * @param array $form_state
 *   A keyed array containing the current state of the form.
 *
 * @return array|bool
 *   Returns a updated form array.
 */
function dynamic_zendesk_forms_create_ticket_form(array $form, array &$form_state) {
  $form = array();

  $ticket_form_id = variable_get('dynamic_zendesk_forms_ticket_form_id', '');

  if (empty($ticket_form_id)) {
    return FALSE;
  }

  $ticket_fields = _dynamic_zendesk_forms_list_fields_by_form_id($ticket_form_id);
  $field_rules = _dynamic_zendesk_forms_list_conditional_fields($ticket_form_id);

  foreach ($ticket_fields as $field) {
    if (!$field['active'] && empty($field_rules[$field['id']])) {
      continue;
    }

    switch ($field['type']) {
      case 'tagger':
        _dynamic_zendesk_forms_get_select_field_html($form, $field, $field_rules);
        break;

      case 'textarea':
        _dynamic_zendesk_forms_get_textarea_field_html($form, $field, $field_rules);
        break;

      case 'text':
      case 'regexp':
      case 'default':
        _dynamic_zendesk_forms_get_text_field_html($form, $field, $field_rules);
        break;
    }
  }

  $form['#attributes'] = array('class' => 'zendesk-support-form');
  $form['save_ticket'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );

  return $form;
}

/**
 * Validates the user input.
 *
 * @param array $form
 *   Nested array of form elements that comprise the form.
 * @param array $form_state
 *   A keyed array containing the current state of the form.
 */
function dynamic_zendesk_forms_create_ticket_form_validate(array $form, array &$form_state) {
  // Validates the required condition for conditional fields.
  $ticket_form_id = variable_get('dynamic_zendesk_forms_ticket_form_id', '');
  if (empty($ticket_form_id)) {
    return;
  }

  $field_rules = _dynamic_zendesk_forms_list_conditional_fields($ticket_form_id);
  $user_input = $form_state['values'];

  if (is_array($field_rules) && is_array($user_input)) {
    foreach ($field_rules as $rule_id => $rule) {
      if (!empty($user_input[$rule->field]) && $user_input[$rule->field] == $rule->value && empty($user_input[$rule_id])) {
        form_set_error($rule_id, t('%field is a required field', array('%field' => $rule->fieldsText)));
      }
    }
  }

  $fields_configuration = variable_get('dynamic_zendesk_forms_fields_configuration', array());
  $email_field_id = isset($fields_configuration['requester_email']) ? $fields_configuration['requester_email'] : '';
  if (!empty($email_field_id) && !valid_email_address($user_input[$email_field_id])) {
    form_set_error($email_field_id, t('You must enter a valid e-mail address.'));
  }
}

/**
 * Returns text form field.
 *
 * @param array $form
 *   Nested array of form elements that comprise the form.
 * @param array $field
 *   Comprises information about the Zendesk ticket field.
 * @param array $field_rules
 *   Nested array of field rules created in Zendesk admin settings.
 */
function _dynamic_zendesk_forms_get_text_field_html(array &$form, array $field, array $field_rules) {
  $form[$field['id']] = array(
    '#type' => 'textfield',
    '#title' => check_plain($field['label']),
    '#required' => $field['required'],
  );

  if (isset($field_rules[$field['id']])) {
    $rule = $field_rules[$field['id']];
    $form[$field['id']]['#states'] = array(
      'visible' => array(
        ':input[name="' . $rule->field . '"]' => array('value' => $rule->value),
      ),
      'required' => array(
        ':input[name="' . $rule->field . '"]' => array('value' => $rule->value),
      ),
    );
  }
}

/**
 * Returns select box form field.
 *
 * @param array $form
 *   Nested array of form elements that comprise the form.
 * @param array $field
 *   Comprises information about the Zendesk ticket field.
 * @param array $field_rules
 *   Nested array of field rules created in Zendesk admin settings.
 */
function _dynamic_zendesk_forms_get_select_field_html(array &$form, array $field, array $field_rules) {
  $options = array('' => $field['label']);
  foreach ($field['options'] as $value) {
    $options[$value['value']] = $value['name'];
  }

  $form[$field['id']] = array(
    '#type' => 'select',
    '#title' => check_plain($field['label']),
    '#required' => $field['required'],
    '#options' => $options,
  );

  if (isset($field_rules[$field['id']])) {
    $rule = $field_rules[$field['id']];
    $form[$field['id']]['#states'] = array(
      'visible' => array(
        ':input[name="' . $rule->field . '"]' => array('value' => $rule->value),
      ),
      'required' => array(
        ':input[name="' . $rule->field . '"]' => array('value' => $rule->value),
      ),
    );
  }
}

/**
 * Returns text area form field.
 *
 * @param array $form
 *   Nested array of form elements that comprise the form.
 * @param array $field
 *   Comprises information about the Zendesk ticket field.
 * @param array $field_rules
 *   Nested array of field rules created in Zendesk admin settings.
 */
function _dynamic_zendesk_forms_get_textarea_field_html(array &$form, array $field, array $field_rules) {
  $form[$field['id']] = array(
    '#type' => 'textarea',
    '#title' => check_plain($field['label']),
    '#required' => $field['required'],
  );

  if (isset($field_rules[$field['id']])) {
    $rule = $field_rules[$field['id']];
    $form[$field['id']]['#states'] = array(
      'visible' => array(
        ':input[name="' . $rule->field . '"]' => array('value' => $rule->value),
      ),
      'required' => array(
        ':input[name="' . $rule->field . '"]' => array('value' => $rule->value),
      ),
    );
  }
}


/**
 * Performs a call to the Zendesk API.
 *
 * @param string $service_path
 *   Zendesk Service api path.
 * @param array $data
 *   Array of post input parameters to rest api.
 *
 * @return mixed
 *   Returns the response from the curl rest api call.
 */
function _dynamic_zendesk_forms_perform_curl_request($service_path = '', array $data = array()) {
  // Due to zendesk auth handling mismatches with drupal using curl.
  $zendesk_key  = variable_get('dynamic_zendesk_forms_api_key', '');
  $zendesk_url  = variable_get('dynamic_zendesk_forms_api_url', '');
  $zendesk_user = variable_get('dynamic_zendesk_forms_user_name', '');

  $ch = curl_init();
  curl_setopt($ch, CURLOPT_FOLLOWLOCATION, TRUE);
  curl_setopt($ch, CURLOPT_MAXREDIRS, 10);
  curl_setopt($ch, CURLOPT_URL, $zendesk_url . $service_path);
  curl_setopt($ch, CURLOPT_USERPWD, $zendesk_user . '/token:' . $zendesk_key);
  curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-type: application/json'));

  $http_proxy_server = variable_get('proxy_server', FALSE);
  $http_proxy_port = variable_get('proxy_port', 80);

  if ($http_proxy_server) {
    curl_setopt($ch, CURLOPT_PROXY, "{$http_proxy_server}:{$http_proxy_port}");
  }

  if (count($data) > 0) {
    $json = drupal_json_encode($data);
    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "POST");
    curl_setopt($ch, CURLOPT_POSTFIELDS, $json);
  }

  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($ch, CURLOPT_TIMEOUT, 120);
  $output = curl_exec($ch);
  curl_close($ch);

  return drupal_json_decode($output);
}

/**
 * Returns ticket fields created in Zendesk.
 *
 * @return array
 *   Returns the list of fields created in Zendesk admin.
 */
function _dynamic_zendesk_forms_list_form_fields() {
  $ticket_fields = array();
  $fields_list = _dynamic_zendesk_forms_perform_curl_request(DYNAMIC_ZENDESK_FORMS_REQUEST_LIST_FIELDS);

  if (isset($fields_list['ticket_fields'])) {
    foreach ($fields_list['ticket_fields'] as $field) {
      if ($field['type'] == 'description') {
        continue;
      }

      $ticket_field = array();
      $ticket_field['id'] = $field['id'];
      $ticket_field['label'] = $field['title'];
      $ticket_field['title_in_portal'] = $field['title_in_portal'];
      $ticket_field['active'] = ($field['active'] && $field['visible_in_portal']) ? 1 : 0;
      $ticket_field['required'] = $field['required'];
      $ticket_field['type'] = $field['type'];
      $ticket_field['regexp_for_validation'] = $field['regexp_for_validation'];
      if ($field['type'] == 'tagger') {
        $ticket_field['options'] = isset($field['custom_field_options']) ? $field['custom_field_options'] : array();

        if (!isset($field['custom_field_options']) && isset($field['system_field_options'])) {
          $ticket_field['options'] = $field['system_field_options'];
        }
      }

      $ticket_fields[$field['id']] = $ticket_field;
    }
  }

  return $ticket_fields;
}

/**
 * Returns fields configured for the form.
 *
 * @param string $form_id
 *   Contains value of the configured Zendesk form id in the admin settings.
 *
 * @return array
 *   Returns list of zendesk fields based on the form id input.
 */
function _dynamic_zendesk_forms_list_fields_by_form_id($form_id = '') {
  $ticket_fields = array();

  $fields_list = _dynamic_zendesk_forms_perform_curl_request("ticket_forms/{$form_id}.json");
  $field_details = _dynamic_zendesk_forms_list_form_fields();

  if (isset($fields_list['ticket_form']['ticket_field_ids'])) {
    foreach ($fields_list['ticket_form']['ticket_field_ids'] as $field_id) {
      if (isset($field_details[$field_id])) {
        $ticket_fields[] = $field_details[$field_id];
      }
    }
  }

  return $ticket_fields;
}

/**
 * Creates a ticket in Zendesk based on user input.
 *
 * @param array $form
 *   Nested array of form elements that comprise the form.
 * @param array $form_state
 *   A keyed array containing the current state of the form.
 *
 * @return array
 *   Returns a array compressing the status of the create ticket request.
 */
function dynamic_zendesk_forms_create_ticket_form_submit(array $form, array &$form_state) {
  $ticket_info = array();
  $custom_fields = array();

  $user_input = $form_state['values'];;

  foreach ($user_input as $key => $value) {
    $custom_fields[] = array(
      'id' => $key,
      'value' => $value,
    );
  }

  $fields_configuration = variable_get('dynamic_zendesk_forms_fields_configuration', array());

  $name_field_id = isset($fields_configuration['requester_name']) ? $fields_configuration['requester_name'] : '';
  $requester_name = (!empty($name_field_id)) ? $user_input[$name_field_id] : '';

  $email_field_id = isset($fields_configuration['requester_email']) ? $fields_configuration['requester_email'] : '';
  $requester_email = (!empty($email_field_id)) ? $user_input[$email_field_id] : '';

  $description_field_id = isset($fields_configuration['description']) ? $fields_configuration['description'] : '';
  $description = (!empty($description_field_id)) ? $user_input[$description_field_id] : '';

  $ticket_info['ticket'] = array(
    'requester' => array(
      'name' => $requester_name,
      'email' => $requester_email,
    ),
    'comment' => array(
      'body' => $description,
    ),
    'custom_fields' => $custom_fields,
  );

  $response = _dynamic_zendesk_forms_perform_curl_request(DYNAMIC_ZENDESK_FORMS_REQUEST_CREATE_TICKET, $ticket_info);

  if (isset($response['error'])) {
    $error_message = $response['details']['base'][0]['description'];
    $status = array(
      'status' => 'error',
      'error_message' => $error_message,
    );
    watchdog('DYNAMIC_ZENDESK_FORMS', $error_message, NULL, WATCHDOG_ERROR);
  }
  else {
    $status = array(
      'status' => 'success',
    );
    drupal_set_message(t('Your message has been sent'));
  }

  return $status;
}

/**
 * Lists all the conditional rules set up in Zendesk.
 *
 * @param string $ticket_form_id
 *   Contains value of the configured Zendesk form id in the admin settings.
 *
 * @return array
 *   Returns the array compressing of conditional field rules set in zendesk.
 */
function _dynamic_zendesk_forms_list_conditional_fields($ticket_form_id = '') {
  $cache_minimum_lifetime = variable_get('dynamic_zendesk_forms_cache_lifetime', 172800);
  $cache = ($cache_minimum_lifetime > 0) ? cache_get('dynamic_zendesk_forms:conditional:fields') : FALSE;
  if ($cache && REQUEST_TIME < $cache->expire) {
    // Returns the cached result if the cache has a unexpired content.
    return $cache->data;
  }

  $rules_list = _dynamic_zendesk_forms_perform_curl_request('apps/installations.json');
  $conditional_rules = array();
  $field_rules = array();

  if (isset($rules_list['installations'])) {
    foreach ($rules_list['installations'] as $value) {
      if ($value['settings']['title'] == 'Conditional Fields') {
        $conditional_rules = drupal_json_decode($value['settings']['rules']);
      }
    }
  }

  foreach ($conditional_rules as $value) {
    if ($value['formId'] == $ticket_form_id && isset($value['select'][0])) {
      $field_rules[$value['select'][0]] = (object) $value;
    }
  }
  $cache_expire = REQUEST_TIME + $cache_minimum_lifetime;
  cache_set('dynamic_zendesk_forms:conditional:fields', $field_rules, 'cache', $cache_expire);

  return $field_rules;
}
