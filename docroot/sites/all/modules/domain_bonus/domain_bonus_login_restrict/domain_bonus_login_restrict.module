<?php
/**
 * Domain Bonus: Login restrict module
 * Prevents users logging into domains that aren't assigned to them.
 */

/**
 * Implements hook_permission().
 *
 */
function domain_bonus_login_restrict_permission() {
  return array(
    'login to any domain' => array(
      'title' => t('Login to any domain'),
      'description' => t('Users with this permission can log in to any domain.' .
        '<br /><br />'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function domain_bonus_login_restrict_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {

    // Provide the necessary form validation on user login forms.
    case 'user_login':
    case 'user_login_block':

      // If we are already validating form.
      if (is_array($form['#validate'])) {
        // Add validate function to beginning of hook array.
        array_unshift($form['#validate'], '_domain_bonus_login_restrict_validate');
      }
      else {
        // Add form validation.
        $form['#validate'][] = '_domain_bonus_login_restrict_validate';
      }
      break;

    // Provide option to enable / disable restriction on domain settings form.
    case 'domain_configure_form':
      object_log('form_id ' . time(), $form_id);
      object_log('form_state ' . time(), $form_state);
      object_log('form ' . time(), $form);

      // Add form element fieldset.
      $form['domain_account_login_fieldset'] = array(
        '#type' => 'fieldset',
        '#title' => t('Domain Bonus: Login restrict'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        '#weight' => 1
      );

      // Add form element.
      $form['domain_account_login_fieldset']['domain_bonus_login_restrict_enabled'] = array(
        '#type' => 'checkbox',
        '#title' => t('Enable restriction'),
        '#default_value' => variable_get('domain_bonus_login_restrict_enabled', 1),
        '#description' => t('If checked allow user account login by registered domain' .
          ' affiliation only.'),
        '#weight' => 1
      );

      // Put buttons under fieldset.
      $form['buttons']['#weight'] = 2;
      break;

    default: break;
  }
}

/**
 * Validate handler on the login form.
 */
function _domain_bonus_login_restrict_validate($form, &$form_state) {
  $submitted = $form_state['values'];
  if (variable_get('domain_bonus_login_restrict_enabled', 0)) {
    if (isset($submitted['name']) && ($submitted['name'] != '')) {
      // If load user object from submitted username is successful.
      if ($account = user_load_by_name($submitted['name'])) {

        $domain = module_invoke('domain', 'get_domain'); // return the active domain

        // If the active domain id is not assigned to user validated, and user is not
        // permitted to access any domain.
        if (!in_array($domain['domain_id'], $account->domain_user) &&
          !user_access('login to any domain', $account)) {

          // Display error on form.
          form_set_error('name', t('Sorry, unrecognized UBERNAME or password.'
            . ' <a href="@password">Have you forgotten your password?</a>',
            array('@password' => url('user/password'))));

          // Log attempt to log in by user, in the database.
          watchdog('user', 'Login attempt restricted for %user by <em>Domain Bonus: Login'
            . ' restrict</em>. Domain <em>' . $domain['subdomain'] . '</em> was not'
            . ' assigned to them.', array('%user' => $form_state['values']['name']));
        }
      }
    }
  }
}

/**
 * Implements hook_init().
 *
 * Provide restriction on non-cached page load, logging the user out and
 * destroying the session automatically if restriction is determined for
 * user after already being logged in.
 */
function domain_bonus_login_restrict_init() {

  // Return the active user.
  global $user;

  if (variable_get('domain_bonus_login_restrict_enabled', 0) && $user->uid) {

    // Return the active domain.
    $domain = module_invoke('domain', 'get_domain');

    // If the active domain id is not assigned to user validated, and user is not
    // permitted to access any domain, kick the user out and destroy their session.
    if (isset($user->domain_user)) {
      if (!in_array($domain['domain_id'], $user->domain_user) &&
        !user_access('login to any domain')) {

        // Log user being logged out automatically, in the database.
        watchdog('user', 'User %user kicked out from domain <em>' . $domain['subdomain']
          . '</em> by <em>Domain Bonus: Login restrict</em>. Domain <em>'
          . $domain['subdomain'] . '</em> was not assigned to them.',
          array('%user' => $user->name));

        // Log user out immediately.
        _domain_bonus_login_restrict_logout($user);
      }
    }
  }
}

/**
 * Helper function for when restriction is determined on the fly.
 *
 * Log the user out destroying the current session, reset $user to the anonymous user, and
 * re-direct to home page.
 */
function _domain_bonus_login_restrict_logout($account) {

  // Log user being logged out automatically, in the database.
  watchdog('user', 'Session closed automatically for user %name by module <em>Domain'
    . ' Bonus: Login restrict</em>.', array('%name' => $account->name));

  module_invoke_all('user_logout', $account);

  // Destroy the current session, and reset $user to the anonymous user.
  session_destroy();

  drupal_goto();
}
