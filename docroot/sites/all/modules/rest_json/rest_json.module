<?php

define('PARAM_REQUIRED', TRUE);

// Module config
require_once('rest-config.inc');
require_once('includes/rest.node.inc');
require_once('includes/rest.comment.inc');
require_once('includes/rest.user.inc');

/**
 * Implements hook_init().
 */
function rest_json_init() {
	// Track page generation time
	global $rest_json_page_time;
	$rest_json_page_time = microtime(TRUE);
	
	// CORS
	$method = $_SERVER['REQUEST_METHOD'];
	if (isset($_SERVER['HTTP_ORIGIN'])) {
		drupal_add_http_header('Access-Control-Allow-Origin', $_SERVER['HTTP_ORIGIN']);
		drupal_add_http_header('Access-Control-Allow-Credentials', 'true');
	}
	if (isset($_SERVER['HTTP_ACCESS_CONTROL_REQUEST_HEADERS'])) {
		drupal_add_http_header('Access-Control-Allow-Headers', $_SERVER['HTTP_ACCESS_CONTROL_REQUEST_HEADERS']);
	}
	if (isset($_SERVER['HTTP_ACCESS_CONTROL_REQUEST_METHOD'])) {
		drupal_add_http_header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
	}
	if ($method == 'OPTIONS') {
		exit;
	}
} // rest_json_init

/**
 * Implements hook_menu().
 */
function rest_json_menu() {
	global $rest_conf;
	
	$items = array();
	
	// *** PERMISSION is not enforced by design ***
	// Each API has an internal permission system to account for JSON replies!
	
	// NODE APIs
	$items[$rest_conf['rest_prefix'].'/list/%'] = array(
		'page callback' => 'page_rest_json_list',
		'page arguments' => array(2, 3),
		'access callback' => TRUE,
		'type' => MENU_CALLBACK,
	);
	$items[$rest_conf['rest_prefix'].'/node/%'] = array(
		'page callback' => 'page_rest_json_node',
		'page arguments' => array(2),
		'access callback' => TRUE,
		'type' => MENU_CALLBACK,
	);
	$items[$rest_conf['rest_prefix'].'/add/node/%'] = array(
		'page callback' => 'page_rest_json_add_node',
		'page arguments' => array(3),
		'access callback' => TRUE,
		'type' => MENU_CALLBACK,
	);
	
	// COMMENT APIs
	$items[$rest_conf['rest_prefix'].'/add/comment/%'] = array(
		'page callback' => 'page_rest_json_add_comment',
		'page arguments' => array(3),
		'access callback' => TRUE,
		'type' => MENU_CALLBACK,
	);
	
	// USER APIs
	$items[$rest_conf['rest_prefix'].'/user/login'] = array(
		'page callback' => 'page_rest_json_user_login',
		'access callback' => TRUE,
		'type' => MENU_CALLBACK,
	);
	$items[$rest_conf['rest_prefix'].'/user/logout'] = array(
		'page callback' => 'page_rest_json_user_logout',
		'access callback' => TRUE,
		'type' => MENU_CALLBACK,
	);
	$items[$rest_conf['rest_prefix'].'/user/auth'] = array(
		'page callback' => 'page_rest_json_user_auth',
		'access callback' => TRUE,
		'type' => MENU_CALLBACK,
	);
	$items[$rest_conf['rest_prefix'].'/user/register'] = array(
		'page callback' => 'page_rest_json_user_register',
		'access callback' => TRUE,
		'type' => MENU_CALLBACK,
	);
	$items[$rest_conf['rest_prefix'].'/user/password/change'] = array(
		'page callback' => 'page_rest_json_user_password',
		'page arguments' => array(3),
		'access callback' => TRUE,
		'type' => MENU_CALLBACK,
	);
	$items[$rest_conf['rest_prefix'].'/user/password/reset'] = array(
		'page callback' => 'page_rest_json_user_password',
		'page arguments' => array(3),
		'access callback' => TRUE,
		'type' => MENU_CALLBACK,
	);
	
	// IMAGE APIs
	// FIXME: cannot get around anti-ddos for image derivatives :(
	$items[$rest_conf['rest_prefix'].'/image/%'] = array(
		'page callback' => 'page_rest_image',
		'page arguments' => array(2),
		'access callback' => TRUE,
		'type' => MENU_CALLBACK,
	);
	
	return $items;
} // rest_json_menu

/**
 * Prints a JSON response.
 *
 * @param $result TRUE (success) or FALSE (failure)
 * @param $bundle 'node' or 'user'
 * @param $content single object or array of objects to print
 * @param $message message to return to the user
 */
function rest_json_response($result, $bundle, $content, $message='', $is_cached=FALSE) {
	// Track page generation time
	global $rest_json_page_time;
	$page_generation_time = round(1000 * (microtime(TRUE) - $rest_json_page_time), 2);
	
	// JSON header
	header("Content-Type: application/json");
	
	// Base response with result and message
	$json = array(
		'result' => $result, 
		'message' => t($message, array(), array('context'=>'rest')),
		'cached' => $is_cached ? TRUE : FALSE,
		'gentime' => $page_generation_time,
		'count' => is_array($content) ? count($content) : ($content ? 1 : 0),
	);
	if (is_array($content)) $json[$bundle.'s'] = $content;
	else $json[$bundle] = $content;
	
	print json_encode($json, isset($_GET['d']) ? JSON_PRETTY_PRINT : 0);
	exit;
} // rest_json_response

function check_user_auth($permission='access content') {
	global $user;
	
#	if ($user->uid == 0) rest_json_response(FALSE, 'user', NULL, 
#			'You must be logged in to perform this action');

	if (!user_access($permission)) {
		rest_json_response(FALSE, 'user', NULL, 'Access denied');
	}
} // check_user_auth

/**
 * Get the value for a given field.
 *
 * @param wrapper The entity wrapper.
 * @param field The field name to load.
 */
function rest_json_value($wrapper, $field) {
	global $rest_conf;
	
	$value = NULL;
	$entity = $wrapper->value();
	$info = $wrapper->getPropertyInfo();
	
	if (isset($info[$field])) {
		// Get field value from node wrapper
		$value = $wrapper->{$field}->value();
		
		// Get value type
		$type = isset($info[$field]['type']) ? $info[$field]['type'] : '';
		
		if ($type == 'integer') {
			// Integer: convert to a real integer value
			$value = intval($value);
		}
		elseif ($type == 'token' || $type == 'text') {
			// Text: just trim and replace apostrophe
			$value = str_replace('&#039;', "'", trim($value));
		}
		elseif ($type == 'field_item_image') {
			// Images: style as per config and return url
			$file = !empty($value->file) ? $value->file->value() : file_load($value['fid']);
			$value = image_style_url($rest_conf['image_style'], $file->uri);
			// Force image generation as a workaround for permission issues
			rest_json_generate_image_derivative($file->uri);
			// Images: use internal callback to better manage permissions on derivaties
#			$value = url($rest_conf['rest_prefix'].'/image/'.$value['fid'], array('absolute'=>TRUE));
		}
		elseif ($type == 'field_item_file') {
			// File: return url
			$file = !empty($value->file) ? $value->file->value() : file_load($value['fid']);
			$value = file_create_url($file->uri);
		}
		elseif ($type == 'taxonomy_term') {
			// Taxonomy: use name (localized)
			$value = $value ? t($value->name) : '';
		}
		elseif ($type == 'fivestar') {
			if ($wrapper->info()['type'] == 'node') {
				// Fivestar: use average vote of source translation, if available
				$rating = fivestar_get_votes('node', !empty($entity->tnid) ? $entity->tnid : $entity->nid);
				$value = !empty($rating['average']) ? intval($rating['average']['value']) : 0;
			}
			else {
				// Convert to int
				$value = intval($value);
			}
		}
		elseif ($type == 'date') {
			// Date: this is already a timestamp
			$value = intval($value);
		}
		elseif ($type == 'field_item_link') {
			// Link: use url
			$value = $value['url'];
		}
		elseif ($type == 'addressfield') {
			// Address: custom mapper with more "generic" values
			$value = array(
				'country' => $value['country'], 
				'province' => $value['administrative_area'], 
				'city' => $value['locality'], 
				'zip' => $value['postal_code'], 
				'address' => $value['thoroughfare'],
			);
		}
		elseif ($type == 'geofield') {
			// Geofield: convert to lat,lng
			$value = array(
				'lat' => floatval($value['lat']),
				'lng' => floatval($value['lon']),
			);
		}
		
		// LISTS
		
		elseif ($type == 'list<field_item_image>') {
			// Images
			$value = array(); foreach ($wrapper->{$field}->getIterator() as $imagew) {
				// Style as per config and return url
				$value[] = image_style_url($rest_conf['image_style'], $imagew->file->value()->uri);
				// Force image generation as a workaround for permission issues
				rest_json_generate_image_derivative($imagew->file->value()->uri);
				// Use internal callback to better manage permissions on derivaties
#				$value[] = url($rest_conf['rest_prefix'].'/image/'.$imagew->file->value()->fid, array('absolute'=>TRUE));
			}
		}
		elseif ($type == 'list<field_collection_item>') {
			// FIXME: make this generic!
			$value = array(); foreach ($wrapper->{$field}->getIterator() as $childw) {
				if ($childw->info()['bundle'] == 'field_singers') {
					// Override singer with translated entity
					$nid = select_translation_of_node($childw->field_singer->value()->nid);
					$value[] = array(
						'singer' => rest_json_node($nid),
						'role' => $childw->field_role->value(),
					);
				}
			}
		}
		
		// NODE
		
		elseif ($type == 'node') {
			// Node: recursively convert the node, with appropriate translation
			$nid = select_translation_of_node($value->nid);
			$value = rest_json_node($nid);
		}
		
#		else d($info);
	}
	else if (isset($entity->{$field})) {
		// Get field value from original node
		$value = $entity->{$field};
		
		// Numeric fields: convert to real number
		if (is_numeric($value)) $value = $value + 0;
	}
	
	return $value;
} // rest_json_value

/**
 * Set the value for a given field.
 *
 * @param wrapper The entity wrapper.
 * @param field The field name to edit.
 * @param value The value to set.
 */
function rest_json_value_set($wrapper, $field, $value) {
	global $user, $rest_conf;
	
#	error_log("rest_json_value_set(): ORIG $field -> $value");
	
	$entity = $wrapper->value();
	$info = $wrapper->getPropertyInfo();
	
	if (isset($info[$field])) {
		// Get value type
		$type = $info[$field]['type'];
#		error_log("rest_json_value_set(): TYPE $type");
		
		if ($type == 'integer') {
			// Integer: set value
			$value = intval($value);
		}
		elseif ($type == 'token' || $type == 'text') {
			// Text: just trim
			$value = trim($value);
		}
		elseif ($type == 'field_item_image') {
			// Images: save file
			$instance = field_info_instance($wrapper->type(), $field, $wrapper->value()->type);
			$filename = "public://{$instance['settings']['file_directory']}/".time().".jpg";
#			$file = system_retrieve_file($url, $filename, TRUE, FILE_EXISTS_RENAME)
			$file = file_save_data(rest_json_base64_decode($value), $filename, FILE_EXISTS_RENAME);
			$file->uid = $user->uid;
			$wrapper->{$field}[$i]->file->set($file);
			$value = NULL;
		}
		elseif ($type == 'taxonomy_term') {
			// Automatically managed by entity API, $value must be the tid
			$value = intval($value);
		}
#		elseif ($type == 'date') {
#			// Date: TODO
#			$value = intval($value);
#		}
		elseif ($type == 'field_item_link') {
			// Link: use url
			$value = array('url' => $value);
		}
		elseif ($type == 'addressfield') {
			// Address: custom mapper with more "generic" values
			$value = array(
				'country' => $value['country'], 
				'administrative_area' => $value['province'], 
				'locality' => $value['city'], 
				'postal_code' => $value['zip'], 
				'thoroughfare' => $value['address'],
			);
		}
#		elseif ($type == 'geofield') {
#			// Geofield: TODO
#			$value = array(
#				'lat' => floatval($value['lat']),
#				'lng' => floatval($value['lon']),
#			);
#		}
		
		// LISTS
		
		elseif ($type == 'list<field_item_image>') {
			// Images: save base64-encoded file
			foreach ($value as $i => $image) {
				$instance = field_info_instance($wrapper->type(), $field, $wrapper->value()->type);
				$filename = "public://{$instance['settings']['file_directory']}/".time().".jpg";
#				$file = system_retrieve_file($url, $filename, TRUE, FILE_EXISTS_RENAME)
				$file = file_save_data(rest_json_base64_decode($image), $filename, FILE_EXISTS_RENAME);
				$file->uid = $user->uid;
				$wrapper->{$field}[$i]->file->set($file);
			}
			$value = NULL;
		}
#		elseif ($type == 'list<field_collection_item>') {
#			// FIXME: make this generic!
#			// TODO
#			$value = array(); foreach ($wrapper->{$field}->getIterator() as $childw) {
#				if ($childw->info()['bundle'] == 'field_singers') {
#					// Override singer with translated entity
#					$nid = select_translation_of_node($childw->field_singer->value()->nid);
#					$value[] = array(
#						'singer' => rest_json_node($nid),
#						'role' => $childw->field_role->value(),
#					);
#				}
#			}
#		}
		
		// NODE
		// TODO
		
#		elseif ($type == 'node') {
#			// Node: recursively convert the node, with appropriate translation
#			$nid = select_translation_of_node($value->nid);
#			$value = rest_json_node($nid);
#		}
		
#		else d($info);
	}
	
#	error_log("rest_json_value_set(): $field -> FIXED ".print_r($value, TRUE));
	
	// Set value
	if ($value) $wrapper->{$field} = $value;
} // rest_json_value_set

function rest_json_base64_decode($data) {
	list($type, $data) = explode(',', $data);
	
	return base64_decode($data);
} // rest_json_base64_decode

/**
 * Compatibility with AngularJS and other clients that write json 
 * requests to stdin instead of urlencoded get/post parameters.
 */
function read_request_from_stdin() {
	static $stdin = FALSE;
	
	// Read request from stdin (once per request)
	if (!$stdin) {
		$data = (array) json_decode(trim(fgets(fopen('php://input', 'r'))));
		$_REQUEST = array_merge($_REQUEST, $data);
		
		$stdin = TRUE;
	}
	
#	return json_decode(json_encode($_REQUEST), FALSE); // converti a obj
} // read_request_from_stdin

/**
 * Return a $_REQUEST param.
 */
function request_param($param, $is_mandatory=FALSE, $default_value=FALSE) {
	// Read request from stdin
	read_request_from_stdin();
	
	// Get $_REQUEST's param
	$value = !empty($_REQUEST[$param]) ? $_REQUEST[$param] : '';
	$value = is_array($value) || is_object($value) ? array_filter((array)$value) : trim($value);

	// Check mandatory arguments
	if (!$value && $is_mandatory) {
		rest_json_response(FALSE, 'parameter', $param, "Missing parameter: $param");
	}

	// Default value
	if (!$value && $default_value) $value = $default_value;

	return $value;
} // request_param

/**
 * Get a cached response.
 */
function rest_json_cache_get($cid=NULL) {
	global $rest_conf;
	
	if (isset($_GET['nc'])) return NULL;
	
	$bin = $rest_conf['cache_bin'];
	if (!$cid) $cid = rest_json_cache_serialize_request();
	
	$expires = time() - 3600 * $rest_conf['cache_validity'];
	if (($data = cache_get($cid, $bin)) && $data->created > $expires) {
		return $data->data;
	}
	
	return NULL;
} // rest_json_cache_get

/**
 * Set a cached response.
 * @param $response The response BEFORE being serialized.
 */
function rest_json_cache_set($response, $cid=NULL) {
	global $rest_conf;
	
	$bin = $rest_conf['cache_bin'];
	if (!$cid) $cid = rest_json_cache_serialize_request();
	
	if ($response) {
		cache_set($cid, $response, $bin, CACHE_TEMPORARY);
	}
	
	return $response;
} // rest_json_cache_set

function rest_json_cache_serialize_request() {
	// Read request from stdin
	read_request_from_stdin();
	
	return md5($_SERVER['REQUEST_URI'].serialize($_REQUEST));
} // rest_json_cache_serialize_request

function page_rest_image($fid) {
	global $rest_conf;

	// Check auth
#	check_user_auth('access content');

	$image = file_load($fid);

	return image_style_deliver(
		image_style_load($rest_conf['image_style']), 
		'public', str_replace('public://', '', $image->uri));
} // page_rest_image

function rest_json_generate_image_derivative($image_uri) {
	global $rest_conf;

	$style = image_style_load($rest_conf['image_style']);
	$derivative_uri = image_style_path($rest_conf['image_style'], $image_uri);
	if (!file_exists($derivative_uri)) {
		$lock_name = 'image_style_deliver:' . $style['name'] . ':' . drupal_hash_base64($image_uri);
		if (lock_acquire($lock_name)) {
			// Create derivative
			image_style_create_derivative($style, $image_uri, $derivative_uri);
		}
	}
} // rest_json_generate_image_derivative

