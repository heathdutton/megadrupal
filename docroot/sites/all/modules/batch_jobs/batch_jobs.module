<?php

/**
 * @file
 * A module for batch jobs.
 */

/**
 * Implements hook_permission().
 */
function batch_jobs_permission() {
  return array(
    'access batch jobs' => array(
      'title' => t('Access batch jobs'),
      'description' => t('Allow a user to access a batch job.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function batch_jobs_menu() {
  $items = array();

  $items['admin/reports/batch_jobs'] = array(
    'title' => 'Batch jobs',
    'description' => 'Information about batch jobs.',
    'page callback' => 'batch_jobs_batches',
    'page arguments' => array(),
    'access arguments' => array('access batch jobs'),
  );
  $items['batch_jobs/%batch_jobs'] = array(
    'page callback' => 'batch_jobs_tasks',
    'page arguments' => array(1),
    'access arguments' => array('access batch jobs'),
    'type' => MENU_CALLBACK,
  );
  $items['batch_jobs/%batch_jobs/run/%'] = array(
    'page callback' => 'batch_jobs_run',
    'page arguments' => array(1, 3),
    'access arguments' => array('access batch jobs'),
    'type' => MENU_CALLBACK,
  );
  $items['batch_jobs/%batch_jobs_task/task/%'] = array(
    'page callback' => 'batch_jobs_task',
    'page arguments' => array(1, 3),
    'access arguments' => array('access batch jobs'),
    'type' => MENU_CALLBACK,
  );
  $items['batch_jobs/%batch_jobs/callback/%'] = array(
    'page callback' => 'batch_jobs_callback',
    'page arguments' => array(1, 3),
    'access arguments' => array('access batch jobs'),
    'type' => MENU_CALLBACK,
  );
  $items['batch_jobs/%batch_jobs/finished/%'] = array(
    'page callback' => 'batch_jobs_callback',
    'page arguments' => array(1, 3, 'finished'),
    'access arguments' => array('access batch jobs'),
    'type' => MENU_CALLBACK,
  );
  $items['batch_jobs/%batch_jobs/finish/%'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('batch_jobs_finish', 1, 3),
    'access arguments' => array('access batch jobs'),
    'type' => MENU_CALLBACK,
  );
  $items['batch_jobs/%batch_jobs/delete/%'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('batch_jobs_delete_form', 1, 3),
    'access arguments' => array('access batch jobs'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Load a batch job object from the batch_jobs table.
 *
 * @param int $bid
 *   Batch jobs ID.
 *
 * @return object
 *   Batch jobs object.
 */
function batch_jobs_load($bid) {
  $columns = array(
    'bid',
    'title',
    'uid',
    'data',
    'callbacks',
    'status',
  );
  $job = db_select('batch_jobs', 'jobs')
    ->condition('jobs.bid', $bid)
    ->fields('jobs', $columns)
    ->execute()
    ->fetchObject();

  if ($job) {
    $job->callbacks = unserialize($job->callbacks);
    $job->data = unserialize($job->data);
    return $job;
  }
  return FALSE;
}

/**
 * Load a batch job task object from the batch_task table.
 *
 * @param int $tid
 *   Task ID.
 *
 * @return object
 *   Batch jobs task object.
 */
function batch_jobs_task_load($tid) {
  $columns = array(
    'tid',
    'bid',
    'title',
    'start',
    'end',
    'callbacks',
    'data',
    'status',
    'message',
  );
  $task = db_select('batch_task', 'batch_task')
    ->condition('batch_task.tid', $tid)
    ->fields('batch_task', $columns)
    ->execute()
    ->fetchObject();

  if ($task) {
    $task->callbacks = unserialize($task->callbacks);
    $task->data = unserialize($task->data);
    $task->message = unserialize($task->message);
    return $task;
  }
  return FALSE;
}

/**
 * List of current batch jobs.
 */
function batch_jobs_batches() {
  global $user;
  $content = '';
  if ($user->uid == 1) {
    $jobs = db_select('batch_jobs', 'jobs')
      ->fields('jobs', array('bid', 'title', 'status'))
      ->execute();
  }
  else {
    $jobs = db_select('batch_jobs', 'jobs')
      ->fields('jobs', array('bid', 'title', 'status'))
      ->condition('jobs.uid', array(0, $user->uid), 'IN')
      ->execute();
  }
  $header = array(
    array('data' => 'Title', 'field' => 'title'),
    'Total',
    'Started',
    'Completed',
    'Status',
  );
  $rows = array();
  foreach ($jobs as $job) {
    $token = drupal_get_token($job->bid);
    $total = db_select('batch_task', 'task')
      ->condition('task.bid', $job->bid)
      ->countQuery()->execute()->fetchField();
    $started = db_select('batch_task', 'task')
      ->condition('task.bid', $job->bid)
      ->condition('task.start', 0, '!=')
      ->countQuery()->execute()->fetchField();
    $completed = db_select('batch_task', 'task')
      ->condition('task.bid', $job->bid)
      ->condition('task.end', 0, '!=')
      ->countQuery()->execute()->fetchField();
    if ($completed == $total) {
      if ($job->status) {
        $job_status = t('Job finished');
      }
      else {
        $job_status = l(t('Run finish tasks'), 'batch_jobs/' . $job->bid .
          '/finish/' . $token);
      }
    }
    else {
      $job_status = l(t('Run'), 'batch_jobs/' . $job->bid . '/run/' . $token);
    }
    $rows[] = array(
      'data' => array(
        l($job->title, 'batch_jobs/' . $job->bid),
        $total,
        $started,
        $completed,
        $job_status,
        l(t('Delete'), 'batch_jobs/' . $job->bid . '/delete/' . $token),
      ),
      'class' => array('batch-' . $token),
    );
  }
  $content .= '<div class="batch_jobs">';
  $content .= theme('table',
    array(
      'header' => $header,
      'rows' => $rows,
      'empty' => 'No batch jobs',
    )
  );
  $content .= '</div>';
  drupal_add_js(drupal_get_path('module', 'batch_jobs') . '/batch_jobs.js');
  drupal_add_css(drupal_get_path('module', 'batch_jobs') . '/batch_jobs.css');
  return $content;
}

/**
 * List of current tasks.
 *
 * @param object $batch_job
 *   Batch job object.
 */
function batch_jobs_tasks($batch_job) {
  global $user;
  $content = '';
  if ($user->uid != 1) {
    if ($batch_job->uid != 0 && $user->uid != $batch_job->uid) {
      return '';
    }
  }
  $header = array(
    array('data' => 'Task&nbsp;ID', 'field' => 'tid'),
    array('data' => 'Title', 'field' => 'title'),
    array('data' => 'Started', 'field' => 'start'),
    array('data' => 'Completed', 'field' => 'end'),
    array('data' => 'Status', 'field' => 'status'),
    'Message',
    'Action',
  );
  $columns = array('tid', 'title', 'start', 'end', 'status', 'message');
  $sql = db_select('batch_task', 'task')
    ->condition('task.bid', $batch_job->bid)
    ->fields('task', $columns);
  $tasks = $sql->extend('PagerDefault')
    ->limit(25)
    ->extend('TableSort')
    ->orderByHeader($header)
    ->execute();
  $rows = array();
  foreach ($tasks as $task) {
    if ($task->status) {
      $status = '<div class="successful">' . t('Successful') . '</div>';
      $button = '';
    }
    else {
      $status = ($task->end == 0) ? '' : '<div class="error">' . t('Error') .
        '</div>';
      $button = '<button class="run ' . $task->tid .
        '" type="button">Run</button>';
    }
    $start = ($task->start == 0) ? '' : date('n/j/Y g:i:s a', $task->start);
    $end = ($task->end == 0) ? '' : date('n/j/Y g:i:s a', $task->end);
    $rows[] = array(
      'data' => array(
        $task->tid,
        check_plain($task->title),
        $start,
        $end,
        $status,
        print_r(unserialize($task->message), TRUE),
        $button,
      ),
    );
  }
  $content .= '<div class="tasks ' . drupal_get_token($batch_job->bid) . '">';
  $content .= theme('table',
    array(
      'header' => $header,
      'rows' => $rows,
      'empty' => 'No tasks',
    )
  );
  $content .= '</div>';
  $content .= theme('pager', array('tags' => array()));
  drupal_add_css(drupal_get_path('module', 'batch_jobs') . '/batch_jobs.css');
  drupal_add_js(drupal_get_path('module', 'batch_jobs') . '/batch_jobs.js');
  return $content;
}

/**
 * Run batch job.
 *
 * @param object $batch_job
 *   Batch job object.
 * @param string $token
 *   Token string.
 */
function batch_jobs_run($batch_job, $token) {
  global $user;
  $content = '';
  if ($user->uid != 1) {
    if ($batch_job->uid != 0 && $user->uid != $batch_job->uid) {
      return FALSE;
    }
  }
  if (!drupal_valid_token($token, $batch_job->bid)) {
    return FALSE;
  }
  $content .= '<div class="batch batch-' . $batch_job->bid . ' batch-' .
    $token . '" id="progress"></div>';
  $content .= '<div class="batch-complete"></div>';
  $content .= '<div class="batch-percent"></div>';
  drupal_add_library('system', 'ui.progressbar');
  drupal_add_js(drupal_get_path('module', 'batch_jobs') . '/batch_jobs.js');
  drupal_add_css(drupal_get_path('module', 'batch_jobs') . '/batch_jobs.css');
  return $content;
}

/**
 * Run one task.
 *
 * @param object $task
 *   Task object.
 * @param string $token
 *   Token string.
 */
function batch_jobs_task($task, $token) {
  if (!drupal_valid_token($token, $task->bid)) {
    return FALSE;
  }
  global $user;
  $batch_job = batch_jobs_load($task->bid);
  $response = new stdClass();
  if ($user->uid != 1 && $batch_job->uid != 0 &&
    $user->uid != $batch_job->uid) {

    $response->status = FALSE;
    drupal_json_output($response);
    return;
  }
  if ($task->status) {
    $response->status = FALSE;
    drupal_json_output($response);
    return;
  }
  $start = time();
  db_update('batch_task')
    ->condition('tid', $task->tid)
    ->fields(array('start' => $start))
    ->execute();

  // Array merge allows task parameters to override batch parameters.
  $task_params = array_merge($batch_job->data, $task->data);
  $message = array();
  foreach ($task->callbacks as $callback) {
    $result = call_user_func($callback, $task_params);
    if (!isset($result->status) || !$result->status) {
      break;
    }
    if (isset($result->message)) {
      $message += $result->message;
    }
  }
  if (isset($result->status)) {
    $end = time();
    $sql = db_update('batch_task')
      ->condition('tid', $task->tid)
      ->fields(array(
        'end' => $end,
        'status' => $result->status,
        'message' => serialize($message),
      ))
      ->execute();
  }
  $response->tid = $task->tid;
  $response->title = $task->title;
  $response->start = date('n/j/Y g:i:s a', $start);
  $response->end = date('n/j/Y g:i:s a', $end);
  if ($result->status) {
    $response->status = '<div class="successful">' . t('Successful') . '</div>';
  }
  else {
    $response->status = '<div class="error">' . t('Error') . '</div>';
  }
  $response->message = print_r($message, TRUE);
  drupal_json_output($response);
}

/**
 * Run a set of tasks.
 *
 * @param object $batch_job
 *   Batch job object.
 * @param string $token
 *   Token string.
 * @param string $finished
 *   Flag for running the completion functions.
 */
function batch_jobs_callback($batch_job, $token, $finished = NULL) {
  global $user;
  if ($user->uid != 1 && $batch_job->uid != 0
    && $user->uid != $batch_job->uid) {

    return FALSE;
  }
  if (!drupal_valid_token($token, $batch_job->bid)) {
    return FALSE;
  }
  $result = new stdClass();
  $data = &drupal_static('batch_jobs_get_tasks_' . $batch_job->bid);
  $content = '';
  if (!isset($data['params'])) {
    $data['params'] = $batch_job->data;
  }
  if (!is_null($finished) && $finished == 'finished') {
    if ($batch_job->status) {
      return FALSE;
    }
    foreach ($batch_job->callbacks as $callback) {
      call_user_func($callback, $data['params']);
    }
    db_update('batch_jobs')
      ->condition('bid', $batch_job->bid)
      ->fields(array(
        'status' => 1,
      ))
      ->execute();
  }
  else {
    timer_start('batch_jobs_get_tasks_' . $batch_job->bid);
    do {
      $tasks = batch_jobs_get_tasks($batch_job->bid);
      if (count($tasks) == 0) {
        break;
      }
      foreach ($tasks as $tid => $task) {
        // Array merge allows task parameters to override batch parameters.
        $task_params = array_merge($data['params'], $task['params']);
        $message = array();
        foreach ($task['callbacks'] as $callback) {
          $result = call_user_func($callback, $task_params);
          if (!isset($result->status) || !$result->status) {
            break;
          }
          if (isset($result->message)) {
            $message += $result->message;
          }
        }
        if (isset($result->status)) {
          $sql = db_update('batch_task')
            ->condition('tid', $tid)
            ->fields(array(
              'end' => time(),
              'status' => $result->status,
              'message' => serialize($message),
            ))
            ->execute();
        }
      }
      $time = timer_read('batch_jobs_get_tasks_' . $batch_job->bid);
    } while ($time < 1000);
    timer_stop('batch_jobs_get_tasks_' . $batch_job->bid);
    $result->bid = $batch_job->bid;
    $result->token = $token;
    if (!isset($data['total'])) {
      $data['total'] = db_select('batch_task', 'task')
        ->condition('task.bid', $batch_job->bid)
        ->countQuery()
        ->execute()
        ->fetchField();
    }
    $complete = db_select('batch_task', 'task')
      ->condition('task.bid', $batch_job->bid)
      ->condition('task.end', 0, '!=')
      ->countQuery()
      ->execute()
      ->fetchField();
    $result->total = $data['total'];
    $result->complete = $complete;
  }
  $result->status = TRUE;
  drupal_json_output($result);
}

/**
 * Get tasks.
 *
 * This function locks access to other processes.
 *
 * @param int $bid
 *   Batch job ID.
 * @param int $number
 *   Number of tasks to return.
 *
 * @return array
 *   An array of tasks.
 */
function batch_jobs_get_tasks($bid, $number = 1) {
  $safety = 0;
  do {
    if (lock_acquire('batch_jobs_get_tasks_' . $bid)) {
      $tasks = db_select('batch_task', 'task')
        ->condition('task.bid', $bid)
        ->condition('task.start', 0)
        ->orderBy('task.tid')
        ->range(0, $number)
        ->fields('task', array('tid', 'callbacks', 'data'))
        ->execute();
      $results = array();
      $tids = array();
      foreach ($tasks as $task) {
        $tids[] = $task->tid;
        $results[$task->tid] = array(
          'callbacks' => unserialize($task->callbacks),
          'params' => unserialize($task->data),
        );
      }
      if (count($tids)) {
        $now = time();
        db_update('batch_task')
          ->condition('tid', $tids, 'IN')
          ->fields(array('start' => $now))
          ->execute();
      }
      lock_release('batch_jobs_get_tasks_' . $bid);
      break;
    }
    $safety++;
    if ($safety > 10) {
      break;
    }
  } while (lock_wait('batch_jobs_get_tasks_' . $bid));
  return $results;
}

/**
 * Delete batch job and associated tasks.
 *
 * @param object $batch_job
 *   Batch job object.
 * @param string $token
 *   Token string.
 */
function batch_jobs_delete_form($form, &$form_state, $batch_job, $token) {
  if (!drupal_valid_token($token, $batch_job->bid)) {
    return FALSE;
  }
  $form['_batch_job'] = array(
    '#type' => 'value',
    '#value' => $batch_job,
  );

  return confirm_form(
    $form,
    t('Are you sure you want to delete this batch job?'),
    isset($_GET['destination']) ? $_GET['destination'] : "admin/reports/batch_jobs",
    t('This action cannot be undone'),
    t('Delete'),
    t('Cancel')
  );
}

/**
 * Form submission handler for batch_jobs_delete_form().
 */
function batch_jobs_delete_form_submit($form, &$form_state) {
  global $user;
  $uid = $form['_batch_job']['#value']->uid;
  $bid = $form['_batch_job']['#value']->bid;
  if ($uid != 0 && $user->uid != $uid) {
    return;
  }
  db_delete('batch_jobs')
    ->condition('bid', $bid)
    ->execute();
  db_delete('batch_task')
    ->condition('bid', $bid)
    ->execute();
  drupal_set_message(t('Batch job has been successfully deleted.'));
  drupal_goto('admin/reports/batch_jobs');
}

/**
 * Run finish task.
 *
 * @param object $batch_job
 *   Batch job object.
 * @param string $token
 *   Token string.
 */
function batch_jobs_finish($form, &$form_state, $batch_job, $token) {
  if (!drupal_valid_token($token, $batch_job->bid)) {
    return FALSE;
  }
  if ($batch_job->status) {
    return FALSE;
  }
  $form['_batch_job'] = array(
    '#type' => 'value',
    '#value' => $batch_job,
  );

  return confirm_form(
    $form,
    t('Are you sure you want to run the finish tasks?'),
    isset($_GET['destination']) ? $_GET['destination'] : "admin/reports/batch_jobs",
    t('This action cannot be undone'),
    t('Run finish tasks'),
    t('Cancel')
  );
}

/**
 * Form submission handler for batch_jobs_finish().
 */
function batch_jobs_finish_submit($form, &$form_state) {
  $batch_job = $form['_batch_job']['#value'];
  foreach ($batch_job->callbacks as $callback) {
    call_user_func($callback, $batch_job->data);
  }
  db_update('batch_jobs')
    ->condition('bid', $batch_job->bid)
    ->fields(array(
      'status' => 1,
    ))
    ->execute();
  drupal_goto('admin/reports/batch_jobs');
}
