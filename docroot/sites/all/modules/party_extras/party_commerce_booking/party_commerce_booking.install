<?php
/**
 * @file
 */

/**
 * Implements hook_install().
 *
 * Add a party and email field to every ticket type.
 */
function party_commerce_booking_install() {
  $t = get_t();

  $entity_type = 'commerce_booking_ticket';
  $ticket_info = entity_get_info($entity_type);

  foreach (array_keys($ticket_info['bundles']) as $bundle) {
    // Create a party reference field if one doesn't exist.
    if (!field_info_field('party')) {
      $field = array(
        'field_name' => 'party',
        'type' => 'entityreference',
        'settings' => array(
          'target_type' => 'party',
        ),
        'cardinality' => 1,
      );
      field_create_field($field);
    }

    if (!field_info_instance($entity_type, 'party', $bundle)) {
      $instance = array(
        'field_name' => 'party',
        'entity_type' => $entity_type,
        'bundle' => $bundle,
        'label' => $t('Party'),
        'widget' => array(
          'type' => 'entityreference_autocomplete',
        ),
      );
      field_create_instance($instance);
    }

    // Create an email field if one doesn't exist.
    if (!field_info_field('ticket_holder_email')) {
      $field = array(
        'field_name' => 'ticket_holder_email',
        'type' => 'email',
        'cardinality' => 1,
      );
      field_create_field($field);
    }

    if (!field_info_instance($entity_type, 'ticket_holder_email', $bundle)) {
      $instance = array(
        'field_name' => 'ticket_holder_email',
        'entity_type' => $entity_type,
        'bundle' => $bundle,
        'label' => $t('Email'),
      );
      field_create_instance($instance);
    }
  }

  // Add a booking manager party reference field to the commerce orders.
  if (!field_info_field('booking_manager')) {
    $field = array(
      'field_name' => 'booking_manager',
      'type' => 'entityreference',
      'settings' => array(
        'target_type' => 'party',
      ),
      'cardinality' => 1,
    );
    field_create_field($field);
  }

  if (!field_info_instance('commerce_order', 'booking_manager', 'commerce_booking')) {
    $instance = array(
      'field_name' => 'booking_manager',
      'entity_type' => 'commerce_order',
      'bundle' => 'commerce_booking',
      'label' => $t('Booking Manager'),
      'widget' => array(
        'type' => 'entityreference_autocomplete',
      ),
    );
    field_create_instance($instance);
  }
}

/**
 * Add a booking manager field to bookings.
 */
function party_commerce_booking_update_7001() {
  // Add a booking manager party reference field to the commerce orders.
  if (!field_info_field('booking_manager')) {
    $field = array(
      'field_name' => 'booking_manager',
      'type' => 'entityreference',
      'settings' => array(
        'target_type' => 'party',
      ),
      'cardinality' => 1,
    );
    field_create_field($field);
  }

  if (!field_info_instance('commerce_order', 'booking_manager', 'commerce_booking')) {
    $instance = array(
      'field_name' => 'booking_manager',
      'entity_type' => 'commerce_order',
      'bundle' => 'commerce_booking',
      'label' => t('Booking Manager'),
      'widget' => array(
        'type' => 'entityreference_autocomplete',
      ),
    );
    field_create_instance($instance);
  }
}

/**
 * Trigger acquisitions for any existing anonymous orders.
 */
function party_commerce_booking_update_7002(&$sandbox) {
  // Update any booking that have a party with a user, but the booking is
  // owned by the anonymous user. In the future, these will be captured by
  // party_commerce_booking_party_user_acquisition(), so this is clean up.

  // Set up our query to find bookings.
  // Start of with anonymous orders.
  $query = db_select('commerce_order', 'o');
  $query->condition('o.uid', 0);
  $query->addField('o', 'order_id');

  // Join to the party.
  $query->join('field_data_booking_manager', 'bm',
    'bm.entity_type = :commerce_order AND bm.entity_id = o.order_id',
    array(':commerce_order' => 'commerce_order'));

  // And then the attached user for the party.
  $query->join('party_attached_entity', 'pae',
    'pae.data_set = :user AND pae.pid = bm.booking_manager_target_id AND pae.delta = :delta',
    array(':user' => 'user', ':delta' => 0));
  $query->addField('pae', 'eid', 'uid');

  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = 0;
    $sandbox['last_id'] = 0;
    $sandbox['max'] = $query->countQuery()->execute()->fetchField();
  }

  // Sort by ID ascending and filter out already processed items.
  $query->orderBy('o.order_id', 'ASC');
  $query->condition('o.order_id', $sandbox['last_id'], '>');

  // Get hold of the next 20 orders.
  $query->range(0, 20);
  $ids = $query->execute()->fetchAllKeyed();
  foreach (entity_load('commerce_order', array_keys($ids)) as $order) {
    $order->uid = $ids[$order->order_id];
    commerce_order_save($order);

    // Track our progress.
    $sandbox['progress']++;
    $sandbox['last_id'] = $order->order_id;
  }

  $sandbox['#finished'] = empty($sandbox['max']) ? 1: $sandbox['progress'] / $sandbox['max'];
}
