<?php
/**
 * @file
 */

/**
 * Implements hook_ctools_plugin_directory().
 */
function party_relation_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && $plugin == 'content_types') {
    return "plugins/$plugin";
  }
}

/**
 * Implements hook_forms().
 */
function party_relation_forms($form_id, $args) {
  $forms = array();

  // Add relationship forms in.
  if (strpos($form_id, 'party_relation_relationship_form') === 0) {
    $forms[$form_id] = array(
      'callback' => 'party_relation_relationship_form',
    );
  }

  return $forms;
}

/**
 * Get a form to create a relation between two parties.
 *
 * @param $party
 *  The party at one end of the relationship.
 * @param $relation_type
 *  The relationship type type to create
 * @param $endpoint
 *  The endpoint $party should be at. If the party is the individual this
 *  should be set to 'source', if the party is the organisation this should
 *  be set to 'target'.
 * @param $other_party
 *  Optional other party
 * @param $conf
 *
 * @return array
 *  A form array to be rendered.
 */
function party_relation_create_relationship_form_wrapper($party, $relation_type, $endpoint = 'source', $other_party = NULL, $conf = array()) {
  // Work out the endpoint.
  $endpoint_delta = ($endpoint == 'source') ? 0 : 1;
  // Make a relation. If the $endpoint is source, set the source party id,
  // otherwise set the target party id.
  if ($other_party) {
    // Make a full relation.
    $relation = relation_create($relation_type, array(
      $endpoint_delta => array(
        'entity_type' => 'party',
        'entity_id' => $party->pid,
      ),
      abs($endpoint_delta - 1) => array(
        'entity_type' => 'party',
        'entity_id' => $party_optional->pid,
      ),
    ));
    // Dear field_attach_submit(). Please do not mess with endpoints.
    // @see party_relationships_relationship_form_submit().
    ksort($relation->endpoints[LANGUAGE_NONE]);
  }
  else {
    // Make a partial relation. If the $endpoint is source, set the source
    // party id, otherwise set the target party id.
    $relation = relation_create($relation_type, array(
      $endpoint_delta => array(
        'entity_type' => 'party',
        'entity_id' => $party->pid,
      ),
    ));
  }

  return drupal_get_form('party_relation_relationship_form__' . $relation_type, $relation, $conf);
}

/**
 * Form for adding and editing works_for relations.
 */
function party_relation_relationship_form($form, &$form_state, $relation, $conf = array()) {
  $form_state['relation'] = $relation;

  $source_empty = empty($relation->endpoints[LANGUAGE_NONE][0]['entity_id']);
  $target_empty = empty($relation->endpoints[LANGUAGE_NONE][1]['entity_id']);

  if (!empty($conf['hats'])) {
    $hats = $conf['hats'];
    if ($hats == 'All') {
      $hats = '';
    }

    $autocomplete_path = 'party_extras/autocomplete/' . $hats;
  }
  else {
    $autocomplete_path = 'party_extras/autocomplete';
  }

  // If this is a create relation form then we need to add an element to look
  // for one of the endpoints.
  if ($source_empty) {
    $form['source'] = array(
      '#type' => 'textfield',
      '#maxlength' => 80,
      '#title' => (!empty($conf['source_title'])) ? $conf['source_title'] : t('Individual'),
      '#autocomplete_path' => $autocomplete_path,
      '#weight' => -10,
    );
  }

  if ($target_empty) {
    $form['target'] = array(
      '#type' => 'textfield',
      '#maxlength' => 80,
      '#title' => (!empty($conf['target_title'])) ? $conf['target_title'] : t('Organisation'),
      '#autocomplete_path' => $autocomplete_path,
      '#weight' => -9,
    );
  }

  // Store a submit message
  if ($conf['message']) {
    $form['#message'] = $conf['message'];
  }

  // Attach relation fields
  field_attach_form('relation', $relation, $form, $form_state);

  // Hide the endpoints if either source or target is empty.
  if ($source_empty || $target_empty) {
    unset($form['endpoints']);
  }

  $form['actions'] = array(
    '#type' => 'container',
    '#weight' => 100,
  );

  // Submit
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );

  return $form;
}

/**
 * Validate user input.
 */
function party_relation_relationship_form_validate($form, &$form_state) {
  $relation = $form_state['relation'];
  $originial_relation = clone $form_state['relation'];

  // Work out if the source and target endpoints are yet to be set.
  $source_empty = empty($relation->endpoints[LANGUAGE_NONE][0]['entity_id']);
  $target_empty = empty($relation->endpoints[LANGUAGE_NONE][1]['entity_id']);

  // Find out the end points.
  // Source
  if ($source_empty) {
    // Get party id.
    preg_match('/.+\((\d+)\)/', $form_state['values']['source'], $ids);
    $pid = array_pop($ids);
    if (!party_load($pid)) {
      form_set_error('source', t('Illegal choice detected in field %field_title.', array('%field_title' => $form['source']['#title'])));
    }
  }
  // Target
  if ($target_empty) {
    // Get party id.
    preg_match('/.+\((\d+)\)/', $form_state['values']['target'], $ids);
    $pid = array_pop($ids);
    if (!party_load($pid)) {
      form_set_error('target', t('Illegal choice detected in field %field_title.', array('%field_title' => $form['target']['#title'])));
    }
  }
}

/**
 * Populate endpoints and save the relation.
 */
function party_relation_relationship_form_submit($form, &$form_state) {
  $relation = $form_state['relation'];
  $originial_relation = clone $form_state['relation'];

  // Work out if the source and target endpoints are yet to be set.
  $source_empty = empty($relation->endpoints[LANGUAGE_NONE][0]['entity_id']);
  $target_empty = empty($relation->endpoints[LANGUAGE_NONE][1]['entity_id']);

  // Build fields, do this before our source and target sniffing as
  // field_attach_submit can meddle with the values of the endpoints field.
  field_attach_submit('relation', $relation, $form, $form_state);

  // Find out the end points.
  // Source
  if ($source_empty) {
    // Get party id.
    preg_match('/.+\((\d+)\)/', $form_state['values']['source'], $ids);
    $relation->endpoints[LANGUAGE_NONE][0] = array(
      'entity_type' => 'party',
      'entity_id' => array_pop($ids),
    );
    // _field_filter_items() has overwritten $relation->endpoints array so we
    // need to restore it manually.
    $relation->endpoints[LANGUAGE_NONE][1] = array(
      'entity_type' => 'party',
      'entity_id' => $originial_relation->endpoints[LANGUAGE_NONE][1]['entity_id'],
    );
  }
  // Target
  if ($target_empty) {
    // Get party id.
    preg_match('/.+\((\d+)\)/', $form_state['values']['target'], $ids);
    $relation->endpoints[LANGUAGE_NONE][1] = array(
      'entity_type' => 'party',
      'entity_id' => array_pop($ids),
    );
  }
  // Save the relation
  relation_save($relation);
}

/**
 * Implements hook_menu()
 */
function party_relation_menu() {

  // Delete a relation in a modal form.
  $items['party/modal/%ctools_js/%relation/delete'] = array(
    'title' => 'Modal delete party form',
    'page callback' => 'party_relation_modal_delete_page',
    'page arguments' => array(2, 3),
    'access callback' => TRUE,//'party_access',
    //'access arguments' => array('edit', 3),
    'type' => MENU_CALLBACK,
    'delivery callback' => 'ajax_deliver',
  );

  return $items;
}


/**
 * Party subscription modal edit form callback.
 *
 * @param $js
 *   Provided by ctools, TRUE if js is enabled.
 * @param $relation
 *   A relation entity.
 *
 * @return
 *   Array of ctools commands in JSON format.
 */
function party_relation_modal_delete_page($js, $relation) {
  // Get relation
  if (!$js) {
    return drupal_goto('relation/' . $relation->rid . '/edit');
  }

  ctools_include('ajax');
  ctools_include('modal');
  module_load_include('inc', 'party', 'party.pages');

  $form_state = array(
    'title' => t('Delete relation'),
    'ajax' => TRUE,
    'build_info' => array(
      'args'  => array(
        $relation,
      ),
    ),
  );
  $commands = ctools_modal_form_wrapper('relation_delete_confirm', $form_state);

  if (!empty($form_state['executed'])) {
    // Overwrite the output if form submission was successfully executed.
    $commands = array();
    $commands[] = ctools_ajax_command_reload();
  }

  return array(
    '#type' => 'ajax',
    '#commands' => $commands,
  );
}
