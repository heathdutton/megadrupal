<?php
/**
 * @file
 * Party integration with Drupal Commerce.
 */

/**
 * Implements hook_field_attach_create_bundle().
 *
 * Add the party field to an new order types.
 *
 * This gets triggered when Drupal is notified of a new bundle via
 * field_attach_create_bundle(). This is called automatically when using the
 * commerce_order_types module patched with
 * https://drupal.org/node/1868540#comment-7181586. Otherwise it will need
 * calling manually when a new type is added.
 */
function party_commerce_field_attach_create_bundle($entity_type, $bundle) {
  if ($entity_type != 'commerce_order') {
    return;
  }

  // Check the field exists.
  if (!field_info_field('party')) {
    $field = array(
      'field_name' => 'party',
      'type' => 'entityreference',
      'settings' => array(
        'target_type' => 'party',
      ),
      'cardinality' => 1,
    );
    field_create_field($field);
  }

  // Add to the bundle.
  if (!field_info_instance('commerce_order', 'party', $bundle)) {
    $instance = array(
      'field_name' => 'party',
      'entity_type' => 'commerce_order',
      'bundle' => $bundle,
      'label' => t('Party'),
      'widget' => array(
        'type' => 'entityreference_autocomplete',
      ),
    );
    field_create_instance($instance);
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave() for commerce_order.
 *
 * Sync party field and the uid.
 */
function party_commerce_commerce_order_presave($order) {
  // Synchronise party and user if party_user is enabled.
  if (module_exists('party_user')) {
    $wrapper = entity_metadata_wrapper('commerce_order', $order);

    // Check the party field exists.
    $properties = $wrapper->getPropertyInfo();
    if (empty($properties['party']['field'])) {
      return;
    }

    $original = isset($order->original) ? entity_metadata_wrapper('commerce_order', $order->original): NULL;

    // If the party has changed update the uid.
    $new_pid = $wrapper->party->getIdentifier();
    $old_pid = isset($order->original) ? $original->party->getIdentifier(): NULL;
    if ($new_pid && $new_pid != $old_pid) {
      $wrapper->uid = $new_pid && $wrapper->party->user->raw() ? $wrapper->party->user->getIdentifier(): 0;
      return;
    }

    // Otherwise if the uid has changed, update the party.
    $new_uid = $wrapper->uid->value();
    $old_uid = isset($order->original) ? $original->uid->value(): NULL;
    if (!$new_pid || $new_uid != $old_uid) {
      $party = $new_uid ? party_user_get_party($new_uid) : NULL;
      $wrapper->party = $party ? $party: NULL;
    }
  }
}

/**
 * Implements hook_party_user_acquisition().
 *
 * Ensure any anonymous bookings get assigned to the user on acquisition.
 */
function party_commerce_party_user_acquisition($party, $user, $method) {
  if ($method == 'acquire') {
    // Look for any existing anonymous bookings for this party.
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'commerce_order');
    $query->propertyCondition('uid', 0);
    $query->fieldCondition('party', 'target_id', $party->pid);
    $results = $query->execute();

    // If we have results, load and update them.
    if (!empty($results['commerce_order'])) {
      foreach (entity_load('commerce_order', array_keys($results['commerce_order'])) as $order) {
        $order->uid = $user->uid;
        commerce_order_save($order);
      }
    }
  }
}

/**
 * hook_party_data_set_attach_DATA_SET_NAME() for user.
 */
function party_commerce_party_data_set_attach_user($controller, $entity, $delta, $method, $reattach) {
  // Get hold of our party.
  $party = $controller->getParty();

  // Find any orders beloning to this user.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'commerce_order');
  $query->propertyCondition('uid', $entity->uid);
  $result = $query->execute();

  if (!empty($result['commerce_order'])) {
    foreach (array_keys($result['commerce_order']) as $order_id) {
      $order = entity_metadata_wrapper('commerce_order', $order_id);
      $order->party = $party;
      $order->save();
    }
  }
}
