<?php
/**
 * @file
 * Install, uninstall and update the Party services module.
 */

/**
 * Implements hook_schema()
 */
function party_service_schema() {
  $schema = array();

  $schema['party_service_remote'] = array(
    'description' => 'Stores information of remote servers.',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'description' => 'Primary ID field for the table. Not used for anything except internal lookups.',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'no export' => TRUE,
      ),
      'name' => array(
        'description' => 'Machine name of this remote',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'label' => array(
        'description' => 'Human readable name of this remote',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'url' => array(
        'description' => 'The url of the endpoint.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'authentication' => array(
        'description'    => 'The authentication settings for the endpoint.',
        'type'           => 'text',
        'size'           => 'big',
        'not null'       => TRUE,
        'serialize'      => TRUE,
      ),
      'settings' => array(
        'description' => 'The settings for this remote.',
        'type'           => 'text',
        'size'           => 'big',
        'not null'       => TRUE,
        'serialize'      => TRUE,
      ),
      'debug' => array(
        'description' => 'Set the endpoint in debug mode.',
        'type'        => 'int',
        'not null'    => TRUE,
        'default'     => 0
      ),
      'status' => array(
        'type' => 'int',
        'not null' => TRUE,
        // Set the default to ENTITY_CUSTOM without using the constant as it is
        // not safe to use it at this point.
        'default' => 0x01,
        'size' => 'tiny',
        'description' => 'The exportable status of the entity.',
      ),
      'module' => array(
        'description' => 'The name of the providing module if the entity has been defined in code.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('id'),
    'unique keys' => array('name' => array('name')),
  );

  $schema['party_service'] = array(
    'description' => 'Stores information of services provided by this site.',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'description' => 'Primary ID field for the table. Not used for anything except internal lookups.',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'no export' => TRUE,
      ),
      'name' => array(
        'description' => 'Machine name of this service',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'label' => array(
        'description' => 'Human readable name of this service',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'authentication' => array(
        'description'    => 'The authentication settings for the service.',
        'type'           => 'text',
        'size'           => 'big',
        'not null'       => TRUE,
        'serialize'      => TRUE,
      ),
      'settings' => array(
        'description' => 'The settings for this service.',
        'type'           => 'text',
        'size'           => 'big',
        'not null'       => TRUE,
        'serialize'      => TRUE,
      ),
      'debug' => array(
        'description' => 'Set the endpoint in debug mode.',
        'type'        => 'int',
        'not null'    => TRUE,
        'default'     => 0
      ),
      'status' => array(
        'type' => 'int',
        'not null' => TRUE,
        // Set the default to ENTITY_CUSTOM without using the constant as it is
        // not safe to use it at this point.
        'default' => 0x01,
        'size' => 'tiny',
        'description' => 'The exportable status of the entity.',
      ),
      'module' => array(
        'description' => 'The name of the providing module if the entity has been defined in code.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('id'),
    'unique keys' => array('name' => array('name')),
  );

  $schema['party_service_keys'] = array(
    'description' => 'Stores Party Service API Keys',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Unique Identifier for this key.',
      ),
      'service' => array(
        'description' => 'The machine name of the service.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'label' => array(
        'description' => 'A readable label for the service key',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'apikey' => array(
        'description' => 'The api key',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'owner' => array(
        'type' => 'int',
        'description' => 'Party PID of the contact Reponsible for this API Key.',
      ),
      'from_domain' => array(
        'type' => 'varchar',
        'length' => 255,
        'description' => 'Domain or IP Address to accept requests from.',
      ),
      'status' => array(
        'type' => 'int',
        'description' => 'The status of this key (active [1] or inactive [0])',
        'not null' => TRUE,
        'default' => 1,
      ),
      'export_status' => array(
        'type' => 'int',
        'not null' => TRUE,
        // Set the default to ENTITY_CUSTOM without using the constant as it is
        // not safe to use it at this point.
        'default' => 0x01,
        'size' => 'tiny',
        'description' => 'The exportable status of the entity.',
      ),
      'module' => array(
        'description' => 'The name of the providing module if the entity has been defined in code.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('id'),
    'unique keys' => array(
      'apikey' => array('apikey'),
    ),
    'indexes' => array(
      'owner' => array('owner'),
      'status' => array('status'),
      'service' => array('service'),
    ),
    'foreign keys' => array(
      'owner' => array(
        'table' => 'party',
        'columns' => array('owner' => 'pid'),
      ),
      'service' => array(
        'table' => 'party_service',
        'columns' => array('service' => 'name'),
      ),
    ),
  );

  $schema['party_service_map'] = array(
    'description' => 'A table to remember which api key stored which party.',
    'fields' => array(
      'apikey' => array(
        'type' => 'int',
        'description' => 'The id of the key that submitted this carkit entity.',
        'not null' => TRUE,
      ),
      'party' => array(
        'type' => 'char',
        'length' => 36,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The Universally Unique Identifier of the party.',
      ),
    ),
    'primary key' => array('party'),
    'indexes' => array(
      'apikey' => array('apikey'),
    ),
    'foreign keys' => array(
      'apikey' => array(
        'table' => 'party_service_keys',
        'columns' => array('apikey' => 'id'),
      ),
      'party' => array(
        'table' => 'party',
        'columns' => array('party' => 'uuid'),
      ),
    ),
  );

  return $schema;
}

/**
 * Implements hook_schema_alter()
 */
function party_service_schema_alter(&$schema) {
  $field = uuid_schema_field_definition();
  $schema['party']['fields']['uuid'] = $field;
}

/**
 * Implements hook_install().
 */
function party_service_install() {
  $field = uuid_schema_field_definition();
  if (!db_field_exists('party', 'uuid')) {
    db_add_field('party', 'uuid', $field);
    db_add_index('party', 'uuid', array('uuid'));
  }
}

/**
 * Implements hook_uninstall().
 */
function party_service_uninstall() {
  if (db_field_exists('party', 'uuid')) {
    db_drop_index('party', 'uuid');
    db_drop_field('party', 'uuid');
  }
}

/**
 * Install Party Service API Keys Schema
 */
function party_service_update_7001() {
  $schema['party_service_keys'] = array(
    'description' => 'Stores Party Service API Keys',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Unique Identifier for this key.',
      ),
      'service' => array(
        'description' => 'Machine name of the service',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'apikey' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'owner' => array(
        'type' => 'int',
        'description' => 'UID of the User Reponsible for this API Key.',
      ),
      'from_domain' => array(
        'type' => 'varchar',
        'length' => 255,
        'description' => 'Domain or IP Address to accept requests from.',
      ),
      'status' => array(
        'type' => 'int',
        'description' => 'The status of this key (active [1] or inactive [0])',
        'not null' => TRUE,
        'default' => 1,
      ),
      'export_status' => array(
        'type' => 'int',
        'not null' => TRUE,
        // Set the default to ENTITY_CUSTOM without using the constant as it is
        // not safe to use it at this point.
        'default' => 0x01,
        'size' => 'tiny',
        'description' => 'The exportable status of the entity.',
      ),
      'module' => array(
        'description' => 'The name of the providing module if the entity has been defined in code.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('id'),
    'unique keys' => array(
      'apikey' => array('apikey'),
    ),
    'indexes' => array(
      'owner' => array('owner'),
      'status' => array('status'),
      'service' => array('service'),
    ),
    'foreign keys' => array(
      'owner' => array(
        'table' => 'user',
        'columns' => array('owner' => 'uid'),
      ),
      'service' => array(
        'table' => 'party_service',
        'columns' => array('service' => 'name'),
      ),
    ),
  );

  $schema['party_service_map'] = array(
    'description' => 'A table to remember which api key stored which party.',
    'fields' => array(
      'apikey' => array(
        'type' => 'int',
        'description' => 'The id of the key that submitted this carkit entity.',
        'not null' => TRUE,
      ),
      'party' => array(
        'type' => 'char',
        'length' => 36,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The Universally Unique Identifier of the party.',
      ),
    ),
    'primary key' => array('party'),
    'indexes' => array(
      'apikey' => array('apikey'),
    ),
    'foreign keys' => array(
      'apikey' => array(
        'table' => 'party_service_keys',
        'columns' => array('apikey' => 'id'),
      ),
      'party' => array(
        'table' => 'party',
        'columns' => array('party' => 'uuid'),
      ),
    ),
  );

  foreach ($schema as $table => $def) {
    db_create_table($table, $def);
  }
}

/**
 * Reinstall party_service_keys schema
 */
function party_service_update_7002() {
  db_drop_table('party_service_keys');

  $schema = array(
    'description' => 'Stores Party Service API Keys',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Unique Identifier for this key.',
      ),
      'service' => array(
        'description' => 'The machine name of the service.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'label' => array(
        'description' => 'A readable label for the service key',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'apikey' => array(
        'description' => 'The api key',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'owner' => array(
        'type' => 'int',
        'description' => 'Party PID of the contact Reponsible for this API Key.',
      ),
      'from_domain' => array(
        'type' => 'varchar',
        'length' => 255,
        'description' => 'Domain or IP Address to accept requests from.',
      ),
      'status' => array(
        'type' => 'int',
        'description' => 'The status of this key (active [1] or inactive [0])',
        'not null' => TRUE,
        'default' => 1,
      ),
      'export_status' => array(
        'type' => 'int',
        'not null' => TRUE,
        // Set the default to ENTITY_CUSTOM without using the constant as it is
        // not safe to use it at this point.
        'default' => 0x01,
        'size' => 'tiny',
        'description' => 'The exportable status of the entity.',
      ),
      'module' => array(
        'description' => 'The name of the providing module if the entity has been defined in code.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('id'),
    'unique keys' => array(
      'apikey' => array('apikey'),
    ),
    'indexes' => array(
      'owner' => array('owner'),
      'status' => array('status'),
      'service' => array('service'),
    ),
    'foreign keys' => array(
      'owner' => array(
        'table' => 'party',
        'columns' => array('owner' => 'pid'),
      ),
      'service' => array(
        'table' => 'party_service',
        'columns' => array('service' => 'name'),
      ),
    ),
  );
  db_create_table('party_service_keys', $schema);
}
