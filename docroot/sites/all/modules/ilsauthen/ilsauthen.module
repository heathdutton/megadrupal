<?php

/**
 * @file
 * ILS Authentication module.
 */

/**
 * Implements hook_requirements().
 */
function ilsauthen_requirements($phase) {
  // Get requirement any requirement info specified by current driver.
  $driver = variable_get('ilsauthen_driver', 'sample');
  module_load_include('inc', 'ilsauthen', '/drivers/' . $driver);
  $driver_meta = ilsauthen_driver_meta();
  if (array_key_exists('driver_requirements', $driver_meta)) {
    $title = 'ilsauthen ' . $driver;
    $path = realpath(".") . '/'  . drupal_get_path('module', 'ilsauthen') . '/' . 'drivers/';
    $name = $driver_meta['driver_requirements']['php_class_filename'];
    $type = $driver_meta['driver_requirements']['php_class_filetype'];
    $url = $driver_meta['driver_requirements']['php_class_download_url'];
    $requirements = array();

    // Check requirements of the currently selected driver.
    if (($phase == 'runtime')) {
      $name_type = $name . '.' . $type;
      $absolute = $path . $name_type;
      $description = NULL;
      if (!file_exists($absolute)) {
        $value = t('Not enabled');
        $description = t('%name_type is not installed.  You can download it <a href="@url">here</a>. Save %name_type in %path', array(
          '@url' => url($url),
          '%name_type' => $name_type,
          '%path' => $path,
        ));
        $severity = REQUIREMENT_ERROR;
      }
      else {
        $value = t('Enabled');
        $severity = REQUIREMENT_OK;
      }
      $requirements['ilsauthen'] = array(
        'title' => $title,
        'value' => $value,
        'severity' => $severity,
        'description' => $description,
      );
    }
    return $requirements;
  }
}

/**
 * Implements hook_permission().
 */
function ilsauthen_permission() {
  return array(
    'administer ilsauthen' => array(
      'title' => t('Administer ILS Authentication'),
      'description' => t('Perform administration tasks for ILS Authentication.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_menu().
 */
function ilsauthen_menu() {
  $items['admin/config/people/ilsauthen'] = array(
    'title' => 'ILS Authen',
    'description' => 'Configure Drupal to authenticate against your Integrated Library System.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ilsauthen_admin_settings'),
    'access arguments' => array('administer ilsauthen'),
    'file' => 'ilsauthen.admin.inc',
  );
  $items['admin/config/people/ilsauthen/overview'] = array(
    'title' => 'Settings',
    'access arguments' => array('administer ilsauthen'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implements hook_form_alter().
 */
function ilsauthen_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'user_profile_form') {
    // First, check to see if the account is an external one.
    global $user;
    // Use a static query.
    $sql = "SELECT authname FROM {authmap} WHERE uid = :uid AND module = 'ilsauthen'";
    $ils_authen_authname = db_query($sql, array(':uid' => $user->uid))->fetchField();

    // Then, remove the password fields from the account form, since we want to
    // replace it with a driver-specific message.
    if ($ils_authen_authname) {
      unset($form['account']['pass']);
      // Finally, display the current driver's password reset message.
      $form['reset_password'] = array(
        '#type' => 'fieldset',
        '#title' => t('Reset your password'),
        '#weight' => 5,
        '#collapsible' => FALSE,
        '#collapsed' => FALSE,
      );
      $reset_password_message = ilsauthen_get_reset_password_message();
      $form['reset_password']['message'] = array(
        '#type' => 'item',
        '#value' => $reset_password_message,
      );
    }
  }

  if ($form_id == 'user_login' || $form_id == 'user_login_block') {
    $form['#validate'] = array(
      'user_login_name_validate',
      'ilsauthen_login_validate',
      'user_login_final_validate',
    );
  }

  // Add custom submit function on the user password reset form to check if
  // user is external, so user can be told to reset their password at the
  // external source.
  if ($form_id == 'user_pass') {
    // Gets passed $form and $form_state.
    $form['#submit'][] = 'ilsauthen_check_reset_password_request';
  }

  // Get the module path and load the selected driver.
  $driver = variable_get('ilsauthen_driver', 'sample');
  module_load_include('inc', 'ilsauthen', '/drivers/' . $driver);
  // Along with any specified php libraries.
  $driver_meta = ilsauthen_driver_meta();
  if (array_key_exists('driver_requirements', $driver_meta)) {
    $name = $driver_meta['driver_requirements']['php_class_filename'];
    $type = $driver_meta['driver_requirements']['php_class_filetype'];
    module_load_include($type, 'ilsauthen', '/drivers/' . $name);
  }

  // Allow current driver to inject its own form_alter() code here by passing
  // &$form, $form_state, $form_id.
  ilsauthen_form_alter_driver($form, $form_state, $form_id);
}

/**
 * Login form validation function.
 *
 * Checks to see if user exists and routes to either this module's
 * authentication function or Drupal's core authentication function.
 */
function ilsauthen_login_validate(&$form, &$form_state) {

  $enable_logging = variable_get('ilsauthen_enable_logging', 0);

  // First, allow drivers to perform their own login form validation.
  ilsauthen_driver_login_validation($form, $form_state);

  // Then, query the {users} table to see if the account name exists.
  // Use a static query.
  $sql = "SELECT uid FROM {users} WHERE name = :name";
  $uid = db_query($sql, array(':name' => $form_state['values']['name']))->fetchField();

  if ($uid) {
    // If the account exists, query the {authmap} table to see if
    // authentication is handled externally.
    // Use a static query.
    $sql = "SELECT authname, module FROM {authmap} WHERE uid = :uid";
    $ils_authen_authname = db_query($sql, array(':uid' => $uid))->fetchAssoc();

    // If there is a matching account in the authmap table, pass form values to
    // ilsauthen_authenticate().
    if ($ils_authen_authname['module'] == 'ilsauthen') {
      if ($enable_logging) {
        watchdog('ilsauthen', 'Account %name (uid %uid) exists and is handled by ILS authentication',
          array(
            '%name' => $form_state['values']['name'],
            '%uid' => $uid,
          )
        );
      }
      // Prevent user_login_submit from being called twice, but keep other
      // submit callbacks that modules may provide.
      $submit = array_search('user_login_submit', $form['#submit']);
      if (isset($submit)) {
        unset($form['#submit'][$submit]);
      }
      ilsauthen_authenticate($form_state);
    }
    // If the account is authenticated by another module,
    // optionally log it in case someone expects us to be doing it.
    // Then route them to Drupal's authentication.
    elseif (($ils_authen_authname['module']) && ($enable_logging)) {
      watchdog('ilsauthen', 'Account %name (uid %uid) exists but is handled by module %module',
        array(
          '%name' => $form_state['values']['name'],
          '%uid' => $uid,
          '%module' => $ils_authen_authname['module'],
        ),
        WATCHDOG_WARNING
        );
      user_login_authenticate_validate($form, $form_state);
    }
    // If not, route them to Drupal's authentication.
    else {
      user_login_authenticate_validate($form, $form_state);
    }
  }
  else {
    // If the account doesn't already exist, pass form values off to
    // ilsauthen_authenticate() to create new account
    // (will fail if ilsauthen_authenticate() returns FALSE).
    if ($enable_logging) {
      watchdog('ilsauthen', 'Account %name not found, routing to ILS authentication driver',
          array(
            '%name' => $form_state['values']['name'],
          )
        );
    }
    // Prevent user_login_submit from being called twice, but keep other
    // submit callbacks that modules may provide.
    $submit = array_search('user_login_submit', $form['#submit']);
    if (isset($submit)) {
      unset($form['#submit'][$submit]);
    }
    ilsauthen_authenticate($form_state);
  }
}

/**
 * Authenticate user against ILS plugin invoked by ilsauthen_query_driver().
 */
function ilsauthen_authenticate(&$form_state) {
  $username = $form_state['values']['name'];
  // Hash the password and make it a global so we can use it in
  // ilsauthen_user().
  require_once 'includes/password.inc';
  global $_hashed_pass;
  $_hashed_pass = user_hash_password($form_state['values']['pass']);
  // We pass $form_values to the driver so we don't need to worry about what
  // each ILS uses to authenticate (eg. combo of username, password, PIN, etc).
  $driver_response = ilsauthen_query_driver($form_state['values']);
  if ($driver_response !== FALSE) {
    // Define global variable to indicate that we have performed authentication.
    global $_ilsauthen_authenticated;
    $_ilsauthen_authenticated = TRUE;
    // Log user in, or register new user if not already registered.
    user_external_login_register($username, 'ilsauthen');
    $account = user_external_load($username);
    // Check to see if driver response is not false, but also not boolean true,
    // if it is then return a role array of some type.
    if ($driver_response !== TRUE) {
      $roles = $account->roles + $driver_response;
      $account->roles = $roles;
      user_save($account, array('roles' => $roles));
    }
    ilsauthen_mail_insert_update($account);
    $form_state['uid'] = $account->uid;
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Insert or update and email address if a new one is provided by the driver.
 */
function ilsauthen_mail_insert_update(&$account) {
  // Get ILS-specific account attributes.
  global $_ilsauthen_authenticated;
  $enable_logging = variable_get('ilsauthen_enable_logging', 0);
  if ($_ilsauthen_authenticated) {

    // Get the module path and load the selected driver.
    $driver = variable_get('ilsauthen_driver', 'sample');
    module_load_include('inc', 'ilsauthen', '/drivers/' . $driver);
    // Along with any specified php libraries.
    $driver_meta = ilsauthen_driver_meta();
    if (array_key_exists('driver_requirements', $driver_meta)) {
      $name = $driver_meta['driver_requirements']['php_class_filename'];
      $type = $driver_meta['driver_requirements']['php_class_filetype'];
      module_load_include($type, 'ilsauthen', '/drivers/' . $name);
    }

    // Get external mail, if provided by driver.
    $mail = ilsauthen_get_email_address();

    // If the mail doesn't match the current account,
    // see if any account has this mail and get their uid.
    if ($mail !== $account->mail) {
      // Use a static query.
      $sql = "SELECT name, mail, uid FROM {users} WHERE mail = :mail";
      $existing = db_query($sql, array(':mail' => $mail))->fetchAssoc();

      // If there's another account with the same mail,
      // add the duplicate mail to the current account, but log it.
      // It's probably the same person with registered to multiple services.
      if ($existing['uid']) {
        if ($existing['uid'] !== $account->uid) {
          db_update('users')
            ->fields(array(
              'mail' => $mail,
            ))
            ->condition('uid', $account->uid)
            ->execute();

          watchdog('ilsauthen', 'Account %name1 (uid %uid1) email address was changed by ILS authentication. Accounts %name1 (uid %uid1) and %name2 (uid %uid2) have the same email address.  This indicates a user with mulitple accounts and should be resolved.',
            array(
              '%name1' => $account->name,
              '%uid1' => $account->uid,
              '%name2' => $existing['name'],
              '%uid2' => $existing['uid'],
            ),
            WATCHDOG_ERROR
          );
        }
      }
      else {
        // If this is a new mail,
        // update the current account to reflect the driver-provided mail.
        db_update('users')
          ->fields(array(
            'mail' => $mail,
          ))
          ->condition('uid', $account->uid)
          ->execute();

        if ($enable_logging) {
          watchdog('ilsauthen', 'Account %name (uid %uid) email address was changed by ILS authentication',
            array(
              '%name' => $account->name,
              '%uid' => $account->uid,
            )
          );
        }
      }
    }
  }
}

/**
 * Implements hook_user_insert().
 */
function ilsauthen_user_insert(&$edit, &$account, $category = NULL) {
  // New user was just registered; if this module provided the authentication
  // get ILS-specific account attributes.
  global $_ilsauthen_authenticated;

  // Get the module path and load the selected driver.
  $driver = variable_get('ilsauthen_driver', '');
  module_load_include('inc', 'ilsauthen', '/drivers/' . $driver);
  // Along with any specified php libraries.
  $driver_meta = ilsauthen_driver_meta();
  if (array_key_exists('driver_requirements', $driver_meta)) {
    $name = $driver_meta['driver_requirements']['php_class_filename'];
    $type = $driver_meta['driver_requirements']['php_class_filetype'];
    module_load_include($type, 'ilsauthen', '/drivers/' . $name);
  }

  if ($_ilsauthen_authenticated) {
    // Add email address to account, if provided by driver.
    ilsauthen_mail_insert_update($account);

    // Add roles to account, as selected in admin settings.
    $roles = variable_get('ilsauthen_default_roles', array());
    foreach ($roles as $key => $value) {
      if ($value) {
        db_insert('users_roles')
          ->fields(array(
          'uid' => $account->uid,
          'rid' => $key,
          ))
          ->execute();
      }
    }
    // Update {users} with remote password, so that user can still log in as
    // a regular Drupal user if/when this module is uninstalled.
    global $_hashed_pass;
    db_update('users')
      ->fields(array(
      'pass' => $_hashed_pass,
      ))
      ->condition('uid', $account->uid)
      ->execute();
  }
}

/**
 * Implements hook_user_login().
 */
function ilsauthen_user_login(&$edit, &$account, $category = NULL) {
  // We want to display a message to users if they don't have an email
  // address in their profile.
  if (variable_get('ilsauthen_show_no_mail_warning', 1)) {
    // Use a static query.
    $sql = "SELECT mail FROM {users} WHERE uid = :uid";
    $mail = db_query($sql, array(':uid' => $account->uid))->fetchField();

    if (!$mail) {
      drupal_set_message(t('Please add your email address to <a href="@url">your profile</a>.', array('@url' => url("user/$account->uid/edit"))), 'warning', FALSE);
    }
  }
}

/**
 * Use ILS-specific authentication driver.
 *
 * Return TRUE if ILS authenticates user, FALSE if not. We pass in form values
 * so we don't need to worry about what each ILS uses to authenticate (could be
 * combo of username, pass, PIN, etc.), if extras are added via form_alter().
 */
function ilsauthen_query_driver($login_form_values) {
  // Get the module path and load the selected driver.
  $driver = variable_get('ilsauthen_driver', 'sample');
  module_load_include('inc', 'ilsauthen', '/drivers/' . $driver);
  // Along with any specified php libraries.
  $driver_meta = ilsauthen_driver_meta();
  if (array_key_exists('driver_requirements', $driver_meta)) {
    $name = $driver_meta['driver_requirements']['php_class_filename'];
    $type = $driver_meta['driver_requirements']['php_class_filetype'];
    module_load_include($type, 'ilsauthen', '/drivers/' . $name);
  }

  // Query driver.
  return ilsauthen_driver_connect($login_form_values);
}

/**
 * Retrieve the reset password message for the current driver.
 */
function ilsauthen_get_reset_password_message() {
  $driver = variable_get('ilsauthen_driver', 'sample');
  $reset_password_message_setting = 'ilsauthen_' . $driver . '_reset_password_message';
  $reset_password_message = variable_get($reset_password_message_setting, 'ilsauthen_xxx_reset_password_message');
  return $reset_password_message;
}

/**
 * General error handler called if remote authentication source doesn't respond.
 */
function ilsauthen_remote_connection_error($driver = NULL, $server = NULL, $error_num = 'none', $error_message = 'none') {
  $admin_email = variable_get('site_mail', '');
  drupal_set_message(t('Error connecting to authentication source. The problem has been logged but you may want to report it to the site admin at check_plain(!site_mail). Ignore the "unrecognized username or password" message below.',
    array('!site_mail' => l($admin_email, "mailto:$admin_email"))), 'warning', FALSE, array('absolute' => TRUE, 'html' => TRUE));
  watchdog('ilsauthen', 'Driver %driver cannot connect to %server (error num: %error_num, error message: %error_message)',
    array(
      '%driver' => $driver,
      '%server' => $server,
      '%error_num' => $error_num,
      '%error_message' => $error_message,
    )
  );
}

/**
 * Custom submission function for user password request form.
 *
 * Checks to see if account is managed by this module and if so,
 * displays the active driver's password reset message.
 * Local accounts are not affected by this custom submission function.
 */
function ilsauthen_check_reset_password_request($form, $form_state) {
  // Use a static query.
  $sql = "SELECT uid FROM {authmap} WHERE authname = :authname AND module = 'ilsauthen'";
  $uid = db_query($sql, array(':authname' => $form_state['values']['name']))->fetchField();

  if ($uid) {
    $message = ilsauthen_get_reset_password_message();
    drupal_set_message(check_plain($message));
  }
}
