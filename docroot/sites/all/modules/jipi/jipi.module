<?php

/**
 * Implements hook_element_info().
 */
function jipi_element_info() {
  $types['imagepicker'] = array(
    '#input' => TRUE,
    // Defaults
    '#multiple' => FALSE,
    // Image picker options
    '#data-hide_select' => TRUE,
    '#data-show_label' => FALSE,
    '#data-limit' => NULL,
    // Process & theme-related.
    '#process' => array('form_process_select', 'ajax_process_form'),
    '#theme' => 'imagepicker',
    '#theme_wrappers' => array('form_element'),
    '#attached' => array(
      'library' => array(array('jipi', 'imagepicker')),
    ),
  );
  return $types;
}

/**
 * Implements hook_library().
 */
function jipi_library() {
  $libraries['imagepicker'] = array(
    'title' => 'jQuery Image Picker',
    'website' => 'http://rvera.github.io/image-picker/',
    'version' => '0.1',
    'js' => array(
      drupal_get_path('module', 'jipi') . '/image-picker.min.js' => array(),
      drupal_get_path('module', 'jipi') . '/jipi.js' => array(),
    ),
    'css' => array(
      drupal_get_path('module', 'jipi') . '/image-picker.css' => array(
        'type' => 'file',
        'media' => 'screen',
      ),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_theme().
 */
function jipi_theme() {
  return array(
    'imagepicker' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Returns HTML for a image picker select form element.
 *
 * It is possible to group options together; to do this, change the format of
 * $options to an associative array in which the keys are group labels, and the
 * values are associative arrays in the normal $options format.
 *
 * @param $variables
 *   An associative array containing:
 *   - element: An associative array containing the properties of the element.
 *     Properties used: #title, #value, #options, #description, #extra,
 *     #multiple, #required, #name, #attributes, #size.
 *
 * @return string
 */
function theme_imagepicker($variables) {
  $element = $variables['element'];
  // Default attributes
  element_set_attributes($element, array('id', 'name', 'size'));
  // Image picker options
  element_set_attributes($element, array(
      'data-hide_select',
      'data-show_label',
      'data-limit'
    ));
  _form_set_class($element, array('form-select'));

  return '<select' . drupal_attributes($element['#attributes']) . '>' . jipi_select_options($element) . '</select>';
}

/**
 * Converts a select form element's options array into HTML.
 *
 * @param $element
 *   An associative array containing the properties of the element.
 * @param $choices
 *   Mixed: Either an associative array of items to list as choices, or an
 *   object with an 'option' member that is an associative array. This
 *   parameter is only used internally and should not be passed.
 *
 * @return string
 *   An HTML string of options for the select form element.
 */
function jipi_select_options($element, $choices = NULL) {
  if (!isset($choices)) {
    $choices = $element['#options'];
  }
  // array_key_exists() accommodates the rare event where $element['#value'] is NULL.
  // isset() fails in this situation.
  $value_valid = isset($element['#value']) || array_key_exists('#value', $element);
  $value_is_array = $value_valid && is_array($element['#value']);
  $options = '';
  foreach ($choices as $choice) {
    if (is_array($choice) && !isset($choice['#data-img-src'])) {
      $options .= '<optgroup label="' . $choice['#label'] . '">';
      $options .= form_select_options($element, $choice);
      $options .= '</optgroup>';
    }
    elseif ($choice['#value']) {
      if ($value_valid && (!$value_is_array && (string) $element['#value'] === $choice['#value'] || ($value_is_array && in_array($choice['#value'], $element['#value'])))) {
        $choice['#selected'] = 'selected';
      }
      element_set_attributes($choice, array(
        'value',
        'selected',
        'data-img-src',
        'data-img-label',
      ));
      if (!isset($choice['#label'])) {
        $choice['#label'] = $choice['#value'];
      }
      $options .= '<option' . drupal_attributes($choice['#attributes']) . '>' . check_plain($choice['#label']) . '</option>';
    }
  }
  return $options;
}
