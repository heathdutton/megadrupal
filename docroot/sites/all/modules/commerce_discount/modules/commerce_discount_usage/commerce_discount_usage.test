<?php

/**
 * @file
 * Commerce Discounts Usage tests.
 */

/**
 * Testing commerce discount usage module UI and functionality.
 */
class CommerceDiscountUsageTest extends CommerceDiscountTestBase {

  private $store_customer2;

  /**
   * {@inheritdoc}
   */
  protected $sub_module = 'commerce_discount_usage';

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => 'Discounts usage',
      'description' => 'Test discounts usage UI and functionality',
      'group' => 'Commerce discounts',
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    parent::setUp();
    $this->store_customer2 = $this->createStoreCustomer();
  }

  /**
   * Test usage specific elements in the add discount UI.
   */
  public function testCommerceDiscountUsageUIAddDiscount() {
    // Login with store admin.
    $this->drupalLogin($this->store_admin);

    // Access to the admin discount creation page.
    $this->drupalGet('admin/commerce/store/discounts/add');

    // Check the integrity of the add form.
    $this->assertFieldByName('commerce_discount_fields[discount_usage_per_person][und][0][value]', NULL, 'Maximum usage per customer field is present');
    $this->assertFieldByName('commerce_discount_fields[discount_usage_limit][und][0][value]', NULL, 'Maximum overall usage field is present');

    // Create a discount.
    $values = array(
      'label' => 'Order discount - fixed',
      'name' => 'order_discount_fixed',
      'component_title' => 'Order discount',
      'commerce_discount_fields[commerce_discount_offer][und][form][commerce_fixed_amount][und][0][amount]' => 12.77,
      'commerce_discount_fields[discount_usage_limit][und][0][value]' => 5,
    );
    $this->drupalPost(NULL, $values, t('Save discount'));

    // Load the discount and wrap it.
    $discount = entity_load_single('commerce_discount', 1);
    $wrapper = entity_metadata_wrapper('commerce_discount', $discount);

    // Check the usage fields of the stored discount.
    $this->assertTrue($wrapper->discount_usage_per_person->value() == 0, 'Discount uses field is empty.');
    $this->assertTrue($wrapper->discount_usage_limit->value() == 5, 'Discount max uses stored correctly.');

    // Check the discounts listing.
    $this->assertText(t('@amount available', array('@amount' => 5)), 'Analytics - Max usage is shown.');
    $this->assertText(t('Used @amount times', array('@amount' => 0)), 'Analytics - Usage is shown.');
  }

  /**
   * Test usage specific elements in the edit discount UI.
   */
  public function testCommerceDiscountUsageUIEditDiscount() {
    // Testing fixed discount.
    // Create a fixed order discount of $3 limited to one use.
    $discount = $this->createUsageDiscount('order_discount', 'fixed_amount', 300, 1);

    // Login with store admin.
    $this->drupalLogin($this->store_admin);

    // Access to the admin discount edit page.
    $this->drupalGet('admin/commerce/store/discounts/manage/' . $discount->name);

    // Check the integrity of the add form.
    $this->assertFieldByName('commerce_discount_fields[discount_usage_per_person][und][0][value]', NULL, 'Maximum usage per customer field is present');
    $this->assertFieldByName('commerce_discount_fields[discount_usage_limit][und][0][value]', NULL, 'Maximum overall usage field is present');

    // Change the discount values.
    $values = array(
      'label' => 'Order discount - fixed',
      'name' => 'order_discount_fixed',
      'component_title' => 'Order discount',
      'commerce_discount_fields[commerce_discount_offer][und][form][commerce_fixed_amount][und][0][amount]' => 12.77,
      'commerce_discount_fields[discount_usage_limit][und][0][value]' => 5,
    );
    $this->drupalPost(NULL, $values, t('Save discount'));

    // Load the discount from the database and wrap it.
    $discounts = entity_load('commerce_discount', array($discount->discount_id), $conditions = array(), $reset = TRUE);
    $discount_wrapper = entity_metadata_wrapper('commerce_discount', reset($discounts));

    // Check the usage fields of the stored discount.
    $this->assertEqual($discount_wrapper->discount_usage_per_person->value(), 0, 'Discount uses field is empty.');
    $this->assertEqual($discount_wrapper->discount_usage_limit->value(), 5, 'Discount max uses stored correctly.');

    // Check the discounts listing.
    $this->assertText(t('@amount available', array('@amount' => 5)), 'Analytics - Max usage is shown.');
    $this->assertText(t('Used @amount times', array('@amount' => 0)), 'Analytics - Usage is shown.');
  }

  /**
   * Test fixed order discounts.
   */
  public function testCommerceDiscountUsageFixedOrderDiscount() {
    // Testing fixed discount.
    // Create a fixed order discount of $3 limited to one use.
    $this->createUsageDiscount('order_discount', 'fixed_amount', 300, 1);

    // Create an order.
    $order = $this->createDummyOrder($this->store_customer->uid, array($this->product->product_id => 1), 'completed');
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

    // Recalculate discounts.
    commerce_cart_order_refresh($order);

    // Check if the discount was applied on the order total price.
    $this->assertTrue($order_wrapper->commerce_order_total->amount->value() == 700, 'Fixed order discount is deducted correctly on the first use.');

    // Create another order to make sure the discount isn't applied again.
    $order = $this->createDummyOrder($this->store_customer2->uid, array($this->product->product_id => 1), 'completed');
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

    // Recalculate discounts.
    commerce_cart_order_refresh($order);
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

    // Check if the discount was applied on the order total price.
    $this->assertTrue($order_wrapper->commerce_order_total->amount->value() == 1000, 'Fixed order discount is ignored after maximal usage.');
  }

  /**
   * Test percentage order discounts.
   */
  public function testCommerceDiscountUsagePercentageOrderDiscount() {
    // Testing percentage discount.
    // Create a percentage order discount of 5% limited to one use.
    $this->createUsageDiscount('order_discount', 'percentage', 5, 1);
    // Create a completed order.
    $order = $this->createDummyOrder($this->store_customer->uid, array($this->product->product_id => 1), 'completed');

    // Recalculate discounts.
    commerce_cart_order_refresh($order);
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

    // Check if the discount was applied on the order total price.
    $this->assertTrue($order_wrapper->commerce_order_total->amount->value() == 950, 'Percentage order discount is deducted correctly.');

    // Create another order to make sure the discount isn't applied again.
    $order = $this->createDummyOrder($this->store_customer2->uid, array($this->product->product_id => 1), 'completed');
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

    // Recalculate discounts.
    commerce_cart_order_refresh($order);

    // Check if the discount was applied on the order total price.
    $this->assertTrue($order_wrapper->commerce_order_total->amount->value() == 1000, 'Percentage order discount is ignored after maximal usage.');
  }

  /**
   * Test fixed product discounts.
   */
  public function testCommerceDiscountUsageFixedProductDiscount() {
    $this->createUsageDiscount('product_discount', 'fixed_amount', 300, 1);

    // Create an order.
    $order = $this->createDummyOrder($this->store_customer->uid, array($this->product->product_id => 1), 'completed');

    // Recalculate discounts.
    commerce_cart_order_refresh($order);
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

    // Check if the discount was added as a component to the line item.
    $price = commerce_price_wrapper_value($order_wrapper->commerce_line_items->get(0), 'commerce_unit_price');
    $this->assertTrue($price['data']['components'][1]['price']['amount'] == -300, 'Fixed product discount is added as a price component to the line item.');
    commerce_order_save($order);

    // Create another order to make sure the discount isn't applied again.
    $order = $this->createDummyOrder($this->store_customer2->uid, array($this->product->product_id => 1), 'completed');

    // Recalculate discounts.
    commerce_cart_order_refresh($order);
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

    // Check if the discount was added as a component to the line item.
    $price = commerce_price_wrapper_value($order_wrapper->commerce_line_items->get(0), 'commerce_unit_price');
    $this->assertTrue(count($price['data']['components']) === 1, 'Fixed product discount is ignored after maximal usage.');
  }

  /**
   * Test percentage product discounts.
   */
  public function testCommerceDiscountUsagePercentageProductDiscount() {
    $this->createUsageDiscount('product_discount', 'percentage', 5, 1);

    // Create an order.
    $order = $this->createDummyOrder($this->store_customer->uid, array($this->product->product_id => 1), 'completed');

    // Recalculate discounts.
    commerce_cart_order_refresh($order);
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

    // Check if the discount was added as a component to the line item.
    $price = commerce_price_wrapper_value($order_wrapper->commerce_line_items->get(0), 'commerce_unit_price');
    $this->assertEqual($price['data']['components'][1]['price']['amount'], -50, 'Percentage product discount is added as a price component to the line item.');
    commerce_order_save($order);

    // Create another order to make sure the discount isn't applied again.
    $order = $this->createDummyOrder($this->store_customer2->uid, array($this->product->product_id => 1), 'completed');

    // Recalculate discounts.
    commerce_cart_order_refresh($order);
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

    // Check if the discount was added as a component to the line item.
    $price = commerce_price_wrapper_value($order_wrapper->commerce_line_items->get(0), 'commerce_unit_price');
    $this->assertTrue(count($price['data']['components']) === 1, 'Percentage product discount is ignored after maximal usage.');
  }

  /**
   * Create a discount.
   *
   * @param string $discount_type
   *   The discount type; Either 'order_discount' or 'product_discount'.
   * @param string $offer_type
   *   The discount offer type; Either 'fixed_amount' or 'percentage'.
   * @param int $amount
   *   The discount offer amount.
   * @param int $max_usage
   *   Maximal uses for the discount.
   *
   * @return object
   *   The newly created commerce_discount entity.
   */
  protected function createUsageDiscount($discount_type, $offer_type, $amount, $max_usage) {
    // Use the base class to create a discount.
    $discount = parent::createDiscount($discount_type, $offer_type, $amount);

    // Populate the max usage field.
    $wrapper = entity_metadata_wrapper('commerce_discount', $discount);
    $wrapper->discount_usage_limit = $max_usage;
    $wrapper->save();

    return $wrapper->value();
  }

}
