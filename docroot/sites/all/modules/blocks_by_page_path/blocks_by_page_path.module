<?php
/**
 * @file
 * Adds blocks_by_path functionality.
 */

/**
 * Implements hook_menu().
 */
function blocks_by_page_path_menu() {
  $items = array();
  $items['admin/structure/block/blocks_by_page_path'] = array(
    "title" => "Blocks By Page Path",
    "page callback" => "drupal_get_form",
    "page arguments" => array("blocks_by_page_path_form"),
    "type" => MENU_LOCAL_TASK,
    "access arguments" => array('administer blocks'),
  );
  return $items;
}

/**
 * Implements hook_help().
 */
function blocks_by_page_path_help($path, $arg) {
  switch ($path) {
    case 'admin/help#blocks_by_page_path':
      $filepath = dirname(__FILE__) . '/README.md';
      if (file_exists($filepath)) {
        $readme = file_get_contents($filepath);
      }
      else {
        $filepath = dirname(__FILE__) . '/README.txt';
        if (file_exists($filepath)) {
          $readme = file_get_contents($filepath);
        }
      }
      if (!isset($readme)) {
        return NULL;
      }
      if (module_exists('markdown')) {
        $filters = module_invoke('markdown', 'filter_info');
        $info = $filters['filter_markdown'];
        if (function_exists($info['process callback'])) {
          $output = $info['process callback']($readme, NULL);
        }
        else {
          $output = '<pre>' . $readme . '</pre>';
        }
      }
      else {
        $output = '<pre>' . $readme . '</pre>';
      }
      return $output;
  }
}

/**
 * Build the user interface to check the block details.
 */
function blocks_by_page_path_form($form, &$form_state) {
  $form["introduction"] = array(
    "#type" => "markup",
    "#markup" => "<strong>" . t("Get the block details, which are assigned to a particular page by providing the page path") . "</strong>",
  );
  $form["page_url"] = array(
    "#type" => "textfield",
    "#title" => t("Page path"),
    "#description" => t("Drupal path ex: node/29 or content/services."),
  );
  $form["submit"] = array(
    "#type" => "submit",
    "#value" => t("Find"),
    "#ajax" => array(
      "callback" => "blocks_by_page_path_ajax_find_blocks",
      "wrapper" => "block_box",
      "event" => "click",
    ),
  );
  $form["result_wrap"] = array(
    "#type" => "markup",
    "#prefix" => "<div id='block_box'>",
    "#suffix" => "</div>",
  );
  return $form;
}

/**
 * Ajax callback to find the block details.
 */
function blocks_by_page_path_ajax_find_blocks($form, $form_state) {
  $default_front_theme = variable_get('theme_default', '');
  $provide_value = $form_state["values"]["page_url"];
  $output = "";
  if (!empty($provide_value)) {
    if (drupal_valid_path($provide_value)) {
      $query = db_select("block", "b");
      $query->fields("b", array("delta",
        "module",
        "region",
        "title",
        "pages",
        "visibility",
      )
        );
      $db_or = db_or();
      $db_or->condition(
              db_and()->condition("b.pages", "%" . db_like($provide_value) . "%", "LIKE")
                      ->condition("b.theme", $default_front_theme)
              );
      $db_or->condition(
              db_and()->condition("b.visibility", "0")
                      ->condition("b.region", "-1", "<>")
                      ->condition("b.theme", $default_front_theme)
              );
      $query->condition($db_or);
      $result = $query->execute()->fetchAll();
      // Find the exceptional blocks.
      foreach ($result as $key => $res) {
        if (!empty($res->pages)) {
          $pages = explode("\n", $res->pages);
          // Trim the data.
          $pages_t = array();
          foreach ($pages as $page) {
            $pages_t[] = trim($page);
          }
          // Exclude blocks which are set as "All pages except those listed".
          if ($res->visibility == 0) {
            if (in_array($provide_value, $pages_t)) {
              unset($result[$key]);
            }
          }
          elseif ($res->visibility == 1) {
            if (!in_array($provide_value, $pages_t)) {
              unset($result[$key]);
            }
          }
        }
      }
      // Blocks added by context module.
      if (module_exists('context')) {
        $context_query = db_select("context", "c");
        $context_query->fields("c", array("name", "conditions", "reactions"));
        $context_query->condition("c.conditions", "%" . db_like($provide_value) . "%", "LIKE");
        $context_result = $context_query->execute()->fetchAll();
        if (count($context_result) > 0) {
          foreach ($context_result as $context_value) {
            $conditions = unserialize($context_value->conditions);
            $paths = $conditions['path']['values'];
            if (in_array($provide_value, $paths)) {
              $reactions = !empty($context_value->reactions) ? unserialize($context_value->reactions) : '';
              if (!empty($reactions)) {
                if (isset($reactions['block']['blocks'])) {
                  $context_blocks = $reactions['block']['blocks'];
                  foreach ($context_blocks as $cblock) {
                    $cblock_array = (object) $cblock;
                    if ($cblock_array->module == 'block') {
                      $btitle = blocks_by_page_path_get_block_title($cblock_array->module, $cblock_array->delta);
                      if (!empty($btitle)) {
                        $cblock_array->title = $btitle;
                      }
                    }
                    $cblock_array->assigned_using = 'context';
                    $cblock_array->context_id = $context_value->name;
                    array_push($result, $cblock_array);
                  }
                }
              }
            }
          }
        }
      }
      if (count($result) > 0) {
        $header = array(t("Block Name"),
          t("Default Theme"),
          t("Region"),
          t("Assigned Using"),
          t("Edit"),
        );
        $rows = array();
        foreach ($result as $vals) {
          // Get block name by loading the block.
          $block = module_invoke($vals->module, 'block_view', $vals->delta);
          if (isset($block["subject"])) {
            $title = check_plain($block["subject"]);
          }
          else {
            $title = $vals->module == 'block' ? $vals->title : $vals->module;
            $title = check_plain($title);
          }
          $region = ($vals->region == ''||$vals->region == -1) ? t("None") : $vals->region;
          if (isset($vals->assigned_using)) {
            $assigned_using = t('Context Module');
            $edit_link = l(t("Edit"), "admin/structure/context/list/" . $vals->context_id . "/edit");
          }
          else {
            $assigned_using = t('Drupal Blocks');
            // $regionName = $vals->region.
            $edit_link = l(t("Edit"), "admin/structure/block/manage/" . $vals->module . "/" . $vals->delta . "/configure");
          }
          $rows[] = array($title,
            $default_front_theme,
            $region,
            $assigned_using,
            $edit_link,
          );
        }
        $output .= "<div>" . t("Following blocks are interacting with the page path '@path'", array("@path" => $provide_value)) . "</div><br />";
        $output .= theme('table', array("header" => $header, "rows" => $rows));
      }
      else {
        $output = t("No blocks found in specified path '@path'", array("@path" => $provide_value));
      }
    }
    else {
      $output = t("Invalid site path");
    }
  }
  $element = $form["result_wrap"];
  $element["#markup"] = $output;
  return $element;
}

/**
 * Load block title by block delta and module.
 */
function blocks_by_page_path_get_block_title($module, $delta) {
  $query = db_select("block", "b");
  $query->fields("b", array("title"));
  $query->condition("b.module", $module);
  $query->condition("b.delta", $delta);
  $result = $query->execute()->fetchField();
  if ($result) {
    return $result;
  }
}
