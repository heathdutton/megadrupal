<?php

 /**
  * @file
  *
  * Installer and unistaller for Weather Block.
  */

/**
 * Implementsinstall().
 */
function weather_block_install() {

  variable_set('weather_services', array('weather_com' => st('Weather.com'), 'yahoo_weather' => st('Yahoo Weather (recommended)'), 'world_weather_online' => st('World Weather Online')));

  variable_set('weather_use_smart_ip', 0);

  if (!array_key_exists('weather_locations', taxonomy_vocabulary_get_names())) {
    taxonomy_vocabulary_save((object) array(
      'name' => 'Weather Locations (local weather)',
      'machine_name' => 'weather_locations',
      'description' => st('Weather locations stored in this vocabulary are shown on the Local Weather page provided by this module'),
    ));
  }

  if (!array_key_exists('weather_locations_foreign', taxonomy_vocabulary_get_names())) {
    taxonomy_vocabulary_save((object) array(
      'name' => 'Weather Locations (world weather)',
      'machine_name' => 'weather_locations_foreign',
      'description' => st('Weather locations stored in this vocabulary are shown on the World Weather page provided by this module'),
    ));
  }

  foreach (variable_get('weather_services') as $key => $val) {

    if (!field_info_field('field_' . $key)) {
      $field = array(
        'field_name' => 'field_' . $key,
        'type' => 'text',
      );

      if($key == 'yahoo_weather') {
        $description = t('Please enter the WOEID for Yahoo Weather. You may use for example !val for finding the WOEIDs, please make sure that the WOEID entered is valid. The WOEID will be validated against Yahoo Weather service.', array('!val' => l('http://woeid.rosselliot.co.nz', 'http://woeid.rosselliot.co.nz')));
      }
      elseif ($key == 'world_weather_online') {
        $description = t('Please enter the Weather ID for World Weather Online. The preferred format is <em>City, Country</em>.');
      }
      elseif ($key == 'weather_com') {
        $description = t('Please enter the Weather ID for weather.com. You may use for example !val to locate the IDs (not all the cities have a weather station so choose a nearest possible location).', array('!val' => l('http://aspnetresources.com/tools/WeatherIdResolver', 'http://aspnetresources.com/tools/WeatherIdResolver')));
      }

      field_create_field($field);
    }

    if (!field_info_instance('taxonomy_term', 'field_' . $key, 'weather_locations')) {

      $instance = array(
        'field_name' => 'field_' . $key,
        'entity_type' => 'taxonomy_term',
        'label' => st('Location ID for ' . $val),
        'bundle' => 'weather_locations',
        'description' => $description,
        'required' => FALSE,
        'widget' => array(
          'type' => 'textfield',
        ),
      );

      field_create_instance($instance);
    }

    $instance['bundle'] = 'weather_locations_foreign';

    field_create_instance($instance);
  }

  $array = taxonomy_vocabulary_get_names();

  parselocationdata('cities.txt', 'weather_locations', $array);

  parselocationdata('foreign_cities.txt', 'weather_locations_foreign', $array);

  parseini();

  drupal_flush_all_caches();
}

/**
 * Custom function for parsing defaults from the ini file.
 */
function parseini() {

  $configuration = parse_ini_file(dirname(__FILE__) . '/weather_block.ini', TRUE);

  $default_location = taxonomy_get_term_by_name($configuration['configuration']['default_weather_location_local']);

  foreach ($default_location as $key => $val) {
    variable_set('weather_location', $key);
  }

  variable_set('weather_service', $configuration['configuration']['default_weather_service']);

  variable_set('weather_display_units', $configuration['configuration']['default_measurement_unit']);

  $default_location_world = taxonomy_get_term_by_name($configuration['configuration']['default_weather_location_world']);

  foreach ($default_location_world as $key => $val) {
    variable_set('weather_location_world', $key);
  }
}

/**
 * Custom function for parsing the location data.
 */
function parselocationdata($filename, $taxonomy, $array) {

  $file = file(drupal_get_path('module', 'weather_block') . '/data/' . $filename);

  foreach ($file as $val) {

    $location = explode(':::', $val);

    $term = array(
      'name' => $location[0],
      'vid' => $array[$taxonomy]->vid,
    );

    $i = 0;

    foreach (variable_get('weather_services') as $key => $val) {

      $i++;
      $term['field_' . $key]['und'][0]['value'] = $location[$i];
    }

    taxonomy_term_save((object)$term);
  }
}

/**
 * Implements hook_unisntall().
 */
function weather_block_uninstall() {

  $services = variable_get('weather_services');

  print_r($services);

  foreach($services as $key => $val) {

    variable_del('weather_display_link_' . $key);
    variable_del('weather_display_temperature_' . $key);
    variable_del('weather_display_wind_' . $key);
    variable_del('weather_display_icon_' . $key);
    variable_del('weather_display_humidity_' . $key);
    variable_del('weather_display_city_' . $key);
    variable_del('weather_display_dev_point_' . $key);
  }

  variable_del('weather_services');
  variable_del('weather_location');
  variable_del('weather_location_world');
  variable_del('weather_service');
  variable_del('weather_key_weather_com');
  variable_del('weather_partner_id_weather_com');
  variable_del('weather_display_units');
  variable_del('weather_icons_path');
  variable_del('weather_use_provider_weather_icons');
  variable_del('weather_key_world_weather_online');

  $array = taxonomy_vocabulary_get_names();

  taxonomy_vocabulary_delete($array['weather_locations']->vid);
  taxonomy_vocabulary_delete($array['weather_locations_foreign']->vid);

  drupal_flush_all_caches();
}
