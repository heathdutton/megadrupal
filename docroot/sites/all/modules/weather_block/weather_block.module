<?php

/**
 * Implements hook_permission().
 */
function weather_block_permission() {
  return array(
    'administer weather_block' => array(
      'title' => t('Administer Weather block'),
    ),
  );
}

function weather_block_contextual_links_view_alter(&$element, &$items) {
  if (isset($element['#element']['#block']) && $element['#element']['#block']->delta == "weather_block") {
    $element['#links']['weather_block'] = array(
      'title' => 'Configure module settings',
      'href' => url('/admin/config/weather_block', array('absolute' => TRUE)),
    );
    $element['#links']['weather_block_taxonomies'] = array(
      'title' => 'Configure weather locations',
      'href' => url('/admin/config/weather_block/taxonomies', array('absolute' => TRUE)),
    );
  }
}

/**
 * Implements hook_menu().
 */
function weather_block_menu() {

  $items = array();

  $items['weather'] = array(
    'title' => 'Weather',
    'page callback' => 'weather_block_page',
    'access callback' => TRUE,
    'file' => 'includes/weather_block.inc',
    'expanded' => TRUE,
  );

  $items['world_weather'] = array(
    'title' => 'World weather',
    'page callback' => 'weather_block_page',
    'access callback' => TRUE,
    'file' => 'includes/weather_block.inc',
    'expanded' => TRUE,
  );

  $items['admin/config/weather_block'] = array(
    'title' => 'Weather block',
    'description' => 'Control Weather block module settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('weather_block_admin_settings'),
    'access arguments' => array('administer weather block'),
  );

  $items['admin/config/weather_block/taxonomies'] = array(
    'title' => 'Taxonomies',
    'description' => 'Control Weather block module settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('weather_block_taxonomy_edit_form'),
    'access arguments' => array('administer weather block'),
  );

  return $items;
}

/**
 * Implements hook_validate().
 */
function weather_block_admin_settings_validate($form, &$form_state) {

  if ($form_state['values']['weather_service'] == 'yahoo_weather') {
    
    validation_extra($form_state, $service_id_type = 'WOEID');
  }

  if ($form_state['values']['weather_service'] == 'world_weather_online') {

    if (empty($form_state['values']['weather_key_world_weather_online'])) {

      form_set_error('weather_block', t('You must enter your registration key to use World Weather Online weather service'));
    }
    else {

      $key = $form_state['values']['weather_key_world_weather_online'];

      $errcode = simplexml_load_file("http://free.worldweatheronline.com/feed/weather.ashx?q=Helsinki&format=xml&num_of_days=5&key=" . $key . "");

      if (substr_count($errcode->error->msg, 'User account does not exist') != NULL) {
        form_set_error('weather_block', t('Invalid registration key for World Weather Online.'));
      }
    }

    validation_extra($form_state, $service_id_type = 'World Weather Online ID');
  }
}

function validation_extra($form_state, $service_id_type) {

  $locations = entity_load('taxonomy_term', array($form_state['values']['weather_location'], $form_state['values']['weather_location_world']));

  foreach ($locations as $key => $val) {

    $term = 'field_' . $form_state['values']['weather_service'];

    if (count($val->$term) == 0) {

      if ($val->vocabulary_machine_name == 'weather_locations') {
        $taxonomy = 'Local weather';
      }
      else {
        $taxonomy = 'World weather';
      }

      form_set_error('weather_block', t('The selected !taxonomy location cannot be used because it has no !id_type set', array('!taxonomy' => $taxonomy, '!id_type' => $service_id_type)));
    }
  } 
}

/**
 * Implements hook_block_configure().
 */
function weather_block_block_configure($delta = '') {

  $form = array();

  return $form;
}

/**
 * Implements hook_form().
 */
function weather_block_taxonomy_edit_form($form, &$form_state) {

  $locations = array();

  $array = taxonomy_vocabulary_get_names();

  $values = taxonomy_get_tree($array['weather_locations']->vid);

  foreach ($values as $tid) {
    $entity = entity_load('taxonomy_term', array($tid->tid));

    foreach ($entity as $val) {

      if ($val->status != 0) {

        $locations[$tid->tid] = $tid->name;
      }
      else {

        $locations[$tid->tid] = $tid->name . " " . t('(disabled)');
      }
    }
  }

  $values = taxonomy_get_tree($array['weather_locations_foreign']->vid);

  foreach ($values as $tid) {

    $entity = entity_load('taxonomy_term', array($tid->tid));

    foreach ($entity as $val) {

      if ($val->status != 0) {

        $locations_world[$tid->tid] = $tid->name;
      }
      else {

        $locations_world[$tid->tid] = $tid->name . " " . t('(disabled)');
      }
    }
  }

  $form = array();

  $form['#submit'][] = 'weather_block_taxonomy_edit_form_submit';

  $form['#prefix'] = "<h1>" . t('<h1>Manage weather locations') . "</h1>";

  $form['taxonomy_local_weather'] = array(
    '#title' => t('Local weather'),
    '#type' => 'select',
    '#options' => $locations,
    '#multiple' => TRUE,
    '#size' => 25,
    '#prefix' => "<div id='weather_taxonomies'><p>" . t('Please select one or more of the weather locations in one of the selectors below and click <em>Move right</em> or <em>Move left</em> to move the terms from taxonomy to another or copy them from taxonomy to another by clicking <em>Copy left</em> or <em>Copy right</em>.') . "</p><p>" . t('You may also select one or more terms from both of the taxonomies and enable or disable them by clicking <em>Enable</em> or <em>Disable</em> respectively or remove the selected terms entirely by clicking <em>Remove</em>.') . "</p>",
  );

  $form['taxonomy_world_weather_moveleft'] = array(
    '#type' => 'submit',
    '#value' => t('<- Move left'),
    '#title' => t('Copy to local weather'),
    '#attributes' => array('title' => t('Move to local weather')),
    '#prefix' => "<div class='move'>",
  );

  $form['taxonomy_world_weather_moveright'] = array(
    '#type' => 'submit',
    '#value' => t('Move right ->'),
    '#attributes' => array('title' => t('Move to world weather')),
  );

  $form['taxonomy_world_weather_copy_left'] = array(
    '#type' => 'submit',
    '#value' => t('<- Copy left'),
    '#attributes' => array('title' => t('Copy to local weather')),
  );

  $form['taxonomy_world_weather_copy_right'] = array(
    '#type' => 'submit',
    '#value' => t('Copy right ->'),
    '#attributes' => array('title' => t('Copy to world weather')),
  );

  $form['taxonomy_world_weather_disable'] = array(
    '#type' => 'submit',
    '#value' => t('Disable'),
    '#attributes' => array('title' => t('Disable selected locations')),
  );

  $form['taxonomy_world_weather_enable'] = array(
    '#type' => 'submit',
    '#value' => t('Enable'),
    '#attributes' => array('title' => t('Enable selected locations')),
  );

  $form['taxonomy_world_weather_remove'] = array(
    '#type' => 'submit',
    '#value' => t('Remove'),
    '#attributes' => array('title' => t('Remove selected locations')),
    '#suffix' => "</div>",
  );

  $form['taxonomy_world_weather'] = array(
    '#title' => t('World weather'),
    '#type' => 'select',
    '#options' => $locations_world,
    '#multiple' => TRUE,
    '#size' => 25,
    '#suffix' => "</div>",
  );

  return $form;
}

/**
 * Implements hook_form_submit().
 */
function weather_block_taxonomy_edit_form_submit($form, &$form_state) {

  $array = taxonomy_vocabulary_get_names();

  if ($form_state['values']['op'] == "<- Move left") {

    foreach ($form_state['values']['taxonomy_world_weather'] as $key => $val) {

      db_query("update taxonomy_term_data set vid = '" . $array['weather_locations']->vid . "' where tid = '" . $val . "'")or die("Error");
    }
  }
  if ($form_state['values']['op'] == "Move right ->") {

    foreach ($form_state['values']['taxonomy_local_weather'] as $key => $val) {

      db_query("update taxonomy_term_data set vid = '" . $array['weather_locations_foreign']->vid . "' where tid = '" . $val . "'")or die("Error");
    }
  }

  if ($form_state['values']['op'] == "<- Copy left") {

    foreach ($form_state['values']['taxonomy_world_weather'] as $key => $val) {

      custom_create_taxonomy_term(entity_load('taxonomy_term', array($val)), $array['weather_locations']->vid, $array['weather_locations']->machine_name);
    }
  }

  if ($form_state['values']['op'] == "Copy right ->") {

    foreach ($form_state['values']['taxonomy_local_weather'] as $key => $val) {

      custom_create_taxonomy_term(entity_load('taxonomy_term', array($val)), $array['weather_locations_foreign']->vid, $array['weather_locations_foreign']->machine_name);
    }
  }

  if ($form_state['values']['op'] == "Disable") {

    foreach ($form_state['values']['taxonomy_world_weather'] as $key => $val) {

      db_query("update termstatus set status = 0 where tid = '" . $val . "'")or die("Error");
    }

    foreach ($form_state['values']['taxonomy_local_weather'] as $key => $val) {

      db_query("update termstatus set status = 0 where tid = '" . $val . "'")or die("Error");
    }
  }
  if ($form_state['values']['op'] == "Enable") {

    foreach ($form_state['values']['taxonomy_world_weather'] as $key => $val) {

      db_query("update termstatus set status = 1 where tid = '" . $val . "'")or die("Error");
    }

    foreach ($form_state['values']['taxonomy_local_weather'] as $key => $val) {

      db_query("update termstatus set status = 1 where tid = '" . $val . "'")or die("Error");
    }
  }
  if ($form_state['values']['op'] == "Remove") {

    foreach($form_state['values']['taxonomy_world_weather'] as $key => $val) {

      db_query("delete from taxonomy_term_data where tid = '" . $val . "'")or die("Error");
    }

    foreach($form_state['values']['taxonomy_local_weather'] as $key => $val) {

      db_query("delete from taxonomy_term_data where tid = '" . $val . "'")or die("Error");
    }
  }

  return $form;
}

/**
* Create a taxonomy term and return the tid.
*/
function custom_create_taxonomy_term($term, $vid, $machine_name) {

  foreach($term as $val) {

    if(count(taxonomy_get_term_by_name($val->name, $machine_name)) == 0) { 

      unset($val->tid);

      $val->vid = $vid;

      taxonomy_term_save((object) $val);
    }
  }
}

/**
 * Form builder; Configure user settings for this site.
 *
 * @ingroup forms
 * @see system_settings_form()
 */
function weather_block_admin_settings($form) {

  $locations = array();

  $array = taxonomy_vocabulary_get_names();

  $values = taxonomy_get_tree($array['weather_locations']->vid);

  foreach ($values as $tid) {
    $entity = entity_load('taxonomy_term', array($tid->tid));

    foreach ($entity as $val) {

      if ($val->status != 0) {
 
        $locations[$tid->tid] = $tid->name;
      }
    }
  }

  $values = taxonomy_get_tree($array['weather_locations_foreign']->vid);

  foreach ($values as $tid) {

    $entity = entity_load('taxonomy_term', array($tid->tid));

    foreach ($entity as $val) {

      if ($val->status != 0) {

        $locations_world[$tid->tid] = $tid->name;
      }
    }
  }

  $form = array();

  global $base_url;

  $form['#prefix'] = t('<p>Please set the default settings for the module using this form. The locations for which the weather is shown are stored in two separate taxonomies !taxonomy1 and !taxonomy2. Feel free to edit the locations in the taxonomies to fit your preferences.</p>',
                        array('!taxonomy1' => l(t('Weather locations (local)'), $base_url . '/admin/structure/taxonomy/weather_locations'), '!taxonomy2' => l(t('Weather locations (world)'), $base_url . '/admin/structure/taxonomy/weather_locations')));

  $form['default_settings'] = array(
    '#type' => 'fieldset',
    '#title' => 'Default settings for the module',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['default_settings']['weather_locations'] = array(
    '#type' => 'fieldset',
    '#title' => 'Weather locations',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['default_settings']['weather_locations']['weather_use_smart_ip'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use Smart IP for the default local weather location'),
    '#default_value' => variable_get('weather_use_smart_ip'),
    '#prefix' => t("<p>You may choose to use the Smart IP service to set the default weather location for local weather. If this option is selected, the service will attempt to find a weather forecast for your location based on the clients' IP address on per-session basis. <br/><b>Note:</b> It is recommended that you set the site default weather location properly because in case the location provided by the Smart IP doesn't have a forecast available, the system will use the default local weather location set in this form.</p>"),
  );

  $form['default_settings']['weather_locations']['weather_location'] = array(
    '#type' => 'select',
    '#title' => t('Default weather location for local weather (the location selected here is what will be shown on the weather block)'),
    '#description' => t('The default location for local weather is selected from the taxonomy "Weather locations (local weather)". If no location is selected, the default location is set to Helsinki, Finland.'),
    '#default_value' => variable_get('weather_location'),
    '#options' => $locations,
    '#required' => TRUE,
  );

  $form['default_settings']['weather_locations']['weather_location_world'] = array(
    '#type' => 'select',
    '#title' => t('Default weather location for world weather (this location will be displayed by default on the <em>World Weather</em> page)'),
    '#description' => t('The default location for world weather is selected from the taxonomy "Weather locations (world weather)". If no location is selected, the default location is set to London, UK.'),
    '#default_value' => variable_get('weather_location_world'),
    '#options' => $locations_world,
    '#required' => TRUE,
  );

  $form['default_settings']['weather_display_units'] = array(
    '#type' => 'radios',
    '#title' => t('Format (measurement units)'),
    '#default_value' => variable_get('weather_display_units'),
    '#options' => array('m/s, &deg;C', 'mph, &deg;F'),
  );

  $form['default_settings']['weather_service'] = array(
    '#type' => 'radios',
    '#title' => t('Choose which service to use'),
    '#default_value' => variable_get('weather_service'),
    '#options' => variable_get('weather_services'),
    '#weight' => -10,
    '#description' => t('The recommended weather service is Yahoo Weather, the support for weather.com is slightly untested. Also the World Weather Online should work fine.'),
    '#required' => TRUE,
  );

  $form['default_settings']['advanced'] = array(
    '#type' => 'fieldset',
    '#title' => 'Advanced',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['default_settings']['advanced']['weather_use_provider_weather_icons'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use weather icons from provider'),
    '#prefix' => t("<p>The Weather block module provides icons for the weather conditions but you may also choose to use the weather icons from the provider. You can also override the icons provided by this module by manually setting a path for the weather icons on your web server. The module relies strongly on correct naming of the icon files so it is recommended that you copy over the files in this modules' <em>/weather_icons</em> folder and then replace the files with your own.</p><p><strong>Note that due to copyright terms, the selections below will not be applied when using the World Weather Online service; icons from the provider will be used instead!</strong></p>"),
    '#default_value' => variable_get('weather_use_provider_weather_icons', 1),
  );

  $form['default_settings']['advanced']['weather_icons_path'] = array(
    '#type' => 'textfield',
    '#title' => t("Local path for weather icons"),
    '#description' => t('The location of weather icons relative to your Drupal installation'),
    '#default_value' => variable_get('weather_icons_path'),
  );

  $weather_services = variable_get('weather_services');

  $form['provider_settings'] = array(
    '#type' => 'fieldset',
    '#title' => 'Provider-specific settings',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  foreach ($weather_services as $key => $val) {

    $form['provider_settings'][$key] = array(
      '#type' => 'fieldset',
      '#title' => t($val),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#description' => t('Info regarding ' . $val . ' weather search'),
    );

    if ($key == 'world_weather_online') {

      $form['provider_settings'][$key]['weather_key_' . $key] = array(
        '#type' => 'textfield',
        '#title' => t('Registration key'),
        '#default_value' => variable_get('weather_key_' . $key),
        '#description' => t('A registration key is required for using the World Weather Online service. Please follow the instructions at !val to obtain your key.', array('!val' => l(t('World Weather Online website'), 'http://www.worldweatheronline.com/register.aspx'))),
      );
    }

    if ($key == 'yahoo_weather') {

      $form['provider_settings'][$key]['weather_key_' . $key] = array(
        '#type' => 'textfield',
        '#title' => t('Application ID'),
        '#default_value' => variable_get('weather_key_' . $key),
        '#description' => t('The Application ID is required in order to use the Yahoo Weather service. You may obtain your key by registering and applying for it at the !val.', array('!val' => l(t('Yahoo website'), 'https://developer.apps.yahoo.com/dashboard/createKey.html'))),
      );
    }

    $form['provider_settings'][$key]['weather_display'] = array(
      '#type' => 'fieldset',
      '#title' => t('Display values'),
      '#description' => t('Choose which values you wish to display'),
    );

    $form['provider_settings'][$key]['weather_display']['weather_display_city_' . $key] = array(
      '#type' => 'checkbox',
      '#title' => t('City'),
      '#default_value' => variable_get('weather_display_city_' . $key, 1),
    );

    $form['provider_settings'][$key]['weather_display']['weather_display_temperature_' . $key] = array(
      '#type' => 'checkbox',
      '#title' => t('Temperature'),
      '#default_value' => variable_get('weather_display_temperature_' . $key, 1),
    );

    $form['provider_settings'][$key]['weather_display']['weather_display_humidity_' . $key] = array(
      '#type' => 'checkbox',
      '#title' => t('Humidity'),
      '#default_value' => variable_get('weather_display_humidity_' . $key, 1),
    );

    if ($key == 'weather_com') {

      $form['provider_settings'][$key]['weather_display']['weather_display_dev_point_' . $key] = array(
        '#type' => 'checkbox',
        '#title' => t('Dew point'),
        '#default_value' => variable_get('weather_display_dev_point_' . $key, 1),
      );
    }

    $form['provider_settings'][$key]['weather_display']['weather_display_wind_' . $key] = array(
      '#type' => 'checkbox',
      '#title' => t('Wind'),
      '#default_value' => variable_get('weather_display_wind_' . $key, 1),
    );

    $form['provider_settings'][$key]['weather_display']['weather_display_icon_' . $key] = array(
      '#type' => 'checkbox',
      '#title' => t('Weather icon'),
      '#default_value' => variable_get('weather_display_icon_' . $key, 1),
    );

    if ($key == 'weather_com') {
      $title = t('Link to 10 day forecast');
    }
    elseif ($key == 'yahoo_weather') {
      $title = t('Link to forecasts from other cities');
    }
    else {
      $title = t('Link to 5 day forecast');
    }

    $form['provider_settings'][$key]['weather_display']['weather_display_link_' . $key] = array(
      '#type' => 'checkbox',
      '#title' => $title,
      '#default_value' => variable_get('weather_display_link_' . $key, 1),
    );
  }

  return system_settings_form($form);
}

/**
 * Implements hook_block_save().
 */

/*
function weather_block_block_save($delta, $edit) {
  cache_clear_all();
}

*/

/**
 * Implements hook_block_info().
 */
function weather_block_block_info() {
  $blocks['weather_block'] = array(
    'info' => t('Weather block'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function weather_block_block_view($delta='') {
  $block = array();
  switch ($delta) {
    case 'weather_block':
      $block['subject'] = t('Weather block');

      $path = base_path() . drupal_get_path('module', 'weather_block');

      $location = weather_set_location();

      $service = variable_get('weather_service');

      $services = variable_get('weather_services');

      switch ($service) {
        case 'yahoo_weather':

          if (isset($_SESSION['weather_location']['id'])) {

            $weather = new Weather($_SESSION['weather_location']['id'], $service);
          }
          else {
            $weather =  new Weather($location->field_yahoo_weather['und'][0]['value'], $service);
          }
        break;
        case 'world_weather_online':

          if (isset($_SESSION['weather_location']['id'])) {
            $weather = new Weather($_SESSION['weather_location']['id'], $service);
          }
          else {
            $weather = new Weather($location->field_world_weather_online['und'][0]['value'], $service);
          }
        break;
        case 'weather_com':

          if(isset($_SESSION['weather_location']['id'])) {

            $weather = new Weather_com_weather($_SESSION['weather_location']['id']);

            $current = $weather->weather_com_current($_SESSION['weather_location']['id']);
          }
          else {
            $weather = new Weather_com_weather($location->field_world_weather_online['und'][0]['value'], $service);

            $current = $weather->weather_com_current($location->field_weather_com['und'][0]['value']);
          }
        break;
      }

      $block['content'] = '';

      foreach ($services as $key => $val) {

        if ($service == $key && variable_get('weather_display_city_' . $key, 1) == 1) {

          if(!empty($location)) {

             $block['content'] .= "<div class='weather_city_wrapper'><div class='weather_city'>" . t('City') . "</div><div class='weather_city_value'>" . check_plain($location->name) . "</div></div>";
          }
          else { 
            $block['content'] .= "<div class='weather_city_wrapper'><div class='weather_city'>" . t('City') . "</div><div class='weather_city_value'>" . check_plain($_SESSION['smart_ip']['location']['city']) . "</div></div>";
          }
        }

        if ($service == $key && variable_get('weather_display_icon_' . $key, 1) == 1) {

          $block['content'] .= "<div class='weather_icon'>";

          if ($service == 'yahoo_weather') {

            $block['content'] .= "<img title = '" . check_plain((string) $weather->condition->attributes()->text) . "' src='";

            if (variable_get('weather_use_provider_weather_icons') == 1) {
              $block['content'] .= "http://l.yimg.com/a/i/us/we/52/" . check_plain((string) $weather->condition->attributes()->code) . ".gif";
            }
            elseif (variable_get('weather_icons_path') != NULL) {

              if (drupal_substr(variable_get('weather_icons_path'), drupal_strlen(variable_get('weather_icons_path')) - 1) == "/") {
                $block['content'] .= variable_get('weather_icons_path') . check_plain((string) $weather->condition->attributes()->code) . '.png';
              }
              else {
                $block['content'] .= variable_get('weather_icons_path') . "/" . check_plain((string) $weather->condition->attributes()->code) . '.png';
              }
            }
            else {

              $block['content'] .= $path . '/weather-icons/' . check_plain((string) $weather->condition->attributes()->code) . '.png';
            }
          }
          elseif ($service == 'world_weather_online') {

            $block['content'] .= "<img src='";

            if (date('G') < 9 || date('G') > 21) {
              $block['content'] .= "http://c358489.r89.cf1.rackcdn.com/images/weather/small/" . check_plain($weather->xml->current_condition->weatherCode) . "_night_sm.png";
            }
            else {
              $block['content'] .= "http://c358489.r89.cf1.rackcdn.com/images/weather/small/" . check_plain($weather->xml->current_condition->weatherCode) . "_day_sm.png";
            }
          }
          else {

            $block['content'] .= "<img src='";

            if (variable_get('weather_use_provider_weather_icons') == 1) {

              $block['content'] .= $current['image'];
            }
            elseif (variable_get('weather_icons_path') != NULL) {

              if (drupal_substr(variable_get('weather_icons_path'), drupal_strlen(variable_get('weather_icons_path')) - 1) == "/") {
                $block['content'] .= variable_get('weather_icons_path') . check_plain($weather->todaysForecast()->icon) . '.png';
              }
              else {
                $block['content'] .= variable_get('weather_icons_path') . "/" . check_plain($weather->todaysForecast()->icon) . '.png';
              }
            }
            else {
              $block['content'] .= $path . '/weather-icons/' . check_plain($current['image']) . '.png';
            }
          }

          $block['content'] .= "'/><br/></div>";
        }

        if ($service == $key && variable_get('weather_display_wind_' . $key, 1) == 1) {

          if ($service == 'yahoo_weather') {

            if (strlen(check_plain($weather->general->wind->attributes()->direction)) == 2) {

               $wind = "0" . check_plain($weather->general->wind->attributes()->direction);
            }
            else {

               $wind = check_plain($weather->general->wind->attributes()->direction);
            }
  
            $block['content'] .= "<div class='weather_wind'><div class='weather_wind_direction'>" . t('Wind') . " <img src='";
            $block['content'] .= $path . "/weather-icons/wind/" . $wind . ".png'/></div><div class='wind_speed'>" . round(check_plain($weather->general->wind->attributes()->speed));
            $block['content'] .= " " . check_plain($weather->general->units->attributes()->speed) . "</div></div>";
          }
          elseif ($service == 'world_weather_online') {

            if (variable_get('weather_display_units', 0) == 0) {
              $wind = round((int) $weather->xml->current_condition->windspeedKmph * 1000 / 3600) . " m/s";
            }
            else {
              $wind = $weather->xml->current_condition->windspeedMiles . " mph";
            }

            if(strlen(check_plain((string) $weather->xml->current_condition->winddirDegree)) == 2) {

              $winddir = "0" . check_plain((string) $weather->xml->current_condition->winddirDegree);
            }
            else {

              $winddir = check_plain((string) $weather->xml->current_condition->winddirDegree);
            }

            $block['content'] .= "<div class='weather_wind'><div class='weather_wind_direction'>" . t('Wind') . " <img src='";
            $block['content'] .= $path . "/weather-icons/wind/" . $winddir . ".png'/></div><div class='wind_speed'>" . $wind . "</div></div>";
          }
          else {

            if (variable_get('weather_display_units', 0) == 1) {

               preg_match('/[0-9]+/', check_plain(trim($current['wind'])), $matches);

               $windspeed = implode($matches);

               $windspeed = round($windspeed / 1.609344, 0);

               $windspeed = preg_replace('/[0-9]+/', $windspeed, $current['wind']);

               $windspeed = str_replace('kmph', 'mph', $windspeed);
            }
            else {

              $windspeed = check_plain(trim($current['wind']));
            }
  
            $block['content'] .= "<div class='weather_wind'><div class='weather_wind_direction' style='float: none !important;'>" . t('Wind') . "</div><div class='wind_speed' style='float: none !important; width: 160px;'>" . $windspeed . "</div></div>";
          }
        }

        if ($service == $key && variable_get('weather_display_temperature_' . $key, 1) == 1) {
          $block['content'] .= "<div class='weather_temperature_wrapper'><div class='weather_temperature'>" . t('Temperature') . " </div><div class='weather_temperature_value'>";

          if ($service == 'yahoo_weather') {
            $block['content'] .= check_plain($weather->condition->attributes()->temp) . " &deg;" . check_plain($weather->general->units->attributes()->temperature);
          }
          elseif ($service == 'world_weather_online') {
            if (variable_get('weather_display_units', 0) == 0) {
              $block['content'] .= check_plain($weather->xml->current_condition->temp_C) . " &deg; C";
            }
            else {
              $block['content'] .= check_plain($weather->xml->current_condition->temp_F) . " &deg; F";
            }
          }
          else {
            if (variable_get('weather_display_units', 0) == 0) {
              $block['content'] .= check_plain($current['temp']) . " &deg; C";
            }
            else {

              $current['temp'] = $weather->celsiusToFahrenheit($current['temp']);
              $block['content'] .= check_plain($current['temp']) . " &deg; F";
            }
          }
          $block['content'] .= "</div></div>";
        }

        if ($service == $key && variable_get('weather_display_humidity_' . $key, 1) == 1) {
          if ($service == 'yahoo_weather') {
            $block['content'] .= "<div class='weather_humidity_wrapper'><div class='weather_humidity'>" . t('Humidity') . "</div><div class='weather_humidity_value'>" . check_plain($weather->general->atmosphere->attributes()->humidity) . "%" . "</div></div>";
          }
          elseif ($service == 'world_weather_online') {
            $block['content'] .= "<div class='weather_humidity_wrapper'><div class='weather_humidity'>" . t('Humidity') . "</div><div class='weather_humidity_value'>" . check_plain($weather->xml->current_condition->humidity) . "%" . "</div></div>";
          }
          else {
            $block['content'] .= "<div class='weather_humidity_wrapper'><div class='weather_humidity'>" . t('Humidity') . "</div><div class='weather_humidity_value'>" . check_plain($current['humidity']) . "%" . "</div></div>";
          }
        }

        if ($service == $key && variable_get('weather_display_dev_point_' . $key) == 1) {

          if (variable_get('weather_display_units', 0) == 0) {
            $current['dew_point'] = check_plain($current['dew_point']) . " &deg; C";
          }
          else {

            $current['dew_point'] = $weather->celsiusToFahrenheit(check_plain($current['dew_point'])) . " &deg; F";
          }

          $block['content'] .= "<div class='weather_dev_point_wrapper'><div class='weather_dev_point'>" . t('Dew Point') . "</div><div class='weather_dev_point_value'>" . $current['dew_point'] . "</div></div>";
        }

        if ($service == $key && variable_get('weather_display_link_' . $key, 1) == 1) {
          if ($key == 'yahoo_weather') {
            $block['content'] .= "<div class='weather_forecast_wrapper'>" . l(t('Other cities'), 'weather') . "</div>";
          }
          else if ($key == 'weather_com') {
            $block['content'] .= "<div class='weather_forecast_wrapper'>" . l(t('Ten day weather forecast'), 'weather') . "</div>";
          }
          else {
            $block['content'] .= "<div class='weather_forecast_wrapper'>" . l(t('Five day weather forecast'), 'weather') . "</div>";
          }
      }
    }
  }

  return $block;
}

/**
 * Implements hook_theme().
 */
function weather_block_theme($existing, $type, $theme, $path) {

  return array(
    'weather_block_local_weather' => array(
      'variables' => array(
        'content' => NULL,
        'menu' => NULL,
        'location' => NULL,
        'form' => NULL,
        'service' => NULL,
      ),
      'template' => 'weather_block',
      'path' => $path,
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function weather_block_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id == "taxonomy_form_term") {

    if ($form['#vocabulary']->machine_name == "weather_locations_foreign" || $form['#vocabulary']->machine_name == "weather_locations") {

      $form['#validate'][] = 'weather_block_validate';
    }
  }
}

function weather_block_validate(&$form, &$form_state) {

  if (isset($form_state['values'][1]['und'][0]['value'])) {

    $value = $form_state['values'][1]['und'][0]['value'];
  }
  else {
    $value = $form_state['values']['field_yahoo_weather']['und'][0]['value'];
  }

  if ($value != NULL) {

    $xml = simplexml_load_file("http://weather.yahooapis.com/forecastrss?w=" . $value);

    if ((string)$xml->channel->title == "Yahoo! Weather - Error") {

      form_set_error('weather block', t('The WOEID that you entered was invalid or no weather forecast is available for your selected WOEID. Please re-enter!'));
    }
  }

  if (isset($form_state['values'][2]['und'][0]['value'])) {

    $value = $form_state['values'][2]['und'][0]['value'];
  }
  else {
    $value = $form_state['values']['field_world_weather_online']['und'][0]['value'];
  }

  if ($value != NULL) {

    if(variable_get('weather_key_world_weather_online') == NULL) {

      global $base_url;

      drupal_set_message(t('The World Weather Online ID was entered without verification because you have not entered your registration key. To have them verified, please enter your registration key at !settings', array('!settings' =>l('settings page', $base_url . '/admin/config/weather_block'))));
    }
    else {

      $errcode = simplexml_load_file("http://free.worldweatheronline.com/feed/weather.ashx?q=" . $value . "&format=xml&num_of_days=5&key=" . variable_get('weather_key_world_weather_online'));

      if(isset($errcode->error->msg)) {
 
        if ($errcode->error->msg == "Unable to find any matching weather location to the query submitted!") {
 
          form_set_error('weather block', t('The World Weather Online ID that you entered was invalid or no weather forecast is available for your selected WOEID. Please try to change for example to add the country or choose a different location.'));
        }
      }
    }
  }
}

function weather_set_location() {

  unset($_SESSION['weather_location']['city']);
  unset($_SESSION['weather_location']['id']);
  unset($term);

  $term = '';

   if (isset($_SESSION['smart_ip']['location']['city']) && variable_get('weather_use_smart_ip') == 1) {

    $term = taxonomy_get_term_by_name($_SESSION['smart_ip']['location']['city']);

    if ($term == NULL) {

      $term = taxonomy_get_term_by_name($_SESSION['smart_ip']['location']['city'] . ", " . $_SESSION['smart_ip']['location']['country']);
    }

    if ($term == NULL) {

      if (variable_get('weather_service') == 'yahoo_weather') {

        $xml = simplexml_load_file("http://where.yahooapis.com/geocode?q=" . $_SESSION['smart_ip']['location']['city'] . "+" . $_SESSION['smart_ip']['location']['country'] . "&appid=" . variable_get('weather_key_yahoo_weather'));

        $xml2 = simplexml_load_file("http://weather.yahooapis.com/forecastrss?w=" . $xml->Result->woeid);

        if ((string)$xml2->channel->title == "Yahoo! Weather - Error") {

          $location = taxonomy_term_load(variable_get('weather_location'));
        }
        else {

          $_SESSION['weather_location']['city'] = $_SESSION['smart_ip']['location']['city'];
          $_SESSION['weather_location']['id'] = $xml->Result->woeid;
        }
      }
      if (variable_get('weather_service') == 'world_weather_online') {

        $errcode = simplexml_load_file("http://free.worldweatheronline.com/feed/weather.ashx?q=" . $_SESSION['smart_ip']['location']['city'] . ", " . $_SESSION['smart_ip']['location']['country'] . "&format=xml&num_of_days=5&key=" . variable_get('weather_key_world_weather_online'));

        if (isset($errcode->error->msg)) {

          $location = taxonomy_term_load(variable_get('weather_location'));
        }
        else {
          $_SESSION['weather_location']['city'] = $_SESSION['smart_ip']['location']['city'];
          $_SESSION['weather_location']['id'] = $_SESSION['smart_ip']['location']['city'] . ", " . $_SESSION['smart_ip']['location']['country'];
        }
      }
      if (variable_get('weather_service') == 'weather_com') {
        $_SESSION['weather_location']['city'] = $_SESSION['smart_ip']['location']['city'];
        $_SESSION['weather_location']['id'] = $_SESSION['smart_ip']['location']['city'] . ", " . $_SESSION['smart_ip']['location']['country'];
      }
    }

    if(empty($_SESSION['weather_location']['id']) && $term == null) {

      $location = taxonomy_term_load(variable_get('weather_location'));
    }

    else {

      if (count($term) != 0) {

        foreach($term as $key) {

          $location = $key;
        }
      }
    }
  }
  else {

    $location = taxonomy_term_load(variable_get('weather_location'));
  }

  if (isset($location)) {
    return $location;
  }
}
