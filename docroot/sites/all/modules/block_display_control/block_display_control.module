<?php

/**
 * @file
 *   Ii is used to manage the one more visibility setting as display control.
 * *
 * @author Devendra Yadav <dev.firoza@gmail.com>
 */

/**
 * Implements hook_permission().
 */
function block_display_control_permission() {
  return array(
      'administer block display control' => array(
          'title' => t('Administer block display control'),
      ),
  );
}

/**
 * Implements hook_help().
 */
function block_display_control_help($path, $arg) {
  $help = '';
  switch ($path) {
    case 'admin/help#block_display_control':
      $help = check_markup(file_get_contents(dirname(__FILE__) . "/README.txt"));
      break;
  }
  return $help;
}

/**
 * Implements hook_menu().
 */
function block_display_control_menu() {
  $items['admin/structure/block/display-control'] = array(
      'title' => 'Display Control',
      'page callback' => 'block_display_control_list',
      'access arguments' => array('administer block display control'),
      'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implements hook_form_FROM_ID_alter().
 */
function block_display_control_form_alter(&$form, &$form_state, $form_id) {
  if (user_access('administer block display control')) {
    $format = 'Y-m-d';
    $start_date = '';
    $end_date = '';
    $display_weight = 0;
    $is_banner = 0;
    if ($form_id == 'block_admin_configure') {
      // Query to fetch the display control elements value.
      $query = "SELECT display_control FROM {block} WHERE delta = :delta AND display_control <> '' ";
      $display_control_obj = db_query($query, array(':delta' => arg(5)))->fetchObject();
      if (is_object($display_control_obj)) {
        $display_control = unserialize($display_control_obj->display_control);
        $start_date = $display_control['start_date'];
        $start_date = date($format, $start_date);

        $end_date = $display_control['end_date'];
        if ($end_date > 0) {
          $end_date = date($format, $end_date);
        }
      }
    }

    switch ($form_id) {
      case 'block_add_block_form':
      case 'block_admin_configure':
        $form['settings']['#weight'] = -1;
        $form['visibility_title']['#weight'] = 9;
        $form['visibility']['#weight'] = 10;

        // An input element for create the fieldset for display control.
        $form['display_control'] = array(
            '#type' => 'fieldset',
            '#title' => t('Display Control'),
            '#collapsible' => TRUE,
            '#collapsed' => FALSE,
        );

        $date_desc = t('E.g., ' . date($format));
        if (module_exists('date_popup')) {
          $date_type = 'date_popup';
          $date_desc = '';

          // An input element for pick the start date.
          $form['display_control']['start_date'] = array(
            '#type' => 'date_popup',
            '#title' => t('Start Date'),
            '#date_format' => $format,
            '#default_value' => $start_date,
            '#date_label_position' => 'within',
            '#description' => check_plain($date_desc),
            '#required' => FALSE,
          );
          // An input element for pick the end date.
          $form['display_control']['end_date'] = array(
            '#type' => 'date_popup',
            '#title' => t('End Date'),
            '#date_format' => $format,
            '#default_value' => $end_date,
            '#date_label_position' => 'within',
            '#description' => check_plain($date_desc),
            '#required' => FALSE,
          );
        }
        else {
          // An input element for pick the start date.
          $form['display_control']['start_date'] = array(
            '#type' => 'textfield',
            '#title' => t('Start Date'),
            '#default_value' => $start_date,
            '#description' => check_plain($date_desc),
            '#required' => FALSE,
            '#maxlength' => 10,
            '#size' => 20,
          );
          // An input element for pick the end date.
          $form['display_control']['end_date'] = array(
            '#type' => 'textfield',
            '#title' => t('End Date'),
            '#default_value' => $end_date,
            '#description' => check_plain($date_desc),
            '#required' => FALSE,
            '#maxlength' => 10,
            '#size' => 20,
          );
        }

        $form['#validate'][] = 'block_display_control_visibility_form_validate';
        $form['#submit'][] = 'block_display_control_visibility_form_submit';
    }
  }
}

/**
 * Validate handler to validate the dates.
 */
function block_display_control_visibility_form_validate($form, &$form_state) {
  $start_date = $form_state['values']['start_date'];
  $end_date = $form_state['values']['end_date'];

  if (!module_exists('date_popup')) {
    if (!preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/", $start_date)) {
      form_set_error('start_date', t('Sorry! Stat date format is not valid.'));
    }

    if (!empty($end_date)) {
      if (!preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/", $end_date)) {
        form_set_error('end_date', t('Sorry! End date format is not valid.'));
      }
    }
  }

  $start_date_ts = isset($start_date) && !empty($start_date) ? strtotime($start_date . ' 00:00:00') : 0;
  $end_date_ts = isset($end_date) && !empty($end_date) ? strtotime($end_date . ' 23:59:59') : 0;

  if ($end_date != '' && $start_date == '') {
    form_set_error('display_sdate', t('Display control start date can not be left empty.'));
  }

  if (($end_date_ts > 0) && ($start_date_ts > $end_date_ts)) {
    form_set_error('display_sdate', t('Display control end date should be greator than Start Date.'));
  }
}

/**
 * Submit handler to set the display control values.
 */
function block_display_control_visibility_form_submit($form, &$form_state) {
  if ($form_state['values']['form_id'] == 'block_admin_configure' || $form_state['values']['form_id'] == 'block_add_block_form') {
    $start_date = $form_state['values']['start_date'];
    $start_date = isset($start_date) && !empty($start_date) ? strtotime($start_date . ' 00:00:00') : 0;

    $end_date = $form_state['values']['end_date'];
    $end_date = isset($end_date) && !empty($end_date) ? strtotime($end_date . ' 23:59:59') : 0;

    if ($start_date > 0) {
      $display_control = array(
          'start_date' => $start_date,
          'end_date' => $end_date,
      );

      db_update('block')->fields(array('display_control' => serialize($display_control)))->condition('module', $form_state['values']['module'])->condition('delta', $form_state['values']['delta'])->execute();
      // Flush all context module cache to use the updated duration.
      if (module_exists('context')) {
        cache_clear_all('context', 'cache', TRUE);
      }
    }
  }
}

/**
 * Implements hook_list_alter().
 */
function block_display_control_block_list_alter(&$blocks) {
  $current_time = REQUEST_TIME;

  foreach ($blocks as $key => $data) {
    $start_date = 0;
    $end_date = 0;
    $display_edate = 0;
    $module = $data->module;
    $delta = $data->delta;
    $display_control = $data->display_control;
    if ($display_control != '') {
      $display_control = unserialize($display_control);
      $start_date = $display_control['start_date'];
      $end_date = $display_control['end_date'];
    }

    if ($start_date > 0 && $end_date > 0) {
      if (!(($current_time >= $start_date) && ($end_date >= $start_date) && ($current_time <= $end_date))) {
        unset($blocks[$key]);
      }
    }
    elseif ($start_date > 0 && $display_edate == 0) {
      if ($start_date < $current_time) {
        unset($blocks[$key]);
      }
    }

    if (($end_date > 0) && ($end_date < $current_time)) {
      db_update('block')->fields(array('region' => '-1'))->condition('module', $module)->condition('delta', $delta)->execute();
    }
  }
}

/**
 * List all the block which have display control start date.
 */
function block_display_control_list() {
  $query = db_select('block', 'block')->orderBy('block.theme', 'ASC');
  $query->leftJoin('block_custom', 'custom', 'block.delta = custom.bid');
  $query->fields('block', array('delta', 'title', 'region', 'theme', 'module', 'display_control'));
  $query->fields('custom', array('info'));
  $query->condition('block.display_control', '', '<>');

  // list of all currently available themes.
  $themes = list_themes($refresh = TRUE);
  $result = $query->execute();

  // Get the count value form result set.
  $row_count = $result->rowCount();
  // An array to indicates the cell' is a's header.
  $header = array(
      array('data' => t('Block Name'), 'width' => '30%'),
      array('data' => t('Display from'), 'width' => '20%'),
      array('data' => t('Display to'), 'width' => '20%'),
      array('data' => t('Theme name'), 'width' => '10%'),
      array('data' => t('Region'), 'width' => '10%'),
      array('data' => t('Action'), 'width' => '10%'),
  );

  // Initialize an empty array.
  $rows = array();
  if ($row_count) {
    // This is used to set the alternate color on extracted rows.
    $counter = 0;

    $date_format = 'dS M, Y';
    // Iterate over each element in our $form['custom_block'] array.
    foreach ($result as $data) {
      $block_title = empty($data->info) ? $data->title : $data->info;
      $module = $data->module;
      $delta = $data->delta;
      $theme = $data->theme;
      $region = $data->region;
      $region_name = isset($themes[$theme]->info['regions'][$region]) ? $themes[$theme]->info['regions'][$region] : '-None-';
      $display_control = unserialize($data->display_control);

      $start_date = date($date_format, $display_control['start_date']);
      $end_date = ($display_control['end_date'] > 0) ? date($date_format, $display_control['end_date']) : '&#8734;';
      // Prepare the action link.
      $op_link = 'admin/structure/block/manage/' . $module . '/' . $delta;

      $rows[$module . $delta . $region] = array($block_title,
          $start_date,
          $end_date,
          ucfirst($themes[$theme]->info['name']),
          $region_name,
          l(t('Edit block'), $op_link, array('query' => array('destination' => 'admin/structure/block/banner'))),
      );
    }
  }

  return theme('table', array(
      'header' => $header,
      'rows' => $rows,
      // Optional to indicate whether the table headers should be sticky
      'sticky' => TRUE,
      // Optional empty text for the table if resultset is empty
      'empty' => t('No block is set as Display Control'),
          )
  );
}
