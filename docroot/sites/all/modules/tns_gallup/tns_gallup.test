<?php

/**
 * @file
 * Test file for TNS Gallup module.
 */

/**
 * Common functionality for testing TNS Gallup module.
 */
abstract class TnsGallupWebTestCase extends DrupalWebTestCase {

  protected $mockedScript = FALSE;

  /**
   * Implements DrupalWebTestCase::setup().
   */
  public function setUp($module = NULL) {
    parent::setUp($module);

    // If the spring.js library is not installed we install an (empty) mock.
    $tns_gallup_spring = libraries_get_path('tns_gallup_spring');
    if (!$tns_gallup_spring || !file_exists($tns_gallup_spring . '/spring.js')) {
      @mkdir('sites/all/libraries/tns_gallup_spring', 0777, TRUE);
      touch('sites/all/libraries/tns_gallup_spring/spring.js');
      $this->mockedScript = TRUE;
    }
  }

  /**
   * Helper function for testing disabling and uninstalling module.
   */
  protected function tearDown() {
    module_disable(array('tns_gallup'));

    $vars = db_select('variable')
      ->fields('variable', array('name'))
      ->condition('name', array('tns_gallup_supported_languages'))
      ->execute()
      ->fetchCol();

    $missing = '';
    if (!empty($vars)) {
      $missing = ' (missing: ' . implode(', ', $vars) . ')';
    }
    $this->assertTrue(empty($vars), 'All relevant variables removed on module disable' . $missing . '.');

    drupal_uninstall_modules(array('tns_gallup'));

    $vars = db_select('variable')
      ->fields('variable', array('name'))
      ->condition('name', 'tns_gallup%', 'LIKE')
      ->execute()
      ->fetchCol();

    $missing = '';
    if (!empty($vars)) {
      $missing = ' (missing: ' . implode(', ', $vars) . ')';
    }
    $this->assertTrue(empty($vars), 'All remaining variables removed on module uninstall' . $missing . '.');

    // Check the test didn't generate errors in watchdog.
    $num_errors = $this->getNumWatchdogEntries(WATCHDOG_ERROR);
    $expected_errors = isset($this->expected_errors) ? $this->expected_errors : 0;
    $this->assertTrue($num_errors == $expected_errors, 'Expected ' . $expected_errors . ' watchdog errors and got ' . $num_errors . '.');

    // If we mocked the script we need to remove it again.
    if ($this->mockedScript) {
      unlink('sites/all/libraries/tns_gallup_spring/spring.js');
      @rmdir('sites/all/libraries/tns_gallup_spring');
    }

    parent::tearDown();
  }

  /**
   * Get the number of watchdog entries for a given severity or worse.
   *
   * @param int $severity
   *   (optional) Severity codes are listed at
   *   https://api.drupal.org/api/drupal/includes%21bootstrap.inc/group/logging_severity_levels/7
   *   Lower numbers are worse severity messages, for example an emergency is 0,
   *   and an error is 3.
   *   Specify a threshold here, for example for the default WATCHDOG_ERROR,
   *   this function will return the number of watchdog entries which are 0, 1,
   *   2, or 3. Defaults to WATCHDOG_ERROR.
   *
   * @return int
   *   The number of watchdog errors logged during this test.
   *
   * @see http://dcycleproject.org/blog/96/catching-watchdog-errors-your-simpletests
   */
  protected function getNumWatchdogEntries($severity = WATCHDOG_ERROR) {
    $results = db_select('watchdog')
             ->fields(NULL, array('wid'))
             ->condition('severity', $severity, '<=')
             ->execute()
             ->fetchAll();
    return count($results);
  }

}

/**
 * Test basic functionality of TNS Gallup module.
 */
class TnsGallupBasicTest extends TnsGallupWebTestCase {

  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => t('TNS Gallup basic tests'),
      'description' => t('Test basic functionality of TNS Gallup module.'),
      'group' => 'TNS Gallup',
    );
  }

  /**
   * Implements DrupalWebTestCase::setup().
   */
  public function setUp($module = NULL) {
    parent::setUp('tns_gallup');

    $permissions = array(
      'access administration pages',
      'administer tns gallup',
    );

    // User to set up TNS Gallup.
    $this->admin_user = $this->drupalCreateUser($permissions);
    $this->drupalLogin($this->admin_user);
  }

  /**
   * Check presence of the settings page.
   */
  public function testTnsGallupConfiguration() {
    // Check for setting page's presence.
    $this->drupalGet('admin/config/system/tns-gallup');
    $this->assertRaw(t('Site ID'), '[testTnsGallupConfiguration]: Settings page displayed.');
  }

  /**
   * Check that the TNS Gallup script is included.
   */
  public function testTnsGallupPageVisibility() {
    $site_id = 'testid';
    variable_set('tns_gallup_site_id', $site_id);

    // Show site on "every page except the listed pages".
    variable_set('tns_gallup_visibility', 0);
    // Disable site one "admin*" pages only.
    variable_set('tns_gallup_pages', "admin\nadmin/*");
    // Enable site only for authenticated users only.
    variable_set('tns_gallup_roles', array(DRUPAL_AUTHENTICATED_RID => DRUPAL_AUTHENTICATED_RID));

    // Check site code visibility.
    $this->drupalGet('');
    $this->assertRaw($site_id, '[testTnsGallupPageVisibility]: Include script for authenticated users.');

    // Test whether site code is not included on pages to omit.
    $this->drupalGet('admin');
    $this->assertNoRaw($site_id, '[testTnsGallupPageVisibility]: Don\'t display script on admin page.');
    $this->drupalGet('admin/config/system/tns-gallup');
    // Checking for site code URI here, because the form displays the $site_id.
    $this->assertNoRaw('.tns-gallup.dk/j0=,,,;+,cp=', '[testTnsGallupPageVisibility]: Don\'t display site on admin subpage.');

    // Test whether site code display is properly flipped.
    variable_set('tns_gallup_visibility', 1);
    $this->drupalGet('admin');
    $this->assertRaw($site_id, '[testTnsGallupPageVisibility]: Display site code on admin page.');
    $this->drupalGet('admin/config/system/tns-gallup');
    // Checking for site code URI here, because the form displays
    // the $site_id.
    $this->assertRaw('.tns-gallup.dk/j0=,,,;+,cp=', '[testTnsGallupPageVisibility]: Display site code on admin subpage.');
    $this->drupalGet('');
    $this->assertNoRaw($site_id, '[testTnsGallupPageVisibility]: Don\'t display site on front page.');

    // Test whether site code is not display for anonymous.
    $this->drupalLogout();
    $this->drupalGet('');
    $this->assertNoRaw($site_id, '[testTnsGallupPageVisibility]: Don\'t display site for anonymous users.');
  }

  /**
   * Check whether it is possible to inject code via the site ID.
   */
  public function testTnsGallupXssTest() {
    $site_id = "testid');alert('XSS');//";
    variable_set('tns_gallup_site_id', $site_id);

    // Check site code visibility.
    $this->drupalGet('');
    $this->assertNoRaw("alert('XSS')", '[testTnsGallupXss]: Site ID is XSS protected.');
  }

}

/**
 * Test roles functionality of TNS Gallup module.
 */
class TnsGallupRolesTest extends TnsGallupWebTestCase {

  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => t('TNS Gallup role tests'),
      'description' => t('Test roles functionality of TNS Gallup module.'),
      'group' => 'TNS Gallup',
    );
  }

  /**
   * Implements DrupalWebTestCase::setup().
   */
  public function setUp($module = NULL) {
    parent::setUp('tns_gallup');

    $permissions = array(
      'access administration pages',
      'administer tns gallup',
    );

    // User to set up TNS Gallup.
    $this->admin_user = $this->drupalCreateUser($permissions);
  }

  /**
   * Test how the site displays for different roles.
   */
  public function testTnsGallupRolesSite() {
    $site_id = 'testid';
    variable_set('tns_gallup_site_id', $site_id);

    // Test if the default settings are working as expected.
    // Enable site for all users.
    variable_set('tns_gallup_roles', array());

    // Check site code visibility.
    $this->drupalGet('');
    $this->assertRaw($site_id, '[testTnsGallupRoleVisibility]: Display site for anonymous users on frontpage with default settings.');
    $this->drupalGet('admin');
    $this->assertRaw($site_id, '[testTnsGallupRoleVisibility]: Display site for anonymous users in admin section with default settings.');

    $this->drupalLogin($this->admin_user);

    $this->drupalGet('');
    $this->assertRaw($site_id, '[testTnsGallupRoleVisibility]: Display site for authenticated users on frontpage with default settings.');
    $this->drupalGet('admin');
    $this->assertRaw($site_id, '[testTnsGallupRoleVisibility]: Display site for authenticated users in admin section with default settings.');

    // Test if the non-default settings are working as expected.
    // Enable site only for authenticated users.
    variable_set('tns_gallup_roles', array(DRUPAL_AUTHENTICATED_RID => DRUPAL_AUTHENTICATED_RID));

    $this->drupalGet('');
    $this->assertRaw($site_id, '[testTnsGallupRoleVisibility]: Display site for authenticated users on frontpage.');

    $this->drupalLogout();
    $this->drupalGet('');
    $this->assertNoRaw($site_id, '[testTnsGallupRoleVisibility]: Don\'t display site for anonymous users on frontpage.');
  }

}
