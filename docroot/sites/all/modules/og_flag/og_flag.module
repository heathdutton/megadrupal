<?php
/**
 * @file
 * OG Flag module file.
 */

define('OG_FLAG_CONTEXT_ENTITY', 'og_flag_context_entity');
/**
 * URL Pattern used by the flag module AJAX callbacks.
 */
define('OG_FLAG_FLAG_AJAX_OP_PATTERN', "flag/flag/*/*\nflag/unflag/*/*\n");
define('OG_FLAG_FLAG_CONFIRM_OP_PATTERN', "flag/confirm/flag/*/*\nflag/confirm/unflag/*/*");
/**
 * URL Pattern to determine if we are viewing a single node.
 */
define('OG_FLAG_NODE_CONTEXT_PATTERN', "node/*\ngroup/node/*");
define('OG_FLAG_USER_CONTEXT_PATTERN', 'user/*');
define('OG_FLAG_GROUP_ADMIN_CONTEXT_PATTERN', 'group/node/*/admin/og-flag/*/edit');
define('OG_FLAG_FLAG_NODE_TYPE', 'OgFlagNode');
define('OG_FLAG_FLAG_USER_TYPE', 'OgFlagUser');
define('OG_FLAG_FLAG_COMMENT_TYPE', 'OgFlagComment');

// Load hook implementations.
require_once 'hook_implementations/core.inc';
require_once 'hook_implementations/og.inc';
require_once 'hook_implementations/flag.inc';

/**
 * Saves the flag overrides to the database.
 *
 * @param object $flag
 *   The flag object with overrides to be saved.
 */
function og_flag_save($flag) {
  if ($flag->isOverridden) {
    og_flag_update($flag);
  }
  else {
    og_flag_insert($flag);
  }

  drupal_set_message(t('Flag @flag_name successfully updated.', array('@flag_name' => $flag->name)));
}

/**
 * Saves a new flag override to the database.
 *
 * @param object $flag
 *   The overridden flag to save.
 */
function og_flag_insert($flag) {
  db_insert('og_flag')
    ->fields(array(
      'gid' => $flag->gid,
      'fid' => $flag->fid,
      'content_type' => $flag->content_type,
      'name' => $flag->name,
      'title' => $flag->title,
      'global' => $flag->global,
      'options' => $flag->get_serialized_options(),
    ))
    ->execute();
}

/**
 * Updated an existing flag override to the database.
 *
 * @param object $flag
 *   The overridden flag to save.
 */
function og_flag_update($flag) {
  db_update('og_flag')->fields(array(
    'name' => $flag->name,
    'title' => $flag->title,
    'global' => $flag->global,
    'options' => $flag->get_serialized_options()))
    ->condition('gid', $flag->ogContext['gid'])
    ->condition('fid', $flag->fid)
    ->execute();
}

/**
 * Determines if the flag has been overridden for the specified group.
 *
 * @param int $fid
 *   The flag id.
 *
 * @param int $gid
 *   The group id.
 *
 * @return bool
 *   TRUE if the flag is overridden.  FALSE if the flag has not been overridden.
 */
function og_flag_is_flag_overridden($fid, $gid) {
  $result = &drupal_static(__FUNCTION__ . "$fid:$gid");

  if (!isset($result)) {
    $result = db_select('og_flag', 'f')
      ->fields('f')
      ->condition('gid', $gid, '=')
      ->condition('fid', $fid, '=')
      ->execute()
      ->rowCount();
  }

  return $result > 0;
}

/**
 * Applies any group specific overrides to a flag object if needed.
 *
 * This method adds the following properties to the $flags object:
 *   - og_context : array : The OG Context for the flag.
 *   - isOverridden : bool : Indicates if the flag is overridden.
 *
 * @param array $og_context
 *   The OG Context array for the content being flagged.
 *
 * @param object $flag
 *   The flag object being processed.
 */
function og_flag_apply_overrides($og_context, $flag) {
  $flag->isOverridden = FALSE;
  $flag->overridesApplied = FALSE;
  $flag->ogContext = FALSE;

  if ($og_context && isset($og_context['gid'])) {
    $gid = $og_context['gid'];
    $flag->ogContext = $og_context;
    $flag->isOverridden = og_flag_is_flag_overridden($flag->fid, $gid);

    if ($flag->isOverridden) {
      $overrides = og_flag_load_overrides($gid, $flag);
      if (!empty($overrides) && !empty($overrides['options'])) {
        $options = unserialize($overrides['options']);
        foreach ($options as $key => $value) {
          $flag->$key = $value;
        }
        $flag->overridesApplied = TRUE;
      }
    }
  }
}

/**
 * Loads the overrides for a flag from the DB.
 *
 * @param int $gid
 *   The group id containing the overrides.
 *
 * @param object $flag
 *   The flag that has been overridden.
 *
 * @return array
 *   An associative array of the flag overrides.
 */
function og_flag_load_overrides($gid, $flag) {
  $result = db_select('og_flag', 'f')
    ->fields('f')
    ->condition('gid', $gid, '=')
    ->condition('fid', $flag->fid, '=')
    ->execute()
    ->fetchAssoc();

  return $result;
}

/**
 * Generates the OG context based on a piece of content.
 *
 * @param object $flag
 *   The flag being operated on.
 *
 * @param int $entity_id
 *   The ID of the content being flagged/unflagged.
 *
 * @return null|array
 *   Either an OG Context array or NULL if the content is not part of a group.
 */
function og_flag_create_context_from_entity_id($flag, $entity_id) {
  $og_context = FALSE;

  $entity_type = $flag->content_type;
  $entity = entity_load($entity_type, array($entity_id));
  if (!empty($entity) && isset($entity[$entity_id])) {
    $og_context = og_flag_create_context_from_entity($entity[$entity_id], $entity_type);
  }

  return $og_context;
}

/**
 * Gets the OG Context for the current request.
 *
 * @param object $flag
 *   The flag being processes.
 *
 * @param int $entity_id
 *   The ID of the content that the flag is operating on.
 *
 * @return array|null
 *   The OG Context Array or NULL if the context cannot be determined.
 */
function og_flag_get_og_context($flag, $entity_id) {
  $cache = &drupal_static(__FUNCTION__, array());

  if (!$entity_id || !isset($cache[$entity_id])) {
    // See if we're operating on a node URL or some other system path.
    $is_node_context = drupal_match_path($_GET['q'], OG_FLAG_NODE_CONTEXT_PATTERN);

    // First see if the OG module can give us our context, only if we're on a node path.
    $og_context = FALSE;
    if ($is_node_context) {
      $og_context = og_context();
    }

    if (!$og_context) {
      if (!isset($entity_id)) {
        // If we don't have an entity_id yet, see if we can get one from the URL.
        $entity_id = og_flag_get_entity_id_from_url();
      }

      if ($entity_id) {
        // We have an entity ID, see if it has a populated group reference
        // and use that to build the context.
        $og_context = og_flag_create_context_from_entity_id($flag, $entity_id);
      }
    }
    $cache[$entity_id] = $og_context;
  }

  return $cache[$entity_id];
}

/**
 * Attempts to extract an entity id from the URL.
 *
 * @return bool|int
 *   The entity id for the current request or FALSE if an ID cannot be found.
 */
function og_flag_get_entity_id_from_url() {
  $entity_id = FALSE;
  $url_arg = FALSE;

  $path = $_GET['q'];
  if (drupal_match_path($path, OG_FLAG_NODE_CONTEXT_PATTERN)) {
    $url_arg = arg(1);
  }
  elseif (drupal_match_path($path, OG_FLAG_USER_CONTEXT_PATTERN)) {
    $url_arg = arg(1);
  }
  elseif (drupal_match_path($path, OG_FLAG_FLAG_AJAX_OP_PATTERN)) {
    $url_arg = arg(3);
  }
  elseif (drupal_match_path($path, OG_FLAG_FLAG_CONFIRM_OP_PATTERN)) {
    $url_arg = arg(4);
  }
  elseif (drupal_match_path($path, OG_FLAG_GROUP_ADMIN_CONTEXT_PATTERN)) {
    $url_arg = arg(2);
  }

  if (is_numeric($url_arg) && (int) $url_arg > 0) {
    $entity_id = (int) $url_arg;
  }

  return $entity_id;
}

/**
 * Generates an OG Context array based on a loaded entity object.
 *
 * @param object $entity
 *   The entity being processed.
 *
 * @param string $entity_type
 *   The type of entity.
 *
 * @return array|bool
 *   An OG Context array or FALSE if a context cannot be determined.
 */
function og_flag_create_context_from_entity($entity, $entity_type = 'node') {
  $og_context = FALSE;

  if ($entity && isset($entity->og_group_ref)) {
    if (!$entity_type && isset($entity->content)) {
      $entity_type = $entity->content['#entity_type'];
    }
    $gid = $entity->og_group_ref[LANGUAGE_NONE][0]['target_id'];
    $og_context = array('group_type' => $entity_type, 'gid' => $gid);
  }
  elseif ($entity && $entity_type == 'node' && $entity->type == 'group') {
    $gid = $entity->nid;
    $og_context = array('group_type' => $entity_type, 'gid' => $gid);
  }

  return $og_context;
}

/**
 * Determines if the specified group context has custom role permissions.
 *
 * @param array $og_context
 *   The OG context array for the request.
 *
 * @return bool
 *   TRUE if the group has custom permissions, otherwise FALSE.
 */
function og_flag_group_permissions_override_enabled($og_context) {
  $cache = &drupal_static(__FUNCTION__, array());

  $gid = $og_context['gid'];
  if (!isset($cache[$gid])) {
    $group = entity_load_single($og_context['group_type'], $gid);
    $group_wrapper = entity_metadata_wrapper($og_context['group_type'], $group);
    $cache[$gid] = $group_wrapper->og_roles_permissions->value();
  }

  return $cache[$gid];
}

/**
 * Checks the OG permissions to see if the user can use the flag.
 *
 * @param object $flag
 *   The flag being processed.
 *
 * @param bool $access
 *   Result of the core flag module access check.
 *
 * @param string $action
 *   The flag operation being performed.
 *
 * @param object $account
 *   The user account to check permissions on.
 *
 * @return bool
 *   TRUE if the user can use the flag, FALSE if they cannot use it.
 */
function og_flag_user_access_check($flag, $access, $action, $account) {
  if ($access && $flag->overridesApplied) {
    $og_context = $flag->ogContext;
    $group_permissions_override = og_flag_group_permissions_override_enabled($og_context);

    // Only perform the og_user_access check if the group is overriding permissions.
    if ($group_permissions_override) {
      $permission = "$action $flag->name";
      $access = og_user_access($og_context['group_type'], $og_context['gid'], $permission, $account);
    }
  }

  return $access;
}
