<?php
/**
 * @file Integrates Drupal with the vCita visitor relationship manager.
 */

/**
 * Implements hook_permission().
 */
function vcita_permission() {
  return array(
    'administer vcita' => array(
      'title' => t('Administer settings for vCita module'),
      'description' => t('Permission to change settings for vCita integration'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function vcita_menu() {
  $items['admin/config/services/vcita'] = array(
    'title' => 'vCita Account Settings',
    'description' => 'Configure the settings for the integration with vCita',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vcita_admin_settings_form'),
    'access arguments' => array('administer vcita'),
    'file' => 'vcita.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['vcita_callback'] = array(
    'title' => 'Account Linked',
    'description' => 'Your vCita account was successfully linked to this Drupal install',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vcita_callback'),
    'access arguments' => array('administer vcita'),
    'file' => 'vcita.admin.inc',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_help().
 *
 * View help page with README.txt file content.
 *
 * @see hook_help()
 */
function vcita_help($path, $arg) {
  switch ($path) {
    case "admin/help#vcita":
      return check_markup(file_get_contents(dirname(__FILE__) . "/README.txt"));
  }
}

/**
 * Implements hook_page_alter().
 *
 * @global object $user
 *    User object for current logged in user.
 */
function vcita_page_alter(&$page) {
  global $user;
  $id = check_plain(variable_get('vcita_account', ''));
  $nodetype = '';
  $node = menu_get_object();
  if (!empty($node)) {
    $nodetype = $node->type;
  }
  if (!(empty($id)) && _vcita_page_visible($nodetype) && _vcita_user_visible($user)) {
    // Load js for vcita.
    $vcita_js = 'var vcProtocol = document.location.protocol == "https:" ? "https:" : "http:";';
    $vcita_js .= 'document.write(unescape("%3Cscript src=\'" + vcProtocol + "//www.vcita.com/widgets/active_engage/' . $id . '/loader.js\' async=\'true\' type=\'text/javascript\'%3E%3C/script%3E"));';
    $page['content']['#attached']['js'] = array($vcita_js => array('type' => 'inline', 'scope' => 'footer'));
  }
}

/**
 * Utility function to determine whether to show the vcita widget.
 *
 * @param string $nodetype
 *   Machine readable representation of node type.
 *
 * @return bool
 *   True, if page is not on exclusion list or if it is on the whitelist.
 */
function _vcita_page_visible($nodetype) {
  $visible = variable_get('vcita_visible', 0);
  // If there are exclusions based on path, try to match.
  // Convert path to lowercase. This allows comparison of the same path
  // with different case. Ex: /Page, /page, /PAGE.
  $pages = drupal_strtolower(variable_get('vcita_pages', ''));
  // Convert the Drupal path to lowercase.
  $path = drupal_strtolower(drupal_get_path_alias($_GET['q']));
  // Compare the lowercase internal and lowercase path alias (if any).
  $page_match = drupal_match_path($path, $pages);
  if ($path != $_GET['q']) {
    $page_match = $page_match || drupal_match_path($_GET['q'], $pages);
  }
  // Inverse pattern based on vcita_visible being set to 0 vs 1.
  $page_match = !($visible xor $page_match);
  $nodes_to_match = variable_get('vcita_node_types', array());
  $node_match = TRUE;
  if (!(empty($nodes_to_match)) && (!empty($nodetype)) &&
    ($nodes_to_match[$nodetype] !== $nodetype)) {
    $node_match = FALSE;
  }
  return ($page_match && $node_match);
}

/**
 * Utility function to determine whether to show the vcita widget.
 *
 * @param object $account
 *   User object to check.
 *
 * @return bool
 *   True if user should be shown the widget.
 */
function _vcita_user_visible($account) {
  $vcita_roles = array_filter(variable_get('vcita_roles', array()));
  $intersect = array_intersect_key($account->roles, $vcita_roles);
  return !empty($intersect) || empty($vcita_roles);
}
