<?php

/**
 * @file
 * Test suite for UUID module.
 */

/**
 * Tests for the UUID rebuilding.
 */
class UUIDRebuildTestCase extends UUIDTestCase {

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => 'UUID rebuild',
      'description' => 'Tests the UUID rebuilding.',
      'group' => 'UUID',
    );
  }

  /**
   * Helper function that asserts that a database table column exists.
   *
   * @todo
   *   There are something weird around this assertion.
   */
  function assertTableColumn($table, $column, $message) {
    $this->assertTrue(db_field_exists($table, $column), $message);
  }

  /**
   * Tests rebuilding UUIDs for entities.
   */
  function testRebuild() {
    // this test starts the same as Sync but adds additional tests
    // after we assert that the initial case of granting UUIDs was successful
    // These entities will not have UUID from the start, since the UUID module
    // isn't installed yet.
    $user = $this->drupalCreateUser();
    $node = $this->drupalCreateNode();

    $this->assertTrue(!isset($node->uuid), "Node has no UUID before installation of UUID module.");
    $this->assertTrue(!isset($node->vuuid), "Node has no revision UUID before installation of UUID module.");
    $this->assertTrue(!isset($user->uuid), "User has no UUID before installation of UUID module.");

    // Now enable the UUID module.
    module_enable(array('uuid'), TRUE);
    drupal_flush_all_caches();
    drupal_static_reset();

    // Check that the UUID column was generated for {node}.
    $this->assertTableColumn('node', 'uuid', 'UUID column was generated for the node table.');
    $this->assertTableColumn('node_revision', 'vuuid', 'Revision UUID column was generated for the node_revision table.');
    $this->assertTableColumn('users', 'uuid', 'UUID column was generated for the user table.');

    // Login with a user and click the sync button.
    $web_user = $this->drupalCreateUser(array('administer uuid'));
    $this->drupalLogin($web_user);
    $this->drupalPost('admin/config/system/uuid', array(), t('Create missing UUIDs'));

    // Test if UUID was generated for nodes.
    $node_test = node_load($node->nid, FALSE, TRUE);
    $this->assertUUID($node_test->uuid, 'Node UUID was generated when clicking the sync button.');
    $this->assertUUID($node_test->vuuid, 'Node revision UUID was generated when clicking the sync button.');

    // Test if UUID was generated for users.
    $user_test = user_load($user->uid, TRUE);
    $this->assertUUID($user_test->uuid, 'User UUID was generated when clicking the sync button.');

    // now we rebuild
    // Login with a user and click the rebuild button.
    $web_user = $this->drupalCreateUser(array('administer uuid'));
    $this->drupalLogin($web_user);
    $this->drupalPost('admin/config/system/uuid', array(), t('Rebuild all UUIDs'));

     // Test if UUID was rebuilt for nodes.
    $node_compare = node_load($node->nid, FALSE, TRUE);
    $this->assertNotEqual($node_test->uuid, $node_compare->uuid, 'Node UUID was correct rebuilt.');
    $this->assertNotEqual($node_test->vuuid, $node_compare->vuuid, 'Node revision UUID correct rebuilt.');

    // Test if UUID was rebuilt for users.
    $user_compare = user_load($user->uid, TRUE);
    $this->assertUUID($user_test->uuid, 'User UUID was generated when clicking the sync button.');
    $this->assertNotEqual($user_test->uuid, $user_compare->uuid, 'User UUID correctly rebuilt.');
  }
}
