<?php

/**
 * @file
 * Primary hooks for Debug bar module.
 */

/**
 * Implements hook_init().
 */
function debug_bar_init() {

  if (!empty($_GET['debug-bar-flush-cache']) && drupal_valid_token($_GET['token'], 'debug-bar-flush-cache')) {
    drupal_flush_all_caches();
    drupal_set_message(t('Every cache cleared.'));
    drupal_goto(current_path());
  }

  if (!empty($_GET['debug-bar-run-cron']) && drupal_valid_token($_GET['token'], 'debug-bar-run-cron')) {
    if (drupal_cron_run()) {
      drupal_set_message(t('Cron ran successfully.'));
    }
    else {
      drupal_set_message(t('Cron run failed.'), 'error');
    }
    drupal_goto(current_path());
  }

}

/**
 * Implements hook_menu().
 */
function debug_bar_menu() {

  $items['admin/config/development/debug_bar'] = array(
    'title' => 'Debug bar',
    'description' => 'Configure Debug bar.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('debug_bar_settings_form'),
    'access arguments' => array('administer debug bar'),
    'file' => 'debug_bar.admin.inc',
  );

  return $items;

}

/**
 * Implements hook_permission().
 */
function debug_bar_permission() {
  return array(
    'administer debug bar' => array(
      'title' => t('Administer debug bar'),
      'restrict access' => TRUE,
    ),
    'view debug bar' => array(
      'title' => t('View debug bar'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_page_build().
 */
function debug_bar_page_build(&$page) {

  if (user_access('view debug bar')) {
    $debug_bar_path = drupal_get_path('module', 'debug_bar');

    // Debug information should be fetched as late as possible.
    $page['page_bottom']['debug_bar_debug']['#post_render'] = array('debug_bar_debug_post_render');
    $page['page_bottom']['debug_bar_debug']['#attached']['css'][] = $debug_bar_path . '/css/debug-bar.css';
    $page['page_bottom']['debug_bar_debug']['#attached']['library'][] = array('system', 'ui.draggable');
    $page['page_bottom']['debug_bar_debug']['#attached']['js'][] = $debug_bar_path . '/js/debug_bar.js';
  }

}

/**
 * Provide some debug information about the page.
 */
function debug_bar_debug_post_render($children, $elements) {

  $links = module_invoke_all('debug_bar_links');
  $position = variable_get('debug_bar_position', 'bottom_right');

  // Add close button.
  $links['debug-bar-link-hide'] = array(
    'title' => '',
    'href' => '<front>',
    'weight' => strpos($position, 'left') ? -1000 : 1000,
  );

  drupal_alter('debug_bar_links', $links);
  uasort($links, 'drupal_sort_weight');

  $appearance = variable_get('debug_bar_appearance', 'both');
  foreach ($links as $id => $link) {

    if ($appearance == 'icons') {
      $link['title'] = '';
    }

    // Prepend icon.
    if ($appearance != 'text' && isset($link['icon_path'])) {
      $icon = theme(
        'image',
        array(
          'path' => $link['icon_path'],
          'attributes' => array('class' => 'debug-bar-link-icon'),
        )
      );
      $links[$id]['title'] = $icon . $link['title'];
    }
    $links[$id]['html'] = TRUE;
    $links[$id]['attributes']['class'][] = 'debug-bar-link';

    // Check whether the current user has access to the path.
    if (isset($link['href']) && !drupal_valid_path($link['href'])) {
      unset($links[$id]);
    }
  }

  if (variable_get('debug_bar_float')) {
    $classes[] = 'debug-bar-float';
  }
  else {
    $classes[] = 'debug-bar-' . drupal_clean_css_identifier($position);
  }

  if (!empty($_COOKIE['debug_bar_hidden'])) {
    $classes[] = 'debug-bar-hidden';
  }

  $bar = array(
    '#type' => 'container',
    '#attributes' => array('id' => 'debug-bar-wrapper'),
    'links' => array(
      '#theme' => 'links',
      '#links' => $links,
      '#attributes' => array('id' => 'debug-bar', 'class' => $classes),
    ),
  );

  return drupal_render($bar);
}

/**
 * Implements hook_debug_bar_links().
 */
function debug_bar_debug_bar_links() {

  $images_path = base_path() . drupal_get_path('module', 'debug_bar') . '/images';

  $links['debug_bar_link_home'] = array(
    'title' => t('Home'),
    'href' => '<front>',
    'icon_path' => $images_path . '/home.png',
    'attributes' => array('title' => t('Front page')),
    'weight' => 10,
  );

  $links['debug_bar_link_status_report'] = array(
    'title' => VERSION,
    'href' => 'admin/reports/status',
    'icon_path' => $images_path . '/druplicon.png',
    'attributes' => array('title' => t('View status report')),
    'weight' => 20,
  );

  $links['debug_bar_link_execution_time'] = array(
    'title' => round(timer_read('page'), 1) . ' ms',
    'icon_path' => $images_path . '/time.png',
    'attributes' => array('title' => t('Execution time')),
    'weight' => 30,
  );

  $links['debug_bar_link_memory_usage'] = array(
    'title' => round(memory_get_peak_usage(TRUE) / 1024 / 1024, 2) . ' MB',
    'icon_path' => $images_path . '/memory.png',
    'attributes' => array('title' => t('Peak memory usage')),
    'weight' => 40,
  );

  $links['debug_bar_link_watchdog'] = array(
    'title' => t('Log'),
    'href' => 'admin/reports/dblog',
    'icon_path' => $images_path . '/log.png',
    'attributes' => array('title' => t('Recent log messages')),
    'weight' => 50,
  );

  list($php_version,) = explode('-', PHP_VERSION);
  $links['debug_bar_link_php'] = array(
    'title' => $php_version,
    'href' => 'admin/reports/status/php',
    'icon_path' => $images_path . '/php.png',
    'attributes' => array('title' => t("View information about PHP's configuration")),
    'weight' => 60,
  );

  if ($git_branch = debug_bar_get_git_branch()) {
    $links['debug_bar_link_git'] = array(
      'title' => $git_branch,
      'icon_path' => $images_path . '/git.png',
      'attributes' => array('title' => t('Current branch')),
      'weight' => 80,
    );
  }

  $cron_last = variable_get('cron_last');
  if (!is_numeric($cron_last)) {
    $cron_last = variable_get('install_time', 0);
  }
  $links['debug_bar_link_cron'] = array(
    'title' => t('Run cron'),
    'href' => current_path(),
    'icon_path' => $images_path . '/cron.png',
    'attributes' => array(
      'title' => t(
        'Last run !time ago',
        array('!time' => format_interval(REQUEST_TIME - $cron_last))
      ),
    ),
    'query' => array(
      'debug-bar-run-cron' => '1',
      'token' => drupal_get_token('debug-bar-run-cron'),
    ),
    'weight' => 70,
  );

  if (user_is_anonymous()) {
    $links['debug_bar_link_login'] = array(
      'title' => t('Log in'),
      'href' => 'user',
      'icon_path' => $images_path . '/login.png',
      'attributes' => array('title' => t('Log in')),
      'weight' => 90,
    );
  }
  else {
    $links['debug_bar_link_cache'] = array(
      'title' => t('Cache'),
      'href' => current_path(),
      'icon_path' => $images_path . '/cache.png',
      'attributes' => array('title' => t('Clear all caches')),
      'query' => array(
        'debug-bar-flush-cache' => '1',
        'token' => drupal_get_token('debug-bar-flush-cache'),
      ),
      'weight' => 100,
    );
    $links['debug_bar_link_user'] = array(
      'title' => check_plain($GLOBALS['user']->name),
      'href' => 'user',
      'icon_path' => $images_path . '/user.png',
      'attributes' => array('title' => t('View profile')),
      'weight' => 110,
    );
    $links['debug_bar_link_logout'] = array(
      'title' => t('Log out'),
      'href' => 'user/logout',
      'icon_path' => $images_path . '/logout.png',
      'attributes' => array('title' => t('Log out')),
      'weight' => 120,
    );
  }

  return $links;
}

/**
 * Extract the branch we currently have checked out.
 */
function debug_bar_get_git_branch() {
  $file = '.git/HEAD';
  if (is_readable($file) && $data = file_get_contents($file)) {
    $data = explode('/', $data);

    return end($data);
  }
}
