<?php

/**
 * @file
 * Module's hooks implementations and helper functions.
 */

/**
 * Indicates that the cookie must live 365 days more.
 */
define('STYLESWITCHER_COOKIE_EXPIRE', 31536000);

/**
 * Implements hook_block_info().
 */
function styleswitcher_block_info() {
  $blocks['styleswitcher'] = array(
    'info' => t('Style Switcher'),
    // We cannot cache globally, because we use drupal_get_destination() with
    // links in block, which is different from page to page. And we cannot avoid
    // using destination, because in this case site users with JS-disabled
    // browsers won't go back to the same page they were at, but will go to the
    // front page each time. We also cannot rely on $_SERVER['HTTP_REFERER'],
    // because it can be empty.
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function styleswitcher_block_view($delta) {
  global $theme;

  switch ($delta) {
    // List of styles a user can switch between.
    case 'styleswitcher':
      $styles = styleswitcher_style_load_multiple($theme, array('status' => TRUE));

      // Do not display block if there is only one style (no alternatives).
      if (count($styles) > 1) {
        uasort($styles, 'styleswitcher_sort');
        $links = array();
        $destination = drupal_get_destination();

        foreach ($styles as $name => $style) {
          $name_hyphenated = strtr($name, '_', '-');
          $name_parts = explode('/', $name_hyphenated);
          $class = array(
            'style-switcher',
            $name_parts[0] . '-style',
            'style-' . $name_parts[1],
          );

          $links[] = l($style['label'], 'styleswitcher/switch/' . $theme . '/' . $name_hyphenated, array(
            'attributes' => array(
              'class' => $class,
              'data-rel' => $name,
              'rel' => 'nofollow',
            ),
            'query' => $destination,
          ));

          // Make paths absolute for JS.
          if (isset($style['path'])) {
            $styles[$name]['path'] = file_create_url($style['path']);
          }
          else {
            $styles[$name]['path'] = url('styleswitcher/css/' . $theme, array('absolute' => TRUE));
          }
        }

        $path_to_module = drupal_get_path('module', 'styleswitcher');
        $js_settings = array(
          'styleSwitcher' => array(
            'styles' => $styles,
            'default' => styleswitcher_default_style_key($theme),
            'enableOverlay' => variable_get('styleswitcher_enable_overlay', 1),
            'cookieExpire' => STYLESWITCHER_COOKIE_EXPIRE,
            'theme' => $theme,
          ),
        );

        $attached['library'][] = array('system', 'jquery.cookie');
        $attached['css'][] = $path_to_module . '/styleswitcher.overlay.css';
        $attached['js'][] = $path_to_module . '/styleswitcher.js';
        $attached['js'][] = array(
          'type' => 'setting',
          'data' => $js_settings,
        );

        $block['subject'] = t('Style Switcher');
        $block['content'] = array(
          '#theme' => 'item_list',
          '#items' => $links,
          '#attached' => $attached,
        );
        return $block;
      }
      break;
  }
}

/**
 * Prepares variables for html templates: Adds the dynamic CSS to every page.
 *
 * Default template: html.tpl.php.
 *
 * @param array $variables
 *   An associative array with html variables. Not used in this preprocessor.
 */
function styleswitcher_preprocess_html(array &$variables) {
  global $theme;

  // Construct absolute URL explicitly to work out disabled clean URLs.
  $url = url('styleswitcher/css/' . $theme, array('absolute' => TRUE));

  // Use drupal_add_css() instead of drupal_add_html_head_link() because we need
  // our alternative stylesheets to overwrite the most other css on the page and
  // in standard html.tpl.php $styles go after $head.
  drupal_add_css($url, array(
    'basename' => 'styleswitcher.active.css',
    // Use the latest standard group to be after the most of other css. Some
    // themes (like Omega) use even latter groups to set their grid layouts
    // hoping they wouldn't be overridden.
    'group' => CSS_THEME,
    'weight' => PHP_INT_MAX,
    // Set 'media' to module name to quickly find this link among other elements
    // in styleswitcher_pre_render_styles().
    'media' => 'styleswitcher',
    // Don't aggregate or compress the dynamic CSS.
    'preprocess' => FALSE,
  ));
}

/**
 * Implements hook_permission().
 */
function styleswitcher_permission() {
  return array(
    'administer styleswitcher' => array(
      'title' => t('Administer Style Switcher'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function styleswitcher_menu() {
  $items['admin/config/user-interface/styleswitcher'] = array(
    'title' => 'Styleswitcher',
    'description' => 'Configure Styleswitcher module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('styleswitcher_admin'),
    'access arguments' => array('administer styleswitcher'),
    'file' => 'styleswitcher.admin.inc',
  );
  $items['admin/config/user-interface/styleswitcher/global'] = array(
    'title' => 'Global settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
  );

  foreach (list_themes() as $theme) {
    $items['admin/config/user-interface/styleswitcher/settings/' . $theme->name] = array(
      'title' => $theme->info['name'],
      'description' => 'Configure theme-specific styles settings.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('styleswitcher_config_theme', 5),
      'access callback' => '_styleswitcher_config_theme_access',
      'access arguments' => array($theme),
      'type' => MENU_LOCAL_TASK,
      'file' => 'styleswitcher.admin.inc',
    );
  }

  $items['admin/config/user-interface/styleswitcher/add'] = array(
    'title' => 'Add style',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('styleswitcher_style_form'),
    'access arguments' => array('administer styleswitcher'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'styleswitcher.admin.inc',
  );
  $items['admin/config/user-interface/styleswitcher/custom/%styleswitcher_style'] = array(
    'title' => 'Edit',
    'title callback' => 'styleswitcher_style_title',
    'title arguments' => array(5),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('styleswitcher_style_form', 5),
    'load arguments' => array('', 'custom'),
    'access arguments' => array('administer styleswitcher'),
    'file' => 'styleswitcher.admin.inc',
  );
  $items['admin/config/user-interface/styleswitcher/custom/%styleswitcher_style/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/config/user-interface/styleswitcher/custom/%styleswitcher_style/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('styleswitcher_style_delete_form', 5),
    'load arguments' => array('', 'custom'),
    'access arguments' => array('administer styleswitcher'),
    'file' => 'styleswitcher.admin.inc',
  );

  // The theme argument must be set for next routes to know what the page user
  // came from and what theme was used there.
  $items['styleswitcher/switch/%/%/%styleswitcher_style'] = array(
    'title' => 'Styleswitcher',
    'page callback' => 'styleswitcher_switch',
    'page arguments' => array(4),
    'load arguments' => array(2, 3),
    'access callback' => 'drupal_theme_access',
    'access arguments' => array(2),
    'type' => MENU_CALLBACK,
  );
  $items['styleswitcher/css/%'] = array(
    'title' => 'Styleswitcher',
    'page callback' => 'styleswitcher_css',
    'page arguments' => array(2),
    'access callback' => 'drupal_theme_access',
    'access arguments' => array(2),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Access callback: Allows only admin and only for enabled themes.
 *
 * @param string|object $theme
 *   Either the name of a theme or a full theme object.
 *
 * @see styleswitcher_menu()
 */
function _styleswitcher_config_theme_access($theme) {
  return user_access('administer styleswitcher') && drupal_theme_access($theme);
}

/**
 * Implements hook_element_info_alter().
 */
function styleswitcher_element_info_alter(&$types) {
  $types['styles']['#pre_render'][] = 'styleswitcher_pre_render_styles';
}

/**
 * Render API callback: Adds HTML id for Styleswitcher style link.
 *
 * Searches for the styleswitcher link HTML element to add an id to it.
 *
 * This function is assigned as a #pre_render callback in
 * styleswitcher_element_info_alter().
 */
function styleswitcher_pre_render_styles(array $elements) {
  // There must be at least one element in array because the dynamic CSS is
  // always added to the page's styles. Walk in reverse order because the needed
  // <link> is closer to end of array.
  $element = end($elements);

  do {
    if (!empty($element['#attributes']['media']) && $element['#attributes']['media'] == 'styleswitcher') {
      // Set 'media' back to its default value.
      $element['#attributes']['media'] = 'all';
      // Add an ID.
      $element['#attributes']['id'] = 'styleswitcher-css';

      $elements[key($elements)] = $element;
      break;
    }
  } while ($element = prev($elements));

  return $elements;
}

/**
 * Page callback: Switches style when JS is disabled.
 *
 * @param array $style
 *   New active style. The structure of an array is the same as returned from
 *   styleswitcher_style_load().
 *
 * @see styleswitcher_style_load()
 * @see styleswitcher_menu()
 */
function styleswitcher_switch(array $style) {
  if ($style['status']) {
    styleswitcher_save_user_preference($style['theme'], $style['name']);
  }

  drupal_goto();
}

/**
 * Page callback: Redirects to CSS file of currently active style.
 *
 * @param string $theme
 *   Name of the theme to find the active style for.
 *
 * @see styleswitcher_menu()
 */
function styleswitcher_css($theme) {
  // Prevent resource incorrect interpretation.
  drupal_add_http_header('Content-Type', 'text/css');

  $path = styleswitcher_active_style_path($theme);

  if (isset($path)) {
    drupal_goto(file_create_url($path));
  }
}

/**
 * Loads a style array by its machine name and a theme name.
 *
 * @param string $name
 *   Machine name of the style to load.
 * @param string $theme
 *   Machine name of the theme to get the style for.
 * @param string $type
 *   (optional) Style type: 'theme' or 'custom'. If the type is specified then
 *   it will be prefixed with a slash to the $name argument.
 *
 * @return array|false
 *   Style array on success or FALSE otherwise. Style is an associative array
 *   containing:
 *   - name: Machine name.
 *   - label: Human-readable label.
 *   - path: System or external path to the CSS file.
 *   - weight: Weight of style link in the switch list.
 *   - status: Indicates whether the style is enabled or not.
 *   - is_default: Indicates that this style is the default one. This element
 *     may not always show the truth. It is recommended to use
 *     styleswitcher_default_style_key() to get the default style key.
 *   - _i: Index number of the style. It is used for sorting of styles with
 *     equal weights.
 *   - theme: Name of the theme the style is loaded for.
 *
 * @see styleswitcher_default_style_key()
 */
function styleswitcher_style_load($name, $theme, $type = '') {
  if ($type) {
    $name = $type . '/' . $name;
    // The next conversion is only rationale for auto-loader wildcards in paths
    // and there are $type arguments always set in menu items so if this
    // function is called with only one argument this conversion is redundant.
    $name = strtr($name, '-', '_');
  }

  $styles = styleswitcher_style_load_multiple($theme, array('name' => $name));
  return reset($styles);
}

/**
 * Returns style's label.
 *
 * This function is assigned as a title callback in styleswitcher_menu().
 *
 * @param array $style
 *   Style array as returned from styleswitcher_style_load().
 *
 * @return string
 *   Label of the style.
 *
 * @see styleswitcher_style_load()
 */
function styleswitcher_style_title(array $style) {
  return $style['label'];
}

/**
 * Returns a list of styles.
 *
 * @param string $theme
 *   Name of the theme to get styles for.
 * @param array $filter
 *   Style properties to filter by. Each key is a property name, and value is
 *   a corresponding filter value.
 *
 * @return array
 *   Array of styles - all or just filtered by conditions from the $filter
 *   argument. Keys are machine names and each element is a corresponding style
 *   array, which structure is the same as returned from
 *   styleswitcher_style_load().
 *
 * @see styleswitcher_style_load()
 */
function styleswitcher_style_load_multiple($theme, array $filter = array()) {
  $styles = &drupal_static(__FUNCTION__, array());

  if (!isset($styles[$theme])) {
    $theme_styles = styleswitcher_custom_styles() + styleswitcher_theme_styles($theme);
    $settings = styleswitcher_styles_settings($theme);

    foreach (array_keys($theme_styles) as $i => $key) {
      if (isset($settings[$key])) {
        $theme_styles[$key] += $settings[$key];
      }

      // Default settings.
      $theme_styles[$key] += array(
        'is_default' => FALSE,
        'status' => TRUE,
        'weight' => 0,
        '_i' => $i,
        'theme' => $theme,
      );
    }

    $styles[$theme] = $theme_styles;
  }

  if (empty($filter)) {
    return $styles[$theme];
  }

  $return = array();

  foreach ($styles[$theme] as $key => $style) {
    // Check the requested conditions.
    foreach ($filter as $property => $value) {
      if ($style[$property] != $value) {
        continue 2;
      }
    }

    $return[$key] = $style;
  }

  return $return;
}

/**
 * Returns a list of styles with theme-specific settings.
 *
 * @param string $theme
 *   Name of the theme to get styles settings for.
 *
 * @return array
 *   Array which keys are styles machine names and each element is a
 *   corresponding array with settings: weight, status and is_default. All
 *   settings are optional. See styleswitcher_style_load() for their
 *   descriptions.
 *
 * @see styleswitcher_style_load()
 */
function styleswitcher_styles_settings($theme) {
  $settings = variable_get('styleswitcher_styles_settings', array());

  if (empty($settings[$theme])) {
    $settings[$theme] = array();

    styleswitcher_theme_styles($theme);
    // Disable the blank style if theme has its own default one.
    if (styleswitcher_theme_default_style_key($theme)) {
      $settings[$theme]['custom/default']['status'] = FALSE;
    }
  }

  return $settings[$theme];
}

/**
 * Returns a list of custom styles.
 *
 * @return array
 *   Array which keys are styles machine names and each element is a
 *   corresponding array with properties: name, label and path. All properties
 *   are mandatory. See styleswitcher_style_load() for their descriptions.
 *
 * @see styleswitcher_style_load()
 */
function styleswitcher_custom_styles() {
  $defaults['custom/default'] = array(
    'name' => 'custom/default',
    'label' => 'Default',
    'path' => NULL,
  );

  return variable_get('styleswitcher_custom_styles', $defaults);
}

/**
 * Returns a list of styles provided by a theme.
 *
 * @param string $theme
 *   Name of the theme to retrieve styles of.
 * @param string|null $original_theme
 *   (optional) Name of the theme which the function was originally called with.
 *   While iterating over base themes the $theme argument changes but
 *   $original_theme keeps the same value.
 *
 * @return array
 *   Array of styles. Keys are machine names and each element is a corresponding
 *   array of style properties: name, label and path. All properties are
 *   mandatory. See styleswitcher_style_load() for their descriptions.
 *
 * @see styleswitcher_style_load()
 */
function styleswitcher_theme_styles($theme, $original_theme = NULL) {
  $styles = array();

  // Theme can be an empty string if custom style is loading.
  if (!$theme) {
    return $styles;
  }

  $theme_path = drupal_get_path('theme', $theme);
  // Do not use system_get_info() because it skips disabled base themes.
  $themes = list_themes();
  $theme_info = $themes[$theme]->info;

  if (!isset($original_theme)) {
    $original_theme = $theme;
  }

  // Search base themes for styleswitcher info.
  if (isset($theme_info['base theme'])) {
    $styles = styleswitcher_theme_styles($theme_info['base theme'], $original_theme);
  }

  if (!empty($theme_info['styleswitcher'])) {
    $info = $theme_info['styleswitcher'];

    // Array of alternatives.
    if (!empty($info['css'])) {
      foreach ($info['css'] as $label => $path) {
        $name = 'theme/' . _styleswitcher_style_name($label);
        $styles[$name] = array(
          'name' => $name,
          'label' => $label,
          'path' => $theme_path . '/' . $path,
        );
      }
    }

    // Default style.
    if (isset($info['default'])) {
      $default = $info['default'];
    }
    elseif (isset($info['css']['default'])) {
      $default = $info['css']['default'];
      unset($styles['theme/default']);
    }

    if (isset($default)) {
      $default_in_existing = FALSE;

      // Check if Default points to one of existing alternatives.
      foreach ($styles as $name => $style) {
        if ($default == $style['label'] || $theme_path . '/' . $default == $style['path']) {
          styleswitcher_theme_default_style_key($original_theme, $name);
          $default_in_existing = TRUE;
          break;
        }
      }

      // Default is a path not mentioned in css array.
      if (!$default_in_existing) {
        $defaults['theme/default'] = array(
          'name' => 'theme/default',
          'label' => 'Default',
          'path' => $theme_path . '/' . $default,
        );
        // Place default style above others.
        $styles = $defaults + $styles;
        styleswitcher_theme_default_style_key($original_theme, 'theme/default');
      }
    }
  }

  return $styles;
}

/**
 * Transliterates a human-readable name to a machine name.
 *
 * @param string $display_name
 *   Style label.
 *
 * @return string
 *   Transliterated name.
 *
 * @see Drupal.behaviors.machineName.transliterate()
 * @see drupal_clean_css_identifier()
 * @see drupal_html_id()
 */
function _styleswitcher_style_name($display_name) {
  $name = drupal_strtolower($display_name);
  $name = strtr($name, array(' ' => '_', '-' => '_'));
  $name = preg_replace('/[^a-z0-9_]/', '', $name);

  return $name;
}

/**
 * Saves/returns the key of default style provided by a theme.
 *
 * When theme's .info file is scanned for styles to switch this function is
 * called with argument to statically save a style key for further use. And
 * after, when this function is called it returns the key saved earlier.
 *
 * @param string $theme
 *   Name of the theme which default style is being saved/requested.
 * @param string|null $key
 *   The key of theme's default style.
 *
 * @return string|null
 *   The key of theme's default style.
 */
function styleswitcher_theme_default_style_key($theme, $key = NULL) {
  $default_key = &drupal_static(__FUNCTION__, array());

  if (isset($key)) {
    $default_key[$theme] = $key;
  }

  return isset($default_key[$theme]) ? $default_key[$theme] : NULL;
}

/**
 * Finds the default style and returns its key.
 *
 * @param string $theme
 *   Name of the theme to find the default style for.
 *
 * @return string
 *   The key of the default style.
 */
function styleswitcher_default_style_key($theme) {
  $default_key = &drupal_static(__FUNCTION__, array());

  // Search the default style explicitly set by admin.
  if (!isset($default_key[$theme])) {
    $styles = styleswitcher_style_load_multiple($theme, array('is_default' => TRUE));
    $default_key[$theme] = key($styles);
  }

  // Plan B. If default style is not set in styles configuration form by admin
  // then find out initial default style defined by theme.
  if (!isset($default_key[$theme])) {
    styleswitcher_theme_styles($theme);
    $default_key[$theme] = styleswitcher_theme_default_style_key($theme);
  }

  // Fallback to the blank style.
  if (!isset($default_key[$theme])) {
    $styles = styleswitcher_style_load_multiple($theme, array('path' => NULL));
    $default_key[$theme] = key($styles);
  }

  return $default_key[$theme];
}

/**
 * Finds the style active for current user and returns its path.
 *
 * This function is called at every page request before styleswitcher_switch()
 * or JS' Drupal.styleSwitcher.switchStyle() so we can update old user cookies
 * here once and not bother about it in other places.
 *
 * @param string $theme
 *   Name of the theme to find the active style for.
 *
 * @return string|null
 *   The path property of active style. It can be NULL if active style is the
 *   blank one.
 *
 * @see styleswitcher_switch()
 * @see Drupal.styleSwitcher.switchStyle()
 */
function styleswitcher_active_style_path($theme) {
  if (isset($_COOKIE['styleswitcher'])) {
    $cookie = $_COOKIE['styleswitcher'];

    if (!is_array($cookie)) {
      // This style with its settings belongs to the theme which was default
      // before styleswitcher_update_7206().
      $style_theme = variable_get('styleswitcher_7206_theme_default');

      if (strpos($cookie, '/')) {
        $name = $cookie;
      }
      // Check non-prefixed names too. Try theme's styles before custom because
      // it is more likely that theme's style names remained the same, and
      // custom ones took their places later.
      elseif (($style = styleswitcher_style_load($cookie, $style_theme, 'theme')) || ($style = styleswitcher_style_load($cookie, $style_theme, 'custom'))) {
        $name = $style['name'];
      }

      // Remove this old cookie.
      setcookie('styleswitcher', '', 0, base_path());
      $cookie = array();

      if (isset($name)) {
        // And save the new one.
        styleswitcher_save_user_preference($style_theme, $name);
        $cookie[$style_theme] = $name;
      }
    }

    if (isset($cookie[$theme])) {
      $active = styleswitcher_style_load($cookie[$theme], $theme);
    }
  }
  // Check for cookie with old name, which contained style label. Check only
  // theme's styles because cookie name was changed when styles were still only
  // in theme .info.
  elseif (isset($_COOKIE['styleSwitcher'])) {
    $name = 'theme/' . _styleswitcher_style_name($_COOKIE['styleSwitcher']);

    // Remove this old cookie.
    setcookie('styleSwitcher', '', 0, base_path());

    // We actually do not know what theme was used (it was a global $theme) when
    // user switched to this style. So let us just set this style as active for
    // every theme which has a style with this name.
    foreach (array_keys(list_themes()) as $style_theme) {
      if ($style = styleswitcher_style_load($name, $style_theme)) {
        styleswitcher_save_user_preference($style_theme, $name);

        if ($theme == $style_theme) {
          $active = $style;
        }
      }
    }
  }

  if (empty($active)) {
    $active = styleswitcher_style_load(styleswitcher_default_style_key($theme), $theme);
  }

  return $active['path'];
}

/**
 * Implements hook_theme().
 */
function styleswitcher_theme() {
  return array(
    'styleswitcher_admin_styles_table' => array(
      'render element' => 'form',
      'file' => 'styleswitcher.admin.inc',
    ),
    'styleswitcher_admin_style_overview' => array(
      'variables' => array('style' => NULL),
      'file' => 'styleswitcher.admin.inc',
    ),
  );
}

/**
 * Sorts styles by weight and index.
 *
 * This function first compares style weights, and then - if weights are equal -
 * style index numbers.
 *
 * The compared items (function parameters) should be associative arrays that
 * include a 'weight' and an '_i' elements.
 *
 * Callback for uasort() within styleswitcher_block_view() and
 * styleswitcher_admin().
 *
 * @see styleswitcher_admin()
 * @see styleswitcher_block_view()
 */
function styleswitcher_sort(array $a, array $b) {
  $property = $a['weight'] != $b['weight'] ? 'weight' : '_i';
  return $a[$property] - $b[$property];
}

/**
 * Saves the style key to the cookie.
 *
 * @param string $theme_key
 *   Name of the theme to save the style for.
 * @param string $style_key
 *   Style key to save.
 */
function styleswitcher_save_user_preference($theme_key, $style_key) {
  setcookie('styleswitcher[' . $theme_key . ']', $style_key, REQUEST_TIME + STYLESWITCHER_COOKIE_EXPIRE, base_path());
}
