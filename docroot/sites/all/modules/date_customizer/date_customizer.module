<?php
/**
 * @file
 * Date customizer module.
 */

/**
 * Implements hook_help().
 */
function date_customizer_help($path, $arg) {
  switch ($path) {
    case 'admin/help#date_customizer':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Date customizer module allows user to customize the date field by adding hyphen or comma as a separator in between two dates or multiple dates, also it hides duplicate date parts.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_theme().
 */
function date_customizer_theme() {
  return array(
    'date_customizer' => array(
      'variables' => array(
        'item' => NULL,
        'from_to' => 'both',
        'first_date' => NULL,
        'second_date' => NULL,
        'format1' => NULL,
        'format2' => NULL,
        'separator' => NULL,
        'hide_same_values' => array(),
        'attributes' => array(),
      ),
    ),
    'date_customizer_all' => array(
      'variables' => array(
        'items' => NULL,
        'from_to' => 'both',
        'dates' => NULL,
        'format1' => NULL,
        'format2' => NULL,
        'separator' => NULL,
        'separator_multi' => NULL,
        'hide_same_values' => array(),
        'attributes' => array(),
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function date_customizer_field_formatter_info() {
  return array(
    'date_customizer_formatter' => array(
      'label' => t('Date customizer'),
      'field types' => array('date', 'datestamp', 'datetime'),
      'settings' => array(
        'from_to' => 'both',
        'format1' => '',
        'format2' => '',
        'separator' => ' - ',
        'separator_multi' => ', ',
        'hide_same_values' => array(),
      ),
    ),
  );
}

/**
 * Theme date customizer.
 */
function theme_date_customizer($variables) {
  $hide_same_values = array_filter($variables['hide_same_values']);

  $limit_parts = array();
  if (!empty($hide_same_values)) {
    $first_date_parts = getdate(strtotime($variables['first_date']['db']['datetime']));
    $second_date_parts = getdate(strtotime($variables['second_date']['db']['datetime']));
    foreach ($hide_same_values as $part) {
      if (isset($first_date_parts[$part]) == isset($second_date_parts[$part])) {
        $limit_parts[] = $part;
      }
      else {
        break;
      }
    }
  }

  $first_date = $variables['first_date']['db']['object'];
  $second_date = $variables['second_date']['db']['object'];

  if ($variables['from_to'] != 'both' || $first_date == $second_date || empty($limit_parts)) {
    switch ($variables['from_to']) {
      case 'both':
        return format_string('@first_date@separator@second_date', array(
          '@first_date' => $variables['first_date']['formatted'],
          '@separator' => t('!separator', array('!separator' => $variables['separator']), array('context' => 'date_customizer')),
          '@second_date' => $variables['second_date']['formatted'],
        ));

      case 'value':
        return $variables['first_date']['formatted'];

      case 'value2':
        return $variables['second_date']['formatted'];
    }
  }

  $format_type = $variables['format1'];
  $format = variable_get('date_format_' . $format_type, '');

  return format_string('@first_date@separator@second_date', array(
    '@first_date' => date_format_date($first_date, 'custom', date_limit_format($format, date_nongranularity($limit_parts))),
    '@separator' => $variables['separator'],
    '@second_date' => $variables['second_date']['formatted'],
  ));
}

/**
 * Theme date customizer all.
 */
function theme_date_customizer_all($variables) {
  $dates_parts = array();
  $dates_objects = array();

  // Process all dates, remember last date.
  foreach ($variables['dates'] as $date) {
    $dates_parts[] = getdate(strtotime($date['value']['db']['datetime']));
    $dates_objects[] = $date['value']['db']['object'];
    $last_date_formatted = $date['value']['formatted'];
  }
  $first_date_parts = array_shift($dates_parts);
  $hide_same_values = array_filter($variables['hide_same_values']);

  // Hide date parts if it is the same for all dates.
  $limit_parts = array();
  if (!empty($hide_same_values)) {
    foreach ($hide_same_values as $part) {
      $all_equal = TRUE;
      foreach ($dates_parts as $date) {
        if (isset($first_date_parts[$part]) != isset($date[$part])) {
          $all_equal = FALSE;
          break;
        }
      }
      if ($all_equal) {
        $limit_parts[] = $part;
      }
      else {
        break;
      }
    }
  }

  $format_type = $variables['format1'];
  $format = variable_get('date_format_' . $format_type, '');

  // Remove last date, format all others.
  array_pop($dates_objects);
  $dates_formatted = array();
  foreach ($dates_objects as $date_object) {
    $dates_formatted[] = date_format_date($date_object, 'custom', date_limit_format($format, date_nongranularity($limit_parts)));
  }

  return format_string('@first_date@separator@second_date', array(
    '@first_date' => implode($variables['separator_multi'], $dates_formatted),
    '@separator' => t('!separator', array('!separator' => $variables['separator']), array('context' => 'date_customizer')),
    '@second_date' => $last_date_formatted,
  ));
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function date_customizer_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $function = "date_customizer_field_formatter_settings_{$display['type']}_form";
  $settings = $display['settings'];
  return $function($field, $instance, $settings);
}

/**
 * Helper function.
 *
 * @see date_customizer_field_formatter_settings_form()
 */
function date_customizer_field_formatter_settings_date_customizer_formatter_form($field, $instance, $settings) {
  $form = array();

  $form['from_to'] = array(
    '#title' => t('Display:'),
    '#type' => 'select',
    '#options' => array(
      'both' => t('Both Start and End dates'),
      'value' => t('Only Start date'),
      'value2' => t('Only End date'),
      'all' => t('Show all dates as one (uses only start date)'),
    ),
    '#access' => $field['settings']['todate'],
    '#default_value' => $settings['from_to'],
  );

  $form['format1'] = array(
    '#title' => t('Select how to display first date and time value:'),
    '#type' => 'select',
    '#options' => date_format_type_options(),
    '#default_value' => $settings['format1'],
    '#description' => t('To add or edit above options, visit <a href="@date-time-page">Date and time settings</a>.', array('@date-time-page' => url('admin/config/regional/date-time'))),
  );

  $form['format2'] = array(
    '#title' => t('Select how to display second date and time value:'),
    '#type' => 'select',
    '#options' => date_format_type_options(),
    '#default_value' => $settings['format2'],
    '#description' => t('To add or edit above options, visit <a href="@date-time-page">Date and time settings</a>.', array('@date-time-page' => url('admin/config/regional/date-time'))),
  );

  $form['separator'] = array(
    '#title' => t('Enter the separator to add in between the first and second date value:'),
    '#type' => 'textfield',
    '#default_value' => $settings['separator'],
    '#description' => t('Make sure to add spaces on the both side of the separator.'),
  );

  $form['separator_multi'] = array(
    '#title' => t('Enter the separator to add in between multiple date values:'),
    '#type' => 'textfield',
    '#default_value' => $settings['separator_multi'],
    '#description' => t('Separator to use for multiple values when displaying all dates as one, Make sure to add space on right side of the separator.'),
  );

  $options = date_granularity_names();
  $form['hide_same_values'] = array(
    '#title' => t('Hide date parts of the date:'),
    '#type' => 'checkboxes',
    '#options' => $options,
    '#default_value' => $settings['hide_same_values'],
    '#description' => t('Hide date parts if they are the same for both date values.'),
  );

  return $form;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function date_customizer_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $function = "date_customizer_field_formatter_settings_{$display['type']}_summary";
  $settings = $display['settings'];
  return $function($field, $instance, $settings);
}

/**
 * Helper function.
 *
 * @see date_customizer_field_formatter_settings_form()
 */
function date_customizer_field_formatter_settings_date_customizer_formatter_summary($field, $instance, $settings) {
  $date_format_type_options = date_format_type_options();
  $summary = array();

  if (isset($settings['format1'])) {
    $summary[] = t('Display as @format1 @separator @format2', array(
      '@format1' => $date_format_type_options[$settings['format1']],
      '@separator' => $settings['separator'],
      '@format2' => $date_format_type_options[$settings['format2']],
    ));
  }
  else {
    $summary[] = t('Please configure the display options.');
  }

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 */
function date_customizer_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $function = "date_customizer_field_formatter_{$display['type']}_view";
  return $function($entity_type, $entity, $field, $instance, $langcode, $items, $display);
}

/**
 * Helper function.
 *
 * @see date_customizer_field_formatter_view()
 */
function date_customizer_field_formatter_date_customizer_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $elements = array();
  $settings = $display['settings'];
  $formatter = $display['type'];

  // Make sure that, we have at least two dates.
  if ($settings['from_to'] === 'all' && count($items) >= 2) {
    $dates = array();
    foreach ($items as $delta => $item) {
      $dates[] = _date_customizer_date_formatter_process($formatter, $entity_type, $entity, $field, $instance, $langcode, $item, $display);
    }

    $elements[] = array(
      '#theme' => 'date_customizer_all',
      '#items' => $items,
      '#from_to' => $settings['from_to'],
      '#dates' => $dates,
      '#format1' => $settings['format1'],
      '#format2' => $settings['format2'],
      '#separator' => $settings['separator'],
      '#separator_multi' => $settings['separator_multi'],
      '#hide_same_values' => $settings['hide_same_values'],
      '#attributes' => array(),
    );
  }
  else {
    // All with 1 date will show start only.
    if ($settings['from_to'] === 'all') {
      $settings['from_to'] = 'value';
    }

    foreach ($items as $delta => $item) {
      $dates = _date_customizer_date_formatter_process($formatter, $entity_type, $entity, $field, $instance, $langcode, $item, $display);

      $elements[$delta] = array(
        '#theme' => 'date_customizer',
        '#item' => $item,
        '#from_to' => $settings['from_to'],
        '#first_date' => $dates['value'],
        '#second_date' => $dates['value2'],
        '#format1' => $settings['format1'],
        '#format2' => $settings['format2'],
        '#separator' => $settings['separator'],
        '#hide_same_values' => $settings['hide_same_values'],
        '#attributes' => array(),
      );
    }
  }

  return $elements;
}


/**
 * Helper function for creating formatted date arrays from a formatter.
 *
 * @see date_formatter_process()
 */
function _date_customizer_date_formatter_process($formatter, $entity_type, $entity, $field, $instance, $langcode, $item, $display) {
  $dates = array();
  $timezone = date_default_timezone();
  if (empty($timezone)) {
    return $dates;
  }

  $granularity = date_granularity($field);
  $settings = $display['settings'];
  $format = date_formatter_format($formatter, $settings, $granularity, $langcode);
  $timezone = isset($item['timezone']) ? $item['timezone'] : '';
  $timezone = date_get_timezone($field['settings']['tz_handling'], $timezone);
  $timezone_db = date_get_timezone_db($field['settings']['tz_handling']);
  $db_format = date_type_format($field['type']);
  $process = date_process_values($field);

  foreach ($process as $processed) {
    if (empty($item[$processed])) {
      $dates[$processed] = NULL;
    }
    else {
      // Create a date object with a GMT timezone from the database value.
      $dates[$processed] = array();

      // Check to see if this date was already created by date_field_load().
      if (isset($item['db'][$processed])) {
        $date = $item['db'][$processed];
      }
      else {
        $date = new DateObject($item[$processed], $timezone_db, $db_format);
        $date->limitGranularity($field['settings']['granularity']);
      }

      $dates[$processed]['db']['object'] = $date;
      $dates[$processed]['db']['datetime'] = date_format($date, DATE_FORMAT_DATETIME);

      date_timezone_set($date, timezone_open($timezone));
      $dates[$processed]['local']['object'] = $date;
      $dates[$processed]['local']['datetime'] = date_format($date, DATE_FORMAT_DATETIME);
      $dates[$processed]['local']['timezone'] = $timezone;
      $dates[$processed]['local']['offset'] = date_offset_get($date);

      // Format the date, special casing the 'interval' format which doesn't
      // need to be processed.
      $dates[$processed]['formatted'] = '';
      $dates[$processed]['formatted_iso'] = date_format_date($date, 'custom', 'c');

      $format_type = $processed === 'value' ? $settings['format1'] : $settings['format2'];
      $format = variable_get('date_format_' . $format_type, '');
      if (is_object($date)) {
        $dates[$processed]['formatted'] = date_format_date($date, 'custom', $format);
        $dates[$processed]['formatted_date'] = date_format_date($date, 'custom', date_limit_format($format, array(
          'year',
          'month',
          'day',
        )));
        $dates[$processed]['formatted_time'] = date_format_date($date, 'custom', date_limit_format($format, array(
          'hour',
          'minute',
          'second',
        )));
        $dates[$processed]['formatted_timezone'] = date_format_date($date, 'custom', date_limit_format($format, array('timezone')));
      }
    }
  }

  if (empty($dates['value2'])) {
    $dates['value2'] = $dates['value'];
  }

  $dates['format'] = $format;
  return $dates;
}
