<?php

/**
 * @file
 * Allows any entity to be displayed as a JSON object.
 */

define('ENTITY_JSON_MENU', 'admin/config/content/entity_json');

/**
 * Implements hook_permission().
 */
function entity_json_permission() {
  return array(
    'administer entity json' => array(
      'title' => t('Administer Entity JSON'),
      'description' => t('Change which entities can and cannot be displayed as JSON.'),
    ),
    'view entity json' => array(
      'title' => t('View Entities as JSON'),
      'description' => t('View entities printed out as JSON. Note: normal content access premissions will NOT be overried.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function entity_json_menu() {
  $items = array();

  // Create a basic settings page.
  $items[ENTITY_JSON_MENU] = array(
    'title' => 'Entity JSON',
    'description' => 'Configure what entity types can be displayed as JSON objects.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('entity_json_settings_page'),
    'access arguments' => array('administer entity json'),
    'type' => MENU_NORMAL_ITEM,
  );

  // Add the JSON object to the node URL by default.
  $items['node/%/json'] = array(
    'title' => 'JSON',
    'page callback' => 'entity_json_menu_callback',
    'page arguments' => array('node', 1),
    'access callback' => 'entity_json_access',
    'access arguments' => array('node', 1),
    'type' => MENU_CALLBACK,
  );

  // Allows the JSON object to be viewed by any entity.
  $items['entity_json/%/%'] = array(
    'title' => 'JSON',
    'page callback' => 'entity_json_menu_callback',
    'page arguments' => array(1, 2),
    'access callback' => 'entity_json_access',
    'access arguments' => array(1, 2),
     'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_help().
 */
function entity_json_help($path, $arg) {
  switch ($path) {
    case 'admin/help#entity_json':
      $path = drupal_get_path('module', 'entity_json') . "/README.txt";
      $link = l("README.txt", $path, array('attributes' => array('target' => '_blank')));
      return '<p>' . t('Read the !link file in the module directory for more information.', array('!link' => $link)) . '</p>';
  }
}

/**
 * A basic settings page for Entity JSON.
 *
 * This settings page creates an option for each of the bundles available to be
 * displayed as JSON by the module.
 *
 * @return array
 *   A renderable form array ready for drupal_build_form().
 */
function entity_json_settings_page() {
  $form = array();

  $form['instructions'] = array(
    '#markup' => t('Please select the entity_types that you want to be allowd to be displayed as JSON objects. You can then view the output of these entities via the url: @url. Note: if applicable, normal permissions will still apply to the entity being loaded.', array('@url' => '/entity_json/{entity type}/{entity id}')),
  );

  $bundles = field_info_bundles();
  foreach ($bundles as $bundle => $bundle_data) {
    $form['entity_json_' . $bundle . '_allow'] = array(
      '#type' => 'checkbox',
      '#title' => t($bundle),
      '#default_value' => variable_get('entity_json_' . $bundle . '_allow', FALSE),
    );
  }

  return system_settings_form($form);
}

/**
 * A simple access control function for allowing only certain entity_types.
 *
 * @param string $entity_type
 *   The type of entity that will be called.
 * @param int $entity_id
 *   The id of the entity to be displayed.
 *
 * @return bool
 *   A TRUE or FALSE if that entity can be displayed.
 */
function entity_json_access($entity_type, $entity_id) {
  $allowed = variable_get('entity_json_' . $entity_type . '_allow', FALSE);
  if ($allowed) {
    $entities = entity_load($entity_type, array($entity_id));
    // If no entity is loaded, return false.
    if (empty($entities)) {
      return FALSE;
    }
    $entity = $entities[$entity_id];
    $wrapper = entity_metadata_wrapper($entity_type, $entity);
    return $wrapper->access('view');
  }
  return FALSE;
}

/**
 * A menu callback for pages that only want to display JSON.
 *
 * @param string $entity_type
 *   The type of entity that will be called.
 * @param int $entity_id
 *   The id of the entity to be displayed.
 *
 * @return string
 *   This does NOT return anything, but will stop the current page load from
 *   finishing and display only the JSON returned from entity_json_json.
 */
function entity_json_menu_callback($entity_type, $entity_id, $langcode = NULL) {
  $json = entity_json_json($entity_type, $entity_id, $langcode);
  if ($json === NULL) {
    drupal_not_found();
  }
  else {
    drupal_json_output($json);
    drupal_exit();
  }
}

/**
 * A function to build the JSON encoded string from an entity.
 *
 * @param string $entity_type
 *   The type of entity that will be called.
 * @param int $entity_id
 *   The id of the entity to be displayed.
 *
 * @return array
 *   A full JSON-encoded strong ready for printing on the screem.
 */
function entity_json_json($entity_type, $entity_id, $langcode = NULL) {
  $entities = entity_load($entity_type, array($entity_id));
  if (empty($entities)) {
    return NULL;
  }
  $entity = $entities[$entity_id];

  $options = array('absolute' => TRUE);
  $uri = entity_uri($entity_type, $entity);
  $url = ($uri === NULL) ? t('--none--') : url($uri['path'], $options);
  $return = array(
    'apiVersion' => '2.0',
    'entityType' => $entity_type,
    'entityID' => $entity_id,
    'url' => $url,
    'created' => date('c', $entity->created),
    'changed' => date('c', $entity->changed),
  );

  // Check to see if there is an author, if not assign author the ID of null.
  if ($entity->uid) {
    $author = user_load($entity->uid);
    $return['authorId'] = $author->uid;
    $return['authorName'] = $author->name;
    $return['authorUrl'] = url('user/' . $author->uid, $options);
  }
  else {
    $author = NULL;
    $return['authorId'] = NULL;
  }

  field_attach_prepare_view($entity_type, array($entity_id => $entity), 'full', $langcode);
  entity_prepare_view($entity_type, array($entity_id => $entity), $langcode);
  $content = field_attach_view($entity_type, $entity, 'view', $langcode);

  foreach ($content as $key => $field_data) {
    if (strpos($key, 'field_') === 0) {
      // Get the formatted data for the field.
      $return[$key] = entity_json_json_field_formatter($field_data);
    }
  }

  if ($entity_type == 'node' && module_exists('comment') && (user_access('access comments') || user_access('administer comments'))) {
    $return['comments'] = array();
    $comments = db_select('comment', 'c')
      ->fields('c')
      ->condition('nid', $entity_id, '=')
      ->execute();

    while ($comment = $comments->fetchAssoc()) {
      $cid = $comment['cid'];
      $return['comments'][$cid] = array(
        'cid' => $cid,
        'contributorId' => $comment['uid'],
        'url' => $url . '#comment-' . $cid,
        'created' => $comment['created'],
        'status' => $comment['status'],
      );
    }
  }

  // Allow modules to change or enhance the returned data.
  $context = array(
    'entity' => $entity,
    'author' => $author,
    'content' => $content,
  );
  drupal_alter('entity_json', $return, $context);

  return $return;
}

/**
 * Format the field values for display in the JSON array.
 *
 * @param array $field_data
 *   An array of field data, ready to be rendered.
 *
 * @return array
 *   An array of each value for the field.
 */
function entity_json_json_field_formatter($field_data) {
  $return = array();
  switch ($field_data['#field_type']) {
    case 'entityreference':
      foreach ($field_data['#items'] as $key => $value) {
        $return[] = array(
          'value' => $value['target_id'],
          'markup' => $field_data[$key]['#markup'],
        );
      }
      break;

    default:
      foreach ($field_data['#items'] as $key => $value) {
        $return[] = array(
          'value' => $value['value'],
          'markup' => $field_data[$key]['#markup'],
        );
      }
      break;
  }

  return $return;
}
