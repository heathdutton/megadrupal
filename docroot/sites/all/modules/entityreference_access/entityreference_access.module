<?php

/**
 * @file
 * Entity reference access.
 */

/**
 * Implements hook_field_formatter_info().
 */
function entityreference_access_field_formatter_info() {
  $info = array();

  // Get ER formatter info.
  $entityreference_info = entityreference_field_formatter_info();

  // Copy the info.
  $info['entityreference_access_entity_view_role'] = $entityreference_info['entityreference_entity_view'];
  // Add to the info.
  $info['entityreference_access_entity_view_role']['label'] = t('Rendered entity by role');
  $info['entityreference_access_entity_view_role']['settings']['role'] =  DRUPAL_ANONYMOUS_RID;

  return $info;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function entityreference_access_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  // Get ER form element.
  $instance['display'][$view_mode]['type'] = 'entityreference_entity_view';
  $element = entityreference_field_formatter_settings_form($field, $instance, $view_mode, $form, $form_state);

  // Add to the element.
  if ($display['type'] == 'entityreference_access_entity_view_role') {
    $roles = entityreference_access_get_roles();
    $element['role'] = array(
      '#type' => 'select',
      '#options' => $roles,
      '#default_value' => $settings['role'],
    );
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function entityreference_access_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  if ($display['type'] == 'entityreference_access_entity_view_role') {
    // Get ER settings summary.
    $instance['display'][$view_mode]['type'] = 'entityreference_entity_view';
    $summary = explode('<br />', entityreference_field_formatter_settings_summary($field, $instance, $view_mode));

    // Add to the summary.
    $roles = entityreference_access_get_roles();
    $role_label = $roles[$settings['role']];
    $summary[] = t('Using access as @role', array('@role' => $role_label));
  }

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_prepare_view().
 */
function entityreference_access_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items, $displays) {
  // Call ER preparation. We don't need to do anything here.
  entityreference_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, $items, $displays);
}

/**
 * Implements hook_field_formatter_view().
 */
function entityreference_access_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  // Add access keys based on configured role.
  $settings = $display['settings'];

  // Loop through entities and set access key accordingly on the items.
  switch ($display['type']) {
    case 'entityreference_access_entity_view_role':
      foreach ($items as $delta => $item) {
        $entity = clone $item['entity'];
        $entity_type = $field['settings']['target_type'];
        $items[$delta]['access'] = entityreference_access_by_role('view', $entity_type, $entity, $settings['role']);
      }
  }

  // Return ER formatter view, with our new access keys set.
  $display['type'] = 'entityreference_entity_view';
  return entityreference_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display);
}

/**
 * Checks entity access per role.
 *
 * To do this we load a dummy account with a given role ID, which we pass as the
 * $account param to entity_access().
 *
 * @param string $op
 *   See entity_access() $op param.
 * @param string $entity_type
 *   See entity_access() $entity_type param.
 * @param mixed $entity
 *   See entity_access() $entity param.
 * @param int $rid
 *   See user_role_load() $rid param. Defaults to Anonymous role ID.
 *
 * @return bool
 *   See entity_access() return.
 */
function entityreference_access_by_role($op, $entity_type, $entity = NULL, $rid = DRUPAL_ANONYMOUS_RID) {
  // Note, access callbacks should never check role label, so for performance we
  // should not run the query in user_role_load(), however small.
  $account = new stdClass();
  $account->roles = array($rid => NULL);

  return entity_access($op, $entity_type, $entity, $account);
}

/**
 * Gets a list of roles in the system.
 *
 * @see views_ui_get_roles()
 */
function entityreference_access_get_roles() {
  $roles = drupal_static(__FUNCTION__);

  if (!isset($roles)) {
    $roles = array();
    $result = db_query("SELECT r.rid, r.name FROM {role} r ORDER BY r.name");
    foreach ($result as $obj) {
      $roles[$obj->rid] = $obj->name;
    }
  }

  return $roles;
}
