<?php
/**
 * @file
 * Subs installation hooks.
 */

/**
 * Implements hook_install().
 */
function subs_install() {
  $type = entity_create('subs_type', array(
    'name' => 'standard',
    'label' => 'Standard',
    'description' => 'This is a standard subscription type.',
  ));
  $type->save();
}

/**
 * Implements hook_uninstall().
 */
function subs_uninstall() {
  $result = db_select('variable', 'v')
    ->fields('v', array('name'))
    ->condition('name', 'subs_%', '=')
    ->execute();

  foreach ($result as $row) {
    variable_del($row->name);
  }
}

/**
 * Implements hook_schema().
 */
function subs_schema() {
  $schema = array(
    'subs' => array(
      'description' => 'Stores Subscriptions.',
      'fields' => array(
        'sid' => array(
          'type' => 'serial',
          'not null' => TRUE,
          'description' => 'Primary Key: Unique Subscription ID.'
        ),
        'type' => array(
          'description' => 'The {subs_type}.name of this subscription.',
          'type' => 'varchar',
          'length' => 32,
          'not null' => TRUE,
          'default' => '',
        ),
        'uid' => array(
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => FALSE,
          'default' => NULL,
          'description' => "The {users}.uid of the associated user.",
        ),
        'date_start' => array(
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0,
          'description' => 'The date the subscription started.',
        ),
        'date_end' => array(
          'type' => 'int',
          'description' => 'The date the subscription ends.',
        ),
        'created' => array(
          'description' => 'The Unix timestamp when the subscription was created.',
          'type' => 'int',
          'not null' => FALSE,
        ),
        'changed' => array(
          'description' => 'The Unix timestamp when the subscription was most recently saved.',
          'type' => 'int',
          'not null' => FALSE,
        ),
        'status' => array(
          'description' => "Integer indicating subscription's status.",
          'type' => 'int',
          'not null' => TRUE,
          'unsigned' => TRUE,
          'default' => 0,
          'size' => 'tiny',
        ),
      ),
      'indexes' => array(
        'uid' => array('uid'),
        'status' => array('status'),
      ),
      'foreign keys' => array(
        'uid' => array(
          'table' => 'users',
          'columns' => array('uid' => 'uid'),
        ),
        'type' => array(
          'table' => 'subs_type',
          'columns' => array('type' => 'name'),
        ),
      ),
      'primary key' => array('sid'),
    ),
    'subs_type' => array(
      'description' => 'Stores information about all defined subscription types.',
      'fields' => array(
        'id' => array(
          'type' => 'serial',
          'not null' => TRUE,
          'description' => 'Primary Key: Unique subscription type ID.',
        ),
        'name' => array(
          'description' => 'The machine-readable name of this subscription type.',
          'type' => 'varchar',
          'length' => 32,
          'not null' => TRUE,
        ),
        'label' => array(
          'description' => 'The human-readable name of this subscription type.',
          'type' => 'varchar',
          'length' => 255,
          'not null' => TRUE,
          'default' => '',
        ),
        'weight' => array(
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0,
          'size' => 'tiny',
          'description' => 'The weight of this subscription type in relation to others.',
        ),
        'data' => array(
          'type' => 'text',
          'not null' => FALSE,
          'size' => 'big',
          'serialize' => TRUE,
          'description' => 'A serialized array of additional data related to this subscription type.',
        ),
        'status' => array(
          'type' => 'int',
          'not null' => TRUE,
          // Set the default to ENTITY_CUSTOM without using the constant as it is
          // not safe to use it at this point.
          'default' => 0x01,
          'size' => 'tiny',
          'description' => 'The exportable status of the entity.',
        ),
        'module' => array(
          'description' => 'The name of the providing module if the entity has been defined in code.',
          'type' => 'varchar',
          'length' => 255,
          'not null' => FALSE,
        ),
        'description' => array(
          'description' => 'A brief description of this subscription type.',
          'type' => 'text',
          'not null' => TRUE,
          'size' => 'medium',
          'translatable' => TRUE,
        ),
        'length' => array(
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0,
          'description' => 'The length of this subscription type, in seconds.',
        ),
        'grace' => array(
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0,
          'description' => "The length of this subscription type's grace period, in seconds.",
        ),
        'default_status' => array(
          'type' => 'int',
          'not null' => TRUE,
          'unsigned' => TRUE,
          'default' => 0,
          'size' => 'tiny',
          'description' => "The default status for new subscriptions of this type.",
        ),
      ),
      'primary key' => array('id'),
      'unique keys' => array(
        'name' => array('name'),
      ),
    ),
  );

  // Support EntityCache module.
  $schema['cache_entity_subs'] = drupal_get_schema_unprocessed('system', 'cache');
  $schema['cache_entity_subs']['description'] = "Cache table used to store subs entity records.";

  return $schema;
}

/**
 * Add roles field to subscription type schema.
 */
function subs_update_7000() {
  // Add extra field to schema.
  $schema = drupal_get_schema('subs_type');
  $spec = $schema['fields']['roles'];

  try {
    db_add_field('subs_type', 'roles', $spec);
  }
  catch (Exception $e) {
    // Do nothing.
  }

  return t('Added roles field to subscription type schema.');
}

/**
 * Create "cache_entity_subs" table.
 */
function subs_update_7001() {
  $schema = drupal_get_schema('cache_entity_subs', TRUE);
  db_create_table('cache_entity_subs', $schema);
}

/**
 * Delete roles field from subscription type schema.
 */
function subs_update_7003() {
  db_drop_field('subs_type', 'roles');
}