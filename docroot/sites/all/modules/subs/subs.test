<?php
/**
 * @file
 * Subs tests.
 */

/**
 * Base class for our tests.
 */
class SubsSetUp extends DrupalWebTestCase {

  protected $admin_user;

  /**
   * Initialize modules for our tests.
   */
  function setUp() {
    parent::setUp('subs');
    $this->addAdminUser();
  }

  /**
   * Add a user with administrative priviledges.
   */
  function addAdminUser() {
    $permissions = array(
      'access administration pages',
      'access content',
      'administer subs',
      'administer subs types',
    );

    $permissions += array_keys(subs_permission());
    $this->admin_user = $this->drupalCreateUser($permissions);
    $this->drupalLogin($this->admin_user);
  }

}

/**
 * Class for testing Subscription Types.
 */
class SubsTestTypes extends SubsSetUp {

  /**
   * Return test info.
   */
  static function getInfo() {
    return array(
      'name' => 'Subs Type tests',
      'description' => 'Test Subscription Types.',
      'group' => 'Subs',
    );
  }

  /**
   * Create a Subscription Type.
   */
  static function createType() {
    // Prepare information.
    $edit = array(
      'name' => 'subs_test_type',
      'label' => 'Test Subscription Type',
      'default_status' => SUBS_STATUS_ACTIVE,
      'length' => 1,
      'grace' => 0,
      'description' => "This is a test subscription type. Don't subscribe you will get ripped off!",
    );

    // Add subscription type.
    $this->drupalPost('admin/structure/subscriptions/add', $edit, t('Save subscription type'));
  }

  /**
   * Tests creating a new subscription type.
   */
  function testCreateType() {
    // Save a new subscription type.
    $this->createType();
    // Check for ok message.
    $this->assertText(t('Subscription type @label created.', array('@label' => 'Test Subscription Type')));
  }

  /**
   * Tests loading a saved subscription type.
   */
  function testLoadType() {
    // Save a new subscription type.
    $this->createType();
    // Load subscription type.
    $type = subs_get_types('subs_test_type');
    // Check for same label.
    $this->assertEqual('Test Subscription Type', $type->label);
    // Check to see whether the length was correctly converted to a timestamp.
    // We know that 1 day = 86400 seconds.
    $this->assertEqual('86400', $type->length);
  }

  /**
   * Tests saving a subscription type.
   */
  function testSaveType() {
    // Save a new subscription type.
    $this->createType();
    // Load subscription type.
    $type = subs_get_types('subs_test_type');
    // Change the default_status.
    $type->default_status = SUBS_STATUS_PENDING;
    // Save it.
    $ok = subs_type_save($type);
    // Check returned TRUE.
    $this->assertTrue($ok);
    // Load subscription.
    $type2 = subs_get_types('subs_test_type');
    // Check default_status was correctly saved.
    $this->assertEqual($type->default_status, $type2->default_status);
  }

  // @TODO test deleting type

  // @TODO test deleting type deletes subscriptions
}

/**
 * Class for testing Subscription callbacks.
 */
class SubsTestCallbacks extends SubsSetUp {

  /**
   * Return test info.
   */
  static function getInfo() {
    return array(
      'name' => 'Subs Callback tests',
      'description' => 'Test Subscription callback functions.',
      'group' => 'Subs',
    );
  }

  /*
   * Initialize our tests.
   */
  function setUp() {
    parent::setUp();
    // Create our test Subscription Type.
    SubsTestTypes::createType();
  }

  /**
   * Test subs_view().
   */
  function testView() {

  }
}