<?php
/**
 * @file
 * Subs i18n integration module via entity API i18n support.
 *
 * @see EntityDefaultI18nController
 */

/**
 * Implements hook_entity_info_alter().
 */
function subs_i18n_entity_info_alter(&$info) {
  // Enable i18n support via the entity API.
  $info['subs_type']['i18n controller class'] = 'EntityDefaultI18nStringController';
}

/**
 * Implements hook_entity_property_info_alter().
 */
function subs_i18n_entity_property_info_alter(&$info) {
  $properties = array(
    'label',
    'description',
  );
  // Mark some properties as translatable, but also denote that translation
  // works with i18n_string.
  foreach ($properties as $name) {
    $info['subs_type']['properties'][$name]['translatable'] = TRUE;
    $info['subs_type']['properties'][$name]['i18n string'] = TRUE;
  }
}

/**
 * Implements hook_subs_type_insert().
 *
 * Sets property translations for new subscription types.
 */
function subs_i18n_subs_type_insert(SubsType $subscription_type) {
  i18n_string_object_update('subs_type', $subscription_type);
}

/**
 * Implements hook_subs_type_update().
 *
 * Updates property translations and handles name changes for
 * subscription types.
 */
function subs_i18n_subs_type_update(SubsType $subscription_type) {
  // Account for name changes.
  if ($subscription_type->original->name != $subscription_type->name) {
    i18n_string_update_context("subs:subs_type:{$subscription_type->original->name}:*", "subs:subs_type:{$subscription_type->name}:*");
  }
  i18n_string_object_update('subs_type', $subscription_type);
}

/**
 * Implements hook_subs_type_delete().
 *
 * Removes translations for deleted subscription types.
 */
function subs_i18n_subs_type_delete(SubsType $subscription_type) {
  i18n_string_object_remove('subs_type', $subscription_type);
}