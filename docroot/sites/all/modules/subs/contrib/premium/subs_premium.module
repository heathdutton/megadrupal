<?php
/**
 * @file
 * Subs Premium module.
 */

/**
 * Implements hook_permission().
 */
function subs_premium_permission() {
  return array(
    'administer subs_premium' => array(
      'title' => t('Administer Subs Premium'),
    ),
    'bypass subs_premium' => array(
      'title' => t('Bypass access restriction for Subs Premium'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function subs_premium_menu() {
  $items = array();

  $items['admin/config/workflow/subs/premium'] = array(
    'title' => 'Subs Premium',
    'description' => 'Administer settings for Subs Premium',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('subs_premium_settings_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer subs_premium'),
    'file' => 'subs_premium.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_module_implements_alter().
 *
 * Replaces profile2_field_access() with our own implementation.
 */
function subs_premium_module_implements_alter(&$implementations, $hook) {
  if ($hook === 'field_access') {
    unset($implementations['profile2']);
  }
  elseif ($hook === 'node_view_alter') {
    unset($implementations['nopremium']);
  }
}

/**
 * Implements hook_field_access().
 */
function subs_premium_field_access($op, $field, $entity_type, $profile = NULL, $account = NULL) {
  if ($entity_type == 'profile2' && $op == 'view' && !empty($field['settings']['profile2_private']) && !user_access('administer profiles', $account)) {
    // For profiles, deny general view access for private fields.
    if (!isset($profile)) {
      return FALSE;
    }

    $account = isset($account) ? $account : user_uid_optional_load();

    // Also deny view access, if someone else views a private field.
    if ($account->uid == $profile->uid) {
      return TRUE;
    }

    // Figure to which subscription types this profile type allows access to
    // private fields.
    $allowed = array();

    foreach (subs_get_types() as $name => $type) {
      if (variable_get("subs_premium_profile_{$name}_{$profile->type}", FALSE)) {
        $allowed[] = $name;
      }
    }

    if (!empty($allowed)) {
      // Check whether the current user has active subscription.
      $subscriptions = array();

      foreach ($allowed as $type) {
        if ($subs = subs_load_by_user($account, $type)) {
          $subscriptions += $subs;
        }
      }

      // Allow users with active subscriptions to view this field.
      foreach ($subscriptions as $subs) {
        if (subs_in_force($subs)) {
          return TRUE;
        }
      }
    }
    return FALSE;
  }
}

// Only implement this hook if nopremium exists.
if (module_exists('nopremium')) {

  /**
   * Implements hook_node_view_alter().
   */
  function subs_node_view_alter(&$build) {
    $node = $build['#node'];

    if (($build['#view_mode'] != 'teaser') && $node->premium) {
      // Figure to which subscription types this content type allows access to
      // premium content.
      $allowed = array();

      foreach (subs_get_types() as $name => $type) {
        if (variable_get("subs_premium_content_{$name}_{$node->type}", FALSE)) {
          $allowed[] = $name;
        }
      }

      if (!empty($allowed)) {
        // Check whether the current user has active subscription.
        $subscriptions = array();

        $account = user_uid_optional_load();

        foreach ($allowed as $type) {
          if ($subs = subs_load_by_user($account, $type)) {
            $subscriptions += $subs;
          }
        }

        // Allow users with active subscriptions to view this field.
        foreach ($subscriptions as $subs) {
          if (subs_in_force($subs)) {
            return TRUE;
          }
        }
      }

      if (!nopremium_access_full_content($node)) {
        nopremium_alter_node($build);
      }
    }
  }

}

/**
 * Implements hook_help().
 */
function subs_premium_help($path, $arg) {
  switch ($path) {
    case 'admin/config/workflow/subs/premium':
      return t("Here you can configure settings for Subs Premium, allowing you to make certain content available only to users with active subscriptions.");
  }
}