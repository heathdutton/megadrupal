<?php
/**
 * @file Subs Roles module.
 */

/**
 * Implements hook_entity_info_alter().
 */
function subs_roles_entity_info_alter(&$entity_info) {
  if (array_key_exists('subs_type', $entity_info)) {
    $fields = array_keys(subs_roles_get_fields_entity());
    $entity_info['subs_type']['schema_fields_sql']['base table'] = array_merge($entity_info['subs_type']['schema_fields_sql']['base table'], $fields);
  }
}

/**
 * Implements hook_entity_property_info_alter().
 */
function subs_roles_entity_property_info_alter(&$info) {
  $properties = &$info['subs_type']['properties'];

  foreach (subs_roles_get_fields_entity() as $fieldname => $field) {
    $properties[$fieldname] = $field;
  }
}

/**
 * Returns field schema from entity property.
 */
function subs_roles_get_fields_entity() {
  $fields = array();

  $fields['roles_assign'] = array(
    'type' => 'list',
    'label' => t('Roles to assign'),
    'schema field' => 'roles_assign',
  );

  $fields['status_assign'] = array(
    'type' => 'text',
    'label' => t('Status triggered to assign roles'),
    'schema field' => 'status_assign',
  );

  return $fields;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function subs_roles_form_subs_type_form_alter(&$form, &$form_state) {
  $subscription_type = $form_state['subscription_type'];

  // Ignore anonymous user.
  $roles = user_roles(TRUE);

  if ($roles) {
    $form['roles_workflow'] = array(
      '#type' => 'fieldset',
      '#title' => t('Subs Roles'),
      '#description' => t("Here you can assign user roles based on a subscription's status"),
      '#collapsible' => TRUE,
      '#weight' => 6,
    );

    $form['roles_workflow']['roles_assign'] = array(
      '#type' => 'select',
      '#title' => t('Roles to assign'),
      '#description' => t('Select which roles should be assigned to subscribed users. Note that status subs triggered must be define if roles are selected. Be careful after changes, it won\'t revert all users roles associated to subs of this type.'),
      '#multiple' => TRUE,
      '#options' => $roles,
      '#default_value' => (!empty($subscription_type->roles_assign)) ? $subscription_type->roles_assign
          : array(),
    );

    $status = subs_status_options_list();
    if ($status) {

      // Be careful, do not add option value with 0 as default
      // for example as it still an existing value (SUBS_STATUS_PENDING)
      $form['roles_workflow']['status_assign'] = array(
        '#type' => 'select',
        '#title' => t('Status subs to trigger'),
        '#description' => t('Define for this subs type which subs status should have to assign roles selected.'),
        '#options' => $status,
        '#default_value' => (!empty($subscription_type->status_assign)) ? $subscription_type->status_assign
            : SUBS_STATUS_ACTIVE,
      );
    }
  }
}

/* * ***********
 * ENTITY CRUD
 * *********** */

//There are further deals :
// - don't overkill cron job done subs
// - no flag to know if we have already do the job
// - features : provide an automatic way
//   to update data. For e.g when updating a subs type
//   or subs, remove and add/remove new/old roles

/**
 * Implements hook_entity_insert().
 */
function subs_roles_entity_insert($entity, $type) {
  if ($type === 'subs') {
    $subs_type = subs_type_load($entity->type);
    if ($subs_type && !empty($subs_type->roles_assign)) {
      // Do we need to add roles to this user?
      if ($entity->status == $subs_type->status_assign) {
        subs_roles_add_roles($entity, $subs_type->roles_assign);
      }
    }
  }
}

/**
 * Implements hook_entity_update().
 */
function subs_roles_entity_update($entity, $type) {
  if ($type === 'subs') {
    $subs_type = subs_type_load($entity->type);
    if ($subs_type && !empty($subs_type->roles_assign)) {
      // Do we need to add roles to this user?
      if ($entity->status == $subs_type->status_assign) {
        subs_roles_add_roles($entity, $subs_type->roles_assign);
      }
      // Do we need to remove roles from this user?
      else {
        subs_roles_remove_roles($entity, $subs_type->roles_assign);
      }
    }
  }
}

/**
 * Implements hook_entity_delete().
 */
function subs_roles_entity_delete($entity, $type) {
  if ($type === 'subs') {
    $subs_type = subs_type_load($entity->type);
    if ($subs_type && !empty($subs_type->roles_assign)) {
      // Remove users roles anyway.
      subs_roles_remove_roles($entity, $subs_type->roles_assign);
    }
  }
}

/* * ****************
 * ROLE CRUD
 * **************** */

/**
 * Add roles for user account from a given subscription object.
 *
 * @param $subscription
 *   The Subs object.
 * @param $rids
 *   An array of role ids to add.
 *
 * @return stdClass
 *   The user's altered account object on success or FALSE if user account
 *   couln't be loaded.
 */
function subs_roles_add_roles(Subs $subscription, $rids) {
  static $roles;

  if (!isset($roles)) {
    $roles = user_roles(TRUE);
  }

  // Depending on when this happens the user can be either an id or a name.
  if (is_numeric($subscription->uid)) {
    $account = user_load($subscription->uid);
  }
  else {
    $account = user_load_by_name($subscription->uid);
  }

  // Even if user account is inactive, assign roles as the account could be
  // reactivated later.
  if ($account) {
    // Iterate through roles and add each one if user doesn't already have it.
    foreach ($rids as $rid) {
      $roles = array();
      if (!array_key_exists($rid, $account->roles)) {
        if ($role = user_role_load($rid)) {
          // We don't use user_multiple_role_edit() because it will manually
          // check whether the user has the role and save each time.
          // Since we've already checked and might be adding multiple roles
          // let's add it ourselves and save the user just once.
          $roles[$rid] = $role->name;
        }
      }
    }

    if (!empty($roles)) {
      $roles = $account->roles + $roles;
      user_save($account, array('roles' => $roles));
    }
  }

  return $account;
}

/**
 * Remove roles from user account from a given subscription object.
 *
 * @param $subscription
 *   The Subs object.
 * @param $rids
 *   An array of role ids to add.
 *
 * @return stdClass
 *   The user's altered account object on success or FALSE if user account
 *   couln't be loaded.
 */
function subs_roles_remove_roles(Subs $subscription, $rids) {
  static $roles;

  if (!isset($roles)) {
    $roles = user_roles(TRUE);
  }

  // Depending on when this happens the user can be either an id or a name.
  if (is_numeric($subscription->uid)) {
    $account = user_load($subscription->uid);
  }
  else {
    $account = user_load_by_name($subscription->uid);
  }

  // Even if user account is inactive, remove the roles as the account could be
  // reactivated later.
  if ($account) {
    // Iterate through roles and remove each one if user has it.
    foreach ($rids as $rid) {
      $roles = array();
      if (array_key_exists($rid, $account->roles)) {
        if ($role = user_role_load($rid)) {
          // We don't use user_multiple_role_edit() because it will manually
          // check whether the user has the role and save each time.
          // Since we've already checked and might be adding multiple roles
          // let's add it ourselves and save the user just once.
          $roles[$rid] = $role->name;
        }
      }
    }

    if (!empty($roles)) {
      $roles = array_diff_key($account->roles, $roles);
      user_save($account, array('roles' => $roles));
    }
  }

  return $account;
}
