<?php

/**
 * @file
 * Primarily Drupal hooks to manipulate Quick Registration.
 *
 * This is the main module file for Quick Registration.
 */

/**
 * Implements hook_menu().
 */
function quick_registration_menu() {
  $items['admin/config/people/registration'] = array(
    'title' => 'Quick registration',
    'description' => 'Setting the block of quick registration.',
    'access arguments' => array('administer quick registration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('quick_registration_settings_form'),
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function quick_registration_permission() {
  return array(
    'administer quick registration' => array(
      'title' => t('Control setting quick registration'),
      'description' => t('Provides access to a page settings.'),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function quick_registration_block_info() {
  $blocks['quick_registration_block'] = array(
    'info' => t('Quick registration'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_help().
 */
function quick_registration_help($path, $arg) {
  switch ($path) {
    case 'admin/help#quick_registration':
      $output = file_get_contents(drupal_get_path('module', 'quick_registration') . '/README.txt');
      return nl2br($output);
  }
}

/**
 * Implements hook_block_view().
 */
function quick_registration_block_view($delta = '') {
  global $user;
  $block = array();

  switch ($delta) {
    case 'quick_registration_block':
      if (!$user->uid && variable_get('user_register', USER_REGISTER_ADMINISTRATORS_ONLY)) {
        $block['subject'] = t('It is free and anyone can join');
        $block['content'] = drupal_get_form('quick_registration_form');
      }
      break;
  }
  return $block;
}

/**
 * Returns the form for block registered.
 */
function quick_registration_form($form = NULL, &$form_state = NULL) {
  $form = array();

  $form['#attached']['css'] = array(
    drupal_get_path('module', 'quick_registration') . '/css/quick-registration-block.css',
  );

  $form['#attributes'] = array(
    'class' => array('quick-registration-block'),
  );

  $block_settings = variable_get('quick_registration_settings', array());
  foreach ($block_settings as $key => $value) {
    if ($block_settings[$key] == 'default' || empty($block_settings)) {
      continue;
    }
    switch ($key) {
      case 'first_name':
        $form['first_name'] = array(
          '#type' => 'textfield',
          '#title' => t('First name'),
          '#required' => TRUE,
          '#size' => 25,
          '#weight' => 0,
        );
        break;

      case 'last_name':
        $form['last_name'] = array(
          '#type' => 'textfield',
          '#title' => t('Last name'),
          '#required' => TRUE,
          '#size' => 25,
          '#weight' => 1,
        );
        break;

      case 'gender':
        $info_field_gender = field_info_field($value);
        $form['gender'] = array(
          '#type' => 'select',
          '#title' => t('Gender:'),
          '#empty_option' => t('Select'),
          '#required' => TRUE,
          '#options' => $info_field_gender['settings']['allowed_values'],
          '#weight' => 4,
        );
        break;

      case 'birthday':
        $form['birthday'] = array(
          '#type' => 'date',
          '#title' => t('Birthday:'),
          '#required' => TRUE,
          '#default_value' => array(
            'month' => format_date(time(), 'custom', 'n'),
            'day' => format_date(time(), 'custom', 'j'),
            'year' => format_date(time(), 'custom', 'Y'),
          ),
          '#weight' => 5,
        );
        break;
    }
  }
  $form['your_email'] = array(
    '#type' => 'textfield',
    '#title' => t('Your email'),
    '#required' => TRUE,
    '#size' => 25,
    '#weight' => 2,
  );

  $form['password'] = array(
    '#type' => 'password',
    '#title' => t('Password'),
    '#maxlength' => 64,
    '#required' => TRUE,
    '#size' => 25,
    '#weight' => 3,
  );

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['sign_up'] = array(
    '#type' => 'submit',
    '#value' => t('Sign Up'),
    '#weight' => 6,
  );

  return $form;
}

/**
 * Handler validate form for quick_registration_form().
 */
function quick_registration_form_validate($form, &$form_state) {
  $error = user_validate_mail($form_state['values']['your_email']);
  if ($error) {
    form_set_error('your_email', $error);
  }
  elseif (user_load_by_mail($form_state['values']['your_email'])) {
    form_set_error('your_email', t('The e-mail address is already registered.'));
  }
}

/**
 * Handler submit form for quick_registration_form().
 */
function quick_registration_form_submit($form, &$form_state) {
  $new_name = preg_replace('/@.*$/', '', $form_state['values']['your_email']);
  $arguments = array(
    'name' => quick_registration_unique_username($new_name),
    'pass' => $form_state['values']['password'],
    'mail' => $form_state['values']['your_email'],
    'init' => $form_state['values']['your_email'],
    'roles' => array(DRUPAL_AUTHENTICATED_RID => TRUE),
  );
  if (variable_get('configurable_timezones', 1)) {
    $arguments['timezone'] = variable_get('date_default_timezone', @date_default_timezone_get());
  }
  if (variable_get('user_register', USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL) == 2) {
    $arguments['status'] = 0;
  }
  elseif (variable_get('user_register', USER_REGISTER_VISITORS) == 1) {
    $arguments['status'] = 1;
  }
  $user_settings = variable_get('quick_registration_settings', array());
  foreach ($user_settings as $key => $value) {
    if ($user_settings[$key] == 'default') {
      continue;
    }
    switch ($key) {
      case 'first_name':
        $arguments[$value] = array(LANGUAGE_NONE => array(0 => array('value' => $form_state['values']['first_name'])));
        break;

      case 'last_name':
        $arguments[$value] = array(LANGUAGE_NONE => array(0 => array('value' => $form_state['values']['last_name'])));
        break;

      case 'gender':
        $arguments[$value] = array(LANGUAGE_NONE => array(0 => $form_state['values']['gender']));
        break;

      case 'birthday':
        $arguments[$value] = array(
          LANGUAGE_NONE => array(
            0 => array(
              'value' => date('Y-m-d H:i:s', mktime(0, 0, 0, $form_state['values']['birthday']['month'], $form_state['values']['birthday']['day'], $form_state['values']['birthday']['year'])),
            ),
          ),
        );
        break;

      default:
        break;
    }
  }
  $account = user_save(NULL, $arguments);
  if (!$account) {
    drupal_set_message(t('Error registration. Please try again.'), 'error');
    return;
  }
  $user_register_type = variable_get('user_register', USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL);
  switch ($user_register_type) {
    case 1:
      global $user;
      $user = $account;
      user_login_finalize();
      _user_mail_notify('register_no_approval_required', $account);
      break;

    case 2:
      _user_mail_notify('register_pending_approval', $account);
      break;

    default:
      break;
  }
  drupal_set_message(t('Successful registration.'));
}

/**
 * Return a legal, unique username.
 */
function quick_registration_unique_username($name) {
  $name = preg_replace('/[^\x{80}-\x{F7} a-zA-Z0-9@_.\'-]/', '', $name);
  $name = trim($name);
  $name = preg_replace('/ +/', '_', $name);
  $name = ('' === $name) ? t('user') : $name;
  $name = (drupal_strlen($name) > (USERNAME_MAX_LENGTH - 10)) ? drupal_substr($name, 0, USERNAME_MAX_LENGTH - 11) : $name;
  $i = 0;
  $frame = 50;
  do {
    $found = db_query("SELECT name FROM {users} WHERE name LIKE :name ORDER BY length(name),name LIMIT $i,$frame", array(':name' => $name . '%'))->fetchCol();
    $found = array_flip($found);
    do {
      $newname = ($i == 0) ? $name : $name . '_' . $i;
      $i++;
    } while (isset($found[$newname]));
    $i--;
  } while ((count($found) == $frame) && ($i % $frame == 0));
  return $newname;
}

/**
 * Returns the form settings page.
 */
function quick_registration_settings_form($form = NULL, &$form_state = NULL) {
  if (variable_get('user_register', USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL) == USER_REGISTER_ADMINISTRATORS_ONLY) {
    drupal_set_message(t('Currently only administrators can create new user accounts. Either change the "Who can register accounts?" option under "Account settings" tab or at the core <a href="@link">Account settings</a>.',
      array('@link' => url('admin/config/people/accounts'))), 'warning');
  }
  $reg_values = variable_get('quick_registration_settings', array());
  $user_fields = quick_registration_category_value();
  $form['#attached']['css'] = array(
    drupal_get_path('module', 'quick_registration') . '/css/quick-registration-settings-form.css',
  );

  $form['#attributes'] = array(
    'class' => array('quick-registration-settings'),
  );

  $form['description'] = array(
    '#markup' => '<div class="quick-registration-description description">' . t('Please indicate in which user field the information from the registration unit will be recorded. The user must create a field to enter data.') . '</div>',
  );

  $form['first_name'] = array(
    '#type' => 'select',
    '#title' => t('First name'),
    '#options' => isset($user_fields['textfield']) ? $user_fields['textfield'] : $user_fields['textfield']['default'],
    '#default_value' => isset($reg_values['first_name']) ? $reg_values['first_name'] : $user_fields['textfield']['default'],
  );

  $form['last_name'] = array(
    '#type' => 'select',
    '#title' => t('Last name'),
    '#options' => isset($user_fields['textfield']) ? $user_fields['textfield'] : $user_fields['textfield']['default'],
    '#default_value' => isset($reg_values['last_name']) ? $reg_values['last_name'] : $user_fields['textfield']['default'],
  );

  $form['gender'] = array(
    '#type' => 'select',
    '#title' => t('Gender:'),
    '#options' => isset($user_fields['select']) ? $user_fields['select'] : $user_fields['select']['default'],
    '#default_value' => isset($reg_values['gender']) ? $reg_values['gender'] : $user_fields['select']['default'],
  );

  if (module_exists('date')) {
    $form['birthday'] = array(
      '#type' => 'select',
      '#title' => t('Birthday:'),
      '#options' => isset($user_fields['date']) ? $user_fields['date'] : $user_fields['date']['default'],
      '#default_value' => isset($reg_values['birthday']) ? $reg_values['birthday'] : $user_fields['date']['default'],
    );
  }

  if (!isset($user_fields['textfield']['qr_first_name']) || !isset($user_fields['textfield']['qr_last_name']) ||
    !isset($user_fields['select']['qr_gender']) || (module_exists('date') && !isset($user_fields['date']['qr_birthday']))) {
    $form['create_new_fields'] = array(
      '#type' => 'fieldset',
      '#title' => t('Сreate new fields for quick registration'),
      '#collapsed' => TRUE,
      '#collapsible' => TRUE,
    );

    $form['create_new_fields']['#attributes'] = array(
      'class' => array('quick-registration-settings-create-new-fields'),
    );

    $form['create_new_fields']['description'] = array(
      '#markup' => '<div class="quick-registration-create-new-fields-description description">' . t('You can create new fields automatically. Visit the account settings <a href="/admin/config/people/accounts/fields">page</a> to create a field manually.') . '</div>',
    );

    if (!isset($user_fields['textfield']['qr_first_name'])) {
      $form['create_new_fields']['qr_first_name'] = array(
        '#type' => 'checkbox',
        '#title' => t('First name'),
        '#default_value' => FALSE,
      );
    }

    if (!isset($user_fields['textfield']['qr_last_name'])) {
      $form['create_new_fields']['qr_last_name'] = array(
        '#type' => 'checkbox',
        '#title' => t('Last name'),
        '#default_value' => FALSE,
      );
    }

    if (!isset($user_fields['select']['qr_gender'])) {
      $form['create_new_fields']['qr_gender'] = array(
        '#type' => 'checkbox',
        '#title' => t('Gender'),
        '#default_value' => FALSE,
      );
    }
  }

  if (module_exists('date') && !isset($user_fields['date']['qr_birthday'])) {
    $form['create_new_fields']['qr_birthday'] = array(
      '#type' => 'checkbox',
      '#title' => t('Birthday'),
      '#default_value' => FALSE,
    );
  }

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );

  $form['actions']['#attributes'] = array(
    'class' => array('quick-registration-settings-submit'),
  );
  return $form;
}

/**
 * Returns options in the form settings page.
 */
function quick_registration_category_value() {
  $user_fields = array();

  $user_fields['date'] = array('default' => t('Empty'));
  $user_fields['select'] = array('default' => t('Empty'));
  $user_fields['textfield'] = array('default' => t('Empty'));
  foreach (field_info_instances('user', 'user') as $field_info) {
    if ($field_info['widget']['type'] == 'date_text' || $field_info['widget']['type'] == 'date_select') {
      $user_fields['date'][$field_info['field_name']] = $field_info['label'];
    }
    if ($field_info['widget']['type'] == 'options_select' || $field_info['widget']['type'] == 'options_buttons') {
      $user_fields['select'][$field_info['field_name']] = $field_info['label'];
    }
    if ($field_info['widget']['type'] == 'text_textfield') {
      $user_fields['textfield'][$field_info['field_name']] = $field_info['label'];
    }
  }
  return $user_fields;
}

/**
 * Handler validate form for quick_registration_settings_form().
 */
function quick_registration_settings_form_validate(&$form = NULL, &$form_state = NULL) {
  $fields_form = array(
    'first_name',
    'last_name',
    'gender',
    'birthday',
  );
  $counts = array();
  $keys_fields = array();

  foreach ($fields_form as $element) {
    if (!isset($form_state['values'][$element]) || $form_state['values'][$element] == 'default') {
      continue;
    }
    $setpoint = $form_state['values'][$element];
    $counts[$setpoint] = (isset($counts[$setpoint]) ? $counts[$setpoint] + 1 : 1);
    $keys_fields[$element] = $setpoint;
  }
  foreach ($counts as $setpoint => $count) {
    if ($count > 1) {
      foreach ($keys_fields as $key => $value) {
        if ($value == $setpoint) {
          form_set_error($key, t('Set a unique value - @key ', array('@key' => $key)));
        }
      }
    }
  }
}

/**
 * Handler submit form for quick_registration_settings_form().
 */
function quick_registration_settings_form_submit(&$form, &$form_state) {
  foreach ($form_state['values'] as $key => $value) {
    if ($value == 1) {
      switch ($key) {
        case 'qr_first_name':
          if (!field_info_field($key)) {
            $field = array(
              'field_name' => $key,
              'type' => 'text',
              'settings' => array(
                'max_length' => 255,
              ),
            );
            field_create_field($field);
          }
          if (!field_info_instance('user', $key, 'user')) {
            $instance = array(
              'field_name' => $key,
              'entity_type' => 'user',
              'label' => 'First name',
              'bundle' => 'user',
              'widget' => array(
                'type' => 'text_textfield',
              ),
              'display' => array(
                'default' => array(
                  'type' => 'text_default',
                ),
              ),
            );
            field_create_instance($instance);
          }
          if ($form_state['values']['first_name'] == 'default') {
            $form_state['values']['first_name'] = $key;
          }
          break;

        case 'qr_last_name':
          if (!field_info_field($key)) {
            $field = array(
              'field_name' => $key,
              'type' => 'text',
              'settings' => array(
                'max_length' => 255,
              ),
            );
            field_create_field($field);
          }
          if (!field_info_instance('user', $key, 'user')) {
            $instance = array(
              'field_name' => $key,
              'entity_type' => 'user',
              'label' => 'Last name',
              'bundle' => 'user',
              'widget' => array(
                'type' => 'text_textfield',
              ),
              'display' => array(
                'default' => array(
                  'type' => 'text_default',
                ),
              ),
            );
            field_create_instance($instance);
          }
          if ($form_state['values']['last_name'] == 'default') {
            $form_state['values']['last_name'] = $key;
          }
          break;

        case 'qr_gender':
          if (!field_info_field($key)) {
            $field = array(
              'field_name' => $key,
              'type' => 'list_text',
              'settings' => array(
                'allowed_values' => array(
                  0 => 'Female',
                  1 => 'Male',
                ),
              ),
            );
            field_create_field($field);
          }
          if (!field_info_instance('user', $key, 'user')) {
            $instance = array(
              'field_name' => $key,
              'entity_type' => 'user',
              'label' => 'Gender',
              'bundle' => 'user',
              'widget' => array(
                'type' => 'options_select',
              ),
              'display' => array(
                'default' => array(
                  'type' => 'list_default',
                ),
              ),
            );
            field_create_instance($instance);
          }
          if ($form_state['values']['gender'] == 'default') {
            $form_state['values']['gender'] = $key;
          }
          break;

        case 'qr_birthday':
          if (!field_info_field($key)) {
            $field = array(
              'field_name' => $key,
              'type' => 'datetime',
              'settings' => array(
                'granularity' => drupal_map_assoc(array('year', 'month', 'day')),
              ),
            );
            field_create_field($field);
          }
          if (!field_info_instance('user', $key, 'user')) {
            $instance = array(
              'field_name' => $key,
              'entity_type' => 'user',
              'label' => 'Birthday',
              'bundle' => 'user',
              'settings' => array(
                'default_value' => 'blank',
              ),
              'widget' => array(
                'type' => 'date_popup',
              ),
              'display' => array(
                'default' => array(
                  'type' => 'date_default',
                ),
              ),
            );
            field_create_instance($instance);
          }
          if ($form_state['values']['birthday'] == 'default') {
            $form_state['values']['birthday'] = $key;
          }
          break;

        default:
          break;
      }
    }
  }
  form_state_values_clean($form_state);
  variable_set('quick_registration_settings', $form_state['values']);
  drupal_set_message(t('Successful save.'));
}
