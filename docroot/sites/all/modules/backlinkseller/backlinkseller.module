<?php

/**
 * @file
 * Backlinkseller integration.
 */

/**
 * Implements hook_help().
 */
function backlinkseller_help($path, $arg) {
  if ($path == 'admin/help#backlinkseller') {
    return '<p>' . t('Display links from Backlinkseller.de') . '</p>';
  }
}

/**
 * Implements hook_menu().
 */
function backlinkseller_menu() {
  $items = array();

  $items['admin/config/advertisement/backlinkseller'] = array(
    'title' => 'Backlinkseller',
    'description' => 'Configuration for Backlinkseller module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('backlinkseller_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'backlinkseller.admin.inc',
  );

  $items['admin/config/advertisement/backlinkseller/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
  );

  $items['admin/config/advertisement/backlinkseller/affiliate'] = array(
    'title' => 'Affiliate',
    'description' => 'Configuration for Backlinkseller affiliate block',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('backlinkseller_affiliate_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'backlinkseller.admin.inc',
    'weight' => 0,
  );

  return $items;
}

/**
 * Implements hook_block_info().
 */
function backlinkseller_block_info() {
  $blocks = array();

  // Register block for the backlinks.
  $blocks['backlinkseller'] = array(
    'info' => t('Backlinkseller'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );

  // Register block for the affiliate banner.
  $blocks['backlinkseller-affiliate'] = array(
    'info' => t('Backlinkseller (Affiliate)'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );

  return $blocks;
}

/**
 * Set the block content.
 *
 * @param string $delta
 *   Which block to render. This is a unique identifier for the block.
 *
 * @return array
 *   An array containing the following elements:
 *   - subject: The default localized title of the block. If the block does not
 *     have a default title, this should be set to NULL.
 *   - content: The content of the block's body. This may be a renderable array
 *     (preferable) or a string containing rendered HTML content.
 */
function backlinkseller_block_view($delta = '') {
  $block = array();

  switch ($delta) {

    case 'backlinkseller':
      $block = array(
        'subject' => '',
        'content' => _backlinkseller_advertisements_block_content(),
      );
      break;

    case 'backlinkseller-affiliate':
      $block = array(
        'subject' => '',
        'content' => _backlinkseller_affiliate_block_content(),
      );
      break;
  }

  return $block;
}

/**
 * Create the content of the affiliate block.
 *
 * @return bool|string
 *   HTML for the affiliate block or FALSE
 */
function _backlinkseller_affiliate_block_content() {
  $affiliate_id = intval(variable_get('backlinkseller_affiliate_id'));

  if ($affiliate_id) {

    $image_base_path = variable_get('file_public_path', conf_path() . '/files/');
    $image = theme('image', array(
      'path' => $image_base_path . md5('backlinkseller') . '.gif',
      'alt' => check_plain(variable_get('backlinkseller_affiliate_banner_alt', '')),
    ));

    $result = l($image, 'http://www.backlinkseller.de/', array(
      'html' => TRUE,
      'query' => array('referrer' => $affiliate_id),
      'attributes' => array(
        'title' => check_plain(variable_get('backlinkseller_affiliate_link_title', '')),
        'target' => '_blank',
      ),
    ));

    return $result;
  }

  return FALSE;
}

/**
 * Create the content of the backlink block.
 *
 * @return bool|string
 *   HTML for the backlink block or FALSE
 */
function _backlinkseller_advertisements_block_content() {
  $backlinkseller_id = check_plain(variable_get('backlinkseller_id'));

  if ($backlinkseller_id) {

    module_load_include('inc', 'backlinkseller');
    $backlinks = _backlinkseller_fetch_links();
    $allowed_before_after_tags = array(
      'li',
      'ul',
      'ol',
      'span',
      'div',
      'section',
      'header',
      'footer',
      'strong',
    );

    if (!empty($backlinks)) {
      $result = filter_xss(
        variable_get('backlinkseller_html_before_ads', '<div>'),
        $allowed_before_after_tags
      );

      $result .= filter_xss($backlinks, array(
        'li',
        'a',
        'span',
        'div',
        'br',
        'p',
        'hr',
        'strong',
        'b',
        'i',
        'em',
      ));

      $result .= filter_xss(
        variable_get('backlinkseller_html_after_ads', '</div>'),
        $allowed_before_after_tags
      );
    }

    return $result;
  }

  return FALSE;
}

/**
 * Implements hook_preprocess_block().
 */
function backlinkseller_preprocess_block(&$variables) {

  // Hide the module name for the output in the frontend.
  foreach ($variables['classes_array'] as $i => $class) {
    if (strpos($class, 'backlinkseller') !== FALSE) {
      unset($variables['classes_array'][$i]);
    }
  }

  switch ($variables['block_html_id']) {
    case 'block-backlinkseller-backlinkseller':
      $variables['block_html_id'] = drupal_html_id(variable_get('backlinkseller_html_block_id', md5(time())));
      break;

    case 'block-backlinkseller-backlinkseller-affiliate':
      $variables['block_html_id'] = drupal_html_id(variable_get('backlinkseller_affiliate_html_block_id',
        md5(time() + 60)));
      break;

    default:
      break;
  }
}
