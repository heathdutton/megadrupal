<?php
/**
 * @file
 * Code for the Donation feature.
 */

include_once 'crm_core_donation.features.inc';

define('CMCD_THANKS_EMAIL_TAG', variable_get('crm_core_donation_thanks_email_tag', 'CRM Core Donation Thank You Message'));

/**
 * Implements hook_permission().
 */
function crm_core_donation_permission() {
  return array(

    'administer crm core donation' => array(
      'title' => t('Administer CRM Core Donation'),
      'description' => t('Provides access to tools for administering CRM Core Donation.'),
    ),
    'view donation reports' => array(
      'title' => t('View donation reports'),
      'description' => t('Provides access to donation reports.'),
    ),
    'view donation summary report' => array(
      'title' => t('View donation overview report'),
      'description' => t('Provides access to the donation overview report.'),
    ),
    'view donation details report' => array(
      'title' => t('View donation details report'),
      'description' => t('Provides access to the donation details report.'),
    ),
    'view donation page details report' => array(
      'title' => t('View donation page details report'),
      'description' => t('Provides access to the donation page details report.'),
    ),
    'view donation source details report' => array(
      'title' => t('View donation source details report'),
      'description' => t('Provides access to the donation source details report.'),
    ),
    'view donation source summary report' => array(
      'title' => t('View donation source summary report'),
      'description' => t('Provides access to the donation source summary report.'),
    ),
    'view donor reports' => array(
      'title' => t('View donor reports'),
      'description' => t('Provides access to donation reports.'),
    ),

  );
}

/**
 * Implements hook_menu().
 */
function crm_core_donation_menu() {

  $items = array();

  $items['admin/structure/crm-core/cmcd'] = array(
    'title' => 'Donations',
    'description' => 'Manage donation pages.',
    'position' => 'left',
    'page callback' => 'views_embed_view',
    'page arguments' => array('cmcd_page_manager'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
  );

  // Donation management page.
  $items['admin/structure/crm-core/cmcd/cmcd-pages'] = array(
    'title' => 'Manage Donation Pages',
    'description' => 'Manage donation pages.',
    'access arguments' => array('administer site configuration'),
    // Provide the path to the views module.
    'file path' => drupal_get_path('module', 'views'),
    // Provide the name of the file in which views_embed_view() is defined.
    'file' => 'views.module',
  );

  // Configuration settings for CRM Core Donation.
  $items['admin/config/crm-core/cmcd'] = array(
    'title' => 'Donations',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('crm_core_donation_admin_general_settings_form'),
    'file' => 'crm_core_donation.admin.inc',
    'access arguments' => array('administer crm core donation'),
    'description' => 'Provides controls for general behaviors of donations, the appearance of reports, etc.',
  );

  // General settings page for CRM Core Donation.
  $items['admin/config/crm-core/cmcd/settings'] = array(
    'title' => 'General Settings',
    'description' => 'Configure settings for CRM Core Donations.',
    'position' => 'left',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  // Settings page for reports in CRM Core Donation.
  $items['admin/config/crm-core/cmcd/reports'] = array(
    'title' => 'Reports Settings',
    'description' => 'Configure settings for reports in CRM Core Donations.',
    'position' => 'left',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('crm_core_donation_admin_report_settings_form'),
    'file' => 'crm_core_donation.admin.inc',
    'access arguments' => array('administer crm core donation'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_crm_core_report_register().
 */
function crm_core_donation_crm_core_report_register() {

  $reports = array(
    'cmcd' => array(
      'title' => t('Donations'),
      'reports' => array(),
      'widgets' => array(),
    ),
    'cmcd-donors' => array(
      'title' => t('Donors'),
      'reports' => array(),
      'widgets' => array(),
    ),
  );

  // Donations overview page.
  $reports['cmcd']['reports']['cmcd_overview'] = array(
    'title' => t('Donations Overview'),
    'path' => 'crm-core/reports/cmcd',
    'description' => t('Provides a quick overview of donation activity in the system.'),
  );

  // Donations overview - by source.
  $reports['cmcd']['reports']['cmcd_source_overview'] = array(
    'title' => t('Donation Source Overview'),
    'path' => 'crm-core/reports/cmcd/donation-sources',
    'description' => t('Details on donations received through online donation pages.'),
  );

  // Donations page details page.
  $reports['cmcd']['reports']['cmcd_page_details'] = array(
    'title' => t('Online Donation Pages'),
    'path' => 'crm-core/reports/cmcd/donation-pages',
    'description' => t('Details on donations received through online donation pages.'),
  );

  // Donation details page.
  $reports['cmcd']['reports']['cmcd_details'] = array(
    'title' => t('Donation Details'),
    'path' => 'crm-core/reports/cmcd/cmcd-details',
    'description' => t('Details on donations recorded in the system. Can be filtered by donation source.'),
  );

  // Donor overview page.
  $reports['cmcd-donors']['reports']['cmcd_donors'] = array(
    'title' => t('Donor Overview'),
    'path' => 'crm-core/reports/cmcd-donors/donors',
    'description' => t('Overview of donor activity.'),
  );

  // Donor details page.
  $reports['cmcd-donors']['reports']['cmcd_donor_details'] = array(
    'title' => t('Donor Details'),
    'path' => 'crm-core/reports/cmcd-donors/details',
    'description' => t('Details on donors, including filters for sorting by total amount donated and time of last donation.'),
  );

  // LYBUNT report.
  $reports['cmcd-donors']['reports']['cmcd_donor_lybunt'] = array(
    'title' => t('LYBUNT'),
    'path' => 'crm-core/reports/cmcd-donors/lybunt',
    'description' => t('Last Year But Unfortunately Not This Year report.'),
  );

  // SYBUNT report.
  $reports['cmcd-donors']['reports']['cmcd_donor_sybunt'] = array(
    'title' => t('SYBUNT'),
    'path' => 'crm-core/reports/cmcd-donors/sybunt',
    'description' => t('Some Year But Unfortunately Not This Year report.'),
  );

  return $reports;
}

/**
 * Implements hook_node_view_alter().
 */
function crm_core_donation_node_view_alter(&$build) {

  // If the following things are true:
  // - we are viewing a donation page,
  // - there is a profile form attached
  // - the profile includes a donation activity
  // - the profile has a field for donation page
  // Then please kindly prepopulate the value of the form field.
  if (arg(1) === $build['#node']->nid && isset($build['crm_core_profile']) && $build['#node']->type == 'cmcd_page' && isset($build['crm_core_profile']['field_cmcd_page'])) {
    $build['crm_core_profile']['field_cmcd_page'][LANGUAGE_NONE][0]['target_id']['#default_value'] = $build['#node']->title . ' (' . $build['#node']->nid . ')';
    $build['crm_core_profile']['field_cmcd_page'][LANGUAGE_NONE][0]['target_id']['#value'] = $build['#node']->title . ' (' . $build['#node']->nid . ')';
    $build['crm_core_profile']['field_cmcd_page'][LANGUAGE_NONE][0]['value']['#default_value'][0] = $build['#node']->nid;
  }
}

/**
 * Implements hook_form_alter().
 */
function crm_core_donation_form_alter(&$form, &$form_state) {
  if ($node = menu_get_object()) {
    if (isset($form['field_cmcd_page'])) {
      $form['field_cmcd_page'][LANGUAGE_NONE][0]['target_id']['#default_value'] = $node->title . ' (' . $node->nid . ')';
      $form['field_cmcd_page'][LANGUAGE_NONE][0]['target_id']['#value'] = $node->title . ' (' . $node->nid . ')';
      $form['field_cmcd_page'][LANGUAGE_NONE][0]['value']['#default_value'][0] = $node->nid;
    }
  }
}

/**
 * Implements hook_preprocess_page().
 */
function crm_core_donation_preprocess_page(&$vars) {

  if (arg(0) == 'crm-core' && arg(1) == 'reports' && arg(2) == 'cmcd') {
    $breadcrumb = array(
      l(t('Home'), '<front>'),
      l(t('CRM Core'), 'crm-core'),
      l(t('Reports'), 'crm-core/reports'),
    );
    if (arg(3) == 'overview' || arg(3) == '') {
      drupal_set_title(t('Donation Reports'));
    }
    elseif (arg(3) == 'donation-sources' && arg(4) == 'summary') {
      $breadcrumb[] = l(t('Donation Reports'), 'crm-core/reports/cmcd');
      $breadcrumb[] = l(t('Donation Sources'), 'crm-core/reports/cmcd/donation-sources');
    }
    elseif (arg(3) == 'donation-pages' && arg(4) == 'summary') {
      $breadcrumb[] = l(t('Donation Reports'), 'crm-core/reports/cmcd');
      $breadcrumb[] = l(t('Online Donation Pages'), 'crm-core/reports/cmcd/donation-pages');
    }
    elseif (arg(3) == 'donation-pages' && arg(4) == 'details') {
      $breadcrumb[] = l(t('Donation Reports'), 'crm-core/reports/cmcd');
      $breadcrumb[] = l(t('Online Donation Pages'), 'crm-core/reports/cmcd/donation-pages');
    }
    elseif (arg(4) == '') {
      $breadcrumb[] = l(t('Donation Reports'), 'crm-core/reports/cmcd');
    }
    drupal_set_breadcrumb($breadcrumb);
  }

  // Breadcrumbs for donor reports.
  if (arg(0) == 'crm-core' && arg(1) == 'reports' && arg(2) == 'cmcd-donors') {
    $breadcrumb = array(
      l(t('Home'), '<front>'),
      l(t('CRM Core'), 'crm-core'),
      l(t('Reports'), 'crm-core/reports'),
    );
    if (arg(3) == 'donors' || arg(3) == '') {
      drupal_set_title(t('Donor Reports'));
    }
    elseif (arg(3) == 'details') {
      $breadcrumb[] = l(t('Donor Reports'), 'crm-core/reports/cmcd/cmcd-donors');
    }
    elseif (arg(3) == 'lybunt') {
      $breadcrumb[] = l(t('Donor Reports'), 'crm-core/reports/cmcd/cmcd-donors');
    }
    elseif (arg(3) == 'sybunt') {
      $breadcrumb[] = l(t('Donor Reports'), 'crm-core/reports/cmcd/cmcd-donors');
    }

    drupal_set_breadcrumb($breadcrumb);
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function crm_core_donation_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/' . $plugin_type;
  }
}

/**
 * Implements hook_block_info().
 */
function crm_core_donation_block_info() {

  $blocks = array();

  $blocks['cmcd_date_year_chooser'] = array(
    'info' => t('Date year chooser'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Generates a form used to select dates in various reports.
 */
function crm_core_donation_year_select_form() {

  $form = array();

  $options = array();
  $current = date('Y');

  for ($i = 0; $i < 5; $i++) {
    $options[] = $current - $i;
  }

  if (isset($_GET['year_select'])) {
    $current = $_GET['year_select'];
  }

  $form['year_select'] = array(
    '#type' => 'select',
    '#title' => t('Select year'),
    '#options' => array(drupal_map_assoc($options)),
    '#default_value' => $current,
    '#description' => t('Please select the year for which to run the report.'),
  );

  $form['#method'] = 'get';

  $form['submit'] = array('#type' => 'submit', '#value' => t('Apply'));

  return $form;
}

/**
 * Implements hook_block_view().
 */
function crm_core_donation_block_view($delta = '') {

  $block = array();

  switch ($delta) {

    case 'cmcd_date_year_chooser':
      $form = drupal_get_form('crm_core_donation_year_select_form');

      $block['subject'] = '';
      $block['content'] = drupal_render($form);

      break;
  }

  return $block;
}

/**
 * Implements hook_views_query_alter().
 */
function crm_core_donation_views_query_alter(&$view, &$query) {

  // For crm core donation reports some views are altered, based on the
  // complexity of the view logic when a view is being altered, it is
  // identified by a query tag.
  if (isset($query->options['query_tags'][0]) && ($query->options['query_tags'][0] == 'crm_core_donation_donor_lybunt' || $query->options['query_tags'][0] == 'crm_core_donation_donor_sybunt')) {

    // Handle lybunt and sybunt reports we are simply comparing dates in the
    // query to find the appropriate records for both
    // reports, we are interested in contacts who have not donated this year
    // to find them, we are taking the max received date and comparing it to the
    // current year for lybunt reports, results are limited to those from the
    // last year for synbunt reports, there is no limit.
    if (isset($_GET['year_select'])) {
      $this_year = check_plain($_GET['year_select']);
    }
    else {
      $this_year = date('Y');
    }
    $last_year = $this_year - 1;

    // For lybunt reports, add in criteria for this year field name is
    // field_data_field_cmcd_receive_date.field_cmcd_receive_date_value.
    $view->query->add_where("0", "field_data_field_cmcd_receive_date.field_cmcd_receive_date_value", "$this_year-01-01 00:00:00", "<");
    if ($query->options['query_tags'][0] == 'crm_core_donation_donor_lybunt') {
      $view->query->add_where("0", "field_data_field_cmcd_receive_date.field_cmcd_receive_date_value", "$last_year-01-01 00:00:00", ">");
      $view->build_info['title'] = 'LYBUNT Report for ' . $this_year;
    }
    else {
      $view->build_info['title'] = 'SYBUNT Report for ' . $this_year;
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 *
 * @todo: Remove once http://drupal.org/node/1450910#comment-7342652 has been fixed.
 */
function crm_core_donation_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'commerce_line_item_type_info_alter') {
    // Remove alter hook from commerce_features, it breaks things.
    unset($implementations['commerce_features']);
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function crm_core_donation_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  switch ($root_path) {
    case 'admin/structure/crm-core/cmcd':
    case 'admin/structure/crm-core/cmcd/cmcd-pages':
      $item = menu_get_item('node/add/cmcd-page');
      if ($item['access']) {
        $item['title'] = 'Add Donation Page';
        $item['localized_options']['query'] = array('destination' => 'admin/structure/crm-core/cmcd');
        $data['actions']['output'][] = array(
          '#theme' => 'menu_local_action',
          '#link' => $item,
        );
      }
      break;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function crm_core_donation_form_crm_core_profile_entry_form_alter(&$form, &$form_state, $form_id) {
  $form['#submit'][101] = 'crm_core_donation_submit_handler';
  $donation_page = menu_get_object();
  if (is_object($donation_page) && $donation_page->type == 'cmcd_page') {
    $profile = $form_state['profile'];
    if (isset($profile->fields['commerce_product_commerce_product_commerce_items_amount_single'])
    && !empty($profile->fields['commerce_product_commerce_product_commerce_items_amount_single']['status'])) {
      $donation_config = crm_core_donation_load_node_config($donation_page->nid);
      if ($donation_config) {
        $amounts = crm_core_profile_commerce_items_parse_amounts($donation_config->recommended_amounts);
        $amount_config = $profile->entities['commerce_product']['commerce_items_amount_single_settings'];
        // We have only one recommended amount set.
        if (count($amounts) == 1) {
          $amount = array_shift($amounts);

          switch ($amount_config['amount_config']) {
            // Replacing static amount value and display with recommended.
            case CCPCI_AMOUNT_STATIC:
              $form['commerce_amount_single']['#value'] = $amount;
              $form['commerce_amount_single_display']['#markup'] = _crm_core_profile_commerce_items_currency_format($amount);
              break;

            case CCPCI_AMOUNT_VARIABLE:
              // Replacing default amount value.
              $form['commerce_amount_single']['#default_value'] = $amount;
              break;

            case CCPCI_AMOUNT_VARIABLE_BUTTONS:
              // Replacing default amount value end removing recommended buttons.
              $form['commerce_amount_single']['#default_value'] = $amount;
              unset($form['commerce_amount_single']['#prefix']);
              break;
          }
        }
        // We have more then one recommended amount set.
        elseif (count($amounts) > 1) {

          switch ($amount_config['amount_config']) {
            case CCPCI_AMOUNT_STATIC:
              // Nothing to do here.
              break;

            case CCPCI_AMOUNT_VARIABLE:
              // Nothing to do here.
              break;

            case CCPCI_AMOUNT_VARIABLE_BUTTONS:
              // Replacing buttons with recommended amounts.
              $form['commerce_amount_single']['#prefix'] = theme('crm_core_profile_commerce_items_amount_buttons', array('amounts' => $amounts));
              break;
          }
        }
      }
    }
  }
}

/**
 * Fires every time someone makes a donation.
 */
function crm_core_donation_submit_handler($form, &$form_state) {
  // Load the node being used to house the donation.
  $donation_page = menu_get_object();

  // Check to make sure we are working with a donation page.
  if (is_object($donation_page) && $donation_page->type == 'cmcd_page') {
    // Get the donation node configuration.
    $donation_config = crm_core_donation_load_node_config($donation_page->nid);

    $donor = isset($form_state['crm_core_contact']) ? $form_state['crm_core_contact'] : NULL;

    $email_to = crm_core_contact_get_primary_field_value($donor, 'email');

    $donation = isset($form_state['crm_core_activity']) ? $form_state['crm_core_activity'] : NULL;

    if (isset($donor) && isset($donation) && !empty($donation_config->thanks_email) && !empty($email_to)) {
      $donation_wrapper = entity_metadata_wrapper('crm_core_activity', $donation);

      $amount = $donation_wrapper->field_cmcd_amount->value();

      rules_invoke_component($donation_config->thanks_email, $email_to, $donor, $donation_page, $amount);
    }
  }
}

/**
 * Loads rules components with specified tag name.
 *
 * @param string $rule_set_tag
 *   Tag name.
 *
 * @return array
 *   Array of rules components keyed by machine name.
 */
function _crm_core_donation_load_rules_components_by_tag($rule_set_tag) {

  $rules_config_ids = db_select('rules_tags', 'rt')
    ->fields('rt', array('id'))
    ->condition('tag', $rule_set_tag)
    ->execute()
    ->fetchCol();

  return empty($rules_config_ids) ? array() : rules_get_components(TRUE, NULL, array('id' => $rules_config_ids));
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function crm_core_donation_form_node_form_alter(&$form, $form_state) {

  $node = $form['#node'];

  if ($node->type == 'cmcd_page') {
    $form['crm_core_donation'] = array(
      '#title' => t('CRM Core Donation'),
      '#type' => 'fieldset',
      '#group' => 'additional_settings',
      '#attached' => array(
        'js' => array(
          drupal_get_path('module', 'crm_core_donation') . '/js/vertical_tab.js',
        ),
      ),
    );

    $node_config = isset($node->nid) ? crm_core_donation_load_node_config($node->nid) : FALSE;

    $rule_set_tag = CMCD_THANKS_EMAIL_TAG;
    $rules_components = _crm_core_donation_load_rules_components_by_tag($rule_set_tag);
    $form['crm_core_donation']['thanks_email'] = array(
      '#type' => 'select',
      '#title' => t('Thank you email message:'),
      '#default_value' => empty($node_config) ? variable_get('crm_core_donation_default_thanks_rule', '') : $node_config->thanks_email,
      '#empty_option' => t('--Please Select--'),
      '#empty_value' => '',
      '#options' => $rules_components,
      '#description' => t('Optional. Use this field to select the email message to go out to the contact upon receipt of a donation.'),
    );

    $form['crm_core_donation']['recommended_amounts'] = array(
      '#type' => 'textarea',
      '#title' => t('Recommended donation amounts:'),
      '#default_value' => empty($node_config) ? variable_get('crm_core_donation_default_recommended_amounts', '10,25,50,100') : $node_config->recommended_amounts,
      '#description' => t('Optional. Use this field to provide recommended amounts to commerce forms. For amount fields, enter a comma separated list of recommended donation amounts. For cart fields, please enter items in LABEL|AMOUNT format, one per line.'),
    );
  }
}

/**
 * Implements hook_node_insert().
 */
function crm_core_donation_node_insert($node) {
  if ($node->type == 'cmcd_page') {
    if (isset($node->thanks_email)) {
      $config = new stdClass();
      $config->nid = $node->nid;
      $config->thanks_email = $node->thanks_email;
      $config->recommended_amounts = $node->recommended_amounts;
      crm_core_donation_node_config_save($config);
    }
    elseif (isset($node->crm_core_donation_node_config)) {
      $config = $node->crm_core_donation_node_config;
      $uuid = $config['nid'];
      $nids = entity_get_id_by_uuid('node', array($uuid));
      if (isset($nids[$uuid])) {
        $config['nid'] = $nids[$uuid];
        crm_core_donation_node_config_save($config);
      }
    }
  }
}

/**
 * Saves nodes configuration.
 *
 * @param object $config
 *   Nodes configuration.
 */
function crm_core_donation_node_config_save($config) {
  $config = (array) $config;
  db_merge('crm_core_donation_nodes')
    ->condition('nid', $config['nid'])
    ->fields($config)
    ->execute();
}

/**
 * Implements hook_node_update().
 */
function crm_core_donation_node_update($node) {
  crm_core_donation_node_insert($node);
}

/**
 * Implements hook_node_delete().
 */
function crm_core_donation_node_delete($node) {
  if ($node->type == 'cmcd_page') {
    db_delete('crm_core_donation_nodes')
      ->condition('nid', $node->nid)
      ->execute();
  }
}

/**
 * Load node config.
 *
 * @param int $nid
 *   Node ID.
 *
 * @return object|FALSE
 *   Returns nodes configuration, if saved, FALSE otherwise.
 */
function crm_core_donation_load_node_config($nid) {
  $cache =& drupal_static(__FUNCTION__, array());
  if (empty($cache[$nid])) {
    $cache[$nid] = db_select('crm_core_donation_nodes', 'c')
      ->condition('nid', $nid)
      ->fields('c')
      ->execute()->fetchObject();
  }

  return empty($cache[$nid]) ? FALSE : $cache[$nid];
}

/**
 * Implements hook_field_formatter_info().
 *
 * Adding formatter to display amount field with default currency.
 */
function crm_core_donation_field_formatter_info() {
  return array(
    'crm_core_donation_amount' => array(
      'label' => t('CRM Core Donation amount'),
      'field types' => array('number_decimal', 'number_float', 'number_integer'),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function crm_core_donation_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];

  $summary = array();
  if ($display['type'] == 'crm_core_donation_amount') {
    $summary[] = t('Display integer, float and decimal values formatted with default currency.');
    $summary[] = commerce_currency_format(999.99, commerce_default_currency(), NULL, FALSE);
  }

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 */
function crm_core_donation_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'crm_core_donation_amount':
      foreach ($items as $delta => $item) {
        $output = commerce_currency_format($item['value'], commerce_default_currency(), NULL, FALSE);
        $element[$delta] = array('#markup' => $output);
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_uuid_node_features_export_render_alter().
 *
 * Adding node configuration to export.
 */
function crm_core_donation_uuid_node_features_export_render_alter(&$export, $node, $module) {
  if ($export->type == 'cmcd_page') {
    $nids = entity_get_id_by_uuid('node', array($node->uuid));
    $config = crm_core_donation_load_node_config($nids[$node->uuid]);
    if ($config !== FALSE) {
      $config->nid = $node->uuid;
      $export->crm_core_donation_node_config = $config;
    }
  }
}

/**
 * Implements hook_entity_uuid_load().
 */
function crm_core_donation_entity_uuid_load(&$entities, $entity_type) {
  if ($entity_type == 'node') {
    foreach ($entities as $nid => $node) {
      $config = crm_core_donation_load_node_config($nid);
      if ($config !== FALSE) {
        $config->nid = $node->uuid;
        $entities[$nid]->crm_core_donation_node_config = $config;
      }
    }
  }
}

/**
 * Implements hook_entity_uuid_save().
 */
function crm_core_donation_entity_uuid_save(&$entity, $entity_type) {
  if ($entity_type == 'node') {
    if (isset($entity->crm_core_donation_node_config)) {
      $config = (array) $entity->crm_core_donation_node_config;
      $uuid = $config['nid'];
      $nids = entity_get_id_by_uuid('node', array($uuid));
      $config['nid'] = $nids[$uuid];
      crm_core_donation_node_config_save($config);
    }
  }
}
