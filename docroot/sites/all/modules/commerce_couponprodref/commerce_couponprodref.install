<?php
/**
 * @file
 * Install, update, and uninstall functions for the Commerce Coupon by product
 * reference module.
 */

/**
 * Implements hook_enable(). Ensures the product reference field exists and is
 * attached to appropriate coupon bundles.
 */
function commerce_couponprodref_enable() {
  commerce_couponprodref_ensure_my_fields();
}

/**
 * Implements hook_modules_enabled(). Responds to new coupon modules being
 * enabled, and adds the field to new coupon bundles. It also ensures the
 * rules_config cache is updated if percent coupons are enabled.
 */
function commerce_couponprodref_modules_enabled($modules) {
  if (in_array('commerce_coupon_pct', $modules)) {
    commerce_couponprodref_ensure_my_fields();
    // Rebuild rules_config because we provide an optional rules_config for
    // percent coupons.
    // @see commerce_couponprodref_default_rules_configuration()
    entity_defaults_rebuild(array('rules_config'));
  } elseif (in_array('commerce_coupon_fixed_amount', $modules)) {
    commerce_couponprodref_ensure_my_fields();
  }
}

/**
 * Implements hook_modules_disabled(). It ensures the rules_config cache is
 * updated if percent coupons are disabled.
 */
function commerce_couponprodref_modules_disabled($modules) {
  if (in_array('commerce_coupon_pct', $modules)) {
    // Rebuild rules_config because we provide an optional rules_config for
    // percent coupons.
    // @see commerce_couponprodref_default_rules_configuration()
    entity_defaults_rebuild(array('rules_config'));
  }
}

/**
 * Ensures the product reference field exists, and adds instances to the
 * commerce_coupon_fixed and commerce_coupon_pct bundles if available.
 */
function commerce_couponprodref_ensure_my_fields() {
  field_cache_clear();

  //check if the field exists already
  $field_name = 'field_commerce_couponprodref';
  $field = field_info_field($field_name);

  //if the field does not exist, create it
  if (empty($field)) {
    $field_config = commerce_couponprodref_field_config();
    $field = field_create_field($field_config);
  }

  $entity_type = 'commerce_coupon';

  if (module_exists('commerce_coupon_pct')) {
    $bundle = 'commerce_coupon_pct';
    $instance = field_info_instance($entity_type, $field_name, $bundle);
    if (empty($instance)) {
      $instance_config = commerce_couponprodref_field_instance($entity_type, $field_name, $bundle);
      $instance = field_create_instance($instance_config);
    }
  }

  if (module_exists('commerce_coupon_fixed_amount')) {
    $bundle = 'commerce_coupon_fixed';
    $instance = field_info_instance($entity_type, $field_name, $bundle);
    if (empty($instance)) {
      $instance_config = commerce_couponprodref_field_instance($entity_type, $field_name, $bundle);
      $instance = field_create_instance($instance_config);
    }
  }
}

/**
 * Provides the product reference field config.
 */
function commerce_couponprodref_field_config() {
  return array(
    'active' => '1',
    'cardinality' => '-1',
    'deleted' => '0',
    'entity_types' => array(),
    'field_name' => 'field_commerce_couponprodref',
    'foreign keys' => array(
      'commerce_product' => array(
        'columns' => array(
          'target_id' => 'product_id',
        ),
        'table' => 'commerce_product',
      ),
    ),
    'indexes' => array(
      'target_id' => array(
        0 => 'target_id',
      ),
    ),
    'locked' => '0',
    'module' => 'entityreference',
    'settings' => array(
      'handler' => 'base',
      'handler_settings' => array(
        'behaviors' => array(
          'views-select-list' => array(
            'status' => 0,
          ),
        ),
        'sort' => array(
          'direction' => 'ASC',
          'field' => 'commerce_price:amount',
          'property' => 'product_id',
          'type' => 'none',
        ),
        'target_bundles' => array(),
      ),
      'handler_submit' => 'Change handler',
      'target_type' => 'commerce_product',
    ),
    'translatable' => '0',
    'type' => 'entityreference',
  );
}

/**
 * Returns a field instance array for the values passed in.
 */
function commerce_couponprodref_field_instance($entity_type, $field_name, $bundle) {
    return array(
      'bundle' => $bundle,
      'default_value' => NULL,
      'deleted' => '0',
      'description' => '',
      'display' => array(
        'default' => array(
          'label' => 'above',
          'module' => 'entityreference',
          'settings' => array(
            'link' => FALSE,
          ),
          'type' => 'entityreference_label',
          'weight' => 9,
        ),
      ),
      'entity_type' => $entity_type,
      'field_name' => $field_name,
      'label' => 'Products',
      'required' => 0,
      'settings' => array(
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'entityreference',
        'settings' => array(
          'match_operator' => 'CONTAINS',
          'path' => '',
          'size' => '60',
        ),
        'type' => 'entityreference_autocomplete',
        'weight' => '9',
      ),
    );
}

/**
 * Ensures the product reference field exists and has appropriate instances.
 * Warns the user if Features is no longer needed.
 */
function commerce_couponprodref_update_7100() {

  commerce_couponprodref_ensure_my_fields();

  $data = system_rebuild_module_data();
  $dependents = array_keys($data['features']->required_by);
  $warn = TRUE;
  foreach ($dependents as $module) {
    if (module_exists($module)) {
      $warn = FALSE;
    }
  }

  if ($warn) {
    drupal_set_message(t("The Features module is no longer required by Commerce Coupon by product reference, and no other modules need it; if you aren't going to use it, <a href=\"!modules_url\">it should be uninstalled</a>.", array('!modules_url' => url('admin/modules'))));
  }
}
