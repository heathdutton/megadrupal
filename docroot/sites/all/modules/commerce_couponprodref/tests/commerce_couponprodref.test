<?php
/**
 * @file
 * Commerce Coupon by product reference tests.
 *
 * @todo Test fixed discount coupons.
 * @todo Test UI for adding coupon during checkout.
 */

/**
 * Base class for Commerce Coupon by Product Reference tests.
 */
abstract class CommerceCouponProductReferenceBaseTestCase extends CommerceBaseTestCase {

  /**
   * Dummy commerce_products and order.
   */
  protected $products = array();
  protected $order;

  /**
   * Required users.
   */
  protected $store_customer;

  /**
   * Descendents override this to specify what extra modules need to be enabled.
   *
   * @return array
   *   An array of module names
   */
  abstract protected function getAdditionalModules();

  public function setUp() {
    // Enable all non-ui commerce modules + commerce_couponprodref and
    // dependencies.
    $modules = parent::setUpHelper('api');
    $modules[] = 'commerce_cart';
    $modules[] = 'commerce_couponprodref';
    $modules = array_merge($modules, $this->getAdditionalModules());
    parent::setUp($modules);

    // User creation for different operations.
    $this->store_customer = $this->createStoreCustomer();

    // Create dummy products.
    $product_details = array(
      'PROD-01' => array('Product One', 1000),
      'PROD-02' => array('Product Two', 2000),
      'PROD-03' => array('Product Three', 3000),
      'PROD-04' => array('Product Four', 4000),
    );
    foreach ($product_details as $sku => $details) {
      list($name, $price) = $details;
      $this->products[$sku] = $this->createDummyProduct($sku, $name, $price);
    }

    // Create an order of all products except PROD-04.
    $ordered_products = array(
      $this->products['PROD-01']->product_id => 1,
      $this->products['PROD-02']->product_id => 1,
      $this->products['PROD-03']->product_id => 1,
    );
    $this->order = $this->createDummyOrder(
      $this->store_customer->uid,
      $ordered_products,
      'checkout'
    );

    // Set the default country to US.
    variable_set('site_default_country', 'US');
  }

  /**
   * Returns whether the coupon's valid for the current order.
   */
  protected function isCouponValid($coupon) {
    $code = $coupon->commerce_coupon_code->value();
    return commerce_coupon_code_is_valid($code, $this->order);
  }

  /**
   * Creates a new coupon that references the specified products.
   *
   * @param string $type
   *   The type of coupon to create (the bundle name)
   * @param array $skus
   *   SKUs that the coupon references
   * @param string $code
   *   The coupon code to use
   *
   * @return
   *   Coupon entity metadata wrapper that hasn't been saved yet
   */
  protected function createBaseCoupon($type, $skus, $code) {
    $coupon = commerce_coupon_create($type);

    $wrapper = entity_metadata_wrapper('commerce_coupon', $coupon);
    $wrapper->is_active = TRUE;
    $wrapper->commerce_coupon_code = $code;
    $wrapper->commerce_coupon_number_of_uses = 100;

    if ($skus) {
      foreach ($skus as $sku) {
        $ids[]= $this->products[$sku]->product_id;
      }
      $wrapper->field_commerce_couponprodref = $ids;
    }

    return $wrapper;
  }

  /**
   * Searches the order and returns a wrapped line item matching the SKU. The
   * SKU must be in the order.
   */
  protected function getLineItemBySku($sku) {
    $order_wrapper = entity_metadata_wrapper('commerce_order', $this->order);
    foreach ($order_wrapper->commerce_line_items as $line_item_wrapper) {
      if (isset($line_item_wrapper->commerce_product) &&
        $line_item_wrapper->commerce_product->sku->value() == $sku) {

        return $line_item_wrapper;
      }
    }

    throw new Exception(format_string("Couldn't find product @sku", array('sku' => $sku)));
  }
}

/**
 * Provides tests for Commerce Coupon by Product Reference with percent coupons.
 */
class CommerceCouponProductReferencePercentTestCase extends CommerceCouponProductReferenceBaseTestCase {

  /**
   * The percentage to discount by.
   */
  protected $pct_discount = 10;

  /**
   * {@inheritdoc}
   */
  protected function getAdditionalModules() {
    return array('commerce_coupon_pct');
  }

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => 'Coupon by product reference: percentage discounts',
      'description' => 'Test Commerce Coupon by product reference functionality with percentage coupons',
      'group' => 'Commerce Coupon by product reference',
    );
  }

  /**
   * A coupon without references can be applied to an order successfully.
   */
  public function testNoReferences() {
    $coupon = $this->createCoupon();

    $this->assertTrue($this->isCouponValid($coupon), "Coupon is valid");

    // Add the coupon to the order.
    commerce_coupon_redeem_coupon($coupon, $this->order);

    // Assert every line item is discounted.
    $this->assertEqual(
      $this->getLineItemPercentageDiscount('PROD-01'), $this->pct_discount
    );
    $this->assertEqual(
      $this->getLineItemPercentageDiscount('PROD-02'), $this->pct_discount
    );
    $this->assertEqual(
      $this->getLineItemPercentageDiscount('PROD-03'), $this->pct_discount
    );
  }

  /**
   * A coupon with references can be applied to an order with one or more
   * relevant products and will affect only those products. Test with one
   * referenced product.
   */
  public function testOneReference() {
    // Create a coupon referencing only PROD-01.
    $coupon = $this->createCoupon(array('PROD-01'));

    $this->assertTrue($this->isCouponValid($coupon), "Coupon is valid");

    // Add the coupon to the order.
    commerce_coupon_redeem_coupon($coupon, $this->order);

    // Assert only the referenced product is discounted.
    $this->assertEqual(
      $this->getLineItemPercentageDiscount('PROD-01'), $this->pct_discount
    );
    $this->assertEqual($this->getLineItemPercentageDiscount('PROD-02'), 0);
    $this->assertEqual($this->getLineItemPercentageDiscount('PROD-03'), 0);
  }

  /**
   * A coupon with references can be applied to an order with one or more
   * relevant products and will affect only those products. Test with two
   * referenced products.
   */
  public function testTwoReferences() {
    // Create a coupon referencing PROD-01 and PROD-02.
    $coupon = $this->createCoupon(array('PROD-01', 'PROD-02'));

    $this->assertTrue($this->isCouponValid($coupon), "Coupon is valid");

    // Add the coupon to the order.
    commerce_coupon_redeem_coupon($coupon, $this->order);

    // Assert only the referenced product is discounted.
    $this->assertEqual(
      $this->getLineItemPercentageDiscount('PROD-01'), $this->pct_discount
    );
    $this->assertEqual(
      $this->getLineItemPercentageDiscount('PROD-02'), $this->pct_discount
    );
    $this->assertEqual($this->getLineItemPercentageDiscount('PROD-03'), 0);
  }

  /**
   * A coupon with references can't be applied to an order without any relevant
   * products.
   */
  public function testInvalidCoupon() {
    $coupon = $this->createCoupon(array('PROD-04'));

    // Check the coupon's invalid.
    $this->assertFalse($this->isCouponValid($coupon), "Coupon is invalid");
  }

  /**
   * A coupon with references applied to an order will be removed if all the
   * referenced products are removed from the cart.
   */
  public function testLastProductRemoval() {
    $code = 'COUPON';
    $coupon = $this->createCoupon(array('PROD-01', 'PROD-02'), $code);

    // Add the coupon to the order.
    commerce_coupon_redeem_coupon($coupon, $this->order);

    // After removing just one referenced product the coupon should still be
    // attached to the order.
    $line_item_id = $this->getLineItemBySku('PROD-01')->line_item_id->value();
    commerce_cart_order_product_line_item_delete($this->order, $line_item_id);
    $this->assertTrue(commerce_coupon_code_is_in_order($code, $this->order),
      "The coupon remains until the last product it references is removed from the cart.");

    // After removing the last referenced product the coupon should be removed.
    $line_item_id = $this->getLineItemBySku('PROD-02')->line_item_id->value();
    commerce_cart_order_product_line_item_delete($this->order, $line_item_id);
    $this->assertFalse(commerce_coupon_code_is_in_order($code, $this->order),
      "The coupon was removed from the order after the last product it references was removed from the cart.");
  }

  /**
   * Creates a new percentage coupon that references the specified products.
   *
   * @param array $skus
   *   (optional) SKUs that the coupon references; defaults to an empty array
   * @param string $code
   *   (optional) The coupon code to use; defaults to COUPON
   *
   * @return
   *   Entity metadata wrapper for the coupon
   */
  protected function createCoupon($skus = array(), $code = 'COUPON') {
    $coupon = $this->createBaseCoupon('commerce_coupon_pct', $skus, $code);
    $coupon->commerce_coupon_percent_amount = $this->pct_discount;
    $coupon->save();

    return $coupon;
  }

  /**
   * Returns the percentage discount applied to the product.
   *
   * @param $sku
   *   The product's SKU; must be in the order
   *
   * @return
   *   The percentage by which the product has been discounted (0 if nothing)
   */
  protected function getLineItemPercentageDiscount($sku) {
    $line_item_wrapper = $this->getLineItemBySku($sku);
    rules_invoke_event('commerce_product_calculate_sell_price', $line_item_wrapper->value());
    return $this->getPercentageDiscount($line_item_wrapper->commerce_unit_price);
  }

  /**
   * Returns the percentage discount that has been applied to the passed
   * price array.
   */
  protected function getPercentageDiscount($price) {

    if (is_object($price)) {
      $price = $price->value();
    }

    $base = commerce_price_component_total($price, 'base_price');
    $total = commerce_price_component_total($price);
    if ($base['amount'] != $total['amount']) {
      return $base['amount'] / ($base['amount'] - $total['amount']);
    }
    return 0;
  }
}

/**
 * Provides tests for Commerce Coupon by Product Reference with fixed coupons.
 */
class CommerceCouponProductReferenceFixedTestCase extends CommerceCouponProductReferenceBaseTestCase {

  /**
   * The amount to discount by.
   */
  protected $fixed_discount = 200;

  /**
   * {@inheritdoc}
   */
  protected function getAdditionalModules() {
    return array('commerce_coupon_fixed_amount');
  }

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => 'Coupon by product reference: fixed discounts',
      'description' => 'Test Commerce Coupon by product reference functionality with fixed coupons',
      'group' => 'Commerce Coupon by product reference',
    );
  }

  /**
   * A coupon without references can be applied to an order successfully.
   */
  public function testNoReferences() {
    $coupon = $this->createCoupon();

    $this->assertTrue($this->isCouponValid($coupon), "Coupon is valid");

    // Add the coupon to the order.
    commerce_coupon_redeem_coupon($coupon, $this->order);

    // Check the fixed discount has been applied to the order.
    $this->assertEqual($this->getFixedDiscount(), $this->fixed_discount);
  }

  /**
   * A coupon with references can be applied to an order with one or more
   * relevant products. Test with one referenced product.
   */
  public function testOneReference() {
    // Create a coupon referencing only PROD-01.
    $coupon = $this->createCoupon(array('PROD-01'));

    $this->assertTrue($this->isCouponValid($coupon), "Coupon is valid");

    // Add the coupon to the order.
    commerce_coupon_redeem_coupon($coupon, $this->order);

    // Check the fixed discount has been applied to the order.
    $this->assertEqual($this->getFixedDiscount(), $this->fixed_discount);
  }

  /**
   * A coupon with references can be applied to an order with one or more
   * relevant products. Test with two referenced products.
   */
  public function testTwoReferences() {
    // Create a coupon referencing PROD-01 and PROD-02.
    $coupon = $this->createCoupon(array('PROD-01', 'PROD-02'));

    $this->assertTrue($this->isCouponValid($coupon), "Coupon is valid");

    // Add the coupon to the order.
    commerce_coupon_redeem_coupon($coupon, $this->order);

    // Check the fixed discount has been applied to the order.
    $this->assertEqual($this->getFixedDiscount(), $this->fixed_discount);
  }

  /**
   * A coupon with references can't be applied to an order without any relevant
   * products.
   */
  public function testInvalidCoupon() {
    $coupon = $this->createCoupon(array('PROD-04'));

    // Check the coupon's invalid.
    $this->assertFalse($this->isCouponValid($coupon), "Coupon is invalid");
  }

  /**
   * A coupon with references applied to an order will be removed if all the
   * referenced products are removed from the cart.
   */
  public function testLastProductRemoval() {
    $code = 'COUPON';
    $coupon = $this->createCoupon(array('PROD-01', 'PROD-02'), $code);

    // Add the coupon to the order.
    commerce_coupon_redeem_coupon($coupon, $this->order);

    // After removing just one referenced product the coupon should still be
    // attached to the order.
    $line_item_id = $this->getLineItemBySku('PROD-01')->line_item_id->value();
    commerce_cart_order_product_line_item_delete($this->order, $line_item_id);
    $this->assertTrue(commerce_coupon_code_is_in_order($code, $this->order),
      "The coupon remains until the last product it references is removed from the cart.");

    // After removing the last referenced product the coupon should be removed.
    $line_item_id = $this->getLineItemBySku('PROD-02')->line_item_id->value();
    commerce_cart_order_product_line_item_delete($this->order, $line_item_id);
    $this->assertFalse(commerce_coupon_code_is_in_order($code, $this->order),
      "The coupon was removed from the order after the last product it references was removed from the cart.");
  }

  /**
   * Creates a new fixed coupon that references the specified products.
   *
   * @param array $skus
   *   (optional) SKUs that the coupon references; defaults to an empty array
   * @param string $code
   *   (optional) The coupon code to use; defaults to COUPON
   *
   * @return
   *   Entity metadata wrapper for the coupon
   */
  protected function createCoupon($skus = array(), $code = 'COUPON') {
    $coupon = $this->createBaseCoupon('commerce_coupon_fixed', $skus, $code);
    $coupon->commerce_coupon_fixed_amount->amount = $this->fixed_discount;
    $coupon->save();

    return $coupon;
  }

  /**
   * Returns the fixed discount applied to the current order.
   *
   * @return int
   *   The fixed discount as a positive integer, or 0
   */
  protected function getFixedDiscount() {
    $order_wrapper = entity_metadata_wrapper('commerce_order', $this->order);
    foreach ($order_wrapper->commerce_line_items as $line_item_wrapper) {
      if (!empty($line_item_wrapper->commerce_coupon_reference)) {
        return -$line_item_wrapper->commerce_total->amount->value();
      }
    }

    return 0;
  }
}