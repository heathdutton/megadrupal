<?php
/**
 * @file
 *
 * DigiDoc Download module.
 *
 * @todo bdoc support.
 */

/**
 * Implements hook_stream_wrappers_alter().
 *
 * Alters the public:// and private:// stream wrappers to facilitate DigiDoc
 * downloads.
 *
 * @todo Make streams configurable.
 */
function digidoc_download_stream_wrappers_alter(&$wrappers) {
  if(isset($wrappers['public'])) {
    $wrappers['public']['class'] = 'DrupalPublicStreamDigiDocWrapper';
    $wrappers['private']['class'] = 'DrupalPrivateStreamDigiDocWrapper';
  }
}

/**
 * Implements hook_menu().
 *
 * @todo Add permissions.
 */
function digidoc_download_menu() {
  $items = array();
  $items['digidoc/ddoc/%'] = array(
    'title' => 'File download',
    'page callback' => 'digidoc_download_ddoc_download',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 *  Page callback for ddoc download.
 *
 *  Unwraps the ddoc file, if the ddoc has multiple files creates a zip with
 *  all files else presents the single file.
 */
function digidoc_download_ddoc_download() {
  $args = func_get_args();

  $scheme = array_shift($args);
  $target = implode('/', $args);
  $uri = $scheme . '://' . $target;

  // Open the ddoc XML.
  $ddoc = simplexml_load_file($uri);

  if(!$ddoc) {
      drupal_set_message(t('The @file is not and XML file.', array('@file' => $target)), 'error');
      return;
  }

  if(isset($ddoc->DataFile) && $ddoc->DataFile) {
    // Multiple files, create a zip.
    if(isset($ddoc->DataFile[1])) {

      $filename = pathinfo($target);
      $zip_target = ($filename['dirname'] != '.' ? $filename['dirname']. '/' : '') . $filename['filename'] . '.zip';
      $zip_uri = $scheme . '://' . $zip_target;

      $zip = new ZipArchive();

      if ($zip->open(drupal_realpath($zip_uri), (file_exists($zip_uri) ? ZipArchive::OVERWRITE : ZipArchive::CREATE)) === TRUE) {
        foreach ($ddoc->DataFile as $DataFile) {
          $zip->addFromString((string)$DataFile['Filename'], base64_decode((string)$ddoc->DataFile));
        }
        $zip->close();

        // Anyother way to get a managed file with one line?
        file_save_data(file_get_contents($zip_uri), $zip_uri, FILE_EXISTS_REPLACE);

        // Use goto to get the real file name.
        drupal_goto(file_create_url($zip_uri));
      }
      else {
        drupal_set_message(t('Could not create zip archive for @file.', array('@file' => $target)), 'error');
        return;
      }
    }
    // Single file.
    else {
        // Replace the ddoc file name.
        $file_target = explode('/', $target);
        $file_target[sizeof($file_target) - 1] = $ddoc->DataFile[0]['Filename'];
        $file_target = implode('/', $file_target);
        $file_uri = $scheme . '://' . $file_target;

        // If the same file exists return that, else create/rewrite.
        if(!(file_exists($file_uri) && filesize($file_uri) == $ddoc->DataFile[0]['Size'])) {
          file_save_data(base64_decode((string)$ddoc->DataFile[0]), $file_uri, FILE_EXISTS_REPLACE);
        }

        // Use goto to get the real file name.
        drupal_goto(file_create_url($file_uri));
    }
  }
  else {
    drupal_set_message(t('The @file has no files embedded.', array('@file' => $target)), 'error');
    return;
  }
}

/**
 * Implements hook_file_mimetype_mapping_alter().
 *
 * Add ddoc and bdoc mimetypes.
 */
function digidoc_file_mimetype_mapping_alter(&$mapping) {

  // Add support for ddoc.
  $new_mappings['ddoc'] = 'application/ddoc';
  // Add support for bdoc.
  $new_mappings['bdoc'] = 'application/vnd.etsi.asic-e+zip';

  foreach ($new_mappings as $extension => $mime_type) {
    if (!in_array($mime_type, $mapping['mimetypes'])) {
      // If the mime type does not already exist, add it.
      $mapping['mimetypes'][] = $mime_type;
    }

    // Get the index of the mime type and assign the extension to that key.
    $index = array_search($mime_type, $mapping['mimetypes']);
    $mapping['extensions'][$extension] = $index;
  }
}

/**
 * Checks if the file has ddoc extension.
 *
 * @param  string $path path to file
 * @return boolean      TRUE if the file extension is ddoc.
 */
function digidoc_download_is_ddoc($path) {
  $info = pathinfo($path);
  if(isset($info['extension']) && $info['extension'] == 'ddoc') {
    return TRUE;
  }

  return FALSE;
}
