<?php

/**
 * @file
 * RESTful web services support for files and images (restws_file).
 */

/**
 * Implements hook_restws_request_alter().
 *
 * Adapt a request's file/image info in base64 encoding to be understood by
 * entity.
 *
 * @see restws_handle_request()
 */
function restws_file_restws_request_alter(array &$request) {
  $resource_name = $request['resource']->resource();

  // Intercept payload and convert for manipulation.
  $payload_obj = json_decode($request['payload']);

  if (!user_access('access resource ' . $resource_name) || !$request['resource']->access($request['op'], $request['id'])) {
    // Anticipate security access check in restws.module and return without
    // further processing if it won't pass.
    return;
  }

  if (!isset($payload_obj->type)) {
    $node = node_load($request['id']);
    $type = $node->type;
  }
  else {
    $type = $payload_obj->type;
  }
  // Get field information for specified entity and type (bundle).
  $fields_info = field_info_instances($resource_name, $type);
  // Loop through each field looking for image type.
  foreach ($fields_info as $field_name => $value) {
    $field_info = field_info_field($field_name);
    $type = $field_info['type'];
    if ($type != "image" && $type != "file" || empty($payload_obj->$field_name)) {
      continue;
    }
    // Get the base64 strings (or updated fids) in an array.
    if (!is_array($payload_obj->$field_name)) {
      // Handles the majority of "single value" cases, putting the value
      // into an array.
      $base64_or_fids_data = array($payload_obj->$field_name);
    }
    else {
      $base64_or_fids_data = $payload_obj->$field_name;
    }
    $fid_array = $base64_data = array();
    // Traverse the received data, storing the base64 data and fids in
    // separate arrays.
    foreach ($base64_or_fids_data as $enc_contents_item_or_fid) {
      if (!is_string($enc_contents_item_or_fid) && is_numeric($enc_contents_item_or_fid->fid)) {
        array_push($fid_array, array('fid' => $enc_contents_item_or_fid->fid));
      }
      else {
        $base64_data[] = $enc_contents_item_or_fid;
      }
    }
    // Create the files for the base64 strings, so every fid (new or existing)
    // is now in $fid_array.
    restws_file_create_files($type, $base64_data, $fid_array);
    // Assign fids.
    restws_assign_fids($type, $field_name, $fid_array, $payload_obj);
  }
  // Convert the payload back to a json string, to be passed onto
  // restws.entity.inc creation routines.
  $request['payload'] = json_encode($payload_obj);
}

/**
 * Populates the field with the newly created fids.
 *
 * It manages the case of single file/image value vs. multiple files/images.
 *
 * @param string $type
 *   Content type.
 * @param string $field_name
 *   Field name.
 * @param array $fid_array
 *   Array of file IDs.
 * @param mixed $payload_obj
 *   Payload (decoded) object coming in the request.
 */
function restws_assign_fids($type, $field_name, array $fid_array, &$payload_obj) {
  if ($type == "file") {
    $field_array = array();
    foreach ($fid_array as $fid) {
      if (empty($payload_obj->$field_name->display)) {
        $field_array[] = array_merge($fid, array('display' => 1));
      }
    }
    if (!is_array($payload_obj->$field_name)) {
      $payload_obj->$field_name = $field_array[0];
    }
    else {
      $payload_obj->$field_name = $field_array;
    }
  }
  else {
    if (!is_array($payload_obj->$field_name)) {
      $payload_obj->$field_name = $fid_array[0];
    }
    else {
      $payload_obj->$field_name = $fid_array;
    }
  }
}

/**
 * Create the files from the base64 encoded strings in the request.
 *
 * @param string $type
 *   Content type.
 * @param array $base64_data_array
 *   Array of base64-encoded strings, representing files or images.
 * @param array $fid_array
 *   Array of file IDs that gets populated.
 *
 * @return boolean TRUE and $fid_array populated.
 *   FALSE if any of the data could not be base64_decoded properly.
 *
 * @see restws_file_get_filename()
 */
function restws_file_create_files($type, array $base64_data_array, array &$fid_array) {
  foreach ($base64_data_array as $enc_contents_item) {
    // Get base64 MIME type and data.
    $result = preg_split('/^data\:(.*)\;base64\,/', $enc_contents_item, -1, PREG_SPLIT_NO_EMPTY | PREG_SPLIT_DELIM_CAPTURE);
    $mime_type = $result[0];
    $enc_contents = $result[1];
    // Replace any spaces with base64-compliant '+' signs and convert to binary
    // image.
    $data = base64_decode(str_replace(' ', '+', $enc_contents));
    if ($data === FALSE) {
      watchdog('restws', "Data in file/image field could not be decoded from the request.", NULL, WATCHDOG_WARNING);
      return FALSE;
    }
    // file_put_contents($file, "Decoded contents: $data" . "\n", FILE_APPEND);
    $destination = file_default_scheme() . "://" . restws_file_get_filename($type, $mime_type);
    // Save binary image in Drupal site's public file directory.
    if ($file = file_save_data($data, $destination)) {
      file_save($file);
      // Replace the base64 image string in the payload with the file id
      // reference of the newly created image.
      array_push($fid_array, array('fid' => $file->fid));
    }
  }

  return TRUE;
}

/**
 * Returns a proper filename for the file to be created.
 *
 * @param string $type
 *   Content type.
 * @param string $mime_type
 *   MIME type of the file.
 *
 * @see restws_file_get_file_extension_from_mime()
 */
function restws_file_get_filename($type, $mime_type) {
  $ext = restws_file_get_file_extension_from_mime($mime_type);
  // Create filename (format: entity_name_timestamp.ext, e.g.
  // favorite_color_survey_1363723712.png).
  $filename = $type . "_" . time() . "." . $ext;

  return $filename;
}

/**
 * Returns a matching file extension, using Drupal's built-in functions.
 *
 * @param string $mime_type
 *   MIME type of the file.
 */
function restws_file_get_file_extension_from_mime($mime_type) {
  // Get and validate extension from mime type.
  include_once DRUPAL_ROOT . '/includes/file.mimetypes.inc';
  $mapping = file_mimetype_mapping();
  $ext_key = array_search($mime_type, $mapping['mimetypes']);
  if ($ext_key !== FALSE) {
    $ext = array_search($ext_key, $mapping['extensions']);
  }
  else {
    watchdog('restws', "MIME type %mime could not be properly matched to a file extension.", array(
      '%mime' => $mime_type), WATCHDOG_NOTICE);
    $ext = 'dat';
  }

  return $ext;
}
