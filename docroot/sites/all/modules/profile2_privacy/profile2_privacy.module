<?php
/**
 * @file
 * Profile2 Privacy module code.
 */

/**
 * Implements of hook_ctools_plugin_directory().
 */
function profile2_privacy_ctools_plugin_directory($module, $type) {
  // Load the export_ui plugin.
  if ($type == 'export_ui') {
    return 'plugins/export_ui';
  }
}

/**
 * Implements hook_permission().
 */
function profile2_privacy_permission() { // say that three times fast
  // Setup general permissions.
  $perms = array(
    'administer profile2 privacy' => array(
      'title' => t('Administer Profile2 Privacy Levels'),
      'description' => t('Create, edit and delete privacy levels.'),
      'restrict access' => TRUE,
    ),
  );

  return $perms;
}

/**
 * Implements hook_field_info().
 */
function profile2_privacy_field_info() {
  return array(
    'profile2_privacy' => array(
      'label' => t('Profile2 Privacy'),
      'description' => t('This field stores a profile2 privacy field level.'),
      'settings' => array('allowed_values' => array(), 'allowed_values_function' => ''),
      'default_widget' => 'options_buttons',
      'default_formatter' => 'list_default',
    ),
  );
}

/**
 * Implements hook_field_widget_info_alter().
 */
function profile2_privacy_field_widget_info_alter(&$info) {

  if (isset($info['options_select'])) {
    // Let a new field type re-use an existing widget.
    $info['options_select']['field types'][] = 'profile2_privacy';
  }

  if (isset($info['options_buttons'])) {
    $info['options_buttons']['field types'][] = 'profile2_privacy';
  }
}

/**
 * Implements hook_field_formatter_info_alter().
 */
function profile2_privacy_field_formatter_info_alter(&$info) {

  if (isset($info['list_default'])) {
    // Let a new field type re-use an existing widget.
    $info['list_default']['field types'][] = 'profile2_privacy';
  }

  if (isset($info['list_key'])) {
    $info['list_key']['field types'][] = 'profile2_privacy';
  }
}

/**
 * Implements hook_options_list().
 */
function profile2_privacy_options_list($field, $instance, $entity_type, $entity) {
  ctools_include('export');
  $levels = ctools_export_crud_load_all('profile2_privacy_levels');
  $options = array();
  foreach ($levels as $level) {
    if (!empty($level->description)) {
      $options[$level->machine_name] = t('!title <em>(!description)</em>', array('!title' => $level->title, '!description' => $level->description));
    }
    else {
      $options[$level->machine_name] = t('!title', array('!title' => $level->title));
    }
  }
  return $options;
}

/**
 * Implements hook_field_is_empty().
 */
function profile2_privacy_field_is_empty($item, $field) {
  if (empty($item['value']) && (string) $item['value'] !== '0') {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements of hook_field_access().
 */
function profile2_privacy_field_access($op, $field, $entity_type, $entity, $account) {

  if ($op == 'view' && $entity_type == 'profile2' && !empty($entity)) {
    ctools_include('export');

    // Admin and entity user always have access.
    if ($account->uid == 1 || (isset($account->uid) && isset($entity->uid) && $account->uid == $entity->uid)) {
      return TRUE;
    }

    // Check our static cache.
    list($id, , $bundle) = entity_extract_ids($entity_type, $entity);
    $cache = &drupal_static(__FUNCTION__, array());
    if (isset($cache[$entity_type][$id][$field['field_name']][$account->uid])) {
      return $cache[$entity_type][$id][$field['field_name']][$account->uid];
    }

    // Ensure that we have roles loaded.
    if (isset($account->uid) && !isset($account->roles)) {
      $account = user_load($account->uid);
    }

    // Determine what privacy level the views user has selected.
    $privacy_fields = array_keys(field_read_fields(array('type' => 'profile2_privacy')));
    // We need the instance to check for this.
    $field_instance = field_info_instance('profile2', $field['field_name'], $entity->type);
    $roles = array();
    $all_roles = array_flip(user_roles());
    foreach ($privacy_fields as $privacy_field) {
      if (isset($entity->{$privacy_field})) {
        $ppl = isset($entity->{$privacy_field}[LANGUAGE_NONE][0]['value']) ? $entity->{$privacy_field}[LANGUAGE_NONE][0]['value'] : 0;
        $level = ctools_export_crud_load('profile2_privacy_levels', $ppl);
        foreach ($level->fields as $role_name => $fields) {
          if (isset($fields[$bundle]) && isset($fields[$bundle][$field_instance['field_name']]) && $fields[$bundle][$field_instance['field_name']] == 1) {
            $roles[] = $all_roles[$role_name];
          }
        }
      }
    }

    // Determine which roles can view this field.
    $allowed_roles = array_intersect($roles, array_keys($account->roles));

    // Access is granted if the user has are any allowed roles.
    $access = count($allowed_roles) ? TRUE : FALSE;

    // Set cache.
    $cache[$entity_type][$id][$field['field_name']][$account->uid] = $access;

    return $access;
  }

  return TRUE;
}

/**
 * Implements hook_profile2_view().
 *
 * Determines if all the fields in the profile are hidden, then show access
 * denied for the entire page.
 */
function profile2_privacy_profile2_view($profile, $view_mode, $langcode) {
  global $user;

  // Get the fields on this profile type.
  $fields = field_info_instances('profile2', $profile->type);
  $accessible_fields = array();
  foreach ($fields as $field_name => $field) {
    // Check each of the fields.
    if (profile2_privacy_field_access('view', $field, 'profile2', $profile, $user)) {
      $accessible_fields[] = $field_name;
    }
  }

  // If there are no visible fields, show access denied.
  if (!count($accessible_fields)) {
    drupal_access_denied();
    drupal_exit();
  }
}

/**
 * Implements hook_views_post_execute().
 */
function profile2_privacy_views_post_execute(&$view) {
  // Run access control when the view base table is profile.
  if (($view->base_table == 'profile' || in_array('profile', array_keys($view->relationship))) && count($view->result)) {
    global $user;

    // Create view field name to actual field name map.
    $field_map = array();
    foreach ($view->field as $view_field_name => $field_info) {
      if (isset($field_info->field_info['field_name'])) {
        $field_map[$view_field_name] = $field_info->field_info;
      }
    }

    foreach ($view->result as &$result) {
      foreach ($field_map as $view_field_name => $field) {
        if (isset($result->{'field_' . $view_field_name})
          && (isset($result->_field_data['pid']['entity']) || isset($result->_field_data['profile_users_pid']['entity']))) {

          // Check the field access.
          $access = TRUE;
          if (isset($result->_field_data['pid']['entity'])) {
            $access = profile2_privacy_field_access('view', $field, 'profile2', $result->_field_data['pid']['entity'], $user);
          }
          elseif (isset($result->_field_data['profile_users_pid']['entity'])) {
            $access = profile2_privacy_field_access('view', $field, 'profile2', $result->_field_data['profile_users_pid']['entity'], $user);
          }

          if (!$access) {
            $result->{'field_' . $view_field_name} = array();
          }
        }
      }
    }
  }
}


/**
 * Privacy level form.
 */
function profile2_privacy_level_form(&$form, &$form_state) {
  $preset = $form_state['item'];

  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Privacy Level Title'),
    '#description' => t('The name of the privacy level.'),
    '#maxlength' => 64,
    '#default_value' => !empty($preset->title) ? $preset->title : '',
    '#required' => TRUE,
  );
  $form['description'] = array(
    '#type' => 'textfield',
    '#title' => t('Description'),
    '#description' => t('Describe the privacy level.'),
    '#maxlength' => 128,
    '#default_value' => !empty($preset->description) ? $preset->description : '',
  );

  // Setup the role/fields information form.
  $roles = user_roles();
  $profile2_instances = field_info_instances('profile2');

  $form['fields'] = array(
    '#type' => 'vertical_tabs',
    '#tree' => TRUE,
  );
  foreach ($roles as $rid => $rolename) {
    $role = user_role_load($rid);
    if ($role === FALSE) {
      // Error check the role.
      continue;
    }

    $form['fields'][$role->name] = array(
      '#type' => 'fieldset',
      '#title' => filter_xss($role->name),
    );

    foreach ($profile2_instances as $bundle => $fields) {
      if (empty($fields)) {
        $form['fields'][$role->name]['message|' . $role->name] = array(
          '#type' => 'markup',
          '#markup' => t('No fields exist for @bundle. Add some <a href="!url">here</a>', array('@bundle' => $bundle, '!url' => url('admin/structure/profiles/manage/' . $bundle . '/fields'))),
        );
      }
      else {
        foreach ($fields as $key => $field) {
          $form['fields'][$role->name][$bundle][$field['field_name']] = array(
            '#type' => 'checkbox',
            '#title' => filter_xss($field['field_name']),
            '#description' => t('Used in: !bundle', array('!bundle' => $bundle)),
            '#default_value' => isset($preset->fields[$role->name][$bundle][$field['field_name']]) ? $preset->fields[$role->name][$bundle][$field['field_name']] : 0,
          );
        }
      }
    }
  }
}

/**
 * Submit handler for main profile2_privacy_level form.
 */
function profile2_privacy_level_form_submit($form, &$form_state) {
  $form_state['item'] = profile2_privacy_level_form_process($form_state['item'], $form_state['values']);
}

/**
 * Modifies a profile2_privacy_level object from submitted form values.
 *
 * @param object $level
 *   The privacy level object to modify.
 * @param array $form_values
 *   A form array with submitted values.
 * @param bool $submit
 *   A flag indicating if we are building a context on submit. If on
 *   submit, it will clear out conditions/reactions that are empty.
 *
 * @return object
 *   A Profile2 Privacy level object.
 */
function profile2_privacy_level_form_process($level, $form_values, $submit = TRUE) {
  $level->machine_name = isset($form['machine_name']) ? $form['machine_name'] : $level->machine_name;
  $level->title = isset($form['title']) ? $form['title'] : $level->title;
  $level->description = isset($form['description']) ? $form['description'] : NULL;
  $level->fields = array();

  $roles = user_roles();
  foreach ($form_values['fields'] as $role_name => $value) {
    if (in_array($role_name, $roles)) {
      $level->fields[$role_name] = $value;
    }
  }
  return $level;
}
