<?php

/**
 * Implements hook_schema().
 */
function profile2_privacy_schema() {
  $schema['profile2_privacy_levels'] = array(
    'description' => 'Saves privacy levels',
    'export' => array(
      'key' => 'machine_name',
      'identifier' => 'profile2_privacy_level',
      'default hook' => 'profile2_privacy_default_levels',  // Function hook name.
      'status' => 'profile2_privacy_status',
      'api' => array(
        'owner' => 'profile2_privacy',
        'api' => 'profile2_privacy',  // Base name for api include files.
        'minimum_version' => 1,
        'current_version' => 1,
      ),
    ),
    'fields' => array(
      'machine_name' => array(
        'description' => 'The machine name of the privacy level',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'title' => array(
        'description' => 'The name of title of the privacy level',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
      ),
      'description' => array(
        'description' => 'The description of the privacy level',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'weight' => array(
        'description' => 'The sort weight of the level',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'fields' => array(
        'description' => 'Serialized storage of all field settings.',
        'type' => 'text',
        'serialize' => TRUE,
      ),
    ),
    'primary key' => array('machine_name'),
    'indexes' => array(
      'weight_title' => array('weight', 'title'),
    ),
  );

  return $schema;
}

/**
 * Implements hook_field_schema()
 */
function profile2_privacy_field_schema($field) {
  if ($field['type'] == 'profile2_privacy') {
    return array(
      'columns' => array(
        'value' => array(
          'type' => 'varchar',
          'length' => 255,
          'not null' => TRUE,
        ),
      ),
    );
  }
} // profile2_privacy_field_schema()

/**
  * Returns all fields created on the system of the type defined in profile2_privacy.
  */
function profile2_privacy_get_profile2_privacy_fields() {
  $types = array_keys(profile2_privacy_field_info()); // field types defined in profile2_privacy
  $fields = array();
  foreach (field_info_fields() as $field) {
    if (in_array($field['type'], $types)) {
      $fields[] = $field;
    }
  }
  return $fields;
}

/**
 * Remove pplid from profile2_privacy_levels
 */
function profile2_privacy_update_7108() {
  db_drop_field('profile2_privacy_levels', 'pplid');
  db_drop_primary_key('profile2_privacy_levels');
  db_add_primary_key('profile2_privacy_levels', array('machine_name'));
  // Make sure ctools is enabled
  if (!module_exists('ctools')) {
    module_enable('ctools');
  }
  return t('Removed pplid from profile2_privacy_levels');
}

/**
 * Migrate fields to profile2_privacy_levels table
 */
function profile2_privacy_update_7107() {
  // Add the fields field
  db_add_field('profile2_privacy_levels', 'fields', array(
    'description' => 'Serialized storage of all field settings.',
    'type' => 'text',
    'serialize' => TRUE,
  ));

  // Migrate profile2_privacy_fields to fields
  $levels = array();
  $query = db_select('profile2_privacy_levels', 'ppl')->fields('ppl', array('pplid', 'title', 'machine_name'));
  $results = $query->execute();
  foreach ($results as $record) {
    $pplid = $record->pplid;
    $machine_name = $record->machine_name;
    $levels[$pplid] = $machine_name;
  }

  $fields = array();
  $roles = user_roles();
  foreach ($levels as $pplid => $machine_name) {
    $fields = array();
    $query = db_select('profile2_privacy_fields', 'ppf')
      ->fields('ppf', array('pplid', 'rid', 'fiid'))
      ->condition('pplid', $pplid, '=');
    $results = $query->execute();
    foreach ($results as $record) {
      // Get field instance
      $profile2_instances = field_info_instances('profile2');
      foreach ($profile2_instances as $bundle => $profile2_fields) {
        foreach ($profile2_fields as $key => $profile2_field) {
          if ($profile2_field['id'] == $record->fiid) {
            $field_name = $profile2_field['field_name'];
            $fields[$roles[$record->rid]][$bundle][$field_name] = 1;
          }
        }
      }
    }
    // Update profile2_privacy_levels
    db_update('profile2_privacy_levels')
      ->fields(array('fields' => serialize($fields)))
      ->condition('machine_name', $machine_name, '=')
      ->execute();
  }
  // Remove profile2_privacy_fields
  db_drop_table('profile2_privacy_fields');
  return t('profile2_privacy_fields table migrated');
}

/**
 * Migrate pplids to machine_names
 */
function profile2_privacy_update_7106() {
  // Get pplid -> machine_names
  $levels = array();
  $query = db_select('profile2_privacy_levels', 'ppl')->fields('ppl', array('pplid', 'title', 'machine_name'));
  $results = $query->execute();
  foreach ($results as $record) {
    $pplid = $record->pplid;
    $machine_name = $record->machine_name;
    $levels[$pplid] = $machine_name;
  }

  $fields = profile2_privacy_get_profile2_privacy_fields();
  foreach ($fields as $field) {
    $table_prefixes = array(
      _field_sql_storage_tablename($field),
      _field_sql_storage_revision_tablename($field)
    );
    foreach ($table_prefixes as $table_prefix) {
      $field_name = $field['field_name']; // eg 'field_dimensions' ;
      $table = $table_prefix;
      $column = $field_name . '_value';
      $spec = array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'initial' => TRUE);
      // Add temporary field
      $temp_field = $field_name . '_machine_name';
      db_add_field($table, $temp_field, $spec);
      // Fill in temporary field with machine names
      foreach ($levels as $pplid => $machine_name) {
        db_update($table)
          ->fields(array($temp_field => $machine_name))
          ->condition($column, $pplid, '=')
          ->execute();
      }
      // Change value field
      db_change_field($table, $column, $column, $spec);
      // Move temporary field values to final field values
      db_update($table)
        ->expression($column, $temp_field)
        ->execute();
      // Delete temporary field
      db_drop_field($table, $temp_field);
    }
  }
  return t('pplids migrated.');
}

/**
 * Create machine names
 */
function profile2_privacy_update_7105() {
  $query = db_select('profile2_privacy_levels', 'ppl')->fields('ppl', array('pplid', 'title', 'machine_name'));
  $results = $query->execute();
  foreach ($results as $record) {
    if (empty($record->machine_name)) {
      // Get machine name from title
      $machine_name = str_replace(' ', '_', $record->title);
      $machine_name = strtolower($machine_name);
      db_update('profile2_privacy_levels')
        ->fields(array('machine_name' => $machine_name))
        ->condition('pplid', $record->pplid, '=')
        ->execute();
    }
  }
  return t('Machine names created');
}

/**
 * Adds machine_name field
 */
function profile2_privacy_update_7104() {
  $spec = array(
    'description' => 'The machine name of the privacy level',
    'type' => 'varchar',
    'length' => 255,
    'not null' => TRUE,
    'default' => '',
  );
  if (!db_field_exists('profile2_privacy_levels', 'machine_name')) {
    db_add_field('profile2_privacy_levels', 'machine_name', $spec);
  }
  return t('machine_name field added');
}

/**
 * Updates existing field widgets
 */
function profile2_privacy_update_7103() {
  $fields = profile2_privacy_get_profile2_privacy_fields();
  foreach ($fields as $field) {
    $field_name = $field['field_name'];
    $field_instances = field_read_instances(array('field_name' => $field_name));
    foreach ($field_instances as $instance) {
      $instance['widget']['module'] = 'options';
      $instance['widget']['type'] = 'options_buttons';
      field_update_instance($instance);
    }
    return t('Field widgets updated');
  }
}


/**
* Updates the field schema.
*/
function profile2_privacy_update_7102() {
  $fields = profile2_privacy_get_profile2_privacy_fields();
  foreach ($fields as $field) {
    $table_prefixes = array(
      _field_sql_storage_tablename($field),
      _field_sql_storage_revision_tablename($field)
    );
    foreach ($table_prefixes as $table_prefix) {
      $field_name = $field['field_name']; // eg 'field_dimensions' ;
      $table = $table_prefix;
      // Convert two db columns from float to double precision
      $column1 = $field_name . '_pplid';
      $column2 = $field_name . '_value';
      $spec = array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE);
      db_change_field($table, $column1, $column2, $spec);
    }
  }
  return t('Field schema updated.');
}

/**
 * Updates the field-level privacy settings to refer to their field instances.
 */
function profile2_privacy_update_7101() {
  // Finding all instances of a fields referenced in profile2_privacy_field and
  // dumping that into a temporary table.
  $query = "CREATE TABLE profile2_privacy_fields_tmp
            SELECT pplid, rid, id AS fiid
              FROM {profile2_privacy_fields} ppf
         LEFT JOIN {field_config_instance} fci
                ON fci.field_id = ppf.fiid
             WHERE fci.entity_type = 'profile2'";
  db_query($query);

  // Dropping the original profile2_privacy_fields table.
  $drop_table = 'DROP TABLE {profile2_privacy_fields}';
  db_query($drop_table);

  // Renaming the temporary table to profile2_privacy_fields.
  $rename_table = 'RENAME TABLE profile2_privacy_fields_tmp TO {profile2_privacy_fields}';
  db_query($rename_table);
}
