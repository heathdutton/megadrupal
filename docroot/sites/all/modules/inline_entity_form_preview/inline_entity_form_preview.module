<?php

/**
 * @file
 * Main file of Inline Entity Form Preview module.
 */

/**
 * Implements hook_entity_info_alter().
 */
function inline_entity_form_preview_entity_info_alter(&$entity_infos) {
  foreach ($entity_infos as $bundle => $entity_info) {
    $entity_infos[$bundle]['view modes']['inline_entity_form_preview'] = array(
      'label' => t('Preview'),
      'custom settings' => FALSE,
    );
  }
}

/**
 * Implements hook_field_widget_info_alter().
 */
function inline_entity_form_preview_field_widget_info_alter(&$info) {
  $info['inline_entity_form']['settings'] += array(
    'preview' => array(
      'enable' => 0,
      'view_mode' => 'inline_entity_form_preview',
      'fallback_view_mode' => 'default',
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function inline_entity_form_preview_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'field_ui_field_edit_form') {
    $instance_info = $form['#instance'];
    $widget_settings = $instance_info['widget']['settings'];

    // We only want to alter settings only for inline entity form widgets.
    if ($instance_info['widget']['type'] != 'inline_entity_form') {
      return;
    }

    $instance = &$form['instance'];
    $widget = &$instance['widget'];
    $settings = &$widget['settings'];
    $target_entity_type = $form['#field']['settings']['target_type'];
    $target_bundles = $form['#field']['settings']['handler_settings']['target_bundles'];
    $view_modes = inline_entity_form_preview_view_modes($target_entity_type, $target_bundles);

    $settings['preview'] = array(
      '#type' => 'fieldset',
      '#title' => t('Preview'),
      '#description' => t('Referenced entities can be displayed in an extra column when editing the form.'),
    );

    $settings['preview']['enable'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable preview column'),
      '#default_value' => $widget_settings['preview']['enable'],
    );

    $settings['preview']['view_mode'] = array(
      '#type' => 'select',
      '#title' => t('View mode'),
      '#description' => t('Select the view mode which should be used for preview.'),
      '#required' => TRUE,
      '#options' => $view_modes,
      '#default_value' => $widget_settings['preview']['view_mode'],
      '#states' => array(
        'visible' => array(
          'input[name$="[preview][enable]"]' => array('checked' => TRUE),
        ),
      ),
      '#ajax' => array(
        'callback' => 'inline_entity_form_preview_fallback_view_modes',
        'wrapper' => 'inline-entity-form-preview-fallback-view-mode',
        'method' => 'replace',
        'progress' => array(
          'type' => 'throbber',
          'message' => '',
        ),
      ),
    );

    $settings['preview']['fallback_view_mode'] = array(
      '#type' => 'select',
      '#title' => t('Fallback view mode'),
      '#description' => t('Which view mode should be used when the view mode selected above does not exist.'),
      '#options' => $view_modes,
      '#empty_option' => t('- None -'),
      '#states' => array(
        'visible' => array(
          'input[name$="[preview][enable]"]' => array('checked' => TRUE),
        ),
        'invisible' => array(
          'select[name$="[preview][view_mode]"]' => array('value' => 'default'),
        ),
      ),
      '#prefix' => '<div id="inline-entity-form-preview-fallback-view-mode">',
      '#suffix' => '</div>',
    );

    if (!empty($widget_settings['preview']['fallback_view_mode'])) {
      $settings['preview']['fallback_view_mode']['#default_value'] = $widget_settings['preview']['fallback_view_mode'];
    }
  }
}

/**
 * AJAX callback for fallback view mode settings field.
 */
function inline_entity_form_preview_fallback_view_modes($form, $form_state) {
  $widget = $form['instance']['widget']['settings'];
  $settings = $form_state['values']['instance']['widget']['settings']['preview'];

  if (!$settings['view_mode'] == 'default') {
    $widget['preview']['fallback_view_mode']['#prefix'] = '<div id="inline-entity-form-preview-fallback-view-mode" style="display: none;">';
  }

  unset($widget['preview']['fallback_view_mode']['#options'][$settings['view_mode']]);

  return $widget['preview']['fallback_view_mode'];
}

/**
 * Implements hook_inline_entity_form_table_fields_alter().
 */
function inline_entity_form_preview_inline_entity_form_table_fields_alter(&$fields, $context) {
  // Load field instance to get the preview settings.
  $field_name = $context['field_name'];
  $instance = field_info_instance($context['parent_entity_type'], $field_name, $context['parent_bundle']);
  $settings = isset($instance['widget']['settings']['preview']) ? $instance['widget']['settings']['preview'] : array('enable' => 1);

  if ($settings['enable']) {
    $fields['field_ief_preview'] = array(
      'type' => 'callback',
      'render_callback' => 'inline_entity_form_preview_ief_preview_column',
      'label' => t('Preview'),
      'weight' => 101,
    );
  }
}

/**
 * Callback for preview column.
 */
function inline_entity_form_preview_ief_preview_column($entity_type, $entity, $context) {
  $entity->id = isset($entity->id) ? $entity->id : 0;
  $entity_type = $context['entity_type'];
  $field_name = $context['field_name'];
  list(, , $bundle) = entity_extract_ids($entity_type, $entity);
  $view_modes = field_view_mode_settings($entity_type, $bundle);

  // Load field instance to get the preview settings.
  $instance = field_info_instance($context['parent_entity_type'], $field_name, $context['parent_bundle']);

  // Do not break previews for people coming from 7.x-1.0-beta2.
  if (!isset($instance['widget']['settings']['preview'])) {
    return entity_view($entity_type, array($entity->id => $entity), 'inline_entity_form_preview');
  }

  $settings = $instance['widget']['settings']['preview'];
  $view_mode = $settings['view_mode'];
  $fallback_view_mode = $settings['fallback_view_mode'];
  $needs_fallback = empty($view_modes[$view_mode]['custom_settings']);

  if ($needs_fallback && $fallback_view_mode) {
    $view_mode = $fallback_view_mode;
  }
  elseif ($needs_fallback && (!$fallback_view_mode || empty($view_modes[$fallback_view_mode]['custom_settings']))) {
    return array();
  }

  $entity_view = entity_view($entity_type, array($entity->id => $entity), $view_mode);

  return $entity_view;
}

/**
 * Helper function which returns all view modes of an entity type.
 *
 * @param string $entity_type
 *   The specific entity type.
 * @param array $bundles
 *   An array containing allowed bundles.
 *
 * @return array
 *   An array containing all view modes of passed bundles.
 */
function inline_entity_form_preview_view_modes($entity_type, $bundles = array()) {
  $bundle_count = count($bundles);
  $view_modes_prepared = array();
  $entity_info = entity_get_info($entity_type);

  foreach ($entity_info['bundles'] as $bundle => $bundle_info) {
    // If bundles filter is set and the current bundle does not
    // exist in the filter, skip.
    if ($bundle_count && !array_key_exists($bundle, $bundles)) {
      continue;
    }

    // Load view mode settings for the current bundle.
    $view_mode_settings = field_view_mode_settings($entity_type, $bundle);

    foreach ($view_mode_settings as $view_mode_name => $view_mode) {
      // If custom settings are used for this bundle, add it to the array.
      if ($view_mode['custom_settings'] && isset($entity_info['view modes'][$view_mode_name]) && !isset($view_modes_prepared[$view_mode_name])) {
        $view_modes_prepared[$view_mode_name] = t($entity_info['view modes'][$view_mode_name]['label']);
      }
    }
  }

  asort($view_modes_prepared);

  // Add 'default' view mode.
  $view_modes_prepared = array('default' => t('Default')) + $view_modes_prepared;

  return $view_modes_prepared;
}
