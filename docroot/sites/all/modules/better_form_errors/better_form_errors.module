<?php

/**
 * @file
 * Main file of the "Better Form Errors" module.
 */

/**
 * Defining global constants.
 */
  define('BETTER_FORM_ERRORS_DEBUG', FALSE);
  // To enable debugging,
  // change the above code to "define('BETTER_FORM_ERRORS_DEBUG', TRUE);"

/**
 * Helper function defining a static array holding module information.
 *
 * No need to pollute the $GLOBALS array throughout all enabled modules by
 * providing this info via defining global constants!
 *
 * Called by several functions within this module.
 */
function _better_form_errors_module_info() {
  static $module_info = array(
    'AUTHOR_NAME' => 'Robert Allerstorfer',
    'AUTHOR_HOMEPAGE' => 'https://www.drupal.org/user/405360',
    'MODULE_FULLNAME' => 'Better Form Errors',
    'MODULE_README' => 'README.txt',
    'MODULE_VERSION' => FALSE,
    'MODULE_NAME' => FALSE,
    'MODULE_PATH' => FALSE,
    'MODULE_URL' => FALSE,
    'MODULE_HOMEPAGE' => FALSE,
    'TEMP_PATH' => FALSE,
  );
  $module_info['MODULE_NAME'] || $module_info['MODULE_NAME'] = basename(__FILE__, '.module');
  $module_info['MODULE_PATH'] || $module_info['MODULE_PATH'] = dirname(__FILE__) . '/';
  if (!$module_info['MODULE_VERSION'] && module_exists($module_info['MODULE_NAME'])) {
    $module_list = system_list('module_enabled');
    $module_info['MODULE_VERSION'] = $module_list[$module_info['MODULE_NAME']]->info['version'];
    $module_info['MODULE_FULLNAME'] = $module_list[$module_info['MODULE_NAME']]->info['name'];
  }
  $module_info['MODULE_URL'] || $module_info['MODULE_URL'] = drupal_get_path('module', $module_info['MODULE_NAME']) . '/';
  $module_info['MODULE_HOMEPAGE'] || $module_info['MODULE_HOMEPAGE'] = 'https://www.drupal.org/project/' . $module_info['MODULE_NAME'];
  if (!$module_info['TEMP_PATH'] && BETTER_FORM_ERRORS_DEBUG === TRUE && is_writable(file_directory_temp() . '/')) {
    $module_info['TEMP_PATH'] = file_directory_temp() . '/';
  }

  return $module_info;
}

module_load_include('inc', 'better_form_errors', 'includes/better_form_errors.menu');
module_load_include('inc', 'better_form_errors', 'includes/better_form_errors.help');

/**
 * Implements hook_init().
 *
 * https://api.drupal.org/
 *  api/drupal/modules!system!system.api.php/function/hook_init/7
 *
 * Performs setup tasks for non-cached page requests.
 */
function better_form_errors_init() {
  $module_info = _better_form_errors_module_info();
  if ($module_info['MODULE_VERSION'] && preg_match('/\-dev$/', $module_info['MODULE_VERSION'])) {
    // In dev snaphots, report every possible PHP error, regardless of the PHP
    // version:
    error_reporting(-1);
  }
}

/**
 * Implements hook_form_alter().
 *
 * https://api.drupal.org/
 *  api/drupal/modules!system!system.api.php/function/hook_form_alter/7
 *
 * Alters each to-be-validated form to add a style sheet and an additional,
 * custom validation function.
 */
function better_form_errors_form_alter(&$form, &$form_state, $form_id) {
  if (array_key_exists('#validate', $form) &&
      array_key_exists(0, $form['#validate']) &&
      strlen($form['#validate'][0])) {
    $module_info = _better_form_errors_module_info();
    $form['#attached']['css'][] = $module_info['MODULE_URL'] . 'css/' . $module_info['MODULE_NAME'] . '.css';
    $form['#validate'][] = $module_info['MODULE_NAME'] . '_form_validate';
  }
  // =>
  // $form['#validate'][0]: FORM_ID_validate
  // $form['#validate'][1]: better_form_errors_form_validate
}

/**
 * Custom form validation function.
 *
 * Executing this function has been triggered by the function above
 * (better_form_errors_form_alter).
 */
function better_form_errors_form_validate($form, &$form_state) {
  $drupal_error_messages = drupal_get_messages('error', TRUE);
  if (empty($drupal_error_messages)) {
    return;
  }

  $form_id = $form['#form_id'];
  $module_info = _better_form_errors_module_info();
  if ($module_info['TEMP_PATH']) {
    $string = print_r($drupal_error_messages, TRUE);
    $file = $module_info['TEMP_PATH'] . 'error-' . $form_id . '.txt';
    file_put_contents($file, $string . "\n");
  }

  global $language;
  // Language code representing the active interface language:
  $lang = $language->language;
  // Conditionally load function "_better_form_errors_catch_message":
  if (preg_match('/^en/', $lang)) {
    // Drupal's original, untranslated English interface language code ("en")
    // and more specific English language specifications such as "en-GB".
    module_load_include('inc', $module_info['MODULE_NAME'], 'includes/lang/' . $module_info['MODULE_NAME'] . '.en');
  }
  else {
    // Translated languages other than English:
    if (is_readable($module_info['MODULE_PATH'] . 'includes/lang/' . $module_info['MODULE_NAME'] . '.' . $lang . '.inc')) {
      module_load_include('inc', $module_info['MODULE_NAME'], 'includes/lang/' . $module_info['MODULE_NAME'] . '.' . $lang);
    }
  }

  $messages = array();
  foreach ($drupal_error_messages['error'] as $key => $message) {
    // Allow other modules to set a custom error message in a given language:
    $messages_custom = module_invoke_all('better_form_errors_catch_message', $message, $lang);
    $message = empty($messages_custom) ? _better_form_errors_catch_message($message, $lang) : reset($messages_custom);
    $messages['error'][$key] = $message;
    drupal_set_message(
      $message,
      'error',
      FALSE
    );
  }

  if ($module_info['TEMP_PATH']) {
    $string = print_r($messages, TRUE);
    $file = $module_info['TEMP_PATH'] . 'error-' . $form_id . '-NEW.txt';
    file_put_contents($file, $string . "\n");
  }
}

/**
 * Function to compose an error message on form validation.
 *
 * Called by the function "_better_form_errors_catch_message".
 * It may also be called by other modules' implementations of
 * hook_better_form_errors_catch_message(), so never rename this function!
 *
 * @return string
 *   The new error message composed by the introduction, field name, error
 *   explanation and language attribute.
 */
function better_form_errors_compose_message($intro, $field, $explanation, $lang) {
  // Sanitize field name:
  // Remove leading quotes:
  $field = preg_replace('/^["\'„]+/', '', $field);
  // Remove trailing quotes, dots and colons:
  $field = preg_replace('/[.:"\'”]+$/', '', $field);
  // Remove HTML tags:
  $field = strip_tags($field);
  $message_new = $intro . '<span class="message-field" lang="' . $lang . '">' . $field . '</span>' . $explanation;
  return $message_new;
}
