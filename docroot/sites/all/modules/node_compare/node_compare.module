<?php

/**
 * @file
 * Module file for Node Compare.
 */

/**
 * Implements hook_menu().
 */
function node_compare_menu() {
  $items = array();
  $items['admin/config/content/node_compare'] = array(
    'title' => 'Node Compare settings',
    'description' => 'Module settings page.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('node_compare_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'node_compare.pages.inc',
  );
  $items['compare/toggle/%node'] = array(
    'page callback' => 'node_compare_ajax_handler',
    'page arguments' => array(2, FALSE),
    'access callback' => 'node_compare_toggle_perm',
    'access arguments' => array(2),
    'type' => MENU_CALLBACK,
    'file' => 'node_compare.pages.inc',
  );
  $items['compare/clear'] = array(
    'page callback' => 'node_compare_ajax_handler',
    'page arguments' => array(NULL, TRUE),
    'access arguments' => array('use comparison'),
    'type' => MENU_CALLBACK,
    'file' => 'node_compare.pages.inc',
  );
  $items['compare/type'] = array(
    'title' => 'Comparison table',
    'page callback' => 'node_compare_page',
    'access arguments' => array('use comparison'),
    'type' => MENU_CALLBACK,
    'file' => 'node_compare.pages.inc',
  );
  $items['compare/me'] = array(
    'page callback' => 'node_compare_me',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'node_compare.pages.inc',
  );
  return $items;
}

/**
 * Implements hook_node_view().
 */
function node_compare_node_view($node, $view_mode, $langcode) {
  if (user_access('use comparison')) {
    $extra_fields = field_extra_fields_get_display('node', $node->type, $view_mode);
    if (isset($extra_fields['node_compare']) && $extra_fields['node_compare']['visible']) {
      $node->content['node_compare'] = array(
        '#theme' => 'node_compare_toggle_link',
        '#nid' => $node->nid,
        '#weight' => $extra_fields['node_compare']['weight'],
      );
    }
  }
}

/**
 * Implements hook_block_info().
 */
function node_compare_block_info() {
  $block['node_compare_items'] = array(
    'info' => t('Node Compare: Content for comparison'),
    'cache' => DRUPAL_NO_CACHE,
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
  );
  return $block;
}

/**
 * Implements hook_block_configure().
 */
function node_compare_block_configure($delta = '') {
  $form = array();
  $form['node_compare_show_history'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show recent comparisons'),
    '#description' => t('Display the recent comparisons list in the comparison block.'),
    '#default_value' => variable_get('node_compare_show_history', FALSE),
  );
  return $form;
}

/**
 * Implements hook_block_save().
 */
function node_compare_block_save($delta = '', $edit = array()) {
  variable_set('node_compare_show_history', $edit['node_compare_show_history']);
  return;
}

/**
 * Implements hook_block_view().
 */
function node_compare_block_view() {
  if (user_access('use comparison')) {
    drupal_add_library('system', 'drupal.ajax');
    drupal_add_js(drupal_get_path('module', 'node_compare') . '/theme/compare-block.js');
    $block['subject'] = t('Content for comparison');
    $block['content'] = node_compare_content();
    return $block;
  }
}

/**
 * A module-defined block content function.
 */
function node_compare_content() {
  $content[] = array(
    '#theme' => 'node_compare_block_content',
    '#prefix' => '<div  id="node-compare-items">',
    '#suffix' => '</div>',
  );
  return $content;
}

/**
 * Implements hook_theme().
 */
function node_compare_theme($existing, $type, $theme, $path) {
  $path = drupal_get_path('module', 'node_compare') . '/theme';
  return array(
    'node_compare_comparison_page' => array(
      'variables' => array(
        'comparison_table' => NULL,
      ),
      'template' => 'node_compare-comparison-page',
      'file' => 'theme.inc',
      'path' => $path,
    ),
    'node_compare_block_content' => array(
      'variables' => array(
        'type' => NULL,
        'nids' => array(),
      ),
      'file' => 'theme.inc',
      'path' => $path,
    ),
    'node_compare_toggle_link' => array(
      'variables' => array(
        'nid' => NULL,
        'block' => FALSE,
      ),
      'file' => 'theme.inc',
      'path' => $path,
    ),
  );
}

/**
 * Implements template_preprocess() to prepare block_html_id for use inside the Node Compare.
 */
function node_compare_preprocess_block(&$variables) {
  if ($variables['block']->delta == 'node_compare_items') {
    $variables['block_html_id'] = 'node-compare-block-content';
  }
}

/**
 * Implements hook_permission().
 */
function node_compare_permission() {
  return array(
    'use comparison' => array(
      'title' => t('Use comparison'),
      'description' => t('Permission to use comparison'),
    ),
  );
}

/**
 * Returns permission for the 'node_compare_ajax_handler' menu callback.
 */
function node_compare_toggle_perm($node) {
  return (user_access('use comparison') && node_access('view', $node));
}

/**
 * Implements hook_field_extra_fields().
 */
function node_compare_field_extra_fields() {
  $return = array();

  foreach (node_type_get_types() as $type) {
    if (variable_get('node_compare_type_' . $type->type, array())) {
      $return['node'][$type->type] = array(
        'display' => array(
          'node_compare' => array(
            'label' => t('Node Compare link'),
            'description' => t('Link for add/remove nodes for compares.'),
            'weight' => 10,
          ),
        ),
      );
    }
  }

  return $return;
}

/**
 * Implements hook_entity_info_alter().
 */
function node_compare_entity_info_alter(&$info) {
  $info['node']['view modes']['node_compare'] = array(
    'label' => t('Compare mode'),
    'custom settings' => FALSE,
  );
}

/**
 * Implements hook_ajax_render_alter().
 */
function node_compare_ajax_render_alter(&$commands) {
  $node_compare_request = &drupal_static('node_compare_request');
  // If ajax-request comes from the module,
  // then wrap the system messages in a special container.
  if ($node_compare_request) {
    $commands[] = ajax_command_prepend('body', '<div class="compare-messages-ajax">' . theme('status_messages') . '</div>');
  }
}

/**
 * Implements hook_views_api().
 */
function node_compare_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'node_compare') . '/views',
  );
}

