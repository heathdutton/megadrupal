<?php
/**
 * Private Message OG.
 */

/**
 * Implements hook_views_api().
 */
function message_private_og_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'message_private_og'),
  );
}

/**
 * Implements hook_permission().
 */
function message_private_og_permission() {

  // Build the permissions.
  $permissions = array();

  $permissions['create private message instance for any group'] = array(
    'title' => t('Create a private message instance for any group'),
    'description' => t('Allow user to reference any groups when creating private messages.'),
  );

  return $permissions;
}

/**
 * Implements hook_og_permission().
 *
 * Provides OG permissions for sending private messages to group users and
 * groups.
 */
function message_private_og_og_permission() {
  $permissions = array();

  $permissions['create a private message instance'] = array(
    'title' => t('Create a private message instance'),
    'description' => t('Create private message for users and groups'),
    'default role' => array(OG_ADMINISTRATOR_ROLE),
  );

  $permissions['view a private message instance'] = array(
    'title' => t('View a private message instance'),
    'description' => t('View private messages related to user or group'),
    'default role' => array(OG_ADMINISTRATOR_ROLE),
  );

  $permissions['edit a private message instance'] = array(
    'title' => t('Edit a private message instance'),
    'description' => t('Allow author edit access to sent private messages'),
    'default role' => array(OG_ADMINISTRATOR_ROLE),
  );

  $permissions['delete a private message instance'] = array(
    'title' => t('Delete a private message instance'),
    'description' => t('Allow author delete access to sent private messages'),
    'default role' => array(OG_ADMINISTRATOR_ROLE),
  );

  return $permissions;
}

/**
 * Implements hook_menu_alter().
 *
 * Override some of the menu paths set in message ui module and the access
 * callback for menu item defined in message_private_menu.
 */
function message_private_og_menu_alter(&$items) {

  $items['message/%message/inbox']['access callback'] = 'message_private_og_access_callback';

  $items['message/%message']['access callback'] = 'message_private_og_access_control';
  $items['message/%message/view']['access callback'] = 'message_private_og_access_control';
  $items['message/%message/delete']['access callback'] = 'message_private_og_access_control';
  $items['message/create/private-message']['access callback'] = 'message_private_og_access_control';

  return $items;
}

/**
 * Override message_private_access_callback access callback.
 *
 * If the user has not got global permissions, check OG permissions.
 *
 * @param object $message
 *   The message object.
 *
 * @return bool
 *   TRUE if the user is allowed perform the operation, FALSE otherwise.
 */
function message_private_og_access_callback($message) {
  if (message_private_access_callback($message)) {
    // If the user has correct global permissions return TRUE.
    return TRUE;
  }
  elseif ($message->type == 'private_message') {
    // Users without global permissions may have OG permissions, check
    // if they have permission for any groups on the system.
    $groups = og_get_groups_by_user();
    if (!empty($groups['node']) && is_array($groups['node'])) {
      foreach ($groups['node'] as $gid) {
        if (og_user_access('node', $gid, 'view a private message instance')) {
          return TRUE;
        }
      }
    }
  }
  return FALSE;
}

/**
 * Message module access callback.
 *
 * @param string $operation
 *   The operation - create, view, update, delete.
 * @param object $message
 *   The message object or message type.
 * @param object|null $user_obj
 *   A user object. Optional.
 *
 * @return bool
 *   TRUE if user is allowed to perform the message operation, FALSE otherwise.
 */
function message_private_og_access_control($operation, $message, $user_obj = NULL) {

  if (empty($user_obj)) {
    global $user;
    $account = user_load($user->uid);
  }
  else {
    $user = $user_obj;
    $account = user_load($user->uid);
  }

  // Get the message type from the function argument or from the message object.
  $type = is_object($message) ? $message->type : $message;

  // If this is not a private message then use the message callback provided by
  // message_ui module.
  if ($type != 'private_message') {
    return message_ui_access_control($operation, $message);
  }
  else {
    // Bypass access control if user has correct permission.
    if (user_access('bypass private message access control', $account)) {
      return TRUE;
    }

    // For create operation user needs global create or OG create.
    if ($operation == 'create') {
      // Check global private message permissions.
      if (message_private_access_control($operation, $message)) {
        return TRUE;
      }
      else {
        // Users without global permissions may have OG permissions, check
        // if they have permission for any groups on the system.
        $groups = og_get_groups_by_user($account);
        if (!empty($groups['node']) && is_array($groups['node'])) {
          foreach ($groups['node'] as $gid) {
            if (og_user_access('node', $gid, $operation . ' a private message instance', $account)) {
              return TRUE;
            }
          }
        }
      }
    }
    else {
      if ($operation == 'view') {
        // Check if the user is message author.
        if ($message->uid == $account->uid) {
          return TRUE;
        }
        // Check if message was sent to groups and check view access per group.
        $groups = field_get_items('message', $message, 'field_message_group_ref');
        if ($groups && is_array($groups)) {
          foreach ($groups as $group_ref) {
            if (og_user_access('node', $group_ref['target_id'],
              $operation . ' a private message instance', $account)) {
              return TRUE;
            }
          }
        }
        // Check global private message permissions if no group access.
        if (message_private_access_control($operation, $message)) {
          return TRUE;
        }
      }
      else {
        // Only allow edit and delete privileges for message author and users
        // with 'Bypass access control' global permission checked already.
        if ($message->uid == $account->uid) {
          return TRUE;
        }
      }
    }
  }
  return FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add a custom validation function.
 */
function message_private_og_form_message_ui_instance_message_manage_alter(&$form, &$form_state, $form_id) {
  /*
   * TODO: Only allow send to own groups, edit available groups here?
   * If using autocomplete widget this will not work as it will show all groups.
   */
  if ($form['#bundle'] == 'private_message') {
    $form['#validate'][] = 'message_private_og_form_message_ui_instance_message_manage_validate';
  }
}

/**
 * Implements hook_entity_query_alter().
 *
 * Limit allowed groups in entity reference widget.
 */
function message_private_og_entity_query_alter($query) {
  // For the private_message create form with a group entity reference field.
  if (current_path() == 'admin/content/message/create/private-message'
    && !empty($query->entityConditions['bundle']['value'][0])
    && $query->entityConditions['bundle']['value'][0] == 'group') {
    // If the user has global message permissions, they can send to any groups.
    if (!user_access('bypass private message access control')
      && !user_access('create private message instance for any group')) {
      global $user;
      // The allowed group ids that the user can message.
      $allow_gids = array();
      $account = user_load($user->uid);
      $groups = og_get_groups_by_user($account);
      if (!empty($groups['node']) && is_array($groups['node'])) {
        foreach ($groups['node'] as $gid) {
          // Add to allowed array if user has og permission to create messages.
          if (og_user_access('node', $gid, 'create a private message instance')) {
            $allow_gids[] = $gid;
          }
        }
      }
      // Modify query to contain the groups the user is allowed message only.
      $query->entityCondition('entity_id', $allow_gids, 'IN');
    }
  }
}

/**
 * Validation for Private Message form.
 *
 * @param mixed $form
 *   The message form provided by message_ui.
 * @param mixed $form_state
 *   The form state including values submitted.
 */
function message_private_og_form_message_ui_instance_message_manage_validate($form, &$form_state) {
  // Get the user and group reference arrays submitted.
  $users = $form_state['values']['field_message_user_ref'][LANGUAGE_NONE];
  $groups = $form_state['values']['field_message_group_ref'][LANGUAGE_NONE];

  // If no User or Group reference is added, present an error.
  if (empty($users[0]['target_id']) && empty($groups[0]['target_id'])) {
    form_error($form['field_message_user_ref'], t('A User or Groups reference is required.'));
    form_error($form['field_message_group_ref']);
  }

  // If the user has global message permissions, they can send to any groups.
  if (!user_access('bypass private message access control')
    && !user_access('create private message instance for any group')) {

    // Verify user has create og permission on all receiving groups referenced.
    foreach ($groups as $group) {
      if (!og_user_access('node', $group['target_id'], 'create a private message instance')) {
        $node = node_load($group['target_id']);
        form_error($form['field_message_group_ref'], t('You do not have permission to message the group:')
        . ' ' . $node->title . ' [nid: ' . $group['target_id'] . ']');
      }
    }
  }
}

/**
 * Implements hook_message_insert().
 *
 * Send an email if a private message has been created.
 */
function message_private_og_message_insert($message) {
  // Prepare message notifications for private messages if notifications are on.
  if ($message->type == 'private_message'
    && variable_get('message_private_email_notifications', TRUE)) {
    // Use message load as the $message object has issue with mail function.
    // It causes duplicate entry, possibly as mid is missing and the mail
    // function message_notify_send_message tries to re-save as a new message.
    $message = message_load($message->mid);
    $wrapper = entity_metadata_wrapper('message', $message);

    $mail = array();
    $groups = $wrapper->field_message_group_ref->value();

    if (!empty($groups) && is_array($groups)) {
      foreach ($groups as $group) {
        $uids = og_get_group_members_properties($group,
          array(), 'members', 'node');
        $users = user_load_multiple($uids);
        foreach ($users as $user) {
          $notify = field_get_items('user', $user, 'field_private_message_notify');
          if (!empty($notify) && is_array($notify)) {
            // Get the 1st value of the array as there is only 1 possible item.
            $notify = array_shift($notify);
          }
          // If the user has set field for notifications, add their email.
          if (isset($notify['value']) && $notify['value']) {
            $mail[] = $user->mail;
          }
        }
      }
    }
    if (!empty($mail)) {
      message_notify_send_message($message, array('mail' => implode(',', $mail)));
    }
  }
}
