<?php
/**
 * Message Private with access permissions based on message fields.
 */

/**
 * The string name for email notifications variable.
 */
define('MESSAGE_PRIVATE_EMAIL_NOTIFICATIONS', 'message_private_email_notifications');

/**
 * The string name for message limit variable.
 */
define('MESSAGE_PRIVATE_MESSAGE_LIMIT', 'message_private_message_limit');

/**
 * The assoc index to be used when fetching default limit variable.
 */
define('MESSAGE_PRIVATE_DEFAULT_LIMIT', 'message_private_default_limit');

/**
 * The assoc index to be used when fetching default interval variable.
 */
define('MESSAGE_PRIVATE_DEFAULT_INTERVAL', 'message_private_default_interval');

/**
 * The default index for settings such as role.
 */
define('MESSAGE_PRIVATE_DEFAULT_INDEX', 0);

/**
 * The maximum message limit.
 */
define('MESSAGE_PRIVATE_MESSAGE_LIMIT_MAX', 1000);

/**
 * The minimum message limit.
 */
define('MESSAGE_PRIVATE_MESSAGE_LIMIT_MIN', 1);

/**
 * The maximum message interval in minutes.
 */
define('MESSAGE_PRIVATE_MESSAGE_INTERVAL_MAX', 1440);

/**
 * The minimum message interval in minutes.
 */
define('MESSAGE_PRIVATE_MESSAGE_INTERVAL_MIN', 1);


/**
 * Implements hook_help().
 */
function message_private_help($path, $arg) {
  switch ($path) {
    case 'admin/help#message_private':
      $output = file_get_contents(drupal_get_path('module', 'message_private') . '/README.md');
      return module_exists('markdown') ? filter_xss_admin(module_invoke('markdown', 'filter', 'process', 0, -1, $output)) : '<h3>Message Private README</h3><pre>' . check_plain($output) . '</pre>';
  }
}

/**
 * Implements hook_views_api().
 */
function message_private_views_api() {
  list($module, $api) = func_get_args();
  if ($module == 'views' && $api == 'views_default') {
    return array('version' => '3.0');
  }
  return array();
}

/**
 * Implements hook_permission().
 */
function message_private_permission() {

  // Build the permissions.
  $permissions = array();

  $permissions['bypass private message access control'] = array(
    'title' => t('Bypass message access control'),
    'description' => t('Grant to the user the permission to apply CRUD option on any private messages.'),
    'restrict access' => TRUE,
  );

  $permissions['administer message private'] = array(
    'title' => t('Administer message private'),
    'description' => t('Access the message private administration pages.'),
  );

  return $permissions;
}

/**
 * Implements hook_menu().
 */
function message_private_menu() {
  $items = array();

  $items['admin/config/system/message-private'] = array(
    'title' => 'Message private settings',
    'description' => 'Configuration settings for message private module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('message_private_admin_settings'),
    'file' => 'message_private.admin.inc',
    'access arguments' => array('administer message private'),
  );

  // Add default local task so the Messages view display shows Inbox tab.
  $items['user/%/messages/inbox'] = array(
    'title' => 'Inbox',
    'description' => 'Message Private Inbox',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  // Create new non admin path to create messages.
  $items['message/create/private-message'] = array(
    'title' => 'Private Message',
    'description' => 'Create a new message Private Message instance',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('message_ui_instance_message_manage', 'private_message'),
    'access arguments' => array('create', 'private_message'),
    'access callback' => 'message_private_access_control',
  );

  return $items;
}

/**
 * Access callback for Messages tab.
 *
 * Checks for the private_message bundle and user permissions.
 *
 * @param object $message
 *   The message object.
 *
 * @return bool
 *   TRUE if the user is allowed perform the operation, FALSE otherwise.
 */
function message_private_access_callback($message) {
  if ($message->type == 'private_message') {
    return user_access('bypass private message access control') || user_access('view a private_message message instance');
  }
  return FALSE;
}

/**
 * Implements hook_menu_alter().
 *
 * Override some of the menu paths set in message ui module.
 */
function message_private_menu_alter(&$items) {

  // Override access callbacks.
  $items['message/%message']['access callback'] = 'message_private_access_control';
  $items['message/%message/view']['access callback'] = 'message_private_access_control';
  $items['message/%message/edit']['access callback'] = 'message_private_access_control';
  $items['message/%message/delete']['access callback'] = 'message_private_access_control';

  // Override page created by message_ui to allow custom "Private Message" URI.
  $items['admin/content/message/create']['page callback'] = 'message_private_create_new_message_instance_list';

  // Unset menu item created by message_ui for private_message type.
  unset($items['admin/content/message/create/private-message']);

  return $items;
}

/**
 * Message module access callback.
 *
 * @param string $operation
 *   The operation - create, view, update, delete.
 * @param object|string $message
 *   The message object or message type.
 * @param object|null $user_obj
 *   A user object. Optional.
 *
 * @return bool
 *   TRUE if user is allowed to perform the message operation, FALSE otherwise.
 */
function message_private_access_control($operation, $message, $user_obj = NULL) {

  if (empty($user_obj)) {
    global $user;
    $account = user_load($user->uid);
  }
  else {
    $user = $user_obj;
    $account = user_load($user->uid);
  }

  // Get the message type from the function argument or from the message object.
  $type = is_object($message) ? $message->type : $message;

  // If this is not a private message then use the message callback provided by
  // message_ui module.
  if ($type != 'private_message') {
    return message_ui_access_control($operation, $message);
  }
  else {

    if (user_access('bypass private message access control', $account)) {
      return TRUE;
    }

    // Verify that the user can apply the op.
    if (user_access($operation . ' any message instance', $account)
      || user_access($operation . ' a ' . $type . ' message instance', $account)
    ) {
      if ($type == 'private_message' && $operation != 'create') {
        // Check if the user is message author.
        if ($message->uid == $account->uid) {
          return TRUE;
        }
        $users = field_get_items('message', $message, 'field_message_user_ref');
        if ($users && is_array($users)) {
          foreach ($users as $user_ref) {
            if ($user_ref['target_id'] == $account->uid) {
              return TRUE;
            }
          }
        }
      }
      else {
        return TRUE;
      }
    }
  }
  return FALSE;
}

/**
 * Override instance list provided by Message UI.
 *
 * Create links to all message create forms by type, allowing for creation of
 * link to custom Private Message create form URI.
 *
 * @return null|string
 * @throws Exception
 */
function message_private_create_new_message_instance_list() {
  $items = array();
  $allowed_types = message_ui_user_can_create_message();

  if ($types = message_ui_get_types()) {
    foreach ($types as $type => $title) {
      if ($allowed_types || (is_array($allowed_types) && $allowed_types[$type])) {
        // Create links to message create forms.
        if ($type != 'private_message') {
          $items[] = l($title, 'admin/content/message/create/' . str_replace('_', '-', $type));
        }
        else {
          // Create link to customised menu item for private_message create.
          $items[] = l($title, 'message/create/' . str_replace('_', '-', $type));
        }
      }
    }
  }
  else {
    return t("There are no messages types. You can create a new message type <a href='@url'>here</a>.", array('@url' => url('admin/structure/messages/add')));
  }

  return theme('item_list', array('items' => $items));
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * This function is defined to override that provided by Message UI module. This
 * allows override specific values of the form such as the cancel link. It hides
 * the message_text on the edit and create form, and adds custom validation.
 */
function message_private_form_message_ui_instance_message_manage_alter(&$form, &$form_state, $form_id) {
  if (!empty($form_state['#entity']) && $form_state['#entity']->type == 'private_message') {
    global $user;

    $referer = $_SERVER['HTTP_REFERER']; // Get the referrer uri from globals.
    // Redirect back to referer uri is exists, otherwise to user message inbox.
    $form['actions']['cancel']['#markup'] =
      l(t('Cancel'), (!empty($referer) ? $referer : 'user/'. $user->uid . '/messages'));

    if (isset($form['text']['#type'])) {
      $form['text']['#type'] = 'hidden';
    }
    $form['owner']['#access'] = user_access('bypass private message access control');
    $form['#validate'][] = 'message_private_form_message_private_instance_message_manage_validate';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Override redirect for private messages.
 */
function message_private_form_message_ui_instance_delete_alter(&$form, &$form_state, $form_id) {
  if (!empty($form_state['#entity']) && $form_state['#entity']->type == 'private_message') {
    global $user;
    $referer = $_SERVER['HTTP_REFERER']; // Get the referrer uri from globals.
    // Redirect back to referer uri is exists, otherwise to user message inbox.
    $form['actions']['cancel']['#href'] = !empty($referer) ? $referer : 'user/'. $user->uid . '/messages';

    // Call custom submit callback for private messages.
    $form['#submit'] = array('message_private_instance_delete_submit');
  }
}

/**
 * Custom submit callback for deleting private messages.
 */
function message_private_instance_delete_submit($form, &$form_state) {
  if ($form_state['clicked_button']['#type']) {
    global $user;

    $form_state['#entity']->delete();

    // Redirect back to user message inbox.
    $form_state['redirect'] =  'user/' . $user->uid . '/messages';

    drupal_set_message(t('The message instance @type deleted successfully', array(
      '@type' => $form_state['#entity']->type,
    )));
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function message_private_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  global $user;

  switch ($root_path) {
    case 'user/%':
      // Add a 'Create a new message for %user' action link.
      if (is_array($router_item['page_arguments'])) {
        // Get the user object from page arguments.
        foreach ($router_item['page_arguments'] as $arg) {
          if (is_object($arg) && !empty($arg->uid)) {
            $to_user = $arg;
          }
        }
      }
      // Only display the local task on other users profile, not current user's.
      if (!empty($to_user) && $user->uid != $to_user->uid) {
        $item = menu_get_item('message/create/private-message');
        $item['title'] = t('Create a new message for') . ' ' . $to_user->name;
        $item['localized_options']['query'] = array('field_message_user_ref' => $to_user->uid);
        $data['actions']['output'][] = array(
          '#theme' => 'menu_local_action',
          '#link' => $item,
        );

      }
      break;

    case 'user/%/messages':
      // Add a 'Create a new message' action link above message_private view.
      $item = menu_get_item('message/create/private-message');
      $item['title'] = t('Create a new message');
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );

      break;

    case 'message/%':
      $message = menu_get_object('message', 1, $router_item['href']);
      if (isset($message->type) && $message->type == 'private_message') {
        // Add a Messages tab to the private_message Message entities.
        $item = menu_get_item('user/' . $user->uid . '/messages');
        $item['title'] = t('Messages');
        $data['tabs'][0]['output'][] = array(
          '#theme' => 'menu_local_task',
          '#link' => $item,
        );

        // Get from user to Add a 'Create a new message for %user' action link.
        $to_user = user_load($message->uid);
        // Display the local task on other users profile, not current user's.
        if (!empty($to_user) && $user->uid != $to_user->uid) {
          $item = menu_get_item('message/create/private-message');
          $item['title'] = t('Create a new message for') . ' ' . $to_user->name;
          $item['localized_options']['query'] = array('field_message_user_ref' => $to_user->uid);
          $data['actions']['output'][] = array(
            '#theme' => 'menu_local_action',
            '#link' => $item,
          );

        }
      }
      break;

  }
}

/**
 * Validation for Private Message form.
 *
 * @param mixed $form
 *   The message form provided by message_ui.
 * @param mixed $form_state
 *   The form state including values submitted.
 */
function message_private_form_message_private_instance_message_manage_validate($form, &$form_state) {
  // If there is an imposed message limit set in the admin settings interface.
  if (variable_get(MESSAGE_PRIVATE_MESSAGE_LIMIT, FALSE)
    && !user_access('bypass private message access control')) {
    global $user;

    // Get the role belonging to user with max message limit.
    $rid = _message_private_max_message_limit_role($user->roles);
    $role = user_role_load($rid);

    // Get the message limitation settings for this role.
    $role_name = str_replace(' ', '_', $role->name);
    $limit_name = 'message_private_' . $role_name . '_limit';
    $interval_name = 'message_private_' . $role_name . '_interval';
    $interval = variable_get($interval_name);
    $limit = variable_get($limit_name);

    // Calculate timestamp of the last interval.
    $current_timestamp = time();
    $interval_timestamp = strtotime('-' . $interval . ' minutes', $current_timestamp);

    // Get total amount of this user's messages since last interval.
    $query = new EntityFieldQuery();
    $total = $query->entityCondition('entity_type', 'message')
      ->entityCondition('bundle', 'private_message')
      ->propertyCondition('timestamp', $interval_timestamp, '>')
      ->propertyCondition('uid', $user->uid)
      ->count()
      ->execute();

    // Display error preventing message create when total messages over limit.
    if ($total >= $limit) {
      form_error($form, t('Message create limit reached. Please try again later.'));
    }
  }
}

/**
 * Implements hook_message_insert().
 *
 * Send an email if a private message has been created.
 *
 * Currently addslashes() or equivalent is not used on the email,
 * this may be an issue with the message module itself as I don't
 * think escaping strings for email should be done in this module.
 */
function message_private_message_insert($message) {
  // Prepare message notifications for private messages if notifications are on.
  if ($message->type == 'private_message'
    && variable_get(MESSAGE_PRIVATE_EMAIL_NOTIFICATIONS, TRUE)) {
    // Use message load as the $message object has issue with mail function.
    // It causes duplicate entry, possibly as mid is missing and the mail
    // function message_notify_send_message tries to re-save as a new message.
    $message = message_load($message->mid);
    $wrapper = entity_metadata_wrapper('message', $message);

    $mail = array();
    $users = $wrapper->field_message_user_ref->value();

    if (is_array($users)) {
      foreach ($users as $user) {
        $notify = field_get_items('user', $user, 'field_private_message_notify');
        if (!empty($notify) && is_array($notify)) {
          // Get the 1st value of the array as there is only 1 possible item.
          $notify = array_shift($notify);
        }
        // If the user has set field for notifications, add their email.
        if (isset($notify['value']) && $notify['value']) {
          $mail[] = $user->mail;
        }
      }
    }
    if (!empty($mail)) {
      message_notify_send_message($message, array('mail' => implode(',', $mail)));
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * If email notifications are disabled, hide the per user setting on user
 * profiles, unless the user is in role with bypass access control permission.
 */
function message_private_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  if (!user_access('bypass private message access control')
    && !variable_get(MESSAGE_PRIVATE_EMAIL_NOTIFICATIONS, TRUE)) {
    $form['field_private_message_notify']['#access'] = FALSE;
  }
}

/**
 * Implements hook_theme().
 */
function message_private_theme() {
  $info['message_private'] = array(
    'render element' => 'elements',
    'template' => 'message--private_message',
    'base hook' => 'message_private',
  );

  return $info;
}

/**
 * Implements hook_message_view_alter().
 */
function message_private_message_view_alter(&$build) {
  // Use template_preprocess_message_private for private_message messages only.
  if (!empty($build['#bundle']) && $build['#bundle'] == 'private_message') {
    $build['#theme'] = 'message_private';
  }
}

/**
 * Process variables for message--private_message.tpl.php.
 */
function template_preprocess_message_private(&$variables) {
  // Call the parent message template function defined in message module.
  if (function_exists('template_preprocess_message')) {
    template_preprocess_message($variables);
  }
  // Save the message entity for ease of access.
  if (is_object($variables['elements']['#entity'])) {
    $message = $variables['elements']['#entity'];
  }
  // Create submitted variable containing user who created the message and date.
  if (!empty($message) && $uid = $message->uid) {
    $variables['date'] = format_date($message->timestamp);
    $variables['name'] = theme('username', array('account' => user_load($uid)));
    $variables['submitted'] = t('Submitted by !username on !datetime', array(
        '!username' => $variables['name'],
        '!datetime' => $variables['date'],
    ));
  }
}

/**
 * Get the role id with the maximum allowed message create limit.
 *
 * Using the values set for each role, calculate the the lowest time interval
 * required per message: INTERVAL / LIMIT and return the role with this value.
 *
 * @param null|array $roles
 *   An assoc array of role names and ids.
 *
 * @return mixed
 *   Either a role id or null.
 */
function _message_private_max_message_limit_role($roles) {
  $limits = array();
  $limit = variable_get(MESSAGE_PRIVATE_DEFAULT_LIMIT);
  $interval = variable_get(MESSAGE_PRIVATE_DEFAULT_INTERVAL);
  // Ensure we have existing valid numerical values for both variables.
  if (!empty($limit) && ctype_digit($limit) && !empty($interval) && ctype_digit($interval)) {
    $limits[MESSAGE_PRIVATE_DEFAULT_INDEX] = $interval / $limit;
  }

  // Cycle through the roles and get each limit and interval.
  foreach ($roles as $rid => $role) {
    $role_name = str_replace(' ', '_', $role);
    $limit_name = 'message_private_' . $role_name . '_limit';
    $interval_name = 'message_private_' . $role_name . '_interval';
    $interval = variable_get($interval_name);
    $limit = variable_get($limit_name);

    // Ensure we have existing valid numerical values for both variables.
    if (!empty($limit) && ctype_digit($limit) && !empty($interval) && ctype_digit($interval)) {
      $limits[$rid] = $interval / $limit;
    }
  }
  // The min value corresponds to the lowest interval required per message.
  return array_search(min($limits), $limits);
}
