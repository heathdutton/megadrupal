<?php

/**
 * @file
 * Install, update, and uninstall functions for the JobFaucet module.
 */

/**
 * Implements hook_schema().
 */
function jobfaucet_schema() {
  $schema['jobfaucet_mapping'] = array(
    'description' => 'Stores the job field mapping configuration for each content type.',
    'fields' => array(
      'type'  => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'description' => 'The machine name of the content type.',
      ),
      'target' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'description' => 'The name of the target field.',
      ),
      'source' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'A string with tokens to use as the source value.',
      ),
    ),
    'primary key' => array('type', 'target'),
  );

  $schema['jobfaucet_jobs'] = array(
    'description' => 'Stores info about jobs that have been syndicated to JobFaucet.',
    'fields' => array(
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The node id of the job node.',
      ),
      'remote_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The id of the job listing on JobFaucet.com.',
      ),
    ),
    'primary key' => array('nid'),
  );

  return $schema;
}

/**
 * Implements hook_install().
 */
function jobfaucet_install() {
  $t = get_t();
  $content_types = field_info_bundles('node');

  // Create the JobFaucet Job content type if it doesn't already exist.
  if (!isset($content_types['jobfaucet_job'])) {

    $job_type_info = array(
      'name' => $t('JobFaucet Job'),
      'type' => 'jobfaucet_job',
      'base' => 'node_content',
      'description' => $t('Create a new job posting.'),
      'has_title' => '1',
      'title_label' => $t('Job Title'),
      // Deleting the JobFaucet job content type is allowed.
      'custom' => TRUE,
    );

    $job_content_type = node_type_set_defaults($job_type_info);
    node_add_body_field($job_content_type, $t('Job Description'));
    node_type_save($job_content_type);

    foreach (_jobfaucet_job_fields() as $field) {
      if (!field_info_field($field['field_name'])) {
        field_create_field($field);
      }
    }

    foreach (_jobfaucet_job_field_instances() as $instance) {
      $instance += array(
        'entity_type' => 'node',
        'bundle' => $job_type_info['type'],
      );
      field_create_instance($instance);
    }
  }

  // Set default mapping on the newly created (or existing) jobfaucet_job
  // content type.
  jobfaucet_set_default_mapping('jobfaucet_job');
}

/**
 * Implements hook_uninstall().
 */
function jobfaucet_uninstall() {
  db_delete('variable')->condition('name', db_like('jobfaucet_') . '%', 'LIKE')->execute();
}

/**
 * Implements hook_requirements().
 */
function jobfaucet_requirements($phase) {

  $requirements = array();
  $t = get_t();

  // Display account and syndication statuses on the status report page.
  if ($phase == 'runtime') {
    $auth = jobfaucet_auth_status();

    $requirements['jobfaucet_account'] = array(
      'title' => $t('JobFaucet Account'),
      'value' => $auth['message'],
      'severity' => $auth['authenticated'] ? REQUIREMENT_OK : REQUIREMENT_ERROR,
    );

    $synd_status = variable_get('jobfaucet_syndication_status', JOBFAUCET_SYNDICATION_OFF);

    switch ($synd_status) {
      case JOBFAUCET_SYNDICATION_ON:
        $synd['message'] = $t('Syndication is turned on.');
        $synd['severity'] = REQUIREMENT_OK;
        break;

      case JOBFAUCET_TEST_MODE;
        $synd['message'] = $t('JobFaucet is in test mode.');
        $synd['severity'] = REQUIREMENT_WARNING;
        break;

      default:
        $synd['message'] = $t('Syndication is turned off.  No changes you make to jobs
          will be reflected on JobFaucet.com.');
        $synd['severity'] = REQUIREMENT_WARNING;
    }

    $requirements['jobfaucet_syndication_status'] = array(
      'title' => $t('JobFaucet Syndication'),
      'value' => $synd['message'],
      'severity' => $synd['severity'],
    );
  }

  return $requirements;
}

/**
 * Provides field information on install.
 */
function _jobfaucet_job_fields() {
  return array(
    'jobfaucet_how_to_apply' => array(
      'field_name'  => 'jobfaucet_how_to_apply',
      'cardinality' => 1,
      'type'        => 'text_long',
    ),
    'jobfaucet_country' => array(
      'field_name'  => 'jobfaucet_country',
      'cardinality' => 1,
      'type'        => 'list_text',
      'settings'    => array(
        'allowed_values' => _jobfaucet_list_countries(),
      ),
    ),
    'jobfaucet_state' => array(
      'field_name'  => 'jobfaucet_state',
      'cardinality' => 1,
      'type'        => 'list_text',
      'settings'    => array(
        'allowed_values' => _jobfaucet_list_us_states(),
        'allowed_values_function' => '',
      ),
    ),
    'jobfaucet_salary' => array(
      'field_name'  => 'jobfaucet_salary',
      'cardinality' => 1,
      'type'        => 'text',
    ),
    'jobfaucet_education' => array(
      'field_name'  => 'jobfaucet_education',
      'cardinality' => 1,
      'type'        => 'text',
    ),
    'jobfaucet_experience' => array(
      'field_name'  => 'jobfaucet_experience',
      'cardinality' => 1,
      'type'        => 'text',
    ),
  );
}

/**
 * Provides field instance information on install.
 */
function _jobfaucet_job_field_instances() {
  return array(
    'jobfaucet_how_to_apply' => array(
      'field_name'  => 'jobfaucet_how_to_apply',
      'label'       => t('How to Apply'),
      'description' => t('Information on how to apply for this job.'),
      'required'    => TRUE,
      'settings'    => array(
        'text_processing' => 1,
      )
    ),
    'jobfaucet_country' => array(
      'field_name'  => 'jobfaucet_country',
      'label'       => t('Job Country'),
      'description' => t('The country where a job is located (Jobfaucet Default).'),
      'required'    => TRUE,
      'display'     => array(
        'default' => array(
          'label' => 'hidden',
        ),
      ),
    ),
    'jobfaucet_state' => array(
      'field_name'  => 'jobfaucet_state',
      'label'       => t('Job State'),
      'description' => t('The state where a job is located (Jobfaucet Default).'),
      'required'    => TRUE,
      'display'     => array(
        'default' => array(
          'label' => 'hidden',
        ),
      ),
    ),
    'jobfaucet_salary' => array(
      'field_name'  => 'jobfaucet_salary',
      'label'       => t('Job Salary'),
      'description' => t('The annual salary offered for this job (e.g. "$50,000").'),
    ),
    'jobfaucet_education' => array(
      'field_name'  => 'jobfaucet_education',
      'label'       => t('Job Education Level'),
      'description' => t('The education level required for this job (e.g. "Bachelors").'),
    ),
    'jobfaucet_experience' => array(
      'field_name'  => 'jobfaucet_experience',
      'label'       => t('Job Experience'),
      'description' => t('The years of experience required for this job (e.g. "2-3 years").'),
    ),
  );
}

/**
 * Provides a list of countries.
 *
 * @return array
 *   An associative array of countries.
 */
function _jobfaucet_list_countries() {
  include_once DRUPAL_ROOT . '/includes/locale.inc';
  return country_get_list();
}

/**
 * Provides a list of US states.
 *
 * @return array
 *   An associative array of states.
 */
function _jobfaucet_list_us_states() {
  return array(
    'AL' => 'Alabama',
    'AK' => 'Alaska',
    'AZ' => 'Arizona',
    'AR' => 'Arkansas',
    'CA' => 'California',
    'CO' => 'Colorado',
    'CT' => 'Connecticut',
    'DE' => 'Delaware',
    'DC' => 'District Of Columbia',
    'FL' => 'Florida',
    'GA' => 'Georgia',
    'HI' => 'Hawaii',
    'ID' => 'Idaho',
    'IL' => 'Illinois',
    'IN' => 'Indiana',
    'IA' => 'Iowa',
    'KS' => 'Kansas',
    'KY' => 'Kentucky',
    'LA' => 'Louisiana',
    'ME' => 'Maine',
    'MD' => 'Maryland',
    'MA' => 'Massachusetts',
    'MI' => 'Michigan',
    'MN' => 'Minnesota',
    'MS' => 'Mississippi',
    'MO' => 'Missouri',
    'MT' => 'Montana',
    'NE' => 'Nebraska',
    'NV' => 'Nevada',
    'NH' => 'New Hampshire',
    'NJ' => 'New Jersey',
    'NM' => 'New Mexico',
    'NY' => 'New York',
    'NC' => 'North Carolina',
    'ND' => 'North Dakota',
    'OH' => 'Ohio',
    'OK' => 'Oklahoma',
    'OR' => 'Oregon',
    'PA' => 'Pennsylvania',
    'RI' => 'Rhode Island',
    'SC' => 'South Carolina',
    'SD' => 'South Dakota',
    'TN' => 'Tennessee',
    'TX' => 'Texas',
    'UT' => 'Utah',
    'VT' => 'Vermont',
    'VA' => 'Virginia',
    'WA' => 'Washington',
    'WV' => 'West Virginia',
    'WI' => 'Wisconsin',
    'WY' => 'Wyoming',

    'AS' => 'American Samoa',
    'FM' => 'Federated States of Micronesia',
    'GU' => 'Guam',
    'MH' => 'Marshall Islands',
    'MP' => 'Northern Mariana Islands',
    'PW' => 'Palau',
    'PR' => 'Puerto Rico',
    'VI' => 'Virgin Islands',
  );
}

/**
 * Provides a list of Canadian provinces.
 *
 * @return array
 *   An associative array of provinces.
 */
function _jobfaucet_list_ca_provinces() {
  return array(
    'AB' => 'Alberta',
    'BC' => 'British Columbia',
    'MB' => 'Manitoba',
    'NB' => 'New Brunswick',
    'NL' => 'Newfoundland and Labrador',
    'NS' => 'Nova Scotia',
    'ON' => 'Ontario',
    'PE' => 'Prince Edward Island',
    'QC' => 'Quebec',
    'SK' => 'Saskatchewan',
    'NT' => 'Northwest Territories',
    'NU' => 'Nunavut',
    'YT' => 'Yukon Territory',
  );
}

/**
 * Disables syndication to Juju job board.
 */
function jobfaucet_update_7101() {
  $services = variable_get('jobfaucet_feeds_selected', array());
  if ($key = array_search('juju', $services)) {
    unset($services[$key]);
    variable_set('jobfaucet_feeds_selected', $services);
  }
}

/**
 * Adds new fields to JobFaucet Job content type.
 */
function jobfaucet_update_7102() {
  $content_types = field_info_bundles('node');

  if (isset($content_types['jobfaucet_job'])) {
    $new_fields = array(
      'jobfaucet_salary',
      'jobfaucet_education',
      'jobfaucet_how_to_apply',
      'jobfaucet_experience',
    );

    module_load_include('inc', 'jobfaucet', 'jobfaucet.targets');
    $targets = jobfaucet_get_target_fields();
    $default_fields = _jobfaucet_job_fields();
    $default_instances = _jobfaucet_job_field_instances();
    $mapping = array();

    foreach ($new_fields as $field_name) {
      $field = field_info_field($field_name);
      $instance = field_info_instance('node', $field_name, 'jobfaucet_job');

      if (empty($field)) {
        field_create_field($default_fields[$field_name]);
      }

      if (empty($instance)) {
        $instance = $default_instances[$field_name];
        $instance += array(
          'entity_type' => 'node',
          'bundle' => 'jobfaucet_job',
        );
        field_create_instance($instance);
      }

      $mapping[$field_name] = $targets[$field_name]['default_mapping'];
    }

    jobfaucet_set_mapping('jobfaucet_job', $mapping);
  }
}
