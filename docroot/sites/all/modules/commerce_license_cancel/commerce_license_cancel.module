<?php

/**
 * @file
 * Provides ways for users to cancel Commerce License licenses
 */

/**
 * Implements hook_permission().
 */
function commerce_license_cancel_permission() {
  return array(
    'cancel any commerce license' => array(
      'title' => t('Cancel any commerce license'),
      'description' => t('Cancel any commerce license for any user'),
    ),
    'cancel own commerce license' => array(
      'title' => t('Cancel own commerce license'),
      'description' => t('Cancel your own commerce license'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function commerce_license_cancel_menu() {
  $items = array();

  $items['user/%user/licenses/cancel/product/%commerce_product'] = array(
    'title' => 'Cancel License',
    'page callback' => 'commerce_license_cancel_product_page',
    'page arguments' => array(1, 5),
    'access callback' => 'commerce_license_cancel_access_check',
    'access arguments' => array(1),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['user/%user/licenses/cancel/order/%commerce_order'] = array(
    'title' => 'Cancel License',
    'page callback' => 'commerce_license_cancel_order_page',
    'page arguments' => array(1, 5),
    'access callback' => 'commerce_license_cancel_access_check',
    'access arguments' => array(1),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Menu item access callback: prevent access to the cancellation form
 *
 * @param object $account
 *   The user object as loaded via the menu item wildcard.
 *
 * @return bool
 *   Boolean indicating the user's access to view the page.
 */
function commerce_license_cancel_access_check($account) {
  global $user;

  if (user_access('cancel any commerce license')) {
    return TRUE;
  }

  if (user_access('cancel own commerce license') && $account->uid == $user->uid) {
    return TRUE;
  }

  // TODO consider checking if user id matches order uid

  return FALSE;
}

/**
 * Menu item callback for the Cancel License (product-based) page
 *
 * @param object $account
 *   Drupal user object
 * @param object $product
 *   Commerce product object
 *
 * @return string
 *   HTML for the page (most likely contains the cancellation form)
 */
function commerce_license_cancel_product_page($account, $product) {
  $output = '';

  if (filter_input(INPUT_GET, 'success')) {
    $output .= t('License no longer exists.');
    return $output;
  }

  if ($product && commerce_license_exists($product, $account)) {
    $form = drupal_get_form('commerce_license_cancel_product_form', $account, $product);
    $output .= t('Please confirm that you would like to cancel the license associated with this product: @prodtitle', array('@prodtitle' => $product->title));
    $output .= drupal_render($form);
  }
  else {
    // TODO there may be a more appropriate action here
    $output .= t('User does not have a license associated with this product.');
  }

  return $output;
}

/**
 * Cancel License form (product-based)
 *
 * @param array $form
 *   Standard Drupal form array
 * @param array $form_state
 *   Standard Drupal form state
 * @param object $account
 *   Drupal user object
 * @param object $product
 *   Commerce product object
 *
 * @return array
 *   Standard Drupal form array
 */
function commerce_license_cancel_product_form($form, &$form_state, $account, $product) {
  $form['confirm'] = array(
    '#type' => 'checkbox',
    '#title' => t('Yes, I would like to cancel my license'),
  );

  $form['account'] = array(
    '#type' => 'value',
    '#value' => $account,
  );

  $form['product'] = array(
    '#type' => 'value',
    '#value' => $product,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Cancel license'),
  );

  return $form;
}

/**
 * Validation callback for the Cancel License form (product-based)
 */
function commerce_license_cancel_product_form_validate($form, &$form_state) {
  if (!($form_state['values']['confirm'] === 1)) {
    form_set_error('confirm', t('Please confirm that you want to cancel this license.'));
  }
}

/**
 * Submit callback for the Cancel License form (product-based)
 */
function commerce_license_cancel_product_form_submit($form, &$form_state) {
  // TODO should probably make sure the user still has access to do this!
  $query = new EntityFieldQuery;
  $query->entityCondition('entity_type', 'commerce_license')
        ->propertyCondition('status', COMMERCE_LICENSE_ACTIVE)
        ->propertyCondition('product_id', $form_state['values']['product']->product_id)
        ->propertyCondition('uid', $form_state['values']['account']->uid);

  $result = $query->execute();

  // Actually revoke the licenses
  $success = commerce_license_cancel_revoke_multiple($result['commerce_license'], 'product');

  // Redirect to current form with "success" param
  $form_state['redirect'] = url(current_path(), array('query' => array('success' => $success), 'absolute' => TRUE));
}

/**
 * Menu item callback for the Cancel License (order-based) page
 *
 * @param object $account
 *   Drupal user object
 * @param object $order
 *   Commerce order object
 *
 * @return string
 *   HTML for the page (most likely contains the cancellation form)
 */
function commerce_license_cancel_order_page($account, $order) {
  $output = '';

  if (filter_input(INPUT_GET, 'success')) {
    $output .= t('License no longer exists.');
    return $output;
  }

  $user_licenses = array();
  $licenses = commerce_license_get_order_licenses($order);
  if (!empty($licenses)) {
    foreach ($licenses as $lid => $license) {
      if ($license->uid == $account->uid) {
        $user_licenses[$lid] = $license;
      }
    }
  }

  if ($order && !empty($user_licenses)) {
    $form = drupal_get_form('commerce_license_cancel_order_form', $account, $order, $user_licenses);
    $output .= t('Please confirm that you would like to cancel the license associated with order #!oid', array('!oid' => $order->order_id));
    $output .= drupal_render($form);
  }
  else {
    // TODO there may be a more appropriate action here
    $output .= t('User does not have a license associated with this order.');
  }

  return $output;
}

/**
 * Cancel License form (order-based)
 *
 * @param array $form
 *   Standard Drupal form array
 * @param array $form_state
 *   Standard Drupal form state
 * @param object $account
 *   Drupal user object
 * @param object $order
 *   Commerce order object
 * @param array $user_licenses
 *   Array of Commerce License objects that match the user+order
 *
 * @return array
 *   Standard Drupal form array
 */
function commerce_license_cancel_order_form($form, &$form_state, $account, $order, $user_licenses) {
  $form['confirm'] = array(
    '#type' => 'checkbox',
    '#title' => t('Yes, I would like to cancel my license'),
  );

  $form['account'] = array(
    '#type' => 'value',
    '#value' => $account,
  );

  $form['order'] = array(
    '#type' => 'value',
    '#value' => $order,
  );

  $form['user_licenses'] = array(
    '#type' => 'value',
    '#value' => $user_licenses,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Cancel license'),
  );

  return $form;
}

/**
 * Validation callback for the Cancel License form (order-based)
 */
function commerce_license_cancel_order_form_validate($form, &$form_state) {
  if (!($form_state['values']['confirm'] === 1)) {
    form_set_error('confirm', t('Please confirm that you want to cancel this license.'));
  }
}

/**
 * Submit callback for the Cancel License form (order-based)
 */
function commerce_license_cancel_order_form_submit($form, &$form_state) {
  // TODO should probably make sure the user still has access to do this!

  // Actually revoke the licenses
  $success = commerce_license_cancel_revoke_multiple($form_state['values']['user_licenses'], 'order');

  // Redirect to current form with "success" param
  $form_state['redirect'] = url(current_path(), array('query' => array('success' => $success), 'absolute' => TRUE));
}

/**
 * Revokes Commerce License objects
 *
 * @param array $licenses
 *   Array of commerce license objects
 *
 * @return bool
 *   TRUE if licenses were cancelled
 */
function commerce_license_cancel_revoke_multiple($licenses, $type) {
  if (!empty($licenses)) {
    foreach ($licenses as $license_obj) {
      // If this is a "role" license, the user's role will be auto-removed via CommerceLicenseRole->save()
      $license_ent = entity_load_single('commerce_license', $license_obj->license_id);
      $license_ent->revoke();
      $cancelled = TRUE;
    }
  }

  if (isset($cancelled)) {
    drupal_set_message(t('Your license for this @type was cancelled.', array('@type' => $type)));
    return TRUE;
  }
  else {
    drupal_set_message(t('There was a problem cancelling this license. Please contact the site administrator.'), 'error');
    return FALSE;
  }
}
