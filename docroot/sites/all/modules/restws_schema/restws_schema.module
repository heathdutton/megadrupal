<?php

/**
 * @file
 * API functions and hook implementations for restws_schema module.
 */

/**
 * Implements hook_restws_resource_info().
 *
 * Adds a mapping layer between RestWS Schema and entity types.
 *
 * @return array
 *   In addition to the return value of hook_restws_resource_info(), we also
 *   include:
 *   - properties: See the return value of hook_entity_property_info()
 */
function restws_schema_restws_resource_info() {
  $result = array();
  foreach (restws_schema_get() as $type => $info) {
    $result[$type] = array(
      'label' => $info['label'],
      'class' => 'RestWSSchemaResourceController',
      'properties' => $info['properties'],
    );
  }
  return $result;
}

/**
 * Implements hook_restws_response_alter().
 *
 * @see RestWSBaseFormat::viewResource
 *
 * @todo Find out why the method used to override entityreference fields in
 *   RestWSSchemaResourceController::objectLoad isn't working for file fields (when
 *   file_entity module is enabled) - instead the return value of that function
 *   becomes the 'id' key in the response.
 * @todo Find out why the photos data isn't passed at all without file_entity
 *   module enabled. Is it because we're intercepting it too early in
 *   RestWSSchemaResourceController::objectLoad, so the data doesn't match the schema
 *   when passed to entity_metadata_wrapper() in
 *   RestWSSchemaResourceController::wrapper?
 */
function restws_schema_restws_response_alter(&$response, $function, $formatName) {
  // We want to take over what file_entity does here, and not classify images as
  // resources.
  if (module_exists('file_entity')) {
    switch ($function) {
      case 'viewResource':
        foreach ($response as &$value) {
          restws_schema_replace_file_entity_resource($value);
        }
        break;
      case 'queryResource':
        // This is an array of resources, under the 'list' key.
        foreach ($response['list'] as &$delta) {
          foreach ($delta as &$value) {
            restws_schema_replace_file_entity_resource($value);
          }
        }
        break;
    }
  }
}

/**
 * Replaces a file_entity resource value with our custom controller-set value.
 *
 * @param mixed $value
 *   By reference. A resource key value. Here we only care if it's the result of
 *   a file field's referenced file_entity resource.
 *
 * @see restws_schema_restws_response_alter()
 * @see RestWSSchemaResourceController::objectLoad
 */
function restws_schema_replace_file_entity_resource(&$value) {
  // We want what we pass to the file_entity 'id' key to become the contents of
  // the key, and to slay the current siblings (resource, uri, and id). Loop to
  // find each response key that is a file_entity.
  if (is_array($value) && isset($value['resource']) && $value['resource'] === 'file') {
    $value = $value['id'];
  }
}

/**
 * Implements hook_url_outbound_alter().
 *
 * Makes internal response links consistent with the format if explicitly set
 * (example: '.json'), rather than set in the GET header (example: Content-Type
 * application/json). In the former case, we want the URIs to reflect the
 * explicit method. In the latter case, we assume headers will persist.
 *
 * @see restws_resource_uri()
 */
function restws_schema_url_outbound_alter(&$path, &$options, $original_path) {
  if ($format = restws_schema_get_format()) {
    // The pattern should account for either a resource list link (example:
    // show), or an individual resource link (example: show/5).
    $resource_list = '(' . implode('|', array_keys(restws_schema_get())) . ')';
    $resource = $resource_list . '\/([0-9]*)';
    $pattern = '/' . $resource_list . '|' . $resource . '$/';
    if (preg_match($pattern, $path)) {
      $path = $path . '.json';
    }
  }
}

/**
 * Gets the REST format, if explicitly set.
 *
 * @return bool|RestWSFormatInterface
 *   The format name, or FALSE if not explicitly set.
 *
 * @see restws_page_callback()
 */
function restws_schema_get_format() {
  $id_arg = arg(1);
  $resource_arg = arg(0);
  $format = FALSE;
  if ($_SERVER['REQUEST_METHOD'] == 'GET' && ($pos = strpos($id_arg, '.')) && $format_name = substr($id_arg, $pos + 1)) {
    $format = restws_format($format_name);
  }
  elseif ($_SERVER['REQUEST_METHOD'] == 'GET' && ($pos = strpos($resource_arg, '.')) && $format_name = substr($resource_arg, $pos + 1)) {
    $format = restws_format($format_name);
  }

  return $format;
}

/**
 * Gets the API to Entity property map.
 *
 * @return array
 *   An associative array of info explaining how Drupal entities map to our API.
 *   Containing:
 *   - entity: The mapped entity type
 *   - bundle: The mapped bundle name
 *   - id: The entity ID key
 *   - ADDITIONAL PROPERTY INFO REQUIRED BY THE DEFINED SCHEMA.
 */
function restws_schema_map_get() {
  return variable_get('restws_schema_map', array());
}

/**
 * Gets schema info.
 *
 * @return array
 *   An associative array of resource info, keyed by restws resource key,
 *   containing:
 *   - label: The REST resource object label.
 *   - properties: See the return value of hook_entity_property_info().
 *
 * @todo Consider supporting multiple schemas. Example URIs:
 *   - http://example.com/SCHEMA1/RESOURCE1/ID.json
 *   - http://example.com/SCHEMA1/RESOURCE2/ID.json
 *   - http://example.com/SCHEMA2/RESOURCE1/ID.json
 */
function restws_schema_get() {
  return variable_get('restws_schema', array());
}
