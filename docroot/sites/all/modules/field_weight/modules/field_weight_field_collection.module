<?php
/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Holy long function names Batman.
 */
function field_weight_field_collection_form_field_weight_display_overview_form_alter(&$form, &$form_state, $form_id) {
  $node = $form_state['#node'];

  $weight_instances = $form['field_weight']['instances'] ? $form['field_weight']['instances']['#value'] : array();

  $fc_fields = _field_weight_field_collection_parse($weight_instances);

  // We move old field collections here so that they don't appear in $weight_instances
  // when displaying the form. We will need that information to save the weights, though.
  $form['field_weight']['fc_fields'] = array(
    '#type' => 'value',
    '#value' => array(),
  );
  $field_collection_fields = &$form['field_weight']['fc_fields']['#value'];

  // For each field collection field, count how many instances there are on this node
  foreach ($fc_fields as $fc_field) {
    $node_fc_field = field_get_items('node', $node, $fc_field);

    if ($node_fc_field === FALSE) {
      $node_fc_field = array();
    }

    // Hide the main field collection from the form
    $field_collection_fields[$fc_field] = $weight_instances[$fc_field];
    unset($form['field_weight'][$fc_field]);
    unset($weight_instances[$fc_field]);

    $fc_weights = _field_weight_field_collection_get_weight($node->vid);
    // Add delta-specific keys to weight instances. After we've added them all, we'll re-sort it and
    // regenerate the form.
    foreach ($node_fc_field as $delta => $node_fc_field_data) {
      // Is there anything in the database about this?
      if (isset($fc_weights["{$fc_field}_{$delta}"])) {
        $weight_instances["{$fc_field}_{$delta}"] = $fc_weights["{$fc_field}_{$delta}"];
      }

      $weight_instances["{$fc_field}_{$delta}"] = isset($weight_instances["{$fc_field}_{$delta}"]) ? $weight_instances["{$fc_field}_{$delta}"] : array();

      // Make sure we always have a label
      $fc_field_info_instance = field_info_instance('node', $fc_field, $node->type);
      $human_delta = $delta + 1;
      $weight_instances["{$fc_field}_{$delta}"]['label'] = "{$fc_field_info_instance['label']} (#{$human_delta})";
    }
  }

  // Re-sort $weight_instances and build the form again.
  // This is mostly the same code as in the form that's being altered.
  // The field formatter part is omitted since the main code doesn't use it
  // and since it wouldn't apply to what we're doing.
  uasort($weight_instances, 'drupal_sort_weight');

  $weight_delta = round(count($weight_instances) / 2);

  // Pass hidden value to form submit so we can use instances
  // already stored there.
  $form['field_weight']['instances'] = array(
    '#type' => 'value',
    '#value' => $weight_instances,
  );

  $instances = $weight_instances;

  // We've hacked things up a bit, but we've potentially lost instance labels in the process.
  // Get original instances so we can get them if we need them.
  $original_instances = field_info_instances('node', $node->type);

  foreach ($weight_instances as $field => $values) {
    if (!isset($instances[$field]['label'])) {
      $instances[$field]['label'] = $original_instances[$field]['label'];
    }

    $form['field_weight'][$field]['field'] = array(
      '#markup' => check_plain($instances[$field]['label']),
    );
    $form['field_weight'][$field]['weight'] = array(
      '#type' => 'weight',
      '#delta' => $weight_delta,
      '#default_value' => isset($values['weight']) ? $values['weight'] : 0,
      '#attributes' => array(
        'class' => array('field-weight'),
      ),
    );
    $form['field_weight'][$field]['hidden'] = array(
      '#type' => 'checkbox',
      '#default_value' => isset($values['hidden']) ? $values['hidden'] : 0,
    );
  }

  array_unshift($form['#submit'], '_field_weight_field_collection_before_field_weight_display_overview_form_submit');
  $form['#submit'][] = '_field_weight_field_collection_after_field_weight_display_overview_form_submit';

  // Resetting should also reset this module's entries.
  $form['reset']['#submit'][] = '_field_weight_field_collection_remove_weights';
}

function _field_weight_field_collection_parse($weight_instances) {
  $fc_fields = array();

  // Figure out which fields are field collection fields
  foreach ($weight_instances as $field_name => $field) {
    $field_info = field_info_field($field_name);
    if ($field_info && $field_info['type'] === 'field_collection') {
      // Yes.
      $fc_fields[] = $field_name;
    }
  }

  return $fc_fields;
}

function _field_weight_field_collection_before_field_weight_display_overview_form_submit(&$form, &$form_state) {
  $node = $form_state['#node'];

  // Put the field collections back into the values so that field_weight doesn't choke on saving them.
  $values = &$form_state['values']['field_weight'];

  $form_state['values']['field_weight_field_collection'] = array();
  $our_values = &$form_state['values']['field_weight_field_collection'];

  $old_fc_fields = &$values['fc_fields'];

  // Put back the actual field collection fields, and remove the virtual ones we added
  foreach ($old_fc_fields as $old_fc_field => $old_fc_field_value) {
    $node_old_fc_field_items = field_get_items('node', $node, $old_fc_field);

    // And add back the parent field to $weight_instances. It won't have a weight, but that's OK
    // since it'll never really be used with our module. If they disable our module, it won't break field_weight
    // either.
    $values[$old_fc_field] = $old_fc_field_value;
    if ($node_old_fc_field_items) {
      foreach ($node_old_fc_field_items as $delta => $node_old_fc_field) {
          // Move the delta to our own value key
          $our_values["{$old_fc_field}_{$delta}"] = $values["{$old_fc_field}_{$delta}"];
          unset($values["{$old_fc_field}_{$delta}"]);
      }
    }
  }
}

function _field_weight_field_collection_after_field_weight_display_overview_form_submit(&$form, &$form_state) {
  // Save the field collection delta information specifically into our table against nid, vid, type.
  $node = $form_state['#node'];
  $values = $form_state['values']['field_weight_field_collection'];

  $instances = array_keys($values);

  $weights = array();

  foreach ($instances as $field) {
    $weights[$field] = array(
      'weight' => $values[$field]['weight'],
      'hidden' => $values[$field]['hidden'],
    );
  }

  // If all weights are 0 (unchanged) will return empty.
  $empty_check = array_filter($weights);

  if (!empty($empty_check)) {
    db_merge('field_weight_field_collection')
      ->key(array('vid' => $node->vid))
      ->fields(array(
        'nid' => $node->nid,
        'vid' => $node->vid,
        'type' => $node->type,
        'field_weights' => serialize($weights),
      ))
      ->execute();
  }
  elseif (empty($empty_check)) {
    // Remove entry if user manually sets all weights to 0.
    _field_weight_field_collection_remove_weights($form, $form_state);
  }
}

/**
 * Helper function to get weights from field_weight table for nids passed in.
 */
function _field_weight_field_collection_get_weight($vid) {
  $result = db_select('field_weight_field_collection', 'fwfc')
    ->fields('fwfc', array('field_weights'))
    ->condition('vid', $vid)
    ->execute()->fetchField();

  return unserialize($result);
}

function _field_weight_field_collection_remove_weights(&$form, &$form_state) {
  $node = $form_state['#node'];

  db_delete('field_weight_field_collection')
    ->condition('vid', $node->vid)
    ->execute();
}

/**
 * Implements hook_node_delete().
 *
 * Clean up field_weight_field_collection table so we don't get any orphaned entries.
 *
 */
function field_weight_field_collection_node_delete($node) {
  db_delete('field_weight_field_collection')
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * Implements hook_node_revision_delete().
 *
 * Clean up field_weight_field_collection table so we don't get any orphaned entries.
 */
function field_weight_field_collection_node_revision_delete($node) {
  db_delete('field_weight')
    ->condition('vid', $node->vid)
    ->execute();
}

/**
 * Implements hook_node_update().
 *
 * When we create a new revision, we want to copy the
 * field_weight_field_collection * definitions
 * from the old revision if any exist.
 */
function field_weight_field_collection_node_update($node) {
  // Don't need to do anything if no new revision
  if ($node->original->vid !== $node->vid) {
    $field_weights = _field_weight_field_collection_get_weight($node->original->vid);

    // ...or if no field weights.
    if ($field_weights) {
      // And just save it with the new vid
      db_merge('field_weight_field_collection')
        ->key(array('vid' => $node->vid))
        ->fields(array(
          'nid' => $node->nid,
          'vid' => $node->vid,
          'type' => $node->type,
          'field_weights' => serialize($field_weights),
        ))
        ->execute();
    }
  }
}

function field_weight_field_collection_entity_view_alter(&$build, $type) {
  // So, we are engaging in some righteous evil surgery here. We're going to
  // pull out the individual field collection items and put them in $build,
  // along with #weight. Then we will remove the main FC fields from $build.

  // Similar logic to field_weight here
  if ($type == 'node') { // May be replaced with option variables, if this expands to all entities.
    // Check if the bundle type is enabled.
    $enabled_node_types = variable_get('field_weight_node_types', array());
    if (in_array($build['#bundle'], $enabled_node_types, TRUE)) {
      // See if any field collection delta weights have been set.
      $fc_weights = _field_weight_field_collection_get_weight($build['#node']->vid);
      if ($fc_weights) {
        // Unset all parent field collections from $build.
        $fcs = _field_weight_field_collection_parse(field_info_instances('node', $build['#node']->type));

        foreach ($fcs as $fc) {
          // Get a copy of the field collection field
          $fc_structure = $build[$fc];

          // Add the deltas to $build
          $node_fc_items = $build[$fc]['#items'];

          foreach ($node_fc_items as $delta => $node_fc) {
            // Use the render array that's already in the $build array,
            // for maximum predictability or something
            // Put it underneath the existing FC structure and fix up the
            // IDs/contents

            // $build["{$fc}_{$delta}"] = $build[$fc][$delta]['entity']['field_collection_item'][$node_fc['value']];
            $build["{$fc}_{$delta}"] = $fc_structure;
            $new_item = &$build["{$fc}_{$delta}"];

            // Unset deltas that aren't this one
            foreach (element_children($new_item) as $element_delta) {
              if ($element_delta !== $delta) {
                unset($new_item[$element_delta]);
                unset($new_item['#items'][$element_delta]);
              }
            }
          }

          unset($build[$fc]);
        }

        // Apply weight/hidden settings.
        foreach ($fc_weights as $key => $values) {
          $build[$key]['#weight'] = $values['weight'];
          if ($values['hidden'] == TRUE) {
            // If field has been hidden set this to FALSE, therefore won't be displayed.
            $build[$key]['#access'] = FALSE;
          }
        }
      }
    }
  }
}

