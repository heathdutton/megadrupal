<?php

/**
 * @file
 * Selz module.
 *
 * Provides a Selz link formatter for integrate a selz button or widget.
 * Note that this is just a field formatter for Link fields, not a field.
 * See README.txt for more information.
 */

/**
 * Implements hook_field_formatter_info().
 *
 * Defines a formatter for selz a button or widget.
 */
function selz_field_formatter_info() {
  $formatters = array();

  $formatters['selz'] = array(
    'label' => t('Selz widget/button for a selz product link'),
    'field types' => array('link_field'),
    'settings' => array(
      'type' => 'widget',
      'position' => 'right',
      'button_color' => '6D48CC',
      'button_color_text' => 'FFFFFF',
      'header_color_order' => '6D48CC',
      'header_color_order_text' => 'FFFFFF',
      'button_text' => t('Get it now'),
      'logos' => 0,
      'overlay' => 1,
      'fixed_width' => '',
    ),
  );

  return $formatters;
}

/**
 * Implements hook_theme().
 */
function selz_theme($existing, $type, $theme, $path) {
  return array(
    'selz_output' => array(
      'variables' => array(
        'type' => 'widget',
        'position' => 'right',
        'button_color' => '6D48CC',
        'button_color_text' => 'FFFFFF',
        'header_color_order' => '6D48CC',
        'header_color_order_text' => 'FFFFFF',
        'button_text' => t('Get it now'),
        'logos' => FALSE,
        'overlay' => TRUE,
        'fixed_width' => '',
        'url_value' => 'http://selz.co/',
      ),
      'template' => 'templates/selz-output',
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 *
 * Formats map/link fields.
 */
function selz_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {

  $element = array();

  $type = $display['settings']['type'];
  $position = $display['settings']['position'];
  $button_color = check_plain($display['settings']['button_color']);
  $button_color_text = check_plain($display['settings']['button_color_text']);
  $header_color_order = check_plain($display['settings']['header_color_order']);
  $header_color_order_text = check_plain($display['settings']['header_color_order_text']);
  $button_text = check_plain($display['settings']['button_text']);
  $logos = $display['settings']['logos'] ? TRUE : FALSE;
  $overlay = $display['settings']['overlay'] ? TRUE : FALSE;
  $fixed_width = check_plain($display['settings']['fixed_width']);

  foreach ($items as $delta => $item) {
    $url_value = check_plain($item['url']);
    $title = check_plain($item['title']);
    $button_text = ($url_value == $title) ? t('Get it now') : $title;

    $element[$delta] = array(
      '#markup' => theme('selz_output', array(
        'type' => $type,
        'position' => $position,
        'button_color' => $button_color,
        'button_color_text' => $button_color_text,
        'header_color_order' => $header_color_order,
        'header_color_order_text' => $header_color_order_text,
        'button_text' => $button_text,
        'logos' => $logos,
        'overlay' => $overlay,
        'fixed_width' => $fixed_width,
        'url_value' => urlencode($url_value),
        )
      ),
    );
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function selz_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element['type'] = array(
    '#title' => t('Display type'),
    '#type' => 'select',
    '#options' => array(
      'widget' => t('Widget'),
      'button' => t('Button'),
    ),
    '#default_value' => $settings['type'],
  );

  $element['fixed_width'] = array(
    '#title' => t('Fixed width (px)'),
    '#type' => 'textfield',
    '#size' => 3,
    '#maxlength' => 6,
    '#description' => t('Introduces a fixed width in pixels for a non-fluid behavior'),
    '#states' => array(
      'visible' => array(
        ':input[name*="[settings_edit_form][settings][type]"]' => array('value' => 'widget'),
      ),
    ),
    '#default_value' => $settings['fixed_width'],
  );

  $element['position'] = array(
    '#title' => t('Price position'),
    '#type' => 'select',
    '#options' => array(
      'right' => t('Right'),
      'above' => t('Above'),
      'fluid_above' => t('Fluid above'),
    ),
    '#states' => array(
      'visible' => array(
        ':input[name*="[settings_edit_form][settings][type]"]' => array('value' => 'button'),
      ),
    ),
    '#default_value' => $settings['position'],
  );

  $element['button_color'] = array(
    '#type' => 'jquery_colorpicker',
    '#title' => t('Button color'),
    '#default_value' => $settings['button_color'],
  );

  $element['button_color_text'] = array(
    '#type' => 'jquery_colorpicker',
    '#title' => t('Button color text'),
    '#default_value' => $settings['button_color_text'],
  );

  $element['header_color_order'] = array(
    '#type' => 'jquery_colorpicker',
    '#title' => t('Checkout header color'),
    '#default_value' => $settings['header_color_order'],
  );

  $element['header_color_order_text'] = array(
    '#type' => 'jquery_colorpicker',
    '#title' => t('Checkout header color text'),
    '#default_value' => $settings['header_color_order_text'],
  );

  $element['button_text'] = array(
    '#title' => t('Button text'),
    '#type' => 'textfield',
    '#default_value' => $settings['button_text'],
  );

  $element['logos'] = array(
    '#type' => 'checkbox',
    '#title' => t('Add payment logos'),
    '#default_value' => (isset($settings['logos'])) ? (int) $settings['logos'] : 0,
  );

  $element['overlay'] = array(
    '#type' => 'checkbox',
    '#title' => t('Overlay'),
    '#description' => t('Buyers interact in an overlay layer'),
    '#default_value' => (isset($settings['overlay'])) ? (int) $settings['overlay'] : 0,
  );

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function selz_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $button_text = check_plain($settings['button_text']);
  $width_fixed = check_plain($settings['fixed_width']);
  $overlay = $settings['overlay'] ? t('Yes') : t('No');
  $logos = $settings['logos'] ? t('Yes') : t('No');

  $summary = array();
  $summary[] = t('Type: @type', array('@type' => $settings['type']));
  $summary[] = t('Button text: @button_text', array('@button_text' => $button_text));
  $summary[] = t('Overlay: @overlay', array('@overlay' => $overlay));
  $summary[] = t('Add payment logos: @logos', array('@logos' => $logos));

  if ($settings['type'] == 'widget' && !empty($width_fixed)) {
    $summary[] = t('Fixed width: @fixed_width px', array('@fixed_width' => $fixed_width));
  }
  else {
    $summary[] = t('Position: @position', array('@position' => $settings['position']));
  }

  return implode(', ', $summary);
}
