<?php
/**
 * @file
 * supercookie.module
 */

// BIG IMPORTANT MESSAGE: NEVER EVER __get $this->scid OR $_supercookie->scid
// FROM THIS MOD'S CODE; ALWAYS USE lowerCamel $this->scId INSTEAD!
//
// Why: The first __get of the global $_supercookie->scid property fill force a
// redirect to flush cookie data to the client. Without this flush, we're not
// able to sync client and server fingerprint to establish the global object.
// This only happens once when the client is establishing a new supercookie
// link per the defined cookie interval.
//
// @see SuperCookie::__get()
/**
 * The SuperCookie class.
 */
class SuperCookie {

  public $scId = 0;
  protected $scid = 0;
  public $uid = 0;
  public $created = 0;
  public $expires = 0;
  public $data = NULL;
  public $tid = array();
  public $nid = array();
  public $custom = array();

  /**
   * Constructor method.
   */
  public function __construct() {

    $this->init();

    return $this;
  }
  /**
   * TODO.
   */
  public function __get($name) {

    if ($name == 'scid') {
      // Force a browser refresh if caller is accessing scid for the first time
      // and the cookie has been written.
      $path = drupal_get_path_alias();
      $args = drupal_get_query_parameters();
      if (!empty($path) && $path !== drupal_get_path_alias('supercookie')) {
        if (empty($this->{$name})) {
          if (empty($args[$name]) && !empty($_COOKIE)) {
            drupal_goto($path, array(
              'query' => array(
                $name => TRUE,
              ) + $args,
            ));
            drupal_exit();
          }
        }
      }

      if (empty($this->scid)) {
        $this->init();
      }

      return $this->scId;
    }

    return $this->{$name};
  }
  /**
   * TODO.
   */
  public function __set($name, $value) {
    $this->{$name} = $value;
  }

  /**
   * TODO.
   */
  private function __read() {

    $row = NULL;

    // Check for mongodb storage.
    if (variable_get('supercookie_mongodb', FALSE) && module_exists('mongodb')) {
      $row = mongodb_collection('supercookie')
        ->findOne(array('scid' => $this->scId));
    }

    // Default to standard mysql storage.
    if (empty($row)) {
      $row = db_select('supercookie', 'sc')
        ->fields('sc', array(
          'scid',
          'uid',
          'created',
          'expires',
          'data',
          'tid',
          'nid',
          'custom',
        ))
        ->condition('sc.scid', $this->scId)
        ->execute()
        ->fetchObject();
    }

    return $row;
  }
  /**
   * TODO.
   */
  private function __write($timestamp) {

    global $user;

    $use_mongodb = (variable_get('supercookie_mongodb', FALSE) && module_exists('mongodb'));

    // Allow modules to populate the serialized custom field.
    $modules = module_implements('supercookie_custom');
    foreach ($modules as $module) {
      $this->custom[$module] = module_invoke($module, 'supercookie_custom');
    }

    $row = (object) array(
      'uid' => $user->uid,
      'created' => $timestamp,
      'data' => $this->data,
      'tid' => $this->tid,
      'nid' => $this->nid,
      'custom' => $this->custom,
    );

    if (!empty($this->scId)) {
      $row->scid = $this->scId;
    }
    else {
      $row->expires = $this->expires;
    }

    if ($use_mongodb) {
      // Check for mongodb storage.
      $row_mongodb = array(
        '$set' => (array) $row,
      );

      if (empty($row->scid)) {
        mongodb_collection('supercookie')
          ->insert($row_mongodb);
      }
      else {
        mongodb_collection('supercookie')
          ->update(array('_id' => $row->scid), $row_mongodb);
      }
    }
    else {
      // Default to standard mysql storage.
      if (!empty($this->scId)) {
        drupal_write_record('supercookie', $row, 'scid');
      }
      else {
        drupal_write_record('supercookie', $row);
      }
    }

    $this->scId = $row->scid;
    $this->scid = $this->scId;
  }
  /**
   * TODO.
   */
  private function __delete($timestamp) {
    // x1118 room 238
    $use_mongodb = (variable_get('supercookie_mongodb', FALSE) && module_exists('mongodb'));
    if ($use_mongodb) {
      // TODO.
      $result = mongodb_collection('supercookie')
        ->remove(array(
          'expired' => $timestamp,
          'scid' => $this->scId,
        ));
    }
    else {
      $result = db_delete('supercookie')
        ->condition('expires', $timestamp, '<')
        ->condition('scid', $this->scId)
        ->execute();
    }

    return $result;
  }

  /**
   * TODO.
   */
  protected function reset() {

    global $_supercookie;

    if (empty($this->scId)) {
      $this->scId = 0;
      $this->scid = $this->scId;
      $this->uid = 0;
      $this->created = 0;
      $this->expires = 0;
      $this->tid = array();
      $this->nid = array();
      $this->custom = array();
    }
    else {
      $row = $this->__read();

      if (!empty($row)) {
        $this->scId = $row->scid;
        $this->scid = $row->scid;
        $this->uid = $row->uid;
        $this->created = $row->created;
        $this->expires = $row->expires;
        $this->data = $row->data;
        $this->tid = unserialize($row->tid);
        $this->nid = unserialize($row->nid);
        $this->custom = unserialize($row->custom);
      }
      else {
        $this->scId = 0;
        $this->reset();
      }
    }

    $GLOBALS['_supercookie'] = &$this;
    $_supercookie = &$this;

    return $_supercookie;
  }
  /**
   * TODO.
   */
  protected function init() {

    // Get client's specified scid.
    $scid_client = 0;
    if (!empty($_COOKIE[variable_get('supercookie_name_server', 'supercookie-server')])) {
      $scid_client = $_COOKIE[variable_get('supercookie_name_server', 'supercookie-server')];
    }

    // Expire user's db record and cookies if client scid does not match hash
    // lookup scid result. Note: This also prevents cookie hijack attempts
    // from client (e.g. editing scid cookie values).
    if (!empty($scid_client) && !empty($this->scId)) {
      if ($scid_client !== $this->scId) {
        db_delete('supercookie')
          ->condition('scid', $this->scId)
          ->execute();

        setcookie(variable_get('supercookie_name_server', 'supercookie-server'), '', 0);

        // Force new session for current user.
        $this->scId = 0;
        $this->scid = $this->scId;
      }
    }
    else {
      if (empty($this->scId)) {
        $this->scId = $scid_client;
        $this->scid = $this->scId;
      }
    }

    return $this->reset();
  }
  /**
   * TODO.
   */
  public function match(&$hash) {

    // Check db for fingerprint match on data.
    $scid = db_select('supercookie', 'sc')
      ->fields('sc', array(
        'scid',
      ))
      ->condition('data', $hash)
      ->range(0, 1)
      ->execute()
      ->fetchField();

    $this->scId = (!empty($scid) ? $scid : 0);
    $this->scid = $this->scId;
    $this->data = $hash;

    return $this->init();
  }
  /**
   * TODO.
   */
  public function save($timestamp) {

    // Ignore client time; use server time exclusively.
    $timestamp = REQUEST_TIME;
    $expires = variable_get('supercookie_expire', 86400);
    if ($expires == 'calendar_day') {
      $expires = strtotime(date('Y-m-d', $timestamp) . ' + 1 day');
    }
    else {
      $expires = ($timestamp + $expires);
    }

    if (empty($this->expires)) {
      $this->expires = $expires;
    }

    // Clean up expired sessions.
    if ($this->expires < $timestamp) {
      $expired = $this->__delete($timestamp);

      // Reset object and set new expiration.
      if (!empty($expired)) {
        $this->reset();
        $this->expires = $expires;
      }
    }

    // Insert or update fingerprint record.
    $this->__write($timestamp);

    // Return populated supercookie.
    return $this->reset();
  }
  /**
   * TODO.
   */
  public function touch($expires = TRUE) {

    if ($expires) {
      // Update expiration; note that created is reset to client's
      // current timestamp on every page request.
      // @see supercookie_json()
      $interval = variable_get('supercookie_expire', 86400);
      if ($interval !== 'calendar_day') {
        db_update('supercookie')
          ->expression('expires', 'created + :interval', array(
            ':interval' => $interval,
          ))
          ->condition('scid', $this->scId)
          ->execute();

        $this->reset();
        setcookie(variable_get('supercookie_name_server', 'supercookie-server'), '', 0);
        setcookie(variable_get('supercookie_name_server', 'supercookie-server'), $this->scId, $this->expires);
      }
    }

    return $this;
  }

  // Functions to get tracked node and taxonomy_term entities.
  /**
   * @param string $type The tracked entity type to sort (node, taxonomy_term)
   * @param string $field Either "count" or "viewed"
   * @param int $direction Either SORT_DESC or SORT_ASC
   */
  public function trackingSortEntities($type = 'node', $field = 'viewed', $direction = SORT_DESC) {

    $source = &$this->nid;
    if ($type == 'taxonomy_term') {
      $source = &$this->tid;
    }

    if (empty($source)) {
      return $this;
    }

    // Convert keys to strings so they're maintained during multisort.
    foreach ($source as $key => &$meta) {
      if (is_numeric($key)) {
        $source["entity_id_$key"] = $meta;
        unset($source[$key]);
      }
    }

    // Set sort arrays.
    foreach ($source as $entity_id => &$meta) {
      foreach ($meta as $key => $val) {
        ${"sort_" . $key}[$entity_id] = $val;
      }
    }

    // Apply requested sort array to $source.
    array_multisort(${"sort_" . $field}, $direction, $source);

    // Convert keys back to int.
    foreach ($source as $key => &$meta) {
      if (!is_numeric($key)) {
        $source[(int) ltrim($key, 'entity_id_')] = $meta;
        unset($source[$key]);
      }
    }

    return $this;
  }
  /**
   * TODO.
   */
  public function trackingLoadLastEntity($type = 'node') {

    $property = 'nid';
    if ($type == 'taxonomy_term') {
      $property = 'tid';
    }

    $sorted = $this
      ->trackingSortEntities($type, 'viewed', SORT_DESC)
      ->{$property};

    $entity = array_slice($sorted, 0, 1, TRUE);
    $entity = array_keys($entity);
    $entity = entity_load($type, $entity);

    return array_shift($entity);
  }

}

/**
 * Implements hook_library().
 */
function supercookie_library() {

  $libraries = array();

  $libraries['json.prune'] = array(
    'title' => 'JSON.prune',
    'website' => 'https://github.com/Canop/JSON.prune',
    'version' => '1.0',
    'js' => array(
      'sites/all/libraries/JSON.prune.js' => array(),
    ),
  );

  $libraries['cryptojs.md5'] = array(
    'title' => 'CryptoJS.MD5',
    'website' => 'https://code.google.com/p/crypto-js/#MD5',
    'version' => '3.1.2',
    'js' => array(
      'sites/all/libraries/md5.js' => array(),
    ),
  );

  return $libraries;
}
/**
 * Implements hook_init().
 */
function supercookie_init() {

  global $_supercookie;
  if (empty($_supercookie)) {
    $_supercookie = new SuperCookie();
  }

  if (variable_get('supercookie_external_js', TRUE)) {
    // Cool trick to pull scripts hosted on Github.
    // @see http://stackoverflow.com/questions/17341122/link-and-execute-external-javascript-file-hosted-on-github, https://raw.githubusercontent.com/Canop/JSON.prune/master/JSON.prune.js
    drupal_add_js('//rawgit.com/Canop/JSON.prune/master/JSON.prune.js', 'external');
    drupal_add_js('//crypto-js.googlecode.com/svn/tags/3.1.2/build/rollups/md5.js', 'external');
  }
  else {
    drupal_add_library('supercookie', 'json.prune');
    drupal_add_library('supercookie', 'cryptojs.md5');
  }

  drupal_add_js(drupal_get_path('module', 'supercookie') . '/supercookie.js');
  drupal_add_js(array(
    'supercookie' => array(
      'scid' => $_supercookie->scId,
      'json_path' => '/' . drupal_get_path_alias('supercookie'),
      'name_server' => variable_get('supercookie_name_server', 'supercookie-server'),
      'name_header' => variable_get('supercookie_name_header', 'X-Drupal-Supercookie'),
    ),
  ), 'setting');

}
/**
 * Implements hook_menu().
 */
function supercookie_menu() {

  $items['admin/people/supercookie'] = array(
    'title' => 'Supercookie',
    'description' => 'Configure sitewide settings for the supercookie.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('supercookie_settings_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer supercookie'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['supercookie'] = array(
    'title' => 'Supercookie callback',
    'page callback' => 'supercookie_json',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}
/**
 * Implements hook_permission().
 */
function supercookie_permission() {
  return array(
    'administer supercookie' => array(
      'title' => t('Administer supercookie'),
    ),
  );
}
/**
 * Implements hook_cron().
 */
function supercookie_cron() {

  // Clean up expired/abandoned records.
  $count = 0;
  $interval = variable_get('supercookie_expire', 86400);
  if ($interval !== 'calendar_day') {
    $count = db_delete('supercookie')
      ->where("(created + :interval) > expires", array(
        ':interval' => $interval,
      ))
      ->execute();
  }
  else {
    $count = db_delete('supercookie')
      ->where("expires < UNIX_TIMESTAMP(DATE_FORMAT(FROM_UNIXTIME(created) + INTERVAL 1 DAY, :date_format))", array(
        ':date_format' => '%Y-%m-%d',
      ))
      ->execute();
  }

  if (!empty($count)) {
    watchdog('supercookie', 'Pruned @count from supercookie.', array(
      '@count' => $count . format_plural($count, ' fingerprint record', ' fingerprint records'),
    ), WATCHDOG_INFO);
  }

}
/**
 * Implements hook_entity_view().
 */
function supercookie_entity_view($entity, $type, $view_mode, $langcode) {

  global $_supercookie;

  if ($view_mode == 'full') {
    $field_map = field_info_field_map();

    switch ($type) {
      case 'node':
        // Track view count for full node view.
        if (variable_get('supercookie_track_nid', FALSE)) {
          $nid = $_supercookie->nid;
          $nid[$entity->nid] = array(
            'count' => (!empty($_supercookie->nid[$entity->nid]['count']) ? $_supercookie->nid[$entity->nid]['count'] : 0) + 1,
            'viewed' => REQUEST_TIME,
          );
          $_supercookie->nid = $nid;
        }

        // Track view count for term views on this node.
        if (variable_get('supercookie_track_tid', FALSE)) {
          $tid = $_supercookie->tid;
          $field_usage = array_intersect(array_keys((array) $entity), array_keys($field_map));
          foreach ($field_usage as $field_name) {
            if ($field_map[$field_name]['type'] == 'taxonomy_term_reference') {
              if (!empty($entity->{$field_name}[$entity->language])) {
                foreach ($entity->{$field_name}[$entity->language] as &$term) {
                  // Add or update view count per tid.
                  $tid[$term['tid']] = array(
                    'count' => (!empty($_supercookie->tid[$term['tid']]['count']) ? $_supercookie->tid[$term['tid']]['count'] : 0) + 1,
                    'viewed' => REQUEST_TIME,
                  );
                }
              }
            }
          }

          $_supercookie->tid = $tid;
        }
        break;

      case 'taxonomy_term':
        // Track view count for full taxonomy_term view.
        if (variable_get('supercookie_track_tid_page', FALSE)) {
          $tid = $_supercookie->tid;
          $tid[$entity->tid] = array(
            'count' => (!empty($_supercookie->tid[$entity->tid]['count']) ? $_supercookie->tid[$entity->tid]['count'] : 0) + 1,
            'viewed' => REQUEST_TIME,
          );
          $_supercookie->tid = $tid;
        }
        break;
    }

    // Save to db.
    if (variable_get('supercookie_track_nid', FALSE) || variable_get('supercookie_track_tid', FALSE) || variable_get('supercookie_track_tid_page', FALSE)) {
      $_supercookie->save(NULL);
    }
  }

}
/**
 * Implements hook_apachesolr_search_page_alter().
 */
function supercookie_apachesolr_search_page_alter(&$build, &$search_page) {

  global $_supercookie;

  if ($search_page['page_id'] == 'taxonomy_search') {
    if (variable_get('supercookie_track_tid_page', FALSE)) {
      $tid_active = $search_page['settings']['apachesolr_search_path_replacer'];
      if (is_numeric($tid_active)) {
        $tid = $_supercookie->tid;
        $tid[$tid_active] = array(
          'count' => (!empty($_supercookie->tid[$tid_active]['count']) ? $_supercookie->tid[$tid_active]['count'] : 0) + 1,
          'viewed' => REQUEST_TIME,
        );

        $_supercookie->tid = $tid;
        $_supercookie->save(NULL);
      }
    }
  }

}
/**
 * Implements hook_block_info().
 */
function supercookie_block_info() {

  $blocks = array();

  // Check that all data dependencies are in place for these blocks.
  $tracking_type = variable_get('supercookie_track_node_type', '');
  $tracking_type = !empty($tracking_type);
  $tracking_nid = variable_get('supercookie_track_nid', FALSE);
  $tracking_tid = (variable_get('supercookie_track_tid', FALSE) || variable_get('supercookie_track_tid_page', FALSE));
  $tracking_tid_index = variable_get('taxonomy_maintain_index_table', TRUE);

  if ($tracking_type && $tracking_nid && $tracking_tid && $tracking_tid_index) {
    $blocks['node_next'] = array(
      'info' => t('Supercookie: Next Node'),
      'cache' => DRUPAL_CACHE_CUSTOM,
    );

    $blocks['node_related'] = array(
      'info' => t('Supercookie: Related Nodes'),
      'cache' => DRUPAL_CACHE_CUSTOM,
    );
  }

  return $blocks;
}
/**
 * Implements hook_block_view().
 */
function supercookie_block_view($delta) {

  global $_supercookie;

  $blocks = module_invoke('supercookie', 'block_info');
  $block = NULL;

  switch ($delta) {
    case 'node_next':
    case 'node_related':
      $bundle = variable_get('supercookie_track_node_type', '');
      $prev_term = $_supercookie->trackingLoadLastEntity('taxonomy_term');

      // Exit if current user has not viewed a term page and/or node with
      // assigned terms yet.
      if (empty($prev_term)) {
        break;
      }

      $next_items = &drupal_static(__FUNCTION__ . '_next_items_' . $_supercookie->scid . '_' . $prev_term->tid);
      if (empty($next_items)) {
        // Get adjacent term nodes.
        $next_nodes = taxonomy_select_nodes($prev_term->tid, FALSE);
        $next_nodes = node_load_multiple($next_nodes);

        // Get previously viewed nodes.
        $prev_nodes = $_supercookie
          ->trackingSortEntities('node', 'viewed', SORT_ASC)
          ->nid;

        // Loop adjacent nodes.
        foreach ($next_nodes as $nid => &$node) {
          // Set default item sorting key.
          $item_key = 'next-' . $node->changed . '.' . str_pad($node->nid, 10, '0', STR_PAD_LEFT);
          // Set previously viewed item sorting key.
          if (in_array($node->nid, array_keys($prev_nodes))) {
            $item_key = 'prev-' . $prev_nodes[$node->nid]['viewed'] . '.' . str_pad($node->nid, 10, '0', STR_PAD_LEFT);
          }
          // Add item to appropriate block list.
          $next_items[($node->type == $bundle ? 'node_next' : 'node_related')][$item_key] = array(
            'data' => l($node->title, 'node/' . $node->nid),
            'class' => array($item_key),
          );
        }
      }

      // Sort block list by key.
      ksort($next_items[$delta]);

      if ($delta == 'node_next') {
        // Limit 1 for "Next Node".
        $next_items[$delta] = array(array_shift($next_items[$delta]));
      }
      else {
        // Limit 3 for "Related Nodes".
        $next_items[$delta] = array_slice($next_items[$delta], 0, 3);
      }

      // Populate block.
      if (!empty($next_items[$delta])) {
        $block = array(
          'subject' => $blocks[$delta]['info'],
          'content' => array(
            '#theme' => 'item_list',
            '#items' => $next_items[$delta],
          ),
        );
      }
      break;
  }

  return $block;
}

/**
 * Administrative settings for Supercookie.
 */
function supercookie_settings_form($form, &$form_state) {

  global $_supercookie;

  // Make sure drupal_check_module is defined.
  // @see https://www.drupal.org/node/2258019
  include_once DRUPAL_ROOT . '/includes/install.inc';
  drupal_check_module('supercookie');

  if (empty($form_state['submitted'])) {
    drupal_set_message(t('Changing these values will invalidate all current supercookie data. Users will receive a new supercookie session when they next visit the site.'), 'warning', FALSE);
    drupal_set_message(t("You may use the global \$_supercookie object in code like this:<br /><pre>global \$_supercookie;<br />\$scid = \$_supercookie->scid;</pre>The scid value will be unique across all site visitors within the specified expiration interval. Your current \$_supercookie->scid is @scid.", array(
      '@scid' => $_supercookie->scid,
    )), FALSE);
  }

  $period_expire = array(
    'calendar_day' => t('Calendar day'),
  ) + drupal_map_assoc(array(
    300, 900, 1800, 3600, 10800, 21600, 32400, 43200, 86400, 172800, 345600, 604800, 2419200, 7776000, 31536000,
  ), 'format_interval');
  $period_pageview = drupal_map_assoc(array(
    5, 10, 20, 30, 60, 120, 300, 900, 1800, 3600, 10800, 21600, 32400, 43200,
  ), 'format_interval');
  $libraries = module_invoke('supercookie', 'library');

  $form['options'] = array(
    '#type' => 'fieldset',
    '#title' => t('Options'),
    '#collapsible' => TRUE,
  );

  $form['options']['supercookie_expire'] = array(
    '#type' => 'select',
    '#title' => t('Cookie expiration'),
    '#description' => t('All site visitors will have a unique supercookie within this interval.'),
    '#default_value' => variable_get('supercookie_expire', 86400),
    '#options' => $period_expire,
  );

  $form['options']['supercookie_pageview_average'] = array(
    '#type' => 'select',
    '#title' => t('Page view average'),
    '#description' => t("This interval represents the average page view time for users on your site. You can use the number reported by your site's metrics service provider, or make a reasonable guess."),
    '#default_value' => variable_get('supercookie_pageview_average', 900),
    '#options' => $period_pageview,
  );

  if (module_exists('mongodb')) {
    $form['options']['supercookie_mongodb'] = array(
      '#type' => 'checkbox',
      '#title' => t('Use mongodb collection for data storage.'),
      '#description' => NULL,
      '#default_value' => variable_get('supercookie_mongodb', FALSE),
    );
  }

  if (module_exists('node') && module_exists('taxonomy')) {
    $form['tracking'] = array(
      '#type' => 'fieldset',
      '#title' => t('Related Content'),
      '#description' => t("Related content blocks will become available if content type is selected, the node option and 1 or more taxonomy term tracking options are selected below.<br /><br />These blocks can be used to deliver unique, related content to site visitors based on nodes they have previously viewed and the last taxonomy term that they encounter."),
      '#collapsible' => TRUE,
    );

    $node_types = node_type_get_types();
    $node_types_options = array();
    foreach ($node_types as $key => &$meta) {
      $node_types_options[$key] = $meta->name;
    }

    $form['tracking']['supercookie_track_node_type'] = array(
      '#type' => 'select',
      '#title' => t('Content type'),
      '#options' => $node_types_options,
      '#default_value' => variable_get('supercookie_track_node_type', ''),
      '#required' => FALSE,
      '#empty_value' => '',
    );

    $form['tracking']['supercookie_track_nid'] = array(
      '#type' => 'checkbox',
      '#title' => t('Track view counts for node pages.'),
      '#description' => NULL,
      '#default_value' => variable_get('supercookie_track_nid', FALSE),
    );

    $form['tracking']['supercookie_track_tid_page'] = array(
      '#type' => 'checkbox',
      '#title' => t('Track view counts for taxonomy term pages.'),
      '#description' => NULL,
      '#default_value' => variable_get('supercookie_track_tid_page', FALSE),
    );

    $form['tracking']['supercookie_track_tid'] = array(
      '#type' => 'checkbox',
      '#title' => t('Track taxonomy term view counts from node pages.'),
      '#description' => NULL,
      '#default_value' => variable_get('supercookie_track_tid', FALSE),
    );
  }

  $form['obfuscation'] = array(
    '#type' => 'fieldset',
    '#title' => t('Obfuscation'),
    '#description' => t("Supercookies have been criticized as a means of silently gathering user data. While this module only stores a hash of the user agent and server-side variables collected from the user, you may still wish to obfuscate the default machine names and !alias.", array(
      '!alias' => l(t('alias the "supercookie" path'), 'admin/config/search/path'),
    )),
    '#collapsible' => TRUE,
  );

  $form['obfuscation']['supercookie_name_server'] = array(
    '#type' => 'textfield',
    '#title' => t('Cookie name - Server'),
    '#default_value' => variable_get('supercookie_name_server', 'supercookie-server'),
    '#required' => TRUE,
    '#maxlength' => 20,
  );

  $form['obfuscation']['supercookie_name_header'] = array(
    '#type' => 'textfield',
    '#title' => t('HTTP header'),
    '#default_value' => variable_get('supercookie_name_header', 'X-Drupal-Supercookie'),
    '#required' => TRUE,
    '#maxlength' => 20,
  );

  $form['obfuscation']['supercookie_external_js'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use external Javascript libraries (not recommended for production sites).'),
    '#description' => t('If left unchecked, you will need to download the !md5 and !jsonprune scripts and save them to the sites/all/libraries directory.', array(
      '!md5' => l($libraries['cryptojs.md5']['title'], $libraries['cryptojs.md5']['website']),
      '!jsonprune' => l($libraries['json.prune']['title'], $libraries['json.prune']['website']),
    )),
    '#default_value' => variable_get('supercookie_external_js', TRUE),
  );

  $form = system_settings_form($form);

  $form['#submit'][] = 'supercookie_settings_form_submit';

  return $form;
}
/**
 * Additional submit handler for settings form.
 */
function supercookie_settings_form_submit($form, &$form_state) {

  db_delete('supercookie')
    ->execute();

  // Enable term indexing for nodes if tracking tids.
  // @see supercookie_block_view()
  if (variable_get('supercookie_track_tid', FALSE) || variable_get('supercookie_track_tid_page', FALSE)) {
    variable_set('taxonomy_maintain_index_table', TRUE);
  }

  drupal_get_messages();
  drupal_set_message(t('The configuration options have been saved.'));
  drupal_set_message(t('Cleared all supercookie sessions.'));

  $blocks = module_invoke('supercookie', 'block_info');
  if (!empty($blocks)) {
    foreach ($blocks as &$meta) {
      drupal_set_message(t('@info block is now available.', array(
        '@info' => $meta['info'],
      )));
    }
  }
  else {
    drupal_set_message(t('Supercookie blocks are not unavailable.'), 'warning');
  }

}
/**
 * Menu callback for storing data gathered client + server side.
 */
function supercookie_json() {

  global $_supercookie;

  $args = drupal_get_query_parameters();

  // Set client + server data.
  $data = array(
    'server' => array(
      'REMOTE_ADDR' => ip_address(),
      'REMOTE_HOST' => gethostbyaddr(ip_address()),
      'HTTP_USER_AGENT' => $_SERVER['HTTP_USER_AGENT'],
      'HTTP_ACCEPT' => $_SERVER['HTTP_ACCEPT'],
    ),
    'client' => $args['client'],
  );

  $hash = md5(serialize($data));

  // Insert or update supercookie instance.
  $_supercookie
    ->match($hash)
    ->save($args['date']);

  // Flush data to client.
  setcookie(variable_get('supercookie_name_server', 'supercookie-server'), $_supercookie->scId, $_supercookie->expires);
  drupal_add_http_header(variable_get('supercookie_name_header', 'X-Drupal-Supercookie'), $_supercookie->scId);
  drupal_json_output(array(
    'scid' => $_supercookie->scId,
    'expires' => $_supercookie->expires,
  ));
}
