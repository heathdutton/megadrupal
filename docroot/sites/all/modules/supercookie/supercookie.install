<?php
/**
 * @file
 * supercookie.install
 */

/**
 * Implements hook_schema().
 */
function supercookie_schema() {

  $items = array();

  $items['supercookie'] = array(
    'description' => 'The supercookie base table.',
    'fields' => array(
      'scid' => array(
        'description' => 'The primary identifier for the cookie.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'ID of the Drupal user.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the cookie was created (local to user).',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'expires' => array(
        'description' => 'The Unix timestamp when the cookie expires (local to user).',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'data' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'A hash of the client and server variables learned about the user.',
      ),
      'tid' => array(
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of tid and count pairs that are related to taxonomy terms the user has viewed.',
      ),
      'nid' => array(
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of nid and count pairs that are related to full nodes the user has viewed.',
      ),
      'custom' => array(
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of custom data defined by dependent modules.',
      ),
    ),
    'indexes' => array(
      'uid' => array('uid'),
    ),
    'primary key' => array('scid'),
    'indexes' => array(
      'uid' => array('uid'),
    ),
  );

  return $items;
}
/**
 * Implements hook_requirements().
 */
function supercookie_requirements($phase) {

  $t = get_t();

  $items = array();

  // Check for and validate libraries if not using external JS.
  $libraries = array();
  if (!variable_get('supercookie_external_js', TRUE)) {
    $library_prune = drupal_get_library('supercookie', 'json.prune');
    $library_prune_path = array_keys($library_prune['js']);
    $library_prune_path = DRUPAL_ROOT . '/' . $library_prune_path[0];
    $library_md5 = drupal_get_library('supercookie', 'cryptojs.md5');
    $library_md5_path = array_keys($library_md5['js']);
    $library_md5_path = DRUPAL_ROOT . '/' . $library_md5_path[0];
    if (!file_exists($library_prune_path)) {
      $libraries[] = $library_prune['title'];
    }
    if (!file_exists($library_md5_path)) {
      $libraries[] = $library_md5['title'];
    }

    if (!empty($libraries)) {
      $items[] = array(
        'title' => 'Supercookie',
        'description' => $t('Supercookie is missing required libraries. Please download the following and add to sites/all/libraries: ') . implode(', ', $libraries),
        'severity' => REQUIREMENT_ERROR,
      );
    }
  }

  $period_expire = array(
    'calendar_day' => $t('Calendar day'),
  ) + drupal_map_assoc(array(
    300, 900, 1800, 3600, 10800, 21600, 32400, 43200, 86400, 172800, 345600, 604800, 2419200, 7776000, 31536000,
  ), 'format_interval');
  $period_pageview = drupal_map_assoc(array(
    5, 10, 20, 30, 60, 120, 300, 900, 1800, 3600, 10800, 21600, 32400, 43200,
  ), 'format_interval');

  if (db_table_exists('supercookie')) {
    $count = db_select('supercookie', 'sc')
      ->where('(sc.created + :average) > :time', array(
        ':average' => variable_get('supercookie_pageview_average', 900),
        ':time' => REQUEST_TIME,
      ));
    $count
      ->addExpression('COUNT(sc.scid)', 'count');
    $count = $count
      ->execute()
      ->fetchField();

    if (empty($libraries)) {
      $items[] = array(
        'title' => 'Supercookie',
        'value' => $count . ' ' . $t(format_plural($count, 'active user', 'active users')),
        'description' => $t('@count currently connected to %site_name per the @interval_expire cookie expiration interval to within a @interval_pageview page view average.', array(
          '@count' => $count . ' ' . $t(format_plural($count, 'user is', 'users are')),
          '%site_name' => variable_get('site_name'),
          '@interval_expire' => drupal_strtolower($period_expire[variable_get('supercookie_expire', 86400)]),
          '@interval_pageview' => drupal_strtolower($period_pageview[variable_get('supercookie_pageview_average', 900)]),
        )),
      );
    }
  }

  return $items;
}
/**
 * Implements hook_install().
 */
function supercookie_install() {
  if (module_exists('node') && module_exists('taxonomy')) {
    variable_set('supercookie_track_node_type', '');
    variable_set('supercookie_track_tid_page', TRUE);
    variable_set('supercookie_track_tid', FALSE);
    variable_set('supercookie_track_nid', TRUE);
  }
}
/**
 * Implements hook_uninstall().
 */
function supercookie_uninstall() {

  db_drop_table('supercookie');

  variable_del('supercookie_expire');
  variable_del('supercookie_pageview_average');
  variable_del('supercookie_name_server');
  variable_del('supercookie_name_header');
  variable_del('supercookie_external_js');
  variable_del('supercookie_track_node_type');
  variable_del('supercookie_track_tid_page');
  variable_del('supercookie_track_tid');
  variable_del('supercookie_track_nid');

}
/**
 * Removes extraneous supercookie_name_client variable and cookie.
 */
function supercookie_update_7100() {

  variable_del('supercookie_name_client');

}
/**
 * Alters the supercookie table to support tid and nid tracking per user.
 */
function supercookie_update_7101() {

  db_add_field('supercookie', 'tid', array(
    'type' => 'blob',
    'not null' => FALSE,
    'size' => 'big',
    'serialize' => TRUE,
    'description' => 'A serialized array of tid and count pairs that are related to taxonomy terms the user has viewed.',
  ));

  db_add_field('supercookie', 'nid', array(
    'type' => 'blob',
    'not null' => FALSE,
    'size' => 'big',
    'serialize' => TRUE,
    'description' => 'A serialized array of nid and count pairs that are related to full nodes the user has viewed.',
  ));

}
/**
 * Alters the supercookie table to support custom data tracking per user.
 */
function supercookie_update_7102() {

  db_add_field('supercookie', 'custom', array(
    'type' => 'blob',
    'not null' => FALSE,
    'size' => 'big',
    'serialize' => TRUE,
    'description' => 'A serialized array of custom data defined by dependent modules.',
  ));

}
