<?php

/**
 * @file
 * Provide URL-based node type query.
 */

/**
 *  Function to query the database for the requested types.
 *  @param $type - the content type to display. Passed through filter_xss.
 *  @param $mode - show just the teaser (value: teaser, default) or full node (value: full) or a title list (value: list).
 *  @param $show_per_page - how many nodes to show per page, defaults to post settings value.
 *  @param $sort - sorting order.
 *    'date' is sticky, created (default),
 *    'title' is by title,
 *    'user' is by uid and date,
*     'oldest' is oldest first.
 *  @param $userid - limit to user. If numeric, is uid, otherwise, is username.
 *  @return - themed nodes list.
 *
 *  Note: the $mode and $sort parameters may also be in translated form.
 *  Note: All parameters, except type, may also be given as query parameters.
 *    That is node/type/page+story?userid=NancyDru&show_per_page=25
 */
function node_get_by_type($type = NULL, $mode = 'teaser', $show_per_page = 0, $sort = 'date', $userid = NULL) {
  $options = array('mode' => $mode, 'show_per_page' => $show_per_page, 'sort' => $sort, 'userid' => $userid);
  $options = array_merge($options, $_GET);
  unset($options['q']);

  $build = array();

  if (!$type) {
    return drupal_get_form('get_content_type_form');
  }

  $query = db_select('node', 'n')->extend('PagerDefault')
    ->fields('n', array('nid', 'sticky', 'title', 'created'))
    ->condition('status', 1)
    ->addTag('node_access')
    ;

  if ($options['show_per_page']) {
    $nodes_per_page = filter_xss($options['show_per_page']);
  }
  else {
    $nodes_per_page = variable_get('default_nodes_main', 10);
  }

  $query->limit($nodes_per_page);

  if (!empty($options['userid'])) {
    if (is_numeric($options['userid'])) {
      $query->condition('uid', $options['userid']);
    }
    else {
      $uid = db_result(db_query("SELECT uid FROM {users} WHERE LOWER(name) = '%s'", drupal_strtolower($options['userid'])));
      if ($uid === FALSE) {
        drupal_set_message(t('The requested user name (%name) was not found.', array('%name' => $options['userid'])), 'error');
      }
      else {
        $query->condition('uid', $uid);
      }
    }
  }

  // Check the mode param value.
  $mode = 'teaser';
  switch (drupal_strtolower($options['mode'])) {
    case t('full'):
    case 'full':
      $mode = 'full';
      break;

    case t('list'):
    case 'list':
      $mode = 'list';
      break;
  }

  // Set ORDER BY clause based on request.
  switch (drupal_strtolower($options['sort'])) {
    case t('title'):
    case 'title':
      $query->orderBy('title', 'ASC');
      break;

    case t('user'):
    case 'user':
      $query->orderBy('uid', 'ASC')
        ->orderBy('sticky', 'DESC')
        ->orderBy('created', 'DESC');
      break;

    case t('oldest'):
    case 'oldest':
      $query->orderBy('created', 'DESC');
      break;

    default:
      $query->orderBy('sticky', 'DESC')
        ->orderBy('created', 'DESC');
      break;
  }

  $types = explode(' ', filter_xss($type));
  $names = $descriptions = array();
  $show_description = variable_get('get_content_type_show_desc', 0);
  $node_types = node_type_get_types();

  foreach ($types as $t) {
    $t = drupal_strtolower($t);
    if (isset($node_types[$t])) {
      $stuff = $node_types[$t];
    }
    else {
      $stuff = (object) array(
        'name' => check_plain($t),
        'description' => t('Not currently defined.'),
        );
    }
    $names[] = check_plain($stuff->name);
    if ($show_description) {
      $descriptions[$stuff->name] = theme('type_description', array('type' => $stuff));
    }
  }
  $count = count($names);
  switch ($count) {
    case 1:
      $title = $names[0];
      break;

    case 2:
      $title = t('!first_type and !second_type', array('!first_type' => $names[0], '!second_type' => $names[1]));
      break;

    default:
      $title = t('!first_type and !other_types', array('!first_type' => implode(', ', array_slice($names, 0, $count - 1)) . ', ', '!other_types' => $names[$count - 1]));
  }
  drupal_set_title($title);

  if ($descriptions) {
    ksort($descriptions);
    $build['descriptions'] = array(
      '#theme' => 'item_list',
      '#items' => $descriptions,
      '#attributes' => array('class' => array('node-descriptions')),
      '#weight' => -10,
      );
  }

  // Process the type string.
  $query->condition('type', $types, 'IN');

  // Select nodes of the requested type.
  if ($mode == 'list') {
    $nids = $query->execute();
  }
  else {
    $nids = $query->execute()
      ->fetchCol();
  }

  if (empty($nids)) {
    drupal_set_message(t('No content was found for your request.'));
  }
  else {
    if ($mode == 'list') {
      $build['title_list'] = node_title_list($nids);
    }
    else {
      $nodes = node_load_multiple($nids);
      $build += node_view_multiple($nodes, $mode);
    }
    $build['pager'] = array(
      '#theme' => 'pager',
      '#weight' => 5,
      );
  }

  drupal_add_feed(url('node/type/' . $type . '/feed'), t('RSS - !type', array('!type' => $stuff->name)));
  return $build;
}

/**
 * Menu callback; displays an RSS feed containing recent entries of a given type
 */
function node_get_by_type_feed($type) {
  $type = filter_xss($type);
  $stuff = node_type_get_type($type);
  if (!$stuff) {
    drupal_not_found();
  }

  $result = db_query_range("SELECT n.nid, n.created FROM {node} n WHERE n.type='%s' AND n.status=1 ORDER BY n.created DESC", $type, 0, variable_get('default_nodes_main', 10));

  $channel['title'] = variable_get('site_name', 'Drupal') . ' ' . $stuff->name;
  $channel['link'] = url('node/type/' . $type, array('absolute' => TRUE));

  $items = array();
  foreach ($result as $row) {
    $items[] = $row->nid;
  }

  node_feed($items, $channel);
}

/**
 *  Form to build URL for displaying content types.
 */
function get_content_type_form() {
  $form = array();

  $node_types = node_type_get_names();
  $form['types'] = array(
    '#type' => 'checkboxes',
    '#options' => $node_types,
    '#title' => t('Content types'),
    '#description' => t('Choose the content types you wish to display.'),
    '#required' => TRUE,
    );

  $form['how_many'] = array(
    '#type' => 'textfield',
    '#size' => 8,
    '#title' => t('How many per page'),
    '#description' => t('The display will be formatted into a series of pages with this many posts per page.'),
    '#default_value' => variable_get('default_nodes_main', 10),
    '#required' => TRUE,
    );

  $display_options = array(
    'teaser' => t('Teaser'),
    'full' => t('Full node'),
    'list' => t('As a list of titles'),
    );

  $form['teaser'] = array(
    '#type' => 'radios',
    '#options' => $display_options,
    '#title' => t('Display format'),
    '#description' => t('This controls how the selected content will be displayed.'),
    '#default_value' => 'teaser',
    '#required' => TRUE,
    );

  $sort_options = array(
    'standard' => t('Standard - newest first, sticky on top'),
    'oldest' => t('Oldest first'),
    'title' => t('Alphabetically by title'),
    'user' => t('By Userid'),
    );

  $form['sort'] = array(
    '#type' => 'radios',
    '#options' => $sort_options,
    '#title' => t('Sort Order'),
    '#default_value' => 'standard',
    '#required' => TRUE,
    );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Show my selections'),
    '#weight' => 3,
  );

  return $form;
}

/**
 *  Form_submit to build URL for displaying content types.
 */
function get_content_type_form_submit($form, &$form_state) {
  $types = array();
  foreach ($form_state['values']['types'] as $type => $selected) {
    if ($selected) {
      $types[] = $type;
    }
  }

  $form_state['redirect'] = 'node/type/' . implode(' ', $types) . '/' . $form_state['values']['teaser'] . '/' . $form_state['values']['how_many'] . '/' . $form_state['values']['sort'];
}

/**
 * Implements hook_theme().
 */
function get_content_type_theme() {
  return array(
    'type_description' => array(
      'arguments' => array('type'),
    ),
  );
}

/**
 *  Function to show the description of the type.
 *  @ingroup - themable.
 *  @param - $type - the node type object (from node_get_types).
 *  @return - themed HTML string for use in an item_list.
 */
function theme_type_description($variables) {
  $type = $variables['type'];
  return '<strong>' . $type->name . '</strong>: <em>' . $type->description . '</em>';
}

/**
 * Implements hook_form().
 * Admin > Config > User interface > Get content type.
 */
function get_content_type_settings(&$form_state) {
  $form = array();
  $noyes = array(t('No'), t('Yes'));

  $form['type_list'] = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#title' => t('Node type list'),
    '#description' => t('This controls the display for "!url_text"', array('!url_text' => 'node/type/<em>xxx</em>')),
    );

  $form['type_list']['get_content_type_show_desc'] = array(
    '#type' => 'radios',
    '#options' => $noyes,
    '#title' => t('Show content type description'),
    '#default_value' => variable_get('get_content_type_show_desc', 0),
    '#attributes' => array('class' => array('container-inline')),
    );

  $form['type_list']['get_content_type_count_undefined'] = array(
    '#type' => 'radios',
    '#options' => $noyes,
    '#title' => t('Show undefined types on content type count page'),
    '#default_value' => variable_get('get_content_type_count_undefined', 1),
    '#attributes' => array('class' => array('container-inline')),
    );

  return system_settings_form($form);
}

/**
 * Menu callback - Show all content types with counts from node table.
 * Optionally shows which types were found but are not currently defined.
 */
function get_content_type_count() {
  $rows = array();
  $header = array(
    t('Content Type'),
    t('Published'),
    t('Unpublished'),
    t('Oldest'),
    t('Newest'),
    );
  $types = node_type_get_names();
  $now = REQUEST_TIME;
  $show_undefined = variable_get('get_content_type_count_undefined', 1);

  $query = "SELECT DISTINCT(n.`type`) AS content_type, "
    . "MIN(created) AS oldest, MAX(created) AS newest, "
    . "(SELECT COUNT(*) FROM {node} WHERE `type` = content_type AND `status` = 1) AS pub, "
    . "(SELECT COUNT(*) FROM {node} WHERE `type` = content_type AND `status` = 0) AS unpub "
    . "FROM {node} n "
    . "GROUP BY n.`type` ASC ";
  $result = db_query($query);

  foreach ($result as $row) {
    // Is this a currently known content type?
    if (!isset($types[$row->content_type])) {
      // Do we want to show it at all?
      if ($show_undefined) {
        $types[$row->content_type] = t('undefined (@type)', array('@type' => $row->content_type));
      }
      else {
        continue;
      }
    }

    $rows[$types[$row->content_type]] = array(
      l($types[$row->content_type], "node/type/$row->content_type"),
      array('data' => number_format($row->pub), 'align' => 'right'),
      array('data' => number_format($row->unpub), 'align' => 'right'),
      array('data' => format_interval($now - $row->oldest), 'align' => 'left'),
      array('data' => format_interval($now - $row->newest), 'align' => 'left'),
      user_access('Administer content types') ?
        l(t('manage'), "admin/structure/types/manage/$row->content_type/fields") : '',
      );
  }
  ksort($rows);

  return theme('table',
    array('header' => $header, 'rows' => $rows, 'attributes' => array('style' => 'width: auto;'))
    );
}

/**
 * Implements hook_menu().
 */
function get_content_type_menu() {
  $items = array();

  $items['admin/structure/count'] = array(
    'title' => 'Content type counts',
    'page callback' => 'get_content_type_count',
    'access arguments' => array('Administer content'),
    'type' => MENU_NORMAL_ITEM,
    );

  $items['admin/config/user-interface/get-content-type'] = array(
    'title' => 'Get content type',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('get_content_type_settings'),
    'access arguments' => array('Use the administration pages and help'),
    'type' => MENU_NORMAL_ITEM,
    );

  $items['node/type'] = array(
    'title' => 'List nodes of a specified type',
    'page callback' => 'node_get_by_type',
    'access arguments' => array('View published content'),
    'type' => MENU_CALLBACK,
    );

  $items['node/type/%/feed'] = array(
    'title' => 'List nodes of a specified type',
    'page callback' => 'node_get_by_type_feed',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    );

  return $items;
}

/**
 * Implements hook_help().
 */
function get_content_type_help($path, $args) {
  switch ($path) {
    case 'admin/help#get_content_type':
      return t('The get_content_type module fills an oversight by the D5 developers. When they moved the part of CCK (sometimes called CCK-Lite) into core for creating new content types, they forgot the analog to "taxonomy/term/xxx," that is "node/type/xxx." This simple module provides that function.');
  }
}

/**
 * Implements hook_content_list().
 * Called by CCK. See http://drupal.org/node/596428
 * @param $row - the array of data passed from CCK's content_types_overview().
 * @param $header - the array of header labels. This must be altered by reference.
 * @return - the modified row.
 */
function get_content_type_content_list($row, &$header) {
  // Can't use the name in $row[0] because it was modified.
  $type = $row[1];
  $row[0] = l(node_type_get_name($type), "node/type/$type", array('attributes' => array('title' => "Display all $type nodes")));
  return $row;
}
