<?php

/**
 * @file
 * Base class for tests.
 */

/**
 * Class InlineStylesCleanerTestCase.
 *
 * Base class for test cases. Includes creation of additional fields for
 * article and page content types and creation of user with node add|edit
 * permissions.
 */
class InlineStylesCleanerWebTestCase extends DrupalWebTestCase {
  protected $pathToCssFile = 'public://inline_styles_cleaner.css';
  protected $downloadLink = 'admin/config/content/inline-styles-cleaner/download/1';
  private $privilegedUser;

  /**
   * Function for nodes creation.
   *
   * Creates nodes and put values into it fields.
   *
   * @param array $nodes
   *   Array contains specific nodes with settings.
   */
  protected function createNodes(array $nodes) {
    foreach ($nodes as $node) {
      $this->drupalPost('node/add/' . $node['node_type'], $node['edit'], t('Save'));
      $this->drupalGet('node/' . $node['nid'] . '/edit');

      foreach ($node['edit'] as $field_name => $field_value) {
        $this->assertFieldByName($field_name, $field_value, 'Inline styles in ' . $field_name . ' found.');
      }
    }
  }

  /**
   * Function to start cleaning.
   *
   * @param array $batch_edit
   *   Array with batch settings from config form.
   */
  protected function runBatch(array $batch_edit) {
    $this->drupalPost('admin/config/content/inline-styles-cleaner', $batch_edit, t('Start processing'));
    $this->assertText(t('Completed without errors.'), 'Message "Completed without errors." found.');
  }

  /**
   * Function to assert fields values.
   *
   * @param array $settings
   *   Array with assertions settings.
   */
  protected function assertFieldsAfterCleaning(array $settings) {
    $this->createNodes($settings['nodes']);
    $this->runBatch($settings['batch_edit']);

    foreach ($settings['nodes'] as $node_settings) {
      $this->drupalGet('node/' . $node_settings['nid'] . '/edit');

      foreach ($node_settings['fields_for_check'] as $field_name => $field_settings) {
        $this->assertFieldByName($field_name, $field_settings['field_value'], $field_settings['assert_message']);
      }
    }
  }

  /**
   * Function to assert css rules in generated file.
   *
   * @param string $css_rules
   *   String with css rules.
   * @param string $message
   *   Assert message.
   */
  protected function assertCssRulesInFile($css_rules, $message) {
    $this->drupalGet(file_create_url($this->pathToCssFile));
    $this->assertRaw($css_rules, $message);
  }

  /**
   * Standard simpletest function.
   */
  protected function setUp() {
    parent::setUp(array('inline_styles_cleaner'));

    // Create additional field for page content type.
    $field = array(
      'field_name' => 'field_text_field',
      'type' => 'text',
    );

    $instance = array(
      'field_name' => 'field_text_field',
      'entity_type' => 'node',
      'label' => 'Text field',
      'bundle' => 'page',
    );

    field_create_field($field);
    field_create_instance($instance);

    // Create additional field for article content type.
    $field = array(
      'field_name' => 'field_text_long_field',
      'type' => 'text_long',
    );

    $instance = array(
      'field_name' => 'field_text_long_field',
      'entity_type' => 'node',
      'label' => 'Long text field',
      'bundle' => 'article',
    );

    field_create_field($field);
    field_create_instance($instance);

    $this->privilegedUser = $this->drupalCreateUser(array(
      'create page content',
      'create article content',
      'edit any page content',
      'edit any article content',
      'administer site configuration',
    ));

    $this->drupalLogin($this->privilegedUser);
  }
}
