<?php

/**
 * @file
 * Css generator test.
 */

/**
 * Class CssGeneratorWebTestCase.
 */
class CssGeneratorWebTestCase extends InlineStylesCleanerWebTestCase {
  private $markupSimple = '<div class="simple-markup" style="background: green; border: solid 2px red;">Test</div>';
  private $markupSimpleWithAddedStyles = '<div class="isc-1-body_value-0 simple-markup" style="font-size: 20px;">Test</div>';
  private $markupSimpleWithoutStylesWithDefaultClass = '<div class="isc-1-body_value-0 simple-markup" >Test</div>';
  private $markupSimpleWithoutStylesDefaultClassCustomClass = '<div class="test-class-1-body_value-0 isc-1-body_value-0 simple-markup" >Test</div>';
  private $markupSimpleWithoutStylesWithCustomClass = '<div class="test-class-1-body_value-0 simple-markup" >Test</div>';
  private $markupSimpleWithoutStylesWithCustomClassSummary = '<div class="test-class-1-body_summary-0 simple-markup" >Test</div>';
  private $markupSimpleWithoutStylesWithCustomClassSummaryPage = '<div class="test-class-2-body_summary-0 simple-markup" >Test</div>';
  private $cssMarkupSimpleDefaultClass = ".isc-1-body_value-0 {\n\tbackground: green;\n\tborder: solid 2px red;\n}\n\n";
  private $cssMarkupSimpleDefaultClassOverriden = ".isc-1-body_value-0 {\n\tfont-size: 20px;\n}\n\n";
  private $cssMarkupSimpleDefaultClassUpdated = ".isc-1-body_value-0 {\n\tbackground: green;\n\tborder: solid 2px red;\n\tfont-size: 20px;\n}\n\n";
  private $cssMarkupSimpleCustomClassUpdated = ".isc-1-body_value-0 {\n\tbackground: green;\n\tborder: solid 2px red;\n}\n\n.test-class-1-body_value-0 {\n\tfont-size: 20px;\n}\n\n";
  private $cssMarkupSimpleCustomClassOverriden = ".test-class-1-body_value-0 {\n\tfont-size: 20px;\n}\n\n";
  private $cssMarkupSimpleCustomClass = ".test-class-1-body_value-0 {\n\tbackground: green;\n\tborder: solid 2px red;\n}\n\n";
  private $markupWithWrongIndents = '<div class="simple-markup" style="    background:green   ;      border    :   solid    2px     red     ;   ;; ;;;">Test</div>';
  private $similarMarkupArticle1 = '<div class="simple-markup" style="background: green; border: solid 2px red;">Test</div>';
  private $similarMarkupArticle2 = '<div class="simple-markup" style="  border  : red   2px   solid  ; background: green ; ;;;">Test</div>';
  private $similarMarkupPage = '<div class="simple-markup" style="background: red; border: solid 2px green;">Test</div>';
  private $similarMarkupPageWithoutStyles = '<div class="test-class-2-body_value-0 simple-markup" >Test</div>';
  private $similarMarkupPageWithoutStylesTextField = '<div class="test-class-2-field_text_field_value-0 simple-markup" >Test</div>';
  private $cssSimilar = ".test-class-1-body_value-0, .test-class-1-body_summary-0, .test-class-2-body_summary-0 {\n\tborder: red 2px solid;\n\tbackground: green;\n}\n\n.test-class-2-body_value-0, .test-class-2-field_text_field_value-0 {\n\tbackground: red;\n\tborder: solid 2px green;\n}\n\n";

  /**
   * Standard simpletest function.
   *
   * @return array
   *   Array with test info.
   */
  public static function getInfo() {
    return array(
      'name' => 'Css generator',
      'description' => 'Check css generation function',
      'group' => 'Inline Styles Cleaner',
    );
  }

  /**
   * Check css generator with default class name.
   */
  public function testDefaultClassName() {
    $settings = array(
      'batch_edit' => array(
        'inline_styles_cleaner_fields_for_clean[body]' => 'body',
        'inline_styles_cleaner_generate_css' => TRUE,
      ),
      'nodes' => array(
        0 => array(
          'nid' => 1,
          'node_type' => 'page',
          'edit' => array(
            'title' => 'Default class name',
            'body[und][0][value]' => $this->markupSimple,
          ),
          'fields_for_check' => array(
            'body[und][0][value]' => array(
              'field_value' => $this->markupSimpleWithoutStylesWithDefaultClass,
              'assert_message' => 'Inline styles in node/1 not found.',
            ),
          ),
        ),
      ),
    );

    $this->assertFieldsAfterCleaning($settings);
    $this->assertCssRulesInFile($this->cssMarkupSimpleDefaultClass, 'Correct css rules found.');
  }

  /**
   * Check css generator with custom class name.
   */
  public function testCustomClassName() {
    $settings = array(
      'batch_edit' => array(
        'inline_styles_cleaner_fields_for_clean[body]' => 'body',
        'inline_styles_cleaner_generate_css' => TRUE,
        'inline_styles_cleaner_class_name' => 'test-class',
      ),
      'nodes' => array(
        0 => array(
          'nid' => 1,
          'node_type' => 'page',
          'edit' => array(
            'title' => 'Custom class name',
            'body[und][0][value]' => $this->markupSimple,
          ),
          'fields_for_check' => array(
            'body[und][0][value]' => array(
              'field_value' => $this->markupSimpleWithoutStylesWithCustomClass,
              'assert_message' => 'Inline styles in node/1 not found.',
            ),
          ),
        ),
      ),
    );

    $this->assertFieldsAfterCleaning($settings);
    $this->assertCssRulesInFile($this->cssMarkupSimpleCustomClass, 'Correct css rules found.');
  }

  /**
   * Check cleaning with wrong indents.
   */
  public function testWrongIndents() {
    $settings = array(
      'batch_edit' => array(
        'inline_styles_cleaner_fields_for_clean[body]' => 'body',
        'inline_styles_cleaner_generate_css' => TRUE,
      ),
      'nodes' => array(
        0 => array(
          'nid' => 1,
          'node_type' => 'page',
          'edit' => array(
            'title' => 'Wrong indents',
            'body[und][0][value]' => $this->markupWithWrongIndents,
          ),
          'fields_for_check' => array(
            'body[und][0][value]' => array(
              'field_value' => $this->markupSimpleWithoutStylesWithDefaultClass,
              'assert_message' => 'Inline styles in node/1 not found.',
            ),
          ),
        ),
      ),
    );

    $this->assertFieldsAfterCleaning($settings);
    $this->assertCssRulesInFile($this->cssMarkupSimpleDefaultClass, 'Correct css rules found.');
  }

  /**
   * Check cleaning with similar styles.
   */
  public function testSimilarStyles() {
    $settings = array(
      'batch_edit' => array(
        'inline_styles_cleaner_fields_for_clean[body]' => 'body',
        'inline_styles_cleaner_fields_for_clean[field_text_field]' => 'field_text_field',
        'inline_styles_cleaner_generate_css' => TRUE,
        'inline_styles_cleaner_class_name' => 'test-class',
        'inline_styles_cleaner_clean_text_field_summary' => TRUE,
      ),
      'nodes' => array(
        0 => array(
          'nid' => 1,
          'node_type' => 'article',
          'edit' => array(
            'title' => 'Similar styles',
            'body[und][0][summary]' => $this->similarMarkupArticle1,
            'body[und][0][value]' => $this->similarMarkupArticle2,
          ),
          'fields_for_check' => array(
            'body[und][0][summary]' => array(
              'field_value' => $this->markupSimpleWithoutStylesWithCustomClassSummary,
              'assert_message' => 'Inline styles in node/1 not found.',
            ),
            'body[und][0][value]' => array(
              'field_value' => $this->markupSimpleWithoutStylesWithCustomClass,
              'assert_message' => 'Inline styles in node/1 not found.',
            ),
          ),
        ),
        1 => array(
          'nid' => 2,
          'node_type' => 'page',
          'edit' => array(
            'title' => 'Similar styles',
            'body[und][0][summary]' => $this->similarMarkupArticle1,
            'body[und][0][value]' => $this->similarMarkupPage,
            'field_text_field[und][0][value]' => $this->similarMarkupPage,
          ),
          'fields_for_check' => array(
            'body[und][0][summary]' => array(
              'field_value' => $this->markupSimpleWithoutStylesWithCustomClassSummaryPage,
              'assert_message' => 'Inline styles in node/2 not found.',
            ),
            'body[und][0][value]' => array(
              'field_value' => $this->similarMarkupPageWithoutStyles,
              'assert_message' => 'Inline styles in node/2 not found.',
            ),
            'field_text_field[und][0][value]' => array(
              'field_value' => $this->similarMarkupPageWithoutStylesTextField,
              'assert_message' => 'Inline styles in node/2 not found.',
            ),
          ),
        ),
      ),
    );

    $this->assertFieldsAfterCleaning($settings);
    $this->assertCssRulesInFile($this->cssSimilar, 'Correct css rules found.');
  }

  /**
   * Check css rules overriding with default class.
   */
  public function testOverrideCssRulesDefaultClass() {
    $nodes = array(
      0 => array(
        'nid' => 1,
        'node_type' => 'page',
        'edit' => array(
          'title' => 'Override css rules',
          'body[und][0][value]' => $this->markupSimple,
        ),
      ),
    );

    $batch_settings = array(
      'inline_styles_cleaner_fields_for_clean[body]' => 'body',
      'inline_styles_cleaner_generate_css' => TRUE,
    );

    $this->createNodes($nodes);
    $this->runBatch($batch_settings);
    $this->assertCssRulesInFile($this->cssMarkupSimpleDefaultClass, 'Correct css rules found.');

    $this->drupalPost('node/1/edit', array(
      'body[und][0][value]' => $this->markupSimpleWithAddedStyles,
    ), t('Save'));

    $this->runBatch(array(
      'inline_styles_cleaner_fields_for_clean[body]' => 'body',
      'inline_styles_cleaner_generate_css' => TRUE,
    ));

    $this->drupalGet('node/1/edit');
    $this->assertFieldByName('body[und][0][value]', $this->markupSimpleWithoutStylesWithDefaultClass, 'Inline styles in node/1 not found.');

    $this->assertCssRulesInFile($this->cssMarkupSimpleDefaultClassOverriden, 'Correct css rules found.');
  }

  /**
   * Check css rules overriding with custom class.
   */
  public function testOverrideCssRulesCustomClass() {
    $nodes = array(
      0 => array(
        'nid' => 1,
        'node_type' => 'page',
        'edit' => array(
          'title' => 'Override css rules',
          'body[und][0][value]' => $this->markupSimple,
        ),
      ),
    );

    $batch_settings = array(
      'inline_styles_cleaner_fields_for_clean[body]' => 'body',
      'inline_styles_cleaner_generate_css' => TRUE,
    );

    $this->createNodes($nodes);
    $this->runBatch($batch_settings);
    $this->assertCssRulesInFile($this->cssMarkupSimpleDefaultClass, 'Correct css rules found.');

    $this->drupalPost('node/1/edit', array(
      'body[und][0][value]' => $this->markupSimpleWithAddedStyles,
    ), t('Save'));

    $this->runBatch(array(
      'inline_styles_cleaner_fields_for_clean[body]' => 'body',
      'inline_styles_cleaner_generate_css' => TRUE,
      'inline_styles_cleaner_class_name' => 'test-class',
    ));

    $this->drupalGet('node/1/edit');
    $this->assertFieldByName('body[und][0][value]', $this->markupSimpleWithoutStylesWithCustomClass, 'Inline styles in node/1 not found.');

    $this->assertCssRulesInFile($this->cssMarkupSimpleCustomClassOverriden, 'Correct css rules found.');
  }

  /**
   * Check css rules updating with default class.
   */
  public function testUpdateCssRulesDefaultClass() {
    $nodes = array(
      0 => array(
        'nid' => 1,
        'node_type' => 'page',
        'edit' => array(
          'title' => 'Update css rules',
          'body[und][0][value]' => $this->markupSimple,
        ),
      ),
    );

    $batch_settings = array(
      'inline_styles_cleaner_fields_for_clean[body]' => 'body',
      'inline_styles_cleaner_generate_css' => TRUE,
      'inline_styles_cleaner_update_existing_css' => TRUE,
    );

    $this->createNodes($nodes);
    $this->runBatch($batch_settings);
    $this->assertCssRulesInFile($this->cssMarkupSimpleDefaultClass, 'Correct css rules found.');

    $this->drupalPost('node/1/edit', array(
      'body[und][0][value]' => $this->markupSimpleWithAddedStyles,
    ), t('Save'));

    $this->runBatch(array(
      'inline_styles_cleaner_fields_for_clean[body]' => 'body',
      'inline_styles_cleaner_generate_css' => TRUE,
      'inline_styles_cleaner_update_existing_css' => TRUE,
    ));

    $this->drupalGet('node/1/edit');
    $this->assertFieldByName('body[und][0][value]', $this->markupSimpleWithoutStylesWithDefaultClass, 'Inline styles in node/1 not found.');

    $this->assertCssRulesInFile($this->cssMarkupSimpleDefaultClassUpdated, 'Correct css rules found.');
  }

  /**
   * Check css rules updating with custom class.
   */
  public function testUpdateCssRulesCustomClass() {
    $nodes = array(
      0 => array(
        'nid' => 1,
        'node_type' => 'page',
        'edit' => array(
          'title' => 'Update css rules',
          'body[und][0][value]' => $this->markupSimple,
        ),
      ),
    );

    $batch_settings = array(
      'inline_styles_cleaner_fields_for_clean[body]' => 'body',
      'inline_styles_cleaner_generate_css' => TRUE,
      'inline_styles_cleaner_update_existing_css' => TRUE,
    );

    $this->createNodes($nodes);
    $this->runBatch($batch_settings);
    $this->assertCssRulesInFile($this->cssMarkupSimpleDefaultClass, 'Correct css rules found.');

    $this->drupalPost('node/1/edit', array(
      'body[und][0][value]' => $this->markupSimpleWithAddedStyles,
    ), t('Save'));

    $this->runBatch(array(
      'inline_styles_cleaner_fields_for_clean[body]' => 'body',
      'inline_styles_cleaner_generate_css' => TRUE,
      'inline_styles_cleaner_update_existing_css' => TRUE,
      'inline_styles_cleaner_class_name' => 'test-class',
    ));

    $this->drupalGet('node/1/edit');
    $this->assertFieldByName('body[und][0][value]', $this->markupSimpleWithoutStylesDefaultClassCustomClass, 'Inline styles in node/1 not found.');

    $this->assertCssRulesInFile($this->cssMarkupSimpleCustomClassUpdated, 'Correct css rules found.');
  }

  /**
   * Check download css file functionality.
   */
  public function testDownloadCssFile() {
    $nodes = array(
      0 => array(
        'nid' => 1,
        'node_type' => 'page',
        'edit' => array(
          'title' => 'Download css file',
          'body[und][0][value]' => $this->markupSimple,
        ),
      ),
    );

    $batch_settings = array(
      'inline_styles_cleaner_fields_for_clean[body]' => 'body',
      'inline_styles_cleaner_generate_css' => TRUE,
      'inline_styles_cleaner_automatic_download' => FALSE,
    );

    $this->createNodes($nodes);
    $this->runBatch($batch_settings);
    $this->drupalGet($this->downloadLink);
    $this->assertResponse(200, 'Css file has been downloaded.');
  }

  /**
   * Check delete css file functionality.
   */
  public function testDeleteCssFile() {
    $nodes = array(
      0 => array(
        'nid' => 1,
        'node_type' => 'page',
        'edit' => array(
          'title' => 'Delete css file',
          'body[und][0][value]' => $this->markupSimple,
        ),
      ),
    );

    $batch_settings = array(
      'inline_styles_cleaner_fields_for_clean[body]' => 'body',
      'inline_styles_cleaner_generate_css' => TRUE,
      'inline_styles_cleaner_automatic_download' => FALSE,
    );

    $this->createNodes($nodes);
    $this->runBatch($batch_settings);
    $this->drupalGet(file_create_url($this->pathToCssFile));
    $this->assertResponse(200, 'Css file found.');
    $this->drupalPost('admin/config/content/inline-styles-cleaner', array(), t('Delete file'));
    $this->drupalGet(file_create_url($this->pathToCssFile));
    $this->assertResponse(404, 'Css file not found.');
  }
}
