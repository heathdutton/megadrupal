<?php

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function course_requirements_menu() {
  $items = array();

  $items['admin/course/requirements'] = array(
    'page calback' => 'drupal_get_form',
    'page arguments' => array('course_requirements_settings_form'),
    'access arguments' => array('administer course'),
    'type' => MENU_LOCAL_TASK,
    'title' => 'Requirements',
  );

  return $items;
}

/**
 * Settings form.
 */
function course_requirements_settings_form($form, &$form_state) {
  $form = array();
  foreach (field_info_fields() as $field => $info) {
    if ($info['type'] == 'node_reference') {
      $fields[$field] = $field;
    }
  }

  $form['course_requirements_cck_field'] = array(
    '#type' => 'select',
    '#title' => 'Nodereference field used to select requirements',
    '#options' => $fields,
    '#default_value' => variable_get('course_requirements_cck_field', 'field_course_requirements'),
  );

  $form['course_requirements_allow_enrollments'] = array(
    '#title' => 'Allow enrollments',
    '#default_value' => variable_get('course_requirements_allow_enrollments', 0),
    '#description' => 'Allow enrollments into a blocked course. User is still prevented from taking the course.',
    '#type' => 'checkbox',
  );

  return system_settings_form($form);
}

function course_requirements_course_access($op, $node, $account) {
  if ($op == 'take') {
    $block = FALSE;
    $field = variable_get('course_requirements_cck_field', 'field_course_requirements');
    $nids = array();
    if ($items = field_get_items('node', $node, $field)) {
      foreach ($items as $item) {
        $nids[$item['nid']] = $item['nid'];
      }
      $nids = array_filter($nids);

      if (count($nids)) {
        $sql = "SELECT n.nid, n.title, cr.section_name, cr.complete FROM {node} n
        LEFT JOIN {course_report} cr ON cr.nid = n.nid AND cr.uid = :uid
        WHERE n.nid IN (:nids)";
        $result = db_query($sql, array(':uid' => $account->uid, ':nids' => $nids));
        while ($report = $result->fetch()) {
          if (!$report->complete) {
            $block = TRUE;
          }
          $nids[$report->nid] = array(
            'nid' => $report->nid,
            'title' => $report->title,
            'section' => $report->section_name,
            'complete' => $report->complete,
          );
        }
      }

      if ($block) {
        return array(
          'course_requirements' => array(
            'success' => FALSE,
            'header' => t('You must complete the following courses before taking this course.'),
            'message' => theme('course_requirements_courses_table', array('rows' => $nids)),
          ),
        );
      }
    }
  }

  if ($op == 'enroll') {
    if (!variable_get('course_requirements_allow_enrollments', 0)) {
      $result = course_requirements_course_access('take', $node, $account);
      if ($result['course_requirements']) {
        $result['course_requirements']['header'] = t('You must complete the following courses before enrolling in this course.');
        return $result;
      }
      else {
        if ($courseObject = course_get_course_object('course_relationships', 'course', $node->nid, $account)) {
          // Course is a course object in another course.
          $parent = node_load($courseObject->getCourseNid());
          return course_requirements_course_access('take', $parent, $account);
        }
      }
    }
  }
}

/**
 * Implements hook_course_outline_completion_links_alter().
 *
 * Link to the dependent course on the completion page.
 */
function course_requirements_course_outline_completion_links_alter(&$links, $node, $user) {
  $field_name = variable_get('course_requirements_cck_field', 'field_course_requirements');

  // Find courses that are dependent on this course.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->fieldCondition($field_name, 'nid', $node->nid);
  $result = $query->execute();

  if (!empty($result['node'])) {
    foreach ($result['node'] as $item) {
      $nids[] = $item->nid;
    }

    $nodes = entity_load('node', $nids);
    foreach ($nodes as $node) {
      $courses[] = l($node->title, "node/$node->nid");
    }

    if ($courses) {
      $links['course_requirements'] = array(
        ' ',
        ' ',
        t('This course is a prerequisite to !courses.', array('!courses' => implode(',', $courses))),
      );
    }
  }
}

/**
 * Implements hook_theme().
 */
function course_requirements_theme() {
  return array(
    'course_requirements_courses_table' => array(
      'variables' => array(
        'rows' => array(),
      ),
    ),
  );
}

/**
 * Theme the table of required courses.
 */
function theme_course_requirements_courses_table($variables) {
  $rows = array();
  foreach ($variables['rows'] as $row) {
    $rows[] = array(l($row['title'], "node/{$row['nid']}"), $row['section']);
  }

  return theme('table', array('header' => array(t('Prerequisite'), t('Your status')), 'rows' => $rows));
}
