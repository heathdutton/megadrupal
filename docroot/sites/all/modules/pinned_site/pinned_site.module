<?php
/**
 * @file
 * 
 * Adds capability to site to be integrated into the Windows 7 Desktop using Internet Explorer 9 features.
 */


/**
 * Maximum items quantity in the custom jump list.
 */
define("PINNED_SITE_JUMP_LIST_ITEMS_MAX_QUANTITY", 10);

/**
 * Maximum static task quantity.
 */
define("PINNED_SITE_STATIC_TASKS_MAX_QUANTITY", 5);

/**
 * Maximum length of static task name.
 */
define("PINNED_SITE_STATIC_TASK_NAME_MAX_LENGTH", 127);

/**
 * Implements hook_help().
 */
function pinned_site_help($path, $arg) {
  $output = '';

  if ($path == 'admin/config/system/pinned_site') {
    return t('Edit basic pinned application settings here.');
  }

  if ($path == 'admin/config/system/pinned_site/start_tile') {
    return t('Configuration for Live Tiles on the Windows 8 Start screen.');
  }
  
  if ($path == 'admin/config/system/pinned_site/static_tasks') {
    return t('Define the list of tasks for the most frequently used features of the website.');
  }
  
  if ($path == 'admin/config/system/pinned_site/recent_posts') {
    return t('Use this settings to include your recent posts into the Jump List.');
  }

  if ($path == 'admin/help#pinned_site') {
    $output = '<p>';
    $output .= t("Users of Windows Internet Explorer 9 can pin any website to the Windows 7 taskbar just as they pin applications. When a website is pinned, it can be opened quickly and conveniently. A Pinned Site is more than just a shortcut, however. Using the Pinned Site features, you can improve a user's ability to navigate, control, and interact with your site.");
    $output .= '</p>';
    $output .= '<p>';
    $output .= t("The Pinned Site module helps to integrate a site with Windows 7 Desktop using Internet Explorer 9 features fast and easy and without any knowledges in Javascript and HTML.");
    $output .= '</p>';
    $output .= '<h3>' . t('Basic Settings') . '</h3>';
    $output .= '<p>';
    $output .= t("Basic application settings allow you to configure basic parameters of pinned site. Some of them cannot be overridden after pinning site to the taskbar, such as: application name, application tooltip and application start URI.");
    $output .= '</p>';
    $output .= '<h3>' . t('Static Tasks') . '</h3>';
    $output .= '<p>';
    $output .= t("Static Tasks (Jump List tasks) are application-specific actions that are tailored to a website. By using Static Tasks, your website can surface the most frequently used commands to users. The tasks provide a set of static URIs that users can access at any time, even if the browser instance is not running. Furthermore, these tasks provide a mechanism for your website to promote their most common destinations to users even when the user is not visiting your site. For instance, a web-based communication application could surface commands enabling users to quickly access their contacts, inbox, and profile information.");
    $output .= '</p>';
    $output .= '<h3>' . t('Recent Posts') . '</h3>';
    $output .= '<p>';
    $output .= t("Recent Posts category is custom Jump List category which contains links to recent nodes posted on the site. In the Recent Posts tab you can choose content types for displaying in this category.  It is enough to deselect all of content types to exclude Recent Posts category from the Jump List. Items within a Recent Posts category are visually separated from Static Tasks and can be individually persisted or deleted by users.");
    $output .= '</p>';
    $output .= '<p>';
    $output .= t("Detailed information about Pinned Sites technology you can read at <a target=\"_blank\" href=\"@pinned_site_documentation\">Introduction to Pinned Sites</a>.", 
      array('@pinned_site_documentation' => 'http://msdn.microsoft.com/en-us/library/gg491738%28v=VS.85%29.aspx'));
    $output .= '</p>';
  }

  return $output;
}

/**
 * Implements hook_permission().
 */
function pinned_site_permission() {
  return array(
    'administer pinned site settings' => array(
      'title' => t('Administer Pinned Site Settings'),
      'description' => t('Perform configuration for Pinned Site.'),
    )
  );
}

/**
 * Implements hook_menu().
 */
function pinned_site_menu() {
  $items = array();

  $items['admin/config/system/pinned_site'] = array(
    'title' => 'Pinned Site',
    'description' => 'Site integration with Windows 7 Desktop using Internet Explorer 9 features.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pinned_site_admin_basic_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer pinned site settings'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'pinned_site.admin.inc',
  );
  
  $items['admin/config/system/pinned_site/basic'] = array(
    'title' => 'Basic Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pinned_site_admin_basic_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer pinned site settings'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'pinned_site.admin.inc',
    'weight' => 1,
  );
  
  $items['admin/config/system/pinned_site/start_tile'] = array(
    'title' => 'Start Tile',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pinned_site_admin_start_tile_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer pinned site settings'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'pinned_site.admin.inc',
    'weight' => 2,
  );

  $items['admin/config/system/pinned_site/static_tasks'] = array(
    'title' => 'Static Tasks',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pinned_site_admin_static_tasks_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer pinned site settings'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'pinned_site.admin.inc',
    'weight' => 3,
  );
  
  $items['admin/config/system/pinned_site/static_tasks/add'] = array(
    'title' => 'Static Task Add',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pinned_site_admin_static_task_edit'),
    'access callback' => 'user_access',
    'access arguments' => array('administer pinned site settings'),
    'type' => MENU_CALLBACK,
    'file' => 'pinned_site.admin.inc',
  );

  $items['admin/config/system/pinned_site/static_tasks/%/edit'] = array(
    'title' => 'Static Task Edit',
    'load arguments' => array(5),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pinned_site_admin_static_task_edit', 5),
    'access callback' => 'user_access',
    'access arguments' => array('administer pinned site settings'),
    'type' => MENU_CALLBACK,
    'file' => 'pinned_site.admin.inc',
  );
  
  $items['admin/config/system/pinned_site/static_tasks/%/delete'] = array(
    'title' => 'Static Task Delete',
    'load arguments' => array(5),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pinned_site_admin_static_task_delete', 5),
    'access callback' => 'user_access',
    'access arguments' => array('administer pinned site settings'),
    'type' => MENU_CALLBACK,
    'file' => 'pinned_site.admin.inc',
  );
  
  $items['admin/config/system/pinned_site/recent_posts'] = array(
    'title' => 'Recent Posts',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pinned_site_admin_recent_posts_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer pinned site settings'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'pinned_site.admin.inc',
    'weight' => 4,
  );
  
  $items['admin/config/system/pinned_site/notification_badge'] = array(
    'title' => 'Notification & Badge',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pinned_site_admin_notification_badge_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer pinned site settings'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'pinned_site.admin.inc',
    'weight' => 5,
  );
  
  // Physically we don't have pinned_site.js file.
  $js_file = drupal_get_path('module', 'pinned_site') . '/js/pinned_site.js';
  $items[$js_file] = array(
    'page callback' => 'pinned_site_generate_js',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'pinned_site.pages.inc',
  );
  
  $items['browserconfig.xml'] = array(
    'page callback' => 'pinned_site_generate_browserconfig',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'pinned_site.pages.inc',
  );

  return $items;
}

/**
 * Gets static tasks ordered by weight and returns $limit only.
 * @param int $limit
 */
function pinned_site_get_static_tasks($limit) {
  
  $result = db_select('pinned_site_tasks', 'p')
    ->fields('p')
    ->orderBy('weight', 'ASC')
    ->range(0, $limit)
    ->execute();
    
  $tasks = array();
  while ($task = $result->fetchAssoc()) {
    $tasks[$task['id']] = $task;
  }
 
  return $tasks;
}

/**
 * Gets the static task by task ID.
 * @param int $id
 */
function pinned_site_get_static_task($id) {
  
  $result = db_select('pinned_site_tasks', 'p')
    ->fields('p')
    ->condition('id', $id)
    ->execute();
  
  return $result->fetchAssoc();
}

/**
 * Prepares string to output it as a content attribute value of meta tag.
 * It is unacceptable to use check_plain() function instead this 
 * because it converts quotes to their HTML equivalents,
 * and html entities are not rendered in the jump list.
 * The function just replaces double quote to single quote in string 
 * and then removes any HTML tags from it.
 * @param string $content - value for preparing
 */
function pinned_site_prepare_meta_content($content) {
  $content = str_replace("\"", "'", $content);
  return strip_tags($content);
}

/**
 * Generate meta headers for Pinned Sites feature.
 * @return string of meta data
 */
function pinned_site_generate_meta_headers() {
  $use_browserconfig = variable_get('pinned_site_use_browserconfig_xml', 'none');
  $hide_browserconfig_metatags = FALSE;

  $meta_data = array(
    'application-name' => variable_get('pinned_site_application_name', ''),
    'msapplication-tooltip' => variable_get('pinned_site_msapplication_tooltip', ''),
    'msapplication-starturl' => variable_get('pinned_site_msapplication_starturl', ''),
    'msapplication-navbutton-color' => variable_get('pinned_site_msapplication_navbutton_color', ''),
  );
  
  if ($use_browserconfig !== 'none') {
    $meta_data['msapplication-config'] = url('browserconfig.xml');
    
    if ($use_browserconfig === 'xml_without_meta') {
      $hide_browserconfig_metatags = TRUE;
    }
  }
  else {
    $meta_data['msapplication-config'] = 'none';
  }
  
  if (!$hide_browserconfig_metatags) {
    $meta_data['msapplication-TileColor'] = variable_get('pinned_site_msapplication_tilecolor', '');
    $meta_data['msapplication-TileImage'] = variable_get('pinned_site_msapplication_tileimage', '');
    $meta_data['msapplication-square70x70logo'] = variable_get('pinned_site_msapplication_tile_square70x70logo', '');
    $meta_data['msapplication-square150x150logo'] = variable_get('pinned_site_msapplication_tile_square150x150logo', '');
    $meta_data['msapplication-wide310x150logo'] = variable_get('pinned_site_msapplication_tile_wide310x150logo', '');
    $meta_data['msapplication-square310x310logo'] = variable_get('pinned_site_msapplication_tile_square310x310logo', '');

    $polling_uri_1_data = variable_get('pinned_site_notification_polling_uri1', '');
    $polling_uri_2_data = variable_get('pinned_site_notification_polling_uri2', '');
    $polling_uri_3_data = variable_get('pinned_site_notification_polling_uri3', '');
    $polling_uri_4_data = variable_get('pinned_site_notification_polling_uri4', '');
    $polling_uri_5_data = variable_get('pinned_site_notification_polling_uri5', '');

    if (!empty($polling_uri_1_data) || !empty($polling_uri_2_data) || !empty($polling_uri_3_data) || !empty($polling_uri_4_data) || !empty($polling_uri_5_data)) {
      $notification = 'frequency=' . variable_get('pinned_site_notification_freqency', 30);
      $notification .= ';cycle=' . variable_get('pinned_site_notification_cycle', 1);
    
      if (!empty($polling_uri_1_data)) {
        $notification .= ';polling-uri=' . $polling_uri_1_data;
      }
      
      if (!empty($polling_uri_2_data)) {
        $notification .= ';polling-uri2=' . $polling_uri_2_data;
      }
      
      if (!empty($polling_uri_3_data)) {
        $notification .= ';polling-uri3=' . $polling_uri_3_data;
      }
      
      if (!empty($polling_uri_4_data)) {
        $notification .= ';polling-uri4=' . $polling_uri_4_data;
      }
      
      if (!empty($polling_uri_5_data)) {
        $notification .= ';polling-uri5=' . $polling_uri_5_data;
      }
      
      $meta_data['msapplication-notification'] = $notification;
    }
  
    $badge_polling_uri_data = variable_get('pinned_site_badge_polling_uri', '');
    
    if (!empty($badge_polling_uri_data)) {
      $badge = 'frequency=' . variable_get('pinned_site_badge_freqency', 30);
      $badge .= ';polling-uri=' . $badge_polling_uri_data;

      $meta_data['msapplication-badge'] = $badge;
    }
  }
  
  $window_width = variable_get('pinned_site_msapplication_window_width', '');
  $window_height = variable_get('pinned_site_msapplication_window_height', '');
  
  if (!empty($window_width) && !empty($window_height)) {
    $meta_data['msapplication-window'] = 'width=' . $window_width . ';height=' . $window_height;
  }
  
  $output = '';
  
  foreach ($meta_data as $name => $content) {
    if (empty($content)) {
      continue;
    }
    
    $content = pinned_site_prepare_meta_content($content);
    
    $output .= "<meta name=\"" . $name . "\" content=\"" . $content . "\" />\n";
  }
  
  $tasks = pinned_site_get_static_tasks(PINNED_SITE_STATIC_TASKS_MAX_QUANTITY);
  
  foreach ($tasks as $task) {
   
    $options = array(
      "name=" . pinned_site_prepare_meta_content($task['name']),
      "action-uri=" . check_url($task['action_uri']),
      "icon-uri=" . check_url($task['icon_uri']),
      "window-type=" . $task['window_type'],
    );
    
    $output .= "<meta name=\"msapplication-task\" content=\"" . implode(";", $options) . "\"/>\n";
  }
  
  return $output;
}

/**
 * Implements hook_preprocess_page().
 */
function pinned_site_preprocess_page(&$variables) {
  // Add meta data.
  $meta_data = pinned_site_generate_meta_headers();
  
  $element = array(
    '#type' => 'markup',
    '#markup' => $meta_data,
  );
  
  drupal_add_html_head($element, 'pinned_site_meta');
  
  // Add javascript.
  $js_file_path = base_path() . drupal_get_path('module', 'pinned_site') . '/js/pinned_site.js';
  $js_code = "<script type=\"text/javascript\" src=\"" . $js_file_path . "\"></script>\n";
  
  $element = array(
    '#type' => 'markup',
    '#markup' => $js_code,
  );
  
  drupal_add_html_head($element, 'pinned_site_script');
  
  $variables['head'] = drupal_get_html_head();
}

/**
 * Implements hook_theme().
 */
function pinned_site_theme() {
  return array(
    'pinned_site_admin_static_tasks_settings' => array(
      'render element' => 'form',
      'file' => 'pinned_site.admin.inc',
    )
  );
}
