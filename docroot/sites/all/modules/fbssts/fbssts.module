<?php

/**
 * @file
 *   Provides suggestions for tags to add to Statuses.
 */

/**
 * Implementation of hook_menu().
 */
function fbssts_menu() {
  $items = array();
  $items['admin/settings/fbssts'] = array(
    'title' => 'Statuses Tag Suggestions',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fbssts_admin'),
    'access arguments' => array('administer site configuration'),
    'description' => 'Allows administrators to adjust certain display settings for Statuses Tag Suggestions.',
    'file' => 'fbssts.admin.inc',
  );
  $items['fbssts/load'] = array(
    'title' => 'Load suggestions',
    'page callback' => '_fbssts_autocomplete',
    'access arguments' => array('use tag suggestions'),
    'description' => 'Gets the HTML for use in the floating tag suggestion dialog.',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_permission().
 */
function fbssts_permission() {
  return array(
    'use tag suggestions' => array(
      'title' => t('Use tag suggestions'),
    ),
  );
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function fbssts_form_statuses_box_alter(&$form, &$form_state) {
  if (!user_access('use tag suggestions')) {
    return;
  }
  //echo "in";exit;
  $path = drupal_get_path('module', 'fbssts');
  drupal_add_js($path .'/fbssts.js');
  drupal_add_css($path .'/fbssts.css');
  $form['fbssts'] = array(
    '#type' => 'markup',
    '#markup' => '<div class="fbssts-suggestions" style="display: none;"></div>',
    '#weight' => 1000,
  );
}

/**
 * Implementation of hook_theme().
 */
function fbssts_theme($existing, $type, $theme, $path) {
  return array(
    'fbssts' => array(
      'variables' => array(
        'part' => NULL,
        'type' => NULL,
      ),
    ),
  );
}

/**
 * Themes autocompleted suggestions.
 */
function theme_fbssts(&$vars) {
  $type = $vars['type'];
  $part = $vars['part'];
  $suggestions = fbssts_get_suggestions($type, $part, variable_get('fbssts_count', 5));
  $items = array();
  foreach ($suggestions as $item) {
    $items[] = check_plain($item->name);
  }
  return theme('item_list', array('items' => $items, 'title' => NULL, 'type' => 'ul', 'attributes' => array('class' => 'fbssts-suggestion-list')));
}

function fbssts_get_suggestions($type, $part, $count) {
  $s = _fbssts_get_suggestions($type, $part, $count, TRUE);
  $c = count($s);
  if ($c < $count) {
    $t = $type == 'term' ?
      _fbssts_get_suggestions($type, $part, $count - $c, FALSE, $s) :
      _fbssts_get_all_user_suggestions($part, $count - $c, $s);
    $s = array_merge($s, $t);
  }
  return $s;
}

function _fbssts_get_suggestions($type, $part, $count, $own, $exclude = array()) {
  $query = db_select('statuses_tags', 't')
    ->fields('t', array('rid', 'name'));
  $query->addExpression('COUNT(t.sid)', 'count');
  $query->innerjoin('statuses', 's', 't.sid = s.sid');
  $query
    ->condition('t.type', $type)
    ->condition('t.name', db_like($part) . '%', 'LIKE');
  if (variable_get('fbssts_time', '')) {
    $query->condition('s.created', REQUEST_TIME - variable_get('fbssts_time', ''), '>');
  }
  if ($own) {
   $query->condition('s.sender', $GLOBALS['user']->uid);
  }
  if ($exclude) {
    $ids = array();
    foreach ($exclude as $item) {
      if ($item->type == $type) {
        $ids[] = $item->id;
      }
    }
    if ($ids) {
      $query->condition('t.rid', $ids, 'NOT IN');
    }
  }
  $result = $query->groupBy('t.rid')
    ->orderBy('count', 'DESC')
    ->orderBy('t.name', 'DESC')
    ->range(0, $count)
    ->execute()
    ->fetchAll();
  $suggestions = array();
  foreach ($result as $obj) {
    $suggestions[] = (object) array(
      'type' => $type,
      'id' => $obj->rid,
      'name' => $obj->name,
    );
  }
  return $suggestions;
}

function _fbssts_get_all_user_suggestions($part, $count, $exclude = array()) {
  $query = db_select('users')
    ->fields('users', array('uid', 'name'))
    ->where('LOWER(name) LIKE LOWER(:username)', array(':username' => db_like($part) . '%'));
  $query->addExpression("'user'", 'type');
  if ($exclude) {
    $ids = array();
    foreach ($exclude as $item) {
      if ($item->type == 'user') {
        $ids[] = $item->id;
      }
    }
    if ($ids) {
      $query->condition('uid', $ids, 'NOT IN');
    }
  }
  $result = $query->orderBy('name')
    ->range(0, $count)
    ->execute()
    ->fetchAll();
  $s = array();
  foreach ($result as $account) {
    $s[] = $account;
  }
  return $s;
}

/**
 * Helper function to autocomplete tags.
 */
function _fbssts_autocomplete() {
  $text = $_POST['text'];
  $part = _fbssts_find_tag($text);
  $length = drupal_strlen($part);
  $result = _fbssts_clean_tag($part);
  $part = $result['tag'];
  $prefix = $result['prefix'];
  if ($part) {
    echo '<span class="fbssts-hidden fbssts-part-length">'. $length .'</span>'. theme('fbssts', array('type' => $prefix == '#' ? 'term' : 'user', 'part' => $part));
  }
}

/**
 * Searches for tags in a string.
 *
 * Tags can be in the following formats:
 *   - #hashtag
 *   - @userreference
 *   - [#tag with word-break characters]
 *
 * @param $subject
 *   The text in which to replace tags.
 * @return
 *   A nested array of tags. The outer array is keyed by type ('@' and '#').
 */
function _fbssts_find_tag($subject) {
  $pattern = '%((?:\A|(?<=\s))(?:#|@)(\w|(\p{L}\p{M}?))+$)|(\[(#|@)[^\]]+?(?!\])$)%u';
  if (variable_get('facebook_status_tags_alt_pattern', FALSE)) {
    $pattern = '%((?:\A|(?<=\s))(?:#|@)\w+$)|(\[(#|@)[^\]]+?(?!\])$)%u';
  }
  $matches = array();
  preg_match_all($pattern, $subject, $matches);
  if (!empty($matches[0])) {
    $word = array_pop($matches[0]);
    return $word;
  }
}

/**
 * Removes leading #, @, [#, or [@ from a tag.
 * @param $tag
 *   The tag to clean.
 * @return
 *   An associative array with the clean tag ('tag') and the prefix ('prefix').
 */
function _fbssts_clean_tag($tag) {
  $one = drupal_substr($tag, 0, 1);
  if ($one == '[') {
    $prefix = drupal_substr($tag, 1, 1);
    $tag = drupal_substr($tag, 2);
  }
  else {
    $prefix = $one;
    $tag = drupal_substr($tag, 1);
  }
  return array('tag' => $tag, 'prefix' => $prefix);
}
