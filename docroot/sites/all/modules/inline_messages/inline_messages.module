<?php
// $Id: inline_messages.module,v 1.5.4.1 2010/11/10 20:32:18 jsfwd Exp $

/**
 * @file
 * The Inline Messages module displays form messages (error/status/warning)
 * inline with the form instead of the default behaviour at the top of the page.
 */

define('SCROLLTO_PATH_DEFAULT', drupal_get_path('module', 'inline_messages') . '/js/jquery.scrollTo-1.4.2-min.js');
define('SCROLLTO_LINK', '<a href="http://flesler.blogspot.com/2007/10/jqueryscrollto.html" title="jQuery.ScrollTo plugin" rel="external">jQuery.ScrollTo</a>');

/**
 * Implements hook_help()
 */
function inline_messages_help($path, $arg) {
  switch ($path) {
    case 'admin/config/inline_messages':
      return t('Inline Messages allows you to display form messages (error/status/warning) inline instead of the default behaviour at the top of the page (or wherever your theme outputs messages).');
      break;
  }
}

/**
 * Implements hook_permission()
 */
function inline_messages_permission() {
  return array(
    'administer inline messages' => array(
      'title' => t('Administer inline messaages')
    ),
  );
}

/**
 * Implements hook_menu()
 *
 */
function inline_messages_menu() {
  $items['admin/config/user-interface/inline_messages'] = array(
    'title' => 'Inline Messages',
    'description' => "Choose which forms you'd like to add inline messages",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('inline_messages_admin_settings'),
    'access arguments' => array('administer inline messaages'),
    'file' => 'inline_messages.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_form_alter()
 */
function inline_messages_form_alter(&$form, &$form_state, $form_id) {
  // hide the preview button?
  if (variable_get('inline_messages_hide_preview', FALSE)) {
    unset($form['preview']);
  }

  // change the comment form submit button if specified
  if ($form_id == 'comment_form') {
    if (variable_get('inline_messages_form_comment_submit', NULL)) {
      $form['submit']['#value'] = variable_get('inline_messages_form_comment_submit', NULL);
    }
  }

  // check if we are using inline messages
  $show_pages = variable_get('inline_messages_display', array('site' => 'site'));
  $enabled = TRUE;
  
  if (arg(0) == 'admin') {
    if (!isset($show_pages['admin'])) {
      $enabled = FALSE;
    }
  }
  elseif (arg(0) == 'node' && (arg(1) == 'add' || arg(2) == 'edit')) {
    if (!isset($show_pages['edit'])) {
      $enabled = FALSE;
    }
  }
  elseif (!isset($show_pages['site'])) {
    $enabled = FALSE;
  }

  // check if this form has been included or excluded
  $visibility = variable_get('inline_messages_formids_options', NULL);

  // clean up forms if specified incorrectly (#comment-form instead of comment_form)
  $ids = preg_replace(array('/-/', '/#/', '/\r/'), array('_'), variable_get('inline_messages_formids', NULL));
  $ids = array_unique(explode("\n", $ids));

  switch ($visibility) {
    case 'include':
      if (in_array($form_id, $ids)) {
        $enabled = TRUE;
      }
      break;
    case 'exclude':
      if (in_array($form_id, $ids)) {
        $enabled = FALSE;
      }
      break;
  }

  // add the js, make sure the scrollto plugin exists first
  if ($enabled && file_exists(variable_get('inline_messages_scrollto_path', SCROLLTO_PATH_DEFAULT))) {
    // add submit handler to store the form_id
    $form['#submit'][] = 'inline_messages_submit_form';
    
    // a page can have multiple forms, so we need to get the id of the submitted
    // form to target. if a form is still in progress (aka error, multistep) we
    // can use $form_state. after a form is completed we need to use the
    // session variable.
    if (
      (isset($form_state['input']['form_id']) && $form_state['input']['form_id'] == $form_id) ||
      (isset($_SESSION['form_submitted']) && $_SESSION['form_submitted'] == $form_id)
    ) {
      // add js
      drupal_add_js(drupal_get_path('module', 'inline_messages') . '/js/inline_messages.js');
      drupal_add_js(array('form_submitted' => str_replace('_', '-', inline_messages_form_id($form_id))), 'setting');
      
      $settings = array(
        'duration' => (int) variable_get('inline_messages_scrollto_duration', 0),
        'offset' => (int) variable_get('inline_messages_scrollto_offset', 0)
      );
      drupal_add_js(array('inline_messages_scrollto' => $settings), 'setting');
      drupal_add_js(variable_get('inline_messages_scrollto_path', SCROLLTO_PATH_DEFAULT), array('group' => JS_LIBRARY));
      
      // unset session
      if (isset($_SESSION['form_submitted'])) unset($_SESSION['form_submitted']);
    }
  }
}

/**
 * catch for special cases where the $form_id (machine name) doesn't match the
 * form id (dom) attribute needed by the jQuery
 */
function inline_messages_form_id($form_id) {
  if ($form_id == 'user_login_block') {
    $form_id = 'user-login-form';
  }
  return $form_id;
}

function inline_messages_submit_form($form, &$form_state) {
  // store the submitted form_id
  $_SESSION['form_submitted'] = $form['form_id']['#value'];
}