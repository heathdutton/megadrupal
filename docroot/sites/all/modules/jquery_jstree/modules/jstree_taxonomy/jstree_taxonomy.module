<?php

/**
 * Implements hook_field_widget_info().
 */
function jstree_taxonomy_field_widget_info() {
  return array(
    'jstree_taxonomy' => array(
      'label' => t('jsTree'),
      'field types' => array('taxonomy_term_reference'),
      'settings' => array(
        'plugins' => array(),
      ),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_settings_form().
 */
function jstree_taxonomy_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];

  $form['plugins'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Select optional plugins'),
    '#default_value' => $settings['plugins'],
    '#options' => array(
      'checkbox' => t('Checkbox'),
      'wholerow' => t('Wholerow'),
      'sort' => t('Sort'),
    ),
    '#description' => t('This is not a complete list of jsTree plugins but all these can be enabled with simple toggle and further configurations are not required.'),
  );

  return $form;
}

/**
 * Implements hook_field_widget_form().
 */
function jstree_taxonomy_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $widget_settings = $instance['widget']['settings'];
  $default_value = array();
  foreach ($items as $item) {
    $default_value[] = $item['tid'];
  }
  $allowed_value = reset($field['settings']['allowed_values']);
  $vocabulary = taxonomy_vocabulary_machine_name_load($allowed_value['vocabulary']);
  $element += array(
    '#type' => 'jstree',
    '#default_value' => $default_value,
    '#element_validate' => array('jstree_taxonomy_validate'),
    '#tree_options' => array(
      'plugins' => $widget_settings['plugins'],
      'core' => array(
        'multiple' => $field['cardinality'] == 1 ? FALSE : TRUE,
        'data' => array(
          'url' => url('taxonomy/jstree/load/' . $vocabulary->vid),
        ),
      ),
    ),
  );
  return $element;
}

/**
 * Validation callback for jsTree Taxonomy widget.
 */
function jstree_taxonomy_validate($element, &$form_state) {
  $items = drupal_array_get_nested_value($form_state['values'], $element['#parents']);
  foreach ($items as $key => &$item) {
    $items[$key] = array('tid' => $item);
  }
  drupal_array_set_nested_value($form_state['values'], $element['#parents'], $items);
}

/**
 * Implements hook_menu()
 */
function jstree_taxonomy_menu() {
  $items['taxonomy/jstree/load/%taxonomy_vocabulary'] = array(
    'page callback' => 'jstree_taxonomy_options',
    'page arguments' => array(3, 4),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * jstree options json callback
 *
 * @param $vocabulary
 *   Taxonomy vocabulary
 *
 * @return
 *   JSON data
 */
function jstree_taxonomy_options($vocabulary) {
  $query = drupal_get_query_parameters();

  // parent is the node of the tree that is about to get opened.
  $parent = 0;
  if (is_numeric($query['id'])) {
    $parent = $query['id'];
  }

  // default value is a node property so default values are included in each
  // request.
  $selected = array();
  if (isset($query['default_value'])) {
    $selected = $query['default_value'];
  }

  // parents keeps track of all the parents of selected nodes so subsequent
  // requests can be made.
  // TODO: children array could be populated already?
  $parents = array();
  foreach ($selected as $selected_tid) {
    foreach (taxonomy_get_parents_all($selected_tid) as $selected_parent) {
      if ($selected_parent->tid != $selected_tid) {
        $parents[$selected_parent->tid] = TRUE;
      }
    }
  }
  $options = array();
  foreach (taxonomy_get_tree($vocabulary->vid, $parent, 1) as $term) {
    $children = !empty(taxonomy_get_tree($vocabulary->vid, $term->tid, 1));
    $options[] = array(
      'id' => $term->tid,
      'text' => entity_label('taxonomy_term', $term),
      'children' => $children,
      'state' => array(
        'opened' => isset($parents[$term->tid]),
        'disabled' => FALSE,
        'selected' => in_array($term->tid, $selected),
      ),
    );
  }
  drupal_json_output($options);
}
