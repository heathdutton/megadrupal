<?php
/**
 * @file
 * Settings and prepare form for mobilpay redirect.
 */

/**
 * Implements hook_libraries_info().
 */
function commerce_mobilpay_libraries_info() {
  $libraries['Mobilpay'] = array(
    'name' => 'MobilPay library',
    'vendor url' => 'http://mobilpay.ro',
    'download url' => 'https://admin.mobilpay.ro/ro/implement/admin/download-example/docId/1993',
    'path' => 'Payment',
    'version' => '1.0',
    'files' => array(
      'php' => array(
        'Request/Abstract.php',
        'Request/Card.php',
        'Request/Notify.php',
        'Invoice.php',
        'Address.php',
      ),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_menu().
 */
function commerce_mobilpay_menu() {
  $items = array();

  $items['checkout/mobilpay/complete'] = array(
    'title' => 'Order complete',
    'page callback' => 'commerce_mobilpay_complete',
    'page arguments' => array(),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'commerce_mobilpay.pages.inc',
  );

  $items['checkout/mobilpay/confirm'] = array(
    'title' => 'Order complete',
    'page callback' => 'commerce_mobilpay_confirm',
    'page arguments' => array(),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'commerce_mobilpay.pages.inc',
  );

  $items['admin/commerce/config/mobilpay-keys'] = array(
    'title' => 'Order complete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_mobilpay_keys'),
    'access arguments' => array('configure store'),
    'file' => 'commerce_mobilpay.pages.inc',
  );
  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function commerce_mobilpay_menu_alter(&$items) {
  $items['admin/commerce/config/mobilpay-keys']['title'] = 'Mobilpay settings';
  $items['admin/commerce/config/mobilpay-keys']['description'] = 'Mobilpay settings.';
  $items['admin/commerce/config/mobilpay-keys']['parent'] = 'admin/commerce/config/advanced-settings';
  $items['admin/commerce/config/mobilpay-keys']['weight'] = 35;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_mobilpay_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_mobilpay'] = array(
    'base' => 'commerce_mobilpay',
    'title' => t('Credit Card'),
    'display' => t('Credit Card - mobilpay.ro'),
    'short_title' => t('Mobilpay'),
    'description' => t('Integration with Mobilpay using redirection.'),
    'active' => TRUE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );

  return $payment_methods;
}

/**
 * Settings form, Used to set vendor name and secret key within Rules settings.
 */
function commerce_mobilpay_settings_form($settings = NULL) {
  $form = array();

  // Merge default settings into the stored settings array.
  $settings = (array) $settings + array(
    'merchant_code' => '',
    'transaction_type' => 'card',
    'allow_installments' => FALSE,
    'max_installments' => 0,
  );

  $form['merchant_code'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant Code'),
    '#description' => t('Merchant Code from Mobilpay'),
    '#required' => TRUE,
    '#default_value' => $settings['merchant_code'],
  );

  $select_options = drupal_map_assoc(array('http://sandboxsecure.mobilpay.ro', 'https://secure.mobilpay.ro'));
  $form['post_url'] = array(
    '#type' => 'select',
    '#title' => t('POST Url'),
    '#options' => $select_options,
    '#description' => t('Url to post data. For testing use http://sandboxsecure.mobilpay.ro. When going live, use https://secure.mobilpay.ro.'),
    '#required' => TRUE,
    '#default_value' => $settings['post_url'],
  );

  return $form;
}

/**
 * Implements hook_redirect_form().
 */
function commerce_mobilpay_redirect_form($form, &$form_state, $order, $payment_method) {
  $settings = array();

  // Return an error if the enabling action's settings haven't been configured.
  if (empty($payment_method['settings']['merchant_code'])) {
    drupal_set_message(t('Mobilpay Form Integration is not configured for use. Merchant has not been specified.'), 'error');
    return array();
  }

  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  $total = commerce_line_items_total($wrapper->commerce_line_items);

  $settings['instance_id'] = $payment_method['instance_id'];
  return commerce_mobilpay_order_form($form, $form_state, $order, $total, $payment_method['settings'] + $settings);
}

/**
 * Creates the Mobilpay Form.
 */
function commerce_mobilpay_order_form($form, &$form_state, $order, $total, $settings) {
  libraries_load('Mobilpay');
  $uid = $order->uid;

  // Ensure a default value for the payment_method setting.
  // Probably, we don't have to..
  $settings += array('payment_method' => '');

  // Build the data array that will be translated into hidden form values.
  $charge = number_format($total['amount'] / 100, 2, '.', '');
  $billing = commerce_customer_profile_load($order->commerce_customer_billing[LANGUAGE_NONE][0]['profile_id']);

  $payment_url = $settings['post_url'];

  // This is the path on your server to the public certificate.
  $public_key = file_load(variable_get('commerce_mobilpay_key_public'));
  $x509_file_path = drupal_realpath($public_key->uri);

  try {
    srand((double) microtime() * 1000000);
    $obj_pm_req_card = new Mobilpay_Payment_Request_Card();
    $obj_pm_req_card->signature = $settings['merchant_code'];
    $obj_pm_req_card->orderId = $order->order_id;

    $obj_pm_req_card->confirmUrl = url('checkout/mobilpay/confirm', array('absolute' => TRUE));
    $obj_pm_req_card->returnUrl = url('checkout/mobilpay/complete', array('absolute' => TRUE));

    $obj_pm_req_card->invoice = new Mobilpay_Payment_Invoice();
    $obj_pm_req_card->invoice->currency = 'RON';
    $obj_pm_req_card->invoice->amount = $charge;
    $obj_pm_req_card->invoice->installments = '2,3';
    $obj_pm_req_card->invoice->details = 'Plata cu card-ul prin suma';
    $obj_pm_req_card->params['uid'] = $uid;

    $customer_address = $billing->commerce_customer_address[LANGUAGE_NONE][0];
    $billing_address = new Mobilpay_Payment_Address();
    $billing_address->type = 'person';
    if (isset($customer_address['first_name'])) {
      $billing_address->firstName = $customer_address['first_name'];
    }
    if (isset($customer_address['last_name'])) {
      $billing_address->lastName = $customer_address['last_name'];
    }
    if (isset($customer_address['country'])) {
      $billing_address->country = $customer_address['country'];
    }
    if (isset($customer_address['locality'])) {
      $billing_address->city = $customer_address['locality'];
    }
    if (isset($customer_address['postal_code'])) {
      $billing_address->zipCode = $customer_address['postal_code'];
    }
    if (isset($customer_address['thoroughfare'])) {
      $billing_address->address = $customer_address['thoroughfare'];
    }
    $billing_address->email = drupal_substr($order->mail, 0, 64);
    $obj_pm_req_card->invoice->setBillingAddress($billing_address);

    $obj_pm_req_card->encrypt($x509_file_path);
  }

  // TODO - catch exception.
  catch(Exception $e) {
  }
  $data = array(
    'env_key' => $obj_pm_req_card->getEnvKey(),
    'data'    => $obj_pm_req_card->getEncData(),
  );
  
   // Check if transaction exist and if it's confirmed
  $cancel_url = variable_get('commerce_mobilpay_cancelurl');
  $result = db_query('SELECT n.transaction_id FROM {commerce_payment_transaction} n WHERE n.order_id = :id_comanda', array(':id_comanda' => $order->order_id));
    if (isset($result)) {
	    foreach ($result as $record) {
	      $tid = $record->transaction_id;
	    }
	    $transaction = commerce_payment_transaction_load($tid);
	    if (isset($transaction->remote_status) && $transaction->remote_status != 'confirmed') {
	    	drupal_set_message($transaction->message);
	    	drupal_goto($cancel_url);
	    }
    }
  $form['#action'] = $payment_url;

  foreach ($data as $name => $value) {
    $form[$name] = array('#type' => 'hidden', '#value' => $value);
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Trimite Comanda'),
  );

  return $form;
}
