<?php

/**
 * Implements hook_token_info().
 *
 * Provides tokens for the current field item.
 */
function css_field_formatters_token_info() {
  $info = array();

  $info['types']['field-value'] = array(
    'name' => t('Field item'),
    'description' => t('Tokens related to field value.'),
    'needs-data' => 'field-value',
  );

  $info['tokens']['field-value']['value'] = array(
    'name' => t('Field item delta'),
    'description' => t('The value of this field item.'),
  );

  $info['tokens']['field-value']['delta'] = array(
    'name' => t('Field item delta'),
    'description' => t('The delta of this field item.'),
  );

  $info['tokens']['field-value']['raw'] = array(
    'name' => t('Raw item value'),
    'description' => t('The raw value of this field item.'),
  );

  return $info;
}

/**
 * Implements hook_tokens().
 *
 * Replace our tokens that we provide in css_field_formatters_token_info().
 */
function css_field_formatters_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();

  if ($type == 'field-value') {
    foreach ($tokens as $name => $original) {
      $replacements[$original] = $data['field-value'][$name];
    }
  }

  return $replacements;
}

/**
 * Implements hook_field_formatter_info().
 */
function css_field_formatters_field_formatter_info() {
  $formatters = array(
    'css_property_formatter' => array(
      'label' => t('CSS property'),
      'field types' => array('number_integer', 'number_float', 'list_text', 'list_float', 'list_integer', 'list_boolean', 'text', 'color_field_rgb', 'color_field_rgba'),
      'settings' => array(
        'css' => '@media only screen and (min-width: 0) {
  .selector {
    color: [field-value:value];
  }
}'
      ),
    ),
    'css_aspect_ratio_formatter' => array(
      'label' => t('CSS aspect ratio'),
      'field types' => array('number_float'),
      'settings' => array(
        'css_selector' => 'body',
        'media_query' => 'all',
        'important' => 0
      ),
    ),
    'css_style_switch_formatter' => array(
      'label' => t('CSS style switch'),
      'field types' => array('list_text', 'list_float', 'list_integer', 'list_boolean'),
      'settings' => array(
        'styles' => array(),
        'default_css' => '@media only screen and (min-width: 0) {
  .selector {
    color: [field-value:value];
  }
}'
      ),
    ),
  );

  return $formatters;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function css_field_formatters_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  drupal_add_js(drupal_get_path('module', 'css_field_formatters') . '/js/css_field_formatters.js');

  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  // Prepare tokens.
  if (module_exists('token')) {
    $tokens_mapping = array_keys(array_flip(token_get_entity_mapping()));
    $tokens_mapping[] = 'field-value';
    $entity_types = array_keys($field['bundles']);

    $tokens_list = array();
    $tokens_list[] = 'field-value';
    
    foreach($tokens_mapping as $token_map => $entity_map) {
      foreach ($entity_types as $entity_type) {
        if ($entity_type == $entity_map) {
          $tokens_list[] = $token_map;
        }
      }
    }

    $field['tokens_list'] = $tokens_list;
  }

  switch ($display['type']) {
    case 'css_property_formatter':
      $element = _css_field_formatters_generate_css_field($field, $settings['css']);
      break;

    case 'css_style_switch_formatter':
      $element['styles'] = array(
        '#title' => t('Style properties'),
        '#type' => 'fieldset',
        '#tree' => TRUE,
      );

      $values = _css_field_formatters_get_switch_values($field);

      // Generate a css editor for every value.
      foreach ($values as $index => $value) {
        if (empty($settings['styles'][$index])) {
          $field_value = $settings['default_css'];
        } else {
          $field_value = $settings['styles'][$index]['css'];
        }
        $editor = _css_field_formatters_generate_css_field($field, $field_value);
        $editor['css']['#title'] = t('CSS code for "%value":', array('%value' => $value));

        $element['styles'][$index] = $editor;
      }
      break;

    case 'css_aspect_ratio_formatter':
      $element['css_selector'] = array(
        '#type' => 'textfield',
        '#title' => t('Selector'),
        '#description' => t('A valid CSS selector that will be used to apply the aspect ratio.'),
        '#default_value' => $settings['css_selector'],
      );

      $element['media_query'] = array(
        '#type' => 'textfield',
        '#title' => t('Media Query'),
        '#description' => t('Apply height using a media query. CSS3 Only. Useful for responsive designs. example: only screen and (min-width:481px) and (max-width:768px) [<a href="http://www.w3.org/TR/css3-mediaqueries/">Read about media queries</a>]'),
        '#default_value' => $settings['media_query'],
      );

      $element['important'] = array(
        '#type' => 'checkbox',
        '#title' => t('Add "!important".'),
        '#description' => t('This will add !important to every property set by this formatter.'),
        '#default_value' => $settings['important'],
      );
      break;
  }

  return $element;
}

function _css_field_formatters_generate_css_field($field, $default_value) {
  $element = array();
  $element['css'] = array(
    '#type' => 'textarea',
    '#title' => t('CSS code'),
    '#rows' => 3,
    '#attributes' => array(
      'data-ace-editor' => 'data-ace-editor',
    ),
    '#default_value' => $default_value,
    '#description' => t('Add any CSS code including <a href="http://www.w3.org/TR/css3-mediaqueries/">media queries</a>. Tokens are supported. Use [field-value:value] token for the field value.'),
  );

  if (module_exists('token')) {
    $element['token'] = array(
      '#type' => 'container',
      '#theme' => 'token_tree',
      '#token_types' => $field['tokens_list'],
      '#dialog' => TRUE,
    );
  }
  return $element;
}

/**
 * Gathers possible field values for the switch formatter.
 * @param $field
 * @return array of possible values
 */
function _css_field_formatters_get_switch_values($field) {
  switch ($field['type']) {
    case 'list_boolean':
      $values = array_keys($field['settings']['allowed_values']);
      break;
    default:
      $values = $field['settings']['allowed_values'];
  }
  return $values;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function css_field_formatters_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  switch ($display['type']) {
    case 'css_property_formatter':
      if (!empty($settings['css'])) {
        $summary[] = '<h3>CSS:</h3>';
        $summary[] = '<small><pre>' . $settings['css'] . '</pre></small>';
      }
      break;

    case 'css_style_switch_formatter':
      $values = _css_field_formatters_get_switch_values($field);

      foreach ($values as $index => $value) {
        if (!empty($settings['styles'][$index])) {
          $summary[] = '<h3>' . t('CSS code for "%value":', array('%value' => $value)) . '</h3>';
          $summary[] = '<small><pre>' . $settings['styles'][$index]['css'] . '</pre></small>';
        }
      }
      break;

    case 'css_aspect_ratio_formatter':
      $important = '';
      if ($settings['important']) {
        $important = ' !important';
      }

      $summary[] = '<h3>' . t('Aspect ratio CSS code:') . '</h3>';
      $style[] = '<small><pre>' . $settings['css_selector'] . ' {';
      $style[] = '  width: 100%' . $important . ';';
      $style[] = '  height: 0' . $important . ';';
      $style[] = '  padding-bottom: x%' . $important . ';';
      $style[] = '}</pre></small>';
      $summary[] = implode("\n", $style);
      $summary[] = '<p>' . t('Media query') . ': ' . $settings['media_query'] . '</p>';
  };

  // Force Drupal to show the configuration button.
  if (empty($summary)) {
    $summary[] = ' ';
  }

  return implode('', $summary);
}

/**
 * Implements hook_field_formatter_view().
 */
function css_field_formatters_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];

  $css = '';
  $field_value = '';
  $field_raw_value = '';

  if (count($items) == 0) {
    return $element;
  }

  // Gather CSS codes.
  switch ($display['type']) {
    case 'css_property_formatter':
      // Determine field value.
      switch ($field['type']) {
        case 'color_field_rgb':
        case 'color_field_rgba':
          $raw_value = 'rgb';
          $save_value = 'rgb';
          break;
        default:
          $raw_value = 'value';
          $save_value = 'safe_value';
      }
      // Ensure that we only render save values.
      if (!isset($items[0][$save_value])) {
        return $element;
      }
      $field_value = $items[0][$save_value];
      $field_raw_value = $items[0][$raw_value];
      $css = $settings['css'];
      break;
    case 'css_style_switch_formatter':
      if (isset($items[0]['value']) && isset($settings['styles'][$items[0]['value']])) {
        if (isset($items[0]['safe_value'])) {
          $field_value = $items[0]['safe_value'];
          $field_raw_value = $items[0]['value'];
        } else {
          $field_value = $items[0]['value'];
          $field_raw_value = $field_value;
        }
        $style = $settings['styles'][$items[0]['value']]['css'];
        if (!empty($style)) {
          $css = $style;
        } else {
          return $element;
        }
      } else {
        return $element;
      }
      break;
    case 'css_aspect_ratio_formatter':
      // Calculate padding bottom based on given radio.
      $ratio = floatval($items[0]['value']);
      if ($ratio == 0) {
        return $element;
      }
      $gap = 100 / $ratio;
      $important = $settings['important'] == 1 ? ' !important' : '';

      // Generate css code.
      $style = array();

      if (!empty($settings['css_selector']) && !empty($items)) {
        $style[] = $settings['css_selector'];
      } else {
        return $element;
      }

      $style[] = ' {';
      $style[] = 'width: 100%' . $important . ';';
      $style[] = 'height: 0' . $important . ';';
      $style[] = 'padding-bottom: ' . $gap . '%' . $important . ';';
      $style[] = '}';

      $css = implode('', $style);
      break;
  }

  if (empty($css)) {
    return $element;
  };

  $replace_tokens = array($entity_type => $entity);

  $replace_tokens += array(
    'field-value' => array(
      'delta' => 0, //@todo implement delta here
      'raw' => $field_raw_value,
      'value' => $field_value,
    ),
  );

  $css = token_replace($css, $replace_tokens);

  $conf = array('type' => 'inline');
  if (!empty($settings['media_query'])) {
    $conf['media'] = $settings['media_query'];
  }

  drupal_add_css($css, $conf);

  return $element;
}
