<?php

/**
 * @file
 * Tests for Commerce Invoices module
 */
class CommerceInvoicesTests extends DrupalWebTestCase {

  /**
   * Base setup for all test cases
   */
  function setUp() {
    parent::setUp(array('commerce_invoices'));
  }

  /**
   * Creates a user with a specific set of permissions and logs him in
   */
  function loginUserWithPermissions($permissions){
    $user = $this->drupalCreateUser($permissions);
    $this->drupalLogin($user);
  }

  /**
   * Navigate to the Add Invoices page and make sure it's accessible
   */
  function assertAddInvoicePageIsAccessible(){
    $this->drupalGet("admin/commerce/invoices/add-invoice");
    $this->assertText(t("Add Invoice"), "Add Invoice page found", "Commerce Invoices");
  }

  /**
   * Add sample invoice and make sure that the invoice was created successfully
   */
  function addSampleInvoice(){
    $invoice_no = $this->randomName();

    $data = array(
        'invoice_no' => $invoice_no,
        'invoice_payee' => $this->randomName(),
        'amount' => 1000,
    );

    $this->drupalPost("admin/commerce/invoices/add-invoice", $data, t('Add Invoice'));

    $this->assertText(t("Invoice added successfully"), "Invoice added sucessfully", "Commerce Invoices");

    return $invoice_no;
  }

  /**
   * Load invoice from the database and make sure it exists
   */
  function assertInvoiceExistsInDB($invoice_no){
    $invoice = InvoiceDB::CheckInvoiceExists($invoice_no);
    $this->assertTrue($invoice, "Invoice exists in DB", "Commerce Invoices");
    return $invoice;
  }

  /**
   * Make sure that the checkout page appeared and make sure the invoice exists on checkout
   */
  function assertCheckoutPageLoadedCorrectly($invoice_no){
    $this->assertText(t("Checkout"), "Invoice redirected to checkout", "Commerce Invoices");
    $this->assertText(t("Invoice #".$invoice_no), "Invoice available on checkout page", "Commerce Invoices");
  }

  /**
   * Make sure that the Invoice already paid message appears
   */
  function assertInvoiceAlreadyPaid($invoice_no){
    $this->assertText(t("Invoice #".$invoice_no), "Invoice #".$invoice_no." was already paid", "Commerce Invoices");
  }

}

/**
 * User can create an Invoice
 */
class UserCreateInvoice extends CommerceInvoicesTests {

  /**
   * Used by the Simpletest module to display info about the test
   */
  public static function getInfo() {
    return array(
        'name' => 'User can create Invoice',
        'description' => 'Test the creation of an Invoice',
        'group' => 'Commerce Invoices',
    );
  }

  /**
   * Test that when a user has the "add invoices" permission he can create an invoice
   */
  function testUserLoginAndCreateInvoice(){
    $permissions = array(
      'add invoices'
    );

    parent::loginUserWithPermissions($permissions);

    parent::assertAddInvoicePageIsAccessible();

    $invoice_no = parent::addSampleInvoice();

    $invoice = parent::assertInvoiceExistsInDB($invoice_no);
  }

  /**
   * Test that when a user has the "add invoices" permission he can't manage invoices
   */
  function testUserCantAccessManageInvoices(){
    $permissions = array(
      'add invoices'
    );

    parent::loginUserWithPermissions($permissions);

    $this->drupalGet("admin/commerce/invoices/manage-invoices");

    $this->assertResponse(403);
  }

}

/**
 * User can creates Invoice and Manage Invoices
 */
class CreateInvoiceAndManageInvoices extends CommerceInvoicesTests {

  /**
   * Used by the Simpletest module to display info about the test
   */
  public static function getInfo() {
    return array(
        'name' => 'User can create and manage invoice',
        'description' => 'Test the creation of an Invoice and Manage Invoices',
        'group' => 'Commerce Invoices',
    );
  }

  /**
   * Test that when a user has the "add invoices" and "manage invoices" he can create an invoice and navigate to the Manage Invoices page and the Invoice exists
   */
  function testCreateInvoiceAndManageInvoicesAndInvoiceExists(){
    $permissions = array(
      'add invoices', 'manage invoices'
    );

    parent::loginUserWithPermissions($permissions);

    parent::assertAddInvoicePageIsAccessible();

    $invoice_no = parent::addSampleInvoice();

    $invoice = parent::assertInvoiceExistsInDB($invoice_no);

    $this->drupalGet("admin/commerce/invoices/manage-invoices");

    $this->assertText("Manage Invoices", "Manage Invoices page loaded", "Commerce Invoices");

    $this->assertText($invoice_no, "Invoice found", "Commerce Invoices");
  }

}

/**
 * User pays Invoice
 */
class testUserPaysInvoice extends CommerceInvoicesTests {

  /**
   * Used by the Simpletest module to display info about the test
   */
  public static function getInfo() {
    return array(
        'name' => 'Test User Pays Invoice',
        'description' => 'Test the scenarios of paying an Invoice',
        'group' => 'Commerce Invoices',
    );
  }

  /**
   * Test that when a user has the "add invoices" permission he can create an invoice
   * Test that when a user has the "access checkout" permission he can pay the invoice
   */
  function testCreateAndPayInvoice(){

    $permissions = array(
      'add invoices'
    );

    parent::loginUserWithPermissions($permissions);

    parent::assertAddInvoicePageIsAccessible();

    $invoice_no = parent::addSampleInvoice();

    parent::assertInvoiceExistsInDB($invoice_no);

    $invoice = InvoiceDB::GetInvoice($invoice_no);

    $this->drupalLogout();

    user_role_change_permissions(DRUPAL_ANONYMOUS_RID, array(
      'access checkout' => TRUE,
    ));

    $this->drupalGet("commerce-invoices/".$invoice->get__invoice_product()->product_id."/".drupal_hmac_base64($invoice->get__invoice_product()->product_id, drupal_get_private_key().drupal_get_hash_salt()));

    parent::assertCheckoutPageLoadedCorrectly($invoice_no);

    $edit = array(
        "invoice_no" => $invoice_no
    );

    $this->drupalPost("user/invoices/pay", $edit, t('Pay Invoice'));

    parent::assertCheckoutPageLoadedCorrectly($invoice_no);
  }

}

/**
 * User pays an already paid Invoice
 */
class testUserPaysPaidInvoice extends CommerceInvoicesTests {

  /**
   * Used by the Simpletest module to display info about the test
   */
  public static function getInfo() {
    return array(
        'name' => 'Test User Pays an already paid Invoice',
        'description' => 'Test the scenarios of paying an already paid Invoice',
        'group' => 'Commerce Invoices',
    );
  }

  /**
   * Test that when a user has the "add invoices" permission he can create an invoice
   * Test that when a user has the "access checkout" he can't pay an already paid invoice
   */
  function testCreateAndPayPaidInvoice(){

    $permissions = array(
      'add invoices'
    );

    parent::loginUserWithPermissions($permissions);

    parent::assertAddInvoicePageIsAccessible();

    $invoice_no = parent::addSampleInvoice();

    parent::assertInvoiceExistsInDB($invoice_no);

    $invoice = InvoiceDB::GetInvoice($invoice_no);

    $invoice->set_invoice_to_paid();

    $this->drupalLogout();

    user_role_change_permissions(DRUPAL_ANONYMOUS_RID, array(
      'access checkout' => TRUE,
    ));

    $this->drupalGet("commerce-invoices/".$invoice->get__invoice_product()->product_id."/".drupal_hmac_base64($invoice->get__invoice_product()->product_id, drupal_get_private_key().drupal_get_hash_salt()));

    parent::assertInvoiceAlreadyPaid($invoice_no);

    $edit = array(
        "invoice_no" => $invoice_no
    );

    $this->drupalPost("user/invoices/pay", $edit, t('Pay Invoice'));

    parent::assertInvoiceAlreadyPaid($invoice_no);

  }

}