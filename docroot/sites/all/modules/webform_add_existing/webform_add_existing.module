<?php

/**
 * @file
 * Provide reuse existing field in webform
 */

/**
 * Implements hook_theme().
 */
function webform_add_existing_theme() {
  return array(
    'webform_components_form_existing' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function webform_add_existing_menu() {
  $items = array();

  $items['node/%webform_menu/webform/components/new/%/existing/%/%webform_add_existing_menu_component'] = array(
    'load arguments' => array(7),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webform_component_edit_form', 1, 8, FALSE),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'file' => 'includes/webform.components.inc',
    'type' => MENU_LOCAL_TASK,
    'file path' => drupal_get_path('module', 'webform'),
  );

  return $items;
}

/**
 * Webform_add_existing_menu_component.
 * 
 * @param int
 *   Existing Webform cid.
 * 
 * @param int
 *   Existing Webform nid.
 * 
 * @return array
 *   Existing component array.
 */
function webform_add_existing_menu_component_load($existing_cid, $existing_nid) {

  $node = node_load($existing_nid);

  $component = isset($node->webform['components'][$existing_cid]) ? $node->webform['components'][$existing_cid] : FALSE;

  if ($component) {
    webform_component_defaults($component);
  }
  unset($component['cid']);
  return $component;
}

/**
 * Implements hook_form_formid_alter().
 */
function webform_add_existing_form_webform_components_form_alter(&$form, &$form_state) {

  $node = $form_state['build_info']['args'][0];

  $nid = $node->nid;

  $form['existing']['name'] = array(
    '#type' => 'textfield',
    '#size' => 24,
    '#maxlength' => 255,
  );

  $form['existing']['type'] = array(
    '#type' => 'select',
    '#options' => _webform_add_existing_existing_field_option($nid),
    '#weight' => 3,
  );

  $form['existing']['required'] = array(
    '#type' => 'checkbox',
  );

  $form['existing']['cid'] = array(
    '#type' => 'hidden',
    '#default_value' => '',
  );

  $form['existing']['pid'] = array(
    '#type' => 'hidden',
    '#default_value' => (isset($_GET['cid']) && isset($node->webform['components'][$_GET['cid']])) ? $node->webform['components'][$_GET['cid']]['pid'] : 0,
  );

  $form['existing']['weight'] = array(
    '#type' => 'textfield',
    '#size' => 4,
    '#delta' => count($node->webform['components']) > 10 ? count($node->webform['components']) : 10,
    '#title' => t('Add Existing Field'),
  );

  $form['existing']['add'] = array(
    '#type' => 'submit',
    '#value' => t('Add Existing'),
    '#weight' => 45,
    '#submit' => array('webform_add_existing_form_submit'),
  );

  $form['#theme'] = array('webform_components_form_existing');
}

/**
 * Webform_add_existing_form_submit.
 */
function webform_add_existing_form_submit($form, &$form_state) {
  
  $node = $form_state['build_info']['args'][0];

  //Get existing nid and existing cid.
  list($existing_nid, $existing_cid) = explode('/', $form_state['values']['existing']['type']);
  
  //Existing component node
  $existing_node = node_load($existing_nid);
  
  $component = $existing_node->webform['components'][$existing_cid];

  $form_state['redirect'] = array(
                              'node/' . $node->nid . '/webform/components/new/' . $component['type'] . "/existing/" . $form_state['values']['existing']['type'],
                              array('query' => array('name' => $component['name'], 'required' => $component['required'], 'pid' => $component['pid'], 'weight' => $component['weight']))
                            );
}

/**
 * Get webform existing field.
 * 
 * @param 
 *   Node nid.
 * 
 * @return array
 *   Existing Component list.
 */
function _webform_add_existing_existing_field_option($nid) {

  $components_list = db_select("webform_component")
                  ->fields("webform_component", array("nid", "pid", "cid", "form_key", "name", "type"))
                  ->condition("nid", $nid, '<>')
                  ->execute()->fetchAll();

  $components_list_options = array("" => "- Select an existing field -");

  foreach ($components_list as $component) {
    $components_list_options[$component->nid . "/" . $component->cid] = $component->type . " : " . $component->form_key . " (" . $component->name . ")";
  }
  return $components_list_options;
}

/**
 * Theme the node components form. Use a table to organize the components.
 *
 * @param $form
 *   The form array.
 * @return
 *   Formatted HTML form, ready for display.
 */
function theme_webform_components_form_existing($variables) {
  $form = $variables['form'];

  $form['components']['#attached']['library'][] = array('webform', 'admin');

  // TODO: Attach these. See http://drupal.org/node/732022.
  drupal_add_tabledrag('webform-components', 'order', 'sibling', 'webform-weight');
  drupal_add_tabledrag('webform-components', 'match', 'parent', 'webform-pid', 'webform-pid', 'webform-cid');

  $node = $form['#node'];

  $header = array(t('Label'), t('Type'), t('Value'), t('Mandatory'), t('Weight'), array('data' => t('Operations'), 'colspan' => 3));
  $rows = array();

  // Add a row containing form elements for a new item.
  unset($form['add']['name']['#title'], $form['add_type']['#description']);
  $form['add']['name']['#attributes']['rel'] = t('New component name');
  $form['add']['name']['#attributes']['class'] = array('webform-default-value');
  $form['add']['cid']['#attributes']['class'] = array('webform-cid');
  $form['add']['pid']['#attributes']['class'] = array('webform-pid');
  $form['add']['weight']['#attributes']['class'] = array('webform-weight');
  $row_data = array(
    drupal_render($form['add']['name']),
    drupal_render($form['add']['type']),
    '',
    drupal_render($form['add']['mandatory']),
    drupal_render($form['add']['cid']) . drupal_render($form['add']['pid']) . drupal_render($form['add']['weight']),
    array('colspan' => 3, 'data' => drupal_render($form['add']['add'])),
  );
  $add_form = array('data' => $row_data, 'class' => array('draggable', 'webform-add-form'));
  
  // Add a row containing form elements for a new item.
  unset($form['existing']['name']['#title'], $form['add_type']['#description']);
  $form['existing']['name']['#attributes']['placeholder'] = t('New component name');
  $form['existing']['cid']['#attributes']['class'][] = 'webform-cid';
  $form['existing']['pid']['#attributes']['class'][] = 'webform-pid';
  $form['existing']['weight']['#attributes']['class'][] = 'webform-weight';
  $existing_row_data = array(
    drupal_render($form['existing']['name']),
    drupal_render($form['existing']['type']),
    '',
    drupal_render($form['existing']['required']),
    drupal_render($form['existing']['cid']) . drupal_render($form['existing']['pid']) . drupal_render($form['existing']['weight']),
    array('colspan' => 3, 'data' => drupal_render($form['existing']['add'])),
  );
  $existing_form = array('data' => $existing_row_data, 'class' => array('draggable', 'webform-add-form'));
  
  $form_rendered = FALSE;

  if (!empty($node->webform['components'])) {
    $component_tree = array();
    $page_count = 1;
    _webform_components_tree_build($node->webform['components'], $component_tree, 0, $page_count);
    $component_tree = _webform_components_tree_sort($component_tree);
    // Build the table rows.
    function _webform_components_form_rows($node, $cid, $component, $level, &$form, &$rows, &$add_form) {
      // Create presentable values.
      if (drupal_strlen($component['value']) > 30) {
        $component['value'] = drupal_substr($component['value'], 0, 30);
        $component['value'] .= '...';
      }
      $component['value'] = check_plain($component['value']);

      // Remove individual titles from the mandatory and weight fields.
      unset($form['components'][$cid]['mandatory']['#title']);
      unset($form['components'][$cid]['pid']['#title']);
      unset($form['components'][$cid]['weight']['#title']);

      // Add special classes for weight and parent fields.
      $form['components'][$cid]['cid']['#attributes']['class'] = array('webform-cid');
      $form['components'][$cid]['pid']['#attributes']['class'] = array('webform-pid');
      $form['components'][$cid]['weight']['#attributes']['class'] = array('webform-weight');

      // Build indentation for this row.
      $indents = '';
      for ($n = 1; $n <= $level; $n++) {
        $indents .= '<div class="indentation">&nbsp;</div>';
      }

      // Add each component to a table row.
      $row_data = array(
        $indents . filter_xss($component['name']),
        $form['add']['type']['#options'][$component['type']],
        ($component['value'] == '') ? '-' : $component['value'],
        drupal_render($form['components'][$cid]['mandatory']),
        drupal_render($form['components'][$cid]['cid']) . drupal_render($form['components'][$cid]['pid']) . drupal_render($form['components'][$cid]['weight']),
        l(t('Edit'), 'node/' . $node->nid . '/webform/components/' . $cid, array('query' => drupal_get_destination())),
        l(t('Clone'), 'node/' . $node->nid . '/webform/components/' . $cid . '/clone', array('query' => drupal_get_destination())),
        l(t('Delete'), 'node/' . $node->nid . '/webform/components/' . $cid . '/delete', array('query' => drupal_get_destination())),
      );
      $row_class = array('draggable');
      if (!webform_component_feature($component['type'], 'group')) {
        $row_class[] = 'tabledrag-leaf';
      }
      if ($component['type'] == 'pagebreak') {
        $row_class[] = 'tabledrag-root';
        $row_class[] = 'webform-pagebreak';
        $row_data[0] = array('class' => array('webform-pagebreak'), 'data' => $row_data[0]);
      }
      $rows[] = array('data' => $row_data, 'class' => $row_class);
      if (isset($component['children']) && is_array($component['children'])) {
        foreach ($component['children'] as $cid => $component) {
          _webform_components_form_rows($node, $cid, $component, $level + 1, $form, $rows, $add_form);
        }
      }

      // Add the add form if this was the last edited component.
      if (isset($_GET['cid']) && $component['cid'] == $_GET['cid'] && $add_form) {
        $add_form['data'][0] = $indents . $add_form['data'][0];
        $rows[] = $add_form;
        $add_form = FALSE;
      }
    }
    foreach ($component_tree['children'] as $cid => $component) {
      _webform_components_form_rows($node, $cid, $component, 0, $form, $rows, $add_form);
    }
  }
  else {
    $rows[] = array(array('data' => t('No Components, add a component below.'), 'colspan' => 9));
  }

  // Append the add form if not already printed.
  if ($add_form) {
    $rows[] = $add_form;
  }
  
  if($existing_form){
      $rows[] = $existing_form;
  }

  $output = '';
  $output .= theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('id' => 'webform-components')));
  $output .= drupal_render_children($form);
  return $output;
}
