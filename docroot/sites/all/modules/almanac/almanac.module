<?php
// $Id: almanac.module,v 1.5 2011/02/18 09:58:03 nhwebworker Exp $

/**
 * @file
 * Almanac module provides basic sun and moon data for a given latitude and longitude..
 */

/**
 * Returns an array of all the Almanac settings.
 */
function almanac_settings() {
  $settings = variable_get('almanac', array());
  $settings += array(
    'location' => array(),
    'datetime' => array(),
    'moon' => array(),
  );
  $settings['location'] += array(
    'name' => 'Bucuresti',
    'latitude' => 44.4325,
    'longitude' => -26.103889,
    'timezone' => date_default_timezone_get(),
  );
  $settings['datetime'] += array(
    'block' => 'short',
    'page' => 'long',
    'date' => 'short_date',
    'time' => 'time',
    'period' => array('hours', 'minutes', 'seconds'),
    'period_short' => array('hours', 'minutes'),
  );
  $settings['moon'] += array(
    'full' => 'July 15 2011 06:40 UTC',
  );

  return $settings;
}

/**
 * Implements hook_help().
 */
function almanac_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/help#almanac":
      $output = t("<p>Displays basic astronomical information for a given date.</p>");
      $output .= t("<p>Use the settings page to enter location data. The path for the full page output is /almanac. The block can be configured via the normal block configurations page.</p>");
      break;
  }
  return $output;
}

/**
 * Implements hook_permission().
 */
function almanac_permission() {
  return array(
    'access almanac' => array(
      'title' => t('Access Almanac Page'),
      'description' => t('Whether or not to display almanac data'),
    ),
  );
}

/**
 * Implements hook_date_format_types().
 */
function almanac_date_format_types() {
  return array(
    'time' => t('Time'),
    'short_date' => t('Short date'),
  );
}

/**
 * Implements hook_date_formats().
 */
function almanac_date_formats() {
  return array(
    array('type' => 'time', 'format' => 'H:i', 'locales' => array()),
    // MySQL throws an error here?????
    array('type' => 'time', 'format' => 'g:i a', 'locales' => array()),
    //array('type' => 'time', 'format' => 'g:i A', 'locales' => array()),

    array('type' => 'short_date', 'format' => 'M d', 'locales' => array()),
    array('type' => 'short_date', 'format' => 'd M', 'locales' => array()),
  );
}

/**
 * Implements hook_menu().
 */
function almanac_menu() {
  $items = array();
  $items['almanac'] = array(
    'title' => 'Almanac',
    'title callback' => 'almanac_title',
    'page callback' => 'almanac_page',
    'access arguments' => array('access almanac'),
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );
  $items['admin/config/almanac'] = array(
    'title' => 'Almanac Settings',
    'description' => 'Manage settings for Almanac module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('almanac_admin'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'almanac.admin.inc',
  );
  return $items;
}

/**
 * Title callback for almanac page.
 *
 * @return
 *   The location name to be used as the page title.
 */
function almanac_title() {
  $settings = almanac_settings();
  return t('Astronomy for !location', array('!location' => $settings['location']['name']));
}

/**
 * Implements hook_block_info().
 */
function almanac_block_info() {
  $blocks = array();
  // TODO: Custom caching is required.
  $blocks['almanac'] = array(
    'info' => t('Almanac'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['callback'] = array(
    'info' => t('Almanac callback'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function almanac_block_configure($delta = '') {
  // This example comes from node.module.
  $form = array();
  if ($delta == 'almanac' || $delta == 'callback') {
    $edit = variable_get('almanac_block_' . $delta, array(
      'general' => array('info' => 'info'),
      'sun' => array('actual' => 'actual'),
      'moon' => array('actual' => 'actual'),
    ));
    $form['almanac'] = array(
      '#tree' => TRUE
    );
    $form['almanac']['general'] = array(
      '#type' => 'checkboxes',
      '#title' => t('General display options'),
      '#default_value' => $edit['general'],
      '#options' => array(
        'info' => t('Show location and date info.'),
        'more' => t('Show more link (if user has permission).'),
      ),
    );
    $form['almanac']['sun'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Sun display options'),
      '#default_value' => $edit['sun'],
      '#options' => array(
        'actual' => t('Show actual sunrise / sunset times.'),
        'civil' => t('Show civil sunrise / sunset times.'),
        'nautical' => t('Show nautical sunrise / sunset times.'),
        'astronomical' => t('Show astronomical sunrise / sunset times.'),
        'zenith' => t('Show "Zenith".'),
        'length' => t('Show "Length of Day".'),
        'visible' => t('Show "Visible Light".'),
        'yesterday' => t('Show time difference for yesterday.'),
        'tomorrow' => t('Show time difference for tomorrow.'),
      ),
    );
    $form['almanac']['moon'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Moon display options'),
      '#default_value' => $edit['moon'],
      '#options' => array(
        'actual' => t('Show moonrise / moonset times.'),
        'icon' => t('Show current moon icon.'),
        'phase' => t('Show current moon phase.'),
        'illumination' => t('Show current moon illumination.'),
        'phases' => t('Show main upcomming moon phases.'),
      ),
    );

  }
  return $form;
}

/**
 * Implements hook_block_save().
 */
function almanac_block_save($delta = '', $edit = array()) {
  if ($delta == 'almanac' || $delta == 'callback') {
    variable_set('almanac_block_' . $delta, $edit['almanac']);
  }
}

/**
 * Implements hook_block_view().
 */
function almanac_block_view($delta = '') {
  if ($delta == 'almanac' || $delta == 'callback') {
    // Global settings.

    if ($delta == 'almanac') {
      $settings = almanac_settings();
      extract($settings['location']);
    }
    else {
      // Invoke other modules to provide a location(s).
      if ($locations = module_invoke_all('almanac_callback_location')) {
        // Use the last location - the module with the highest system weight.
        $location_settings = array_pop($locations);
        extract((array)$location_settings);
      }
      else {
        return;
      }
    }

    // Create a DateTime object from the timestamp & set the timezone.
    $datetime = date_create('@' . REQUEST_TIME, timezone_open($timezone));

    // Prepare the time / date stamps, et al.
    $data = almanac_prepare_location_info($latitude, $longitude, $datetime, $timezone);
    $data['block_settings'] = variable_get('almanac_block_' . $delta, array(
      'general' => array('info' => 'info'),
      'sun' => array('actual' => 'actual'),
      'moon' => array('actual' => 'actual'),
    ));

    $block_content = theme('almanac_block', array(
      'datetime' => $datetime,
      'location' => array('name' => $name, 'lon' => $longitude, 'lat' => $latitude, 'timezone' => $timezone),
      'data' => $data,
    ));

    $block['subject'] = t('Astronomy');
    $block['content'] = $block_content;
    return $block;
  }
}

/**
 *
 */
function almanac_location_info($datetime, $lat, $lon) {
  static $cache = array();
  $timestamp = $datetime->format('U');
  if (!empty($cache[$timestamp . ':' . $lat . ':' . $lon])) {
    return $cache[$timestamp . ':' . $lat . ':' . $lon];
  }
  /*
  * compute rise and sset GMT times, based on location, UTC timestamp, and GMT offset
  *
  * compute sunrise and sunset time in location time zone by adding GMT offset and server default
  * timezone offset from GMT. Get minutes west and then make negative to keep with convention of
  * west of GMT is negative.
  *
  * php sunrise/sunset functions use east latitude is positive convention
  *
  */
  $gmtoffset = $datetime->getOffset();

  //$info = almanac_suntimes($timestamp, $lat, $longitude, $gmtoffset,$app_gmtoffset);

  // Sun info PHP 5 >= 5.1.2 (Drupal 7 min = PHP 5.2.5)
  $info = date_sun_info($timestamp, $lat, -$lon);

  /* calculate number of hours of daylight */
  $info['day_length'] = $info['sunset'] - $info['sunrise'];
  $info['visible_light'] = $info['civil_twilight_end'] - $info['civil_twilight_begin'];

  /*
   * Calculate moon rise and set. Use server date information as basis to calculate
   * modified julian date, so GMT offset of location needs to be restated in seconds.
   * Calculations use east longitude negative convention.
   */
  $cdate = getdate();
  $year = $cdate['year'];
  $month = $cdate['mon'];
  $day = $cdate['mday'];
  $hour = 0;
  module_load_include('inc', 'almanac', 'includes/moon');
  $info += almanac_moontimes($year, $month, $day, $gmtoffset, $lat, $lon);

  // Moon phases
  $moon_phases = array();
  module_load_include('inc', 'almanac', 'includes/phases');

  $mp = _almanac_moonphase();
  $info['moonphase']['phase'] = $mp->getPositionInCycle();
  $info['moonphase']['phase_id'] = $mp->getPhaseID();
  $info['moonphase']['name'] = $mp->getPhaseName();
  $info['moonphase']['illumination'] = $mp->getPercentOfIllumination();

  // Get # days with a lot of precision.
  $full = $mp->getDaysUntilNextFullMoon(8);
  $new = $mp->getDaysUntilNextNewMoon(8);
  $first = $mp->getDaysUntilNextFirstQuarterMoon(8);
  $last = $mp->getDaysUntilNextLastQuarterMoon(8);
  // Round days to nicer format.
  $info['moonphase']['next_full'] = round($full, 1);
  $info['moonphase']['next_new'] = round($new, 1);
  $info['moonphase']['next_first'] = round($first, 1);
  $info['moonphase']['next_last'] = round($last, 1);
  // Approx. the timestamp.
  $info['moonphase']['timestamps']['next_full'] = round($full * 86400) + $timestamp;
  $info['moonphase']['timestamps']['next_new'] = round($new * 86400) + $timestamp;
  $info['moonphase']['timestamps']['next_first'] = round($first * 86400) + $timestamp;
  $info['moonphase']['timestamps']['next_last'] = round($last * 86400) + $timestamp;

  $cache[$timestamp . ':' . $lat . ':' . $lon] = $info;

  return $info;
}

function almanac_prepare_location_info($latitude, $longitude, $datetime, $timezone) {
  // Global settings.
  $settings = almanac_settings();

  // Get all of the sun / moon info.
  $info = almanac_location_info($datetime, $latitude, $longitude);

  // Container of additional info.
  $info['additional'] = array();
  $dt = clone $datetime;

  // Get all of the sun / moon info for yesterday.
  $dt->modify('-1 day');
  $info['additional']['yesterday'] = almanac_location_info($dt, $latitude, $longitude);

  // Get all of the sun / moon info for tomorrow.
  $dt->modify('+2 day');
  $info['additional']['tomorrow'] = almanac_location_info($dt, $latitude, $longitude);

  foreach ($info as $k => $v) {
    if (!is_array($v) && is_numeric($v)) {
      $info[$k . '_formatted'] = format_date($v, $settings['datetime']['time'], '', $timezone);
      $info['additional']['yesterday'][$k . '_formatted'] = format_date($info['additional']['yesterday'][$k], $settings['datetime']['time'], '', $timezone);
      $info['additional']['tomorrow'][$k . '_formatted'] = format_date($info['additional']['tomorrow'][$k], $settings['datetime']['time'], '', $timezone);
    }
  }
  asort($info['moonphase']['timestamps']);
  foreach ($info['moonphase']['timestamps'] as $k => $v) {
    $info['moonphase']['dates'][$k] = format_date($v, $settings['datetime']['date'], '', $timezone);
  }

  return $info;
}

// almanac page
function almanac_page() {
  // Global settings.
  $settings = almanac_settings();
  extract($settings['location']);

  // Create a DateTime object from the timestamp & set the timezone.
  $datetime = date_create('@' . REQUEST_TIME, timezone_open($timezone));

  // Prepare the time / date stamps, et al.
  $data = almanac_prepare_location_info($latitude, $longitude, $datetime, $timezone);

  $page_content = theme('almanac_page', array(
    'datetime' => $datetime,
    'location' => array('name' => $name, 'lon' => $longitude, 'lat' => $latitude, 'timezone' => $timezone),
    'data' => $data,
  ));
  return array(
    'almanac' => array(
      '#markup' => $page_content,
    )
  );
}

/**
 * converts decimal time to array o hours and minutes
 * returns number containing the time written in hours and minute rounded to the nearest minute
 */
function hours_minutes($time) {
  $ut = intval($time * 60 + 0.5) / 60;   //round ut to nearest minute
  $hours_minutes['hours'] = intval($ut);
  $hours_minutes['minutes'] = intval(60 * ($ut - $hours_minutes['hours']) + 0.5);
  return $hours_minutes;
}

/**
 * Private helper function.
 */
function _almanac_moonphase() {
  static $mp;
  if (!isset($mp)) {
    module_load_include('inc', 'almanac', 'includes/phases');
    $mp = new moonPhase();
  }
  return $mp;
}

/* ---------------- theme functions ---------------- */

/**
 * Implements hook_theme().
 */
function almanac_theme() {
  return array(
    'almanac_day_length_diff_yesterday' => array(
      'variables' => array('diff' => NULL),
    ),
    'almanac_day_length_diff_tomorrow' => array(
      'variables' => array('diff' => NULL),
    ),
    'almanac_time_period' => array(
      'variables' => array('seconds' => NULL, 'qranularity' => NULL),
    ),
    'almanac_moon_phase_sprite' => array(
      'variables' => array('phase' => NULL, 'latitude' => NULL, 'attributes' => NULL),
    ),
    'almanac_block' => array(
      'variables' => array(
        'datetime' => NULL, 'location' => array(), 'data' => array()),
      'template' => 'almanac-block',
    ),
    'almanac_page' => array(
      'variables' => array(
        'datetime' => NULL, 'location' => array(), 'data' => array()),
      'template' => 'almanac-page',
    ),
  );
}

/**
 * Used to generate the moon spirte, and optional description.
 */
function theme_almanac_moon_phase_sprite($variables) {
  $mp = _almanac_moonphase();
  list(, $phase) = $mp->getPhaseInfo($variables['phase']);
  $phase = str_replace(' ', '-', drupal_strtolower($phase));
  $hem = $variables['latitude'] >= 0 ? 'north' : 'south';
  $title = '';
  if (!empty($variables['attributes']['title'])) {
    $title = ' title="' . check_plain($variables['attributes']['title']) . '"';
  }
  $description = '';
  if (!empty($variables['attributes']['description'])) {
    $description = '<div class="phase-info">'
        . check_plain($variables['attributes']['description']) . '</div>';
  }

  return '<div class="clearfix moon-spirte"><div class="phase ' . $hem . '-'
      . $phase . '"' . $title . '></div>' . $description . '</div>';
}

/**
 * Helper function to describe the difference in daylength yesterday.
 */
function theme_almanac_day_length_diff_yesterday($variables) {
  $diff = $variables['diff'];
  $diff_formatted = theme('almanac_time_period', array('seconds' => abs($diff)));
  if ($diff < 0) {
    return t('Yesterday was !diff shorter than today.', array('!diff' => $diff_formatted));
  }
  elseif ($diff > 0) {
    return t('Yesterday was !diff longer than today.', array('!diff' => $diff_formatted));
  }
  else {
    return t('Yesterday was about the same length as today.');
  }

}

/**
 * Helper function to describe the difference in daylength tomorrow.
 */
function theme_almanac_day_length_diff_tomorrow($variables) {
  $diff = $variables['diff'];
  $diff_formatted = theme('almanac_time_period', array('seconds' => abs($diff)));
  if ($diff < 0) {
    return t('Tomorrow will be !diff shorter than today.', array('!diff' => $diff_formatted));
  }
  elseif ($diff > 0) {
    return t('Tomorrow will be !diff longer than today.', array('!diff' => $diff_formatted));
  }
  else {
    return t('Tomorrow will be about the same length as today.');
  }
}

/**
 * A beast of a function for the simple task of displaying a length of time in
 * the shortest, nicest fashion.
 * TODO: Refactor and simplify.
 */
function theme_almanac_time_period($variables) {
  extract($variables);
  if (empty($qranularity)) {
    $qranularity = array('hours', 'minutes', 'seconds');
  }
  $qranularity = array_filter($qranularity);

  $hours = FALSE;
  $minutes = FALSE;

  if (in_array('hours', $qranularity)) {
    if (!in_array('minutes', $qranularity) && !in_array('seconds', $qranularity)) {
      $hours = round($seconds / 3600);
    }
    else {
      $hours = floor($seconds / 3600);
    }
    if (empty($hours)) {
      $hours = FALSE;
    }
    $seconds -= $hours * 3600;
  }

  if (in_array('minutes', $qranularity)) {
    if (!in_array('seconds', $qranularity)) {
      $minutes = round($seconds / 60);
    }
    else {
      $minutes = floor($seconds / 60);
    }
    if (empty($minutes)) {
      $minutes = FALSE;
    }

    $seconds -= $minutes * 60;
    if (empty($seconds)) {
      $seconds = FALSE;
    }

  }
  if (!in_array('seconds', $qranularity)) {
    $seconds = FALSE;
  }

  if (!$hours && !$minutes && !$seconds) {
    foreach (array('seconds', 'minutes', 'hours') as $key) {
      if (in_array($key, $qranularity)) {
        ${$key} = 0;
        break;
      }
    }
  }

  $components = array();
  if ($hours !== FALSE) {
    $components[] = format_plural($hours, '1 hr', '@count hrs');
  }
  if ($minutes !== FALSE) {
    $components[] = format_plural($minutes, '1 min', '@count mins');
  }
  if ($seconds !== FALSE) {
    $components[] = format_plural($seconds, '1 sec', '@count secs');
  }
  return implode(' ', $components);
}

/**
 * Process variables for almanac-block.tpl.php
 *
 * @see almanac-block.tpl.php
 */
function template_preprocess_almanac_block(&$variables) {
  drupal_add_css(drupal_get_path('module', 'almanac') . '/almanac.css');
}

/**
 * Process variables for almanac-page.tpl.php
 *
 * @see almanac-page.tpl.php
 */
function template_preprocess_almanac_page(&$variables) {
  drupal_add_css(drupal_get_path('module', 'almanac') . '/almanac.css');
}

