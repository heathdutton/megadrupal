<?php
// $Id: autocategorise.module,v 1.14 2011/01/01 17:44:19 matslats Exp $


/**
 * @file
 Users cannot be trusted to categorise things themselves, and it's too much work for administrators.
 The module provides a checkbox in the vocabulary field instance which hides the taxonomy field on the node form and then automatically selects the terms before the node entity is saved.
The synonyms for each term through the the title and body of the node looking for a match or matches. Synonyms can be words or word stems. If a vocabulary is 'required', then the heaviest term will be used as a catch-all, or misc.
 The module also provides a button which recategorises all the content in the governed types. This means the whole category system is flexible and can evolve and be tweaked.

 N.B. This module needs more work to cope with multiple languages
 */

define('AUTOCAT_OFF', 0);
define('AUTOCAT_SIMPLE', 1);
define('AUTOCAT_WORDS', 2);
define('AUTOCAT_REGEX', 3);

/**
 * Implements hook_help().
 */
function autocategorise_help($section) {
  switch ($section) {
    case 'admin/help#search':
      return t('Allows entities to be automatically categorised by matching the terms (and synonyms) against the content of textual fields');
  }
}

/**
 * Implements hook_form_alter().
 */
function autocategorise_form_alter(&$form, $form_state, $form_id) {
  //check whether this form is an entity edit form
  if (isset($form['#entity_type']) && isset($form['#bundle']) && $form['#form_id'] != 'field_ui_field_overview_form') {//then it is an entity editing form
    //check all the fields, (regardless of type), for the autocategorise
    while (list($fieldname, $instance) = each(field_info_instances($form['#entity_type'], $form['#bundle']))) {
      if (!empty($instance['settings']['autocategorise_mode'])) {
        $form['#'.$fieldname] = element_children($form[$fieldname]); // this saves the languages
        unset($form[$fieldname]);
        array_unshift($form['#submit'], 'autocategorise_entity');
      }
    }
  }
}
/*
 * implements hook_form_FORMID_alter
 * add the autocat option to the field attachment settings
 */
function autocategorise_form_field_ui_field_edit_form_alter(&$form, $form_state) {
  if ($form['#field']['type'] != 'taxonomy_term_reference') return;
  $form['autocategorise'] = array(
    '#type' => 'fieldset',
    '#title' => t('Autocategorise'),
    '#description' => t('Hide the vocabulary widget and apply terms automatically by matching the synonyms against the title and body whenever the entity is submitted.'),
    'autocategorise_mode' => array(
      '#type' => 'radios',
      '#title' => t('Apply terms automatically'),
      '#description' => t('Autocategorise will assume that the last, heaviest term is the <em>misc</em>, or <em>other</em> category'),
      '#options' => array(
        AUTOCAT_OFF => t('Do not use autocategorise'),
        AUTOCAT_SIMPLE => t('Match synonyms against rendered entity'),
        AUTOCAT_WORDS => t('Match synonyms only as whole words'),
        AUTOCAT_REGEX => t('Treat the synonyms as regular expressions')
      ),
      '#default_value' => isset($form['#instance']['settings']['autocategorise_mode']) ? $form['#instance']['settings']['autocategorise_mode'] : 0,
    ),
    'autocategorise_case' => array(
      '#type' => 'checkbox',
      '#title' => t('Case insensitive'),
      '#description' => t('Convert everything to lower case before matching'),
      '#default_value' => isset($form['#instance']['settings']['autocategorise_case']) ? $form['#instance']['settings']['autocategorise_case'] : 0,
    ),
  );
  $form['autocategorise_now'] = array( //not tested
    '#type' => 'submit',
    '#value' => t('Submit and recategorise all')
  );
  $form['#submit'][] = 'autocategorise_save_field_instance_settings';
}

function autocategorise_save_field_instance_settings($form, &$form_state) {
  $instance = &$form_state['values']['instance'];
  $instance['settings']['autocategorise_mode'] = $form_state['values']['autocategorise_mode'];
  $instance['settings']['autocategorise_case'] = $form_state['values']['autocategorise_case'];
  field_update_instance($instance);

  //recategorise the whole vocab, AFTER the instance settings have been saved.
  if ($form_state['values']['op'] == t('Submit and recategorise all')) {
    recategorise_all($instance);
  }
}

/*
 * shutdown callback to get all entities of a bundle and resave them with new categories
 * should be done using batch!!
 */
function recategorise_all($instance) {
  global $language;
  $info = entity_get_info($instance['entity_type']);
  //get all the entity ids from the bundle

  //Using Batch API for bulk autocategorising
  $batch = array(
    'title' => t('Autocategorising'),
    'operations' => array(),
    'finished' => '_autocategorise_batch_test_finished',
    'init_message' => t('Initializing...'),
    'progress_message' => t('Autocategorised @current out of @total instances.'),
    'error_message' => t('Updating of autocategorise terms encountered an error.'),
  );

  $query = db_select($info['base table'], 't')
    ->fields('t', array($info['entity keys']['id']));

  if (array_key_exists('bundle', $info['entity keys'])) {
    $query->condition($info['entity keys']['bundle'], $instance['bundle']);
  }
  $chunks = array_chunk($query->execute(), 100);
  foreach ($chunks as $chunk) {
    //We create a new process for each entity
    $batch['operations'][] = array('autocategorise_bulk_recategorise_chunk', array($instance, $chunk, $info));
  }

  batch_set($batch);
  batch_process();
}

/**
 * submit handler for entity form
 * changes the form_state taxonomy values before the node is saved
 * pulls the text out of the entity, by rendering it, and categorises the text
 */
function autocategorise_entity($form, &$form_state) {
  global $language;
  $info = entity_get_info($form['#entity_type']);
  //act with each autocategorise-enabled field
  //you could even have more than one field per entity
  foreach (field_info_instances($form['#entity_type'], $form['#bundle']) as $instance) {
    if (empty($instance['settings']['autocategorise_mode'])) continue;
    $entity = entity_load($instance['entity_type'], $form_state['values'][$info['entity keys']['id']]);
    //TODO get the language
    $form_state['values'][$instance['field_name']][LANGUAGE_NONE] = autocategorise_recategorise_entity($instance, $entity);
  }
}


/**
 * Runs the batch process for one entity
 */
function autocategorise_recategorise_entity($vocab_instance, $entity) {
  static $field_names;
  //we just want to match against the contents of the text fields
  $entity_type = $vocab_instance['entity_type'];
  if (!array_key_exists($entity_type, $field_names)) {
    $field_names[$entity_type] = array();
    foreach (field_info_instances($vocab_instance['entity_type']) as $instance) {
      $field_info = field_info_field($instance['field_name']);
      if ($field_info['module'] == 'text') {
        $field_names[$entity_type][] = $instance['field_name'];
      }
    }
  }
  if (empty($field_names[$entity_type])) return;

  $snippets = array();
  foreach ($field_names as $field_name) {
    foreach ($entity->{$field_name}[$lang] as $delta => $item) {
      $snippets[]= $item['value'];//value is always used in text fields
    }
  }
  $text = strip_tags(implode('|', $snippets));

  //TODO: Make this work with languages!
  //$entity->{$instance['field_name']}[$language->language] = autocategorise_get_matches($content, $instance);
  return autocategorise_get_matches($text, $vocab_instance);

  $entity->{$instance['field_name']}['und'] = $matches;
  field_attach_update($instance['entity_type'], $entity);

}


/**
 * goes through every node in contentTypes governed by the autovocab
 */
function autocategorise_get_matches($content, $instance) {
  if ($instance['settings']['autocategorise_mode'] == AUTOCAT_OFF) return;
  $field = field_info_field($instance['field_name']);
  $terms_with_synonyms = get_array_for_matching($field);
  $catch_all = NULL;
  if ($instance['required']) {
    //use the last tid for catch_all
    $catch_all = array_pop(array_keys($terms_with_synonyms));
    //and don't bother to match against the final term
    array_pop($terms_with_synonyms);
  }
  if (!empty($instance['settings']['autocategorise_case'])) {
    $content = strtolower($content);
  }

  $maxtags = $field['cardinality'] = -1 ? 100 : $field['cardinality'];
  $matches = array();
  foreach ($terms_with_synonyms as $tid => $synonyms) {
    foreach ($synonyms as $synonym) {
      if (!empty($instance['settings']['autocategorise_case'])) {
        $synonym = strtolower($synonym);
      }
      switch($instance['settings']['autocategorise_mode']) {
        case AUTOCAT_SIMPLE:
          if (is_int(strpos($content, $synonym))) {
            $matches[] = $tid;
          }
          break;
        case AUTOCAT_REGEX:
          if (preg_match($synonym, $content)) {
            $matches[] = $tid;
          }
          break;
        case AUTOCAT_WORDS:
          //TODO: Just in case, remove all REGEX-y synonyms to avoid warnings
          if (preg_match("/\b" . $synonym . "\b/i", $content)) {
            $matches[] = $tid;
          }
      }
      if (count($matches)) break 1;//don't bother matching the rest of the synonyms
    }
    if (count($matches) >= $maxtags ) {
      drupal_set_message('stopping adding tags because '.count($matches) .'>=' .$maxtags);
      break; //don't match any more terms
    }
  }
  if (empty($matches) && $catch_all) {
    $matches[] = $catch_all;
  }

  $tids = array();
  foreach ($matches as $tid) {
    $tids[] = array('tid' => $tid);
  }

  return $tids;
}

/*
 * returns an array with terms and their synonyms indexed by tid
 */
function get_array_for_matching($field) {
  $term_names = taxonomy_allowed_values($field);
  if (!count($term_names)) {
    drupal_set_message('This vocabulary has no terms in it', 'error');
    return;
  }
  foreach ($term_names as $tid => $name) {
    $terms[$tid] = synonyms_get_synonyms($tid);
    $terms[$tid][] = $name;
  }
  return $terms;
}


function autocategorise_bulk_recategorise_chunk($instance, $chunk, $info, &$context) {
  foreach ($chunk as $entity_id) {
    $entity = entity_load($instance['entity_type'],$entity_id);
    $items = autocategorise_recategorise_entity($instance, $entity, $info, &$context);
    field_attach_update($instance['entity_type'], $entity);
  }
  // Update our progress information.
  $context['results']['processed']++;
  $context['message'] = $id;

}


function _autocategorise_batch_test_finished($success, $results, $operations) {
  if ($success) {
    // Here we do something meaningful with the results.
    $message = count($results) .' processed.';
    $message .= theme('item_list', $results);
  }
  else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    $message = t('An error occurred while processing %error_operation with arguments: @arguments', array('%error_operation' => $error_operation[0], '@arguments' => print_r($error_operation[1], TRUE)));
  }
  drupal_set_message($message);
}