<?php

/**
 * Implements hook_form_alter().
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function webform_salesforce_concat_form_alter(&$form, &$form_state, $form_id) {

  // Add sitewide settings to individual webforms, on node edit form.
  if ($form_id == 'webform_node_form' && $form['nid']['#value'] === NULL) {
    $salesforce_lead_source = variable_get('webform_salesforce_concat_lead_source', '');

    if (!empty($salesforce_lead_source)) {
      $form['settings']['lead_source_sfweb2lead_webform']['#default_value'] = $salesforce_lead_source;
      $form['settings']['lead_source_sfweb2lead_webform']['#access'] = FALSE;
    }
  }

  // Sitewide Salesforce settings form.
  if ($form_id == 'sfweb2lead_webform_form') {

    $salesforce_lead_source = variable_get('webform_salesforce_concat_lead_source', '');

    $form['salesforce_lead_source'] = array(
      '#type'          => 'textfield',
      '#title'         => t('Lead Source'),
      '#description'   => t('e.g. Webform Enquiry - UK'),
      '#default_value' => $salesforce_lead_source,
      '#weight' => -10,
    );

    $form['#submit'][] = 'webform_salesforce_concat_sitewide_settings_submit';
  }

  // Webform component settings form.
  if ($form_id == 'webform_component_edit_form') {
    $node = node_load($form['nid']['#value']);
    $cid = $form['cid']['#value']; // Webform component ID.

    if (isset($node->webform['components'][$cid]['extra']['webform_salesforce_concat']) && !empty($node->webform['components'][$cid]['extra']['webform_salesforce_concat'])) {
      $salesforce_integration = $node->webform['components'][$cid]['extra']['webform_salesforce_concat'];
    }
    else {
      $salesforce_integration = 'direct';
    }

    $form['extra']['webform_salesforce_concat'] = array(
      '#type'          => 'select',
      '#required'      => FALSE,
      '#title'         => t('Salesforce Integration'),
      '#default_value' => $salesforce_integration,
      '#empty_option'  => t('- Select -'),
      '#options'       => array('direct' => t('Direct Mapping'), 'description' => t('Add to Description'), 'ignore' => t('No Salesforce integration')),
    );

    if ($form['type']['#value'] == 'select') {

      if (isset($node->webform['components'][$cid]['extra']['webform_salesforce_labels_as_keys'])) {
        $labels_as_keys = $node->webform['components'][$cid]['extra']['webform_salesforce_labels_as_keys'];
      }
      else {
        $labels_as_keys = 0;
      }

      $form['extra']['webform_salesforce_labels_as_keys'] = array(
        '#type'          => 'checkbox',
        '#title'         => t('Salesforce: Option keys from labels'),
        '#description'   => t("Enable to send submissions to Salesforce using option labels as keys.<br />
                               <strong>IMPORTANT:</strong> If Option Settings are set to 'Multiple' this will have no effect, please set keys manualy."),
        '#default_value' => $labels_as_keys,
      );

      $form['extra']['salesforce_option_help'] = array(
        '#markup' => t("To save an option in the Salesforce Description field prefix it's key with 'sf_description_', e.g. sf_description_other."),
      );

      $form['items']['options']['#description'] = t("To save an option in the Salesforce Description field prefix it's key with 'sf_description_' (enable 'Customize keys''), e.g. sf_description_other.");

    }
  }
}

/**
 * Sitewide Salesforce settings form.
 * @param $form
 * @param $form_state
 */
function webform_salesforce_concat_sitewide_settings_submit($form, &$form_state) {
  variable_set('webform_salesforce_concat_lead_source', $form_state['values']['salesforce_lead_source']);
}

/**
 * Alter data before it's sent to Salesforce.
 * Multivalue fields are not available to alter.
 *
 * @param $data
 * @param $context
 */
function webform_salesforce_concat_sfweb2lead_webform_posted_data_alter(&$data, $context) {

  $node = node_load($context['webform_submission']->nid);
  $webform_components = $node->webform['components'];
  $data['description'] = '';

  foreach ($node->webform['components'] as $key => $field_settings) {

    $form_key = $field_settings['form_key'];
    $label = $field_settings['name'];

    switch ($webform_components[$key]['extra']['webform_salesforce_concat']) {
      case 'direct':
        // Move specific options to the Salesforce Description field.
        $data['description'] = webform_salesforce_concat_description_option($data, $context, $key, $data['description'], $field_settings['name'], $context['webform_submission']->data[$key]['value'], $field_settings);
        // Convert remaining selections to their labels.
        webform_salesforce_concat_select_values_as_keys($data, $context, $key, $context['webform_submission']->data[$key]['value'], $field_settings);
        break;
      case 'description':
        // Move field label and value to the Salesforce Description field.
        $data['description'] = webform_salesforce_concat_description_field($data['description'], $field_settings['name'], $context['webform_submission']->data[$key]['value'], $field_settings);
        unset($data[$form_key]);
        break;
      case 'ignore':
        // Remove from the Salesforce Lead.
        unset($data[$form_key]);
        break;
    }

  }
}

/**
 * Concatenate field label and value into the Salesforce Description field.
 *
 * @param $description
 * @param $label
 * @param $value_raw
 * @param $field_settings
 * @return string
 */
function webform_salesforce_concat_description_field($description, $label, $value_raw, $field_settings) {

  // If this is a select list convert the values to their labels.
  if ($field_settings['type'] == 'select') {
    $labels = array();
    $options = _webform_select_options_from_text($field_settings['extra']['items']);

    foreach ($value_raw as $selection) {
      $labels[] = $options[$selection];
    }

    $value = implode(' | ', $labels);
  }
  else {
    $value = implode(' | ', $value_raw);
  }

  if (!empty($value)) {
    $description .= "$label: $value

";
  }

  return $description;
}

/**
 * Concatenate a field option label and value into the Salesforce Description field.
 *
 * @param $data
 * @param $context
 * @param $key
 * @param $description
 * @param $label
 * @param $value_raw
 * @param $field_settings
 * @return string
 */
function webform_salesforce_concat_description_option(&$data, &$context, $key, $description, $label, $value_raw, $field_settings) {

  // If this is a select list convert the values to their labels.
  if ($field_settings['type'] == 'select') {
    $values = array();
    $options = _webform_select_options_from_text($field_settings['extra']['items']);

    foreach ($value_raw as $selection_key => $selection) {
      if (substr($selection, 0, 15) == 'sf_description_') {
        $values[] = $options[$selection];

        // For single option fields unset field data.
        if (empty($field_settings['extra']['multiple'])) {
          unset($data[$field_settings['form_key']]);
          unset($context['webform_submission']->data[$key]['value'][$selection_key]);
        }
        else {
          unset($context['webform_submission']->data[$key]['value'][$selection_key]);
        }
      }

    }

    $value = implode(' | ', $values);
  }

  if (!empty($value)) {
    $description .= "$label: $value

";
  }

  return $description;
}

/**
 * For a select list convert values to their labels.
 *
 * @param $data
 * @param $context
 * @param $key
 * @param $description
 * @param $label
 * @param $value_raw
 * @param $field_settings
 */
function webform_salesforce_concat_select_values_as_keys(&$data, &$context, $key, $value_raw, $field_settings) {

  if ($field_settings['type'] == 'select' && isset($field_settings['extra']['webform_salesforce_labels_as_keys']) && !empty($field_settings['extra']['webform_salesforce_labels_as_keys'])) {

    $options = _webform_select_options_from_text($field_settings['extra']['items']);

    foreach ($value_raw as $selection_key => $selection) {

      // For single option field convert it's value to the option label..
      if (empty($field_settings['extra']['multiple'])) {
        $data[$field_settings['form_key']] = $options[$selection];
        $context['webform_submission']->data[$key]['value'][$selection_key] = $options[$selection];
      }
    }
  }
}

/**
 * Implements hook_requirements().
 * Add a line to the Report page with status of the Salesforce integration.
 */
function webform_salesforce_concat_requirements($phase) {
  $return = array();
  $t = get_t();

  if ($phase == 'runtime') {

    $return['webform_salesforce_concat'] = array(
      'title'       => $t('Salesforce Web-to-Lead'),
      'description' => '',
      'value'       => $t('Salesforce connection is responding.'),
      'severity'    => REQUIREMENT_OK,
    );

    $return = webform_salesforce_concat_check_sf_url($return);
    $return = webform_salesforce_concat_check_sf_oid($return);
  }

  return $return;
}

/**
 * Check Salesforce URL is set and is responding.
 */
function webform_salesforce_concat_check_sf_url($return) {

  $t = get_t();

  // Check URL has been set.
  $url = variable_get('sfweb2lead_webform_url', '');

  if (empty($url)) {
    $return = webform_salesforce_concat_check_error_report($return, $t('Salesforce Web-to-Lead URL has not been set.'));
    return $return;
  }

  $curl = curl_init();
  curl_setopt($curl, CURLOPT_URL, $url);
  curl_setopt($curl, CURLOPT_POST, 1);
  curl_setopt($curl, CURLOPT_POSTFIELDS, '');
  curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($curl, CURLOPT_HEADER, 1);
  curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, FALSE);
  curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, FALSE);
  curl_setopt($curl, CURLOPT_USERAGENT, "sfweb2lead_webform module for Drupal");
  curl_setopt($curl, CURLOPT_FAILONERROR, TRUE);
  curl_setopt($curl, CURLOPT_FRESH_CONNECT, TRUE);

  $response = curl_exec($curl);

  if (curl_error($curl)) {
    $error = $t('Error connecting to Salesforce: #') . curl_errno($curl) . ' ' . curl_error($curl);
    $return = webform_salesforce_concat_check_error_report($return, $error);
  }

  curl_close($curl);
  return $return;
}

/**
 * Check Salesforce ID is set and is responding.
 */
function webform_salesforce_concat_check_sf_oid($return) {

  $t = get_t();
  $oid = variable_get('sfweb2lead_webform_oid', '');

  if (empty($oid)) {
    $return = webform_salesforce_concat_check_error_report($return, $t('Salesforce Web-to-Lead OID has not been set.'));
    return $return;
  }

  // If URL is already flagged as an error there's no point testing the OID.
  if ($return['webform_salesforce_concat']['severity'] == REQUIREMENT_ERROR) {
    return $return;
  }

  $sfweb2lead_webform_debug = variable_get('sfweb2lead_webform_debug', FALSE);

  // If Debug Mode is not enabled then don't create this test lead.
  if (!$sfweb2lead_webform_debug) {
    return $return;
  }

  $data = array('email' => 'test@example.com',
                'debug' => '1',
                'debug_email' => '0',
                'oid' => $oid,
  );

  $post_fields = http_build_query($data, '', '&');
  $url = variable_get('sfweb2lead_webform_url', '');

  $curl = curl_init();
  curl_setopt($curl, CURLOPT_URL, $url);
  curl_setopt($curl, CURLOPT_POST, 1);
  curl_setopt($curl, CURLOPT_POSTFIELDS, $post_fields);
  curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($curl, CURLOPT_HEADER, 1);
  curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, FALSE);
  curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, FALSE);
  curl_setopt($curl, CURLOPT_USERAGENT, "sfweb2lead_webform module for Drupal");
  curl_setopt($curl, CURLOPT_FAILONERROR, TRUE);
  curl_setopt($curl, CURLOPT_FRESH_CONNECT, TRUE);

  $response = curl_exec($curl);
  curl_close($curl);

  if (strpos($response, 'Lead Capture Page: Not available.') !== false) {
    $return = webform_salesforce_concat_check_error_report($return, $t('Salesforce did not confirm the Web-to-Lead request. Check OID setting.'));
    return $return;
  }

  $expected = '<BR><BR>Your request has been queued.<BR><BR>Record Information:<BR><BR>debug: 1<BR>debug_email: 0<BR>email: test@sample.com<BR>encoding: UTF-8<BR>oid: ' . $oid . '<BR>';

  if (strpos($response, $expected) === false) {
    $return = webform_salesforce_concat_check_error_report($return, $t('Salesforce did not confirm the Web-to-Lead request.'));
  }

  return $return;
}

/**
 * Set up report error.
 */
function webform_salesforce_concat_check_error_report($return, $description) {
  $t = get_t();
  $return['webform_salesforce_concat']['description'] .= '<p>' . $description . '</p>';
  $return['webform_salesforce_concat']['value'] = $t('Salesforce Web-to-Lead cannot be sent.');
  $return['webform_salesforce_concat']['severity'] = REQUIREMENT_ERROR;
  return $return;
}

