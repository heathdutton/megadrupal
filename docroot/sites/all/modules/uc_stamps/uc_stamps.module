<?php
/**
 * @file
 * An ubercart shipping module that prints shipping labels via Stamps.com.
 * The current version exports XML files for the Stamps.com
 * Windows software batch feature.  It later imports XML files from that
 * system with tracking numbers and to indicate that the order has shipped.
 *
 * Future versions will also interface directly with the Stamps.com SOAP API.
 */

/**
 * Implements hook_uc_shipping_method().
 */
function uc_stamps_uc_shipping_method() {
  $methods['stamps'] = array(
    'id' => 'stamps',
    'module' => 'uc_stamps',
    'title' => t('Stamps.com shipping labels'),
    'operations' => array(
      'configure' => array(
        'title' => t('configure'),
        'href' => 'admin/store/settings/stamps',
      ),
      'process' => array(
        'title' => t('process'),
        'href' => 'admin/store/orders/stamps',
      ),
    ),
    'ship' => array(
      'type' => 'small_package',
      'callback' => 'uc_stamps_shipment_create',
      'file' => 'uc_stamps.ship.inc',
      'pkg_types' => uc_stamps_configured_container_types(),
    ),
    'cancel' => 'uc_stamps_void_shipment',
  );

  return $methods;
}

/**
 * Implements hook_help().
 *
 * Displays help and module information.
 *
 * @param string $path
 *   Which path of the site we're using to display help
 * @param string $arg
 *   Array that holds the current path as returned from arg() function
 */
function uc_stamps_help($path, $arg) {
  switch ($path) {
    case "admin/help#uc_stamps":
      return '<h1>'
            . t('Stamps.com Shipping Labels')
            . '</h1>'
            . '<p>'
            .  t('This module allows you to use the ')
            . l('Stamps.com', 'http://stamps.com')
            . t('<sup>&reg;</sup> software to print USPS shipping labels from Ubercart.  ')
            . t('It is an Ubercart shipping method that imports and exports Stamps.com<sup>&reg;</sup> XML files for batch processing.')
            . '</p>'
            . '<p>'
            . t('Packages and shipping options are very configurable.  The module has enough intelligence to automatically select and export the correct package information to Stamps.com<sup>&reg;</sup> most of the time.  This is intended to reduce the amount of human work required to perform shipping functions.')
            . '</p>'
            . '<h2>'
            . t('Requirements')
            . '</h2>'
            . '<p>'
            . t('This module requires Ubercart version 7.x-3.4 or higher.  Printing labels requires an account with Stamps.com<sup>&reg;</sup> and the Stamps.com software, which runs on Microsoft Windows.')
            . '</p>'
            . '<h2>'
            . t('Installation')
            . '</h2>'
            . '<p>'
            . t('This module is installed like any other.  Make sure to run the ')
            . l('update.php', 'update.php')
            . t(' script after installing or updating it.')
            . '</p>'
            . '<h2>'
            . t('Configuration')
            . '</h2>'
            . t('Configuring this module involves describing how your business ships packages.  It might take some work to enter all the information before you can get started shipping, but the module uses the information later to automate your shipping and reduce the amount of manual work and calculation required.')
            . '<h3>'
            . t('Configure shipping containers')
            . '</h3>'
            . '<p>'
            . t('First, describe your shipping containers at the ')
            . l(t('container configuration page'), 'admin/store/settings/stamps/container')
            . t('.  Containers are simply the boxes or other objects your business uses to package products for shipment.  For each container your business uses for shipping, enter the following:')
            . '<dl>'
            . '<dt>'
            . '<strong>'
            . t('Container name')
            . '</strong>'
            . '</dt>'
            . '<dd>'
            . t('This is simply the name of the container that you will see when configuring and using this module.')
            . '</dd>'
            . '<dt>'
            . '<strong>'
            . t('Container type')
            . '</strong>'
            . '</dt>'
            . '<dd>'
            . t('Select the USPS type of container.  Select "Small Shipper-Supplied Package" for most containers.   If your business uses packaging supplied by USPS, select one of the flat-rate containers.  ')
            . t('See  ')
            . l(t('USPS Mailpiece Types'), 'https://stamps.custhelp.com/app/answers/detail/a_id/1161')
            . t(' for details about the different package types.')
            . '</dd>'
            . '<dt>'
            . '<strong>'
            . t('Priority')
            . '</strong>'
            . '</dt>'
            . '<dd>'
            . t('Enter the priority for this container.  When building a shipment, this module first finds all the containers that are big enough to hold the products in the package.  If multiple containers are available, this module will select the one with the highest priority.  It is usually a good idea to give the smaller containers a higher priority.  That way, if an order can fit into either a big box or a small box, this module will choose the smaller one.')
            . '</dd>'
            . '<dt>'
            . '<strong>'
            . t('Capacity')
            . '</strong>'
            . '</dt>'
            . '<dd>'
            . t('Enter the capacity of the container.  This is the maximum weight it can hold.  This module uses the capacity to select which container to use when building a shipment.')
            . '</dd>'
            . '<dt>'
            . '<strong>'
            . t('Tare')
            . '</strong>'
            . '</dt>'
            . '<dd>'
            . t('Enter the tare weight of the container.  This is the weight of the container and any packaging, tape, or documents it uses, not including the actual products.  This module needs this information to calculate the actual gross weight of packages.  This is optional for flat-rate containers.')
            . '</dd>'
            . '<dt>'
            . '<strong>'
            . t('Length, Width, and Height')
            . '</strong>'
            . '</dt>'
            . '<dd>'
            . t('Enter the length, width, and height of the container.  This is optional for most containers, but required for container types "Large Shipper-Supplied Package" and "Oversize Shipper-Supplied Package".')
            . '</dd>'
            . '<dt>'
            . '<strong>'
            . t('Box-shaped')
            . '</strong>'
            . '</dt>'
            . '<dd>'
            . t('Select this checkbox if the container is a standard box shape.  Uncheck it for unusually-shaped (non-machineable) containers.')
            . '</dd>'
            .'</dl>'
            . '<h3>'
            . t('Configure shipping modes')
            . '</h3>'
            . '<p>'
            . 'Shipping modes are the combinations of shipping classes and options used to ship a package.  For instance, Priority Mail with COD, Delivery Confirmation, and Stamps.com insurance is one possible mode.  Create all the common shipping modes your business uses.  Note that the options can be manually overridden when creating shipments.'
            . '</p>'
            . '<p>'
            . t('Enter your shipping modes at the ')
            . l(t('Shipping modes configuration page'), 'admin/store/settings/stamps/mode')
            . t('.  For each mode your business uses, click on "Add a shipping mode" then fill in the following fields:')
            . '</p>'
            . t('<dl>')
            . '<dt>'
            . '<strong>'
            . t('Mode name')
            . '</strong>'
            . '</dt>'
            . '<dd>'
            . t('Fill in the human-readable name for this mode.')
            . '</dd>'
            . '<dt>'
            . '<strong>'
            . t('Shipping class')
            . '</strong>'
            . '</dt>'
            . '<dd>'
            . t('Fill in the shipping class for this mode.  See ')
            . l(t('Domestic mail classes'),'https://stamps.custhelp.com/app/answers/detail/a_id/167')
            . t(' and ')
            . l(t('International mail classes'),'https://stamps.custhelp.com/app/answers/detail/a_id/168')
            . t(' for information about the different mail classes available.')
            . '</dd>'
            . '<dt>'
            . '<strong>'
            . t('Service options')
            . '</strong>'
            . '</dt>'
            . '<dd>'
            . t('Fill in the USPS shipping services (options) you wish to use.  The available services are dependent on the shipping class and other options already selected.  See ')
            . l(t('About USPS Special Services'),'https://stamps.custhelp.com/app/answers/detail/a_id/189')
            . t(' for a list of service options.')
            . '</dd>'
            . '<dt>'
            . '<strong>'
            . t('Default container')
            . '</strong>'
            . '</dt>'
            . '<dd>'
            . t('Select the container to use when the module is creating a shipment but cannot find a viable container to use.  This typically happens when a package is too heavy for any of the available containers.')
            . '</dd>'
            . '<dt>'
            . '<strong>'
            . t('Available containers ')
            . '</strong>'
            . '</dt>'
            . '<dd>'
            . t('Select the containers that are available for this shipping mode.  When creating a shipment, the module will select the highest-priority container selected here with enough capacity to hold the weight of the products in the package.')
            . '</dd>'
            . '<dt>'
            . '<strong>'
            . t('Priority')
            . '</strong>'
            . '</dt>'
            . '<dd>'
            . t('Select the mode\'s priority.  If multiple modes are valid for creating a shipment, this module will select the mode with the highest priority.')
            . '</dd>'
            . t('</dl>')
            . '<p>'
            . t('After creating a mode, the module brings up a ')
            . l(t('Rules'), 'http://drupal.org/documentation/modules/rules')
            . t(' condition page.  Enter the conditions under which the new mode can be used.  Usually, the conditions will involve the "Order has a shipping quote from a particular method" condition.')
            . '</p>'
            . '<h3>'
            . t('Configure global options')
            . '</h3>'
            . '<p>'
            . t('Once all your modes are entered, go to the ')
            . l(t('Stamps.com settings page'),'admin/store/settings/stamps')
            . t(' and set global options for the module.  The options are self-explanatory.')
            . '</p>'
            . '<h3>'
            . t('Configure customs information')
            . '</h3>'
            . '<p>'
            . t('If your business ships internationally, enter customs information for your products.')
            . '</p>'
            . '<p>'
            . t('The USPS requires customs forms for packages shipped internationally.  The Stamps.com software generates these forms, but it needs some customs information to do so.  The customs information is just a short description of the product, the country of origin of the product, and an optional tariff code.  There are three ways to enter this information.')
            . '</p>'
            . '<dl>'
            . '<dt>'
            . '<strong>'
            . t('Individual product')
            . '</strong>'
            . '</dt>'
            . '<dd>'
            . t('Each product can have individual customs information.')
            . '<ol>'
            . '<li>'
            . t('Edit an individual product (content) node.')
            . '</li>'
            . '<li>'
            . t('Scroll to the bottom of the edit page and click on the "Shipping settings" vertical tab.')
            . '</li>'
            . '<li>'
            . t('Click on the "Stamps.com Customs Information" line to expand it.')
            . '</li>'
            . '<li>'
            . t('Enter the customs information there and save the form.  Leave these fields blank to use the default product class or store customs information.')
            . '</li>'
            . '</ol>'
            . '</dd>'
            . '<dt>'
            . '<strong>'
            . t('Product class')
            . '</strong>'
            . '</dt>'
            . '<dd>'
            . t('Each product class can have customs information.  When set, product class customs information applies to all products of that class.  The customs information can be overridden on a per-product basis.')
            . '<ol>'
            . '<li>'
            . t('Go to the store product type ')
            . l(t('Manage classes'), 'admin/store/products/classes')
            . t(' administration page.')
            . '</li>'
            . '<li>'
            . t('Click on the "edit" link for the product class that needs customs information.')
            . '</li>'
            . '<li>'
            . t('Click on the "Stamps.com" tab.')
            . '</li>'
            . '<li>'
            . t('Enter the customs information there and save the form.  Leave the "Country of origin" field set to "- Default -" to use the store default country of origin.')
            . '</li>'
            . '</ol>'
            . '</dd>'
            . '<dt>'
            . '<strong>'
            . t('Store default')
            . '</strong>'
            . '</dt>'
            . '<dd>'
            . t('The store default country of origin is used for products with no country of origin set for either the product class or the product itself.  To set it:')
            . '<ol>'
            . '<li>'
            . t('Go to the ')
            . l(t('Stamps.com settings page'),'admin/store/settings/stamps')
            . t('.')
            . '</li>'
            . '<li>'
            . t('Select the Default Country of Origin and save the form.')
            . '</li>'
            . '</ol>'
            . '</dd>'
            . '<dt>'
            . '<strong>'
            . t('Use the Stamps.com software')
            . '</strong>'
            . '</dt>'
            . '<dd>'
            . t('If you do not specify customs information for a product, the Stamps.com software will prompt you for it when you print a shipping label.')
            . '</dd>'
            . '</dl>'
            . '<h3>'
            . t('Set up a Stamps.com import interface')
            . '</h3>'
            . '<p>'
            . t('The module is now ready to export XML files to the Stamps.com software and import postback information.  Before you can do that, though, you must set up the Stamps.com software and configure it with a batch interface.  These directions assume you have the Stamps.com software already set up.  See the ')
            . l(t('Stamps.com Startup Guide'), 'http://www.stamps.com/site/resources/pdf/Stamps.com_Startup_Guide.pdf')
            . t(' if you need help.')
            . '</p>'
            . '<p>'
            . t('There are two kinds of Stamps.com XML interfaces.  XML directory monitoring watches a specified directory.  When you place an XML file in that directory, the Stamps.com software immediately reads the file, prints the labels, and writes out a postback file.  An XML batch data source, upon user prompting, reads in a specified file and allows the user to review and modify the labels before printing them.  Set up one of the interfaces in order to import the XML file.')
            . '</p>'
            . '<ul>'
            . '<li>'
            . l(t('XML batch data source'), 'https://stamps.custhelp.com/app/answers/detail/a_id/963')
            . '</li>'
            . '<li>'
            . l(t('XML directory monitoring'), 'https://stamps.custhelp.com/app/answers/detail/a_id/994')
            . '</li>'
            . '</ul>'
            . '<h2>'
            . t('Processing shipments')
            . '</h2>'
            . '<p>'
            . t('This section explains the basic operations of using this module and the Stamps.com software:  How to process packages and shipments, export label information, print labels, and post back shipment information.')
            . '</p>'
            . '<h3>'
            . t('Preparing shipments')
            . '</h3>'
            . '<p>'
            . t('Before an order\'s shipping label information can be exported to Stamps.com, you must use Ubercart to organize the ordered products into packages, then organize the packages into shipments.  Start the process at Ubercart\'s ')
            . l(t('View orders'), 'admin/store/orders/view')
            . t(' page.  See ')
            . l(t('Ubercart\'s documentation'), 'http://www.ubercart.org/docs/user/30471/shipping_your_products')
            . t(' for further details.')
            . '</p>'
            . '<p>'
            . t('An Ubercart ')
            . '<em>'
            . t('package')
            . '</em>'
            . t(' is a group of products from an order that should be shipped together in a single container.')
            . '</p>'
            . '<p>'
            . t('An Ubercart ')
            . '<em>'
            . t('shipment')
            . '</em>'
            . t(' is a group of packages from an order that should be shipped together with the same origin, destination, carrier, shipping class, and options.')
            . '</p>'
            . '<p>'
            . t('With the current version of Ubercart, you must manually create packages and shipments for each order; this process can be labor-intensive if you have a lot of orders.  Still, it\'s much better than copy-and paste.  There is an effort underway to overhaul Ubercart\'s shipping and automate some of this process.  See the ')
            . l(t('issue'), 'http://drupal.org/node/1937764')
            . t(' if you can help.  This is a major project, and help is needed, including testers.')
            . '<h4>'
            . t('Creating packages')
            . '</h4>'
            . '<p>'
            . t('For each order you you wish to export to Stamps.com, click on the little icon with a picture of a green arrow pointed at a box or the order\'s "Packages" tab.  This brings you to the packaging screen for that order.  Organize the products into packages.  If you wish to ship the whole order in one box, just select all the products and click "Create one package".')
            . '</p>'
            . '<h4>'
            . t('Creating shipments')
            . '</h4>'
            . '<p>'
            . t('Once the order\'s products are organized into packages, create a shipment or shipments from those packages.')
            . '</p>'
            . '<ol>'
            . '<li>'
            . t('Click on the order\'s "Shipments" tab or the little "Ship order" icon to bring up the shipments page with a list of unshipped packages.')
            . '</li>'
            . '<li>'
            . t('Select the packages to place in the new shipment.')
            . '</li>'
            . '<li>'
            . t('For "Shipping method," choose "Stamps.com shipping labels".')
            . '</li>'
            . '<li>'
            . t('Click "Ship packages" to bring up the shipment editing page.')
            . '</li>'
            . '<li>'
            . t('All of that earlier container and mode configuration pays off here.  The Stamps.com module automatically fills in the shipping details, including the containers, shipping class, and service options.  Review the shipment to make sure everything looks correct.')
            . '</li>'
            . '<li>'
            . t('If everything looks good, click on "Enqueue shipment for batch".  This enqueues all the packages in the shipment for export to Stamps.com.')
            . '</li>'
            . '</ol>'
            . '<h3>'
            . t('Exporting package information from Ubercart')
            . '</h3>'
            . '<p>'
            . t('Once all the shipments and their packages have been enqueued for batch, they can be exported.  The module send an XML file to your Web browser, which you can use to download the file.')
            . '</p>'
            . '<ol>'
            . '<li>'
            . t('Go to the ')
            . l(t('Stamps.com Export/Import'), 'admin/store/orders/stamps')
            . t(' page using the computer that has the Stamps.com software installed.  This page lists all the queued packages.')
            . '</li>'
            . '<li>'
            . t('Click on the "Export to Stamps.com" button.  The module generates an XML file and sends it to your browser.')
            . '</li>'
            . '<li>'
            . t('Save the XML file to the appropriate file name or directory as configured in the Stamps.com XML Batch or Directory monitoring.')
            . '</li>'
            . '<li>'
            . t('Reload the Stamps.com Export/Import page in your browser (this cannot be done automatically).  The exported packages will now be listed as "exported packages".')
            . '</li>'
            . '</ol>'
            . '<h3>'
            . t('Importing package information to Stamps.com')
            . '</h3>'
            . '<p>'
            . t('Once the data is exported from Ubercart, import it into Stamps.com.  This is not required when using directory monitoring.  Perform the following steps in the Stamps.com software:')
            . '</p>'
            . '<ol>'
            . '<li>'
            . t('Click on "Batch" in the left navigation bar.  The batch screen appears.')
            . '</li>'
            . '<li>'
            . t('Click on the XML data source you set up earlier.')
            . '</li>'
            . '<li>'
            . t('Click "Import Orders" on the control bar at the top-left of the Batch window.  The software will import the orders you saved to an XML file earlier.  The Stamps.com software may prompt you to fix addressing or other issues.')
            . '</li>'
            . '</ol>'
            . '<h3>'
            . t('Printing labels')
            . '</h3>'
            . '<p>'
            . t('Once you have imported package information into Stamps.com, you can print the labels.  See ')
            . l(t('XML batch data source'), 'https://stamps.custhelp.com/app/answers/detail/a_id/963')
            . t(' for full details.  This step is not required for XML directory monitoring.  For basic printing:')
            . '</p>'
            . '<ol>'
            . '<li>'
            . t('Click on "Select all" (center top).')
            . '</li>'
            . '<li>'
            . t('Click "Print".  The labels will print.')
            . '</li>'
            . '</ol>'
            . '<h3>'
            . t('Exporting postback information from Stamps.com')
            . '</h3>'
            . '<p>'
            . t('Once the labels are printed, export postback data from the Stamps.com and import it to Ubercart.  This postback information contains tracking numbers and shipping costs.  This step must be done immediately after printing labels, or the information is lost.')
            . '</p>'
            . '<p>'
            . t('This step is done automatically when using XML directory monitoring.  Stamps.com automatically exports a usable XML postback file.  For an XML batch data source, the process is manual:')
            . '</p>'
            . '<ol>'
            . '<li>'
            . t('Click on the "printed" line for your XML batch data source.')
            . '</li>'
            . '<li>'
            . t('Click on "Export" and select the "CSV" file format.  Do not export XML.  The batch XML postback files do not contain enough postback information.')
            . '</li>'
            . '<li>'
            . t('Select a file name and save the CSV postback file.  Make sure it ends with ".csv".')
            . '</li>'
            . '</ol>'
            . '<h3>'
            . t('Importing postback information to Ubercart')
            . '</h3>'
            . '<p>'
            . t('Once you have a postback file from Stamps.com, import it to Ubercart to get the tracking numbers and shipping cost information for each package.  The postback file will be an XML file for directory monitoring, or a CSV file for the batch interface.')
            . '</p>'
            . '<ol>'
            . '<li>'
            . t('Return to the ')
            . l(t('Stamps.com Export/Import'), 'admin/store/orders/stamps')
            . t(' page.')
            . '</li>'
            . '<li>'
            . t('Click on the "Browse" button.')
            . '</li>'
            . '<li>'
            . t('Select your postback file.')
            . '</li>'
            . '<li>'
            . t('Click the "Upload" button.  This uploads the file to your Drupal Web site.')
            . '</li>'
            . '<li>'
            . t('Click on the "Post back from Stamps.com button.  The file is processed.  All the packages posted back should disappear from the page.')
            . '</li>'
            . '</ol>'
            ;
    case 'admin/store/products/classes/%/stamps':
      return '<p>' . t('Enter customs information for all the products in this class.  It can be overridden on a per-product level.') . '</p>';
  }
}

/**
 * Implements hook_menu().
 *
 * Menu function to set up Stamps.com configuration and operation.
 */
function uc_stamps_menu() {
  $items = array();

  $items['admin/store/settings/stamps'] = array(
    'title' => 'Stamps.com',
    'weight' => '0',
    'description' => 'Configure Stamps.com shipping labels.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_stamps_config_form'),
    'file' => 'uc_stamps.admin.inc',
    'access arguments' => array('configure quotes'),
    'type' => MENU_NORMAL_ITEM,
  );

  // Main config page.
  $items['admin/store/settings/stamps/settings'] = array(
    'title' => 'Stamps.com Settings',
    'weight' => '0',
    'description' => 'Configure Stamps.com shipping labels.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_stamps_config_form'),
    'file' => 'uc_stamps.admin.inc',
    'access arguments' => array('configure quotes'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  // List of containers.
  $items['admin/store/settings/stamps/container'] = array(
    'title' => 'Containers',
    'description' => 'Create and edit shipping containers.',
    'page callback' => 'uc_stamps_container_admin',
    'access arguments' => array('configure quotes'),
    'weight' => 2,
    'file' => 'uc_stamps.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  // Create a new container.
  $items['admin/store/settings/stamps/container/add'] = array(
    'title' => 'Add a shipping container',
    'description' => 'Add a shipping container.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_stamps_container_form'),
    'access arguments' => array('configure quotes'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'uc_stamps.admin.inc',
  );

  // Edit an existing container.
  // This uses the hook_menu() magic to automatically call
  // uc_stamps_container_load() with the given container ID
  // and send the container object as an argument to the form
  // function (instead of the ID number).
  $items['admin/store/settings/stamps/container/%uc_stamps_container/edit'] = array(
    'title' => 'Edit a shipping container',
    'description' => 'Edit a shipping container.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_stamps_container_form', 5),
    'access arguments' => array('configure quotes'),
    'file' => 'uc_stamps.admin.inc',
  );

  // Delete an existing container.
  $items['admin/store/settings/stamps/container/%uc_stamps_container/delete'] = array(
    'title' => 'Delete a shipping container',
    'description' => 'Delete a shipping container.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_stamps_container_delete_confirm', 5),
    'access arguments' => array('configure quotes'),
    'file' => 'uc_stamps.admin.inc',
  );

  // List of shipping modes.
  $items['admin/store/settings/stamps/mode'] = array(
    'title' => 'Shipping modes',
    'description' => 'Create and edit modes.',
    'page callback' => 'uc_stamps_mode_admin',
    'access arguments' => array('configure quotes'),
    'weight' => 4,
    'file' => 'uc_stamps.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  // Create a new shipping mode.
  $items['admin/store/settings/stamps/mode/add'] = array(
    'title' => 'Add a shipping mode',
    'description' => 'Add a shipping mode.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_stamps_mode_form'),
    'access arguments' => array('configure quotes'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'uc_stamps.admin.inc',
  );

  // Edit an existing shipping mode.
  $items['admin/store/settings/stamps/mode/%uc_stamps_mode/edit'] = array(
    'title' => 'Edit a shipping mode',
    'description' => 'Edit a shipping mode.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_stamps_mode_form', 5),
    'access arguments' => array('configure quotes'),
    'file' => 'uc_stamps.admin.inc',
  );

  // Delete an existing shipping mode.
  $items['admin/store/settings/stamps/mode/%uc_stamps_mode/delete'] = array(
    'title' => 'Delete a shipping mode',
    'description' => 'Delete a shipping mode.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_stamps_mode_delete_confirm', 5),
    'access arguments' => array('configure quotes'),
    'file' => 'uc_stamps.admin.inc',
  );

  // Add per-class information (mainly customs).
  $items['admin/store/products/classes/%uc_product_class/stamps'] = array(
    'title' => 'Stamps.com',
    'description' => 'Administer Stamps.com customs information',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_stamps_product_class_form', 4),
    'access arguments' => array('administer product classes'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 4,
    'file' => 'uc_stamps.admin.inc',
  );

  // Page to import/export to XML to print labels.
  $items['admin/store/orders/stamps'] = array(
    'title' => 'Stamps.com Export/Import',
    'weight' => '5',
    'description' => 'Export Stamps.com Windows client XML and postback cost and tracking numbers',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_stamps_process_form'),
    'file' => 'uc_stamps.ship.inc',
    'access arguments' => array('fulfill orders'),
    'type' => MENU_NORMAL_ITEM,
  );

  // This somehow magically adds configuration menu items for the
  // Rules module.
  $items += rules_ui()->config_menu('admin/store/settings/stamps/mode');

  return $items;
}

/**
 * Implements hook_theme().
 *
 * Registers the form themes.
 */
function uc_stamps_theme() {
  return array(
    'uc_stamps_process_form' => array(
      'file' => 'uc_stamps.ship.inc',
      'render element' => 'form',
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter() for uc_shipping_shipment_edit().
 *
 * This modifies the uc_shipping_shipment_edit form, which is the default way
 * to generate or edit a shipment.
 *
 * When the user edits a shipment, if it's a stamps.com shipment, modify
 * the form to show the stamps.com USPS stuff
 */
function uc_stamps_form_uc_shipping_shipment_edit_alter(&$form, &$form_state, $form_id) {
  if (isset($form['shipment']['shipping_method']) &&
      $form['shipment']['shipping_method']['#value'] === 'stamps') {
    module_load_include('inc', 'uc_stamps', 'uc_stamps.ship');
    uc_stamps_shipment_edit_modify($form, $form_state);
  }
}

/**
 * Implements hook_uc_shipment().
 *
 * If a stamps shipment is deleted, dequeue it.
 */
function uc_stamps_uc_shipment($op, $shipment) {
  if ($op === 'delete' && $shipment->shipping_method == 'stamps') {
  }

  if ($op === 'load' && $shipment->shipping_method == 'stamps') {
    return array();
  }
}


/**
 * Associative array of Stamps.com package names.
 *
 * Convenience function.  Generate list of actual package type names used
 * by Stamps.com.  The keys are the actual names used in the XML.
 *
 * @return array
 *   An associative array mapping the Stamps.com XML names for
 *   containers to friendlier names.
 */
function uc_stamps_usps_container_types() {
  return array(
    'flat rate envelope' => t('Flat Rate Envelope'),
    'flat rate priority box' => t('Medium Flat Rate Priority Mail Box'),
    'large flat rate priority box' => t('Large Flat Rate Priority Mail Box'),
    'large package' => t('Large Shipper-Supplied Package'),
    'non-standard envelope' => t('Non-Standard Envelope'),
    'oversized package' => t('Oversized Shipper-Supplied Package'),
    'package' => t('Small Shipper-Supplied Package'),
    'postcard' => t('Postcard'),
    'small flat rate priority box' => t('Small Flat Rate Priority Box'),
    'thick envelope' => t('Thick Envelope'),
    'regional rate priority box a' => t('Regional Rate Priority Mail Box A'),
    'regional rate priority box b' => t('Regional Rate Priority Mail Box B'),
  );
}

/**
 * Associative array of user-configured containers.
 *
 * @return array
 *   An associative array mapping container ID numbers to the names
 *   of the configured shipping containers.
 */
function uc_stamps_configured_container_types() {
  $container_table = db_select('uc_stamps_containers', 'c')
    ->fields('c', array('cid', 'name'))
    ->execute();

  return $container_table->fetchAllKeyed();
}

/**
 * Associative array of shipping class names used by Stamps.com.
 *
 * Convenience function.  Generate list of actual USPS classes used
 * by Stamps.com.
 *
 * @return array
 *   An associative array mapping the Stamps.com XML names for
 *   shipping classes to friendlier names.
 */
function _uc_stamps_class_list() {
  return array(
    'express' => t('Express'),
    'first class' => t('First Class'),
    'media mail' => t('Media Mail'),
    'parcel post' => t('Parcel Post'),
    'priority' => t('Priority'),
    'international first class' => t('International First Class'),
    'international priority' => t('International Priority'),
    'international express' => t('International Express'),
  );
}

/**
 * Save a container type to the database.
 *
 * @param object $container
 *   Object containing the container data.
 *   - cid: Container ID.  Undefined for new containers.
 *   - name: Machine name of the container.
 *   - container_type:  Stamps.com name of the container type.
 *   - label: Label the user sees.
 *   - tare: Tare weight of the container.
 *   - tare_units:  Units of the weight:  oz, lb, g, or kg.
 *   - capacity: Maximum weight the container can hold.
 *   - capacity_units:  Units of the weight:  oz, lb, g, or kg.
 *   - length: Length of the container.
 *   - width: Width of the container.
 *   - height: Height of the container.
 *   - length_units: Dimension units of the container: in, ft, mm, cm, or m
 *   - boxlike: Boolean.  True if the container is box-shaped.
 *   - priority: Integer.  Automation uses it to pick the best.
 *
 * @return integer
 *   The integer result from drupal_write_record().
 */
function uc_stamps_container_save(&$container) {
  // Insert or update?
  $key = empty($container->cid) ? array() : 'cid';
  return drupal_write_record('uc_stamps_containers', $container, $key);
}

/**
 * Load a container object from the database.
 *
 * @param integer $cid
 *   The ID of the container.
 *
 * @return object
 *   Object containing the container data.
 *   - cid: Container ID.  Undefined for new containers.
 *   - name: Machine name of the container.
 *   - container_type:  Stamps.com name of the container type.
 *   - label: Label the user sees.
 *   - tare: Tare weight of the container.
 *   - tare_units:  Units of the weight:  oz, lb, g, or kg.
 *   - capacity: Maximum weight the container can hold.
 *   - capacity_units:  Units of the weight:  oz, lb, g, or kg.
 *   - length: Length of the container.
 *   - width: Width of the container.
 *   - height: Height of the container.
 *   - length_units: Dimension units of the container: in, ft, mm, cm, or m
 *   - boxlike: Boolean.  True if the container is box-shaped.
 *   - priority: Integer.  Automation uses it to pick the best.
 */
function uc_stamps_container_load($cid) {
  $query = db_select('uc_stamps_containers', 'c')
           ->fields('c')
           ->condition('c.cid', $cid);
  $result = $query->execute();
  $container = $result->fetchObject();

  return $container;
}

/**
 * Convert an accessorials string to an accessorials array.
 *
 * The accessorials are the shipping options, including the class
 * (priority, etc.) and all the possible options.
 *
 * @param string $options_string
 *   The encoded accessorials string.
 *
 * @return array
 *   The friendlier array.  Class is a string.  All the others are
 *   boolean.
 *   - class              : The shipping class (priority, etc.).
 *   - certified          : True for certified mail.
 *   - confirm            : True for delivery confirmation.
 *   - signature          : True for signature delivery confirmation.
 *   - cod                : True for C.O.D.  Probably for the total
 *                          amount of the order.
 *   - sdc_insurance      : True for Stamps.com insurance to $2500.
 *   - usps_insurance     : True for USPS insurance to $5000.
 *   - no_saturday        : True for no Saturday delivery of Express mail.
 *   - non_delivery_notice: True for C.O.D. notice if package not delivered.
 *   - restricted_delivery: True to restrict delivery to one person.
 *   - return_receipt     : True to get a return receipt for merchandise.
 *   - sunday_holiday     : True to deliver express mail on Sundays and
 *                          holidays.
 *   - registered         : True for registered mail.
 */
function uc_stamps_services_array($options_string) {
  if (empty($options_string)) {
    return array();
  }
  return unserialize($options_string);
}

/**
 * Convert an accessorials array to an accessorials string.
 *
 * The accessorials are the shipping options, including the class (priority,
 * etc.) and all the possible options.
 *
 * This currently just serializes it.  In the future, it might
 * be a good idea to encode it as a more human-readable string.
 *
 * @param array $options_array
 *   The friendlier array.  Class is a string.  All the others are
 *   boolean.
 *   - class              : The shipping class (priority, etc.).
 *   - certified          : True for certified mail.
 *   - confirm            : True for delivery confirmation.
 *   - signature          : True for signature delivery confirmation.
 *   - cod                : True for C.O.D.  Probably for the total
 *                          amount of the order.
 *   - sdc_insurance      : True for Stamps.com insurance to $2500.
 *   - usps_insurance     : True for USPS insurance to $5000.
 *   - no_saturday        : True for no Saturday delivery of Express mail.
 *   - non_delivery_notice: True for C.O.D. notice if package not delivered.
 *   - restricted_delivery: True to restrict delivery to one person.
 *   - return_receipt     : True to get a return receipt for merchandise.
 *   - sunday_holiday     : True to deliver express mail on Sundays
 *                          and holidays.
 *   - registered         : True for registered mail.
 *
 * @return string
 *   The encoded accessorials string.
 */
function uc_stamps_services_string($options_array) {
  return serialize($options_array);
}

/**
 * Generate a form to enter shipping options.  Contains pre-loaded values.
 *
 * @param array $parents
 *   Array of indexes leading to the form element.  This indicates
 *   where to put it.  The last item should probably be 'stamps' to
 *   allow other functions to work.
 * @param string $options_string
 *   The string form of the options, as used by uc_stamps_services_string().
 *
 * @see uc_stamps_services_form_ajax()
 * @ingroup forms
 */
function uc_stamps_services_form(&$form, &$form_state, $parents, $options_string = NULL) {

  $options_array = uc_stamps_services_array($options_string);

  // Point to the right place in the form structure and
  // values array.
  $form_base = &$form;
  $values_base = &$form_state['values'];
  $input_base = &$form_state['input'];
  foreach ($parents as $index) {
    if (!isset($form_base[$index])) {
      $form_base[$index] = array();
    }
    $form_base = &$form_base[$index];
    if (isset($values_base[$index])) {
      $values_base = &$values_base[$index];
    }
    else {
      $values_base = NULL;
    }
    if (isset($input_base[$index])) {
      $input_base = &$input_base[$index];
    }
    else {
      $input_base = NULL;
    }
  }
  // If you just clicked on an option, it shouldn't be disabled.
  // This is a fail-safe, in case of bad data.
  $clicked_option = isset($form_state['triggering_element'])
    ? end($form_state['triggering_element']['#parents']) : '';

  // Set up the fieldset to hold all this.
  // Wrap it in a div with a unique ID so that AJAX
  // can update all the fields.
  $ajax_div_id = 'ajax_' . implode('_', $parents);
  $form_base = array(
    '#type' => 'fieldset',
    '#tree' => TRUE,
    '#collapsible' => TRUE,
    '#title' => 'Stamps.com options',
    '#prefix' => '<div id="' . $ajax_div_id . '">',
    '#suffix' => '</div>',
  );

  // Set up the class element
  // Updating this can affect lots of other things, so
  // AJAX-ify it.
  if (!empty($values_base['class'])) {
    $default_class = $values_base['class'];
  }
  elseif (!empty($options_array['class'])) {
    $default_class = $options_array['class'];
  }
  else {
    $default_class = 'parcel post';
  }
  $form_base['class'] = array(
    '#type' => 'select',
    '#title' => 'Shipping class',
    '#options' => _uc_stamps_class_list(),
    '#required' => TRUE,
    '#default_value' => $default_class,
    '#ajax' => array(
      'wrapper' => $ajax_div_id,
      'callback' => 'uc_stamps_services_form_ajax',
    ),
  );

  $service_options_data = uc_stamps_services_options();

  // If you change the class, clear all options.
  if ($clicked_option == 'class') {
    foreach (array_keys($service_options_data) as $option) {
      $values_base['options'][$option] = FALSE;
      if (isset($input_base['options'][$option])) {
        unset($input_base['options'][$option]);
      }
    }
  }
  // Find all the options already selected.
  if (isset($values_base['options'])) {
    $selected_options = array_keys(array_filter($values_base['options']));
  }
  else {
    $selected_options = array_keys($options_array);
  }
  // Set up a checkbox for each option, possibly hidden.
  foreach ($service_options_data as $option => $option_data) {
    $disabled = $option != $clicked_option
                && (isset($option_data['classes']) && !in_array($default_class, $option_data['classes'])
                    || isset($option_data['requires']) && count(array_intersect($option_data['requires'], $selected_options)) !== count($option_data['requires'])
                    || isset($option_data['incompatible']) && count(array_intersect($option_data['incompatible'], $selected_options)) > 0);
    if ($disabled && isset($values_base['options'][$option])) {
      $selected_options = array_diff($selected_options, array($option));
    }

    if ($disabled) {
      $form_base['options'][$option] = array(
        '#type' => 'value',
        '#value' => FALSE,
      );
    }
    else {
      if (isset($values_base['options'][$option])) {
        $default_value = $values_base['options'][$option];
      }
      elseif (isset($options_array[$option])) {
        $default_value = $options_array[$option];
      }
      else {
        $default_value = FALSE;
      }
      $form_base['options'][$option] = array(
        '#type' => 'checkbox',
        '#title' => $option_data['name'],
        '#access' => !$disabled,
        '#default_value' => $default_value,
      );
      // Configure AJAX if this option can enable or disable other options.
      if (isset($option_data['dependee'])) {
        $form_base['options'][$option]['#ajax'] = array(
          'wrapper' => $ajax_div_id,
          'callback' => 'uc_stamps_services_form_ajax',
        );
      }
    }
  }

  // Set up the non-delivery option.  Make it hidden for domestic
  // classes and a select element for foreign classes.
  if (isset($values_base['NonDeliveryOption'])) {
    $non_delivery_option_default = $values_base['NonDeliveryOption'];
  }
  else {
    $non_delivery_option_default = 'return to sender';
  }
  $form_base['NonDeliveryOption'] = array(
    '#title' => 'Non-Delivery Option',
    '#options' => array(
      'return to sender' => 'Return to Sender',
      'abandon' => 'Abandon',
    ),
    '#default_value' => $non_delivery_option_default,
    '#description' => 'Select what to do with non-deliverable international packages.',
  );
  if (uc_stamps_class_is_domestic($default_class)) {
    $form_base['NonDeliveryOption']['#type'] = 'hidden';
  }
  else {
    $form_base['NonDeliveryOption']['#type'] = 'select';
  }

  return $form;
}

/**
 * AJAX callback for uc_stamps_services_form.
 *
 * This updates a uc_stamps_services_form.  That is part
 * of another form, so this has to find the right
 * part of the form to update.
 */
function uc_stamps_services_form_ajax($form, $form_state) {
  // Get the path to the triggering element.
  $parents = $form_state['triggering_element']['#parents'];
  // Whack off the last element of the parents array, to
  // point to the fieldset.
  while (end($parents) != 'stamps') {
    array_pop($parents);
  }
  $form_base = &$form;
  foreach ($parents as $index) {
    $form_base = &$form_base[$index];
  }
  // Return the fieldset, which AJAX has already updated.
  return $form_base;
}

/**
 * Fill in accessorials field from class and options values.
 *
 * Take a form with loaded class field and options checkboxes,
 * convert those to an accessorials string, and store that in
 * the accessorials value.
 *
 * This is used while processing a form.  It encodes the
 * stamps array and puts it into the accessorials string so
 * it can be stored in a shipment or package record.
 *
 * @param array $form_values
 *   The part of the $form_state that contains the fields indexed
 *   by 'accessorials' and 'stamps'.  This will usually just be
 *   $form_state['values'], but might be another for a series
 *   of packages or the like.
 */
function uc_stamps_services_form_fill_accessorials(&$form_values) {
  $compressed_array = array_filter($form_values['stamps']['options']);

  // Fill in the class.
  $compressed_array['class'] = $form_values['stamps']['class'];

  // Fill in the Non-Delivery Option for international orders.
  if (!uc_stamps_class_is_domestic($compressed_array['class'])) {
    $compressed_array['NonDeliveryOption'] = $form_values['stamps']['NonDeliveryOption'];
  }

  $form_values['accessorials']
    = uc_stamps_services_string($compressed_array);
}

/**
 * Convenience function to get the Stamps.com service options.
 *
 * @return array
 *   An associative array of the Stamps.com codes for
 *   the service options.  Keys are the values used in the XML file.
 *   Values are arrays containing the following elements:
 *   - name: Name displayed for the option.
 *   - description: (optional) Description of the option.
 *   - classes: Array containing the names of the mail classes that can use
 *     this option.
 *   - requires: (optional) Array of other options that must be present in
 *     order for this option to be relevant.  For instance, NoticeOfNonDelivery
 *     requires the COD option.
 *   - incompatible: (optional) Array of other options that are incompatible
 *     with this option.  For instance, CertifiedMail and RegisteredMail are
 *     incompatible with each other.
 */
function uc_stamps_services_options() {
  $options = array(
    'DeliveryConfirmation' => array(
      'name' => t('Delivery confirmation'),
      'classes' => array('priority', 'parcel post', 'first class', 'media mail'),
      'incompatible' => array('CertifiedMail'),
    ),
    'CertifiedMail' => array(
      'name' => t('Certified mail'),
      'classes' => array('first class', 'priority'),
      'incompatible' => array('RegisteredMail')
    ),
    'SignatureConfirmation' => array(
      'name' => t('Signature delivery confirmation'),
      'classes' => array('first class', 'priority')
    ),
    'SDCInsurance' => array(
      'name' => t('Stamps.com insurance to $2500'),
      'incompatible' => array('USPSInsurance', 'RegisteredMail'),
    ),
    'USPSInsurance' => array(
      'name' => t('USPS insurance to $5000'),
      'classes' => array('first class', 'priority', 'parcel post', 'media mail'),
      'incompatible' => array('SDCInsurance', 'RegisteredMail'),
    ),
    'NoSaturdayDelivery' => array(
      'classes' => 'express',
      'name' => t('No Saturday delivery of Express Mail'),
      'classes' => array('express'),
    ),
    'RestrictedDelivery' => array(
      'name' => t('Restrict delivery to recipient only'),
      'classes' => array('express', 'priority'),
    ),
    'ReturnReceiptForMerchandise' => array(
      'name' => t('Get a return receipt for merchandise'),
      'classes' => array('media mail', 'parcel post', 'priority mail'),
    ),
    'SundayHolidayDelivery' => array(
      'name' => t('Deliver Express Mail on Sundays and holidays'),
      'classes' => array('express mail'),
    ),
    'RegisteredMail' => array(
      'name' => t('Registered mail'),
      'classes' => array('first class', 'priority'),
      'incompatible' => array('SDCInsurance', 'USPSInsurance', 'CertifiedMail'),
    ),
    'WaiveDeliverySignature' => array(
      'name' => t('Waive delivery signature for domestic Express Mail'),
      'classes' => array('express'),
    ),
    'COD' => array(
      'name' => t('Collect on delivery (COD)'),
      'classes' => array('first class', 'media mail', 'express', 'parcel post', 'priority'),
    ),
    'NoticeOfNonDelivery' => array(
      'name' => t('Notice if COD package not delivered'),
      'requires' => array('COD'),
    ),
  );

  // For each option, check if other options are dependent on it.
  foreach ($options as $dependent_data) {
    if (isset($dependent_data['requires'])) {
      foreach ($dependent_data['requires'] as $dependee_index) {
        $options[$dependee_index]['dependee'] = TRUE;
      }
    }
    if (isset($dependent_data['incompatible'])) {
      foreach ($dependent_data['incompatible'] as $dependee_index) {
        $options[$dependee_index]['dependee'] = TRUE;
      }
    }
  }
  return $options;
}

/**
 * Return an associative array of user-defined containers.
 *
 * @return array
 *   Array mapping container IDs to container names.
 */
function uc_stamps_container_names() {
  $query = db_select('uc_stamps_containers', 'c')
    ->fields('c', array('cid', 'name'));
  $query_result = $query->execute();

  $result = array();
  foreach ($query_result as $container) {
    $result[$container->cid] = check_plain($container->name);
  }

  return $result;
}

/**
 * Load a shipping mode object from the database.
 *
 * A shipping mode is a combination of shipping class,
 * shipping options, and user-defined container.
 *
 * @param integer $mid
 *   The ID of the mode.
 *
 * @return object
 *   Object containing the mode data.
 *   - mid: Mode ID.  Undefined for new shipping modes.
 *   - name: Name of the shipping mode.
 *   - cid: ID for the default container for this mode.
 *   - accessorials: Encoded shipping class and options
 *   - options: Decoded accessorials.
 *   - weight: Priority of mode for when multiple modes are valid.
 *   - containers: Array of available container objects for this mode,
 *     keyed by cid.
 */
function uc_stamps_mode_load($mid = NULL) {
  if (isset($mid)) {
    $mids = array($mid);
  }
  else {
    $mids = array();
  }
  $mode_array = uc_stamps_modes_load($mids);

  return array_pop($mode_array);
}

/**
 * Load a set of shipping mode object from the database.
 *
 * A shipping mode is a combination of shipping class,
 * shipping options, and user-defined containers.
 *
 * @param array $mids
 *   The IDs of the mode to fetch.  Empty to fetch all
 *   of them.
 *
 * @return array
 *   Array containing the mode data, indexed by mode ID.
 *   - mid: Mode ID.  Undefined for new shipping modes.
 *   - name: Name of the shipping mode.
 *   - cid: ID for the default container for this mode.
 *   - accessorials: Encoded shipping class and options
 *   - options: Decoded accessorials.
 *   - priority: Priority of mode for when multiple modes are valid.
 *   - containers: Array of available container objects for this mode,
 *     keyed by cid.
 */
function uc_stamps_modes_load($mids = array()) {
  $mode_query = db_select('uc_stamps_modes', 'm')
           ->fields('m');
  if (!empty($mids)) {
    $mode_query->condition('m.mid', $mids, 'IN');
  }
  $mode_result = $mode_query->execute();
  $modes = $mode_result->fetchAllAssoc('mid');

  // Now load the other goodies.
  foreach ($modes as $mid => &$mode) {
    // Translate the shipping options.
    $mode->options = uc_stamps_services_array($mode->accessorials);

    // Load the containers.
    $container_query = db_select('uc_stamps_containers', 'c');
    $container_query->join('uc_stamps_modes_containers', 'mc', 'c.cid = mc.cid');
    $container_query
      ->fields('c')
      ->condition('mc.mid', $mid);
    $container_result = $container_query->execute();
    $mode->containers = $container_result->fetchAllAssoc('cid');
  }

  return $modes;
}

/**
 * Find shipping modes that are valid for the given shipment.
 *
 * This checks all the conditions for the modes and
 * returns a list of modes that match.  It ignores the weight
 * fields.
 *
 * @todo Make a version of this function that will also
 *   do a condition evaluation on individual packages.  This
 *   just uses orders for now.  Doing it on a package would
 *   be good, because then we could select based on the
 *   physical weight or products in the package.  That requires
 *   adding new rules and probably a separate module, though.
 *
 * @param object $order
 *   The order object to be checked.
 *
 * @return array
 *   A list of mode objects for which the associated condition
 *   is true.
 */
function uc_stamps_valid_modes($order) {
  // Get all the modes.
  $mode_results = uc_stamps_modes_load();

  // Find the valid modes.
  $valid_modes = array();
  foreach ($mode_results as $mode) {
    $condition = rules_config_load('uc_stamps_mode_condition_' . $mode->mid);
    if (!$condition || $condition->execute($order)) {
      $valid_modes[$mode->mid] = $mode;
    }
  }
  return $valid_modes;
}

/**
 * Find valid shipping mode with the highest priority field.
 *
 * @param object $order
 *   The shipment object to be checked.
 *
 * @return object
 *   The shipping mode for this order with the
 *   highest priority field.
 */
function uc_stamps_best_mode($order) {
  $valid_modes = uc_stamps_valid_modes($order);

  $greatest = -5000;
  $best = NULL;
  foreach ($valid_modes as $mode) {
    if ($mode->priority > $greatest) {
      $greatest = $mode->priority;
      $best = $mode;
    }
  }

  // Use a default mode.
  if (empty($best)) {
    if (uc_stamps_is_domestic($order->delivery_country)) {
      $best = uc_stamps_mode_load(variable_get('uc_stamps_default_domestic_mode'));
    }
    else {
      $best = uc_stamps_mode_load(variable_get('uc_stamps_default_foreign_mode'));
    }
  }

  return $best;
}

/**
 * Implements hook_form_alter().
 *
 * Adds a form element for customs info for a product to a product
 * node.
 */
function uc_stamps_form_alter(&$form, &$form_state, $form_id) {
  if (uc_product_is_product_form($form)) {
    $form['shipping']['uc_stamps'] = array(
      '#type' => 'fieldset',
      '#title' => t('Stamps.com Customs Information'),
      '#description' => t("Set the customs information for the product."),
      '#tree' => TRUE,
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#weight' => 0,
    );

    $default_stamps_description = isset($form['#node']->uc_stamps['description']) ?
      $form['#node']->uc_stamps['description'] : '';
    $form['shipping']['uc_stamps']['description'] = array(
      '#type' => 'textfield',
      '#title' => t('Description'),
      '#default_value' => $default_stamps_description,
      '#description' => t('Describe the product for foreign customs officials in 31 or fewer characters.  Leave blank to use the product class customs settings.'),
      '#size' => 31,
      '#maxlength' => 31,
    );
    $default_stamps_tariff_code = isset($form['#node']->uc_stamps['tariff_code']) ?
      $form['#node']->uc_stamps['tariff_code'] : '';
    $form['shipping']['uc_stamps']['tariff_code'] = array(
      '#type' => 'textfield',
      '#title' => t('Harmonized Tariff Code'),
      '#default_value' => $default_stamps_tariff_code,
      '#description' => t('The harmonized tariff code speeds customs processing, if available.'),
      '#size' => 6,
      '#maxlength' => 6,
    );
    // Default country of origin (stored as a country code).
    $countries = uc_country_option_list();
    $default_stamps_country = isset($form['#node']->uc_stamps['origin_country']) ?
      $form['#node']->uc_stamps['origin_country'] : 0;
    $form['shipping']['uc_stamps']['origin_country'] = array(
      '#type' => 'select',
      '#title' => t('Country of Origin'),
      '#options' => $countries,
      '#required' => FALSE,
      '#description' => t('The country of origin for this product.  Leave blank to use product class or global default value.'),
      '#default_value' => $default_stamps_country,
      '#empty_option' => '- Default -',
      '#empty_value' => 0,
    );
  }
}

/**
 * Hook implementations to respond to product nodes being
 * created, updated, and deleted.
 *
 * All of these update the {uc_stamps_products} table.
 */

/**
 * Implements hook_node_insert().
 */
function uc_stamps_node_insert($node) {
  uc_stamps_node_update($node);
}

/**
 * Implements hook_node_update().
 */
function uc_stamps_node_update($node) {
  if (uc_product_is_product($node->type)) {
    if (isset($node->uc_stamps)) {
      if (empty($node->revision)) {
        db_delete('uc_stamps_products')
          ->condition('vid', $node->vid)
          ->execute();
      }

      $query = db_insert('uc_stamps_products')
        ->fields(array('vid', 'nid', 'description', 'tariff_code', 'origin_country'));


      $query->values(array(
            'vid' => $node->vid,
            'nid' => $node->nid,
            'description' => $node->uc_stamps['description'],
            'tariff_code' => $node->uc_stamps['tariff_code'],
            'origin_country' => $node->uc_stamps['origin_country'],
          ));
      $query->execute();
    }
  }
}

/**
 * Implements hook_node_load().
 *
 * Loads the per-product customs information into product nodes.
 */
function uc_stamps_node_load($nodes, $types) {
  $vids = array();
  $product_types = uc_product_types();

  foreach ($nodes as &$node) {
    if (in_array($node->type, $product_types)) {
      $vids[$node->nid] = $node->vid;
    }
  }

  if ($vids) {
    $result = db_query("SELECT nid, description, tariff_code, origin_country FROM {uc_stamps_products} WHERE vid IN (:vids)", array(':vids' => $vids));
    foreach ($result as $stamps_info) {
      $nodes[$stamps_info->nid]->uc_stamps['description'] = $stamps_info->description;
      $nodes[$stamps_info->nid]->uc_stamps['tariff_code'] = $stamps_info->tariff_code;
      $nodes[$stamps_info->nid]->uc_stamps['origin_country'] = $stamps_info->origin_country;
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function uc_stamps_node_delete($node) {
  db_delete('uc_stamps_products')
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * Implements hook_node_revision_delete().
 */
function uc_stamps_node_revision_delete($node) {
  db_delete('uc_stamps_products')
    ->condition('vid', $node->vid)
    ->execute();
}

/**
 * Load customs information for a product class.
 *
 * @param string $pcid
 *   A string containing the product class ID.
 *
 * @return object
 *   The product class info object, containing the following elements:
 *   - pcid: String containing the product class ID.
 *   - description: String containing a short description of the products
 *     in the class.  Maximum 31 characters.
 *   - tariff_code: String containing the harmonized tariff code for the
 *     products in the class.  Maximum 6 characters.
 */
function uc_stamps_product_class_load($pcid) {
  $query = db_select('uc_stamps_product_classes', 'c')
           ->fields('c')
           ->condition('c.pcid', $pcid);
  $result = $query->execute();
  $product_class = $result->fetchObject();

  // If nothing's in the database for this pcid yet, make a default
  // object containing only the pcid and blank strings.
  if (!$product_class) {
    $product_class = new stdClass();
    $product_class->pcid = $pcid;
    $product_class->description = "";
    $product_class->tariff_code = "";
    $product_class->origin_country = 0;
  }

  return $product_class;
}

/**
 * Implements hook_uc_product_class().
 *
 * Delete the entry in {uc_stamps_product_classes} if
 * the corresponding entry in {uc_product_classes} is deleted.
 */
function uc_stamps_uc_product_class($type, $op) {
  switch ($op) {
    case 'delete':
      db_delete('uc_stamps_product_classes')
        ->condition('pcid', $type)
        ->execute();
  }
}

/**
 * Implements hook_uc_order_product_alter().
 *
 * Save the current customs information in the ordered product
 * object.  This means that it gets preserved in {uc_order_products}
 * in case the customs information gets changed later.
 *
 * This happens when the order is saved or updated at checkout.
 */
function uc_stamps_uc_order_product_alter(&$product, $order) {
  if (!array_key_exists('uc_stamps', $product->data)) {
    $product->data['uc_stamps'] = array();
    $class_info = uc_stamps_product_class_load($product->type);
    // Fill in the customs description.
    if (!empty($product->uc_stamps['description'])) {
      $product->data['uc_stamps']['description'] = $product->uc_stamps['description'];
    }
    elseif (!empty($class_info->description)) {
      $product->data['uc_stamps']['description'] = $class_info->description;
    }
    // Fill in the tariff_code
    if (!empty($product->uc_stamps['tariff_code'])) {
      $product->data['uc_stamps']['tariff_code'] = $product->uc_stamps['tariff_code'];
    }
    elseif (!empty($class_info->tariff_code)) {
      $product->data['uc_stamps']['tariff_code'] = $class_info->tariff_code;
    }
    // Fill in the country of origin.
    if (!empty($product->uc_stamps['origin_country'])) {
      $product->data['uc_stamps']['origin_country'] = $product->uc_stamps['origin_country'];
    }
    elseif (!empty($class_info->origin_country)) {
      $product->data['uc_stamps']['origin_country'] = $class_info->origin_country;
    }
    else {
      $product->data['uc_stamps']['origin_country'] = variable_get('uc_stamps_default_origin_country', 840);
    }
  }
}

/**
 * Determine if a country code is domestic (USA).
 *
 * "Countries" that the USPS
 * counts as domestic are  USA, American Samoa, US Virgin Islands, Guam,
 * Puerto Rico, and the United States Minor Outlying Islands.
 *
 * @param integer $code
 *   The country code from {uc_countries}.
 *
 * @return bool
 *   TRUE if the country is domestic.
 */
function uc_stamps_is_domestic($code) {
  return in_array($code, array(16, 316, 630, 840, 581, 850));
}

/**
 * Determine if shipping class is domestic (USA).
 *
 * Certain USPS methods are only domestic.  The rest are
 * only international.  This determines which.
 *
 * @param string $class
 *   The shipping class.
 *
 * @return bool
 *   TRUE if the class is for domestic shipping.
 */
function uc_stamps_class_is_domestic($class) {
  return in_array($class, array('express', 'first class', 'media mail',
    'parcel post', 'priority'));
}

/**
 * Implements hook_node_type_update().
 *
 * Update any fields in the {uc_stamps_product_classes} table when the node
 * type machine name changes.
 */
function uc_stamps_node_type_update($update_info) {
  if (!empty($update_info->old_type) && $update_info->old_type != $update_info->type) {
    db_update('uc_stamps_product_classes')
      ->fields(array(
        'pcid' => $update_info->type,
      ))
      ->condition('pcid', $update_info->old_type)
      ->execute();
  }
}
