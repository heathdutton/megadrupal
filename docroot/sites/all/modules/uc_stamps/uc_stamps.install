<?php
/**
 * @file
 * Stamps.com install / deinstall functions.
 */

/**
 * Implements hook_schema().
 */
function uc_stamps_schema() {
  $schema = array();

  // Table of user-configured containers.
  $schema['uc_stamps_containers'] = array(
    'description' => 'Characteristics of containers used by Stamps.com USPS shipping.',
    'fields' => array(
      'cid' => array(
        'description' => 'The internal identifier for the container',
        'type' => 'serial',
        'size' => 'small',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'Name for the container',
        'type' => 'varchar',
        'size' => 'normal',
        'length' => 50,
        'not null' => TRUE,
        'default' => '',
      ),
      'container_type' => array(
        'description' => 'USPS type of container',
        'type' => 'varchar',
        'size' => 'normal',
        'length' => 50,
        'not null' => TRUE,
        'default' => '',
      ),
      'tare' => array(
        'description' => 'Physical tare weight of the container and packaging',
        'type' => 'numeric',
        'precision' => 16,
        'scale' => 5,
        'default' => 0,
      ),
      'tare_units' => array(
        'description' => 'Units for tare weight:  oz, lb, g, or kg',
        'type' => 'varchar',
        'size' => 'normal',
        'length' => 2,
        'not null' => TRUE,
        'default' => 'oz',
      ),
      'capacity' => array(
        'description' => 'Maximum physical weight the container can hold',
        'type' => 'numeric',
        'precision' => 16,
        'scale' => 5,
        'default' => 0,
      ),
      'capacity_units' => array(
        'description' => 'Units for capacity:  oz, lb, g, or kg',
        'type' => 'varchar',
        'size' => 'normal',
        'length' => 2,
        'not null' => TRUE,
        'default' => 'oz',
      ),
      'length' => array(
        'description' => 'The container length',
        'type' => 'numeric',
        'precision' => 16,
        'scale' => 5,
        'default' => 0,
      ),
      'width' => array(
        'description' => 'The container width',
        'type' => 'numeric',
        'precision' => 16,
        'scale' => 5,
        'default' => 0,
      ),
      'height' => array(
        'description' => 'The container height',
        'type' => 'numeric',
        'precision' => 16,
        'scale' => 5,
        'default' => 0,
      ),
      'length_units' => array(
        'description' => 'Units for container dimensions:  in, cm, ft, mm, or m',
        'type' => 'varchar',
        'size' => 'normal',
        'length' => 2,
        'not null' => TRUE,
        'default' => 'in',
      ),
      'priority' => array(
        'description' => 'Priority for automated container selection',
        'type' => 'int',
        'size' => 'small',
        'not null' => TRUE,
        'default' => 0,
      ),
      'boxlike' => array(
        'description' => 'True for normal box-shaped containers',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => TRUE,
      ),
    ),
    'primary key' => array('cid'),
    'indexes' => array(
      'cid' => array('cid'),
    ),
  );

  // Table of user-configured Stamps.com shipping modes.
  // Contains package type and shipping options.
  $schema['uc_stamps_modes'] = array(
    'description' => 'User-configured shipping modes.',
    'fields' => array(
      'mid' => array(
        'description' => 'Mode ID internal identifier.',
        'type' => 'serial',
        'size' => 'small',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'Name for the shipping method',
        'type' => 'varchar',
        'size' => 'normal',
        'length' => 50,
        'not null' => TRUE,
        'default' => '',
      ),
      'cid' => array(
        'description' => 'Container ID from {uc_stamps_containers}',
        'type' => 'int',
        'size' => 'small',
        'unsigned' => TRUE,
      ),
      'accessorials' => array(
        'description' => 'Shipping class and options',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'priority' => array(
        'description' => 'Priority in case multiple modes match',
        'type' => 'int',
        'size' => 'small',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('mid'),
    'indexes' => array(
      'mid' => array('mid'),
    ),
  );

  // Lists of containers usable by each shipping mode.
  $schema['uc_stamps_modes_containers'] = array(
    'description' => 'Containers usable by each shipping mode',
    'fields' => array(
      'mid' => array(
        'description' => 'Mode ID from {uc_stamps_modes}',
        'type' => 'int',
        'size' => 'small',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ),
      'cid' => array(
        'description' => 'Container ID from {uc_stamps_containers}',
        'type' => 'int',
        'size' => 'small',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ),
    ),
    'indexes' => array(
      'mid' => array('mid'),
    ),
  );

  // Per-product Stamps.com shipping customs info.
  // Table is parallel to {node} and {uc_products}.
  $schema['uc_stamps_products'] = array(
    'description' => 'Per-product customs info.',
    'fields' => array(
      'nid' => array(
        'description' => 'The {node}.nid of the product',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'vid' => array(
        'description' => 'The {node}.vid of the product',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'description' => array(
        'description' => 'Short description of the product',
        'type' => 'varchar',
        'length' => 31,
        'not null' => TRUE,
        'default' => '',
      ),
      'tariff_code' => array(
        'description' => 'Harmonized tariff code for the product',
        'type' => 'varchar',
        'length' => 6,
        'not null' => TRUE,
        'default' => '',
      ),
      'origin_country' => array(
        'description' => 'The country code of the product country of origin',
        'type' => 'int',
        'size' => 'small',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('nid', 'vid'),
    'indexes' => array(
      'nvid' => array('nid', 'vid'),
      'vid' => array('vid'),
    ),
  );

  // Per-class Stamps.com shipping customs info.
  // Table is parallel to {uc_product_classes}.
  $schema['uc_stamps_product_classes'] = array(
    'description' => 'Per-product customs info',
    'fields' => array(
      'pcid' => array(
        'description' => 'The node type identifier',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'description' => array(
        'description' => 'Short description of the products in the class',
        'type' => 'varchar',
        'length' => 31,
        'not null' => TRUE,
        'default' => '',
      ),
      'tariff_code' => array(
        'description' => 'Harmonized tariff code for the products in the class',
        'type' => 'varchar',
        'length' => 6,
        'not null' => TRUE,
        'default' => '',
      ),
      'origin_country' => array(
        'description' => 'The country code of the product country of origin',
        'type' => 'int',
        'size' => 'small',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('pcid'),
    'indexes' => array(
      'pcid' => array('pcid'),
    ),
  );

  return $schema;
}

/**
 * Implements hook_uninstall().
 *
 * Remove the non-table data associated with this module.  At the moment,
 * that includes only the Rules conditions for the shipping modes.
 */
function uc_stamps_uninstall() {
  // This can't just delete the rules where module = uc_stamps, because
  // they seem to be re-assigned to the Rules module at uninstall time
  // before this hook implementation
  // is called.  So, find the rules one at a time based on the mode IDs
  // from the {uc_stamps_modes} table.
  $mode_records = db_select('uc_stamps_modes', 'm')
    ->fields('m', array('mid'))
    ->execute();
  $mids = $mode_records->fetchCol();

  $rids = array();
  foreach ($mids as $mid) {
    $condition = rules_config_load('uc_stamps_mode_condition_' . $mid);
    $rids[] = $condition->id;
  }

  // Doing it this way avoids resetting the cache multiple times.
  rules_config_delete($rids);

  // Remove the config variables.
  variable_del('uc_stamps_print_samples');
  variable_del('uc_stamps_default_domestic_mode');
  variable_del('uc_stamps_default_foreign_mode');
  variable_del('uc_stamps_email');
  variable_del('uc_stamps_email_company_in_from');
  variable_del('uc_stamps_email_company_in_subject');
  variable_del('uc_stamps_email_customer');
  variable_del('uc_stamps_email_delivery_notification');
  variable_del('uc_stamps_email_print_notification');
  variable_del('uc_stamps_print_samples');
  variable_del('uc_stamps_return_address_name');
  variable_del('uc_stamps_return_address_selection');
  variable_del('uc_stamps_default_origin_country');
}

/**
 * Add tare weight unit and country of origin codes to stamps.com tables.
 */
function uc_stamps_update_7100(&$sandbox) {
  $ret = array();
  // Update {uc_stamps_containers} table.
  // Rename weight_units to capacity_units field.
  db_change_field('uc_stamps_containers', 'weight_units', 'capacity_units',
    array(
      'description' => 'Units for capacity:  oz, lb, g, or kg',
      'type' => 'varchar',
      'size' => 'normal',
      'length' => 2,
      'not null' => TRUE,
      'default' => 'oz',
    )
  );
 
  // Create tare_units field.
  db_add_field('uc_stamps_containers', 'tare_units',
    array(
      'description' => 'Units for tare weight:  oz, lb, g, or kg',
      'type' => 'varchar',
      'size' => 'normal',
      'length' => 2,
      'not null' => TRUE,
      'default' => 'oz',
    )
  );

  // Copy capacity_units to tare_units.
  db_update('uc_stamps_containers')
    ->expression('tare_units', 'capacity_units')
    ->execute();

  // Update {uc_stamps_products} table.
  // Add origin_country field.
  db_add_field('uc_stamps_products', 'origin_country',
    array(
      'description' => 'The country code of the product country of origin',
      'type' => 'int',
      'size' => 'small',
      'unsigned' => TRUE,
      'not null' => TRUE,
      'default' => 0,
    )
  );

  // Update {uc_stamps_product_classes} table.
  // Add origin_country field.
  db_add_field('uc_stamps_product_classes', 'origin_country',
    array(
      'description' => 'The country code of the product country of origin',
      'type' => 'int',
      'size' => 'small',
      'unsigned' => TRUE,
      'not null' => TRUE,
      'default' => 0,
    )
  );

  return t('Success.');
}
