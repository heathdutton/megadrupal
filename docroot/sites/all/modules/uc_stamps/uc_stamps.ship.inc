<?php

/**
 * @file
 * Stamps.com functions for shipping.
 *
 * These are mainly extensions to the uc_shipping module.
 */

/**
 * Shipment creation callback.
 *
 * Creates a shipment based on the order and package IDs.
 *
 * @param object $order
 *   The order array for the shipment.
 * @param array $package_ids
 *   Array of package ids to shipped.
 *
 * @see uc_stamps_fulfill_order_validate()
 * @see uc_stamps_fulfill_order_submit()
 * @ingroup forms
 */
function uc_stamps_shipment_create($form, &$form_state, $order, $package_ids) {
  // Create a basic shipment, with just the packages, order ID,
  // and shipping_method.
  $shipment = new stdClass();
  $shipment->order_id = $order->order_id;
  $shipment->shipping_method = 'stamps';
  $shipment->packages = array();
  foreach ($package_ids as $id) {
    $package = uc_shipping_package_load($id);
    $shipment->packages[$id] = $package;
  }

  // Generate the standard "Ship Manually" form.
  $form = uc_shipping_shipment_edit($form, $form_state, $order, $shipment);

  // Modify the standard form to get the stamps goodness.
  uc_stamps_shipment_edit_modify($form, $form_state, $order, $shipment);

  return $form;
}

/**
 * Modify the shipment edit form.
 *
 * This takes the standard form generated by uc_shipping_shipment_edit() and
 *  modifies it to have all the USPS / stamps.com goodness.
 *
 * @param object $order
 *   The order object for the shipment.
 * @param object $shipment
 *   The shipment object.
 *
 * @see uc_stamps_shipment_edit_encode()
 * @see uc_stamps_shipment_edit_enqueue()
 * @see uc_shipping_shipment_edit_submit()
 * @see uc_shipping_shipment_edit()
 * @see uc_stamps_shipment_edit_update_package()
 */
function uc_stamps_shipment_edit_modify(&$form, &$form_state, $order = NULL, $shipment = NULL) {
  module_load_include('inc', 'uc_stamps', 'uc_stamps.shared');

  // If user edits a shipment, this gets called via a hook_form_alter(),
  // Which doesn't have the shipment or the order, so load them.
  if (is_null($shipment)) {
    $shipment = uc_shipping_shipment_load($form['sid']['#value']);
    $order = uc_order_load($shipment->order_id);
  }

  // Load the best shipping mode for this order.
  $mode = uc_stamps_best_mode($order);

  // Load the user-configured container types.
  $container_names = uc_stamps_container_names();

  // Hide the e-mail addresses, since they aren't saved.
  $form['origin']['pickup_email']['#type'] = 'hidden';
  $form['destination']['delivery_email']['#type'] = 'hidden';

  // Go through all the packages in the shipment
  // dpm($form['packages'], "\$form['packages']");
  foreach (array_keys($form['packages']) as $id) {
    // Only get the (numeric) package IDs, not other form elements.
    if (is_numeric($id)) {
      $pkg_form =& $form['packages'][$id];
      $pkg_form['#collapsible'] = TRUE;

      // Set up the AJAX.
      $pkg_form['#prefix'] = '<div id="package' . $id . '">';
      $pkg_form['#suffix'] = '</div>';

      if (isset($form_state['values'])) {
        $pkg_values =& $form_state['values']['packages'][$id];
      }

      // Get default info from package if it's already been saved here once.
      $package = uc_shipping_package_load($id);

      if (!empty($form_state['values']['packages'][$id]['pkg_type'])) {
        // In case of AJAX updates, get previous load.
        $default_pkg_type = $form_state['values']['packages'][$id]['pkg_type'];
        $default_container = uc_stamps_container_load($default_pkg_type);
      }
      elseif (!empty($package->pkg_type)) {
        // In case this is editing a saved shipment.
        $default_pkg_type = $package->pkg_type;
        $default_container = uc_stamps_container_load($default_pkg_type);
      }
      // Fail-safe, in case it is a new shipment or if the package
      // has invalid data in it (possibly from another shipping method).
      if (empty($default_container)) {
        $default_container = uc_stamps_best_container($mode, $package);
        $default_pkg_type = $default_container->cid;
      }

      // Get a declared value for the price of the package
      // If it's set in the DB, take that.  Otherwise, add up the prices of
      // the products. uc_shipping_shipment_edit() tries to do this, but
      // always fills in 0.
      if (isset($package->value) && $package->value > 0) {
        $pkg_form['declared_value']['#default_value'] = $package->value;
      }
      else {
        $package_value = 0;
        $pkg_form['declared_value']['#default_value'] = 0;
        foreach ($package->products as $product) {
          $package_value += $product->qty * $product->price;
        }
        $pkg_form['declared_value']['#default_value'] = $package_value;
      }

      // Unfortunately, the uc_shipping_shipment_edit() doesn't fill in
      // box types except for already-saved shipments.
      $pkg_form['pkg_type'] = array(
        '#type'          => 'select',
        '#title'         => t('Package type'),
        '#options'       => uc_stamps_configured_container_types(),
        '#default_value' => $default_pkg_type,
        '#required'      => TRUE,
        '#ajax'          => array(
          'wrapper' => 'package' . $id,
          'callback' => 'uc_stamps_shipment_edit_update_package',
        ),
      );

      // Fill in the container dimensions and make them non-editable
      // Don't take them from the package DB entry.
      $pkg_form['dimensions']['length_display'] = $pkg_form['dimensions']['length'];
      $pkg_form['dimensions']['width_display'] = $pkg_form['dimensions']['width'];
      $pkg_form['dimensions']['height_display'] = $pkg_form['dimensions']['height'];
      $pkg_form['dimensions']['units_display'] = $pkg_form['dimensions']['units'];
      $pkg_form['dimensions']['length_display']['#markup'] = (int) $default_container->length;
      $pkg_form['dimensions']['length_display']['#type'] = 'item';
      $pkg_form['dimensions']['width_display']['#markup'] = (int) $default_container->width;
      $pkg_form['dimensions']['width_display']['#type'] = 'item';
      $pkg_form['dimensions']['height_display']['#markup'] = (int) $default_container->height;
      $pkg_form['dimensions']['height_display']['#type'] = 'item';
      $pkg_form['dimensions']['units_display']['#markup'] = $default_container->length_units;
      $pkg_form['dimensions']['units_display']['#type'] = 'item';
      $pkg_form['dimensions']['length']['#value'] = $default_container->length;
      $pkg_form['dimensions']['length']['#type'] = 'value';
      $pkg_form['dimensions']['width']['#value'] = $default_container->width;
      $pkg_form['dimensions']['width']['#type'] = 'value';
      $pkg_form['dimensions']['height']['#value'] = $default_container->height;
      $pkg_form['dimensions']['height']['#type'] = 'value';
      $pkg_form['dimensions']['units']['#value'] = $default_container->length_units;
      $pkg_form['dimensions']['units']['#type'] = 'value';

      // Fill in the weight, including the package tare weight.
      $pkg_form['weight']['units']['#type'] = 'item';
      $pkg_form['weight']['units']['#markup']
        = $pkg_form['weight']['units']['#default_value'];
      $pkg_form['weight']['weight']['#type'] = 'item';
      $pkg_form['weight']['weight']['#markup']
        = $package->weight +
          uc_weight_conversion($default_container->tare_units, $package->weight_units) *
          $default_container->tare;
    }
  }

  $default_tracking_number = '';
  $default_cost = 0;
  if (isset($shipment->sid)) {
    $default_cost = $shipment->cost;
    $default_tracking_number = $shipment->tracking_number;
  }

  // Put the shipping class and options on the form.
  if (isset($shipment->accessorials)) {
    uc_stamps_services_form($form, $form_state, array('stamps'), $shipment->accessorials);
  }
  else {
    uc_stamps_services_form($form, $form_state, array('stamps'), $mode->accessorials);
  }

  // Hide this.  Just used for storage.
  $form['shipment']['accessorials']['#type'] = 'hidden';

  $form['shipment']['shipping_method'] = array(
    '#type' => 'value',
    '#value' => 'stamps',
  );

  // Put in some default values to make uc_shipping_shipment_edit_submit() happy
  // These three fields aren't actually used for USPS.  The tracking number is
  // per-package, not per-shipment.
  $form['shipment']['transaction_id'] = array(
    '#type'  => 'value',
    '#value' => '',
  );
  $form['shipment']['tracking_number'] = array(
    '#type'  => 'value',
    '#value' => $default_tracking_number,
  );
  $form['shipment']['carrier'] = array(
    '#type'          => 'value',
    '#value'         => 'USPS',
  );
  // This gets filled in later by the postback function.
  // No point in displaying...USPS cost is per-package.
  $form['shipment']['cost'] = array(
    '#type'  => 'value',
    '#value' => $default_cost,
  );

  // Update the buttons at the bottom.
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type'  => 'submit',
    '#value' => t('Save shipment'),
    '#submit' => array(
      'uc_stamps_shipment_edit_encode',
      'uc_shipping_shipment_edit_submit',
    ),
  );
  $form['actions']['enqueue'] = array(
    '#type'  => 'submit',
    '#value' => t('Enqueue shipment for batch'),
    '#submit' => array(
      'uc_stamps_shipment_edit_encode',
      'uc_stamps_shipment_edit_enqueue',
      'uc_shipping_shipment_edit_submit',
    ),
  );
  // Make the uc_stamps_shipment_edit_enqueue() submit function
  // available from the form handling code.
  form_load_include($form_state, 'inc', 'uc_stamps', 'uc_stamps.ship');
}

/**
 * AJAX callback for shipment package changes.
 */
function uc_stamps_shipment_edit_update_package($form, $form_state) {
  $package_id = $form_state['triggering_element']['#parents'][1];
  return $form['packages'][$package_id];
}

/**
 * Callback to encode the shipping options into the accessorials field.
 */
function uc_stamps_shipment_edit_encode($form, &$form_state) {
  uc_stamps_services_form_fill_accessorials($form_state['values']);
}

/**
 * Callback for shipment creation or editing forms.
 *
 * Used when enqueueing a shipment.
 */
function uc_stamps_shipment_edit_enqueue($form, &$form_state) {
  // Just store 'queued' in the tracking number field
  // in the {uc_shipments} table.    It will be
  // "exported" after it's exported and "shipped" or maybe the tracking
  // number of one of the packages after the postback.
  $form_state['values']['tracking_number'] = 'queued';
  foreach ($form_state['values']['packages'] as &$package) {
    if (empty($package['tracking_number'])) {
      $package['tracking_number'] = 'queued';
    }
  }
}

/**
 * Menu callback form to import and export label files.
 *
 * The theme function for this function puts tables of the queued and
 * exported packages on the form.
 *
 * @see theme_uc_stamps_process_form()
 * @see uc_stamps_process_form_export()
 * @see uc_stamps_process_form_postback_validate()
 * @see uc_stamps_menu()
 * @ingroup forms.
 */
function uc_stamps_process_form($form, &$form_state) {
  // File upload form element.
  $form['postback_file'] = array(
    '#title' => t('Postback XML or CSV File'),
    '#type' => 'managed_file',
    '#description' => t('Upload tracking numbers and costs after printing labels.'),
    '#upload_location' => 'temporary://',
    '#upload_validators' => array(
      'file_validate_extensions' => array('xml XML csv CSV'),
    ),
  );

  // Put the buttons at the bottom.
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['export'] = array(
    '#type'  => 'submit',
    '#value' => t('Export to Stamps.com'),
    '#submit' => array('uc_stamps_process_form_export'),
  );
  $form['actions']['postback'] = array(
    '#type'  => 'submit',
    '#value' => t('Post back from Stamps.com'),
    '#submit' => array('uc_stamps_process_form_postback_submit'),
    '#validate' => array('uc_stamps_process_form_postback_validate'),
  );

  // Allow the use of the XML import and export functions.
  form_load_include($form_state, 'inc', 'uc_stamps', 'uc_stamps.xml');

  return $form;
}

/**
 * Theme function to render the uc_stamps_process_form.
 *
 * This displays tables of queued and exported packages above
 * the working form elements.
 *
 * @see uc_stamps_process_form()
 */
function theme_uc_stamps_process_form($variables) {
  // Get the form definition from the $variables array.
  $form = $variables['form'];
  $output = '';
  $queued_table = uc_stamps_packages_table(array('queued'), 'queued');
  $output .= drupal_render($queued_table);
  $exported_table = uc_stamps_packages_table(array('exported'), 'exported');
  $output .= drupal_render($exported_table);
  $output .= drupal_render_children($form);
  return $output;
}

/**
 * Produce a table listing queued or exported packages.
 *
 * The package status is kept in the tracking number field, so
 * it looks for that.  In theory, it could come back with
 * a table from a list of tracking numbers.
 *
 * @param array $statuses
 *   The statuses of packages to search for.  The statuses
 *   should be 'queued' or 'exported' for normal use, and
 *   have a list of the (currently unknown) error statuses
 *   to pick up packages with problems.
 * @param array $type
 *   The type of packages.  Should probably be 'queued',
 *   'exported', or 'failed'.
 *
 * @return array
 *   The table structure.
 *
 * @see theme_uc_stamps_process_form()
 */
function uc_stamps_packages_table($statuses, $type) {
  $header = array(
    t('Package ID'),
    t('Status'),
    t('Name'),
    t('Company'),
    t('Destination'),
    t('Ship date'),
    array('data' => t('Actions'), 'colspan' => 5),
  );

  // Load the matching packages.
  module_load_include('inc', 'uc_stamps', 'uc_stamps.shared');
  $shipments = uc_stamps_load_shipments_by_status($statuses);
  $rows = array();
  foreach ($shipments as $shipment) {
    foreach ($shipment->packages as $package) {
      if (in_array($package->tracking_number, $statuses)) {
        $row = array();
        $row[] = $package->package_id;
        $row[] = check_plain($package->tracking_number);
        $row[] = check_plain($shipment->d_first_name) . ' ' . check_plain($shipment->d_last_name);
        $row[] = check_plain($shipment->d_company);
        $row[] = check_plain($shipment->d_city) . ', ' . uc_get_zone_code($shipment->d_zone);
        $row[] = format_date($shipment->ship_date, 'uc_store');
        $row[] = l(t('view'), 'admin/store/orders/' . $shipment->order_id . '/shipments/' . $shipment->sid . '/view');
        $row[] = l(t('edit'), 'admin/store/orders/' . $shipment->order_id . '/shipments/' . $shipment->sid . '/edit');
        $row[] = l(t('print'), 'admin/store/orders/' . $shipment->order_id . '/shipments/' . $shipment->sid . '/print');
        $row[] = l(t('packing slip'), 'admin/store/orders/' . $shipment->order_id . '/shipments/' . $shipment->sid . '/packing_slip');
        $row[] = l(t('delete'), 'admin/store/orders/' . $shipment->order_id . '/packages/' . $package->package_id . '/delete');
        $rows[] = $row;
      }
    }
  }

  $build['packages'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
    '#empty' => t('No !type packages.', array('!type' => $type)),
    '#caption' => t('!type packages', array('!type' => $type)),
  );

  return $build;
}

/**
 * Form callback to export the stamps.com batch queue.
 *
 * @see uc_stamps_process_form()
 */
function uc_stamps_process_form_export($form, &$form_state) {
  uc_stamps_export_to_browser();
}

/**
 * Form validate callback before importing a postback file.
 *
 * @see uc_stamps_process_form()
 */
function uc_stamps_process_form_postback_validate($form, &$form_state) {
  if (empty($form_state['values']['postback_file'])) {
    form_set_error('postback_file', t('You must upload a file, first.'));
  }
}

/**
 * Form callback to import the stamps.com postback info.
 *
 * @see uc_stamps_process_form()
 */
function uc_stamps_process_form_postback_submit($form, &$form_state) {
  // drupal_set_message("Importing shipment postbacks");
  $file = file_load($form_state['values']['postback_file']);
  if (preg_match('/\.csv/i', $file->uri)) {
    uc_stamps_csv_postback($file);
  }
  else {
    uc_stamps_xml_postback($file);
  }
  file_delete($file);
}
