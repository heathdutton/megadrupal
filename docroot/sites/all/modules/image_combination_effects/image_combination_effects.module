<?php
/**
 * @file
 *   <p>Code for the "Image Combination Effects" module, which provides an
 *   Image API effect that can combine multiple images from the same image
 *   field into a single image that runs horizontally or vertically.</p>
 *   
 *   <p>© 2012 RedBottle Design, LLC. All rights reserved.</p>
 *   
 *   <p>All module code is released under the GNU General Public License.
 *   See COPYRIGHT.txt and LICENSE.txt.</p>
 * 
 * @author Guy Paddock (guy.paddock@redbottledesign.com)
 * @license GNU GPLv2
 */
require_once('image_combination_effects.constants.inc');
require_once('image_combination_effects.effects.inc');

/**
 * Implementation of <code>hook_field_attach_view_alter()</code>.
 */
function image_combination_effects_field_attach_view_alter(&$output, $context) {
  foreach (element_children($output) as $field_name) {
    $entity       = $context['entity'];
    $entity_type  = $context['entity_type'];
    $view_mode    = $context['view_mode'];
    
    if (image_combination_effects_field_has_combination_effect($field_name, $entity, $entity_type, $view_mode)) {
      $field =& $output[$field_name];
    
      foreach ($field['#items'] as $delta => $item) {
        if ($delta != 0) {
          $field[$delta]['#access'] = FALSE;
        }
      }      
    }
  }
}

/**
 * Determines if the specified field in the specified entity is displayed in
 * the specified view mode using an Image API preset that uses a combination
 * effect.
 * 
 * @param  string    $field_name
 *                   The name of the field in question.
 *                   
 * @param  stdClass  $entity
 *                   The entity that contains the field in question.
 * 
 * @param  string    $entity_type
 *                   The type of entity (node, comment, etc) that contains the
 *                   field in question.
 * 
 * @param  string    $view_mode
 *                   The view mode of the entity ("full", "teaser", "default",
 *                   etc).
 * 
 * @return boolean   <code>TRUE</code> if the field in question has combination
 *                   effects applied; <code>FALSE</code>, otherwise.
 */
function image_combination_effects_field_has_combination_effect($field_name, stdClass $entity, $entity_type,
                                                                $view_mode) {
  $result = FALSE;

  $image_style = image_combination_effects_get_field_image_style($field_name, $entity, $entity_type, $view_mode);

  if (!empty($image_style)) {
    foreach ($image_style['effects'] as $effect) {
      // Slideshow backdrops effects must be the last effects
      if ($effect['module'] == IMCOEF_MODULE_NAME) {
        $result = TRUE;
        break;
      }
    }
  }

  return $result;
}

/**
 * <p>Places the specified image on the specified target image (canvas).</p>
 * 
 * <p>Before being placed, the image is first run through the effects of the
 * provided image style and then scaled and cropped to match the size indicated
 * in <code>$target_info</code>.</p>
 * 
 * @param  stdClass  $image
 *                   The image being placed.
 * 
 * @param  stdClass  $canvas
 *                   The destination image. This image will be enlarged and
 *                   positioned as appropriate to accomodate image placement.
 * 
 * @param  array     $target_info
 *                   An array of information about the desired size and
 *                   placement of the current image that is being placed on the
 *                   canvas.
 *                   - "delta": The zero-based index/position of the image
 *                   being placed in the output image.
 *                   - "width": The expected width of each image in the
 *                   output image.
 *                   - "height": The expected height of each image in the
 *                   output image.
 *                   - "orientation": The direction in which images should be
 *                   laid out in the output image, which is one of:
 *                    - IMCOEF_OPTION_HORIZONTAL_LEFT_TO_RIGHT: left-to-right
 *                    - IMCOEF_OPTION_HORIZONTAL_RIGHT_TO_LEFT: right-to-left
 *                    - IMCOEF_OPTION_VERTICAL_TOP_TO_BOTTOM: top-to-bottom
 *                    - IMCOEF_OPTION_VERTICAL_BOTTOM_TO_TOP: bottom-to-top 
 *                   
 * @param  array     $image_style
 *                   The image style that will be applied to the image before
 *                   it is placed on the canvas.
 *                   
 * @return boolean   <code>TRUE</code> if the image was placed successfully;
 *                   <code>FALSE</code>, otherwise.
 */
function image_combination_effects_place_image(stdClass $image, stdClass $canvas, array $target_info,
                                               array $image_style) {
  $result = FALSE;

  _image_combination_effects_calculate_horizontal(
                                        $target_info,
                                        $canvas->info,
                                        $image_offset_x,
                                        $canvas_width,
                                        $canvas_offset_x);
  
  _image_combination_effects_calculate_vertical(
                                        $target_info,
                                        $canvas->info,
                                        $image_offset_y,
                                        $canvas_height,
                                        $canvas_offset_y);
  
  $canvas_size_data = array(
    'exact' => array(
      'width'  => $canvas_width,
      'height' => $canvas_height,
      'xpos'   => $canvas_offset_x,
      'ypos'   => $canvas_offset_y,
    ),

    'RGB' => array(
      // Use black for images that fail to load
      'HEX' => '#000000',
    ),

    'under' => TRUE,
  );

  // Increase the size of the canvas appropriately
  if (canvasactions_definecanvas_effect($canvas, $canvas_size_data)) {
    // Apply the effects of the preset to the image before placement
    image_combination_effects_apply_preset($image, $image_style);

    $target_width  = $target_info[IMCOEF_TARGET_WIDTH];
    $target_height = $target_info[IMCOEF_TARGET_HEIGHT];
    
    // Resize image before placement, if necessary.
    if (($image->info['width'] != $target_width) || ($image->info['height'] != $target_height)) {
      $result = image_scale_and_crop($image, $target_width, $target_height);
    }
    else {
      $result = TRUE;
    }

    if ($result) {
      // Place the image
      $result = image_overlay($canvas, $image, $image_offset_x, $image_offset_y);
    }
  }

  return $result;
}

/**
 * <p>Applies the specified image style to the specified image, modifying it in
 * the process.</p>
 * 
 * <p>Image processing ends when an effect defined by the Image Combination
 * Effects module is encountered in the image style preset, as ICE effects must
 * be placed last in image styles.</p>
 * 
 * @param stdClass  $image
 *                  The image to which the image style will be applied. This
 *                  image is modified directly.
 *                  
 * @param array     $image_style
 *                  The image style to apply to the image..
 */
function image_combination_effects_apply_preset(stdClass $image, array $image_style) {
  foreach ($image_style['effects'] as $effect) {
    // Slideshow backdrops effects must be placed last in the list
    if ($effect['module'] == IMCOEF_MODULE_NAME) {
      break;
    }
    else {
      image_effect_apply($image, $effect);
    }
  }
}

/**
 * Gets the image style, if any, that is associated with the specified field in
 * the specified entity, when viewed in the specified mode.
 * 
 * @param  string    $field_name
 *                   The name of the field in question.
 *                   
 * @param  stdClass  $entity
 *                   The entity that contains the field in question.
 * 
 * @param  string    $entity_type
 *                   The type of entity (node, comment, etc) that contains the
 *                   field in question.
 * 
 * @param  string    $view_mode
 *                   The view mode of the entity ("full", "teaser", "default",
 *                   etc).
 *                   
 * @return array     The fully-loaded image style that is used to render the
 *                   specified field in the specified view mode; or,
 *                   <code>NULL</code> if the field has no associated image
 *                   style preset or the preset cannot be loaded.
 */
function image_combination_effects_get_field_image_style($field_name, stdClass $entity, $entity_type, $view_mode) {
  $image_style      = NULL;
  $image_style_name = NULL;  
  
  $bundle     = $entity->type;
  $field_info = field_info_instance($entity_type, $field_name, $bundle);

  if (!empty($field_info) && isset($field_info['display'])) {
    /* Fall-back to "default" if the specified view mode isn't defined for the
     * field.
     */
    foreach (array($view_mode, 'default') as $current_view_mode) {
      if (isset($field_info['display'][$current_view_mode]) &&
          !empty($field_info['display'][$current_view_mode]['settings'])) {
        $field_settings = $field_info['display'][$current_view_mode]['settings'];

        $image_style_name = $field_settings['image_style'];
        break;
      }
    }
  }
  
  if (!empty($image_style_name)) {
    $image_style = image_style_load($image_style_name);
  }

  return $image_style;
}

/**
 * Internal function for calculating image placement and canvas sizing in the
 * horizontal dimension.
 *
 * @param  array  $target_info
 *                An array of information about the desired size and placement
 *                of the current image that is being placed on the canvas.
 *                - "width": The expected width of each image in the
 *                output image.
 *                - "height": The expected height of each image in the
 *                output image.
 *                - "delta": The zero-based index/position of the image being
 *                placed in the output image.
 *                - "orientation": The direction in which images should be laid
 *                out in the output image, which is one of:
 *                  - IMCOEF_OPTION_HORIZONTAL_LEFT_TO_RIGHT: left-to-right
 *                  - IMCOEF_OPTION_HORIZONTAL_RIGHT_TO_LEFT: right-to-left
 *                  - IMCOEF_OPTION_VERTICAL_TOP_TO_BOTTOM: top-to-bottom
 *                  - IMCOEF_OPTION_VERTICAL_BOTTOM_TO_TOP: bottom-to-top 
 *
 * @param array   $canvas_info
 *                An array of information about the canvas, including its
 *                width and height.
 *
 * @param integer $image_offset_x
 *                A reference to the output variable that will receive the
 *                appropriate horizontal offset for the image being placed.
 *
 * @param integer $canvas_width
 *                A reference to the output variable that will receive the
 *                new width of the canvas.
 *
 * @param integer $canvas_offset_x
 *                A reference to the output variable that will receive the
 *                appropriate horizontal offset for the canvas (after
 *                resizing).
 */
function _image_combination_effects_calculate_horizontal(array $target_info, array $canvas_info, &$image_offset_x,
                                                         &$canvas_width, &$canvas_offset_x) {
  $orientation = $target_info[IMCOEF_TARGET_ORIENTATION];

  $image_offset_x  = 0;      // RTL, TTB, BTT
  $canvas_offset_x = 'left'; // LTR, TTB, BTT

  if (in_array($orientation, array(IMCOEF_OPTION_HORIZONTAL_LEFT_TO_RIGHT, IMCOEF_OPTION_HORIZONTAL_RIGHT_TO_LEFT))) {
    $canvas_width = $canvas_info['width'] + $target_info[IMCOEF_TARGET_WIDTH];

    if ($orientation == IMCOEF_OPTION_HORIZONTAL_LEFT_TO_RIGHT) {
      $image_offset_x = ($target_info[IMCOEF_TARGET_DELTA] + 1) * $target_info[IMCOEF_TARGET_WIDTH];
    }
    else {
      $canvas_offset_x = 'right';
    }
  }
  else {
    // No change to width
    $canvas_width = NULL;
  }
}

/**
 * Internal function for calculating image placement and canvas sizing in the
 * vertical dimension. 
 * 
 * @param  array  $target_info
 *                An array of information about the desired size and placement
 *                of the current image that is being placed on the canvas.
 *                - "delta": The zero-based index/position of the image being
 *                placed in the output image.
 *                - "width": The expected width of each image in the
 *                output image.
 *                - "height": The expected height of each image in the
 *                output image.
 *                - "orientation": The direction in which images should be laid
 *                out in the output image, which is one of:
 *                  - IMCOEF_OPTION_HORIZONTAL_LEFT_TO_RIGHT: left-to-right
 *                  - IMCOEF_OPTION_HORIZONTAL_RIGHT_TO_LEFT: right-to-left
 *                  - IMCOEF_OPTION_VERTICAL_TOP_TO_BOTTOM: top-to-bottom
 *                  - IMCOEF_OPTION_VERTICAL_BOTTOM_TO_TOP: bottom-to-top 
 * 
 * @param array   $canvas_info
 *                An array of information about the canvas, including its
 *                width and height.
 *                 
 * @param integer $image_offset_y
 *                A reference to the output variable that will receive the
 *                appropriate vertical offset for the image being placed.
 * 
 * @param integer $canvas_height
 *                A reference to the output variable that will receive the
 *                new height of the canvas.
 * 
 * @param integer $canvas_offset_y
 *                A reference to the output variable that will receive the
 *                appropriate vertical offset for the canvas (after resizing).
 */
function _image_combination_effects_calculate_vertical(array $target_info, array $canvas_info, &$image_offset_y,
                                                       &$canvas_height, &$canvas_offset_y) {
  $orientation = $target_info[IMCOEF_TARGET_ORIENTATION];

  $image_offset_y  = 0;      // LTR, RTL, BTT
  $canvas_offset_y = 'top';  // LTR, RTL, TTB

  if (in_array($orientation, array(IMCOEF_OPTION_VERTICAL_TOP_TO_BOTTOM, IMCOEF_OPTION_VERTICAL_BOTTOM_TO_TOP))) {
    $canvas_height = $canvas_info['height'] + $target_info[IMCOEF_TARGET_HEIGHT];

    if ($orientation == IMCOEF_OPTION_VERTICAL_TOP_TO_BOTTOM) {
      $image_offset_y = ($target_info[IMCOEF_TARGET_DELTA] + 1) * $target_info[IMCOEF_TARGET_HEIGHT];
    }
    else {
      $canvas_offset_y = 'bottom';
    }
  }
  else {
    // No change to height
    $canvas_height = NULL;
  }
}