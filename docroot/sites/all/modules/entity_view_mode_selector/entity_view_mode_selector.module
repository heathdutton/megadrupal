<?php
/**
 * @file
 * Select a view mode per entity.
 */

// Load include files
$module_path = DRUPAL_ROOT . '/' . drupal_get_path('module', 'entity_view_mode_selector');
require_once $module_path . '/entity_view_mode_selector.node.inc';

/**
 * Implements hook_permission().
 */
function entity_view_mode_selector_permission() {
  return array(
    'select entity view modes' => array(
      'title' => t('Select entity view modes'),
    ),
  );
}

/**
 * Get a list of all enabled view modes for an entity type.
 */
function entity_view_mode_selector_get_view_modes($entity_type, $bundle) {
  $view_modes = array(
    'full' => 'Default',
  );

  // Get entity/bundle info
  $entity_info = entity_get_info($entity_type);
  $bundle_view_modes = field_view_mode_settings($entity_type, $bundle);

  // Get enabled view modes
  foreach ($bundle_view_modes as $key => $value) {
    if ($value['custom_settings']) {
      $view_modes[$key] = $entity_info['view modes'][$key]['label'];
    }
  }

  return $view_modes;
}

/**
 * Implements hook_entity_presave().
 */
function entity_view_mode_selector_entity_presave($entity, $type) {
  // Insert or update the view mode in the database
  if (isset($entity->view_mode)) {
    $ids = entity_extract_ids($type, $entity);
    db_merge('entity_view_mode_selector')
      ->key(array(
        'id' => $ids[0],
        'type' => $type,
      ))
      ->fields(array('view_mode' => $entity->view_mode))
      ->execute();
  }
}

/**
 * Implements hook_entity_load().
 */
function entity_view_mode_selector_entity_load($entities, $type) {
  // Get the view mode from the database and add to entity
  foreach ($entities as $id => $entity) {
    $view_mode = db_query('SELECT view_mode FROM {entity_view_mode_selector} WHERE id = :id AND type = :type', array(
      ':id' => $id,
      ':type' => $type,
    ))->fetchField();

    if (!empty($view_mode)) {
      $entity->view_mode = $view_mode;
    }
  }
}

/**
 * Implements hook_entity_delete().
 */
function entity_view_mode_selector_entity_delete($entity, $type) {
  // Delete the view mode in the database
  if (isset($entity->view_mode)) {
    $ids = entity_extract_ids($type, $entity);
    db_delete('entity_view_mode_selector')
      ->condition('id', $ids[0])
      ->condition('type', $type)
      ->execute();
  }
}

/**
 * Implements hook_entity_view_mode_alter().
 */
function entity_view_mode_selector_entity_view_mode_alter(&$view_mode, $context) {
  // Set the view mode of an entity
  if (isset($context['entity']->view_mode)) {
    $view_mode = $context['entity']->view_mode;
  }
}

