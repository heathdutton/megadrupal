<?php

/**
 * Implements hook_form_alter().
 *
 * Add upsell fields to the add to cart form.
 */
function commerce_upsell_form_alter(&$form, &$form_state, $form_id) {
  if (commerce_form_callback($form_id, $form_state) != "commerce_cart_add_to_cart_form"
    || empty($form_state['default_product'])) {
    return;
  }

  // Not clear if this is really a good idea ...
  // Extract the field that's creating this add to cart, so we
  // can load up some settings.
  // First if there's no entity in context, bail. issue #1964962
  if (!isset($form_state['context']['entity_type']) || !isset($form_state['context']['entity_type'])) {
    return;
  }
  $entity = entity_load($form_state['context']['entity_type'], array($form_state['context']['entity_id']));
  if (!$entity) {
    return;
  }
  $entity = reset($entity);
  $field_name = $form_state['line_item']->data['context']['entity']['product_reference_field_name'];
  $entity_type = $form_state['context']['entity_type'];
  list(, , $bundle) = entity_extract_ids($entity_type, $entity);
  $view_mode = $form_state['context']['display'];
  $settings = field_formatter_settings_get_instance_display_settings($entity_type, $field_name, $bundle, $view_mode);
  if (empty($settings['upsell'])) {
    return;
  }

  // Add the upsells container here, so it works with commerce attribute
  // replacement.
  $form['upsells'] = array(
    '#type' => 'container',
    '#tree' => TRUE,
    '#weight' => 99,
    '#attached' => array(
      'css' => array(
        drupal_get_path('module', 'commerce_upsell') . '/commerce_upsell.theme.css',
      ),
    ),
    '#attributes' => array(
      'class' => array('upsells'),
    ),
  );

  // Check the default product for upsell fields and add them to the form
  $product = $form_state['default_product'];
  $instances = field_info_instances('commerce_product', $product->type);
  $upsells = array();

  foreach ($instances as $name => $instance) {
    // Looking for upsell fields
    if (isset($instance['commerce_upsell_settings']) && $instance['commerce_upsell_settings']['upsell_field']) {
      $wrapper = entity_metadata_wrapper('commerce_product', commerce_product_load($product->product_id));

      // Bail if there are no products
      $value = $wrapper->{$instance['field_name']}->value();
      if (empty($value)) {
        continue;
      }

      $settings = commerce_upsell_field_instance_upsell_settings($instance);
      $field = field_info_field($instance['field_name']);
      $upsells[$instance['field_name']] = array(
        '#type' => 'container',
        '#tree' => TRUE,
        '#attributes' => array(
          'class' => array('upsell', 'upsell-' . $settings['upsell_widget']),
          'id' =>  drupal_html_id(implode('-', array('upsell', drupal_html_class($instance['field_name']), $product->product_id))),
        ),
        '#weight' => isset($instance['widget']['weight']) ? $instance['widget']['weight'] : 0,
      );

      // Add the title if set
      if (!empty($settings['upsell_title'])) {
        $upsells[$instance['field_name']]['title'] = array(
          '#type' => 'markup',
          '#markup' => '<h3>' . check_plain($settings['upsell_title']) . '</h3>',
        );
      }

      // If it's a single value field
      if ($field['cardinality'] == 1) {
        $p = $wrapper->{$instance['field_name']}->value();
        $id = $wrapper->{$instance['field_name']}->product_id->value();
        $price = commerce_product_calculate_sell_price($p);
        $price = commerce_currency_format($price['amount'], $price['currency_code'], $p);
        $upsells[$instance['field_name']]['upsell'] = array(
          '#type' => 'checkbox',
          '#title' => check_plain(token_replace($settings['upsell_pattern'], array('commerce-product' => $p))),
          '#suffix' => ' <span class="commerce-price">' .  $price . '</span>',
        );
        $upsells[$instance['field_name']]['upsell_product'] = array(
          '#type' => 'hidden',
          '#value' => $id,
        );
      }
      else {
        $options = array();
        $prices = array();
        foreach ($wrapper->{$instance['field_name']} as $upsell_product) {
          if ($upsell_product->status->value() == 0) {
            continue;
          }
          $id = $upsell_product->product_id->value();
          $p = $upsell_product->value();
          $price = commerce_product_calculate_sell_price($p);
          $price = commerce_currency_format($price['amount'], $price['currency_code'], $p);
          $options[$id] = token_replace($settings['upsell_pattern'], array('commerce-product' => $p));

          // If it's checkboxes, render the price along with the checkbox
          if ($settings['upsell_widget'] == 'checkboxes') {
            $options[$id] .= ' <span class="commerce-price">' .  $price . '</span>';
          }
          // Otherwise save them to render separately.
          else {
            $prices[$id] = $price;
          }
        }

        // If it's a select box we'll add a separate checkbox to choose the upsell
        if ($settings['upsell_widget'] == 'select') {
          $upsells[$instance['field_name']]['upsell'] = array(
            '#type' => 'checkbox',
            '#attributes' => array('class' => array('commerce-upsell-select-checkbox')),
            '#title' => t('Add this product'),
            '#title_display' => 'none',
          );
        }

        $upsells[$instance['field_name']]['upsell_product'] = array(
          '#type' => $settings['upsell_widget'],
          '#options' => $options,
        );

        // Add the sell price of the add-on for select elements
        if ($settings['upsell_widget'] == 'select') {
          $price_settings = array('commerce_upsell' => array(
            'prices' => array($instance['field_name'] => $prices),
          ));
          $upsells[$instance['field_name']]['#attached']['js'][] = array(
            'data' => $price_settings,
            'type' => 'setting',
          );
          $upsells[$instance['field_name']]['#attached']['js'][] = drupal_get_path('module', 'commerce_upsell') . '/commerce_upsell.js';
          $upsells[$instance['field_name']]['price'] = array(
            '#markup' => '<div class="upsell-' . $instance['field_name'] . '-price commerce-price">' . reset($prices) . '</div>',
          );
        }
      }

      if (!empty($upsells)) {
        $form['upsells'] = array_merge($form['upsells'], $upsells);
      }

      if (!in_array('commerce_upsell_add_to_cart_form_submit', $form['#submit'])) {
        $form['#submit'][] = 'commerce_upsell_add_to_cart_form_submit';
      }
    }
  }

}

/**
 * Implements hook_field_formatter_info_alter().
 */
function commerce_upsell_field_formatter_info_alter(&$info) {
  // add our setting into commerce_add_to_cart_form fields
  if (!isset($info['commerce_cart_add_to_cart_form'])) {
    return;
  }
  $info['commerce_cart_add_to_cart_form']['settings']['upsell'] = FALSE;
}

/**
 * Implements hook_field_formatter_settings_form_alter().
 *
 * Inject setting to disable display of upsells on the add to cart formatter
 * widget. Requires field_formatter_settings module.
 */
function commerce_upsell_field_formatter_settings_form_alter(&$settings_form, array $context) {
  $display = $context['instance']['display'][$context['view_mode']];
  $settings = $display['settings'];

  if ($display['type'] == 'commerce_cart_add_to_cart_form') {
    $settings_form['upsell'] = array(
      '#type' => 'checkbox',
      '#title' => t('Show upsell options.'),
      '#description' => t('Include any products configured as upsell options on the form.'),
      '#default_value' => $settings['upsell'],
    );
  }
}

/**
 * Submit handler callback for the add to cart form.
 */
function commerce_upsell_add_to_cart_form_submit($form, &$form_state) {
  if (empty($form_state['values']['upsells'])) {
    return;
  }

  $add_products = array();

  foreach ($form_state['values']['upsells'] as $which => $upsell) {
    // If for some reason the upsell isn't set, just bail
    if (!isset($upsell['upsell_product'])) {
      continue;
    }
    // If the upsell has options, there is a separate upsell checkbox that
    // indicates the user wants the upsell.
    if (isset($upsell['upsell']) && !$upsell['upsell']) {
      continue;
    }

    // If the product is multi-valued and configured as checkboxes, this will
    // be an array of product IDs => checked.
    if (is_array($upsell['upsell_product'])) {
      foreach ($upsell['upsell_product'] as $product_id => $checked) {
        if ($checked) {
          $add_products[$product_id] = $product_id;
        }
      }
    }
    // Otherwise a single product ID as the value.
    else {
      $add_products[$upsell['upsell_product']] = $upsell['upsell_product'];
    }
  }

  foreach ($add_products as $product_id) {
    $line_item = commerce_cart_product_add_by_id($product_id);
    $nid = commerce_upsell_find_display_for_product($product_id);
    if ($nid) {
      $wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
      $wrapper->commerce_display_path->set('node/' . $nid);
      $wrapper->save();
    }
  }
}

/**
 * Helper function to find the first avaialble product display for a product.
 * @param  $product a loaded product object
 */
function commerce_upsell_find_display_for_product($product_id) {
  // Simplistic, only looks for field_product
  $query = new EntityFieldQuery;

  try {
    $result = $query->entityCondition('entity_type', 'node', '=')
      ->fieldCondition(variable_get('commerce_upsell_product_display_field', 'field_product'), 'product_id', $product_id, '=')
      ->range(0, 1)
      ->execute();
  }
  catch (Exception $e) {
    watchdog('commerce_upsell', 'Exception finding display for product: !message', array('!message' => $e->getMessage(), WATCHDOG_ERROR));
    return FALSE;
  }

  if (!empty($result['node'])) {
    $node = reset($result['node']);
    return $node->nid;
  }
  return FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Based on Commerce Cart's implementation, alter field settings to allow
 * a proudct reference field to be used as an upsell product.
 */
function commerce_upsell_form_field_ui_field_edit_form_alter(&$form, &$form_state) {
  // Extract the instance info from the form.
  $field = $form['#field'];
  $instance = $form['#instance'];
  // Act only on unlocked commerce product reference fields
  if (empty($form['locked']) && $field['type'] == 'commerce_product_reference') {
    // Get the current instance's attribute settings for use as default values.
    $commerce_upsell_settings = commerce_upsell_field_instance_upsell_settings($instance);

    $form['instance']['commerce_upsell_settings'] = array(
      '#type' => 'fieldset',
      '#title' => t('Upsell field settings'),
      '#description' => t('Commerce product reference fields can be used to provide upsell options directly on the add to cart form.'),
      '#weight' => 6,
      '#collapsible' => FALSE,
    );
    $form['instance']['commerce_upsell_settings']['upsell_field'] = array(
      '#type' => 'checkbox',
      '#title' => t('Use this field as an upsell field on add to cart forms.'),
      '#default_value' => $commerce_upsell_settings['upsell_field'],
    );
    $form['instance']['commerce_upsell_settings']['upsell_title'] = array(
      '#type' => 'textfield',
      '#title' => 'Title',
      '#description' => t('A text value to be used as a title or heading for this upsell option.'),
      '#default_value' => $commerce_upsell_settings['upsell_title'],
      '#states' => array(
        'visible' => array(
          ':input[name="instance[commerce_upsell_settings][upsell_field]"]' => array('checked' => TRUE),
        ),
      ),
    );
    $form['instance']['commerce_upsell_settings']['upsell_widget'] = array(
      '#type' => 'radios',
      '#title' => t('Upsell selection widget'),
      '#description' => t('The type of element used to present the upsell option on an Add to Cart form.'),
      '#options' => array(
        'select' => t('Select list (user selects single product from options)'),
        'checkboxes' => t('Checkboxes (user can select multiple products)'),
      ),
      '#default_value' => $commerce_upsell_settings['upsell_widget'],
      '#states' => array(
        'visible' => array(
          ':input[name="instance[commerce_upsell_settings][upsell_field]"]' => array('checked' => TRUE),
        ),
        'invisible' => array(
          ':input[name="field[cardinality]"]' => array('value' => '1'),
        ),
      ),
    );
    $form['instance']['commerce_upsell_settings']['upsell_pattern'] = array(
      '#type' => 'textfield',
      '#title' => 'Product title pattern',
      '#description' => t('Enter a pattern that will be used to create the text for each product option.'),
      '#default_value' => $commerce_upsell_settings['upsell_pattern'],
      '#states' => array(
        'visible' => array(
          ':input[name="instance[commerce_upsell_settings][upsell_field]"]' => array('checked' => TRUE),
        ),
      ),
    );
    $form['instance']['commerce_upsell_settings']['token_help'] = array(
      '#type' => 'fieldset',
      '#title' => 'Available tokens',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#states' => array(
        'visible' => array(
          ':input[name="instance[commerce_upsell_settings][upsell_field]"]' => array('checked' => TRUE),
        ),
      ),
    );
    $form['instance']['commerce_upsell_settings']['token_help']['tokens'] = array(
      '#theme' => 'token_tree',
      '#token_types' => array('commerce-product'),
      '#global_types' => TRUE,
      '#click_insert' => TRUE,
    );
  }
}

/**
 * Returns an array of upsell settings for a field instance.
 *
 * @param $instance
 *   The info array of the field instance whose attribute settings should be
 *   retrieved.
 *
 * @return
 *   An array of upsell settings including:
 *   - upsell_field: boolean indicating whether or not the instance should
 *     be used as an upsell field on the Add to Cart form; defaults
 *     to FALSE
 *   - upsell_widget: string indicating the type of form element to use on
 *     the Add to Cart form for customers to select the attribute option;
 *     defaults to 'select', may also be 'checkboxes'
 */
function commerce_upsell_field_instance_upsell_settings($instance) {
  if (empty($instance['commerce_upsell_settings']) || !is_array($instance['commerce_upsell_settings'])) {
    $commerce_upsell_settings = array();
  }
  else {
    $commerce_upsell_settings = $instance['commerce_upsell_settings'];
  }

  // Supply default values for the cart settings pertaining here to
  // product attribute fields.
  $commerce_upsell_settings += array(
    'upsell_field' => FALSE,
    'upsell_title' => '',
    'upsell_widget' => 'select',
    'upsell_pattern' => '[commerce-product:title]',
  );

  return $commerce_upsell_settings;
}
