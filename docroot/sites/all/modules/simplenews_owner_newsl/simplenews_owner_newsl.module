<?php

/**
 * @file
 * Generates the iframe code for the remote registration on Simplenews.
 *
 * Date: Tue Dec 03 17:51:04 CET 2013
 * File: simplenews_owner_newsl.module
 * Author: Callegari Stefano
 */

/**
 * Implements hook_help().
 *
 * SC Tue Dec 03 19:14:29 CET 2013 stefano.
 */
function simplenews_owner_newsl_help($path, $arg) {
  $help = "";

  switch ($path) {
    case 'admin/help#simplenews_owner_newsl':
      $help = "<p>" . t('Simplenews Owner Newsl adds new permissions to Simplenews to have more admins with own newsletters.') . "</p>";
      break;
  }

  return $help;
}

/**
 * Implements hook_permission().
 *
 * SC Tue Dec 03 19:17:20 CET 2013 stefano.
 */
function simplenews_owner_newsl_permission() {
  return array(
    'administer own newsletters' => array(
      'title' => t('Administer own newsletters')),
    'administer own simplenews subscriptions' => array(
      'title' => t('Administer own simplenews subscriptions')),
    // New permission.
    //
    // SC 26/mar/2014 01:50:08 stefano.
    'administer own newsletters by role' => array(
      'title' => t('Administer own newsletters by role')),
    'administer own simplenews subscriptions by role' => array(
      'title' => t('Administer own simplenews subscriptions by role')),
    // New permission.
    //
    // SC 28/gen/2014 17:34:23 stefano.
    'administer newsletters owner' => array(
      'title' => t('Administer newsletter owner')));
}

/**
 * Implements hook_menu_alter().
 *
 * SC Tue Dec 03 19:20:45 CET 2013 stefano.
 */
function simplenews_owner_newsl_menu_alter(&$items) {
  $items['admin/content/simplenews']['access arguments'][] = 'administer own newsletters';
  $items['admin/content/simplenews']['access arguments'][] = 'administer own newsletters by role';
  $items['admin/content/simplenews']['access callback'] = '_simplenews_owner_newsl_user_access';
  $items['admin/config/services/simplenews']['access arguments'][] = 'administer own newsletters';
  $items['admin/config/services/simplenews']['access arguments'][] = 'administer own newsletters by role';
  $items['admin/config/services/simplenews']['access callback'] = '_simplenews_owner_newsl_user_access';
  $items['admin/config/services/simplenews/categories/%simplenews_category/edit']['access arguments'][] = 'administer own newsletters';
  $items['admin/config/services/simplenews/categories/%simplenews_category/edit']['access arguments'][] = 'administer own newsletters by role';
  $items['admin/config/services/simplenews/categories/%simplenews_category/edit']['access callback'] = '_simplenews_owner_newsl_user_access';
  $items['admin/config/services/simplenews/categories/%simplenews_category/delete']['access arguments'][] = 'administer own newsletters';
  $items['admin/config/services/simplenews/categories/%simplenews_category/delete']['access arguments'][] = 'administer own newsletters by role';
  $items['admin/config/services/simplenews/categories/%simplenews_category/delete']['access callback'] = '_simplenews_owner_newsl_user_access';
  $items['admin/config/services/simplenews/add']['access arguments'][] = 'administer own newsletters';
  $items['admin/config/services/simplenews/add']['access arguments'][] = 'administer own newsletters by role';
  $items['admin/config/services/simplenews/add']['access callback'] = '_simplenews_owner_newsl_user_access';

  $items['admin/content/simplenews/subscriptions/delete']['access arguments'][] = 'administer own simplenews subscriptions';
  $items['admin/content/simplenews/subscriptions/delete']['access arguments'][] = 'administer own simplenews subscriptions by role';
  $items['admin/content/simplenews/subscriptions/delete']['access callback'] = '_simplenews_owner_newsl_user_access';
  $items['admin/people/simplenews']['access arguments'][] = 'administer own simplenews subscriptions';
  $items['admin/people/simplenews']['access arguments'][] = 'administer own simplenews subscriptions by role';
  $items['admin/people/simplenews']['access callback'] = '_simplenews_owner_newsl_user_access';
  $items['admin/people/simplenews/users/edit/%']['access arguments'][] = 'administer own simplenews subscriptions';
  $items['admin/people/simplenews/users/edit/%']['access arguments'][] = 'administer own simplenews subscriptions by role';
  $items['admin/people/simplenews/users/edit/%']['access callback'] = '_simplenews_owner_newsl_user_access';
  $items['admin/people/simplenews/import']['access arguments'][] = 'administer own simplenews subscriptions';
  $items['admin/people/simplenews/import']['access arguments'][] = 'administer own simplenews subscriptions by role';
  $items['admin/people/simplenews/import']['access callback'] = '_simplenews_owner_newsl_user_access';
  $items['admin/people/simplenews/unsubscribe']['access arguments'][] = 'administer own simplenews subscriptions';
  $items['admin/people/simplenews/unsubscribe']['access arguments'][] = 'administer own simplenews subscriptions by role';
  $items['admin/people/simplenews/unsubscribe']['access callback'] = '_simplenews_owner_newsl_user_access';
  $items['admin/people/simplenews/export']['access arguments'][] = 'administer own simplenews subscriptions';
  $items['admin/people/simplenews/export']['access arguments'][] = 'administer own simplenews subscriptions by role';
  $items['admin/people/simplenews/export']['access callback'] = '_simplenews_owner_newsl_user_access';

  $items['node/%node/simplenews']['access arguments'][] = 'administer own newsletters';
  $items['node/%node/simplenews']['access arguments'][] = 'administer own newsletters by role';
  $items['node/%node/simplenews']['access callback'] = '_simplenews_owner_newsl_user_access_node';
}

/**
 * Implements hook_menu().
 *
 * SC Fri Dec 06 01:12:37 CET 2013 stefano.
 */
function simplenews_owner_newsl_menu() {
  $items = array();

  $items['s-o-n_content'] = array(
    'title' => 'Content',
    'page callback' => '_simplenews_owner_newsl_menu_callback',
    'page arguments' => array('admin/content/simplenews'),
    'access callback' => '_simplenews_owner_newsl_user_access',
    'access arguments' => array(
      'administer own newsletters',
      'administer own newsletters by role'),
    'menu_name' => 'simplenews-owner-newsl');
  $items['s-o-n_config'] = array(
    'title' => 'Config',
    'page callback' => '_simplenews_owner_newsl_menu_callback',
    'page arguments' => array('admin/config/services/simplenews'),
    'access callback' => '_simplenews_owner_newsl_user_access',
    'access arguments' => array(
      'administer own newsletters',
      'administer own newsletters by role'),
    'menu_name' => 'simplenews-owner-newsl');
  $items['s-o-n_people'] = array(
    'title' => 'People',
    'page callback' => '_simplenews_owner_newsl_menu_callback',
    'page arguments' => array('admin/people/simplenews'),
    'access callback' => '_simplenews_owner_newsl_user_access',
    'access arguments' => array(
      'administer own simplenews subscriptions',
      'administer own simplenews subscriptions by role'),
    'menu_name' => 'simplenews-owner-newsl');

  return $items;
}

/**
 * Menu callback.
 *
 * SC Fri Dec 06 01:15:42 CET 2013 stefano.
 */
function _simplenews_owner_newsl_menu_callback($goto) {
  drupal_goto($goto);
}

/**
 * Implements hook_form_alter().
 *
 * SC Tue Dec 03 23:57:23 CET 2013 stefano.
 */
function simplenews_owner_newsl_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  if ($user->uid != 1) {
    if (_simplenews_owner_newsl_user_access('administer own newsletters', 'administer own newsletters by role')) {
      switch ($form_id) {
        case 'simplenews_admin_newsletter_issues':
          // Added innerJoin on simplenews_owner_newsl and where clause on uid.
          //
          // See simplenews_admin_issues().
          //
          // SC Wed Dec 04 18:57:57 CET 2013 stefano.
          $header = array(
            'title' => array('data' => t('Title'), 'field' => 'n.title'),
            'category' => array(
              'data' => t('Newsletter category'),
              'field' => 'sc.name'),
            'created' => array(
              'data' => t('Created'),
              'field' => 'n.created',
              'sort' => 'desc'),
            'published' => array('data' => t('Published')),
            'sent' => array('data' => t('Sent')),
            'subscribers' => array('data' => t('Subscribers')),
            'operations' => array('data' => t('Operations')));

          $query = db_select('node', 'n')->extend('PagerDefault')->extend('TableSort');
          simplenews_build_issue_filter_query($query);
          $query->innerJoin('simplenews_newsletter', 'sn', 'n.nid = sn.nid');
          $query->leftJoin('simplenews_category', 'sc', 'sn.tid = sc.tid');
          $query->leftJoin('taxonomy_term_data', 't', 'sc.tid = t.tid');
          // User and/or role.
          //
          // SC 18/lug/2014 12:52:38 stefano.
          $query->innerJoin('simplenews_owner_newsl', 'o', 'sc.tid = o.tid');
          $query->where(_simplenews_owner_newsl_owner_tid_where('o'));

          $query->fields('n', array('nid', 'title', 'created', 'status'))
            ->fields('sn', array('tid'))
            ->fields('t', array('name'));
          $query->addField('sn', 'status', 'sent_status');

          $options = array();

          module_load_include('inc', 'simplenews', 'includes/simplenews.mail');
          foreach ($query->limit(30)->orderByHeader($header)->execute() as $issue) {
            $categories = simplenews_category_list();
            $subscriber_count = simplenews_count_subscriptions($issue->tid);
            $pending_count = simplenews_count_spool(array('nid' => $issue->nid));
            $send_status = $issue->sent_status == SIMPLENEWS_STATUS_SEND_PENDING ? $subscriber_count - $pending_count : theme('simplenews_status', array(
              'source' => 'sent',
              'status' => $issue->sent_status));

            $options[$issue->nid] = array(
              'title' => l($issue->title, 'node/' . $issue->nid),
              'category' => $issue->tid && isset($categories[$issue->tid]) ? $categories[$issue->tid] : t('- Unassigned -'),
              'created' => format_date($issue->created, 'small'),
              'published' => theme('simplenews_status', array(
                'source' => 'published',
                'status' => $issue->status)),
              'sent' => $send_status,
              'subscribers' => $subscriber_count,
              'operations' => l(t('edit'), 'node/' . $issue->nid . (user_access('administer own newsletters by role') ? '/simplenews' : '/edit'), array(
                'query' => drupal_get_destination())));
          }

          $form['admin']['issues']['#options'] = $options;
          $form['filter']['filters']['category']['#options'] = array_merge(array(
            'all' => t('All newsletters')), _simplenews_owner_newsl_my_categories_filter());

          // Added pager.
          //
          // As form_alter, this isn't set by original form?
          // It needs array('element' => 1) because conficts with other pager
          //
          // SC 10/ott/2014 12:42:20 stefano.
          unset($form['admin']['pager']['#theme']);
          $form['admin']['pager']['#markup'] = theme('pager', array('element' => 1));

          // Removes the last sent that's a general value and not for a user
          // specific.
          //
          // SC Fri Dec 06 10:31:26 CET 2013 stefano.
          unset($form['admin']['last_sent']);
          break;

        case 'simplenews_admin_categories':
          _simplenews_owner_newsl_options($form);
          break;

        case 'simplenews_admin_category_form':
          $form['#submit'][] = '_simplenews_owner_newsl_add_submit';
          break;
      }
    }
    if (_simplenews_owner_newsl_user_access('administer own newsletters', 'administer own newsletters by role')) {
      switch ($form_id) {
        case 'simplenews_admin_subscription':
          // Added innerJoin on simplenews_owner_newsl and where clause on uid.
          //
          // See simplenews_subscription_list_form().
          //
          // SC Wed Dec 04 23:55:25 CET 2013 stefano.
          $header = array(
            'mail' => array(
              'data' => t('Email'),
              'field' => 'sn.mail',
              'sort' => 'asc'),
            'username' => array('data' => t('Username'), 'field' => 'u.name'),
            'status' => array('data' => t('Status'), 'field' => 'sn.activated'),
            'language' => array(
              'data' => t('Language'),
              'field' => 'sn.language'),
            'operations' => array('data' => t('Operations')));

          $query = db_select('simplenews_subscriber', 'sn')->extend('PagerDefault')->extend('TableSort');
          simplenews_build_subscription_filter_query($query);
          $query->leftJoin('users', 'u', 'sn.uid = u.uid');
          $query->innerJoin('simplenews_subscription', 'su', 'sn.snid = su.snid');
          $query->condition('su.status', SIMPLENEWS_SUBSCRIPTION_STATUS_SUBSCRIBED);

          $query->innerJoin('simplenews_owner_newsl', 'o', 'su.tid = o.tid');
          $query->where(_simplenews_owner_newsl_owner_tid_where('o'));

          $query->addField('u', 'name', 'name');
          $query->fields('sn', array(
            'snid',
            'activated',
            'mail',
            'uid',
            'language'));

          $options = array();
          $destination = drupal_get_destination();

          foreach ($query->limit(30)->orderByHeader($header)->execute() as $subscriber) {
            $options[$subscriber->snid] = array(
              'mail' => check_plain($subscriber->mail),
              'username' => isset($subscriber->uid) ? l($subscriber->name, 'user/' . $subscriber->uid) : check_plain($subscriber->name),
              'status' => theme('simplenews_status', array(
                'source' => 'activated',
                'status' => $subscriber->activated)),
              'language' => check_plain($subscriber->language),
              'operations' => l(t('edit'), 'admin/people/simplenews/users/edit/' . $subscriber->snid, array(), $destination));
          }

          $form['admin']['subscribers']['#options'] = $options;

          // Added pager.
          //
          // As form_alter, this isn't set by original form?
          // It needs array('element' => 1) because conficts with other pager
          //
          // SC 10/ott/2014 12:42:20 stefano.
          $form['admin']['pager']['#markup'] = theme('pager', array('element' => 1));

          $form['filter']['filters']['list']['#options'] = array_merge(array(
            'all' => t('All newsletters')), _simplenews_owner_newsl_my_categories_filter());
          break;

        case 'simplenews_subscriptions_admin_form':
          _simplenews_owner_newsl_options($form['subscriptions']['newsletters']['#options']);
          break;

        case 'simplenews_subscription_list_add':
        case 'simplenews_subscription_list_remove':
          _simplenews_owner_newsl_options($form['newsletters']);
          break;

        case 'simplenews_subscription_list_export':
          $form['newsletters']['#options'] = _simplenews_owner_newsl_my_category_list();
          break;
      }
    }

    if (user_access('edit own simplenews content') || user_access('create simplenews content')) {
      switch ($form_id) {
        case 'simplenews_node_form':
          _simplenews_owner_newsl_options($form['field_simplenews_term'][$form['field_simplenews_term']['#language']]['#options']);
          break;
      }
    }
  }

  // Assign the newsletter owner.
  //
  // SC 28/gen/2014 17:31:40 stefano.
  if (($user->uid == 1 || user_access('administer newsletters owner')) && $form_id == 'simplenews_admin_category_form') {
    $form['simplenews_owner_newsl'] = array(
      '#type' => 'fieldset',
      '#title' => t('Owner'),
      '#collapsible' => FALSE,
      '#weight' => 2);

    $owner_select = _simplenews_owner_newsl_owner_select();

    $form['simplenews_owner_newsl']['newsl_owner'] = array(
      '#type' => 'select',
      '#size' => 4,
      '#title' => t('The newsletter owner'),
      '#description' => t('Select the user who will be the owner of this newsletter. The user must have the permissions. <b>Here you change only the newsletter</b>.'),
      '#options' => $owner_select,
      '#required' => FALSE,
      '#default_value' => _simplenews_owner_newsl_owner_tid($form['tid']['#value']));
    $form['simplenews_owner_newsl']['node_owner'] = array(
      '#type' => 'checkbox',
      '#title' => t('The nodes owner'),
      '#description' => t('Checks if the user who will be the owner of this newsletter, it will be the owner of the old nodes too. <b>The user must have the permissions</b>.'),
      '#required' => FALSE,
      '#default_value' => 0);

    $owner_role_select = _simplenews_owner_newsl_owner_role_select();

    $form['simplenews_owner_newsl']['newsl_owner_role'] = array(
      '#type' => 'select',
      '#size' => 4,
      '#title' => t('The newsletter owner role'),
      '#description' => t("Select the roles who will be able to manage this newsletter. The role must have the permissions. <b>The newsletter's owner still remains</b>."),
      '#options' => $owner_role_select,
      '#required' => FALSE,
      '#multiple' => TRUE,
      '#default_value' => _simplenews_owner_newsl_owner_role_tid($form['tid']['#value']));
    $form['#submit'][] = '_simplenews_owner_newsl_admin_submit';
  }
}

/**
 * Adds where rules from user permissions.
 *
 * SC 22/lug/2014 10:11:01 stefano
 *
 * @param string $as_table
 *        the alias of simplenews_owner_newsl.
 *
 * @return string the where.
 */
function _simplenews_owner_newsl_owner_tid_where($as_table) {
  global $user;
  $querywhere = "0";
  if (user_access('administer own newsletters')) {
    $querywhere .= " OR " . $as_table . ".uid = " . check_plain($user->uid);
  }
  if (user_access('administer own newsletters by role')) {
    foreach ($user->roles as $key => $value) {
      $querywhere .= " OR " . check_plain($key) . " REGEXP CONCAT('^('," . $as_table . ".rids,')$')";
    }
  }
  return $querywhere;
}

/**
 * Callback user_access.
 *
 * SC Wed Dec 04 01:14:00 CET 2013 stefano.
 *
 * @return bool if user has at least 1 permission
 */
function _simplenews_owner_newsl_user_access() {
  $foo = func_get_args();
  foreach ($foo as $perm) {
    if (is_array($perm)) {
      $auth = FALSE;
      foreach ($perm as $perm2) {
        $auth = $auth || _simplenews_owner_newsl_user_access($perm2);
      }
      return $auth;
    }
    elseif (!is_object($perm) && user_access(check_plain($perm))) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Callback user_access for node.
 *
 * SC 23/lug/2014 12:06:14 stefano
 */
function _simplenews_owner_newsl_user_access_node() {
  $foo = func_get_args();
  if (is_object($foo[0]) && simplenews_check_node_types($foo[0]->type)) {
    unset($foo[0]);
    return _simplenews_owner_newsl_user_access($foo);
  }
  return FALSE;
}

/**
 * The categories (newsletter) owned by user.
 *
 * SC Wed Dec 04 10:30:41 CET 2013 stefano.
 *
 * @return array the tids from uid
 */
function _simplenews_owner_newsl_my_categories() {
  global $user;

  $query = db_select('{simplenews_owner_newsl}', 'o');
  $query->where(_simplenews_owner_newsl_owner_tid_where('o'));
  $query->fields('o', array('tid'));
  $result = $query->execute();

  return $result;
}

/**
 * An array with values formatted for the options into selects like filter.
 *
 * SC Wed Dec 04 11:11:41 CET 2013 stefano.
 *
 * @return array the tids
 */
function _simplenews_owner_newsl_my_categories_filter() {
  $result = _simplenews_owner_newsl_my_categories();
  $categories = simplenews_categories_load_multiple();

  $foo = array();
  while ($row = $result->fetchObject()) {
    $foo["tid-" . $row->tid] = check_plain(_simplenews_newsletter_name($categories[$row->tid]));
  }

  return $foo;
}

/**
 * An array with tids.
 *
 * SC Wed Dec 04 11:14:38 CET 2013 stefano.
 *
 * @return array the tids
 */
function _simplenews_owner_newsl_my_categories_tid() {
  $result = _simplenews_owner_newsl_my_categories();

  $foo = array();
  while ($row = $result->fetchObject()) {
    $foo[] = $row->tid;
  }

  return $foo;
}

/**
 * Form submit.
 *
 * SC Wed Dec 04 16:54:39 CET 2013 stefano.
 *
 * @see simplenews_owner_newsl_form_alter()
 */
function _simplenews_owner_newsl_add_submit($form, &$form_state) {
  global $user;

  if (!in_array($form_state['values']['tid'], _simplenews_owner_newsl_my_categories_tid())) {
    $object = array('tid' => $form_state['values']['tid'], 'uid' => $user->uid);

    drupal_write_record('simplenews_owner_newsl', $object, array());
  }
}

/**
 * Newsletter list made for option/select.
 *
 * SC Thu Dec 05 01:52:45 CET 2013 stefano.
 *
 * @see simplenews_category_list()
 *
 * @return array list of newsletter
 */
function _simplenews_owner_newsl_my_category_list() {
  $categories = simplenews_categories_load_multiple();
  $foo = _simplenews_owner_newsl_my_categories_tid();
  $cats = array();
  foreach ($categories as $key => $category) {
    if (!in_array($key, $foo)) {
      continue;
    }
    $cats[$key] = check_plain(_simplenews_newsletter_name($category));
  }
  return $cats;
}

/**
 * Cleans the option values for own newsletters.
 *
 * SC Thu Dec 05 15:16:36 CET 2013 stefano.
 *
 * @param array $form
 *        the original options
 */
function _simplenews_owner_newsl_options(&$form) {
  $foo = _simplenews_owner_newsl_my_categories_tid();
  foreach ($form as $key => $value) {
    if (is_int($key) && !in_array($key, $foo)) {
      unset($form[$key]);
    }
  }
}

/**
 * Form submit.
 *
 * SC 28/gen/2014 18:04:27 stefano.
 */
function _simplenews_owner_newsl_admin_submit($form, &$form_state) {
  $owner_old = $form['simplenews_owner_newsl']['newsl_owner']['#default_value'];
  $owner_new = $form_state['values']['newsl_owner'];
  $owner_role_old = implode('|', $form['simplenews_owner_newsl']['newsl_owner_role']['#default_value']);
  $owner_role_new = implode('|', $form_state['values']['newsl_owner_role']);
  $tid = $form_state['values']['tid'];

  if ($owner_new != $owner_old) {
    $object = array('uid' => $owner_new);

    if ($owner_old) {
      $select = db_update('{simplenews_owner_newsl}')->fields($object);
      $where = $select->condition('tid', $tid);
      $where->execute();
    }
    else {
      db_insert('{simplenews_owner_newsl}')->fields(array(
        'uid' => $owner_new,
        'tid' => $tid))->execute();
    }

    // Change node too.
    //
    // SC 29/gen/2014 17:53:27 stefano.
    if ($form_state['values']['node_owner']) {
      // Return the nids from tid.
      //
      // SC 29/gen/2014 19:02:59 stefano.
      $query_nid = db_select('{simplenews_newsletter}', 's');
      $query_nid->fields('s', array('nid'));
      $query_nid->condition('s.tid', $tid);

      if ($query_nid->countQuery()->execute()) {
        $select = db_update('{node}')->fields($object);
        $where = $select->condition('nid', $query_nid, 'IN');
        $where->execute();
      }
    }
  }

  // Adds roles
  //
  // SC 08/apr/2014 15:42:53 stefano.
  if ($owner_role_new != $owner_role_old) {
    $foo_update = 0;
    if (!$owner_new) {
      $query_son = db_select('{simplenews_owner_newsl}', 's');
      $query_son->fields('s', array('rids'));
      $query_son->condition('s.tid', $tid);

      $foo_update = $query_son->countQuery()->execute();
    }
    else {
      $foo_update = 1;
    }

    if ($foo_update) {
      $result = db_update('{simplenews_owner_newsl}')->fields(array(
        'rids' => $owner_role_new))->condition('tid', $tid)->execute();
    }
    else {
      db_insert('{simplenews_owner_newsl}')->fields(array(
        'rids' => $owner_role_new,
        'tid' => $tid))->execute();
    }
  }
}

/**
 * Form select user.
 *
 * SC 28/gen/2014 18:14:14 stefano.
 *
 * @return array the select list
 */
function _simplenews_owner_newsl_owner_select() {
  $result = db_query('SELECT u.uid, u.name FROM {users} u LEFT JOIN {users_roles} r ON (u.uid = r.uid) LEFT JOIN {role_permission} p ON (r.rid = p.rid) WHERE p.module = :mod AND p.permission = :perm', array(
    ':mod' => "simplenews_owner_newsl",
    ':perm' => "administer own newsletters"));

  $foo = array();
  foreach ($result as $record) {
    $foo[$record->uid] = $record->name;
  }

  return $foo;
}

/**
 * Form select role.
 *
 * SC 26/mar/2014 01:47:00 stefano
 *
 * @return array the select list
 */
function _simplenews_owner_newsl_owner_role_select() {
  $result = db_query('SELECT r.rid, r.name FROM {role} r LEFT JOIN {role_permission} p ON (r.rid = p.rid) WHERE p.module = :mod AND p.permission = :perm', array(
    ':mod' => "simplenews_owner_newsl",
    ':perm' => "administer own newsletters by role"));

  $foo = array();
  foreach ($result as $record) {
    $foo[$record->rid] = $record->name;
  }

  return $foo;
}

/**
 * The current newsletter owner.
 *
 * SC 29/gen/2014 12:52:23 stefano.
 *
 * @param int $tid
 *        the newsl id
 *
 * @return int the user id
 */
function _simplenews_owner_newsl_owner_tid($tid) {
  $result = db_query('SELECT uid FROM {simplenews_owner_newsl} WHERE tid = :tid', array(
    ':tid' => $tid));

  $foo = $result->fetchObject();

  if ($foo) {
    return $foo->uid ? $foo->uid : 1;
  }
  else {
    return NULL;
  }
}

/**
 * The current newsletter roles owner.
 *
 * SC 26/mar/2014 01:35:18 stefano.
 *
 * @param int $tid
 *        the newsl id
 *
 * @return array the list of roles
 *
 */
function _simplenews_owner_newsl_owner_role_tid($tid) {
  $result = db_query('SELECT rids FROM {simplenews_owner_newsl} WHERE tid = :tid', array(
    ':tid' => $tid));

  $foo = $result->fetchObject();

  return $foo ? explode('|', $foo->rids) : array();
}
