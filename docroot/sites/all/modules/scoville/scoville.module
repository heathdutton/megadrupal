<?php

/**
 * @file
 * Calculates "hotness" for nodes.
 */

/**
 * Implements hook_help().
 */
function scoville_help($path, $arg) {
  if ($path === 'admin/config/system/statistics/scoville') {
    return '<p>' . t('This form allows you to configure how Scoville calculates hotness scores for nodes. For more information on how scores are calculated and how these settings affect the calculation, please see <a href="http://drupal.org/node/1804274">Scoville&rsquo;s online documentation page</a>.') . '</p><p>' . t('Scoville must be enabled on a per-content-type basis. To enable Scoville for a content type&rsquo;s nodes, <a href="!ctedit">edit the content type</a>, and check the &ldquo;Track hotness statistics&rdquo; box.', array('!ctedit' => url('admin/structure/types'))) . '</p>';
  }
}

/**
 * Implements hook_menu().
 */
function scoville_menu() {
  return array(
    // Make the core statistics module settings form a default local task so
    // that we can add our form as a non-default local task.
    'admin/config/system/statistics/statistics' => array(
      'title' => 'Statistics',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => 0,
    ),
    'admin/config/system/statistics/scoville' => array(
      'title' => 'Scoville',
      'description' => 'Alter how Scoville calculates node hotness',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('scoville_settings_form'),
      'access arguments' => array('administer statistics'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 10,
    ),
  );
}

/**
 * Implements hook_cron().
 */
function scoville_cron() {
  scoville_run();
}

/**
 * Recalculate hotness of nodes.
 *
 * @return
 *   FALSE if the run failed; otherwise, an array with some statistics about
 *   the run, keyed as follows;
 *   - inserted: The number of nodes having data tracked by Scoville for the
 *     first time.
 *   - cooled: The number of nodes whose scores were cooled (so not (yet) zero).
 *   - heated: The number of nodes whose scores were increased.
 *   - zeroed: The number of nodes whose scores fell below the cold point and
 *     were set to zero.
 */
function scoville_run() {
  $run_stats = array('heated' => 0, 'inserted' => 0);
  $enabled_types = variable_get('scoville_types', array());
  // Bail out if there's no enabeld types currently
  if (!$enabled_types) {
      watchdog('Scoville', t('Scoville run aborted since it is not configured to operate on any content types.'), array(), WATCHDOG_WARNING);
    return FALSE;
  }
  // Determine the number of hours since last run
  $last_run = variable_get('scoville_last_run', 0);
  $hours_since = (REQUEST_TIME - $last_run) / 3600;
  $multiplier = pow(variable_get('scoville_cool_rate', .7), $hours_since);
  // First, do cooling on scores above zero.
  $run_stats['cooled'] = db_update('scoville')
    ->expression('hotness', 'hotness * :multiplier', array(':multiplier' => $multiplier))
    ->condition('hotness', 0, '>')
    ->execute();
  // Now update scores. First, find nodes which have had at least one hit since
  // the last run.
  $updated_query = db_select('node_counter', 'nc')
    ->fields('nc', array('nid', 'totalcount'))
    ->fields('s', array('last_total', 'hotness'))
    ->fields('n', array('created'))
    // Only bother dealing with nodes that have been accessed since our last run
    ->condition('nc.timestamp', $last_run, '>=')
    // And also filter out nodes not of the type that we're tracking
    ->condition('n.type', $enabled_types);
  // We join {node} for the created field and also to filter by node type.
  $updated_query->join('node', 'n', 'n.nid = nc.nid');
  // We left join {scoville} because it may not have any data for a node yet.
  $updated_query->leftJoin('scoville', 's', 'nc.nid = s.nid');
  $updated_result = $updated_query->execute();

  $hit_points = variable_get('scoville_hit_points', 1);
  $cold_point = variable_get('scoville_cold_point', 3);

  // Now cycle thorugh all nodes we want to update and update them.
  foreach ($updated_result->fetchAll() as $to_update) {
    // Was the node created since the last run?
    $is_new = $to_update->created >= $last_run;
    // Do we have any current data for the node?
    $is_unseen = $to_update->hotness === NULL;
    if (
      // If we have a last total…
      $to_update->last_total !== NULL
      // Or if we don't have a last total, but that's only because the node is
      // new…
      || $is_new
    ) {
      // Calculate the new score as normal.
      $new_score = $to_update->hotness + ($hit_points * ($to_update->totalcount - $to_update->last_total));
    }
    elseif ($is_unseen) {
      // If here, then at least one hit has happened since the last run for this
      // node (or since the Statistics module started counting, if this is the
      // first run), but we don't know how many are recent. Create a row with
      // zero hotness, and we'll update it with how many current hits the node
      // has. On the next run, maybe it'll have enough new hits to be given a
      // hotness rating.
      $new_score = 0;
    }
    // If the old score was below the cold point, only update the score if the
    // new score will be above it. Otherwise, the data we're about to update
    // will just be set to zero later anyway. If it's new or unseen, that
    // zeroing may still happen, but we don't care since all we really want to
    // do is just create a row of data!
    if (
      ($to_update->hotness > $cold_point || $new_score > $cold_point)
      || $is_new
      || $is_unseen
    ) {
      $merge_result = db_merge('scoville')
        ->key(array('nid' => $to_update->nid))
        ->fields(array(
          'hotness' => $new_score,
        ))
        ->execute();
      if ($merge_result === MergeQuery::STATUS_INSERT) {
        $run_stats['inserted']++;
      }
      else {
        $run_stats['heated']++;
      }
    }
  }
  // Now update our last_seen hit counts with the current hit counts. Until I
  // can find a proper way to do this with DBTNG, I cheat and use db_query().
  // @see http://drupal.stackexchange.com/questions/45491/update-database-field-with-value-from-other-table
  db_query('UPDATE scoville s, node_counter nc
    SET s.last_total = nc.totalcount
    WHERE s.nid = nc.nid');
  // Finally, set scores at or below the cold point to zero. We don't "cool"
  // nodes of that score above, since we presume they're effectively zero, so
  // it saves a little bit of work that we do.
  $run_stats['zeroed'] = db_update('scoville')
    ->condition('hotness', $cold_point, '<=')
    ->fields(array('hotness' => 0))
    ->execute();
  // Set the last run time.
  variable_set('scoville_last_run', REQUEST_TIME);
  watchdog('Scoville', 'Scoville run successfully completed. Cooled: @cool, inserted: @ins, heated: @heat, zeroed: @zero.', array(
    '@cool' => $run_stats['cooled'],
    '@heat' => $run_stats['heated'],
    '@ins' => $run_stats['inserted'],
    '@zero' => $run_stats['zeroed'],
  ), WATCHDOG_INFO);
  return $run_stats;
}

/**
 * Implements hook_views_api().
 */
function scoville_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Implements hook_form_FORM_ID_alter() for the content type form.
 *
 * Add a checkbox to allow for tracking of hotness of certain node types.
 */
function scoville_form_node_type_form_alter(&$form, $form_state) {
  $enabled = in_array($form['#node_type']->type, variable_get('scoville_types', array()));
  $form['workflow']['scoville'] = array(
    '#type' => 'checkbox',
    '#title' => t('Track hotness statistics'),
    '#default_value' => $enabled,
    '#description' => $enabled
      ? t('Disabling hotness tracking will cause all currently stored hotness data for content of this type to be deleted.')
      : t('Enables hotness tracking with Scoville. Hotness statistics will be generated during the next cron run after tracking is enabled for this type.'),
    '#weight' => 100,
  );
  // Add our submission function to the form.
  $form['#submit'][] = 'scoville_form_node_type_form_submit';
}

/**
 * Submission function for content type form.
 *
 * Save state as to whether we're tracking hotness on a node type.
 */
function scoville_form_node_type_form_submit($form, $form_state) {
  $enabled_types = variable_get('scoville_types', array());
  $type = $form_state['values']['type'];
  if ($form_state['values']['scoville'] && !in_array($type, $enabled_types)) {
    // We're going to start tracking content of this type.
    $enabled_types[] = $form_state['values']['type'];
  }
  elseif (!$form_state['values']['scoville'] && in_array($type, $enabled_types)) {
    // We're going to stop tracking content of this type.
    $enabled_types = array_diff($enabled_types, array($type));
    // Find nodes we have data for of the type being deleted.
    $select = db_select('scoville', 's')
      ->fields('s', array('nid'))
      ->condition('n.type', $type);
    $select->join('node', 'n', 'n.nid = s.nid');
    $nids = $select->execute()->fetchCol();
    // …And delete that data.
    if ($nids) {
      db_delete('scoville')
        ->condition('nid', $nids)
        ->execute();
    }
  }
  else {
    // We're not either adding or removing data here, so just bail.
    return;
  }
  variable_set('scoville_types', array_unique($enabled_types));
}

/**
 * Implements hook_node_type_delete().
 *
 * Delete data for a node type that's being deleted.
 */
function scoville_node_type_delete($info) {
  $enabled_types = variable_get('scoville_types', array());
  if (in_array($info->type, $enabled_types)) {
    variable_set('scoville_types', array_unique(array_diff($enabled_types, array($info->type))));
  }
}

/**
 * Implements hook_node_delete().
 *
 * Delete data for a node which is about to be deleted.
 */
function scoville_node_delete($node) {
  db_delete('scoville')
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * drupal_get_form() callback for Scoville system settings.
 */
function scoville_settings_form() {
  // Get some stats from the DB
  $count = db_select('scoville')
    ->countQuery()
    ->execute()
    ->fetchField();
  $count_gt_zero = db_select('scoville')
    ->condition('hotness', 0, '>')
    ->countQuery()
    ->execute()
    ->fetchField();
  // Make a list of content types
  $types = variable_get('scoville_types', array());
  $type_list = array();
  foreach (node_type_get_types() as $sysname => $type) {
    if (in_array($sysname, $types)) {
      $type_list['scoville-type-' . $sysname] = array(
        'title' => $type->name,
        'href' => 'admin/structure/types/manage/' . $sysname,
      );
    }
  }
  // Last run info
  $last_run = variable_get('scoville_last_run', 0);
  if ($last_run) {
    $last_run_text = t('@date (@ago ago)', array('@date' => format_date($last_run), '@ago' => format_interval(REQUEST_TIME - $last_run)));
  }
  else {
    $last_run_text = t('Never');
  }
  return system_settings_form(array(
    'stats_table' => array(
      '#theme' => 'table',
      '#rows' => array(
        array(
          'data' => array(
            array(
              'data' => t('Last calculation run'),
              'header' => TRUE,
            ),
            array(
              'data' => $last_run_text,
            ),
          ),
          'no_striping' => TRUE,
        ),
        array(
          'data' => array(
            array(
              'data' => t('Stored node data count'),
              'header' => TRUE,
            ),
            array(
              'data' => check_plain($count),
            ),
          ),
          'no_striping' => TRUE,
        ),
        array(
          'data' => array(
            array(
              'data' => t('Nodes with score greater than zero'),
              'header' => TRUE,
            ),
            array(
              'data' => check_plain($count_gt_zero),
            ),
          ),
          'no_striping' => TRUE,
        ),
        array(
          'data' => array(
            array(
              'data' => t('Active content types'),
              'header' => TRUE,
            ),
            array(
              'data' => theme('links', array('links' => $type_list)),
            ),
          ),
          'no_striping' => TRUE,
        ),
      ),
      '#weight' => 0,
    ),
    'scoville_cool_rate' => array(
      '#type' => 'textfield',
      '#title' => t('Hourly cooling rate'),
      '#required' => TRUE,
      '#attributes' => array(
        'type' => 'number',
        'min' => 0,
        'max' => 1,
      ),
      '#default_value' => variable_get('scoville_cool_rate', .7),
      '#weight' => 10,
      '#description' => t('The multiple by which a node&rsquo;s hotness score will be reduced every hour. The reduction occurs before the score for new hits is added. This should be a decimal value between zero and one. Lower values mean stronger cooling. If it seems that nodes are not staying hot long enough, try increasing this value; if it seems they&rsquo;re staying hot too long, try decreasing it.'),
    ),
    'scoville_hit_points' => array(
      '#type' => 'textfield',
      '#title' => t('Hit points'),
      '#required' => TRUE,
      '#attributes' => array(
        'type' => 'number',
        'min' => 0,
      ),
      '#default_value' => variable_get('scoville_hit_points', 1),
      '#weight' => 20,
      '#description' => t('The value by which a node&rsquo;s hotness score will increase for each new &ldquo;hit&rdquo; to the page. In most cases, the default value of one is just fine.'),
    ),
    'scoville_cold_point' => array(
      '#type' => 'textfield',
      '#title' => t('Cold point'),
      '#required' => TRUE,
      '#attributes' => array(
        'type' => 'number',
        'min' => 0,
      ),
      '#default_value' => variable_get('scoville_cold_point', 3),
      '#weight' => 30,
      '#description' => t('If a node&rsquo;s hotness score drops below this value, Scoville will no longer calculate hotness scores for that node unless it is able to attain a score surpassing this value again. This prevents Scoville from storing data for older nodes which are likely to never become popular again. Sites with lots of traffic and/or many new nodes daily will want to use a high value here to keep the number of nodes Scoville is tracking data for to a manageable amount.'),
    ),
  ));
}

/**
 * Validator for our system settings form.
 */
function scoville_settings_form_validate($form, $form_state) {
  if (
    !is_numeric($form_state['values']['scoville_cool_rate'])
    || $form_state['values']['scoville_cool_rate'] < 0
    || $form_state['values']['scoville_cool_rate'] > 1
  ) {
    form_set_error('scoville_cool_rate', t('The <em>Hourly cooling rate</em> value should be a number between zero and one, inclusive.'));
  }
  if (
    !is_numeric($form_state['values']['scoville_hit_points'])
    || $form_state['values']['scoville_hit_points'] < 0
  ) {
    form_set_error('scoville_hit_points', t('The <em>Hit points</em> value should be a non-negative number.'));
  }
  if (
    !is_numeric($form_state['values']['scoville_cold_point'])
    || $form_state['values']['scoville_cold_point'] < 0
  ) {
    form_set_error('scoville_cold_point', t('The <em>Cold point</em> value should be a non-negative number.'));
  }
}
