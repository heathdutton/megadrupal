<?php

/**
 * @file
 * The main file for quiz_sentence_drop.
 *
 * image drop question type for the Quiz module.
 */

/**
 * Implements hook_help().
 */
function quiz_sentence_drop_help($path, $args) {
  if ($path == 'admin/help#quiz_sentence_drop') {
    return t("
      <p>This module provides a drag drop question type for Quiz.</p>
      <p>
      <em>This module allows you to upload images for preparing drag drop type of questions.
      Later on all images will get listed. User need to drag and drop correct images on the box to get points.</em></p>
    ");
  }
}

/**
 * Implements hook_config().
 */
function quiz_sentence_drop_config() {
  // No config required, returned empty array since this module uses quiz api.
  return array();
}

/**
 * Implements hook_quiz_question_info().
 */
function quiz_sentence_drop_quiz_question_info() {
  return array(
      'quiz_sentence_drop' => array(
          'name' => t('Sentence drop question'),
          'description' => t('This provides image drag drop type of questions for Quiz module.'),
          'question provider' => 'SentenceDropQuestion',
          'response provider' => 'SentenceDropResponse',
          'module' => 'quiz_question',
      ),
  );
}

/**
 * Implements hook_theme().
 */
function quiz_sentence_drop_theme($existing, $type, $theme, $path) {
  return array(
      'quiz_sentence_drop_response' => array(
          'variables' => array(
              'data' => array(),
          ),
          'path' => drupal_get_path('module', 'quiz_sentence_drop') . '/theme',
          'file' => 'quiz_sentence_drop.theme.inc',
      ),
      'quiz_sentence_drop_answer_form' => array(
          'variables' => array(
              'data' => array(),
          ),
          'path' => drupal_get_path('module', 'quiz_sentence_drop') . '/theme',
          'file' => 'quiz_sentence_drop.theme.inc',
      ),
  );
}

/**
 * Implements hook_form_alter().
 */
function quiz_sentence_drop_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'quiz_report_form') {
    drupal_add_css(drupal_get_path('module', 'quiz_sentence_drop') . '/quiz_sentence_drop.css', array('type' => 'file', 'weight' => CSS_THEME));
    if (isset($form_state['build_info']['args'][0]) && !empty($form_state['build_info']['args'][0])) {
      $i = 0;
      foreach ($form_state['build_info']['args'][0] as $key => $val) {

        if ($val->type == 'quiz_sentence_drop') {
          list($answer_options, $token) = getSubquestions($key);

          if (isset($answer_options) && !empty($answer_options)) {
            $answer_options = customShuffle($answer_options);

            $token = customShuffle($token);
            foreach ($token as $token_key => $token_val) {
              $form[$i]['question']['#markup'] = str_replace($token_key, $token_val, strtolower($form[$i]['question']['#markup']));
            }
          }
        }
        $i++;
      }
    }
  }
}

/**
 * Helper function to fetch subquestions.
 *
 * @return array
 *   Array with two arrays, matches and selected options
 */
function getSubquestions($nid) {
  $answer_options = $image = $token = array();
  $count = 1;

  $node_detail = node_load($nid);

  if (isset($node_detail->field_sentence_dragdrop_file[LANGUAGE_NONE]) && !empty($node_detail->field_sentence_dragdrop_file[LANGUAGE_NONE])) {
    foreach ($node_detail->field_sentence_dragdrop_file[LANGUAGE_NONE] as $key => $val) {
      $style = 'thumbnail';
      $path = $val['uri'];
      $fid = $val['fid'];
      $val['description'] = strtolower($val['description']);
      $data = array('style_name' => $style, 'path' => $path, 'fid' => $fid, 'desc' => $val['description']);

      $from_id = 'from_' . str_replace("@", "", $val['description']);
      $answer_options[$val['description']] = '<span class="draggable" id="' . $from_id . '">' . ucfirst(trim(str_replace('@', '', $val['description']))) . '</span>';

      $token[$val['description']] = imageStyle($data);
      $count++;
    }
  }
  return array($answer_options, $token);
}

/**
 * Shuffles an array and makes sure the first element is the default element.
 *
 * @param array $array
 *   Array to be shuffled
 * 
 * @return array
 *   A shuffled version of the array with $array['def'] = '' as the first 
 * element.
 */
function customShuffle(array $array = array()) {
  $new_array = array();
  if (isset ($array) && !empty($array)) {
    while (count($array)) {
      $element = array_rand($array);
      $new_array[$element] = $array[$element];
      unset($array[$element]);
    }
  }
  return $new_array;
}

/**
 * Helper function to generate question images.
 * 
 * @param array $variables
 *   Holds image related settings.
 *
 * @return HTML
 *   HTML of image.
 */
function imageStyle($variables) {
  // Determine the dimensions of the styled image.
  $dimensions = array(
      'width' => '',
      'height' => 60,
  );
  $variables['desc'] = strtolower($variables['desc']);
  image_style_transform_dimensions($variables['style_name'], $dimensions);

  $variables['width'] = $dimensions['width'];
  $variables['height'] = $dimensions['height'];

  $variables['attributes'] = array(
//      'class' => 'droppable dropbox',
      'id' => 'image_' . str_replace('@', '', $variables['desc']),
  );

  $placeholder_id = 'placeholder_' . str_replace("@", "", $variables['desc']);
  // Determine the url for the styled image.
  $variables['path'] = image_style_url($variables['style_name'], $variables['path']);
  return '<span class="img_option droppable dropbox" id="' . $placeholder_id . '">' . theme('image', $variables) . '</span>';
}
