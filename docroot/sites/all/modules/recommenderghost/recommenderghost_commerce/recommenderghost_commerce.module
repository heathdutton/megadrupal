<?php

/**
 * @file
 * Adds the required Javascript to the checkout completion page to allow
 * e-commerce statistics tracking through RecommenderGhost.
 *
 * The JS tracking part of this module is based on the Commerce Google Analytics
 * module source code.
 *
 * @author: hhhc
 */

/**
 * Implements hook_commerce_checkout_router().
 */
function recommenderghost_commerce_commerce_checkout_router($order, $checkout_page) {

  // Add the javascript only when we are on the order complete page.
  if ($checkout_page['page_id'] == 'complete') {

    // We allow different methods. Default to 'JS' but
    // allow users to override if they really need to.
    $tracking_method = variable_get('recommenderghost_tracking_method', 'JS');
    $tracking_details = recommenderghost_commerce_get_tracking_data($order);
    if ($tracking_method == "JS") {
      $script = "";
      foreach ($tracking_details as $one) {
        $script .= "
        easyrec_sendAction('buy',{
            itemId:'" . $one["itemid"] . "',
            itemUrl:'" . check_url($one["itemurl"]) . "',
            itemDescription: '" . addslashes(check_plain($one["itemdescription"])) . "',";
        if (isset($one["itemimageurl"])) {
          $script .= "
            itemImageUrl:'" . check_url($one["itemimageurl"]) . "',";
        }
        if ($one["userid"]) {
          $script .= "
            userId:'" . $one["userid"] . "',";
        }
        $script .= "
          });
          ";
      }
      $scope = variable_get('recommenderghost_js_scope', 'header');
      // Add the code to the footer.
      drupal_add_js($script, array(
                            'type' => 'inline',
                            'scope' => $scope,
                            'preprocess' => FALSE,
                            'weight' => 100));
    }
    else {
      foreach ($tracking_details as $one) {
        // Call per REST.
        $recommendations = recommenderghost_call_api("buy", $one);
      }
    }
  }
}

/**
 * Extract the information to be passed to RecommenderGhost from order tracking.
 *
 * @param object $order
 *   The fully loaded order object to convert into RG JS.
 *
 * @return array
 *   The array with values that should be used for tracking.
 */
function recommenderghost_commerce_get_tracking_data($order) {
  global $user;
  // Following privacy policy of RecommenderGhost we need to
  // encode user ids into non-revertable formatOutput.
  $uid = sha1($user->uid);
  $tracking_details = array();

  if (!($order instanceof EntityMetadataWrapper)) {
    $order = entity_metadata_wrapper('commerce_order', $order);
  }

  // Loop through the products on the order.
  foreach ($order->commerce_line_items as $line_item) {
    $category = '';

    $properties = $line_item->getPropertyInfo();
    if (isset($properties['commerce_product'])) {
      // We want to track node id as this is the actual "product" in
      // terms of a recommender system,
      // different t-shirt sizes (commerce_products) dont matter but just
      // the t-shirt itself (node).
      $product_id = $line_item->commerce_product->product_id->value();

      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'node', '=')
      ->fieldCondition('field_product', 'product_id', $product_id, '=')
      ->range(0, 1);
      if ($result = $query->execute()) {
        $all = array_keys($result["node"]);
        $nid = $all[0];
      }

      // Load the node and its pictures.
      $node = node_load($nid);
      $img_field = variable_get('recommenderghost_image_token_field', '');
      $path = token_replace($img_field, array('node' => $node));
      // Filter unchanged tokens.
      $clean = preg_replace('/\[(.*)\]/is', "", $path);
      $clean_array = explode(",", $clean);
      // Only use relative paths.
      $url = parse_url(trim($clean_array[0]));
      $item_image_url = $url['path'];

      $item_id = $node->nid;
      $item_url = "/" . drupal_lookup_path("alias", "node/" . $nid);
      $title = $node->title;

      $one = array(
        "itemid" => $item_id,
        "itemurl" => $item_url,
        "itemdescription" => $title,
        "sessionid" => session_id(),
      );
      if ($item_image_url) {
        $one["itemimageurl"] = $item_image_url;
      }
      if ($uid) {
        $one["userid"] = $uid;
      }
      $tracking_details[] = $one;
    }
  }
  return $tracking_details;
}
