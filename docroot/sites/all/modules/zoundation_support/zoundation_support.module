<?php
/**
 * @file
 * module file for zoundation_support
 */

/**
 * Implements hook_theme().
 */
function zoundation_support_theme() {
  return array(
    'zoundation_support_tag' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Implements hook_preprocess_block().
 */
function zoundation_support_preprocess_block(&$variables) {
  $block = $variables['block'];

  // The block template needs this to know if we need a li wrapper or not.
  if ($block->module == 'zoundation_support') {
    $variables['zoundation_support_flat'] = variable_get('zoundation_support_' . $block->delta . '_flat', 0);
  }
}

/**
 * Helper function used to build menu trees.
 *
 * @param string $menu_name
 *   The menu name to build the helper for.
 * @param string $type
 *   The menu type to build. Currently supported ('topbar')
 * @param int $min_depth
 *   The depth at which to start building the menu.
 * @param int $max_depth
 *   The depth at which to stop building the menu. Assumed to be > $min_depth.
 *
 *  @return array
 *   A render array of the menu links ready for display in foundation topbar.
 */
function zoundation_support_menu_builder($menu_name, $min_depth = 1, $max_depth = 9) {
  $cached = &drupal_static(__FUNCTION__, array());
  if (!isset($cached[$menu_name][$min_depth][$max_depth])) {
    $parameters = array(
      'min_depth'  => $min_depth,
      'max_depth' => $max_depth,
      'conditions' => array(
        'hidden' => 0,
      ),
    );

    $tree = menu_build_tree($menu_name, $parameters);
    $links = zoundation_support_menu_tree_worker($tree);

    $cached[$menu_name][$min_depth][$max_depth] = $links;
  }

  return $cached[$menu_name][$min_depth][$max_depth];
}

/**
 * Menu render dispatcher.
 *
 * @param array $links
 *   links as returned from zoundation_support_menu_builder().
 * @param $type  [description]
 *   Type of menu to render.
 * @param  boolean $flat
 *   Whether we are rendering the menu "flat" used for topbar.
 * @return array
 *   A render array.
 */
function zoundation_support_menu_renderer($links, $type, $flat = FALSE) {
  $function = 'zoundation_support_' . $type . '_builder';
  if ($flat) {
    $function .= '_flat';
  }
  if (function_exists($function)) {
    return $function($links);
  }

  drupal_set_message(t('zoundation_support_menu_renderer() called with invalid type %type', array('%type' => $type)), 'error');
  return '';
}

/**
 * Recursively builds menu structures for use in topbar.
 *
 * @param array $link
 *   A single link as returned from zoundation_support_menu_builder().
 * @return array
 *   A render array suitable for use in foundation topbar region.
 */
function zoundation_support_topbar_builder($link) {
  $elem['#theme'] = 'zoundation_support_tag';
  if (empty($link['#text'])) {
    $elem['#tag'] = 'ul';
  }
  else {
    $elem['#value'] = l($link['#text'], $link['#path'], $link['#options']);
    $elem['#tag'] = 'li';

    if (zoundation_support_link_is_active($link)) {
      $elem['#attributes']['class'][] = 'active';
    }
    // Special Menu Items
    if (module_exists('special_menu_items')) {
      if ($link['#path'] == '<separator>') {
        $elem['#attributes']['class'][] = 'divider';
      }
      if ($link['#path'] == '<nolink>') {
        $elem['#value'] = '<label>' . $elem['#value'] . '</label>';
      }
    }
  }

  $children = array();
  foreach (element_children($link) as $child) {
    $children[] = zoundation_support_topbar_builder($link[$child]);
  }

  if (!empty($children)) {
    $children['#tag'] = 'ul';
    $children['#theme'] = 'zoundation_support_tag';
    $children['#attributes'] = array('class' => 'dropdown');
    if (!empty($elem['#value'])) {
      $elem[] = $children;
      $elem['#attributes']['class'][] = 'has-dropdown';
    }
    else {
      // This is our entry point.
      $elem = $children;
    }
  }

  return $elem;
}

/**
 * Recursively builds menu structures for use in topbar as a "flat" menu.
 *
 * This differs from zoundaiton_support_topbar_builder only in the outermost
 * case. In that scenario we just return the child links which are assumed to be
 * of type li so that the menu renders flat via zoundation.
 *
 * @see zoundation_support_topbar_builder().
 */
function zoundation_support_topbar_builder_flat($link) {
  $children = array();
  foreach (element_children($link) as $child) {
    $children[] = zoundation_support_topbar_builder($link[$child]);
  }
  return $children;
}

/**
 * Build a nested menu structure.
 *
 * Recursive function that iterates over a menu tree from menu_build_tree() to
 * build a nested menu structure for use elsewhere.
 *
 * @param array $tree
 *   @see menu_build_tree().
 * @return array
 *   Nested links representing the menu tree.
 */
function zoundation_support_menu_tree_worker($tree) {
  $links = array();
  foreach ($tree as $key => $data) {
    if ($data['link']['access'] && $data['link']['hidden'] != 1) {
      $link = array(
        '#path' => $data['link']['href'],
        '#options' => $data['link']['options'],
      );

      // Callbacks with arguments may not behave properly in all contexts.
      if ($data['link']['title_arguments'] == '') {
        $link['#text'] = $data['link']['title'];
      }
      else {
        $link['#text'] = $data['link']['link_title'];
      }

      if ($data['below']) {
        $children = zoundation_support_menu_tree_worker($data['below']);
        if (!empty($children)) {
          foreach ($children as $child) {
            $link[] = $child;
          }
        }
      }
      $links[] = $link;
    }
  }
  return $links;
}

/**
 * Implements hook_form_alter().
 */
function zoundation_support_form_alter(&$form, &$form_state, $form_id) {
  // Add a placeholder field setting if the elements module is available and
  // we have an appropriate widget.
  $types = zoundation_support_placeholder_types();
  if ($form_id == 'field_ui_field_edit_form' && in_array($form['#instance']['widget']['type'], $types)) {
    $form['instance']['placeholder'] = array(
      '#type' => 'textfield',
      '#title' => t('Placeholder'),
      '#default_value' => (!empty($form['#instance']['placeholder'])) ? $form['#instance']['placeholder'] : '',
      '#description' => t('Default placeholder text that will not be submitted without user editing.'),
    );
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function zoundation_support_field_widget_form_alter(&$element, &$form_state, $context) {
  // If the elements module is available set the placeholder text if configured.
  $types = zoundation_support_placeholder_types();
  $widget = $context['instance']['widget'];
  if (in_array($widget['type'], $types) && !empty($context['instance']['placeholder'])) {
    if (strpos($widget['type'], 'text_textarea') === 0) {
      $element['#placeholder'] = $context['instance']['placeholder'];
    }
    else {
      $element['value']['#placeholder'] = $context['instance']['placeholder'];
    }
  }
}

/**
 * Helper function to return all widgets that should get placeholder text.
 */
function zoundation_support_placeholder_types() {
  $types = array();

  if (module_exists('elements')) {
    $types[] = 'text_textfield';
    $types[] = 'text_textarea';
    $types[] = 'text_textarea_with_summary';
  }

  return $types;
}

/**
 * Implements hook_block_info().
 */
function zoundation_support_block_info() {
  $blocks = array();
  $hashes = array();

  $menus = menu_get_menus();
  $types = zoundation_support_menu_types();
  foreach ($menus as $menu_name => $title) {
    // Build out all of our supported menu type blocks.
    foreach ($types as $type) {
      $delta = $type . '-' . $menu_name;
      if (strlen($delta) >= 32) {
        $hash = md5($delta);
        $hashes[$hash] = $delta;
        $delta = $hash;
      }
      $blocks[$delta] = array(
        'info' => t('!title (!type)', array(
          '!title' => $title,
          '!type' => $type,
        )),
      );
    }
  }

  // Only save hashes if they have changed.
  $old_hashes = variable_get('zoundation_support_block_hashes', array());
  if ($hashes != $old_hashes) {
    variable_set('zoundation_support_block_hashes', $hashes);
  }

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function zoundation_support_block_view($delta = '') {
  $block = array();
  $types = zoundation_support_menu_types();
  $hashes = variable_get('zoundation_support_block_hashes');

  // grab the actual delta if its hashed.
  if (strlen($delta) >= 32 && !empty($hashes[$delta])) {
    $delta = $hashes[$delta];
  }

  foreach ($types as $type) {
    if (strpos($delta, $type) === 0) {
      $menu_name = str_replace($type . '-', '', $delta);
      break;
    }
  }
  if (!empty($menu_name) && $menu = menu_load($menu_name)) {
    $flat = variable_get('zoundation_support_' . $delta . '_flat', 0);
    $min_depth = variable_get('zoundation_support_' . $delta . '_min_depth', 1);
    $links = zoundation_support_menu_builder($menu_name, $min_depth);
    $block['subject'] = t($menu['title']);
    $block['content'] = zoundation_support_menu_renderer($links, $type, $flat);
  }
  return $block;
}

/**
 * Returns an array of menu types we should build.
 */
function zoundation_support_menu_types() {
  return array(
    'topbar',
  );
}

function zoundation_support_flat_types() {
  return array(
    'topbar',
  );
}

/**
 * Implements hook_block_configure().
 */
function zoundation_support_block_configure($delta = '') {
  $form = array();
  $types = zoundation_support_menu_types();
  foreach ($types as $type) {
    if (strpos($delta, $type) === 0) {
      $form['zoundation_support'] = array(
        '#type' => 'fieldset',
        '#title' => t('Zoundation'),
      );
      $var = 'zoundation_support_' . $delta . '_min_depth';
      $form['zoundation_support'][$var] = array(
        '#type' => 'select',
        '#title' => t('Menu depth'),
        '#options' => array_combine(range(1, 9), range(1, 9)),
        '#default_value' => variable_get($var, 1),
        '#description' => t('What level to start rendering the menu at. Use this if there are extraneous top-level entries that you do not want rendered.'),
      );

      if (in_array($type, zoundation_support_flat_types())) {
        $var = 'zoundation_support_' . $delta . '_flat';
        $form['zoundation_support'][$var] = array(
          '#type' => 'checkbox',
          '#title' => t('Render flat'),
          '#default_value' => variable_get($var, FALSE),
          '#description' => t('If checked flatten the block so that each top-level menu item gets its own entry in the topbar.'),
        );
      }
      break;
    }
  }
  return $form;
}

/**
 * Implements hook_block_save().
 */
function zoundation_support_block_save($delta = '', $edit = array()) {
  $types = zoundation_support_menu_types();
  $min_depth = 'zoundation_support_' . $delta . '_min_depth';
  if (isset($edit[$min_depth])) {
    variable_set($min_depth, $edit[$min_depth]);
  }
  $flat = 'zoundation_support_' . $delta . '_flat';
  if (!empty($edit[$flat])) {
    variable_set($flat, 1);
  }
  else {
    variable_set($flat, 0);
  }
}

/**
 * Implements hook_menu_alter().
 */
function zoundation_support_menu_alter(&$items) {
  // Change so that people/create gets a tab.
  $items['admin/people/create']['type'] = MENU_LOCAL_TASK;
}

/**
 * Core's implemented theme_html_tag() doesn't render children.
 *
 * As opposed to core's theme_html_tag() do not use this function with void
 * tags; eg. <br>, <hr>, <link>, <meta>, etc.
 *
 * @see theme_html_tag()
 */
function theme_zoundation_support_tag($variables) {
  $element = $variables['element'];
  $attributes = isset($element['#attributes']) ? drupal_attributes($element['#attributes']) : '';

  $output = '<' . $element['#tag'] . $attributes . '>';
  if (isset($element['#value_prefix'])) {
    $output .= $element['#value_prefix'];
  }

  if (isset($element['#value'])) {
    $output .= $element['#value'];
  }

  if (isset($element['#value_suffix'])) {
    $output .= $element['#value_suffix'];
  }
  $output .= drupal_render_children($element);

  $output .= '</' . $element['#tag'] . ">\n";
  return $output;
}

/**
 * Helper function returns true if the passed link can be considered 'active'
 *
 * @param array $link
 *   Link array to check if is the current "active" link.
 * @return bool
 *   TRUE indicated link is active, FALSE otherwise.
 */
function zoundation_support_link_is_active($link) {
  global $language_url;

  // Check the path relative to the language.
  $language = (empty($link['#options']['language']) || ($GLOBALS['language']->language == $language_url->language));

  $active = FALSE;

  if (isset($link['#path'])) {
    if ($link['#path'] == $_GET['q']) {
      $active = TRUE;
    }

    if ($link['#path'] == '<front>' && drupal_is_front_page()) {
      $active =  TRUE;
    }
  }

  return ($language && $active);
}

/**
 * Helper function to return an array as a string like a style property.
 *
 * Note this should be ran through drupal_attributes() to ensure nothing
 * malicious made it through.
 *
 * @param array $var
 *   The variable to stringify.
 * @return string
 *   A string suitable for use in a style like tag.
 *
 * eg. $var = array('timer_speed' => 1000, 'animation_speed' => 500);
 *
 * This function will return "timer_speed:1000; animation_speed:500;"
 */
function zoundation_support_stringify($var) {
  $string = '';
  if (!empty($var)) {
    foreach ($var as $key => $val) {
      if (!empty($val)) {
        if (is_string($val) || is_numeric($val)) {
          $string .= $key . ': ' . $val . ';';
        }
        elseif (is_array($val)) {
          $string .= $key . ': ' . implode(', ', $val);
        }
      }
    }
  }
  return $string;
}
