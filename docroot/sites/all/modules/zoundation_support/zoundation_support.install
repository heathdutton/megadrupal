<?php
/**
 * @file
 * install file for zoundation_support
 */

/**
 * Implements hook_requirements().
 */
function zoundation_support_requirements($phase) {
  $requirements = array();

  // Ensure translations don't break during installation.
  $t = get_t();

  switch ($phase) {
    case 'runtime':
      // Check the configuration.
      $jquery = drupal_get_library('system', 'jquery');

      $requirements['zoundation_support_jquery_version'] = array(
        'title' => $t('zoundation jQuery Update Version'),
        'value' => $jquery['version'],
      );

      if (version_compare($jquery['version'], '1.7') >= 0) {
        $requirements['zoundation_support_jquery_version']['severity'] = REQUIREMENT_OK;
      }
      else {
        $requirements['zoundation_support_jquery_version']['severity'] = REQUIREMENT_ERROR;
        $requirements['zoundation_support_jquery_version']['description'] = $t('jQuery version must be 1.7 or higher visit !url', array('!url' => l($t('jQuery update'), 'admin/config/development/jquery_update')));
      }
      break;
  }

  return $requirements;
}

/**
 * Upgrade database relative to issue; http://drupal.org/node/1881054
 */
function zoundation_support_update_7101(&$sandbox) {
  $hashes = array();
  $messages = array();
  // Grab all menu blocks, calculate and store hashes.
  $menus = menu_get_menus();
  $types = zoundation_support_menu_types();
  foreach ($menus as $menu_name => $title) {
    // Each menu needs at least a topbar and a buttonbar type.
    foreach ($types as $type) {
      $delta = $type . '-' . $menu_name;
      if (strlen($delta) >= 32) {
        $hash = md5($delta);
        $hashes[$hash] = $delta;
      }
    }
  }
  variable_set('zoundation_support_block_hashes', $hashes);

  if (!empty($hashes)) {
    // Update block table deltas where necessary.
    $bids = db_select('block', 'b')
      ->fields('b', array('bid', 'delta'))
      ->condition('module', 'zoundation_support')
      ->condition('delta', array($hashes))
      ->execute()
      ->fetchAllKeyed();

    if (!empty($bids)) {
      $deltas = array_flip($hashes);
      foreach ($bids as $bid => $delta) {
        db_update('block')
          ->fields(array(
            'delta' => $deltas[$delta],
            ))
          ->condition('bid', $bid)
          ->execute();
        $messages[] = t('Updated bid: %bid for delta: %delta to hash: %hash', array(
          '%bid' => $bid,
          '%delta' => $delta,
          '%hash' => $deltas[$delta]
        ));
      }
    }

    if (module_exists('context')) {
      $or = db_or();
      foreach ($hashes as $hash => $delta) {
        $or->condition('reactions', $delta, 'LIKE');
      }

      $contexts = db_select('context', 'c')
        ->fields('c', array('name'))
        ->condition($or)
        ->execute()
        ->fetchAllKeyed(0,0);

      if (!empty($contexts)) {
        foreach ($context as $context) {
          // Only context_save() if we need to.
          $save = FALSE;
          $current = context_load($context);

          if (!empty($current['reactions']['block'])) {
            foreach ($current['reactions']['block']['blocks'] as $key => $block) {
              foreach ($hashes as $hash => $delta) {
                if ($key == 'zoundation_support-' . $delta) {
                  $newkey = 'zoundation_support-' . $hash;
                  $block['delta'] = $hash;

                  // Save the new block reaction with hash.
                  $current['reactions']['block']['blocks'][$newkey] = $block;

                  // Remove the old block reaction.
                  unset($current['reactions']['block']['blocks'][$key]);

                  $messages[] = t('Updating context: %context block deltas for delta: %delta to hash: %hash', array(
                    '%context' => $context,
                    '%delta' => $delta,
                    '%hash' => $deltas[$delta]
                  ));

                  // Mark context for saving.
                  $save = TRUE;
                }
              }
            }
          }

          if ($save) {
            context_save($current);
          }
        }
      }
    }
  }
}
