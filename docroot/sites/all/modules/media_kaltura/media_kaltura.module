<?php

/**
 * @file
 * Provides kaltura.com support to the Media module.
 */

/**
 * Implements hook_media_internet_providers().
 */
function media_kaltura_media_internet_providers() {
  return array(
    'MediaInternetKalturaHandler' => array(
      'title' => 'Kaltura (use full embed code)',
    ),
  );
}

/**
 * Implements hook_stream_wrappers().
 */
function media_kaltura_stream_wrappers() {
  return array(
    'kaltura' => array(
      'name' => t('Kaltura videos'),
      'class' => 'MediaKalturaStreamWrapper',
      'description' => t('Videos provided by Kaltura.'),
      'type' => STREAM_WRAPPERS_READ_VISIBLE,
    ),
  );
}

/**
 * Implements hook_theme().
 */
function media_kaltura_theme($existing, $type, $theme, $path) {
  return array(
    'media_kaltura_video' => array(
      'variables' => array('uri' => NULL, 'options' => array()),
    ),
  );
}

/**
 * Implements hook_media_parse().
 */
function media_kaltura_media_parse($embedCode, $options = array()) {
  $matches = array();
  $pattern = '@kaltura\.com/index.php/kwidget/([^"\?]+)@i';
  preg_match($pattern, $embedCode, $matches);
  if (isset($matches[1])) {
    return file_stream_wrapper_uri_normalize('kaltura://' . $matches[1]);
  }
}

/**
 * Implements hook_ctools_plugin_api().
 */
function media_kaltura_ctools_plugin_api($owner, $api) {
  if ($owner == 'file_entity' && $api == 'file_default_displays') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_file_formatter_info().
 */
function media_kaltura_file_formatter_info() {
  $formatters['media_kaltura_video'] = array(
    'label' => t('Kaltura Video'),
    'file types' => array('video'),
    'default settings' => array(),
    'view callback' => 'media_kaltura_file_formatter_video_view',
    'settings callback' => 'media_kaltura_file_formatter_video_settings',
  );
  $formatters['media_kaltura_video']['default settings'] = array(
    'width' => 704,
    'height' => 396,
    'autoplay' => 0,
  );
  $formatters['media_kaltura_image'] = array(
    'label' => t('Kaltura Preview Image'),
    'file types' => array('video'),
    'default settings' => array(
      'image_style' => '',
    ),
    'view callback' => 'media_kaltura_file_formatter_image_view',
    'settings callback' => 'media_kaltura_file_formatter_image_settings',
  );
  return $formatters;
}

/**
 * Implements hook_file_formatter_FORMATTER_view().
 */
function media_kaltura_file_formatter_video_view($file, $display, $langcode) {
  $scheme = file_uri_scheme($file->uri);
  if ($scheme == 'kaltura') {
    $element = array(
      '#theme' => 'media_kaltura_video',
      '#uri' => $file->uri,
      '#options' => array(),
    );
    foreach (array('width', 'height', 'autoplay') as $setting) {
      $element['#options'][$setting] = isset($file->override[$setting]) ? $file->override[$setting] : $display['settings'][$setting];
    }
    return $element;
  }
}

/**
 * Implements hook_file_formatter_FORMATTER_settings().
 */
function media_kaltura_file_formatter_video_settings($form, &$form_state, $settings) {
  $element = array();

  $element['width'] = array(
    '#title' => t('Width'),
    '#type' => 'textfield',
    '#default_value' => $settings['width'],
  );
  $element['height'] = array(
    '#title' => t('Height'),
    '#type' => 'textfield',
    '#default_value' => $settings['height'],
  );
  $element['autoplay'] = array(
    '#title' => t('Autoplay'),
    '#type' => 'checkbox',
    '#default_value' => $settings['autoplay'],
  );
  return $element;
}

/**
 * Implements hook_file_formatter_FORMATTER_view().
 */
function media_kaltura_file_formatter_image_view($file, $display, $langcode) {
  $scheme = file_uri_scheme($file->uri);
  if ($scheme == 'kaltura') {
    $wrapper = file_stream_wrapper_get_instance_by_uri($file->uri);
    $image_style = $display['settings']['image_style'];
    $valid_image_styles = image_style_options(FALSE);
    if (empty($image_style) || !isset($valid_image_styles[$image_style])) {
      $element = array(
        '#theme' => 'image',
        '#path' => $wrapper->getOriginalThumbnailPath(),
      );
    }
    else {
      $element = array(
        '#theme' => 'image_style',
        '#style_name' => $image_style,
        '#path' => $wrapper->getLocalThumbnailPath(),
      );
    }
    return $element;
  }
}

/**
 * Implements hook_file_formatter_FORMATTER_settings().
 */
function media_kaltura_file_formatter_image_settings($form, &$form_state, $settings) {
  $element = array();
  $element['image_style'] = array(
    '#title' => t('Image style'),
    '#type' => 'select',
    '#options' => image_style_options(FALSE),
    '#default_value' => $settings['image_style'],
    '#empty_option' => t('None (original image)'),
  );
  return $element;
}

/**
 * Implements hook_file_default_displays().
 */
function media_kaltura_file_default_displays() {
  $default_displays = array();

  // Default settings for displaying as a video.
  $default_video_settings = array(
    'media_large' => array(
      'width' => 480,
      'height' => 360,
      'autoplay' => FALSE,
    ),
    'media_original' => array(
      'width' => 640,
      'height' => 480,
      'autoplay' => FALSE,
    ),
  );
  foreach ($default_video_settings as $view_mode => $settings) {
    $display_name = 'video__' . $view_mode . '__media_kaltura_video';
    $default_displays[$display_name] = (object) array(
      'api_version' => 1,
      'name' => $display_name,
      'status' => 1,
      'weight' => 1,
      'settings' => $settings,
    );
  }

  $default_image_styles = array(
    'media_preview' => 'square_thumbnail',
    'media_large' => 'large',
    'media_original' => ''
  );
  foreach ($default_image_styles as $view_mode => $image_style) {
    $display_name = 'video__' . $view_mode . '__media_kaltura_image';
    $default_displays[$display_name] = (object) array(
      'api_version' => 1,
      'name' => $display_name,
      'status' => 1,
      'weight' => 2,
      'settings' => array('image_style' => $image_style),
    );
  }

  return $default_displays;
}

/**
 * Returns HTML for the embedded flash displaying the Kaltura video.
 */
function theme_media_kaltura_video($variables) {
  $uri = $variables['uri'];
  $options = $variables['options'];
  $wrapper = file_stream_wrapper_get_instance_by_uri($uri);
  $parts = $wrapper->get_parameters();
  $url_pieces = explode('/', $parts);
  $output = '<object id="kaltura_player_' . $url_pieces[1] . '"
     name="kaltura_player"
     type="application/x-shockwave-flash"
     height="' . $options['height'] . '"
     width="' . $options['width'] . '"
     xmlns:dc="http://purl.org/dc/terms/"
     xmlns:media="http://search.yahoo.com/searchmonkey/media/"
     rel="media:video" resource="http://www.kaltura.com/index.php/kwidget/cache_st/' .$url_pieces[1] . '/wid/' . $url_pieces[3] . '/uiconf_id/' . $url_pieces[5] . '/entry_id/' . $url_pieces[7] . '"
     data="http://www.kaltura.com/index.php/kwidget/wid/' . $url_pieces[3] . '/uiconf_id/' . $url_pieces[5] . '/entry_id/' . $url_pieces[7] . '">';
  // Add the rest of the flash params.
  $output .= '<param name="allowFullScreen" value="1" />';
  $output .= '<param name="allowNetworking" value="all" />';
  $output .= '<param name="allowScriptAccess" value="always" />';
  $output .= '<param name="bgcolor" value="#000000" />';
  $output .= '<param name="flashVars" value="&" />';
  $output .= '<param name="FlashVars" value="&autoPlay='. $options['autoplay'] .'" />';
  $output .= '<param name="movie" value="http://www.kaltura.com/index.php/kwidget/' . $parts .'">';
  $output .= '<param name="quality" value="best" />';
  $output .= '<param name="wmode" value="transparent" />';
  $output .= '</object>';

  return $output;
}
