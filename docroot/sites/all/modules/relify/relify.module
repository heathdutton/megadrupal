<?php

/**
 * @file
 * Integrates with Relify to make recommendations to users and find similar
 * items in a data set.
 */


/**
 * Implements hook_menu().
 */
function relify_menu() {
  $items = array();

  $items['admin/config/services/relify'] = array(
    'title' => 'Relify',
    'description' => 'Manage your application integration, data sets, and recommenders.',
    'page callback' => 'relify_rules_page',
    'access arguments' => array('administer relify'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/relify.admin.inc',
  );

  $items['admin/config/services/relify/rules'] = array(
    'title' => 'Rules',
    'description' => 'View the Rules designed to interact with the Relify API.',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
    'file' => 'includes/relify.admin.inc',
  );

  $items['admin/config/services/relify/data-sets'] = array(
    'title' => 'Data sets',
    'description' => 'Create and manage your application data sets.',
    'page callback' => 'relify_data_sets_page',
    'access arguments' => array('administer relify'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
    'file' => 'includes/relify.admin.inc',
  );
  $items['admin/config/services/relify/data-sets/add'] = array(
    'title' => 'Add data set',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('relify_data_set_form', relify_data_set_new()),
    'access arguments' => array('administer relify'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'includes/relify.admin.inc',
  );
  $items['admin/config/services/relify/data-sets/%relify_data_set'] = array(
    'title callback' => 'relify_data_set_title',
    'title arguments' => array(5),
    'page callback' => 'relify_data_set_edit_redirect',
    'page arguments' => array(5),
    'access arguments' => array('administer relify'),
  );
  $items['admin/config/services/relify/data-sets/%relify_data_set/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('relify_data_set_form', 5),
    'access arguments' => array('administer relify'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -10,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'includes/relify.admin.inc',
  );
  $items['admin/config/services/relify/data-sets/%relify_data_set/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('relify_data_set_delete_form', 5),
    'access arguments' => array('administer relify'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'includes/relify.admin.inc',
  );

  // Add the menu items for the various Rules forms.
  $controller = new RulesUIController();
  $items += $controller->config_menu('admin/config/services/relify/rules');
    $items['admin/config/services/relify/rules/add-rule'] = array(
    'title' => 'Add a Rule',
    'description' => 'Adds a Rule pre-tagged with Relify.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('relify_add_rule_form', 'admin/config/services/relify/rules'),
    'access arguments' => array('administer relify'),
    'type' => MENU_LOCAL_ACTION,
    'file path' => drupal_get_path('module', 'rules_admin'),
    'file' => 'rules_admin.inc',
  );
  $items['admin/config/services/relify/rules/add-component'] = array(
    'title' => 'Add a Rules component',
    'description' => 'Adds a Rules component pre-tagged with Relify.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('relify_add_rule_component_form', 'admin/config/services/relify/rules'),
    'access arguments' => array('administer relify'),
    'type' => MENU_LOCAL_ACTION,
    'file path' => drupal_get_path('module', 'rules_admin'),
    'file' => 'rules_admin.inc',
  );

  $items['admin/config/services/relify/recommenders'] = array(
    'title' => 'Recommenders',
    'description' => 'Create and manage your application recommenders.',
    'page callback' => 'relify_recommenders_page',
    'access arguments' => array('administer relify'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
    'file' => 'includes/relify.admin.inc',
  );
  $items['admin/config/services/relify/recommenders/add'] = array(
    'title' => 'Add recommender',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('relify_recommender_form', relify_recommender_new()),
    'access arguments' => array('administer relify'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'includes/relify.admin.inc',
  );
  $items['admin/config/services/relify/recommenders/%relify_recommender'] = array(
    'title callback' => 'relify_recommender_title',
    'title arguments' => array(5),
    'page callback' => 'relify_recommender_edit_redirect',
    'page arguments' => array(5),
    'access arguments' => array('administer relify'),
  );
  $items['admin/config/services/relify/recommenders/%relify_recommender/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('relify_recommender_form', 5),
    'access arguments' => array('administer relify'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -10,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'includes/relify.admin.inc',
  );
  $items['admin/config/services/relify/recommenders/%relify_recommender/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('relify_recommender_delete_form', 5),
    'access arguments' => array('administer relify'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'includes/relify.admin.inc',
  );

  $items['admin/config/services/relify/settings'] = array(
    'title' => 'Settings',
    'description' => 'Configure your Relify application settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('relify_settings_form'),
    'access arguments' => array('administer relify'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 15,
    'file' => 'includes/relify.admin.inc',
  );

  return $items;
}

/**
 * Returns a menu item title for a data set.
 */
function relify_data_set_title($data_set) {
  return check_plain($data_set['name']);
}

/**
 * Redirects the user to the edit form for a data set.
 */
function relify_data_set_edit_redirect($data_set) {
  drupal_goto('admin/config/services/relify/data-sets/' . $data_set['data_set_id'] . '/edit');
}

/**
 * Returns a menu item title for a recommender.
 */
function relify_recommender_title($recommender) {
  return check_plain($recommender['name']);
}

/**
 * Redirects the user to the edit form for a recommender.
 */
function relify_recommender_edit_redirect($recommender) {
  drupal_goto('admin/config/services/relify/recommenders/' . $recommender['recommender_id'] . '/edit');
}

/**
 * Implements hook_permission().
 */
function relify_permission() {
  return array(
    'administer relify' => array(
      'title' => t('Administer Relify'),
      'description' => t('Allows users to update Relify API credentials.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_forms().
 */
function relify_forms($form_id, $args) {
  $forms = array();

  $forms['relify_add_rule_form'] = array(
    'callback' => 'rules_admin_add_reaction_rule',
  );

  $forms['relify_add_rule_component_form'] = array(
    'callback' => 'rules_admin_add_component',
  );

  return $forms;
}

/**
 * Implements hook_form_alter().
 *
 * Adds a default Relify tag and cancel links to Relify Rules creation forms.
 */
function relify_form_alter(&$form, &$form_state, $form_id) {
  if (in_array($form_id, array('relify_add_rule_form', 'relify_add_rule_component_form'))) {
    if (isset($form['settings']['tags'])) {
      $form['settings']['tags']['#default_value'] = 'Relify';
    }
    if (isset($form['submit'])) {
      $form['submit']['#suffix'] = l(t('Cancel'), 'admin/config/services/relify');
    }
    if (isset($form['continue'])) {
      $form['continue']['#suffix'] = l(t('Cancel'), 'admin/config/services/relify');
    }
  }
}

/**
 * Submits an API request to Relify.
 *
 * @param $resource
 *   The resource path the API request should be submitted to:
 *   - oauth2/access_token: exchanges your application client ID and account
 *     client secret for an OAuth2 access token.
 * @param $method
 *   The HTTP method for the API request; GET or POST depending on the resource.
 * @param $data
 *   An array of request parameters to submit with the API request.
 *
 * @return
 *   An array of response parameters returned by the API server.
 */
function relify_api_request($resource, $method, $data = array()) {
  // Construct the full URL to the resource.
  $url = relify_base_url() . $resource;

  // For every resource except oauth2/access_token, add the current access token
  // to the data array.
  if ($resource != 'oauth2/access_token') {
    $data['access_token'] = relify_access_token();
  }

  // Allow other modules to alter the data array.
  drupal_alter('relify_api_request', $data, $resource, $method);

  if (variable_get('relify_api_logging', 0) == 1) {
    // Sanitize the client secret and access token in the log.
    $cloned_data = $data;

    foreach (array('client_secret', 'access_token') as $key) {
      if (!empty($cloned_data[$key])) {
        $cloned_data[$key] = str_repeat('x', strlen($cloned_data[$key]));
      }
    }

    watchdog('relify', 'Relify API request (@resource): <pre>!data</pre>', array('@resource' => $resource, '!data' => check_plain(print_r($cloned_data, TRUE))), WATCHDOG_NOTICE);
  }

  // Build an options array for the HTTP request.
  $options = array(
    'headers' => array(
      'Content-Type' => 'application/json',
      'Accept' => 'application/json',
    ),
    'method' => $method,
    'data' => drupal_json_encode($data),
  );

  // Submit the API request to Relify.
  $response = drupal_http_request($url, $options);

  if (!empty($response->data)) {
    $response_data = drupal_json_decode($response->data);
  }
  else {
    $response_data = array();
  }

  $response_data_arg = check_plain(print_r($response_data, TRUE));

  // If the request succeeded...
  if (!empty($response->code) && $response->code == 200) {
    if (variable_get('relify_api_logging', 0) == 1) {
      watchdog('relify', 'Relify API response: <pre>!data</pre>', array('!data' => $response_data_arg), WATCHDOG_NOTICE);
    }
  }
  else {
    if (variable_get('relify_api_logging', 0) == 0) {
      watchdog('relify', 'Relify API request (@resource): <pre>!data</pre>', array('@resource' => $resource, '!data' => $response_data_arg), WATCHDOG_NOTICE);
    }

    if (empty($response->code)) {
      $response = new stdClass();
      $response->code = 500;
    }

    watchdog('relify', 'Relify API request failed (@code): <pre>!data</pre>', array('@code' => $response->code, '!data' => $response_data_arg), WATCHDOG_ERROR);

    if (!isset($response->data)) {
      $response->data = drupal_json_encode(array(
        'status' => 500,
        'message' => t('Internal server error.'),
        'code' => 50000,
        'help' => 'https://developers.relify.com/docs/errors/50000',
      ));
    }
  }

  return $response;
}

/**
 * Returns the base URL for Relify API requests.
 */
function relify_base_url() {
  return 'https://api.relify.com/1/';
}

/**
 * Returns the site's Relify application client ID.
 */
function relify_client_id() {
  return variable_get('relify_client_id', '');
}

/**
 * Returns the site's Relify client secret.
 */
function relify_client_secret() {
  return variable_get('relify_client_secret', '');
}

/**
 * Returns the site's OAuth2 access token.
 */
function relify_access_token() {
  return variable_get('relify_access_token', '');
}

/**
 * Requests an OAuth2 access token for the specified client.
 *
 * @param $client_id
 *   The Relify application client ID.
 * @param $client_secret
 *   The client secret of the Relify account that created the application.
 *
 * @return
 *   The response object from the API request.
 */
function relify_request_access_token($client_id, $client_secret) {
  // Prepare the parameter array and submit the request.
  $data = array(
    'grant_type' => 'client_credentials',
    'scope' => 'universal',
    'client_id' => $client_id,
    'client_secret' => $client_secret
  );

  return relify_api_request('oauth2/access_token', 'POST', $data);
}

/**
 * Returns an initialized data set info array.
 */
function relify_data_set_new() {
  return array(
    'client_id' => '',
    'data_set_id' => '',
    'name' => '',
    'keys' => array(),
  );
}

/**
 * Loads a data set from the local database.
 *
 * @param $data_set_id
 *   The machine-readable ID of the data set defined by Relify.
 *
 * @return
 *   A data set info array with the following keys:
 *   - client_id: the application client ID to which the data set belongs.
 *   - data_set_id: the machine-readable ID of the data set defined by Relify.
 *   - name: the human-readable name of the data set.
 *   - keys: an array of data set keys representing the schema of the data set.
 */
function relify_data_set_load($data_set_id) {
  // First load the base data set information.
  $data_set = db_query('SELECT * FROM {relify_data_set} WHERE data_set_id = :data_set_id', array(':data_set_id' => $data_set_id))->fetchAssoc();

  // Then load all the keys associated with the data set.
  $data_set_keys = db_query('SELECT * FROM {relify_data_set_key} WHERE data_set_id = :data_set_id', array(':data_set_id' => $data_set_id))->fetchAllAssoc('name', PDO::FETCH_ASSOC);

  // Populate the data set keys in an array.
  $data_set['keys'] = array();

  foreach ($data_set_keys as $data_set_key) {
    $data_set['keys'][$data_set_key['name']] = array(
      'name' => $data_set_key['name'],
      'type' => $data_set_key['type'],
    );
  }

  return $data_set;
}

/**
 * Loads all data sets stored locally for a given client ID.
 *
 * @param @client_id
 *   The Relify application client ID whose data sets should be loaded.
 *
 * @return
 *   An associative array of data set info arrays keyed by data set ID and
 *   ordered by name.
 */
function relify_data_set_load_multiple($client_id) {
  $data_sets = array();

  // Fetch all the matching data set IDs.
  $resource = db_query('SELECT data_set_id FROM {relify_data_set} WHERE client_id = :client_id ORDER BY name', array(':client_id' => $client_id));

  // Load them individually and add them to the data sets array.
  while ($data_set_id = $resource->fetchField()) {
    $data_sets[$data_set_id] = relify_data_set_load($data_set_id);
  }

  return $data_sets;
}

/**
 * Submits a create request for a new data set.
 *
 * @param $client_id
 *   The Relify application client ID.
 * @param $name
 *   The human-readable name of the data set.
 * @param $keys
 *   The comma-separated list of keys in the data set.
 *
 * @return
 *   The response object from the API request.
 *
 * @todo Update to use a single $data_set parameter.
 */
function relify_request_data_set_create($client_id, $name, $keys) {
  // Prepare the parameter array and submit the request.
  $data = array(
    'client_id' => $client_id,
    'name' => $name,
    'keys' => $keys,
  );

  return relify_api_request('data_sets/create', 'POST', $data);
}

/**
 * Saves a data set and its keys in the local database.
 *
 * @param $data_set
 *   A data set info array with the following keys:
 *   - client_id: the application client ID to which the data set belongs.
 *   - data_set_id: the machine-readable ID of the data set defined by Relify.
 *   - name: the human-readable name of the data set.
 *   - keys: the comma-separated list of keys in the data set.
 */
function relify_data_set_save($data_set) {
  // Delete the existing data set record.
  db_delete('relify_data_set')
    ->condition('data_set_id', $data_set['data_set_id'])
    ->execute();

  // Insert the updated data set record.
  drupal_write_record('relify_data_set', $data_set);

  // Insert rows in the key table for each key defined for the data set.
  foreach ($data_set['keys'] as $data_set_key) {
    $data_set_key['data_set_id'] = $data_set['data_set_id'];

    // Check to ensure the data set key doesn't already exist.
    if (!relify_data_set_key_exists($data_set_key)) {
      drupal_write_record('relify_data_set_key', $data_set_key);
    }
  }

  entity_defaults_rebuild();
  rules_clear_cache(TRUE);
}

/**
 * Returns a boolean indicating whether or not the data set key exists.
 */
function relify_data_set_key_exists($data_set_key) {
  $exists = db_query('SELECT 1 FROM {relify_data_set_key} WHERE data_set_id = :data_set_id AND name = :name', array(':data_set_id' => $data_set_key['data_set_id'], ':name' => $data_set_key['name']))->fetchField();
  return $exists == 1;
}

/**
 * Converts a key string to an array.
 */
function relify_data_set_keys_string_to_array($keys_string) {
  $keys_array = array();

  foreach (explode(',', $keys_string) as $key) {
    $key = trim($key);

    // Extract the data type from the key if given.
    if (strpos($key, ':')) {
      list($key, $type) = explode(':', $key);
    }
    else {
      $type = 'string';
    }

    $keys_array[$key] = array(
      'name' => $key,
      'type' => $type,
    );
  }

  return $keys_array;
}

/**
 * Converts a key array to a string.
 */
function relify_data_set_keys_array_to_string($keys_array) {
  $keys_condensed = array();

  foreach ($keys_array as $data_set_key) {
    $keys_condensed[] = $data_set_key['name'] . ':' . $data_set_key['type'];
  }

  return implode(',', $keys_condensed);
}

/**
 * Submits a delete request for a data set.
 *
 * @param $data_set_id
 *   The ID of the data set to delete.
 *
 * @return
 *   The response object from the API request.
 */
function relify_request_data_set_delete($data_set_id) {
  // Submit the request.
  return relify_api_request('data_sets/' . $data_set_id . '/delete', 'POST');
}

/**
 * Deletes a data set and its keys from the local database.
 *
 * @param $data_set
 *   The data set to delete.
 */
function relify_data_set_delete($data_set) {
  // Delete the data set definition.
  db_delete('relify_data_set')
    ->condition('data_set_id', $data_set['data_set_id'])
    ->execute();

  // Delete the keys defined for the data set.
  db_delete('relify_data_set_key')
    ->condition('data_set_id', $data_set['data_set_id'])
    ->execute();

  entity_defaults_rebuild();
  rules_clear_cache(TRUE);
}

/**
 * Submits a create request to add data to a data set.
 *
 * @param $data_set_id
 *   The ID of the data set.
 * @param $data
 *   An associative array of key / value pairs representing the data to insert.
 *
 * @response
 *   The response object from the API request.
 */
function relify_request_data_create($data_set_id, $data) {
  // Append the data set ID to the parameter array and submit the request.
  $data['data_set_id'] = $data_set_id;

  return relify_api_request('data/create', 'POST', $data);
}

/**
 * Returns an initialized recommender info array.
 */
function relify_recommender_new() {
  return array(
    'recommender_id' => '',
    'data_set_id' => '',
    'name' => '',
    'user_identifier' => '',
    'user_keys' => array(),
    'item_identifier' => '',
    'item_keys' => array(),
  );
}

/**
 * Loads a recommender from the local database.
 *
 * @param $recommender_id
 *   The machine-readable ID of the recommender defined by Relify.
 *
 * @return
 *   A recommender info array with the following keys:
 *   - recommender_id: the machine-readable ID of the recommender defined by
 *     Relify.
 *   - data_set_id: the machine-readable ID of the data set on which the
 *     recommender is used.
 *   - name: the human-readable name of the recommender.
 *   - user_identifier: the name of the key on the data set that identifies a
 *     user to the recommender.
 *   - user_keys: an array of keys on the data set that describe the user.
 *   - item_identifier: the name of the key on the data set that identifies an
 *     item to the recommender.
 *   - item_keys: an array of keys on the data set that describe an item.
 */
function relify_recommender_load($recommender_id) {
  // Load the base recommender information.
  $recommender = db_query('SELECT * FROM {relify_recommender} WHERE recommender_id = :recommender_id', array(':recommender_id' => $recommender_id))->fetchAssoc();

  // Then explode the comma-separated key strings into array.
  if ($recommender['user_keys'] != '') {
    $recommender['user_keys'] = explode(',', $recommender['user_keys']);
  }
  else {
    $recommender['user_keys'] = array();
  }

  if ($recommender['item_keys'] != '') {
    $recommender['item_keys'] = explode(',', $recommender['item_keys']);
  }
  else {
    $recommender['item_keys'] = array();
  }

  return $recommender;
}

/**
 * Loads all recommenders stored locally for data sets of a given client ID.
 *
 * @param @client_id
 *   The Relify application client ID whose recommenders should be loaded.
 *
 * @return
 *   An associative array of recommender info arrays keyed by recommender ID and
 *   ordered by name.
 */
function relify_recommender_load_multiple($client_id) {
  $recommenders = array();

  // Fetch all the matching recommender IDs.
  $resource = db_query('SELECT r.recommender_id FROM {relify_recommender} AS r JOIN {relify_data_set} AS d ON r.data_set_id = d.data_set_id WHERE d.client_id = :client_id ORDER BY r.name', array(':client_id' => $client_id));

  // Load them individually and add them to the recommenders array.
  while ($recommender_id = $resource->fetchField()) {
    $recommenders[$recommender_id] = relify_recommender_load($recommender_id);
  }

  return $recommenders;
}

/**
 * Submits a create request for a new recommender.
 *
 * @param $recommender
 *   A recommender info array with values for every key except recommender_id.
 *
 * @return
 *   The response object from the API request.
 */
function relify_request_recommender_create($recommender) {
  // Prepare the parameter array and submit the request.
  unset($recommender['recommender_id']);

  return relify_api_request('recommenders/create', 'POST', $recommender);
}

/**
 * Saves a recommender in the local database.
 *
 * @param $recommender
 *   A recommender info array with the following keys:
 *   - recommender_id: the machine-readable ID of the recommender defined by
 *     Relify.
 *   - data_set_id: the machine-readable ID of the data set on which the
 *     recommender is used.
 *   - name: the human-readable name of the recommender.
 *   - user_identifier: the name of the key on the data set that identifies a
 *     user to the recommender.
 *   - user_keys: an array of keys on the data set that describe the user.
 *   - item_identifier: the name of the key on the data set that identifies an
 *     item to the recommender.
 *   - item_keys: an array of keys on the data set that describe an item.
 */
function relify_recommender_save($recommender) {
  // Delete the existing recommender record.
  db_delete('relify_recommender')
    ->condition('recommender_id', $recommender['recommender_id'])
    ->execute();

  // Implode the recommender keys arrays for storage.
  $recommender['user_keys'] = implode(',', $recommender['user_keys']);
  $recommender['item_keys'] = implode(',', $recommender['item_keys']);

  // Insert the updated recommender record.
  drupal_write_record('relify_recommender', $recommender);
}

/**
 * Submits a delete request for a recommender.
 *
 * @param $recommender_id
 *   The ID of the recommender to delete.
 *
 * @return
 *   The response object from the API request.
 */
function relify_request_recommender_delete($recommender_id) {
  // Submit the request.
  return relify_api_request('recommenders/' . $recommender_id . '/delete', 'POST');
}

/**
 * Deletes a recommender from the local database.
 *
 * @param $recommender
 *   The recommender to delete.
 */
function relify_recommender_delete($recommender) {
  // Delete the recommender definition.
  db_delete('relify_recommender')
    ->condition('recommender_id', $recommender['recommender_id'])
    ->execute();
}

/**
 * Submits a request for recommended items from a data set for a user.
 *
 * @param $recommender_id
 *   The recommender ID from which to request the recommended items.
 * @param $user_id
 *   The value of the recommender's user_identifier for which to generate the
 *   recommended items.
 * @param $count
 *   Optionally, the number of recommended items to return; Relify billing is
 *   metered based on the number of results you request from any recommender.
 *   Defaults to 5.
 * @param $last_key
 *   Optionally, the ID of the last recommended item received by which to offset
 *   recommendation results in order to page through the result set.
 *
 * @return
 *   The response object from the API request.
 */
function relify_request_recommended_items($recommender_id, $user_id, $count = 5, $last_key = NULL) {
  // Prepare the parameter array and submit the request.
  $data = array(
    'count' => $count,
  );

  if (!empty($last_key)) {
    $data['last_key'] = $last_key;
  }

  return relify_api_request('recommenders/' . $recommender_id . '/' . $user_id . '/recommended', 'GET', $data);
}

/**
 * Submits a request for similar items from a data set.
 *
 * @param $recommender_id
 *   The recommender ID from which to request the similar items.
 * @param $item_id
 *   The value of the recommender's item_identifier from which to generate the
 *   similar items.
 * @param $count
 *   Optionally, the number of similar items to return; Relify billing is
 *   metered based on the number of results you request from any recommender.
 *   Defaults to 5.
 * @param $last_key
 *   Optionally, the ID of the last similar item received by which to offset
 *   results in order to page through the result set.
 *
 * @return
 *   The response object from the API request.
 */
function relify_request_similar_items($recommender_id, $item_id, $count = 5, $last_key = NULL) {
  // Prepare the parameter array and submit the request.
  $data = array(
    'count' => $count,
  );

  if (!empty($last_key)) {
    $data['last_key'] = $last_key;
  }

  return relify_api_request('recommenders/' . $recommender_id . '/' . $item_id . '/most_similar', 'GET', $data);
}

/**
 * Implements hook_views_api().
 */
function relify_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'relify') . '/includes/views',
  );
}
