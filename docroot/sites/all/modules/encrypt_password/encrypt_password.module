<?php

/**
 * @file
 * Provide encryption for password hashes.
 */

define('ENCRYPT_PASSWORD_PASSWORD_PLACEHOLDER', '<encrypt_password>');

/**
 * Implements hook_permission().
 */
function encrypt_password_permission() {
  return array(
    'administer password encryption' => array(
      'title' => t('Administer password encryption'),
      'description' => t('Enable or disable encryption of user passwords.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_menu().
 */
function encrypt_password_menu() {
  $items = array();

  $items['admin/people/encrypt-passwords'] = array(
    'title' => 'Encrypt passwords',
    'description' => 'Manage settings for encrypting user passwords.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('encrypt_password_settings_form'),
    'access arguments' => array('administer password encryption'),
    'file' => 'includes/encrypt_password_admin.inc',
    'type' => MENU_NORMAL_ITEM,
    'weight' => 5,
  );

  return $items;
}

/**
 * Implements hook_user_presave().
 *
 * Save the encrypted password in the data column of the users table.
 */
function encrypt_password_user_presave(&$edit, $account, $category) {
  // Get the settings from $edit, if available. Otherwise, retrieve
  // saved settings.
  if (isset($edit['encrypt_password']['settings'])) {
    $settings = $edit['encrypt_password']['settings'];
  }
  else {
    $settings = _encrypt_password_get_settings();
  }

  // If the user's password wasn't submitted, get it from the
  // existing account, if there is one.
  if (!isset($edit['pass'])) {
    if (isset($account->pass)) {
      $edit['pass'] = $account->pass;
    }
    else {
      $edit['pass'] = '';
    }
  }

  // Get the user's roles from the roles field in the submitted form, if
  // available. Otherwise, get them from the existing account, if there is one.
  if (isset($edit['roles'])) {
    $user_roles = _encrypt_password_parse_roles($edit['roles']);
  }
  elseif (isset($account->roles)) {
    $user_roles = array_keys($account->roles);
  }
  else {
    $user_roles = array();
  }

  $role_matches = array_intersect($settings['roles'], $user_roles);

  // If password encryption is enabled and the user has a role marked for
  // encryption, encrypt the password.
  if ($settings['enabled'] && !empty($role_matches)) {
    $edit['data']['encrypt_password'] = encrypt_password_encrypt($edit['pass'], $settings['config']);
    $edit['pass'] = ENCRYPT_PASSWORD_PASSWORD_PLACEHOLDER;
  }
  // Otherwise, clear the encrypted password, if it exists.
  elseif (isset($account->data['encrypt_password'])) {
    $edit['data']['encrypt_password'] = NULL;
  }
}

/**
 * Implements hook_user_load().
 */
function encrypt_password_user_load($users) {
  foreach ($users as &$account) {
    // If this user's password is encrypted, decrypt it.
    if (isset($account->data['encrypt_password'])) {
      $account->pass = encrypt_password_decrypt($account->data['encrypt_password']);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function encrypt_password_form_system_modules_alter(&$form, &$form_state, $form_id) {
  $count = _encrypt_password_user_count('encrypted');

  // If there are any encrypted passwords, prevent the module from being
  // disabled.
  if ($count > 0) {
    $form['modules']['Encryption']['encrypt_password']['enable']['#disabled'] = TRUE;
    $form['modules']['Encryption']['encrypt_password']['#required_by'][] = t('@count passwords that are currently encrypted', array('@count' => $count));
  }
}

/**
 * Implements hook_user_role_delete().
 */
function encrypt_password_user_role_delete($role) {
  // TODO:
  // - Remove the deleted role from the settings.
  // - Decrypt any passwords of users whose passwords are encrypted only
  //   because they had the deleted role.
}

/**
 * Encrypt a hashed password.
 */
function encrypt_password_encrypt($hashed_password, $config = NULL) {
  // If the configuration wasn't specified, get it from settings.
  if (empty($config)) {
    $config = _encrypt_password_settings_config();
  }

  return encrypt($hashed_password, NULL, NULL, NULL, $config);
}

/**
 * Decrypt an encrypted password.
 */
function encrypt_password_decrypt($encrypted_password) {
  return decrypt($encrypted_password);
}

/**
 * Helper function to retrieve Encrypt Password settings.
 */
function _encrypt_password_get_settings($setting = NULL) {
  $settings = variable_get('encrypt_password_settings');

  // If no specific setting was requested, return all settings.
  if (empty($setting)) {
    return $settings;
  }

  // If there's a value for the requested setting, return it.
  if (!empty($settings[$setting])) {
    $value = $settings[$setting];
  }
  // Otherwise, return NULL.
  else {
    $value = NULL;
  }

  return $value;
}

/**
 * Helper function to determine if password encryption is enabled.
 */
function _encrypt_password_settings_enabled() {
  return _encrypt_password_get_settings('enabled');
}

/**
 * Helper function to return the encryption configuration setting.
 */
function _encrypt_password_settings_config() {
  return _encrypt_password_get_settings('config');
}

/**
 * Helper function to return the roles that will use encryption.
 */
function _encrypt_password_settings_roles() {
  return (array) _encrypt_password_get_settings('roles');
}

/**
 * Helper function to build a base for a select query on the users table.
 */
function _encrypt_password_users_select_query($state = NULL, $rids = NULL, $andor = 'AND') {
  // Make sure $rids is an array.
  $rids = (array) $rids;

  // If 'authenticated user' is one of the roles.
  if (($key = array_search(2, $rids)) !== FALSE) {
    // If this an OR query, remove state and role conditions, since
    // we need to retrieve all users.
    if ($andor == 'OR') {
      $state = NULL;
      $rids = array();
    }
    // Otherwise, remove the 'authenticated user' role.
    else {
      unset($rids[$key]);
    }
  }

  // Create the query object with common properties.
  $query = db_select('users', 'u')
    ->fields('u', array('uid'))
    ->condition('u.uid', 0, '!=')
    ->orderBy('u.uid', 'ASC');

  // Define the condition fragment, using either AND or OR.
  if ($andor == 'OR') {
    $condition = db_or();
  }
  else {
    $condition = db_and();
  }

  switch ($state) {
    case 'encrypted':
      $condition->condition('u.pass', ENCRYPT_PASSWORD_PASSWORD_PLACEHOLDER, '=');
      break;

    case 'unencrypted':
      $condition->condition(db_and()
          ->condition('u.pass', ENCRYPT_PASSWORD_PASSWORD_PLACEHOLDER, '!=')
          ->condition('u.pass', '', '!=')
      );
      break;

    case 'no_password':
      $condition->condition('u.pass', '', '=');
      break;
  }

  if (!empty($rids)) {
    $query->leftjoin('users_roles', 'ur', 'u.uid = ur.uid');
    $condition->condition('ur.rid', $rids, 'IN');
  }

  if ($condition->count() > 0) {
    $query->condition($condition);
  }

  return $query;
}

/**
 * Helper function to return a count of users.
 */
function _encrypt_password_user_count($state = NULL, $rids = NULL, $andor = 'AND') {
  $query = _encrypt_password_users_select_query($state, $rids, $andor);
  $result = $query->countQuery()->execute();
  $count = $result->fetchField();

  return $count;
}

/**
 * Helper function to return a list of user IDs.
 */
function _encrypt_password_user_ids($state = NULL, $rids = NULL, $andor = 'AND') {
  $query = _encrypt_password_users_select_query($state, $rids, $andor);
  $result = $query->execute();
  $uids = $result->fetchCol();

  return $uids;
}

/**
 * Helper function to parse roles.
 */
function _encrypt_password_parse_roles($roles) {
  $roles_result = array();

  foreach ($roles as $key => $role) {
    if ($role) {
      $roles_result[$key] = $key;
    }
  }

  return $roles_result;
}
