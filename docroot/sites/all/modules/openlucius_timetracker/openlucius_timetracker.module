<?php
/**
 * @file
 * This file contains all openlucius timetracker functions
 */

include_once 'openlucius_timetracker.features.inc';
include_once 'openlucius_timetracker.context.inc';
include_once 'includes/forms.inc';
include_once 'includes/blocks.inc';
include_once 'includes/redirects.inc';

define('OPENLUCIUS_TIMETRACKER_DEFAULT', 'default');
define('OPENLUCIUS_TIMETRACKER_USER', 'user');
define('OPENLUCIUS_TIMETRACKER_RAW', 'raw');
define('OPENLUCIUS_TIMETRACKER_BLOCK', 'block');

/**
 * Implements hook_init().
 */
function openlucius_timetracker_init() {

  // Add required css files.
  drupal_add_css(drupal_get_path('module', 'openlucius_timetracker') . '/css/timetracker.css');
}

/**
 * Implements hook_menu().
 */
function openlucius_timetracker_menu() {
  $items['node/%node/time'] = array(
    'title'            => 'Time',
    'page callback'    => 'openlucius_timetracker_reports_page',
    'page arguments'   => array(1),
    'file'             => 'page.inc',
    'file path'        => drupal_get_path('module', 'openlucius_timetracker') . '/includes',
    'access arguments' => array('create time entries'),
    'type'             => MENU_LOCAL_TASK,
    'weight'           => 99,
  );

  $items['reports'] = array(
    'title'            => 'Time overview',
    'page callback'    => 'openlucius_timetracker_reports_page',
    'file'             => 'page.inc',
    'file path'        => drupal_get_path('module', 'openlucius_timetracker') . '/includes',
    'access arguments' => array('view reports page'),
    'type'             => MENU_LOCAL_TASK,
  );

  $items['user/mytime'] = array(
    'title'            => 'My time reports',
    'file'             => 'redirects.inc',
    'file path'        => drupal_get_path('module', 'openlucius_timetracker') . '/includes',
    'page callback'    => 'openlucius_timetracker_my_time',
    'access arguments' => array('view reports page'),
    'type'             => MENU_NORMAL_ITEM,
    'menu_name'        => 'user-menu',
    'weight'           => -49,
  );

  $items['admin/config/openlucius/timetracker'] = array(
    'title'            => 'Timetracker Configuration',
    'description'      => 'Configure the timetracker for Openlucius.',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('openlucius_timetracker_config_form'),
    'access arguments' => array('administer timetracker'),
    'type'             => MENU_LOCAL_TASK,
    'tab_parent'       => 'admin/config/openlucius',
  );

  $items['admin/config/openlucius/timetracker/term/%taxonomy_term/edit'] = array(
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('openlucius_timetracker_taxonomy_term_edit', 5),
    'access arguments' => array('administer timetracker'),
    'type'             => MENU_LOCAL_TASK,
  );

  $items['timetracker/finish-active'] = array(
    'page callback'    => 'openlucius_timetracker_close_active',
    'access arguments' => array('create time entries'),
    'type'             => MENU_CALLBACK,
    'file'             => 'functions.inc',
    'file path'        => drupal_get_path('module', 'openlucius_timetracker') . '/includes',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function openlucius_timetracker_permission() {
  return array(
    'view reports page'      => array(
      'title'       => t('View reports page'),
      'description' => t('View the reports page containing all the entries for all users.'),
    ),
    'create time entries'    => array(
      'title'       => t('Create time entries'),
      'description' => t('Allow clocking and viewing of the node times.'),
    ),
    'administer timetracker' => array(
      'title'       => t('Administer timetracker configuration'),
      'description' => t('Allow configuration of the timetracker.'),
    ),
  );
}

/**
 * Implements hook_views_pre_render().
 */
function openlucius_timetracker_views_pre_render(&$view) {

  // Todos on todolist page.
  if ($view->name == 'todos_on_todo_list_page') {
    foreach ($view->result as &$result) {
      $result->shared_time_maximum = $result->_field_data['nid_1']['entity']->field_shared_time_maximum[LANGUAGE_NONE][0]['value'];
    }
  }
  // Todos in group dashboard.
  if ($view->name == 'all_todo_lists_in_a_group') {
    foreach ($view->result as &$result) {
      $result->shared_time_maximum = $result->_field_data['nid']['entity']->field_shared_time_maximum[LANGUAGE_NONE][0]['value'];
    }
  }
}

/**
 * Implements hook_theme().
 */
function openlucius_timetracker_theme($existing, $type, $theme, $path) {
  return array(
    'views_view_table__todos_on_todo_list_page'   => array(
      'variables' => array(
        'view'    => NULL,
        'options' => NULL,
        'rows'    => NULL,
        'title'   => NULL,
      ),
      'template'  => 'views-view-table--todos-on-todo-list-page',
      'base hook' => 'views_view_table',
      'path'      => drupal_get_path('module', 'openlucius_timetracker') . '/templates',
    ),
    'views_view_table__all_todo_lists_in_a_group' => array(
      'variables' => array(
        'view'    => NULL,
        'options' => NULL,
        'rows'    => NULL,
        'title'   => NULL,
      ),
      'template'  => 'views-view-table--all-todo-lists-in-a-group',
      'base hook' => 'views_view_table',
      'path'      => drupal_get_path('module', 'openlucius_timetracker') . '/templates',
    ),
    'openlucius_timetracker_body'                 => array(
      'template' => 'templates/timetracker-body',
    ),
  );
}

/**
 * Implements hook_libraries_info().
 *
 * TODO add version requirement, future versions may not work.
 */
function openlucius_timetracker_libraries_info() {
  $libraries            = array();
  $libraries['chartjs'] = array(
    'name'             => 'Chart.js',
    'vendor url'       => 'http://www.chartjs.org/',
    'download url'     => 'https://github.com/nnnick/Chart.js/archive/master.zip',
    'version callback' => '_openlucius_timetracker_chartjs_version',
    'files'            => array(
      'js' => array(
        'Chart.min.js',
      ),
    ),
  );

  return $libraries;
}

/**
 * Version callback for the timetracker.
 * @return bool
 *   Returns TRUE, currently every version seems to work.
 */
function _openlucius_timetracker_chartjs_version() {
  return TRUE;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function openlucius_timetracker_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  global $user;

  if (user_access('create time entries') && isset($router_item['page_callback']) && $router_item['page_callback'] == 'node_page_view') {

    // Fetch the node.
    $node = $router_item['page_arguments'][0];

    // Check if we're on a todo.
    if ($node->type == 'ol_todo') {
      // Load the functions for the timetracker.
      module_load_include('inc', 'openlucius_timetracker', 'includes/functions');

      // Check if the starting button is required.
      $active = _openlucius_timetracker_timer_get_active($user->uid);

      // Append Start timer when required.
      if (empty($active) || $active->nid !== $router_item['page_arguments'][0]->nid) {
        $data['tabs'][0]['count']++;
        $data['tabs'][0]['output'][] = array(
          '#theme' => 'menu_local_task',
          '#link'  => array(
            'title'             => '<span class="glyphicon glyphicon-time"></span> ' . t('Start timer'),
            'href'              => 'node/' . $node->nid . '/start-timer',
            'localized_options' => array(
              'attributes' => array(
                'class' => array('start-node-timer'),
              ),
              'html'       => TRUE,
            ),
          ),
        );
      }
    }

    // Hide local-task if not the correct type.
    elseif (!in_array($node->type, array('ol_todo', 'ol_todo_list'))) {
      if (!empty($data['tabs'][0]['output'])) {
        foreach ($data['tabs'][0]['output'] as $key => &$item) {
          if ($item['#link']['path'] == 'node/%/time') {
            $data['tabs'][0]['count']--;
            unset($data['tabs'][0]['output'][$key]);
          }
        }
      }
    }
  }
}

/**
 * Function for adding the required javascript.
 */
function _openlucius_timetracker_add_chart_js() {

  // Try to load the required library.
  $chart = libraries_load('chartjs');

  // Check if the library was loaded successfully.
  if (isset($chart['loaded']) && $chart['loaded'] == 1) {
    drupal_add_js($chart['library path'] . '/Chart.min.js');
  }

  // Display message when this fails.
  else {
    drupal_set_message(t('Chart.js library could not be loaded'), 'error');
  }
  drupal_add_js(drupal_get_path('module', 'openlucius_timetracker') . '/js/timetracker_bar.js');
}
