<?php

/**
 * @file
 * Allow modules to include multiple version of jQuery into the page.
 * By default, jQueries load jQuery from the Google CDN with the following
 * version.
 *
 * - 1.2 : https://ajax.googleapis.com/ajax/libs/jquery/1.2.6/jquery.min.js
 * - 1.3 : https://ajax.googleapis.com/ajax/libs/jquery/1.3.2/jquery.min.js
 * - 1.4 : https://ajax.googleapis.com/ajax/libs/jquery/1.4.4/jquery.min.js
 * - 1.5 : https://ajax.googleapis.com/ajax/libs/jquery/1.5.2/jquery.min.js
 * - 1.6 : https://ajax.googleapis.com/ajax/libs/jquery/1.6.4/jquery.min.js    '
 * - 1.7 : https://ajax.googleapis.com/ajax/libs/jquery/1.7.0/jquery.min.js
 *
 * As well as the jQuery source, jQueries also load the jQuery UI 1.8.x with
 * each version instance. Modules may implement hook_jqueries_alter() to alter
 * the different jQuery source and the jQuery UI
 * version by return an associative array:
 *   array(
 *     '<version>' => array(
 *        '<jquery_url>',
 *        '<jquery_ui_url>',
 *   );
 *
 * To request for the versions of jQuery to be included into the page, modules
 * will implement hook_jqueries_include() to return an associative array of
 * array('<version>' => '<variable_name>'). Once the page is loaded, the modules
 * can refer to the specified their own jQuery by the variable name in the array
 * returned from the hook.
 *
 * For example, if the module implements hook_jqueries_include() like this:
 *
 * <code>
 * function my_module_jqueries_include() {
 *   return array('1.2' => 'j12');
 * }
 * </code>
 *
 * Then, the module can refer to the jQuery 1.2 in the page using the JavaScript
 * variable name "j12".
 */

define('JQUERIES_NO_CONFLICT', '%var = jQuery; jQuery.noConflict(true);');

/**
 * Implements hook_html_head_alter()
 */
function jqueries_html_head_alter(&$elements) {

  // google's jQuery CDN
  $cdn = array(
    '1.3' => array(
      'https://ajax.googleapis.com/ajax/libs/jquery/1.3.2/jquery.min.js',
      'https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.16/jquery-ui.min.js',
    ),

    '1.4' => array(
      'https://ajax.googleapis.com/ajax/libs/jquery/1.4.4/jquery.min.js',
      'https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.16/jquery-ui.min.js',
    ),

    '1.5' => array(
      'https://ajax.googleapis.com/ajax/libs/jquery/1.5.2/jquery.min.js',
      'https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.16/jquery-ui.min.js',
    ),

    '1.6' => array(
      'https://ajax.googleapis.com/ajax/libs/jquery/1.6.4/jquery.min.js',
      'https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.16/jquery-ui.min.js',
    ),

    '1.7' => array(
      'https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js',
      'https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.18/jquery-ui.min.js',
    ),
  );

  // allow the modules to alter the URL
  drupal_alter('jqueries', $cdn);

  // allow the modules to specify the required version
  $req = (array) module_invoke_all('jqueries_include');

  // add our script in front of the others
  if ( ! empty($req) ) {
    $elements['jqueries'] = array('#markup' => '');
    foreach ( $req as $ver => $var ) {
      if ( ! isset($cdn[$ver]) ) {
        watchdog('jqueries', "jQuery :version is not available, skip", array(':version' => $ver));
        continue;
      }
      foreach ( $cdn[$ver] as $src ) {
        // $elements['jqueries']['#markup'] .= drupal_get_js('header', array(drupal_js_defaults($src))); // -- http://drupal.org/node/1494598
        $elements['jqueries']['#markup'] .= '<script type="text/javascript" src="'.$src.'"></script>'.PHP_EOL;
      }
      $elements['jqueries']['#markup'] .= drupal_get_js('header', array(array_merge(drupal_js_defaults(str_replace('%var', $var, JQUERIES_NO_CONFLICT)), array('type' => 'inline'))));
    }
  }
}
