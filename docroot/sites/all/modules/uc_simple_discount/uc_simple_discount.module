<?php

/**
 * Implements hook_menu().
 */
function uc_simple_discount_menu() {

  $items['admin/store/settings/uc_simple_discount'] = array(
    'title' => 'Simple Discounts',
    'description' => 'Configure the Simple discount module\'s settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_simple_discount_settings'),
    'access arguments' => array('administer store'),
  );

  return $items;
}

/**
 * Implements hook_uc_cart_alter();
 */
function uc_simple_discount_uc_cart_alter(&$items) {
  foreach ($items as &$item) {
    rules_invoke_event('uc_simple_discount_cart_alter_product', $items, $item);
  }

  foreach ($items as &$item) {
    if (isset($item->uc_simple_discount) && is_array($item->uc_simple_discount)) {
      $uc_simple_discount = array();
      $discount_total = 0;

      foreach ($item->uc_simple_discount as $discount) {
        $discount_total += $discount['percent'];
        $rule = array(
          'label' => $discount['rule'],
          'percent' => $discount['percent'],
          'amount' => 0,
        );
        $uc_simple_discount['rules'][] = $rule;
      }

      if ($discount_total) {
        // Calculate original price
        $amount = 0;
        $suffixes = array();
        if (module_exists('uc_taxes')) {
          list($amount, $suffixes) = uc_taxes_get_included_tax($item, isset($item->order) ? $item->order : NULL);
        }
        $uc_simple_discount['original'] = $item->price;
        $uc_simple_discount['original_taxes'] = $amount+$item->price;
        $uc_simple_discount['original_taxes_subtotal'] = $uc_simple_discount['original_taxes']*$item->qty;
        $uc_simple_discount['original_taxes_suffixes'] = $suffixes;
        $uc_simple_discount['percent'] = $discount_total;
        $uc_simple_discount['product'] = (100-$discount_total)/100;
        $item->price *= $uc_simple_discount['product'];
        $item->uc_simple_discount = $uc_simple_discount;
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Display discounts on the cart page
 */
function uc_simple_discount_form_uc_cart_view_form_alter(&$form, &$form_state, $form_id) {
  $discount_total = 0;
  $discount_rules = array();

  foreach ($form['items'] as $k => $item) {
    if (is_numeric($k) && isset($item['#entity'])) {
      // Special produt kit handling
      if ($item['#entity']->type == 'product_kit') {
        $data = unserialize($item['data']['#value']);
        foreach ($data as $product) {
          if (isset($product->uc_simple_discount)) {
            if (!isset($item['#entity']->uc_simple_discount['original_taxes_subtotal'])) {
              $item['#entity']->uc_simple_discount['original_taxes_subtotal'] = 0;
            }
            if (!isset($item['#entity']->uc_simple_discount['rules'])) {
              $item['#entity']->uc_simple_discount['rules'] = array();
            }
            $item['#entity']->uc_simple_discount['original_taxes_subtotal'] += $product->uc_simple_discount['original_taxes_subtotal'];
            $item['#entity']->uc_simple_discount['rules'] += $product->uc_simple_discount['rules'];
          }
        }
      }

      if (isset($item['#entity']->uc_simple_discount)) {
        $discount = $item['#entity']->uc_simple_discount;

        foreach ($discount['rules'] as $rule) {
          $rule['amount'] += $rule['percent']*$discount['original_taxes_subtotal']/100;
          $discount_rules[] = $rule;
        }

        // Calculate total discounts using original price
        $discount_total += $discount['original_taxes_subtotal'] - $item['total']['#price'];

        $form['items'][$k]['total']['#prefix'] = _uc_simple_discount_get_linethrough($item['#entity']);
      }
    }
  }

  // Show any discount applied in the cart.
  if (variable_get('uc_simple_discount_show', 0) && !empty($discount_total)) {

    $form['items'][] = array(
      'total' => array(
        '#markup' => '<span id="discount-title">' . t('Total includes the following discounts:') . '</span>',
        '#cell_attributes' => array(
          'class' => array('uc-simple-discount', 'subtotal'),
          'colspan' => 'full',
        )
      )
    );

    // Group rules applied by label
    $unique_discount_rules = array();
    foreach ($discount_rules as $rule) {
      if (!isset($unique_discount_rules[$rule['label']])) {
        $unique_discount_rules[$rule['label']] = $rule;
      }
      else {
        $unique_discount_rules[$rule['label']]['amount'] += $rule['amount'];
      }
    }
    foreach ($unique_discount_rules as $rule) {
      $form['items'][] = array(
        'total' => array(
          '#theme' => 'uc_price',
          '#price' => $rule['amount'],
          '#prefix' => '<span id="discount-title">' . $rule['label'] . ':</span>',
          '#cell_attributes' => array(
            'class' => array('uc-simple-discount', 'subtotal'),
            'colspan' => 'full',
          ),
        )
      );
    }
  }
}

/**
 * Alter the order product view for checkout and order view/edit screens.
 */
function uc_simple_discount_entity_view_alter(&$build, $type) {
  if ($type == 'uc_order_product') {
    if (isset($build['#entity']->data['uc_simple_discount'])) {
      $build['total']['#prefix'] = _uc_simple_discount_get_linethrough($build['#entity']);
    }
  }
}

/**
 * Add the discount to the product data here.
 *
 * @param $entity
 *   The entity object.
 * @param $type
 *   The type of entity being saved (i.e. node, user, comment).
 */
function uc_simple_discount_entity_presave($entity, $type) {
  if ($type == 'uc_order_product') {
    if (isset($entity->uc_simple_discount)) {
      $entity->data['uc_simple_discount'] = $entity->uc_simple_discount;
    }
  }
}

/**
 * Utility function to get the original price with a linethrough
 */
function _uc_simple_discount_get_linethrough($product) {
  $linethrough = '';

  if (isset($product->uc_simple_discount)) {
    $discount = $product->uc_simple_discount;
  }

  if (is_array($product->data) && isset($product->data['uc_simple_discount'])) {
    $discount = $product->data['uc_simple_discount'];
  }

  if ($discount) {
    // Calculate original price
    $original_total = $discount['original_taxes_subtotal'];

    // Alter total
    $variables_original = array();
    $variables_original['price'] = $original_total;
    $variables_original['suffixes'] = isset($discount['original_taxes_suffixes']) ? $discount['original_taxes_suffixes'] : array();

    $linethrough = '<div class="uc-simple-discount-original">' . theme('uc_price',  $variables_original) . '</div>';
  }

  return $linethrough;
}

/**
 * Implements hook_uc_order().
 */
function uc_simple_discount_uc_orderr($op, $order, $arg2) {
  switch($op) {
    case 'save':
      // If we are in the checkout pages, make sure we store the most up to date
      // discount info in the order, to prevent stale data
      if (preg_match('@^cart/checkout@', current_path())) {
        $items = uc_cart_get_contents();
        $keys = array_keys($order->products);
        // Assuming same position in cart/order products
        foreach(array_values($items) as $k => $item) {
          if (!isset($item->uc_simple_discount)) {
            unset($order->products[$keys[$k]]->data['uc_simple_discount']);
            $order->products[$keys[$k]]->price = $item->price;
          }
          else {
            $order->products[$keys[$k]]->data['uc_simple_discount'] = $item->uc_simple_discount;
            $order->products[$keys[$k]]->price = $item->price;
          }
        }
      }

      $discount_rules = array();
      foreach($order->products as $product) {
        if (isset($product->data['uc_simple_discount'])) {
          $discount = $product->data['uc_simple_discount'];

          foreach ($discount['rules'] as $rule) {
            $rule['amount'] += $rule['percent']*$discount['original_taxes_subtotal']/100;
            $discount_rules[] = $rule;
          }
        }
      }

      // Group rules applied by label
      $unique_discount_rules = array();
      foreach ($discount_rules as $rule) {
        if (!isset($unique_discount_rules[$rule['label']])) {
          $unique_discount_rules[$rule['label']] = $rule;
        }
        else {
          $unique_discount_rules[$rule['label']]['amount'] += $rule['amount'];
        }
      }
      // Loop through existing line items and delete previous discount items.
      if (is_array($order->line_items)) {
        foreach ($order->line_items as $i => $line) {
          if ($line['type'] == 'tax_uc_simple_discount') {
            uc_order_delete_line_item($line['line_item_id']);
            unset($order->line_items[$i]);
          }
        }
      }
      // Store discount applied
      if (variable_get('uc_simple_discount_show', 0)) {
        foreach ($unique_discount_rules as $rule) {
          uc_order_line_item_add($order->order_id, 'tax_uc_simple_discount', $rule['label'], $rule['amount']);
        }
      }
      break;
  }
}

/**
 * Implements hook_uc_line_item().
 */
function uc_simple_discount_uc_line_item() {
  $items['uc_simple_discount'] = array(
    'title' => t('Discount'),
    'weight' => 20,
    'stored' => FALSE,
    'default' => FALSE,
    'calculated' => FALSE,
    'display_only' => TRUE,
    'callback' => 'uc_line_item_uc_simple_discount',
  );

  return $items;
}


/**
 * Menu form: AJAX Cart settings.
 */
function uc_simple_discount_settings($form, &$form_state) {
  $form = array();

  $form['uc_simple_discount_show'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show discounts in cart and checkout'),
    '#description' => t('If enabled, extra items in checkout and in the order will be shown to the customer.'),
    '#default_value' => variable_get('uc_simple_discount_show', 0),
  );

  $form['uc_simple_discount_extra'] = array(
    '#type' => 'textarea',
    '#title' => t('Extra discounts'),
    '#description' => t('Enter extra pre-defined discounts, one per line, in the format: AMOUNT%|LABEL. i.e. 40|40% staff discount. Remember that the label should complete the sentece starting with "@prefix" ...', array('@prefix' => t('Order total includes'))),
    '#default_value' => variable_get('uc_simple_discount_extra', ''),
  );

  return system_settings_form($form);
}

function uc_simple_discount_uc_order_pane() {
  $panes['uc_simple_discount_admin'] = array(
    'callback' => 'uc_order_pane_uc_simple_discount_admin',
    'title' => t('Simple discount'),
    'desc' => t('Add a global discount to an order, used for administrators.'),
    'class' => 'abs-left',
    'weight' => 6,
    'show' => array('view', 'edit'),
  );
  return $panes;
}

/**
 * Handles the "Admin Comments" order pane.
 */
function uc_order_pane_uc_simple_discount_admin($op, $order, &$form = NULL, &$form_state = NULL) {
  global $user;

  switch ($op) {
    case 'edit-form':

      $options = uc_simple_discount_get_options();

      $form['uc_simple_discount']['uc_simple_discount_config'] = array(
        '#type' => 'select',
        '#title' => t('Pre-configured discounts'),
        '#description' => t('You can choose one of the pre-configured discounts.'),
        '#options' => $options,
        //#default_value' => isset($form_state['values']['uc_simple_discount_reason']) ? $form_state['values']['uc_simple_discount_reason'] : '',
      );

      $form['uc_simple_discount']['uc_simple_discount'] = array(
        '#type' => 'textfield',
        //'#default_value' => isset($form_state['values']['uc_simple_discount']) ? $form_state['values']['uc_simple_discount'] : '',
        '#size' => 5,
        '#field_prefix' => '%',
        '#title' => t('Amount'),
        '#description' => t('Enter 0 to remove any previously applied discount.'),
      );
      $form['uc_simple_discount']['uc_simple_discount_reason'] = array(
        '#type' => 'textfield',
        '#title' => t('Reason'),
        '#field_prefix' => t('Order total includes'),
        '#description' => t('Please finish off the sentence "!prefix ..." with your reason so that is properly displayed all around.', array('!prefix' => t('Order total includes'))),
        //#default_value' => isset($form_state['values']['uc_simple_discount_reason']) ? $form_state['values']['uc_simple_discount_reason'] : '',
        '#size' => 45,
      );

      $form['uc_simple_discount']['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Apply'),
      );
      $form['uc_simple_discount']['text'] = array(
        '#markup' => t('<p>The discount will affect the product prices so that VAT calculations are performed properly, specifically in mixed orders of taxable/non-taxed items. If you apply a discount to an order that already had a discount applied, the original price will be used. The original price will also be used if you apply a discount to an order that already had a discount applied and which also has had prices edited manually.</p>'),
      );
      return $form;

    case 'edit-theme':
      return drupal_render($form['uc_simple_discount']);

    case 'edit-process':

      $discount = FALSE;
      if ($discount === FALSE && isset($form_state['values']['uc_simple_discount_config']) && $form_state['values']['uc_simple_discount_config'] != '') {
        $select = $form_state['values']['uc_simple_discount_config'];
        preg_match('/__([0-9]+)$/', $select, $matches);
        if (!empty($matches)) {
          $options = uc_simple_discount_get_options();
          $discount = $matches[1];
          $reason = $options[$select];
        }
        else {
          form_error($form['uc_simple_discount']['uc_simple_discount_config'], t('No matching discount was found, please contact administrator.'));
        }
      }

      if ($discount === FALSE && isset($form_state['values']['uc_simple_discount']) && $form_state['values']['uc_simple_discount'] != '') {
        $discount = $form_state['values']['uc_simple_discount'];
        if (!is_numeric($discount)) {
          form_error($form['uc_simple_discount']['uc_simple_discount'], t('Please enter a numeric value'));
        }
        if ($discount >0 && empty($form_state['values']['uc_simple_discount_reason'])) {
          form_error($form['uc_simple_discount']['uc_simple_discount_reason'], t('When providing a discount, reason cannot be left empty.'));
        }
        $reason = $form_state['values']['uc_simple_discount_reason'];
      }

      if ($discount !== FALSE) {
        // Here we are good to process
        foreach ($form_state['values']['products'] as &$product) {
          $data = unserialize($product['data']);
          if ($discount == 0) {
            if (isset($data['uc_simple_discount'])) {
              $product['price'] = $data['uc_simple_discount']['original'];
              unset($data['uc_simple_discount']);
            }
          }
          else {
            if (isset($data['uc_simple_discount'])) {
              // reassign discounts
              $d = &$data['uc_simple_discount'];
              $d['percent'] = $discount;
              $d['product'] = (100-$discount)/100;
              $d['rules'] = array(
                array(
                  'label' => $reason,
                  'percent' => $discount,
                )
              );
              $product['price'] = $d['product'] * $d['original'];
            }
            else {
              // He are we need to construct as if a simple discount were applied to the products
              //A little bit strange, maybe a better way to do it
              $d = array();
              $d['percent'] = $discount;
              $d['product'] = (100-$discount)/100;
              $d['rules'] = array(
                array(
                  'label' => $reason,
                  'percent' => $discount,
                )
              );

              // Calculate original price
              $p = (object) $product;
              $p->data = $data;
              list($amount, $suffixes) = uc_taxes_get_included_tax($p, $order);
              $d['original'] = $p->price;
              $d['original_taxes'] = $amount+$p->price;
              $d['original_taxes_subtotal'] = $d['original_taxes']*$p->qty;
              $d['original_taxes_suffixes'] = $suffixes;

              $data['uc_simple_discount'] = $d;

              $product['price'] = $d['product'] * $d['original'];
            }
          }

          $product['data'] = serialize($data);
        }

        if ($discount == 0) {
          uc_order_comment_save($order->order_id, $user->uid, t('Discount has been removed.'));
        }
        else {
          uc_order_comment_save($order->order_id, $user->uid, t('A !amount% discount has been applied to the order Reason: !reason.', array('!amount' => $discount, '!reason' => $reason)));
        }
      }
      return;
  }
}

function uc_line_item_uc_simple_discount($op, $order) {
  $lines = array();

  $discount_rules = array();
  foreach($order->products as $product) {
    if (isset($product->data['uc_simple_discount'])) {
      $discount = $product->data['uc_simple_discount'];

      foreach ($discount['rules'] as $rule) {
        if (!isset($rule['amount'])) {
          $rule['amount'] = 0;
        }
        $rule['amount'] += $rule['percent']*$discount['original_taxes_subtotal']/100;
        $discount_rules[] = $rule;
      }
    }
  }

  // Group rules applied by label
  $unique_discount_rules = array();
  foreach ($discount_rules as $rule) {
    if (!isset($unique_discount_rules[$rule['label']])) {
      $unique_discount_rules[$rule['label']] = $rule;
    }
    else {
      $unique_discount_rules[$rule['label']]['amount'] += $rule['amount'];
    }
  }


  if (variable_get('uc_simple_discount_show', 0)) {
    foreach ($unique_discount_rules as $rule) {
      $line = array(
        'id' => 'uc_simple_discount',
        'title' => t('Order total includes') . ' ' . $rule['label'],
        'amount' => $rule['amount'],
        'weight' => 20,
      );
      $lines[] = $line;
    }
  }

  return $lines;
}

function uc_simple_discount_get_options() {
  $options = array('' => t('Please select'));
  $rules_configs = rules_config_load_multiple(FALSE);
  foreach ($rules_configs as $rules_config) {
    if (in_array('uc_simple_discount', $rules_config->dependencies)) {
      $discount = 0;
      foreach ($rules_config->actions() as $action) {
        if ($action->getElementName() == 'uc_simple_discount_apply') {
          $discount += $action->settings['discount'];
        }
      }
      if ($discount) {
        $options['rules_' . $rules_config->name . '__' . $discount] = $rules_config->label();
      }
    }
  }

  $extra = variable_get('uc_simple_discount_extra', '');
  if (!empty($extra)) {
    $extra = trim($extra);
    $extras = explode("\r\n", $extra);
    foreach ($extras as $k => $extra) {
      $values = explode('|', $extra);
      $options['extra_' . $k . '__' . $values[0]] = $values[1];
    }
  }

  return $options;
}
