<?php
/**
 * @file
 * Tests for the vinculum module.
 */

/**
 * Test that the list of handlers is loaded properly.
 */
class VinculumLoadHandlersTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'API: Load handlers',
      'description' => 'Test the registration of vinculum handlers.',
      'group' => 'Vinculum',
    );
  }

  function setUp() {
    parent::setUp('vinculum', 'vinculum_dummy_handler');
  }


  /**
   * Test the module-weight listing helper.
   */
  function testGetModuleWeights() {
    $expected_weights = array(
      'vinculum' => 0,
      'vinculum_dummy_handler' => 0,
    );

    $weights = _vinculum_get_module_weights(array('vinculum', 'vinculum_dummy_handler'));

    $this->assertTrue(count($weights) == 2, t('@count weights reported.', array('@count' => count($weights))));
    $this->assertEqual($weights, $expected_weights, t('Helper reports correct weights for the modules.'));
  }

  /**
   * Enable a dummy handler and check the hooks provide the proper handler
   * information.
   */
  function testLoadHandler() {
    // With the dummy handler enabled, the protocol-list should show a single
    // handler:
    $expected_handler = (object) array(
      'protocol' => t('Dummy handler'),
      'module'   => 'vinculum_dummy_handler',
      'weight'   => 0,
    );

    $handlers = vinculum_load_all_handlers(TRUE);
    $this->assertTrue(count($handlers) == 1, t('@count handler loaded.', array('@count' => count($handlers))));
    $this->assertEqual(array_shift($handlers), $expected_handler, t('Handler has correct information.'));
  }

  /**
   * Check that the vinculum_load_all_handlers() helper will always provide the
   * handlers ordered by module-weight, and that the vinculum_set_weight()
   * helper will correctly reset the system module-weight caches.
   */
  function testResetModuleWeights() {
    // Enable the second handler.
    module_enable(array('vinculum_dummy_handler2'));

    // With both dummy handlers enabled, the protocol-list should show both
    // handlers, ordered by filename
    $expected_handlers = array();
    $expected_handlers['vinculum_dummy_handler'] = (object) array(
      'protocol' => t('Dummy handler'),
      'module'   => 'vinculum_dummy_handler',
      'weight'   => 0,
    );
    $expected_handlers['vinculum_dummy_handler2'] = (object) array(
      'protocol' => t('Dummy handler 2'),
      'module'   => 'vinculum_dummy_handler2',
      'weight'   => 0,
    );


    $handlers = vinculum_load_all_handlers(TRUE);
    $this->assertTrue(count($handlers) == 2, t('@count handlers loaded.', array('@count' => count($handlers))));
    $this->assertEqual($handlers, $expected_handlers, t('Unweighted handlers are sorted correctly (by module name).'));

    // Give the first dummy handler a high weight.
    $weights = array(
      'vinculum_dummy_handler' => 5,
    );
    vinculum_set_weights($weights);

    $expected_handlers = array();
    $expected_handlers['vinculum_dummy_handler2'] = (object) array(
      'protocol' => t('Dummy handler 2'),
      'module'   => 'vinculum_dummy_handler2',
      'weight'   => 0,
    );
    $expected_handlers['vinculum_dummy_handler'] = (object) array(
      'protocol' => t('Dummy handler'),
      'module'   => 'vinculum_dummy_handler',
      'weight'   => 5,
    );
    $handlers = vinculum_load_all_handlers(TRUE);
    $this->assertTrue(count($handlers) == 2, t('@count handlers loaded.', array('@count' => count($handlers))));
    $this->assertEqual($handlers, $expected_handlers, t('Weighted handlers are sorted correctly, with the higher-weight module coming second.'));
  }
}



/**
 * Test that node-saving triggers the vinculum protocol.
 */
class VinculumSendTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'API: Send vinculums',
      'description' => 'Test that vinculums are sent when a node is saved.',
      'group' => 'Vinculum',
    );
  }

  function setUp() {
    parent::setUp('vinculum', 'vinculum_dummy_handler');

    // Create a dummy content-type
    $type = array(
      'type' => 'vinculum_dummy_contenttype',
      'name' => st('Vinculum dummy content-type'),
      'base' => 'node_content',
      'description' => st("A dummy content-type, used for testing the Vinculum module. This content-type should not be visible."),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    );
    $type = node_type_set_defaults($type);
    node_type_save($type);
    node_add_body_field($type);
  }




  /**
   * Test the extraction of text from a node field.
   */
  function testFieldExtraction() {
    $source_text = "Example plain text which suggests the links http://example.com/ and http://foo.example.com/bar/x.html";

    // Dummy node, not to be used with drupalCreateNode().
    $node = new stdClass;
    $node->type = 'vinculum_dummy_contenttype';
    $node->body = array(
      LANGUAGE_NONE => array(
        0 => array(
          'value' => $source_text,
          'format' => 'plain_text',
        ),
      ),
    );

    // The expected text is the source text, wrapped in <p> tags. with the links wrapped in <a> tags.
    $expected = '<p>Example plain text which suggests the links <a href="http://example.com/">http://example.com/</a> and <a href="http://foo.example.com/bar/x.html">http://foo.example.com/bar/x.html</a></p>';
    $extract = trim(_vinculum_extract_text($node));
    $this->assertEqual($expected, $extract, t('Helper correctly extracts the text from the field.'));
  }


  /**
   * Test the discovery of URLs within text.
   */
  function testUrlExtraction() {
    $text = "
      This is a section of test text which <a href='http://example.com/'>links
      to example</a> and <a href='http://foo.example.com/bar/x.html'>links to
      another example</a>.";

    $expected_links = array(
      'http://example.com/',
      'http://foo.example.com/bar/x.html',
    );

    $links = _vinculum_extract_urls($text);

    $this->assertTrue(count($links) == 2, t('@count links reported.', array('@count' => count($links))));
    $this->assertEqual($links, $expected_links, t('Helper reports correct links for the sample text.'));
  }

  /**
   * Test that the helper to send a single vinculum is processed.
   */
  function testSendSingleVinculum() {
    $node = $this->drupalCreateNode();
    $source = "node/{$node->nid}";
    $target = "http://example.com/";
    $handler_result = vinculum_send_single_vinculum($source, $target, $node);
    $this->assertTrue($handler_result, t('The dummy vinculum handler reports success.'));

    $vinculum_is_recorded = vinculum_is_sent($node->nid, $target);
    $this->assertTrue($vinculum_is_recorded, t('The vinculum has been tracked in the DB.'));
  }

  /**
   * Test that vinculums are attempted when a node is saved.
   */
  function testSendVinculums() {
    $text = "
      This is a section of test text which <a href='http://example.com/'>links
      to example</a> and <a href='http://foo.example.com/bar/x.html'>links to
      another example</a>.";

    $settings = array(
      'type' => 'vinculum_dummy_contenttype',
      'title' => 'Example node used for testing the vinculum module.',
      'body' => array(
        LANGUAGE_NONE => array(
          0 => array(
            'value' => $text,
            'format' => filter_default_format(),
          ),
        ),
      ),
    );
    $node = $this->drupalCreateNode($settings);

    // After the node is saved, a record should be added to the
    // {node_vinculum_sent table recording 'vinculum_dummy_handler' as the
    // handler which successfully sent the vinculum.
    $target = 'http://example.com/';
    $success = vinculum_is_sent($node->nid, $target);
    $this->assertTrue($success, t('The link to @target has been successfully recorded.', array('@target' => $target)));

    $target = 'http://foo.example.com/bar/x.html';
    $success = vinculum_is_sent($node->nid, $target);
    $this->assertTrue($success, t('The link to @target has been successfully recorded.', array('@target' => $target)));
  }

}


/**
 * Test that node-saving triggers the vinculum protocol.
 */
class VinculumTestSuiteTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'API: Test whole suite',
      'description' => 'Test the full pingback/trackback process with dummy test endpoints.',
      'group' => 'Vinculum',
    );
  }

  function setUp() {
    parent::setUp('vinculum', 'vinculum_pingback', 'vinculum_trackback', 'vinculum_trackback_autodiscovery', 'vinculum_dummy_endpoints');

    // Create a dummy content-type
    $type_machine_name = 'vinculum_dummy_contenttype';
    $type = array(
      'type' => $type_machine_name,
      'name' => st('Vinculum dummy content-type'),
      'base' => 'node_content',
      'description' => st("A dummy content-type, used for testing the Vinculum module. This content-type should not be visible."),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    );
    $type = node_type_set_defaults($type);
    node_type_save($type);
    node_add_body_field($type);

    // Allow vinculums to be sent for this content-type.
    variable_set("vinculum_send_{$type_machine_name}", TRUE);
  }




  /**
   * Test the general setup.
   */
  function testSetup() {
    // Check that the helper functions can properly extract the URLs from the node.

    $url = url('vinculum_dummy_endpoints/no_vinculum_support', array('absolute' => TRUE));
    // $text = "
    //   This is a section of test text which <a href='{$url}'>links to a test
    //   endpoint</a>.";
    $text = "This is a section of test text which references {$url}.";

    // Check that the correct URL is extracted from the text.
    $links = _vinculum_extract_urls($text);
    $expected = array($url);
    $this->assertEqual($links, $expected, t('Links can be extracted from the text.'));

    $settings = array(
      'type' => 'vinculum_dummy_contenttype',
      'title' => 'Example node used for testing the vinculum module.',
      'body' => array(
        LANGUAGE_NONE => array(
          0 => array(
            'value' => $text,
            'format' => filter_default_format(),
          ),
        ),
      ),
    );
    $node = $this->drupalCreateNode($settings);

    // Check that the correct URL is extracted from the node.
    $node = node_load($node->nid);
    $links = vinculum_get_external_links($node);
    $expected = array($url);
    $this->assertEqual($links, $expected, t('Links can be extracted from the node.'));
  }


  /**
   * Support for an endpoint with no vinculum support.
   */
  function testNoVinculumSupport() {
    // Create a node linking to vinculum_dummy_endpoints/no_vinculum_support.
    // The vinculum should report failure.

    $url = url('vinculum_dummy_endpoints/no_vinculum_support', array('absolute' => TRUE));
    $text = "
      This is a section of test text which <a href='{$url}'>links to a test
      endpoint</a>.";

    $settings = array(
      'type' => 'vinculum_dummy_contenttype',
      'title' => 'Example node used for testing the vinculum module.',
      'body' => array(
        LANGUAGE_NONE => array(
          0 => array(
            'value' => $text,
            'format' => filter_default_format(),
          ),
        ),
      ),
    );
    $node = $this->drupalCreateNode($settings);

    // This should change the {node_vinculum_sent} table: a new entry should be
    // added with the nid/URL, but handler should be NULL.
    $result = db_select('node_vinculum_sent', 'nls')
      ->fields('nls', array('handler'))
      ->condition('nls.nid', $node->nid)
      ->condition('nls.url', $url)
      ->execute()
      ->fetchObject();
    $this->assertNull($result->handler, t("When vinculums aren't supported, a NULL entry is recorded in {node_vinculum_sent}."));
  }

  // 
  // /**
  //  * Support for Pingback only.
  //  */
  // function testPingbackOnlySupport() {
  //   // Create a node linking to vinculum_dummy_endpoints/no_vinculum_support.
  //   // The vinculum should report failure.
  // 
  //   $url = url('vinculum_dummy_endpoints/pingback_only', array('absolute' => TRUE));
  //   $text = "
  //     This is a section of test text which <a href='{$url}'>links to a test
  //     endpoint</a>.";
  // 
  //   $settings = array(
  //     'type' => 'vinculum_dummy_contenttype',
  //     'title' => 'Example node used for testing the vinculum module.',
  //     'body' => array(
  //       LANGUAGE_NONE => array(
  //         0 => array(
  //           'value' => $text,
  //           'format' => filter_default_format(),
  //         ),
  //       ),
  //     ),
  //   );
  //   $node = $this->drupalCreateNode($settings);
  // 
  //   // This should change the {node_vinculum_sent} table: a new entry should be
  //   // added with the nid/URL, with the handler set to 'vinculum_pingback'.
  //   $result = db_select('node_vinculum_sent', 'nls')
  //     ->fields('nls', array('handler'))
  //     ->condition('nls.nid', $node->nid)
  //     ->condition('nls.url', $url)
  //     ->execute()
  //     ->fetchAll();
  //   $this->assertEqual($result->handler, 'vinculum_pingback', t("When an endpoint supports only pingback, an entry is recorded in {node_vinculum_sent} with the handler 'vinculum_pingback'."));
  // }


  /**
   * Support for Trackback only.
   */
  function testTrackbackOnlySupport() {
    // The target for this test is vinculum_dummy_endpoints/trackback_only
    $url = url('vinculum_dummy_endpoints/trackback_only', array('absolute' => TRUE));

    // The endpoint at $url should support auto-discovery of trackbacks.
    $trackback_endpoint_url = vinculum_trackback_autodiscovery_autodetect_trackback_support($url);
    $expected = url(VINCULUM_TEST_TRACKBACK_ENDPOINT, array('absolute' => TRUE));
    $this->assertEqual($trackback_endpoint_url, $expected, t('Correct endpoint auto-discovered in the test URL at %url', array('%url', $url)));

    // Create a node linking to vinculum_dummy_endpoints/no_vinculum_support.
    // The vinculum should report failure.
    $text = "
      This is a section of test text which <a href='{$url}'>links to a test
      endpoint</a>.";

    $settings = array(
      'type' => 'vinculum_dummy_contenttype',
      'title' => 'Example node used for testing the vinculum module.',
      'body' => array(
        LANGUAGE_NONE => array(
          0 => array(
            'value' => $text,
            'format' => filter_default_format(),
          ),
        ),
      ),
    );
    $node = $this->drupalCreateNode($settings);

    // This should change the {node_vinculum_sent} table: a new entry should be
    // added with the nid/URL, with the handler set to 'vinculum_pingback'.
    $result = db_select('node_vinculum_sent', 'nls')
      ->fields('nls', array('handler'))
      ->condition('nls.nid', $node->nid)
      ->condition('nls.url', $url)
      ->execute()
      ->fetchObject();
    $this->assertEqual($result->handler, 'vinculum_trackback_autodiscovery', t("When an endpoint supports only trackback, an entry is recorded in {node_vinculum_sent} with the handler 'vinculum_trackback_autodiscovery'."));

    // The endpoint should add an entry into the variables table for
    // vinculum_testing_last_trackback.
    $expected = array(
      'url'       => url("node/{$node->nid}", array('absolute' => TRUE)),
      'title'     => $node->title,
      'blog_name' => variable_get('site_name', 'Drupal'),
      'excerpt'   => NULL,
    );
    $this->refreshVariables();
    $result = variable_get('vinculum_testing_last_trackback', FALSE);


    $this->verbose('<h1>Expected results</h1>'
                 . '<code>' . str_replace("\n", "<br />\n", var_export($expected, TRUE)) . '</code>'
                 . '<hr />'
                 . '<h1>Actual results</h1>'
                 . '<code>' . str_replace("\n", "<br />\n", var_export($result, TRUE)) . '</code>');
    $this->assertEqual($result, $expected, t('The correct data was sent to the Trackback endpoint.'));



    // Debug: Dump the watchdog table.
    // $x = db_select('watchdog', 'w')
    //   ->fields('w')
    //   ->execute()
    //   ->fetchAll();
    // $out = '';
    // foreach($x as $row) {
    //   $out .= '<strong>';
    //   $out .= t($row->message, unserialize($row->variables));
    //   $out .= '</strong><br />';
    //   $out .= str_replace("\n", "<br />\n", var_export($row, TRUE)) . '<hr />';
    // }
    // $this->verbose($out);

  }

}
