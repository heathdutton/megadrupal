<?php
/**
 * @file
 * Tests for the vinculum trackback auto-discovery process.
 */

/**
 * Test the Send mechanism for trackbacks.
 */
class VinculumTrackbackAutodiscoveryTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Trackback auto-discovery',
      'description' => 'Test the trackback auto-discovery mechanism.',
      'group' => 'Vinculum',
    );
  }

  function setUp() {
    parent::setUp('vinculum', 'vinculum_trackback', 'vinculum_trackback_autodiscovery');

    // @TODO: Test that auto-discovery functions with new nodes.

    // // Create a content-type; enable it to send vinculums.
    // $type_machine_name = 'dummy_contenttype1';
    // $type = array(
    //   'type' => $type_machine_name,
    //   'name' => st('Vinculum dummy content-type 1'),
    //   'base' => 'node_content',
    //   'description' => st("A dummy content-type, used for testing the Vinculum Trackback module. This content-type should not be visible."),
    //   'custom' => 1,
    //   'modified' => 1,
    //   'locked' => 0,
    // );
    // $type = node_type_set_defaults($type);
    // node_type_save($type);
    // node_add_body_field($type);
    // 
    // // Enable vinculum-receive for this content-type.
    // variable_set("vinculum_send_{$type_machine_name}", TRUE);

    $this->refreshVariables();
  }


  /**
   * Test the auto-detection of Trackback endpoints.
   */
  function testTrackbackEndpointAutodetection() {
    // The helper module provides a set of local end-points which provide a
    // variety of Trackback meta-data formats.
    $result = module_enable(array('vinculum_trackback_autodiscovery_dummy_endpoints'));
    $this->assertEqual($result, TRUE, 'Trackback auto-discovery module was enabled.');

    // Reset cache after enabling the module.
    drupal_flush_all_caches();

    // The vinculum_trackback_dummy_endpoint module provides 8 pages which
    // contain a variety of approaches to embedding Trackback RDF meta-data in
    // their pages (and some pages contain no Trackback auto-discovery meta-
    // data).

    // Array of local path => discoverable endpoint.
    $target_urls = array(
      // 1 is a 404 page, so should return NULL to show the URL is unreachable.
      'trackback_dummy_endpoint/1' => NULL,
      'trackback_dummy_endpoint/2' => FALSE,
      'trackback_dummy_endpoint/3' => FALSE,
      'trackback_dummy_endpoint/4' => 'http://www.foo.com/tb.cgi/5',
      'trackback_dummy_endpoint/5' => 'http://example.com/tb/5',
      'trackback_dummy_endpoint/6' => 'http://example.com/tb/6',
      'trackback_dummy_endpoint/7' => 'http://example.com/tb/7b',
      'trackback_dummy_endpoint/8' => FALSE,
    );

    foreach ($target_urls as $local_url => $expected_endpoint) {
      // Get the test endpoint number as a convenient reference for reporting.
      $section = substr($local_url, -1);

      $url = url($local_url, array('absolute' => TRUE));

      // Provide debug output for the contents of the URL.
      $debug = drupal_http_request($url);

      $this->assertTrue(strpos($debug->data, 'Testing scenario:') !== FALSE, t('Section @section: Page validation text discovered.', array('@section' => $section)));

      $out = str_replace("\n", "<br />\n", htmlentities($debug->data));
      $this->verbose('GET request to: ' . $url .
                     '<hr />HTTP response code: ' . $debug->code .
                     '<hr />' . $debug->data .
                     '<hr />' . $out);

      $result = vinculum_trackback_autodiscovery_autodetect_trackback_support($url);
      // Use assertIdentical to test for FALSE vs NULL.
      $this->assertIdentical($result, $expected_endpoint, t('Section @section: Endpoint correctly discovered for @url', array('@url' => $url, '@section' => $section)));
    }

    // Test a complex HTML page.
    $testfile = dirname(__FILE__) . '/tests/vinculum_trackback_autodiscovery.testdata.html';
    $html = file_get_contents($testfile);
    $this->verbose('Complex HTML source.' .
                   '<hr />' . str_replace("\n", "<br />\n", htmlentities($html)));

    $url = 'http://www.movabletype.org/trackback/archives/000905.html';
    $endpoint = 'http://www.movabletype.org/mt/trackback/65';
    $expected_result = array($url => $endpoint);
    $result = _vinculum_trackback_autodiscovery_extract_endpoint_from_html($html);
    $this->assertEqual($result, $expected_result, t('The correct endpoint %endpoint is extracted from complex HTML.', array('%endpoint' => $endpoint)));
  }
}
