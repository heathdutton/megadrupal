<?php
/**
 * @file
 * Tests for the vinculum trackback module.
 */

/**
 * Test the receive mechanism for trackbacks.
 */
class VinculumTrackbackReceiveTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Trackback: receiving trackbacks',
      'description' => 'Test the trackback rdf data is added to nodes which are enabled for receiving vinculums, and that the receiving mechanism correctly stores trackbacks.',
      'group' => 'Vinculum',
    );
  }

  function setUp() {
    parent::setUp('vinculum', 'vinculum_trackback');

    // Create a content-type; enable it to receive vinculums.
    $type_machine_name = 'dummy_contenttype1';
    $type = array(
      'type' => $type_machine_name,
      'name' => st('Vinculum dummy content-type 1'),
      'base' => 'node_content',
      'description' => st("A dummy content-type, used for testing the Vinculum Trackback module. This content-type should not be visible."),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    );
    $type = node_type_set_defaults($type);
    node_type_save($type);
    node_add_body_field($type);

    // Enable vinculum-receive for this content-type.
    variable_set("vinculum_send_{$type_machine_name}", FALSE);
    variable_set("vinculum_receive_{$type_machine_name}", TRUE);
  }


  /**
   * Test that nodes correctly add the trackback RDF metadata when configured
   * to receive vinculums.
   */
  function testRdfMetadataAddedToNodes() {

    // Create a new node.
    $settings = array(
      'type' => 'dummy_contenttype1',
      'title' => 'Example node used for testing the vinculum trackback module.',
      'body' => array(
        LANGUAGE_NONE => array(
          0 => array(
            'value' => "Lorem ipsum dolizzle gizzle tellivizzle, dawg adipiscing sure. Nullizzle sapizzle velizzle, shit volutpat, suscipizzle quizzle, gravida brizzle, pizzle. Pellentesque break it down tortizzle",
            'format' => filter_default_format(),
          ),
        ),
      ),
    );
    $node = $this->drupalCreateNode($settings);

    // Get the node's page. It should have RDF on it.
    $this->drupalGet("node/{$node->nid}");

    // Example trackback RDF:
    // <!--
    // <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
    //   <rdf:Description
    //     rdf:about="http://example.com/node/1"
    //     dc:identifier="http://example.com/node/1"
    //     dc:title="Lorem ipsum dolizzle"
    //     trackback:ping="http://example.com/node/1/trackback" />
    // </rdf:RDF>
    // -->
    $url = url("node/{$node->nid}", array('absolute' => TRUE));
    $tb_url = url("node/{$node->nid}/trackback", array('absolute' => TRUE));

    $rdf_text = "\n<!--\n";
    $rdf_text .= '<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">' . "\n";
    $rdf_text .= "\t" . '<rdf:Description';
    $rdf_text .= ' rdf:about="' . $url . '"';
    $rdf_text .= ' dc:identifier="' . $url . '"';
    $rdf_text .= ' dc:title="' . strtr(check_plain($node->title), array('--' => '&mdash;')) . '"';
    $rdf_text .= ' trackback:ping="' . $tb_url . '" />' . "\n";
    $rdf_text .= '</rdf:RDF>';
    $rdf_text .= "\n-->\n";

    $this->assertRaw($rdf_text, t('The RDF metadata is added to the page when vinculum is enabled for a node.'));

    // Re-configure the node to disable vinculum-receive.
    $node->vinculum_receive = FALSE;
    _vinculum_node_save($node);

    // Retest for the RDF.
    $this->drupalGet("node/{$node->nid}");
    $this->assertNoRaw($rdf_text, t('The RDF metadata is NOT added to the page when vinculum is disabled for a node.'));
  }


  /**
   * Test that the trackback URL (node/%node/trackback) accepts valid trackback
   * requests.
   */
  function testTrackbackEndpointAcceptsValidTrackbacks() {
    // Create a new node.
    $settings = array(
      'type' => 'dummy_contenttype1',
      'title' => 'Example node used for testing the vinculum trackback module.',
      'body' => array(
        LANGUAGE_NONE => array(
          0 => array(
            'value' => "Lorem ipsum dolizzle gizzle tellivizzle, dawg adipiscing sure. Nullizzle sapizzle velizzle, shit volutpat, suscipizzle quizzle, gravida brizzle, pizzle. Pellentesque break it down tortizzle",
            'format' => filter_default_format(),
          ),
        ),
      ),
    );
    $node = $this->drupalCreateNode($settings);

    // Submit a trackback request to /node/nnn/trackback.
    // Trackback requests must use POST.
    // Provide the Trackback parameters:
    // - url       The URL of the remote page which links to our site.
    // - blog_name The name of the remote site.
    // - title     The subject of the remote blog post which links to ours.
    // - excerpt   Relevant excerpt of the remote blog post.
    $post = array(
      'url'       => 'http://example.com/foshizzle',
      'blog_name' => 'foo',
      'title'     => 'bar',
      'excerpt'   => 'Lorem ipsum dolizzle',
    );

    // Use curlExec instead of drupalPost, because drupalPost expects to find a
    // Drupal form on the target endpoint, rather than a web service.
    $action = $this->getAbsoluteUrl("node/{$node->nid}/trackback");
    $headers = array('Content-Type' => 'application/x-www-form-urlencoded; charset=utf-8');
    $out = $this->curlExec(array(CURLOPT_URL => $action, CURLOPT_POST => TRUE, CURLOPT_POSTFIELDS => $post, CURLOPT_HTTPHEADER => $headers));
    $this->verbose('POST request to: ' . $action .
                   '<hr />Ending URL: ' . $this->getUrl() .
                   '<hr />Fields: ' . highlight_string('<?php ' . var_export($post, TRUE), TRUE) .
                   '<hr />' . str_replace("\n", "<br />\n", htmlentities($out)));

    // Validate the return content.
    $expected_response = '<?xml version="1.0" encoding="utf-8"?>';
    $expected_response .= "\n<response>\n<error>0</error>\n</response>\n";
    $this->assertEqual($out, $expected_response, t('The service response conforms to the Trackback standard for successful requests.'));

    // There should now be an entry in the db tables:
    // - vinculum_trackback_received
    // - node_vinculum_received
    $result = db_select('vinculum_trackback_received', 'l')
      ->fields('l')
      ->condition('l.nid', $node->nid)
      ->condition('l.url', 'http://example.com/foshizzle')
      ->execute()
      ->fetchAll();
    $this->assertEqual(1, count($result), t('A trackback record has been saved to the vinculum_trackback_received table.'));


    $result = db_select('node_vinculum_received', 'l')
      ->fields('l')
      ->condition('l.nid', $node->nid)
      ->condition('l.url', 'http://example.com/foshizzle')
      ->execute()
      ->fetchAll();
    $this->assertEqual(1, count($result), t('A vinculum record has been saved to the node_vinculum_received table.'));
  }


  /**
   * @TODO:
   * Test that the trackback URL (node/%node/trackback) rejects invalid
   * trackback requests.
   */
  // function testTrackbackEndpointRejectsInvalidTrackbacks() {
  //
  // }

}



/**
 * Test the Send mechanism for trackbacks.
 */
class VinculumTrackbackSendTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Trackback: send trackbacks',
      'description' => 'Test that trackbacks are sent when a node is saved.',
      'group' => 'Vinculum',
    );
  }

  function setUp() {
    parent::setUp('vinculum', 'vinculum_trackback');

    // Create a content-type; enable it to send vinculums.
    $type_machine_name = 'dummy_contenttype1';
    $type = array(
      'type' => $type_machine_name,
      'name' => st('Vinculum dummy content-type 1'),
      'base' => 'node_content',
      'description' => st("A dummy content-type, used for testing the Vinculum Trackback module. This content-type should not be visible."),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    );
    $type = node_type_set_defaults($type);
    node_type_save($type);
    node_add_body_field($type);

    // Enable vinculum-receive for this content-type.
    variable_set("vinculum_send_{$type_machine_name}", TRUE);
  }

}
