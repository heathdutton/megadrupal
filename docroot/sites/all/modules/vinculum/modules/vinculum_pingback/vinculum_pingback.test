<?php
/**
 * @file
 * Tests for the vinculum pingback module.
 */

/**
 * Test that the list of handlers is loaded properly.
 */
class VinculumPingbackReceiveTestCase extends DrupalWebTestCase {
  protected $xmlrpc_url;

  public static function getInfo() {
    return array(
      'name' => 'Pingback: receiving pingbacks',
      'description' => 'Test the pingback metadata is added to nodes which are enabled for receiving vinculums, and that the receiving mechanism correctly stores pingbacks.',
      'group' => 'Vinculum',
    );
  }

  function setUp() {
    parent::setUp('vinculum', 'vinculum_pingback');

    $this->xmlrpc_url = $GLOBALS['base_url'] . '/xmlrpc.php';

    // Create a content-type; enable it to receive vinculums.
    $type_machine_name = 'dummy_contenttype1';
    $type = array(
      'type' => $type_machine_name,
      'name' => st('Vinculum dummy content-type 1'),
      'base' => 'node_content',
      'description' => st("A dummy content-type, used for testing the Vinculum Trackback module. This content-type should not be visible."),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    );
    $type = node_type_set_defaults($type);
    node_type_save($type);
    node_add_body_field($type);

    // Enable vinculum-receive for this content-type.
    variable_set("vinculum_send_{$type_machine_name}", FALSE);
    variable_set("vinculum_receive_{$type_machine_name}", TRUE);
  }


  /**
   * Test that nodes correctly add the pingback <link> tag and HTTP header when
   * configured to receive vinculums.
   */
  function testPingbackMetadataAddedToNodes() {

    // Create a new node.
    $settings = array(
      'type' => 'dummy_contenttype1',
      'title' => 'Example node used for testing the vinculum pingback module.',
      'body' => array(
        LANGUAGE_NONE => array(
          0 => array(
            'value' => "Lorem ipsum dolizzle gizzle tellivizzle, dawg adipiscing sure. Nullizzle sapizzle velizzle, shit volutpat, suscipizzle quizzle, gravida brizzle, pizzle. Pellentesque break it down tortizzle",
            'format' => filter_default_format(),
          ),
        ),
      ),
    );
    $node = $this->drupalCreateNode($settings);

    // Get the node's page. It should have a pingback <link> tag on it.
    $this->drupalGet("node/{$node->nid}");

    $elements = $this->xpath('//link[@rel=:rel and @href=:href]', array(
      ':rel' => 'pingback',
      ':href' => $this->xmlrpc_url,
    ));
    $this->assertEqual(count($elements), 1, t('The Pingback <link> tag is added to nodes when vinculums are enabled.'));

    $header = $this->drupalGetHeader('X-Pingback');
    $this->assertEqual($header, $this->xmlrpc_url, t('The Pingback HTTP header is added to nodes when vinculums are enabled.'));


    // Re-configure the node to disable vinculum-receive.
    $node->vinculum_receive = FALSE;
    _vinculum_node_save($node);

    $this->drupalGet("node/{$node->nid}");

    $elements = $this->xpath('//link[@rel=:rel and @href=:href]', array(
      ':rel' => 'pingback',
      ':href' => $this->xmlrpc_url,
    ));
    $this->assertEqual(count($elements), 0, t('The Pingback <link> tag is not added to nodes when vinculums are disabled.'));

    $header = $this->drupalGetHeader('X-Pingback');
    $this->assertFalse($header, t('The Pingback HTTP header is not added to nodes when vinculums are disabled.'));
  }



  /**
   * Test that the pingback XML-RPC endpoint accepts valid pingback requests.
   */
  function testPingbackEndpointAcceptsValidPingbacks() {
    // Create a new node.
    $settings = array(
      'type' => 'dummy_contenttype1',
      'title' => 'Example node used for testing the vinculum trackback module.',
      'body' => array(
        LANGUAGE_NONE => array(
          0 => array(
            'value' => "Lorem ipsum dolizzle gizzle tellivizzle, dawg adipiscing sure. Nullizzle sapizzle velizzle, shit volutpat, suscipizzle quizzle, gravida brizzle, pizzle. Pellentesque break it down tortizzle",
            'format' => filter_default_format(),
          ),
        ),
      ),
    );
    $node = $this->drupalCreateNode($settings);


    // Attempt to record a pingback for that node.
    $source = 'http://example.com/foshizzles';
    $target = url("node/{$node->nid}", array('absolute' => TRUE));
    $methods = array(
      'pingback.ping' => array($source, $target),
    );
    // XMLRPC requests will be automatically dispatched to the simpletest
    // instance, not the actual site.
    xmlrpc($this->xmlrpc_url, $methods);

    // Check that pingback and vinculum records have been created.
    $result = db_select('vinculum_pingback_received', 'l')
      ->fields('l')
      ->condition('l.nid', $node->nid)
      ->condition('l.url', 'http://example.com/foshizzles')
      ->execute()
      ->fetchAll();
    $this->assertEqual(1, count($result), t('A pingback record has been saved to the vinculum_pingback_received table.'));

    $result = db_select('node_vinculum_received', 'l')
      ->fields('l')
      ->condition('l.nid', $node->nid)
      ->condition('l.url', 'http://example.com/foshizzles')
      ->execute()
      ->fetchAll();
    $this->assertEqual(1, count($result), t('A vinculum record has been saved to the node_vinculum_received table.'));
  }
}



/**
 * Test the Send mechanism for trackbacks.
 */
class VinculumPingbackSendTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Pingback: send trackbacks',
      'description' => 'Test that pingbacks are sent when a node is saved.',
      'group' => 'Vinculum',
    );
  }

  function setUp() {
    parent::setUp('vinculum', 'vinculum_pingback');

    // Create a content-type; enable it to send vinculums.
    $type_machine_name = 'dummy_contenttype1';
    $type = array(
      'type' => $type_machine_name,
      'name' => st('Vinculum dummy content-type 1'),
      'base' => 'node_content',
      'description' => st("A dummy content-type, used for testing the Vinculum Trackback module. This content-type should not be visible."),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    );
    $type = node_type_set_defaults($type);
    node_type_save($type);
    node_add_body_field($type);

    // Enable vinculum-receive for this content-type.
    variable_set("vinculum_send_{$type_machine_name}", TRUE);
  }


  /**
   * Test the detection of pingback endpoints:
   * i.e. <link> tags or HTTP headers that declare pingback compatibility.
   */
  function testPingbackEndpointDetection() {
    // @TODO: create test module which sets up dummy endpoints to test against.
    module_enable(array('vinculum_pingback_dummy_endpoints'));

    $expected_endpoint = $GLOBALS['base_url'] . '/xmlrpc.php';

    // Check each of the page formats.
    $tests = array(
      0 => FALSE,
      1 => $expected_endpoint . '/link_tag',
      2 => $expected_endpoint . '/http_header',
      3 => $expected_endpoint . '/link_tag_and_http_header',
    );
    foreach ($tests as $path => $expected_result) {
      $url = url("pingback_dummy_endpoint/" . $path, array('absolute' => TRUE));
      $result = vinculum_pingback_target_supports_pingback($url);
      $this->assertIdentical($expected_result, $result, t("@url: The pingback endpoint was correctly detected (expected %expected - found %result).", array('@url' => $url, '%expected' => $expected_result, '%result' => ($result === FALSE ? 'FALSE' : $result))));
    }
  }
}
