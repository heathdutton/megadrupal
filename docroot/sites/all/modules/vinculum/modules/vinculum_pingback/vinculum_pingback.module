<?php
/**
 * @file
 * Provide the Pingback protocol to the Vinculum module.
 */

// User-Agent to send when connecting to external sites.
define ('VINCULUM_PINGBACK_UA', 'Drupal Pingback (+http://drupal.org/project/vinculum)');

/**
 * @defgroup vinculum_pingback_error_codes Pingback protocol error codes.
 * @{
 * Numeric error codes defined in the Pingback protocol to communicate errors
 * in sending or receiving pingbacks.
 * @}
 */

/**
 * @addtogroup vinculum_pingback_error_codes
 * @{
 */

// Provide a non-zero error-code for unknown errors.
define('VINCULUM_PINGBACK_UNKNOWN_ERROR', -1);

// The URL of the remote site could not be reached.
define('VINCULUM_PINGBACK_ERROR_REMOTE_URL_NOT_FOUND', 16);

// The response from the remote site does not contain a link to this site.
define('VINCULUM_PINGBACK_ERROR_REMOTE_URL_MISSING_LINK', 17);

// The local node could not be found.
define('VINCULUM_PINGBACK_ERROR_LOCAL_NODE_NOT_FOUND', 32);

// The local node could not be used as a pingback resource (e.g. vinculums are
// disabled on the node).
define('VINCULUM_PINGBACK_ERROR_LOCAL_NODE_PINGBACK_NOT_ALLOWED', 33);

// The pingback has previously been registered.
define('VINCULUM_PINGBACK_ERROR_PINGBACK_ALREADY_REGISTERED', 48);

/**
 * @} End of "addtogroup vinculum_pingback_error_codes".
 */


/**
 * Implements hook_vinculum_handler().
 */
function vinculum_pingback_vinculum_handler() {
  return array(
    'protocol' => t('Pingback'),
  );
}

/**
 * Implements hook_vinculum_send().
 *
 * Attempt to send a pingback.  The pingback protocol uses a simple static
 * schema: only the origin and target URLs are used.
 *
 * @param String $target
 *   The remote URL.
 * @param String $source
 *   The URL of the local node.
 * @param Object $node
 *   The drupal node.
 *
 * @ingroup vinculum
 */
function vinculum_pingback_vinculum_send($target, $source, $node) {
  // Check whether the remote target supports pingbacks.
  if ($xmlrpc_endpoint = vinculum_pingback_target_supports_pingback($target)) {
    $methods = array(
      'pingback.ping' => array($source, $target),
    );
    $result = xmlrpc($xmlrpc_endpoint, $methods);
    if ($result) {
      $params = array(
        '%source' => $source,
        '%target' => $target,
      );
      watchdog('pingback', 'Pingback to %target from %source succeeded.', $params, WATCHDOG_INFO);
      return TRUE;
    }
    else {
      $params = array(
        '%source' => $source,
        '%target' => $target,
        '@errno' => xmlrpc_errno(),
        '@description' => xmlrpc_error_msg(),
      );
      watchdog('pingback', 'Pingback to %target from %source failed.<br />Error @errno: @description', $params, WATCHDOG_WARNING);
      return FALSE;
    }
  }
  return FALSE;
}

/**
 * Check whether a URL supports the pingback protocol (by checking for an HTTP
 * header or a <link> tag).
 *
 * @param String $url
 * The destination URL to check.
 *
 * @return String|FALSE
 * If pingbacks are supported by the remote server, the URL of the XML-RPC
 * pingback endpoint is returned.
 *
 * @ingroup vinculum
 */
function vinculum_pingback_target_supports_pingback($url) {
  // 1.  Check for an X-Pingback header.
  $result = drupal_http_request($url, array('method' => 'HEAD', 'headers' => array('User-Agent' => VINCULUM_PINGBACK_UA)));

  // NB: all headers from drupal_http_request are changed to lower-case.
  if (!isset($result->error) && is_array($result->headers) && isset($result->headers['x-pingback'])) {
    $endpoint = check_url($result->headers['x-pingback']);
    watchdog('Pingback', 'Pingback auto-discovery is supported on %url, with the Pingback endpoint %endpoint.<br />(using X-PINGBACK HTTP header).', array('%url' => $url, '%endpoint' => $endpoint), WATCHDOG_DEBUG);
    return $endpoint;
  }

  // 2.  Do a full request for the page, check for a <link> tag.
  elseif (!isset($result->error)) {
    $result = drupal_http_request($url, array('method' => 'GET', 'headers' => array('User-Agent' => VINCULUM_PINGBACK_UA)));
    if (!isset($result->error)) {
      // This regexp is the one provided in the spec.
      if (preg_match('#<link rel="pingback" href="([^"]+)" ?/?>#', $result->data, $matches)) {
        $endpoint = check_url($matches[1]);
        watchdog('Pingback', 'Pingback auto-discovery is supported on %url, with the Pingback endpoint %endpoint.<br />(using &lt;link rel="pingback"&gt; tag).', array('%url' => $url, '%endpoint' => $endpoint), WATCHDOG_DEBUG);
        return $endpoint;
      }
    }
  }

  // No X-Pingback header, no <link rel="pingback">.
  watchdog('Pingback', 'Pingback auto-discovery is not supported on %url.', array('%url' => $url), WATCHDOG_DEBUG);
  return FALSE;
}

/**
 * Implements hook_xmlrpc().
 *
 * This XML-RPC endpoint handles registration of incoming pingback requests.
 */
function vinculum_pingback_xmlrpc() {
  return array(
    array(
      'pingback.ping',
      'vinculum_pingback_receive_pingback',
      // Return value is a string.
      // There are 2 string parameters.
      array('string', 'string', 'string'),
      t('Handles pingback pings.'),
    ),
  );
}

/**
 * Implements hook_node_view().
 *
 * Adds a HTTP header and a <link> tag which give the pingback server endpoint
 * URL.
 */
function vinculum_pingback_node_view($node, $view_mode, $langcode) {
  if ($view_mode == 'full' && vinculum_node_allows_vinculum($node, 'receive')) {
    // The end-point URL is the standard drupal XML-RPC end-point.
    $pingback_endpoint = $GLOBALS['base_url'] . '/xmlrpc.php';

    // Add both a HTTP header and a <link> tag.
    drupal_add_http_header('X-Pingback', $pingback_endpoint);
    drupal_add_html_head_link(array('rel' => 'pingback', 'href' => $pingback_endpoint));
  }
}




/**
 * XML-RPC callback for the pingback.ping method.
 *
 * @param String $sourceURI
 *   The URL of the third-party post.
 * @param String $targetURI
 *   The URL of the node on this site.
 */
function vinculum_pingback_receive_pingback($sourceURI, $targetURI) {
  // The pingback protocol defines a static schema of 2 fields: sourceURI and
  // targetURI. No other data may be exchanged within the pingback protocol.
  $pingback = (object) array(
    'sourceURI' => $sourceURI,
    'targetURI' => $targetURI,
    'origin_ip' => ip_address(),
  );

  // Attempt to save the pingback.  Non-zero results indicate an error.
  if ($result = vinculum_pingback_save_pingback($pingback)) {
    // Lookup the error message from the error-code, and return an xmlrpc error.
    $error_message = _vinculum_pingback_get_error_message($result);
    return xmlrpc_server_error($result, $error_message);
  }

  $message = t('Pingback from @source to @target registered.', array('@source' => $sourceURI, '@target' => $targetURI));
  return $message;
}

/**
 * Save a pingback.
 *
 * @param Object $pingback
 * @param String $pingback->sourceURI The URL of the third-party post.
 * @param String $pingback->targetURI The URL of the local node.
 * @param String $pingback->origin_ip The IP address which submitted the
 *                                    pingback request.
 *
 * @return Int
 *    0 is returned when the pingback is successfully saved.
 *    Any other result is an error-code: see vinculum_pingback_error_codes.
 */
function vinculum_pingback_save_pingback($pingback) {
  // Find the nid of the local node, using the URL provided in the pingback.
  $nid = vinculum_lookup_nid($pingback->targetURI);

  if (!$nid) {
    return VINCULUM_PINGBACK_ERROR_LOCAL_NODE_NOT_FOUND;
  }

  // Build a vinculum object.
  $vinculum = new vinculum($nid, $pingback->sourceURI, 'vinculum_pingback');
  $vinculum->data = $pingback;

  // Attempt to validate the vinculum using the standard vinculum API.
  $result = vinculum_receive_validate($vinculum);
  if ($result != VINCULUM_VALIDATES) {
    // Lookup a pingback-specific error-code (according to the pingback
    // specification, which provides defined numeric constants for certain
    // error conditions).
    $pingback_error_code = _vinculum_pingback_lookup_custom_error_code($result);
    return $pingback_error_code;
  }
  else {
    // Mark the record as valid, to save the overhead of re-validation.
    $vinculum->isValid();
  }

  // Write an entry in the pingback tracker table.
  db_merge('vinculum_pingback_received')
    ->key(array(
      'nid' => $vinculum->nid,
      'url' => $vinculum->url,
      ))
    ->fields(array(
      'origin_ip' => $vinculum->origin_ip,
      'timestamp' => $vinculum->timestamp,
    ))
    ->execute();

  // Call the API to register receipt of the vinculum.
  vinculum_receive($vinculum);
}


/**********************************************************
 * Private helper functions.
 *********************************************************/

/**
 * Lookup a pingback-specific error-code, given an error-code as defined in the
 * vinculum module.
 *
 * @see vinculum_pingback_error_codes
 */
function _vinculum_pingback_lookup_custom_error_code($error_code) {
  switch ($error_code) {
    // Vinculum is valid.
    case VINCULUM_VALIDATES:
      return VINCULUM_VALIDATES;

    // Local node doesn't exist.
    case VINCULUM_ERROR_LOCAL_NODE_NOT_FOUND:
      return VINCULUM_PINGBACK_ERROR_LOCAL_NODE_NOT_FOUND;

    // Local node doesn't support vinculums.
    case VINCULUM_ERROR_LOCAL_NODE_VINCULUM_NOT_ALLOWED:
      return VINCULUM_PINGBACK_ERROR_LOCAL_NODE_PINGBACK_NOT_ALLOWED;

    // Vinculum already registered.
    case VINCULUM_ERROR_VINCULUM_ALREADY_REGISTERED:
      return VINCULUM_PINGBACK_ERROR_PINGBACK_ALREADY_REGISTERED;

    // Remote URL can't be reached.
    case VINCULUM_ERROR_REMOTE_URL_NOT_FOUND:
      return VINCULUM_PINGBACK_ERROR_REMOTE_URL_NOT_FOUND;

    // Remote page doesn't link to this node.
    case VINCULUM_ERROR_REMOTE_URL_MISSING_LINK:
      return VINCULUM_PINGBACK_ERROR_REMOTE_URL_MISSING_LINK;

    default:
      return VINCULUM_PINGBACK_UNKNOWN_ERROR;
  }
}

/**
 * Provide a human-readable error message for an error-code.
 *
 * @param Int $error_code.
 * A numeric error-code - see vinculum_pingback_error_codes.
 */
function _vinculum_pingback_get_error_message($error_code) {

  $errors = array(
    VINCULUM_PINGBACK_ERROR_REMOTE_URL_NOT_FOUND            => t('sourceURI not found.'),
    VINCULUM_PINGBACK_ERROR_REMOTE_URL_MISSING_LINK         => t('sourceURI does not contain a link to this site.'),
    VINCULUM_PINGBACK_ERROR_LOCAL_NODE_NOT_FOUND            => t('targetURI could not be found.'),
    VINCULUM_PINGBACK_ERROR_LOCAL_NODE_PINGBACK_NOT_ALLOWED => t('targetURI does not support pingbacks.'),
    VINCULUM_PINGBACK_ERROR_PINGBACK_ALREADY_REGISTERED     => t('The pingback has already been added.'),
  );

  if (isset($errors[$error_code])) {
    return $errors[$error_code];
  }
  return t('An unknown error occurred.');
}
