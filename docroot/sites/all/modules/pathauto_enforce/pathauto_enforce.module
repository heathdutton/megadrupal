<?php

/**
 * @file
 * Enforce Pathauto.
 */

/**
 * Implements hook_menu().
 */
function pathauto_enforce_menu() {
  $items['admin/config/search/path/enforce'] = array(
    'title'            => 'Enforce Patterns',
    'type'             => MENU_LOCAL_TASK,
    'description'      => 'Enforce Pathauto setting per bundle.',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('pathauto_enforce_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file'             => 'pathauto_enforce.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_form_alter().
 */
function pathauto_enforce_form_alter(&$form, &$form_state, $form_id) {

  if (!empty($form['path'])) {
    if (!empty($form['#node_edit_form'])) {

      // Node edit form.
      $content_type = $form['#bundle'];
      if (pathauto_enforce_content_type($content_type)) {
        $form['path']['pathauto']['#default_value'] = TRUE;
        $form['path']['pathauto']['#disabled'] = TRUE;
      }
      elseif (pathauto_enforce_not_content_type($content_type)) {
        $form['path']['pathauto']['#default_value'] = FALSE;
        $form['path']['pathauto']['#disabled'] = TRUE;

        $form['path']['alias']['#default_value'] = '';
        $form['path']['alias']['#access'] = FALSE;
      }
    }
    elseif ($form['#form_id'] == 'taxonomy_form_vocabulary' || $form['#form_id'] == 'taxonomy_form_term') {

      // Taxonomy term edit form.
      if (!empty($form['#bundle'])) {
        $vocabulary = $form['#bundle'];
      }
      elseif (!empty($form['#vocabulary'])) {
        $vocabulary = $form['#vocabulary']->machine_name;
      }
      if (pathauto_enforce_vocabulary($vocabulary)) {
        $form['path']['pathauto']['#default_value'] = TRUE;
        $form['path']['pathauto']['#disabled'] = TRUE;
      }
      elseif (pathauto_enforce_not_vocabulary($vocabulary)) {
        $form['path']['pathauto']['#default_value'] = FALSE;
        $form['path']['pathauto']['#disabled'] = TRUE;

        $form['path']['alias']['#default_value'] = '';
        $form['path']['alias']['#access'] = FALSE;
      }
    }
  }
}

/**
 * Get the enforce setting for the content type.
 *
 * @param string $content_type
 *   Content type machine name.
 *
 * @return bool
 *   Whether the Content Type Pathauto settings are to be enforced or not.
 */
function pathauto_enforce_content_type($content_type) {

  $content_types = variable_get('pathauto_enforce_content_types', array());

  return !empty($content_types[$content_type]);
}

/**
 * Get the enforce setting for the vocabulary name.
 *
 * @param string $vocabulary
 *   Vocabulary machine name.
 *
 * @return bool
 *   Whether the Vocabulary Pathauto settings are to be enforced or not.
 */
function pathauto_enforce_vocabulary($vocabulary) {

  $vocabularies = variable_get('pathauto_enforce_vocabularies', array());

  return !empty($vocabularies[$vocabulary]);
}

/**
 * Get the prevent setting for the content type.
 *
 * @param string $content_type
 *   Content type machine name.
 *
 * @return bool
 *   Whether the Content Type Pathauto settings are to be enforced or not.
 */
function pathauto_enforce_not_content_type($content_type) {

  $content_types = variable_get('pathauto_enforce_not_content_types', array());

  return !empty($content_types[$content_type]);
}

/**
 * Get the prevent setting for the vocabulary name.
 *
 * @param string $vocabulary
 *   Vocabulary machine name.
 *
 * @return bool
 *   Whether the Vocabulary Pathauto settings are to be enforced or not.
 */
function pathauto_enforce_not_vocabulary($vocabulary) {

  $vocabularies = variable_get('pathauto_enforce_not_vocabularies', array());

  return !empty($vocabularies[$vocabulary]);
}
