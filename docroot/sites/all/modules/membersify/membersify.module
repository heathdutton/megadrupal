<?php

/**
 * @file
 * Membersify client module that facilitates a paid subscription site.
 *
 * Copyright 2014 Membersify.com
 */

// Include sub-files
require_once "membersify.sync.inc";
require_once "membersify.helpers.inc";
require_once "membersify.payment.inc";

/**
 * Implements hook_permission().
 */
function membersify_permission() {
  return array(
    'administer membersify' => array(
      'title' => t('Administer Membersify'),
      'description' => t('Access the various admin pages and settings.'),
      'restrict access' => TRUE,
    ),
    'purchase membersify plans' => array(
      'title' => t('Purchase Membersify plans'),
      'description' => t('Allows the user to purchase subscription plans, both during signup and from their user account pages.'),
    ),
    'view own membersify account' => array(
      'title' => t('View own subscriptions tab in User Account'),
      'description' => t('Allows the user to view their subscription info and payment history, and change billing details from their user account.'),
    ),
    'change own membersify billing' => array(
      'title' => t('Change own billing info'),
      'description' => t('Allows the user to change their billing info for subscriptions.'),
    ),
    'change own membersify plan' => array(
      'title' => t('Change own plan'),
      'description' => t('Allows the user to change their plan for subscriptions.'),
    ),
    'cancel own membersify subscription' => array(
      'title' => t('Cancel own subscription'),
      'description' => t('Allows the user to cancel their subscriptions.'),
    ),
    'view own membersify history' => array(
      'title' => t('View own payment history'),
      'description' => t('Allows the user to view payments associated with their subscriptions.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function membersify_menu() {
  $items = array();
  $items['membersify/purchase/%membersify_plan'] = array(
    'page callback' => 'membersify_purchase_plan',
    'page arguments' => array(2),
    'access arguments' => array('purchase membersify plans'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/membersify'] = array(
    'title' => 'Membersify',
    'description' => 'Membersify admin pages.',
    'position' => 'left',
    'weight' => -15,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer membersify'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/config/membersify/settings'] = array(
    'title' => 'Membersify settings',
    'description' => t('Set the various settings here.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('membersify_admin'),
    'access arguments' => array('administer membersify'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/membersify/settings/sync'] = array(
    'title' => 'Re-sync',
    'description' => t('Re-sync all of the settings, plans, and subscriptions.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('membersify_sync_confirm'),
    'access arguments' => array('administer membersify'),
    'type' => MENU_CALLBACK,
  );
  $items['membersify/webhook'] = array(
    'page callback' => 'membersify_webhook',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'membersify.webhook.inc',
  );
  $items['membersify/thankyou/%membersify_subscription'] = array(
    'title' => t("Thank you"),
    'page callback' => 'membersify_thankyou_page',
    'page arguments' => array(2),
    'access arguments' => array('purchase membersify plans'),
    'type' => MENU_CALLBACK,
  );
  $items['user/%user/subscriptions'] = array(
    'title' => 'Subscriptions',
    'page callback' => 'membersify_account_tab',
    'page arguments' => array(1),
    'access callback' => 'membersify_account_tab_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'membersify.user.inc',
  );
  $items['user/%user/subscriptions/%membersify_subscription/renew'] = array(
    'title' => 'Reactivate subscription',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('membersify_renew_subscription_form', 1, 3),
    'access callback' => 'membersify_subscription_access',
    'access arguments' => array(1, 3, 'purchase membersify plans'),
    'type' => MENU_CALLBACK,
    'file' => 'membersify.user.inc',
  );
  $items['user/%user/subscriptions/%membersify_subscription/cancel'] = array(
    'title' => 'Cancel subscription',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('membersify_cancel_subscription_form', 1, 3),
    'access callback' => 'membersify_subscription_access',
    'access arguments' => array(1, 3, 'cancel own membersify subscription'),
    'type' => MENU_CALLBACK,
    'file' => 'membersify.user.inc',
  );
  $items['user/%user/subscriptions/%membersify_subscription/change_billing'] = array(
    'title' => 'Change billing',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('membersify_change_billing_form', 1, 3),
    'access callback' => 'membersify_subscription_access',
    'access arguments' => array(1, 3, 'change own membersify billing'),
    'type' => MENU_CALLBACK,
    'file' => 'membersify.user.inc',
  );
  $items['user/%user/subscriptions/%membersify_subscription/change_billing/%membersify_payment_profile/set_default'] = array(
    'title' => 'Set default card',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('membersify_set_default_profile_form', 1, 3, 5),
    'access callback' => 'membersify_subscription_access',
    'access arguments' => array(1, 3, 'change own membersify billing'),
    'type' => MENU_CALLBACK,
    'file' => 'membersify.user.inc',
  );
  $items['user/%user/payment_methods'] = array(
    'title' => 'Payment methods',
    'page callback' => 'membersify_payment_profiles_page',
    'page arguments' => array(1, 3),
    'access callback' => 'membersify_payment_profile_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'membersify.user.inc',
  );
  $items['user/%user/payment_methods/%membersify_payment_profile/delete'] = array(
    'title' => 'Delete card',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('membersify_delete_profile_form', 1, 3),
    'access callback' => 'membersify_payment_profile_access',
    'access arguments' => array(1, 3),
    'type' => MENU_CALLBACK,
    'file' => 'membersify.user.inc',
  );
  $items['user/%user/subscriptions/%membersify_subscription/change_plan'] = array(
    'title' => 'Change plan',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('membersify_change_plan_form', 1, 3),
    'access callback' => 'membersify_subscription_access',
    'access arguments' => array(1, 3, 'change own membersify plan'),
    'type' => MENU_CALLBACK,
    'file' => 'membersify.user.inc',
  );
  $items['user/%user/subscriptions/%membersify_subscription/change_plan/%membersify_plan/confirm'] = array(
    'title' => 'Change plan',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('membersify_change_plan_confirm_form', 1, 3, 5),
    'access callback' => 'membersify_subscription_access',
    'access arguments' => array(1, 3, 'change own membersify plan'),
    'type' => MENU_CALLBACK,
    'file' => 'membersify.user.inc',
  );
  $items['user/%user/subscriptions/%membersify_subscription/history'] = array(
    'title' => 'History',
    'page callback' => 'membersify_payment_history_page',
    'page arguments' => array(1, 3),
    'access callback' => 'membersify_subscription_access',
    'access arguments' => array(1, 3, 'view own membersify history'),
    'type' => MENU_CALLBACK,
    'file' => 'membersify.user.inc',
  );
  $items['user/%user/subscriptions/%membersify_subscription/history/%membersify_history_item'] = array(
    'title' => 'Details',
    'page callback' => 'membersify_payment_invoice_page',
    'page arguments' => array(1, 3, 5),
    'access callback' => 'membersify_subscription_access',
    'access arguments' => array(1, 3, 'view own membersify history'),
    'type' => MENU_CALLBACK,
    'file' => 'membersify.user.inc',
  );

  return $items;
}

/**
 * Access callback for the payment profile pages in the user account.
 */
function membersify_payment_profile_access($account, Membersify_Profile $profile = NULL) {
  global $user;

  if (!is_null($profile)) {
    return ($profile->user_id == $account->uid && $user->uid == $account->uid && user_access('change own membersify billing')) || user_access('administer membersify');
  }

  return ($user->uid == $account->uid && user_access('change own membersify billing')) || user_access('administer membersify');
}

/**
 * Access callback for the subscription pages in the user account.
 */
function membersify_subscription_access($account, $subscription, $permission) {
  global $user;

  // First, check the status of the subscription and see if they can do the selected action.
  switch ($permission) {
    case 'cancel own membersify subscription':
      if ($subscription->status != 'active') {
        return FALSE;
      }
      break;
  }

  return ($user->uid == $account->uid && $subscription->user_id == $account->uid && user_access($permission)) || user_access('administer membersify');
}

/**
 * Access callback for the subscription tab pages.
 */
function membersify_account_tab_access($account) {
  global $user;

  return ($user->uid == $account->uid && user_access('view own membersify account')) || user_access('administer membersify');
}

/**
 * Form constructor for the admin settings form.
 */
function membersify_admin($form, &$form_state) {
  $form['keys'] = array(
    '#type' => 'fieldset',
    '#title' => t('Keys'),
    '#description' => t("Enter the Public and Secret keys for this site. If you don't have these yet, sign up for free here: !link.",
        array('!link' => l(t('Membersify'), 'https://www.membersify.com'))),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['keys']['membersify_public_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Public key'),
    '#required' => TRUE,
    '#default_value' => variable_get('membersify_public_key', ''),
  );
  $form['keys']['membersify_secret_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Secret key'),
    '#required' => TRUE,
    '#default_value' => variable_get('membersify_secret_key', ''),
  );

  $form['membersify_info1'] = array(
    '#type' => 'item',
    '#title' => t('Membersify Dashboard'),
    '#markup' => '<p>' . t("Manage your site settings, subscriptions, and plans from your <a href='@url'>Membersify Dashboard</a>", array('@url' => url('https://www.membersify.com/dashboard'))) . '</p>',
  );
  $form['membersify_info2'] = array(
    '#type' => 'item',
    '#title' => t('Re-sync'),
    '#markup' => '<p>' . t("If you ever need to re-synchronize the content for any reason, you can do so here: <a href='@url'>Re-sync</a>. You shouldn't need to do this because everything is synced automatically.",
      array('@url' => url('admin/config/membersify/settings/sync'))) . '</p>',
  );
  $plans = membersify_get_plans();
  if (!empty($plans)) {
    $form['membersify_plans'] = array(
      '#type' => 'fieldset',
      '#title' => t('Purchase links'),
      '#description' => t("These links can be copy/pasted anywhere on the internet for a direct link to purchase a plan."),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    foreach ($plans as $plan) {
      $form['membersify_plans'][$plan->id] = array(
        '#type' => 'item',
        '#title' => $plan->name,
        '#markup' => l(url('membersify/purchase/' . $plan->machine_name, array('absolute' => TRUE)), 'membersify/purchase/' . $plan->machine_name),
      );
    }
  }

  return system_settings_form($form);
}

/**
 * Form validation handler for membersify_admin().
 */
function membersify_admin_validate($form, &$form_state) {
  if (variable_get('membersify_public_key', '') != $form_state['values']['membersify_public_key']
    || variable_get('membersify_secret_key', '') != $form_state['values']['membersify_secret_key'])
  // Validate the keys by attempting to sync everything.
  try {
    Membersify::setKeys($form_state['values']['membersify_public_key'], $form_state['values']['membersify_secret_key']);

    // Try to sync everything.
    membersify_sync_all();
  }
  catch (Exception $e) {
    form_set_error('membersify_public_key', t("Incorrect keys. Please verify the keys are correct. Error: @error", array('@error' => $e->getMessage())));
  }
}

/**
 * Loads a plan by id.
 *
 * @param string $id
 *   The id of the plan.
 *
 * @return Membersify_Plan
 *   The plan record or FALSE.
 */
function membersify_plan_load($id) {
  $result = _membersify_record_query('membersify_plans', array('id' => $id));

  foreach ($result as $row) {
    $row->data = unserialize($row->data);
    $row->payment_plan = unserialize($row->payment_plan);
    $object = new Membersify_Plan();
    $object->setValues($row);
    return $object;
  }

  // Fallback to load by machine name.
  $result = _membersify_record_query('membersify_plans', array('machine_name' => $id));

  foreach ($result as $row) {
    $row->data = unserialize($row->data);
    $row->payment_plan = unserialize($row->payment_plan);
    $object = new Membersify_Plan();
    $object->setValues($row);
    return $object;
  }

  return FALSE;
}

/**
 * Loads an adjustment by id.
 *
 * @param string $id
 *   The id of the adjustment.
 *
 * @return Membersify_Adjustment
 *   The adjustment record or FALSE.
 */
function membersify_adjustment_load($id) {
  $result = _membersify_record_query('membersify_adjustments', array('id' => $id));

  foreach ($result as $row) {
    $row->data = unserialize($row->data);
    $object = new Membersify_Adjustment();
    $object->setValues($row);
    return $object;
  }

  return FALSE;
}

/**
 * Loads a coupon by id.
 *
 * @param string $id
 *   The id of the coupon.
 *
 * @return Membersify_Coupon
 *   The coupon record or FALSE.
 */
function membersify_coupon_load($id) {
  $query = db_select('membersify_coupons', 'c');
  $query->leftJoin('membersify_adjustments', 'a', 'a.id = c.adjustment_id');
  $query->fields('a');
  $query->fields('c');
  $query->condition('c.adjustment_id', $id);
  $result = $query->execute();

  foreach ($result as $row) {
    $row->data = unserialize($row->data);
    $object = new Membersify_Coupon();
    $object->setValues($row);
    return $object;
  }

  return FALSE;
}

/**
 * Loads a coupon by code.
 *
 * @param string $code
 *   The code of the coupon.
 *
 * @return Membersify_Coupon
 *   The coupon record or FALSE.
 */
function membersify_coupon_load_by_code($code) {
  $query = db_select('membersify_coupons', 'c');
  $query->leftJoin('membersify_adjustments', 'a', 'a.id = c.adjustment_id');
  $query->fields('a');
  $query->fields('c');
  $query->condition('c.code', strtoupper($code));
  $result = $query->execute();

  foreach ($result as $row) {
    $row->data = unserialize($row->data);
    $object = new Membersify_Coupon();
    $object->setValues($row);
    return $object;
  }

  return FALSE;
}

/**
 * Checks if the coupon is valid.
 *
 * @param Membersify_Coupon $coupon
 *   The coupon object.
 * @param Membersify_Plan $plan
 *   The plan object.
 * @param stdClass $account
 *   The account object.
 * @param double $total
 *   The total amount.
 *
 * @throws Exception
 *   If the coupon is invalid, an exception is thrown.
 */
function membersify_coupon_validate(Membersify_Coupon $coupon, Membersify_Plan $plan, $account, $total) {
  if ($coupon->max_uses > 0 && $coupon->used > $coupon->max_uses) {
    throw new Exception(t('This coupon has reached the maximum redemption limit.'));
  }

  // Check the max uses per user.
  if ($account->uid && !empty($coupon->data['max_uses_per_user'])) {
    $user_used = 0;
    // Load all of the subscriptions for this user and add up any times the coupon
    $result = db_select('membersify_subscriptions', 'm')
      ->fields('m')
      ->condition('m.uid', $account->uid)
      ->execute();

    foreach ($result as $row) {
      if (!empty($row->payment_plan['adjustments'][$this->id])) {
        $user_used += 1;
      }
    }

    if ($user_used >= $coupon->data['max_uses_per_user']) {
      throw new Exception(t('This coupon has reached the maximum redemption limit.'));
    }
  }

  // Check the minimum purchase value.
  if (!empty($total) && $coupon->minimum_order > 0 && $coupon->minimum_order > $total) {
    throw new Exception(t('You have not reached the minimum order total for this coupon.'));
  }

  // Check the roles.
  $account_roles = $account->roles;
  if (!$account->status) {
    $account_roles = array(0 => t('Anonymous'));
  }
  if (!empty($coupon->data['roles'])) {
    $intersect = array_intersect_key($account_roles, $coupon->data['roles']);
    if (empty($intersect)) {
      throw new Exception(t('You do not have the correct permission to use this coupon.'));
    }
  }

  // Check the products.
  if (!empty($coupon->data['products'])) {
    $intersect = array_intersect_key(array($plan->id), $this->data['products']);
    if (empty($intersect)) {
      throw new Exception(t('You must use this coupon with a valid product.'));
    }
  }
}

/**
 * Loads a history item object.
 */
function membersify_history_item_load($id) {
  $result = _membersify_record_query('membersify_history', array('id' => $id));

  foreach ($result as $row) {
    $object = new Membersify_HistoryItem();
    $object->setValues($row);
    return $object;
  }

  return FALSE;
}

/**
 * Loads all the plans.
 *
 * @return Membersify_Plan[]
 *   An array of all of the plans, keyed by id.
 */
function membersify_get_plans() {
  $results = array();
  $result = _membersify_record_query('membersify_plans');

  foreach ($result as $row) {
    $row->data = unserialize($row->data);
    $row->payment_plan = unserialize($row->payment_plan);
    $object = new Membersify_Plan();
    $object->setValues($row);
    $results[$row->id] = $object;
  }

  return $results;
}

/**
 * Loads all payment profiles associated with a user id.
 *
 * @param int $uid
 *   The user id.
 *
 * @return Membersify_Profile[]
 *   An array of payment profiles for the user.
 */
function membersify_get_payment_profiles($uid) {
  $results = array();
  $result = _membersify_record_query('membersify_payment_profiles', array('user_id' => $uid));

  foreach ($result as $row) {
    $object = new Membersify_Profile();
    $object->setValues($row);
    $results[$row->id] = $object;
  }

  return $results;
}

/**
 * Loads all subscriptions associated with a payment profile.
 *
 * @param int $payment_profile_id
 *   The payment profile id.
 *
 * @return Membersify_Subscription[]
 *   An array of subscriptions.
 */
function membersify_get_subscriptions_by_payment_profile_id($payment_profile_id) {
  $results = array();
  $result = _membersify_record_query('membersify_subscriptions', array('payment_profile_id' => $payment_profile_id));

  foreach ($result as $row) {
    $object = new Membersify_Subscription();
    $object->setValues($row);
    $results[$row->id] = $object;
  }

  return $results;
}

/**
 * Loads a payment profile by id.
 *
 * @param string $id
 *   The id of the payment profile.
 *
 * @return Membersify_Profile
 *   The payment profile record or FALSE.
 */
function membersify_payment_profile_load($id) {
  $result = _membersify_record_query('membersify_payment_profiles', array('id' => $id));

  foreach ($result as $row) {
    $object = new Membersify_Profile();
    $object->setValues($row);
    return $object;
  }

  return FALSE;
}

/**
 * Performs a record select query and returns the results.
 *
 * @param string $table
 *   The table.
 * @param array $fields
 *   (Optional) The fields to filter by.
 */
function _membersify_record_query($table, $fields = NULL) {
  $query = db_select($table)
    ->fields($table);

  if (!is_null($fields)) {
    foreach ($fields as $key => $value) {
      $query->condition($key, $value);
    }
  }

  return $query->execute();
}

/**
 * Loads a subscription by id.
 *
 * @param string $id
 *   The id of the subscription.
 *
 * @return Membersify_Subscription
 *   The subscription record or FALSE.
 */
function membersify_subscription_load($id) {
  $result = _membersify_record_query('membersify_subscriptions', array('id' => $id));

  foreach ($result as $row) {
    $row->payment_plan = unserialize($row->payment_plan);
    $object = new Membersify_Subscription();
    $object->setValues($row);
    return $object;
  }

  return FALSE;
}

/**
 * Loads a subscription by id.
 *
 * @param string $custom
 *   The custom variable of the subscription.
 *
 * @return Membersify_Subscription
 *   The subscription record or FALSE.
 */
function membersify_subscription_load_by_custom($custom) {
  $result = _membersify_record_query('membersify_subscriptions', array('custom' => $custom));

  foreach ($result as $row) {
    $row->payment_plan = unserialize($row->payment_plan);
    $object = new Membersify_Subscription();
    $object->setValues($row);
    return $object;
  }

  return FALSE;
}

/**
 * Loads all subscriptions for a given user id.
 *
 * @param int $uid
 *   The user id.
 *
 * @return Membersify_Subscription[]
 *   An array of all of the subscriptions, keyed by id.
 */
function membersify_get_subscriptions($uid) {
  $results = array();
  $result = _membersify_record_query('membersify_subscriptions', array('user_id' => $uid));

  foreach ($result as $row) {
    $row->payment_plan = unserialize($row->payment_plan);
    $object = new Membersify_Subscription();
    $object->setValues($row);
    $results[$row->id] = $object;
  }

  return $results;
}

/**
 * Implements hook_form_FORM_ID_alter() for user_register_form().
 *
 * Inserts the subscription choices into the Registration Form.
 */
function membersify_form_user_register_form_alter(&$form, &$form_state) {
  // Make sure we don't show plans for admin created accounts.
  if (!user_access('administer users') && (arg(0) != 'admin')) {
    $plans = membersify_get_plans();
    $options = array();

    foreach ($plans as $plan) {
      // Only show plans that are set to show on the User Registration Screen.
      if (!$plan->data['show_registration']) {
        continue;
      }

      $options[$plan->id] = theme('membersify_subscription_option', array(
        'name' => $plan->name,
        'description' => $plan->description,
        'price' => membersify_get_price_string($plan->payment_plan),
      ));
    }

    if (!empty($options)) {
      $form['membersify'] = array(
        '#type' => 'radios',
        '#title' => t('Subscription level'),
        '#description' => t('Choose your subscription level'),
        '#options' => $options,
        '#required' => variable_get('membersify_force_signup', FALSE),
        '#weight' => variable_get('membersify_registration_form_weight', 0),
        '#default_value' => key($options),
      );

      if (variable_get('allow_free_signup', TRUE)) {
        $form['membersify']['#empty_option'] = variable_get('membersify_registration_free_name', t('None'));
        if (variable_get('membersify_registration_free_description', '')) {
          $form['membersify']['#empty_option'] .= ' - ' . variable_get('membersify_registration_free_description', '');
        }
      }

      // Add the submit callback at the end of the array.
      $form['#submit'][] = 'membersify_register_form_after_submit';
    }
  }
}

/**
 * Form submission handler for user_register_form().
 *
 * This is triggered after the user has been created, after the other form
 * submission handlers have run.
 *
 * @see user_register_form()
 * @see membersify_form_user_register_form_alter()
 */
function membersify_register_form_after_submit($form, &$form_state) {
  drupal_get_messages();
  if ($plan = membersify_plan_load($form_state['values']['membersify'])) {
    // Load the created user.
    $account = $form['#user'];

    if ($plan->payment_plan['main_amount'] == 0) {
      // Grant the free plan right away.
      $params = array(
        'plan_id' => $plan->id,
        'user_id' => $account->uid,
        'display' => $account->name,
      );
      Membersify::setKeys(variable_get('membersify_public_key', ''), variable_get('membersify_secret_key', ''));
      Membersify_Subscription::create($params);
    }
    else {
      // Block the user if allow_free_signup is off.
      if (!variable_get('membersify_allow_free_signup', FALSE)) {
        $account->status = 0;
        user_save($account);

        // Log the user out.
        global $user;
        $user = user_load(0);
        user_login_finalize();
      }

      // Store the custom data in the $_SESSION variable.
      $_SESSION['membersify_user_id'] = $account->uid;

      // Redirect to the purchase page.
      drupal_goto('membersify/purchase/' . $plan->machine_name);
    }
  }
}

/**
 * Adds a role to a user.
 *
 * @param int $uid
 *   The user id.
 * @param int $rid
 *   The role id.
 */
function membersify_add_role($uid, $rid) {
  $account = user_load($uid, TRUE);

  $rid = intval($rid);

  if ($account && $rid && $account->uid) {
    if (!in_array($rid, array(DRUPAL_ANONYMOUS_RID, DRUPAL_AUTHENTICATED_RID))) {
      // Remove the role first just in case the user already has it for some
      // reason. This is to prevent errors later.
      membersify_remove_role($account->uid, $rid);
      db_insert('users_roles')
        ->fields(array(
              'uid' => $account->uid,
              'rid' => $rid,
            ))
        ->execute();
      $roles = user_roles(TRUE);
      watchdog('membersify', 'Added role !role to !user.',
        array('!role' => $roles[$rid], '!user' => l($account->name, 'user/' . $account->uid)));
    }
  }
}

/**
 * Removes a role from a user.
 *
 * @param int $uid
 *   The user id.
 * @param int $rid
 *   The role id.
 *
 * @ingroup membersify_api
 */
function membersify_remove_role($uid, $rid) {
  $account = user_load($uid);

  $rid = intval($rid);

  if ($account && $rid && $account->uid && isset($account->roles[$rid])) {
    if (!in_array($rid, array(DRUPAL_ANONYMOUS_RID, DRUPAL_AUTHENTICATED_RID))) {
      db_delete('users_roles')
        ->condition('uid', $account->uid)
        ->condition('rid', $rid)
        ->execute();

      $roles = user_roles(TRUE);
      watchdog('membersify', 'Removed role !role from !user.',
        array('!role' => $roles[$rid], '!user' => l($account->name, 'user/' . $account->uid)));
    }
  }
}

/**
 * Checks if a user should keep a role that is about to be removed.
 *
 * This could happen when another subscription plan which is active still grants
 * that role to the user, when another plan expires which is supposed to remove
 * it.
 *
 * @param int $uid
 *   The user id.
 * @param int $rid
 *   The role id.
 *
 * @return bool
 *   TRUE if the role shouldn't be removed, FALSE if it can be.
 */
function membersify_is_role_protected($uid, $rid) {
  $subscriptions = membersify_get_subscriptions($uid);
  foreach ($subscriptions as $subscription) {
    if ($subscription->status != 'expired' && ($plan = membersify_plan_load($subscription->plan_id)) && in_array($rid, $plan->data['start_grant_roles'])) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Removes and/or adds roles to a user.
 *
 * @param int $uid
 *   The user id.
 * @param array $add
 *   An array of roles that should be added to the user.
 * @param array $remove
 *   An array of roles that should be removed from the user.
 */
function membersify_change_roles($uid, $add = array(), $remove = array()) {
  // Add the Roles.
  if (is_array($add)) {
    foreach ($add as $rid) {
      if ($rid) {
        membersify_add_role($uid, $rid);
      }
    }
  }

  // Remove the Roles.
  if (is_array($remove)) {
    foreach ($remove as $rid) {
      // Check to see if the role is protected by another subscription.
      if ($rid && !membersify_is_role_protected($uid, $rid)) {
        membersify_remove_role($uid, $rid);
      }
    }
  }
}

/**
 * Implements hook_mail().
 */
function membersify_mail($key, &$message, $vars) {
  $message['from'] = variable_get('membersify_notify_email_sender_address', variable_get('site_mail', ''));
  $message['subject'] = $vars['subject'];
  $message['body'][] = $vars['body'];

  watchdog('membersify', 'Sending an Email to a User. Message: <pre>!message</pre>',
      array('!message' => print_r($message)));
}

/**
 * Implements hook_theme().
 */
function membersify_theme() {
  return array(
    'membersify_checkout_summary' => array(
      'variables' => array(
        'items' => NULL,
        'adjustments' => NULL,
        'total' => NULL,
      ),
      'template' => 'templates/membersify-checkout-summary',
    ),
    'membersify_checkout_page' => array(
      'variables' => array(
        'summary' => NULL,
        'use_coupons' => NULL,
        'coupon_widget' => NULL,
        'payment_button' => NULL,
      ),
      'template' => 'templates/membersify-checkout-page',
    ),
    'membersify_user_page' => array(
      'variables' => array(
        'account' => NULL,
        'subscriptions_html' => NULL,
        'purchase_links' => NULL,
      ),
      'template' => 'templates/membersify-user-page',
    ),
    'membersify_thankyou_page' => array(
      'variables' => array(
        'account' => NULL,
        'subscription' => NULL,
        'history_item' => NULL,
      ),
      'template' => 'templates/membersify-thankyou-page',
    ),
    'membersify_subscription_option' => array(
      'variables' => array(
        'name' => NULL,
        'description' => NULL,
        'price' => NULL,
      ),
      'template' => 'templates/membersify-subscription-option',
    ),
    'membersify_subscription' => array(
      'variables' => array(
        'subscription' => NULL,
        'plan' => NULL,
        'change_billing_url' => NULL,
        'change_plan_url' => NULL,
        'cancel_url' => NULL,
        'renew_url' => NULL,
        'history_url' => NULL,
      ),
      'template' => 'templates/membersify-subscription',
    ),
    'membersify_invoice' => array(
      'variables' => array(
        'subscription' => NULL,
        'history_item' => NULL,
        'account' => NULL,
      ),
      'template' => 'templates/membersify-invoice',
    ),
    'membersify_purchase_link' => array(
      'variables' => array(
        'url' => NULL,
        'plan' => NULL,
      ),
      'template' => 'templates/membersify-purchase-link',
    ),
  );
}

/**
 * Determines which plans are available to be modified to from a given plan.
 *
 * @param Membersify_Plan $current_plan
 *
 * @return array
 *   An array of possible plan names, keyed by id, suitable for use in select elements.
 */
function membersify_get_modify_options(Membersify_Plan $current_plan) {
  $plans = membersify_get_plans();
  $options = array();

  foreach ($plans as $plan) {
    // Don't include the current plan.
    if ($plan->id == $current_plan->id) {
      continue;
    }

    if (!in_array($plan->machine_name, array_filter($current_plan->data['modify_options']['upgrade'])) && !in_array($plan->machine_name, array_filter($current_plan->data['modify_options']['downgrade']))) {
      continue;
    }

    $plan->payment_plan['has_trial'] = FALSE;

    $options[$plan->machine_name] = theme('membersify_subscription_option', array(
      'name' => $plan->name,
      'description' => $plan->description,
      'price' => membersify_get_price_string($plan->payment_plan),
    ));
  }

  return $options;
}

/**
 * Returns the translated type of an invoice item.
 *
 * @return string
 *   The translated type.
 */
function membersify_get_history_item_type($type) {
  $types = membersify_get_history_item_types();

  return isset($types[$type]) ? $types[$type] : $type;
}

/**
 * Gets all of the types possible for history items.
 *
 * @return array
 *   An array of types possible for history items.
 */
function membersify_get_history_item_types() {
  return array(
    'signup' => t('Signup'),
    'payment' => t('Payment'),
    'upgrade' => t('Upgrade'),
    'downgrade' => t('Downgrade'),
    'pending_downgrade' => t('Pending downgrade'),
    'cancellation' => t('Cancellation'),
    'renewal' => t('Reactivation'),
    'expiring_soon' => t('Expiring soon'),
    'expiration' => t('Expiration'),
    'failure' => t('Failed payment'),
    'refund' => t('Refund'),
    'changed_billing' => t('Billing info changed'),
  );
}

/**
 * Returns the translated status of a subscription.
 *
 * @return string
 *   The translated status.
 */
function membersify_get_subscription_status($status) {
  $statuses = membersify_get_subscription_statuses();

  return isset($statuses[$status]) ? $statuses[$status] : $status;
}

/**
 * Gets all of the statuses possible for subscriptions.
 *
 * @return array
 *   An array of statuses possible for subscriptions.
 */
function membersify_get_subscription_statuses() {
  return array(
    'active' => t('Active'),
    'canceled' => t('Canceled'),
    'expired' => t('Expired'),
    'pending_downgrade' => t('Pending downgrade'),
    'disabled' => t('Disabled'),
    'expiring_soon' => t('Expiring soon'),
    'complete' => t('Payments completed')
  );
}

/**
 * Returns the translated status of a payment profile.
 *
 * @return string
 *   The translated status.
 */
function membersify_get_payment_profile_status($status) {
  $statuses = membersify_get_payment_profile_statuses();

  return isset($statuses[$status]) ? $statuses[$status] : $status;
}

/**
 * Gets all of the statuses possible for payment profiles.
 *
 * @return array
 *   An array of statuses possible for payment profiles.
 */
function membersify_get_payment_profile_statuses() {
  return array(
    'active' => t('Active'),
    'expired' => t('Expired'),
    'error' => t('Error'),
    'disabled' => t('Disabled'),
  );
}