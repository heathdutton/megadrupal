<?php

/**
 * @file
 * Methods and callbacks related to the Access Control features of Membersify.
 *
 * The admin will be able to specify on a per-content-type basis the roles that
 * should be able to view the content. They will also have the option to
 * override this setting on a per-content basis.
 *
 * Copyright 2014 Membersify
 */

/**
 * Determines if the account should have view access to the node.
 *
 * @param $account
 *   The user account to check.
 * @param $node
 *   The node object to check.
 *
 * @return bool
 *   TRUE if the user has access, FALSE otherwise.
 */
function membersify_acl_has_access($account, $node) {
  if (empty($node->membersify_acl_active)) {
    return TRUE;
  }

  // Authors and admins should always have access.
  if (($account->uid == $node->uid && $node->uid != 0) || user_access('administer nodes', $account)) {
    return TRUE;
  }

  // If the user has one of the required roles, grant access.
  return array_intersect_key($account->roles, array_filter($node->membersify_acl_allowed_roles));
}

/**
 * Implements hook_node_load().
 */
function membersify_acl_node_load($nodes, $types) {
  foreach ($nodes as $nid => $node) {
    $nodes[$nid]->membersify_acl_active = FALSE;
    $defaults = membersify_acl_get_type_defaults($nodes[$nid]->type);
    if ($override_settings = membersify_acl_load_node_settings($nodes[$nid]->vid)) {
      $nodes[$nid]->membersify_acl_overridden = TRUE;
      $nodes[$nid]->membersify_acl_active = $override_settings->data['active'];
      $nodes[$nid]->membersify_acl_protected_message = $override_settings->data['protected_message'];
      $nodes[$nid]->membersify_acl_allowed_roles = $override_settings->data['allowed_roles'];
    }
    elseif ($defaults['active']) {
      $nodes[$nid]->membersify_acl_overridden = FALSE;
      $nodes[$nid]->membersify_acl_active = $defaults['active'];
      $nodes[$nid]->membersify_acl_protected_message = $defaults['protected_message'];
      $nodes[$nid]->membersify_acl_allowed_roles = $defaults['allowed_roles'];
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function membersify_acl_node_delete($node) {
  db_delete('membersify_acl')
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * Implements hook_node_insert().
 */
function membersify_acl_node_insert($node) {
  membersify_acl_save_node_helper($node);
}

/**
 * Implements hook_node_update().
 */
function membersify_acl_node_update($node) {
  membersify_acl_save_node_helper($node);
}

/**
 * Saves the ACL settings when creating or updating a node.
 *
 * @param stdClass $node
 *   The node object being saved.
 */
function membersify_acl_save_node_helper($node) {
  if (!empty($node->membersify_acl_use_override) || (!isset($node->membersify_acl_use_override) && membersify_acl_load_node_settings($node->nid))) {
    $data = array(
      'active' => $node->membersify_acl_active,
      'protected_message' => $node->membersify_acl_protected_message,
      'allowed_roles' => $node->membersify_acl_allowed_roles,
    );
    membersify_acl_save_node_settings($node, $data);
  }
  else {
    membersify_acl_delete_node_settings($node->vid);
  }
}

/**
 * Implements hook_node_view().
 */
function membersify_acl_node_view($node, $view_mode = 'full') {
  global $user;
  if (!empty($node->membersify_acl_active)) {
    if (empty($node->membersify_acl_processed) && !membersify_acl_has_access($user, $node)) {
      // Show the message and purchase link
      $protected_html = $node->membersify_acl_protected_message;

      // Replace the Tokens
      $protected_html = token_replace($protected_html,
        array(
          'membersify_acl' => $node,
          'node' => $node,
        )
      );

      if ($protected_html != 'FULL') {
        // Unset the content field
        unset($node->content);

        $node->content['membersify_acl_protect_message'] = array(
          '#markup' => $protected_html,
        );
      }
    }
  }
}

/**
 * Gets the defaults for content types.
 *
 * @param string $type
 *   The content type machine name.
 *
 * @return array
 *   An array of settings for the content type.
 */
function membersify_acl_get_type_defaults($type) {
  return array(
    'active' => variable_get('membersify_acl_active_' . $type, FALSE),
    'protected_message' => variable_get('membersify_acl_protected_message_' . $type,
      t("[membersify_acl:nodeTeaser]
<br /><br />
To view the full content, please <a href='[membersify_acl:userSubscriptionPage]'>upgrade your subscription level</a>.")),
    'allowed_roles' => variable_get('membersify_acl_allowed_roles_' . $type, array()),
  );
}

/**
 * Implements hook_form_alter().
 */
function membersify_acl_form_alter(&$form, $form_state, $form_id) {
  // Sometimes the node edit form is a unique form name
  if (!empty($form['#node_edit_form'])) {
    $form_id = 'node-form';
  }
  switch ($form_id) {
    case 'node-form':
      if (user_access('administer membersify')) {
        if (variable_get('membersify_acl_active_' . $form['#node']->type, FALSE)) {
          $defaults = membersify_acl_get_type_defaults($form['#node']->type);

          if (!empty($form['#node']->nid)) {
            $defaults['protected_message'] = $form['#node']->membersify_acl_protected_message;
            $defaults['allowed_roles'] = $form['#node']->membersify_acl_allowed_roles;
          }
          $form['membersify_acl'] = array(
            '#type' => 'fieldset',
            '#title' => t('Membersify Access Control'),
            '#collapsed' => TRUE,
            '#collapsible' => TRUE,
            '#group' => 'additional_settings',
          );

          $form['membersify_acl']['membersify_acl_use_override'] = array(
            '#type' => 'checkbox',
            '#title' => t('Override content type settings?'),
            '#description' => t('Check this box to set specific settings for this content.'),
            '#default_value' => !empty($form['#node']->membersify_acl_overridden) ? $form['#node']->membersify_acl_overridden : FALSE,
          );
          $form['membersify_acl']['membersify_acl_active'] = array(
            '#type' => 'checkbox',
            '#title' => t('Restrict access'),
            '#description' => t('Check this box to restrict access to this content.'),
            '#default_value' => $defaults['active'],
          );
          $form['membersify_acl']['membersify_acl_allowed_roles'] = array(
            '#type' => 'checkboxes',
            '#title' => t('Allowed roles'),
            '#description' => t("Select which roles should be allowed access to this content."),
            '#options' => user_roles(),
            '#required' => FALSE,
            '#default_value' => $defaults['allowed_roles'],
          );
          $form['membersify_acl']['membersify_acl_protected_message'] = array(
            '#type' => 'textarea',
            '#title' => t('Marketing message'),
            '#description' => t("Enter the message the user will be shown if they don't have access to view the content."),
            '#required' => FALSE,
            '#default_value' => $defaults['protected_message'],
          );
          if (module_exists('token')) {
            $form['membersify_acl']['membersify_acl_protected_message_token_help']['tokens'] = array(
              '#theme' => 'token_tree',
              '#token_types' => array('membersify_acl', 'node'),
              '#dialog' => TRUE,
            );
          }
        }
      }
      break;

    case 'node_type_form':
      //Add the stuff to the content type settings
      if (user_access('administer membersify')) {
        $defaults = membersify_acl_get_type_defaults($form['#node_type']->type);
        $form['membersify_acl'] = array(
          '#type' => 'fieldset',
          '#title' => t('Membersify Settings'),
          '#collapsible' => TRUE,
          '#collapsed' => !$defaults['active'],
          '#group' => 'additional_settings',
        );

        $form['membersify_acl']['membersify_acl_active'] = array(
          '#type' => 'checkbox',
          '#title' => t('Restrict access'),
          '#description' => t('Check this box to restrict access to content of this type.'),
          '#default_value' => $defaults['active'],
        );
        $form['membersify_acl']['membersify_acl_allowed_roles'] = array(
          '#type' => 'checkboxes',
          '#title' => t('Allowed roles'),
          '#description' => t("Select which roles should be allowed access to this content."),
          '#options' => user_roles(),
          '#required' => FALSE,
          '#default_value' => $defaults['allowed_roles'],
        );
        $form['membersify_acl']['membersify_acl_protected_message'] = array(
          '#type' => 'textarea',
          '#title' => t('Marketing message'),
          '#description' => t("Enter the message the user will be shown if they don't have access to view the content."),
          '#required' => FALSE,
          '#default_value' => $defaults['protected_message'],
        );
        if (module_exists('token')) {
          $form['membersify_acl']['membersify_acl_protected_message_token_help']['tokens'] = array(
            '#theme' => 'token_tree',
            '#token_types' => array('membersify_acl', 'node'),
            '#dialog' => TRUE,
          );
        }
      }
      break;
  }
}

/**
 * Implements hook_token_info().
 */
function membersify_acl_token_info() {
  $types = array(
    'membersify_acl' => array(
      'name' => t('Membersify'),
      'description' => t('Membersify Variables'),
      'needs-data' => 'membersify_acl',
    ),
  );

  $tokens = array(
    'membersify_acl' => array(
      'userSubscriptionPage' => array(
        'name' => t('Subscription Page'),
        'description' => t("The user's subscription dashboard."),
      ),
      'nodeTeaser' => array(
        'name' => t('Node Teaser'),
        'description' => t("The node teaser"),
      ),
    ),
  );

  return array('types' => $types, 'tokens' => $tokens);
}

/**
 * Implementation of hook_tokens()
 */
function membersify_acl_tokens($type, $tokens, $data = array(), $options = array()) {
  $replacements = array();

  if ($type == 'membersify_acl' && !empty($data['membersify_acl'])) {
    $object = $data['membersify_acl'];
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'userSubscriptionPage':
          global $user;
          // If the user isn't logged in, redirect to the registration page.
          $replacements[$original] = $user->uid ? url('user/' . $user->uid . '/subscription') : url('user/register');
          break;

        case 'nodeTeaser':
          $object->membersify_acl_processed = TRUE;
          unset($object->content);

          // Block comments for the teaser.
          $object->comment = 0;
          node_build_content($object, 'teaser');

          // Remove all links from the teaser.
          unset($object->content['links']);
          $teaser = drupal_render($object->content);
          $replacements[$original] = $teaser;
          break;
      }
    }
  }

  return $replacements;
}

/**
 * Loads the overridden settings for a node.
 *
 * @param int $vid
 *   The revision id of the node.
 *
 * @return stdClass
 *   The record.
 */
function membersify_acl_load_node_settings($vid) {
  $result = db_query("SELECT * FROM {membersify_acl} WHERE vid = :vid", array(':vid' => $vid));

  foreach ($result as $row) {
    $row->data = unserialize($row->data);
    return $row;
  }

  return FALSE;
}

/**
 * Deletes the overridden settings for a node.
 *
 * @param int $vid
 *   The revision id of the node.
 */
function membersify_acl_delete_node_settings($vid) {
  return db_delete('membersify_acl')
    ->condition('vid', $vid)
    ->execute();
}

/**
 * Saves the overridden settings for a node.
 *
 * @param stdClass $node
 *   The node object.
 * @param array $settings
 *   The settings to save. Should be an associative array with the following
 *   fields:
 *     -active: TRUE if the restriction is active, FALSE otherwise.
 *     -protected_message: The message that should be shown if the user doesn't
 *       have access yet.
 *     -allowed_roles: An array of roles that should be given access.
 */
function membersify_acl_save_node_settings($node, $settings) {
  membersify_acl_delete_node_settings($node->vid);

  db_insert('membersify_acl')
    ->fields(array(
      'vid' => $node->vid,
      'nid' => $node->nid,
      'data' => serialize($settings),
    ))
    ->execute();
}