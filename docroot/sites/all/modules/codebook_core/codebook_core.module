<?php

/**
 * @file
 * Code for the Codebook Core feature.
 */
include_once 'codebook_core.features.inc';

define('CODEBOOK_CORE_NUM_SEP', '.');

/**
 * Implements hook_menu().
 */
function codebook_core_menu() {

  $items['admin/config/codebook'] = array(
    'title' => 'Codebook',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('codebook_core_admin_config'),
    'access arguments' => array(''),
    'file' => 'codebook_core.admin.inc',
  );

  return $items;
}

/**
 * Generate a full document number for a codebook document.
 */
function codebook_core_doc_num($node, $reset = FALSE) {
  $cid = __FUNCTION__ . "--{$node->nid}";

  // Attempt to look up from cache.
  if (!$reset && $cache = cache_get($cid)) {
    return $cache->data;
  }

  $w = entity_metadata_wrapper('node', $node);
  $doc_num = $w->field_codebook_doc_num->value();
  $len = variable_get("codebook_core_num_len_{$node->type}", 1);
  $doc_num = str_pad($doc_num, $len, '0', STR_PAD_LEFT);

  // We've got different fields in play now, try each until we find a winner.
  $info = $w->getPropertyInfo();
  $sep = variable_get('codebook_core_num_sep', CODEBOOK_CORE_NUM_SEP);
  foreach (array('field_codebook_title', 'field_codebook_chapter') as $field_name) {
    if (!empty($info[$field_name]) && $parent = $w->$field_name->value()) {
      $doc_num = codebook_core_doc_num($parent) . "$sep$doc_num";
    }
  }

  // Cache the result until something forces an update.
  cache_set($cid, $doc_num);

  return $doc_num;
}

/**
 * Implements hook_field_formatter_info().
 */
function codebook_core_field_formatter_info() {
  $info['codebook_core_doc_title'] = array(
    'label' => t('Codebook title'),
    'field types' => array('entityreference'),
  );
  $info['codebook_core_section_note'] = array(
    'label' => t('Codebook section note'),
    'field types' => array('field_collection'),
  );
  return $info;
}

/**
 * Implements hook_field_formatter_view().
 */
function codebook_core_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  // If this is an entityreference type field, go ahead and load all of the
  // referenced entites. Faster to load in one shot than iterating.
  if ($field['type'] == 'entityreference') {
    $etids = array();
    foreach ($items as $item) {
      $etids[] = $item['target_id'];
    }
    $entities = entity_load($field['settings']['target_type'], $etids);
  }

  switch ($display['type']) {
    case 'codebook_core_doc_title':
      foreach ($entities as $delta => $target) {
        $uri = entity_uri($field['settings']['target_type'], $target);
        $link = l(entity_label($field['settings']['target_type'], $target), $uri['path'], $uri['options']);
        $element[$delta] = array(
          '#markup' => t('Up to !link', array('!link' => $link)),
          '#access' => entity_access('view', $field['settings']['target_type'], $target)
        );
      }
      break;
    case 'codebook_core_section_note':
      if ($items) {
        $render['#entity'] = $entity;
        $render['#entity_type'] = $entity_type;
        $render['#field'] = $field;
        $render['#theme'] = 'codebook_core_section_notes';
        foreach ($items as $delta => $item) {
          $render['#items'][$delta] = $item;
        }
        $element[0] = $render;
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_token_info().
 */
function codebook_core_token_info() {
  $node['codebook_doc_num'] = array(
    'name' => t('Codebook document number'),
    'description' => t('Codebok document number including parent Title, Chapter, and Section document numbers.'),
  );

  return array(
    'types' => array(),
    'tokens' => array('node' => $node),
  );
}

/**
 * Implements hook_tokens($type, $tokens, $data, $options).
 */
function codebook_core_tokens($type, $tokens, $data, $options) {
  $sanitize = !empty($options['sanitize']);

  $replacements = array();

  if ($type == 'node' && !empty($data['node'])) {
    $node = $data['node'];

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'codebook_doc_num':
          $replacements[$original] = $sanitize ? check_plain(codebook_core_doc_num($node)) : codebook_core_doc_num($node);
          break;
      }
    }
  }

  return $replacements;
}

/**
 * Implements hook_node_view().
 */
function codebook_core_node_view($node, $view_mode, $langcode) {

  // Sets breadcrumbs.
  codebook_core_set_breadcrumbs($node);

  // Adds back to top link.
  if ($node->type == 'codebook_section' && $view_mode == 'codebook_embed') {
    $node->content['links']['node']['#links']['codebook-top'] = array(
      'title' => t('Back to top'),
      'href' => current_path(),
    );
    $node->content['links']['node']['#links']['codebook-top']['fragment'] = 'page';
  }

}

/**
 * Set breadcrumbs for codebook content.
 */
function codebook_core_set_breadcrumbs($node) {
  // Bail early if possible.
  if (!node_is_page($node) || !in_array($node->type, codebook_core_node_types())) {
    return;
  }

  $breadcrumbs = array();
  $doc = $node;

  // Add the current page.
  // @todo: Make linking and visibility configurable.
  $breadcrumbs[] = l($doc->title, "node/{$doc->nid}");

  while ($doc = codebook_core_get_parent($doc)) {
    $breadcrumbs[] = l($doc->title, "node/{$doc->nid}");
  }

  // Add the home page.
  // @todo: Make the "root" configurable.
  $breadcrumbs[] = l(t('Codebook'), 'codebook');

  drupal_set_breadcrumb(array_reverse($breadcrumbs));
}

/**
 * Utility function to find the parent document of a codebook node.
 */
function codebook_core_get_parent($node) {
  switch ($node->type) {
    case 'codebook_chapter':
      $cw = entity_metadata_wrapper('node', $node);
      return $cw->field_codebook_title->value();
    case 'codebook_section':
      $sw = entity_metadata_wrapper('node', $node);
      return $sw->field_codebook_chapter->value();
  }
}

/**
 * Utility function to enumerate node types provided by codebook.
 */
function codebook_core_node_types() {
  return array('codebook_title', 'codebook_chapter', 'codebook_section');
}

/**
 * Implements hook_entity_info_alter().
 *
 * Add an extra view mode to allow a different field display configuration to be
 * used when sections are displayed within chapters.
 */
function codebook_core_entity_info_alter(&$info) {
  $info['node']['view modes']['codebook_embed'] = array(
    'label' => t('Codebook embed'),
    'custom settings' => FALSE,
  );
}

/**
 * Implements hook_theme().
 */
function codebook_core_theme() {
  return array(
    'codebook_core_section_notes' => array(
      'variables' => array(
        'items' => array(),
        'entity' => NULL,
        'entity_type' => NULL,
        'field' => NULL,
      ),
      'file' => 'codebook_core.theme.inc',
    ),
  );
}
