<?php
/**
 * @file
 * Module file for node fields block.
 */

/**
 * Implements hook_menu().
 */
function node_fields_block_menu() {
  $items = array();

  $items['admin/structure/block/add-node-fields-block'] = array(
    'title' => 'Add node fields block',
    'description' => 'Add a new node fields block.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('node_fields_block_add_block_form'),
    'access arguments' => array('administer node fields blocks'),
    'type' => MENU_LOCAL_ACTION,
  );

  $items['admin/structure/block/delete-node-fields-block'] = array(
    'title' => 'Delete node fields block',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('node_fields_block_delete'),
    'access arguments' => array('administer node fields blocks'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Base configuration form. Used as template for other forms.
 *
 * @param int $delta
 *   The delta of the node fields block.
 */
function node_fields_block_configure_form_base($delta = '') {
  $form = array();

  $node_types = node_type_get_types();
  $type_options = array();

  foreach ($node_types as $key => $type) {
    $type_options[$key] = $type->name;
  }

  $form['node_fields_block_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#default_value' => variable_get('node_fields_block_' . $delta . '_title', ''),
  );

  $form['types'] = array(
    '#type' => 'fieldset',
    '#title' => t('Node Types'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['types']['node_fields_block_node_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Node Types'),
    '#description' => t('The node types to use this for.'),
    '#options' => $type_options,
    '#default_value' => variable_get('node_fields_block_' . $delta . '_node_types', array()),
  );

  $form['fields'] = array(
    '#type' => 'fieldset',
    '#title' => t('Fields'),
    '#description' => t('Select one or more node types to start selecting fields.'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  // Get all available fields and format them in options.
  $fields = field_info_fields();

  $default_values = variable_get('node_fields_block_' . $delta . '_block_fields', array());

  // Add node title as default field.
  $form['fields']['node_fields_block_node_title'] = array(
    '#type' => 'checkbox',
    '#title' => 'title',
    '#default_value' => !empty($default_values['node_title']) ? TRUE : FALSE,
  );

  foreach ($fields as $key => $field) {
    // Get all the bundles the field is enabled for to use in
    // the form #states. This way we can hide fields that do not belong
    // to the selected node type.
    $states_bundles = array();
    if (isset($field['bundles']['node'])) {
      foreach ($field['bundles']['node'] as $bundle) {
        $states_bundles['visible'][][':input[name="node_fields_block_node_types[' . $bundle . ']"]'] = array('checked' => TRUE);
      }
    }
    else {
      // Skip the field if it has no node bundles.
      continue;
    }

    // Add a checkbox per field so we can use form #states.
    $form['fields']['node_fields_block_' . $key] = array(
      '#type' => 'checkbox',
      '#title' => $field['field_name'] . '',
      '#default_value' => !empty($default_values[$key]) ? TRUE : FALSE,
      '#states' => $states_bundles,
    );
  }

  return $form;
}

/**
 * Form to add node fields block.
 */
function node_fields_block_add_block_form() {
  $form = node_fields_block_configure_form_base();

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  $form['#submit'] = array('node_fields_block_block_form_submit');

  return $form;
}

/**
 * Submit callback for node_fields_block_admin_block_form().
 *
 * Saves the new node fields block.
 */
function node_fields_block_block_form_submit($form, &$form_state) {
  // Determine the delta of the new block.
  $block_ids = variable_get('node_fields_block_ids', array());
  $delta = empty($block_ids) ? 1 : max($block_ids) + 1;
  $form_state['values']['delta'] = $delta;

  // Save the new array of blocks IDs.
  $block_ids[] = $delta;
  variable_set('node_fields_block_ids', $block_ids);

  node_fields_block_block_save($delta, $form_state['values']);

  drupal_set_message(t('The node fields block is succesfully added.'));

  $form_state['redirect'] = 'admin/structure/block';
}

/**
 * Implements hook_block_save().
 */
function node_fields_block_block_save($delta = '', $edit = array()) {
  $enabled_fields = array();
  // Loop through the fields to see if they are enabled.
  $fields = field_info_fields();

  // Check if the node title is a field to show in the block.
  if (!empty($edit['node_fields_block_node_title'])) {
    $enabled_fields['node_title'] = 'title';
  }

  foreach ($fields as $key => $field) {
    if (!empty($edit['node_fields_block_' . $key])) {
      $enabled_fields[$key] = $key;
    }
  }

  if (!empty($delta)) {
    variable_set("node_fields_block_{$delta}_title", $edit['node_fields_block_title']);
    variable_set("node_fields_block_{$delta}_node_types", $edit['node_fields_block_node_types']);
    variable_set("node_fields_block_{$delta}_block_fields", $enabled_fields);
  }
}

/**
 * Implements hook_permission().
 */
function node_fields_block_permission() {
  return array(
    'administer node fields blocks' => array(
      'title' => t('Add node fields blocks.'),
      'description' => 'Allow users to administer node fields blocks',
    ),
  );
}

/**
 * Implements hook_theme().
 */
function node_fields_block_theme() {
  return array(
    'node_fields_block_block' => array(
      'variables' => array(
        'node' => NULL,
        'fields' => NULL,
      ),
    ),
    'node_fields_block_field' => array(
      'variables' => array(
        'node' => NULL,
        'field' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function node_fields_block_block_info() {
  $blocks = array();

  $deltas = variable_get('node_fields_block_ids', array());
  foreach ($deltas as $delta) {
    $blocks[$delta]['info'] = 'Node fields block: ' . variable_get('node_fields_block_' . $delta . '_title', $delta);
    $blocks[$delta]['cache'] = DRUPAL_CACHE_PER_PAGE;
  }

  return $blocks;
}

/**
 * Implements hook_entity_info_alter().
 *
 * Add an extra view mode so field displays can be configured specific for this
 * block.
 */
function node_fields_block_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['node_fields_block'] = array(
    'label' => t('Node fields block'),
    'custom settings' => FALSE,
  );

}

/**
 * Implements hook_block_configure().
 *
 * Select for wich node type and wich fields.
 */
function node_fields_block_block_configure($delta = '') {
  $form = node_fields_block_configure_form_base($delta);

  return $form;
}

/**
 * Implements hook_block_view().
 */
function node_fields_block_block_view($delta = '') {
  if (!empty($delta)) {
    $block['subject'] = variable_get('node_fields_block_' . $delta . '_title', '');

    // Get the current loaded node.
    $node = menu_get_object();

    $block['#node'] = $node;

    // Get the block configuration and remove the empty values from the array.
    $allowed_node_types = array_filter(variable_get('node_fields_block_' . $delta . '_node_types', array()));
    $fields = array_filter(variable_get('node_fields_block_' . $delta . '_block_fields', array()));

    // Check if we are on a valid node page with an allowed node type.
    if (isset($node->nid) && in_array($node->type, $allowed_node_types)) {
      // First check if we have found fields. If the fields are empty we don't
      // display a block.
      $has_fields = FALSE;
      foreach ($fields as $field) {
        if (!empty($node->{$field})) {
          $has_fields = TRUE;
          break;
        }
      }

      // Only display the block if there are no empty fields.
      if ($has_fields) {
        $nodes = &drupal_static(__FUNCTION__, array());

        if (!isset($nodes[$node->nid])) {
          $nodes[$node->nid] = node_view($node, 'node_fields_block');
        }

        $block['content'] = theme('node_fields_block_block__' . $node->type, array('node' => $nodes[$node->nid], 'fields' => $fields));
      }
    }
  }

  return $block;
}

/**
 * Alters the block admin form to add delete links next to node fields blocks.
 */
function node_fields_block_form_block_admin_display_form_alter(&$form, $form_state) {
  $deltas = variable_get('node_fields_block_ids', array());

  foreach ($deltas as $delta) {
    if (!empty($form['blocks']['node_fields_block_' . $delta])) {
      $form['blocks']['node_fields_block_' . $delta]['delete'] = array(
        '#type' => 'link',
        '#title' => t('delete'),
        '#href' => 'admin/structure/block/delete-node-fields-block/' . $delta,
      );
    }
  }
}

/**
 * Menu callback: confirm deletion of node fields blocks.
 */
function node_fields_block_delete($form, &$form_state, $delta = 0) {
  $title = variable_get('node_fields_block_' . $delta . '_title', '');
  $form['block_title'] = array('#type' => 'hidden', '#value' => $title);
  $form['delta'] = array('#type' => 'hidden', '#value' => $delta);

  return confirm_form($form, t('Are you sure you want to delete the "%name" block?', array('%name' => $title)), 'admin/structure/block', NULL, t('Delete'), t('Cancel'));
}

/**
 * Deletion of node fields blocks.
 */
function node_fields_block_delete_submit($form, &$form_state) {
  // Remove the node fields block configuration variables.
  $delta = $form_state['values']['delta'];
  $block_ids = variable_get('node_fields_block_ids', array());
  unset($block_ids[array_search($delta, $block_ids)]);
  sort($block_ids);
  variable_set('node_fields_block_ids', $block_ids);

  // Delete the variables for this block.
  variable_del("node_fields_block_{$delta}_title");
  variable_del("node_fields_block_{$delta}_node_types");
  variable_del("node_fields_block_{$delta}_block_fields");

  // Delete the block from the blocks tables.
  db_delete('block')
  ->condition('module', 'node_fields_block')
  ->condition('delta', $delta)
  ->execute();
  db_delete('block_role')
  ->condition('module', 'node_fields_block')
  ->condition('delta', $delta)
  ->execute();

  drupal_set_message(t('The block "%name" has been removed.', array('%name' => $form_state['values']['block_title'])));
  cache_clear_all();
  $form_state['redirect'] = 'admin/structure/block';
}

/**
 * Implements hook_preprocess_block().
 *
 * Add classes for fields to the block template.
 */
function node_fields_block_preprocess_block(&$variables) {
  $block = $variables['block'];
  if ($block->module == 'node_fields_block') {
    // Get all the available fields for this block.
    $fields = array_filter(variable_get('node_fields_block_' . $block->delta . '_block_fields', array()));

    // Add the fields as classes to the block.
    foreach ($fields as $field) {
      $variables['classes_array'][] = str_replace('_', '-', $field);
    }
  }
}

/**
 * Theme function for node_fields_block_block.
 */
function theme_node_fields_block_block($variables) {
  $node = $variables['node'];
  $fields = $variables['fields'];
  $unordered_fields = array();

  $output = '';

  // Create the title field to render in the theme function. We do this outside
  // the fields loop because the node title is not a field but a property.
  if (isset($fields['node_title'])) {
    $title = array(
      '#type' => 'markup',
      '#markup' => '<div class="node-title">' . $node['#node']->title . '</div>',
    );
    $output .= theme('node_fields_block_field__title', array(
      'node' => $node,
      'field' => $title,
    ));
  }

  // Get all the fields from the node, so that we can order them by #weight.
  foreach ($fields as $field_name => $field) {
    if (!empty($node[$field])) {
      $unordered_fields[$field_name] = $node[$field];
    }
  }

  // Use uasort with the drupal element_sort to get the fields ordered by
  // #weight.
  if (!empty($unordered_fields)) {
    uasort($unordered_fields, 'element_sort');
  }

  // Render and output the fields.
  foreach ($unordered_fields as $field_name => $field) {
    $output .= theme('node_fields_block_field__' . $field_name, array(
      'node' => $node,
      'field' => $field,
    ));
  }

  return $output;
}

/**
 * Theme function for node_fields_block_field.
 */
function theme_node_fields_block_field($variables) {
  $field = $variables['field'];

  return drupal_render($field);
}
