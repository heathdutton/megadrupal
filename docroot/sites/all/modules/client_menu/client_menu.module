<?php

/**
 * @file
 * Client Menu module code.
 */

/**
 * Implements hook_menu().
 * 
 * Create the settings page menu link.
 */
function client_menu_menu() {
  $items = array();

  $items['admin/config/user-interface/client_menu'] = array(
    'title' => 'Client Menu',
    'description' => 'Adjust client menu settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('client_menu_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'client_menu_settings.inc',
  );

  return $items;

}

/**
 * Implements hook_permission().
 * 
 * Add the permissions needed for client menu.
 */
function client_menu_permission() {
  return array(
    'access client_menu' => array(
      'title' => t('Access Client Menu'),
      'description' => t('Gain accsess to client menu'),
    ),
  );
}

/**
 * Implements user_access().
 * 
 * We are overiding this hook so the root user (userID = 1), 
 * won't automaticly bypass the "access client menu" permission setting.
 */
function client_menu_user_access($string, $account = NULL) {
  global $user;

  if (!isset($account)) {
    $account = $user;
  }

  // To reduce the number of SQL queries, we cache the user's permissions
  // in a static variable.
  // Use the advanced drupal_static() pattern, since this is called very often.
  static $drupal_static_fast;
  if (!isset($drupal_static_fast)) {
    $drupal_static_fast['perm'] = &drupal_static(__FUNCTION__);
  }
  $perm = &$drupal_static_fast['perm'];
  if (!isset($perm[$account->uid])) {
    $role_permissions = user_role_permissions($account->roles);

    $perms = array();
    foreach ($role_permissions as $one_role) {
      $perms += $one_role;
    }
    $perm[$account->uid] = $perms;
  }

  return isset($perm[$account->uid][$string]);
}

/**
 * Custom Function.
 * 
 * Checks if the user has access to use the client menu.
 */
function client_menu_check_access() {

  // Check if user has access to the client menu using our custom function.
  if (client_menu_user_access('access client_menu')) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Implements menu_tree_output().
 */
function client_menu_menu_tree_output($tree) {
  $build = array();
  $items = array();

  // Pull out just the menu links we are going to render so that we
  // get an accurate count for the first/last classes.
  foreach ($tree as $data) {
    if ($data['link']['access'] && !$data['link']['hidden']) {
      $items[] = $data;
    }
  }

  $router_item = menu_get_item();
  $num_items = count($items);
  foreach ($items as $i => $data) {
    $class = array();

    if ($i == 0) {
      $class[] = 'first';
    }
    if ($i == $num_items -1) {
      $class[] = 'last';
    }

    // Set a class if the link is in the active trail.
    if ($data['link']['in_active_trail']) {
      $class[] = 'active-trail';
      $data['link']['localized_options']['attributes']['class'][] = 'active-trail';
    }
    // Normally, l() compares the href of every link with $_GET['q'] and sets
    // the active class accordingly. But local tasks do not appear in menu
    // trees, so if the current path is a local task, and this link is its
    // tab root, then we have to set the class manually.
    if ($data['link']['href'] == $router_item['tab_root_href'] && $data['link']['href'] != $_GET['q']) {
      $data['link']['localized_options']['attributes']['class'][] = 'active';
    }

    // Add linkpath class for easy css or js targeting of menu items.
    $class[] = strtr($data['link']['link_path'], '/', '-');

    // Allow menu-specific theme overrides.
    $element['#theme'] = 'menu_link__' . strtr($data['link']['menu_name'], '-', '_');
    $element['#attributes']['class'] = $class;
	  $element['#attributes']['id'] = 'mlid-' .$data['link']['mlid'];
    $element['#title'] = $data['link']['title'];
    $element['#href'] = $data['link']['href'];
    $element['#localized_options'] = !empty($data['link']['localized_options']) ? $data['link']['localized_options'] : array();
    $element['#below'] = $data['below'] ? client_menu_menu_tree_output($data['below']) : $data['below'];
    $element['#original_link'] = $data['link'];
    // Index using the link's unique mlid.
    $build[$data['link']['mlid']] = $element;
  }
  if ($build) {
    // Make sure drupal_render() does not re-order the links.
    $build['#sorted'] = TRUE;
    // Add the theme wrapper for outer markup.
    // Allow menu-specific theme overrides.
    $build['#theme_wrappers'][] = 'menu_tree__' . strtr($data['link']['menu_name'], '-', '_');
  }

  return $build;
}

/**
 * Implements template_preprocess_page().
 */
function client_menu_page_alter() {

  // Check accsess.	
  if (!client_menu_check_access()) {
    return;
  }

	//Define moule path.
	$module_path = drupal_get_path('module', 'client_menu');

	// Add the css.
	drupal_add_css($module_path . '/css/client_menu.css', array('group' => CSS_DEFAULT, 'every_page' => TRUE));

  // Include the jQuery mmenu required files.
  if (variable_get('client_menu_mobile', TRUE)) {
    drupal_add_css($module_path . '/js/mmenu/jquery.mmenu.css', array('group' => CSS_DEFAULT, 'every_page' => TRUE));
    // Check how the jQuery is loaded.
    if (variable_get('client_menu_jquery_no_conflict', TRUE)) {
      // Load the custom jQuery to avoid conflicts.
      drupal_add_js($module_path . '/js/jquery-no-conflict.min.js', 'file');
      // Then load the plugin using the no-conclict method.
      drupal_add_js($module_path . '/js/mmenu/jquery.mmenu.min-no-conflict.js', 'file');
      drupal_add_js($module_path . '/js/mmenu/load-jquery.mmenu-no-conflict.js', 'file');
    }
    // Else just load the plugin.
    else {
      drupal_add_js($module_path . '/js/mmenu/jquery.mmenu.min.js', 'file');
      drupal_add_js($module_path . '/js/mmenu/load-jquery.mmenu.js', 'file');
    }
  }
  // Include Tiny-Nav if mmenu plugin is not enabled.
  else {
    drupal_add_js($module_path . '/js/TinyNav/tinynav.js', 'file');
    drupal_add_js($module_path . '/js/TinyNav/load-tinynav.js', 'file');
  }

	// Add default theme.
	drupal_add_css($module_path . '/css/themes/default-theme-adminimal/default-theme-adminimal.css', array('group' => CSS_DEFAULT, 'every_page' => TRUE));

	// Add the "Client Menu" Java Script file.
	drupal_add_js($module_path . '/js/client_menu.js', 'file');
  
  // Fix the viewport and zooming in mobile devices.
  $viewport = array(
   '#tag' => 'meta',
   '#attributes' => array(
     'name' => 'viewport',
     'content' => 'width=device-width, maximum-scale=1, minimum-scale=1, user-scalable=no, initial-scale=1',
   ),
  );
  drupal_add_html_head($viewport, 'viewport');

}

/**
 * Implements hook_page_build().
 *
 * Render the Client menu into the "page_top" region.
 */
function client_menu_page_build(&$page) {

  // Check accsess.	
  if (!client_menu_check_access()) {
    return;
  }

  // Get the client menu name.
  $menu_name = variable_get('client_menu', 'management');

  // Prepere the HTML output of the menu.
  $menu_output =  client_menu_menu_tree_output(menu_tree_all_data($menu_name));

  // Get the home url.
  global $base_url;

  // Ignore the first level for the managment menu.
  if ($menu_name == 'management') {
  	$menu_output = drupal_render($menu_output[1]['#below']);
  }
  else {
    $menu_output = drupal_render($menu_output);
  }

  // Add Menu classes for css and java script selection.
  $menu_class = 'client-menu';

  // Add sticky class.
  if (variable_get('client_menu_sticky', TRUE)) {
    $menu_class .= ' sticky';
  }

  // Add mobile class.
  if (variable_get('client_menu_mobile', TRUE)) {
    $menu_class .= ' mobile';
  }
  else {
    $menu_class .= ' responsive';
  }

  // Render the client menu wrapper in the page_top region.
  $page['page_top']['client_menu'] = array(
      '#prefix' => '<div id="client_menu_wrapper" class="'. $menu_class .'">', 
      '#weight' => -998,
      '#suffix' => '</div><div class="client_menu_clearfix '. $menu_class .'"></div>',
  );

  // Display the Home icon link if enabled in settings page.
  if (variable_get('client_menu_home_icon', TRUE)) {
	  $page['page_top']['client_menu']['home_icon'] = array(
	      '#markup' => '<a href="'. $base_url .'" class="home-icon"></a>', 
	      '#weight' => -1,
	  );
	}

  // Render the actual menu.
  $page['page_top']['client_menu']['menu'] = array(
    '#prefix' => '<nav id="client-menu">',
    '#markup' => $menu_output,
    '#suffix' => '</nav>',
    '#weight' => 0,
  );

  // Render the mobile menu if enabled in settings page.
  if (variable_get('client_menu_mobile', TRUE)) {
  $page['page_top']['client_menu']['mobile_menu'] = array(
    '#prefix' => '<nav id="mobile-menu">',
    '#markup' => $menu_output,
    '#suffix' => '</nav><a href="#mobile-menu" id="mobile-menu-toggle"><span class="label">'. t('Menu') .'</span></a>',
    '#weight' => -999,
  );
  }

  // Display the logout link if enabled in settings page.
  if (variable_get('client_menu_logout', TRUE)) {
	  $page['page_top']['client_menu']['client_menu_logout'] = array(
	      '#markup' => '<a href="'. $base_url .'/user/logout" id="logout"><span class="label">'. t('Logout') .'</span></a>', 
	      '#weight' => 999,
	  );
	}

}
