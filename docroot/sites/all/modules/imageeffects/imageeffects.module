<?php

/**
 * Implements hook_image_effect_info().
 */
function imageeffects_image_effect_info() {
  $effects = array();
  $effects['imageeffects_pixelate'] = array(
    'label' => t('Pixelate'),
    'help' => t('Applies pixelate effect to the image.'),
    'form callback' => 'imageeffects_pixelate_form',
    'summary theme' => 'imageeffects_pixelate_summary',
    'effect callback' => 'imageeffects_pixelate_effect',
  );
  $effects['imageeffects_flip'] = array(
    'label' => t('Flip(mirror)'),
    'help' => t('Applies Flip(mirror) effect to the image.'),
    'form callback' => 'imageeffects_flip_form',
    'summary theme' => 'imageeffects_flip_summary',
    'effect callback' => 'imageeffects_flip_effect',
  );
  return $effects;
}

/**
 * Implements hook_theme().
 */
function imageeffects_theme() {
  return array(
    'imageeffects_pixelate_summary' => array(
      'variables' => array('data' => NULL),
    ),
    'imageeffects_flip_summary' => array(
      'variables' => array('data' => NULL),
    ),
  );
}

/**
 * Form structure for the image resize form.
 *
 * Note that this is not a complete form, it only contains the portion of the
 * form for configuring the resize options. Therefore it does not not need to
 * include metadata about the effect, nor a submit button.
 *
 * @param $data
 *   The current configuration for this resize effect.
 */
function imageeffects_pixelate_form($data) {
  $form['pixel'] = array(
    '#type' => 'textfield',
    '#title' => t('Block size in pixels'),
    '#default_value' => isset($data['pixel']) ? $data['pixel'] : '1',
    '#description' => t('Enter a block size in pixels.'),
    '#field_suffix' => ' ' . t('pixels'),
    '#required' => TRUE,
    '#size' => 10,
    '#element_validate' => array('imageeffects_pixelate_validate'),
    '#allow_negative' => FALSE,
  );
  return $form;
}

/**
 * Element validate handler to ensure that either a height or a width is
 * specified.
 */
function imageeffects_pixelate_validate($element, &$form_state) {
  if ($element['#value'] < 1) {
    form_error($element, t('Block size can not be less than 1 pixel.'));
  }
}

function imageeffects_pixelate_effect(&$image, $data) {
  if (!imagefilter($image->resource, IMG_FILTER_PIXELATE, $data['pixel'], true)) {
	watchdog('imageeffects', 'imageeffects pixelate failed. image: %image.', array('%image' => $image->source), WATCHDOG_ERROR);
    return FALSE;
  }
  return TRUE;
}

/**
 * Returns HTML for a summary of an image rotate effect.
 *
 * @param $variables
 *   An associative array containing:
 *   - data: The current configuration for this rotate effect.
 *
 * @ingroup themeable
 */
function theme_imageeffects_pixelate_summary($variables) {
  $data = $variables['data'];
  return t($data['pixel']);
}


/**
 * Form structure for the image resize form.
 *
 * Note that this is not a complete form, it only contains the portion of the
 * form for configuring the resize options. Therefore it does not not need to
 * include metadata about the effect, nor a submit button.
 *
 * @param $data
 *   The current configuration for this resize effect.
 */
function imageeffects_flip_form($data) {
  $form['flip'] = array(
    '#title' => t('Flip type'),
    '#type' => 'select',
    '#options' => array('0' => ' - Select - ', 'Horizontal' => 'Horizontal', 'Vertical' => 'Vertical', 'Both' => 'Both'),
    '#default_value' => isset($data['flip']) ? $data['flip'] : '0',
    '#description' => t('Select Flip (mirror) type.'),
    '#required' => TRUE,
    '#element_validate' => array('imageeffects_flip_validate'),
  );
  return $form;
}

/**
 * Element validate handler to ensure that either a height or a width is
 * specified.
 */
function imageeffects_flip_validate($element, &$form_state) {
  if ('0' == $element['#value']) {
    form_error($element, t('Flip type field is required.'));
  }
}

function imageeffects_flip_effect(&$image, $data) {
  $width = $image->info['width'];
  $height = $image->info['height'];
  $src_x = 0;
  $src_y = 0;
  $src_width = $width;
  $src_height = $height;
  
  switch($data['flip']) {
    case 'Horizontal':
     $src_x = $width -1;
       $src_width = -$width;
    break;
  
  case 'Vertical':
      $src_y = $height -1;
      $src_height = -$height;
    break;
  
  case 'Both':
      $src_x = $width -1;
      $src_y = $height -1;
      $src_width = -$width;
      $src_height = -$height;
    break;
  }
  
  $imgdest = imagecreatetruecolor ($width, $height);

  imagecolortransparent($imgdest, imagecolorallocate($image->resource, 0, 0, 0));
  imagealphablending($imgdest, false);
  imagesavealpha($imgdest, true);

  if(imagecopyresampled($imgdest, $image->resource, 0, 0, $src_x, $src_y , $width, $height, $src_width, $src_height)){
    $image->resource = $imgdest;
  } else {
    watchdog('imageeffects', 'imageeffects flip failed. image: %image.', array('%image' => $image->source), WATCHDOG_ERROR);
    return FALSE;
  }
  return TRUE;
}

/**
 * Returns HTML for a summary of an image rotate effect.
 *
 * @param $variables
 *   An associative array containing:
 *   - data: The current configuration for this rotate effect.
 *
 * @ingroup themeable
 */
function theme_imageeffects_flip_summary($variables) {
  return t($variables['data']['flip']);
}
