<?php
/**
 * @file
 * Primary module file.
 */

/**
 * Implements hook_menu().
 */
function yahoo_weather_search_widget_menu() {
  $items = array();

  // Admin page to be able to change the Consumer Key.
  $items['admin/config/media/yahoo-weather-widget'] = array(
    'title' => 'Yahoo Weather Widget Settings',
    'description' => 'Yahoo Weather App Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('yahoo_weather_search_widget_admin_form'),
    'access arguments' => array('Administer Yahoo App ID'),
  );

  // Ajax path to re-render the original form.
  $items['yahoo-weather-search-widget-link-callback'] = array(
    'page callback' => 'yahoo_weather_search_widget_link_response',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function yahoo_weather_search_widget_permission() {
  $perms = array();

  $perms['Administer Yahoo App ID'] = array(
    'title' => 'Administer Yahoo App ID',
    'description' => 'Allow the user to change the Consumer key to get the WOEID',
  );

  return $perms;
}

/**
 * Implements hook_theme().
 */
function yahoo_weather_search_widget_theme($existing, $type, $theme, $path) {
  return array(
    'yahoo_weather_search_widget_template' => array(
      'template' => 'yahoo_weather_search_widget.result',
      'path' => $path . '/templates',
      'type' => 'theme',
      'variables' => array(
        'link' => NULL,
        'location' => NULL,
        'items' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function yahoo_weather_search_widget_block_info() {
  $blocks = array();

  $blocks['yahoo_weather'] = array(
    'info' => t('Yahoo weather search'),
  );

  return $blocks;
}

/**
 * Implements hook_user_logout().
 */
function yahoo_weather_search_widget_user_logout($account) {
  yahoo_weather_search_widget_delete_user_place($account->uid);
}

/**
 * Implements hook_block_view().
 */
function yahoo_weather_search_widget_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    // The Block where the user can consult the weather of one place.
    case 'yahoo_weather':
      $block['subject'] = t('Weather');
      // This is to toggle the place temp.
      drupal_add_js(drupal_get_path('module', 'yahoo_weather_search_widget') . '/js/yahoo_weather_search_widget.js', 'file');
      drupal_add_css(drupal_get_path('module', 'yahoo_weather_search_widget') . '/css/weather-icons.min.css', 'file');

      // Render the form to to consult the weather of one place.
      $woeid = yahoo_weather_search_widget_get_user_place();
      if ($woeid > 0) {
        $content = yahoo_weather_search_widget_render($woeid);
      }
      else {
        $form = drupal_get_form('yahoo_weather_search_widget_block_form');
        $content = drupal_render($form);
      }

      $block['content'] = $content;
      break;

  }

  return $block;
}

/**
 * Implements hook_form().
 *
 * Form that allow to that the Consumer key.
 *
 * @see https://developer.yahoo.com/geo/geoplanet/
 */
function yahoo_weather_search_widget_admin_form() {
  $form['yahoo_weather_search_widget_consumer_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Consumer Key'),
    '#default_value' => variable_get('yahoo_weather_search_widget_consumer_key'),
    '#description' => t('You can generate your own consumer key at !link.',
      array(
        '!link' => l(t('here'), 'https://developer.yahoo.com/wsregapp/'),
      )),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function yahoo_weather_search_widget_preprocess_block(&$variables) {
  if ($variables['block']->module == 'yahoo_weather') {
    $variables['attributes_array']['class'][] = 'yahoo-weather';
  }
}

/**
 * Implements hook_form().
 *
 * Weather search input.
 */
function yahoo_weather_search_widget_block_form() {
  $form = array();

  // Wrap the form to replace with the ajax callback.
  $form['yahoo_weather_search_widget_prefix'] = array(
    '#markup' => '<div id="yahoo-weather-form">',
  );
  $form['place'] = array(
    '#type' => 'textfield',
    '#title' => '',
    '#default_value' => '',
    '#attributes' => array(
      'placeholder' => t('Enter city or zip code'),
    ),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#attributes' => array(
      'class' => array('button'),
    ),
    '#prefix' => '<div class="weather-buttons">',
    '#suffix' => '</div>',
    '#ajax' => array(
      'callback' => 'yahoo_weather_search_widget_ajax_submit',
      'wrapper' => 'yahoo-weather-form',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );
  $form['yahoo_weather_search_widget_suffix'] = array(
    '#markup' => '</div>',
  );

  return $form;
}

/**
 * Implements hook_form().
 *
 * Link that return to the weather search input.
 */
function yahoo_weather_search_widget_link() {
  $build['ajax_link'] = array(
    '#type' => 'link',
    '#title' => t('Return'),
    // Note the /nojs portion of the href - if javascript is enabled,
    // this part will be stripped from the path before it is called.
    '#href' => 'yahoo-weather-search-widget-link-callback/nojs/',
    '#ajax' => array(
      'wrapper' => 'yahoo_weather_search_widget',
      'method' => 'html',
    ),
  );
  return $build;
}

/**
 * Callback for link weather block.
 *
 * @param string $type
 *   Either 'ajax' or 'nojs. Type is simply the normal URL argument to this URL.
 *
 * @return string|array
 *   If $type == 'ajax', returns an array of AJAX Commands.
 *   Otherwise, just returns the content, which will end up being a page.
 */
function yahoo_weather_search_widget_link_response($type = 'ajax') {
  $form = drupal_get_form('yahoo_weather_search_widget_block_form');

  if ($type == 'ajax') {
    // Get the original Weather Form.
    $output = drupal_render($form);
    $commands = array();
    // Add the ajax command to replace the submited form.
    $commands[] = ajax_command_replace('#yahoo-weather-form', $output);
    $page = array('#type' => 'ajax', '#commands' => $commands);
    ajax_deliver($page);
  }
  else {
    $output = drupal_render($form);
    return $output;
  }
}

/**
 * The function that respond to the weather block request.
 *
 * @see yahoo_weather_search_widget_block_form()
 *
 * @return string
 *   The html that is going to replace.
 */
function yahoo_weather_search_widget_ajax_submit($form, &$form_state) {

  // First check if the user type something on the input.
  if (!empty($form_state['values']['place'])) {
    $place = $form_state['values']['place'];

    // Based on the place get the weather info of that place using Yahoo
    // Weather.
    $weather = yahoo_weather_search_widget_get_weather($place);

    // Validate if yahoo could find the weather's place.
    if (is_null($weather)) {
      drupal_set_message(t('Could not find the place %place', array(
        '%place' => $place,
      )), 'error');
      return $form;
    }
    $link_form = drupal_get_form('yahoo_weather_search_widget_link');

    $link = drupal_render($link_form);
    // Return the html that's is going to show on the block.
    $html = theme('yahoo_weather_search_widget_template',
      array(
        'link' => $link,
        'location' => $weather->channel->xpath('yweather:location'),
        'items' => $weather->channel->item,
      ));
    return $html;
  }
  else {
    drupal_set_message(t('Please fill the input to search the weather.'), 'error');
    return $form;
  }

}

/**
 * Consult the weather of one place using Yahoo services.
 *
 * @param string $place
 *   The place name to request.
 *
 * @return SimpleXMLElement
 *   The Yahoo Weather services respond
 *
 * @see https://developer.yahoo.com/weather/
 * @see http://php.net/manual/en/class.simplexmlelement.php
 */
function yahoo_weather_search_widget_get_weather($place = '', $woeid = 0) {

  // To get the weather of one place Yahoo needs the WOEID.
  if ($woeid == 0) {
    $woeid = yahoo_weather_search_widget_place_woeid($place);
  }

  if (is_null($woeid)) {
    return NULL;
  }
  // Gets the XML file content.
  $result = yahoo_weather_search_widget_get_contents_curl('http://weather.yahooapis.com/forecastrss?w=' . $woeid . '&u=f');

  // Parse the xml with SimpleXMLElement class.
  $xml = simplexml_load_string($result);

  // Creates a prefix context for the next XPath query.
  $xml->registerXPathNamespace('yweather', 'http://xml.weather.yahoo.com/ns/rss/1.0');

  return $xml;
}

/**
 * Get the WOEID of one place using Yahoo services.
 *
 * @param string $place
 *   The place name to request.
 *
 * @return int
 *   The WOEID or null in case the request fail
 *
 * @see https://developer.yahoo.com/geo/geoplanet/
 */
function yahoo_weather_search_widget_place_woeid($place) {

  // Gets the info of one place.
  $info = yahoo_weather_search_widget_place_info($place);

  // Return null if it gets an error.
  if (isset($info->error)) {
    drupal_set_message($info->error->detail, 'error');
    return NULL;
  }

  $places = $info->places;
  // It'll return null if yahoo didn't find the type it place.
  $woeid = NULL;

  // Check if the place exist.
  if ($places->total > 0) {
    $woeid = (int) $places->place[0]->woeid;

    // Check if the user is loggin to store the woeid.
    if (user_is_logged_in()) {
      yahoo_weather_search_widget_set_user_place($woeid, $place);
    }
  }

  return $woeid;
}

/**
 * Returns the info of one place. including the WOEID.
 *
 * Note that this request doesn't contain the weather info of one place.
 *
 * @param string $place
 *   The place name to request.
 *
 * @return object
 *   json respond decoded as a object.
 *
 * @see https://developer.yahoo.com/geo/geoplanet/guide/api_docs.html#api_overview
 */
function yahoo_weather_search_widget_place_info($place) {

  // Replace the empty space because the request return error.
  $place = str_replace(' ', '%20', $place);

  // Get the consumer key.
  $key = variable_get('yahoo_weather_search_widget_consumer_key', '');

  if ($key == '') {
    drupal_set_message(t('Please set first the consumer key'), 'error');
  }

  // Request the place information.
  $url = "http://where.yahooapis.com/v1/places.q('" . $place . "')?format=json&appid=" . $key;

  // Get the json content.
  $content = yahoo_weather_search_widget_get_contents_curl(yahoo_weather_search_widget_sanitize_string($url));

  // Decode the json into stdClass object.
  return json_decode($content);
}

/**
 * Convert Celsius(C) to Fahrenheit(F).
 *
 * @param int $c
 *   Celsius value.
 *
 * @return int
 *   Celsius rounded value converted to fahrenheit.
 */
function yahoo_weather_search_widget_celsius_to_fahrenheit($c) {
  return round(($c * (9 / 5)) + 32);
}

/**
 * Convert Fahrenheit(F) to Celsius(C).
 *
 * @param int $f
 *   Fahrenheit value.
 *
 * @return int
 *   Fahrenheit rounded value converted to celsius.
 */
function yahoo_weather_search_widget_fahrenheit_to_celsius($f) {
  return round(($f - 32) * (5 / 9));
}

/**
 * Get the string of one url using curl instead of file_get_contents().
 *
 * Warning: file_get_contents(): https:// wrapper is disabled in the server
 * configuration by allow_url_fopen=0
 *
 * @param string $url
 *   The final URL to do the request.
 *
 * @return string
 *   The json request.
 */
function yahoo_weather_search_widget_get_contents_curl($url) {
  $curl_handle = curl_init();
  curl_setopt($curl_handle, CURLOPT_HTTPHEADER, array('Content-Type: application/x-www-form-urlencoded; charset=UTF-8'));
  curl_setopt($curl_handle, CURLOPT_URL, $url);
  curl_setopt($curl_handle, CURLOPT_CONNECTTIMEOUT, 2);
  curl_setopt($curl_handle, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($curl_handle, CURLOPT_USERAGENT, 'Yahoo Weather Widget Search');
  $query = curl_exec($curl_handle);
  curl_close($curl_handle);

  return $query;
}

/**
 * Sanitize an string.
 *
 * This is needed in case the curl library doesn't support special charts
 *
 * @param string $string
 *   String of the text that needs to be sanitize.
 *
 * @return string
 *   Return the sanitized
 */
function yahoo_weather_search_widget_sanitize_string($string) {
  $string = trim($string);

  $string = str_replace(
    array('á', 'à', 'ä', 'â', 'ª', 'Á', 'À', 'Â', 'Ä'),
    array('a', 'a', 'a', 'a', 'a', 'A', 'A', 'A', 'A'), $string);

  $string = str_replace(
    array('é', 'è', 'ë', 'ê', 'É', 'È', 'Ê', 'Ë'),
    array('e', 'e', 'e', 'e', 'E', 'E', 'E', 'E'), $string);

  $string = str_replace(
    array('í', 'ì', 'ï', 'î', 'Í', 'Ì', 'Ï', 'Î'),
    array('i', 'i', 'i', 'i', 'I', 'I', 'I', 'I'), $string);

  $string = str_replace(
    array('ó', 'ò', 'ö', 'ô', 'Ó', 'Ò', 'Ö', 'Ô'),
    array('o', 'o', 'o', 'o', 'O', 'O', 'O', 'O'), $string);

  $string = str_replace(
    array('ú', 'ù', 'ü', 'û', 'Ú', 'Ù', 'Û', 'Ü'),
    array('u', 'u', 'u', 'u', 'U', 'U', 'U', 'U'), $string);

  $string = str_replace(
    array('ñ', 'Ñ', 'ç', 'Ç'),
    array('n', 'N', 'c', 'C'),
    $string);

  return $string;
}

/**
 * Save the current user place woeid data.
 *
 * @param int $woeid
 *   Who On Earth ID.
 * @param string $place
 *   The place name or zip code.
 *
 * @return int
 *   Whatever if the insert / update was successful.
 */
function yahoo_weather_search_widget_set_user_place($woeid, $place) {
  global $user;

  $query = db_merge('yahoo_weather_search_widget_woeid')
    ->key(array('uid' => $user->uid))
    ->fields(array(
      'woeid' => $woeid,
      'place' => $place,
      'timestamp' => time(),
    ))
    ->execute();

  return $query;
}

/**
 * Return the stored place from previous search.
 *
 * @return int
 *   The who on earth id stored.
 */
function yahoo_weather_search_widget_get_user_place() {
  global $user;

  // Create an object of type SelectQuery.
  $query = db_select('yahoo_weather_search_widget_woeid', 'y');

  // Add extra detail to this query object: a condition, fields and a range.
  $query
    ->condition('y.uid', $user->uid, '=')
    ->fields('y', array('woeid'));

  $result = $query->execute();

  $place = $result->fetchAssoc();

  if ($place['woeid'] > 0) {
    return $place['woeid'];
  }
  else {
    return 0;
  }
}

/**
 * Delete the user place weather from database.
 *
 * @param int $uid
 *   The user id for delete info.
 */
function yahoo_weather_search_widget_delete_user_place($uid) {
  db_delete('yahoo_weather_search_widget_woeid')
    ->condition('uid', $uid)
    ->execute();
}

/**
 * Render the yahoo weather widget.
 *
 * @param int $woeid
 *   Who on earth ID.
 *
 * @return string
 *   The html to be displayed.
 */
function yahoo_weather_search_widget_render($woeid) {
  $weather = yahoo_weather_search_widget_get_weather('', $woeid);
  $link_form = drupal_get_form('yahoo_weather_search_widget_link');

  $link = drupal_render($link_form);
  // Return the html that's is going to show on the block.
  $html = theme('yahoo_weather_search_widget_template',
    array(
      'link' => $link,
      'location' => $weather->channel->xpath('yweather:location'),
      'items' => $weather->channel->item,
    ));
  return $html;
}

/**
 * Get the weather icon.
 *
 * @param int $condid
 *   The ID code of the weather condition.
 *
 * @return string
 *   Return the final html.
 */
function yahoo_weather_search_widget_weather_icon($condid) {

  switch ($condid) {
    case '0': $icon = '<i class="wi wi-tornado"></i>';
      break;

    case '1': $icon = '<i class="wi wi-storm-showers"></i>';
      break;

    case '2': $icon = '<i class="wi wi-tornado"></i>';
      break;

    case '3': $icon = '<i class="wi wi-thunderstorm"></i>';
      break;

    case '4': $icon = '<i class="wi wi-thunderstorm"></i>';
      break;

    case '5': $icon = '<i class="wi wi-snow"></i>';
      break;

    case '6': $icon = '<i class="wi wi-rain-mix"></i>';
      break;

    case '7': $icon = '<i class="wi wi-rain-mix"></i>';
      break;

    case '8': $icon = '<i class="wi wi-sprinkle"></i>';
      break;

    case '9': $icon = '<i class="wi wi-sprinkle"></i>';
      break;

    case '10': $icon = '<i class="wi wi-hail"></i>';
      break;

    case '11': $icon = '<i class="wi wi-showers"></i>';
      break;

    case '12': $icon = '<i class="wi wi-showers"></i>';
      break;

    case '13': $icon = '<i class="wi wi-snow"></i>';
      break;

    case '14': $icon = '<i class="wi wi-storm-showers"></i>';
      break;

    case '15': $icon = '<i class="wi wi-snow"></i>';
      break;

    case '16': $icon = '<i class="wi wi-snow"></i>';
      break;

    case '17': $icon = '<i class="wi wi-hail"></i>';
      break;

    case '18': $icon = '<i class="wi wi-hail"></i>';
      break;

    case '19': $icon = '<i class="wi wi-cloudy-gusts"></i>';
      break;

    case '20': $icon = '<i class="wi wi-fog"></i>';
      break;

    case '21': $icon = '<i class="wi wi-fog"></i>';
      break;

    case '22': $icon = '<i class="wi wi-fog"></i>';
      break;

    case '23': $icon = '<i class="wi wi-cloudy-gusts"></i>';
      break;

    case '24': $icon = '<i class="wi wi-cloudy-windy"></i>';
      break;

    case '25': $icon = '<i class="wi wi-thermometer"></i>';
      break;

    case '26': $icon = '<i class="wi wi-cloudy"></i>';
      break;

    case '27': $icon = '<i class="wi wi-night-cloudy"></i>';
      break;

    case '28': $icon = '<i class="wi wi-day-cloudy"></i>';
      break;

    case '29': $icon = '<i class="wi wi-night-cloudy"></i>';
      break;

    case '30': $icon = '<i class="wi wi-day-cloudy"></i>';
      break;

    case '31': $icon = '<i class="wi wi-night-clear"></i>';
      break;

    case '32': $icon = '<i class="wi wi-day-sunny"></i>';
      break;

    case '33': $icon = '<i class="wi wi-night-clear"></i>';
      break;

    case '34': $icon = '<i class="wi wi-day-sunny-overcast"></i>';
      break;

    case '35': $icon = '<i class="wi wi-hail"></i>';
      break;

    case '36': $icon = '<i class="wi wi-day-sunny"></i>';
      break;

    case '37': $icon = '<i class="wi wi-thunderstorm"></i>';
      break;

    case '38': $icon = '<i class="wi wi-thunderstorm"></i>';
      break;

    case '39': $icon = '<i class="wi wi-thunderstorm"></i>';
      break;

    case '40': $icon = '<i class="wi wi-storm-showers"></i>';
      break;

    case '41': $icon = '<i class="wi wi-snow"></i>';
      break;

    case '42': $icon = '<i class="wi wi-snow"></i>';
      break;

    case '43': $icon = '<i class="wi wi-snow"></i>';
      break;

    case '44': $icon = '<i class="wi wi-cloudy"></i>';
      break;

    case '45': $icon = '<i class="wi wi-lightning"></i>';
      break;

    case '46': $icon = '<i class="wi wi-snow"></i>';
      break;

    case '47': $icon = '<i class="wi wi-thunderstorm"></i>';
      break;

    case '3200': $icon = '<i class="wi wi-cloud"></i>';
      break;

    default: $icon = '<i class="wi wi-cloud"></i>';
  }

  return $icon;

}
