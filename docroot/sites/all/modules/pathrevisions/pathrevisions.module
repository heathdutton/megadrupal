<?php
/**
 * @file
 * Pathrevisions module.
 */

/**
 * Implements hook_node_insert().
 */
function pathrevisions_node_insert($node) {
  $path = _pathrevisions_path($node);
  pathrevisions_save($path, FALSE);
}

/**
 * Implements hook_node_update().
 */
function pathrevisions_node_update($node) {
  $path = _pathrevisions_path($node);
  pathrevisions_save($path, empty($node->revision));
}

/**
 * Implements hook_node_load().
 */
function pathrevisions_node_load($nodes, $types) {
  foreach ($nodes as $nid => $node) {
    $nodes[$nid]->path_revisions = pathrevisions_load($node->nid);
  }
}

/**
 * Implements hook_node_delete().
 */
function pathrevisions_node_delete($node) {
  $paths = pathrevisions_load($node->nid);
  db_delete('path_revisions')->condition('nid', $node->nid)->execute();
  module_invoke_all('pathrevisions_delete', $paths);
}

/**
 * Implements hook_node_revision_delete().
 */
function pathrevisions_node_revision_delete($node) {
  db_delete('path_revisions')->condition('vid', $node->vid)->execute();
}

/**
 * Load an array of path revisions from the database.
 *
 * @param $nid
 *   A node nid.
 * @param $vid
 *   An optional node vid.
 *
 * @return
 *   FALSE if no alias was found or an array of keyed arrays, each
 *   of which is an associative array containing the following keys:
 *   - nid: The node nid.
 *   - vid: The node vid.
 *   - alias: The URL alias.
 *   - timestamp: The time this path was updated.
 *   - language: The language of the alias.
 */
function pathrevisions_load($nid, $vid = 0) {
  $select = db_select('path_revisions')->fields('path_revisions')->condition('nid', (int)$nid, '=');
  if ($vid) {
    $select->condition('vid', (int)$vid, '=');
  }
  return $select->execute()->fetchAllAssoc('vid');
}

/**
 * Save a path revision to the database.
 *
 * @param $path
 *   An associative array containing the following keys:
 *   - nid: The node nid.
 *   - vid: The node revision vid.
 *   - alias: The URL alias.
 *   - timestamp: (optional) The time this path was updated.
 *   - language: (optional) The language of the alias.
 * @param $update
 *   A boolean indicating whether this is an update or not.
 */
function pathrevisions_save($path, $update = TRUE) {
  // Set the timestamp field. Always updated on save.
  $path['timestamp'] = REQUEST_TIME;

  $status = drupal_write_record('path_revisions', $path, ($update ? array('nid', 'vid') : array()));

  // Verify that a record was written.
  if ($status) {
    if ($status === SAVED_NEW) {
      module_invoke_all('pathrevisions_insert', $path);
    }
    else {
      module_invoke_all('pathrevisions_update', $path);
    }
  }
}

/**
 * Prepare a path revision for saving.
 *
 * @param $node
 *   A node object.
 *
 * @return
 *   An associative array containing the following keys:
 *   - nid: The node nid.
 *   - vid: The node revision vid.
 *   - alias: The URL alias.
 *   - timestamp: (optional) The time this path was updated.
 *   - language: (optional) The language of the alias.
 */
function _pathrevisions_path($node) {
  if (!empty($node->path)) {
    $path = (array) $node->path;
  }
  else {
    $path = array();
  }

  // If pathauto is enabled, look up the newly generated alias and
  // store that instead of the old one that's still in $node.
  if (module_exists('pathauto')) {
    if (!empty($path['pathauto'])) {
      // Yes, calling a private function is bad, but there is no
      // hook and the new pathauto alias isn't in the node yet :-/
      module_load_include('inc', 'pathauto', 'pathauto');
      $new = _pathauto_existing_alias_data($path['source'], $path['language']);
      $path['alias'] = $new['alias'];
    }
    unset($path['pathauto']);
  }

  unset($path['pid']);
  unset($path['source']);

  // When reverting a revision, if there is no $path['alias'], grab it
  // from the revision we're reverting to (or default to node/nid).
  if (!empty($node->revision) && !empty($node->original) && empty($path['alias'])) {
    $path['alias'] = !empty($node->path_revisions[$node->old_vid]) ? $node->path_revisions[$node->old_vid]->alias : '';
    $path['language'] = $node->original->language;
  }

  $path += array('nid' => $node->nid, 'vid' => $node->vid);

  return $path;
}

/**
 * Implements hook_views_api().
 */
function pathrevisions_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'pathrevisions') . '/views',
  );
}
