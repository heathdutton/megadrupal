<?php

/**
 * @file
 * Implements some aspects that helps your site to be compliant to the Spanish LOPD Law about personal data management.
 */

/**
 * OPERATIONS
 */
define('LOPD_OPERATION_LOGIN', 'login');
define('LOPD_OPERATION_LOGOUT', 'logout');
define('LOPD_OPERATION_LOGIN_FAILED', 'failed_login');

/**
 * Implements hook_permission().
 */
function lopd_permission() {
  return array(
    'config LOPD module' => array(
      'title' => t('Config Spain LOPD module'),
      'description' => t('Allows users to config Spain LOPD module.'),
    ),
    'access LOPD data' => array(
      'title' => t('Access LOPD data'),
      'description' => t('View report of registered events.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function lopd_menu() {
  $items['admin/config/system/lopd'] = array(
    'title' => 'Spain LOPD',
    'description' => 'Administer Spain LOPD module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lopd_admin_settings_form'),
    'access arguments' => array('config LOPD module'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Form for Spain LOPD module settings configuration.
 */
function lopd_admin_settings_form() {
  $form['lopd_messages_to_keep'] = array(
      '#type' => 'select',
      '#title' => t('Database log messages to keep'),
      '#description' => t('The maximum number of messages to keep in the database log.'),
      '#default_value' => variable_get('lopd_messages_to_keep', 0),
      '#options' => array(
        '0' => t('All'),
        '2' => t('@count Years old', array('@count' => 2)),
        '3' => t('@count Years old', array('@count' => 3)),
        '4' => t('@count Years old', array('@count' => 4)),
        '5' => t('@count Years old', array('@count' => 5)),
      ),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_user_login().
 */
function lopd_user_login(&$edit, $account) {
  lopd_register_operation($account, LOPD_OPERATION_LOGIN);
}

/**
 * Implements hook_user_logout().
 */
function lopd_user_logout($account) {
  lopd_register_operation($account, LOPD_OPERATION_LOGOUT);
}

/**
 * Login attemps failed.
 */
function lopd_form_alter(&$form, $form_state, $form_id) {
  switch ($form_id) {
    case 'user_login':
    case 'user_login_block':
      // Add validation for detect login attempts.
      $form['#validate'][] = 'lopd_login_validate';
      break;
  }
}

/**
 * Check validation for login attemps.
 */
function lopd_login_validate($form, &$form_state) {
  if (empty($form_state['uid'])) {
    $account = db_query("SELECT * FROM {users} WHERE name = :name", array(':name' => $form_state['values']['name']))->fetchObject();
    if ($account) {
      lopd_register_operation($account, LOPD_OPERATION_LOGIN_FAILED);
    }
    else {
      $account['uid'] = 0;
      $account['name'] = $form_state['values']['name'];
      lopd_register_operation((object) $account, LOPD_OPERATION_LOGIN_FAILED);
    }
  }
}

/**
 * Registers an operation.
 *
 * @param type $user An user object.
 * @param type $operation The operation being registered.
 */
function lopd_register_operation($user, $operation) {
  $data = array(
    'uid' => $user->uid,
    'authname' => $user->name,
    'ip' => ip_address(),
    'operation' => $operation,
    'timestamp' => time(),
  );
  drupal_write_record('lopd', $data);
}

/**
 * Implements hook_views_api().
 */
function lopd_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'lopd') . '/includes/views'
  );
}

/**
 * Implements hook_cron().
 *
 * Remove expired log messages.
 */
function lopd_cron() {
  // Cleanup the lopd table.
  $years = variable_get('lopd_messages_to_keep', 0);
  if ($years > 0 ) {
    db_delete('lopd')
      ->condition('timestamp', strtotime('-' . $years . 'years'), '<')
      ->execute();
  }
}
