<?php
/**
 * @file
 * Tests the functionality of the Spanish LOPD module.
 *
 */
class LopdTestCase extends DrupalWebTestCase {
  protected $privileged_user;
  protected $normal_user;

  public static function getInfo() {
    return array(
      'name' => 'Spanish LOPD module tests',
      'description' => 'Verify than the module provided operations are registered.',
      'group' => 'Lopd',
    );
  }

  public function setUp() {
    // Enable LOPD module.
    parent::setUp(array('lopd'));
    // Create users.
    $this->privileged_user = $this->drupalCreateUser(array('config LOPD module', 'access LOPD data'));
    $this->normal_user = $this->drupalCreateUser();
  }

  /*
   * The test check the correct function of LOPD operations. The checked operations
   * are the following:
   *  - Login.
   *  - Logout.
   *  - Failed login.
   */
  public function testOperations() {
    // Check failed_login operation:
    $edit = array(
      'name' => $this->randomName(),
      'pass' => $this->randomString(),
    );
    $this->drupalPost('user', $edit, 'Log in');
    $lopd_entry = $this->getLOPDEntries('', 1)->fetchObject();
    $this->checkOperation($lopd_entry, LOPD_OPERATION_LOGIN_FAILED);

    // Check login operation:
    $this->drupalLogin($this->normal_user);
    $lopd_entry = $this->getLOPDEntries('', 1)->fetchObject();
    $this->checkOperation($lopd_entry, LOPD_OPERATION_LOGIN);

    // Check logout operation:
    $this->drupalLogout($this->normal_user);
    $lopd_entry = $this->getLOPDEntries('', 1)->fetchObject();
    $this->checkOperation($lopd_entry, LOPD_OPERATION_LOGOUT);
  }

  public function testDeleteLopdEntriesWithCron() {
    // Check access to admin/config/system/lopd
    $this->drupalLogin($this->privileged_user);
    $this->drupalGet('admin/config/system/lopd');

    // Check exists lopd_messages_to_keep field and is set to 0 as default value.
    $this->assertFieldByName('lopd_messages_to_keep', 0, 'The lopd_messages_to_keep
      field is correctly set to 0 as default');

    // Check that lopd_messages_to_keep variable is set correctly:
    $allowed_values = array(2, 3, 4, 5);
    foreach ($allowed_values as $value) {
      $edit = array(
      'lopd_messages_to_keep' => $value,
      );
      $this->drupalPost('admin/config/system/lopd', $edit, t('Save configuration'));
      $lopd_settings = variable_get('lopd_messages_to_keep', 0);
      $this->assertEqual($lopd_settings, $value, 'The lopd_messages_to_keep variable is saved correctly');

      // Check the Cron process delete entries:
      $max_timestamp = strtotime("- $value years");
      $this->createRandomEntries(15);
      $this->cronRun();
      $entries = $this->getLOPDEntries()->fetchAll();
      foreach ($entries as $entry) {
        if ($entry->timestamp <= $max_timestamp) {
          $this->fail(format_string("Cron proccess didn't remove a entry less than @maxtime for @value value",
            array('@maxtime' => $max_timestamp, '@value' => $value)), 'Lopd');
        }
      }
    }
  }

  /**
   * Return de last entry adsded to LOPD table. If $operation is set, it will
   * filtered for this $operation.
   *
   * @param $operation
   *        Operation to filter.
   */
  private function getLOPDEntries($operation = '', $limit = 0) {
    $query = db_select('lopd', 'l')
      ->fields('l')
      ->orderBy('l.lopdid', 'DESC');
    if (!empty($operation)) {
      $query->codition('l.operation', $operation);
    }
    if (!empty($limit)) {
      $query->range(0, $limit);
    }

    return $query->execute();
  }

  /**
   * Check a $operation row in DB. This is used to check that a lopd entry is correct.
   * @param  Object $lopd_entry
   *         Obeject with data of a LOPD entry in DB.
   * @param  String $operation_type
   *         LOPD operation type.
   */
  private function checkOperation($lopd_entry, $operation_type) {
    // Check $operation_object is not null:
    $this->assertNotNull($lopd_entry,
      format_string('@operation: LOPD entry object returned from DB', array('@operation' => $operation_type)),
      'Lopd');

    // Check $operation_object timestamp field:
    $this->assertNotNull($lopd_entry->timestamp,
      format_string('@operation: timestamp collumn is set', array('@operation' => $operation_type)),
      'Lopd');

    // Check $operation_object uid field:
    $this->assertNotNull($lopd_entry->uid,
      format_string('@operation: uid collumn is set', array('@operation' => $operation_type)),
      'Lopd');

    // Check $operation_object authname field:
    $this->assertNotNull($lopd_entry->authname,
      format_string('@operation: authname collumn is set', array('@operation' => $operation_type)),
      'Lopd');

    //Check $operation_object ip field:
    $this->assertNotNull($lopd_entry->ip,
      format_string('@operation: Ip collumn is set', array('@operation' => $operation_type)),
      'Lopd');

     //Check $operation_object operation name field:
    $this->assertEqual($lopd_entry->operation, $operation_type,
      format_string('The @operation operation has been logged', array('@operation' => $operation_type)), 'Lopd');
  }

  /**
   * Create random LOPD entries into DB. This is used to simulate some test as
   * testDeleteLopdEntriesWithCron.
   * @param  $num_entries
   *         Number of entries set into DB.
   * @param  $max_timestamp
   *         Max timestamp set into BD for each LOPD entry.
   */
  private function createRandomEntries($num_entries) {
    for ($i = 0; $i < $num_entries; $i++) {
      $entry = array(
        'uid' => 1,
        'authname' => 'user',
        'ip' => ip_address(),
        'operation' => 'operation',
        'timestamp' => mt_rand(0, time()),
      );
      drupal_write_record('lopd', $entry);
    }
  }
}
