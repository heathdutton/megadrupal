<?php

/**
 * @file
 *   widget_factory_ctools_export_ui.inc
 *   Ctools Export UI definitions.
 */

/**
 * Define this Widget plugin.
 */
$plugin = array(
  'schema' => 'widget_factory_preset',  // As defined in hook_schema().
  'access' => 'administer widget factory',  // Define a permission users must have to access these pages.
  // Define the menu item.


  'menu' => array(
    'menu item' => 'widget_factory',
    'menu title' => 'Widget Factory',
    'menu description' => 'Administer Widget Factory presets.',
  ),


  // Define user interface texts.
  'title singular' => t('preset'),
  'title plural' => t('presets'),
  'title singular proper' => t('Widget Factory preset'),
  'title plural proper' => t('Widget Factory presets'),


  // Define the names of the functions that provide the add/edit forms.
  'form' => array(
    'settings' => 'widget_factory_ctools_widget_form',
    'validate' => 'widget_factory_ctools_widget_form_validate',
    // 'submit' and 'validate' are also valid callbacks.
  ),
);

function widget_factory_check_permission($permissions, $user = NULL) {
  if (empty($user)) {
    global $user;
  }
  foreach ($permissions as $perm) {
    if (user_access($perm, $user)) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Define the preset add/edit form.
 */
function widget_factory_ctools_widget_form(&$form, &$form_state) {
  $preset = $form_state['item'];
  $options = array();
  $widgets = module_invoke_all('widget_factory_widgets_info');
  foreach ($widgets as $key => $widget) {
    if (isset($widget['permission'])) {
      if (widget_factory_check_permission($widget['permission'])) {
        $options[$key] = $widget['info'];
      }
      elseif($preset->widget_type == $key){
        drupal_set_message(t('You do not have permission to edit this widget.'), 'warning');
        $form['#access'] = FALSE;
      }
    }
    else {
      $options[$key] = $widget['info'];
    }
  }
  $form['widget_type'] = array(
    '#type' => 'select',
    '#title' => t('Type'),
    '#options' => $options,
    '#default_value' => $preset->widget_type,
    '#required' => TRUE,
    '#ajax' => array(
      'callback' => 'widget_factory_widget_settings_ajax_callback',
      'wrapper' => 'widget-factory-ctools-settings-form',
    ),
  );

  $form['description'] = array(
    '#type' => 'textfield',
    '#title' => t('Description (Block Name)'),
    '#description' => t('A human readable name of a preset. This would also be the name of the block generated by widget.'),
    '#default_value' => $preset->description,
  );

  $widget_type = isset($form_state['values']['widget_type']) ? $form_state['values']['widget_type'] : NULL;
  if(empty($widget_type) AND !empty($preset->widget_type)) {
    $widget_type = $preset->widget_type;
  }
  $form['widget_settings'] = array(
    '#tree' => TRUE,
  );

  $form['#prefix'] = '<div id="widget-factory-ctools-settings-form">';
  $form['#suffix'] = '</div>';

  if ($widget_type) {
    if (isset($widgets[$widget_type]['settings_form_callback'])) {
      $function = $widgets[$widget_type]['settings_form_callback'];
      $form = call_user_func_array($function, array($form, $form_state, $widgets[$widget_type]));
    }
    if (isset($widgets[$widget_type]['defaults'])) {
      $form['widget_settings']['defaults'] = array(
        '#type' => 'value',
        '#value' => $widgets[$widget_type]['defaults'],
      );
    }
  }
}

function widget_factory_widget_settings_ajax_callback($form, $form_state) {
  return $form;
}

/**
 * Validate function for widget_factory_ctools_widget_form.
 */
function widget_factory_ctools_widget_form_validate($form, &$form_state) {
  $item = $form_state['item'];
  $name = $form_state['values']['name'];
  if ($name != $item->name) {
    $blocks = module_invoke_all('block_info');
    if (array_key_exists($name, $blocks)) {
      form_set_error('name', t('The machine-readable name is already in use. It must be unique.'));
    }
  }
}
