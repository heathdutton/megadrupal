<?php

/**
 * @file
 *   widget_easy_pie_chart.module
 *   Main module file for widget_easy_pie_chart module.
 */

/**
 * Implements hook_menu().
 */
function widget_easy_pie_chart_menu() {
  $items['widget_easy_pie_chart/demodata/default'] = array(
    'title' => 'Widget Notification Default JSON data',
    'page callback' => 'widget_easy_pie_chart_demodata_default_callback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}


function widget_easy_pie_chart_demodata_default_callback() {
  $var = widget_easy_pie_chart_demodata_default();
  drupal_json_output($var);
}

function widget_easy_pie_chart_demodata_default() {
  $var['one'] = date('s') * 100 / 60;
  return $var;
}

function widget_easy_pie_chart_demodata_callback() {
  $var['one'] = date('s') * 100 / 60;
  return $var;
}

/**
 * Implements hook_theme().
 */
function widget_easy_pie_chart_theme($existing, $type, $theme, $path) {
  return array(
    'widget_easy_pie_chart' => array(
      'template' => 'widget_easy_pie_chart',
      'variables' => array(
        'preset' => NULL,
        'account' => NULL,
        'min' => 0,
        'max' => 100,
        'data' => 0,
      ),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function widget_easy_pie_chart_preprocess_widget_easy_pie_chart(&$vars) {
  if (module_exists('token')) {
    $data = array(
      'node' => menu_get_object('node'),
      'user' => menu_get_object('user'),
    );
    $max = token_replace($vars['preset']->widget_settings['max'], $data);
    $value = token_replace($vars['preset']->widget_settings['data'], $data);
  }
  else {
    $max = $vars['preset']->widget_settings['max'];
    $value = $vars['preset']->widget_settings['data'];
  }

  $max = empty($max) ? 100 : $max;

  $vars['data'] = ($value / $max ) * 100 ;
  $vars['lineWidth'] = empty($vars['preset']->widget_settings['lineWidth']) ? '3' : $vars['preset']->widget_settings['lineWidth'];
  $vars['lineCap'] = empty($vars['preset']->widget_settings['lineCap']) ? 'butt' : $vars['preset']->widget_settings['lineCap'];
}

/**
 * Implements hook_widget_factory_widgets_info
 */
function widget_easy_pie_chart_widget_factory_widgets_info() {
  return array(
    'widget_easy_pie_chart' => array(
      'info' => 'Widget Rendro Easy Pie Chart',
      'settings_form_callback' => 'widget_easy_pie_chart_settings_form',
      'defaults' => array(
        'cache' => DRUPAL_NO_CACHE,
        'content_callback' => 'widget_easy_pie_chart_widget_content',
      ),
    ),
  );
}

function widget_easy_pie_chart_widget_content($preset) {
  // dpm($preset);
  global $user;
  $status = libraries_load('rendro-easy-pie-chart');
  $output = array(
    '#preset' => $preset,
    '#account' => $user,
    '#theme' => 'widget_easy_pie_chart',
  );
  return $output;
}

function widget_easy_pie_chart_settings_form($form, $form_state, $widget_info = array()) {
  $preset = $form_state['item'];
  $form['widget_settings']['app_name'] = array(
    '#type' => 'machine_name',
    '#default_value' => $preset->widget_settings['app_name'],
    '#machine_name' => array(
      'exists' => 'widget_easy_pie_chart_check_if_app_name_exists',
      'label' => t('Name to be used for app. Can contain only letters a-z and A-Z.'),
      'replace_pattern' => '[^a-zA-Z0-9]+',
      'replace' => '_',
      'source' => array('description'),
    ),
    '#description' => t('Name to be used for angular app (module name).'),
    '#title' => t('App name'),
    // '#disabled' => !empty($preset->widget_settings['app_name']),
  );

  $form['widget_settings']['lineWidth'] = array(
    '#type' => 'textfield',
    '#title' => t('Width'),
    '#default_value' => isset($preset->widget_settings['lineWidth']) ? $preset->widget_settings['lineWidth'] : NULL,
    '#description' => t("Width of the bar line in px."),
  );

  $options = array(
    'butt' => t('Butt'),
    'round' => t('Round'),
    'square' => t('Square'),
  );
  $form['widget_settings']['lineCap'] = array(
    '#type' => 'select',
    '#options' => $options,
    '#title' => t('lineCap'),
    '#default_value' => isset($preset->widget_settings['lineCap']) ? $preset->widget_settings['lineCap'] : NULL,
    '#description' => t('Defines how the ending of the bar line looks like.'),
  );

  $form['widget_settings']['max'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum'),
    '#default_value' => isset($preset->widget_settings['max']) ? $preset->widget_settings['max'] : NULL,
    '#description' => t("Enter the value that corresponds to maximum for the pie chart. Token support available if module is installed"),
  );
  $form['widget_settings']['data'] = array(
    '#type' => 'textfield',
    '#title' => t('Data'),
    '#default_value' => isset($preset->widget_settings['data']) ? $preset->widget_settings['data'] : NULL,
    '#description' => t("Enter the value to display in the pie chart. Token support available if module is installed"),
  );

  if (module_exists('token')) {
    $form['token_tree'] = array(
      '#markup' => '<p>' . t('Visit <a href="@drupal-token">Token List for node</a> to view the available token.', array('@drupal-token' => 'https://www.drupal.org/node/390482#token-node')) . '</p>',
    );
  }
  else {
    $form['token_tree'] = array(
      '#markup' => '<p>' . t('Enable the <a href="@drupal-token">Token module</a> to view the available token browser.', array('@drupal-token' => 'http://drupal.org/project/token')) . '</p>',
    );
  }
  $form['widget_settings']['cache'] = array(
    '#type' => 'value',
    '#value' => DRUPAL_NO_CACHE,
  );

  $form['widget_settings']['content_callback'] = array(
    '#type' => 'value',
    '#value' => $widget_info['defaults']['content_callback'],
  );

  return $form;
}

function widget_easy_pie_chart_check_if_app_name_exists($app_name) {
  $presets = ctools_export_load_object('widget_factory_preset');
  foreach ($presets as $preset) {
    if (isset($preset->widget_settings['app_name']) AND $preset->widget_settings['app_name'] == $app_name) {
      return TRUE;
    }
  }
  return FALSE;
}
/**
 * Implements hook_libraries_info().
 */
function widget_easy_pie_chart_libraries_info() {
  $libraries['rendro-easy-pie-chart'] = array(
    'name' => 'Angular Rendro Easy Pie Chart',
    'vendor url' => 'http://rendro.github.io/easy-pie-chart',
    'download url' => 'https://codeload.github.com/rendro/easy-pie-chart/legacy.zip/master',
    'version arguments' => array(
      'file' => 'dist/angular.easypiechart.js',
      'pattern' => '@version ([0-9\.a-z]+)@',
      'lines' => 7,
    ),
    'files' => array(
      'js' => array(
        'dist/angular.easypiechart.js',
      ),
    ),
    'variants' => array(
      'minified' => array(
        'files' => array(
          'js' => array(
            'dist/angular.easypiechart.min.js',
          ),
        ),
      ),
      'source' => array(
        'files' => array(
          'js' => array(
            'dist/angular.easypiechart.js',
          ),
        ),
      ),
    ),
    'dependencies' => array(
      'angular',
    ),
  );

  $libraries['angular'] = array(
    'name' => 'AngularJS',
    'vendor url' => 'angularjs.org',
    'download url' => 'http://code.angularjs.org/',
    'version arguments' => array(
      'file' => 'angular.js',
      'pattern' => '@license AngularJS v([0-9\.a-z]+)@',
      'lines' => 8,
    ),
    'files' => array(
      'js' => array(
        'angular.js',
      ),
    ),
    'variants' => array(
      'minified' => array(
        'files' => array(
          'js' => array(
            'angular.min.js',
          ),
        ),
      ),
      'source' => array(
        'files' => array(
          'js' => array(
            'angular.js',
          ),
        ),
      ),
    ),
  );

  return $libraries;
}
