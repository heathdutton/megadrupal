<?php

/**
 * @file
 *   widget_menu.module
 *   Main module file for widget_menu module.
 */

/**
 * Implements hook_theme().
 */
function widget_menu_theme($existing, $type, $theme, $path) {
  return array(
    'widget_menu_horizontal' => array(
      'template' => 'widget_menu_horizontal',
      'render element' => 'widget_menu',
    ),
    'widget_menu_item' => array(
      'template' => 'widget_menu_item',
      'variables' => array('item' => NULL, 'link' => NULL),
      'render element' => 'element',
    ),
    'widget_menu_item_with_children_wrapper' => array(
      'template' => 'widget_menu_item_with_children_wrapper',
      'render element' => 'widget_menu_children',
    ),
    'widget_menu_vertical' => array(
      'template' => 'widget_menu_vertical',
      'render element' => 'widget_menu',
    ),
    'widget_menu_entry_table' => array(
      'file' => 'widget_menu.theme.inc',
      'render element' => 'element',
    ),
  );
}

/**
 * Implements hook_widget_factory_widgets_info
 */
function widget_menu_widget_factory_widgets_info() {
  return array(
    'widget_menu' => array(
      'info' => 'Widget Menu',
      'settings_form_callback' => 'widget_menu_settings_form',
      'permission' => array('administer menu'),
      'defaults' => array(
        'cache' => DRUPAL_NO_CACHE,
        'content_callback' => 'widget_menu_widget_content',
      ),
    ),
  );
}

function widget_menu_widget_content($preset) {
  global $user;
  $menu_items = $preset->widget_settings['widget_menu_items'];
  $menu_items = array_filter($menu_items, function($item) {
    if ($item['delete']) {
      return FALSE;
    }
    return $item['status'] == TRUE;
  });
  uasort($menu_items, 'drupal_sort_weight');
  if ($preset->widget_settings['theme']) {
    $output = array();
    $output = _widget_menu_theme_menu($menu_items, $preset->widget_settings['theme']);
    return $output;
  }
  return '';
}


function widget_menu_preprocess_widget_menu_item(&$variables) {
  global $language_url;

  $item = $variables['item'];
  $path = $item['path'];
  // Remove all HTML and PHP tags from a tooltip. For best performance, we act only
  // if a quick strpos() pre-check gave a suspicion (because strip_tags() is expensive).
  if (isset($item['title']) && strpos($item['title'], '<') !== FALSE) {
    $item['title'] = strip_tags($item['title']);
  }

  $variables['link'] = array(
    'class' => $item['class'],
    'href' => check_plain(url($path, array())),
    'fa_icon' => $item['fa_icon'],
    'title' => $item['title'],
  );


  if (($path == $_GET['q'] || ($path == '<front>' && drupal_is_front_page())) && (empty($options['language']) || $options['language']->language == $language_url->language)) {
    $variables['link']['class'] .= ' active';
    $variables['link']['is_active'] = TRUE;
  }
}

function _widget_menu_theme_menu($menu_items, $theme, $plid = '0') {
  foreach ($menu_items as $key => $value) {
    $output[$key]['#theme'] = 'widget_menu_item';
    $output[$key]['#item'] = $value;
    if (!empty($value['children'])) {
      $output[$key] = _widget_menu_theme_menu($value['children'], 'widget_menu_item_with_children_wrapper', '1');
      $output[$key]['#item'] = $value;
    }
  }
  if ($plid) {
    $output['#theme_wrappers'] = array( $theme );
  }
  else {
    $output['#theme_wrappers'] = array( $theme );
  }
  return $output;
}

/************************************************************************
 * BEGIN WIDGET MENU CONFIG
*************************************************************************/

function widget_menu_check_if_compatible_theme($theme) {
  if (isset($theme['render element'])) {
    return $theme['render element'] == 'widget_menu';
  }
  return FALSE;
}

/**
 * Settings form for widget.
 */
function widget_menu_settings_form($form, $form_state, $widget_info = array()) {

  $preset = $form_state['item'];
  $themes = module_invoke_all('theme', NULL, NULL , NULL , NULL);
  $compatible_themes = array_filter($themes, 'widget_menu_check_if_compatible_theme');
  $themes = array_keys($compatible_themes);
  $options = drupal_map_assoc($themes);
  $form['widget_settings']['theme'] = array(
    '#type' => 'select',
    '#default_value' => $preset->widget_settings['theme'],
    '#description' => t('Theme used to render the menu'),
    '#options' => $options,
    '#title' => t('Style'),
  );

  $options = array(
    '' => t('- Select -'),
    DRUPAL_CACHE_GLOBAL => 'DRUPAL_CACHE_GLOBAL',
    DRUPAL_CACHE_PER_PAGE => 'DRUPAL_CACHE_PER_PAGE',
    DRUPAL_CACHE_PER_ROLE => 'DRUPAL_CACHE_PER_ROLE',
    DRUPAL_CACHE_PER_USER => 'DRUPAL_CACHE_PER_USER',
    DRUPAL_NO_CACHE => 'DRUPAL_NO_CACHE',
  );
  $form['widget_settings']['cache'] = array(
    '#type' => 'select',
    '#title' => t('Cache Setting.'),
    '#default_value' => $preset->widget_settings['cache'],
    '#options' => $options,
  );

  $form['widget_settings']['content_callback'] = array(
    '#type' => 'value',
    '#value' => $widget_info['defaults']['content_callback'],
  );

  $form['widget_settings']['widget_menu_items'] = array(
    '#type' => 'fieldset',
    '#title' => t('Menu items'),
    '#tree' => TRUE,
    '#theme' => 'widget_menu_entry_table'
  );

  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Add New item'),
    '#name' => 'add_new_item',
    '#submit' => array('widget_menu_settings_form_submit'),
  );
  if (isset($preset->widget_settings['widget_menu_items'])) {
    $menu_items = $preset->widget_settings['widget_menu_items'];
  }
  if (isset($form_state['values']['add_new_item'])) {
    $menu_items[] = array(
      'title' => 'Title',
      'path' => '',
      'fa_icon' => '',
      'status' => TRUE,
      'delete' => FALSE,
      'weight' => 0,
      'class' => '',
    );
  }
  $table = &$form['widget_settings']['widget_menu_items'];
  // Loop through the activites and add them to the form.
  if (!empty($menu_items)) {
    uasort($menu_items, 'drupal_sort_weight');
    foreach ($menu_items as $key => $item) {
      if ($item['delete']) {
        continue;
      }

      $table[$key]['#menu_item'] = (array)$item;
      $table[$key]['title'] = array(
        '#type' => 'textfield',
        '#size' => '30',
        '#default_value' => check_plain($item['title']),
      );
      $table[$key]['path'] = array(
        '#type' => 'textfield',
        '#size' => '40',
        '#default_value' => $item['path'],
      );
      $table[$key]['fa_icon'] = array(
        '#type' => 'fontawesome_iconpicker_textfield',
        '#size' => '15',
        '#default_value' => $item['fa_icon'],
      );
      $table[$key]['class'] = array(
        '#type' => 'textfield',
        '#size' => '15',
        '#default_value' => $item['class'],
      );
      // The weight (this is for the tabledrag we'll add in the theme function
      $table[$key]['weight'] = array(
        '#type' => 'textfield',
        '#size' => 2,
        '#delta' => 10,
        '#default_value' => $item['weight'],
      );
      // Is this activity enabled?
      $table[$key]['status'] = array(
        '#type' => 'checkbox',
        '#default_value' => $item['status'] ? TRUE : FALSE,
      );
      // Is this activity enabled?
      $table[$key]['delete'] = array(
        '#type' => 'checkbox',
        '#default_value' => FALSE,
      );
    }
  }
  return $form;
}

/**
 * Widget Menu form submit handler.
 */
function widget_menu_settings_form_submit($form, &$form_state) {
  if (isset($form_state['values']['add_new_item'])) {
    $form_state['rebuild'] = TRUE;
    return;
  }
  $form_state['redirect'] = current_path();
}

