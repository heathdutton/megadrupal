<?php

/**
 * @file
 *   widget_notification.module
 *   Main module file for widget_notification module.
 */

/**
 * Implements hook_menu().
 */
function widget_notification_menu() {
  $items['widget_notificaiton/demodata/default'] = array(
    'title' => 'Widget Notification Default JSON data',
    'page callback' => 'widget_notification_demodata_default_callback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}


function widget_notification_demodata_default_callback() {
  $var = widget_notification_demodata_default();
  drupal_json_output($var);
}

function widget_notification_demodata_default() {
  $var['badge_text'] = 10;
  $var['badge_type'] = 'alert-danger';
  $var['fa_icon'] = 'fa-envelope';
  $var['detail_url'] = url('<front>');
  $var['detail_url_text'] = t('Read all messages');
  $var['messages'][] = array(
     'title' => 'John Doe',
     'fa_icon' => 'fa-comment',
     'text' => 'Hi there, i think you would be interested in this cool new feature',
     'path' => '/examples/twitter',
     'text_muted' => date('H:i:s', strtotime('now')),
     'showProgress' => TRUE,
     'progress_percent' => $count = date('s') * 100 / 60,
     'progress_type' => 'warning',
  );
  $var['messages'][] = array(
     'title' => 'Jane Roe',
     'subtitle' => '(project lead)',
     'text' => 'The design files have been updated, need your approval',
     'path' => '/examples/twitter',
     'text_muted' => date('H:i:s', strtotime('-1 hour')),
     'showProgress' => FALSE,
  );
  $var['messages'][] = array(
     'subtitle' => 'Twitter',
     'path' => '/examples/twitter',
     'text_muted' => t('Yesterday'),
     'fa_icon' => 'fa-twitter'
  );
  $var['messages'][] = array(
     'subtitle' => 'System',
     'path' => '/admin/reports/log',
     'text_muted' => t('Yesterday'),
     'badge_text' => 17,
     'badge_type' => 'progress-bar-danger',
     'fa_icon' => 'fa-gear',
  );
  $var['messages'][] = array(
     'subtitle' => 'Facebook',
     'text' => 'Some really long text definitely exceding 200 character count to
     show that the text is indeed truncated by using ng directive LimitTo.',
     'path' => '/examples/facebook',
     'text_muted' => t('Today'),
     'fa_icon' => 'fa-facebook',
  );
  return $var;
}

/**
 * Implements hook_theme().
 */
function widget_notification_theme($existing, $type, $theme, $path) {
  return array(
    'widget_notification' => array(
      'template' => 'widget_notification',
      'variables' => array('preset' => NULL, 'account' => NULL),
    ),
    'widget_notification_json' => array(
      'variables' => array(
        'view' => NULL,
        'options' => NULL,
        'row' => NULL,
        'title' => NULL,
      ),
    ),
    'widget_notification_json_fields' => array(
      'variables' => array(
        'view' => NULL,
        'options' => NULL,
        'row' => NULL,
        'title' => NULL,
      ),
    ),
  );
}

function theme_widget_notification_json($variables) {
  return '123 321';
}
function theme_widget_notification_json_fields($variables) {
  return 'abcdef';
}
/**
 * Implements hook_widget_factory_widgets_info
 */
function widget_notification_widget_factory_widgets_info() {
  return array(
    'widget_notification' => array(
      'info' => 'Widget Notification: Messages',
      'settings_form_callback' => 'widget_notification_settings_form',
      'defaults' => array(
        'cache' => DRUPAL_NO_CACHE,
        'content_callback' => 'widget_notification_widget_content',
      ),
    ),
  );
}

function widget_notification_widget_content($preset) {
  global $user;
  libraries_load('angular-poller');

  $output = array(
    '#preset' => $preset,
    '#account' => $user,
    '#theme' => 'widget_notification',
  );
  return $output;
}

function widget_notification_settings_form($form, $form_state, $widget_info = array()) {
  $preset = $form_state['item'];
  $form['widget_settings']['app_name'] = array(
    '#type' => 'machine_name',
    '#default_value' => $preset->widget_settings['app_name'],
    '#machine_name' => array(
      'exists' => 'widget_notification_check_if_unique_app_name',
      'label' => t('Name to be used for app. Can contain only letters a-z and A-Z.'),
      'replace_pattern' => '[^a-zA-Z0-9]+',
      'replace' => '_',
      'source' => array('description'),
    ),
    '#description' => t('Name to be used for angular app (module name).'),
    '#title' => t('App name'),
    // '#disabled' => !empty($preset->widget_settings['app_name']),
  );

  $form['widget_settings']['json_callback'] = array(
    '#type' => 'textfield',
    '#title' => t('JSON callback url'),
    '#default_value' => $preset->widget_settings['json_callback'],
    '#description' => t('You can use the following url for demo purpose, <em>/widget_notificaiton/demodata/default<em>'),
  );

  $form['widget_settings']['polling_delay'] = array(
    '#type' => 'textfield',
    '#title' => t('Polling delay'),
    '#default_value' => !empty($preset->widget_settings['polling_delay']) ? $preset->widget_settings['polling_delay'] : 0,
    '#description' => t('Polling delay in milli seconds. Entering 0 would fetch the content only once.'),
  );

  $form['widget_settings']['cache'] = array(
    '#type' => 'value',
    '#value' => DRUPAL_NO_CACHE,
  );

  $form['widget_settings']['content_callback'] = array(
    '#type' => 'value',
    '#value' => $widget_info['defaults']['content_callback'],
  );

  return $form;
}

function widget_notification_check_if_unique_app_name($app_name) {
  $presets = ctools_export_load_object('widget_factory_preset');
  foreach ($presets as $preset) {
    if ($preset->widget_settings['app_name'] == $app_name) {
      return TRUE;
    }
  }
  return FALSE;
}
/**
 * Implements hook_libraries_info().
 */
function widget_notification_libraries_info() {
  $libraries['angular-poller'] = array(
    'name' => 'Angular Poller',
    'vendor url' => 'http://emmaguo.github.io/angular-poller/',
    'download url' => 'https://github.com/emmaguo/angular-poller/',
    'version arguments' => array(
      'file' => 'angular-poller.js',
      'pattern' => '@version v([0-9\.a-z]+)@',
      'lines' => 8,
    ),
    'files' => array(
      'js' => array(
        'angular-poller.js',
      ),
    ),
    'variants' => array(
      'minified' => array(
        'files' => array(
          'js' => array(
            'angular-poller.min.js',
          ),
        ),
      ),
      'source' => array(
        'files' => array(
          'js' => array(
            'angular-poller.js',
          ),
        ),
      ),
    ),
    'dependencies' => array(
      'angular-resource',
    ),
  );

  $libraries['angular-resource'] = array(
    'name' => 'AngularJS resource',
    'vendor url' => 'angularjs.org',
    'download url' => 'http://code.angularjs.org/',
    'library path' => libraries_get_path('angular'),
    'version arguments' => array(
      'file' => 'angular-resource.js',
      'pattern' => '@license AngularJS v([0-9\.a-z]+)@',
      'lines' => 2,
    ),
    'files' => array(
      'js' => array(
        'angular-resource.js',
      ),
    ),
    'variants' => array(
      'minified' => array(
        'files' => array(
          'js' => array(
            'angular-resource.min.js',
          ),
        ),
      ),
      'source' => array(
        'files' => array(
          'js' => array(
            'angular-resource.js',
          ),
        ),
      ),
    ),
    'dependencies' => array(
      'angular',
    ),
  );

  $libraries['angular'] = array(
    'name' => 'AngularJS',
    'vendor url' => 'angularjs.org',
    'download url' => 'http://code.angularjs.org/',
    'version arguments' => array(
      'file' => 'angular.js',
      'pattern' => '@license AngularJS v([0-9\.a-z]+)@',
      'lines' => 8,
    ),
    'files' => array(
      'js' => array(
        'angular.js',
      ),
    ),
    'variants' => array(
      'minified' => array(
        'files' => array(
          'js' => array(
            'angular.min.js',
          ),
        ),
      ),
      'source' => array(
        'files' => array(
          'js' => array(
            'angular.js',
          ),
        ),
      ),
    ),
  );

  return $libraries;
}

function widget_notification_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'widget_notification') . '/includes',
  );
}
