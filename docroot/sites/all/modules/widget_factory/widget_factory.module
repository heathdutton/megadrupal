<?php

/**
 * @file
 *   widget_factory.module
 *   Main module file for widget_factory module.
 */

/**
 * Implements hook_menu_alter().
 */
function widget_factory_menu_alter(&$items) {
  if (isset($items['admin/structure/widget_factory/list/%ctools_export_ui/edit'])) {
    $items['admin/structure/widget_factory/list/%ctools_export_ui/edit']['context'] = MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE;
  }
}

/**
 * Implements hook_block_info().
 */
function widget_factory_block_info() {
  $blocks = array();
  ctools_include('export');
  $presets = ctools_export_load_object('widget_factory_preset');
  foreach ($presets as $preset) {
    $blocks[$preset->name] = array(
      'info' => $preset->description,
    );
    if (isset($preset->widget_settings['cache'])) {
      $blocks[$preset->name]['cache'] = $preset->widget_settings['cache'];
    }
  }
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function widget_factory_block_view($delta = '') {
  ctools_include('export');
  $presets = ctools_export_load_object('widget_factory_preset');
  $data['subject'] = NULL;
  $data['content'] = array();
  if (isset($presets[$delta])) {
    $preset = $presets[$delta];
    if (!(isset($preset->disabled) AND $preset->disabled)) {
      $function = NULL;
      if (isset($preset->widget_settings['content_callback'])) {
        $function = $preset->widget_settings['content_callback'];
      }
      else if(isset($preset->widget_settings['defaults']['content_callback'])) {
        $function = $preset->widget_settings['defaults']['content_callback'];
      }
      $data['content'] = call_user_func_array($function, array($preset));
    }

  }
  else {
    $data = FALSE;
    widget_factory_delete_block($delta);
  }
  // Add contextual links for this block.
  if (isset($data['content']) AND is_array($data['content'])) {
    $data['content']['#contextual_links']['widget_factory'] = array('admin/structure/widget_factory/list', array($delta));
  }
  return $data;
}


/**
 * Implements hook_permission().
 */
function widget_factory_permission() {
  return array(
    'administer widget factory' =>  array(
      'title' => t('Administer Widget Factory'),
      'description' => t('Perform administartion tasks for Widget Factory'),
    ),
  );
}

/**
 * Implementation of hook_ctools_plugin_api().
 *
 * Tell CTools that we support the default_widget_factory_presets API.
 */
function widget_factory_ctools_plugin_api($owner, $api) {
  if ($owner == 'widget_factory' && $api == 'default_widget_factory_presets') {
    return array('version' => 1);
  }
}

/**
 * Implementation of hook_ctools_plugin_directory().
 */
function widget_factory_ctools_plugin_directory($module, $type) {
  // Load the export_ui plugin.
  if ($type =='export_ui') {
    return 'plugins/export_ui';
  }
}

/**
 * Deletes a Drupal block created by the module.
 *
 * @param string $block_delta
 *   Block delta.
 */
function widget_factory_delete_block($block_delta) {
  db_delete('block')
  ->condition('delta', $block_delta)
  ->execute();
  drupal_set_message("Widget factory block deleted - '%block_delta'", array('%block_delta' => $block_delta));
}
