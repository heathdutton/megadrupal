<?php

/**
 * Implements hook_menu().
 */
function passive_menu() {
  $items['admin/config/system/passive'] = array(
    'title' => 'Passive cache',
    'description' => 'Review and configure passive cache settings for this site.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('passive_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'passive.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_boot().
 */
function passive_boot() {
  if (function_exists('passive_check_backend_refresh') && passive_check_backend_refresh()) {
    // Reset default state to cacheable for backend refresh.
    drupal_page_is_cacheable(TRUE);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function passive_form_system_performance_settings_alter(&$form, &$form_state, $form_id) {
  if (isset($form['clear_cache']['clear'])) {
    $form['clear_cache']['passive_flush_override'] = array(
      '#type' => 'checkbox',
      '#title' => t('Include passive cache when clearing'),
      '#default_value' => variable_get('passive_flush'),
      '#element_validate' => array('passive_form_override_passive_flush'),
    );
  }
}

/**
 * Form validation callback overriding the cache clear form behavior.
 */
function passive_form_override_passive_flush($element, &$form_state) {
  if (array_key_exists('passive_flush_override', $form_state['values'])) {
    global $conf;
    $conf['passive_flush_override'] = !empty($form_state['values']['passive_flush_override']);
    unset($form_state['values']['passive_flush_override']);
  }
}

/**
 * Implements hook_cron().
 */
function passive_cron() {
  module_load_include('inc', 'passive', 'passive.cache');

  // Run queued requests.
  $count = variable_get('passive_queue_batch', 50);
  $runtime = variable_get('passive_queue_runtime');
  $run_start = time();
  $items = &drupal_static(__FUNCTION__);

  while (time() - $run_start <= $runtime) {
    $batch = passive_queue_get($count);
    if (empty($batch)) {
      break;
    }

    $items = $batch;
    foreach ($items as $key => $item) {
      passive_request_dispatch($item['request']);
      unset($items[$key]);
      passive_queue_remove($key);
    }
  }
}

/**
 * Adds request to queue.
 */
function passive_queue_add($index, $request, $created = NULL) {
  if (!isset($created)) {
    // Use current time (not request) since re-queuing can span many seconds.
    $created = time();
  }

  try {
    db_insert('passive_queue')
      ->fields(array(
        'item_index' => $index,
        'created' => $created,
        'request' => serialize($request),
      ))
      ->execute();
  }
  catch (PDOException $ex) {
    // Ignore existing queue item.
  }
}

/**
 * Retrieves requests from queue.
 */
function passive_queue_get($count) {
  $items = array();

  $count = max(0, $count);
  $result = db_select('passive_queue', 'q')
    ->fields('q', array('item_index', 'created', 'request'))
    ->orderBy('created')
    ->range(0, $count)
    ->execute();
  foreach ($result->fetchAllAssoc('item_index', PDO::FETCH_ASSOC) as $key => $item) {
    $item['request'] = unserialize($item['request']);
    $items[$key] = $item;
  }

  return $items;
}

/**
 * Retrieves requests from queue.
 */
function passive_queue_remove($index) {
  db_delete('passive_queue')->condition('item_index', $index)->execute();
}
