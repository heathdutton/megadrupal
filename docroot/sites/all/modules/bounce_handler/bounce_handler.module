<?php

/**
 * Implementation of hook_help().
 */
function bounce_handler_help($path, $arg) {
  switch ($path) {
    case 'admin/help#bounce_handler':
      $output = '<p>' . t('This module lists the incoming bounces for your website. It allows to disable a users mails to avoid producing more bounces.') . '</p>';
      return $output;
    case 'admin/config/system/bounce_handler/settings':
      $output = '<p><em>' . t("Anything below will only work if you've set up bounce handling as described in INSTALL.TXT.") . '</em></p>';
      $output .= '<p>' . t('The options on this page allow you to manage bounces in two ways.') . '</p>';
      $output .= '<ul><li>' . t('You can enable the first two options. This will disable all mails sent to affected accounts after the configured thresholds have been crossed. New mails will only be sent after old bounces have been expired. See the last config option for this. Whether a sending user receives feedback on the status of the message, depends on the module sending the email.') . '</li>';
      $output .= '<li>' . t('You can enable the second set of options. This will try to disable or remove subscriptions managed by supported modules. Mails sent by modules without subscription management (e.g. contact forms) will still be attempted to be sent. Subscriptions will remain disabled or removed, even after the bounce level has decreased again.') . '</li></ul>';
      $output .= '<p>' . t('You can enable both modes to get watchdog messages before subscriptions are removed. For this, you should the first set of thresholds higher than the second.') . '</p>';
      $output .= '<p>' . t('The last option should always be properly configured to enable the second mode of operation and expire old bounces and reset the statistics.') . '</p>';
      return $output;
    case 'admin/reports/bounce_handler':
      return '<p>' . t('This list shows the most recent bounces. You can investigate the bounce by following the "see bounce" link and see all bounces for a particular address by following the "see all bounces" link.') . '</p>';
    case 'admin/reports/bounce_handler_top':
      return '<p>' . t('This list shows the mail addresses for which the most bounces were received. The relevant column to decide if to take action is the one listing hard bounces. A hard bounce indicates that the situation is currently beyond repair. You can see the affected mail address and to which user it belongs. You can see a list of all the bounces of a given mail address by following the "see bounces" link.')  . '</p>';
  }
}

/**
 * Implementation of hook_menu().
 */
function bounce_handler_menu() {
  $items['admin/config/system/bounce_handler/settings'] = array(
    'title' => 'Bounce handler settings',
    'description' => 'Configure bounce handling',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bounce_handler_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'bounce_handler.admin.inc',
  );

  $items['admin/reports/bounce_handler'] = array(
    'title' => 'Recent incoming bounces',
    'description' => 'View incoming bounces.',
    'page callback' => 'bounce_handler_overview',
    'access arguments' => array('access site reports'),
    'file' => 'bounce_handler.admin.inc',
  );

  $items['admin/reports/bounce_handler_top'] = array(
    'title' => 'Bounce statistics',
    'description' => 'View bounce statistics.',
    'page callback' => 'bounce_handler_top',
    'access arguments' => array('access site reports'),
    'file' => 'bounce_handler.admin.inc',
  );

  $items['admin/reports/bounce/%'] = array(
    'title' => 'Details',
    'page callback' => 'bounce_handler_view_bounce',
    'page arguments' => array(3),
    'access arguments' => array('access site reports'),
    'type' => MENU_CALLBACK,
    'file' => 'bounce_handler.admin.inc',
  );

  $items['admin/reports/bounce_mail/%'] = array(
    'title' => 'Bounces per mail address',
    'page callback' => 'bounce_handler_view_bounce_address',
    'page arguments' => array(3),
    'access arguments' => array('access site reports'),
    'type' => MENU_CALLBACK,
    'file' => 'bounce_handler.admin.inc',
  );


  return $items;
}

/**
 * Implementation of hook_user_delete().
 */
function bounce_handler_user_delete($account) {
  db_delete('bounces')->condition('uid', $account->uid)->execute();
}

/**
 * Implementation of hook_cron().
 *
 * Remove expired bounce messages. Try to unsubscribe users.
 */
function bounce_handler_cron() {

  $soft_limit = variable_get('bounce_handler_unsubscribe_soft_limit', 'Disabled');
  $hard_limit = variable_get('bounce_handler_unsubscribe_hard_limit', 'Disabled');

  if ($soft_limit === 'Disabled' && $hard_limit === 'Disabled') {
    // Neither limit has been configured. There's nothing to do here.
    return;
  }

  // Find users who have more than the configured limit of bounces.
  $query = db_select('bounce_statistics', 'bs');
  $query->join('users', 'u', 'u.mail = bs.mail');
  $query->addField('u', 'uid', 'uid');
  $query->addField('u', 'mail', 'mail');
  $query->addField('u', 'name', 'name');

  if ($soft_limit != 'Disabled') {
    // We use >= as we could have only hard bounces.
    $query->where('(bs.count - bs.remove) >= :limit', array(':limit' => $soft_limit));
  }
  if ($hard_limit != 'Disabled') {
    $query->condition('bs.remove', $hard_limit, '>');
  }


  $result = $query->execute();
  foreach ($result as $user) {
    // Give the admin an idea what's happening.
    watchdog('bounce_handler', 'Disabling subscriptions for <a href="/user/!uid">user %name (%mail)</a> due to bounces.', array('!uid' => $user->uid, '%name' => $user->name, '%mail' => $user->mail), WATCHDOG_NOTICE);
    // TODO: get supported modules and unsubscribe.
    if (module_exists('pm_email_notify')) {
      db_merge('pm_email_notify')
        ->key(array('user_id' => $user->uid))
        ->insertFields(
          array(
            'user_id' => $user->uid,
            'email_notify_is_enabled' => 0,
          )
        )
        ->updateFields(array(
            'email_notify_is_enabled' => 0,
          )
        )
        ->execute();
    }
    if (module_exists('message_notify')) {
      // There's probably a more elegant way to do this.
      $message_flags = message_subscribe_flag_get_flags();
      foreach ($message_flags as $flag_name => $flag) {
        db_delete('flagging')
          ->condition('fid', $flag->fid)
          ->condition('uid', $user->uid)
          ->execute();
      }
    }
  }

  // Cleanup the bounces table
  $max = (int) db_query('SELECT MAX(bid) FROM {bounces}')->fetchField();
  db_delete('bounces')->condition('bid', ($max - variable_get('bounce_handler_row_limit', 1000)), '<=')->execute();
  // Remove stats without bounces
  $result = db_query('SELECT bs.sid FROM {bounce_statistics} bs LEFT JOIN {bounces} b ON bs.sid = b.sid WHERE b.sid IS NULL');
  foreach ($result as $sid) {
    db_delete('bounce_statistics')->condition('sid', $sid)->execute();
  }
  // Recalculate stats
  $result = db_query('SELECT sid FROM {bounce_statistics}');
  foreach ($result as $sid) {
    db_query('UPDATE {bounce_statistics} SET count = (SELECT COUNT(*) FROM {bounces} WHERE sid = :sid1), remove = (SELECT COUNT(*) FROM {bounces} WHERE sid = :sid2 AND severity = 1) WHERE sid = :sid3', array(':sid1' => $sid, ':sid2' => $sid, ':sid3' => $sid));
  }
}

/**
 * Implementation of hook_mail_alter().
 *
 * Intercept mail to bouncing accounts.
 */
function bounce_handler_mail_alter(&$message) {
  // Find if the adressee has more than the appropriate limit of bounces.
  $query = db_select('bounce_statistics', 'bs');
  $query->join('users', 'u', 'u.mail = bs.mail');
  $query->addField('u', 'uid', 'uid');
  $soft_limit = variable_get('bounce_handler_email_soft_limit', 'Disabled');
  $hard_limit = variable_get('bounce_handler_email_hard_limit', 'Disabled');
  if ($soft_limit != 'Disabled') {
    // We use >= as we could have only hard bounces.
    $query->where('(bs.count - bs.remove) >= :limit', array(':limit' => $soft_limit));
  }
  if ($hard_limit != 'Disabled') {
    $query->condition('bs.remove', $hard_limit, '>');
  }
  if (count($query->conditions()) > 0) {
    $query->condition('bs.mail', $message['to'], '=');
    $uid = $query->execute()->fetchField();
    if ($uid) {
      // don't send this mail
      unset($message['send']);
      // add notice
      watchdog('bounce_handler', 'Intercepted e-mail of type %type to <a href="/user/!uid">%to</a> due to bounces.', array('%type' => $message['module'] . '_' . $message['key'], '%to' => $message['to'], '!uid' => $uid), WATCHDOG_NOTICE);
    }
  }
}
