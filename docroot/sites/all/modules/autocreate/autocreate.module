<?php

/***
 * @file
 * autocreate.module
 *
 * Automagically creates a nodereference from a 'template' node
 */

/**
 * implement hook_menu
 */
function autocreate_menu() {
  $items = array();

  $items['admin/config/content/autocreate'] = array(
    'title' => 'Autocreate nodereference',
    'description' => 'Settings for cloneable and cloned nodes',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('autocreate_admin'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * implement hook_admin
 */
function autocreate_admin($form, &$form_state) {

  $form['template_token'] = array(
    '#type' => 'textfield',
    '#title' => t('Template token'),
    '#default_value' => variable_get('template_token', 'ANR_TEMPLATE'),
    '#size' => 25,
    '#maxlength' => 25,
    '#description' => t("String used to identify template nodes.  Save your template nodes with this as part of the node title--e.g. 'My Form ANR_Template'"),
  );

  $types = node_type_get_names();
  foreach ($types as $type => $name) {
    $sfx = 'nr_' . $type . '_suffix';
    $form[$type] = array(
      '#type' => 'fieldset',
      '#title' => t('Settings for nodes cloned from a ' . $name . ' template'),
    );
    $form[$type][$sfx] = array(
      '#type' => 'textfield',
      '#title' => t('Suffix to append to title of cloned node'),
      '#default_value' => $name,
      '#size' => 25,
      '#maxlength' => 25,
      '#description' => t("This suffix will be attached to the referring node's title to create the reference link."),
    );
    $form[$type][$type . '_reset_pub_options'] = array(
      '#type' => 'checkbox',
      '#title' => t("Reset publishing options of cloned node to defaults for $name."),
      '#default_value' => variable_get($type . '_reset_pub_options', 1),
    );
  }

  return system_settings_form($form);
}

/**
 * implement hook_field_info
 */
function autocreate_field_info() {
  return array(
    'autocreate' => array(
      'label' => 'Autocreate Node Reference',
      'default_widget' => 'autocreate_select',
      'default_formatter' => 'autocreate_default',
    ),
  );
}

/**
 * "magic" callback _field_schema
 */
function autocreate_field_schema($field) {
  if ($field['type'] == 'autocreate') {
    $schema['columns']['anr_reference'] = array(
      'type' => 'int',
    );
    return $schema;
  }
}

/**
 * "magic" callback _field_instance_settings_form
 *
 * a form setting to specify the template to be cloned from the field instance
 */
function autocreate_field_instance_settings_form($field, $instance) {
  $form = array();
  $refs = _autocreate_potential_references();
  $options = array(t('Select a template'));
  foreach ($refs as $nid=>$title) {
    $options[$nid] = $title;
  }
  $form['clone_me'] = array(
    '#type' => 'select',
    '#title' => t('Reference template'),
    '#options' => $options,
    '#default_value' => isset($instance['settings']['clone_me']) ? $instance['settings']['clone_me'] : null,
    '#description' => t('The template to clone for this reference.'),
  );
  return $form;
}


/**
 * implements hook_field_formatter_info
 */
function autocreate_field_formatter_info() {
  return array(
    'autocreate_default' => array(
      'label' => 'Title (link)',
      'field types' => array('autocreate'),
    ),
    'autocreate_full' => array(
      'label' => t('Full node'),
      'field types' => array('autocreate'),
    ),
    'autocreate_teaser' => array(
      'label' => t('Teaser'),
      'field types' => array('autocreate'),
    ),
  );
}


function autocreate_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items, $displays) {

}

/**
 * implements hook_field_formatter_view
 */
function autocreate_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  foreach ($items as $delta => $item) {
    $referenced_node = _autocreate_fetch_ref($item['anr_reference']);
    switch ($display['type']) {
      case 'autocreate_default':
          $markup = $referenced_node ? l($referenced_node->title, 'node/' . $referenced_node->nid) : $ref_name;
        break;
      case 'autocreate_full':
        $output = node_view($referenced_node);
        $markup = drupal_render($output);
        break;
      case 'autocreate_teaser':
        $output = node_view($referenced_node, 'teaser');
        $markup = drupal_render($output);
        break;
      default:
        $markup = $referenced_node ? l($referenced_node->title, 'node/' . $referenced_node->nid) : $ref_name;
    }
    $element[$delta] = array(
      '#markup' => $markup,
    );
  }
  return $element;

}

/**
 * implement hook_field_widget_info
 */
function autocreate_field_widget_info() {
  // this shows in the add field form
  return array(
    'autocreate_select' => array(
      'label' => t('Select List'),
      'field types' => array('autocreate'),
    ),
  );
}

/**
 * implement hook_field_widget_form
 *
**/
function autocreate_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  if ($form['#node_edit_form']) {

    $table = $field['field_name'] ? 'field_data_' . $field['field_name'] : null;
    $column = $field['field_name'] ? $field['field_name'] . '_anr_reference' : null;
    $entity_id = $form['nid']['#value'] ? $form['nid']['#value'] : null;
    if ($table && $column && $entity_id) {
      $results = db_query('SELECT ' . $column .  ' FROM ' . $table . ' where entity_id=' . $entity_id);
      foreach($results as $result) {
        $ref_nid = $result->$column;
      }
      $element['anr_reference'] = array(
        '#type' => 'hidden',
        '#title' => '',
        '#multiple' => FALSE,
        '#value' => $ref_nid,
        '#required' => FALSE,
        '#description' => '',
      );
      return $element;
    }
    else {
    }
  }
}


function autocreate_field_insert($entity_type, $entity, $field, $instance, $langcode, &$items, &$errors) {
  if($instance['settings']['clone_me']) {
    $template_node = node_load($instance['settings']['clone_me']);
    $ref_node = anr_clone_node($template_node, $entity->title);
    if ($ref_node) {
      $items[0]['anr_reference'] = $ref_node->nid;
      drupal_set_message(l(t('Edit referenced node: ') . ' ' . $ref_node->title, "node/$ref_node->nid/edit"));
    }
  }
}


/**
 * implements hook_is_empty
 */
function autocreate_field_is_empty($item, $field) {
  if (empty($item)) {
    return TRUE;
  }
  return FALSE;
}

/** helper function for mysql special chars
 courtesy of mattman
 */
function autocreate_mysql_escape($str) {
  return preg_replace('/[\[\]%_]/', '\\\\' . '\0', $str);
}

/**
 * get the referenced node for a given referencing node
 */
function _autocreate_fetch_ref($ref_nid) {
  if ($ref_nid > 0) {
    $referenced_node = node_load($ref_nid);
  }

  return $referenced_node;
}

/**
 * get a list of template nodes that might be associated with the field
 */
function _autocreate_potential_references() {
  $potentials = array();
  $template_token = variable_get('template_token', 1);

  $query = new EntityFieldQuery();
  $rows = $query->entityCondition('entity_type', 'node')
                ->propertyCondition('title', "%" . $template_token . "%", 'LIKE')
                ->execute();
  $result = node_load_multiple(array_keys($rows['node']));
  foreach ($result as $node) {
    $potentials[$node->nid] = $node->title;
  }
  return $potentials;
}


// slight modification of clone_node() from the clone module
// -- takes an extra param for a parent node
// -- handles hook_clone_node_alter() modifications to the cloned node
// -- returns $node instead of drupal_get_form($node)
function anr_clone_node($node, $title) {
    global $user;
    $sfx = 'nr_' . $node->type . '_suffix';
    $type = $node->type;
    $suffix = variable_get($sfx, 1);
    $clone_title = $title . ' ' . $suffix;
    // check to see if we already got one
    $existing = db_query("SELECT n.nid from {node} n where n.title = :title", array(':title' => $clone_title));
    $exists = $existing->fetchField();
    if(isset($node->nid) ) {
      $clone = clone $node;

      $clone->nid = NULL;
      $clone->vid = NULL;
      $clone->name = $user->name;
      $clone->uid = $user->uid;
      $clone->created = NULL;
      $clone->menu = NULL;
      $clone->path = NULL;
      $clone->files = array();
      // Remove CCK file and image attachements
      if (module_exists('imagefield') || module_exists('filefield')) {
        $content_type = module_invoke('content', 'types', $clone->type);
        // Find all the fields that are files or images.
        foreach ($content_type['fields'] as $data) {
          if (($data['type'] == 'file') || ($data['type'] == 'image')) {
            $key = $data['field_name'];
            // Remove any attached files as with $node->files
            if (isset($clone->$key)) {
              $clone->$key = array();
            }
          }
        }
      }

      if (variable_get($type . '_reset_pub_options', FALSE)) {
        $node_options = variable_get('node_options_' . $clone->type, array('status', 'promote'));
        // fill in the default values
        foreach (array('status', 'moderate', 'promote', 'sticky', 'revision') as $key) {
          $clone->$key = in_array($key, $node_options);
        }
      }
      $clone->title = $exists ? $clone_title . ' ' . ($existing->rowCount() + 1) : $clone_title;
      drupal_set_title($clone->title);
      node_save($clone);
      return $clone;
    }
    else {
      return node_load($exists);
    }
}
