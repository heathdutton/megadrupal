<?php

/**
 * @file
 * UC Attribute Stock.
 *
 * The modul allows you to combine several attributes info one and keep track of stock level.
 *
 */

/**
 * Implements hook_menu().
 */
function uc_attribute_stock_menu() {
  $items['node/%node/edit/attribute_stock'] = array(
    'title' => 'Attribute stock',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_attribute_stock_form', 1),
    'access arguments' => array('administer attribute stock'),
    'weight' => 10,
    'type' => MENU_LOCAL_TASK,
    'file' => 'uc_attribute_stock.admin.inc',
  );

  $items['admin/store/settings/stock/settings'] = array(
    'title' => 'Stock settings',
    'description' => 'Manage stock settings.',
    'weight' => 1,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/store/settings/stock/attribute_stock'] = array(
    'title' => 'Attribute stock',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_attribute_stock_settings_form'),
    'access arguments' => array('administer attribute stock'),
    'weight' => 10,
    'type' => MENU_LOCAL_TASK,
    'file' => 'uc_attribute_stock.admin.inc',
  );


  return $items;
}

/**
 * Implements hook_theme().
 */
function uc_attribute_stock_theme() {
  return array(
    'uc_attribute_stock_form' => array(
      'render element' => 'form'
    ),
  );
}

/**
 * Implements hook_admin_paths().
 */
function uc_attribute_stock_admin_paths() {
  $paths = array(
    'node/*/edit/attribute_stock' => TRUE,
    'admin/store/settings' => TRUE,
  );

  return $paths;
}


/**
 * Implements hook_permission().
 */
function uc_attribute_stock_permission() {
  return array(
    'administer attribute stock' => array(
      'title' => t('Attribute stock'),
      'description' => t('Display the administration for Attribute stock.'),
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function uc_attribute_stock_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'uc_cart_view_form') {
    $form['#validate'][] = 'uc_attribute_stock_uc_cart_view_form_validate';
  }
  elseif ($form_id == 'uc_cart_checkout_review_form') {
    if (array_search('uc_attribute_stock_uc_cart_checkout_review_form_validate', $form['#validate']) === FALSE) {
      $form['#validate'][] = 'uc_attribute_stock_uc_cart_checkout_review_form_validate';
    }
  }
  elseif ($form_id == 'uc_object_attributes_form') {
    $nid = arg(1);

    if (isset($form_state['input']['attributes'])) {
      foreach ($form_state['input']['attributes'] as $key => $value) {
        if (isset($value['remove']) && $value['remove'] == 1) {
          db_delete('uc_attribute_stock')
            ->condition('nid', $nid)
            ->execute();
        }
      }
      drupal_set_message(t('All stock attributes have been removed!'), 'status');
    }

  }
  else {
    $re = "/^(uc_product_add_to_cart_form_)(.*)$/";

    if (preg_match($re, $form_id)) {
      module_load_include('inc', 'uc_attribute', 'uc_attribute.admin');

      $data = uc_attribute_stock_get_attributes($form['nid']['#value']);

      if (empty($data)) {
        return;
      }

      $form['#validate'][] = 'uc_attribute_stock_attribute_form_validate';

      $select_options[''] = t('Please select');
      foreach ($data as $key => $value) {
        $option = '';
        $option_value = '';
        foreach ($value['combination'] as $attribute_id => $option_id) {
          if (isset($form['attributes'][$attribute_id]['#options'][$option_id])) {
            if (empty($option)) {
              $option = $form['attributes'][$attribute_id]['#options'][$option_id];
            }
            else {
              $option .= ' - ' . $form['attributes'][$attribute_id]['#options'][$option_id];
            }
          }
        }
        if (variable_get('uc_attribute_stock_display_stock_level')) {
          if ($value['unlimited'] == 1) {
            $option .= ', ' . t('unlimited');
          }
          elseif ($value['stock'] == 0) {
            $option .= ', ' . t('to order only');
          }
          else {
            $option .= ', ' . format_plural($value['stock'], '1 piece in stock', '@count pieces in stock');
          }
        }
        $select_options[$key] = $option;
      }
      $form['my_attributes']['#tree'] = TRUE;


      if (count($form['node']['#value']->attributes) == 1) {
        $first_key = key($form['node']['#value']->attributes);
        $label = $form['node']['#value']->attributes[$first_key]->name;
      }
      else {
        $label = t('Type');
      }

      $form['my_attributes']['option_id'] = array(
        '#type' => 'select',
        '#options' => $select_options,
        '#description' => t('Please choose a type.'),
        '#default_value' => '',
        '#required' => 1,
        '#title' => $label,
      );
      $form['my_attributes']['data'] = array('#type' => 'value', '#value' => $data);
      $form['attributes']['#access'] = FALSE;
    }
  }
}

/**
 * Form validation handler for uc_cart_view_form().
 */
function uc_attribute_stock_uc_cart_view_form_validate($form, &$form_state) {
    $items = array();
    foreach ($form_state['values']['items'] as $key => $value) {
      if (!isset($items[$value['nid']])) {
        $items[$value['nid']] = uc_attribute_stock_get_attributes($value['nid'], TRUE);
      }
    }
    foreach ($form_state['values']['items'] as $key => $value) {
      $nid = $value['nid'];
      $u = unserialize($value['data']);

      foreach ($items[$nid] as $item) {
        if ($item['combination'] == $u['attributes'] && $item['stock'] < $value['qty'] && $item['unlimited'] == 0 && ($form_state['clicked_button']['#name'] != 'remove-' . $key)) {
          if ($item['stock'] == 0) {
            $message = 'The product has been sold out. Please remove it from your cart.';
          }
          else {
            $message = format_plural($item['stock'], 'There is only 1 item available in the stock.', 'There are only @count items available in the stock.');
          }
          form_set_error('items][' . $key, $message);
          break 2;
        }
      }
    }
}

/**
 * Form validation handler for uc_cart_checkout_review_form().
 */
function uc_attribute_stock_uc_cart_checkout_review_form_validate($form, &$form_state) {

  $items = array();

  foreach ($form_state['uc_order']->products as $key => $value) {

    ksort($value->data['attributes']);

    if (!empty($value->data['attributes'])) {
      $items[$value->nid] = uc_attribute_stock_get_attributes($value->nid, TRUE);
    }
  }

  // get all items in the cart
  $cart_items = uc_cart_get_contents();

  $validation = TRUE;

  foreach ($cart_items as $key => $value) {
    $nid = $value->nid;

    if (isset($items[$nid])) {
      foreach ($items[$nid] as $item) {
        if ($item['combination'] == $value->data['attributes'] && $item['stock'] < $value->qty && $item['unlimited'] == 0) {
          $validation = FALSE;
        }
      }
    }
  }

  // if there is everything correct we can update (decrease) stock level
  if ($validation == TRUE) {
    foreach ($cart_items as $key => $value) {
      $nid = $value->nid;

      if (isset($items[$nid])) {
        foreach ($items[$nid] as $item) {
          if ($item['unlimited'] == 1) {

            $stock = $item['stock'] - $value->qty;
            $prod_stock = $value->qty;

            if ($stock < 0) {
              $stock = 0;
              $prod_stock = $item['stock'];
            }

            // Update attribute stock
            db_update('uc_attribute_stock')
            ->fields(array(
              'stock' => $stock
            ))
            ->condition('nid', $value->nid, '=')
            ->condition('combination', serialize($value->data['attributes']), '=')
            ->execute();

            // Update stock
            db_update('uc_product_stock')
              ->expression('stock', 'stock - :prod_stock', array(':prod_stock' => $prod_stock))
              ->condition('nid', $value->nid, '=')
              ->execute();

          }
          else {
            if ($item['combination'] == $value->data['attributes']) {
              $stock = $item['stock'] - $value->qty;
              $prod_stock = $value->qty;

              if ($stock < 0) {
                $stock = 0;
                $prod_stock = $item['stock'];
              }


              if ($stock <= $item['treshold']) {
                $stock_obj['sku'] = $value->model;
                $stock_obj['nid'] = $value->nid;
                $stock_obj['active'] = 1;
                $stock_obj['stock'] = $stock;
                $stock_obj['treshold'] = $item['treshold'];
                $obj = (object) $stock_obj;

                $email_from = _uc_stock_send_mail($form_state['uc_order'], $obj);
              }

              // Update attribute stock
              db_update('uc_attribute_stock')
              ->fields(array(
                'stock' => $stock
              ))
              ->condition('nid', $value->nid, '=')
              ->condition('combination', serialize($value->data['attributes']), '=')
              ->execute();

              // Update stock
              db_update('uc_product_stock')
                ->expression('stock', 'stock - :prod_stock', array(':prod_stock' => $prod_stock))
                ->condition('nid', $value->nid, '=')
                ->execute();

              if ($stock <= $item['treshold']) {
                $stock_obj['sku'] = $value->model;
                $stock_obj['stock'] = $stock;
                $stock_obj = (object) $stock_obj;
                $email_from = _uc_stock_send_mail($form_state['uc_order'], $stock);
              }
            }
          }
        }
      }
    }
  }
  else {
    drupal_set_message(t('Some items has been already sold out. Click Update cart to see more details'), 'error');
    drupal_goto('/cart');
  }
}

/**
 * Form validation handler for uc_attribute_stock_attribute_form().
 */
function uc_attribute_stock_attribute_form_validate($form, &$form_state) {

  if ($form_state['values']['my_attributes']['option_id'] !== "") {
    $option_id = $form_state['values']['my_attributes']['option_id'];

    $value = $form_state['values']['my_attributes']['data'][$option_id]['combination'];
    $stock = $form_state['values']['my_attributes']['data'][$option_id]['stock'];
    $unlimited = $form_state['values']['my_attributes']['data'][$option_id]['unlimited'];

    $items = uc_cart_get_contents();

    foreach ($items as $key => $cart_item) {
      if ($cart_item->nid == $form_state['values']['nid'] && $cart_item->data['attributes'] == $value) {
        $in_cart = $cart_item;
        break;
      }
    }

    if (!$unlimited && ($form_state['values']['qty'] > $stock || (isset($in_cart->qty) && ($form_state['values']['qty'] + $in_cart->qty) > $stock))) {

      $key = 'qty';
      $message = format_plural($stock, 'There is only 1 item available in the stock.', 'There are only @count items available in the stock.');
      form_set_error($key, $message);

      if (isset($in_cart->qty)) {
        $message = format_plural($in_cart->qty, 'There is already 1 item in your cart.', 'There are already @count items in your cart.');
        drupal_set_message($message);
      }

    }

    form_set_value($form['attributes'], $value, $form_state);
  }
}

/**
 * Returns specified combinations of attributes associated with a particular node.
 *
 * @param int $nid
 *   Id of the node.
 * @param bool $all
 *   If TRUE returns all attributes associated with the node, if FALSE returns attributes where stock level > 0.
 *
 * @return
 *   TRUE if the address is in a valid format, and FALSE if it isn't.
 */
function uc_attribute_stock_get_attributes($nid, $all = FALSE) {
  $select = db_select('uc_attribute_stock', 'uas');
  $select->condition('nid', $nid, '=');

  $conditions = db_or();
  $conditions->condition('unlimited', 1, '=');
  if ($all) {
    $conditions->condition('stock', 0, '>=');
  }
  else {
    $conditions->condition('stock', 0, '>');
  }
  $select->condition($conditions);

  $select->fields('uas');
  $result = $select->execute()->fetchAll();

  $data = array();

  foreach ($result as $row) {
    $my_row['combination'] = unserialize($row->combination);
    $my_row['stock'] = $row->stock;
    $my_row['treshold'] = $row->treshold;
    $my_row['uas_id'] = $row->id;
    $my_row['active'] = $row->active;
    $my_row['unlimited'] = $row->unlimited;

    $data[] = $my_row;
    $my_row = '';
  }
  return $data;
}
/**
 * Implements hook_node_delete().
 */
function uc_attribute_stock_node_delete($node) {
  db_delete('uc_attribute_stock')
    ->condition('nid', $node->nid)
    ->execute();
}