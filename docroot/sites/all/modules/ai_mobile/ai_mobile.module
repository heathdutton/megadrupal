<?php

/**
 * @file
 * This module allows to have mobile theme with separate subdomain.
 *
 * This way Drupal page caching works correctly.
 * Only phones are treated as mobile - tablets get regular site (which is good).
 * Lots of phones are recognized because it uses Mobile_detect.php library.
 */

/**
 * This is the domain that this module will treat as desktop/tablet domain.
 *
 * Usually its 'www.example.com'.
 * Domains without 'www' prefix are not supported.
 */
define('AI_MOBILE_DOMAIN_DESKTOP', $_SERVER['HTTP_HOST']);

/**
 * This is the domain the this module will treat as mobile domain.
 *
 * Usually its 'm.example.com'.
 */
if (preg_match('/www./i', $_SERVER['HTTP_HOST'])) {
  define('AI_MOBILE_DOMAIN_MOBILE', str_replace('www.', 'm.', $_SERVER['HTTP_HOST']));
}
else {
  define('AI_MOBILE_DOMAIN_MOBILE', 'm.example.com');
}

/**
 * Path to the Mobile_Detect.php library (with trailing slash).
 *
 * Relative to Drupal root directory.
 */
define('AI_MOBILE_DETECT', 'sites/all/libraries/mobile_detect/Mobile_Detect.php');

/**
 * Machine name of mobile theme.
 */
define('AI_MOBILE_THEME', 'theme_key_name');

/**
 * Is mobile site enabled (true/false).
 *
 * If false, mobile theme will never show.
 */
define('AI_MOBILE_PHONE_ENABLED', TRUE);

/**
 * Are tablet CSS styles enabled (true/false).
 *
 * If enabled, <body> tag will get 'tablet' class when user agent is tablet.
 */
define('AI_MOBILE_TABLET_ENABLED', TRUE);

/**
 * If to allow logged in users to access mobile site.
 *
 * If no, logged in users will always see desktop version.
 */
define('AI_MOBILE_SUPPORT_AUTH', FALSE);

/**
 * Development option: switch theme without domain redirect.
 *
 * If enabled will cause the theme to change based on device type without
 * redirecting to 'm' subdomain.
 *
 * This is useful while in development environment because you can use same url
 * to test both mobile and desktop versions but should be turned off on
 * production sites because switching theme without changing subdomain will
 * not work correctly when Drupal page cache is enabled.
 */
define('AI_MOBILE_NO_REDIRECT', FALSE);


/*
   .-----------------------------------------------------.
   |                      GENERAL                        |
   '-----------------------------------------------------'
*/


/**
 * Implements hook_menu().
 */
function ai_mobile_menu() {
  $items = array();

  // Define callback for ajax requests used to discover tablets with js.
  $items['ai_mobile/ajax'] = array(
    'page callback' => 'ai_mobile_ajax_callback',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/system/ai-mobile'] = array(
    'title' => 'Ai Mobile settings',
    'description' => 'Configure your website\'s support for mobile devices',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ai_mobile_settings_form'),
    'access arguments' => array('edit ai mobile settings'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 99,
    'file' => 'ai_mobile.admin.inc',
  );

  return $items;
}


/**
 * Implements hook_permission().
 */
function ai_mobile_permission() {
  return array(
    'edit ai mobile settings' => array(
      'title' => t('Edit Ai Mobile settings'),
      // 'description' => t(''),
    ),
  );
}


/**
 * Implements hook_custom_theme().
 *
 * Change theme to mobile if user is using 'm' subdomain to access the site.
 */
function ai_mobile_custom_theme() {
  // Put the actual logic in another function so this hook can be kept with
  // other hooks here while calculation function can be kept with
  // other similar functions.
  return ai_mobile_switch_theme();
}


/*
   .-----------------------------------------------------.
   |                     DETECTION                       |
   '-----------------------------------------------------'
*/


/**
 * Detect mobile phones but not tablets.
 *
 * @return bool
 *   True if device is phone, False otherwise.
 */
function ai_mobile_is_phone() {
  // Prepare variables.
  $ai_mobile_detect = variable_get('ai_mobile_detect', AI_MOBILE_DETECT);

  // We can't use drupal API for loading files since this function gets also
  // called for cached pages where common.inc is skipped.
  $file = DRUPAL_ROOT . '/' . $ai_mobile_detect;
  if (is_file($file)) {
    require_once $file;
    $detect = new Mobile_Detect();

    if ($detect->isMobile() && !$detect->isTablet()) {
      return TRUE;
    }
    else {
      return FALSE;
    }
  }
}


/**
 * Detect tablets but not phones.
 *
 * @return bool
 *   True if device is tablet, False otherwise.
 */
function ai_mobile_is_tablet() {
  // Prepare variables.
  $ai_mobile_detect = variable_get('ai_mobile_detect', AI_MOBILE_DETECT);

  $file = DRUPAL_ROOT . '/' . $ai_mobile_detect;
  if (is_file($file)) {
    require_once $file;
    $detect = new Mobile_Detect();

    if ($detect->isMobile() && $detect->isTablet()) {
      return TRUE;
    }
    else {
      return FALSE;
    }
  }
}


/**
 * Detect non-mobile device (computer).
 *
 * @return bool
 *   True if device is desktop, False if device is mobile.
 */
function ai_mobile_is_desktop() {
  // Prepare variables.
  $ai_mobile_detect = variable_get('ai_mobile_detect', AI_MOBILE_DETECT);

  $file = DRUPAL_ROOT . '/' . $ai_mobile_detect;
  if (is_file($file)) {
    require_once $file;
    $detect = new Mobile_Detect();

    if (!$detect->isMobile()) {
      return TRUE;
    }
    else {
      return FALSE;
    }
  }
}


/*
   .-----------------------------------------------------.
   |                SWITCHING SITE VERSION               |
   '-----------------------------------------------------'
*/


/**
 * Implements hook_boot().
 */
function ai_mobile_boot() {
  ai_mobile_switch_domain();
}


/**
 * Prints link for changing the type of displayed site.
 *
 * This is used for mobile users only.
 *
 * @return string
 *   A HTML link generated by l() function or empty string.
 */
function ai_mobile_switch_link() {
  // Prepare variables.
  $ai_mobile_phone_enabled = variable_get('ai_mobile_phone_enabled', AI_MOBILE_PHONE_ENABLED);
  $ai_mobile_theme = variable_get('ai_mobile_theme', AI_MOBILE_THEME);

  $output = '';

  // We only print switching link if device is phone and
  // mobile phones/site is enabled.
  if (ai_mobile_is_phone() && $ai_mobile_phone_enabled) {
    global $theme;

    // Negotiate link configuration.
    if ($theme == $ai_mobile_theme) {
      $desktop = 1;
      $text = t('Switch to full website');
    }
    else {
      $desktop = 0;
      $text = t('Switch to mobile website');
    }

    // Create link.
    $options = array(
      'query' => array('desktop' => $desktop),
      'attributes' => array('class' => array('mobile-switch-link')),
    );
    $protocol = ai_mobile_get_http_protocol();
    $path = drupal_get_path_alias(current_path());

    $output = l($text, $protocol . $_SERVER['HTTP_HOST'] . '/' . $path, $options);
  }

  return $output;
}


/**
 * Redirect mobile users to mobile subdomain.
 *
 * Or redirect desktop users to normal domain.
 * Also redirect mobile users to normal domain if they
 *  asked for it (get/cookie based).
 *
 * This function does redirect using header().
 */
function ai_mobile_switch_domain() {
  // Prepare variables.
  $ai_mobile_phone_enabled = variable_get('ai_mobile_phone_enabled', AI_MOBILE_PHONE_ENABLED);
  $ai_mobile_no_redirect = variable_get('ai_mobile_no_redirect', AI_MOBILE_NO_REDIRECT);
  $ai_mobile_domain_desktop = variable_get('ai_mobile_domain_desktop', AI_MOBILE_DOMAIN_DESKTOP);
  $ai_mobile_domain_mobile = variable_get('ai_mobile_domain_mobile', AI_MOBILE_DOMAIN_MOBILE);

  // Domain switching takes place only if mobile phones/site is
  // enabled and no_redirect flag is false.
  if ($ai_mobile_phone_enabled && !$ai_mobile_no_redirect) {
    $current_domain = $_SERVER['HTTP_HOST'];
    $is_phone = ai_mobile_is_phone();
    $redirect = FALSE;
    $custom_choice = ai_mobile_custom_choice();

    // If user has chosen to view full desktop site but he is on mobile site.
    if ($custom_choice == 'change') {
      $redirect = $ai_mobile_domain_desktop;
    }

    // Otherwise if use didn't ask for desktop automatically choose for them.
    elseif ($custom_choice == 'no') {
      // If mobile device is opening desktop version then go to mobile version.
      if ($is_phone && $current_domain == $ai_mobile_domain_desktop) {
        $redirect = $ai_mobile_domain_mobile;
      }
      // If desktop device is opening mobile version then go to desktop version.
      elseif (!$is_phone && $current_domain == $ai_mobile_domain_mobile) {
        $redirect = $ai_mobile_domain_desktop;
      }
    }

    // If redirect is needed then do it now.
    if ($redirect) {
      $protocol = ai_mobile_get_http_protocol();
      header('Location: ' . $protocol . $redirect . $_SERVER['REQUEST_URI']);
    }
  }
}


/**
 * Switch theme for mobile users.
 *
 * @return string|false
 *   Theme key name to switch to if switching to mobile site,
 *   or false if not changing theme.
 */
function ai_mobile_switch_theme() {
  // Prepare variables.
  $ai_mobile_phone_enabled = variable_get('ai_mobile_phone_enabled', AI_MOBILE_PHONE_ENABLED);
  $ai_mobile_support_auth = variable_get('ai_mobile_support_auth', AI_MOBILE_SUPPORT_AUTH);
  $ai_mobile_domain_mobile = variable_get('ai_mobile_domain_mobile', AI_MOBILE_DOMAIN_MOBILE);
  $ai_mobile_theme = variable_get('ai_mobile_theme', AI_MOBILE_THEME);
  $ai_mobile_no_redirect = variable_get('ai_mobile_no_redirect', AI_MOBILE_NO_REDIRECT);

  $theme = FALSE;

  // We only check for switching theme if device is phone
  // and mobile phones/site is enabled.
  if (ai_mobile_is_phone() && $ai_mobile_phone_enabled) {
    $auth = user_is_logged_in();

    // Always switch theme for anonymous users, but for authenticated switch
    // only if they were set to be supported by the mobile site.
    if (!$auth || ($auth && $ai_mobile_support_auth)) {

      // Domain based theme change (default).
      if ($_SERVER['HTTP_HOST'] == $ai_mobile_domain_mobile) {
        return $ai_mobile_theme;
      }
      // Theme change without redirect to subdomain (for development only).
      elseif ($ai_mobile_no_redirect) {
        // Based on device device type.
        $theme = $ai_mobile_theme;
        // Allow user choice to alter (if user selected custom choice then
        // ai_mobile_custom_choice() will return anything else than 'no'
        // which means user wanted regular theme).
        if (ai_mobile_custom_choice() != 'no') {
          $theme = FALSE;
        }
      }

    }
  }

  return $theme;
}


/**
 * Check if user has chosen which site he wants.
 *
 * This function is also responsible for storing cookie.
 *
 * @return string
 *   'no' if user didn't selected which site he wants
 *   'change' if user selected desktop while he is on mobile site and redirect
 *     should happen
 *   'stay' if user selected desktop site but he is on desktop site already
 */
function ai_mobile_custom_choice() {
  // Prepare variables.
  $ai_mobile_domain_mobile = variable_get('ai_mobile_domain_mobile', AI_MOBILE_DOMAIN_MOBILE);

  $current_domain = $_SERVER['HTTP_HOST'];

  $result = 'no';

  // If there are some setting about what the user wants.
  if ((isset($_GET['desktop']) && $_GET['desktop'] == '1') ||
      (isset($_COOKIE['desktop']) && $_COOKIE['desktop'] == 1)) {

    // User wanted to be on desktop site - return '3'.
    $result = 'stay';

    // If mobile device is opening mobile version then go to desktop version.
    if ($current_domain == $ai_mobile_domain_mobile) {
      $result = 'change';
    }

    // If he selected desktop just now then save it.
    if (isset($_GET['desktop']) && $_GET['desktop'] == '1') {
      setcookie('desktop', 1, time() + (60 * 60 * 24 * 7), '/', NULL);
    }

    // If he selected mobile just now then remove that he wanted desktop.
    elseif (isset($_GET['desktop']) && $_GET['desktop'] == '0') {
      setcookie('desktop', '', time() - 3600, '/', NULL);
      $result = 'no';
    }
  }

  return $result;
}


/*
   .-----------------------------------------------------.
   |                  TABLET SUPPORT                     |
   '-----------------------------------------------------'
*/


/**
 * Section with functions for supporting tablets.
 *
 * Because tablets use same site as desktops we can't attach sometimes helpful
 * tablet.css through PHP because it won't work on cached pages.
 * The solution to this problem is applying 'tablet' css class to body
 * which happens via AJAX for cached pages. For non-cached pages, that is
 * for authenticated users, 'tablet' class is being added via
 * hook_preprocess_html.
 */


/**
 * Implements hook_page_build().
 *
 * If the user is anonymous and tablet support is enabled
 * add needed scripts to append 'tablet' css class to <body>.
 */
function ai_mobile_page_build() {
  // Prepare variables.
  $ai_mobile_tablet_enabled = variable_get('ai_mobile_tablet_enabled', AI_MOBILE_TABLET_ENABLED);

  if ($ai_mobile_tablet_enabled && !user_is_logged_in()) {
    // Attach drupal.ajax to every page.
    drupal_add_library('system', 'drupal.ajax');
    // Attach js calling custom ajax callback on page load.
    drupal_add_js(drupal_get_path('module', 'ai_mobile') . '/ai_mobile.js');
  }
}


/**
 * Implements hook_preprocess_html().
 *
 * If the user is authenticated and tablet support is enabled
 * simply append 'tablet' css class to <body>.
 */
function ai_mobile_preprocess_html(&$variables) {
  // Prepare variables.
  $ai_mobile_tablet_enabled = variable_get('ai_mobile_tablet_enabled', AI_MOBILE_TABLET_ENABLED);

  if ($ai_mobile_tablet_enabled && user_is_logged_in()) {
    if (ai_mobile_is_tablet()) {
      $variables['classes_array'][] = 'tablet';
    }
  }
}


/**
 * Ajax menu callback.
 *
 * Sets additional <body> css class stating if the client is using tablet.
 */
function ai_mobile_ajax_callback($type = 'ajax') {
  // Prepare variables.
  $ai_mobile_tablet_enabled = variable_get('ai_mobile_tablet_enabled', AI_MOBILE_TABLET_ENABLED);

  // This is js callback only and runs only if tablet check is enabled.
  if ($type == 'ajax' && $ai_mobile_tablet_enabled) {
    // If it is tablet.
    if (ai_mobile_is_tablet()) {
      $commands = array();
      $commands[] = ajax_command_invoke('body', 'addClass', array('tablet'));
      $page = array('#type' => 'ajax', '#commands' => $commands);
      ajax_deliver($page);
    }
    // If it's not tablet.
    else {
      drupal_exit();
    }
  }
  // If not ajax called or function is disabled.
  else {
    drupal_exit();
  }
}


/*
   .-----------------------------------------------------.
   |                  HELPRER FUNCTIONS                  |
   '-----------------------------------------------------'
*/

/**
 * Get http protocol.
 *
 * @return string
 *   'http://' or 'https://' depending on which one is being used.
 */
function ai_mobile_get_http_protocol() {
  $s = empty($_SERVER['HTTPS']) ? '' : (strtolower($_SERVER['HTTPS']) == 'on') ? 's' : '';
  return 'http' . $s . '://';
}
