<?php

/**
 * Implements hook_entity_info().
 */
function cm_airing_conflict_entity_info() {
  $return = array(
    'airingconflict' => array(
      'label' => t('Airing Conflict'),
      'entity class' => 'AiringConflict',
      'controller class' => 'AiringConflictController',
      'base table' => 'cm_airing_conflict',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'airing_conflict_id',
      ),
       // Attach bundles - i.e. alternative configurations of fields associated with a main entity.
      'bundles' => array(
      'airingconflict' => array(
        'label' => 'Airing Conflict',
        // Information below is used by the Field UI - they "attach" themselves here and lets us
        // do the standard field management that all the core entities enjoy.
        'admin' => array(
          'path' => 'admin/structure/cm-airing-conflict/manage',
          'access arguments' => array('administer cm_airing_conflict'),
        ),
      ),
    ),
      'load hook' => 'cm_airing_conflict_load',
      'view modes' => array(
        'full' => array(
          'label' => t('Default'),
          'custom settings' => FALSE,
        ),
      ),
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
      'module' => 'cm_airing_conflict',
      'access callback' => 'cm_airing_conflict_access',
    ),
  );

  return $return;
}


/**
 * Implements hook_menu().
 */
function cm_airing_conflict_menu() {
  $items = array();

  $items['airing-conflict/add'] = array(
    'title' => 'Add Airing Conflict',
    'page callback' => 'cm_airing_conflict_add',
    'access arguments' => array('administer cm_airing_conflict'),
  );

  $airing_conflict_uri = 'airing-conflict/%cm_airing_conflict';
  $airing_conflict_uri_argument_position = 1;

  $items[$airing_conflict_uri] = array(
    'title callback' => 'entity_label',
    'title arguments' => array('airingconflict', $airing_conflict_uri_argument_position),
    'page callback' => 'cm_airing_conflict_view',
    'page arguments' => array($airing_conflict_uri_argument_position),
    'access callback' => 'entity_access',
    'access arguments' => array('view', 'airingconflict', $airing_conflict_uri_argument_position),
    'file' => 'cm_airing_conflict.pages.inc',
  );

  $items[$airing_conflict_uri . '/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items[$airing_conflict_uri . '/delete'] = array(
    'title' => 'Delete airing',
    'title callback' => 'cm_airing_conflict_label',
    'title arguments' => array($airing_conflict_uri_argument_position),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cm_airing_conflict_delete_form', $airing_conflict_uri_argument_position),
    'access callback' => 'entity_access',
    'access arguments' => array('edit', 'airingconflict', $airing_conflict_uri_argument_position),
  );

  $items[$airing_conflict_uri . '/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cm_airing_conflict_form', $airing_conflict_uri_argument_position),
    'access callback' => 'entity_access',
    'access arguments' => array('edit', 'airingconflict', $airing_conflict_uri_argument_position),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  
  // This provides a place for Field API to hang its own
  // interface and has to be the same as what was defined
  // in airing_entity_info() above.
  $items['admin/structure/airing-conflict/manage'] = array(
    'title' => 'Airing Conflicts',
    'description' => 'Manage Airing Conflict Entity Structure',
    'page callback' => 'cm_airing_conflict_admin_page',
    'access arguments' => array('administer cm_airing_conflict'),
    'weight' => -50,
  );
  
  return $items;
}

/**
 * Implements hook_permission().
 */
function cm_airing_conflict_permission() {
  $permissions = array(
    'administer cm_airing_conflict' => array(
      'title' => t('Administer Airings Conflicts'),
      'description' => t('Allows users to configure airing fields.'),
      'restrict access' => TRUE,
    ),
  );

  return $permissions;
}


/**
 * Implements hook_entity_property_info_alter().
 */
function cm_airing_conflict_entity_property_info_alter(&$info) {
  $properties = &$info['cm_airing_conflict']['properties'];
  $properties['created'] = array(
    'label' => t("Date created"),
    'type' => 'date',
    'description' => t("The date the node was posted."),
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer cm_airing_conflict',
    'schema field' => 'created',
  );
  $properties['changed'] = array(
    'label' => t("Date changed"),
    'type' => 'date',
    'schema field' => 'changed',
    'description' => t("The date the node was most recently updated."),
  );
  $properties['uid'] = array(
    'label' => t("Author"),
    'type' => 'user',
    'description' => t("The author of the airing conflict."),
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer cm_airing_conflict',
    'required' => TRUE,
    'schema field' => 'uid',
  );
}


/*******************************************************************************
 ********************************* Airing API's **********************************
 ******************************************************************************/

/**
 * Access callback for airing.
 */
function cm_airing_conflict_access($op, $airingconflict, $account = NULL, $entity_type = NULL) {

  global $user;

  if (!isset($account)) {
    $account = $user;
  }
  
  switch ($op) {
    case 'create':
      return user_access('administer cm_airing_conflict', $account);
    case 'view':
      return user_access('administer cm_airing_conflict', $account);
    case 'edit':
      return user_access('administer cm_airing_conflict', $account);
  }
}

/**
 * Load a airing.
 */
function cm_airing_conflict_load($airing_conflict_id, $reset = FALSE) {
  $airingconflicts = cm_airing_conflict_load_multiple(array($airing_conflict_id), array(), $reset);
  return reset($airingconflicts);
}

/**
 * Load multiple airings based on certain conditions.
 */
function cm_airing_conflict_load_multiple($airing_conflict_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('airingconflict', $airing_conflict_ids, $conditions, $reset);
}

/**
 * Save airing.
 */
function cm_airing_conflict_save($airingconflict) {
  entity_save('airingconflict', $airingconflict);
}

/**
 * Delete single airing.
 */
function cm_airing_conflict_delete($airingconflict) {
  entity_delete('airingconflict', entity_id('airingconflict' ,$airingconflict));
}

/**
 * Delete multiple airings.
 */
function cm_airing_conflict_delete_multiple($airing_conflict_ids) {
  entity_delete_multiple('airingconflict', $airing_conflict_ids);
}


/**
 * Airing Form.
 */
function cm_airing_conflict_form($form, &$form_state, $airingconflict) {

  $form_state['airingconflict'] = $airingconflict;

  $form['uid'] = array(
    '#type' => 'value',
    '#value' => $airingconflict->uid,
  );
  
  field_attach_form('airingconflict', $airingconflict, $form, $form_state);

  $submit = array();
  if (!empty($form['#submit'])) {
    $submit += $form['#submit'];
  }

  $form['actions'] = array(
    '#weight' => 100,
  );

  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save Airing Conflict'),
    '#submit' => $submit + array('cm_airing_conflict_form_submit'),
  );

  // Show Delete button if we edit airing.
  $airing_conflict_id = entity_id('airingconflict' ,$airingconflict);
  if (!empty($airing_conflict_id) && cm_airing_conflict_access('edit', $airingconflict)) {
    $form['actions']['delete'] = array(
      '#type' => 'submit',
      '#value' => t('Delete'),
      '#submit' => array('cm_airing_conflict_form_submit_delete'),
    );
  }

  $form['#validate'][] = 'cm_airing_conflict_form_validate';

  return $form;
}

function cm_airing_conflict_form_validate($form, &$form_state) {
  // ADD ANY VALIDATION HERE
}

/**
 * Airing submit handler.
 */
function cm_airing_conflict_form_submit($form, &$form_state) {

  $airingconflict = $form_state['airingconflict'];

  entity_form_submit_build_entity('airingconflict', $airingconflict, $form, $form_state);

  cm_airing_conflict_save($airingconflict);

  $airing_conflict_uri = entity_uri('airingconflict', $airingconflict);

  $form_state['redirect'] = $airing_conflict_uri['path'];

  drupal_set_message(t('Airing Conflict %title saved.', array('%title' => entity_label('airingconflict', $airingconflict))));
}

function cm_airing_conflict_form_submit_delete($form, &$form_state) {
  $airingconflict = $form_state['airingconflict'];
  $airing_conflict_uri = entity_uri('airingconflict', $airingconflict);
  $form_state['redirect'] = $airing_conflict_uri['path'] . '/delete';
}

/**
 * Delete confirmation form.
 */
function cm_airing_conflict_delete_form($form, &$form_state, $airingconflict) {
  $form_state['airingconflict'] = $airingconflict;
  // Always provide entity id in the same form key as in the entity edit form.
  //$form['airing_type_id'] = array('#type' => 'value', '#value' => entity_id('cm_airing_conflict' ,$airing));
  $airing_conflict_uri = entity_uri('airingconflict', $airingconflict);
  return confirm_form($form,
    t('Are you sure you want to delete airing conflict %title?', array('%title' => entity_label('airingconflict', $airingconflict))),
    $airing_conflict_uri['path'],
    t('This action cannot be undone.'),
    t('Delete'),
    t('Cancel')
  );
}

/**
 * Delete form submit handler.
 */
function cm_airing_conflict_delete_form_submit($form, &$form_state) {
  $airingconflict = $form_state['airingconflict'];
  cm_airing_conflict_delete($airingconflict);

  drupal_set_message(t('Airing Conflict %title deleted.', array('%title' => entity_label('cm_airing_conflict', $airingconflict))));

  $form_state['redirect'] = '<front>';
}


/**
 * Just provide some airing info for the entity administration page.
 * This can be expanded to add more information / a list of all created entites, etc.
 */
function cm_airing_conflict_admin_page() {  
  drupal_goto('admin/structure/cm-airing-conflict/manage/fields');
}

/**
 * Creates an airing entity for us - simply intializing the main variables and
 * sending us to a form to add in the rest.
 */
function cm_airing_conflict_add() {
  $airingconflict = entity_create('airingconflict', array('type' => 'airingconflict'));
  return drupal_get_form('cm_airing_conflict_form', $airingconflict);
}

/**
 * Implementing the uri callback defined
 */
function cm_airing_conflict_uri($airingconflict) {
  dsm($airingconflict);
  return array(
    'path' => 'airing-conflict/' . $airingconflict->airing_conflict_id,
  );
}


/**
 *
 * Implementation of hook_entity_presave()
 *
 * Run through a ruleset to set the airing endtime based on several criteria
 */

function cm_airing_conflict_entity_presave($airingconflict, $type) {

  if ('airingconflict' != $type) {
    return;
  }
    
}

/**
 *  Implementation of hook_entity_view()
 */
function cm_airing_conflict_entity_view($airingconflict, $type, $view_mode, $langcode) {

  if ('airingconflict' != $type) {
    return;
  }
  
}


