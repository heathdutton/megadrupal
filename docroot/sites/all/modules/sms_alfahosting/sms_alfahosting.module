<?php

/**
 * @file
 * Adds support for sending SMS messages using the Alfahosting gateway.
 */

/**
 * Implements hook_gateway_info().
 */
function sms_alfahosting_gateway_info() {
  return array(
    'alfahosting' => array(
      'name' => 'Alfahosting',
      'configure form' => 'sms_alfahosting_admin_form',
      'send' => 'sms_alfahosting_send_sms',
    ),
  );
}

/**
 * Callback for the configuration form
 */
function sms_alfahosting_admin_form($configuration) {
  $form['sms_alfahosting_user'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#description' => t('The username of your Alfahosting account.'),
    '#size' => 30,
    '#maxlength' => 255,
    '#default_value' => $configuration['sms_alfahosting_user'],
    '#required' => TRUE,
  );
  $form['sms_alfahosting_key'] = array(
    '#type' => 'textfield',
    '#title' => t('API-Key'),
    '#description' => t('Your personal API-Key.'),
    '#size' => 30,
    '#maxlength' => 64,
    '#default_value' => $configuration['sms_alfahosting_key'],
    '#required' => TRUE,
  );
  $form['sms_alfahosting_sender'] = array(
    '#type' => 'textfield',
    '#title' => t('Sender'),
    '#description' => t('Sender identifier. 11 characters (A-Z, 0-9, [ +._-]) or 16 digits'),
    '#size' => 30,
    '#maxlength' => 64,
    '#default_value' => $configuration['sms_alfahosting_sender'],
    '#required' => TRUE,
  );

  return $form;
}

/**
 * Validates the submission of the configuration form.
 */
function sms_alfahosting_admin_form_validate($form, &$form_state) {
  if (form_get_errors()) {
    return;
  }

  $config = $form_state['values'];
  // We use a fake hardcoded phone number for an call to the Gateway API.
  $xml = sms_alfahosting_format_xml('+4934567890123', 'ConfigValidation', $config + array('fake' => TRUE));

  $response = sms_alfahosting_process_request($xml);

  if (!$response['status']) {
    switch (intval($response['variables']['@errno'])) {
      case 202:
        form_set_error('sms_alfahosting_sender', t('Sender may only contain 16 digits or 11 characters'));
        break;

      case 205:
        form_set_error('sms_alfahosting_user', t('Authentification failed.'));
        form_set_error('sms_alfahosting_key', t('Please check your username and API-Key'));
        break;

      default:
        form_set_error('', t($response['message'], $response['variables']) . '<br/>' . t('Unexpected error during the configuration validation. Please try again later.'));
    }
  }
}

/**
 * Callback for sending messages.
 */
function sms_alfahosting_send_sms($number, $message) {
  $gateway = sms_gateways('gateway', 'alfahosting');
  $config = $gateway['configuration'];

  $xml = sms_alfahosting_format_xml($number, $message, $config);

  return sms_alfahosting_process_request($xml);
}

/**
 * Formats the XML for the API request
 *
 * @param int $number
 *   The destination number
 * @param string  $message
 *   The text of the message
 * @param array $config
 *   The gateway configuration
 *
 * @return string
 *   Formated XML to be used in the API request
 */
function sms_alfahosting_format_xml($number, $message, $config) {

  // Build XML.
  $xml = new SimpleXMLElement('<alfasms></alfasms>');
  $xml->addAttribute('user', $config['sms_alfahosting_user']);
  $xml->addAttribute('key', $config['sms_alfahosting_key']);
  $data = $xml->addChild('data');
  $data->addChild('sender', html_entity_decode($config['sms_alfahosting_sender'], ENT_COMPAT, 'UTF-8'));
  $data->addChild('receiver', html_entity_decode($number, ENT_COMPAT, 'UTF-8'));
  $data->addChild('message', base64_encode(utf8_encode($message)));

  if ($config['fake']) {
    $data->addChild('fake',	1);
  }

  return $xml->asXML();
}

/**
 * Sends the request to Alfahosting API
 *
 * @param string  $xml
 *   Formed XML body to be sent in the POST request
 *
 * @return array
 *   Array indicating the result.
 */
function sms_alfahosting_process_request($xml) {
  $http_result = drupal_http_request('https://sms.alfahosting.de/api/', array(), 'POST', $xml);

  // Check for HTTP errors.
  if ($http_result->error) {
    return array(
      'status' => FALSE,
      'message' => 'An error occured during the HTTP request: @code @error',
      'variables' => array('@code' => $http_result->code, '@error' => $http_result->error));
  }

  // Check for API errors.
  if ($http_result->data) {
    $xml_object = @simplexml_load_string($http_result->data);

    // Check for errors returned by the Gateway.
    if (is_object($xml_object) && $xml_object->success) {
      return array('status' => TRUE);
    }
    elseif (is_object($xml_object) && $xml_object->error) {
      return array(
        'status' => FALSE,
        'message' => 'The Gateway respond with an error: @errno - @error',
        'variables' => array(
          '@errno' => intval($xml_object->error->code),
          '@error' => strval($xml_object->error->message)));
    }
  }

  return array('status' => FALSE, 'message' => 'Unexpected error');
}
