<?php
/**
 * @file
 * Handles installation steps for slim_time
 *
 * @ingroup func_search
 * @{
 */

/**
 * Implements hook_requirements().
 *
 * Checks installation requirements and do status reporting.
 * http://api.drupal.org/api/function/hook_requirements
 *
 * @param phase 'install' or 'runtime':
 * @return A keyed array of requirements
 */
function slim_time_requirements($phase) {
  $reqs = array();
  $t = get_t();
  if ($phase == 'runtime') {
    $info = libraries_load('slim_time');

    $reqs['slim_time'] = array(
      'title' => check_plain($info['name']),
      'value' => check_plain($info['version']),
      'description' => $t('Successfully loaded library from %path', array(
        '%path' => libraries_get_path('slim_time'),
      )),
      'severity' => REQUIREMENT_OK,
    );

    if (version_compare($info['version'], SLIM_TIME_LIBRARY_LATEST, '<')) {
      $reqs['slim_time']['value'] = $t('Version outdated!');
      $reqs['slim_time']['description'] = $t('There is a newer version of the jquery Slim Time plugin available; download it <a href="!url">from here</a>.', array('!url' => url('http://www.intheloftstudios.com/packages/jquery/jquery.slim_time')));
      $reqs['slim_time']['severity'] = REQUIREMENT_WARNING;
    }

    if (!$info['installed']) {
      $reqs['slim_time']['value'] = $t('Not Found!');
      $reqs['slim_time']['description'] = $t('The Slim time library is missing; see README for installation instructions.');
      $reqs['slim_time']['severity'] = REQUIREMENT_ERROR;
    }
    if (!$info['loaded']) {
      $reqs['slim_time']['value'] = $t('Not Loaded!');
      $reqs['slim_time']['description'] = $t('The Slim time library was found but not loaded; see README for installation instructions.');
      $reqs['slim_time']['severity'] = REQUIREMENT_ERROR;
    }
  }
  return $reqs;
}

/**
 * Namespace the field instance settings array with slim_time for consistency with the fapi element.
 */
function slim_time_update_7101(&$sandbox) {
  $items = array();

  try {

    $instances = field_info_instances();
    foreach ($instances as $entity_type => $bundles) {
      foreach ($bundles as $bundle_type => $fields) {
        foreach ($fields as $field_name => $info) {
          if ($info['widget']['module'] !== 'slim_time') {
            continue;
          }

          $settings = &$info['widget']['settings'];
          
          foreach (array('fuzzy', 'default', 'assume', 'colon', 'seconds') as $option) {              
            // Migrate the old settings to the new.
            $legacy = NULL;
            if (isset($settings[$option])) {
              $legacy = $settings[$option];
            }
            elseif (isset($settings['slim_time'][$options])) {
              $legacy = $settings['slim_time'][$options];
            }

            if (!is_null($legacy)) {
              $settings['slim_time_' . $option] = $legacy;
            }

            // Remove the legacy option keys.
            unset($settings[$option]);
            unset($settings['slim_time']);
          }

          field_update_instance($info);
          $items[] = t("Updated settings for: @entity.@bundle.@field", array(
            '@entity' => $info['entity_type'],
            '@bundle' => $info['bundle'],
            '@field' => $info['label'],
          ));
        }
      }
    } 
  } catch (Exception $e) {
    throw new DrupalUpdateException($e->getMessage());
  }

  // Generate feedback to admin
  $build = count($items) === 1
  ? array('#markup' => reset($items))
  : array('#theme' => 'item_list', '#type' => 'ol', '#items' => $items);

  return drupal_render($build);
}
