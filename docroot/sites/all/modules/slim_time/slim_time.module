<?php
/**
 * @file
 * Base file for the slim_time module.
 *
 * @defgroup slim_time Slim Time
 * @{
 */

/**
 * @var SLIM_TIME_LIBRARY_LATEST
 *
 * Defines the latest library version of jquery.slim_time supported by this
 * wrapper.  If this number is greater than the installed library, there
 * will appear an upgrade alert in the status report.
 */
define('SLIM_TIME_LIBRARY_LATEST', '1.3.8');

/**
 * Implements hook_element_info().
 *
 * Defines a FAPI element of type slim_time_textfield, all custom settings
 * are prefixed by '#slim_time...'.
 */
function slim_time_element_info() {
  $types = array();
  $types['slim_time_textfield'] = array(
    '#input' => TRUE,
    '#tree' => TRUE,
    '#slim_time_fuzzy' => TRUE,
    '#slim_time_default' => 12,
    '#slim_time_assume' => 'am',
    '#slim_time_colon' => 'optional',
    '#slim_time_seconds' => FALSE,
    '#process' => array('slim_time_element_process'),
    '#element_validate' => array('slim_time_element_validate'),
  );

  return $types;
}

/**
 * Implements hook_widget_info().
 *
 * Defines the widget and provides the default widget settings.
 */
function slim_time_field_widget_info() {
  $defaults = slim_time_element_info();
  $defaults = $defaults['slim_time_textfield'];
  return array(
    'slim_time_textfield' => array(
      'label' => t('Slim time'),
      'description' => t('Minimalist widget for time entry by In the Loft Studios'),
      'field types' => array('text'),
      'settings' => array(
        'slim_time_fuzzy' => $defaults['#slim_time_fuzzy'],
        'slim_time_default' => $defaults['#slim_time_default'],
        'slim_time_assume' => $defaults['#slim_time_assume'],
        'slim_time_colon' => $defaults['#slim_time_colon'],
        'slim_time_seconds' => $defaults['#slim_time_seconds'],
        'size' => _slim_time_get_max_length(),
      ),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
  );
}

/**
 * Processes an slim time FAPI element, adding library and setting js.
 */
function slim_time_element_process($element, &$form_state, $form) {
  $element = drupal_array_merge_deep(element_info('textfield'), $element);
  libraries_load_files(libraries_load('slim_time'));
  $element['#attached']['js'][] =  array(
    'type' => 'file', 
    'data' => drupal_get_path('module', 'slim_time') . '/slim_time.js',
  );

  // Provides the settings to the client-side JS.
  $element['#attached']['js'][] =  array(
    'type' => 'setting', 
    'data' => array('slimTime' => array(
      $element['#id'] => array(
        'fuzzy' => $element['#slim_time_fuzzy'],
        'default' => $element['#slim_time_default'],
        'assume' => $element['#slim_time_assume'],
        'colon' => $element['#slim_time_colon'],
        'seconds' => $element['#slim_time_seconds'],
        'required' => $element['#required'],
      ),
    )),
  );

  return $element;
}

/**
 * Returns a PHP SlimTime object using an element's settings.
 *
 * This is the PHP equivalent of the JS object.
 *
 * @param  array $element
 *
 * @return \AKlump\SlimTime\SlimTime
 */
function slim_time_element_object($element) {
  $options = array(
    'fuzzy' => $element['#slim_time_fuzzy'],
    'default' => $element['#slim_time_default'],
    'assume' => $element['#slim_time_assume'],
    'colon' => $element['#slim_time_colon'],
    'seconds' => $element['#slim_time_seconds'],
    'required' => $element['#required'],
  );
  return new \AKlump\SlimTime\SlimTime($options);  
}

/**
 * Validates a slim_time element.
 */
function slim_time_element_validate(&$element, $form_state) {
  if (!slim_time_element_object($element)->validate($element['#value'])) {
    form_error($element, t('@title is not recognized as time.', array('@title' => $element['#title'])));
  }
}

/**
 * Implements hook_field_widget_settings_form().
 */
function slim_time_field_widget_settings_form($field, $instance) {
  module_load_include('inc', 'slim_time', 'includes/slim_time.admin');

  return _slim_time_field_widget_settings_form($field, $instance);
}

/**
 * Implements hook_field_widget_form().
 *
 * Modifies the element using the widget and applies the instance settings
 * to the element array.
 */
function slim_time_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  
  $settings = $instance['widget']['settings'];
  
  // The reason for this is that when the user is switching settings, the widget
  // must be most permissive to allow for all possible default values.
  // @todo Turn this into a js solution that changes on the fly.
  $is_config_form = $form_state['build_info']['form_id'] === 'field_ui_field_edit_form';
  if ($is_config_form) {
    $settings['maxlength'] = _slim_time_get_max_length();
    $settings['slim_time_seconds']   = TRUE;
  }
  else {
    $settings['maxlength'] = _slim_time_get_max_length($settings);
  }

  // slim_time_element_info() . $types['slim_time_textfield']
  $element += array(
    '#type' => 'slim_time_textfield', 
    '#default_value' => empty($items[$delta]['value']) ? '' : $items[$delta]['value'],
    '#size' => $settings['size'],
    '#maxlength' => $settings['maxlength'],
    '#slim_time_fuzzy' => $settings['slim_time_fuzzy'],
    '#slim_time_default' => $settings['slim_time_default'],
    '#slim_time_assume' => $settings['slim_time_assume'],
    '#slim_time_colon' => $settings['slim_time_colon'],
    '#slim_time_seconds' => $settings['slim_time_seconds'],
    
  );

  return array('value' => $element);  
}

/**
 * Returns the maximum length for a value based on settings.
 *
 * If settings is not sent then the maximum length needed to support all
 * currently known settings will be returned.
 *
 * @param  array|NULL $settings Omit this for max needed.
 *
 * @return int
 */
function _slim_time_get_max_length($settings = NULL) {
  // 12:45:23am
  $length = 10;
  if (isset($settings)) {
    switch ($settings['slim_time_default']) {
      case 24:
        // 12:45:23
        $length -= 2;
    }

    // 12:45am 12:45
    if (!$settings['slim_time_seconds']) {
      $length -= 3;
    }
  }

  return $length;
}

/**
 * Implements hook_form_alter().
 */
function slim_time_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id) {
  if ($is_slim_time = $form_state['build_info']['args'][0]['widget']['module'] === 'slim_time') {
    $form['field']['settings']['max_length']['#description'] .= ' ' . _slim_time_max_length_addendum();    
    form_load_include($form_state, 'inc', 'slim_time', 'admin');
    $form['#validate'][] = '_slim_time_field_widget_settings_form_validate';
  }
}

/**
 * Implements hook_form_alter().
 */
function slim_time_form_field_ui_field_settings_form_alter(&$form, &$form_state, $form_id) {
  if ($is_slim_time = $form_state['build_info']['args'][0]['widget']['module'] === 'slim_time') {
    $form['field']['settings']['max_length']['#description'] .= ' ' . _slim_time_max_length_addendum();  
    form_load_include($form_state, 'inc', 'slim_time', 'admin');
    $form['#validate'][] = '_slim_time_field_widget_settings_form_validate';
  }
}

function _slim_time_max_length_addendum() {
  $message = t('<strong>The Slim Time module recommends a minimum length of %count to support all settings.</strong>', array(
      // Called with no args gives our maximum known needed for all settings.
      '%count' => _slim_time_get_max_length(),
  ));  

  return $message;
}

/**
 * Implements hook_libraries_info().
 */
function slim_time_libraries_info() {
  // Expected to be extracted into 'sites/all/libraries/slim_time'.
  $libraries['slim_time'] = array(
    'name' => 'Slim time',
    'vendor url' => 'http://www.intheloftstudios.com/packages/jquery/jquery.slim_time',
    'download url' => 'http://www.intheloftstudios.com/packages/jquery/jquery.slim_time',
    'version arguments' => array(
      'file' => 'slim_time.info',
      'pattern' => '/version ?= ?"?([\d.]+)"?/',
      'lines' => 10,
    ),
    'files' => array(
      'js' => array(
       'dist/jquery.slim_time.min.js',
      ),
      'php' => array(
        'dist/vendor/autoload.php',
      ),
    ),
  );

  return $libraries;
}
