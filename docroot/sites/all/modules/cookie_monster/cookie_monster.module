<?php
/**
 * @file
 * Provides an api and rules for creating 
 * flexible and secure cookies that can store
 * state data on the client.
 */

/**
 * Implements hook_menu().
 */
function cookie_monster_menu() {
  $items['admin/config/system/cookie-monster'] = array(
    'title' => t('Cookie Monster Settings'),
    'description' => t('Set the secret for your cookie monster encryption'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cookie_monster_admin_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/cookie_monster.admin.inc',
  );
  return $items;
}

/**
 * Returns whether a cookie exists.
 * @param string $id
 *   The cookie ID.
 * @return boolean
 *   Returns whether a cookie exists.
 */
function cookie_monster_cookie_exists($id) {
  if (isset($_SESSION['cookie_monster'][$id])) {
    return TRUE;
  }
  if (!cookie_monster_authenticate_cookie($id)) {
    return FALSE;
  }
  return TRUE;
}

/**
 * Callback to authenticate a cookie.
 * @param string $id
 *   The cookie ID.
 * @return
 *   Returns the data from a cookie if passes
 *   validation, or FALSE if the cookie does
 *   not exist or does not validate.
 */
function cookie_monster_authenticate_cookie($id) {
  if (empty($_COOKIE[$id])) {
    return FALSE;
  }

  // Get the cookie contents.
  list($expiration, $hmac, $data) = explode('|', filter_xss($_COOKIE[$id]));

  // Check that the cookie is not expired.
  if ($expiration < time()) {
    return FALSE;
  }

  // Authenticate against the hmac.
  $secret = variable_get('cookie_monster_secret', NULL);
  $key = hash_hmac('md5', ip_address() . $expiration, $secret);
  $hash = hash_hmac('md5', ip_address() . $expiration, $key);
  if ($hmac != $hash) {
    return FALSE;
  }

  return $data;
}

/**
 * Encrypts a cookie and adds authentication data.
 * @param array $data
 *   The data to put in the cookie.
 */
function cookie_monster_encrypt($data) {
  // Create encrypted text and authentication data.
  $expiration = time() + variable_get('cookie_monster_expiration', 86400);
  $secret = variable_get('cookie_monster_secret', NULL);
  $key = hash_hmac('md5', ip_address() . $expiration, $secret);
  $hash = hash_hmac('md5', ip_address() . $expiration, $key);
  
  // Encrypt the cookie data.
  $iv_size = mcrypt_get_iv_size(MCRYPT_RIJNDAEL_128, MCRYPT_MODE_CBC);
  $iv = mcrypt_create_iv($iv_size, MCRYPT_RAND);
  $text = utf8_encode(serialize($data));
  $encrypted = base64_encode($iv . mcrypt_encrypt(MCRYPT_RIJNDAEL_128, $secret, $text, MCRYPT_MODE_CBC, $iv));

  // Set the cookie.
  $cookie = $expiration . '|' . $hash . '|' . $encrypted;
  return $cookie;
}

/**
 * Decrypts a cookie, authenticates, returns the data.
 * @param string $id
 *   The cookie ID.
 */
function cookie_monster_decrypt($id) {
  if (!($data = cookie_monster_authenticate_cookie($id))) {
    watchdog ('Cookie Monster', 'Cookie id=%id did not pass authentication. Could be an attack took place or the cookie is expired.', array('%id' => $id), WATCHDOG_ERROR);
    return FALSE;
  }
  
  // Decrypt the cookie data.
  $ciphertext_dec = base64_decode($data);
  $iv_size = mcrypt_get_iv_size(MCRYPT_RIJNDAEL_128, MCRYPT_MODE_CBC);
  $iv_dec = substr($ciphertext_dec, 0, $iv_size);
  $ciphertext_dec = substr($ciphertext_dec, $iv_size);
  $result = mcrypt_decrypt(MCRYPT_RIJNDAEL_128, variable_get('cookie_monster_secret'), $ciphertext_dec, MCRYPT_MODE_CBC, $iv_dec);
  return unserialize($result);
}

/**
 * Sets a cookie on the client.
 * @param array $data
 *   The data to add to the cookie.
 *   key=>value array:
 *   'id' (required) => the machine name of the cookie to set
 *   'expire_time' (optional) => the time before cookie expiration in seconds
 *   ... any other data to save with the cookie.
 * @param boolean $session
 *   If true (default) then a session variable will be set
 *   in addition to a cookie.
 */
function cookie_monster_set_cookie($data, $session = FALSE) {
  // Check for a secret.
  $secret = variable_get('cookie_monster_secret', NULL);
  if (!isset($secret)) {
    watchdog('Cookie Monster', t('Cookie monster secret is not set.'), array(), WATCHDOG_ERROR);
    return FALSE;
  }

  if ($session) {
    // Set a session variable.
    $_SESSION['cookie_monster'][$data['id']] = $data;
  }
  // Check for needed data in data array.
  if (!isset($data['id'])) {
    return FALSE;
  }

  // Encrypt the cookie.
  if (!($cookie = cookie_monster_encrypt($data))) {
    return FALSE;
  }

  global $site_url;
  $expiration = time() + ((isset($data['expire_time'])) ? $data['expire_time'] : variable_get('cookie_monster_expiration', 86400));
  if (!setcookie($data['id'], $cookie, $expiration, '/', $site_url, FALSE, TRUE)) {
    watchdog('Cookie Monster', 'Could not set cookie id=%id', array('%id'=>$data['id']), WATCHDOG_ERROR);
    return FALSE;
  }

  rules_invoke_event('cookie_monster_rules_cookie_set', $data['id']);
  return TRUE;
}

/**
 * Returns the data stored in a cookie.
 * Returns false if cookie does not exist
 * or if it does not pass validation.
 * @param string $id
 *   The cookie ID.
 */
function cookie_monster_get_cookie($id) {
  // Check for session var. If doesn't exist, return cookie.
  if (!isset($_SESSION['cookie_monster'][$id])) {
    return cookie_monster_decrypt($id);
  }
  return $_SESSION['cookie_monster'][$id];
}

/**
 * Callback to delete (expire) a cookie.
 * Enter description here ...
 * @param unknown_type $id
 */
function cookie_monster_expire_cookie($id) {
  // Expire the session cookie.
  if (isset($_SESSION['cookie_monster'][$id])) {
    unset($_SESSION['cookie_monster'][$id]);
  }
  // Return with error if no cookie exists.
  if (!isset($_COOKIE[$id])) {
    watchdog('Cookie Monster', 'Could not expire cookie id=%id. Cookie does not exist.', array('%id' => $id), WATCHDOG_ERROR);
    return FALSE;
  }
  // Kill the cookie.
  unset($_COOKIE[$id]);
  global $site_url;
  setcookie($id, '', time() - 3600, '/', $site_url, FALSE, TRUE);
  rules_invoke_event('cookie_monster_rules_cookie_expire', $id);
  return TRUE;
}
