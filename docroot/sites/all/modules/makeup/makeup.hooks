<?php

/**
 * Implements hook_field_settings_form().
 */

/**
 * Implements hook_field_instance_settings_form().
 */

/**
 * Implements hook_field_validate().
 *
 * TODO: Possible error codes:
 * - CSS code : validate against W3C validator.
 * - JS code : validate JS syntax ?
 *
function makeup_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    // @todo Length is counted separately for summary and value, so the maximum
    //   length can be exceeded very easily.
    foreach (array('value', 'summary') as $column) {
      if (!empty($item[$column])) {
        if (!empty($field['settings']['max_length']) && drupal_strlen($item[$column]) > $field['settings']['max_length']) {
          switch ($column) {
            case 'value':
              $message = t('%name: the text may not be longer than %max characters.', array('%name' => $instance['label'], '%max' => $field['settings']['max_length']));
              break;

            case 'summary':
              $message = t('%name: the summary may not be longer than %max characters.', array('%name' => $instance['label'], '%max' => $field['settings']['max_length']));
              break;
          }
          $errors[$field['field_name']][$langcode][$delta][] = array(
            'error' => "makeup_{$column}_length",
            'message' => $message,
          );
        }
      }
    }
  }
}
 *
 */

/**
 * Implements hook_field_load().
 *
 * TODO: Consider out to optimize and cache CSS and JS code.
 *
 * Where possible, generate the sanitized version of each field early so that
 * it is cached in the field cache. This avoids looking up from the filter cache
 * separately.
 *
 * @see makeup_field_formatter_view()
 *
function makeup_field_load($entity_type, $entities, $field, $instances, $langcode, &$items) {
  foreach ($entities as $id => $entity) {
    foreach ($items[$id] as $delta => $item) {
      // Only process items with a cacheable format, the rest will be handled
      // by formatters if needed.
      if (empty($instances[$id]['settings']['makeup_processing']) || filter_format_allowcache($item['format'])) {
        $items[$id][$delta]['safe_value'] = isset($item['value']) ? _makeup_sanitize($instances[$id], $langcode, $item, 'value') : '';
        if ($field['type'] == 'makeup_with_summary') {
          $items[$id][$delta]['safe_summary'] = isset($item['summary']) ? _makeup_sanitize($instances[$id], $langcode, $item, 'summary') : '';
        }
      }
    }
  }
}
 *
 */

/**
 * Implements hook_field_is_empty().
 *
function makeup_field_is_empty($item, $field) {
  if (!isset($item['value']) || $item['value'] === '') {
    return !isset($item['summary']) || $item['summary'] === '';
  }
  return FALSE;
}
 **/

/**
 * Implements hook_field_widget_settings_form().
 *
function makeup_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];

  $form['rows'] = array(
    '#type' => 'textfield',
    '#title' => t('Rows'),
    '#default_value' => $settings['rows'],
    '#required' => TRUE,
    '#element_validate' => array('element_validate_integer_positive'),
  );

  return $form;
}
 *
 */

/**
 * Implements hook_field_widget_error().
 *
 * TODO: Test and adapt if needed.
 *
function makeup_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    default:
      $error_element = $element[$element['#columns'][0]];
      break;
  }

  form_error($error_element, $error['message']);
}
 **/
