<?php
/**
 * @file
 * An Imagefield formatter to provide more links on Image Formatter.
 */

/**
 * Implements hook_help().
 * TODO: Give more details about the MakeUp Image Link module in the about statement
 */
function makeuplink_help($path, $arg) {
  switch ($path) {
    case 'admin/help#makeuplink':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t("The MakeUp Image Link module provide more links on Image Formatter.") . '</p>';
      return $output;
  }
}
/**
 * Implements hook_field_formatter_info().
 */
function makeuplink_field_formatter_info() {
  return array(
    'makeup_link' => array(
      'label' => t('Image better linked'),
      'field types' => array('image'),
      'settings' => array('image_style' => '', 'image_link' => ''),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function makeuplink_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  // Check if the formatter involves a link.
  switch ($display['settings']['image_link']) {
    case 'file':
      $link_file = TRUE;
      break;
    
    case 'scald_file':
      $atom = scald_atom_load($entity->sid);
      $uri = array(
        'path' => file_create_url($atom->scald_file['und'][0]['uri']),
        'options' => array(),
      );
      break;
    
    case 'content':
    default:
      $uri = entity_uri($entity_type, $entity);
      break;
  }
  foreach ($items as $delta => $item) {
    if (isset($link_file)) {
      $uri = array(
        'path' => file_create_url($item['uri']),
        'options' => array(),
      );
    }
    $element[$delta] = array(
      '#theme' => 'image_formatter',
      '#item' => $item,
      '#image_style' => $display['settings']['image_style'],
      '#path' => isset($uri) ? $uri : '',
    );
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function makeuplink_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $image_styles = image_style_options(FALSE, PASS_THROUGH);
  $element['image_style'] = array(
    '#title' => t('Image style'),
    '#type' => 'select',
    '#default_value' => $settings['image_style'],
    '#empty_option' => t('None (original image)'),
    '#options' => $image_styles,
  );

  $link_types = array(
    'content' => t('Content'),
    'file' => t('File'),
    'scald_file' => t('Scald File'),
  );
  $element['image_link'] = array(
    '#title' => t('Link image to'),
    '#type' => 'select',
    '#default_value' => $settings['image_link'],
    '#empty_option' => t('Nothing'),
    '#options' => $link_types,
  );

  return $element;
}


/**
 * Implements hook_field_formatter_settings_summary().
 * 
 * @see makeupimg_field_formatter_info()
 */
function makeuplink_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  $image_styles = image_style_options(FALSE, PASS_THROUGH);
  // Unset possible 'No defined styles' option.
  unset($image_styles['']);
  // Styles could be lost because of enabled/disabled modules that defines
  // their styles in code.
  if (isset($image_styles[$settings['image_style']])) {
    $summary[] = t('Image style: @style', array('@style' => $image_styles[$settings['image_style']]));
  }
  else {
    $summary[] = t('Original image');
  }

  $link_types = array(
    'content' => t('Linked to content'),
    'file' => t('Linked to file'),
    'scald_file' => t('Linked to Scald file'),
  );
  // Display this setting only if image is linked.
  if (isset($link_types[$settings['image_link']])) {
    $summary[] = $link_types[$settings['image_link']];
  }

  return implode('<br />', $summary);
}
