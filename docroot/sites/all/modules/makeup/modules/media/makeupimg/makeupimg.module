<?php
/**
 * @file
 * An Imagefield formatter to display image through CSS path.
 */

/**
 * Implements hook_help().
 * TODO: Give more details about the MakeUp Image module in the about statement
 */
function makeupimg_help($path, $arg) {
  switch ($path) {
    case 'admin/help#makeupimg':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t("The MakeUp Image module helps to display images trough CSS.") . '</p>';
      return $output;
  }
}

/**
 * Implements hook_field_formatter_info().
 *
 * @see makeupimg_field_formatter_view()
 */
function makeupimg_field_formatter_info() {
  // Get all breakpoints and defined group to target only the needed ones.
  // The purpose is to limit breakpoints settings by group.
  // Otherwise, the setting form might become pretty messy.
  if (module_exists('breakpoints')) {
    $breakpoints = breakpoints_breakpoint_load_all_active();
    $breakpoints_groups = breakpoints_breakpoint_group_load_all();
  }
  $breakpoints['default'] = array();
  $settings = array();
  // Provide default values
  foreach ($breakpoints as $breakpoint => $mediaqueries) {
    $settings[$breakpoint]['settings'] = array(
      $breakpoint . '-sameas' => '',
      $breakpoint . '-selector' => 'body',
      $breakpoint . '-image_style' => '',
      $breakpoint . '-color' => '',
      $breakpoint . '-repeat' => 'no-repeat',
      $breakpoint . '-attachment' => 'fixed',
      $breakpoint . '-horizontal_position' => 'center',
      $breakpoint . '-vertical_position' => 'top',
      $breakpoint . '-important' => TRUE,
      $breakpoint . '-width' => FALSE,
      $breakpoint . '-height' => FALSE,
      $breakpoint . '-img' => FALSE,
    );
  }

  if (module_exists('breakpoints')) {
    foreach ($breakpoints_groups as $breakpoints_group) {
      $settings['breakpoint'] = $breakpoints_group->machine_name;
      $formatters['makeupimg_inlinecss_' . $breakpoints_group->machine_name] = array(
        'label' => t('MakeUp Inline CSS - ' . $breakpoints_group->name),
        'field types' => array('image'),
        'settings' => $settings,
      );
      $formatters['makeupimg_infilecss_' . $breakpoints_group->machine_name] = array(
          'label' => t('MakeUp CSS File - ' . $breakpoints_group->name),
          'field types' => array('image'),
          'settings' => $settings,
      );
    }
  }
  // Even if breakpoints module is enbaled, general setting can be defined.
  $settings['breakpoint'] = 'default';
  $formatters['makeupimg_inlinecss'] = array(
    'label' => t('MakeUp Inline CSS'),
    'field types' => array('image'),
    'settings' => $settings,
  );
  $formatters['makeupimg_infilecss'] = array(
    'label' => t('MakeUp CSS File'),
    'field types' => array('image'),
    'settings' => $settings,
  );
  // This formatter changes the background image of the content region.
  return $formatters;
}


/**
 * Implements hook_theme().
 */
function makeupimg_theme() {
  return array(
    'makeupimg_formatter' => array(
      'variables' => array(
        'item' => NULL,
        'path' => NULL,
        'image_style' => NULL,
        'settings' => array(),
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 *
 * makeupimg formatter changes the background of a region defined
 * by the selector, using the image loaded in the field.
 *
 * @see makeupimg_formatter_info()
 */
function makeupimg_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  foreach ($items as $delta => $item) {
    $item['entity'] = $entity;
    $display['settings']['type'] = $display['type'];
    $element[$delta] = array(
      '#theme' => 'makeupimg_formatter',
      '#item' => $item,
      '#settings' => $display['settings'],
    );
  }
  return $element;
}

/**
 * Returns CSS instead of HTML for an image field formatter.
 *
 * @param array $variables
 *   An associative array containing:
 *   - item: Associative array of image data, which may include "uri", "alt",
 *     "width", "height", "title" and "attributes".
 *   - settings: field settings.
 *   - entity: Current entity needed to replace values with token module.
 *
 * @ingroup themeable
 */
function theme_makeupimg_formatter($variables) {
  // TODO: Put every generated CSS in an array to make sure there is only
  // one inline drupal_add_css() and one file drupal_add_css() per page?
  // Would it make any real benefit?
  // TODO: Add compatibility with print module to display an IMG tag with src.
  $makeupimg = makeupimg_css_generator($variables);
  $inline_css = $makeupimg['inline_css'];
  $imgtag = $makeupimg['imgtag'];

  if (isset($variables['item']['entity']->provider)) {
    return '<style>' . $inline_css . '</style>';
  }
  else {
    // Get rid of the breakpoints suffix.
    $line_or_file = substr($variables['settings']['type'],0,19);
    switch ($line_or_file) {
      case 'makeupimg_inlinecss':
        $sentcss = drupal_add_css(
          $inline_css, 
          array(
            'group' => CSS_THEME,
            'type' => 'inline',
            'media' => 'all'
            )
          );
        break;
      case 'makeupimg_infilecss':
        // Make sure the CSS directory exists.
        $makeupcss_dir = 'public://css';
        file_prepare_directory($makeupcss_dir, FILE_CREATE_DIRECTORY);
        // Generate a name based on the CSS rule (exclulding field name).
        $cssfile_name = md5($inline_css);
        $makeupimg_path = $makeupcss_dir . '/makeupimg_' . $cssfile_name . '.css';
        if (!file_exists($makeupimg_path)) {
          $file = file_save_data($inline_css, $makeupimg_path);
        }
        $sentcss = drupal_add_css(
          $makeupimg_path, 
          array(
            'group' => CSS_THEME,
            'type' => 'file',
            'media' => 'all',
            'preprocess' => TRUE,
            'every_page' => FALSE
            )
          );
        break;
    }
  }
  // Display dummy <img> tag if any.
  return $imgtag;
}

/**
 * Returns CSS for the image field formatter.
 *
 * @param $variables
 *   An associative array containing:
 *   - item: Associative array of image data, which may include "uri", "alt",
 *     "width", "height", "title" and "attributes".
 *   - image_style: An optional image style.
 *   - path: An array containing the link 'path' and link 'options'.
 * 
 * @see theme_makeupimg_formatter()
 */
function makeupimg_css_generator ($variables) {
  $item = $variables['item'];
  $all_settings = $variables['settings'];
  $entity = $item['entity'];
  $raw_css = array();
  $inline_css = '';
  $type = $all_settings['type'];

  if (module_exists('breakpoints')) {
    $breakpoints = breakpoints_breakpoint_load_all_active();
    $breakpoints_groups = breakpoints_breakpoint_group_load_all();
    foreach ($breakpoints_groups as $breakpoints_group) {
      if ( $type == 'makeupimg_infilecss_' . $breakpoints_group->machine_name 
        || $type == 'makeupimg_inlinecss_' . $breakpoints_group->machine_name) {
        foreach ($breakpoints_group->breakpoints as $key => $breakpoint) {
          $bp_name = $breakpoints_group->breakpoints[$key];
          $settings[$bp_name] = $all_settings[$bp_name];
        }
      }
    }
  }
  if (in_array($type, array('makeupimg_infilecss','makeupimg_inlinecss'))) {
    $breakpoints['default'] = array();
    $settings['default'] = $all_settings['default'];
  }

  $display_tag = FALSE;
  
  foreach ($breakpoints as $breakpoint => $mediaqueries) {
    if (isset($settings[$breakpoint])) {
      // If a Sameas value is defined: get breakpoint name to create css - but keep mediaqueries values.
      if (isset($settings[$breakpoint]['settings'][$breakpoint . '-sameas'])
        && '' != $settings[$breakpoint]['settings'][$breakpoint . '-sameas']) {
      $raw_css[$breakpoint] = '';
      }
      else {
        if (isset($settings[$breakpoint]['settings'][$breakpoint . '-image_style'])
          && '' != $settings[$breakpoint]['settings'][$breakpoint . '-image_style']) {
          $style = $settings[$breakpoint]['settings'][$breakpoint . '-image_style'];
          $img_url = image_style_url($style, $item['uri']);
          image_style_transform_dimensions($style, $item);
        }
        else {
          $img_url = file_create_url($item['uri']);
        }
      $important = (isset($settings[$breakpoint]['settings'][$breakpoint . '-important'])
        && $settings[$breakpoint]['settings'][$breakpoint . '-important'] == TRUE) ? ' !important' : '';

      // Replace tokens if token module is enabled.
      $selector = (module_exists('token')) ?
        token_replace($settings[$breakpoint]['settings'][$breakpoint . '-selector'], array('node' => $entity, 'field_collection_item' => $entity, 'fieldable_panels_pane' => $entity)) :
        $settings[$breakpoint]['settings'][$breakpoint . '-selector'];
      $width = (isset($settings[$breakpoint]['settings'][$breakpoint . '-width']) && $settings[$breakpoint]['settings'][$breakpoint . '-width'] == TRUE) ? 'min-width: ' . $item['width'] . 'px; ' : '';
      $height = (isset($settings[$breakpoint]['settings'][$breakpoint . '-height']) && $settings[$breakpoint]['settings'][$breakpoint . '-height'] == TRUE) ? 'min-height: ' . $item['height'] . 'px; ' : '';
      $raw_css[$breakpoint] = $selector . 
        '{background: ' . check_plain($settings[$breakpoint]['settings'][$breakpoint . '-color']) . 
        ' url("' . check_plain($img_url) . '") ' .
        check_plain($settings[$breakpoint]['settings'][$breakpoint . '-repeat']) . ' ' .
        check_plain($settings[$breakpoint]['settings'][$breakpoint . '-attachment']) . ' ' .
        check_plain($settings[$breakpoint]['settings'][$breakpoint . '-horizontal_position']) . ' ' .
        check_plain($settings[$breakpoint]['settings'][$breakpoint . '-vertical_position']) . $important . '; ' .
        $width . $height .
        '} img.hidden {display:none;}';
      
      $display_tag = ($settings[$breakpoint]['settings'][$breakpoint . '-img']) ? TRUE : FALSE;      
      }
    }
  }

  foreach ($breakpoints as $breakpoint => $mediaqueries) {
    if (isset($settings[$breakpoint])) {
      // If a Sameas value is defined: get breakpoint name to create css - but keep mediaqueries values.
      if (isset($settings[$breakpoint]['settings'][$breakpoint . '-sameas'])
        && '' != $settings[$breakpoint]['settings'][$breakpoint . '-sameas']) {
        $sameas = $settings[$breakpoint]['settings'][$breakpoint . '-sameas'];  
        $raw_css[$breakpoint] = $raw_css[$sameas];
      }
      if (isset($mediaqueries->breakpoint)) {
        $mq_start = (isset($mediaqueries->breakpoint)) ? '
@media ' . $mediaqueries->breakpoint . '{' : '';
        $mq_end = (isset($mediaqueries->breakpoint)) ? ' }' : '';
        $inline_css .= $mq_start . $raw_css[$breakpoint] . $mq_end;
      }
      else {
        $inline_css .= $raw_css[$breakpoint];
      }
    }
  }

  // For SEO and accessbility reasons, an <img> tag can be provided.
  $imgtag = ($display_tag) ? makeupimg_imgtag_generator($variables) : ''; 

  return array('inline_css' => $inline_css, 'imgtag' => $imgtag);
}

/**
 * Returns HTML as a dummy tag for the image field formatter.
 *
 * @param $variables
 *   An associative array containing:
 *   - item: Associative array of image data, which may include "uri", "alt",
 *     "width", "height", "title" and "attributes".
 *   - image_style: An optional image style.
 *   - path: An array containing the link 'path' and link 'options'.
 * 
 * @see theme_makeupimg_formatter()
 */
function makeupimg_imgtag_generator($variables) {
  $item = $variables['item'];
  $image = array(
    'path' => drupal_get_path('module', 'makeupimg') . '/blank.png',
    'attributes' => array (
      'class' => array('hidden',),
    ),
  );

  if (array_key_exists('alt', $item)) {
    $image['alt'] = $item['alt'];
  }

  // Do not output an empty 'title' attribute.
  if (isset($item['title']) && drupal_strlen($item['title']) > 0) {
    $image['title'] = $item['title'];
  }

  $output = theme('image', $image);

  return $output;
}

/**
 * Implements hook_field_formatter_settings_form().
 * 
 * @see makeupimg_field_formatter_info()
 */
function makeupimg_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $element = array();

  $display = $instance['display'][$view_mode];
  $all_settings = $display['settings'];
  $type = $display['type'];
//  $summary = array();

  if (module_exists('breakpoints')) {
    $breakpoints = breakpoints_breakpoint_load_all_active();
    $breakpoints_groups = breakpoints_breakpoint_group_load_all();
    foreach ($breakpoints_groups as $breakpoints_group) {
      if ( $type == 'makeupimg_infilecss_' . $breakpoints_group->machine_name 
        || $type == 'makeupimg_inlinecss_' . $breakpoints_group->machine_name) {
        foreach ($breakpoints_group->breakpoints as $key => $breakpoint) {
          $bp_name = $breakpoints_group->breakpoints[$key];
          $settings[$bp_name] = $all_settings[$bp_name];
        }
      }
    }
  }
  if (in_array($type, array('makeupimg_infilecss','makeupimg_inlinecss'))) {
    $breakpoints['default'] = array();
    $settings['default'] = $all_settings['default'];
  }

  foreach ($breakpoints as $breakpoint => $mediaqueries) {
    if (isset($settings[$breakpoint])) {
      $element[$breakpoint] = array(
        '#type' => 'fieldset',
        '#title' => $breakpoint,
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
      );
      $bp_list[$breakpoint] = $breakpoint;
    }
  }
  $element['default']['#collapsed'] = FALSE;

  foreach ($breakpoints as $breakpoint => $mediaqueries) {
    if (isset($settings[$breakpoint])) {
      $element[$breakpoint]['settings'] = array();
      $element[$breakpoint]['settings'][$breakpoint . '-sameas'] = array(
        '#title' => t("Same as"),
        '#type' => 'select',
        '#default_value' => $settings[$breakpoint]['settings'][$breakpoint . '-sameas'],
        '#required' => FALSE,
        '#empty_option' => t("Custom"),
        '#options' => $bp_list,
      );
      $element[$breakpoint]['settings'][$breakpoint . '-selector'] = array(
        '#title' => t("Selector"),
        '#type' => 'textfield',
        '#size' => 60,
        '#maxlength' => 128,
        '#default_value' => $settings[$breakpoint]['settings'][$breakpoint . '-selector'],
        '#required' => FALSE,
        '#description' => t("A valid CSS selector such as <code>.links > li > a, #logo</code>."),
      );
      // Display token help field if token is enabled.
      if (module_exists('token')) {
        $element[$breakpoint]['settings']['token'] = array(
          '#theme' => 'token_tree',
          '#token_types' => array('node','field_collection_item', 'fieldable_panels_pane'),
          '#dialog' => TRUE,
        );
      }
      $element[$breakpoint]['settings'][$breakpoint . '-image_style'] = array(
        '#title' => t("Image style"),
        '#type' => 'select',
        '#default_value' => $settings[$breakpoint]['settings'][$breakpoint . '-image_style'],
        '#required' => FALSE,
        '#empty_option' => t("None (original image)"),
        '#options' => image_style_options(FALSE),
      );
      $element[$breakpoint]['settings'][$breakpoint . '-color'] = array(
        '#title' => t("Color"),
        '#type' => 'textfield',
        '#size' => 60,
        '#maxlength' => 128,
        '#default_value' => $settings[$breakpoint]['settings'][$breakpoint . '-color'],
        '#required' => FALSE,
        '#description' => t("A valid CSS color value."),
      );
      $element[$breakpoint]['settings'][$breakpoint . '-repeat'] = array(
        '#title' => t("Repeat"),
        '#type' => 'select',
        '#default_value' => $settings[$breakpoint]['settings'][$breakpoint . '-repeat'],
        '#required' => FALSE,
        '#empty_option' => t("-No value-"),
        '#options' => array(
          'repeat' => t("Repeat horizontally and vertically"),
          'repeat-x' => t("Repeat horizontally"),
          'repeat-y' => t("Repeat vertically"),
          'no-repeat' => t("Do not repeat"),
          'inherit' => t("Inherit from parent element"),
        ),
      );
      $element[$breakpoint]['settings'][$breakpoint . '-attachment'] = array(
        '#title' => t("Attachment"),
        '#type' => 'select',
        '#default_value' => $settings[$breakpoint]['settings'][$breakpoint . '-attachment'],
        '#required' => FALSE,
        '#empty_option' => t("-No value-"),
        '#options' => array(
          'scroll' => t("Scroll with the page"),
          'fixed' => t("Do not scroll"),
          'local' => t("Scroll with element's contents"),
        ),
      );
      $element[$breakpoint]['settings'][$breakpoint . '-horizontal_position'] = array(
        '#title' => t("Horizontal position"),
        '#type' => 'textfield',
        '#size' => 20,
        '#maxlength' => 20,
        '#default_value' => $settings[$breakpoint]['settings'][$breakpoint . '-horizontal_position'],
        '#required' => FALSE,
        '#description' => t("A valid CSS horizontal position value."),
      );
      $element[$breakpoint]['settings'][$breakpoint . '-vertical_position'] = array(
        '#title' => t("Vertical position"),
        '#type' => 'textfield',
        '#size' => 20,
        '#maxlength' => 20,
        '#default_value' => $settings[$breakpoint]['settings'][$breakpoint . '-vertical_position'],
        '#required' => FALSE,
        '#description' => t("A valid CSS vertical position value."),
      );
      $element[$breakpoint]['settings'][$breakpoint . '-important'] = array(
        '#title' => t("Important"),
        '#type' => 'checkbox',
        '#default_value' => $settings[$breakpoint]['settings'][$breakpoint . '-important'],
        '#description' => t("Whenever this declaration is more important than others."),
      );
      $element[$breakpoint]['settings'][$breakpoint . '-width'] = array(
        '#title' => t("Apply image width to the element."),
        '#type' => 'checkbox',
        '#default_value' => $settings[$breakpoint]['settings'][$breakpoint . '-width'],
        '#description' => t("Make sure the image will be fully seen."),
      );
      $element[$breakpoint]['settings'][$breakpoint . '-height'] = array(
        '#title' => t("Apply image height to the element."),
        '#type' => 'checkbox',
        '#default_value' => $settings[$breakpoint]['settings'][$breakpoint . '-height'],
        '#description' => t("Make sure the image will be fully seen."),
      );
      $element[$breakpoint]['settings'][$breakpoint . '-img'] = array(
        '#title' => t("Print the IMG tag."),
        '#type' => 'checkbox',
        '#default_value' => $settings[$breakpoint]['settings'][$breakpoint . '-img'],
        '#description' => t("Provide an IMG dummy 'src' option for SEO and accessibility."),
      );
    }
  }
  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 * 
 * @see makeupimg_field_formatter_info()
 */
function makeupimg_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $all_settings = $display['settings'];
  $type = $display['type'];
  $summary = array();

  if (module_exists('breakpoints')) {
    $breakpoints = breakpoints_breakpoint_load_all_active();
    $breakpoints_groups = breakpoints_breakpoint_group_load_all();
    foreach ($breakpoints_groups as $breakpoints_group) {
      if ( $type == 'makeupimg_infilecss_' . $breakpoints_group->machine_name 
        || $type == 'makeupimg_inlinecss_' . $breakpoints_group->machine_name) {
        foreach ($breakpoints_group->breakpoints as $key => $breakpoint) {
          $bp_name = $breakpoints_group->breakpoints[$key];
          $settings[$bp_name] = $all_settings[$bp_name];
        }
      }
    }
  }
  if (in_array($type, array('makeupimg_infilecss','makeupimg_inlinecss'))) {
    $breakpoints['default'] = array();
    $settings['default'] = $all_settings['default'];
  }

  foreach ($breakpoints as $breakpoint => $mediaqueries) {
    if (isset($settings[$breakpoint])) {
      $summary[] = '<b>' . $breakpoint . ':</b>';
      if (isset($settings[$breakpoint]['settings'][$breakpoint . '-sameas']) && '' != $settings[$breakpoint]['settings'][$breakpoint . '-sameas']) {
        $summary[] = t("Same as") . ': ' . filter_xss_admin($settings[$breakpoint]['settings'][$breakpoint . '-sameas']);
      }
      if (!isset($settings[$breakpoint]['settings'][$breakpoint . '-sameas']) || '' == $settings[$breakpoint]['settings'][$breakpoint . '-sameas']) {
        $summary[] = t("CSS selector") . ': ' . filter_xss_admin($settings[$breakpoint]['settings'][$breakpoint . '-selector']);

        $image_styles = image_style_options(FALSE);
        // Unset possible 'No defined styles' option.
        unset($image_styles['']);
        // Styles could be lost because of enabled/disabled modules that defines
        // their styles in code.
        if (isset($image_styles[$settings[$breakpoint]['settings'][$breakpoint . '-image_style']])) {
          $summary[] = t("Image style: @style", array('@style' => $image_styles[$settings[$breakpoint]['settings'][$breakpoint . '-image_style']]));
        }
        else {
          $summary[] = t("Original image");
        }

        if (isset($settings[$breakpoint]['settings'][$breakpoint . '-color'])) {
          $summary[] = t("Color") . ': ' . filter_xss_admin($settings[$breakpoint]['settings'][$breakpoint . '-color']);
        }
        if (isset($settings[$breakpoint]['settings'][$breakpoint . '-repeat'])) {
          $summary[] = t("Repeat") . ': ' . filter_xss_admin($settings[$breakpoint]['settings'][$breakpoint . '-repeat']);
        }
        if (isset($settings[$breakpoint]['settings'][$breakpoint . '-attachment'])) {
          $summary[] = t("Attachment") . ': ' . filter_xss_admin($settings[$breakpoint]['settings'][$breakpoint . '-attachment']);
        }
        // Display this setting only if horizontal or vertical position is set.
        if (isset($settings[$breakpoint]['settings'][$breakpoint . '-horizontal_position']) || isset($settings[$breakpoint]['settings'][$breakpoint . '-vertical_position'])) {
          $summary[] = t("Position") . ': ' . filter_xss_admin($settings[$breakpoint]['settings'][$breakpoint . '-horizontal_position'])
                  . ' - ' . filter_xss_admin($settings[$breakpoint]['settings'][$breakpoint . '-vertical_position']);
        }
        $summary[] = t("!important declaration") . ': ' . (($settings[$breakpoint]['settings'][$breakpoint . '-important']) ? t("Yes") : t("No"));
        $summary[] = t("Image width") . ': ' . (($settings[$breakpoint]['settings'][$breakpoint . '-width']) ? t("Yes") : t("No"));
        $summary[] = t("Image height") . ': ' . (($settings[$breakpoint]['settings'][$breakpoint . '-height']) ? t("Yes") : t("No"));
        $summary[] = t("IMG tag") . ': ' . (($settings[$breakpoint]['settings'][$breakpoint . '-img']) ? t("Yes") : t("No"));
      }
    }
  }

  return implode('<br />', $summary);
}
