<?php

/**
 * @file
 * Defines CSS field types.
 */

/**
 * Implements hook_help().
 * TODO: Give more details about the MakeUp CSS module in the about statement
 */
function makeupcss_help($path, $arg) {
  switch ($path) {
    case 'admin/help#makeupcss':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t("The Makeup module defines CSS field types for the Field module.") . '</p>';
      return $output;
  }
}

/**
 * Implements hook_field_info().
 *
 * Field settings:
 *   - 
 * Instance settings:
 *   - 
 */
function makeupcss_field_info() {
  return array(
    'makeup_css' => array(
      'label' => t('CSS code'),
      'description' => t('This field stores CSS code in the database.'),
      'default_widget' => 'makeup_textarea',
      'default_formatter' => 'makeup_inlinecss',
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function makeupcss_field_formatter_info() {
    $settings = array(
      'css' => '',
    );
  return array(
    // CSS can be displayed inline or as a file
    'makeup_inlinecss' => array(
      'label' => t('Inline CSS'),
      'field types' => array('makeup_css'),
      'settings' => $settings,
    ),
    'makeup_infilecss' => array(
      'label' => t('CSS File'),
      'field types' => array('makeup_css'),
      'settings' => $settings,
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function makeupcss_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element = array();

  $element['css'] = array(
    '#title' => t('CSS code'),
    '#type' => 'textarea',
    '#default_value' => $settings['css'],
    '#required' => FALSE,
  );

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function makeupcss_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = '';
  $summary .= '<b>'.t("CSS code") . ': </b><br />' . filter_xss_admin($settings['css']) . '<br />';

  return $summary;
}

/**
 * Implements hook_field_formatter_view().
 */
function makeupcss_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  if (isset($display['settings']['css'])){
    $vm_css = $display['settings']['css'];
    // Make sure an item exist, otherwise VM level CSS will not be used.
    $items = (isset($items[0])) ? $items : array(0 => array('value' => ' '));
  }
  switch ($display['type']) {
    case 'makeup_inlinecss':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#attached' => array(
            'css' => drupal_add_css($item['value'].$vm_css, 'inline'),
            ),
          );
      }
      break;
    case 'makeup_infilecss':
      foreach ($items as $delta => $item) {
        $cssfile_name = drupal_tempnam('public://makeup_css','css'); 
        $file = file_save_data($item['value'].$vm_css, $cssfile_name);
        $element[$delta] = array(
          '#attached' => array(
            'css' => drupal_add_css($file, 'file'),
            ),
          );
      }
      break;
  }
  return $element;
}

/**
 * Implements hook_field_widget_info_alter().
 *
 * The List module does not implement widgets of its own, but reuses the
 * widgets defined in options.module.
 *
 * @see list_options_list()
 */
function makeupcss_field_widget_info_alter(&$info) {
  $widgets = array(
    'options_select' => array('makeup_css_list'),
    'options_buttons' => array('makeup_css_list'),
  );

  foreach ($widgets as $widget => $field_types) {
    $info[$widget]['field types'] = array_merge($info[$widget]['field types'], $field_types);
  }
}

/**
 * Implements hook_field_is_empty().
 */
function makeupcss_field_is_empty($item, $field) {
  if (!isset($item['value']) || $item['value'] === '') {
    return TRUE;
  }
  return FALSE;
}
