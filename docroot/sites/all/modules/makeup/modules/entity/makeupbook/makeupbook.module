<?php
/**
 * @file
 * makeupbook.module
 *
 * Defines a field group display formatter that ...
 */


/**
 * Implements hook_help().
 * TODO: Give more details about the MakeUp Image module in the about statement
 */
function makeupbook_help($path, $arg) {
  switch ($path) {
    case 'admin/help#makeupbook':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t("The MakeUp Book module helps to display book navigation fields in the Mode views interface.") . '</p>';
      return $output;
  }
}

/**
 * Implements hook_form_node_type_form_alter().
 */
function makeupbook_form_node_type_form_alter(&$form, &$form_state, $form_id) {
  if (module_exists('book')){
    $form['makeup'] = array(
      '#type' => 'fieldset',
      '#title' => t('MakeUp settings'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#group' => 'additional_settings',
    );
    $form['makeup']['makeupbookprev'] = array(
      '#type' => 'checkbox',
      '#title' => t('Display Previous book navigation link on this content type.'),
      '#default_value' => variable_get('makeupbookprev_' . $form['#node_type']->type, FALSE),
      '#description' => t('Previous link can be displayed in View mode interface.'),
      '#format' => 'hidden',
    );
    $form['makeup']['makeupbooknext'] = array(
      '#type' => 'checkbox',
      '#title' => t('Display Next book navigation link on this content type.'),
      '#default_value' => variable_get('makeupbooknext_' . $form['#node_type']->type, FALSE),
      '#description' => t('Next link can be displayed in View mode interface.'),
      '#format' => 'hidden',
    );
    $form['makeup']['makeupbookup'] = array(
      '#type' => 'checkbox',
      '#title' => t('Display Up book navigation link on this content type.'),
      '#default_value' => variable_get('makeupbookup_' . $form['#node_type']->type, FALSE),
      '#description' => t('Up link can be displayed in View mode interface.'),
      '#format' => 'hidden',
    );
    $form['makeup']['makeupbooksamelevel'] = array(
      '#type' => 'checkbox',
      '#title' => t('Navigate only through the same book level.'),
      '#default_value' => variable_get('makeupbooksamelevel_' . $form['#node_type']->type, FALSE),
      '#description' => t('Check this to limit navigation to the current book level.'),
      '#format' => 'hidden',
    );
  }
}

/**
 * Implements hook_field_extra_fields().
 */
function makeupbook_field_extra_fields() {
  $extra = array();

  if (module_exists('book')){
    foreach (node_type_get_types() as $type => $datas) {
      if (variable_get('makeupbookprev_' . $type, FALSE)) {
        $extra['node'][$type]['display']['makeupbookprev'] = array(
          'label' => ('Book Previous link'),
        );        
      }
      if (variable_get('makeupbooknext_' . $type, FALSE)) {
        $extra['node'][$type]['display']['makeupbooknext'] = array(
          'label' => ('Book Next link'),
        );
      }
      if (variable_get('makeupbookup_' . $type, FALSE)) {
        $extra['node'][$type]['display']['makeupbookup'] = array(
          'label' => ('Book Up link'),
        );
      }
    }
  }

  return $extra;
}

/**
 * Implements hook_node_view
 *
 * Display title as a field comming from our hook_field_extra_fields.
 */
function makeupbook_node_view($node, $view_mode, $langcode) {
  if (module_exists('book') && 'full' == $view_mode){
    if (isset($node->book)) {
      $nearest = (true == variable_get('makeupbooksamelevel_' . $node->type, FALSE))  ? makeupbook_onelevel($node->book) : array('prev' => book_prev($node->book), 'next' => book_next($node->book)) ;
      if (isset($nearest['prev'])) {
        $prev = $nearest['prev'];
        $prev_href = url($prev['href']);
        $booklinks['prev'] = array(
            'url' => $prev_href,
            'title' => check_plain($prev['title']),
            'class' => 'previous',
            'icon' => 'angle-left',
          );          
      }
      if (isset($nearest['next'])) {
        $next = $nearest['next'];
        $next_href = url($next['href']);
        $booklinks['next'] = array(
            'url' => $next_href,
            'title' => check_plain($next['title']),
            'class' => 'next',
            'icon' => 'angle-right',
          );
      }
      if (isset($node->book['plid']) && $parent = book_link_load($node->book['plid'])) {
        $parent_href = url($parent['href']);
        $booklinks['up'] = array(
            'url' => $parent_href,
            'title' => check_plain($parent['title']),
            'class' => 'up',
            'icon' => 'angle-up',
          );
      }
    }
    if (isset($booklinks)) {
      foreach ($booklinks as $name => $link) {
        if (variable_get('makeupbook'. $name .'_' . $node->type, FALSE)) {
          $icon = '<i class="icon fontello icon-' . $link['icon'] . '" aria-hidden="true"></i>';

          $markup = '<div class="book-btn ' . $link['class'] . '">'
          . '<a href="' . $link['url'] . '" class="page-previous" title="' 
          . $link['title'] . '">'
          . $icon 
          . $link['title']
          . '</a></div>' ;
          $node->content['makeupbook'.$name] = array('#markup' => $markup);
        }
      }
    }  
  }
}

function makeupbook_onelevel($book_link) {
  $data = array();
  $flat = book_get_flat_menu($book_link);
  $link = $book_link;
  do {
    if ($link['plid'] == $book_link['plid'] && $link['mlid'] != $book_link['mlid']) $data['prev'] = $link;
    $link = array_shift($flat);
  }
  while ($link && ($link['mlid'] != $book_link['mlid']));

  while ($link = array_shift($flat)) {
    if ($link['plid'] == $book_link['plid']) {
        $data['next'] = $link;
        return $data;
      }
    }
  return $data;
}
