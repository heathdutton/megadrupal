<?php

/**
 * @file
 * Detects blocks meant for mobile devices.
 */

/**
 * Implements hook_help().
 */
function responsive_blocks_help($path, $arg) {
  switch ($path) {
    case 'admin/help#responsive_blocks':
      return '<p>' . t('Different device breakpoints can be configured here. <a href="@responsive_blocks">Responsive block administration page</a>.', array('@responsive_blocks' => url('admin/config/services/responsive-blocks'))) . '</p>';
  }
}

/**
 * Implements hook_preprocess_html().
 */
function responsive_blocks_preprocess_html(&$vars) {
  drupal_add_js(drupal_get_path('module', 'responsive_blocks') . '/js/responsive_blocks.js', 'file');
}

/**
 * Implements hook_menu().
 */
function responsive_blocks_menu() {

  $items['admin/config/services/responsive-blocks'] = array(
    'title' => 'Responsive Blocks - Configurations',
    'description' => 'Configurations for Responsive device widths.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('responsive_blocks_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'responsive_blocks.admin.inc',
  );

  return $items;
}

/**
 * Callback function for returning content of README file.
 */
function _responsive_blocks_get_readme() {
  $readme = file_get_contents(dirname(__FILE__) . '/README.txt');

  if (module_exists('markdown')) {
    $filters = module_invoke('markdown', 'filter_info');
    $info = $filters['filter_markdown'];

    if (function_exists($info['process callback'])) {
      $function = $info['process callback'];
      $output = filter_xss_admin($function($readme, NULL));
    }
    else {
      $output = '<pre>' . $readme . '</pre>';
    }
  }
  else {
    $output = '<pre>' . $readme . '</pre>';
  }

  return $output;
}

/**
 * Implements hook_libraries_info().
 */
function responsive_blocks_libraries_info() {
  $libraries['mediacheck'] = array(
    'name' => 'mediaCheck',
    'vendor url' => 'http://sparkbox.github.io/mediaCheck/',
    'download url' => 'https://github.com/sparkbox/mediaCheck',
    'version arguments' => array(
      'file' => 'mediaCheck.js',
      // jQuery mediaCheck Responsive.
    ),
    'files' => array(
      'js' => array(
        'mediaCheck.js',
      ),
    ),
  );

  return $libraries;
}

/**
 * Retrieve the path to the mediaCheck library.
 *
 * @return string
 *   Candidate path to the mediaCheck library, relative
 *   to Drupal root.
 *
 * @access private
 */
function _responsive_blocks_get_library_path() {
  if (function_exists('libraries_get_path')) {
    $library_path = libraries_get_path('mediaCheck');
    if (!$library_path) {
      $library_path = 'sites/all/libraries/mediacheck/mediaCheck.js';
    }
  }
  else {
    $library_path = 'sites/all/libraries/mediaCheck';
  }

  return $library_path;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function responsive_blocks_form_block_admin_configure_alter(&$form, &$form_state) {
  $module = $form['module']['#value'];
  $delta = $form['delta']['#value'];
  $settings = variable_get('responsive_blocks_block_settings', array());
  $response_widths = array(
    'desktop' => 'Desktop',
    'ipad' => 'IPAD',
    'mobile' => 'Mobile',
  );

  $form['actions']['#weight'] = 100;
  $form['visibility']['responsive_blocks'] = array(
    '#type' => 'fieldset',
    '#title' => t('Responsive Blocks'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'visibility',
    '#tree' => TRUE,
    '#weight' => 60,
  );

  $form['visibility']['responsive_blocks']['custom'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Available Response widths( Device options )'),
    '#options' => $response_widths,
    '#default_value' => empty($settings[$module][$delta]) ? array() : $settings[$module][$delta],
    '#description' => t('Select options if block needs to be displayed on specific resolutions (Specific devices). If none of the option is selected, block will be displayed for all the resolutions (Devices). To set responsive resolutions : <a href="!url">Responsive Block Configuration</a>', array('!url' => url('admin/config/services/responsive-blocks'))),
  );
  $form['#submit'][] = 'responsive_blocks_form_block_admin_configure_submit';
}

/**
 * Form submit function for block_admin_configure.
 */
function responsive_blocks_form_block_admin_configure_submit(&$form, &$form_state) {
  $module = $form['module']['#value'];
  $delta = $form['delta']['#value'];
  $settings = variable_get('responsive_blocks_block_settings', array());
  $enabled = array_filter($form_state['values']['responsive_blocks']['custom']);
  if (!empty($enabled)) {
    $settings[$module][$delta] = $enabled;
    variable_set('responsive_blocks_block_settings', $settings);
  }
}

/**
 * Implements hook_block_view_alter().
 */
function responsive_blocks_block_view_alter(&$data, $block) {
  if (user_access('view the administration theme') && path_is_admin(current_path())) {
    // Don't load any custom JS when administrators are viewing an admin page.
    return;
  }
  $library_path = _responsive_blocks_get_library_path();
  drupal_add_js($library_path);
  $js_variables = array();
  $module = $block->module;
  $delta = $block->delta;
  $settings = variable_get('responsive_blocks_block_settings', array());
  if (!empty($settings[$module][$delta])) {
    foreach ($settings[$module][$delta] as $key => $value) {
      $js_variables["block-$module-$delta-$key"] = $value;
    }
  }
  $device_width = array();
  $device_list = array('responsive_blocks_desktop',
    'responsive_blocks_ipad',
    'responsive_blocks_mobile',
  );

  foreach ($device_list as $value) {
    $width = variable_get($value, '');
    $device_width[$value] = $width;
  }
  drupal_add_js(array('responsive_blocks' => array('responsive_blocks' => $js_variables)), 'setting');
  drupal_add_js(array('responsive_blocks' => array('device_width' => $device_width)), 'setting');
}
