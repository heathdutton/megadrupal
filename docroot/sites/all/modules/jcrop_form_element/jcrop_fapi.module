<?php
/**
 * @file
 * jcrop_fapi.module
 */

require_once 'includes/jcrop_fapi.includes.inc';

/**
 * Implements hook_element_info().
 *
 * The jcrop_image element may be used independently anywhere in Drupal.
 */
function jcrop_fapi_element_info() {
  $file_path = drupal_get_path('module', 'file');
  $types['jcrop_image'] = array(
    '#input' => TRUE,
    '#process' => array('jcrop_fapi_jcrop_image_file_process', 'jcrop_fapi_jcrop_image_cropping_process'),
    '#value_callback' => 'jcrop_fapi_jcrop_image_value',
    // Uses managed_file validation.
    '#element_validate' => array('file_managed_file_validate'),
    '#pre_render' => array('jcrop_fapi_jcrop_image_pre_render'),
    '#theme' => 'file_managed_file',
    '#theme_wrappers' => array('form_element'),
    '#progress_indicator' => 'throbber',
    '#progress_message' => NULL,
    '#upload_validators'  => array("file_validate_extensions" => array("png gif jpg")),
    '#upload_location' => NULL,
    '#jcrop_settings' => array(
      'resolution' => '500x500',
      'enforce_ratio' => FALSE,
      'enforce_minimum' => FALSE,
      'croparea' => '500x500',
      'cropped_img_width' => '200',
      'cropbox_title' => t('Edit Image'),
      'cropbox_description' => t('Click and drag the image to crop it.'),
    ),
    '#size' => 22,
    '#extended' => FALSE,
  );
  return $types;
}

/**
 * Form element value callback.
 */
function jcrop_fapi_jcrop_image_value($element, $input, $form_state) {
  // Set default value array.
  $return = array(
    'fid' => 0,
    'x' => 0,
    'y' => 0,
    'width' => 0,
    'height' => 0,
    'changed' => 0,
    'origin' => 0,
    'state' => 'default',
    'enforse_ratio' => 1,
  );

  // Find the current value of this field from the form state.
  $form_state_fid = $form_state['values'];
  foreach ($element['#parents'] as $parent) {
    $form_state_fid = isset($form_state_fid[$parent]) ? $form_state_fid[$parent] : 0;
  }

  if ($element['#extended'] && isset($form_state_fid['fid'])) {
    $fid = $form_state_fid['fid'];
  }
  elseif (is_numeric($form_state_fid)) {
    $fid = $form_state_fid;
  }

  // Set $input['fid'] and that will be the value of the element.
  if (isset($input) && ($input !== FALSE)) {
    // Uploads take priority over all other values. $_FILES[].
    if ($file = file_managed_file_save_upload($element)) {
      $return = array_merge($return, $input);
      // Put uploaded file in both fields.
      $return['fid'] = $return['origin'] = $file->fid;
      // If file has been uploaded set state as EDIT.
      $return['state'] = 'edit';
    }
    // IF $_FILES are empty - check input values.
    else {
      // Load file if the FID has changed to confirm it exists.
      if (isset($input['fid']) && $file = file_load($input['fid'])) {
        $return = array_merge($return, $input);
      }
    }
  }

  return $return;
}

/**
 * Default process callback function.
 * 
 * Add basic form elements: file, upload, remove buttons.
 */
function jcrop_fapi_jcrop_image_file_process($element, &$form_state, $form) {
  _jcrop_fapi_element_state_default_process($element, $form_state, $form);

  return $element;
}

/**
 * An element #process callback for the jcrop_image element.
 */
function jcrop_fapi_jcrop_image_cropping_process($element, &$form_state, $form) {
  $fid = isset($element['#value']['origin']) ? $element['#value']['origin'] : 0;
  // Set some default element properties.
  $element['#progress_indicator'] = empty($element['#progress_indicator']) ? 'none' : $element['#progress_indicator'];
  $element['#file'] = $fid ? file_load($fid) : FALSE;
  $element['#tree'] = TRUE;
  // Prefix and suffix used for Ajax replacement.
  $element['#prefix'] = '<div id="' . $element['#id'] . '-ajax-wrapper" >';
  $element['#suffix'] = '</div>';
  // Get value from form_state.
  $value = $element['#value'];
  // Process the state of the element.
  switch ($value['state']) {
    case 'edit':
      _jcrop_fapi_element_state_edit_process($element, $form_state, $form);
      break;

    case 'saved':
      _jcrop_fapi_element_state_saved_process($element, $form_state, $form);
      break;

    default:
      break;
  }
  $element['#extended'] = TRUE;

  return $element;
}

/**
 * Prerender element callback.
 */
function jcrop_fapi_jcrop_image_pre_render($element) {
  // If we already have a file, we don't want to show the upload controls.
  if (!empty($element['#value']['fid'])) {
    $element['upload']['#access'] = FALSE;
    $element['upload_button']['#access'] = FALSE;
  }
  // If we don't already have a file, there is nothing to remove.
  else {
    $element['remove_button']['#access'] = FALSE;
  }

  return $element;
}

/*
 * Submit handlers.
 */

/**
 * Form submission handler for upload / remove buttons of managed_file elements.
 *
 * @see file_managed_file_process()
 */
function jcrop_fapi_jcrop_image_file_submit($form, &$form_state) {
  // Get form element.
  $parents = $form_state['triggering_element']['#array_parents'];
  $button_key = array_pop($parents);
  $element = drupal_array_get_nested_value($form, $parents);

  $element_value = drupal_array_get_nested_value($form_state['values'], $element['#parents']);

  // Process remove button.
  if ($button_key == 'remove_button') {
    // Delete all files.
    if ($file = file_load($element_value['fid'])) {
      file_delete($file);
    }
    if ($file = file_load($element_value['origin'])) {
      file_delete($file);
    }
    // Delete all file ids from form_state
    $values_element = $element['#extended'] ? $element['fid'] : $element;
    drupal_array_set_nested_value($form_state['values'], $values_element['#parents'], NULL);
    drupal_array_set_nested_value($form_state['input'], $values_element['#parents'], NULL);
  }
  // Rebuild form.
  $form_state['rebuild'] = TRUE;
}

/**
 * Submit handler for 'Save' image button.
 */
function jcrop_fapi_jcrop_image_save_submit($form, &$form_state) {
  // Get element from form array.
  $parents = $form_state['triggering_element']['#array_parents'];
  // Remove last element, the button element.
  array_pop($parents);
  $element = drupal_array_get_nested_value($form, $parents);

  // Get values of the element from from_state values.
  $element_value = drupal_array_get_nested_value($form_state['values'], $element['#parents']);

  $src = file_load($element_value['origin']);
  $file_to_edit = file_copy($src, 'public://', $replace = FILE_EXISTS_RENAME);

  $scale = NULL;

  // If chosen "Entire Image" option, do not crop uploaded image.
  if ((int) $element_value['enforse_ratio'] == 2) {
    $element_value = NULL;
  }

  $image = _jcrop_fapi_image_crop_resize(drupal_realpath($file_to_edit->uri),
    $element_value, $scale, drupal_realpath($file_to_edit->uri));
  if ($image) {
    $file = file_load($element_value['fid']);

    if ($file->status == 0 && $file->fid != $element_value['origin']) {
      // Remove previous cropped image.
      file_delete($file);
    }

    // Update form values and input.
    $values_element = $element['#extended'] ? $element['fid'] : $element;
    drupal_array_set_nested_value($form_state['input'], $values_element['#parents'], $file_to_edit->fid);
    drupal_array_set_nested_value($form_state['values'], $values_element['#parents'], $file_to_edit->fid);
  }

  $values_element = $element['#extended'] ? $element['state'] : $element;
  drupal_array_set_nested_value($form_state['input'], $values_element['#parents'], 'saved');
  drupal_array_set_nested_value($form_state['values'], $values_element['#parents'], 'saved');

  // Rebuild form because we need to add new values into
  // $element['#value'] in #value_callback.
  $form_state['rebuild'] = TRUE;
}

/**
 * Submit handler for 'Edit Image' button.
 */
function jcrop_fapi_jcrop_image_edit_submit($form, &$form_state) {
  // Get the element.
  $parents = $form_state['triggering_element']['#array_parents'];
  // Remove last element, the button element.
  array_pop($parents);
  $element = drupal_array_get_nested_value($form, $parents);

  // Change the state of form element.
  $values_element = $element['#extended'] ? $element['state'] : $element;
  drupal_array_set_nested_value($form_state['input'], $values_element['#parents'], 'edit');
  drupal_array_set_nested_value($form_state['values'], $values_element['#parents'], 'edit');

  // Rebuild form to add new values into $element['#values'] in #value_callback.
  $form_state['rebuild'] = TRUE;
}

/**
 * Submit handler for 'Cancel' button.
 */
function jcrop_fapi_jcrop_image_cancel_submit($form, &$form_state) {
  // Get the element.
  $parents = $form_state['triggering_element']['#array_parents'];
  // Remove last element, the button element.
  array_pop($parents);
  $element = drupal_array_get_nested_value($form, $parents);

  // Get values of the element from from_state values.
  $element_value = drupal_array_get_nested_value($form_state['values'], $element['#parents']);

  if ($element_value['fid'] == $element_value['origin']) {
    // If 'field' equals to 'origin' that means that image hasn't been cropped.
    // So just delete the uploaded image.

    // Set state of the element.
    $values_element = $element['#extended'] ? $element['state'] : $element;
    drupal_array_set_nested_value($form_state['input'], $values_element['#parents'], 'default');
    drupal_array_set_nested_value($form_state['values'], $values_element['#parents'], 'default');

    // Delete uploaded file.
    if ($file = file_load($element_value['fid'])) {
      file_delete($file);
    }

    // Delete all file ids from form_state.
    $values_element = $element['#extended'] ? $element['fid'] : $element;
    drupal_array_set_nested_value($form_state['values'], $values_element['#parents'], NULL);
    drupal_array_set_nested_value($form_state['input'], $values_element['#parents'], NULL);
  }
  else {
    // Change the state of form element.
    $values_element = $element['#extended'] ? $element['state'] : $element;
    drupal_array_set_nested_value($form_state['input'], $values_element['#parents'], 'saved');
    drupal_array_set_nested_value($form_state['values'], $values_element['#parents'], 'saved');
  }

  // Rebuild form to add new values into $element['#values'] in #value_callback.
  $form_state['rebuild'] = TRUE;
}

/**
 * Implements hook_theme().
 */
function jcrop_fapi_theme() {
  return array(
    'jcrop_element' => array(
      'render element' => 'element',
      'file' => 'includes/jcrop_fapi.theme.inc',
    ),
  );
}

/**
 * Implements hook_libraries_info().
 */
function jcrop_fapi_libraries_info() {
  $libraries['jcrop'] = array(
    'name' => 'Jcrop',
    'vendor url' => 'http://deepliquid.com/content/Jcrop.html',
    'download url' => 'https://github.com/tapmodo/Jcrop/zipball/master',
    'version arguments' => array(
      'file' => 'js/jquery.Jcrop.js',
      'pattern' => '/jquery.Jcrop.js v(\d+\.+\d+)/',
      'lines' => 5,
    ),
    'files' => array(
      'js' => array(
        'js/jquery.Jcrop.js',
      ),
      'css' => array(
        'css/jquery.Jcrop.css',
      ),
    ),
    'variants' => array(
      'minified' => array(
        'files' => array(
          'js' => array(
            'js/jquery.Jcrop.min.js',
          ),
          'css' => array(
            'css/jquery.Jcrop.min.css',
          ),
        ),
      ),
      'source' => array(
        'files' => array(
          'js' => array(
            'js/jquery.Jcrop.min.js',
          ),
          'css' => array(
            'css/jquery.Jcrop.min.css',
          ),
        ),
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_requirements().
 */
function jcrop_fapi_requirements($phase) {
  $requirements = array();

  $t = get_t();

  $requirements['jcrop_fapi'] = array(
    'title' => $t('Jcrop Library'),
  );

  $library = libraries_detect('Jcrop');
  $error_type = isset($library['error']) ? drupal_ucfirst($library['error']) : '';
  $error_message = isset($library['error message']) ? $library['error message'] : '';

  $library = libraries_detect('jcrop');
  if ($library['installed']) {
    $requirements['jcrop_fapi'] = array(
      'title' => $t('Jcrop plugin'),
      'value' => $library['version'],
      'severity' => REQUIREMENT_OK,
    );
  }
  else {
    $requirements['jcrop_fapi'] = array(
      'title' => $t('Jcrop plugin'),
      'value' => $t('@e', array('@e' => $error_type)),
      'severity' => REQUIREMENT_ERROR,
      'description' => $t('!error You need to download the !jcrop, extract the archive and place the \'jcrop\' directory in the %path directory on your server.', array('!error' => $error_message, '!jcrop' => l($t('Jcrop plugin'), $library['download url']), '%path' => 'sites/all/libraries')),
    );
  }

  return $requirements;
}
