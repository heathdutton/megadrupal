<?php
/**
 * @file
 * Install, update, uninstall functions for the co_ment module
 */

/**
 * Implements hook_field_schema().
 *
 * Defines the database schema of the field, using the format used by the
 * Schema API.
 *
 * We have to store key and version of the text in co-ment server.
 */
function co_ment_field_schema($field) {
  $columns = array(
    'co_ment_value' => array(
        'description' => 'A co-mentable long text.',
        'type' => 'text',
        'size' => 'big',
        'not null' => FALSE,
      ),
    'co_ment_format' => array(
        'description' => 'The format of the co-mentable text.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
    'co_ment_key' => array(
        'description' => 'The identifier of a text in co-ment速.',
        'type' => 'varchar',
        'length' => 20,
        'not null' => FALSE,
      ),
      'co_ment_version' => array(
        'description' => 'The identifier of a version in co-ment速.',
        'type' => 'varchar',
        'length' => 20,
        'not null' => FALSE,
      ),
  );
  $indexes = array(
    'co_ment_keys' => array('co_ment_key', 'co_ment_version'),
  );
  return array(
    'columns' => $columns,
    'indexes' => $indexes,
  );
}

/**
 * Implements hook_install().
 */
function co_ment_install() {
  // Options for new nodetype
  variable_set('node_options_co_ment_text', array('status', 'revision'));
  variable_set('upload_co_ment_text', 0);
  variable_set('comment_co_ment_text', 0);

  // Clears the field cache to be sure the new field type is available.
  field_cache_clear();

  // Creates field and instance for co_ment_text bundle.
  $t = get_t();
  field_create_field(array(
    'field_name' => 'co_mentable_text',
    'type' => 'co_mentable',
    'cardinality' => 1,
    'translatable' => TRUE,
  ));
  field_create_instance(array(
    'field_name' => 'co_mentable_text',
    'entity_type' => 'node',
    'bundle' => 'co_ment_text',
    'label' => 'Co-mentable text',
    'description' => $t('The text opened to annotations with co-ment速.'),
    'widget' => array(
      'type' => 'text_textarea',
      'weight' => 0,
    ),
    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'type' => 'co_mentable_text',
        'weight' => 0,
      ),
      'teaser' => array(
        'label' => 'hidden',
        'type' => 'text_summary_or_trimmed',
        'settings' => array(
          'trim_length' => 600,
        ),
        'weight' => 0,
      ),
    ),
  ));
}


/**
 * Implements hook_uninstall().
 */
function co_ment_uninstall() {
  // Delete variables.
  foreach (array('co_ment_url', 'co_ment_editor_login', 'co_ment_editor_passwd', 'co_ment_commentator_login', 'co_ment_commentator_passwd', 'co_ment_observer_login', 'co_ment_observer_passwd', 'node_options_co_ment_text', 'upload_co_ment_text', 'comment_co_ment_text') as $module_variable) {
    variable_del($module_variable);
  }
}

/**
 * Move instances of the body field to co_mentable_text field
 * for existing co_ment_text nodes.
 */
function co_ment_update_7000() {
  // Creates field.
  if (! field_info_field('co_mentable_text')) {
    $t = get_t();
    field_create_field(array(
      'field_name' => 'co_mentable_text',
      'type' => 'co_mentable',
      'cardinality' => 1,
      'translatable' => TRUE,
    ));
  }

  // Creates instance.
  if (! field_info_instance('node', 'co_mentable_text', 'co_ment_text')) {
    field_create_instance(array(
      'field_name' => 'co_mentable_text',
      'entity_type' => 'node',
      'bundle' => 'co_ment_text',
      'label' => 'Co-mentable text',
      'description' => $t('The text opened to annotations with co-ment速.'),
      'widget' => array(
        'type' => 'text_textarea',
        'weight' => 0,
      ),
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'co_mentable_text',
          'weight' => 0,
        ),
        'teaser' => array(
          'label' => 'hidden',
          'type' => 'text_summary_or_trimmed',
          'settings' => array(
            'trim_length' => 600,
          ),
          'weight' => 0,
        ),
      ),
    ));
  }

  // Moves body field to co_mentable_text for every revision.
  if (db_table_exists('co_ment')) {
    // Loops over all co_ment_text node revisions.
    foreach (db_select('co_ment')->fields('co_ment')->execute() as $co_ment) {
      // Fetches current node revision.
      $query = db_select('node', 'n', array())
        ->condition('n.nid', $co_ment->nid);
      $query->join('node_revision', 'r', 'n.nid = r.nid');
      $query->addField('n', 'nid');
      $query->addField('n', 'type');
      $query->addField('r', 'vid');
      $query->condition('r.vid', $co_ment->vid);
      $entities = $query->execute()->fetchAllAssoc('nid');
      field_attach_load_revision('node', $entities);

      // Copies body values to co_mentable_text.
      foreach ($entities as $nid => $entity) {
        foreach ($entity->body as $lang => $items) {
          foreach ($items as $delta => $item) {
            $entity->co_mentable_text[$lang][$delta]['co_ment_value'] = $item['safe_value'];
            $entity->co_mentable_text[$lang][$delta]['co_ment_format'] = $item['format'];
            $entity->co_mentable_text[$lang][$delta]['co_ment_key'] = $co_ment->co_ment_key;
            $entity->co_mentable_text[$lang][$delta]['co_ment_version'] = $co_ment->co_ment_version;
          }
        }

        // Saves revision with new co_mentable_text attached field.
        field_attach_update('node', $entity);
      }
    }

    // Deletes body instances.
    $instance = field_info_instance('node', 'body', 'co_ment_text');
    field_delete_instance($instance);

    // Drops co_ment table.
    db_drop_table('co_ment');
  }
}
