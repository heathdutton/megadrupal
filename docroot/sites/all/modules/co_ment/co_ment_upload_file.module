<?php

/**
 * @file
 * The co-ment upload file module allows to upload a file in
 * a legacy format and convert it to the body of a co_ment text node.
 */

/**
 * Implements hook_menu().
 */
function co_ment_upload_file_menu() {
  $items = array();
  $items['co_ment_upload_file/ajax'] = array(
    'page callback' => 'co_ment_upload_file_ajax_upload',
    'delivery callback' => 'ajax_deliver',
    'access arguments' => array('access content'),
    'theme callback' => 'ajax_base_page_theme',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_element_info().
 *
 * The managed file element may be used anywhere in Drupal.
 */
function co_ment_upload_file_element_info() {
  $file_path = drupal_get_path('module', 'file');
  $types['co_ment_upload_file_form_element'] = array(
    '#input' => TRUE,
    '#process' => array('co_ment_upload_file_form_element_process'),
    '#value_callback' => 'file_managed_file_value',
    '#element_validate' => array('file_managed_file_validate'),
    '#pre_render' => array('file_managed_file_pre_render'),
    '#theme' => 'file_managed_file',
    '#theme_wrappers' => array('form_element'),
    '#progress_indicator' => 'throbber',
    '#progress_message' => NULL,
    '#upload_validators' => array(),
    '#upload_location' => NULL,
    '#size' => 22,
    '#extended' => FALSE,
    '#attached' => array(
      'css' => array($file_path . '/file.css'),
      'js' => array($file_path . '/file.js'),
    ),
  );
  return $types;
}

/**
 * Process function to expand the managed_file element type.
 *
 * Expands the file type to include Upload and Remove buttons, as well as
 * support for a default value.
 */
function co_ment_upload_file_form_element_process($element, &$form_state, $form) {
  $element =  file_managed_file_process($element, $form_state, $form);
  // The url upload field.
  $element['upload_url'] = array(
    '#type' => 'textfield', 
    '#prefix' => '<div>',
    '#suffix' => '</div><div class="description">' . t('Enter URL of a remote file above, or browse your local filesystem below.') . '</div>',
    '#size' => $element['#size'], 
    '#theme_wrappers' => array(), 
    '#weight' => -15,
  );

  $reverse_parents = array_reverse($element['#array_parents']);
  $element['upload_button']['#ajax']['wrapper'] = 'edit-' . $reverse_parents[3] . '-' . $reverse_parents[2] . '-' . $reverse_parents[1] . '-ajax-wrapper';
  $element['upload_button']['#ajax']['path'] = 'co_ment_upload_file/ajax/' . implode('/', $element['#array_parents']) . '/' . $form['form_build_id']['#value'];
  return $element;
}

/**
 * Menu callback; Ajax callback for file uploads.
 *
 * This rebuilds the form element for a particular field item. As long as the
 * form processing is properly encapsulated in the widget element the form
 * should rebuild correctly using FAPI without the need for additional callbacks
 * or processing.
 */
function co_ment_upload_file_ajax_upload() {
  $form_parents = func_get_args();
  $form_build_id = (string) array_pop($form_parents);

  if (empty($_POST['form_build_id']) || $form_build_id != $_POST['form_build_id']) {
    // Invalid request.
    drupal_set_message(t('An unrecoverable error occurred. The uploaded file likely exceeded the maximum file size (@size) that this server supports.', array('@size' => format_size(file_upload_max_size()))), 'error');
    $commands = array();
    $commands[] = ajax_command_replace(NULL, theme('status_messages'));
    return array('#type' => 'ajax', '#commands' => $commands);
  }

  list($form, $form_state) = ajax_get_form();

  if (!$form) {
    // Invalid form_build_id.
    drupal_set_message(t('An unrecoverable error occurred. Use of this form has expired. Try reloading the page and submitting again.'), 'error');
    $commands = array();
    $commands[] = ajax_command_replace(NULL, theme('status_messages'));
    return array('#type' => 'ajax', '#commands' => $commands);
  }

  // Get the current element and count the number of files.
  $current_element = $form;
  foreach ($form_parents as $parent) {
    $current_element = $current_element[$parent];
  }
  $current_file_count = isset($current_element['#file_upload_delta']) ? $current_element['#file_upload_delta'] : 0;

  // Dirty hack: for some reason, _weight should not been processed.
  $save_weight = array_key_exists('_weight', $form[$form_parents[0]][$form_parents[1]][$form_parents[2]]) ? $form[$form_parents[0]][$form_parents[1]][$form_parents[2]]['_weight'] : null;
  // Process user input. $form and $form_state are modified in the process.
  drupal_process_form($form['#form_id'], $form, $form_state);
  if ($save_weight)
    $form[$form_parents[0]][$form_parents[1]][$form_parents[2]]['_weight'] = $save_weight;

  // Smart hack: renders not only upload file but the whole field.
  $upload = (string) array_pop($form_parents);

  // Retrieve the element to be rendered.
  foreach ($form_parents as $parent) {
    $form = $form[$parent];
  }

  // Add the special Ajax class if a new file was added.
  if (isset($form[$upload]['#file_upload_delta']) && $current_file_count < $form[$upload]['#file_upload_delta']) {
    $form[$current_file_count]['#attributes']['class'][] = 'ajax-new-content';
  }
  // Otherwise just add the new content class on a placeholder.
  else {
    $form[$upload]['#suffix'] .= '<span class="ajax-new-content"></span>';
  }

  $output = theme('status_messages') . drupal_render($form);
  $js = drupal_add_js();
  $settings = call_user_func_array('array_merge_recursive', $js['settings']['data']);

  $commands = array();
  $commands[] = ajax_command_replace(NULL, $output, $settings);
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Implementation of hook_form_alter().
 *
 * Adds field for uploading a file.
 */
function co_ment_upload_file_form_alter(&$form, &$form_state, $form_id) {
  $co_mentable_bundles = co_ment_bundles();
  if (array_key_exists('#bundle', $form) && array_key_exists($form['#bundle'], $co_mentable_bundles) && array_key_exists($co_mentable_bundles[$form['#bundle']], $form)) {
    // User should have access to Full HTML input format.
    $formats = filter_formats(); 
    if (array_key_exists('full_html', $formats) && filter_access($formats['full_html'])) {
      // Adds a customized managed_file form field.
      foreach (element_children($form[$co_mentable_bundles[$form['#bundle']]]) as $language) {
        foreach (element_children($form[$co_mentable_bundles[$form['#bundle']]][$language]) as $delta) {
          if (is_int($delta)) {
            $form[$co_mentable_bundles[$form['#bundle']]][$language][$delta]['co_ment_file'] = array(
              '#type' => 'co_ment_upload_file_form_element',
              '#title' => t('Upload a legacy file'),
              '#size' => 48,
              '#description' => t('A file in legacy format to be converted to the body of this node <strong>or</strong> a previously exported XML file to re-import with comments.<br />Warning: this will overwrite the existing body of this node.<br />Authorized extensions are <em>odt, doc, docx, rtf, latex, tex, ltx, html, htm, shtml, xhtml, xht, asc, txt, and text</em> <strong>or</strong> <em>xml</em> to re-import file and comments.'),
              '#weight' => 50,
            );
            $form[$co_mentable_bundles[$form['#bundle']]][$language][$delta]['co_ment_file']['#upload_validators']['file_validate_extensions'][0] = 'odt doc docx rtf latex tex ltx html htm shtml xhtml xht asc txt text xml';
            $form[$co_mentable_bundles[$form['#bundle']]][$language][$delta]['#prefix'] = '<div id="edit-' . $co_mentable_bundles[$form['#bundle']] . '-' . $language . '-' . $delta . '-ajax-wrapper">';
            $form[$co_mentable_bundles[$form['#bundle']]][$language][$delta]['#suffix'] = '</div>';
          }
        }
      }

      // If we are called after uploading a file.
      if (array_key_exists('triggering_element', $form_state) && !empty($form_state['triggering_element']['#array_parents']) && count($form_state['triggering_element']) >= 5) {
        $reverse_parents = array_reverse($form_state['triggering_element']['#array_parents']);
        if ($reverse_parents[0] == 'upload_button' && $reverse_parents[1] == 'co_ment_file' && $reverse_parents[4] == $co_mentable_bundles[$form['#bundle']])  {
          $field_name = $reverse_parents[4];
          $language = $reverse_parents[3];
          $delta = $reverse_parents[2];
          $file = file_save_upload($field_name . '_' . $language . '_' . $delta . '_co_ment_file');
          if (empty($file) && !empty($form_state['input'][$field_name][$language][$delta]['co_ment_file']['upload_url'])) {
            $file = system_retrieve_file($form_state['input'][$field_name][$language][$delta]['co_ment_file']['upload_url'], NULL, TRUE);
            if (!$file) {
              form_set_error($field_name . '][' . $language . '][' . $delta . '][co_ment_file][upload_url', t('Error while fetching !fileurl.', array('!fileurl' => $form_state['input'][$field_name][$language][$delta]['co_ment_file']['upload_url'])));
            }
          }
          if (!empty($file)) {
            $file->filepath = drupal_realpath($file->uri);
            $url = variable_get('co_ment_url', NULL);
            // Delete ending slash.
            $url = rtrim($url, '/');
            $cuser = variable_get('co_ment_editor_login', NULL);
            $passwd = variable_get('co_ment_editor_passwd', NULL);
            $boundary = 'he2uH8';
            $headers = array('Content-Type' => "multipart/form-data; boundary=$boundary");
            $data = "--$boundary\r\n";
            $data .= "Content-Disposition: form-data; name=\"mime\"\r\n\r\n" . $file->filemime . "\r\n";
            $data .= "--$boundary\r\n";
            $data .= "Content-Disposition: form-data; name=\"file\"; filename=\"" . $file->filename . "\"\r\n";
            $data .= "Content-Transfer-Encoding: binary\r\n";
            $data .= "Content-Type: application/octet-stream\r\n\r\n";
            $data .= file_get_contents($file->filepath) . "\r\n";
            $data .= "--$boundary--";

            # XML => imports.
            if ($file->filemime == 'application/xml') {
              $url = preg_replace('!://!', "://$cuser:$passwd@", $url) . '/api/import/';
              $response = drupal_http_request($url, array('headers' => $headers, 'method' => 'POST', 'data' => $data, 'timeout' => 60));
              if ($response->code != 200) {
                unset($form_state['input'][$field_name][$language][$delta]['co_ment_file']);
                unset($form_state['values'][$field_name][$language][$delta]['co_ment_file']);
                form_set_error($field_name . '][' . $language . '][' . $delta . '][co_ment_file', t('Error while importing !filename: !co_ment_error.', array('!filename' => $file->filename, '!co_ment_error' => $response->status_message)));
              }
              else {
                $return = json_decode($response->data);
                if (!isset($return->key)) {
                  form_set_error($field_name . '][' . $language . '][' . $delta . '][co_ment_file', t('Error while importing !filename: no key generated.', array('!filename' => $file->filename)));
                }
                else {
                  $html = preg_replace('!\n([>/])!', '\1', $return->html);
                  $form[$field_name][$language][$delta]['#default_value'] = check_markup($html, 'full_html', $language);
                  $form[$field_name][$language][$delta]['#format'] = 'full_html';
                  $form_state['input'][$field_name][$language][$delta]['value'] = $form[$field_name][$language][$delta]['#default_value'];
                  $form_state['input'][$field_name][$language][$delta]['format'] = $form[$field_name][$language][$delta]['#format'];
                  $form[$field_name][$language][$delta]['imported'] = array('#type' => 'hidden', '#value' => TRUE);
                  $form[$field_name][$language][$delta]['co_ment_key'] = array('#type' => 'hidden', '#value' => $return->key);
                  $form[$field_name][$language][$delta]['co_ment_version'] = array('#type' => 'hidden', '#value' => $return->version_key);
                }
              }
            }
            # Not XML => converts.
            else {
              $url = preg_replace('!://!', "://$cuser:$passwd@", $url) . '/api/convert/';
              $response = drupal_http_request($url, array('headers' => $headers, 'method' => 'POST', 'data' => $data, 'timeout' => 60));
              if ($response->code != 200) {
                unset($form_state['input'][$field_name][$language][$delta]['co_ment_file']);
                unset($form_state['values'][$field_name][$language][$delta]['co_ment_file']);
                form_set_error($field_name . '][' . $language . '][' . $delta . '][co_ment_file', t('Error while converting !filename to HTML: !co_ment_error.', array('!filename' => $file->filename, '!co_ment_error' => $response->status_message)));
              }
              else {
                $return = json_decode($response->data);
                if (!isset($return->html)) {
                  unset($form_state['input'][$field_name][$language][$delta]['co_ment_file']);
                  unset($form_state['values'][$field_name][$language][$delta]['co_ment_file']);
                  form_set_error($field_name . '][' . $language . '][' . $delta . '][co_ment_file', t('Error while converting !filename to HTML: no HTML.', array('!filename' => $file->filename)));
                }
                else {
                  $html = preg_replace('!\n([>/])!', '\1', $return->html);
                  $form[$field_name][$language][$delta]['#default_value'] = check_markup($html, 'full_html', $language);
                  $form[$field_name][$language][$delta]['#format'] = 'full_html';
                  $form_state['input'][$field_name][$language][$delta]['value'] = $form[$field_name][$language][$delta]['#default_value'];
                  $form_state['input'][$field_name][$language][$delta]['format'] = $form[$field_name][$language][$delta]['#format'];
                }
              }
            }
          }
        }
      }
    }
  }
}
