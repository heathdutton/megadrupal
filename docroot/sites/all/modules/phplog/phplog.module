<?php
/**
 * @file
 * The meat of the module.
 */

require_once "phplog.help.inc";

define('PHPLOG_THRESHOLD', 'phplog_threshold');
define('PHPLOG_IGNORE_TYPES', 'phplog_ignore_types');
define('PHPLOG_THRESHOLD_DEFAULT', WATCHDOG_NOTICE);

/**
 * Helper function to translate WATCHDOG codes into text
 */
function _phplog_severity_to_text($severity) {
  $result = null;
  switch ($severity) {
    case WATCHDOG_EMERGENCY:  $result = t('EMERGENCY'); break;
    case WATCHDOG_ALERT:      $result = t('ALERT'); break;
    case WATCHDOG_CRITICAL:   $result = t('CRITICAL'); break;
    case WATCHDOG_ERROR:      $result = t('ERROR'); break;
    case WATCHDOG_WARNING:    $result = t('WARNING'); break;
    case WATCHDOG_NOTICE:     $result = t('NOTICE'); break;
    case WATCHDOG_INFO:       $result = t('INFO'); break;
    case WATCHDOG_DEBUG:      $result = t('DEBUG'); break;
  }
  return $result;
}

/**
 * Implements hook_watchdog().
 */
function phplog_watchdog(array $log_entry) {
  global $base_url;

  $threshold = variable_get(PHPLOG_THRESHOLD, PHPLOG_THRESHOLD_DEFAULT);
  $ignore_types = variable_get(PHPLOG_IGNORE_TYPES, '');

  $ignore_array = preg_split('/\s+/', $ignore_types);

  if ($log_entry['severity'] <= $threshold
      && !in_array($log_entry['type'], $ignore_array)) {
    $severity = _phplog_severity_to_text($log_entry['severity']);
    if (! $severity) {
      $severity = t("????");
    }
    $text = html_entity_decode(strip_tags(t(
      $log_entry['message'],
      is_null($log_entry['variables']) ? array() : $log_entry['variables'])));
    $message = sprintf("phplog+watchdog|%s|%s|%s|location='%s'|hostname='%s'|link='%s'|uid='%s'|referer='%s'|timestamp='%s'|base_url='%s'",
      $severity,
      $log_entry['type'],
      $text,
      isset($log_entry['location']) ? $log_entry['location'] : '',
      isset($log_entry['hostname']) ? $log_entry['hostname'] : '',
      $log_entry['link'],
      $log_entry['uid'],
      $log_entry['referer'],
      $log_entry['timestamp'],
      $base_url);
    error_log($message);
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for system_logging_settings().
 */
function phplog_form_system_logging_settings_alter(&$form, $form_state) {
  $form['phplog'] = array(
    '#type' => 'fieldset',
    '#title' => t('PHPLog Settings'),
  );
  $form['phplog'][PHPLOG_THRESHOLD] = array(
    '#type' => 'select',
    '#title' => t('Minimum watchdog alert threshold for a PHP error_log() call'),
    '#default_value' => variable_get(PHPLOG_THRESHOLD, PHPLOG_THRESHOLD_DEFAULT),
    '#options' => array(
      WATCHDOG_EMERGENCY => _phplog_severity_to_text(WATCHDOG_EMERGENCY),
      WATCHDOG_ALERT => _phplog_severity_to_text(WATCHDOG_ALERT),
      WATCHDOG_CRITICAL => _phplog_severity_to_text(WATCHDOG_CRITICAL),
      WATCHDOG_ERROR => _phplog_severity_to_text(WATCHDOG_ERROR),
      WATCHDOG_WARNING => _phplog_severity_to_text(WATCHDOG_WARNING),
      WATCHDOG_NOTICE => _phplog_severity_to_text(WATCHDOG_NOTICE),
      WATCHDOG_INFO => _phplog_severity_to_text(WATCHDOG_INFO),
      WATCHDOG_DEBUG => t('(No restriction)'),
    ),
    '#description' => t('The minimum threshold before actually sending a watchdog alert to the PHP error_log.  Be warned that if you do not have dblog or syslog enabled and you have a rather high threshold configured here, you will permanently miss the other watchdog alerts.'),
  );

  $form['phplog'][PHPLOG_IGNORE_TYPES] = array(
    '#type' => 'textfield',
    '#title' => t('Ignore the following types for PHP error_log() calls'),
    '#default_value' => variable_get(PHPLOG_IGNORE_TYPES, ''),
    '#maxwidth' => 256,
    '#description' => t('If you have some particularly noisy sources, you can enter their watchdog types here (space-delimited) to skip them when considering what alerts to send to your PHP error_log.  The type is the second logged field for phplog+watchdog entries in your error_log.')
  );
}
