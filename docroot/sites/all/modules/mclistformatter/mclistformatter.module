<?php
/**
 * Provides an entity reference formatter that will display a signup form for a
 * MailChimp list.
 *
 * @todo Could allow customisations of the sign-up form, such as the text used
 *   on the submit button.
 */

/**
 * Implements hook_field_formatter_info().
 */
function mclistformatter_field_formatter_info() {
  return array(
    'mclistformatter_signupform' => array(
      'label' => t("MailChimp sign-up form"),
      'description' => t("Displays a sign-up form to all referenced MailChimp lists."),
      'field types' => array('entityreference'),
    ),
  );
}

/**
 * Implements hook_field_formatter_prepare_view(). Loads all lists for this
 * field and attaches them to the entities.
 *
 * @see http://api.drupal.org/hook_field_formatter_prepare_view()
 */
function mclistformatter_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items, $displays) {

  // The field must reference mailchimp_list entities.
  if ($field['settings']['target_type'] != 'mailchimp_list') {
    watchdog('mailchimp', "Field %field_name is configured to use the MailChimp list reference formatter, but it references entity type %actual_type.", array('%actual_type' => $field['settings']['target_type'], '%field_name' => $field['field_name']), WATCHDOG_ERROR);
    return;
  }

  $list_ids = array();
  // Collect every possible list attached to any of the fieldable entities.
  foreach ($entities as $id => $entity) {
    foreach ($items[$id] as $delta => $item) {
      // Force the array key to prevent duplicates.
      $list_ids[$item['target_id']] = $item['target_id'];
    }
  }

  if ($list_ids) {
    $lists = mailchimp_lists_load_multiple($list_ids);
    
    // Iterate through the fieldable entities again to attach the loaded list
    // data.
    foreach ($entities as $id => $entity) {
      $rekey = FALSE;

      foreach ($items[$id] as $delta => $item) {
        // Check whether the list could be loaded.
        if (isset($lists[$item['target_id']])) {
          // Replace the instance value with the list data.
          $items[$id][$delta]['mailchimp_list'] = $lists[$item['target_id']];
        }
        // Otherwise, unset the instance value, since the list does not exist.
        else {
          unset($items[$id][$delta]);
          $rekey = TRUE;
        }
      }
      if ($rekey) {
        // Rekey the items array.
        $items[$id] = array_values($items[$id]);
      }
    }
  }
}

/**
 * Implements hook_field_formatter_view().
 */
function mclistformatter_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  global $user;
  
  $element = array();
  
  if ($field['settings']['target_type'] != 'mailchimp_list') {
    // No need to issue an error as that's handled in
    // hook_field_formatter_prepare_view().
    return $element;
  }

  switch ($display['type']) {
    case 'mclistformatter_signupform':
  
      // Get the form for all the lists.
      $lists = array();
      foreach ($items as $item) {
        $lists[] = $item['mailchimp_list'];
      }
      $form = drupal_get_form('mailchimp_lists_user_subscribe_form', $lists, $user);
      
      // Add some template suggestions.
      define('BASE_HOOK', 'mailchimp_lists_user_subscribe_form');
      $suggestions = array(
        BASE_HOOK . '__mclistformatter__' . $field['field_name'],
        BASE_HOOK . '__mclistformatter',
      );

      if (!isset($form['#theme'])) {
        $form['#theme'] = array();
      }
      elseif (!is_array($form['#theme'])) {
        $form['#theme'] = array($form['#theme']);
      }
      $form['#theme'] = array_merge($suggestions, $form['#theme']); ;
      
      $element[0] = $form;
      break;
  }
  
  return $element;
}
