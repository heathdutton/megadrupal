<?php

/**
 * @file
 * Tests for the module.
 */

/**
 * Test the commerce_prodnodelink module functionality.
 */
class CommerceProdNodeLinkTestCase extends CommerceBaseTestCase {
  /**
   * Super user.
   */
  protected $superuser;

  /**
   * Commerce store admin.
   */
  protected $store_admin;

  /**
   * Sample product.
   */
  protected $product;

  /**
   * Sample order.
   */
  protected $order;

  /**
   * Create a user with both site admin and store admin permissions.
   */
  protected function createSuperUser() {
    return $this->createUserWithPermissionHelper('site admin', 'store admin');
  }

  /**
   * Implementation of getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'Commerce ProdNodeLink',
      'description' => 'Test functionality of the Commerce ProdNodeLink module',
      'group' => 'Commerce (contrib)',
    );
  }

  /**
   * Implementation of setUp().
   */
  public function setUp() {
    $modules = parent::setUpHelper('all', array('commerce_prodnodelink'));
    parent::setUp($modules);

    // Create a super user (of sorts).
    $this->superuser = $this->createSuperUser();
    $this->drupalLogin($this->superuser);

    // Create a sample product.
    $this->product = $this->createDummyProduct(
      'PROD-X',
      'Sample Commerce product'
    );

    // Create a sample order.
    $this->order = $this->createDummyOrder();

    // Add a commerce product reference field to the 'Basic page' content type.
    $this->drupalGet('admin/structure/types/manage/page/fields');

    $fields = array();
    $fields["fields[_add_new_field][label]"] = 'Product';
    $fields["fields[_add_new_field][weight]"] = -1;
    $fields["fields[_add_new_field][parent]"] = '';
    $fields["fields[_add_new_field][parent_wrapper][hidden_name]"] = '_add_new_field';
    $fields["fields[_add_new_field][field_name]"] = 'product';
    $fields["fields[_add_new_field][type]"] = 'commerce_product_reference';
    $fields["fields[_add_new_field][widget_type]"] = 'options_select';
    $this->drupalPost('admin/structure/types/manage/page/fields', $fields,
      t('Save'));

    // Create a 'Basic page' node displaying the sample product.
    $this->drupalGet('node/add/page');

    $fields = array();
    $fields['title'] = 'Sample node';
    $fields["body[und][0][value]"] = 'Sample node to display a product';
    $fields["field_product[und]"] = $this->product->product_id;
    $this->drupalPost('node/add/page', $fields, t('Save'));

    cache_clear_all();
  }

  /**
   * Test the module configuration form.
   */
  public function testCommerceProdNodeLinkConfigurationForm() {
    // Create/login a store administrator.
    $this->store_admin = $this->createStoreAdmin();
    $this->drupalLogin($this->store_admin);

    // Check that the link to configurations form exists where it should.
    $this->drupalGet('admin/commerce/config');
    $this->assertText(t('Commmerce product node link settings'), 'Link to
      configuration form appears in the list of /admin store configuration
      links.');

    // Verify that the product edit page displays the display node IDs fieldset
    // by default (before verifying the config form removes it successfully).
    $this->drupalGet('admin/commerce/products/' . $this->product->product_id . '/edit');
    $this->assertText(t('Product display node(s)'), 'Display node IDs fieldset
      is shown on the product edit form');

    // Check that the configuration form returns 200 and content is as expected.
    $this->drupalGet('admin/commerce/config/commerce_prodnodelink');
    $this->assertResponse(200, t('Configuration form exists'));
    $this->assertText(t('Display links on the product edit form?'),
      'Option to display links on product edit form exists');
    $this->assertText(t("Make 'Line Items' View product titles links to product?"),
      'Option to make Line Item View product titles links, exists');
    $this->assertText(t('Make line item manager product titles links to product?'),
      'Option to make Line item manager product titles links, exists');

    // Submit the config form to disable showing the fieldset.
    $fields = array();
    $fields['commerce_prodnodelink_conf_links_on_ui_product_form'] = 0;
    $this->drupalPost('admin/commerce/config/commerce_prodnodelink', $fields,
      t('Save configuration'));

    // Verify the 'Display node IDs' fieldset is no longer shown on product
    // edit.
    $this->drupalGet('admin/commerce/products/' . $this->product->product_id . '/edit');
    $this->assertNoText(t('Product display node(s)'), 'Display node IDs fieldset
      no longer shown on the product edit form');
  }

  /**
   * Test that the content type/field summary page exists.
   */
  public function testCommerceProdNodeLinkSummaryPage() {
    $this->store_admin = $this->createStoreAdmin();
    $this->drupalLogin($this->store_admin);

    $this->drupalGet('admin/commerce/config/commerce_prodnodelink/variables');
    $this->assertResponse(200, t('Content type/field summary page exists'));
    $this->assertText(t('Summary of content types and their product reference fields'),
      'Table summarising combinations of node types and product reference fields exists.');
  }

  /**
   * Test that line iten manager displays product line item titles as links.
   */
  public function testCommerceProdNodeLinkLineItemManagerTitleLink() {
    $this->store_admin = $this->createStoreAdmin();
    $this->drupalLogin($this->store_admin);

    $this->drupalGet('admin/commerce/orders/1/edit');
    $this->assertLink('Product One', 0, 'Product title appears as a
      link in the line item manager');
  }

  /**
   * Test that line item view table displays product line item titles as links.
   */
  public function testCommerceProdNodeLinkOrderLineItemViewTableTitleLink() {
    $this->store_admin = $this->createStoreAdmin();
    $this->drupalLogin($this->store_admin);

    $this->drupalGet('admin/commerce/orders/1/view');
    $this->assertLink('Product One (PROD-01)', 0, 'Product title appears as a
      link in the line item table view');
  }

  /**
   * Test the product list View provided by Drupal Commerce is amended.
   */
  public function testCommerceProdNodeLinkViewFieldPresent() {
    // Create/login a store administrator.
    $this->store_admin = $this->createStoreAdmin();
    $this->drupalLogin($this->store_admin);

    $this->drupalGet('admin/commerce/products');
    $this->assertText(t('Display node ID(s)'), 'Product list view is amended to
      include the display node IDs');
  }

  /**
   * Test display_node_ids property is available on the commerce_product entity.
   */
  public function testCommerceProdNodeLinkEntityAltered() {
    $product_id = $this->product->product_id;
    $product_wrapper = entity_metadata_wrapper('commerce_product', $product_id);
    $display_node_ids = $product_wrapper->display_node_ids->value();
    $this->assertTrue($display_node_ids, 'display_node_ids property is available
      on the commerce_product entity');
  }
}
