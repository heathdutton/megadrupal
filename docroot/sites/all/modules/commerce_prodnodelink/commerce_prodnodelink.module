<?php

/**
 * @file
 * Link Commerce product entities to the nodes(s) that display it/them.
 *
 * Module adds computed property to the Commerce product entity that lists the
 * node ID(s) that are configured to show the products, exposing them for use by
 * the Views module as fields. Also modifes the default Commerce 'Products' view
 * to display link(s) to any node(s) that are configured to display the product,
 * if any.
 */


/**
 * Implements hook_menu().
 */
function commerce_prodnodelink_menu() {
  $items = array();

  $items['admin/commerce/config/commerce_prodnodelink'] = array(
    'title' => 'Commmerce product node link settings',
    'description' => 'Configuration for Commerce product node link module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_prodnodelink_config_form'),
    'access arguments' => array('configure store'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'commerce_prodnodelink.admin.inc',
  );

  $items['admin/commerce/config/commerce_prodnodelink/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/commerce/config/commerce_prodnodelink/variables'] = array(
    'title' => 'Variables',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'commerce_prodnodelink_module_variables_page',
    'access arguments' => array('configure store'),
    'file' => 'commerce_prodnodelink.admin.inc',
  );

  return $items;
}


/**
 * Implements hook_hook_info().
 */
function commerce_prodnodelink_hook_info() {
  $hooks = array();

  $hooks['field_create_instance'] = array(
    'group' => 'field',
  );

  $hooks['field_delete_instance'] = array(
    'group' => 'field',
  );

  $hooks['field_attach_delete_bundle'] = array(
    'group' => 'field',
  );

  return $hooks;
}


/**
 * Implements hook_entity_property_info_alter().
 *
 * Add new computed property to the 'commerce_product' entity and exposes to
 * Views
 */
function commerce_prodnodelink_entity_property_info_alter(&$info) {
  $info['commerce_product']['properties']['display_node_ids'] = array(
    'type' => 'display_node_ids',
    'label' => t('Display node ID(s)'),
    'description' => t('List of node IDs that display the product'),
    'getter callback' => 'commerce_prodnodelink_product_display_node_ids',
    'computed' => TRUE,
    'entity views field' => TRUE,
  );
}


/**
 * Implements hook_entity_views_field_handlers_alter().
 */
function commerce_prodnodelink_entity_views_field_handlers_alter(&$field_handlers) {
  $field_handlers['display_node_ids'] = 'commerce_prodnodelink_handler_field_display_node_ids';
}


/**
 * Return the node ID(s) that is/are responsible for displaying the product.
 *
 * @param object $product
 *   An object representing a Commerce product.
 *
 * @return array
 *   An array of node IDs, or an empty array.
 */
function commerce_prodnodelink_product_display_node_ids($product) {
  $node_ids = array();
  $module_variables = commerce_prodnodelink_vars('data');

  if ($module_variables) {
    $field_names = array_values($module_variables);

    $query = db_select('node', 'n')
      ->fields('n', array('nid', 'vid'))
      ->addTag('commerce_prodnodelink_product_display_node_ids')
      ->addTag('node_access');

    $or = db_or();

    $joined_tables = array();
    for ($i = 0, $length = count($field_names); $i < $length; $i++) {
      $field_name = unserialize($field_names[$i]);
      $table_name = 'field_data_' . $field_name;
      $table_alias = 't' . $i;
      $condition = 'n.nid = ' . $table_alias . '.entity_id';

      if (isset($joined_tables[$table_name])) {
        $table_alias = $joined_tables[$table_name];
      }
      else {
        $joined_tables[$table_name] = $table_alias;
        $query->leftJoin($table_name, $table_alias, $condition);
      }

      $variable_names = array_keys($module_variables);
      $bundle_name = commerce_prodnodelink_extract_bundle_from_variable_name($variable_names[$i]);

      $or->condition(
        db_and()
          ->condition($table_alias . '.' . $field_name . '_product_id', $product->product_id, '=')
          ->condition($table_alias . '.bundle', $bundle_name, '=')
      );
    }

    $query->condition($or);
    $results = $query->execute();

    foreach ($results as $record) {
      $node_ids[] = $record->nid;
    }
  }

  return $node_ids;
}


/**
 * Implements hook_views_default_views_alter().
 *
 * Add the newly defined links property that's been exposed as a Views field
 * to the default Drupal Commerce 'Products' Views view
 */
function commerce_prodnodelink_views_default_views_alter(&$views) {
  $handler =& $views['commerce_products']->display['default']->handler;

  $handler->display->display_options['fields']['display_node_ids']['id'] = 'display_node_ids';
  $handler->display->display_options['fields']['display_node_ids']['table'] = 'views_entity_commerce_product';
  $handler->display->display_options['fields']['display_node_ids']['field'] = 'display_node_ids';
  $handler->display->display_options['fields']['display_node_ids']['list']['mode'] = 'list';
  $handler->display->display_options['fields']['display_node_ids']['link_to_entity'] = 0;
}


/**
 * Implements MODULE_preprocess_HOOK().
 *
 * Alter the line item info displayed by the 'Line items' View. The 'Title'
 * column value is available here as one string whereas in other hooks it's not.
 */
function commerce_prodnodelink_preprocess_views_view_table(&$variables) {
  if ($variables['view']->name == 'commerce_line_item_table') {
    $pattern = '/^admin\/commerce\/orders\/\d+(\/view)?$/';

    if (preg_match($pattern, current_path())) {
      $prod_titles_as_links = variable_get('commerce_prodnodelink_conf_line_item_view_prod_title_links', 1);

      if ($prod_titles_as_links) {
        $product_types = commerce_product_types();

        foreach ($variables['rows'] as $index => &$row) {
          $type = $variables['view']->result[$index]->commerce_line_item_type;

          if (in_array($type, array_keys($product_types))) {
            $title = $row['line_item_title'];

            $entity_type = $variables['view']->result[$index]->_field_data['line_item_id']['entity_type'];
            $entity = $variables['view']->result[$index]->_field_data['line_item_id']['entity'];

            $wrapper = entity_metadata_wrapper($entity_type, $entity);
            $product_id = $wrapper->commerce_product->product_id->value();

            $row['line_item_title'] = l($title, 'admin/commerce/products/' . $product_id);
          }
        }
      }
    }
  }
}


/**
 * Implements MODULE_preprocess_HOOK().
 *
 * Alter line item information before default theme function
 * theme_commerce_line_item_manager(), uses it.
 */
function commerce_prodnodelink_preprocess_commerce_line_item_manager(&$variables) {
  $prod_titles_as_links = variable_get('commerce_prodnodelink_conf_li_manager_prod_title_links', 1);

  if ($prod_titles_as_links) {
    $product_types = commerce_product_types();
    $elements = element_children($variables['form']['line_items']);

    foreach ($elements as $index => $line_item_id) {
      $wrapper = entity_metadata_wrapper('commerce_line_item', $line_item_id);
      $line_item_type = $wrapper->type->value();

      if (in_array($line_item_type, array_keys($product_types))) {
        $product_id = $wrapper->commerce_product->product_id->value();
        $title = $variables['form']['line_items'][$line_item_id]['title']['#markup'];

        $variables['form']['line_items'][$line_item_id]['title']['#markup'] = l($title, 'admin/commerce/products/' . $product_id);
      }
    }
  }
}


/**
 * Implements hook_views_api().
 */
function commerce_prodnodelink_views_api() {
  return array(
    'api' => 3,
  );
}


/**
 * Return array listing product reference fields and bundles they're used in.
 */
function commerce_prodnodelink_product_reference_field_info() {
  $ref_field_info = array();
  // field_info_field_map() only available >= Drupal 7.22
  if (function_exists('field_info_field_map')) {
    $field_map = field_info_field_map();

    foreach ($field_map as $field_name => $field_info) {
      if ($field_info['type'] == 'commerce_product_reference') {
        if (isset($field_info['bundles']['node'])) {
          $ref_field_info[$field_name] = $field_info['bundles']['node'];
        }
      }
    }
  }
  else {
    $node_types = node_type_get_types();

    foreach ($node_types as $name => $info) {
      $instances = field_info_instances('node', $name);

      foreach ($instances as $field) {
        $field_info = field_info_field($field['field_name']);

        if ($field_info['type'] == 'commerce_product_reference') {
          $ref_field_info[$field['field_name']] = $field_info['bundles']['node'];
        }
      }
    }
  }

  return $ref_field_info;
}


/**
 * Return array, keyed by node type, listing reference fields used by that type.
 */
function commerce_prodnodelink_product_reference_field_by_node_type() {
  $fields = commerce_prodnodelink_product_reference_field_info();
  $node_types = array();

  if ($fields) {
    foreach ($fields as $field_name => $node_bundles) {
      foreach ($node_bundles as $bundle) {
        $instance = field_info_instance('node', $field_name, $bundle);

        $data = array(
          'name' => $field_name,
          'instance_id' => $instance['id'],
        );

        if (isset($node_types[$bundle])) {
          $node_types[$bundle][] = $data;
        }
        else {
          $node_types[$bundle] = array($data);
        }
      }
    }
  }

  return $node_types;
}


/**
 * Get the module stored variable name, given a field name.
 *
 * @param array $instance
 *   Drupal field instance.
 *
 * @return string
 *   Module variable name storing the field.
 */
function commerce_prodnodelink_get_variable_name($instance) {
  return 'commerce_prodnodelink_data_' . $instance['bundle'] . '_' . $instance['id'];
}


/**
 * Extract a bundle name from a module stored variable name.
 *
 * @param string $var_name
 *   Name of variable created by the module.
 *
 * @return string
 *   A bundle name.
 */
function commerce_prodnodelink_extract_bundle_from_variable_name($var_name) {
  $bundle_name = '';
  $pattern = '/^(commerce_prodnodelink_data_)(.+)(_\d+)$/';

  if (preg_match($pattern, $var_name, $matches)) {
    $bundle_name = $matches[2];
  }

  return $bundle_name;
}

/**
 * Get the module defined variables, optionally filtered by type.
 *
 * @param string $type
 *   Optional filter for the variable type to return. 'conf' and 'data' are
 *   valid. Defaults to 'all'.
 *
 * @return array
 *   An array of variable names that the module has created.
 */
function commerce_prodnodelink_vars($type = 'all') {
  $vars = array();
  $var_name_pattern = 'commerce_prodnodelink_%';

  if ($type != 'all') {
    $var_name_pattern = 'commerce_prodnodelink_' . $type . '_%';
  }

  $query = db_select('variable', 'v')
    ->fields('v')
    ->condition('v.name', $var_name_pattern, 'LIKE');

  $results = $query->execute();

  foreach ($results as $record) {
    $vars[$record->name] = $record->value;
  }

  return $vars;
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function commerce_prodnodelink_form_commerce_product_ui_product_form_alter(&$form, &$form_state, $form_id) {
  $show_links = variable_get('commerce_prodnodelink_conf_links_on_ui_product_form', 1);

  if ($show_links && isset($form['#entity']->product_id)) {
    $product_wrapper = entity_metadata_wrapper('commerce_product', $form['#entity']->product_id);

    if ($nids = $product_wrapper->display_node_ids->value()) {
      $form['commerce_prodnodelink'] = array(
        '#type' => 'fieldset',
        '#title' => t('Product display node(s)'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
      );

      $items = array();

      foreach ($nids as $nid) {
        $items[] = l(t('Node @nid', array('@nid' => $nid)), 'node/' . $nid);
      }

      $form['commerce_prodnodelink']['display_nodes'] = array(
        array(
          '#theme' => 'item_list',
          '#items' => $items,
        ),
      );
    }
  }
}
