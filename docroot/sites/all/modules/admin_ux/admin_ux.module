<?php

/**
 * @file
 * Improves the administrative user experience.
 *
 * @todo Total time of batch test run is often "0 sec."
 * @todo Change the design of test overview; running multiple tests or groups is
 *   rarely done, you usually run one test or group; optimize for that. Also,
 *   test descriptions could be rendered below the label instead of an own
 *   column (ditch the table?).
 */

/**
 * Implements hook_form_FORMID_alter().
 *
 * @see admin_ux_simpletest_test_form_submit()
 */
function admin_ux_form_simpletest_test_form_alter(&$form, &$form_state, $form_id) {
  // UX: Allow to run a single test with a single click.
  $form['#attached']['js'][] = drupal_get_path('module', 'admin_ux') . '/admin_ux.js';

  // DX: Output the internal class name for each test case.
  // drupal.org's testbot only outputs the internal class name, so it is often
  // required to grep the code base to find the name of the failing test case.
  foreach (element_children($form['tests']['table']) as $group) {
    foreach (element_children($form['tests']['table'][$group]) as $testname) {
      $test = &$form['tests']['table'][$group][$testname];
      $test['#description'] = '<strong>' . check_plain($testname) . '</strong> ' . $test['#description'];
    }
  }

  // UX: Output recently executed test groups separately above all test groups.
  // Most often, developers are repetitively executing the same tests or same
  // test group, so having to scan through the full list each time is a major
  // waste of time and energy.
  // @todo Nice variable namespacing idea, but use a cache per user instead.
  $recent = variable_get('admin_ux.simpletest.usage', array());

  if (!empty($recent)) {
    // Duplicate the Tests table.
    $form['tests']['recent'] = array_intersect_key($form['tests']['table'], array_flip(element_properties($form['tests']['table'])));
    $form['tests']['recent']['#weight'] = -10;
    // Uncollapse the most recent test group.
    $most_recent = key($recent);
    // We want to move entire groups, but we only know class names.
    foreach (element_children($form['tests']['table']) as $group) {
      // Check whether the group contains a recently executed class name.
      // Class names cannot contain #properties, so array_intersect_keys() is
      // faster than element_children().
      if (array_intersect_key($form['tests']['table'][$group], $recent)) {
        $form['tests']['recent'][$group] = $form['tests']['table'][$group];
        unset($form['tests']['table'][$group]);

        // Uncollapse the most recent test group.
        if (isset($form['tests']['recent'][$group][$most_recent])) {
          $form['tests']['recent'][$group]['#collapsed'] = FALSE;
        }
      }
    }
    // Duplicate the 'Run tests' submit button as well.
    $form['tests']['recent_run'] = $form['tests']['op'];
    $form['tests']['recent_run']['#weight'] = -9;
  }
  $form['#submit'][] = 'admin_ux_simpletest_test_form_submit';
}

/**
 * Form submit handler for simpletest_test_form().
 *
 * Stores selected tests as recently ran tests.
 *
 * @see admin_ux_form_simpletest_test_form_alter()
 */
function admin_ux_simpletest_test_form_submit($form, &$form_state) {
  form_state_values_clean($form_state);
  $new = array_keys(array_filter($form_state['values']));
  $recent = variable_get('admin_ux.simpletest.usage', array());
  // Forget tests not run for more than a week.
  foreach ($recent as $class => $last_used) {
    if (REQUEST_TIME - $last_used > 60 * 60 * 24 * 7) {
      unset($recent[$class]);
    }
  }
  // Prepend new tests to recent tests.
  $recent = array_fill_keys($new, REQUEST_TIME) + $recent;
  variable_set('admin_ux.simpletest.usage', $recent);
}

/**
 * Implements hook_form_FORMID_alter().
 */
function admin_ux_form_simpletest_result_form_alter(&$form, &$form_state, $form_id) {
  // @todo Needs to come first, or Simpletest spits out "No leftover tables to
  //   remove." and "No results to display." messages, but why?
  array_unshift($form['#submit'], 'admin_ux_simpletest_result_form_submit');
}

/**
 * Form submit handler for simpletest_result_form().
 *
 * Automatically clears out environment and test results from previous test
 * runs, making manual clearing after fatal errors (mostly) obsolete.
 *
 * @see simpletest_clean_environment()
 */
function admin_ux_simpletest_result_form_submit($form, &$form_state) {
  // simpletest_clean_environment() also rebuilds the registry, stupid.
  simpletest_clean_database();
  simpletest_clean_temporary_directories();
  if ($count = simpletest_clean_results_table()) {
    drupal_set_message(format_plural($count, 'Removed 1 test result.', 'Removed @count test results.'));
  }
}
