<?php
/**
 * @file
 * Provides a volume (bulk) pricing option for Ubercart Products
 *
 * Version: 1.x
 * Drupal Core: 7.x
 * Ubercart Core: 3.x
 *
 * Original code by Acro Media Inc (http://www.acromediainc.com)
 */

/******************************************************************************
* Drupal hooks                                                               *
******************************************************************************/

/**
 * Implements hook_menu().
 */
function uc_volume_pricing_menu() {
  $items = array();

  $items['admin/store/settings/volume_pricing'] = array(
    'title' => 'Volume Pricing',
    'description' => 'Configure the volume pricing module settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_volume_pricing_admin'),
    'access arguments' => array('administer store'),
    'file' => 'uc_volume_pricing.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_node_load().
 */
function uc_volume_pricing_node_load($nodes, $types) {

  $product_types = array_intersect(uc_product_types(), $types);

  if (empty($product_types)) {
    return;
  }

  foreach ($nodes as $node) {
    if (uc_product_is_product($node->type)) {
      $node->volume_pricing = array();
      $results = db_query("SELECT * FROM {uc_volume_pricing} WHERE nid=:nid AND vid=:vid ORDER BY min ASC", array(':nid' => $node->nid, ':vid' => $node->vid));
      $i = 0;
      foreach ($results as $volume_set) {
        $node->volume_pricing[$i]['min'] = $volume_set->min;
        $node->volume_pricing[$i]['price'] = $volume_set->price;
        $i++;
      }
    }
  }
}

/**
 * Implements hook_node_validate().
 */
function uc_volume_pricing_node_validate($node, $form, &$form_state) {
  if (uc_product_is_product($node->type)) {
    $node->volume_pricing = array();
    $i = 0;
    while (!empty($form_state['values']['volume-set' . $i])) {
      $node->volume_pricing[$i]['min'] = $form_state['values']['volume-set' . $i]['min'];
      $node->volume_pricing[$i]['price'] = $form_state['values']['volume-set' . $i]['price'];
      $i++;
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function uc_volume_pricing_node_insert($node) {
  uc_volume_pricing_node_update($node);
}

/**
 * Implements hook_node_update().
 */
function uc_volume_pricing_node_update($node) {
  if (uc_product_is_product($node->type)) {
    if (empty($node->revision)) {
      db_delete('uc_volume_pricing')
        ->condition('vid', $node->vid)
        ->execute();
    }

    foreach ($node->volume_pricing as $volume_set) {
      if (isset($volume_set['min']) && $volume_set['min'] > 0) {
        db_insert('uc_volume_pricing')
          ->fields(array(
            'nid' => $node->nid,
            'vid' => $node->vid,
            'min' => $volume_set['min'],
            'price' => $volume_set['price'],
          ))
          ->execute();
      }
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function uc_volume_pricing_node_delete($node) {
  db_delete('uc_volume_pricing')
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * Implements hook_node_revision_delete().
 */
function uc_volume_pricing_node_revision_delete($node) {
  db_delete('uc_volume_pricing')
    ->condition('vid', $node->vid)
    ->execute();
}

/**
 * Implements hook_views_api().
 */
function uc_volume_pricing_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'uc_volume_pricing') . '/views',
  );
}

/******************************************************************************
 * Hook Functions (Ubercart)                                                  *
 ******************************************************************************/

/**
 * Implements hook_uc_cart_alter().
 */
function uc_volume_pricing_uc_cart_alter(&$items) {
  foreach ($items as $product) {
    $volume_price = db_query("SELECT price FROM {uc_volume_pricing} WHERE vid=:vid AND min <= :min ORDER BY price ASC LIMIT 1", array(':vid' => $product->vid, ':min' => $product->qty))->fetchField();
    if ($volume_price > 0) {
      $product->price = $volume_price;
    }
  }
}

/**
 * Implements hook_form_uc_cart_view_form_alter().
 */
function uc_volume_pricing_form_uc_cart_view_form_alter(&$form, &$form_state) {
  $form['#attached']['css'][] = drupal_get_path('module', 'uc_volume_pricing') . '/css/uc_volume_pricing.css';

  if (variable_get('uc_volume_pricing_show_in_cart', TRUE)) {
    $num_rows = 0;
    foreach (element_children($form['items']) as $i) {
      if (!empty($form['items'][$i]['nid'])) {
        $product = uc_product_load_variant($form['items'][$i]['nid']['#value']);
        $volume_set = db_query("SELECT price,min FROM {uc_volume_pricing} WHERE vid=:vid AND min>:min ORDER BY min ASC", array(':vid' => $product->vid, ':min' => $form['items'][$i]['qty']['#default_value']))->fetchObject();
        if (!empty($volume_set) && $form['items'][$i]['qty']['#default_value'] < $volume_set->min) {
          $remaining = ($volume_set->min - $form['items'][$i]['qty']['#default_value']);
          $savings = uc_currency_format($product->sell_price - $volume_set->price);
          $message = variable_get('uc_volume_pricing_cart_message', 'Purchase [remaining] more <strong>[product_title]</strong> and save an additional [savings] per item!');
          
          // If quantity is not in the custom message, don't bother with format_plural
          if(strpos($message, '[remaining]') !== FALSE) {
            $message_singular = str_replace(array('[remaining]', '[product_title]', '[savings]'), array('1', '!title', '!savings'), $message);
            $message_plural = str_replace(array('[remaining]', '[product_title]', '[savings]'), array('@count', '!titles', '!savings'), $message);
            $alert[] = format_plural($remaining, $message_singular, $message_plural, array('!title' => $product->title, '!savings' => $savings));
          }
          else {
            $message = str_replace(array('[product_title]', '[savings]'), array('!titles', '!savings'), $message);
            $alert[] = t($message, array('!title' => $product->title, '!savings' => $savings));
          }
          
        }
      }
      $num_rows++;
    }
    // Add in the cart alert.
    if (!empty($alert)) {
      $working_row = $num_rows - 1;
      $subtotal_row = $form['items'][$working_row];

      $html = '<div class="volume-alert">' . implode("<br/>", $alert) . '</div>';
      $form['items'][$working_row]['total'] = array(
        '#cell_attributes' => array(
          'colspan' => 'full',
          'class' => array('total'),
        ),
        '#markup' => $html,
      );
      $working_row++;
      // Add the subtotal line back in.
      $form['items'][$working_row] = $subtotal_row;
    }
  }
}

/******************************************************************************
 * Callback Functions, Forms, and Tables                                      *
 ******************************************************************************/

/**
 * Implements hook_form_alter().
 */
function uc_volume_pricing_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['#node_edit_form']) && uc_product_is_product($form['type']['#value'])) {
    $form['base']['volume_pricing'] = array(
      '#type' => 'fieldset',
      '#tree' => TRUE,
      '#title' => t('Volume Pricing'),
      '#prefix' => '<div id="volume-pricing-wrapper">',
      '#suffix' => '</div>',
      '#weight' => 6,
    );

    $count = 0;
    $result = db_query("SELECT * FROM {uc_volume_pricing} WHERE nid=:nid AND vid=:vid ORDER BY min ASC", array(':nid' => $form['nid']['#value'], ':vid' => $form['vid']['#value']));

    foreach ($result as $volume_set) {
      $form['base']['volume_pricing']['volume-set' . $count] = array(
        '#type' => 'fieldset',
        '#title' => 'Option ' . ($count + 1),
        '#tree' => TRUE,
      );
      $form['base']['volume_pricing']['volume-set' . $count]['min'] = array(
        '#type' => 'textfield',
        '#title' => 'Min Quantity',
        '#default_value' => $volume_set->min,
      );
      $form['base']['volume_pricing']['volume-set' . $count]['price'] = array(
        '#type' => 'textfield',
        '#title' => 'Price Each',
        '#default_value' => $volume_set->price,
      );
      $count++;
    }

    if (empty($form_state['volume_fields'])) {
      $form_state['volume_fields'] = ($count > 0) ? $count : 1;
    }

    for ($i = $count; $i < $form_state['volume_fields']; $i++) {
      $form['base']['volume_pricing']['volume-set' . $i] = array(
        '#type' => 'fieldset',
        '#title' => 'Option ' . ($i + 1),
        '#tree' => TRUE,
      );
      $form['base']['volume_pricing']['volume-set' . $i]['min'] = array(
        '#type' => 'textfield',
        '#title' => 'Min Quantity',
      );
      $form['base']['volume_pricing']['volume-set' . $i]['price'] = array(
        '#type' => 'textfield',
        '#title' => 'Price Each',
      );
    }

    $form['base']['volume_pricing']['add_item'] = array(
      '#type' => 'submit',
      '#value' => t('Add Another Item'),
      '#submit' => array('uc_volume_pricing_add_item'),
      '#ajax' => array(
        'callback' => 'uc_volume_pricing_ajax_callback',
        'wrapper' => 'volume-pricing-wrapper',
      ),
    );

  }
}

/**
 * Ajax Callback for the form.
 *
 * @param array $form
 *   The form being passed in
 * @param array $form_state
 *   The form state
 * 
 * @return array
 *   The form element we are changing via ajax
 */
function uc_volume_pricing_ajax_callback($form, $form_state) {
  return $form['base']['volume_pricing'];
}

/**
 * Functionality for our ajax callback.
 *
 * @param array $form
 *   The form being passed in
 * @param array $form_state
 *   The form state, passed by reference so we can modify
 */
function uc_volume_pricing_add_item($form, &$form_state) {
  $form_state['volume_fields']++;
  $form_state['rebuild'] = TRUE;
}
