<?php

/**
 * @file
 * This module integrate a payment method called Khipu.
 */

define('KHIPU_ENVIRONMENT_UNKNOWN', 0);
define('KHIPU_ENVIRONMENT_DEV', 1);
define('KHIPU_ENVIRONMENT_PROD', 2);

/**
 * Implements hook_permission().
 */
function khipu_permission() {
  return array(
    'khipu administer' => array(
      'title' => t('Administer khipu'),
      'restrict access' => TRUE,
    ),
  );
}


/**
 * Implements hook_menu().
 */
function khipu_menu() {
  $items['admin/config/khipu'] = array(
    'title' => 'Khipu',
    'description' => 'Khipu Settings.',
    'position' => 'right',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('khipu administer'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/config/khipu/settings'] = array(
    'title' => 'Settings Khipu',
    'description' => 'Configure general parameters of khipu',
    'page arguments' => array('khipu_admin_settings_form'),
    'page callback' => 'drupal_get_form',
    'access arguments' => array('khipu administer'),
    'file' => 'khipu.admin.inc',
    'weight' => 1,
  );
  $items['admin/config/khipu/accounts'] = array(
    'title' => 'Accounts Khipu',
    'description' => 'Manage all khipu accounts on the system.',
    'page callback' => 'khipu_admin_accounts',
    'access arguments' => array('khipu administer'),
    'file' => 'khipu.admin.inc',
    'weight' => 2,
  );
  $items['admin/config/khipu/accounts/add'] = array(
    'title' => 'Add Khipu Account',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('khipu_admin_account_form'),
    'access arguments' => array('khipu administer'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'khipu.admin.inc',
  );
  $items['admin/config/khipu/accounts/%khipu_account/test'] = array(
    'title' => 'Test Khipu Account',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('khipu_admin_test_account', 4),
    'access arguments' => array('khipu administer'),
    'type' => MENU_CALLBACK,
    'file' => 'khipu.admin.inc',
  );
  $items['admin/config/khipu/accounts/%khipu_account/edit'] = array(
    'title' => 'Edit Khipu Account',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('khipu_admin_account_form', 4),
    'access arguments' => array('khipu administer'),
    'type' => MENU_CALLBACK,
    'file' => 'khipu.admin.inc',
  );
  $items['admin/config/khipu/accounts/%khipu_account/delete'] = array(
    'title' => 'Delete Khipu Account',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('khipu_admin_account_delete_form', 4),
    'access arguments' => array('khipu administer'),
    'type' => MENU_CALLBACK,
    'file' => 'khipu.admin.inc',
  );
  $items['khipu/listen-notification/%/%khipu_account'] = array(
    'title' => 'Notification from Khipu',
    'page callback' => 'khipu_listen_notification',
    'page arguments' => array(2, 3),
    'access callback' => 'khipu_access_listen_notification',
    'file' => 'khipu.pages.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}


/**
 * Access callback for khipu/listen-notification.
 */
function khipu_access_listen_notification() {
  return TRUE;
}


/**
 * Form to redirect to the payment page of khipu.
 *
 * @param array $form
 *   Form element.
 * @param array $form_state
 *   Form_state element.
 * @param array $data
 *   Data to use on redirect and in other place.
 * @param int $kaid
 *   The khipu account ID.
 * @param string $instance_id
 *   The instance ID that uses the payment.
 * @param string $button
 *   Button name to be used.
 * @param bool $ajax
 *   Defines whether to use ajax for redirection.
 */
function khipu_redirect_form($form, $form_state, $data, $kaid, $instance_id, $button = '100x25', $ajax = TRUE) {
  $khipu_account = khipu_account_load($kaid);
  if ($khipu_account) {
    $data['kaid'] = $kaid;
    $data['instance_id'] = $instance_id;
    $data['notify_url'] = url('khipu/listen-notification/' . $instance_id . '/' . $kaid, array('absolute' => TRUE));
    $data['environment'] = $khipu_account->environment;
    // Load Khipu library.
    if (!khipu_load_class()) {
      return $form;
    }
    $khipu = new Khipu();
    // Authenticate.
    $khipu->authenticate($khipu_account->receiver_id, $khipu_account->receiver_key);
    // Load the service to create a payment page.
    $khipu_service = $khipu->loadService('CreatePaymentPage');
    // We capture the parameter list must be defined in the service.
    $parameters = $khipu_service->getParametersNames();
    foreach ($data as $name => $value) {
      // If found from $data, set it on hidden input.
      if (in_array($name, $parameters)) {
        $form[$name] = array(
          '#type' => 'hidden',
          '#value' => $value,
        );
      }
      else {
        $form[$name] = array(
          '#type' => 'value',
          '#value' => $value,
        );
      }
    }
    $buttons = khipu_get_buttons();
    // If the button name is found on button list. Then will be use the
    // image button.
    if (isset($buttons[$button])) {
      $form['submit'] = array(
        '#type' => 'image_button',
        '#src' => $buttons[$button],
      );
    }
    else {
      $form['submit'] = array(
        '#type' => 'submit',
        '#value' => $button,
      );
    }
    $form['submit']['#weight'] = 100;

    if ($ajax) {
      $form['submit']['#ajax'] = array(
        'callback' => 'khipu_redirect_form_submit_ajax',
        'progress' => array(
          'message' => t('Processing...'),
          'type' => 'throbber',
        ),
      );
    }
    else {
      // As was defined ajax is not required for redirection, then set the
      // value to action and ends attach to redirect missing values.
      $form['#action'] = Khipu::getUrlService('CreatePaymentPage');
      $khipu_service->setParameters($data);
      $new_data = $khipu_service->getFormLabels();
      $form['receiver_id'] = array(
        '#type' => 'hidden',
        '#value' => $khipu_account->receiver_id,
      );
      $form['hash'] = array(
        '#type' => 'hidden',
        '#value' => $new_data['hash'],
      );
    }
  }
  else {
    // If no exists a khipu account.
    drupal_set_message(t('No account of Khipu'), 'error');
  }

  return $form;
}


/**
 * Menu callback for AJAX.
 *
 * If all validations pass, then is recalculated if the parameters were
 * changed by the user. Then invoke the javascript that contains the
 * plugin khipuRedirect.
 */
function khipu_redirect_form_submit_ajax($form, &$form_state) {
  $vals = $form_state['values'];
  $errors = form_get_errors();
  if (empty($errors)) {
    if (!khipu_load_class()) {
      return array();
    }
    drupal_alter('khipu_data', $vals);
    $khipu_account = khipu_account_load($vals['kaid']);

    $khipu = new Khipu();
    // Authenticate.
    $khipu->authenticate($khipu_account->receiver_id, $khipu_account->receiver_key);
    // Load the service to create a payment page.
    $khipu_service = $khipu->loadService('CreatePaymentPage');
    foreach ($vals as $name => $value) {
      $khipu_service->setParameter($name, $value);
    }
    $data_form = $khipu_service->getFormLabels();
    $path = drupal_get_path('module', 'khipu');
    // Load the khipu.js file.
    drupal_add_js($path . '/js/khipu.js');
    $setting = array(
      'khipu' => array(
        'actionForm' => $khipu_service->getApiUrl(),
      ),
    );
    // Define in drupal settings the url for the action attribute.
    drupal_add_js($setting, 'setting');
    $commands[] = ajax_command_invoke(NULL, 'khipuRedirect', array($data_form));
    module_invoke_all('khipu_user_redirect', $khipu_account, $data_form, $vals['instance_id']);
  }
  else {
    $commands[] = ajax_command_replace('#' . $form['#id'], drupal_render($form));
    $commands[] = ajax_command_prepend('#' . $form['#id'], theme('status_messages'));
  }

  return array('#type' => 'ajax', '#commands' => $commands);
}


/**
 * Implements hook_khipu_verified().
 */
function khipu_khipu_verified($instance_id) {
  if ($instance_id == 'khipu') {
    watchdog('Khipu', 'Khipu notification for Test');
  }

}


/**
 * Implements hook_libraries_info().
 */
function khipu_libraries_info() {
  return array(
    'Khipu' => array(
      'name' => 'Khipu',
      'vendor url' => 'https://github.com/Tifon-/Khipu',
      'download url' => 'https://github.com/Tifon-/Khipu/tree/v1.1.1',
      'version callback' => 'khipu_get_version',
      'path' => 'src',
      'files' => array(
        'php' => array(
          'Khipu.php',
        ),
      ),
    ),
  );
}


/**
 * Version Callback.
 */
function khipu_get_version() {
  return '1.1.1';
}


/**
 * Load khipu library.
 */
function khipu_load_class() {
  $library = libraries_load('Khipu');
  if ($library && !empty($library['loaded'])) {
    return TRUE;
  }
  else {
    $message = t('The Khipu library was not found! Please following the instructions from the README.txt to get the library.');
    drupal_set_message(check_plain($message), $type = 'error');
  }

  return FALSE;
}


/**
 * Get all enviroments of khipu.
 */
function khipu_get_environments() {
  return array(
    KHIPU_ENVIRONMENT_UNKNOWN => t('Unknown'),
    KHIPU_ENVIRONMENT_DEV     => t('Developer'),
    KHIPU_ENVIRONMENT_PROD    => t('Production'),
  );
}


/**
 * Returns an array with all the buttons available.
 */
function khipu_get_buttons() {
  $buttons = module_invoke_all('khipu_buttons');
  return $buttons;
}


/**
 * Implements hook_khipu_buttons().
 */
function khipu_khipu_buttons() {
  if (khipu_load_class()) {
    return Khipu::getButtonsKhipu();
  }
  return array();
}


/**
 * Load all khipu accounts.
 *
 * @return array
 *   An array of khipu account objects.
 */
function khipu_get_all_accounts() {
  return db_select('khipu_accounts', 'ka')
    ->fields('ka')
    ->execute()
    ->fetchAll();
}


/**
 * Load a khipu account object from the database.
 *
 * @param int $kaid
 *   The khipu account ID.
 *
 * @return mixed
 *   A khipu account or FALSE
 */
function khipu_account_load($kaid) {
  return db_select('khipu_accounts', 'ka')
    ->fields('ka')
    ->condition('kaid', $kaid)
    ->execute()
    ->fetchObject();
}


/**
 * Loads all khipu accounts object by uid.
 *
 * @param int $uid
 *   The user ID.
 *
 * @return array
 *   An array of khipu account objects.
 */
function khipu_account_load_by_uid($uid) {
  return db_select('khipu_accounts', 'ka')
    ->fields('ka')
    ->condition('uid', $uid)
    ->execute()
    ->fetchAll();
}


/**
 * Saves a khipu account.
 *
 * @param mixed $account
 *   It can be an array or an object in a khipu account
 */
function khipu_save_account(&$account) {
  $schema = drupal_get_schema('khipu_accounts');
  $fields = array_keys($schema['fields']);
  if (is_object($account)) {
    $array_account = (array) $account;
  }
  else {
    $array_account = $account;
  }
  foreach ($array_account as $key => $value) {
    if (!in_array($key, $fields)) {
      unset($array_account[$key]);
    }
  }
  if (!isset($array_account['kaid'])) {
    $account->kaid = db_insert('khipu_accounts')
      ->fields($array_account)
      ->execute();
  }
  else {
    unset($array_account['kaid']);
    db_update('khipu_accounts')
      ->fields($array_account)
      ->condition('kaid', $account->kaid)
      ->execute();
  }

  if (!$account->environment) {
    khipu_set_environment_account($account);
  }
}


/**
 * Checks the credentials.
 *
 * @param mixed $receiver_id
 *   The ID of the account in Khipu.
 * @param mixed $receiver_key
 *   The Key of the account in Khipu.
 *
 * @return mixed
 *   The environment or FALSE if not exist.
 */
function khipu_check_account($receiver_id, $receiver_key) {
  if (khipu_load_class()) {
    $khipu = new Khipu();
    $khipu->authenticate($receiver_id, $receiver_key);
    $service = $khipu->loadService('ReceiverStatus');
    $response = json_decode($service->consult());
    if (isset($response->error)) {
      return FALSE;
    }
    // If the account is ready to collect, then we can use it.
    if ($response->ready_to_collect) {
      switch ($response->type) {
        case 'development':
          $environment = KHIPU_ENVIRONMENT_DEV;
          break;

        case 'production':
          $environment = KHIPU_ENVIRONMENT_PROD;
          $type_message = 'status';
          break;
      }

      return $environment;
    }
  }

  return FALSE;
}


/**
 * Set the environment of a khipu account.
 *
 * @param object $khipu_account
 *   The Khipu Account object.
 */
function khipu_set_environment_account($khipu_account) {
  $environment = KHIPU_ENVIRONMENT_UNKNOWN;
  $environments = khipu_get_environments();
  $type_message = 'warning';
  if (khipu_load_class()) {
    $khipu = new Khipu();
    $khipu->authenticate($khipu_account->receiver_id, $khipu_account->receiver_key);
    $service = $khipu->loadService('ReceiverStatus');
    $response = json_decode($service->consult());
    // If the account is ready to collect, then we can use it.
    if ($response->ready_to_collect) {
      switch ($response->type) {
        case 'development':
          $environment = KHIPU_ENVIRONMENT_DEV;
          break;

        case 'production':
          $environment = KHIPU_ENVIRONMENT_PROD;
          $type_message = 'status';
          break;

      }
    }
  }

  db_update('khipu_accounts')
    ->fields(array(
      'environment' => $environment,
    ))
    ->condition('kaid', $khipu_account->kaid)
    ->execute();

  drupal_set_message(t('The account was saved, the environment for this account is @env', array('@env' => $environments[$environment])), $type_message);
}


/**
 * Deletes an account from the database.
 *
 * @param int $kaid
 *   The khipu account ID.
 */
function khipu_delete_account($kaid) {
  db_delete('khipu_accounts')
    ->condition('kaid', $kaid)
    ->execute();
}


/**
 * Structure of the amount for the form field.
 *
 * @param int $default_value
 *   Default Amount.
 * @param bool $required
 *   Define if the amount is required.
 *
 * @return array
 *   Returns the element of the amount.
 */
function khipu_element_amount_form($default_value = 0, $required = FALSE) {
  return array(
    '#type' => 'textfield',
    '#title' => t('Amount'),
    '#default_value' => $default_value,
    '#size' => 7,
    '#maxlength' => 7,
    '#field_prefix' => '$',
    '#element_validate' => array('element_validate_integer_positive'),
    '#required' => $required,
  );
}
