<?php

/**
 * @file
 * Implements the payment button like a field to any entities with a mini
 * system for orders.
 */

define('KHIPU_FIELD_STATUS_CREATED', 0);
define('KHIPU_FIELD_STATUS_PENDING', 1);
define('KHIPU_FIELD_STATUS_COMPLETED', 2);

/**
 * Implements hook_permission().
 */
function khipu_field_permission() {
  return array(
    'administer order from khipu fields' => array(
      'title' => t('Administer Orders'),
    ),
  );
}


/**
 * Implements hook_menu().
 */
function khipu_field_menu() {
  $items['admin/config/khipu/khipu-field-orders'] = array(
    'title' => 'Khipu Field Orders',
    'description' => 'List of orders created by the system khipu Field',
    'page callback' => 'khipu_field_orders_page',
    'access arguments' => array('administer order from khipu fields'),
    'file' => 'khipu_field.pages.inc',
  );

  $items['khipu-field/return/%'] = array(
    'title' => 'Thanks you',
    'access callback' => TRUE,
    'page callback' => 'khipu_field_return_success',
    'page arguments' => array(2),
    'file' => 'khipu_field.pages.inc',
    'type' => MENU_CALLBACK,
  );

  if (module_exists('khipu_user')) {
    $items['user/%user/khipu_account'] = array(
      'title' => 'Khipu Accounts',
      'page callback' => 'khipu_field_khipu_accounts_by_user',
      'page arguments' => array(1),
      'access arguments' => array('user can setting a khipu account'),
      'type' => MENU_LOCAL_TASK,
      'file' => 'khipu_field.pages.inc',
    );
    $items['user/%user/khipu_account/%khipu_account'] = array(
      'title' => 'Received',
      'page callback' => 'khipu_field_user_page_received',
      'page arguments' => array(1, 3),
      'access arguments' => array(1, 3),
      'access callback' => 'khipu_user_page_setting_access',
      'file' => 'khipu_field.pages.inc',
    );
  }
  return $items;
}


/**
 * Implements hook_field_info().
 */
function khipu_field_field_info() {
  return array(
    'khipu_button_field' => array(
      'label' => t('Khipu Button Field'),
      'description' => t('Campo para crear un boton de pago Khipu.'),
      'instance_settings' => array(
        'body' => array(),
        'picture_url' => '',
        'user_author' => FALSE,
      ),
      'default_widget' => 'khipu_button_field_widget',
      'default_formatter' => 'khipu_button_formatter',
    ),
  );
}


/**
 * Implements hook_field_instance_settings_form().
 */
function khipu_field_field_instance_settings_form($field, $instance) {
  $settings = $instance['settings'];
  $options_body = array();
  $options_image = array(
    '' => t('No field'),
  );

  $fields = field_info_instances($instance['entity_type'], $instance['bundle']);
  foreach ($fields as $field_instance) {
    if ($field_instance['field_name'] != $field['field_name']) {
      $field_info = field_info_field($field_instance['field_name']);
      if (strpos($field_info['type'], 'text') === 0) {
        $options_body[$field_instance['field_name']] = $field_instance['label'];
      }
      elseif ($field_info['type'] == 'image') {
        $options_image[$field_instance['field_name']] = $field_instance['label'];
      }
    }
  }
  if (!empty($options_body)) {
    $form['body'] = array(
      '#type' => 'checkboxes',
      '#multiple' => TRUE,
      '#title' => t('Fields for Body Khipu'),
      '#description' => t('Select a field of type text to send the body of khipu'),
      '#options' => $options_body,
      '#default_value' => $settings['body'],
    );
  }
  else {
    $args = array(
      '@type' => $instance['bundle'],
    );
    $form['body'] = array(
      '#markup' => t('No text field in the bundle @type for use in khipu', $args),
    );
  }

  if (!empty($options_image)) {
    $form['picture_url'] = array(
      '#type' => 'select',
      '#title' => t('Image'),
      '#description' => t('Select the type field image to be displayed on the page of khipu.'),
      '#options' => $options_image,
      '#default_value' => $settings['picture_url'],
    );
  }
  else {
    $args = array(
      '@type' => $instance['bundle'],
    );
    $form['picture_url'] = array(
      '#markup' => t('No image in the bundle @type for use in khipu', $args),
    );
  }

  $form['user_author'] = array(
    '#type' => 'checkbox',
    '#title' => t('Set Account only from user Author'),
    '#default_value' => $settings['user_author'],
  );

  return $form;
}


/**
 * Implements hook_field_is_empty().
 */
function khipu_field_field_is_empty($item, $field) {
  return empty($item['amount']) || empty($item['subject']) || empty($item['kaid']) || ($item['kaid'] == 0);
}


/**
 * Implements hook_field_widget_info().
 */
function khipu_field_field_widget_info() {
  return array(
    'khipu_button_field_widget' => array(
      'label' => t('Khipu Button'),
      'field types' => array('khipu_button_field'),
    ),
  );
}


/**
 * Implements hook_field_widget_form().
 */
function khipu_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $settings = $instance['settings'];

  $amount = isset($items[$delta]['amount']) ? $items[$delta]['amount'] : '';
  $kaid = isset($items[$delta]['kaid']) ? $items[$delta]['kaid'] : 0;
  $subject = isset($items[$delta]['subject']) ? $items[$delta]['subject'] : '';

  if ($settings['user_author']) {
    global $user;
    $khipus = khipu_account_load_by_uid($user->uid);
  }
  else {
    $khipus = khipu_get_all_accounts();

  }

  $options_accounts = array(
    NULL => t('No Account'),
  );
  foreach ($khipus as $khipu) {
    $options_accounts[$khipu->kaid] = $khipu->receiver_name;
  }

  $element += array(
    '#type' => 'fieldset',
  );

  $element['kaid'] = array(
    '#type' => 'select',
    '#required' => $element['#required'],
    '#options' => $options_accounts,
    '#title' => t('Khipu Account'),
    '#default_value' => $kaid,
    '#description' => t('Select a khipu account.'),
  );
  $element['subject'] = array(
    '#type' => 'textfield',
    '#required' => $element['#required'],
    '#maxlength' => 255,
    '#title' => t('Subject'),
    '#default_value' => $subject,
    '#description' => t('Defines the subject of the payment.'),
  );

  $element['amount'] = khipu_element_amount_form($amount, $element['#required']);

  return $element;
}


/**
 * Implements hook_field_formatter_info().
 */
function khipu_field_field_formatter_info() {
  return array(
    'khipu_button_formatter' => array(
      'label' => t('Khipu Button'),
      'field types' => array('khipu_button_field'),
      'settings' => array(
        'button_image' => '100x25',
        'payer_email' => TRUE,
        'set_amount' => FALSE,
        'only_users_identified' => FALSE,
        'theme_form' => 'khipu_field_redirect_form_field',
      ),
    ),
  );
}


/**
 * Implements hook_field_formatter_settings_form().
 */
function khipu_field_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $buttons = khipu_get_buttons();
  $buttons_options = array();
  foreach ($buttons as $key => $button) {
    $buttons_options[$key] = $key;
  }
  $element['button_image'] = array(
    '#type' => 'select',
    '#title' => t('Button'),
    '#options' => $buttons_options,
    '#default_value' => $settings['button_image'],
  );

  $element['payer_email'] = array(
    '#type' => 'checkbox',
    '#title' => t('Email Field'),
    '#description' => t('Enable a field for Email'),
    '#default_value' => $settings['payer_email'],
  );

  $element['set_amount'] = array(
    '#type' => 'checkbox',
    '#title' => t('Set Amount'),
    '#description' => t('Enable a field for set amount'),
    '#default_value' => $settings['set_amount'],
  );

  $element['only_users_identified'] = array(
    '#type' => 'checkbox',
    '#title' => t('Only identified users can pay'),
    '#description' => t('Enable this option and the anonymous users can not pay'),
    '#default_value' => $settings['only_users_identified'],
  );

  $themes_form = module_invoke_all('khipu_field_theme_form_info');
  $element['theme_form'] = array(
    '#type' => 'select',
    '#title' => t('Theme Form'),
    '#description' => t('Theme for Field'),
    '#default_value' => $settings['theme_form'],
    '#options' => $themes_form,
  );

  return $element;
}


/**
 * Implements hook_field_formatter_settings_summary().
 */
function khipu_field_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  $buttons = khipu_get_buttons();

  if (isset($buttons[$settings['button_image']])) {
    $summary[] = t('Button Image: @size', array('@size' => $settings['button_image']));
    $summary[] = theme('image', array('path' => $buttons[$settings['button_image']]));
  }

  $yes = t('Yes');
  $no = t('No');
  $payer_email = $settings['payer_email'] ? $yes : $no;
  $summary[] = t('Email Field: @payer_email', array('@payer_email' => $payer_email));

  $set_amount = $settings['set_amount'] ? $yes : $no;
  $summary[] = t('Set Amount Field: @set_amount', array('@set_amount' => $set_amount));

  $only_users_identified = $settings['only_users_identified'] ? $yes : $no;
  $summary[] = t('Only identified users can pay: @only_users_identified', array('@only_users_identified' => $only_users_identified));

  $themes_form = module_invoke_all('khipu_field_theme_form_info');
  $summary[] = t('Theme form: @theme_form', array('@theme_form' => $themes_form[$settings['theme_form']]));

  return implode('<br />', $summary);
}


/**
 * Implements hook_field_formatter_view().
 */
function khipu_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  global $base_url;
  $settings = $display['settings'];

  if ($settings['only_users_identified']) {
    // Ok will see!
    global $user;
    if (!$user->uid) {
      $element[] = array(
        '#markup' => t('You must login to use khipu.'),
      );
      return $element;
    }
  }

  list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
  $element = array();
  $body = '';
  if (!empty($instance['settings']['body'])) {
    foreach ($instance['settings']['body'] as $field_for_body) {
      if ($field_for_body) {
        $get_values = field_get_items($entity_type, $entity, $field_for_body, $entity->language);
        foreach ($get_values as $value) {
          $body .= $value['value'];
        }
      }
    }
  }

  $picture_url = '';
  if (!empty($instance['settings']['picture_url'])) {
    $images = field_get_items($entity_type, $entity, $instance['settings']['picture_url'], $entity->language);
    if (isset($images[0]['uri'])) {
      $picture_url = file_create_url($images[0]['uri']);
    }
  }
  $element['#attached']['css'] = array(
    drupal_get_path('module', 'khipu_field') . '/css/khipu-field.css',
  );

  $option_url = array(
    'absolute' => TRUE,
  );

  foreach ($items as $delta => $item) {
    $data = array(
      'subject' => $item['subject'],
      'body' => $body,
      'amount' => $item['amount'],
      'transaction_id' => '',
      'payer_email' => '',
      'cancel_url' => url(variable_get('khipu_cancel_url', '<front>'), $option_url),
      'picture_url' => $picture_url,
      'custom' => 'khipu_field:' . $id . '-' . $entity_type . '-' . $bundle,
      'entity_type' => $entity_type,
      'entity_id' => $id,
    );
    $element[$delta] = drupal_get_form('khipu_field_redirect_form', $data, $item['kaid'], $settings);
  }

  return $element;
}


/**
 * Form to redirect user to Khipu.
 *
 * @param array $form
 *   Form element.
 * @param array $form_state
 *   Form status.
 * @param array $data
 *   Data to use on redirect and in other place.
 * @param int $kaid
 *   Identifier khipu account.
 */
function khipu_field_redirect_form($form, &$form_state, $data, $kaid, $settings) {
  global $user;
  if ($user->uid) {
    $payer_email = $user->mail;
  }
  else {
    $payer_email = '';
  }
  $form = khipu_redirect_form($form, $form_state, $data, $kaid, 'khipu_field', $settings['button_image']);
  $form['#attributes']['class'] = array('khipu-field-form');

  $form['subject_markup'] = array(
    '#markup' => $data['subject'],
  );

  if ($settings['payer_email']) {
    $form['payer_email'] = array(
      '#type' => 'textfield',
      '#title' => t('Email'),
      '#title_display' => 'invisible',
      '#description' => t('Enter your email where you will receive the voucher'),
      '#size' => 30,
      '#element_validate' => array('khipu_field_redirect_form_field_validate_email'),
      '#required' => TRUE,
      '#default_value' => $payer_email,
    );
  }
  if ($settings['set_amount']) {
    $form['amount'] = khipu_element_amount_form(0, TRUE);
  }
  else {
    $amount_string = number_format($data['amount'], 0);
    $form['amount_markup'] = array(
      '#markup' => '<span class="khipu-amount-field">$' . $amount_string . '</span>',
    );
  }
  $form['#theme'] = $settings['theme_form'];

  return $form;
}


/**
 * Form element validation handler for emails.
 */
function khipu_field_redirect_form_field_validate_email($element, &$form_state, $form) {
  if (!valid_email_address($element['#value'])) {
    $args = array('%value' => $element['#value']);
    form_error($element, t('%value It is not a valid email.', $args));
  }
}


/**
 * Implements hook_khipu_data_alter().
 */
function khipu_field_khipu_data_alter(&$data) {
  if ($data['instance_id'] == 'khipu_field') {
    $option_url = array(
      'absolute' => TRUE,
    );

    global $user;
    $order = array(
      'amount' => $data['amount'],
      'payer_email' => $data['payer_email'],
      'kaid' => $data['kaid'],
      'created' => time(),
      'status' => KHIPU_FIELD_STATUS_CREATED,
      'environment' => $data['environment'],
      'uid' => $user->uid,
      'entity_id' => $data['entity_id'],
      'entity_type' => $data['entity_type'],
    );
    khipu_field_create_order($order);
    $data['transaction_id'] = $order['koid'];
    $data['return_url'] = url('khipu-field/return/' . $order['koid'], $option_url);
    module_invoke_all('khipu_field_create_new_order', $order, $data);
  }
}


/**
 * Implements hook_cron().
 *
 * Cron to delete all the orders that are in status KHIPU_FIELD_STATUS_CREATED.
 */
function khipu_cron() {
  $day = variable_get('khipu_field_maximum_days_order', 30);
  $time = strtotime("Today -$day day");
  db_delete('khipu_field_order')
    ->condition('status', KHIPU_FIELD_STATUS_CREATED)
    ->condition('created', $time, '<')
    ->execute();
}


/**
 * Implements hook_form_BASE_FORM_ID_alter() for khipu_admin_settings_form().
 */
function khipu_field_form_khipu_admin_settings_form_alter(&$form, &$form_state) {
  $form['khipu_field'] = array(
    '#type' => 'fieldset',
    '#title' => t('Khipu Field Orders'),
  );
  $form['khipu_field']['khipu_field_maximum_days_order'] = array(
    '#title' => t('Maximum days for an order'),
    '#type' => 'textfield',
    '#size' => 10,
    '#description' => t('Maximum days of life for an order in the status "Created".'),
    '#default_value' => variable_get('khipu_field_maximum_days_order', 30),
    '#element_validate' => array('element_validate_integer_positive'),
    '#required' => TRUE,
  );
}


/**
 * Implements hook_khipu_field_theme_form_info().
 */
function khipu_field_khipu_field_theme_form_info() {
  return array(
    'khipu_field_redirect_form_field' => t('Default'),
    'khipu_field_redirect_form_table' => t('Table'),
  );
}


/**
 * Implements hook_theme().
 */
function khipu_field_theme() {
  $module_path = drupal_get_path('module', 'khipu_field');
  return array(
    'khipu_field_redirect_form_field' => array(
      'render element' => 'form',
      'template' => 'khipu-field-redirect-form-field',
      'path' => $module_path . '/templates',
    ),
    'khipu_field_redirect_form_table' => array(
      'render element' => 'form',
    ),
  );
}


/**
 * Implements hook_khipu_verified().
 */
function khipu_field_khipu_verified($instance_id) {
  if ($instance_id == 'khipu_field') {
    $data = $_POST;
    $koid = $data['transaction_id'];
    $order = khipu_field_get_order($koid);
    if ($order) {
      $status = KHIPU_FIELD_STATUS_COMPLETED;
      khipu_field_order_update_status($koid, $status);
    }
  }
}


/**
 * Returns HTML table for payment button khipu.
 */
function theme_khipu_field_redirect_form_table($variables) {
  $form = &$variables['form'];
  $rows = array();
  $header = array(
    t('Subject'),
    t('Amount'),
  );
  $row = array(
    drupal_render($form['subject_markup']),
  );
  if (isset($form['amount_markup'])) {
    $row[] = drupal_render($form['amount_markup']);
  }
  else {
    $row[] = drupal_render($form['amount']);
  }

  if ($form['payer_email']['#type'] == 'textfield') {
    $header[] = t('Email');
    $row[] = drupal_render($form['payer_email']);
  }
  $header[] = t('Button');
  $row[] = drupal_render($form['submit']);

  $rows[] = $row;

  $output = theme('table', array('header' => $header, 'rows' => $rows));
  $output .= drupal_render_children($form);
  return $output;
}


/**
 * Return the status name.
 *
 * @param int $status
 *   The status ID.
 */
function khipu_field_status_name($status) {
  $statuses = khipu_field_get_statuses();
  if (isset($statuses[$status])) {
    return $statuses[$status];
  }
  return t('Error');
}


/**
 * Get all statuses of the system for orders.
 */
function khipu_field_get_statuses() {
  return array(
    KHIPU_FIELD_STATUS_CREATED   => t('Created'),
    KHIPU_FIELD_STATUS_PENDING   => t('Pending'),
    KHIPU_FIELD_STATUS_COMPLETED => t('Complete'),
  );
}


/**
 * Function to change the status of an order.
 *
 * @param int $koid
 *   The order ID.
 * @param int $status
 *   The new status for on order.
 */
function khipu_field_order_update_status($koid, $status) {
  $order = khipu_field_get_order($koid);
  if ($order) {
    $old_status = $order->status;
    db_update('khipu_field_order')
    ->fields(array(
      'status' => $status,
    ))
    ->condition('koid', $koid)
    ->execute();

    module_invoke_all('khipu_field_order_update_status', $order, $old_status, $status);
  }
}


/**
 * This function create an order.
 *
 * @param array $data
 *   The data for create an order.
 */
function khipu_field_create_order(&$data) {
  $koid = db_insert('khipu_field_order')
    ->fields($data)
    ->execute();
  $data['koid'] = $koid;
}


/**
 * Get all orders from the system.
 *
 * @param int $limit
 *   The limit results.
 */
function khipu_field_get_all_orders($limit = 10) {
  $query = db_select('khipu_field_order', 'kfo');
  $query->fields('kfo');
  $query->orderBy('created', 'DESC');

  if (isset($_GET['status'])) {
    $query->condition('status', $_GET['status']);
  }

  $query = $query->extend('PagerDefault')->limit($limit);
  return $query->execute()
    ->fetchAll();
}


/**
 * Get an order.
 *
 * @param int $koid
 *   The order ID.
 */
function khipu_field_get_order($koid) {
  return db_select('khipu_field_order', 'kfo')
    ->fields('kfo')
    ->condition('koid', $koid)
    ->execute()
    ->fetchObject();
}


/**
 * Get all orders by a khipu account.
 *
 * @param int $kaid
 *   The khipu account ID.
 * @param array $statuses
 *   Filter by status
 * @param int $limit
 *   The limit results.
 *
 * @return object
 *   An array of orders object.
 */
function khipu_field_get_all_orders_by_kaid($kaid, $statuses = array(), $limit = 10) {
  $query = db_select('khipu_field_order', 'o')
    ->fields('o')
    ->condition('kaid', $kaid)
    ->orderBy('created', 'DESC');

  if (!empty($statuses)) {
    $query->condition('status', $statuses, 'IN');
  }

  $query = $query->extend('PagerDefault')->limit($limit);
  return $query->execute()
    ->fetchAll();
}
