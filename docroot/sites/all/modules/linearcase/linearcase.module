<?php

/**
 * User right needed to access linear case nodes.
 */
define('LINEARCASE_ACCESS', 'access linear case nodes');
/**
 * User right needed to create linear case nodes.
 */
define('LINEARCASE_CREATE', 'create linear case nodes');
/**
 * User right needed to edit ones own linear case node.
 */
define('LINEARCASE_EDITOWN', 'edit own linear case nodes');
/**
 * User right needed to edit all linear case nodes.
 */
define('LINEARCASE_EDITALL', 'edit all linear case nodes');
define('LINEARCASE_ADMIN', 'Administrative access for Linear case module');
/**
 * Implements hook_permission().
 */
function linearcase_permission() {
  $retval = array(
    LINEARCASE_ACCESS => array(
      'title' => t(LINEARCASE_ACCESS),
      'description' => t('TODO Add a description for LINEARCASE_ACCESS'),
    ),
    LINEARCASE_CREATE => array(
      'title' => t(LINEARCASE_CREATE),
      'description' => t('TODO Add a description for LINEARCASE_CREATE'),
    ),
    LINEARCASE_EDITOWN => array(
      'title' => t(LINEARCASE_EDITOWN),
      'description' => t('TODO Add a description for LINEARCASE_EDITOWN'),
    ),
    LINEARCASE_EDITALL => array(
      'title' => t(LINEARCASE_EDITALL),
      'description' => t('TODO Add a description for LINEARCASE_EDITALL'),
    ),
    LINEARCASE_ADMIN => array(
      'title' => t(LINEARCASE_ADMIN),
      'description' => t('TODO Add a description for LINEARCASE_ADMIN'),
    ),
  );
  return $retval;
}

/**
 * Implements hook_menu().
 */
function linearcase_menu() {
  $items = array();
  $items['node/%node/goto/%'] = array(
    'page callback' => 'linearcase_page_view',
    'page arguments' => array(1, 3),
    'type' => MENU_CALLBACK,
    'access arguments' => array(LINEARCASE_ACCESS),
  );
  $items['node/%node/reset'] = array(
    'page callback' => 'linearcase_reset',
    'page arguments' => array(1),
    'type' => MENU_CALLBACK,
    'access arguments' => array(LINEARCASE_ACCESS),
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function linearcase_theme() {
  $themes = array(
    'linearcase_backnext' => array(
      'variables' => array('links' => array()),
    ),
  );
  return $themes;
}

/**
 * Menu callback for viewing a node in a linearCase.
 *
 * @param int $node
 *   The node id of the linear case.
 * @param int $targetId
 *   The node id of the target page.
 * @return string
 *   The formatted page to view.
 */
function linearcase_page_view($node, $targetId) {
  if (isset($node->linearCase)) {
    $node->linearCase->selectNode($targetId);
  }
  else {
    drupal_set_message(t('linearcase_page_view: Not a linearcase node.'));
  }
  return node_view($node, FALSE, TRUE, TRUE);
}

/**
 * Menu callback for resetting the current user's progress through the case.
 *
 * @param int $node
 *   The node object of the linear case.
 */
function linearcase_reset($node) {
  drupal_set_message(t('linearcase_reset'));
  if (isset($node->linearCase)) {
    $node->linearCase->reset();
  }
  else {
    drupal_set_message(t('linearcase_reset: Not a linearcase node.'));
  }
  drupal_goto('node/' . $node->nid);
}

/**
 * Implements hook_node_info().
 */
function linearcase_node_info() {
  $retval = array(
    'linearcase' => array(
      'name' => t('Linear Case'),
      'base' => 'linearcase',
      'description' => t('A student entry point for a linear case.'),
      'body_label' => t('The body field is unused for now.'),
    ),
  );
  return $retval;
}

/**
 * Implements hook_autoload_info().
 */
function linearcase_autoload_info() {
  $retval = array(
    'LinearCase' => array(
      'file' => 'LinearCase.class.php',
    ),
  );
  return $retval;
}

/**
 * Implements hook_node_access().
 */
function linearcase_node_access($node, $op, $account) {

  if ($op == 'view') {
    return user_access(LINEARCASE_ACCESS, $account);
  }
  if ($op == 'create') {
    // Only users with permission to do so may create this node type.
    return user_access(LINEARCASE_CREATE, $account);
  }

  // Users who create a node may edit or delete it later, assuming they have the
  // necessary permissions.
  if ($op == 'update' || $op == 'delete') {
    return (
    (user_access(LINEARCASE_EDITOWN, $account) && ($account->uid == $node->uid))
    || user_access(LINEARCASE_EDITALL, $account)
    );
  }
}

/**
 * Implements hook_load().
 */
function linearcase_load($nodes) {
  foreach ($nodes as $nid => &$node) {
    global $user;

    $node->linearCase = new LinearCase($node, $user);
    $node->linearCase->selectNode();
    $node->question = &$node->linearCase;

    $node_additions = array();
    foreach ($node_additions as $property => &$value) {
      $node->$property = $value;
    }
  }
}




/**
 * Implements hook_view().
 */
function linearcase_view($node, $view_mode) {
  drupal_add_css(drupal_get_path('module', 'linearcase') . '/linearcase.css');

  $currentNode = $node->linearCase->getNode();
  
  if ($currentNode == $node) {
    $node->content['message'] = array(
      '#markup' => t('The linearCase node is not the top-node in the book?'),
      '#weight' => -1,
    );
  }
  elseif ($currentNode) {

    $links['next']['path'] = $node->linearCase->getNextPath();
    $links['prev']['path'] = $node->linearCase->getPrevPath();

    drupal_set_title($currentNode->title);

    $currentNodeView = $node->linearCase->viewNode($currentNode);

    $node->content['current'] = array(
      '#markup' => drupal_render($currentNodeView),
      '#weight' => -1,
    );

    $node->content['backNext'] = array(
      '#markup' => theme('linearcase_backnext', array('links' => $links)),
      '#weight' => 1,
    );
    if (user_access(LINEARCASE_CREATE)) {
      $node->content['reset'] = array(
        '#markup' => l(t('Escape from case'), 'node/' . $currentNode->nid . '') . ', '
        . l(t('reset case'), $node->linearCase->getPath() . '/reset'),
        '#weight' => 1,
      );
    }
  }
  else {
    $node->content['message'] = array(
      '#markup' => t('This case has no page.'),
      '#weight' => -1,
    );
  }
  
  $node->caseBook = $node->book;
  unset($node->book);
  return $node;
}

/**
 * Implements hook_form().
 */
function linearcase_form(&$node) {
  $type = node_type_get_type($node);

  // Add title if required
  if ($type->has_title) {
    $form['title'] = array(
      '#type' => 'textfield',
      '#title' => check_plain($type->title_label),
      '#required' => TRUE,
      '#default_value' => $node->title,
      '#weight' => -5,
    );
  }


  return node_content_form($node, $form_state);
}


/**
 * Implements hook_block_info().
 */
function linearcase_block_info() {
  $block[0]['info'] = t('Case navigation');
  $block[0]['cache'] = DRUPAL_NO_CACHE;
  return $block;
}

/**
 * Implements hook_block_view().
 */
function linearcase_block_view($delta) {
  $current_bid = 0;
  $node = menu_get_object();
  if (empty($node->nid)) {
    return;
  }
  if ($node->type != 'linearcase') {
    return;
  }
  
  // There should only be one element at the top level.
  $tree = $node->linearCase->getTree();
  
  $data = array_shift($tree);
  $block['subject'] = $node->title;
  $block['content'] = ($data['below']) ? menu_tree_output($data['below']) : 'Empty';

  return $block;
}

/**
 * Implements hook_block().
 */
function linearcase_block_OLD($op = 'list', $delta = 0, $edit = array()) {
  // TODO Remaining code in this function needs to be moved to the appropriate new hook function.
  $block = array();
}

/**
 * Themes the back/next links of a linearCase.
 *
 * @param array $links
 *   associative array with the back and next links:
 *   - prev: array
 *     - path: string - url to the previous page.
 *   - next: array
 *     -path: string - url to the next page.
 *
 * @return string
 *   The themed back/next links.
 *
 * @ingroup themeable
 */
function theme_linearcase_backnext($variables) {
  $links = $variables['links'];
  $html = ' <p class="backnext">';
  if (isset($links['prev']['path']) && !empty($links['prev']['path'])) {
    $html .= l(t('<-Back'), $links['prev']['path']);
  }
  $html .= ' - ';
  if (isset($links['next']['path']) && !empty($links['next']['path'])) {
    $html .= l(t('Next->'), $links['next']['path']);
  }
  $html .= ' </p>';
  return $html;
}
