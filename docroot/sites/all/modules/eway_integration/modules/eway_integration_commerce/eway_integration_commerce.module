<?php

/**
 * @file
 * Implements eWAY for use with Drupal Commerce Checkout.
 */

// Load functions.
module_load_include('inc', 'eway_integration_commerce', 'includes/eway_integration_commerce.func');

// Load cardonfile integration.
if (module_exists('commerce_cardonfile')) {
  module_load_include('inc', 'eway_integration_commerce', 'includes/eway_integration_commerce.cardonfile');
}

/**
 * Alter commerce checkout review form.
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function eway_integration_commerce_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'commerce_checkout_form_review' && isset($form_state['order']) && isset($form_state['order']->payment_methods)) {
    $payment_methods = $form_state['order']->payment_methods;
    if (isset($payment_methods['eway_dc|commerce_payment_eway_dc']) && isset($payment_methods['eway_dc|commerce_payment_eway_dc']['settings'])) {
      $settings = $payment_methods['eway_dc|commerce_payment_eway_dc']['settings'];
      if (isset($settings['encryption']) && $settings['encryption'] == 1 && !empty($settings['encryption_pubkey'])) {
        // Add attribute data-eway-encrypt-key.
        $form['#attributes']['data-eway-encrypt-key'] = $settings['encryption_pubkey'];
      }
    }
  }
}

/**
 * Creates payment transaction for the specified charge amount.
 * @param string $method_id
 * @param $payment_method
 * @param $payment
 * @param $configs
 * @param $order
 * @param $charge
 * @return bool
 */
function eway_integration_commerce_transaction($method_id = '', $payment_method, $payment, $configs, $order, $charge) {
  if (empty($method_id)) {
    return FALSE;
  }

  // Submit the request to eWAY.
  $response = eway_integration_commerce_api_request($payment, $configs, $payment_method, $order);

  $transaction = commerce_payment_transaction_new($method_id, $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  $transaction->remote_id = (string) isset($response->TransactionID) ? $response->TransactionID : '';
  $transaction->remote_status = (string) isset($response->ResponseCode) ? $response->ResponseCode : '';
  $transaction->payload = print_r($response, TRUE);

  if ($response && isset($response->status)) {
    if ($response->TransactionStatus) {
      $message = t('Payment successful: @status', array('@status' => implode(", ", $response->status)));
      $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
    }
    else {
      $message = t('Payment failed: @status', array('@status' => implode(", ", $response->status)));
      drupal_set_message($message, 'error');
      $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
    }
  }
  else {
    if (isset($response->ErrorPhases)) {
      $message = t('Payment failed due to eWAY connection issues: @error', array('@error' => implode(", ", $response->ErrorPhases)));
    }
    else {
      $message = t('Payment failed due to eWAY connection issues');
    }
    drupal_set_message($message, 'error');
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
  }

  $transaction->message = $message;
  commerce_payment_transaction_save($transaction);
  return $transaction;
}

/**
 * @param $payment
 * @param $configs
 * @param $payment_method
 * @param $order
 * @return array|bool
 */
function eway_integration_commerce_api_request($payment, $configs, $payment_method, $order) {
  // Allow modules to alter parameters of the API request.
  drupal_alter('eway_integration_commerce_api_request', $payment, $configs, $payment_method, $order);

  // Request log
  if ($payment_method['settings']['log']['request']) {
    $object_msg = $payment ? 'Object: ' . var_export($payment, TRUE) : '';
    watchdog('eway_integration_commerce', "Debug message: %error<br>\n%object<br>\n", array(
      '%error' => 'eWAY API request data',
      '%object' => $object_msg,
    ), WATCHDOG_DEBUG);
  }

  // Submit to eWAY API.
  $response = eway_integration_api_request($payment, $configs);

  // Response log
  if ($payment_method['settings']['log']['response']) {
    $object_msg = $response ? 'Object: ' . var_export($response, TRUE) : '';
    watchdog('eway_integration_commerce', "Debug message: %error<br>\n%object<br>\n", array(
      '%error' => 'eWAY API response data',
      '%object' => $object_msg,
    ), WATCHDOG_DEBUG);
  }

  // Return response from eWAY api
  return $response;
}
