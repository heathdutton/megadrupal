<?php

/**
 * @file
 * Implements eWAY Direct Connection for use with Drupal Commerce Checkout.
 */

define('EWAY_INTEGRATION_PAYMENT_METHOD_DC_NAME', 'eway_dc');

// Load cardonfile integration.
if (module_exists('commerce_cardonfile')) {
  module_load_include('inc', 'eway_integration_commerce_dc', 'includes/eway_integration_commerce_dc.cardonfile');
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function eway_integration_commerce_dc_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods[EWAY_INTEGRATION_PAYMENT_METHOD_DC_NAME] = array(
    'base' => 'eway_integration_commerce_dc',
    'title' => t('eWAY Direct Connection'),
    'short_title' => t('eWAY DC'),
    'display_title' => t('Credit card - eWAY'),
    'description' => t('eWAY Direct Connection'),
  );

  // Add commerce_cardonfile support.
  if (module_exists('commerce_cardonfile')) {
    $payment_methods['eway_dc']['cardonfile'] = array(
      'create callback' => 'eway_integration_commerce_cardonfile_create',
      'charge callback' => 'eway_integration_commerce_cardonfile_charge',
      'update callback' => 'eway_integration_commerce_cardonfile_update',
      'delete callback' => 'eway_integration_commerce_cardonfile_delete',
    );
  }

  return $payment_methods;
}

/**
 * Payment method callback: settings form.
 * @param array $settings
 * @return array
 */
function eway_integration_commerce_dc_settings_form($settings = array()) {
  // Load helper file from commerce payment.
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
  $form = array();

  // Merge default settings into the stored settings array.
  $settings = (array) $settings + eway_integration_commerce_dc_default_settings();

  $form['api_username'] = array(
    '#type' => 'textfield',
    '#title' => t('API key'),
    '#default_value' => $settings['api_username'],
  );

  $form['api_password'] = array(
    '#type' => 'textfield',
    '#title' => t('API password'),
    '#default_value' => $settings['api_password'],
  );

  $form['encryption'] = array(
    '#type' => 'checkbox',
    '#title' => t('Client Side Encryption'),
    '#description' => t('Enable Client Side Encryption to securely encrypt sensitive credit card information
    in the customer\'s browser. This allows a non-PCI compliant merchant to accept the credit card data on their system
     and process the payment directly with eWAY without exposed risk.'),
    '#default_value' => $settings['encryption'],
  );

  $form['encryption_pubkey'] = array(
    '#type' => 'textarea',
    '#title' => t('Client Side Encryption public key'),
    '#default_value' => $settings['encryption_pubkey'],
  );

  $form['server'] = array(
    '#type' => 'radios',
    '#title' => t('eWAY server'),
    '#options' => array(
      'sandbox' => ('Sandbox - for testing purpose only. Requires an eWAY Sandbox account'),
      'live' => ('Live - for production site. Transactions will be processed by eWay'),
    ),
    '#default_value' => $settings['server'],
  );

  $form['owner'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display name on card.'),
    '#default_value' => $settings['owner'],
  );

  $form['card_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Limit accepted credit cards to the following types'),
    '#description' => t('Specify which card types you accept for payment.'),
    '#options' => array_intersect_key(eway_integration_credit_card_types(), drupal_map_assoc(array(
      'visa',
      'mastercard',
      'amex',
      'dc',
    ))),
    '#default_value' => $settings['card_types'],
    '#required' => TRUE,
  );

  $form['code'] = array(
    '#type' => 'checkbox',
    '#title' => t('Require credit card security code (i.e. CVV).'),
    '#description' => t('This should match the similar setting in your eWAY account.'),
    '#default_value' => $settings['code'],
  );

  if (module_exists('commerce_cardonfile')) {
    $form['token'] = array(
      '#type' => 'checkbox',
      '#title' => t('Token payments integration.'),
      '#description' => t('This should match the similar setting in your eWAY account.'),
      '#default_value' => $settings['token'],
    );
  }
  else {
    $form['token'] = array(
      '#type' => 'markup',
      '#markup' => t('To enable Token payment, please download and install the Card on File module.'),
    );
  }

  $form['log'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Log the following messages for debugging'),
    '#options' => array(
      'request' => t('API request messages'),
      'response' => t('API response messages'),
    ),
    '#default_value' => $settings['log'],
  );

  return $form;
}

/**
 * Payment method callback: checkout form.
 */
function eway_integration_commerce_dc_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
  $fields = array();

  // Include the card security code field if specified.
  if ($payment_method['settings']['code']) {
    $fields['code'] = '';
  }

  // Display card type.
  if ($payment_method['settings']['card_types']) {
    $fields['type'] = $payment_method['settings']['card_types'];
  }

  // Display card owner name.
  if ($payment_method['settings']['owner']) {
    $fields['owner'] = '';
  }

  $form = commerce_payment_credit_card_form($fields);

  // Set default owner name as current user.
  if ($payment_method['settings']['owner']) {

    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
    // Prepare the billing address for use in the request.
    $default_owner = '';
    if (isset($order_wrapper->commerce_customer_billing->commerce_customer_address)) {
      $billing_address = $order_wrapper->commerce_customer_billing->commerce_customer_address->value();
      if (isset($billing_address['name_line'])) {
        $default_owner = $billing_address['name_line'];
      }
    }
    $form['credit_card']['owner']['#default_value'] = $default_owner;
  }

  // Client Side Encryption.
  if (isset($payment_method['settings']['encryption']) && $payment_method['settings']['encryption'] && !empty($payment_method['settings']['encryption_pubkey'])) {
    $form['#attached']['js'] = array(
      'https://secure.ewaypayments.com/scripts/eCrypt.js' => array(
        'type' => 'external',
        'scope' => 'footer'
      ),
    );
    foreach (array('number', 'code') as $key) {
      $element =& $form['credit_card'][$key];
      // Add data-eway-encrypt-name attributes to card number and CVN fields
      $element['#attributes']['data-eway-encrypt-name'] = 'commerce_payment[payment_details][credit_card][' . $key . ']';
      // Remove name attribute so values don't get submitted to Drupal
      $element['#attributes']['name'] = '';
      $element['#attributes']['value'] = '';
      // Set #maxlength - 353 characters
      $element['#maxlength'] = 512;
      $element['#element_validate'][] = 'eway_integration_commerce_dc_encrypted_element_validate';
    }
  }
  return $form;
}

/**
 * Element validate callback: for encrypted fields.
 */
function eway_integration_commerce_dc_encrypted_element_validate($element, &$form_state) {
  // Unset encrypted values from $form_state['input']
  // Since we don't want it to show on any reloaded form
  $credit_card_input = $form_state['input']['commerce_payment']['payment_details']['credit_card'];
  foreach (array('number', 'code') as $key) {
    if (isset($credit_card_input[$key])) {
      unset($credit_card_input[$key]);
    }
  }
}

/**
 * Payment method callback: checkout form validation.
 */
function eway_integration_commerce_dc_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  // If the customer specified a card on file, skip the normal validation.
  if (module_exists('commerce_cardonfile') && !empty($payment_method['settings']['token']) &&
    !empty($pane_values['cardonfile'])
  ) {
    if ($pane_values['cardonfile'] !== 'new') {
      return;
    }
  }

  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

  // Validate the credit card fields.
  // Unless client-side encryption is enabled since the values won't be valid
  if (empty($payment_method['settings']['encryption'])) {
    $settings = array(
      'form_parents' => array_merge($form_parents, array('credit_card')),
    );

    if (!commerce_payment_credit_card_validate($pane_values['credit_card'], $settings)) {
      return FALSE;
    }
  }
}

/**
 * Payment method callback: checkout form submission.
 */
function eway_integration_commerce_dc_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  // Prevent the payment attempt if eWAY it not configured.
  if (empty($payment_method['settings'])) {
    drupal_set_message(t('This payment method must be configured by an administrator before it can be used.'), 'error');
    return FALSE;
  }

  // Ensure we can determine a valid IPv4 IP address as required by PayPal WPP.
  $ip_address = ip_address();

  // Go ahead and convert localhost from IPv6 to IPv4.
  if ($ip_address == '::1') {
    $ip_address = '127.0.0.1';
    watchdog('eway_integration_commerce_dc', 'While testing from localhost, your IPv6 address ::1 was automatically converted to 127.0.0.1.', array(), WATCHDOG_WARNING);
  }

  if (!filter_var($ip_address, FILTER_VALIDATE_IP, FILTER_FLAG_IPV4)) {
    drupal_set_message(t('This payment method is not supported by the current web server configuration.'), 'error');
    watchdog('eway_integration_commerce_dc', 'eWAY integration must be able to retrieve an IPv4 IP address.', array(), WATCHDOG_ERROR);
    return FALSE;
  }

  // Setup configs for eWAY API.
  $configs = array(
    'auth' => array(
      'user' => $payment_method['settings']['api_username'],
      'pass' => $payment_method['settings']['api_password'],
    ),
    'method' => $payment_method['method_id'],
    'sandbox' => $payment_method['settings']['server'] == 'sandbox' ? TRUE : FALSE,
  );

  // Prepare payment array.
  $payment = eway_integration_commerce_prepare_payments($pane_values, $order, $charge);

  // Token payment with cardonfile.
  $cardonfile_available = module_exists('commerce_cardonfile') && $payment_method['settings']['token'];

  // Check if user want to store this card or bypass it.
  if ($cardonfile_available && !empty($pane_values['cardonfile'])) {
    if ($pane_values['cardonfile'] == 'new') {
      $store_card = ($pane_values['credit_card']['cardonfile_store']) ? 1 : 0;
      if ($store_card == 1) {
        $token_request = eway_integration_commerce_create_token_request($payment);
        $token_response = eway_integration_api_request($token_request, $configs);
        if ($token_response && isset($token_response->Customer->TokenCustomerID)) {
          $card_data = commerce_cardonfile_new();
          $card_data->uid = $order->uid;
          $card_data->payment_method = $payment_method['method_id'];
          $card_data->instance_id = $payment_method['instance_id'];
          $card_data->remote_id = $token_response->Customer->TokenCustomerID;
          $card_data->card_type = $pane_values['credit_card']['type'];
          $card_data->card_name = $payment['Customer']['CardDetails']['Name'];
          $card_data->card_number = substr($pane_values['credit_card']['number'], -4);
          $card_data->card_exp_month = $pane_values['credit_card']['exp_month'];
          $card_data->card_exp_year = $pane_values['credit_card']['exp_year'];
          $card_data->status = 1;
          // Set current card as default if checked.
          $card_data->instance_default = ($pane_values['cardonfile_instance_default']) ? 1 : 0;
          // Save new card on file.
          commerce_cardonfile_save($card_data);
        }
        else {
          drupal_set_message(t('Unable to save your card data due to a server error'), 'error');
        }
      }
    }
    else {
      $card_data = commerce_cardonfile_load($pane_values['cardonfile']);
      if (empty($card_data) || $card_data->status == 0) {
        drupal_set_message(t('The requested card on file is no longer valid.'), 'error');
        return FALSE;
      }
      else {
        $payment['Customer']['TokenCustomerID'] = $card_data->remote_id;
        // Unset them since eWAY will pass them to bank.
        unset($payment['Customer']['CardDetails']['ExpiryMonth']);
        unset($payment['Customer']['CardDetails']['ExpiryYear']);
      }
    }
  }

  // eWAY payment transation.
  $transaction = eway_integration_commerce_transaction('eway_dc', $payment_method, $payment, $configs, $order, $charge);

  return isset($transaction->status) && $transaction->status == COMMERCE_PAYMENT_STATUS_SUCCESS;
}

/**
 * Returns the default settings for eWAY Direct Connection payment method.
 */
function eway_integration_commerce_dc_default_settings() {
  return array(
    'api_username' => '',
    'api_password' => '',
    'encryption' => 0,
    'encryption_pubkey' => '',
    'server' => 'sandbox',
    'owner' => 1,
    'card_types' => drupal_map_assoc(array('visa', 'mastercard', 'amex', 'dc')),
    'code' => 1,
    'token' => TRUE,
    'log' => array('request' => 0, 'response' => 0),
  );
}
