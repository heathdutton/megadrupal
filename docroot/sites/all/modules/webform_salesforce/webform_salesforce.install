<?php
/**
 * @file
 * Install, update and uninstall functions for the Webform Salesforce module.
 */

/**
 * Implements hook_schema().
 */
function webform_salesforce_schema() {
  $schema = array();

  // Define mapping storage for each webform
  $schema['wfsf_mappings'] = array(
    'description' => 'Table containing mappings for Webform fields to Salesforce fields per node',
    'fields' => array(
      'nid' => array(
        'description' => 'Node ID of Webform',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'vid' => array(
        'description' => 'Version ID of Webform node',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'object' => array(
        'description' => 'Salesforce object type for this form',
        'type' => 'text',
        'size' => 'medium',
      ),
      'map' => array(
        'description' => 'Mapping for fields',
        'type' => 'text',
        'size' => 'medium',
      ),
    ), // fields
    'primary key' => array('nid'),
  );
  return $schema;
}

/**
 * Updates all D6 style mappings (lowercase) to the uppercase version in D7.
 */
function webform_salesforce_update_7001() {
  $result = db_select('wfsf_mappings', 'w')
    ->fields('w', array('nid', 'vid', 'object', 'map'))
    ->orderBy('nid', 'ASC')
    ->execute();
  module_load_include('module', 'webform_salesforce');
  if ($result) {
    while ($row = $result->fetchAssoc()) {
      $map = unserialize($row['map']);
      $object = $row['object'];
      if (!empty($map) && !empty($object)) {
        // Get field definitions for the selected object
        $updates = 0;
        $sf_object_fields = webform_salesforce_get_available_fields($object);
        if (!empty($sf_object_fields)) {
          foreach ($sf_object_fields as $sf_object_type) {
            foreach ($sf_object_type as $attr) {
              $field_id = $attr['fieldid'];
              $field_lower = strtolower($field_id);
              // If the field exists as lowercase in the mapping replace it with
              // the case sensitive version
              if (isset($map[$field_lower])) {
                $val = $map[$field_lower];
                unset($map[$field_lower]);
                $map[$field_id] = $val;
                $updates++;
              }
            }
          }
          // Perform mapping update if any of the mapping fields have changed
          if (!empty($updates)) {
            $cfg = array(
              'object' => $object,
              'map' => $map,
            );
            $node = new stdClass();
            $node->nid = $row['nid'];
            $node->vid = $row['vid'];
            _webform_salesforce_set_map($node, $cfg);
          }
        }
      }
    }
  }
}