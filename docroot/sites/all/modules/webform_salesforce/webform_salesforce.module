<?php

/*
 * Main hooks for Webform Salesforce module
 */

/*
 * Implements hook_menu().
 */
function webform_salesforce_menu() {
  $items = array();

  $items['node/%webform_menu/webform/salesforce'] = array(
    'title' => 'Salesforce settings',
    'page callback' => 'webform_salesforce_configure_page',
    'page arguments' => array(1),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'file' => 'webform_salesforce.admin.inc',
    'weight' => 3,
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/*
 * Implements hook_node_delete().
 */
function webform_salesforce_node_delete($node) {
  // We're only interested in nodes of type 'webform'
  if ('webform' == $node->type) {
    // Delete all mapping related to this node
    _webform_salesforce_delete_map($node, TRUE);
  }
}

/*
 * Implements hook_node_revision_delete().
 */
function webform_salesforce_node_revision_delete($node) {
  // We're only interested in nodes of type 'webform'
  if ('webform' == $node->type) {
    // Delete a single revision's mappings
    _webform_salesforce_delete_map($node);
  }
}

/**
 * Implements hook_node_load().
 * @param type $nodes
 * @param type $types
 */
function webform_salesforce_node_load($nodes, $types) {
  $result = db_query("SELECT * FROM {wfsf_mappings} m WHERE m.nid IN (:nids)", array(':nids' => array_keys($nodes)), array('fetch' => PDO::FETCH_ASSOC));
  foreach ($result as $record) {
    $nodes[$record['nid']]->uses_salesforce = FALSE;
    $tmp = unserialize($record['map']);
    if (!empty($tmp)) {
      $nodes[$record['nid']]->uses_salesforce = TRUE;
      $nodes[$record['nid']]->salesforce_object = $record['object'];
    }
  }
}

/*
 * Start of Drupal Webform 3.x hook implementations
 */

/*
 * Implements hook_webform_submission_insert().
 */
function webform_salesforce_webform_submission_insert($node, $submission) {
  $form_cfg = webform_salesforce_get_map($node);
  $mappings = (!empty($form_cfg['map'])) ? $form_cfg['map'] : NULL;
  $sf_object = (!empty($form_cfg['object'])) ? $form_cfg['object'] : NULL;

  // Make sure we have the mappings and SF object type
  if (!empty($mappings) && $sf_object) {
    // Build xref for Webform components keyed to the field name:

    $wf_fields = array();
    foreach ($node->webform['components'] as $idx => $field) {
      $wf_fields[$field['form_key']] = $idx;
    }

    $sub_fields = array();

    foreach ($mappings as $sf_field => $wf_field) {
      if (isset($wf_fields[$wf_field])) {
        $field = $wf_fields[$wf_field];
        if (isset($submission->data[$field]['value']) && isset($submission->data[$field]['value'][0])) {
          $sub_fields[$sf_field] = implode(';', $submission->data[$field]['value']);
        }
      }
    }

    // If this is a new submit, generate an unique id to use to link the submission with salesforce
    // If this is a resubmit then use the same key, so a duplicate record doesn't get added in salesforce
    $sub_fields['WebformSID__c'] = $node->nid . "-" . _webform_salesforce_generate_sid();

    // Call Salesforce API to make the submission but let other modules to alter
    // the data or intercept submission.
    // Assume other modules won't handle the submit to Salesforce
    $is_handled = FALSE;
    // Allow other modules to handle the submit to Salesforce
    // @note $sub_fields is passed by reference
    foreach (module_implements('webform_salesforce_submit') as $module) {
      $function = $module . '_webform_salesforce_submit';
      $new_id = $function($node->salesforce_object, $sub_fields, $submission);
      if ($new_id != FALSE) {
        $is_handled = TRUE;
      }
    }

    // If it wasn't handled by another module, then submit it to Salesforce
    if ($is_handled == FALSE) {
      webform_salesforce_submit_to_salesforce($node->salesforce_object, $sub_fields, $submission);
    }
  }
}

/**
 * Handles Salesforce submissions
 * @param string $sf_obj_type
 * @param array $sub_fields
 * @param array $submission
 */
function webform_salesforce_submit_to_salesforce($sf_obj_type, $sub_fields, $submission) {
  // Attempt to connect to Salesforce.
  $sf = salesforce_api_connect();

  if (!$sf) {
    if (user_access('administer salesforce')) {
      drupal_set_message(t('Unable to connect to Salesforce using <a href="!url">current credentials</a>.', array('!url' => url(SALESFORCE_PATH_ADMIN))));
    }
    return FALSE;
  }

  // Get Salesforce object name from the key
  $sf_object_options = webform_salesforce_describe_objects();
  $sf_object_names = isset($sf_object_options[$sf_obj_type]) ? explode(',', $sf_object_options[$sf_obj_type]) : FALSE;

  // Populate the Salesforce Object with gathered fields
  $sObject = new stdClass();
  foreach ($sub_fields as $sf_field => $value) {
    $sObject->$sf_field = $value;
  }

  if (!empty($sf_object_names)) {
    // @note Can handle more than one object at a time
    foreach ($sf_object_names as $sf_object_name) {
      try {
        $key = isset($sObject->WebformSID__c) ? $sObject->WebformSID__c : 'Id';
        $response = salesforce_api_upsert(array($sObject), $sf_object_name, $key, $sf);
      }
      catch (Exception $e) {
        salesforce_api_log(SALESFORCE_LOG_SOME, 'Exception while attempting to upsert node: %msg <pre>%e</pre>', array('%msg' => $e->getMessage(), '%e' => print_r($e, TRUE)), WATCHDOG_ERROR, l('node ' . $submission->nid, 'node/' . $submission->nid));
      }

      // If the upsert was successful...
      if ($response['successes']) {
        $sf_id = $response['successes'][0];
      }
      else {
        // Salesforce module does its own logging of errors
        $sf_id = 0;
      }
    }
  }
}

/**
 * Describe a list of possible Salesforce objects supported
 */
function webform_salesforce_describe_objects() {
  $sf_global = salesforce_api_describeGlobal();
  if (empty($sf_global->types)) {
    drupal_set_message(t('There was an error retrieving the list of Salesforce objects. Please verify that your Salesforce instance is properly configured.'), 'error');
    return;
  }
  else {
    $options = array();
    foreach ($sf_global->types as $obj) {
      $options[$obj->name] = $obj->label;
    }
  }
  $sf_objects = variable_get('salesforce_api_enabled_objects', array('Account', 'Contact'));
  $list = array();
  foreach ($sf_objects as $obj) {
    $key = strtolower($obj);
    $label = isset($options[$obj]) ? $options[$obj] : $obj;
    $list[$key] = array('value' => $label, 'object' => $obj);
  }
  // Note: allow other modules to define their own custom objects or
  // modify existing ones.
  webform_salesforce_get_available_objects($list);

  return $list;
}

/**
 * Retrieves a list of supported Salesforce objects
 * @param array $sf_objects
 * @return type
 */
function webform_salesforce_get_available_objects(&$sf_objects) {
  // @note using foreach since module_invoke_all doesn't allow pass by reference
  foreach (module_implements('webform_salesforce_objects') as $module) {
    $function = $module . '_webform_salesforce_objects';
    $function($sf_objects);
  }
}

/**
 * Retrieves a list of supported Salesforce object fields
 * @param string $sf_object Salesforce object key stored in mapping
 * @return type
 */
function webform_salesforce_get_available_fields($sf_object_key) {
  // Find full details of the object
  $all_objects = webform_salesforce_describe_objects();

  if (isset($all_objects[$sf_object_key])) {
    $sf_object = $all_objects[$sf_object_key];
    $sf_object['key'] = $sf_object_key;
    $sf_object_type = is_array($sf_object['object']) ? $sf_object['object'] : array($sf_object['object']);
  }

  if (!empty($sf_object_type)) {
    $sf_fields_by_object = salesforce_api_describeSObjects($sf_object_type);

    $sf_fields = array();
    if (!empty($sf_fields_by_object)) {
      foreach ($sf_fields_by_object as $key => $object) {
        foreach ($object->fields as $field) {
          $required = !$field->nillable && $field->createable & !$field->defaultedOnCreate ? TRUE : FALSE;
          $field_id = $field->name;
          $sf_fields[$key][$field_id] = array(
            'fieldid' => $field_id,
            'label' => $key . ':' . $field->label,
            'required' => $required,
            'object' => $object->name,
            'value' => $object->label,
            'object_key' => $sf_object_key,
          );
        }
      }
    }
    // @note using foreach since module_invoke_all doesn't allow pass by reference
    foreach (module_implements('webform_salesforce_fields') as $module) {
      $function = $module . '_webform_salesforce_fields';
      $function($sf_object, $sf_fields);
    }
    return $sf_fields;
  }
  else {
    return array();
  }
}

/*
 * Helper function to retrieve field mappings for this form (node).
 * May be called by other modules implementing module hooks.
 */
function webform_salesforce_get_map($node) {
  static $cfg = array();
  if (!is_object($node)) {
    $node = node_load($node);
  }
  if (!$node || empty($node->nid)) {
    return;
  }
  $nid = $node->nid;
  $vid = (!empty($node->vid)) ? $node->vid : 0;

  if (empty($cfg[$nid][$vid])) {
    $cfg[$nid][$vid] = array();
    $result = db_select('wfsf_mappings', 'wfsf')
      ->fields('wfsf')
      ->condition('nid', $nid)
      ->condition('vid', $vid)
      ->execute();
    if ($result) {
      while ($row = $result->fetchAssoc()) {
        $tmp = unserialize($row['map']);
        if ($tmp) {
          $cfg[$nid][$vid]['map'] = $tmp;
        }

        $tmp = $row['object'];
        if ($tmp) {
          $cfg[$nid][$vid]['object'] = $tmp;
        }
      }
    }
  }
  return $cfg[$nid][$vid];
}

/**
 * Helper function that returns only the fields allowed for specified SF object.
 * @param $defined_fields array of defined fields (may contain not applicable
 * fields for the object
 * @param $sf_object_type string Salesforce object name such as Account or Contact
 */
function webform_salesforce_filter_allowed_fields($defined_fields, $sf_object_type) {
  $allowed_fields = $defined_fields;
  // Get field definitions
  $fields = webform_salesforce_get_available_fields(strtolower($sf_object_type));
  if (isset($fields[$sf_object_type])) {
    $allowed_keys = array_keys($fields[$sf_object_type]);
    foreach ($defined_fields as $key => $value) {
      if (!in_array($key, $allowed_keys)) {
        unset($allowed_fields[$key]);
      }
    }
  }
  return $allowed_fields;
}

/*
 * Start of "private" utility functions for this module
 */

/*
 * Helper function to delete field mappings for this form (node) when it is deleted
 */
function _webform_salesforce_delete_map($node, $all_revs = FALSE) {
  if (!is_object($node)) {
    $node = node_load($node);
  }
  if (!$node || empty($node->nid)) {
    return;
  }
  $nid = $node->nid;
  $vid = (!empty($node->vid)) ? $node->vid : 0;

  $query = db_delete('wfsf_mappings')
  ->condition('nid', $nid);
  if (!$all_revs) {
    $query->condition('vid', $vid);
  }
  $result = $query->execute();
  return $result;
}


/*
 * Helper function to set field mappings for this form (node)
 */
function _webform_salesforce_set_map($node, $form_cfg) {
  if (!is_object($node)) {
    $node = node_load($node);
  }
  if (!$node || empty($node->nid)) {
    return;
  }
  $nid = $node->nid;
  $vid = (!empty($node->vid)) ? $node->vid : 0;
  $map_data = isset($form_cfg['map']) ? serialize($form_cfg['map']) : '';
  $sf_obj = $form_cfg['object'];

  // Using delete then insert approach
  db_delete('wfsf_mappings')
  ->condition('nid', $nid)
  ->condition('vid', $vid)
  ->execute();

  $result = db_insert('wfsf_mappings')
  ->fields(array(
      'nid' => $nid,
      'vid' => $vid,
      'map' => $map_data,
      'object' => $sf_obj,
  ))->execute();

  return $result;
}

/**
 * Returns a unique Salesforce Id that can be used as the external ID to
 * map the submission in drupal to the salesforce data
 *
 * @return
 *  8 character ID generated using MD5 uniquid and random number generator
 */
function _webform_salesforce_generate_sid() {
  $sid = md5(uniqid(rand(), TRUE));
  return substr($sid, 0, 8);
}
