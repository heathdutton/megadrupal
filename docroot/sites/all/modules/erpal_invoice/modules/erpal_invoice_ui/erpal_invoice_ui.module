<?php

/**
 * @file
 * Code for the ERPAL invoice user interface functional module.
 */


/**
 * Implements hook_views_api().
 */
function erpal_invoice_ui_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Implements hook_menu_alter().
 */
function erpal_invoice_ui_menu_alter(&$items) {

  // Just create simple page and for user which not admin.
  if (!empty($items['admin/commerce/orders/add/invoice'])) {
    $items['invoice/add'] = $items['admin/commerce/orders/add/invoice'];
  }

}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function erpal_invoice_ui_menu_local_tasks_alter(&$data, $router_item, $root_path) {

  // Add local tasks for download PDF on invoice page.
  $invoice_pages = array('admin/commerce/orders/%', 'admin/commerce/orders/%/pdf');
  if (in_array($root_path, $invoice_pages)) {
    $item = menu_get_item('invoice-pdf/' . arg(3));
    if ($item['access']) {
      $item['title'] = 'Download PDF';
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }

  // Add local tasks for adding invoice on pages for invoices menage.
  $local_tasks = array(
    array(
      'root_path' => 'admin/erpal/invoices',
      'menu_item' => 'admin/commerce/orders/add/invoice',
    ),
    array(
      'root_path' => 'invoices',
      'menu_item' => 'invoice/add',
    ),
    array(
      'root_path' => 'admin/erpal/invoices',
      'menu_item' => 'admin/commerce/config/billy-invoice',
      'title' => 'Settings',
    ),
    array(
      'root_path' => 'admin/erpal/invoices',
      'menu_item' => 'admin/commerce/config/billy-invoice/pdf',
      'title' => 'PDF Settings',
    ),
    array(
      'root_path' => 'invoices',
      'menu_item' => 'admin/commerce/config/billy-invoice',
      'title' => 'Settings',
    ),
    array(
      'root_path' => 'invoices',
      'menu_item' => 'admin/commerce/config/billy-invoice/pdf',
      'title' => 'PDF Settings',
    ),
  );

  foreach ($local_tasks as $local_task) {
    if ($root_path == $local_task['root_path']) {
      $item = menu_get_item($local_task['menu_item']);
      if ($item['access']) {
        $item['title'] = 'Create an invoice';
        if (!empty($local_task['title'])) {
          $item['title'] = $local_task['title'];
        }
        $item['localized_options']['query'] = drupal_get_destination();
        $data['actions']['output'][] = array(
          '#theme' => 'menu_local_action',
          '#link' => $item,
        );
      }
    }
  }
}

/**
 * Implements hook_theme().
 */
function erpal_invoice_ui_theme() {
  // Register the template specific for the commerce pdf order.
  $items['commerce_order__invoice__pdf'] = array(
    'render element' => 'elements',
    'template' => 'commerce_order--invoice--pdf',
    'path' => drupal_get_path('module', 'erpal_invoice_ui') . '/templates',
  );
  $items['commerce_order__invoice__canceled'] = array(
    'render element' => 'elements',
    'template' => 'commerce_order--invoice--canceled',
    'path' => drupal_get_path('module', 'erpal_invoice_ui') . '/templates',
  );
  return $items;
}

/**
 * Implements hook_preprocess_entity().
 */
function erpal_invoice_ui_preprocess_entity(&$variables) {
  $entity_type = $variables['entity_type'];
  $view_mode = $variables['view_mode'];
  $pdf_view_modes = array('pdf', 'canceled');

  // Replace default template.
  if ($entity_type == 'commerce_order' && in_array($view_mode, $pdf_view_modes)) {
    foreach ($variables['theme_hook_suggestions'] as &$theme_name) {
      if ($theme_name == $entity_type . '__commerce_order__' . $view_mode) {
        if (!$theme_name = variable_get('erpal_invoice_theme')) {
          $theme_name = $entity_type . '__invoice__' . $view_mode;
        }
      }
    }
  }
}

/**
 * Implements hook_commerce_order_view().
 */
function erpal_invoice_ui_commerce_order_view($order, $view_mode) {
  // Add content variables for the PDF generation.
  $settings = variable_get('commerce_billy_pdf_text_settings', array());
  foreach ($settings as &$value) {
    $value = token_replace($value, array('commerce-order' => $order));
  }
  $custom_date_format = !empty($settings['invoice_date_format']) ? $settings['invoice_date_format'] : 'Y-m-d';
  if ($view_mode == 'pdf' || $view_mode == 'canceled') {

    // Add 'due date' to PDF generation.
    $due_date = '--';
    $field_due_date = field_get_items('commerce_order', $order, 'field_invoice_due_date');
    if ($field_due_date) {
      $due_date = format_date($field_due_date[0]['value'], 'custom', $custom_date_format);
    }
    $order->content['due_date'] = array(
      '#markup' => t('Due date: !date', array('!date' => $due_date)),
    );
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function erpal_invoice_ui_form_commerce_billy_pdf_admin_form_alter(&$form, $form_state) {

  // Added field managed_file for easu logo upload.
  $form['logo'] = array(
    '#type' => 'fieldset',
    '#title' => t('Logo settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['logo']['commerce_billy_pdf_logo'] = $form['commerce_billy_pdf_logo'];
  $form['logo']['commerce_billy_pdf_logo_load'] = array(
    '#type' => 'managed_file',
    '#title' => t('Upload logo'),
    '#upload_validators'         => array(
      'file_validate_extensions' => array('png jpg jpeg'),
    ),
    '#upload_location' => 'public://logo/',
  );
  $form['tokens'] = array(
    '#type' => 'fieldset',
    '#title' => t('Replacement patterns'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#description' => theme('token_tree', array('token_types' => array('commerce-order'))),
    '#weight' => 10,
  );
  array_unshift($form['#submit'], 'erpal_invoice_pdf_submit');
  unset($form['commerce_billy_pdf_logo']);
}

/**
 * Submit the commerce_billy_pdf_admin_form.
 *
 * @see _oklick_user_settings()
 */
function erpal_invoice_pdf_submit($form, &$form_state) {
  global $user;
  if ($form_state['values']['commerce_billy_pdf_logo_load']) {
    $file = file_load($form_state['values']['commerce_billy_pdf_logo_load']);
    $file->status = FILE_STATUS_PERMANENT;
    $file = file_save($file);
    file_usage_add($file, 'user', 'user', $user->uid);
    $public_url = variable_get('file_public_path', conf_path() . '/files');
    $path = str_replace('public:/', $public_url, $file->uri);
    $form_state['values']['commerce_billy_pdf_logo'] = $path;
  }
}
