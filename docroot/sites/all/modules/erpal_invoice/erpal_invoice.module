<?php

/**
 * @file
 * Provide main functionality for ERPAL invoice module.
 */

/**
 * Implements hook_commerce_billy_order_types_alter().
 *
 * Alter the order types to which need add invoice fields.
 */
function erpal_invoice_commerce_billy_order_types_alter(&$order_types) {
  $order_types = array(
    'invoice',
  );
}

/**
 * Implements hook_default_commerce_order_type().
 */
function erpal_invoice_default_commerce_order_type() {
  $items = array();

  // Add new commerce order bundle 'invoice'.
  $items['invoice'] = entity_import('commerce_order_type', '{
    "type" : "invoice",
    "label" : null,
    "weight" : 0,
    "name" : "Invoice",
    "help" : "Commerce order type for invoice functional",
    "data" : null,
    "rdf_mapping" : []
  }');
  return $items;
}

/**
 * Implements hook_commerce_order_type_insert().
 */
function erpal_invoice_commerce_order_type_insert($type) {
  if ($type->type == 'invoice') {

    // Add default fields for commerce order bundle.
    commerce_order_configure_order_type($type->type);

    // Include the fields file.
    module_load_include('inc', 'erpal_invoice', 'erpal_invoice.fields');

    // Add default fields for 'invoice' commerce bundle.
    $fields = erpal_invoice_default_fields();
    erpal_core_add_fields($fields['fields'], 'field');
    erpal_core_add_fields($fields['instances'], 'instance');
  }
}

/**
 * Implements hook_action_info().
 */
function erpal_invoice_action_info() {
  return array(
    'erpal_invoice_create_invoice' => array(
      'type' => 'commerce_line_item',
      'label' => t('Create invoice'),
      'description' => t('Creates an invoice from line items'),
      'configurable' => TRUE,
    ),
  );
}

/**
 * Callback for configurable bulk operation for creating an invoice.
 */
function erpal_invoice_create_invoice_form($context, &$form_state) {

  // Include the forms file from the Order module.
  module_load_include('inc', 'commerce_order_ui', 'includes/commerce_order.forms');

  // Create empty order.
  $order = commerce_order_new(0, NULL, 'invoice');
  $form = commerce_order_order_form(array(), $form_state, $order);

  // Hide not needed fields.
  $hide_fields = array(
    'commerce_line_items',
    'field_commerce_billy_cancel_date',
  );
  foreach ($hide_fields as $hide_field) {
    if (!empty($form[$hide_field])) {
      $form[$hide_field]['#access'] = FALSE;
    }
  }

  return $form;
}

/**
 * Validate handler for bulk operation configuration form for creating invoice.
 */
function erpal_invoice_create_invoice_validate($form, &$form_state) {
  commerce_order_order_form_validate($form, $form_state);
}

/**
 * Submit handler for bulk operation configuration form for creating an invoice.
 */
function erpal_invoice_create_invoice_submit($form, &$form_state) {
  commerce_order_order_form_submit($form, $form_state);

  // Add to context order id for using in action.
  $values['order_id'] = $form_state['commerce_order']->order_id;
  return $values;
}

/**
 * Callback for the action erpal_invoice_create_invoice.
 *
 * Create an invoice by invioce line items.
 */
function erpal_invoice_create_invoice(&$line_items, $context) {
  $order = commerce_order_load($context['order_id']);

  // Add line item to order.
  $language = field_language('commerce_order', $order, 'commerce_line_items');
  $order->commerce_line_items[$language][] = array(
    'line_item_id' => $line_items->line_item_id,
  );

  // Ensure the attached line items are associated with the order if they do not
  // have an order_id set yet.
  foreach (entity_metadata_wrapper('commerce_order', $order)->commerce_line_items as $delta => $line_item_wrapper) {
    if ($line_item_wrapper->order_id->value() != $order->order_id) {
      $line_item_wrapper->order_id = $order->order_id;
      $line_item_wrapper->save();
    }
  }
  commerce_order_save($order);
}
