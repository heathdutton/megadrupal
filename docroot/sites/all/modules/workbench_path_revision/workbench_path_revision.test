<?php

/**
 * @file
 * Tests for Workbench Path Revision module.
 */

/**
 * Base class for Workbench Path Revision module tests.
 */
abstract class WorkbenchPathRevisionBaseTestCase extends DrupalWebTestCase {
  protected $current_user;
  protected $admin_user;
  protected $moderator_user;

  protected $admin_user_permissions = array();

  protected $moderator_user_permissions = array(
    'access content',
    'view revisions',
    'view all unpublished content',
    'view moderation history',
    'view moderation messages',
    'bypass workbench moderation',
    'create url aliases',
    'create page content',
    'edit any page content',
  );

  public function setUp() {
    $args = func_get_args();
    call_user_func_array(array('parent', 'setUp'), $args);

    // Reset user fields to make test object reusable.
    unset($this->current_user);
    unset($this->admin_user);
    unset($this->moderator_user);

    // Create a new content type and enable moderation on it.
    $this->configureContentType();
  }

  /**
   * Login the given user only if she has not changed.
   */
  public function drupalLogin($account) {
    if (!isset($this->current_user) || $this->current_user->uid != $account->uid) {
      $this->current_user = $account;
      parent::drupalLogin($account);
    }
  }

  /**
   * Returns a user with admin rights.
   */
  public function getAdminUser(array $permissions = array()) {
    if (!isset($this->admin_user)) {
      $this->admin_user = $this->drupalCreateUser(array_merge($this->admin_user_permissions, $permissions));
    }
    return $this->admin_user;
  }

  /**
   * Log in as admin user.
   */
  public function loginAdminUser() {
    $this->drupalLogin($this->getAdminUser());
  }

  /**
   * Returns a user with minimal translation rights.
   */
  public function getModeratorUser(array $permissions = array()) {
    if (!isset($this->moderator_user)) {
      $this->moderator_user = $this->drupalCreateUser(array_merge($this->moderator_user_permissions, $permissions));
    }
    return $this->moderator_user;
  }

  /**
   * Log in as moderator user.
   */
  public function loginModeratorUser() {
    $this->drupalLogin($this->getModeratorUser());
  }

  /**
   * Create a "Basic page".
   *
   * @param array $edit
   *   POST data.
   *
   * @return object
   *   Node object.
   */
  public function createPageNode($title, array $edit = array()) {
    $this->drupalPost('node/add/page', $edit, t('Save'));
    $this->assertRaw(t('Basic page %title has been created.', array('%title' => $title)), t('Basic page created.'));

    // Check to make sure the node was created.
    $node = $this->drupalGetNodeByTitle($title);
    $this->assertTrue($node, t('Node found in database.'));

    return $node;
  }

  /**
   * Edit node.
   *
   * @param object $node
   *   Node object.
   * @param array $edit
   *   POST data.
   *
   * @return object
   *   Node object.
   */
  public function editPageNode($node, array $edit = array()) {
    $this->drupalPost("node/$node->nid/edit", $edit, t('Save'));

    $this->assertRaw(t('Basic page %title has been updated..', array('%title' => $node->title)), t('Basic page updated.'));

    return $node;
  }

  /**
   * Publish node.
   *
   * @param object $node
   */
  public function publishNode($node) {
    $edit = array(
      'workbench_moderation_state_new' => workbench_moderation_state_published(),
    );
    $this->drupalPost("node/$node->nid/edit", $edit, t('Save'));
  }

  /**
   * Create new content type for tests.
   */
  protected function configureContentType(array $options = array()) {
    // Enable moderation on page content type.
    $default_options = array('revision', 'moderation');
    variable_set('node_options_page', $default_options + $options);
  }

  /**
   * Install a specified language if it has not been already, otherwise make
   * sure that the language is enabled.
   *
   * @param $langcode
   *   Langcode of language to be added.
   */
  public function addLanguage($langcode) {
    // Check to make sure that language has not already been installed.
    $this->drupalGet('admin/config/regional/language');

    if (strpos($this->drupalGetContent(), 'enabled[' . $langcode . ']') === FALSE) {
      // Doesn't have language installed so add it.
      $edit = array();
      $edit['langcode'] = $langcode;
      $this->drupalPost('admin/config/regional/language/add', $edit, t('Add language'));

      // Make sure we are not using a stale list.
      drupal_static_reset('language_list');
      $languages = language_list('language');
      $this->assertTrue(array_key_exists($langcode, $languages), t('Language was installed successfully.'));

      if (array_key_exists($langcode, $languages)) {
        $this->assertRaw(t('The language %language has been created and can now be used. More information is available on the <a href="@locale-help">help screen</a>.', array('%language' => $languages[$langcode]->name, '@locale-help' => url('admin/help/locale'))), t('Language has been created.'));
      }
    }
    elseif ($this->xpath('//input[@type="checkbox" and @name=:name and @checked="checked"]', array(':name' => 'enabled[' . $langcode . ']'))) {
      // It is installed and enabled. No need to do anything.
      $this->assertTrue(TRUE, 'Language [' . $langcode . '] already installed and enabled.');
    }
    else {
      // It is installed but not enabled. Enable it.
      $this->assertTrue(TRUE, 'Language [' . $langcode . '] already installed.');
      $this->drupalPost(NULL, array('enabled[' . $langcode . ']' => TRUE), t('Save configuration'));
      $this->assertRaw(t('Configuration saved.'), t('Language successfully enabled.'));
    }
  }

  /**
   * Get a language object from a language code.
   */
  public function getLanguage($langcode) {
    if (is_object($langcode)) {
      return $langcode;
    }
    else {
      $language_list = language_list();
      return $language_list[$langcode];
    }
  }

  /**
   * Enable URL language detection.
   */
  function enableUrlLanguageDetection($types = array('language', 'language_content')) {
    // Enable URL language detection and selection.
    // In some cases language_content is not available.
    $edit = array();
    if ((is_array($types) && in_array('language', $types)) || (is_string($types) && $types == 'language')) {
      $edit['language[enabled][locale-url]'] = TRUE;
    }
    if ((is_array($types) && in_array('language_content', $types)) || (is_string($types) && $types == 'language_content')) {
      $edit['language_content[enabled][locale-interface]'] = TRUE;
    }

    $this->drupalPost('admin/config/regional/language/configure', $edit, t('Save settings'));
    $this->assertRaw(t('Language negotiation configuration saved.'), t('URL language detection enabled.'));
    $this->drupalGet('admin/config/regional/language/configure');
    // Reset caches.
    drupal_static_reset('locale_url_outbound_alter');
    drupal_static_reset('language_list');
  }

  /**
   * Retrieves a Drupal path or an absolute path with language.
   */
  function get($language, $path = '', array $options = array(), array $headers = array()) {
    $options['language'] = $this->getLanguage($language);
    return $this->drupalGet($path, $options, $headers);
  }

  /**
   * Posts to a Drupal path with language.
   */
  function post($language, $path, $edit, $submit, array $options = array(), array $headers = array(), $form_html_id = NULL, $extra_post = NULL) {
    $options['language'] = $this->getLanguage($language);
    $this->drupalPost($path, $edit, $submit, $options, $headers, $form_html_id, $extra_post);
  }

}

class WorkbenchPathRevisionManualAlias extends WorkbenchPathRevisionBaseTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Create manual alias',
      'description' => 'Test creating manual aliases.',
      'group' => 'Workbench Path Revision',
    );
  }

  public function setUp() {
    parent::setUp('workbench_path_revision');

    $this->loginModeratorUser();
  }

  public function testSaveAndPublishNode() {
    // Create new node and publish it.
    $alias = $this->randomName();
    $edit = array(
      'title' => $this->randomName(),
      'workbench_moderation_state_new' => workbench_moderation_state_published(),
      'path[alias]' => $alias,
    );
    $node = $this->createPageNode($edit['title'], $edit);

    // Test if alias is created properly.
    $this->assertUrl($alias);
    $this->assertResponse(200);

    // Test if alias is created properly.
    $this->drupalGet("node/$node->nid/edit");
    $this->assertFieldByName('path[alias]', $alias);
  }

  public function testSaveAsDraftNode() {
    // Create new draft of node.
    $alias = $this->randomName();
    $edit = array(
      'title' => $this->randomName(),
      'workbench_moderation_state_new' => workbench_moderation_state_none(),
      'path[alias]' => $alias,
    );
    $node = $this->createPageNode($edit['title'], $edit);

    // Test if alias in not created yet.
    $this->assertUrl("node/$node->nid");
    $this->assertResponse(200);

    // Test if alias is created properly.
    $this->drupalGet("node/$node->nid/edit");
    $this->assertFieldByName('path[alias]', $alias);

    // Publish node.
    $this->publishNode($node);

    // Test if alias is created properly.
    $this->assertUrl($alias);
  }
}

class WorkbenchPathRevisionPathauto extends WorkbenchPathRevisionBaseTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Pathauto integration',
      'description' => 'Test creating automatic (pathauto) aliases.',
      'group' => 'Workbench Path Revision',
      'dependencies' => array('pathauto'),
    );
  }

  public function setUp() {
    parent::setUp('pathauto', 'workbench_path_revision');

    $this->loginModeratorUser();
  }

  public function testManualSaveAndPublishNode() {
    // Create new node and publish it.
    $alias = $this->randomName();
    $edit = array(
      'title' => $this->randomName(),
      'workbench_moderation_state_new' => workbench_moderation_state_published(),
      'path[alias]' => $alias,
      'path[pathauto]' => FALSE,
    );
    $node = $this->createPageNode($edit['title'], $edit);

    // Test if alias is created properly.
    $this->assertUrl($alias);
    $this->assertResponse(200);

    // Check if form fields has expected values.
    $this->drupalGet("node/$node->nid/edit");
    $this->assertFieldByName('path[alias]', $alias);
    $this->assertNoFieldChecked('edit-path-pathauto', 'Generating automatic URL alias is disabled');
  }

  public function testAutoSaveAndPublishNode() {
    // Create new node and publish it.
    $title = $this->randomName();
    $edit = array(
      'title' => $title,
      'workbench_moderation_state_new' => workbench_moderation_state_published(),
      'path[pathauto]' => TRUE,
    );
    $node = $this->createPageNode($title, $edit);

    // Test if alias is created properly.
    $alias = strtolower($title);
    $this->assertUrl("content/$alias");
    $this->assertResponse(200);

    // Check if form fields has expected values.
    $this->drupalGet("node/$node->nid/edit");
    $this->assertFieldChecked('edit-path-pathauto', 'Generating automatic URL alias is enabled');
  }

  public function testManualSaveAsDraftNode() {
    // Create new draft of node.
    $alias = $this->randomName();
    $edit = array(
      'title' => $this->randomName(),
      'workbench_moderation_state_new' => workbench_moderation_state_none(),
      'path[alias]' => $alias,
      'path[pathauto]' => FALSE,
    );
    $node = $this->createPageNode($edit['title'], $edit);

    // Test if alias in not created yet.
    $this->assertUrl("node/$node->nid");
    $this->assertResponse(200);

    // Test if alias is created properly.
    $this->drupalGet("node/$node->nid/edit");
    $this->assertNoFieldChecked('edit-path-pathauto', 'Generating automatic URL alias is disabled');
    $this->assertFieldByName('path[alias]', $alias);

    // Publish node.
    $this->publishNode($node);

    // Test if alias is created properly.
    $this->assertUrl($alias);
  }

  public function testAutoSaveAsDraftNode() {
    // Create new draft of node.
    $title = $this->randomName();
    $edit = array(
      'title' => $title,
      'workbench_moderation_state_new' => workbench_moderation_state_none(),
      'path[pathauto]' => TRUE,
    );
    $node = $this->createPageNode($title, $edit);

    // Test if alias in not created yet.
    $this->assertUrl("node/$node->nid");
    $this->assertResponse(200);

    // Test if alias is created properly.
    $this->drupalGet("node/$node->nid/edit");
    $this->assertFieldChecked('edit-path-pathauto', 'Generating automatic URL alias is enabled');

    // Publish node.
    $this->publishNode($node);

    // Test if alias is created properly.
    $alias = strtolower($title);
    $this->assertUrl("content/$alias");
  }
}

class WorkbenchPathRevisionModerateForm extends WorkbenchPathRevisionBaseTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Moderation form at node page',
      'description' => 'Test if moderation form at node page works with path revisions.',
      'group' => 'Workbench Path Revision',
      'dependencies' => array('pathauto', 'workbench'),
    );
  }

  public function setUp() {
    parent::setUp('pathauto', 'workbench', 'workbench_path_revision');

    $this->loginModeratorUser();
  }

  public function testManualSaveAsDraftNode() {
    // Create new draft of node.
    $alias = $this->randomName();
    $edit = array(
      'title' => $this->randomName(),
      'workbench_moderation_state_new' => workbench_moderation_state_none(),
      'path[alias]' => $alias,
      'path[pathauto]' => FALSE,
    );
    $node = $this->createPageNode($edit['title'], $edit);

    // Test if alias in not created yet.
    $this->assertUrl("node/$node->nid");
    $this->assertResponse(200);

    // Moderate node to published.
    $moderate = array('state' => workbench_moderation_state_published());
    $this->drupalPost(NULL, $moderate, t('Apply'));

    // Test if alias is created properly.
    // Caution: assertUrl() don't work with form redirection.
    $this->assertLinkByHref($alias);
    $this->assertResponse(200);

    // Check if form fields has expected values.
    $this->drupalGet("node/$node->nid/edit");
    $this->assertNoFieldChecked('edit-path-pathauto', 'Generating automatic URL alias is disabled');
    $this->assertFieldByName('path[alias]', $alias);
  }

  public function testAutoSaveAsDraftNode() {
    // Create new draft of node.
    $title = $this->randomName();
    $edit = array(
      'title' => $title,
      'workbench_moderation_state_new' => workbench_moderation_state_none(),
      'path[pathauto]' => TRUE,
    );
    $node = $this->createPageNode($title, $edit);

    // Test if alias in not created yet.
    $this->assertUrl("node/$node->nid");
    $this->assertResponse(200);

    // Moderate node to published.
    $moderate = array('state' => workbench_moderation_state_published());
    $this->drupalPost(NULL, $moderate, t('Apply'));

    // Test if alias is created properly.
    // Caution: assertUrl() don't work with form redirection.
    $alias = strtolower($title);
    $this->assertLinkByHref("content/$alias");
    $this->assertResponse(200);

    // Check if form fields has expected values.
    $this->drupalGet("node/$node->nid/edit");
    $this->assertFieldChecked('edit-path-pathauto', 'Generating automatic URL alias is enabled');
  }
}

class WorkbenchPathRevisionEntityTranslation extends WorkbenchPathRevisionBaseTestCase {
  protected $admin_user;

  protected $admin_user_permissions = array(
    'bypass node access',
    'administer nodes',
    'administer languages',
    'administer content types',
    'administer blocks',
    'access administration pages',
    'administer site configuration',
  );

  protected $moderator_user_permissions = array(
    'translate any entity',
    'access content',
    'view revisions',
    'view all unpublished content',
    'view moderation history',
    'view moderation messages',
    'bypass workbench moderation',
    'create url aliases',
    'create page content',
    'edit any page content',
  );

  public static function getInfo() {
    return array(
      'name' => 'Entity Translation integration',
      'description' => 'Test integration with Entity Translation and Pathauto modules',
      'group' => 'Workbench Path Revision',
      'dependencies' => array('pathauto', 'title', 'entity_translation'),
    );
  }

  /**
   * Create a translation.
   *
   * @param $node
   *   Node of the basic page to create translation for.
   * @param $title
   *   Title of the basic page in the specified language.
   * @param $langcode
   *   The language code to be assigned to the specified values.
   */
  public function createTranslation($node, $title, array $edit = array(), $langcode, $source_langcode = 'en') {
    $this->drupalGet('node/' . $node->nid . '/edit/add/' . $source_langcode . '/' . $langcode);

    $title_key = "title_field[$langcode][0][value]";
    $this->assertFieldByName($title_key, $node->title_field[$source_langcode][0]['value'], 'Original title value correctly populated.');

    $edit[$title_key] = $title;

    $this->drupalPost(NULL, $edit, t('Save'));
    $this->drupalGet('node/' . $node->nid . '/translate');
    $this->assertLinkByHref('node/' . $node->nid . '/edit/' . $langcode, 0, 'Translation edit link found. Translation created.');

    return $node;
  }

  public function setUp() {
    parent::setUp('pathauto', 'title', 'entity_translation', 'workbench_path_revision');

    $this->loginAdminUser();

    // Configure the "Basic page" content type to use multilingual support with
    // translation.
    $edit = array();
    $edit['language_content_type'] = ENTITY_TRANSLATION_ENABLED;
    $this->drupalPost('admin/structure/types/manage/page', $edit, t('Save content type'));
    $this->assertRaw(t('The content type %type has been updated.', array('%type' => 'Basic page')), t('Basic page content type has been updated.'));

    // Make title translatable.
    title_field_replacement_toggle('node', 'page', 'title');

    $this->addLanguage('pl');
    $this->enableUrlLanguageDetection();

    $this->loginModeratorUser();
  }

  public function testManualAlias() {
    // Create new English node.
    $title_en = $this->randomName();
    $alias_en = $this->randomName();
    $edit = array(
      'title_field[und][0][value]' => $title_en,
      'workbench_moderation_state_new' => workbench_moderation_state_none(),
      'path[alias]' => $alias_en,
      'path[pathauto]' => FALSE,
    );
    $node = $this->createPageNode($title_en, $edit);

    // Check if URL is correct.
    $this->assertUrl("node/$node->nid");

    // Check if form fields has expected values.
    $this->drupalGet("node/$node->nid/edit");
    $this->assertFieldByName('path[alias]', $alias_en);
    $this->assertNoFieldChecked('edit-path-pathauto', 'Generating automatic URL alias is disabled');

    // Add Polish translation.
    $title_pl = $this->randomName();
    $alias_pl = $this->randomName();
    $edit = array(
      'workbench_moderation_state_new' => workbench_moderation_state_published(),
      'path[alias]' => $alias_pl,
      'path[pathauto]' => FALSE,
    );
    $this->createTranslation($node, $title_pl, $edit, 'pl');

    // Check if form fields has expected values.
    $this->get('pl', "node/$node->nid/edit");
    $this->assertFieldByName('path[alias]', $alias_pl);
    $this->assertNoFieldChecked('edit-path-pathauto', 'Generating automatic URL alias is disabled');

    // Check if Polish alias is created.
    $this->get('pl', "node/$node->nid");
    $this->assertLinkByHref($alias_pl);

    // Check if English alias is created.
    $this->get('en', "node/$node->nid");
    $this->assertLinkByHref($alias_en);
  }

  public function testAutoAlias() {
    // Create new English node.
    $title_en = $this->randomName();
    $alias_en = strtolower($title_en);
    $edit = array(
      'title_field[und][0][value]' => $title_en,
      'workbench_moderation_state_new' => workbench_moderation_state_none(),
      'path[pathauto]' => TRUE,
    );
    $node = $this->createPageNode($title_en, $edit);

    // Check if URL is correct.
    $this->assertUrl("node/$node->nid");

    // Check if form fields has expected values.
    $this->drupalGet("node/$node->nid/edit");
    $this->assertFieldChecked('edit-path-pathauto', 'Generating automatic URL alias is enabled');

    // Add Polish translation and publish node.
    $title_pl = $this->randomName();
    $alias_pl = strtolower($title_pl);
    $edit = array(
      'workbench_moderation_state_new' => workbench_moderation_state_published(),
      'path[pathauto]' => TRUE,
    );
    $this->createTranslation($node, $title_pl, $edit, 'pl');

    // Check if form fields has expected values.
    $this->get('pl', "node/$node->nid/edit");
    $this->assertFieldChecked('edit-path-pathauto', 'Generating automatic URL alias is enabled');

    // Check if Polish alias is created.
    $this->get('pl', "node/$node->nid");
    $this->assertLinkByHref("content/$alias_pl");

    // Check if English alias is created.
    $this->get('en', "node/$node->nid");
    $this->assertLinkByHref("content/$alias_en");
  }
}
