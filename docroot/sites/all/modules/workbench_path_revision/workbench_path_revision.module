<?php

/**
 * Implements hook_node_load().
 */
function workbench_path_revision_node_load($nodes, $types) {
  $vids = array();
  foreach ($nodes as $node) {
    // Remove nodes that are not moderated.
    if (workbench_moderation_node_type_moderated($node->type)) {
      $vids[] = $node->vid;
    }
  }

  // Add information about path revision to node object.
  $path_revisions = workbench_path_revision_load_multiple($vids);

  foreach ($path_revisions as $langcode => $path_revision) {
    $node = &$nodes[$path_revision['nid']];
    $node->workbench_path_revision[$path_revision['language']] = $path_revision;
    if (entity_language('node', $node) == $path_revision['language']) {
      if (module_exists('pathauto')) {
        $node->path['pathauto'] = (bool) $path_revision['pathauto'];
      }
      if (!empty($path_revision['alias'])) {
        $node->path['alias'] = $path_revision['alias'];
      }
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for node_form().
 */
function workbench_path_revision_form_node_form_alter(&$form, $form_state) {
  $node = &$form_state['node'];

  if (!workbench_moderation_node_type_moderated($node->type)) {
    return;
  }

  $entity_language = entity_language('node', $node);

  // Because workbench_moderation overrides page callback for "node/%node/edit"
  // information about path has to be added here.
  if (isset($node->workbench_path_revision[$entity_language]['pathauto']) && isset($form['path']['alias'])) {
    $form['path']['pathauto']['#default_value'] = $node->workbench_path_revision[$entity_language]['pathauto'];
  }
  if (!empty($node->workbench_path_revision[$entity_language]['alias']) && isset($form['path']['alias'])) {
    $form['path']['alias']['#default_value'] = $node->workbench_path_revision[$entity_language]['alias'];
  }
}

/**
 * Update aliases of node for all translations when node is being published.
 */
function workbench_path_revision_update_live_aliases($node) {
  $current_node_aliases = db_select('url_alias')
    ->condition('source', 'node/' . $node->nid)
    ->fields('url_alias')
    ->execute()
    ->fetchAllAssoc('language', PDO::FETCH_ASSOC);

  foreach ($node->workbench_path_revision as $langcode => $path_revision) {
    $path = array(
      'language' => $langcode,
      'alias' => $path_revision['alias'],
      'source' => 'node/' . $node->nid,
    );

    if (isset($current_node_aliases[$langcode])) {
      $path['pid'] = $current_node_aliases[$langcode]['pid'];
    }

    // Pathauto is on
    if (module_exists('pathauto') && $path_revision['pathauto']) {
      $translated_node = clone $node;
      $translated_node->path = $path;
      $options = array(
        'language' => $langcode,
      );

      pathauto_node_update_alias($translated_node, 'update', $options);
    }
    // Pathauto is off
    else {
      path_save($path);
    }
  }
}

/**
 * Implements hook_node_presave().
 */
function workbench_path_revision_node_presave($node) {
  if (!workbench_moderation_node_type_moderated($node->type)) {
    return;
  }

  // Allow other modules to skip the path revision-ing part, because if saving
  // multiple nodes in a programmatic fashion (multiple node_save calls within
  // the same request), workbench_moderation_store will only be executed for
  // the first node_save, and the rest of the nodes will have their aliases
  // lost, because workbench_path_revision_update_live_aliases() will not be
  // executed.
  if (isset($node->workbench_path_revision_skip) && !empty($node->workbench_path_revision_skip)) {
    return;
  }

  $node_language = entity_language('node', $node);

  // Check if other modules didn't override path data.
  if (empty($node->workbench_path_revision[$node_language]['overridden']) || !isset($node->workbench_path_revision[$node_language])) {
    $node->workbench_path_revision[$node_language]['pathauto'] =
      isset($node->path['pathauto']) ? (int) $node->path['pathauto'] : 1;
    $node->workbench_path_revision[$node_language]['alias'] =
      empty($node->path['pathauto']) ? $node->path['alias'] : '';
    $node->workbench_path_revision[$node_language]['language'] = $node_language;
  }

  // Block saving URL aliases.
  if (isset($node->workbench_path_revision)) {
    $node->path = array('alias' => '', 'pathauto' => 0);
  }

  // Update aliases for other translations.
  // 'updating_live_revision' is set only if executed from workbench_moderation_store()
  if (isset($node->workbench_moderation['current']->state) && $node->workbench_moderation['current']->state == 'published' && !empty($node->workbench_moderation['updating_live_revision'])) {
    workbench_path_revision_update_live_aliases($node);
  }
}

/**
 * Implements hook_node_insert().
 */
function workbench_path_revision_node_insert($node) {
  if (!workbench_moderation_node_type_moderated($node->type)) {
    return;
  }

  workbench_path_revision_node_update($node);
}

/**
 * Implements hook_node_update().
 */
function workbench_path_revision_node_update($node) {
  if (!workbench_moderation_node_type_moderated($node->type)) {
    return;
  }

  // The workbench_path_revision property might not be set, if exclusively
  // asked to skip it.
  if (isset($node->workbench_path_revision)) {
    foreach ($node->workbench_path_revision as $path_revision) {
      $path_revision['nid'] = $node->nid;
      $path_revision['vid'] = $node->vid;
      // Null aliases will break when saving,
      // so we can safely convert them to empty strings.
      if (empty($path_revision['alias'])) {
        $path_revision['alias'] = '';
      }
      workbench_path_revision_save($path_revision);
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function workbench_path_revision_node_delete($node) {
  db_delete('workbench_path_revision')
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * Validate forms where alias of node's path is changed.
 *
 * @param object $node
 *   Node object.
 * @param array $form_state
 *   Form state.
 * @param string $element_name
 *   Element which will be used to mark errors.
 * @param string $entity_language
 *   Language of node entity.
 */
function workbench_path_revision_validate($node, $form_state, $element_name = '', $entity_language = NULL) {
  $errors = array();
  $languages = language_list();

  foreach ($node->workbench_path_revision as $langcode => $path_revision) {
    if ($entity_language == $langcode) {
      $path_revision['alias'] = '';
      $path_revision['pathauto'] = 0;
      $path_revision['language'] = $langcode;

      if (isset($form_state['values']['path']['alias'])) {
        $path_revision['alias'] = $form_state['values']['path']['alias'];
      }

      if (isset($form_state['values']['path']['pathauto'])) {
        $path_revision['pathauto'] = $form_state['values']['path']['pathauto'];
      }
    }

    if ($path_revision['alias'] && !$path_revision['pathauto']) {
      if ($alias_in_use = workbench_path_revision_in_use($node->nid, $path_revision['alias'], $path_revision['language'])) {
        $errors[] = t('The alias %alias is already in use in %language language. <a href="@url">Go to content that uses this alias</a> (@source).', array(
          '%alias' => $path_revision['alias'],
          '%language' => $languages[$path_revision['language']]->name,
          '@url' => url($alias_in_use->alias, array('language' => $languages[$alias_in_use->language])),
          '@source' => $alias_in_use->source,
        ));
      }
    }
  }

  // Display errors if any.
  if ($errors) {
    workbench_path_revision_form_set_errors($element_name, $errors);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function workbench_path_revision_form_workbench_moderation_moderate_form_alter(&$form, &$form_state, $form_id) {
  $form['#validate'][] = 'workbench_path_revision_form_workbench_moderation_moderate_form_validate';
}

/**
 * Validation callback for workbench_moderation_moderate_form().
 *
 * Checks if path aliases from revisions are already in use.
 */
function workbench_path_revision_form_workbench_moderation_moderate_form_validate($form, &$form_state) {
  if ($form_state['values']['state'] == 'published') {
    $node = &$form['node']['#value'];
    workbench_path_revision_validate($node, $form_state, '', entity_language('node', $node));
  }
}

/**
 * Implements hook_node_validate().
 *
 * Checks if path aliases from revisions are already in use.
 */
function workbench_path_revision_node_validate($node, $form, &$form_state) {
  if (isset($form_state['values']['workbench_moderation_state_new']) && $form_state['values']['workbench_moderation_state_new'] == 'published') {
    $node_language = entity_language('node', $node);
    if (!empty($node->nid)) {
      $node = &$form_state['node'];
    }

    if (!isset($node->workbench_path_revision[$node_language])) {
      $node->workbench_path_revision[$node_language]['pathauto'] = isset($node->path['pathauto']) ? (int) $node->path['pathauto'] : 1;
      $node->workbench_path_revision[$node_language]['alias'] = empty($node->path['pathauto']) ? $node->path['alias'] : '';
      $node->workbench_path_revision[$node_language]['language'] = $node_language;
    }

    workbench_path_revision_validate($node, $form_state, 'path][alias', $node_language);
  }
}

/**
 * Set multiple errors with form_set_error().
 *
 * @param array $errors
 */
function workbench_path_revision_form_set_errors($name, array $errors = array()) {
  if (count($errors) > 1) {
    $message = form_get_errors()
      ? implode('</li><li>', $errors)
      : '<ul><li>' . implode('</li><li>', $errors) . '</li></ul>';
  }
  else {
    $message = $errors[0];
  }
  form_set_error($name, $message);
}

/**
 * Checks if alias is already in use.
 *
 * @param $nid
 *   Node id.
 * @param $alias
 *   Alias to check.
 * @param $langcode
 *   Language code of alias.
 *
 * @return bool
 *   TRUE of alias already is in use, FALSE otherwise.
 */
function workbench_path_revision_in_use($nid, $alias, $langcode) {
  $alias_in_use = db_query("SELECT * FROM {url_alias} WHERE source <> :source AND alias = :alias AND language = :language LIMIT 1", array(
    ':source' => "node/$nid",
    ':alias' => $alias,
    ':language' => $langcode,
  ))->fetchAllAssoc('pid');

  return $alias_in_use ? current($alias_in_use) : FALSE;
}

/**
 * Save the path revision for node.
 *
 * @param $entity
 *   The node object.
 * @param $path_revision
 */
function workbench_path_revision_save($path_revision) {
  db_merge('workbench_path_revision')
    ->key(array(
      'nid' => $path_revision['nid'],
      'vid' => $path_revision['vid'],
      'language' => $path_revision['language'],
    ))
    ->fields(array(
      'nid' => $path_revision['nid'],
      'vid' => $path_revision['vid'],
      'language' => $path_revision['language'],
      'alias' => $path_revision['alias'],
      'pathauto' => $path_revision['pathauto'],
    ))
    ->execute();
}

/**
 * Load a path revision for an entity.
 *
 * @param $vid
 *   The node version ID.
 * @param $conditions
 *   An associative array of conditions on the {workbench_path_revision}
 *   table, where the keys are the database fields and the values are the
 *   values those fields must have. Instead, it is preferable to use
 *   EntityFieldQuery to retrieve a list of entity IDs loadable by
 *   this function.
 *
 * @return array
 *   Path revision from DB.
 */
function workbench_path_revision_load($vid, $conditions = array()) {
  $path_revision = workbench_path_revision_load_multiple(array($vid), $conditions);
  return !empty($path_revision) ? reset($path_revision) : FALSE;
}

/**
 * Load a path revision state for multiple entities.
 *
 * @param $vids
 *   An array of node version IDs.
 * @param $conditions
 *   An associative array of conditions on the {workbench_path_revision}
 *   table, where the keys are the database fields and the values are the
 *   values those fields must have. Instead, it is preferable to use
 *   EntityFieldQuery to retrieve a list of entity IDs loadable by
 *   this function.
 *
 * @return array
 *   Array of path revisions from DB.
 */
function workbench_path_revision_load_multiple($vids, $conditions = NULL) {
  if (!$vids) {
    return array();
  }

  $query = db_select('workbench_path_revision', 'pr')
    ->fields('pr')
    ->condition('vid', $vids);

  // Add conditions.
  if ($conditions) {
    foreach ($conditions as $field => $value) {
      $query->condition($field, $value);
    }
  }

  return $query
    ->execute()
    ->fetchAllAssoc('language', PDO::FETCH_ASSOC);
}

/**
 * Disable path for given node translation from being updated.
 *
 * @param object $node
 *   Node object.
 * @param $langcode
 *   Language of path that will be prevented from updating.
 */
function workbench_path_revision_disable_path_update($node, $langcode, $old_alias = NULL) {
  $node->workbench_path_revision[$langcode]['pathauto'] = 0;
  if ($langcode == $node->path['language']) {
    $old_alias = $node->path['alias'];
  }
  elseif (empty($old_alias)) {
    $old_path = path_load(array(
      'source' => "node/$node->nid",
      'language' => $langcode,
    ));
    $old_alias = $old_path['alias'];
  }
  $node->workbench_path_revision[$langcode]['alias'] = $old_alias;
  $node->workbench_path_revision[$langcode]['overridden'] = TRUE;

  if (module_exists('pathauto') && $node->vid == $node->workbench_path_revision[$langcode]->vid) {
    $node->path['pathauto'] = 0;
  }
}

/**
 * Implements hook_path_update().
 *
 * Update revisioned paths when alias is updated outside node_save().
 */
function workbench_path_revision_path_update($path) {
  if ($path['alias'] != $path['original']['alias'] && fnmatch('node/*', $path['source'])) {
    list(, $nid) = explode('/', $path['source']);
    $node = node_load($nid);

    // Update only path revision if node don't have draft version.
    if (workbench_moderation_node_is_current($node)) {
      $path_revision = workbench_path_revision_load($node->vid, array(
        'language' => $path['language'],
        'alias' => $path['original']['alias'],
      ));

      if (!empty($path_revision)) {
        $path_revision['alias'] = $path['alias'];
        workbench_path_revision_save($path_revision);
      }
    }
  }
}

/**
 * Implements hook_redirect_presave().
 *
 * @see https://drupal.org/node/1945558#comment-7500630
 */
function workbench_path_revision_redirect_presave($redirect) {
  // Creating automatic redirects is disabled.
  if (!variable_get('redirect_auto_redirect', TRUE)) {
    return;
  }

  // Remove redirects pointing to aliases of the node it handles.
  $query = db_select('url_alias', 'u')
    ->fields('u', array('alias'));
  $query->join('redirect', 'r', 'u.alias = r.source AND u.language = r.language');
  $query->fields('r', array('rid'));
  $results = $query->execute();

  foreach ($results as $record) {
    db_delete('redirect')
      ->condition('rid', $record->rid)
      ->execute();
  }
}
