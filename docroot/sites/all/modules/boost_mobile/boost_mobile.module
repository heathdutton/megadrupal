<?php

/**
 * @file
 * Adds mobile support to Boost module.
 */

/**
 * Default value for the mobile cache dir.
 */
define('BOOST_MOBILE_DIR', 'mobile');


/**
 * Implements hook_menu().
 *
 * We define two paths with tabs which will integrate with boost admin tabs.
 */
function boost_mobile_menu() {
  $items = array();
  $path = drupal_get_path('module', 'boost_mobile');

  // Create a Boost Mobile tab in boost config.
  $items['admin/config/system/boost/mobile'] = array(
    'title' => 'Boost mobile',
    'description' => 'Settings for Boost Mobile.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('boost_mobile_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'boost_mobile.admin.inc',
    'file path' => $path,
    'weight' => 100,
  );

  // Create default tab in Boost Mobile tab.
  $items['admin/config/system/boost/mobile/default'] = array(
    'title' => 'Boost Mobile Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  // Htaccess generation tab.
  $items['admin/config/system/boost/mobile/htaccess'] = array(
    'title' => '.htaccess Generation',
    'description' => '.htaccess configuration for Boost Mobile.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('boost_mobile_admin_htaccess_generation'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'boost_mobile.admin.inc',
    'file path' => $path,
  );

  return $items;
}


/**
 * Implements hook_custom_theme().
 *
 * This hook permits to switch theme based on context
 * The detection and version setting are made with the .htaccess
 * which sets the environment variable boostpath depending on
 * User agent, Cookie or Get parameter
 *
 * The boostpath is equal to the boost_mobile_dir when we are on mobile version
 * If not we are on desktop version
 */
function boost_mobile_custom_theme() {
  $default_theme = variable_get('default_theme', 'bartik');
  $mobile_theme = variable_get('boost_mobile_theme', $default_theme);
  $bm_dir = variable_get('boost_mobile_dir', BOOST_MOBILE_DIR);
  $boostpath = $_SERVER['boostpath'];

  if ($boostpath == $bm_dir) {
    return $mobile_theme;
  }
}

/**
 * Implements hook_block_info().
 */
function boost_mobile_block_info() {

  $blocks = array();
  $blocks['boost_mobile_switcher']['info'] = t('Boost mobile: display switcher block');

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function boost_mobile_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'boost_mobile_switcher':
      module_load_include('inc', 'boost_mobile', 'boost_mobile.blocks');
      return boost_mobile_block_view_switcher();
  }

  return $block;
}

/**
 * Overwrite old htaccess rules with new ones in boost mobile directory.
 */
function boost_mobile_htaccess_cache_dir_put() {
  global $_boost, $base_path, $base_root;
  $url = $base_root . request_uri();
  $parts = parse_url($url);

  // Get mobile boost cache directory and set in $_boost.
  $_boost['base_dir'] = boost_mobile_get_mobile_cache_dir() . '/' . $parts['host'] . $base_path;
  if (isset($_boost['base_dir'])) {
    boost_write_file($_boost['base_dir'] . '.htaccess', boost_htaccess_cache_dir_generate());
  }
}

/**
 * Returns the relative boost mobile cache dir. cache/mobile.
 */
function boost_mobile_get_mobile_cache_dir() {
  return variable_get('boost_root_cache_dir', BOOST_ROOT_CACHE_DIR) . '/' . variable_get('boost_mobile_dir', BOOST_MOBILE_DIR);
}

/**
 * Implements hook_cron().
 *
 * Performs periodic actions.
 * see @boost_cron
 */
function boost_mobile_cron() {
  global $_boost, $base_path, $base_root;
  $url = $base_root . request_uri();
  $parts = parse_url($url);

  $_boost = boost_transform_url();

  // Get mobile boost cache directory and set in $_boost
  $_boost['base_dir'] = boost_mobile_get_mobile_cache_dir() . '/' . $parts['host'] . $base_path;

  if (isset($_boost['base_dir']) && variable_get('boost_expire_cron', BOOST_EXPIRE_CRON)) {
    $count = _boost_rmdir($_boost['base_dir'], FALSE);
    watchdog('boost_mobile', 'Expired %count stale files from static page cache.', array('%count' => $count), WATCHDOG_NOTICE);
  }
}

/**
 * Implements hook_flush_caches().
 *
 * Deletes all static files.
 * see @boost_flush_caches
 */
function boost_mobile_flush_caches() {
  global $_boost, $base_path, $base_root;
  $url = $base_root . request_uri();
  $parts = parse_url($url);

  $_boost = boost_transform_url();

  // Get mobile boost cache directory and set in $_boost.
  $_boost['base_dir'] = boost_mobile_get_mobile_cache_dir() . '/' . $parts['host'] . $base_path;

  if (isset($_boost['base_dir']) && (lock_may_be_available('cron') || variable_get('boost_ignore_flush', BOOST_IGNORE_FLUSH) == FALSE)) {
    $count = _boost_rmdir($_boost['base_dir'], TRUE);
    watchdog('boost_mobile', 'Flushed all files (%count) from static page cache.', array('%count' => $count), WATCHDOG_NOTICE);
  }
}
