<?php
/**
 * @file
 *   Delete the solr indexed content(s).
 * *
 * @author Devendra Yadav <dev.firoza@gmail.com>
 */

/**
 * Implements hook_help().
 */
function apachesolr_purge_content_help($path, $arg) {
  $help = '';
  switch ($path) {
    case 'admin/help#apachesolr_purge_content':
      $help = check_markup(file_get_contents(dirname(__FILE__) . "/README.txt"));
      break;
  }
  return $help;
}

/**
 * Implements hook_menu().
 */
function apachesolr_purge_content_menu() {
  $items['admin/config/search/apachesolr/purge-solr-content'] = array(
    'title' => 'Purge Content(s)',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('apachesolr_purge_content_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Form constructor for take input to delete the indexed document(s).
 *
 * @see _apachesolr_purge_content_entity_bundles_callback()
 * @see _apachesolr_purge_content_entity_ids_callback()
 *  @see apachesolr_purge_content_form_validate()
 * @see apachesolr_purge_content_form_submit()
 */
function apachesolr_purge_content_form($form, &$form_state) {
  $form['apachesolpc'] = array(
    '#type' => 'fieldset',
    '#title' => t('Purge Solr Contents(s)'),
    '#id' => 'edit-apachesolpc',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  // Fetch the indexed entities.
  $query = "SELECT entity_type, bundle FROM {apachesolr_index_bundles} ";
  $result = db_query($query)->fetchAll();

  // An array variable to hold the indexed entities list.
  $indexed_entities = array();

  // An array variable to hold the indexed bundles list.
  $indexed_bundles = array();
  // Iterate through each database result set.
  foreach ($result as $data) {
    // Get the entity info array of an entity type.
    $entity_info = entity_get_info($data->entity_type);
    $bundles = $entity_info['bundles'];
    $indexed_entities[$data->entity_type] = ucfirst($entity_info['label']);
    if (array_key_exists($data->bundle, $bundles)) {
      $indexed_bundles[$data->entity_type][$data->bundle] = ucfirst($bundles[$data->bundle]['label']);
    }
  }

  // An AJAX request calls the form builder function for every change.
  // We can change how we build the form based on $form_state.
  $form['apachesolpc']['entity_type'] = array(
    '#type' => 'radios',
    '#title' => t('Select the entity type to purge solr content(s)/document(s).'),
    '#options' => $indexed_entities,
    '#ajax' => array(
      'callback' => '_apachesolr_purge_content_entity_bundles_callback',
      'wrapper' => 'bundle_container',
      'effect' => 'fade',
    ),
    '#required' => TRUE,
  );

  $form['apachesolpc']['bundle_container'] = array(
    '#type' => 'fieldset',
    '#title' => t("Generated bundles for requested entity"),
    '#id' => 'edit-bundle-container',
    '#prefix' => '<div id="bundle_container">',
    '#suffix' => '</div>',
  );

  // An AJAX request calls the form builder function for every change.
  // We can change how we build the form based on $form_state.
  $entity_bundle_data = array();
  if (!empty($form_state['values']['entity_type'])) {
    $entity_bundle_data = $indexed_bundles[$form_state['values']['entity_type']];
    $form['apachesolpc']['bundle_container']['bundle'] = array(
      '#type' => 'radios',
      '#title' => t('Bundle Name'),
      '#id' => 'edit-bundle',
      '#options' => $entity_bundle_data,
      '#required' => TRUE,
      '#ajax' => array(
        'callback' => '_apachesolr_purge_content_entity_ids_callback',
        'wrapper' => 'entity_id_container',
      ),
    );
  }

  $form['apachesolpc']['entity_id_container'] = array(
    '#type' => 'fieldset',
    '#title' => t("Generated indexed entity IDs for requested bundle"),
    '#id' => 'edit-entity-id-container',
    '#prefix' => '<div id="entity_id_container">',
    '#suffix' => '</div>',
  );

  $entity_ids_data = '';
  if (!empty($form_state['values']['entity_type']) && !empty($form_state['values']['bundle'])) {
    $form_state['values']['bundle'];
    $indexer_table = apachesolr_get_indexer_table($form_state['values']['entity_type']);
    $query = "SELECT entity_id FROM $indexer_table WHERE entity_type = :entity_type AND bundle = :bundle";
    $results = db_query($query, array(':entity_type' => $form_state['values']['entity_type'], ':bundle' => $form_state['values']['bundle']))->fetchAll();
    $entity_arr = array();
    foreach ($results as $items) {
      $entity_arr[] = $items->entity_id;
    }

    if (count($entity_arr)) {
      $entity_ids_data = implode(',', $entity_arr);
      $form['apachesolpc']['entity_id_container']['entity_id'] = array(
        '#type' => 'textarea',
        '#title' => t('Entity ID(s)'),
        '#value' => $entity_ids_data,
        '#description' => t('If you want to delete multiple solr contents/documents, Please use comma(a) separated entity ids. e.g 102,105'),
        '#id' => 'edit-entity-id',
        '#rows' => 7,
        '#cols' => 50,
      );
    }
    else {
      $form['apachesolpc']['entity_id_container']['entity_id'] = array(
        '#type' => 'item',
        '#markup' => t('No indexed item exists.'),
      );
    }
  }

  $form['apachesolpc']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Purge'),
  );

  return $form;
}

/**
 * Callbak handler for entity's bundles.
 */
function _apachesolr_purge_content_entity_bundles_callback($form, $form_state) {
  // The form has already been submitted and updated. We can return the replaced
  // item as it is.
  return array(
    '#type' => 'ajax',
    '#commands' => array(
      ajax_command_replace("#bundle_container", render($form['apachesolpc']['bundle_container'])),
      ajax_command_replace("#entity_id_container", render($form['apachesolpc']['entity_id_container'])),
    ),
  );
}

/**
 * Callbak handler for bundle's entity ids.
 */
function _apachesolr_purge_content_entity_ids_callback($form, $form_state) {
  // The form has already been submitted and updated. We can return the replaced
  // item as it is.
  return array(
    '#type' => 'ajax',
    '#commands' => array(
      ajax_command_replace("#entity_id_container", render($form['apachesolpc']['entity_id_container'])),
    ),
  );
}

/**
 * Validate handler for apachesolr_purge_content_form().
 */
function apachesolr_purge_content_form_validate($form, &$form_state) {
  $values = $form_state['values'];
  $entity_type = $values['entity_type'];

  if (apachesolr_environment_variable_get(apachesolr_default_environment(), 'apachesolr_read_only', APACHESOLR_READ_WRITE) == APACHESOLR_READ_ONLY) {
    form_set_error('', t('Indexed solr document have read only access. To complete your action, Please update Index write access.'));
  }
}

/**
 * Submit handler for apachesolr_purge_content_form() to delete the document(s).
 */
function apachesolr_purge_content_form_submit($form, &$form_state) {
  module_load_include('inc', 'apachesolr', 'apachesolr.index');
  $values = $form_state['values'];
  // Get the entity type.
  $entity_type = $values['entity_type'];
  // Get the entity bundle.
  $bundle = $values['bundle'];
  // Get the entity ids.
  $entity_id = $form_state['input']['entity_id'];
  // Convert the entity ids string into an array.
  // Get the table related to entity type.
  $table = apachesolr_get_indexer_table($entity_type);

  $query = "SELECT entity_id FROM $table WHERE entity_type = :entity_type AND bundle = :bundle ";
  $placeholder = array();
  $placeholder[':entity_type'] = $entity_type;
  $placeholder[':bundle'] = $bundle;
  if (trim($entity_id) != '') {
    $entity_ids = explode(',', $entity_id);
    if (count($entity_ids)) {
      $placeholder[':entity_id'] = $entity_ids;
      $query .= "AND entity_id IN (:entity_id)";
    }
  }

  $results = db_query($query, $placeholder)->fetchAll();

  // An array to store the solr indixed entityies.
  $entity_ids = array();
  // An array to store the solr document id(s).
  $document_ids = array();
  foreach ($results as $item) {
    $entity_ids[] = $item->entity_id;
    $document_ids[] = apachesolr_document_id($item->entity_id, $entity_type);
  }

  if (count($document_ids)) {
    try {
      $env_id = apachesolr_default_environment();
      $solr = apachesolr_get_solr($env_id);
      // Create and post a delete document based on multiple document IDs.
      $solr->deleteByMultipleIds($document_ids, $timeout = 100);
      // Set the timestamp of the last index update
      apachesolr_set_last_index_updated($env_id, REQUEST_TIME);

      // Update the index table.
      db_delete($table)->condition('entity_id', $entity_ids, 'IN')->execute();
      // Set the status message.
      drupal_set_message(t('The requested document(s) has been deleted successfully.'));
    }
    catch (Exception $e) {
      watchdog('Apache Solr', nl2br(check_plain($e->getMessage())), NULL, WATCHDOG_ERROR);
      return FALSE;
    }
  }
  else {
    drupal_set_message(t('Sorry! No requested content(s)/document(s) exists.'));
  }
}

