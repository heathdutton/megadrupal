<?php

/**
 * @file
 * Allows creation of dynamically updating webcam nodes, with one or multiple
 * webcams per node.
 */
 
define('WEBCAMS_DEFAULT_WIDTH',  320);
define('WEBCAMS_DEFAULT_HEIGHT', 240);

/**
 * Implementation of hook_perm().
 */
function webcams_perm() {
  return array('access webcams', 'create webcams', 'edit webcams', 'edit own webcams');
}

/**
 * Implementation of hook_node_info().
 */
function webcams_node_info() {
  return array(
    'webcam' => array(
      'name' => t('Webcam'),
      'module' => 'webcams',
      'description' => t("Create dynamically updating webcam nodes, with one or multiple webcams per node."),
    )
  );
}

/**
 * Implementation of hook_access().
 */
function webcams_access($op, $node, $account) {
  if (!user_access('access webcams')) {
    return FALSE;
  }
  
  if ($op == 'create') {
    return user_access('create webcams');
  }

  if ($op == 'update' || $op == 'delete') {
      if (user_access('edit webcams') || (user_access('edit own webcams') && $account->uid == $node->uid && $account->uid != 0)) {
      return TRUE;
    }
  }
}

/**
 * Implementation of hook_menu().
 */
function webcams_menu() {
  $items = array();

  $items['admin/settings/webcams'] = array(
    'title' => 'Webcams',
    'description' => 'Configure webcam settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webcams_admin_settings'),
    'access arguments' => array('administer site configuration'),
  );

  return $items;
}

/**
 * Administer settings form.
 */
function webcams_admin_settings() {
  $form['webcams_max_webcams_per_page'] = array(
    '#type' => 'select',
    '#title' => t('Maximum webcams per node'),
    '#description' => t('Enter the maximum number of webcams a node can contain.'),
    '#default_value' => variable_get('webcams_max_webcams_per_page', 4),
    '#options' => array(1 => 1, 2 => 2, 3 => 3, 4 => 4),
  );
  return system_settings_form($form);
}

/**
 * Implementation of hook_form().
 */
function webcams_form(&$node) {
  drupal_add_css(drupal_get_path('module', 'webcams') .'/webcams.css');
  
  if (!isset($node->webcams)) {
    $node->webcams = array();
  }

  if (count($node->webcams) < variable_get('webcams_max_webcams_per_page', 4)) {
    $webcam = new StdClass;
    $webcam->wid         = 0;
    $webcam->disabled    = TRUE;
    $webcam->name        = '';
    $webcam->default_url = '';
    $webcam->url         = '';
    $webcam->width       = WEBCAMS_DEFAULT_WIDTH;
    $webcam->height      = WEBCAMS_DEFAULT_HEIGHT;
    $webcam->thickbox    = FALSE;
    $webcam->link        = '';
    $webcam->delay       = 30;
    $webcam->timeout     = 0;
    $webcam->weight      = 0;

    for ($i = count($node->webcams); $i < variable_get('webcams_max_webcams_per_page', 4); $i++) {
      $webcam->weight = -10 + $i;
      $node->webcams[] = drupal_clone($webcam);
    }
  }

  // Title
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#required' => TRUE,
    '#default_value' => $node->title,
    '#weight' => -5,
  );

  // Webcams
  $form['webcams'] = array(
    '#tree' => TRUE,
    '#weight' => -4,
  );
  for ($i = 0; $i < count($node->webcams); $i++) {
    // Make sure we're using objects on preview
    $node->webcams[$i] = (object)$node->webcams[$i];
    
    $form['webcams'][$i] = array(
      '#type' => 'fieldset',
      '#tree' => 1,
      '#title' => t('Webcam') .' '. ($i+1),
      '#required' => $i == 0,
      '#collapsible' => TRUE,
      '#collapsed' => $i > 0 && isset($node->webcams[$i]->disabled) && $node->webcams[$i]->disabled == TRUE,
      '#weight' => $i,
    );
    $form['webcams'][$i]['wid'] = array(
      '#type' => 'hidden',
      '#default_value' => $node->webcams[$i]->wid,
    );
    if ($i > 0) {
      $form['webcams'][$i]['disabled'] = array(
        '#type' => 'checkbox',
        '#title' => t('Disable webcam'),
        '#default_value' => isset($node->webcams[$i]->disabled) && $node->webcams[$i]->disabled == TRUE,
        '#weight' => -10,
        '#description' => t('Note that disabling this webcam will completely remove this webcam and its settings.'),
      );
    }
    $form['webcams'][$i]['name'] = array(
      '#type' => 'textfield',
      '#title' => t('Name'),
      '#required' => $i == 0,
      '#default_value' => $node->webcams[$i]->name,
      '#weight' => -9,
    );
    $form['webcams'][$i]['default_url'] = array(
      '#type' => 'textfield',
      '#title' => t('Default Image URL'),
      '#required' => $i == 0,
      '#default_value' => $node->webcams[$i]->default_url,
      '#weight' => -8,
      '#description' => t('This image is displayed while the webcam image is loading, and when an error occurs.'),
    );
    $form['webcams'][$i]['url'] = array(
      '#type' => 'textfield',
      '#title' => t('Webcam Image URL'),
      '#required' => $i == 0,
      '#default_value' => $node->webcams[$i]->url,
      '#weight' => -7,
    );

    $form['webcams'][$i]['width'] = array(
      '#type' => 'textfield',
      '#title' => t('Size'),
      '#required' => $i == 0,
      '#size' => 4,
      '#maxlength' => 4,
      '#default_value' => $node->webcams[$i]->width,
      '#weight' => -6,
      '#prefix' => '<div class="webcams-form-size">',
    );
    $form['webcams'][$i]['times'] = array(
      '#value' => '<div class="form-item">x</div>',
      '#weight' => -5,
    );
    $form['webcams'][$i]['height'] = array(
      '#type' => 'textfield',
      '#size' => 4,
      '#required' => $i == 0,
      '#maxlength' => 4,
      '#default_value' => $node->webcams[$i]->height,
      '#weight' => -4,
      '#suffix' => '</div>',
    );

    if (module_exists('thickbox')) {
      $form['webcams'][$i]['thickbox'] = array(
        '#type' => 'checkbox',
        '#title' => t('Enlarge with Thickbox'),
        '#default_value' => $node->webcams[$i]->thickbox,
        '#weight' => -3,
        '#description' => t('Enlarge the webcam to its original size using Thickbox. This will override the Link field.'),
      );
    }
    else {
      $form['webcams'][$i]['thickbox'] = array(
        '#type' => 'hidden',
        '#default_value' => $node->webcams[$i]->thickbox,
      );
    }
    $form['webcams'][$i]['link'] = array(
      '#type' => 'textfield',
      '#title' => t('Link'),
      '#default_value' => $node->webcams[$i]->link,
      '#weight' => -2,
      '#description' => t('Make your webcam image a link to another page, or leave blank if you don\'t wish to use this functionality. The link can be relative (e.g. <strong>node/23</strong>) or absolute (e.g. <strong>http://www.site.com/page.html</strong>).'),
    );
    $form['webcams'][$i]['delay'] = array(
      '#type' => 'textfield',
      '#title' => t('Delay'),
      '#size' => 4,
      '#required' => $i == 0,
      '#maxlength' => 3,
      '#default_value' => $node->webcams[$i]->delay,
      '#weight' => -1,
      '#attributes' => array('class' => 'webcams-form-delay'),
      '#description' => t('The amount of seconds to wait before refreshing the webcam image.'),
    );
    $form['webcams'][$i]['timeout'] = array(
      '#type' => 'textfield',
      '#title' => t('Timeout'),
      '#size' => 4,
      '#required' => $i == 0,
      '#maxlength' => 3,
      '#default_value' => $node->webcams[$i]->timeout,
      '#weight' => 0,
      '#attributes' => array('class' => 'webcams-form-timeout'),
      '#description' => t('The amount of times the webcam is allowed to refresh before timing out, and no longer update itself. Set to <strong>0</strong> to disable timing out.'),
    );
    $form['webcams'][$i]['weight'] = array(
      '#type' => 'weight',
      '#title' => t('Weight'),
      '#default_value' => $node->webcams[$i]->weight,
      '#delta' => 15,
      '#weight' => 1,
      '#description' => t('The order by which the webcams appear on the page.'),
    );
  }

  // Body
  $form['bodyparts'] = array(
    '#weight' => 0,
  );
  $form['bodyparts']['body'] = array(
    '#type' => 'textarea',
    '#title' => t('Body'),
    '#default_value' => $node->body,
    '#rows' => 20,
    '#required' => TRUE,
    '#weight' => -5,
  );
  $form['bodyparts']['format'] = filter_form($node->format, -4, array('format'));

  return $form;
}

/**
 * Implementation of hook_insert().
 */
function webcams_insert(&$node) {
  for ($i = 0; $i < count($node->webcams); $i++) {
    $webcam = (object) $node->webcams[$i];

    // Only insert if webcam has a url
    if ($i == 0 || ($webcam->name || $webcam->default_url || $webcam->url)) {
      _webcams_insert_webcam($node->nid, $node->vid, $webcam);
    }
  }
}

function _webcams_insert_webcam($nid, $vid, &$webcam) {
  db_query("INSERT INTO {webcams} (nid, vid, name, default_url, url, width, height, thickbox, link, delay, timeout, weight) VALUES (%d, %d, '%s', '%s', '%s', %d, %d, %d, '%s', %d, %d, %d)", $nid, $vid, $webcam->name, $webcam->default_url, $webcam->url, $webcam->width, $webcam->height, $webcam->thickbox, $webcam->link, $webcam->delay, $webcam->timeout, $webcam->weight);
  
  $webcam->wid = db_last_insert_id('webcams', 'wid');
}

/**
 * Implementation of hook_update().
 */
function webcams_update(&$node) {
  if ($node->revision) {
    webcams_insert($node);
  }
  else {
    // Update statement
    for ($i = 0; $i < count($node->webcams); $i++) {
      $webcam = (object) $node->webcams[$i];

      if ($webcam->wid > 0) {
        if ($i == 0 || !(isset($webcam->disabled) && $webcam->disabled == TRUE)) {
          _webcams_update_webcam($webcam);
        }
        else {
          _webcams_delete_webcam($webcam);
        }
      }
      elseif ($i == 0 || !(isset($webcam->disabled) && $webcam->disabled == TRUE)) {
        _webcams_insert_webcam($node->nid, $node->vid, $webcam);
      }
    }
  }
}

function _webcams_update_webcam(&$webcam) {
  db_query("UPDATE {webcams} SET name = '%s', default_url = '%s', url = '%s', width = %d, height = %d, thickbox = %d, link = '%s', delay = %d, timeout = %d, weight = %d WHERE wid = %d", $webcam->name, $webcam->default_url, $webcam->url, $webcam->width, $webcam->height, $webcam->thickbox, $webcam->link, $webcam->delay, $webcam->timeout, $webcam->weight, $webcam->wid);
}

/**
 * Implementation of hook_nodeapi().
 *
 * When a node revision is deleted, we need to remove the corresponding record
 * from our table. The only way to handle revision deletion is by implementing
 * hook_nodeapi().
 */
function webcams_nodeapi(&$node, $op, $teaser, $page) {
  switch ($op) {
    case 'delete revision':
      // Notice that we're matching a single revision based on the node's vid.
      db_query('DELETE FROM {webcams} WHERE vid = %d', $node->vid);
      break;
  }
}

/**
 * Implementation of hook_delete().
 */
function webcams_delete(&$node) {
  db_query("DELETE FROM {webcams} WHERE nid = %d", $node->nid);
}

function _webcams_delete_webcam(&$webcam) {
  db_query("DELETE FROM {webcams} WHERE wid = %d", $webcam->wid);
}

/**
 * Implementation of hook_load().
 */
function webcams_load(&$node) {
  $additions = new StdClass;
  $additions->webcams = array();

  $result = db_query('SELECT wid, nid, name, default_url, url, width, height, thickbox, link, delay, timeout, weight FROM {webcams} WHERE vid = %d ORDER BY weight', $node->vid);
  while ($webcam = db_fetch_object($result)) {
    $additions->webcams[] = $webcam;
  }

  return $additions;
}

/**
 * Implementation of hook_view().
 */
function webcams_view(&$node, $teaser, $page) {
  static $loaded = array();

  $node = node_prepare($node, $teaser);

  if (!$teaser) {
    $loaded[$node->nid] = FALSE;

    drupal_add_js(drupal_get_path('module', 'webcams') .'/webcams.js');
    drupal_add_css(drupal_get_path('module', 'webcams') .'/webcams.css');

    $js = '';

    for ($i = 0; $i < count($node->webcams); $i++) {
      $webcam = $node->webcams[$i];
      $delay  = $webcam->delay * 1000;
      $errmsg = t('Webcam <em>@name</em> has timed out...', array('@name' => $webcam->name));

      $js .= "\n$.webcam.init('webcams{$webcam->nid}-webcam{$webcam->wid}', '{$webcam->name}', '{$webcam->url}', '{$webcam->default_url}', {$webcam->width}, {$webcam->height}, {$delay}, {$webcam->timeout}, 'webcams{$webcam->nid}-content', '{$errmsg}');";

      $node->content['webcams-webcam'. $i] = array(
        '#value' => theme('webcams_webcam', $webcam),
        '#weight' => $webcam->weight,
      );
    }
    $node->content['body']['#value'] = '<div id="webcams'. $node->nid .'-content" class="webcams-content">'. $node->content['body']['#value'] .'</div>'."\n";

    // Need to avoid loading webcam initialization javascript multiple times...
    if (!$loaded[$node->nid]) {
      drupal_add_js($js, 'inline', 'footer', FALSE);
      $loaded[$node->nid] = TRUE;
    }
  }

  return $node;
}

/**
 * Implementation of hook_diff().
 */
function webcams_diff(&$old_node, &$new_node) {
  $result = array();
  if ($old_node->type == 'webcam') {
    $old_webcams = array();
    for ($i = 0; $i < max(count($old_node->webcams), variable_get('webcams_max_webcams_per_page', 4)); $i++) {
      if ($i < count($old_node->webcams)) {
        $webcam = $old_node->webcams[$i];
        $old_webcams[] = array(
          t('Name') .': '. $webcam->name,
          t('Default Image URL') .': '. $webcam->default_url,
          t('Webcam Image URL') .': '. $webcam->url,
          t('Size') .': '. $webcam->width ." x ". $webcam->height,
          t('Enlarge with Thickbox') .': '. ($webcam->thickbox ? t('Yes') : t('No')),
          t('Link') .': '. $webcam->link,
          t('Delay')  .': '. $webcam->delay,
          t('TimeOut')  .': '. $webcam->timeout,
        );
      }
      else {
        $old_webcams[] = array();
      }
    }
    
    $new_webcams = array();
    for ($i = 0; $i < max(count($new_node->webcams), variable_get('webcams_max_webcams_per_page', 4)); $i++) {
      if ($i < count($new_node->webcams)) {
        $webcam = (object)$new_node->webcams[$i];
        if (isset($webcam->disabled) && $webcam->disabled == 1 && $i <= count($old_node->webcams) + 1) {
          $new_webcams[] = array();
        }
        elseif (!isset($webcam->disabled) || (isset($webcam->disabled) && $webcam->disabled == 0)) {
          $new_webcams[] = array(
            t('Name') .': '. $webcam->name,
            t('Default Image URL') .': '. $webcam->default_url,
            t('Webcam Image URL') .': '. $webcam->url,
            t('Size') .': '. $webcam->width ." x ". $webcam->height,
            t('Enlarge with Thickbox') .': '. ($webcam->thickbox ? t('Yes') : t('No')),
            t('Link') .': '. $webcam->link,
            t('Delay')  .': '. $webcam->delay,
            t('TimeOut')  .': '. $webcam->timeout,
          );
        }
        else {
          $new_webcams[] = array();
        }
      }
      else {
        $new_webcams[] = array();
      }
    }
    
    $max = max(count($old_webcams), count($new_webcams));
    for ($i = 0; $i < $max; $i++) {
      $result['webcams_'. $i] = array(
        '#name' => t('Webcam') .' '. ($i + 1),
        '#old' => isset($old_webcams[$i]) ? $old_webcams[$i] : '',
        '#new' => isset($new_webcams[$i]) ? $new_webcams[$i] : '',
        '#format' => array(
          'show_header' => FALSE,
        )
      );
    }
  }
  return $result;
}

/**
 * Implementation of hook_view_api().
 */
function webcams_views_api() {
  return array(
    'api' => 2.0,
  );
}

function webcams_theme() {
  return array(
    'webcams_webcam' => array(
      'arguments' => array('webcam' => NULL),
    ),
  );
}

function theme_webcams_webcam(&$webcam) {
  $output  = '<div class="webcams-webcam" id="webcams'. $webcam->nid .'-webcam'. $webcam->wid .'" style="width: '. $webcam->width .'px;" alt="'.$webcam->name.'">';

  $img  = '<img src="'. $webcam->default_url .'" width="'. $webcam->width .'" height="'. $webcam->height .'" class="webcams-image" />';
  if (module_exists('thickbox') && $webcam->thickbox) {
    $zoom = '<img src="'. base_path() . drupal_get_path('module', 'webcams') .'/zoom.png" width="32" height="32" class="webcams-zoom iefix" alt="" />';
    
    $output .= l($zoom, $webcam->default_url, array('attributes' => array('title' => $webcam->name, 'class' => 'thickbox'), 'html' => TRUE));
    $output .= l($img, $webcam->default_url, array('attributes' => array('title' => $webcam->name, 'class' => 'thickbox'), 'html' => TRUE));
  }
  elseif ($webcam->link) {
    $output .= l($img, $webcam->link, array('attributes' => array('title' => $webcam->name), 'html' => TRUE));
  }
  else {
    $output .= $img;
  }
  $output .= '<span class="webcams-name">'. $webcam->name .'</span>';
  $output .= '</div>'."\n";
  return $output;
}
