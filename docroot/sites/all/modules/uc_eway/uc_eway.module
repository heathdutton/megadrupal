<?php

/**
 * @file uc_eway.module
 * A module used for the eWAY.com.au payment gateway
 *
 * Developed by Daniel Streefkerk (http://daniel.streefkerkonline.com)
 * Updated by Stephanie Sherriff (http://www.trexart.com.au)
 * Added eWAY Beagle Support, nice eWAY icons and code clean-up by
 * Agileware Pty Ltd (http://agileware.net)
 */

/**
 * Define setting defaults.
 */
define('UC_EWAY_MODE_DEFAULT', 'cvn_xml');
define('UC_EWAY_LOGO_DEFAULT', 1);
define('UC_EWAY_CHANGE_ORDER_STATUS_DEFAULT', 1);
define('UC_EWAY_RECURRING_ENABLED_DEFAULT', 0);
define('UC_EWAY_SHOW_FAIL_MESSAGE_DEFAULT', 1);
define('UC_EWAY_TEST_MODE_DEFAULT', 0);
define('UC_EWAY_TEST_APPROVE_ANYWAY_DEFAULT', 0);

/**
 * Define setting defaults for block display.
 */
define('UC_EWAY_BLOCK_POWERED_BY_SIZE_DEFAULT', 'large');
define('UC_EWAY_BLOCK_POWERED_BY_COLOUR_DEFAULT', 'grey');

/**
 * Define testing values.
 */
define('UC_EWAY_TEST_CUSTOMER_ID', '87654321');
define('UC_EWAY_TEST_PASSWORD', 'test123');
define('UC_EWAY_TEST_EMAIL_ADDRESS', 'test@eway.com.au');
define('UC_EWAY_TEST_CCNUMBER', '4444333322221111');

/**
 * Define watchdog options.
 */
define('UC_EWAY_WATCHDOG_STATUS_OFF', 0);
define('UC_EWAY_WATCHDOG_STATUS_ALL', 1);
define('UC_EWAY_WATCHDOG_STATUS_TEST', 2);

/**
 * Implements hook_init().
 */
function uc_eway_init() {
  if (variable_get('uc_eway_recurring_enabled', UC_EWAY_RECURRING_ENABLED_DEFAULT)) {
    require_once('uc_eway.recurring.inc');
  }
}

/**
 * Implements hook_form_alter().
 */
function uc_eway_form_alter(&$form, $form_state, $form_id) {
  switch ($form_id) {
    case 'uc_cart_checkout_form':
      if (uc_credit_default_gateway() == 'eway') {
        $show_logo = variable_get('uc_eway_logo', UC_EWAY_LOGO_DEFAULT);
        if ($show_logo && $form['panes']['payment']['payment_method']['#options']['credit'] != NULL) {
          $path = uc_eway_logo_path('small', 'white');
          $label = $form['panes']['payment']['payment_method']['#options']['credit'];
          $label .= '<br /><img alt="Powered by eWay" src="' . $path . '" style="position: relative; top: 5px; left: 100px;" />';
          $form['panes']['payment']['payment_method']['#options']['credit'] = $label;
        }
      }
      break;
    case 'uc_payment_gateways_form':
      $form['#validate'][] = 'uc_eway_settings_form_validate';
      break;
    case 'uc_payment_method_settings_form':
      /* Require Card owner field to be enabled */
      if(isset($form['uc_credit'])){
        $form['cc_fields']['uc_credit_owner_enabled']['#required'] = TRUE;
      }
      break;
  }
}

/**
 * Generate a path to the logo image based on size and colour.
 */
function uc_eway_logo_path($size = UC_EWAY_BLOCK_POWERED_BY_SIZE_DEFAULT, $colour = UC_EWAY_BLOCK_POWERED_BY_COLOUR_DEFAULT) {
  $path = &drupal_static(__FUNCTION__);

  if (!isset($path[$size . '-' . $colour])) {
    if ($size == 'large') $size = 'medium';
    $path[$size . '_' . $colour] = base_path() . drupal_get_path('module', 'uc_eway') . '/images/' . ucfirst($size) . ucfirst($colour) . '.gif';
  }

  return $path[$size . '_' . $colour];
}

/**
 * Implements hook_theme().
 */
function uc_eway_theme() {
  return array(
    'uc_eway_transaction_description' => array(
      'variables' => array('products' => array()),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function uc_eway_block_info() {
  $blocks['eway_powered'] = array(
    'info' => t('Powered by eWAY'),
    'status' => TRUE,
    'region' => 'footer',
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function uc_eway_block_configure($delta = '') {
  $form = array();

  switch ($delta) {
    case 'eway_powered':
      $form['uc_eway_logo_size'] = array(
        '#type' => 'select',
        '#title' => 'Logo size',
        '#options' => array(
          'large' => 'Large',
          'small' => 'Small',
        ),
        '#default_value' => variable_get('uc_eway_block_powered_by_size', UC_EWAY_BLOCK_POWERED_BY_SIZE_DEFAULT),
      );
      $form['uc_eway_logo_colour'] = array(
        '#type' => 'select',
        '#title' => 'Logo colour',
        '#options' => array(
          'grey' => 'Grey',
          'white' => 'White',
        ),
        '#default_value' => variable_get('uc_eway_block_powered_by_colour', UC_EWAY_BLOCK_POWERED_BY_COLOUR_DEFAULT),
      );
      break;
  }
  return $form;
}

/**
 * Implements hook_block_save().
 */
function uc_eway_block_save($delta = '', $edit = array()) {
  switch ($delta) {
    case 'eway_powered':
      variable_set('uc_eway_block_powered_by_size', $edit['uc_eway_logo_size']);
      variable_set('uc_eway_block_powered_by_colour', $edit['uc_eway_logo_colour']);
      break;
  }
}

/**
 * Implements hook_block_view().
 */
function uc_eway_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'eway_powered':
      $block['subject'] = NULL;
      $block['content'] = uc_eway_block_powered_by_content();
      break;
  }

  return $block;
}

/**
 * Callback function for uc_eway_block().
 */
function uc_eway_block_powered_by_content() {
  $size = variable_get('uc_eway_block_powered_by_size', UC_EWAY_BLOCK_POWERED_BY_SIZE_DEFAULT);
  $colour = variable_get('uc_eway_block_powered_by_colour', UC_EWAY_BLOCK_POWERED_BY_COLOUR_DEFAULT);
  $path = uc_eway_logo_path($size, $colour);
  return '<a href="https://www.eway.com.au"><img src="' . $path . '" /></a>';
}

/**
 * Implements hook_uc_payment_gateway().
 */
function uc_eway_uc_payment_gateway() {
  $gateways['eway'] = array(
    'title' => t('eWAY'),
    'description' => t('Process credit card payments using eWAY'),
    'settings' => 'uc_eway_settings_form',
    'credit' => 'uc_eway_charge',
  );

  return $gateways;
}

/**
 * Implements hook_uc_order().
 */
function uc_eway_uc_order($op, $order, $arg2) {
  switch($op) {
    case 'submit':
      // In case an anonymous user purchases a recurring product, the eway
      // rebill customer id must be allocated to the user after the fact,
      // when the user has an account.
      if (isset($order->data['eway_rebill_customer_id']) && $order->uid != 0) {
        $account = user_load(array('uid' => $order->uid));
        $account = user_save($account, array('eway_rebill_customer_id' => $order->data['eway_rebill_customer_id']));

        if (_uc_eway_log_to_watchdog()) {
          watchdog('uc_eway_recurring', 'Updated user %uid to have the eway Rebill CustomerID of %customer_id', array('%uid' => $order->uid, '%customer_id' => $order->data['eway_rebill_customer_id']));
        }
      }
      break;
  }
}

/*******************************************************************************
 * Callback Functions, Forms, and Tables
 ******************************************************************************/

/**
 * Callback for payment gateway settings.
 */
function uc_eway_settings_form($form, &$form_state) {
  $form['eway_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('eWAY Payment Gateway settings'),
  );
  $form['eway_settings']['uc_eway_customer_id'] = array(
    '#type' => 'textfield',
    '#title' => t('eWAY Customer ID'),
    '#default_value' => variable_get('uc_eway_customer_id', ''),
    '#description' => t('Your eWAY customer ID. Provided to you by eWAY.'),
  );
  $form['eway_settings']['uc_eway_email_address'] = array(
    '#type' => 'textfield',
    '#title' => t('eWAY email login'),
    '#default_value' => variable_get('uc_eway_email_address', ''),
    '#description' => t('The email address you use to login to eWAY.'),
  );
  $form['eway_settings']['uc_eway_password'] = array(
    '#type' => 'textfield',
    '#title' => t('eWAY password'),
    '#default_value' => variable_get('uc_eway_password', ''),
    '#description' => t('The password you use to login to eWAY.'),
  );
  $form['eway_settings']['uc_eway_mode'] = array(
    '#type' => 'select',
    '#title' => t('eWAY mode'),
    '#description' => t('eWAY mode used for processing orders. Options are detailed <a href="@url">here</a>.', array('@url' => 'http://www.eway.com.au/Developer/LinkingtoeWAY/overview.aspx')),
    '#options' => array(
      'merchant_xml' => t('Merchant Hosted (XML)'),
      'cvn_xml' => t('CVN (XML)'),
      'beagle' => t('Beagle Anti-Fraud'),
    ),
    '#default_value' => variable_get('uc_eway_mode', UC_EWAY_MODE_DEFAULT),
  );
  $form['eway_settings']['uc_eway_change_order_status'] = array(
    '#type' => 'select',
    '#title' => t('Change order status to "Payment Received" upon successful transaction?'),
    '#description' => t('Change the status of the order if the payment is successful?'),
    '#options' => array(
      1 => t('Yes'),
      0 => t('No'),
    ),
    '#default_value' => variable_get('uc_eway_change_order_status', UC_EWAY_CHANGE_ORDER_STATUS_DEFAULT),
  );
  $form['eway_settings']['uc_eway_show_fail_message'] = array(
    '#type' => 'checkbox',
    '#title' => t("Show gateway's response message on transaction fail."),
    '#description' => t('Systems such as ubercart will show a friendly transaction failed message and may not require an additional message.'),
    '#default_value' => variable_get('uc_eway_show_fail_message', UC_EWAY_SHOW_FAIL_MESSAGE_DEFAULT),
  );
  $form['eway_settings']['uc_eway_logo'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display eWAY Logo?'),
    '#description' => t('Displays the eWay logo when processing credit cards. This may be required for some people depending on your terms with eWAY.'),
    '#default_value' => variable_get('uc_eway_logo', UC_EWAY_LOGO_DEFAULT),
  );

  // NuSOAP library status.
  $status = file_exists(_uc_eway_nusoap_path());
  $nusoap_msg = $status ? t('NuSOAP library found.') : t('NuSOAP library not found. Make sure that the <a href="@libraries_url">Libraries API module</a> is installed and the <a href="@nusoap_url">NuSOAP library</a> is installed in %libraries_dir', array('@libraries_url' => url('http://drupal.org/project/libraries'), '@nusoap_url' => url('http://sourceforge.net/projects/nusoap/'), '%libraries_dir' => 'sites/all/libraries/nusoap'));
  $form['eway_recurring'] = array(
    '#type' => 'fieldset',
    '#title' => t('Recurring Billing settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['eway_recurring']['uc_eway_recurring_enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable recurring billing support'),
    '#description' => t('Enables support for recurring payments via <a href="@url">eWAY Token Payments</a>.', array('@url' => url('http://www.eway.com.au/Developer/eway-api/token-payments.aspx'))) . '<br />' . t('Note that this requires the NuSOAP library to be correctly installed and configured. See README.txt in the uc_eway module directory for instructions.'),
    '#default_value' => variable_get('uc_eway_recurring_enabled', UC_EWAY_RECURRING_ENABLED_DEFAULT),
    '#disabled' => (!$status && !variable_get('uc_eway_recurring_enabled', UC_EWAY_RECURRING_ENABLED_DEFAULT)),
  );
  $form['eway_recurring']['uc_eway_recurring_nusoap_status'] = array(
    '#type' => 'markup',
    '#markup' => $nusoap_msg,
    '#prefix' => '<div>',
    '#suffix' => '</div>',
  );

  $form['eway_testing'] = array(
    '#type' => 'fieldset',
    '#title' => t('eWAY Testing settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['eway_testing']['uc_eway_test_mode'] = array(
    '#type' => 'checkbox',
    '#title' => t('Put the eWAY payment gateway into test mode?'),
    '#description' => t('When in testing mode, transactions are not processed. The testing eWAY customer ID (87654321) and testing Credit Card Number (4444333322221111) are used for all transactions, overriding the existing settings. Please note there is currently no test service for the %beagle eWAY mode.', array('%beagle' => 'Beagle Anti-Fraud')),
    '#default_value' => variable_get('uc_eway_test_mode', UC_EWAY_TEST_MODE_DEFAULT),
  );
  $form['eway_testing']['uc_eway_test_mode_display_msg'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display a message to the user when in test mode?'),
    '#description' => t('If checked, when a payment is sent to eWAY in testing mode a message will be displayed to the user to tell them that it is in test mode.'),
    '#default_value' => variable_get('uc_eway_test_mode_display_msg', 1),
  );
  $form['eway_testing']['uc_eway_test_approve_anyway'] = array(
    '#type' => 'checkbox',
    '#title' => t('When in test mode, approve "failed" transactions anyway?'),
    '#description' => t('When in testing mode, a successful transaction will still return a fail. This overcomes that.'),
    '#default_value' => variable_get('uc_eway_test_approve_anyway', UC_EWAY_TEST_APPROVE_ANYWAY_DEFAULT),
  );

  $form['eway_watchdog'] = array(
    '#type' => 'fieldset',
    '#title' => t('eWAY Watchdog Logging'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['eway_watchdog']['uc_eway_watchdog_status'] = array(
    '#type' => 'select',
    '#title' => t('Watchdog status'),
    '#options' => array(
      UC_EWAY_WATCHDOG_STATUS_OFF => t('Never log messages'),
      UC_EWAY_WATCHDOG_STATUS_ALL => t('Always log messages'),
      UC_EWAY_WATCHDOG_STATUS_TEST => t('Only log messages when in test mode'),
    ),
    '#description' => t('Specify when to log messages to the watchdog log.'),
    '#default_value' => variable_get('uc_eway_watchdog_status', UC_EWAY_WATCHDOG_STATUS_ALL),
  );

  return $form;
}

/**
 * Validate function for the eWAY payment gateway settings form.
 */
function uc_eway_settings_form_validate($form_id, &$form_state) {
  if ($form_state['values']['uc_eway_mode'] == 'beagle' && $form_state['values']['uc_eway_test_mode'] == 1) {
    form_set_error('uc_eway_test_mode', t('The eWAY mode %beagle is currently incompatible with testing.', array('%beagle' => 'Beagle Anti-Fraud')));
  }
}

/**
 * Callback for payment gateway charge.
 */
function uc_eway_charge($order_id, $amount, $data) {
  global $user, $response;
  $order = uc_order_load($order_id);

  // Build a description to send to the payment gateway.
  $description = theme('uc_eway_transaction_description', array('products' => $order->products));
  // Trim the description to eWay's limit of 10000 characters,
  // which is ridiculously long anyway.
  $description = substr($description, 0, 10000);

  // Concatenate the customer address to send to the payment gateway.
  $customer_address_countrycode = uc_get_country_data(array('country_id' => $order->billing_country));
  $customer_address_countrycode = $customer_address_countrycode[0]['country_iso_code_2'];

  $customer_address = $order->billing_street1 . ' ';
  $customer_address .= $order->billing_city . ' ';
  $customer_address .= uc_get_zone_code($order->billing_zone) . ' ';
  $customer_address .= $customer_address_countrycode;

  $xml_data = array(
    'ewayCustomerID' => _uc_eway_get_data('customer_id'),
    'ewayTotalAmount' => uc_currency_format($amount, FALSE, FALSE, ''),
    'ewayCustomerFirstName' => $order->billing_first_name,
    'ewayCustomerLastName' => $order->billing_last_name,
    'ewayCustomerEmail' => $order->primary_email,
    'ewayCustomerAddress' => $customer_address,
    'ewayCustomerPostcode' => $order->billing_postal_code,
    'ewayCustomerInvoiceDescription' => $description,
    'ewayCustomerInvoiceRef' => $order_id,
    'ewayCardHoldersName' => $order->payment_details['cc_owner'],
    'ewayCardNumber' => _uc_eway_get_data('cc_number', $order->payment_details['cc_number']),
    'ewayCardExpiryMonth' => $order->payment_details['cc_exp_month'],
    'ewayCardExpiryYear' => $order->payment_details['cc_exp_year'],
    'ewayTrxnNumber' => '',
    'ewayOption1' => '',
    'ewayOption2' => '',
    'ewayOption3' => '',
  );

  $eway_testing = variable_get('uc_eway_test_mode', UC_EWAY_TEST_MODE_DEFAULT);
  switch (_uc_eway_get_data('uc_eway_mode')) {
    case 'merchant_xml':
      $url = ($eway_testing) ? 'https://www.eway.com.au/gateway/xmltest/testpage.asp' : 'https://www.eway.com.au/gateway/xmlpayment.asp';
      break;
    case 'cvn_xml':
      $url = ($eway_testing) ? 'https://www.eway.com.au/gateway_cvn/xmltest/testpage.asp' : 'https://www.eway.com.au/gateway_cvn/xmlpayment.asp';
      $xml_data['ewayCVN'] = $order->payment_details['cc_cvv'];
      break;
    case 'beagle':
      // Currently a testing URL for the beagle mode does not exist.
      // When one does, add the URL as per the options above.
      $url = 'https://www.eway.com.au/gateway_cvn/xmlbeagle.asp';
      $xml_data['ewayCVN'] = $order->payment_details['cc_cvv'];
      $xml_data['ewayCustomerIPAddress'] = ip_address();
      $xml_data['ewayCustomerBillingCountry'] = $customer_address_countrycode;
      break;
  }

  $xmlstring = '<ewaygateway>';
  foreach ($xml_data as $key => $value) {
    $xmlstring .= '<' . $key . '>' . htmlspecialchars(trim($value), ENT_QUOTES, 'UTF-8') . '</' . $key . '>';
  }
  $xmlstring .= '</ewaygateway>';

  $return_info = uc_eway_process_request($xmlstring, $url);

  // $return_info might be FALSE if uc_eway_process_request() failed.
  if (!empty($return_info) && array_key_exists('txStatus', $return_info['eway_response'])) {
    switch ($return_info['eway_response']['txStatus']) {
      case 'false':
        $message = t('Credit card declined: !amount', array('!amount' => uc_currency_format($amount)));
        $result = array(
          'success' => FALSE,
          'comment' => t('Credit card payment declined') . ': ' . $return_info['eway_response']['txReturnNo'] . ': ' . $return_info['eway_response']['txReturnDescription'],
          'message' => t('Credit card payment declined') . ': ' . $return_info['eway_response']['txReturnNo'] . ': ' . $return_info['eway_response']['txReturnDescription'],
          'uid' => $user->uid,
          'data' => $return_info['eway_response']
        );
        if (variable_get('uc_eway_test_approve_anyway', UC_EWAY_TEST_APPROVE_ANYWAY_DEFAULT) && variable_get('uc_eway_test_mode', UC_EWAY_TEST_MODE_DEFAULT)) {
          $result['success'] = TRUE;
        }
        if (variable_get('uc_eway_show_fail_message', UC_EWAY_SHOW_FAIL_MESSAGE_DEFAULT)) {
          drupal_set_message($result['message'], 'error');
        }
        uc_order_comment_save($order_id, $user->uid, $result['comment']);
        break;
      case 'true':
        $message = t('Credit card charged: !amount', array('!amount' => uc_currency_format($amount)));
        $result = array(
          'success' => TRUE,
          'comment' => t('Credit card payment processed successfully') . ': ' . $return_info['eway_response']['txReturnNo'] . ': ' . $return_info['eway_response']['txReturnDescription'],
          'message' => t('Credit card payment processed successfully') . ': ' . $return_info['eway_response']['txReturnNo'] . ': ' . $return_info['eway_response']['txReturnDescription'],
          'uid' => $user->uid,
          'data' => $return_info['eway_response']
        );
        // Leave a comment for the admin.
        uc_order_comment_save($order_id, $user->uid, $result['comment']);
        // Leave a comment for the customer.
        uc_order_comment_save($order_id, $user->uid, $result['comment'], 'order');
        break;
    }
    // Invoke a rules event to notify that the payment has been processed.
    rules_invoke_event('uc_eway_payment_processed', $order);
  }

  return $result;
}

/**
 * Actually send the request to eway.
 */
function uc_eway_process_request($xml, $url) {
  $curl_connection = curl_init();
  curl_setopt($curl_connection, CURLOPT_URL, $url);
  curl_setopt($curl_connection, CURLOPT_VERBOSE, 1);
  curl_setopt($curl_connection, CURLOPT_POST, 1);
  curl_setopt($curl_connection, CURLOPT_POSTFIELDS, $xml);
  curl_setopt($curl_connection, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($curl_connection, CURLOPT_SSL_VERIFYPEER, 0);
  curl_setopt($curl_connection, CURLOPT_NOPROGRESS, 1);
  curl_setopt($curl_connection, CURLOPT_FOLLOWLOCATION,0);

  // Display a message to the user about test mode if necessary.
  _uc_eway_display_test_mode_msg();

  // Send the data out over the wire
  $data = curl_exec($curl_connection);
  if (curl_errno($curl_connection)) {
    drupal_set_message(t('CURL Error') . ': ' . curl_errno($curl_connection) . '<br />' . curl_error($curl_connection));
    return FALSE;
  }
  else {
    curl_close($curl_connection);

    $xtr = simplexml_load_string($data);
    $response_details = explode(',', $xtr->ewayTrxnError);

    $eway_response['txReturnNo'] = $response_details[0];
    $eway_response['txReturnDescription'] = $response_details[1];
    $eway_response['txStatus'] = strtolower($xtr->ewayTrxnStatus);
    $eway_response['txTransactionNumber'] = (string)$xtr->ewayTrxnNumber;
    $eway_response['txOption1'] = (string)$xtr->ewayTrxnOption1;
    $eway_response['txOption2'] = (string)$xtr->ewayTrxnOption2;
    $eway_response['txOption3'] = (string)$xtr->ewayTrxnOption3;
    $eway_response['txAmount'] = (string)$xtr->ewayReturnAmount;
    $eway_response['txAuthCode'] = (string)$xtr->ewayAuthCode;
    $eway_response['txInvoiceReference'] = (string)$xtr->ewayTrxnReference;

    $return_array = array(
      'curl_worked' => 'true',
      'eway_response' => $eway_response
    );

    return $return_array;
  }
}

/**
 * Helper function to get data, do checking if it's in test mode.
 *
 * @param $key
 *   The data item to get.
 * @param $value
 *   The value to use for when not in testing mode for data that isn't stored
 *   in drupal variables.
 */
function _uc_eway_get_data($key, $value = '') {
  $return_val = '';
  $eway_testing = variable_get('uc_eway_test_mode', UC_EWAY_TEST_MODE_DEFAULT);

  switch($key) {
    case 'customer_id':
      $return_val = $eway_testing ? UC_EWAY_TEST_CUSTOMER_ID : variable_get('uc_eway_customer_id', '');
      break;
    case 'user_name':
      $return_val = $eway_testing ? UC_EWAY_TEST_EMAIL_ADDRESS : variable_get('uc_eway_email_address', '');
      break;
    case 'password':
      $return_val = $eway_testing ? UC_EWAY_TEST_PASSWORD : variable_get('uc_eway_password', '');
      break;
    case 'uc_eway_mode':
      $return_val = $eway_testing ? UC_EWAY_MODE_DEFAULT : variable_get('uc_eway_mode', UC_EWAY_MODE_DEFAULT);
      break;
    case 'cc_number':
      $return_val = $eway_testing ? UC_EWAY_TEST_CCNUMBER : $value;
      break;
  }
  return $return_val;
}

/**
 * Returns the path of the NuSOAP library.
 */
function _uc_eway_nusoap_path() {
  if (function_exists('libraries_get_path')) {
    return libraries_get_path('nusoap') . '/lib/nusoap.php';
  }
  return '';
}

/**
 * Helper function to determine whether or not to log messages to watchdog.
 */
function _uc_eway_log_to_watchdog() {
  $status = variable_get('uc_eway_watchdog_status', UC_EWAY_WATCHDOG_STATUS_ALL);
  if ($status == UC_EWAY_WATCHDOG_STATUS_ALL) {
    return TRUE;
  }
  if ($status == UC_EWAY_WATCHDOG_STATUS_TEST && variable_get('uc_eway_test_mode', UC_EWAY_TEST_MODE_DEFAULT)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Helper function to display a message to the user when payments to eWAY are
 * done while in test mode.
 */
function _uc_eway_display_test_mode_msg() {
  if (variable_get('uc_eway_test_mode', UC_EWAY_TEST_MODE_DEFAULT) && variable_get('uc_eway_test_mode_display_msg', 1)) {
    drupal_set_message(t('The Ubercart eWAY payment gateway is currently in test mode.'), 'warning', FALSE);
  }
}

/**
 * Generate the description to send to the payment gateway for the order.
 *
 * @param $products
 *   An array of the products for the order.
 *
 * @ingroup themeable
 */
function theme_uc_eway_transaction_description($variables) {
  $products = $variables['products'];

  $description = '';
  if (is_array($products)) {
    foreach ($products as $product) {
      if (!empty($description)) {
        $description .= ' / ';
      }
      $description .= $product->qty . 'x ' . $product->title;
      if (isset($product->data['attributes']) && is_array($product->data['attributes'])) {
        foreach ($product->data['attributes'] as $attribute_name => $attribute) {
          foreach ($attribute as $key => $value) {
            $description .= ', ' . $attribute_name . ': ' . $value;
          }
        }
      }
    }
  }

  return $description;
}

/* Card owner field must be enabled; reflect this in store status */
function uc_eway_uc_store_status() {
  if (variable_get('uc_credit_owner_enabled', FALSE)){
    $status[] = array (
      'status' => 'ok',
      'title' => t('Card owner field'),
      'desc' => t('The card owner text field is enabled on the checkout form.'),
    );
  }
  else {
    $status[] = array (
      'status' => 'error',
      'title' => t('Card owner field'),
      'desc' => t('The card owner text field must be enabled to allow credit card transactions through eWay.  Review your !credit_card_fields.', array('!credit_card_fields' => l(t('Credit card fields'), 'admin/store/settings/payment/method/credit'))),
    );
  }
  return $status;
}
