<?php
/**
 * @file
 * File previewer using ViewerJS Library.
 */

/**
 * Implements hook_help().
 */
function viewerjs_help($path, $arg) {
  switch ($path) {
    case 'admin/help#viewerjs':
      $path = dirname(__FILE__) . '/README.md';
      if (file_exists($path)) {
        $readme = file_get_contents($path);
      }
      if (!isset($readme)) {
        return NULL;
      }
      if (module_exists('markdown')) {
        $filters = module_invoke('markdown', 'filter_info');
        $info = $filters['filter_markdown'];

        if (function_exists($info['process callback'])) {
          $function = $info['process callback'];
          $output = $function($readme, NULL);
        }
        else {
          $output = '<pre>' . $readme . '</pre>';
        }
      }
      else {
        $output = '<pre>' . $readme . '</pre>';
      }

      return $output;
  }
}

/**
 * Implements hook_libraries_info().
 */
function viewerjs_libraries_info() {
  $libraries['viewerjs'] = array(
    'name' => 'ViewerJs.org',
    'vendor url' => 'https://github.com/Strae/Viewer.js',
    'download url' => 'https://github.com/Strae/Viewer.js/archive/master.zip',
    'version' => 'last',
  );
  // Info to download viewerJS library.
  return $libraries;
}

/**
 * Implements hook_field_formatter_info().
 */
function viewerjs_field_formatter_info() {
  return array(
    'viewerjs' => array(
      'label' => t('ViewerJs Default'),
      'field types' => array('file', 'image'),
      'settings' => array(
        'color' => 'default',
        'link_type' => 'overlay',
        'width' => '700',
        'height' => '500',
        'overlay_size' => '1000x500',
        'preview_max_size' => '1000x700',
        'thumbnail' => 'yes',
        'max_image_size' => 'viewerjs',
        'thumbnail_size' => 'viewerjs_thumbnail',
        'template' => 'index.html',
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function viewerjs_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $styles = image_styles();
  $styles_options = array();
  foreach ($styles as $style_name => $options) {
    $styles_options[$style_name] = $options['label'];
  }
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element['link_type'] = array(
    '#title' => t('Preview Type'),
    '#type' => 'select',
    '#default_value' => $settings['link_type'],
    '#options' => array(
      'overlay' => t('Overlay'),
      'new_window' => t('New Window'),
      'auto_preview' => t('Auto preview'),
    ),
    '#required' => TRUE,
  );
  $element['width'] = array(
    '#type' => 'textfield',
    '#title' => t('Iframe width (px)'),
    '#size' => 4,
    '#default_value' => $settings['width'],
    '#states' => array(
      'visible' => array(
        ':input[name$="[settings_edit_form][settings][link_type]"]' => array('value' => 'auto_preview'),
      ),
    ),
  );
  $element['height'] = array(
    '#type' => 'textfield',
    '#title' => t('Iframe height (px)'),
    '#size' => 4,
    '#default_value' => $settings['height'],
    '#states' => array(
      'visible' => array(
        ':input[name$="[settings_edit_form][settings][link_type]"]' => array('value' => 'auto_preview'),
      ),
    ),
  );

  $element['color'] = array(
    '#title' => t('Widget Color'),
    '#type' => 'select',
    '#default_value' => $settings['color'],
    '#options' => array(
      'default' => t('Default'),
      'magenta' => t('Magenta'),
      'green' => t('Green'),
      'blue' => t('Blue'),
    ),
  );
  $element['template'] = array(
    '#title' => t('ViewerJs Template file'),
    '#type' => 'textfield',
    '#default_value' => $settings['template'],
    '#required' => TRUE,
    '#description' => t('The template html file to use. Default index.html. The template MUST be in the Viewerjs library folder.'),
    '#element_validate' => array('viewerjs_template_validate'),
  );
  $element['overlay_size'] = array(
    '#title' => t('Overlay Size'),
    '#type' => 'textfield',
    '#default_value' => $settings['overlay_size'],
    '#required' => TRUE,
    '#description' => t('The overlay size in the format widthxheight, for example 400x300.<br/>Used only when Overlay is set as Preview Type'),
  );
  $element['preview_max_size'] = array(
    '#title' => t('Max size of the preview'),
    '#type' => 'textfield',
    '#default_value' => $settings['preview_max_size'],
    '#required' => TRUE,
    '#description' => t('Only for images: if the image size widthXheight is bigger that this value, the preview will use "viewerjs" image style.'),
  );
  $element['max_image_size'] = array(
    '#title' => t('Image max size'),
    '#type' => 'select',
    '#default_value' => $settings['max_image_size'],
    '#required' => TRUE,
    '#options' => $styles_options,
    '#description' => t('Only for images: when the image is bigger than "Max size of the preview", this image style will be used to resize it.'),
  );

  $element['thumbnail'] = array(
    '#title' => t('Show thumbnails'),
    '#type' => 'select',
    '#default_value' => $settings['thumbnail'],
    '#options' => array(
      'yes' => t('Yes.'),
      'no' => t('No.'),
    ),
  );

  $element['thumbnail_size'] = array(
    '#title' => t('Thumbnail size'),
    '#type' => 'select',
    '#default_value' => $settings['thumbnail_size'],
    '#required' => TRUE,
    '#options' => $styles_options,
    '#description' => t('Only for images: the style used to create the thumbnail'),
  );

  return $element;
}

/**
 * Validate function for template file.
 */
function viewerjs_template_validate($element, &$form_state) {

  if (!empty($element['#value'])) {
    $template_path = viewerjs_get_viewerjs_path() . '/' . $element['#value'];
    if(!file_exists($template_path)){
      form_error($element, t('%template were not found.', array('%template' => $element['#title'])));
    }

  }
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function viewerjs_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  if ('overlay' == $settings['link_type']) {
    $output = t('Overlay size %size;', array('%size' => $settings['overlay_size']));
  }
  if ('auto_preview' == $settings['link_type']) {
    $output = t('Preview size %width px x %height px;',
      array('%width' => $settings['width'], '%height' => $settings['height'])
    );
  }
  else {
    $output = t('New Window;');
  }
  $output .= ' ' . t('using template %template;', array('%template' => $settings['template']));
  $output .= ' ' . t('Max preview size: %size;', array('%size' => $settings['preview_max_size']));
  $output .= ' ' . t('resized with %style image style;', array('%style' => $settings['max_image_size']));
  $output .= ' ' . t('Show thumbnail: %thu;', array('%thu' => $settings['thumbnail']));
  $output .= ' ' . t('resized with %style image style.', array('%style' => $settings['thumbnail_size']));

  return $output;
}

/**
 * Implements hook_field_formatter_view().
 */
function viewerjs_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array(
    '#type' => 'markup',
    '#markup' => '',
    '#prefix' => '<div class="viewerjs-formatter-field">',
    '#suffix' => '</div>',
  );
  if (($display['type'] == 'viewerjs') && !empty($items)) {
    $settings = $display['settings'];
    list($ow, $oh) = explode('x', $settings['overlay_size']);
    $element['#attached']['css'] = array(
      drupal_get_path('module', 'viewerjs') . '/css/viewerjs.css',
    );
    $element['#attached']['js'] = array(
      drupal_get_path('module', 'viewerjs') . '/js/viewerjs.js',
    );
    $viewerjs_path = viewerjs_get_viewerjs_path();
    foreach ($items as $delta => $item) {
      $splited_uri = explode('.', $item['uri']);
      $extension = end($splited_uri);

      if (!isset($item['type'])) {
        $item['type'] = $field['type'];
      }
      viewerjs_preview_file_alter($item, $settings);
      $download_url = file_create_url($item['uri']);
      $url_option = array('absolute' => TRUE);
      $path = url($viewerjs_path, $url_option) . '/' . $settings['template'] . '#' . $download_url;

      $file = new stdClass();
      foreach ($item as $k => $v) {
        $file->$k = $v;
      }
      $icon = theme('file_icon', array(
        'file' => $file,
        'icon_directory' => NULL,
      ));
      $size = format_size($item['filesize']);
      $filename = !empty($item['description']) ? $item['description'] : $item['filename'];

      $thumbnail = FALSE;
      if (isset($item['thumbnail']) AND !empty($item['thumbnail'])) {
        $thumbnail = "background-image: url({$item['thumbnail']})";
      }

      $download_link = array(
        '#theme' => 'link',
        '#text' => t('Download'),
        '#path' => $download_url,
        '#options' => array(
          'attributes' => array(
            'class' => array('download'),
            'target' => '_blank',
          ),
          'html' => FALSE,
        ),
      );

      $preview_link = FALSE;
      if (in_array(strtolower($extension), viewerjs_supported_extensions())) {
        if('auto_preview' == $settings['link_type']) {
          $element[$delta] = array(
            '#theme' => 'viewerjs_autopreview',
            '#preview_path' => $path,
            '#width' => $settings['width'],
            '#height' => $settings['height'],
          );

          return $element;
        }
        $preview_class = array('preview');
        if ('overlay' == $settings['link_type']) {
          $preview_class[] = 'viewerjs-overlay';
        }
        $preview_link = array(
          '#theme' => 'link',
          '#text' => t('Preview'),
          '#path' => $path,
          '#options' => array(
            'attributes' => array(
              'target' => '_blank',
              'title' => t('Preview with Viewerjs.org'),
              'class' => $preview_class,
              'data-viewerjs-overlay-width' => $ow,
              'data-viewerjs-overlay-height' => $oh,
              'data-viewerjs-overlay-id' => $item['fid'],
            ),
            'html' => FALSE,
          ),
        );
      }
      // If the thumbnail is set, add another wrapper to the dom.
      if (isset($item['thumbnail']) AND !empty($item['thumbnail'])) {
        $element[$delta]['#prefix'] = '<div class="viewerjs-thumbnail">';
        $element[$delta]['#suffix'] = '</div>';
      }
      $element[$delta] = array(
        '#theme' => 'viewerjs',
        '#size' => $size,
        '#color' => $settings['color'],
        '#filename' => $filename,
        '#icon' => $icon,
        '#thumbnail' => $thumbnail,
        '#download_link' => $download_link,
        '#preview_link' => $preview_link,
      );
    }
  }
  return $element;
}

/**
 * Check if we have to alter the file.
 *
 * Adding a thumbnail or resizing the dimensions (for images only).
 *
 * @param array &$file
 *   File array to alter.
 * @param array $settings
 *   Array of formatter settings.
 */
function viewerjs_preview_file_alter(array &$file, array $settings) {
  if (isset($settings['thumbnail']) AND 'yes' == $settings['thumbnail']) {
    viewerjs_thumbnail_file($file, $settings['thumbnail_size']);
  }

  if ('image' === $file['type'] AND !empty($file['image_dimensions'])) {
    list($mw, $mh) = explode('x', $settings['preview_max_size']);
    if ($file['image_dimensions']['width'] > $mw OR $file['image_dimensions']['height'] > $mh) {
      // Use viewerjs image style.
      $file['uri'] = image_style_url($settings['max_image_size'], $file['uri']);
    }
  }
}

/**
 * Create the thumbnail (image). For image files, simply use the style_url.
 *
 * For documents/pdf, use a icon (customizable) under viewerjs/images.
 *
 * @param array &$file
 *   Array of file metadata.
 * @param string $image_style
 *   The image style to use for file thumbnail.
 */
function viewerjs_thumbnail_file(array &$file, $image_style) {
  switch ($file['type']) {
    case 'image':
      $file['thumbnail'] = image_style_url($image_style, $file['uri']);
      break;

    default:
      // Get the extension.
      $splited_uri = explode('.', $file['uri']);
      $extension = end($splited_uri);
      if (file_exists(drupal_get_path('module', 'viewerjs') . '/images/' . $extension . '.png')) {
        $file['thumbnail'] = drupal_get_path('module', 'viewerjs') . '/images/' . $extension . '.png';
        $file['thumbnail'] = url($file['thumbnail']);
      }
      else {
        $file['thumbnail'] = drupal_get_path('module', 'viewerjs') . '/images/file.png';
        $file['thumbnail'] = url($file['thumbnail']);
      }
      break;

  }
}

/**
 * Implements hook_theme().
 */
function viewerjs_theme() {
  return array(
    'viewerjs' => array(
      'template' => 'viewerjs',
      'variables' => array(
        'color' => NULL,
        'size' => NULL,
        'filename' => NULL,
        'icon' => NULL,
        'thumbnail' => NULL,
        'download_link' => NULL,
        'preview_link' => NULL,
      ),
    ),
    'viewerjs_autopreview' => array(
      'variables' => array(
        'preview_path' => NULL,
        'height' => NULL,
        'width' => NULL,
      ),
    ),
  );
}

/**
 * Implements template_preprocess_HOOK().
 */
function template_preprocess_viewerjs(&$variables) {
  $variables['filename'] = check_plain($variables['filename']);

}

/**
 * Returns HTML for the entire dashboard.
 *
 * @param $variables
 *   An associative array containing:
 *   - element: A render element containing the properties of the dashboard
 *     region element, #dashboard_region and #children.
 *
 * @ingroup themeable
 */
function theme_viewerjs_autopreview($variables) {
  extract($variables);
  return '<iframe src ="' . check_url($variables['preview_path']) . '" width="' . check_plain($variables['width']) . '" height="' . check_plain($variables['height']) . '" allowfullscreen webkitallowfullscreen></iframe>';
}

/**
 * Return a list of extension supported by Viewerjs's PluginLoader.
 */
function viewerjs_supported_extensions() {
  return array(
    'pdf',
    'odt',
    'odp',
    'ods',
    'fodt',
    'jpg',
    'jpeg',
    'png',
    'gif',
  );
}

/**
 * Get the location of the viewerjs library.
 *
 * @return string
 *   The location of the library, or FALSE if the library isn't installed.
 */
function viewerjs_get_viewerjs_path() {
  if (function_exists('libraries_get_path')) {
    return libraries_get_path('viewerjs');
  }

  // The following logic is taken from libraries_get_libraries()
  $searchdir = array();

  // Similar to 'modules' and 'themes' directories inside an installation
  // profile, installation profiles may want to place libraries into a
  // 'libraries' directory.
  $searchdir[] = 'profiles/' . drupal_get_profile() . '/libraries';

  // Always search sites/all/libraries.
  $searchdir[] = 'sites/all/libraries';

  // Also search sites/<domain>/*.
  $searchdir[] = conf_path() . '/libraries';

  foreach ($searchdir as $dir) {
    if (file_exists($dir . '/viewerjs/viewer.js')) {
      return $dir . '/viewerjs';
    }
  }

  return FALSE;
}
