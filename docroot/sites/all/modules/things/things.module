<?php

/**
 * @file
 * Module for the Things Entity - a starting point to create your own Entity
 * and associated administration interface
 */  

/**
 * Implementation of hook_menu().
 */
function things_menu() {

  $items = array();

  $items['admin/config/workflow/things/settings'] = array(
    'title' => 'Drupal of Things Settings',
    'description' => 'Settings for Drupal of Things',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('things_admin'),
    'access arguments' => array('administer things settings'),
    'type' => MENU_NORMAL_ITEM,
   );

  return $items;
}

function things_admin() {
  $form = array();

  $form['things_users_role'] = array(
    '#type' => 'textfield',
    '#title' => t('Things role'),
    '#default_value' => variable_get('things_users_role', '0'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/*
 * Implementation of hook_hook_info
 */
function things_hook_info() {
  $hooks['things_create'] = array(
    'group' => 'things',
  );
  $hooks['things_update'] = array(
    'group' => 'things',
  );
  $hooks['things_delete'] = array(
    'group' => 'things',
  );
  $hooks['things_load'] = array(
    'group' => 'things',
  );
  $hooks['things_save'] = array(
    'group' => 'things',
  );
  return $hooks;
}

/**
 * Implement hook_entity_info().
 *
 * We define two entities here - the actual entity that will hold our domain
 * specific information and an entity that holds information about the different
 * types of entities. See here: http://drupal.org/node/977380 for a discussion on this
 * choice.
 */
function things_entity_info() {
  $return['things'] = array(
    'label' => t('Things'),
    // The entity class and controller class extend the classes provided by the
    // Entity API
    'entity class' => 'Things',
    'controller class' => 'ThingsController',
    'base table' => 'things',
    'fieldable' => TRUE,
    'entity keys' => array(
        'id' => 'things_id',
        'bundle' => 'type',
    ),
    // Bundles are defined by the things types below
    'bundles' => array(),
    // Bundle keys tell the FieldAPI how to extract information from the bundle objects
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'creation callback' => 'things_create',
    'access callback' => 'things_access',
    'module' => 'things',
    // The information below is used by the ThingsUIController (which extends the EntityDefaultUIController)
    'admin ui' => array(
      'path' => 'admin/content/things',
      'file' => 'things.admin.inc',
      'controller class' => 'ThingsUIController',
      'menu wildcard' => '%things',
    ),
  );
  // The entity that holds information about the entity types	  
  $return['things_type'] = array(
    'label' => t('Things Type'),
    'entity class' => 'ThingsType',
    'controller class' => 'ThingsTypeController',
    'base table' => 'things_type',
    'fieldable' => FALSE,
    'bundle of' => 'things',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'label',
    ),
    'access callback' => 'things_type_access',
    'module' => 'things',
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/structure/things_types',
      'file' => 'things_type.admin.inc',
      'controller class' => 'ThingsTypeUIController',
    ),
  );

  return $return;
}


/**
 * Implements hook_entity_info_alter().
 *
 * We are adding the info about the things types via a hook to avoid a recursion
 * issue as loading the things types requires the entity info as well.
 *
 * @todo This needs to be improved
 */
function things_entity_info_alter(&$entity_info) {
  foreach (things_get_types() as $type => $info) {
    $entity_info['things']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/structure/things_types/manage/%things_type',
        'real path' => 'admin/structure/things_types/manage/' . $type,
        'bundle argument' => 4,
        'access arguments' => array('administer things types'),
      ),
    );
  }
}
  

/**
 * Implements hook_permission().
 */
function things_permission() {
  // We set up permisssions to manage entity types, manage all entities and the
  // permissions for each individual entity
  $permissions = array(
    'administer things types' => array(
      'title' => t('Administer things types'),
      'description' => t('Create and delete fields for things types, and set their permissions.'),
    ),
    'administer things' => array(
      'title' => t('Administer things'),
      'description' => t('Edit and delete all things'),
    ),  
    'administer things settings' => array(
      'title' => t('Administer Drupal of Things settings'),
    ),
  );
  
  //Generate permissions per things 
  foreach (things_get_types() as $type) {
    $type_name = check_plain($type->type);
    $permissions += array(
      "edit any $type_name things" => array(
        'title' => t('%type_name: Edit any things', array('%type_name' => $type->label)),
      ),
      "view any $type_name things" => array(
        'title' => t('%type_name: View any things', array('%type_name' => $type->label)),
      ),
    );
  }
  return $permissions;  
}


/**
 * Determines whether the given user has access to a things.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $things
 *   Optionally a things or a things type to check access for. If nothings is
 *   given, access for all things is determined.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 * @return boolean
 *   Whether access is allowed or not.
 */
function things_access($op, $things = NULL, $account = NULL) {
  if (user_access('administer things', $account)) {
    return TRUE;
  }
  if (isset($things) && $type_name = $things->type) {
    $op = ($op == 'view') ? 'view' : 'edit';
    if (user_access("$op any $type_name things", $account)) {
      return TRUE;
    }
  }
  return FALSE;
}


/**
 * Access callback for the entity API.
 */
function things_type_access($op, $type = NULL, $account = NULL) {
  return user_access('administer things types', $account);
}


/**
 * Gets an array of all things types, keyed by the type name.
 *
 * @param $type_name
 *   If set, the type with the given name is returned.
 * @return ThingsType[]
 *   Depending whether $type isset, an array of things types or a single one.
 */
function things_get_types($type_name = NULL) {
  // entity_load will get the Entity controller for our things entity and call the load
  // function of that object - we are loading entities by name here.
  $types = entity_load_multiple_by_name('things_type', isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}


/**
 * Menu argument loader; Load a things type by string.
 *
 * @param $type
 *   The machine-readable name of a things type to load.
 * @return
 *   A things type array or FALSE if $type does not exist.
 */
function things_type_load($type) {
  return things_get_types($type);
}


/**
 * Fetch a things object. Make sure that the wildcard you choose 
 * in the things entity definition fits the function name here.
 *
 * @param $things_id
 *   Integer specifying the things id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $things object or FALSE if it cannot be loaded.
 *
 * @see things_load_multiple()
 */
function things_load($things_id, $reset = FALSE) {
  $things = things_load_multiple(array($things_id), array(), $reset);
  module_invoke_all('things_load', $things_id, reset($things));
  return reset($things);
}


/**
 * Load multiple things based on certain conditions.
 *
 * @param $things_ids
 *   An array of things IDs.
 * @param $conditions
 *   An array of conditions to match against the {things} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of things objects, indexed by things_id.
 *
 * @see entity_load()
 * @see things_load()
 */
function things_load_multiple($things_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('things', $things_ids, $conditions, $reset);
}


/**
 * Deletes a things.
 */
function things_delete(Things $things) {
  module_invoke_all('things_delete', $things);

  $things->delete();
}


/**
 * Delete multiple things.
 *
 * @param $things_ids
 *   An array of things IDs.
 */
function things_delete_multiple(array $things_ids) {
  entity_get_controller('things')->delete($things_ids);
}


/**
 * Create a things object.
 */
function things_create($values = array()) {
  $things = entity_get_controller('things')->create($values);
  module_invoke_all('things_create', $things);
  return $things;
}


/**
 * Saves a things to the database.
 *
 * @param $things
 *   The things object.
 */
function things_save(Things $things) {
  module_invoke_all('things_save', $things);

  return $things->save();
}


/**
 * Saves a things type to the db.
 */
function things_type_save(ThingsType $type) {
  $type->save();
}


/**
 * Deletes a things type from the db.
 */
function things_type_delete(ThingsType $type) {
  $type->delete();
}


/**
 * URI callback for things
 */
function things_uri(Things $things){
  return array(
    'path' => 'things/' . $things->things_id,
  );
}


/**
 * Menu title callback for showing individual entities
 */
function things_page_title(Things $things){
  return $things->name;
}


/**
 * Sets up content to show an individual things
 * @todo - get rid of drupal_set_title();
 */
function things_page_view($things, $view_mode = 'full') {    
  $controller = entity_get_controller('things');  
  $content = $controller->view(array($things->things_id => $things));
  drupal_set_title($things->name);
  return $content;
}


/**
 * Implements hook_views_api().
 */
function things_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'things') . '/views',
  );
}


/**
 * Implement hook_theme().
 */
function things_theme() {
  return array(
    'things_add_list' => array(
      'variables' => array('content' => array()),
      'file' => 'things.admin.inc',
    ),
    'things' => array(
      'render element' => 'elements',
      'template' => 'things',
    ),
  );
}  


/**
 * Implements hook_menu_local_tasks_alter().
 */
function things_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link 'admin/structure/things/add' on 'admin/structure/things'.
  if ($root_path == 'admin/content/things') {
    $item = menu_get_item('admin/content/things/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}


/**
 * The class used for things entities
 */
class Things extends Entity {
  
  public function __construct($values = array()) {
    parent::__construct($values, 'things');
  }

  protected function defaultLabel() {
    return $this->name;
  }

  protected function defaultUri() {
    return array('path' => 'things/' . $this->things_id);
  }
  
  
}


/**
 * The class used for things type entities
 */
class ThingsType extends Entity {
  
  public $type;
  public $label;
  
  public function __construct($values = array()) {
    parent::__construct($values, 'things_type');
  }
  
}


/**
 * The Controller for Things entities
 */
class ThingsController extends EntityAPIController {
  public function __construct($entityType) {
    parent::__construct($entityType);
  }


  /**
   * Create a things - we first set up the values that are specific
   * to our things schema but then also go through the EntityAPIController
   * function.
   * 
   * @param $type
   *   The machine-readable type of the things.
   *
   * @return
   *   A things object with all default fields initialized.
   */
  public function create(array $values = array()) {
    // Add values that are specific to our Things
    $values += array( 
      'things_id' => '',
      'is_new' => TRUE,
      'title' => '',
      'created' => '',
      'changed' => '',
      'data' => '',
    );
    
    $things = parent::create($values);
    return $things;
  }
}


/**
 * The Controller for Things entities
 */
class ThingsTypeController extends EntityAPIControllerExportable {
  public function __construct($entityType) {
    parent::__construct($entityType);
  }
  
   /**
   * Create a things type - we first set up the values that are specific
   * to our things type schema but then also go through the EntityAPIController
   * function.
   * 
   * @param $type
   *   The machine-readable type of the things.
   *
   * @return
   *   A things type object with all default fields initialized.
   */
  public function create(array $values = array()) {
    // Add values that are specific to our Things
    $values += array( 
      'id' => '',
      'is_new' => TRUE,
      'data' => '',
    );
    $things_type = parent::create($values);
    return $things_type;
  }

}