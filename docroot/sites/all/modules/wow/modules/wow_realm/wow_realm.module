<?php

/**
 * @file
 * The realm status API allows developers to retrieve realm status information.
 *
 * This information is limited to whether or not the realm is up, the type and
 * state of the realm and the current population.
 */

/**
 * Implements hook_entity_info().
 */
function wow_realm_entity_info() {
  $entity = array(
    'wow_realm' => array(
      'label' => t('Realm'),
      'entity class' => 'WoWRealm',
      'controller class' => 'EntityAPIController',
      'base table' => 'wow_realm',
      'load hook' => 'wow_realm',
      'uri callback' => 'wow_realm_uri',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'rid',
        'label' => 'name',
      ),
      'bundles' => array(
        'wow_realm' => array(
          'label' => t('Realm'),
          'admin' => array(
            'path' => 'admin/config/wow/realm',
            'access arguments' => array('administer wow realm service'),
          ),
        ),
      ),
      'view modes' => array(
        'full' => array(
          'label' => t('Realm'),
          'custom settings' => FALSE,
        ),
      ),
    ),
  );

  return $entity;
}

/**
 * Implements hook_element_info().
 */
function wow_realm_element_info() {
  $types['wow_realm'] = array(
    '#input' => TRUE,
    '#size' => 36,
    '#maxlength' => 40,
    '#required' => TRUE,
    '#autocomplete_path' => 'wow/realm/autocomplete',
    '#process' => array('ajax_process_form'),
    '#element_validate' => array('wow_realm_element_validate'),
    '#theme' => 'textfield',
    '#theme_wrappers' => array('form_element'),
  );

  return $types;
}

/**
 * Form element validation handler for wow_realm_textfield elements.
 */
function wow_realm_element_validate(&$element, &$form_state) {
  if (strpos($element['#value'], ']')) {
    // Explodes 'Archimonde [EU]' string into two separate variables.
    $name = drupal_substr($element['#value'], 0, drupal_strlen($element['#value']) - 5);
    $region = drupal_strtolower(drupal_substr($element['#value'], -3, -1));

    // Check the region is valid.
    if (array_key_exists($region, wow_api_info())) {
      // Check the realm name exists from the database.
      $values = db_select('wow_realm', 'r')
        ->fields('r')
        ->condition('region', $region)
        ->condition('slug', wow_realm_to_slug($name))
        ->execute()

        // Can't do that in Drupal7, else it throws Cannot create an instance of
        // Entity without a specified entity type exception.
        // TODO: put it back in Drupal8 ;)
        //->fetchObject('WoWRealm');

        ->fetchAssoc();

      if ($values) {
        // Set the variables name and region.
        $form_state['values'][$element['#name']] = entity_create('wow_realm', $values);
      }
      else {
        form_error($element, t('The realm name does not exist.'));
      }
    }
    else {
      form_error($element, t('The realm region does not exist.'));
    }
  }
  else {
    form_error($element, t('The realm name is not valid.'));
  }
}

/**
 * Implements hook_menu().
 */
function wow_realm_menu() {
  $items = array();

  $items['wow/realm/autocomplete'] = array(
    'title' => 'Realm autocomplete',
    'page callback' => 'wow_realm_autocomplete',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'wow_realm.inc',
  );

  // Realm entity configuration.
  $items['admin/config/wow/realm'] = array(
    'title' => 'Realm services',
    'description' => 'Start, Stop and Install realm services.',
    'page callback' => 'wow_realm_admin_settings',
    'access arguments' => array('administer site configuration'),
    'file' => 'wow_realm.admin.inc',
  );

  // Realm entity operations.
  $items['admin/config/wow/realm/%/refresh'] = array(
    'title' => 'Refresh realms',
    'description' => 'Performs a full refresh from battle.net API.',
    'page callback' => 'wow_realm_admin_refresh',
    'page arguments' => array(4),
    'access callback' => 'wow_region_access',
    'access arguments' => array(4, 'administer site configuration'),
    'file' => 'wow_realm.admin.inc',
  );
  $items['admin/config/wow/realm/%/stop'] = array(
    'title' => 'Stops realm service',
    'description' => 'Stops the realm service from fetching information.',
    'page callback' => 'wow_realm_admin_stop',
    'page arguments' => array(4),
    'access callback' => 'wow_region_access',
    'access arguments' => array(4, 'administer wow realm service'),
    'file' => 'wow_realm.admin.inc',
  );
  $items['admin/config/wow/realm/%/start'] = array(
    'title' => 'Starts realm service',
    'description' => 'Start fetching information from battle.net API.',
    'page callback' => 'wow_realm_admin_start',
    'page arguments' => array(4),
    'access callback' => 'wow_region_access',
    'access arguments' => array(4, 'administer wow realm service'),
    'file' => 'wow_realm.admin.inc',
  );
  $items['admin/config/wow/realm/%/edit'] = array(
    'title' => 'Edit realm service',
    'description' => 'Set configuration such as refresh period.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wow_realm_admin_edit', 4),
    'access callback' => 'wow_region_access',
    'access arguments' => array(4, 'administer wow realm service'),
    'file' => 'wow_realm.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_help().
 */
function wow_realm_help($path, $arg) {
  switch ($path) {
    case 'admin/config/wow/realm':
      return '<p>' . t('This page is a dashboard for WoW Realm services. You can Start, Stop or Install a service; Once started, the service will periodically fetch realm data for the specified region and update the local database with fresh information from battle.net API. Each service behaves like an entity type, when you instanciates a realm, it will be bundled with its region and controlled by the service. This allows each region to have its own settings (the refresh rate for instance).') . '</p>';
  }
}

/**
 * Implements hook_permission().
 */
function wow_realm_permission() {
  return array(
    'administer wow realm service' => array(
      'title' => t('Administer realm services'),
      'description' => t('Start, Stop and Install realm services.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_cron().
 */
function wow_realm_cron() {
  // Long-running operation, leveraging a queue:
  // Fetch realms from battle.net API and update them.
  foreach (wow_api_info() as $region => $info) {
    $service = variable_get("wow_realm_service:$region", (object) array('status' => 'stopped'));

    // Loop over each running services.
    if ($service->status == 'running') {
      $result = db_select('wow_realm', 'realm')
        ->fields('realm', array('lastFetched'))
        ->condition('region', $region)
        ->execute()
        ->fetchAll(PDO::FETCH_COLUMN);

      if (REQUEST_TIME > max($result) + $service->threshold) {
        $queue = DrupalQueue::get('wow_realm');
        $queue->createItem($region);
      }
    }
  }
}

/**
 * Load realm entities from the database.
 *
 * @param array $rids
 *   An array of realm IDs.
 * @param bool $reset
 *   Whether to reset the internal cache.
 *
 * @return array
 *   An array of realm objects indexed by rid.
 *
 * @see entity_load()
 */
function wow_realm_load_multiple($rids = array(), $reset = FALSE) {
  return entity_load('wow_realm', $rids, array(), $reset);
}

/**
 * Load a realm object from the database.
 *
 * @param int $rid
 *   The realm ID.
 * @param bool $reset
 *   Whether to reset the internal cache.
 *
 * @return WoWRealm
 *   A fully-populated realm object.
 */
function wow_realm_load($rid = NULL, $reset = FALSE) {
  $rids = (isset($rid) ? array($rid) : array());
  $realm = wow_realm_load_multiple($rids, $reset);
  return $realm ? reset($realm) : FALSE;
}

/**
 * Load a realm object from the database.
 *
 * @param string $region
 *   The region.
 * @param string $name
 *   The realm name.
 *
 * @return WoWRealm
 *   A fully-populated realm object.
 */
function wow_realm_load_by_name($region, $name) {
  $realm = db_select('wow_realm', 'r')
    ->fields('r', array('rid'))
    ->condition('region', $region)
    ->condition('slug', wow_realm_to_slug($name))
    ->execute()
    ->fetch();

  return $realm ? wow_realm_load($realm->rid) : FALSE;
}

/**
 * Load a realm object from the database.
 *
 * @deprecated Use wow_realm_load_by_name() instead.
 *
 * @param string $region
 *   The region.
 * @param string $slug
 *   The realm slug.
 *
 * @return object
 *   A fully-populated realm object.
 */
function wow_realm_load_by_slug($region, $slug) {
  $realm = db_select('wow_realm', 'r')
    ->fields('r', array('rid'))
    ->condition('region', $region)
    ->condition('slug', $slug)
    ->execute()
    ->fetch();

  return $realm ? wow_realm_load($realm->rid) : FALSE;
}

/**
 * Refreshes a realm service.
 */
function wow_realm_service_refresh($region) {
  foreach (wow_realm_fetch($region) as $realm) {
    $realm->save();
  }
}

/**
 * Implements hook_cron_queue_info().
 */
function wow_realm_cron_queue_info() {
  $queues['wow_realm'] = array(
    'worker callback' => 'wow_realm_service_refresh',
    'time' => 60,
  );
  return $queues;
}

/**
 * Implements hook_hook_info().
 */
function wow_realm_hook_info() {
  $hooks['wow_realm_presave'] = array(
    'group' => 'realm',
  );
  $hooks['wow_realm_insert'] = array(
    'group' => 'realm',
  );
  $hooks['wow_realm_update'] = array(
    'group' => 'realm',
  );
  $hooks['wow_realm_delete'] = array(
    'group' => 'realm',
  );

  return $hooks;
}

/**
 * Realm APIs currently provide realm status information.
 *
 * The realm status API allows developers to retrieve realm status information.
 * This information is limited to whether or not the realm is up, the type and
 * state of the realm, the current population, and the status of the two world
 * pvp zones.
 *
 * There are no required query parameters when accessing this resource, although
 * an array parameter can optionally be passed to limit the realms returned to
 * one or more.
 *
 * @param string $region
 *   (Optional) Region to use. If null, uses the site's default.
 * @param array $realms
 *   (Optional) The list of realm.
 *
 * @return array
 *   An array of realm objects indexed by slug.
 */
function wow_realm_fetch($region, array $realms = array()) {
  $wow_realms = array();

  // Select the realms already existing in the database.
  // This request is executed to assert if a realm is new or existing.
  $query = db_select('wow_realm', 'r')
    ->fields('r', array('rid', 'slug'))
    ->condition('region', $region);

  if (!empty($realms)) {
    // Add the realm condition if any.
    $query->condition('slug', array_map('wow_realm_to_slug', $realms), 'IN');
  }

  // Build the look-up array.
  $result = $query->execute()->fetchAllAssoc('slug');

  // Execute the wow http request.
  $response = wow_http_request($region, "realm/status", array('realms' => implode(',', $realms)));

  // Build the list of wow_realm entity based on database results. Loop among
  // every realm returned by the API and create a drupal entity.
  foreach ($response->getArray('realms') as $realm) {
    $key = $realm['slug'];
    $values = $realm + array('region' => $region, 'lastFetched' => $response->getDate()->format('U'));

    if (array_key_exists($key, $result)) {
      // If existing, set the rid property of the realm entity.
      $values['rid'] = $result[$key]->rid;
      $values['is_new'] = FALSE; // This is no longer needed in Drupal 8.
    }

    // Create the wow_realm entity.
    $wow_realms[$key] = entity_create('wow_realm', $values);
  }

  return $wow_realms;
}

/**
 * Helper; Converts a realm name to its slug equivalent.
 *
 * @param string $name
 *   The realm name.
 *
 * @return
 *   The realm slug.
 */
function wow_realm_to_slug($name) {
  $transliteration = @iconv('UTF-8', 'ASCII//TRANSLIT', $name);

  if ($transliteration) {
    $search = array('¨', '^', '"', '(', ')', '\'', '-', ' ');
    $replace = array('', '', '', '', '', '', '', '-');
    $slug = str_replace($search, $replace, $transliteration);

    return drupal_strtolower($slug);
  }
  else {
    // Do not transliterate.
    return $name;
  }
}

/**
 * Returns a formatted realm name: Archimonde [EU] for instance.
 *
 * @param WoWRealm $realm
 *   A realm composed of at least region and name.
 */
function wow_realm_format($realm) {
  return check_plain($realm->name) . ' [' . drupal_strtoupper($realm->region) . ']';
}

/**
 * Entity uri callback.
 */
function wow_realm_uri(WoWRealm $realm) {
  return array('path' => "realm/$realm->region/$realm->slug");
}
