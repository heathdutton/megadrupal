<?php

/**
 * @file
 * Definition of WoW\guild\Tests\GuildRefreshTest.
 */

/**
 * Test wow_guild_refresh() behavior.
 */
class GuildRefreshTest extends GuildTestBase {

  /**
   * Represents the eu-archimonde realm.
   *
   * @var WoWRealm
   */
  private $archimonde;

  /**
   * Last fetched timestamp.
   *
   * @var int
   */
  private $fetched;

  /**
   * Guild refresh threshold.
   *
   * @var int
   */
  private $threshold;

  public static function getInfo() {
    return array(
      'name' => 'Guild refresh',
      'description' => 'Test guild refreshing and methods for existing entity.',
      'group' => 'WoW Guild',
    );
  }

  protected function setUp() {
    parent::setUp('wow_test_guild');

    $this->archimonde = $this->wowCreateRealm('eu', 'Archimonde');
    $this->threshold = wow_entity_refresh_threshold('wow_guild');
    $this->fetched = REQUEST_TIME - $this->threshold;

    $controllers = &drupal_static('entity_get_controller', array());
    unset($controllers['wow_guild']);
  }

  /**
   * Test refreshing a character.
   */
  function testGuildRefresh() {
    entity_get_controller('wow_guild')->byPassStub = TRUE;

    $guild = $this->wowCreateGuild($this->archimonde, 'Shinsen', array('lastFetched' => $this->fetched - 1000));

    // This should always refresh.
    wow_guild_refresh($guild);

    $t_fetched = array('!date' => format_date($guild->lastFetched));
    $t_modified = array('!date' => format_date($guild->lastModified));
    $this->assertNotEqual(0, $guild->lastFetched, t('Refreshing guild entity (lastFetched: !date).', $t_fetched), 'WoW Guild');
    $this->assertNotEqual(0, $guild->lastModified, t('Refreshing guild entity (using If-Modified-Since: 0).', $t_modified), 'WoW Guild');

    $fetched = $guild->lastFetched;
    $modified = $guild->lastModified;
    sleep(1);

    // This should not refresh.
    wow_guild_refresh($guild);
    $t_fetched = array('!date' => format_date($guild->lastFetched));
    $t_modified = array('!date' => format_date($guild->lastModified));
    $this->assertNotEqual($fetched, $guild->lastFetched, t('Not refreshing guild entity (lastFetched: !date).', $t_fetched), 'WoW Guild');
    $this->assertEqual($modified, $guild->lastModified, t('Not refreshing guild entity (using If-Modified-Since: !date).', $t_modified), 'WoW Guild');

    // This should trigger entity deletion.
    $guild = $this->wowCreateGuild($this->archimonde, 'XXX');
    wow_guild_refresh($guild);
    $guild = wow_guild_load($guild->gid, TRUE);
    $this->assertFalse($guild, 'Guild has been deleted.', 'WoW Guild');
  }

  /**
   * Test the refresh method at loading guild time.
   */
  function testGuildRefreshLoad() {
    entity_get_controller('wow_guild')->byPassStub = TRUE;
    entity_get_controller('wow_guild')->setRefreshMethod(WOW_REFRESH_LOAD);

    // This guild should be updated.
    $guild_a = $this->wowCreateGuild($this->archimonde, 'Shinsen', array('lastFetched' => $this->fetched - 1000));

    // This guild should not be updated.
    $guild_b = $this->wowCreateGuild($this->archimonde, 'Trinity', array('lastFetched' => $this->fetched + 1000));

    // This guild should be deleted.
    $guild_c = $this->wowCreateGuild($this->archimonde, 'XXX');

    // This should trigger the refreshing of the guild.
    $guild_a = wow_guild_load($guild_a->gid, TRUE);

    $t_fetched = array('!date' => format_date($guild_a->lastFetched));
    $t_modified = array('!date' => format_date($guild_a->lastModified));
    $this->assertNotEqual(0, $guild_a->lastFetched, t('Refreshing guild entity at loading time (lastFetched: !date).', $t_fetched), 'WoW Guild');
    $this->assertNotEqual(0, $guild_a->lastModified, t('Refreshing guild entity at loading time (lastModified: !date).', $t_modified), 'WoW Guild');

    // This should not trigger the refreshing of the guild.
    $guild_b = wow_guild_load($guild_b->gid, TRUE);

    $t_fetched = array('!date' => format_date($guild_b->lastFetched));
    $t_modified = array('!date' => format_date($guild_b->lastModified));
    $this->assertEqual($this->fetched + 1000, $guild_b->lastFetched, t('Not refreshing guild entity at loading time (lastFetched: !date).', $t_fetched), 'WoW Guild');
    $this->assertEqual(0, $guild_b->lastModified, t('Not refreshing guild entity at loading time (lastModified: !date).', $t_modified), 'WoW Guild');

    // This should trigger entity deletion.
    $guild_c = wow_guild_load($guild_c->gid, TRUE);
    $guild_c = wow_guild_load($guild_c->gid, TRUE);
    $this->assertFalse($guild_c, 'Guild has been deleted.', 'WoW Guild');
  }

  /**
   * Test the refresh method through cron.
   */
  function testGuildRefreshCron() {
    entity_get_controller('wow_guild')->byPassStub = TRUE;
    entity_get_controller('wow_guild')->setRefreshMethod(WOW_REFRESH_CRON);

    // This guild should be updated.
    $this->wowCreateGuild($this->archimonde, 'Shinsen', array('lastFetched' => $this->fetched - 1000));

    // This guild should not be updated.
    // @TODO: Check why it is causing a 404 status code when passing a valid date.
    $this->wowCreateGuild($this->archimonde, 'Trinity', array('lastFetched' => $this->fetched + 1000));

    // This guild should be deleted.
    $this->wowCreateGuild($this->archimonde, 'XXX');

    // This should trigger the refreshing of the first guild.
    $this->cronRun();

    $query = db_select('wow_guild', 'g')
      ->fields('g', array('lastFetched', 'lastModified'))
      ->execute();

    $guild_a = $query->fetch();

    $t_fetched = array('!date' => format_date($guild_a->lastFetched));
    $t_modified = array('!date' => format_date($guild_a->lastModified));
    $this->assertNotEqual(0, $guild_a->lastFetched, t('Refreshing guild entity through cron (lastFetched: !date).', $t_fetched), 'WoW Guild');
    $this->assertNotEqual(0, $guild_a->lastModified, t('Refreshing guild entity through cron (lastModified: !date).', $t_modified), 'WoW Guild');

    $guild_b = $query->fetch();

    $t_fetched = array('!date' => format_date($guild_b->lastFetched));
    $t_modified = array('!date' => format_date($guild_b->lastModified));
    $this->assertEqual($this->fetched + 1000, $guild_b->lastFetched, t('Not refreshing guild entity through cron (lastFetched: !date).', $t_fetched), 'WoW Guild');
    $this->assertEqual(0, $guild_b->lastModified, t('Not refreshing guild entity through cron (lastModified: !date).', $t_modified), 'WoW Guild');

    $guild_c = $query->fetch();

    $this->assertFalse($guild_c, 'Guild has been deleted.', 'WoW Guild');
  }

}
