<?php

/**
 * @file
 * Definition of WoW\guild\Tests\GuildMembersSaveTest.
 */

/**
 * Test $guild->save() behavior for members.
 */
class GuildMembersSaveTest extends GuildTestBase {

  /**
   * The realm of the guild to test.
   *
   * @var WoWRealm
   */
  protected $defaultRealm;

  /**
   * The guild to test.
   *
   * @var WoWGuild
   */
  protected $defaultGuild;

  private $realm;
  private $guild;
  private $members;

  public static function getInfo() {
    return array(
      'name' => 'Guild members save',
      'description' => 'Test guild members saving.',
      'group' => 'WoW Guild',
    );
  }

  protected function setUp() {
    parent::setUp();

    $realm = $this->randomRealm();
    $guild = $this->randomGuild($realm);

    $guild->members = array();
    $guild->members[] = $this->randomCharacter($realm, array('rank' => 0));
    $guild->members[] = $this->randomCharacter($realm, array('rank' => 1));
    $guild->members[] = $this->randomCharacter($realm, array('rank' => 2));
    $guild->members[] = $this->randomCharacter($realm, array('rank' => 3));
    $guild->members[] = $this->randomCharacter($realm, array('rank' => 4));

    $this->defaultGuild = $guild;
    $this->defaultRealm = $realm;

    $this->wowGuildSaveFetched(clone $guild);
  }

  /**
   * Test guild members joined.
   */
  function testGuildMembersJoined() {
    $guild = $this->defaultGuild;
    $hook = variable_get('hook_wow_guild_members_joined', array());
    $this->assertEqual(5, count($hook), t('Guild member joined hook.'), 'WoW Guild');

    $arr = array('A', 'B', 'C', 'D', 'E');
    foreach ($hook as $member) {
      $t_args = array('!i' => $arr[$member->cid - 1]);
      $character = wow_character_load($member->cid, TRUE);
      $this->assertEqual($guild->gid, $character->gid, t('Found character !i in list of guild members.', $t_args), 'WoW Guild');
      $this->assertEqual($member->cid - 1, $character->rank, t('Found character rank.'), 'WoW Guild');
    }

    // Assert other hooks not called.
    $this->assertNull(variable_get('hook_wow_guild_rank_update'), t('Rank update hook not called.'), 'WoW Guild');
    $this->assertNull(variable_get('hook_wow_guild_members_left'), t('Members left hook not called.'), 'WoW Guild');
  }

  /**
   * Test guild members rank update.
   */
  function testGuildRankUpdate() {
    variable_del('hook_wow_guild_members_joined');
    $guild = $this->defaultGuild;

    // Test rank update.
    $number = rand(2, count($guild->members));
    $rank_changed = array();
    foreach (array_rand($guild->members, $number) as $i) {
      $character = $guild->members[$i];
      $character->rank = $rank_changed[$character->cid] = rand(5, 10);
    }
    $this->wowGuildSaveFetched(clone $guild);

    $hook = variable_get('hook_wow_guild_rank_update', array());
    $this->assertEqual($number, count($hook), t('Guild rank update hook.'), 'WoW Guild');

    $arr = array('A', 'B', 'C', 'D', 'E');
    entity_get_controller('wow_character')->resetCache();
    foreach ($hook as $member) {
      $t_args = array('!i' => $arr[$member->cid - 1]);
      $character = wow_character_load($member->cid, TRUE);
      $this->assertTrue(array_key_exists($character->cid, $rank_changed), t('Found character !i in list of rank changed.', $t_args), 'WoW Guild');
      $this->assertEqual($rank_changed[$character->cid], $character->rank, t('Found character !i rank changed.', $t_args), 'WoW Guild');
    }

    // Assert other hooks not called.
    $this->assertNull(variable_get('hook_wow_guild_members_joined'), t('Members joined hook not called.'), 'WoW Guild');
    $this->assertNull(variable_get('hook_wow_guild_members_left'), t('Members left hook not called.'), 'WoW Guild');
  }

  /**
   * Test guild members left.
   */
  function testGuildMembersLeft() {
    variable_del('hook_wow_guild_members_joined');
    $guild = $this->defaultGuild;

    // Test members left.
    $number = rand(2, count($guild->members) - 1);
    $members_left = array();
    foreach (array_rand($guild->members, $number) as $i) {
      $members_left[$guild->members[$i]->cid] = TRUE;
      unset($guild->members[$i]);
    }
    $this->wowGuildSaveFetched(clone $guild);

    $hook = variable_get('hook_wow_guild_members_left', array());
    $this->assertEqual($number, count($hook), t('Guild members left hook.'), 'WoW Guild');

    $arr = array('A', 'B', 'C', 'D', 'E');
    entity_get_controller('wow_character')->resetCache();
    foreach ($hook as $member) {
      $t_args = array('!i' => $arr[$member->cid - 1]);
      $character = wow_character_load($member->cid, TRUE);
      $this->assertTrue(array_key_exists($character->cid, $members_left), t('Found character !i in list of members left.', $t_args), 'WoW Guild');
    }

    // Assert other hooks not called.
    $this->assertNull(variable_get('hook_wow_guild_rank_update'), t('Rank update hook not called.'), 'WoW Guild');
    $this->assertNull(variable_get('hook_wow_guild_members_joined'), t('Members joined hook not called.'), 'WoW Guild');
  }
}
