<?php
/**
 * @file
 * Guild system that lets administrators modify the workings of the guild.
 */

/**
 * Load guild entities from the database.
 *
 * @param array $gids
 *   An array of guild IDs.
 * @param bool $reset
 *   Whether to reset the internal cache.
 *
 * @return array
 *   An array of guild objects indexed by gid.
 */
function wow_guild_load_multiple($gids = array(), $reset = FALSE) {
  return entity_load('wow_guild', $gids, array(), $reset);
}

/**
 * Load a guild object from the database.
 *
 * @param int $gid
 *   The guild ID.
 * @param bool $reset
 *   Whether to reset the internal cache.
 *
 * @return WoWGuild
 *   A fully-populated guild object.
 */
function wow_guild_load($gid = NULL, $reset = FALSE) {
  $gids = (isset($gid) ? array($gid) : array());
  $guild = wow_guild_load_multiple($gids, $reset);
  return $guild ? reset($guild) : FALSE;
}

/**
 * Load a guild object from the database.
 *
 * @param string $realm
 *   The guild realm.
 * @param string $name
 *   The guild name.
 *
 * @return WoWGuild
 *   A fully-populated guild object.
 */
function wow_guild_load_by_name($region, $realm, $name) {
  $guild = db_select('wow_guild', 'g')
    ->fields('g', array('gid'))
    ->condition('region', $region)
    ->condition('realm', wow_realm_to_slug($realm))
    ->condition('name', $name)
    ->execute()
    ->fetch();

  return $guild ? wow_guild_load($guild->gid) : FALSE;
}

/**
 * The guild profile API is the primary way to access guild information.
 *
 * This guild profile API can be used to fetch a single guild at a time through
 * an HTTP GET request to a url describing the guild profile resource. By
 * default, a basic dataset will be returned and with each request and zero or
 * more additional fields can be retrieved. To access this API, craft a resource
 * URL pointing to the guild whos information is to be retrieved.
 *
 * @param string $region
 *   The guild region.
 * @param string $realm
 *   The guild realm.
 * @param string $name
 *   The guild name.
 * @param array $fields
 *   An array of fields to fetch:
 *   - members: A list of characters that are a member of the guild.
 *   - achievements: A set of data structures that describe the achievements
 *     earned by the guild.
 *   - news: A set of data structures that describe the news feed of the guild.
 * @param string $locale
 *   (Optional) The locale to fetch the resource with.
 *     It it the responsibility of the caller to pass a valid locale.
 *     @see wow_api_locale()
 * @param Boolean $catch
 *   Whether to catch exceptions or not.
 *
 * @return WoWGuild
 *   The guild object returned by the API. The core dataset returned includes
 *   the guild's realm, name, level, faction, emblem and achievement points.
 *
 * @see wow_http_request()
 */
function wow_guild_fetch($region, $realm, $name, array $fields = array(), $locale = NULL, $catch = TRUE) {
  $guild = wow_guild_load_by_name($region, $realm, $name);

  if (!$guild) {
    $guild = entity_create('wow_guild', array(
      'region' => $region,
      'realm' => $realm,
      'name' => $name,
    ));
  }

  $guild->fetch($fields, $locale, $catch);
  return $guild;
}

/**
 * Fetch an already known guild.
 *
 * The difference with the raw wow_guild_fetch method is that it uses
 * If-Modified-Since header. If the remote timestamp is different from the
 * local, we can perform update operations.
 *
 * Because we are using header If-Modified-Since, performing a full update by
 * including 'members' and 'achievements' ensure to get all possible data from
 * API.
 *
 * @param WoWGuild $guild
 *   A wow_guild entity loaded from wow_guild_load().
 * @param array $fields
 *   (Optional) For the complete list of fields supported, see wow_guild_fetch().
 *
 * @see wow_guild_fetch()
 * @see wow_http_request()
 */
function wow_guild_refresh(WoWGuild $guild, array $fields = array()) {
  // For efficiency manually save the original guild before applying any changes.
  $guild->original = clone $guild;
  $guild->fetch($fields);
  $guild->save();
}

/**
 * Returns the default guild used on the site.
 *
 * @param string $property
 *   (Optional) property of the wow_guild entity to return.
 */
function wow_guild_default($property = NULL) {
  $guild = variable_get('wow_guild_default', (object) array('gid' => 0, 'region' => '', 'name' => '', 'realm' => '', 'level' => 0, 'side' => 0, 'achievementPoints' => 0, 'lastModified' => 0));
  return isset($property) ? $guild->{$property} : $guild;
}

/**
 * Implements hook_menu().
 */
function wow_guild_menu() {

  // Entity configuration.
  $items['admin/config/wow/guild'] = array(
    'title' => 'Guild settings',
    'description' => 'Manage guild settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wow_guild_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'wow_guild.admin.inc',
  );
  $items['admin/config/wow/guild/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  // Default guild configuration.
  $items['admin/config/wow/guild/default'] = array(
    'title' => 'Default guild',
    'description' => 'Set the default guild for this website.',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wow_guild_admin_default'),
    'access arguments' => array('administer site configuration'),
    'file' => 'wow_guild.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_hook_info().
 */
function wow_guild_hook_info() {
  $hooks['wow_guild_member_joined'] = array(
    'group' => 'guild',
  );
  $hooks['wow_guild_member_left'] = array(
    'group' => 'guild',
  );
  $hooks['wow_guild_rank_update'] = array(
    'group' => 'guild',
  );
  $hooks['wow_guild_presave'] = array(
    'group' => 'guild',
  );
  $hooks['wow_guild_insert'] = array(
    'group' => 'guild',
  );
  $hooks['wow_guild_update'] = array(
    'group' => 'guild',
  );
  $hooks['wow_guild_delete'] = array(
    'group' => 'guild',
  );

  return $hooks;
}

/**
 * Implements hook_entity_info().
 */
function wow_guild_entity_info() {
  $entity = array(
    'wow_guild' => array(
      'label' => t('Guild'),
      'entity class' => 'WoWGuild',
      'controller class' => 'WoWGuildController',
      'base table' => 'wow_guild',
      'load hook' => 'wow_guild',
      'uri callback' => 'wow_guild_uri',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'gid',
        'label' => 'name',
      ),
      'bundles' => array(
        'guild' => array(
          'label' => t('Guild'),
          'admin' => array(
            'path' => 'admin/config/wow/guild',
            'access arguments' => array('administer wow guild'),
          ),
        ),
      ),
      'view modes' => array(
        'full' => array(
          'label' => t('Full guild'),
        ),
        'teaser' => array(
          'label' => t('Teaser'),
        ),
      ),
    ),
  );

  return $entity;
}

/**
 * Implements hook_theme().
 */
function wow_guild_theme() {
  return array(
    'wow_admin_guild' => array(
      'render element' => 'guild',
      'file' => 'wow_guild.admin.inc',
    ),
  );
}

/**
 * Implements hook_cron().
 */
function wow_guild_cron() {

  // Get the entity refresh method.
  if (wow_entity_refresh_method('wow_guild') == WOW_REFRESH_CRON) {
    $threshold = wow_entity_refresh_threshold('wow_guild');

    // Gets all guilds that need to be refreshed.
    $gids = db_select('wow_guild', 'g')
      ->fields('g', array('gid'))
      ->condition('queued', 0)
      ->condition('lastFetched', REQUEST_TIME - $threshold, '<')
      ->execute()
      ->fetchCol();

    // Long-running tasks and tasks that could time out, such as retrieving
    // remote data makes use of the queue API instead of executing tak directly.
    $queue = DrupalQueue::get('wow_guild');
    foreach (wow_guild_load_multiple($gids) as $guild) {
      // Add guilds that need to be refreshed to the wow_guild queue.
      if ($queue->createItem($guild)) {
        // Add time stamp to avoid queueing item more than once.
        db_update('wow_guild')
          ->fields(array('queued' => REQUEST_TIME))
          ->condition('gid', $guild->gid)
          ->execute();
      }
    }
  }
}

/**
 * Implements hook_cron_queue_info().
 */
function wow_guild_cron_queue_info() {
  $queues['wow_guild'] = array(
    'worker callback' => 'wow_guild_refresh',
    'time' => 60,
  );
  return $queues;
}

/**
 * Implements hook_permission().
 */
function wow_guild_permission() {
  return array(
    'administer wow guild' =>  array(
      'title' => t('Administer guild'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * The guild rewards data API provides a list of all guild rewards.
 *
 * @param string $region
 *   The region to return data from.
 * @param string $language
 *   (Optionnal) The language to use. Default to language_content.
 * @param bool $reset
 *   (Optionnal) Reset the guild rewards static cache.
 *
 * @return array
 *   Either a reward object if $id was provided, either an array of all guild rewards.
 */
function wow_guild_rewards($region, $language = NULL, $reset = FALSE) {
  return wow_data($region, 'guild/rewards', 'rewards', '_wow_guild_reward_callback', $language, $reset);
}

function _wow_guild_reward_callback(&$values, $reward) {
  $values[] = $reward;
}
