<?php

/**
 * @file
 * Associates guild ranks to user roles. Change roles and select main depending on the rank.
 */

/**
 * Implements hook_user_load().
 */
function wow_guild_rank_user_load($users) {
  $ranks = wow_guild_ranks();
  $args = array(':uids' => array_keys($users), ':gid' => wow_guild_default('gid'));
  $result = db_query('SELECT uid, rank FROM {wow_characters} WHERE uid IN (:uids) AND gid = :gid AND isMain = TRUE', $args);
  foreach ($result as $record) {
    $users[$record->uid]->roles += array($ranks[$record->rank]->role => 'guild rank');
  }
}

/**
 * Implements hook_boot().
 */
function wow_guild_boot() {
  // Dummy function to tell drupal to load the wow_guild module at bootload.
}

/**
 * Implements hook_boot().
 */
function wow_guild_rank_boot() {
  global $user;

  if ($user->uid) {
    // Assign additional user roles to current user (if any).
    wow_guild_rank_user_load(array($user->uid => $user));
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function wow_guild_rank_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'wow_character_presave') {
    // Move wow_character_presave() to the end of the list. module_implements()
    // iterates through $implementations with a foreach loop which PHP iterates
    // in the order that the items were added, so to move an item to the end of
    // the array, we remove it and then add it.
    $group = $implementations['wow_character'];
    unset($implementations['wow_character']);
    $implementations['wow_character'] = $group;
  }
}

/**
 * Implements hook_menu().
 */
function wow_guild_rank_menu() {
  $items['admin/config/wow/guild/guild-ranks'] = array(
    'title' => 'Ranks',
    'description' => 'List, edit, or add guild ranks.',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wow_guild_admin_ranks'),
    'access arguments' => array('administer site configuration'),
    'file' => 'wow_guild_rank.admin.inc',
  );
  $items['admin/config/wow/guild/guild-ranks/edit/%wow_guild_rank'] = array(
    'title' => 'Edit rank',
    'page arguments' => array('wow_guild_admin_rank', 6),
    'access arguments' => array('administer wow guild ranks'),
  );
  $items['admin/config/wow/guild/guild-ranks/delete/%wow_guild_rank'] = array(
    'title' => 'Delete rank',
    'page arguments' => array('wow_guild_admin_rank_delete_confirm', 6),
    'access arguments' => array('administer wow guild ranks'),
    'file' => 'wow_guild_rank.admin.inc',
  );

  return $items;
}

/**
 * Fetches a guild rank by rank ID.
 *
 * @param int $rid
 *   An integer representing the rank ID.
 *
 * @return object
 *   A fully-loaded rank object if a rank with the given ID exists, or FALSE
 *   otherwise.
 */
function wow_guild_rank_load($rid) {
  $ranks = wow_guild_ranks();

  if (empty($ranks[$rid])) {
    return FALSE;
  }

  $ranks[$rid]->rid = $rid;
  return $ranks[$rid];
}

/**
 * Fetches a guild rank by rank name.
 *
 * @param string $rank_name
 *   A string representing the rank name.
 *
 * @return object
 *   A fully-loaded rank object if a rank with the given name exists, or FALSE
 *   otherwise.
 *
 * @see guild_rank_load()
 */
function wow_guild_rank_load_by_name($rank_name) {
  $ranks = &drupal_static(__FUNCTION__, array());

  if (!isset($ranks_names)) {
    foreach (wow_guild_ranks() as $rid => $rank) {
      $rank->rid = $rid;
      $ranks[$rank->name] = $rank;
    }
  }

  return isset($ranks[$rank_name]) ? $ranks[$rank_name] : FALSE;
}

/**
 * Implements hook_permission().
 */
function wow_guild_rank_permission() {
  return array(
    'administer wow guild ranks' => array(
      'title' => t('Administer guild ranks'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Retrieve an array of ranks for the default guild.
 */
function wow_guild_ranks() {
  return variable_get('wow_guild_ranks', array());
}

/**
 * Save a guild rank to the database.
 *
 * @param object $rank
 *   A rank object to modify or add. If $rank->rid is not specified, a new
 *   rank will be created.
 */
function wow_guild_rank_save($rank) {
  $ranks = wow_guild_ranks();
  if ($rank->name) {
    // Prevent leading and trailing spaces in rank names.
    $rank->name = trim($rank->name);
  }
  if (!isset($rank->weight)) {
    // Set a rank weight to make this new rank last.
    $rank->weight = isset($rank->rid) ? $rank->rid : count($ranks);
  }

  if (isset($rank->rid) && $rank->name) {
    $ranks[$rank->weight] = $rank;
  }
  else {
    $ranks[] = $rank;
  }

  foreach ($rank as $key => $value) {
    // Clean-up variables other than name and role.
    if ($key != 'name' && $key != 'role') {
      unset($rank->$key);
    }
  }
  variable_set('wow_guild_ranks', $ranks);
}

/**
 * Delete a guild rank from database.
 *
 * @param int $rank
 *   An integer with the rank ID.
 */
function wow_guild_rank_delete($rank) {
  // Avoid infinite loop with 'guild_rank_delete' hook being called with 'wow'
  // module namespace.
  if (is_object($rank)) {
    return;
  }

  $ranks_new = array();
  $ranks = wow_guild_ranks();
  foreach ($ranks as $rid => $rank_values) {
    if ($rid != $rank) {
      $ranks_new[] = $rank_values;
    }
  }

  variable_set('wow_guild_ranks', $ranks_new);
}

/**
 * Implements hook_theme().
 */
function wow_guild_rank_theme() {
  return array(
    'wow_guild_admin_ranks' => array(
      'render element' => 'form',
      'file' => 'wow_guild_rank.admin.inc',
    ),
  );
}

/**
 * Check access for set main.
 *
 * @param array $rights
 *   An associative array of rights passed by reference.
 * @param WoWCharacter $character
 *   The character object.
 * @param object $account
 *   The account to check.
 */
function wow_guild_rank_set_main_access(&$rights, $character, $account) {
  // Load all characters of the same user.
  $characters = db_select('wow_characters', 'c')
    ->orderBy('rank', 'ASC')
    ->fields('c', array('cid', 'rank'))
    ->condition('status', 1)
    ->condition('uid', $account->uid)
    ->condition('gid', $character->gid)
    ->execute()
    ->fetchAllAssoc('cid');

  if ($characters) {
    // In the guild context, the main character has the highest rank.
    // Also, if the main character is being removed (status = 0), remove it
    // from the list.
    if ($character->rank > reset($characters)->rank) {
      $main = reset($characters);
    }
    else {
      $main = $character;
    }
    foreach ($characters as $cid => $alt) {
      // Multiple character with the same rank is possible, set the
      // possibility to also grant them as main.
      $rights[$account->uid][$cid]['set main'] = $alt->rank == $main->rank;
    }
  }
  else {
    // No character for this account. Can be main.
    $rights[$account->uid][$character->cid]['set main'] = $character->status && !$character->isMain;
  }

  return $rights[$account->uid][$character->cid]['set main'];
}

/**
 * Adds the 'guild rank' role to the user_admin_account form.
 */
function wow_guild_rank_form_user_admin_account_alter(&$form, &$form_state, $form_id) {
  $ranks = wow_guild_ranks();
  $roles = user_roles(TRUE);
  $args = array(':uids' => array_keys($form['accounts']['#options']), ':gid' => wow_guild_default('gid'));
  $result = db_query('SELECT uid, rank FROM {wow_characters} WHERE uid IN (:uids) AND gid = :gid AND isMain = TRUE', $args);
  foreach ($result as $record) {
    $rid = $ranks[$record->rank]->role;
    if (isset($rid) && key_exists($rid, $roles)) {
      $form['accounts']['#options'][$record->uid]['roles'] .= '<div class="guild-rank"><ul><li>' . t('@role (guild rank)', array('@role' => $roles[$rid])) . '</li></ul></div>';
    }
  }
}
