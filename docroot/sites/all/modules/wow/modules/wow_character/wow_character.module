<?php

/**
 * @file
 * Enables the character registration and associating system.
 */

/**
 * Implements hook_menu().
 */
function wow_character_menu() {
  $items = array();

  $items['character/%wow_character_uri/%/%'] = array(
    'title callback' => 'wow_character_page_title',
    'title arguments' => array(1),
    'load arguments' => array(2, 3),
    'page callback' => 'wow_character_view_page',
    'page arguments' => array(1),
    'access arguments' => array('view wow characters'),
    'file' => 'wow_character.pages.inc',
  );

  $items['user/%user/characters'] = array(
    'title' => 'Characters',
    'page callback' => 'wow_character_user',
    'page arguments' => array(1),
    'access callback' => 'user_edit_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'wow_character.pages.inc',
  );
  $items['user/%user/characters/unblock'] = array(
    'title' => 'Activate Character',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wow_character_user_unblock', 1),
    'access callback' => 'user_edit_access',
    'access arguments' => array(1),
    'file' => 'wow_character.pages.inc',
  );
  $items['user/%user/characters/remove'] = array(
    'title' => 'Delete Character',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wow_character_user_remove', 1),
    'access callback' => 'user_edit_access',
    'access arguments' => array(1),
    'file' => 'wow_character.pages.inc',
  );
  $items['user/%user/characters/set-main/%wow_character'] = array(
    'title' => 'Set Character Main',
    'page callback' => 'wow_character_set_main',
    'page arguments' => array(4),
    'access callback' => 'wow_character_access',
    'access arguments' => array('set main', 4, 1),
    'file' => 'wow_character.pages.inc',
  );

  // Character administration pages.
  $items['admin/wow/characters'] = array(
    'title' => 'Characters',
    'description' => 'Manage WoW characters, change owner and view listing.',
    'page callback' => 'wow_character_admin',
    'page arguments' => array('list'),
    'access arguments' => array('administer wow characters'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'wow_character.admin.inc',
  );

  // Character entity configuration.
  $items['admin/config/wow/characters'] = array(
    'title' => 'Character settings',
    'description' => 'Configure default behavior of character, including confirmation requirements, auto selection of main, etc.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wow_character_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'wow_character.admin.inc',
    'weight' => -10,
  );
  $items['admin/config/wow/characters/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  return $items;
}

/**
 * Determine whether the current user may perform the given operation on the
 * specified character.
 *
 * @param string $op
 *   The operation to be performed on the character. Possible values are:
 *   - "view"
 *   - "delete"
 *   - "set main"
 * @param WoWCharacter $character
 *   The character object on which the operation is to be performed.
 * @param object $account
 *   Optional, a user object representing the user for whom the operation is to
 *   be performed. Determines access for a user other than the current user.
 *
 * @return bool
 *   TRUE if the operation may be performed, FALSE otherwise.
 */
function wow_character_access($op, $character, $account = NULL) {

  $rights = &drupal_static(__FUNCTION__, array());

  if (!$character || !in_array($op, array('view', 'delete', 'set main'), TRUE)) {
    // If there was no node to check against, or the $op was not one of the
    // supported ones, we return access denied.
    return FALSE;
  }
  // If no user object is supplied, the access check is for the current user.
  if (empty($account)) {
    $account = $GLOBALS['user'];
  }

  // If we've already checked access for this user, character, and op, return
  // from cache.
  if (isset($rights[$account->uid][$character->cid][$op])) {
    return $rights[$account->uid][$character->cid][$op];
  }

  if ($op == 'set main') {

    if ($character->isMain || !$character->status) {
      // Firstly, we check that the character is not already a main, or if he is
      // blocked. No body can by-pass this check, even not super admin.
      $rights[$account->uid][$character->cid][$op] = FALSE;
      return FALSE;
    }

    if (user_access('administer wow characters')) {
      // Secondly, if the current user has 'administer wow characters'
      // permission, allows him to set a main.
      $rights[$account->uid][$character->cid][$op] = TRUE;
      return TRUE;
    }

    if ($character->uid != $account->uid) {
      // Lastly, deny access to any other users that the owner of the character.
      $rights[$account->uid][$character->cid][$op] = FALSE;
      return FALSE;
    }

    // By-pass default rights with the guild ranks if the character is eligible.
    if (module_exists('wow_guild_rank') && wow_guild_default('gid') == $character->gid) {
      return wow_guild_rank_set_main_access($rights, $character, $account);
    }

    // Fallback to default rights.
    if (variable_get('wow_character_set_main', TRUE)) {
      $rights[$account->uid][$character->cid][$op] = TRUE;
      return TRUE;
    }
    else {
      $rights[$account->uid][$character->cid][$op] = FALSE;
      return FALSE;
    }
  }

  $rights[$account->uid][$character->cid][$op] = TRUE;
  return TRUE;
}

/**
 * Implements hook_permission().
 */
function wow_character_permission() {
  return array(
    'administer wow characters' => array(
      'title' => t('Administer characters'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Load character entities from the database.
 *
 * @param array $cids
 *   An array of character IDs.
 * @param bool $reset
 *   Whether to reset the internal cache.
 *
 * @return array
 *   An array of character objects indexed by cid.
 */
function wow_character_load_multiple($cids = array(), $reset = FALSE) {
  return entity_load('wow_character', $cids, array(), $reset);
}

/**
 * Load a character object from the database.
 *
 * @param int $cid
 *   The character ID.
 * @param bool $reset
 *   Whether to reset the internal cache.
 *
 * @return WoWCharacter
 *   A fully-populated character object.
 */
function wow_character_load($cid = NULL, $reset = FALSE) {
  $cids = (isset($cid) ? array($cid) : array());
  $character = wow_character_load_multiple($cids, $reset);
  return $character ? reset($character) : FALSE;
}

/**
 * Load a character object from its URI.
 *
 * @param string $region
 *   The character region.
 * @param string $realm
 *   The character realm.
 * @param string $name
 *   The character name.
 *
 * @return WoWCharacter
 *   A fully-populated character object.
 */
function wow_character_uri_load($region, $realm, $name) {
  $character = db_select('wow_characters', 'c')
    ->fields('c', array('cid'))
    ->condition('region', $region)
    ->condition('realm', $realm)
    ->condition('name', $name)
    ->execute()
    ->fetch();

  return $character ? wow_character_load($character->cid) : FALSE;
}

/**
 * Load a character object from the database.
 *
 * @param string $region
 *   The character region.
 * @param string $realm
 *   The character realm.
 * @param string $name
 *   The character name.
 *
 * @return WoWCharacter
 *   A fully-populated character object.
 */
function wow_character_load_by_name($region, $realm, $name) {
  $character = db_select('wow_characters', 'c')
    ->fields('c', array('cid'))
    ->condition('region', $region)
    ->condition('realm', wow_realm_to_slug($realm))
    ->condition('name', drupal_ucfirst($name))
    ->execute()
    ->fetch();

  return $character ? wow_character_load($character->cid) : FALSE;
}

/**
 * Implements hook_user_delete().
 */
function wow_character_user_delete($account) {
  db_update('wow_characters')
    ->condition('uid', $account->uid)
    ->fields(array('status' => 0, 'isMain' => 0, 'uid' => 0))
    ->execute();
}

/**
 * Implements hook_hook_info().
 */
function wow_character_hook_info() {
  $hooks['wow_character_set_main'] = array(
    'group' => 'character',
  );
  $hooks['wow_character_presave'] = array(
    'group' => 'character',
  );
  $hooks['wow_character_delete'] = array(
    'group' => 'character',
  );
  $hooks['wow_character_insert'] = array(
    'group' => 'character',
  );
  $hooks['wow_character_update'] = array(
    'group' => 'character',
  );
  $hooks['wow_character_view'] = array(
    'group' => 'character',
  );
  $hooks['wow_character_view_alter'] = array(
    'group' => 'character',
  );

  return $hooks;
}

/**
 * Implements hook_entity_info().
 */
function wow_character_entity_info() {
  $entity = array(
    'wow_character' => array(
      'label' => t('Character'),
      'entity class' => 'WoWCharacter',
      'controller class' => 'WoWCharacterController',
      'base table' => 'wow_characters',
      'load hook' => 'wow_character',
      'uri callback' => 'wow_character_uri',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'cid',
        'label' => 'name',
      ),
      'bundles' => array(
        'wow_character' => array(
          'label' => t('Character'),
          'admin' => array(
            'path' => 'admin/config/wow/characters',
            'access arguments' => array('administer wow characters'),
          ),
        ),
      ),
      'view modes' => array(
        'full' => array(
          'label' => t('Character'),
        ),
        'teaser' => array(
          'label' => t('Teaser'),
        ),
      ),
    ),
    'wow_character_race' => array(
      'label' => t('Character Race'),
      'entity class' => 'WoWCharacterRace',
      'controller class' => 'WoWCharacterRaceController',
      'base table' => 'wow_character_races',
      'load hook' => 'wow_character_race',
      'fieldable' => TRUE,
      'translation' => array(
        'locale' => TRUE,
      ),
      'entity keys' => array(
        'id' => 'id',
      ),
    ),
    'wow_character_class' => array(
      'label' => t('Character Class'),
      'entity class' => 'WoWCharacterClass',
      'controller class' => 'WoWCharacterClassController',
      'base table' => 'wow_character_classes',
      'load hook' => 'wow_character_class',
      'fieldable' => TRUE,
      'translation' => array(
        'locale' => TRUE,
      ),
      'entity keys' => array(
        'id' => 'id',
      ),
    ),
  );

  return $entity;
}

/**
 * The character races data API provides a list of character races.
 *
 * @deprecated Use $character_class_controller->load() instead;
 *
 * @param string $region
 *   The region to return data from.
 * @param string $language
 *   (Optionnal) The language to use. Default to language_content.
 * @param bool $reset
 *   (Optionnal) Reset the character race static cache.
 *
 * @return array
 *   An array of all races.
 */
function wow_character_races($region, $language = NULL, $reset = FALSE) {
  return wow_character_race((object) array('region' => $region), $language, $reset);
}

/**
 * Return a race object for a given character.
 *
 * @deprecated Use $character_class_controller->load() instead;
 *
 * @param WoWCharacter $character
 *   A character object.
 * @param string $language
 *   (Optionnal) The language to use. Default to language_content.
 * @param bool $reset
 *   (Optionnal) Reset the character race static cache.
 *
 * @return object
 *   A race object.
 */
function wow_character_race($character, $language = NULL, $reset = FALSE) {
  $values = wow_data($character->region, 'character/races', 'races', '_wow_character_race_callback', $language, $reset);
  // This function is internally called by wow_character_races().
  return isset($character->race) ? $values[$character->race] : $values;
}

function _wow_character_race_callback(&$values, $race) {
  $values[$race->id] = $race;
  unset($race->id);
}

/**
 * The character classes data API provides a list of character classes.
 *
 * @param string $region
 *   The region to return data from.
 * @param string $language
 *   (Optionnal) The language to use. Default to language_content.
 * @param bool $reset
 *   (Optionnal) Reset the character race static cache.
 *
 * @return array
 *   An array of all classes.
 */
function wow_character_classes($region, $language = NULL, $reset = FALSE) {
  return wow_character_class((object) array('region' => $region), $language, $reset);
}

/**
 * Return a class object for a given character.
 *
 * @param WoWCharacter $character
 *   A character object.
 * @param mixed $language
 *   (Optionnal) The language to use. Default to language_content.
 * @param bool $reset
 *   Reset the character class static cache.
 *
 * @return object
 *   A class object.
 */
function wow_character_class($character, $language = NULL, $reset = FALSE) {
  $values = wow_data($character->region, 'character/classes', 'classes', '_wow_character_class_callback', $language, $reset);
  // This function is internally called by wow_character_classes().
  return isset($character->class) ? $values[$character->class] : $values;
}

function _wow_character_class_callback(&$values, $class) {
  $values[$class->id] = $class;
  unset($class->id);
}

/**
 * The Character Profile API is the primary way to access character information.
 *
 * This Character Profile API can be used to fetch a single character at a time
 * through an HTTP GET request to a URL describing the character profile resource.
 *
 * By default, a basic dataset will be returned and with each request and zero
 * or more additional fields can be retrieved. To access this API, craft a
 * resource URL pointing to the character whos information is to be retrieved.
 *
 * @param string $region
 *  The guild region.
 * @param string $realm
 *   The character realm.
 * @param string $name
 *   The character name.
 * @param array $fields
 *   An array of fields to fetch:
 *   - guild: A summary of the guild that the character belongs to. If the
 *     character does not belong to a guild and this field is requested, this
 *     field will not be exposed.
 *   - stats: A map of character attributes and stats.
 *   - talents: A list of talent structures.
 *   - items: A list of items equipted by the character. Use of this field will
 *     also include the average item level and average item level equipped for
 *     the character.
 *   - reputation: A list of the factions that the character has an associated
 *     reputation with.
 *   - titles: A list of the titles obtained by the character including the
 *     currently selected title.
 *   - professions: A list of the character's professions. It is important to
 *     note that when this information is retrieved, it will also include the
 *     known recipes of each of the listed professions.
 *   - appearance: A map of values that describes the face, features and
 *     helm/cloak display preferences and attributes.
 *   - companions: A list of all of the non-combat pets obtained by the character.
 *   - mounts: A list of all of the mounts obtained by the character.
 *   - pets: A list of all of the combat pets obtained by the character.
 *   - achievements: A map of achievement data including completion timestamps
 *     and criteria information.
 *   - progression: A list of raids and bosses indicating raid progression and
 *     completedness.
 *   - pvp: A map of pvp information including arena team membership and rated
 *     battlegrounds information.
 *   - quests: A list of quests completed by the character.
 * @param array $options
 *   (Optional) For a complete list of options, see wow_http_request method.
   * @param Boolean $catch
   *   Whether to catch exceptions or not.
 *
 * @return WoWCharacter
 *   The character object returned by the API. The core dataset returned includes
 *   the character's name, level, class, gender and achievement points.
 *
 * @see wow_http_request()
 */
function wow_character_fetch($region, $realm, $name, array $fields = array(), array $options = array(), $catch = TRUE) {
  $character = wow_character_load_by_name($region, $realm, $name);

  if (!$character) {
    $character = entity_create('wow_character', array(
      'region' => $region,
      'realm' => $realm,
      'name' => $name,
    ));
  }

  $character->fetch($fields, $options, $catch);
  return $character;
}

/**
 * Fetch an already know character.
 *
 * @param WoWCharacter $character
 *   A character entity.
 * @param array $fields
 *   (Optional) For the complete list of fields supported, see wow_character_fetch method.
 *
 * @see wow_character_fetch()
 * @see wow_http_request()
 */
function wow_character_refresh(WoWCharacter $character, array $fields = array()) {
  // For efficiency manually save the original character before applying any changes.
  $character->original = clone $character;
  $character->fetch($fields);
  $character->save();
}

/**
 * Implements hook_theme().
 */
function wow_character_theme() {
  return array(
    'wow_character' => array(
      'variables' => array('character' => NULL),
      'file' => 'wow_character.theme.inc',
    ),
    'wow_character_description' => array(
      'variables' => array('character' => NULL),
      'file' => 'wow_character.theme.inc',
    ),
    'wow_character_avatar' => array(
      'variables' => array('character' => NULL),
      'file' => 'wow_character.theme.inc',
    ),
    'wow_character_name' => array(
      'variables' => array('character' => NULL),
      'file' => 'wow_character.theme.inc',
    ),
    'wow_character_race' => array(
      'variables' => array('character' => NULL, 'size' => 18),
      'file' => 'wow_character.theme.inc',
    ),
    'wow_character_class' => array(
      'variables' => array('character' => NULL, 'size' => 18),
      'file' => 'wow_character.theme.inc',
    ),
  );
}

/**
 * Implements hook_cron().
 *
 * Queues characters for updates once their refresh interval has elapsed.
 */
function wow_character_cron() {

  // Get the entity refresh method.
  if (wow_entity_refresh_method('wow_character') == WOW_REFRESH_CRON) {
    $threshold = wow_entity_refresh_threshold('wow_character');

    // Gets all characters that need to be refreshed.
    $cids = db_select('wow_characters', 'c')
      ->fields('c', array('cid'))
      ->condition('queued', 0)
      ->condition('lastFetched', REQUEST_TIME - $threshold, '<')
      ->execute()
      ->fetchCol();

    // Long-running tasks and tasks that could time out, such as retrieving
    // remote data makes use of the queue API instead of executing tak directly.
    $queue = DrupalQueue::get('wow_character');
    foreach (wow_character_load_multiple($cids) as $character) {
      // Add characters that need to be refreshed to the wow_character queue.
      if ($queue->createItem($character)) {
        // Add time stamp to avoid queueing item more than once.
        db_update('wow_characters')
          ->fields(array('queued' => REQUEST_TIME))
          ->condition('cid', $character->cid)
          ->execute();
      }
    }
  }
}

/**
 * Implements hook_cron_queue_info().
 */
function wow_character_cron_queue_info() {
  $queues['wow_character'] = array(
    'worker callback' => 'wow_character_refresh',
    'time' => 60,
  );
  return $queues;
}

/**
 * Entity uri callback.
 */
function wow_character_uri($character) {
  return array('path' => "character/$character->region/$character->realm/$character->name");
}

/**
 * Whether or not to use guild ranks.
 *
 * @param WoWCharacter $character
 *   The character entity to test for.
 *
 * @return boolean
 *   TRUE if the character belongs to the default guild and the 'use guild rank'
 *   option is checked in the character entity configuration, FALSE otherwise.
 */
function wow_character_use_guild_ranks($character) {
  return variable_get('wow_character_use_guild_ranks', module_exists('wow_guild_rank')) && wow_guild_default('gid') == $character->gid;
}
