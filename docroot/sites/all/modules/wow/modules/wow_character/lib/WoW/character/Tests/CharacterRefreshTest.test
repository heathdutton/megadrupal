<?php

/**
 * @file
 * Definition of WoW\character\Tests\CharacterRefreshTest.
 */

/**
 * Test wow_character_refresh() behavior.
 */
class CharacterRefreshTest extends CharacterTestBase {

  /**
   * Represents the eu-archimonde realm.
   *
   * @var WoWRealm
   */
  private $archimonde;

  /**
   * Last fetched timestamp.
   *
   * @var int
   */
  private $fetched;

  /**
   * Guild refresh threshold.
   *
   * @var int
   */
  private $threshold;

  public static function getInfo() {
    return array(
      'name' => 'Character refresh',
      'description' => 'Test character refreshing and methods for existing entity.',
      'group' => 'WoW Character',
    );
  }

  protected function setUp() {
    parent::setUp();

    $this->archimonde = $this->wowCreateRealm('eu', 'Archimonde');
    $this->threshold = wow_entity_refresh_threshold('wow_guild');
    $this->fetched = REQUEST_TIME - $this->threshold;

    $controllers = &drupal_static('entity_get_controller', array());
    unset($controllers['wow_character']);
  }

  /**
   * Test refreshing a character.
   */
  function testCharacterRefresh() {
    entity_get_controller('wow_character')->byPassStub = TRUE;

    $character = $this->wowCreateCharacter($this->archimonde, 'Mercurial', array('lastFetched' => $this->fetched - 1000));

    // This should always refresh.
    wow_character_refresh($character);

    $t_fetched = array('!date' => format_date($character->lastFetched));
    $t_modified = array('!date' => format_date($character->lastModified));
    $this->assertNotEqual(0, $character->lastFetched, t('Refreshing character entity (lastFetched: !date).', $t_fetched), 'WoW Character');
    $this->assertNotEqual(0, $character->lastModified, t('Refreshing character entity (using If-Modified-Since: 0).', $t_modified), 'WoW Character');

    $fetched = $character->lastFetched;
    $modified = $character->lastModified;

    sleep(1);

    // This should not refresh.
    wow_character_refresh($character);
    $t_fetched = array('!date' => format_date($character->lastFetched));
    $t_modified = array('!date' => format_date($character->lastModified));
    $this->assertNotEqual($fetched, $character->lastFetched, t('Not refreshing character entity (lastFetched: !date).', $t_fetched), 'WoW Character');
    $this->assertEqual($modified, $character->lastModified, t('Not refreshing character entity (using If-Modified-Since: !date).', $t_modified), 'WoW Character');

    $character = $this->wowCreateCharacter($this->archimonde, 'XXX');

    // This should trigger entity deletion.
    wow_character_refresh($character);
    $this->assertTrue(variable_get('hook_wow_character_delete', FALSE), 'Character delete hook.', 'WoW Character');
    $character = wow_character_load($character->cid, TRUE);
    $this->assertFalse($character, 'Character has been deleted.', 'WoW Character');
  }

  /**
   * Test the refresh method at loading character time.
   */
  function testCharacterRefreshLoad() {
    entity_get_controller('wow_character')->byPassStub = TRUE;
    entity_get_controller('wow_character')->setRefreshMethod(WOW_REFRESH_LOAD);

    // This character should be updated.
    $character_a = $this->wowCreateCharacter($this->archimonde, 'Mercurial', array('lastFetched' => $this->fetched - 1000));

    // This character should not be updated.
    $character_b = $this->wowCreateCharacter($this->archimonde, 'Dirge', array('lastFetched' => $this->fetched + 1000));

    // This character should be deleted.
    $character_c = $this->wowCreateCharacter($this->archimonde, 'XXX');

    // This should trigger the refreshing of the character.
    $character_a = wow_character_load($character_a->cid, TRUE);

    $t_fetched = array('!date' => format_date($character_a->lastFetched));
    $t_modified = array('!date' => format_date($character_a->lastModified));
    $this->assertNotEqual(0, $character_a->lastFetched, t('Refreshing character entity at loading time (lastFetched: !date).', $t_fetched), 'WoW Character');
    $this->assertNotEqual(0, $character_a->lastModified, t('Refreshing character entity at loading time (lastModified: !date).', $t_modified), 'WoW Character');

    // This should not trigger the refreshing of the character.
    $character_b = wow_character_load($character_b->cid, TRUE);

    $t_fetched = array('!date' => format_date($character_b->lastFetched));
    $t_modified = array('!date' => format_date($character_b->lastModified));
    $this->assertEqual($this->fetched + 1000, $character_b->lastFetched, t('Not refreshing character entity at loading time (lastFetched: !date).', $t_fetched), 'WoW Character');
    $this->assertEqual(0, $character_b->lastModified, t('Not refreshing character entity at loading time (lastModified: !date).', $t_modified), 'WoW Character');

    // This should trigger entity deletion.
    $character_c = wow_character_load($character_c->cid, TRUE);
    $character_c = wow_character_load($character_c->cid, TRUE);
    $this->assertFalse($character_c, 'Character has been deleted.', 'WoW Character');
  }

  /**
   * Test the refresh method through cron.
   */
  function testCharacterRefreshCron() {
    entity_get_controller('wow_character')->byPassStub = TRUE;
    entity_get_controller('wow_character')->setRefreshMethod(WOW_REFRESH_CRON);

    // This character should be updated.
    $this->wowCreateCharacter($this->archimonde, 'Mercurial', array('lastFetched' => $this->fetched - 1000));

    // This character should not be updated.
    $this->wowCreateCharacter($this->archimonde, 'Dirge', array('lastFetched' => $this->fetched + 1000));

    // This character should be deleted.
    $this->wowCreateCharacter($this->archimonde, 'XXX');

    // This should trigger the refreshing of the first character.
    drupal_cron_run();

    $query = db_select('wow_characters', 'c')
      ->fields('c', array('lastFetched', 'lastModified'))
      ->execute();

    $character = $query->fetch();

    $t_fetched = array('!date' => format_date($character->lastFetched));
    $t_modified = array('!date' => format_date($character->lastModified));
    $this->assertNotEqual(0, $character->lastFetched, t('Refreshing character entity through cron (lastFetched: !date).', $t_fetched), 'WoW Character');
    $this->assertNotEqual(0, $character->lastModified, t('Refreshing character entity through cron (lastModified: !date).', $t_modified), 'WoW Character');

    $character = $query->fetch();

    $t_fetched = array('!date' => format_date($character->lastFetched));
    $t_modified = array('!date' => format_date($character->lastModified));
    $this->assertEqual($this->fetched + 1000, $character->lastFetched, t('Not refreshing character entity through cron (lastFetched: !date).', $t_fetched), 'WoW Character');
    $this->assertEqual(0, $character->lastModified, t('Not refreshing character entity through cron (lastModified: !date).', $t_modified), 'WoW Character');

    $character = $query->fetch();

    $this->assertFalse($character, 'Character has been deleted.', 'WoW Character');
  }

}
