<?php

/**
 * @file
 * Definition of WoW\character\Tests\CharacterAddTest.
 */

/**
 * Test wow_character_user_add() behavior.
 */
class CharacterAddTest extends CharacterTestBase {

  private $user;

  /**
   * Represents the eu-archimonde realm.
   *
   * @var WoWRealm
   */
  private $archimonde;

  public static function getInfo() {
    return array(
      'name' => 'Character add',
      'description' => 'Test the add character user page.',
      'group' => 'WoW Character',
    );
  }

  protected function setUp() {
    parent::setUp();

    $this->user = $this->drupalCreateUser();
    $this->drupalLogin($this->user);

    $this->archimonde = $this->wowCreateRealm('eu', 'Archimonde');
  }

  /**
   * Assert a character has been added to the list of characters.
   *
   * @param string $name
   */
  private function assertCharacterAdded($name) {
    $this->assertRaw(t('%name has been successfully added to your character list.', array('%name' => $name)), 'Character added.', 'WoW Character');
  }
  /**
   *
   * Assert a character has not been added to the list of characters.
   *
   * @param string $name
   */
  private function assertCharacterNotAdded($name) {
    $this->assertRaw(t('%name is already in your character list.', array('%name' => $name)), 'Character not added.', 'WoW Character');
  }

  /**
   * Assert a character has not been found on the remote service.
   *
   * @param string $name
   * @param WoWRealm $realm
   */
  private function assertCharacterNotFound($character_name, $realm) {
    $t_args = array('%name' => $character_name, '!realm' => drupal_strtoupper($realm->region) . '-' . $realm->name);
    $this->assertRaw(t('%name not found on !realm. Please try again with a correct name.', $t_args), 'Character not found.', 'WoW Character');
  }

  /**
   * Assert a character is already in use by someone in the site.
   *
   * @param string $name
   * @param string $username
   */
  private function assertCharacterCurrentlyInUse($name, $username) {
    $t_args = array('%name' => $name, '@username' => $username);
    $this->assertRaw(t('%name is currently in use by @username in this website. You should contact an administrator if you think your character is used by somebody else.', $t_args), 'Character in use.', 'WoW Character');
  }

  /**
   * Assert a character is found in the list of characters.
   *
   * @param string $name
   */
  private function assertCharacterInList($name) {
    $this->assertText($name, 'Found character in list of characters', 'WoW Character');
  }

  /**
   * Assert a character is not found in the list of characters.
   *
   * @param string $name
   */
  private function assertCharacterNotInList($name) {
    $this->assertNoText($name, 'Character not in list of characters', 'WoW Character');
  }

  /**
   * Create a character through the user pages interface and ensure that it
   * displays in the character list.
   */
  function testCharacterAdd() {
    $edit = array(
      'realm' => 'Archimonde [EU]',
      'name' => 'Mercurial',
    );
    // Adds a first time the character; this should succeed.
    $this->drupalPost("user/{$this->user->uid}/characters", $edit, t('Add a Character'));
    $this->assertCharacterAdded($edit['name']);

    $this->assertCharacterInList($edit['name']);
    $this->drupalLogout();

    // Creates a new user.
    $user = $this->drupalCreateUser();
    $this->drupalLogin($user);

    // Try to add the character on this user; this should succeed.
    $this->drupalPost("user/{$user->uid}/characters", $edit, t('Add a Character'));
    $this->assertCharacterAdded($edit['name']);

    $this->drupalGet("user/{$user->uid}/characters");
    $this->assertCharacterInList($edit['name']);
  }

  /**
   * Create an already existing character through the user pages interface and
   * ensure that it is not added in the character list.
   */
  function testCharacterNotAdd() {
    $character = $this->wowCreateCharacter($this->archimonde, 'Mercurial', array('status' => 1, 'uid' => $this->user->uid));

    $edit = array(
      'realm' => 'Archimonde [EU]',
      'name' => 'Mercurial',
    );
    // Adds a second time the character; this should fail.
    $this->drupalPost("user/{$this->user->uid}/characters", $edit, t('Add a Character'));
    $this->assertCharacterNotAdded($edit['name']);
    $this->drupalLogout();

    // Creates a new user.
    $user = $this->drupalCreateUser();
    $this->drupalLogin($user);

    // Try to add the character on this user; this should fail.
    $this->drupalPost("user/{$user->uid}/characters", $edit, t('Add a Character'));
    $this->assertCharacterCurrentlyInUse($edit['name'], $this->user->name);

    $this->drupalGet("user/{$user->uid}/characters");
    $this->assertCharacterNotInList($edit['name']);
  }

  /**
   * Create a non-existing character through the user pages interface and ensure
   * that it returns a proper error message.
   */
  function testCharacterNotFound() {
    $edit = array(
      'realm' => 'Archimonde [EU]',
      'name' => 'xxxxx',
    );
    // Adds a non-existing character; this should fail.
    $this->drupalPost("user/{$this->user->uid}/characters", $edit, t('Add a Character'));
    $this->assertCharacterNotFound($edit['name'], $this->archimonde);

    $this->drupalGet("user/{$this->user->uid}/characters");
    $this->assertCharacterNotInList($edit['name']);
  }
}
