<?php

/**
 * @file
 * Definition of WoW\character\Tests\CharacterSetMainTest.
 */

/**
 * Test wow_character_user_add() behavior.
 */
class CharacterSetMainTest extends CharacterTestBase {

  public static function getInfo() {
    return array(
      'name' => 'Character set main',
      'description' => 'Test the set main character functionality.',
      'group' => 'WoW Character',
    );
  }

  // @TODO: test set_main hook.

  /**
   * Test the unicity of a main character.
   */
  function testCharacterUnicityMain() {
    $user = $this->drupalCreateUser();
    $realm = $this->randomRealm();
    $character_a = $this->randomCharacter($realm, array('uid' => $user->uid, 'isMain' => 1));
    $character_b = $this->randomCharacter($realm, array('uid' => $user->uid, 'status' => 1));
    $character_c = $this->randomCharacter($realm, array('uid' => $user->uid, 'status' => 1, 'isMain' => 1));

    $character_b->isMain = TRUE;
    $character_b->save();

    $character_a = wow_character_load($character_a->cid, TRUE);
    $this->assertEqual($character_a->isMain, 0, 'Character A is not main.');
    $character_b = wow_character_load($character_b->cid, TRUE);
    $this->assertEqual($character_b->isMain, 1, 'Character B is main.');
    $character_c = wow_character_load($character_c->cid, TRUE);
    $this->assertEqual($character_c->isMain, 0, 'Character C is not main.');
  }

  /**
   * Set a character main (simulates a user click).
   */
  function testCharacterSetMain() {
    $user = $this->drupalCreateUser();
    $this->drupalLogin($user);

    $realm = $this->randomRealm();
    $character_a = $this->randomCharacter($realm, array('uid' => $user->uid));
    $character_b = $this->randomCharacter($realm, array('uid' => $user->uid, 'status' => 1));
    $character_c = $this->randomCharacter($realm, array('uid' => $user->uid, 'status' => 1, 'isMain' => 1));

    $this->drupalGet("user/$user->uid/characters");

    // Test for existence of set main link in table.
    $link = l(t('set main'), "user/$user->uid/characters/set-main/$character_a->cid", array('query' => array('destination' => "user/$user->uid/characters")));
    $this->assertNoRaw($link, 'Character A set main link not on user characters page');
    $link = l(t('set main'), "user/$user->uid/characters/set-main/$character_b->cid", array('query' => array('destination' => "user/$user->uid/characters")));
    $this->assertRaw($link, 'Found character B set main link on user characters page');
    $link = l(t('set main'), "user/$user->uid/characters/set-main/$character_c->cid", array('query' => array('destination' => "user/$user->uid/characters")));
    $this->assertNoRaw($link, 'Character C set main link not on user characters page');

    // Attempt to set an already main character.
    $this->drupalGet("user/$user->uid/characters/set-main/$character_c->cid");
    $this->assertResponse(403, 'Character C cannot be main.');

    // Attempt to set the blocked alt character.
    $this->drupalGet("user/$user->uid/characters/set-main/$character_a->cid");
    $this->assertResponse(403, 'Character A cannot be main.');

    // Let's ensure we can set main the active alt character.
    $this->drupalGet("user/$user->uid/characters/set-main/$character_b->cid");
    $this->assertResponse(200, 'Character B can be main.');
    $character_b = wow_character_load($character_b->cid, TRUE);
    $this->assertEqual($character_b->isMain, 1, 'Character B is main.');
    $character_c = wow_character_load($character_c->cid, TRUE);
    $this->assertEqual($character_c->isMain, 0, 'Character C is not main.');

    // Test hook_user_delete() behavior on character B.
    user_delete($user->uid);
    $character_b = wow_character_load($character_b->cid, TRUE);
    $this->assertEqual($character_b->isMain, 0, 'Character B is not main.');
  }

}
