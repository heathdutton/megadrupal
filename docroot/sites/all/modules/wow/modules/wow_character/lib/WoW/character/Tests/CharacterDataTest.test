<?php

/**
 * @file
 * Definition of WoW\character\Tests\CharacterDataTest.
 */

/**
 * Character data tests with the service.
 */
class CharacterDataTest extends CharacterTestBase {

  public static function getInfo() {
    return array(
      'name' => 'Character data service',
      'description' => 'Request the service for character related data resources.',
      'group' => 'WoW Character',
    );
  }

  protected function setUp() {
    parent::setUp(array('locale', 'wow_test_character'));
    locale_add_language('fr');
  }

  function testSaveData() {
    $entity = entity_create('wow_character_race', array(
      'id' => 1,
      'mask' => 1,
      'side' => 'alliance',
      'name' => 'Humain',
      'language' => 'fr',
    ));
    $entity->save();

    $entities = entity_get_controller('wow_character_race')->load(array(1));
    $this->assertTrue($entities[1] instanceof WoWCharacterRace, t('Loading character race by ID.'), 'WoW Character');

    $query = new EntityFieldQuery();
    $entities = $query->entityCondition('entity_type', 'wow_character_race')
                      ->fieldCondition('wow_character_race', 'name', 'Humain')
                      ->execute();

    $entities = entity_get_controller('wow_character_race')->load(array_keys($entities['wow_character_race']));
    $this->assertTrue($entities[1] instanceof WoWCharacterRace, t('Loading character race by name.'), 'WoW Character');
  }

  function testDataResources() {
    $humans = array(
      'us' => array(
        'es' => 'Humano',
        'pt' => 'Humano',
        'en' => 'Human',
      ),
      'eu' => array(
        'fr' => 'Humain',
        'es' => 'Humano',
        'pt' => 'Humano',
        'en' => 'Human',
        'ru' => 'Человек',
        'de' => 'Mensch',
      ),
      'kr' => array('ko' => '인간'),
      'tw' => array('zh' => '人類'),
      'cn' => array('zh' => '人类'),
    );

    foreach ($humans as $region => $languages) {
      foreach ($languages as $language => $name) {
        //$this->testRacesResource($region, $language, 1, $name);
      }
    }

    $warriors = array(
      'us' => array(
        'es' => 'Guerrero',
        'pt' => 'Guerreiro',
        'en' => 'Warrior',
      ),
      'eu' => array(
        'fr' => 'Guerrier',
        'es' => 'Guerrero',
        'pt' => 'Guerreiro',
        'en' => 'Warrior',
        'ru' => 'Воин',
        'de' => 'Krieger',
      ),
      'kr' => array('ko' => '전사'),
      'tw' => array('zh' => '戰士'),
      'cn' => array('zh' => '战士'),
    );

    foreach ($warriors as $region => $languages) {
      foreach ($languages as $language => $name) {
        //$this->testClassesResource($region, $language, 1, $name);
      }
    }
  }

  private function testRacesResource($region, $language, $id, $name) {
    $races = wow_character_races($region, $language);

    $t_lang = array('!region' => $region, '!language' => $language);
    $t_test = array('!expected' => $name, '!actual' => $races[$id]->name);

    $this->assertEqual($name, $races[$id]->name, t('[!region - !language] The expected (!expected) translation has been found (!actual).', $t_lang + $t_test), 'WoW Character');
  }

  private function testClassesResource($region, $language, $id, $name) {
    $classes = wow_character_classes($region, $language);

    $t_lang = array('!region' => $region, '!language' => $language);
    $t_test = array('!expected' => $name, '!actual' => $classes[$id]->name);

    $this->assertEqual($name, $classes[$id]->name, t('[!region - !language] The expected (!expected) translation has been found (!actual).', $t_lang + $t_test), 'WoW Character');
  }

}
