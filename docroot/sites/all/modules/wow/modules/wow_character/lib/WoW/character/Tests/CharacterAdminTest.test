<?php

/**
 * @file
 * Definition of WoW\character\Tests\CharacterAdminTest.
 */

class CharacterAdminTest extends CharacterTestBase {

  public static function getInfo() {
    return array(
      'name' => 'Character administration',
      'description' => 'Test character administration page functionality.',
      'group' => 'WoW Character',
    );
  }

  /**
   * Activates a character and blocks it.
   */
  function testCharacterAdmin() {

    $realm = $this->randomRealm();
    $character_a = $this->randomCharacter($realm);
    $character_b = $this->randomCharacter($realm, array('status' => 1));
    $character_c = $this->randomCharacter($realm, array('status' => 1, 'isMain' => 1));

    // Create admin user to activates/block and set main character.
    $admin_user = $this->drupalCreateUser(array('administer wow characters'));
    $this->drupalLogin($admin_user);
    $this->drupalGet('admin/wow/characters');
    $this->assertText($character_a->name, t('Found character A on admin characters page.'));
    $this->assertText($character_b->name, t('Found character B on admin characters page.'));
    $this->assertText($character_c->name, t('Found character C on admin characters page.'));

    // Filter the characters by status 'active'.
    $edit = array();
    $edit['status'] = 1;
    $this->drupalPost('admin/wow/characters', $edit, t('Filter'));

    // Check if the correct characters show up.
    $this->assertNoText($character_a->name, t('Character A not on filtered by status admin characters page.'));
    $this->assertText($character_b->name, t('Found character B on filtered by status admin characters page.'));
    $this->assertText($character_b->name, t('Found character C on filtered by status admin characters page.'));

    $this->drupalPost('admin/wow/characters', $edit, t('Reset'));

    // Test blocking of a character.
    $this->assertEqual($character_b->status, 1, 'Character B not blocked.');
    $edit = array();
    $edit['operation'] = 'block';
    $edit['characters[' . $character_b->cid . ']'] = TRUE;
    $this->drupalPost('admin/wow/characters', $edit, t('Update'));
    $character_b = wow_character_load($character_b->cid, TRUE);
    $this->assertEqual($character_b->status, 0, 'Character B blocked.');

    // Test unblocking of a character.
    $this->assertEqual($character_a->status, 0, 'Character A blocked.');
    $edit = array();
    $edit['operation'] = 'unblock';
    $edit['characters[' . $character_a->cid . ']'] = TRUE;
    $this->drupalPost('admin/wow/characters', $edit, t('Update'));
    $character_a = wow_character_load($character_a->cid, TRUE);
    $this->assertEqual($character_a->status, 0, 'Character A blocked.');

    $account = $this->drupalCreateUser();
    $character_a->uid = $account->uid;
    $character_a->save();
    $this->drupalPost('admin/wow/characters', $edit, t('Update'));
    $character_a = wow_character_load($character_a->cid, TRUE);
    $this->assertEqual($character_a->status, 1, 'Character A unblocked.');

    // Test setting main of a character.
    $edit = array();
    $edit['operation'] = 'set main';
    $edit['characters[' . $character_a->cid . ']'] = TRUE;
    $this->drupalPost('admin/wow/characters', $edit, t('Update'));
    $character_a = wow_character_load($character_a->cid, TRUE);
    $this->assertEqual($character_a->isMain, 1, 'Character A is main.');
  }
}
