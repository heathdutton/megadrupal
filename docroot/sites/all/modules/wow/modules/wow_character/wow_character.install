<?php

/**
 * @file
 * Install, update and uninstall functions for the wow_character module.
 */

/**
 * Implements hook_requirements().
 */
function wow_character_requirements($phase) {
  $requirements = array();

  // Ensure translations don't break at install time.
  $t = get_t();

  $collation = db_query('SHOW COLLATION')->fetchAllKeyed();

  if (is_null($collation['latin1_general_cs'])) {
    $requirements['wow_character_collation'] = array(
      'title'       => $t('Case Sensitive Collation'),
      'value'       => $t('Not supported'),
      'severity'    => REQUIREMENT_ERROR,
      'description' => $t('Your database server does not support case sensitive collation.'),
    );
  }

  return $requirements;
}

/**
 * Implements hook_install().
 */
function wow_character_install() {
  db_query("ALTER TABLE {wow_characters} MODIFY name CHAR(12) CHARACTER SET latin1 COLLATE latin1_general_cs NOT NULL COMMENT 'Character\'s name.'")->execute();
}

/**
 * Implements hook_schema().
 */
function wow_character_schema() {
  $schema['wow_characters'] = array(
    'description' => 'Stores character data.',
    'fields' => array(
      'cid' => array(
        'description' => 'Primary Key: Unique character ID.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'uid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => "User's {users}.uid.",
      ),
      'region' => array(
        'type' => 'char',
        'length' => 2,
        'not null' => TRUE,
        'description' => "Character's region.",
      ),
      'realm' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'description' => "Character's realm (slug).",
      ),
      'name' => array(
        'type' => 'char',
        'length' => 12,
        'not null' => TRUE,
        'description' => "Character's name.",
      ),
      'level' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
        'size' => 'tiny',
        'description' => "Character's level.",
      ),
      'status' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'Whether the character is active(1), blocked(0).',
      ),
      'isMain' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'Whether the character is main(1), alt(0).',
      ),
      'lastFetched' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => "Timestamp for character's last fetch.",
      ),
      'lastModified' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => "Timestamp for character's last update.",
      ),
      'queued' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Time when this character was queued for refresh, 0 if not queued.',
      ),
      'thumbnail' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => "Character's thumbnail.",
      ),
      'race' => array(
        'type' => 'int',
        'not null' => TRUE,
        'size' => 'tiny',
        'description' => "Character's race.",
      ),
      'achievementPoints' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => "Character's achievement points.",
      ),
      'gender' => array(
        'type' => 'int',
        'not null' => TRUE,
        'size' => 'tiny',
        'description' => "Character's gender.",
      ),
      'class' => array(
        'type' => 'int',
        'not null' => TRUE,
        'size' => 'tiny',
        'description' => "Character's class.",
      ),
    ),
    'primary key' => array('cid'),
    'unique keys' => array(
      'character' => array('region', 'realm', 'name'),
    ),
    'foreign keys' => array(
      'user' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
      'realm' => array(
        'table' => 'wow_realm',
        'columns' => array('realm' => 'slug'),
      ),
      'race' => array(
        'table' => 'wow_character_races',
        'columns' => array('race' => 'id'),
      ),
    ),
  );

  $schema['wow_character_races'] = array(
    'description' => 'Stores character races data.',
    'fields' => array(
      'id' => array(
        'description' => 'Primary Key: Unique character race ID.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'mask' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => "Character race's bitmask.",
      ),
      'side' => array(
        'type' => 'char',
        'length' => 8,
        'not null' => TRUE,
        'description' => "Character race's side.",
      ),
    ),
    'primary key' => array('id'),
  );

  $schema['wow_character_classes'] = array(
    'description' => 'Stores character classes data.',
    'fields' => array(
      'id' => array(
        'description' => 'Primary Key: Unique character class ID.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'mask' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => "Character class's bitmask.",
      ),
      'powerType' => array(
        'type' => 'char',
        'length' => 12,
        'not null' => TRUE,
        'description' => "Character class's power type.",
      ),
    ),
    'primary key' => array('id'),
  );

  return $schema;
}

/**
 * Implements hook_uninstall().
 */
function wow_character_uninstall() {
  // TODO: put this in a hook_module_install().
  // Loop over each of the fields defined by this module and delete
  // all instances of the field, their data, and the field itself.
  foreach (array_keys(_wow_character_installed_fields()) as $field) {
    field_delete_field($field);
  }

  // Loop over any remaining field instances attached to the entities
  // content type (such as the name field) and delete them individually.
  $instances = field_info_instances('wow_character_race', 'wow_character_race');
  foreach ($instances as $instance_name => $instance) {
    field_delete_instance($instance);
  }

  foreach (array('wow_character_races', 'wow_character_classes') as $variable) {
    // Delete every localized version of variables.
    $select = db_select('variable', 'v')
      ->fields('v', array('name'))
      ->condition('name', "$variable:%", 'LIKE')
      ->execute();

    while ($row = $select->fetch()) {
      // Lazy loaded.
      variable_del($row->name);
    }
  }

  variable_del('wow_character_refresh_method');
  variable_del('wow_character_refresh_threshold');
  variable_del('wow_character_set_main');
  variable_del('wow_character_use_guild_ranks');
}

/**
 * Adds lastFetched column.
 * Removed default values for race, gender and class columns.
 * Renamed is_main field to isMain. Better for consistency with other columns.
 */
function wow_character_update_7200() {
  db_drop_unique_key('wow_characters', 'character');

  // Added lastFetched field.
  $spec = array(
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
    'description' => "Timestamp for character's last fetch.",
  );
  db_add_field('wow_characters', 'lastFetched', $spec);

  // Removed default value.
  $spec = array(
    'type' => 'int',
    'not null' => TRUE,
    'size' => 'tiny',
    'description' => "Character's race.",
  );
  db_change_field('wow_characters', 'race', 'race', $spec);

  // Removed default value.
  $spec = array(
    'type' => 'int',
    'not null' => TRUE,
    'size' => 'tiny',
    'description' => "Character's gender.",
  );
  db_change_field('wow_characters', 'gender', 'gender', $spec);

  // Removed default value.
  $spec = array(
    'type' => 'int',
    'not null' => TRUE,
    'size' => 'tiny',
    'description' => "Character's class.",
  );
  db_change_field('wow_characters', 'class', 'class', $spec);

  // Changed the field name: is_main -> isMain.
  $spec = array(
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
    'size' => 'tiny',
    'description' => 'Whether the character is main(1), alt(0).',
  );
  db_change_field('wow_characters', 'is_main', 'isMain', $spec);

  // Changed the description: +(slug).
  $spec = array(
    'type' => 'varchar',
    'length' => 32,
    'not null' => TRUE,
    'description' => "Character's realm (slug).",
  );
  db_change_field('wow_characters', 'realm', 'realm', $spec);

  db_add_unique_key('wow_characters', 'character', array('region', 'realm', 'name'));
}

/**
 * Replace realm name by its realm slug equivalent.
 */
function wow_character_update_7201(&$sandbox) {
  // Update 10 characters at a time to "slugify" the realm name.
  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = 0;
    $sandbox['current_cid'] = 0;
    $sandbox['max'] = db_query('SELECT COUNT(DISTINCT cid) FROM {wow_characters}')->fetchField();
  }

  $characters = db_select('wow_characters', 'c')
    ->fields('c', array('cid', 'realm'))
    ->condition('cid', $sandbox['current_cid'], '>')
    ->range(0, 10)
    ->orderBy('cid', 'ASC')
    ->execute();

  foreach ($characters as $character) {
    db_update('wow_characters')
      ->fields(array('realm' => wow_realm_to_slug($character->realm)))
      ->condition('cid', $character->cid)
      ->execute();

    $sandbox['progress']++;
    $sandbox['current_cid'] = $character->cid;
  }

  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : ($sandbox['progress'] / $sandbox['max']);

  return format_plural($sandbox['progress'],
      'Changed the realm name to its slug equivalent of 1 character.',
      'Changed the realm name to its slug equivalent of @count characters.',
      array('@count' => $sandbox['progress']));
}

/**
 * Added wow_character_races and wow_character_classes table.
 */
function wow_character_update_7202() {
  $schema['wow_character_races'] = array(
    'description' => 'Stores character races data.',
    'fields' => array(
      'id' => array(
        'description' => 'Primary Key: Unique character race ID.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'mask' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => "Character race's bitmask.",
      ),
      'side' => array(
        'type' => 'char',
        'length' => 8,
        'not null' => TRUE,
        'description' => "Character race's side.",
      ),
    ),
    'primary key' => array('id'),
  );
  db_create_table('wow_character_races', $schema['wow_character_races']);

  $schema['wow_character_classes'] = array(
    'description' => 'Stores character classes data.',
    'fields' => array(
      'id' => array(
        'description' => 'Primary Key: Unique character class ID.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'mask' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => "Character class's bitmask.",
      ),
      'powerType' => array(
        'type' => 'char',
        'length' => 12,
        'not null' => TRUE,
        'description' => "Character class's power type.",
      ),
    ),
    'primary key' => array('id'),
  );
  db_create_table('wow_character_classes', $schema['wow_character_classes']);
}

/**
 * Install fields for wow_character_race and wow_character_class entites.
 */
function wow_character_update_7203() {
  wow_modules_installed(array('wow_character'));
}

/**
 * Adds a 'queued' column to avoid queuing item more than once.
 *
 * Cleans the queue table from 'wow_character' items.
 */
function wow_character_update_7204() {
  $spec =  array(
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
    'description' => 'Time when this character was queued for refresh, 0 if not queued.',
  );
  db_add_field('wow_characters', 'queued', $spec);

  db_delete('queue')
    ->condition('name', 'wow_character')
    ->execute();
}

/**
 * Implements hook_update_dependencies().
 */
function wow_character_update_dependencies() {
  // wow_character_update_7200() requires the 2.x version of the wow module.
  $dependencies['wow_character'][7200] = array(
    'wow' => 7200,
  );

  $dependencies['wow_character'][7202] = array(
    'wow' => 7203,
  );

  return $dependencies;
}
