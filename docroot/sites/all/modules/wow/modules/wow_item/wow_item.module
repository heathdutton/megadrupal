<?php

/**
 * @file
 * Enables the item local storage and display with integration to external services.
 */

/**
 * Implements hook_entity_info().
 */
function wow_item_entity_info() {
  $entity = array(
    'wow_item' => array(
      'label' => t('Item'),
      'entity class' => 'WoWItem',
      'controller class' => 'WoWItemController',
      'base table' => 'wow_item',
      'load hook' => 'wow_item',
      'uri callback' => 'wow_item_uri',
      'fieldable' => TRUE,
      'translation' => array(
        'locale' => TRUE,
      ),
      'entity keys' => array(
        'id' => 'id',
        'language' => 'language',
      ),
      'bundles' => array(
        'wow_item' => array(
          'label' => t('Item'),
        ),
      ),
      'view modes' => array(
        'full' => array(
          'label' => t('Item'),
          'custom settings' => FALSE,
        ),
        'teaser' => array(
          'label' => t('Tooltip'),
          'custom settings' => TRUE,
        ),
      ),
    ),
  );

  return $entity;
}

/**
 * The item classes data API provides a list of item classes.
 *
 * @param int $id
 *   The item class ID.
 * @param bool $reset
 *   Reset the item class static cache.
 *
 * @return mixed
 *   Either an item class object if $id was provided, either an array of all
 *   items class.
 */
function wow_item_classes($id = NULL, $reset = FALSE) {
  global $language;

  if (is_null($values = variable_get('wow_item_classes:' . $language->language)) || $reset) {
    $values = array();

    // Call the Data API.
    $classes = wow_http_request($region, "data/item/classes");
    foreach ($classes->classes as $class) {
      $values[$class->class] = $class->name;
    }
    variable_set('wow_item_classes:' . $language->language, $values);
  }

  return is_null($id) ? $values : $values[$id];
}

/**
 * The item API provides detailed item information.
 *
 * @param string $region
 *   Optional region to use. If null, uses the site's default.
 * @param int $id
 *   The item ID.
 * @param string $language
 *   (Optional) The language code used to make API calls. Default to undefined.
 * @param Boolean $catch
 *   Whether to catch exceptions or not.
 *
 * @return WoWItem
 *   The item object returned by the API.
 */
function wow_item_fetch($region, $id, $language = LANGUAGE_NONE, $catch = TRUE) {
  $item = wow_item_load($id);

  if (!$item) {
    $item = entity_create('wow_item', array('id' => $id));
  }

  $item->region = $region;
  $item->language = $language;
  $item->fetch(wow_api_locale($region, $language), $catch);
  return $item;
}

/**
 * Load item entities from the database.
 *
 * @param array $ids
 *   An array of item IDs.
 * @param bool $reset
 *   Whether to reset the internal cache.
 *
 * @return array
 *   An array of wow_item entites indexed by id.
 */
function wow_item_load_multiple($ids = array(), $reset = FALSE) {
  return entity_load('wow_item', $ids, array(), $reset);
}

/**
 * Load an item object from the database.
 *
 * @param int $id
 *   The item ID.
 * @param bool $reset
 *   Whether to reset the internal cache.
 *
 * @return WoWItem
 *   A fully-populated item object.
 */
function wow_item_load($id = NULL, $reset = FALSE) {
  $ids = (isset($id) ? array($id) : array());
  $item = wow_item_load_multiple($ids, $reset);
  return $item ? reset($item) : FALSE;
}

/**
 * Load an item object from the database.
 *
 * @param string $name
 *   The item name.
 *
 * @return WoWItem
 *   A fully-populated item object.
 */
function wow_item_load_by_name($name) {
  $query = new EntityFieldQuery();
  $item = $query->entityCondition('entity_type', 'wow_item')
                ->fieldCondition('wow_item', 'name', $name)
                ->execute();

  return wow_item_load(reset(array_keys($item['wow_item'])));
}

/**
 * Construct a drupal_render() style array from an array of loaded items.
 *
 * @param array $items
 *   An array of items as returned by wow_item_load_multiple().
 * @param string $view_mode
 *   View mode, e.g. 'full', 'teaser'...
 * @param int $weight
 *   An integer representing the weight of the first item in the list.
 * @param string $langcode
 *   (optional) A language code to use for rendering. Defaults to the global
 *   content language of the current request.
 *
 * @return array
 *   An array in the format expected by drupal_render().
 */
function wow_item_view_multiple($items, $view_mode = 'teaser', $weight = 0, $langcode = NULL) {
  field_attach_prepare_view('wow_item', $items, $view_mode, $langcode);
  entity_prepare_view('wow_item', $items, $langcode);
  $build = array();
  foreach ($items as $item) {
    $build['items'][$item->id] = $item->view($view_mode, $langcode);
    $build['items'][$item->id]['#weight'] = $weight;
    $weight++;
  }
  $build['items']['#sorted'] = TRUE;
  return $build;
}

/**
 * Callback of wow's hook_field_formatter_info().
 */
function wow_item_field_formatter_callback() {
  return array(
    'label' => t('Item name and description'),
    'field types' => array('wow_item'),
  );
}

/**
 * Callback of wow's hook_field_formatter_view().
 */
function wow_item_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  // TODO: per type formatter!
  drupal_add_js('http://static.wowhead.com/widgets/power.js', 'external');
  foreach ($items as $delta => $item) {
    $element[$delta]['item'] = array(
      '#theme' => 'link',
      '#text' => "[$item[name]]",
      '#path' => "http://www.wowhead.com/item=$entity->id",
      '#options' => array(
        'attributes' => array('rel' => "domain=$langcode", 'class' => "color-q$entity->quality"),
        'html' => TRUE,
      ),
    );
  }

  return $element;
}

/**
 * Callback of wow's hook_field_widget_info().
 *
 * The default widget to enter localized item name and description is composed
 * of two text fields.
 */
function wow_item_field_widget_callback() {
  return array(
    'label' => t('Item name and description'),
    'field types' => array('wow_item'),
  );
}

/**
 * Callback of wow's hook_field_widget_form().
 *
 * Creates two separate text fields for name and description.
 */
function wow_item_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $item = $form_state['build_info']['args'][0];

  $element += array(
    'name' => array(
      '#type' => 'value', // TODO: check 60 max_length ?
      '#default_value' => isset($items[$delta]['name']) ? $items[$delta]['name'] : $item->name,
    ),
    'description' => array(
      '#type' => 'value',
      '#default_value' => isset($items[$delta]['description']) ? $items[$delta]['description'] : $item->description,
    ),
  );

  return $element;
}
