<?php

/**
 * @file
 * Install, update and uninstall functions for the wow_item module.
 */

/**
 * Implements hook_schema().
 */
function wow_item_schema() {
  $schema['wow_item'] = array(
    'description' => 'Stores basic item data.',
    'fields' => array(
      'id' => array(
        'description' => 'Primary Key: Unique item ID.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'lastFetched' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => "Timestamp for item's last fetch.",
      ),
      'disenchantingSkillRank' => array(
        'description' => 'The skill rank needed to disenchant this item.',
        'type' => 'int',
        'size' => 'small',
      ),
      'icon' => array(
        'description' => 'The icon of this item.',
        'type' => 'varchar',
        'length' => 63,
        'not null' => TRUE,
        'default' => '',
      ),
      'stackable' => array(
        'description' => 'The stack size of this item: 1 = not stackable.',
        'type' => 'int',
        'size' => 'small',
        'not null' => TRUE,
        'default' => 1,
      ),
      'itemBind' => array(
        'description' => 'Whether the item is bound(1) or not(0).',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'buyPrice' => array(
        'description' => 'The price of this item.',
        'type' => 'int',
        'size' => 'normal',
        'unsigned' => TRUE,
      ),
      'itemClass' => array(
        'description' => 'The item class.',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
      ),
      'itemSubClass' => array(
        'description' => 'The item class.',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
      ),
      'quality' => array(
        'description' => 'The item quality.',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
      ),
      'sellPrice' => array(
        'description' => 'The price of this item.',
        'type' => 'int',
        'size' => 'normal',
        'unsigned' => TRUE,
      ),
    ),
    'primary key' => array('id'),
  );

  return $schema;
}

/**
 * Return a structured array defining the fields created by this entity.
 */
function _wow_item_installed_fields() {
  return array(
    'wow_item' => array(
      'field_name' => 'wow_item',
      'entity_types' => array('wow_item'),
      'type' => 'wow_item',
      'cardinality' => 1,
      'locked' => TRUE,
      'translatable' => TRUE,
    ),
  );
}

/**
 * Return a structured array defining the instances for this entity.
 */
function _wow_item_installed_instances() {
  $t = get_t();
  return array(
    'wow_item' => array(
      'field_name' => 'wow_item',
      'label' => $t('Item name and description'),
      'required' => TRUE,
      'bundle' => 'wow_item',
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'wow_item',
        ),
        'full' => array(
          'label' => 'hidden',
          'type' => 'wow_item',
        ),
        'teaser' => array(
          'label' => 'hidden',
          'type' => 'wow_item',
        ),
      ),
    ),
  );
}

/**
 * Implements hook_install().
 */
function wow_item_install() {
  // Collates all information on field types, widget types and related structures.
  _field_info_collate_types(TRUE);

  // Create all the fields we are adding to our entity.
  foreach (_wow_item_installed_fields() as $field) {
    field_create_field($field);
  }

  // Create all the instances for our fields.
  foreach (_wow_item_installed_instances() as $instance) {
    $instance['entity_type'] = 'wow_item';
    field_create_instance($instance);
  }
}

/**
 * Implements hook_uninstall().
 */
function wow_item_uninstall() {
  // Loop over each of the fields defined by this module and delete
  // all instances of the field, their data, and the field itself.
  foreach (array_keys(_wow_item_installed_fields()) as $field) {
    field_delete_field($field);
  }

  // Loop over any remaining field instances attached to the wow_item
  // content type (such as the wow_item field) and delete them individually.
  $instances = field_info_instances('wow_item', 'wow_item');
  foreach ($instances as $instance_name => $instance) {
    field_delete_instance($instance);
  }

  // Delete every localized version of wow_item_classes variables.
  $select = db_select('variable', 'v')
    ->fields('v', array('name'))
    ->condition('name', "wow_item_classes:%", 'LIKE')
    ->execute();

  while ($row = $select->fetch()) {
    // Lazy loaded.
    variable_del($row->name);
  }

  // Call the field_cron() to remove deleted field.
  field_cron();
}

/**
 * Added lastFetched field.
 */
function wow_item_update_7200() {
  // Added lastFetched field.
  $spec = array(
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
    'description' => "Timestamp for item's last fetch.",
  );
  db_add_field('wow_item', 'lastFetched', $spec);
}

/**
 * Dummy update that disable wow_item_field module.
 */
function wow_item_update_7201() {

  // Call the field_cron() to remove deleted field.
  field_cron();

  // Required for module installation checks.
  include_once DRUPAL_ROOT . '/includes/install.inc';

  // Only process modules that are not already enabled.
  $existing = db_query("SELECT status FROM {system} WHERE type = :type AND name = :name", array(
    ':type' => 'module',
    ':name' => 'wow_item_field'))
    ->fetchObject();
  if ($existing->status == 1) {
    // Update the database and module list to reflect the new module.
    db_update('system')
      ->fields(array('status' => 0))
      ->condition('type', 'module')
      ->condition('name', 'wow_item_field')
      ->execute();
    // Get all module data so we can find dependencies and sort.
    system_rebuild_module_data();
    // Refresh the module list to include it.
    system_list_reset();
    module_list(TRUE);
    module_implements('', FALSE, TRUE);
    _system_update_bootstrap_status();
    // Update the registry to include it.
    registry_update();
    // Refresh the schema to include it.
    drupal_get_schema(NULL, TRUE);
    // Update the theme registry to include it.
    drupal_theme_rebuild();
    // Clear entity cache.
    entity_info_cache_clear();
  }
}

/**
 * Increases size of 'stackable' column.
 */
function wow_item_update_7202() {
  db_change_field('wow_item', 'stackable', 'stackable', array(
    'description' => 'The stack size of this item: 1 = not stackable.',
    'type' => 'int',
    'size' => 'small',
    'not null' => TRUE,
    'default' => 1,
  ));
}
