<?php

/**
 * @file
 * Definition of WoW\item\Tests\ItemSaveTest.
 */

/**
 * Test wow_item_save() behavior.
 */
class ItemSaveTest extends ItemTestBase {

  public static function getInfo() {
    return array(
      'name' => 'Item save',
      'description' => 'Test item saving for arbitrary new locales.',
      'group' => 'WoW Item',
    );
  }

  protected function setUp() {
    parent::setUp('locale');
    locale_add_language('fr');
    locale_add_language('de');
    locale_add_language('en_GB', $this->randomName(), $this->randomName());
    locale_add_language('pt_PT', $this->randomName(), $this->randomName());
    locale_add_language('pt_BR', $this->randomName(), $this->randomName());
    locale_add_language('ru');
    locale_add_language('es_ES', $this->randomName(), $this->randomName());
    locale_add_language('es_MX', $this->randomName(), $this->randomName());
    locale_add_language('ko');
    locale_add_language('zh-hant');
    locale_add_language('zh-hans');
  }

  /**
   * Test item saving for arbitrary new locales.
   */
  function testItemImport() {
    $entity_info = entity_get_info('wow_item');
    $this->assertTrue(count($entity_info['translation']), t('Items are translatable.'), 'WoW Item');

    $names[77821] = array(
      'us' => array(
        'en' => "Legionnaire's Leather Chestpiece",
        'pt_BR' => "Peito d'Armas de Couro do Legionário",
        'es_MX' => "Pechera de cuero de Legionario",
      ),
      'eu' => array(
        'fr' => "Plastron de légionnaire en cuir",
        'en_GB' => "Legionnaire's Leather Chestpiece",
        'de' => "Lederbrustharnisch des Zornbringers",
        'pt_PT' => "Peito d'Armas de Couro do Legionário",
        'ru' => "Кожаный нагрудник легионера",
        'es_ES' => "Pechera de cuero de Legionario",
      ),
      'kr' => array('ko' => "용사의 가죽 가슴보호구"),
      'tw' => array('zh-hant' => "軍團士兵皮甲護軀複製品"),
      'cn' => array('zh-hans' => "军团士兵的皮甲护胸"),
    );

    foreach ($names as $iid => $regions) {
      foreach ($regions as $region => $languages) {
        foreach ($languages as $language => $name) {
          $item = wow_item_fetch($region, $iid, $language);
          $item->save();
        }
      }
    }

    foreach ($names as $iid => $regions) {
      $item = wow_item_load($iid, TRUE);
      foreach ($regions as $region => $languages) {
        foreach ($languages as $language => $name) {
          $item_by_name = wow_item_load_by_name($name);
          $this->assertEqual($name, $item->wow_item[$language][0]['name'], t('%language translation correctly handled.', array('%language' => $language)), 'WoW Item');
          $this->assertEqual($iid, $item_by_name->id, t('Loading item by name.'), 'WoW Item');
        }
      }
    }
  }

}
