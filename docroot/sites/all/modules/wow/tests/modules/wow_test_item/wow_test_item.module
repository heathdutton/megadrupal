<?php

/**
 * @file
 * Helper module for the realm resources tests.
 */

/**
 * Implements hook_entity_info_alter().
 */
function wow_test_item_entity_info_alter(&$entity_info) {
  $entity_info['wow_item']['controller class'] = 'WoWItemControllerStub';
}

class WoWItemControllerStub extends WoWItemController {

  /**
   * (non-PHPdoc)
   * @see WoWRemoteEntityControllerInterface::fetch()
   */
  public function fetch($entity, array $fields = array(), $locale = NULL, $catch = TRUE) {
    // Build the query.
    $query = array();
    $query += empty($fields) ? array() : array('fields' => implode(',', $fields));
    $query += empty($locale) ? array() : array('locale' => $locale);

    $path = empty($query['fields']) ? $entity->remotePath() : $entity->remotePath() . '.' . $query['fields'];
    $response = wow_test_http_request($entity->region, $path, $query += array('locale' => 'en_GB'), array());

    // Updates the lastFetched timestamp after a request.
    $entity->lastFetched = $response->getDate()->format('U');

    $this->process($entity, $response);
  }

  public function process($entity, $response, $catch = TRUE) {
    if ($response instanceof WoWHttpResult) {
      // Merges the entity with the data from service.
      $this->merge($entity, $response);
      // Let the controller hook the result.
      $this->processResult($entity, $response);
    }
    elseif (FALSE === $catch) {
      throw new WoWHttpException($response);
    }
    else {
      // Let the controller hook the status.
      $this->processStatus($entity, $response);
    }
  }

}
