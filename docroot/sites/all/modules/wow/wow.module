<?php

/**
 * @file
 * Wow system that lets administrators modify the workings of the guild.
 */

/**
 * WoW Entity refresh method; Let the user/code fetch a resource explicitly.
 */
define('WOW_REFRESH_EXPLICITLY', -1);

/**
 * WoW Entity refresh method; Fetch a resource at entity load hook.
 */
define('WOW_REFRESH_LOAD', 0);

/**
 * WoW Entity refresh method; Periodically fetch a resource through cron.
 */
define('WOW_REFRESH_CRON', 1);

/**
 * Implements hook_menu().
 */
function wow_menu() {
  // Administrative pages.
  $items['admin/wow'] = array(
    'title' => 'World of Warcraft',
    'description' => 'Manage World of Warcraft.',
    'page callback' => 'wow_admin',
    'access arguments' => array('access administration pages'),
    'position' => 'left',
    'file' => 'wow.admin.inc',
  );
  $items['admin/wow/dashboard'] = array(
    'title' => 'World of Warcraft',
    'description' => 'Manage World of Warcraft content.',
    'access arguments' => array('access administration pages'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'wow.admin.inc',
  );

  // Configuration pages.
  $items['admin/config/wow'] = array(
    'title' => 'World of Warcraft',
    'description' => 'General World of Warcraft related configuration.',
    'position' => 'right',
    'weight' => -15,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/config/wow/service'] = array(
    'title' => 'Service settings',
    'description' => 'Configure data services for content and the user interface. Manage private and public key to connect the API.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wow_services_overview_form'),
    'access arguments' => array('administer wow configuration'),
    'file' => 'wow.admin.inc',
    'weight' => -10,
  );
  $items['admin/config/wow/service/overview'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  $items['admin/config/wow/service/add'] = array(
    'title' => 'Add service',
    'page callback' => 'wow_services_add_screen',
    'access arguments' => array('administer wow configuration'),
    'weight' => 5,
    'type' => MENU_LOCAL_ACTION,
    'file' => 'wow.admin.inc',
  );
  $items['admin/config/wow/service/edit/%'] = array(
    'title' => 'Edit service',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wow_services_edit_form', 5),
    'access arguments' => array('administer wow configuration'),
    'file' => 'wow.admin.inc',
  );
  $items['admin/config/wow/service/delete/%'] = array(
    'title' => 'Confirm',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wow_services_delete_form', 5),
    'access arguments' => array('administer wow configuration'),
    'file' => 'wow.admin.inc',
  );

  // Service authentication
  $items['admin/config/wow/service/authentication'] = array(
    'title' => 'Authentication',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wow_services_authentication_form'),
    'access arguments' => array('administer wow configuration'),
    'weight' => 10,
    'type' => MENU_LOCAL_TASK,
    'file' => 'wow.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_help().
 */
function wow_help($path, $arg) {
  switch ($path) {
    case 'admin/wow':
      return '<p>' . t('This page is a dashboard for WoW data content, such as character races, classes, or achievements.') . '</p>' .
      '<p><strong>' . t('Services are a developers preview only and will be fully functional in a future release.') . '</strong></p>';
    case 'admin/config/wow/service':
      return '<p>' . t('This page is a dashboard for WoW services. You can Enable, Disable or Edit a service; Once enabled, the service will periodically fetch data for the specified region and update the local database with fresh information from battle.net API. Each service behaves like an entity, when you instanciates a service, it will be bundled with a language and controlled individually. This allows each language to have its own settings (the refresh rate for instance).') . '</p>' .
        '<p>' . t('A service is intimately tied up to a language, and is not necessary enabled if a language is enabled, but is disabled if a language is disabled. Thus, a service cannot exist if a language is not installed.') . '</p>' .
        '<p><strong>' . t('Services are a developers preview only and will be fully functional in a future release.') . '</strong></p>';

  }
}

/**
 * Implements hook_permission().
 */
function wow_permission() {
  return array(
    'administer wow configuration' => array(
      'title' => t('Administer World of Warcraft API configuration'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_multilingual_settings_changed().
 */
function wow_multilingual_settings_changed() {
  drupal_static_reset('language_list');
  $default = language_default('language');
  $services = wow_service_list();
  $languages = language_list();

  foreach (array_diff_key($services, $languages) as $delete) {
    include_once 'wow.admin.inc';
    $form_state['values']['langcode'] = $delete->language;
    wow_services_delete_form_submit(array(), $form_state);
  }

  foreach ($languages as $language) {
    // Enable or disable the service to reflect regional settings.
    if (isset($services[$language->language]) && $services[$language->language]->enabled != $language->enabled) {
      db_update('wow_services')
      ->fields(array('enabled' => $language->enabled))
      ->condition('language', $language->language)
      ->execute();
    }
  }

  if (isset($services[$default]) && $services[$default]->language != wow_service_default('language')) {
    unset($services[$default]->expires);
    variable_set('wow_service_default', $services[$default]);
    drupal_set_message(t('The service %name has been defaulted.', array('%name' => $services[$default]->name)));
  }
  elseif (!isset($services[$default])) {
    include_once 'wow.admin.inc';
    wow_add_service($default);

    $services = wow_service_list();
    $variables = array('%locale' => $services[$default]->name);
    drupal_set_message(t('The service %locale has been installed.', $variables));
    watchdog('wow', 'The service %locale has been installed.', $variables);
  }
}

/**
 * Returns the wow entity refresh method.
 *
 * @param string $entity_type
 *   The entity type.
 */
function wow_entity_refresh_method($entity_type) {
  return variable_get($entity_type . '_refresh_method', WOW_REFRESH_CRON);
}

/**
 * Returns the wow entity refresh threshold.
 *
 * @param string $entity_type
 *   The entity type.
 */
function wow_entity_refresh_threshold($entity_type) {
  $threshold = variable_get($entity_type . '_refresh_threshold');

  if (isset($threshold)) {
    return $threshold;
  }

  return variable_get('cron_safe_threshold', DRUPAL_CRON_DEFAULT_THRESHOLD);
}

/**
 * Perform an HTTP GET request.
 *
 * Adds automatically region settings according to website configuration.
 *
 * @param string $region
 *   The region to use for API call.
 * @param string $path
 *   Resource URL being linked to. It is the responsibility of the caller to url
 *   encode the path: http://$host/api/wow/$path.
 * @param array $query
 *   (Optional) An array of query key/value-pairs (without any URL-encoding) to
 *   append to the URL.
 *   - locale: You can specify your own locale here.
 *     It it the responsibility of the caller to pass a valid locale.
 *     Default to the global $language_content->language.
 *     @see wow_api_locale()
 * @param array $options
 *   (Optional) An array that can have one or more of the following elements:
 *   - headers: An array containing request headers to send as name/value pairs.
 *   - method: A string containing the request method. Defaults to 'GET'.
 *   - data: A string containing the request body, formatted as
 *     'param=value&param=value&...'. Defaults to NULL.
 *   - max_redirects: An integer representing how many times a redirect
 *     may be followed. Defaults to 3.
 *   - timeout: A float representing the maximum number of seconds the function
 *     call may take. The default is 30 seconds. If a timeout occurs, the error
 *     code is set to the HTTP_REQUEST_TIMEOUT constant.
 *   - context: A context resource created with stream_context_create().
 *
 *  @return WoWHttpResponse
 *    The Service response in the form of a WoWHttpResponse object.
 */
function wow_http_request($region, $path, array $query = array(), array $options = array()) {
  $scheme = 'http';
  $host = wow_api_info($region, 'host');

  $key = variable_get('wow_key');
  $public_key = variable_get('wow_public_key');

  // The date is used to sign the request, in the following format:
  // Fri, 10 Jun 2011 20:59:24 GMT, but also to timestamp the response.
  $date = new DateTime(NULL, new DateTimeZone('GMT'));
  $options['headers']['Date'] = gmdate("D, d M Y H:i:s T", $date->format('U'));

  // Sign the request if needed.
  if (!empty($public_key) && !empty($key) && extension_loaded('openssl')) {
    // Uses https scheme for authenticated request.
    $scheme = 'https';

    // Creates the data string to sign request with.
    $data = "GET\n{$options['headers']['Date']}\n/api/wow/$path\n";

    // Sign the data string using the private key.
    $signature = base64_encode(hash_hmac('sha1', $data, $key, TRUE));

    $options['headers']['Authorization'] = "BNET $public_key:$signature";
  }

  // Adds a default locale to the query if not provided.
  $query += array('locale' => wow_api_locale($region));

  // Prepares the URL by adding a locale string if not provided already.
  // The local string is API complient, e.g. if the $language_content is not
  // compatible with the API, takes the first returned.
  $url = url("$scheme://$host/api/wow/$path" , array(
    'absolute' => TRUE,
    'external' => TRUE,
    'query' => $query,
  ));

  $response = drupal_http_request($url, $options);

  if ($response->code == 200) {
    return new WoWHttpResult($response, $date);
  }
  else {
    return new WoWHttpStatus($response, $date);
  }
}

/**
 * Implements hook_field_info().
 *
 * Provides the description of the field.
 */
function wow_field_info() {
  return array(
    'wow_character_race' => array(
      'label' => t('Character race'),
      'description' => t('The character race name.'),
      'default_widget' => 'wow_character_race',
      'default_formatter' => 'wow_character_race',
    ),
    'wow_character_class' => array(
      'label' => t('Character class'),
      'description' => t('The character class name.'),
      'default_widget' => 'wow_character_class',
      'default_formatter' => 'wow_character_class',
    ),
    'wow_item' => array(
      'label' => t('Item'),
      'description' => t('The item name and description.'),
      'default_widget' => 'wow_item',
      'default_formatter' => 'wow_item',
      'no_ui' => TRUE,
    ),
  );
}

/**
 * Implements hook_field_is_empty().
 */
function wow_field_is_empty($item, $field) {
  switch ($field['type']) {

    case 'wow_item':
      $empty = empty($item['name']);
      break;

    default:
      $empty = TRUE;
      break;
  }

  return $empty;
}

/**
 * Implements hook_field_formatter_info().
 */
function wow_field_formatter_info() {
  require_once 'modules/wow_item/wow_item.module';

  return array(
    'wow_item' => wow_item_field_formatter_callback(),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function wow_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  switch ($entity_type) {
    case 'wow_item':
      $element = wow_item_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display);
      break;

    default:
      $element = array();
    break;
  }

  return $element;
}

/**
 * Implements hook_field_widget_info().
 */
function wow_field_widget_info() {
  require_once 'modules/wow_item/wow_item.module';

  return array(
    'wow_item' => wow_item_field_widget_callback(),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function wow_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  switch ($entity_type) {
    case 'wow_item':
      $element = wow_item_field_widget_form($form, $form_state, $field, $instance, $langcode, $items, $delta, $element);
      break;

    default:
      break;
  }

  return $element;
}


/**
 * Implements hook_modules_installed().
 */
function wow_modules_installed($modules) {
  foreach ($modules as $module) {
    if (module_hook($module, 'wow_data_resources')) {
      // Collates all information on field types, widget types and related structures.
      _field_info_collate_types(TRUE);

      foreach (module_invoke($module, 'wow_data_resources') as $resources) {
        foreach ($resources as $resource) {
          // Create all the fields we are adding to our entity.
          field_create_field(array(
            'field_name' => $resource['entity type'],
            'entity_types' => array($resource['entity type']),
            'type' => $resource['entity type'],
            'cardinality' => 1,
            'locked' => TRUE,
            'translatable' => TRUE,
          ));

          // Create all the instances for our fields.
          field_create_instance(array(
            'entity_type' => $resource['entity type'],
            'field_name' => $resource['entity type'],
            'label' => $resource['label'],
            'required' => TRUE,
            'bundle' => $resource['entity type'],
          ));
        }
      }
    }
  }
}

/**
 * Implements hook_modules_uninstalled().
 */
function hook_modules_uninstalled($modules) {
  foreach ($modules as $module) {
    if (module_hook($module, 'wow_data_resources')) {

      foreach (module_invoke($module, 'wow_data_resources') as $resources) {
        // Loop over each of the fields defined by this module and delete
        // all instances of the field, their data, and the field itself.
        foreach ($resources as $resource) {
          field_delete_field($resource['entity type']);
          $instances = field_info_instances($resource['entity type'], $resource['entity type']);
          // Loop over any remaining field instances attached to the entity
          // and delete them individually.
          foreach ($instances as $instance_name => $instance) {
            field_delete_instance($instance);
          }
        }
      }
    }
  }
}

/**
 * Returns an API complient locale value.
 *
 * @param string $region
 *   The region of the API.
 * @param string $language
 *   (Optionnal) The language used to determine the locale to return. Default
 *   to language_content.
 *
 * @return array
 *   An API complient locale value.
 */
function wow_api_locale($region, &$language = LANGUAGE_NONE) {
  if (LANGUAGE_NONE == $language) {
    $language = $GLOBALS['language_content']->language;
  }

  // Sometimes the language can be of the form 'en_US', or en-US, just get the
  // langcode.
  $key = drupal_substr($language, 0, 2);
  $locales = wow_api_info($region, 'locales');

  return isset($locales[$key]) ? $locales[$key] : reset($locales);
}

/**
 * The data APIs provide information that can compliment profile information to
 * provide structure, definition and context.
 *
 * @deprecated Will be deprecated in the 3.x release. Use WoWDataResourceConroller
 * instead: $controller->fetchAll() and $controller->load() methods.
 *
 * @param string $region
 *   The region to return data from.
 * @param string $path
 *   The path to the data.
 * @param string $inner
 *   The inner object to extract.
 * @param string $callback
 *   The callback function to apply on each items.
 * @param string $language
 *   (Optionnal) The language to use. Default to language_content.
 * @param bool $reset
 *   (Optionnal) Reset the character race static cache.
 *
 * @return object
 *   A data object.
 */
function wow_data($region, $path, $inner, $callback, $language = NULL, $reset = FALSE) {
  $key = str_replace('/', '_', $path);
  $locale = wow_api_locale($region, $language);
  $values = variable_get("wow_$key:$locale", array());

  if (empty($values) || $reset) {

    // Call the Data API.
    $response = wow_http_request($region, "data/$path", array('locale' => $locale));
    foreach ($response->getObject($inner) as $object) {
      $callback($values, $object);
    }

    variable_set("wow_$key:$locale", $values);
  }

  return $values;
}

/**
 * Determine whether the user has a given privilege.
 *
 * @param $region
 *   The region.
 * @param $string
 *   The permission, such as "administer nodes", being checked for.
 * @param $account
 *   (optional) The account to check, if not given use currently logged in user.
 *
 * @return
 *   Boolean TRUE if the current user has the requested permission.
 */
function wow_region_access($region, $string, $account = NULL) {
  // Calling user_acces will no longer be needed in Drupal8. http://drupal.org/node/329872
  return array_key_exists($region, wow_api_info()) && user_access($string, $account);
}

/**
 * Returns a key-value array with regions where this API is available.
 *
 * @param string $region
 *   The region of the API.
 * @param string $key
 *   The key info to get.
 */
function wow_api_info($region = NULL, $key = NULL) {
  static $infos;

  if (empty($infos)) {
    $infos['us'] = (object) array(
      'name' => 'United States',
      'locales' => array(
        'en' => 'en_US',
        'es' => 'es_MX',
        'pt' => 'pt_BR',
      ),
      'content' => 'us.media.blizzard.com',
      'host' => 'us.battle.net',
    );
    $infos['eu'] = (object) array(
      'name' => 'Europe',
      'locales' => array(
        'en' => 'en_GB',
        'es' => 'es_ES',
        'fr' => 'fr_FR',
        'ru' => 'ru_RU',
        'de' => 'de_DE',
        'pt' => 'pt_PT',
        'it' => 'it_IT',
      ),
      'content' => 'eu.media.blizzard.com',
      'host' => 'eu.battle.net',
    );
    $infos['kr'] = (object) array(
      'name' => 'South Korea',
      'locales' => array('ko' => 'ko_KR'),
      'content' => 'kr.media.blizzard.com',
      'host' => 'kr.battle.net',
    );
    $infos['tw'] = (object) array(
      'name' => 'Taiwan',
      'locales' => array('zh-hant' => 'zh_TW'),
      'content' => 'tw.media.blizzard.com',
      'host' => 'tw.battle.net',
    );
    $infos['cn'] = (object) array(
      'name' => 'China',
      'locales' => array('zh-hans' => 'zh_CN'),
      'content' => 'www.battlenet.com.cn',
      'host' => 'battlenet.com.cn',
    );
  }

  if (empty($region) && empty($key)) {
    return $infos;
  }
  elseif (empty($key)) {
    return $infos[$region];
  }
  else {
    return $infos[$region]->{$key};
  }
}

/**
 * Implements hook_cron().
 */
function wow_cron() {
  include_once 'wow.inc';

  // Long-running tasks and tasks that could time out, such as retrieving
  // remote data makes use of the queue API instead of executing tak directly.
  $queue = DrupalQueue::get('wow');
  foreach (wow_service_list() as $langcode => $service) {
//     if ($service->enabled && $batch = wow_batch_by_service($langcode, '_wow_batch_cron_service_finished')) {
//       // TODO: put this back on track.
//       $queue->createItem($batch);
//     }
  }
}

/**
 * Implements hook_cron_queue_info().
 */
function wow_cron_queue_info() {
  $queues['wow'] = array(
    'worker callback' => '_wow_batch_execute',
    'time' => 60,
  );
  return $queues;
}

/**
 * Returns the default WoW Service used on the site
 *
 * @param string $property
 *   Optional property of the service object to return
 */
function wow_service_default($property = NULL) {
  $service = variable_get('wow_service_default', (object) array('language' => 'en', 'region' => 'us', 'locale' => 'en_US', 'name' => t('English'), 'native' => 'English', 'enabled' => 1, 'weight' => 0, 'expires' => array()));
  return $property ? $service->$property : $service;
}

/**
 * Returns a list of installed services, indexed by the specified key.
 *
 * @param string $field
 *   (Optional) The field to index the list with.
 *
 * @return array
 *   An associative array, keyed on the values of $field.
 */
function wow_service_list($field = 'language') {
  $services = &drupal_static(__FUNCTION__);
  // Init service list.
  if (!isset($services)) {
    if (drupal_multilingual() || module_exists('locale')) {
      $services['language'] = db_query('SELECT * FROM {wow_services} ORDER BY weight ASC, region ASC')->fetchAllAssoc('language');
    }
    else {
      // No locale module, so use the default service only.
      $default = wow_service_default();
      $services['language'][$default->language] = $default;
    }

    // Unserialize expires column.
    foreach ($services['language'] as $langcode => $service) {
      $services['language'][$langcode]->expires = empty($service->expires) ? array() : serialize($service->expires);
    }
  }

  // Return the array indexed by the right field.
  if (!isset($services[$field])) {
    $services[$field] = array();
    foreach ($services['language'] as $service) {

      // Some values should be collected into an array.
      if (in_array($field, array('enabled', 'weight'))) {
        $services[$field][$service->$field][$service->language] = $service;
      }
      else {
        $services[$field][$service->$field] = $service;
      }
    }
  }
  return $services[$field];
}

/**
 * Implements hook_hook_info().
 */
function wow_hook_info() {
  $hooks['wow_data_resources'] = array(
    'group' => 'resources',
  );

  return $hooks;
}
/**
 * Implements hook_theme().
 */
function wow_theme() {
  return array(
    'wow_services_overview_form' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Returns wether Alliance or Horde given a value returned by the service.
 *
 * @param string $var
 *   Either alliance(0) or horde(1).
 */
function wow_side($side = NULL) {
  static $values;

  if (empty($values)) {
    $values = array(
      (object) array('slug' => 'alliance', 'name' => t('Alliance')),
      (object) array('slug' => 'horde', 'name' => t('Horde')),
    );
  }

  if (is_null($side)) {
    return $values;
  }
  else {
    return $values[$side];
  }
}
