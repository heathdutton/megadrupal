<?php

/**
 * @file
 * Definition of WoW\Tests\HttpRequestTest.
 */

class WoWHttpRequestTestCase extends WoWTestBase {

  public static function getInfo() {
    return array(
      'name' => 'WoW integration service tests',
      'description' => 'Makes a Http request against the service and test the response.',
      'group' => 'WoW',
    );
  }

  function testRequests() {
    foreach (wow_api_info() as $region => $info) {
      $this->testRequest($region);
    }
  }

  private function testRequest($region) {
    $args = array('!region' => wow_api_info($region, 'name'));

    // Test Battlegroups.
    $response = wow_http_request($region, "data/battlegroups/");
    $this->assertTrue(array_key_exists('battlegroups', $response->getArray()), t('A request (!region) to Battlegroups was made', $args), 'WoW');

    // Test a non existing resource.
    $response = wow_http_request($region, "non-existing-path");
    $this->assertEqual(404, $response->getCode(), t("A request (!region) was made to a resource that doesn't exist.", $args), 'WoW');

    // Test an invalid application key.
    variable_set('wow_key', 'wrong-key');
    variable_set('wow_public_key', 'wrong-public-key');
    $response = wow_http_request($region, "realm/status");
    $this->assertEqual(500, $response->getCode(), t("A request (!region) was made with an invalid or missing application key.", $args), 'WoW');
    $this->assertEqual('Invalid Application', $response->getReason(), t("The reason returned by the service was '!reason', expected 'Invalid Application'.", array('!reason' => $response->getReason())), 'WoW');
    variable_del('wow_key');
    variable_del('wow_public_key');
  }

}
