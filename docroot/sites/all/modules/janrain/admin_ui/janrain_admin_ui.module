<?php
/**
 * @file
 * Janrain Administrative UI submodule
 */

/**
 * Implements hook_menu().
 */
function janrain_admin_ui_menu() {
  return array(
    'admin/config/people/janrain/settings' => array(
      'type' => MENU_LOCAL_TASK,
      'title' => 'Settings',
      'page callback' => 'drupal_get_form',
      'access arguments' => array('administer site configuration'),
      'page arguments' => array('janrain_admin_ui_settings_form'),
      'weight' => -1,
    ),
  );
}

/**
 * Implements hook_menu_alter().
 *
 * Replace the default info page with the main janrain settings page.
 */
function janrain_admin_ui_menu_alter(&$menu) {
  $menu['admin/config/people/janrain/settings']['type'] = MENU_DEFAULT_LOCAL_TASK;
  $menu['admin/config/people/janrain/information']['type'] = MENU_LOCAL_TASK;
  $menu['admin/config/people/janrain']['page arguments'] = array('janrain_admin_ui_settings_form');
}

/**
 * Implements hook_system_info_alter().
 */
function janrain_admin_ui_system_info_alter(&$info, $file, $type) {
  if (isset($info['name']) && 'Janrain' == $info['name']) {
    $info['configure'] = 'admin/config/people/janrain/settings';
  }
}

/**
 * Main Janrain settings form.
 */
function janrain_admin_ui_settings_form($form, &$form_state) {
  $config = JanrainSdk::instance()->getConfig();

  // Core settings.
  $form['janrain_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Janrain Product'),
    '#weight' => 0,
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['janrain_settings']['janrain_product'] = array(
    '#type' => 'radios',
    '#title' => t('Product'),
    '#default_value' => variable_get('janrain_product', DrupalAdapter::SKU_SOCIAL_LOGIN),
    '#options' => array(
      DrupalAdapter::SKU_SOCIAL_LOGIN => t('Social Login'),
      DrupalAdapter::SKU_STANDARD => t('Social Login + Registration'),
    ),
    '#description' => t('Select the Janrain Product to be used for this integration.'),
  );

  $social_login = array(
    '#type' => 'fieldset',
    '#title' => t('Social Login Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#tree' => TRUE,
    '#states' => array(
      'visible' => array(
        ':input[name="janrain_product"]' => array(
          'value' => DrupalAdapter::SKU_SOCIAL_LOGIN,
        ),
      ),
    ),
  );

  $social_login['apiKey'] = array(
    '#type' => 'password',
    '#title' => t('API Key (Secret)'),
    '#description' => t('Enter the API Key (Secret) that appears in the Janrain Dashboard Social Login (Engage) Application Settings.'),
    // Can't use default_value because Drupal.
    '#attributes' => array('value' => $config->getItem('apiKey')),
  );

  $social_data = array(
    '#type' => 'fieldset',
    '#title' => t('Social Login + Registration Settings'),
    // '#weight' => 1,
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#tree' => TRUE,
    '#states' => array(
      'visible' => array(
        ':input[name="janrain_product"]' => array(
          array('value' => DrupalAdapter::SKU_STANDARD),
        ),
      ),
    ),
  );
  $social_data['capture.captureServer'] = array(
    '#type' => 'textfield',
    '#title' => t('Registration (Capture) Application URL'),
    '#description' => t('Enter the URL (with protocol) of your Registration (Capture) application.  For example: https://myapplication.janraincapture.com'),
    '#default_value' => $config->getItem('capture.captureServer'),
  );
  $social_data['capture.clientId'] = array(
    '#type' => 'textfield',
    '#title' => t('Client ID'),
    '#description' => t('Enter the Registration (Capture) application Client ID from the Janrain Dashboard.'),
    '#default_value' => $config->getItem('capture.clientId'),
    '#element_validate' => array(
      '_janrain_admin_ui_clean_setting',
    ),
  );
  $social_data['capture.clientSecret'] = array(
    '#type' => 'password',
    '#title' => t('Client Secret'),
    '#description' => t('Enter the Registration (Capture) application Client Secret from the Janrain Dashboard.'),
    // Can't use default_value because Drupal.
    '#attributes' => array('value' => $config->getItem('capture.clientSecret')),
    '#element_validate' => array(
      '_janrain_admin_ui_clean_setting',
    ),
  );

  // Add Settings to Form.
  $form['janrain_social_login'] = $social_login;

  // Add Settings for Standard and Enterprise.
  $form['janrain_social_data'] = $social_data;

  // Add our custom submit handler since system_settings_form makes one for us.
  $form['#submit'][] = 'janrain_admin_ui_settings_form_submit';

  return system_settings_form($form);
}

/**
 * Helper to clean ui settings and remove potential dangerous characters.
 */
function _janrain_admin_ui_clean_setting($element, &$form_state) {
  if ($element['#value'] !== check_plain($element['#value'])) {
    form_error($element, t('Invalid characters detected'));
  }
}

/**
 * Validate callback for the settings form.
 */
function janrain_admin_ui_settings_form_validate($form, &$form_state) {

  foreach ($form_state['values']['janrain_social_data'] as &$val) {
    $val = trim($val);
  }
  // Get config ready.
  $janrain = JanrainSdk::instance();
  $config = $janrain->getConfig();

  $product = $form_state['values']['janrain_product'];

  // Immediately set mode to ensure later validations against
  // _janrain_is_login_only() don't blow up.
  if (DrupalAdapter::SKU_SOCIAL_LOGIN == $product) {
    variable_set('janrain_product', DrupalAdapter::SKU_SOCIAL_LOGIN);
  }
  else {
    variable_set('janrain_product', DrupalAdapter::SKU_STANDARD);
  }

  if (_janrain_is_login_only()) {
    _janrain_admin_ui_settings_form_validate_login_only($form, $form_state);
  }
  else {
    _janrain_admin_ui_settings_form_validate_registration($form, $form_state);
  }
}

/**
 * Validate callback for login settings form submit.
 */
function _janrain_admin_ui_settings_form_validate_login_only($form, &$form_state) {
  $sdk = JanrainSdk::instance();
  $config = $sdk->getConfig();
  $sdk->addFeatureByName('EngageApi');
  unset($sdk->CaptureApi);
  unset($sdk->CaptureWidget);
  if (module_exists('janrain_widgets')) {
    $sdk->addFeatureByName('EngageWidget');
  }
  foreach ($form_state['values']['janrain_social_login'] as $k => $v) {
    $sdk->getConfig()->setItem($k, $v);
  }
  $sdk->getConfig()->setItem('token_uri', $GLOBALS['base_url'] . '/janrain/social-login/token');

  // Collect errors from user inputs.
  $config_errors = $sdk->getValidationErrors();
  if (empty($config_errors['apiKey'])) {
    // No user errors, attempt to load janrain settings.
    try {
      $sdk->EngageApi->fetchSettings($config->getItem('apiKey'));
    }
    catch (Exception $e) {
      form_set_error(
        'janrain_social_login][apiKey',
        t('Unable to fetch Janrain settings: {{message}}.  Details in watchdog.',
        array('{{message}}' => $e->getMessage())));
      $msg = sprintf("%s\n%s", filter_xss($e->getMessage()), filter_xss($e->getTraceAsString()));
      watchdog('janrain_admin_ui', nl2br($msg), array(), WATCHDOG_CRITICAL);
    }
  }
  else {
    // User errors, highlight what's bad.
    foreach ($config_errors as $setting_name => $err_codes) {
      form_set_error(
        'janrain_social_login][' . $setting_name,
        t('Setting %name failed validation. (%code)', array(
          '%name' => $setting_name,
          '%code' => implode(',', $err_codes),
        ))
      );
    }
    // Bail without validating janrain provided settings.
    return;
  }
  // Perform one last check on janrain settings.
  $config_errors = $sdk->getValidationErrors();
  foreach ($config_errors as $setting_name => $err_codes) {
    $msg = t('Setting %name failed validation. (%codes)', array(
      '%name' => check_plain($setting_name),
      '%codes' => filter_xss(implode(',', $err_codes))));
    drupal_set_message($msg, 'error');
  }
}

/**
 * Validate callback for registration settings from submit.
 */
function _janrain_admin_ui_settings_form_validate_registration($form, &$form_state) {
  $sdk = JanrainSdk::instance();
  $settings = $sdk->getConfig();
  $settings->setItem('features', array());
  $sdk->addFeatureByName('EngageApi');
  $sdk->addFeatureByName('CaptureApi');

  $version_string = sprintf('Drupal/%s Janrain/%s ', VERSION, janrain_version());
  $sdk->EngageApi->getTransport()->setUserAgent($version_string, TRUE);
  $sdk->CaptureApi->getTransport()->setUserAgent($version_string, TRUE);

  unset($sdk->EngageWidget);
  if (module_exists('janrain_widgets')) {
    $sdk->addFeatureByName('CaptureWidget');
  }

  foreach ($form_state['values']['janrain_social_data'] as $k => $v) {
    $settings->setItem($k, $v);
  }
  $settings->setItem('capture.redirectUri', $GLOBALS['base_url'] . '/janrain/social-login/token');

  // Collect errors from user inputs.
  $config_errors = $sdk->getValidationErrors();
  if (empty($config_errors['capture.captureServer'])
      && empty($config_errors['capture.clientId'])
      && empty($config_errors['capture.clientSecret'])) {
    // No user errors, try to grab janrain settings.
    try {
      $sdk->CaptureApi->settingsItems();

      // Make sure the schema is collecting email and that it's unique.
      $user_type = $sdk->CaptureApi->entityType();
      $email_attr = array_values(array_filter($user_type['attr_defs'], function (&$val) {
        return 'email' == $val['name'];
      }));
      // Does email exist in schema?
      $email_exists = !empty($email_attr[0]);
      // Does email field contain proper field constraints?
      $email_constraints = array('required', 'unique', 'email-address');
      $email_constrained = !count(array_diff($email_constraints, $email_attr[0]['constraints']));
      $email_good = $email_exists && $email_constrained;
      $user_is_admin = user_access('administer site configuration');
      if ($user_is_admin && !$email_good) {
        drupal_set_message(t('Drupal requires emails and email uniqueness. Please add the "required" and "unique" constraints to your schema.'), 'warning');
      }
    }
    catch (Exception $e) {
      // Failed call to capture, usually bad app url or invalid client/secret.
      form_set_error('janrain_social_data', t("Error talking to Janrain: {{error}}", array('{{error}}' => $e->getMessage())));
      watchdog_exception('janrain_admin_ui', $e, NULL, array(), WATCHDOG_CRITICAL);
    }
  }
  else {
    // Errors!
    foreach ($config_errors as $setting_name => $err_codes) {
      form_set_error(
        'janrain_social_data][' . $setting_name,
        t('Setting %name failed validation. (%code)', array(
          '%name' => $setting_name,
          '%code' => implode(',', $err_codes),
        ))
      );
    }
    // Bail without validating janrain settings.
    return;
  }
  // Allow show janrain errors, but don't block submit.
  $config_errors = $sdk->getValidationErrors();
  foreach ($config_errors as $setting_name => $err_codes) {
    $msg = t('Setting %name failed validation. (%codes)', array(
      '%name' => $setting_name,
      '%codes' => filter_xss(implode(',', $err_codes))));
    drupal_set_message($msg, 'error');
  }
}

/**
 * Submit callback for the settings form.
 */
function janrain_admin_ui_settings_form_submit($form, &$form_state) {
  // Validate should have populated the settings, just save them.
  JanrainSdk::instance()->getConfig()->save();
  // Need to flush the services cache and the module includes.
  drupal_flush_all_caches();
}
