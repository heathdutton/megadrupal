<?php

/**
 * @file
 * geofield_proximity_polygon.module
 * Helper functions for distance calculations involving polygons.
 */

/**
 * Returns a Geofield (multi)polygon extracted from the supplied Views result.
 *
 * @param array $geofield_result, a Views result row object.
 *
 * @return array of polygons present in the geofield_result; may be empty
 */
function geofield_proximity_polygon_extract($geofield_result) {

  if ($geofield_result['geo_type'] != 'polygon' && $geofield_result['geo_type'] != 'multipolygon') {
    // Only supporting polygons and multi-polygons.
    return array();
  }
  // This call is the only reason we require Leaflet.
  // @todo: Refactor and remove this dependency.
  $components = leaflet_process_geofield(array($geofield_result));

  $polygons = array();
  foreach ($components as $component) {
    switch ($component['type']) {

      case 'polygon':
        // $component starts with ['points']
        $polygons[] = $component;
        break;

      case 'multipolygon':
        foreach ($component['component'] as $subcomponent) {
          // $subcomponent starts with ['points']
          $polygons[] = $subcomponent;
        }
        break;

      default:
    }
  }
  return $polygons;
}

/**
 * Find the distance from a reference point to a polygon.
 *
 * @param array $ref_point, array of size 2 with 'lat' and 'lon' indices
 * @param array $polygon_array of polygons, each with a ['points'] array
 * @param float, earth radius/scale factor, defaults to radius in km
 *
 * @return float distance
 */
function geofield_proximity_polygon_distance_to_polygon($reference_point, $polygon_array, $earth_radius) {
  if (empty($reference_point) || empty($polygon_array)) {
    return FALSE;
  }
  $distance = NULL;
  gpp_debug(t('GPP: Source point (@lon, @lat) w.r.t. @count polygon(s)...', array(
    '@lon' => $reference_point['lon'],
    '@lat' => $reference_point['lat'],
    '@count' => count($polygon_array),
  )));
  foreach ($polygon_array as $p => $polygon) {
    $polygon_vertices = $polygon['points'];
    if (geofield_proximity_polygon_contains($reference_point, $polygon_vertices)) {
      gpp_debug(t('GPP: Point lies INSIDE polygon #@i (@count vertices): distance = 0.0', array(
        '@i' => $p+1, '@count' => count($polygon_vertices),
      )));
      // Found the shortest distance for sure, exit immediately.
      return 0.0;
    }
    list($v, $dist) = geofield_proximity_polygon_closest_vertex($reference_point, $polygon_vertices, $earth_radius);
    gpp_debug(t('GPP: Point lies outside polygon #@i (@count vertices). Vertex #@v is closest, distance = %dist km<br/>', array(
     '@i' => $p+1, '@count' => count($polygon_vertices), '@v' => $v+1, '%dist' => $dist,
    )));
    if (!isset($distance) || $dist < $distance) {
      $distance = $dist;
    }
  }
  return $distance;
}

/**
 * Point-in-polygon implementation for use with Geofield.
 *
 * @param array $point, array with 'lat' and 'lon' indices
 * @param array $polygon, array of points, each with 'lat' & 'lon' as above
 *
 * @return bool, TRUE if the supplied point lies within the polygon
 *
 * Adapted from http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html
 */
function geofield_proximity_polygon_contains($point, $polygon) {
  $no_vertices = count($polygon);
  $c = FALSE;
  for ($i = 0, $j = $no_vertices - 1; $i < $no_vertices; $j = $i++) {
    if ((($polygon[$i]['lat'] > $point['lat']) != ($polygon[$j]['lat'] > $point['lat']))
      && ($point['lon'] < ($polygon[$j]['lon'] - $polygon[$i]['lon']) * ($point['lat'] - $polygon[$i]['lat']) / ($polygon[$j]['lat'] - $polygon[$i]['lat']) + $polygon[$i]['lon'])) {
      $c = !$c;
    }
  }
  return $c;
}

/**
 * Returns index of and distance to closest corner of a single polygon.
 *
 * @param array $reference, containing 'lat' and 'lon' indices
 * @param array $polygon_vertices, array of points, each with 'lat' and 'lon'
 * @param float, earth radius/scale factor, defaults to radius in km
 *
 * @return array, vertex index and distance
 * @todo: use geofield unit passed into this function
 */
function geofield_proximity_polygon_closest_vertex($reference, $polygon_vertices, $earth_radius) {
  if (empty($reference) || empty($polygon_vertices)) {
    return FALSE;
  }
  $distance = NULL;
  foreach ($polygon_vertices as $v => $vertex) {
    $dist = geofield_proximity_polygon_distance_to_point($reference, $vertex, $earth_radius);
    if (!isset($distance) || $dist < $distance) {
      $distance = $dist;
      $vkey = $v;
    }
  }
  return array($vkey, $distance);
}

/**
 * Returns the distance between a reference point and another point.
 *
 * The formula used is identical to what Geofield passes to the database.
 * This Geofield formula is the "spherical law of cosines" alternative to the
 * "haversine formula". The haversine formula is numerically more stable, and
 * is preferable when you have a crappy computer or no computer at all.
 * However this is the 21st century and we have high-resolution numbers. As
 * pointed out in http://www.movable-type.co.uk/scripts/latlong.html this
 * formula produces "well-conditioned results down to distances as small as a
 * few metres on the earthâ€™s surface".
 *
 * @param array $reference, array with 'lat' and 'lon' indices
 * @param array $point, array with 'lat' and 'lon' indices
 * @param float, earth radius/scale factor, defaults to earth radius in km
 *
 * @return float, distance in the specified scale factor, defaults to km
 */
function geofield_proximity_polygon_distance_to_point($reference, $point, $earth_radius = NULL) {
  $reflat = deg2rad($reference['lat']);
  $reflon = deg2rad($reference['lon']);
  $pntlat = deg2rad($point['lat']);
  $pntlon = deg2rad($point['lon']);
  $d = cos($reflat) * cos($pntlat) * cos($pntlon - $reflon) + sin($reflat) * sin($pntlat);
  $normalised_distance = acos($d);
  return $normalised_distance * (empty($earth_radius) ? 6371.0 : $earth_radius);
}

/**
 * Returns whether the current user has switched on the debug info messages.
 *
 * @global type $user
 *
 * @return boolean
 */
function gpp_debug_flag() {
  global $user;
  $user_names = explode(',', check_plain(variable_get('gpp_debug')));
  foreach ($user_names as $user_name) {
    $user_name = drupal_strtolower(trim($user_name));
    $match = isset($user->name) ? $user_name == drupal_strtolower(trim($user->name)) : $user_name == 'anon';
    if ($match) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Special debug function: messages to selected user names only.
 *
 * @param string $message
 *   The message string to bue output as a debug message.
 * @param string $type
 *   Defaults to 'status'.
 *
 * @return array|null
 *   A multidimensional array with keys corresponding to the set message types.
 *   If there are no messages set, the function returns NULL.
 */
function gpp_debug($message, $type = 'status') {
  return gpp_debug_flag() ? drupal_set_message($message, $type) : NULL;
}

/**
 * Implements hook_menu().
 *
 * Defines new menu items.
 */
function geofield_proximity_polygon_menu() {
  $items = array();
  // Put the administrative settings under System on the Configuration page.
  $items['admin/config/system/geofield-proximity-polgyon'] = array(
    'title' => 'Geofield Proximity Polygon',
    'description' => 'Advanced administrative settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('geofield_proximity_polygon_admin_configure'),
    'access arguments' => array('administer site configuration'),
    'file' => 'geofield_proximity_polygon.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_views_api().
 */
function geofield_proximity_polygon_views_api() {
  return array(
    'api' => views_api_version(),
    'path' => drupal_get_path('module', 'geofield_proximity_polygon') . '/views',
  );
}

/**
 * Returns the internal machine name of a field used in Views.
 *
 * @param object $handler
 *
 * @return string or FALSE, if the handler is corrupt
 */
function geofield_proximity_polygon_views_field_name($handler) {
  if (!isset($handler->definition['field_name'])) {
    return FALSE;
  }
  // Use naming convention from views_plugin_query_default::add_field()
  return strtolower(substr('field_' . $handler->definition['field_name'], 0, 60));
}

/**
 * Returns the internal machine name of a result in Views.
 *
 * The result may pertain to a field, filter or sort.
 *
 * @param object $handler
 *
 * @return string or FALSE
 */
function geofield_proximity_polygon_views_result_name($handler) {
  if (empty($handler->field) || empty($handler->definition) || empty($handler->view->current_display)) {
    return FALSE;
  }
  $result_names = &drupal_static(__FUNCTION__, array());
  $unique_name = $handler->view->name . ':' .$handler->view->current_display . ':' . $handler->field;

  if (isset($result_names[$unique_name])) {
    return $result_names[$unique_name];
  }

  // Field handlers usually have their field_alias set, but filters and sorts
  // have not.
  if (isset($handler->field_alias)) {
    $result_names[$unique_name] = $handler->field_alias;
  }
  else {
    // Filter naming convention depends on whether it uses a relationship.
    // Note that we won't get here, if the result name was already set during
    // this request for field. This is what the sort relies on.
    $full_result_name = empty($handler->relationship) || empty($handler->table)
      ? 'field_data_' . $handler->definition['field_name'] . '_' . $handler->definition['field']
      : $handler->relationship . '__' . $handler->table;
    // Use naming convention from views_plugin_query_default::add_field()
    $result_names[$unique_name] = strtolower(substr($full_result_name, 0, 60));
  }
  return $result_names[$unique_name];
}