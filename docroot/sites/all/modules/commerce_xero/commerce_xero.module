<?php
/**
 * @file
 *   Commerce Xero.
 */


/**
 * Implements hook_entity_info_alter().
 *
 * @param &$info
 */
function commerce_xero_entity_info_alter(&$info) {
  $info['commerce_payment_transaction']['fieldable'] = TRUE;
}

/**
 * Implements hook_menu().
 */
function commerce_xero_menu() {
  $items = array();

  // Additional menu items defined in Views.

  $items['admin/commerce/config/xero'] = array(
    'title' => 'Xero Integration',
    'description' => 'Configure integration with Xero accounting system.',
    'access arguments' => array('configure store'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/commerce/config/xero/add'] = array(
    'title' => 'Add bank account',
    'description' => 'Add a bank account',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_xero_account_form', NULL),
    'access arguments' => array('configure store'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'commerce_xero.admin.inc',
  );

  $items['admin/commerce/config/xero/account/%commerce_xero_account'] = array(
    'title callback' => 'commerce_xero_account_title',
    'title arguments' => array(5),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_xero_account_form', 5),
    'access arguments' => array('configure store'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'commerce_xero.admin.inc',
  );

  $items['admin/commerce/config/xero/account/%commerce_xero_account/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
  );
  $items['admin/commerce/config/xero/account/%commerce_xero_account/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_xero_account_delete_form', 5),
    'access arguments' => array('configure store'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'commerce_xero.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_cron_queue_info().
 */
function commerce_xero_cron_queue_info() {
  return array(
    'commerce_xero' => array(
      'worker callback' => 'commerce_xero_queue_process',
      'time' => 60,
    ),
  );
}

/**
 * Implements hook_action_info().
 */
function commerce_xero_action_info() {
  return array(
    'commerce_xero_create_transaction_action' => array(
      'type' => 'commerce_payment_transaction',
      'label' => t('Create Xero Transaction'),
      'configurable' => FALSE,
      'triggers' => array('any'),
    ),
  );
}

/**
 * Implements hook_commerce_payment_transaction_insert().
 */
function commerce_xero_commerce_payment_transaction_insert($transaction) {
  if ($transaction->status == 'success' && !isset($transaction->field_xero_transaction['und'])) {

    $bank = commerce_xero_account_load_by_method($transaction->payment_method);

    if ($bank) {
      // Ignore anything not configured.
      $queue = DrupalQueue::get('commerce_xero');

      $data = array(
        'payment' => $transaction,
        'bank_account' => $bank,
      );

      $queue->createItem($data);
      watchdog('commerce_xero', 'Added @id to Commerce Xero processing queue.', array('@id' => $transaction->transaction_id));
    }
  }
}

/**
 * Implements hook_commerce_payment_transaction_update().
 */
function commerce_xero_commerce_payment_transaction_update($transaction) {
  if ($transaction->status == 'success' && !isset($transaction->field_xero_transaction['und'])) {

    $bank = commerce_xero_account_load_by_method($transaction->payment_method);

    if ($bank) {
      // Ignore anything not configured.
      $queue = DrupalQueue::get('commerce_xero');

      $data = array(
        'payment' => $transaction,
        'bank_account' => $bank,
      );

      $queue->createItem($data);
      watchdog('commerce_xero', 'Added @id to Commerce Xero processing queue.', array('@id' => $transaction->transaction_id));
    }
  }
}

/**
 * Implements hook_views_api().
 */
function commerce_xero_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'commerce_xero') . '/views',
  );
}

/**
 * Implements hook_xero_make_info().
 */
function commerce_xero_xero_make_info() {
  return array(
    'tracking' => array(
      'file path' => drupal_get_path('module', 'commerce_xero') . '/commerce_xero.make.inc'
    ),
  );
}

/**
 * Helper function to extract the correct array if 1 or greater elements in a
 * Xero result set.
 *
 * @param $arr
 *   The array of one or more items for a xero type i.e. pass in
 *   $result['TrackingCategories'].
 * @param $type
 *   The xero type, singular, to check in the array.
 * @return array
 *   An array of one or more items.
 */
function _commerce_xero_extract_items($arr, $type) {
  if (isset($arr[$type][0])) {
    return $arr[$type];
  }

  return $arr;
}

/**
 * Load xero bank account.
 *
 * @param $id
 *   Primary identifie for bank account.
 * @return object
 *   Bank account object or FALSE.
 */
function commerce_xero_account_load($id = 0) {
  if ($id) {
    return db_select('commerce_xero_bankaccount', 'xba')->condition('xba.id', $id)->fields('xba')->execute()->fetchObject();
  }

  return FALSE;
}

/**
 * Load xero bank account by payment method.
 *
 * @param $method
 *   Payment method name.
 * @return object
 *   Bank account object or FALSE.
 */
function commerce_xero_account_load_by_method($method) {
  if ($method) {
    return db_select('commerce_xero_bankaccount', 'xba')->condition('xba.payment_method', $method)->fields('xba')->execute()->fetchObject();
  }

  return FALSE;
}

/**
 * Commerce Xero Bank Account title callback.
 */
function commerce_xero_account_title($account) {
  return $account->payment_method . ': ' . $account->bank_account;
}

/**
 * Find possible Xero bank accounts as options.
 *
 * @return array
 *   An associative array where the key is the account code and the value is
 *   the account name.
 */
function commerce_xero_bank_account_options() {
  $xero_bank_accounts = &drupal_static(__FUNCTION__, array());

  if (!$xero_bank_accounts) {
    $xero_bank_accounts = xero_query('get', 'Accounts', FALSE, FALSE, array('Type' => 'BANK'));
  }

  if (!$xero_bank_accounts) {
    drupal_set_message(t('Could not find any Xero bank accounts.'), 'xero');
    return array();
  }

  $options = array_reduce($xero_bank_accounts['Accounts']['Account'], function(&$result, $item) {
    if (!empty($item['Code'])) {
      $result[$item['Code']] = $item['Name'];
    }
    return $result;
  });

  return $options;
}

/**
 * Find possible Xero revenue accounts as options.
 *
 * @return array
 *   An associative array where the key is the account code and the value is
 *   the account name.
 */
function commerce_xero_revenue_account_options() {
  $xero_revenue_accounts = &drupal_static(__FUNCTION__, array());

  if (!$xero_revenue_accounts) {
    $xero_revenue_accounts = xero_query('get', 'Accounts', FALSE, FALSE, array('Class' => 'REVENUE'));
  }

  $options = array_reduce($xero_revenue_accounts['Accounts']['Account'], function(&$result, $item) {
    $result[$item['Code']] = $item['Name'];
    return $result;
  });

  return $options;
}

/**
 * Find possible Xero tracking categories as options.
 */
function commerce_xero_tracking_categories_options_list() {
  $xero_tracking_categories = &drupal_static(__FUNCTION__, array());
  $ret = array('_none' => t('- None -'));

  if (!$xero_tracking_categories) {
    $xero_tracking_categories = xero_query('get', 'TrackingCategories', FALSE, FALSE);
    $xero_tracking_categories = _commerce_xero_extract_items($xero_tracking_categories['TrackingCategories'], 'TrackingCategory');
  }

  $n = 0;

  foreach ($xero_tracking_categories as $category => $options) {
    $category_name = $options['Name'];
    foreach ($options['Options']['Option'] as $option) {
      $ret[$category_name][$n] = $option['Name'];
      $n++;
    }
  }

  return $ret;
}

/**
 * Commerce Xero Create Transaction action.
 *
 * @param $payment
 *   Commerce Payment Transaction.
 */
function commerce_xero_create_transaction_action($payment) {

  $bank = commerce_xero_account_load_by_method($payment->payment_method);

  if ($bank) {
    $item = array(
      'bank_account' => $bank,
      'payment' => $payment,
    );

    commerce_xero_queue_process($item);
  }

}

/**
 * Process Queue items or a fake queue item generated by an action.
 *
 * @param $item
 *   The Drupal Queue item.
 */
function commerce_xero_queue_process($item) {

  $payment = $item['payment'];
  $payment_wrapper = entity_metadata_wrapper('commerce_payment_transaction', $item['payment']);
  $order_wrapper = entity_metadata_wrapper('commerce_order', $payment_wrapper->order->value());
  $bank_account = $item['bank_account'];

  $field_item = array(
    'guid' => '',
    'label' => '',
    'type' => $bank_account->transaction_type,
  );

  if ($bank_account->transaction_type == 'BankTransaction') {
    $guid = commerce_xero_create_banktransaction($payment_wrapper, $order_wrapper, $bank_account);
  }
  elseif ($bank_account->transaction_type == 'Payment') {
    // Find an existing invoice for an order or create a new one to attach payments to.
    $invoice = commerce_xero_get_invoice($order_wrapper, $bank_account);

    if ($invoice) {
      // Only try to post a payment to an invoice if it exists.
      $guid = commerce_xero_create_invoice_payment($payment_wrapper, $order_wrapper, $bank_account, $invoice);
    }
    else {
      $guid = 0;
    }
  }

  if ($guid) {
    // Only try to save if there is a GUID.
    $field_item['guid'] = $guid;
    $field_item['label'] = $guid;

    $payment_wrapper->field_xero_transaction = $field_item;
    $payment_wrapper->save();

    watchdog('commerce_xero', 'Successfully posted @type to Xero for payment @id', array('@type' => $bank_account->transaction_type, '@id' => $payment->transaction_id));
  }
  else {
    // @todo Error handling.
    watchdog('commerce_xero', 'Failed to post @type to Xero for payment @id', array('@type' => $bank_account->transaction_type, '@id' => $payment->transaction_id), WATCHDOG_ERROR);
  }
}

/**
 * Find an existing Invoice or create a new one.
 *
 * @param $order
 *   Entity Metadata Wrapper for the Commerce Order.
 * @param $bank
 *   A bank account to use for creating an invoice.
 * @return array
 *   A Xero API Invoices array.
 */
function commerce_xero_get_invoice($order, $bank) {
  global $base_url;
  $url = $base_url;
  // $url = 'http://example.com';

  $invoice = xero_query('get', 'Invoices', FALSE, FALSE, array('Reference' => $order->order_number->value()));

  if (isset($invoice['Invoices']['Invoice']['InvoiceNumber'])) {
    // Return existing invoice.
    return $invoice['Invoices'];
  }

  // Create Invoice structure for order line items.
  $invoice = xero_make('invoice', 'all', array('name', count($order->commerce_line_items->value())));

  // Remove some options from all.
  unset($invoice['Invoice']['InvoiceNumber']);
  unset($invoice['Invoice']['CurrencyCode']);

  $uid = $order->uid->value();
  if ($uid) {
    // Only use owner property if the uid is set.
    $invoice['Invoice']['Contact']['Name'] = $order->owner->value()->name;
    $invoice['Invoice']['Contact']['EmailAddress'] = $order->owner->value()->mail;
  }
  else {
    $invoice['Invoice']['Contact']['Name'] = $order->mail_username->value();
    $invoice['Invoice']['Contact']['EmailAddress'] = $order->mail->value();
  }

  $invoice['Invoice']['Type'] = 'ACCREC';
  $invoice['Invoice']['Date'] = format_date($order->created->raw(), 'custom', 'Y-m-d');
  // Default net payable doesn't matter because we're already posting payments?
  $invoice['Invoice']['DueDate'] = format_date($order->created->raw(), 'custom', 'Y-m-d');
  $invoice['Invoice']['LineAmountTypes'] = 'Exclusive';
  $invoice['Invoice']['Reference'] = t('Order #@num', array('@num' =>  $order->order_number->value()));
  $invoice['Invoice']['Status'] = 'AUTHORISED'; // can accept payments.
  $invoice['Invoice']['Url'] = $url . '/admin/commerce/orders/' . $order->order_id->value();

  // This must be the sub-total minus the total tax amount inclusive or exclusive.
  $subtotal = 0.0;

  // This must be the total tax regardless of inclusive or exclusive.
  $total_tax = 0.0;

  $tax_enabled = module_exists('commerce_tax');

  foreach ($order->commerce_line_items as $i => $line_item_wrapper) {
    // Find the Xero UnitAmount and TaxAmount data for each line item in the
    // Commerce order.

    // The unit price must be either be inclusive or exclusive of taxes based
    // on VAT/GST or Sales Tax.
    $unit_price = 0.0;
    $unit_price_exclusive = 0.0;
    $price_exclusive = 0.0;

    // Regardless of Inclusive or Exclusive, the tax amount must be set to the
    // total tax for a line item including the quantity.
    $line_item_tax = 0.0;
    $tax_rate_amount = 0.0;

    $price_data = $line_item_wrapper->commerce_unit_price->data->value();
    foreach ($price_data['components'] as $component) {
      // Add up the unit price inclusive and exclusive of taxes because there
      // is no Commerce method to do so without mucking about with formatting.
      // CommerceWTF.
      $unit_price += commerce_currency_amount_to_decimal($component['price']['amount'], $line_item_wrapper->commerce_unit_price->currency_code->raw());

      if ($tax_enabled && empty($component['price']['data']['tax_rate'])) {
        // Add to the unit price exclusive of tax.
        $unit_price_exclusive += commerce_currency_amount_to_decimal($component['price']['amount'], $line_item_wrapper->commerce_unit_price->currency_code->raw());
      }
      elseif ($tax_enabled && !empty($component['price']['data']['tax_rate'])) {
        // Add to the line item tax after converting and correctly rounding the
        // price component amount. commerce_tax_rate_round_amount() is bugged
        // because 15.75 -> .01575 and thus does not get rounded correctly, and
        // an off by 1 error. This means that this code will assume to round
        // half up always in order to get the correct tax. It's odd that the
        // Commerce module will produce two different results. Why is there not
        // a standard way to get the tax in a decimal format without any stupid
        // formatting? CommerceWTF.
        $tax_rate_amount = commerce_currency_convert($component['price']['amount'] * $line_item_wrapper->quantity->value(), $component['price']['currency_code'], $line_item_wrapper->commerce_unit_price->currency_code->raw());
        $rounded = commerce_round(COMMERCE_ROUND_HALF_UP, $tax_rate_amount);
        $line_item_tax += commerce_currency_amount_to_decimal($rounded, $line_item_wrapper->commerce_unit_price->currency_code->raw());

        if (in_array($component['price']['data']['tax_rate']['type'], array('gst', 'vat'))) {
          // Set the LineAmountTypes value to Inclusive tax.
          $invoice['Invoice']['LineAmountTypes'] = 'Inclusive';
        }
      }
    }

    if ($unit_price_exclusive == 0.0) {
      // If no tax, then use the full unit price.
      $unit_price_exclusive = $unit_price;
    }

    if ($invoice['Invoice']['LineAmountTypes'] == 'Exclusive') {
      // Unit price is without any tax in Exclusive tax.
      $unit_price = $unit_price_exclusive;
    }

    // Get the formatted values for unit amount, tax amount, and subtotal.
    $unit_amount = number_format($unit_price, 2, '.', '');
    $tax_amount = number_format($line_item_tax, 2, '.', '');

    // Set values.
    $invoice['Invoice']['LineItems'][$i]['LineItem']['Description'] = $line_item_wrapper->line_item_label->value();
    $invoice['Invoice']['LineItems'][$i]['LineItem']['Quantity'] = $line_item_wrapper->quantity->value();
    $invoice['Invoice']['LineItems'][$i]['LineItem']['UnitAmount'] = $unit_amount;
    $invoice['Invoice']['LineItems'][$i]['LineItem']['AccountCode'] = $bank->revenue_code;
    $invoice['Invoice']['LineItems'][$i]['LineItem']['TaxAmount'] = $tax_amount;
    unset($invoice['Invoice']['LineItems'][$i]['LineItem']['Tracking']);

    // Add to the subtotal and total tax of the invoice.
    $subtotal += $unit_price_exclusive * $line_item_wrapper->quantity->value();
    $total_tax += $line_item_tax;
  }

  $order_amount = commerce_currency_amount_to_decimal($order->commerce_order_total->amount->value(), $order->commerce_order_total->currency_code->raw());
  $order_amount = number_format($order_amount, 2, '.', '');
  $subtotal_amount = number_format($subtotal, 2, '.', '');
  $total_tax_amount = number_format($total_tax, 2, '.', '');

  $invoice['Invoice']['SubTotal'] = $subtotal_amount;
  $invoice['Invoice']['TotalTax'] = $total_tax_amount;
  $invoice['Invoice']['Total'] = $order_amount;

  // Allow other modules to modify the invoice before its posted.
  drupal_alter('commerce_xero_invoice', $invoice, $order, $bank);

  // Post new invoice to Xero. This may mean invoice payment method does two.
  $result = xero_query('post', 'Invoices', FALSE, FALSE, $invoice);

  if (isset($result['Invoices']['Invoice']['InvoiceID'])) {
    return $result['Invoices'];
  }

  return FALSE;
}

/**
 * Create a Bank Transaction on Xero for a given payment, order, and bank account.
 *
 * @param $payment
 *   Entity Metadata Wrapper for the Commerce Payment Transaction.
 * @param $order
 *   Entity Metadata Wrapper for the Commerce Order.
 * @param $bank
 *   Xero Bank Account Object.
 * @return GUID
 *   A Xero GUID or FALSE if an error occurred.
 *
 * @see commerce_reports_tax_order_save().
 */
function commerce_xero_create_banktransaction($payment, $order, $bank) {
  global $base_url;
  $url = $base_url;
  // $url = 'http://example.com';

  // This is not a community-friendly sentiment.
  setlocale(LC_MONETARY, 'en_US');

  // Format the subtotal, amount, and tax for Xero based on the currency.
  $currency = commerce_currency_load($payment->currency_code->raw());
  $amount = commerce_currency_amount_to_decimal($payment->amount->raw(), $payment->currency_code->raw());
  $total_amount = number_format($amount, 2, '.', '');

  // Create a dummy Bank Transaction
  $transaction = xero_make('BankTransaction', 'all', array('name', 1));

  $transaction['BankTransaction']['Type'] = 'RECEIVE';
  $transaction['BankTransaction']['BankAccount'] = array(
    'Code' => $bank->bank_account,
  );

  $uid = $payment->uid->value();
  if ($uid) {
    $transaction['BankTransaction']['Contact']['Name'] = $payment->user->value()->name;
    $transaction['BankTransaction']['Contact']['EmailAddress'] = $payment->user->value()->mail;
  }
  else {
    $transaction['BankTransaction']['Contact']['Name'] = $order->mail_username->value();
    $transaction['BankTransaction']['Contact']['EmailAddress'] = $order->mail->value();
  }

  $transaction['BankTransaction']['Date'] = format_date($payment->created->raw(), 'custom', 'Y-m-d');
  $transaction['BankTransaction']['Reference'] = $payment->order_id->raw();
  $transaction['BankTransaction']['LineAmountTypes'] = 'Inclusive';
  // @bug Somehow this isn't working here.
  // $transaction['BankTransaction']['Status'] = 'ACTIVE';
  $transaction['BankTransaction']['Url'] = $url . '/admin/commerce/orders/' . $payment->order_id->raw() . '/payment/' . $payment->transaction_id->raw();
  unset($transaction['BankTransaction']['CurrencyRate']);
  unset($transaction['BankTransaction']['Status']);

  // Remove optional line item parameters that will be calculate automagically
  // by Xero.
  unset($transaction['BankTransaction']['LineItems'][0]['LineItem']['TaxType']);
  unset($transaction['BankTransaction']['LineItems'][0]['LineItem']['TaxAmount']);
  unset($transaction['BankTransaction']['LineItems'][0]['LineItem']['UnitAmount']);
  unset($transaction['BankTransaction']['LineItems'][0]['LineItem']['Quantity']);

  $transaction['BankTransaction']['LineItems'][0]['LineItem']['Description'] = !$payment->remote_id->value() ? $payment->transaction_id->value() : $payment->remote_id->value();
  $transaction['BankTransaction']['LineItems'][0]['LineItem']['AccountCode'] = $bank->revenue_code;
  $transaction['BankTransaction']['LineItems'][0]['LineItem']['LineAmount'] = $total_amount;

  // Add tracking category.
  if ($bank->tracking_category) {
    $tracking_options = array(
      'options' => array(
        $bank->tracking_category => $bank->tracking_option,
      ),
    );
    $transaction['BankTransaction']['LineItems'][0]['LineItem']['Tracking'] = xero_make('tracking', 'all', $tracking_options);
  }

  // It is safe to only have the total amount because the line items are inclusive.
  $transaction['BankTransaction']['Total'] = $total_amount;

  // Allow other modules to modify the bank transaction before its psoted.
  drupal_alter('commerce_xero_banktransaction', $transaction, $order, $bank);

  $result = xero_query('post', 'BankTransactions', false, false, $transaction);

  if ($result && isset($result['BankTransactions']['BankTransaction']['BankTransactionID'])) {
    // Return the GUID on success.
    return $result['BankTransactions']['BankTransaction']['BankTransactionID'];
  }

  return FALSE;
}

/**
 * Create an invoice payment.
 *
 * @param $payment
 *   Entity Metadata Wrapper for the Commerce Payment Transaction.
 * @param $order
 *   Entity Metadata Wrapper for the Commerce Order.
 * @param $bank
 *   Xero Bank Account Object.
 * @param $invoice
 *   Xero Invoice Array - either from request or created via xero_make().
 * @return GUID
 *   A Xero GUID or FALSE if an error occurred.
 */
function commerce_xero_create_invoice_payment($payment, $order, $bank, $invoice) {
  // This is not a community-friendly sentiment.
  setlocale(LC_MONETARY, 'en_US');

  $currency = commerce_currency_load($payment->currency_code->raw());
  $amount = commerce_currency_amount_to_decimal($payment->amount->raw(), $payment->currency_code->raw());
  $amount = number_format($amount, 2, '.', '');

  // Create a new Payment array.
  $transaction = xero_make('Payment', 'all', array('id', 'code'));

  $transaction['Payment']['Invoice']['InvoiceID'] = $invoice['Invoice']['InvoiceID'];
  $transaction['Payment']['Account']['Code'] = $bank->bank_account;
  $transaction['Payment']['Date'] = format_date($payment->created->raw(), 'custom', 'Y-m-d');
  $transaction['Payment']['Amount'] = $amount;
  $transaction['Payment']['Reference'] = $payment->remote_id->value();

  // Allow other modules to modify the payment bofer its posted.
  drupal_alter('commerce_xero_payment', $payment, $order, $bank, $invoice);

  // Post payment.
  $result = xero_query('post', 'Payments', FALSE, FALSE, $transaction);

  if ($result && isset($result['Payments']['Payment']['PaymentID'])) {
    // Return the GUID on success.
    return $result['Payments']['Payment']['PaymentID'];
  }

  return FALSE;
}

