<?php

/**
 * @file
 * Adds VKontakte's "Like" button to each selected node type.
 * Adds a block with a global static value where users can "Like" the URL set by
 * admins.
 */

/**
 * Implements of hook_menu().
 */
function vklikebutton_menu() {
  $items['admin/config/vklikebutton'] = array(
    'title' => 'VK Like Button',
    'description' => 'Configure the VKontakte Like button',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vklikebutton_common_settings'),
    'access arguments' => array('administer vklikebutton'),
    'position' => 'right',
    'weight' => -20,
    'type' => MENU_NORMAL_ITEM,
    'file' => 'vklikebutton.admin.inc',
  );
  $items['admin/config/vklikebutton/appid'] = array(
    'title' => 'App ID',
    'description' => 'Enter the VKontakte app ID',
    'page callback' => 'drupal_get_form',
    'access arguments' => array('administer vklikebutton'),
    'page arguments' => array('vklikebutton_common_settings'),
    'position' => 'right',
    'weight' => -20,
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'vklikebutton.admin.inc',
  );
  $items['admin/config/vklikebutton/dynamic'] = array(
    'title' => 'Dynamic Like button',
    'description' => 'Configure the settings for the Like button as it appears on individual nodes (liking that node).',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vklikebutton_dynamic_settings'),
    'access arguments' => array('administer vklikebutton'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'vklikebutton.admin.inc',
    'weight' => 0,
  );
  $items['admin/config/vklikebutton/static'] = array(
    'title' => 'Static Like button',
    'description' => 'Configure the settings for the static Like button as it appears in the block (liking a given url). Use this to like for example your VKontakte fanpage.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vklikebutton_static_settings'),
    'access arguments' => array('administer vklikebutton block'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'vklikebutton.admin.inc',
    'weight' => 1,
  );
  return $items;
}

/**
 * Helper function returning the configuration array for the like button.
 */
function vklikebutton_conf($type = 'dynamic') {
  global $base_url;
  $prefix = 'vklikebutton';
  if ($type == 'static') {
    $prefix = 'vklikebutton_bl';
  }
  $conf = array(
    'appid' => variable_get('vklikebutton_appid', ''),
    'type' => variable_get($prefix . '_bl_type', 'full'),
    'verb' => variable_get($prefix . '_bl_verb', '0'),
    'height' => variable_get($prefix . '_bl_height', '22'),
    'width' => variable_get($prefix . '_bl_width', '350'),
    'title' => variable_get('site_name', ''),
    'description' => variable_get('site_slogan', ''),
    'text' => variable_get('site_name', ''),
    'url' => $base_url,
    'image' => '',
    'page_id' => '0',
  );
  return $conf;
}

/**
 * Implements of hook_node_view().
 */
function vklikebutton_node_view($node, $view_mode) {
  $types = variable_get('vklikebutton_node_types', array());
  $fullnodedisplay = variable_get('vklikebutton_full_node_display', 0);
  $teaserdisplay = variable_get('vklikebutton_teaser_display', 0);
  $show = (!empty($types[$node->type]) && user_access('access vklikebutton'));
  $webpage_to_like = url("node/$node->nid", array('absolute' => TRUE));
  $likebutton_weight = variable_get('vklikebutton_weight', '0');
  $conf = array(
    'appid' => variable_get('vklikebutton_appid', ''),
    'type' => variable_get('vklikebutton_type', 'full'),
    'verb' => variable_get('vklikebutton_verb', '0'),
    'height' => variable_get('vklikebutton_height', '22'),
    'width' => variable_get('vklikebutton_width', '350'),
    'title' => $node->title,
    'description' => _vklikebutton_node_description($node),
    'text' => $node->title,
    'url' => $webpage_to_like,
    'image' => _vklikebutton_node_image($node),
    'page_id' => $node->nid,
  );
  if ($show) {
    // Content area.
    if (($view_mode == 'teaser' && $teaserdisplay == 1) || ($view_mode == 'full' && $fullnodedisplay == 0)) {
      $node->content['vklikebutton_field'] = array(
        '#markup' => theme('vklikebutton', $conf),
        '#weight' => $likebutton_weight,
      );
    }
    // Link area.
    if (($view_mode == 'teaser' && $teaserdisplay == 2) || ($view_mode == 'full' && $fullnodedisplay == 2)) {
      $node->content['links']['#links']['vklikebutton_field'] = array(
        'title' => theme('vklikebutton', $conf),
        'html' => TRUE,
      );
    }
  }
}

/**
 * Implements of hook_permission().
 */
function vklikebutton_permission() {
  return array(
    'administer vklikebutton' => array(
      'title' => t('Administer VK Like button'),
      'description' => t('Perform administration tasks for VK Like button'),
    ),
    'administer vklikebutton block' => array(
      'title' => t('Administer VK Like button block'),
      'description' => t('Perform administration tasks for VK Like button block'),
    ),
    'access vklikebutton' => array(
      'title' => t('Access VK Like button'),
    ),
  );
}

/**
 * Implements of hook_block_info().
 */
function vklikebutton_block_info() {
  $fullnodedisplay = variable_get('vklikebutton_full_node_display', 0);
  $blocks['vklikebutton_static_block'] = array(
    'info' => t('Static VK Like button'),
    'cache' => DRUPAL_NO_CACHE,
  );
  if ($fullnodedisplay == 1) {
    $blocks['vklikebutton_dynamic_block'] = array(
      'info' => t('Dynamic VK Like button'),
      'cache' => DRUPAL_NO_CACHE,
    );
  }
  return $blocks;
}

/**
 * Implements of hook_block_configure().
 */
function vklikebutton_block_configure($delta = '') {
  $form = array();
  if ($delta == 'vklikebutton_static_block') {
    $form['vklikebutton_static_block'] = array(
      '#type' => 'fieldset',
      '#title' => t('Static VK Like button block'),
      '#collapsible' => FALSE,
    );
    $form['vklikebutton_static_block']['vklikebutton_static_config'] = array(
      '#markup' => t('<p>To configure the URL and the appearance of the button go to the <a href="@url">static Like button settings</a>. Make sure you set the right permissions on the <a href="@perm">permissions page</a>.</p>', array('@url' => url('admin/config/vklikebutton/static'), '@perm' => url('admin/people/permissions'))),
    );
  }
  if ($delta == 'vklikebutton_dynamic_block') {
    $form['vklikebutton_dynamic_block'] = array(
      '#type' => 'fieldset',
      '#title' => t('Dynamic VK Like button block'),
      '#collapsible' => FALSE,
    );
    $form['vklikebutton_dynamic_block']['vklikebutton_dynamic_config'] = array(
      '#markup' => t('<p>To configure the visibility and the appearance of the button go to the <a href="@url">dynamic Like button settings</a>. You can enhance the visibility settings by using the settings on this page. Make sure you set the right permissions on the <a href="@perm">permissions page</a>.</p>', array('@url' => url('admin/config/vklikebutton/dynamic'), '@perm' => url('admin/people/permissions'))),
    );
  }
  return $form;
}

/**
 * Implements of hook_block_view().
 */
function vklikebutton_block_view($delta = '') {
  global $base_url;
  $node = node_load(arg(1));
  $types = variable_get('vklikebutton_node_types', array());
  if ($node) {
    $show = (!empty($types[$node->type]) && user_access('access vklikebutton'));
  }
  else {
    $show = NULL;
  }
  $fullnodedisplay = variable_get('vklikebutton_full_node_display', 0);
  $block = array();
  switch ($delta) {
    case 'vklikebutton_dynamic_block':
      if ($show && $fullnodedisplay == 1) {
        $webpage_to_like = url("node/$node->nid", array('absolute' => TRUE));

        $conf = array(
          'appid' => variable_get('vklikebutton_appid', ''),
          'type' => variable_get('vklikebutton_type', 'full'),
          'verb' => variable_get('vklikebutton_verb', '0'),
          'height' => variable_get('vklikebutton_height', '22'),
          'width' => variable_get('vklikebutton_width', '350'),
          'title' => $node->title,
          'description' => _vklikebutton_node_description($node),
          'text' => $node->title,
          'url' => $webpage_to_like,
          'image' => _vklikebutton_node_image($node),
          'page_id' => $node->nid,
        );
        $block['content'] = theme('vklikebutton', $conf);
      }
      break;

    case 'vklikebutton_static_block':
      $conf = array(
        'appid' => variable_get('vklikebutton_appid', ''),
        'type' => variable_get('vklikebutton_bl_type', 'full'),
        'verb' => variable_get('vklikebutton_bl_verb', '0'),
        'height' => variable_get('vklikebutton_bl_height', '22'),
        'width' => variable_get('vklikebutton_bl_width', '350'),
        'title' => variable_get('vklikebutton_page_title', variable_get('site_name', '')),
        'description' => variable_get('vklikebutton_page_description', variable_get('site_slogan', '')),
        'text' => variable_get('vklikebutton_page_text', variable_get('site_name', '')),
        'url' => variable_get('vklikebutton_page_url', $base_url),
        'image' => variable_get('vklikebutton_page_image', ''),
        'page_id' => '0',
      );
      $block['content'] = theme('vklikebutton', $conf);
      break;
  }
  return $block;
}

/**
 * Implements hook_theme().
 */
function vklikebutton_theme() {
  $theme = array();
  $theme['vklikebutton'] = array(
    'variables' => vklikebutton_conf('static'),
    'file' => 'vklikebutton.theme.inc',
  );
  return $theme;
}

/**
 * Trims the text down to the specified length.
 */
function vklikebutton_trim_text($alter, $value) {
  if (drupal_strlen($value) > $alter['max_length']) {
    $value = drupal_substr($value, 0, $alter['max_length']);

    if (!empty($alter['word_boundary'])) {
      $regex = "(.*)\b.+";
      if (function_exists('mb_ereg')) {
        mb_regex_encoding('UTF-8');
        $found = mb_ereg($regex, $value, $matches);
      }
      else {
        $found = preg_match("/$regex/us", $value, $matches);
      }
      if ($found) {
        $value = $matches[1];
      }
    }
    // Remove scraps of HTML entities from the end of a strings.
    $value = rtrim(preg_replace('/(?:<(?!.+>)|&(?!.+;)).*$/us', '', $value));

    if (!empty($alter['ellipsis'])) {
      $value .= t('...');
    }
  }
  if (!empty($alter['html'])) {
    $value = _filter_htmlcorrector($value);
  }

  return $value;
}

/**
 * Returns node description taken from body for posting to the wall.
 *
 * Takes description from body summary, or from body itself if summary is empty.
 */
function _vklikebutton_node_description($node, $field = 'body') {
  $item = field_get_items('node', $node, $field);
  if ($item) {
    if (!empty($item[0]['summary'])) {
      $description = $item[0]['summary'];
    }
    elseif (!empty($item[0]['safe_value'])) {
      $description = $item[0]['safe_value'];
    }
    elseif (!empty($item[0]['value'])) {
      $description = $item[0]['value'];
    }
    else {
      $description = '';
    }
  }
  else {
    $description = '';
  }
  return vklikebutton_trim_text(array(
    'max_length' => 140,
    'word_boundary' => TRUE,
    'ellipsis' => TRUE,
    'html' => TRUE,
  ), check_plain(strip_tags($description)));
}

/**
 * Returns an image URL for posting to the wall.
 *
 * Uses first image from node body.
 * If there are no images in the body, it uses the site logo.
 */
function _vklikebutton_node_image($node, $field = 'body') {
  $item = field_get_items('node', $node, $field);
  if ($item) {
    if (!empty($item[0]['summary'])) {
      $description = $item[0]['summary'];
    }
    elseif (!empty($item[0]['safe_value'])) {
      $description = $item[0]['safe_value'];
    }
    elseif (!empty($item[0]['value'])) {
      $description = $item[0]['value'];
    }
    else {
      $description = '';
    }
  }
  else {
    $description = '';
  }

  preg_match('/<img[^>]*src="([^"]*)"[^>]*/i', $description, $matches);

  if (isset($matches[1]) && $matches[1]) {
    $url = $matches[1];
    $url = file_create_url(preg_replace('#^/#', '', $url));
  }
  else {
    $url = theme_get_setting('logo_path');
    if (!$url) {
      $url = theme_get_setting('logo');
    }
    $url = file_create_url($url);
  }
  return $url;
}
