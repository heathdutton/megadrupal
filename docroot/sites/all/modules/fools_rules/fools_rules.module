<?php
/**
 * @file
 * Module file for Fool's Rules.
 */

/**
 * Action: bundle_alter.
 * Implements hook_entity_view_alter().
 */
function fools_rules_entity_view_alter(&$build, $type) {
  // Event: bundle_alter.
  if (module_exists('rules')) {
    rules_invoke_event('fools_rules_event_bundle_alter');
  }

  // Action: bundle_alter.
  $bundle_alter = &drupal_static('fools_rules_action_bundle_alter', array());
  if (!empty($bundle_alter)) {
    foreach ($bundle_alter as $index => $values) {

      // If the user supplied $bundle_id is available,
      if ($build['#bundle'] == $bundle_alter[$index]['bundle_id']) {

        // Set the user supplied property on the bundle.
        drupal_array_set_nested_value($build,
          explode(':', $bundle_alter[$index]['property']),
          $bundle_alter[$index]['value']);
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function fools_rules_form_alter(&$form, &$form_state, $form_id) {
  // Event: form_alter.
  if (module_exists('rules')) {
    rules_invoke_event('fools_rules_event_form_alter');
  }

  // Action: form_alter.
  $form_alter = &drupal_static('fools_rules_action_form_alter', array());
  if (!empty($form_alter)) {
    foreach ($form_alter as $index => $values) {

      // If the user supplied $form_id is available,
      if ($form_id == $form_alter[$index]['form_id']) {

        // Set the user supplied property on the form.
        drupal_array_set_nested_value($form,
          explode(':', $form_alter[$index]['property']),
          $form_alter[$index]['value']);
      }
    }
  }
}

/**
 * Implements hook_page_alter().
 */
function fools_rules_page_alter(&$page) {
  // Event: page_alter.
  if (module_exists('rules')) {
    rules_invoke_event('fools_rules_event_page_alter');
  }

  // Action: page_alter.
  $page_alter = &drupal_static('fools_rules_action_page_alter', array());
  if (!empty($page_alter)) {
    foreach ($page_alter as $index => $values) {

      // Set the user supplied property on the page.
      drupal_array_set_nested_value($page,
        explode(':', $page_alter[$index]['property']),
        $page_alter[$index]['value']);
    }
  }
}

/**
 * Information about the type of user input supported.
 */
function _fools_rules_settype_info() {
  return t('Available values are any ') . l('tokenized', 'admin/help/token') .
    t(' string, an integer, and boolean true or false.');
}

/**
 * Sets the type of user input.
 */
function _fools_rules_settype($value) {
  switch (trim(drupal_strtoupper($value))) {
    case 'TRUE':
      $value = (bool) TRUE;
      break;

    case 'FALSE':
      $value = (bool) FALSE;
      break;

    case ctype_digit($value):
      $value = (int) $value;
      break;

    default:      
      // @fixme: Why is Rules not processing global tokens for us?
      $value = token_replace($value, array(), array('sanitize' => FALSE));

      // Bypass filtering if user input begins with !.
      // $value = preg_match('/^!/', $value) ? substr($value, 1) : check_plain($value);
  }
  return $value;
}

/**
 * Implements hook_permission().
 */
function fools_rules_permission() {
  return array(
    'administer fools rules' =>  array(
      'title' => t('Administer Fool\'s Rules'),
      'description' => t('Perform administration tasks for Fool\'s Rules.'),
    ),
  );
}
