<?php
/**
 * @file
 * Provides a mercado pago payment method for Drupal Commerce.
 */

/**
 * Denotes "Mercado Pago SDK for PHP" minimum version number.
 */
define('MERCADO_PAGO_PAYMENT_SDK_MINIMUM_VERSION', '0.1.8');

/**
 * Implements hook_libraries_info().
 */
function mercado_pago_payment_libraries_info() {
  return array(
    'mp_sdk' => array(
      'title' => 'Mercado Pago SDK for PHP',
      'vendor url' => 'http://developers.mercadopago.com/bibliotecas/SDKs',
      'download url' => 'https://github.com/mercadopago/sdk-php',
      'version arguments' => array(
        'file' => 'lib/mercadopago.php',
        'pattern' => "/.*const version = \"(.*)\";/",
        'lines' => 14,
      ),
      'files' => array(
        'php' => array(
          'lib/mercadopago.php',
        ),
      ),
    ),
  );
}

/**
 * Implements hook_menu().
 * 
 * URLs for Mercado pago IPN communication.
 */
function mercado_pago_payment_menu() {
  $items = array();

  $items['mercado_pago_payment_sdk/ipn'] = array(
    'page callback' => '_mercado_pago_payment_sdk_validate_ipn',
    'page arguments' => array(),
    'access callback' => TRUE,
    'file' => "mercado_pago_payment.sdk.inc",
    'type' => MENU_CALLBACK,
  );

  $items['mercado_pago_payment_sdk/ipn/%commerce_payment_method_instance'] = array(
    'page callback' => '_mercado_pago_payment_sdk_validate_ipn',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'file' => "mercado_pago_payment.sdk.inc",
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function mercado_pago_payment_commerce_payment_method_info() {
  $payment_methods = array();

  $display_title = t('!logo Mercado Pago', array('!logo' => mercado_pago_payment_icon()));

  $payment_methods['mercado_pago_payment_sdk'] = array(
    'title' => t('Mercado Pago SDK'),
    'display_title' => $display_title ,
    'description' => t('Forma de pago mediante mercado pago.'),
    'active' => TRUE,
    'terminal' => FALSE,
    'offsite' => TRUE,
    'file' => "mercado_pago_payment.sdk.inc",
  );

  return $payment_methods;
}

/**
 * Return the MercadoPago Icon.
 */
function mercado_pago_payment_icon() {
  $image = array(
    'path' => drupal_get_path('module', 'mercado_pago_payment') . '/images/logo.jpg',
    'title' => 'Mercado pago',
    'alt' => 'Mercado Pago',
    'attributes' => array(
      'class' => array('commerce-payment-mp-logo'),
    ),
  );
  return theme('image', $image);
}

/**
 * Returns an array describing the list of relations bewtween currency codes.
 */
function mercado_pago_payment_currency_codes() {
  return array(
    'ARS' => 'ARG',
    'BRL' => 'REA',
    'CLP' => 'CHI',
    'COP' => 'COL',
    'MXN' => 'MEX',
    'USD' => 'DOL',
    'VEF' => 'VEN',
  );
}

/**
 * Create a mercado pago payment transaction.
 */
function mercado_pago_payment_sdk_transaction($payment_method, $order, $charge, $name) {
  $transaction = commerce_payment_transaction_new('mercado_pago_payment_sdk', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
  $transaction->message = 'Name: @name';
  $transaction->message_variables = array('@name' => $name);

  commerce_payment_transaction_save($transaction);
}

/**
 * Retrieve the list of countries where MercadoPago is available.
 */
function mercado_pago_payment_allowed_countries() {
  $countries = &drupal_static(__FUNCTION__);
  if (isset($countries) & !empty($countries)) {
    return $countries;
  }

  if ($cache = cache_get('mercado_pago_countries')) {
    return $cache->data;
  }

  libraries_load('mp_sdk');
  $library = libraries_detect('mp_sdk');
  $response = '';
  if(version_compare($library['version'], '0.5.0') < 0){
      $response = MPRestClient::get('/sites');
  }else{
      $response = MPRestClient::get(array('uri'=>'/sites'));
  }
  if ($response['status'] != 200) {
    drupal_set_message(t('Error retrieving the countries list, please reload the page.'), 'error');
    return array();
  }
  $countries = array();
  foreach ($response['response'] as $country) {
    $countries[$country['id']] = $country['name'];
  }

  cache_set('mercado_pago_countries', $countries, 'cache', CACHE_TEMPORARY);
  return $countries;
}

/**
 * Retrieve the payment methods list for a country.
 * 
 * @param string $country_id
 *   The MercadoPago country code. For example, MPA for Argentina and MPM
 *   for Mexico. 
 */
function mercado_pago_payment_methods_list($country_id) {
  $methods = &drupal_static(__FUNCTION__);
  if (!empty($methods)) {
    return $methods;
  }

  if ($cache = cache_get('mercado_pago_method' . $country_id)) {
    return $cache->data;
  }

  libraries_load('mp_sdk');
  $library = libraries_detect('mp_sdk');
  $response = ''; 	
  if(version_compare($library['version'], '0.5.0') < 0){
      $response = MPRestClient::get("/sites/$country_id/payment_methods");
  }else{
      $response = MPRestClient::get(array(
          'uri' => "/sites/$country_id/payment_methods"
      ));
  }
  if ($response['status'] != 200) {
    drupal_set_message(t('Error retrieving the countries list, please reload the page.'), 'error');
    return array();
  }

  $response = $response['response'];
  $methods = array();
  foreach ($response as $method) {
    $methods[$method['id']] = $method['name'];

  }
  cache_set('mercado_pago_method' . $country_id, $methods, 'cache', CACHE_TEMPORARY);
  return $methods;
}

/**
 *  Remove help from iframe mode, it doesn't have sense in these case.
 */
function mercado_pago_payment_form_alter(&$form, &$form_state, $form_id) {
  // Alter the Payment checkout page form for IFRAME.
  if ($form_id == 'commerce_checkout_form_payment' && !empty($form['mp_iframe'])) {
    unset($form['help']);
  }
}
