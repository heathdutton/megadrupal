<?php

/**
 * @file TODO
 */

/**
 * Implements hook_commerce_checkout_pane_info().
 *
 * This is where we define the name of the pane, related information, and
 * the base name of all the form builder functions used to present the
 * pane.
 */
function commerce_simplenews_checkout_commerce_checkout_pane_info() {
  $panes['commerce_simplenews_checkout'] = array(
    'title' => t('Newsletter subscription'),
    'base' => 'commerce_simplenews_checkout_pane',
    // The checkout page where this should be displayed by default.
    'page' => 'checkout',
    'weight' => -5,
  );

  return $panes;
}

/**
 * Account pane: settings form callback.
 *
 * This form provides configuration information for the pane. In this case
 * we set a variable determining whether to request an additional email address.
 */
function commerce_simplenews_checkout_pane_settings_form($checkout_pane) {
  $form = array();

  $message = variable_get('commerce_simplenews_checkout_message', array('value' => '', 'format' => 'filtered_html'));

  $form['container'] = array(
    '#type' => 'container',
    '#access' => filter_access(filter_format_load($message['format'])),
  );
  $form['container']['commerce_simplenews_checkout_message'] = array(
    '#type' => 'text_format',
    '#title' => t('Simplenews subscription checkout message'),
    '#default_value' => $message['value'],
    '#format' => $message['format'],
  );

  $form['container']['commerce_simplenews_checkout_hide_subscribed'] = array(
    '#type' => 'checkbox',
    '#title' => t('Hide pane for already subscribed users entirely.'),
    '#description' => t('Hides the pane for users already subscribed to the newsletter to prevent them from un-registering (otherwise an information text is shown that the user is already subscribed).'),
    '#default_value' => variable_get('commerce_simplenews_checkout_hide_subscribed', FALSE),
  );

  $var_info = array(
    'site' => array(
      'type' => 'site',
      'label' => t('Site information'),
      'description' => t('Site-wide settings and other global information.'),
    ),
    'commerce_order' => array(
      'label' => t('Order'),
      'type' => 'commerce_order',
    ),
  );

  $form['container']['commerce_simplenews_checkout_message_help'] = RulesTokenEvaluator::help($var_info);

  return $form;
}

/**
 * TODO
 *
 * @param type $form
 * @param type $form_state
 * @param type $checkout_pane
 * @param type $order
 * @return type
 */
function commerce_simplenews_checkout_pane_checkout_form($form, &$form_state, $checkout_pane, $order) {
  $form = array();
  // Find out if the user has yet unsubscribed newsletters.
  $has_unsubscribed = FALSE;
  $visible_categories = simplenews_category_get_visible();
  if (!empty($visible_categories)) {
    foreach ($visible_categories as $newsletter) {
      if (!simplenews_user_is_subscribed($order->mail, $newsletter->tid)) {
        $has_unsubscribed = TRUE;
      }
    }
  }

  if (!$has_unsubscribed && variable_get('commerce_simplenews_checkout_hide_subscribed', FALSE)) {
    // Return nothing, the user is already subscribed to all newsletters and shell not see anything.
    return $form;
  }

  // Load the completion message.
  $message = variable_get('commerce_simplenews_checkout_message', array('value' => '', 'format' => 'filtered_html'));
  if (module_exists('i18n')) {
    // Perform translation.
    $message['value'] = commerce_i18n_string('commerce:simplenews_checkout:message', $message['value'], array('sanitize' => FALSE));
  }
  if (module_exists('token')) {
    // Perform token replacement.
    $message['value'] = token_replace($message['value'], array('commerce-order' => $order), array('clear' => TRUE));
  }
  // Apply the proper text format.
  $message['value'] = check_markup($message['value'], $message['format']);
  $form['commerce_simplenews_checkout_message'] = array(
    '#markup' => '<div class="simplenews-checkout-message">' . $message['value'] . '</div>',
  );

  // Only display the form if the user has newsletters he has not yet subscribed to.
  if ($has_unsubscribed) {
    $options = array();
    $default_value = array();
    // Get newsletters for subscription form checkboxes.
    // Newsletters with opt-in/out method 'hidden' will not be listed.
    foreach (simplenews_category_get_visible() as $newsletter) {
      $options[$newsletter->tid] = check_plain(_simplenews_newsletter_name($newsletter));
      $default_value[$newsletter->tid] = FALSE;
    }
    $subscriber = simplenews_subscriber_load_by_mail($order->mail);
    if ($subscriber) {
      $default_value = array_merge($default_value, $subscriber->tids);
    }
    $form['newsletters'] = array(
      '#type' => 'checkboxes',
      '#options' => $options,
      '#default_value' => $default_value,
      '#disabled' => !$has_unsubscribed,
    );
    $form['#submit'][] = 'commerce_simplenews_checkout_pane_checkout_form_submit';
  }
  else {
    $form['already-subscribed-message'] = array(
      '#markup' => '<div class="simplenews-checkout-already-subscribed">' . t('You are already subscribed to our newsletters.') . '</div>',
    );
  }

  return $form;
}

/**
 * TODO
 */
function commerce_simplenews_checkout_pane_checkout_form_submit($form, &$form_state, $checkout_pane, $order) {
  global $user;
  if (!empty($form_state['values'][$checkout_pane['pane_id']])) {
    $pane_values = $form_state['values'][$checkout_pane['pane_id']];
    if (!empty($pane_values['newsletters'])) {
      $account = $order;
      // We first subscribe, then unsubscribe. This prevents deletion of subscriptions
      // when unsubscribed from the
      arsort($pane_values['newsletters'], SORT_NUMERIC);
      foreach ($pane_values['newsletters'] as $tid => $checked) {
        if ($checked) {
          simplenews_subscribe_user($order->mail, $tid, FALSE, 'website');
        }
        else {
          simplenews_unsubscribe_user($order->mail, $tid, FALSE, 'website');
        }
      }
      if (isset($order->uid) && $user->uid == $order->uid) {
        drupal_set_message(t('Your newsletter subscriptions have been updated.'));
      }
      else {
        drupal_set_message(t('The newsletter subscriptions for user %account have been updated.', array('%account' => $account->name)));
      }
    }
  }
}
