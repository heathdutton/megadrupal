<?php
/**
 * Create notes by users to display in a userid specific block
 */

/**
 * Implementation of hook_init().
 */
function personal_notes_init() {
  drupal_add_css(drupal_get_path('module', 'personal_notes') .'/personal_notes.css', 'module');
}

/**
 * Implementation of hook_help().
 */
function personal_notes_help($path, $arg) {
  switch ($path) {
    case 'admin/help#personal_notes':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Personal notes consist of titles and text rendered into a block. The notes are ' . 
                 'specific to each authenticated user on the site and can be added and deleted.') . '</p>';
      $output .= '<h3>' . t('Configuring Personal Notes') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Setting Permissions') . '</dt>';
      $output .= '<dd>' . t('Users who have been given <a href="@permission">permission</a> can add and delete ' . 
                 'their own Personal Notes', 
                 array('@permission' => url('admin/people/permissions') . '#module-personal_notes')) . '</dd>';
      $output .= '<dt>' . t('Creating Links to Add and Delete Personal Notes') . '</dt>';
      $output .= '<dd>' . t('Permitted users add and delete their own Personal Notes by going to the ' .
                 'links <a href="@add">Add a Personal Note</a> and <a href="@delete">Delete Personal Notes</a> ' . 
                 'respectively. We recommend adding these links to your site&apos;s <a href="@mainmenu">main   ' .
                 'menu</a>, but of course they can go anywhere you want.', 
                 array(
                   '@add'      => url('personal_notes/add'),
                   '@delete'   => url('personal_notes/delete'),
                   '@mainmenu' => url('admin/structure/menu/manage/main-menu/add'),
                 )) . '</dd>';
      $output .= '<dt>' . t('Displaying Personal Notes in a Block') . '</dt>';
      $output .= '<dd>' . t('In order for users to see their Personal Notes you&apos;ll have to ' . 
                 '<a href="@buildblocks">assign the Personal Notes block to a region on your site</a>.', 
                 array('@buildblocks' => url('admin/structure/block'))) . '</dd>';
      $output .= '<dt>' . t('Setting The Number of Notes in a Block') . '</dt>';
      $output .= '<dd>' . t('You may set the number of Personal Notes that are displayed in the block ' . 
                 'by visiting the <a href="@configureblock">Personal Notes block configuration page</a>.', 
                 array('@configureblock' => 
                   url('admin/structure/block/manage/personal_notes/personal_notes/configure'))) . '</dd>';
      $output .= '</dl>';
      return $output;
  }
}

/**
 * Implementation of hook_perm().
 */
function personal_notes_permission() {
  return array(
    'add a note' => array(
      'title' => t('Add a Note'),
      'description' => t('User is able to create personal notes'),
    ),
    'delete a note' => array(
      'title' => t('Delete a Note'),
      'description' => t('User is allowed to delete their own personal notes'),
    ),
  );
}

/**
 * Implementation of hook_block_info()
 */
function personal_notes_block_info() {

  $blocks['personal_notes'] = array(
    'info' => t('Personal Notes'),
  );

  return $blocks;
}

/**
 * Implementation of hook_block_configure()
 */
function personal_notes_block_configure($delta = '') {
  $form = array();
  $form['personal_notes_maxdisp'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum number of notes to display'),
    '#default_value' => variable_get('personal_notes_maxdisp', 7),
    '#size' => 2,
    '#maxlength' => 2,
    '#description' => t("The maximum number of notes to display in the block."),
    '#required' => TRUE,
  );
  return $form;
}

/**
 * Implementation of hook_block_save()
 */
function personal_notes_block_save($delta = '', $edit = array()) {
  variable_set('personal_notes_maxdisp', $edit['personal_notes_maxdisp']);
}

/**
 * Implementation of hook_block_view()
 */
function personal_notes_block_view($delta) {
  global $user;
  $block['subject'] = t('Notes for User %name', array('%name' => $user->name));
  $block['content'] = _personal_notes_fetch_content();
  return $block;
}

/**
 * Implementation of hook_menu()
 */
function personal_notes_menu() {
  $items = array();

  // create an entry to add a personal note
  $items['personal_notes/add'] = array(
    'title' => "Add a Personal Note",
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('personal_notes_note_add_note'),
    'access arguments' => array('add a note'),
  );

  // create an entry to delete a personal note
  $items['personal_notes/delete'] = array(
    'title' => "Delete Personal Note(s)",
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('personal_notes_note_delete_note'),
    'access arguments' => array('delete a note'),
  );
  
  return $items;
}

/**
 * Implementation of hook_theme()
 */
function personal_notes_theme($existing, $type, $theme, $path) {
  if($type == 'module')
  {
    return array(
      'personal_notes' => array(
        'variables' => array('title'=>NULL, 'note'=>NULL),
        'template' => 'personal_notes'
      ),
    );
  }
  return array(); //will raise fatal error if void
}


/**
 * Add a Personal Note form.
 * The form for adding a personal note.
 *
 * @return 
 *  Form HTML.
 */
function personal_notes_note_add_note() {
  // Create a fieldset for the note:
  $form['note'] = array(
    '#type' => 'fieldset',
    '#title' => t('Compose the Note'),
  );
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Note Title'),
    '#size' => 60,
    '#maxlength' => 24,
    '#description' => t('put your note title here (up to 24 chars)'),
  );
  $form['body'] = array(
    '#type' => 'textarea',
    '#title' => t('Message'),
    '#cols' => 50,
    '#rows' => 5,
    '#description' => t('The body of the note.'),
  );   
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save My Note'),
  );
  return $form;
}

/**
 * Form submission handler, which functions like a hook.
 */

function personal_notes_note_add_note_submit($form, $form_state) {
  $title = $form_state['values']['title'];
  $note  = $form_state['values']['body'];
  $timestamp = REQUEST_TIME; 
  global $user;
  
  db_insert('personal_notes_notes')
    ->fields(array(
      'uid' => $user->uid,
      'title' => $title,
      'note' => $note,
      'created' => $timestamp,
    ))
  ->execute();
  
  drupal_set_message(t('Your new note %title has been created.', array('%title' => $title)));
  drupal_goto('personal_notes/add');
}

/**
 * Delete a Personal Note form.
 * The form for deleting a personal note.
 *
 * @return 
 *  Form HTML.
 */
function personal_notes_note_delete_note() {
  // Create a fieldset for the note:
  $form['note'] = array(
    '#type' => 'fieldset',
    '#title' => t('Select the notes to be deleted'),
  );

  /*  loop through the user's notes to build checkboxes  */
  $results = _personal_notes_fetch_content_db();
  $checkboxes = array();
  foreach ($results as $fields) {
    $checkboxes[$fields->notenum] = $fields->title;
  }

  $form["delete"] = array(
    '#type' => 'checkboxes',
    '#options' => $checkboxes,
  );
      
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Delete Selected Notes'),
  );
  return $form;
}

/**
 * Form submission handler, which functions like a hook.
 */

function personal_notes_note_delete_note_submit($form, $form_state) {  
  global $user;
  $msgbfr = '';
  foreach ($form_state['values']['delete'] as $key => $element) {
    variable_set($key, $element); // Serialized as necessary, so it will store an array  
    if ($element) {
      $results = _personal_notes_fetch_content_db();
      foreach ($results as $fields) {
        if ($fields->notenum == $element) { break; }
      }
      $msgbfr .= '<br />' . t('deleting note %title by user %user', 
                 array('%title' => $fields->title, '%user' => $user->uid));
      $query = "DELETE FROM {personal_notes_notes} WHERE notenum=:notenum";
      db_query($query, array(':notenum' => $fields->notenum));
    }
  }
  drupal_set_message($msgbfr);
  drupal_goto('personal_notes/delete');
}

/**
 * Retrieve the notes made by the requesting user.
 *
 * @param
 * $limit - max number of notes to retrieve
 *
 * @return 
 * Result of DB query.
 */
function _personal_notes_fetch_content_db($limit=99) {
  global $user;
  $query = db_select('personal_notes_notes', 'n')
    ->fields('n', array('title', 'note', 'notenum'))
    ->condition('uid', $user->uid,'=')
    ->orderBy('notenum', 'ASC');
  $results = $query->execute();
  return $results;
}

/**
 * Retrieve information from the personal_notes_notes table.
 * 
 * This retrieves the notes made by the requesting 
 * user and then displays them on a block.
 *
 * @return 
 * String containing the notes.
 */
function _personal_notes_fetch_content() {
  $limitnum = variable_get("personal_notes_maxdisp", 13);
  $results = _personal_notes_fetch_content_db($limitnum);
  $out = '';
  foreach ($results as $fields) {
    if(--$limitnum >= 0) {
      $out .= theme('personal_notes', 
                      array (
                        'title' => check_plain($fields->title), 
                        'note'  => check_plain($fields->note)
                      )
                    );
    }
  }
  return $out;
}
