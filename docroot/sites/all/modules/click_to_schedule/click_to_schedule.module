<?php

/**
 * @file
 * Allows appointments to be scheduled through the site using TimeTrade.
 */

/**
 * The path to this module.
 */
define('CLICK_TO_SCHEDULE_PATH', drupal_get_path('module', 'click_to_schedule'));

/**
 * The URL of the TimeTrade server.
 */
define('CLICK_TO_SCHEDULE_TIMETRADE_SERVER', 'https://my.timedriver.com/');

/**
 * The type of software client attempting to access TimeTrade is a browser.
 */
define('CLICK_TO_SCHEDULE_WEB_BROWSER_CLIENT', 0);

/**
 * The error code for missing credentials or expired session.
 */
define('CLICK_TO_SCHEDULE_MISSING_CREDENTIALS', 4901);

/**
 * Implements hook_help().
 */
function click_to_schedule_help($path, $arg) {
  switch ($path) {
    case 'admin/help#click_to_schedule':
      $output = '';
      $output .= '<p>' . t("Click to Schedule by TimeTrade allows visitors to your web site to schedule appointments for phone calls or meetings with your sales or service team. You control which time slots are offered and the duration. Appointments are distributed in a round robin manner across your team. Includes two-way sync with team member's personal calendars to prevent double booking.") . '</p>';
      $output .= '<h3>' . t('Installation and Use') . '</h3>';
      $output .= '<ul>';
      $output .= '<li>' . t('Download the module code to the sites/all/modules directory within your Drupal installation.') . '</li>';
      $output .= '<li>' . t('Enable the module at <a href="@modules">the module listing page</a>.', array('@modules' => url('admin/modules'))) . '</li>';
      $output .= '<li>' . t('Go to the Click to Schedule <a href="@config">module configuration page</a> and sign in to an existing TimeTrade account or click the Create New Account to create a free TimeTrade account.', array('@config' => url('admin/config/user-interface/click-to-schedule'))) . '</li>';
      $output .= '<li>' . t('Go to the <a href="@blocks">block configuration page</a> to create a block containing a button that, when clicked, will show the site visitor a calendar for scheduling appointments.', array('@blocks' => url('admin/structure/block'))) . '</li>';
      $output .= '</ul>';

      return $output;
  }
}

/**
 * Implements hook_permission().
 */
function click_to_schedule_permission() {
  return array(
    'administer click to schedule' => array(
      'title' => t('Administer Click to Schedule by TimeTrade'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function click_to_schedule_menu() {
  $items = array();

  $items['admin/config/user-interface/click-to-schedule'] = array(
    'title' => 'Click to Schedule by TimeTrade',
    'description' => 'Click to Schedule module settings',
    'page callback' => 'click_to_schedule_admin',
    'access arguments' => array('administer click to schedule'),
    'file' => 'click_to_schedule.admin.inc',
  );
  $items['admin/config/user-interface/click-to-schedule/retry-login'] = array(
    'title' => 'Click to Schedule by TimeTrade',
    'description' => 'TimeTrade login failed',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('click_to_schedule_connect_retry_login'),
    'access callback' => 'click_to_schedule_can_retry_login',
    'file' => 'click_to_schedule.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/user-interface/click-to-schedule/create-free-account'] = array(
    'title' => 'Click to Schedule by TimeTrade',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('click_to_schedule_create_free_account'),
    'access callback' => 'click_to_schedule_can_create_new_account',
    'file' => 'click_to_schedule.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/user-interface/click-to-schedule/log-out'] = array(
    'title' => 'Click to Schedule by TimeTrade',
    'description' => 'Log out of TimeTrade',
    'page callback' => 'click_to_schedule_log_out',
    'access callback' => 'click_to_schedule_can_log_out',
    'file' => 'click_to_schedule.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/structure/block/add-click-to-schedule-block'] = array(
    'title' => 'Add Click to Schedule block',
    'description' => 'Add a new Click to Schedule by TimeTrade block.',
    'access arguments' => array('administer blocks'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('click_to_schedule_add_block_form'),
    'type' => MENU_LOCAL_ACTION,
  );
  $items['admin/structure/block/delete-click-to-schedule-block'] = array(
    'title' => 'Delete Click to Schedule block',
    'access arguments' => array('administer blocks'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('click_to_schedule_block_delete'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Access callback: Determines whether a new TimeTrade account may be created.
 *
 * Path: admin/config/user-interface/click-to-schedule/create-free-account
 *
 * @see click_to_schedule_menu()
 */
function click_to_schedule_can_create_new_account() {
  if ((!variable_get('click_to_schedule_email', '') || !variable_get('click_to_schedule_password', '')) && user_access('administer click to schedule')) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Access callback: Determines whether the retry-login page can be acccessed.
 *
 * Path: admin/config/user-interface/click-to-schedule/retry-login
 *
 * @see click_to_schedule_menu()
 */
function click_to_schedule_can_retry_login() {
  if ((!variable_get('click_to_schedule_email', '') || !variable_get('click_to_schedule_password', '')) && user_access('administer click to schedule')) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Access callback: Determines whether user can log out of TimeTrade.
 *
 * Path: admin/config/user-interface/click-to-schedule/retry-login
 *
 * @see click_to_schedule_menu()
 */
function click_to_schedule_can_log_out() {
  if (variable_get('click_to_schedule_email', '') && variable_get('click_to_schedule_password', '') && user_access('administer click to schedule')) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Implements hook_block_info().
 */
function click_to_schedule_block_info() {
  $blocks = array();
  $deltas = variable_get('click_to_schedule_block_ids', array());
  foreach ($deltas as $delta) {
    $blocks[$delta]['info'] = _click_to_schedule_block_format_title(click_to_schedule_get_config($delta));
  }

  return $blocks;
}

/**
 * Creates a title for each block for display on block admin page.
 *
 * @param array $config
 *   An array containing the configuration values from the block creation form.
 *
 * @return string
 *   An block title for use on the block admin page.
 */
function _click_to_schedule_block_format_title($config) {
  // If an administrative title is specified, use it.
  if (!empty($config['admin_title'])) {
    return check_plain($config['admin_title']);
  }

  return t('Click to Schedule button @delta', array('@delta' => $config['delta']));
}

/**
 * Implements hook_block_configure().
 */
function click_to_schedule_block_configure($delta = '') {
  // Create a pseudo form state.
  $form_state = array('values' => click_to_schedule_get_config($delta));
  return click_to_schedule_block_configure_form(array(), $form_state);
}

/**
 * Form constructor for editing settings specific to click-to-schedule blocks.
 *
 * @ingroup forms
 */
function click_to_schedule_block_configure_form($form, &$form_state) {
  $path = libraries_get_path('fancybox');
  $fancybox_files = click_to_schedule_set_files();
  $popup_url = click_to_schedule_get_appt_router_link();
  $subscription_type = click_to_schedule_is_entitled('AppointmentRouter') ? 'paid' : 'free';

  $config = array();
  // Get the config from the form state.
  if (!empty($form_state['values'])) {
    $config = $form_state['values'];
  }
  // Merge in the default configuration.
  $config += click_to_schedule_get_config();

  if ($config['href']) {
    $default_href = $config['href'];
  }
  else {
    $default_href = $popup_url;
  }

  $settings = array(
    'click_to_schedule_path' => CLICK_TO_SCHEDULE_PATH,
    'appt_link' => $popup_url,
    'subscription_type' => $subscription_type,
  );

  $form['#attached']['js'] = array(
    $path . '/' . $fancybox_files['js'],
    CLICK_TO_SCHEDULE_PATH . '/click_to_schedule-button-config.js',
    CLICK_TO_SCHEDULE_PATH . '/click_to_schedule.js',
  );

  $form['#attached']['js'][] = array(
    'data' => array('click_to_schedule' => $settings),
    'type' => 'setting',
  );

  $form['#attached']['css'] = array(
    $path . '/' . $fancybox_files['css'],
    CLICK_TO_SCHEDULE_PATH . '/click_to_schedule.css',
  );

  // JavaScript and CSS for a feedback tab on the block configuration page.
  $form['#attached']['js'][] = array(
    'data' => '//asset0.zendesk.com/external/zenbox/v2.4/zenbox.js',
    'type' => 'external',
  );

  $form['#attached']['css'][] = array(
    'data' => '//asset0.zendesk.com/external/zenbox/v2.4/zenbox.css',
    'type' => 'external',
  );

  $form['admin_title'] = array(
    '#type' => 'textfield',
    '#default_value' => $config['admin_title'],
    '#title' => t('Administrative title'),
    '#description' => t('This title will be used to identify this block on the block administration page. If blank, a default title will be used.'),
  );

  $form['button_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Button settings'),
  );

  $form['button_settings']['zendesk-link'] = array(
    '#markup' => '<div id="zenbox-link" onClick="Zenbox.show(); return false;">' . t('Leave feedback') . '</div>',
  );

  $form['button_settings']['basic'] = array(
    '#type' => 'fieldset',
  );

  $form['button_settings']['basic']['preview'] = array(
    '#title' => t('Preview'),
    '#prefix' => '<div id="button-preview-container"><div id="button-preview">',
    '#suffix' => '</div><p>' . t('Click button to preview') . '</p></div>',
  );

  $button_img = '/' . CLICK_TO_SCHEDULE_PATH . '/buttons/button-' . $config['button_color'] . '-' . $config['button_size'] . '.png';

  if ($subscription_type == 'paid' && $config['button_action'] && $config['landing_page_url']) {
    $classes = array('timetrade-button');
    $popup = 0;
    $href = $config['landing_page_url'];
    if ($config['link_location'] == 'external') {
      // See if protocol is already in url string or if we have to add it.
      preg_match('#^(?:http|https)://#', $config['landing_page_url'], $matches);
      if (!count($matches)) {
        $href = 'http://' . $config['landing_page_url'];
      }
    }
  }
  else {
    $href = $default_href;
    $popup = 1;
    $classes = array('timetrade-button', 'iframe', 'appt-popup');
  }

  $form['button_settings']['basic']['href'] = array(
    '#id' => 'href',
    '#type' => 'hidden',
    '#default_value' => $href,
  );

  $form['button_settings']['basic']['popup'] = array(
    '#id' => 'popup',
    '#type' => 'hidden',
    '#default_value' => $popup,
  );

  $button = array(
    '#theme' => 'link',
    '#text' => theme('image', array('path' => $button_img, 'alt' => t('Make an Online Appointment'))),
    '#path' => $href,
    '#options' => array('html' => TRUE, 'attributes' => array('class' => $classes)),
    '#suffix' => '<noscript>'
    . l(theme('image', array('path' => $button_img, 'alt' => t('Make an Online Appointment'))), $href, array('html' => TRUE))
    . l(t('Online appointment scheduling by Timetrade'), 'http://www.timetrade.com')
    . '</noscript>',
  );

  $form['button_settings']['basic']['preview']['#markup'] = drupal_render($button);

  $form['button_settings']['basic']['button_size'] = array(
    '#type' => 'select',
    '#title' => t('Size'),
    '#default_value' => $config['button_size'],
    '#options' => array(
      'long-small' => t('Text on one line: Small'),
      'long-medium' => t('Text on one line: Medium'),
      'long-large' => t('Text on one line: Large'),
      'short-small' => t('Text on two lines: Small'),
      'short-medium' => t('Text on two lines: Medium'),
      'short-large' => t('Text on two lines: Large'),
    ),
  );

  $form['button_settings']['basic']['button_color'] = array(
    '#type' => 'select',
    '#title' => t('Color'),
    '#default_value' => $config['button_color'],
    '#options' => drupal_map_assoc(array(
      'c3b48c',
      'c88a39',
      'f8891b',
      'f1d644',
      '9ce22d',
      '408cff',
      'a6bdd0',
      'a5a5a5',
    )),
    '#suffix' => '<div id="color-picker"></div>',
  );


  // The following settings are allowed if the user has a paid TT account.
  $form['button_settings']['advanced'] = array(
    '#type' => 'fieldset',
    '#title' => t('Advanced'),
    '#description' => t('Upgrade your subscription to access these features.') . ' ' . l(t('Learn more.'),
      'http://player.vimeo.com/video/14251501?title=0&amp;amp;byline=0&amp;amp;portrait=0&amp;amp;color=ffffff',
      array(
        'attributes' => array(
          'target' => '_blank',
          'class' => array('learn-more', 'iframe', 'video'),
        ),
      )),
    '#disabled' => ($subscription_type == 'paid') ? FALSE :TRUE,
  );
  if ($subscription_type == 'paid') {
    $form['button_settings']['advanced']['#description'] = '';
  }

  $form['button_settings']['advanced']['button_action'] = array(
    '#type' => 'checkbox',
    '#title' => t('Redirect to Another Page'),
    '#default_value' => $config['button_action'],
    '#disabled' =>  ($subscription_type == 'paid') ? FALSE :TRUE,
  );
  $form['button_settings']['advanced']['link_location'] = array(
    '#type' => 'radios',
    '#default_value' => $config['link_location'],
    '#options' => array('internal' => t('Page on my Drupal site'), 'external' => t('Web link')),
  );
  $form['button_settings']['advanced']['landing_page_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Page URL'),
    '#default_value' => $config['landing_page_url'],
  );

  $form['button_settings']['tt_login_info'] = array(
    '#type' => 'fieldset',
  );

  $form['button_settings']['tt_login_info']['tt_login_copy'] = array(
    '#markup' => l(t('Log in'), 'http://www.timetrade.com/login', array('attributes' => array('target' => '_blank'))) . ' ' . t('to your TimeTrade account to')
    . '<ul><li>' . t('Manage your availability') . '</li><li>' . t('Distribute appointments across multiple users.') . ' ('
    . l(t('Learn more'),
        'http://player.vimeo.com/video/33302347?title=0&amp;amp;byline=0&amp;amp;portrait=0&amp;amp;color=ffffff',
        array(
          'attributes' => array(
            'target' => '_blank',
            'class' => array('learn-more', 'iframe', 'video-wide'),
          ),
        ))
    . ')</li><li>' . t('Upgrade your subscription.') . '</li></ul>',
  );

  return $form;
}


/**
 * Implements hook_block_view().
 *
 * Shows a block with a button based on the button configuration. Clicking the
 * button will open a TimeTrade scheduling calendar widget.
 */
function click_to_schedule_block_view($delta = '') {
  drupal_add_css(CLICK_TO_SCHEDULE_PATH . '/click_to_schedule.css');
  drupal_add_js(CLICK_TO_SCHEDULE_PATH . '/click_to_schedule.js');

  $path = libraries_get_path('fancybox');
  $files = variable_get('click_to_schedule_fancybox_files', array());
  drupal_add_js($path . '/' . $files['js']);
  drupal_add_css($path . '/' . $files['css']);

  $block = array();
  $config = click_to_schedule_get_config($delta);

  // Create button.
  $button_img = '/' . CLICK_TO_SCHEDULE_PATH . '/buttons/button-' . $config['button_color'] . '-' . $config['button_size'] . '.png';

  $classes = array('timetrade-button');
  if ($config['popup']) {
    $classes = array('timetrade-button', 'iframe', 'appt-popup');
  }

  $block['content'] = array(
    '#theme' => 'link',
    '#text' => theme('image', array('path' => $button_img, 'alt' => t('Make an Online Appointment'))),
    '#path' => $config['href'],
    '#options' => array('html' => TRUE, 'attributes' => array('class' => $classes)),
    '#suffix' => '<noscript>'
    . l(theme('image', array('path' => $button_img, 'alt' => t('Make an Online Appointment'))), $config['href'], array('html' => TRUE))
    . l(t('Online appointment scheduling by Timetrade'), 'http://www.timetrade.com')
    . '</noscript>',
  );

  return $block;
}

/**
 * Page callback: Form constructor for the click-to-schedule block add form.
 *
 * Path: admin/structure/block/add-click-to-schedule-block
 *
 * @see click_to_schedule_add_block_form_submit()
 * @see click_to_schedule_menu()
 * @ingroup forms
 */
function click_to_schedule_add_block_form($form, &$form_state) {
  module_load_include('inc', 'block', 'block.admin');
  return block_admin_configure($form, $form_state, 'click_to_schedule', NULL);
}

/**
 * Implements hook_form_alter().
 *
 * Removes block title from click-to-schedule block form.
 */
function click_to_schedule_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'click_to_schedule_add_block_form' || ($form_id == 'block_admin_configure' && $form_state['build_info']['args'][0] == 'click_to_schedule')) {
    $form['settings']['title']['#type'] = 'hidden';
  }
}

/**
 * Form submission handler for click_to_schedule_add_block_form().
 */
function click_to_schedule_add_block_form_submit($form, &$form_state) {
  // Determine the delta of the new block.
  $block_ids = variable_get('click_to_schedule_block_ids', array());
  $delta = empty($block_ids) ? 1 : max($block_ids) + 1;

  // Save the new array of block IDs.
  $block_ids[] = $delta;
  variable_set('click_to_schedule_block_ids', $block_ids);

  // Save the block configuration.
  click_to_schedule_block_save($delta, $form_state['values']);

  // Run the normal new block submission (borrowed from
  // block_add_block_form_submit()).
  $query = db_insert('block')->fields(array(
    'visibility',
    'pages',
    'custom',
    'title',
    'module',
    'theme',
    'region',
    'status',
    'weight',
    'delta',
    'cache',
  ));
  foreach (list_themes() as $key => $theme) {
    if ($theme->status) {
      $region = !empty($form_state['values']['regions'][$theme->name]) ? $form_state['values']['regions'][$theme->name] : BLOCK_REGION_NONE;
      $query->values(array(
        'visibility' => (int) $form_state['values']['visibility'],
        'pages' => trim($form_state['values']['pages']),
        'custom' => (int) $form_state['values']['custom'],
        'title' => '<none>',
        'module' => $form_state['values']['module'],
        'theme' => $theme->name,
        'region' => ($region == BLOCK_REGION_NONE ? '' : $region),
        'status' => 0,
        'status' => (int) ($region != BLOCK_REGION_NONE),
        'weight' => 0,
        'delta' => $delta,
        'cache' => DRUPAL_NO_CACHE,
      ));
    }
  }
  $query->execute();

  $query = db_insert('block_role')->fields(array('rid', 'module', 'delta'));
  foreach (array_filter($form_state['values']['roles']) as $rid) {
    $query->values(array(
      'rid' => $rid,
      'module' => $form_state['values']['module'],
      'delta' => $delta,
    ));
  }
  $query->execute();

  drupal_set_message(t('The block has been created.'));
  cache_clear_all();
  $form_state['redirect'] = 'admin/structure/block';
}


/**
 * Implements hook_block_save().
 */
function click_to_schedule_block_save($delta = '', $edit = array()) {
  if (!empty($delta)) {
    variable_set("click_to_schedule_block_{$delta}_admin_title", $edit['admin_title']);
    variable_set("click_to_schedule_block_{$delta}_button_size", $edit['button_size']);
    variable_set("click_to_schedule_block_{$delta}_button_color", $edit['button_color']);
    variable_set("click_to_schedule_block_{$delta}_button_action", $edit['button_action']);
    variable_set("click_to_schedule_block_{$delta}_link_location", $edit['link_location']);
    variable_set("click_to_schedule_block_{$delta}_landing_page_url", $edit['landing_page_url']);
    variable_set("click_to_schedule_block_{$delta}_href", $edit['href']);
    variable_set("click_to_schedule_block_{$delta}_popup", $edit['popup']);
  }
}

/**
 * Returns the configuration for the requested block delta.
 *
 * @param string|int $delta
 *   The delta that uniquely identifies the block in the block system. If not
 *   specified, the default configuration will be returned.
 *
 * @return array
 *   An associative array of configuration options.
 */
function click_to_schedule_get_config($delta = NULL) {
  $config = array(
    'delta'       => $delta,
    'admin_title' => '',
    'button_size' => 'short-medium',
    'button_color' => 'c3b48c',
    'button_action' => FALSE,
    'link_location' => 'internal',
    'landing_page_url' => '',
    'href' => '',
    'popup' => 1,
  );

  // Get the block configuration options.
  if ($delta) {
    $config['admin_title']      = variable_get("click_to_schedule_block_{$delta}_admin_title", $config['admin_title']);
    $config['button_size']      = variable_get("click_to_schedule_block_{$delta}_button_size", $config['button_size']);
    $config['button_color']     = variable_get("click_to_schedule_block_{$delta}_button_color", $config['button_color']);
    $config['button_action']    = variable_get("click_to_schedule_block_{$delta}_button_action", $config['button_action']);
    $config['link_location']    = variable_get("click_to_schedule_block_{$delta}_link_location", $config['link_location']);
    $config['landing_page_url'] = variable_get("click_to_schedule_block_{$delta}_landing_page_url", $config['landing_page_url']);
    $config['href']             = variable_get("click_to_schedule_block_{$delta}_href", $config['href']);
    $config['popup']            = variable_get("click_to_schedule_block_{$delta}_popup", $config['popup']);
  }

  return $config;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adds delete links next to click-to-schedule blocks.
 */
function click_to_schedule_form_block_admin_display_form_alter(&$form, $form_state) {
  foreach (variable_get('click_to_schedule_block_ids', array()) as $delta) {
    $form['blocks']['click_to_schedule_' . $delta]['delete'] = array(
      '#type' => 'link',
      '#title' => t('delete'),
      '#href' => 'admin/structure/block/delete-click-to-schedule-block/' . $delta,
    );
  }
}

/**
 * Page callback: Form constructor to confirm deletion of blocks.
 *
 * Path: admin/structure/block/delete-click-to-schedule-block
 *
 * @param string|int $delta
 *   The delta that uniquely identifies the block in the block system.
 *
 * @ingroup forms
 * @click_to_schedule_block_delete_submit()
 * @see click_to_schedule_menu()
 */
function click_to_schedule_block_delete($form, &$form_state, $delta = 0) {
  $title = _click_to_schedule_block_format_title(click_to_schedule_get_config($delta));
  $form['block_title'] = array('#type' => 'hidden', '#value' => $title);
  $form['delta'] = array('#type' => 'hidden', '#value' => $delta);

  return confirm_form($form, t('Are you sure you want to delete the "%name" block?', array('%name' => $title)), 'admin/structure/block', NULL, t('Delete'), t('Cancel'));
}

/**
 * Form submission handler for click_to_schedule_block_delete().
 */
function click_to_schedule_block_delete_submit($form, &$form_state) {
  // Remove the block configuration variables.
  $delta = $form_state['values']['delta'];
  $block_ids = variable_get('click_to_schedule_block_ids', array());
  unset($block_ids[array_search($delta, $block_ids)]);
  sort($block_ids);
  variable_set('click_to_schedule_block_ids', $block_ids);
  variable_del("click_to_schedule_block_{$delta}_admin_title");
  variable_del("click_to_schedule_block_{$delta}_button_size");
  variable_del("click_to_schedule_block_{$delta}_button_color");
  variable_del("click_to_schedule_block_{$delta}_button_action");
  variable_del("click_to_schedule_block_{$delta}_link_location");
  variable_del("click_to_schedule_block_{$delta}_landing_page_url");
  variable_del("click_to_schedule_block_{$delta}_href");
  variable_del("click_to_schedule_block_{$delta}_popup");

  db_delete('block')
    ->condition('module', 'click_to_schedule')
    ->condition('delta', $delta)
    ->execute();
  db_delete('block_role')
    ->condition('module', 'click_to_schedule')
    ->condition('delta', $delta)
    ->execute();
  drupal_set_message(t('The block "%name" has been removed.', array('%name' => $form_state['values']['block_title'])));
  cache_clear_all();
  $form_state['redirect'] = 'admin/structure/block';
  return;
}

/**
 * Stores the paths to the Fancybox files in a variable.
 */
function click_to_schedule_set_files() {
  $path = libraries_get_path('fancybox');
  $files = click_to_schedule_detect_fancybox_files();

  if (empty($files['js']) || empty($files['css'])) {
    drupal_set_message(t('No Fancybox plugin found in @path. Install the Fancybox plugin and go to the Fancybox settings page for the files to be found.', array('@path' => $path)), 'warning');
  }
  else {
    variable_set('click_to_schedule_fancybox_files', $files);
  }

  return $files;
}

/**
 * Finds the needed Fancybox script.
 */
function click_to_schedule_detect_fancybox_files() {
  $path = libraries_get_path('fancybox');

  $js_files = glob(getcwd() . '/' . $path . '/jquery.fancybox-*.js');
  $css_files = glob(getcwd() . '/' . $path . '/jquery.*.css');

  $files = array(
    'js' => basename(array_shift($js_files)),
    'css' => basename(array_shift($css_files)),
  );

  return $files;
}

/**
 * Starts a new session with TimeTrade's RPC server.
 *
 * @param string $email
 *   The email address identifying the subscriber.
 * @param string $password
 *   The subscriber's password md5 hashed and base-64 encoded.
 *
 * @return int|NULL
 *   A login success code or NULL if no response.
 */
function click_to_schedule_start_session($email, $password) {
  // Send login info to TimeTrade to start new session.
  $client = new JsonRpcClient(
    CLICK_TO_SCHEDULE_TIMETRADE_SERVER . 'td/json/baseApi',
    '2.0'
  );

  // First get the authToken to use for login.
  try {
    $response = $client->call('baseApi.initAccess', array($email, CLICK_TO_SCHEDULE_WEB_BROWSER_CLIENT));

    if (isset($response['error'])) {
      drupal_set_message(t('Error connecting to TimeTrade: !message', array('!message' => filter_xss($response['error']['msg']))), 'error');
      return NULL;
    }

    if (isset($response['result'])) {
      $auth_token = $response['result']['authToken'];
      $compound_token = _click_to_schedule_md5_base64($password . $auth_token);
      try {
        $response = $client->call('baseApi.login', array($email, $compound_token));

        if (isset($response['error'])) {
          drupal_set_message(t('Error connecting to TimeTrade: !message', array('!message' => filter_xss($response['error']['msg']))), 'error');
          return NULL;
        }

        if (isset($response['result'])) {
          $return_code = $response['result'];

          // Get JSESSIONID cookie.
          preg_match_all('/JSESSIONID=[^;]*/', $response['cookies'], $cookies, PREG_PATTERN_ORDER);
          variable_set('click_to_schedule_cookie', $cookies[0][1]);
          return $return_code;
        }
      } catch (JsonRpcClientHttpException $e) {
        drupal_set_message(t('Error connecting to TimeTrade: !message', array('!message' => filter_xss($e->getMessage()))), 'error');
      }
    }
  } catch (JsonRpcClientHttpException $e) {
    drupal_set_message(t('Error connecting to TimeTrade: !message', array('!message' => filter_xss($e->getMessage()))), 'error');
  }

  return NULL;
}

/**
 * Checks if the user has a specific entitlement.
 *
 * @param string $entitlement
 *   The entitlement to check.
 * @param int $attempts
 *   How many attempts have been made to get the entitlement information from
 *   TimeTrade. If the first failure is due to an expired session, get a new
 *   session and retry once.
 *
 * @return boolean|NULL
 *   Whether the user has the given entitlement, or NULL if no response.
 */
function click_to_schedule_is_entitled($entitlement, $attempts = 0) {
  $client = new JsonRpcClient(
      CLICK_TO_SCHEDULE_TIMETRADE_SERVER . 'td/json/inviterApi',
      '2.0'
  );

  try {
    $response = $client->call('inviterApi.isEntitled', array($entitlement), NULL, variable_get('click_to_schedule_cookie', ''));

    if (isset($response['error'])) {
      if ($response['error']['code'] == CLICK_TO_SCHEDULE_MISSING_CREDENTIALS && !$attempts) {
        // Send login info to TimeTrade in case of session loss.
        $return_code = click_to_schedule_start_session(variable_get('click_to_schedule_email', ''), variable_get('click_to_schedule_password', ''));
        if (isset($return_code) && $return_code == 0) {
          // Try again, once.
          return click_to_schedule_is_entitled($entitlement, ++$attempts);
        }
        else {
          drupal_set_message(t('Could not establish session with TimeTrade. Please make sure you have logged in to a TimeTrade account on the <a href="@config">configuration page</a>. If you continue to have trouble, please contact <a href="@support">support</a>.',
          array(
            '@config' => url('admin/config/user-interface/click-to-schedule'),
            '@support' => url('http://www.timetrade.com/support-intro.aspx'),
          )), 'error');
        }
      }
      else {
        drupal_set_message(t('Could not connect to TimeTrade: !message', array('!message' => filter_xss($response['error']['msg']))), 'error');
      }
    }
    elseif (isset($response['result'])) {
      if ($response['result']) {
        return TRUE;
      }
      else {
        return FALSE;
      }
    }
  } catch (JsonRpcClientHttpException $e) {
    drupal_set_message(t('Error connecting to TimeTrade: !message', array('!message' => filter_xss($e->getMessage()))), 'error');
  }

  return NULL;
}

/**
 * Gets the link for the click-to-schedule button.
 *
 * @return string|NULL
 *   A complete URL string.
 */
function click_to_schedule_get_appt_router_link() {
  $client = new JsonRpcClient(
      CLICK_TO_SCHEDULE_TIMETRADE_SERVER . 'td/json/inviterApi',
      '2.0'
  );

  try {
    $response = $client->call('inviterApi.getDefaultRoundRobinRoutingURL', array(), NULL, variable_get('click_to_schedule_cookie', ''));

    if (isset($response['error'])) {
      drupal_set_message(t('Error connecting to TimeTrade: !message', array('!message' => filter_xss($response['error']['msg']))), 'error');
      return NULL;
    }

    if (isset($response['result'])) {
      return $response['result'];
    }
  } catch (JsonRpcClientHttpException $e) {
    drupal_set_message(t('Error connecting to TimeTrade: !message', array('!message' => filter_xss($e->getMessage()))), 'error');
  }

  return NULL;
}

/**
 * Function to generate base 64 encoded hash in the the style of
 * dojox.encoding.digests.MD5().
 *
 * @param string $data
 *   Data to be hashed.
 *
 * @return string
 *   Base-64 encoded MD5 hash.
 */
function _click_to_schedule_md5_base64($data) {
  return base64_encode(pack('H*', md5($data)));
}
