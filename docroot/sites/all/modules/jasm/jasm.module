<?php
// $Id$

/**
 * @file
 * Tired of custom blocks with embedded php or javascript to render 3rd party widgets? JASM creates blocks and lists of some Social Media services available online, like a Facebook Like Box or a Twitter feed. Customize all variables of these social plugins to suit your site's theme.
 */

/**
* Valid permissions for this module
* @return array An array of valid permissions for the onthisdate module
*/
function jasm_permission() {
  return array(
    'configure social block attributes' => array(
      'title' => t('Configure Social Block Attributes'),
      'description' => t('Capture Social Media Services Information and set global block sizes'),
    ),
  );
} // function jasm_perm()

/**
* Implementation of hook_menu().
*/
function jasm_menu() {
  $items['admin/config/services/jasm'] =  array(
    'title' => '"Just Another Social Module" Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('jasm_admin_settings'),
    'description' => 'Configure which services to activate and their respective attributes',
    'access arguments' => array('configure social block attributes'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'jasm.admin.inc',
  );
  return $items;
}

/**
 * Implementation of hook_help().
 */
function jasm_help($path, $arg) {
  $help = '';
  switch ($path) {
    case 'admin/config/services/jasm':
      $help .= '<p><em>"' . t('Just Another Social Module') . '"</em> ' . "\n";
      $help .= t('helps you configure your 3rd party affiliate sites with your company (or personal) website / domain, e.g. Facebook page or Twitter feed.') . '</p>' . "\n";
      break;
    case 'admin/help#jasm':
      $help .= '<p><em>"' . t('Just Another Social Module') . '"</em> ' . "\n";
      $help .= t('helps you configure your 3rd party affiliate sites with your company (or personal) website / domain, e.g. Facebook page or Twitter feed.') . '</p>' . "\n";
      $help .= '<dl>' . "\n";
      // FACEBOOK Config help
      $help .= '<dt>Facebook configuration</dt>' . "\n";
      $help .= '<dd>' . t('You will need to already have a Facebook page for the "Like box" widget to work. The information you require to fill in the fields can be obtained by visiting your page on facebook. Here\'s an example:') . '<br />' . '<img src="https://img.skitch.com/20110502-xda5gckhey6xkqt8xx7rxw1iea.jpg" alt="A typical url of a Facebook page" />' . '<br />' . t('Your <em>Facebook Page ID</em> value is optional, but can also be found in your page\'s admin. See the resemblance between the above url and the values provided for the configuration page:') . '<br />' . '<img src="https://img.skitch.com/20110502-8a8n6agtqywmd9cck216bmhiag.jpg" alt="The path and page id values filled in" /><br />' . '</dd>' . "\n";
      // FOURSQUARE Config help
      $help .= '<dt>Foursquare configuration</dt>' . "\n";
      $help .= '<dd>' . t('The widget provided in JASM is courtesy of http://www.placewidget.com/. To fully configure your widget, you will have to visit PlaceWidget and generate the script to get the necessary values to fill in.') . "\n";
      // TODO: Be more specific about the settings here
      $help .= '</dd>' . "\n";
      // TODO: Fix this help to include Instagram that gets generated
      // INSTAGRAM Config help
      // $help .= '<dt>Instagram configuration</dt>' . "\n";
      // $help .= '<dd>' . t('The widget provided in JASM is courtesy of http://www.snapwidget.com/. To fully configure your widget, you will have to visit SnapWidget and generate the script to get the necessary values to fill in.') . "\n";
      // end the list
      $help .= '</dl>' . "\n";
      break;
    case 'admin/structure/block/manage/jasm/feedburner_mail_subscribe/configure':
      $help .= '<p>' . t('Configure Feedburner email subscriptions at Feedburner before activating this block') . '</p>';
      break;
  }
  return $help;
}

/**
 * Implementation of hook_block_info().
 */
function jasm_block_info() {
  $blocks = array();
  // Service List
  $blocks['service_list'] = array(
    'info' => t('JASM Service List'),
  );

  // Facebook Related Blocks
  $blocks['fb_like_box'] = array(
    'info' => t('JASM Facebook Like Box'),
  );

  // Twitter Related Blocks
  $blocks['twitter_profile_widget'] = array(
    'info' => t('JASM Twitter Profile widget'),
  );

  $blocks['twitter_faves_widget'] = array(
    'info' => t('JASM Twitter Faves widget'),
  );

  $blocks['twitter_search_widget'] = array(
    'info' => t('JASM Twitter Search widget'),
  );

  $blocks['twitter_follow_button'] = array(
    'info' => t('JASM Twitter Follow Button'),
  );

  // TODO: JASM Twitter List widget $block[5]

  // Foursquare Related Blocks
  $blocks['4sq_pw_venue'] = array(
    'info' => t('JASM Foursquare venue widget (from placewidget.com)'),
  );
  
  // Feedburner Related Blocks
  $blocks['feedburner_mail_subscribe'] = array(
    'info' => t('JASM Feedburner Email Subscriptions'),
  );

  $blocks['feedburner_mail_subscribe_link'] = array(
    'info' => t('JASM Feedburner Email Subscribe Link'),
  );

  return $blocks;
} // hook_block_info

/**
 * Implementation of hook_block_view().
 * @param string $delta code to identify the block
 */
function jasm_block_view($delta = '') {
  // Generate the subject and content for the available blocks
  // as defined in hook_block_info
  $block = array();
  switch ($delta) {
    case 'service_list':
      $jasm = jasm_get_values_general();
      if ($jasm['service_list_title'] != '') {
        $block['subject'] = $jasm['service_list_title'];
      } 
      else {
        $block['subject'] = NULL;
      }
      $block['content'] = jasm_service_list();
      break;

    // Facebook Related Blocks
    case 'fb_like_box':
      $block['subject'] = NULL;
      $block['content'] = jasm_facebook_likebox();
      break;

    // Twitter Related Blocks
    case 'twitter_profile_widget':
      $block['subject'] = NULL;
      $block['content'] = jasm_twitter_widget_profile();
      break;

    case 'twitter_faves_widget':
      $block['subject'] = NULL;
      $block['content'] = jasm_twitter_widget_faves();
      break;

    case 'twitter_search_widget':
      $block['subject'] = NULL;
      $block['content'] = jasm_twitter_widget_search();
      break;

    case 'twitter_follow_button':
      $block['subject'] = NULL;
      $block['content'] = jasm_twitter_followbut();
      break;

    // Foursquare Related Blocks
    case '4sq_pw_venue':
      $block['subject'] = NULL;
      $block['content'] = jasm_4sqr_venuebox();
      break;

    // Feedburner Related Blocks
    case 'feedburner_mail_subscribe':
      // use some of the settings to set the values of the feedburner block
      $settings = jasm_get_values_feedburner();
      $block['subject'] = NULL;
      if ($settings['override_widget']) {
        // give the block a title when not displaying the default
        $block['subject'] = $settings['custom_block_title'];
      } //endif;
      $block['content'] = jasm_feedburner_mail_subscribe_widget($settings);
      break;

    case 'feedburner_mail_subscribe_link':
      $block['subject'] = NULL;
      $block['content'] = jasm_feedburner_mail_subscribe_link() ;
      break;
  } // endswitch (delta)

  return $block;
} // function jasm_block_view()

/**
 * Arrange all the selected services into an unordered list, that is friendly
 * to themers, or can simply be rendered into a block region
 */
function jasm_service_list() {
  // Fetch all the JASM variables to render the list as set in the preferences
  $jasm = jasm_get_values();
  $servicelist = array();
  // Construct a class to place in the service list to handle all the possible options
  // Prefix with 'jasm'
  $jasmdisplayclass = 'jasm';

  // Append with icons and/or text setting
  switch ($jasm['jasm_general']['pref_icon_display']) {
    case 'text_only':
      $jasmdisplayclass .= '-text-only';
      break;
    case 'icon_only':
      $jasmdisplayclass .= '-icon-only';
      break;

    case 'icon_text':
      $jasmdisplayclass .= '-icon-text';
      break;

    default:
      $jasmdisplayclass .= '-text-only';
      break;
  } // endswitch

  // Append with inline or block
  switch ($jasm['jasm_general']['inline']) {
    case TRUE:
      $jasmdisplayclass .= '-inline';
      break;
    case FALSE:
      $jasmdisplayclass .= '-block';
      break;
  }

  if ($jasm['jasm_general']['fc_webicon']) {
    $iconset = 'fc-webicon';
  }
  else {
    $iconset = 'jasm-webicon';
  }

  $classes = array('jasm-service-list', $jasmdisplayclass);

  $attributes = array('class' => $classes);
  $i = 0;
  //Sort the applicable elements by weight
  array_shift($jasm);
  // The following only worked for weights above 0
  // uasort($jasm, "element_sort");
  // From a patch contributed on drupal.org: http://drupal.org/node/1716140
  uasort($jasm, "drupal_sort_weight");

  foreach ($jasm as $service) {
    if (isset($service['inlist'])) {
      if ($service['inlist']) {
        $servicelist[$i] = l($service['name'], ('http://' . $service['basepath'] . '/' . $service['href']), array('attributes' => array('class' => array($iconset, strtolower($service['name']), 'small'), 'title' => t('Visit us on ' . $service['name'])), ));
        $i++;
      } //endif
    } //endif
  } //endforeach

  $variables = array(
    'items' => $servicelist,
    'title' => NULL,
    'type' => "ul",
    'attributes' => $attributes,
  );

  $output = theme_item_list($variables);
  return $output;
}

/**
 * Create markup for a 'Facebook Like Box' to be placed in a block
 */
function jasm_facebook_likebox() {
  // Fetch the necessary variables for a Facebook Like Box
  $general = jasm_get_values_general();
  $facebook = jasm_get_values_facebook();
  // $blockheight = $general['blockheight'];
  // Determine the height based on the defaults instead
  // Any ticked
  if (($facebook['faces']) || ($facebook['stream']) || ($facebook['header'])) {
    // If all the options are ticked
    if (($facebook['faces']) && ($facebook['stream']) && ($facebook['header'])) {
      $blockheight = 590;
    } 
    else {
      // Just faces
      if ($facebook['faces']) {
        $blockheight = 258;
      }
      // Just stream
      if ($facebook['stream']) {
        $blockheight = 395;
      }
      // Faces and Stream
      if (($facebook['faces']) && ($facebook['stream'])) {
        $blockheight = 558;
      }
      // Faces and Header
      if (($facebook['faces']) && ($facebook['header'])) {
        $blockheight = 290;
      }
      // Stream and Header
      if (($facebook['stream']) && ($facebook['header'])) {
        $blockheight = 427;
      }
      // Just faces
    }
  } 
  // No options ticked
  else {
    // Minimum height
    $blockheight = 62;
  }

  // iFrame code
  $output = '<iframe src="//www.facebook.com/plugins/likebox.php?';

  // Facebook Page ID
  // Facebook has updated the Like Box code so you no longer use the page id to
  // render the like box
  // $output .= 'id=' . $facebook['fbid'] . '&amp;';
  $output .= 'href=http%3A%2F%2Fwww.facebook.com%2F';
  $hrefstring = str_replace("/", "%2F", $facebook['href']);
  $output .= $hrefstring . '&amp;';

  // Updating the output code as best as possible to see where the height issue is
  // Width: A recommended minumum width of 292px from Facebook
  $output .= 'width=' . $general['blockwidth']  . '&amp;';
  // Height: The height varies depending on whether or not we are showing faces, the header and/or the stream
  $showfaces = 'false';
  if ($facebook['faces']) { 
    $showfaces = 'true';
  }
  $output .= 'height=' . $blockheight . '&amp;';
  // Showfaces needs to print either 'true' or 'false'
  $output .= 'show_faces=' . $showfaces . '&amp;';
  $output .= 'colorscheme=' . $facebook['colorscheme'] . '&amp;';
  $showstream = 'false';
  if ($facebook['stream']) {
    $showstream = 'true';
  }
  $output .= 'stream=' . $showstream . '&amp;';
  $output .= 'border_color=' . $facebook['border_color'] . '&amp;';
  // Show header needs tro print either 'true' or 'false'
  $showheader = 'false';
  if ($facebook['header']) {
    $showheader = 'true';
  }
  $output .= 'header=' . $showheader . '" ';             // Mind the trailing space character
  // Finish off the iframe code
  $output .= 'scrolling="no" ';                          // Mind the trailing space character
  $output .= 'frameborder="0" ';                         // Mind the trailing space character
  $output .= 'style="border:none; ';                     // Mind the trailing space character
  $output .= 'overflow:hidden; ';                        // Mind the trailing space character
  $output .= 'width:' . $general['blockwidth'] . 'px; '; // Mind the trailing space character
  $output .= 'height:' . $blockheight . 'px;" ';         // Mind the trailing space character
  $output .= 'allowTransparency="true" ';                // Mind the trailing space character
  $output .= '></iframe>';

  return $output;
}


/**
 * Implementation of hook_init().
 * Used to add the webicons style sheet to all pages from libraries
 */
function jasm_init() {
  // Add the JS needed to render Twitter Widgets
  // This seems to work, but doesn't solve my problem. Looks like one can't render multiples of the same widget
  // drupal_add_js('http://widgets.twimg.com/j/2/widget.js');
  $data = 'sites/all/libraries/webicons/fc-webicons.css';
  $options = array(
    'every_page' => TRUE,
  );
  drupal_add_css($data, $options);
}

/**
 * Generates the script required to render the contents of a twitter widget
 * @param $widgettype
 *   the type of widget it should be. Could be 'profile', 'list', 'search' or 'faves'
 *
 * @return $script
 *   JavaScript with variables filled in from the variables table
 */
function jasm_twitter_widget_script($widgettype) {
  $script = '';
  $tquery = '';

  // Set the necessary JavaScript from the values. Defaults if not set in admin yet.
  $general = jasm_get_values_general();
  $twitter = jasm_get_values_twitter();

  // Every widget type has a special closing type
  $close = '';

  $script .= 'new TWTR.Widget({' . "\n";
  $script .= 'version: 2,' . "\n";

  // Set the widget type from the argument
  $script .= 'type: \'' . $widgettype . '\',' . "\n";
  $script .= 'interval: '. $twitter['pref_tweet_interval'] . '000,' . "\n";

  // Insert the custom widget code depending on the type
  switch ($widgettype) {
    case 'faves':
      $faves = jasm_get_values_twitter_faves();
      $script .= 'title: \'' . t($faves['faves_title'])  . '\',' . "\n";
      $script .= 'subject: \'' . t($faves['faves_subject'])  . '\',' . "\n";

      $close = '}).render().setUser(\'' . $twitter['href']. '\').start();' . "\n";
      break;

    case 'search':
      $srch = jasm_get_values_twitter_search();
      $tquery = preg_replace("/'/", "\'", $srch['search_query']);
      $script .= 'search: \'' . $tquery . '\',' . "\n";
      $script .= 'title: \'' . t(check_plain($srch['search_title']))  . '\',' . "\n";
      $script .= 'subject: \'' . t(check_plain($srch['search_subject']))  . '\',' . "\n";

      $close = '}).render().start();' . "\n";
      break;

    case 'profile':
      $script .= 'rpp: ' . $twitter['pref_tweet_number'] . ',' . "\n";
      // Set Tweet Interval for timed Tweets
      $script .= 'interval: '. $twitter['pref_tweet_interval'] . '000,' . "\n";

      $close = '}).render().setUser(\'' . $twitter['href']. '\').start();' . "\n";
      break;

  } //endswitch

  // Check if a fluid width is required
  if ($twitter['pref_fluid_width']) {
    $script .= 'width: \'auto\',' . "\n";
  }
  else {
    // Set the block width
    $script .= 'width: ' . $general['blockwidth'] . ',' . "\n";
  } //endif;

  // Set the block height
  $script .= 'height: ' . $general['blockheight'] .',' . "\n";
  $script .= 'theme: {' . "\n";
  $script .= '  shell: {' . "\n";
  $script .= '    background: \'' . $twitter['color_shellback'] . '\',' . "\n";
  $script .= '    color: \'' . $twitter['color_shelltext'] . '\'' . "\n";
  $script .= '  },' . "\n";
  $script .= '  tweets: {' . "\n";
  $script .= '    background: \'' . $twitter['color_tweetback'] . '\',' . "\n";
  $script .= '    color: \'' . $twitter['color_tweettext'] . '\',' . "\n";
  $script .= '  links: \'' . $twitter['color_link'] . '\'' . "\n";
  $script .= '  }' . "\n";
  $script .= '},' . "\n";

  // The FEATURES section are mostly checkboxes set in the admin settings
  // TODO: Consider using a single Checkboxes field and set all of them in one variable
  $script .= 'features: {' . "\n";
  $script .= 'scrollbar: ';
  if ($twitter['pref_scrollbar']) {
    $script .= 'true,' . "\n";
  } 
  else {
    $script .= 'false,' . "\n";
  }
  $script .= 'loop: ';
  if ($twitter['pref_loop']) {
    $script .= 'true,' . "\n";
  } 
  else {
    $script .= 'false,' . "\n";
  }
  $script .= 'live: ';
  if ($twitter['pref_pollresults']) {
    $script .= 'true,' . "\n";
  } 
  else {
    $script .= 'false,' . "\n";
  }
  $script .= 'hashtags: ';
  if ($twitter['pref_hashtags']) {
    $script .= 'true,' . "\n";
  } 
  else {
    $script .= 'false,' . "\n";
  }
  $script .= 'timestamp: ';
  if ($twitter['pref_timestamp']) {
    $script .= 'true,' . "\n";
  } 
  else {
    $script .= 'false,' . "\n";
  }
  $script .= 'avatars: ';
  if ($twitter['pref_avatars']) {
    $script .= 'true,' . "\n";
  } 
  else {
    $script .= 'false,' . "\n";
  }

  $script .= 'behavior: \'' . $twitter['pref_timed'] . '\'' . "\n";
  $script .= '}' . "\n";

  $script .= $close;

  $script .= '</script>' . "\n";

  return $script;
}

/**
 * This generates the contents for the Twitter Profile widget
 *
 * @return $output
 *   Rendered content for a Twitter Profile Widget
 **/
function jasm_twitter_widget_profile() {
  // I've checked that this can be repeated more than once in the code
  // TODO: Get drupal to add this in to the page headers
  $output = '<script charset="utf-8" src="http://widgets.twimg.com/j/2/widget.js"></script>' . "\n";
  $output .= '<script>';

  // Generate the JavaScript
  $output .= jasm_twitter_widget_script('profile');

  return $output;
}

/**
 * This generates the contents for the Twitter Faves widget
 *
 * @return $output
 *   Rendered content for a Twitter Faves Widget
 **/
function jasm_twitter_widget_faves() {
  // I've checked that this can be repeated more than once in the code
  // TODO: Get drupal to add this in to the page headers
  $output = '<script charset="utf-8" src="http://widgets.twimg.com/j/2/widget.js"></script>' . "\n";
  $output .= '<script>';

  // Generate the JavaScript
  $output .= jasm_twitter_widget_script('faves');

  return $output;
}

/**
 * This generates the contents for the Twitter Search widget
 *
 * @return $output
 *   Rendered content for a Twitter Profile Widget
 **/
function jasm_twitter_widget_search() {
  // I've checked that this can be repeated more than once in the code
  // TODO: Get drupal to add this in to the page headers
  $output = '<script charset="utf-8" src="http://widgets.twimg.com/j/2/widget.js"></script>' . "\n";
  $output .= '<script>';

  // Generate the JavaScript
  $output .= jasm_twitter_widget_script('search');

  return $output;
}

function jasm_twitter_followbut() {
  // Fetch the necessary variables for a Twitter Follow Button
  $twitter = jasm_get_values_twitter();

  $script = '';
  $script .= '<a href="http://twitter.com/' . $twitter['href'] . '" class="twitter-follow-button" ';
  // Twitter Follow Button Settings
  $script .= 'data-show-count="';
  if ($twitter['but_show_count']) {
    $script .= 'true"' . "\n";
  } 
  else {
    $script .= 'false"' . "\n";
  }
  $script .= 'data-button="' . $twitter['but_color_butcolor'] . '" ';

  // Set the text and link colour if values are specified in the admin settings
  if ($twitter['but_color_textcolor'] != '') {
    $script .= 'data-text-color="' . $twitter['but_color_textcolor'] . '" ';
  } // endif
  if ($twitter['but_color_linkcolor'] != '') {
    $script .= 'data-link-color="' . $twitter['but_color_linkcolor'] . '" ';
  } // endif

  // TODO: Get the language from Drupal
  $script .= 'data-lang="' . $twitter['but_lang'] . '" ';

  // Set the width and alignment if values are specified in the admin settings
  if (isset($twitter['but_width'])) {
    $script .= 'data-width="' . $twitter['but_width'] . 'px" ';
  } //endif;

  if ($twitter['but_text_align'] != '') {
    $script .= 'data-align="' . $twitter['but_text_align'] . '" ';
  } //endif
  $script .= '>Follow @' . $twitter['href'] . '</a>';
  $script .= '<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>';

  return $script;
}

/**
 * Create markup for a 'Foursquare Venue Widget' (by placewidget.com) to be placed in a block
 */
function jasm_4sqr_venuebox() {
  // Fetch the necessary variables for a Foursquare venue widget
  $general = jasm_get_values_general();
  $foursquare = jasm_get_values_4sqr();

  $script = '';
  $script .= '<script type="text/javascript" src="http://www.placewidget.com/widget?';
  // PlaceWidget generated code
  $script .= 'k=' . $foursquare['placewidget_code'];
  $script .= '&i=' . $foursquare['interval'];
  // Set the width of the widget to the closest available value as set in the general settings
  if ($general['blockwidth'] < 161) {
    $closest_width = 160;
  }
  elseif ($general['blockwidth'] < 201) {
    $closest_width = 200;
  }
  else {
    $closest_width = 250;
  } //endif
  $script .= '&s=' . $closest_width;
  $script .= '&v=1"></script>';
  return $script;
}

/**
 * Draws a widget to subscribe to a Feedburner Email feed
 * @PARAM: $settings - an array of admin settings for Feedburner
 **/
function jasm_feedburner_mail_subscribe_widget($settings) {
  $widget = '';
  if ($settings['override_widget']) {

    $form = drupal_get_form('jasm_feedburner_mail_subscribe_form');
    $widget .= drupal_render($form);
    $widget .= '<p>Delivered by <a href="http://feedburner.google.com" target="_blank">FeedBurner</a></p>';

  }
  else {
    // The Default Feedburner Widget
    // TODO: Do this better
    $widget .= '<form style="border:1px solid #ccc;padding:3px;text-align:center;" action="http://feedburner.google.com/fb/a/mailverify" method="post" target="popupwindow" onsubmit="window.open(\'http://feedburner.google.com/fb/a/mailverify?uri=' . $settings['href'];
    $widget .= '\', \'popupwindow\', \'scrollbars=yes,width=550,height=520\');return true">' . "\n";
    $widget .= '<p>Enter your email address:</p><p><input type="text" style="width:140px" name="email"/></p><input type="hidden" value="' . $settings['href'] . '" name="uri"/><input type="hidden" name="loc" value="en_US"/><input type="submit" value="Subscribe" />' . "\n";
    $widget .= '<p>Delivered by <a href="http://feedburner.google.com" target="_blank">FeedBurner</a></p></form>';
  } //endif;
  return $widget;
}

/**
 * Create a Feedburner Subscription form 
 */
function jasm_feedburner_mail_subscribe_form($form_state) {
  $settings = jasm_get_values_feedburner();

  // Fill in the email address of the user that is currently logged in
  global $user;
  if ($user->uid != 0) {
    $mail = $user->mail;
  }
  else {
    $mail = '';
  }

  $form['#action'] = url('http://feedburner.google.com/fb/a/mailverify');
  $form['#method'] = 'post';
  $form['#attributes'] = array(
    'target' => 'popupwindow',
    'onsubmit' => 'window.open(\'http://feedburner.google.com/fb/a/mailverify?uri=' . $settings['href'] . '\',\'popupwindow\',\'scrollbars=yes,width=550,height=520\');return true',
  );

  $form['email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email address'),
    '#size' => 35,
    '#default_value' => $mail,
    '#description' => t('Content updates will be sent to this address.'),
  );

  $form['loc'] = array(
    '#type' => 'hidden',
    '#value' => 'en_US',
  );

  $form['uri'] = array(
    '#type' => 'hidden',
    '#value' => $settings['href'],
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Subscribe'),
  );

  return $form;
}

/**
 * Renders a Feedburner link
 **/
function jasm_feedburner_mail_subscribe_link() {
  $settings = jasm_get_values_feedburner();
  $text = t('Subscribe to ' . $settings['href'] . ' by Email');
  $path = 'http://feedburner.google.com/fb/a/mailverify';
  $options = array(
    'attributes' => array(
      'class' => t('feedburner'),
    ),
    'query' => array(
      'uri' => $settings['href'],
      'loc' => 'en_US',
    ),
  );

  $output = l($text, $path, $options);
  return $output;
}

/**
 * Create markup for a 'Instagram gallery Widget' (by snapwidget.com) to be placed in a block
 */
function jasm_instagram_widget() {
  // Fetch the necessary variables for an Instagram gallery widget
  $general = jasm_get_values_general();
  $instagram = jasm_get_values_instagram();

  // iFrame code
  $output = '<iframe src="http://snapwidget.com/in/?u=';
  
  // Snapwidget code
  $output .= $instagram['snapwidget_code'] . '"';
  
  // Finish off the iframe code
  $output .= ' frameborder="0" scrolling="no" frameborder="0" style="border:none; overflow:hidden; ';

  // Repeat the width and height for the iframe declaration
  $output .= 'width:' . $general['blockwidth'] . 'px; ';
  $output .= 'height:' . $general['blockheight'] . 'px;" ';
  
  $output .= 'allowTransparency="true"></iframe>';
  return $output;
}

/**
 * Set variables to place in templates
 **/
function jasm_preprocess(&$variables, $hook) {
  // The Service list
  $variables['jasm_service_list'] = jasm_service_list();
  // Feedburner link
  $variables['jasm_feedburner_link'] = jasm_feedburner_mail_subscribe_link();
}

/**
 * Return the default value required in the variable array(s)
 */
function jasm_get_values() {
  $defaults = array(
    'jasm_general' => jasm_get_values_general(),
    'jasm_facebook' => jasm_get_values_facebook(),
    'jasm_flickr' => jasm_get_values_flickr(),
    'jasm_4sqr' => jasm_get_values_4sqr(),
    'jasm_instagram' => jasm_get_values_instagram(),
    'jasm_rss' => jasm_get_values_rss(),
    'jasm_twitter' => jasm_get_values_twitter(),
    'jasm_twitter_faves' => jasm_get_values_twitter_faves(),
    'jasm_twitter_search' => jasm_get_values_twitter_search(),
    'jasm_youtube' => jasm_get_values_youtube(),
    'jasm_flattr' => jasm_get_values_flattr(),
    'jasm_instagram' => jasm_get_values_instagram(),
    'jasm_feedburner' => jasm_get_values_feedburner(),
    'jasm_linkedin' => jasm_get_values_linkedin(),
    'jasm_vkontakte' => jasm_get_values_vkontakte(),
    'jasm_custom_01' => jasm_get_values_custom_01(),
    'jasm_custom_02' => jasm_get_values_custom_02(),
    'jasm_custom_03' => jasm_get_values_custom_03(),
  );

  return $defaults;
}

function jasm_get_values_general() {
  $defaults = array(
    'blockwidth' => 270,
    'blockheight' => 500,
    'inline' => FALSE,
    'fc_webicon' => FALSE,
    'service_list_title' => 'Social',
    'pref_icon_display' => 'text_only',
  );

  $defaults_general = variable_get('jasm_general', $defaults);
  return $defaults_general;
}

function jasm_get_values_facebook() {
  $defaults = array(
    'name' => t('Facebook'),
    'basepath' => 'www.facebook.com',
    'inlist' => FALSE,
    'href' => 'CerebraZA',
    'fbid' => '151456121547843',
    'colorscheme' => 'light',
    'faces' => TRUE,
    'border_color' => '#aaaaaa',
    'stream' => TRUE,
    'header' => TRUE,
    'weight' => 0,
  );

  $defaults_facebook = variable_get('jasm_facebook', $defaults);
  return $defaults_facebook;
}

function jasm_get_values_flickr() {
  $defaults = array(
    'name' => t('Flickr'),
    'inlist' => FALSE,
    'basepath' => 'www.flickr.com/photos',
    'href' => t('CerebraZA'),
    'weight' => 0,
  );

  $defaults_flickr = variable_get('jasm_flickr', $defaults);
  return $defaults_flickr;
}

function jasm_get_values_4sqr() {
  $defaults = array(
    'name' => t('Foursquare'),
    'inlist' => FALSE,
    'basepath' => 'www.foursquare.com/venue',
    'href' => t('769225'),
    'weight' => 0,
    'placewidget_code' => 'agtwbGFjZXdpZGdldHIOCxIFVmVudWUY_v__AQw',
    'interval' => 60,
    'closest_width' => 200,
    'version' => '1',
  );

  $defaults_4sqr = variable_get('jasm_4sqr', $defaults);
  return $defaults_4sqr;
}

function jasm_get_values_instagram() {
  $defaults = array(
    'name' => t('Instagram'),
    'inlist' => FALSE,
    'basepath' => 'web.stagram.com/n',
    'href' => 'cerebra',
    'weight' => 0,
    'snapwidget_code' => 'Y2VyZWJyYXxpbnw3NXwzfDN8RkZGRkZGfHllc3w1',
  );

  $defaults_instagram = variable_get('jasm_instagram', $defaults);
  return $defaults_instagram;
}

function jasm_get_values_rss() {
  $thisserver = $_SERVER['SERVER_NAME'];
  $defaults = array(
    'name' => t('RSS'),
    'inlist' => TRUE,
    'basepath' => $thisserver,
    'href' => t('rss.xml'),
    'weight' => 0,
  );

  $defaults_rss = variable_get('jasm_rss', $defaults);
  return $defaults_rss;
}


// TODO: Integrate with RSS settings
function jasm_get_values_feedburner() {
  $defaults = array(
    'name' => t('RSS'),
    'inlist' => FALSE,
    'basepath' => t('feeds.feedburner.com'),
    'href' => t('CerebraZA'),
    'weight' => 0,
    'override_widget' => FALSE,
    'custom_block_title' => t('Receive email updates'),
  );

  $defaults_feedburner = variable_get('jasm_feedburner', $defaults);
  return $defaults_feedburner;
}

function jasm_get_values_twitter() {
  $defaults = array(
    'name' => t('Twitter'),
    'basepath' => 'www.twitter.com',
    'inlist' => FALSE,
    'href' => 'cerebra',
    'pref_pollresults' => TRUE,
    'pref_scrollbar' => FALSE,
    'pref_timed' => 'default',
    'pref_loop' => FALSE,
    'pref_tweet_interval' => 6,
    'pref_fluid_width' => FALSE,
    'pref_tweet_number' => 6,
    'pref_avatars' => TRUE,
    'pref_timestamp' => FALSE,
    'pref_hashtags' => TRUE,
    'color_shellback' => '#333333',
    'color_shelltext' => '#ffffff',
    'color_tweetback' => '#000000',
    'color_tweettext' => '#ffffff',
    'color_link' => '#4aed05',
    // Twitter Follow Button Settings
    'but_show_count' => 'true',
    'but_color_butcolor' => 'blue',
    'but_color_textcolor' => '',
    'but_color_linkcolor' => '',
    'but_lang' => 'en',
    'but_width' => '250',
    'but_text_align' => '',
    'weight' => 0,
  );

  $defaults_twitter = variable_get('jasm_twitter', $defaults);
  return $defaults_twitter;
}

/**
 * Set default values for
 * Twitter Faves Widget
 **/
function jasm_get_values_twitter_faves() {
  $defaults = array(
    'faves_title' => t('Favourites'),
    'faves_subject' => t('As chosen by me'),
  );

  $defaults_twitter_faves = variable_get('jasm_twitter_faves', $defaults);
  return $defaults_twitter_faves;
}

/**
 * Set default values for
 * Twitter Search Widget
 **/
function jasm_get_values_twitter_search() {
  $defaults = array(
    'search_query' => 'Cerebra',
    'search_title' => t('The talk on the net'),
    'search_subject' => t('about Cerebra Communication'),
  );

  $defaults_twitter_search = variable_get('jasm_twitter_search', $defaults);
  return $defaults_twitter_search;
}

function jasm_get_values_youtube() {
  $defaults = array(
    'basepath' => t('www.youtube.com'),
    'inlist' => FALSE,
    'name' => 'YouTube',
    'href' => t('CerebraZA'),
    'weight' => 0,
  );

  $defaults_youtube = variable_get('jasm_youtube', $defaults);
  return $defaults_youtube;
}

function jasm_get_values_flattr() {
  $defaults = array(
    'basepath' => t('www.flattr.com/profile'),
    'inlist' => FALSE,
    'name' => 'Flattr',
    'href' => t('CerebraZA'),
    'weight' => 0,
  );

  $defaults_flattr = variable_get('jasm_flattr', $defaults);
  return $defaults_flattr;
}

function jasm_get_values_linkedin() {
  $defaults = array(
    'basepath' => t('www.linkedin.com/company'),
    'inlist' => FALSE,
    'name' => 'LinkedIN',
    'href' => t('299957'),
    'weight' => 0,
  );

  $defaults_linkedin = variable_get('jasm_linkedin', $defaults);
  return $defaults_linkedin;
}

function jasm_get_values_vkontakte() {
  $defaults = array(
    'basepath' => t('vk.com'),
    'inlist' => FALSE,
    'name' => 'VKontakte',
    'href' => t('id199942337'),
    'weight' => 0,
  );

  $defaults_vkontakte = variable_get('jasm_vkontakte', $defaults);
  return $defaults_vkontakte;
}

// TODO: Create AHAH friendly custom services

function jasm_get_values_custom_01() {
  $defaults = array(
    'basepath' => '',
    'name' => t('Custom'),
    'inlist' => FALSE,
    'basepath' => NULL,
    'href' => t('www.cerebra.co.za'),
    'weight' => 4,
  );
  $defaults_custom = variable_get('jasm_custom_01', $defaults);
  return $defaults_custom;
}

function jasm_get_values_custom_02() {
  $defaults = array(
    'basepath' => '',
    'name' => t('Custom'),
    'inlist' => FALSE,
    'basepath' => NULL,
    'href' => t('www.cerebra.co.za'),
    'weight' => 5,
  );
  $defaults_custom = variable_get('jasm_custom_02', $defaults);
  return $defaults_custom;
}

function jasm_get_values_custom_03() {
  $defaults = array(
    'basepath' => '',
    'name' => t('Custom'),
    'inlist' => FALSE,
    'basepath' => NULL,
    'href' => t('www.cerebra.co.za'),
    'weight' => 6,
  );
  $defaults_custom = variable_get('jasm_custom_03', $defaults);
  return $defaults_custom;
}