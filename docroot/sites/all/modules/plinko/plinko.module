<?php

/**
 * Implements hook_menu().
 */
function plinko_menu() {
  $items['admin/appearance/plinko'] = array(
    'title' => 'Plinko',
    'page callback' => 'plinko_settings_page',
    'access arguments' => array('administer themes'),
    'type' => MENU_SUGGESTED_ITEM,
  );

  return $items;
}

function plinko_permission() {
  return array(
    'view toolbar' => array(
      'Title' => t('View Toolbar'),
      'Description' => t('View the toolbar on the front end theme'),
      ),
    'administer plinko' => array(
      'title' => t("administer plinko"),
      'description' => t('Administer Plinko configuration options'),
    ),
  );
  
}

// function plinko_settings_page() {
//   return '<div class="' . drupal_html_class('plinko_settings_form') . '">' . drupal_render(drupal_get_form('plinko_settings_form')) . '</div>'
//           . '<div class="' . drupal_html_class('plinko_add_setting_form') . '">'. drupal_render(drupal_get_form('plinko_add_setting_form')) . '</div>';
// }

function plinko_add_setting_form($form, &$form_state) {
  // $form['lookup'] = array(
  //     '#type' => 'textfield',
  //     '#title' => t('Path'),
  //     '#description' => t('Path field description text goes here.'),
  //     '#size' => 40,
  //     '#maxlength' => 255,
  //   );
  //   
  //   
  //   $form['create_new_setting'] = array(
  //     '#type' => 'submit',
  //     '#value' => t('Create new setting'),
  //   );
  return $form;
}

/**
 * 
 */
function plinko_settings_form($form, &$form_state) {
  $form = array();
  // $settings = _plink_list_settings();
  // drupal_add_css(drupal_get_path('module', 'plinko') . '/css/styles.css');
  // 
  // $form['settings'] = array(
  //   '#type' => 'fieldset',
  //   '#title' => t('Settings'),
  //   '#collapsible' => FALSE,
  //   '#collapsed' => FALSE,
  //   '#access' => user_access('administer themes'),
  // );
  // 
  // foreach ($settings as $plid => $setting) {
  //   $settings[$plid]['settings'] = unserialize($setting['settings']);
  //   
  //   // Create the array if the 'settings' index started out uninitialized
  //   if (!is_array($settings[$plid]['settings'])) {
  //     $settings[$plid]['settings'] = array();
  //   }
  //   
  //   // Iterate through each setting and create a hidden field to hold the values to them
  //   foreach ($settings[$plid]['settings'] as $key => $val) {
  //     $form['settings'][$key] = array(
  //       '#type' => 'hidden',
  //       '#value' => $val,
  //     );
  //   }
  // }
  // 
  // $form['settings_holder'] = array(
  //   '#markup' => theme('plinko_settings', array('settings' => $settings)),
  //   '#prefix' => '<div class="tabs settings-holder">',
  //   '#suffix' => '</div>',
  // );
  // 
  // _plink_attach_visible_form_widgets($form);
  // 
  // $form['save_settings'] = array(
  //   '#type' => 'submit',
  //   '#value' => t('Save settings'),
  // );
  
  return $form;
}

// function _plink_list_settings() {
//   $result = db_select('plinko', 'p')
//               ->fields('p')
//               ->execute()
//               ->fetchAllAssoc('plid');
//   foreach ($result as $key => $val) {
//     $result[$key] = (array) $val;
//   }
//   return $result;
// }
// 
/**
 * Implements hook_theme().
 */
function plinko_theme($existing, $type, $theme, $path) {
  return array(
    'plinko_settings' => array(
      'variables' => array('settings' => array()),
    ),
    'plinko_settings_tabs' => array(
      'variables' => array('settings' => array()),
    ),
    'plinko_toolbar' => array(
      'template' => "/templates/toolbar",
      'variables' => array(
        'settings_form' => '',
        )
    ),
  );
}

/**
 * This function creates the toolbar visible to admins for front end configuration
 * 
 * @param $vars
 *    preprocess_html vars
 * 
 **/

function plinko_insert_toolbar(&$vars) {
  global $user;
  
  if(!user_access('view toolbar', $user)) { return; } // User does not have the correct rights
  
  drupal_add_css(drupal_get_path('module','plinko') . "/css/plinko.css");
  drupal_add_js(drupal_get_path('module','plinko') . "/js/plinko.js");
  
  drupal_add_css(drupal_get_path('theme', 'plink') . '/css/theme-settings.css', 'file');
  drupal_add_js(drupal_get_path('theme','plink') . "/js/theme-settings.js", 'file');
  
  $vars['page']['page_bottom']['plinko']['#markup'] = plinko_theme_toolbar();
  
}

/**
 * Implements Preprocess Page
 * 
 **/

function plinko_preprocess_html(&$vars) {
  global $theme;
  $admin_theme = variable_get('admin_theme', 'seven');
  
  // If current theme is the admin theme then do nothing
  if($admin_theme == $theme) { return; }

  // If the current theme is the front end theme add the toolbar
  plinko_insert_toolbar($vars);
}

/**
 * 
 **/
 
 function plinko_theme_toolbar() {
   $content = theme('plinko_toolbar', 
     array(
       'settings_form' => drupal_get_form('plinko_get_toolbar_form'),
      )
    );
   return $content;
 }


 
 
 /**
  * The toolbar form
  **/
function plinko_get_toolbar_form($form, $form_state) { 
  global $theme;
  $form_state['build_info']['args'] = array($theme);

  require_once(drupal_get_path('theme','plink') . "/theme-settings.php");
  plink_form_system_theme_settings_alter($form, $form_state);
  
  $allowed = array('master', 'page_layout_options', 'content_layouts_mq1', 'content_layouts_mq2', 'content_layouts_mq3');
  foreach($form as $k => $v) {
    if(!in_array($k, $allowed)) {
      unset($form[$k]);
    }
  }  
        
  $form['save_settings'] = array(
    '#type' => 'submit',
    '#value' => t('Save Settings'),
  ); 
  
  $form['reset'] = array(
    '#type' => 'button',
    // '#executes_submit_callback' => TRUE,
    '#value' => t('Reset to Defaults'),
    '#attributes' => array("class"=>array('float-right')),
  );     
        
  return $form;
}

/**
 * plinko_get_toolbar_form_validate
 * 
 * validation hook
 **/

function plinko_get_toolbar_form_validate($f, $fs) {
  // nada
  if($fs['triggering_element']['#value'] == 'Reset to Defaults') {
    $cp = current_path();
    plinko_delete_path_settings($cp);
  }  
  
}



/**
 * plinko_get_toolbar_form_submit
 * 
 * submit hook
 **/

function plinko_get_toolbar_form_submit($f, $fs) {
  $cp = current_path();
  $keys = array();
  global $theme;

  // check for path
  $r = db_select('plinko','p')
      ->fields('p', array('plid'))
      ->condition('lookup', $cp)
      ->condition('theme', $theme)
      ->execute()
      ->fetchAssoc();

  if(!empty($r['plid'])) { $keys = 'lookup'; }

  $rec = array(
    'type'=>'path',
    'lookup' => $cp,
    'theme' => $theme,
    'settings' => serialize($fs['values']),
  );
  
  drupal_write_record('plinko',$rec, $keys);
  
}


/**
 * Theme setting override hook
 *
 **/

function plinko_theme_get_setting($var, $theme) {

  static $plinko_path_settings;
  $plinko_path_settings = (empty($plinko_path_settings)) ? plinko_get_path_theme_settings($theme) : $plinko_path_settings;
  
  if(is_null($plinko_path_settings)) {
    return theme_get_setting($var, $theme);
  }
  
  if(isset($plinko_path_settings[$var])) {
    return $plinko_path_settings[$var];
  }
  
  return null;
}

/**
 * Lookup a configured path setting
 * 
 **/

function plinko_get_path_theme_settings($theme = null) {
  
  if(is_null($theme)) { global $theme; }  
  $cp = current_path();
  
  // check for path
  $r = db_select('plinko','p')
      ->fields('p', array('settings'))
      ->condition('lookup', $cp)
      ->condition('theme', $theme)
      ->execute()
      ->fetchAssoc();
      
  if(empty($r)) { return null; }
  return unserialize($r['settings']);
}

/**
 * Deletes a settings entry from the plinko table
 **/ 

function plinko_delete_path_settings($cp = null, $theme = null) {
  if(is_null($cp)) { $cp = current_path(); }
  if(is_null($theme)) { global $theme; }
  
  db_delete('plinko')
  ->condition('lookup',$cp)
  ->condition('theme', $theme)
  ->execute();
  
  drupal_set_message('Layout settings reset to defaults');
}