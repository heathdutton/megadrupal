<?php

/**
 * Implements hook_permission().
 */
function fancy_file_delete_permission() {
  return array(
    'administer fancy file delete' => array(
      'title' => t('Administer Fancy File Delete'),
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function fancy_file_delete_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'fancy_file_delete_manual') {
    $form['actions']['submit']['#value'] = 'Engage';
  }
  if ($form_id == 'views_form_fancy_file_list_unmanaged_unmanaged') {
    $form['update'] = array(
      '#type' => 'button',
      '#value' => t('Update View'),
      '#attributes' => array(
        'class' => array('form-submit ffd-refresh'),
      ),
    );
  }
}

/**
 * Implements hook_menu().
 */
function fancy_file_delete_menu() {
  $items = array();

  $items['admin/config/content/fancy_file_delete'] = array(
    'title' => 'Fancy File Delete',
    'description' => 'Delete Multiple Files Based off FID or orphaned / unamaged files',
    'page callback' => 'fancy_file_delete_info',
    'access arguments' => array('administer fancy file delete'),
    'file' => 'includes/fancy_file_delete.admin.inc'
  );

  $items['admin/config/content/fancy_file_delete/info'] = array(
    'title' => 'Info',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -12,
  );

  $items['admin/config/content/fancy_file_delete/manual'] = array(
    'title' => 'Manual',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fancy_file_delete_manual'),
    'access arguments' => array('administer fancy file delete'),
    'weight' => -10,
    'file' => 'includes/fancy_file_delete.admin.inc'
  );

  return $items;
}

/**
 * Implements of hook_views_api().
 */
function fancy_file_delete_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'fancy_file_delete') .'/views',
  );
}

/**
 * Implements of hook_views_pre_view().
 *
 * Used when we click on the unmanaged tab / Update View to keep it updated.
 */
function fancy_file_delete_views_pre_view(&$view, &$display_id, &$args) {
  if ($view->name == 'fancy_file_list_unmanaged') {
    fancy_file_delete_unmanaged_update_view();
  }
}

/**
 * Implements hook_entity_info().
 *
 * Add Unmanaged table as entity so we can use it with VBO.
 */
function fancy_file_delete_entity_info() {
  $info = array();

  $info['unmanaged_files'] = array(
    'label' => t('Unmanaged Files'),
    'base table' => 'unmanaged_files',
    'entity keys' => array(
      'id' => 'unfid',
      'label' => 'path',
    ),
    'module' => 'unmanaged_files',
  );

  return $info;
}

/**
 * Implements hook_action_info().
 */
function fancy_file_delete_action_info() {
  return array(
    'fancy_file_delete_files' => array(
      'type' => 'entity',
      'label' => t('Delete Files'),
      'configurable' => FALSE,
      'pass rows' => TRUE,
      'permissions' => array('administer fancy file delete'),
    ),
    'fancy_file_delete_files_force' => array(
      'type' => 'entity',
      'label' => t('FORCE Delete Files (No Turning Back!)'),
      'configurable' => FALSE,
      'pass rows' => TRUE,
      'permissions' => array('administer fancy file delete'),
    ),
  );
}

/**
 * Normal File Delete Action for hook_action_info.
 */
function fancy_file_delete_files(&$entity, $context) {
  module_load_include('inc', 'fancy_file_delete', 'includes/fancy_file_delete.admin');
  // Set entities to batch our way.
  $operations = array();
  foreach ($entity as $key => $value) {
    if ($key == 'fid' || $key == 'path') {
      $operations[] = array('fancy_file_delete_batch', array($value, FALSE));
    }
  }
  // Send to batch.
   _fancy_file_delete_batch_run($operations);
}

/**
 * Force File Delete Action for hook_action_info.
 */
function fancy_file_delete_files_force(&$entity, $context) {
  module_load_include('inc', 'fancy_file_delete', 'includes/fancy_file_delete.admin');
  // Set entities to batch our way.
  $operations = array();
  foreach ($entity as $key => $value) {
    if ($key == 'fid') {
      $operations[] = array('fancy_file_delete_batch', array($value, TRUE));
    }
  }
  // Send to batch.
   _fancy_file_delete_batch_run($operations);
}

/**
 * Updates the view and populates the unmanaged files table.
 */
function fancy_file_delete_unmanaged_update_view() {
  // Get all files from default standard file dir.
  $dir = variable_get('file_public_path', 'sites/default/files');
  $files = file_scan_directory($dir, '(.*?)');

  // Go through each one and replace this with a proper uri.
  foreach ($files as $file) {
    $file_check[] = str_replace($dir . '/', 'public://', $file->uri);
  }

  // All the files in the file_managed table
  $query = db_select('file_managed', 'fm')
    ->fields('fm', array('uri'))
    ->execute();

  // Set this to a numeric keyed array so we can check this easier.
  foreach ($query->fetchAll() as $result) {
    $db_check[] = $result->uri;
  }
  // Get the files not in the file_managed table.
  $results = array_diff($file_check, $db_check);

  // Go through and add this to the batch.
  if(count($results) > 0) {
    $um = db_select('unmanaged_files', 'um')
      ->fields('um', array('path'))
      ->condition('path', array($results),'IN')
      ->execute()
      ->fetchAll();

    // Go in and check it and set it as an array to check.
    $um_check = array();
    foreach ($um as $res) {
      $um_check[] = $res->path;
    }
    // Again check the difference, only want ones not in the table.
    $um_final = array_diff($results, $um_check);

    if(count($um_final) > 0) {
      $insert_unmanaged = db_insert('unmanaged_files')->fields(array('path'));
      foreach ($um_final as $key => $value) {
        $insert_unmanaged->values(array(
          'path' => $value,
        ));
      }
      $insert_unmanaged->execute();
    }
  }

}
