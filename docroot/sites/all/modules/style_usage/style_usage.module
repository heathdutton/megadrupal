<?php

/**
 * @file
 *   This module show all image style on one page
 *
 *  @developers:
 *    Gabor Szanto <hello@szantogabor.com>
 *    http://szantogabor.com
 *
 */

/**
 * Implements hook_menu().
 */
function style_usage_menu() {
  $items = array();

  $items['style_usage_preview/autocomplete'] = array(
    'title' => 'Style usage preview autocomplete',
    'page callback' => 'style_usage_preview_autocomplete',
    'access arguments' => array('administer image styles'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/style_usage.pages.inc',
  );

  $items['admin/config/media/image-styles/usage'] = array(
    'title' => 'Style usage',
    'description' => 'Show all styles in one page',
    'page callback' => 'style_usage_page',
    'access arguments' => array('administer image styles'),
    'file' => 'includes/style_usage.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,
  );

  $items['admin/config/media/image-styles/usage/details'] = array(
    'title' => 'Style usage details',
    'description' => 'Show all styles in one page',
    'page callback' => 'style_usage_page',
    'access arguments' => array('administer image styles'),
    'file' => 'includes/style_usage.pages.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  $items['admin/config/media/image-styles/usage/settings'] = array(
    'title' => 'Style usage settings',
    'description' => 'Settings of style usage details page',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('style_usage_admin_form'),
    'access arguments' => array('administer image styles'),
    'file' => 'includes/style_usage.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );

  $items['admin/config/media/image-styles/usage/preview'] = array(
    'title' => 'Image preview',
    'description' => 'View all generated image within one page',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('style_usage_preview_form'),
    'access arguments' => array('administer image styles'),
    'file' => 'includes/style_usage.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function style_usage_theme() {
  return array(
    'style_usage_preview_images' => array(
      'variables' => array(
        'styles' => NULL,
        'uri' => NULL,
      ),
    ),
  );
}

/**
 * Theme function to render an image with all styles
 */
function theme_style_usage_preview_images($vars) {
  $output = '';
  foreach ($vars['styles'] as $style) {
    $output .= '<div class="' . drupal_html_class($style['name']) . '"><h2>' . $style['name'] . '</h2>';
    $output .= theme('image_style', array('path' => $vars['uri'], 'style_name' => $style['name']));
    $output .= '</div>';
  }
  return $output;
}

/**
 * Get all style usage from views.
 *
 * @param string $style
 *   optional - the name of a style
 *
 * @return array
 *   if $style exist, returns only that style usage, else returns all views
 *   usage indexed by style name
 */
function style_usage_get_views_usage($style = NULL) {
  $views = views_get_all_views();
  $style_usage = &drupal_static(__FUNCTION__);

  if (!isset($style_usage)) {
    foreach ($views as $view) {
      foreach ($view->display as $display_name => $display) {
        if (!empty($display->display_options['fields'])) {
          foreach ($display->display_options['fields'] as $field) {
            if (!empty($field['settings']['image_style'])) {
              $style_usage[$field['settings']['image_style']][] = array(
                'view_name' => $view->human_name,
                'display' => $display_name,
                'field' => $field['id'],
              );
            }
          }
        }
      }
    }
  }

  if (!is_null($style)) {
    if (!empty($style_usage[$style])) {
      return $style_usage[$style];
    }
  }
  else {
    return $style_usage;
  }
}

/**
 * Get all style usage from entities.
 *
 * @param string $style
 *   optional - the name of a style
 *
 * @return array
 *   if $style exist, returns only that style usage, else returns all usage in
 *    entities indexed by style name
 */
function style_usage_get_entity_usage($style = NULL) {
  $instances = field_info_instances();
  $style_usage = &drupal_static(__FUNCTION__);

  if (!isset($style_usage)) {
    foreach ($instances as $instance_name => $instance) {
      foreach ($instance as $bundle_name => $bundle) {
        foreach ($bundle as $field_name => $field) {
          if (!empty($field['display'])) {
            foreach ($field['display'] as $display_name => $display) {
              if (!empty($display['settings']['image_style'])) {
                $style_usage[$display['settings']['image_style']][] = array(
                  'entity' => $instance_name,
                  'bundle' => $bundle_name,
                  'field' => $field_name,
                  'display' => $display_name,
                );
              }
            }
          }
        }
      }
    }
  }

  if (!is_null($style)) {
    if (!empty($style_usage[$style])) {
      return $style_usage[$style];
    }
  }
  else {
    return $style_usage;
  }
}

/**
 * Get all style usage from files.
 *
 * @param string $style
 *   optional - the name of a style
 *
 * @return array
 *   if $style exist, returns only that style usage, else returns all usage
 *   in files indexed by style name
 */
function style_usage_get_file_usage($style = NULL) {

  $file_types = file_entity_type_get_names();
  $style_usage = &drupal_static(__FUNCTION__);

  if (!isset($style_usage)) {
    foreach ($file_types as $file_type => $type) {
      $view_mode_settings = field_view_mode_settings('file', $file_type);
      foreach ($view_mode_settings as $view_mode => $view_mode_value) {
        $displays = file_displays($file_type, $view_mode);
        foreach ($displays as $display_name => $display) {
          if (!empty($display['settings']['image_style'])) {
            $style_usage[$display['settings']['image_style']][] = array(
              'file_type' => $file_type,
              'view_mode' => $view_mode,
              'display' => $display_name,
            );
          }
        }
      }
    }
  }

  if (!is_null($style)) {
    if (!empty($style_usage[$style])) {
      return $style_usage[$style];
    }
  }
  else {
    return $style_usage;
  }
}
