<?php

/**
 * @file
 * html_title_trash.module
 *
 * Adds some more elements to html_title's core set of semantic elements and
 * makes these work for block titles as well as node titles.
 */

/**
 * Implements hook_form_FORMID_alter().
 */
function html_title_trash_form_html_title_admin_settings_alter(&$form, &$form_state) {
  $options = &$form['html_title_allowed_elements']['#options'];

  $info_lines = drupal_parse_info_file(drupal_get_path('module', 'html_title_trash') . '/html_title_trash.info');

  if (!empty($info_lines['html_title_extra_elements_allowed'])) {
    foreach ($info_lines['html_title_extra_elements_allowed'] as $value) {
      $element = check_plain(trim($value));
      $options[$element] = check_plain("<$element>");
    }
    ksort($options);
  }

  $form['html_title_allowed_elements']['#description'] = t('<a href="@url" target="_w3schools">Examples</a> of what the above tags do.', array(
    '@url' => url('http://www.w3schools.com/tags/ref_byfunc.asp'))
  );
}

/**
 * Implements hook_page_alter().
 *
 * Called from drupal_render_page().
 */
function html_title_trash_page_alter(&$page) {
  @array_walk_recursive($page, '_html_title_trash_filter_block_title');
}

/**
 * Implements hook_preprocess_page().
 *
 * Called from drupal_render_page(), after hook_page_alter().
 * Could be used instead of the above.
 *
function html_title_trash_preprocess_page(&$vars) {
   @array_walk_recursive($vars, '_html_title_trash_filter_block_title');
}
 */

/**
 * Restores allowed HTML elements in block titles and let them do their thing.
 *
 * @param mixed $page_element
 * @param string $key
 */
function _html_title_trash_filter_block_title(&$page_element, $key) {
  if (is_object($page_element) && $key == '#block') {
    if (!empty($page_element->subject)) {
      $page_element->subject = html_title_trash_filter_xss_checked_plain($page_element->subject);
    }
    // title normally does not need this treatment.
    //if (!empty($page_element->title)) {
    //  $page_element->title = html_title_trash_filter_xss_checked_plain($page_element->title);
    //}
  }
}

/**
 * Apply filter_xss() to a string that was treated with check_plain().
 *
 * @param string $string
 * @return string, with only allowed HTML elements remaining, others are wiped
 */
function html_title_trash_filter_xss_checked_plain($string) {
  // See html_title.module
  $elements = variable_get('html_title_allowed_elements', array('em', 'sub', 'sup'));
  $decoded = htmlspecialchars_decode($string);
  return filter_xss($decoded, $elements);
}

/**
 * Implements hook_form_FORMID_alter().
 *
 * Strips out any tags from node titles on the /admin/content page.
 */
function html_title_trash_form_node_admin_content_alter(&$form, &$form_state) {
  if (!empty($form['admin']['nodes']['#options'])) {
    foreach ($form['admin']['nodes']['#options'] as &$node) {
      if (!empty($node['title']['data']['#title'])) {
        $node['title']['data']['#title'] = strip_tags($node['title']['data']['#title']);
      }
    }
  }
}

/**
 * Implements hook_block_info_alter().
 *
 * Strips out any tags from block descriptions on admin/structure/block page.
 */
function html_title_trash_block_info_alter(&$current_blocks, $theme, $code_blocks) {
  if (!empty($current_blocks['block'])) {
    foreach ($current_blocks['block'] as &$block) {
      if (!empty($block['info'])) {
        $block['info'] = strip_tags($block['info']);
      }
    }
  }
}