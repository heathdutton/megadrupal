<?php

/**
 * @file
 * Integration with the Accessible Mega Menu jQuery plugin for mega menus.
 */

/**
 * Implements hook_block_info().
 */
function accessible_mega_menu_block_info() {
  $menus = menu_get_menus();
  $blocks = array();

  // Create an Accessible Mega Menu block for each menu.
  foreach ($menus as $name => $title) {
    $blocks[$name]['info'] = t($title) . ' ' . t('(Accessible Mega Menu)');
    // Menu blocks can't be cached because each menu item can have a custom
    // access callback. menu.inc manages its own caching.
    $blocks[$name]['cache'] = DRUPAL_NO_CACHE;
  }

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function accessible_mega_menu_block_view($delta = '') {
  $menus = menu_get_menus();
  $block = array();

  // Load the menu and all it's data.
  $menu = menu_tree_all_data($delta);

  // Allow i18n module to translate strings where available.
  if (module_exists('i18n_menu')) {
    $menu = i18n_menu_localize_tree($menu);
  }

  // Convert the menu tree to a renderable array.
  $menu = accessible_mega_menu_tree_output($menu);

  $block['subject'] = check_plain($menus[$delta]);
  $block['content'] = $menu;

  // Add contextual links for this block.
  if (!empty($block['content'])) {
    $block['content']['#contextual_links']['menu'] = array('admin/structure/menu/manage', array($delta));
  }

  return $block;
}

/**
 * Returns a structure for rendering an accessible mega menu tree.
 *
 * The menu item's LI element is given one of the following classes:
 * - expanded: The menu item is showing its submenu.
 * - collapsed: The menu item has a submenu which is not shown.
 * - leaf: The menu item has no submenu.
 *
 * @param $tree
 *   A data structure representing the tree as returned from menu_tree_data.
 *
 * @return
 *   A structured array to be rendered by drupal_render().
 *
 * @see menu_tree_output()
 */
function accessible_mega_menu_tree_output($tree) {
  $build = array();
  $items = array();

  // Pull out just the menu links we are going to render so that we get an
  // accurate count for the first/last classes.
  foreach ($tree as $data) {
    if ($data['link']['access'] && !$data['link']['hidden']) {
      $items[] = $data;
    }
  }

  $router_item = menu_get_item();
  $num_items = count($items);
  foreach ($items as $i => $data) {
    $class = array();
    if ($i == 0) {
      $class[] = 'first';
    }
    if ($i == $num_items - 1) {
      $class[] = 'last';
    }
    // Set a class for the <li>-tag. Since $data['below'] may contain local
    // tasks, only set 'expanded' class if the link also has children within
    // the current menu.
    if ($data['link']['has_children'] && $data['below']) {
      $class[] = 'expanded';
    }
    elseif ($data['link']['has_children']) {
      $class[] = 'collapsed';
    }
    else {
      $class[] = 'leaf';
    }
    // Set a class if the link is in the active trail.
    if ($data['link']['in_active_trail']) {
      $class[] = 'active-trail';
      $data['link']['localized_options']['attributes']['class'][] = 'active-trail';
    }
    // Normally, l() compares the href of every link with $_GET['q'] and sets
    // the active class accordingly. But local tasks do not appear in menu
    // trees, so if the current path is a local task, and this link is its tab
    // root, then we have to set the class manually.
    if ($data['link']['href'] == $router_item['tab_root_href'] && $data['link']['href'] != $_GET['q']) {
      $data['link']['localized_options']['attributes']['class'][] = 'active';
    }

    if ($data['link']['depth'] == 1) {
      // Set the Accessible Mega Menu Top Nav Item class.
      $class[] = 'accessible-megamenu-top-nav-item';
      // Allow menu-specific theme overrides.
      $element['#theme'] = 'accessible_mega_menu_top_nav_item__' . strtr($data['link']['menu_name'], '-', '_');
    }
    else {
      $element['#theme'] = 'menu_link__' . strtr($data['link']['menu_name'], '-', '_');
    }
    $element['#attributes']['class'] = $class;
    $element['#title'] = $data['link']['title'];
    $element['#href'] = $data['link']['href'];
    $element['#localized_options'] = !empty($data['link']['localized_options']) ? $data['link']['localized_options'] : array();
    $element['#below'] = $data['below'] ? accessible_mega_menu_tree_output($data['below']) : $data['below'];
    $element['#original_link'] = $data['link'];
    // Index using the link's unique mlid.
    $build[$data['link']['mlid']] = $element;
  }
  if ($build) {
    // Make sure drupal_render() does not re-order the links.
    $build['#sorted'] = TRUE;
    // Add the theme wrapper for outer markup.
    // Allow menu-specific theme overrides.
    $build['#theme_wrappers'][] = 'accessible_mega_menu_tree__' . strtr($data['link']['menu_name'], '-', '_');
  }

  return $build;
}

/**
 * Implements hook_theme().
 */
function accessible_mega_menu_theme($existing, $type, $theme, $path) {
  return array(
    'accessible_mega_menu_top_nav_item' => array(
      'render element' => 'element',
    ),
    'accessible_mega_menu_tree' => array(
      'render element' => 'tree',
    ),
  );
}

/**
 * Implements template_preprocess_HOOK().
 *
 * Implements template_preprocess_HOOK() for theme_accessible_mega_menu_tree().
 */
function template_preprocess_accessible_mega_menu_tree(&$variables) {
  $loaded = &drupal_static('libraries_load', array());

  // If the library hasn't yet been loaded.
  if (!isset($loaded['accessible_mega_menu'])) {
    $library = libraries_load('accessible_mega_menu');

    // If the library was loaded successfully.
    if ($library && $library['loaded']) {
      // Initialize the Accessible Mega Menu.
      drupal_add_js('
      (function($) {$(document).ready(function() {
        $(".accessible-megamenu").parent().accessibleMegaMenu();
      });}(jQuery));', 'inline');
    }
    else {
      watchdog('accessible_mega_menu', t('The Accessible Mega Menu library must be properly installed by an administrator before it can be used.'), WATCHDOG_ERROR);
    }
  }

  $tree = $variables['tree'];
  $child = current(element_children($tree));
  $attributes = array();

  // Set classes based on link depth.
  if ($tree[$child]['#original_link']['depth'] == 1) {
    $attributes['class'][] = 'accessible-megamenu';
  }
  else if ($tree[$child]['#original_link']['depth'] == 2) {
    $attributes['class'][] = 'accessible-megamenu-panel-group';
  }

  $variables['attributes'] = $attributes;
  $variables['tree'] = $variables['tree']['#children'];
}

/**
 * Outputs HTML for an accessible mega menu.
 */
function theme_accessible_mega_menu_tree($variables) {
  return '<ul' . drupal_attributes($variables['attributes']) . '>' . $variables['tree'] . '</ul>';
}

/**
 * Outputs HTML for an accessible mega menu top nav item.
 */
function theme_accessible_mega_menu_top_nav_item(array $variables) {
  $element = $variables['element'];
  $sub_menu = '';

  if ($element['#below']) {
    $sub_menu = '<div class="accessible-megamenu-panel">' . drupal_render($element['#below']) . '</div>';
  }
  $output = l($element['#title'], $element['#href'], $element['#localized_options']);
  return '<li' . drupal_attributes($element['#attributes']) . '>' . $output . $sub_menu . "</li>\n";
}

/**
 * Implements hook_libraries_info().
 */
function accessible_mega_menu_libraries_info() {
  $libraries['accessible_mega_menu'] = array(
    'name' => 'Accessible Mega Menu jQuery plugin',
    'vendor url' => 'http://adobe-accessibility.github.io/Accessible-Mega-Menu',
    'download url' => 'https://github.com/adobe-accessibility/Accessible-Mega-Menu',
    'version arguments' => array(
      'file' => 'js/jquery-accessibleMegaMenu.js',
      'pattern' => '/version ([0-9a-zA-Z\.-]+)/',
      'lines' => 50,
    ),
    'files' => array(
      'css' => array(
        'css/megamenu.css',
      ),
      'js' => array(
        'js/jquery-accessibleMegaMenu.js' => array('scope' => 'footer'),
      ),
    ),
  );

  return $libraries;
}
