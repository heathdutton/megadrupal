<?php

/**
 * @file
 * Add new field which allows rendering images as maps,
 * using Google's GMap engine.
 */

define('GMAP_IMAGE_FIELD_GOOGLE_MAP_JS', 'http://maps.google.com/maps/api/js?v=3.exp&sensor=false');

define('GMAP_IMAGE_FIELD_IMAGICK_DEFAULT_EXEC', (string) variable_get('gmap_image_field_convert_executable', (strtoupper(substr(PHP_OS, 0, 3)) === 'WIN' ? 'convert.exe' : 'convert')));

// Load field related hooks.
module_load_include('inc', 'gmap_image_field', 'gmap_image_field.field');

/**
 * Implements hook_permission().
 */
function gmap_image_field_permission() {

  $permissions = array();

  $permissions['gmap image field administer'] = array(
    'title' => t('Administer GMap Image Field'),
    'description' => t('Allow user to administrate the gmap image field settings and use the autocompleter.'),
  );

  return $permissions;
}

/**
 * Implements hook_menu().
 */
function gmap_image_field_menu() {

  $items = array();

  $items['admin/config/media/gmap-image-field'] = array(
    'title' => 'GMap image field',
    'page callback' => array('drupal_get_form'),
    'page arguments' => array('gmap_image_field_settings_form'),
    'file' => 'gmap_image_field.admin.inc',
    'access arguments' => array('gmap image field administer'),
  );

  $items['admin/ajax/gmap-image-field/autocomplete/%/%'] = array(
    'page callback' => '_gmap_image_field_autocomplete',
    'page arguments' => array(4, 5),
    'access arguments' => array('gmap image field administer'),
    'type' => MENU_CALLBACK,
  );

  $items[drupal_get_path('module', 'gmap_image_field') . '/gmap-image-field-feed'] = array(
    'page callback' => '_gmap_image_field_external_feed',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function gmap_image_field_theme() {
  return array(
    'gmap_image_field_show_map' => array(
      'variables' => array('map' => NULL),
      'template' => 'templates/gmap-image-field',
    ),
  );
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Collect all maps, and give drupal settings for them,
 * also include required assets.
 */
function gmap_image_field_preprocess_gmap_image_field_show_map(&$variables) {

  static $all_js_settings = array();
  $all_js_settings[$variables['map']['fid']] = $variables['map'];

  if (variable_get('gmap_image_field_export_feed', FALSE)) {
    cache_set('gmap-image-field-feed-' . md5(current_path()), $all_js_settings, 'cache', CACHE_TEMPORARY);
  }
  else {
    drupal_add_js(array('gmapImageField' => $all_js_settings), 'setting');
  }

  _gmap_image_field_require_assets();
}

/**
 * Implements hook_ctools_plugin_directory().
 *
 * It simply tells panels where to find the .inc files that define various
 * args, contexts, content_types. In this case the subdirectories of
 * ctools_plugins/panels are used.
 */
function gmap_image_field_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return 'plugins/' . $plugin;
  }
}

/**
 * Pane settings callback.
 *
 * see plugins/content_types/gmap_image_field.inc
 * Because panel's settings not boot the plugin file, it should here,
 * or have to include the pane file.
 *
 * @param array $form
 *   form element
 * @param array $form_state
 *   current form state
 *
 * @return array
 *   form element
 */
function gmap_image_field_pane_settings_form_image_changed($form, $form_state) {
  module_load_include('inc', 'gmap_image_field', 'plugins/content_types/gmap_image_field');
  drupal_process_form($form['#form_id'], $form, $form_state);
  return $form['image'];
}

/**
 * Implements hook_field_attach_prepare_translation_alter().
 *
 * Clear gmap_image populated value.
 * This prevent from refering of the gmap_image_field value.
 */
function gmap_image_field_field_attach_prepare_translation_alter(&$entity, $context) {

  foreach (field_info_fields() as $field) {
    if ($field['type'] == 'gmap_image' && property_exists($entity, $field['field_name'])) {
      $entity->{$field['field_name']} = array(LANGUAGE_NONE => array());
    }
  }
}

/**
 * Implements hook_clone_node_alter().
 *
 * Clear gmap_image populated value.
 * This prevent from refering of the gmap_image_field value.
 */
function gmap_image_field_clone_node_alter(&$node, &$context) {
  foreach (field_info_fields() as $field) {
    if ($field['type'] == 'gmap_image' && property_exists($node, $field['field_name'])) {
      $node->{$field['field_name']} = array(LANGUAGE_NONE => array());
    }
  }
}

/**
 * Autocomplete callback.
 *
 * @param string $field_name
 *   field name.
 * @param string $string
 *   field string.
 */
function _gmap_image_field_autocomplete($field_name, $string) {

  $gmap_image_fields = field_info_fields();
  if ($field_name && $field_name != '0' && $gmap_image_fields[$field_name]) {
    $gmap_image_fields = array(
      $field_name => $gmap_image_fields[$field_name],
    );
  }

  $nodes_to_load = array();
  foreach ($gmap_image_fields as $field_name => $field_data) {
    if (!empty($field_data['type']) && $field_data['type'] == 'gmap_image') {
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'node');
      $query->fieldCondition($field_name);
      $query->propertyCondition('title', '%' . $string . '%', 'LIKE');
      $result = $query->execute();
      if (!empty($result['node'])) {
        $nodes_to_load = array_merge($nodes_to_load, array_keys($result['node']));
      }
    }
  }

  $matches = array();
  if ($nodes_to_load) {
    $nodes = node_load_multiple($nodes_to_load);
    foreach ($nodes as $nid => $node) {
      if (node_access('view', $node)) {
        foreach ($node as $node_field_name => $node_field_data) {
          if (array_key_exists($node_field_name, $gmap_image_fields) && !empty($node_field_data[LANGUAGE_NONE][0])) {
            $title = sprintf('%s (%s)', $node->title, $node_field_data[LANGUAGE_NONE][0]['filename']);
            $key = sprintf('%s [%s: %d]', $title, $node_field_name, $nid);
            $matches[$key] = $title;
          }
        }
      }
    }
  }

  drupal_json_output($matches);
  exit;
}

/**
 * Load required javascripts and stylesheets.
 */
function _gmap_image_field_require_assets() {
  static $assets_already_added = FALSE;
  if ($assets_already_added === FALSE) {
    // Load css only on frontend.
    if ((arg(0) !== 'admin' && !(arg(0) == 'node' && arg(2) == 'edit')) && !variable_get('gmap_image_field_disable_module_css', FALSE)) {
      $stylesheet = drupal_get_path('module', 'gmap_image_field') . '/gmap-image-field.css';
      drupal_alter('gmap_image_field_assets_css', $stylesheet);
      drupal_add_css($stylesheet, array('group' => CSS_DEFAULT));
    }

    if (variable_get('gmap_image_field_export_feed', FALSE)) {
      $feed_js = url(drupal_get_path('module', 'gmap_image_field') . '/gmap-image-field-feed/' . md5(current_path()), array('absolute' => TRUE));
      drupal_add_js($feed_js, array('scope' => 'footer', 'type' => 'external'));
    }

    drupal_add_js(GMAP_IMAGE_FIELD_GOOGLE_MAP_JS, array('scope' => 'footer', 'type' => 'external'));

    drupal_add_js(drupal_get_path('module', 'gmap_image_field') . '/gmap-image-field.js', array('scope' => 'footer'));
    $assets_already_added = TRUE;
  }
}

/**
 * Build map settings for a image, by node and field name.
 *
 * @param int|object $node
 *   node nid or node object.
 * @param string|array $field
 *   field name or field object.
 * @param object $gmap_image_field_value
 *   field value or null to retrieve it by the function (optional).
 * @param array $display_settings
 *   optional override default formatter settings (optional).
 * @param string $id
 *   optional override the map image id (optional).
 *
 * @return array|NULL
 *   map settings.
 */
function _gmap_image_field_get_map_settings($node, $field, $gmap_image_field_value = NULL, $display_settings = array(), $id = NULL) {
  // Support node translation.
  if (module_exists('translation')) {
    global $language;
    $nid = empty($node->nid) ? $node : $node->nid;
    if ($translations = module_invoke('translation', 'node_get_translations', $nid)) {
      if (!empty($translations[$language->language]->nid)) {
        $nid = $translations[$language->language]->nid;
        $node = node_load($nid);
      }
    }
  }

  if (is_numeric($node)) {
    $node = node_load($node);
  }

  if (is_string($field)) {
    $field = field_info_field($field);
  }

  if (!empty($node->nid) && !empty($field['field_name'])) {

    if (empty($gmap_image_field_value)) {
      $gmap_image_field_value = field_get_items('node', $node, $field['field_name']);
      $gmap_image_field_value = (array) array_shift($gmap_image_field_value);
    }

    if (!empty($gmap_image_field_value['fid'])) {

      $item_trim_others = array_keys($field['columns']);
      array_push($item_trim_others, 'filename', 'uri');

      $gmap_image_field_value = array_intersect_key($gmap_image_field_value, drupal_map_assoc($item_trim_others));

      $gmap_image_field_value = $gmap_image_field_value;
      $default_formatter_settings = gmap_image_field_field_formatter_info();

      if (!is_array($display_settings)) {
        $display_settings = array();
      }

      $map_settings = array_merge($default_formatter_settings['gmap_image_formatter_default']['settings'], $field['settings'], $gmap_image_field_value, $display_settings);

      $map_settings['description'] = filter_xss($map_settings['description']);
      $map_settings['tile_base'] = file_create_url(drupal_dirname($map_settings['uri']) . '/' . drupal_basename($map_settings['uri'], '.' . pathinfo($map_settings['filename'], PATHINFO_EXTENSION)));
      $map_settings['zoom'] = intval($map_settings['zoom']);
      $map_settings['maxzoomlevel'] = (int) min($map_settings['maxzoomlevel'], $gmap_image_field_value['maxzoomlevel']);
      $map_settings['minzoomlevel'] = (int) max($map_settings['minzoomlevel'], $gmap_image_field_value['minzoomlevel']);
      $map_settings['tile_size'] = (int) $map_settings['tile_size'];
      $map_settings['pin_popup_style'] = variable_get('gmap_image_field_popups', 'google');

      // Get zoomlevel 0 tile size,
      // because it is exact the dimensions of the tiles.
      $zl0_file = drupal_dirname($map_settings['uri']) . '/' . drupal_basename($map_settings['uri'], '.' . pathinfo($map_settings['filename'], PATHINFO_EXTENSION)) . '/0/0_0.' . $map_settings['tile_format'];
      if (($tile0info = getimagesize($zl0_file))) {
        $map_settings['tile_size_h'] = $tile0info[1];
      }

      $map_settings['nid'] = $node->nid;
      $map_settings['field_name'] = $field['field_name'];
      $map_settings['field_id'] = $field['id'];
      $map_settings['id'] = $id ? $id : 'gmap-image-field-placeholder-' . $field['field_name'] . '-' . $node->nid;

      // Alter the settings if something is need this.
      drupal_alter('gmap_image_field_map_settings', $map_settings);

      return $map_settings;
    }
  }
  return NULL;
}

/**
 * Callback in case we enabled exporting js feed.
 *
 * @param string $hash
 *   hash or text
 */
function _gmap_image_field_external_feed($hash = '') {
  drupal_add_http_header('Content-Type', 'application/json; utf-8');
  $data = cache_get('gmap-image-field-feed-' . $hash, 'cache');
  if (!empty($data->data)) {
    echo 'Drupal.settings.gmapImageField = ' , drupal_json_encode($data->data), ';';
  }
  exit;
}

/**
 * Check if PHP allows shell_exec().
 *
 * @return bool
 *   availability of shell_exec()
 */
function _gmap_image_field_check_shell_exec() {
  return function_exists('system') && function_exists('shell_exec');
}

/**
 * Check if ImageMagick is available.
 *
 * @return bool
 *   avialability for imagemagick
 */
function _gmap_image_field_check_image_magick() {
  $convert_executable = variable_get('gmap_image_field_convert_executable', GMAP_IMAGE_FIELD_IMAGICK_DEFAULT_EXEC);
  $o = shell_exec(escapeshellcmd($convert_executable) . ' -version');
  return $o && strpos($o, 'Version:') !== FALSE;
}
