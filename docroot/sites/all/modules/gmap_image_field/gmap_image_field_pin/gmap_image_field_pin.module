<?php

/**
 * @file
 * Add new field which allows rendering images as maps,
 * using Google's GMap engine.
 */


/**
 * Implements hook_theme().
 */
function gmap_image_field_pin_theme() {
  return array(
    'gmap_image_field_pin_content' => array(
      'variables' => array('node' => NULL),
      'template' => 'templates/gmap-image-field-pin-content',
    ),
  );
}

/**
 * Implements hook_gmap_image_field_map_settings_alter().
 *
 * Load all pins for a image map settings.
 * see gmap_image_field_map_settings()
 */
function gmap_image_field_pin_gmap_image_field_map_settings_alter(&$gmap_image_field_map_settings) {

  $db_query = db_select('gmap_image_field_pins', 'gifp');
  $db_query->leftJoin('node', 'n', 'n.nid = gifp.pin_nid');
  $db_query->fields('gifp');
  $db_query->addField('n', 'title');
  $db_query->condition('gifp.image_field_id', $gmap_image_field_map_settings['field_id']);
  $db_query->condition('gifp.image_nid', $gmap_image_field_map_settings['nid']);
  $pins = $db_query->execute()->fetchAll();
  $gmap_image_field_map_settings['pins'] = array();
  foreach ($pins as $pin) {
    $gmap_image_field_map_settings['pins'][] = array(
      'lat' => $pin->lat,
      'lng' => $pin->lng,
      'icon' => gmap_image_field_pin_icons($pin->icon),
      'title' => $pin->title,
      'description' => theme('gmap_image_field_pin_content', array('node' => node_load($pin->pin_nid))),
    );
  }

}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function gmap_image_field_pin_form_node_form_alter(&$form, $form_state) {
  $form['gmap_image_field_pin'] = array(
    '#tree' => TRUE,
  );

  $require_js = FALSE;
  $map_js = array();

  // Load all node pins.
  $node_pins = empty($form['#node']->nid) ? array() : _gmap_image_field_pin_node_pins($form['#node']->nid);

  // Autopopuplate gmap_image_field related fields when translating.
  if (module_exists('translation') && empty($form['#node']->nid) && !empty($form['#node']->translation_source)
    && empty($node_pins) && $form['#node']->language !== $form['#node']->translation_source->language) {

    $node_pins = _gmap_image_field_pin_node_pins($form['#node']->translation_source->nid);
    if ($node_pins) {
      $translated_image_nid = NULL;
      $first_pin = current($node_pins);
      if ($translations = module_invoke('translation', 'node_get_translations', $first_pin->image_nid)) {
        if (!empty($translations[$form['#node']->language]->nid)) {
          $translated_image_nid = $translations[$form['#node']->language]->nid;
        }
      }
      if ($translated_image_nid) {
        foreach ($node_pins as $i => $node_pin) {
          $node_pins[$i]->image_nid = $translated_image_nid;
        }
      }
    }
  }

  $i = 0;
  // Create vertical tab for node settings, for EVERY field of type gmap_image,
  // that in it's setting's bundles, the current editing node type.
  foreach (field_info_fields() as $field) {
    if ($field['type'] == 'gmap_image' && !empty($field['settings']['bundles'][$form['#node']->type])) {

      $require_js = TRUE;

      $map_settings = NULL;

      $pins_fieldset_id = 'gmap_image_field_pins_' . $field['field_name'];
      $pins_current_map_id = $pins_fieldset_id . '-map';

      $the_pin = empty($node_pins[$field['id']]) ? NULL : $node_pins[$field['id']];

      if (!empty($form_state['triggering_element']['#value'])) {
        if (preg_match('#' . preg_quote('[' . $field['field_name'] . ': ') . '(\d+)\]$#', $form_state['triggering_element']['#value'], $matches)) {
          $the_pin = (object) $the_pin;
          $the_pin->image_nid = $matches[1];
          $the_pin->image_field_id = $field['id'];
        }
      }

      if ($the_pin) {
        $default_map_settings = array(
          '_pin_icons' => gmap_image_field_pin_icons(),
          'repeat_map' => FALSE,
          'bounds_lock' => FALSE,
          'custom_controls' => FALSE,
          'comlete_disable_controls' => FALSE,
          'map_width' => '100%',
          'map_overview' => FALSE,
        );
        $map_settings = _gmap_image_field_get_map_settings($the_pin->image_nid, $field, NULL, $default_map_settings, $pins_current_map_id);

        // If map, clear pins, may be should be setting for this.
        if ($map_settings) {
          unset($map_settings['pins']);
        }
      }

      $form['gmap_image_field_pin'][$pins_fieldset_id] = array(
        '#type' => 'fieldset',
        '#title' => t('Pin on GMap image (:field_name)', array(':field_name' => $field['field_name'])),
        '#group' => 'additional_settings',
        '#attributes' => array(
          'class' => array('edit-gmap-image-field-pins'),
        ),
        '#weight' => -100 + ($i++),
      );

      $form['gmap_image_field_pin'][$pins_fieldset_id]['field_id'] = array(
        '#type' => 'value',
        '#value' => $field['id'],
      );

      $icons = array();
      foreach (gmap_image_field_pin_icons() as $icon_id => $icon) {
        $icons[$icon_id] = $icon['name'];
      }
      $form['gmap_image_field_pin'][$pins_fieldset_id]['icon'] = array(
        '#type' => 'select',
        '#title' => t('Icon'),
        '#options' => $icons,
        '#default_value' => $the_pin ? $the_pin->icon : '',
        '#id' => $pins_current_map_id . '-icon-changer',
      );

      // If we had only one icon in the array, then not show the selector.
      if (count($form['gmap_image_field_pin'][$pins_fieldset_id]['icon']['#options']) === 1) {
        $form['gmap_image_field_pin'][$pins_fieldset_id]['icon']['#type'] = 'value';
        $form['gmap_image_field_pin'][$pins_fieldset_id]['icon']['#value'] = $form['gmap_image_field_pin'][$pins_fieldset_id]['icon']['#default_value'];
      }

      $image_title = '';
      if ($the_pin && empty($form_state['triggering_element'])) {
        $image_node = node_load($the_pin->image_nid);
        $image_title = sprintf('%s [%s: %d]', $image_node->title, $field['field_name'], $the_pin->image_nid);
      }

      $form['gmap_image_field_pin'][$pins_fieldset_id]['image_title'] = array(
        '#title' => 'Image',
        '#type' => 'textfield',
        '#autocomplete_path' => 'admin/ajax/gmap-image-field/autocomplete/' . $field['field_name'],
        '#default_value' => $image_title,
        '#ajax' => array(
          'callback' => 'gmap_image_field_pin_form_node_form_alter_image_preview_regenerate',
          'wrapper' => $pins_current_map_id,
          'method' => 'replace',
          'vt_name_id' => $pins_fieldset_id,
        ),
      );

      $latlng = $the_pin ? ($the_pin->lat . ', ' . $the_pin->lng) : '';
      $form['gmap_image_field_pin'][$pins_fieldset_id]['latlng'] = array(
        '#type' => 'textfield',
        '#title' => t('Position (latitude, longitude)'),
        '#id' => $pins_current_map_id . '-latlng-input',
        '#default_value' => $latlng,
        '#size' => 10,
        '#maxlength' => 100,
      );

      $form['gmap_image_field_pin'][$pins_fieldset_id]['image_preview'] = array(
        '#prefix' => '<div id="' . $pins_current_map_id . '" class="gmap-image-field-pin-edit-placeholder">' ,
        '#suffix' => '</div>',
        '#type' => 'markup',
        '#markup' => '',
        '#attached' => array(
          'js' => array(
            array(
              'data' => array('gmapImageFieldPinMaps' => array($field['id'] => $map_settings)),
              'type' => 'setting',
            ),
          ),
        ),
      );
    }
  }

  if ($require_js) {

    // Load scripts only once.
    if (empty($form_state['triggering_element']['#value'])) {
      _gmap_image_field_require_assets();
    }

    $form['gmap_image_field_pin']['#attached']['js'][] = array(
      'data' => drupal_get_path('module', 'gmap_image_field_pin') . '/gmap-image-field-pin.js',
      'type' => 'file',
    );
  }
}

/**
 * AJAX callback that rerender the image map for pinning UI.
 *
 * @param array $form
 *   form element
 * @param array $form_state
 *   current form state
 *
 * @return array
 *   form element
 */
function gmap_image_field_pin_form_node_form_alter_image_preview_regenerate($form, $form_state) {
  $vt_name_id = $form_state['triggering_element']['#ajax']['vt_name_id'];
  return $form['gmap_image_field_pin'][$vt_name_id]['image_preview'];
}

/**
 * Implements hook_node_insert().
 */
function gmap_image_field_pin_node_insert($node) {

  if (empty($node->gmap_image_field_pin) || !is_array($node->gmap_image_field_pin)) {
    return;
  }

  foreach ($node->gmap_image_field_pin as $image_field) {

    // Check if node could be pin.
    $field = field_info_field_by_id($image_field['field_id']);
    if (!empty($field['settings']['bundles'][$node->type])) {

      $image_field['latlng'] = trim($image_field['latlng']);
      if ($image_field['latlng']) {
        if (preg_match('#\[(?:[\w\-\_]+)\: (\d+)\]$#', $image_field['image_title'], $matches)) {
          $image_nid = $matches[1];
          $latlng = explode(',', $image_field['latlng']);
          $latlng = array_map('trim', $latlng);
          $laglng = array_map('floatval', $latlng);
          $the_fields = array(
            'pin_nid' => $node->nid,
            'image_field_id' => $image_field['field_id'],
            'image_nid' => $image_nid,
            'icon' => $image_field['icon'],
            'lat' => $latlng[0],
            'lng' => $latlng[1],
          );
          db_insert('gmap_image_field_pins')->fields($the_fields)->execute();
        }
      }
    }
  }
}

/**
 * Implements hook_node_update().
 */
function gmap_image_field_pin_node_update($node) {
  gmap_image_field_pin_node_delete($node);
  gmap_image_field_pin_node_insert($node);
}

/**
 * Implements hook_node_delete().
 */
function gmap_image_field_pin_node_delete($node) {
  db_delete('gmap_image_field_pins')->condition('pin_nid', $node->nid)->execute();
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function gmap_image_field_pin_form_field_ui_field_settings_form_alter(&$form, &$form_state, $form_id) {
  if (!empty($form['field']['type']) && $form['field']['type']['#value'] === 'gmap_image') {
    $field = field_info_field($form['field']['field_name']['#value']);
    $skip_node_types = empty($field['bundles']['node']) ? array() : $field['bundles']['node'];
    $form['field']['settings']['bundles'] = array(
      '#title' => t('Allow pinning nodes on this image'),
      '#type' => 'checkboxes',
      '#options' => array_diff_key(node_type_get_names(), array_flip($skip_node_types)),
      '#default_value' => $field['settings']['bundles'],
    );
  }
}

/**
 * Retrieve a list of pins for node, grouped by field id.
 *
 * @param int $pin_nid
 *   node nid
 *
 * @return array
 *   list of markers
 */
function _gmap_image_field_pin_node_pins($pin_nid) {
  $db_query = db_select('gmap_image_field_pins', 'gifp');
  $db_query->fields('gifp');
  $db_query->condition('gifp.pin_nid', $pin_nid);
  $node_pins = array();
  foreach ($db_query->execute()->fetchAll() as $pin) {
    $node_pins[$pin->image_field_id] = $pin;
  }
  return $node_pins;
}

/**
 * Get list of supportet marker icons.
 *
 * @param string $icon
 *   optional icon if we need to get the icon url.
 *
 * @return array|string
 *   list of icons or string icon name
 */
function gmap_image_field_pin_icons($icon = NULL) {

  static $pin_icons = NULL;
  if ($pin_icons === NULL) {
    $pin_icons = array(
      '' => array(
        'name' => 'Google\'s default',
        'url' => '',
      ),
      'thumbtack' => array(
        'name' => t('Thumbtack'),
        'url' => file_create_url(drupal_get_path('module', 'gmap_image_field_pin') . '/pinicons/thumbtack.png'),
      ),
      'redlabel' => array(
        'name' => t('Red Label'),
        'url' => file_create_url(drupal_get_path('module', 'gmap_image_field_pin') . '/pinicons/redlabel.png'),
      ),
      'mlin' => array(
        'name' => t('Mlin'),
        'url' => file_create_url(drupal_get_path('module', 'gmap_image_field_pin') . '/pinicons/mlin.png'),
      ),
    );

    drupal_alter('gmap_image_field_pin_icons', $pin_icons);
  }

  if ($icon === NULL) {
    return $pin_icons;
  }
  else {
    return empty($pin_icons[$icon]) ? NULL : $pin_icons[$icon]['url'];
  }

  return $pin_icons;
}
