<?php

/**
 * @file
 * Create database for the gmap field
 */


/**
 * Implements hook_field_schema().
 */
function gmap_image_field_field_schema($field) {
  return array(
    'columns' => array(
      'fid' => array(
        'description' => 'The {file_managed}.fid being referenced in this field.',
        'type' => 'int',
        'not null' => FALSE,
        'unsigned' => TRUE,
      ),
      'background' => array(
        'description' => 'HTML color in format of name or #RGB',
        'type' => 'varchar',
        'length' => 12,
        'not null' => FALSE,
      ),
      'center' => array(
        'description' => 'Position of center (X,Y)',
        'type' => 'varchar',
        'length' => 64,
        'not null' => FALSE,
      ),
      'minzoomlevel' => array(
        'description' => 'Minimial possible zoomlevel (in case great than 0)',
        'type' => 'int',
        'default' => 0,
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
      'maxzoomlevel' => array(
        'description' => 'Maxmimum possible zoomlevel',
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
      'zoom' => array(
        'description' => 'Image initial zoomlevel',
        'type' => 'int',
        'default' => 0,
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
      'description' => array(
        'description' => 'A description of the file.',
        'type' => 'text',
        'not null' => FALSE,
      ),
    ),
    'indexes' => array(
      'fid' => array('fid'),
    ),
    'foreign keys' => array(
      'fid' => array(
        'table' => 'file_managed',
        'columns' => array('fid' => 'fid'),
      ),
    ),
  );
}

/**
 * Implements hook_requirements().
 */
function gmap_image_field_requirements($phase) {
  $requirements = array();
  $t = get_t();
  if ($phase == 'runtime') {
    if (!_gmap_image_field_check_shell_exec()) {
      $requirements['gmap_image_field_shell_exec'] = array(
        'title' => $t('GMap Image Field - Shell Exec'),
        'value' => $t('shell_exec() not allowed'),
        'severity' => REQUIREMENT_ERROR,
        'description' => sprintf($t('%s should be allowed from the php.ini'), l($t('shell_exec()'), 'http://www.php.net/manual/en/ref.exec.php')),
      );
    }
    if (!_gmap_image_field_check_image_magick()) {
      $executable = variable_get('gmap_image_field_convert_executable', GMAP_IMAGE_FIELD_IMAGICK_DEFAULT_EXEC);
      $message = 'ImageMagick executables (%s) not found, the module can not do maps' .
          ' without ImageMagick, please install it. More info at %s';
      $message = sprintf($t($message), $executable, l($t('http://www.imagemagick.org/'), 'http://www.imagemagick.org/'));
      $requirements['gmap_image_field_imagick'] = array(
        'title' => $t('GMap Image Field - ImageMagick'),
        'value' => $t('Image Magick not found'),
        'severity' => REQUIREMENT_ERROR,
        'description' => $message,
      );
    }
  }
  return $requirements;
}

/**
 * Implements hook_uninstall().
 */
function gmap_image_field_uninstall() {

  // Clear persistant variables.
  variable_del('gmap_image_field_convert_executable');
  variable_del('gmap_image_field_store');
  variable_del('gmap_image_field_run_tiler_in_background');
  variable_del('gmap_image_field_disable_module_css');
  variable_del('gmap_image_field_popups');
  variable_del('gmap_image_field_export_feed');
}
