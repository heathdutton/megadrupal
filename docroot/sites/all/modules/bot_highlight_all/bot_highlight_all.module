<?php
// $Id$

/**
 * @file
 * Bot Highlight All module.
 */

/**
 * Listen for conversation directed at, or about, the bot.
 *
 * @param $data
 *   The regular $data object prepared by the IRC library.
 * @param $from_query
 *   Boolean; whether this was a queried request.
 */
function bot_highlight_all_irc_msg_channel($data, $from_query = FALSE) {
  $to = $from_query ? $data->nick : $data->channel;
  $addressed = bot_name_regexp();

  $matches = array();

  // check for tells to queue up.
  $channels = variable_get('bot_highlight_all_allowed_channels', bot_highlight_all_default_channels());

  if (in_array($data->channel, $channels) && preg_match("/^ALL:\s+(.*)$/i", $data->message, $matches)) {
    global $irc;

    // Assume the max message length is 460 characters.
    $maxlength = 460;
    $t_args = array(
      '!from' => $data->nick,
      '!message' => $matches[1],
    );
    $message = t('!from said: !message', $t_args);
    $message = strlen($message) > $maxlength ? '^^' : $message;

    $users = $irc->_channels[$data->channel]->users;
    $t_args = array(
      '!users' => '',
      '!message' => $message,
    );
    $t_message = '!users: !message';
    foreach ($users as $user) {
      if ($user->nick != $data->nick && $user->nick != variable_get('bot_nickname', 'bot_module')) {
        $addition = " {$user->nick}";
        // If the message gets too long with this user added, send a message
        // and clear out the users.
        if (strlen(implode(': ', $t_args)) + strlen($addition) > $maxlength) {
          bot_message($data->channel, t($t_message, $t_args));
          $t_args['!users'] = '';
        }
        $t_args['!users'] .= $addition;
      }
    }
    if ($t_args['!users']) {
      bot_message($data->channel, t($t_message, $t_args));
    }
  }
}

/**
 * Helper function to pull out the default channels from bot_channels.
 */
function bot_highlight_all_default_channels() {
  $default_channels = array();
  $channels = preg_split('/\s*,\s*/', variable_get('bot_channels', '#test'));

  foreach ($channels as $channel) { // for every one we're configured to join...
    $channel_parts = explode(' ', $channel); // passwords are space-separated on list.
    $default_channels[] = $channel_parts[0];
  }

  return $default_channels;
}
