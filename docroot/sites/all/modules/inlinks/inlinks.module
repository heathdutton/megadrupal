<?php
// $Id: inlinks.module,v 1.1 2010/11/15 22:14:40 pluginstla Exp $

define('inlinks_VERSION', '$Id: inlinks.module,v 1.1 2010/11/15 22:14:40 pluginstla Exp $');
define('this_VERSION', '1.1.5');

function inlinks_help($path, $arg) {

  switch ($path) {
    case 'admin/help#inlinks':
      $output = '';
      return $output;

    case 'admin/config/inlinks':
      return '<p>' . t('You are using version %version of the inlinks module.', array('%version' => this_VERSION)) . '</p><p>' . t('For complete instructions on configuring this module, refer to the %help_pages.', array('%help_pages' => l(t('Help pages'), 'admin/help/inlinks'))) . '</p>';
  }
}

function inlinks_permission() {
  return array(
    'administer inlinks' => array(
      'title' => t('administer inlinks by node'),
      'description' => t('Set xml key'),
    ),
  );
}

function inlinks_cron() {

  if (variable_get('inlinks_last_update', 0) < (REQUEST_TIME - 900)) {
    $last_post = variable_get('inlinks_last_sync_post_id', 0);
    if ($last_post == 0) {
        inlinks_notify_inlinks('install');
    }
    inlinks_check_update();
  }
}

function inlinks_menu() {

  $items = array();
  $items['inlinks/update_now'] = array(
    'page callback' => 'inlinks_check_update',
    'type'     => MENU_NORMAL_ITEM,
    'access arguments'   => array('administer site configuration'),
    );

  $items['admin/config/inlinks'] = array(
    'title' => 'inLinks Settings',
    'description' => 'Settings for the inLinks module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('inlinks_admin_settings'),
    'access arguments' => array('administer site configuration'),
    
  );
  $items['inlinks/sync'] = array(
    'title' => 'inLinks Sync',
    'page callback' => 'inlinks_sync',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  return $items;
}


function inlinks_admin_form_submit($form, &$form_state) {
  variable_set('inlinks_last_update', 0);
  $install = FALSE;
  if (variable_get('inlinks_website_xml_key') != $form_state['values']['inlinks_website_xml_key']) {
    $install = TRUE;
  }
  variable_set('inlinks_website_xml_key', $form_state['values']['inlinks_website_xml_key']);
  if ($install) {
    inlinks_notify_inlinks('install');
  }
  drupal_set_message(t('inlinks xml key updated'));
  inlinks_check_update();

}

function inlinks_admin_settings() {
  $form = array();
  return inlinks_admin_form($form);
}

function inlinks_admin_form($form) {
  $types_enabled = variable_get('inlinks_nodes_enabled', array());
  $type = node_type_get_types();
  $types = array();
  foreach ($type as $key => $value) {
    $types[$key] = $value->name;
  }
  
  $form['inlinks_nodes_enabled'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Enable inLinks'),
    '#default_value' => $types_enabled,
    '#options' => $types,
  );
  $form['inlinks_website_xml_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Website XML Key'),
    '#default_value' => variable_get('inlinks_website_xml_key', ''),
    '#description' => t('You get your XML Site Key from the <a href="http://www.text-link-ads.com/r/publisher/install_ad_code">Get Ad Code page</a> on tla.cmanjoine.devweb.text-link-ads.net. Each of your sites has its own code that looks something like this: <code>A4WWSAAOULU1XGHWU78G</code>.'),
  );
  $form['#submit'][] = 'inlinks_admin_form_submit';
   return system_settings_form($form);
}

function inlinks_node_load(&$nodes) {
  foreach ($nodes as $id => $node) {
    $nodes[$id]->inlinks = db_query("SELECT status FROM {inlinks_node} WHERE nid = :nid", array(':nid' => $node->nid))->fetchField();
  }
}

function inlinks_node_view(&$node) {
  $node->inlinks = db_query("SELECT status FROM {inlinks_node} WHERE nid = :nid", array(':nid' => $node->nid))->fetchField();
  if (inlinks_allow_links($node)) {
    $node->content['body'][0]['#markup'] = inlinks_add_links($node->content['body'][0]['#markup'], $node->nid);
  }
}

function inlinks_node_submit($node, $form, $form_state) {
  inlinks_notify_inlinks('add', $node->nid);
  if (!isset($form_state['values']['inlinks']['inlinks_status']) || $form_state['values']['inlinks']['inlinks_status'] === 0) {
    db_delete('inlinks_node')->condition('nid', $node->nid)->execute();
  }
  else if ($node->nid) {
    db_delete('inlinks_node')->condition('nid', $node->nid)->execute();
    db_insert('inlinks_node')->fields(
      array(
        'nid' => $node->nid, 
        'status' => isset($form_state['values']['inlinks']['inlinks_status']) ? $form_state['values']['inlinks']['inlinks_status']: 1
      )
    )->execute();
  }
}

function inlinks_node_insert($node) {
  inlinks_node_update($node);
}

function inlinks_node_update($node) {
  inlinks_notify_inlinks('add', $node->nid);
}

function inlinks_node_refresh() {
  inlinks_check_update();  
}

/**
 * Helper functions from text-link-ads file
 */

function inlinks_check_update() {
  $url = 'http://www.text-link-ads.com/xml.php?k=' . check_plain(variable_get('inlinks_website_xml_key', '')) . '&l=drupal7-inlinks-1.1.5';
  inlinks_update_links($url);
}

function inlinks_update_links($url) {
  $data = array();
  if (function_exists('json_decode') && is_array(json_decode('{"a":1}', true))) {
    $url .= '&f=json';
    $ads = $request = drupal_http_request($url);
    if (isset($ads->data)) {
      $data['LINKS']['LINK'] = json_decode($ads->data, true);
      foreach ($data['LINKS']['LINK'] as $link_id => $link){
        $data['LINKS']['LINK'][$link_id] = array_change_key_case($link, CASE_UPPER);
        $count++;
	  }
    }
  } 
  else {
    $ads = $request = drupal_http_request($url);
    if (isset($ads->data)) {
      $ads->data = drupal_substr($ads->data, strpos($ads->data, '<?'));
      $parser = new inlinks_xml2array();
      $data = $parser->parseXMLintoarray($ads->data);
    }
  }
  if ($data) {
    if (isset($data['LINKS']) && is_array($data['LINKS']) && isset($data['LINKS']['LINK']['URL'])) {
      $links = array($data['LINKS']['LINK']);
    }
    else {
      $links = $data['LINKS']['LINK'];
      if (!is_array($links)) {
        $links = array();
      }
    }
    foreach ($links as $key => $values) {
      db_insert('inlinks_links')->fields(array('url' => $values['URL'], 'text' => $values['TEXT'], 'nid' => $values['POSTID']))->execute();
      if (isset($GLOBALS['conf']['cache'])) {
        $url = url('node/' . $values['POSTID'], array('absolute' => TRUE));
        cache_clear_all($url, 'cache_page');
      }
    }
    $count=count($links);
    watchdog('inlinks', "update_links: $count ads found" );
  }
  variable_set('inlinks_last_update', REQUEST_TIME);
}

class inlinks_xml2array {
  // starts the process and returns the final array
  function parseXMLintoarray($xmldata) {
    $xmlparser = xml_parser_create();
    xml_parse_into_struct($xmlparser, $xmldata, $arraydat);
    xml_parser_free($xmlparser);
    $semicomplete = $this->subdivide($arraydat);
    $complete = $this->correctentries($semicomplete);
    return $complete;
  }
  
  function subdivide($dataarray, $level = 1) {
    $newarray = array();
    foreach ($dataarray as $key => $dat) {
      if ($dat['level'] === $level && $dat['type'] === "open") {
        $toplvltag = $dat['tag'];
      }
      elseif ($dat['level'] === $level && $dat['type'] === "close" && $dat['tag'] === $toplvltag) {
        $newarray[$toplvltag][] = $this->subdivide($temparray, ($level +1));
        unset($temparray, $nextlvl);
      }
      elseif ($dat['level'] === $level && $dat['type'] === "complete") {
        if (isset($newarray[$dat['tag']]) && is_array($newarray[$dat['tag']])) {
          $newarray[$dat['tag']][] = $dat['value'];
        }
        elseif (isset($newarray[$dat['tag']]) && !is_array($newarray[$dat['tag']])) {
          $newarray[$dat['tag']] = array($newarray[$dat['tag']], $dat['value']);
        }
        elseif ($dat['value']) {
          $newarray[$dat['tag']] = $dat['value'];
        }
      }
      elseif ($dat['type'] === "complete"||$dat['type'] === "close"||$dat['type'] === "open") {
        $temparray[]=$dat;
      }
    }
    return $newarray;
  }

  function correctentries($dataarray) {
    if (is_array($dataarray)) {
      $keys =  array_keys($dataarray);
      if (count($keys)== 1 && is_int($keys[0])) {
        $tmp = $dataarray[0];
        unset($dataarray[0]);
        $dataarray = $tmp;
      }
      $keys2 = array_keys($dataarray);
      foreach ($keys2 as $key) {
        $tmp2 = $dataarray[$key];
        unset($dataarray[$key]);
        $dataarray[$key] = $this->correctentries($tmp2);
        unset($tmp2);
      }
    }
    return $dataarray;
  }
}

/**
 * function inlinks_add_links()
 * @param string $content The text to be searched for keyword/links
 * @param array $links An array of keyword => link entries to be replaced
 *
 * @return string The text after link replacement
 */
function inlinks_add_links($content = NULL, $nid = NULL) {
  if (is_numeric($nid)) {
    $results = db_query("SELECT text, url FROM {inlinks_links} WHERE nid = :nid", array(':nid' => $nid));
    $specialChars = array('/', '*', '+', '?', '^', '$', '[', ']', '(', ')');
    $specialCharsEsc = array('\/', '\*', '\+', '\?', '\^', '\$', '\[', '\]', '\(', '\)');
    $specialMassage = '(\')?(s)?(-)?(s\')?';
    $links = array();
    foreach ($results as $ad) {
      $second = FALSE;
      $GLOBALS['conf']['cache'] = FALSE;
      $escapedLinkText = str_replace($specialChars, $specialCharsEsc, $ad->text);
      if (strpos($escapedLinkText, ' ') !== FALSE) {
        $LinkTexts = explode(' ', $escapedLinkText);
        $escapedLinkText = '';
        foreach ($LinkTexts as $L) {
          if ($second) {
            $escapedLinkText .= ' ';
          }
          if (drupal_substr($L, -1) == 's') {
            $L = drupal_substr($L, 0, -1);
          }
          elseif (drupal_substr($L, -2) == "s'") {
            $L = drupal_substr($L, 0, -2);
          }
          $second = TRUE;
          $escapedLinkText .= $L . $specialMassage;
          if ($L != end($LinkTexts)) {
            $escapedLinkText .= '(\s)?';
          }
        }
      }
      else {
        if (drupal_substr($escapedLinkText, -1) == 's') {
          $escapedLinkText = drupal_substr($escapedLinkText, 0, -1);
        }
        elseif (drupal_substr($escapedLinkText, -2) == "s'") {
          $escapedLinkText = drupal_substr($escapedLinkText, 0, -2);
        }
        $escapedLinkText .= $specialMassage;
      }
      $find = '/\b' . $escapedLinkText . '\b/i';
      $trueMatch = FALSE;
      $matches = array();
      preg_match_all($find, $content, $matches, PREG_OFFSET_CAPTURE);
      $matchData = $matches[0];
      if (count($matchData) > 1) {
        $invalidMatches = array(
          '/<h[1-6][^>]*>[^<]*' . $escapedLinkText . '[^<]*<\/h[1-6]>/i',
          '/<a[^>]+>[^<]*' . $escapedLinkText . '[^<]*<\/a>/i',
          '/href=("|\')[^"\']+' . $escapedLinkText . '[^"\']+("|\')/i',
          '/src=("|\')[^"\']*' . $escapedLinkText . '[^"\']*("|\')/i',
          '/alt=("|\')[^"\']*' . $escapedLinkText . '[^"\']*("|\')/i',
          '/title=("|\')[^"\']*' . $escapedLinkText . '[^"\']*("|\')/i',
          '/content=("|\')[^"\']*' . $escapedLinkText . '[^"\']*("|\')/i',
          '/<script[^>]*>[^<]*' . $escapedLinkText . '[^<]*<\/script>/i'
        );
        foreach ($invalidMatches as $invalidMatch) {
          flagInvalidMatch($matchData, $invalidMatch, $content);
        }
        foreach ($matchData as $index => $match) {
          if (!isset($match[2]) || $match[2] != TRUE) {
            $trueMatch = $match;
            break;
          }
        }
      }
      else {
        $trueMatch = $matchData[0];
      }
      if (is_array($trueMatch)) {
        $replacement = '<a href="' . $ad->url . '">' . $trueMatch[0] . '</a>';
        $content = drupal_substr($content, 0, $trueMatch[1]) . $replacement . drupal_substr($content, $trueMatch[1] + drupal_strlen($trueMatch[0]));
      }
    }
  }
  return $content;
}

function flagInvalidMatch(&$matchData, $pattern, $content) {
  $results = array();
  preg_match_all($pattern, $content, $results, PREG_OFFSET_CAPTURE);
  $matches = $results[0];

  if (count($matches) == 0) return;

  foreach ($matches as $match) {
    $offsetMin = $match[1];
    $offsetMax = $match[1] + drupal_strlen($match[0]);
    foreach ($matchData as $index => $data) {
      if ($data[1] >= $offsetMin && $data[1] <= $offsetMax) {
        $matchData[$index][2] = TRUE;
      }
    }
  }
}
/**
 * Function inlinks_sync()
 * This funciton enables the inlinks servers to sync with our database
 */
function inlinks_sync() {
  $options = array();
  $_GET['textlinkads_post_id'] = isset($_GET['textlinkads_post_id']) ? $_GET['textlinkads_post_id'] :'';
  $_GET['textlinkads_action'] = isset($_GET['textlinkads_action']) ? $_GET['textlinkads_action'] :'';
  $_GET['textlinkads_key'] = isset($_GET['textlinkads_key']) ? $_GET['textlinkads_key'] :'';
    
  $options['inlinks_key'] = isset($_REQUEST['textlinkads_key']) ? $_REQUEST['textlinkads_key'] : (isset($_REQUEST['inlinks_key']) ? $_REQUEST['inlinks_key'] : '');
  $options['inlinks_action'] = isset($_REQUEST['textlinkads_action']) ? $_REQUEST['textlinkads_action'] : (isset($_REQUEST['inlinks_action']) ? $_REQUEST['inlinks_action'] : '');
  $options['inlinks_post_id'] = (int)isset($_REQUEST['textlinkads_post_id']) ? $_REQUEST['textlinkads_post_id'] : (isset($_REQUEST['inlinks_post_id']) ? $_REQUEST['inlinks_post_id'] : '');
  watchdog('inlinks', 'inlinks sync initiated<br /><pre>' . var_export($options, TRUE) . '</pre>');

  $key = variable_get('inlinks_website_xml_key', '');
  if (!empty($options['inlinks_key']) && $options['inlinks_key'] == $key) {
    $op = check_plain($options['inlinks_action']);
    switch ($op) {
      case 'debug':
        inlinks_debug_info();
        exit;
      break;
      case 'sync_posts':
        header('Content-type: application/xml; charset="utf-8"', TRUE);
        print inlinks_sync_posts($options['inlinks_post_id']);
        exit;
      break;
      case 'rest_sync_limit':
        header('Content-type: application/xml; charset="utf-8"', TRUE);
        inlinks_set_max_post_id();
        inlinks_debug_info();
        break;
        exit;
      case 'reset_syncing':
        header('Content-type: application/xml; charset="utf-8"', TRUE);
        variable_set('inlinks_last_sync_post_id', 0);
        inlinks_debug_info();
        exit;
      break;
      case 'refresh':
          inlinks_check_update();
      break;
    }
  }
  else {
    drupal_not_found();
  }
}

function inlinks_debug_info() {
  $results = db_query("SELECT * from {inlinks_links}");
  $links = array();
  $data = array();
  foreach ($results as $link) {
    $data[] = $link;
  }
  header('Content-type: application/xml; charset="utf-8"', TRUE);
  echo '<?xml version="1.0" encoding="utf-8"?>';
  ?>
    <info>
    <lastRefresh><?php echo variable_get('inlinks_last_update', 0);?></lastRefresh>
    <maxSyncId><?php echo variable_get('inlinks_max_sync_post_id', 0);;?></maxSyncId>
    <lastSyncId><?php echo variable_get('inlinks_last_sync_post_id', 0);?></lastSyncId>
    <version><?php echo this_VERSION; ?></version>
    <caching><?php echo isset($GLOBALS['conf']['cache']) ? 'Y' : 'N'; ?></caching>
    <phpVersion><?php echo phpversion();?></phpVersion>
    <engineVersion><?php echo VERSION; ?></engineVersion>
    <installed><?php echo variable_get('inlinks_install', 0);?></installed>
    <data><![CDATA[<?php echo print_r($data);?>]]></data>
    </info>
  <?php
}
/**
 * function inlinks_sync_posts()
 * Format xml for the inlinks service.
 *
 * @return string xml of each post, formated for the inlinks inlinks service
 */
function inlinks_sync_posts($postId = 0) {
  $types = variable_get('inlinks_nodes_enabled', array());
  $xml = '<?xml version="1.0" encoding="utf-8"?>';
  $xml .= "  <posts>\n";
  if ($postId) {
    $xml .= inlinks_prepare_node($postId, $types);
  }
  elseif (is_array($types)) {
    $nodetypes = " AND type IN ('" . implode("','", $types) . "') ";
    $last_post = variable_get('inlinks_last_sync_post_id', 0);
    $results = db_query("SELECT nid FROM {node} WHERE nid > :nid :nodetypes ORDER BY nid ASC LIMIT 100", array(':nid' => $last_post, ':nodetypes' => $nodetypes));
    foreach ($results as $node) {
      $xml .= inlinks_prepare_node($node->nid, $types);
    }
  }
  $xml .= "</posts>\n";
  return $xml;
}

/**
 * function inlinks_prepare_node()
 * This function should verify the node is allowed to have inlinks.  If so it should
 * update the last sync post id, and return the formated xml to send to inlinks.
 * @param int nid the nid to prepare
 *
 * @return string Formatted xml for a single post
 */
function inlinks_prepare_node($nid, $types) {
  $node = node_load($nid);
  $last_post = variable_get('inlinks_last_sync_post_id', 0);
  if ($last_post < $nid) {
    variable_set('inlinks_last_sync_post_id', $nid);
  }
  
  if ($types[$node->type] && $node->inlinks != 2) {
    $title = urlencode($node->title);
    $post = "    <post>\n";
    $post .= '      <id>' . check_plain($node->nid) . "</id>\n";
    $post .= '      <title>' . $title . "</title>\n";
    $post .= '      <date>' . date('Y-m-d H:i:s', $node->created) . "</date>\n";
    $post .= '      <url>' . url('node/' . $node->nid, array('absolute' => TRUE)) . "</url>\n";
    $post .= '      <body>' . inlinks_prepare_body($node->body['und'][0]['value']) . "</body>\n";
    $post .= "    </post>\n";
    return $post;
  }
}
function inlinks_prepare_body($body) {
  $body = strip_tags($body);
  $search = array(
    '@<script[^>]*?>.*?</script>@si',
    '@<h[1-6][^>]*?>.*?</h[1-6]>@si',
    '@<a[^>]*?>.*?</a>@si',
    '@<[\/\!]*?[^<>]*?>@si',
    '@&[#a-z0-9]+;@si',
    '@"@',
    "@'@",
    '@>@',
    '@<@',
    '@[\r\n\t\s]+@'
  );
  $replace = array('', '', '', '', '', '', '', '', '', ' ');
  return urlencode(trim(preg_replace($search, $replace, $body)));
}
/**
 * Function inlinks_notify_inlinks()
 *
 * @param string op The operation being performed.  'install' or 'add'
 * @param int pid The id of the node being added.
 */
function inlinks_notify_inlinks($op = NULL, $pid = NULL) {
  $params = array( 'op' => $op, 'pid' => $pid);
  switch ($op) {
    case 'install':
      $key = variable_get('inlinks_website_xml_key', '');
      $site_url = url('inlinks/sync/', array('absolute' => TRUE));
      if ($key && $site_url) {
        $url = 'http://www.text-link-ads.com/post_level_sync.php?' .
          'action=install&inlinks=true' .
          '&inventory_key=' . $key .
          '&site_url=' . urlencode($site_url) .
          '&script_language=drupal6-inlinks-' . this_VERSION;
        $request = drupal_http_request($url);
        $file = $request->data;
        if ($file) {
          variable_set('inlinks_install', TRUE);
        }
      }
      $options['url'] = $site_url;
      $options['key'] = $key;
      drupal_set_message(t('Text Link Ads Notified of changes'));
      watchdog('inlinks', 'Notified inlinks<br /><pre>' . var_export($options, TRUE) . '</pre>');
    break;
    case 'add':
      $key = variable_get('inlinks_website_xml_key', '');
      if ($pid && $key) {
        $url = 'http://www.text-link-ads.com/post_level_sync.php?' .
          'action=add' .
          '&inventory_key=' . $key .
          '&post_id=' . $pid;
        $request = drupal_http_request($url);
        $file = $request->data;
        $options['url'] = $url;
        watchdog('inlinks', 'Notified inlinks<br /><pre>' . var_export($options, TRUE) . '</pre>');
      }
    break;
  }
}

/**
 * Function inlinks_set_max_post_id()
 * Reset the inlinks_max_sync_post_id varialbe to the most recent nid
 */
function inlinks_set_max_post_id() {
  $max_nid = db_query("SELECT MAX(nid) FROM {node}")->fetchField();
  if ($max_nid) {
    variable_set('inlinks_max_sync_post_id', $max_nid);
  }
  else {
    variable_set('inlinks_max_sync_post_id', 0);
  }
}

function inlinks_form_node_form_alter(&$form, $form_state) {
  $form['inlinks'] = array(
    '#type' => 'fieldset',
    '#title' => t('Inlinks settings'),
    '#access' => user_access('administer menu'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#group' => 'inlinks_settings',
    '#tree' => TRUE,
    '#weight' => -2,
    '#attributes' => array('class' => array('inlinks-link-form')),
  );

  $form['inlinks']['inlinks_status'] = array(
      '#type' => 'radios',
      '#title' => t('Allow inlinks'),
      '#default_value' => isset($form['#node']->inlinks_status) ? $form['#node']->inlinks_status : 1,
      '#options' => array(
        1 => t('Allow'),
        2 => t('Deny'),
      )
    );
}

/**
 * function inlink_allow_links()
 * @param object node The node object
 *
 * @return boolean True if links are allowed, otherwise FALSE
 */
function inlinks_allow_links($node) {
  $types = variable_get('inlinks_nodes_enabled', array());
  if ($types[$node->type] && $node->inlinks != 2) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}