<?php

/**
 * @file
 * Extends (alters) insert.module to output markdown-style syntax.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add another option to insert settings.
 */
function markdown_insert_form_field_ui_field_edit_form_alter(&$form, $form_state) {

  // If this is a valid markdown insert widget type, add option to enable.
  if (
    !empty($form['#instance']['widget']['type']) &&
    in_array($form['#instance']['widget']['type'], _markdown_insert_widgets())
  ) {

    // Get the current settings.
    $settings = $form['#instance']['widget']['settings'];

    // Add the markdown insert setting.
    $form['instance']['settings']['insert']['markdown_insert'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable Markdown Insert'),
      '#default_value' => $settings['markdown_insert'],
      '#weight' => -1,
    );
  }
}

/**
 * Implements hook_field_widget_info_alter().
 *
 * Add the markdown insert flag as an insert option.
 */
function markdown_insert_field_widget_info_alter(&$info) {

  // Add a new setting to valid markdown insert fields.
  foreach (_markdown_insert_widgets() as $widget) {
    if (!empty($info[$widget])) {
      $info[$widget]['settings']['markdown_insert'] = FALSE;
    }
  }
}

/**
 * Implements hook_field_widget_form_alter().
 *
 * Add processing callback to markdown insert enabled widget instances.
 */
function markdown_insert_field_widget_form_alter(&$element, &$form_state, $context) {

  // Pull the instance.
  $instance = $context['instance'];

  // Check if markdown insert is enabled.
  if (
    !empty($instance['widget']['settings']['markdown_insert']) &&
    $instance['widget']['settings']['markdown_insert'] == 1
  ) {

    // Add the processing callback to each instance.
    foreach (element_children($element) as $delta) {
      $element[$delta]['#process'][] = 'markdown_insert_process_field';
    }
  }
}

/**
 * An element #process callback for the valid markdown insert widgets.
 *
 * Add a textfield to enter a link.
 */
function markdown_insert_process_field($element, &$form_state) {

  // Only add javascript once.
  static $js_added;

  // Bail out early if the needed properties aren't available. This happens
  // most frequently when editing a field configuration.
  if (!isset($element['#entity_type'])) {
    return $element;
  }

  // Load the instance.
  $instance = field_info_instance(
    $element['#entity_type'],
    $element['#field_name'],
    $element['#bundle']
  );

  // Load the widget information.
  $widget_settings = $instance['widget']['settings'];
  $widget_type = $instance['widget']['type'];

  // Bail out of Insert is not enabled on this field.
  if (empty($widget_settings['markdown_insert'])) {
    return $element;
  }

  // Add the js handler settings only once.
  if (!isset($js_added)) {
    $js_added = array();
    $element['#attached']['js'][] = drupal_get_path('module', 'markdown_insert') . '/markdown_insert.js';
  }

  // Add link field for images.
  if ($widget_type == 'image_image') {
    $element['link'] = array(
      '#type' => 'textfield',
      '#title' => t('Link'),
      '#access' => !empty($element['#value']['fid']) && (bool) $element['#value']['fid'],
    );
  }

  // Return the update element.
  return $element;
}

/**
 * Implements hook_insert_widgets_alter().
 *
 * For the image field, add a link replacement for the insert module.
 */
function markdown_insert_insert_widgets_alter(&$widgets) {
  if (!empty($widgets['image_image'])) {
    $widgets['image_image']['fields']['link']
      = 'input[name$="[link]"], textarea[name$="[link]"]';
  }
}

/**
 * Helper function to get valid widget types for markdown insert.
 */
function _markdown_insert_widgets() {
  return array('image_image', 'file_generic');
}
