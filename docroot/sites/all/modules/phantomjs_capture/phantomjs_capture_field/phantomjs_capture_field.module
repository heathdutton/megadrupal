<?php

/**
 * @file
 * Implements a new field that takes usages of the PhantomJS capture module to
 * allow users to enter an URL and display the screenshot captured as an image
 * on the entity.
 */

/**
 * Implements hook_field_info().
 *
 * Adds a new field that can be used to show image screenshots of a given URL.
 */
function phantomjs_capture_field_field_info() {
  return array(
    'phantomjs_capture_field' => array(
      'label' => t('PhantomJS'),
      'description' => t('Field to use PhantomJS Screen Capture.'),
      'settings' => array(
        'uri_scheme' => variable_get('file_default_scheme', 'public'),
      ),
      'instance_settings' => array(
        'file_directory' => '',
      ),
      'default_widget' => 'phantomjs_capture_field_widget',
      'default_formatter' => 'phantomjs_capture_field_formatter'
    ),
  );
}

/**
 * Implements hook_field_validate().
 *
 */
function phantomjs_capture_field_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {

}

/**
 * Implements hook_field_is_empty().
 *
 */
function phantomjs_capture_field_field_is_empty($item, $field) {
  return empty($item['url']);
}

/**
 * Implements hook_field_widget_info().
 *
 */
function phantomjs_capture_field_field_widget_info() {
  return array(
    'phantomjs_capture_field_widget' => array(
      'label' => t('Simple URL'),
      'field types' => array('phantomjs_capture_field'),
    ),
  );
}

/**
 * Implements hook_field_settings_form().
 *
 */
function phantomjs_capture_field_field_settings_form($field, $instance, $has_data) {
  $form = array();
  $defaults = field_info_field_settings($field['type']);
  $settings = array_merge($defaults, $field['settings']);

  $scheme_options = array();
  foreach (file_get_stream_wrappers(STREAM_WRAPPERS_WRITE_VISIBLE) as $scheme => $stream_wrapper) {
    $scheme_options[$scheme] = $stream_wrapper['name'];
  }
  $form['uri_scheme'] = array(
    '#type' => 'radios',
    '#title' => t('Upload destination'),
    '#options' => $scheme_options,
    '#default_value' => $settings['uri_scheme'],
    '#description' => t('Select where the final files should be stored. Private file storage has significantly more overhead than public files, but allows restricted access to files within this field.'),
  );

  return $form;
}

/**
 * Implements hook_field_instance_settings_form().
 */
function phantomjs_capture_field_field_instance_settings_form($field, $instance) {
  $settings = $instance['settings'];
  $form = array();

  $form['file_directory'] = array(
    '#type' => 'textfield',
    '#title' => t('File directory'),
    '#default_value' => $settings['file_directory'],
    '#description' => t('Optional subdirectory within the upload destination where files will be stored. Do not include preceding or trailing slashes.'),
    '#element_validate' => array('_file_generic_settings_file_directory_validate'),
  );

  $form['file_type'] = array(
    '#type' => 'select',
    '#title' => t('File type'),
    '#options' => array(
      'jpg' => 'jpg',
      'png' => 'png',
      'pdf' => 'pdf',
    ),
    '#default_value' => isset($settings['file_type']) ? $settings['file_type'] : 'jpg',
    '#description' => t('Select the type of file to store the captured screen shot as in the folder above.'),
  );

  return $form;
}

/**
 * Implements hook_field_widget_form().
 */
function phantomjs_capture_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $element += array(
    'url' => array(
      '#type' => 'textfield',
      '#title' => check_plain($instance['label']),
      '#description' => check_plain($instance['description']),
      '#default_value' => isset($items[$delta]['url']) ? $items[$delta]['url'] : '',
      '#element_validate' => array('phantomjs_capture_field_validate'),
    ),
    'uri' => array(
      '#type' => 'hidden',
      '#default_value' => isset($items[$delta]['uri']) ? $items[$delta]['uri'] : '',
    ),
  );

  return $element;
}

/**
 * Field validator that ensure that a url was given.
 *
 * @param type $element
 * @param type $form_state
 */
function phantomjs_capture_field_validate($element, &$form_state) {
  if (!empty($element['#value']) && !valid_url($element['#value'])) {
    form_error($element, t("Needs to be a valid URL."));
  }
}

/**
 * Implements hook_field_formatter_info().
 *
 */
function phantomjs_capture_field_field_formatter_info() {
  return array(
    'phantomjs_capture_field_formatter' => array(
      'label' => t('Image'),
      'field types' => array('phantomjs_capture_field'),
      'settings' => array(
        'image_style' => '',
        'image_link' => '',
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 *
 */
function phantomjs_capture_field_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element = array();

  $image_styles = image_style_options(FALSE);
  $element['image_style'] = array(
    '#title' => t('Image style'),
    '#type' => 'select',
    '#default_value' => $settings['image_style'],
    '#empty_option' => t('None (original image)'),
    '#options' => $image_styles,
  );

  $element['image_link'] = array(
    '#title' => t('Link image to'),
    '#type' => 'select',
    '#default_value' => $settings['image_link'],
    '#empty_option' => t('Nothing'),
    '#options' => array(
      'site' => t('Site'),
    ),
  );

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 *
 */
function phantomjs_capture_field_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  $image_styles = image_style_options(FALSE);
  // Unset possible 'No defined styles' option.
  unset($image_styles['']);
  // Styles could be lost because of enabled/disabled modules that defines
  // their styles in code.
  if (isset($image_styles[$settings['image_style']])) {
    $summary[] = t('Image style: @style', array('@style' => $image_styles[$settings['image_style']]));
  }
  else {
    $summary[] = t('Original image');
  }

  $link_types = array(
    'site' => t('Linked to site'),
  );
  // Display this setting only if image is linked.
  if (isset($link_types[$settings['image_link']])) {
    $summary[] = $link_types[$settings['image_link']];
  }

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 *
 */
function phantomjs_capture_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  foreach ($items as $delta => $item) {
    // Build return element
    $element[$delta] = array(
      '#theme' => 'image_formatter',
      '#item' => array(
        'uri' => $item['uri'],
        'alt' => '',
        'title' => '',
      ),
      '#image_style' => isset($display['settings']['image_style']) ? $display['settings']['image_style'] : '',
      '#path' => '',
    );

    // Add link to the image, if selected.
    if (isset($display['settings']['image_link'])) {
      switch ($display['settings']['image_link']) {
        case 'site':
          $element[$delta]['#path'] = array(
            'path' => $item['url'],
            'options' => array(),
          );
          break;
      }
    }
  }

  return $element;
}

/**
 * Implements hook_field_insert().
 *
 */
function phantomjs_capture_field_field_insert($entity_type, $entity, $field, $instance, $langcode, &$items) {
  $dest = $field['settings']['uri_scheme'] . '://' . $instance['settings']['file_directory'] . '/';
  foreach ($items as $delta => &$item) {
    $file_type = isset($instance['settings']['file_type']) ? $instance['settings']['file_type'] : 'jpg';
    $file = md5($entity->nid . REQUEST_TIME . $delta) . '.' . $file_type;

    // Try to capture the site.
    if (phantomjs_capture_screen($item['url'], $dest, $file)) {
      $item['uri'] = $dest . $file;
    }
    else {
      drupal_set_message(t('PhantomJS chould not create screenshot of !url', array('!url' => l($item['url'], $item['url']))), 'error');
    }
  }
}

/**
 * Implements hook_field_update().
 *
 */
function phantomjs_capture_field_field_update($entity_type, $entity, $field, $instance, $langcode, &$items) {
  // Build destination path.
  $dest = $field['settings']['uri_scheme'] . '://' . $instance['settings']['file_directory'] . '/';

  // Get old items values.
  $old_items = field_get_items($entity_type, $entity->original, $field['field_name']);

  // Loop over current items.
  foreach ($items as $delta => &$item) {
    // Check if value have been update as taking captures takes time is expensive.
    if (!isset($old_items[$delta]['url']) || $old_items[$delta]['url'] != $item['url']) {
      if (isset($item['uri'])) {
        $path = drupal_realpath($item['uri']);

        // Build path and remove old screenshot.
        if (file_exists($path)) {
          unlink($path);
        }

        // Remove image style copies.
        image_path_flush($item['uri']);
      }

      $file_type = isset($instance['settings']['file_type']) ? $instance['settings']['file_type'] : 'jpg';
      $file = md5($entity->nid . REQUEST_TIME . $delta) . '.' . $file_type;

      // Try to capture the site.
      if (phantomjs_capture_screen($item['url'], $dest, $file)) {
        $item['uri'] = $dest . $file;
      }
      else {
        $item['uri'] = '';
        drupal_set_message(t('PhantomJS chould not create screenshot of !url', array('!url' => l($item['url'], $item['url']))), 'error');
      }
    }
  }
}

/**
 * Implements hook_field_delete().
 *
 */
function phantomjs_capture_field_field_delete($entity_type, $entities, $field, $instances, $langcode, &$items) {
  foreach ($items as $item) {
    $path = drupal_realpath($item['uri']);
    // Remove screenshot.
    if (file_exists($path)) {
      unlink($path);
    }

    // Remove image style copies.
    image_path_flush($item['uri']);
  }
}
