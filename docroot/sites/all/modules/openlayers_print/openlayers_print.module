<?php


/**
 * Implements hook_help().
 */
function openlayers_print_help($path, $arg) {
  switch ($path) {
    case 'admin/help#openlayers_print':
      return '<p>' . t('Provides printing capabilities for OpenLayers maps using the mapfish print server') . '</p>';
  }
  return '';
}

/**
 * Implements hook_openlayers_behaviors().
 */
function openlayers_print_openlayers_behaviors() {
  return array(
    'openlayers_behavior_print' => array(
      'title' => t('OpenLayers Print'),
      'description' => t('Provides printing capabilities.'),
      'type' => 'map',
      'path' => drupal_get_path('module', 'openlayers_print') . '/includes',
      'behavior' => array(
        'file' => 'openlayers_behavior_print.inc',
        'class' => 'openlayers_behavior_print',
        'parent' => 'openlayers_behavior',
      ),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function openlayers_print_menu() {
  $items = array();

  $items['admin/structure/openlayers/print/callbacks/create/%'] = array(
    'title' => 'callback to create a print job',
    'page callback' => 'openlayers_print_create',
    'page arguments' => array(),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

 $items['admin/structure/openlayers/print/callbacks/fetch/%'] = array(
    'title' => 'callback to fetch a finished print job',
    'page callback' => 'openlayers_print_fetch',
    'page arguments' => array(6),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  // print settings
  $items['admin/structure/openlayers/print'] = array(
    'title' => t('Print'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('openlayers_print_admin_settings'),
    'access arguments' => array('administer openlayers'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -15,
  );
  return $items;
}


/**
 * return a valuearray suitable to use as select_options value
 * for form-api select field
 *
 * workaround as array_combine returns False when combining
 * two empty array. php :(
 */
function openlayers_print_selectarray($inArray) {
    return empty($inArray) ? array() : array_combine($inArray, $inArray);
}

/**
 * callback the settings page
 */
function openlayers_print_admin_settings() {
  $form = array();

  $openlayers_print_mapfishprinturl = variable_get('openlayers_print_mapfishprinturl', '');
  $form['openlayers_print_mapfishprinturl'] = array(
    '#type' => 'textfield',
    '#title' => t('URL of the MapFish print service'),
    '#description' => t('For example: http://myserver.com:8080/mapfish/pdf/<br/>'.
        'All values bellow depend on this setting and will only be selectable when a correct URL is set.'),
    '#default_value' => $openlayers_print_mapfishprinturl,
  );

  $validOutputFormats = array();
  $validLayouts = array();
  $validDpis = array();

  if (!empty($openlayers_print_mapfishprinturl)) {
    try {
      $mfpApi = new MapfishPrintApi($openlayers_print_mapfishprinturl);

      $validOutputFormats = $mfpApi->getOutputFormats();
      $validLayouts = $mfpApi->getLayouts();
      $validDpis = $mfpApi->getDpis();
    }
    catch (MapfishPrintException $e) {
      drupal_set_message($e->getMessage(), 'error', True);
      watchdog("openlayers_print", $e->getMessage(), array(), WATCHDOG_ERROR);
    }
  }

  $openlayers_print_outputformat = variable_get('openlayers_print_outputformat', '');
  $form['openlayers_print_outputformat'] = array(
    '#type' => 'select',
    '#title' => t('Outputformat for the prints'),
    '#options' => openlayers_print_selectarray($validOutputFormats),
    '#default_value' => $openlayers_print_outputformat,
  );

  $openlayers_print_layout = variable_get('openlayers_print_layout', '');
  $form['openlayers_print_layout'] = array(
    '#type' => 'select',
    '#title' => t('layout for the prints'),
    '#options' => openlayers_print_selectarray($validLayouts),
    '#default_value' => $openlayers_print_layout,
  );

  $openlayers_print_dpi = variable_get('openlayers_print_dpi', '');
  $form['openlayers_print_dpi'] = array(
    '#type' => 'select',
    '#title' => t('DPI settings for the prints'),
    '#options' => openlayers_print_selectarray($validDpis),
    '#default_value' => $openlayers_print_dpi,
  );

  // Make a system setting form and return
  return system_settings_form($form);
}

/**
 * Fetch the JSON data send by an incomming request.
 *
 * only allows POST request with content type application/json. Will
 * return an error in JSON format otherwise.
 */
function openlayers_print_get_json_post() {
  $isPost = isset($_SERVER['REQUEST_METHOD']) ? ($_SERVER['REQUEST_METHOD'] == 'POST') : false;
  $isJson = isset($_SERVER['CONTENT_TYPE']) ? (strpos(strtolower($_SERVER['CONTENT_TYPE']), 'application/json') === 0) : false;
  $errorText = Null;
  $errorCode = '400 Bad Request';
  $data = NULL;

  if (!($isPost && $isJson)) {
    $errorText = "This callback will only answer to JSON POST requests";
  }
  else {
    $postdata = file_get_contents("php://input");
    $data = json_decode($postdata, True);
    if ($data === null) {
      $errorText = "Could not decode JSON data";
    }
  }

  if (!empty($errorText) && !empty($errorCode)) {
    openlayers_print_return_json_error($errorCode, $errorText);
  }

  return $data;
}


/**
 * return an error as JSON response and set an error http status code.
 *
 * this function will immediately exit by calling drupal_exit
 */
function openlayers_print_return_json_error($errorCode, $errorText, $optKeys=array()) {
  watchdog("openlayers_print", $errorText, array(), WATCHDOG_ERROR);
  if (empty($errorCode)) {
    $errorCode = "500 Internal server error";
  }
  header("HTTP/1.0 $errorCode");
  drupal_json_output(array_merge($optKeys, array("error" => $errorText)));
  drupal_exit();
}

/**
 * callback to create a new print job
 *
 * provides a JSON interface
 */
function openlayers_print_create() {
  $createRequest = openlayers_print_get_json_post();

  // fill in missing variables
  if (empty($createRequest["layout"])) {
    $createRequest["layout"] = variable_get('openlayers_print_layout', '');
  }
  if (empty($createRequest["outputFormat"])) {
    $createRequest["outputFormat"] = variable_get('openlayers_print_outputformat', '');
  }
  if (empty($createRequest["pages"][0]["dpi"])) {
    $createRequest["dpi"] = variable_get('openlayers_print_dpi', '');
  }
  if (empty($createRequest["outputFilename"])) {
    $createRequest["outputFilename"] = "printjob";
  }
  foreach(array("comment", "mapTitle") as $k) {
    if (empty($createRequest[$k])) {
      $createRequest[$k] = "empty";
    }
  }

  $openlayers_print_mapfishprinturl = variable_get('openlayers_print_mapfishprinturl', '');
  try {
    // forward the request to mapfish
    $mfpApi = new MapfishPrintApi($openlayers_print_mapfishprinturl);

    if (!empty($mfpApi) && !$mfpApi->isValid()) {
      openlayers_print_return_json_error(NULL, "Invalid URL to mapfish print configured: ".$openlayers_print_mapfishprinturl);
    }


    $getUrl = $mfpApi->render($createRequest);

    // return the link to the dowloadable result after correcting it to proxy it through drupal
    drupal_json_output(array("getURL" => $getUrl));
  }
  catch (MapfishPrintException $e) {
    openlayers_print_return_json_error(NULL, $e->getMessage());
  }
}


/**
 * callback to fetch the result of an print job
 *
 * returns a JSON message and sets an HTTP Error code
 * in case of an error
 */
function openlayers_print_fetch($filename) {

  $openlayers_print_mapfishprinturl = variable_get('openlayers_print_mapfishprinturl', '');
  try {
    $mfpApi = new MapfishPrintApi($openlayers_print_mapfishprinturl);
    $fullUrl = $mfpApi->getDownloadUrl($filename);

    $response = drupal_http_request($fullUrl);

    header("HTTP/1.0 ". $response->code . " " . $response->status_message);
    $outputHeaders = array("content-type" /*, "content-disposition"*/);
    foreach($response->headers as $headerk => $headerv) {
      if (in_array(strtolower($headerk), $outputHeaders)) {
        header($headerk . ": " . $headerv);
      }
    }
    echo $response->data;
    drupal_exit();
  }
  catch (MapfishPrintException $e) {
    openlayers_print_return_json_error(NULL, $e->getMessage());
  }
}


// vim: ft=php tabstop=2 shiftwidth=2
