<?php

class XtoolsSignatureWebTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Signature validation',
      'group' => 'Xtools',
    );
  }

  function setUp(array $modules = array()) {
    parent::setUp($modules + array('xtools', 'xtools_test'));
  }

  function testSignatureValidation() {
    $callables = array(
      'function' => 'xtools_test_signature',
      'method' => array(new xtools_test_signature, 'method'),
      'static method' => array('xtools_test_signature_static', 'method'),
      'closure' => function (array &$array, XtoolsAssert $assert = NULL) {},
    );
    foreach ($callables as $type => $callable) {
      // Test a valid signature.
      $signature = $this->XtoolsTestSignature();
      $this->assertTrue((bool) $signature->validate($callable), "A $type with a valid signature passes validation.");

      // Test an invalid reference.
      $signature = $this->XtoolsTestSignature();
      $signature->parameters[0]->definition['reference'] = FALSE;
      $this->assertFalse((bool) $signature->validate($callable), "A $type with an incorrectly referenced parameter fails validation.");

      // Test an invalid name.
      $signature = $this->XtoolsTestSignature();
      $signature->parameters[0]->definition['name'] = 'arra';
      $this->assertFalse((bool) $signature->validate($callable), "A $type parameter with an incorrect name fails validation.");

      // Test an invalid type hint.
      $signature = $this->XtoolsTestSignature();
      $signature->parameters[0]->definition['type'] = 'Foo';
      $this->assertFalse((bool) $signature->validate($callable), "A $type with an incorrectly type hinted parameter fails validation.");

      // Test an invalid default value.
      $signature = $this->XtoolsTestSignature();
      $signature->parameters[0]->definition['default_value'] = NULL;
      $this->assertFalse((bool) $signature->validate($callable), "A $type parameter with an incorrect default value fails validation.");

      // Test an invalid number of parameters.
      $signature = $this->XtoolsTestSignature();
      $signature->parameters[] = new XtoolsSignatureParameter();
      $this->assertFalse((bool) $signature->validate($callable), "A $type without the required parameters fails validation.");

      // Test unspecified parameters.
      $signature = new XtoolsSignature(array(
        new XtoolsSignatureParameter(),
      ));
      $this->assertTrue((bool) $signature->validate($callable), "A $type that is tested against unspecified parameters passes validation.");
    }
  }

  function XtoolsTestSignature() {
    return new XtoolsSignature(array(
      new XtoolsSignatureParameter(array(
        'name' => 'array',
        'type' => 'array',
        'reference' => TRUE,
      )),
      new XtoolsSignatureParameter(array(
        'name' => 'assert',
        'type' => 'XtoolsAssert',
        'default_value' => NULL,
      )),
    ));
  }
}