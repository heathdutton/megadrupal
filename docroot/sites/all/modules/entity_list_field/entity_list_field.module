<?php

/**
 * @file
 * Entity List Field module file.
 */

/* Specify EntityListFieldList as a valid class.
 * See entity_lister_pageturner_callback() in entity_lister.pages.inc.
 */

/**
 * Implements hook_field_info().
 */
function entity_list_field_field_info() {

  return array(
    'entity_list_field_entity_list' => array(
      'label' => t('Entity List'),
      'description' => t('Entity List'),
      'default_widget' => 'entity_list_field_form',
      'default_formatter' => 'entity_list_field_display',
      'settings' => array(),
      'instance_settings' => array(
        'show_type' => TRUE,
        'type_label' => 'Entity type',
        'show_bundle' => TRUE,
        'bundle_label' => 'Bundle',
        'show_view_mode' => TRUE,
        'view_mode_label' => 'View mode',
        'show_numitems' => TRUE,
        'numitems_label' => 'Item count',
        'show_sort' => TRUE,
        'sort_label' => 'Sort',
        'show_sort2' => TRUE,
        'sort2_label' => 'Sort',
        'show_direction' => TRUE,
        'direction_label' => 'Sort direction',
        'show_direction2' => TRUE,
        'direction2_label' => 'Sort direction',
        'show_terms' => FALSE,
        'terms_label' => 'Taxonomy terms',
        'show_pager' => TRUE,
        'pager_label' => 'Pager',
        'show_cache' => FALSE,
        'cache_label' => 'Enable list caching',
        'pager_position' => '1',
        'collapsed' => FALSE,
        'list_class' => 'EntityListFieldList',
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function entity_list_field_field_formatter_info() {

  return array(
    'entity_list_field_display' => array(
      'label' => t('Entity List'),
      'field types' => array('entity_list_field_entity_list'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function entity_list_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {

  // List class and pager position are configurable per field instance,
  // not per container item.
  $info = field_info_field($instance['field_name']);
  $list_class = trim($info['settings']['other']['list_class']);
  $pager_position = trim($info['settings']['other']['pager_position']);

  $element = array();
  $host_item = entity_extract_ids($entity_type, $entity);
  // Add the entity type to the usual array returned by entity_extract_ids().
  $host_item[3] = $entity_type;

  $elements = array();

  foreach ($items as $delta => $item) {

    $config = $item;

    $fm = field_info_field_map();
    $bundles = json_decode($config['bundle']);

    if (!empty($config['terms'])) {
      // Hard-code this field name for the time being.  Yes, this means that
      // for the moment you must use this field name for your taxonomy
      // reference field.  TODO: Make this configurable.
      $name = 'field_elf_taxonomy';
      // Make sure all the bundles in our list have the taxonomy ref field.
      $have = entity_list_field_bundles_have_field($name, $fm, $bundles, $config['type']);
      if ($have) {
        $config['field_condition'][] = array(
          'field' => $name,
          'column' => 'tid',
          'value' => json_decode($config['terms']),
        );
      }
    }

    $sort = array();

    if ('entity_list_field_na' !== $item['sort']) {
      if (field_info_field($item['sort'])) {
        $sort[] = array(
          'method' => 'fieldOrderBy',
          'args' => array(
            'field' => $item['sort'],
            'column' => $item['column'],
            'direction' => $item['direction'],
          ),
        );
      }
      else {
        $sort[] = array(
          'method' => 'propertyOrderBy',
          'args' => array(
            'property' => $item['sort'],
            'direction' => $item['direction'],
          ),
        );
      }
    }

    if ('entity_list_field_na' !== $item['sort2']) {
      if (field_info_field($item['sort2'])) {
        $sort[] = array(
          'method' => 'fieldOrderBy',
          'args' => array(
            'field' => $item['sort2'],
            'column' => $item['column2'],
            'direction' => $item['direction2'],
          ),
        );
      }
      else {
        $sort[] = array(
          'method' => 'propertyOrderBy',
          'args' => array(
            'property' => $item['sort2'],
            'direction' => $item['direction2'],
          ),
        );
      }
    }

    $config['sort'] = $sort;

    // Attach the pager_position to the item config so we don't have to
    // call field_info_field() again in EntityListThemer::theme().
    $config['pager_position'] = $pager_position;

    $config['pager_path'] = 'entity_list_field/pageturner';

    $id_prefix = 'entity-lister-' . str_replace('_', '-', $instance['field_name']);

    $obj = new $list_class($config, $delta, $id_prefix, $host_item);
    // Setting the page is only required when using the standard pager, but
    // for simplicity's sake we do it regardless.
    $page = $obj->getPageNum();
    $list = $obj->getList($page);
    $elements[] = $obj->element($list);
  }

  return $elements;
}

/**
 * Determine if all bundles have a field.
 *
 * @param string $name
 *   The field name.
 * @param array $field_map
 *   A field map returned by field_info_field_map().
 * @param array $bundles
 *   The bundles to check for the field.
 * @param string $type
 *   The entity type.
 *
 * @return bool
 *   Whether or not all the bundles have this field.
 */
function entity_list_field_bundles_have_field($name, $field_map, $bundles, $type) {

  $have_field = TRUE;

  foreach ($bundles as $bundle) {
    if (isset($field_map[$name])) {
      if (!in_array($bundle, $field_map[$name]['bundles'][$type])) {
        $have_field = FALSE;
      }
    }
  }

  return $have_field;
}

/**
 * Implements hook_field_widget_info().
 */
function entity_list_field_field_widget_info() {

  return array(
    'entity_list_field_form' => array(
      'label' => t('Entity List'),
      'field types' => array('entity_list_field_entity_list'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function entity_list_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  if (!user_access('view entity_list_field widget')) {
    return $element;
  }

  $form['#attached']['js'] = array(drupal_get_path('module', 'entity_list_field') . '/widget-form.js');

  /******************************************
   * Default values for the widget inputs.
   */

  $instance_info = field_info_instance($instance['entity_type'], $instance['field_name'], $instance['bundle']);
  $dval = $instance_info['default_value'][$delta];

  /* The hard-coded defaults at the end of the ternary ('node', etc) serve only
   * to set the defaults for the widget form presented when a field instance is
   * first created.  These are the default defaults, before any defaults have
   * been saved.
   */

  $dflt_type = isset($dval['type']) ? $dval['type'] : 'node';
  $dflt_bundle = isset($dval['bundle']) ? $dval['bundle'] : json_encode(array('article'));
  $dflt_vm = isset($dval['view_mode']) ? $dval['view_mode'] : 'teaser';
  $dflt_numitems = isset($dval['numitems']) ? $dval['numitems'] : '3';
  $dflt_sort = isset($dval['sort']) ? $dval['sort'] : 'created';
  $dflt_column = isset($dval['column']) ? $dval['column'] : 'value';
  $dflt_direction = isset($dval['direction']) ? $dval['direction'] : 'DESC';
  $dflt_sort2 = isset($dval['sort2']) ? $dval['sort2'] : 'title';
  $dflt_column2 = isset($dval['column2']) ? $dval['column2'] : 'value';
  $dflt_direction2 = isset($dval['direction2']) ? $dval['direction2'] : 'DESC';
  $dflt_terms = isset($dval['terms']) ? $dval['terms'] : json_encode(array());
  $dflt_pager = isset($dval['pager']) ? $dval['pager'] : '2';
  $dflt_cache = isset($dval['cache']) ? $dval['cache'] : '1';

  // Get the saved values for the widget inputs, if any.
  $item = isset($items[$delta]) ? $items[$delta] : NULL;

  $type = isset($item['type']) ? $item['type'] : $dflt_type;
  $bundle = isset($item['bundle']) ? $item['bundle'] : $dflt_bundle;
  $view_mode = isset($item['view_mode']) ? $item['view_mode'] : $dflt_vm;
  $numitems = isset($item['numitems']) ? $item['numitems'] : $dflt_numitems;
  $sort = isset($item['sort']) ? $item['sort'] : $dflt_sort;
  $column = isset($item['column']) ? $item['column'] : $dflt_column;
  $direction = isset($item['direction']) ? $item['direction'] : $dflt_direction;
  $sort2 = isset($item['sort2']) ? $item['sort2'] : $dflt_sort2;
  $column2 = isset($item['column2']) ? $item['column2'] : $dflt_column2;
  $direction2 = isset($item['direction2']) ? $item['direction2'] : $dflt_direction2;
  $terms = isset($item['terms']) ? $item['terms'] : $dflt_terms;
  $pager = isset($item['pager']) ? $item['pager'] : $dflt_pager;
  $cache = isset($item['cache']) ? $item['cache'] : $dflt_cache;

  /******************************************
  * Widget settings.
  */

  // Default settings for the field instance.
  $dflt_settings = $instance_info['settings'];

  // Current settings for the field instance.
  $settings = $field['settings'];
  if (isset($settings['inputs'])) {
    $input_settings = $settings['inputs'];
  }
  else {
    $input_settings = array();
  }
  if (isset($settings['other'])) {
    $other_settings = $settings['other'];
  }
  else {
    $other_settings = array();
  }

  /******************************************
  * JS settings.
  */

  $entity_info = entity_get_info();
  $property_info = entity_get_property_info();
  $field_info = field_info_field_map();

  $map = array();
  foreach ($entity_info as $t => $et) {

    $fields = array();
    foreach ($et['bundles'] as $b => $value) {
      $fields = field_info_instances($t, $b);

      foreach ($fields as $name => $value) {
        $sort_ops_field[$name] = t('field') . ': ' . $name;
        $info = field_info_field($name);
        $fields[$name]['columns'] = $info['columns'];
      }

      $map[$t]['bundles'][$b] = $fields;
    }

    foreach ($property_info[$t]['properties'] as $name => $value) {
      $sort_ops_property[$name] = t('property') . ': ' . $value['label'];
    }

    $map[$t]['properties'] = $property_info[$t]['properties'];
    $map[$t]['view modes'] = $entity_info[$t]['view modes'];

  }

  // Build an array of all possible sort options for all entity types and
  // bundles. This enables us to avoid illegal choice errors for the dropdowns.
  // If a property name is the same as a field name, the field takes precedence.
  $sort_ops = $sort_ops_property;
  $sort_ops += $sort_ops_field;
  $sort_ops += array('entity_list_field_na' => '-' . t('Select') . '-');

  $js_settings = array(
    // A array structure describing the possible types, bundles, properties
    // and fields.
    'map' => $map,
    // The view mode currently saved for this list.
    'view_mode' => $view_mode,
    // The first sort currently saved.
    'sort' => $sort,
    // The second sort currently saved.
    'sort2' => $sort2,
    'delta' => $delta,
  );
  drupal_add_js(array('entity_list_field' => $js_settings), 'setting');

  /******************************************
   * Form elements.
   */

  // Set up the fieldset & legend.
  $collapsed = entity_list_field_get_setting('collapsed', $other_settings, $dflt_settings);
  $element += array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => 1 === $collapsed,
    '#title' => t('Configure item list'),
    '#tree' => TRUE,
    '#attributes' => array('class' => array('entity_list_field')),
  );

  foreach ($entity_info as $key => $value) {

    /* The next three isset checks are necessary because some modules leave
     * behind a trail of incomplete entity_info when they are disabled.
     */
    if (isset($value['label'])) {
      $entity_options[$key] = $value['label'];
      /* For now we don't support file entities.  This may change
       * if there is a release of the file_entity module.
       */
      unset($entity_options['file']);
    }

    /* We use javascript to set the options for the dropdowns, but we still have
     * to load the option arrays for bundles and view modes to prevent "illegal
     * choice" errors when we submit the form. These arrays contain all bundles
     * and view modes for all the site's entities.  Our javascript limits the
     * options to whatever is applicable to the currently selected entity type.
     */
    if (empty($value['bundles'])) {
      $bundle_options[$key] = $value['label'];
    }
    elseif (isset($value['bundles'])) {
      foreach ($value['bundles'] as $k => $v) {
        $bundle_options[$k] = $v['label'];
      }
    }

    if (isset($value['view modes'])) {
      foreach ($value['view modes'] as $k => $v) {
        $view_mode_options[$k] = $v['label'];
      }
    }
  }

  $reveal = user_access('view hidden entity_list_field inputs');

  if (!$reveal && isset($input_settings['show_type']) && 1 !== $input_settings['show_type']) {
    $element['type']['#type'] = 'hidden';
    $element['type']['#value'] = $type;
  }
  else {
    $title = entity_list_field_get_setting('type_label', $input_settings, $dflt_settings);
    $element['type'] = array(
      '#title' => check_plain($title),
      '#type' => 'select',
      '#options' => $entity_options,
      '#default_value' => $type,
    );
  }
  $element['type']['#attributes'] = array('id' => array('entity_list_field-type-' . $delta));

  if (!$reveal && isset($input_settings['show_bundle']) && 1 !== $input_settings['show_bundle']) {
    $element['bundle_select']['#type'] = 'hidden';
    $element['bundle']['#value'] = json_decode($bundle);
  }
  else {
    $title = entity_list_field_get_setting('bundle_label', $input_settings, $dflt_settings);
    $element['bundle_select'] = array(
      '#prefix' => '<div id="bundle_select-input-wrapper-' . $delta . '">',
      '#suffix' => '</div>',
      '#title' => check_plain($title),
      '#type' => 'checkboxes',
      '#options' => $bundle_options,
      '#default_value' => json_decode($bundle),
    );
  }
  $element['bundle_select']['#attributes'] = array('class' => array('entity_list_field-bundle_select'));

  /* The 'bundle' element is always hidden.  This is where we store the value
   * that gets saved. The value for this element is set in widget-form.js
   * and changes depending on the 'bundle_select' value.
   * See also https://drupal.org/node/1940722
   */
  $element['bundle']['#type'] = 'hidden';
  $element['bundle']['#attributes'] = array('id' => array('entity_list_field-bundle-' . $delta));

  if (!$reveal && isset($input_settings['show_view_mode']) && 1 !== $input_settings['show_view_mode']) {
    $element['view_mode']['#type'] = 'hidden';
    $element['view_mode']['#value'] = $view_mode;
  }
  else {
    $title = entity_list_field_get_setting('view_mode_label', $input_settings, $dflt_settings);
    $element['view_mode'] = array(
      '#prefix' => '<div id="view_mode-input-wrapper-' . $delta . '">',
      '#suffix' => '</div>',
      '#title' => check_plain($title),
      '#type' => 'select',
      '#options' => $view_mode_options,
      '#default_value' => $view_mode,
    );
  }
  $element['view_mode']['#attributes'] = array('id' => array('entity_list_field-view_mode-' . $delta));

  if (!$reveal && isset($input_settings['show_numitems']) && 1 !== $input_settings['show_numitems']) {
    $element['numitems']['#type'] = 'hidden';
    $element['numitems']['#value'] = $numitems;
  }
  else {
    $title = entity_list_field_get_setting('numitems_label', $input_settings, $dflt_settings);
    $element['numitems'] = array(
      '#title' => check_plain($title),
      '#type' => 'textfield',
      '#default_value' => $numitems,
      '#size' => 2,
    );
  }
  $element['numitems']['#attributes'] = array('id' => array('entity_list_field-numitems-' . $delta));

  if (!$reveal && isset($input_settings['show_sort']) && 1 !== $input_settings['show_sort']) {
    $element['sort']['#type'] = 'hidden';
    $element['sort']['#value'] = $sort;
  }
  else {
    $title = entity_list_field_get_setting('sort_label', $input_settings, $dflt_settings);
    $element['sort'] = array(
      '#title' => check_plain($title),
      '#type' => 'select',
      '#options' => $sort_ops,
      '#default_value' => $sort,
    );
    $element['column'] = array(
      '#title' => t('Column'),
      '#type' => 'textfield',
      '#description' => t('Specify the database column to sort on for this field.  Do not include the field name prefix.'),
      '#default_value' => $column,
      '#size' => 30,
    );
  }
  $element['sort']['#attributes'] = array('id' => array('entity_list_field-sort-' . $delta));
  $element['column']['#attributes'] = array('id' => array('entity_list_field-column-' . $delta));

  if (!$reveal && isset($input_settings['show_direction']) && 1 !== $input_settings['show_direction']) {
    $element['direction']['#type'] = 'hidden';
    $element['direction']['#value'] = $direction;
  }
  else {
    $title = entity_list_field_get_setting('direction_label', $input_settings, $dflt_settings);
    $element['direction'] = array(
      '#title' => check_plain($title),
      '#type' => 'select',
      '#options' => array('ASC' => 'Ascending', 'DESC' => 'Descending'),
      '#default_value' => $direction,
    );
  }
  $element['direction']['#attributes'] = array('id' => array('entity_list_field-direction-' . $delta));

  if (!$reveal && isset($input_settings['show_sort2']) && 1 !== $input_settings['show_sort2']) {
    $element['sort2']['#type'] = 'hidden';
    $element['sort2']['#value'] = $sort2;
  }
  else {
    $title = entity_list_field_get_setting('sort2_label', $input_settings, $dflt_settings);
    $element['sort2'] = array(
      '#title' => check_plain($title),
      '#type' => 'select',
      '#options' => $sort_ops,
      '#default_value' => $sort2,
    );
    $element['column2'] = array(
      '#title' => t('Column'),
      '#type' => 'textfield',
      '#description' => t('Specify the database column to sort on for this field.  Do not include the field name prefix.'),
      '#default_value' => $column2,
      '#size' => 30,
    );
  }
  $element['sort2']['#attributes'] = array('id' => array('entity_list_field-sort2-' . $delta));
  $element['column2']['#attributes'] = array('id' => array('entity_list_field-column2-' . $delta));

  if (!$reveal && isset($input_settings['show_direction2']) && 1 !== $input_settings['show_direction2']) {
    $element['direction2']['#type'] = 'hidden';
    $element['direction2']['#value'] = $direction2;
  }
  else {
    $title = entity_list_field_get_setting('direction2_label', $input_settings, $dflt_settings);
    $element['direction2'] = array(
      '#title' => check_plain($title),
      '#type' => 'select',
      '#options' => array('ASC' => 'Ascending', 'DESC' => 'Descending'),
      '#default_value' => $direction2,
    );
  }
  $element['direction2']['#attributes'] = array('id' => array('entity_list_field-direction2-' . $delta));

  if (!$reveal && isset($input_settings['show_terms']) && 1 !== $input_settings['show_terms']) {
    $element['terms']['#type'] = 'hidden';
    $element['terms']['#value'] = json_decode($terms) ? implode(', ', json_decode($terms)) : '';
  }
  else {
    $title = entity_list_field_get_setting('terms_label', $input_settings, $dflt_settings);
    $element['terms'] = array(
      '#title' => check_plain($title),
      '#type' => 'textfield',
      '#size' => 30,
      '#description' => t('Enter a comma-separated list of term IDs.'),
      '#default_value' => json_decode($terms) ? implode(', ', json_decode($terms)) : '',
    );
  }
  $element['terms']['#attributes'] = array('id' => array('entity_list_field-terms-' . $delta));

  if (!$reveal && isset($input_settings['show_pager']) && 1 !== $input_settings['show_pager']) {
    $element['pager']['#type'] = 'hidden';
    $element['pager']['#value'] = $pager;
  }
  else {
    $title = entity_list_field_get_setting('pager_label', $input_settings, $dflt_settings);
    $element['pager'] = array(
      '#type' => 'radios',
      '#title' => check_plain($title),
      '#options' => array(t('No pager'), t('Standard pager'), t('Ajax pager')),
      '#default_value' => $pager,
    );
  }

  if (!$reveal && isset($input_settings['show_cache']) && 1 !== $input_settings['show_cache']) {
    $element['cache']['#type'] = 'hidden';
    $element['cache']['#value'] = $cache;
  }
  else {
    $title = entity_list_field_get_setting('cache_label', $input_settings, $dflt_settings);
    $element['cache'] = array(
      '#type' => 'checkbox',
      '#title' => check_plain($title),
      '#description' => t('The cache for this list will be cleared any time an entity of the relevant type (e.g. node, user, etc.) is saved or deleted.'),
      '#default_value' => $cache,
    );
  }

  return $element;
}

/**
 * Implements hook_field_is_empty().
 */
function entity_list_field_field_is_empty($item, $field) {

  return FALSE;

}

/**
 * Helper function used in entity_list_field_field_validate().
 */
function entity_list_field_item_count_label($field, $instance) {

  $settings = $field['settings'];
  $instance_info = field_info_instance($instance['entity_type'], $instance['field_name'], $instance['bundle']);
  $dflt_settings = $instance_info['settings'];

  return entity_list_field_get_setting('numitems_label', $settings, $dflt_settings);
}

/**
 * Implements hook_field_validate().
 */
function entity_list_field_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {

  foreach ($items as $delta => $item) {

    if (!is_numeric($item['numitems'])) {
      $item_count_label = entity_list_field_item_count_label($field, $instance);
      $numitems_error = t(
        '@item_count_label must be numeric',
        array(
          '@item_count_label' => $item_count_label,
        )
      );
    }
    elseif ($item['numitems'] != preg_replace('#\D#', '', $item['numitems'])) {
      $item_count_label = entity_list_field_item_count_label($field, $instance);
      if ('-' == substr(trim($item['numitems']), 0, 1)) {
        $t = '@item_count_label must not be negative.';
      }
      elseif (1 === $instance['required']) {
        $t = '@item_count_label must be a whole number greater than zero.';
      }
      else {
        $t = '@item_count_label must be a whole number.';
      }
      $numitems_error = t($t, array('@item_count_label' => $item_count_label));
    }
    elseif (1 === $instance['required'] && (empty($item['numitems']) || 1 > $item['numitems'])) {
      $item_count_label = entity_list_field_item_count_label($field, $instance);
      $numitems_error = t(
        '@field_name is required. Please enter a whole number greater than zero for the @item_count_label.',
        array(
          '@field_name' => ucwords($instance['label']),
          '@item_count_label' => $item_count_label,
        )
      );
    }

    if (isset($numitems_error)) {
      $errors[$field['field_name']][$langcode][$delta][] = array(
        'error' => 'entity_list_field_invalid',
        'message' => $numitems_error,
      );
    }

    $regex = !preg_match("/^[0-9\s,]+$/", $item['terms']);
    if (!empty($item['terms']) && $regex) {
      $msg = t('Please enter only numbers and commas in the Terms field.');
      $errors[$field['field_name']][$langcode][$delta][] = array(
        'error' => 'entity_list_field_invalid',
        'message' => $msg,
      );
    }
  }
}

/**
 * Implements hook_field_widget_error().
 */
function entity_list_field_field_widget_error($element, $error, $form, &$form_state) {

  switch ($error['error']) {
    case 'entity_list_field_invalid':
      form_error($element, $error['message']);
      break;
  }

}

/**
 * Implements hook_field_presave().
 */
function entity_list_field_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {

  if ('entity_list_field_entity_list' == $field['type']) {

    foreach ($items as $key => $value) {

      if ('' == $value['bundle']) {
        $items[$key]['bundle'] = json_encode(array());
      }

      // Tidy up the data, removing extraneous commas and white space.
      $terms = trim($value['terms']);
      if (!empty($terms)) {
        $arr = explode(',', $terms);
        $keep = array();
        if (!empty($arr)) {
          foreach ($arr as $value) {
            $value = trim($value);
            if (!empty($value)) {
              $keep[] = $value;
            }
          }
        }
        $items[$key]['terms'] = json_encode($keep);
      }

    }
  }
}

/**
 * Implements hook_field_settings_form().
 */
function entity_list_field_field_settings_form($field, $instance, $has_data) {

  $settings = $field['settings'];
  if (isset($settings['inputs'])) {
    $input_settings = $settings['inputs'];
  }
  else {
    $input_settings = array();
  }
  if (isset($settings['other'])) {
    $other_settings = $settings['other'];
  }
  else {
    $other_settings = array();
  }
  $instance_info = field_info_instance($instance['entity_type'], $instance['field_name'], $instance['bundle']);
  $dflt_settings = $instance_info['settings'];

  $form = array(
    '#type' => 'fieldset',
    '#title' => 'Configure item list',
    '#attributes' => array('class' => array('entity_list_field-settings')),
    '#tree' => TRUE,
  );

  $input_config['type'] = array('label' => 'entity type');
  $input_config['bundle'] = array('label' => 'bundle');
  $input_config['view_mode'] = array('label' => 'view mode');
  $input_config['numitems'] = array('label' => 'numitems');
  $input_config['sort'] = array('label' => 'sort');
  $input_config['direction'] = array('label' => 'sort direction');
  $input_config['sort2'] = array('label' => 'second sort');
  $input_config['direction2'] = array('label' => 'second sort direction');
  $input_config['terms'] = array('label' => 'taxonomy terms');
  $input_config['pager'] = array('label' => 'pager');
  $input_config['cache'] = array('label' => 'cache');

  $inputs = array(
    '#type' => 'fieldset',
    '#title' => 'Input visibility & labels',
    '#description' => '<div class="description"><p>' . t('Control whether content editors can see particular widget inputs. When an input is hidden, the saved value applies.  If an input has always been hidden, the saved value will be the default value. Roles with the <em>View hidden widget inputs</em> permission can view the inputs regardless.') . '</p></div>',
    '#collapsible' => TRUE,
    '#tree' => TRUE,
  );

  foreach ($input_config as $key => $val) {
    $inputs['show_' . $key] = array(
      '#type' => 'checkbox',
      '#title' => t('Show @label input', array('@label' => $val['label'])),
      '#default_value' => entity_list_field_get_setting('show_' . $key, $input_settings, $dflt_settings),
    );
    $inputs[$key . '_label'] = array(
      '#type' => 'textfield',
      '#title' => t('@label input label', array('@label' => ucfirst($val['label']))),
      '#default_value' => entity_list_field_get_setting($key . '_label', $input_settings, $dflt_settings),
    );
  }

  $form['inputs'] = $inputs;

  $other = array(
    '#type' => 'fieldset',
    '#title' => 'Other list settings',
    '#tree' => TRUE,
  );

  $other['pager_position'] = array(
    '#type' => 'radios',
    '#title' => t('Pager position'),
    '#description' => t('This setting applies only when the pager is set to <em>Standard pager</em> or <em>Ajax pager</em>.'),
    '#options' => array(t('Above'), t('Below'), t('Both')),
    '#default_value' => entity_list_field_get_setting('pager_position', $other_settings, $dflt_settings),
  );

  $other['collapsed'] = array(
    '#type' => 'checkbox',
    '#title' => t('Collapse widget fieldset by default'),
    '#description' => t("This controls whether the widget fieldset is collapsed by default in the container entity's create/edit form."),
    '#default_value' => entity_list_field_get_setting('collapsed', $other_settings, $dflt_settings),
  );

  $other['list_class'] = array(
    '#type' => 'textfield',
    '#title' => t('List class'),
    '#description' => t('For more information on overriding the base class, see the <a href="@dev-docs">developer docs</a>.', array('@dev-docs' => 'https://drupal.org/node/1942468')),
    '#default_value' => entity_list_field_get_setting('list_class', $other_settings, $dflt_settings),
  );

  $form['other'] = $other;

  return $form;

}

/**
 * Get the saved setting or fall back on the default.
 */
function entity_list_field_get_setting($name, $settings, $dflt_settings) {

  return isset($settings[$name]) ? $settings[$name] : $dflt_settings[$name];

}

/**
 * Implements hook_permission().
 */
function entity_list_field_permission() {
  return array(
    'view entity_list_field widget' => array(
      'title' => t('View widget'),
      'description' => t('View the widget.'),
    ),
    'view hidden entity_list_field inputs' => array(
      'title' => t('View hidden widget inputs'),
      'description' => t('View all widget inputs, including those configured to be hidden.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function entity_list_field_menu() {

  $items['entity_list_field/pageturner'] = array(
    'page callback' => 'entity_list_field_pageturner_callback',
    'access callback' => TRUE,
    'file' => 'entity_list_field.pages.inc',
  );

  return $items;

}
