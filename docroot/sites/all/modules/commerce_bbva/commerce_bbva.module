<?php
/**
 * @file
 * Provides a payment method for Drupal Commerce using bbva gateway.
 */

define('COMMERCE_BBVA_URL_TEST', 'https://w3.grupobbva.com/TLPV/tlpv/TLPV_pub_RecepOpModeloServidor');
define('COMMERCE_BBVA_URL_LIVE', 'https://w3.grupobbva.com/TLPV/tlpv/TLPV_pub_RecepOpModeloServidor');
// Number to check order_id on transactions.
define('COMMERCE_BBVA_LOCATOR', 10000000000);

/**
 * Implements hook_menu().
 */
function commerce_bbva_menu() {
  $items['bbva/callback'] = array(
    'page callback' => 'commerce_bbva_callback',
    'page arguments' => array(),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Get GET response from bbva.
 */
function commerce_bbva_callback() {

  // TODO: Check documentation to confirm BBVA IP?
  $bbva_ip = '89.107.180.35';

  $params = drupal_get_query_parameters();

  watchdog('commerce_bbva', 'BBVA callback', array(), WATCHDOG_INFO);

  if (!empty($_GET) && /*ip_address() === $bbva_ip &&*/ _commerce_bbva_check_response($params)) {
    return '';
  }
  else {
    drupal_access_denied();
  }
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_bbva_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_bbva'] = array(
    'base' => 'commerce_bbva',
    'title' => t('BBVA Payment'),
    'short_title' => t('BBVA'),
    'description' => t('BBVA payment gateway integration'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
    'active' => TRUE,
  );

  return $payment_methods;
}

/**
 * Payment method callback: settings form.
 */
function commerce_bbva_settings_form($settings = NULL) {
  $form = array();
  $settings = (array) $settings + array(
    'name' => '',
    'mode' => 'test',
    'Ds_Merchant_Titular' => '',
    'Ds_MerchantCode' => '',
    'Ds_MerchantSignature' => '',
    'Ds_Merchant_Terminal' => '001',
    'Ds_Transaction_Prefix' => '99',
    'currency' => '978',
    'advanced' => array(
      'override_url' => '',
      'encryption' => 'sha1-enhanced',
      'response' => 'post',
    ),
  );
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Bank Name'),
    '#description' => t('Administrative name for the bank.'),
    '#default_value' => $settings['name'],
    '#size' => 80,
    '#maxlength' => 255,
    '#required' => TRUE,
  );
  $form['mode'] = array(
    '#type' => 'radios',
    '#title' => t('Mode of the transactions'),
    '#default_value' => $settings['mode'],
    '#options' => array('test' => t('Test'), 'live' => t('Live')),
    '#maxlength' => 6,
    '#required' => TRUE,
  );
  $form['Ds_Merchant_Titular'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant Titular'),
    '#default_value' => $settings['Ds_Merchant_Titular'],
    '#size' => 80,
    '#maxlength' => 255,
    '#required' => TRUE,
  );
  $form['Ds_MerchantCode'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant Code'),
    '#default_value' => $settings['Ds_MerchantCode'],
    '#size' => 80,
    '#maxlength' => 255,
    '#required' => TRUE,
  );
  $form['Ds_MerchantKeyPass'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant Key Password'),
    '#size' => 10,
    '#default_value' => $settings['Ds_MerchantKeyPass'],
    '#required' => TRUE,
  );
  $form['Ds_MerchantSignature'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant Signature'),
    '#default_value' => $settings['Ds_MerchantSignature'],
    '#size' => 80,
    '#maxlength' => 255,
    '#required' => TRUE,
  );
  $form['Ds_Merchant_Terminal'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant Terminal'),
    '#default_value' => $settings['Ds_Merchant_Terminal'],
    '#size' => 6,
    '#maxlength' => 6,
    '#required' => TRUE,
  );
  $form['Ds_Transaction_Prefix'] = array(
    '#type' => 'textfield',
    '#title' => t('Transaction id prefix'),
    '#default_value' => $settings['Ds_Transaction_Prefix'],
    '#size' => 6,
    '#maxlength' => 6,
    '#required' => TRUE,
  );
  $form['currency'] = array(
    '#type' => 'radios',
    '#title' => t('Currency'),
    '#default_value' => $settings['currency'],
    '#options' => array(
      '978' => t('Euro'),
      '840' => t('U.S. Dollar'),
      '826' => t('Pound'),
      '392' => t('Yen'),
      '32'  => t('Southern Argentina'),
      '124' => t('Canadian Dollar'),
      '152' => t('Chilean Peso'),
      '170' => t('Colombian Peso'),
      '356' => t('India Rupee'),
      '484' => t('New Mexican Peso'),
      '604' => t('Soles'),
      '756' => t('Swiss Franc'),
      '986' => t('Brazilian Real'),
      '937' => t('Bolivar'),
      '949' => t('Turkish lira'),
    ),
    '#required' => TRUE,
  );
  $form['description'] = array(
    '#type' => 'textarea',
    '#title' => t('Payment instructions'),
    '#description' => t('Instructions for customers on the checkout page. Use &lt;br /&gt; for line break.'),
    '#default_value' => isset($settings['description']) ? $settings['description'] : '',
    '#required' => FALSE,
    '#rows' => 3,
  );
  $form['advanced'] = array(
    '#type' => 'fieldset',
    '#title' => t('Advanced options'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['advanced']['override_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Override bank connect url'),
    '#default_value' => $settings['advanced']['override_url'],
    '#size' => 80,
    '#maxlength' => 255,
  );
  return $form;
}

/**
 * Payment method callback: redirect form to bbva gateway.
 */
function commerce_bbva_redirect_form($form, &$form_state, $order, $payment_method) {
  // Return an error if the enabling action's settings haven't been configured.
  if (empty($payment_method['settings']['Ds_MerchantCode'])) {
    drupal_set_message(t('BBVA is not configured for use. Merchant code has not been specified.'), 'error');
    return array();
  }

  if (empty($payment_method['settings']['Ds_MerchantSignature'])) {
    drupal_set_message(t('BBVA signature is not set for use. Merchant signature has not been specified.'), 'error');
    return array();
  }

  if (empty($payment_method['settings']['Ds_MerchantKeyPass'])) {
    drupal_set_message(t('BBVA is not set for use. Merchant key pass has not been specified.'), 'error');
    return array();
  }

  $settings = array(
    // Return to the previous page when payment is canceled.
    'cancel_return' => url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
    // Return to the payment redirect page for processing successful payments.
    'return' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
    // Url to get result of payment.
    'merchant_url' => url('bbva/callback', array('absolute' => TRUE)),
    // Specify the current payment method instance ID in the notify_url
    'payment_method' => $payment_method['instance_id'],
  );

  return commerce_bbva_order_form($form, $form_state, $order, $payment_method['settings'] + $settings);
}

/**
 * Build the order form for the bbva.
 *
 * @param $order
 * The fully loaded order being paid for.
 */
function commerce_bbva_order_form($form, &$form_state, $order, $settings) {

  // Preparing form data
  // FIXME: We assume quantity value is in cents!
  $amount = ($order->commerce_order_total[LANGUAGE_NONE][0]['amount'] / 100);

  $formatted_price = sprintf("%01.2f", $amount);
  $price           = explode('.', $formatted_price);
  $amount_xml      = $price[0] . ',' . $price[1];
  $amount          = $price[0] . $price[1];

  // Locator.
  $locator = COMMERCE_BBVA_LOCATOR - $order->order_id;

  // Currency.
  $currency = $settings['currency'];

  // id_transaction
  list($usec, $sec) = explode(' ', microtime());
  $prefix = isset($settings['Ds_Transaction_Prefix']) ? $settings['Ds_Transaction_Prefix'] : 99;
  $id_transaction = $prefix . $sec . substr($usec, 2, 2);

  // id_terminal
  $id_terminal = $settings['Ds_Merchant_Terminal'];

  // id_commerce
  $id_commerce = $settings['Ds_MerchantCode'];

  // URL used by BBVA answer our request.
  $url_back = $settings['merchant_url'];

  // URL used by BBVA answer our request.
  $url_redirect = $settings['return'] . '?localizador=' . $locator;

  // Language.
  $language = 'es';

  // @cls country.
  $country = 'ES';

  // Download key.
  $key_download_pass = $settings['Ds_MerchantKeyPass'];

  // Secret key.
  $secret_key = $settings['Ds_MerchantSignature'];

  // Get the url to connect to.
  if (!empty($settings['advanced']['override_url'])) {
    $url_tpv = $settings['advanced']['override_url'];
  }
  elseif ($settings['mode'] == 'live') {
    $url_tpv = COMMERCE_BBVA_URL_LIVE;
  }
  else {
    $url_tpv = COMMERCE_BBVA_URL_TEST;
  }

  $des_key = $key_download_pass . substr($id_commerce, 0, 9) . "***";

  $desobfuscated = commerce_bbva_desobfuscate($secret_key, $des_key);

  // Message to sign.
  $message = $id_terminal . $id_commerce . $id_transaction . $amount . $currency . $locator . $desobfuscated;
  $signature = strtoupper(sha1($message));

  $peticion = "<tpv>
    <oppago>
      <idterminal>" . $id_terminal . "</idterminal>
      <idcomercio>" . $id_commerce . "</idcomercio>
      <idtransaccion>" . $id_transaction . "</idtransaccion>
      <moneda>" . $currency . "</moneda>
      <importe>" . $amount_xml . "</importe>
      <urlcomercio>" . $url_back . "</urlcomercio>
      <idioma>" . $language . "</idioma>
      <pais>" . $country . "</pais>
      <urlredir>" . $url_redirect . "</urlredir>
      <localizador>" . $locator . "</localizador>
      <firma>" . $signature . "</firma>
    </oppago>
  </tpv>";

  $peticion = str_replace(array(" ", "\n"), array("", ""), $peticion);

  $form['#action'] = $url_tpv;
  $form['peticion'] = array('#type' => 'hidden', '#value' => $peticion);
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Continue'),
  );

  return $form;
}

/**
 * Implements hook_redirect_form_validate().
 */
function commerce_bbva_redirect_form_validate($order, $payment_method) {

  $transactions = array_reverse(commerce_payment_transaction_load_multiple(array(), array('order_id' => $order->order_id), TRUE));
  (is_array($transactions) && count($transactions) && $transactions[0]->status === 'success') ? $result = TRUE : $result = FALSE;

  if ($result) {
    commerce_payment_redirect_pane_next_page($order);
    return TRUE;
  }
  else {
    commerce_payment_redirect_pane_previous_page($order);
    return FALSE;
  }

  return FALSE;
}

/**
 * Checks bbva response.
 *
 * @param $response
 * this is the bank response ($_GET);
 */
function _commerce_bbva_check_response($response) {

  $payment_method = commerce_payment_method_instance_load('commerce_bbva|commerce_payment_commerce_bbva');

  if (!empty($response['peticion'])) {

    $peticion = (string) $response['peticion'];

    // Encode the string to avoid latin characters like "ñ" (ESPAÑA).
    // $peticion = preg_replace("/<nombrecomercio>(.*?)<\/nombrecomercio>/ie", '', $peticion);
    $peticion = '<?xml version=\'1.0\'?>' . utf8_encode($peticion);

    // READ XML:
    $peticion_xml = simplexml_load_string($peticion);
    $respago = isset($peticion_xml->respago) ? $peticion_xml->respago : NULL;

    if ($respago) {

      $locator  = (int) reset($respago->localizador);
      $order_id = COMMERCE_BBVA_LOCATOR - $locator;
      $order    = commerce_order_load($order_id);

      // Coderror indicates if everything worked fine.
      $coderror = (int) reset($respago->coderror);
      $estado = (int) reset($respago->estado);

      if ($coderror == 0 && $estado == 2) {

        // Set the variables: form BANK.
        $id_terminal     = (string) reset($respago->idterminal);
        $id_comercio     = (string) reset($respago->idcomercio);
        $id_transaccion  = (string) reset($respago->idtransaccion);
        $moneda          = (int) reset($respago->moneda);
        $float_import    = explode('.', (string) reset($respago->importe));
        $importe         = $float_import[0] . $float_import[1];
        $codautorizacion = (string) reset($respago->codautorizacion);
        $firma           = (string) reset($respago->firma);

        // Set the variables: from Drupal -> Calculated
        $key_download_pass = $payment_method['settings']['Ds_MerchantKeyPass'];
        $secret_key        = $payment_method['settings']['Ds_MerchantSignature'];
        $des_key           = $key_download_pass . substr($id_comercio, 0, 9) . "***";
        $obfuscated        = $secret_key;
        $desobfuscated     = commerce_bbva_desobfuscate($obfuscated, $des_key);

        $message   = $id_terminal . $id_comercio . $id_transaccion . $importe . $moneda . $estado . $coderror . $codautorizacion . $desobfuscated;
        $signature = strtoupper(sha1($message));

        $bbva_response = array();
        $bbva_response['id_transaccion'] = $id_transaccion;

        if ($firma == $signature) {
          commerce_bbva_transaction($payment_method, $order, $bbva_response, COMMERCE_PAYMENT_STATUS_SUCCESS);
          return TRUE;
        }
        else {
          commerce_bbva_transaction($payment_method, $order, $bbva_response, COMMERCE_PAYMENT_STATUS_FAILURE);
        }
      }
    } // Foreach.

  } // Peticion.

  return FALSE;

}

/**
 * Save the payment transaction for the order.
 */
function commerce_bbva_transaction($payment_method, $order, $response, $transaction_status) {

  $transaction = commerce_payment_transaction_new('commerce_bbva', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $order->commerce_order_total[LANGUAGE_NONE][0]['amount'];
  $transaction->currency_code = $order->commerce_order_total[LANGUAGE_NONE][0]['currency_code'];
  $transaction->remote_id = $response['id_transaccion'];

  $transaction->status = $transaction_status;
  if ($transaction_status == COMMERCE_PAYMENT_STATUS_SUCCESS) {
    $transaction->message = 'Transaction accepted with id @transaction_id';
  }
  elseif ($transaction_status == COMMERCE_PAYMENT_STATUS_FAILURE) {
    $transaction->message = 'Error for the transaction with id @transaction_id';
  }
  $transaction->message_variables = array(
    '@transaction_id' => $response['id_transaccion'],
  );
  commerce_payment_transaction_save($transaction);
}

/**
 * Payment method callback: checkout form.
 */
function commerce_bbva_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  if (!empty($payment_method['settings']['description'])) {
    $form = array();
    $form['bbva_description'] = array(
      '#type' => 'item',
      '#title' => t('Payment instructions'),
      '#markup' => '<p class="bbva-description">' . $payment_method['settings']['description'] . '</p>',
    );
    return $form;
  }
}

/**
 * BBVA desofuscate function.
 */
function commerce_bbva_desobfuscate($pal_sec_ofuscada, $clave_xor) {
  $trozos = explode(";", $pal_sec_ofuscada);
  $tope = count($trozos);
  $res = "";
  for ($i = 0; $i < $tope; $i++) {
    $x1 = ord($clave_xor[$i]);
    $x2 = hexdec($trozos[$i]);
    $r = $x1 ^ $x2;
    $res .= chr($r);
  }
  return ($res);
}
