<?php

/**
 * @file
 *  Hooks for the Update Trigger Build Jenkins module.
 */

/**
 * Implements hook_entity_info().
 */
function update_trigger_build_jenkins_entity_info() {

  // Define the Jenkins CI Server entity.  Comments are added here as a guide for
  // developers who want to implement their own CI Server Type.
  $entities = array(
    'ci_server_jenkins' => array(
      // The display name of the CI Server Type.
      'label' => t('Jenkins CI Server'),
      // This is the class that implements the CIServerTypeInterface.  Ensure that 
      // the class is declared in your .info file. See JenkinsCIServerType.php and 
      // also update_trigger_build_jenkins.info.
      'entity class' => 'JenkinsCIServerType',
      'controller class' => 'EntityAPIControllerExportable',
      // The base table is a database table that contains all of the fields required by this entity.
      // The table is declared in hook_schema() in the .install file.
      // See update_trigger_build_jenkins_schema() in update_trigger_build_jenkins.install.
      'base table' => 'update_trigger_build_jenkins_ci_server',
      'fieldable' => FALSE,
      // This is very important since it allows update_trigger_build to discover the new
      // CI Server type.  It's also necessary to add this bundle to the CI Server via a
      // hook_entity_info_alter().  See update_trigger_build_jenkins_entity_info_alter().
      'bundle of' => 'ci_server',
      'exportable' => TRUE,
      'entity keys' => array(
        'id' => 'id',
        'name' => 'name',
        'label' => 'label',
      ),
      // This callback determines access for creating, editing, deleting the CI Server Type.
      // The Jenkins implementation is quite minimal.
      // See update_trigger_build_jenkins_ci_build_schedule_access_callback().
      'access callback' => 'update_trigger_build_jenkins_ci_build_schedule_access_callback',
      // The machine name of this module.
      'module' => 'update_trigger_build_jenkins',
      // The admin UI where new entities can be created, edited, deleted, cloned and exported.
      // Use a path in the following format:
      //   admin/config/development/update_trigger_build/<my_server_types>
      //
      // You also need to implement:
      //  <ci_server_machine_name>_form() and
      //  <ci_server_machine_name>_form_submit()
      //
      // See ci_server_jenkins_form().
      // See ci_server_jenkins_form_submit().
      'admin ui' => array(
        'path' => 'admin/config/development/update_trigger_build/jenkins_ci_servers',
        'controller class' => 'EntityDefaultUIController',
      ),
      'entity cache' => module_exists('entitycache'),
    ),
  );

  return $entities;
}

/**
 * Implements hook_entity_info_alter().
 */
function update_trigger_build_jenkins_entity_info_alter(&$entity_info) {

  // Register our new server type as a bundle on the CI Server entity.
  if(!isset($entity_info['ci_server']['bundles']['ci_server_jenkins'])) {
    $entity_info['ci_server']['bundles']['ci_server_jenkins'] = array(
      'label' => 'Jenkins CI Server',
    );
  }
}

/**
 * Implements hook_form().
 *
 * Provide a form to allow the user to add / edit a Jenkins CI Server entity.
 */
function ci_server_jenkins_form($form, &$form_state, $server = NULL) {

  $ci_entity_helper = new CIEntityHelper();

  $form['label'] = array(
    '#title' => t('Name'),
    '#type' => 'textfield',
    '#default_value' => isset($server->label) ? $server->label : '',
    '#required' => TRUE,
  );
  $form['description'] = array(
    '#title' => t('Description'),
    '#type' => 'textarea',
    '#default_value' => isset($server->description) ? $server->description : '',
  );
  $form['host'] = array(
    '#title' => t('Host'),
    '#description' => t('Username and token can be included in the URL, e.g. "http://user:token@myjenkinsserver.com:8080". ' .
      'The API token is available in your personal configuration page in Jenkins. Click your name on the top right corner ' .
      'then click "Configure" to see your API token.'),
    '#type' => 'textfield',
    '#default_value' => isset($server->host) ? $server->host : '',
    '#size' => 100,
    '#required' => TRUE,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => isset($server->id) ? t('Update CI Server') : t('Save CI Server'),
    '#weight' => 50,
  );
  return $form;
}

/**
 * Implements hook_form_submit().
 *
 * Submit handler for the project add/edit form.
 */
function ci_server_jenkins_form_submit($form, &$form_state) {

  // Build the data for saving the form values.
  $server = entity_ui_form_submit_build_entity($form, $form_state);
  
  // There is no machine name on the form, so generate it from the label.
  // Only do this on create, not update.
  if(!isset($server->id)) {
    $machine_readable = strtolower($server->label);
    $server->name = preg_replace('@[^a-z0-9_]+@','_', $machine_readable);
  }

  $server->save();
  drupal_set_message(t('The server: @name has been saved.', array('@name' => $server->name)));
  $form_state['redirect'] = 'admin/config/development/update_trigger_build/jenkins_ci_servers';
}


/**
 * Access callback.  Define access restrictions for CI Build Schedule entities.
 */
function update_trigger_build_jenkins_ci_build_schedule_access_callback($op, $project = NULL, $account = NULL) {

  /**
   * @todo define individual permissions for 'view CI Build Schedule', 'create CI Build Schedul' etc in hook_permission.
   * Not a priority.
   */
  switch($op) {
  	case 'view':
  	case 'update':
  	case 'create':
  	case 'delete': {
  	  return user_access('Administer site configuration', $account);
  	}
  	break;
  }
  return FALSE;
}
