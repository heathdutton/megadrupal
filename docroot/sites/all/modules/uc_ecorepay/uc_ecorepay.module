<?php
/**
 * @file
 * Adds Ecorepay Payment Gateway to Ubercart.
 */

/**
 * Implements hook_form_uc_cart_checkout_form_alter().
 */
function uc_ecorepay_form_uc_cart_checkout_form_alter(&$form, $form_state, $form_id) {
  if (isset($form['panes']['payment']['payment_method']['#options']['credit']) && $form['panes']['payment']['payment_method']['#options']['credit'] != NULL) {
    $label = $form['panes']['payment']['payment_method']['#options']['credit'];
    $form['panes']['payment']['payment_method']['#options']['credit'] = $label;
  }
}

/**
 * Implements hook_uc_payment_gateway().
 */
function uc_ecorepay_uc_payment_gateway() {
  $gateways['ecorepay'] = array(
    'title' => t('Ecorepay'),
    'description' => t('Process credit card payments using Ecorepay'),
    'credit_txn_types' => array(UC_CREDIT_AUTH_CAPTURE, UC_CREDIT_AUTH_ONLY),
    'settings' => 'uc_ecorepay_settings_form',
    'credit' => 'uc_ecorepay_charge',
  );
  return $gateways;
}

/**
 * Callback for payment gateway settings.
 */
function uc_ecorepay_settings_form($form, &$form_state) {
  $form['ecorepay_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Ecorepay settings'),
  );
  $form['ecorepay_settings']['uc_ecorepay_account_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Account ID'),
    '#default_value' => variable_get('uc_ecorepay_account_id', ''),
    '#description' => t('Your Account ID.'),
  );
  $form['ecorepay_settings']['uc_ecorepay_auth_code'] = array(
    '#type' => 'textfield',
    '#title' => t('Auth Code'),
    '#default_value' => variable_get('uc_ecorepay_auth_code', ''),
    '#description' => t('Your Auth Code.'),
  );
  return $form;
}

/**
 * Callback for payment gateway charge.
 *
 * @param int $order_id
 *   Current order id.
 * @param int $amount
 *   Amount
 * @param array $data
 *   Data array
 *
 * @return array
 *   Response array.
 */
function uc_ecorepay_charge($order_id, $amount, $data) {
  global $user, $response;
  $order = uc_order_load($order_id);

  // Billing country code in ISO format.
  $billing_countrycode = uc_get_country_data(array('country_id' => $order->billing_country));
  $billing_countrycode = $billing_countrycode[0]['country_iso_code_2'];

  // Prepare XML.
  $xml = array(
    'AccountID' => variable_get('uc_ecorepay_account_id', ''),
    'AccountAuth' => variable_get('uc_ecorepay_auth_code', ''),
    'Transaction' => array(
      'Reference' => $order_id,
      'Amount' => $amount,
      'Currency' => $order->currency,
      'Email' => $order->primary_email,
      'IPAddress' => ip_address(),
      'Phone' => $order->billing_phone,
      'FirstName' => $order->billing_first_name,
      'LastName' => $order->billing_last_name,
      'Address' => $order->billing_street1 . ' ' . $order->billing_street2,
      'City' => $order->billing_city,
      'State' => uc_get_zone_code($order->billing_zone),
      'PostCode' => $order->billing_postal_code,
      'Country' => $billing_countrycode,
      'CardNumber' => $order->payment_details['cc_number'],
      'CardExpMonth' => $order->payment_details['cc_exp_month'],
      'CardExpYear' => $order->payment_details['cc_exp_year'],
      'CardCVV' => $order->payment_details['cc_cvv'],
    ),
  );

  // Lets deal with transaction type.
  switch ($data['txn_type']) {
    case 'authorize':
      $mode = 'Authorize';
      break;

    case 'auth_capture':
      $mode = 'AuthorizeCapture';
      break;

    default:
      $mode = 'AuthorizeCapture';
  }

  // Prepare XML request.
  $request = '<?xml version="1.0" encoding="utf-8"?>';
  $request .= '<Request type="' . $mode . '">';
  foreach ($xml as $key => $value) {
    if (is_array($value)) {
      $request .= '<' . $key . '>';
      foreach ($value as $k => $v) {
        $request .= '<' . $k . '>' . htmlentities($v) . '</' . $k . '>';
      }
      $request .= '</' . $key . '>';
    }
    else {
      $request .= '<' . $key . '>' . htmlentities($value) . '</' . $key . '>';
    }
  }
  $request .= '</Request>';

  // Make request.
  $response = uc_ecorepay_process_request($request);

  // Parse response.
  if (array_key_exists('ResponseCode', $response)) {
    // Approved/Declined?
    switch ($response['ResponseCode']) {
      case 100:
        $result = array(
          'success' => TRUE,
          'comment' => t('@mode: Credit card payment processed successfully. Transaction ID: @transaction_id, Description: @description', array(
            '@mode' => $mode,
            '@transaction_id' => $response['TransactionID'],
            '@description' => $response['Description'],
          )),
          'message' => t('@mode: Credit card payment processed successfully. Transaction ID: @transaction_id, Description: @description', array(
            '@mode' => $mode,
            '@transaction_id' => $response['TransactionID'],
            '@description' => $response['Description'],
          )),
          'uid' => $user->uid,
          'data' => $response,
        );
        uc_order_comment_save($order_id, $user->uid, $result['comment']);
        uc_order_comment_save($order_id, $user->uid, $result['comment'], 'order');
        // Add info to db if authorize so we can capture later.
        if ($mode == 'Authorize') {
          db_insert('uc_ecorepay')->fields(array('order_id' => $order_id, 'transaction_id' => $response['TransactionID']))->execute();
        }
        break;

      default:
        $result = array(
          'success' => FALSE,
          'comment' => t('@mode: Credit card payment declined. Transaction ID: @transaction_id, Description: @description', array(
            '@mode' => $mode,
            '@transaction_id' => $response['TransactionID'],
            '@description' => $response['Description'],
          )),
          'message' => t('@mode: Credit card payment declined. Transaction ID: @transaction_id, Description: @description', array(
            '@mode' => $mode,
            '@transaction_id' => $response['TransactionID'],
            '@description' => $response['Description'],
          )),
          'uid' => $user->uid,
          'data' => $response,
        );
        uc_order_comment_save($order_id, $user->uid, $result['comment']);
        break;
    }
  }
  return $result;
}

/**
 * Callback for payment gateway capture.
 *
 * @param int $order_id
 *   Current order id.
 */
function uc_ecorepay_capture($order_id) {
  global $user, $response;

  // Find if transaction record exists for this order.
  $data = db_select('uc_ecorepay')->fields('uc_ecorepay')->condition('order_id', $order_id, '=')->execute()->fetchObject();

  // Yes?
  if ($data) {
    // Prepare XML.
    $xml = array(
      'AccountID' => variable_get('uc_ecorepay_account_id'),
      'AccountAuth' => variable_get('uc_ecorepay_auth_code'),
      'Transaction' => array(
        'TransactionID' => $data->transaction_id,
      ),
    );

    // Prepare XML request.
    $request = '<?xml version="1.0" encoding="utf-8"?>';
    $request .= '<Request type="Capture">';
    foreach ($xml as $key => $value) {
      if (is_array($value)) {
        $request .= '<' . $key . '>';
        foreach ($value as $k => $v) {
          $request .= '<' . $k . '>' . htmlentities($v) . '</' . $k . '>';
        }
        $request .= '</' . $key . '>';
      }
      else {
        $request .= '<' . $key . '>' . htmlentities($value) . '</' . $key . '>';
      }
    }
    $request .= '</Request>';

    // Make request.
    $response = uc_ecorepay_process_request($request);

    // Parse response.
    if (array_key_exists('ResponseCode', $response)) {
      // Approved/Declined?
      switch ($response['ResponseCode']) {
        case 100:
          $comment = t('@mode: Credit card payment captured successfully. Transaction ID: @transaction_id, Description: @description', array(
            '@mode' => 'Capture',
            '@transaction_id' => $response['TransactionID'],
            '@description' => $response['Description'],
          ));
          uc_order_comment_save($order_id, $user->uid, $comment);
          drupal_set_message($comment);
          break;

        default:
          $comment = t('@mode: Credit card payment could not be captured. Transaction ID: @transaction_id, Description: @description', array(
            '@mode' => 'Capture',
            '@transaction_id' => $response['TransactionID'],
            '@description' => $response['Description'],
          ));
          uc_order_comment_save($order_id, $user->uid, $comment);
          drupal_set_message($comment, 'error');
          break;
      }
    }
  }
}

/**
 * Send request to Ecorepay Payment Gateway.
 *
 * @param mixed $xml
 *   XML request
 *
 * @return mixed
 *   Returns array if successful, false otherwise.
 */
function uc_ecorepay_process_request($xml) {
  $url = 'https://gateway.ecorepay.cc/';

  // Make request.
  $c = curl_init();
  curl_setopt($c, CURLOPT_URL, $url);
  curl_setopt($c, CURLOPT_HTTPHEADER, array("Content-Type: text/xml"));
  curl_setopt($c, CURLOPT_POST, 1);
  curl_setopt($c, CURLOPT_POSTFIELDS, $xml);
  curl_setopt($c, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($c, CURLOPT_SSL_VERIFYPEER, 0);
  curl_setopt($c, CURLOPT_FOLLOWLOCATION, 0);
  $response = curl_exec($c);

  // Check if error?
  if (curl_errno($c)) {
    drupal_set_message(t('cURL Error') . curl_errno($c) . '<br />' . curl_error($c), 'error');
    return FALSE;
  }
  else {
    curl_close($c);
    $result = simplexml_load_string($response);
    $data = array();
    $data['ResponseCode'] = (string) $result->ResponseCode;
    $data['Description'] = (string) $result->Description;
    $data['Reference'] = (string) $result->Reference;
    $data['TransactionID'] = (string) $result->TransactionID;
    $data['ProcessingTime'] = (string) $result->ProcessingTime;
    $data['StatusCode'] = (string) $result->StatusCode;
    $data['StatusDescription'] = (string) $result->StatusDescription;
    $data['AuthCode'] = (string) $result->AuthCode;
    $data['ScrubResult'] = (string) $result->ScrubResult;
    $data['AVSResult'] = (string) $result->AVSResult;
    $data['CVVResult'] = (string) $result->CVVResult;
    return $data;
  }
}
