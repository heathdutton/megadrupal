<?php

/**
 * @file
 * Improves core search results on french content using Pace Husk Stemmer.
 * This implementation of the Paice Husk Stemmer is free software.
 * It has originally been written by Alexis Ulrich (http://alx2002.free.fr)
 * It was modified by Frederic Bisson for Drupal integration.
 * hook_search_preprocess has been borrowed and adapted from porterstemmer module.
 */

/**
 * Implements hook_help().
 */
function frenchstemmer_help($path, $arg) {
  switch ($path) {
    case 'admin/help#frenchstemmer':
      return t('Implements the Paice-Husk-Stemmer algorithm to improve French searching.');
  }
}

/**
 * Implements hook_search_preprocess().
 */
function frenchstemmer_search_preprocess(&$text) {
  // Split words from noise and remove apostrophes
  $text  = str_replace("'hui", 'hui', $text);
  $text  = str_replace("'", ' ', $text);
  $words = preg_split('/([^a-zA-ZâàáéèêëîïôöùûüçÂÀÉÈÊËÎÏÔÖÙÛÜÇ]+)/u', $text, -1, PREG_SPLIT_DELIM_CAPTURE);

  // Process each word (even indexes are words, odd ones are separators)
  $count = count($words);
  for ($i = 0; $i < $count; $i = $i + 2) {
    $words[$i] = _frenchstemmer_paice_husk_stemmer(_frenchstemmer_clean_word($words[$i]));
  }

  // Put it all back together
  return implode('', $words);
}

/**
 * Replace double letters by single letter
 *
 * @param  string $word Word to process
 *
 * @return string       Processed word
 */
function _frenchstemmer_clean_word($word) {
  module_load_include('inc', 'frenchstemmer');
  $replacements = _frenchstemmer_replacements();

  $word = preg_replace($replacements['pattern'], $replacements['replace'], $word);

  return $word;
}

/**
 * returns the number of the first rule from the rule number $rule_number
 * that can be applied to the given reversed form.
 * returns -1 if no rule can be applied, ie the stem has been found
 *
 * @param  string  $reversed_form Reversed form
 * @param  integer $rule_number   Rule number
 *
 * @return integer                Number of the first rule
 */
function _frenchstemmer_get_first_rule($reversed_form, $rule_number) {
  module_load_include('inc', 'frenchstemmer');
  $vars = _frenchstemmer_rules_vars();

  $nb_rules = sizeOf($vars['rules']);
  for ($i = $rule_number; $i < $nb_rules; $i++) {
    // gets the letters from the current rule
    $rule = $vars['rules'][$i];
    $rule = preg_replace($vars['rule_pattern'], "\\1", $rule);
    if (strncasecmp(utf8_decode($rule), $reversed_form, strlen(utf8_decode($rule))) == 0) {
      return $i;
    }
  }
  return - 1;
}

/**
 * Check the acceptability of a stem for french language
 *
 * @param  string  $reversed_stem The stem to check in reverse form
 *
 * @return boolean                TRUE if stem is acceptable, else FALSE
 */
function _frenchstemmer_check_acceptability($reversed_stem) {
  global $_frenchstemmer_french_vowels_8859_1;
  module_load_include('inc', 'frenchstemmer');
  $vars = _frenchstemmer_rules_vars();

  if (preg_match('/[' . $vars['vowels'] . ']$/', utf8_encode($reversed_stem))) {
    // if the form starts with a vowel then at least two letters must remain after stemming (e.g.: "etaient" --> "et")
    return (strlen($reversed_stem) > 2);
  }
  else {
    // if the form starts with a consonant then at least two letters must remain after stemming
    if (strlen($reversed_stem) <= 2) {
      return FALSE;
    }
    // and at least one of these must be a vowel or "y"
    return (preg_match('/[' . $vars['vowels'] . ']/', utf8_encode($reversed_stem)));
  }
}

/**
 * Paice/Husk stemmer which returns a stem for the given form
 *
 * @param  string $form The word for which we want the stem in UTF-8
 *
 * @return string       The stem
 */
function _frenchstemmer_paice_husk_stemmer($form) {
  module_load_include('inc', 'frenchstemmer');
  $vars = _frenchstemmer_rules_vars();

  $intact        = TRUE;
  $stem_found    = FALSE;
  $reversed_form = strrev(utf8_decode($form));
  $rule_number   = 0;
  // that loop goes through the rules' array until it finds an ending one (ending by '.') or the last one ('end0.')
  while (TRUE) {
    $rule_number = _frenchstemmer_get_first_rule($reversed_form, $rule_number);
    if ($rule_number == -1) {
      // no other rule can be applied => the stem has been found
      break;
    }
    $rule = $vars['rules'][$rule_number];
    preg_match($vars['rule_pattern'], $rule, $matches);
    if (($matches[2] != '*') || ($intact)) {
      $reversed_stem = utf8_decode($matches[4]) . substr($reversed_form, $matches[3], strlen($reversed_form) - $matches[3]);
      if (_frenchstemmer_check_acceptability($reversed_stem)) {
        $reversed_form = $reversed_stem;
        if ($matches[5] == '.')
        break;
      }
      else {
        // go to another rule
        $rule_number++;
      }
    }
    else {
      // go to another rule
      $rule_number++;
    }
  }

  return utf8_encode(strrev($reversed_form));
}
