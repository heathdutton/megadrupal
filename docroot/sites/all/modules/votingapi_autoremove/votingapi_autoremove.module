<?php
/**
 * @file
 * Module file.
 */

define('VOTINGAPI_AUTOREMOVE_LIMIT', 10000);

/**
 * Implements hook_form_votingapi_settings_form_alter().
 */
function votingapi_autoremove_form_votingapi_settings_form_alter(&$form, &$form_state) {
  $form['votingapi_autoremove'] = array(
    '#type' => 'checkbox',
    '#title' => t('Automatically remove orphaned votes when deleting content.'),
    '#default_value' => variable_get('votingapi_autoremove', FALSE),
    '#weight' => -2,
  );
  $form['votingapi_autoremove_orphans'] = array(
    '#type' => 'fieldset',
    '#title' => t('Existing orphaned votes'),
    '#description' => t('Remove up to !limit orphaned votes per submission.', array('!limit' => VOTINGAPI_AUTOREMOVE_LIMIT)),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#weight' => -1,
  );

  // Get node orphans.
  $form_state['#vote_ids_node'] = _votingapi_autoremove_get_orphaned_vote_ids('node', 'node', 'nid');
  $form_state['#vote_cache_ids_node'] = _votingapi_autoremove_get_orphaned_vote_cache_ids('node', 'node', 'nid');
  $form['votingapi_autoremove_orphans']['node'] = array(
    '#markup' => t('<p>Node: %s.</p>', array('%s' => count($form_state['#vote_ids_node']))),
  );
  // Get comment orphans.
  $form_state['#vote_ids_comment'] = _votingapi_autoremove_get_orphaned_vote_ids('comment', 'comment', 'cid');
  $form_state['#vote_cache_ids_comment'] = _votingapi_autoremove_get_orphaned_vote_cache_ids('comment', 'comment', 'cid');
  $form['votingapi_autoremove_orphans']['comment'] = array(
    '#markup' => t('<p>Comment: %s.</p>', array('%s' => count($form_state['#vote_ids_comment']))),
  );

  $form['votingapi_autoremove_orphans']['votingapi_autoremove_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Remove orphaned votes'),
  );
  array_unshift($form['#submit'], 'votingapi_autoremove_submit');
}

/**
 * Submit handler.
 */
function votingapi_autoremove_submit($form, &$form_state) {
  if ($form_state['clicked_button']['#value'] == t('Remove orphaned votes')) {
    // Remove orphaned node votes.
    _votingapi_autoremove_delete_vote_ids($form_state['#vote_ids_node']);
    _votingapi_autoremove_delete_vote_cache_ids($form_state['#vote_cache_ids_node']);
    // Remove orphaned comment votes.
    _votingapi_autoremove_delete_vote_ids($form_state['#vote_ids_comment']);
    _votingapi_autoremove_delete_vote_cache_ids($form_state['#vote_cache_ids_comment']);

    drupal_set_message(t('The orphaned votes have been removed.'));
  }
  // Prevent storing the button to the variables table.
  unset($form_state['values']['votingapi_autoremove_submit']);
  $form_state['rebuild'] = FALSE;
}

/**
 * Remove node votes.
 * Implements hook_node_delete().
 */
function votingapi_autoremove_node_delete($node) {
  if (variable_get('votingapi_autoremove', FALSE)) {
    $vote_ids = _votingapi_autoremove_get_vote_ids('node', $node->nid);
    _votingapi_autoremove_delete_vote_ids($vote_ids);
    $vote_cache_ids = _votingapi_autoremove_get_vote_cache_ids('node', $node->nid);
    _votingapi_autoremove_delete_vote_cache_ids($vote_cache_ids);
  }
}

/**
 * Remove comment votes.
 * Implements hook_comment_delete().
 */
function votingapi_autoremove_comment_delete($comment) {
  if (variable_get('votingapi_autoremove', FALSE)) {
    $vote_ids = _votingapi_autoremove_get_vote_ids('comment', $comment->cid);
    _votingapi_autoremove_delete_vote_ids($vote_ids);
    $vote_cache_ids = _votingapi_autoremove_get_vote_cache_ids('comment', $comment->cid);
    _votingapi_autoremove_delete_vote_cache_ids($vote_cache_ids);
  }
}

/**
 * Get orphaned vote_ids.
 * @param $entity_type: VotingAPI's entity_type column value.
 * @param $table: The table in which VotingAPI's entity_id joins on.
 * @param $key: The primary key of $table.
 */
function _votingapi_autoremove_get_orphaned_vote_ids($entity_type, $table, $key) {
  $results = db_query_range("
    SELECT vote_id
    FROM {votingapi_vote}
    LEFT JOIN {{$table}}
      ON {{$table}}.$key = {votingapi_vote}.entity_id
    WHERE {votingapi_vote}.entity_type = '$entity_type'
      AND {{$table}}.$key IS NULL
  ", 0, VOTINGAPI_AUTOREMOVE_LIMIT);
  $vote_ids = array();
  foreach ($results as $value) {
    $vote_ids[] = array('vote_id' => $value->vote_id);
  }
  return $vote_ids;
}

/**
 * Get orphaned vote_cache_ids.
 * @see _votingapi_autoremove_get_orphaned_vote_ids()
 */
function _votingapi_autoremove_get_orphaned_vote_cache_ids($entity_type, $table, $key) {
  $results = db_query_range("
    SELECT vote_cache_id
    FROM {votingapi_cache}
    LEFT JOIN {{$table}}
      ON {{$table}}.$key = {votingapi_cache}.entity_id
    WHERE {votingapi_cache}.entity_type = '$entity_type'
      AND {{$table}}.$key IS NULL
  ", 0, VOTINGAPI_AUTOREMOVE_LIMIT);
  $vote_cache_ids = array();
  foreach ($results as $value) {
    $vote_cache_ids[] = array('vote_cache_id' => $value->vote_cache_id);
  }
  return $vote_cache_ids;
}

/**
 * Get vote_ids.
 * $entity_type: VotingAPI's entity_type column value.
 * $entity_id: VotingAPI's entity_id column value.
 */
function _votingapi_autoremove_get_vote_ids($entity_type, $entity_id) {
  $results = votingapi_select_votes(array(
    'entity_type' => $entity_type,
    'entity_id' => $entity_id,
  ));
  $vote_ids = array();
  foreach ($results as $value) {
    $vote_ids[] = array('vote_id' => $value['vote_id']);
  }
  return $vote_ids;
}

/**
 * Get vote_cache_ids.
 * @see _votingapi_autoremove_get_vote_ids()
 */
function _votingapi_autoremove_get_vote_cache_ids($entity_type, $entity_id) {
  $results = votingapi_select_results(array(
    'entity_type' => $entity_type,
    'entity_id' => $entity_id,
  ));
  $vote_cache_ids = array();
  foreach ($results as $value) {
    $vote_cache_ids[] = array('vote_cache_id' => $value['vote_cache_id']);
  }
  return $vote_cache_ids;
}

/**
 * Delete vote_ids.
 * @see votingapi_delete_votes()
 */
function _votingapi_autoremove_delete_vote_ids($vote_ids = array()) {
  votingapi_delete_votes($vote_ids);
}

/**
 * Delete vote_cache_ids.
 * @see votingapi_delete_results()
 */
function _votingapi_autoremove_delete_vote_cache_ids($vote_cache_ids = array()) {
  votingapi_delete_results($vote_cache_ids);
}
