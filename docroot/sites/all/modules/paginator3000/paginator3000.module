<?php
/**
 * Main file for Paginator 3000 module.
 */

/**
 * Implements hook_menu().
 */
function paginator3000_menu() {
  $items = array(
    'admin/config/user-interface/paginator3000' => array(
      'title' => 'Paginator 3000',
      'description' => 'Configure Paginator 3000 settings.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('paginator3000_settings_form'),
      'access callback' => 'user_access',
      'access arguments' => array('administer site configuration'),
      'file' => 'paginator3000.admin.inc',
      'type' => MENU_NORMAL_ITEM,
    ),
  );

  return $items;
}

/**
 * Implements hook_library().
 */
function paginator3000_library() {
  $libraries['paginator3000'] = array(
    'title' => 'Paginator 3000',
    'website' => 'http://cyberapp.ru/jquery-paginator-3000/',
    'version' => '1.2',
    'js' => array(
      'sites/all/libraries/jquery-paginator3000/plugin/jquery.paginator.js' => array(),
    ),
    'css' => array(
      'sites/all/libraries/jquery-paginator3000/resources/paginator-blue.css' => array(),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_theme().
 */
function paginator3000_theme($existing, $type, $theme, $path) {
  $common_theme = drupal_common_theme();
  $variables = $common_theme['pager']['variables'];
  $variables['returnorder'] = 0;
  return array(
    'paginator3000' => array(
      'variables' => $variables,
    ),
  );
}

function theme_paginator3000($variables) {
  global $pager_total, $pager_page_array;
  $element = array(
    '#children' => '<div id="paginator3000-' . $variables['element'] . '">' . theme_pager($variables) . '</div>',
    '#attached' => array(
      'library' => array(
        array('paginator3000', 'paginator3000'),
      ),
      'js' => array(
        drupal_get_path('module', 'paginator3000') . '/js/paginator3000.js' => array('type' => 'file'),
        array(
          'data' => array('paginator3000' => array($variables['element'] => array(
            'element' => $variables['element'],
            'id' => 'paginator3000-' . $variables['element'],
            'total' => $pager_total[$variables['element']],
            'current' => $pager_page_array[$variables['element']] + 1,
            'quantity' => $variables['quantity'],
            'tags' => $variables['tags'],
            'returnorder' => $variables['returnorder'],
          ))),
          'type' => 'setting',
        ),
      ),
      'css' => array(
        drupal_get_path('module', 'paginator3000') . '/css/paginator3000.css' => array('type' => 'file'),
      ),
    ),
  );

  return render($element);
}

/**
 * Implements hook_theme_registry_alter().
 *
 * Paginator 3000 replaces the theme_pager function defined in the theme registry
 * with its own internal function, and stores the overriden function
 * whereabouts in a cache entry, so it can be called when needed.
 */
function paginator3000_theme_registry_alter(&$theme_registry) {
  global $theme_key;
  // Stores away details of the overriden function.
  cache_set('paginator3000_override:' . $theme_key . ':pager', $theme_registry['pager']);
  // Override the theme callback in the registry.
  $theme_registry['pager']['type'] = 'module';
  $theme_registry['pager']['theme path'] = drupal_get_path('module', 'paginator3000');
  $theme_registry['pager']['function'] = '_paginator3000_override_theme_pager';
}

function _paginator3000_override_theme_pager($variables) {
  // If configured to use core pager, call it and return straight away.
  if (variable_get('paginator3000_override_pager', 'core') == 'core') {
    return _paginator3000_execute_overriden_theme_pager($variables);
  }
  else {
    return theme('paginator3000', $variables);
  }
}

/**
 * Executes call to the overridden pager function.
 *
 * If this function is not available, executes via a direct call to the
 * theme_pager core function.
 */
function _paginator3000_execute_overriden_theme_pager($variables) {
  global $theme_key;

  // Get the name of the overriden function.
  $overridden_function = '';
  if ($cache_entry = cache_get('paginator3000_override:' . $theme_key . ':pager')) {
    $overridden_function = $cache_entry->data['function'];
  }

  // Calls the overriden function.
  if ($overridden_function && function_exists($overridden_function)) {
    return $overridden_function($variables);
  }
  else {
    // Last resort, call theme_pager function directly.
    return theme_pager($variables);
  }
}

/**
 * Implements hook_views_plugins().
 * Paginator 3000 provides a pager plugin for Views.
 */
function paginator3000_views_plugins() {
  return array(
    'pager' => array(
      'paginator3000' => array(
        'title' => t('Paged output, Paginator 3000'),
        'short title' => t('Paginator 3000'),
        'handler' => 'Paginator3000ViewsPagerPlugin',
        'help' => t('Paged output, Paginator 3000'),
        'help topic' => 'pager-paginator3000',
        'uses options' => TRUE,
      ),
    ),
  );
}
