<?php

/**
 * @file
 * PMB reader main module.
 */

require_once(drupal_get_path('module', 'pmb') . '/pmb.class_data.inc');
require_once(drupal_get_path('module', 'pmb_reader') . '/pmb_reader.forms.inc');
require_once(drupal_get_path('module', 'pmb_reader') . '/pmb_reader.templates.inc');

/**
 * Implements hook_permission().
 */
function pmb_reader_permission() {
  return array(
    'PMB reader access content' => array(
      'title' => t('Access reader content'),
    ),
    'PMB reader use cart' => array(
      'title' => t('Use cart'),
    ),
    'PMB reader loan items' => array(
      'title' => t('Reserve and loan items'),
    ),
    'PMB reader view reading list' => array(
      'title' => t('View reading list'),
    ),
    'PMB reader view public reading list' => array(
      'title' => t('View public reading list'),
    ),
    'PMB reader suggest items' => array(
      'title' => t('Suggest items'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function pmb_reader_menu() {
  $items = array();

  // definition for main page
  $items['reader'] = array(
    'access callback' => 'pmb_reader_user_is_current_reader',
    'access arguments' => array(NULL, 'PMB reader access content'),
    'page callback' => 'pmb_reader_information',
    'file' => 'pmb_reader.account.inc',
    'type' => MENU_CALLBACK,
  );
  $items['reader/%user_uid_optional'] = array(
    'title' => 'My reader account',
    'description' => 'View and interract with your reader account',
    'access callback' => 'pmb_reader_user_is_current_reader',
    'access arguments' => array(1, 'PMB reader access content'),
    'page callback' => 'pmb_reader_information',
    'page arguments' => array(1),
    'file' => 'pmb_reader.account.inc',
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => pmb_variable_get('pmb_menu_attach_reader'),
  );
  $items['reader/%user/summary'] = array(
    'title' => 'Summary',
    'description' => 'Summary of your reader account',
    'access callback' => 'pmb_reader_user_is_current_reader',
    'access arguments' => array(1, 'PMB reader access content'),
    'page callback' => 'pmb_reader_information',
    'page arguments' => array(1),
    'file' => 'pmb_reader.account.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 0,
  );
  $items['reader/%user/cart'] = array(
    'title' => 'Cart',
    'description' => 'View the content of your cart',
    'access callback' => 'pmb_reader_user_is_current_reader',
    'access arguments' => array(1, 'PMB reader use cart'),
    'page callback' => 'pmb_reader_view_cart',
    'page arguments' => array(1),
    'file' => 'pmb_reader.cart.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
  $items['reader/%user/reservation'] = array(
    'title' => 'Reservations',
    'description' => 'Your reservations',
    'access callback' => 'pmb_reader_user_is_current_reader',
    'access arguments' => array(1, 'PMB reader loan items'),
    'page callback' => 'pmb_reader_reservations',
    'page arguments' => array(1),
    'file' => 'pmb_reader.reservations.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );
  $items['reader/%user/loan'] = array(
    'title' => 'Loans',
    'description' => 'Your loans',
    'access callback' => 'pmb_reader_user_is_current_reader',
    'access arguments' => array(1, 'PMB reader loan items'),
    'page callback' => 'pmb_reader_loans',
    'page arguments' => array(1),
    'file' => 'pmb_reader.account.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
  );
  $items['reader/%user/reading_list'] = array(
    'title' => 'Reading lists',
    'description' => 'View your reading lists',
    'access callback' => 'pmb_reader_user_is_current_reader',
    'access arguments' => array(1, 'PMB reader view reading list'),
    'page callback' => 'pmb_reader_view_reading_lists',
    'page arguments' => array(1),
    'file' => 'pmb_reader.reading_lists.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 4,
  );
  $items['reader/%user/suggestion'] = array(
    'title' => 'Suggestions',
    'description' => 'Your suggestions',
    'access callback' => 'pmb_reader_user_is_current_reader',
    'access arguments' => array(1, 'PMB reader suggest items'),
    'page callback' => 'pmb_reader_suggestions',
    'page arguments' => array(1),
    'file' => 'pmb_reader.suggestions.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
  );

  // Set the default tab, which can't be hidden, then update default menu.
  $items['reader/%user/' . pmb_variable_get('pmb_tabs_reader_default')]['type'] = MENU_DEFAULT_LOCAL_TASK;
  foreach (array('access callback', 'access arguments', 'page callback', 'page arguments', 'file') as $value) {
    $items['reader/%user_uid_optional'][$value] = $items['reader/%user/' . pmb_variable_get('pmb_tabs_reader_default')][$value];
  }

  $items['reader/%user/reservation/%'] = array(
    'title' => 'Reservations',
    'description' => 'Your reservations',
    'access callback' => 'pmb_reader_user_is_current_reader',
    'access arguments' => array(1, 'PMB reader loan items'),
    'page callback' => 'pmb_reader_reservation',
    'page arguments' => array(1, 3),
    'file' => 'pmb_reader.reservations.inc',
    'type' => MENU_CALLBACK,
  );
  $items['reader/%user/reading_list/%'] = array(
    'title' => 'Reading list',
    'description' => 'View your reading list',
    'access callback' => 'pmb_reader_user_is_current_reader',
    'access arguments' => array(1, 'PMB reader view reading list'),
    'page callback' => 'pmb_reader_view_reading_list',
    'page arguments' => array(1, 3),
    'file' => 'pmb_reader.reading_lists.inc',
    'type' => MENU_CALLBACK,
  );
  $items['reader/%user/reading_list_public'] = array(
    'title' => 'Public reading lists',
    'description' => 'View public reading lists',
    'access callback' => 'user_access',
    'access arguments' => array('PMB reader view public reading list'),
    'page callback' => 'pmb_reader_view_reading_lists_public',
    'page arguments' => array(1),
    'file' => 'pmb_reader.reading_lists.inc',
    'type' => MENU_CALLBACK,
  );
  $items['reader/%user/reading_list_public/%'] = array(
    'title' => 'Public reading list',
    'description' => 'View a public reading list',
    'access callback' => 'user_access',
    'access arguments' => array('PMB reader view public reading list'),
    'page callback' => 'pmb_reader_view_reading_list_public',
    'page arguments' => array(1, 3),
    'file' => 'pmb_reader.reading_lists.inc',
    'type' => MENU_CALLBACK,
  );
  $items['reader/%user/suggestion/%'] = array(
    'title' => 'Suggestion',
    'description' => 'View a suggestion',
    'access callback' => 'pmb_reader_user_is_current_reader',
    'access arguments' => array(1, 'PMB reader suggest items'),
    'page callback' => 'pmb_reader_suggestion_edit',
    'page arguments' => array(1, 3),
    'file' => 'pmb_reader.suggestions.inc',
    'type' => MENU_CALLBACK,
  );
  $items['reader/%user/password'] = array(
    'title' => "Change reader's password",
    'description' => 'Change the password for your reader account',
    'access callback' => 'pmb_reader_user_is_current_reader',
    'access arguments' => array(1, 'PMB reader access content'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pmb_reader_pass_form', 1),
    'file' => 'pmb_reader.admin.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function pmb_reader_theme() {
  return array(
    'pmb_reader_account' => array(
      'variables' => array(
        'reader' => NULL,
        'parameters' => NULL,
      ),
      'file' => 'pmb_reader.templates.inc',
    ),
    'pmb_reader_loans' => array(
      'variables' => array(
        'reader' => NULL,
        'loans' => NULL,
        'parameters' => NULL,
      ),
      'file' => 'pmb_reader.templates.inc',
    ),
    'pmb_reader_reservations' => array(
      'variables' => array(
        'reader' => NULL,
        'reservations' => NULL,
        'parameters' => NULL,
      ),
      'file' => 'pmb_reader.templates.inc',
    ),
    'pmb_reader_suggestions' => array(
      'variables' => array(
        'reader' => NULL,
        'suggestions' => NULL,
        'parameters' => NULL,
      ),
      'file' => 'pmb_reader.templates.inc',
    ),
    'pmb_reader_reading_lists' => array(
      'variables' => array(
        'reader' => NULL,
        'reading_lists' => NULL,
        'parameters' => NULL,
      ),
      'file' => 'pmb_reader.templates.inc',
    ),
    'pmb_reader_reading_list' => array(
      'variables' => array(
        'reader' => NULL,
        'reading_list' => NULL,
        'notices' => NULL,
        'parameters' => NULL,
      ),
      'file' => 'pmb_reader.templates.inc',
    ),
    'pmb_reader_reading_lists_public' => array(
      'variables' => array(
        'reader' => NULL,
        'reading_lists' => NULL,
        'parameters' => NULL,
      ),
      'file' => 'pmb_reader.templates.inc',
    ),
    'pmb_reader_reading_list_public' => array(
      'variables' => array(
        'reader' => NULL,
        'reading_list' => NULL,
        'notices' => NULL,
        'parameters' => NULL,
      ),
      'file' => 'pmb_reader.templates.inc',
    ),
    'pmb_reader_cart_form' => array(
      'render element' => 'form',
    ),
    'pmb_reader_reading_list_form' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Extends PMB admin configuration with reader settings.
 *
 * @ingroup forms
 * @see pmb_admin_form()
 * @see pmb_reader_admin_form()
 */
function pmb_reader_form_pmb_admin_form_alter(&$form, &$form_state) {
  require_once(drupal_get_path('module', 'pmb_reader') . '/pmb_reader.admin.inc');
  $form['tab'] = array_merge_recursive($form['tab'], pmb_reader_admin_form());
}

/**
 * Implements hook_user_presave().
 */
function pmb_reader_user_presave(&$edit, $account, $category) {
  // Make sure that pmb reader stuff is stored as 'pmb_reader'. Needed with D7.
  if (isset($edit['pmb_reader'])) {
    $edit['data']['pmb_reader'] = $edit['pmb_reader'];
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function pmb_reader_form_user_login_alter(&$form, &$form_state) {
  if (pmb_variable_get('pmb_reader_auth_mode') == 'drupal') {
    $form['#validate'] = array(
      'user_login_name_validate',
      'user_login_authenticate_validate',
      // If success, need to load PMB remote session id if user is a reader.
      'pmb_reader_remote_validate',
      'user_login_final_validate',
    );
  }
  else {
    $form['#validate'] = array(
      'user_login_name_validate',
      // If unsuccess, call below normal drupal function automatically.
      'pmb_reader_login_validate',
      // 'user_login_authenticate_validate',
      'user_login_final_validate',
    );
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function pmb_reader_form_user_login_block_alter(&$form, &$form_state) {
  return pmb_reader_form_user_login_alter($form, $form_state);
}

/**
 * A validate login handler to check username/password against PMB users table.
 *
 * Used when login/password is already validated, in order to get remote session
 * id.
 */
function pmb_reader_remote_validate($form, &$form_state) {
  $name = trim($form_state['values']['name']);
  $password = trim($form_state['values']['pass']);

  if (!empty($name) && !empty($password) && $form_state['uid']) {
    // Check PMB login and get remote session id.
    $uid = pmb_reader_authenticate_validate($name, $password, 'get');

    // Check if user authenticated by Drupal is the same than PMB one.
    if ($form_state['uid'] != $uid) {
      watchdog('PMB Connector', 'Unable to get remote PMB session id for reader "%name".', array('%name' => $name), WATCHDOG_WARNING);
    }
  }
}

/**
 * A handler to validate username/password against PMB users table.
 *
 * Used when login/password is not validated. It returns remote session id.
 * If unsuccessful identification, it tries to authenticate against Drupal base.
 */
function pmb_reader_login_validate($form, &$form_state) {
  $name = trim($form_state['values']['name']);
  $password = trim($form_state['values']['pass']);

  if (!empty($name) && !empty($password)) {
    $uid = pmb_reader_authenticate_validate($name, $password, 'check');
    if ($uid) {
      $form_state['uid'] = $uid;
    }
    // If not authenticated, manage Drupal users who aren't PMB readers.
    else {
      user_login_authenticate_validate($form, $form_state);
    }
  }
}

/**
 * Validate the user's login credentials remotely against PMB base.
 *
 * If process is successful, account is updated with session data.
 *
 * @param $login
 *   User name to authenticate.
 * @param $password
 *   A plain-text password, such as trimmed text from form values.
 * @param $op
 *   Operation: 'get' to get a session id, or 'check' to verify credentials too.
 *
 * @return
 *   The user's uid on success, or FALSE on failure to authenticate.
 */
function pmb_reader_authenticate_validate($login, $password, $op = 'check') {
  $uid = FALSE;

  if (!empty($login) && !empty($password)) {
    $credentials = pmb_reader_credentials($login, $password);
    $login_hash = $credentials['login'];
    $password_hash = $credentials['password'];
    $mode = $credentials['mode'];

    $pmb_data = new pmb_data();
    $pmb_session_id = $pmb_data->reader_get_session_id($login_hash, $password_hash, $mode);

    // Check if user is a PMB reader.
    if ($pmb_session_id) {
      // Allow the PMB reader to enter in Drupal.
      if ($op == 'check') {
        user_external_login_register($login, 'pmb_reader');
        $user = user_external_load($login);
      }
      // User is already authenticated by Drupal.
      else {
        $user = user_load_by_name($login);
      }

      // Save infos at login time. If remote session expires, same infos will be
      // automatically updated with $pmb_data->reader_get_session_id().
      $to_save = array('pmb_reader' => array());
      $to_save['pmb_reader']['credentials'] = $credentials;
      $to_save['pmb_reader']['session'] = array(
        'sessid' => $pmb_session_id,
        'sessid_time' => REQUEST_TIME,
      );
      // Infos need to be saved in order to get account info and to synchronize.
      user_save($user, $to_save);
      $user = user_load($user->uid);

      // Synchronize infos from PMB base (currently only email).
      $pmb_data = new pmb_data();
      $pmb_data->set_reader($user);
      $reader_info = $pmb_data->reader_get_account_info();
      if (isset($reader_info->personal_information->email) && $reader_info->personal_information->email) {
        $to_save = array(
          'mail' => $reader_info->personal_information->email,
        );
        user_save($user, $to_save);
      }
      else {
        drupal_set_message(t("You don't have any email address. Some functions won't be available, especially password change. Ask you librarian to add one."), 'warning');
      }

      $uid = $user->uid;
    }
  }

  return $uid;
}
/**
 * Helper to get hashed (or not) credentials from login and password.
 *
 * @return
 *   Array of hashed login and password and hash mode.
 */
function pmb_reader_credentials($login, $password, $mode = NULL) {
  if (is_null($mode)) {
    $mode = pmb_variable_get('pmb_reader_auth_mode');
  }

  switch ($mode) {
    case 'drupal' :
    case 'full_hash' :
      $login_hash = sha256(sha256($login) . sha256($password));
      $password_hash = sha256(md5($login) . sha256($password));
      break;
    case 'md5' :
      $login_hash = $login;
      $password_hash = md5($password);
      break;
    case 'plain' :
    case '' :
    default :
      $login_hash = $login;
      $password_hash = $password;
      break;
  }

  return array(
    'login' => $login_hash,
    'password' => $password_hash,
    'mode' => $mode,
  );
}

/**
 * Access callback to limit access of current user to his own reader account.
 *
 * Allows user to access only to own reader content, so user has to be a reader.
 * Of course, if administrator (user/1) is not a reader, he can't access to
 * non-existent content.
 *
 * @param $account
 *   Can either be a full user object or a $uid. If not set, use current user.
 * @param string $access
 *   Access permission.
 *
 * @return
 *   TRUE or FALSE.
 */
function pmb_reader_user_is_current_reader($account = NULL, $access = NULL) {
  global $user;

  if (!$account) {
    $account = $user;
  }

  $uid = is_object($account) ? $account->uid : (int) $account;

  if (!$access) {
    return ($uid && ($user->uid == $uid) && isset($user->data['pmb_reader']['session']['sessid']));
  }
  else {
    return ($uid && ($user->uid == $uid) && isset($user->data['pmb_reader']['session']['sessid']) && user_access($access));
  }
}

/**
 * A helper to check if an account is a PMB reader account or not.
 *
 * @param $account
 *   Can either be a full user object or a $uid. If not set, use current user.
 *
 * @return
 *   TRUE or FALSE.
 */
function pmb_reader_user_is_reader($account) {
  if (!is_object($account)) {
    $account = user_load($account);
  }

  return isset($account->data['pmb_reader']);
}

/**
 * Implements hook_user_logout().
 */
function pmb_reader_user_logout($user) {
  // Logout from PMB service.
  $pmb_data = new pmb_data();
  $pmb_data->set_reader($user);
  $pmb_data->reader_logout();

  // Needed if gateway fails.
  if (isset($user->data['pmb_reader'])) {
    unset($user->data['pmb_reader']);
    cache_clear_all('reader:' . $user->uid, 'cache_pmb_connector', TRUE);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @ingroup forms
 * @see pmb_reader_form_user_pass_validate()
 * @see pmb_reader_form_user_pass_submit()
 * @see user_pass_validate()
 * @see user_pass_submit()
 */
function pmb_reader_form_user_pass_alter(&$form, &$form_state) {
  // Alter only if authentication is on PMB side.
  if (pmb_variable_get('pmb_reader_auth_mode') != 'drupal') {
    global $user;

    // Add validation request for default request login.
    if ($user->uid == 0) {
      $form['#validate'][] = 'pmb_reader_form_user_pass_validate';
    }
    else {
      // Manage users and PMB readers without email address.
      if (!$user->mail) {
        $form = array();
        drupal_set_message(t("You can't request a new password because you don't have any email address. Ask your administrator to add one."), 'warning');
        drupal_goto('user');
      }

      // Manage readers.
      if (pmb_reader_user_is_reader($user)) {
        $form['#validate'][] = 'pmb_reader_form_user_pass_validate';
        $form['#submit'] = array('pmb_reader_form_user_pass_submit');
      }
      // Else manage normal users (authenticated non-PMB readers): normal form.
    }
  }
}

/**
 * Validate form for readers, used when authentication is done against PMB.
 *
 * user_pass_validate() needs to be called before in order to get account infos.
 *
 * @see pmb_reader_form_user_pass_alter()
 */
function pmb_reader_form_user_pass_validate(&$form, &$form_state) {
  $account = (isset($form_state['values']['account'])) ?
    $form_state['values']['account'] :
    NULL;

  // Manage known users and readers (user_pass_validate() manages unknown ones).
  if ($account && $account->uid) {
    $pmb_data = new pmb_data();
    $pmb_data->set_reader($account);
    $reader_info = $pmb_data->reader_get_account_info();

    // Manage readers.
    if (pmb_reader_user_is_reader($account)) {
      // Manage readers without email address.
      if (!isset($reader_info->personal_information->email) || !$reader_info->personal_information->email) {
        form_set_error('name', t("You can't request a new password because no email address is defined for account '@name'. Ask your administrator to add one.", array('@name' => $account->name)));
      }
      else {
        form_set_value(array('#parents' => array('reader_info')), $reader_info, $form_state);
        $form['#submit'] = array('pmb_reader_form_user_pass_submit');
      }
    }
    // Else manage normal users (authenticated non-PMB readers): normal submit.
    else {
      $form['#submit'] = array('user_pass_submit');
    }
  }
}

/**
 * Submit form for readers. Currently, use PMB server to send the new password.
 *
 * @see pmb_reader_form_user_pass_alter()
 */
function pmb_reader_form_user_pass_submit($form, &$form_state) {
  $account = $form_state['values']['account'];
  $reader_info = $form_state['values']['reader_info'];

  // Base url is get from gateway normal PMB server url.
  $url = dirname(dirname(pmb_variable_get('pmb_link_serverurl'))) . '/opac_css/askmdp.php';
  $headers = array('Content-Type' => 'application/x-www-form-urlencoded');
  $data = array(
    'email' => $reader_info->personal_information->email,
    'demande' => 'ok',
    'ok' => 'Envoyer',
  );

  $result = drupal_http_request($url, array(
      'headers' => $headers,
      'method' => 'POST',
      'data' => http_build_query($data, '', '&'),
  ));
  // Check returned result from server: need to be ok and not the request page.
  if ($result->code == 200) {
    // Result OK.
    if (!strpos($result->data, 'form action="askmdp.php" method="post" >')
        && !strpos($result->data, "p class='texte'>Could not send information to")
      ) {
      watchdog('user', 'Password reset instructions mailed to %name at %email.', array('%name' => $account->name, '%email' => $account->mail));
      drupal_set_message(t('Further instructions have been sent to your e-mail address.'));
    }
    // A result is returned, but it is the request page or the error page
    else {
      drupal_set_message(t('There was a problem with your submission. Please try again later.') . ' ' . t('Status error: smtp unavailable on server.'), 'error');
    }
  }
  // Otherwise let them know something went wrong.
  else {
    watchdog('user', 'Error with submit password request: @status_message (@status_code)', array(
      '@status_message' => $result->status_message,
      '@status_code' => $result->code,
    ), 'warning');
    drupal_set_message(t('There was a problem with your submission. Please try again later.') . ' ' . t('Status error: @status_message (@status_code)', array(
      '@status_message' => $result->status_message,
      '@status_code' => $result->code,
    )), 'error');
  }

  $form_state['redirect'] = 'user';
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @ingroup forms
 * @see pmb_reader_form_user_profile_validate()
 * @see pmb_reader_form_user_profile_submit()
 * @see user_profile_validate()
 * @see user_profile_submit()
 */
function pmb_reader_form_user_profile_form_alter(&$form, &$form_state, $account, $category = 'account') {
  // Alter only if authentication is on PMB side.
  if (pmb_variable_get('pmb_reader_auth_mode') != 'drupal') {
    // Alter only if user is a reader. Only password can be changed (@todo).
    if (pmb_reader_user_is_reader($form['#user'])) {
      drupal_set_message(t('As a reader, you cannot change your name and email.') . ' ' . t('To change your password, go to <a href="!link_change">this page</a> or <a href="!link">request a new one</a>.', array(
        '!link_change' => url(_pmb_p('reader/') . $form['#user']->uid . _pmb_p('/password')),
        '!link' => url('user/password'),
      )) . ' ' . t('Ask your administrator for more information.'), 'warning');

      // Add a requirement to change name (useless, because it's not allowed).
      $form['account']['current_pass_required_values']['#value']['name'] = $form['account']['name']['#title'];

      array_unshift($form['#validate'], 'pmb_reader_form_user_profile_form_validate');
      array_unshift($form['#submit'], 'pmb_reader_form_user_profile_form_submit');
    }
  }
}

/**
 * Validate form for profile, used when authentication is done against PMB.
 *
 * user_profile_validate() needs to be called before in order to get infos.
 *
 * @see pmb_reader_form_user_profile_form_alter()
 */
function pmb_reader_form_user_profile_form_validate($form, &$form_state) {
  if (pmb_reader_user_is_reader($form['#user'])) {
    // Keep original username and email.
    if ($form_state['values']['name'] != $form['account']['name']['#default_value']) {
      form_set_error('name', t('As a reader, you cannot change your account name (@item).', array(
        '@item' => $form['account']['name']['#default_value'],
      )) . ' ' . t('Ask your administrator for more information.'));
    }
    if ($form_state['values']['mail'] != $form['account']['mail']['#default_value']) {
      form_set_error('mail', t('As a reader, you cannot change your account email (@item).', array(
        '@item' => $form['account']['mail']['#default_value'],
      )) . ' ' . t('Ask your administrator for more information.'));
    }
    // Normally not used. Only in case of.
    if (($form_state['values']['current_pass'] != '')
        || ($form_state['values']['pass'] != '')
      ) {
      form_set_error('current_pass', t('As a reader, you cannot change your password on this page.') . ' ' . t('To change your password, go to <a href="!link_change">this page</a> or <a href="!link">request a new one</a>.', array(
        '!link_change' => url(_pmb_p('reader/') . $form['#user']->uid . _pmb_p('/password')),
        '!link' => url('user/password'),
      )));
    }
  }
}

/**
 * Submit form for profile change.
 *
 * @see pmb_reader_form_user_profile_form_alter()
 */
function pmb_reader_form_user_profile_form_submit($form, &$form_state) {
  // Simply set old values to avoid useless check.
  $form_state['values']['current_pass'] = '';
  $form_state['values']['pass'] = '';
}
