<?php

/**
 * PMB Connector for Drupal
 *
 * PMB Connector allows to link PMB/PhpMyBibli, a free (except easy access to
 * old and new code) library management system (LMS/ILS), to Drupal through a
 * webservice (currently JSON-RPC).
 *
 * Copyright © 2011 PMB Services <pmb@sigb.net> & contributors: see www.sigb.net
 *   (first public release pmbdrupal 0.9)
 * Copyright © 2007 sergio <jsonrpcphp@inservibile.org>
 *   (JSON-RPC portion)
 * Copyright © 2011-2012 Daniel Berthereau <daniel.drupal@berthereau.net>
 *   (debugging, drupalization and enhancements of pmbdrupal 0.9 [1.0-ALPHA])
 *   (conversion for Drupal 7)
 *
 * Licence: CeCILL or GPL (see README.txt).
 */

/**
 * @file
 * PMB main module.
 */

require_once(drupal_get_path('module', 'pmb') . '/pmb.class_data.inc');

/**
 * Return all default values used in PMB Connector module and submodules.
 */
function pmb_default_variables() {
  return array(
    // Link to PMB.
    'pmb_link_type' => 'json-rpc',
    'pmb_link_serverurl' => '',
    'pmb_link_serveruser' => '',
    'pmb_link_serverpassword' => '',
    'pmb_reader_auth_mode' => 'md5',
    'pmb_reader_session_duration' => 20 * 60,

    // Menu paths aliases.
    'pmb_alias_custom' => FALSE,
    // Default are inside hook_menu(); _pmb_alias_list_default() get them.
    // Default customization is a French translation.
    'pmb_alias' => array(
      // Catalog module.
      'catalog' => 'catalogue',
      'location' => 'lieu',
      'section' => 'section',
      'serial' => 'periodique',
      'shelf' => 'etagere',
      'thesaurus' => 'thesaurus',
      'category' => 'categorie',
      'class' => 'classe',
      'keyword' => 'mot_cle',
      // View module.
      'record' => 'notice',
      'external_record' => 'notice_externe',
      'issue' => 'bulletin',
      'author' => 'auteur',
      'publisher' => 'editeur',
      'serie' => 'collection',
      'subserie' => 'souscollection',
      'collection' => 'serie',
      'subcollection' => 'subserie',
      'uniform_title' => 'titre_uniforme',
      // Search module.
      'search' => 'recherche',
      'local' => 'local',
      'external' => 'externe',
      'advanced' => 'avancee',
      'result' => 'resultat',
      'all_fields' => 'tous_champs',
      'title' => 'titre',
      'indexint' => 'indexint',
      'isbn_bar_code' => 'isbn_code_barre',
      // Reader module.
      'reader' => 'lecteur',
      'summary' => 'resume',
      'cart' => 'panier',
      'reservation' => 'reservation',
      'loan' => 'emprunt',
      'reading_list' => 'liste_lecture',
      'reading_list_public' => 'liste_lecture_publique',
      'suggestion' => 'suggestion',
      'password' => 'mot_de_passe',
      'add' => 'ajouter',
      'delete' => 'supprimer',
      'edit' => 'editer',
    ),

    // User interface.
    // Display notices.
    'pmb_notice_sine' => TRUE,
    // Display menus.
    'pmb_menu_attach_search' => 'main-menu',
    'pmb_menu_attach_catalog' => 'main-menu',
    'pmb_menu_default' => 'search',
    'pmb_menu_attach_reader' => 'user-menu',
    'pmb_tabs_reader_default' => 'summary',

    // Display view lists.
    'pmb_noticeperpage_author' => 3,
    'pmb_noticeperpage_publisher' => 3,
    'pmb_noticeperpage_serie' => 3,
    'pmb_noticeperpage_subserie' => 3,
    // Display browse lists.
    'pmb_noticeperpage_section' => 10,
    'pmb_noticeperpage_shelf' => 10,
    'pmb_noticeperpage_block_shelf' => 3,
    'pmb_bulletinsperpage_serials' => 20,
    'pmb_noticeperpage_categories' => 5,
    // Display search results.
    'pmb_noticeperpage_search' => 10,

    // Cache of records.
    'pmb_user_cache_profile' => 'cache_anonymous_all',
    // Cache of items for view.
    'pmb_cache_duration_notice' => 3600,
    'pmb_cache_duration_notice_external' => 3600,
    'pmb_cache_duration_serials' => 3600,
    'pmb_cache_duration_author' => 3600,
    'pmb_cache_duration_publisher' => 3600,
    'pmb_cache_duration_serie' => 3600,
    'pmb_cache_duration_subserie' => 3600,
    // Cache of items for browse.
    'pmb_cache_duration_locations_and_sections' => 24 * 3600,
    'pmb_cache_duration_shelves' => 3600,
    'pmb_cache_duration_thesauri' => 24 * 3600,
    'pmb_cache_duration_category' => 3600,
    // Cache of items for search.
    'pmb_cache_duration_search' => 15 * 60,
    'pmb_cache_duration_search_external' => 3600,
    'pmb_cache_duration_search_external_sources' => 24 * 3600,
    'pmb_cache_duration_search_fields' => 24 * 3600,
    // Cache of readers.
    'pmb_cache_duration_reader_reservations' => 5,
    'pmb_cache_duration_reader_loans' => 20 * 60,
    'pmb_cache_duration_suggs_items' => 24 * 3600,
  );
}

/**
 * Implements hook_help().
 */
function pmb_help($path, $arg) {
  $output = '';

  switch ($path) {
    case "admin/help#pmb":
      $output = '<p>' . t('This module does not include any help. See documentation on <a href="!link">PMB website</a>.', array('!link' => url('http://doc.sigb.net/pmbdrupal'))) . '</p>';
      break;
  }

  return $output;
}

/**
 * Implements hook_permission().
 */
function pmb_permission() {
  $items = array(
    'PMB admin' => array(
      'title' => t('Administer PMB Connector settings'),
    ),
  );

  return $items;
}

/**
 * Implements hook_menu().
 */
function pmb_menu() {
  $items = array();

  $items['admin/config/pmb_connector'] = array(
    'title' => 'PMB Connector',
    'description' => 'Configure all settings of PMB Connector',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pmb_admin_form'),
    'access arguments' => array('PMB admin'),
    'file' => 'pmb.admin.inc',
  );
  // This second menu is needed to get a box in admin/config menu.
  $items['admin/config/pmb_connector/'] = array(
    'title' => 'PMB Connector',
    'description' => 'Configure all settings of PMB Connector',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pmb_admin_form'),
    'access arguments' => array('PMB admin'),
    'file' => 'pmb.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function pmb_menu_alter(&$items) {
  // An update is needed when Search and Browse menus are in the same menu.
  if (module_exists('pmb_catalog') && module_exists('pmb_search')) {
    // Prepare the default "Catalog" menu.
    // Default menu is 'Search'.
    if (pmb_variable_get('pmb_menu_default') == 'search') {
      $items['catalog'] = array(
        'title' => 'Catalog',
        'description' => 'Catalog',
        'page callback' => 'pmb_search_base',
        'access arguments' => array('PMB search catalog'),
        'file' => 'pmb_search.api.inc',
        'module' => 'pmb_search',
        'menu_name' => pmb_variable_get('pmb_menu_attach_search'),
        'type' => MENU_NORMAL_ITEM,
        'weight' => 2,
      );
    }
    // Default menu is 'Browse'.
    else {
      $items['catalog'] = array(
        'title' => 'Catalog',
        'description' => 'Catalog',
        'page callback' => 'pmb_catalog_location',
        'access arguments' => array('PMB browse'),
        'file' => 'pmb_catalog.locations.inc',
        'module' => 'pmb_catalog',
        'menu_name' => pmb_variable_get('pmb_menu_attach_catalog'),
        'type' => MENU_NORMAL_ITEM,
        'weight' => 2,
      );
    }

    // Search and Browse menus are in the same menu and need to be merged.
    if (pmb_variable_get('pmb_menu_attach_catalog') == pmb_variable_get('pmb_menu_attach_search')) {
      $items['catalog/search'] = array(
        'title' => 'Search',
        'description' => 'Search the catalog',
        'page callback' => 'pmb_search_base',
        'access arguments' => array('PMB search catalog'),
        'file' => 'pmb_search.api.inc',
        'module' => 'pmb_search',
        'type' => (pmb_variable_get('pmb_menu_default') == 'search') ?
          MENU_DEFAULT_LOCAL_TASK :
          MENU_LOCAL_TASK,
        'weight' => 1,
      );

      $items['catalog/location'] = array(
        'title' => 'Locations',
        'description' => 'Browse the catalog - Locations',
        'page callback' => 'pmb_catalog_location',
        'access arguments' => array('PMB browse'),
        'file' => 'pmb_catalog.locations.inc',
        'module' => 'pmb_catalog',
        'type' => (pmb_variable_get('pmb_menu_default') == 'browse') ?
          MENU_DEFAULT_LOCAL_TASK :
          MENU_LOCAL_TASK,
        'weight' => 5,
      );
    }
    // Search and Browse menus are not in the same menu.
    // @todo Bug when "catalog" and "catalog/location" are in different menus.
    // Two solutions:
    // - Check if an alias can be added for catalog => "catalog/location" or
    // "catalog/search"
    // - Change all types of menus.
  }

  // Set custom paths.
  if (pmb_variable_get('pmb_alias_custom')) {
    $custom = array();
    foreach ($items as $path => $item) {
      if (in_array($item['module'], array('pmb_view', 'pmb_search', 'pmb_catalog', 'pmb_reader'))) {
        $custom_path = _pmb_p($path);
        $custom[$custom_path] = $items[$path];
        if (isset($items[$path]['tab_parent'])) {
          $custom[$custom_path]['tab_parent'] = _pmb_p($items[$path]['tab_parent']);
        }
        if (isset($items[$path]['tab_root'])) {
          $custom[$custom_path]['tab_root'] = _pmb_p($items[$path]['tab_root']);
        }
        unset($items[$path]);
      }
    }
    $items += $custom;
  }
}

/**
 * Implements hook_theme().
 */
function pmb_theme() {
  $items = array(
    'pmb_pager' => array(
      'variables' => array(
        'current_page' => NULL,
        'page_count' => NULL,
        'tags' => NULL,
        'quantity' => NULL,
        'link_generator_callback' => NULL,
      ),
      'file' => 'pmb.templates.inc',
    ),
    'pmb_block_pager' => array(
      'variables' => array(
        'current_page' => NULL,
        'page_count' => NULL,
        'tags' => NULL,
        'id' => NULL,
        'link_generator_callback' => NULL
      ),
      'file' => 'pmb.templates.inc',
    ),
  );

  return $items;
}

/**
 * Implements hook_flush_caches().
 */
function pmb_flush_caches() {
  return array('cache_pmb_connector');
}

/**
 * Return one or all persistent variables, or default if it has never been set.
 */
function pmb_variable_get($item = NULL) {
  // Get only one variable.
  if ($item) {
    $default = pmb_default_variables();
    if (isset($default[$item])) {
      return variable_get($item, $default[$item]);
    }
  }
  // Return all variables.
  else {
    $values = array();
    foreach (pmb_default_variables() as $key => $value) {
      $values[$key] = variable_get($key, $value);
    }
    return $values;
  }
}

/**
 * Return one or all default persistent variables.
 */
function pmb_variable_get_default($item = NULL) {
  // Get only one variable.
  if ($item) {
    $default = pmb_default_variables();
    if (isset($default[$item])) {
      return $default[$item];
    }
  }
  // Return all variables.
  else {
    return pmb_default_variables();
  }
}

/**
 * Set custom paths if enabled.
 *
 * This function is needed because Drupal provides only unique alias system,
 * which doesn't manage placeholders. It will be removed in Drupal 8.
 * See
 * @link http://drupal.org/project/path_alias_xt Extended path aliases @endlink
 * @link http://drupal.org/project/subpathauto Sub-pathauto @endlink
 * Warning: to be used only on PMB Connector part of a path, else content items
 * can be customized.
 *
 * @see pmb_menu_alter()
 */
function _pmb_p($path) {
  static $paths = array();

  if (isset($paths[$path])) {
    return $paths[$path];
  }

  // Check if PMB custom paths are enabled.
  global $conf;
  if (isset($conf['pmb_alias_custom']) && $conf['pmb_alias_custom']) {
    $alias = pmb_variable_get('pmb_alias');
    $result = array();
    $items = explode('/', $path);
    foreach ($items as $item) {
      $result[] = (isset($alias[$item])) ?
        $alias[$item] :
        $item;
    }

    $paths[$path] = implode('/', $result);

    return $paths[$path];
  }

  // No custom path.
  $paths[$path] = $path;
  return $path;
}

/**
 * Get normal paths from a customized path.
 *
 * Warning: to be used only on PMB Connector part of a path, else content items
 * can be removed.
 *
 * @see _pmb_p()
 */
function _pmb_path_source($path) {
  $no_alias = array_flip(pmb_variable_get('pmb_alias'));

  $result = array();
  $items = explode('/', $path);
  foreach ($items as $item) {
    $result[] = (isset($no_alias[$item])) ?
      $no_alias[$item] :
      $item;
  }

  return implode('/', $result);
}

/**
 * @defgroup pmb_notice_display Helps to display content of a notice.
 * @{
 * These functions allow to get infos and displayable fields from a notice.
 */

/**
 * Helper to cut a too long string.
 */
function pmb_short_strings($string, $max_length = 60) {
  if (strlen($string) > $max_length ) {
    $string = substr($string, 0, $max_length - 3) . '...';
  }

  return $string;
}

/**
 * Helper to convert a PMB date (YEAR/MM/DD) in a readable order (DD/MM/YEAR).
 *
 * @todo Use locale.
 */
function pmb_convert_date($date) {
  return substr($date, 8, 2) . '/' . substr($date, 5, 2) . '/' . substr($date, 0, 4);
}

/**
 * Create a one level list of items from a notice, specially to prepare rows.
 *
 * @param array $notice_fields
 * @param array $fields_to_display
 *   Array of fields to display. Fields are keys and title is values. If key
 *   is one_row, then all subitems will be set in one rows instead of one row
 *   for each item.
 * @param boolean $mix_convention_with_authors
 *
 * @return array
 *   Array of readable, displayable and checked fields according to mode.
 *
 * @see pmb_data->get_notice_fields()
 */
function pmb_get_fields_list($notice_fields, $fields_to_display, $mix_convention_with_authors = TRUE) {
  // When the flag is false, convention is removed from the authors, so user
  // can see it only if convention is asked.
  if (!$mix_convention_with_authors) {
    if (isset($notice_fields['author']) && isset($notice_fields['convention'])) {
      foreach ($notice_fields['convention'] as $id => $value) {
        if (isset($notice_fields['author'][$id])) {
          unset($notice_fields['author'][$id]);
        }
      }
    }
  }

  $rows = array();
  foreach ($fields_to_display as $key => $value) {
    if (isset($notice_fields[$key])) {
      // Manage repetitive items.
      if (is_array($notice_fields[$key])) {
        // Manage complex field (authors, publishers...).
        if (is_array($value)) {
          $one_rows = array();
          foreach ($notice_fields[$key] as $id => $item) {
            foreach ($value as $subkey => $subvalue) {
              // Manage complex fields with repetitive items, all items in a
              // row (first part).
              if ($subkey == 'one_row') {
                foreach ($subvalue as $subsubkey => $subsubvalue) {
                  if (isset($notice_fields[$key][$id][$subsubkey])) {
                    $one_rows[$subsubvalue][] = $notice_fields[$key][$id][$subsubkey];
                  }
                }
              }
              // Manage complex fields with repetitive items, one item by row.
              else {
                if (isset($notice_fields[$key][$id][$subkey])) {
                  $rows[] = array(
                    $subvalue,
                    $notice_fields[$key][$id][$subkey],
                  );
                }
              }
            }
          }
          // Manage complex fields with repetitive items, all items in a row
          // (second part).
          foreach ($one_rows as $subkey => $subvalue) {
            $rows[] = array(
              $subkey,
              implode('<br />', $subvalue),
            );
          }
        }
        // Manage simple field with repetitive items (languages, keywords...).
        else {
          $rows[] = array(
            $value,
            implode('<br />', $notice_fields[$key]),
          );
        }
      }
      // Manage simple and non-repetitive items.
      else {
        $rows[] = array(
          $value,
          $notice_fields[$key],
        );
      }
    }
  }
  return $rows;
}

/**
 * @} End of "defgroup pmb_notice_display".
 */
