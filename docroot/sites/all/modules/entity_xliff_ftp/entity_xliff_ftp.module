<?php

/**
 * @file
 * Module hooks and functions for the Entity XLIFF FTP module.
 */

use EntityXliffFtp\MiddleWare;
use EntityXliffFtp\Querier;


/**
 * Implements hook_menu().
 */
function entity_xliff_ftp_menu() {
  return array(
    'sync-xliffs-from-remote' => array(
      'title' => 'Sync XLIFF from remote FTP server',
      'description' => 'Web service endpoint that can be used to trigger XLIFF syncs remotely',
      'type' => MENU_CALLBACK,
      'file' => 'inc/service.inc',
      'page callback' => 'entity_xliff_ftp_sync_from_remote',
      'access callback' => TRUE,
    ),
    'admin/config/services/entity-xliff-ftp' => array(
      'title' => 'Entity XLIFF FTP',
      'description' => 'Configure SFTP credentials and other settings for localization via remote file sync.',
      'type' => MENU_NORMAL_ITEM,
      'file' => 'inc/admin.inc',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('entity_xliff_ftp_settings'),
      'access arguments' => array('administer entity xliff'),
    ),
    'admin/config/regional/translate/entity-xliff-ftp' => array(
      'title' => 'Remote File Sync',
      'description' => 'Overview of pending and complete remote file sync projects',
      'type' => MENU_LOCAL_TASK,
      'file' => 'inc/admin.inc',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('entity_xliff_ftp_overview'),
      'access arguments' => array('administer entity xliff'),
    ),
  );
}

/**
 * Implements hook_cron().
 */
function entity_xliff_ftp_cron() {
  entity_xliff_ftp_process_all();
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function entity_xliff_ftp_form_entity_xliff_actions_alter(&$form, &$form_state) {
  module_load_include('inc', 'entity_xliff_ftp', 'inc/admin');
  _entity_xliff_ftp_form_entity_xliff_actions_alter($form, $form_state);
}

/**
 * Returns an authenticated phpseclib SFTP client or NULL on failure.
 *
 * @return Net_SFTP|null
 *   An authenticated Net_SFTP instance or NULL on failure.
 */
function entity_xliff_ftp_sftp_client() {
  $client = &drupal_static(__FUNCTION__, FALSE);

  if ($client === FALSE) {
    $host = variable_get('entity_xliff_ftp_host', FALSE);
    $un = variable_get('entity_xliff_ftp_un', FALSE);
    $pw = variable_get('entity_xliff_ftp_pw', FALSE);

    if ($host && $un && $pw) {
      $client = new Net_SFTP($host);
      if (!$client->login($un, $pw)) {
        $client = NULL;
      }
    }
    else {
      $client = NULL;
    }
  }

  return $client;
}

/**
 * Returns an instance of our MiddleWare class for a given entity. The same
 * MiddleWare instance will be returned throughout the request lifecycle.
 *
 * @param \EntityDrupalWrapper $wrapper
 * @return MiddleWare|bool
 */
function entity_xliff_ftp_get_middleware(\EntityDrupalWrapper $wrapper) {
  $middleware = &drupal_static(__FUNCTION__, array());
  $key = $wrapper->type() . ':' . $wrapper->getIdentifier();

  if (!array_key_exists($key, $middleware)) {
    if ($client = entity_xliff_ftp_sftp_client()) {
      $middleware[$key] = new MiddleWare($client, $wrapper);
    }
    else {
      $middleware[$key] = FALSE;
    }
  }

  return $middleware[$key];
}

/**
 * Returns a list of translated content that is available on the remote server
 * and ready for processing in Drupal.
 *
 * @param object[] $langs
 *   (optional) An associative array of Drupal language objects, keyed by
 *   language. If nothing is provided, all installed languages will be assumed.
 *
 * @return array
 *   A multidimensional array of the following form:
 *   - [drupal_language]: The Drupal language identifier.
 *     - [entity_type]: An array of entity IDs to be processed, keyed by the
 *       type of entity.
 */
function entity_xliff_ftp_get_processable(array $langs = array()) {
  $response = array();
  if ($client = entity_xliff_ftp_sftp_client()) {
    $query = new Querier($client);
    $response = $query->getProcessableByEntity($langs);
  }
  return $response;
}

/**
 * @param array $langs
 * @return array
 */
function entity_xliff_ftp_get_processed(array $langs = array()) {
  $response = array();
  if ($client = entity_xliff_ftp_sftp_client()) {
    $query = new Querier($client);
    $response = $query->getProcessedByEntity($langs);
  }
  return $response;
}

/**
 * Generates XLIFFs for the specified entity in the specified languages, then
 * pushes those files up to the remote server.
 *
 * @param string $type
 *   The type of entity.
 *
 * @param mixed $entity
 *   The entity (or entity ID) to push.
 *
 * @param object[] $langs
 *   (optional) An associative array of Drupal language objects, keyed by
 *   language. If nothing is provided, all installed languages will be assumed.
 */
function entity_xliff_ftp_put_entity_xliffs($type, $entity, $langs = array()) {
  $wrapper = entity_metadata_wrapper($type, $entity);
  if ($middleware = entity_xliff_ftp_get_middleware($wrapper)) {
    // Get the middleware provider and push up configured files.
    $middleware->putXliffs($langs);
  }
}

/**
 * Loads translated/processed XLIFF data from the remote server, unserializes
 * the data against the wrapped entity, and saves all relevant entities.
 *
 * @param string $type
 *   The type of entity.
 *
 * @param mixed $entity
 *   The entity (or entity ID) to push.
 *
 * @param object[] $langs
 *   (optional) An associative array of Drupal language objects, keyed by
 *   language. If nothing is provided, all installed languages will be assumed.
 */
function entity_xliff_ftp_set_entity_xliffs($type, $entity, $langs = array()) {
  $wrapper = entity_metadata_wrapper($type, $entity);
  if ($middleware = entity_xliff_ftp_get_middleware($wrapper)) {
    $middleware->setXliffs($langs);
  }
}

/**
 * Sync all processable XLIFFs from the remote server to Drupal.
 *
 * @return array
 *   Returns an associative array of entities processed; the key represents the
 *   entity type and entity ID, separated by a dash. The value is an array of
 *   languages processed. If no entities were processed, an empty array will be
 *   returned.
 */
function entity_xliff_ftp_process_all() {
  $entitiesProcessed = array();
  $xliffsProcessed = 0;

  if ($processable = entity_xliff_ftp_get_processable()) {
    $languages = language_list();
    foreach ($processable as $entityType => $entities) {
      foreach ($entities as $entityId => $langs) {
        // Map known langs to Drupal language objects.
        $processLangs = array_map(function($lang) use ($languages) {
          return $languages[$lang];
        }, $langs);

        // Process the XLIFFs.
        try {
          entity_xliff_ftp_set_entity_xliffs($entityType, $entityId, $processLangs);
          $entitiesProcessed[$entityType . '-' . $entityId] = $langs;
          $xliffsProcessed += count($processLangs);
        }
        catch (Exception $e) {
          // If the process caused an exception, catch it and log it.
          watchdog('entity xliff ftp', 'There was a problem processing XLIFFs from the remote file system for @entity_type @id. Message: !message', array(
            '@entity_type' => $entityType,
            '@id' => $entityId,
            '!message' => $e->getMessage(),
          ), WATCHDOG_ERROR);
        }
      }
    }
  }

  // If we processed any entity xliff imports, add a notice.
  if (count($entitiesProcessed)) {
    // Watchdog notice for logging / Insights.
    watchdog('entity xliff ftp', 'Successfully processed !xliff_count XLIFF files across !entity_count entities.', array(
      '!xliff_count' => $xliffsProcessed,
      '!entity_count' => count($entitiesProcessed),
    ), WATCHDOG_NOTICE);

    // Set this variable. Used in admin UI on overview page.
    variable_set('entity_xliff_ftp_last_processed', REQUEST_TIME);
  }

  return $entitiesProcessed;
}
