<?php
/**
 * @file
 * Adds terminal support to Ogone payment method.
 */

/**
 * Implements hook_commerce_payment_method_info_alter().
 *
 * @see commerce_ogone_commerce_payment_method_info()
 */
function commerce_ogone_terminal_commerce_payment_method_info_alter(&$payment_methods) {
  $payment_methods['ogone']['terminal'] = TRUE;
}

/**
 * Implements hook_form_FORM_ID_alter() for commerce_payment_order_transaction_add_form.
 *
 * @see commerce_payment_order_transaction_add_form()
 * @see commerce_payment_order_transaction_add_form_add_refresh()
 * @see commerce_payment_order_transaction_add_form_submit()
 * @see commerce_ogone_terminal_order_transaction_add_form_submit()
 */
function commerce_ogone_terminal_form_commerce_payment_order_transaction_add_form_alter(&$form, &$form_state) {
  // If a payment method has already been selected (which means we are on
  // the 2nd step), and it's Ogone...
  if (
    !empty($form_state['payment_method']['base'])
    && $form_state['payment_method']['base'] == 'commerce_ogone'
  ) {
    // Change button label.
    if (!empty($form['actions']['submit']['#value'])) {
      $form['actions']['submit']['#value'] = t('Proceed to payment');
    }

    // Add custom submit, which will force the form to be rebuilt again (we want
    // another step here, for external Ogone redirect), and add new value to
    // $form_state so that we would know when we get back here again which step
    // we are on.
    $form['#submit'][] = 'commerce_ogone_terminal_order_transaction_add_form_submit';

    // The 'ogone_redirect' key will be set only on the 3rd step,
    // where we need to do external Ogone redirect.
    if (!empty($form_state['ogone_redirect'])) {
      // If amount or currency for the transaction was changed in the terminal,
      // we need to send these new values to commerce_ogone_redirect_form(),
      // but at the same time we don't want to modify the original order - let's
      // then clone it first and modify relevant values in the cloned version.
      $order = clone $form_state['order'];
      $wrapper = entity_metadata_wrapper('commerce_order', $order);
      // If amount value was changed in the terminal...
      if (
        !empty($form_state['values']['amount'])
        && $form_state['values']['amount'] != $wrapper->commerce_order_total->amount->value()
      ) {
        $wrapper->commerce_order_total->amount = $form_state['values']['amount'];
      }
      // Same applies to the currency code.
      if (
        !empty($form_state['values']['currency_code'])
        && $form_state['values']['currency_code'] != $wrapper->commerce_order_total->currency_code->value()
      ) {
        $wrapper->commerce_order_total->currency_code = $form_state['values']['currency_code'];
      }

      // Get Ogone redirect form normally used on redirect pane during checkout.
      $ogone_redirect_form = commerce_ogone_redirect_form($form, $form_state, $order, $form_state['payment_method']);

      // Merge both forms, overwriting current form's elements
      // with Ogone redirect form's elements.
      $form = array_merge($form, $ogone_redirect_form);

      // Get rid of form elements that are not needed anymore on this step.
      // Remove Payment terminal.
      unset($form['payment_terminal']);
      // Remove terminal's 'Save' button.
      unset($form['actions']);

      // Wrap the redirect form into another div with a specific class name,
      // so that we could re-use commerce_payment's auto-redirect Javascript.
      $form['#prefix'] = '<div class="payment-redirect-form">';
      $form['#suffix'] = '</div>';
      // Add commerce_payment's auto-redirect Javascript.
      $form['#attached']['js'][] = drupal_get_path('module', 'commerce_payment') . '/commerce_payment.js';
    }
  }
}

/**
 * Implements hook_commerce_ogone_data_alter().
 *
 * @see commerce_ogone_build_redirect_form()
 */
function commerce_ogone_terminal_commerce_ogone_data_alter(&$data, $order, $settings) {
  // Ogone will show an error if we send them a payment request with the ORDERID
  // value that was already sent before. So if there already exist any previously
  // created transactions for this order, let's load them and modify current
  // ORDERID to make sure we send them a unique value.
  if ($transactions = commerce_payment_transaction_load_multiple(array(), array('order_id' => $order->order_id))) {
    $existing_ids = array();
    foreach ($transactions as $transaction) {
      $existing_ids[] = $transaction->payload['ORDERID'];
    }
    $current_id = $data['ORDERID'];
    $modifier = 1;
    while (in_array($current_id, $existing_ids)) {
      $modifier++;
      // We'll use values like 48#2, 48#3 etc.
      $current_id = $data['ORDERID'] . '#' . $modifier;
    }
    $data['ORDERID'] = $current_id;
  }
}

/**
 * Ogone-specific submit callback used on the 2nd step.
 *
 * Even after submitting the Payment terminal form values (amount and currency)
 * we still want the form to get rebuilt, as new 3rd step will be an external
 * auto-redirect to Ogone gateway.
 *
 * @see commerce_ogone_terminal_form_commerce_payment_order_transaction_add_form_alter()
 */
function commerce_ogone_terminal_order_transaction_add_form_submit($form, &$form_state) {
  // Rebuild the form so that we could have new, 3rd step.
  $form_state['rebuild'] = TRUE;
  // This will notify our custom form alter that we are on the 3rd step,
  // and the Ogone external redirect form needs to be added.
  $form_state['ogone_redirect'] = TRUE;
}

/**
 * Payment method callback: checkout form submission.
 *
 * This is standard payment method callback, and therefore it should exist in
 * main commerce_ogone module, but for some unexplained reason it is not there,
 * so we can add it here instead.
 *
 * It is supposed to be used only for admin Ogone terminal payments, which
 * do not go through normal checkout payment flow, therefore some of those
 * standard operations need to be forced here, and sometimes slightly tricked
 * to work properly.
 *
 * @see commerce_payment_redirect_pane_checkout_form()
 */
function commerce_ogone_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  global $user;

  // This function is a generic payment method callback, but we actually want
  // it to be executed only in case of using it through admin payment terminal
  // (so not during standard checkout process) to avoid it messing up default
  // commerce_ogone payment flow.
  // The same applies to commerce_ogone_redirect_form_submit(), so let's just
  // add extra info to $order->data, which could be checked later on.
  if (in_array('payment_terminal', $pane_form['#array_parents'])) {
    $order->data['ogone_terminal'] = TRUE;
  }
  else {
    return;
  }

  // Store payment method instance_id in the order if it isn't there yet.
  if (empty($order->data['payment_method'])) {
    $order->data['payment_method'] = $payment_method['instance_id'];
  }

  // The 'payment_redirect_key' is normally generated in
  // commerce_payment_redirect_pane_checkout_form(). Considering though that
  // here we don't use standard redirect pane and its checkout form, we need
  // to generate that 'payment_redirect_key' ourselves.
  if (empty($order->data['payment_redirect_key'])) {
    $order->data['payment_redirect_key'] = drupal_hash_base64(time());
  }

  // We need to update order owner to current user, as otherwise we will be
  // shown a 'not found' page on return from the external payment gateway.
  $order->data['original_uid'] = $order->uid;
  $order->uid = $user->uid;

  // Update order status to 'Checkout: Payment'.
  $order = commerce_order_status_update($order, 'checkout_payment');
}

/**
 * Payment method callback; submission callback for redirected payments.
 *
 * This is standard payment method callback, and therefore it should exist in
 * main commerce_ogone module, but for some unexplained reason it is not there,
 * so we can add it here instead.
 *
 * It is supposed to be used only for admin Ogone terminal payments, which
 * do not go through normal checkout payment flow, therefore some of those
 * standard operations need to be forced here, and sometimes slightly tricked
 * to work properly.
 *
 * @see commerce_payment_redirect_pane_checkout_form()
 * @see commerce_ogone_redirect_form_validate()
 */
function commerce_ogone_redirect_form_submit($order, $payment_method) {
  // Do not continue if the payment was not invoked from admin payment terminal.
  if (empty($order->data['ogone_terminal'])) {
    return;
  }

  // In commerce_ogone_submit_form_submit() we have updated order owner to
  // current user (initiating the payment transaction), so now we should
  // update it back to its original value.
  if (isset($order->data['original_uid']) && $order->data['original_uid'] != $order->uid) {
    $order->uid = $order->data['original_uid'];
    commerce_order_save($order);
  }

  // Redirect back to admin order payment page where it all has started.
  drupal_goto('admin/commerce/orders/' . $order->order_id . '/payment');
}
