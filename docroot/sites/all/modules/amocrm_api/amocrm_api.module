<?php

/**
 * @file
 * Basic integration with amoCRM via REST API.
 */

/**
 * Implements hook_menu().
 */
function amocrm_api_menu() {
  $items['admin/config/amocrm'] = array(
    'title' => 'amoCRM',
    'description' => 'Adjust AmoCRM settings.',
    'file' => 'amocrm_api.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('amocrm_api_admin_settings'),
    'access arguments' => array('administer site configuration'),
  );

  return $items;
}

/**
 * Get AmoRestApi client.
 *
 * @param string $domain
 *   Sub-domain of amoCRM account
 * @param string $email
 *   User email, all actions will be done by this user
 * @param string $key
 *   User API key
 *
 * @return \AmoRestApi
 */
function amocrm_api_client($domain, $email, $key) {
  $client = &drupal_static(__FUNCTION__ . ":$domain-$email-$key");

  if (is_null($client)) {
    $client = new AmoRestApi($domain, $email, $key);
  }

  return $client;
}

/**
 * Get AmoRestApi default client.
 *
 * @return \AmoRestApi
 */
function amocrm_api_get_default_client() {
  $domain = variable_get('amocrm_api_default_domain');
  $email = variable_get('amocrm_api_default_email');
  $key = variable_get('amocrm_api_default_key');

  if ($domain && $email && $key) {
    return amocrm_api_client($domain, $email, $key);
  }

  return NULL;
}

/**
 * Get account information by $client.
 *
 * @param \AmoRestApi $client
 *
 * @return array
 */
function amocrm_api_account_load(\AmoRestApi $client) {
  return $client->getAccountInfo();
}

/**
 * Load list of contacts.
 *
 * @param \AmoRestApi $client
 * @param int $limitRows
 * @param int $limitOffset
 * @param array $ids
 * @param string $query
 * @param string $responsible
 * @param \DateTime $dateModified
 *
 * @return array
 */
function _amocrm_api_contact_load_multiple(\AmoRestApi $client, $limitRows, $limitOffset, array $ids, $query, $responsible, $dateModified) {
  if ($result = $client->getContactsList($limitRows, $limitOffset, $ids, $query, $responsible, $dateModified)) {
    $result = $result['contacts'];
  }

  return $result;
}

/**
 * Load contacts by ids.
 *
 * @param \AmoRestApi $client
 * @param array $params
 *
 * @return array
 */
function amocrm_api_contact_load_multiple(\AmoRestApi $client, array $params = array()) {
  $parameters = array_merge(array(
    'limitRows' => NULL,
    'limitOffset' => NULL,
    'ids' => array(),
    'query' => '',
    'responsible' => '' ,
    'dateModified' => NULL,
  ), $params);

  return _amocrm_api_contact_load_multiple(
    $client,
    $parameters['limitRows'],
    $parameters['limitOffset'],
    $parameters['ids'],
    $parameters['query'],
    $parameters['responsible'],
    $parameters['dateModified']
  );
}

/**
 * Load contact by id.
 *
 * @param \AmoRestApi $client
 * @param int $id
 *
 * @return array
 */
function amocrm_api_contact_load(\AmoRestApi $client, $id) {
  if ($contacts = amocrm_api_contact_load_multiple($client, array('ids' => array($id)))) {
    return reset($contacts);
  }

  return $contacts;
}

/**
 * Load list of companies.
 *
 * @param \AmoRestApi $client
 * @param int $limitRows
 * @param int $limitOffset
 * @param array $ids
 * @param string $query
 * @param string $responsible
 * @param \DateTime $dateModified
 *
 * @return array
 */
function _amocrm_api_company_load_multiple(\AmoRestApi $client, $limitRows, $limitOffset, array $ids, $query, $responsible, $dateModified) {
  if ($result = $client->getCompanyList($limitRows, $limitOffset, $ids, $query, $responsible, $dateModified)) {
    $result = $result['contacts'];
  }

  return $result;
}

/**
 * Load companies by ids.
 *
 * @param \AmoRestApi $client
 * @param array $params
 *
 * @return array
 */
function amocrm_api_company_load_multiple(\AmoRestApi $client, array $params = array()) {
  $parameters = array_merge(array(
    'limitRows' => NULL,
    'limitOffset' => NULL,
    'ids' => array(),
    'query' => '',
    'responsible' => '',
    'dateModified' => NULL,
  ), $params);

  return _amocrm_api_company_load_multiple(
    $client,
    $parameters['limitRows'],
    $parameters['limitOffset'],
    $parameters['ids'],
    $parameters['query'],
    $parameters['responsible'],
    $parameters['dateModified']
  );
}

/**
 * Load company by id.
 *
 * @param \AmoRestApi $client
 * @param int $id
 *
 * @return array
 */
function amocrm_api_company_load(\AmoRestApi $client, $id) {
  if ($contacts = amocrm_api_company_load_multiple($client, array('ids' => array($id)))) {
    return reset($contacts);
  }

  return $contacts;
}

/**
 * Load list of leads.
 *
 * @param \AmoRestApi $client
 * @param int $limitRows
 * @param int $limitOffset
 * @param array $ids
 * @param string $query
 * @param string $responsible
 * @param array $status
 * @param \DateTime $dateModified
 *
 * @return array
 */
function _amocrm_api_lead_load_multiple(\AmoRestApi $client, $limitRows, $limitOffset, array $ids, $query, $responsible, array $status, $dateModified) {
  if ($result = $client->getLeadsList($limitRows, $limitOffset, $ids, $query, $responsible, $status, $dateModified)) {
    $result = $result['leads'];
  }

  return $result;
}

/**
 * Load leads by ids.
 *
 * @param \AmoRestApi $client
 * @param array $params
 *
 * @return array
 */
function amocrm_api_lead_load_multiple(\AmoRestApi $client, array $params = array()) {
  $parameters = array_merge(array(
    'limitRows' => NULL,
    'limitOffset' => NULL,
    'ids' => array(),
    'query' => '',
    'responsible' => '',
    'status' => array(),
    'dateModified' => NULL,
  ), $params);

  return _amocrm_api_lead_load_multiple(
    $client,
    $parameters['limitRows'],
    $parameters['limitOffset'],
    $parameters['ids'],
    $parameters['query'],
    $parameters['responsible'],
    $parameters['status'],
    $parameters['dateModified']
  );
}

/**
 * Load lead by id.
 *
 * @param \AmoRestApi $client
 * @param int $id
 *
 * @return array
 */
function amocrm_api_lead_load(\AmoRestApi $client, $id) {
  if ($contacts = amocrm_api_lead_load_multiple($client, array('ids' => array($id)))) {
    return reset($contacts);
  }

  return $contacts;
}

/**
 * Load list of tasks.
 *
 * @param \AmoRestApi $client
 * @param int $limitRows
 * @param int $limitOffset
 * @param array $ids
 * @param string $query
 * @param string $responsible
 * @param string $type
 * @param \DateTime $dateModified
 *
 * @return array
 */
function _amocrm_api_task_load_multiple(\AmoRestApi $client, $limitRows, $limitOffset, array $ids, $query, $responsible, $type, $dateModified) {
  if ($result = $client->getTasksList($limitRows, $limitOffset, $ids, $query, $responsible, $type, $dateModified)) {
    $result = $result['tasks'];
  }

  return $result;
}

/**
 * Load tasks by ids.
 *
 * @param \AmoRestApi $client
 * @param array $params
 *
 * @return array
 */
function amocrm_api_task_load_multiple(\AmoRestApi $client, array $params = array()) {
  $parameters = array_merge(array(
    'limitRows' => NULL,
    'limitOffset' => NULL,
    'ids' => array(),
    'query' => '',
    'responsible' => '',
    'type' => '',
    'dateModified' => NULL
  ), $params);

  return _amocrm_api_task_load_multiple(
    $client,
    $parameters['limitRows'],
    $parameters['limitOffset'],
    $parameters['ids'],
    $parameters['query'],
    $parameters['responsible'],
    $parameters['type'],
    $parameters['dateModified']
  );
}

/**
 * Load task by id.
 *
 * @param \AmoRestApi $client
 * @param int $id
 *
 * @return array
 */
function amocrm_api_task_load(\AmoRestApi $client, $id) {
  if ($contacts = amocrm_api_task_load_multiple($client, array('ids' => array($id)))) {
    return reset($contacts);
  }

  return $contacts;
}

/**
 * Load list of notes.
 *
 * @param \AmoRestApi $client
 * @param int $limitRows
 * @param int $limitOffset
 * @param array $ids
 * @param string $element_id
 * @param string $type
 * @param \DateTime $dateModified
 *
 * @return array
 */
function _amocrm_api_note_load_multiple(\AmoRestApi $client, $limitRows, $limitOffset, array $ids, $element_id, $type, $dateModified) {
  if ($result = $client->getNotesList($limitRows, $limitOffset, $ids, $element_id, $type, $dateModified)) {
    $result = $result['notes'];
  }

  return $result;
}

/**
 * Load notes by ids.
 *
 * @param \AmoRestApi $client
 * @param array $params
 *
 * @return array
 */
function amocrm_api_note_load_multiple(\AmoRestApi $client, array $params = array()) {
  $parameters = array_merge(array(
    'limitRows' => NULL,
    'limitOffset' => NULL,
    'ids' => array(),
    'element_id' => '',
    'type' => '',
    'dateModified' => NULL,
  ), $params);

  return _amocrm_api_note_load_multiple(
    $client,
    $parameters['limitRows'],
    $parameters['limitOffset'],
    $parameters['ids'],
    $parameters['element_id'],
    $parameters['type'],
    $parameters['dateModified']
  );
}

/**
 * Load note by id.
 *
 * @param \AmoRestApi $client
 * @param int $id
 * @param string $type
 *   Type of amoCRM entity, may be "lead" or "contact"
 *
 * @return array
 */
function amocrm_api_note_load(\AmoRestApi $client, $id, $type) {
  if ($contacts = amocrm_api_note_load_multiple($client, array('ids' => array($id), 'type' => $type))) {
    return reset($contacts);
  }

  return $contacts;
}

/**
 * Load list of contact links.
 *
 * @param \AmoRestApi $client
 * @param int $limitRows
 * @param int $limitOffset
 * @param array $contacts
 * @param array $leads
 * @param \DateTime $dateModified
 *
 * @return array
 */
function _amocrm_api_contact_link_load_multiple(\AmoRestApi $client, $limitRows, $limitOffset, array $contacts, array $leads, $dateModified) {
  if ($result = $client->getContactsLinks($limitRows, $limitOffset, $contacts, $leads, $dateModified)) {
    $result = $result['links'];
  }

  return $result;
}

/**
 * Load notes by ids.
 *
 * @param \AmoRestApi $client
 * @param array $ids
 * @param string $type
 *   Type of amoCRM entity, may be "lead" or "contact"
 * @param array $params
 *
 * @return array
 */
function amocrm_api_contact_link_load_multiple(\AmoRestApi $client, array $ids, $type, array $params = array()) {
  $parameters = array_merge(array(
    'limitRows' => NULL,
    'limitOffset' => NULL,
    'contacts' => ($type == 'contact') ? $ids : array(),
    'leads' => ($type == 'lead') ? $ids : array(),
    'dateModified' => NULL,
  ), $params);

  dsm($parameters); // @todo remove
  return _amocrm_api_contact_link_load_multiple(
    $client,
    $parameters['limitRows'],
    $parameters['limitOffset'],
    $parameters['contacts'],
    $parameters['leads'],
    $parameters['dateModified']
  );
}

/**
 * Load note by id.
 *
 * @param \AmoRestApi $client
 * @param int $id
 * @param string $type
 *   Type of amoCRM entity, may be "lead" or "contact"
 *
 * @return array
 */
function amocrm_api_contact_link_load(\AmoRestApi $client, $id, $type) {
  if ($contacts = amocrm_api_contact_link_load_multiple($client, array($id), $type)) {
    return reset($contacts);
  }

  return $contacts;
}

/**
 * Get list of all available lead's statuses.
 *
 * @param \AmoRestApi $client
 *
 * @return array
 */
function amocrm_api_lead_statuses(\AmoRestApi $client) {
  return $client->getLeadsStatuses();
}

/**
 * Create new custom fields.
 *
 * @param \AmoRestApi $client
 * @param array $fields
 *   Array of fields infos
 *   @see amocrm_api_custom_field_add()
 *
 * @return array
 */
function amocrm_api_custom_field_add_multiple(\AmoRestApi $client, $fields) {
  return $client->setFields(array('add' => $fields));
}

/**
 * Create new custom field.
 *
 * @param \AmoRestApi $client
 * @param array $field
 *   Must contain the following field:
 *    * 'name' - Field name
 *    * 'type' - Field type, see AMOCRM_API_FIELD_TYPE_* constants
 *    * 'element_type' - amoCRM entity type, see AMOCRM_API_ENTITY_* constants
 *    * 'origin' - The unique identifier of the service which will be available
 *      for deletion and modification of the field
 *
 * @return array
 */
function amocrm_api_custom_field_add(\AmoRestApi $client, $field) {
  return amocrm_api_custom_field_add_multiple($client, array($field));
}

/**
 * Delete custom fields.
 *
 * @param \AmoRestApi $client
 * @param array $fields
 *   Array of fields infos
 *   @see amocrm_api_custom_field_delete()
 */
function amocrm_api_custom_field_delete_multiple(\AmoRestApi $client, $fields) {
  $client->setFields(array('delete' => $fields));
}

/**
 * Delete custom field.
 *
 * @param \AmoRestApi $client
 * @param array $field
 *   Must contain the following field:
 *    * 'id' - Field ID
 *    * 'origin' - The unique identifier of the service which will be available
 *      for deletion and modification of the field
 */
function amocrm_api_custom_field_delete(\AmoRestApi $client, $field) {
  amocrm_api_custom_field_delete_multiple($client, array($field));
}

/**
 * Create new contacts.
 *
 * @param \AmoRestApi $client
 * @param $contacts
 *
 * @return array
 */
function amocrm_api_contacts_add(\AmoRestApi $client, $contacts) {
  return $client->setContacts(array('add' => $contacts));
}

/**
 * Update existing contacts.
 *
 * @param \AmoRestApi $client
 * @param $contacts
 *
 * @return array
 */
function amocrm_api_contacts_update(\AmoRestApi $client, $contacts, $last_modified = REQUEST_TIME) {
  amocrm_api_set_last_modified_timestamp($contacts, $last_modified);
  return $client->setContacts(array('update' => $contacts));
}

/**
 * Create new leads.
 *
 * @param \AmoRestApi $client
 * @param $contacts
 *
 * @return array
 */
function amocrm_api_leads_add(\AmoRestApi $client, $contacts) {
  return $client->setLeads(array('add' => $contacts));
}

/**
 * Update existing leads.
 *
 * @param \AmoRestApi $client
 * @param $contacts
 *
 * @return array
 */
function amocrm_api_leads_update(\AmoRestApi $client, $leads, $last_modified = REQUEST_TIME) {
  amocrm_api_set_last_modified_timestamp($leads, $last_modified);
  return $client->setLeads(array('update' => $leads));
}

/**
 * Create new companies.
 *
 * @param \AmoRestApi $client
 * @param $companies
 *
 * @return array
 */
function amocrm_api_companies_add(\AmoRestApi $client, $companies) {
  return $client->setCompany(array('add' => $companies));
}

/**
 * Update existing companies.
 *
 * @param \AmoRestApi $client
 * @param $companies
 *
 * @return array
 */
function amocrm_api_companies_update(\AmoRestApi $client, $companies, $last_modified = REQUEST_TIME) {
  amocrm_api_set_last_modified_timestamp($companies, $last_modified);
  return $client->setCompany(array('update' => $companies));
}

/**
 * Create new tasks.
 *
 * @param \AmoRestApi $client
 * @param $tasks
 *
 * @return array
 */
function amocrm_api_tasks_add(\AmoRestApi $client, $tasks) {
  return $client->setTasks(array('add' => $tasks));
}

/**
 * Update existing tasks.
 *
 * @param \AmoRestApi $client
 * @param $tasks
 *
 * @return array
 */
function amocrm_api_tasks_update(\AmoRestApi $client, $tasks, $last_modified = REQUEST_TIME) {
  amocrm_api_set_last_modified_timestamp($tasks, $last_modified);
  return $client->setTasks(array('update' => $tasks));
}

/**
 * Create new notes.
 *
 * @param \AmoRestApi $client
 * @param $notes
 *
 * @return array
 */
function amocrm_api_notes_add(\AmoRestApi $client, $notes) {
  return $client->setNotes(array('add' => $notes));
}

/**
 * Update existing notes.
 *
 * @param \AmoRestApi $client
 * @param $notes
 *
 * @return array
 */
function amocrm_api_notes_update(\AmoRestApi $client, $notes, $last_modified = REQUEST_TIME) {
  amocrm_api_set_last_modified_timestamp($notes, $last_modified);
  return $client->setNotes(array('update' => $notes));
}

/**
 * Set $last_modified parameter to every object.
 *
 * @param array $objects
 * @param $last_modified
 */
function amocrm_api_set_last_modified_timestamp(array &$objects, $last_modified) {
  foreach ($objects as &$object) {
    $object['last_modified'] = $last_modified;
  }
}
