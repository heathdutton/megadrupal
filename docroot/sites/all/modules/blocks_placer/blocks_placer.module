<?php
/**
 * @file
 * Handles Bean blocks administration, etc.
 */

define('BLOCKS_PLACER_NAME_FRIENDLY', 'Blocks Placer');


/**
 * Implements hook_menu().
 */
function blocks_placer_menu() {
  $items['admin/config/content/blocks_placer'] = array(
    'title' => BLOCKS_PLACER_NAME_FRIENDLY,
    'description' => 'Configure ' . BLOCKS_PLACER_NAME_FRIENDLY . ' settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('blocks_placer_admin_settings'),
    'access arguments' => array('administer blocks_placer'),
    'file' => 'blocks_placer.admin.inc',
  );

  $theme_list = list_themes();
  $theme_default = variable_get('theme_default', 'bartik');

  $items['blocks_placer/region-demo'] = array(
    'title' => 'Region demo for the ' . check_plain($theme_list[$theme_default]->info['name']) . ' theme',
    'page callback' => 'blocks_placer_region_demo',
    'page arguments' => array($theme_default),
    'type' => MENU_CALLBACK,
    'access callback' => '_blocks_placer_themes_access',
    'access arguments' => array($theme_default),
    'theme callback' => '_blocks_placer_custom_theme',
    'theme arguments' => array($theme_default),
    'file' => 'blocks_placer.admin.inc',
  );

  return $items;
}


/**
 * Menu item access callback - only users that has bean admin access.
 */
function _blocks_placer_themes_access($theme) {
  return user_access('access bean overview');
}


/**
 * Theme callback for the region demo page.
 */
function _blocks_placer_custom_theme($theme = NULL) {
  return $theme;
}


/**
 * Implements hook_permission().
 */
function blocks_placer_permission() {
  return array(
    'administer blocks_placer' => array(
      'title' => t('Administer module settings'),
      'description' => t('Change site-wide configuration.'),
    ),
    'bybass blocks_placer access control' => array(
      'title' => t('Bypass block admin access control'),
      'description' => t('Grants full access to global block settings and available regions limited by this module.'),
    ),
  );
}


/**
 * Returns block and region data for a node.
 *
 * @param int $nid  Node ID. Defaults to current node.
 *
 * @return array
 * An array with two indexes, 'blocks' and 'hidden'.
 *
 * TODO: Consider checking for preview mode, and load data from js instead.
 */
function blocks_placer_load($nid = 0) {

  // Try to get nid.
  if (empty($nid)) {
    $node = menu_get_object();
    if (!empty($node)) {
      $nid = $node->nid;
    }
    else {
      return;
    }
  }

  $hidden_str = '';
  $data = array(
    'blocks' => array(),
    'hidden' => array(),
    'hidden_str' => '',
  );

  $req = db_select('blocks_placer', 'b')
    ->fields('b')
    ->condition('nid', $nid, '=')
    ->execute()
    ->fetchAll();

  foreach ($req as $row) {
    $type = 'blocks';
    $key  = $row->bid;

    // If this is a region.
    if ($row->bid == 0) {
      $type = 'hidden';
      $key  = $row->region;
      $hidden_str .= '|' . $key . '|';
    }

    $data[$type][$key] = $row;
  }

  // Attach hidden regions as string for js settings and field value, etc.
  $data['hidden_str'] = $hidden_str;

  return $data;
}


/**
 * Implements hook_form_alter().
 */
function blocks_placer_form_alter(&$form, &$form_state, $form_id) {

  // Check if user has full access to form settings.
  if (user_access('bybass block access control')) return;

  // Set regions to remove.
  $disabled = variable_get('blocks_placer_restricted_regions', array(
    'header',
    'navigation',
    'highlighted',
    'help',
    'footer',
  ));

  // Block config form.
  if ($form_id == 'block_admin_configure') {
    // Bean modules.
    if ($form['module']['#value'] == 'bean') {

      // Remove title field as it's not needed.
      $form['settings']['title']['#access'] = FALSE;

      // Remove other theme regions.
      $theme = variable_get('theme_default', '');
      foreach ($form['regions'] as $key => $item) {
        if (is_array($item) && $key != $theme) {
          $form['regions'][$key]['#access'] = FALSE;
        }
      }

      // Remove theme regions.
      if (in_array($form['regions'][$theme]['#default_value'], $disabled)) {
        drupal_set_message(t('This block is in a restricted region. Region settings has been disabled.'), 'warning');
        $form['regions']['#access'] = FALSE;
      }
      else {
        // Iterate the regions and remove specified.
        foreach ($form['regions'][$theme]['#options'] as $key => $option) {
          if (in_array($key, $disabled)) {
            unset($form['regions'][$theme]['#options'][$key]);
          }
        }
      }

    }
  } // if block_admin_configure

  // Block admin page.
  if ($form_id == 'block_admin_display_form') {

    $regions_copy = $form['block_regions']['#value'];
    unset($regions_copy[-1]);
    foreach ($regions_copy as $rid => $region) {
      if (in_array($rid, $disabled)) {
        unset($regions_copy[$rid]);
      }
    }

    foreach ($form['blocks'] as $bid => $block) {
      // Rebuild blocks array with only bean blocks.
      if ($block['module']['#value'] == 'bean') {
        $bean_blocks[$bid] = $form['blocks'][$bid];
        $bean_blocks[$bid]['region']['#options'] = $regions_copy;
        if (!in_array($bean_blocks[$bid]['region']['#default_value'], array_flip($bean_blocks[$bid]['region']['#options']))) {
          $bean_blocks[$bid]['region']['#access'] = FALSE;
        }
      }
    }

    $form['blocks'] = $bean_blocks;

  } // block_admin_display_form

  // Redirect System block add page to bean block add page.
  if ($form_id == 'block_add_block_form') {
    drupal_goto('block/add');
  }

}


/**
 * Implements hook_form_alter().
 *
 * Alters the node form.
 */
function blocks_placer_form_node_form_alter(&$form, &$form_state, $form_id) {

  if (isset($form['blocks_placer_blocks'])) {

    $nid = $form['nid']['#value'];

    // Add custom handlers.
    $form['#validate'][] = 'blocks_placer_custom_validate';
    $form['#submit'][] = 'blocks_placer_custom_submit';

    // Get settings if not preview mode.
    if (empty($form_state['input'])) {

      // Fetch block and region data.
      $data = blocks_placer_load($nid);

      $settings['blocks_placer']['blocks'] = $data['blocks'];
      $settings['blocks_placer']['hidden'] = $data['hidden_str'];
    }

    // Get region settings.
    $regions_system = system_region_list(variable_get('theme_default', 'bartik'), REGIONS_VISIBLE);
    $regions_restricted = variable_get('blocks_placer_restricted_regions', array(
      'header', 'navigation', 'highlighted', 'help', 'footer',
    ));

    // Remove restricted regions from all system regions.
    $regions = array_flip(array_diff(array_flip($regions_system), $regions_restricted));

    $settings['blocks_placer']['regions'] = $regions;

    // Add js settings.
    drupal_add_js($settings, 'setting');

    // Add required libraries.
    drupal_add_library('system', 'ui.draggable');
    drupal_add_library('system', 'ui.sortable');

    // Attach module js and CSS and the jQuery UI multiselect files.
    $path_jumlib = variable_get('blocks_placer_jumlib_path', 'sites/all/libraries/jquery_ui_multiselect');
    $path_module = drupal_get_path('module', 'blocks_placer');

    // Add the blocks_placer js and css files.
    $form['#attached'] = array(
      'js' => array(
        array('data' => $path_jumlib . '/js/ui.multiselect.js'),
        array('data' => $path_module . '/js/blocks-placer.js'),
      ),
      'css' => array(
        array('data' => $path_jumlib . '/css/ui.multiselect.css'),
        array('data' => $path_module . '/css/blocks-placer.css'),
      )
    );

  }
}


/**
 * Implements a custom validation handler for node forms.
 */
function blocks_placer_custom_validate($node, $form) {
  // TODO: Consider validate submitted data.
  // Form data could be incorrect if the form fields has been manipulated.
}


/**
 * Implements a custom submit handler for node forms.
 *
 * Responsible for inserting block data as js settings for the
 * form UI functions and into the node object for the presave function.
 */
function blocks_placer_custom_submit($node, $form) {

  $blocks = array();
  foreach ($form['values']['blocks_placer_blocks'][LANGUAGE_NONE] as $block) {
    $block_id = 'blocks_placer-block-' . $block['target_id'];
    $submitted_value = isset($form['input'][$block_id]) ? $form['input'][$block_id] : '';
    $values = explode(',', $submitted_value);

    if (isset($values[0]) && isset($values[1])) {
      $blocks[$values[0]]['region'] = $values[1];
    }
  }

  // Regions settings.
  $regions = $form['input']['blocks_placer-regions'];
  $settings['blocks_placer']['hidden'] = $regions;

  // Add block info as js settings.
  $settings['blocks_placer']['blocks'] = $blocks;
  drupal_add_js($settings, 'setting');

  // Add data to the node object to be passed along to
  // hook_node_insert() and hook_node_update().
  $form['node']->blocks_placer = array(
    'hidden' => $regions,
    'blocks' => $blocks,
  );

}


/**
 * Implements hook_node_insert().
 */
function blocks_placer_node_insert($node) {
  blocks_placer_save($node);
}


/**
 * Implements hook_node_update().
 */
function blocks_placer_node_update($node) {
  blocks_placer_save($node);
}


/**
 * Saves bean block data to the blocks_placer table.
 *
 * @param object $node
 * $node->nid and $node->blocks_placer are required.
 */
function blocks_placer_save($node) {

  if ($node->nid && isset($node->blocks_placer)) {
    $blocks = $node->blocks_placer['blocks'];
    $hidden = $node->blocks_placer['hidden'];


    // Delete all records with 'nid' for node updates.
    if (empty($node->is_new)) {
      $deleted = db_delete('blocks_placer')->condition('nid', $node->nid)->execute();
    }

    // Build array with rows to insert.
    $rows = array();
    foreach ($blocks as $bid => $block) {
      if (is_numeric($bid) && !empty($block['region'])) {
        $rows[] = array(
          'nid'      => $node->nid,
          'bid'      => $bid,
          'region'   => $block['region'],
        );
      }
    }

    // Add regions to rows.
    // All entries with bid 0 is a hidden region.
    $regions = explode('||', trim($hidden, '|'));
    foreach ($regions as $key => $region) {
      if (!empty($region)) {
        $rows[] = array(
          'nid'      => $node->nid,
          'bid'      => 0,
          'region'   => $region,
        );
      }
    }

    // Insert new records for nid.
    if (is_array($rows)) {
      $query = db_insert('blocks_placer')->fields(array('nid', 'bid', 'region'));

      foreach ($rows as $record) {
        $query->values($record);
      }

      $query->execute();
    }

  }
}


/**
 * Implements hook_page_build().
 *
 * Add the node-level bean blocks to specified region, and remove any duplicate
 * blocks that might already be defined.
 */
function blocks_placer_page_build(&$page) {

  global $theme;

  $item = menu_get_item();
  $node = menu_get_object();
  $theme_default = variable_get('theme_default', 'bartik');

  // Check if we have the block reference field.
  // Also make sure that we are on the default theme, and not an admin theme.
  if (isset($node->blocks_placer_blocks) && $theme == $theme_default) {

    // ID's of global blocks to render before the bean blocks.
    $topmost = variable_get('blocks_placer_topmost', array('menu_block_1', 'system_navigation', 'system_main'));

    // Get referenced bean blocks.
    $beans = field_view_field('node', $node, 'blocks_placer_blocks', array('type' => 'entityreference_entity_view'));

    // Fetch additional block and region data.
    $data = blocks_placer_load($node->nid);

    // Check if there are any bean blocks assigned.
    $regions = array();
    if (isset($beans['#items'])) {

      // Render each block and place it in specified region.
      foreach ($beans['#items'] as $k => $bean) {
        if (isset($bean['entity']->delta)) {

          // In case saved blocks doesn't match assigned blocks.
          $bid = $bean['entity']->bid;
          $bean_region = isset($data['blocks'][$bid]) ? $data['blocks'][$bid]->region : FALSE;

          if ($bean_region) {
            // Render the block.
            $block = block_load('bean', $bean['entity']->delta);
            $block->region = $bean_region; // Give the block the correct region info.
            $block_renderable = _block_get_renderable_array(_block_render_blocks(array($block)));
            $block_rendered = drupal_render($block_renderable);

            // Make sure region exists.
            if (!isset($regions[$bean_region])) $regions[$bean_region] = '';

            $regions[$bean_region] .= $block_rendered;
          }
        }
      }


      // Handle each region's block output (only regions with blocks).
      foreach ($regions as $region => $output) {

        // If the region is overridden, empty it, but keep 'topmost' blocks.
        if (isset($data['hidden'][$region])) {
          $topmost_blocks = '';

          // Handle 'topmost' blocks.
          if (is_array($topmost)) {
            foreach ($topmost as $block_id) {
              if (isset($page[$region][$block_id])) {
                $topmost_blocks[$block_id] = $page[$region][$block_id];
              }
            }
          }

          // Do not empty the content region on the edit page, naturally.
          if ($region == 'content' && arg(2) != 'edit') {
            $page[$region] = '';
          }

          $page[$region] = $topmost_blocks;

        }
        // The region is not overridden, so just remove duplicate blocks.
        else {
          foreach ($beans['#items'] as $k => $bean) {
            unset($page[$region]['bean_' . $bean['entity']->delta]);
          }
        }

        // Set the weight for 'topmost' blocks.
        if (is_array($topmost)) {
          foreach ($topmost as $block_id) {
            if (isset($page[$region][$block_id])) {
              $page[$region][$block_id]['#weight'] += -1000;
            }
          }
        }

        // Finally, add the block data to the region.
        $page[$region]['beans']['#markup'] = $output;
        $page[$region]['beans']['#weight'] = variable_get('blocks_placer_block_weight', -500);
        $page[$region]['#sorted'] = FALSE;
      }

    }

    // Iterate $page regions and check if any regions should be removed.
    foreach ($page as $region => $null) {
      // Also make sure there are no bean blocks assigned.
      if (isset($data['hidden'][$region]) && empty($page[$region]['beans'])) {
        unset($page[$region]);
      }
    }

  } // end block assignment handling.


  // Handle region demo page.
  if ($item['access'] && $item['path'] == 'blocks_placer/region-demo') {
    $regions_all = system_region_list($theme, REGIONS_VISIBLE);
    $regions_exclude = variable_get('blocks_placer_restricted_regions', '');

    foreach ($regions_all as $rm => $ro) {

      $content = '';

      // Only include available regions.
      if (!isset($regions_exclude[$rm])) {
        $page[$rm] = array(
          '#markup' => '<div class="blocks_placer-demo-region">' . $regions_all[$rm] . '</div>' . $content
        );
      }
      else {
        // Remove regions which are not available.
        unset($page[$rm]);

        // Display unavailable regions as empty.
        // Note: Might want to make this an admin setting.
        //$page[$rm] = array('#markup' => '<div class="blocks_placer-demo-region-empty">&nbsp;</div>' . $content);
      }

    }
  }


  // Add config link to bean admin page (a bit hackish but it works).
  if ($item['access'] && $item['path'] == 'admin/content/blocks') {
    if (isset($page['content']['system_main']['bean_content']['#rows']) && is_array($page['content']['system_main']['bean_content']['#rows'])) {
      foreach ($page['content']['system_main']['bean_content']['#rows'] as $key => $bean) {
        $bean_id = $page['content']['system_main']['bean_content']['#rows'][$key]['title']['data']['#href'];
        $bean_id = str_replace('block/', '', $bean_id);
        $page['content']['system_main']['bean_content']['#rows'][$key]['operations']['data']['#links']['config'] = array(
          'title' => 'configure',
          'href' => 'admin/structure/block/manage/bean/' . $bean_id . '/configure',
          'query' => drupal_get_destination(),
        );
      }
    }
  }

}


/**
 * Implements hook_theme_registry_alter().
 */
function blocks_placer_theme_registry_alter(&$theme_registry) {
  // Specify a custom function for the form_element_label theming.
  $theme_registry['blocks_placer_form_element_label'] = $theme_registry['form_element_label'];

  // Override the field labels 'function' key.
  $theme_registry['form_element_label']['function'] = 'blocks_placer_theme_form_element_label';
}


/**
 * Replacement for core theme_form_element_label function.
 *
 * @param Array $variables
 *   An array containing an element.
 */
function blocks_placer_theme_form_element_label($variables) {

  $help_output = '';

  // Check if we have the correct field.
  if (isset($variables['element']['#field_name']) && $variables['element']['#field_name'] == 'blocks_placer_blocks') {
    $help_output = '<div class="description">' . blocks_placer_get_help('blocks_placer_blocks') . '</div>';
  }

  // Pass element through the theme hook.
  return theme('blocks_placer_form_element_label', $variables) . $help_output;
}


/**
 * Returns help text for given field.
 *
 * @param string $name  Machine name of field.
 */
function blocks_placer_get_help($name) {
  switch ($name) {
    case 'blocks_placer_blocks':
      $helptext =
        t('This tool allows you to modify the blocks that will be displayed on this page. Locate your block in the right panel below and double-click the name or click the plus sign (+) to add it to this page.') .
        '<br><br>' .
        l(t('Open region preview.'), 'blocks_placer/region-demo', array('attributes' => array('target' => '_blank')));
      break;
    default:
      $helptext = '';
      break;
  }
  return $helptext;
}


/**
 * Implements hook_field_widget_form_alter().
 */
function blocks_placer_field_widget_options_select_form_alter(&$element, &$form_state, $context) {
  if ($context['instance']['field_name'] == 'blocks_placer_blocks' && $context['field']['cardinality'] != 1) {

    // Grab the correctly ordered selected options values.
    $i = 0;
    $options = array();
    foreach ($context['items'] as $item) {
      $options[(string)$item['target_id']] = NULL;
      $i++;
    }

    // Flatten the original all values array to remove Bean type option groups.
    // Also add Bean type for multiple types, or remove the title for a single Bean type.
    $options_flattened = array();
    foreach ($element['#options'] as $k => $v) {
      // Remove the "- None -" option.
      if ($k == '_none') continue;

      if (is_array($v)) {
        foreach ($v as $kk => &$vv) {
          $vv = ' (' . $k . ')';
        }
        $options_flattened += $v;
      }
      else {
        $options_flattened[$k] = '';
      }
    }

    // Merge arrays fixing sort order.
    $options = $options + $options_flattened;

    // Update missing values.
    foreach ($options as $bid => &$option) {
      $bean = bean_load($bid);
      $label = htmlentities($bean->label);
      // Set label and bean type (if multiple types).
      $option = $label . $options_flattened[$bid];
    }

    $element['#options'] = $options;
  }
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function blocks_placer_form_node_type_form_alter(&$form, &$form_state) {

  // Define field set in additional settings group
  $form['blocks_placer_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Blocks Placer'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#weight' => 10,
    '#group' => 'additional_settings',
    '#attached' => array(
      'js' => array(drupal_get_path('module', 'blocks_placer') . '/js/system.js'),
    ),
  );

  // Set default checkbox value to TRUE if the field exists.
  $default_value = (bool) field_info_instance('node', 'blocks_placer_blocks', $form['#node_type']->type);

  // Add checkbox.
  $form['blocks_placer_settings']['blocks_placer_enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enabled'),
    '#description' => t('Enable Blocks Placer for this content type.'),
    '#default_value' => $default_value,
  );

  // Add submit hook to add/remove field for this content type.
  $form['#submit'][] = 'blocks_placer_node_form_submit';

}


/**
 * Custom submit function for the node form.
 * Removes or adds the blocks_placer_blocks field instance based on selection.
 */
function blocks_placer_node_form_submit($form, &$form_state) {

  // Check if setting was enabled or disabled.
  if (isset($form_state['values']['blocks_placer_enabled']) && $form_state['values']['blocks_placer_enabled']) {
    blocks_placer_field_add($form_state['values']['type']);
  }
  else {
    blocks_placer_field_remove($form_state['values']['type']);
  }
}


/**
 * Creates an instance of the blocks_placer_blocks field on a bundle, and also
 * creates the field if it does not previously exist.
 *
 * @param string $type  Node type machine name/bundle.
 */
function blocks_placer_field_add($type) {

  // Field config.
  $field = array(
    'active' => 1,
    'cardinality' => -1,
    'deleted' => 0,
    'entity_types' => array(),
    'field_name' => 'blocks_placer_blocks',
    'foreign keys' => array(
      'bean' => array(
        'columns' => array(
          'target_id' => 'bid',
        ),
        'table' => 'bean',
      ),
    ),
    'indexes' => array(
      'target_id' => array(
        0 => 'target_id',
      ),
    ),
    'locked' => 0,
    'module' => 'entityreference',
    'settings' => array(
      'handler' => 'base',
      'handler_settings' => array(
        'behaviors' => array(
          'views-select-list' => array(
            'status' => 0,
          ),
        ),
        'sort' => array(
          'direction' => 'ASC',
          'property' => 'label',
          'type' => 'property',
        ),
        'target_bundles' => array(
          'standard' => 'standard',
        ),
      ),
      'target_type' => 'bean',
    ),
    'translatable' => 0,
    'type' => 'entityreference',
  );

  // Instance config.
  $instance = array(
    'bundle' => $type,
    'default_value' => NULL,
    'deleted' => 0,
    'description' => '',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 8,
      ),
      'teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'node',
    'fences_wrapper' => 'div',
    'field_name' => 'blocks_placer_blocks',
    'label' => 'Blocks Placer',
    'required' => 0,
    'settings' => array(
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'options',
      'settings' => array(),
      'type' => 'options_select',
      'weight' => 0,
    ),
  );

  // Create the field if it doesn't exist.
  if (!field_info_field('blocks_placer_blocks')) {
    field_create_field($field);
  }

  // Create instance if doesn't exist on this bundle.
  if (!field_info_instance('node', 'blocks_placer_blocks', $type)) {
    field_create_instance($instance);
  }

}


/**
 * Removes the instance of the blocks_placer_blocks field from a bundle, but
 * does not the delete the field itself.
 *
 * @param string $type  Node type machine name/bundle.
 *
 * TODO: Consider removing the instances in the blocks_placer db table.
 */
function blocks_placer_field_remove($type) {
  // Check if the field exists.
  if ($instance = field_info_instance('node', 'blocks_placer_blocks', $type)) {
    field_delete_instance($instance, FALSE);
  }
}
