<?php

/**
 * @file
 * Install, update, and uninstall functions.
 */


/**
 * Implements hook_schema().
 */
function blocks_placer_schema() {
  $schema['blocks_placer'] = array(
    'description' => 'The base table for nodes.',
    'fields' => array(
      'nid' => array(
        'description' => 'The primary identifier for a node.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'bid' => array(
        'description' => 'The primary identifier for a block. Zero if region.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'region' => array(
        'description' => 'In which region the block is placed, or region to hide if bid is zero.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'indexes' => array(
      'nid' => array('nid'),
    ),
  );

  return $schema;
}


/**
 * Implements hook_install().
 */
function blocks_placer_install() {

  // Machine name of global blocks to render first in regions.
  variable_set('blocks_placer_topmost', array(
    'menu_block_1',
    'system_navigation',
    'system_main',
  ));

  // Regions not accessible for block placements for certain roles.
  variable_set('blocks_placer_restricted_regions', array(
    'header'      => 'header',
    'navigation'  => 'navigation',
    'highlighted' => 'highlighted',
    'help'        => 'help',
    'footer'      => 'footer',
  ));

}


/**
 * Implements hook_enable().
 */
function blocks_placer_enable() {

  // Updated module weight.
  db_update('system')
    ->fields(array(
      'weight' => 666,
    ))
    ->condition('type', 'module')
    ->condition('name', 'blocks_placer')
    ->execute();

}


/**
 * Implements hook_disable().
 */
function blocks_placer_disable() {
  // Remove the field from all bundles.
  foreach (field_info_instances() as $bundles) {
    foreach ($bundles as $instances) {
      foreach ($instances as $instance) {
        if ($instance['field_name'] == 'blocks_placer_blocks') {
          // Removes the field, but does not delete it.
          field_delete_instance($instance, FALSE);
          drupal_set_message(t('Removed field <em>@fieldname</em> from <em>@bundle</em>.', array(
            '@fieldname' => $instance['field_name'],
            '@bundle'    => $instance['bundle'],
          )));
        }
      }
    }
  }
}


/**
 * Implements hook_uninstall().
 */
function blocks_placer_uninstall() {
  // Delete variables.
  variable_del('blocks_placer_topmost');
  variable_del('blocks_placer_restricted_regions');
  variable_del('blocks_placer_block_weight');
  variable_del('blocks_placer_jumlib_path');

  // Delete the field.
  field_delete_field('blocks_placer_blocks');
}


//--- Updates ------------------------------------------------------------------

/**
 * Update Blocks Placer field settings.
 */
function blocks_placer_update_7001(&$sandbox = NULL) {
  // Remove JUM field settings.
  foreach (field_info_instances() as $bundles) {
    foreach ($bundles as $instances) {
      foreach ($instances as $instance) {
        if ($instance['field_name'] == 'blocks_placer_blocks') {
          // Check if the field has JUM settings.
          if (isset($instance['settings']['jquery_ui_multiselect'])) {
            // Remove setting and update field.
            unset($instance['settings']['jquery_ui_multiselect']);
            field_update_instance($instance);
          }
        }
      }
    }
  }
  drupal_set_message(t('The jQuery UI Multiselect module is no longer required by the Blocks Placer module and can be uninstalled along with its dependencies if not used elsewhere.'));
  return t('Update finished successfully. The jQuery UI Multiselect module is no longer required by the Blocks Placer module.');
}
