<?php

/**
 * @file at_cm.module
 */

require_once dirname(__FILE__) . '/at_cm.hooks.inc';

/**
 * Shortcuts to services, support type hints.
 */
class AT_CM
{

    /**
     * Get cm.general service.
     *
     * @return CS_REST_General
     */
    public static function getGeneral()
    {
        return at_container('cm.general');
    }

    /**
     * Get cm.admins service.
     *
     * @return CS_REST_Administrators
     */
    public static function getAdministrators()
    {
        return at_container('cm.cm.administrators');
    }

    /**
     * Get cm.campaigns service.
     *
     * @return CS_REST_Campaigns
     */
    public static function getCampaigns()
    {
        return at_container('cm.campaigns');
    }

    /**
     * Get cm.clients service.
     *
     * @return CS_REST_Clients
     */
    public static function getClients()
    {
        return at_container('cm.clients');
    }

    /**
     * Get cm.lists service.
     *
     * @return CS_REST_Lists
     */
    public static function getLists()
    {
        return at_container('cm.lists');
    }

    /**
     * Get cm.people service.
     *
     * @return CS_REST_People
     */
    public static function getPeople()
    {
        return at_container('cm.people');
    }

    /**
     * Get cm.segments service.
     *
     * @return CS_REST_Segments
     */
    public static function getSegments()
    {
        return at_container('cm.segments');
    }

    /**
     * Get cm.subscribers service.
     *
     * @return CS_REST_Subscribers
     */
    public static function getSubscribers()
    {
        return at_container('cm.subscribers');
    }

    /**
     * Get cm.templates service.
     *
     * @return CS_REST_Templates
     */
    public static function getTemplates()
    {
        return at_container('cm.templates');
    }

}

function at_cm_lists() {
    return at_cache('at_cm:lists', function() {
        $sgeneral = AT_CM::getGeneral();
        $sclient = AT_CM::getClients();
        $options = array();
        $lists = array();

        foreach ($sgeneral->get_clients()->response as $client) {
            $sclient->set_client_id($client->ClientID);

            $lists[$client->ClientID]['client'] = $client;
            $lists[$client->ClientID]['lists'] = array();

            foreach ($sclient->get_lists()->response as $list) {
                $lists[$client->ClientID]['lists'][] = $list;
            }
        }

        return $lists;
    });
}

/**
 * Add a contact to a list.
 *
 * @param  string $list_id
 * @param  string $mail
 * @param  string $name
 */
function at_cm_list_add_contact($list_id, $mail, $name = '') {
    $service_subscriber = AT_CM::getSubscribers();
    $service_subscriber->set_list_id($list_id);

    $response = $service_subscriber->add($subscriber = array(
        'EmailAddress' => $mail,
        'Name' => !empty($name) ? filter_xss_admin($name) : '',
    ));

    if ($response->http_status_code == 201) {
        watchdog(
          'at_cm',
          'Subcribed %mail to %list',
          array('%mail' => $mail, '%list' => $list_id),
          WATCHDOG_INFO
        );
        return TRUE;
    }
    else {
        watchdog(
          'at_cm',
          'Failed to subcribed %mail to %list',
          array('%mail' => $mail, '%list' => $list_id),
          WATCHDOG_ERROR
        );
        return FALSE;
    }
}

/**
 * Helper function to check list ID valid.
 *
 * @param  string $list_id
 * @return boolean
 */
function at_cm_list_is_valid($list_id) {
    foreach (at_cm_lists() as $client_id => $client_data) {
        foreach ($client_data['lists'] as $list) {
            if ($list_id === $list->ListID) {
                return TRUE;
            }
        }
    }
    return FALSE;
}

/**
 * Generate options for List select widget
 */
function at_cm_lists_options() {
  foreach (at_cm_lists() as $client_id => $client_data) {
    foreach ($client_data['lists'] as $list) {
      $options[$list->ListID] = "{$client_data['client']->Name} â€º {$list->Name}";
    }
  }
  return $options;
}
