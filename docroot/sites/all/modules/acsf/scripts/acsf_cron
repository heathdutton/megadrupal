#!/usr/bin/php
<?php

/**
 * @file acsf_cron
 * This script is responsible for running cron on a set of sites.
 *
 * Usage:
 *   acsf_cron [command] [options]
 *
 *   Operations:
 *     --exec [drush command] - execute the specified Drush command.
 *     --version              - outputs the script version number and exits
 *
 *   Options:
 *     site-file    - The file containing the sites to run cron on.
 *     env          - The hosting environment.
 *     site         - The hosting site.
 *     drush        - How drush should be invoked - defaults to '\drush6'.
 *     drush-cache  - The drush cache directory
 *
 * Example:
 *   acsf_cron --exec "cron" --site-file=/mnt/tmp/testsites.txt
 *   This executes drush cron on each of the sites enumerated in the
 *   testsites.txt file.
 */

/**
 * Class AcsfCronWrapper.
 *
 * This class is responsible for invoking drush commands on a large set of
 * sites.  Mostly it is used to invoke drush cron.
 */
class AcsfCronWrapper {
  /**
   * The version of the cron wrapper.
   * @var string
   */
  private $version = '1';

  /**
   * The hosting site.
   * @var string
   */
  private $site = NULL;

  /**
   * The hosting environment.
   * @var string
   */
  private $env = NULL;

  /**
   * The process id.
   * @var string
   */
  private $siteFile = NULL;

  /**
   * The drush cache directory.
   * @var string
   */
  private $drushCache = NULL;

  /**
   * Initializes a new AcsfCronWrapper object.
   *
   * @param $options
   *   The options argument returned from _acsf_cron_parse_command_line().
   */
  public function __construct($options) {
    if (!empty($options->env)) {
      $this->env = $options->env;
    }
    if (!empty($options->site)) {
      $this->site = $options->site;
    }
    if (!empty($options->site_file)) {
      $this->siteFile = $options->site_file;
    }
    if (!empty($options->drush_cache)) {
      $this->drushCache = $options->drush_cache;
    }

  }

  /**
   * Executes the specified drush command.
   *
   * @param string $drush
   *   How drush should be invoked.
   * @param string $command
   *   The drush command to be executed.
   *
   * @return int
   *   The exit code.
   */
  public function exec($drush, $command) {
    try {
      $sites = $this->getSites();
      $failed_sites = $this->execOnSites($drush, $command, $sites);
      if (!empty($failed_sites)) {
        // Try the sites that failed one more time.
        $failed_sites = $this->execOnSites($drush, $command, $failed_sites);
      }
      if (!empty($failed_sites)) {
        // Some sites failed.  Enumerate those for the caller and indicate
        // failure.
        print(implode("\n", $failed_sites));
        return 1;
      }
      return 0;
    }
    catch (Exception $e) {
    }
    return -1;
  }

  /**
   * Executes the specified drush command.
   *
   * @param string $drush
   *   How drush should be invoked.
   * @param string $command
   *   The drush command to be executed.
   * @param array $sites
   *   The sites to run the drush command on.
   *
   * @return array
   *   Sites on which the command failed.
   */
  private function execOnSites($drush, $command, array $sites) {
    $failed_runs = array();
    try {
      foreach ($sites as $site) {
        $drush_command = $this->renderDrushCommand($drush, $command, $site);
        $output = array();
        $exec_result = -1;
        exec(sprintf('%s > /dev/null 2>&1', $drush_command), $output, $exec_result);
        if ($exec_result !== 0) {
          $failed_runs[] = $site;
        }
      }
    }
    catch (Exception $e) {
      $failed_runs = $sites;
    }
    return $failed_runs;
  }

  /**
   * Constructs a drush command string for the specified site.
   *
   * @param string $drush
   *   The string that identifies how drush should be invoked.
   * @param string $command
   *   The drush command to run on the site.
   * @param string $site
   *   The site domain name.
   *
   * @return string
   *   The fully formed drush command.
   */
  private function renderDrushCommand($drush, $command, $site) {
    $result = '';
    if (!empty($this->drushCache)) {
      $result .= sprintf('CACHE_PREFIX=%s ', $this->drushCache);
    }
    $result .= sprintf('%s --root=/mnt/www/html/%s.%s/docroot -l %s %s',
      $drush, $this->site, $this->env, $site, $command);
    return $result;
  }

  /**
   * Returns the version string.
   *
   * @return string
   *   The version.
   */
  public function getVersion() {
    return $this->version;
  }

  /**
   * Reads the site file and returns an array of sites to run cron on.
   *
   * @return array
   *   The sites.
   *
   * @throws Exception
   *   If the site file could not be read.
   */
  private function getSites() {
    if (file_exists($this->siteFile)) {
      $sites = file($this->siteFile, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
      if ($sites === FALSE) {
        throw new Exception(sprintf('Unable to read site file %s.', $this->siteFile));
      }
      return $sites;
    }
    throw new Exception(sprintf('Site file %s does not exist.', $this->siteFile));
  }

}

/**
 * This is the main entry point of the script.
 *
 * This function dispatches control to an appropriate function
 * based on the command line options.
 */
function acsf_cron_main() {
  $options = _acsf_cron_parse_command_line();

  switch ($options->operation) {
    case 'exec':
      _acsf_cron_exec($options);
      break;

    case 'version':
      _acsf_cron_version($options);
      break;

    default:
      printf("Unknown command %s\n", $options->command);
  }
}

/**
 * Parses the command line, returning an object that provides the options.
 *
 * @return object
 *   An object that contains all options that were specified on the command
 *   line.
 *
 * @throws Exception
 *   If an illegal option was provided.
 */
function _acsf_cron_parse_command_line() {
  $long_options  = array(
    // Operations:
    'exec:',          // Execute a command
    'version',        // Return the version string.

    // Options:
    'env:',           // Environment
    'site:',          // Site
    'site-file:',     // File containing the sites to run the drush command on.
    'drush:',         // How drush should be invoked.
    'drush-cache:',   // The drush cache directory.
  );
  $options = getopt('', $long_options);
  $result = new stdClass();
  $result->drush = '\drush6';

  foreach ($options as $name => $value) {
    switch ($name) {
      // Operations that require no argument.
      case 'version':
        $result->operation = $name;
        break;

      case 'exec':
        $result->operation = $name;
        $result->command = $value;
        break;

      case 'env':
        $result->env = $value;
        break;

      case 'site':
        $result->site = $value;
        break;

      case 'site-file':
        $result->site_file = $value;
        break;

      case 'drush':
        $result->drush = $value;
        break;

      case 'drush-cache':
        $result->drush_cache = $value;
        break;

      default:
        throw new Exception("Option $name not available");
    }
  }
  if (empty($result->operation)) {
    throw new Exception("Missing operation (--exec, --version).");
  }
  return $result;
}

/**
 * Invokes the specified command.
 *
 * This function exits with the same exit code as the command that is being
 * executed.
 *
 * @param $options
 *   The options argument returned from _acsf_cron_parse_command_line().
 */
function _acsf_cron_exec($options) {
  $wrapper = new AcsfCronWrapper($options);
  $exit_code = $wrapper->exec($options->drush, $options->command);
  exit($exit_code);
}

/**
 * Returns the version string.
 *
 * @param $options
 *   The options argument returned from _acsf_cron_parse_command_line().
 */
function _acsf_cron_version($options) {
  $wrapper = new AcsfCronWrapper($options);
  print($wrapper->getVersion());
  exit(0);
}

acsf_cron_main();
