#!/usr/bin/env php
<?php

/**
 * @file acsf_ssh
 * Provides an ssh command wrapper to execute commands and capture output.
 *
 * This script makes it far easier to perform logging on all calls that are
 * executed by the Site Factory. It also makes it possible to retrieve the
 * command exit code when the command is being called asynchronously.
 *
 * Usage:
 *   acsf_ssh <operation> [options]
 *
 *   Operations:
 *     --exec [unix command] - execute the specified Unix command.
 *     --stdout              - Displays the output from the command.
 *     --stderr              - Displays the error output from the command.
 *     --exit-code           - Displays the exit code from the command.
 *     --close               - Does any required cleanup (logs, etc.)
 *     --is-running          - Indicates whether the command is running or not.
 *
 *   Options:
 *     silent       - Don't display any output.  Good for asynchronous calls.
 *     pid          - The process id - required for checking in on asynchronous
 *                    calls.
 *     env          - The environment.
 *     site         - The site.
 *     no-logs      - Do not retain log data.
 *     start-time   - The process start time.
 *     copy-stdout  - The path to which stdout will be copied.  This is useful
 *                    in cases where you would like to redirect the output to
 *                    a file.
 *     data         - Serialized PHP data regarding the caller.
 *     report       - Report back upon process completion.
 *     encoded      - The unix command in the exec is base64 encoded.
 *
 * Examples:
 *   acsf_ssh --exec "ls -l /usr" --silent
 *   This performs an ls of the /usr directory with no output at all.
 *
 *   acsf_ssh --stdout --pid <proc id>
 *   This displays the output of the command associated with the pid.
 *
 *   acsf_ssh --close --pid <proc id>
 *   This cleans up log files associated with the pid.
 *
 *   acsf_ssh --exec "ls -l /usr" --no-logs
 *   This performs the ls, displaying the result to stdout and exits with the
 *   same exit code as the associated ls command.  This is a good option for
 *   synchronous use unless the error log might be important.
 *
 *   acsf_ssh --is-running --pid <proc id> --start-time <unix timestamp>
 *   Indicates whether the specified process is still running.  The start time
 *   option is required to ensure the requested process can be identified.
 *   The process identifiers are reused, so it would otherwise be possible
 *   to see the wrong process and assume it is still running.
 */

/**
 * Class AcsfSshWrapper
 *
 * This class is the interface for executing remote commands from the Site
 * Factory.
 */
class AcsfSshWrapper {
  /**
   * The version of the ssh wrapper.
   * @var string
   */
  private $version = '2';

  /**
   * The hosting site.
   * @var string
   */
  private $site = NULL;

  /**
   * The hosting environment.
   * @var string
   */
  private $env = NULL;

  /**
   * The process id.
   * @var int
   */
  private $pid = NULL;

  /**
   * The process start time.
   *
   * This is used to help identify the correct process.  Process ids can be
   * reused.
   * @var int
   */
  private $startTime = NULL;

  /**
   * The time when the command is executed.
   * @var int
   */
  private $execTime = NULL;

  /**
   * The time when the command finished.
   * @var int
   */
  private $completeTime = NULL;

  /**
   * The temporary directory in which process information will be stored.
   * @var string
   */
  private $temp_dir = '/mnt/tmp';

  /**
   * The maximum length of stdout that will be returned from getResult().
   * @var
   */
  private $max_stdout;

  /**
   * The maximum length of stderr that will be returned from getResult();
   * @var
   */
  private $max_stderr;

  /**
   * The path to which the stdout should be copied.
   * @var string
   */
  private $copy_stdout = NULL;

  /**
   * Initializes a new AcsfSshWrapper object.
   *
   * @param object $options
   *   The options argument returned from _acsf_ssh_parse_command_line().
   */
  public function __construct($options) {
    if (!empty($options->pid)) {
      $this->pid = $options->pid;
    }
    if (!empty($options->env)) {
      $this->env = $options->env;
    }
    if (!empty($options->site)) {
      $this->site = $options->site;
    }
    if (!empty($options->start_time)) {
      $this->startTime = $options->start_time;
    }
    if (!empty($options->max_stdout)) {
      $this->max_stdout = $options->max_stdout;
    }
    if (!empty($options->max_stderr_len)) {
      $this->max_stderr = $options->max_stderr;
    }
    if (!empty($options->copy_stdout)) {
      $this->copy_stdout = $options->copy_stdout;
    }
  }

  /**
   * Executes the specified command.
   *
   * @param string $command
   *   The Unix command to be executed.
   * @param bool $encoded_command
   *   Optional.  If FALSE then the $command will be taken as is. If TRUE then
   *   the $command will be assumed to contain a base64 encoded string.
   * @param bool $log
   *   Optional.  If FALSE, no log files will remain upon completion of
   *   the command.  This is not appropriate for commands that are
   *   executed asynchronously.
   * @param bool $silent
   *   Optional.  If TRUE, no output will be sent to stdout or stderr.
   * @param bool $report
   *   Optional.  If TRUE, a message will be sent back to the callback endpoint
   *   specified in the $data variable.
   * @param object $data
   *   Optional.  Data relating to the caller.
   *
   * @return int
   *   The exit code.
   */
  public function exec($command, $encoded_command = FALSE, $log = TRUE, $silent = FALSE, $report = FALSE, $data = NULL) {
    $this->pid = getmypid();

    if ($encoded_command) {
      $command = base64_decode($command);
    }

    // NOTE: You cannot append commands to this without breaking the exit code.
    $command = sprintf('%s > %s 2> %s', $command, $this->getLogFile('out'), $this->getLogFile('err'));

    $output = NULL;
    $exit_code = NULL;
    $this->execTime = time();
    exec($command, $output, $exit_code);
    file_put_contents($this->getLogFile('ret'), (string)$exit_code);
    $this->completeTime = time();

    if ($silent !== TRUE) {
      // The command was configured to provide output via stdout.  Write the
      // process id in front of the output; it will be removed on the Site
      // Factory side.
      $result = $this->getResult();
      print($result);
    }

    if (!empty($this->copy_stdout)) {
      $this->copyStdout();
    }

    // Report back to the Factory upon completion.
    if ($report && $data instanceof stdClass) {
      $data->pid = $this->pid;
      $data->start_time = $this->startTime;
      $data->source = 'sshResult';
      $data->result = addslashes(str_replace('\'', '"', $this->getResult()));
      $report_command = sprintf('AH_SITE_GROUP=%s AH_SITE_ENVIRONMENT=%s \drush6 --root=/var/www/html/%s.%s/docroot --include=%s report-complete-async-process --data=\'%s\' 2>&1 /dev/null',
        $this->site,
        $this->env,
        $this->site,
        $this->env,
        $data->acsf_path,
        serialize($data));

      $report_output = NULL;
      $report_exit_code = NULL;
      exec($report_command, $report_output, $report_exit_code);
    }

    if (!$log) {
      $this->removeLogFiles();
    }
    return $exit_code;
  }

  /**
   * Copies the stdout to a new file.
   *
   * If the parent directory does not exist, it will be created before the copy.
   */
  private function copyStdout() {
    $filename = $this->copy_stdout;
    $dir = dirname($filename);
    if (!file_exists($dir)) {
      mkdir($dir, 0777, TRUE);
    }
    copy($this->getLogFile('out'), $filename);
  }

  /**
   * Returns a result string with the process id, the stdout and stderr.
   *
   * @return string
   *   The result.
   */
  public function getResult() {
    $stdout = '';
    $stdout_file = $this->getLogFile('out');
    if (file_exists($stdout_file)) {
      $stdout = file_get_contents($this->getLogFile('out'));
    }
    if (!empty($stdout)) {
      $stdout = "\n" . $stdout;
    }
    $stdout = $this->truncateOutput($stdout, $this->max_stdout);
    $stderr = '';
    $stderr_file = $this->getLogFile('err');
    if (file_exists($stderr_file)) {
      $stderr = file_get_contents($stderr_file);
    }
    $stderr = $this->truncateOutput($stderr, $this->max_stderr);

    return sprintf("[{pid}:%d]\n[{stdout}:]%s\n[{stderr}:]%s\n[{exit_code}:%d]\n[{time}:%d]\n",
      $this->pid, $stdout, $stderr, $this->getExitCode(), $this->completeTime - $this->execTime);
  }

  /**
   * Indicates whether the process is still running.
   *
   * @return bool
   *   TRUE if the process is still running; FALSE if the process is not
   *   still running; NULL if it could not be determined.

   * @throws Exception
   *   If the process id or start time have not been provided.
   */
  public function isRunning() {
    try {
      $this->getExitCode();
      return FALSE;
    }
    catch (Exception $e) {
      // The log file has not been written or contains invalid data.
    }

    if (NULL === $this->pid) {
      throw new Exception('The process id must be specified.');
    }
    if (NULL === $this->startTime) {
      throw new Exception('The process start time must be specified.');
    }

    // Use the pid to determine if the process is still running.
    try {
      $command = sprintf('ps cp %s -opid,ppid,etime,comm', escapeshellarg($this->pid));
      $proc_data = array();
      exec($command, $proc_data, $ret);
    }
    catch (Exception $e) {
      // The command to get process data failed.
      return NULL;
    }

    // Parse the ps output.
    $now = time();
    $header_read = FALSE;
    foreach ($proc_data as $line) {
      $line = trim($line);
      if (empty($line)) {
        continue;
      }
      if (!$header_read) {
        try {
          $this->parseProcessHeader($line);
          $header_read = TRUE;
        }
        catch (Exception $e) {
          // The ps command failed to provide output that we understand.
          return NULL;
        }
      }
      else {
        try {
          $proc = $this->parseProcessInfo($line, $now);

          // Add a tolerance of 15 seconds as $proc->startTime is time() plus
          // The elapsed seconds reported by the process, which would always
          // round downward, even toward the end of a second, allowing possible
          // discrepancies between the reported elapsed seconds and the call to
          // time().
          if ($proc->pid == $this->pid && abs($proc->startTime - $this->startTime) < 15) {
            return TRUE;
          }
        }
        catch (Exception $e) {
          // The ps command failed to provide output that we understand.
          return NULL;
        }
      }
    }
    if ($header_read) {
      return FALSE;
    }
    else {
      // We didn't get a header even.  This could happen if we got an empty
      // string back.  An incomplete response does not indicate the process
      // terminated.
      return NULL;
    }
  }

  /**
   * Kills the process, if it is still running.
   *
   * @throws Exception
   */
  public function kill() {
    if (NULL === $this->pid) {
      throw new Exception('Cannot kill the process - the pid must be specified.');
    }

    // Make sure it is running or you could end up killing the wrong process.
    // The isRunning method verifies with the start time also.
    if ($this->isRunning()) {
      $command = sprintf('kill %s', escapeshellarg($this->pid));
      $output = array();
      exec($command, $output, $ret);
    }
  }

  /**
   * Returns the version string.
   *
   * @return string
   *   The version.
   */
  public function getVersion() {
    return $this->version;
  }

  /**
   * Returns the exit code for the associated process.
   *
   * Once the process has completed, the exit code can be  retrieved.
   * This is most helpful when running commands asynchronously because for
   * synchronous commands the exit code can be retrieved with no additional
   * calls.
   *
   * @return int
   *   The exit code.
   *
   * @throws Exception
   *   If the process has not completed or if the exit code is otherwise not
   *   available.
   */
  public function getExitCode() {
    $exit_log = $this->getLogFile('ret');
    if (file_exists($exit_log)) {
      $exit_code = trim(file_get_contents($exit_log));
      if (is_numeric($exit_code)) {
        return intval($exit_code);
      }
      throw new Exception(sprintf('Invalid exit code %s', $exit_code));
    }
    throw new Exception('Exit code not available.');
  }

  /**
   * Returns the log contents for the specified log.
   *
   * @param string $type
   *   The type of log to display.  Options are
   *   - 'out' for stdout,
   *   - 'err' for stderr,
   *   - 'ret' for the return code.
   *
   * @return string
   *   The log contents.
   *
   * @throws Exception
   *   If the specified log does not exist for the associated process.
   */
  public function getLog($type) {
    if (!in_array($type, array('out', 'err', 'ret'))) {
      throw new Exception(sprintf('Log type "%s" is not expected.', $type));
    }
    $log_file = $this->getLogFile($type);
    if (file_exists($log_file)) {
      $contents = file_get_contents($log_file);
      return $contents;
    }
    throw new Exception(sprintf('Log file %s does not exist.', $log_file));
  }

  /**
   * Removes all log files for the associated process.
   */
  public function removeLogFiles() {
    @unlink($this->getLogFile('out'));
    @unlink($this->getLogFile('err'));
    @unlink($this->getLogFile('ret'));
  }

  /**
   * Returns the log directory.
   *
   * @return string
   *   The log directory.
   *
   * @throws Exception
   *   If the log directory does not exist and cannot be created.
   */
  private function getLogDir() {
    $path = sprintf('%s/%s.%s/logs', $this->temp_dir, $this->site, $this->env);
    if (!file_exists($path)) {
      $result = mkdir($path, 0770, TRUE);
      if ($result != TRUE) {
        throw new Exception(sprintf('Failed to create log directory %s', $path));
      }
    }
    return $path;
  }

  /**
   * Gets the path to the specified log file.
   *
   * @param string $type
   *   The type of log file.  'out' for stdout; 'err' for stderr; 'ret' for the
   *   return value.
   *
   * @return string
   *   The log file path.
   *
   * @throws Exception
   *   If an unexpected type was provided or if the log path does not exist and
   *   cannot be created.
   */
  private function getLogFile($type = 'out') {
    if (!in_array($type, array('out', 'err', 'ret'))) {
      throw new Exception('$type must be one of "out", "err", or "ret"');
    }
    $path = sprintf('%s/%s.%s', $this->getLogDir(), $this->pid, $type);

    return $path;
  }

  /**
   * Parses the header information from a Unix 'ps' call.
   *
   * @param string $ps_line
   *   The first line of output from the ps call.
   *
   * @throws Exception
   *   If the format of the specified line of output does not match the expected
   *   header.
   */
  private function parseProcessHeader($ps_line) {
    // Linux format:
    // PID  PPID     ELAPSED COMMAND
    // 32451     1       46:51 php

    // Mac format:
    // PID  PPID ELAPSED COMM
    // 2050  2049   00:35 -bash
    $matches = array();
    if (1 !== preg_match('/^\s*(PID)\s+(PPID)\s+(ELAPSED)\s(COMM|COMMAND)\s*$/', $ps_line, $matches)) {
      throw new Exception(sprintf('Badly formed header from ps: %s', $ps_line));
    }
  }

  /**
   * Parses a single line of ps information and returns an object that matches.
   *
   * @param string $ps_line
   *   A single line of output from the ps command.
   * @param int $now
   *   The current time.
   *
   * @return stdClass
   *   An object with fields containing the data from the ps information.
   *
   * @throws Exception
   *   If the line cannot be parsed as ps data.
   */
  private function parseProcessInfo($ps_line, $now) {
    $result = NULL;
    $matches = array();
    if (1 === preg_match('/^\s*([0-9]+)\s+([0-9]+)\s+([^\s]+)\s(.+)$/', $ps_line, $matches)) {
      $result = new stdClass();
      $result->pid = $matches[1];
      $result->ppid = $matches[2];
      $result->etime = $matches[3];
      $result->comm = $matches[4];

      $elapsed_seconds = $this->convertTimeStringToElapsedSeconds($result->etime);
      $result->etimes = $elapsed_seconds;
      $result->startTime = $now - $result->etimes;
    }
    else {
      throw new Exception(sprintf('Bad ps output.  Should be from "ps -cU <user>' .
       ' -opid,ppid,etime,comm".  Line is %s', $ps_line));
    }
    return $result;
  }

  /**
   * Calculate the elapsed seconds given a time string from ps.
   *
   * The ps command will indicate elapsed time as a string.  This method parses
   * that string and converts it to the number of elapsed seconds.
   *
   * @param string $time_string
   *   The time string from invoking the ps command.
   *
   * @return int
   *   The elapsed seconds.
   */
  private function convertTimeStringToElapsedSeconds($time_string) {
    // This works by creating an array that contains all of the time components
    // in reverse (seconds, minutes, hours, days).  This is done because not all
    // of the time components will be present. We can then calculate the elapsed
    // time from the time components provided using the following conversion.
    $time_converter = array(
      1,            // seconds
      60,           // minutes
      60 * 60,      // hours
      24 * 60 * 60, // days
    );

    // Break each number out of the time string.
    $time = array();
    $token = strtok($time_string, '-: ');
    while ($token !== FALSE) {
      $time[] = intval($token);
      $token = strtok('-: ');
    }
    $time = array_reverse($time);

    // Convert the time components to elapsed seconds.
    $elapsed_seconds = 0;
    for ($i = 0; $i < count($time) && $i < count($time_converter); $i++) {
      $elapsed_seconds += ($time[$i] * $time_converter[$i]);
    }
    return $elapsed_seconds;
  }

  /**
   *  Truncates output such that it does not exceed the specified length.
   *
   * @param string $string
   *   The string to truncate.
   * @param int $max_length
   *   The maximum desired string length.
   *
   * @return string
   *   If the specified string is larger than the maximum length, the truncated
   *   string will be returned.  Otherwise the original string is returned.
   */
  private function truncateOutput($string, $max_length) {
    $string = trim($string);
    if ($max_length > 0 && !empty($string) && is_string($string) && strlen($string) > $max_length) {
      $first_half = ceil($max_length / 2);
      $last_half = $max_length - $first_half;

      // We need to be cautious to break on multibyte character boundaries. So
      // we prefer to use the mbstring functions if available.
      if (extension_loaded('mbstring')) {
        $encoding = mb_detect_encoding($string);
        $length = mb_strlen($string, $encoding);
        $first = mb_substr($string, 0, $first_half, $encoding);
        $last = mb_substr($string, -$last_half, $length, $encoding);
      }
      else {
        $first = substr($string, 0, $first_half);
        $last = substr($string, -$last_half);
      }
      $string = sprintf('%s...%s', $first, $last);
    }
    return $string;
  }

}

/**
 * This is the main entry point of the script.
 *
 * This function dispatches control to an appropriate function d on the command
 * line options.
 */
function acsf_ssh_main() {
  $options = _acsf_ssh_parse_command_line();

  switch ($options->operation) {
    case 'close':
      _acsf_ssh_close($options);
      break;

    case 'exit-code':
      _acsf_ssh_get_exit_code($options);
      break;

    case 'exec':
      _acsf_ssh_exec($options);
      break;

    case 'is-running':
      _acsf_ssh_is_running($options);
      break;

    case 'kill':
      _acsf_ssh_kill($options);
      break;

    case 'result':
      _acsf_ssh_result($options);
      break;

    case 'stdout':
      _acsf_ssh_get_log($options, 'out');
      break;

    case 'stderr':
      _acsf_ssh_get_log($options, 'err');
      break;

    case 'version':
      _acsf_ssh_version($options);
      break;

    default:
      printf("Unknown command %s\n", $options->command);
  }
}

/**
 * Parses the command line, returning an object that provides the options.
 *
 * @return object
 *   An object that contains all options that were specified on the command
 *   line.
 *
 * @throws Exception
 *   If an illegal option was provided.
 */
function _acsf_ssh_parse_command_line() {
  $long_options  = array(
    // Operations:
    'exec:',          // Execute a command.
    'exit-code',      // Get the exit code.
    'close',          // Free resources associated with this command.
    'is-running',     // Indicate whether the process is still running.
    'kill',           // Kill the process if it is still running.
    'result',         // Get the result from the process.
    'stdout',         // Get stdout.
    'stderr',         // Get stderr.
    'version',        // Return the version string.

    // Options:
    'env:',           // Environment.
    'no-logs',        // Don't log stdout, stderr, or the return code.
    'pid:',           // The process id.
    'site:',          // Site.
    'silent',         // Redirect stdout and stderr.
    'start-time:',    // The process start time.
    'max-output:',    // The maximum length of output (both stdout and stderr).
    'max-stdout:',    // The maximum length of stdout.
    'max-stderr:',    // The maximum length of stderr.
    'copy-stdout:',   // The path to which stdout will be copied.
    'data:',          // Serialized PHP regarding the caller.
    'report',         // Report back to the caller upon completion.
    'encoded',        // The unix command in exec is base64 encoded.
  );
  $options = getopt('', $long_options);
  $result = new stdClass();
  $result->silent = FALSE;
  $result->log = TRUE;
  $result->report = FALSE;
  $result->encoded_command = FALSE;
  $result->data = new stdClass();
  $result->max_stdout = $result->max_stderr = 0;

  foreach ($options as $name => $value) {
    switch ($name) {
      // Operations that require no argument.
      case 'close':
      case 'exit-code':
      case 'is-running':
      case 'kill':
      case 'result':
      case 'stdout':
      case 'stderr':
      case 'version':
        $result->operation = $name;
        break;

      case 'exec':
        $result->operation = $name;
        $result->command = $value;
        break;

      case 'env':
        $result->env = $value;
        break;

      case 'max-output':
        $result->max_stdout = intval($value);
        $result->max_stderr = intval($value);
        break;

      case 'max-stdout':
        $result->max_stdout = intval($value);
        break;

      case 'max-stderr':
        $result->max_stderr = intval($value);
        break;

      case 'no-logs':
        $result->log = FALSE;
        break;

      case 'pid':
        $result->pid = $value;
        break;

      case 'silent':
        $result->silent = TRUE;
        break;

      case 'site':
        $result->site = $value;
        break;

      case 'start-time':
        $result->start_time = $value;
        break;

      case 'copy-stdout':
        $result->copy_stdout = $value;
        break;

      case 'data':
        $result->data = unserialize($value);
        break;

      case 'report':
        $result->report = TRUE;
        break;

      case 'encoded':
        $result->encoded_command = TRUE;
        break;

      default:
        throw new Exception("Option $name not available");
    }
  }
  if (empty($result->operation)) {
    throw new Exception("Missing operation (--exec, --close, --exit-code, etc).");
  }
  return $result;
}

/**
 * Closes the process.
 *
 * All resources associated with the process will be released as a result
 * of calling this function.
 *
 * @param object $options
 *   The options object returned from _acsf_ssh_parse_command_line().
 */
function _acsf_ssh_close($options) {
  $wrapper = new AcsfSshWrapper($options);
  $wrapper->removeLogFiles();
}

/**
 * Invokes the specified command.
 *
 * This function exits with the same exit code as the command that is being
 * executed.
 *
 * @param object $options
 *   The options argument returned from _acsf_ssh_parse_command_line().
 */
function _acsf_ssh_exec($options) {
  $wrapper = new AcsfSshWrapper($options);
  $exit_code = $wrapper->exec($options->command, $options->encoded_command, $options->log, $options->silent, $options->report, $options->data);
  exit($exit_code);
}

/**
 * Determines if the associated process is still running.
 *
 * Outputs a string to stdout that indicates whether the process is running.
 * 'yes' indicates it is running; 'no' means it has completed.
 *
 * If the process has completed, the exit code of this script will match that
 * of the completed process.
 *
 * @param object $options
 *   The options argument returned from _acsf_ssh_parse_command_line().
 */
function _acsf_ssh_is_running($options) {
  $wrapper = new AcsfSshWrapper($options);
  $still_running = $wrapper->isRunning();
  if ($still_running !== FALSE) {
    print('yes');
  }
  else {
    print('no');
    try {
      $exit_code = $wrapper->getExitCode();
      exit($exit_code);
    }
    catch (Exception $e) {
    }
  }
}

/**
 * Returns the exit code from the associated process.
 *
 * If the process has completed, the exit code will be printed to stdout
 * and the exit code of this script will match that of the associated
 * process.
 *
 * @param object $options
 *   The options argument returned from _acsf_ssh_parse_command_line().
 */
function _acsf_ssh_get_exit_code($options) {
  $wrapper = new AcsfSshWrapper($options);
  try {
    $exit_code = $wrapper->getExitCode();
    print($exit_code);
    exit(0);
  }
  catch (Exception $e) {
    print('Exit code not available');
    exit(1);
  }
}

/**
 * Writes log data to stdout.
 *
 * @param $options
 *   The options argument returned from _acsf_ssh_parse_command_line().
 * @param $type
 *   The log type.
 *   - 'out' for the stdout log;
 *   - 'err' for the stderr log;
 *   - 'ret' for the return value log.
 */
function _acsf_ssh_get_log($options, $type) {
  $wrapper = new AcsfSshWrapper($options);
  try {
    $out = $wrapper->getLog($type);
    print($out);
  }
  catch (Exception $e) {
    print('Log not available.');
    exit(1);
  }
}

/**
 * Kills the associated process if it is still running.
 *
 * @param object $options
 *   The options argument returned from _acsf_ssh_parse_command_line().
 */
function _acsf_ssh_kill($options) {
  $wrapper = new AcsfSshWrapper($options);
  $wrapper->kill();
}

/**
 * Returns the result from the process.
 *
 * @param object $options
 *   The options argument returned from _acsf_ssh_parse_command_line().
 */
function _acsf_ssh_result($options) {
  $wrapper = new AcsfSshWrapper($options);
  $result = $wrapper->getResult();
  $exit_code = $wrapper->getExitCode();
  print($result);
  exit($exit_code);
}

/**
 * Returns the version string.
 *
 * @param object $options
 *   The options argument returned from _acsf_ssh_parse_command_line().
 */
function _acsf_ssh_version($options) {
  $wrapper = new AcsfSshWrapper($options);
  print($wrapper->getVersion());
  exit(0);
}

acsf_ssh_main();
