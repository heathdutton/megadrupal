<?php

/**
 * @file
 * Splash Block module functionality.
 *
 * Contains the bulk of Splash Block functionality, including permissions, 
 * settings, generation, and display of Splash Blocks.
 */

/**
 * Implements hook_permission().
 */
function splash_block_permission() {
  return array(
    'administer splash blocks' => array(
      'title' => t('Administer Splash Block settings'),
      'description' => t('Allows admins to set the time delay between splashes on a given block.'),
    ),
  );
}

/**
 * Implements hook_system_info_alter().
 *
 * Adds a new "splash" region to the current theme.
 */
function splash_block_system_info_alter(&$info, $file) {
  // Adds a splash region to all available themes.
  // Add to all in case people are want splashes on admin_theme, or are
  // using some theme-switching tool.
  if (isset($info['regions'])) {
    $info['regions'] = array_merge($info['regions'], array('splash' => t('Splash')));
  }
}

/**
 * Implements hook_form_alter().
 *
 * Alter block edit form to add configuration field.
 */
function splash_block_form_alter(&$form, &$form_state, $form_id) {
  if (user_access('administer splash blocks') && ($form_id == 'block_admin_configure' || $form_id == 'block_add_block_form')) {

    if (isset($form['delta']['#value'])) {
      $splash_block = _splash_block_get_settings($form['module']['#value'], $form['delta']['#value']);
    }

    $form['settings']['splash_block'] = array(
      '#type' => 'fieldset',
      '#title' => t('Splash Block Settings'),
      '#description' => t('These settings only apply to blocks placed within the "Splash" region.'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['settings']['splash_block']['splash_time'] = array(
      '#type' => 'textfield',
      '#title' => t('Splash Interval'),
      '#default_value' => isset($splash_block->time) ? $splash_block->time : '20160',
      '#description' => t('Time in minutes (whole integers) between splashes. 20160 minutes = 2 weeks.'),
      '#maxlength' => 255,
    );
    $form['settings']['splash_block']['splash_delay'] = array(
      '#type' => 'textfield',
      '#title' => t('Splash Delay'),
      '#default_value' => isset($splash_block->delay) ? $splash_block->delay : '0',
      '#description' => t('Delay (in seconds) after the page loads.'),
      '#maxlength' => 255,
    );
    $form['settings']['splash_block']['splash_size'] = array(
      '#type' => 'textfield',
      '#title' => t('Splash Width'),
      '#default_value' => isset($splash_block->size) ? $splash_block->size : '450',
      '#description' => t('Width (in pixels) of the splash block.'),
      '#maxlength' => 255,
    );

    $form['#validate'][] = 'splash_block_form_validate';
    $form['#submit'][] = 'splash_block_form_submit';
  }
}

/**
 * Catch poorly entered settings.
 */
function splash_block_form_validate($form, &$form_state) {
  if (empty($form_state['values']['splash_time'])) {
    form_set_error('splash_time', t("Please enter a value for your splash block's time interval."));
  }
  if (empty($form_state['values']['splash_delay']) && $form_state['values']['splash_delay'] != 0) {
    form_set_error('splash_delay', t("Please enter a value for your splash block's delay after page load."));
  }
  if (empty($form_state['values']['splash_size'])) {
    form_set_error('splash_size', t("Please enter a value for your splash block's width."));
  }
  if (!is_numeric($form_state['values']['splash_time'])) {
    form_set_error('splash_time', t("Time interval must be numeric."));
  }
  if (!is_numeric($form_state['values']['splash_delay'])) {
    form_set_error('splash_delay', t("Time delay must be numeric."));
  }
  if (!is_numeric($form_state['values']['splash_size'])) {
    form_set_error('splash_size', t("Splash size must be numeric."));
  }
}

/**
 * Save splash settings.
 */
function splash_block_form_submit($form, &$form_state) {
  if (($form_state['values']['form_id'] == 'block_admin_configure' || $form_state['values']['form_id'] == 'block_add_block_form') && user_access('administer blocks')) {
    // Only save if at least one field has changed.
    if (($form['settings']['splash_block']['splash_time']['#default_value'] != $form_state['values']['splash_time']) || ($form['settings']['splash_block']['splash_size']['#default_value'] != $form_state['values']['splash_size']) || ($form['settings']['splash_block']['splash_delay']['#default_value'] != $form_state['values']['splash_delay'])) {
      db_merge('splash_block')
        ->key(array('module' => $form_state['values']['module'], 'delta' => $form_state['values']['delta']))
        ->fields(array(
          'time' => $form_state['values']['splash_time'],
          'delay' => $form_state['values']['splash_delay'],
          'size' => $form_state['values']['splash_size'],
          ))
        ->execute();

      // Flush all context module cache to use the updated splash settings.
      if (module_exists('context')) {
        cache_clear_all('context', 'cache', TRUE);
      }
    }
  }
}

/**
 * Returns saved settings for a given block.
 */
function _splash_block_get_settings($module, $delta) {
  $query = db_query('SELECT module, delta, time, delay, size FROM {splash_block} WHERE module = :module AND delta = :delta',
    array(
      ':module' => $module,
      ':delta' => $delta,
    )
  );
  $splash_block = $query->fetchObject();

  return $splash_block;
}

/**
 * Implements hook_page_build().
 *
 * Displays any blocks in splash region as lightbox popups.
 */
function splash_block_page_build(&$page) {

  if (!isset($page['splash'])) {
    return;
  }

  // Add splashes to page_bottom.
  $page['page_bottom']['splash'] = _splash_block_add_splashes($page['splash']);

  unset($page['splash']);
}

/**
 * Add splash markup and attachments.
 */
function _splash_block_add_splashes($splash_region) {
  // Load jStorage library.
  libraries_load('jstorage', 'minified');

  $splashes = array();
  $settings = array();

  $path = drupal_get_path('module', 'splash_block');
  $options = array('every_page' => TRUE, 'group' => JS_THEME);

  $splashes['#attached'] = array();

  $splashes['#attached']['css'][$path . '/css/splash_block_splash.css'] = $options;

  $splashes['#markup'] = '<div id="splash-content">';

  foreach ($splash_region as $k => $splash) {
    if (isset($splash['#block'])) {
      $settings[$k] = _splash_block_get_settings($splash['#block']->module, $splash['#block']->delta);

      // If a block has no saved splash_block settings, create settings
      // as an empty Object so we can assign defaults.
      if (empty($settings[$k])) {
        $settings[$k] = new stdClass();
      }

      // Handle defaults.
      if (!isset($settings[$k]->delay)) {
        $settings[$k]->delay = 0;
      }
      $settings[$k]->delay *= 1000;
      if (!isset($settings[$k]->time)) {
        $settings[$k]->time = 20160;
      }
      $settings[$k]->time *= 60000;
      if (!isset($settings[$k]->size)) {
        $settings[$k]->size = 450;
      }
      $settings[$k]->id = 'block-' . str_replace('_', '-', $k);

      // Add block markup.
      $splashes['#markup'] .= drupal_render($splash);
    }
  }

  $splashes['#markup'] .= '</div>';

  $js = array();

  // Add splash_block lightbox.
  $js[] = array(
    'data' => $path . '/js/splash_block_splash.js',
    'type' => 'file',
  );

  // Send settings to Drupal js.
  $js[] = array(
    'data' => array('splashBlock' => $settings),
    'type' => 'setting',
  );

  // Add js to launch splashes.
  $js[] = array(
    'data' => $path . '/js/splash_block.js',
    'type' => 'file',
  );

  $splashes['#attached']['js'] = $js;

  return $splashes;
}

/**
 * Implements hook_libraries_info().
 */
function splash_block_libraries_info() {
  $libraries = array();

  $libraries['jstorage'] = array(
    'name' => 'jStorage library',
    'vendor url' => 'http://www.jstorage.info/',
    'download url' => 'https://github.com/andris9/jStorage/zipball/master',
    'version callback' => '_splash_block_jstorage_version',
    'version arguments' => array('1', '2'),
    'versions' => array(
      '1' => array(),
      '2' => array(),
    ),
    'files' => array(
      'js' => array(
        'jstorage.js',
      ),
    ),
    'variants' => array(
      'minified' => array(
        'files' => array(
          'js' => array(
            'jstorage.min.js',
          ),
        ),
        'variant callback' => '_splash_block_test_installed',
        'variant arguments' => array(),
      ),
    ),
  );

  return $libraries;
}

/**
 * Gets the version of jStorage library.
 */
function _splash_block_jstorage_version($library, $version) {
  return $version;
}

/**
 * Detects whether the variant is installed or not.
 *
 * Determines if the JS file exists.
 */
function _splash_block_test_installed($library, $name, $args) {
  // Make sure the file exists.
  $path = DRUPAL_ROOT . '/' . $library['library path'] . '/';
  $file = file_exists($path . 'jstorage.min.js');
  if (!$file) {
    return FALSE;
  }
  else {
    return TRUE;
  }
}
