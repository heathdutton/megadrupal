<?php
/**
 * @file
 * Make file entities editable inline within other entity forms.
 */

define('FILE_ENTITY_INLINE_ALL', '1');
define('FILE_ENTITY_INLINE_SOME', '2');
define('FILE_ENTITY_INLINE_NONE', '0');

/**
 * Implements hook_element_info().
 *
 * Add an additional process and validation callback to control the added file
 * entity fields.
 */
function file_entity_inline_element_info() {
  // Define an array of element names to proceed.
  $extra = array('#process' => array('file_entity_inline_field_widget_process'));

  $elements = array();
  foreach (file_entity_inline_widgets() as $widget_type => $widget) {
    $element_type = isset($widget['element_type']) ? $widget['element_type'] : $widget_type;
    $elements[$element_type] = $extra;
  }

  return $elements;
}

/**
 * An element #process callback for the file field widget.
 *
 * Adds the additional file entity fields to the widget.
 */
function file_entity_inline_field_widget_process($element, &$form_state, &$form) {
  // Only act on entity forms, and when a file has been uploaded.
  if (empty($element['fid']['#value']) || !isset($element['#entity_type']) || !isset($element['#field_name'])) {
    return $element;
  }

  // Sorry, no recursive inline-editing of files. ;)
  if ($element['#entity_type'] === 'file') {
    return $element;
  }

  // Load the settings for this field.
  $field = field_info_field($element['#field_name']);
  $instance = field_info_instance($element['#entity_type'], $element['#field_name'], $element['#bundle']);
  $widget_settings = $instance['widget']['settings'];

  // Bail out if inline file entities are not enabled on this field.
  if (isset($widget_settings['file_entity_inline']) && $widget_settings['file_entity_inline'] === FILE_ENTITY_INLINE_NONE) {
    return $element;
  }

  // Load the file if it's not available already.
  $file = !empty($element['#file']) ? $element['#file'] : file_load($element['fid']['#value']);

  // Add the entity form for the file.
  $element['entity'] = array(
    '#weight' => 10,
    '#parents' => array('files', $file->fid),
  );
  field_attach_form('file', $file, $element['entity'], $form_state, $element['#language']);

  // Reduce the display of fields if only display specific fields.
  if (isset($widget_settings['file_entity_inline']) && $widget_settings['file_entity_inline'] === FILE_ENTITY_INLINE_SOME) {
    $disabled_fields = array_diff(element_children($element['entity']), $widget_settings['file_entity_inline_fields']);
    foreach ($disabled_fields as $form_key) {
      $element['entity'][$form_key]['#access'] = FALSE;
    }
  }

  // Add a submit handler to the entire form to handle saving of values.
  if (array_search('file_entity_inline_submit', $form['#submit']) === FALSE) {
    $form['#submit'][] = 'file_entity_inline_submit';
  }

  return $element;
}

/**
 * An element #element_validate callback for the file entity.
 *
 * Saves the file entity field values.
 */
function file_entity_inline_submit($form, &$form_state) {
  if (!isset($form_state['values']['files'])) {
    return;
  }

  // Save any file entities on the page.
  foreach ($form_state['values']['files'] as $fid => $file_values) {
    $file = file_load($fid);
    $file_form_state = array(
      'values' => $file_values,
    );
    field_attach_submit('file', $file, $form, $file_form_state);
    file_save($file);
  }
}


/**
 * Implements hook_form_alter().
 */
function file_entity_inline_form_field_ui_field_edit_form_alter(&$form, $form_state) {
  $instance = $form['#instance'];

  // Check that we're not on a file entity, and this widget is supported.
  if ($instance['entity_type'] !== 'file' && array_key_exists($instance['widget']['type'], file_entity_inline_widgets())) {
    $field = $form['#field'];
    if (empty($form['instance']['settings'])) {
      $form['instance']['settings'] = array();
    }
    $form['instance']['settings'] += file_entity_inline_field_widget_settings_form($field, $instance);
  }
}

/**
 * Implements hook_field_widget_info_alter().
 *
 * A list of settings needed by File Entity Inline module on widgets.
 */
function file_entity_inline_field_widget_info_alter(&$info) {
  $settings = array(
    'file_entity_inline' => 1,
    'file_entity_inline_fields' => array(),
  );

  foreach (file_entity_inline_widgets() as $widget_type => $widget) {
    if (isset($info[$widget_type]['settings'])) {
      $info[$widget_type]['settings'] += $settings;
    }
  }
}

/**
 * Configuration form for editing File Entity Inline for a field instance.
 */
function file_entity_inline_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];

  $form['file_entity_inline'] = array(
    '#type' => 'fieldset',
    '#title' => t('Inline fields'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#description' => t('These options allow extended file properties to be edited inline after a file has been uploaded into this field. The fields displayed will depend upon the type of file uploaded. Setting or changing a value in these fields will affect the file everywhere throughout the site. More fields may be added in the <a href="!file-types">File types configuration</a>', array('!file-types' => url('admin/structure/file-types'))),
    '#weight' => 30,
    '#parents' => array('instance', 'widget', 'settings'),
  );

  $form['file_entity_inline']['file_entity_inline'] = array(
    '#type' => 'select',
    '#title' => t('Inline fields'),
    '#options' => array(
      FILE_ENTITY_INLINE_ALL => t('All available fields'),
      FILE_ENTITY_INLINE_SOME => t('Only specific fields'),
      FILE_ENTITY_INLINE_NONE => t('None (disabled)'),
    ),
    '#default_value' => isset($settings['file_entity_inline']) ? $settings['file_entity_inline'] : 1,
    '#weight' => -9,
  );

  $options = array();
  $option_occurances = array();
  $instance_info = field_info_instances('file');
  $bundle_info = field_info_bundles('file');
  foreach ($instance_info as $bundle_name => $bundle_fields) {
    foreach ($bundle_fields as $field_name => $field_instance) {
      $options[$field_name] = $field_instance['label'];
      $option_occurances[$field_name][] = $bundle_info[$bundle_name]['label'];
    }
  }

  // Add bundle information to each field name.
  foreach ($options as $field_name => $field_label) {
    $options[$field_name] .= ' (' . implode(',', $option_occurances[$field_name]) . ')';
  }

  $form['file_entity_inline']['file_entity_inline_fields'] = array(
    '#title' => t('Included inline fields'),
    '#type' => 'checkboxes',
    '#options' => $options,
    '#default_value' => isset($settings['file_entity_inline_fields']) ? $settings['file_entity_inline_fields'] : array(),
    '#weight' => 0,
    '#states' => array(
      'visible' => array(
        'select[name="instance[widget][settings][file_entity_inline]"]' => array('value' => 2),
      ),
    ),
    '#element_validate' => array('file_entity_inline_fields_validate'),
  );

  return $form;
}

/**
 * Form #element_validate callback. Return only values on checked checkboxes.
 */
function file_entity_inline_fields_validate($element, &$form_state) {
  $value = array_values(array_filter($element['#value']));
  form_set_value($element, $value, $form_state);
}

/**
 * Get a list of all supported field widgets.
 */
function file_entity_inline_widgets($reset = FALSE) {
  static $widgets;

  if (!isset($widgets) || $reset) {
    $widgets = array();
    foreach (module_implements('file_entity_inline_widgets') as $module) {
      $module_widgets = module_invoke($module, 'file_entity_inline_widgets');
      foreach ($module_widgets as $type => $widget) {
        $module_widgets[$type]['type'] = $type;
        $module_widgets[$type]['module'] = $module;
      }
      $widgets = array_merge($widgets, $module_widgets);
    }
    drupal_alter('file_entity_inline_widgets', $widgets);
  }

  return $widgets;
}

/**
 * Implements hook_file_entity_inline_widgets().
 */
function file_entity_inline_file_entity_inline_widgets() {
  $widgets = array();
  $widgets['file_generic'] = array(
    'element_type' => 'managed_file',
  );
  $widgets['image_image'] = array(
    'element_type' => 'managed_file',
  );
  return $widgets;
}

