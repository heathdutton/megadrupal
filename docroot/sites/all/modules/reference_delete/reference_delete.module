<?php
/**
 * Implements hook_entity_delete().
 */
function reference_delete_entity_delete($entity, $type) {
  $entity_id = entity_extract_ids($type, $entity);
  $entity_id = $entity_id[0];

  if (module_exists('references')) {
    switch ($type) {
      case 'node' :
        $module = 'node_reference';

        if ( $fields = _reference_delete_make_table_names($module) ) {
          foreach ( $fields as $field => $tables ) {
            foreach ( $tables as $table ) {
              db_delete($table)
                ->condition($field . '_nid', $entity_id, '=')
                ->execute();

              watchdog('reference_delete', 'Deleted all references to entity %entity_type #!entity_id from table !table', array('%entity_type' => $type, '!entity_id' => $entity_id, '!table' => $table_name), WATCHDOG_NOTICE);
            }
          }
        }

        field_cache_clear();

      break;

      case 'user' :
        $module = 'user_reference';

        if ( $fields = _reference_delete_make_table_names($module) ) {
          foreach ( $fields as $field => $tables ) {
            foreach ( $tables as $table_name ) {
              db_delete($table_name)
                ->condition($field . '_uid', $entity_id, '=')
                ->execute();

              watchdog('reference_delete', 'Deleted all references to entity %entity_type #!entity_id from table !table', array('%entity_type' => $type, '!entity_id' => $entity_id, '!table' => $table_name), WATCHDOG_NOTICE);
            }
          }
        }

        field_cache_clear();
      break;
    }
  }

  if (module_exists('entityreference')) {
    $module = 'entityreference';

    if ( $fields = _reference_delete_get_reference_fields($module) ) {
      foreach ( $fields as $field_name => $properties ) {
        // Acts only if the target entity is of the same type of the entity that's being deleted
        if ( $properties['settings']['target_type'] == $type ) {
          $tables = reset($properties['storage']['details']);

          foreach ( $tables as $table ) {
            $keys = array_keys($table);
            $table_name = reset($keys);
            $column_name = $table[$table_name]['target_id'];

            db_delete($table_name)
            ->condition($column_name, $entity_id, '=')
            ->execute();

            watchdog('reference_delete', 'Deleted all references to entity %entity_type #!entity_id from table !table', array('%entity_type' => $type, '!entity_id' => $entity_id, '!table' => $table_name), WATCHDOG_NOTICE);
          }
        }
      }
    }

    field_cache_clear();
  }
}

/**
 * Returns an array of fields, filtered by module.
 */
function _reference_delete_get_reference_fields($module) {
  $fields = field_info_field_map();

  $reference_fields = array();

  foreach ( $fields as $field_name => &$properties ) {
    $properties = field_info_field($field_name);

    if ($properties['module'] == $module) {
      $reference_fields[$field_name] = $properties;
    }
  }

  if ( !empty($reference_fields) ) {
    return $reference_fields;
  }
}

/**
 * Creates table names (used only for References).
 */
function _reference_delete_make_table_names($module) {
  if (isset($module)) {
    $fields = _reference_delete_get_reference_fields($module);

    if ( count($fields) ) {
      $tables = array();
      foreach ( $fields as $field ) {

        $tables[$field] = array('field_data_' . $field, 'field_revision_' . $field);
      }

      return $tables;
    }
  }
}
