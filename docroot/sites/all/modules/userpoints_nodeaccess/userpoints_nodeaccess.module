<?php
// $Id: userpoints_nodeaccess.module,v 1.8 2011/01/10 09:49:55 berdir Exp $

/**
 * @file
 * This module enables you to sell access to a single node for a specific
 * category and amount of userpoints.
 */

/**
 * Implements hook_permission().
 */
function userpoints_nodeaccess_permission() {
  return array(
    'trade userpoints for node access' => array(
      'title' => t('Trade Userpoints for node access'),
      'description' => t('Allows a user to gain access to a node by trading in Userpoints that the user has accumulated.'),
    ),
    'set required userpoints for any node' => array(
      'title' => t('Set required Userpoints for any node'),
      'description' => t('Allows a user to determine the number and category of Userpoints required to access a node'),
    ),
    'set required userpoints for own node' => array(
      'title' => t('Set required Userpoints for own node'),
      'description' => t('Allows the author of a node to determine the number and category of Userpoints required to access that node.'),
    )
  );
}

/**
 * Implements hook_theme().
 */
function userpoints_nodeaccess_theme() {
  return array(
    'userpoints_nodeaccess_node_points_information' => array(
      'variables' => array('category' => NULL, 'points' => NULL, 'price' => NULL),
      'file' => 'userpoints_nodeaccess.theme.inc',
    ),
  );
}

function userpoints_nodeaccess_is_protected($nid) {
  return db_query("SELECT 1 FROM {userpoints_nodeaccess_points} WHERE nid = :nid AND points > 0", array(':nid' => $nid))->fetchField();
}

function userpoints_nodeaccess_has_access($nid, $uid) {
  return db_query("SELECT 1 FROM {userpoints_nodeaccess} WHERE nid = :nid AND uid = :uid", array(':nid' => $nid, ':uid' => $uid))->fetchField();
}

/**
 * Page Callback for the settings page.
 */
function userpoints_nodeaccess_userpoints($op, $points = NULL) {
  if ($op == 'setting') {
    $form['userpoints_nodeaccess'] = array(
      '#type' => 'fieldset',
      '#title' => t('Content access', userpoints_translation()),
      '#collapsed' => TRUE,
      '#collapsible' => TRUE,
      '#group' => 'settings_additional',
    );

    $form['userpoints_nodeaccess']['userpoints_nodeaccess_enabled'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enabled by default'),
      '#default_value' => variable_get('userpoints_nodeaccess_enabled', TRUE),
      '#description' => t('If checked, Userpoints Nodeaccess functionality is activated by default for each content type. This can be overridden on the content type edit page.'),
    );

    $form['userpoints_nodeaccess']['userpoints_nodeaccess_default_category'] = array(
      '#type' => 'select',
      '#title' => t('Global Default Category'),
      '#default_value' => variable_get('userpoints_nodeaccess_default_category', 0),
      '#options' => userpoints_get_categories(),
      '#description' => t('Choose a default !Points category. This can be overridden for each content type.', userpoints_translation()),
    );
    return $form;
  }
}

/**
 * Implements hook_form_alter.
 */
function userpoints_nodeaccess_form_alter(&$form, $form_state, $form_id) {
  global $user;

  if (!empty($form['#node_edit_form']) && variable_get('userpoints_nodeaccess_enabled_' . $form['#node']->type, variable_get('userpoints_nodeaccess_enabled', TRUE))) {
    $form['userpoints_nodeaccess'] = array(
      '#type' => 'fieldset',
      '#title' => t('Content access by !points', userpoints_translation()),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      // Check if user either has permission for all nodes or for own nodes and
      // is the author.
      '#access' => user_access('set required userpoints for any node') || (user_access('set required userpoints for own node') && $form['#node']->uid == $user->uid),
      '#weight' => 30,
      '#group' => 'additional_settings',
      '#attached' => array(
        'js' => array(
          'userpoints_nodeaccess' => drupal_get_path('module', 'userpoints_nodeaccess') . '/userpoints_nodeaccess.js',
        ),
      ),
      '#attributes' => array('class' => array('userpoints-nodeaccess-form')),
    );
    $form['userpoints_nodeaccess']['userpoints_nodeaccess_points_price'] = array(
      '#type' => 'textfield',
      '#title' => t('!Points', userpoints_translation()),
      '#default_value' => $form['#node']->userpoints_nodeaccess_points_price,
      '#description' => t('Set a price in points that is required to access this content. All users will have access if you enter "0" or this field is left empty.', userpoints_translation()),
    );
    $form['userpoints_nodeaccess']['userpoints_nodeaccess_points_category'] = array(
      '#type' => 'select',
      '#title' => t('Category'),
      '#default_value' => $form['#node']->userpoints_nodeaccess_points_category,
      '#options' => userpoints_get_categories(),
      '#description' => t('Choose the !points category that shall be used when users trade in their !points.', userpoints_translation()),
    );
  }
}

function userpoints_nodeaccess_form_node_type_form_alter(&$form, &$form_state) {
  $form['userpoints_nodeaccess'] = array(
    '#type' => 'fieldset',
    '#title' => t('Content access by !points', userpoints_translation()),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#access' => user_access('administer userpoints'),
    '#weight' => 30,
    '#group' => 'additional_settings',
    '#attached' => array(
      'js' => array(
        'userpoints_nodeaccess' => drupal_get_path('module', 'userpoints_nodeaccess') . '/userpoints_nodeaccess.js',
      ),
    ),
    '#attributes' => array('class' => array('userpoints-nodeaccess-nodetype-form')),
  );

  $form['userpoints_nodeaccess']['userpoints_nodeaccess_enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enabled'),
    '#default_value' => variable_get('userpoints_nodeaccess_enabled_' . $form['#node_type']->type, variable_get('userpoints_nodeaccess_enabled', TRUE)),
    '#description' => t('If checked, a price in !points can be set to access content of this type.', userpoints_translation()),
  );

  $form['userpoints_nodeaccess']['userpoints_nodeaccess_points_price'] = array(
    '#type' => 'textfield',
    '#title' => t('Default !Points', userpoints_translation()),
    '#default_value' => variable_get('userpoints_nodeaccess_points_price_' . $form['#node_type']->type, 0),
    '#description' => t('Set a default price in !points that is required to access content of this type.', userpoints_translation()),
    '#states' => array(
      'visible' => array(
        ':input[name="userpoints_nodeaccess_enabled"]' => array('checked' => TRUE),
      ),
    ),
  );
  $form['userpoints_nodeaccess']['userpoints_nodeaccess_points_category'] = array(
    '#type' => 'select',
    '#title' => t('Default Category'),
    '#default_value' => variable_get('userpoints_nodeaccess_points_category_' . $form['#node_type']->type, variable_get('userpoints_nodeaccess_default_category', 0)),
    '#options' => userpoints_get_categories(),
    '#description' => t('Choose the default !points category that shall be used when users trade in their !points.', userpoints_translation()),
    '#states' => array(
      'visible' => array(
        ':input[name="userpoints_nodeaccess_enabled"]' => array('checked' => TRUE),
      ),
    ),
  );

  if (!empty($form['#node_type']->type)) {
    $url = url('admin/structure/types/manage/' . $form['#node_type']->type . '/display/userpoints_nodeaccess');
    $form['userpoints_nodeaccess']['userpoints_nodeaccess_manage_item'] = array(
      '#type' => 'item',
      '#markup' => t('You can control how the content appears to users who do not have access by going to the <a href="@manage_display_url">Manage display screen</a>.', array('@manage_display_url' => $url)),
      '#states' => array(
        'visible' => array(
          ':input[name="userpoints_nodeaccess_enabled"]' => array('checked' => TRUE),
        ),
      ),
    );
  }
}

/**
 * Implements hook_node_insert().
 */
function userpoints_nodeaccess_node_insert($node) {
  userpoints_nodeaccess_update_node($node);
}

/**
 * Implements hook_node_update().
 */
function userpoints_nodeaccess_node_update($node) {
  userpoints_nodeaccess_update_node($node);
}

function userpoints_nodeaccess_update_node($node) {
  global $user;
  // Only change eventually existing information if the user has permission
  // to do so.
  if (!(user_access('set required userpoints for any node') || (user_access('set required userpoints for own node') && $node->uid == $user->uid))) {
    return;
  }

  if (!isset($node->userpoints_nodeaccess_points_price)) {
    // Default values.
    $node->userpoints_nodeaccess_points_price = variable_get('userpoints_nodeaccess_points_price_' . $node->type, 0);
    $node->userpoints_nodeaccess_points_category = variable_get('userpoints_nodeaccess_points_category_' . $node->type, variable_get('userpoints_nodeaccess_default_category', 0));
  }

  db_merge('userpoints_nodeaccess_points')
    ->key(array(
      'nid' => $node->nid,
    ))
    ->fields(array(
      'points' => (int)$node->userpoints_nodeaccess_points_price,
      'tid' => (int)$node->userpoints_nodeaccess_points_category,
    ))
    ->execute();
}

function userpoints_nodeaccess_node_load($nodes) {

  $points = db_query("SELECT nid, points, tid FROM {userpoints_nodeaccess_points} WHERE nid IN (:nids)", array(':nids' => array_keys($nodes)))->fetchAllAssoc('nid');

  foreach ($nodes as $node) {

    if (isset($points[$node->nid])) {
      $node->userpoints_nodeaccess_points_price = $points[$node->nid]->points;
      $node->userpoints_nodeaccess_points_category = $points[$node->nid]->tid;
    } else {
      // Default values.
      $node->userpoints_nodeaccess_points_price = variable_get('userpoints_nodeaccess_points_price_' . $node->type, 0);
      $node->userpoints_nodeaccess_points_category = variable_get('userpoints_nodeaccess_points_category_' . $node->type, variable_get('userpoints_nodeaccess_default_category', 0));
    }
  }
}

function userpoints_nodeaccess_node_prepare($node) {
  // Add default values if this is a new node.
  if (empty($node->nid)) {
    $node->userpoints_nodeaccess_points_price = variable_get('userpoints_nodeaccess_points_price_' . $node->type, 0);
    $node->userpoints_nodeaccess_points_category = variable_get('userpoints_nodeaccess_points_category_' . $node->type, variable_get('userpoints_nodeaccess_default_category', 0));
  }
}

function userpoints_nodeaccess_node_view_alter(&$build) {
  global $user;

  // Don't limit access to users with bypass permission or the author.
  if (user_access('bypass node access') || $build['#node']->uid == $user->uid) {
    return;
  }

  // Check if node type is enabled.
  if (!variable_get('userpoints_nodeaccess_enabled_' . $build['#node']->type, variable_get('userpoints_nodeaccess_enabled', TRUE))) {
    return;
  }

  if (userpoints_nodeaccess_is_protected($build['#node']->nid)) {
    $current_points = userpoints_get_current_points($user->uid, $build['#node']->userpoints_nodeaccess_points_category);
    $categories = userpoints_get_categories();
    $category = $categories[$build['#node']->userpoints_nodeaccess_points_category];

    if (!userpoints_nodeaccess_has_access($build['#node']->nid, $user->uid)) {
      // Re-populate $build with a different view mode.
      // @todo: Figure out if it is possible to change the view mode before
      // rendering to avoid building it twice.
      $node = $build['#node'];
      // Keep the original view mode to add classes based on it in the
      // preprocess function.
      $node->original_view_mode = $build['#view_mode'];
      // Keep the original links.
      $links = $build['links'];
      node_build_content($node, 'userpoints_nodeaccess');
      $build = $node->content;
      // We don't need duplicate rendering info in node->content.
      unset($node->content);

      // Apply default values.
      $build += array(
        '#theme' => 'node',
        '#node' => $node,
        '#view_mode' => 'userpoints_nodeaccess',
      );
      // Re-add links, keep existing ones.
      if (is_array($links)) {
        $build['links'] += $links;
      }

      if (user_access('trade userpoints for node access')) {
        $build['userpoints_nodeaccess_information'] = array(
          '#markup' => theme('userpoints_nodeaccess_node_points_information', array('category' => $category, 'points' => $current_points, 'price' => $node->userpoints_nodeaccess_points_price))
        );
        if ($current_points >= $build['#node']->userpoints_nodeaccess_points_price) {
          $build['userpoints_nodeaccess_form'] = drupal_get_form('userpoints_nodeaccess_trade_access_form', $build['#node']->nid, $build['#node']->type);
        }
      }
      else {
        $build['userpoints_no_access'] = array(
          '#markup' => '<span class="userpoints-nodeaccess userpoints-nodeaccess-denied">' . t('Requires @points !points in the @category category.', array_merge(userpoints_translation(), array('@category' => $category, '@points' => $build['#node']->userpoints_nodeaccess_points_price))) . '</span>',
        );
      }
    }
  }
}

/**
 * Preprocess function to add classes to the node.
 */
function userpoints_nodeaccess_preprocess_node(&$variables) {
  global $user;

  $node = $variables['elements']['#node'];

  // Check if node type is enabled.
  if (!variable_get('userpoints_nodeaccess_enabled_' . $node->type, variable_get('userpoints_nodeaccess_enabled', TRUE))) {
    return;
  }

  // If the original view mode was teaser, add the node-teaser class to
  // keep the default theming of nodes in the teaser list.
  if (!empty($variables['original_view_mode']) && $variables['original_view_mode'] == 'teaser') {
    $variables['classes_array'][] = 'node-teaser';
  }

  // Don't limit access to users with bypass permission or the author.
  if (empty($node->userpoints_nodeaccess_points_price) || user_access('bypass node access') || $node->uid == $user->uid || userpoints_nodeaccess_has_access($node->nid, $user->uid)) {
    $variables['classes_array'][] = 'userpoints-nodeaccess-node-access';
    if (userpoints_nodeaccess_has_access($node->nid, $user->uid)) {
      $variables['classes_array'][] = 'userpoints-nodeaccess-node-access-bought';
    }
  }
  else {
    $variables['classes_array'][] = 'userpoints-nodeaccess-node-no-access';
    if (user_access('trade userpoints for node access')) {
      $current_points = userpoints_get_current_points($user->uid, $node->userpoints_nodeaccess_points_category);
      if ($current_points < $node->userpoints_nodeaccess_points_price) {
        $variables['classes_array'][] = 'userpoints-nodeaccess-node-no-access-notenough';
      }
      else {
        $variables['classes_array'][] = 'userpoints-nodeaccess-node-no-access-enough';
      }
    }
  }
}

/**
 * Displays a form which can be used to get access to a node.
 */
function userpoints_nodeaccess_trade_access_form($form, &$form_state, $nid, $type) {
  global $user;

  $form['nid'] = array(
    '#type' => 'value',
    '#value' => $nid,
  );
  $form['type'] = array(
    '#type' => 'value',
    '#value' => $type,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' =>  t('Get access'),
    '#id' => 'edit-submit-' . $nid,
    '#attributes' => array(
      'class' => array('userpoints-nodeaccess', 'userpoints-nodeaccess-getaccess'),
    ),
  );
  return $form;
}

/**
 * Submit callback for the trade access form.
 *
 * @see userpoints_nodeaccess_trade_access_form()
 */
function userpoints_nodeaccess_trade_access_form_submit($form, &$form_state) {
  global $user;
  $uid = $user->uid;
  $nid = $form_state['values']['nid'];

  // Check if user already has access to the node or not.
  $has_access = db_query("SELECT count(*) as count FROM {userpoints_nodeaccess} WHERE nid = :nid AND uid = :uid", array(':nid' => $nid, ':uid' => $uid))->fetchField();
  if (!$has_access) {
    // User does not already have access.
    $row = db_query("SELECT points, tid FROM {userpoints_nodeaccess_points} WHERE nid = :nid", array(':nid' => $nid))->fetchObject();
    if (!$row) {
      return;
    }
    $tid = $row->tid;

    $current_points = userpoints_get_current_points($uid, $tid);
    $categories = userpoints_get_categories();
    $category = $categories[$row->tid];
    if ($current_points >= $row->points) {
      db_insert('userpoints_nodeaccess')
        ->fields(array(
          'nid' => $nid,
          'uid' => $uid,
          'timestamp' => REQUEST_TIME,
        ))
        ->execute();
      $params = array(
        'uid' => $uid,
        'points' => -$row->points,
        'tid' => $tid,
        'operation' => 'userpoints_nodeaccess_bought',
        'display' => FALSE,
        'entity_type' => 'node',
        'entity_id' => $nid,
      );
      userpoints_userpointsapi($params);

      $args = array_merge(userpoints_translation(), array(
        '@category' => $category,
        '@points' => $current_points,
        '@price' => $row->points,
      ));
      drupal_set_message(t('By trading in @price !points in the @category category, you now have full access to this content.', $args));
    }
    else {
      drupal_set_message(t("You don't have enough !points to get access.", userpoints_translation()));
    }
  }
}

/**
 * Implements hook_entity_info().
 */
function userpoints_nodeaccess_entity_info() {
  $return['node']['view modes'] = array(
    'userpoints_nodeaccess' => array(
      'label' => t('Userpoints node access denied'),
      'custom settings' => TRUE,
    ),
  );
  return $return;
}

/**
 * Implements hook_userpoints_info().
 */
function userpoints_nodeaccess_userpoints_info() {
  return array(
    'userpoints_nodeaccess_bought' => array(
      'description callback' => 'userpoints_nodeaccess_description_callback',
    )
  );
}

/**
 * Description callback for userpoint operation description/reason.
 */
function userpoints_nodeaccess_description_callback($operation, $entity) {

  $arguments = array();
  // Try to load content type name.
  if ($operation->entity_type == 'node' && $entity) {
    $arguments['%title'] = $entity->title;
  }

  // Fallback to string content if the above failed for some reason.
  if (empty($arguments['%title'])) {
    $arguments['%title'] = t('content');
  }
  return t('Gained access to %title.', $arguments);
}
