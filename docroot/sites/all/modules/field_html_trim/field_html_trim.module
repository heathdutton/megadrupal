<?php

/**
 * @file
 * Module that extends the settings for trimmed text fields.
 *
 * These extended settings allow for:
 *   - trimming HTML without counting the HTML tags.
 *   - adding an ellipsis where text has been cut off.
 */

/**
 * Implements hook_field_formatter_info_alter().
 */
function field_html_trim_field_formatter_info_alter(&$info) {
  // Add formatter settings for text_trimmed.
  $info['text_trimmed']['settings']['enable_html_trim'] = FALSE;
  $info['text_trimmed']['settings']['html_trim']['image_style'] = array();
  $info['text_trimmed']['settings']['html_trim']['ellipsis'] = '...';
  // Add formatter settings for text_summary_or_trimmed.
  $info['text_summary_or_trimmed']['settings']['enable_html_trim'] = FALSE;
  $info['text_summary_or_trimmed']['settings']['html_trim']['exclude_html_from_trim_count'] = TRUE;
  $info['text_summary_or_trimmed']['settings']['html_trim']['ellipsis'] = '...';
}

/**
 * Implements hook_field_formatter_settings_form_alter().
 */
function field_html_trim_field_formatter_settings_form_alter(&$settings_form, $context) {
  $display = $context['instance']['display'][$context['view_mode']];
  $settings = $display['settings'];

  // Normalize the settings.
  $settings['enable_html_trim'] = isset($settings['enable_html_trim']) ? $settings['enable_html_trim'] : FALSE;
  $settings['html_trim']['exclude_html_from_trim_count'] = isset($settings['html_trim']['exclude_html_from_trim_count']) ? $settings['html_trim']['exclude_html_from_trim_count'] : TRUE;
  $settings['html_trim']['ellipsis'] = isset($settings['html_trim']['ellipsis']) ? $settings['html_trim']['ellipsis'] : '...';

  if (in_array($display['type'], array('text_trimmed', 'text_summary_or_trimmed'))) {
    // The enable checkbox for html trimming.
    $settings_form['enable_html_trim'] = array(
      '#title' => t('Enable HTML trim'),
      '#type' => 'checkbox',
      '#default_value' => $settings['enable_html_trim'],
      '#attached' => array(
        'js' => array(drupal_get_path('module', 'field_html_trim') . '/field_html_trim.js'),
      ),
      '#attributes' => array(
        'class' => array('html-trim-checkbox'),
      ),
    );
    // Fieldset with html trim settings(dynamically shown and hidden).
    $settings_form['html_trim'] = array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array('html-trim-fieldset'),
      ),
    );
    // Exlude HTML tag count checkbox. By default enabled.
    $settings_form['html_trim']['exclude_html_from_trim_count'] = array(
      '#title' => t('Exlude HTML tags from trim count'),
      '#type' => 'checkbox',
      '#default_value' => $settings['html_trim']['exclude_html_from_trim_count'],
    );
    // Ellipsis textfield. By default '...'.
    $settings_form['html_trim']['ellipsis'] = array(
      '#title' => t('Ellipsis to indicate text cut-off'),
      '#type' => 'textfield',
      '#default_value' => $settings['html_trim']['ellipsis'],
      '#size' => 4,
    );
  }
}

/**
 * Implements hook_field_formatter_settings_summary_alter().
 */
function field_html_trim_field_formatter_settings_summary_alter(&$summary, $context) {
  $display = $context['instance']['display'][$context['view_mode']];
  $settings = $display['settings'];

  // Normalize the settings.
  $settings['enable_html_trim'] = isset($settings['enable_html_trim']) ? $settings['enable_html_trim'] : FALSE;
  $settings['html_trim']['exclude_html_from_trim_count'] = isset($settings['html_trim']['exclude_html_from_trim_count']) ? $settings['html_trim']['exclude_html_from_trim_count'] : TRUE;
  $settings['html_trim']['ellipsis'] = isset($settings['html_trim']['ellipsis']) ? $settings['html_trim']['ellipsis'] : '...';

  if (in_array($display['type'], array('text_trimmed', 'text_summary_or_trimmed'))) {
    if ($settings['enable_html_trim']) {
      if ($settings['html_trim']['exclude_html_from_trim_count']) {
        $summary .= '<br />' . t('HTML tags exluded from trim count');
      }
      if (!empty($settings['html_trim']['ellipsis'])) {
        $summary .= '<br />' . t('Append ellipsis: @ellipsis', array('@ellipsis' => $settings['html_trim']['ellipsis']));
      }
    }
  }
}

/**
 * Implements hook_field_attach_view_alter().
 */
function field_html_trim_field_attach_view_alter(&$output, $context) {
  foreach (element_children($output) as $field_name) {
    if (in_array($output[$field_name]['#formatter'], array('text_trimmed', 'text_summary_or_trimmed'))) {
      $element = &$output[$field_name];
      $instance = field_info_instance($element['#entity_type'], $field_name, $element['#bundle']);
      $display = isset($instance['display'][$context['view_mode']]) ? $instance['display'][$context['view_mode']] : $instance['display']['default'];
      // If there are display settings for view fields use those instead.
      $settings = is_array($context['display']['settings']) ? $context['display']['settings'] : $display['settings'];

      // Normalize the settings.
      $settings['enable_html_trim'] = isset($settings['enable_html_trim']) ? $settings['enable_html_trim'] : FALSE;
      $settings['html_trim']['exclude_html_from_trim_count'] = isset($settings['html_trim']['exclude_html_from_trim_count']) ? $settings['html_trim']['exclude_html_from_trim_count'] : TRUE;
      $settings['html_trim']['ellipsis'] = isset($settings['html_trim']['ellipsis']) ? $settings['html_trim']['ellipsis'] : '...';

      // Only proceed if html trim is enabled.
      if (!$settings['enable_html_trim']) {
        continue;
      }

      switch ($element['#formatter']) {
        case 'text_trimmed':
          foreach ($element['#items'] as $delta => $item) {
            if (!empty($settings['html_trim']['exclude_html_from_trim_count'])) {
              $element[$delta]['#markup'] = _field_html_trim_get_trimmed_html($item['safe_value'], $settings['trim_length'], $settings['html_trim']['ellipsis']);
            }
          }
          break;

        case 'text_summary_or_trimmed';
          foreach ($element['#items'] as $delta => $item) {
            // Only perform the actual trimming when no summary is used.
            if (!empty($settings['html_trim']['exclude_html_from_trim_count']) && empty($item['summary'])) {
              $element[$delta]['#markup'] = _field_html_trim_get_trimmed_html($item['safe_value'], $settings['trim_length'], $settings['html_trim']['ellipsis']);
            }
          }
          break;
      }
    }
  }
}

/**
 * Returns trimmed HTML without counting HTML tags.
 *
 * @param string $safe_value
 *   The field's safe value to trim.
 * @param int $trim_length
 *   The length in characters to trim the value.
 * @param string $ellipsis
 *   The ellipsis to append after trimmed value.
 */
function _field_html_trim_get_trimmed_html($safe_value, $trim_length, $ellipsis) {

  // Get text without any formatting.
  $text = strip_tags(str_replace('<', ' <', $safe_value));
  $text = preg_replace('/\n|\r|\t/m', ' ', $text);
  $text = str_replace('&nbsp;', ' ', $text);
  $text = str_replace("\xc2\xa0", ' ', $text);
  $text = trim(preg_replace('/\s\s+/', ' ', $text));

  if (strlen($text) > $trim_length) {
    // Shorten the text.
    $short_text = truncate_utf8($text, $trim_length, 1);
    // Break text up in words.
    $words = str_word_count($short_text, 1);
    // Build regular expression pattern.
    $pattern = implode("(.*?)", $words);
    // Allow for newlines in the pattern.
    $pattern = '/(.*?)' . $pattern . '/s';
    // Find the word pattern in our HTML.
    if (preg_match($pattern, $safe_value, $result)) {
      // Close any unclosed HTML tags and append ellipsis.
      $safe_value = _filter_htmlcorrector($result[0] . $ellipsis);
    }
  }

  return $safe_value;
}
