<?php

/**
 * @file
 * Defines url for all the static files "special_taxonomy_tagging_in_body".
 */

/**
 * Implements hook_menu().
 *
 * This function add a menu item to admin menus for our module configurations.
 */
function special_taxonomy_tagging_in_body_menu() {
  $items = array();
  $items['admin/config/system/special-taxonomy-tagging'] = array(
    'title' => 'Special Taxonomy Tagging',
    'description' => 'Make taxonomy tagging in body field with special character.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('special_taxonomy_tagging_in_body_admin_setting_form'),
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

/**
 * Implements hook_admin_setting_form().
 *
 * This function provides a form to admin interface.
 */
function special_taxonomy_tagging_in_body_admin_setting_form() {

  // Get List Of All Taxonomy ID.
  $vocabulary = taxonomy_get_vocabularies();
  $checklist_vocab_array = array(); /* Change to array('0' => '--none--'); if you want a none option */
  foreach ($vocabulary as $item) {
    $key = $item->vid;
    $value = $item->name;
    $checklist_vocab_array[$key] = $value;
  }

  // Get List Of Content Type.
  $node_type_raw = node_type_get_names();

  // Define Form Field for tagging configuration.
  $form['special_taxonomy_tagging_in_body']['select_node_types'] = array(
    '#default_value' => is_array(variable_get('select_node_types')) ? array_filter(variable_get('select_node_types')) : array(NULL),
    '#options' => $node_type_raw,
    '#type' => 'checkboxes',
    '#title' => t('List of content type in which you want tagging'),
    '#description' => t('List of Content type for special tagging.'),
  );

  $options_taxonomy = array('@' => '@', '#' => '#', '&' => '&', '$' => '$');
  $form['special_taxonomy_tagging_in_body']['special_taxonomy_tagging_in_body_special_taging'] = array(
    '#type' => 'select',
    '#options' => $options_taxonomy,
    '#default_value' => variable_get('special_taxonomy_tagging_in_body_special_taging', '@'),
    '#title' => t('Choose one special character for tagging with taxonomy'),
    '#description' => t('Choose single special character with tagging.'),
  );
  $form['special_taxonomy_tagging_in_body']['taxonomy_list'] = array(
    '#default_value' => is_array(variable_get('taxonomy_list')) ? array_filter(variable_get('taxonomy_list')) : array(NULL),
    '#type' => 'checkboxes',
    '#title' => t('List of current Vocabularies.'),
    '#position' => 'left',
    '#options' => $checklist_vocab_array,
    '#description' => t('List of vocabularies displayed as checkboxes.'),
  );
  $options_special_taxonomy_tagging_in_body_target = array('_blank' => 'Blank', 'none' => 'None');
  $form['special_taxonomy_tagging_in_body']['special_taxonomy_tagging_in_body_target'] = array(
    '#type' => 'select',
    '#options' => $options_special_taxonomy_tagging_in_body_target,
    '#default_value' => variable_get('special_taxonomy_tagging_in_body_target', '_blank'),
    '#title' => t('Target Link'),
    '#description' => t('Target for taxonomy link.'),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_node_insert().
 *
 * This function add node insert and replace taging with name.
 */
function special_taxonomy_tagging_in_body_node_insert($node) {

  // Get All Saved Variables.
  $symbol = variable_get('special_taxonomy_tagging_in_body_special_taging');
  $taxonomy = array_filter(variable_get('taxonomy_list'));
  $special_taxonomy_tagging_in_body_target = variable_get('special_taxonomy_tagging_in_body_target');

  // Define preg replace patteren.
  $patterns = [];
  $replacements = [];

  // Make tagging with search and replace pattern in body field.
  foreach ($taxonomy as $value) {
    $term = taxonomy_get_tree($value);
    foreach ($term as $value) {
      $patterns[] = '/' . $symbol . $value->name . '(\s{1}|$)/i';
      $replacements[] = l($value->name, $GLOBALS['base_url'] . '/taxonomy/term/' . $value->tid, array('attributes' => array('special_taxonomy_tagging_in_body_target' => $special_taxonomy_tagging_in_body_target))) . ' ';
    }
  }

  // Find content type and replace string.
  if (in_array($node->type, array_values(array_filter(variable_get('select_node_types'))))) {
    $body = $node->body[LANGUAGE_NONE][0]['value'];
    $result = preg_replace($patterns, $replacements, $body);
    $node->body[LANGUAGE_NONE][0]['value'] = $result;
    field_attach_update('node', $node);
  }
}

/**
 * Implements hook_node_update().
 *
 * This function add node insert and replace taging with name.
 */
function special_taxonomy_tagging_in_body_node_update($node) {

  // Get All Saved Variables.
  $symbol = variable_get('special_taxonomy_tagging_in_body_special_taging');
  $taxonomy = array_filter(variable_get('taxonomy_list'));
  $special_taxonomy_tagging_in_body_target = variable_get('special_taxonomy_tagging_in_body_target');

  // Define preg replace patteren.
  $patterns = [];
  $replacements = [];

  // Make tagging with search and replace pattern in body field.
  foreach ($taxonomy as $value) {
    $term = taxonomy_get_tree($value);
    foreach ($term as $value) {
      $patterns[] = '/' . $symbol . $value->name . '(\s{1}|$)/i';
      $replacements[] = l($value->name, $GLOBALS['base_url'] . '/taxonomy/term/' . $value->tid, array('attributes' => array('special_taxonomy_tagging_in_body_target' => $special_taxonomy_tagging_in_body_target))) . ' ';
    }
  }

  // Find content type and replace string.
  if (in_array($node->type, array_values(array_filter(variable_get('select_node_types'))))) {
    $body = $node->body[LANGUAGE_NONE][0]['value'];
    $result = preg_replace($patterns, $replacements, $body);
    $node->body[LANGUAGE_NONE][0]['value'] = $result;
    field_attach_update('node', $node);
  }
}
