<?php
/**
 * @file
 * Provide tests of worker drupal functionality.
 *
 * @author Jim Berry ("solotandem", http://drupal.org/user/240748)
 *
 * Notes on trying to test simpletest from within simpletest.
 * The whole issue keys on the constants that are defined per site.
 * For conduit, we have FILE_ROOT, JOB_ROOT, and JOB_URL which are all defined
 * during the process running in the host site (i.e. the site where conduit is
 * installed). Thus, these constants do not refer to the site installed beneath
 * the simpletest directory (in the files directory of the host site).
 *
 * Possible solutions:
 * - use an approach like https.php with a special index.php
 *   (see http://api.drupal.org/api/drupal/modules--simpletest--tests--https.php/7/source)
 * - add a module to conduit with a callback to be invoked while running simpletest
 *   - this piggybacks off of Drupal code that detects whether simpletest is running
 *   - and if so sets the user agent in the http headers
 *   - make a drupal_http_request from the menu callback
 *   - this request runs in a new process and has the constants set properly
 *   - the Browser class does not have any special code to detect simpletest
 *
 *
 *
 *
 *
 * The scan test should also run inside simpletest and create a job directory
 * beneath the simpletest directory.
 *
 */

/**
 * Base worker test case.
 *
 * Worker plugins are expected to extend this test case and test the
 * functionality of their worker review.
 */
class DrupalWorkerTestCase extends WorkerTestCase { // DrupalUnitTestCase { // DrupalWebTestCase { //

  /**
   * Returns SSH key for connecting to git repository.
   *//*
  protected $SSHKey =
'-----BEGIN RSA PRIVATE KEY-----
MIIEowIBAAKCAQEAmXUjvPlBhGuG/+SLHpo8XP0mydX9EJQFpPAXjR6SNnl578Bx
ECc4vqlLcxVnaveyrTp/a99dojQ1KaxM67y9JHIMYh5fCwaUYIttjSixP5JxbuHK
Jg5BgWMB/PYxnyoWx7oJi931YA7en735jhvZHk9S4d1KUxhDammIqBMfL11iCcS+
XKNey6Y0FGuIfIXf93RYcQ+BqdMjbUryBsyUeltpPjbZ/j7ydNMwBcJ9PDnY3OC2
Mpdo7Ixed14pDOkSahtbQgp4qgMCPoJB235QvdA1GlbMm6QrdlQh1TerP983Y6yc
o2ktIrT3WlK8OZiurtIY9Dm19Z9GKt1snqUoJQIDAQABAoIBADq1nxugPNmdjcN+
u17U4T0uONXFQZFDIDmvBUOfK48dwHHiLR9h8gq3mD8KNEuvQjOWCsPJa/gvgxtT
aQZTagV0gJpVRkVgmgmprhrwM4e/zhf+2CjhEVyf9VXDFs7u+lIlMZvKKiM67R8u
PjiJHPLEpE/3KoVJ5hjjET5EOo0S1FM29JFRFIVNhkYX1THeb0M1XrtJRH0KWweG
uYPJxGRRyvi5ARdrhWQbHOxba8xuw55vDtoxZoHfH2A6Hc56xrDhNQmzKpa9WRzg
/VO36kHNWQ72lGtm1rJNYkkZlqlKw10vUgcNDO6yfbOxh2k/DLoBfJ4kZ5RkgN1V
ppKrrK0CgYEAxnxPLSqGoNklvYss0UT5j6llm0p2xfdmPYeL+Loqb+i+8+va4suc
Uzn+VEoeBlrMqR36B25V8lu8Bfcfzy9xefE9mzKhIaGBjN76BWLl50FFAu5rVPD6
JCxcNlDga8uNENowhqJGFnW6uhU02AxU9X4gA0D44BYBUnRLO9VWtjcCgYEAxeyl
XP+dxQ9TH7kJq7vLUcTD08zrqaHLabuKIry9A6Pa2Yol37r/CUwKa7EaHWErrWu+
EEqwzuv+naFr8G27LNHHDcf1YUPJZAixiMj1Dz3WOMt3xZyFOt6Oc/YAe/DUbQIf
DG8HS+9B+NblO+J1w4hWc8Kejr2/vCFs9Hi0ZoMCgYEAj0ublc4H2AQtPQRHXOXh
DhiL5GsECLQtueor4Wv1y0lK4qq6IdZBi8xoks3Xk1rmOooLwmWj4w7bVast6dQk
ppbFlVAeCDujXeJ0uoLF3AjBG/aownAfBxKHmCcXfns74pjDQ8/PrdNc9Y7t0bRF
ed6OmgrEInOAjNisoAvLSE0CgYAczuQG1EHfg+qCbIlm0K+4WB50vpfymdUkr6Jc
igIs/HWHQl9e4DXs4X+Gy0FU02brGAqTDnwLsjfeM7elSCN9U49YhylFHfu7LrTA
hxd8P3Dl1V+6iJyvw+MSJ9VMNPKGZ0+jnKmAOPPuR0EYZU7kxfxnXwV7G01EEc1t
DACeBwKBgCtBaYlLrUKBTxVcB5B8pJMCzD0fjhWU4IE2hOCf6AB2LRq+ZdTNdPLt
KGE0VJD3I7ZAmFp/sZwponMrqFswgrvs2rj0l3KQAj1Bg0K0b69s97N93BHdu7bn
B8Xd6WsjTohYGm1BdpeUUQx7MPbdNv1F6cB0DCTEfel4OklcXlnK
-----END RSA PRIVATE KEY-----
';*/

  protected function getProperties() {
    // Set the sample patch url.
    $patch_url = url('', array('absolute' => TRUE)) . drupal_get_path('module', 'worker') . '/tests/test-readme.patch';

    // Create the conduit server tracking item.
    $item = new stdClass();
    $item->item_id = 32;
    $item->data = array(
      'nid' => 57,
      'vid' => 74,
      'delta' => 0,
    );

    // Create the job properties array.
    $properties = array(
      'verbose' => FALSE,
      'context' => 3, // Lines above-and-below syntax error that will be stored.
      'database' => 'mysql',
      'version' => 7,
      'plugin' => 'scan',

      'path' => array(
        '',
      ),
      'mask' => '/\.(php|inc|install|module|test)$/',
      'nomask' => '/(\.\.?|CVS)$/',

      'setup' => array(),
      'variables' => array(),
      'newline' => 'unix',

      'ssh' => array(
        array(
          'key' => $this->SSHKey,
          'host' => 'github.com',
          'user' => 'git',
          'port' => 22,
        ),
      ),
      'vcs' => array(
        'test' => 'git://git@github.com:boombatower/test.git/master',
//         '' => 'cvs://:pserver:anonymous:anonymous@cvs.drupal.org:/cvs/drupal:drupal:HEAD',
      ),
      'patch' => array(
        $patch_url => 'test',
      ),

      'item' => $item,
    );

    return $properties;
  }
}

/**
 * Worker scan test case.
 *
 * This test will scan the vcs project files per the path, mask and nomask
 * parameters and return the list of test case classes.
 */
class DrupalWorkerScanTestCase extends DrupalWorkerTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Drupal worker scan plugin handling',
      'description' => 'Ensure that the setting, parsing, and execution of tasks related to properties works properly.',
      'group' => 'Conduit',
    );
  }

  protected function setUp() {
    sdp(__METHOD__); // Call here to set $path for subsequent calls.
    drupal_load('module', 'conduit');
    drupal_load('module', 'worker');
    drupal_load('module', 'worker_drupal');
    parent::setUp('conduit', 'worker', 'worker_drupal');
  }

  protected function testScan() {
    worker_include('job');
    $properties = $this->getProperties();
    $this->checkScan($properties);
  }

  protected function checkScan(array $properties) {
    // Ensure that the job plugin can be loaded.
    $plugin = worker_plugins_get('worker', $properties['plugin']);
    $this->assertNotNull($plugin, 'Plugin is not NULL');
    if ($plugin) {
      $this->assertEqual($plugin['title'], 'Drupal scan', 'Plugin title is "Drupal scan."');
    }

    // Add php file to test repository on github with test case classes.
    // Scan the test project.
    // Confirm the list of classes.
    $results = worker_perform($properties);
    sdp($results, '$results');
    $this->assertNotNull($results, 'Results array is not NULL');
    $this->assertEqual($results['status'], 'success', 'Result status is success');
    $this->assertNotNull($results['result']['classes'], 'Scan classes array is not NULL');
    $this->assertEqual($results['result']['classes'][0], 'SampleOneTestCase', 'Scan class is "SampleOneTestCase"');
    $this->assertEqual($results['result']['classes'][1], 'SampleTwoTestCase', 'Scan class is "SampleTwoTestCase"');
  }
}

/**
 * Worker plumber test case.
 *
 * This test will be passed a properties array with the list of test case classes
 * returned by a previously run scan job.
 */
class DrupalWorkerPlumberTestCase extends DrupalWorkerTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Drupal worker plumber plugin handling',
      'description' => 'Ensure that the setting, parsing, and execution of tasks related to properties works properly.',
      'group' => 'Conduit',
    );
  }

  protected function setUp() {
    solotandem_debug_clear();
    sdp(__METHOD__); // Call here to set $path for subsequent calls.
    sdp(variable_get('file_public_path', ''), 'file_public_path after __METHOD__');
    sdp(file_directory_path(), 'file_directory_path');
    drupal_load('module', 'conduit');
    drupal_load('module', 'worker');
    drupal_load('module', 'worker_drupal');
    drupal_load('module', 'worker_drupal_test');
    parent::setUp('conduit', 'worker', 'worker_drupal', 'worker_drupal_test');
  }

  protected function testPlumber() {
    worker_include('job');
    $properties = $this->getProperties();
//     $properties['vcs'] = array(
//       '' => 'cvs://:pserver:anonymous:anonymous@cvs.drupal.org:/cvs/drupal:drupal:HEAD',
//       'sites/default/modules/test' => 'git://git@github.com:boombatower/test.git/master',
//     );

    $extra = array(
      'plugin' => 'plumber',
      'classes' => array( // test classes to run
        'SampleOneTestCase',
        'SampleTwoTestCase',
      ),
      'statuses' => array('fail', 'exception', 'debug'), // assertion statuses to consider relevant to store.
      'context' => 5, // context of assertion messages around relevant (in this example pass assertions) that should be forced as relevant.
      'vcs' => array(
        '' => 'cvs://:pserver:anonymous:anonymous@cvs.drupal.org:/cvs/drupal:drupal:HEAD',
        'sites/default/modules/test' => 'git://git@github.com:boombatower/test.git/master',
      ),
      'patch' => array(),
    );
    $properties = $extra + $properties;
    sdp($properties, '$properties');
    sdp(var_export($properties, TRUE));

    $this->checkPlumber($properties);
  }

  protected function checkPlumber(array $properties) {
    // Ensure that the job plugin can be loaded.
    $plugin = worker_plugins_get('worker', $properties['plugin']);
    $this->assertNotNull($plugin, 'Plugin is not NULL');
    if ($plugin /*= worker_plugins_get('worker', $properties['plugin'])*/) {
      sdp($plugin, '$plugin');
      $this->assertEqual($plugin['title'], 'Drupal plumber', 'Plugin title is "Drupal plumber."');
    }

    // Save properties to job.php.
    file_put_contents(JOB_URL . '/job.php', '<?php $properties = ' . var_export($properties)); // @todo FILE_ROOT?
    module_load_include('inc', 'worker', 'worker.drush');
    $command = 'drush wp ' . JOB_URL . '/job.php';
    // Execute the command and capture the output and status.
    exec($command, $output, $status);
    sdp($status, '$status');
    sdp($output, '$output');
    return;

    // Review the output of tests run to confirm they ran succesfully.
    // Is there a log file we can review for the number of assertions and the
    // number of passes?
    $results = worker_perform($properties); // = plumber_perform($properties);
    $this->assertNotNull($results, 'Results array is not NULL');
    sdp($results, '$results');

    $url = url('', array('absolute' => TRUE)); // This is 'http://conduit.d7x.loc/'
    sdp($url, '$url');
    // Look at JOB_URL to see if it has the start of the string.
    // If this was a webTestCase, then we could use drupal_get().
    module_load_include('module', 'worker_drupal_test');
    $result = drupal_http_request($url . 'worker_drupal/test/1/2');
    sdp($result, '$result');

    // sites/conduit.d7x.loc/files/simpletest/266802/job/install.conduit.php
  }
}

/**
 * Worker property test case.
 *
 * This test will evaluate any Drupal-specific properties.
 *
 * @todo This is copied from worker.test and has not been modified.
 */
class DrupalWorkerPropertyTestCase extends DrupalWorkerTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Drupal worker property handling',
      'description' => 'Ensure that the setting, parsing, and execution of tasks related to properties works properly.',
      'group' => 'Conduit',
    );
  }

  protected function setUp() {
    sdp(__METHOD__); // Call here to set $path for subsequent calls.
    drupal_load('module', 'conduit');
    drupal_load('module', 'worker');
    parent::setUp('conduit', 'worker');
  }

  protected function testProperty() {
    worker_include('job');
    $properties = $this->getProperties();
    $this->checkDatabase($properties);
    $this->checkVersion($properties);
    $this->checkPlugin($properties);
    $this->checkVerbose($properties);
    $this->checkScope($properties);
    $this->checkSetup($properties);
    $this->checkVariables($properties);
    $this->checkSSH($properties);
    $this->checkVCS($properties);
    $this->checkPatch($properties);
//     $this->check($properties);
//     $this->check($properties);
//     $this->check($properties);
//     $this->check($properties);
  }

  protected function checkDatabase(array $properties) {}
  protected function checkVersion(array $properties) {}

  protected function checkPlugin(array $properties) {
//     $properties = array(
//       'database' => 'mysql',
//       'version' => 7,
//       'plugin' => 'dscan',
//     );
    // Ensure that the job plugin can be loaded.
    $plugin = worker_plugins_get('worker', $properties['plugin']);
    $this->assertNotNull($plugin, 'Plugin is not NULL');
    if ($plugin = worker_plugins_get('worker', $properties['plugin'])) {
      sdp($plugin, '$plugin');
      $this->assertEqual($plugin['title'], 'Drupal scan', 'Plugin title is "Drupal scan."');
    }
  }

  protected function checkVerbose(array $properties) {
//     $properties['verbose'] = TRUE;
    $results = worker_perform($properties);
    sdp($results, '$results');
  }

  protected function checkScope(array $properties) {}
  protected function checkSetup(array $properties) {}
  protected function checkVariables(array $properties) {}

  protected function checkSSH(array $properties) {}

  protected function checkVCS(array $properties) {
    foreach ($properties['vcs'] as $path => $repository) {
      sdp($path, '$path');
      $this->assertTrue(is_dir(JOB_ROOT . '/' . $path), "Directory exists for repository to be stored at path '$path.'");
      switch ($path) {
        case 'conduit':
          $module = 'README';
          break;

        default:
          // @todo A module file with the same name as the last path element may not always exist.
          $module = substr($path, strrpos($path, '/')) . '.module';
          break;
      }
      sdp($module, '$module');
      $this->assertTrue(file_exists(JOB_ROOT . '/' . $path . '/' . $module), "Module file '$module' exists in directory.");
    }
  }

  protected function checkPatch(array $properties) {
    $readme = file_get_contents(JOB_ROOT . '/test/README');
    sdp($readme, '$readme');
    $this->assertEqual($readme, "sample text that has been modified\n", 'Patch was applied to README in conduit directory.');
  }

//     protected function check(array $properties) {}
//     protected function check(array $properties) {}
//     protected function check(array $properties) {}
//     protected function check(array $properties) {}
}
