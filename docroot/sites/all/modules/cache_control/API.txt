Cache_control API: how to interact with cache control

Relevant hooks implemented by cache_control:

hook_init():
detects whether or not the pageload will be cached and takes care of sending
appopriate HTTP headers and setting suitable execution context for the pageload

hook_exit():
if the pageload is to be cached, implementation of hook_init() will have set the
execution context to that of an anonymous user. The implementation of
hook_exit() restores the execution context in order to ensure cache_control
doesn't break any sessions.

hook_cron():
cleans up obsolete (older than 1 day) page component and rebuildable form
records

hook_theme():
defines a theme (cache_control_anonymous_wrapper) for creating (hidden) wrappers
for anonymous content. These wrappers are brought up by cache_control.js upon
need.
The theme's default implementation is the template
cache_control_anonymous_wrapper.tpl.php

hook_cache_control(): Custom hook implemented by cache_control. This hook should
be invoked by cache-aware modules in order to find out if the current pageload
will be cached and to record the components that may need rebuilding for
authenticated users.
The implementation of this hook stores the data needed to dynamically generate
personalized content for each user on cached pages. The data is used by the AJAX
backend.
For more information, see the comment block of function
cache_control_cache_control()

An example of usage in a module:
--------------------------------
function mymodule_generate_links($arg1, $arg2) {
  $id = 'someIdForTheHtmlWrapper';
  $classes = 'someClass';
  ...
  //do what you would normally do when preparing to generate the final output,
in this example we're generating some links
  $links = ...
  ...

  $output = '';
  //Before generating the final output, notify cache control
  $cached = module_invoke('cache_control', 'cache_control',
'mymodule_personalized_links', 'mymodule_generate_links', func_get_args());

  if ($cached) {
	//This pageload is cached, so we're storing the content for the anonymous
	//user

	//As a placeholder (that will be replaced with either the anonymous content
	//or personalized content), we show a throbber
	//just an example, you need to implement your own placeholders
	//(just make sure they have the HTML id)
	$output = theme('throbber', $id);

	$id .= '-anonymous';
	$classes .= ' cacheControlAnonymous';
  }

  //This is the regular output you would generate anyway.
  //If the pageload happens to be cached, it's just generated with such id and
  //classes that cache_control may find it in the page source later.
  $output .= theme('links', $links, array('id' => $id, 'class' => $classes));

  return $output;
}

Hooks offered by cache_control:

hook_cache_control_cached_pageload(): informs other modules that the result of
the current pageload will be cached. The modules may react e.g. by inserting JS
and CSS files that may be required by authenticated users but are normally not
included during an anonymous pageload.
An example of an implementation in a module:

function YOURMODULE_cache_control_cached_pageload() {

  if (module_exists('wysiwyg')) {
    //Includes needed WYSIWYG JS's
    $profile = wysiwyg_get_profile(1);
    if ($profile) {
      $theme = wysiwyg_get_editor_themes($profile,
(isset($profile->settings['theme']) ? $profile->settings['theme'] : ''));

      // Add plugin settings (first) for this input format.
      wysiwyg_add_plugin_settings($profile);
      // Add profile settings for this input format.
      wysiwyg_add_editor_settings($profile, $theme);
    }
  }


  drupal_add_js(base_path().'misc/collapse.js');
}

hook_cache_control_override_caching(): Allows you to prevent page caching in
your module. Simply return false in the hook implementation if you don't want
the pageload to be cached.

hook_cache_control_get_components(): Allows modules to react before a page
component is built.

hook_cache_control_storage_info(): Allows you to implement your own storage backend.

Hooks offered by cache_control_purge:

hook_cache_control_purge():
Notifies other modules of content updates that may potentially invalidate some
cached pages. For example if a node is updated, a listing that displays the node
teaser may become out of date (the path to the node itself is purged
automatically)
Any implementation of the hook should take in two arguments
Argument 1, $op: one of the following (notice the correspondence to
hook_nodeapi(), hook_comment() and hook_user()):
	'node update'
	'node delete'
	'node insert'
	'comment update'
	'comment insert'
	'comment delete'
	'comment unpublish'
	'comment publish'
	'user update'
Argument 2, $content: whatever was passed to corresponding hook node object for
nodeapi, comment object or array for comment operations, or user object for user
operations)

Other useful functions offered by cache_control_purge:

cache_control_purge_purge_path($path): Purges a path from the cache. Note that
varnish (and other reverse proxies) operate on paths the user requests, which
usually is an URL alias. Therefore, when purging a path, you usually want to
pass the alias of the path to this function instead of the internal drupal path
