<?php
/**
 * @file
 * Cache Control SQL backend.
 *
 */

/**
 * Implements hook_cache_control_storage_info().
 */
function cache_control_sql_cache_control_storage_info() {
  return array(
    'cache_control_sql' => array(
      'name' => t('SQL storage'),
      'storage_class' => 'CacheControlSQLStorage',
    ),
  );
}

class CacheControlSQLStorage implements CacheControlStorage {

  public function getPaths() {
    $paths = array();

    $result = db_query("SELECT * FROM {cache_control_allow_cache} ORDER BY path");

    foreach ($result as $row) {
      $paths[] = $row;
    }

    return $paths;
  }

  public function getPath($path) {
    $sql = "SELECT * FROM {cache_control_allow_cache} WHERE path = :path";

    $cache_item = db_query($sql, array(':path' => $path))->fetch();

    return $cache_item;
  }

  public function addPath($path, $type = 'router', $ttl = 0) {
    db_insert('cache_control_allow_cache')->fields(array('path' => $path, 'type' => $type, 'ttl' => intval($ttl)))->execute();
  }

  public function deletePath($path) {
    db_delete('cache_control_allow_cache')->condition('path', $path, '=')->execute();
  }

  public function setPathTTL($path, $ttl) {
    db_update('cache_control_allow_cache')
     ->fields(array('ttl' => $ttl))
     ->condition('path', $path, '=')
     ->execute();
  }

  public function addPageComponent($component) {
    $path = $component['path'];
    $query_md5 = md5($component['query']);
    $key = $component['key'];

    db_merge('cache_control_page_component')
    ->key(array('path' => $path, 'query_md5' => $query_md5, 'cache_key' => $key))
    ->fields(array(
      'query' => $component['query'],
      'function' => $component['function'],
      'arguments' => $component['arguments'],
      'expires' => $component['expires'],
      'weight' => $component['weight'],
    ))
    ->execute();
  }

  public function getPageComponents($path, $query) {
    $query_md5 = md5($query);

    $components = array();

    $result = db_query("SELECT * FROM {cache_control_page_component} WHERE path = :path AND query_md5 = :query_md5 ORDER BY path", array(':path' => $path, ':query_md5' => $query_md5));

    foreach ($result as $row) {
      $component = array(
        'path' => $row->path,
        'query' => $row->query,
        'key' => $row->cache_key,
        'function' => $row->function,
        'arguments' => $row->arguments,
        'expires' => $row->expires,
        'weight' => $row->weight
      );

      $components[] = $component;
    }

    return $components;
  }

  public function deleteExpiredComponents() {
    db_delete('cache_control_page_component')->condition('expires', REQUEST_TIME, '<')->execute();
  }

  public function addRebuildableForm($form_build_id, $arguments, $expires) {
    db_insert('cache_control_rebuild_form')->fields(array('form_build_id' => $form_build_id, 'arguments' => $arguments, 'expires' => $expires))->execute();
  }

  public function getRebuildableForm($form_build_id) {
    return db_query("SELECT * FROM {cache_control_rebuild_form} WHERE form_build_id = :id", array(':id' => $form_build_id))->fetchAssoc();
  }

  public function deleteExpiredForms() {
    db_delete('cache_control_rebuild_form')->condition('expires', REQUEST_TIME, '<')->execute();
  }
}