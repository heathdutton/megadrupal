<?php
/**
 * @file
 * Cache Control MongoDB backend.
 *
 */

/**
 * Implements hook_cache_control_storage_info().
 */
function cache_control_mongodb_cache_control_storage_info() {
  return array(
    'cache_control_mongodb' => array(
      'name' => t('MongoDB storage'),
      'storage_class' => 'CacheControlMongoStorage',
    ),
  );
}

class CacheControlMongoStorage implements CacheControlStorage {
  /**
   * Components collection
   * @var MongoCollection
   */
  private $components;

  /**
   * Cacheable paths collection
   * @var MongoCollection
   */
  private $paths;

  /**
   * Rebuildable forms collection
   * @var MongoCollection
   */
  private $forms;

  function __construct() {
    //Get handle on the components collection
    $components = mongodb_collection('cache_control.components');

    $components->ensureIndex(array('path' => 1, 'query' => 1, 'key' => 1));
    $components->ensureIndex(array('expires' => 1));
    $components->ensureIndex(array('weight' => 1));

    $this->components = $components;

    //Get handle on the cacheable paths collection
    $paths = mongodb_collection('cache_control.paths');

    $paths->ensureIndex(array('path' => 1), array('unique' => TRUE));
    $paths->ensureIndex(array('type' => 1));

    $this->paths = $paths;

    //Get handle on the rebuildable paths collection
    $forms = mongodb_collection('cache_control.forms');

    $forms->ensureIndex(array('form_build_id' => 1), array('unique' => TRUE));
    $forms->ensureIndex(array('expires' => 1));

    $this->forms = $forms;
  }

  public function getPaths() {
    $cursor = $this->paths->find()->sort(array('path' => 1));

    $paths = array();

    foreach ($cursor as $item) {
      $path = new StdClass();
      $path->path = $item['path'];
      $path->ttl = $item['ttl'];
      $path->type = $item['type'];

      $paths[] = $path;
    }

    return $paths;
  }

  public function getPath($path) {
    $result = $this->paths->findOne(array('path' => $path));

    if (!$result) {
      return FALSE;
    }

    $path = new StdClass();
    $path->path = $result['path'];
    $path->ttl = $result['ttl'];
    $path->type = $result['type'];

    return $path;
  }

  public function addPath($path, $type = 'router', $ttl = 0) {
    $this->paths->insert(array('path' => $path, 'type' => $type, 'ttl' => intval($ttl)));
  }

  public function deletePath($path) {
    $this->paths->remove(array('path' => $path));
  }

  public function setPathTTL($path, $ttl) {
    $update = array('$set' => array('ttl' => intval($ttl)));
    $this->paths->update(array('path' => $path), $update);
  }

  public function addPageComponent($component) {
    $this->components->update(
      array('path' => $component['path'], 'query' => $component['query'], 'key' => $component['key']),
      array('$set' => $component),
      array('upsert' => TRUE)
    );
  }

  public function getPageComponents($path, $query) {
    $cursor = $this->components->find(array('path' => $path, 'query' => $query))->sort(array('weight' => 1));

    return iterator_to_array($cursor);
  }

  public function deleteExpiredComponents() {
    $this->components->remove(array('expires' => array('$lt' => REQUEST_TIME)));
  }

  public function addRebuildableForm($form_build_id, $arguments, $expires) {
    $form = array(
      'form_build_id' => $form_build_id,
      'arguments' => $arguments,
      'expires' => $expires
    );

     $this->forms->update(
      array('form_build_id' => $form_build_id),
      array('$set' => $form),
      array('upsert' => TRUE)
    );

  }

  public function getRebuildableForm($form_build_id) {
    return $this->forms->findOne(array('form_build_id' => $form_build_id));
  }

  public function deleteExpiredForms() {
    $this->forms->remove(array('expires' => array('$lt' => REQUEST_TIME)));
  }
}