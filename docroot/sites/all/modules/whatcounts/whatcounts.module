<?php
// $Id$

// Hook Implementations

/**
 * Implements hook_help().
 */
function whatcounts_help($path = '', $arg) {
  $output = '';

  switch ($path) {
    case 'admin/help#whatcounts':
      $output = '<p>' . t('Provides un/subscribe blocks for WhatCounts lists.') . '</p>';
      $output .= nl2br(check_plain(file_get_contents(drupal_get_path('module', 'whatcounts') . '/README.txt')));
      break;
  }
  return $output;
}

/**
 * Implements hook_permission().
 */
function whatcounts_permission() {
  return array(
    'administer whatcounts' => array(
      'title' => t('Administer WhatCounts'),
      'description' => t('Allow users to administer WhatCounts'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function whatcounts_menu() {
  $items = array();

  $items['admin/people/whatcounts'] = array(
    'title' => 'WhatCounts Subscriptions Admin',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('whatcounts_manage_form'),
    'access arguments' => array('administer whatcounts'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/people/whatcounts'] = array(
    'title' => 'WhatCounts',
    'description' => 'Configure WhatCounts module settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('whatcounts_admin'),
    'access arguments' => array('administer whatcounts'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_block_info().
 */
function whatcounts_block_info() {
  $blocks[0] = array(
    'info' => t('WhatCounts: Subscribe Block'),
  );

  $blocks[1] = array(
    'info' => t('WhatCounts: Unsubscribe Block'),
  );

  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function whatcounts_block_configure($delta = '') {
  $form['preamble']['preamble_text'] = array(
    '#type' => 'text_format',
    '#base_type' => 'textarea',
    '#title' => t('Preamble text'),
    '#description' => t('Enter some content to precede the block.'),
    '#default_value' => variable_get('whatcounts_' . $delta . '_preamble_text', ''),
    '#format' => variable_get('whatcounts_' . $delta . '_preamble_format', filter_default_format()),
    '#rows' => 5,
  );

  if ($delta == 0) {
    $form['subscribed']['subscribed_text'] = array(
      '#type' => 'text_format',
      '#base_type' => 'textarea',
      '#title' => t('Already subscribed text'),
      '#description' => t('Provide some text to display in case the user is already subscribed. Leave blank if you want the block to disappear altogether.'),
      '#default_value' => variable_get('whatcounts_' . $delta . '_subscribed_text', ''),
      '#format' => variable_get('whatcounts_' . $delta . '_subscribed_format', filter_default_format()),
      '#rows' => 5,
    );
  }

  $form['width'] = array(
    '#type' => 'textfield',
    '#title' => t('Width of display fields'),
    '#description' => t('Enter the width of the display fields.'),
    '#default_value' => variable_get('whatcounts_' . $delta . '_width', 50),
  );

  return $form;
}

/**
 * Implements hook_block_save().
 */
function whatcounts_block_save($delta = '', $edit = array()) {
  variable_set('whatcounts_' . $delta . '_preamble_text', $edit['preamble_text']['value']);
  variable_set('whatcounts_' . $delta . '_preamble_format', $edit['preamble_text']['format']);
  if ($delta == 0) {
    variable_set('whatcounts_' . $delta . '_subscribed_text', $edit['subscribed_text']['value']);
    variable_set('whatcounts_' . $delta . '_subscribed_format', $edit['subscribed_text']['format']);
  }
  variable_set('whatcounts_' . $delta . '_width', $edit['width']);
  return;
}

/**
 * Implements hook_block_view().
 */
function whatcounts_block_view($delta = '') {
  $block = array(
    'subject' => t('WhatCounts'),
    'content' => whatcounts_block_content($delta),
  );

  return $block;
}

/**
 * Block content callback (from block hook) The block content hook takes an
 * offset, and provides the content for a block to subscribe/unsubscribe
 * to/from a WhatCounts list, as configured by the admin.
 **/
function whatcounts_block_content($delta = '') {
  global $user;

  $defaults = array(
    'value' => '',
    'format' => filter_default_format(),
  );
  $pt = variable_get('whatcounts_' . $delta . '_preamble_text', $defaults['value']);
  $pf = variable_get('whatcounts_' . $delta . '_preamble_format', $defaults['format']);
  $pre = '<div class="preamble">' . check_markup($pt, $pf, '', FALSE) . '</div>';

  if (!empty($user->mail) && _whatcounts_is_subscribed($user->mail)) {
    if ($delta == 0) {
      # is subscribed to the whatcounts listid in question
      $st = variable_get('whatcounts_' . $delta . '_subscribed_text', $defaults['value']);
      $sf = variable_get('whatcounts_' . $delta . '_subscribed_format', $defaults['format']);
      $sub = '<div class="subscribed">' . check_markup($st, $sf, '', FALSE) . '</div>';
      return array(
        'text' => array(
          '#markup' => $sub,
        ),
      );
    }
    else {
      # they are not subscribed
      $form = drupal_get_form('whatcounts_block_form_' . $delta, $user->mail);
      return array(
        'pre' => array(
          '#markup' => $pre,
        ),
        $form,
      );
    }
  }
  else {
    $form = drupal_get_form('whatcounts_block_form_' . $delta);
    return array(
      'pre' => array(
        '#markup' => $pre,
      ),
      $form,
    );
  }
}

// Callback functions

/**
 * Admin settings callback (from menu hook)
 * The admin/settings/whatcounts page provides several  configuration options:
 **/
function whatcounts_admin() {
  $form['whatcounts_basic_options'] = array(
    '#type' => 'fieldset',
    '#title' => t('WhatCounts: Basic Options'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['whatcounts_basic_options']['whatcounts_realm'] = array(
    '#type' => 'textfield',
    '#title' => t('Realm'),
    '#default_value' => variable_get('whatcounts_realm', ''),
  );

  $form['whatcounts_basic_options']['whatcounts_pwd'] = array(
    '#type' => 'textfield',
    '#title' => t('Password'),
    '#description' => t('As set through the api_setup interface'),
    '#default_value' => variable_get('whatcounts_pwd', ''),
  );

  $form['whatcounts_basic_options']['whatcounts_listid'] = array(
    '#type' => 'textfield',
    '#title' => t('List ID'),
    '#default_value' => variable_get('whatcounts_listid', ''),
  );
/*
  $form['whatcounts_basic_options']['whatcounts_slid'] = array(  # the account/list ID
    '#type' => 'textfield',
    '#title' => t('SLID'),
    '#default_value' => variable_get('whatcounts_slid', ''),
    '#size' => 64,
    '#maxlength' => 128,
    '#description' => t('The SLID from your WhatCounts account'),
  );
*/
  $form['whatcounts_basic_options']['whatcounts_domain'] = array(
    '#type' => 'textfield',
    '#title' => t('Service Domain'),
    '#default_value' => variable_get('whatcounts_domain', ''),
    '#size' => 64,
    '#maxlength' => 256,
    '#description' => t('The domain for the WhatCounts service (eg. api.example.com). Do not prefix with "http://".'),
  );

  $form['whatcounts_basic_options']['whatcounts_display_format']  = array(
    '#type' => 'checkbox',
    '#title' => t('Display Format'),
    '#default_value' => variable_get('whatcounts_display_format', 1),
    '#description' => t('Check to display Default Format option'),
  );

  $form['whatcounts_basic_options']['whatcounts_default_format']  = array(
    '#type' => 'radios',
    '#title' => t('Default Format'),
    '#options' => array('plain' => t('Plain'), 'html' => t('HTML')),
    '#default_value' => variable_get('whatcounts_default_format', 'plain'),
  );

  $form['whatcounts_basic_options']['whatcounts_goto'] = array(
    '#type' => 'textfield',
    '#title' => t('Goto URL'),
    '#default_value' => variable_get('whatcounts_goto', ''),
    '#size' => 64,
    '#maxlength' => 256,
    '#description' => t('The default landing page URL (eg. http://api.example.com/bin/newsletter-thank-you)'),
  );

  $form['whatcounts_basic_options']['whatcounts_subscribe_options'] = array(
    '#type' => 'fieldset',
    '#title' => t('Subscribe Options'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['whatcounts_basic_options']['whatcounts_subscribe_options']['whatcounts_display_fields'] = array(
    '#type' => 'fieldset',
    '#title' => t('Subscribe Block display fields'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['whatcounts_basic_options']['whatcounts_subscribe_options']['whatcounts_display_fields']['whatcounts_first'] = array(
    '#type' => 'checkbox',
    '#title' => t('First Name'),
    '#default_value' => variable_get('whatcounts_first', 1),
    '#description' => t('Check to display First Name field'),
  );

  $form['whatcounts_basic_options']['whatcounts_subscribe_options']['whatcounts_display_fields']['whatcounts_last'] = array(
    '#type' => 'checkbox',
    '#title' => t('Last Name'),
    '#default_value' => variable_get('whatcounts_last', 1),
    '#description' => t('Check to display Last Name field'),
  );

  $form['whatcounts_basic_options']['whatcounts_subscribe_options']['whatcounts_display_fields']['whatcounts_company'] = array(
    '#type' => 'checkbox',
    '#title' => t('Company'),
    '#default_value' => variable_get('whatcounts_company', 0),
    '#description' => t('Check to display Company field'),
  );

  $form['whatcounts_basic_options']['whatcounts_subscribe_options']['whatcounts_display_fields']['whatcounts_address1'] = array(
    '#type' => 'checkbox',
    '#title' => t('Address line 1'),
    '#default_value' => variable_get('whatcounts_address1', 0),
    '#description' => t('Check to display Address line 1 field'),
  );

  $form['whatcounts_basic_options']['whatcounts_subscribe_options']['whatcounts_display_fields']['whatcounts_address2'] = array(
    '#type' => 'checkbox',
    '#title' => t('Address line 2'),
    '#default_value' => variable_get('whatcounts_address2', 0),
    '#description' => t('Check to display Address line 2 field'),
  );

  $form['whatcounts_basic_options']['whatcounts_subscribe_options']['whatcounts_display_fields']['whatcounts_city'] = array(
    '#type' => 'checkbox',
    '#title' => t('City'),
    '#default_value' => variable_get('whatcounts_city', 0),
    '#description' => t('Check to display City field'),
  );

  $form['whatcounts_basic_options']['whatcounts_subscribe_options']['whatcounts_display_fields']['whatcounts_state'] = array(
    '#type' => 'checkbox',
    '#title' => t('State'),
    '#default_value' => variable_get('whatcounts_state', 0),
    '#description' => t('Check to display State field'),
  );

  $form['whatcounts_basic_options']['whatcounts_subscribe_options']['whatcounts_display_fields']['whatcounts_zip'] = array(
    '#type' => 'checkbox',
    '#title' => t('Zip'),
    '#default_value' => variable_get('whatcounts_zip', 0),
    '#description' => t('Check to display Zip field'),
  );

  $form['whatcounts_basic_options']['whatcounts_subscribe_options']['whatcounts_display_fields']['whatcounts_country'] = array(
    '#type' => 'checkbox',
    '#title' => t('Country'),
    '#default_value' => variable_get('whatcounts_country', 0),
    '#description' => t('Check to display Country field'),
  );

  $form['whatcounts_basic_options']['whatcounts_subscribe_options']['whatcounts_display_fields']['whatcounts_phone'] = array(
    '#type' => 'checkbox',
    '#title' => t('Phone'),
    '#default_value' => variable_get('whatcounts_phone', 0),
    '#description' => t('Check to display Phone field'),
  );

  $form['whatcounts_basic_options']['whatcounts_subscribe_options']['whatcounts_display_fields']['whatcounts_fax'] = array(
    '#type' => 'checkbox',
    '#title' => t('Fax'),
    '#default_value' => variable_get('whatcounts_fax', 0),
    '#description' => t('Check to display Fax field'),
  );

  $i = 1;
  while ($custom = variable_get('whatcounts_custom' . $i, '')) {
    $form['whatcounts_basic_options']['whatcounts_subscribe_options']['whatcounts_display_fields']['whatcounts_custom' . $i] = array(
      '#type' => 'textfield',
      '#title' => t('Custom field ' . $i),
      '#default_value' => $custom,
      '#size' => 50,
      '#description' => t('Enter a custom field name. Do not prefix the name with "custom_".'),
    );
    $i++;
  }

  $form['whatcounts_basic_options']['whatcounts_subscribe_options']['whatcounts_display_fields']['whatcounts_custom' . $i] = array(
    '#type' => 'textfield',
    '#title' => t('Custom field ' . $i),
    '#default_value' => $custom,
    '#description' => t('Enter a custom field name. Do not prefix the name with "custom_".'),
  );

  $form['whatcounts_basic_options']['whatcounts_subscribe_options']['whatcounts_subscribe_image_button'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display Subscribe image button'),
    '#default_value' => variable_get('whatcounts_subscribe_image_button', 0),
    '#description' => t('Check if you want to display the Subscribe image button.'),
  );

  $form['whatcounts_basic_options']['whatcounts_subscribe_options']['whatcounts_subscribe_image_button_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Subscribe Image Button URL'),
    '#default_value' => variable_get('whatcounts_subscribe_image_button_url', ''),
    '#size' => 64,
    '#maxlength' => 256,
    '#description' => t('Enter the URL for the Subscribe image button.'),
  );

  $form['whatcounts_basic_options']['whatcounts_subscribe_options']['whatcounts_subscribe_button_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Subscribe Button Text'),
    '#default_value' => variable_get('whatcounts_subscribe_button_text', 'Subscribe'),
    '#size' => 50,
    '#maxlength' => 50,
    '#description' => t('Enter text for the Subscribe button.'),
  );

  $form['whatcounts_basic_options']['whatcounts_subscribe_options']['whatcounts_unsubscribe_button'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display Unsubscribe button on WhatCounts: Subscribe Block'),
    '#default_value' => variable_get('whatcounts_unsubscribe_button', 0),
    '#description' => t('Check if you want to enable both Subscribe and Unsubscribe buttons'),
  );

  $form['whatcounts_basic_options']['whatcounts_subscribe_options']['whatcounts_subscribe_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Subscribe URL'),
    '#default_value' => variable_get('whatcounts_subscribe_url', ''),
    '#size' => 64,
    '#maxlength' => 256,
    '#description' => t('Landing page URL for a message to the subscriber. Overrides Goto URL above.'),
  );

  $form['whatcounts_basic_options']['whatcounts_unsubscribe_options'] = array(
    '#type' => 'fieldset',
    '#title' => t('Unsubscribe Options'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['whatcounts_basic_options']['whatcounts_unsubscribe_options']['whatcounts_unsubscribe_image_button'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display Unsubscribe image button'),
    '#default_value' => variable_get('whatcounts_unsubscribe_image_button', 0),
    '#description' => t('Check if you want to display the Unsubscribe image button.'),
  );

  $form['whatcounts_basic_options']['whatcounts_unsubscribe_options']['whatcounts_unsubscribe_image_button_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Unsubscribe Image Button URL'),
    '#default_value' => variable_get('whatcounts_unsubscribe_image_button_url', ''),
    '#size' => 64,
    '#maxlength' => 256,
    '#description' => t('Enter the URL for the Unsubscribe image button.'),
  );

  $form['whatcounts_basic_options']['whatcounts_unsubscribe_options']['whatcounts_unsubscribe_button_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Unsubscribe Button Text'),
    '#default_value' => variable_get('whatcounts_unsubscribe_button_text', 'Unsubscribe'),
    '#size' => 50,
    '#maxlength' => 50,
    '#description' => t('Enter text for the Unsubscribe button.'),
  );

  $form['whatcounts_basic_options']['whatcounts_unsubscribe_options']['whatcounts_subscribe_button'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display Subscribe button on WhatCounts: Unsubscribe Block'),
    '#default_value' => variable_get('whatcounts_subscribe_button', 0),
    '#description' => t('Check if you want to enable both Subscribe and Unsubscribe buttons'),
  );

  $form['whatcounts_basic_options']['whatcounts_unsubscribe_options']['whatcounts_unsubscribe_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Unsubscribe URL'),
    '#default_value' => variable_get('whatcounts_unsubscribe_url', ''),
    '#size' => 64,
    '#maxlength' => 256,
    '#description' => t('Landing page URL for a message to the unsubscriber. Overrides Goto URL above.'),
  );

  $form['whatcounts_basic_options']['whatcounts_unsubscribe_options']['whatcounts_global_optout'] = array(
    '#type' => 'checkbox',
    '#title' => t('Global Opt-Out'),
    '#default_value' => variable_get('whatcounts_global_optout', 1),
    '#description' => t('Remove from all lists in the realm after an unsubscribe request'),
  );

  $form['whatcounts_basic_options']['whatcounts_coppa_compliance'] = array(
    '#type' => 'fieldset',
    '#title' => t('COPPA Compliance'),
    '#collapsible' => TRUE,
    '#collapsed' => !variable_get('whatcounts_coppa', 0),
  );

  $form['whatcounts_basic_options']['whatcounts_coppa_compliance']['whatcounts_coppa'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable COPPA Compliance'),
    '#description' => t('Check to enable the COPPA compliance warning message'),
    '#default_value' => variable_get('whatcounts_coppa', 0),
  );

  $form['whatcounts_basic_options']['whatcounts_coppa_compliance']['whatcounts_coppa_message'] = array(
    '#type' => 'textarea',
    '#title' => t('COPPA compliance warning message'),
    '#columns' => 50,
    '#rows' => 3,
    '#maxlength' => 256,
    '#default_value' => variable_get('whatcounts_coppa_message', t("*The Children's Online Privacy Protection Act (COPPA) requires that we ask for your birth date. We do not save this information. Please enter the date carefully--if you make a mistake, we may be unable to process your request.")),
    '#description' => t('Enter the COPPA compliance warning message'),
    '#required' => FALSE,
  );

  $form['whatcounts_basic_options']['whatcounts_coppa_compliance']['whatcounts_age_verif_failed_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Age Verification Failed URL'),
    '#default_value' => variable_get('whatcounts_age_verif_failed_url', ''),
    '#size' => 64,
    '#maxlength' => 256,
    '#description' => t('Landing page URL for a message to the subscriber who does not meet the age requirement.'),
    '#required' => FALSE,
  );

  $form['whatcounts_advanced_options'] = array(
    '#type' => 'fieldset',
    '#title' => t('WhatCounts: Advanced Options'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['whatcounts_advanced_options']['whatcounts_ssl'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable SSL'),
    '#default_value' => variable_get('whatcounts_ssl', 0),
    '#description' => t('Enable SSL only if the WhatCounts server is configured properly'),
  );

  $form['whatcounts_advanced_options']['whatcounts_debug'] = array(
    '#type' => 'checkbox',
    '#title' => t('Debug Mode'),
    '#default_value' => variable_get('whatcounts_debug', 0),
    '#description' => t('Use Debug Mode if you need to troubleshoot'),
  );

  $form['whatcounts_advanced_options']['whatcounts_curl_options'] = array(
    '#type' => 'fieldset',
    '#title' => t('cURL Options'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['whatcounts_advanced_options']['whatcounts_curl_options']['whatcounts_header'] = array(
    '#type' => 'checkbox',
    '#title' => t('Include Header'),
    '#default_value' => variable_get('whatcounts_header', 0),
    '#description' => t('Check to include the header in the output'),
  );

  $form['whatcounts_advanced_options']['whatcounts_curl_options']['whatcounts_allow_redirects'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow Redirects'),
    '#default_value' => variable_get('whatcounts_allow_redirects', 1),
    '#description' => t('Check to follow Location: header directives'),
  );

  $form['whatcounts_advanced_options']['whatcounts_curl_options']['whatcounts_connect_timeout'] = array(
    '#type' => 'textfield',
    '#title' => t('Connect Timeout'),
    '#default_value' => variable_get('whatcounts_connect_timeout', 10),
    '#description' => t('Enter a connection timeout (seconds)'),
  );

  $form['whatcounts_advanced_options']['whatcounts_curl_options']['whatcounts_dns_cache_timeout'] = array(
    '#type' => 'textfield',
    '#title' => t('DNS Cache Timeout'),
    '#default_value' => variable_get('whatcounts_dns_cache_timeout', 10),
    '#description' => t('Enter a DNS cache timeout (seconds)'),
  );

  $form['whatcounts_advanced_options']['whatcounts_curl_options']['whatcounts_ssl_verify_host'] = array(
    '#type' => 'select',
    '#title' => t('SSL Verify Host'),
    '#options' => array(
      0 => t('Disabled'),
      1 => t('Check the existence of a common name in the SSL peer certificate'),
      2 => t('Check the existence of a common name and also verify that it matches the hostname provided'),
    ),
    '#default_value' => variable_get('whatcounts_ssl_verify_host', 2),
  );

  $form['whatcounts_advanced_options']['whatcounts_curl_options']['whatcounts_ssl_verify_peer'] = array(
    '#type' => 'select',
    '#title' => t('SSL Verify Peer'),
    '#options' => array(
      0 => t('Disabled'),
      1 => t('Check the existence of a common name in the SSL peer certificate'),
      2 => t('Check the existence of a common name and also verify that it matches the hostname provided'),
    ),
    '#default_value' => variable_get('whatcounts_ssl_verify_peer', 2),
  );

  $form['whatcounts_advanced_options']['whatcounts_curl_options']['whatcounts_verbose'] = array(
    '#type' => 'checkbox',
    '#title' => t('Verbose'),
    '#default_value' => variable_get('whatcounts_verbose', 1),
    '#description' => t('Check to enable verbose information'),
  );

/*  
  $form['whatcounts_default_rss'] = array(); # provide RSS option or not (default)
  $form['whatcounts_numblocks'] = array(); # number of blocks to provide
*/

  return system_settings_form($form);
}

/**
 * Implements hook_forms to map the block_content delta-based formIDs
 * onto the build_form function
 **/
function whatcounts_forms($form_id, $args) {
  $forms['whatcounts_block_form_0'] = array(
    'callback' => 'whatcounts_build_form_sub',
  );

  $forms['whatcounts_block_form_1'] = array(
    'callback' => 'whatcounts_build_form_unsub',
  );

  return $forms;
}

/**
 * Callback function used by whatcounts_forms
 **/
function whatcounts_build_form_sub($form_state, $args = array()) {
  drupal_add_js(drupal_get_path('module', 'whatcounts') . '/whatcounts.js');
  drupal_add_css(drupal_get_path('module', 'whatcounts') . '/whatcounts.css');
  $sub_text = variable_get('whatcounts_subscribe_button_text', 'Subscribe');
  $unsub_text = variable_get('whatcounts_unsubscribe_button_text', 'Unsubscribe');
  $width = variable_get('whatcounts_0_width', 50);
  
  $form = array();

  $mail = !empty($args['build_info']['args'][0]) ? $args['build_info']['args'][0] : '';
  $form['email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email'),
    '#size' => $width,
    '#maxlength' => 64,
    '#default_value' => $mail,
  );

  if (variable_get('whatcounts_first', 1)) {
    $form['first'] = array(
      '#type' => 'textfield',
      '#title' => t('First Name'),
      '#size' => $width,
      '#maxlength' => 64,
    );
  }

  if (variable_get('whatcounts_last', 1)) {
    $form['last'] = array(
      '#type' => 'textfield',
      '#title' => t('Last Name'),
      '#size' => $width,
      '#maxlength' => 64,
    );
  }

  if (variable_get('whatcounts_company', 0)) {
    $form['company'] = array(
      '#type' => 'textfield',
      '#title' => t('Company'),
      '#size' => $width,
      '#maxlength' => 64,
    );
  }

  if (variable_get('whatcounts_address1', 0)) {
    $form['address1'] = array(
      '#type' => 'textfield',
      '#title' => t('Address 1'),
      '#size' => $width,
      '#maxlength' => 64,
    );
  }

  if (variable_get('whatcounts_address2', 0)) {
    $form['address2'] = array(
      '#type' => 'textfield',
      '#title' => t('Address 2'),
      '#size' => $width,
      '#maxlength' => 64,
    );
  }

  if (variable_get('whatcounts_city', 0)) {
    $form['city'] = array(
      '#type' => 'textfield',
      '#title' => t('City'),
      '#size' => $width,
      '#maxlength' => 64,
    );
  }

  if (variable_get('whatcounts_state', 0)) {
    $form['state'] = array(
      '#type' => 'textfield',
      '#title' => t('State'),
      '#size' => $width,
      '#maxlength' => 64,
    );
  }

  if (variable_get('whatcounts_zip', 0)) {
    $form['zip'] = array(
      '#type' => 'textfield',
      '#title' => t('Zip'),
      '#size' => $width,
      '#maxlength' => 64,
    );
  }

  if (variable_get('whatcounts_country', 0)) {
    $form['country'] = array(
      '#type' => 'textfield',
      '#title' => t('Country'),
      '#size' => $width,
      '#maxlength' => 64,
    );
  }

  if (variable_get('whatcounts_phone', 0)) {
    $form['phone'] = array(
      '#type' => 'textfield',
      '#title' => t('Phone'),
      '#size' => $width,
      '#maxlength' => 64,
    );
  }

  if (variable_get('whatcounts_fax', 0)) {
    $form['fax'] = array(
      '#type' => 'textfield',
      '#title' => t('Fax'),
      '#size' => $width,
      '#maxlength' => 64,
    );
  }

  $i = 1;
  while ($custom = variable_get('whatcounts_custom' . $i, '')) {
    $form['custom_' . $custom] = array(
      '#type' => 'textfield',
      '#title' => ucfirst($custom),
      '#size' => $width,
      '#maxlength' => 64,
    );
    $i++;
  }

  if (variable_get('whatcounts_display_format', 1)) {
    $form['format'] = array(
      '#type' => 'radios',
      '#title' => t('Format'),
      '#options' => array('plain' => t('Plain Text'), 'html' => t('HTML')),
      '#default_value' => variable_get('whatcounts_default_format', 'plain'),
      '#description' => t('Select a format in which you would like to receive emails.'),
    );
  }
  else {
    $form['format'] = array(
      '#type' => 'hidden',
      '#default_value' => variable_get('whatcounts_default_format', 'plain'),
    );
  }

  if (variable_get('whatcounts_coppa', 0)) {
    $form['birth_date'] = array(
      '#type' => 'date',
      '#title' => t('Your Date of Birth'),
      '#description' => variable_get('whatcounts_coppa_message', t("*The Children's Online Privacy Protection Act (COPPA) requires that we ask for your birth date. We do not save this information. Please enter the date carefully--if you make a mistake, we may be unable to process your request.")),
      '#required' => TRUE,
    );
  }

  if (variable_get('whatcounts_subscribe_image_button', 0)) {
    $form['sub'] = array(
      '#type' => 'image_button',
      '#attributes' => array('src' => variable_get('whatcounts_subscribe_image_button_url', '')),
      '#submit' => array('whatcounts_form_sub'),
    );
  }
  else {
    $form['sub'] = array(
      '#type' => 'submit',
      '#value' => t($sub_text),
      '#submit' => array('whatcounts_form_sub'),
    );
  }

  if (variable_get('whatcounts_unsubscribe_button', 0)) {
    if (variable_get('whatcounts_unsubscribe_image_button', 0)) {
      $form['unsub'] = array(
        '#type' => 'image_button',
        '#attributes' => array('src' => variable_get('whatcounts_unsubscribe_image_button_url', '')),
        '#submit' => array('whatcounts_form_unsub'),
      );
    }
    else {
      $form['unsub'] = array(
        '#type' => 'submit',
        '#value' => t($unsub_text),
        '#submit' => array('whatcounts_form_unsub'),
      );
    }
  }

  $form['#validate'][] = 'whatcounts_form_validate';

  return $form;
}

/**
 * Validation handler for whatcounts_build_form_sub
 */
function whatcounts_form_validate($form, &$form_state) {
  $coppa = variable_get('whatcounts_coppa', 0);
  if ($coppa && $form_state['values']['op'] == 'Subscribe') {
    $age_verif_failed = variable_get('whatcounts_age_verif_failed_url', '');
    if (isset($_COOKIE['WCpreferences'])) {
      drupal_goto($age_verif_failed);
    }
    else {
      if (isset($form_state['values']['birth_date']['year']) &&
          isset($form_state['values']['birth_date']['month']) &&
          isset($form_state['values']['birth_date']['day'])) {
        // Set a cookie if under 18 years of age and redirect to a notice page
        $dob = strtotime($form_state['values']['birth_date']['year'] . '-' .
                         $form_state['values']['birth_date']['month'] . '-' .
                         $form_state['values']['birth_date']['day']);
        $eya = strtotime("now") - (18 * 365 * 24 * 60 * 60) - (4 * 24 * 60 * 60);
        if ($dob > $eya) {
          // Set a cookie which expires in one hour
          setcookie("WCpreferences", 1, REQUEST_TIME + 3600);
          drupal_goto($age_verif_failed);
        }
      }
      else {
        form_set_error('birth_date', t('You must enter Your Date of Birth.'));
      }
    }
  }

  if (!valid_email_address($form_state['values']['email'])) {
    form_set_error('email', t('You must enter a valid Email.'));
  }
}

/**
 * Submit handler for whatcounts_build_form_sub
 */
function whatcounts_form_sub($form, &$form_state) {
  _whatcounts_subscribe($form_state['values']);
  $sub = trim(variable_get('whatcounts_subscribe_url', ''));
  $url = ($sub != '') ? $sub : variable_get('whatcounts_goto', ''); 
  $form_state['redirect'] = $url;
}

/**
 * Callback function used by whatcounts_forms
 **/
function whatcounts_build_form_unsub($form_state, $args = array()) {
  drupal_add_js(drupal_get_path('module', 'whatcounts') . '/whatcounts.js');
  drupal_add_css(drupal_get_path('module', 'whatcounts') . '/whatcounts.css');
  $sub_text = variable_get('whatcounts_subscribe_button_text', 'Subscribe');
  $unsub_text = variable_get('whatcounts_unsubscribe_button_text', 'Unsubscribe');
  $width = variable_get('whatcounts_1_width', 50);
  
  $form = array();

  $mail = !empty($args['build_info']['args'][0]) ? $args['build_info']['args'][0] : '';
  $form['email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email'),
    '#size' => $width,
    '#maxlength' => 64,
    '#default_value' => $mail,
  );

  if (variable_get('whatcounts_subscribe_button', 0)) {
    if (variable_get('whatcounts_display_format', 1)) {
      $form['format'] = array(
        '#type' => 'radios',
        '#title' => t('Format'),
        '#options' => array('plain' => t('Plain Text'), 'html' => t('HTML')),
        '#default_value' => variable_get('whatcounts_default_format', 'plain'),
        '#description' => t('Select a format in which you would like to receive emails.'),
      );
    }
    else {
      $form['format'] = array(
        '#type' => 'hidden',
        '#default_value' => variable_get('whatcounts_default_format', 'plain'),
      );
    }
    if (variable_get('whatcounts_coppa', 0)) {
      $form['birth_date'] = array(
        '#type' => 'date',
        '#title' => t('Your Date of Birth'),
        '#description' => variable_get('whatcounts_coppa_message', t("*The Children's Online Privacy Protection Act (COPPA) requires that we ask for your birth date. We do not save this information. Please enter the date carefully--if you make a mistake, we may be unable to process your request.")),
        '#required' => TRUE,
      );
    }
    if (variable_get('whatcounts_subscribe_image_button', 0)) {
      $form['sub'] = array(
        '#type' => 'image_button',
        '#attributes' => array('src' => variable_get('whatcounts_subscribe_image_button_url', '')),
        '#submit' => array('whatcounts_form_sub'),
      );
    }
    else {
      $form['sub'] = array(
        '#type' => 'submit',
        '#value' => t($sub_text),
        '#submit' => array('whatcounts_form_sub'),
      );
    }
  }

  if (variable_get('whatcounts_unsubscribe_image_button', 0)) {
    $form['unsub'] = array(
      '#type' => 'image_button',
      '#attributes' => array('src' => variable_get('whatcounts_unsubscribe_image_button_url', '')),
      '#submit' => array('whatcounts_form_unsub'),
    );
  }
  else {
    $form['unsub'] = array(
      '#type' => 'submit',
      '#value' => t($unsub_text),
      '#submit' => array('whatcounts_form_unsub'),
    );
  }

  $form['#validate'][] = 'whatcounts_form_validate';

  return $form;
}

/**
 * Submit handler for whatcounts_build_form_unsub
 */
function whatcounts_form_unsub($form, &$form_state) {
  _whatcounts_unsubscribe($form_state['values']['email']);
  $unsub = trim(variable_get('whatcounts_unsubscribe_url', ''));
  $url = ($unsub != '') ? $unsub : variable_get('whatcounts_goto', ''); 
  $form_state['redirect'] = $url;
}

/**
 * This should modify the form at $delta depending on the configuration as set by the admin (in the block's settings)
 */
/*
function whatcounts_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'whatcounts_block_form_0') { 
    $form['email']['#size'] = 20;
    $form['first']['#size'] = 20;
    $form['last']['#size'] = 20;
  }

  if ($form_id == 'whatcounts_block_form_1') { 
    $form['#first'] = '';
    $form['#last'] = '';
    $form['#format'] = variable_get('whatcounts_default_format', 'plain');
  }
}
*/

function whatcounts_manage_form() {
  $form['email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email'),
    '#size' => 50,
    '#maxlength' => 100,
    '#description' => t('Please enter an email address.'),
  );

  $form['test'] = array(
    '#type' => 'submit',
    '#value' => t('Is Email Subscribed?'),
    '#submit' => array('whatcounts_manage_form_test'),
  );

  $form['sub'] = array(
    '#type' => 'submit',
    '#value' => t('Subscribe Email'),
    '#submit' => array('whatcounts_manage_form_sub'),
  );

  $form['unsub'] = array(
    '#type' => 'submit',
    '#value' => t('Unsubscribe Email'),
    '#submit' => array('whatcounts_manage_form_unsub'),
  );

  $form['delete'] = array(
    '#type' => 'submit',
    '#value' => t('Delete Email'),
    '#submit' => array('whatcounts_manage_form_delete'),
  );

  $form['help'] = array(
    '#value' => '<div class="help">' . t('Use this form to manage emails on your WhatCounts list. Test if an email is subscribed using the first submit button. Subscribe an email using the Subscribe Email button. Opt-out an email using the Unsubscribe Email, and remove an email entirely using the Delete Email button.') . '</div>',
  );

  return $form;
}

/**
 * Submit handler for whatcounts_manage_form to test
 */
function whatcounts_manage_form_test($form, &$form_state) {
  $is_subbed = _whatcounts_is_subscribed($form_state['values']['email']);
  $msg = sprintf("WhatCounts status for email address '%s': %s",
  $form_state['values']['email'], $is_subbed ? t('SUBSCRIBED') : t('NOT SUBSCRIBED'));
  drupal_set_message(check_plain($msg));
}

/**
 * Submit handler for whatcounts_manage_form to subscribe
 */
function whatcounts_manage_form_sub($form, &$form_state) {
  $res = _whatcounts_subscribe($form_state['values']);
  $msg = sprintf("WhatCounts subscribed status for email address '%s': %s", $form_state['values']['email'], $res ? t('SUCCESSFUL') : t('FAILED'));
  drupal_set_message(check_plain($msg));
}

/**
 * Submit handler for whatcounts_manage_form to unsubscribe
 */
function whatcounts_manage_form_unsub($form, &$form_state) {
  $res = _whatcounts_unsubscribe($form_state['values']['email']);
  $msg = sprintf("WhatCounts unsubscribed status for email address '%s': %s", $form_state['values']['email'], $res ? t('SUCCESSFUL') : t('FAILED'));
  drupal_set_message(check_plain($msg));
}

/**
 * Submit handler for whatcounts_manage_form to delete
 */
function whatcounts_manage_form_delete($form, &$form_state) {
  $res = _whatcounts_delete($form_state['values']['email']);
  $msg = sprintf("WhatCounts deletion status for email address '%s': %s", $form_state['values']['email'], $res ? t('SUCCESSFUL') : t('FAILED'));
  drupal_set_message(check_plain($msg));
}

// Utility Functions

function _whatcounts_is_subscribed($email) {
  $data = sprintf('cmd=findinlist&realm=%s&pwd=%s&list_id=%s&email=%s',
    variable_get('whatcounts_realm', 'whatcounts'),
    variable_get('whatcounts_pwd', 'password'),
    variable_get('whatcounts_listid', '1'),
    $email
  );

  $str = _whatcounts_curl($data);
  if (preg_match("/$email/", $str)) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

function _whatcounts_subscribe($form_values) {

  $default_format = variable_get('whatcounts_default_format', 'plain');
  $format = ($default_format == 'html') ? 2 : 1;
  $data = sprintf('cmd=sub&realm=%s&pwd=%s&list_id=%s&format=%s&force_sub=1&data=',
    variable_get('whatcounts_realm', 'whatcounts'),
    variable_get('whatcounts_pwd', 'password'),
    variable_get('whatcounts_listid', '1'),
    $format
  );

  $fields = 'email,';
  $fields .= variable_get('whatcounts_first', 1) ? 'first,' : '';
  $fields .= variable_get('whatcounts_last', 1) ? 'last,' : '';
  $fields .= variable_get('whatcounts_company', 0) ? 'company,' : '';
  $fields .= variable_get('whatcounts_address1', 0) ? 'address1,' : '';
  $fields .= variable_get('whatcounts_address2', 0) ? 'address2,' : '';
  $fields .= variable_get('whatcounts_city', 0) ? 'city,' : '';
  $fields .= variable_get('whatcounts_state', 0) ? 'state,' : '';
  $fields .= variable_get('whatcounts_zip', 0) ? 'zip,' : '';
  $fields .= variable_get('whatcounts_country', 0) ? 'country,' : '';
  $fields .= variable_get('whatcounts_phone', 0) ? 'phone,' : '';
  $fields .= variable_get('whatcounts_fax', 0) ? 'fax,' : '';
  $i = 1;
  while ($custom = variable_get('whatcounts_custom' . $i, '')) {
    $fields .= 'custom_' . $custom . ',';
    $i++;
  }
  $fields = substr($fields, 0, strlen($fields) - 1);

  $values = $form_values['email'] . ',';
  $values .= isset($form_values['first']) ? $form_values['first'] . ',' : '';
  $values .= isset($form_values['last']) ? $form_values['last'] . ',' : '';
  $values .= isset($form_values['company']) ? $form_values['company'] . ',' : '';
  $values .= isset($form_values['address1']) ? $form_values['address1'] . ',' : '';
  $values .= isset($form_values['address2']) ? $form_values['address2'] . ',' : '';
  $values .= isset($form_values['city']) ? $form_values['city'] . ',' : '';
  $values .= isset($form_values['state']) ? $form_values['state'] . ',' : '';
  $values .= isset($form_values['zip']) ? $form_values['zip'] . ',' : '';
  $values .= isset($form_values['country']) ? $form_values['country'] . ',' : '';
  $values .= isset($form_values['phone']) ? $form_values['phone'] . ',' : '';
  $values .= isset($form_values['fax']) ? $form_values['fax'] . ',' : '';
  $i = 1;
  while ($custom = variable_get('whatcounts_custom' . $i, '')) {
    $values .= $form_values['custom_' . $custom] . ',';
    $i++;
  }
  $values = substr($values, 0, strlen($values) - 1);

  $data .= $fields . '^' . $values;
  
  $res = _whatcounts_curl($data);
  if (preg_match('/SUCCESS/', $res)) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

function _whatcounts_unsubscribe($email) {
  $global_optout = variable_get('whatcounts_global_optout', 1);
  $list_id = $global_optout ? '0' : variable_get('whatcounts_listid', '1');
  $data = sprintf('cmd=unsub&realm=%s&pwd=%s&list_id=%s&optout=%d&data=%s',
    variable_get('whatcounts_realm', 'whatcounts'),
    variable_get('whatcounts_pwd', 'password'),
    $list_id,
    $global_optout,
    $email
  );

  $res = _whatcounts_curl($data);
  if (preg_match('/SUCCESS/', $res)) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

function _whatcounts_delete($email) {

  $data = sprintf('cmd=delete&realm=%s&pwd=%s&list_id=%s&data=email^%s',
    variable_get('whatcounts_realm', 'whatcounts'),
    variable_get('whatcounts_pwd', 'password'),
    variable_get('whatcounts_listid', '1'),
    $email
  );

  $res = _whatcounts_curl($data);
  if (preg_match('/SUCCESS/', $res)) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

function _whatcounts_curl($data) {
  // DEBUG
  $debug = variable_get('whatcounts_debug', 0);
  if ($debug) {
    _whatcounts_dsm("curl data", $data);
  }

  // POST the data to WhatCounts
  $ssl = variable_get('whatcounts_ssl', 0);
  $protocol = $ssl ? 'https' : 'http';
  $domain = variable_get('whatcounts_domain', 'api.example.com');
  $url = $protocol . '://' . $domain . '/bin/api_web';
  $url .= sprintf('?%s', $data);
  $url = check_url($url);

  $data_array = explode("&", $data);
  foreach ($data_array as $entry) {
    $datum = explode("=", $entry);
    $d[$datum[0]] = $datum[1];
  }

  $curl = curl_init();

  curl_setopt($curl, CURLOPT_HEADER, variable_get('whatcounts_header', 0)); // include header in the output
  curl_setopt($curl, CURLOPT_FOLLOWLOCATION, variable_get('whatcounts_allow_redirects', 1)); // allow redirects

  curl_setopt($curl, CURLOPT_CONNECTTIMEOUT, variable_get('whatcounts_connect_timeout', 10));
  curl_setopt($curl, CURLOPT_DNS_CACHE_TIMEOUT, variable_get('whatcounts_dns_cache_timeout', 10));

  curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, variable_get('whatcounts_ssl_verify_host', 2));
  curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, variable_get('whatcounts_ssl_verify_peer', 2));

  curl_setopt($curl, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($curl, CURLOPT_BINARYTRANSFER, TRUE);

  curl_setopt($curl, CURLOPT_FAILONERROR, TRUE);
  curl_setopt($curl, CURLOPT_VERBOSE, variable_get('whatcounts_verbose', 1));

  curl_setopt($curl, CURLOPT_URL, $url);
  curl_setopt($curl, CURLOPT_POST, TRUE); // set POST method
  curl_setopt($curl, CURLOPT_POSTFIELDS, $data);
  
  // Execute and return string (this should be an empty string '')
  $response = curl_exec($curl);
  
  if ($debug) { 
    _whatcounts_dsm("curl debug", curl_getinfo($curl));
    _whatcounts_dsm("return value", $response); 
  }
  
  // Ignore logging of findinlist requests
  if (!strpos($url, 'cmd=findinlist')) {
    // Log request and response along with errors
    $pwd = variable_get('whatcounts_pwd', 'password');
    $obfuscated_pwd = str_pad('', strlen($pwd), '*');
    $request = preg_replace('/' . preg_quote('pwd=' . $pwd) . '/', 'pwd=' . $obfuscated_pwd, $url);
    $msg = 'URL request: ' . $request . '<br />Return value: ' . $response;
    if (curl_errno($curl))
      watchdog('WhatCounts', check_plain('cURL error ' . curl_errno($curl) . ': ' . curl_error($curl) . '<br />' . $msg), array(), WATCHDOG_ERROR);
    else
      watchdog('WhatCounts', check_plain($msg), array(), WATCHDOG_NOTICE);
  }

  return $response;
}

// Theme Functions

function whatcounts_theme() {
  return array(
    'whatcounts_form' => array(
      'file' => 'whatcounts.module',
      'arguments' => array(
        'form' => NULL,
      ),
    ),
    'whatcounts_block_form' => array(
      'file' => 'whatcounts.module',
      'arguments' => array(
        'form' => NULL,
      ),
    ),
  );
}

function theme_whatcounts_form($form) {
  return '<div class="whatcounts">' . drupal_render($form) . '</div>';
}

function theme_whatcounts_block_form($form) {
  return '<div class="whatcounts">' . drupal_render($form) . '</div>';
}

// Test Functions

function _whatcounts_dsm($msg = '', &$v) {
  ob_start();
  print_r($v);
  drupal_set_message($msg . ': ' . ob_get_contents());
  ob_end_clean();
}
