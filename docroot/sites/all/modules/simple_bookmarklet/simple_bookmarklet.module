<?php

/**
 * Implements hook_init().
 */
function simple_bookmarklet_init() {
  if (isset($_REQUEST['simple_bookmarklet'])) {

    // The header below is necessary for Internet Explorer
    // @see http://tinyurl.com/nm2xyjp
    $header = 'p3p:CP="IDC DSP COR ADM DEVi TAIi ' .
              'PSA PSD IVAi IVDi CONi HIS OUR IND CNT"';
    header($header);
    $GLOBALS['simple_bookmarklet_page_template'] = TRUE;

    // Add static files
    $path = drupal_get_path('module', 'simple_bookmarklet');
    drupal_add_css($path . '/css/simple_bookmarklet_inside.css');
    drupal_add_js($path . '/js/simple_bookmarklet_page.js');
  }
}

/**
 * Implements hook_menu().
 */
function simple_bookmarklet_menu() {
  $items = array();
  $items['admin/config/content/simple_bookmarklet'] = array(
    'title' => 'Bookmarklet',
    'description' => 'Administer bookmarklet settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simple_bookmarklet_admin_settings'),
    'access arguments' => array('administer site configuration'),
  );
  $items['simple_bookmarklet/js'] = array(
    'title' => 'Bookmarklet',
    'page callback' => 'simple_bookmarklet_js',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['simple_bookmarklet/message'] = array(
    'title' => 'Simple Bookmarklet',
    'page callback' => 'theme',
    'page arguments' => array('simple_bookmarklet_message'),
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Which information can be used to prepopulate fields.
 *
 * @return array
 *   The options for prepopulation, whose key is an identifier and value is a
 *   description.
 *
 * @see simple_bookmarklet_admin_settings() 
 */
function _simple_bookmarklet_prepopulate() {
  return array(
    'url' => t('URL of the page'),
    'title' => t('Page title'),
    'selected' => t('Text selected by the user'),
  );
}

/**
 * Page callback for `simple_bookmarklet/js`.
 */
function simple_bookmarklet_js() {
  drupal_add_http_header('Content-Type', 'application/json');

  $node_type = variable_get('simple_bookmarklet_content_type', 'page');

  $js   = url(variable_get('simple_bookmarklet_js', ''),
              array('absolute' => TRUE,
                    'language' => (object) array('language' => FALSE)));
  $css  = url(variable_get('simple_bookmarklet_css', ''),
              array('absolute' => TRUE,
                    'language' => (object) array('language' => FALSE)));
  $css2 = url(drupal_get_path('module', 'simple_bookmarklet') .
              '/css/simple_bookmarklet_outside.css',
              array('absolute' => TRUE,
                    'language' => (object) array('language' => FALSE)));

  $settings = array(
    'authenticated' => user_is_logged_in(),
    'stylesheet' => $css,
    'javascript' => $js,
    'default_stylesheet' => $css2,
    'strings' => array(),
    'prepopulate' => array(),
    'url' => url('node/add/' . $node_type,
                 array('query' => array('simple_bookmarklet' => 1),
                       'absolute' => TRUE)),
  );

  $hidden_fields = variable_get('simple_bookmarklet_hidden_fields', array());
  $fields = _simple_bookmarklet_node_fields($node_type);

  foreach ($fields as $key => $field) {
    if (!in_array($key, array_values($hidden_fields), TRUE)) {
      $value = variable_get('simple_bookmarklet_prepopulate_' . $key, '');
      if (!empty($value)) {
        $settings['prepopulate'][$key] = $value;
      }
    }
  }

  if (!empty($_GET['callback'])) {
    echo $_GET['callback'] . '(' . drupal_json_encode($settings) . ');';
  }
  else {
    echo drupal_json_encode($settings);
  }
}

/**
 * Helper function to get all fields for a node.
 *
 * @return array
 *   array of fields for a given node type (title is included for all of them).
 *
 * @see simple_bookmarklet_admin_settings()
 */
function _simple_bookmarklet_node_fields($node_type) {
  // All nodes have title field, regardless its type, so prepend it as well
  return array('title' => array('label' => t('Title'))) +
         field_info_instances('node', $node_type);
}

/**
 * Form function for item `admin/config/content/simple_bookmarklet`.
 */
function simple_bookmarklet_admin_settings() {
  $node_types = array();

  foreach (node_type_get_types() as $type) {
    $node_types[$type->type] = $type->name;
  }

  $node_type = variable_get('simple_bookmarklet_content_type', 'page');

  $form['simple_bookmarklet_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#description' => t('Title will appear on the bookmarklet window.'),
    '#default_value' => variable_get('simple_bookmarklet_title', ''),
  );
  $form['simple_bookmarklet_css'] = array(
    '#type' => 'textfield',
    '#title' => t('Stylesheet'),
    '#description' => t('An additional stylesheet file to be applied to the
                         bookmarklet container. Relative paths will be
                         translated into absolute ones based on this host.'),
    '#default_value' => variable_get('simple_bookmarklet_css', ''),
  );
  $form['simple_bookmarklet_js'] = array(
    '#type' => 'textfield',
    '#title' => t('JavaScript'),
    '#description' => t('An additional JavaScript file to be applied to the
                         bookmarklet container. Relative paths will be
                         translated into absolute ones based on this host.'),
    '#default_value' => variable_get('simple_bookmarklet_js', ''),
  );
  $form['simple_bookmarklet_content_type'] = array(
    '#type' => 'select',
    '#title' => t('Content type'),
    '#description' => t('Which content types can be created by this bookmarklet.
                         Press <em>Submit</em> button after setting this field
                         in order to update the options below.'),
    '#options' => $node_types,
    '#default_value' => $node_type,
  );

  $fields = array();

  foreach (_simple_bookmarklet_node_fields($node_type) as $key => $field) {
    $fields[$key] = $field['label'];
  }

  $hidden_fields = variable_get('simple_bookmarklet_hidden_fields', array());

  $form['simple_bookmarklet_hidden_fields'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Exclude fields'),
    '#description' => t('Which fields from the chosen content type should
                         <b>not</b> be displayed in the bookmarklet form.'),
    '#options' => $fields,
    '#default_value' => $hidden_fields,
  );

  foreach ($fields as $name => $label) {
    if (!in_array($name, array_values($hidden_fields), TRUE)) {
      $default = variable_get('simple_bookmarklet_prepopulate_' . $name, '');
      $form['simple_bookmarklet_prepopulate_' . $name] = array(
        '#type' => 'select',
        '#title' => t('Pre-populate %field with...', array('%field' => $label)),
        '#options' => _simple_bookmarklet_prepopulate(),
        '#default_value' => $default,
        '#empty_option' => t('None')
      );
    }
  }

  $form['simple_bookmarklet_code_preview'] = array(
    '#markup' => l(t('Drag and drop this link to your bookmarks bar'),
                   simple_bookmarklet_get_code(),
                   array('external' => TRUE, 'absolute' => TRUE)),
  );
  $form['simple_bookmarklet_force_https'] = array(
    '#type' => 'checkbox',
    '#title' => t('Force HTTPS'),
    '#default_value' => variable_get('simple_bookmarklet_force_https', 0),
    '#description' => t('Check this option to always load bookmarklet as HTTPS.
                         If not checked (the default), it will be loaded as
                         HTTPS only if the visited page is under HTTPS.'),
  );

  $form = system_settings_form($form);
  return $form;
}

/**
 * Default code for the bookmarklet.
 *
 * @return string
 *   Minified JavaScript code for the bookmarklet.
 *
 * @see simple_bookmarklet_admin_settings()
 */
function simple_bookmarklet_get_code() {

  $force_https = intval(variable_get('simple_bookmarklet_force_https', 0));
  $js_url = url(drupal_get_path('module', 'simple_bookmarklet') .
                '/js/simple_bookmarklet.js',
                array('absolute' => TRUE,
                      'language' => (object) array('language' => FALSE)));
  $setting_url = url('simple_bookmarklet/js',
                     array('query' => array('callback' => '?'),
                           'absolute' => TRUE));
  $timestamp = time(); // Avoids cache

  $js = "javascript:(
           function() {
             window.simpleBookmarkletProtocol =
             (
               ((document.location.protocol === 'https:') || $force_https) ?
               'https' :
               'http'
             );
             var p = window.simpleBookmarkletProtocol;
             window.simpleBookmarkletURL = '$setting_url'.replace(/^https?/, p);
             if (window.simpleBookmarklet !== undefined) {
               simpleBookmarklet();
             }
             else {
               var src = '$js_url?$timestamp'.replace(/^https?/, p);
               var script = document.createElement('script');
               script.src = src;
               document.body.appendChild(script);
             }
           }
         )();";

  return str_replace('var', 'var ', preg_replace('/\s/', '', $js));
}

/**
 * Implements hook_theme().
 */
function simple_bookmarklet_theme() {
  $path = drupal_get_path('module', 'simple_bookmarklet') . '/theme';
  return array(
    'simple_bookmarklet_html' => array(
      'template' => 'simple-bookmarklet-html',
      'path' => $path,
      'render element' => 'html',
    ),
    'simple_bookmarklet_page' => array(
      'template' => 'simple-bookmarklet-page',
      'path' => $path,
      'render element' => 'page',
    ),
    'simple_bookmarklet_message' => array(
      'template' => 'simple-bookmarklet-message',
      'path' => $path,
    ),
  );
}

/**
 * Implements hook_preprocess_html().
 */
function simple_bookmarklet_preprocess_html(&$variables, $hook) {
  if (!empty($GLOBALS['simple_bookmarklet_page_template'])) {
    $variables['theme_hook_suggestions'][] = 'simple_bookmarklet_html';
    $title = t(variable_get('simple_bookmarklet_title', ''));
    $variables['simple_bookmarklet_title'] = $title;
    $variables['simple_bookmarklet_messages'] = array();
  }
}

/**
 * Implements hook_preprocess_page().
 */
function simple_bookmarklet_preprocess_page(&$variables, $hook) {
  if (!empty($GLOBALS['simple_bookmarklet_page_template'])) {
    $variables['theme_hook_suggestions'][] = 'simple_bookmarklet_page';
  }
}

/**
 * Implements hook_form_alter().
 *
 * Hide chosen fields from display and prepopulate some fields.
 */
function simple_bookmarklet_form_alter(&$form, $form_state, $form_id) {
  $fid = variable_get('simple_bookmarklet_content_type', 'page') . '_node_form';
  if (!empty($GLOBALS['simple_bookmarklet_page_template'])
      && $form_id == $fid) {

    /*
       Prepopulate fields
       FIXME Not sure if all cases are handled here or if it's the best approach
       Maybe use entityreference_prepopulate? Or prepopulate?
       Functions from Field API? From Entity API? From both?
    */
    if (isset($_REQUEST['simple_bookmarklet_prepopulate'])) {
      $prepopulate = $_REQUEST['simple_bookmarklet_prepopulate'];
      foreach ($prepopulate as $field => $value) {

        if (array_key_exists('#default_value', $form[$field])) {
          $form[$field]['#default_value'] = $value;
        }

        else {
          $lang = $form[$field]['#language'];
          foreach ($form[$field][$lang] as $index => $settings) {

            if (is_numeric($index) && is_array($settings)
                && array_key_exists('#default_value', $settings)) {
              if ($settings['#type'] == 'link_field') {
                $form[$field][$lang][$index]['#default_value']['url'] = $value;
              }
              else {
                $form[$field][$lang][$index]['#default_value'] = $value;
              }
            }

            elseif ($index == '#default_value') {
              if (is_array($form[$field][$lang][$index])) {
                $form[$field][$lang][$index] = explode(',', $value);
              }
              else {
                $form[$field][$lang][$index] = $value;
              }
            }

          }
        }
      }
    }

    // Hide fields
    $hidden_fields = variable_get('simple_bookmarklet_hidden_fields', array());
    foreach ($hidden_fields as $field) {
      $form[$field]['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook_page_alter().
 *
 * Redirect to login form if not logged in.
 */
function simple_bookmarklet_page_alter(&$page) {
  if (drupal_get_http_header('Status') == '403 Forbidden'
      && isset($_GET['simple_bookmarklet'])) {

    // Using drupal_goto() with destination set causes a recursive redirect loop
    // Need to decode URL to prevent double-encoding UTF-8 characters
    // @see https://drupal.org/node/1403616
    $preopopulate = $_GET['simple_bookmarklet_prepopulate'];
    $opts = array('simple_bookmarklet' => 1,
                  'simple_bookmarklet_prepopulate' => $prepopulate);
    $origin = drupal_get_destination();
    $destination = urldecode($origin['destination']);
    $destination .= '?' . drupal_http_build_query($opts);
    $query = array_merge(array('destination' => $destination), $opts);
    $url = url('user/login', array('query' => $query, 'absolute' => TRUE));
    header('Location: ' . $url, TRUE, 302);

    drupal_exit();
  }
}

/**
 * Implements hook_node_insert().
 *
 * Redirect to a blank page with message and link.
 */
function simple_bookmarklet_node_insert($node) {
  $type = variable_get('simple_bookmarklet_content_type', 'page');
  if (!empty($GLOBALS['simple_bookmarklet_page_template'])
      && $node->type == $type) {
    drupal_get_messages();
    $url = filter_xss(url('node/' . $node->nid, array('absolute' => TRUE)));
    $msg = t('<a href="!url" target="_blank">Content</a> created successfully.',
             array('!url' => $url));
    drupal_set_message($msg);

    // Hack to avoid other hooks from not being called
    // @see http://drupal.org/node/130734#comment-3835244
    $url = url('simple_bookmarklet/message',
               array('query' => array('simple_bookmarklet' => 1)));
    $_GET['destination'] = $url; 
  }
}
