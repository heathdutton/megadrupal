<?php

/**
 * @file
 * clear_cache_remotely module - allows to clear the cache via URL
 */

/**
 * Implements hook_menu().
 */
function clear_cache_remotely_menu() {
  $items['clear_cache_remotely/%/%'] = array(
    'title' => 'Clear Cache',
    'access callback' => TRUE,
    'page callback' => '_clear_cache_remotely_run',
    'page arguments' => array(1, 2),
  );

  $items['admin/config/development/clear_cache_remotely'] = array(
    'title' => 'Clear Cache Remotely module settings',
    'description' => 'Set up your secret key and IP whitelist',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('clear_cache_remotely_admin'),
    'access arguments' => array('configure clear caches remotely'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'clear_cache_remotely.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function clear_cache_remotely_permission() {
  return array(
    'configure clear caches remotely' => array(
      'title' => t('Configure Clear Cache Remotely module'),
    ),
  );
}

/**
 * Function that checks if the key/ip is correct and if so cleares the cache.
 */
function _clear_cache_remotely_run($type, $key) {
  $configuration_key = variable_get('clear_cache_remotely_key', '');

  $result = array(
    'success' => FALSE,
    'message' => t('Request failed'),
  );

  if (!$configuration_key) {
    return drupal_json_output($result);
  }

  if ($key == $configuration_key && _clear_cache_remotely_ip_check() === TRUE) {
    $result = array('success' => TRUE);
    watchdog('clear_cache_remotely', 'Request came from IP: !ip.', array('!ip' => ip_address(), WATCHDOG_NOTICE));

    switch ($type) {
      case 'all':
        drupal_flush_all_caches();
        $result['message'] = t('All caches cleared');
        break;

      case 'css':
        _drupal_flush_css_js();
        registry_rebuild();
        drupal_clear_css_cache();
        $result['message'] = t('CSS cache cleared');
        break;

      case 'js':
        _drupal_flush_css_js();
        registry_rebuild();
        drupal_clear_js_cache();
        $result['message'] = t('JS cache cleared');
        break;

      case 'theme':
        _drupal_flush_css_js();
        registry_rebuild();
        drupal_clear_css_cache();
        drupal_clear_js_cache();
        system_rebuild_theme_data();
        drupal_theme_rebuild();
        $result['message'] = t('Theme cache cleared');
        break;

      case 'boost':
        if (module_exists('boost') && function_exists('boost_flush_caches')) {
          boost_flush_caches();
          $result['message'] = t('Boost cache cleared');
        }
        else {
          $result = array(
            'success' => FALSE,
            'message' => t('Module is not installed'),
          );
        }
        break;

      case (preg_match('/table_.*/', $type) ? TRUE : FALSE):
        $table_name = str_replace('table_', '', $type);
        $table_prefix = empty($table_name) ? 'cache' : 'cache_';
        if (db_table_exists($table_prefix . $table_name)) {
          cache_clear_all('*', $table_prefix . $table_name, TRUE);
          $result['message'] = t('Cache table cleared: !table', array('!table' => $table_name));
        }
        break;
    }
  }
  return drupal_json_output($result);
}

/**
 * Function that checks if the IP is in whitelist.
 * @return bool
 *   Returns boolean based on module settings
 */
function _clear_cache_remotely_ip_check() {
  $ip_pass = TRUE;

  $client_ip = ip_address();
  $ips = variable_get('clear_cache_remotely_ips', '');

  if (!empty($ips)) {
    $ips_whitelist = explode(',', $ips);
    $ip_pass = FALSE;
    foreach ($ips_whitelist as $ip_address) {
      if (fnmatch($ip_address, $client_ip)) {
        $ip_pass = TRUE;
      }
    }
  }

  return $ip_pass;
}
