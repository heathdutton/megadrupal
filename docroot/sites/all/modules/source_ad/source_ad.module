<?php
/**
 * @file
 * The main file for Source Ad module.
 */

define('SOURCE_AD_ADVERTISEMENT', "Advertisement");
define('SOURCE_AD_HACKER', "Hacker");
define('SOURCE_AD_READ_ME', "Read-Me");

/**
 * Implements hook_menu().
 */
function source_ad_menu() {
  $items['admin/config/system/source_ad'] = array(
    'title' => 'Source Ad',
    'description' => 'Publish your ad in the source code of the front page.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('source_ad_config_form'),
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

/**
 * Menu callback; the module configuration form.
 *
 * @param $form
 * @param $form_state
 *
 * @return mixed
 */
function source_ad_config_form($form, &$form_state) {

  // Advertisement in source code of pages.
  $form['source_ad_content'] = array(
    '#type' => 'fieldset',
    '#title' => t('Advertisement in Source Code'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  // HTML comments.
  $form['source_ad_content']['source_ad_content'] = array(
    '#type' => 'textarea',
    '#title' => t('Your Ad'),
    '#default_value' => filter_xss_admin(variable_get('source_ad_content', '')),
    '#description' => t('This text will be published in the source code of your site pages. Please do not use HTML.') . '<br/>' .
      t('Leave this field blank to remove your ad.'),
  );
  // HTTP headers.
  $form['source_ad_header'] = array(
    '#type' => 'fieldset',
    '#title' => t('Advertisement in HTTP response headers'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#description' => t('Please only use <a href="@ASCII">ASCII</a> symbols in Header name and Header value!',
      array('@ASCII' => 'http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters')),
  );
  $options = array(SOURCE_AD_ADVERTISEMENT, SOURCE_AD_HACKER, SOURCE_AD_READ_ME);
  $form['source_ad_header']['header_name'] = array(
    '#type' => 'select',
    '#options' => $options,
    '#title' => t('Header name'),
    '#default_value' => variable_get('source_ad_header_name', 0),
    '#description' => t('Name of HTTP header.'),
  );
  $form['source_ad_header']['header_value'] = array(
    '#type' => 'textfield',
    '#title' => t('Header value'),
    // Special chars may appear in this field. Do not use filter_xss_admin().
    '#default_value' => variable_get('source_ad_header_value', ''),
    '#description' => t('This text will be added to HTTP response headers.') . '<br/>' .
      t('Leave this field blank to remove your ad.'),
  );

  $form['source_ad_javascript_console'] = array(
    '#type' => 'fieldset',
    '#title' => t('Advertisement in javascript console'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['source_ad_javascript_console']['javascript_console_message'] = array(
    '#type' => 'textarea',
    '#title' => t('Your Ad'),
    '#default_value' => filter_xss_admin(variable_get('source_ad_javascript_console_message', '')),
    '#description' => t('This text will be published in the web browser\'s javascript console (if enabled). Please do not use HTML.') . '<br/>' .
        t('Leave this field blank to remove your ad.'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Publish'),
  );

  return $form;
}

/**
 * Submit callback for source_ad_config_form form.
 *
 * @param $form
 * @param $form_state
 */
function source_ad_config_form_submit(&$form, &$form_state) {

  $content = htmlentities($form_state['values']['source_ad_content'], ENT_NOQUOTES, 'UTF-8');
  $javascript_console_message = htmlentities($form_state['values']['javascript_console_message'], ENT_NOQUOTES, 'UTF-8');
  $header_name = intval($form_state['values']['header_name']);
  $header_value = $form_state['values']['header_value'];

  // Remove new lines.
  $header_value = trim(preg_replace('/\s+/', ' ', $header_value));
  $header_value = _source_ad_convert_to_ascii($header_value, 'utf-8');

  // @todo: Convert -- to - -.
  variable_set('source_ad_content', $content);
  variable_set('source_ad_javascript_console_message', $javascript_console_message);
  variable_set('source_ad_header_name', $header_name);
  variable_set('source_ad_header_value', $header_value);

  drupal_set_message(t('Successfully published.'));
}

/**
 * Implements hook_preprocess_html().
 *
 * @param $variables
 */
function source_ad_preprocess_html(&$variables) {

  // Filter output just in case, to make sure.
  $source_ad_content = filter_xss_admin(variable_get('source_ad_content', ''));
  if (empty($source_ad_content)) {
    return;
  }

  $content = '<!--' . PHP_EOL;
  $content .= $source_ad_content . PHP_EOL;
  $content .= '-->' . PHP_EOL;

  $element = array(
    '#type' => 'markup',
    '#markup' => $content,
    '#weight' => -999,
  );

  drupal_add_html_head($element, 'source_ad_content');
}

/**
 * Implements hook_boot().
 *
 * Add ad to http headers.
 */
function source_ad_boot() {

  $options = array(SOURCE_AD_ADVERTISEMENT, SOURCE_AD_HACKER, SOURCE_AD_READ_ME);
  $header_value = variable_get('source_ad_header_value', '');
  if (!empty($header_value)) {
    // Do not use "X-" as header_name (RFC 6648).
    $header_name = variable_get('source_ad_header_name', 0);
    $header_name = isset($options[$header_name]) ? $options[$header_name] : $options[0];

    // http://stackoverflow.com/a/4410331/2080076
    // Words of *TEXT MAY contain characters from character sets other than ISO-8859-1 only when encoded according to the rules of RFC 2047.
    // RFC 2047 is the MIME encoding, so it'd be: * =?UTF-8?Q?=E2=9C=B0?= .

    drupal_add_http_header($header_name, $header_value, FALSE);
  }
}

/**
 * Convert data to ASCII.
 *
 * Requires the iconv, GNU recode or mbstring PHP extension.
 *
 * @param $data
 *   The data to be converted.
 * @param $encoding
 *   The encoding that the data is in.
 */
function _source_ad_convert_to_ascii($data, $encoding) {
  if (function_exists('iconv')) {
    $out = @iconv($encoding, 'ASCII//IGNORE', $data);
  }
  elseif (function_exists('mb_convert_encoding')) {
    $out = @mb_convert_encoding($data, 'ASCII', $encoding);
  }
  elseif (function_exists('recode_string')) {
    $out = @recode_string($encoding . '..ASCII', $data);
  }
  else {
    watchdog('source_ad', 'Please install iconv, GNU recode or mbstring for PHP.', array('%s' => $encoding), WATCHDOG_ERROR);
    return FALSE;
  }

  return $out;
}

/**
 * Implements hook_init().
 *
 * Adds advertisement to a javascript console.
 */
function source_ad_init() {
  $advertisement = variable_get('source_ad_javascript_console_message', '');
  if ($advertisement) {
    drupal_add_js(
      array(
        'source_ad' => array(
          'javascript_console_message' => $advertisement,
        ),
      ),
      'setting'
    );
    drupal_add_js(drupal_get_path('module', 'source_ad') . '/js/source_ad_js_console.js');
  }
}
