<?php

/**
 * @file
 * Provides super themer-friendly template variables for entity fields.
 */


/**
 * Returns an array of variables, containing the values within all of
 * the Field API fields in the specified entity object.
 *
 * This is virtually the only function that should need to be called
 * from outside this module (e.g. from within custom theme callbacks).
 *
 * @param $entity
 *   The entity object (e.g. a node object, a user object).
 * @param $options
 *   Optional - array of boolean settings:
 *     'debug': if set to TRUE, will print out the generated variables
 *     for debugging purposes. Defaults to FALSE.
 *
 * @return
 *   Array of variables, in a form where each key is the name of the
 *   variable, and each value is the (usually) ready-to-output value
 *   of that variable.
 */
function tpl_field_vars($entity, $options = array()) {
  $vars = array();

  // Auto-determine basic info about this entity and its fields.
  $entity_type = tpl_field_vars_get_entity_type($entity);
  if (empty($entity_type)) {
    return $vars;
  }
  $bundle_name = tpl_field_vars_get_bundle_name($entity, $entity_type);
  if (empty($entity_type)) {
    return $vars;
  }
  $field_instances = field_info_instances($entity_type, $bundle_name);
  if (empty($field_instances)) {
    return $vars;
  }

  $debug = !empty($options['debug']);

  if (!empty($debug)) {
    print "<br /><h2>Template field variables debug info:</h2>\n";
  }

  // Special handling for user picture, which isn't actually a Field
  // API field, but which we want to treat just like any other image
  // field.
  if ($entity_type == 'user') {
    $user_picture_uri = NULL;

    if (!empty($entity->picture->uri)) {
      $user_picture_uri = $entity->picture->uri;
    }
    elseif (variable_get('user_picture_default', '')) {
      $user_picture_uri = variable_get('user_picture_default', '');
    }

    if (!empty($user_picture_uri)) {
      $field_type = 'image';
      $fieldvalue_func = 'tpl_field_vars_' . $field_type . '_fieldvalue';

      if (function_exists($fieldvalue_func)) {
        $varname = 'picture';
        $field = array();

        if (!empty($entity->picture->uri)) {
          $field[] = (array) $entity->picture;
        }
        else {
          $field[] = array('uri' => $user_picture_uri);
        }

        $fieldvalue_func($vars, $field, NULL, $varname, NULL, $options);

        if (!empty($debug) && !empty($vars[$varname])) {
          tpl_field_vars_debug($vars[$varname], $varname);
        }
      }
    }
  }

  foreach (array_keys($field_instances) as $field_name) {
    // Get the field in the correct language.
    $field = field_get_items($entity_type, $entity, $field_name);
    $field_info = field_info_field($field_name);

    // Special handling here for getting the default value of an
    // image field. Most modules just store the default value as
    // regular field value DB entries, but the image default value is
    // different.
    // NOTE: if special handling is needed for more field types,
    // should change this into a proper callback.
    if ($field_info['type'] == 'image' && empty($field)) {
      $fid = 0;
      if (!empty($field_instances[$field_name]['settings']['default_image'])) {
        $fid = $field_instances[$field_name]['settings']['default_image'];
      }
      elseif (!empty($field_info['settings']['default_image'])) {
        $fid = $field_info['settings']['default_image'];
      }

      // Add the default image if one is found.
      if ($fid && ($file = file_load($fid))) {
        $field[0] = (array) $file + array(
          'is_default' => TRUE,
          'alt' => '',
          'title' => '',
        );
      }
    }
    elseif ($field_info['type'] == 'text' || $field_info['type'] == 'text_long') {
      if (empty($field)) {
        if (!empty($field_instances[$field_name]) && !empty($field_instances[$field_name]['default_value'])) {
          $field = $field_instances[$field_name]['default_value'];
        }
      }

      if (!empty($field)) {
        foreach ($field as $k => $v) {
          if (!isset($field[$k]['format'])) {
            $field[$k]['format'] = 0;
          }
          if (empty($field[$k]['safe_value'])) {
            $field[$k]['safe_value'] = !empty($field[$k]['format']) ? check_markup($field[$k]['value'], $field[$k]['format'], LANGUAGE_NONE) : check_plain($field[$k]['value']);
          }
        }
      }
    }
    elseif ($field_info['type'] == 'entityreference' && !empty($field) && !empty($field_info['settings']['target_type'])) {
      foreach ($field as $k => $v) {
        if (!empty($field[$k]['target_id']) && empty($field[$k]['entity'])) {
          $entities = entity_load($field_info['settings']['target_type'], array($field[$k]['target_id']));
          $field[$k]['entity'] = reset($entities);
        }
      }
    }

    if (!empty($field)) {
      $field_type = $field_info['type'];
      $fieldvalue_func = 'tpl_field_vars_' . $field_type . '_fieldvalue';

      // For each supported field type, there should be a field value
      // callback function in the form:
      // tpl_field_vars_FIELD_TYPE_fieldvalue(&$vars, $field,
      //                                      $field_name, $varname)
      // Note: $vars gets passed by reference.
      // The callback function should populate $vars with the field
      // value. It should not return anything.
      if (function_exists($fieldvalue_func)) {
        $varname = tpl_field_vars_varname_nofield($field_name);
        $fieldvalue_func($vars, $field, $field_name, $varname, $field_instances[$field_name], $options);

        if (!empty($debug) && isset($vars[$varname]) && !tpl_field_vars_is_empty($vars[$varname])) {
          tpl_field_vars_debug($vars[$varname], $varname);
        }
      }
    }
  }

  return $vars;
}

/**
 * Adds template variables to an array, containing the values within
 * all of the Field API fields in the specified entity object.
 *
 * This function should be called from within template preprocess
 * functions, rather than calling tpl_field_vars().
 *
 * @param &$vars
 *   Array of template variables, usually as provided by a template
 *   preprocess function. The additional variables generated by this
 *   function are added to this array, in a form where each key is
 *   the name of the template variable, and each value is the (usually)
 *   ready-to-output value of that variable.
 * @param $entity
 *   The entity object (e.g. a node object, a user object).
 * @param $options
 *   Optional - array of boolean settings:
 *     'cleanup': if set to TRUE, will call
 *     tpl_field_vars_remove_default_fieldvars() to clean up the
 *     variables array. Defaults to FALSE.
 *     'debug': if set to TRUE, will print out the generated variables
 *     for debugging purposes. Defaults to FALSE.
 */
function tpl_field_vars_preprocess(&$vars, $entity, $options = array()) {
  $field_vars = tpl_field_vars($entity, $options);

  // Adding arrays does not overwrite duplicate keys. So, if any of
  // the variables we're adding clash with existing values in $vars,
  // we need to manually remove the existing values.
  if (!empty($field_vars)) {
    foreach (array_keys($field_vars) as $k) {
      if (isset($vars[$k])) {
        unset($vars[$k]);
      }
    }
  }

  $vars += $field_vars;

  $cleanup = !empty($options['cleanup']);
  if (!empty($cleanup)) {
    tpl_field_vars_remove_default_fieldvars($vars, $entity);
  }
}

/**
 * Performs cleanup on the template preprocess variables for the
 * specified entity, removing all instances of the massive nested
 * arrays used for the default field variables.
 *
 * @param &$vars
 *   Template preprocess variables.
 * @param $entity
 *   The entity in question.
 */
function tpl_field_vars_remove_default_fieldvars(&$vars, $entity) {
  // Auto-determine basic info about this entity and its fields.
  $entity_type = tpl_field_vars_get_entity_type($entity);
  if (empty($entity_type)) {
    return $vars;
  }
  $bundle_name = tpl_field_vars_get_bundle_name($entity, $entity_type);
  if (empty($entity_type)) {
    return $vars;
  }
  $field_instances = field_info_instances($entity_type, $bundle_name);
  if (empty($field_instances)) {
    return $vars;
  }

  foreach (array_keys($field_instances) as $field_name) {
    if (strlen($field_name) >= 6 && substr($field_name, 0, 6) == 'field_') {
      unset($vars[$field_name]);
    }
    unset($vars[$entity_type]->$field_name);
    unset($vars['elements'][$field_name]);

    $elements_subkey = '#' . $entity_type;
    if ($entity_type == 'user') {
      $elements_subkey = '#account';
    }
    elseif ($entity_type == 'taxonomy_term') {
      $elements_subkey = '#term';
    }
    unset($vars['elements'][$elements_subkey]->$field_name);

    $content_key = ($entity_type == 'user' ? 'user_profile' : 'content');
    unset($vars[$content_key][$field_name]);
  }
}

/**
 * Prints out the generated variables for debugging purposes.
 *
 * @param $var
 *   Variable to print out.
 * @param $varname
 *   The name of the variable.
 */
function tpl_field_vars_debug($var, $varname) {
  if (is_bool($var)) {
    $var = $var ? 'TRUE' : 'FALSE';
  }
  elseif (is_float($var)) {
    $var = $var ? $var : '0.0';
  }

  _tpl_field_vars_debug_format($var);

  print "<strong><code>\$" . $varname . " =</code></strong><br />\n";
  print "<pre><code>\n";
  print wordwrap(print_r($var, TRUE), 75, "\n", TRUE);
  print "</code></pre><br />\n";
}

/**
 * Helper debug function; recursively formats the debug array.
 */
function _tpl_field_vars_debug_format(&$var) {
  if (is_string($var)) {
    $var = str_replace(array('<', '>'), array('&lt;', '&gt;'), $var);
    if (strlen($var) > 600) {
      $var = substr($var, 0, 600) . ' ...';
    }
  }
  elseif (is_array($var)) {
    foreach (array_keys($var) as $k) {
      _tpl_field_vars_debug_format($var[$k]);
    }
  }
}

/**
 * Determines the type of the given entity.
 *
 * @param $entity
 *   The entity object.
 *
 * @return
 *   Entity type as a string.
 */
function tpl_field_vars_get_entity_type($entity) {
  if (!empty($entity->nid)) {
    return 'node';
  }
  elseif (!empty($entity->tid)) {
    return 'taxonomy_term';
  }
  elseif (!empty($entity->pid) && (!empty($entity->uid))) {
    return 'profile2';
  }
  elseif (!empty($entity->uid)) {
    return 'user';
  }
  elseif (is_object($entity) && method_exists($entity, 'entityType') && $entity->entityType() == 'field_collection_item') {
    return 'field_collection_item';
  }
}

/**
 * Determines the bundle name of the given entity.
 *
 * @param $entity
 *   The entity object.
 * @param $entity_type
 *   The type of the entity.
 *
 * @return
 *   Entity's bundle name as a string.
 */
function tpl_field_vars_get_bundle_name($entity, $entity_type) {
  if ($entity_type == 'node') {
    return $entity->type;
  }
  elseif ($entity_type == 'taxonomy_term') {
    return $entity->vocabulary_machine_name;
  }
  elseif ($entity_type == 'profile2') {
    return $entity->type;
  }
  elseif ($entity_type == 'field_collection_item') {
    return $entity->field_name;
  }
  else {
    return $entity_type;
  }
}

function tpl_field_vars_is_empty($val) {
  return empty($val) && $val !== FALSE && $val !== 0 && $val !== 0.0;
}

/**
 * Helper function for field value callbacks: builds an array of field
 * values in the appropriate variable.
 *
 * @param &$vars
 *   Variables array.
 * @param $field
 *   Field object.
 * @param $varname
 *   Variable name to use.
 * @param $valuekeys
 *   Keys for accessing field values.
 */
function tpl_field_vars_fieldvalue_buildarray(&$vars, $field, $varname, $valuekeys) {
  if (empty($field)) {
    return;
  }

  $vars[$varname] = array();

  foreach ($field as $val) {
    if (count($valuekeys) == 1) {
      $valuekey = current($valuekeys);
      if (isset($val[$valuekey]) && !tpl_field_vars_is_empty($val[$valuekey])) {
        $vars[$varname][] = $val[$valuekey];
      }
    }
    else {
      $vals = array();
      foreach ($valuekeys as $valuekey) {
        if (isset($val[$valuekey]) && !tpl_field_vars_is_empty($val[$valuekey])) {
          $vals[$valuekey] = $val[$valuekey];
        }
      }
      if (!empty($vals)) {
        $vars[$varname][] = $vals;
      }
    }
  }
}

/**
 * Helper function for field value callbacks: converts a variable from
 * an array of values to a single value, if only one value is
 * available for the field.
 *
 * @param &$vars
 *   Variables array.
 * @param $varname
 *   Variable name to use.
 */
function tpl_field_vars_fieldvalue_singleorarray(&$vars, $varname) {
  if (!isset($vars[$varname]) || tpl_field_vars_is_empty($vars[$varname])) {
    return;
  }

  if (count($vars[$varname]) == 1) {
    $val = reset($vars[$varname]);
    $vars[$varname] = $val;
  }
}

/**
 * Helper function for field value callbacks: removes the 'field_'
 * prefix from a field name.
 *
 * @param $field_name
 *   Field name string.
 *
 * @return
 *   Field name with 'field_' prefix removed.
 */
function tpl_field_vars_varname_nofield($field_name) {
  return preg_replace('/^field_/', '', $field_name);
}

/**
 * Converts a stream wrapper Drupal URI to a regular URL.
 *
 * @param $uri
 *   The stream wrapper URI.
 *
 * @return
 *   The regular URL.
 */
function tpl_field_vars_create_url($uri) {
  $url = file_create_url($uri);
  $url = preg_replace('/^[^\:]+\:\/\/[^\/]+/', '', $url);

  return $url;
}

/**
 * Gets the URL of an image derivative for the specified source image.
 *
 * @param $image_uri
 *   URI of the source image (as a stream wrapper URI).
 * @param $style
 *   String identifier of the derivative style to use.
 *
 * @return
 *   String URL of the generated image derivative.
 */
function tpl_field_vars_styled_image_url($image_uri, $style) {
  $image_filepath = image_style_path($style, $image_uri);
  if (!file_exists($image_filepath)) {
    image_style_create_derivative(image_style_load($style), $image_uri, $image_filepath);
  }

  return tpl_field_vars_create_url($image_filepath);
}

/**
 * Formats a date string.
 *
 * @param $date_str
 *   The date as a string.
 * @param $date_format
 *   Format string for the date.
 *
 * @return
 *   Formatted date string.
 */
function tpl_field_vars_format_date($date_str, $date_format) {
  $date_obj = new DateObject($date_str);

  // Date module doesn't seem to handle granularity very well,
  // fix it up manually here.
  $date_obj_array = $date_obj->toArray();
  if (empty($date_obj_array['year']) && empty($date_obj_array['month']) && empty($date_obj_array['day'])) {
    $date_obj->removeGranularity('year');
    $date_obj->removeGranularity('month');
    $date_obj->removeGranularity('day');
  }
  elseif (empty($date_obj_array['hour']) && empty($date_obj_array['minute']) && empty($date_obj_array['second'])) {
    $date_obj->removeGranularity('hour');
    $date_obj->removeGranularity('minute');
    $date_obj->removeGranularity('second');
  }

  return $date_obj->format($date_format);
}

/**
 * Field value callback for 'date' field type.
 */
function tpl_field_vars_date_fieldvalue(&$vars, $field, $field_name, $varname, $field_instance, $options) {
  tpl_field_vars_datetime_fieldvalue($vars, $field, $field_name, $varname, $field_instance, $options);
}

/**
 * Field value callback for 'datetime' field type.
 */
function tpl_field_vars_datetime_fieldvalue(&$vars, $field, $field_name, $varname, $field_instance, $options) {
  $valuekeys = array(
    'value',
    'value2',
  );

  tpl_field_vars_fieldvalue_buildarray($vars, $field, $varname, $valuekeys);
  if (empty($vars[$varname])) {
    return;
  }

  $date_format = (
    isset($field_instance['display']['default']['settings']['format_type'])
      ? date_format_type_format(
        $field_instance['display']['default']['settings']['format_type'])
      : '');

  foreach (array_keys($vars[$varname]) as $k) {
    if (!empty($vars[$varname][$k])) {
      if (!empty($vars[$varname][$k]['value'])) {
        $vars[$varname][$k]['from'] = tpl_field_vars_format_date($vars[$varname][$k]['value'], $date_format);
        unset($vars[$varname][$k]['value']);
      }
      if (!empty($vars[$varname][$k]['value2'])) {
        $vars[$varname][$k]['to'] = tpl_field_vars_format_date($vars[$varname][$k]['value2'], $date_format);
        unset($vars[$varname][$k]['value2']);
      }
      else {
        $vars[$varname][$k] = $vars[$varname][$k]['from'];
      }
    }
  }

  tpl_field_vars_fieldvalue_singleorarray($vars, $varname);
}

/**
 * Field value callback for 'email' field type.
 */
function tpl_field_vars_email_fieldvalue(&$vars, $field, $field_name, $varname, $field_instance, $options) {
  $valuekeys = array(
    'email',
  );

  tpl_field_vars_fieldvalue_buildarray($vars, $field, $varname, $valuekeys);
  tpl_field_vars_fieldvalue_singleorarray($vars, $varname);
}

/**
 * Field value callback for 'entityreference' field type.
 */
function tpl_field_vars_entityreference_fieldvalue(&$vars, $field, $field_name, $varname, $field_instance, $options) {
  $valuekeys = array(
    'target_id',
  );

  tpl_field_vars_fieldvalue_buildarray($vars, $field, $varname, $valuekeys);
  if (empty($vars[$varname])) {
    return;
  }

  foreach (array_keys($vars[$varname]) as $k) {
    $entity_type = tpl_field_vars_get_entity_type($field[$k]['entity']);
    $title = NULL;
    $url = NULL;

    if ($entity_type == 'node') {
      $node = node_load($vars[$varname][$k]);
      $title = check_plain($node->title);
      $url = url('node/' . $vars[$varname][$k]);
    }
    elseif ($entity_type == 'user') {
      $user = user_load($vars[$varname][$k]);
      $title = check_plain($user->name);
      $url = url('user/' . $vars[$varname][$k]);
    }
    elseif ($entity_type == 'taxonomy_term') {
      $term = taxonomy_term_load($vars[$varname][$k]);
      $title = check_plain($term->name);
      $url = url('taxonomy/term/' . $vars[$varname][$k]);
    }

    if (!empty($vars[$varname][$k]) && !empty($title) && !empty($url)) {
      $vars[$varname][$k] = array(
        'target_id' => $vars[$varname][$k],
        'title' => $title,
        'url' => $url,
      );
    }
  }

  tpl_field_vars_fieldvalue_singleorarray($vars, $varname);
}

/**
 * Field value callback for 'field_collection' field type.
 */
function tpl_field_vars_field_collection_fieldvalue(&$vars, $field, $field_name, $varname, $field_instance, $options) {
  $valuekeys = array(
    'value',
  );

  if (!empty($options['debug'])) {
    $options['debug'] = FALSE;
  }

  tpl_field_vars_fieldvalue_buildarray($vars, $field, $varname, $valuekeys);

  if (empty($vars[$varname])) {
    return;
  }

  foreach (array_keys($vars[$varname]) as $k) {
    if (!empty($vars[$varname][$k])) {
      $coll = field_collection_item_load($vars[$varname][$k]);
      if (!empty($coll)) {
        $coll_vars = tpl_field_vars($coll, $options);
        if (!empty($coll_vars)) {
          $vars[$varname][$k] = $coll_vars;
        }
        else {
          unset($vars[$varname][$k]);
        }
      }
      else {
        unset($vars[$varname][$k]);
      }
    }
  }

  tpl_field_vars_fieldvalue_singleorarray($vars, $varname);
}

/**
 * Field value callback for 'file' field type.
 */
function tpl_field_vars_file_fieldvalue(&$vars, $field, $field_name, $varname, $field_instance, $options, $unset_uri = TRUE) {
  $valuekeys = array(
    'uri',
    'filename',
    'filesize',
    'fid',
    'description',
    'alt',
    'title',
    'display',
  );

  tpl_field_vars_fieldvalue_buildarray($vars, $field, $varname, $valuekeys);

  if (empty($vars[$varname])) {
    return;
  }

  foreach (array_keys($vars[$varname]) as $k) {
    if (!empty($vars[$varname][$k]['uri'])) {
      $vars[$varname][$k]['url'] = tpl_field_vars_create_url($vars[$varname][$k]['uri']);

      if (!empty($unset_uri)) {
        unset($vars[$varname][$k]['uri']);
      }
    }
    if (!empty($vars[$varname][$k]['filesize'])) {
      $vars[$varname][$k]['filesize'] = format_size($vars[$varname][$k]['filesize']);
    }
    if (!empty($vars[$varname][$k]['description'])) {
      $vars[$varname][$k]['description'] = check_plain($vars[$varname][$k]['description']);
    }
  }

  tpl_field_vars_fieldvalue_singleorarray($vars, $varname);
}

/**
 * Field value callback for 'image' field type.
 */
function tpl_field_vars_image_fieldvalue(&$vars, $field, $field_name, $varname, $field_instance, $options) {
  tpl_field_vars_file_fieldvalue($vars, $field, $field_name, $varname, $field_instance, $options, FALSE);

  if (empty($vars[$varname])) {
    return;
  }
  if (empty($vars[$varname][0])) {
    // Revert the variable back to array form, if the singleorarray
    // call in the 'file' callback changed it.
    $val = $vars[$varname];
    $vars[$varname] =  array($val);
  }

  $image_styles = image_styles();

  if (!empty($image_styles)) {
    foreach (array_keys($vars[$varname]) as $k) {
      if (!empty($vars[$varname][$k]['uri'])) {
        foreach (array_keys($image_styles) as $image_style_name) {
          $vars[$varname][$k][$image_style_name . '_url'] = tpl_field_vars_styled_image_url($vars[$varname][$k]['uri'], $image_style_name);
        }
        unset($vars[$varname][$k]['uri']);
      }
    }
  }

  tpl_field_vars_fieldvalue_singleorarray($vars, $varname);
}

/**
 * Field value callback for 'link_field' field type.
 */
function tpl_field_vars_link_field_fieldvalue(&$vars, $field, $field_name, $varname, $field_instance, $options) {
  $valuekeys = array(
    'url',
    'title',
  );

  tpl_field_vars_fieldvalue_buildarray($vars, $field, $varname, $valuekeys);

  // Fix for some strange behaviour where sometimes the link title
  // is set to the same as the URL if no title is specified.
  // In this case, unset the title.
  if (!empty($vars[$varname][0])) {
    foreach ($vars[$varname] as $k => $v) {
      if (is_array($v)) {
        if (isset($v['url']) && isset($v['title'])) {
          if ($v['url'] == $v['title']) {
            unset($vars[$varname][$k]['title']);
            unset($v['title']);
          }
        }

        if (count($v) == 1) {
          $vk = key($v);
          $vars[$varname][$k] = $v[$vk];
        }
      }
    }
  }

  tpl_field_vars_fieldvalue_singleorarray($vars, $varname);
}

/**
 * Field value callback for 'list_boolean' field type.
 */
function tpl_field_vars_list_boolean_fieldvalue(&$vars, $field, $field_name, $varname, $field_instance, $options) {
  $valuekeys = array(
    'value',
  );

  if (empty($field)) {
    return;
  }
  foreach (array_keys($field) as $k) {
    foreach ($valuekeys as $valuekey) {
      if (isset($field[$k][$valuekey])) {
        $field[$k][$valuekey] = (bool)intval($field[$k][$valuekey]);
      }
    }
  }

  tpl_field_vars_fieldvalue_buildarray($vars, $field, $varname, $valuekeys);
  tpl_field_vars_fieldvalue_singleorarray($vars, $varname);
}

/**
 * Field value callback for 'list_float' field type.
 */
function tpl_field_vars_list_float_fieldvalue(&$vars, $field, $field_name, $varname, $field_instance, $options) {
  $valuekeys = array(
    'value',
  );

  if (empty($field)) {
    return;
  }
  foreach (array_keys($field) as $k) {
    foreach ($valuekeys as $valuekey) {
      if (isset($field[$k][$valuekey])) {
        $field[$k][$valuekey] = floatval($field[$k][$valuekey]);
      }
    }
  }

  tpl_field_vars_fieldvalue_buildarray($vars, $field, $varname, $valuekeys);
  tpl_field_vars_fieldvalue_singleorarray($vars, $varname);
}

/**
 * Field value callback for 'list_integer' field type.
 */
function tpl_field_vars_list_integer_fieldvalue(&$vars, $field, $field_name, $varname, $field_instance, $options) {
  $valuekeys = array(
    'value',
  );

  if (empty($field)) {
    return;
  }
  foreach (array_keys($field) as $k) {
    foreach ($valuekeys as $valuekey) {
      if (isset($field[$k][$valuekey])) {
        $field[$k][$valuekey] = intval($field[$k][$valuekey]);
      }
    }
  }

  tpl_field_vars_fieldvalue_buildarray($vars, $field, $varname, $valuekeys);
  tpl_field_vars_fieldvalue_singleorarray($vars, $varname);
}

/**
 * Field value callback for 'list_text' field type.
 */
function tpl_field_vars_list_text_fieldvalue(&$vars, $field, $field_name, $varname, $field_instance, $options) {
  $valuekeys = array(
    'value',
  );

  tpl_field_vars_fieldvalue_buildarray($vars, $field, $varname, $valuekeys);
  tpl_field_vars_fieldvalue_singleorarray($vars, $varname);
}

/**
 * Field value callback for 'node_reference' field type.
 */
function tpl_field_vars_node_reference_fieldvalue(&$vars, $field, $field_name, $varname, $field_instance, $options) {
  $valuekeys = array(
    'nid',
  );

  tpl_field_vars_fieldvalue_buildarray($vars, $field, $varname, $valuekeys);
  if (empty($vars[$varname])) {
    return;
  }

  foreach (array_keys($vars[$varname]) as $k) {
    $node = NULL;
    if (!empty($field[$k]['node'])) {
      $node = $field[$k]['node'];
    }
    else {
      $node = node_load($vars[$varname][$k]);
    }

    if (!empty($vars[$varname][$k]) && !empty($node)) {
      $vars[$varname][$k] = array(
        'nid' => $vars[$varname][$k],
        'title' => check_plain($node->title),
        'url' => url('node/' . $vars[$varname][$k]),
      );
    }
  }

  tpl_field_vars_fieldvalue_singleorarray($vars, $varname);
}

/**
 * Field value callback for 'number_decimal' field type.
 */
function tpl_field_vars_number_decimal_fieldvalue(&$vars, $field, $field_name, $varname, $field_instance, $options) {
  $valuekeys = array(
    'value',
  );

  if (empty($field)) {
    return;
  }
  foreach (array_keys($field) as $k) {
    foreach ($valuekeys as $valuekey) {
      if (isset($field[$k][$valuekey])) {
        $field[$k][$valuekey] = floatval($field[$k][$valuekey]);
      }
    }
  }

  tpl_field_vars_fieldvalue_buildarray($vars, $field, $varname, $valuekeys);
  tpl_field_vars_fieldvalue_singleorarray($vars, $varname);
}

/**
 * Field value callback for 'number_float' field type.
 */
function tpl_field_vars_number_float_fieldvalue(&$vars, $field, $field_name, $varname, $field_instance, $options) {
  tpl_field_vars_number_decimal_fieldvalue($vars, $field, $field_name, $varname, $field_instance, $options);
}

/**
 * Field value callback for 'number_integer' field type.
 */
function tpl_field_vars_number_integer_fieldvalue(&$vars, $field, $field_name, $varname, $field_instance, $options) {
  $valuekeys = array(
    'value',
  );

  if (empty($field)) {
    return;
  }
  foreach (array_keys($field) as $k) {
    foreach ($valuekeys as $valuekey) {
      if (isset($field[$k][$valuekey])) {
        $field[$k][$valuekey] = intval($field[$k][$valuekey]);
      }
    }
  }

  tpl_field_vars_fieldvalue_buildarray($vars, $field, $varname, $valuekeys);
  tpl_field_vars_fieldvalue_singleorarray($vars, $varname);
}

/**
 * Field value callback for 'taxonomy_term_reference' field type.
 */
function tpl_field_vars_taxonomy_term_reference_fieldvalue(&$vars, $field, $field_name, $varname, $field_instance, $options) {
  $valuekeys = array(
    'tid',
  );

  tpl_field_vars_fieldvalue_buildarray($vars, $field, $varname, $valuekeys);
  if (empty($vars[$varname])) {
    return;
  }

  foreach (array_keys($vars[$varname]) as $k) {
    $term = NULL;
    if (!empty($field[$k]['taxonomy_term'])) {
      $term = $field[$k]['taxonomy_term'];
    }
    else {
      $term = taxonomy_term_load($vars[$varname][$k]);
    }
    if (!empty($vars[$varname][$k]) && !empty($term)) {
      $term_uri = taxonomy_term_uri($term);
      $vars[$varname][$k] = array(
        'tid' => $vars[$varname][$k],
        'name' => check_plain($term->name),
        'url' => url($term_uri['path']),
      );
    }
  }

  tpl_field_vars_fieldvalue_singleorarray($vars, $varname);
}

/**
 * Field value callback for 'text' field type.
 */
function tpl_field_vars_text_fieldvalue(&$vars, $field, $field_name, $varname, $field_instance, $options) {
  $valuekeys = array(
    'safe_value',
  );

  tpl_field_vars_fieldvalue_buildarray($vars, $field, $varname, $valuekeys);
  tpl_field_vars_fieldvalue_singleorarray($vars, $varname);
}

/**
 * Field value callback for 'text_long' field type.
 */
function tpl_field_vars_text_long_fieldvalue(&$vars, $field, $field_name, $varname, $field_instance, $options) {
  tpl_field_vars_text_fieldvalue($vars, $field, $field_name, $varname, $field_instance, $options);
}

/**
 * Field value callback for 'text_with_summary' field type.
 */
function tpl_field_vars_text_with_summary_fieldvalue(&$vars, $field, $field_name, $varname, $field_instance, $options) {
  $valuekeys = array(
    'safe_value',
    'safe_summary',
  );

  tpl_field_vars_fieldvalue_buildarray($vars, $field, $varname, $valuekeys);
  if (empty($vars[$varname])) {
    return;
  }

  foreach (array_keys($vars[$varname]) as $k) {
    if (!empty($vars[$varname][$k])) {
      if (!empty($vars[$varname][$k]['safe_value'])) {
        $vars[$varname][$k]['value'] = $vars[$varname][$k]['safe_value'];
        unset($vars[$varname][$k]['safe_value']);
      }
      if (!empty($vars[$varname][$k]['safe_summary'])) {
        $vars[$varname][$k]['summary'] = $vars[$varname][$k]['safe_summary'];
        unset($vars[$varname][$k]['safe_summary']);
      }
      else {
        if (!empty($vars[$varname][$k]['value'])) {
          $vars[$varname][$k]['summary'] = _filter_htmlcorrector(text_summary($vars[$varname][$k]['value']));
        }
      }
    }
  }

  tpl_field_vars_fieldvalue_singleorarray($vars, $varname);
}

/**
 * Field value callback for 'user_reference' field type.
 */
function tpl_field_vars_user_reference_fieldvalue(&$vars, $field, $field_name, $varname, $field_instance, $options) {
  $valuekeys = array(
    'uid',
  );

  tpl_field_vars_fieldvalue_buildarray($vars, $field, $varname, $valuekeys);
  if (empty($vars[$varname])) {
    return;
  }

  foreach (array_keys($vars[$varname]) as $k) {
    $user_obj = NULL;
    if (!empty($field[$k]['user'])) {
      $user_obj = $field[$k]['user'];
    }
    else {
      $user_obj = user_load($vars[$varname][$k]);
    }

    if (!empty($vars[$varname][$k]) && !empty($user_obj)) {
      $vars[$varname][$k] = array(
        'uid' => $vars[$varname][$k],
        'name' => check_plain($user_obj->name),
        'url' => url('user/' . $vars[$varname][$k]),
      );
    }
  }

  tpl_field_vars_fieldvalue_singleorarray($vars, $varname);
}
