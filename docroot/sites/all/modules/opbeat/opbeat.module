<?php
/**
 * @file
 * Opbeat integration module for Drupal.
 */

define('OPBEAT_DEFAULT_API_ENDPOINT', 'https://opbeat.com/api/v1/');

/**
 * Implements hook_menu().
 */
function opbeat_menu() {
  $items['admin/config/system/opbeat'] = array(
    'title' => 'Opbeat',
    'description' => 'Configure Opbeat integration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('opbeat_admin_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'opbeat.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_watchdog().
 */
function opbeat_watchdog(array $log_entry) {
  // Load all the variables we need to check, and check if they're set
  // before trying to log anything.
  $api_endpoint = variable_get('opbeat_api_endpoint', OPBEAT_DEFAULT_API_ENDPOINT);
  $app_id = variable_get('opbeat_application_id', '');
  $org_id = variable_get('opbeat_organisation_id', '');
  $token = variable_get('opbeat_secret_token', '');
  $severity_levels = variable_get('opbeat_severity_levels', array());

  if (!empty($api_endpoint) && !empty($app_id) && !empty($org_id) &&
      !empty($token) && in_array($log_entry['severity'], $severity_levels)) {
    // URL is composed three of our variables interspersed with static
    // strings. Not pretty, but it works.
    $url = sprintf('%sorganizations/%s/apps/%s/errors/', $api_endpoint, $org_id, $app_id);

    // Parse the Unix timestamp, so we can reformat it as ISO-8611.
    $date_time = new DateTime('@' . $log_entry['timestamp']);

    // Prepare the data to send to Opbeat.
    // Refer to https://opbeat.com/docs/api/errorlog/ for details.
    $data = array(
      'message' => format_string($log_entry['message'], !empty($log_entry['variables']) ? $log_entry['variables'] : array()),
      'timestamp' => $date_time->format('c'),
      'level' => opbeat_map_severity_level($log_entry['severity']),
      'logger' => $log_entry['type'],
      'http' => array(
        'url' => $log_entry['request_uri'],
        'remote_host' => $log_entry['ip']
      ),
      'user' => array(
        'is_authenticated' => ($log_entry['uid'] > 0),
        'id' => $log_entry['uid'],
      ),
    );

    if (!empty($log_entry['user']->name)) {
      $data['user']['username'] = $log_entry['user']->name;
    }

    if (!empty($log_entry['user']->mail)) {
      $data['user']['email'] = $log_entry['user']->mail;
    }

    if (variable_get('opbeat_send_on_exit', TRUE)) {
      opbeat_send_message_on_exit($url, $data);
    }
    else {
      opbeat_log_message($url, $data);
    }
  }
}

/**
 * Implements hook_exit().
 */
function opbeat_exit($destination = NULL) {
  if (!empty($GLOBALS['opbeat_send_on_exit']) && is_array($GLOBALS['opbeat_send_on_exit'])) {
    foreach ($GLOBALS['opbeat_send_on_exit'] as $url => $messages) {
      foreach ($messages as $message_data) {
        opbeat_log_message($url, $message_data);
      }
    }
  }
}

/**
 * Send log message to Opbeat.
 *
 * @param string $url
 *   Opbeat rest endpoint to send to.
 * @param array $message_data
 *   Message data array as generated by opbeat_watchdog().
 *
 * @see opbeat_watchdog().
 */
function opbeat_log_message($url, &$message_data) {
  $token = variable_get('opbeat_secret_token', '');

  $request = drupal_http_request($url, array(
    'headers' => array(
      'Authorization' => 'Bearer ' . $token,
      'Content-Type' => 'application/json',
    ),
    'method' => 'POST',
    'data' => drupal_json_encode($message_data),
  ));
}

/**
 * Enqueue message to be sent on hook_exit().
 *
 * Prevents message sending from blocking page loading.
 *
 * @param string $url
 *   Opbeat rest endpoint to send to.
 * @param array $message_data
 *   Message data array as generated by opbeat_watchdog().
 *
 * @see opbeat_watchdog().
 */
function opbeat_send_message_on_exit($url, &$message_data) {
  $GLOBALS['opbeat_send_on_exit'][$url][] = $message_data;
}

/**
 * Map Drupal watchdog severity to Opbeat's levels.
 *
 * @param integer $severity
 *   Severity level from Drupal's hook_watchdog.
 *
 * @return string
 *   Corresponding Opbeat error level string.
 */
function opbeat_map_severity_level($severity) {
  switch ($severity) {
    case WATCHDOG_EMERGENCY:
    case WATCHDOG_ALERT:
    case WATCHDOG_CRITICAL:
      return 'fatal';
    case WATCHDOG_ERROR:
      return 'error';
    case WATCHDOG_WARNING:
      return 'warning';
    case WATCHDOG_NOTICE:
    case WATCHDOG_INFO:
      return 'info';
    case WATCHDOG_DEBUG:
      return 'debug';
  }
}
