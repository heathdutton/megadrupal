<?php

/**
 * @file hashids.module
 */

/**
 * Implements hook_libraries_info().
 */
function hashids_libraries_info() {
  $libraries['hashids'] = array(
    'name' => 'hashids',
    'vendor url' => 'https://github.com/ivanakimov/hashids.php',
    'download url' => 'https://github.com/ivanakimov/hashids.php/archive/master.zip',
    'version arguments' => array(
      'file' => 'lib/Hashids/Hashids.php',
      'pattern' => '/const VERSION = \'([0-9\.]+)\';/',
      'lines' => 20,
    ),
    'files' => array(
      'php' => array(
        'lib/Hashids/HashGenerator.php',
        'lib/Hashids/Hashids.php',
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_menu().
 */
function hashids_menu() {
  $items['admin/config/system/hashids'] = array(
    'title' => t('Hashids'),
    'description' => t('Settings for Hashids.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hashids_settings_form'),
    'access arguments' => array('administer site configuration'),
  );

  return $items;
}

/**
 * Instantiate a Hashids instance.
 *
 * @return \Hashids\Hashids
 */
function hashids_instance() {
  libraries_load('hashids');
  $salt = variable_get('hashids_salt', '');
  return new Hashids\Hashids();
}

/**
 * Generate a Hashids hash.
 */
function hashids_generate() {
  $list = func_get_args();
  if (is_array(reset($list))) {
    $list = array_shift($list);
  }

  $hashids = hashids_instance();

  return $hashids->encode($list);
}

/**
 * Decode a Hashids hash.
 *
 * @param $hash
 */
function hashids_decode($hash) {
  $hashids = hashids_instance();

  return $hashids->decode($hash);
}

/**
 * Settings form. Set the salt for generating hashes.
 */
function hashids_settings_form($form, &$form_state) {
  $form['hashids_salt'] = array(
    '#type' => 'textfield',
    '#title' => t('Hashids Salt'),
    '#description' => t('Set a unique salt for your hashids.'),
    '#default_value' => variable_get('hashids_salt', ''),
  );

  return system_settings_form($form);
}