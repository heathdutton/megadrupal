<?php

/**
 * @file hashids_hash_field.module.
 */

/**
 * Implements hook_field_info().
 */
function hashids_hash_field_field_info() {
  return array(
    'hashids_hash' => array(
      'label' => t('Hashids hash'),
      'description' => t('Generate Hashids hashes from other Unique Identifiers'),
      'settings' => array(
        'max_length' => 255,
        'host_entity' => 0,
        'related_entity' => 0,
        'reference_fields' => array(),
      ),
      'instance_settings' => array(
        'text_processing' => 0,
      ),
      'default_widget' => 'hashids_hash_field_widget',
      'default_formatter' => 'hashids_hash_field_formatter',
      'property_type' => 'hashids_hash',
      'property_callbacks' => array('hashids_hash_field_property_info_callback'),
    ),
  );
}

/**
 * Implements hook_field_widget_info().
 */
function hashids_hash_field_field_widget_info() {
  return array(
    'hashids_hash_field_widget' => array(
      'label' => t('Default'),
      'field types' => array('hashids_hash'),
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function hashids_hash_field_field_formatter_info() {
  return array(
    'hashids_hash_field_formatter' => array(
      'label' => t('Default'),
      'field types' => array('hashids_hash'),
    ),
  );
}

/**
 * Callback to alter the property info of the hashids_hash_field fields.
 */
function hashids_hash_field_property_info_callback(&$info, $entity_type, $field, $instance, $field_type) {
  $property = &$info[$entity_type]['bundles'][$instance['bundle']]['properties'][$field['field_name']];

  $property['type'] = 'text';
  $property['getter callback'] = 'entity_metadata_field_property_get';
  $property['setter callback'] = 'entity_metadata_field_property_set';
  unset($property['query callback']);
}

/**
 * Implements hook_field_formatter_view().
 */
function hashids_hash_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  foreach ($items as $delta => $item) {
    $element[$delta] = array(
      '#markup' => $item['value'],
    );
  }

  return $element;
}


/**
 * Implements hook_field_widget_form().
 */
function hashids_hash_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $element['hashids_hash'] = array();

  return $element;
}

/**
 * Implements hook_field_is_empty().
 */
function hashids_hash_field_field_is_empty($item, $field) {
  return empty($item['value']);
}

/**
 * Implements hook_field_settings_form().
 */
function hashids_hash_field_field_settings_form($field, $instance, $has_data) {
  $settings = $field['settings'];

  $form['host_entity'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use the Host Entity\'s ID'),
    '#default_value' => $settings['host_entity'],
    '#disabled' => $has_data,
  );

  $entity_property_info = entity_get_property_info($instance['entity_type']);
  $form['related_entity'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use the Related Entity\'s ID'),
    '#default_value' => $settings['related_entity'],
    '#disabled' => $has_data,
    '#access' => isset($entity_property_info['properties']['entity_type'], $entity_property_info['properties']['entity_type']),
  );

  $reference_types = array('taxonomy_term_reference', 'entityreference', 'relation_endpoint', 'commerce_customer_profile_reference', 'commerce_line_item_reference', 'commerce_product_reference');
  $reference_fields = array();
  $field_map = field_info_field_map();
  foreach ($field_map as $field_name => $mapping) {
    if (in_array($mapping['type'], $reference_types)) {
      foreach ($field['bundles'] as $entity_type => $bundles) {
        if (!empty($mapping['bundles'][$entity_type])) {
          if (array_intersect($bundles, $mapping['bundles'][$entity_type])) {
            $reference_fields[$field_name] = $field_name;
          }
        }
      }
    }
  }

  $form['reference_fields'] = array(
    '#type' => 'select',
    '#multiple' => TRUE,
    '#title' => t('Use Reference Field ID(s)'),
    '#default_value' => $settings['reference_fields'],
    '#options' => $reference_fields,
    '#disabled' => $has_data,
  );

  return $form;
}

/**
 * Implements hook_field_insert().
 */
function hashids_hash_field_field_insert($entity_type, $entity, $field, $instance, $langcode, &$items) {
  $settings = $field['settings'];
  $wrapper = entity_metadata_wrapper($entity_type, $entity);

  $ids = array();
  if ($settings['host_entity']) {
    list($host_id) = entity_extract_ids($entity_type, $entity);
    $ids[] = $host_id;
  }

  if ($settings['related_entity'] && isset($entity->entity_type, $entity->entity_id)) {
    $ids[] = $entity->entity_id;
  }

  foreach ($settings['reference_fields'] as $field_name) {
    if (is_array($wrapper->{$field_name}->raw())) {
      $ids = array_merge($ids, $wrapper->{$field_name}->raw());
    }
    else {
      $ids[] = $wrapper->{$field_name}->raw();
    }
  }

  if (count($ids) > 1 ||
    ($settings['host_entity'] || $settings['related_entity']) && empty($settings['reference_fields'])) {
    $items = array(
      array(
        'value' => hashids_generate($ids),
      ),
    );
  }
  else {
    $items = array();
  }
}

/**
 * Implements hook_field_update().
 */
function hashids_hash_field_field_update($entity_type, $entity, $field, $instance, $langcode, &$items) {
  hashids_hash_field_field_insert($entity_type, $entity, $field, $instance, $langcode, $items);
}
