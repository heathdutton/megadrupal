diff --git includes/actions.inc includes/actions.inc
index ed43af4..37b4431 100644
--- includes/actions.inc
+++ includes/actions.inc
@@ -273,7 +273,10 @@ function actions_function_lookup($hash) {
  */
 function actions_synchronize($delete_orphans = FALSE) {
   $actions_in_code = actions_list(TRUE);
-  $actions_in_db = db_query("SELECT aid, callback, label FROM {actions} WHERE parameters = ''")->fetchAllAssoc('callback', PDO::FETCH_ASSOC);
+  $actions_in_db = db_select('actions')
+    ->fields('actions', array('aid', 'callback', 'label'))
+    ->where('LENGTH(parameters) = 0')
+    ->execute()->fetchAllAssoc('callback', PDO::FETCH_ASSOC);
 
   // Go through all the actions provided by modules.
   foreach ($actions_in_code as $callback => $array) {
diff --git includes/session.inc includes/session.inc
index 8f1bcaf..bd43415 100644
--- includes/session.inc
+++ includes/session.inc
@@ -111,7 +111,12 @@ function _drupal_session_read($sid) {
     // Add roles element to $user.
     $user->roles = array();
     $user->roles[DRUPAL_AUTHENTICATED_RID] = 'authenticated user';
-    $user->roles += db_query("SELECT r.rid, r.name FROM {role} r INNER JOIN {users_roles} ur ON ur.rid = r.rid WHERE ur.uid = :uid", array(':uid' => $user->uid))->fetchAllKeyed(0, 1);
+    $query = db_select('role', 'r');
+    $query->join('users_roles', 'ur', 'ur.rid = r.rid');
+    $query->addField('r', 'rid');
+    $query->addField('r', 'name');
+    $query->condition('ur.uid', $user->uid);
+    $user->roles += $query->execute()->fetchAllKeyed(0, 1);
   }
   elseif ($user) {
     // The user is anonymous or blocked. Only preserve two fields from the
diff --git modules/aggregator/aggregator.admin.inc modules/aggregator/aggregator.admin.inc
index 9f92a67..7f34e3e 100644
--- modules/aggregator/aggregator.admin.inc
+++ modules/aggregator/aggregator.admin.inc
@@ -38,7 +38,7 @@ function aggregator_view() {
   }
   $output .= theme('table', array('header' => $header, 'rows' => $rows, 'empty' => t('No feeds available. <a href="@link">Add feed</a>.', array('@link' => url('admin/config/services/aggregator/add/feed')))));
 
-  $result = db_query('SELECT c.cid, c.title, COUNT(ci.iid) as items FROM {aggregator_category} c LEFT JOIN {aggregator_category_item} ci ON c.cid = ci.cid GROUP BY c.cid, c.title ORDER BY title');
+  $result = db_query('SELECT c.cid, c.title, COUNT(ci.iid) AS items FROM {aggregator_category} c LEFT JOIN {aggregator_category_item} ci ON c.cid = ci.cid GROUP BY c.cid, c.title ORDER BY c.title');
 
   $output .= '<h3>' . t('Category overview') . '</h3>';
 
diff --git modules/node/node.module modules/node/node.module
index 71ea3b9..09617c7 100644
--- modules/node/node.module
+++ modules/node/node.module
@@ -323,7 +323,11 @@ function node_last_viewed($nid) {
   $history = &drupal_static(__FUNCTION__, array());
 
   if (!isset($history[$nid])) {
-    $history[$nid] = db_query("SELECT timestamp FROM {history} WHERE uid = :uid AND nid = :nid", array(':uid' => $user->uid, ':nid' => $nid))->fetchObject();
+    $history[$nid] = db_select('history')
+      ->fields('history', array('timestamp'))
+      ->condition('uid', $user->uid)
+      ->condition('nid', $nid)
+      ->execute()->fetchObject();
   }
 
   return (isset($history[$nid]->timestamp) ? $history[$nid]->timestamp : 0);
diff --git modules/openid/openid.pages.inc modules/openid/openid.pages.inc
index 6e3f096..cac6b20 100644
--- modules/openid/openid.pages.inc
+++ modules/openid/openid.pages.inc
@@ -47,7 +47,11 @@ function openid_user_identities($account) {
   $header = array(t('OpenID'), t('Operations'));
   $rows = array();
 
-  $result = db_query("SELECT * FROM {authmap} WHERE module='openid' AND uid=:uid", array(':uid' => $account->uid));
+  $result = db_select('authmap')
+    ->fields('authmap', array('authname', 'aid'))
+    ->condition('module', 'openid')
+    ->condition('uid', $account->uid)
+    ->execute();
   foreach ($result as $identity) {
     $rows[] = array(check_plain($identity->authname), l(t('Delete'), 'user/' . $account->uid . '/openid/delete/' . $identity->aid));
   }
diff --git modules/simpletest/drupal_web_test_case.php modules/simpletest/drupal_web_test_case.php
index 251c5c1..b50a638 100644
--- modules/simpletest/drupal_web_test_case.php
+++ modules/simpletest/drupal_web_test_case.php
@@ -1142,7 +1142,10 @@ class DrupalWebTestCase extends DrupalTestCase {
 
     $this->assertTrue(isset($role->rid), t('Created role of name: @name, id: @rid', array('@name' => $name, '@rid' => (isset($role->rid) ? $role->rid : t('-n/a-')))), t('Role'));
     if ($role && !empty($role->rid)) {
-      $count = db_query('SELECT COUNT(*) FROM {role_permission} WHERE rid = :rid', array(':rid' => $role->rid))->fetchField();
+      $count = db_select('role_permission')
+        ->condition('rid', $role->rid)
+        ->countQuery()
+        ->execute()->fetchField();
       $this->assertTrue($count == count($permissions), t('Created permissions: @perms', array('@perms' => implode(', ', $permissions))), t('Role'));
       return $role->rid;
     }
@@ -1371,9 +1374,11 @@ class DrupalWebTestCase extends DrupalTestCase {
     }
 
     // Run the profile tasks.
-    $install_profile_module_exists = db_query("SELECT 1 FROM {system} WHERE type = 'module' AND name = :name", array(
-      ':name' => $this->profile,
-    ))->fetchField();
+    $select = db_select('system')
+      ->condition('type', 'module')
+      ->condition('name', $this->profile);
+    $select->addExpression('1');
+    $install_profile_module_exists = $select->execute()->fetchField();
     if ($install_profile_module_exists) {
       module_enable(array($this->profile), FALSE);
     }
diff --git modules/simpletest/simpletest.module modules/simpletest/simpletest.module
index f825755..fa3f157 100644
--- modules/simpletest/simpletest.module
+++ modules/simpletest/simpletest.module
@@ -234,8 +234,17 @@ function _simpletest_batch_finished($success, $results, $operations, $elapsed) {
  *   that ran.
  */
 function simpletest_last_test_get($test_id) {
-  $last_prefix = db_query_range('SELECT last_prefix FROM {simpletest_test_id} WHERE test_id = :test_id', 0, 1, array(':test_id' => $test_id))->fetchField();
-  $last_test_class = db_query_range('SELECT test_class FROM {simpletest} WHERE test_id = :test_id ORDER BY message_id DESC', 0, 1, array(':test_id' => $test_id))->fetchField();
+  $last_prefix = db_select('simpletest_test_id')
+    ->fields('simpletest_test_id', array('last_prefix'))
+    ->condition('test_id', $test_id)
+    ->range(0, 1)
+    ->execute()->fetchField();
+  $last_test_class = db_select('simpletest')
+    ->fields('simpletest', array('test_class'))
+    ->condition('test_id', $test_id)
+    ->orderBy('message_id', 'DESC')
+    ->range(0, 1)
+    ->execute()->fetchField();
   return array($last_prefix, $last_test_class);
 }
 
@@ -316,7 +325,11 @@ function simpletest_test_get_all() {
     }
     else {
       // Select all clases in files ending with .test.
-      $classes = db_query("SELECT name FROM {registry} WHERE type = :type AND filename LIKE :name", array(':type' => 'class', ':name' => '%.test'))->fetchCol();
+      $classes = db_select('registry')
+        ->fields('registry', array('name'))
+        ->condition('type', 'class')
+        ->condition('filename', '%' . db_like('.test'), 'LIKE')
+        ->execute()->fetchCol();
 
       // Check that each class has a getInfo() method and store the information
       // in an array keyed with the group specified in the test information.
@@ -483,7 +496,10 @@ function simpletest_clean_temporary_directories() {
 function simpletest_clean_results_table($test_id = NULL) {
   if (variable_get('simpletest_clear_results', TRUE)) {
     if ($test_id) {
-      $count = db_query('SELECT COUNT(test_id) FROM {simpletest_test_id} WHERE test_id = :test_id', array(':test_id' => $test_id))->fetchField();
+      $count = db_select('simpletest_test_id')
+        ->condition('test_id', $test_id)
+        ->countQuery()
+        ->execute()->fetchField();
 
       db_delete('simpletest')
         ->condition('test_id', $test_id)
@@ -493,7 +509,9 @@ function simpletest_clean_results_table($test_id = NULL) {
         ->execute();
     }
     else {
-      $count = db_query('SELECT COUNT(test_id) FROM {simpletest_test_id}')->fetchField();
+      $count = db_select('simpletest_test_id')
+        ->countQuery()
+        ->execute()->fetchField();
 
       // Clear test results.
       db_delete('simpletest')->execute();
diff --git modules/simpletest/tests/database_test.test modules/simpletest/tests/database_test.test
index 6608336..cbdadc0 100644
--- modules/simpletest/tests/database_test.test
+++ modules/simpletest/tests/database_test.test
@@ -2765,7 +2765,7 @@ class DatabaseRegressionTestCase extends DatabaseTestCase {
    * Test the db_table_exists() function.
    */
   function testDBTableExists() {
-    $this->assertIdentical(TRUE, db_table_exists('node'), t('Returns true for existent table.'));
+    $this->assertIdentical(TRUE, db_table_exists('test'), t('Returns true for existent table.'));
     $this->assertIdentical(FALSE, db_table_exists('nosuchtable'), t('Returns false for nonexistent table.'));
   }
 
@@ -2773,16 +2773,16 @@ class DatabaseRegressionTestCase extends DatabaseTestCase {
    * Test the db_field_exists() function.
    */
   function testDBFieldExists() {
-    $this->assertIdentical(TRUE, db_field_exists('node', 'nid'), t('Returns true for existent column.'));
-    $this->assertIdentical(FALSE, db_field_exists('node', 'nosuchcolumn'), t('Returns false for nonexistent column.'));
+    $this->assertIdentical(TRUE, db_field_exists('test', 'id'), t('Returns true for existent column.'));
+    $this->assertIdentical(FALSE, db_field_exists('test', 'nosuchcolumn'), t('Returns false for nonexistent column.'));
   }
 
   /**
    * Test the db_index_exists() function.
    */
   function testDBIndexExists() {
-    $this->assertIdentical(TRUE, db_index_exists('node', 'node_created'), t('Returns true for existent index.'));
-    $this->assertIdentical(FALSE, db_index_exists('node', 'nosuchindex'), t('Returns false for nonexistent index.'));
+    $this->assertIdentical(TRUE, db_index_exists('test', 'ages'), t('Returns true for existent index.'));
+    $this->assertIdentical(FALSE, db_index_exists('test', 'nosuchindex'), t('Returns false for nonexistent index.'));
   }
 }
 
@@ -3040,7 +3040,7 @@ class DatabaseBasicSyntaxTestCase extends DatabaseTestCase {
    * Test for string concatenation.
    */
   function testBasicConcat() {
-    $result = db_query('SELECT CONCAT(:a1, CONCAT(:a2, CONCAT(:a3, CONCAT(:a4, :a5))))', array(
+    $result = db_query('SELECT CONCAT(:a1, CONCAT(:a2, CONCAT(:a3, CONCAT(:a4, :a5)))) FROM {test}', array(
       ':a1' => 'This',
       ':a2' => ' ',
       ':a3' => 'is',
diff --git modules/simpletest/tests/schema.test modules/simpletest/tests/schema.test
index 8945117..c3fad57 100644
--- modules/simpletest/tests/schema.test
+++ modules/simpletest/tests/schema.test
@@ -125,6 +125,7 @@ class SchemaTestCase extends DrupalWebTestCase {
           'mysql_type' => 'timestamp',
           'pgsql_type' => 'timestamp',
           'sqlite_type' => 'datetime',
+          'oci_type' => 'timestamp',
           'not null' => FALSE,
           'default' => NULL,
         ),
diff --git modules/system/system.admin.inc modules/system/system.admin.inc
index 23a975b..c359ae8 100644
--- modules/system/system.admin.inc
+++ modules/system/system.admin.inc
@@ -2948,7 +2948,10 @@ function system_actions_manage() {
   }
 
   $row = array();
-  $instances_present = db_query("SELECT aid FROM {actions} WHERE parameters <> ''")->fetchField();
+  $instances_present = db_select('actions')
+    ->fields('actions', array('aid'))
+    ->where('LENGTH(parameters) > 0')
+    ->execute()->fetchField();
   $header = array(
     array('data' => t('Action type'), 'field' => 'type'),
     array('data' => t('Label'), 'field' => 'label'),
diff --git modules/user/user.admin.inc modules/user/user.admin.inc
index 1cc2c4a..7b9631c 100644
--- modules/user/user.admin.inc
+++ modules/user/user.admin.inc
@@ -200,7 +200,10 @@ function user_admin_account() {
   $accounts = array();
   foreach ($result as $account) {
     $users_roles = array();
-    $roles_result = db_query('SELECT rid FROM {users_roles} WHERE uid = :uid', array(':uid' => $account->uid));
+    $roles_result = db_select('users_roles')
+      ->fields('users_roles', array('rid'))
+      ->condition('uid', $account->uid)
+      ->execute();
     foreach ($roles_result as $user_role) {
       $users_roles[] = $roles[$user_role->rid];
     }
