<?php

/**
 * Implements hook_ctools_plugin_directory().
 */
function geonames_field_ctools_plugin_directory($module, $plugin) {
  if ($module == 'entityreference') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_ctools_plugin_type().
 */
function geonames_field_ctools_plugin_type() {
  $plugins['selection'] = array(
    'classes' => array('class'),
  );
  return $plugins;
}

/**
 * Implements hook_entity_info_alter().
 */
function geonames_field_entity_info_alter(&$entity_info) {
  $entity_info['geoname']['controller class'] = 'GeonamesController';
  // Avoid issues with tokens
  unset($entity_info['geoname']['entity keys']['bundle']);
  unset($entity_info['geoname']['bundle keys']);
}

/**
 * Controller class for Geonames entity types.
 */
class GeonamesController extends EntityAPIController {

  /**
   * Loads geonames entities from database, otherwise retrieves them from web
   * service.
   */
  public function load($ids = array(), $conditions = array()) {
    $entities = array();
    if(!isset($conditions['language'])) {
      global $language;
      $conditions['language'] = $language->language;      
    }
    $entities = parent::load($ids, $conditions);
    if(empty($entities)) {
      $entities = array();
      foreach($ids as $id) {
        $res = geonames_query('get', array(
          'geonameid' => $id,
          'lang' => $language->language,
        ));
        if($res->results && ($geoname = (object)array_shift($res->results))) {
          $geoname->id = $geoname->geonameid;
          $geoname->language = $language->language;
          $geoname->type = 'geoname';
          $geoname->is_new = TRUE;
          $geoname->original = new stdClass;
          $this->save($geoname);
          $entities[$geoname->id] = $geoname;
        }
      }
    }
    return $entities;
  }
}
