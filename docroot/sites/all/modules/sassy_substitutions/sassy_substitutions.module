<?php

/**
 * @file
 * Adds token and pattern substitutions for the SASSY SASS / SCSS compiler.
 */

/**
 * Implements hook_sassy_functions().
 * Adds the "token" function to the parser.
 */
function sassy_substitutions_sassy_functions() {
  return array(
    'token' => array(
      'name' => 'token',
      'callback' => 'sassy_substitutions_token'
    ),
  );
}

/**
 * Callback for the "token" function.
 * @param    token name.
 * @param+   argument(s) to pass to token callback.
 * @return   result of defined token callback.
 * @return   defined token string.
 * @return   NULL if no valid token found.
 */
function sassy_substitutions_token() {
  $tokens = sassy_substitutions_tokens_fetch();
  $cache  =& drupal_static(__FUNCTION__, array());
  $arguments = func_get_args();
  $token = $arguments[0];
  $result = NULL;

  $pattern = '/[^a-z0-9_]+/';
  $safe_token = preg_replace($pattern, '_', $token);
  foreach ($tokens as $key => $info) {
    if (preg_replace($pattern, '_', $key) == $safe_token) {
      $result = $info['string'];
      if (empty($info['string']) && !empty($info['callback']) && function_exists($info['callback'])) {
        if (!empty($info['cache'])) {
          $hash = drupal_hash_base64(serialize($info) . ':' . serialize(func_get_args()));
          $result = $cache[$hash] = isset($cache[$hash]) ? $cache[$hash] : call_user_func_array($info['callback'], $arguments);
        }
        else {
          $result = call_user_func_array($info['callback'], $arguments);
        }
      }
      break;
    }
  }

  return $result;
}


/**
 * Implementation of hook_sassy_substitutions_token_info().
 *
 * Loads the theme settings form of a theme and extracts the theme settings
 * that are marked as SASS Tokens.
 */
function sassy_substitutions_sassy_substitutions_token_info() {
  module_load_include('inc', 'system', 'system.admin');
  // Load the theme settings form so we can extract all theme settings that
  // are flagged as SASS tokens.
  $elements = drupal_get_form('system_theme_settings', $GLOBALS['theme_key']);
  $tokens = sassy_substitutions_tokens_extract($elements, $GLOBALS['theme_key']);
  foreach ($tokens as $key => $label) {
    $info[$key] = array(
      'label' => $label,
      'description' => t('A theme settings token.'),
      'token' => str_replace('_', '-', $key),
      'callback' => 'sassy_substitutions_theme_setting',
    );
  }
  return $info;
}

/**
 * Token callback for theme setting tokens.
 *
 * @param $info
 *   The token info as an array.
 * @param $match
 *   Information about the matched string in the SCSS as returned by
 *   sassy_substitutions_tokens_find().
 *
 * @return
 *   The stored theme setting value for this theme setting token.
 */
function sassy_substitutions_theme_setting($key) {
  return theme_get_setting($key);
}

/**
 * Picks all form elements that are marked as SASS tokens from a form.
 *
 * @param $elements
 *   A FAPI array render array.
 * @param $values
 *   The submitted form values as an array.
 *
 * @return
 *   All form elements that are marked as tokens in an array, keyed by the
 *   form element's key.
 */
function sassy_substitutions_tokens_extract($elements, $theme) {
  $tokens = array();
  foreach (element_children($elements) as $key) {
    if (!empty($elements[$key]['#sassy'])) {
      $tokens[$key] = !empty($elements[$key]['#title']) ? $elements[$key]['#title'] : '';
    }
    $tokens = array_merge($tokens, sassy_substitutions_tokens_extract($elements[$key], $theme));
  }
  return $tokens;
}

/**
 * Populates a token implementation with default values.
 *
 * @param $item
 *   An array defining a token.
 *
 * @return
 *   The token array, populated with defaults.
 */
function sassy_substitutions_tokens_defaults($item) {
  $item = $item + array(
    'label' => '',
    'description' => '',
    'token' => '',
    'string' => NULL,
    'callback' => NULL,
    'preprocess' => TRUE,
    'cache' => TRUE,
  );
  $item['token'] = $item['preprocess'] ? preg_quote($item['token']) : $item['token'];
  return $item;
}

/**
 * Collects information about possible replacement strings or callbacks. Those
 * can be provided by modules and themes and will be executed before the SASS
 * parser.
 *
 * @return
 *   A list of all defined SASS modifiers as an array.
 */
function sassy_substitutions_tokens_fetch() {
  $tokens = &drupal_static(__FUNCTION__);
  if (!isset($tokens)) {
    $tokens = array();
    if ($cache = cache_get('sassy_substitutions_tokens:' . $GLOBALS['theme_key'])) {
      $tokens = $cache->data;
    }
    else {
      foreach (module_implements('sassy_substitutions_token_info') as $module) {
        foreach (module_invoke($module, 'sassy_substitutions_token_info') as $key => $item) {
          $item['key'] = $key;
          $item['module'] = $module;
          $tokens[$key] = sassy_substitutions_tokens_defaults($item);
        }
      }
      foreach (array_merge($GLOBALS['base_theme_info'], array($GLOBALS['theme_info'])) as $info) {
        $function = $info->info['name'] . '_sassy_substitutions_token_info';
        if (function_exists($function) && $data = $function()) {
          foreach ($data as $key => $item) {
            $item['key'] = $key;
            $item['theme'] = $info->info['name'];
            $tokens[$key] = sassy_substitutions_tokens_defaults($item);
          }
        }
      }
      // This removes any tokens that have not been replaced, replacing them with their defaults.
      drupal_alter('sassy_substitutions_token_info', $tokens);
      cache_set('sassy_substitutions_tokens:' . $GLOBALS['theme_key'], $tokens);
    }
  }
  return $tokens;
}