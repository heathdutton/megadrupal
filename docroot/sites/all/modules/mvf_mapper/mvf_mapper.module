<?php
/**
 * @file
 * Integrates Measured Value Field with Feeds
 */

/**
 * Implements hook_feeds_processor_targets_alter().
 */
function mvf_mapper_feeds_processor_targets_alter(&$targets, $entity_type, $bundle_name) {
  foreach (field_info_instances($entity_type, $bundle_name) as $field_name => $field) {
    $info = field_info_field($field_name);
    if (preg_match("/^mvf.*/", $info['type'])) {
      $targets[$field_name . ':value'] = array(
        'name' => t('@name: Value', array('@name' => $field['label'])),
        'callback' => 'mvf_mapper_feeds_set_target',
        'description' => t('The from value for the @name field (use this if not using a "to" value).', array('@name' => $field['label'])),
        'real_target' => $field_name,
      );
      $targets[$field_name . ':unit'] = array(
        'name' => t('@name: Unit measure', array('@name' => $field['label'])),
        'callback' => 'mvf_mapper_feeds_set_target',
        'description' => t('The units for the @name field.', array('@name' => $field['label'])),
        'real_target' => $field_name,
      );
    }
  }
}

/**
 * Callback for mapping. Here is where the actual mapping happens.
 *
 * When the callback is invoked, $target contains the name of the field the
 * user has decided to map to and $value contains the value of the feed item
 * element the user has picked as a source.
 */
function mvf_mapper_feeds_set_target($source, $entity, $target, $value) {
  if (is_array($value) || ($value == '')) {
    return;
  }

  // Examine target: first part is field name, second part is type (value /unit)
  list($field_name, $type) = explode(':', $target);

  switch ($type) {
    // Value.
    case 'value':
      $field_temp = $entity->{$field_name}[LANGUAGE_NONE];
      if (is_array($value)) {
        $i = 0;
        foreach ($value as $v) {
          if (!is_array($v) && !is_object($v)) {
            $field_temp[$i]['value'] = $v;
          }
          $i++;
        }
      }
      else {
        $field_temp[0]['value'] = $value;
      }
      break;

    // Unit measure.
    case 'unit':
      $field_temp = $entity->{$field_name}[LANGUAGE_NONE];
      if (is_array($value)) {
        $i = 0;
        foreach ($value as $v) {
          if (!is_array($v) && !is_object($v)) {
            $field_temp[$i]['target_id'] = mvf_mapper_get_unit($v);
          }
          $i++;
        }
      }
      else {
        $field_temp[0]['target_id'] = mvf_mapper_get_unit($value);
      }
      break;
  }

  $entity->{$field_name}[LANGUAGE_NONE] = $field_temp;
}

/**
 * Returns the unit measure id or 0 if the unit entity is not found.
 *
 * @param string $machine_name
 *   Unit machine name.
 */
function mvf_mapper_get_unit($machine_name) {
  $unit_entity = units_unit_machine_name_load($machine_name);

  if ($unit_entity) {
    return $unit_entity->umid;
  }
  return 0;
}
