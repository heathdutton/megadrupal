<?php

/**
 * @file
 * Base class for New Relic Insights behavior tests.
 */


class NewRelicInsightsBehaviorTestBase extends DrupalWebTestCase {

  /**
   * Fake account ID for use with our fake endpoint.
   * @var int
   */
  protected $accountID = 1337;

  /**
   * Fake insert key for use with our fake endpoint.
   * @var string
   */
  protected $insertKey = 'oMgwtFBbq1337=';

  /**
   * Fake query key for use with our fake endpoint.
   * @var string
   */
  protected $queryKey = '0MgWtfbbQ1337=';

  public function setUp() {
    parent::setUp(array(
      'new_relic_insights',
      'new_relic_insights_endpoint',
    ));

    $endpoint = $this->getAbsoluteUrl('insights');
    variable_set('new_relic_insights_baseurl', $endpoint);
    variable_set('new_relic_insights_query_baseurl', $endpoint);
    variable_set('new_relic_insights_curl_timeout', 10);
  }

  public function tearDown() {
    parent::tearDown();
    variable_del('new_relic_insights_endpoint_data');
  }

  /**
   * Sets up the user-agent string so that inward pointing http requests are
   * picked up by the test install.
   */
  protected function setUpInsightsUA() {
    // Set our custom user-agent to ensure we hit the right DB/prefix/instance.
    if (preg_match('/simpletest\d+/', $this->databasePrefix, $matches)) {
      variable_set('new_relic_insights_ua', drupal_generate_test_ua($matches[0]));
    }
  }

  /**
   * Sets up insert API credentials.
   */
  protected function setUpCredentials($clear_cache = FALSE) {
    variable_set('new_relic_insights_account_id', $this->accountID);
    variable_set('new_relic_insights_insert_key', $this->insertKey);
    variable_set('new_relic_insights_query_key', $this->queryKey);

    if ($clear_cache) {
      drupal_flush_all_caches();
    }
  }

  /**
   * Wrapper for getting variables that automatically refreshes variables.
   *
   * @param string $variable
   *   The name of the variable to return.
   *
   * @param mixed $default
   *   The default value to return if no value exists.
   *
   * @return mixed
   *   Returns the variable.
   */
  protected function variableGet($variable, $default = NULL) {
    $this->refreshVariables();
    return variable_get($variable, $default);
  }

}
