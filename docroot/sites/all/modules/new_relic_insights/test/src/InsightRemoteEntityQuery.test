<?php

/**
 * @file
 * Contains tests for the InsightRemoteEntityQuery class.
 */

class NewRelicInsightsRemoteEntityQueryTestCase extends NewRelicInsightsUnitTestBase {

  /**
   * Mock connection, to be injected into the remote entity query class.
   */
  protected $connection;

  /**
   * A fresh remote entity query object for this test.
   * @var InsightRemoteEntityQuery
   */
  protected $query;

  /**
   * A fresh EntityFieldQuery object for this test.
   * @var EntityFieldQuery
   */
  protected $efq;

  /**
   * Default NRQL string when no conditions are provided.
   * @var string
   */
  protected $defaultNRQL = 'SELECT * FROM `Transaction` LIMIT 100';

  public static function getInfo() {
    return array(
      'name' => 'New Relic Insights: Remote Entity Query Tests',
      'description' => 'Test expected behavior in InsightRemoteEntityQuery.',
      'group' => 'New Relic Insights',
    );
  }

  public function setUp() {
    parent::setUp();

    // Manually load classes to avoid bootstrapping / checking registry.
    // Order matters!
    require_once(__DIR__ . '/../../../remote_entity/includes/remote_entity.query.inc');
    require_once(__DIR__ . '/../../src/InsightRemoteEntityQuery.inc');
    require_once(__DIR__ . '/MockConnection.php');

    $this->connection = new Connection(array(
      0 => (object) array(
        'count' => 1,
        'events' => array('foo', 'bar', 'baz'),
      ),
    ));
    $this->query = new InsightRemoteEntityQuery($this->connection);
    $this->efq = new EntityFieldQuery();
  }

  /**
   * Asserts that a part of a string is contained within the given query.
   *
   * @param string $query_part
   *   The expected query part string for which we are searching.
   *
   * @param string $message
   *   (Optional) The message to include with this assertion.
   */
  protected function assertNRQLContains($query_part, $message = NULL) {
    $this->query->buildNRQL();
    $this->assertTrue(strpos($this->query->getNRQL(), $query_part) !== FALSE, $message);
  }

  /**
   * Asserts that the NRQL string built was unaffected by any given properties.
   *
   * @param string $message
   *   (Optional) The message to include with this assertion.
   */
  protected function assertDefaultNRQL($message = NULL) {
    $this->query->buildNRQL();
    $this->assertIdentical($this->query->getNRQL(), $this->defaultNRQL, $message);
  }

  /**
   * Tests InsightRemoteEntityQuery::getNRQL() and
   * InsightRemoteEntityQuery::setNRQL().
   */
  function testGetSetNRQL() {
    $test_string = $this->randomString();
    $this->assertIdentical($this->query->getNRQL(), '', 'NRQL is empty by default.');
    $this->query->setNRQL($test_string);
    $this->assertDefaultNRQL('Successfully set and retrieved a NRQL query.');
  }

  /**
   * Tests InsightRemoteEntityQuery::buildNRQL().
   */
  function testBuildNRQL() {
    $this->query->buildNRQL();
    $this->assertDefaultNRQL('Default NRQL query built successfully.');
  }

  /**
   * Tests InsightRemoteEntityQuery::count().
   */
  function testCountNRQL() {
    $expected_string = 'SELECT COUNT(*) FROM';
    $this->query->count();
    $this->assertNRQLContains($expected_string, 'NRQL count query supported.');
  }

  /**
   * Tests InsightRemoteEntityQuery::range().
   */
  function testRangeNRQL() {
    $limit = 10;
    $max_limit = InsightRemoteEntityQuery::MAX_LIMIT;
    $this->query->range(0, $limit);
    $this->assertNRQLContains('LIMIT ' . $limit, 'NRQL query limit supported.');

    $this->query->range(0, $max_limit + $limit);
    $this->assertNRQLContains('LIMIT ' . $max_limit, 'NRQL query upper bound enforced.');
  }

  /**
   * Tests InsightRemoteEntityQuery::entityCondition() with field "entity_id."
   */
  function testEntityConditionEntityID() {
    $value = $this->randomName();
    $this->query->entityCondition('entity_id', $value);
    $this->assertNRQLContains("`iid` = '$value'", 'Entity condition entity_id supported.');
  }

  /**
   * Tests InsightRemoteEntityQuery::entityCondition() with field "entity_type."
   */
  function testEntityConditionEntityType() {
    $this->query->entityCondition('entity_type', $this->randomName());
    $this->query->buildNRQL();
    $this->assertDefaultNRQL('Entity condition entity_type has no effect.');
  }

  /**
   * Tests InsightRemoteEntityQuery::entityCondition() with field "bundle."
   */
  function testEntityConditionBundle() {
    $bundle = $this->randomName();
    $this->query->entityCondition('bundle', $bundle);
    $this->assertNRQLContains("SELECT * FROM `$bundle`", 'Entity condition bundle supported.');
  }

  /**
   * Tests InsightRemoteEntityQuery::entityCondition() with arbitrary fields.
   */
  function testEntityConditionArbitrary() {
    $field = $this->randomName();
    $value = $this->randomName();
    $this->query->entityCondition($field, $value);
    $this->assertNRQLContains("`$field` = '$value'", 'Entity condition arbitrary fields supported.');
  }

  /**
   * Tests InsightRemoteEntityQuery::fieldCondition() with arbitrary fields.
   */
  function testFieldConditionArbitrary() {
    $field = $this->randomName();
    $value = $this->randomName();
    $this->query->fieldCondition($field, 'column_ignored', $value);
    $this->assertNRQLContains("`$field` = '$value'", 'Field condition arbitrary fields supported.');
  }

  /**
   * Tests InsightRemoteEntityQuery::propertyCondition() with arbitrary fields.
   */
  function testPropertyConditionArbitrary() {
    $field = $this->randomName();
    $value = $this->randomName();
    $this->query->propertyCondition($field, $value);
    $this->assertNRQLContains("`$field` = '$value'", 'Property condition arbitrary fields supported.');
  }

  /**
   * Tests InsightRemoteEntityQuery::propertyCondition() with "<>" operator.
   */
  function testPropertyConditionNotEqualsOperatorSQL() {
    $field = $this->randomName();
    $value = $this->randomName();
    $this->query->propertyCondition($field, $value, '<>');
    $this->assertNRQLContains("`$field` != '$value'", 'Property condition SQL "NOT" operator converted to "!=".');
  }

  /**
   * Tests InsightRemoteEntityQuery::propertyCondition() with "CONTAINS"
   * operator.
   */
  function testPropertyConditionContainsOperator() {
    $field = $this->randomName();
    $value = $this->randomName();
    $this->query->propertyCondition($field, $value, 'CONTAINS');
    $this->assertNRQLContains("`$field` LIKE '%$value%'", 'Property condition CONTAINS converted to appropriate LIKE condition.');
  }

  /**
   * Tests InsightRemoteEntityQuery::propertyCondition() with "STARTS_WITH"
   * operator.
   */
  function testPropertyConditionStartsWithOperator() {
    $field = $this->randomName();
    $value = $this->randomName();
    $this->query->propertyCondition($field, $value, 'STARTS_WITH');
    $this->assertNRQLContains("`$field` LIKE '$value%'", 'Property condition STARTS_WITH converted to appropriate LIKE condition.');
  }

  /**
   * Tests InsightRemoteEntityQuery::propertyCondition() with "IN" operator.
   */
  function testPropertyConditionInOperator() {
    $field = $this->randomName();
    $value = array($this->randomName(), $this->randomName());
    $this->query->propertyCondition($field, $value, 'IN');

    $expected = "(`$field` = '$value[0]' OR `$field` = '$value[1]')";
    $this->assertNRQLContains($expected, 'Property condition IN converted to appropriate OR-separated conditions.');
  }

  /**
   * Tests InsightRemoteEntityQuery::propertyCondition() with "NOT IN" operator.
   */
  function testPropertyConditionNotInOperator() {
    $field = $this->randomName();
    $value = array($this->randomName(), $this->randomName());
    $this->query->propertyCondition($field, $value, 'NOT IN');

    $expected = "(`$field` != '$value[0]' AND `$field` != '$value[1]')";
    $this->assertNRQLContains($expected, 'Property condition NOT IN converted to appropriate AND-separated conditions.');
  }

  /**
   * Tests InsightRemoteEntityQuery::propertyCondition() NRQL injection.
   */
  function testPropertyConditionNRQLInjection() {
    $test_string = $this->randomString();
    $this->query->propertyCondition('NRQL', $test_string);
    $this->assertIdentical($this->query->getNRQL(), $test_string, 'Property condition NRQL injection supported.');
  }

  /**
   * Tests InsightRemoteEntityQuery::propertyCondition() timestamp support.
   */
  function testPropertyConditionTimestamp() {
    $since = strtotime('1 week ago');
    $this->query->propertyCondition('timestamp', $since, '>');

    $expected = 'SINCE ' . (REQUEST_TIME - $since) . ' seconds ago';
    $this->assertNRQLContains($expected, 'Property condition timestamp supported.');
  }

  /**
   * Tests InsightRemoteEntityQuery::timeCondition() timestamp normalization.
   */
  function testTimeConditionNormalization() {
    $since = '1 week ago';
    $this->query->timeCondition($since, '>');

    $expected = 'SINCE ' . (REQUEST_TIME - strtotime($since)) . ' seconds ago';
    $this->assertNRQLContains($expected, 'Time condition normalization supported.');
  }

  /**
   * Tests InsightRemoteEntityQuery::timeCondition() timestamp normalization's
   * forgiveness in casting strings that are actually timestamps.
   */
  function testTimeConditionNormalizationForgiveness() {
    $since = '1 week ago';
    $sinceString = (string) strtotime($since);
    $this->query->timeCondition($sinceString, '>');
    $expected = 'SINCE ' . (REQUEST_TIME - strtotime($since)) . ' seconds ago';
    $this->assertNRQLContains($expected, 'Time condition normalization is forgiving.');
  }

  /**
   * Tests InsightRemoteEntityQuery::timeCondition() greater than operator.
   */
  function testTimeConditionGreaterThanOperator() {
    $since = strtotime('1 hour ago');
    $this->query->timeCondition($since, '>');

    $expected = 'SINCE ' . (REQUEST_TIME - $since) . ' seconds ago';
    $this->assertNRQLContains($expected, 'Time condition greater than operator supported.');
  }

  /**
   * Tests InsightRemoteEntityQuery::timeCondition() failure with only the
   * less than operator (must have a "since" with "until").
   */
  function testTimeConditionLessThanOperatorOnly() {
    $until = strtotime('2 hours ago');
    $this->query->timeCondition($until, '<');
    $this->assertDefaultNRQL('Time condition less than operator unsupported without greater than operator.');
  }

  /**
   * Tests InsightRemoteEntityQuery::timeCondition() with both less than and
   * greater than operators.
   */
  function testTimeConditionLessThanOperator() {
    $since = strtotime('2 hours ago');
    $until = strtotime('1 hour ago');
    $this->query->timeCondition($since, '>');
    $this->query->timeCondition($until, '<');

    $expected = 'SINCE ' . (REQUEST_TIME - $since) . ' seconds ago ';
    $expected .= 'UNTIL ' . (REQUEST_TIME - $until) . ' seconds ago';
    $this->assertNRQLContains($expected, 'Time condition less than operator supported.');
  }

  /**
   * Tests InsightRemoteEntityQuery::timeCondition() greater than or equal
   * to operator.
   */
  function testTimeConditionGreaterThanOrEqualToOperator() {
    $since = strtotime('1 hour ago');
    $this->query->timeCondition($since, '>=');

    $expected = 'SINCE ' . (REQUEST_TIME - $since + 1) . ' seconds ago';
    $this->assertNRQLContains($expected, 'Time condition greater than or equal to operator supported.');
  }

  /**
   * Tests InsightRemoteEntityQuery::timeCondition() failure with only the
   * less than or equal to operator (must have a "since" with "until").
   */
  function testTimeConditionLessThanOrEqualToOperatorOnly() {
    $until = strtotime('2 hours ago');
    $this->query->timeCondition($until, '<=');
    $this->assertDefaultNRQL('Time condition less than operator unsupported without greater than operator.');
  }

  /**
   * Tests InsightRemoteEntityQuery::timeCondition() with both less than or
   * equal to and greater than or equal to operators.
   */
  function testTimeConditionLessThanOrEqualToOperator() {
    $since = strtotime('2 hours ago');
    $until = strtotime('1 hour ago');
    $this->query->timeCondition($since, '>=');
    $this->query->timeCondition($until, '<=');

    $expected = 'SINCE ' . (REQUEST_TIME - $since + 1) . ' seconds ago ';
    $expected .= 'UNTIL ' . (REQUEST_TIME - $until - 1) . ' seconds ago';
    $this->assertNRQLContains($expected, 'Time condition less than or equal to operator supported.');
  }

  /**
   * Tests InsightRemoteEntityQuery::timeCondition() greater than or equal
   * to operator.
   */
  function testTimeConditionEqualToOperator() {
    $since = strtotime('1 hour ago');
    $this->query->timeCondition($since, '=');

    $expected = 'SINCE ' . (REQUEST_TIME - $since + 1) . ' seconds ago ';
    $expected .= 'UNTIL ' . (REQUEST_TIME - $since - 1) . ' seconds ago';
    $this->assertNRQLContains($expected, 'Time condition equal to operator supported.');
  }

  /**
   * Tests InsightRemoteEntityQuery::timeCondition() greater than or equal
   * to operator.
   */
  function testTimeConditionBetweenOperator() {
    $since = strtotime('2 hours ago');
    $until = strtotime('1 hour ago');
    $this->query->timeCondition(array($since, $until), 'BETWEEN');

    $expected = 'SINCE ' . (REQUEST_TIME - $since) . ' seconds ago ';
    $expected .= 'UNTIL ' . (REQUEST_TIME - $until) . ' seconds ago';
    $this->assertNRQLContains($expected, 'Time condition BETWEEN operator supported.');
  }

  /**
   * Tests InsightRemoteEntityQuery::execute(), and that it makes a client call.
   */
  function testExecuteClientCall() {
    $this->query->execute();

    $this->assertEqual($this->connection->callMethodType, 'query', 'Called client with method "query."');
    $this->assertIdentical($this->connection->callMethodOptions, array(
      'GET',
      array(
        'nrql' => $this->defaultNRQL,
      ),
    ), 'Execute method called client with expected options.');
  }

  /**
   * Tests InsightRemoteEntityQuery::execute() response under normal conditions.
   */
  function testExecuteStandardResponse() {
    $response = $this->query->execute();
    $expected = $this->connection->callMethodResponseResults[0]->events;

    $this->assertIdentical($response, $expected, 'Execute method returned expected results from client for normal query.');
  }

  /**
   * Tests InsightRemoteEntityQuery::execute() response under normal conditions.
   */
  function testExecuteCountResponse() {
    $this->query->count();
    $response = $this->query->execute();
    $expected = $this->connection->callMethodResponseResults[0]->count;

    $this->assertIdentical($response, $expected, 'Execute method returned expected results from client for count query.');
  }

  /**
   * Tests InsightRemoteEntityQuery::execute() response under normal conditions.
   */
  function testExecuteNRQLInjectionResponse() {
    $this->query->propertyCondition('NRQL', $this->randomString());
    $response = $this->query->execute();
    $expected = (object) array('results' => $this->connection->callMethodResponseResults);

    // Note, ensuring objects are identical is not possible in PHP, so we JSON
    // encode the objects (so we're just comparing the data as strings).
    $response = json_encode($response);
    $expected = json_encode($expected);
    $this->assertIdentical($response, $expected, 'Execute method returned expected results from client for injected NRQL query.');
  }

  /**
   * Tests InsightRemoteEntityQuery::buildFromEFQ() count query support.
   */
  function testBuildFromEFQCount() {
    $this->efq->count();
    $this->query->buildFromEFQ($this->efq);

    $expected_string = 'SELECT COUNT(*) FROM';
    $this->assertNRQLContains($expected_string, 'EFQ-built query supports EFQ::count().');
  }

  /**
   * Tests InsightRemoteEntityQuery::buildFromEFQ() range support.
   */
  function testBuildFromEFQRange() {
    $range = 20;
    $this->efq->range(0, $range);
    $this->query->buildFromEFQ($this->efq);

    $expected_string = " LIMIT $range";
    $this->assertNRQLContains($expected_string, 'EFQ-built query supports EFQ::range().');
  }

  /**
   * Tests InsightRemoteEntityQuery::buildFromEFQ() range support via Views.
   */
  function testBuildFromEFQViewsRangePerPage() {
    // metaData['view']->query->pager->options['items_per_page'];
    $view = (object) array(
      'query' => (object) array(
        'pager' => (object) array(
          'options' => array(
            'items_per_page' => 20,
          ),
        ),
      ),
    );
    $this->efq->addMetaData('view', $view);
    $this->query->buildFromEFQ($this->efq);
    $expected_string = ' LIMIT ' . $view->query->pager->options['items_per_page'];
    $this->assertNRQLContains($expected_string, 'EFQ-built query supports simple inferred range from Views "items_per_page" setting.');
  }

  /**
   * Tests InsightRemoteEntityQuery::buildFromEFQ() range support via Views.
   */
  function testBuildFromEFQViewsRangeTotalPages() {
    // metaData['view']->query->pager->options['items_per_page'];
    $view = (object) array(
      'query' => (object) array(
        'pager' => (object) array(
          'options' => array(
            'total_pages' => 75,
          ),
        ),
      ),
    );
    $this->efq->addMetaData('view', $view);
    $this->query->buildFromEFQ($this->efq);
    $expected_string = ' LIMIT ' . $view->query->pager->options['total_pages'];
    $this->assertNRQLContains($expected_string, 'EFQ-built query supports simple inferred range from Views "total_pages" setting.');
  }

  /**
   * Tests InsightRemoteEntityQuery::buildFromEFQ() range support via Views.
   */
  function testBuildFromEFQViewsRangeTotalPagesPerPage() {
    // metaData['view']->query->pager->options['items_per_page'];
    $view = (object) array(
      'query' => (object) array(
        'pager' => (object) array(
          'options' => array(
            'items_per_page' => 3,
            'total_pages' => 75,
          ),
        ),
      ),
    );
    $this->efq->addMetaData('view', $view);
    $this->query->buildFromEFQ($this->efq);
    $expected_string = ' LIMIT ' . ($view->query->pager->options['total_pages'] * $view->query->pager->options['items_per_page']);
    $this->assertNRQLContains($expected_string, 'EFQ-built query supports inferred range from Views "items_per_page" and "total_pages" settings.');
  }

  /**
   * Tests InsightRemoteEntityQuery::buildFromEFQ() property condition support.
   */
  function testBuildFromEFQPropertyCondition() {
    $field = $this->randomName();
    $value = $this->randomName();
    $this->efq->propertyCondition($field, $value);
    $this->query->buildFromEFQ($this->efq);
    $this->assertNRQLContains("`$field` = '$value'", 'EFQ-built query supports property conditions.');
  }

  /**
   * Tests InsightRemoteEntityQuery::buildFromEFQ() property condition support.
   */
  function testBuildFromEFQEntityCondition() {
    $field = $this->randomName();
    $value = $this->randomName();
    $this->efq->entityCondition($field, $value);
    $this->query->buildFromEFQ($this->efq);
    $this->assertNRQLContains("`$field` = '$value'", 'EFQ-built query supports entity conditions.');
  }

  /**
   * Tests InsightRemoteEntityQuery::buildFromEFQ() property condition support.
   */
  function testBuildFromEFQFieldCondition() {
    $field = $this->randomName();
    $value = $this->randomName();
    $this->efq->fields[0] = array('field' => $field, 'value' => $value);
    $this->query->buildFromEFQ($this->efq);
    $this->assertNRQLContains("`$field` = '$value'", 'EFQ-built query supports field conditions.');
  }

  /**
   * Tests InsightRemoteEntityQuery::buildNRQL() multiple bundle support.
   */
  function testBuildNRQLMultiBundle() {
    $bundles = array('Transaction', 'PageView');
    $this->query->entityCondition('bundle', $bundles, 'IN');

    $expected_string = 'SELECT * FROM `Transaction`, `PageView` ';
    $this->assertNRQLContains($expected_string, 'NRQL query multiple event types supported.');
  }

  /**
   * Tests InsightRemoteEntityQuery::buildNRQL() multiple condition support.
   */
  function testBuildNRQLMultiConditions() {
    $conditions = array(
      array('field' => $this->randomName(), 'value' => $this->randomName()),
      array('field' => $this->randomName(), 'value' => $this->randomName()),
    );
    foreach ($conditions as $condition) {
      $this->query->propertyCondition($condition['field'], $condition['value']);
    }

    $expected_string = " WHERE `{$conditions[0]['field']}` = '{$conditions[0]['value']}' AND ";
    $expected_string .= "`{$conditions[1]['field']}` = '{$conditions[1]['value']}' ";
    $this->assertNRQLContains($expected_string, 'NRQL query multiple conditions supported.');
  }

  /**
   * Tests InsightRemoteEntityQuery::buildNRQL() multiple "IN" conditions.
   */
  function testBuildNRQLMultiInConditions() {
    $conditions = array(
      array('field' => $this->randomName(), 'value' => array($this->randomName(), $this->randomName())),
      array('field' => $this->randomName(), 'value' => array($this->randomName(), $this->randomName())),
    );
    foreach ($conditions as $condition) {
      $this->query->propertyCondition($condition['field'], $condition['value'], 'IN');
    }

    $expected_string = " WHERE (`{$conditions[0]['field']}` = '{$conditions[0]['value'][0]}' OR ";
    $expected_string .= "`{$conditions[0]['field']}` = '{$conditions[0]['value'][1]}') AND ";
    $expected_string .= "(`{$conditions[1]['field']}` = '{$conditions[1]['value'][0]}' OR ";
    $expected_string .= "`{$conditions[1]['field']}` = '{$conditions[1]['value'][1]}') ";
    $this->assertNRQLContains($expected_string, 'NRQL query multiple "IN" conditions supported.');
  }

  /**
   * Tests InsightRemoteEntityQuery::buildNRQL() multiple "IN" conditions that
   * are preceded by a regular condition.
   */
  function testBuildNRQLMultiInWithNormalConditions() {
    $inConditions = array(
      array('field' => $this->randomName(), 'value' => array($this->randomName(), $this->randomName())),
      array('field' => $this->randomName(), 'value' => array($this->randomName(), $this->randomName())),
    );
    $stdCondition = array('field' => $this->randomName(), 'value' => $this->randomName());

    $this->query->propertyCondition($stdCondition['field'], $stdCondition['value']);
    foreach ($inConditions as $condition) {
      $this->query->propertyCondition($condition['field'], $condition['value'], 'IN');
    }

    $expected_string = " WHERE `{$stdCondition['field']}` = '{$stdCondition['value']}' AND (`{$inConditions[0]['field']}`";
    $this->assertNRQLContains($expected_string, 'NRQL query multiple "IN" conditions supported in combination with normal conditions.');
  }

  /**
   * Tests InsightRemoteEntityQuery::buildNRQL() multiple "OUT" conditions.
   */
  function testBuildNRQLMultiOutConditions() {
    $conditions = array(
      array('field' => $this->randomName(), 'value' => array($this->randomName(), $this->randomName())),
      array('field' => $this->randomName(), 'value' => array($this->randomName(), $this->randomName())),
    );
    foreach ($conditions as $condition) {
      $this->query->propertyCondition($condition['field'], $condition['value'], 'NOT IN');
    }

    $expected_string = " WHERE (`{$conditions[0]['field']}` != '{$conditions[0]['value'][0]}' AND ";
    $expected_string .= "`{$conditions[0]['field']}` != '{$conditions[0]['value'][1]}' AND ";
    $expected_string .= "`{$conditions[1]['field']}` != '{$conditions[1]['value'][0]}' AND ";
    $expected_string .= "`{$conditions[1]['field']}` != '{$conditions[1]['value'][1]}') ";
    $this->assertNRQLContains($expected_string, 'NRQL query multiple "NOT IN" conditions supported.');
  }

  /**
   * Tests InsightRemoteEntityQuery::buildNRQL() multiple "OUT" conditions that
   * are preceded by a regular condition.
   */
  function testBuildNRQLMultiOutWithNormalConditions() {
    $outConditions = array(
      array('field' => $this->randomName(), 'value' => array($this->randomName(), $this->randomName())),
      array('field' => $this->randomName(), 'value' => array($this->randomName(), $this->randomName())),
    );
    $stdCondition = array('field' => $this->randomName(), 'value' => $this->randomName());

    $this->query->propertyCondition($stdCondition['field'], $stdCondition['value']);
    foreach ($outConditions as $condition) {
      $this->query->propertyCondition($condition['field'], $condition['value'], 'NOT IN');
    }

    $expected_string = " WHERE `{$stdCondition['field']}` = '{$stdCondition['value']}' AND (`{$outConditions[0]['field']}`";
    $this->assertNRQLContains($expected_string, 'NRQL query multiple "NOT IN" conditions supported in combination with normal conditions.');
  }

}
