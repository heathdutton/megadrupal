<?php

/**
 * Data query tests for New Relic Insights.
 */
class NewRelicInsightsQueryTestCase extends NewRelicInsightsBehaviorTestBase {

  /**
   * A fresh EntityFieldQuery object for our testing purposes.
   * @var EntityFieldQuery
   */
  protected $efq;

  public static function getInfo() {
    return array(
      'name' => 'New Relic Insights: Query Tests',
      'description' => 'Test expected Query behaviours.',
      'group' => 'New Relic Insights',
    );
  }

  public function setUp() {
    parent::setUp();
    $this->efq = new EntityFieldQuery;
  }

  /**
   * Asserts that the prior query generated the expected query.
   *
   * @param string $nrql
   *   The expected NRQL query to have been used for the previous query.
   *
   * @param int $nth
   *   The Nth query to have been made.
   */
  protected function assertExpectedQuery($nrql, $nth = 0) {
    $results = $this->variableGet('new_relic_insights_endpoint_data', array());
    $result = $results[$this->accountID];
    $this->assertIdentical($result[$nth]['nrql'], $nrql, 'Query was made as expected.');
  }

  /**
   * Tests that querying for an Insight entity requires that a query key be set.
   */
  public function testQueryKeyMustBeSet() {
    // Ensure no GET is sent when no credentials are provided.
    variable_del('new_relic_insights_query_key');
    $this->efq->entityCondition('entity_type', 'insight');
    $this->efq->propertyCondition('remote_id', 'anything', '=');

    try {
      $this->efq->execute();
      $caught = FALSE;
    }
    catch (Exception $e) {
      $this->assertEqual($e->getMessage(), 'Entity <em class="placeholder">insight</em> has no base table.', 'Query key must be configured to query Insights.');
      $caught = TRUE;
    }

    if (!$caught) {
      $this->assertTrue(FALSE, 'Query key must be configured to query Insights.');
    }
  }

  /**
   * Tests that entity queries against internal properties do not go out to the
   * Insights service.
   */
  public function testInternalQuery() {
    $this->setUpCredentials(TRUE);
    $this->efq->entityCondition('entity_type', 'insight');
    $this->efq->propertyCondition('remote_id', 'anything', '=');
    $this->efq->execute();

    $results = $this->variableGet('new_relic_insights_endpoint_data', array());
    $this->assertIdentical($results, array(), 'Querying for internal property avoids web service all to Insights.');
  }

  /**
   * Tests that entity queries that do not contain internal properties DO go out
   * to the Insights service.
   */
  public function testExternalQuery() {
    $expected_query = 'SELECT COUNT(*) FROM Transaction';
    $this->setUpCredentials(TRUE);
    $this->efq->entityCondition('entity_type', 'insight');
    $this->efq->propertyCondition('NRQL', $expected_query);
    $this->setUpInsightsUA();
    $this->efq->execute();
    $this->assertExpectedQuery($expected_query);
  }

}
