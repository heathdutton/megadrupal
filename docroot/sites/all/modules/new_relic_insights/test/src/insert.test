<?php

/**
 * Data insertion tests for New Relic Insights.
 */
class NewRelicInsightsInsertTestCase extends NewRelicInsightsBehaviorTestBase {

  /**
   * An array of fake data to be posted to the fake Insights endpoint.
   * @var array
   */
  protected $eventData = array(
    'eventType' => 'fooBar',
    'baz' => 'fizz',
    'biz' => 'buzz',
    'message' => 'This is a message.',
    'variables' => array(),
    'aid' => 1337,
  );

  public static function getInfo() {
    return array(
      'name' => 'New Relic Insights: Insert Tests',
      'description' => 'Test expected Insert behaviours.',
      'group' => 'New Relic Insights',
    );
  }

  /**
   * Asserts that event insertions occurred as expected.
   *
   * @param int $account
   *   The account number for which events were expected to have been inserted.
   *
   * @param int $count
   *   (Optional) The number of events that were expected to have been inserted.
   */
  protected function assertValidInsert($account, $count = NULL) {
    $results = $this->variableGet('new_relic_insights_endpoint_data', array());


    if ($count === 0) {
      $this->assertIdentical($results, array(), 'No Insights events inserted.');
    }
    else {
      $result = $results[$account];

      if ($count !== NULL) {
        $this->assertIdentical(count($result), $count, 'Correct number of requests made.');
      }

      foreach ($result as $event) {
        $this->assertIdentical($event['headers']['x-insert-key'], $this->insertKey, 'Request included expected insert key.');
        $this->assertIdentical($event['headers']['content-type'], 'application/json', 'Request included correct content type.');
      }
    }
  }

  /**
   * Tests the primary event post function.
   */
  public function testPostEvent() {
    // Ensure no POST is sent when no credentials are provided.
    variable_del('new_relic_insights_account_id');
    $this->setUpInsightsUA();
    new_relic_insights_post_event($this->eventData);
    $this->assertValidInsert($this->accountID, 0);

    // Ensure POST data is sent as expected when all credentials are provided.
    $this->setUpCredentials();
    $this->setUpInsightsUA();
    new_relic_insights_post_event($this->eventData);
    $this->assertValidInsert($this->accountID, 1);
    $results = $this->variableGet('new_relic_insights_endpoint_data', array());
    $result = $results[$this->accountID][0];
    $this->assertIdentical($result['post'], drupal_json_encode($this->eventData), 'Request sent data as expected.');
  }

  /**
   * Tests that watchdog event inserts work as expected.
   */
  public function testWatchdogWorkflow() {
    $this->setUpCredentials();

    // Ensure no watchdog events are queued when not configured.
    $queue = DrupalQueue::get(NEW_RELIC_INSIGHTS_QUEUE);
    $queue->deleteQueue();
    variable_del('new_relic_insights_collect_watchdog');
    $this->setUpInsightsUA();
    new_relic_insights_watchdog($this->eventData);
    $this->assertEqual($queue->numberOfItems(), 0, 'Watchdog event collection disabled by default.');

    // Ensure multiple watchdog events can be queued.
    variable_set('new_relic_insights_collect_watchdog', TRUE);
    new_relic_insights_watchdog($this->eventData);
    new_relic_insights_watchdog($this->eventData);
    $this->assertEqual($queue->numberOfItems(), 2, 'Watchdog event collection created the correct number of queue items.');

    // Running through the queue inserts the queued events.
    $this->setUpInsightsUA();
    $ran = new_relic_insights_run_queue();
    $this->assertIdentical($ran, 2, 'Correct number of requests made.');
    $this->assertValidInsert($this->accountID);

    // Ensure the watchdog event includes expected values.
    $results = $this->variableGet('new_relic_insights_endpoint_data', array());
    $results = $results[$this->accountID];
    $eventData = drupal_json_decode($results[0]['post']);
    $this->assertEqual($eventData['eventType'], 'watchdog', 'Event includes type "watchdog" in payload.');
    $this->assertTrue(isset($eventData['iid']), 'Event payload includes an iid');
    $this->assertTrue(isset($eventData['fullMessage']), 'Event payload includes a "fullMessage" field.');

    // Ensure watchdog events are recorded via the agent when available.
    require_once('MockCustomEventRecorder.php');
    new_relic_insights_watchdog($this->eventData);
    new_relic_insights_watchdog($this->eventData);
    $events = newrelic_record_custom_event();
    $this->assertEqual(count($events['watchdog']), 2, 'Watchdog event collection pinged the agent the correct number times.');

  }

  /**
   * Tests that better stats will properly decorate transactions.
   */
  public function testBetterStatsWorkflow() {
    // Ensure the transaction is not decorated when not configured.
    variable_del('new_relic_insights_collect_accesslog');
    new_relic_insights_better_statistics_log($this->eventData);
    $data = newrelic_add_custom_parameter();
    $this->assertIdentical($data, array(), 'Transaction decoration disabled by default.');

    // Ensure transaction decoration behaves as expected.
    variable_set('new_relic_insights_collect_accesslog', TRUE);
    new_relic_insights_better_statistics_log($this->eventData);
    $data = newrelic_add_custom_parameter();
    $this->assertTrue(!isset($data['aid']), 'Transaction decoration removed the "aid" attribute.');
    $this->assertTrue(isset($data['iid']), 'Transaction decoration added an "iid" attribute.');
    $expected = $this->eventData;
    unset($expected['aid'], $expected['variables']);
    foreach ($expected as $key => $value) {
      $this->assertIdentical($value, $data[$key], format_string('Successfully decorated transaction with %key = %value.', array(
        '%key' => $key,
        '%value' => $data[$key],
      )));
    }
  }
}

/**
 * Mock implementation of the new relic transaction decoration mechanism. If
 * called with no parameters, all results will be returned.
 *
 * @param string $name
 *   The key by which the given data should be stored.
 *
 * @param mixed $value
 *   The value to be stored.
 *
 * @param bool $reset
 *   TRUE if the statically stored values should be dumped and reset.
 *
 * @return array
 *   An associative array of data stored by callers.
 */
if (!function_exists('newrelic_add_custom_parameter')) {
  function newrelic_add_custom_parameter($name = FALSE, $value = FALSE, $reset = FALSE) {
    static $decorations;
    if ($reset || empty($decorations)) {
      $decorations = array();
    }
    if ($name !== FALSE && $value !== FALSE) {
      $decorations[$name] = $value;
    }
    return $decorations;
  }
}
