<?php

/**
 * Admin UI tests for New Relic Insights.
 */
class NewRelicInsightsUITestCase extends NewRelicInsightsBehaviorTestBase {

  /**
   * Sample data to try saving on the configuration form.
   * @var array
   */
  protected $admin_values = array(
    'new_relic_insights_account_id' => 1337,
    'new_relic_insights_insert_key' => 'oMgWtfBbq1337=',
    'new_relic_insights_query_key' => '=7331qbBftWgMo',
    'new_relic_insights_expiry_time' => 900,
    'new_relic_insights_collect_watchdog' => TRUE,
  );

  public static function getInfo() {
    return array(
      'name' => 'New Relic Insights: UI Tests',
      'description' => 'Test expected UI behaviours.',
      'group' => 'New Relic Insights',
    );
  }

  /**
   * Ensure only those with permissions have access to the configuration page.
   */
  public function testShouldFollowPermissions() {
    // Create an admin user without proper credentials.
    $account = $this->drupalCreateUser(array('access administration pages'));
    $this->drupalLogin($account);

    // Attempt to visit the configuration page.
    $this->drupalGet('admin/config/services/new-relic-insights');
    $this->assertNoFieldByName('new_relic_insights_account_id', NULL, 'Did not find the configuration form.');
    $this->assertEqual($this->drupalGetHeader(':status'), 'HTTP/1.1 403 Forbidden', 'Proper permissions enforced.');

    // Log the user out.
    $this->drupalLogout();

    // Create an admin user WITH proper credentials.
    $account = $this->drupalCreateUser(array(
      'access administration pages',
      'administer new relic insights',
    ));
    $this->drupalLogin($account);

    // Attempt to visit the configuration page.
    $this->drupalGet('admin/config/services/new-relic-insights');
    $this->assertFieldByName('new_relic_insights_account_id', NULL, 'Found the configuration form.');
  }

  /**
   * Ensure all configurables are actually configurable and can be loaded.
   */
  public function testShouldAllowConfigThroughUI() {
    // Create an admin user with proper credentials.
    $account = $this->drupalCreateUser(array(
      'access administration pages',
      'administer new relic insights',
    ));
    $this->drupalLogin($account);

    // Attempt to fill out the config form with no values.
    $this->drupalPost('admin/config/services/new-relic-insights', array(), 'Save configuration');

    // Ensure required fields.
    $this->assertText('New Relic account ID field is required.', 'New Relic account ID field required');
    $this->assertText('Insert API Key field is required.', 'Insert API Key required.');

    // Fill out the form with valid values.
    $this->drupalPost('admin/config/services/new-relic-insights', $this->admin_values, 'Save configuration');

    // Ensure our provided values were saved properly.
    $this->assertText('The configuration options have been saved.', 'Confirmation message shown.');
    foreach ($this->admin_values as $key => $value) {
      $this->assertFieldByName($key, $value, format_string('Successfully saved the %var.', array(
        '%var' => $key,
      )));
      $this->assertEqual(variable_get($key, ''), $value, format_string('%var variable successfully loaded programmatically.', array(
        '%var' => $key,
      )));
    }

    // Ensure that requisites were rebuilt with initial variable saves.
    $rebuilt = $this->drupalGetHeader('x-insights-requisites-rebuilt', TRUE);
    $this->assertTrue($rebuilt, 'Rebuilt entity and client requisites on initial save.');

    // Filling out the form with a different query key rebuilds requisites.
    $modified = $this->admin_values;
    $modified['new_relic_insights_query_key'] .= '_altered';
    $this->drupalPost('admin/config/services/new-relic-insights', $modified, 'Save configuration');
    $rebuilt = $this->drupalGetHeader('x-insights-requisites-rebuilt', TRUE);
    $this->assertTrue($rebuilt, 'Rebuilt entity and client requisites on query key update.');

    // Filling out the form with the same query key does not do a rebuild.
    $modified = $this->admin_values;
    $modified['new_relic_insights_query_key'] .= '_altered';
    $this->drupalPost('admin/config/services/new-relic-insights', $modified, 'Save configuration');
    $rebuilt = $this->drupalGetHeader('x-insights-requisites-rebuilt', TRUE);
    $this->assertFalse($rebuilt, 'Did not rebuild entity and client requisites when query key value remained the same.');
  }

  /**
   * Ensure that the core Statistics module's database logging can be disabled.
   */
  public function testShouldAllowAccesslogDisableDB() {
    // Enable the statistics module and rebuild all data structure afterward.
    $success = module_enable(array('statistics'));
    $this->assertTrue($success, 'Enabled modules: statistics');
    $this->resetAll();

    // Create an admin user with proper credentials.
    $account = $this->drupalCreateUser(array(
      'access administration pages',
      'administer statistics',
    ));
    $this->drupalLogin($account);

    // Navigate to the statistics administration page and ensure our additional
    // field is shown as expected.
    $this->drupalGet('admin/config/system/statistics');
    $this->assertFieldByName('statistics_log_to_db', TRUE, 'Found database log checkbox.');
    $this->assertText('Uncheck this to log access statistics only via New Relic Insights.', 'Found helper text describing how to disable database logging.');
  }

}
