<?php

/**
 * @file
 * Contains tests for the Insight entity class.
 */

class NewRelicInsightsInsightEntityTestCase extends NewRelicInsightsUnitTestBase {

  /**
   * A fresh Insight entity instance against which to perform tests.
   * @var Insight
   */
  protected $insight;

  /**
   * Entity data with which to create the entity.
   * @var array
   */
  protected $entity_data = array(
    'key1' => 'value',
    'key2' => 3.14,
    'key3' => TRUE,
    'key4' => '',
  );

  public static function getInfo() {
    return array(
      'name' => 'New Relic Insights: Insight Tests',
      'description' => 'Test expected behavior in the Insight entity class.',
      'group' => 'New Relic Insights',
    );
  }

  public function setUp() {
    parent::setUp();

    // Manually load classes to avoid bootstrapping / checking registry.
    // Order matters!
    $this->require_once_insanity('class', 'Entity', __DIR__ . '/../../../entity/includes/entity.inc');
    require_once(__DIR__ . '/../../src/Insight.inc');
    require_once(__DIR__ . '/InsightWrapper.php');

    $this->setUpEntityInfo();
    $this->insight = new InsightWrapper(array(
      'entity_data' => (object) $this->entity_data,
    ), 'insight');
  }

  /**
   * Tests the Insight::__isset() magic method.
   */
  function testInsightPropertyIsset() {
    // Ensure a non-existent key is marked as such.
    $not_key = $this->randomName();
    $this->assertTrue(!isset($this->insight->$not_key), format_string('Insight "isset" magic method returns FALSE for non-existent key %key.', array(
      '%key' => $not_key,
    )));

    // Iterate through defined custom entity data properties.
    foreach ($this->entity_data as $key => $value) {
      $this->assertTrue(isset($this->insight->$key), format_string('Insight "isset" magic method returns TRUE for existing key %key.', array(
        '%key' => $key,
      )));
    }
  }

  /**
   * Tests the Insight::__get() magic method.
   */
  function testInsightPropertyGet() {
    // Ensure a non-existent key is returned as NULL.
    $not_key = $this->randomName();
    $this->assertIdentical($this->insight->$not_key, NULL, format_string('Insight "get" magic method returns NULL for non-existent key %key.', array(
      '%key' => $not_key,
    )));

    // Iterate through defined custom entity data properties.
    foreach ($this->entity_data as $key => $value) {
      $this->assertIdentical($this->insight->$key, $value, format_string('Insight "get" magic method returns %value for existing key %key.', array(
        '%value' => $value,
        '%key' => $key,
      )));
    }
  }

}
