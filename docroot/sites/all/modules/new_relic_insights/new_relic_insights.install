<?php

/**
 * @file
 * Install and update functions for the New Relic Insights module.
 */

/**
 * Implements hook_install().
 */
function new_relic_insights_install() {
  // Mark this module to be loaded early in the bootstrap process (this is
  // required for watchdog/accesslog integrations.
  db_update('system')
    ->fields(array(
      'bootstrap' => 1,
    ))
    ->condition('name', 'new_relic_insights', '=')
    ->execute();
}

/**
 * Implements hook_uninstall().
 */
function new_relic_insights_uninstall() {
  $variables = array(
    'new_relic_insights_account_id',
    'new_relic_insights_insert_key',
    'new_relic_insights_query_key',
    'new_relic_insights_expiry_time',
    'new_relic_insights_baseurl',
    'new_relic_insights_query_baseurl',
    'new_relic_insights_curl_timeout',
    'new_relic_insights_ua',
    'new_relic_insights_collect_accesslog',
    'new_relic_insights_collect_watchdog',
  );

  foreach ($variables as $variable) {
    variable_del($variable);
  }
}

/**
 * Implements hook_schema().
 */
function new_relic_insights_schema() {
  $schema['insight'] = array(
    'description' => "The base table for New Relic Insights.",
    'fields' => array(
      'eid' => array(
        // We give entities a local entity ID in case the remote ID is
        // non-numeric, which would make it incompatible with FieldAPI.
        'description' => 'The local Insight id.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'remote_id' => array(
        'description' => 'The remote Insight ID. Not necessarily numeric',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'type' => array(
        'description' => 'The type of this Insight.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'entity_data' => array(
        'description' => 'Serialized Insight data.',
        'type' => 'text',
        'serialize' => TRUE,
        'size' => 'big',
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the Insight was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the Insight was last updated.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      // @see RemoteEntityAPIDefaultController::remote_save()
      'remote_saved' => array(
        'description' => 'The Unix timestamp when the Insight was last saved remotely.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'needs_remote_save' => array(
        'description' => "Indicates this Insight's status for remote saving. "
          . "0: no save needed, 1: needs remote save, REMOTE_ENTITY_REMOTE_SAVE_FAILED: last remote save attempt failed.",
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      // @see RemoteEntityAPIDefaultController::load()
      'expires' => array(
        'description' => 'The Unix timestamp when the Insight expires. A value of 0 means this does not expire.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'deleted' => array(
        'description' => 'Boolean indicating that this Insight is marked for deletion.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array(
      'entity_changed'  => array('changed'),
      'entity_created'  => array('created'),
      'entity_expires'  => array('expires'),
      'entity_deleted' => array('deleted'),
      'entity_needs_remote_save' => array('needs_remote_save'),
    ),
    'unique keys' => array(
      'remote_id' => array('remote_id'),
    ),
    'foreign keys' => array(
    ),
    'primary key' => array('eid'),
  );

  return $schema;
}

/**
 * Add a table to cache Insights entities locally.
 */
function new_relic_insights_update_7100() {
  // Insight schema was added later in the module's lifecycle.
  if (!db_table_exists('insight')) {
    drupal_install_schema('new_relic_insights');
  }
}
