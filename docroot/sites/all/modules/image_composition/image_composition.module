<?php
/**
 * Wrapper around the "magazine layout" algorithm described by
 * Harvey Kane http://www.alistapart.com/articles/magazinelayout/
 *
 * Provides an alternative renderer for imagefields.
 * Choose "Magazine Layout" in the "Display fields"
 * administration for your content type.
 *
 *
 * Distributed as a one-off LGPL PHP class.
 * This is not an active 'Library' of any type and was published
 * in an online magazine as a proof-of-concept experiment.
 * Therefore the full code is distributed here rather than as
 * a separate downloadable dependency.
 *
 * This is not yet very Drupally - and may be unsafe around private files.
 * Also, has no caching. TODO! compare with imagecrop and similar.
 *
 * Can be refactored to add more intelligence, but right now it does actually just work!
 */

/**
 * Provide a callback to do on-the-fly image resizing.
 */
function image_composition_menu() {
  return array(
    'image_composition_image' => array(
      'title' => 'Image resizer',
      'page callback' => 'image_composition_image',
      'access arguments' => array(TRUE),
      'type' => MENU_CALLBACK,
      'file' => 'image.inc',
    ),
  );
}

/**
 * Publish our custom formatter.
 *
 * Implements hook_field_formatter_info().
 */
function image_composition_field_formatter_info() {
  return array(
    'image_composition_magazinelayout' => array(
      'label' => t('Magazine Layout'),
      'field types' => array('image'),
      'multiple values' => FIELD_BEHAVIOR_CUSTOM,
      'description' => t('Display multi-value fields as a composite grid.'),
      'settings' => array(
        'width' => 500,
        'padding' => 2,
      ),
    ),
  );
}



/**
 * Implements hook_field_formatter_settings_form().
 */
function image_composition_field_formatter_settings_form($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $form = array();
  $form['width'] = array(
    '#type' => 'textfield',
    '#size' => 4,
    '#title' => t('What width should the display be'),
    '#default_value' => $settings['width'],
    '#description' => t('This must be fixed width. In pixels. No suffix.'),
  );
  $form['padding'] = array(
    '#type' => 'textfield',
    '#size' => 2,
    '#title' => t('Padding between images'),
    '#default_value' => $settings['padding'],
    '#description' => t('In pixels. No suffix'),
  );
  return $form;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function image_composition_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary[] = t('Width: @value', array('@value' => $settings['width']));
  $summary[] = t('Padding: @value', array('@value' => $settings['padding']));

  return implode ('<br />', $summary);
}



/**
 * Implements hook_field_formatter_view().
 *
 * This is given multiple items, and returns the composite rendering of them.
 */
function image_composition_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $settings = $display['settings'];
  $elements = array();

  // @see http://www.alistapart.com/articles/magazinelayout/
  // Include the class file.
  module_load_include('php', 'image_composition', 'magazine-layout/magazinelayout.class');

  # Define padding around each image - this *must* be included
  # in your stylesheet (pixels).
  $padding = $settings['padding'];
  drupal_add_css(drupal_get_path('module', 'image_composition') . '/image_composition.css');

  $image_resize_script = url('image_composition_image');
  # Define your template for outputting images
  # (Don't forget to escape the &)
  $border = 1;
  $csspadding = $padding - $border;
  $internal_border = "border:{$border}px #eee solid;";
  $internal_margin = "margin:${csspadding}px;";


  $template = "<img src=\"${image_resize_script}?size=[size]&amp;file=[image]\" alt=\"\" style=\"$internal_border $internal_margin\" />";

  # Create a new instance of the class.
  $width = $settings['width'] - $padding;
  $mag = new magazinelayout($width, $padding, $template);

  # Add the images.
  foreach ($items as $delta => $item) {
    $mag->addImage($item['uri']);
  }
  $markup = $mag->getHtml();

  # Display the output.
  return array(array('#markup' => $markup));
}


