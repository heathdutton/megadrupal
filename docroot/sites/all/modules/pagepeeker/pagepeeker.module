<?php

/**
 * @file
 * Module file for pagepeeker
 */

/**
 * Implements hook_help()
 */
function pagepeeker_help($path, $arg) {
  switch ($path) {
    case 'admin/help#pagepeeker':
    return t('You can find the latest help information for the PagePeeker module at !url .',
      array('!url' => l(t('http://pagepeeker.com'),
        'http://pagepeeker.com',
        array('attributes' => array('target' => '_blank'))
        ))
      );
  }
}

/**
 * Implements hook_theme()
 */
function pagepeeker_theme($existing, $type, $theme, $path) {
  return array(
    'pagepeeker_image' => array(
      'variables' => array(
        'url' => NULL,
        'size' => 'm',
        'image_options' => array(),
        'url_options' => array()
        )
      )
    );
}

/**
 * Validates the URL and removes the scheme attribute from the URL
 *
 * @param string $url
 *  The URL of the web page.
 * @param bool $domain_only
 *  A boolean that, if set, will ensure only the top level domain
 *  of the URL is returned.
 *
 * @access protected
 *
 * @return string|bool $formatted_url
 *  The formatted URL or FALSE on error.
 */
function _pagepeeker_format_url($url, $domain_only = FALSE) {
  if (filter_var($url, FILTER_VALIDATE_URL) === FALSE) {
    return FALSE;
  }

  // try to parse the url
  $parsed_url = parse_url($url);
  if (!empty($parsed_url)) {
    $host = (!empty($parsed_url['host'])) ? $parsed_url['host'] : '';
    $port = (!empty($parsed_url['port'])) ? ':' . $parsed_url['port'] : '';
    $path = (!empty($parsed_url['path'])) ? $parsed_url['path'] : '';
    $query = (!empty($parsed_url['query'])) ? '?' . $parsed_url['query'] : '';
    $fragment = (!empty($parsed_url['fragment'])) ? '#' . $parsed_url['fragment'] : '';

    if ($domain_only) {
      return $host . $port;
    }
    else {
      return $host . $port . $path . $query . $fragment;
    }
  }

  return FALSE;
}

/**
 * Provides metadata about each available thumbnail size.
 */
function _pagepeeker_sizes() {
  #$ppdomain = 'http://pagepeeker.com/';
  $ppdomain = 'http://free.pagepeeker.com/v2/'; // For API V2
  if (variable_get('pagepeeker_unbranded', 0) == 1){
    #$ppdomain = 'http://custom.pagepeeker.com/';
    $ppdomain = 'http://api.pagepeeker.com/v2/'; // For API V2
  }
  return array(
    /*
    'f' => array(
      'title' => t('Favicon'),
      'width' => 16,
      'height' => 16,
      'url' => $ppdomain . 'f/',
      'domain_only' => TRUE,
      ),
    */
    't' => array(
      'title' => t('Tiny'),
      'width' => 90,
      'height' => 68,
      'url' => $ppdomain . 'thumbs.php?size=t&url=',
      'domain_only' => FALSE,
      ),
    's' => array(
      'title' => t('Small'),
      'width' => 120,
      'height' => 90,
      'url' => $ppdomain . 'thumbs.php?size=s&url=',
      'domain_only' => FALSE,
      ),
    'm' => array(
      'title' => t('Medium'),
      'width' => 200,
      'height' => 150,
      'url' => $ppdomain . 'thumbs.php?size=m&url=',
      'domain_only' => FALSE,
      ),
    'l' => array(
      'title' => t('Large'),
      'width' => 400,
      'height' => 300,
      'url' => $ppdomain . 'thumbs.php?size=l&url=',
      'domain_only' => FALSE,
      ),
    'x' => array(
      'title' => t('Extra large'),
      'width' => 480,
      'height' => 380,
      'url' => $ppdomain . 'thumbs.php?size=x&url=',
      'domain_only' => FALSE,
      ),
    );
}


/**
 * Implements hook_field_formatter_info().
 */
function pagepeeker_field_formatter_info() {
  return array(
    'pagepeeker' => array(
      'label' => t('Pagepeeker thumbnail'),
      'field types' => array('link_field'),
      'settings' => array('pagepeeker_size' => 'm'),
      ),
    );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function pagepeeker_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $settings = $instance['display'][$view_mode]['settings'];
  $sizes = array();
  foreach (_pagepeeker_sizes() as $key => $size) {
    $sizes[$key] = "{$size['title']}: {$size['width']}x{$size['height']}";
  }

  $element['pagepeeker_size'] = array(
    '#title' => t('Thumbnail size'),
    '#type' => 'select',
    '#default_value' => $settings['pagepeeker_size'],
    '#empty_option' => t('Unspecified (use API default)'),
    '#options' => $sizes,
    );

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function pagepeeker_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $sizes = array();
  foreach (_pagepeeker_sizes() as $key => $size) {
    $sizes[$key] = "{$size['title']}: {$size['width']}x{$size['height']}";
  }

  if ($settings = $display['settings']) {
    return $sizes[$settings['pagepeeker_size']];
  }

  return t('Unspecified (use API default)');
}

/**
 * Implements hook_field_formatter_view().
 *
 * Two formatters are implemented.
 * - pagepeeker just outputs an image tag pointing to WebSnapr's thumbnail
 *   generation endpoint.
 */
function pagepeeker_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];

  switch ($display['type']) {
    case 'pagepeeker':
    foreach ($items as $delta => $item) {
      $variables = array(
        'size' => $settings['pagepeeker_size'],
        'url' => $item['url'],
        'image_options' => array(
          'alt' => empty($item['title'] )? $item['url'] : $item['title'],
          'title' => empty($item['title'] )? $item['url'] : $item['title'],
          ),
        );

      $element[$delta]['#markup'] = theme('pagepeeker_image', $variables);
    }
    break;
  }

  return $element;
}


/**
 * Displays a screenshot of a web page.
 *
 * @param array $variables
 *  The parameters of the theme() function.
 *
 * @access public
 *
 * @return string|bool
 *  The image tag or FALSE on error.
 */
function theme_pagepeeker_image($variables) {
  $sizes = _pagepeeker_sizes();
  $size = $sizes[$variables['size']];

  #$formatted_url = _pagepeeker_format_url($variables['url'], $size['domain_only']);
  $formatted_url = urlencode(_pagepeeker_format_url($variables['url'], $size['domain_only'])); // For API V2

  if (!$formatted_url) {
    return FALSE;
  }

  $options = $variables['image_options'];
  $options['attributes'] = (!empty($options['attributes'])) ? $options['attributes'] : array();

  $url_options = $variables['url_options'];
  $url_options['html'] = TRUE;

  //create the PagePeeker image source
  $options['path'] = $size['url'] . $formatted_url;
  $options['height'] = $size['height'] . 'px';
  $options['width'] = $size['width'] . 'px';

  return l(
    theme_image($options),
    $variables['url'],
    $url_options
    );
}


/**
 * Menu for this module
 * @return array An array with this module's settings.
 */
function pagepeeker_menu() {
  $items = array();

  $items['admin/config/media/pagepeeker'] = array(
    'title' => 'PagePeeker Screenshots',
    'description' => 'Settings for PagePeeker Screenshots',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pagepeeker_admin'),
    'access arguments' => array('pagepeeker configuration'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 0,
    );
  $items['admin/config/media/pagepeeker/settings'] = array(
    'title' => 'Settings',
    'description' => 'General settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pagepeeker_admin'),
    'access arguments' => array('pagepeeker configuration'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 5,
    );
  // A shortcut to the permissions settings for this module.
  $items['admin/config/media/pagepeeker/permissions'] = array(
    'title' => 'Permissions',
    'description' => 'Configure access permissions',
    'page callback' => 'pagepeeker_perms',
    'access arguments' => array('pagepeeker configuration'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
    );

  return $items;
}


/**
 * Link to the relevant access permissions
 */
function pagepeeker_perms() {
  drupal_goto('admin/people/permissions', array('fragment' => 'module-pagepeeker'));
}


/**
 * Valid permissions for this module
 * @return array An array of valid permissions for the module
 */
function pagepeeker_permission() {
  return array(
    'pagepeeker configuration' => array(
      'title' => t('PagePeeker configuration'),
      'description' => t('Set user roles that may configure PagePeeker.'),
      ),
    );
}



/**
 * PagePeeker configuration form.
 */
function pagepeeker_admin($form, &$form_state) {

  $options = array(
    0 => t('Branded (free)'),
    1 => t('Unbranded'),
    );
  $form['pagepeeker_unbranded'] = array(
    '#type' => 'radios',
    '#title' => t('Branded or unbranded thumbnails'),
    '#default_value' => variable_get('pagepeeker_unbranded', 0),
    '#options' => $options,
    '#description' => t('Select whether you wish to show branded or sponsored/paid screenshots. See <a href="http://pagepeeker.com/free-thumbnails/" target="_blank">http://pagepeeker.com/free-thumbnails/</a> and <a href="http://pagepeeker.com/site-thumbs-pricing/" target="_blank">http://pagepeeker.com/site-thumbs-pricing/</a> for more.'),
    );

  return system_settings_form($form);
}
