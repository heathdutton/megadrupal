<?php
/**
 * @file
 * Provide an accordion display style for Views.
 *
 * This file contains all necessary hooks
 */

/**
 * Implements hook_help().
 */
function views_universal_accordion_help($path, $arg) {
  switch ($path) {
    case 'admin/help#views_universal_accordion':
      $output = '<p>' . t('The Views Accordion module is a Views style plugin that displays the results in an accordion style. For more updated information see README.TXT') . '</p>';

      $output .= t('<strong>IMPORTANT:</strong> The visible parts of the closed accordion component are used to "trigger" the accordion action.') . '<br />';

      $output .= '<h4>' . t("How the view's fields are displayed:") . '</h4>';
      $output .= '<ul>';
      $output .= '<li>' . t('All non-image fields are wrapped with a <div class="wrapper"> markup element which allows extra display styles') . '</li>';
      $output .= '</ul>';

      $output .= '<h4>' . t('Choose <em>Views Accordion</em> in the <em>Style</em> dialog within your view, which will prompt you to configure:') . '</h4>';
      $output .= '<ul>';
      $output .= '<li>' . t('<strong>Trigger: </strong> The event used to trigger the accordion. Choices are: mouse over and click') . '</li>';
      $output .= '<li>' . t('<strong>Autoplay:</strong>: If the event should be triggered automatically') . '</li>';
      $output .= '<li>' . t('<strong>Accordion type: </strong> The type of the accordion: horizontal or vertical') . '</li>';
      $output .= '<li>' . t('<strong>Invert the accordion:</strong>: Whether or not the last slide stays in the same position, rather than the first slide') . '</li>';
      $output .= '<li>' . t('<strong>Display errors:</strong>: Whether or not display errors in the console') . '</li>';
      $output .= '<li>' . t('<strong>Timeout:</strong>: Timeout between slides when autoplaying') . '</li>';
      $output .= '<li>' . t('<strong>Pause on hover:</strong>: Pause on hover when autoplaying') . '</li>';
      $output .= '</ul>';
      $output .= '<h3>' . t('Theming information') . '</h3>';
      $output .= t('This module comes with a default style, which you can disable in the options (see above). Files included for your convinence:');
      $output .= '<ul><li>' . t('<strong>views-universal-acordion.css</strong> - with how the classes the author thought would be best used, mostly empty.') . '</li>';
      $output .= '<li>' . t('<strong>views-view-universal-accordion.tpl.php</strong> - copy/paste into your theme directory - please read the comments in this file for requirements/instructions.') . '</li></ul>';
      return $output;
  }
}

/**
 * Implements hook_views_api().
 */
function views_universal_accordion_views_api() {
  return array('api' => 2);
}


/**
 * Preprocess theme function to print a single record from a row, with fields.
 */
function views_universal_accordion_preprocess_views_view_fields(&$vars) {
  // #2053709: module's preprocess function alters all fields...
  if ((!isset($vars['view']->plugin_name)) || ($vars['view']->plugin_name != 'views_universal_accordion')) {
    return;
  }
  $fields = &$vars['fields'];
  $key_fields = array();
  foreach ($fields as $id => $field) {
    $fopts = $field->handler->options;
    if (!isset($fopts['type']) || ($fopts['type'] != 'image' && strpos($fopts['type'], 'lightbox2') === FALSE)) {
      $key_fields[] = $id;
      if (count($key_fields) == 1) {
        $fields[$id]->wrapper_prefix = '<div class="wrapper">' . $fields[$id]->wrapper_prefix;
      }
    }
    else {
      add_wrapper($fields, $key_fields);
      $key_fields = array();
    }
  }
  add_wrapper($fields, $key_fields);
}

/**
 * Template function for views_universal_accordion style plugin.
 *
 * @param array $vars
 *   Array of template variables.
 *
 * The JS file is loaded within render().
 * See views_universal_accordion_style_plugin.inc.
 */
function template_preprocess_views_view_universal_accordion(&$vars) {
  // Inherit the normal unformatted classes.
  template_preprocess_views_view_unformatted($vars);

  // Add the css for fixing/preventing accordion issues.
  drupal_add_css(drupal_get_path('module', 'views_universal_accordion') . '/views-universal-accordion.css');
}

/**
 * Only returns true the first time it's called for an id.
 *
 * @param int $id
 *   A uniqe view id.
 *
 * @return bool
 *   TRUE for the first time called for a given $id.
 *   FALSE for each time after that.
 */
function theme_views_universal_accordion_display_item($id) {
  static $display = array();

  if (!isset($display[$id])) {
    $display[$id] = FALSE;
  }

  $output = $display[$id];

  if ($display[$id] == FALSE) {
    $display[$id] = TRUE;
  }
  return $output;
}

/**
 * Adds trailing wrapper.
 *
 * @param array $fields
 *   Array of themed fields
 *
 * @param array $key_fields
 *   Array of keys
 */
function add_wrapper(&$fields, $key_fields) {
  if (!empty($key_fields)) {
    $fields[$key_fields[count($key_fields) - 1]]
    ->wrapper_suffix = $fields[$key_fields[count($key_fields) - 1]]
    ->wrapper_suffix . '</div>';
  }
}
