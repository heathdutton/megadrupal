<?php
// $Id:

/**
 * @file
 * maestro__common.module
 */

/* Maestro HOOK to modules to return info on any new task handlers - ie functions for tasks */
function maestro_common_maestro_handler_options() {

  $handlers = array(
    'MaestroTaskTypeInteractiveFunction' => array(
      'maestro_show_message' => t('Generic Function to display a message. Requires that you use a task variable or process variable called "message" that is set to the message string you want displayed.'),
      'maestro_show_variable' => t('Display the value of a process variable. Requires that you use a task variable called "variable" that is set to the name of the variable you want displayed.'),
      'maestro_accept_reject' => t('Simple Accept/reject function that lets you set a "message" var for the output and shows a simple accept/reject button.'),
      'maestro_placeholder' => t('Test interactive placeholder function, does nothing but good for protyping workflow and testing task assignment.'),
      ),
    'MaestroTaskTypeBatchFunction' => array(
      'maestro_batch_dummy' => t('Test batch function, does nothing but good for protyping and placeholder while developing workflow.'),
      'maestro_batch_never_complete' => t('Test batch function that never completes - logs to the watchdog everytime it executes.'),
      'maestro_convert_group_to_id' => t('Function will read a process variable which should contain a OG Group name and convert it to the Group ID and update the variable value. An integer value or group id is needed for task assignment.<p>Requires that you add a task variable called "group_name" that is set to the name of the variable to convert and a task variable called "content_type" that you set to the machine name of the group content type to search against.</p>'),
      )
    );
    return $handlers;
}


function maestro_show_message($op,&$task,$parms) {
  global $base_url;

  $retval = new stdClass();
  $retval->html = '';
  $retval->retcode = FALSE;
  $retval->engineop = '';

  switch ($op) {
    case 'display':
      // If the workflow task did not define the variable 'message' as a task variable, then check for a process variable
      if (!isset($parms['message'])) {
        $maestro = Maestro::createMaestroObject(1);
        $parms['message'] = $maestro->engine()->getProcessVariable('message', $task->_properties->process_id);
      }
      $retval->html = drupal_render(drupal_get_form('maestro_show_message_form',array('message' => $parms['message'])));
      $retval->retcode = TRUE;
      $retval->engineop = '';
      break;
    case 'complete':
      $retval->retcode = TRUE;
      $retval->engineop = 'completetask';
      break;
  }

  return $retval;

}

function maestro_show_message_form($form, $form_state, $parms) {

  $form = array();
  $form['message'] = array(
    '#prefix' => '<div class="maestro_interactive_task_pane maestro_interactive_task_message">',
    '#suffix' => '</div>',
    '#markup' =>  $parms['message'],
  );

  $form['actions']['complete_task'] = array(
    '#prefix' => '<div class="maestro_interactive_task_command">',
    '#suffix' => '</div>',
    '#type' => 'button',
    '#default_value' => t('Complete Task'),
    '#attributes' => array('maestro' => array('complete')),
  );

  return $form;

}


function maestro_placeholder($op,&$task,$parms) {
  global $base_url;

  $retval = new stdClass();
  $retval->html = '';
  $retval->retcode = FALSE;
  $retval->engineop = '';

  switch ($op) {
    case 'display':
      $message = 'Sample Interactive Placeholder Task';
      $retval->html = drupal_render(drupal_get_form('maestro_show_message_form',array('message' => $message)));
      $retval->retcode = TRUE;
      $retval->engineop = '';
      break;
    case 'complete':
      $retval->retcode = TRUE;
      $retval->engineop = 'completetask';
      break;
  }

  return $retval;

}


/* Batch function - dummy or test function returns TRUE */
function maestro_batch_dummy($queue_id, $process_id) {
  return TRUE;
}

/* Batch function - dummy or test function returns TRUE */
function maestro_batch_never_complete($queue_id, $process_id) {
  $tracking_id = maestro_getTaskTrackingId($queue_id);
  watchdog('maestro', "maestro_batch_never_complete, Process={$process_id} and Tracking_id={$tracking_id}");
  return TRUE;
}


/* Batch function to convert a Group Name to a Group ID
   Maestro task assignment requires an integer for the group id
   @TODO: Have not completed logic for OG 7.x-1.x
*/
function maestro_convert_group_to_id($queue_id, $process_id) {
  $group_id = 0;
  $maestro = Maestro::createMaestroObject(1);
  $serializedData = db_query("SELECT task_data FROM {maestro_queue} WHERE id = :id",
  array(':id' => $queue_id))->fetchField();
  $taskdata = @unserialize($serializedData);

  if (isset($taskdata['optional_parm']['group_name'])
     AND !empty($taskdata['optional_parm']['group_name'])
     AND isset($taskdata['optional_parm']['content_type'])
     AND !empty($taskdata['optional_parm']['content_type']))
  {
    $groupname_variable = $taskdata['optional_parm']['group_name'];
    $content_type = $taskdata['optional_parm']['content_type'];
    if (!empty($groupname_variable)) {
      $group_name = $maestro->engine()->getProcessVariable($groupname_variable, $process_id);
      if (!empty($group_name)) {
          $query = new EntityFieldQuery();
        if (function_exists('og_get_group')) {
         // OG 7.x-1.x method where Groups were entities
          $efq = $query->entityCondition('entity_type', 'group', '=')
            ->entityCondition('bundle', 'group');
            /* Need to complete this condition to retrieve group_id */


        } else {
         // OG 7.x-2.x method where Groups were again nodes of type 'group'
          $efq = $query->entityCondition('entity_type', 'node')
            ->propertyCondition('type', 'group_security')
            ->propertyCondition('title', $group_name);
          $group = $efq->execute();
          // Should return 1 record where the array key is the node_id or group_id
          if (isset($group['node'])) {
            $group_id = key($group['node']);
          }
        }
      }
    }
  }
  if ($group_id > 0) {
    $maestro->engine()->setProcessVariable($groupname_variable, $group_id, $process_id);
  }
  else {
    watchdog('maestro', 'Maestro batch function "maestro_convert_group_to_id" failed because group name was invalid, did not match any existing content type or not set');
  }
  return TRUE;

}


/*
 * Implementation of a Maestro interactive function handler
 * This one handles a simple output of an Accept/Reject task with the ability to set the message to whatever the user likes.
 */
function maestro_accept_reject($op,&$task,$parms) {
  global $base_url;

  $retval = new stdClass();
  $retval->html = '';
  $retval->retcode = FALSE;
  $retval->engineop = '';

  switch ($op) {
    case 'display':
      if (!isset($parms['message'])) {
        $maestro = Maestro::createMaestroObject(1);
        $parms['message'] = $maestro->engine()->getProcessVariable('message', $task->_properties->process_id);
      }
      $retval->html = drupal_render(drupal_get_form('maestro_show_message_accept_reject_form',array('message' => $parms['message'])));
      $retval->retcode = TRUE;
      $retval->engineop = '';
      break;
    case 'accept':
      $retval->retcode = TRUE;
      $retval->engineop = 'completetask';
      break;
    case 'reject':
      $retval->status = MaestroTaskStatusCodes::STATUS_CANCELLED;
      $retval->retcode = TRUE;
      $retval->engineop = 'completetask';
      break;
  }
  return $retval;
}

function maestro_show_message_accept_reject_form($form, $form_state, $parms) {

  $form = array();
  $form['message'] = array(
    '#prefix' => '<div class="maestro_interactive_task_pane maestro_interactive_task_message">',
    '#suffix' => '</div>',
    '#markup' =>  $parms['message'],
  );

  $form['actions']['complete_task'] = array(
    '#prefix' => '<div class="maestro_interactive_task_command">',
    '#type' => 'button',
    '#default_value' => t('Accept'),
    '#attributes' => array('maestro' => array('accept')),
  );
  $form['actions']['update_task'] = array(
    '#suffix' => '</div>',
    '#type' => 'button',
    '#default_value' => t('Reject'),
    '#attributes' => array('maestro' => array('reject')),
  );

  return $form;

}


/* Interactive function for the registered 'maestro_show_variable' interactive function
 * Reuse the maestro_show_message_form and pass in the process variable value
*/
function maestro_show_variable($op,&$task,$parms) {
  global $base_url;

  $retval = new stdClass();
  $retval->html = '';
  $retval->retcode = FALSE;
  $retval->engineop = '';

  switch ($op) {
    case 'display':
      if (!isset($parms['variable'])) {
        $message = 'The task variable <em>variable</em> is not set';
      } else {
        $varname = check_plain($parms['variable']);
        $maestro = Maestro::createMaestroObject(1);
        $message = $maestro->engine()->getProcessVariable($varname, $task->_properties->process_id);
      }
      $retval->html = drupal_render(drupal_get_form('maestro_show_message_form',array('message' => $message)));
      $retval->retcode = TRUE;
      $retval->engineop = '';
      break;
    case 'complete':
      $retval->retcode = TRUE;
      $retval->engineop = 'completetask';
      break;
  }

  return $retval;

}
