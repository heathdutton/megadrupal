<?php


/**
 * @file
 * maestro_inline_form_api_task.module
 *
 * includes all the logic necessary for the inline form api task for maestro.
 * this file is composed in four main sections: drupal hooks, maestro hooks,
 * the maestro engine class, and the maestro admin interface class.
 */


include_once './' . drupal_get_path('module', 'maestro') . '/maestro_tasks.class.php';
include_once './' . drupal_get_path('module', 'maestro') . '/maestro_task_interface.class.php';

function maestro_inline_form_api_task_theme() {
  return array(
    'maestro_task_inline_form_api' => array(
      'template' => 'theme/maestro-task-inline-form-api',
      'variables' => array('tdid' => NULL)
    ),
    'maestro_task_inline_form_api_edit' => array(
      'template' => 'theme/maestro-task-inline-form-api-edit',
      'variables' => array('tdid' => NULL, 'td_rec' => NULL)
    ),
  );
}


function maestro_inline_form_api_task_form($form, &$form_state, $dynamic_form) {
  return $dynamic_form;
}

function maestro_inline_form_api_task_form_submit($form, &$form_state) {
  $qid = $form['queue_id']['#value'];
  $op = ($form['complete']['#value'] == $_POST['op']) ? 'complete' : 'save';

  if ($qid > 0) {
    $query = db_select('maestro_queue');
    $query->fields('maestro_queue', array('task_class_name', 'process_id'));
    $query->condition('id', $qid, '=');
    $rec = $query->execute()->fetchObject();
    $tasktype = $rec->task_class_name;

    $data = new stdClass();
    // Need to pass in data object when instantiating task class and queueid needs to be set in class _properties.
    $data->process_id = $rec->process_id;
    $data->queue_id = $qid;
    $task = new $tasktype($data);
    $ret = $task->processInteractiveTask($qid, $op);

    if ($ret->retcode === TRUE) {
      if ($ret->engineop == 'complete') {
        if (!isset($ret->status)) {
          $ret->status = 1;    // Just in case interactive function has not set this - set to default 'success'
        }
        $maestro = Maestro::createMaestroObject(1);    // Initiate the processing of all tasks of type 1.x
        $maestro->engine()->completeTask($qid, $ret->status);
      }
    }
  }
}



/**
 * Maestro Hooks
*/


/**
* Implementation of hook_maestro_set_process_variable_methods().
*
* Registers available methods available to set a process variable
* for the code maestro setProcessVariable task type
*/
function maestro_inline_form_api_task_maestro_get_taskobject_info() {
  $options = array(
    array('display_name' => t('Inline Form API Task'),
      'class_name' => 'MaestroTaskInterfaceInlineFormAPI'
    ),
  );
  return $options;
}

/**
* Implementation of hook_maestro_set_process_variable_methods().
*
* Registers available methods available to set a process variable
* for the code maestro setProcessVariable task type
*/
function maestro_inline_form_api_task_maestro_set_process_variable_methods() {
  return array(
    'maestro_inline_form_api_task' => array (
      'title' => t('Inline Form API Task Field Result'),
      'description' => t('Form ID:Field Name - Form ID for the inline form defined in the workflow'),
      'engine_handler' => 'maestro_inline_form_api_task_maestro_set_process_variable_handler'
    ),
  );
}

/* Maestro function that provides an option for the Set Process Variable task to
 * set a workflow process variable to a value from a the inline form field
 */
function maestro_inline_form_api_task_maestro_set_process_variable_handler(&$task_class, $current_value, $arg) {
  $args = explode(':', $arg);  //$args[0] = content type, $arg[1] = field name
  $query = db_select('maestro_process', 'a');
  $query->fields('a', array('tracking_id'));
  $query->condition('a.id', $task_class->_properties->process_id, '=');
  $tracking_id = $query->execute()->fetchField();

  $data = $task_class->getProjectData($tracking_id, 'inlineform');

  return $data[$args[1]];
}


