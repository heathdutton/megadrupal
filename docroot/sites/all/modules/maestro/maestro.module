<?php

/**
 * @file
 * maestro.module
 */

include_once './' . drupal_get_path('module', 'maestro') . '/maestro.class.php';
include_once './' . drupal_get_path('module', 'maestro') . '/maestro_tasks.class.php';
include_once './' . drupal_get_path('module', 'maestro') . '/lib/lib-og_common.php';

/**
 * Implements hook_menu()
 */
function maestro_menu() {
  $items = array();

  $items['maestro/taskconsole'] = array(
    'title' => 'Task Console',
    'page callback' => 'maestro_taskconsole',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array('maestro taskconsole'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => '10',
  );

  $items['maestro/outstanding'] = array(
    'title' => 'Outstanding Tasks',
    'page callback' => 'maestro_outstanding_tasks',
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('maestro view outstanding tasks'),
    'file' => 'maestro.moderator.inc',
    'weight' => '20',
  );

  $items['maestro/myflows'] = array(
    'title' => 'My Workflows',
    'page callback' => 'maestro_my_flows',
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('maestro taskconsole'),
    'file' => 'maestro.moderator.inc',
    'weight' => '30',
  );

  $items['maestro/allflows'] = array(
    'title' => 'All Maestro Workflows',
    'page callback' => 'maestro_all_flows',
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('maestro admin'),
    'file' => 'maestro.moderator.inc',
    'weight' => '40',
  );

  $items['maestro/launch'] = array(
    'page callback' => 'maestro_launch_workflow',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['maestro/newprocess'] = array(
    'page callback' => 'maestro_new_process',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['admin/structure/maestro'] = array(
    'title' => 'Maestro Workflows',
    'description' => 'Define and administer workflows.',
    'page callback' => 'maestro_admin',
    'access arguments' => array('maestro admin'),
    //'type' => MENU_LOCAL_TASK,
    'file' => 'maestro.admin.inc'
  );

  $items['maestro/taskconsole/ajax'] = array(
    'page callback' => 'maestro_handle_taskconsole_ajax_request',
    'page arguments' => array(3, 4) ,      // Passing in wildcard which should be parm 1
    'type' => MENU_CALLBACK,
    'access arguments' => array('maestro taskconsole')
  );

  /* Trace tool called from the Outstanding Tasks screen as it needs a process id */
  $items['maestro/trace'] = array(
    'page callback' => 'maestro_trace',
    'type' => MENU_CALLBACK,
    'access arguments' => array('maestro edit outstanding tasks'),
    'file' => 'maestro.moderator.inc'
  );

  $items['admin/structure/maestro/ajax'] = array(
    'page callback' => 'maestro_handle_editor_ajax_request',
    'type' => MENU_CALLBACK,
    'access arguments' => array('maestro admin'),
    'file' => 'maestro.admin.inc'
  );

  $items['admin/structure/maestro/structure_ajax'] = array(
    'page callback' => 'maestro_handle_structure_ajax_request',
    'type' => MENU_CALLBACK,
    'access arguments' => array('maestro admin'),
    'file' => 'maestro.admin.inc'
  );

  $items['admin/structure/maestro/new'] = array(
    'title' => 'New',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/structure/maestro/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'maestro_edit_workflow',
    'access arguments' => array('maestro admin'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'maestro.admin.inc'
  );

  $items['admin/structure/maestro/edit_properties'] = array(
    'title' => 'Edit Template Name and Variables',
    'page callback' => 'maestro_edit_properties',
    'access arguments' => array('maestro admin'),
    'type' => MENU_CALLBACK,
    'file' => 'maestro.admin.inc'
  );

  $items['maestro_enginetest'] = array(
    'title' => 'Execute Development Test',
    'page callback' => 'maestro_enginetest',
    'page arguments' => array(),
    'access arguments' => array('maestro admin'),
    'type' => MENU_CALLBACK,
    'file'  => 'lib-test.php',
  );

  $items['admin/config/workflow/maestro_configure'] = array(
    'title' => 'Maestro Config',
    'description' => 'Configure the Maestro Engine.',
    'page callback' => 'maestro_configure',
    'access arguments' => array('maestro admin'),
    'file' => 'maestro.admin.inc'
  );

  $items['admin/structure/maestro/export'] = array(
    'title' => 'Export a Maestro Template',
    'page callback' => 'maestro_export_template',
    'access arguments' => array('maestro admin'),
    'type' => MENU_CALLBACK,
    'file' => 'maestro.admin.inc'
  );

  $items['maestro/orchestrator'] = array(
    'page callback' => 'maestro_orchestrator',
    'access callback' => array('maestro_orchestrator_test_token'),
    'access arguments' => array(2),
    'type' => MENU_CALLBACK,
  );

  $items['maestro/%ctools_js/deleteproject'] = array(
      'title' => 'Delete Project',
      'page callback' => 'maestro_ctools_delete_project',
      'page arguments' => array(1),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
  );

  $items['maestro/viewnode_dialog/%/%ctools_js'] = array(
      'title' => 'View Node',
      'page callback' => 'maestro_viewnode_dialog',
      'page arguments' => array(2,3),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
  );

  return $items;
}


/**
 * Implements hook_permission()
 */
function maestro_permission() {
  $permissions = array(
    'maestro taskconsole'  => array(
      'title' => t('Access Maestro Task Console')
    ),
    'maestro admin' => array(
      'title' => t('Administer Maestro Workflows')
    ),
    'maestro view outstanding tasks' => array(
      'title' => t('View Outstanding Tasks')
    ),
    'maestro edit outstanding tasks' => array(
      'title' => t('Edit Outstanding Tasks')
    ),
    'maestro reassign tasks' => array(
      'title' => t('Re-Assign Tasks')
    )
  );

  $query = db_select('maestro_template', 'a');
  $query->fields('a', array('id', 'template_name'));
  $res = $query->execute();
  foreach ($res as $rec) {
    $template_id = intval($rec->id);
    $template_name = check_plain($rec->template_name);
    $permissions += array(
        "maestro-launch-template-{$template_id}" => array(
            'title' => t('%template_name: Launch new instance of this workflow', array('%template_name' => $template_name)),
        ),
    );
  }

  return $permissions;

}

/**
 * Implements hook_help()
 */
function maestro_help($path, $arg) {
  $output = '';

  switch ($path) {
    case "admin/help#maestro":
      $output = '<p>' . t("Define and administer workflows.") . '</p>';
      break;
  }
  return $output;
}


/**
 * Implementation of hook_views_api().
*/
function maestro_views_api() {
  return array(
    'api' => 2.0,
    'path' => drupal_get_path('module', 'maestro')
  );
}

/**
* Implementation of hook_views_bulk_operations_object_info().
*/
function maestro_views_bulk_operations_object_info() {
  $object_info = array(
  'maestro' => array(
  'type' => 'maestro',
  'base_table' => 'maestro_queue',
  'load' => 'maestro_task_vbo_load',
  'oid' => 'id',
  'title' => 'name',
  ),
  );
  return $object_info;
}

function maestro_task_vbo_load($type, $queueId) {
  $query = db_select('maestro_queue', 'a');
  $query->join('maestro_template_data','b','b.id = a.template_data_id');
  $query->join('maestro_template','c','c.id = b.template_id');
  $query->fields('a', array('id','template_data_id', 'process_id'));
  $query->fields('b', array('taskname'));
  $query->fields('c', array('template_name'));
  $query->condition('a.id', $queueId, '=');
  $rec = $query->execute()->fetchObject();
  $retval = new stdClass();
  $retval->name = "{$rec->template_name} => Task: {$rec->taskname}";

  return $retval;
}


function maestro_vbo_task_delete_action(&$workflow, $context) {
  $maestro = Maestro::createMaestroObject(1);
  $maestro->engine()->deleteTask($context['row']->id);
}

function maestro_vbo_task_reminder_action(&$workflow, $context) {
  $maestro = Maestro::createMaestroObject(1);
  $maestro->engine()->sendTaskAssignmentNotifications($context['row']->id);
}



/**
 * Implements hook_admin_paths().
 */
function maestro_admin_paths() {
  $paths = array(
    'node/*/maestro' => TRUE,
    'node/add/*/maestro/*' => TRUE,
    'node/*/edit/maestro/edit/*' => TRUE,
    'maestro/trace/*/*/*' => TRUE
  );
  return $paths;
}

/**
 * Implements hook_theme()
 */
function maestro_theme() {
  global $base_url;
  return array(
    'maestro_all_flows' => array(
      'template' => 'theme/maestro-all-flows',
      'variables' => array('ajax_url' => NULL, 'filter_url' => NULL, 'database_result_set' => NULL),
    ),
    'maestro_all_flows_display' => array(
      'template' => 'theme/maestro-all-flows-display',
      'variables' => array('ajax_url' => NULL, 'database_result_set' => NULL, 'maestro_path' => $base_url . '/' . drupal_get_path('module', 'maestro')),
    ),
    'maestro_taskconsole' => array(
      'template' => 'theme/maestro-taskconsole',
      'render element' => 'stucture'
    ),
    'maestro_outstanding_tasks' => array(
      'template' => 'theme/maestro-outstanding-tasks',
      'variables' => array('maestro_url' => NULL, 'show_system_tasks' => NULL, 'maestro' => NULL, 'queue' => NULL, 'users' => NULL),
    ),
    'maestro_taskconsole_details' => array(
      'template' => 'theme/project_detail_container',
      'variables' => array('task' => NULL, 'source' => NULL),
      ),
    'maestro_project_comments' => array(
      'template' => 'theme/project_detail_comments',
      'variables' => array('rowid' => NULL, 'tracking_id' => NULL),
      ),
    'maestro_trace' => array(
      'template' => 'theme/maestro-trace',
      'variables' => array('maestro_url' => NULL, 'trace' => NULL, 'properties' => NULL, 'pv_res' => NULL, 'wf_res' => NULL, 'statuses' => NULL),
    ),
    'maestro_workflow_list' => array(
      'template' => 'theme/structure/maestro-workflow-list',
      'variables' => array('tid' => NULL, 'operation' => NULL, 'edit_var' => 0)
    ),
    'maestro_workflow_list_item' => array(
      'template' => 'theme/structure/maestro-workflow-list-item',
      'variables' => array('rec' => NULL, 'cntr' => NULL, 'tid' => NULL, 'operation' => NULL, 'edit_var' => 0)
    ),
    'maestro_workflow_edit_template_variables_list' => array(
      'template' => 'theme/structure/maestro-workflow-edit-template-variables-list',
      'variables' => array('id' => NULL, 'tid' => NULL, 'variable_name' => NULL, 'variable_name' => NULL, 'edit_var' => 0, 'cntr' => 0)
    ),
    'maestro_workflow_edit_template_variables' => array(
      'template' => 'theme/structure/maestro-workflow-edit-template-variables',
      'variables' => array('tid' => NULL, 'edit_var' => 0, 'cntr' => 0)
    ),
    'maestro_workflow_task_frame' => array(
      'template' => 'theme/structure/maestro-workflow-task-frame',
      'variables' => array('rec' => NULL, 'ti' => NULL, 'task_class' => NULL)
    ),
    'maestro_workflow_task_title' => array(
      'template' => 'theme/structure/tasks/maestro-task-title',
      'variables' => array('tdid' => NULL, 'taskname' => NULL, 'regen_flag' => NULL, 'regen_mode' => NULL)
    ),
    'maestro_workflow_edit' => array(
      'template' => 'theme/structure/maestro-workflow-edit',
      'variables' => array('tid' => NULL, 'mi' => NULL, 'maestro_url' => NULL, 't_rec' => NULL)
    ),
    'maestro_workflow_edit_tasks_frame' => array(
      'template' => 'theme/structure/maestro-workflow-edit-tasks-frame',
      'variables' => array('tdid' => NULL, 'tid' => NULL, 'form_content' => NULL, 'maestro_url' => NULL, 'pv_options' => NULL, 'uid_options' => NULL, 'role_options' => NULL, 'og_options' => NULL, 'selected_options' => NULL, 'task_class' => NULL, 'vars' => NULL, 'task_edit_tabs' => NULL, 'optional_parms' => NULL, 'types' => NULL, 'bys' => NULL, 'whens' => NULL)
    ),
    'maestro_workflow_assign_notify_select_boxes' => array(
      'template' => 'theme/structure/maestro-workflow-assign-notify-select-boxes',
      'variables' => array('maestro_url' => NULL, 'display' => NULL, 'row_class' => NULL, 'type' => NULL, 'by_variable' => NULL, 'when' => NULL, 'options' => NULL, 'selected_options' => NULL, 'name' => NULL)
    ),
    'maestro_task_unknown' => array(
      'template' => 'theme/structure/tasks/maestro-task-unknown',
      'variables' => array('tdid' => NULL, 'taskname' => NULL, 'ti' => NULL)
    ),
    'maestro_task_start' => array(
      'template' => 'theme/structure/tasks/maestro-task-start',
      'variables' => array('tdid' => NULL, 'taskname' => NULL, 'ti' => NULL)
    ),
    'maestro_task_end' => array(
      'template' => 'theme/structure/tasks/maestro-task-end',
      'variables' => array('tdid' => NULL, 'taskname' => NULL, 'ti' => NULL)
    ),
    'maestro_task_and' => array(
      'template' => 'theme/structure/tasks/maestro-task-and',
      'variables' => array('tdid' => NULL, 'taskname' => NULL, 'ti' => NULL)
    ),
    'maestro_task_if' => array(
      'template' => 'theme/structure/tasks/maestro-task-if',
      'variables' => array('tdid' => NULL, 'taskname' => NULL, 'ti' => NULL)
    ),
    'maestro_task_if_edit' => array(
      'template' => 'theme/structure/tasks/maestro-task-if-edit',
      'variables' => array('tdid' => NULL, 'td_rec' => NULL)
    ),
    'maestro_task_batch' => array(
      'template' => 'theme/structure/tasks/maestro-task-batch',
      'variables' => array('tdid' => NULL, 'taskname' => NULL, 'ti' => NULL)
    ),
    'maestro_task_batch_edit' => array(
      'template' => 'theme/structure/tasks/maestro-task-batch-edit',
      'variables' => array('tdid' => NULL, 'td_rec' => NULL)
    ),
    'maestro_task_batch_function' => array(
      'template' => 'theme/structure/tasks/maestro-task-batch-function',
      'variables' => array('tdid' => NULL, 'taskname' => NULL, 'ti' => NULL)
    ),
    'maestro_task_batch_function_edit' => array(
      'template' => 'theme/structure/tasks/maestro-task-batch-function-edit',
      'variables' => array('tdid' => NULL, 'td_rec' => NULL, 'handler_options' => NULL)
    ),
    'maestro_task_set_process_variable' => array(
      'template' => 'theme/structure/tasks/maestro-task-set-process-variable',
      'variables' => array('tdid' => NULL, 'taskname' => NULL, 'ti' => NULL)
    ),
    'maestro_task_set_process_variable_edit' => array(
      'template' => 'theme/structure/tasks/maestro-task-set-process-variable-edit',
      'variables' => array('tdid' => NULL, 'td_rec' => NULL, 'pvars' => NULL, 'set_methods' => NULL)
    ),
    'maestro_task_interactive_function' => array(
      'template' => 'theme/structure/tasks/maestro-task-interactive-function',
      'variables' => array('tdid' => NULL, 'taskname' => NULL, 'ti' => NULL)
    ),
    'maestro_task_interactive_function_edit' => array(
      'template' => 'theme/structure/tasks/maestro-task-interactive-function-edit',
      'variables' => array('tdid' => NULL, 'td_rec' => NULL, 'handler_options' => NULL)
    ),
    'maestro_task_manual_web' => array(
      'template' => 'theme/structure/tasks/maestro-task-manual-web',
      'variables' => array('tdid' => NULL, 'taskname' => NULL, 'ti' => NULL)
    ),
    'maestro_task_manual_web_edit' => array(
      'template' => 'theme/structure/tasks/maestro-task-manual-web-edit',
      'variables' => array('tdid' => NULL, 'td_rec' => NULL)
    ),
    'maestro_task_content_type' => array(
      'template' => 'theme/structure/tasks/maestro-task-content-type',
      'variables' => array('tdid' => NULL, 'taskname' => NULL, 'ti' => NULL)
    ),
    'maestro_task_content_type_edit' => array(
      'template' => 'theme/structure/tasks/maestro-task-content-type-edit',
      'variables' => array('tdid' => NULL, 'td_rec' => NULL, 'content_types' => NULL)
    ),
    'maestro_task_fire_trigger' => array(
      'template' => 'theme/structure/tasks/maestro-task-fire-trigger',
      'variables' => array('tdid' => NULL, 'taskname' => NULL, 'ti' => NULL)
    ),
    'maestro_task_fire_trigger_edit' => array(
      'template' => 'theme/structure/tasks/maestro-task-fire-trigger-edit',
      'variables' => array('tdid' => NULL, 'td_rec' => NULL, 'aa_res' => NULL, 'options' => NULL)
    ),
  );
}

/* maestro custom action logic */

/**
 * Implements hook_action_info()
 */
function maestro_action_info() {
  return array(
    'launch_workflow_action' => array(
      'type' => 'maestro',
      'label' => t('Launch a Maestro Workflow'),
      'configurable' => TRUE,
      'triggers' => array('any'),
  ),
  'maestro_vbo_task_delete_action' => array(
    'type' => 'maestro',
    'label' => t('Maestro - Delete Task'),
    'description' => t('Delete task'),
    'configurable' => FALSE,
    'hooks' => array(),
    ),
    'maestro_vbo_task_reminder_action' => array(
      'type' => 'maestro',
      'label' => t('Maestro - Send Task Reminder'),
      'description' => t('Task Reminder'),
      'configurable' => FALSE,
      'hooks' => array(),
    ),
  );
}


/**
 * Provides implementation logic for carrying out launch_workflow_action
 *
 * @param $object
 *   The object upon which the action will act
 * @param $context
 *   Associative array of extra information about the action call
 *
 * @see actions_do()
 */
function launch_workflow_action(&$object, $context = array()) {
  global $user;
  $maestro = Maestro::createMaestroObject(1);    // Initiate the processing of all tasks of type 1.x
  $template = intval($context['workflow']);

  $newprocess = 0;
  if ($template > 0) {
    $newprocess = $maestro->engine()->newProcess($template);
  }

  $tracking_id = $maestro->engine()->getTrackingId($newprocess);
  $query = db_select('maestro_queue', 'a');
  $query->fields('a', array('id'));
  $query->condition('a.process_id', $newprocess, '=');
  $rec = current($query->execute()->fetchAll());
  $task_id = $rec->id;
  switch ($context['group']) {
  case 'node':
    $nid = intval($context['node']->nid);
    //why bother even running this if the nid is zero?
    //this is a fix for triggering on a node_presave where there isn't a nid
    if ($nid > 0) {
      $query = db_insert('maestro_project_content');
      $query->fields(array('nid', 'tracking_id', 'task_id', 'instance', 'content_type', 'task_data', 'created_by_uid', 'is_locked_by_uid', 'status'));
      $query->values(array(
        'nid' => $nid,
        'tracking_id' => $tracking_id,
        'task_id' => $task_id,
        'instance' => 1,
        'content_type' => $context['node']->type,
        'task_data' => NULL,
        'created_by_uid' => $user->uid,
        'is_locked_by_uid' => 0,
        'status' => MaestroContentStatusCodes::STATUS_SUBMITTED)
      );
      $query->execute();
    }
    break;
  }

  if ($newprocess > 0) {
    watchdog('maestro', "Maestro Launch Workflow Action has been invoked by user {$user->uid}. New process of template id #$template has been started.");
  }
  else {
    watchdog('maestro', "Maestro Launch Workflow Action has been invoked by user {$user->uid}. Failed to launch new process of template id #$template.");
  }

  //RK - I think we need a post-launch trigger/action ability here.
  //we'll need something to let other modules hook into this.  The handler will be
  // modulename_maestro_post_action_handler
  //this will give devs the ability to read the db, handle a new process, do anything with data manipulation/UI etc.
  module_invoke_all('maestro_post_action_handler', $newprocess, $context);
}

/**
 * Form submission handler for launch_workflow_action_form()
 *
 * @see launch_workflow_action_form()
 */
function launch_workflow_action_submit($form, $form_state) {
  return array('workflow' => $form_state['values']['workflow']);
}

/**
 * Form builder for the launch_workflow_action details form
 *
 * @ingroup forms
 */
function launch_workflow_action_form($context) {
  $form = array();

  $res = db_query("SELECT id, template_name FROM {maestro_template}");
  $options = array('' => t('Select Workflow'));
  foreach ($res as $rec) {
    if (user_access("maestro-launch-template-{$rec->id}")) {
      $options[$rec->id] = t($rec->template_name);
    }
  }

  $form['workflow'] = array(
    '#title' => t("Workflow to Launch"),
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => isset($context['workflow']) ? $context['workflow']:'',
    '#required' => TRUE
  );

  return $form;
}

/* end of custom action logic */


/* maestro custom trigger logic */

/**
 * Implements hook_trigger_info()
 */
function maestro_trigger_info() {
  //dynamically get triggers based on the fire trigger tasks
  $query = db_select('maestro_template_data', 'a');
  $query->fields('a', array('id', 'taskname', 'template_id'));
  $query->fields('b', array('template_name'));
  $query->leftJoin('maestro_template', 'b', 'a.template_id=b.id');
  $query->condition('a.task_class_name', 'MaestroTaskTypeFireTrigger', '=');
  $res = $query->execute();

  $triggers = array();
  foreach ($res as $rec) {
    $triggers['fire_trigger_task' . $rec->id] = array(
      'label' => t('When the') . ' ' . t($rec->taskname) . " ({$rec->id}) " . t('task from the') . ' ' . t($rec->template_name) . " ({$rec->template_id}) " . t('workflow is executed')
    );
  };

  return array('maestro' => $triggers);
}

/* end of custom trigger logic */


/* Handles the rendering of the node for the Ctools modal dialog that is used
 * in the task details 'content' area to view the node attached to the workflow
 * Called from the menu handler function.
 */
function maestro_viewnode_dialog($nid,$ajax) {
  // if user has js enabled...
  ctools_include('modal');
  ctools_include('ajax');
  drupal_add_css(drupal_get_path('module', 'maestro') . '/css/maestro_ctools.css');
  if ($ajax) {
    if ($nid > 0) {
      $node = node_load($nid);
      $title = $node->title;
      unset($node->title);
      $build = node_view($node);
      /* Disable the contextual links - it attempts to render the
       * node view/edit from within the existing modal dialog
       * and breaks the UI
      */
      unset($build['#contextual_links']);
      $content = drupal_render($build);
    }
    else {
      $content = t('Invalid node id');
      $title = t('Error');
    }
    ctools_modal_render($title, $content);

  } else {
      $node = node_load($nid);
      $title = $node->title;
      unset($node->title);
      $build = node_view($node);
      $content = drupal_render($build);
  }

}


/**
 * Display of the Task Console - called from hook_menu callback.
 */
function maestro_taskconsole($jump_to_taskid = 0) {

  drupal_add_css(drupal_get_path('module', 'maestro') . '/css/maestro.css');
  $modulepath = drupal_get_path('module', 'maestro');
  drupal_set_breadcrumb(array());

  $maestro = Maestro::createMaestroObject(1);    // Initiate the processing of all tasks of type 1.x

  //Only run the orchestrator if we've been told to do so on the config page.
  //if this is our initial installation, set the default value to 1
  //to allow the orchestrator to clean the queue properly
  if (variable_get('maestro_run_orchestrator_in_task_console', 1)) {
    maestro_orchestrator();
  }

  return theme('maestro_taskconsole', array('jump_to_taskid' => $jump_to_taskid));
}

/**
 * Launches new workflow based on template
 *
 * @param $template
 *   ID value of template to launch
 *
 * @return
 *   ID of new process generated
*   Function can be called from the AJAX handler and in this case will pass in the token
 */
function maestro_launch_workflow($template = 0, $token = '') {
  global $base_url;

  if (empty($token)) {
    $token = $_GET['sec_token'];
  }

  if(!drupal_valid_token($token,'maestro_user')) {
    drupal_set_message(t('Invalid Operation'));
    drupal_goto('maestro/taskconsole');
    exit;
  }

  $template = intval($template);
  if ($template > 0) {
    if (user_access("maestro-launch-template-{$template}")) {
      $maestro = Maestro::createMaestroObject(1);
      $newprocess = $maestro->engine()->newProcess($template);

      if ($newprocess > 0) {
        drupal_set_message(t("New Process Code Success! - Process ID: @process", array('@process' => check_plain($newprocess))));
        return $newprocess;
      }
      else {
        drupal_set_message(t("New Process Code FAIL! - Template: @template not defined", array('@template' => check_plain($template))));
      }
    }
    else {
      drupal_set_message(t('Attempt to launch a workflow with insufficient permissions'));
    }
  }
  else {
    drupal_set_message(t("New Process Code FAIL! - No Template ID Given"));
  }

  return FALSE;

}

/**
 * Launches new workflow based on template and redirects the user to the task console
 *
 * @param $template
 *   ID value of template to launch
 *
 * @return
 *   ID of new process generated
 */
function maestro_new_process($template=0) {
  global $base_url;

  if (empty($token)) {
    $token = $_POST['sec_token'];
  }

  if(!drupal_valid_token($token,'maestro_user')) {
    drupal_set_message(t('Invalid Operation'));
    drupal_goto('maestro/taskconsole');
    exit;
  }

  $template = intval($template);
  if ($template > 0) {
    if (user_access("maestro-launch-template-{$template}")) {
      $maestro = Maestro::createMaestroObject(1);
      $newprocess = $maestro->engine()->newProcess($template);

      if ($newprocess > 0) {
        drupal_set_message(t("New Process Code Success! - Process ID: @process", array('@process' => check_plain($newprocess))));
        return $newprocess;
      }
      else {
        drupal_set_message(t("New Process Code FAIL! - Template: @template not defined", array('@template' => check_plain($template))));
      }
    }
    else {
      drupal_set_message(t('Attempt to launch a workflow with insufficient permissions'));
    }
  }
  else {
    drupal_set_message(t("New Process Code FAIL! - No Template ID Given"));
  }

  return FALSE;

}

/**
 * Provides gateway to process the task queue
 */
function maestro_orchestrator() {
  if (!lock_acquire('maestro_orchestrator', variable_get('maestro_orchestrator_lock_delay', 512.0))) {
    watchdog('maestro', 'Attempting to re-run orchestrator while it is already running.', array(), WATCHDOG_WARNING);
  }
  else {
    $maestro = Maestro::createMaestroObject(1);
    $maestro->engine()->cleanQueue();
    lock_release('maestro_orchestrator');
  }
}

/* Menu hook access callback function for the orchestrator to validate access */
function maestro_orchestrator_test_token($token = '') {
  $otoken = variable_get('maestro_orchestrator_token', '');
  if($otoken == '') return TRUE;

  if($token == $otoken) return TRUE;

  return FALSE;
}


/**
 * Preprocess function for taskconsole
 */
function template_preprocess_maestro_taskconsole(&$variables) {
  global $base_url;

  $variables['taskconsole_url'] = url('maestro/taskconsole');
  $variables['ajax_server_url'] = url('maestro/taskconsole/ajax');
  $maestro_path = $base_url . '/' . drupal_get_path('module', 'maestro');
  $variables['module_base_url'] = $maestro_path;
  $maestro = Maestro::createMaestroObject(1);    // Initiate the processing of all tasks of type 1.x
  $objtasks = $maestro->engine()->getQueue();
  $variables['taskcount'] = $maestro->engine()->getUserTaskCount();
  $variables['formatted_tasks'] = array();
  drupal_add_js(drupal_get_path('module', 'maestro') . '/js/taskconsole.js');

  // Add CTools' javascript to the page.
  ctools_include('modal');
  ctools_modal_add_js();
  drupal_add_js(array(
    'maestro-confirm-modal-style' => array(
      'modalSize' => array(
        'type' => 'fixed',
        'width' => 350,
        'height' => 100,
      ),
      'modalOptions' => array(
        'opacity' => .6,
        'background' => '#333333'
        ),
      'closeImage' => '',
      'closeText' => t('Close'),
    ),
    'maestro-viewcontent-modal-style' => array(
      'modalSize' => array(
        'type' => 'scale',
        'width' => .70,
        'height' => .60,
      ),
      'modalOptions' => array(
        'opacity' => .6,
        'background' => '#333333'
        ),
      'closeText' => t('Close'),
    ),
  ), 'setting');

  if (is_array($objtasks) AND count($objtasks) > 0) {
    $rowid = 1;
    foreach ($objtasks as $task) {
      $formatted_task = $task;
      $formatted_task->class_newtask = 'maestroNewTask';
      $formatted_task->hidetaskinfo = 'none';
      $formatted_task->onholdnotice = '';
      $formatted_task->task_action_url = '#';  //we let the interactive tasks override this later if need be.

      if ($task->dates['started'] > 0) {
        $formatted_task->task_started = ', Started: ' . format_date($task->dates['started'], 'short');
        $formatted_task->task_icon = $maestro_path . '/images/taskconsole/task.gif';
      }
      else {
        $formatted_task->task_started = '';
        $formatted_task->task_icon = $maestro_path . '/images/taskconsole/new_task.gif';
      }
      $formatted_task->assigned_shortdate = format_date($task->dates['created'], 'custom', 'm/d/y');
      $formatted_task->assigned_longdate = format_date($task->dates['created'], 'medium');
      $formatted_task->project_details = '';

      // Determine if this task is for a regenerated workflow and we need to update the main project/request record
      if ($formatted_task->regen) {
        $formatted_task->taskname = '<div style="color:red;padding-right:5px;display:inline;">[R]</div>' . $formatted_task->taskname;
      }

      if ($task->flags['is_interactive'] == 1) {
        $current_task = new $task->tasktype($task);  //fire up the engine task here to let us re-use its methods to create task console output.
        $formatted_task->task_action_url = $current_task->getTaskConsoleURL();  //here is where we override the action url.
        $action_record = $maestro->engine()->showInteractiveTask($current_task, $task->queue_id);
        if ($action_record === FALSE OR empty($action_record)) {
          $formatted_task->action_record = '';
        }
        else {
          $formatted_task->action_record = $action_record;
        }
      }
      else {
        $formatted_task->action_record = '';
      }

      $variables['rowid'] = $rowid;
      $variables['formatted_tasks'][] = $formatted_task;
      $rowid++;
    }
    $variables['details_icon'] = '<img src="' . $maestro_path . '/images/taskconsole/details.png' . '">';

  }

  $res = db_query("SELECT id, template_name FROM {maestro_template}");
  $options = array('' => t('Select Workflow'));
  foreach ($res as $rec) {
    if (user_access("maestro-launch-template-{$rec->id}")) {
      $options[$rec->id] = t($rec->template_name);
    }
  }
  $variables['process_dropdown'] = $options;

}

/**
 * Preprocess function for details displayed on task console
 */
function template_preprocess_maestro_taskconsole_details(&$variables) {
  global $base_url, $user;

  $task = $variables['task'];
  $variables['base_url'] = $base_url;
  $variables['module_base_url'] = $base_url . '/' . drupal_get_path('module', 'maestro');
  $variables['hiderequestlink'] = 'none';
  $variables['project_link'] = '';

  $variables['tracking_id'] =  $task->tracking_id;
  $variables['flow_description'] = $task->flow_name;
  $variables['custom_workflow_summary'] = '';

  if (user_access('maestro reassign tasks')) {
    $variables['workflow_admin'] = TRUE;
    $variables['show_otaskaction'] = '';
    // Create a list of users for the dropdown re-assign form element
    $res = db_select('users', 'users')
    ->fields('users', array('uid', 'name'))
    ->condition('uid', 0, '>')
    ->execute();
    foreach ($res as $rec) {
      $variables['reassign_user_options'][$rec->uid] = $rec->name;
    }
  }
  else {
    $variables['workflow_admin'] = FALSE;
    $variables['show_otaskaction'] = 'none';
  }

  $projectRec = db_select('maestro_projects', 'a')
  ->fields('a', array('project_num', 'originator_uid', 'description', 'status', 'prev_status', 'related_processes'))
  ->condition('id', $task->tracking_id, '=')
  ->execute()->fetchObject();

  $variables['project_status'] = MaestroProjectStatusCodes::getStatusLabel($projectRec->status);

  /* @TODO: Would like to make this extensible so that other project status options can in the future add their own
   * Action form and AJAX handler to perform custom actions on the overall project workflow instance.
   *
   * Initially we need to have a 'delete project' action
   */
  $variables['special_status_action'] = '';

  if (user_access('maestro admin')) {
    $url = url('maestro/nojs/deleteproject/' .  $task->tracking_id);
    $variables['delete_project_action'] = '<a class="ctools-modal-maestro-confirm-modal-style ctools-use-modal" href="'. $url . '">' . t('Delete Project') .'</a>';
  }
  else {
    $variables['delete_project_action'] = '';
  }

  $variables['completed_tasks'] = maestro_getProjectTasksHistory($task->tracking_id);

  /* Format Outstanding Tasks Object to be used in the template */
  $arr_otasks = array();  // Array of outstanding task objects
  $query = db_select('maestro_process', 'process');
  $query->join('maestro_queue', 'queue', 'queue.process_id = process.id');
  $query->join('maestro_template_data', 'template', 'queue.template_data_id = template.id');
  $query->join('maestro_production_assignments', 'assignment', 'assignment.task_id = queue.id');
  $query->leftJoin('users', 'user1', 'user1.uid = assignment.assign_id');
  $query->leftJoin('role', 'role', 'role.rid = assignment.assign_id');
  $query->fields('queue', array('process_id', 'created_date', 'started_date', 'completed_date', 'status'));
  $query->fields('template', array('taskname', 'is_dynamic_taskname', 'dynamic_taskname_variable_id'));
  $query->fields('assignment', array('assign_id', 'assign_type', 'process_variable'));
  $query->addField('assignment', 'id', 'assign_recid');
  $query->addField('queue', 'id', 'queue_id');
  $query->addField('user1', 'name', 'username');
  $query->addField('role', 'name', 'rolename');
  $query->addField('process', 'pid', 'parent_process_id');
  $query->addField('process', 'tracking_id', 'tracking_id');
  $query->condition('process.tracking_id', $task->tracking_id, '=');
  $query->condition('queue.status', 0, '=');
  $query->condition('queue.show_in_detail', 1, '=');
  $res = $query->execute();
  $variables['outstanding_tasks'] = array(); //instantiate empty array just in case the query returns no results
  foreach ($res as $record) {
    $otask = new stdClass();
    $otask->assigned_date = strftime("%b %d/%Y %H:%M", $record->created_date);
    $otask->task_id = $record->queue_id;
    if ($record->parent_process_id > 0) $record->taskname = '<span style="color:red;padding-right:3px;">[R]</span>' . $record->taskname;
    $otask->taskname = $record->taskname;
    $otask->taskuser = $record->assign_id;
    $otask->assign_recid = $record->assign_recid;
    switch ($record->assign_type) {
      case MaestroAssignmentTypes::USER:
        $otask->owner = $record->username;
        $otask->assignment_type = 'user';
        break;
      case MaestroAssignmentTypes::ROLE:
        // Test if group name has been set to use a variable for this task
        if ($record->assign_id == 0 AND $record->process_variable > 0) {
          $maestro = Maestro::createMaestroObject(1);    // Initiate the processing of all tasks of type 1.x
          // The process variable is expected to contain the role name
          $process_variable = $maestro->engine()->getProcessVariable($record->process_variable, $record->process_id);
          $otask->owner = "R:{$process_variable}";
        }
        else {
          $otask->owner = "R:{$record->rolename}";
        }
        $otask->assignment_type = 'role';
        break;
      case MaestroAssignmentTypes::GROUP:
        if (module_exists('og')) {
          // Test if group name has been set to use a variable for this task
          if ($record->assign_id == 0 AND $record->process_variable > 0) {
            $maestro = Maestro::createMaestroObject(1);    // Initiate the processing of all tasks of type 1.x
            // The process variable is expected to contain the group name
            $process_variable = $maestro->engine()->getProcessVariable($record->process_variable, $record->process_id);
            $otask->owner = "G:{$process_variable}";
          }
          else {
            $og_groupinfo = MaestroOgCommon::getGroup($record->assign_id);
            $otask->owner = "G:{$og_groupinfo->label}";
          }
        }
        else {
          $otask->owner = "G:OG Disabled";
        }
        $otask->assignment_type = 'group';
        break;
    }
    $otask->variable_id = $record->process_variable;
    if ($otask->variable_id > 0) {
      $otask->taskassign_mode = 'variable';
    }
    else {
      $otask->taskassign_mode = 'id';  // User ID or Role ID or Group ID
    }
    $variables['outstanding_tasks'][] = $otask;
  }

  /* For each task - check and see if they have any formatted content to display */
  $variables['content_records'] = array();
  $query = db_select('maestro_process', 'process');
  $query->join('maestro_queue', 'queue', 'queue.process_id = process.id');
  $query->fields('queue', array('id', 'process_id', 'template_data_id', 'task_class_name'));
  $query->addField('queue', 'id', 'queue_id');
  $query->condition('process.tracking_id', $task->tracking_id, '=');
  $res = $query->execute();
  $uniqueTasks = array();
  foreach ($res as $taskrec) {
    // Only need to call this task method once for each template task step - added in case of regen instances
    if (!in_array($taskrec->template_data_id, $uniqueTasks)) {
      $uniqueTasks[] = $taskrec->template_data_id;
      $current_task = new $taskrec->task_class_name();
      $taskContent = $current_task->showContentDetail($task->tracking_id, $taskrec->id);
      if (!empty($taskContent)) {
        $variables['content_records'][] = $taskContent;
      }
    }
  }

  // Check and see if we have any content records with an empty task id
  $query = db_select('maestro_project_content','content');
  $query->addField('content','nid');
  $query->addField('content','status');
  $query->condition('content.tracking_id',$task->tracking_id,'=');
  $query->condition('content.task_id',0,'=');
  $res = $query->execute();
  foreach ($res as $record) {
    $node = node_load($record->nid);
    $taskContent = '<div>' . l($node->title, "node/{$record->nid}/maestro");
    $taskContent .= '<span style="padding-left:10px;">' . t('Status') . ': ';
    $taskContent .= t(MaestroContentStatusCodes::getStatusLabel($record->status));
    $taskContent .= '</span></div>';
    $variables['content_records'][] = $taskContent;
  }

}

/**
 * Preprocess function for comments
 */
function template_preprocess_maestro_project_comments(&$variables) {
  global $base_url, $user;

  $maestro_path = $base_url . '/' . drupal_get_path('module', 'maestro');
  $variables['module_base_url'] = $maestro_path;

  /* Format any project comments records */
  $variables['comment_records'] = array();
  $query = db_select('maestro_project_comments', 'a');
  $query->fields('a', array('id', 'uid', 'timestamp', 'comment'));
  $query->join('users', 'b', 'b.uid = a.uid');
  $query->addField('b', 'name', 'username');
  $query->condition('a.tracking_id', $variables['tracking_id'], '=');
  $res = $query->execute();
  foreach ($res as $record) {
    if (isset($record->task_id) AND $record->task_id > 0) {
    $query = db_select('maestro_queue', 'a');
    $query->join('maestro_template_data', 'b', 'b.id = a.template_data_id');
    $query->addField('b', 'taskname', 'taskname');
    $query->condition('a.id', $record->task_id, '=');
    $record->taskname = $query->execute()->fetchField();
    }
    else {
      $record->taskname = t('N/A');
    }
    $record->date = strftime("%b %d/%Y %H:%M", $record->timestamp);
    if ($record->uid == $user->uid OR user_access('maestro admin')) {
      $record->show_delete = 'visible';
    }
    else {
      $record->show_delete = 'hidden';
    }
    $variables['comment_records'][] = $record;
  }

}

/**
 * Preprocess function for workflow allflows view - need to add the Ctools hooks
 */
function template_preprocess_maestro_all_flows(&$variables) {
  // Add CTools' javascript to the page.
  ctools_include('modal');
  ctools_modal_add_js();
  drupal_add_js(array(
    'maestro-confirm-modal-style' => array(
      'modalSize' => array(
        'type' => 'fixed',
        'width' => 350,
        'height' => 100,
      ),
      'modalOptions' => array(
        'opacity' => .7,
        'background' => '#333333'
        ),
      'closeText' => t('Close'),
    ),
    'maestro-viewcontent-modal-style' => array(
      'modalSize' => array(
        'type' => 'scale',
        'width' => .70,
        'height' => .60,
      ),
      'modalOptions' => array(
        'opacity' => .6,
        'background' => '#333333'
        ),
      'closeText' => t('Close'),
    ),
  ), 'setting');
}

/**
 * Preprocess function for workflow editing
 */
function template_preprocess_maestro_workflow_edit(&$variables) {
  global $base_url;

  $mi = new MaestroInterface($variables['tid']);
  $variables['additional_js'] = $mi->initializeJavascriptArrays();
  $variables['ajax_url'] = url('admin/structure/maestro/ajax/');
}

/**
 * Preprocess function for workflow list
 */
function template_preprocess_maestro_workflow_list(&$variables) {
  $query = db_select('maestro_template', 'a');
  $query->addExpression('COUNT(a.id)', 'templateCount');
  $queryNumRows = $query->countQuery()->execute()->fetchField();
  $variables['num_records'] = intval($queryNumRows);
  $output="";

  $res = db_query("SELECT id, template_name FROM {maestro_template}");
  $cntr = 0;
  foreach ($res as $rec) {
    $output .= theme('maestro_workflow_list_item', array( 'rec' => $rec,
                                                          'cntr' => $cntr,
                                                          'operation' => $variables['operation'],
                                                          'tid' => $variables['tid'],
                                                          'edit_var' => $variables['edit_var']
    ));
    $cntr++;
  }

  $variables['workflow_list'] = $output;
  $variables['error_message'] = '';
  $variables['ajax_url']=url('admin/structure/maestro/structure_ajax');
  //app group listing:
  $variables['app_groups'] = maestro_createAppGroupDropDown('deleteAppGroup');
}

/**
 * Preprocess function for items in workflow list
 */
function template_preprocess_maestro_workflow_list_item(&$variables) {
  global $base_url;
  $output="";
  $variables['show_export_item'] = 'none';
  $variables['export_content'] = '';
  $variables['template_app_groups'] = "";
  $variables['module_path']=$base_url . "/" . drupal_get_path('module', 'maestro');
  if ($variables['operation'] == 'edit' && $variables['tid'] ==  $variables['rec']->id ) {  //only show this when we're editing a specific template.
    $variables['show_item'] = '';
    $output = theme('maestro_workflow_edit_template_variables',  array('tid' => $variables['tid'], 'edit_var' => $variables['edit_var'] , 'cntr' => $variables['cntr']));
    $query = db_select('maestro_template', 'a');
    $query->fields('a', array('template_name', 'app_group'));
    $query->condition('a.id', $variables['tid'], '=');
    $res=current($query->execute()->fetchAll());
    $variables['template_app_groups'] = maestro_createAppGroupDropDown('appGroup', $res->app_group);
  }
  elseif ($variables['operation'] == 'export_template' && $variables['tid'] ==  $variables['rec']->id ) { //only show this when we're exporting a specific template
    $variables['show_item'] = 'none';
    $variables['export_content'] = maestro_export($variables['tid']);
    $variables['show_export_item'] = '';
  }
  else {
    $variables['show_item'] = 'none';
  }
  $variables['template_variables'] = $output;

}

/**
 * Preprocess function for editing template variables
 */
function template_preprocess_maestro_workflow_edit_template_variables(&$variables) {
  global $base_url;
  $variables['module_path']=$base_url . "/" . drupal_get_path('module', 'maestro');
  $output="";
  $res = db_query("SELECT id, variable_name, variable_value FROM {maestro_template_variables} WHERE template_id=:tid", array('tid' => $variables['tid']));
  foreach ($res as $rec) {
    $output .= theme('maestro_workflow_edit_template_variables_list', array( 'var_id' => $rec->id,
                                                                        'tid' => $variables['tid'],
                                                                        'variable_name' => $rec->variable_name,
                                                                        'variable_value' => $rec->variable_value,
                                                                        'edit_var' => $variables['edit_var'],
                                                                        'cntr' => $variables['cntr']
    ));
  }
  $variables['template_variables'] = $output;
}

/**
 * Preprocesss function for editing list of template variables
 */
function template_preprocess_maestro_workflow_edit_template_variables_list(&$variables) {
  global $base_url;
  $variables['module_path' ] = $base_url . "/" . drupal_get_path('module', 'maestro');
  if ($variables['var_id'] == $variables['edit_var']) {
    $variables['show_variable_actions'] = 'none';
    $variables['show_variable_edit_actions'] = '';
  }
  else {
    $variables['show_variable_actions'] = '';
    $variables['show_variable_edit_actions'] = 'none';
  }
}


/**
* Generates html of select list for Application Group drop down
* Queries database for existing groups and inserts them into HTML option tags
*
* @return
*  HTML of select list
*/
function maestro_createAppGroupDropDown($name, $selected = 0){
  $res = db_query("SELECT id, app_group FROM {maestro_app_groups}");
  $output = "<select class='form-select' id='{$name}' name='{$name}' size='4' >";
  $output .= "<option value='0'>" . t('N/A') . "</option>";
  foreach ($res as $rec) {
    $sel = "";
    if ($selected == $rec->id) $sel = " selected ";
    $output .= "<option value='{$rec->id}' {$sel}>{$rec->app_group}</option>";
  }
  $output .= "</select>";
  return $output;
}

/**
 * Defines available task types
 *
 * Any other maestro task type modules will also implement this function
 * For the core task types that we implement as part of maestro
 * we need to describe them in this function
 *
 * This information is used by the maestro UI (interface) presently
 * to get contextMenu options and handler options.
 *
 * @return
 *   Array of keyed arrays representing available task types
 */
function maestro_maestro_get_taskobject_info() {
  $options = array(
    array('display_name' => t('And Task'),
      'class_name' => 'MaestroTaskInterfaceAnd'
    ),
    array('display_name' => t('If Task'),
      'class_name' => 'MaestroTaskInterfaceIf'
    ),
    array('display_name' => t('Batch Task'),
      'class_name' => 'MaestroTaskInterfaceBatch'
    ),
    array('display_name' => t('Batch Function Task'),
      'class_name' => 'MaestroTaskInterfaceBatchFunction'
    ),
    array('display_name' => t('Interactive Function Task'),
      'class_name' => 'MaestroTaskInterfaceInteractiveFunction'
    ),
    array('display_name' => t('Set Process Variable Task'),
      'class_name' => 'MaestroTaskInterfaceSetProcessVariable'
    ),
    array('display_name' => t('Manual Web Task'),
      'class_name' => 'MaestroTaskInterfaceManualWeb'
    ),
    array('display_name' => t('Content Type Task'),
      'class_name' => 'MaestroTaskInterfaceContentType'
    ),
    array('display_name' => t('Fire Trigger Task'),
      'class_name' => 'MaestroTaskInterfaceFireTrigger'
    ),
  );
  return $options;
}

/**
 * Defines available handler functions
 *
 * @return
 *   Keyed array of keyed arrays defining handler function and the function description
 */
function maestro_maestro_handler_options() {

  $handlers = array(
    'MaestroTaskTypeBatchFunction' => array(
      'maestro_test_batch_function' => t('Sample test batch function - do nothing.'),
    ),
  );
  return $handlers;
}

/**
* @desc Implements HOOK_maestro_set_process_variable_methods.
* Register the default options for the set_process_variable Task Type provides.
* Each Task Type can register it's own functions to be made available to the set_process_variable task type.
*
* Example: may want to be able to set a process variable
* to a field value from a content type submission or inline form value.
*
*       The return must be an array structure as follows:
*       array (
*         'set_method_name' => array (    //a unique name for your set method
*           'title' => t('Title'),        //the title which will show up when you edit the set process variable task
*           'engine_handler' => 'maestro_set_process_variable_handler'    //the function that gets called which returns
*         )                                                               //the value to set the process variable to.
*       );
*/
function maestro_maestro_set_process_variable_methods() {
  return array(
    'hardcoded_value' => array(
      'title' => t('Hardcoded Value'),
      'description' => t('Set variable to a default value'),
      'engine_handler' => 'maestro_set_process_variable_logic_hardcoded',
    ),
    'increment_value' => array(
      'title' => t('Add or Subtract a Value'),
      'description' => t('Use a negative number to decrement the variable value'),
      'engine_handler' => 'maestro_set_process_variable_logic_increment',
    ),
    'maestro_content_type_task' => array(
      'title' => t('Content Field Result'),
      'description' => t('Content Type:Field Name - use machine names for the content type and field name'),
      'engine_handler' => 'content_type_task_maestro_set_process_variable_logic',
    ),
  );
}


/**
 *@desc the following are functions that set_process_variable() calls to
 *      get the value to set the process variable to.
 */
function maestro_set_process_variable_logic_hardcoded(&$task_class, $current_value, $arg) {
  return $arg;
}

/**
 *
 */
function maestro_set_process_variable_logic_increment(&$task_class, $current_value, $arg) {
  return intval($current_value) + intval($arg);
}

/**
 *
 */
function content_type_task_maestro_set_process_variable_logic(&$task, $current_value, $arg) {
  $retval = $current_value;
  $args = explode(':', $arg);  //$args[0] = content type, $arg[1] = field name
  if (empty($args[0]) OR empty($args[1])) {
    return FALSE;
  }

  $content_type = $args[0];
  $field_name = $args[1];

  // Retrieve the tracking_id for the workflow instance
  // Use the tracking_id to get the Node id for the content record of type $content_type
  $tracking_id = maestro_getTaskTrackingId($task->_properties->id);
  $query = db_select('maestro_project_content', 'content');
  $query->addField('content', 'nid');
  $query->condition('content.tracking_id', $tracking_id, '=');
  $query->condition('content.instance', 1, '=');
  $query->condition('content.content_type', $content_type, '=');
  $nid = $query->execute()->fetchField();
  if (empty($nid)) {
    return FALSE;
  }

  $node = node_load($nid);

  if ($field_name == 'title') {  // Unlikely but title is not implemented as a field - still in the node table
    return $node->title;
  }

  $field_info = field_info_field($field_name);

  $entity = entity_load('node', array($nid));

  /* Technique to get the raw value of the field.
   * Need to determine column name, for text fields it would be value but we can not assume that
   * Will assume the first element in the field definition maps to the field value but this could be dangerous
   * Does not appear to be another way to return just the raw field value
   * Tried field_view_value but that returns a formatted array that may not even contain the value - could be a link for display
   *
   *   This may work for text fields but in the case of a select list of users it will return the username and we may want the uid
   *   $rawfield = field_get_items('node', $entity[$nid], $field_name);
   *   $data = field_view_value('node', $entity[$nid], $field_name, $rawfield[0]);
   *   $retval = $data['#markup'];
   */
  if (isset($field_info['columns'])) {
    $field_data_column = key($field_info['columns']);
    $data = field_view_field('node', $entity[$nid], $field_name);

    if (isset($data['#items'])) {
      $retval = $data['#items'][0][$field_data_column];
    }
  }

  return $retval;

}

/**
 * Act on Ajax requests from task console
 *
 * @param $action
 *   String value of action taken
 * @param $queue_id
 *   If $action=="complete_task, the queue_id of the task to be completed
 */
function maestro_handle_taskconsole_ajax_request($action, $queue_id = 0) {
  global $user;

  if(!drupal_valid_token($_POST['sec_token'],'maestro_user')) {
    $arr=array('data' => t('Illegal action'), 'status' => 0);
    drupal_json_output($arr);
    exit(0);
  }

  switch ($action) {
    case 'starttask':
      $startedDate = db_query("SELECT started_date FROM {maestro_queue} WHERE id = :tid",
      array(':tid' => $_POST['taskid']))->fetchField();
      if ($startedDate == NULL or $startedDate <= 0) {
        db_update('maestro_queue')
        ->fields(array('started_date' => time()))
        ->condition('id', $_POST['taskid'], '=')
        ->execute();
      }
      break;

    case 'newprocess':
      $tid = intval($_POST['templateid']);
      $pid = maestro_launch_workflow($tid,$_POST['sec_token']);
      $retdata = array('status' => "1", 'processid' => $pid);
      drupal_json_output($retdata);
      break;

    case 'setassignment':
      $retdata = array('status' => FALSE);
      if (user_access('maestro reassign tasks')) {
        $maestro = Maestro::createMaestroObject(1);
        $taskid = intval($_POST['taskid']);
        $process_id = db_query("SELECT process_id FROM {maestro_queue} WHERE id = :tid",
        array(':tid' => $taskid))->fetchField();
        $task_data_id = db_query("SELECT template_data_id FROM {maestro_queue} WHERE id = :tid",
        array(':tid' => $taskid))->fetchField();
        $tracking_id = db_query("SELECT tracking_id FROM {maestro_process} WHERE id = :pid",
        array(':pid' => $process_id))->fetchField();

        // Retrieve the production assignment record to change
        $sql = "SELECT assign_id FROM {maestro_production_assignments} WHERE id = :id";
        $assigned_value = db_query($sql, array(':id' => $_POST['assign_recid']))->fetchField();

        if ($assigned_value > 0 OR $_POST['variable_id'] > 0) {

          switch ($_POST['assignment_type']) {
          case 'user':
            if ($assigned_value != $_POST['task_reassign_uid']) {
              $maestro->engine()->reassignTask($taskid, $_POST['task_reassign_uid'], $_POST['taskuser'], $_POST['variable_id'], 1);
              $username = db_query("SELECT name FROM {users} WHERE uid = :uid", array(':uid' => $_POST['task_reassign_uid']))->fetchField();
            }
            else {
              $username = db_query("SELECT name FROM {users} WHERE uid = :uid", array(':uid' => $assigned_value))->fetchField();
            }
            $retdata = array('status' => TRUE, 'username' => $username);
            break;
          case 'role':
            // Note in this case, the taskuser posted var is the group id unless it's been assigned by variable
            $maestro->engine()->reassignTask($taskid, $_POST['task_reassign_uid'], $_POST['taskuser'], $_POST['variable_id'], 2);
            $username = db_query("SELECT name FROM {users} WHERE uid = :uid", array(':uid' => $_POST['task_reassign_uid']))->fetchField();
            $retdata = array('status' => TRUE, 'username' => $username);
            break;
          case 'group':
            // Note in this case, the taskuser posted var is the group id unless it's been assigned by variable
            $maestro->engine()->reassignTask($taskid, $_POST['task_reassign_uid'], $_POST['taskuser'], $_POST['variable_id'], 3);
            $username = db_query("SELECT name FROM {users} WHERE uid = :uid", array(':uid' => $_POST['task_reassign_uid']))->fetchField();
            $retdata = array('status' => TRUE, 'username' => $username);
            break;
          }
        }
      }
      drupal_json_output($retdata);
      break;

    case 'interactivetask_post':
      $queue_id = intval($_POST['queueid']);
      $taskop = check_plain($_POST['op']);
      if ($queue_id > 0) {
        $rec = db_select('maestro_queue')
        ->fields('maestro_queue', array('task_class_name', 'process_id'))
        ->condition('id', $queue_id, '=')
        ->execute()->fetchObject();
        $tasktype = $rec->task_class_name;
        $data = new stdClass();
        // Need to pass in data object when instantiating task class and queueid needs to be set in class _properties.
        $data->process_id = $rec->process_id;
        $data->queue_id = $queue_id;
        $task = new $tasktype($data);
        $ret = $task->processInteractiveTask($queue_id, $taskop);
        if ($ret->retcode === TRUE) {
          if ($ret->engineop == 'completetask') {
            if (!isset($ret->status)) $ret->status = 1;    // Just in case interactive function has not set this - set to default 'success'
            $maestro = Maestro::createMaestroObject(1);    // Initiate the processing of all tasks of type 1.x
            $maestro->engine()->completeTask($queue_id, $ret->status);
            $retdata = array('status' => TRUE, 'hidetask' => TRUE);
          }
          else {
            /* Check if the interactive task handler wanted to have the task console page refreshed and
             * optionally, scroll the page down and re-open the same task
            */
            if (isset($ret->consoleop) AND $ret->consoleop == 'refresh') {
              if (isset($ret->reopen_task) AND $ret->reopen_task === TRUE) {
                $retdata = array('status' => TRUE, 'hidetask' => FALSE, 'refresh' => TRUE, 'reopen_task' => TRUE);
              } else {
                $retdata = array('status' => TRUE, 'hidetask' => FALSE, 'refresh' => TRUE, 'reopen_task' => FALSE);
              }
            } else {
              $retdata = array('status' => TRUE, 'hidetask' => FALSE, 'refresh' => FALSE);
            }
          }
        }
        else {
          $retdata = array('status' => FALSE, 'hidetask' => FALSE, 'refresh' => FALSE);
        }
      }
      else {
        $retdata = array('status' => FALSE, 'hidetask' => FALSE, 'refresh' => FALSE);
      }
      drupal_json_output($retdata);
      break;

    case 'complete_task':
      //We require the queueID to be passed back to us in the URL
      $maestro = Maestro::createMaestroObject(1);    // Initiate the processing of all tasks of type 1.x
      $queue_id = intval($queue_id);
      $maestro->engine()->completeTask($queue_id);
      $retdata = array('status' => "1");
      drupal_json_output($retdata);
      break;

    case 'deleteproject':
      $tracking_id = intval($_POST['tracking_id']);
      $retval = maestro_delete_project($tracking_id);
      if ($retval) {
        $retdata = array('status' => "1", 'message' => t('Successful Deletion of Project'));
      }
      else {
        $retdata = array('status' => "0", 'message' => t('You are not an admin.  Project not deleted.'));
      }
      drupal_json_output($retdata);
      break;

    case 'add_comment':
      if (!empty($_POST['comment'])) {
        db_insert('maestro_project_comments')
        ->fields(array('tracking_id', 'uid', 'task_id', 'timestamp', 'comment'))
        ->values(array(
                'tracking_id' => intval($_POST['tracking_id']),
                'uid' => $user->uid,
                'task_id' => 0,
                'timestamp' => time(),
                'comment'  => filter_xss($_POST['comment'])
        ))
        ->execute();
        $rowid = intval($_POST['rowid']);
        $html = theme('maestro_project_comments', array('rowid' => $rowid, 'tracking_id' => intval($_POST['tracking_id'])));
        $retdata = array('html' => $html, 'status' => "1");
      }
      else {
        $retdata = array('status' => "1");
      }
      drupal_json_output($retdata);
      break;

    case 'del_comment':
      if ($_POST['cid'] > 0) {
        $query = db_select('maestro_project_comments', 'a');
        $query->addField('a', 'uid');
        $query->condition('a.id', $_POST['cid'], '=');
        $comment_owner = $query->execute()->fetchField();
        if ($comment_owner == $user->uid OR user_access('maestro admin')) {
          db_delete('maestro_project_comments')
            ->condition('id', $_POST['cid'], '=')
            ->execute();
          $rowid = intval($_POST['rowid']);
          $html = theme('maestro_project_comments', array('rowid' => $rowid, 'tracking_id' => intval($_POST['tracking_id'])));
          $retdata = array('html' => $html, 'status' => "1");
        }
        else {
          $retdata = array('status' => "0");
        }
      }
      else {
        $retdata = array('status' => "0");
      }
      drupal_json_output($retdata);
      break;

    case 'getdetails':
      $task = new stdClass();
      $task->tracking_id = maestro_getTaskTrackingId(intval($_POST['taskid']));  // Retrieve the tracking_id from the taskid
      $flowname = db_query("SELECT description FROM {maestro_projects} WHERE id = :id",
        array(':id' => $task->tracking_id))->fetchField();
      $task->flow_name = $flowname;
      $rowid = intval($_POST['rowid']);
      $html = theme('maestro_taskconsole_details', array('task' => $task, 'source' => 'mytasks', 'rowid' => $rowid ));

      $retdata = array('html' => $html, 'status' => "1");
      drupal_json_output($retdata);
      break;

    case 'myflows':
      $myflowfilter =  array('myflows' => TRUE);
    case 'filterprojects':
      include('maestro.moderator.inc');
      $filter = array(
        'username' => check_plain($_POST['userNameFilter']),
        'projectname' => check_plain($_POST['flowNameFilter'])
        );
      if (is_array($myflowfilter)) {  //this has to be an array.  otherwise, this is not a valid executable area for a non-regular user
        $filter = array_merge($filter, $myflowfilter);
      }
      else {  //better check if the user should be here
        if (!user_access('maestro admin')) {
          $retdata = array('html' => t('Illegal attempt on viewing flow data detected.'), 'status' => "0");
          drupal_json_output($retdata);
          exit(0);
        }
      }
      $rows = maestro_get_all_flows_data($filter);
      $ajax_url = url('maestro/taskconsole/ajax');
      $retdata = array('html' => theme('maestro_all_flows_display', array('ajax_url' => $ajax_url, 'database_result_set' => $rows)), 'status' => "1");
      drupal_json_output($retdata);
      break;

    case 'getprojectdetails':  // Called from MyFlows and AllFlows view to retrieve project details
      $task = new stdClass();
      $task->tracking_id = intval($_POST['projectID']);
      $flowname = db_query("SELECT description FROM {maestro_projects} WHERE id = :id",
        array(':id' => $task->tracking_id))->fetchField();
      $task->flow_name = $flowname;
      $rowid = intval($_POST['projectID']);
      $html = theme('maestro_taskconsole_details', array('task' => $task, 'source' => 'mytasks', 'rowid' => $rowid ));
      $retdata = array('html' => $html, 'status' => "1");
      drupal_json_output($retdata);
      break;
  }

}

/**
 * Implements hook_form_alter()
 *
 * For content types managed by Maestro, sets custom submit handler
 */
function maestro_form_alter(&$form, $form_state, $form_id) {
  /* Determine if the cached list of content types being used by configured maestro workflow templates is setup. */
  $maestro_content_types = cache_get('maestro_content_types');
  if ($maestro_content_types === FALSE) {  // if not set - scan templates for unique content types
    $types = array();
    $query = db_select('maestro_template_data', 'template_data');
    $query->addField('template_data', 'task_data', 'task_data');
    $query->condition('task_class_name', 'MaestroTaskTypeContentType', '=');
    $res = $query->execute();
    foreach ($res as $rec) {
      $data = unserialize($rec->task_data);
      if (!empty($data['content_type']) AND !in_array($data['content_type'], $types)) {
        $types[] = $data['content_type'] . '_node_form';
      }
    }
    cache_set('maestro_content_types', $types);
    $maestro_content_types = $types;
  }
  else {
    $maestro_content_types = ($maestro_content_types->data);
  }

  if (in_array($form_id, $maestro_content_types)) {
    $request = urldecode(request_uri());
    $requestParms = explode('/', $request);

    $maestroIndex=-1;
    foreach ($requestParms as $index => $val) {
      if ($val == 'maestro') {
        $maestroIndex = $index;
        //removed the break, because we are looking for the last occurrance
        //of 'maestro' in the requestParms.
      }
    }
    if ($maestroIndex >= 2) { //really only applies if your site is named maestro, ie localhost/maestro, but a valid index should be around 5
      if (isset($requestParms[$maestroIndex]) AND $requestParms[$maestroIndex] == 'maestro' AND isset($requestParms[$maestroIndex + 1])) {
        if ($requestParms[$maestroIndex + 1] == 'edit' AND intval($requestParms[$maestroIndex + 2] > 0)) {
          $form['maestro_taskid'] = array(
            '#value'  => intval($requestParms[$maestroIndex + 2]),
            '#type'   => 'hidden',
          );
          // The extra option is added to the URL via MaestroTaskTypeContentType->getTaskConsoleURL()
          // Clicking on a EDIT Form as a direct task - should complete the task on submit.
          if (isset($requestParms[$maestroIndex + 3]) AND $requestParms[$maestroIndex + 3] == 'completeonsubmit') {
            $form['maestro_completeonsubmit'] = array(
              '#value'  => 1,
              '#type'   => 'hidden',
            );
          }
        }
        else {
          $form['maestro_taskid'] = array(
            '#value'  => intval($requestParms[$maestroIndex + 1]),
            '#type'   => 'hidden',
          );
        }
        /** Overwrite the default node submission handler with our own.
         * Had a real issue getting this to work as the available docs indicate
         * $form['#submit'][] = 'maestro_content_form_submit';
         * should work but the default node submit handler 'node_form_submit()' would always be used.
         * Posted to rfay's blog: http://randyfay.com/node/66
         * On IRC, DamZ recommended this syntax which works
         */
        $form['actions']['submit']['#submit'][] = 'maestro_content_form_submit';
      }
    }
    elseif (array_key_exists('complete form', $form_state) && array_key_exists('maestro_taskid', $form_state['complete form'])) {
      /** If there is a get/post action called, such as when an attachment field's upload button is clicked,
       * we need to re-add the fields to the form. so we check the form_state to see if the previous values
       * there so that we know it is a maestro content type task form we are dealing with.
       */
      $form['actions']['submit']['#submit'][] = 'maestro_content_form_submit';
      $form['maestro_taskid'] = array(
        '#value'  => $form_state['complete form']['maestro_taskid']['#value'],
        '#type'   => 'hidden',
      );
      if (array_key_exists('maestro_completeonsubmit', $form_state['complete form'])) {
        $form['maestro_completeonsubmit'] = array(
          '#value'  => $form_state['complete form']['maestro_completeonsubmit']['#value'],
          '#type'   => 'hidden',
        );
      }
    }
  }
}

/**
 * Implements hook_node_insert()
 *
 * When inserting Maestro node, process event through Maestro task handler
 */
function maestro_node_insert($node) {
  if (isset($node->maestro_taskid) AND $node->maestro_taskid > 0) {
    $task_classname = db_query("SELECT task_class_name FROM {maestro_queue} WHERE id = :tid",
    array(':tid' => $node->maestro_taskid))->fetchField();

    $task = new $task_classname();
    $task->processContent($node->maestro_taskid, 'insert', $node);
  }
}

/**
 * Implements hook_node_update().
 *
 * Check if content_type is being updated via a maestro task
 */
function maestro_node_update($node) {
  if (isset($node->maestro_taskid) AND $node->maestro_taskid > 0) {

    // Extra form field set by maestro_form_alter if taskconsole task is a contentType task - Edit operation
    // Inline tasks that prompt user to review/edit a node (contentType) may also redirect user to Edit but
    // It's up to the interactiveFunction's code to complete that task.
    // Usually after someone clicks on 'accept' or 'reject' in the custom interactiveFunctions inline action form.
    if (isset($node->maestro_completeonsubmit) AND $node->maestro_completeonsubmit == 1) {

      // Initiate the maestro workflow engine and complete the task
      $maestro = Maestro::createMaestroObject(1);
      $queue_id = intval($node->maestro_taskid);
      $maestro->engine()->completeTask($node->maestro_taskid);
    }
  }

}

/**
 * Custom submit handler for content types managed by Maestro
 *
 * Provides redirection to the Maestro task console
 *
 * @see maestro_form_alter()
 */
function maestro_content_form_submit($form, &$form_state) {
  $taskid = intval($form_state['values']['maestro_taskid']);
  $form_state['redirect'] = 'maestro/taskconsole/' . $taskid;

  /* If the revisions module is enabled, it will hijack the redirect on saving a revision
  * and we want to return to the task console
  */
  if (module_exists('revisioning')) {
    $form_state['node']->revision_moderation = '';
  }

}


/**
 * Helper function that interactive tasks can use
 * for example to review/edit content that needs a node id
 *
 * @return
 *   Node ID or FALSE
 */
function maestro_getNodeId($process_id, $content_type) {
  $tracking_id = db_select('maestro_process')
    ->fields('maestro_process', array('tracking_id'))
    ->condition('id', $process_id, '=')
    ->execute()->fetchField();
  if ($tracking_id > 0) {
    $nid = db_select('maestro_project_content')
      ->fields('maestro_project_content', array('nid'))
      ->condition('tracking_id', $tracking_id, '=')
      ->condition('content_type', $content_type, '=')
      ->execute()->fetchField();
  }
  if ($tracking_id > 0 AND $nid > 0) {
    return $nid;
  }
  else {
    return FALSE;
  }
}

/**
 * Helper function that retrieves the tracking_id for a specific queue task
 *
 * @return
 *   Tracking ID or FALSE
 */
function maestro_getTaskTrackingId($taskid) {
  $res = db_select('maestro_queue', 'a');
  $res->join('maestro_process', 'b', 'a.process_id = b.id');
  $res->fields('b', array('tracking_id'));
  $res->condition('a.id', $taskid, '=');
  $tracking_id = $res->execute()->fetchField();
  if ($tracking_id > 0 ) {
    return $tracking_id;
  }
  else {
    return FALSE;
  }
}

/**
* Helper function that retrieves the process_id for a specific queue task
*
* @return
*   Tracking ID or FALSE
*/
function maestro_getProcessId($taskid) {
  $res = db_select('maestro_queue', 'a');
  $res->fields('a', array('process_id'));
  $res->condition('a.id', $taskid, '=');
  $process_id = $res->execute()->fetchField();
  if ($process_id > 0 ) {
    return $process_id;
  }
  else {
    return FALSE;
  }
}


/**
 * Retrieve the task history for a maestro project (all related workflow instances)
 *
 * @return
 *   Array of objects representing tasks in history of project
 */
function maestro_getProjectTasksHistory($tracking_id) {

  $query = db_select('maestro_process', 'process');
  $query->join('maestro_queue', 'queue', 'queue.process_id = process.id');
  $query->join('maestro_template_data', 'template', 'queue.template_data_id = template.id');
  $query->join('users', 'users', 'users.uid = queue.uid');
  $query->fields('queue', array('process_id', 'created_date', 'started_date', 'completed_date', 'status'));
  $query->fields('template', array('taskname', 'is_dynamic_taskname', 'dynamic_taskname_variable_id'));
  $query->addField('users', 'name', 'username');
  $query->addField('users', 'uid');
  $query->addField('queue', 'id', 'queue_id');
  $query->addField('process', 'pid', 'parent_process_id');
  $query->condition('process.tracking_id', $tracking_id, '=');
  $query->condition('queue.show_in_detail', 1, '=');
  $query->condition(db_or()->condition('queue.completed_date', 0, '>')->condition('queue.status', MaestroTaskStatusCodes::STATUS_ON_HOLD, '='));
  $res = $query->execute();

  $retval = array();
  foreach ($res as $record) {
    $ctask = new stdClass();
    $ctask->assigned_date = strftime("%b %d/%Y %H:%M", $record->created_date);
    $ctask->started_date = strftime("%b %d/%Y %H:%M", $record->started_date);
    $ctask->completed_date = strftime("%b %d/%Y %H:%M", $record->completed_date);
    $ctask->status = MaestroTaskStatusCodes::getStatusLabel($record->status);
    if ($record->uid == 0) $record->username = t('Maestro');
    if ($record->parent_process_id > 0) $record->taskname = '<span style="color:red;padding-right:3px;">[R]</span>' . $record->taskname;
    $ctask->owner = $record->username;
    $ctask->taskname = $record->taskname;
    $retval[] = $ctask;
  }

  return $retval;
}

/**
 * Implementation of hook_maestro_notification_observer() found in the notifications class for Maestro
 */
function maestro_maestro_notification_observer() {
  return array('MaestroEmailNotification', 'SAMPLEMaestroTwitterNotification', 'MaestroWatchDogNotification'); //MaestroEmailNotification is the name of the class used for email notifications
}

/**
 * Implementation of hook_mail()
 */
function maestro_mail($key, &$message, $params) {
  include_once('maestro_notification.class.php');
  $options = array(
    'langcode' => $message['language']->language,
  );

  //@TODO:
  //We need to distinguish between these keys and set the subject and body appropriately.
  //For now, I will treat each type the same until we round this out.

  switch ($key) {  //pick off the keys here to preprocess the emails
    case MaestroNotificationTypes::ASSIGNMENT:
    case MaestroNotificationTypes::REMINDER:
    case MaestroNotificationTypes::COMPLETION:
    case MaestroNotificationTypes::ESCALATION:
    default:
      $message['subject'] = filter_xss($params['subject']);
      $message['body'][] = filter_xss($params['message']);
      if(!empty($params['Bcc'])) {
        $message['headers']['Bcc'] = check_plain($params['Bcc']);
      }
      break;
  }
}

/**
 * Utility function used in the contructor to merge arrays and maintain keys
 * Copy of example function found on php.net documentation page for array_merge
 *
 * @param $arr1
 *   Array to be merged
 * @param $arr1
 *   Array to be merged
 *
 * @return
 *   Array of items merged from $arr1 and $arr2
 */
function maestro_array_merge_keys($arr1, $arr2) {
  if (is_array($arr2)) {
    foreach ($arr2 as $k => $v) {
      if (!array_key_exists($k, $arr1)) { //K DOESN'T EXISTS //
        $arr1[$k] = $v;
      }
      else { // K EXISTS //
        if (is_array($v)) { // K IS AN ARRAY //
          $arr1[$k] = maestro_array_merge_keys($arr1[$k], $arr2[$k]);
        }
      }
    }
  }
  return $arr1;
}

/**
 * Utility function to add key=>value pairs from arr2 into $arr1
 *
 * @param $arr1
 *   Base array into which items will be added
 * @param $arr1
 *   Array of itmes to add into arr1
 *
 * @return
 *   Array of items representing union of arr1 and arr2
 */
function maestro_array_add($arr1, $arr2) {
  if (is_array($arr1) && is_array($arr2)) {
    foreach ($arr2 as $k => $v) {
      $arr1[] = $v;
    }
  }
  return $arr1;
}

/**
 * Update description of existing process with new text
 *
 * @param $process_id
 *   ID of process to update
 * @param $new_flow_name
 *   String of text to which process description should be set
 */
function maestro_set_process_flow_name($process_id, $new_flow_name) {
  if ($process_id > 0 && $new_flow_name != '') {
    db_update('maestro_process')
            ->fields(array('flow_name' => $new_flow_name))
            ->condition('id', $process_id, '=')
            ->execute();
    $query = db_select('maestro_process', 'a');
    $query->fields('a', array('tracking_id'));
    $query->condition('a.id', $process_id, "=");
    $res = current($query->execute()->fetchAll());
    $proj_id = intval($res->tracking_id);
    db_update('maestro_projects')
           ->fields(array('description' => $new_flow_name))
           ->condition('id', $proj_id, '=')
           ->execute();
  }
}

/**
 * Update the status of an existing project
 *
 * @param $tracking_id
 *   ID of project to update
 * @param $status
 */
function maestro_update_project_status($tracking_id, $status) {
  if ($tracking_id > 0) {
    $query = db_select('maestro_projects', 'a');
    $query->fields('a', array('status'));
    $query->condition('a.id', $tracking_id, "=");
    $res = current($query->execute()->fetchAll());
    if ($res) {
      $current_status = $res->status;
      db_update('maestro_projects')
           ->fields(array('status' => $status, 'prev_status' => $current_status))
           ->condition('id', $tracking_id, '=')
           ->execute();
    }
  }
}


/* Implementation of the ctools modal dialog for the delete confirmation
   Function called form the menu handler 'maestro/%ctools_js/deleteproject'
*/
function maestro_ctools_delete_project($js = NULL, $tracking_id = NULL) {
  global $base_url;

  /* See template_preprocess_maestro_taskconsole() where we include the needed ctools javascript  and
     in template_preprocess_maestro_taskconsole_details() where we define the 'delete project' link

     Note: Ctools uses jquery to attach the needed behaviour to the 'delete project' link if the class ctools-use-modal is used.
     Since the project details is not rendered as part of the initial page load, the needed ctools modal dialog hook is not executed.
     The project details is loaded via AJAX when the user expands the project folder icon, after the DOM is updated via the javascript
     in taskconsole.js, we execute a copy of the ctools code found in ctools/js/modal.js to attach the needed event.
  */

  if ($js) {
    ctools_include('modal');
    ctools_include('ajax');
    ctools_add_js('ajax-responder');
  }
  $form_state = array('title' => 'Delete Project', 'ajax' => TRUE);
  $output = ctools_modal_form_wrapper('maestro_deleteproject_confirm_form', $form_state);
  if (isset($form_state['clicked_button'])) {
    if ($form_state['clicked_button']['#value'] == t('Yes')) {
      if ($tracking_id > 0) {
        $tracking_id = intval($tracking_id);
        $retval = maestro_delete_project($tracking_id);
        if($retval) {
          $output = array();
          $output[] = ctools_modal_command_display(NULL, t('Project has been deleted.'));
          $output[] = ctools_ajax_command_reload();
          print ajax_render($output);
          exit;
        }
        else {
          $output = array();
          $output[] = ctools_modal_command_display(NULL, t('Error Project not deleted.'));
          $output[] = ctools_ajax_command_reload();
          print ajax_render($output);
          exit;
        }
      }
    } elseif ($form_state['clicked_button']['#value'] == t('No')) {
      $commands = array();
      $commands[] = ctools_modal_command_dismiss();
      print ajax_render($commands);
      exit;
    }
  }
  print ajax_render($output);
  exit;
}

/* Form definition to the ctools driven delete project confirm
*/
function maestro_deleteproject_confirm_form($form, &$form_state) {
  drupal_add_css(drupal_get_path('module', 'maestro') . '/css/maestro_ctools.css');
  $form['cancel'] = array(
    '#type' => 'submit',
    '#value' => t('No'),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Yes'),
  );
  return $form;
}

/**
 * Delete a project and all related items
 *
 * @param $tracking_id
 *   The tracking id of the project to delete
 *
 * @return
 *   Returns FALSE if user does not have 'maestro admin' access, TRUE otherwise
 */
function maestro_delete_project($tracking_id) {
  //first, we grab all of the processIDs that have a tracking ID that matches.
  $tracking_id = intval($tracking_id);
  if (!user_access('maestro admin')) return FALSE;

  $query = db_select('maestro_process', 'a');
  $query->fields('a', array('id'));
  $query->condition('a.tracking_id', $tracking_id, '=');
  $res = $query->execute()->fetchAll();
  foreach ($res as $rec) {
    //now delete all process variables
    db_delete('maestro_process_variables')
        ->condition('process_id', $rec->id)
        ->execute();

    //pick off all of the queue items now and use those to delete the queue_from entries
    $query = db_select('maestro_queue', 'a');
    $query->fields('a', array('id'));
    $query->condition('a.process_id', $rec->id, '=');
    $queueres = $query->execute()->fetchAll();
    foreach ($queueres as $queuerec) {
      //delete the queue_from records now
      db_delete('maestro_queue_from')
        ->condition('queue_id', $queuerec->id)
        ->execute();

      //delete the production assignments now
      db_delete('maestro_production_assignments')
        ->condition('task_id', $queuerec->id)
        ->execute();

      //now delete the queue record
      db_delete('maestro_queue')
        ->condition('id', $queuerec->id)
        ->execute();
    }

    //now for each process, delete the corresponding records.
    db_delete('maestro_process')
        ->condition('id', $rec->id)
        ->execute();
  }
  //and now we delete the project information
  db_delete('maestro_project_comments')
      ->condition('tracking_id', $tracking_id)
      ->execute();

  db_delete('maestro_project_content')
      ->condition('tracking_id', $tracking_id)
      ->execute();

  db_delete('maestro_projects')
      ->condition('id', $tracking_id)
      ->execute();

  return TRUE;
}


/* Begin Rules API Hooks and Actions */

/**
* Implementation of hook_rules_event_info()
*/
function maestro_rules_action_info() {
  return array(
  'maestro_launch_workflow' => array(
  'label' => t('Launch a  Maestro Workflow'),
  'group' => t('Maestro'),
  'named parameter' => TRUE,
  'parameter' => array(
  'template' => array(
  'type' => 'integer',
  'label' => 'Maestro Template NameName',
  'options list' => 'maestro_template_names',
  'restriction' => 'input',
  'description' => t('Specifies the name of the template to launch.'),
  ),
  'content_moderation' => array(
  'type' => 'boolean',
  'label' => 'Content Moderation Workflow',
  'restriction' => 'input',
  'description' => t('Check if this this a content moderation workflow and maestro should be made aware of the node that triggered this workflow.'),
  ),
  ),
  'base' => 'rules_action_launch_workflow',
  'provides' => array(
  'process_id' => array(
  'type' => 'integer',
  'label' => t('Process ID'),
  ),
  ),
  ),
  'maestro_complete_content_workflow' => array(
  'label' => t('Complete Maestro Content Workflow'),
  'group' => t('Maestro'),
  'named parameter' => TRUE,
  'parameter' => array(
  'complete_condition' => array(
  'type' => 'boolean',
  'default_value' => 1,
  'restriction' => 'input',
  'label' => 'Complete Process registered by maestro to the node that triggered this action',
  'description' => t('Maestro will track active content moderation workflows for each node.'),
  ),
  ),
  'base' => 'rules_action_complete_content_workflow',
  'provides' => array(
  'process_id' => array(
  'type' => 'integer',
  'label' => t('Process ID'),
  ),
  ),
  ),
  );

}

/* Return an array of options for the template names to configure the rules action */
function maestro_template_names() {
  $options = '';
  $res = db_query("SELECT id, template_name FROM {maestro_template}");
  foreach ($res as $rec) {
    $options[$rec->id] = $rec->template_name;
  }
  if (empty($options)) {
    $options[0] = 'No Templates Available';
  }
  return $options;
}

/**
* Action: Launch workflow defined by the action 'template' setting
* Create any process variables that match any defined workflow created variables
* Returns the new process id
*/
function rules_action_launch_workflow($args, $element) {
  $template = intval ($args['template']);
  $id = db_select('maestro_template')
      ->fields('maestro_template', array('id'))
      ->condition('id', $template, '=')
      ->execute()->fetchField();
  if ($template > 0 AND $id == $template) {
    $maestro = Maestro::createMaestroObject(1);
    $newprocess = $maestro->engine()->newProcess($template);
  } else {
    drupal_set_message("Error: Unable to launch the maestro workflow - Invalid Template $template");
    return FALSE;
  }

  if ($newprocess > 0) {

    /* Any rule created variables that have been defined will be turned into
    * maestro process variables if there is matching variable name
    */
    $variables = $args['state']->variables;
    foreach ($variables as $name => $value) {
      // Would like to support objects but getting a PHP Notice from the Entity API when saving the node object to a process variable
      if (!is_object($value)) {
        $maestro->engine()->setProcessVariable($name, $value, $newprocess);
      }
    }

    // Should we track the node for this workflow
    if ($args['content_moderation'] == 1 AND isset($variables['node']) ) {
      $node_wrapper = entity_metadata_wrapper('node', $variables['node']);
      if ($node_wrapper->status->value() == 1) {
        $status = MaestroContentStatusCodes::STATUS_PUBLISHED;
      } else {
        $status = 0;
      }
      $tracking_id = db_select('maestro_process')
      ->fields('maestro_process', array('tracking_id'))
      ->condition('id', $newprocess, '=')
      ->execute()->fetchField();

      $template_data_id = db_select('maestro_template_data')
      ->fields('maestro_template_data', array('id'))
      ->condition('task_class_name', 'MaestroTaskTypeContentType', '=')
      ->execute()->fetchField();

      db_insert('maestro_project_content')
      ->fields(array(
      'nid' => $node_wrapper->nid->value(),
      'tracking_id' => $tracking_id,
      'task_id' => 0,
      'content_type' => $node_wrapper->type->value(),
      'status'  => $status
      ))
      ->execute();

    }

    return array('process_id' => $newprocess);

  } else {
    drupal_set_message("Error: Unable to launch the maestro workflow");
    return FALSE;
  }

}


/**
* Action: Complete a content workflow
* Maestro will register the workflow instance to the associated node
* Using this information, we can complete that registered workflow
*/
function rules_action_complete_content_workflow($args, $element) {
  $variables = $args['state']->variables;
  if ($variables['node']) {
    $node_wrapper = entity_metadata_wrapper('node', $variables['node']);
    $nid = $node_wrapper->nid->value();
    $taskid = 0;
    $process_id = 0;
    if ($nid AND $nid > 0) {
      $registered_maestro_nodes = cache_get('registered_maestro_nodes');
      if ($registered_maestro_nodes AND is_array($registered_maestro_nodes)) {
        foreach ($registered_maestro_nodes->data as $registered_nid => $data) {
          if ($registered_nid == $nid) {
            $taskid = $data['taskid'];
            $process_id = maestro_getProcessId($taskid);
            break;
          }
        }
      }
      if ($taskid > 0 AND $process_id > 0) {
        $maestro = Maestro::createMaestroObject(1);
        $maestro->engine()->setProcessVariable('skip_publish', 1, $process_id);
        $maestro->engine()->completeTask($taskid, MaestroTaskStatusCodes::STATUS_COMPLETE);
        $maestro->engine()->archiveTask($taskid);
      }
    }
  }
}

/* End Rules API Hooks and Actions */

