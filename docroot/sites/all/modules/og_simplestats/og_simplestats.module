<?php

/**
 * @file
 * Organic Groups (OG) SimpleStats module file.
 */

/**
 * Implements hook_views_api().
 */
function og_simplestats_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'og_simplestats') . '/includes/views',
  );
}

/**
 * Implements hook_field_extra_fields().
 */
function og_simplestats_field_extra_fields() {
  $extra = array();

  foreach (og_get_all_group_bundle() as $entity_type => $bundles) {
    foreach ($bundles as $bundle => $value) {
      $extra[$entity_type][$bundle]['display'] = array(
        'og_simplestats_node_count' => array(
          'label' => t('Total Posts'),
          'description' => t('Display the count of nodes within the group.'),
          'weight' => 0,
          'visible' => FALSE,
          'ref_entity_type' => 'node',
        ),
        'og_simplestats_user_count' => array(
          'label' => t('Total Members'),
          'description' => t('Display the count of users within the group.'),
          'weight' => 0,
          'visible' => FALSE,
          'ref_entity_type' => 'user',
        ),
      );
    }
  }

  return $extra;
}

/**
 * Implements hook_entity_view().
 */
function og_simplestats_entity_view($entity, $type, $view_mode, $langcode) {
  $entity_wrapper = entity_metadata_wrapper($type, $entity);
  $bundle = $entity_wrapper->getBundle();

  // A content type that contains the OG_GROUP_FIELD may not necessarily be a
  // group. In some cases an entity being a group is optional for each item.
  if (!$entity_wrapper->__isset(OG_GROUP_FIELD) || $entity_wrapper->{OG_GROUP_FIELD}->value() != 1) {
    return;
  }

  // Make sure that our simplestats extra fields are configured to display on
  // this entity/bundle/view mode. We only care about the extra fields defined
  // in this module. Then loop through each extra field and add the stat to the
  // entity content.
  $extra_fields = og_simplestats_field_extra_fields();
  if (empty($extra_fields[$type][$bundle]['display'])) {
    return;
  }
  $field_display_settings = field_extra_fields_get_display($type, $bundle, $view_mode);
  foreach ($extra_fields[$type][$bundle]['display'] as $field_name => $extra_field) {
    if (!isset($field_display_settings[$field_name]) || !isset($field_display_settings[$field_name]['visible']) || !$field_display_settings[$field_name]['visible']) {
      continue;
    }

    // Grab the count and render it like an integer field.
    $count = og_simplestats_get_stats($entity_wrapper->getIdentifier(), $extra_field['ref_entity_type']);
    $entity->content[$field_name] = array(
      '#theme' => 'field',
      '#label_display' => 'inline',
      '#title' => $extra_field['label'],
      '#field_name' => $field_name,
      '#field_type' => 'number_integer',
      '#view_mode' => $view_mode,
      '#language' => $langcode,
      '#entity_type' => $type,
      '#bundle' => $bundle,
      '#items' => array(
        array('value' => $count),
      ),
      '0' => array('#markup' => $count),
      'object' => $entity,
    );
  }
}

/**
 * Get the simplestats from the og_membership table.
 *
 * The og_membership table contains data about the various membership types.
 * This includes what content is posted to a group and what users are a member
 * of a group. A simple query can gather the count of these within a group.
 *
 * Comments do require an additional join to the node_comment_statistics table.
 *
 * All statistics are queried and static cached. This allows for reduced queries
 * when displaying in a View. This is also a simple query against a single table
 * so even single requests should perform ok.
 *
 * @param  integer $gid
 *   (optional) The Group ID. This is typically the node ID, however if another
 *   entity is used as a group it would be that entities ID. Defaults to 0 to
 *   retrieve all group counts.
 * @param  string  $entity_type
 *   (optional) The entity_type of the entity referencing the group. This is
 *   typically 'node' for content and 'user' for group members. Defaults to
 *   'node'.
 * @param  string  $membership_type
 *   (optional) The membership type (bundle) for the og_membership entity. This
 *   allows counts to be queried for custom membership types that may be used in
 *   a site like Drupal Commons. Defaults to 'og_membership_type_default'.
 * @param  boolean $reload
 *   (optional) Force the data to be reloaded. Defaults to FALSE.
 *
 * @return array/int
 *   If the $gid is provided then the integer value (count) is returned,
 *   otherwise the an array of integers (keyed by $gid) is returned.
 *
 * @todo add ability to look up comment statistics. requires join to
 *   node_comment_statistics table.
 */
function og_simplestats_get_stats($gid = 0, $entity_type = 'node', $membership_type = 'og_membership_type_default', $reload = FALSE) {
  $simplestats = &drupal_static(__FUNCTION__);

  // Load if we don't have it static cached.
  if (!isset($simplestats)
    || !isset($simplestats[$membership_type])
    || !isset($simplestats[$membership_type][$entity_type])
    || ($gid !== 0 && !isset($simplestats[$membership_type][$entity_type][$gid]))) {
    $query = 'SELECT ogm.gid, count(entity_type) as count FROM og_membership ogm WHERE ogm.entity_type = :entity_type AND ogm.type = :membership_type AND ogm.state = :state GROUP BY ogm.gid ORDER BY ogm.gid';
    $simplestats[$membership_type][$entity_type] = db_query($query, array(':entity_type' => $entity_type, ':membership_type' => $membership_type, ':state' => OG_STATE_ACTIVE))->fetchAllKeyed();
  }

  // Get all statistics.
  if ($gid === 0) {
    return $simplestats[$membership_type][$entity_type];
  }
  // Get statistics for a single group. Return 0 if none found.
  else {
    return !empty($simplestats[$membership_type][$entity_type][$gid]) ? $simplestats[$membership_type][$entity_type][$gid] : 0;
  }
}
