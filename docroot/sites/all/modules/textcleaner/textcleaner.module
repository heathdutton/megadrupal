<?php

/**
 * @file
 * Provide basic functions to TextCleaner.
 */

/**
 * Implementation of hook_menu()
 */

function textcleaner_menu() {
	$items = array();
	
	$items['admin/config/content/textcleaner'] = array(
    'title' => 'TextCleaner',
		'description' => 'Configuration options for TextCleaner.',
		'type' => MENU_NORMAL_ITEM,
		'page callback' => 'drupal_get_form',
		'page arguments' => array('textcleaner_admin_settings_form'),
		'access arguments' => array('administer site configuration'),
		'file' => 'textcleaner.admin.inc',
  );
	
  $items['admin/config/content/textcleaner/list'] = array(
    'title' => 'TextCleaner',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access arguments' => array('administer site configuration'),
  	'weight' => -15,
  );
	
	return $items;
}

/**
 * Implementation of hook_node_presave()
 */

function textcleaner_node_presave($node) {
	textcleaner_clean_input($node);
}

/**
 * Implementation of hook_taxonomy_term_presave()
 */

function textcleaner_taxonomy_term_presave($term) {
	textcleaner_clean_input($term);
}

/**
 * Loop fields on an object & pass body/text fields potentially containing HTML to textcleaner_strip.
 * 
 * @param object $object
 *		The object containing fields, such as a node or taxonomy term.
 * @return object $object
 *		The object is returned after cleaning text fields.
 */

function textcleaner_clean_input($object) {	
	$textcleaner_fields = variable_get('textcleaner_fields', '');
	
	foreach ($object as $field => $value) {
		$field_info = field_info_field($field);
		if ($field_info && in_array($field_info['type'], $textcleaner_fields)) {
			foreach ($object->{$field} as $language => $text) {				
				$object->{$field}[$language][0]['value'] =  textcleaner_strip($text[0]['value']);
			}
		}
	}

	return $object;
}

/**
 * Clean a string value of empty HTML tags.
 * 
 * @param string $string
 *		The input string.
 * @return string $string
 *		The cleaned result.
 */

function textcleaner_strip($string) {
	$document = new DOMDocument();
	$document->loadHTML($string);
	$nodes = $document->getElementsByTagname('*');
	$elementsToRemove = array();
	
	foreach ($nodes as $element) {
		$element->normalize();
		if (trim($element->textContent, "\xc2\xa0 \n \t ") == '') {
			$elementsToRemove[] = $element;
		}
	}

	foreach($elementsToRemove as $element) {
		$element->parentNode->removeChild($element);
	}

	$nodes = $document->getElementsByTagname('body')->item(0);
	$child_nodes = $nodes->childNodes;

	foreach ($child_nodes as $element) {
		$clean_string .= trim($element->C14N());
	}
	
	return $clean_string;
}