<?php

/**
 * @file
 * Module file for Delete comment.
 */

/**
 * Implements hook_menu().
 */
function bulk_comment_delete_menu() {
  $items['admin/content/comment-delete'] = array(
    'title' => 'Comment Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bulk_comment_delete_content_form'),
    'access arguments' => array('administer bulk comment delete'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function bulk_comment_delete_permission() {
  $permissions['administer bulk comment delete'] = array(
    'title' => t('Administer Bulk Comment Delete'),
  );
  return $permissions;
}

/**
 * Implements custom form.
 */
function bulk_comment_delete_content_form($form, &$form_state) {
  $query = db_select('comment', 'comment')
      ->fields('node', array('type'))
      ->groupBy('node.type');
  $query->addExpression('COUNT(comment.cid)', 'cont');
  $query->leftJoin('node', 'node', 'node.nid = comment.nid');
  $results = $query->execute();
  while ($record = $results->fetchAssoc()) {
    $type = $record['type'];
    $content_type[$type] = $record['type'] . ' (' . $record['cont'] . ')';
  }

  if (!isset($form_state['storage']['confirm'])) {
    if (isset($content_type)) {
      $form = array();
      $form['contypes'] = array(
        '#type' => 'checkboxes',
        '#options' => $content_type,
        '#title' => t('Delete comments according content type.'),
        '#required' => TRUE,
      );
      $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Delete'),
      );
    }
    else {
      $form = array();
      $form['contact_information'] = array(
        '#markup' => t('No comment available.'),
      );
    }
    return $form;
  }
  else {
    foreach ($form_state['values']['contypes'] as $val) {
      if ($val != '') {
        $content_val[] = check_plain($val);
      }
    }
    $content = '<h4>' . t('Do you want to remove commet of below content type.') . '</h4><p>' . theme('item_list', $content_val) . '<p>';
    $form['intro'] = array(
      '#markup' => $content,
      '#prefix' => '<div class= "commnet-delete">',
      '#suffix' => '</div>',
    );
    $message = t('Are you sure you want to delete?');
    $caption = t('This action cannot be undone.');
    return confirm_form($form, $message, 'admin/content/comment-delete', $caption, t('Delete'));
  }
}

/**
 * Implements hook_form_submit().
 */
function bulk_comment_delete_content_form_submit($form, &$form_state) {
  if (!isset($form_state['storage']['confirm'])) {
    $form_state['storage']['confirm'] = TRUE;
    $form_state['storage']['values'] = $form_state['values'];
    $form_state['rebuild'] = TRUE;
  }
  else {
    foreach ($form_state['storage']['values']['contypes'] as $val) {
      $query = db_select('comment', 'comment')
          ->fields('comment', array('cid'))
          ->fields('node', array('type'))
          ->condition('node.type', $val, '=');
      $query->leftJoin('node', 'node', 'node.nid = comment.nid');
      $results = $query->execute();
      while ($record = $results->fetchAssoc()) {
        $operations[] = array('_bulk_comment_delete_process_bulk_comment_delete', array($record['cid']));
      }
    }
    $batch = array(
      'title' => t('Batch operation process'),
      'operations' => $operations,
      'finished' => '_bulk_comment_delete_batch_finished',
      'init_message' => t('Initializing...'),
      'progress_message' => t('Opertation @current out of @total.'),
      'error_message' => t('Found some error here.'),
    );
    batch_set($batch);
  }
}

/**
 * Batch Operation Callback.
 *
 * @param int $arg
 *   Pass $arg the comment cid.
 */
function _bulk_comment_delete_process_bulk_comment_delete($arg, &$context) {
  comment_delete($arg);
  $context['results'][] = $arg;
}

/**
 * Batch finish function.
 */
function _bulk_comment_delete_batch_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message(t('@count Comment  Deleted.', array('@count' => count($results))));
  }
  else {
    $error_operation = reset($operations);
    drupal_set_message(t('An error occurred while processing @operation with arguments : @args', array(
      '@operation' => $error_operation[0],
      '@args' => print_r($error_operation[0], TRUE),
    )));
  }
}
