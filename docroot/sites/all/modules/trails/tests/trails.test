<?php
/**
 * @file
 * Test suite for Trails.
 */

/**
 * API tests.
 */
class TrailsAPITestCase extends DrupalUnitTestCase {
  /**
   * Gets test information.
   */
  public static function getInfo() {
    return array(
      'name' => 'API tests',
      'description' => 'Test the basic Trails API.',
      'group' => 'Trails',
    );
  }

  /**
   * Loads module.
   */
  protected function setUp() {
    parent::setUp();
    drupal_load('module', 'trails');
    // Ensure Rules is not enabled.
    $module_list = module_list();
    if (isset($module_list['rules'])) {
      unset($module_list['rules']);
      module_list(TRUE, FALSE, FALSE, $module_list);
    }
  }

  /**
   * Tests core module functions.
   */
  public function testCoreFunctions() {
    // Test default trail.
    $trail = trails_get_trail();
    $this->assertIdentical($trail, array(), 'Default trail is empty.');

    // Test setting an arbitrary trail.
    trails_set_trail($test_trail = array(
      $test_crumb = array(
        'title' => 'Test',
        'path' => 'test',
      ),
    ));
    $trail = trails_get_trail();
    $this->assertIdentical($trail, $test_trail, 'Trail can be set.');

    // Unset trail.
    trails_set_trail(array());
    $this->assertIdentical(trails_get_trail(), array(), 'Trail can be cleared.');

    // Add test trail.
    $test_crumb2 = array(
      'title' => 'Test2',
      'path' => 'test2',
    );
    trails_add_trail($test_trail);
    $this->assertIdentical(trails_get_trail(), $test_trail, 'Trail can be added.');
    trails_add_trail(array($test_crumb, $test_crumb2), TRUE);
    $this->assertIdentical(trails_get_trail(), array($test_crumb, $test_crumb2, $test_crumb), 'Trail can be prepended.');
    trails_set_trail(array());

    // Add individual crumbs.
    trails_add_crumb($test_crumb);
    $this->assertIdentical(trails_get_trail(), $test_trail, 'Crumb can be added.');
    trails_add_crumb($test_crumb2, TRUE);
    $this->assertIdentical(trails_get_trail(), array($test_crumb2, $test_crumb), 'Crumb can be prepended.');
  }
}

/**
 * Utility tests.
 */
class TrailsUtilityTestCase extends DrupalWebTestCase {
  /**
   * Gets test information.
   */
  public static function getInfo() {
    return array(
      'name' => 'Utility tests',
      'description' => 'Test Trails utilities.',
      'group' => 'Trails',
    );
  }

  /**
   * Sets up tests.
   */
  protected function setUp() {
    parent::setUp('trails', 'trails_test');
  }

  /**
   * Tests breadcrumb.
   */
  public function testBreadcrumb() {
    // Prepare trails and breadcrumbs.
    $trail = array(
      array('title' => 'Test', 'path' => 'test'),
      array('title' => 'Test2', 'path' => 'test2'),
    );
    $expected_breadcrumb = array(
      '<a href="' . url('test') . '">Test</a>',
      '<a href="' . url('test2') . '">Test2</a>',
    );
    $full_trail = array(
      array('title' => 'Home', 'path' => '<front>'),
      array('title' => 'Test', 'path' => 'test'),
      array('title' => 'Test2', 'path' => 'test2'),
    );
    $expected_full_breadcrumb = array(
      '<a href="' . url() . '">Home</a>',
      '<a href="' . url('test') . '">Test</a>',
      '<a href="' . url('test2') . '">Test2</a>',
    );

    // Prevent links from being themed.
    variable_set('theme_links', FALSE);

    // Prevent home link from being rendered with 'active' class.
    // Set dummy item.
    menu_set_active_item('trails-test');

    // Build breadcrumb.
    $breadcrumb = trails_build_breadcrumb($full_trail);
    $this->assertIdentical($breadcrumb, $expected_full_breadcrumb, 'Breadcrumb is built from a given trail.');

    // Set trail as breadcrumb.
    trails_set_breadcrumb($trail);
    $breadcrumb = drupal_get_breadcrumb();
    $this->assertIdentical($breadcrumb, $expected_breadcrumb, 'Breadcrumb is set from trail.');
    trails_set_trail($trail);
    trails_set_breadcrumb();
    $breadcrumb = drupal_get_breadcrumb();
    $this->assertIdentical($breadcrumb, $expected_breadcrumb, 'Breadcrumb is set from currently applied trail.');

    // Emulate page preprocess.
    $variables = array();
    trails_preprocess_page($variables);
    $breadcrumb = drupal_get_breadcrumb();
    $this->assertIdentical($breadcrumb, $expected_full_breadcrumb, 'Home is prepended to breadcrumb.');

    // Emulate page preprocess, with trails_breadcrumb_home set to FALSE.
    variable_set('trails_breadcrumb_home', FALSE);
    trails_preprocess_page($variables);
    $breadcrumb = drupal_get_breadcrumb();
    $this->assertIdentical($breadcrumb, $expected_breadcrumb, 'Home is prevented from being prepended to breadcrumb.');

    // Emulate page preprocess, with trails_breadcrumb set to FALSE.
    variable_set('trails_breadcrumb', FALSE);
    drupal_set_breadcrumb($none_breadcrumb = array('<a href="/">None</a>'));
    trails_preprocess_page($variables);
    $breadcrumb = drupal_get_breadcrumb();
    $this->assertIdentical($breadcrumb, $none_breadcrumb, 'Trails is prevented from setting breadcrumb.');
  }

  /**
   * Tests building trail from menu active trail.
   */
  public function testMenuTrail() {
    // Test building from an empty trail.
    $trail = trails_get_menu_trail('navigation');
    $this->assertIdentical($trail, array(), 'No trail is built from an empty menu path.');

    // Set path and check menu trail.
    $this->drupalGet('trails-test-page');
    $expected_text = 'trails:a:2:{i:0;a:2:{s:5:"title";s:9:"Test menu";s:4:"path";s:11:"trails-test";}i:1;a:2:{s:5:"title";s:14:"Test menu item";s:4:"path";s:16:"trails-test/item";}}';
    $this->assertText($expected_text, 'Trail is built from the active path of a menu.');
  }
}
