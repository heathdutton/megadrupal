<?php
/**
 * @file
 * Trails architecture and implementation.
 */

/**
 * Implements hook_permission().
 */
function trails_permission() {
  return array(
    'administer trails' => array(
      'title' => t('Administer Trails'),
      'description' => t('Configure the behavior of Trails for breadcrumbs.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function trails_menu() {
  $items = array();

  $items['admin/config/system/trails'] = array(
    'title' => 'Trails',
    'description' => 'Configure extended page trail and breadcrumb settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('trails_admin_settings'),
    'access arguments' => array('administer trails'),
    'file' => 'trails.admin.inc',
  );

  return $items;
}

/**
 * Gets currently applied trail.
 */
function trails_get_trail() {
  return drupal_static('trails_set_trail', array());
}

/**
 * Applies the given trail.
 */
function trails_set_trail(array $trail) {
  $current_trail = &drupal_static(__FUNCTION__, array());
  $current_trail = $trail;
}

/**
 * Adds a (partial) trail.
 *
 * @param $trail
 *   List of crumbs to add.
 * @param $prepend
 *   If TRUE, merges the given trail at the beginning of the current trail.
 */
function trails_add_trail(array $trail, $prepend = FALSE) {
  // Prepare trail operands.
  $current_trail = trails_get_trail();
  // Add trail.
  $new_trail = $prepend ? array_merge($trail, $current_trail) : array_merge($current_trail, $trail);
  trails_set_trail($new_trail);
}

/**
 * Adds an individual crumb to the current trail.
 *
 * @param $crumb
 *   Crumb to add to trail. A crumb should be an array for use with l(),
 *   containing the following values.
 *   - title: Sanitized text to display for the crumb link.
 *   - path: (Optional) Internal path or external URL being linked to.
 *   - options: (Optional) An array of extra options to pass through to l().
 * @param $prepend
 *   If TRUE, adds the crumb at the beginning of the current trail.
 */
function trails_add_crumb($crumb, $prepend = FALSE) {
  trails_add_trail(array($crumb), $prepend);
}

/**
 * Sets Drupal breadcrumb using the given trail or the current trail.
 *
 * @param $trail
 *   An array of crumbs. See trails_add_crumb() for details about a crumb.
 */
function trails_set_breadcrumb($trail = NULL) {
  // Use current trails.
  if (!isset($trail)) {
    $trail = trails_get_trail();
  }
  // Build breadcrumb if not empty.
  if (!empty($trail)) {
    $breadcrumb = trails_build_breadcrumb($trail);
    drupal_set_breadcrumb($breadcrumb);
  }
}

/**
 * Builds a Drupal breadcrumb from a trail.
 */
function trails_build_breadcrumb(array $trail) {
  $breadcrumb = array();
  foreach ($trail as $crumb) {
    $crumb += array(
      'title' => '',
      'path' => NULL,
      'options' => array(),
    );
    // Add crumb as plain text if path is given.
    if (!isset($crumb['path'])) {
      $breadcrumb[] = $crumb['title'];
    }
    // Add crumb as link if path is given.
    elseif ($crumb['path'] == '<front>' || valid_url($crumb['path'])) {
      $breadcrumb[] = l($crumb['title'], $crumb['path'], $crumb['options']);
    }
  }
  return $breadcrumb;
}

/**
 * Implements hook_preprocess_page().
 */
function trails_preprocess_page(&$variables) {
  // Trigger Rules event.
  if (module_exists('rules')) {
    rules_invoke_event('trails_preprocess_page');
  }

  // Set trail as breadcrumb.
  if (variable_get('trails_breadcrumb', TRUE) && $trail = trails_get_trail()) {
    if (variable_get('trails_breadcrumb_home', TRUE)) {
      // Prepend "Home".
      $crumb = array(
        'title' => t('Home'),
        'path' => '<front>',
      );
      array_unshift($trail, $crumb);
    }
    trails_set_breadcrumb($trail);
  }
}

/**
 * Gets the active trail for a particular menu.
 *
 * @param $menu_name
 *   Name of the menu.
 * @return array
 *   Trail of breadcrumbs.
 */
function trails_get_menu_trail($menu_name) {
  $trails = &drupal_static(__FUNCTION__, array());

  if (!isset($trails[$menu_name])) {
    $trails[$menu_name] = array();

    // Build menu trail (borrowed from menu_set_active_trail()).
    $tree = menu_tree_page_data($menu_name, NULL, TRUE);
    while (list(, $item) = each($tree)) {
      $link = $item['link'];
      if ($link['in_active_trail']) {
        // Add the link to the trail, unless it links to its parent.
        if (!($link['type'] & MENU_LINKS_TO_PARENT)) {
          if (strpos($link['href'], '%') !== FALSE) {
            _menu_link_translate($link, TRUE);
          }
          if ($link['access']) {
            $trails[$menu_name][] = array(
              'title' => $link['title'],
              'path' => $link['href'],
            );
          }
        }
        $tree = $item['below'] ? $item['below'] : array();
      }
    }
    // Remove current path from trail.
    $end = end($trails[$menu_name]);
    if ($end['path'] == current_path()) {
      array_pop($trails[$menu_name]);
    }
  }

  return $trails[$menu_name];
}
