<?php

/**
 * @file
 * Implements Volacci Automatr (TM) for Drupal.
 */

/**
 * The default pages to exclude from implementation.
 */
define('AUTOMATR_IMPLEMENTATION_PAGES_DEFAULT_PAGES', "admin\nadmin/*\nbatch");

/**
 * Implement on only the listed pages.
 */
define('AUTOMATR_IMPLEMENTATION_PAGES_LISTED', 1);

/**
 * Implement on all pages except those listed.
 */
define('AUTOMATR_IMPLEMENTATION_PAGES_NOT_LISTED', 0);

/**
 * Implement if the associated PHP code returns TRUE.
 */
define('AUTOMATR_IMPLEMENTATION_PAGES_PHP', 2);

/**
 * The Volacci Automatr (TM) support website.
 */
define('AUTOMATR_SUPPORT_WEBSITE', 'http://support.volacciapp.com/');

/**
 * The Volacci Automatr (TM) website URL.
 */
define('AUTOMATR_WEBSITE', 'http://login.volacciapp.com/');

/**
 * The Volacci Automatr (TM) website user account page URL.
 */
define('AUTOMATR_WEBSITE_ACCOUNT_PAGE', 'https://a.volacciapp.com/data/public/User/account');

/**
 * Adds implementation code to the page.
 *
 * @param array $page
 *   The $page array from hook_page_build().
 *
 * @see automatr_page_build()
 */
function automatr_add_implementation_code(&$page) {
  // The page_bottom region may not be available in all themes, but the content
  // region always will be.
  $target_region = (isset($page['page_bottom'])) ? 'page_bottom' : 'content';

  $pid = automatr_get_pid_from_implementation_code(variable_get('automatr_implementation_code', ''));
  $page[$target_region]['volaccianma_implementation_code']['#markup'] = "
    <script id=\"__maSrc\" type=\"text/javascript\" data-pid=\"{$pid}\">
      (function () {
        var d=document,t='script',c=d.createElement(t),s=(d.URL.indexOf('https:')==0?'s':''),p;
        c.type = 'text/java'+t;
        c.src = 'http'+s+'://'+s+'c.cdnma.com/apps/capture.js';
        p=d.getElementsByTagName(t)[0];p.parentNode.insertBefore(c,p);
      }());
    </script>
  ";
}

/**
 * Gets a PID from implementation code.
 *
 * The PID is extracted from the "data-pid" attribute of the "script" tag.
 *
 * @param string $implementation_code
 *   The implementation code to extract the PID from.
 *
 * @return int
 *   The PID from the implementation code, or 0 if none can be found.
 */
function automatr_get_pid_from_implementation_code($implementation_code) {
  $matches = array();
  if (preg_match('/<script\s[^>]*data-pid="(\d+)"[^>]*>/', $implementation_code, $matches)) {
    $pid = $matches[1];
    return $pid;
  }
  return 0;
}

/**
 * Determines whether given implementation code is valid.
 *
 * The implementation code must contain a positive integer for a PID.
 *
 * @param string $implementation_code
 *   The implementation code to test.
 *
 * @return bool
 *   TRUE if the implementation code is valid, or FALSE if it is not.
 */
function automatr_is_valid_implementation_code($implementation_code) {
  return (bool) automatr_get_pid_from_implementation_code($implementation_code);
}

/**
 * Implements hook_menu().
 */
function automatr_menu() {
  $items = array();
  $items['admin/config/marketing'] = array(
    'title' => 'Marketing',
    'description' => 'Marketing tools and integrations',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'weight' => -7,
    'position' => 'left',
  );
  $items['admin/config/marketing/automatr'] = array(
    'title' => 'Volacci Automatr',
    'description' => 'Configure Volacci Automatr&trade; implementation behavior.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('automatr_admin_settings_form'),
    'access arguments' => array('administer automatr'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'automatr.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_page_build().
 */
function automatr_page_build(&$page) {
  if (automatr_site_is_configured() && automatr_page_is_in_scope() && automatr_user_role_is_in_scope()) {
    automatr_add_implementation_code($page);
  }
}

/**
 * Determines whether the current page is in implementation scope.
 *
 * @return bool
 *   Returns TRUE if the current page is in scope, or FALSE if it is not.
 */
function automatr_page_is_in_scope() {
  // Match path if necessary.
  $pages = variable_get('automatr_implementation_pages_pages', AUTOMATR_IMPLEMENTATION_PAGES_DEFAULT_PAGES);
  if (!empty($pages)) {
    $type = variable_get('automatr_implementation_pages_type', AUTOMATR_IMPLEMENTATION_PAGES_NOT_LISTED);
    if ($type < AUTOMATR_IMPLEMENTATION_PAGES_PHP) {
      // Convert path to lowercase. This allows comparison of the same path
      // with different case (e.g. /Page, /page, /PAGE).
      $pages = drupal_strtolower($pages);
      // Convert the Drupal path to lowercase.
      $current_path = current_path();
      $path = drupal_strtolower(drupal_get_path_alias($current_path));
      // Compare the lowercase internal and lowercase path alias (if any).
      $page_match = drupal_match_path($path, $pages);
      if ($path != $current_path) {
        $page_match = $page_match || drupal_match_path($current_path, $pages);
      }
      // When $type has a value of 0
      // (AUTOMATR_IMPLEMENTATION_PAGES_NOT_LISTED), the implementation code
      // is added to all pages except those listed in $pages. When it has a
      // value of 1 (AUTOMATR_IMPLEMENTATION_PAGES_LISTED), it is added only
      // to those pages listed in $pages.
      $page_match = !($type xor $page_match);
    }
    elseif (module_exists('php')) {
      $page_match = php_eval($pages);
    }
    else {
      $page_match = FALSE;
    }
  }
  else {
    $page_match = TRUE;
  }
  return $page_match;
}

/**
 * Implements hook_permission().
 */
function automatr_permission() {
  $perms = array();
  $perms['administer automatr'] = array(
    'title' => t('Administer Volacci Automatr&trade;'),
    'description' => t('Configure Volacci Automatr&trade; implementation behavior.'),
  );
  return $perms;
}

/**
 * Determines whether the site is properly configured for implementation.
 *
 * @return bool
 *   TRUE if the site is properly configured, or FALSE if it is not.
 */
function automatr_site_is_configured() {
  return automatr_is_valid_implementation_code(variable_get('automatr_implementation_code', ''));
}

/**
 * Determines whether the current user's role is in implementation scope.
 *
 * @return bool
 *   Returns TRUE if the current user's role is in scope, or FALSE if it is not.
 */
function automatr_user_role_is_in_scope() {
  global $user;

  $scope = array_values(variable_get('automatr_implementation_roles', array()));
  if (array_sum($scope)) {
    // One or more roles are selected.
    $user_roles = array_keys($user->roles);
    return (bool) array_intersect($user_roles, $scope);
  }
  else {
    // No roles are selected, so implementation code is added for all roles.
    return TRUE;
  }
}
