<?php

/**
 * @file
 * Tests the Drupal field widget for date endpoints.
 *
 * Based on the DateFieldBasic test class from the Date module.
 */

/**
 * Base class for creating a generic date field with date endpoint widget.
 */
abstract class DateEndpointFieldBasic extends DrupalWebTestCase {
  /**
   * A user object with escalated permissions.
   *
   * @var object
   */
  protected $privilegedUser;

  /**
   * Installs modules and creates content type.
   */
  protected function setUp() {
    // Load the date_api module.
    parent::setUp('field', 'field_ui', 'date_api', 'date', 'date_tools', 'date_endpoint');

    // Create and log in our privileged user.
    $this->privilegedUser = $this->drupalCreateUser(array(
      'administer content types',
      'administer nodes',
      'bypass node access',
      'administer date tools',
    ));
    $this->drupalLogin($this->privilegedUser);

    // Load the necessary files to create a content type.
    module_load_include('inc', 'node', 'content_types');
    module_load_include('inc', 'node', 'node.pages');
    module_load_include('inc', 'field', 'field.crud');
    module_load_include('inc', 'date', 'date_admin');

    // Add a content type and test that it was successful.
    $edit = array(
      'name' => 'Story',
      'type' => 'story',
    );

    $this->drupalPost('admin/structure/types/add', $edit, t('Save content type'));
    $this->assertText('The content type Story has been added.', 'Content type added.');

  }

  /**
   * Creates a date field from an array of settings values.
   *
   * All values have defaults, only need to specify values that need to be
   * different.
   */
  protected function createDateField($values = array()) {

    $field_name = 'field_test';
    $entity_type = 'node';
    $bundle = 'story';
    $label = 'Test';
    $field_type = 'datetime';
    $repeat = 0;
    $todate = 'optional';
    $widget_type = 'date_endpoint';
    $tz_handling = 'site';
    $granularity = array('year', 'month', 'day', 'hour', 'minute');
    $increment = 15;
    $default_value = 'now';
    $default_value2 = 'blank';
    $default_format = 'long';
    $cache_enabled = FALSE;
    $cache_count = 4;

    $year_intervals = 2;
    $month_intervals = 12;
    $week_intervals = 4;
    $day_intervals = 7;

    // Override any variable values that were passed in.
    foreach ($values as $variable => $value) {
      ${$variable} = $value;
    }

    $field = array(
      'field_name' => $field_name,
      'type' => $field_type,
      'cardinality' => !empty($repeat) ? FIELD_CARDINALITY_UNLIMITED : 1,
      'settings' => array(
        'granularity' => $granularity,
        'tz_handling' => $tz_handling,
        'timezone_db' => date_get_timezone_db($tz_handling),
        'repeat' => $repeat,
        'todate' => $todate,
        'cache_enabled' => $cache_enabled,
        'cache_count' => $cache_count,
      ),
    );
    $instance = array(
      'entity_type' => $entity_type,
      'field_name' => $field_name,
      'label' => $label,
      'bundle' => $bundle,
      // Move the date right below the title.
      'weight' => -4,
      'widget' => array(
        'type' => $widget_type,
        // Increment for minutes and seconds, can be 1, 5, 10, 15, or 30.
        'settings' => array(
          'increment' => $increment,
          'date_endpoint_year' => $year_intervals,
          'date_endpoint_month' => $month_intervals,
          'date_endpoint_week' => $week_intervals,
          'date_endpoint_day' => $day_intervals,

        ),
        'weight' => -4,
      ),
      'settings' => array(
        'default_value' => $default_value,
        'default_value2' => $default_value2,
      ),
    );

    $instance['display'] = array(
      'default' => array(
        'label' => 'above',
        'type' => 'date_default',
        'settings' => array(
          'format_type' => $default_format,
          'show_repeat_rule' => 'show',
          'multiple_number' => '',
          'multiple_from' => '',
          'multiple_to' => '',
          'fromto' => 'both',
        ),
        'module' => 'date',
        'weight' => 0 ,
      ),
      'teaser' => array(
        'label' => 'above',
        'type' => 'date_default',
        'weight' => 0,
        'settings' => array(
          'format_type' => $default_format,
          'show_repeat_rule' => 'show',
          'multiple_number' => '',
          'multiple_from' => '',
          'multiple_to' => '',
          'fromto' => 'both',
        ),
        'module' => 'date',
      ),
    );

    $field = field_create_field($field);
    $instance = field_create_instance($instance);

    field_info_cache_clear(TRUE);
    field_cache_clear(TRUE);

    // Look at how the field got configured.
    $this->drupalGet("admin/structure/types/manage/$bundle/fields/$field_name");
    $this->drupalGet("admin/structure/types/manage/$bundle/display");

  }

  /**
   * Deletes the date field.
   */
  protected function deleteDateField($label, $bundle = 'story', $bundle_name = 'Story') {
    $this->drupalGet("admin/structure/types/manage/$bundle/fields");
    $this->clickLink('delete');
    $this->drupalPost(NULL, NULL, t('Delete'));
    $this->assertText("The field $label has been deleted from the $bundle_name content type.", 'Removed date field.');
  }

}

class DateEndpointFieldTestCase extends DateEndpointFieldBasic {

  /**
   * Tell the Drupal testing system about this test.
   */
  public static function getInfo() {
    return array(
      'name' => 'Date Endpoint',
      'description' => 'Test date endpoint widget.',
      'group' => 'Date',
    );
  }

  /**
   * Test that the date field can be created and destroyed.
   */
  public function testField() {
    // Create a date field with simple values.
    $field_name = "field_test_date_endpoint";
    $label = 'Test';
    $field_options = array(
      'label' => $label,
      'widget_type' => 'date_endpoint',
      'field_name' => $field_name,
      'field_type' => 'datetime',
      'input_format' => 'm/d/Y - H:i',
    );
    $this->createDateField($field_options);
    $this->dateForm($field_name, 'datetime', 'date_endpoint');
    $this->deleteDateField($label);

  }

  /**
   * Test that the endpoint widget can actually save a value.
   */
  public function dateForm($field_name, $field_type, $todate = TRUE) {
    // Tests that date field functions properly.
    $edit = array();
    $edit['title'] = $this->randomName(8);

    $edit[$field_name . '[und][0][value]'] = 'D0';

    // Test that the specifed options are displayed correctly.
    $instance = field_info_instance('node', $field_name, 'story');
    $instance['display']['default']['settings']['format_type'] = 'short';
    field_update_instance($instance);
    $this->drupalPost('node/add/story', $edit, t('Save'));
    $this->assertText($edit['title'], "Node has been created");
  }
}
