<?php
/**
 * @file
 * This module provide a block, with links to OG admin tasks.
 */

/**
 * Implements hook_block_info().
 */
function og_admin_block_block_info() {
  $blocks = array();

  // Groups admin block.
  $blocks['group_admin'] = array(
    'info' => t('OG Admin Block'),
    'cache' => DRUPAL_CACHE_CUSTOM,
  );

  return $blocks;
}

/**
 * Implements hook_og_permission().
 */
function og_admin_block_og_permission() {
  return array(
    'view og admin block' => array(
      'title' => t('View OG Admin Block'),
      'description' => t('View OG Admin Block Menu'),
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function og_admin_block_form_node_type_form_alter(&$form, &$form_state) {

  $node_type = $form['#node_type']->type;

  $form['og']['og_admin_block'] = array(
    '#type' => 'fieldset',
    '#title' => t('OG Admin Block'),
    '#collapsible' => FALSE,
    '#weight' => '50',
    '#states' => array(
      'visible' => array(
        ':input[name="og_group_content_type"]' => array('checked' => TRUE),
      ),
    ),
  );

  $form['og']['og_admin_block']['og_admin_block_include'] = array(
    '#type' => 'checkbox',
    '#title' => t('Include content type in OG Admin Block'),
    '#default_value' => variable_get('og_admin_block_include_' . $node_type, 1),
  );

}

/**
 * Implements hook_block_view().
 */
function og_admin_block_block_view($delta) {
  global $user;

  $block = array(
    'subject' => NULL,
    'content' => NULL,
  );

  if ($delta != 'group_admin') {
    return NULL;
  }

  // Check we're on a group page.
  $context = og_context();
  if (empty($context)) {
    return NULL;
  }

  // This module only supports node og groups.
  if ($context['group_type'] != 'node') {
    return NULL;
  }

  // Check the user has access to view the admin block.
  if (!(og_user_access($context['group_type'], $context['gid'], 'view og admin block'))) {
    return NULL;
  }

  $cache_name = _og_admin_block_get_cache_name($context);

  if ($cache = cache_get($cache_name)) {
    $block = $cache->data;
  }
  else {

    // Get the group details.
    $group = entity_load_single($context['group_type'], $context['gid']);

    // Setup the render array.
    $block['subject'] = t('OG Admin Block');
    $block['content'] = array(
      '#theme_wrappers' => array('menu_tree__og_admin_block'),
    );

    $link_defaults = array(
      '#theme' => 'menu_link__og_admin_block',
      '#attributes' => array(),
      '#below' => array(),
      '#localized_options' => array('html' => TRUE),
    );

    // Add edit group link.
    if (og_user_access_entity('update group', $context['group_type'], $context['gid'])) {
      $block['content']['edit_group'] = $link_defaults + array(
        '#title' => t('Edit the Group'),
        '#href' => 'node/' . $group->nid . '/edit',
        '#weight' => 0,
      );
    }

    // Add manage members link.
    if (og_user_access_entity('approve and deny subscription', $context['group_type'], $context['gid'])) {
      $block['content']['manage_members'] = $link_defaults + array(
        '#title' => t('Manage members'),
        '#href' => 'group/node/' . $group->nid . '/admin/people',
        '#weight' => 5,
      );
    }

    // Add invite members link.
    if (og_user_access_entity('add user', $context['group_type'], $context['gid'])) {
      $block['content']['invite_new_member'] = $link_defaults + array(
        '#title' => t('Invite new member'),
        '#href' => 'group/node/' . $group->nid . '/admin/people/add-user',
        '#weight' => 10,
      );
    }

    // Add edit menu link.
    if (module_exists('og_menu') && og_user_access_entity('administer og menu', $context['group_type'], $context['gid'])) {
      $block['content']['manage_menu'] = $link_defaults + array(
        '#title' => t('Manage menus'),
        '#href' => 'group/node/' . $group->nid . '/admin/menus/menu-og-' . $group->nid,
        '#weight' => 15,
      );
    }

    // Add create content links.
    $content_bundles = og_get_all_group_content_bundle();
    if (!empty($content_bundles['node'])) {
      foreach ($content_bundles['node'] as $type => $name) {
        $perm = 'create ' . $type . ' content';
        if (variable_get('og_admin_block_include_' . $type, 1) == 1 && og_user_access('node', $context['gid'], $perm, $user)) {
          $type_url = str_replace('_', '-', $type);
          $title = t(
            'Add a @node_name',
            array(
              '@node_name' => $name,
              '@type' => $type_url,
            ));
          $block['content']['create_' . $type] = array(
            '#theme' => 'menu_link__og_admin_block',
            '#title' => $title,
            '#href' => 'node/add/' . $type_url,
            '#attributes' => array(),
            '#below' => array(),
            '#weight' => 25,
            '#localized_options' => array(
              'html' => TRUE,
              'query' => array('og_group_ref' => $context['gid']),
              'attributes' => array(
                'id' => 'add-' . str_replace('_', '-', $type),
                'title' => $title,
              ),
            )) + $link_defaults;
        }
      }
    }

    drupal_alter('og_admin_block', $block);

    cache_set($cache_name, $block, 'cache_block');

    // If there are no links do not display the block.
    if (empty($block['content'])) {
      return NULL;
    }

  }

  return $block;

}

/**
 * Get the og cache name for a given context.
 *
 * @param array $context
 *   The OG context to get the cache name for.
 *
 * @return string
 *   The og admin block cache name.
 */
function _og_admin_block_get_cache_name(array $context) {

  // Create the cache name.
  $cache_name = 'og_admin_block__';

  // Add the group entity type and id.
  $cache_name .= $context['group_type'] . '_' . $context['gid'] . '__';

  // Add the user's group role ids.
  global $user;
  $user_group_roles = og_get_user_roles($context['group_type'], $context['gid'], $user->uid);
  $user_group_roles_ids = array_keys($user_group_roles);
  sort($user_group_roles_ids);
  $user_group_roles_ids = implode('_', $user_group_roles_ids);
  $cache_name .= $user_group_roles_ids;

  return $cache_name;
}
