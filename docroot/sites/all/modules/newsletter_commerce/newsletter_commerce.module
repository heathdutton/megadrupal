<?php

/**
 * @file
 */

/**
 * Implements hook_form_FORM_ID_alter().
 */
function newsletter_commerce_form_newsletter_template_edit_alter(&$form, &$form_state, $form_id) {
  $form['token_help']['help']['#token_types'][] = 'commerce-product';
}

/**
 * Implements hook_newsletter_automated_token_params().
 */
function newsletter_commerce_newsletter_automated_token_params(&$token_params) {
  $node = $token_params['node'];
  $product_ids = newsletter_commerce_get_product_ids('node', $node->type, $node);

  if ($product_ids) {
    // We will only pass one product object for token_replace.
    $product = commerce_product_load(array_pop($product_ids));
    if ($product) {
      $token_params['commerce-product'] = $product;
    }
  }
}

/**
 * Extract product ids from an antity.
 *
 * @param $entity_type
 *   The entity type for which to return product ids.
 * @param $bundle_name
 *   The bundle name for which to return product ids.
 * @param $entity
 *   The entity containing the fields to be checked.
 *
 * @return
 *   If product ids exist in the node object
 *   then return them in an array, else boolean false.
 */
function newsletter_commerce_get_product_ids($entity_type, $bundle_name, $entity) {
  $instances = field_info_instances($entity_type, $bundle_name);
  foreach ($instances as $instance) {
    $field = field_info_field($instance['field_name']);
    if ($field['type'] == 'commerce_product_reference') {
      $items = field_get_items($entity_type, $entity, $field['field_name']);
      if ($items) {
        foreach ($items as $item) {
          $product_ids[] = $item['product_id'];
        }
      }
    }
  }
  return isset($product_ids) ? $product_ids : FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function newsletter_commerce_form_newsletter_configure_alter(&$form, &$form_state, $form_id) {
  $form['newsletter_commerce'] = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#title' => t('Newsletter commerce'),
  );
  $form['newsletter_commerce']['newsletter_commerce_checkout'] = $form['settings']['newsletter_auto_subscribe_new_users'];
  $form['newsletter_commerce']['newsletter_commerce_checkout']['#title'] = t('Provide a checkbox for customers to subscriber to the following lists');
  $form['newsletter_commerce']['newsletter_commerce_checkout']['#default_value'] = variable_get('newsletter_commerce_checkout', array());

  $form['newsletter_commerce']['newsletter_commerce_checkout_description'] = array(
    '#type' => 'textarea',
    '#title' => 'Checkbox description',
    '#default_value' => variable_get('newsletter_commerce_checkout_description', ''),
  );
}

/**
 * Implements hook_commerce_checkout_pane_info().
 */
function newsletter_commerce_commerce_checkout_pane_info() {
  $checkout_panes = array();

  $checkout_panes['newsletter_commerce_checkout'] = array(
    'title' => t('Subscribe to our newsletters'),
    'weight' => 10,
  );

  return $checkout_panes;
}

/**
 * Checkout pane checkout_form() callback.
 */
function newsletter_commerce_checkout_checkout_form($form, &$form_state, $checkout_pane, $order) {
  if (variable_get('newsletter_commerce_checkout', array())) {
    $element['newsletter_commerce'] = array(
      '#type' => 'checkbox',
      '#title' => t('Also subscribe me to your newsletter'),
      '#description' => filter_xss(variable_get('newsletter_commerce_checkout_description', '')),
    );
    return $element;
  }
}

/**
 * Checkout pane checkout_form_submit() callback.
 */
function newsletter_commerce_checkout_checkout_form_submit($form, &$form_state, $checkout_pane, $order) {
  $checked = $form_state['values']['newsletter_commerce_checkout']['newsletter_commerce'];
  $lists = variable_get('newsletter_commerce_checkout', array());
  $profile = $form_state['values']['customer_profile_billing']['customer_profile'];

  if ($checked && $lists && !newsletter_is_subscribed($order->mail)) {
    $subscriber = new stdClass();
    $subscriber->email = $order->mail;
    $subscriber->uid = $order->uid;

    if(isset($profile->commerce_customer_address[LANGUAGE_NONE][0]['name_line'])) {
      $name = $profile->commerce_customer_address[LANGUAGE_NONE][0]['name_line'];
      $full_name = explode(' ', $name);
      if (count($full_name) == '2') {
        $subscriber->firstname = $full_name[0];
        $subscriber->lastname = $full_name[1];
      }
      else {
        $subscriber->first_name = $name;
      }
    }

    foreach ($lists as $list) {
      $subscriber->field_newsletter_list[LANGUAGE_NONE][] = array('target_id' => $list);
    }
    entity_get_controller('newsletter_subscriber')->save($subscriber, variable_get('newsletter_send_confirm'));
  }
}
