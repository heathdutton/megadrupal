<?php

/**
 * Implements hook_menu().
 */
function panels_node_template_menu() {
  // Safety: go away if CTools is not at an appropriate version.
  if (!defined('PANELS_REQUIRED_CTOOLS_API') || !module_invoke('ctools', 'api_version', PANELS_REQUIRED_CTOOLS_API)) {
    return array();
  }

  $items['node/%node/panel_template_set'] = array(
    'title' => 'Set from template',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('panels_node_template_set_display_from_template', 1),
    'access callback' => 'panels_node_edit_node',
    'access arguments' => array(1),
  );

  $items['node/%node/panel_template_reset'] = array(
    'title' => 'Reset to template',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('panels_node_template_reset_display_to_template', 1),
    'access callback' => 'panels_node_edit_node',
    'access arguments' => array(1),
  );

  return $items;
}

/**
 * Checks whether node has panel content.
 */
function panels_node_template_is_overridden($node, $reset = FALSE) {
  // Check panel display.
  if ($node->type == 'panel') {
    $did = $node->panels_node['did'];
    $cid = "panels_node_template_display_overridden:$did";
    if (!$reset && $cache = cache_get($cid)) {
      return $cache->data;
    }
    else {
      $display = panels_load_display($did);
      $overridden = !empty($display->content);
      cache_set($cid, $overridden);
      return $overridden;
    }
  }
  return FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function panels_node_template_form_panels_choose_layout_alter(&$form, &$form_state) {
  _panels_node_template_form_add_template_actions($form);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function panels_node_template_form_panels_edit_display_form_alter(&$form, &$form_state) {
  _panels_node_template_form_add_template_actions($form);
}

/**
 * Adds template actions to a panel form.
 */
function _panels_node_template_form_add_template_actions(&$form) {
  $form['template_actions'] = array(
    '#type' => 'fieldset',
    '#title' => t('Default template'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#weight' => -10,
  );
  $form['template_actions']['set'] = array(
    '#type' => 'submit',
    '#value' => t('Set from template'),
    '#limit_validation_errors' => array(),
    '#validate' => array('panels_node_template_action_submit'),
    '#template_action' => 'set',
  );
  $form['template_actions']['reset'] = array(
    '#type' => 'submit',
    '#value' => t('Reset to template'),
    '#limit_validation_errors' => array(),
    '#validate' => array('panels_node_template_action_submit'),
    '#template_action' => 'reset',
  );
}

/**
 * Directs the user to an action.
 */
function panels_node_template_action_submit($form, &$form_state) {
  $button = $form_state['triggering_element'];
  if (!empty($button['#template_action'])) {
    drupal_goto('node/' . arg(1) . '/panel_template_' . $button['#template_action']);
  }
}

/**
 * Confirm form for adding new template.
 */
function panels_node_template_set_display_from_template($form, &$form_state, $node) {
  $form_state['node'] = $node;
  return confirm_form($form, t('Set display from template'), 'node/' . $node->nid, t('Are you sure you want to set display from template? This will replace configuration on this panel with the template configuration.'));
}

/**
 * Sets display configuration from template.
 */
function panels_node_template_set_display_from_template_submit($form, &$form_state) {
  $node = $form_state['node'];
  panels_node_template_reset_display($node, TRUE);
  drupal_set_message(t('The panel has been set from template.'));
  $form_state['redirect'] = 'node/' . $node->nid;
}

/**
 * Confirm form for resetting display.
 */
function panels_node_template_reset_display_to_template($form, &$form_state, $node) {
  $form_state['node'] = $node;
  return confirm_form($form, t('Reset display'), 'node/' . $node->nid, t('Are you sure you want to reset display to template? This will remove all panes from this panel.'));
}

/**
 * Resets display configuration.
 */
function panels_node_template_reset_display_to_template_submit($form, &$form_state) {
  $node = $form_state['node'];
  panels_node_template_reset_display($node);
  drupal_set_message(t('The panel has been reset to template.'));
  $form_state['redirect'] = 'node/' . $node->nid;
}

/**
 * Resets panel node configuration.
 */
function panels_node_template_reset_display($node, $use_template = FALSE) {
  $display = panels_load_display($node->panels_node['did']);
  $display->context = array();
  $display->layout = 'onecol';
  $display->layout_settings = array();
  $display->panel_settings = array();
  $display->panels = array();
  $display->content = array();

  if ($use_template) {
    ctools_include('export');
    $handlers = ctools_export_load_object('page_manager_handlers');
    if (!empty($handlers['panels_node_default'])) {
      $handler = $handlers['panels_node_default'];
      if (isset($handler->conf['display'])) {
        $source_display = $handler->conf['display'];
      }
      elseif (!empty($handler->conf['did'])) {
        $source_display = panels_load_display($handler->conf['did']);
      }

      if (isset($source_display)) {
        $display->args = $source_display->args;
        $display->incoming_content = NULL;
        $display->context = $source_display->context;
        $display->renderer = $source_display->renderer;
        $display->layout = $source_display->layout;
        $display->layout_settings = $source_display->layout_settings;
        $display->panel_settings = $source_display->panel_settings;

        foreach ($source_display->content as $pane) {
          $pane_new = clone $pane;
          unset($pane_new->did);
          if (!empty($pane_new->configuration['context']) && is_array($pane_new->configuration['context'])) {
            foreach ($pane_new->configuration['context'] as $key => $context) {
              if ($context == 'argument_entity_id:node_1') {
                $pane_new->configuration['context'][$key] = 'panel-node';
              }
            }
          }
          $display->add_pane($pane_new);
          unset($pane_new);
        }
      }
    }
  }

  panels_save_display($display);
}

/**
 * Implements hook_panels_display_save().
 */
function panels_node_template_panels_display_save($display) {
  $did = $display->did;
  cache_clear_all('panels_node_template_display_overridden:' . $did, 'cache');
}

/**
 * Implements hook_panels_delete_display().
 */
function panels_node_template_panels_delete_display($did) {
  cache_clear_all('panels_node_template_display_overridden:' . $did, 'cache');
}

/**
 * Implements hook_ctools_plugin_api().
 */
function panels_node_template_ctools_plugin_api($module = NULL, $api = NULL) {
  if ($module == "page_manager" && $api == "pages_default") {
    return array("version" => "1");
  }
}

/**
 * Implements hook_page_manager_variant_operations_alter().
 */
function panels_node_template_page_manager_variant_operations_alter(&$operations, &$handler) {
  if ($handler->task == 'node_view' && $handler->name == 'panels_node_default') {
    if (isset($operations['children']['criteria'])) {
      unset($operations['children']['criteria']);
    }
    if (isset($operations['children']['context'])) {
      unset($operations['children']['context']);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function panels_node_template_form_panels_panel_context_edit_settings_alter(&$form, &$form_state) {
  $handler = $form_state['handler'];
  if ($handler->task == 'node_view' && $handler->name == 'panels_node_default') {
    $form['conf']['title']['#disabled'] = TRUE;
    $form['conf']['pipeline']['#disabled'] = TRUE;
  }
}
