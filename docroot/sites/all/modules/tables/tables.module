<?php

/**
 * @file
 * Impliments a filter to insert a table into a node using a table macro.
 *
 * This module is a filter module that converts table macros into nodes.  The formattin of the macro is
 * starts as [table=class where the optional "=class" portion will create a class for the table.
 * then each cell is divided by a "|" and each row is separated by a \n, the macro ends with a "]".
 *
 */


function tables_help($path, $arg) {
  switch ($path) {
    case 'admin/help#tables':
      return t('<p>This filter module makes it easy and safe insert tables into the text of a node. ' .
               '<p>A table always starts with "[table".  To set a custom class for the table next put in "=class" ' .
               'there must not be any space between the "[table" and the "=".  You can set the class to be what ' .
               'ever you want.  A few useful classes are already included in the style sheet provided. ' .
               'Next you separate the cells by a "|" and separate the rows by a new line.  Cells can span multiple ' .
               'columns or rows simply by inserting a "{" to merge the cell with the cell to the left and a "^" to ' .
               'merge with the cell above. Currently, the only way to insert a literal "]" into the table is to use "' .
        htmlentities('&#93;') . '". If a "!" is the first charecter for a cell, the cell is set to be a header cell.');
      break;
  }
}

/**
 *  Prepare table data for Drupal's theme layer
 */
function _tables_theme_prepare($cells, $num_rows, $num_cols, $colspan = NULL, $rowspan = NULL) {
  for ($j = 0; $j < $num_rows; $j++) {
    for ($k = 0; $k < $num_cols; $k++) {
      if ($cells[$j][$k][0] == '^' || $cells[$j][$k][0] == '{') {
        unset($cells[$j][$k]);
      }
      elseif ($cells[$j][$k][0] == '!') {
        $cells[$j][$k] = drupal_substr($cells[$j][$k], 1);
      }
      else {
        if (isset($rowspan[$j][$k])) {
          $cells[$j][$k] = array('data' => $cells[$j][$k],
            'rowspan' => $rowspan[$j][$k],
          );
        }
        if (isset($colspan[$j][$k])) {
          if (is_array($cells[$j][$k])) { // rowspan AND colspan then
            $cells[$j][$k] += array('colspan' => $colspan[$j][$k]);
          }
          else {
            $cells[$j][$k] = array('data' => $cells[$j][$k],
              'colspan' => $colspan[$j][$k],
            );
          }
        }
      }
    }
  }
  return $cells;
}

/**
 *
 * Implement the search and process the macro.
 *
 * @param $intext
 * The node string
 *
 * @return
 * FALSE if no table macros
 * an array with element [0] being an array of macro strings and element [1] being an array of strings with the html
 * formatting.
 */

function _tables_prepare($intext, $filter) {
  $out=FALSE;
  $html_mode = $filter->settings['tables_html_mode'];
  $tableexp = '/\[table([^\[\]]+ )* \] /x';
  preg_match_all($tableexp, $intext, $matches);
  $i=0;
  while (isset($matches[1][$i])) {
    $out[0][$i] = $matches[0][$i];
    $tablein = $matches[1][$i];
    if ($html_mode) {
      // Convert <p> and <br> tags to newlines.
      $tablein = str_replace(array("\n", "\r"), array('', ''), $tablein);
      $tablein = preg_replace('/\\<br[^\\>]*\\>/si', "\n", $tablein);
      $tablein = preg_replace('/\\<\\/p\\>/si', "\n", $tablein);
      $tablein = preg_replace('/\\<\\/?(p|br)[^\\>]*\\>/si', '', $tablein);
    }
    $rowspan=$colspan=array();
    if ($tablein[0] == '=') {  //class is set
      preg_match('/^=([a-zA-Z0-9-]*)/', $tablein, $cmatches);
      $classlen = drupal_strlen($cmatches[0]);
      $class = $cmatches[1];
      $tablein = trim(drupal_substr($tablein, $classlen));
    }
    else {
      $class = $filter->settings['tables_style'];
    }
  //check for summary
  $summaryexp = '/summary=".*?"/';
  if (preg_match($summaryexp, $tablein, $cmatches)) {
    //get summary content
    $summary = $cmatches[0];
    // cut summary out of definition
    $summaryexp = '/".*"/';
    preg_match($summaryexp, $summary, $cmatches);
    $summary_text = str_replace('"', '', $cmatches[0]);
    $attributes = array('summary' => $summary_text);
    $tablein = str_replace($summary, '', $tablein);
  }
  else {
    $summary = 'summary=""';
    $attributes = array('summary' => '');
  }
  //end check for summary
  $rows = explode("\n", $tablein);
  $j = 0;
  $num_rows = count($rows);
  $num_cols = 0;
  $cells = array();
  while (isset($rows[$j])) {
    $cells[$j] = explode('|', $rows[$j]);
    $cells[$j] = array_map('trim', $cells[$j]);
    if (count($cells[$j]) > $num_cols) {
      $num_cols = count($cells[$j]);
    }
    $j++;
    }
    for ($j = $num_rows-1; $j >= 0; $j--) {   // find any cols rows that span  row=j, col=k
      for ($k = $num_cols-1; $k >= 0; $k--) {
        if (substr($cells[$j][$k], 0, 1) == '{') {
          if (isset($colspan[$j][$k]) && $k > 0) {
            $colspan[$j][$k-1] = $colspan[$j][$k]+1;
          }
          elseif ($k > 0) {
            $colspan[$j][$k-1] = 2;
          }
        }
        elseif (substr($cells[$j][$k], 0, 1) == '^') {
          if (isset($rowspan[$j][$k]) && $j > 0) {
            $rowspan[$j-1][$k] = $rowspan[$j][$k]+1;
          }
          elseif ($j > 0) {
            $rowspan[$j-1][$k] = 2;
          }
        }
      }
    }
    if (isset($class) && drupal_strtolower($class) == 'theme') {
      // Create appropriate array for passing on Drupal's theming layer
      $cells = _tables_theme_prepare($cells, $num_rows, $num_cols, $colspan, $rowspan);
      $outtext = theme('table', array( 'header' => array_shift($cells), 'rows' => $cells, 'attributes' => $attributes));
    }
    else {
      if (isset($class) && drupal_strlen($class)>0) {
        $outtext= '<table class="' . $class . '" ' . $summary . '>' . "\n";
      }
      else {
        $outtext= '<table>' . "\n";
      }
      for ($j = 0; $j < $num_rows; $j++) {   // create the output
        if ($j == 0) $outtext .= '<tr class="firstrow">';
        elseif ($j % 2 == 0) $outtext .= '<tr class="oddrow">';
        else $outtext .= '<tr class="evenrow">';
        for ($k = 0; $k < $num_cols; $k++) {
          if (substr($cells[$j][$k], 0, 1) == '!') {
            $cell_type = 'th';
            $cells[$j][$k] = drupal_substr($cells[$j][$k], 1);
          }
          else {
            $cell_type = 'td';
          }

          if (substr($cells[$j][$k], 0, 1) != '^' && substr($cells[$j][$k], 0, 1) != '{') {
            $outtext .= "<$cell_type";
            if (isset($rowspan[$j][$k])) $outtext .= ' ROWSPAN=' . $rowspan[$j][$k];
            if (isset($colspan[$j][$k])) $outtext .= ' COLSPAN=' . $colspan[$j][$k];
            if ($k == 0) $outtext .= ' class="firstcol">';
            elseif ($k % 2 == 0) $outtext .= ' class="oddcol">';
            else $outtext .= ' class="evencol">';
            if (drupal_strlen($cells[$j][$k]) > 0) $outtext .= $cells[$j][$k] . "</$cell_type>";
            else $outtext .= "&nbsp;</$cell_type>";
          }
        }
        $outtext .= "</tr>\n";
      }
      $outtext .= "</table>\n ";
    }
    $out[1][$i] = $outtext;
    $i++;
  } // endwhile process macro
  return $out;
}

/**
 * Implements hook_filter_info().
 */

function tables_filter_info() {
  $filters['filter_tables'] = array(
    'title' => t('Tables filter'),
    'description' => t('converts [table ...] macros into HTML tables.'),
    'process callback' => '_filter_tables',
    'settings callback' => '_filter_tables_settings',
    'default settings' => array(
      'tables_style'     => variable_get('tables_default_style', 'tables-elegant'),
      'tables_html_mode' => variable_get('tables_html_mode', FALSE),
    ),
    'tips callback'  => '_filter_tables_tips'
  );

  return $filters;
}

function _filter_tables_tips($format, $long = FALSE) {
  return t('Insert an html table from [table | cell 2 ...]. Use "|" between cells and a new line between rows.');
}

/**
 * Filter process callback.
 */
function _filter_tables($text, $filter, $format, $langcode, $cache, $cache_id) {
  $tables = _tables_prepare($text, $filter); //returns an array of $tables[0] = table macro $table[1]= table html
  $text =  str_replace($tables[0], $tables[1], $text);

  return $text;
}

function tables_init() {
  $css = variable_get('tables_css', drupal_get_path('module', 'tables') . '/tables-filter.css');
  drupal_add_css($css);
}

function _filter_tables_settings($form, &$form_state, $filter, $format, $defaults) {
  $filter->settings += $defaults;

  $settings['tables_style'] = array(    '#type' => 'textfield',
    '#title' => t('Default style'),
    '#default_value' => $filter->settings['tables_style'],
    '#size' => 70,
    '#maxlength' => 255,
    '#description' => t("Set the default style sheet to use if no style sheet is set in the specific table."),
  );

  $form['tables_filter']['tables_html_mode'] = array(
    '#type' => 'checkbox',
    '#title' => t('HTML mode'),
    '#default_value' => $filter->settings['tables_html_mode'],
    '#description' => t('Allow tables formatting within HTML.'),
  );

  return $settings;
}
