<?php

/**
 * @file
 * Adds a Page break field
 *
 * @name Page break Field
 * @author skilip
 */

require_once dirname(__FILE__) . '/page_break_field.crud.inc';

/**
 * Implements hook_menu().
 */
function page_break_field_menu() {
  $items = array();

  // Ensure the following is not executed until field_bundles is working and
  // tables are updated. Needed to avoid errors on initial installation.
  if (defined('MAINTENANCE_MODE')) {
    return $items;
  }

  // Create tabs for all possible bundles.
  foreach (entity_get_info() as $entity_type => $entity_info) {
    if ($entity_info['fieldable']) {
      foreach ($entity_info['bundles'] as $bundle_name => $bundle_info) {
        if (isset($bundle_info['admin'])) {
          // Extract path information from the bundle.
          $path = $bundle_info['admin']['path'];
          // Different bundles can appear on the same path (e.g. %node_type and
          // %comment_node_type). To allow page_break_field_menu_load() to extract the
          // actual bundle object from the translated menu router path
          // arguments, we need to identify the argument position of the bundle
          // name string ('bundle argument') and pass that position to the menu
          // loader. The position needs to be casted into a string; otherwise it
          // would be replaced with the bundle name string.
          if (isset($bundle_info['admin']['bundle argument'])) {
            $bundle_arg = $bundle_info['admin']['bundle argument'];
            $bundle_pos = (string) $bundle_arg;
          }
          else {
            $bundle_arg = $bundle_name;
            $bundle_pos = '0';
          }

          // This is the position of the %page_break_field_menu placeholder in the
          // items below.
          $page_break_position = count(explode('/', $path)) + 1;

          // Extract access information, providing defaults.
          $access = array_intersect_key($bundle_info['admin'], drupal_map_assoc(array('access callback', 'access arguments')));
          $access += array(
            'access callback' => 'user_access',
            'access arguments' => array('administer site configuration'),
          );

          $items["$path/page_break/%page_break_field_menu"] = array(
            'load arguments' => array($entity_type, $bundle_arg, $bundle_pos, '%map'),
            'title callback' => 'page_break_field_menu_title',
            'title arguments' => array($page_break_position),
            'page callback' => 'drupal_get_form',
            'page arguments' => array('page_break_field_edit_form', $page_break_position),
            'file' => 'page_break_field.field_ui.inc',
          ) + $access;
          $items["$path/page_break/%page_break_field_menu/delete"] = array(
            'load arguments' => array($entity_type, $bundle_arg, $bundle_pos, '%map'),
            'title' => 'Delete',
            'page callback' => 'drupal_get_form',
            'page arguments' => array('page_break_field_delete_form', $page_break_position),
            'type' => MENU_CALLBACK,
            'file' => 'page_break_field.field_ui.inc',
          ) + $access;
        }
      }
    }
  }
  return $items;
}

/**
 * Menu title callback.
 */
function page_break_field_menu_title($page_break) {
  return t('Edit page break !label', array('!label' => $page_break->label));
}

/**
 * Menu load
 * Load a page_break instance based on page_break and bundle name.
 *
 * @param $page_break_name
 *   The name of the page_break, as contained in the path.
 * @param $entity_type
 *   The name of the entity.
 * @param $bundle_name
 *   The name of the bundle, as contained in the path.
 * @param $bundle_pos
 *   The position of $bundle_name in $map.
 * @param $map
 *   The translated menu router path argument map.
 */
function page_break_field_menu_load($page_break_name, $entity_type, $bundle_name, $bundle_pos, $map) {

  if ($bundle_pos > 0) {
    $bundle = $map[$bundle_pos];
    $bundle_name = field_extract_bundle($entity_type, $bundle);
  }

  ctools_include('export');
  $objects = ctools_export_load_object('page_break_field', 'conditions', array(
    'identifier' => implode('|', array($page_break_name, $entity_type, $bundle_name, 'form')),
  ));

  $object = array_shift($objects);
  if ($object && isset($object->data)) {
    return page_break_field_unpack($object);
  }
  return $object;
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Used to add pagebreak form elements to the Field UI forms.
 */
function page_break_field_form_field_ui_field_overview_form_alter(&$form, &$form_state) {
  form_load_include($form_state, 'inc', 'page_break_field', 'page_break_field.field_ui');
  page_break_field_field_ui_overview_form_alter($form, $form_state);
}

/**
 * Implements hook_field_attach_form().
 */
function page_break_field_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode = NULL) {
  $entity_type = $form['#entity_type'];
  $bundle = $form['#bundle'];
  $mode = isset($form['#view_mode']) ? $form['#view_mode'] : 'form';

  $page_breaks_raw = page_break_field_info_page_breaks($entity_type, $bundle, $mode, TRUE);

  if (!empty($page_breaks_raw)) {
    // Get the current step in the page break workflow.
    $step = isset($form_state['storage']['step']) ? $form_state['storage']['step'] : 1;
    $form['#page_break_step'] = $step;

    // Sort the page breaks by weight and index them properly.
    $page_breaks_sorted = array();
    foreach ($page_breaks_raw as $page_break) {
      $page_breaks_sorted[$page_break->weight] = $page_break;
    }
    ksort($page_breaks_sorted);

    // Create a themed page navigation element.
    $form['page_break_field_navigation'] = array(
      '#page_breaks' => $page_breaks_sorted,
      '#step' => $step,
      '#theme_wrappers' => array('page_break_field_navigation'),
      '#type' => 'markup',
      '#weight' => -100,
      '#force_display' => TRUE,
    );

    // If the weight of the first pagebreaks is 0, we can assume it should be
    // handled as the marker for the first page.
    // In the Field UI, when enabling 'Show row weights', it is obvious that the
    // first item always starts with a weight of 0.
    // With this knowledge we can use the first pagebreak just for labeling the
    // pagebreak navigation.
    // Since it's the first item in teh form, and there are no form elements
    // precending this one, ity doesn't 'break' the form in separate elements.
    // Therefore we can disable the first pagebreak to ensure the first page
    // isn't empty.
    if (isset($page_breaks_sorted[0])) {
      unset($page_breaks_sorted[0]);
    }
    else {
      $form['page_break_field_navigation']['#step']--;
    }

    // Store the page breaks in the form build array.
    $form['#page_breaks'] = array_values($page_breaks_sorted);

    if ($step > 1) {
      $form['actions']['previous'] = array(
        '#type'   => 'submit',
        '#value'  => t('Previous'),
        '#submit' => array('page_break_field_node_form_previous', 'page_break_field_form_submit_build_entity'),
        '#weight' => -1,
      );
    }
    if ($step < (count($page_breaks_sorted) + 1)) {
      $form['actions']['next'] = array(
        '#type'   => 'submit',
        '#value'  => t('Next'),
        '#submit' => array('page_break_field_node_form_next', 'page_break_field_form_submit_build_entity'),
      );
    }

    // Hide the final submit button untill the user has completed the whole form.
    if (isset($form['actions']['submit'])) {
      $form['actions']['submit']['#access'] = ($step == (count($page_breaks_sorted) + 1));
    }

    $form['#pre_render'][] = '_page_break_field_extra_fields_pre_render';

    $prev_page_break = isset($form['#page_breaks'][$step - 2]) ? $form['#page_breaks'][$step - 2] : NULL;
    $next_page_break = isset($form['#page_breaks'][$step - 1]) ? $form['#page_breaks'][$step - 1] : NULL;

    // Define the max weight for visible elements.
    $weight_min = $prev_page_break ? $prev_page_break->weight : NULL;
    $weight_max = $next_page_break ? $next_page_break->weight : NULL;

    foreach (element_children($form) as $name) {
      $element = &$form[$name];

      // Skip hidden fields and submit buttons inside the 'actions' wrapper.
      if (isset($element['#type']) && !in_array($element['#type'], array('hidden', 'actions', 'value', 'token'))) {

        // Hide elements of which weights are higher than the next page break
        // or lower than the previous page break.
        if (isset($element['#weight'])
          && (($weight_min && ($element['#weight'] < $weight_min))
          || ($weight_max && ($element['#weight'] > $weight_max)))) {

          // Skip items of which the 'force display' flags are set.
          if (empty($element['#force_display'])) {
            $form[$name]['#access'] = FALSE;
          }
        }
        else {
          if (isset($form['actions']) && isset($form['actions']['next'])) {
            $form['actions']['next']['#limit_validation_errors'][] = array($name);
          }
        }
      }
    }
  }
}

/**
 * Submit callback for the button responsible for loading the next page in the
 * page break workflow.
 */
function page_break_field_node_form_next($form, &$form_state) {
  if (!isset($form_state['storage']['step'])) {
    $form_state['storage']['step'] = 1;
  }
  $form_state['rebuild'] = TRUE;

  if ($form_state['storage']['step'] != (count($form['#page_breaks']) + 1)) {
    $form_state['storage']['step']++;
  }
}

/**
 * Submit callback for the button responsible for loading the previous page in the
 * page break workflow.
 */
function page_break_field_node_form_previous($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
  $form_state['storage']['step']--;
  unset($form_state['node_preview']);
}

/**
 * Updates the form state's entity by processing this submission's values.
 */
function page_break_field_form_submit_build_entity($form, &$form_state) {
  switch ($form['#entity_type']) {
/*
    case 'node':
    case 'comment':
      $function = $form['#entity_type'] . '_form_submit_build_' . $form['#entity_type'];
      $function($form, $form_state);
      return;

*/
    default:
      $function = 'entity_form_submit_build_entity';
      $function($form['#entity_type'], $form_state[$form['#entity_type']], $form, $form_state);
      return;
  }
}

/**
 * Pre-render callback to adjust weights and visibility of non-field elements.
 */
function _page_break_field_extra_fields_pre_render($elements) {
  $entity_type = $elements['#entity_type'];
  $bundle = $elements['#bundle'];
  $page_breaks = $elements['#page_breaks'];
  $step = $elements['#page_break_step'];

  $prev_page_break = isset($page_breaks[$step - 2]) ? $page_breaks[$step - 2] : NULL;
  $next_page_break = isset($page_breaks[$step - 1]) ? $page_breaks[$step - 1] : NULL;

  if (isset($elements['#type']) && $elements['#type'] == 'form') {

    // Define the max weight for visible elements.
    $weight_min = $prev_page_break ? $prev_page_break->weight : NULL;
    $weight_max = $next_page_break ? $next_page_break->weight : NULL;

    foreach (element_children($elements) as $name) {
      $element = &$elements[$name];

      if (isset($element['#type'])) {
        // Skip hidden fields and submit buttons inside the 'actions' wrapper.
        if (!in_array($element['#type'], array('hidden', 'actions', 'value', 'token'))) {

          // Hide elements of which weights are higher than the next page break
          // or lower than the previous page break.
          if (($weight_min && ($element['#weight'] < $weight_min))
            || ($weight_max && ($element['#weight'] > $weight_max))) {

            // Skip items of which the 'force display' flags are set.
            if (empty($element['#force_display'])) {
              $element['#access'] = FALSE;

              // Needed to avoid loss of values between steps.
              if ($element['#type'] == 'checkbox') {
                $element['#disabled'] = TRUE;
              }
            }
          }
        }
      }
    }
  }
  return $elements;
}

/**
 * Imlements hook_element_info_alter().
 * Used to overwrite the regular value callback for checkboxes.
 */
function page_break_field_element_info_alter(&$elements) {
  $elements['checkbox']['#value_callback'] = 'page_break_field_checkbox_value_callback';
}

/**
 * Custom value callback for checkboxes.
 * Fixing a bug which causes checkboxes loosing it's value in multistep forms.
 */
function page_break_field_checkbox_value_callback($element, $input = FALSE, $form_state) {
  if ($input === FALSE) {
    return isset($element['#default_value']) ? $element['#default_value'] : 0;
  }
  else {
    // Here we'll return the input instead of the return value!
    return isset($input) ? $input : 0;
  }
}

/**
 * Implements hook_theme().
 */
function page_break_field_theme() {
  return array(
    'page_break_field_navigation' => array(
      'variables' => array(
        'page_breaks' => array(),
        'step' => 0,
      ),
    ),
  );
}

/**
 * The function for a page break navigation element.
 */
function theme_page_break_field_navigation($variables) {
  $step = $variables['step'];
  $items = array();

  // Cleanup the array by removing items which are disabled.
  $page_breaks_clean = array();
  foreach (array_values($variables['page_breaks']) as $i => $page_break) {
    // Skip disabled page breaks.
    if (empty($page_break->disabled)) {
      $page_breaks_clean[] = $page_break;
    }
    elseif ($i < $step) {
      $step--;
    }
  }

  foreach ($page_breaks_clean as $i => $page_break) {
    $items[$page_break->weight] = array(
      'data' => '<span>' . $page_break->label . '</span>',
      'class' => array(),
    );
    if ($i === ($step - 1)) {
      $items[$page_break->weight]['class'][] = 'active';
    }
    if ($i <= ($step - 1)) {
      $items[$page_break->weight]['class'][] = 'active-trail';
    }
    if ($i <= ($step - 3)) {
      $items[$page_break->weight]['class'][] = 'visited';
    }
  }

  $variables = array(
    'items' => array_values($items),
    'attributes' => array(
      'class' => array(
        'page-break-field-navigation',
        'page-break-field-navigation-' . count($items),
        'clearfix',
      ),
    ),
  );
  return theme('item_list', $variables);
}
