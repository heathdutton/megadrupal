<?php

/**
 * Implements hook_menu().
 *
 * @return array
 */
function wm_menu() {
  $items = array();
  $items['admin/config/user-interface/wm'] =
  $items['admin/config/user-interface/wm/settings'] = array(
    'title' => 'Webmaster tools',
    'description' => 'Settings for site webmaster tools.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wm_settings_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'wm.admin.inc',
    'module' => 'wm',
  );
  $items['admin/config/user-interface/wm/settings']['title'] = 'Settings';
  $items['admin/config/user-interface/wm/settings']['type'] = MENU_DEFAULT_LOCAL_TASK;
  $items['admin/config/user-interface/wm/permission'] = array(
    'title' => 'Permissions',
    'description' => 'Manage Wm permissions.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wm_toolbar_permissions'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'wm.admin.inc',
    'module' => 'wm',
    'weight' => 10,
  );
  return $items;
}


/**
 * Adds wm to the page
 *
 * @param $page
 */
function wm_page_build(&$page) {
  global $user;

  if (user_access('use wm toolbar')) {
    drupal_add_js("misc/jquery.cookie.js");

    drupal_add_js(libraries_get_path('jquery.mousewheel') . '/jquery.mousewheel.js');

    drupal_add_js(libraries_get_path('jquery.jscrollpane') . '/jquery.jscrollpane.min.js');
    drupal_add_css(libraries_get_path('jquery.jscrollpane') . '/jquery.jscrollpane.css');

    drupal_add_js(libraries_get_path('jquery.qtip') . '/jquery.qtip.min.js');
    drupal_add_css(libraries_get_path('jquery.qtip') . '/jquery.qtip.css');

    $path = drupal_get_path('module', 'wm');
    drupal_add_js("{$path}/js/wm_script.js");
    drupal_add_css("{$path}/css/wm_style.css");

    $cache = cache_get('wm-toolbar::' . $user -> uid);

    if ($cache) {
      $blocks = $cache->data;
    }
    else {
      $blocks = module_invoke_all('wm_item');
      drupal_alter('wm_blocks', $blocks);
      cache_set('wm-toolbar::' . $user->uid, $blocks);
    }

    $theme = theme('wm_toolbar', array('blocks' => $blocks));

    $page['page_bottom']['wm_toolbar'] = array(
      '#type' => 'markup',
      '#markup' => $theme,
    );
  }
}

/**
 * Implements hook_wm_blocks_alter
 *
 * @param $blocks
 */
function wm_wm_blocks_alter(&$blocks) {
}

/**
 * Changes wm permissions to a specific role
 *
 * @param $rid
 * @param array $permissions
 */
function wm_role_change_permissions($rid, array $permissions = array()) {
  // Grant new permissions for the role.
  $grant = array_filter($permissions);
  if (!empty($grant)) {
    _wm_role_grant_permissions($rid, array_keys($grant));
  }
  // Revoke permissions for the role.
  $revoke = array_diff_assoc($permissions, $grant);
  if (!empty($revoke)) {
    _wm_role_revoke_permissions($rid, array_keys($revoke));
  }
}

/**
 * @param $rid
 * @param array $permissions
 */
function _wm_role_grant_permissions($rid, array $permissions = array()) {
  // Grant new permissions for the role.
  foreach ($permissions as $name) {
    db_merge('wm_permission')
      ->key(array(
      'rid' => $rid,
      'permission' => $name,
    ))
      ->execute();
  }
}

/**
 * @param $rid
 * @param array $permissions
 */
function _wm_role_revoke_permissions($rid, array $permissions = array()) {
  // Revoke permissions for the role.
  db_delete('wm_permission')
    ->condition('rid', $rid)
    ->condition('permission', $permissions, 'IN')
    ->execute();
}

/**
 * Retrieve wm permissions
 *
 * @param array $roles
 * @return array
 */
function _wm_role_permissions($roles = array()) {
  $cache = &drupal_static(__FUNCTION__, array());

  $role_permissions = $fetch = array();

  if ($roles) {
    foreach ($roles as $rid => $name) {
      if (isset($cache[$rid])) {
        $role_permissions[$rid] = $cache[$rid];
      }
      else {
        // Add this rid to the list of those needing to be fetched.
        $fetch[] = $rid;
        // Prepare in case no permissions are returned.
        $cache[$rid] = array();
      }
    }

    if ($fetch) {
      // Get from the database permissions that were not in the static variable.
      // Only role IDs with at least one permission assigned will return rows.
      $result = db_query("SELECT rid, permission FROM {wm_permission} WHERE rid IN (:fetch)", array(':fetch' => $fetch));

      foreach ($result as $row) {
        $cache[$row->rid][$row->permission] = TRUE;
      }
      foreach ($fetch as $rid) {
        // For every rid, we know we at least assigned an empty array.
        $role_permissions[$rid] = $cache[$rid];
      }
    }
  }

  return $role_permissions;
}

/**
 * Check for wm item access
 *
 * @param $string
 * @param null $account
 * @return bool
 */
function wm_access($string, $account = NULL) {
  global $user;

  if (!isset($account)) {
    $account = $user;
  }

  // User #1 has all privileges:
  if ($account->uid == 1) {
    return TRUE;
  }

  // To reduce the number of SQL queries, we cache the user's permissions
  // in a static variable.
  // Use the advanced drupal_static() pattern, since this is called very often.
  static $drupal_static_fast;
  if (!isset($drupal_static_fast)) {
    $drupal_static_fast['perm'] = &drupal_static(__FUNCTION__);
  }
  $perm = &$drupal_static_fast['perm'];
  if (!isset($perm[$account->uid])) {
    $role_permissions = _wm_role_permissions($account->roles);

    $perms = array();
    foreach ($role_permissions as $one_role) {
      $perms += $one_role;
    }
    $perm[$account->uid] = $perms;
  }

  return isset($perm[$account->uid][$string]);
}

/**
 * @param $cache
 * @param $type
 * @param $theme
 * @param $path
 * @return array
 */
function wm_theme($cache, $type, $theme, $path) {
  $path = drupal_get_path('module', 'wm');
  $items['wm_toolbar'] = array(
    'variables' => array('blocks' => array(),),
    'template' => 'wm-toolbar',
    'path' => $path . '/theme',
    'file' => 'theme.inc',
  );
  $items['wm_toolbar_block'] = array(
    'variables' => array('block' => NULL, 'title' => TRUE),
    'template' => 'wm-toolbar-block',
    'path' => $path . '/theme',
    'file' => 'theme.inc',
  );
  $items['wm_toolbar_item'] = array(
    'variables' => array('item' => NULL,),
  );
  $items['wm_toolbar_shortcut'] = array(
    'variables' => array('item' => NULL,),
  );
  $items['wm_toolbar_permissions'] = array(
    'render element' => 'form',
    'file' => 'wm.admin.inc',
  );
  return $items;
}

/**
 *
 * @param $item
 * @return string
 */
function theme_wm_toolbar_item($item) {
  return '<li class="item">' . theme('image', array(
    'path' => drupal_get_path('module', 'wm') . '/images/icona-voci.png',
    'attributes' => array('class' => 'item-img')
  )) . '<span class="item-text" >' . l($item['item']['title'], $item['item']['href'], array('attributes' => array('title' => $item['item']['help']))) . '</span></li>';
}

/**
 * @param $item
 */
function theme_wm_toolbar_shortcut($item) {
}

/**
 * Implements hook_permission().
 *
 * @return array
 */
function wm_permission() {
  return array(
    'use wm toolbar' => array(
      'title' => t('Use wm toolbar'),
      'description' => t('Use wm toolbar.'),
    ),
  );
}

/**
 *
 * @return array
 */
function wm_wm_item() {
  $images = drupal_get_path('module', 'wm') . '/images/';

  $items['status'] = array(
    '#title' => 'Status',
    '#class' => array('wm-status-wrapper'),
    '#icon' => '',
    '#weight' => -100,
    '#items' => array(
      'updates' => array(
        'title' => t('Updates'),
        'href' => 'admin/reports/updates',
        'help' => t('Review modules updates'),
      ),
      'logs' => array(
        'title' => t('Logs'),
        'href' => 'admin/reports/dblog',
        'help' => t('View site\'s logs'),
      ),
      'report' => array(
        'title' => t('Status Report'),
        'href' => 'admin/reports/status',
        'help' => t('View report'),
      ),
    ),
  );

  return $items;
}
