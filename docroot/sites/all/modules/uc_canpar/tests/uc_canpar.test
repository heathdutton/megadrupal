<?php

/**
 * @file
 * Canpar Unit tests.
 */

/**
 * SimpleTests for Canpar.
 */
class CanparUnitTestCase extends DrupalUnitTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Canpar',
      'description' => 'Test Canpar.',
      'group' => 'Canpar',
    );
  }

  /**
   * Overrides DrupalUnitTestCase::setUp().
   */
  function setUp() {
    parent::setUp();
  }

  /**
   * Test Canpar base rate calculation.
   */
  function testBaseRate() {
    // URL for Base rate calculation.
    $url = 'http://www.canpar.com/XML/BaseRateXML.jsp';

    $request_data = array(
      'service' => '1',
      'quantity' => '1',
      'unit' => 'L',
      'weight' => '10',
      'origin' => 'M4X1W7',
      'dest' => 'L4Y2N9',
      'cod' => '100',
      'dec' => '200',
      'put' => '0',
      'xc' => '1',
    );

    $http_response = drupal_http_request(
      $url . '?' . http_build_query($request_data),
      array('method' => 'GET')
    );

    // Test to see if the request was successful.
    $this->assertTrue(
      $http_response->code == 200,
      t('Canpar server accepted the rate request.')
    );

    $response = new SimpleXMLElement($http_response->data);

    // Test for expected return values.
    $expected_response = array(
      'CanparShipment' => array(
        'ServiceType' => '1',
        'Quantity' => '1',
        'Unit' => 'L',
        'Weight' => '10',
        'Origin' => 'M4X1W7',
        'Destination' => 'L4Y2N9',
        'COD' => '100.00',
        'Declared' => '200.00',
        'PUT' => 'No',
        'ExtraCare' => '1.00',
        'ShippingDate' => format_date(REQUEST_TIME, 'custom', 'Y-m-d', 'America/Toronto'),
      ),
      'CanparCharges' => array(
        'BaseRate' => '9.89',
        'ExtraCareCharge' => '10.00',
        'CODCharge' => '4.50',
      ),
      'TransitTime' => array(
        '0' => '1',
      ),
      'EstimatedDeliveryDate' => array(
        '0' => format_date(strtotime('+1 day', REQUEST_TIME), 'custom', 'Y-m-d', 'America/Toronto'),
      ),
    );

    // Expected Delivery Date can't be a Saturday or Sunday
    $day = format_date(REQUEST_TIME, 'custom', 'N', 'America/Toronto');
    if ($day == 5) {
      $expected_response['EstimatedDeliveryDate'][0] = format_date(strtotime('+3 days', REQUEST_TIME), 'custom', 'Y-m-d', 'America/Toronto');
    }
    elseif ($day == 6) {
      $expected_response['EstimatedDeliveryDate'][0] = format_date(strtotime('+3 days', REQUEST_TIME), 'custom', 'Y-m-d', 'America/Toronto');
    }
    elseif ($day == 7) {
      $expected_response['EstimatedDeliveryDate'][0] = format_date(strtotime('+2 days', REQUEST_TIME), 'custom', 'Y-m-d', 'America/Toronto');
    }

    debug($expected_response);
    debug($response);

    foreach ($response as $tag => $contents) {
      $contents = (array) $contents;
      // Test response against expected value.
      $this->assertTrue(
        $expected_response[$tag] == $contents,
        t('Canpar returned correct %tag.', array('%tag' => $tag))
      );
    }

  }

  /**
   * Test Canpar custom rate calculation.
   */
  function testCustomRate() {
    // URL for Custom rate calculation.
    $url = 'https://www.canpar.com/XML/RatingXML.jsp';

    $xml = new XMLWriter();

    $xml->openMemory();
    $xml->startDocument('1.0', 'UTF-8');
    $xml->startElement('shipment');
    $xml->writeAttribute('weight_system', 'IMPERIAL');
    $xml->writeAttribute('shipper_number', '99999999');
    $xml->writeAttribute('destination_postal_code', 'M1M1M1');
    $xml->writeAttribute('service_type', '1');

    $xml->startElement('total');
    $xml->writeAttribute('total_pieces', '2');
    $xml->writeAttribute('total_weight', '20');
    $xml->endElement(); // total

    $xml->endElement(); // shipment
    $xml->endDocument();

    $http_response = drupal_http_request(
      $url . '?token=CANPAR&shipment=' . urlencode($xml->outputMemory(TRUE)),
      array('method' => 'GET')
    );

    // Test to see if the request was successful.
    $this->assertTrue(
      $http_response->code == 200,
      t('Canpar server accepted the rate request.')
    );

    $response = new SimpleXMLElement($http_response->data);

    // Test for expected return values.
    $expected_response = array(
      'weight' => '20.0',
      'weight_unit' => 'lb',
      'zone' => '1',
      'transit_time' => '1',
      'transit_time_guaranteed' => 'false',
      'estimated_delivery_date' => format_date(strtotime('+1 day', REQUEST_TIME), 'custom', 'Y-m-d', 'America/Toronto'),
      'base_charge' => '17.39',
      'freight_charge' => '17.39',
      'net_charge' => '17.39',
      'fuel_surcharge_rate' => '15.55',
      'fuel_surcharge' => '2.70',
      'subtotal_charge' => '20.09',
      'on_hst_charge' => '2.61',
      'total_charge' => '22.70',
    );

    // Expected Delivery Date can't be a Saturday or Sunday
    $day = format_date(REQUEST_TIME, 'custom', 'N', 'America/Toronto');
    if ($day == 5) {
      $expected_response['estimated_delivery_date'] = format_date(strtotime('+3 days', REQUEST_TIME), 'custom', 'Y-m-d', 'America/Toronto');
    }
    elseif ($day == 6) {
      $expected_response['estimated_delivery_date'] = format_date(strtotime('+3 days', REQUEST_TIME), 'custom', 'Y-m-d', 'America/Toronto');
    }
    elseif ($day == 7) {
      $expected_response['estimated_delivery_date'] = format_date(strtotime('+2 days', REQUEST_TIME), 'custom', 'Y-m-d', 'America/Toronto');
    }

    debug($expected_response);
    debug($response);

    $attributes = (array) $response->rate;
    foreach ($attributes['@attributes'] as $key => $value) {
      // Test response against expected value.
      $this->assertTrue(
        (string) $value == $expected_response[$key],
        t('Canpar returned correct %key = %value.', array('%key' => $key, '%value' => $value))
      );
    }

  }

}
