<?php

/**
 * @file
 * Canpar shipping quote module for Ubercart.
 *
 * @author Tim Rohaly.    <http://drupal.org/user/202830>
 */


/**
 * Implements hook_menu().
 */
function uc_canpar_menu() {
  $items = array();

  $items['admin/store/settings/quotes/settings/canpar'] = array(
    'title'            => 'Canpar',
    'access arguments' => array('configure quotes'),
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('uc_canpar_admin_settings'),
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'uc_canpar.admin.inc',
  );

  return $items;
}


/******************************************************************************
 * Ubercart Hooks                                                             *
 ******************************************************************************/


/**
 * Implements hook_uc_shipping_type().
 */
function uc_canpar_uc_shipping_type() {
  $weight = variable_get('uc_quote_type_weight', array('small_package' => 0));

  $types = array();
  $types['small_package'] = array(
    'id'     => 'small_package',
    'title'  => t('Small Packages'),
    'weight' => $weight['small_package'],
  );

  return $types;
}

/**
 * Implements hook_uc_shipping_method().
 */
function uc_canpar_uc_shipping_method() {
  $operations = array(
    'configure' => array(
      'title' => t('configure'),
      'href' => 'admin/store/settings/quotes/settings/canpar',
    ),
  );

  $methods['canpar'] = array(
    'id'      => 'canpar',
    'module'  => 'uc_canpar',
    'title'   => t('Canpar'),
    'operations' => $operations,
    'quote'   => array(
      'type'         => 'small_package',
      'callback'     => 'uc_canpar_quote',
      'accessorials' => _uc_canpar_service_list(),
    ),
  );

  return $methods;
}


/******************************************************************************
 * Module Functions                                                           *
 ******************************************************************************/


/**
 * Callback for retrieving a Canpar shipping quote.
 *
 * Makes a request for each Canpar service used.
 *
 * @param $products
 *   Array of cart contents.
 * @param $destination
 *   Customer's shipping address.
 *
 * @return
 *   JSON object containing rate, error, and debugging information.
 */
function uc_canpar_quote($products, $destination) {

  // The uc_quote AJAX query can fire before the customer has completely
  // filled out the destination address, so check to see whether the address
  // is complete. If not, abort.
  if (empty($destination['postal_code']) ||
      empty($destination['country'])       ) {
    // Skip this shipping method.
    return array();
  }

  // Initialize arrays to hold quote data to be returned to uc_quote.
  $debug_data = array('debug' => NULL, 'error' => array());
  $rates = array('data' => NULL);

  // Add products into single package.
  $packages = uc_canpar_package_products($products);
  if (!count($packages)) {
    // If uc_canpar_package_products returned no packages, then at least
    // one item must be too heavy to ship via Canpar.
    $debug_data['error'][] = t('At least one item in this order is too heavy to ship via Canpar.');

    return $rates['data'] = $debug_data;
  }

  // There should only be one package in the packages array but leaving the
  // foreach loop for possible future separation into packages.
  $rates = array();
  foreach ($packages as $package) {
    $services = variable_get('uc_canpar_services', _uc_canpar_service_list());
    $servicenames = _uc_canpar_service_list();

    foreach ($services as $serviceid) {
      if ($serviceid > 0) {
        // Country handling.
        $country_id = $destination['country'];
        if ($country_id <> 840 && $country_id <> 124) {
          // Canpar only delivers to the US and Canada.
          break;
        }
        if ($country_id == 840 && ($serviceid != 2 && $serviceid != 'F' && $serviceid != 'G' && $serviceid != 'H')) {
          // If the user has specified USA for their country, skip all services
          // except for #2, F, G, and H (USA services).
          continue;
        }
        if ($country_id == 124 && ($serviceid == 2 || $serviceid == 'F' || $serviceid == 'G' || $serviceid == 'H')) {
          // If the user has specified Canada for their country, skip service
          // #2, F, G, and H (USA services).
          continue;
        }

        $servicename = $servicenames[$serviceid];
        $querystring = _uc_canpar_build_request($package, $destination, $serviceid);
        // Send the request to the Canpar server.
        if (variable_get('uc_canpar_quote_type', 'base') == 'custom') {
          // Canpar server URL for custom rates.
          $url = 'https://www.canpar.com/XML/RatingXML.jsp';
        }
        else {
          // Canpar server URL for base rates.
          $url = 'http://www.canpar.com/XML/BaseRateXML.jsp';
        }
        $response = _uc_canpar_send_request($url, $querystring);

        if (user_access('configure quotes') &&
             variable_get('uc_quote_display_debug', FALSE)) {
          // Request.
          $debug_data['debug'] .= htmlentities(urldecode($querystring)) . "<br />\n";
          // Response.
          $debug_data['debug'] .= var_export($response, TRUE) . "<br />\n";
          // Not quite right - need to get response object before SimpleXML ...
          // to do this will have to refactor _uc_canpar_send_request().
        }

        if ($response) {

          if (variable_get('uc_canpar_quote_type', 'base') == 'custom') {
            $custom_rate = (array) $response->rate[0];
            $totalrates = (float) $custom_rate['@attributes']['total_charge'];
          }
          else {
            $totalrates = (array) $response->CanparCharges;
          }

          // Markup rate before customer sees it
          if (!isset($rates[$serviceid]['rate'])) {
              $rates[$serviceid]['rate'] = 0;
          }
          if (variable_get('uc_canpar_quote_type', 'base') == 'custom') {
            $rates[$serviceid]['rate'] += uc_canpar_rate_markup($totalrates);
          }
          else {
            $rates[$serviceid]['rate'] += uc_canpar_rate_markup(array_sum($totalrates));
          }
          $rates[$serviceid]['format'] = uc_currency_format($rates[$serviceid]['rate']);
          $rates[$serviceid]['option_label'] = theme('uc_canpar_option_label', array('servicename' => $servicename, 'response' => $response, 'packages' => $packages));
          if ($response->CanparRateErrors) {
            unset($rates[$serviceid]['rate']);
            $canpar_errors = (array) $response->CanparRateErrors;
            foreach ($canpar_errors as $canpar_error) {
              if (!isset($rates[$serviceid]['error'])) {
                  $rates[$serviceid]['rate'] = '';
              }
              $rates[$serviceid]['error'] .= $canpar_error . '. ';
            }
          }
        }
        else {
          $rates[$serviceid] = t('No response from server.');
          watchdog('uc_canpar',
                   'Shipping failed. Request was: !request, but no response.',
                   array(
                     '!request'  => htmlentities($querystring),
                     '!response' => htmlentities($response),
                   ),
                   WATCHDOG_ERROR
          );
        }
      }
    }
  }

  // Sort rate quotes in order of increasing price.
  uasort($rates, 'uc_quote_price_sort');

  // Merge debug data into $rates.  This is necessary because $debug_data is
  // not sortable by a 'rate' key, so it has to be kept separate from the
  // $rates data until this point.
  if (isset($debug_data['debug']) ||
      (isset($debug_data['error']) && count($debug_data['error']))) {
    $rates['data'] = $debug_data;
  }

  return $rates;
}

/**
 * Implements hook_theme().
 */
function uc_canpar_theme() {
  return array(
    'uc_canpar_option_label' => array(
      'variables' => array(
        'servicename'  => NULL,
        'response'  => NULL,
        'packages' => NULL,
      ),
      'file'      => 'uc_canpar.module',
    ),
  );
}

/**
 * Formats the Canpar service name and rate line-item shown to the customer.
 *
 * @param $variables
 *   Associative array containing information needed to theme a quote.
 *   Contains three keys:
 *   - servicename: The Canpar service name.
 *   - response: SimpleXML object containing Canpar webservice response.
 *   - packages: Package information.
 *
 * @ingroup themeable
 */
function theme_uc_canpar_option_label($variables) {
  $servicename = $variables['servicename'];
  $response    = $variables['response'];
  $packages    = $variables['packages'];

  // Start with Canpar logo.
  $output  = theme('image', array(
    'path' => drupal_get_path('module', 'uc_canpar') . '/uc_canpar_logo.gif',
    'alt' => 'Canpar logo',
    'title' => '',
    'attributes' => array('class' => 'canpar-logo')
  ));

  // Add Canpar service name, removing the first seven characters
  // (== 'Canpar ') because these replicate the logo image.
  $output .= substr($servicename, 7);

  // Add package information.
  $output .= ' (' . format_plural(count($packages), '1 package', '@count packages') . ')';

  // Add estimated delivery date.
  $datefmt  = variable_get('uc_canpar_datefmt', '');

  // Custom and Base rate responses are quite different.
  if (variable_get('uc_canpar_quote_type', 'base') == 'custom') {
    $delivery_date = (string) $response->rate['estimated_delivery_date'];
  }
  else {
    // Delivery date is not always present in Base rate response.
    $delivery_date = isset($response->EstimatedDeliveryDate) ?
                     $response->EstimatedDeliveryDate :
                     NULL;
  }

  if ($datefmt && $delivery_date) {
    $delivery_date = strtotime($delivery_date);
    // Add turnaround time to delivery date.
    $delivery_date += (60 * 60 * variable_get('uc_canpar_turnaround', 0));
    $output .= ' (' . t('Estimated delivery') . ': ' . format_date($delivery_date, 'custom', $datefmt) . ')';
  }

  return $output;
}

/**
 * Builds the query string that will be sent to Canpar.
 *
 * Contents of the query string are different for base rate versus custom
 * rate requests.
 */
function _uc_canpar_build_request($package, $destination, $serviceid) {
  // Use customer's language.
  $language = 'en';
  if (module_exists('i18n') && (i18n_get_lang() == 'fr')) {
    $language = 'fr';
  }

  // Add insurance if requested.
  $insurance = variable_get('uc_canpar_insurance', FALSE) ? $package->price : 0;

  // Strip any space(s) from postal code.
  $from_postalcode = str_replace(' ', '', variable_get('uc_canpar_postalcode', FALSE));

  // Strip any space(s) from postal code.
  $postalcode = str_replace(' ', '', $destination['postal_code']);

  // Convert shipweight from store weight units into KG for sending to Canpar.
  $shipweight = $package->shipweight * uc_weight_conversion(variable_get('uc_weight_unit', 'KG'), 'KG');

  // Round shipweight up to nearest KG.
  $shipweight = ceil($shipweight);

  if (variable_get('uc_canpar_quote_type', 'base') == 'custom') {
    $querystring =
      'shipment=' . urlencode(
        '<shipment ' .
          'language="' . $language . '" ' .
          'weight_system="METRIC" ' .
          'shipper_number="' . variable_get('uc_canpar_shipper_number', 0) . '" ' .
          'destination_postal_code="' . check_plain($postalcode) . '" ' .
          'service_type="' . $serviceid . '"' .
          '>' .
          '<total ' .
            'total_pieces="1" ' .
            'total_weight="' . ceil($shipweight) . '" ' .
            'total_cod="0" ' .
            'total_dv="' . $insurance . '" ' . // declared value for insurance
            'total_xc="0"' . // extra care
          '/>' .
        '</shipment>'
      ) .
      '&token=' . variable_get('uc_canpar_user_token', '');
  }
  else {
    $querystring = implode('&', array(
      'service=' . $serviceid,
      'quantity=1',
      'origin=' . $from_postalcode,
      'dest=' . check_plain($postalcode),
      'weight=' . ceil($shipweight),
      'unit=K',
      'cod=0',
      'dec=' . $insurance, // declared value for insurance
      'put=0',
      'xc=0', // extra care
    ));
  }

  return $querystring;
}

/**
 * Sends quote request to Canpar server, returns object with results.
 */
function _uc_canpar_send_request($url, $querystring) {
  $response = drupal_http_request($url . '?' . $querystring, array('method' => 'GET'));

  $xml = new SimpleXMLElement($response->data);

  return $xml;
}

/**
 * Canpar shipping services.
 */
function _uc_canpar_service_list() {
  // Types #3 and #4 always return "zone not found" when querying the server.
  // Can't get a proper quote from their web-based calculator for these either
  // (http://www.canpar.com/en/ship/RateCalculatorAction.do).
  // Assuming Canpar bug.

  return array(
    // Ground Products.
    '1' => t('Canpar Ground'),
    '2' => t('Canpar USA'),
    // Domestic Products.
    '3' => t('Canpar Select Letter'),
    '4' => t('Canpar Select Pak'),
    '5' => t('Canpar Select Parcel'),
    'C' => t('Canpar Overnight Letter'),
    'D' => t('Canpar Overnight Pak'),
    'E' => t('Canpar Overnight Parcel'),
    // USA Products.
    'F' => t('Canpar USA Select Letter'),
    'G' => t('Canpar USA Select Pak'),
    'H' => t('Canpar USA Select Parcel'),
  );
}

/**
 * Utility routine to construct options for date format.
 *
 * @return
 *   Array of today's date in various formats
 */
function _uc_canpar_get_date_options() {
  $date_options = array(
    'm/d/Y', 'd/m/Y', 'Y/m/d',
    'D, M j, Y', 'D, M j', 'F j, Y',
    'l, j F', 'l, F j',
    'l, j F, Y', 'l, Y, F j', 'l, F j, Y'
  );
  $date_options_nice = array('' => t("Don't display estimate"));

  foreach ($date_options as $datefmt) {
    $date_options_nice[$datefmt] = t('Estimated delivery') . ': ' . format_date(REQUEST_TIME, 'custom', $datefmt);
  }
  return $date_options_nice;
}

/**
 * Modifies the rate received from Canpar before displaying to the customer.
 *
 * Rates are marked-up by a percentage, a multiplier, or an additional
 * amount as per the settings in this modules administration menu.
 *
 * @return
 *   A float containing the modified rate.
 */
function uc_canpar_rate_markup($rate) {
  $markup = trim(variable_get('uc_canpar_rate_markup', '0'));
  $type   = variable_get('uc_canpar_rate_markup_type', 'percentage');
  if (is_numeric($markup)) {
    switch ($type) {
      case 'percentage':
        return (float) $rate * (1.0 + floatval($markup) / 100.0);
      case 'multiplier':
        return (float) $rate * floatval($markup);
      case 'currency':
        return (float) $rate + floatval($markup);
    }
  }
  else {
    return $rate;
  }
}

/**
 * Modifies the weight of shipment before sending to Canpar for a quote.
 *
 * @param weight
 *   Shipping weight without any weight markup.
 *
 * @return
 *   Shipping weight after markup.
 */
function uc_canpar_weight_markup($weight) {
  $markup = trim(variable_get('uc_canpar_weight_markup', '0'));
  $type   = variable_get('uc_canpar_weight_markup_type', 'percentage');

  if (is_numeric($markup)) {
    switch ($type) {
      case 'percentage':
        return (float) $weight * (1.0 + floatval($markup) / 100.0);
      case 'multiplier':
        return (float) $weight * floatval($markup);
      case 'mass':
        return (float) $weight + floatval($markup);
    }
  }
  else {
    return $weight;
  }
}

/**
 * Packages products into boxes.
 *
 * There are no weight limits for Canpar packages. This function simply adds
 * the products together.
 *
 * $package object returned from this routine contains the following members:
 *   ->quantity     Number of items in package
 *   ->price        Value (sales price, in store currency) of items in package
 *   ->weight       Actual weight of items in package, in store weight units
 *   ->weight_units Set to store default, taken from uc_weight_unit variable
 *   ->shipweight   Computed weight of package, including markup
 *
 * Store weight units are used internally for compution of package weights.
 * Each product may have its own weight units; these are converted to store
 * units and the package shipweight is returned in terms of the store weight
 * units. The store weight units are saved in the $package object for
 * completeness.
 *
 * @param $products
 *   An array of nodes of type product.
 *
 * @return
 *   An array of package objects, each containing one or more of the products.
 */
function uc_canpar_package_products($products) {
  $packages = array();

  // Create first package.
  $package  = new stdClass();
  $package->quantity     = 0;
  $package->price        = 0.0;
  $package->weight       = 0.0;
  $package->weight_units = variable_get('uc_weight_unit', 'KG');

  // Loop over products.
  foreach ($products as $product) {
    // Get item weight. Weight units are set on a per-product basis, so
    // we convert as necessary in order to perform all calculations in the
    // store weight units.
    $item_weight = $product->weight * uc_weight_conversion($product->weight_units, variable_get('uc_weight_unit', 'KG'));

    // Loop over qty of each product.
    for ($item = 0; $item < $product->qty; $item++) {
      // Update the package information and continue.
      $package->quantity += 1;
      $package->price    += $product->price;
      $package->weight   += $item_weight;
    }
  }

  // Markup weight on a per-package basis.
  $package->shipweight = uc_canpar_weight_markup($package->weight);

  // Save the package to the array then exit.
  $packages[] = $package;

  return $packages;
}
