<?php
/**
 * @file
 * File contents for vaogr.module.
 */

/**
 * Implements hook_views_plugins().
 */
function vaogr_views_plugins() {
  $plugins = array(
    'access' => array(
      'vaogr_og_role' => array(
        'title' => t('OG Role'),
        'help' => t('Access will be granted to users with any of the specified OG roles.'),
        'handler' => 'vaogr_plugin_access_role',
        'uses options' => TRUE,
        'help topic' => 'access-role',
      ),
    ),
  );
  return $plugins;
}

/**
 * Get a list of OG roles.
 */
function vaogr_get_roles() {
  static $roles = NULL;
  if (!isset($roles)) {
    $roles = array();
    $query = db_select('og_role', 'ogr')
      ->fields('ogr', array('rid', 'name'))
      ->orderBy('rid', 'ASC')
      ->execute();
    while ($obj = $query->fetchObject()) {
      $roles[$obj->rid] = $obj->name;
    }
  }
  return $roles;
}

/**
 * Access callback for the vaogr_plugin_access_role access plugin.

 * Determine if the specified user has access to a view on the basis of any of
 * the requested OG roles. If the $account argument is omitted, the current user
 * is used.
 */
function vaogr_check_roles($rids, $account = NULL) {
  global $user;
  $account = isset($account) ? $account : $user;
  $roles = array_keys(vaogr_get_all_user_roles('node', $account->uid));
  return user_access('access all views', $account) || array_intersect(array_filter($rids), $roles);
}

/**
 * Get all organic group roles().
 *
 * @param string $group_type
 *   By default it is 'node'.
 * @param int $uid
 *   The unique user id.
 *
 * @return array
 *   All organic groups(rid and name).
 */
function vaogr_get_all_user_roles($group_type, $uid = NULL) {

  $query = db_select('og_users_roles', 'ogur');
  $query->innerJoin('og_role', 'ogr', 'ogur.rid = ogr.rid');
  $query->fields('ogur', array('rid'));
  $query->fields('ogr', array('name'));
  $query->condition('ogr.group_type', $group_type, '=');
  $query->condition('ogur.uid', $uid, '=');
  $query->orderBy('rid');
  $result = $query->execute();
  $og_roles = NULL;
  while ($row = $result->fetchObject()) {
    $og_roles[$row->rid] = $row->name;
  }
  return is_array($og_roles) ? $og_roles : array();

}
