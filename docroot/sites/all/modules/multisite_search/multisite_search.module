<?php
/**
 * @file
 * Drupal Multisite search module.
 */

/**
 * Implements hook_theme().
 */
function multisite_search_theme() {
  return array(
    'multisite_search_overview_form' => array(
      'render element' => 'form',
    ),
    'multisite_search_theme_form' => array(
      'variables' => array(
        'form' => NULL
      ),
    ),
    'multisite_search_block_form' => array(
      'variables' => array(
        'form' => NULL,
      ),
    ),
    'multisite_search_theme_search_result' => array(
      'variables' => array(
        'result' => NULL,
        'type' => NULL,
      ),
      'template' => 'multisite_search-result',
    ),
  );
}

/**
 * Implementats hook_permission().
 */
function multisite_search_permission() {
  return array(
    'administer multisite search' => array(
      'title' => t('Administer multisite search'),
      'description' => t('Administer the Multisite Search module'),
    ),
  );
}

/**
 * Implementats hook_menu().
 */
function multisite_search_menu() {
  $items['admin/config/search/multisite-search'] = array(
    'title' => 'Multisite configuration',
    'description' => 'Configure sites to be indexed in a Multisite installation environment.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('multisite_search_overview_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer multisite search'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => -9, // puts it just after "Search settings"
  );
  $items['admin/config/search/multisite-search/sites'] = array(
    'title' => 'List Sites',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/config/search/multisite-search/add-site'] = array(
    'title' => 'Add Site',
    'description' => 'Add a site to be configured in a Multisite installation environment.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('multisite_search_form_site'),
    'access callback' => 'user_access',
    'access arguments' => array('administer multisite search'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -9,
  );
  $items['admin/config/search/multisite-search/sites/%/edit'] = array(
    'title' => 'Edit Site',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('multisite_search_form_site', 5),
    'access arguments' => array('administer multisite search'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/search/multisite-search/sites/%/delete'] = array(
    'title' => 'Delete Site',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('multisite_search_site_confirm_delete', 5),
    'access arguments' => array('administer multisite search'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/search/multisite-search/settings'] = array(
    'title' => 'Search settings',
    'description' => 'Manage settings for Multisite Search module.',
    'position' => 'left',
    'weight' => -10,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('multisite_search_settings_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer multisite search'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
  return $items;
}

/**
 * Menu callback; shows Multisites in a draggable table
 */
function multisite_search_overview_form($form_state) {
  
  $num_sites = db_query("SELECT COUNT(site_id) FROM {multisite_search_sites}")->FetchField();

  $form = array(
    '#tree' => TRUE,
  );

  // get existing sub-sites and format the way theme_table likes
  $results = db_query("SELECT site_id, db_prefix, table_prefix, site_url, site_name, weight FROM {multisite_search_sites} ORDER BY weight");

  foreach ($results as $site) {
    $siteid = 'site:' . $site->site_id;
    $form[$siteid]['title'] = array(
      '#markup' => check_plain($site->site_name),
    );
    $form[$siteid]['url'] = array(
      '#markup' => check_plain($site->site_url),
    );
    $form[$siteid]['database'] = array(
      '#markup' => check_plain($site->db_prefix),
    );
    $form[$siteid]['prefix'] = array(
      '#markup' => check_plain($site->table_prefix),
    );
    $form[$siteid]['weight'] = array(
      '#type' => 'weight',
      '#delta' => $num_sites,
      '#default_value' => $site->weight,
    );
    $form[$siteid]['siteid'] = array(
      '#type' => 'hidden',
      '#value' => $site->site_id,
    );
    $form[$siteid]['operations']['edit'] = array(
      '#markup' => l('edit', 'admin/config/search/multisite-search/sites/' . $site->site_id . '/edit'),
    );
    $form[$siteid]['operations']['delete'] = array(
      '#markup' => l('delete', 'admin/config/search/multisite-search/sites/' . $site->site_id . '/delete'),
    );
    $form[$siteid]['#attributes'] = array(
      'class' => 'multisite-search-site'
    );
  }
  if (element_children($form)) {
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Save configuration'),
    );
  }
  else {
    $form['empty_menu'] = array('#markup' => t('There are no sites set up yet. !add-site', array('!add-site' => l(t('Add Site'), 'admin/config/search/multisite-search/add-site'))));
  }

  return $form;
}

/**
 * Submit handler for the multisite search overview form.
 *
 * @see multisite_search_overview_form()
 */
function multisite_search_overview_form_submit($form, &$form_state) {
  $updated_items = array();
  foreach (element_children($form) as $siteid) {
    // strict compare checks that the value is 0 and not NULL; that is, the string is at the beginning
    if (strpos($siteid, 'site:') === 0) {
      $element = $form[$siteid];
      // if the "weight" value is different from the default, queue it for updating
      if ($element['weight']['#value'] != $element['weight']['#default_value']) {
        $updated_items[] = $element;
      }
    }
  }
  // Save all our changed items to the database.
  foreach ($updated_items as $item) {
    $query = db_update('multisite_search_sites')
      ->fields(array('weight' => $item['weight']['#value']))
      ->condition('site_id', $item['siteid']['#value'])
      ->execute();

  }
}

/**
 * Theme the multisite search overview form into a table.
 *
 * @ingroup themeable
 */
function theme_multisite_search_overview_form($variables) {
  $form = $variables['form'];
  
  drupal_add_tabledrag('multisite-search-overview', 'order', 'sibling', $group = 'multisite-search-weight', NULL, NULL, FALSE);

  $header = array(
    t('Site Name'),
    t('Site URL'),
    t('Database Name'),
    t('Table Prefix'),
    array('data' => t('Weight'), 'class' => 'tabledrag-hide'),
    array('data' => t('Operations'), 'colspan' => '2'),
  );

  $rows = array();
  foreach (element_children($form) as $siteid) {
    // strict compare checks that the value is 0 and not NULL; that is, the string is at the beginning
    if (strpos($siteid, 'site:') === 0) {
      $element = &$form[$siteid];
      // Build a list of operations.
      $operations = array();
      foreach (element_children($element['operations']) as $op) {
        $operations[] = drupal_render($element['operations'][$op]);
      }
      
      // Add special classes to be used for tabledrag.js.
      $element['siteid']['#attributes']['class'] = array('multisite-search-siteid');
      $element['weight']['#attributes']['class'] = array('multisite-search-weight');

      $row = array(
        'data' => array(
          drupal_render($element['title']), // Title
          drupal_render($element['url']), // Site URL
          drupal_render($element['database']), // Database Name
          drupal_render($element['prefix']), // Table Prefix
          array('data' => drupal_render($element['weight']) . drupal_render($element['siteid']), 'class' => 'tabledrag-hide'), // Weight + Site ID
        ),
        'class' => array('draggable'),
      );
      // add "operations" to row[data]
      $row['data'] = array_merge($row['data'], $operations);
      
      $rows[] = $row;
    }
  }
  
  $output = '';
  if ($rows) {
    $output .= theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('id' => 'multisite-search-overview')));
  }

  $output .= drupal_render_children($form);
  return $output;
}

/**
 * Menu callback for multisite-search/add-site and multisite-search/sites/%/edit
 */
function multisite_search_form_site($form, &$form_state, $site_id = NULL) {
  $edit = array();
  if ($site_id) {
    $edit = _multisite_search_get_site($site_id);
    $form['site_id'] = array(
      '#type' => 'value',
      '#value' => $edit['site_id'],
    );
  }
  $form['site_name'] = array(
    '#title' => t('Site name'),
    '#type' => 'textfield',
    '#required' => TRUE,
    '#default_value' => (!empty($edit) ? $edit['site_name'] : ''),
    '#description' => t('Displayed on the search results page.'),
  );
  $form['site_url'] = array(
    '#title' => t('Site URL'),
    '#type' => 'textfield',
    '#required' => TRUE,
    '#default_value' => (!empty($edit) ? $edit['site_url'] : ''),
    '#description' => t('The full URL of the site root. Do not include a trailing /.<br />Example: <em>http://subdomainname.domainname.com</em>'),
  );
  $form['db_prefix'] = array(
    '#title' => t('Site database name'),
    '#type' => 'textfield',
    '#size' => 25,
    '#required' => TRUE,
    '#default_value' => (!empty($edit) ? $edit['db_prefix'] : ''),
    '#description' => t('Enter this site\'s database name. Only alphanumeric characters and underscores are allowed.'),
  );
  $form['table_prefix'] = array(
    '#title' => t('Site table prefix'),
    '#type' => 'textfield',
    '#size' => 25,
    '#required' => FALSE,
    '#default_value' => (!empty($edit) ? $edit['table_prefix'] : ''),
    '#description' => t('Enter the table prefix value. Only alphanumeric characters and underscores are allowed.<br />If the site has a separate database with no table prefix, leave this value blank.'),
  );
  $form['submit'] = array('#type' => 'submit', '#value' => t('Save'));
  if ($site_id) {
    $form['delete'] = array('#type' => 'submit', '#value' => t('Delete'));
  }
  $form['#validate'] = array('multisite_search_form_site_validate');

  return $form;
}

function multisite_search_form_site_validate($form, &$form_state) {
  // Validate the table prefix. This prevents SQL injection vulnerability
  if (!preg_match('/^[a-zA-Z0-9_]*$/', $form_state['values']['db_prefix'])) {
    form_set_error('db_prefix', t('Database must be only alphanumeric characters and underscores.'));
  }
  // Only allow [A-Z] [0-9] and _
  if (!preg_match('/^[a-zA-Z0-9_]*$/', $form_state['values']['table_prefix'])) {
    form_set_error('table_prefix', t('Table prefix must be only alphanumeric characters and underscores.'));
  }
}

function multisite_search_form_site_submit($form, &$form_state) {
  if (!empty($form_state['values']['site_id'])) {
    // update existing site
    _multisite_search_update_site($form_state['values']);
    drupal_set_message(t('Site %site has been updated.', array('%site' => $form_state['values']['site_name'])));
  }
  else {
    // save new site
    _multisite_search_update_site($form_state['values']);
    drupal_set_message(t('Site %site has been added.', array('%site' => $form_state['values']['site_name'])));
  }
  // redirect to List Sites page
  $form_state['redirect'] = 'admin/config/search/multisite-search';
}

/**
 * Form builder for the site delete form.
 *
 * @ingroup forms
 * @see multisite_search_site_confirm_delete_submit()
 */
function multisite_search_site_confirm_delete($form, &$form_state, $site_id) {
  $site = _multisite_search_get_site($site_id);

  $form['site_id'] = array(
    '#type' => 'value',
    '#value' => $site_id,
  );
  return confirm_form($form,
    t('Are you sure you want to delete %title from the Multisite configuration?', array('%title' => $site['site_name'])),
    'admin/config/search/multisite-search',
    t('Deleting a site will remove all content from the search index. This action cannot be undone.'),
    t('Delete'),
    t('Cancel'));
}

/**
 * Submit handler to delete a site after confirmation.
 *
 * @see multisite_search_site_confirm_delete()
 */
function multisite_search_site_confirm_delete_submit($form, &$form_state) {
  $site = _multisite_search_get_site($form_state['values']['site_id']);
  _multisite_search_delete_site($site);
  drupal_set_message(t('Site %site deleted from Multisite configuration.', array('%site' => $site['site_name'])));
  $form_state['redirect'] = 'admin/config/search/multisite-search';
  return;
}

/**
 * Form builder. Multisite Search Settings
 *
 * @ingroup forms
 */
function multisite_search_settings_form($form_state) {
  $form['multisite_search_cron_ttl'] = array(
    '#prefix' => t('If Multisite Search tables are shared, these settings will apply for all sites.'),
    '#type' => 'textfield',
    '#title' => t('Refresh Multisite search index (in seconds)'),
    '#required' => TRUE,
    '#description' => t('Configure the refresh rate for the search index.<br /><em>0</em> means the index is rebuilt every cron run.<br /><em>3600</em> means the index is rebuilt every 60 minutes on the next cron run.'),
    '#default_value' => _multisite_search_get_setting('multisite_search_cron_ttl', '0'),
    '#weight' => -5,
  );
  $form['multisite_search_block_label'] = array(
    '#type' => 'textfield',
    '#title' => t('Search block label'),
    '#description' => t('Set the label to be displayed in the Multisite Search block. Leave blank to display no label.'),
    '#default_value' => _multisite_search_get_setting('multisite_search_block_label', 'Multisite search'),
    '#weight' => -4,
  );
  $form['multisite_search_tab_label'] = array(
    '#type' => 'textfield',
    '#title' => t('Search tab label'),
    '#required' => TRUE,
    '#description' => t('Set the text for the Multisite Search tab in the search results.'),
    '#default_value' => _multisite_search_get_setting('multisite_search_tab_label', 'Multisite search'),
    '#weight' => -3,
  );
  $form['exclusions'] = array(
    '#type' => 'fieldset',
    '#title' => t('Exclusions'),
    '#weight' => -2,
  );
  $form['exclusions']['multisite_search_exclude_unpublished'] = array(
    '#type' => 'checkbox',
    '#title' => t('Exclude unpublished nodes'),
    '#default_value' => _multisite_search_get_setting('multisite_search_exclude_unpublished', TRUE),
  );
  $form['exclusions']['multisite_search_exclude_types'] = array(
    '#type' => 'textarea',
    '#title' => t('Exclude content types'),
    '#description' => t('Enter the short name, one per line. This list is shared by all sites.'),
    '#default_value' => _multisite_search_get_setting('multisite_search_exclude_types', ''),
  );

  $form['buttons']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save configuration'),
  );
  $form['buttons']['reset'] = array(
    '#type' => 'submit',
    '#value' => t('Reset to defaults'),
    '#weight' => 1,
  );

  return $form;
}

/**
 * Submit function for multisite_search_settings_form().
 */
function multisite_search_settings_form_submit($form, $form_state) {
  $op = isset($form_state['values']['op']) ? $form_state['values']['op'] : '';

  // Exclude unnecessary elements.
  unset($form_state['values']['submit'], $form_state['values']['reset'], $form_state['values']['form_id'], $form_state['values']['op'], $form_state['values']['form_token'], $form_state['values']['form_build_id']);

  foreach ($form_state['values'] as $key => $value) {
    if ($op == t('Reset to defaults')) {
      _multisite_search_del_setting($key);
    }
    else {
      if (is_array($value) && isset($form_state['values']['array_filter'])) {
        $value = array_keys(array_filter($value));
      }
      _multisite_search_set_setting($key, $value);
    }
  }
  if ($op == t('Reset to defaults')) {
    drupal_set_message(t('The configuration options have been reset to their default values.'));
  }
  else {
    drupal_set_message(t('The configuration options have been saved.'));
  }
  drupal_set_message(
    t('You should <a href="!search-settings">re-index site content</a> for <em>all</em> sites and then <a href="!run-cron">run cron</a> for your changes take effect.', array(
      '!search-settings' => url('admin/settings/search'),
      '!run-cron' => url('admin/reports/status/run-cron')
    ))
  );

  cache_clear_all();
  drupal_theme_rebuild();
}

/**
 * Theme the theme search form.
 */
function theme_multisite_search_theme_form($form) {
  return '<div id="search" class="container-inline">' . drupal_render($form) . '</div>';
}

/**
 * Theme the block search form.
 */
function theme_multisite_search_block_form($form) {
  $fst = drupal_render($form['multisite_search_block_form_keys']);
  $sec = drupal_render($form['submit']);
  $out = '<div class="container-inline">' . $fst . $sec . '</div>';
  return '<div>' . $out . '<div class="container-inline">' . drupal_render($form) . ' </div></div>';
}

/**
 * Implements hook_preprocess_search_results().
 * - Theme the Multisite search results.
 */
function multisite_search_preprocess_search_results(&$variables) {
}

/**
 * Implements hook_preproces_search_result().
 * - Theme one Multisite search result entry.
 */
function multisite_search_preprocess_search_result(&$variables) {
  // Strangely, when switching tabs on the search results page, site_name and site_url are not set.
  // Just ignore it
  if (!empty($variables['result']['site_name'])) {
    $site_link = l($variables['result']['site_name'], $variables['result']['site_url'], $options = array('attributes' => array('class' => 'site-link')));
    // add the site link to the "info" variable
    array_unshift($variables['info_split'], $site_link);
    $variables['info'] = implode(' - ', $variables['info_split']);
  }
}

function multisite_search_forms() {
  $forms['multisite_search_theme_form']= array(
    'callback' => 'multisite_search_box',
    'callback arguments' => array('multisite_search_theme_form'),
  );
  $forms['multisite_search_block_form']= array(
    'callback' => 'multisite_search_box',
    'callback arguments' => array('multisite_search_block_form'),
  );
  return $forms;
}

/**
 * Implementats hook_cron().
 *
 * Combine search indexes from all sites into the multisite index (and words).
 */
function multisite_search_cron() {
  watchdog('multisite_search', t('Multisite search cron'), array());
  //Fetch last execution
  $msearch_last_cron_execution = _multisite_search_get_setting('multisite_search_last_cron_execution', '');
  // Validate if we are in the umbral to maintain the index search
  if ($msearch_last_cron_execution && REQUEST_TIME < ( $msearch_last_cron_execution + _multisite_search_get_setting('multisite_search_cron_ttl', '0')) ) {
    return FALSE;
  }
  else {
    _multisite_search_set_setting('multisite_search_last_cron_execution', REQUEST_TIME);
  }
  // set this module weight to 10
  // @TODO Move to .install file?
  db_query("UPDATE {system} SET weight = 10 WHERE name = 'multisite_search'")->execute();

  // delete multisite index
  db_query('TRUNCATE TABLE {multisite_search_dataset}')->execute();
  db_query('TRUNCATE TABLE {multisite_search_index}')->execute();
  db_query('TRUNCATE TABLE {multisite_search_total}')->execute();

  // get all sites
  $res = db_query("SELECT * FROM {multisite_search_sites}");
  // @TODO - change to default obj
  while ($site = $res->FetchAssoc()) {
    // assemble query-safe table prefix
    // see http://drupal.org/node/1482920
    // @TODO switch to using db_set_active()
    $tblpf = implode('.', array(db_escape_table($site['db_prefix']), db_escape_table($site['table_prefix'])));
    
    // get default database values
    $default_db = Database::getConnectionInfo('default');
    $temp_multisite_db = $default_db['default'];
    $temp_multisite_db['database'] = $site['db_prefix']; // overwrite database name
    $temp_multisite_db['prefix']['default'] = $site['table_prefix']; // overwrite database prefix
    // @see http://api.drupal.org/api/drupal/includes%21database%21database.inc/function/Database%3A%3AaddConnectionInfo/7
    Database::addConnectionInfo('multisite_search_' . $site['site_id'], 'default', $temp_multisite_db);
    db_set_active('multisite_search_' . $site['site_id']);
    
    // SELECT sid, type, data, 'prefix' AS subdmn_id
    // FROM prefix.search_dataset
    // @see http://api.drupal.org/api/drupal/includes%21database%21select.inc/function/SelectQuery%3A%3AaddExpression/7
    $dataset_query = db_select('search_dataset', 'd')
      ->fields('d', array('sid', 'type', 'data'));
    $tblpf = implode('.', array(db_escape_table($site['db_prefix']), db_escape_table($site['table_prefix'])));
    // pass single-quoted string as the fixed value of 'subdmn_id' in resultset
    // @see http://api.drupal.org/api/drupal/includes%21database%21select.inc/function/SelectQuery%3A%3AaddField/7#comment-33553
    $dataset_query->addExpression(':prefix', 'subdmn_id', array(':prefix' => $tblpf)); 
    
    //SELECT word, sid, type, 'prefix' as subdmn_id, score
    // FROM prefix.search_index
    $index_query = db_select('search_index', 'i')
      ->fields('i', array('word', 'sid', 'type', 'score'));
    $index_query->addExpression(':prefix', 'subdmn_id', array(':prefix' => $tblpf));
    
    // Additional parameters - set in "Search settings" admin page
    // If enabled: exclude unpublished nodes.
    if (_multisite_search_get_setting('multisite_search_exclude_unpublished', TRUE)) {
      // sid NOT IN (SELECT nid FROM {node} WHERE status = 0)"
      $not_in = db_query('SELECT nid FROM {node} WHERE status = 0')->fetchCol();
      if (!empty($not_in)) {
        $dataset_query->condition('sid', $not_in, 'NOT IN');
        $index_query->condition('sid', $not_in, 'NOT IN');
      }
    }
    // If enabled: exclude specific content types.
    if (_multisite_search_get_setting('multisite_search_exclude_types', '')) {
      $exclude_types = explode("\r\n", _multisite_search_get_setting('multisite_search_exclude_types', ''));
      // sid NOT IN (SELECT nid FROM {node} WHERE type IN ($exclude_types))"
      $not_in = db_query('SELECT nid FROM {node} WHERE type IN (:exclude_types)', array(':exclude_types' => $exclude_types))->fetchCol();
      if (!empty($not_in)) {
        $dataset_query->condition('sid', $not_in, 'NOT IN');
        $index_query->condition('sid', $not_in, 'NOT IN');
      }
    }
    
    db_set_active(); // return to default site
    
    // INSERT INTO {multisite_search_dataset} SELECT sid, type, data, 'drupal_test7_main.' AS subdmn_id FROM prefix.search_dataset
    $database_insert = db_insert('multisite_search_dataset')
      ->from($dataset_query)
      ->execute();
    
    // INSERT INTO {multisite_search_index} (word, sid, type, subdmn_id, score) SELECT word, sid, type, 'prefix' as subdmn_id, score FROM prefix.search_index
    $index_insert = db_insert('multisite_search_index')
      ->from($index_query)
      ->execute();
  }

  // Drupal's core search hook_cron function registers this as a shutdown function. It will
  // potentially fire after this function, but since we're updating from the multisite_search_index
  // and not the core search_index or search_total, this is no problem.
  // See search_update_totals() on line 281 of search.module.

  $res3 = db_query("SELECT DISTINCT (word) FROM {multisite_search_index}");
  // @TODO - change to default obj
  while ($result3 = $res3->fetchAssoc()) {
    // for each word update search total
    $word = $result3['word'];
    $total = db_query("SELECT SUM(score) FROM {multisite_search_index} WHERE word = :word", array(':word' => $word))->fetchCol();
    // Apply Zipf's law to equalize the probability distribution
    $count = log10(1 + 1/(max(1, $total[0])));
    // no need to "update" any rows since we truncated above
    //db_query("INSERT INTO {multisite_search_total} (word, count) VALUES ('%s', %f)", $word, $total);
    $nid = db_insert('multisite_search_total')
      ->fields(array(
        'word' => $word,
        'count' => $count,
      ))
      ->execute();
  }
}

/**
 * Implements hook_search_info().
 */
function multisite_search_search_info() {
  return array(
    // Used on search tab
    'title' => t(_multisite_search_get_setting('multisite_search_tab_label', 'Multisite search')),
    'path' => 'multisite_search',
    'conditions_callback' => '',
  );
}

/**
 * Implements hook_search_reset().
 */
function multisite_search_reset() {
  // currently nothing
}

/**
 * Implements hook_search_execute().
 * @TODO revise this code
 */
function multisite_search_search_execute($keys = NULL, $conditions = NULL) {
  // Search the index for the keywords that were entered.
  // Build matching conditions
  
  // @see node_search_execute()
  // Build matching conditions
  $query = db_select('multisite_search_index', 'i', array('target' => 'slave'))
    //->extend('SearchQuery')
    ->extend('MultisiteSearchQuery')
    ->extend('PagerDefault');
  //$query->join('node', 'n', 'n.nid = i.sid');
  $query->searchExpression($keys, 'node');
  
  // Only continue if the first pass query matches.
  // @see SearchQuery::executeFirstPass()
  if (!$query->executeFirstPass()) {
    return array();
  }

  // Add the ranking expressions.
  //_node_rankings($query);

  // Load results.
  $find = $query
    ->limit(10)
    ->execute();
  
  // Load results
  $results = array();
  foreach ($find as $item) {
    
    // get site table prefix 
    $prefixes = explode('.', $item->subdmn_id);
    $db_prefix = $prefixes[0];
    $tbl_prefix = $prefixes[1]; 
    // get this table prefix item site url 
    
    $site = db_query('SELECT * FROM {multisite_search_sites} WHERE db_prefix = :db_prefix AND table_prefix = :table_prefix', array(':db_prefix' => $db_prefix, ':table_prefix' => $tbl_prefix))->fetchObject();
        
    // get default database values
    $default_db = Database::getConnectionInfo('default');
    $temp_multisite_db = $default_db['default'];
    $temp_multisite_db['database'] = $site->db_prefix; // overwrite database name
    $temp_multisite_db['prefix']['default'] = $site->table_prefix; // overwrite database prefix
    // @see http://api.drupal.org/api/drupal/includes%21database%21database.inc/function/Database%3A%3AaddConnectionInfo/7
    Database::addConnectionInfo('multisite_search_' . $site->site_id, 'default', $temp_multisite_db);
    db_set_active('multisite_search_' . $site->site_id);

    // Build the node body.
    // Render the node.
    $node = node_load($item->sid);
    $build = node_view($node, 'search_result');
    unset($build['#theme']);
    $node->rendered = drupal_render($build);

    // Fetch comments for snippet.
    //$node->rendered .= ' ' . module_invoke('comment', 'node_update_index', $node);

    $extra = module_invoke_all('node_search_result', $node);

    $uri = entity_uri('node', $node);
    $results[] = array(
      //'link' => url($uri['path'], array_merge($uri['options'], array('absolute' => TRUE))),
      'link' => url($site->site_url . '/' . $uri['path'], array_merge($uri['options'], array('absolute' => TRUE))),
      'type' => check_plain(node_type_get_name($node)), 
      'title' => $node->title, 
      'user' => theme('username', array('account' => $node)), 
      'date' => $node->changed, 
      'node' => $node, 
      'extra' => $extra, 
      'score' => $item->calculated_score, 
      'snippet' => search_excerpt($keys, $node->rendered), 
      'language' => entity_language('node', $node),
      'site_url' => $site->site_url,
      'site_name' => $site->site_name,
    );
    db_set_active(); // return to default database (the Drupal site running this query)
  }

  return $results;
}

/* local functions */
/**
 * _multisite_search_get_path_alias()
 *
 * Helper function - manually searchs the path table and retrieves the path alias, 
 * if there is one.
 */
function _multisite_search_get_path_alias($path, $path_language = '', $prefix) {
  $result = $path;
  if ($alias = _multisite_search_lookup_path('alias', $path, $path_language, $prefix)) {
    $result = $alias;
  }
  return $result;
}
/**
 * _multisitie_search_lookup_path()
 *
 * Helper function - search path table.
 */
function _multisite_search_lookup_path($action, $path = '', $path_language = '', $prefix = '') {
  global $language;

  $path_language = $path_language ? $path_language : $language->language;

  if (isset($map[$path_language][$path])) {
    return $map[$path_language][$path];
  }
  // Get the most fitting result falling back with alias without language
  //$alias = db_result(db_query("SELECT dst FROM " . $prefix . "url_alias WHERE src = '%s' AND language IN('%s', '') ORDER BY language DESC, pid DESC", $path, $path_language));
 
  return $alias;
}

/**
 * _multisite_search_set_active_database()
 *
 * Checks if the "multisite_search" database has been set in settings.php.
 * If so, run db_set_active() to change the database.
 * IMPORTANT - You MUST run db_set_active() with no parameters after this function and the query!!
 */
function _multisite_search_set_active_database() {
  global $databases;
  if (isset($databases['multisite_search'])) {
    db_set_active('multisite_search');
  } else {
    db_set_active();
  }
}

/**
 * _multisite_search_db_query()
 *
 * runs the $query on the correct database
 * Note: Username and password are copied from 'default'
 * Note: $options['target'] will be overwritten with the values from $site
 */
function _multisite_search_db_query($site, $query, $args = array(), $options = array()) {
  // get default database values
  $default_db = Database::getConnectionInfo('default');
  $temp_multisite_db = $default_db['default'];
  $temp_multisite_db['database'] = $site['db_prefix']; // overwrite database name
  $temp_multisite_db['prefix']['default'] = $site['table_prefix']; // overwrite database prefix
  //dpm($temp_multisite_db);
  // @see http://api.drupal.org/api/drupal/includes%21database%21database.inc/function/Database%3A%3AaddConnectionInfo/7
  Database::addConnectionInfo('multisite_search', $site['site_id'], $temp_multisite_db);
  db_set_active('multisite_search');
  // set target; @see http://api.drupal.org/api/drupal/includes%21database%21database.inc/function/db_query/7
  $options['target'] = $site['site_id'];
  $db_query = db_query($query, $args, $options);
  db_set_active();
  return $db_query;
}

/**
 * _multisite_search_get_site()
 *
 * Helper function - return site array.
 */
function _multisite_search_get_site($site_id) {
  // equivalent to:
  // SELECT site_id, db_prefix, table_prefix, site_url, site_name, weight
  // FROM {multisite_search_sites}
  // WHERE site_id = $site_id
  $result = db_select('multisite_search_sites', 's')
    ->fields('s')
    ->condition('site_id', $site_id)
    ->execute()
    ->fetchAssoc();

  return $result;
}

/**
 * _multisite_search_update_site()
 *
 * Helper function - add or update a site row.
 */
function _multisite_search_update_site($site) {
  //dpm($site);
  db_merge('multisite_search_sites')
    ->key(array('site_id' => $site['site_id']))
    ->fields(array(
      'site_name' => $site['site_name'],
      'site_url' => $site['site_url'],
      'db_prefix' => $site['db_prefix'],
      'table_prefix' => $site['table_prefix'],
    ))
    ->execute();
}

/**
 * _multisite_search_delete_site()
 *
 * Helper function - delete a site from Multisite Search tables.
 */
function _multisite_search_delete_site($site) {
  $subdmn_id = $site['table_prefix'];
  // poorly named table column; subdmn_id = table_prefix
  // DELETE FROM {multisite_search_sites} WHERE site_id = $site[site_id]
  db_delete('multisite_search_sites')
    ->condition('site_id', $site['site_id'])
    ->execute();
  // DELETE FROM {multisite_search_sites} WHERE site_id = $subdmn_id
  db_delete('multisite_search_dataset')
    ->condition('subdmn_id', $subdmn_id)
    ->execute();
  // DELETE FROM {multisite_search_index} WHERE subdmn_id = $subdmn_id
  db_delete('multisite_search_index')
    ->condition('subdmn_id', $subdmn_id)
    ->execute();

  return TRUE;
}

/**
 * _multisite_search_get_setting()
 *
 * Helper function - retrieve a setting from the multisite_search_settings table
 * @see variable_get()
 */
function _multisite_search_get_setting($name, $default) {
  // SELECT * FROM {multisite_search_settings} WHERE name = $name
  $result = db_select('multisite_search_settings', 'ms')
    ->fields('ms', array('value'))
    ->condition('name', $name)
    ->execute()
    ->fetchAssoc();

  if (!empty($result['value'])) {
    /* JSON decode */
    return unserialize($result['value']);
  }
  return $default;
}

/**
 * _multisite_search_set_setting()
 *
 * Helper function - set a settings in the multisite_search_settings table
 * @see variable_set()
 */
function _multisite_search_set_setting($name, $value) {
  $serialized_value = serialize($value);
  // db_merge() does UPDATE if the key exists, INSERT otherwise
  db_merge('multisite_search_settings')
    ->key(array('name' => $name))
    ->fields(array(
      'value' => $serialized_value,
    ))
    ->execute();
}

/**
 * _multisite_search_del_setting()
 *
 * Helper function - delete setting in multisite_search_settings table
 * @see variable_del()
 */
function _multisite_search_del_setting($name) {
  // DELETE FROM {multisite_search_settings} WHERE name = $name
  db_delete('multisite_search_settings')
    ->condition('name', $name)
    ->execute();
}
