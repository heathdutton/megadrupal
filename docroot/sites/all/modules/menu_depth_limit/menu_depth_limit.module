<?php

/**
 * @file
 * Written by Henri MEDOT <henri.medot[AT]absyx[DOT]fr>
 * http://www.absyx.fr
 */

/**
 * Implements hook_form_FORM_ID_alter(); alter menu_edit_menu.
 */
function menu_depth_limit_form_menu_edit_menu_alter(&$form, &$form_state, $form_id) {
  for ($n = MENU_MAX_DEPTH; $n > 0; $n--) {
    $options[$n] = $n;
  }
  $form['depth_limit'] = array(
    '#type' => 'select',
    '#title' => t('Depth limit'),
    '#description' => t('The maximum depth of the menu tree.'),
    '#default_value' => variable_get('menu_depth_limit__'. $form['old_name']['#value'], MENU_MAX_DEPTH),
    '#options' => $options,
  );
}

/**
 * Implements hook_menu_insert().
 */
function menu_depth_limit_menu_insert($menu) {
  menu_depth_limit_menu_update($menu);
}

/**
 * Implements hook_menu_update().
 */
function menu_depth_limit_menu_update($menu) {
  if (!empty($menu['depth_limit'])) {
    $name = 'menu_depth_limit__'. $menu['menu_name'];
    if ($menu['depth_limit'] < MENU_MAX_DEPTH) {
      variable_set($name, $menu['depth_limit']);
    }
    else {
      variable_del($name);
    }
  }
}

/**
 * Implements hook_menu_delete().
 */
function menu_depth_limit_menu_delete($menu) {
  variable_del('menu_depth_limit__'. $menu['menu_name']);
}

/**
 * Implements hook_form_FORM_ID_alter(); alter menu_overview_form.
 */
function menu_depth_limit_form_menu_overview_form_alter(&$form, &$form_state, $form_id) {
  $form['#post_render'][] = '_menu_depth_limit_menu_overview_form_post_render';
}

function _menu_depth_limit_menu_overview_form_post_render($content, $element) {
  $limit = menu_depth_limit_get($element['#menu']['menu_name']);
  if ($limit < MENU_MAX_DEPTH) {
    $javascript = &drupal_static('drupal_add_js', array());
    if (isset($javascript['settings']['data'])) {
      foreach ($javascript['settings']['data'] as $i => $data) {
        if (isset($data['tableDrag']['menu-overview']['menu-plid'])) {
          $found = TRUE;
          break;
        }
      }
      if (!empty($found)) {
        array_splice($javascript['settings']['data'], $i, 1);
        if ($limit > 1) {
          drupal_add_tabledrag('menu-overview', 'match', 'parent', 'menu-plid', 'menu-plid', 'menu-mlid', TRUE, $limit - 1);
        }
      }
    }
  }
  return $content;
}

/**
 * Implementation of hook_form_FORM_ID_alter(); alter menu_edit_item.
 */
function menu_depth_limit_form_menu_edit_item_alter(&$form, &$form_state, $form_id) {
  if (isset($form['parent']['#options'])) {
    $relative_depth = !empty($form['has_children']['#value']) && ($item = $form['original_item']['#value']) ? menu_link_children_relative_depth($item) : 0;
    $form['parent']['#options'] = menu_depth_limit_filter_parent_options($form['parent']['#options'], $relative_depth);
    // @todo: provide an updated description instead of removing the default one.
    unset($form['parent']['#description']);
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter(); alter node_form.
 */
function menu_depth_limit_form_node_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['menu']['link']['parent']['#options'])) {
    $relative_depth = MENU_MAX_DEPTH - 1 - $form['#node']->menu['parent_depth_limit'];
    $form['menu']['link']['parent']['#options'] = menu_depth_limit_filter_parent_options($form['menu']['link']['parent']['#options'], $relative_depth);
  }
}

/**
 * Implements hook_menu_alter(); override menu_parent_options_js().
 */
function menu_depth_limit_menu_alter(&$items) {
  $items['admin/structure/menu/parents']['page callback'] = '_menu_depth_limit_parent_options_js';
}

function _menu_depth_limit_parent_options_js() {
  $available_menus = array();
  if (isset($_POST['menus']) && count($_POST['menus'])) {
    foreach ($_POST['menus'] as $menu) {
      $available_menus[$menu] = $menu;
    }
  }
  $options = _menu_get_options(menu_get_menus(), $available_menus, array('mlid' => 0));
  $options = menu_depth_limit_filter_parent_options($options);

  drupal_json_output($options);
}



/*
 * Filter parent options.
 */
function menu_depth_limit_filter_parent_options($options, $relative_depth = 0, $indent = '--') {
  $menus_options = array();
  foreach ($options as $key => $option) {
    list($menu_name, ) = explode(':', $key);
    $menus_options[$menu_name][$key] = $option;
  }

  $options = array();
  foreach ($menus_options as $menu_name => $menu_options) {
    $limit = menu_depth_limit_get($menu_name);
    if ($limit < MENU_MAX_DEPTH) {
      $indents = str_repeat($indent, $limit - $relative_depth);
      foreach ($menu_options as $key => $option) {
        if (strpos($option, $indents) !== 0) {
          $options[$key] = $option;
        }
      }
    }
    else {
      $options += $menu_options;
    }
  }
  return $options;
}

/*
 * Get the computed depth limit for a given menu.
 */
function menu_depth_limit_get($menu_name) {
  $computed_limits = &drupal_static(__FUNCTION__, array());

  if (!isset($computed_limits[$menu_name])) {
    $limit = variable_get('menu_depth_limit__'. $menu_name, MENU_MAX_DEPTH);
    if ($limit < MENU_MAX_DEPTH) {
      $depth = db_query('SELECT MAX(depth) FROM {menu_links} WHERE hidden >= 0 AND menu_name = :menu_name', array(':menu_name' => $menu_name))->fetchField();
      if ($depth && $depth > $limit) {
        $limit = $depth;
      }
    }
    $computed_limits[$menu_name] = $limit;
  }

  return $computed_limits[$menu_name];
}
