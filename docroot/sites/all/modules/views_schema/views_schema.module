<?php

/*
 * @file
 *   Functions for the Views Schema module
 */

/**
 * Implements hook_menu().
 */
function views_schema_menu() {
  $items['admin/structure/views/views_schema_modules'] = array(
    'title' => t('Views Schema modules'),
    'description' => 'Make database schema accessable by views',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('views_schema_admin_settings'),
    'access arguments' => array('administer views schema'),
    'file' => 'views_schema.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 99,
  );

  return $items;
}

function views_schema_permission() {
  return array(
      'administer views schema' => array(
      'title' => t('Administer modules'),
      'description' => t('Enable and disable modules for auto generate table description for Views.'),
    ),
  );
}

/**
 * Implements hook_views_api().
 */
function views_schema_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'views_schema') . '/includes/views'
  );
}

function views_schema_create_definition(&$data, $table) {
  $data[$table['name']]['table']['group'] = t('[@module] Table @table', array('@module' => $table['module'], '@table' => $table['name']));

  views_schema_create_base_definition($data, $table);

  foreach ($table['fields'] as $name => $field) {
    $field['name'] = $name;
    $field['title'] = views_schema_sanitize_name($name);
    $data[$table['name']][$name] = views_schema_create_column($field);
  }

  views_schema_create_foreign_key_definition($data, $table);
}

function views_schema_create_column($field) {
  $definition = array(
    'title' => $field['title'],
    'help' => t('No help text.'),

    'field' => views_schema_create_field($field),
    'sort' => views_schema_create_sort($field),
    'filter' => views_schema_create_filter($field),
    'argument' => views_schema_create_argument($field),
  );

  return $definition;
}

function views_schema_create_base_definition(&$data, $table) {
  static $weight = 20;
  if (!empty($table['primary key'])) {
    $data[$table['name']]['table']['base'] = array(
      'field' => $table['primary key'][0],
      'title' => t('[@module] @table', array('@module' => $table['module'], '@table' => $table['name'])),
      'help' => t('Auto-generated from database table %name.', array('%name' => $table['name'])),
      'weight' => $weight++,
    );
    if (!empty($table['database'])) {
      $data[$table['name']]['table']['base']['database'] = $table['database'];
    }
  }
}

function views_schema_create_foreign_key_definition(&$data, $table) {
  if (isset($table['foreign keys']) && is_array($table['foreign keys'])) {
    foreach ($table['foreign keys'] as $key_name => $definition) {
      // @todo Views does not handle composite keys. Limitation of Drupal. http://views-help.doc.logrus.com/help/views/api-tables
      if (count($definition['columns']) === 1) {
        foreach ($definition['columns'] as $column => $referenced_column) {
          $data[$table['name']][$column]['relationship'] = array(
            'base' => $definition['table'],
            'base field' => $referenced_column,
            'handler' => 'views_handler_relationship',
            'label' => $definition['table'],
            'title' => t('[@module] @table references @ref_table ($ref_column)', array('@module' => $table['module'], '@table' => $table['name'], '@ref_table' => $definition['table'], '@ref_column' => $referenced_column)),
            'help' => t('Auto-generated from database table %name.', array('%name' => $table['name'])),
          );
        }
      }
    }
  }
}

function views_schema_create_field($field) {
  $handler = array(
    'handler' => 'views_handler_field',
    'click sortable' => TRUE,
  );

  switch ($field['type']) {
    case 'serial':
    case 'int':
      $handler['handler'] = 'views_handler_field_numeric';
      break;
  }

  return $handler;
}

function views_schema_create_sort($field) {
  $handler = array(
    'handler' => 'views_handler_sort',
  );

  switch ($field['type']) {
    // No intelligent default rules.
  }

  return $handler;
}

function views_schema_create_filter($field) {
  $handler = array(
    'handler' => 'views_handler_filter',
  );

  switch ($field['type']) {
    case 'serial':
    case 'int':
      $handler['handler'] = 'views_handler_filter_numeric';
      break;
    case 'varchar':
    case 'text':
      $handler['handler'] = 'views_handler_filter_string';
      break;
  }

  return $handler;
}

function views_schema_create_argument($field) {
  $handler = array(
    'handler' => 'views_handler_argument',
  );

  switch ($field['type']) {
    case 'serial':
    case 'int':
      $handler['handler'] = 'views_handler_argument_numeric';
      break;
    case 'varchar':
    case 'text':
      $handler['handler'] = 'views_handler_argument_string';
      break;
  }

  return $handler;
}


function views_schema_sanitize_name($name) {
  return implode(' ', array_map('drupal_ucfirst', explode('_', $name)));
}
