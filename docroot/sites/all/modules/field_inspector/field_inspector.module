<?php

/**
 * Implements hook_menu().
 */
function field_inspector_menu() {
  $items = array();

  $items['admin/config/development/field-inspector'] = array(
    'title' => 'Field Inspector',
    'description' => 'Inspect and export the structure of fields.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('field_inspector_inspection_form'),
    'access arguments' => array('access field inspector'),
  );

  return $items;
}

function field_inspector_permission() {
  return array(
    'access field inspector' => array(
      'title' => t('Access Field Inspector'),
      'description' => t('Inspect and export the structure of fields.'),
    ),
  );
}

function field_inspector_inspection_form($form, &$form_state) {
  $form = array();

  $form['entity_type'] = array(
    '#title' => t('Entity type'),
    '#type' => 'select',
    '#options' => field_inspector_map_entity_types(),
    '#ajax' => array(
      'callback' => 'field_inspector_entity_callback',
      'wrapper' => 'bundle-replacement-container',
    ),
    '#required' => TRUE,
  );

  if (isset($form_state['values']['entity_type'])) {
    $bundles = field_inspector_map_bundles($form_state['values']['entity_type']);
  }
  else {
    $bundles = array();
  }

  $form['bundle'] = array(
    '#title' => t('Bundle'),
    '#type' => 'select',
    '#options' => $bundles,
    '#ajax' => array(
      'callback' => 'field_inspector_bundle_callback',
      'wrapper' => 'fields-replacement-container',
    ),
    '#required' => TRUE,
    '#prefix' => '<div id="bundle-replacement-container">',
    '#suffix' => '</div>',
  );

  // Build the list of fields for the selected entity type and bundle
  if (isset($form_state['values']['bundle'])) {
    $fields = field_inspector_map_fields($form_state['values']['entity_type'], $form_state['values']['bundle']);
  }
  else {
    $fields = array();
  }

  $form['fields'] = array(
    '#title' => t('Fields'),
    '#description' => t('Select the field you\'d like to operate on.'),
    '#options' => $fields,
    '#type' => 'checkboxes',
    '#prefix' => '<div id="fields-replacement-container">',
    '#suffix' => '</div>',
  );

  // Field settings
  $form['field_export'] = array(
    '#title' => t('Export field definition'),
    '#type' => 'checkbox',
    '#default_value' => TRUE,
  );

  $form['field_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Field export settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#states' => array(
      'visible' => array(
        ':input[name="field_export"]' => array('checked' => TRUE),
      ),
    ),
  );
  $form['field_settings']['field_include_storage'] = array(
    '#title' => t('Include storage information'),
    '#type' => 'checkbox',
    '#default_value' => FALSE,
  );
  $form['field_settings']['field_include_bundles'] = array(
    '#title' => t('Include bundle list'),
    '#type' => 'checkbox',
    '#default_value' => FALSE,
  );
  $form['field_settings']['field_include_id'] = array(
    '#title' => t('Include field id'),
    '#type' => 'checkbox',
    '#default_value' => FALSE,
  );
  $form['field_settings']['field_include_module'] = array(
    '#title' => t('Include field module key'),
    '#type' => 'checkbox',
    '#default_value' => FALSE,
  );
  $form['field_settings']['field_include_columns'] = array(
    '#title' => t('Include columns'),
    '#type' => 'checkbox',
    '#default_value' => FALSE,
  );
  $form['field_settings']['field_include_foreign_keys'] = array(
    '#title' => t('Include foreign keys'),
    '#type' => 'checkbox',
    '#default_value' => FALSE,
  );
  $form['field_settings']['field_include_indexes'] = array(
    '#title' => t('Include indexes'),
    '#type' => 'checkbox',
    '#default_value' => FALSE,
  );
  $form['field_settings']['field_include_deleted'] = array(
    '#title' => t('Include deleted key'),
    '#type' => 'checkbox',
    '#default_value' => FALSE,
  );
  $form['field_settings']['field_include_entity_types'] = array(
    '#title' => t('Include entity_types'),
    '#type' => 'checkbox',
    '#default_value' => FALSE,
  );
  $form['field_settings']['field_include_create_field'] = array(
    '#title' => t('Include field_create_field()'),
    '#type' => 'checkbox',
    '#default_value' => TRUE,
  );

  // Instance settings
  $form['instance_export'] = array(
    '#title' => t('Include instance definition'),
    '#type' => 'checkbox',
    '#default_value' => TRUE,
  );

  $form['instance_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Field instance export settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#states' => array(
      'visible' => array(
        ':input[name="instance_export"]' => array('checked' => TRUE),
      ),
    ),
  );
  $form['instance_settings']['instance_include_deleted'] = array(
    '#title' => t('Include deleted key'),
    '#type' => 'checkbox',
    '#default_value' => FALSE,
  );
  $form['instance_settings']['instance_include_widget_type'] = array(
    '#title' => t('Include top level widget type key'),
    '#type' => 'checkbox',
    '#default_value' => FALSE,
  );
  $form['instance_settings']['instance_include_id'] = array(
    '#title' => t('Include id'),
    '#type' => 'checkbox',
    '#default_value' => FALSE,
  );
  $form['instance_settings']['instance_include_field_id'] = array(
    '#title' => t('Include field_id'),
    '#type' => 'checkbox',
    '#default_value' => FALSE,
  );
  $form['instance_settings']['instance_include_module_keys'] = array(
    '#title' => t('Include module keys'),
    '#type' => 'checkbox',
    '#default_value' => FALSE,
  );
  $form['instance_settings']['instance_include_create_instance'] = array(
    '#title' => t('Include field_create_instance()'),
    '#type' => 'checkbox',
    '#default_value' => TRUE,
  );


  // Submit
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#ajax' => array(
      'callback' => 'field_inspector_output_callback',
      'wrapper' => 'fields-output-container',
    ),
  );

  // output container
  $form['ouptut'] = array(
    '#type' => 'markup',
    '#prefix' => '<div id="fields-output-container">',
    '#suffix' => '</div>',
  );

  return $form;
}

/**
 * Ajax callback for field_inspector_inspection_form.
 */
function field_inspector_bundle_callback($form, $form_state) {
  return $form['fields'];
}

/**
 * Ajax callback for field_inspector_inspection_form.
 */
function field_inspector_entity_callback($form, $form_state) {
  return $form['bundle'];
}

/**
 * Ajax callback for field_inspector_inspection_form.
 */
function field_inspector_output_callback($form, &$form_state) {
  ctools_include('export');
  $element = array();
  $data = '';
  if (isset($form_state['values']['op']) && !empty($form_state['values']['fields'])) {
    foreach ($form_state['values']['fields'] as $field) {
      if ($field == FALSE) {
        continue;
      }

      // Handle field definition
      if ($form_state['values']['field_export']) {
        $field_info = field_info_field($field);

        // field settings
        if (!$form_state['values']['field_include_entity_types']) unset($field_info['entity_types']);
        if (!$form_state['values']['field_include_indexes']) unset($field_info['indexes']);
        if (!$form_state['values']['field_include_deleted']) unset($field_info['deleted']);
        if (!$form_state['values']['field_include_columns']) unset($field_info['columns']);
        if (!$form_state['values']['field_include_foreign_keys']) unset($field_info['foreign keys']);
        if (!$form_state['values']['field_include_id']) unset($field_info['id']);
        if (!$form_state['values']['field_include_module']) unset($field_info['module']);
        if (!$form_state['values']['field_include_storage']) unset($field_info['storage']);
        if (!$form_state['values']['field_include_bundles']) unset($field_info['bundles']);

        $field_data = ctools_var_export($field_info);

        if ($form_state['values']['field_include_create_field']) {
          $field_data = '$field = ' . $field_data . ";\nfield_create_field(\$field);\n\n";
        }
        $data .= $field_data;
      }

      // Handle instance definition
      if ($form_state['values']['instance_export']) {
        $field_info_instance = field_info_instance($form_state['values']['entity_type'], $field, $form_state['values']['bundle']);

        if (!$form_state['values']['instance_include_deleted']) unset($field_info_instance['deleted']);
        if (!$form_state['values']['instance_include_widget_type']) unset($field_info_instance['widget_type']);
        if (!$form_state['values']['instance_include_id']) unset($field_info_instance['id']);
        if (!$form_state['values']['instance_include_field_id']) unset($field_info_instance['field_id']);

        if (!$form_state['values']['instance_include_module_keys']) {
          foreach ($field_info_instance['display'] as $key => $value) {
            unset($field_info_instance['display'][$key]['module']);
          }
          unset($field_info_instance['widget']['module']);
        }

        $instance_data = ctools_var_export($field_info_instance);

        if ($form_state['values']['instance_include_create_instance']) {
          $instance_data = '$instance = ' . $instance_data . ";\nfield_create_instance(\$instance);\n\n";
        }
        $data .= $instance_data;
      }
    }

    $element['#prefix'] = '<div id="fields-output-container">';
    $element['#suffix'] = '</div>';
    $element['#type'] = 'textarea';
    $element['#disabled'] = TRUE;
    $element['#rows'] = substr_count($data, "\n") + 1;
    $element['#title'] = t('Exported info');
    $element['#value'] = $data;
  }

  return $element;
}

/**
 * Provide a mapped version of entity types and their labels for use as form
 * options.
 */
function field_inspector_map_entity_types() {
  $options = array();
  $types = entity_get_info();
  foreach ($types as $name => $type) {
    if ($type['fieldable'] == TRUE) {
      $options[$name] = $type['label'];
    }
  }
  return $options;
}

/**
 * Provide a mapped version of bundles and their labels for use as form
 * options.
 */
function field_inspector_map_bundles($type) {
  $options = array();
  $entity_info = entity_get_info($type);
  foreach ($entity_info['bundles'] as $name => $type) {
    $options[$name] = $type['label'];
  }
  return $options;
}

/**
 * Return an array of field labels, keyed by field name.
 *
 * @param  $entity_type
 * @param  $bundle
 * @return array
 */
function field_inspector_map_fields($entity_type, $bundle) {
  $options = array();

  $fields = field_info_instances($entity_type, $bundle);

  foreach ($fields as $field) {
    $options[$field['field_name']] = $field['label'];
  }

  return $options;
}
