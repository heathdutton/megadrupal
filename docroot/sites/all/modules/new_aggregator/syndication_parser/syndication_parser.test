<?php
// $I:$

class SyndicationParserTestCase extends DrupalWebTestCase {
  
  /**
   * Implementation of setUp().
   */
  function setUp() {
    parent::setUp('syndication_parser');
    drupal_function_exists('_syndication_parser_detect_feed_in_html');
  }
  
}

class SyndicationParserFeedDetectTestCase extends SyndicationParserTestCase {
  
  /**
   * Implementation of getInfo().
   */
  function getInfo() {
    return array(
      'name' => t('Feed autodetection functionality'),
      'description' => t('Test HTML feed detection using both offline and online samples. These tests may require lots of time. It depends on the connection speed to the internet because the half of the feed samples are online. Some of the tests will fail because of the bug of the online test suite.'),
      'group' => t('Syndication Parser'),
    );
  }
  
  /**
   * Tests _syndication_parser_detect_feed_in_html function.
   */
  function testSyndicationParserDetectFeed() {
    // Offline feed detection tests, they're really basic.
    $sites = $this->getHTMLSites();
    foreach ($sites as $site) {
      $this->assertEqual($site['feed'], _syndication_parser_detect_feed_in_html($site['site'], $site['url']));
    }
    // Check if it's possible to access to outside network;
    $result = drupal_http_request('http://diveintomark.org');
    
    if (!isset($result->error) && $result->code == 200) {
      // diveintomark.org feed detection tests.
      $url = "http://diveintomark.org/tests/client/autodiscovery/html4-";
      for ($i = 1; $i < 58; $i++) {
        $id = sprintf('%03d', $i);
        $result = syndication_parser_download($url . $id . '.html');
        if ($result['data'] !== FALSE) {
          $result_feed = file_get_contents($result['url']);
          $portion = strstr($result_feed, $url . $id . '.html');
          $this->assertNotEqual(FALSE, $portion, $url . $id . '.html');
        }
      }
    }
  }
  
  /**
   * Offline samples for feed autodetection.
   */
  function getHTMLSites() {
    return array(
      array(
        'site' => '<html><head><link rel="alternate" type="application/rss+xml" title="drupal.org RSS" href="http://drupal.org/node/feed" /></head></html>',
        'url' => 'http://www.drupal.org',
        'feed' => 'http://drupal.org/node/feed'
      ),
      array(
        'site' => '<html><head><link rel="alternate" type="application/rss+xml" title="CNN - Top Stories [RSS]" href="http://rss.cnn.com/rss/edition.rss"></head></html>',
        'url' => 'http://www.cnn.com',
        'feed' => 'http://rss.cnn.com/rss/edition.rss'
      ),
      array(
        'site' => '<html><head><base href="http://weblabor.hu" /><link rel="alternate" type="application/rss+xml" title="RSS - Tartalom" href="/rss" /></head></html>',
        'url' => 'http://weblabor.hu',
        'feed' => 'http://weblabor.hu/rss'
      ),
      array(
        'site' => '<html><head><link rel="alternate" type="application/rss+xml" title="Magyar Nemzet Online - Rss" href="/portal/rss" /></head></html>',
        'url' => 'http://mno.hu/',
        'feed' => 'http://mno.hu/portal/rss'),
      array(
        'site' => '<html><head><link rel="alternate" type="application/atom+xml" href="http://www.php.net/releases.atom" title="PHP Release feed" /></head></html>',
        'url' => 'http://www.php.net',
        'feed' => 'http://www.php.net/releases.atom'),
    );
  }
  
}


class SyndicationParserFeedParse extends SyndicationParserTestCase {

  /**
   * Implementation of getInfo().
   */
  function getInfo() {
    return array(
      'name' => t('Feed parsing functionality'),
      'description' => t('Test parsing various feed types and capabilities.'),
      'group' => t('Syndication Parser'),
    );
  }
  
  /**
   * Tests feed parsing capability.
   */
  function testSyndicationParserParseFeed() {
    $test_dir = drupal_get_path('module', 'syndication_parser') . '/test_xml';
    $files = $this->listTestFiles($test_dir);
    if (is_array($files)) {
      foreach ($files as $xml_file) {
        @ $data = simplexml_load_file($xml_file);
        $feed_handler = '_syndication_parser_' . _syndication_parser_format_detect($data);
        if (drupal_function_exists($feed_handler)) {
          $feed = $feed_handler($data);
          $inc_file = $xml_file . '.inc';
          include($inc_file);
          $this->assertTrue($result, $xml_file);
        }
      }
    }
  }
  
  function listTestFiles($from = '.') {
    if (!is_dir($from)) {
      return FALSE;
    }
    $files = array();
    if ($dh = opendir($from)) {
      while(FALSE !== ($file = readdir($dh))) {
        // Skip '.' and '..'
        if ($file == '.' || $file == '..') {
          continue;
        }
        $exts = split("[/\\.]", $file);
        $ext = array_pop($exts);
        $path = $from . '/' . $file;
        if (is_dir($path)) {
          $files = array_merge($files, $this->listTestFiles($path));
        }
        elseif ($ext == 'xml' && is_file($path . '.inc')) {
          $files[] = $path;
        }
      }
      closedir($dh);
    }
    return $files;
  }
  
}
