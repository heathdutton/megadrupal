<?php
// $Id: aggregator.install,v 1.10 2008/07/20 18:06:12 aronnovak Exp $

/**
 * Implementation of hook_install().
 */
function aggregator_install() {
  // Create tables.
  drupal_install_schema('aggregator');
}

/**
 * Implementation of hook_uninstall().
 */
function aggregator_uninstall() {
  // Remove tables.
  drupal_uninstall_schema('aggregator');
}

/**
 * Implementation of hook_enable().
 */
function aggregator_enable() {
  $modules = module_implements('aggregator_parse');
  if (!count($modules)) {
    drupal_set_message(t('Enable at least one parser module (e. g. Syndication Parser) for using aggregator.'), 'error');
  }
  // Creates the content-type for the aggregator feeds.
  if (!in_array('feed', array_keys(node_get_types()))) {
    $type_name = 'feed';
    $type = array(
      'type' => $type_name,
      'name' => st('Feed'),
      'module' => 'node',
      'description' => st("A feed is for aggregating syndicated content from other sites."),
      'custom' => TRUE,
      'modified' => TRUE,
      'locked' => FALSE,
      'help' => '',
      'min_word_count' => '',
    );
    $type = (object) _node_type_set_defaults($type);
    node_type_save($type);
    variable_set('aggregator_parser_' . $type_name, 'syndication_parser');
    variable_set('aggregator_processor_' . $type_name, unserialize('a:1:{s:10:"aggregator";s:10:"aggregator";}'));
    variable_set('aggregator_feed_' . $type_name, 1);
  }
}

/**
 * Implementation of hook_schema().
 */
function aggregator_schema() {
  $schema['aggregator_feed'] = array(
    'description' => t('Stores feeds to be parsed by the aggregator.'),
    'fields' => array(
      'nid' => array(
        'description' => t('The {node}.nid to which this feed belongs.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE
      ),
      'url' => array(
        'type' => 'text',
        'not null' => TRUE,
        'description' => t('URL to the feed.')
      ),
      'checked' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => t('Last time feed was checked for new items, as Unix timestamp.'),
      ),
      'link' => array(
        'type' => 'text',
        'description' => t('The parent website of the feed.'),
      ),
      'image' => array(
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'big',
        'description' => t('An image representing the feed.'),
      ),
      'etag' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => t('Entity tag HTTP response header, used for validating cache.'),
      ),
      'modified' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => t('When the feed was last modified, as a Unix timestamp.'),
      ),
      'hash' => array(
        'description' => t('Stores the hash of the parsed feed structure.'),
        'type' => 'varchar',
        'length' => '32'),
    ),
    'primary key' => array('nid'),
    'unique keys' => array(
      'url'  => array(array('url', 100)),
    ),
  );
  $schema['aggregator_item'] = array(
    'description' => t('Stores the individual items imported from feeds.'),
    'fields' => array(
      'iid'  => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => t('Primary Key: Unique ID for feed item.'),
      ),
      'nid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => t('The {node}.nid to which this item belongs.'),
      ),
      'title' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => t('Title of the feed item.'),
      ),
      'link' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => t('Link to the feed item.'),
      ),
      'author' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => t('Author of the feed item.'),
      ),
      'description' => array(
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'big',
        'description' => t('Body of the feed item.'),
      ),
      'timestamp' => array(
        'type' => 'int',
        'not null' => FALSE,
        'description' => t('Post date of feed item, as a Unix timestamp.'),
      ),
      'guid' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'description' => t('Unique identifier for the feed item.'),
      ),
    ),
    'primary key' => array('iid'),
    'indexes' => array(
      'nid' => array('nid')
    ),
  );

  return $schema;
}
