<?php
// $Id: aggregator.test,v 1.4 2008/07/20 18:06:12 aronnovak Exp $

class AggregatorTestCase extends DrupalWebTestCase {
  private static $prefix = 'simpletest_aggregator_';

  /**
   * Implementation of setUp().
   */
  function setUp() {
    parent::setUp('syndication_parser', 'aggregator');
    $web_user = $this->drupalCreateUser(array('create feed content', 'edit own feed content', 'edit any feed content'));
    $this->drupalLogin($web_user);
    variable_set('aggregator_clear_feed', 999999999999999);
    variable_set('aggregator_parser_feed', 'syndication_parser');
    variable_set('aggregator_processor_feed_feed', unserialize('a:1:{s:10:"aggregator";s:10:"aggregator";}'));
    variable_set('aggregator_feed_feed', 1);
    variable_set('aggregator_vid_feed', 1);
    db_query("INSERT INTO {vocabulary_node_types} (vid, type) VALUES (%d, '%s')", 1, 'feed');
  }

  /**
   * Create an aggregator feed (simulate form submission on admin/content/aggregator/add/feed).
   * 
   * @param $tag
   *   Optional tag for node.
   * 
   * @return $feed Full feed object if possible.
   */
  function createFeed($tag = FALSE) {
    $edit = $this->getFeedEditArray();
    if (!empty($tag)) {
      $edit["taxonomy[tags][1]"] = $tag;
    }
    $this->drupalPost('node/add/feed', $edit, t('Save'));
    $feed = db_fetch_object(db_query("SELECT *  FROM {aggregator_feed} WHERE url='%s'", $edit['url']));
    $this->assertTrue(!empty($feed), t('The feed found in database.'));
    
    return $feed;
  }

  /**
   * Delete an aggregator feed.
   *
   * @param object $feed Feed object representing the feed.
   */
  function deleteFeed($feed) {
    node_delete($feed->nid);
    $feed_nid = db_result(db_query("SELECT COUNT(*) FROM {aggregator_feed} WHERE nid = %d", $feed->nid));
    $this->drupalGet('node/' . $feed->nid);
    $this->assertResponse(404, t('The node has been deleted.'));
    $this->assertEqual($feed_nid, 0, t('The feed data has been deleted.'));
  }

  /**
   * Return a randomly generated feed edit array.
   *
   * @return array Feed array.
   */
  function getFeedEditArray() {
    $feed_name = $this->randomName(10, self::$prefix);
    $feed_url = url(NULL, array('absolute' => TRUE)) . 'rss.xml?feed=' . $feed_name;
    $edit = array(
      'url' => $feed_url,
    );
    return $edit;
  }

  /**
   * Update feed items (simulate click to admin/content/aggregator/update/$fid).
   *
   * @param object $feed Feed object representing the feed.
   */
  function updateFeedItems(&$feed) {
    // First, let's ensure we can get to the rss xml.
    $this->drupalGet('rss.xml');
    $this->assertResponse(200, t('rss.xml is reachable.'));

    // Our tests are based off of rss.xml, so let's find out how many elements should be related.
    $feed_count = db_result(db_query_range(db_rewrite_sql('SELECT COUNT(*) FROM {node} n WHERE n.promote = 1 AND n.status = 1'), 0, variable_get('feed_default_items', 10)));
    $feed_count = $feed_count > 10 ? 10 : $feed_count;

    // Refresh the feed (simulated link click).
    $this->drupalGet('node/' . $feed->nid . "/refresh");

    // Ensure we have the right number of items.
    ob_start();
    print_r($feed);
    file_put_contents('/tmp/out', ob_get_clean());
    $item_count = db_result(db_query('SELECT COUNT(*) FROM {aggregator_item} WHERE nid = %d', $feed->nid));
    $this->assertEqual($feed_count, $item_count, t('Total items in feed equal to the total items in database (!val1 != !val2)', array('!val1' => $feed_count, '!val2' => $item_count)));
  }

  /**
   * Check if the feed name and url is unique.
   *
   * @param string $feed_url Feed url to check.
   * @return boolean Feed is unique.
   */
  function uniqueFeed($feed_url) {
    $result = db_result(db_query("SELECT COUNT(*) FROM {aggregator_feed} WHERE url='%s'", $feed_url));
    return (1 == $result);
  }
}

class AddFeedTestCase extends AggregatorTestCase {
  /**
   * Implementation of getInfo().
   */
  function getInfo() {
    return array(
      'name' => t('Add feed functionality'),
      'description' => t('Add feed test.'),
      'group' => t('Aggregator')
    );
  }

  /**
   * Create a feed, ensure that it is unique, check the source, and delete the feed.
   */
  function testAddFeed() {
    $feed = $this->createFeed();

    // Check feed data.
    $this->assertEqual($this->getUrl(), url('node/' . $feed->nid, array('absolute' => TRUE)), t('Directed to correct url.'));
    $this->assertTrue($this->uniqueFeed($feed->url), t('The feed is unique.'));

    // Check feed source.
    $this->drupalGet('node/' . $feed->nid);
    $this->assertResponse(200, t('Feed source exists.'));
    $this->assertRaw(t('Refresh'), t('The Refresh tab appears at the node.'));

    // Delete feed.
    $this->deleteFeed($feed);
  }
}

class UpdateFeedTestCase extends AggregatorTestCase {
  /**
   * Implementation of getInfo().
   */
  function getInfo() {
    return array(
      'name' => t('Update feed functionality'),
      'description' => t('Update feed test.'),
      'group' => t('Aggregator')
    );
  }

  /**
   * Create a feed and attempt to update it.
   */
  function testUpdateFeed() {
    $feed = $this->createFeed();
    $node = node_load($feed->nid);
    // Get new feed data array and modify newly created feed.
    $edit = $this->getFeedEditArray();
    $edit['url'] .=  'foobar'; // Change feed URL value
    $this->drupalPost('node/' . $feed->nid . '/edit', $edit, t('Save'));
    $this->assertRaw(t('Feed %name has been updated.', array('%name' => $node->title)), t('Feed %name has been updated.', array('%name' => $node->title)));

    // Check feed data.
    $this->assertEqual($this->getUrl(), url('node/' . $node->nid, array('absolute' => TRUE)));
    // Check if the new URL is found.
    $this->assertTrue($this->uniqueFeed($edit['url']), t('The feed is unique.'));

    // Check feed source.
    $this->drupalGet('aggregator/sources/' . $feed->nid);
    $this->assertResponse(200, t('Feed source exists.'));

    // Delete feed.
    $this->deleteFeed($feed);
  }
}

class RemoveFeedTestCase extends AggregatorTestCase {
  /**
   * Implementation of getInfo().
   */
  function getInfo() {
    return array(
      'name' => t('Remove feed functionality'),
      'description' => t('Remove feed test.'),
      'group' => t('Aggregator')
    );
  }

  /**
   * Remove a feed and ensure that all it services are removed.
   */
  function testRemoveFeed() {
    $feed = $this->createFeed();

    // Delete feed.
    $this->deleteFeed($feed);

    // Check feed source.
    $this->drupalGet('aggregator/sources/' . $feed->nid);
    $this->assertResponse(404, t('Deleted feed source does not exists.'));

    // Check database for feed.
    $result = db_result(db_query("SELECT COUNT(*) FROM {aggregator_feed} WHERE url='%s'", $feed->url));
    $this->assertFalse($result, t('Feed not found in database'));
  }
}

class UpdateFeedItemTestCase extends AggregatorTestCase {
  /**
   * Implementation of getInfo().
   */
  function getInfo() {
    return array(
      'name' => t('Update feed item functionality'),
      'description' => t('Update feed items from a feed.'),
      'group' => t('Aggregator')
    );
  }

  /**
   * Test running "update items" from the 'admin/content/aggregator' page.
   */
  function testUpdateFeedItem() {
    // Create a feed and test updating feed items if possible.
    $feed = $this->createFeed();
    if (!empty($feed)) {
      $this->updateFeedItems($feed);
    }
    $this->deleteFeed($feed);
  }
}

class RemoveFeedItemTestCase extends AggregatorTestCase {
  /**
   * Implementation of getInfo().
   */
  function getInfo() {
    return array(
      'name' => t('Remove feed item functionality'),
      'description' => t('Remove feed items from a feed.'),
      'group' => t('Aggregator')
    );
  }

  /**
   * Test running "remove items" from the 'admin/content/aggregator' page.
   */
  function testRemoveFeedItem() {
    $feed = $this->createFeed();

    // Add and remove feed items and ensure that the count is zero.
    $this->updateFeedItems($feed);
    $this->deleteFeed($feed);
    $count = db_result(db_query('SELECT COUNT(*) FROM {aggregator_item} WHERE nid = %d', $feed->nid));
    $this->assertTrue($count == 0);

    // Delete feed.
    $this->deleteFeed($feed);
  }
}

class CategorizeFeedItemTestCase extends AggregatorTestCase {
  /**
   * Implementation of getInfo().
   */
  function getInfo() {
    return array(
      'name' => t('Categorize feed item functionality'),
      'description' => t('Test feed item categorization.'),
      'group' => t('Aggregator')
    );
  }

  /**
   * If a feed has a category, make sure that the children inherit that
   * categorization.
   */
  function testCategorizeFeedItem() {
    // TODO: Need to add categories to the feed on creation.
    $tag = 'foo';
    $feed = $this->createFeed($tag);
    $this->updateFeedItems($feed);
    
    $this->drupalGet('node/' . $feed->nid);
    $this->assertText($tag, t('The term is associated with the feed node.'));
    $this->drupalGet('aggregator/terms');
    $this->assertText($tag, t('The vocabulary tags appear on the Terms page of aggregator.'));
    $tid = db_result(db_query("SELECT tid FROM {term_data} WHERE name = '%s'", $tag));
    $this->drupalGet('aggregator/terms/' . $tid);
    $first_title = db_result(db_query_range(db_rewrite_sql('SELECT title FROM {node} n WHERE n.promote = 1 AND n.status = 1'), 0, 1));
    $this->assertText($first_title, t('The first item of the feed appears on the term page.')).

    // Delete feed.
    $this->deleteFeed($feed);
  }
}
