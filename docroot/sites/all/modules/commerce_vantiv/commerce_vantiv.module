<?php
/**
 * @file
 * Implements Litle payment services for use in Drupal Commerce.
 */
define('COMMERCE_VANTIV_STATUS_CREDIT', 'CREDIT');
define('COMMERCE_VANTIV_STATUS_CAPTURE', 'CAPTURE');
define('COMMERCE_VANTIV_STATUS_CAPTURED', 'CAPTURED');
define('COMMERCE_VANTIV_STATUS_REFUND', 'REFUND');
define('COMMERCE_VANTIV_STATUS_REFUNDED', 'REFUNDED');
define('COMMERCE_VANTIV_STATUS_VOID', 'VOIDED');
define('COMMERCE_VANTIV_STATUS_VOIDED', 'VOIDEDED');

/**
 * Implements hook_views_api().
 */
function commerce_vantiv_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'commerce_vantiv') . '/includes/views',
  );
}

/**
 * Implements hook_libraries_info().
 */
function commerce_vantiv_libraries_info() {
  $libraries['litle'] = array(
    'name' => 'Litle',
    'vendor url' => 'http://www.vantiv.com/',
    'download url' => 'https://github.com/LitleCo/litle-sdk-for-php/archive/master.zip',
    'path' => 'litle',
    'files' => array(
      'php' => array(
        'sdk/XmlFields.php',
        'sdk/XmlParser.php',
        'sdk/UrlMapper.php',
        'sdk/LitleXmlMapper.php',
        'sdk/Obj2xml.php',
        'sdk/Checker.php',
        'sdk/Transactions.php',
        'sdk/LitleOnline.php',
        'sdk/LitleOnlineRequest.php',
        'sdk/Communication.php',
        'sdk/BatchRequest.php',
        'sdk/LitleRequest.php',
        'sdk/LitleResponseProcessor.php',
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_vantiv_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['vantiv_direct'] = array(
    'base' => 'commerce_vantiv',
    'title' => t('Vantiv direct payment'),
    'short_title' => t('Vantiv direct payment'),
    'display_title' => t('Vantiv direct payment'),
    'description' => t('Vantiv direct payment'),
    'terminal' => TRUE,
    'offsite' => FALSE,
    'offsite_autoredirect' => FALSE,
    'active' => FALSE,
    'callback' => array(),
    'file' => 'includes/commerce_vantiv_direct.inc',
    'cardonfile' => array(
      'charge callback' => 'commerce_vantiv_cardonfile_charge',
      'update callback' => 'commerce_vantiv_cardonfile_update',
      'delete callback' => 'commerce_vantiv_cardonfile_delete',
      'create callback' => 'commerce_vantiv_cardonfile_create',
    ),
  );

  $payment_methods['vantiv_echeck'] = array(
    'base' => 'commerce_vantiv',
    'title' => t('Vantiv echeck payment'),
    'short_title' => t('Vantiv echeck payment'),
    'display_title' => t('Vantiv echeck payment'),
    'description' => t('Vantiv echeck payment'),
    'terminal' => TRUE,
    'offsite' => FALSE,
    'offsite_autoredirect' => FALSE,
    'active' => FALSE,
    'callback' => array(),
    'file' => 'includes/commerce_vantiv_direct.inc',
    'cardonfile' => array(
      'charge callback' => 'commerce_vantiv_cardonfile_charge',
      'update callback' => 'commerce_vantiv_cardonfile_update',
      'delete callback' => 'commerce_vantiv_cardonfile_delete',
      'create callback' => 'commerce_vantiv_cardonfile_create',
    ),
  );

  return $payment_methods;
}

/**
 * Implements hook_menu_alter().
 */
function commerce_vantiv_menu_alter(&$items) {
  $items['user/%user/cards/add']['title'] = t('Add card/echeck');
  $items['user/%user/cards/add/' . drupal_hash_base64('vantiv_echeck|commerce_payment_vantiv_echeck')]['title'] = t('Add an echeck for payments with Vantiv echeck payment');
  return $items;
}

/**
 * Implements hook_form_alter().
 */
function commerce_vantiv_form_alter(&$form, &$form_state, $form_id) {

  if (!empty($form_state['build_info']['args'])) {
    foreach ($form_state['build_info']['args'] as $key => $value) {
      if (is_object($value) and get_class($value) == 'CommerceCardOnFile') {
        $card = $value;
      }
    }
  }
  if (!empty($card) and is_object($card) and $form_id == 'commerce_cardonfile_card_form' and get_class($card) == 'CommerceCardOnFile') {
  if ($card->instance_id == 'vantiv_direct|commerce_payment_vantiv_direct') {
    $payment_method = commerce_payment_method_instance_load('vantiv_echeck|commerce_payment_vantiv_echeck');
    if ($form_state['op'] == 'update') {
      drupal_set_title(t('Update a card'));
    }
    elseif ($form_state['op'] == 'create') {
      drupal_set_title(t('Add a card'));
    }
    $card_number = 'XXXX-XXXX-XXXX-' . $form_state['build_info']['args'][1]->card_number;

    // Add a card type selector if specified.
      $form['credit_card']['type'] = array(
        '#type' => 'select',
        '#title' => t('Card type'),
        '#options' => commerce_payment_credit_card_types(),
        '#default_value' => $form_state['build_info']['args'][1]->card_type,
        '#weight' => -15,
      );

      // Always add a field for the credit card number.
      $form['credit_card']['number'] = array(
        '#type' => 'textfield',
        '#title' => t('Card number'),
        '#default_value' => '',
        '#attributes' => array('autocomplete' => 'off'),
        '#required' => TRUE,
        '#maxlength' => 19,
        '#size' => 20,
        '#weight' => -10,
      );

      $form['hidden_cardid'] = array(
        '#type' => 'hidden',
        '#title' => t('Card id.'),
        '#default_value' => $form_state['build_info']['args'][1]->card_id,
      );

      $form['hidden_expmonth'] = array(
        '#type' => 'hidden',
        '#title' => t('Expiration month.'),
        '#default_value' => $form_state['build_info']['args'][1]->card_exp_month,
      );

      $form['hidden_expyear'] = array(
        '#type' => 'hidden',
        '#title' => t('Expiration year.'),
        '#default_value' => $form_state['build_info']['args'][1]->card_exp_year,
      );


      $form['validate'] = array(
        '#type' => 'hidden',
        '#title' => t('validate'),
        '#description' => t('validate'),
        '#element_validate' => array('commerce_vantiv_form_elements_vaidate'),
        '#default_value' => $card->instance_id,
        '#weight' => 15,
      );

      $form['credit_card']['code'] = array(
        '#type' => 'textfield',
        '#title' => !empty($fields['code']) ? $fields['code'] : t('Security code'),
        '#default_value' => '',
        '#attributes' => array('autocomplete' => 'off'),
        '#required' => TRUE,
        '#maxlength' => 4,
        '#size' => 4,
      );

      $form['credit_card']['cardonfile_instance_default'] = array(
        '#type' => 'checkbox',
        '#title' => t('Use as default card for payments with %method', array('%method' => $payment_method['display_title'])),
        '#default_value' => FALSE,
        '#weight' => '99',
      );

      $form['credit_card']['cardonfile_instance_default']['#weight'] = '99';
      $form['submit']['#weight'] = 100;

      return $form;
    }
    elseif (!empty($card->instance_id) and $card->instance_id == 'vantiv_echeck|commerce_payment_vantiv_echeck') {
      $payment_method = commerce_payment_method_instance_load('vantiv_echeck|commerce_payment_vantiv_echeck');

      // Basic settings.
      $form['credit_card']['exp_year']['#default_value'] = '2100';
      $form['credit_card']['exp_year']['#access'] = FALSE;
      $form['credit_card']['exp_month']['#default_value'] = '12';
      $form['credit_card']['exp_month']['#access'] = FALSE;
      $form['credit_card']['code']['#default_value'] = '123';
      $form['credit_card']['code']['#access'] = FALSE;

      if ($form_state['op'] == 'update') {
        drupal_set_title(t('Update an eCheck'));
      }
      elseif ($form_state['op'] == 'create') {
        drupal_set_title(t('Add an eCheck'));
      }
      $form['credit_card']['type'] = array(
        '#type' => 'select',
        '#title' => t('Account type'),
        '#options' => array(
          'Checking' => t('Checking'),
          'Savings'  => t('Savings'),
          'Corporate'  => t('Corporate'),
          'Corp Savings'  => t('Corp Savings'),
        ),
        '#weight' => -50,
      );

      $form['credit_card']['number'] = array(
        '#type' => 'textfield',
        '#title' => t('Account number'),
        '#default_value' => '',
        '#required' => TRUE,
        '#attributes' => array('autocomplete' => 'off'),
        '#maxlength' => 17,
        '#size' => 17,
        '#weight' => -30,
      );

      $form['credit_card']['routingNum'] = array(
        '#type' => 'textfield',
        '#title' => t('Routing number'),
        '#default_value' => '',
        '#required' => TRUE,
        '#attributes' => array('autocomplete' => 'off'),
        '#maxlength' => 9,
        '#size' => 9,
        '#weight' => 9,
      );

      $form['credit_card']['checkNum'] = array(
        '#type' => 'textfield',
        '#title' => t('Check number'),
        '#default_value' => '',
        '#attributes' => array('autocomplete' => 'off'),
        '#required' => TRUE,
        '#maxlength' => 15,
        '#size' => 15,
        '#weight' => 10,
      );

      $form['credit_card']['owner'] = array(
        '#type' => 'textfield',
        '#title' => t('Account owner'),
        '#default_value' => '',
        '#attributes' => array('autocomplete' => 'off'),
        '#required' => TRUE,
        '#maxlength' => 30,
        '#size' => 30,
        '#weight' => 11,
      );

      $form['validate'] = array(
        '#type' => 'hidden',
        '#title' => t('validate'),
        '#description' => t('validate'),
        '#element_validate' => array('commerce_vantiv_form_elements_vaidate'),
        '#default_value' => $card->instance_id,
        '#weight' => 15,
      );

      if (strstr(current_path(), 'edit')) {
        $form['hidden_cardid'] = array(
          '#type' => 'hidden',
          '#title' => t('Hidden card id'),
          '#description' => t('Hidden card id'),
          '#default_value' => $card->card_id,
          '#weight' => 15,
        );
      }

      $form['credit_card']['cardonfile_instance_default'] = array(
        '#type' => 'checkbox',
        '#title' => t('Use as default card for payments with %method', array('%method' => $payment_method['display_title'])),
        '#default_value' => FALSE,
        '#weight' => '95',
      );

      if (strstr(current_path(), 'edit') != FALSE ) {
        $form['submit']['#value'] = t('Update echeck');
        $form['credit_card']['cardonfile_instance_default']['#title'] = t('Use as default echeck for payments with %method', array('%method' => $payment_method['display_title']));
      }
      elseif (strstr(current_path(), 'add') != FALSE ) {
        $form['credit_card']['cardonfile_instance_default']['#title'] = t('Use as default echeck for payments with %method', array('%method' => $payment_method['display_title']));
        $form['submit']['#value'] = t('Add echeck');
      }

      $form['credit_card']['cardonfile_instance_default']['#weight'] = '99';
      $form['submit']['#weight'] = 100;

      $form['#validate'] = '';
      $form['#validate'][] = 'commerce_vantiv_form_elements_vaidate';
    }
  }

  return $form;
}

function commerce_vantiv_form_elements_vaidate($form, &$form_state) {
  if (empty($form)) {
    form_set_error('number', t('error.'));
  }
  return TRUE;
}

/**
 * Charges card on file with given amount.
 */
function commerce_vantiv_cardonfile_charge($payment_method, $card_data, $order, $charge = NULL) {
  $api = commerce_vantiv_api_object();
  $customer_profile = commerce_customer_profile_load($order->commerce_customer_billing['und'][0]['profile_id']);

  if (is_object($charge) == TRUE) {
    $amount = new stdClass();
    $amount->amount = $charge->amount;
    $amount->currency_code = $charge->currency_code;
  }
  elseif (is_array($charge) == TRUE) {
    $amount = new stdClass();
    $amount->amount = $charge['amount'];
    $amount->currency_code = $charge['currency_code'];
  }
  else {
    $amount = '';
  }

  $result = $api->directPayments($customer_profile, $order, $card_data, $payment_method, $amount, $card_data->remote_id);
  return TRUE;
}

/**
 * Updates card on file.
 */
function commerce_vantiv_cardonfile_update() {
  global $user;
  if (!empty($_POST)) {
    $params = $_POST;
  }
  else {
    $params = $_GET;
  }

  $card = commerce_cardonfile_load($params['hidden_cardid']);
  if (is_array($card) == TRUE) {
    $card = reset($card);
  }
  $prev_order = commerce_vantiv_load_last_saved_order($user->uid);
  if (!empty($prev_order) and !empty($prev_order->commerce_customer_billing['und'][0]['profile_id'])) {
    $customer_profile = commerce_customer_profile_load($prev_order->commerce_customer_billing['und'][0]['profile_id']);
  }
  $order = commerce_order_new($user->uid);
  $order->commerce_order_total['und'][0]['amount'] = 0.1;
  $order->commerce_order_total['und'][0]['data']['components'][0]['price']['amount'] = 0.1;
  commerce_order_save($order);
  $last_order = commerce_vantiv_load_last_saved_order($user->uid);

  $token = $card->remote_id;
  // Create initial transaction.
  $api = commerce_vantiv_api_object();
  //$api->libraryLoad();
  $data = array(
    'user' => $api->user,
    'password' => $api->password,
    'merchantId' => $api->merchant_id,
    'reportGroup' => 'rtpGrp',
    'url' => $api->accountLinks($api->account),
    'litle_requests_path' => $api->accountLinks($api->account),
    'batch_requests_path' => '',
    'proxy' => '',
    'sftp_username' => '',
    'sftp_password' => '',
    'batch_url' => '',
    'tcp_port' => '',
    'tcp_ssl' => '',
    'tcp_timeout' => '',
    'print_xml' => '',
    // Fake order.
    'orderId' => $last_order->order_id,
    'orderSource'=>'ecommerce',
    'amount' => 10,
    'accountNumber' => $params['credit_card']['number'],
    'billToAddress' => array(
	  'name' => !empty($customer_profile) ? $customer_profile->commerce_customer_address['und'][0]['name_line'] : t('Save card name'),
	  'addressLine1' => !empty($customer_profile) ? $customer_profile->commerce_customer_address['und'][0]['thoroughfare'] : t('Save card address'),
	  'city' => !empty($customer_profile) ? $customer_profile->commerce_customer_address['und'][0]['locality'] : t('Save card city'),
	  'state' => !empty($customer_profile) ? $customer_profile->commerce_customer_address['und'][0]['administrative_area'] : t('Save card state'),
	  'zip' => !empty($customer_profile) ? $customer_profile->commerce_customer_address['und'][0]['postal_code'] : t('Save card postal code'),
	  'country' => !empty($customer_profile) ? $customer_profile->commerce_customer_address['und'][0]['country'] : t('Save card country'),
    ),
  );

  if ($params['validate'] == 'vantiv_echeck|commerce_payment_vantiv_echeck') {

    $data['shipToAddress'] = array(
        'name' => !empty($customer_profile) ? $customer_profile->commerce_customer_address['und'][0]['name_line'] : 'Save card name',
        'city' => !empty($customer_profile) ? $customer_profile->commerce_customer_address['und'][0]['locality'] : 'Save card city',
        'state' => '',
        'email' => !empty($order) ? $order->mail : $user->mail,
      );
    $data['echeckToken'] = array(
      'litleToken' => $token,
        'accType' => $params['credit_card']['type'],
        'routingNum' => $params['credit_card']['routingNum'],
        'checkNum' => $params['credit_card']['checkNum'],
    );
  }
  elseif ($params['validate'] == 'vantiv_direct|commerce_payment_vantiv_direct') {
    $data['card'] = array(
      'number' => $params['credit_card']['number'],
  	  'expDate' => $params['credit_card']['exp_month'] . substr($params['credit_card']['exp_year'], 2, 4),
  	  'cardValidationNum' => empty($params['code']) ? $params['credit_card']['code'] : $params['code'],
  		'type' => $api->cardTypes($params['credit_card']['type']),
    );

    $data['token'] = array(
      'litleToken' => $token,
    );
  }
  $initilaize = new litle\sdk\LitleOnlineRequest();
  if ($params['validate'] == 'vantiv_echeck|commerce_payment_vantiv_echeck') {
  	$response = $initilaize->echeckSaleRequest($data);
  }
  else {
  	$response = $initilaize->saleRequest($data);
  }
  $payload = litle\sdk\XmlParser::getDomDocumentAsString($response);

  // Get response information.
  $response_code = litle\sdk\XmlParser::getNode($response,'response');
  $order_id = litle\sdk\XmlParser::getNode($response,'orderId');
  $response_time = litle\sdk\XmlParser::getNode($response,'responseTime');
  $message = litle\sdk\XmlParser::getNode($response,'message');
  $auth_code = litle\sdk\XmlParser::getNode($response,'authCode');
  $avs_result = litle\sdk\XmlParser::getNode($response,'avsResult');
  $card_validation_result = litle\sdk\XmlParser::getNode($response,'cardValidationResult');
  $litle_txn_id = litle\sdk\XmlParser::getNode($response,'litleTxnId');


  $saleResponse = litle\sdk\XmlParser::getNode($response, 'saleResponse');
  $echeckSalesResponse = litle\sdk\XmlParser::getNode($response, 'echeckSalesResponse');
  $accountUpdater = litle\sdk\XmlParser::getNode($response, 'accountUpdater');
  $newCardInfo = litle\sdk\XmlParser::getNode($response, 'newCardInfo');
  $type = litle\sdk\XmlParser::getNode($response, 'type');
  $number = litle\sdk\XmlParser::getNode($response, 'number');
  $expDate = litle\sdk\XmlParser::getNode($response, 'expDate');

  if (!empty($accountUpdater) and !empty($newCardInfo)) {
    $card_type = $api->cardTypes('', $type);
    $exp_month = substr($expDate, 1, 2);
    $exp_year = substr($expDate, -2, 2);
    $card->card_name = $params['credit_card']['owner'];
    $card->card_number = substr($number, -4, 4);
    $card->type = !empty($card_type) ? $card_type : '';
    $card->card_exp_month = $exp_month;
    $card->card_exp_year = $exp_year;
    commerce_cardonfile_save($card);
    return $card;
  }

  if (!empty($echeckSalesResponse)) {
  	$id = litle\sdk\XmlParser::getAttribute($response, 'echeckSalesResponse', 'id');
  	// Process the transaction.
  	$transaction = commerce_payment_transaction_new('vantiv_echeck', $last_order->order_id);
        $transaction->instance_id = 'vantiv_echeck|commerce_payment_vantiv_echeck';
        $transaction->amount = $last_order->commerce_order_total['und'][0]['amount'];
        $transaction->currency_code = $last_order->commerce_order_total['und'][0]['currency_code'];
        $transaction->remote_id = $litle_txn_id;
        $transaction->remote_status = $message;
        $transaction->message_variables = array('@auth_code' => $auth_code);
        $transaction->data = array('auth_code' => $auth_code);
        $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
        $transaction->data = array('id' => $id);
  	commerce_payment_transaction_save($transaction);
  	$transaction = commerce_vantiv_load_last_saved_transaction($user->uid);
	if (is_array($transaction)) {
	  $transaction = reset($transaction);
	}
  	$result = $api->crossPayment($transaction, '', '', 'void');
  }

  return TRUE;
}

/**
 * Deletes card on file.
 */
function commerce_vantiv_cardonfile_delete() {
  return TRUE;
}

/**
 * Creates card on file.
 */
function commerce_vantiv_cardonfile_create() {
  global $user;
  if (!empty($_POST)) {
    $params = $_POST;
  }
  else {
    $params = $_GET;
  }
  $api = commerce_vantiv_api_object();
  //$api->libraryLoad();

  $data = array(
    'user' => $api->user,
    'password' => $api->password,
    'merchantId' => $api->merchant_id,
    'reportGroup' => 'rtpGrp',
    'url' => $api->accountLinks($api->account),
    'litle_requests_path' => $api->accountLinks($api->account),
    'batch_requests_path' => '',
    'proxy' => '',
    'sftp_username' => '',
    'sftp_password' => '',
    'batch_url' => '',
    'tcp_port' => '',
    'tcp_ssl' => '',
    'tcp_timeout' => '',
    'print_xml' => '',
    //'orderId' => $user->uid . '-' . time(),
    'amount' => 10,
  );

  if ($params['validate'] == 'vantiv_direct|commerce_payment_vantiv_direct') {
    $data['accountNumber'] = $params['credit_card']['number'];
    $data['card'] = array(
      'number' => !empty($params['credit_card']['number']) ? $params['credit_card']['number'] : $params['number'],
  	  'expDate' => $params['credit_card']['exp_month'] . substr($params['credit_card']['exp_year'], 2, 4),
  	  'cardValidationNum' => $params['credit_card']['code'],
  		'type' => $api->cardTypes($params['credit_card']['type']),
    );
  }
  elseif ($params['validate'] == 'vantiv_echeck|commerce_payment_vantiv_echeck') {
    // $data['echeck']
    $data['echeckForToken'] = array(
      'accType' => $params['credit_card']['type'],
      'accNum' => $params['credit_card']['number'],
      'routingNum' => $params['credit_card']['routingNum'],
      'checkNum' => $params['credit_card']['checkNum'],
    );
    $params['exp_month'] = '12';
    $params['exp_year'] = '2100';
  }

  $initilaize = new litle\sdk\LitleOnlineRequest();
  $response = $initilaize->registerTokenRequest($data);
  $payload = litle\sdk\XmlParser::getDomDocumentAsString($response);
  $response_code = litle\sdk\XmlParser::getNode($response,'response');
  $order_id = litle\sdk\XmlParser::getNode($response,'orderId');
  $response_time = litle\sdk\XmlParser::getNode($response,'responseTime');
  $message = litle\sdk\XmlParser::getNode($response,'message');
  $auth_code = litle\sdk\XmlParser::getNode($response,'authCode');
  $avs_result = litle\sdk\XmlParser::getNode($response,'avsResult');
  $card_validation_result = litle\sdk\XmlParser::getNode($response,'cardValidationResult');
  $litle_txn_id = litle\sdk\XmlParser::getNode($response,'litleTxnId');
  $litleToken = litle\sdk\XmlParser::getNode($response,'litleToken');

  //$customer_profile = commerce_customer_profile_load($order->commerce_customer_billing['und'][0]['profile_id']);
  $methods = explode('|', $params['validate']);
  $card_data = commerce_cardonfile_new();
  $card_data->uid = $user->uid;
  $card_data->remote_id = $litleToken;
  $card_data->payment_method = $methods[0];
  $card_data->instance_id = $params['validate'];
  $card_data->card_type = $params['credit_card']['type'];
  $card_data->card_name = $params['credit_card']['owner'];
  $card_data->card_number = drupal_substr($params['credit_card']['number'], -4);
  $card_data->card_exp_month = !empty($params['credit_card']['exp_month']) ? $params['credit_card']['exp_month'] : $params['exp_month'];
  $card_data->card_exp_year = !empty($params['credit_card']['exp_year']) ? $params['credit_card']['exp_year'] : $params['exp_year'];
  $card_data->status = 1;
  if (empty($litleToken)) {
    drupal_set_message(t('The card was not add successfully.'), 'error');
    return FALSE;
  }
  commerce_cardonfile_save($card_data);
  return $card_data;

}

/**
 * Implements hook_menu().
 */
function commerce_vantiv_menu() {
  $items = array();

  //test url.
  $items['test'] = array(
    'page callback' => 'test',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  //test url.
  $items['user/%user/cards'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_vantive_alter_view', 1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  // Add a menu item for capture.
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/vantiv_capture'] = array(
    'title' => t('Capture'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_vantiv_capture_form', 3, 5),
    'access callback' => 'commerce_vantiv_capture_access',
    'access arguments' => array(3, 5),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'includes/commerce_vantiv.admin.inc',
    'weight' => 3,
  );

  // Add a menu item for refund.
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/vantiv_refund'] = array(
    'title' => t('Refund'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_vantiv_refund_form', 3, 5),
    'access callback' => 'commerce_vantiv_refund_access',
    'access arguments' => array(3, 5),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'includes/commerce_vantiv.admin.inc',
    'weight' => 4,
  );

  // Add a menu item for void.
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/vantiv_void'] = array(
    'title' => t('Void'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_vantiv_void_form', 3, 5),
    'access callback' => 'commerce_vantiv_void_access',
    'access arguments' => array(3, 5),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'includes/commerce_vantiv.admin.inc',
    'weight' => 1,
  );

  // Add a menu item for authorization reversal.
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/vantiv_reversal'] = array(
    'title' => 'Reverse',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_vantiv_reversal_form', 3, 5),
    'access callback' => 'commerce_vantiv_reversal_access',
    'access arguments' => array(3, 5),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'includes/commerce_vantiv.admin.inc',
    'weight' => 2,
  );

  $items['admin/commerce/orders/batch'] = array(
    'title' => 'Vantiv Capture',
    'description' => 'Capture all pending transactions with batch process',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_vantiv_batch_form'),
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
    'weight' => 100,
  );

  return $items;
}

/**
 * Determine whether the user has permissions to perform capture.
 */
function commerce_vantiv_capture_access($order, $transaction) {
  // Return FALSE if the transaction isn't for Vantiv or isn't
  // awaiting capture.
  if (($transaction->payment_method !== 'vantiv_direct') || empty($transaction->remote_id) || $transaction->status !== COMMERCE_PAYMENT_STATUS_PENDING) {
    return FALSE;
  }
  // Allow access if the user can update this transaction.
  return commerce_payment_transaction_access('update', $transaction);
}

/**
 * Determine whether the user has permissions to perform refund.
 */
function commerce_vantiv_refund_access($order, $transaction) {
  // Return FALSE if the transaction isn't for Vantiv or isn't
  // awaiting refund.
  if (($transaction->payment_method !== 'vantiv_direct') || empty($transaction->remote_id) || ($transaction->status !== COMMERCE_VANTIV_STATUS_CAPTURE && $transaction->status !== COMMERCE_PAYMENT_STATUS_SUCCESS)) {
    return FALSE;
  }
  // Allow access if the user can update this transaction.
  return commerce_payment_transaction_access('update', $transaction);
}

/**
 * Determine whether the user has permissions to perform void.
 */
function commerce_vantiv_void_access($order, $transaction) {
  // Return FALSE if the transaction isn't for Vantiv or isn't
  // awaiting refund.
  if (($transaction->payment_method !== 'vantiv_direct' and $transaction->payment_method !== 'vantiv_echeck') || empty($transaction->remote_id) || ($transaction->status !== COMMERCE_VANTIV_STATUS_CAPTURE && $transaction->status !== COMMERCE_PAYMENT_STATUS_SUCCESS && $transaction->status !== COMMERCE_VANTIV_STATUS_REFUND)) {
    return FALSE;
  }
  // Allow access if the user can update this transaction.
  return commerce_payment_transaction_access('update', $transaction);
}

/**
 * Determine whether the user has permissions to perform authorization reversal.
 */
function commerce_vantiv_reversal_access($order, $transaction) {
  // Return FALSE if the transaction isn't for Vantiv or isn't
  // awaiting refund.
  if (($transaction->payment_method !== 'vantiv_direct') || empty($transaction->remote_id) || ($transaction->status !== COMMERCE_PAYMENT_STATUS_PENDING)) {
    return FALSE;
  }
  // Allow access if the user can update this transaction.
  return commerce_payment_transaction_access('update', $transaction);
}

/**
 * Settings form in the admin UI for the payment method.
 */
function commerce_vantiv_settings_form($settings = NULL) {

  $form['account'] = array(
    '#type' => 'radios',
    '#title' => t('Processing url'),
    '#description' => t('Please choose Litle url from the following list:'),
    '#options' => array(
      'sandbox' => ('Sandbox test link - for testing purposes only'),
      'postlive' => ('Postlive link'),
      'transact_postlive' => ('Transact Postlive'),
      'production' => ('Production link'),
      'production_transact' => ('Production Transactions'),
      'prelive' => ('Prelive'),
      'transact_prelive' => ('Transact Prelive'),
    ),
    '#default_value' => isset($settings['account']) ? $settings['account'] : 'sandbox',
    '#required' => TRUE,
  );

  $form['user'] = array(
    '#type' => 'textfield',
    '#title' => t('USER ID'),
    '#description' => t('Enter your API username.'),
    '#default_value' => !empty($settings['user']) ? $settings['user'] : '',
    '#required' => TRUE,
  );

  $form['merchant_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant ID'),
    '#description' => t('Enter your merchant id.'),
    '#default_value' => !empty($settings['merchant_id']) ? $settings['merchant_id'] : '',
    '#required' => TRUE,
  );

  $form['password'] = array(
    '#type' => 'textfield',
    '#title' => t('Password'),
    '#description' => t('Your API password.'),
    '#default_value' => !empty($settings['password']) ? $settings['password'] : '',
    '#required' => TRUE,
    '#suffix' => '<br />',
  );

  /*$form['3d_secure'] = array(
    '#type' => 'radios',
    '#title' => t('3D Secure security check of customers cards.'),
    '#default_value' => !empty($settings['3d_secure']) ? $settings['3d_secure'] : '0',
    '#options' => array(
      '0' => t('Allways require authentication.'),
      '1' => t('Do not perform 3D-Secure checks and always authorise.'),
    ),
  );*/

  if (strstr(current_path(), 'vantiv_direct') != FALSE) {
    $form['transaction_type_process'] = array(
      '#type' => 'radios',
      '#title' => t('Transaction type'),
      '#default_value' => empty($settings['transaction_type_process']) ? 'sale' : $settings['transaction_type_process'],
      '#suffix' => '<br />',
      '#options' => array(
        'sale' => t('Sale'),
        'pre_auth' => t('Pre-auth'),
      ),
    );
  }

  /*$form['recycling'] = array(
    '#type' => 'select',
    '#title' => t('Recycling transactions'),
    '#description' => t('Choose whether or not you want to use the recycling feature.'),
    '#suffix' => '<br />',
    '#default_value' => empty($settings['recycling']) ? '2' : $settings['recycling'],
    '#options' => array(
      '1' => 'Use recycling',
      '2' => 'Do not use recycling',
    ),
  );*/

  if (strstr(current_path(), 'vantiv_direct') != FALSE) {
    $form['advance_fraud'] = array(
      '#type' => 'radios',
      '#title' => t('Advance fraud tools'),
      //'#suffix' => '<br />',
      '#options' => array(
        '1' => t('Apply advanced fraud tools'),
        '0' => t('Do not use advanced fraud tools'),
      ),
      '#default_value' => empty($settings['advance_fraud']) ? '0' : $settings['advance_fraud'],
    );

    $form['advance_fraud_key'] = array(
      '#type' => 'textfield',
      '#title' => t('5-character prefix'),
      '#description' => t('Enter the 5-character prefix, provided by vantiv.'),
      '#suffix' => '<br />',
      '#maxlength' => 5,
      '#size' => 5,
      '#states' => array(
        'visible' => array(
          ':input[name$="[advance_fraud]"]' => array('value' => '1'),
        ),
        'invisible' => array(
          ':input[name$="[cardonfile_store_card]"]' => array('value' => '0'),
        ),
      ),
      '#default_value' => empty($settings['advance_fraud_key']) ? '' : $settings['advance_fraud_key'],
    );
  }
  // Card on File module support.
  if (module_exists('commerce_cardonfile')) {
    $form['cardonfile'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable Card on File functionality with this payment method.'),
      '#description' => t('Stores tokenised value for card data.'),
      '#default_value' => !empty($settings['cardonfile']) ? $settings['cardonfile'] : '',
    );

    $form['continuous'] = array(
      '#type' => 'checkbox',
      '#title' => t('Use continuous authority transactions.'),
      '#description' => t('Card on file strage will be required.'),
      '#default_value' => !empty($settings['continuous']) ? $settings['continuous'] : '',
    );
  }
  else {
    $form['cardonfile'] = array(
      '#type' => 'markup',
      '#markup' => t('To enable Card on File funcitionality download and install the Card on File module.'),
    );
  }

  $form['logs'] = array(
    '#type' => 'select',
    '#title' => t('Log issue responses.'),
    '#description' => t('Select whether or not the responses from the http requests should be logged.'),
    '#suffix' => '<br />',
    '#options' => array(
      '0' => t('Always log the responses'),
      '1' => t('Never log the responses'),
    ),
  );

  $form['validate'] = array(
    '#type' => 'hidden',
    '#title' => t('validate'),
    '#description' => t('validate'),
    '#element_validate' => array('commerce_vantiv_connect_validate_element'),
  );

  //$form['#submit'][] = 'commerce_vantiv_settings_form_submit';

  return $form;
}

/**
 * Validates the settings data for the payment method
 */
function commerce_vantiv_connect_validate_element($element, $form, &$form_state) {
  $direct_payment = rules_config_load('commerce_payment_vantiv_direct');
  $direct_payment->weight = 10;
  $direct_payment->save();
  $echeck_payment = rules_config_load('commerce_payment_vantiv_echeck');
  $echeck_payment->weight = -10;
  $echeck_payment->save();
  rules_clear_cache();
}

function test() {
  // Just a function used for tests.
}

/**
 * Loads the last saved transaction.
 */
function commerce_vantiv_load_last_saved_transaction($user_id = '') {
  global $user;
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'commerce_payment_transaction');
  if (!empty($user_id)) {
    $query->propertyCondition('uid', $user_id);
  }
  else {
  	$query->propertyCondition('uid', $user->uid);
  }
  $query->propertyOrderBy('created', 'DESC');
  $query->range(0, 1);
  $return = array();
  $result = $query->execute();
    if (!empty($result['commerce_payment_transaction'])) {
    foreach ($result['commerce_payment_transaction'] as $transaction) {
      $return[] = entity_load_single('commerce_payment_transaction', $transaction->transaction_id);
    }
  }
  return $return;
}

/**
 * Loads the last saved cof.
 */
function commerce_vantiv_load_last_saved_cof($user_id) {
  global $user;
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'commerce_cardonfile')
  ->propertyCondition('uid', $user_id);
  $query->propertyOrderBy('created', 'DESC');
  $query->range(0, 1);
  $return = array();
  $result = $query->execute();
    if (!empty($result['commerce_cardonfile'])) {
    foreach ($result['commerce_cardonfile'] as $card) {
      $return[] = entity_load_single('commerce_cardonfile', $card->card_id);
    }
  }
  return $return ? reset($return) : FALSE;
}


/**
 * Creates api object.
 */
function commerce_vantiv_api_object($settings = array(), $instance_id = '') {
  $include_module = module_load_include('inc', 'commerce_vantiv', 'includes/commerce_vantiv.api');
  if (empty($instance_id)) {
    $instance = commerce_payment_method_instance_load('vantiv_direct|commerce_payment_vantiv_direct');
  }
  else {
    $instance = commerce_payment_method_instance_load($instance_id);
  }
  return new VantivApi($instance['settings']);
}

/**
 * Implements hool_commerce_payment_transaction_status_info().
 */
function commerce_vantiv_commerce_payment_transaction_status_info() {
  $statuses = array();

  $statuses[COMMERCE_VANTIV_STATUS_CREDIT] = array(
    'status' => COMMERCE_VANTIV_STATUS_CREDIT,
    'title' => t('Credit'),
    'icon' => drupal_get_path('module', 'commerce_payment') . '/theme/icon-success.png',
    'total' => TRUE,
  );

  $statuses[COMMERCE_VANTIV_STATUS_CAPTURE] = array(
    'status' => COMMERCE_VANTIV_STATUS_CAPTURE,
    'title' => t('Capture'),
    'icon' => drupal_get_path('module', 'commerce_payment') . '/theme/icon-success.png',
    'total' => TRUE,
  );

  $statuses[COMMERCE_VANTIV_STATUS_CAPTURED] = array(
    'status' => COMMERCE_VANTIV_STATUS_CAPTURED,
    'title' => t('Captured'),
    'icon' => drupal_get_path('module', 'commerce_payment') . '/theme/icon-success.png',
    'total' => TRUE,
  );

  $statuses[COMMERCE_VANTIV_STATUS_REFUND] = array(
    'status' => COMMERCE_VANTIV_STATUS_REFUND,
    'title' => t('Refund'),
    'icon' => drupal_get_path('module', 'commerce_payment') . '/theme/icon-success.png',
    'total' => FALSE,
  );

  $statuses[COMMERCE_VANTIV_STATUS_REFUNDED] = array(
    'status' => COMMERCE_VANTIV_STATUS_REFUNDED,
    'title' => t('Refunded'),
    'icon' => drupal_get_path('module', 'commerce_payment') . '/theme/icon-success.png',
    'total' => FALSE,
  );

  $statuses[COMMERCE_VANTIV_STATUS_VOID] = array(
    'status' => COMMERCE_VANTIV_STATUS_VOID,
    'title' => t('Void'),
    'icon' => drupal_get_path('module', 'commerce_payment') . '/theme/icon-failure.png',
    'total' => FALSE,
  );

  $statuses[COMMERCE_VANTIV_STATUS_VOIDED] = array(
    'status' => COMMERCE_VANTIV_STATUS_VOIDED,
    'title' => t('Voided'),
    'icon' => drupal_get_path('module', 'commerce_payment') . '/theme/icon-failure.png',
    'total' => FALSE,
  );

  return $statuses;
}

function commerce_vantiv_get_label($card) {
  global $user;
  $card_type = ucfirst($card->card_type);
  switch ($card_type) {
    case 'Checking':
      $card_type = t('@account_type account', array('@account_type' => $card_type));
      break;
    case 'Savings':
      $card_type = t('@account_type account', array('@account_type' => $card_type));
      break;
    case 'Corporate':
      $card_type = t('@account_type account', array('@account_type' => $card_type));
      break;
    case 'Corp Savings':
      $card_type = t('@account_type account', array('@account_type' => $card_type));
      break;
  }
  $str = t('@card_type ending in @number', array('@card_type' => $card_type, '@number' => $card->card_number));
  return $str;
}

/**
 * Loads the last saved orders.
 */
function commerce_vantiv_load_last_saved_order($user_id) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'commerce_order')
  ->propertyCondition('uid', $user_id);
  $query->propertyOrderBy('created', 'DESC');
  $query->range(0, 1);
  $return = array();
  $result = $query->execute();
    if (!empty($result['commerce_order'])) {
    foreach ($result['commerce_order'] as $order) {
      $return[] = entity_load_single('commerce_order', $order->order_id);
    }
  }
  return $return ? reset($return) : FALSE;
}


function commerce_vantiv_load_cof($user_id, $payment_method) {
  $cardonfile_capable = module_exists('commerce_cardonfile');
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.checkout_pane');
  // Exit if payment method is not capable of Card on File, or Card on File
  // functionality is disabled in the payment method instance.
  if (!_commerce_cardonfile_capable_payment_method_check($payment_method) || (isset($payment_method['settings']['cardonfile']) && !$payment_method['settings']['cardonfile'])) {
    return;
  }

  // For onsite payment methods add a checkbox to the credit card
  // details container to store the credit card for future use.
  if (!$payment_method['offsite']) {
    $storage = variable_get('commerce_cardonfile_storage', 'opt-in');

    if (in_array($storage, array('opt-in', 'opt-out'))) {
      $form['commerce_payment']['payment_details']['credit_card']['cardonfile_store'] = array(
        '#type' => 'checkbox',
        '#title' => t('Store this credit card on file for future use.'),
        '#default_value' => $storage == 'opt-out',
      );
    }
    else {
      $form['commerce_payment']['payment_details']['credit_card']['cardonfile_store'] = array(
        '#type' => 'value',
        '#value' => TRUE,
      );
    }

  }

  // Load existing active cards for the payment method instance and user.
  $stored_cards = commerce_cardonfile_load_multiple_by_uid($user_id, $payment_method['instance_id']);

  // Build options form
  $cardonfile_options_form = array();
  $instance_default_card_id = NULL;

  // If have stored cards ...
  if (!empty($stored_cards)) {
    $valid_cards = array_filter($stored_cards, 'commerce_cardonfile_validate_card_expiration');
    // If have un-expired cards ...
    if (!empty($valid_cards)) {
      // get options list with labels
      $card_options = commerce_cardonfile_element_options_list($valid_cards);

      // determine default option
      $card_options_default_value = key($card_options);
      foreach (array_keys($card_options) as $card_id) {
        if (isset($valid_cards[$card_id]) && !empty($valid_cards[$card_id]->instance_default)) {
          $card_options_default_value = $instance_default_card_id = $card_id;

          // move instance default to the top of the list
          $card_option_label = $card_options[$card_id];
          unset($card_options[$card_id]);
          $card_options = array($card_id => $card_option_label) + $card_options;
          break;
        }
      }

      $cardonfile_options_form = array(
        '#type' => variable_get('commerce_cardonfile_selector', 'radios'),
        '#title' => t('Select a stored card'),
        '#options' => $card_options,
        '#default_value' => 'new'/*$card_options_default_value*/,
        '#weight' => -100,
        '#ajax' => array(
          'callback' => 'commerce_payment_pane_checkout_form_details_refresh',
          'wrapper' => 'payment-details',
        ),
      );
    }
  }

  // update form with options
  if (!empty($cardonfile_options_form)) {
    $form['commerce_payment']['payment_details']['cardonfile'] = $cardonfile_options_form;

    // Add the CSS to hide a sole credit card icon if specified.
    if (variable_get('commerce_cardonfile_hide_cc_radio_button', TRUE)) {
      /*if (count($form['commerce_payment']['payment_method']['#options']) == 1) {
        $form['commerce_payment']['payment_method']['#attached']['css'][] = drupal_get_path('module', 'commerce_cardonfile') . '/theme/commerce_cardonfile.checkout.css';
      }*/
    }

    // If the current value for the card selection element is not to use
    // a different credit card, then hide the credit card form elements.
    if (empty($form_state['values']['commerce_payment']['payment_details']['cardonfile']) || $form_state['values']['commerce_payment']['payment_details']['cardonfile'] !== 'new') {
      $form['commerce_payment']['payment_details']['credit_card']['#access'] = FALSE;
    }
  }
  else {
    $form['commerce_payment']['payment_details']['cardonfile'] = array(
      '#type' => 'value',
      '#value' => 'new',
    );
  }

  // Add mark as default element
  $instance_default_default_value = 0;
  if (!empty($instance_default_card_id)) {
    if (empty($form_state['values']) ||
      (!empty($form_state['values']['commerce_payment']['payment_details']['cardonfile']) &&
      $form_state['values']['commerce_payment']['payment_details']['cardonfile'] == $instance_default_card_id)) {
      $instance_default_default_value = 1;
    }
  }

  $force_instance_default = empty($stored_cards);
  $form['commerce_payment']['payment_details']['cardonfile_instance_default'] = array(
    '#type' => 'checkbox',
    '#title' => t('Set as your default card'),
    '#default_value' => $instance_default_default_value || $force_instance_default,
    '#access' => !$instance_default_default_value,
    '#disabled' => $force_instance_default,
    '#weight' => 10,
    '#states' => array(
      'invisible' => array(
        ':input[name$="[cardonfile]"]' => array('value' => 'new'),
      ),
      'visible' => array(
        ':input[name$="[cardonfile_store]"]' => array('checked' => TRUE),
      ),
    ),
  );

  // Allow others to alter this alter
  drupal_alter('commerce_cardonfile_checkout_pane_form', $form['commerce_payment']['payment_details'], $form);

  return $form['commerce_payment']['payment_details'];
  //return $form;
}

/**
 * Mimic batch trigger so it can be triggered when cron runs.
 */
function commerce_vantiv_batch_rule($date) {
  $_SESSION['http_request_count'] = 0;
  $form_state = array();
  $form_state['values']['hidden_value'] = 1;
  $form_state['values']['op'] = 'Capture';
  $form_state['values']['submit'] = 'Capture';
  $form_state['values']['date'] = $date;
  drupal_form_submit('commerce_vantiv_batch_form', $form_state);
}

/**
 * Form for the batch process.
 */
function commerce_vantiv_batch_form($form, &$form_state) {
  $form['capture_fieldset'] = array(
    '#type' => 'fieldset',
    '#description' => t('Capture all pending transactions'),
    '#title' => t('Capture'),
  );

  $form['date'] = array(
    '#type' => 'textfield',
    '#description' => t('Enter date (like: 16 June 2013), time stamp or days in the past (by giving negative values) like -1 day, -2 days, -3 days … (this will capture all pending transactions from the previous day, 2 days before today or 3 days before today)
                       or just use “now” to capture all pending transactions from this moment. May use the following format as well: YYYY-MM-DD HH:MM:SS'),
    '#title' => t('Chose a date from which to start capturing transactions.'),
    '#default_value' => 'now',
    '#required' => TRUE,
  );

  $form['hidden_value'] = array(
    '#type' => 'hidden',
    '#value' => 1,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#description' => t('Capture all pending transactions'),
    '#value' => 'Capture',
  );

  return $form;
}

/**
 * If the form is submited start the batch process.
 */
function commerce_vantiv_batch_form_submit($form, &$form_state) {
  $date = $form_state['values']['date'];
  if (is_numeric($form_state['values']['date']) != TRUE) {
    $date = strtotime($date);
  }

  if ($form_state['values']['hidden_value'] == 1) {
    $_SESSION['http_request_count'] = 0;
    $batch = commerce_vantiv_batch_process($date);
    batch_set($batch);
  }
}

/**
 * Batch process.
 */
function commerce_vantiv_batch_process($date = '') {
  if (!empty($date)) {
    $all_transactions = commerce_vantiv_load_all_pending_transactions($date);
  }
  else {
    $all_transactions = commerce_vantiv_load_all_pending_transactions();
  }
  $operations = array();
  foreach ($all_transactions as $key => $value) {
    $transaction_id = $value->transaction_id;

    $operations[] = array(
      'commerce_vantiv_batch_operation',
      array(
        $transaction_id,
        t('(Operation @operation)', array('@operation' => $key)),
      ),
    );
  }

  $batch = array(
    'operations' => $operations,
    'finished' => 'commerce_vantiv_batchs_finished',
  );

  return $batch;
}

/**
 * Batch operation process.
 */
function commerce_vantiv_batch_operation($transaction_id, $operation_details, &$context) {
  $transaction = commerce_vantiv_load_all_pending_transactions('', $transaction_id);
  if (is_array($transaction)) {
    $transaction = reset($transaction);
  }
  $order = commerce_order_load($transaction->order_id);

  $context['message'] = t('Process transactions "@title"', array('@title' => $transaction->payment_method)) . ' ' . $operation_details;
  $payment_method = commerce_payment_method_instance_load($transaction->instance_id);
  $api = commerce_vantiv_api_object();
  if (!empty($order)) {
    $result = $api->crossPayment($transaction, '', '', 'capture', TRUE);
  }
  $context['results'][] = !empty($result) ? $result : '';
  $_SESSION['http_request_count']++;
}

/**
 * Batch 'finished' callback.
 */
function commerce_vantiv_batchs_finished($success, $results, $operations) {

  if ($success and !empty($results)) {
    foreach ($results as $single_result) {
      if ($single_result['result'] == TRUE and !empty($single_result['transaction_id']) and is_numeric($single_result['transaction_id']) == TRUE) {
        drupal_set_message(t('The captured operation was successful for transaction #@transaction_id.', array('@transaction_id' => $single_result['transaction_id'])), 'status');
      }
      else {
        drupal_set_message(t('The captured operation was not successful for transaction #@transaction_id.', array('@transaction_id' => $single_result['transaction_id'])), 'error');
      }
    }
  }
}

/**
 * Loads transactions by date, transaction_id or order_id.
 */
function commerce_vantiv_load_all_pending_transactions($date = '', $transaction_id = '', $order_id = '') {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'commerce_payment_transaction')
  ->propertyCondition('status', 'pending');
  if (!empty($transaction_id)) {
    $query->propertyCondition('transaction_id', $transaction_id);
  }
  elseif (!empty($order_id)) {
    $query->propertyCondition('order_id', $order_id);
  }
  elseif (!empty($date)) {
    $query->propertyCondition('created', $date, '<=');
  }
  $query->propertyOrderBy('transaction_id', 'DESC');
  $return = array();
  $result = $query->execute();
  if (!empty($result['commerce_payment_transaction'])) {
    foreach ($result['commerce_payment_transaction'] as $transaction_id) {
      $return[] = entity_load_single('commerce_payment_transaction', $transaction_id->transaction_id);
    }
  }
  return $return;
}

function commerce_vantiv_compare_affluence($order, $parameter) {
  $users = user_load($order->uid);
  if (!empty($users_affluence) and $users_affluence == 'all') {

  }
  if ($users->data['affluence'] == 'AFFLUENT' and $parameter == 'affluent') {
    return TRUE;
  }
  elseif ($users->data['affluence'] == 'MASS AFFLUENT' and $parameter == 'mass_affluent') {
    return TRUE;
  }
  elseif (($users->data['affluence'] == 'AFFLUENT' or $users->data['affluence'] == 'MASS AFFLUENT') and $parameter == 'both') {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

function commerce_vantiv_card_issuer_country($order) {
  if (!empty($order->data['card_issuer_country'])) {
    return TRUE;
  }
  return FALSE;
}
