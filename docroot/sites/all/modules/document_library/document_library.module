<?php

/**
 * @file
 * Hooks for the document_library module.
 */

/**
 * Implements hook_menu().
 */
function document_library_menu() {
  $items = array();

  $items['admin/config/media/document-library'] = array(
    'title'             => 'Document Library',
    'description'       => 'Settings for your document library.',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('document_library_admin_settings'),
    'access callback'   => 'user_access',
    'access arguments'  => array('administer site configuration'),
    'file'              => 'document_library.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function document_library_theme($existing, $type, $theme, $path) {
  module_load_include('inc', 'document_library', 'document_library.user');

  return array(
    'document_library_document' => array(
      'template'  => 'document_library_document',
      'variables' => array(
        'node'     => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_preprocess_HOOK().
 */
function document_library_preprocess_document_library_document(&$variables) {
  // This allows a theme to override the module template
  // (theme/document-library-document.tpl.php).
  $variables['theme_hook_suggestions'][] = 'document_library_document';

  // The rest of the code exposes variables to the template.
  $mime_map = _document_library_get_mime_types();

  // Create $document_thumbnail theme variable (if the field exists).
  $thumbnail = field_get_items('node', $variables['node'], 'field_library_document_thumbnail');
  if ($thumbnail) {
    $variables['document_thumbnail'] = array(
      'path'   => file_create_url($thumbnail[0]['uri']),
      'width'  => $thumbnail[0]['width'],
      'height' => $thumbnail[0]['height'],
    );
  }

  // Create $document_file theme variable (if the field exists).
  $file = field_get_items('node', $variables['node'], 'field_library_document_file');
  if ($file) {
    $variables['document_file'] = array(
      'path' => file_create_url($file[0]['uri']),
      'size' => format_size($file[0]['filesize']),
      'type' => strtoupper($mime_map[$file[0]['filemime']]),
    );
  }

  // Create $document_date theme variable (if the field exists).
  $date = field_get_items('node', $variables['node'], 'field_library_document_date');
  if ($date) {
    $timestamp = strtotime($date[0]['value']);
    $variables['document_date'] = array(
      'time'  => $timestamp,
      'year'  => format_date($timestamp, 'custom', 'Y'),
      'month' => format_date($timestamp, 'custom', 'm'),
      'day'   => format_date($timestamp, 'custom', 'd'),
    );
  }

  // Create $document_pages theme variable (if the field exists).
  $pages = field_get_items('node', $variables['node'], 'field_library_document_pages');
  if ($pages) {
    $variables['document_pages'] = check_plain($pages[0]["value"]);
  }

  // Create $document_languages theme variable (if the field exists).
  $language = field_get_items('node', $variables['node'], 'field_library_document_language');
  if ($language) {
    $languages = array();
    foreach ($language as $term) {
      $term        = taxonomy_term_load($term['tid']);
      $languages[] = check_plain($term->name);
    }

    $variables['document_languages'] = drupal_implode_tags($languages);
  }

  // Create $document_body theme variable (if the field exists).
  $body = field_get_items('node', $variables['node'], 'field_library_document_body');
  if ($body) {
    $variables['document_body'] = check_plain($body[0]["value"]);
  }

  // Create $document_tags theme variable (if the field exists).
  $tags = field_get_items('node', $variables['node'], 'field_library_document_tags');
  if ($tags) {
    foreach ($tags as $term) {
      $term = taxonomy_term_load($term['tid']);
      $variables['document_tags'][] = l(
        $term->name,
        request_path(),
        array(
          'attributes' => array(
            'class' => array(
              'button',
            ),
          ),
          'query' => array(
            'library_document_tags' => check_plain($term->name),
          ),
        )
      );
    }
  }
}

/**
 * Implements hook_help().
 */
function document_library_help($path, $arg) {
  switch ($path) {
    case 'admin/help#document_library':
      $output  = '';

      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Document Library module helps you create a library of documents with searching, sorting and filtering.') . '</p>';

      $output .= '<h3>' . t('Pieces') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Document Library Document Content Type') . '</dt>';
      $output .= '<dd>' . t(
        'This content type is created automatically and is completely configurable using the !url feature for the content type.',
        array(
          '!url' => l(t('Manage Fields'), 'admin/structure/types/manage/document-library-document/fields'))
        ) . '</dd>';
      $output .= '<dt>' . t('Document Library Block') . '</dt>';
      $output .= '<dd>' . t(
        'This block will handle the presentation of the document library and comes with searching, sorting and filtering out of the box. These features can be configured completely through the !config. You can manage the block through the !block.',
        array(
          '!config' => l(t('Configuration Interface'), 'admin/config/media/document_library'),
          '!block' => l(t('Block Management Interface'), 'admin/structure/block'))
        ) . '</dd>';
      $output .= '<dt>' . t('Document Library Folder Block') . '</dt>';
      $output .= '<dd>' . t(
        'This block can be used to display a folder structure that can be used to browse the document library. You can manage the block through the !url.',
        array(
          '!url' => l(t('Block Management Interface'), 'admin/structure/block'))
        ) . '</dd>';
      $output .= '</dl>';

      $output .= '<h3>' . t('Set-up') . '</h3>';
      $output .= '<ol>';
      $output .= '<li>' . t(
        '!url.',
        array(
          '!url' => l(t('Configure your Document Library Document Content Type'), 'admin/structure/types/manage/document-library-document/fields'))
        ) . '</li>';
      $output .= '<li>' . t(
        "After modifying the fields of the Document Library Document Content Type, you will need to update the theme template that is used to render the output. To do so, you will need to copy sites/all/modules/document_library/document_library_document.tpl.php into your theme's template folder. Once you have copied the file, you will need to modify the variables that are added to the template using !url. In your theme it will be named THEME_preprocess_document_library_document.",
        array(
          '!url' => l(t('hook_preprocess_HOOK'), 'https://api.drupal.org/api/drupal/modules!system!theme.api.php/function/hook_preprocess_HOOK/7'))
        );
      $output .= '<em>' . t('You can skip this step and access the $node variable directly to get at your fields.') . '</em></li>';
      $output .= '<li>' . t(
        '!url.',
        array(
          '!url' => l(t('Configure your Document Library'), 'admin/config/media/document_library'))
        ) . '</li>';
      $output .= '<li>' . t(
        '!url.',
        array(
          '!url' => l(t('Add Document Library block and Document Library Folder block (optional) to your site'), 'admin/structure/block'))
        ) . '</li>';
      $output .= '</ol>';

      return $output;
  }
}

/**
 * Implements hook_block_info().
 */
function document_library_block_info() {
  $blocks = array();

  $blocks['document_library_block'] = array(
    'info'  => t('Document Library Block'),
    'cache' => DRUPAL_NO_CACHE,
  );

  if (variable_get('document_library_allow_folders', 1)) {
    $blocks['document_library_folder_block'] = array(
      'info'  => t('Document Library Folder Block'),
      'cache' => DRUPAL_NO_CACHE,
    );
  }

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function document_library_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'document_library_block':
      module_load_include('inc', 'document_library', 'document_library.user');
      $block['content'] = document_library_block();
      break;

    case 'document_library_folder_block':
      module_load_include('inc', 'document_library', 'document_library.user');
      $block['content'] = document_library_folder_block();
      break;
  }

  return $block;
}
