<?php

/**
 * @file
 * Install and enable functions for the document_library module.
 */

/**
 * Implements hook_install().
 */
function document_library_install() {
  _document_library_create_vocabularies();
  _document_library_create_content_type();
}

/**
 * Implements hook_enable().
 */
function document_library_enable() {
  drupal_set_message(
    t(
      'Document Library successfully enabled. Please begin at the !settings or !help.',
      array(
        '!settings' => l(t('settings page'), 'admin/config/media/document_library'),
        '!help' => l(t('view the help page'), 'admin/help/document_library'),
      )
    )
  );
}

/**
 * Implements hook_disable().
 */
function document_library_disable() {
  drupal_set_message(t('Document Library successfully disabled. Digital Document content type, taxonomies and url aliases have not been removed.'));
}

/**
 * Implements hook_update_N().
 *
 * Update field descriptions to render html links.
 */
function document_library_update_1() {

  // Language field.
  $field = field_info_instance('node', 'field_library_document_language', 'document_library_document');
  if ($field) {
    $field['description'] = '<p>' . t('The language of the document. To modify this list, go to !url.', array('!url' => l(t('Languages Taxonomy'), 'admin/structure/taxonomy/document_library_document_languages'))) . '</p><p>' . t('To select more than one, hold the control key while selecting languages.') . '</p>';
    field_update_instance($field);
  }

  // Subject field.
  $field = field_info_instance('node', 'field_library_document_subject', 'document_library_document');
  if ($field) {
    $field['description'] = '<p>' . t('The subject area of the document. To modify this list, go to !url.', array('!url' => l(t('Subject Areas Taxonomy'), 'admin/structure/taxonomy/document_library_document_subject_areas'))) . '</p><p>' . t('To select more than one, hold the control key while selecting subject areas.') . '</p>';
    field_update_instance($field);
  }

  // Category field.
  $field = field_info_instance('node', 'field_library_document_category', 'document_library_document');
  if ($field) {
    $field['description'] = '<p>' . t('The category of the document. To modify this list, go to !url.', array('!url' => l(t('Categories Taxonomy'), 'admin/structure/taxonomy/document_library_document_categories'))) . '</p><p>' . t('To select more than one, hold the control key while selecting categories.') . '</p>';
    field_update_instance($field);
  }

  // Tags field.
  $field = field_info_instance('node', 'field_library_document_tags', 'document_library_document');
  if ($field) {
    $field['description'] = '<p>' . t('The category of the document. To modify this list, go to !url.', array('!url' => l(t('Tags Taxonomy'), 'admin/structure/taxonomy/document_library_document_tags'))) . '</p>';
    field_update_instance($field);
  }

  drupal_flush_all_caches();
}

/**
 * Implements hook_update_N().
 *
 * Remove document_library_taxonomy_autocomplete widget from any field using it.
 */
function document_library_update_2() {
  $instances = field_info_instances();
  foreach ($instances as $bundles) {
    foreach ($bundles as $fields) {
      foreach ($fields as $field_instance) {
        if ($field_instance['widget']['type'] == 'document_library_taxonomy_autocomplete') {
          $field_instance['widget']['type'] = 'taxonomy_autocomplete';
          field_update_instance($field_instance);
        }
      }
    }
  }

  drupal_flush_all_caches();
}

/**
 * Add file field to content type.
 */
function _document_library_document_add_file_field($_weight) {
  field_create_field(
    array(
      'field_name'    => 'field_library_document_file',
      'type'          => 'file',
      'bundles'       => array(
        'node' => array(
          'document_library_document',
        ),
      ),
    )
  );

  field_create_instance(
    array(
      'field_name'    => 'field_library_document_file',
      'entity_type'   => 'node',
      'label'         => 'File',
      'bundle'        => 'document_library_document',
      'required'      => TRUE,
      'widget'        => array(
        'weight' => $_weight,
        'type'   => 'file_generic',
      ),
      'settings' => array(
        'file_extensions' => 'pdf doc docx xls xlsx ppt csv txt rtf',
      ),
    )
  );
}

/**
 * Add description field to content type.
 */
function _document_library_document_add_description_field($_weight) {
  field_create_field(
    array(
      'field_name'    => 'field_library_document_body',
      'type'          => 'text_with_summary',
      'bundles'       => array(
        'node' => array(
          'document_library_document',
        ),
      ),
    )
  );

  field_create_instance(
    array(
      'field_name'    => 'field_library_document_body',
      'entity_type'   => 'node',
      'label'         => 'Description',
      'bundle'        => 'document_library_document',
      'widget'        => array(
        'weight' => $_weight,
        'type'   => 'text_textarea_with_summary',
      ),
      'settings'      => array(
        'text_processing' => 0,
      ),
    )
  );
}

/**
 * Add published date field to content type.
 */
function _document_library_document_add_published_date_field($_weight) {
  field_create_field(
    array(
      'field_name'    => 'field_library_document_date',
      'type'          => 'datetime',
      'bundles'       => array(
        'node' => array(
          'document_library_document',
        ),
      ),
      'settings'      => array(
        'granularity' => array(
          'month'     => 'month',
          'day'       => 'day',
          'year'      => 'year',
          'hour'      => 0,
          'minute'    => 0,
          'second'    => 0,
        ),
      ),
    )
  );

  field_create_instance(
    array(
      'field_name'    => 'field_library_document_date',
      'description'   => t('The date that the document was published.'),
      'entity_type'   => 'node',
      'label'         => 'Published Date',
      'bundle'        => 'document_library_document',
      'widget'        => array(
        'weight'    => $_weight,
        'type'      => 'date_popup',
        'settings'  => array(
          'input_format'  => 'Y-m-d H:i:s',
          'year_range'    => '-100:+0',
          'increment'     => 15,
        ),
      ),
      'settings'      => array(
        'default_value' => 'blank',
      ),
    )
  );
}

/**
 * Add number of pages field to content type.
 */
function _document_library_document_add_number_of_pages_field($_weight) {
  field_create_field(
    array(
      'field_name'    => 'field_library_document_pages',
      'type'          => 'number_integer',
      'bundles'       => array(
        'node' => array(
          'document_library_document',
        ),
      ),
    )
  );

  field_create_instance(
    array(
      'field_name'    => 'field_library_document_pages',
      'entity_type'   => 'node',
      'label'         => t('Number of Pages'),
      'bundle'        => 'document_library_document',
      'widget'        => array(
        'weight'    => $_weight,
        'type'      => 'number',
      ),
      'settings'      => array(
        'suffix' => 'pages',
      ),
    )
  );
}

/**
 * Add language field to content type.
 */
function _document_library_document_add_language_field($_weight) {
  field_create_field(
    array(
      'field_name'    => 'field_library_document_language',
      'type'          => 'taxonomy_term_reference',
      'bundles'       => array(
        'node' => array(
          'document_library_document',
        ),
      ),
      'cardinality'   => '-1',
      'settings'      => array(
        'allowed_values' => array(
          array(
            'vocabulary' => 'document_library_document_languages',
            'parent'     => 0,
          ),
        ),
      ),
    )
  );

  field_create_instance(
    array(
      'field_name'    => 'field_library_document_language',
      'entity_type'   => 'node',
      'label'         => 'Language',
      'description'   => '<p>' . t('The language of the document. To modify this list, go to !url.', array('!url' => l(t('Languages Taxonomy'), 'admin/structure/taxonomy/document_library_document_languages'))) . '</p><p>' . t('To select more than one, hold the control key while selecting languages.') . '</p>',
      'bundle'        => 'document_library_document',
      'widget'        => array(
        'weight'    => $_weight,
        'type'      => 'options_select',
      ),
    )
  );
}

/**
 * Add subject area field to content type.
 */
function _document_library_document_add_subject_area_field($_weight) {
  field_create_field(
    array(
      'field_name'    => 'field_library_document_subject',
      'type'          => 'taxonomy_term_reference',
      'bundles'       => array(
        'node' => array(
          'document_library_document',
        ),
      ),
      'cardinality'   => '-1',
      'settings'      => array(
        'allowed_values' => array(
          array(
            'vocabulary' => 'document_library_document_subject_areas',
            'parent'     => 0,
          ),
        ),
      ),
    )
  );

  field_create_instance(
    array(
      'field_name'    => 'field_library_document_subject',
      'entity_type'   => 'node',
      'label'         => 'Subject Area',
      'description'   => '<p>' . t('The subject area of the document. To modify this list, go to !url.', array('!url' => l(t('Subject Areas Taxonomy'), 'admin/structure/taxonomy/document_library_document_subject_areas'))) . '</p><p>' . t('To select more than one, hold the control key while selecting subject areas.') . '</p>',
      'bundle'        => 'document_library_document',
      'widget'        => array(
        'weight'    => $_weight,
        'type'      => 'options_select',
      ),
    )
  );
}

/**
 * Add categories field to content type.
 */
function _document_library_document_add_categories_field($_weight) {
  field_create_field(
    array(
      'field_name'    => 'field_library_document_category',
      'type'          => 'taxonomy_term_reference',
      'bundles'       => array(
        'node' => array(
          'document_library_document',
        ),
      ),
      'cardinality'   => '-1',
      'settings'      => array(
        'allowed_values' => array(
          array(
            'vocabulary' => 'document_library_document_categories',
            'parent'     => 0,
          ),
        ),
      ),
    )
  );

  field_create_instance(
    array(
      'field_name'    => 'field_library_document_category',
      'entity_type'   => 'node',
      'label'         => 'Categories',
      'description'   => '<p>' . t('The category of the document. To modify this list, go to !url.', array('!url' => l(t('Categories Taxonomy'), 'admin/structure/taxonomy/document_library_document_categories'))) . '</p><p>' . t('To select more than one, hold the control key while selecting categories.') . '</p>',
      'bundle'        => 'document_library_document',
      'widget'        => array(
        'weight'    => $_weight,
        'type'      => 'options_select',
      ),
    )
  );
}

/**
 * Add tags field to content type.
 */
function _document_library_document_add_tags_field($_weight) {
  field_create_field(
    array(
      'field_name'    => 'field_library_document_tags',
      'type'          => 'taxonomy_term_reference',
      'bundles'       => array(
        'node' => array(
          'document_library_document',
        ),
      ),
      'cardinality'   => '-1',
      'settings'      => array(
        'allowed_values' => array(
          array(
            'vocabulary' => 'document_library_document_tags',
            'parent'     => 0,
          ),
        ),
      ),
    )
  );

  field_create_instance(
    array(
      'field_name'    => 'field_library_document_tags',
      'entity_type'   => 'node',
      'label'         => 'Document Tags',
      'description'   => '<p>' . t('The category of the document. To modify this list, go to !url.', array('!url' => l(t('Tags Taxonomy'), 'admin/structure/taxonomy/document_library_document_tags'))) . '</p>',
      'bundle'        => 'document_library_document',
      'widget'        => array(
        'weight'    => $_weight,
        'type'      => 'taxonomy_autocomplete',
        'settings'  => array(
          'size'              => 60,
          'autocomplete_path' => 'taxonomy/autocomplete',
        ),
      ),
    )
  );
}

/**
 * Add thumbnail field to content type.
 */
function _document_library_document_add_thumbnail_field($_weight) {
  field_create_field(
    array(
      'field_name'    => 'field_library_document_thumbnail',
      'type'          => 'image',
      'bundles'       => array(
        'node' => array(
          'document_library_document',
        ),
      ),
    )
  );

  field_create_instance(
    array(
      'field_name'    => 'field_library_document_thumbnail',
      'entity_type'   => 'node',
      'label'         => 'Thumbnail',
      'bundle'        => 'document_library_document',
      'required'      => TRUE,
      'widget'        => array(
        'weight' => $_weight,
        'type'   => 'image_image',
      ),
      'settings' => array(
        'file_extensions' => 'png gif jpg jpeg',
      ),
    )
  );
}

/**
 * Create content type.
 */
function _document_library_create_content_type() {
  if (!array_key_exists('document_library_document', node_type_get_names())) {
    $document = node_type_set_defaults();

    $document->type        = 'document_library_document';
    $document->name        = t('Document Library Document');
    $document->base        = 'node_content';
    $document->orig_type   = $document->type;
    $document->description = t('Document Library Document content type. Defines standard document type with fields which can be extended.');
    $document->has_title   = TRUE;
    $document->title_label = t('Document Title');
    $document->custom      = TRUE;

    variable_set('pathauto_node_document_library_document_pattern', 'document-library/document/[node:title]');
    variable_set('node_preview_document_library_document', 1);
    variable_set('node_options_document_library_document', array(0 => 'status'));
    variable_set('node_submitted_document_library_document', 0);
    variable_set('comment_document_library_document', 0);
    variable_set('comment_default_mode_document_library_document', 1);
    variable_set('comment_default_per_page_document_library_document', 50);
    variable_set('comment_subject_field_document_library_document', 1);
    variable_set('comment_form_location_document_library_document', 1);
    variable_set('comment_preview_document_library_document', 1);
    variable_set('menu_options_document_library_document', array());
    variable_set('menu_parent_document_library_document', 'main-menu:0');

    node_type_save($document);
    node_types_rebuild();
    menu_rebuild();

    _document_library_document_add_thumbnail_field(1);
    _document_library_document_add_file_field(2);
    _document_library_document_add_description_field(3);
    _document_library_document_add_published_date_field(4);
    _document_library_document_add_number_of_pages_field(5);
    _document_library_document_add_language_field(6);
    _document_library_document_add_subject_area_field(7);
    _document_library_document_add_categories_field(8);
    _document_library_document_add_tags_field(9);

    $args = array('%name' => 'Document Library Document');
    drupal_set_message(t('The content type %name has been added.', $args));
    watchdog('node', 'Added content type %name.', $args, WATCHDOG_NOTICE, l(t('view'), 'admin/structure/types'));
  }
}

/**
 * Create vocabularies.
 */
function _document_library_create_vocabularies() {
  $vocabularies = taxonomy_get_vocabularies();

  $document_categories_exists    = FALSE;
  $document_languages_exists     = FALSE;
  $document_subject_areas_exists = FALSE;
  $document_tags_exists          = FALSE;

  foreach ($vocabularies as $vocabulary) {
    if ($vocabulary->machine_name == 'document_library_document_categories') {
      $document_categories_exists = TRUE;
      continue;
    }
    if ($vocabulary->machine_name == 'document_library_document_languages') {
      $document_languages_exists = TRUE;
      continue;
    }
    if ($vocabulary->machine_name == 'document_library_document_subject_areas') {
      $document_subject_areas_exists = TRUE;
      continue;
    }
    if ($vocabulary->machine_name == 'document_library_document_tags') {
      $document_tags_exists = TRUE;
      continue;
    }
  }

  if (!$document_categories_exists) {
    taxonomy_vocabulary_save((object) array(
      'name'         => 'Document Library Document Categories',
      'machine_name' => 'document_library_document_categories',
      'description'  => 'Categories for document library document management.',
    ));

    $args = array('%name' => 'Document Library Document Categories');
    drupal_set_message(t('The vocabulary %name has been added.', $args));
    watchdog('taxonomy', 'Added vocabulary %name.', $args, WATCHDOG_NOTICE, l(t('view'), 'admin/structure/taxonomy'));
  }

  if (!$document_languages_exists) {
    taxonomy_vocabulary_save((object) array(
      'name'         => 'Document Library Document Languages',
      'machine_name' => 'document_library_document_languages',
      'description'  => 'Languages for document library document management.',
    ));

    $args = array('%name' => 'Document Library Document Languages');
    drupal_set_message(t('The vocabulary %name has been added.', $args));
    watchdog('taxonomy', 'Added vocabulary %name.', $args, WATCHDOG_NOTICE, l(t('view'), 'admin/structure/taxonomy'));
  }

  if (!$document_subject_areas_exists) {
    taxonomy_vocabulary_save((object) array(
      'name'         => 'Document Library Document Subject Areas',
      'machine_name' => 'document_library_document_subject_areas',
      'description'  => 'Subject Areas for document library document management.',
    ));

    $args = array('%name' => 'Document Library Document Subject Areas');
    drupal_set_message(t('The vocabulary %name has been added.', $args));
    watchdog('taxonomy', 'Added vocabulary %name.', $args, WATCHDOG_NOTICE, l(t('view'), 'admin/structure/taxonomy'));
  }

  if (!$document_tags_exists) {
    taxonomy_vocabulary_save((object) array(
      'name'         => 'Document Library Document Tags',
      'machine_name' => 'document_library_document_tags',
      'description'  => 'Tags for document library document management.',
    ));

    $args = array('%name' => 'Document Library Document Tags');
    drupal_set_message(t('The vocabulary %name has been added.', $args));
    watchdog('taxonomy', 'Added vocabulary %name.', $args, WATCHDOG_NOTICE, l(t('view'), 'admin/structure/taxonomy'));
  }
}
