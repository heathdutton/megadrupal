<?php

/**
 * @file
 * Handle Mailin Emailing services.
 */

/**
 * @defgroup Drupal hooks
 * @{
 */

/**
 * Implements hook_menu().
 */
function mailin_emailing_menu() {
  $items = array();

  $items['admin/config/services/mailin/emailing'] = array(
    'title' => 'Emailing',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mailin_emailing_admin_lists_form'),
    'access callback' => 'mailin_api_access',
    'access arguments' => array('administer mailin emailing'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'mailin_emailing.admin.inc',
  );

  $items['admin/config/services/mailin/emailing/lists'] = array(
    'title' => 'Lists',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['admin/config/services/mailin/emailing/attributes'] = array(
    'title' => 'Attributes',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mailin_emailing_admin_attributes_form'),
    'access callback' => 'mailin_api_access',
    'access arguments' => array('administer mailin emailing'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'mailin_emailing.admin.inc',
  );

  if (module_exists('block')) {
    $items['admin/structure/block/add-mailin-emailing-block'] = array(
      'title' => 'Add Mailin emailing block',
      'description' => 'Add a new Mailin emailing block.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('mailin_emailing_add_block_form'),
      'access arguments' => array('administer blocks'),
      'type' => MENU_LOCAL_ACTION,
      'file' => 'mailin_emailing.admin.inc',
    );

    $default_theme = variable_get('theme_default', 'bartik');

    foreach (list_themes() as $key => $theme) {
      if ($key != $default_theme) {
        $path = 'admin/structure/block/list/' . $key . '/add-mailin-emailing-block';
        $items[$path] = $items['admin/structure/block/add-mailin-emailing-block'];
        $items[$path]['page arguments'] = array('menu_block_add_block_form', 4);
      }
    }

    $items['admin/structure/block/delete-mailin-emailing-block/%'] = array(
      'title' => 'Delete Mailin emailing block',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('mailin_emailing_block_delete_form', 4),
      'access arguments' => array('administer blocks'),
      'type' => MENU_CALLBACK,
      'file' => 'mailin_emailing.admin.inc',
    );
  }

  return $items;
}

/**
 * Implements hook_permission().
 */
function mailin_emailing_permission() {
  return array(
    'administer mailin emailing' => array(
      'title' => t('Administer emailing for Mailin'),
      'description' => t('Administer the Mailin Emailing settings.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function mailin_emailing_theme($existing, $type, $theme, $path) {
  return array(
    'mailin_emailing_admin_attributes_form' => array(
      'render element' => 'form',
      'file' => 'mailin_emailing.admin.inc',
    ),
    'mailin_emailing_admin_lists_form' => array(
      'render element' => 'form',
      'file' => 'mailin_emailing.admin.inc',
    ),
  );
}

/**
 * Implements hook_entity_info_alter().
 */
function mailin_emailing_entity_info_alter(&$info) {
  // Add an extra view mode for users.
  $info['user']['view modes'] += array(
    'mailin' => array(
      'label' => t('Mailin'),
      'custom settings' => FALSE,
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function mailin_emailing_form_user_register_form_alter(&$form, &$form_state, $form_id) {
  if (variable_get('mailin_emailing_user_registration', TRUE)) {
    $mailin_form = mailin_emailing_user_lists_form($form['#user']);

    if (!empty($mailin_form['mailin_emailing'])) {
      $form['mailin'] = array(
        '#type' => 'fieldset',
        '#title' => t('Newsletter'),
      );

      $form['mailin'] += $mailin_form;
    }
  }
}

/**
 * Implements hook_user_insert().
 */
function mailin_emailing_user_insert(&$edit, $account, $category) {
  if (!empty($edit['mailin_emailing'])) {
    mailin_emailing_user_lists_save($account->mail, $edit['mailin_emailing']);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function mailin_emailing_form_block_admin_display_form_alter(&$form, $form_state) {
  foreach (variable_get('mailin_emailing_blocks', array()) as $delta => $block) {
    $form['blocks']['mailin_emailing_' . $delta]['delete'] = array(
      '#type' => 'link',
      '#title' => t('delete'),
      '#href' => 'admin/structure/block/delete-mailin-emailing-block/' . $delta,
    );
  }
}

/**
 * Implements hook_block_info().
 */
function mailin_emailing_block_info() {
  $blocks = array();

  foreach (variable_get('mailin_emailing_blocks', array()) as $delta => $block) {
    $blocks[$delta]['info'] = $block['info'];
    $blocks[$delta]['cache'] = DRUPAL_NO_CACHE;
  }//end foreach

  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function mailin_emailing_block_configure($delta = 0) {
  $block = array();

  if ($delta) {
    $blocks = variable_get('mailin_emailing_blocks', array());

    if (isset($blocks[$delta])) {
      $block = $blocks[$delta];
    }
  }

  $block += array(
    'hide_unique_checkbox' => 0,
    'all_lists' => 1,
    'lists' => array(),
    'flatten_lists' => -1,
  );

  // Re-use the Block module form.
  $form = block_custom_block_form($block);
  $form['body_field']['body']['#title'] = t('Optional description');
  $form['body_field']['body']['#required'] = FALSE;
  $form['body_field']['body']['#description'] = NULL;

  $form['lists'] = array(
    '#type' => 'fieldset',
    '#title' => t('Lists options'),
  );

  $form['lists']['flatten_lists'] = array(
    '#type' => 'radios',
    '#title' => t('Lists display'),
    '#options' => array(-1 => t('Use global setting'), 0 => t('Display the folder hierarchy'), 1 => t('Display the lists flatten')),
    '#default_value' => $block['flatten_lists'],
  );

  $form['lists']['hide_unique_checkbox'] = array(
    // @todo should we use AJAX?
    '#type' => 'checkbox',
    '#title' => t('Hide the checkbox that allow to choose which list to be subscribe to when there is only one available list.'),
    '#description' => t('This feature works well for a block that is only displayed for authenticated users. But for anonymous users, it is not possible to know in advance the email address to check.'),
    '#default_value' => $block['hide_unique_checkbox'],
  );

  $form['lists']['all_lists'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display all enabled lists'),
    '#default_value' => $block['all_lists'],
  );

  $form['lists']['lists'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Available lists'),
    '#options' => mailin_emailing_get_list_names(),
    '#default_value' => $block['lists'],
    '#states' => array(
      'visible' => array(
        'input[name="all_lists"]' => array('checked' => FALSE),
      ),
    ),
  );

  return $form;
}

/**
 * Implements hook_block_save().
 */
function mailin_emailing_block_save($delta = 0, $edit = array()) {
  $blocks = variable_get('mailin_emailing_blocks', array());
  $blocks[$delta] = array(
    'body' => $edit['body']['value'],
    'format' => $edit['body']['format'],
    'info' => $edit['info'],
    'hide_unique_checkbox' => !empty($edit['hide_unique_checkbox']),
    'flatten_lists' => $edit['flatten_lists'],
    'all_lists' => !empty($edit['all_lists']),
    'lists' => empty($edit['all_lists']) ? array_filter($edit['lists']) : array(),
  );

  variable_set('mailin_emailing_blocks', $blocks);
}

/**
 * Implements hook_block_view().
 */
function mailin_emailing_block_view($delta = 0) {
  $blocks = variable_get('mailin_emailing_blocks', array());
  $data = array();

  // Do not display the block on the registration page.
  if ($_GET['q'] !== 'user/register') {
    if (!empty($blocks[$delta]['body'])) {
      $data['content']['body'] = array(
        '#markup' => check_markup($blocks[$delta]['body'], $blocks[$delta]['format'], '', TRUE),
      );
    }

    $data['content']['form'] = drupal_get_form('mailin_emailing_block_user_form', $blocks[$delta]);
  }

  return $data;
}

/**
 * @} End of "defgroup Drupal hooks".
 */

/**
 * Access callback for Mailin user subscription.
 *
 * @param $user
 *   The user account
 */
function mailin_emailing_user_subscription_access($account) {
  return mailin_emailing_get_lists() && user_edit_access($user);
}

/**
 * Get the mailin lists to display.
 */
function mailin_emailing_get_lists($reset = FALSE) {
  static $lists;

  if (!isset($lists) || $reset) {
    $lists = array();

    if (mailin_available() && $list_ids = variable_get('mailin_emailing_lists', array())) {
      $lists = DrupalMailin::get()->getLists($list_ids);
    }
  }

  return $lists;
}

/**
 * Get the mailin lists names.
 */
function mailin_emailing_get_list_names(array $lists = NULL) {
  if (!isset($lists)) {
    $lists = mailin_emailing_get_lists();
  }

  return array_map(function($v) { return $v['name']; }, $lists);
}

/**
 * Get the mappings between user fields and Mailin attributes.
 */
function mailin_emailing_get_mappings() {
  static $drupal_static_fast;

  if (!isset($drupal_static_fast)) {
    $drupal_static_fast['mappings'] = &drupal_static(__FUNCTION__);
  }

  $mappings = &$drupal_static_fast['mappings'];

  if (!isset($mappings)) {
    $mappings = db_query('SELECT * FROM {mailin_emailing_mapping} ORDER BY weight')->fetchAllAssoc('id', PDO::FETCH_ASSOC);
  }

  return $mappings;
}

/**
 * Build the user field using Mailin view mode.
 */
function mailin_emailing_build_user($uid) {
  return user_view(user_load($uid), 'mailin');
}

/**
 * Form builder; lists subscription form.
 */
function mailin_emailing_user_lists_form($account = NULL, array $options = array()) {
  $form = array('#submit_label' => t('Register'));
  $default = array();
  $options += array(
    'lists' => NULL,
    'hide_unique_checkbox' => FALSE,
    'flatten_lists' => variable_get('mailin_emailing_flatten_lists', FALSE),
  );

  extract($options, EXTR_SKIP);

  if (!isset($lists)) {
    $lists = mailin_emailing_get_lists();
  }

  if ($lists) {
    // Get data from Mailin server for $account->mail.
    if (!empty($account->mail) && $user = DrupalMailin::get()->getUser($account->mail)) {
      $default = array_keys($user->getLists());
    }

    $form['mailin_emailing'] = array(
      '#type' => 'container',
      '#attributes' => array('class' => array('mailin-lists')),
      '#tree' => TRUE,
    );

    $form['mailin_emailing']['user_mail'] = array(
      '#type' => 'value',
      '#value' => !empty($account->mail) ? $account->mail : '',
    );

    $form['mailin_emailing']['lists'] = array(
      '#type' => 'value',
      '#value' => array_keys($lists),
    );

    $form['mailin_emailing']['default'] = array(
      '#type' => 'value',
      '#value' => $default,
    );

    $form['mailin_emailing']['hide_unique_checkbox'] = array(
      '#type' => 'value',
      '#value' => $hide_unique_checkbox,
    );

    $form['mailin_emailing']['flatten'] = array(
      '#type' => 'value',
      '#value' => $flatten_lists,
    );

    if ($hide_unique_checkbox && count($lists) == 1) {
      $form['mailin_emailing']['mailin_lists'] = array(
        '#type' => 'value',
        '#value' => key($lists),
      );

      if (in_array($form['mailin_emailing']['mailin_lists']['#value'], $default)) {
        $form['#submit_label'] = t('Unregister');
      }
    }
    elseif ($flatten_lists) {
      $form['mailin_emailing']['mailin_lists'] = array(
        '#type' => 'checkboxes',
        '#options' => mailin_emailing_get_list_names($lists),
        '#default_value' => $default,
      );
    }
    else {
      foreach ($lists as $list_id => $list) {
        if (!isset($form['mailin_emailing']['mailin_lists'][$list['folder_id']])) {
          $form['mailin_emailing']['mailin_lists'][$list['folder_id']] = array(
            '#type' => 'item',
            '#title' => $list['folder_name'],
          );
        }

        $form['mailin_emailing']['mailin_lists'][$list['folder_id']][$list_id] = array(
          '#type' => 'checkbox',
          '#title' => $list['name'],
          '#return_value' => $list_id,
          '#default_value' => in_array($list_id, $default),
        );
      }//end foreach
    }
  }

  return $form;
}

/**
 * Save lists for a given user.
 *
 * @param $email
 *   The email address for the Mailin user.
 * @param $values
 *   The values to store.
 *
 * @see mailin_emailing_user_lists_form()
 */
function mailin_emailing_user_lists_save($email, array $values) {
  if (!empty($email)) {
    extract($values);

    // Take care of possible email address change.
    if ($email !== $user_mail) {
      $default = array();

      if ($user = DrupalMailin::get()->getUser($email)) {
        $default = array_keys($user->getLists());
      }
    }

    $save = $delete = array();

    if ($hide_unique_checkbox && count($lists) == 1) {
      // Should we subscribe or unsubscribe the user?
      $save = in_array($mailin_lists, $default) ? array() : array($mailin_lists);
    }
    elseif ($flatten) {
      $save = $mailin_lists;
    }
    else {
      if (is_array($mailin_lists)) {
        foreach ($mailin_lists as $list_ids) {
          $save += $list_ids;
        }//end foreach
      }
    }

    // The lists to subscribe to.
    $save = array_filter($save);

    // Calculate the lists to unsubscribe from.
    $delete = array_intersect(array_diff($default, $save), $lists);

    if ($save || $delete) {
      $lists = array_fill_keys($save, 1) + array_fill_keys($delete, 0);
      DrupalMailin::get()->saveUser($email, $lists);
    }
  }
}

/**
 * Form builder; subscription block form.
 *
 * @see mailin_emailing_block_user_form_submit()
 * @ingroup forms
 */
function mailin_emailing_block_user_form($form, &$form_state, $block) {
  $lists = NULL;

  if (empty($block['all_lists'])) {
    $lists = array();

    if (!empty($block['lists'])) {
      $lists = DrupalMailin::get()->getLists($block['lists']);
    }
  }

  $options = array(
    'lists' => $lists,
    'hide_unique_checkbox' => $block['hide_unique_checkbox'],
  );

  if (isset($block['flatten_lists']) && $block['flatten_lists'] >= 0) {
    $options['flatten_lists'] = $block['flatten_lists'];
  }

  $form += mailin_emailing_user_lists_form($GLOBALS['user'], $options);

  if (isset($form['mailin_emailing'])) {
    $form['mailin_emailing']['email'] = array(
      '#type' => 'textfield',
      '#title' => t('E-mail address'),
      '#default_value' => $form['mailin_emailing']['user_mail']['#value'],
      '#required' => TRUE,
    );
  }

  if (!empty($form['mailin_emailing'])) {
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => $form['#submit_label'],
    );
  }

  return $form;
}

/**
 * Form submission handler; .
 *
 * @see mailin_emailing_block_user_form()
 */
function mailin_emailing_block_user_form_submit($form, &$form_state) {
  if (!empty($form_state['values']['mailin_emailing'])) {
    $values = $form_state['values']['mailin_emailing'];
    mailin_emailing_user_lists_save($values['email'], $values);
  }

  drupal_set_message(t('Your subscription preferences have been saved.'));
}
