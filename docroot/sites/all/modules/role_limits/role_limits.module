<?php
/**
 *
 * @file
 * Role Limits
 *
 * Allows for limits to be set on the number of users in a given role.
 */

/**
 * Implements hook_permission().
 */
function role_limits_permission() {
  return array(
    'set role limits' => array(
      'title' => t('Set role limits'),
      'description' => t('Assign limits to roles which can be granted on your site'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function role_limits_menu() {
  $items['admin/people/permissions/limits'] = array(
    'title' => t('Role Limits'),
    'description' => t('Set a limit on the number of users in a given role.'),
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('role_limits_admin_settings'),
    'access arguments' => array('set role limits'),
  );
  return $items;
}

function role_limits_user_presave( &$edit, &$account, $category) {
  $roles = $edit['roles'];
  if ($roles != 0) {
    foreach ($roles as $rid => $role) {
      // If the limit is more than 0, which indicates unlimited.
      $user_role = user_role_load($rid);
      if (role_limits_get_limit($rid)) {
        // If we don't find the role in the account, it is being added.
        if (!array_key_exists($rid, $account->roles)) {
          $role_count = role_limits_get_role_count($rid);
          if ($role_count == role_limits_get_limit($rid)) {
            // Reset the user roles back to the existing set.
            $edit['roles'] = $account->roles;
            drupal_set_message(t('The @role role cannot be granted to the user because the limit has been reached.', array('@role' => $user_role->name, '@user' => $account->name)), 'error');
          }
        }
      }
    }
  }
  role_limits_check_registration();
}

/**
 * Implements hook_form_alter().
 */
function role_limits_form_alter(&$form, $form_state, $form_id) {
  if ('user_admin_settings' == $form_id) {
    // If the variable is set to administrators only.
    if (!is_null(variable_get('role_limits_user_register', NULL))) {
      $form['registration']['user_register']['#disabled'] = TRUE;
      drupal_set_message('The role limits module has disabled the "Public Registrations" settings because your site has reached its authenticated user limit.');
    }
  }
}


/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function role_limits_admin_settings($form, &$form_state) {
  $roles = user_roles(TRUE);
  $form['roles'] = array(
    '#type' => 'value',
    '#value' => $roles,
  );
  $form['#description'] = t('Do something here.');

  // Loop over all of the roles and create the form elements.
  foreach ($roles as $rid => $role) {
    $form["settings_role_$rid"] = array(
      '#type' => 'fieldset',
      '#title' => t('Settings for @role', array('@role' => $role)),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#description' => t('There are currently <strong>@count</strong> users in this role.', array('@count' => role_limits_get_role_count($rid))),
    );
    $form["settings_role_$rid"]["role_limits_limit_$rid"] = array(
      '#type' => 'textfield',
      '#title' => t('Maximum user population'),
      '#default_value' => role_limits_get_limit($rid),
      '#maxlength' => 4,
      '#required' => TRUE,
      '#description' => t('The maximum number of users who can have the @role role on the site.. Set to 0 for unlimited.', array('@role' => $role)),
    );
    // If this is the authenticated user role
    if ($rid == 2) {
      $form["settings_role_$rid"]["role_limits_exclude_blocked"] = array(
        '#type' => 'checkbox',
        '#title' => t('Exclude Blocked Users'),
        '#default_value' => variable_get('role_limits_exclude_blocked', 0),
        '#description' => t('Check this box if you want to exclude blocked users from this limit.'),
      );
    }
  }

  $form['#validate'] = array('role_limits_admin_settings_validate');
  $form['#submit'] = array('role_limits_admin_settings_submit');

  return system_settings_form($form);
}

/**
 * Validate function for role limits form.
 */
function role_limits_admin_settings_validate($form, $form_state) {
  foreach ($form_state['values']['roles'] as $rid => $role) {
    $limit = $form_state['values']["role_limits_limit_$rid"];
    if (!ctype_digit($limit)) {
      form_set_error($form_state['values']["role_limits_limit_$rid"], 'Please enter a whole number to represent the limit.');
    }
    if ($limit < role_limits_get_role_count($rid) && $limit > 0) {
      form_set_error($form_state['values']["role_limits_limit_$rid"], 'You can not enter a number less than the number of existing users with this role.');
    }
  }
}

/**
 * Submit function for role limits form.
 */
function role_limits_admin_settings_submit($form, $form_state) {
  foreach ($form_state['values']['roles'] as $rid => $role) {
    $limit = $form_state['values']["role_limits_limit_$rid"];
    if (ctype_digit($limit)) {
      role_limits_set_limit($rid, $limit);
    }
  }
}

/**
 * Returns the limits for a given role.
 *
 * @param int $rid
 * @return The limit for a given role. 0 if no limit.
 */
function role_limits_get_limit($rid) {
  return variable_get("role_limits_limit_$rid", 0);
}

/**
 * Sets the limits for a given role.
 *
 * @param int $rid
 * @return The limit for a given role. 0 if no limit.
 */
function role_limits_set_limit($rid, $limit) {
  variable_set("role_limits_limit_$rid", $limit);
}

/**
 * Given a role id, return the total number of users in that role.
 *
 * @param int $rid
 * @return An integer representing the total number of users.
 */

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function role_limits_get_role_count($rid) {
  $exclude_blocked = variable_get('role_limits_exclude_blocked', 0);
  if ($rid == 1) {
    return 0;
  }
  if ($rid == 2 && !$exclude_blocked) {
    return db_query('SELECT COUNT(uid) FROM {users} WHERE uid != :uid', array(':uid' => 0))->fetchField();
  }
  if ($rid == 2 && $exclude_blocked) {
    return db_query('SELECT COUNT(uid) FROM {users} WHERE uid != :uid AND status != :status', array(':uid' => 0, ':status' => 0))->fetchField();
  }
  return db_query('SELECT COUNT(rid) FROM {users_roles} WHERE rid = :rid', array(':rid' => $rid))->fetchField();
}

/**
 * Checks the authenticated user count and limit to see if
 * we need to turn off the registration.
 *
 * @todo May need to clean this up a little.
 *
 */
function role_limits_check_registration() {
  if (role_limits_get_limit(2)) {
    // If we are at, or over, our limit and we have not turned off the registration before.
    if ((role_limits_get_role_count(2) >= role_limits_get_limit(2)) && is_null(variable_get('role_limits_user_register', NULL))) {
      role_limits_registration(false);
    }
    //If the limit is less than users, but the limit is not 0.
    elseif ((role_limits_get_role_count(2) < role_limits_get_limit(2)) && !is_null(variable_get('role_limits_user_register', NULL))) {
      role_limits_registration(true);
    }
  }
  //If the limit is 0, that means unlimited. Turn us on.
  if (!role_limits_get_limit(2) && !is_null(variable_get('role_limits_user_register', NULL))) {
    role_limits_registration(true);
  }
}

/**
 * Toggles the user registration on and off.
 *
 * @param bool $on
 */
function role_limits_registration($on) {
  if ($on) {
    $setting = variable_get('role_limits_user_register', NULL);
    variable_set('user_register', $setting);
    variable_del('role_limits_user_register');
  }
  else {
    // Store the user registration setting, if it exists.
    $preset = variable_get('user_register', 1);
    variable_set('role_limits_user_register', $preset);

    // Set the variable to "Only Site Administrators can create accounts".
    variable_set('user_register', 0);
    drupal_set_message("The Role Limits module has turned off user registration because the authenticated user limit has been reached.", "status");
  }
}