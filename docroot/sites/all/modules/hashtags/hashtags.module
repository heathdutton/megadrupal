<?php

/**
 * Constants
 */
define('HASHTAGS_FILTER_NAME', 'filter_hashtags');

/**
* Implements hook_help.
*/
function hashtags_help($path, $arg) {
  switch ($path) {
    case "admin/help#hashtags":
      return '<p>'.  t("Configure default behavior of hashtags, including in which vocabulary it\'ll be stored, outputing, showing field.") .'</p>';
      break;
  }
}

/**
 * Implements hook_permission().
 */
function hashtags_permission() {
  return array (
    'administer hashtags' => array(
      'title' => t('Administer hashtags'),
      'restrict access' => TRUE,
    ),
  );
}

/**
* Implements hook_menu.
*/
function hashtags_menu() {
  $items['admin/config/content/hashtags'] = array(
    'title' => 'Hashtags',
    'description' => 'Configure default behavior of hashtags, including in which vocabulary it\'ll be stored, outputing, showing field.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hashtags_configuration_form'),
    'access arguments' => array('administer hashtags'),
    'weight' => -10,
  );

  return $items;
}

/**
 * Implementation of hook_form_alter().
 */
function hashtags_form_alter(&$form, $form_state, $form_id) {
  $vid = variable_get('hashtags_vocabulary', '');    
  // check only for hashtag content types.  
  if (isset($form['type']) && isset($form['#node']) && _hashtags_node_check_node_type($form['#node'])) { 
    $voc = taxonomy_vocabulary_load($vid);
    $hashtags_html_field_id = "edit-field-".$voc->machine_name;    
    // Hide hashtag textfield from node add/edit page;
    drupal_add_js('(function($){$("div#'.$hashtags_html_field_id.'").css("display", "none");})(jQuery);', array('type' => 'inline', 'scope' => 'footer'));    
  }    
}

/**
 * Implementation of hook_field_widget_form_alter().
 */
function hashtags_field_widget_form_alter(&$element, &$form_state, $context) {
  $field_name = variable_get('hashtags_terms_field', '');
  // add handler only for hashtags fields
  if (isset($element['#field_name']) && $element['#field_name'] == $field_name) {
    array_unshift($element['#element_validate'], 'hashtags_autocomplete_validate');    
  }  
}

/**
 * Implements hook_filter_info().
 */
function hashtags_filter_info() {
  $filters = array();  
  $filters[HASHTAGS_FILTER_NAME] = array(
    'title'             => t('Convert Hashtags into links'),
    //'description'       => t('Turn #words into links which lead to taxonomy terms'),             
    'process callback'  => '_hashtags_filter_process',
    'cache'             => TRUE,
  );
  
  return $filters;
}

/*
 * Replace hashtags with term links 
 */
function _hashtags_filter_process($text, $filter, $format, $langcode, $cache, $cache_id) {
  $hashtags_array = hashtags_get_tags($text, FALSE);            
  // No hashtag found in text
  if (!sizeof($hashtags_array)) { return $text; }        
  $hashtags_tids = hashtags_get_terms_by_names($hashtags_array);        
  // No hashtag tids found
  if (!sizeof($hashtags_tids)) { return $text; }   
  
  // create a class to pass parameters and have replace logic  
  $replace_parameter = new hashtags_replace_parameter;
  $replace_parameter->hashtags_tids = $hashtags_tids; 
  
  // 1) 2+ character after #
  // 2) Don't start with or use only numbers (0-9) (#123abc, #123 etc)
  // 3) Letters - digits work correct (#abc123, #conference2013)
  // 4) No Special Characters “!, $, %, ^, &, *, +, .” 
  // 5) No Spaces
  // 6) May use an underscore. Hyphens and dashes will not work.
  // 7) <p>#hashtag</p> - is valid
  // 8) <a href="#hashtag">Link</p> - is not valid
  // Bug when hashtag resides at the begining of the string
  $pattern = "/([\s>]+?)(#[[:alpha:]][[:alnum:]_]*[^<\s[:punct:]])/iu";                      
  $text = preg_replace_callback($pattern, array(&$replace_parameter, 'replace'), $text);
  
  return $text;
}

/*
 * parse hashtags out of field and prepare taxonomy autocomplete string
 */
function hashtags_autocomplete_validate(&$element, &$form_state) {    
  $value = $form_state['values']['body'][$form_state['values']['language']][0]['value'];  
  $hashtags_string = hashtags_get_tags($value);  
  $element['#value'] = $hashtags_string;  
}

/*
 * Create and return commas separated string from hashtag words (#some_word)
 */
function hashtags_get_tags($text, $is_string_return = TRUE, $capture_position = FALSE) {
  if($capture_position) {
    // save position to avoid replacing hashtags inside links (<a hre="#ball">)
    $flag = PREG_OFFSET_CAPTURE;
  } else {
    $flag = PREG_PATTERN_ORDER;
  }
  $tags_list = array();  
  // 1) 2+ character after #
  // 2) Don't start with or use only numbers (0-9) (#123abc, #123 etc)
  // 3) Letters - digits work correct (#abc123, #conference2013)
  // 4) No Special Characters “!, $, %, ^, &, *, +, .” 
  // 5) No Spaces
  // 6) May use an underscore. Hyphens and dashes will not work.
  // 7) <p>#hashtag</p> - is valid
  // 8) <a href="#hashtag">Link</p> - is not valid
  $pattern = "/[\s>]+?(#[[:alpha:]][[:alnum:]_]*[^<\s[:punct:]])/iu";  
  // add <htest> to process first #hastag - string beginning
  preg_match_all($pattern, '<htest>'.$text.'<htest>', $tags_list, $flag);  
  // no hashtags has been found
  if (isset($tags_list[0]) && !sizeof($tags_list[0])) {        
    return '';
  }
  // save position    
  if ($capture_position) {
    foreach ($tags_list[1] as $key => $data) {
      // array[position] = hashtag
      $result[$data[1]] = strtolower($data[0]);      
    }
  } else {
    // turn tags into lowercase  
    foreach ($tags_list[1] as $key => $tag) {
      $tags_list[1][$key] = strtolower($tag);
    }  
    if ($is_string_return) {
      $result = implode(',', $tags_list[1]);  
    } else {
      $result = $tags_list[1];
    }
  }
  
  return $result;
}

/*
 * Returns an array of hashtags by names
 * Array['term_name'] = term_id;
 */
function hashtags_get_terms_by_names($names) {
  $terms = array();  
  $vid = variable_get('hashtags_vocabulary', '');  
  $sql = "SELECT ttd.name, ttd.tid FROM {taxonomy_term_data} ttd   
  WHERE lower(ttd.name) IN (:names) AND ttd.vid = :vid";  
  $result = db_query($sql, array(':names' => $names, ':vid' => $vid));
  foreach ($result as $term) {
    $terms[$term->name] = $term->tid;
  }  
  
  return $terms;
}

/**
 * Check whether a content type can be used in a hashtag. 
 */
function _hashtags_node_check_node_type($node) {
  // Fetch information about the Hashtags field.
  $field_name = variable_get('hashtags_terms_field', '');
  $field = field_info_instance('node', $field_name, $node->type);  
  return is_array($field);
}

/**
* Hashtags configuration form
*/
function hashtags_configuration_form($form, &$form_state) {          
  $field_name = variable_get('hashtags_terms_field', '');
  $types = node_type_get_names();    
  $types_keys = array_keys($types);
  $default_values = array();
  $vocabulary = taxonomy_vocabulary_load(variable_get('hashtags_vocabulary', 0));
  foreach ($types_keys as $type) {    
    if (field_info_instance('node', $field_name, $type)) {
      $default_values[$type] = $type;
    } else {
      $default_values[$type] = 0;
    }
  }  
  $values = array();
  $form['hashtags_content_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Content types'),
    '#options' => $types,
    '#default_value' => $default_values, 
    '#description' => t('Check for what content types you want Hashtags functionality to have')
  );
  $form['#submit'][] = 'hashtags_fields_content_types_submit';

  return system_settings_form($form);
}

/*
 * 
 */
function hashtags_configuration_form_validate($form, &$form_state) {  
  if ($form_state['clicked_button']['#parents'][0] == 'submit') {
    $vocabulary = taxonomy_vocabulary_load(variable_get('hashtags_vocabulary', 0));
    if (!$vocabulary) {
      form_set_error('', t('Taxonomy has n\'t been created or has been deleted manually.. try to reinstall module.'));
      return;
    }
    $field_name = variable_get('hashtags_terms_field', '');    
    if (!field_info_field($field_name)) {
      form_set_error('', t('Terms field has n\'t been created or has been deleted manually.. try to reinstall module.'));
      return;
    } 
  }
}

/*
 * Deal with attaching/detaching Hashtag fields to / out of content types
 */
function hashtags_fields_content_types_submit($form, &$form_state) {
  if ($form_state['clicked_button']['#parents'][0] == 'submit') {        
    $field_name = variable_get('hashtags_terms_field', '');    
    foreach ($form_state['values']['hashtags_content_types'] as $content_type => $checked) {      
      $instance = field_info_instance('node', $field_name, $content_type);
      if ($content_type === $checked) {        
        if (!is_array($instance)) {          
          $instance = array(
            'field_name' => $field_name, 
            'entity_type' => 'node',
            'label' => 'Hashtags',
            'bundle' => $content_type,
            'widget' => array(
              'type' => 'taxonomy_autocomplete',
              'weight' => -4,
            ),
            'display' => array(
              'default' => array(
                'type' => 'taxonomy_term_reference_link',
                'weight' => 10,
              ),
              'teaser' => array(
                'type' => 'taxonomy_term_reference_link',
                'weight' => 10,
              ),
            ),
          );
          field_create_instance($instance);          
        } 
      } else {
        if (is_array($instance)) {          
          field_delete_instance($instance, FALSE);          
        } 
      }
    }    
    drupal_set_message(t('Content types and Hashtags fields chain have been saved.'));
  }  
}

/*
 * Add Hashtags filter to system input formats: Filter HTML and Full HTML;
 */
function hashtags_add_filter() {
  $added_status = array();
  $format_id = 'filtered_html';   
  $is_hashtag_filter_exists = db_query('SELECT COUNT(*) FROM {filter} WHERE format = :format AND module = :module AND name = :name', array(':format' => $format_id, ':module' => 'hashtags', ':name' => HASHTAGS_FILTER_NAME))->fetchField();
  if (!$is_hashtag_filter_exists) {
    $max_filter_weight = db_query('SELECT MAX(weight) FROM {filter} WHERE format = :format', array(':format' => $format_id))->fetchField();
    db_insert('filter')
      ->fields(array(
        'format',
        'name',
        'weight',
        'status',
        'module',
        'settings',
      ))
      ->values(array(
        'format' => $format_id,
        'name' => 'filter_hashtags',
        'weight' => $max_filter_weight + 1,
        'status' => 1,
        'module' => 'hashtags',
        'settings' => serialize(array()),
      ))->execute();    
    $added_status[] = $format_id;
    drupal_set_message(t('Hashtags filter has been added to "Filter HTML" input format'));
    watchdog('Input format', t('Hashtags filter has been added to "Filter HTML" input format'));
  }
  $format_id = 'full_html';
  $is_hashtag_filter_exists = db_query('SELECT COUNT(*) FROM {filter} WHERE format = :format AND module = :module AND name = :name', array(':format' => $format_id, ':module' => 'hashtags', ':name' => HASHTAGS_FILTER_NAME))->fetchField();
  if (!$is_hashtag_filter_exists) {
    $max_filter_weight = db_query('SELECT MAX(weight) FROM {filter} WHERE format = :format', array(':format' => $format_id))->fetchField();
    db_insert('filter')
      ->fields(array(
        'format',
        'name',
        'weight',
        'status',
        'module',
        'settings',
      ))
      ->values(array(
        'format' => $format_id,
        'name' => 'filter_hashtags',
        'weight' => $max_filter_weight + 1,
        'status' => 1,
        'module' => 'hashtags',
        'settings' => serialize(array()),
      ))->execute();     
    $added_status[] = $format_id;
    drupal_set_message(t('Hashtags filter has been added to "Full HTML" input format'));
    watchdog('Input format', t('Hashtags filter has been added to "Full HTML" input format'));
  }      
  // clear filter caches
  filter_formats_reset();
  if (sizeof($added_status)) {
    return TRUE;
  }
  return FALSE;
}

/*
 * Remove Hashtags filter out of all input formats
 */
function hashtags_remove_filter() {
  $module = 'hashtags';
  db_query("DELETE FROM {filter} WHERE module = :module", array(':module' => $module));
  // clear filter caches
  filter_formats_reset();
  drupal_set_message(t('Hashtags filter has been removed from all input format'));
  watchdog('Input format', t('Hashtags filter has been removed from all input format'));
}

/* 
 * Help class to pass paramters to callback function within preg_replace_callback 
 */
class hashtags_replace_parameter {
  function replace($matches) {    
    if (isset($this->hashtags_tids)) {
      $hashtags_tids = $this->hashtags_tids; 
    }    
    $first_delimeter = isset($matches[1]) ? $matches[1] : '';    
    $hashtag_name = isset($matches[2]) ? $matches[2] : '';              
    $hashtag_tid = isset($hashtags_tids[strtolower($hashtag_name)]) ? $hashtags_tids[strtolower($hashtag_name)] : '';            
    // Fatal error: [] operator not supported for strings in /includes/common.inc on line 2442
    // Issue comes up when we try to bind attribute to link which has path parameter of the current page............
    if ($_GET['q'] == 'taxonomy/term/'.$hashtag_tid) {
      $hashtag_link = l($hashtag_name, 'taxonomy/term/'.$hashtag_tid);
    } else {
      $hashtag_link = l($hashtag_name, 'taxonomy/term/'.$hashtag_tid, array('attributes' => array('class' => 'hashtag')));
    }

    return $first_delimeter . $hashtag_link;      
  }
}