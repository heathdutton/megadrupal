<?php

/**
 * @file
 * Maps associated nodequeues and menus with one another for easier sorting
 */

module_load_include('inc', 'nodequeue_menu_mapper', 'nodequeue_menu_mapper.utility');
module_load_include('inc', 'nodequeue_menu_mapper', 'nodequeue_menu_mapper.api');

/**
 * Implements hook_permission().
 */
function nodequeue_menu_mapper_permission() {
  return array(
    'access nodequeue_menu_mapper content' => array(
      'title' => t('View and delete node mapped nodequeue menus'),
      'description' => t('Allow users access to the nodequeue menu mapper
       admin page to view and delete mapped queue and menu relations'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function nodequeue_menu_mapper_menu() {
  $items['admin/structure/nodequeue-menu-mapper'] = array(
    'title' => 'Nodequeue Menu Mapper',
    'description' => 'View and/or delete all nodequeue menu relationships established by the system',
    'page callback' => 'nodequeue_menu_mapper_admin_page',
    'access arguments' => array('access nodequeue_menu_mapper content'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'nodequeue_menu_mapper.admin.inc',
  );

  $items['admin/structure/nodequeue-menu-mapper/delete/%'] = array(
    'page callback' => 'nodequeue_menu_mapper_delete_associative_id',
    'page arguments' => array(4),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'nodequeue_menu_mapper.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_nodequeue_save_subqueue_order_alter().
 */
function nodequeue_menu_mapper_nodequeue_save_subqueue_order_alter($sqid, $nodes) {
  $nodequeue = nodequeue_load($sqid);
  $queue_name = $nodequeue->name;

  // Get queue id.
  $menu_name = nodequeue_menu_mapper_get_menu_for_nodequeue($queue_name);

  if (!$menu_name) {
    // No menu association, get out of here doing none of the following!
    return;
  }

  // Delete all previous menu links in the menu container.
  menu_delete_links($menu_name);

  // Loop through all nodes and create menu links.
  foreach ($nodes as $weight => $node) {
    $nid = $node['nid'];

    $node_title = db_select('node', 'n')
      ->fields('n', array('title'))
      ->condition('nid', $nid)
      ->execute()
      ->fetchField();

    // Build the menu item to insert into the menu.
    $menu_item = array(
      'link_path'  => 'node/' . $nid,
      // System path to item, auto finds alias.
      'link_title' => $node_title,
      // Node title for the link item.
      'menu_name' => $menu_name,
      // Places menu name on all items.
      'weight' => $weight,
      // Uses array key as weight. Sorts same as in nodequeue.
      'mlid' => NULL,
      // If you pass NULL, it creates a new menu entry. All old entries deleted so this is okay.
      // 'plid' => NULL // This is where a parent link id is added for nested menus... if you need it.
    );
    // Save the updated link.
    menu_link_save($menu_item);
  }
  // Reset the menu order since it's cached at a system level.
  // Clears out the cache for the now update menu.
  menu_cache_clear($menu_name);
}


/**
 * Implements hook form alter().
 *
 * Adds the ability to add a menu to a nodequeue.
 * Gets default value as well of current nodequeue.
 */
function nodequeue_menu_mapper_form_alter(&$form, &$form_state, $form_id) {
  // Add relevant menu to nodeuqueue.
  if ($form_id == 'nodequeue_edit_queue_form' && user_access('access nodequeue_menu_mapper content')) {
    // Set default value.
    $default_value = 'none';

    // Get current nodequeue name.
    $queue_name = (isset($form['name']['#value']) ? $form['name']['#value'] : '');

    // Check to see if nodequeue has a menu assigned to it already.
    if (!empty($queue_name)) {
      $default_value = array($queue_name => nodequeue_menu_mapper_get_menu_for_nodequeue($queue_name));
    }

    // Create a options for nodequeue select list.
    $options = array_merge(
      array('none' => t('No menu association')),
      nodequeue_menu_mapper_get_available_menus($default_value));

    $form['relevant_menu'] = array(
      '#type'          => 'select',
      '#title'         => t('Relevant Menu'),
      '#options'       => $options,
      '#description'   => t('Nodequeues are mapped to menus. Adjusting this nodequeue will affect a set menu.'),
      '#weight'        => 0,
      '#default_value' => $default_value,
    );

    $form['#submit'][] = 'nodequeue_mapper_map_nodequeue_form';
  }

  // Add relevant nodequeue to the menu.
  if ($form_id == 'menu_edit_menu' && user_access('access nodequeue_menu_mapper content')) {
    // Set default value.
    $default_value = 'none';

    // Set menu name.
    $menu_name = (isset($form['old_name']['#value']) ? $form['old_name']['#value'] : '');

    // Check to see if menu has a nodequeue assigned to it already.
    if (!empty($menu_name)) {
      $default_value = array(
        $menu_name => nodequeue_menu_mapper_get_nodequeue_for_menu($menu_name),
      );
    }

    // Create a options for nodequeue select list.
    $options = array_merge(
      array('none' => t('no nodequeue association')),
      nodequeue_menu_mapper_get_nodequeue_array_for_menus($default_value));

    $form['relevant_nodequeue'] = array(
      '#type'          => 'select',
      '#title'         => t('Relevant Nodequeue'),
      '#options'       => $options,
      '#description'   => t('Nodequeues are mapped to menus. Adjusting this nodequeue will affect a set menu.'),
      '#weight'        => 0,
      '#default_value' => $default_value,
    );

    $form['#submit'][] = 'nodequeue_mapper_map_menu_form';
  }

  // Add a form submission function to menu item rearranging.
  if ($form_id == 'menu_overview_form') {
    $form['#submit'][] = 'nodequeue_menu_mapper_nq_submit';
  }

  // Alter node forms menu selection to remove children on flattened menus.
  if (strpos($form_id, '_node_form') !== FALSE) {
    $hide_options = FALSE;
    foreach ($form['menu']['link']['parent']['#options'] as $key => $menu_option) {
      // It's a parent item.
      if (strpos($menu_option, '<') !== FALSE) {
        // Reset hide options.
        $hide_options = FALSE;
        // Get menu name.
        $menu_name = 'menu-' . strtolower(str_replace(' ', '-', str_replace('>', '', str_replace('<', '', $menu_option))));
        // Check if it is a nodequeue
//        if (nodequeue_menu_mapper_get_nodequeue_for_menu($menu_name)) {
//          $hide_options = TRUE;
//        }
      }
      else {
        // It's a child item.
        if ($hide_options == TRUE) {
          unset($form['menu']['link']['parent']['#options'][$key]);
        }
      }
    }
  }

  // Add functionality for when a node is directly added to a queue, place it directly into a menu with a heavy weight!
  if (strpos($form_id, 'nodequeue_arrange_subqueue') !== FALSE) {
    $form['add']['submit']['#submit'][] = 'nodequeue_menu_mapper_add_node_to_nodequeue';
  }



  // Add functionality to nodequeue admin delete
  if ($form_id == 'nodequeue_admin_delete') {
    $form['#submit'][] = 'nodequeue_menu_mapper_delete_nodequeue';
  }

  //Work with menu form to remove parent child functionality
  if ($form_id == 'menu_overview_form') {
    // If menu is associated with a nodequeue, add JS to reduce table drag to not allowing indentation
    if(nodequeue_menu_mapper_get_nodequeue_for_menu($form['#menu']['menu_name'])){
      drupal_add_js('jQuery(document).ready(function () { Drupal.tableDrag["menu-overview"].indentEnabled = false; });', 'inline');
    }
  }

}


/**
 * Implements hook_node_insert().
 *
 * Gets new nodes, checks if they are added to a menu
 * checks if menu has correlating nodequeue, and if so
 * Add the item to the nodequeue.
 */
function nodequeue_menu_mapper_node_insert($node) {
  // Gets the Nodequeue ID for menu
  // Returns false if there isn't an associated ID.
  $queue_name = nodequeue_menu_mapper_get_nodequeue_for_menu($node->menu['menu_name']);

  // If there is a nodequeue relationship.
  if ($queue_name) {
    // Get nodequeue (both NQ and SQ are same).
    $queue = nodequeue_load_queue_by_name($queue_name);

    // Assign qid.
    $qid = $queue->qid;
    // Get subqeueue.

    $subqueue = nodequeue_load_subqueue($qid);

    // Add the node to the queue.
    nodequeue_subqueue_add($queue, $subqueue, $node->nid);

    // DISABLED Code that puts the node to the front of the nodequeue,
    // may be false presumption as nodes start with weight zero, not at top of menu
    // nodequeue_queue_front($subqueue, nodequeue_get_subqueue_position($queueID, $node->nid));
  }
}

/**
 * Implements hook_node_update().
 */
function nodequeue_menu_mapper_node_update($old_node) {
  // Reset cache for node and get new node to compare to old Node.
  entity_get_controller('node')->resetCache(array($old_node->nid));
  $new_node = node_load($old_node->nid);

  // If there wasn't a menu before and isn't one now... there's nothing to do, so check for it!
  if (!empty($new_node->menu_node_links) || !empty($old_node->menu_node_links)) {

    // Check for situation of a NEW menu link.
    if (empty($old_node->menu_node_links) && !empty($new_node->menu_node_links)) {
      // Get menu name from new node values.
      $menu_name = array_shift(array_values($new_node->menu_node_links))->menu_name;

      // Get queue ID from menu name.
      $queue_name = nodequeue_menu_mapper_get_nodequeue_for_menu($menu_name);

      // Load queue object.
      $queue_obj = nodequeue_load_queue_by_name($queue_name);

      // Assign qid.
      $qid = $queue_obj->qid;

      // Get subqeueue from QID.
      $subqueue = nodequeue_load_subqueue($qid);

      // Put it in the queue.
      nodequeue_subqueue_add($queue_obj, $subqueue, $new_node->nid);
      // DISABLED Code that puts the node to the front of the nodequeue,
      // may be false presumption as nodes start with weight zero, not at top of menu
      // nodequeue_queue_front($subqueue, nodequeue_get_subqueue_position($queueID, $new_node->nid));
    }

    // Check for situation of an UPDATED menu link.
    if (!empty($old_node->menu_node_links) && !empty($new_node->menu_node_links)) {
      $old_menu_values = array_values($old_node->menu_node_links);
      $old_menu_name = array_shift($old_menu_values)->menu_name;

      $new_menu_values = array_values($new_node->menu_node_links);
      $new_menu_name = array_shift($new_menu_values)->menu_name;

      if ($old_menu_name != $new_menu_name) {
        // Get queue name from menu name.
        $old_queue_name  = nodequeue_menu_mapper_get_nodequeue_for_menu($old_menu_name);
        if ($old_queue_name) {

          // Load queue object.
          $old_queue_obj = nodequeue_load_queue_by_name($old_queue_name);

          // Assign qid.
          $old_qid = $old_queue_obj->qid;

          // Get subqeueue from QID.
          $old_subqueue = nodequeue_load_subqueue($old_qid);

          $old_sq_id = $old_subqueue->sqid;

          // Delete the node from the subqueue.
          nodequeue_subqueue_remove_node($old_sq_id, $new_node->nid);
        }

        // Get queue ID from menu name.
        $new_queue_name  = nodequeue_menu_mapper_get_nodequeue_for_menu($new_menu_name);

        if ($new_queue_name) {
          // Load queue object.
          $new_queue_obj = nodequeue_load_queue_by_name($new_queue_name);

          // Assign qid.
          $new_qid = $new_queue_obj->qid;

          // Get subqeueue from QID.
          $new_subqueue = nodequeue_load_subqueue($new_qid);

          $new_sq_id = $new_subqueue->sqid;

          // Put it in the queue.
          nodequeue_subqueue_add($new_queue_obj, $new_subqueue, $new_node->nid);
          // DISABLED Code that puts the node to the front of the nodequeue,
          // may be false presumption as nodes start with weight zero, not at top of menu
          // nodequeue_queue_front($subqueue, nodequeue_get_subqueue_position($sqid, $new_node->nid));
        }
      }

    }

    // Check for a situation of a DELETED menu link.
    if (!empty($old_node->menu_node_links) && empty($new_node->menu_node_links)) {
      // Get menu name from OLD node values.
      $menu_name = array_shift(array_values($old_node->menu_node_links))->menu_name;
      // Get Sqid ID from menu name.
      $sqid = nodequeue_menu_mapper_get_nodequeue_for_menu($menu_name);
      // Delete the node from the subqueue.
      nodequeue_subqueue_remove_node($sqid, $new_node->nid);
    }
  }
}

/**
 * Implements hook_link_delete().
 *
 * Used to determine when a menu is deleted, that it should remove
 * the relationship between a menu and a nodequeue
 */
function nodequeue_menu_mapper_menu_link_delete($link) {
  // Deleted menus have a link path to an admin page for whatever reason.
  if (strpos($link['link_path'], 'admin/structure/menu/manage') !== FALSE) {
    // Str trickery is required because drupal never
    // passes menu name other than as part of the link URL.
    $link_path = explode('/', $link['link_path']);
    $menu_name = end($link_path);

    // Get queue name.
    $queue_name = nodequeue_menu_mapper_get_nodequeue_for_menu($menu_name);

    // Delete the menu and nodequeue association.
    db_delete('nodequeue_menu_mapper')
      ->condition('menu_name', $menu_name)
      ->condition('nodequeue_name', $queue_name)
      ->execute();
  }
}

/**
 * Implements hook_node_validate().
 *
 * Grabs form submission (only time you can alter stuff
 * that goes on to generate menu links) and alters
 * whether or not you can
 */
function nodequeue_menu_mapper_node_validate($node, $form, &$form_state) {
  // Check if a menu was even selected...
  if ($form_state['values']['menu']['enabled']) {
    // Get new menu name of submission.
    $new_menu_name = nodequeue_menu_mapper_regex_drupal_menu_name($form_state['values']['menu']['parent']);
    // Check if menu name is a nodequeue.
    if (nodequeue_menu_mapper_get_nodequeue_for_menu($new_menu_name)) {
      // If this isn't a new node got old menu name.
      if (!is_null($node->nid)) {
        $old_node       = node_load($node->nid);
        $old_menu_name = end($old_node->menu_node_links)->menu_name;
      }
      // Check if this is a new node or
      // a new menu item compared to previous menu item.
      if (is_null($node->nid) || $new_menu_name != $old_menu_name) {
        // There was a CHANGE!
        // Since it's a new menu item with a nodequeue relationship,
        // set the weight of the menu stupid high so as it goes to end of queue!
        $form_state['values']['menu']['weight'] = 50;
      }
    }
  }
}

/**
 * Implements hook_features_api().
 */
function nodequeue_menu_mapper_features_api() {
  return array(
    'nodequeue_menu_mapper' => array(
      'name' => t('Nodequeue Menu Mapper'),
      'feature_source' => TRUE,
      'default_hook' => 'nodequeue_menu_mapper_export_fields',
      'default_file' => FEATURES_DEFAULTS_INCLUDED_COMMON,
      'file' => 'nodequeue_menu_mapper.admin.inc',
    ),
  );
}

/**
 * Implements hook_menu_alter
 *
 * Purpose: change callback for deleting a nodequeue item
 */

function nodequeue_menu_mapper_menu_alter(&$items){
  $items['nodequeue/%nodequeue/remove-node/%subqueue/%node']['page callback'] = 'nodequeue_menu_mapper_delete_nodequeue_item';
}
