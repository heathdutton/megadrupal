<?php

/**
 * @file
 * Provides Canada Post shipping quotes for Drupal Commerce.
 */


module_load_include('inc', 'commerce_canadapost', 'includes/commerce_canadapost.services');

/**
 * Implements hook_menu().
 */
function commerce_canadapost_menu() {
  $items = array();

  $items['admin/commerce/config/shipping/methods/canadapost/edit'] = array(
    'title' => 'Edit',
    'description' => 'Configure the Canada Post shipping method.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_canadapost_settings_form'),
    'access arguments' => array('administer shipping'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 0,
    'file' => 'includes/commerce_canadapost.admin.inc',
  );

  foreach (commerce_shipping_services('canadapost') as $name => $shipping_service) {
    // Convert underscores to hyphens for the menu item argument.
    $service_name_arg = 'canadapost-' . strtr($name, '_', '-');

    $items['admin/commerce/config/shipping/services/' . $service_name_arg . '/remove'] = array(
      'title' => 'Remove',
      'description' => 'Remove this service.',
      'page callback' => 'commerce_canadapost_service_delete_page',
      'page arguments' => array($name),
      'access arguments' => array('administer shipping'),
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_INLINE,
      'weight' => 0,
      'file' => 'includes/commerce_canadapost.admin.inc',
    );
  }

  return $items;
}

/**
 * Implements hook_commerce_shipping_method_info().
 */
function commerce_canadapost_commerce_shipping_method_info() {
  $shipping_methods = array();

  $shipping_methods['canadapost'] = array(
    'title' => t('Canada Post'),
    'description' => t('Provides Canada Post shipping quotes.'),
  );

  return $shipping_methods;
}

/**
 * Implements hook_commerce_shipping_service_info().
 */
function commerce_canadapost_commerce_shipping_service_info() {
  $enabled_shipping_services = array();

  // Get list of all available shipping services.
  $all_services = array();
  foreach (commerce_canadapost_services_list() as $service_code => $service_data) {
    $all_services[commerce_canadapost_generate_service_machine_name($service_code)] = $service_data['name'];
  }

  foreach (commerce_canadapost_load_enabled_services() as $name => $service) {
    // Use shipping service name directly from Canada Post if possible, default
    // to the one that was stored in the database.
    $service_title = isset($all_services[$name]) ? $all_services[$name] : $service['title'];

    $enabled_shipping_services[$name] = array(
      // theme_shipping_method_admin_overview() runs check_plain() on title.
      'title' => t('Canada Post !service_title', array('!service_title' => $service_title)),
      'display_title' => t('Shipping: Canada Post !service_title', array('!service_title' => $service_title)),
      'shipping_method' => 'canadapost',
      'rules_component' => TRUE,
      'price_component' => $name,
      'weight' => $service['weight'],
      'callbacks' => array(
        'rate' => 'commerce_canadapost_service_rate_order',
      ),
    );

    // On service list pages, add note to any services that aren't in the list
    // retrieved from the Canada Post API.
    if ((substr(current_path(), 0, 30) == 'admin/commerce/config/shipping') && !empty($all_services) && !in_array($name, array_keys($all_services))) {
      $enabled_shipping_services[$name]['description'] = t('<em>NOTE: This service no longer appears in the Canada Post Web Services API.</em>');
    }
  }

  return $enabled_shipping_services;
}

/**
 * Implements hook_commerce_price_component_type_info().
 */
function commerce_canadapost_commerce_price_component_type_info() {
  $components = array();

  // Define price components for services with 'disabled' status; preserving
  // data integrity for past orders.
  foreach (commerce_canadapost_load_disabled_services() as $machine_name => $service) {
    $components[$machine_name] = array(
      'title' => t('[DISABLED] Canada Post !service_title', array('!service_title' => $service['title'])),
      'display_title' => t('Shipping: Canada Post !service_title', array('!service_title' => $service['title'])),
      'shipping_service' => $machine_name,
      'weight' => 20,
    );
  }

  return $components;
}

/**
 * Implements hook_commerce_shipping_service_rate_options_alter().
 */
function commerce_canadapost_commerce_shipping_service_rate_options_alter(&$options, $order) {
  $date_format = variable_get('commerce_canadapost_delivery_date_format', '');

  foreach ($order->shipping_rates as $name => $line_item) {
    // Only modify Canada Post service options.
    if (substr($name, 0, 10) == 'canadapost') {
      $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
      $data = $line_item_wrapper->commerce_unit_price->data->value();

      // Estimated delivery date string.
      $delivery_date = '';
      if (in_array($date_format, array_keys(system_get_date_types())) && strtotime($data['delivery_date'])) {
        $delivery_date = t('<span class="delivery-date">(Estimated delivery: !delivery_date)</span>', array(
          '!delivery_date' => format_date(strtotime($data['delivery_date']), $date_format),
        ));
      }

      // Package count string.
      $display_package_count = variable_get('commerce_canadapost_package_count', 'hide');
      if ($display_package_count == 'hide' || ($display_package_count == 'multiple' && $data['package_count'] <= 1)) {
        $package_count = '';
      }
      else {
        $package_count = '(' . format_plural($data['package_count'], '1 package', '@count packages') . ')';
      }

      $options[$name] = t('@shipping_service: !price !package_count !delivery_date', array(
        '@shipping_service' => commerce_shipping_service_get_title($name, 'display_title'),
        '!price' => commerce_currency_format($line_item_wrapper->commerce_unit_price->amount->value(), $line_item_wrapper->commerce_unit_price->currency_code->value()),
        '!delivery_date' => $delivery_date,
        '!package_count' => $package_count,
      ));
    }
  }
}

/**
 * Shipping service callback: returns shipping rates for a given order.
 */
function commerce_canadapost_service_rate_order($shipping_service, $order) {
  // Recover cached shipping rates for the current order.
  $rates = commerce_shipping_rates_cache_get('canadapost', $order, variable_get('commerce_canadapost_cache_timeout', 60));

  // No rates recovered or cache has expired.
  if (!$rates) {
    module_load_include('inc', 'commerce_canadapost', 'includes/commerce_canadapost.rates');

    $rates = array();

    // Build the rate request for the current order.
    $rate_request = commerce_canadapost_build_rate_request($order);

    // If we got a valid rate request back...
    if (!empty($rate_request)) {
      // Submit once for each package.
      foreach ($rate_request as $rate_request_element) {
        $response = commerce_canadapost_api_request('https://soa-gw.canadapost.ca/rs/ship/price', $rate_request_element->asXML(), t('Requesting shipping rates for package in Order @order_number', array('@order_number' => $order->order_number)));

        // If rate request was successful.
        if ($response) {
          // Parse the response into the rates array.
          foreach (commerce_canadapost_parse_rate_response($response) as $service_name => $rate) {
            // If this is not the first package (rate exists).
            if (isset($rates[$service_name])) {
              // Add amount to existing rate.
              $rates[$service_name]['amount'] += $rate['amount'];
            }
            // This is the first package.
            else {
              $rates[$service_name] = $rate;

              // Add package count: each rate request = 1 package.
              $rates[$service_name]['data']['package_count'] = count($rate_request);
            }
          }
        }
      }

      // Apply rate markup.
      foreach ($rates as $service_name => $rate) {
        $rate_markup_amount = commerce_currency_decimal_to_amount(commerce_canadapost_service_markup($rate), $rate['currency_code']);
        $rates[$service_name]['amount'] += $rate_markup_amount;
      }
    }

    // Cache these rates.
    commerce_shipping_rates_cache_set('canadapost', $order, $rates);
  }

  // Return the rate for the requested service or FALSE if not found.
  return isset($rates[$shipping_service['name']]) ? $rates[$shipping_service['name']] : FALSE;
}

/**
 * Submits an API request to the Canada Post XML Processor.
 *
 * @param string $target_url
 *   The url to submit the request to.
 * @param string $xml
 *   An XML string to submit.
 * @param string $message
 *   (Optional) Log message to use for logged API requests.
 * @param string $alternate_api_key
 *   (Optional) An API key (if different from the one saved in the database)
 *
 * @return SimpleXMLElement
 *   Returns a SimpleXML Element containing the response from the API server or
 *   FALSE if there was no response or an error occurred.
 */
function commerce_canadapost_api_request($target_url, $xml = '', $message = '', $alternate_api_key = '') {
  $api_key = $alternate_api_key ? $alternate_api_key : variable_get('commerce_canadapost_api_key', '');
  $error_messages = array();

  // Abort if API key hasn't been set.
  if (empty($api_key)) {
    return FALSE;
  }

  // Log the API request if specified.
  $logging = variable_get('commerce_canadapost_log');
  if (isset($logging['request']) && $logging['request']) {
    if (empty($message)) {
      $message = t('Submitting API request to the Canada Post XML processor');
    }

    if ($xml) {
      $request_dom = new DomDocument("1.0");
      $request_dom->preserveWhiteSpace = FALSE;
      $request_dom->formatOutput = TRUE;
      $request_dom->loadXML($xml);
      watchdog('canadapost', '!message:<pre>@xml</pre>', array('!message' => $message, '@xml' => $request_dom->saveXML()));
    }
    else {
      watchdog('canadapost', '!message', array('!message' => $message));
    }
  }

  // Build the array of header information for the request.
  $headers = array(
    'Content-type'    => 'application/vnd.cpc.ship.rate-v2+xml',
    'Accept'          => 'application/vnd.cpc.ship.rate-v2+xml',
    'Accept-language' => commerce_canadapost_get_language(),
    'User-Agent'      => 'Drupal Commerce Canada Post shipping module',
  );

  // POST to the Canada Post RESTful Web Services API.
  if (variable_get('commerce_canadapost_request_method') == 'curl') {
    $ch = curl_init($target_url);

    // Format headers for cURL.
    $curl_headers = array();
    foreach ($headers as $key => $value) {
      $curl_headers[] = $key . ': ' . $value;
    }

    curl_setopt($ch, CURLOPT_HTTPHEADER, $curl_headers);
    curl_setopt($ch, CURLOPT_VERBOSE, 0);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_NOPROGRESS, 1);
    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 0);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 1);
    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);
    curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);
    curl_setopt($ch, CURLOPT_USERPWD, $api_key);

    if ($xml) {
      curl_setopt($ch, CURLOPT_POST, 1);
      curl_setopt($ch, CURLOPT_POSTFIELDS, $xml);
    }

    $result = curl_exec($ch);

    if (curl_error($ch)) {
      $error_messages[] = curl_error($ch);
    }

    curl_close($ch);
  }
  // Use drupal_http_request().
  else {
    $headers['Authorization'] = 'Basic ' . base64_encode($api_key);
    $options['headers'] = $headers;

    if ($xml) {
      $options['method'] = 'POST';
      $options['data'] = $xml;
    }

    $request = drupal_http_request($target_url, $options);
    $result = $request->data;

    if (isset($request->error)) {
      $error_messages[] = t('HTTP status code @code: @error', array(
        '@code'   => $request->code,
        '@error'  => $request->error,
      ));
    }
  }

  // Extract the result into an XML response object.
  try {
    $response = @new SimpleXMLElement($result);
  }
  catch (Exception $e) {
    $error_messages[] = t('Error parsing the API response into an SimpleXMLElement object: @error', array('@error' => $e->getMessage()));
  }

  // Validate the response object.
  if (isset($response)) {
    $response_status = commerce_canadapost_validate_api_response($response);

    // Collect additional error messages.
    if ($response_status['error']) {
      $error_messages = array_merge($error_messages, $response_status['messages']);
    }
  }

  // Output any error messages to watchdog.
  if (count($error_messages)) {
    watchdog('canadapost', 'API request error(s):<ul><li>!errors</li></ul>', array('!errors' => implode('</li><li>', $error_messages)), WATCHDOG_ERROR);

    return FALSE;
  }
  // Return response.
  else {
    // Log the API response if specified.
    if (isset($logging['response']) && $logging['response']) {
      $response_dom = new DomDocument("1.0");
      $response_dom->preserveWhiteSpace = FALSE;
      $response_dom->formatOutput = TRUE;
      $response_dom->loadXML($response->asXML());

      watchdog('canadapost', 'API response received:<pre>@xml</pre>', array('@xml' => $response_dom->saveXML()));
    }

    return $response;
  }
}

/**
 * Checks a Canada Post API response for errors.
 *
 * @param SimpleXMLElement $response
 *   The response element to evaluate.
 * 
 * @return array
 *   An array containing an error status and any related messages.
 */
function commerce_canadapost_validate_api_response($response) {
  $status = array(
    'error' => FALSE,
    'messages' => array(),
  );

  // Check for error messages.
  if ($response->getName() == 'messages') {
    $status['error'] = TRUE;

    foreach ($response as $message) {
      $status['messages'][] = t('From Canada Post API: @code (@description)', array(
        '@code' => $message->{'code'},
        '@description' => $message->{'description'},
      ));
    }
  }

  return $status;
}

/**
 * Calculates rate markup for a service.
 *
 * @param array $rate
 *   A keyed array containing shipping rate information for a service.
 *
 * @return double
 *   The amount to add to the base rate (in decimal format).
 */
function commerce_canadapost_service_markup($rate) {
  $rate_markup = variable_get('commerce_canadapost_rate_markup', array('type' => 'none', 'amount' => 0));

  switch ($rate_markup['type']) {
    // Flat amount.
    case 'flat':
      return $rate_markup['amount'];

    // Flat amount per package.
    case 'package':
      return $rate_markup['amount'] * $rate['data']['package_count'];

    // Percentage of rate.
    case 'percentage':
      return ($rate_markup['amount'] / 100) * commerce_currency_amount_to_decimal($rate['amount'], $rate['currency_code']);

    default:
      return 0;
  }
}

/**
 * Helper function that returns a language code.
 *
 * The Canada Post web services API accepts en-CA and fr-CA. French results will
 * be requested if the active language starts with 'fr'. Default to English.
 *
 * @return string
 *   en-CA (default) or fr-CA
 */
function commerce_canadapost_get_language() {
  // Get first two characters of current language code.
  global $language;
  $langcode = strtolower(substr($language->language, 0, 2));

  return ($langcode == 'fr') ? 'fr-CA' : 'en-CA';
}

/**
 * Formats a postal/zip-code for submission to Canada Post web services API.
 *
 * @param string $code
 *   A postal/zip code.
 *
 * @param string $country
 *   A two-letter country code.
 *
 * @return string
 *   A formatted postal/zip code.
 */
function commerce_canadapost_format_postal_code($code, $country = NULL) {
  switch ($country) {
    // Canada: H0H0H0 (uppercase, no space, filter out invalid characters).
    case 'CA':
      return preg_replace('/[^A-Z0-9]+/', '', strtoupper($code));

    // USA: 12345 or 12345-6789 (filter out invalid characters).
    case 'US':
      return preg_replace('/[^0-9\-]+/', '', $code);

    // Other: Do nothing.
    default:
      return $code;
  }
}
