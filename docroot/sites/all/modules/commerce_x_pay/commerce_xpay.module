<?php 
/**
 * @file
 * Implements X-Pay - Carta S“ Website Payments Standard in
 * Drupal Commerce checkout.
 */

/**
 * Implements hook_menu().
 */
function commerce_xpay_menu() {
  // Define an additional IPN path that is payment method / instance specific.
  $items['commerce_xpay/ipn/%commerce_payment_method_instance'] = array(
    'page callback' => 'commerce_xpay_process_ipn',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_xpay_commerce_payment_method_info() {
  $payment_methods = array();

  $path = base_path() . drupal_get_path('module', 'commerce_xpay');
  $display_title = variable_get('commerce_xpay_method_title', t('Credit card on a secure server:'));
  $display_title .= '<br /><img src="' . $path . '/images/xpay_cc.gif" alt="Mastercard and Visa" style="position: relative; left: 2.5em;">';

  $payment_methods['commerce_xpay'] = array(
    'method_id' => 'commerce_xpay',
    'title' => t('X-Pay - Carta SÃ¬'),
    'short_title' => t('xPAy'),
    'display_title' => $display_title,
    'description' => t('Standard POS payment for X-Pay - Carta sÃ¬'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => FALSE,
  );

  return $payment_methods;
}

/**
 * Payment method callback: settings form.
 */
function commerce_xpay_settings_form($settings = NULL) {
  $form = array();

  // Merge default settings into the stored settings array.
  $default_currency = variable_get('commerce_default_currency', 'USD');
  $xpay_languages = array(
    'ITA' => t('Italian'),
    'ENG' => t('English'),
    // '3' => t('Espagnol'),
    // '4' => t('Francaais'),
    // '5' => t('Deutsch'),
  );
  $xpay_currencies = array(
    // '1' => 'USD (US Dollar $)',
    // '2' => 'GBP (Pound Sterling Â¬Â£)',
    // '71' => 'JPY (Japanese Yen)',
    // '71' => 'HKD (Hong Kong Dollar)',
    '978' => 'EUR (Euro â€šâ‚¬)',
    // '234' => 'BRL Real',
  );

  $currency = in_array($default_currency, array_keys($xpay_currencies)) ? $default_currency : '978';
  /* The hardcoded values for commerce_xpay_tid and commerce_xpay_mac are the
   * standard values for the
   * test server, keep them while testing, documentation for x-pay is horrible */
  $settings = (array) $settings + array(
    'commerce_xpay_tid' => 'T04_000000000005',
    'commerce_xpay_mac' => 'AA88CCEWDKLSDJD3921ZZ',
    'commerce_xpay_mode' => 'TEST',
    'commerce_xpay_action_code' => 'VERI',
    'commerce_xpay_language' => 'ITA',
    'commerce_xpay_currency' => $currency,
    'commerce_xpay_method_title' => t('Credit card on a secure server:'),
    'commerce_xpay_method_title_icons' => TRUE,
    'commerce_xpay_checkout_button' => t('Submit Order'),
  );

  $form['commerce_xpay_tid'] = array(
    '#type' => 'textfield',
    '#title' => t('Terminal ID'),
    '#description' => t('Your X-Pay teminal id.'),
    '#default_value' => $settings['commerce_xpay_tid'],
    '#size' => 25,
  );

  $form['commerce_xpay_mac'] = array(
    '#type' => 'textfield',
    '#title' => t('Mac Key'),
    '#description' => t('Your MAC key'),
    '#default_value' => $settings['commerce_xpay_mac'],
    '#size' => 25,
  );

  $form['commerce_xpay_mode'] = array(
    '#type' => 'select',
    '#title' => t('Mode'),
    '#description' => t('Select NORMAL form normal usage or TEST for testing pourposes'),
    '#options' => array(
      'test' => t('TEST'),
      'normal' => t('NORMAL'),
    ),
    '#default_value' => $settings['commerce_xpay_mode'],
  );

  $form['commerce_xpay_action_code'] = array(
    '#type' => 'select',
    '#title' => t('Action Code'),
    '#description' => t('Select the action code for the authorization request; from 21-02-2011 it has to be "VERI"'),
    '#options' => array(
      'VERI' => "VERI",
      'AUT' => "AUT",
    ),
    '#default_value' => $settings['commerce_xpay_action_code'],
  );

  $form['commerce_xpay_language'] = array(
    '#type' => 'select',
    '#title' => t('Language preference'),
    '#description' => t('Adjust language on X-Pay pages.'),
    '#options' =>$xpay_languages,
    '#default_value' => $settings['commerce_xpay_language'],
  );


  $form['commerce_xpay_currency'] = array(
    '#type' => 'select',
    '#title' => t('Currency preference'),
    '#description' => t('Adjust currency used with XPAY.'),
    '#options' => $xpay_currencies,
    '#default_value' => $settings['commerce_xpay_currency'],
  );


  $form['commerce_xpay_method_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Payment method title'),
    '#default_value' => $settings['commerce_xpay_method_title'],
  );
  $form['commerce_xpay_method_title_icons'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show credit card icons beside the payment method title.'),
    '#default_value' => $settings['commerce_xpay_method_title_icons'],
  );
  $form['commerce_xpay_checkout_button'] = array(
    '#type' => 'textfield',
    '#title' => t('Order review submit button text'),
    '#description' => t('Provide XPAY specific text for the submit button on the order review page.'),
    '#default_value' => $settings['commerce_xpay_checkout_button'],
  );

  return $form;
}

/**
 * Builds a Website Payments Standard form from an order object.
 *
 * @param array $form
 *   Drupal form
 * @param array $form_state
 *   Drupal form state
 * @param array $order
 *   The fully loaded order being paid for.
 * @param array $settings
 *   An array of settings used to build out the form, including:
 *   - commerce_xpay_mode: which server to use, either test or normal
 *   - commerce_xpay_tid: the Xpay teminal id to use
 *   - commerce_xpay_mac: the MAC that you got from X-Pay after activation
 *   - commerce_xpay_mode: the URL X-Pay should send the user to on
 *       cancellation
 *   - return: the URL X-Pay should send the user to on successful payment
 *   - cancel_return: the URL X-Pay should send the user to after a not
 *       successful payment
 *   - commerce_xpay_currency: the X-Pay currency code to use for this payment
 *   - commerce_xpay_language: the X-Pay language code to use on the payment
 *       form
 *   - commerce_xpay_action_code:  the action code for the authorization request
 *
 * @return array
 *   A renderable form array.
 */
function commerce_xpay_order_form($form, &$form_state, $order, $settings) {

  $wrapper = entity_metadata_wrapper('commerce_order', $order);

  $mail = $wrapper->mail->value();

  $currency_code = $wrapper->commerce_order_total->currency_code->value();
  $amount = $wrapper->commerce_order_total->amount->value() / 100;
  $site_url = url("", array('absolute' => TRUE));
  $transaction_id = str_pad($order->order_id, 6, "0", STR_PAD_LEFT) . "O" . str_pad(time(), 13, "0", STR_PAD_LEFT);

  $data = array(
    'TERMINAL_ID' => $settings['commerce_xpay_tid'],
    'TRANSACTION_ID' => $transaction_id,
    'ACTION_CODE' => $settings['commerce_xpay_action_code'],
    'AMOUNT' => str_pad(number_format($amount, 2, '', ''), 9, "0", STR_PAD_LEFT),
    'CURRENCY' => $settings['commerce_xpay_currency'],
    'LANGUAGE' => $settings['commerce_xpay_language'],
    'RESULT_URL' => $settings['return'],
    'NOTIFICATION_URL' => commerce_xpay_ipn_url($settings['payment_method']),
    'ERROR_URL' => $settings['cancel_return'],
    'ANNULMENT_URL' => $settings['cancel_return'],
    'VERSION_CODE' => '01.00',
    'EMAIL' => $mail,
    'DESC_ORDER' => 'Order n. ' . $order->order_id . " - " . variable_get('site_name', "Site name"),
    'CO_PLATFORM' => 'L',
  );

  // MAC Generation.
  $mac_string = $data['TERMINAL_ID'];
  $mac_string .= $data['TRANSACTION_ID'];
  $mac_string .= $data['AMOUNT'];
  $mac_string .= $data['CURRENCY'];
  $mac_string .= $data['VERSION_CODE'];
  $mac_string .= $data['CO_PLATFORM'];
  $mac_string .= $data['ACTION_CODE'];
  $mac_string .= $data['EMAIL'];
  $mac_string .= $settings['commerce_xpay_mac'];
  $data['MAC'] = strtoupper(sha1($mac_string));


  $form['#action'] = commerce_xpay_post_url($settings['commerce_xpay_mode']);
  $form['#method'] = 'post';
  foreach ($data as $name => $value) {
    $form[$name] = array('#type' => 'hidden', '#value' => $value);
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => $settings['commerce_xpay_checkout_button'],
  );

  watchdog('xpay', 'GENERATED PARAMS FOR PAYMENT GATEWAY @data', array('@data' => json_encode($data)), WATCHDOG_NOTICE);

  return $form;

}

/**
 * Payment method callback: adds a message and CSS to the submission form.
 */
function commerce_xpay_submit_form($payment_method, $pane_values, $checkout_pane, $order) {

  $form['xpay_information'] = array(
    '#markup' => '<span class="commerce-xpay-info">' . t('(Continue with checkout to complete payment via X-Pay.)') . '</span>',
  );

  return $form;
}

/**
 * Payment method callback: redirect form, a wrapper around
 * the module's general
 * use function for building a WPS form.
 */
function commerce_xpay_redirect_form($form, &$form_state, $order, $payment_method) {
  // Return an error if the enabling action's settings haven't been configured.
  if (empty($payment_method['settings']['commerce_xpay_tid'])) {
    drupal_set_message(t('X-Pay is not configured for use. No X-Pay tid has been specified.'), 'error');
    return array();
  }
  $settings = array(
    // Return to the previous page when payment is canceled.
    'cancel_return' => url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),

    // Return to the payment redirect page for processing successful payments.
    'return' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),

    // Specify the current payment method instance ID in the notify_url.
    'payment_method' => $payment_method['instance_id'],
  );

  return commerce_xpay_order_form($form, $form_state, $order, $payment_method['settings'] + $settings);
}
/**
 * return test or normal url
 */
function commerce_xpay_post_url($setting) {
  $post_url = $setting === 'normal' ? 'https://cartasi.x-pay.it/XPayVPOS/XPServlet' : 'https://cartasi-test.x-pay.it/XPayVPOSTEST/XPServlet';
  return $post_url;
}

/**
 * Processes an incoming transaction.
 *
 * @param String $payment_method
 *   The payment method instance array that originally made the payment.
 *
 * @return Boolean
 *   TRUE or FALSE indicating whether the IPN was successfully processed or not.
 */
function commerce_xpay_process_ipn($payment_method = NULL) {
  // Check that the variables are set.
  if (!isset($_POST["RESPONSE"]) || !isset($_POST["TRANSACTION_ID"]) || !isset($_POST["AUTH_CODE"]) || !isset($_POST["AMOUNT"]) || !isset($_POST["CURRENCY"])) {
    return FALSE;
  }
  // If no payment method is passed, we can't verify.
  if ($payment_method === NULL) {
    return FALSE;
  }

  // Let's check that the message comes from the bank.
  $mac_string = $_POST["TERMINAL_ID"];
  $mac_string .= $_POST["TRANSACTION_ID"];
  $mac_string .= $_POST["RESPONSE"];
  $mac_string .= $_POST["AMOUNT"];
  $mac_string .= $_POST["CURRENCY"];
  $mac_string .= $payment_method["settings"]["commerce_xpay_mac"];
  $mac = strtoupper(sha1($mac_string));
  $mac_check = FALSE;
  if ($_POST["MAC"] === $mac) {
    $mac_check = TRUE;
  }

  $response = $_POST["RESPONSE"];
  $transaction_id = $_POST["TRANSACTION_ID"];
  $transaction_id_array = split('O', $transaction_id);
  $order_id = (int) $transaction_id_array[0];
  $auth_code = $_POST["AUTH_CODE"];
  $amount = $_POST["AMOUNT"] / 100;
  $currency = commerce_xpay_get_currency_code_from_value($_POST['CURRENCY']);

  // Load the order from commerce.
  $order = commerce_order_load($order_id);

  // ERROR - ORDER NOT IN CHECKOUT.
  if ($order === FALSE) {
    watchdog('commerce_xpay', 'Return from payment gateway - Order not in checkout state or not found, received response @response for payment from gateway but order #@order_id is not in "in_checkout" state', array('@order_id' => $transaction_id, '@response' => $order_id), WATCHDOG_ERROR);
    drupal_set_message(t('WARNING - ORDER #@order_id NOT FOUND, Please Retry.', array('@order_id' => $order_id)), 'warning');
    return FALSE;
  }
  if ($mac_check === FALSE) {
    $variables = array(
      '@received_mac' => $_POST['MAC'],
      '@response' => $response,
      '@calc_mac' => $mac);

    watchdog('commerce_xpay', 'Return from payment gateway - MAC check not passed, received response @response for payment. We received mac @received_mac but should have been @calc_mac', $variables, WATCHDOG_ERROR);
    drupal_set_message(t('ERROR - An error occured while processing the transaction, Please Retry or choose another payment method.'), 'error');
    commerce_payment_redirect_pane_previous_page($order);
  }

  // Create a new payment transaction for the order.
  $transaction = commerce_payment_transaction_new('commerce_xpay', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->remote_id = $transaction_id;
  $transaction->amount = commerce_currency_decimal_to_amount($amount, $currency);
  $transaction->currency_code = $currency;
  $transaction->payload[REQUEST_TIME] = $_POST;

  // Set the transaction's statuses based on the IPN's payment_status.
  $transaction->remote_status = $response;
  $payed = FALSE;
  // ERROR - PAYMENT NOT OK.
  if ($response !== "TRANSACTION_OK") {
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
    $transaction->message = t('ERROR - PAYMENT NOT OK, response: @response', array('@response' => $response));
  }
  else {
    // NOTICE - PAYMENT OK.
    $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
    $transaction->message = t('The payment has completed.');
    $payed = TRUE;
  }
  // Save the transaction information.
  commerce_payment_transaction_save($transaction);
  /* If payment was ok,redirect the user to next page,
   *  else redirect to previous page. */
  if ($payed) {
    commerce_payment_redirect_pane_next_page($order);
  }
  else {
    commerce_payment_redirect_pane_previous_page($order);
  }
  watchdog('commerce_xpay', 'Payment processed for Order @order_number with ID @txn_id.', array('@txn_id' => $transaction_id, '@order_number' => $order->order_number), WATCHDOG_INFO);

}

/**
 * Returns the IPN URL.
 *
 * @param String $method_id
 *   Optionally specify a payment method ID to include in the URL.
 */
function commerce_xpay_ipn_url($method_id = NULL) {
  $parts = array(
    'commerce_xpay',
    'ipn',
  );

  if (!empty($method_id)) {
    $parts[] = $method_id;
  }

  return url(implode('/', $parts), array('absolute' => TRUE));
}
/**
 * Returns the Currency code from the currency number.
 *
 * @param String $numeric_code
 *   The numerc code to look up
 */
function commerce_xpay_get_currency_code_from_value($numeric_code) {
  $xpay_currencies = array(
    '978' => 'EUR',
  );

  return $xpay_currencies[$numeric_code];
}
