<?php

/**
 * Implements hook_action_info().
 */
function entity_merge_ui_action_info() {
  return array(
    'entity_merge_ui_merge_entities_action' => array(
      'type' => 'entity',
      'label' => t('Merge entities'),
      'configurable' => TRUE,
      'triggers' => array('any'),
      'aggregate' => TRUE,
    ),
  );
}

/**
 * Form builder for merging entities.
 */
function entity_merge_ui_merge_entities_action_form($context, &$form_state) {
  $form = array();
  $selected_entities = entity_load($context['entity_type'], $form_state['selection']);
  // Check entity bundle, it should be unique.
  $bundles = array();
  foreach ($selected_entities as $entity) {
    list(, , $bundles[]) = entity_extract_ids($context['entity_type'], $entity);
  }
  $bundles = array_unique($bundles);
  // All selected entities should have the same bundle.
  if (count($bundles) != 1) {
    $message = 'You should select entities of one bundle to be able to merge them!';
    drupal_set_message(t($message), 'error');
    drupal_goto($context['view']->display[$context['view']->current_display]->display_options['path']);
  }
  else {
    $bundle = array_shift($bundles);
    $form['table'] = array(
      '#theme' => 'entity_merge_ui_merge_table',
      '#tree' => TRUE,
      '#selected' => $form_state['selection'],
    );
    $form['bundle'] = array(
      '#type' => 'value',
      '#value' => $bundle,
    );
    // Creating header.
    $header['field_name'] = array('#markup' => t('Field name\\Entity'));
    foreach ($selected_entities as $entity) {
      $header[entity_id($context['entity_type'], $entity)] = array(
        '#type' => 'radio',
        '#title' => check_plain(entity_label($context['entity_type'], $entity)),
      );
    }
    $form['table']['entity_id'] = $header;
    $field_instances = field_info_instances($context['entity_type'], $bundle);
    foreach ($field_instances as $field_name => $field_instance) {
      $form['table'][$field_name] = array();
      $row =& $form['table'][$field_name];
      $row['field_name'] = array('#markup' => check_plain($field_instance['label']));
      foreach ($selected_entities as $entity) {
        $field_value = array('#markup' => '');
        $lang = field_language($context['entity_type'], $entity, $field_name);
        if (isset($entity->{$field_name}[$lang][0])) {
          $item = $entity->{$field_name}[$lang][0];
          $field = field_info_field($field_name);
          $field_value_render = field_view_value($context['entity_type'], $entity, $field_name, $item);
          $field_value_rendered = drupal_render($field_value_render);
          // This check is a must because some fields can provide empty markup.
          if (!empty($field_value_rendered)) {
            $field_value = array(
              '#type' => $field['cardinality'] == 1 ? 'radio' : 'checkbox',
              '#title' => $field_value_rendered,
            );
          }
        }
        $row[entity_id($context['entity_type'], $entity)] = $field_value;
      }
    }
  }

  $form['#attached']['js'] = array(
    drupal_get_path('module', 'entity_merge_ui') . '/js/merge_table.js',
  );
  return $form;
}

/**
 * Validate handler for action configuration form.
 */
function entity_merge_ui_merge_entities_action_validate($form, $form_state) {
  $table = $form_state['values']['table'];
  $primary_entity = array_filter($table['entity_id']);
  if (empty($primary_entity)) {
    form_set_error('table][entity_id', t('You must select primary entity in table header!'));
  }
  if (count($primary_entity) > 1) {
    form_set_error('table][entity_id', t('Supplied more than one primary entity!'));
  }
}

/**
 * Submit handler for action configuration form.
 */
function entity_merge_ui_merge_entities_action_submit($form, $form_state) {
  $table = $form_state['values']['table'];
  $tmp = array_keys(array_filter($table['entity_id']));
  $data = array('entity_id' => array_shift($tmp));
  unset($table['entity_id']);
  foreach ($table as $field_name => $selection) {
    $data[$field_name] = array_keys(array_filter($selection));
  }
  return array('data' => array_filter($data), 'bundle' => $form_state['values']['bundle']);
}

/**
 * Merge entities.
 */
function entity_merge_ui_merge_entities_action($selected_entities, $context) {
  $data = $context['data'];
  $bundle = $context['bundle'];
  $primary_entity = $selected_entities[$data['entity_id']];
  $instances = field_info_instances($context['entity_type'], $bundle);
  $peid = entity_id($context['entity_type'], $primary_entity);
  unset($selected_entities[$data['entity_id']]);
  unset($data['entity_id']);
  $lang = field_language($context['entity_type'], $primary_entity);
  // Updating primary entity fields from other selected entities.
  foreach ($data as $field_name => $entity_ids) {
    if (!in_array($peid, $entity_ids)) {
      $primary_entity->{$field_name}[$lang[$field_name]] = array();
    }
    foreach ($entity_ids as $entity_id) {
      if ($entity_id != $peid) {
        foreach ($selected_entities[$entity_id]->{$field_name}[field_language($context['entity_type'], $selected_entities[$entity_id], $field_name)] as $val) {
          $primary_entity->{$field_name}[$lang[$field_name]][] = $val;
        }
      }
    }
  }
  foreach (array_keys($selected_entities) as $entity_id) {
    // Unset multiple field data of other entities so it won't get overwritten
    // again by entity_merge.
    $lang = field_language($context['entity_type'], $selected_entities[$entity_id]);
    foreach ($instances as $instance){
      $field = field_info_field($instance['field_name']);
      if ($field['cardinality'] != 1) {
        $selected_entities[$entity_id]->{$instance['field_name']}[$lang[$instance['field_name']]] = array();
      }
    }
    entity_merge($primary_entity, $selected_entities[$entity_id], $context['entity_type'], 100);
  }
  $count = count($selected_entities);
  $singular = '%entities entity merged to %dest.';
  $plural = '%entities entities merged to %dest.';
  $entities_label = array();
  foreach ($selected_entities as $entity) {
    $entities_label[] = entity_label($context['entity_type'], $entity);
  }
  $message = format_plural($count, $singular, $plural, array(
    '%entities' => implode(', ', $entities_label),
    '%dest' => entity_label($context['entity_type'], $primary_entity),
  ));
  drupal_set_message($message);
}

/**
 * Implements hook_theme().
 */
function entity_merge_ui_theme($existing, $type, $theme, $path) {
  return array(
    'entity_merge_ui_merge_table' => array(
      'render element' => 'table',
      'file' => 'theme/entity_merge_ui.theme.inc',
    ),
  );
}