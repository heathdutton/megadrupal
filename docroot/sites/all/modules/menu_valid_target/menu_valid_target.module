<?php

/**
 * @file
 *
 * Allows users to choose whether or not to open menu items in a new window when
 * configuring menu items.
 */

/**
 * Implements hook_init().
 */
function menu_valid_target_init() {
  drupal_add_css(drupal_get_path('module', 'menu_valid_target') . '/menu_valid_target.css');
}

/**
 * Implements hook_form_alter().
 *
 * Ensure we're on a node edit form and we have enabled menu items before adding
 * the option to allow the link to be opened in a new tab or window.
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function menu_valid_target_form_alter(&$form, $form_state, $form_id) {
  if ((isset($form['#node']) && $form['#node']->type . '_node_form' == $form_id)) {
    $enabled_menus = variable_get('menu_options_' . $form['#node']->type, array('main-menu' => 'main-menu'));
    if (empty($enabled_menus)) {
      return;
    }

    if (isset($form['menu']['link']['parent'])) {
      $form['menu']['link']['parent']['#ajax'] = _menu_valid_target_get_ajax_element();
      $form = _menu_valid_target_node_form_sort_elements($form);
      $parent = (empty($form_state['values'])) ? $form['menu']['link']['parent']['#default_value'] : $form_state['values']['menu']['parent'];
      if (menu_valid_target_is_parent_enabled($parent)) {
        $form['menu']['link']['_container']['valid_target'] = _menu_valid_target_get_checkbox($form['menu']['link']['options']['#value']);
        // Add our own submit callback, making sure we're first in the queue.
        array_unshift($form['#submit'], 'menu_valid_target_edit_form_extra_elements_submit');
      }
      elseif (isset($form['menu']['link']['options']['#value']) && is_array($form['menu']['link']['options']['#value']['attributes'])) {
        menu_valid_target_clean_attributes($form);
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add menu valid target configuration option to menu edit item form.
 */
function menu_valid_target_form_menu_edit_item_alter(&$form, $form_state) {
  if (isset($form['parent'])) {
    $form['parent']['#ajax'] = _menu_valid_target_get_ajax_element();
    $form = _menu_valid_target_menu_form_sort_elements($form);
    $parent = (empty($form_state['values'])) ? $form['parent']['#default_value'] : $form_state['values']['parent'];
    if (menu_valid_target_is_parent_enabled($parent)) {
      $form['_container']['valid_target'] = _menu_valid_target_get_checkbox($form['options']['#value']);
      // Add our own submit callback, making sure we're first in the queue.
      array_unshift($form['#submit'], 'menu_valid_target_edit_form_extra_elements_submit');
    }
    elseif (isset($form['options']['#value']) && is_array($form['options']['#value']['attributes'])) {
      menu_valid_target_clean_attributes($form);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function menu_valid_target_form_menu_configure_alter(&$form, $form_state) {
  module_load_include('inc', 'menu_valid_target', 'menu_valid_target.admin');
  menu_valid_target_menu_configure_extra_elements($form);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add menu target configuration option to menu edit form.
 */
function menu_valid_target_menu_edit_menu_extra_elements(&$form) {
  $form['menu_valid_target'] = array(
    '#type' => 'fieldset',
    '#title' => t('Menu valid target'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#weight' => 1,
  );
  $form['menu_valid_target']['menu_valid_target_enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable menu valid target for this menu.'),
    '#default_value' => variable_get(sprintf('menu_valid_target_enabled_%s', $form['old_name']['#value']), 0),
  );
  $form['#submit'][] = 'menu_valid_target_menu_edit_menu_extra_elements_submit';
}

/**
 * Implements hook_preprocess_page().
 */
function menu_valid_target_preprocess_page(&$variables) {
  $jsvars['openTargetMessage'] = t(variable_get('menu_valid_target_open_message', 'Opens in a new tab or window'));
  drupal_add_js(array('menu_target' => $jsvars), array('type' => 'setting'));
  drupal_add_js(drupal_get_path('module', 'menu_valid_target') . '/menu_valid_target.js');
}

/**
 * Custom form submit handler for menu edit item or node edit form.
 */
function menu_valid_target_edit_form_extra_elements_submit($form, &$form_state) {
  module_load_include('inc', 'menu_valid_target', 'menu_valid_target.admin');
  _menu_valid_target_edit_form_extra_elements_submit($form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add menu valid target configuration option to menu edit form.
 */
function menu_valid_target_form_menu_edit_menu_alter(&$form, $form_state) {
  module_load_include('inc', 'menu_valid_target', 'menu_valid_target.admin');
  menu_valid_target_menu_edit_menu_extra_elements($form);
}

/**
 * Custom form submit handler for menu edit menu form.
 */
function menu_valid_target_menu_edit_menu_extra_elements_submit($form, &$form_state) {
  module_load_include('inc', 'menu_valid_target', 'menu_valid_target.admin');
  _menu_valid_target_menu_edit_menu_extra_elements_submit($form, $form_state);
}


/**
 * The AJAX FAPI property definition to add to node and menu item edit forms.
 *
 * @return array
 */
function _menu_valid_target_get_ajax_element() {
  return array(
    'callback' => 'ajax_menu_valid_target_validate_callback',
    'wrapper' => 'menu-valid-target-container',
    'effect' => 'fade',
  );
}

/**
 * Reorder node form elements.
 *
 * Position the new menu target form element closer to the top of the tab.
 * This will be enabled by an AJAX call to determine whether menu target is
 * enabled for the selected currently selected parent menu.
 *
 * @param $form
 */
function _menu_valid_target_node_form_sort_elements($form) {
  $link = $form['menu']['link'];
  unset($form['menu']['link']);
  $form['menu']['link']['_container'] = _menu_valid_target_get_container();
  $form['menu']['link'] += $link;
  return $form;
}

/**
 * Custom form submit callback for edit menu form.
 */
function _menu_valid_target_menu_edit_menu_extra_elements_submit($form, &$form_state) {
  variable_set(
    sprintf('menu_valid_target_enabled_%s', $form_state['values']['menu_name']),
    $form_state['values']['menu_valid_target_enabled']
  );
}

/**
 * Get the parent of a menu item from a given key.
 *
 * @param $menu_item_key
 *
 * @return boolean true|false
 */
function menu_valid_target_is_parent_enabled($menu_item_key) {
  $fragments = explode(':', $menu_item_key);
  return variable_get(sprintf('menu_valid_target_enabled_%s', array_shift($fragments)), 0);
}

/**
 * Menu target form checkbox element to add to node and menu item edit forms.
 *
 * @param $options
 *  The link options for the menu item.
 *
 * @return array
 *  The checkbox FAPI element definition.
 */
function _menu_valid_target_get_checkbox($options) {
  return array(
    '#type' => 'checkbox',
    '#title' => t('Open this link in a new window'),
    '#default_value' => (isset($options['attributes']) && isset($options['attributes']['class']) && in_array('target-blank', $options['attributes']['class'])),
  );
}

/**
 * Update attributes when the parent menu item is changed.
 *
 * @param $form
 */
function menu_valid_target_clean_attributes(&$form) {
  if (isset($form['#node'])) {
    $attributes = & $form['menu']['link']['options']['#value']['attributes'];
  }
  else {
    $attributes =  & $form['options']['#value']['attributes'];
  }

  $attribute = 'class';
  $attribute_value = 'target-blank';
  if (isset($attributes) && isset($attributes[$attribute]) && in_array($attribute_value, $attributes[$attribute])) {
    unset($attributes[$attribute][array_search($attribute_value, $attributes[$attribute])]);
    if (empty($attributes[$attribute])) {
      unset($attributes[$attribute]);
    }
  }
}

/**
 * Reorder menu form elements.
 *
 * Position the new menu target form element below the 'expanded' checkbox. This
 * will be enabled by an AJAX call to determine whether menu target is enabled
 * for the currently selected parent menu.
 *
 * @param $form
 *
 * @return array
 */
function _menu_valid_target_menu_form_sort_elements($form) {
  $_form = $form;
  $form = array();
  foreach ($_form as $key => $element) {
    $form[$key] = $_form[$key];
    if ($key == 'expanded') {
      $form['_container'] = _menu_valid_target_get_container();
    }
  }
  return $form;
}

/**
 * The menu target container DIV.
 *
 * @return array
 */
function _menu_valid_target_get_container() {
  return array(
    '#prefix' => '<div id="menu-valid-target-container">',
    '#suffix' => '</div>',
  );
}

/**
 * AJAX callback function to return the menu valid target checkbox container.
 *
 * @param $form
 * @param $form_state
 *
 * @return array
 */
function ajax_menu_valid_target_validate_callback($form, &$form_state) {
  return ($form['#node_edit_form']) ?
    $form['menu']['link']['_container'] : $form['_container'];
}

/**
 * Custom form submit handler for menu edit item or node edit form.
 */
function _menu_valid_target_edit_form_extra_elements_submit($form, &$form_state) {

  // Determine the attribute and the right attribute value.
  $attribute = 'class';
  $attribute_value = 'target-blank';

  // Depending on whether we're in a node form or a menu item form, the 'menu link'
  // values are stored in a different place of the form state values tree
  if (isset($form['#node'])) {
    $values = & $form_state['values']['menu'];
    $menu_valid_target = $values['_container']['valid_target'];
  }
  else {
    $values = & $form_state['values'];
    $menu_valid_target = $values['valid_target'];
  }

  // If the user has checked the 'open in new window' checkbox,
  // we'll add the right attribute and it's value to the menu's options array.
  if ($menu_valid_target) {
    if (!isset($values['options']['attributes'])) {
      $values['options']['attributes'] = array($attribute => array($attribute_value));
    }
    elseif (!isset($values['options']['attributes'][$attribute])) {
      $values['options']['attributes'][$attribute] = array($attribute_value);
    }
    elseif (!in_array($attribute_value, $values['options']['attributes'][$attribute])) {
      $values['options']['attributes'][$attribute][] = $attribute_value;
    }
  }
  else {
    // Clean up the attributes class array.
    if (isset($values['options']['attributes']) && isset($values['options']['attributes'][$attribute]) && in_array($attribute_value, $values['options']['attributes'][$attribute])) {
      unset($values['options']['attributes'][$attribute][array_search($attribute_value, $values['options']['attributes'][$attribute])]);
      if (empty($values['options']['attributes'][$attribute])) {
        unset($values['options']['attributes'][$attribute]);
      }
    }
  }
}

/**
 * Adds extra form elements to the menu_configure form.
 * Allows administrators to enable or disable the Menu target functionality on a menu base.
 *
 * @see menu_valid_target_form_menu_configure_alter()
 */
function menu_valid_target_menu_configure_extra_elements(&$form) {
  $form['menu_target'] = array(
    '#type' => 'fieldset',
    '#title' => t('Menu valid target'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['menu_target']['menu_valid_target_open_message'] = array(
    '#type' => 'textfield',
    '#title' => t('Message'),
    '#default_value' => variable_get('menu_valid_target_open_message', 'Opens in a new tab or window'),
    '#description' => t('Message to indicate what will happen when a user clicks on the link.'),
  );

  $form['#submit'][] = 'menu_valid_target_menu_configure_extra_elements_submit';
}

/**
 * Custom submit callback for the menu edit form.
 */
function menu_valid_target_menu_configure_extra_elements_submit($form, $form_state) {
  variable_set('menu_valid_target_open_message', $form_state['values']['menu_valid_target_open_message']);
}
