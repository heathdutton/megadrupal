<?php

/**
 * @file
 * Drupal module: Zemanta
 *
 * Adds connection to Zemanta service
 */

define("ZEMANTA_RELEASE_ID_URL", 'http://static.zemanta.com/plugins/drupal/release.txt');
define("ZEMANTA_LOADER_URL", 'http://static.zemanta.com/plugins/drupal/7.x/loader.js');
define("ZEMANTA_API_URL", 'http://api.zemanta.com/services/rest/0.0/');

function zemanta_help($section) {
  switch ($section) {
    case 'admin/settings/zemanta':
      return t("Zemanta integrates Zemanta's web service to make it easy to add contextual images, articles, links and tags to your post.");
  }
}

/**
 * Implements hook_menu().
 */
function zemanta_menu() {
  $items = array();

  $items['admin/settings/zemanta'] = array(
    'title' => 'Zemanta',
    'description' => 'Configure Zemanta module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('zemanta_admin'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['zemanta/json-proxy'] = array(
    'title' => 'Json proxy',
    'page callback' => 'zemanta_json_proxy',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_admin_settings().
 */
function zemanta_admin() {
  zemanta_filter_check();
  if (!is_file(zemanta_loader_path())) {
    zemanta_get_loader(ZEMANTA_LOADER_URL);
  }

  $node_types = array_map('check_plain', node_type_get_names());
  $defaults = isset($node_types['blog']) ? array('blog' => 1) : array();

  $form['zemanta_node_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Enable Zemanta for following content types'),
    '#default_value' => variable_get('zemanta_node_types', $defaults),
    '#options' => $node_types,
  );

  $form['zemanta_force_position'] = array(
    '#type' => 'radios',
    '#title' => t('Position of the zemanta widget'),
    '#default_value' => variable_get('zemanta_force_position', 1),
    '#options' => array(t("Use block position settings"), t("Always next to the text editor (doesn't work on every theme)")),
  );

  return system_settings_form($form);
}

function zemanta_enable() {
  if (!variable_get('zemanta_api_key', 0)) {
    $api_key = zemanta_api_key_fetch();
    variable_set('zemanta_api_key', $api_key);
  }

  $release_id = zemanta_release_id_fetch();
  variable_set('zemanta_release_id', $release_id);
  zemanta_get_loader(ZEMANTA_LOADER_URL);
  drupal_set_message(t('Zemanta module was successfully enabled.'));
}

function zemanta_block_info() {
  $block[0] = array(
     'info' => t('Zemanta'),
     'weight' => -9,
  );
  return $block;
}

function zemanta_page_build(&$page) {
  if (zemanta_show() && zemanta_force_position()) {
    zemanta_load_js(true);
  }
}

function zemanta_block_view($delta = '') {
  if (zemanta_show('add') && !zemanta_force_position()) {
    zemanta_load_js(false);

    $block['content'] = array('#markup' => t('<div id="zemanta-sidebar">Loading Zemanta...</div>'));
    return $block;
  }
  return;
}

function zemanta_cron() {
  $current_release_id = variable_get('zemanta_release_id', 0);
  $new_release_id = zemanta_release_id_fetch();

  if ($current_release_id < $new_release_id || !is_file(zemanta_loader_path())) {
    zemanta_get_loader(ZEMANTA_LOADER_URL);
    variable_set('zemanta_release_id', $new_release_id);
  }
}

function zemanta_api_key_fetch() {
  // Fetch API key used with Zemanta calls
  $api = '';

  $request_header = array('Content-Type' => 'application/x-www-form-urlencoded');
  $request_method = "POST";
  $request_data = "method=zemanta.auth.create_user";
  $response = drupal_http_request(
    ZEMANTA_API_URL,
    array('headers' => $request_header, 'method' => $request_method, 'data' => $request_data)
  );

  // Parse returned result
  $matches = zem_reg_match( '/<status>(.+?)<\/status>/', $response->data);
  if ( 'ok' == $matches[1] ) {
    $matches = zem_reg_match( '/<apikey>(.+?)<\/apikey>/', $response->data);
    $api = $matches[1];
  }
  return $api;
}

/**
 * Add settings and loader the page
 */
function zemanta_load_js($force) {
  global $theme;
  $api_key = variable_get('zemanta_api_key', '');
  $release_id = variable_get('zemanta_release_id', 0);
  drupal_add_js(array('zemantaApiKey' => $api_key, 'zemantaReleaseID' => $release_id, 'zemantaCurrentTheme' => $theme, 'zemantaForcePosition' => $force), 'setting');
  drupal_add_js(file_get_contents(zemanta_loader_path()), 'inline');
}
/**
 * Should zemanta try to guess the best position for the plugin
 */
function zemanta_force_position() {
  $force = variable_get('zemanta_force_position', "0");

  return $force === "1" ? TRUE : FALSE;
}

function zemanta_release_id_fetch() {
  $response = drupal_http_request(ZEMANTA_RELEASE_ID_URL);
  if ($response->code == 200) {
    return trim($response->data);
  }
  return 0;
}

function zem_reg_match($rstr, $str) {
  // Make a regex match independantly of library available. Might work only
  // for simple cases like ours.
  if (function_exists('preg_match')) {
    preg_match( $rstr, $str, $matches );
  }
  elseif (function_exists('ereg')) {
    ereg( $rstr, $str, $matches );
  }
  else {
    $matches = array('', '');
  }
  return $matches;
}

/**
 * Shows zemanta block if we selected
 * proper node type on settings pages.
 * @param $op 'view' or 'add' depending on which page we want to include Zemanta
 */
function zemanta_show($op = 'add') {
  $node_types = variable_get('zemanta_node_types', array());

  if (arg(2) == 'edit' && is_numeric(arg(1))) {
    $type = db_query("SELECT type FROM {node} WHERE nid=:nid", array(":nid" => arg(1)))->fetchField();
  }
  else {
    $type = arg(2);
  }

  if ($op == 'add') {
    if (arg(0) == 'node' && ((arg(1) == 'add') || (arg(2) == 'edit')) && in_array($type, $node_types, TRUE)) {
      return TRUE;
    }
  }
  elseif ($op == 'view') {
    return TRUE;
  }
  return FALSE;
}

/**
 * JSON proxy helps us get around xss problems
 */
function zemanta_json_proxy() {
  $postvars = "";
  foreach ($_POST as $key => $value) {
    $new_element = str_replace('&', '%26', $value);
    $new_element = str_replace(';', '%3B', $new_element);
    $postvars .= $key . '=' . $new_element . '&';
  }

  if ($postvars) {
    $request_header = array('Content-Type' => 'application/x-www-form-urlencoded');
    $request_method = "POST";
    $request_data = $postvars;
    $response = drupal_http_request(
      ZEMANTA_API_URL,
      array('headers' => $request_header, 'method' => $request_method, 'data' => $request_data)
    );
    drupal_add_http_header('Content-Type', 'text/plain');
    echo $response->data;
  }
  else {
    echo "empty";
  }
}

/**
 * Checks if currently default filter is using filter html
 */
function zemanta_filter_check() {
  $needed_tags = array('fieldset', 'legend', 'h6', 'span', 'img', 'div', 'p');

  $filters = filter_list_format(filter_default_format());

  if (isset($filters["filter_html"]) && property_exists($filters["filter_html"], "status") && $filters["filter_html"]->status && property_exists($filters["filter_html"], "settings")) {
    $sett = $filters["filter_html"]->settings;
    if (isset($sett["allowed_html"]) && $sett["allowed_html"]) {
      $tags = $sett["allowed_html"];
    }
    else {
      $tags = '<a> <em> <strong> <cite> <code> <ul> <ol> <li> <dl> <dt> <dd>';
    }

    $allowed_tags = preg_split('/\s+|<|>/', $tags, -1, PREG_SPLIT_NO_EMPTY);

    $diff = array_diff($needed_tags, $allowed_tags);
    if (!empty($diff)) {
      drupal_set_message(t('Your input filter currently removes tags that Zemanta needs to operate normally. Please add following tags to your input filter: %tags', array('%tags' => implode(', ', $diff))), 'warning');
    }
    return FALSE;
  }
  return TRUE;
}

/**
 * Saves loader.js file locally
 * @param $url URL of the loader file to get
 * @return FALSE if get fails or filename if file was saved
 */
function zemanta_get_loader($url) {
  $directory = 'public://zemanta';
  $file_destination = $directory . '/' . basename($url);

  $result = drupal_http_request($url);
  if ($result->code == 200) {
    if (file_prepare_directory($directory, FILE_CREATE_DIRECTORY)) {
      return file_unmanaged_save_data($result->data, $file_destination, FILE_EXISTS_REPLACE);
    }
  }
  else {
    watchdog('zemanta', 'Loader.js get returned error code: @code for url @url ', array('@code' => $result->code, '@url' => $url), WATCHDOG_ERROR);
  }
  return FALSE;
}

/**
 * Returns path to zemanta loader file
 * @return path to loader.js file
 */
function zemanta_loader_path() {
  return 'public://zemanta/loader.js';
}
