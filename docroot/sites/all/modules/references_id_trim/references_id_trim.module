<?php

/**
 * @file
 * Removes [*id] from autocomplete references fields.
 */

/**
 * Implements hook_menu_alter().
 */
function references_id_trim_menu_alter(&$items) {
  $items['node_reference/autocomplete/%/%/%']['page callback'] = 'references_id_trim_node_reference_autocomplete';
  $items['user_reference/autocomplete/%/%/%']['page callback'] = 'references_id_trim_user_reference_autocomplete';
}

/**
 * Menu callback for the autocomplete results.
 *
 * This duplicates the callback in node_reference.module
 * @see node_reference_autocomplete
 */
function references_id_trim_node_reference_autocomplete($entity_type, $bundle, $field_name, $string = '') {
  $field = field_info_field($field_name);
  $instance = field_info_instance($entity_type, $field_name, $bundle);
  $roles = array_keys(array_filter($field['settings']['references_id_trim_roles']));
  $user_roles = array_keys($GLOBALS['user']->roles);
  $trim = (sizeof(array_intersect($user_roles, $roles))) ? TRUE : FALSE;

  $options = array(
    'string' => $string,
    'match' => $instance['widget']['settings']['autocomplete_match'],
    'limit' => 10,
  );
  $references = node_reference_potential_references($field, $options);

  $matches = array();
  foreach ($references as $id => $row) {
    // Markup is fine in autocompletion results (might happen when rendered
    // through Views) but we want to remove hyperlinks.
    $suggestion = preg_replace('/<a href="([^<]*)">([^<]*)<\/a>/', '$2', $row['rendered']);
    // Add a class wrapper for a few required CSS overrides.
    $key = ($trim) ? $row['title'] : $row['title'] . " [nid:$id]";
    $matches[$key] = '<div class="reference-autocomplete">' . $suggestion . '</div>';  
  }

  drupal_json_output($matches);
}

/**
 * Menu callback; Retrieve a pipe delimited string of autocomplete suggestions for existing users
 *
 * This duplicates the callback in user_reference.module
 * @see user_reference_autocomplete
 */
function references_id_trim_user_reference_autocomplete($entity_type, $bundle, $field_name, $string = '') {
  $field = field_info_field($field_name);
  $instance = field_info_instance($entity_type, $field_name, $bundle);
  $roles = array_keys(array_filter($field['settings']['references_id_trim_roles']));
  $user_roles = array_keys($GLOBALS['user']->roles);
  $trim = (sizeof(array_intersect($user_roles, $roles))) ? TRUE : FALSE;
  
  $options = array(
    'string' => $string,
    'match' => $instance['widget']['settings']['autocomplete_match'],
    'limit' => 10,
  );
  $references = user_reference_potential_references($field, $options);

  $matches = array();
  foreach ($references as $id => $row) {
    // Markup is fine in autocompletion results (might happen when rendered
    // through Views) but we want to remove hyperlinks.
    $suggestion = preg_replace('/<a href="([^<]*)">([^<]*)<\/a>/', '$2', $row['rendered']);
    // Remove link tags Add a class wrapper for a few required CSS overrides.
    $key = ($trim) ? $row['title'] : $row['title'] . " [uid:$id]";
    $matches[$key] = '<div class="reference-autocomplete">' . $suggestion . '</div>';  
  }
  drupal_json_output($matches);
}

/**
 * Implements hook_form_alter().
 */
function references_id_trim_form_field_ui_field_edit_form_alter(&$form, $form_state) {
  $type = $form['instance']['widget']['type']['#value'];
  
  $fields = array(
    'node_reference_autocomplete',
    'user_reference_autocomplete',
  );
  
  if (in_array($type, $fields)) {
    $field = $form['#field'];
    $instance = field_info_instance($form['instance']['entity_type']['#value'], $form['instance']['field_name']['#value'], $form['instance']['bundle']['#value']);
    $form['field']['settings'] += references_id_trim_field_widget_settings_form($field, $instance);
  }
}

/**
 * Implements hook_field_widget_info_alter().
 */
function references_id_trim_field_widget_info_alter(&$info) {
  $settings = array(
    'references_id_trim_roles' => array(),
  );
  
  $fields = array(
    'node_reference_autocomplete',
    'user_reference_autocomplete',
  );
  
  foreach ($fields as $field) {
    if (isset($info[$field]['settings'])) {
      $info[$field]['settings'] += $settings;
    }
  }
}

function references_id_trim_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $field['settings'];
  $form = array();
  
  $form['references_id_trim_roles'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Hide [*id] for these roles'),
    '#description' => t('The [*id] in the autocomplete results will be hidden from the roles above.'),
    '#options' => user_roles(),
    '#multiple' => TRUE,
    '#default_value' => (isset($settings['references_id_trim_roles']) && is_array($settings['references_id_trim_roles']))
      ? array_filter($settings['references_id_trim_roles'])
      : array(1),
  );
  
  return $form;
}

/**
 * Implements hook_field_widget_form_alter().
 */
function references_id_trim_field_widget_form_alter(&$element, &$form_state, $context) {
  $type = $context['instance']['widget']['type'];
  
  $fields = array(
    'node_reference_autocomplete' => 'nid',
    'user_reference_autocomplete' => 'uid',
  );
  
  if (array_key_exists($type, $fields)) {
    $settings = $context['field']['settings'];
    if (isset($settings['references_id_trim_roles'])) {
      $roles = array_keys(array_filter($settings['references_id_trim_roles']));
      $user_roles = array_keys($GLOBALS['user']->roles);
      $trim = (sizeof(array_intersect($user_roles, $roles))) ? TRUE : FALSE;
      if ($trim) {
        $element[$fields[$type]]['#value_callback'] = 'references_id_trim_' . $type . '_value';
      }
    }
  }
}

/**
 * Value callback for a user_reference autocomplete element.
 *
 * Substitute in the user name for the uid.
 *
 * This function duplicates the functionality of user_reference_autocomplete_value
 * @see user_reference_autocomplete_value
 */
function references_id_trim_user_reference_autocomplete_value($element, $input = FALSE, $form_state) {
  if ($input === FALSE) {
    // We're building the displayed 'default value': expand the raw uid into
    // "user name [uid:n]".
    $uid = $element['#default_value'];
    if (!empty($uid)) {
      $q = db_select('users', 'u');
      $q->addField('u', 'name');

      $q->condition('u.uid', $uid)
        ->range(0, 1);
      $result = $q->execute();
      // @todo If no result (user doesn't exist).
      $value = $result->fetchField();
      //$value .= ' [uid:' . $uid . ']';
      return $value;
    }
  }
}

/**
 * Value callback for a node_reference autocomplete element.
 *
 * Replace the node nid with a node title.
 *
 * This function duplicates the functionality of node_reference_autocomplete_value
 * @see node_reference_autocomplete_value
 */
function references_id_trim_node_reference_autocomplete_value($element, $input = FALSE, $form_state) {
  if ($input === FALSE) {
    // We're building the displayed 'default value': expand the raw nid into
    // "node title [nid:n]".
    $nid = $element['#default_value'];
    if (!empty($nid)) {
      $q = db_select('node', 'n');
      $node_title_alias = $q->addField('n', 'title');
      $q->addTag('node_access')
        ->condition('n.nid', $nid)
        ->range(0, 1);
      $result = $q->execute();
      // @todo If no result (node doesn't exist or no access).
      $value = $result->fetchField();
      //$value .= ' [nid:' . $nid . ']';
      return $value;
    }
  }
}
