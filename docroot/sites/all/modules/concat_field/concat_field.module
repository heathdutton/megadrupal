<?php

/**
 * @file
 * Allows a selected set of fields to be concatenated together.
 */

/**
 * Implements hook_field_info().
 */
function concat_field_field_info() {
  return array(
    'concat_field' => array(
      'label' => t('Concat field'),
      'description' => t('Store the values of other fields concatenated together.'),
      'default_widget' => 'concat_field_default',
      'default_formatter' => 'concat_field_blank',
      'instance_settings' => array(
        'selected_fields' => array(),
      ),
    ),
  );
}

/**
 * Implements hook_field_is_empty().
 */
function concat_field_field_is_empty($item, $field) {
  return !isset($item['value']) || $item['value'] === '';
}

/**
 * Implements hook_field_widget_info().
 */
function concat_field_field_widget_info() {
  return array(
    'concat_field_default' => array(
      'label' => t('Concat field'),
      'field types' => array('concat_field'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    ),
  );
}

/**
 * Implements hook_field_instance_settings_form().
 */
function concat_field_field_instance_settings_form($field, $instance) {
  // Allow selection of which fields to use.
  $options = array();
  $entity_info = entity_get_info($instance['entity_type']);
  if ($instance['entity_type'] == 'node') {
    $node_type = node_type_get_type($instance['bundle']);
    $label = format_string('@label (@entity_type label)', array('@label' => $node_type->title_label, '@entity_type' => $entity_info['label']));
  }
  else {
    $label = t('@entity_type label', array('@entity_type' => $entity_info['label']));
  }
  $options['concat_field_entity_label'] = $label;
  $info = field_info_fields();
  $types = field_info_field_types();
  foreach (field_info_instances($instance['entity_type'], $instance['bundle']) as $key => $other_instance) {
    $field_type = $info[$key]['type'];
    $options[$key] = t('@name (%type)', array('@name' => $other_instance['label'], '%type' => $types[$field_type]['label']));
  }
  // Remove this field.
  unset($options[$field['field_name']]);
  $form['selected_fields'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Selected fields'),
    '#description' => t('The display values of these fields will be combined to serve as the value of this field.'),
    '#options' => $options,
    '#default_value' => $instance['settings']['selected_fields'],
  );

  return $form;
}

/**
 * Implements hook_field_widget_form().
 */
function concat_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  return array();
}

/**
 * Implements hook_field_formatter_info().
 */
function concat_field_field_formatter_info() {
  return array(
    'concat_field_blank' => array(
      'label' => t('No output'),
      'field types' => array('concat_field'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function concat_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  return array();
}

/**
 * Implements field hook_field_presave().
 */
function concat_field_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  $output = array();
  $selected_fields = array_filter($instance['settings']['selected_fields']);
  $wrapper = entity_metadata_wrapper($entity_type, $entity);
  if (isset($selected_fields['concat_field_entity_label'])) {
    $output[] = $wrapper->label();
    unset($selected_fields['concat_field_entity_label']);
  }
  // For each selected field, find the text representation.
  foreach ($selected_fields as $selected_field) {
    if (!isset($wrapper->$selected_field)) {
      watchdog('concat_field', 'The selected field %selected_field is no longer valid for the concat_field %field on the %bundle %entity_type type.', array('%selected_field' => $selected_field, '%field' => $field['field_name'], '%bundle' => $wrapper->getBundle(), '%entity_type' => $entity_type));
      continue;
    }

    try {
      // Loop through lists.
      if ($wrapper->$selected_field instanceof EntityListWrapper || $wrapper->$selected_field instanceof EntityStructureWrapper) {
        foreach ($wrapper->$selected_field as $item) {
          // Handle referenced entities.
          if ($item instanceof EntityDrupalWrapper) {
            $output[] = $item->view();
          }
          elseif ($item->type() != 'token') {
            $output[] = $item->value();
          }
        }
      }
      // Handle simple fields.
      elseif ($wrapper->$selected_field instanceof EntityValueWrapper) {
        $output[] = $wrapper->$selected_field->value();
      }
    }
    catch (EntityMetadataWrapperException $e) {
      watchdog('concat_field', 'The selected field %selected_field is invalid for the concat_field %field on the %bundle %entity_type type.', array('%selected_field' => $selected_field, '%field' => $field['field_name'], '%bundle' => $wrapper->getBundle(), '%entity_type' => $entity_type));
    }
  }
  // Ensure each value is a string containing no HTML.
  foreach ($output as &$item) {
    $item = trim(preg_replace('#<[^>]+>#', ' ', render($item)));
  }

  // Concatenate the values and store it.
  $items[0]['value'] = implode(' ', array_filter($output));
}
